*GitHub Repository "Peersyst/opensea-js"*

'''--- CHANGELOG.md ---
# Changelog

Full changelog coming soon. For now, here are the most important changes for doing major migrations:

## Migrating to version 1.2
- `OpenSeaPort::computeFees()` No longer accepts an `isPrivate` parameter.

## Migrating to version 1.1
- `OpenSeaPort::computeFees()` No longer accepts a `fees` parameter, relying solely on `asset`.

## Migrating to version 1.0

Version 1.0 introduces bundling for semi-fungible and fungible assets, serialized asset collections, a smaller bundle size, and more, along with many bug fixes.

**Breaking directory changes**
- Many constants inside of `/utils` have been moved to `/constants`.
- Other utils have been moved to `/utils/utils`

**Breaking type changes**
- `profile_img_url` in the `OpenSeaAccount` type has been renamed to `profileImgUrl`
- `OpenSeaPort::computeFees()` now returns a new type, `ComputedFees`, which expands "BPS" to "BasisPoints" for each of its member keys

**Breaking interface changes**
- `OpenSeaPort::computeFees()` now takes in a single asset, and returns a new and more consistent type, `ComputedFees`
- `schemaName` has been moved out of main method calls and into the `Asset` type
- `OpenSeaAPI::getAsset()` now accepts named arguments, consistent with other methods
- `OpenSeaPort::createFactorySellOrders` now accepts an `assets` parameter consistent with the other `Asset` type parameters in other methods
- `OpenSeaPort::getTokenBalance()` no longer defaults to the WETH address if no `tokenAddress` is set. And it accepts a `schemaName` parameter instead of an ABI
- `OpenSeaPort::approveNonFungibleToken()` has been renamed to `approveSemiOrNonFungibleToken()`, though it always worked for semi-fungible tokens like ERC-1155

**Removed deprecations:**
- `OpenSeaPort::transferOne()`, replaced by `OpenSeaPort::transfer()`
- `tokenId` and `tokenAddress` parameters for most SDK methods, replaced by creating an `Asset` type and passing that in

## Migrating to version 0.6

Version 0.6 introduces some major new features, including trading fungible and semi-fungible assets (including ERC-20 and ERC-1155 assets). These have been architected to maximize backwards compatibility, but there were a few breaking changes:

- The `Asset` type now has `version` instead of `nftVersion` as a property
- Similarly, the `NFTVersion` type has been renamed `TokenStandardVersion`
- `computeFees` now takes in a single, annotated OpenSeaAsset as a parameter instead of a list of assets
- In `isAssetTransferrable`, `didOwnerApprove` was renamed to `useProxy`

Non-breaking changes with deprecation notices:

- `getFungibleTokens` has been deprecated. Use `api.getPaymentTokens`
- Methods now show a deprecation warning when used with `tokenId` or `tokenAddress` as arguments, instead of using `asset` or `assets` (of type `Asset`/`Asset[]`)
'''
'''--- README.md ---
<p align="center">
  <img src="https://storage.googleapis.com/opensea-static/opensea-js-logo-updated.png" />
</p>

# OpenSea.js <!-- omit in toc -->

[![https://badges.frapsoft.com/os/mit/mit.svg?v=102](https://badges.frapsoft.com/os/mit/mit.svg?v=102)](https://opensource.org/licenses/MIT)
<!-- [![npm](https://img.shields.io/npm/v/wyvern-js.svg)](https://www.npmjs.com/package/wyvern-js) [![npm](https://img.shields.io/npm/dt/wyvern-js.svg)](https://www.npmjs.com/package/wyvern-js) -->

A JavaScript library for crypto-native ecommerce: buying, selling, and bidding on any cryptogood. With OpenSea.js, you can easily build your own native marketplace for your non-fungible tokens, or NFTs. These can be ERC-721 or ERC-1155 (semi-fungible) items. You don't have to deploy your own smart contracts or backend orderbooks.

Published on [GitHub](https://github.com/ProjectOpenSea/opensea-js) and [npm](https://www.npmjs.com/package/opensea-js)

- [Synopsis](#synopsis)
- [Installation](#installation)
- [Getting Started](#getting-started)
  - [Fetching Assets](#fetching-assets)
    - [Checking Balances and Ownerships](#checking-balances-and-ownerships)
  - [Making Offers](#making-offers)
    - [Bidding on Multiple Assets](#bidding-on-multiple-assets)
    - [Bidding on ENS Short Name Auctions](#bidding-on-ens-short-name-auctions)
  - [Making Listings / Selling Items](#making-listings--selling-items)
    - [Creating English Auctions](#creating-english-auctions)
  - [Running Crowdsales](#running-crowdsales)
  - [Fetching Orders](#fetching-orders)
  - [Buying Items](#buying-items)
  - [Accepting Offers](#accepting-offers)
  - [Transferring Items or Coins (Gifting)](#transferring-items-or-coins-gifting)
- [Affiliate Program](#affiliate-program)
  - [Referring Listings](#referring-listings)
  - [Referring Offers](#referring-offers)
  - [Custom Affiliate Programs](#custom-affiliate-programs)
  - [Custom Referral Bounties](#custom-referral-bounties)
- [Advanced](#advanced)
  - [Scheduling Future Listings](#scheduling-future-listings)
  - [Purchasing Items for Other Users](#purchasing-items-for-other-users)
  - [Bulk Transfers](#bulk-transfers)
  - [Creating Bundles](#creating-bundles)
  - [Using ERC-20 Tokens Instead of Ether](#using-erc-20-tokens-instead-of-ether)
  - [Private Auctions](#private-auctions)
  - [Sharing Sale Fees with OpenSea](#sharing-sale-fees-with-opensea)
  - [Listening to Events](#listening-to-events)
- [Learning More](#learning-more)
  - [Example Code](#example-code)
- [Migrating to version 1.0](#migrating-to-version-10)
- [Development Information](#development-information)
- [Diagnosing Common Issues](#diagnosing-common-issues)

## Synopsis

This is the JavaScript SDK for [OpenSea](https://opensea.io), the largest marketplace for crypto collectibles. It allows developers to access the official orderbook, filter it, create buy orders (**offers**), create sell orders (**auctions**), create collections of assets to sell at once (**bundles**), and complete trades programmatically.

For the first time, you can build a *cryptocommerce dapp*.

You get started by instantiating your own seaport. Then you can create orders off-chain or fulfill orders on-chain, and listen to events (like `ApproveAllAssets` or `WrapEth`) in the process.

Happy seafaring! ‚õµÔ∏è

## Installation

We recommend switching to Node.js version 8.11 to make sure common crypto dependencies work. Execute `nvm use`, if you have Node Version Manager.

Then, in your project, run:
```bash
npm install --save opensea-js
```

Install [web3](https://github.com/ethereum/web3.js) too if you haven't already.

If you run into an error while building the dependencies and you're on a Mac, run this:

```bash
xcode-select --install # Install Command Line Tools if you haven't already.
sudo xcode-select --switch /Library/Developer/CommandLineTools # Enable command line tools
sudo npm explore npm -g -- npm install node-gyp@latest # (Optional) update node-gyp
```

## Getting Started

To get started, create a new OpenSeaJS client, called an OpenSeaPort üö¢, using your Web3 provider:

```JavaScript
import * as Web3 from 'web3'
import { OpenSeaPort, Network } from 'opensea-js'

// This example provider won't let you make transactions, only read-only calls:
const provider = new Web3.providers.HttpProvider('https://mainnet.infura.io')

const seaport = new OpenSeaPort(provider, {
  networkName: Network.Main
})
```

**NOTE:** Using the sample Infura provider above won't let you authorize transactions, which are needed when approving and trading assets and currency. To make transactions, you need a provider with a private key or mnemonic set.

In a browser with web3 or an extension like [MetaMask](https://metamask.io/) or [Dapper](http://www.meetdapper.com/), you can use `window.ethereum` (or `window.web3.currentProvider` for legacy mobile web3 browsers) to access the native provider. In a Node.js script, you can follow [this example](https://github.com/ProjectOpenSea/opensea-creatures/blob/master/scripts/sell.js) to use a custom mnemonic.

### Fetching Assets

Assets are items on OpenSea. They can be non-fungible (conforming to standards like ERC721), semi-fungible (like ERC1155 assets), and even fungible (ERC20).

Assets are represented by the `Asset` type, defined in TypeScript:

```TypeScript
/**
 * Simple, unannotated non-fungible asset spec
 */
export interface Asset {
  // The asset's token ID, or null if ERC-20
  tokenId: string | null,
  // The asset's contract address
  tokenAddress: string,
  // The Wyvern schema name (defaults to "ERC721") for this asset
  schemaName?: WyvernSchemaName,
  // Optional for ENS names
  name?: string,
  // Optional for fungible items
  decimals?: number
}
```

The `Asset` type is the minimal type you need for most marketplace actions. `WyvernSchemaName` is optional. If omitted, most actions will assume you're referring to a non-fungible, ERC721 asset. Other options include 'ERC20' and 'ERC1155'. You can import `import { WyvernSchemaName } from "opensea-js/lib/types"` to get the full range of schemas supported.

You can fetch an asset using the `OpenSeaAPI`, which will return an `OpenSeaAsset` for you (`OpenSeaAsset` extends `Asset`):

```TypeScript
const asset: OpenSeaAsset = await seaport.api.getAsset({
  tokenAddress, // string
  tokenId, // string | number | null
})
```

Note that fungible ERC20 assets have `null` as their token id.

#### Checking Balances and Ownerships

The nice thing about the `Asset` type is that it unifies logic between fungibles, non-fungibles, and semi-fungibles.

Once you have an `Asset`, you can see how many any account owns, regardless of whether it's an ERC-20 token or a non-fungible good:

```JavaScript

const asset = {
  tokenAddress: "0x06012c8cf97bead5deae237070f9587f8e7a266d", // CryptoKitties
  tokenId: "1", // Token ID
}

const balance = await seaport.getAssetBalance({
  accountAddress, // string
  asset, // Asset
})

const ownsKitty = balance.greaterThan(0)
```

You can use this same method for fungible ERC-20 tokens like wrapped ETH (WETH). As a convenience, you can use this fungible wrapper for checking fungible balances:

```JavaScript
const balanceOfWETH = await seaport.getTokenBalance({
  accountAddress, // string
  tokenAddress: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
})
```

### Making Offers

Once you have your asset, you can do this to make an offer on it:

```JavaScript
// Token ID and smart contract address for a non-fungible token:
const { tokenId, tokenAddress } = YOUR_ASSET
// The offerer's wallet address:
const accountAddress = "0x1234..."

const offer = await seaport.createBuyOrder({
  asset: {
    tokenId,
    tokenAddress,
    schemaName // WyvernSchemaName. If omitted, defaults to 'ERC721'. Other options include 'ERC20' and 'ERC1155'
  },
  accountAddress,
  // Value of the offer, in units of the payment token (or wrapped ETH if none is specified):
  startAmount: 1.2,
})
```

When you make an offer on an item owned by an OpenSea user, **that user will automatically get an email notifying them with the offer amount**, if it's above their desired threshold.

#### Bidding on Multiple Assets

You can also make an offer on a bundle of assets. This could also be used for creating a bounty for whoever can acquire a list of items. Here's how you do it:

```JavaScript
const assets = YOUR_ASSETS
const offer = await seaport.createBundleBuyOrder({
  assets,
  accountAddress,
  startAmount: 2.4,
  // Optional expiration time for the order, in Unix time (seconds):
  expirationTime: Math.round(Date.now() / 1000 + 60 * 60 * 24) // One day from now
})
```

When you bid on multiple assets, an email will be sent to the owner if a bundle exists on OpenSea that contains the assets. In the future, OpenSea will send emails to multiple owners if the assets aren't all owned by the same wallet.

#### Bidding on ENS Short Name Auctions

The Ethereum Name Service (ENS) is auctioning short (3-6 character) names that can be used for labeling wallet addresses and more. Learn more on the [ENS FAQ](https://opensea.io/ens).

To bid, you must use the ENS Short Name schema:

```JavaScript
const {
  tokenId,
  // Token address should be `0xfac7bea255a6990f749363002136af6556b31e04` on mainnet
  tokenAddress,
  // Name must have `.eth` at the end and correspond with the tokenId
  name
} = ENS_ASSET // You can get an ENS asset from `seaport.api.getAsset(...)`

const offer = await seaport.createBuyOrder({
  asset: {
    tokenId,
    tokenAddress,
    name,
    // Only needed for the short-name auction, not ENS names
    // that have been sold once already:
    schemaName: "ENSShortNameAuction"
  },
  // Your wallet address (the bidder's address):
  accountAddress: "0x1234..."
  // Value of the offer, in wrapped ETH:
  startAmount: 1.2,
})
```

### Making Listings / Selling Items

To sell an asset, call `createSellOrder`. You can do a fixed-price listing, where `startAmount` is equal to `endAmount`, or a declining [Dutch auction](https://en.wikipedia.org/wiki/Dutch_auction), where `endAmount` is lower and the price declines until `expirationTime` is hit:

```JavaScript
// Expire this auction one day from now.
// Note that we convert from the JavaScript timestamp (milliseconds):
const expirationTime = Math.round(Date.now() / 1000 + 60 * 60 * 24)

const listing = await seaport.createSellOrder({
  asset: {
    tokenId,
    tokenAddress,
  },
  accountAddress,
  startAmount: 3,
  // If `endAmount` is specified, the order will decline in value to that amount until `expirationTime`. Otherwise, it's a fixed-price order:
  endAmount: 0.1,
  expirationTime
})
```

The units for `startAmount` and `endAmount` are Ether, ETH. If you want to specify another ERC-20 token to use, see [Using ERC-20 Tokens Instead of Ether](#using-erc-20-tokens-instead-of-ether).

See [Listening to Events](#listening-to-events) to respond to the setup transactions that occur the first time a user sells an item.

#### Creating English Auctions

English Auctions are auctions that start at a small amount (we recommend even doing 0!) and increase with every bid. At expiration time, the item sells to the highest bidder.

To create an English Auction, create a listing that waits for the highest bid by setting `waitForHighestBid` to `true`:

```JavaScript

// Create an auction to receive Wrapped Ether (WETH). See note below.
const paymentTokenAddress = "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"

const startAmount = 0 // The minimum amount to sell for, in normal units (e.g. ETH)

const auction = await seaport.createSellOrder({
  asset: {
    tokenId,
    tokenAddress,
  },
  accountAddress,
  startAmount,
  expirationTime,
  paymentTokenAddress,
  waitForHighestBid: true
})
```

Note that auctions aren't supported with Ether directly due to limitations in Ethereum, so you have to use an ERC20 token, like Wrapped Ether (WETH), a stablecoin like DAI, etc. See [Using ERC-20 Tokens Instead of Ether](#using-erc-20-tokens-instead-of-ether) for more info.

### Running Crowdsales

You can now sell items to users **without having to pay gas to mint them**!

To create a presale or crowdsale and create batches of sell orders for a single asset factory, first follow the [tutorial](https://docs.opensea.io/docs/opensea-initial-item-sale-tutorial) for creating your crowdsale contract.

Then call `createFactorySellOrders` with your factory contract address and asset option identifier, and set `numberOfOrders` to the number of assets you'd like to let users buy and mint:

```JavaScript
// Expire these auctions one day from now
const expirationTime = Math.round(Date.now() / 1000 + 60 * 60 * 24)

const sellOrders = await seaport.createFactorySellOrders({
  assetId: ASSET_OPTION_ID,
  factoryAddress: FACTORY_CONTRACT_ADDRESS,
  accountAddress,
  startAmount,
  endAmount,
  expirationTime,
  // Will create 100 sell orders in parallel batches of 10, to speed things up:
  numberOfOrders: 100
})
```

Here's an [example script](https://github.com/ProjectOpenSea/opensea-creatures/blob/master/scripts/sell.js) you can use to mint items.

**NOTE:** If `numberOfOrders` is greater than 5, we will automatically batch them in groups of 5 so you can post orders in parallel. Requires an `apiKey` to be set during seaport initialization in order to not be throttled by the API.

Games using this method include [Coins & Steel](https://opensea.io/assets/coins&steelfounderssale) and a couple in stealth :) If you have questions or want support, contact us at contact@opensea.io (or in [Discord](https://discord.gg/ga8EJbv)).

### Fetching Orders

To retrieve a list of offers and auction on an asset, you can use an instance of the `OpenSeaAPI` exposed on the client. Parameters passed into API filter objects are underscored instead of camel-cased, similar to the main [OpenSea API parameters](https://docs.opensea.io/v1.0/reference):

```JavaScript
import { OrderSide } from 'opensea-js/lib/types'

// Get offers (bids), a.k.a. orders where `side == 0`
const { orders, count } = await seaport.api.getOrders({
  asset_contract_address: tokenAddress,
  token_id: token_id,
  side: OrderSide.Buy
})

// Get page 2 of all auctions, a.k.a. orders where `side == 1`
const { orders, count } = await seaport.api.getOrders({
  asset_contract_address: tokenAddress,
  token_id: token_id,
  side: OrderSide.Sell
}, 2)
```

Note that the listing price of an asset is equal to the `currentPrice` of the **lowest valid sell order** on the asset. Users can lower their listing price without invalidating previous sell orders, so all get shipped down until they're cancelled or one is fulfilled.

To learn more about signatures, makers, takers, listingTime vs createdTime and other kinds of order terminology, please read the [**Terminology Section**](https://docs.opensea.io/reference#terminology) of the API Docs.

The available API filters for the orders endpoint is documented in the `OrderJSON` interface below, but see the main [API Docs](https://docs.opensea.io/reference#reference-getting-started) for a playground, along with more up-to-date and detailed explanantions.

```TypeScript
/**
   * Attrs used by orderbook to make queries easier
   * More to come soon!
   */
  maker?: string, // Address of the order's creator
  taker?: string, // The null address if anyone is allowed to take the order
  side?: OrderSide, // 0 for offers, 1 for auctions
  owner?: string, // Address of owner of the order's asset
  sale_kind?: SaleKind, // 0 for fixed-price, 1 for Dutch auctions
  asset_contract_address?: string, // Contract address for order's asset
  token_id?: number | string,
  token_ids?: Array<number | string>,
  listed_after?: number | string, // This means listing_time > value in seconds
  listed_before?: number | string, // This means listing_time <= value in seconds

  // For pagination
  limit?: number,
  offset?: number,
```

### Buying Items

To buy an item , you need to **fulfill a sell order**. To do that, it's just one call:

```JavaScript
const order = await seaport.api.getOrder({ side: OrderSide.Sell, ... })
const accountAddress = "0x..." // The buyer's wallet address, also the taker
const transactionHash = await this.props.seaport.fulfillOrder({ order, accountAddress })
```

Note that the `fulfillOrder` promise resolves when the transaction has been confirmed and mined to the blockchain. To get the transaction hash before this happens, add an event listener (see [Listening to Events](#listening-to-events)) for the `TransactionCreated` event.

If the order is a sell order (`order.side === OrderSide.Sell`), the taker is the *buyer* and this will prompt the buyer to pay for the item(s).

### Accepting Offers

Similar to fulfilling sell orders above, you need to fulfill a buy order on an item you own to receive the tokens in the offer.

```JavaScript
const order = await seaport.api.getOrder({ side: OrderSide.Buy, ... })
const accountAddress = "0x..." // The owner's wallet address, also the taker
await this.props.seaport.fulfillOrder({ order, accountAddress })
```

If the order is a buy order (`order.side === OrderSide.Buy`), then the taker is the *owner* and this will prompt the owner to exchange their item(s) for whatever is being offered in return. See [Listening to Events](#listening-to-events) below to respond to the setup transactions that occur the first time a user accepts a bid.

### Transferring Items or Coins (Gifting)

A handy feature in OpenSea.js is the ability to transfer any supported asset (fungible or non-fungible tokens) in one line of JavaScript.

To transfer an ERC-721 asset or an ERC-1155 asset, it's just one call:

```JavaScript

const transactionHash = await seaport.transfer({
  asset: { tokenId, tokenAddress },
  fromAddress, // Must own the asset
  toAddress
})
```

For fungible ERC-1155 assets, you can set `schemaName` to "ERC1155" and pass a `quantity` in to transfer multiple at once:

```JavaScript

const transactionHash = await seaport.transfer({
  asset: {
    tokenId,
    tokenAddress,
    schemaName: "ERC1155"
  },
  fromAddress, // Must own the asset
  toAddress,
  quantity: 2,
})
```

To transfer fungible assets without token IDs, like ERC20 tokens, you can pass in an `OpenSeaFungibleToken` as the `asset`, set `schemaName` to "ERC20", and include `quantity` in base units (e.g. wei) to indicate how many.

Example for transfering 2 DAI ($2) to another address:

```JavaScript
const paymentToken = (await seaport.api.getPaymentTokens({ symbol: 'DAI'})).tokens[0]
const quantity = new BigNumber(Math.pow(10, paymentToken.decimals)).times(2)
const transactionHash = await seaport.transfer({
  asset: {
    tokenId: null,
    tokenAddress: paymentToken.address,
    schemaName: "ERC20"
  },
  fromAddress, // Must own the tokens
  toAddress,
  quantity
})
```

For more information, check out the documentation for WyvernSchemas on https://projectopensea.github.io/opensea-js/.

## Affiliate Program

OpenSea.js allows to you easily create an affiliate program in just a few lines of JavaScript! It's the crypto-equivalent of bounty hunting, and best of all, it's **fully paid for by OpenSea** so you can keep all of your winnings üí∞

If you want to be an affiliate, you can use this to **win at least 1%** of the sale price of any listing, both for assets and bundles.

### Referring Listings

You can instantly create an affiliate program for your assets by just passing in one more parameter when fulfilling orders... **and OpenSea will pay for it!** Whenever someone refers a sale or the acceptance of an offer, you can add a `referrerAddress` to give their wallet credit:

```JavaScript
const referrerAddress = "0x..." // The referrer's wallet address
await this.props.seaport.fulfillOrder({ order, accountAddress, referrerAddress })
```

This works for buying assets and bundles, along with accepting bids that had no referrer attached to them (see below).

As long as the referrer hasn't referred the buyer before, OpenSea will send the referrer an email congradulating them, along with **1%** of the item's sale price. If you'd like to be able to refer the same user for multiple purchases, contact us at contact@opensea.io (or in [Discord](https://discord.gg/ga8EJbv)).

### Referring Offers

Now you can also refer offers on assets! When the seller accepts the offer, the referrer will get credit:

```JavaScript
const referrerAddress = "0x..." // The referrer's wallet address
await this.props.seaport.createBuyOrder({
  asset: {
    tokenId,
    tokenAddress,
  },
  accountAddress, // Address of the bidder
  startAmount: 1.2,
  referrerAddress // Address of the referrer
})
```

The same thing works for `createBundleBuyOrder`.

### Custom Affiliate Programs

You can use `createBuyOrder({ referrerAddress })` to create your own affiliate programs as well.

When buyers place offers or bids on an asset, the referrers will automatically be recorded on OpenSea.io. Then, you can use the [Orderbook API](https://docs.opensea.io/reference#retrieving-orders) to inspect the `metadata` for orders and manually pay out referrers if you want to. The referrer will be labeled as `referrerAddress` in the `metadata` field.

### Custom Referral Bounties

Sellers can customize the bounties they add to their items when listing them for sale. By default, OpenSea will pay referrers 1% and sellers pay them nothing, but sellers can increase this up to the full OpenSea fee (currently 2.5% for most assets) for both assets and bundles:

```JavaScript
// Price the Genesis CryptoKitty at 100 ETH
const startAmount = 100
// Reward referrers with 10% of the final sale price,
// or 10 ETH in this case
const extraBountyPercent = 10
// The final bounty will be 10% + 1% from OpenSea, or 11 ETH!

const auction = await seaport.createSellOrder({
  tokenAddress: "0x06012c8cf97bead5deae237070f9587f8e7a266d", // CryptoKitties
  tokenId: "1", // Token ID
  accountAddress: OWNERS_WALLET_ADDRESS,
  startAmount,
  extraBountyBasisPoints: extraBountyPercent * 100
})
```

**NOTE:** The final bounty in the example above will be 10% from the seller plus 1% from OpenSea, or 11 ETH in total!

Developers can request to increase the OpenSea fee to allow for higher bounties - by default, it's capped at 2.5%. If you have any questions, contact us at contact@opensea.io (or in [Discord](https://discord.gg/ga8EJbv)), or join the program at https://opensea.io/account#referrals.

## Advanced

Interested in purchasing for users server-side or with a bot, making bundling items together, scheduling future orders, or making bids in different ERC-20 tokens? OpenSea.js can help with that.

### Scheduling Future Listings

You can create sell orders that aren't fulfillable until a future date. Just pass in a `listingTime` (a UTC timestamp in seconds) to your seaport instance:

```JavaScript
const auction = await seaport.createSellOrder({
  tokenAddress,
  tokenId,
  accountAddress,
  startAmount: 1,
  listingTime: Math.round(Date.now() / 1000 + 60 * 60 * 24) // One day from now
})
```

### Purchasing Items for Other Users

You can buy and transfer an item to someone else in one step! Just pass the `recipientAddress` parameter:

```JavaScript
const order = await seaport.api.getOrder({ side: OrderSide.Sell, ... })
await this.props.seaport.fulfillOrder({
  order,
  accountAddress, // The address of your wallet, which will sign the transaction
  recipientAddress // The address of the recipient, i.e. the wallet you're purchasing on behalf of
})
```

If the order is a sell order (`order.side === OrderSide.Sell`), the taker is the *buyer* and this will prompt the buyer to pay for the item(s) but send them to the `recipientAddress`. If the order is a buy order ( `OrderSide.Buy`), the taker is the *seller* but the bid amount be sent to the `recipientAddress`.

### Bulk Transfers

A handy feature in OpenSea.js is the ability to transfer multiple items at once in a single transaction. This works by grouping together as many `transferFrom` calls as the Ethereum gas limit allows, which is usually under 30 items, for most item contracts.

To make a bulk transfer, it's just one call:

```JavaScript
const assets: Array<{tokenId: string; tokenAddress: string}> = [...]

const transactionHash = await seaport.transferAll({
  assets,
  fromAddress, // Must own all the assets
  toAddress
})
```

This will automatically approve the assets for trading and confirm the transaction for sending them.

### Creating Bundles

You can also create bundles of assets to sell at the same time! If the owner has approved all the assets in the bundle already, only a signature is needed to create it.

To make a bundle, it's just one call:

```JavaScript
const assets: Array<{tokenId: string; tokenAddress: string}> = [...]

const bundle = await seaport.createBundleSellOrder({
  bundleName, bundleDescription, bundleExternalLink,
  assets, accountAddress, startAmount, endAmount,
  expirationTime, paymentTokenAddress
})
```

The parameters `bundleDescription`, `bundleExternalLink`, and `expirationTime` are optional, and `endAmount` can equal `startAmount`, similar to the normal `createSellOrder` functionality.

The parameter `paymentTokenAddress` is the address of the ERC-20 token to accept in return. If it's `undefined` or `null`, the amount is assumed to be in Ether.

Wait what, you can use other currencies than ETH?

### Using ERC-20 Tokens Instead of Ether

Here's an example of listing the Genesis CryptoKitty for $100! No more needing to worry about the exchange rate:

```JavaScript
// Token address for the DAI stablecoin, which is pegged to $1 USD
const paymentTokenAddress = "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"

// The units for `startAmount` and `endAmount` are now in DAI, so $100 USD
const auction = await seaport.createSellOrder({
  tokenAddress: "0x06012c8cf97bead5deae237070f9587f8e7a266d", // CryptoKitties
  tokenId: "1", // Token ID
  accountAddress: OWNERS_WALLET_ADDRESS,
  startAmount: 100,
  paymentTokenAddress
})
```

You can use `getPaymentTokens` to search for tokens by symbol name. And you can even list all orders for a specific ERC-20 token by querying the API:

```JavaScript
const token = (await seaport.api.getPaymentTokens({ symbol: 'MANA'})).tokens[0]

const order = await seaport.api.getOrders({
  side: OrderSide.Sell,
  payment_token_address: token.address
})
```

**Fun note:** soon, all ERC-20 tokens will be allowed! This will mean you can create crazy offers on crypto collectibles **using your own ERC-20 token**. However, opensea.io will only display offers and auctions in ERC-20 tokens that it knows about, optimizing the user experience of order takers. Orders made with the following tokens will be shown on OpenSea:

* MANA, Decentraland's currency: https://etherscan.io/token/0x0f5d2fb29fb7d3cfee444a200298f468908cc942 
* DAI, Maker's stablecoin, pegged to $1 USD: https://etherscan.io/token/0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359
* And tons more! See the "Currencies" list in the sidebar on https://opensea.io/assets for a full list, or contact us to add yours: [Discord](https://discord.gg/ga8EJbv)

### Private Auctions

Now you can make auctions and listings that can only be fulfilled by an address or email of your choosing. This allows you to negotiate a price in some channel and sell for your chosen price on OpenSea, **without having to trust that the counterparty will abide by your terms!**

Here's an example of listing a Decentraland parcel for 10 ETH with a specific buyer address allowed to take it. No more needing to worry about whether they'll give you enough back!

```JavaScript
// Address allowed to buy from you
const buyerAddress = "0x123..."

const listing = await seaport.createSellOrder({
  tokenAddress: "0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d", // Decentraland
  tokenId: "115792089237316195423570985008687907832853042650384256231655107562007036952461", // Token ID
  accountAddress: OWNERS_WALLET_ADDRESS,
  startAmount: 10,
  buyerAddress
})
```

### Sharing Sale Fees with OpenSea

We share fees for successful sales with game developers, relayers, and affiliates using the OpenSea orderbook. Developers can customize the fee amount to apply to  buyers and/or sellers.

See [Affiliate Program](#affiliate-program) above for how to register referrers for sales.

More information will appear here when our redesigned affiliate program is ready. In the meantime, contact us at contact@opensea.io (or in [Discord](https://discord.gg/ga8EJbv)), or use our legacy affiliate program at https://opensea.io/account#referrals.

### Listening to Events

Events are fired whenever transactions or orders are being created, and when transactions return receipts from recently mined blocks on the Ethereum blockchain.

Our recommendation is that you "forward" OpenSea events to your own store or state management system. Here's an example of doing that with a Redux action:

```JavaScript
import { EventType } from 'opensea-js'
import * as ActionTypes from './index'
import { openSeaPort } from '../globalSingletons'

// ...

handleSeaportEvents() {
  return async function(dispatch, getState) {
    openSeaPort.addListener(EventType.TransactionCreated, ({ transactionHash, event }) => {
      console.info({ transactionHash, event })
      dispatch({ type: ActionTypes.SET_PENDING_TRANSACTION_HASH, hash: transactionHash })
    })
    openSeaPort.addListener(EventType.TransactionConfirmed, ({ transactionHash, event }) => {
      console.info({ transactionHash, event })
      // Only reset your exchange UI if we're finishing an order fulfillment or cancellation
      if (event == EventType.MatchOrders || event == EventType.CancelOrder) {
        dispatch({ type: ActionTypes.RESET_EXCHANGE })
      }
    })
    openSeaPort.addListener(EventType.TransactionDenied, ({ transactionHash, event }) => {
      console.info({ transactionHash, event })
      dispatch({ type: ActionTypes.RESET_EXCHANGE })
    })
    openSeaPort.addListener(EventType.TransactionFailed, ({ transactionHash, event }) => {
      console.info({ transactionHash, event })
      dispatch({ type: ActionTypes.RESET_EXCHANGE })
    })
    openSeaPort.addListener(EventType.InitializeAccount, ({ accountAddress }) => {
      console.info({ accountAddress })
      dispatch({ type: ActionTypes.INITIALIZE_PROXY })
    })
    openSeaPort.addListener(EventType.WrapEth, ({ accountAddress, amount }) => {
      console.info({ accountAddress, amount })
      dispatch({ type: ActionTypes.WRAP_ETH })
    })
    openSeaPort.addListener(EventType.UnwrapWeth, ({ accountAddress, amount }) => {
      console.info({ accountAddress, amount })
      dispatch({ type: ActionTypes.UNWRAP_WETH })
    })
    openSeaPort.addListener(EventType.ApproveCurrency, ({ accountAddress, tokenAddress }) => {
      console.info({ accountAddress, tokenAddress })
      dispatch({ type: ActionTypes.APPROVE_WETH })
    })
    openSeaPort.addListener(EventType.ApproveAllAssets, ({ accountAddress, proxyAddress, tokenAddress }) => {
      console.info({ accountAddress, proxyAddress, tokenAddress })
      dispatch({ type: ActionTypes.APPROVE_ALL_ASSETS })
    })
    openSeaPort.addListener(EventType.ApproveAsset, ({ accountAddress, proxyAddress, tokenAddress, tokenId }) => {
      console.info({ accountAddress, proxyAddress, tokenAddress, tokenId })
      dispatch({ type: ActionTypes.APPROVE_ASSET })
    })
    openSeaPort.addListener(EventType.CreateOrder, ({ order, accountAddress }) => {
      console.info({ order, accountAddress })
      dispatch({ type: ActionTypes.CREATE_ORDER })
    })
    openSeaPort.addListener(EventType.OrderDenied, ({ order, accountAddress }) => {
      console.info({ order, accountAddress })
      dispatch({ type: ActionTypes.RESET_EXCHANGE })
    })
    openSeaPort.addListener(EventType.MatchOrders, ({ buy, sell, accountAddress }) => {
      console.info({ buy, sell, accountAddress })
      dispatch({ type: ActionTypes.FULFILL_ORDER })
    })
    openSeaPort.addListener(EventType.CancelOrder, ({ order, accountAddress }) => {
      console.info({ order, accountAddress })
      dispatch({ type: ActionTypes.CANCEL_ORDER })
    })
  }
}
```

To remove all listeners and start over, just call `seaport.removeAllListeners()`.

## Learning More

Auto-generated documentation for each export is available [here](https://projectopensea.github.io/opensea-js/).

If you need extra help, support is free! Contact the OpenSea devs. They're available every day on [Discord](https://discord.gg/XjwWYgU) in the `#developers` channel.

### Example Code

Check out the [Ship's Log](https://github.com/ProjectOpenSea/ships-log), built with the SDK, which shows the recent orders in the OpenSea orderbook.

You can view a live demo [here](https://ships-log.herokuapp.com/)! Also check out the [Mythereum marketplace](https://mythereum.io/marketplace), which is entirely powered by OpenSea.js.

## Migrating to version 1.0

See the [Changelog](CHANGELOG.md).

## Development Information

**Setup**

[Node >= v8.11.2](https://nodejs.org/en/) required.

Before any development, install the required NPM dependencies:

```bash
npm install
```

And install TypeScript if you haven't already:

```bash
npm install -g tslint typescript
```

**Build**

Then, lint and build the library into the `lib` directory:

```bash
npm run build
```

Or run the tests:
```bash
npm test
```

Note that the tests require access to both Infura and the OpenSea API. The timeout is adjustable via the `test` script in `package.json`.

**Generate Documentation**

Generate html docs, also available for browsing [here](https://projectopensea.github.io/opensea-js/):
```bash
npm run docsHtml
```

Or generate markdown docs available for browsing on git repos:
```bash
npm run docsMarkdown
```

Due to a markdown theme typescript issue, `docs` just generates html docs right now:
```bash
npm run docs
```

**Contributing**

Contributions welcome! Please use GitHub issues for suggestions/concerns - if you prefer to express your intentions in code, feel free to submit a pull request.

## Diagnosing Common Issues

* Is the `expirationTime` in future?  If not, change it to a time in the future.

* Are the input addresses all strings? If not, convert them to strings.

* Is your computer's internal clock accurate? If not, try enabling automatic clock adjustment locally or following [this tutorial](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-time.html) to update an Amazon EC2 instance.

* Are you attempting to purchase a token that's unpurchasable on [OpenSea](https://opensea.io/)?  If so, contact us [Discord](https://discord.gg/XjwWYgU) in the `#developers` channel and we'll help to diagnose the issue.

'''
'''--- buffer-override.d.ts ---
// Fixes Buffer type override issue in feross/buffer:
// https://github.com/Microsoft/TypeScript/issues/26086

export class Buffer extends Uint8Array {
  length: number
  write(string: string, offset?: number, length?: number, encoding?: string): number;
  toString(encoding?: string, start?: number, end?: number): string;
  toJSON(): { type: 'Buffer', data: any[] };
  equals(otherBuffer: Buffer): boolean;
  compare(otherBuffer: Buffer, targetStart?: number, targetEnd?: number, sourceStart?: number, sourceEnd?: number): number;
  copy(targetBuffer: Buffer, targetStart?: number, sourceStart?: number, sourceEnd?: number): number;
  slice(start?: number, end?: number): Buffer;
  writeUIntLE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;
  writeUIntBE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;
  writeIntLE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;
  writeIntBE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;
  readUIntLE(offset: number, byteLength: number, noAssert?: boolean): number;
  readUIntBE(offset: number, byteLength: number, noAssert?: boolean): number;
  readIntLE(offset: number, byteLength: number, noAssert?: boolean): number;
  readIntBE(offset: number, byteLength: number, noAssert?: boolean): number;
  readUInt8(offset: number, noAssert?: boolean): number;
  readUInt16LE(offset: number, noAssert?: boolean): number;
  readUInt16BE(offset: number, noAssert?: boolean): number;
  readUInt32LE(offset: number, noAssert?: boolean): number;
  readUInt32BE(offset: number, noAssert?: boolean): number;
  readInt8(offset: number, noAssert?: boolean): number;
  readInt16LE(offset: number, noAssert?: boolean): number;
  readInt16BE(offset: number, noAssert?: boolean): number;
  readInt32LE(offset: number, noAssert?: boolean): number;
  readInt32BE(offset: number, noAssert?: boolean): number;
  readFloatLE(offset: number, noAssert?: boolean): number;
  readFloatBE(offset: number, noAssert?: boolean): number;
  readDoubleLE(offset: number, noAssert?: boolean): number;
  readDoubleBE(offset: number, noAssert?: boolean): number;
  swap16(): Buffer;
  swap32(): Buffer;
  swap64(): Buffer;
  writeUInt8(value: number, offset: number, noAssert?: boolean): number;
  writeUInt16LE(value: number, offset: number, noAssert?: boolean): number;
  writeUInt16BE(value: number, offset: number, noAssert?: boolean): number;
  writeUInt32LE(value: number, offset: number, noAssert?: boolean): number;
  writeUInt32BE(value: number, offset: number, noAssert?: boolean): number;
  writeInt8(value: number, offset: number, noAssert?: boolean): number;
  writeInt16LE(value: number, offset: number, noAssert?: boolean): number;
  writeInt16BE(value: number, offset: number, noAssert?: boolean): number;
  writeInt32LE(value: number, offset: number, noAssert?: boolean): number;
  writeInt32BE(value: number, offset: number, noAssert?: boolean): number;
  writeFloatLE(value: number, offset: number, noAssert?: boolean): number;
  writeFloatBE(value: number, offset: number, noAssert?: boolean): number;
  writeDoubleLE(value: number, offset: number, noAssert?: boolean): number;
  writeDoubleBE(value: number, offset: number, noAssert?: boolean): number;
  fill(value: any, offset?: number, end?: number): this;
  indexOf(value: string | number | Buffer, byteOffset?: number, encoding?: string): number;
  lastIndexOf(value: string | number | Buffer, byteOffset?: number, encoding?: string): number;
  includes(value: string | number | Buffer, byteOffset?: number, encoding?: string): boolean;

  /**
    * Allocates a new buffer containing the given {str}.
    *
    * @param str String to store in buffer.
    * @param encoding encoding to use, optional.  Default is 'utf8'
    */
  constructor (str: string, encoding?: string);
  /**
    * Allocates a new buffer of {size} octets.
    *
    * @param size count of octets to allocate.
    */
  constructor (size: number);
  /**
    * Allocates a new buffer containing the given {array} of octets.
    *
    * @param array The octets to store.
    */
  constructor (array: Uint8Array);
  /**
    * Produces a Buffer backed by the same allocated memory as
    * the given {ArrayBuffer}.
    *
    *
    * @param arrayBuffer The ArrayBuffer with which to share memory.
    */
  constructor (arrayBuffer: ArrayBuffer);
  /**
    * Allocates a new buffer containing the given {array} of octets.
    *
    * @param array The octets to store.
    */
  constructor (array: any[]);
  /**
    * Copies the passed {buffer} data onto a new {Buffer} instance.
    *
    * @param buffer The buffer to copy.
    */
  constructor (buffer: Buffer);
  prototype: Buffer;
  /**
    * Allocates a new Buffer using an {array} of octets.
    *
    * @param array
    */
  static from(array: any[]): Buffer;
  /**
    * When passed a reference to the .buffer property of a TypedArray instance,
    * the newly created Buffer will share the same allocated memory as the TypedArray.
    * The optional {byteOffset} and {length} arguments specify a memory range
    * within the {arrayBuffer} that will be shared by the Buffer.
    *
    * @param arrayBuffer The .buffer property of a TypedArray or a new ArrayBuffer()
    * @param byteOffset
    * @param length
    */
  static from(arrayBuffer: ArrayBuffer, byteOffset?: number, length?: number): Buffer;
  /**
    * Copies the passed {buffer} data onto a new Buffer instance.
    *
    * @param buffer
    */
  static from(buffer: Buffer): Buffer;
  /**
    * Creates a new Buffer containing the given JavaScript string {str}.
    * If provided, the {encoding} parameter identifies the character encoding.
    * If not provided, {encoding} defaults to 'utf8'.
    *
    * @param str
    */
  static from(str: string, encoding?: string): Buffer;
  /**
    * Returns true if {obj} is a Buffer
    *
    * @param obj object to test.
    */
  static isBuffer(obj: any): obj is Buffer;
  /**
    * Returns true if {encoding} is a valid encoding argument.
    * Valid string encodings in Node 0.12: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'
    *
    * @param encoding string to test.
    */
  static isEncoding(encoding: string): boolean;
  /**
    * Gives the actual byte length of a string. encoding defaults to 'utf8'.
    * This is not the same as String.prototype.length since that returns the number of characters in a string.
    *
    * @param string string to test.
    * @param encoding encoding used to evaluate (defaults to 'utf8')
    */
  static byteLength(string: string, encoding?: string): number;
  /**
    * Returns a buffer which is the result of concatenating all the buffers in the list together.
    *
    * If the list has no items, or if the totalLength is 0, then it returns a zero-length buffer.
    * If the list has exactly one item, then the first item of the list is returned.
    * If the list has more than one item, then a new Buffer is created.
    *
    * @param list An array of Buffer objects to concatenate
    * @param totalLength Total length of the buffers when concatenated.
    *   If totalLength is not provided, it is read from the buffers in the list. However, this adds an additional loop to the function, so it is faster to provide the length explicitly.
    */
  static concat(list: Buffer[], totalLength?: number): Buffer;
  /**
    * The same as buf1.compare(buf2).
    */
  static compare(buf1: Buffer, buf2: Buffer): number;
  /**
    * Allocates a new buffer of {size} octets.
    *
    * @param size count of octets to allocate.
    * @param fill if specified, buffer will be initialized by calling buf.fill(fill).
    *    If parameter is omitted, buffer will be filled with zeros.
    * @param encoding encoding used for call to buf.fill while initalizing
    */
  static alloc(size: number, fill?: string | Buffer | number, encoding?: string): Buffer;
  /**
    * Allocates a new buffer of {size} octets, leaving memory not initialized, so the contents
    * of the newly created Buffer are unknown and may contain sensitive data.
    *
    * @param size count of octets to allocate
    */
  static allocUnsafe(size: number): Buffer;
  /**
    * Allocates a new non-pooled buffer of {size} octets, leaving memory not initialized, so the contents
    * of the newly created Buffer are unknown and may contain sensitive data.
    *
    * @param size count of octets to allocate
    */
  static allocUnsafeSlow(size: number): Buffer;
}
'''
'''--- docs/assets/css/main.css ---
/*! normalize.css v1.1.3 | MIT License | git.io/normalize */
/* ========================================================================== HTML5 display definitions ========================================================================== */
/** Correct `block` display not defined in IE 6/7/8/9 and Firefox 3. */
article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary { display: block; }

/** Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3. */
audio, canvas, video { display: inline-block; *display: inline; *zoom: 1; }

/** Prevent modern browsers from displaying `audio` without controls. Remove excess height in iOS 5 devices. */
audio:not([controls]) { display: none; height: 0; }

/** Address styling not present in IE 7/8/9, Firefox 3, and Safari 4. Known issue: no IE 6 support. */
[hidden] { display: none; }

/* ========================================================================== Base ========================================================================== */
/** 1. Correct text resizing oddly in IE 6/7 when body `font-size` is set using `em` units. 2. Prevent iOS text size adjust after orientation change, without disabling user zoom. */
html { font-size: 100%; /* 1 */ -ms-text-size-adjust: 100%; /* 2 */ -webkit-text-size-adjust: 100%; /* 2 */ font-family: sans-serif; }

/** Address `font-family` inconsistency between `textarea` and other form elements. */
button, input, select, textarea { font-family: sans-serif; }

/** Address margins handled incorrectly in IE 6/7. */
body { margin: 0; }

/* ========================================================================== Links ========================================================================== */
/** Address `outline` inconsistency between Chrome and other browsers. */
a:focus { outline: thin dotted; }
a:active, a:hover { outline: 0; }

/** Improve readability when focused and also mouse hovered in all browsers. */
/* ========================================================================== Typography ========================================================================== */
/** Address font sizes and margins set differently in IE 6/7. Address font sizes within `section` and `article` in Firefox 4+, Safari 5, and Chrome. */
h1 { font-size: 2em; margin: 0.67em 0; }

h2 { font-size: 1.5em; margin: 0.83em 0; }

h3 { font-size: 1.17em; margin: 1em 0; }

h4, .tsd-index-panel h3 { font-size: 1em; margin: 1.33em 0; }

h5 { font-size: 0.83em; margin: 1.67em 0; }

h6 { font-size: 0.67em; margin: 2.33em 0; }

/** Address styling not present in IE 7/8/9, Safari 5, and Chrome. */
abbr[title] { border-bottom: 1px dotted; }

/** Address style set to `bolder` in Firefox 3+, Safari 4/5, and Chrome. */
b, strong { font-weight: bold; }

blockquote { margin: 1em 40px; }

/** Address styling not present in Safari 5 and Chrome. */
dfn { font-style: italic; }

/** Address differences between Firefox and other browsers. Known issue: no IE 6/7 normalization. */
hr { box-sizing: content-box; height: 0; }

/** Address styling not present in IE 6/7/8/9. */
mark { background: #ff0; color: #000; }

/** Address margins set differently in IE 6/7. */
p, pre { margin: 1em 0; }

/** Correct font family set oddly in IE 6, Safari 4/5, and Chrome. */
code, kbd, pre, samp { font-family: monospace, serif; _font-family: "courier new", monospace; font-size: 1em; }

/** Improve readability of pre-formatted text in all browsers. */
pre { white-space: pre; white-space: pre-wrap; word-wrap: break-word; }

/** Address CSS quotes not supported in IE 6/7. */
q { quotes: none; }
q:before, q:after { content: ""; content: none; }

/** Address `quotes` property not supported in Safari 4. */
/** Address inconsistent and variable font size in all browsers. */
small { font-size: 80%; }

/** Prevent `sub` and `sup` affecting `line-height` in all browsers. */
sub { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }

sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em; }

sub { bottom: -0.25em; }

/* ========================================================================== Lists ========================================================================== */
/** Address margins set differently in IE 6/7. */
dl, menu, ol, ul { margin: 1em 0; }

dd { margin: 0 0 0 40px; }

/** Address paddings set differently in IE 6/7. */
menu, ol, ul { padding: 0 0 0 40px; }

/** Correct list images handled incorrectly in IE 7. */
nav ul, nav ol { list-style: none; list-style-image: none; }

/* ========================================================================== Embedded content ========================================================================== */
/** 1. Remove border when inside `a` element in IE 6/7/8/9 and Firefox 3. 2. Improve image quality when scaled in IE 7. */
img { border: 0; /* 1 */ -ms-interpolation-mode: bicubic; }

/* 2 */
/** Correct overflow displayed oddly in IE 9. */
svg:not(:root) { overflow: hidden; }

/* ========================================================================== Figures ========================================================================== */
/** Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11. */
figure, form { margin: 0; }

/* ========================================================================== Forms ========================================================================== */
/** Correct margin displayed oddly in IE 6/7. */
/** Define consistent border, margin, and padding. */
fieldset { border: 1px solid #c0c0c0; margin: 0 2px; padding: 0.35em 0.625em 0.75em; }

/** 1. Correct color not being inherited in IE 6/7/8/9. 2. Correct text not wrapping in Firefox 3. 3. Correct alignment displayed oddly in IE 6/7. */
legend { border: 0; /* 1 */ padding: 0; white-space: normal; /* 2 */ *margin-left: -7px; }

/* 3 */
/** 1. Correct font size not being inherited in all browsers. 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5, and Chrome. 3. Improve appearance and consistency in all browsers. */
button, input, select, textarea { font-size: 100%; /* 1 */ margin: 0; /* 2 */ vertical-align: baseline; /* 3 */ *vertical-align: middle; }

/* 3 */
/** Address Firefox 3+ setting `line-height` on `input` using `!important` in the UA stylesheet. */
button, input { line-height: normal; }

/** Address inconsistent `text-transform` inheritance for `button` and `select`. All other form control elements do not inherit `text-transform` values. Correct `button` style inheritance in Chrome, Safari 5+, and IE 6+. Correct `select` style inheritance in Firefox 4+ and Opera. */
button, select { text-transform: none; }

/** 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio` and `video` controls. 2. Correct inability to style clickable `input` types in iOS. 3. Improve usability and consistency of cursor style between image-type `input` and others. 4. Remove inner spacing in IE 7 without affecting normal text inputs. Known issue: inner spacing remains in IE 6. */
button, html input[type="button"] { -webkit-appearance: button; /* 2 */ cursor: pointer; /* 3 */ *overflow: visible; }

/* 4 */
input[type="reset"], input[type="submit"] { -webkit-appearance: button; /* 2 */ cursor: pointer; /* 3 */ *overflow: visible; }

/* 4 */
/** Re-set default cursor for disabled elements. */
button[disabled], html input[disabled] { cursor: default; }

/** 1. Address box sizing set to content-box in IE 8/9. 2. Remove excess padding in IE 8/9. 3. Remove excess padding in IE 7. Known issue: excess padding remains in IE 6. */
input { /* 3 */ }
input[type="checkbox"], input[type="radio"] { box-sizing: border-box; /* 1 */ padding: 0; /* 2 */ *height: 13px; /* 3 */ *width: 13px; }
input[type="search"] { -webkit-appearance: textfield; /* 1 */ /* 2 */ box-sizing: content-box; }
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration { -webkit-appearance: none; }

/** 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome. 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome (include `-moz` to future-proof). */
/** Remove inner padding and search cancel button in Safari 5 and Chrome on OS X. */
/** Remove inner padding and border in Firefox 3+. */
button::-moz-focus-inner, input::-moz-focus-inner { border: 0; padding: 0; }

/** 1. Remove default vertical scrollbar in IE 6/7/8/9. 2. Improve readability and alignment in all browsers. */
textarea { overflow: auto; /* 1 */ vertical-align: top; }

/* 2 */
/* ========================================================================== Tables ========================================================================== */
/** Remove most spacing between table cells. */
table { border-collapse: collapse; border-spacing: 0; }

/* Visual Studio-like style based on original C# coloring by Jason Diamond <jason@diamond.name> */
.hljs { display: inline-block; padding: 0.5em; background: white; color: black; }

.hljs-comment, .hljs-annotation, .hljs-template_comment, .diff .hljs-header, .hljs-chunk, .apache .hljs-cbracket { color: #008000; }

.hljs-keyword, .hljs-id, .hljs-built_in, .css .smalltalk .hljs-class, .hljs-winutils, .bash .hljs-variable, .tex .hljs-command, .hljs-request, .hljs-status, .nginx .hljs-title { color: #00f; }

.xml .hljs-tag { color: #00f; }
.xml .hljs-tag .hljs-value { color: #00f; }

.hljs-string, .hljs-title, .hljs-parent, .hljs-tag .hljs-value, .hljs-rules .hljs-value { color: #a31515; }

.ruby .hljs-symbol { color: #a31515; }
.ruby .hljs-symbol .hljs-string { color: #a31515; }

.hljs-template_tag, .django .hljs-variable, .hljs-addition, .hljs-flow, .hljs-stream, .apache .hljs-tag, .hljs-date, .tex .hljs-formula, .coffeescript .hljs-attribute { color: #a31515; }

.ruby .hljs-string, .hljs-decorator, .hljs-filter .hljs-argument, .hljs-localvars, .hljs-array, .hljs-attr_selector, .hljs-pseudo, .hljs-pi, .hljs-doctype, .hljs-deletion, .hljs-envvar, .hljs-shebang, .hljs-preprocessor, .hljs-pragma, .userType, .apache .hljs-sqbracket, .nginx .hljs-built_in, .tex .hljs-special, .hljs-prompt { color: #2b91af; }

.hljs-phpdoc, .hljs-javadoc, .hljs-xmlDocTag { color: #808080; }

.vhdl .hljs-typename { font-weight: bold; }
.vhdl .hljs-string { color: #666666; }
.vhdl .hljs-literal { color: #a31515; }
.vhdl .hljs-attribute { color: #00b0e8; }

.xml .hljs-attribute { color: #f00; }

.col > :first-child, .col-1 > :first-child, .col-2 > :first-child, .col-3 > :first-child, .col-4 > :first-child, .col-5 > :first-child, .col-6 > :first-child, .col-7 > :first-child, .col-8 > :first-child, .col-9 > :first-child, .col-10 > :first-child, .col-11 > :first-child, .tsd-panel > :first-child, ul.tsd-descriptions > li > :first-child, .col > :first-child > :first-child, .col-1 > :first-child > :first-child, .col-2 > :first-child > :first-child, .col-3 > :first-child > :first-child, .col-4 > :first-child > :first-child, .col-5 > :first-child > :first-child, .col-6 > :first-child > :first-child, .col-7 > :first-child > :first-child, .col-8 > :first-child > :first-child, .col-9 > :first-child > :first-child, .col-10 > :first-child > :first-child, .col-11 > :first-child > :first-child, .tsd-panel > :first-child > :first-child, ul.tsd-descriptions > li > :first-child > :first-child, .col > :first-child > :first-child > :first-child, .col-1 > :first-child > :first-child > :first-child, .col-2 > :first-child > :first-child > :first-child, .col-3 > :first-child > :first-child > :first-child, .col-4 > :first-child > :first-child > :first-child, .col-5 > :first-child > :first-child > :first-child, .col-6 > :first-child > :first-child > :first-child, .col-7 > :first-child > :first-child > :first-child, .col-8 > :first-child > :first-child > :first-child, .col-9 > :first-child > :first-child > :first-child, .col-10 > :first-child > :first-child > :first-child, .col-11 > :first-child > :first-child > :first-child, .tsd-panel > :first-child > :first-child > :first-child, ul.tsd-descriptions > li > :first-child > :first-child > :first-child { margin-top: 0; }
.col > :last-child, .col-1 > :last-child, .col-2 > :last-child, .col-3 > :last-child, .col-4 > :last-child, .col-5 > :last-child, .col-6 > :last-child, .col-7 > :last-child, .col-8 > :last-child, .col-9 > :last-child, .col-10 > :last-child, .col-11 > :last-child, .tsd-panel > :last-child, ul.tsd-descriptions > li > :last-child, .col > :last-child > :last-child, .col-1 > :last-child > :last-child, .col-2 > :last-child > :last-child, .col-3 > :last-child > :last-child, .col-4 > :last-child > :last-child, .col-5 > :last-child > :last-child, .col-6 > :last-child > :last-child, .col-7 > :last-child > :last-child, .col-8 > :last-child > :last-child, .col-9 > :last-child > :last-child, .col-10 > :last-child > :last-child, .col-11 > :last-child > :last-child, .tsd-panel > :last-child > :last-child, ul.tsd-descriptions > li > :last-child > :last-child, .col > :last-child > :last-child > :last-child, .col-1 > :last-child > :last-child > :last-child, .col-2 > :last-child > :last-child > :last-child, .col-3 > :last-child > :last-child > :last-child, .col-4 > :last-child > :last-child > :last-child, .col-5 > :last-child > :last-child > :last-child, .col-6 > :last-child > :last-child > :last-child, .col-7 > :last-child > :last-child > :last-child, .col-8 > :last-child > :last-child > :last-child, .col-9 > :last-child > :last-child > :last-child, .col-10 > :last-child > :last-child > :last-child, .col-11 > :last-child > :last-child > :last-child, .tsd-panel > :last-child > :last-child > :last-child, ul.tsd-descriptions > li > :last-child > :last-child > :last-child { margin-bottom: 0; }

.container { max-width: 1200px; margin: 0 auto; padding: 0 40px; }
@media (max-width: 640px) { .container { padding: 0 20px; } }

.container-main { padding-bottom: 200px; }

.row { position: relative; margin: 0 -10px; }
.row:after { visibility: hidden; display: block; content: ""; clear: both; height: 0; }

.col, .col-1, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8, .col-9, .col-10, .col-11 { box-sizing: border-box; float: left; padding: 0 10px; }

.col-1 { width: 8.33333%; }

.offset-1 { margin-left: 8.33333%; }

.col-2 { width: 16.66667%; }

.offset-2 { margin-left: 16.66667%; }

.col-3 { width: 25%; }

.offset-3 { margin-left: 25%; }

.col-4 { width: 33.33333%; }

.offset-4 { margin-left: 33.33333%; }

.col-5 { width: 41.66667%; }

.offset-5 { margin-left: 41.66667%; }

.col-6 { width: 50%; }

.offset-6 { margin-left: 50%; }

.col-7 { width: 58.33333%; }

.offset-7 { margin-left: 58.33333%; }

.col-8 { width: 66.66667%; }

.offset-8 { margin-left: 66.66667%; }

.col-9 { width: 75%; }

.offset-9 { margin-left: 75%; }

.col-10 { width: 83.33333%; }

.offset-10 { margin-left: 83.33333%; }

.col-11 { width: 91.66667%; }

.offset-11 { margin-left: 91.66667%; }

.tsd-kind-icon { display: block; position: relative; padding-left: 20px; text-indent: -20px; }
.tsd-kind-icon:before { content: ''; display: inline-block; vertical-align: middle; width: 17px; height: 17px; margin: 0 3px 2px 0; background-image: url(../images/icons.png); }
@media (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) { .tsd-kind-icon:before { background-image: url(../images/icons@2x.png); background-size: 238px 204px; } }

.tsd-signature.tsd-kind-icon:before { background-position: 0 -153px; }

.tsd-kind-object-literal > .tsd-kind-icon:before { background-position: 0px -17px; }
.tsd-kind-object-literal.tsd-is-protected > .tsd-kind-icon:before { background-position: -17px -17px; }
.tsd-kind-object-literal.tsd-is-private > .tsd-kind-icon:before { background-position: -34px -17px; }

.tsd-kind-class > .tsd-kind-icon:before { background-position: 0px -34px; }
.tsd-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -17px -34px; }
.tsd-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -34px -34px; }

.tsd-kind-class.tsd-has-type-parameter > .tsd-kind-icon:before { background-position: 0px -51px; }
.tsd-kind-class.tsd-has-type-parameter.tsd-is-protected > .tsd-kind-icon:before { background-position: -17px -51px; }
.tsd-kind-class.tsd-has-type-parameter.tsd-is-private > .tsd-kind-icon:before { background-position: -34px -51px; }

.tsd-kind-interface > .tsd-kind-icon:before { background-position: 0px -68px; }
.tsd-kind-interface.tsd-is-protected > .tsd-kind-icon:before { background-position: -17px -68px; }
.tsd-kind-interface.tsd-is-private > .tsd-kind-icon:before { background-position: -34px -68px; }

.tsd-kind-interface.tsd-has-type-parameter > .tsd-kind-icon:before { background-position: 0px -85px; }
.tsd-kind-interface.tsd-has-type-parameter.tsd-is-protected > .tsd-kind-icon:before { background-position: -17px -85px; }
.tsd-kind-interface.tsd-has-type-parameter.tsd-is-private > .tsd-kind-icon:before { background-position: -34px -85px; }

.tsd-kind-module > .tsd-kind-icon:before { background-position: 0px -102px; }
.tsd-kind-module.tsd-is-protected > .tsd-kind-icon:before { background-position: -17px -102px; }
.tsd-kind-module.tsd-is-private > .tsd-kind-icon:before { background-position: -34px -102px; }

.tsd-kind-external-module > .tsd-kind-icon:before { background-position: 0px -102px; }
.tsd-kind-external-module.tsd-is-protected > .tsd-kind-icon:before { background-position: -17px -102px; }
.tsd-kind-external-module.tsd-is-private > .tsd-kind-icon:before { background-position: -34px -102px; }

.tsd-kind-enum > .tsd-kind-icon:before { background-position: 0px -119px; }
.tsd-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -17px -119px; }
.tsd-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -34px -119px; }

.tsd-kind-enum-member > .tsd-kind-icon:before { background-position: 0px -136px; }
.tsd-kind-enum-member.tsd-is-protected > .tsd-kind-icon:before { background-position: -17px -136px; }
.tsd-kind-enum-member.tsd-is-private > .tsd-kind-icon:before { background-position: -34px -136px; }

.tsd-kind-signature > .tsd-kind-icon:before { background-position: 0px -153px; }
.tsd-kind-signature.tsd-is-protected > .tsd-kind-icon:before { background-position: -17px -153px; }
.tsd-kind-signature.tsd-is-private > .tsd-kind-icon:before { background-position: -34px -153px; }

.tsd-kind-type-alias > .tsd-kind-icon:before { background-position: 0px -170px; }
.tsd-kind-type-alias.tsd-is-protected > .tsd-kind-icon:before { background-position: -17px -170px; }
.tsd-kind-type-alias.tsd-is-private > .tsd-kind-icon:before { background-position: -34px -170px; }

.tsd-kind-variable > .tsd-kind-icon:before { background-position: -136px -0px; }
.tsd-kind-variable.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -0px; }
.tsd-kind-variable.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -0px; }
.tsd-kind-variable.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -0px; }
.tsd-kind-variable.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -0px; }
.tsd-kind-variable.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -0px; }
.tsd-kind-variable.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -0px; }
.tsd-kind-variable.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -0px; }
.tsd-kind-variable.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -0px; }
.tsd-kind-variable.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -0px; }
.tsd-kind-variable.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -0px; }
.tsd-kind-variable.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -0px; }
.tsd-kind-variable.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -0px; }

.tsd-kind-property > .tsd-kind-icon:before { background-position: -136px -0px; }
.tsd-kind-property.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -0px; }
.tsd-kind-property.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -0px; }
.tsd-kind-property.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -0px; }
.tsd-kind-property.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -0px; }
.tsd-kind-property.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -0px; }
.tsd-kind-property.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -0px; }
.tsd-kind-property.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -0px; }
.tsd-kind-property.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -0px; }
.tsd-kind-property.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -0px; }
.tsd-kind-property.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -0px; }
.tsd-kind-property.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -0px; }
.tsd-kind-property.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -0px; }

.tsd-kind-get-signature > .tsd-kind-icon:before { background-position: -136px -17px; }
.tsd-kind-get-signature.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -17px; }
.tsd-kind-get-signature.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -17px; }
.tsd-kind-get-signature.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -17px; }
.tsd-kind-get-signature.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -17px; }
.tsd-kind-get-signature.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -17px; }
.tsd-kind-get-signature.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -17px; }
.tsd-kind-get-signature.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -17px; }
.tsd-kind-get-signature.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -17px; }
.tsd-kind-get-signature.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -17px; }
.tsd-kind-get-signature.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -17px; }
.tsd-kind-get-signature.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -17px; }
.tsd-kind-get-signature.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -17px; }

.tsd-kind-set-signature > .tsd-kind-icon:before { background-position: -136px -34px; }
.tsd-kind-set-signature.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -34px; }
.tsd-kind-set-signature.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -34px; }
.tsd-kind-set-signature.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -34px; }
.tsd-kind-set-signature.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -34px; }
.tsd-kind-set-signature.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -34px; }
.tsd-kind-set-signature.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -34px; }
.tsd-kind-set-signature.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -34px; }
.tsd-kind-set-signature.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -34px; }
.tsd-kind-set-signature.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -34px; }
.tsd-kind-set-signature.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -34px; }
.tsd-kind-set-signature.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -34px; }
.tsd-kind-set-signature.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -34px; }

.tsd-kind-accessor > .tsd-kind-icon:before { background-position: -136px -51px; }
.tsd-kind-accessor.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -51px; }
.tsd-kind-accessor.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -51px; }
.tsd-kind-accessor.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -51px; }
.tsd-kind-accessor.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -51px; }
.tsd-kind-accessor.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -51px; }
.tsd-kind-accessor.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -51px; }
.tsd-kind-accessor.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -51px; }
.tsd-kind-accessor.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -51px; }
.tsd-kind-accessor.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -51px; }
.tsd-kind-accessor.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -51px; }
.tsd-kind-accessor.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -51px; }
.tsd-kind-accessor.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -51px; }

.tsd-kind-function > .tsd-kind-icon:before { background-position: -136px -68px; }
.tsd-kind-function.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -68px; }
.tsd-kind-function.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -68px; }
.tsd-kind-function.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -68px; }
.tsd-kind-function.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -68px; }
.tsd-kind-function.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -68px; }
.tsd-kind-function.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -68px; }
.tsd-kind-function.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -68px; }
.tsd-kind-function.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -68px; }
.tsd-kind-function.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -68px; }
.tsd-kind-function.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -68px; }
.tsd-kind-function.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -68px; }
.tsd-kind-function.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -68px; }

.tsd-kind-method > .tsd-kind-icon:before { background-position: -136px -68px; }
.tsd-kind-method.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -68px; }
.tsd-kind-method.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -68px; }
.tsd-kind-method.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -68px; }
.tsd-kind-method.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -68px; }
.tsd-kind-method.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -68px; }
.tsd-kind-method.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -68px; }
.tsd-kind-method.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -68px; }
.tsd-kind-method.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -68px; }
.tsd-kind-method.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -68px; }
.tsd-kind-method.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -68px; }
.tsd-kind-method.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -68px; }
.tsd-kind-method.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -68px; }

.tsd-kind-call-signature > .tsd-kind-icon:before { background-position: -136px -68px; }
.tsd-kind-call-signature.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -68px; }
.tsd-kind-call-signature.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -68px; }
.tsd-kind-call-signature.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -68px; }
.tsd-kind-call-signature.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -68px; }
.tsd-kind-call-signature.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -68px; }
.tsd-kind-call-signature.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -68px; }
.tsd-kind-call-signature.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -68px; }
.tsd-kind-call-signature.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -68px; }
.tsd-kind-call-signature.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -68px; }
.tsd-kind-call-signature.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -68px; }
.tsd-kind-call-signature.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -68px; }
.tsd-kind-call-signature.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -68px; }

.tsd-kind-function.tsd-has-type-parameter > .tsd-kind-icon:before { background-position: -136px -85px; }
.tsd-kind-function.tsd-has-type-parameter.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -85px; }
.tsd-kind-function.tsd-has-type-parameter.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -85px; }
.tsd-kind-function.tsd-has-type-parameter.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -85px; }
.tsd-kind-function.tsd-has-type-parameter.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -85px; }
.tsd-kind-function.tsd-has-type-parameter.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -85px; }
.tsd-kind-function.tsd-has-type-parameter.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -85px; }
.tsd-kind-function.tsd-has-type-parameter.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -85px; }
.tsd-kind-function.tsd-has-type-parameter.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -85px; }
.tsd-kind-function.tsd-has-type-parameter.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -85px; }
.tsd-kind-function.tsd-has-type-parameter.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -85px; }
.tsd-kind-function.tsd-has-type-parameter.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -85px; }
.tsd-kind-function.tsd-has-type-parameter.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -85px; }

.tsd-kind-method.tsd-has-type-parameter > .tsd-kind-icon:before { background-position: -136px -85px; }
.tsd-kind-method.tsd-has-type-parameter.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -85px; }
.tsd-kind-method.tsd-has-type-parameter.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -85px; }
.tsd-kind-method.tsd-has-type-parameter.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -85px; }
.tsd-kind-method.tsd-has-type-parameter.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -85px; }
.tsd-kind-method.tsd-has-type-parameter.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -85px; }
.tsd-kind-method.tsd-has-type-parameter.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -85px; }
.tsd-kind-method.tsd-has-type-parameter.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -85px; }
.tsd-kind-method.tsd-has-type-parameter.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -85px; }
.tsd-kind-method.tsd-has-type-parameter.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -85px; }
.tsd-kind-method.tsd-has-type-parameter.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -85px; }
.tsd-kind-method.tsd-has-type-parameter.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -85px; }
.tsd-kind-method.tsd-has-type-parameter.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -85px; }

.tsd-kind-constructor > .tsd-kind-icon:before { background-position: -136px -102px; }
.tsd-kind-constructor.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -102px; }
.tsd-kind-constructor.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -102px; }
.tsd-kind-constructor.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -102px; }
.tsd-kind-constructor.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -102px; }
.tsd-kind-constructor.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -102px; }
.tsd-kind-constructor.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -102px; }
.tsd-kind-constructor.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -102px; }
.tsd-kind-constructor.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -102px; }
.tsd-kind-constructor.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -102px; }
.tsd-kind-constructor.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -102px; }
.tsd-kind-constructor.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -102px; }
.tsd-kind-constructor.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -102px; }

.tsd-kind-constructor-signature > .tsd-kind-icon:before { background-position: -136px -102px; }
.tsd-kind-constructor-signature.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -102px; }
.tsd-kind-constructor-signature.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -102px; }
.tsd-kind-constructor-signature.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -102px; }
.tsd-kind-constructor-signature.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -102px; }
.tsd-kind-constructor-signature.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -102px; }
.tsd-kind-constructor-signature.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -102px; }
.tsd-kind-constructor-signature.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -102px; }
.tsd-kind-constructor-signature.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -102px; }
.tsd-kind-constructor-signature.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -102px; }
.tsd-kind-constructor-signature.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -102px; }
.tsd-kind-constructor-signature.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -102px; }
.tsd-kind-constructor-signature.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -102px; }

.tsd-kind-index-signature > .tsd-kind-icon:before { background-position: -136px -119px; }
.tsd-kind-index-signature.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -119px; }
.tsd-kind-index-signature.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -119px; }
.tsd-kind-index-signature.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -119px; }
.tsd-kind-index-signature.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -119px; }
.tsd-kind-index-signature.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -119px; }
.tsd-kind-index-signature.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -119px; }
.tsd-kind-index-signature.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -119px; }
.tsd-kind-index-signature.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -119px; }
.tsd-kind-index-signature.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -119px; }
.tsd-kind-index-signature.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -119px; }
.tsd-kind-index-signature.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -119px; }
.tsd-kind-index-signature.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -119px; }

.tsd-kind-event > .tsd-kind-icon:before { background-position: -136px -136px; }
.tsd-kind-event.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -136px; }
.tsd-kind-event.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -136px; }
.tsd-kind-event.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -136px; }
.tsd-kind-event.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -136px; }
.tsd-kind-event.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -136px; }
.tsd-kind-event.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -136px; }
.tsd-kind-event.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -136px; }
.tsd-kind-event.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -136px; }
.tsd-kind-event.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -136px; }
.tsd-kind-event.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -136px; }
.tsd-kind-event.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -136px; }
.tsd-kind-event.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -136px; }

.tsd-is-static > .tsd-kind-icon:before { background-position: -136px -153px; }
.tsd-is-static.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -153px; }
.tsd-is-static.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -153px; }
.tsd-is-static.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -153px; }
.tsd-is-static.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -153px; }
.tsd-is-static.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -153px; }
.tsd-is-static.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -153px; }
.tsd-is-static.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -153px; }
.tsd-is-static.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -153px; }
.tsd-is-static.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -153px; }
.tsd-is-static.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -153px; }
.tsd-is-static.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -153px; }
.tsd-is-static.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -153px; }

.tsd-is-static.tsd-kind-function > .tsd-kind-icon:before { background-position: -136px -170px; }
.tsd-is-static.tsd-kind-function.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -170px; }
.tsd-is-static.tsd-kind-function.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -170px; }
.tsd-is-static.tsd-kind-function.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -170px; }
.tsd-is-static.tsd-kind-function.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -170px; }
.tsd-is-static.tsd-kind-function.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -170px; }
.tsd-is-static.tsd-kind-function.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -170px; }
.tsd-is-static.tsd-kind-function.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -170px; }
.tsd-is-static.tsd-kind-function.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -170px; }
.tsd-is-static.tsd-kind-function.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -170px; }
.tsd-is-static.tsd-kind-function.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -170px; }
.tsd-is-static.tsd-kind-function.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -170px; }
.tsd-is-static.tsd-kind-function.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -170px; }

.tsd-is-static.tsd-kind-method > .tsd-kind-icon:before { background-position: -136px -170px; }
.tsd-is-static.tsd-kind-method.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -170px; }
.tsd-is-static.tsd-kind-method.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -170px; }
.tsd-is-static.tsd-kind-method.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -170px; }
.tsd-is-static.tsd-kind-method.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -170px; }
.tsd-is-static.tsd-kind-method.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -170px; }
.tsd-is-static.tsd-kind-method.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -170px; }
.tsd-is-static.tsd-kind-method.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -170px; }
.tsd-is-static.tsd-kind-method.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -170px; }
.tsd-is-static.tsd-kind-method.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -170px; }
.tsd-is-static.tsd-kind-method.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -170px; }
.tsd-is-static.tsd-kind-method.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -170px; }
.tsd-is-static.tsd-kind-method.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -170px; }

.tsd-is-static.tsd-kind-call-signature > .tsd-kind-icon:before { background-position: -136px -170px; }
.tsd-is-static.tsd-kind-call-signature.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -170px; }
.tsd-is-static.tsd-kind-call-signature.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -170px; }
.tsd-is-static.tsd-kind-call-signature.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -170px; }
.tsd-is-static.tsd-kind-call-signature.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -170px; }
.tsd-is-static.tsd-kind-call-signature.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -170px; }
.tsd-is-static.tsd-kind-call-signature.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -170px; }
.tsd-is-static.tsd-kind-call-signature.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -170px; }
.tsd-is-static.tsd-kind-call-signature.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -170px; }
.tsd-is-static.tsd-kind-call-signature.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -170px; }
.tsd-is-static.tsd-kind-call-signature.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -170px; }
.tsd-is-static.tsd-kind-call-signature.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -170px; }
.tsd-is-static.tsd-kind-call-signature.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -170px; }

.tsd-is-static.tsd-kind-event > .tsd-kind-icon:before { background-position: -136px -187px; }
.tsd-is-static.tsd-kind-event.tsd-is-protected > .tsd-kind-icon:before { background-position: -153px -187px; }
.tsd-is-static.tsd-kind-event.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -187px; }
.tsd-is-static.tsd-kind-event.tsd-parent-kind-class > .tsd-kind-icon:before { background-position: -51px -187px; }
.tsd-is-static.tsd-kind-event.tsd-parent-kind-class.tsd-is-inherited > .tsd-kind-icon:before { background-position: -68px -187px; }
.tsd-is-static.tsd-kind-event.tsd-parent-kind-class.tsd-is-protected > .tsd-kind-icon:before { background-position: -85px -187px; }
.tsd-is-static.tsd-kind-event.tsd-parent-kind-class.tsd-is-protected.tsd-is-inherited > .tsd-kind-icon:before { background-position: -102px -187px; }
.tsd-is-static.tsd-kind-event.tsd-parent-kind-class.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -187px; }
.tsd-is-static.tsd-kind-event.tsd-parent-kind-enum > .tsd-kind-icon:before { background-position: -170px -187px; }
.tsd-is-static.tsd-kind-event.tsd-parent-kind-enum.tsd-is-protected > .tsd-kind-icon:before { background-position: -187px -187px; }
.tsd-is-static.tsd-kind-event.tsd-parent-kind-enum.tsd-is-private > .tsd-kind-icon:before { background-position: -119px -187px; }
.tsd-is-static.tsd-kind-event.tsd-parent-kind-interface > .tsd-kind-icon:before { background-position: -204px -187px; }
.tsd-is-static.tsd-kind-event.tsd-parent-kind-interface.tsd-is-inherited > .tsd-kind-icon:before { background-position: -221px -187px; }

.no-transition { transition: none !important; }

@-webkit-keyframes fade-in { from { opacity: 0; }
  to { opacity: 1; } }

@keyframes fade-in { from { opacity: 0; }
  to { opacity: 1; } }
@-webkit-keyframes fade-out { from { opacity: 1; visibility: visible; }
  to { opacity: 0; } }
@keyframes fade-out { from { opacity: 1; visibility: visible; }
  to { opacity: 0; } }
@-webkit-keyframes fade-in-delayed { 0% { opacity: 0; }
  33% { opacity: 0; }
  100% { opacity: 1; } }
@keyframes fade-in-delayed { 0% { opacity: 0; }
  33% { opacity: 0; }
  100% { opacity: 1; } }
@-webkit-keyframes fade-out-delayed { 0% { opacity: 1; visibility: visible; }
  66% { opacity: 0; }
  100% { opacity: 0; } }
@keyframes fade-out-delayed { 0% { opacity: 1; visibility: visible; }
  66% { opacity: 0; }
  100% { opacity: 0; } }
@-webkit-keyframes shift-to-left { from { -webkit-transform: translate(0, 0); transform: translate(0, 0); }
  to { -webkit-transform: translate(-25%, 0); transform: translate(-25%, 0); } }
@keyframes shift-to-left { from { -webkit-transform: translate(0, 0); transform: translate(0, 0); }
  to { -webkit-transform: translate(-25%, 0); transform: translate(-25%, 0); } }
@-webkit-keyframes unshift-to-left { from { -webkit-transform: translate(-25%, 0); transform: translate(-25%, 0); }
  to { -webkit-transform: translate(0, 0); transform: translate(0, 0); } }
@keyframes unshift-to-left { from { -webkit-transform: translate(-25%, 0); transform: translate(-25%, 0); }
  to { -webkit-transform: translate(0, 0); transform: translate(0, 0); } }
@-webkit-keyframes pop-in-from-right { from { -webkit-transform: translate(100%, 0); transform: translate(100%, 0); }
  to { -webkit-transform: translate(0, 0); transform: translate(0, 0); } }
@keyframes pop-in-from-right { from { -webkit-transform: translate(100%, 0); transform: translate(100%, 0); }
  to { -webkit-transform: translate(0, 0); transform: translate(0, 0); } }
@-webkit-keyframes pop-out-to-right { from { -webkit-transform: translate(0, 0); transform: translate(0, 0); visibility: visible; }
  to { -webkit-transform: translate(100%, 0); transform: translate(100%, 0); } }
@keyframes pop-out-to-right { from { -webkit-transform: translate(0, 0); transform: translate(0, 0); visibility: visible; }
  to { -webkit-transform: translate(100%, 0); transform: translate(100%, 0); } }
body { background: #fdfdfd; font-family: "Segoe UI", sans-serif; font-size: 16px; color: #222; }

a { color: #4da6ff; text-decoration: none; }
a:hover { text-decoration: underline; }

code, pre { font-family: Menlo, Monaco, Consolas, "Courier New", monospace; padding: 0.2em; margin: 0; font-size: 14px; background-color: rgba(0, 0, 0, 0.04); }

pre { padding: 10px; }
pre code { padding: 0; font-size: 100%; background-color: transparent; }

.tsd-typography { line-height: 1.333em; }
.tsd-typography ul { list-style: square; padding: 0 0 0 20px; margin: 0; }
.tsd-typography h4, .tsd-typography .tsd-index-panel h3, .tsd-index-panel .tsd-typography h3, .tsd-typography h5, .tsd-typography h6 { font-size: 1em; margin: 0; }
.tsd-typography h5, .tsd-typography h6 { font-weight: normal; }
.tsd-typography p, .tsd-typography ul, .tsd-typography ol { margin: 1em 0; }

@media (min-width: 901px) and (max-width: 1024px) { html.default .col-content { width: 72%; }
  html.default .col-menu { width: 28%; }
  html.default .tsd-navigation { padding-left: 10px; } }
@media (max-width: 900px) { html.default .col-content { float: none; width: 100%; }
  html.default .col-menu { position: fixed !important; overflow: auto; -webkit-overflow-scrolling: touch; overflow-scrolling: touch; z-index: 1024; top: 0 !important; bottom: 0 !important; left: auto !important; right: 0 !important; width: 100%; padding: 20px 20px 0 0; max-width: 450px; visibility: hidden; background-color: #fff; -webkit-transform: translate(100%, 0); transform: translate(100%, 0); }
  html.default .col-menu > *:last-child { padding-bottom: 20px; }
  html.default .overlay { content: ""; display: block; position: fixed; z-index: 1023; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0, 0, 0, 0.75); visibility: hidden; }
  html.default.to-has-menu .overlay { -webkit-animation: fade-in 0.4s; animation: fade-in 0.4s; }
  html.default.to-has-menu header, html.default.to-has-menu footer, html.default.to-has-menu .col-content { -webkit-animation: shift-to-left 0.4s; animation: shift-to-left 0.4s; }
  html.default.to-has-menu .col-menu { -webkit-animation: pop-in-from-right 0.4s; animation: pop-in-from-right 0.4s; }
  html.default.from-has-menu .overlay { -webkit-animation: fade-out 0.4s; animation: fade-out 0.4s; }
  html.default.from-has-menu header, html.default.from-has-menu footer, html.default.from-has-menu .col-content { -webkit-animation: unshift-to-left 0.4s; animation: unshift-to-left 0.4s; }
  html.default.from-has-menu .col-menu { -webkit-animation: pop-out-to-right 0.4s; animation: pop-out-to-right 0.4s; }
  html.default.has-menu body { overflow: hidden; }
  html.default.has-menu .overlay { visibility: visible; }
  html.default.has-menu header, html.default.has-menu footer, html.default.has-menu .col-content { -webkit-transform: translate(-25%, 0); transform: translate(-25%, 0); }
  html.default.has-menu .col-menu { visibility: visible; -webkit-transform: translate(0, 0); transform: translate(0, 0); } }

.tsd-page-title { padding: 70px 0 20px 0; margin: 0 0 40px 0; background: #fff; box-shadow: 0 0 5px rgba(0, 0, 0, 0.35); }
.tsd-page-title h1 { margin: 0; }

.tsd-breadcrumb { margin: 0; padding: 0; color: #808080; }
.tsd-breadcrumb a { color: #808080; text-decoration: none; }
.tsd-breadcrumb a:hover { text-decoration: underline; }
.tsd-breadcrumb li { display: inline; }
.tsd-breadcrumb li:after { content: " / "; }

html.minimal .container { margin: 0; }
html.minimal .container-main { padding-top: 50px; padding-bottom: 0; }
html.minimal .content-wrap { padding-left: 300px; }
html.minimal .tsd-navigation { position: fixed !important; overflow: auto; -webkit-overflow-scrolling: touch; overflow-scrolling: touch; box-sizing: border-box; z-index: 1; left: 0; top: 40px; bottom: 0; width: 300px; padding: 20px; margin: 0; }
html.minimal .tsd-member .tsd-member { margin-left: 0; }
html.minimal .tsd-page-toolbar { position: fixed; z-index: 2; }
html.minimal #tsd-filter .tsd-filter-group { right: 0; -webkit-transform: none; transform: none; }
html.minimal footer { background-color: transparent; }
html.minimal footer .container { padding: 0; }
html.minimal .tsd-generator { padding: 0; }
@media (max-width: 900px) { html.minimal .tsd-navigation { display: none; }
  html.minimal .content-wrap { padding-left: 0; } }

dl.tsd-comment-tags { overflow: hidden; }
dl.tsd-comment-tags dt { clear: both; float: left; padding: 1px 5px; margin: 0 10px 0 0; border-radius: 4px; border: 1px solid #808080; color: #808080; font-size: 0.8em; font-weight: normal; }
dl.tsd-comment-tags dd { margin: 0 0 10px 0; }
dl.tsd-comment-tags p { margin: 0; }

.tsd-panel.tsd-comment .lead { font-size: 1.1em; line-height: 1.333em; margin-bottom: 2em; }
.tsd-panel.tsd-comment .lead:last-child { margin-bottom: 0; }

.toggle-protected .tsd-is-private { display: none; }

.toggle-public .tsd-is-private, .toggle-public .tsd-is-protected, .toggle-public .tsd-is-private-protected { display: none; }

.toggle-inherited .tsd-is-inherited { display: none; }

.toggle-only-exported .tsd-is-not-exported { display: none; }

.toggle-externals .tsd-is-external { display: none; }

#tsd-filter { position: relative; display: inline-block; height: 40px; vertical-align: bottom; }
.no-filter #tsd-filter { display: none; }
#tsd-filter .tsd-filter-group { display: inline-block; height: 40px; vertical-align: bottom; white-space: nowrap; }
#tsd-filter input { display: none; }
@media (max-width: 900px) { #tsd-filter .tsd-filter-group { display: block; position: absolute; top: 40px; right: 20px; height: auto; background-color: #fff; visibility: hidden; -webkit-transform: translate(50%, 0); transform: translate(50%, 0); box-shadow: 0 0 4px rgba(0, 0, 0, 0.25); }
  .has-options #tsd-filter .tsd-filter-group { visibility: visible; }
  .to-has-options #tsd-filter .tsd-filter-group { -webkit-animation: fade-in 0.2s; animation: fade-in 0.2s; }
  .from-has-options #tsd-filter .tsd-filter-group { -webkit-animation: fade-out 0.2s; animation: fade-out 0.2s; }
  #tsd-filter label, #tsd-filter .tsd-select { display: block; padding-right: 20px; } }

footer { border-top: 1px solid #eee; background-color: #fff; }
footer.with-border-bottom { border-bottom: 1px solid #eee; }
footer .tsd-legend-group { font-size: 0; }
footer .tsd-legend { display: inline-block; width: 25%; padding: 0; font-size: 16px; list-style: none; line-height: 1.333em; vertical-align: top; }
@media (max-width: 900px) { footer .tsd-legend { width: 50%; } }

.tsd-hierarchy { list-style: square; padding: 0 0 0 20px; margin: 0; }
.tsd-hierarchy .target { font-weight: bold; }

.tsd-index-panel .tsd-index-content { margin-bottom: -30px !important; }
.tsd-index-panel .tsd-index-section { margin-bottom: 30px !important; }
.tsd-index-panel h3 { margin: 0 -20px 10px -20px; padding: 0 20px 10px 20px; border-bottom: 1px solid #eee; }
.tsd-index-panel ul.tsd-index-list { -webkit-column-count: 3; -moz-column-count: 3; -ms-column-count: 3; -o-column-count: 3; column-count: 3; -webkit-column-gap: 20px; -moz-column-gap: 20px; -ms-column-gap: 20px; -o-column-gap: 20px; column-gap: 20px; padding: 0; list-style: none; line-height: 1.333em; }
@media (max-width: 900px) { .tsd-index-panel ul.tsd-index-list { -webkit-column-count: 1; -moz-column-count: 1; -ms-column-count: 1; -o-column-count: 1; column-count: 1; } }
@media (min-width: 901px) and (max-width: 1024px) { .tsd-index-panel ul.tsd-index-list { -webkit-column-count: 2; -moz-column-count: 2; -ms-column-count: 2; -o-column-count: 2; column-count: 2; } }
.tsd-index-panel ul.tsd-index-list li { -webkit-column-break-inside: avoid; -moz-column-break-inside: avoid; -ms-column-break-inside: avoid; -o-column-break-inside: avoid; column-break-inside: avoid; -webkit-page-break-inside: avoid; -moz-page-break-inside: avoid; -ms-page-break-inside: avoid; -o-page-break-inside: avoid; page-break-inside: avoid; }
.tsd-index-panel a, .tsd-index-panel .tsd-parent-kind-module a { color: #9600ff; }
.tsd-index-panel .tsd-parent-kind-interface a { color: #7da01f; }
.tsd-index-panel .tsd-parent-kind-enum a { color: #cc9900; }
.tsd-index-panel .tsd-parent-kind-class a { color: #4da6ff; }
.tsd-index-panel .tsd-kind-module a { color: #9600ff; }
.tsd-index-panel .tsd-kind-interface a { color: #7da01f; }
.tsd-index-panel .tsd-kind-enum a { color: #cc9900; }
.tsd-index-panel .tsd-kind-class a { color: #4da6ff; }
.tsd-index-panel .tsd-is-private a { color: #808080; }

.tsd-flag { display: inline-block; padding: 1px 5px; border-radius: 4px; color: #fff; background-color: #808080; text-indent: 0; font-size: 14px; font-weight: normal; }

.tsd-anchor { position: absolute; top: -100px; }

.tsd-member { position: relative; }
.tsd-member .tsd-anchor + h3 { margin-top: 0; margin-bottom: 0; border-bottom: none; }

.tsd-navigation { padding: 0 0 0 40px; }
.tsd-navigation a { display: block; padding-top: 2px; padding-bottom: 2px; border-left: 2px solid transparent; color: #222; text-decoration: none; transition: border-left-color 0.1s; }
.tsd-navigation a:hover { text-decoration: underline; }
.tsd-navigation ul { margin: 0; padding: 0; list-style: none; }
.tsd-navigation li { padding: 0; }

.tsd-navigation.primary { padding-bottom: 40px; }
.tsd-navigation.primary a { display: block; padding-top: 6px; padding-bottom: 6px; }
.tsd-navigation.primary ul li a { padding-left: 5px; }
.tsd-navigation.primary ul li li a { padding-left: 25px; }
.tsd-navigation.primary ul li li li a { padding-left: 45px; }
.tsd-navigation.primary ul li li li li a { padding-left: 65px; }
.tsd-navigation.primary ul li li li li li a { padding-left: 85px; }
.tsd-navigation.primary ul li li li li li li a { padding-left: 105px; }
.tsd-navigation.primary > ul { border-bottom: 1px solid #eee; }
.tsd-navigation.primary li { border-top: 1px solid #eee; }
.tsd-navigation.primary li.current > a { font-weight: bold; }
.tsd-navigation.primary li.label span { display: block; padding: 20px 0 6px 5px; color: #808080; }
.tsd-navigation.primary li.globals + li > span, .tsd-navigation.primary li.globals + li > a { padding-top: 20px; }

.tsd-navigation.secondary ul { transition: opacity 0.2s; }
.tsd-navigation.secondary ul li a { padding-left: 25px; }
.tsd-navigation.secondary ul li li a { padding-left: 45px; }
.tsd-navigation.secondary ul li li li a { padding-left: 65px; }
.tsd-navigation.secondary ul li li li li a { padding-left: 85px; }
.tsd-navigation.secondary ul li li li li li a { padding-left: 105px; }
.tsd-navigation.secondary ul li li li li li li a { padding-left: 125px; }
.tsd-navigation.secondary ul.current a { border-left-color: #eee; }
.tsd-navigation.secondary li.focus > a, .tsd-navigation.secondary ul.current li.focus > a { border-left-color: #000; }
.tsd-navigation.secondary li.current { margin-top: 20px; margin-bottom: 20px; border-left-color: #eee; }
.tsd-navigation.secondary li.current > a { font-weight: bold; }

@media (min-width: 901px) { .menu-sticky-wrap { position: static; }
  .no-csspositionsticky .menu-sticky-wrap.sticky { position: fixed; }
  .no-csspositionsticky .menu-sticky-wrap.sticky-current { position: fixed; }
  .no-csspositionsticky .menu-sticky-wrap.sticky-current ul.before-current, .no-csspositionsticky .menu-sticky-wrap.sticky-current ul.after-current { opacity: 0; }
  .no-csspositionsticky .menu-sticky-wrap.sticky-bottom { position: absolute; top: auto !important; left: auto !important; bottom: 0; right: 0; }
  .csspositionsticky .menu-sticky-wrap.sticky { position: -webkit-sticky; position: sticky; }
  .csspositionsticky .menu-sticky-wrap.sticky-current { position: -webkit-sticky; position: sticky; } }

.tsd-panel { margin: 20px 0; padding: 20px; background-color: #fff; box-shadow: 0 0 4px rgba(0, 0, 0, 0.25); }
.tsd-panel:empty { display: none; }
.tsd-panel > h1, .tsd-panel > h2, .tsd-panel > h3 { margin: 1.5em -20px 10px -20px; padding: 0 20px 10px 20px; border-bottom: 1px solid #eee; }
.tsd-panel > h1.tsd-before-signature, .tsd-panel > h2.tsd-before-signature, .tsd-panel > h3.tsd-before-signature { margin-bottom: 0; border-bottom: 0; }
.tsd-panel table { display: block; width: 100%; overflow: auto; margin-top: 10px; word-break: normal; word-break: keep-all; }
.tsd-panel table th { font-weight: bold; }
.tsd-panel table th, .tsd-panel table td { padding: 6px 13px; border: 1px solid #ddd; }
.tsd-panel table tr { background-color: #fff; border-top: 1px solid #ccc; }
.tsd-panel table tr:nth-child(2n) { background-color: #f8f8f8; }

.tsd-panel-group { margin: 60px 0; }
.tsd-panel-group > h1, .tsd-panel-group > h2, .tsd-panel-group > h3 { padding-left: 20px; padding-right: 20px; }

#tsd-search { transition: background-color 0.2s; }
#tsd-search .title { position: relative; z-index: 2; }
#tsd-search .field { position: absolute; left: 0; top: 0; right: 40px; height: 40px; }
#tsd-search .field input { box-sizing: border-box; position: relative; top: -50px; z-index: 1; width: 100%; padding: 0 10px; opacity: 0; outline: 0; border: 0; background: transparent; color: #222; }
#tsd-search .field label { position: absolute; overflow: hidden; right: -40px; }
#tsd-search .field input, #tsd-search .title { transition: opacity 0.2s; }
#tsd-search .results { position: absolute; visibility: hidden; top: 40px; width: 100%; margin: 0; padding: 0; list-style: none; box-shadow: 0 0 4px rgba(0, 0, 0, 0.25); }
#tsd-search .results li { padding: 0 10px; background-color: #fdfdfd; }
#tsd-search .results li:nth-child(even) { background-color: #fff; }
#tsd-search .results li.state { display: none; }
#tsd-search .results li.current, #tsd-search .results li:hover { background-color: #eee; }
#tsd-search .results a { display: block; }
#tsd-search .results a:before { top: 10px; }
#tsd-search .results span.parent { color: #808080; font-weight: normal; }
#tsd-search.has-focus { background-color: #eee; }
#tsd-search.has-focus .field input { top: 0; opacity: 1; }
#tsd-search.has-focus .title { z-index: 0; opacity: 0; }
#tsd-search.has-focus .results { visibility: visible; }
#tsd-search.loading .results li.state.loading { display: block; }
#tsd-search.failure .results li.state.failure { display: block; }

.tsd-signature { margin: 0 0 1em 0; padding: 10px; border: 1px solid #eee; font-family: Menlo, Monaco, Consolas, "Courier New", monospace; font-size: 14px; }
.tsd-signature.tsd-kind-icon { padding-left: 30px; }
.tsd-signature.tsd-kind-icon:before { top: 10px; left: 10px; }
.tsd-panel > .tsd-signature { margin-left: -20px; margin-right: -20px; border-width: 1px 0; }
.tsd-panel > .tsd-signature.tsd-kind-icon { padding-left: 40px; }
.tsd-panel > .tsd-signature.tsd-kind-icon:before { left: 20px; }

.tsd-signature-symbol { color: #808080; font-weight: normal; }

.tsd-signature-type { font-style: italic; font-weight: normal; }

.tsd-signatures { padding: 0; margin: 0 0 1em 0; border: 1px solid #eee; }
.tsd-signatures .tsd-signature { margin: 0; border-width: 1px 0 0 0; transition: background-color 0.1s; }
.tsd-signatures .tsd-signature:first-child { border-top-width: 0; }
.tsd-signatures .tsd-signature.current { background-color: #eee; }
.tsd-signatures.active > .tsd-signature { cursor: pointer; }
.tsd-panel > .tsd-signatures { margin-left: -20px; margin-right: -20px; border-width: 1px 0; }
.tsd-panel > .tsd-signatures .tsd-signature.tsd-kind-icon { padding-left: 40px; }
.tsd-panel > .tsd-signatures .tsd-signature.tsd-kind-icon:before { left: 20px; }
.tsd-panel > a.anchor + .tsd-signatures { border-top-width: 0; margin-top: -20px; }

ul.tsd-descriptions { position: relative; overflow: hidden; transition: height 0.3s; padding: 0; list-style: none; }
ul.tsd-descriptions.active > .tsd-description { display: none; }
ul.tsd-descriptions.active > .tsd-description.current { display: block; }
ul.tsd-descriptions.active > .tsd-description.fade-in { -webkit-animation: fade-in-delayed 0.3s; animation: fade-in-delayed 0.3s; }
ul.tsd-descriptions.active > .tsd-description.fade-out { -webkit-animation: fade-out-delayed 0.3s; animation: fade-out-delayed 0.3s; position: absolute; display: block; top: 0; left: 0; right: 0; opacity: 0; visibility: hidden; }
ul.tsd-descriptions h4, ul.tsd-descriptions .tsd-index-panel h3, .tsd-index-panel ul.tsd-descriptions h3 { font-size: 16px; margin: 1em 0 0.5em 0; }

ul.tsd-parameters, ul.tsd-type-parameters { list-style: square; margin: 0; padding-left: 20px; }
ul.tsd-parameters > li.tsd-parameter-siganture, ul.tsd-type-parameters > li.tsd-parameter-siganture { list-style: none; margin-left: -20px; }
ul.tsd-parameters h5, ul.tsd-type-parameters h5 { font-size: 16px; margin: 1em 0 0.5em 0; }
ul.tsd-parameters .tsd-comment, ul.tsd-type-parameters .tsd-comment { margin-top: -0.5em; }

.tsd-sources { font-size: 14px; color: #808080; margin: 0 0 1em 0; }
.tsd-sources a { color: #808080; text-decoration: underline; }
.tsd-sources ul, .tsd-sources p { margin: 0 !important; }
.tsd-sources ul { list-style: none; padding: 0; }

.tsd-page-toolbar { position: absolute; z-index: 1; top: 0; left: 0; width: 100%; height: 40px; color: #333; background: #fff; border-bottom: 1px solid #eee; }
.tsd-page-toolbar a { color: #333; text-decoration: none; }
.tsd-page-toolbar a.title { font-weight: bold; }
.tsd-page-toolbar a.title:hover { text-decoration: underline; }
.tsd-page-toolbar .table-wrap { display: table; width: 100%; height: 40px; }
.tsd-page-toolbar .table-cell { display: table-cell; position: relative; white-space: nowrap; line-height: 40px; }
.tsd-page-toolbar .table-cell:first-child { width: 100%; }

.tsd-widget:before, .tsd-select .tsd-select-label:before, .tsd-select .tsd-select-list li:before { content: ""; display: inline-block; width: 40px; height: 40px; margin: 0 -8px 0 0; background-image: url(../images/widgets.png); background-repeat: no-repeat; text-indent: -1024px; vertical-align: bottom; }
@media (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) { .tsd-widget:before, .tsd-select .tsd-select-label:before, .tsd-select .tsd-select-list li:before { background-image: url(../images/widgets@2x.png); background-size: 320px 40px; } }

.tsd-widget { display: inline-block; overflow: hidden; opacity: 0.6; height: 40px; transition: opacity 0.1s, background-color 0.2s; vertical-align: bottom; cursor: pointer; }
.tsd-widget:hover { opacity: 0.8; }
.tsd-widget.active { opacity: 1; background-color: #eee; }
.tsd-widget.no-caption { width: 40px; }
.tsd-widget.no-caption:before { margin: 0; }
.tsd-widget.search:before { background-position: 0 0; }
.tsd-widget.menu:before { background-position: -40px 0; }
.tsd-widget.options:before { background-position: -80px 0; }
.tsd-widget.options, .tsd-widget.menu { display: none; }
@media (max-width: 900px) { .tsd-widget.options, .tsd-widget.menu { display: inline-block; } }
input[type=checkbox] + .tsd-widget:before { background-position: -120px 0; }
input[type=checkbox]:checked + .tsd-widget:before { background-position: -160px 0; }

.tsd-select { position: relative; display: inline-block; height: 40px; transition: opacity 0.1s, background-color 0.2s; vertical-align: bottom; cursor: pointer; }
.tsd-select .tsd-select-label { opacity: 0.6; transition: opacity 0.2s; }
.tsd-select .tsd-select-label:before { background-position: -240px 0; }
.tsd-select.active .tsd-select-label { opacity: 0.8; }
.tsd-select.active .tsd-select-list { visibility: visible; opacity: 1; transition-delay: 0s; }
.tsd-select .tsd-select-list { position: absolute; visibility: hidden; top: 40px; left: 0; margin: 0; padding: 0; opacity: 0; list-style: none; box-shadow: 0 0 4px rgba(0, 0, 0, 0.25); transition: visibility 0s 0.2s, opacity 0.2s; }
.tsd-select .tsd-select-list li { padding: 0 20px 0 0; background-color: #fdfdfd; }
.tsd-select .tsd-select-list li:before { background-position: 40px 0; }
.tsd-select .tsd-select-list li:nth-child(even) { background-color: #fff; }
.tsd-select .tsd-select-list li:hover { background-color: #eee; }
.tsd-select .tsd-select-list li.selected:before { background-position: -200px 0; }
@media (max-width: 900px) { .tsd-select .tsd-select-list { top: 0; left: auto; right: 100%; margin-right: -5px; }
  .tsd-select .tsd-select-label:before { background-position: -280px 0; } }

img { max-width: 100%; }

'''
'''--- docs/assets/js/main.js ---
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){function s(a){var b=a.length,c=n.type(a);return"function"!==c&&!n.isWindow(a)&&(!(1!==a.nodeType||!b)||("array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a))}function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}function D(a,b){for(;(a=a[b])&&1!==a.nodeType;);return a}function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+Math.random()}function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),"string"==typeof(c=a.getAttribute(d))){try{c="true"===c||"false"!==c&&("null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c)}catch(e){}M.set(a,b,c)}else c=void 0;return c}function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}function jb(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function kb(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function lb(a){var b=gb.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function mb(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function nb(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function ob(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pb(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}function sb(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function tb(a){var b=l,c=rb[a];return c||(c=sb(a,b),"none"!==c&&c||(qb=(qb||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qb[0].contentDocument,b.write(),b.close(),c=sb(a,b),qb.detach()),rb[a]=c),c}function xb(a,b,c){var d,e,f,g,h=a.style;return c=c||wb(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),vb.test(g)&&ub.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function yb(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}function Fb(a,b){if(b in a)return b;for(var c=b[0].toUpperCase()+b.slice(1),d=b,e=Eb.length;e--;)if((b=Eb[e]+c)in a)return b;return d}function Gb(a,b,c){var d=Ab.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Hb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ib(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wb(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xb(a,b,f),(0>e||null==e)&&(e=a.style[b]),vb.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Hb(a,b,c||(g?"border":"content"),d,f)+"px"}function Jb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",tb(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function Kb(a,b,c,d,e){return new Kb.prototype.init(a,b,c,d,e)}function Sb(){return setTimeout(function(){Lb=void 0}),Lb=n.now()}function Tb(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ub(a,b,c){for(var d,e=(Rb[b]||[]).concat(Rb["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Vb(a,b,c){var d,e,f,g,h,i,j,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),"inline"===("none"===j?L.get(a,"olddisplay")||tb(a.nodeName):j)&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Nb.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?tb(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ub(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wb(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),(g=n.cssHooks[d])&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xb(a,b,c){var d,e,f=0,g=Qb.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Lb||Sb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:Lb||Sb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wb(k,j.opts.specialEasing);g>f;f++)if(d=Qb[f].call(j,a,k,j.opts))return d;return n.map(k,Ub,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}function rc(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))for(;d=f[e++];)"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function sc(a,b,c,d){function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}var e={},f=a===oc;return g(b.dataTypes[0])||!e["*"]&&g("*")}function tc(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function uc(a,b,c){for(var d,e,f,g,h=a.contents,i=a.dataTypes;"*"===i[0];)i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function vc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];for(f=k.shift();f;)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(!(g=j[i+" "+f]||j["* "+f]))for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){!0===g?g=j[e]:!0!==j[e]&&(f=h[0],k.unshift(h[1]));break}if(!0!==g)if(g&&a.throws)b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}function Bc(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||xc.test(a)?d(a,e):Bc(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Bc(a+"["+e+"]",b[e],c,d)}function Kc(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.1",n=function(a,b){return new n.fn.init(a,b)},r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)>=0},isPlainObject:function(a){return"object"===n.type(a)&&!a.nodeType&&!n.isWindow(a)&&!(a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf"))},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;(a=n.trim(a))&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var e=0,f=a.length,g=s(a);if(c){if(g)for(;f>e&&!1!==b.apply(a[e],c);e++);else for(e in a)if(!1===b.apply(a[e],c))break}else if(g)for(;f>e&&!1!==b.call(a[e],e,a[e]);e++);else for(e in a)if(!1===b.call(a[e],e,a[e]))break;return a},trim:function(a){return null==a?"":(a+"").replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var e=[],f=0,g=a.length,h=!c;g>f;f++)!b(a[f],f)!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)null!=(d=b(a[f],f,c))&&i.push(d);else for(f in a)null!=(d=b(a[f],f,c))&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});var t=function(a){function fb(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],!a||"string"!=typeof a)return d;if(1!==(k=b.nodeType)&&9!==k)return[];if(p&&!e){if(f=_.exec(a))if(j=f[1]){if(9===k){if(!(h=b.getElementById(j))||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return I.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName&&b.getElementsByClassName)return I.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=9===k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){for(o=g(a),(r=b.getAttribute("id"))?s=r.replace(bb,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;l--;)o[l]=s+qb(o[l]);w=ab.test(a)&&ob(b.parentNode)||b,x=o.join(",")}if(x)try{return I.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function gb(){function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}var a=[];return b}function hb(a){return a[u]=!0,a}function ib(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function jb(a,b){for(var c=a.split("|"),e=a.length;e--;)d.attrHandle[c[e]]=b}function kb(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||D)-(~a.sourceIndex||D);if(d)return d;if(c)for(;c=c.nextSibling;)if(c===b)return-1;return a?1:-1}function nb(a){return hb(function(b){return b=+b,hb(function(c,d){for(var e,f=a([],c.length,b),g=f.length;g--;)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function ob(a){return a&&typeof a.getElementsByTagName!==C&&a}function pb(){}function qb(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function rb(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){for(;b=b[d];)if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){for(;b=b[d];)if((1===b.nodeType||e)&&a(b,c,g))return!0}else for(;b=b[d];)if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function sb(a){return a.length>1?function(b,c,d){for(var e=a.length;e--;)if(!a[e](b,c,d))return!1;return!0}:a[0]}function tb(a,b,c){for(var d=0,e=b.length;e>d;d++)fb(a,b[d],c);return c}function ub(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function vb(a,b,c,d,e,f){return d&&!d[u]&&(d=vb(d)),e&&!e[u]&&(e=vb(e,f)),hb(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||tb(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ub(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d)for(j=ub(r,n),d(j,[],h,i),k=j.length;k--;)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l));if(f){if(e||a){if(e){for(j=[],k=r.length;k--;)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}for(k=r.length;k--;)(l=r[k])&&(j=e?K.call(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ub(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):I.apply(g,r)})}function wb(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=rb(function(a){return a===b},h,!0),l=rb(function(a){return K.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d))}];f>i;i++)if(c=d.relative[a[i].type])m=[rb(sb(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e&&!d.relative[a[e].type];e++);return vb(i>1&&sb(m),i>1&&qb(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&wb(a.slice(i,e)),f>e&&wb(a=a.slice(e)),f>e&&qb(a))}m.push(c)}return sb(m)}function xb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){for(m=0;o=a[m++];)if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){for(m=0;o=b[m++];)o(r,s,g,h);if(f){if(p>0)for(;q--;)r[q]||s[q]||(s[q]=G.call(i));s=ub(s)}I.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&fb.uniqueSort(i)}return k&&(w=v,j=t),r};return c?hb(f):f}var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+-new Date,v=a.document,w=0,x=0,y=gb(),z=gb(),A=gb(),B=function(a,b){return a===b&&(l=!0),0},C="undefined",D=1<<31,E={}.hasOwnProperty,F=[],G=F.pop,H=F.push,I=F.push,J=F.slice,K=F.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",N="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",O=N.replace("w","w#"),P="\\["+M+"*("+N+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+O+"))|)"+M+"*\\]",Q=":("+N+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",R=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),S=new RegExp("^"+M+"*,"+M+"*"),T=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),V=new RegExp(Q),W=new RegExp("^"+O+"$"),X={ID:new RegExp("^#("+N+")"),CLASS:new RegExp("^\\.("+N+")"),TAG:new RegExp("^("+N.replace("w","w*")+")"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+Q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ab=/[+~]/,bb=/'|\\/g,cb=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),db=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)};try{I.apply(F=J.call(v.childNodes),v.childNodes),F[v.childNodes.length].nodeType}catch(eb){I={apply:F.length?function(a,b){H.apply(a,J.call(b))}:function(a,b){for(var c=a.length,d=0;a[c++]=b[d++];);a.length=c-1}}}c=fb.support={},f=fb.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return!!b&&"HTML"!==b.nodeName},m=fb.setDocument=function(a){var b,e=a?a.ownerDocument||a:v,g=e.defaultView;return e!==n&&9===e.nodeType&&e.documentElement?(n=e,o=e.documentElement,p=!f(e),g&&g!==g.top&&(g.addEventListener?g.addEventListener("unload",function(){m()},!1):g.attachEvent&&g.attachEvent("onunload",function(){m()})),c.attributes=ib(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ib(function(a){return a.appendChild(e.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(e.getElementsByClassName)&&ib(function(a){return a.innerHTML="<div class='a'></div><div class='a i'></div>",a.firstChild.className="i",2===a.getElementsByClassName("i").length}),c.getById=ib(function(a){return o.appendChild(a).id=u,!e.getElementsByName||!e.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if(typeof b.getElementById!==C&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){var c=typeof a.getAttributeNode!==C&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return typeof b.getElementsByTagName!==C?b.getElementsByTagName(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){for(;c=f[e++];)1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return typeof b.getElementsByClassName!==C&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(e.querySelectorAll))&&(ib(function(a){a.innerHTML="<select msallowclip=''><option selected=''></option></select>",a.querySelectorAll("[msallowclip^='']").length&&q.push("[*^$]="+M+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+M+"*(?:value|"+L+")"),a.querySelectorAll(":checked").length||q.push(":checked")}),ib(function(a){var b=e.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+M+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ib(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",Q)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)for(;b=b.parentNode;)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d||(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===e||a.ownerDocument===v&&t(v,a)?-1:b===e||b.ownerDocument===v&&t(v,b)?1:k?K.call(k,a)-K.call(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,f=a.parentNode,g=b.parentNode,h=[a],i=[b];if(!f||!g)return a===e?-1:b===e?1:f?-1:g?1:k?K.call(k,a)-K.call(k,b):0;if(f===g)return kb(a,b);for(c=a;c=c.parentNode;)h.unshift(c);for(c=b;c=c.parentNode;)i.unshift(c);for(;h[d]===i[d];)d++;return d?kb(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},e):n},fb.matches=function(a,b){return fb(a,null,null,b)},fb.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fb(b,n,null,[a]).length>0},fb.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fb.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&E.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fb.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fb.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){for(;b=a[f++];)b===a[f]&&(e=d.push(f));for(;e--;)a.splice(d[e],1)}return k=null,a},e=fb.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else for(;b=a[d++];)c+=e(b);return c},d=fb.selectors={cacheLength:50,createPseudo:hb,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(cb,db),a[3]=(a[3]||a[4]||a[5]||"").replace(cb,db),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fb.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fb.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(cb,db).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+M+")"+a+"("+M+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||typeof a.getAttribute!==C&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fb.attr(d,a);return null==e?"!="===b:!b||(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e+" ").indexOf(c)>-1:"|="===b&&(e===c||e.slice(0,c.length+1)===c+"-"))}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){for(;p;){for(l=b;l=l[p];)if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){for(k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];l=++n&&l&&l[p]||(m=n=0)||o.pop();)if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else for(;(l=++n&&l&&l[p]||(m=n=0)||o.pop())&&((h?l.nodeName.toLowerCase()!==r:1!==l.nodeType)||!++m||(s&&((l[u]||(l[u]={}))[a]=[w,m]),l!==b)););return(m-=e)===d||m%d==0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fb.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?hb(function(a,c){for(var d,f=e(a,b),g=f.length;g--;)d=K.call(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:hb(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?hb(function(a,b,c,e){for(var f,g=d(a,null,e,[]),h=a.length;h--;)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:hb(function(a){return function(b){return fb(a,b).length>0}}),contains:hb(function(a){return function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:hb(function(a){return W.test(a||"")||fb.error("unsupported lang: "+a),a=a.replace(cb,db).toLowerCase(),function(b){var c;do{if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return(c=c.toLowerCase())===a||0===c.indexOf(a+"-")}while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return!1===a.disabled},disabled:function(a){return!0===a.disabled},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,!0===a.selected},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:nb(function(){return[0]}),last:nb(function(a,b){return[b-1]}),eq:nb(function(a,b,c){return[0>c?c+b:c]}),even:nb(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:nb(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:nb(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:nb(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=function(a){return function(b){return"input"===b.nodeName.toLowerCase()&&b.type===a}}(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=function(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}(b);return pb.prototype=d.filters=d.pseudos,d.setFilters=new pb,g=fb.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);for(h=a,i=[],j=d.preFilter;h;){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fb.error(a):z(a,i).slice(0)},h=fb.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){for(b||(b=g(a)),c=b.length;c--;)f=wb(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xb(e,d)),f.selector=a}return f},i=fb.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(!(b=(d.find.ID(k.matches[0].replace(cb,db),b)||[])[0]))return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}for(i=X.needsContext.test(a)?0:j.length;i--&&(k=j[i],!d.relative[l=k.type]);)if((m=d.find[l])&&(f=m(k.matches[0].replace(cb,db),ab.test(j[0].type)&&ob(b.parentNode)||b))){if(j.splice(i,1),!(a=f.length&&qb(j)))return I.apply(e,f),e;break}}return(n||h(a,o))(f,b,!p,e,ab.test(a)&&ob(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ib(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ib(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||jb("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ib(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||jb("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ib(function(a){return null==a.getAttribute("disabled")})||jb(L,function(a,b,c){var d;return c?void 0:!0===a[b]?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fb}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0
}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(!(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a))||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?void 0!==y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))}).prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){for(var d=[],e=void 0!==c;(a=a[b])&&9!==a.nodeType;)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}}),n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(!1===h[g].apply(l[0],l[1])&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){for(var c;(c=n.inArray(b,h,c))>-1;)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var i,j,k,b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}};if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(!0===a?--n.readyWait:n.isReady)||(n.isReady=!0,!0!==a&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}}),n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType},K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;for(;c--;)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){for(c=g.length;c--;)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(void 0!==(c=M.get(f,a)))return c;if(void 0!==(c=M.get(f,d)))return c;if(void 0!==(c=P(f,d,void 0)))return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};for("string"!=typeof a&&(b=a,a=void 0),a=a||"fx";g--;)(c=L.get(f[g],a+"queueHooks"))&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r)for(c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;j--;)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&!1!==l.setup.call(a,d,p,g)||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){for(b=(b||"").match(E)||[""],j=b.length;j--;)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){for(l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;f--;)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&!1!==l.teardown.call(a,p,r.handle)||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||!1!==o.trigger.apply(d,c))){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}for(f=0;(g=p[f++])&&!b.isPropagationStopped();)b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),(m=k&&g[k])&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),!1===b.result&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&!1!==o._default.apply(p.pop(),c)||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||!1!==k.preDispatch.call(this,a)){for(h=n.event.handlers.call(this,a,j),b=0;(f=h[b++])&&!a.isPropagationStopped();)for(a.currentTarget=f.elem,c=0;(g=f.handlers[c++])&&!a.isImmediatePropagationStopped();)(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,void 0!==(e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i))&&!1===(a.result=e)&&(a.preventDefault(),a.stopPropagation()));return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(!0!==i.disabled||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];for(g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;b--;)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&!1===a.returnValue?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),!1===d)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(!1===b||"function"==typeof b)&&(c=b,b=void 0),!1===c&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var ab=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bb=/<([\w:]+)/,cb=/<|&#?\w+;/,db=/<(?:script|style|link)/i,eb=/checked\s*(?:[^=]|=\s*.checked.)/i,fb=/^$|\/(?:java|ecma)script/i,gb=/^true\/(.*)/,ib={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ib.optgroup=ib.option,ib.tbody=ib.tfoot=ib.colgroup=ib.caption=ib.thead,ib.th=ib.td,n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=ob(h),f=ob(a),d=0,e=f.length;e>d;d++)pb(f[d],g[d]);if(b)if(c)for(f=f||ob(a),g=g||ob(h),d=0,e=f.length;e>d;d++)nb(f[d],g[d]);else nb(a,h);return g=ob(h,"script"),g.length>0&&mb(g,!i&&ob(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if((e=a[m])||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(cb.test(e)){for(f=f||k.appendChild(b.createElement("div")),g=(bb.exec(e)||["",""])[1].toLowerCase(),h=ib[g]||ib._default,f.innerHTML=h[1]+e.replace(ab,"<$1></$2>")+h[2],j=h[0];j--;)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));for(k.textContent="",m=0;e=l[m++];)if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=ob(k.appendChild(e),"script"),i&&mb(f),c))for(j=0;e=f[j++];)fb.test(e.type||"")&&c.push(e);return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando])&&(b=L.cache[e])){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){jb(this,a).appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=jb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(ob(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&mb(ob(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(ob(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null!=a&&a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!db.test(a)&&!ib[(bb.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(ab,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(ob(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(ob(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&eb.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(ob(c,"script"),kb),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,ob(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,lb),j=0;g>j;j++)h=f[j],fb.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qb,rb={},ub=/^margin/,vb=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wb=function(a){return a.ownerDocument.defaultView.getComputedStyle(a,null)};!function(){function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");f.style&&(f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f),a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),b}}))}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var zb=/^(none|table(?!-c[ea]).+)/,Ab=new RegExp("^("+Q+")(.*)$","i"),Bb=new RegExp("^([+-])=("+Q+")","i"),Cb={position:"absolute",visibility:"hidden",display:"block"},Db={letterSpacing:"0",fontWeight:"400"},Eb=["Webkit","O","Moz","ms"];n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xb(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fb(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Bb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),void(null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c))))}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fb(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xb(a,b,d)),"normal"===e&&b in Db&&(e=Db[b]),""===c||c?(f=parseFloat(e),!0===c||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?zb.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Cb,function(){return Ib(a,b,d)}):Ib(a,b,d):void 0},set:function(a,c,d){var e=d&&wb(a);return Gb(a,c,d?Hb(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=yb(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xb,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ub.test(a)||(n.cssHooks[a+b].set=Gb)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wb(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Jb(this,!0)},hide:function(){return Jb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}}),n.Tween=Kb,Kb.prototype={constructor:Kb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Kb.propHooks[this.prop];return a&&a.get?a.get(this):Kb.propHooks._default.get(this)},run:function(a){var b,c=Kb.propHooks[this.prop];return this.pos=b=this.options.duration?n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Kb.propHooks._default.set(this),this}},Kb.prototype.init.prototype=Kb.prototype,Kb.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Kb.propHooks.scrollTop=Kb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Kb.prototype.init,n.fx.step={};var Lb,Mb,Nb=/^(?:toggle|show|hide)$/,Ob=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pb=/queueHooks$/,Qb=[Vb],Rb={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Ob.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Ob.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do{h=h||".5",g/=h,n.style(c.elem,a,g+f)}while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};n.Animation=n.extend(Xb,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Rb[c]=Rb[c]||[],Rb[c].unshift(b)},prefilter:function(a,b){b?Qb.unshift(a):Qb.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||!0===d.queue)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xb(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||!1===f.queue?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&!1!==a&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pb.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){
return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Tb(b,!0),a,d,e)}}),n.each({slideDown:Tb("show"),slideUp:Tb("hide"),slideToggle:Tb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(Lb=n.now();b<c.length;b++)(a=c[b])()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),Lb=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Mb||(Mb=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Mb),Mb=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Zb,$b=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Zb:void 0)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)for(;c=f[e++];)d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Zb={set:function(a,b,c){return!1===b?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$b[b]||n.find.attr;$b[b]=function(a,b,d){var e,f;return d||(f=$b[b],$b[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$b[b]=f),e}});var _b=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{for:"htmlFor",class:"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_b.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ac=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ac," "):" ")){for(f=0;e=b[f++];)d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ac," "):"")){for(f=0;e=b[f++];)for(;d.indexOf(" "+e+" ")>=0;)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c)for(var b,d=0,e=n(this),f=a.match(E)||[];b=f[d++];)e.hasClass(b)?e.removeClass(b):e.addClass(b);else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||!1===a?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ac," ").indexOf(b)>=0)return!0;return!1}});n.fn.extend({val:function(a){var b,c,d,e=this[0];return arguments.length?(d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),(b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()])&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))})):e?(b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(/\r/g,""):null==c?"":c)):void 0}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){for(var c,d,e=a.options,f=n.makeArray(b),g=e.length;g--;)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cc=n.now(),dc=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var ec,fc,hc=/([?&])_=[^&]*/,ic=/^(.*?):[ \t]*([^\r\n]*)$/gm,jc=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,kc=/^(?:GET|HEAD)$/,mc=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,nc={},oc={},pc="*/".concat("*");try{fc=location.href}catch(qc){fc=l.createElement("a"),fc.href="",fc=fc.href}ec=mc.exec(fc.toLowerCase())||[],n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:fc,type:"GET",isLocal:jc.test(ec[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":pc,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?tc(tc(a,n.ajaxSettings),b):tc(n.ajaxSettings,a)},ajaxPrefilter:rc(nc),ajaxTransport:rc(oc),ajax:function(a,b){function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=uc(k,v,f)),u=vc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),(w=v.getResponseHeader("etag"))&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.loadingState,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f)for(f={};b=ic.exec(e);)f[b[1].toLowerCase()]=b[2];b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||fc)+"").replace(/#.*$/,"").replace(/^\/\//,ec[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=mc.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===ec[1]&&h[2]===ec[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(ec[3]||("http:"===ec[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),sc(nc,k,b,v),2===t)return v;i=k.global,i&&0==n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!kc.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(dc.test(d)?"&":"?")+k.data,delete k.data),!1===k.cache&&(k.url=hc.test(d)?d.replace(hc,"$1_="+cc++):d+(dc.test(d)?"&":"?")+"_="+cc++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&!1!==k.contentType||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+pc+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(!1===k.beforeSend.call(l,v,k)||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=sc(oc,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){for(var a=this;a.firstElementChild;)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var xc=/\[\]$/,zc=/^(?:submit|button|image|reset|file)$/i,Ac=/^(?:input|select|textarea|keygen)/i;n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Bc(c,a[c],b,e);return d.join("&").replace(/%20/g,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&Ac.test(this.nodeName)&&!zc.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(/\r?\n/g,"\r\n")}}):{name:b.name,value:c.replace(/\r?\n/g,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Cc=0,Dc={},Ec={0:200,1223:204},Fc=n.ajaxSettings.xhr();a.ActiveXObject&&n(a).on("unload",function(){for(var a in Dc)Dc[a]()}),k.cors=!!Fc&&"withCredentials"in Fc,k.ajax=Fc=!!Fc,n.ajaxTransport(function(a){var b;return k.cors||Fc&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Cc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Dc[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Ec[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Dc[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Gc=[],Hc=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Gc.pop()||n.expando+"_"+cc++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=!1!==b.jsonp&&(Hc.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Hc.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Hc,"$1"+e):!1!==b.jsonp&&(b.url+=(dc.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Gc.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Ic=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Ic)return Ic.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Jc=a.document.documentElement;n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;return f?(b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Kc(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e):void 0},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var a=this.offsetParent||Jc;a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position");)a=a.offsetParent;return a||Jc})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Kc(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=yb(k.pixelPosition,function(a,c){return c?(c=xb(a,b),vb.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(!0===d||!0===e?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Lc=a.jQuery,Mc=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Mc),b&&a.jQuery===n&&(a.jQuery=Lc),n},typeof b===U&&(a.jQuery=a.$=n),n}),function(){var n=this,t=n._,r={},e=Array.prototype,u=Object.prototype,i=Function.prototype,a=e.push,o=e.slice,c=e.concat,l=u.toString,f=u.hasOwnProperty,s=e.forEach,p=e.map,h=e.reduce,v=e.reduceRight,g=e.filter,d=e.every,m=e.some,y=e.indexOf,b=e.lastIndexOf,x=Array.isArray,w=Object.keys,_=i.bind,j=function(n){return n instanceof j?n:this instanceof j?void(this._wrapped=n):new j(n)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=j),exports._=j):n._=j,j.VERSION="1.6.0";var A=j.each=j.forEach=function(n,t,e){if(null==n)return n;if(s&&n.forEach===s)n.forEach(t,e);else if(n.length===+n.length){for(var u=0,i=n.length;i>u;u++)if(t.call(e,n[u],u,n)===r)return}else for(var a=j.keys(n),u=0,i=a.length;i>u;u++)if(t.call(e,n[a[u]],a[u],n)===r)return;return n};j.map=j.collect=function(n,t,r){var e=[];return null==n?e:p&&n.map===p?n.map(t,r):(A(n,function(n,u,i){e.push(t.call(r,n,u,i))}),e)};var O="Reduce of empty array with no initial value";j.reduce=j.foldl=j.inject=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),h&&n.reduce===h)return e&&(t=j.bind(t,e)),u?n.reduce(t,r):n.reduce(t);if(A(n,function(n,i,a){u?r=t.call(e,r,n,i,a):(r=n,u=!0)}),!u)throw new TypeError(O);return r},j.reduceRight=j.foldr=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),v&&n.reduceRight===v)return e&&(t=j.bind(t,e)),u?n.reduceRight(t,r):n.reduceRight(t);var i=n.length;if(i!==+i){var a=j.keys(n);i=a.length}if(A(n,function(o,c,l){c=a?a[--i]:--i,u?r=t.call(e,r,n[c],c,l):(r=n[c],u=!0)}),!u)throw new TypeError(O);return r},j.find=j.detect=function(n,t,r){var e;return k(n,function(n,u,i){return t.call(r,n,u,i)?(e=n,!0):void 0}),e},j.filter=j.select=function(n,t,r){var e=[];return null==n?e:g&&n.filter===g?n.filter(t,r):(A(n,function(n,u,i){t.call(r,n,u,i)&&e.push(n)}),e)},j.reject=function(n,t,r){return j.filter(n,function(n,e,u){return!t.call(r,n,e,u)},r)},j.every=j.all=function(n,t,e){t||(t=j.identity);var u=!0;return null==n?u:d&&n.every===d?n.every(t,e):(A(n,function(n,i,a){return(u=u&&t.call(e,n,i,a))?void 0:r}),!!u)};var k=j.some=j.any=function(n,t,e){t||(t=j.identity);var u=!1;return null==n?u:m&&n.some===m?n.some(t,e):(A(n,function(n,i,a){return u||(u=t.call(e,n,i,a))?r:void 0}),!!u)};j.contains=j.include=function(n,t){return null!=n&&(y&&n.indexOf===y?-1!=n.indexOf(t):k(n,function(n){return n===t}))},j.invoke=function(n,t){var r=o.call(arguments,2),e=j.isFunction(t);return j.map(n,function(n){return(e?t:n[t]).apply(n,r)})},j.pluck=function(n,t){return j.map(n,j.property(t))},j.where=function(n,t){return j.filter(n,j.matches(t))},j.findWhere=function(n,t){return j.find(n,j.matches(t))},j.max=function(n,t,r){if(!t&&j.isArray(n)&&n[0]===+n[0]&&n.length<65535)return Math.max.apply(Math,n);var e=-1/0,u=-1/0;return A(n,function(n,i,a){var o=t?t.call(r,n,i,a):n;o>u&&(e=n,u=o)}),e},j.min=function(n,t,r){if(!t&&j.isArray(n)&&n[0]===+n[0]&&n.length<65535)return Math.min.apply(Math,n);var e=1/0,u=1/0;return A(n,function(n,i,a){var o=t?t.call(r,n,i,a):n;u>o&&(e=n,u=o)}),e},j.shuffle=function(n){var t,r=0,e=[];return A(n,function(n){t=j.random(r++),e[r-1]=e[t],e[t]=n}),e},j.sample=function(n,t,r){return null==t||r?(n.length!==+n.length&&(n=j.values(n)),n[j.random(n.length-1)]):j.shuffle(n).slice(0,Math.max(0,t))};var E=function(n){return null==n?j.identity:j.isFunction(n)?n:j.property(n)};j.sortBy=function(n,t,r){return t=E(t),j.pluck(j.map(n,function(n,e,u){return{value:n,index:e,criteria:t.call(r,n,e,u)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||void 0===r)return 1;if(e>r||void 0===e)return-1}return n.index-t.index}),"value")};var F=function(n){return function(t,r,e){var u={};return r=E(r),A(t,function(i,a){var o=r.call(e,i,a,t);n(u,o,i)}),u}};j.groupBy=F(function(n,t,r){j.has(n,t)?n[t].push(r):n[t]=[r]}),j.indexBy=F(function(n,t,r){n[t]=r}),j.countBy=F(function(n,t){j.has(n,t)?n[t]++:n[t]=1}),j.sortedIndex=function(n,t,r,e){r=E(r);for(var u=r.call(e,t),i=0,a=n.length;a>i;){var o=i+a>>>1;r.call(e,n[o])<u?i=o+1:a=o}return i},j.toArray=function(n){return n?j.isArray(n)?o.call(n):n.length===+n.length?j.map(n,j.identity):j.values(n):[]},j.size=function(n){return null==n?0:n.length===+n.length?n.length:j.keys(n).length},j.first=j.head=j.take=function(n,t,r){return null==n?void 0:null==t||r?n[0]:0>t?[]:o.call(n,0,t)},j.initial=function(n,t,r){return o.call(n,0,n.length-(null==t||r?1:t))},j.last=function(n,t,r){return null==n?void 0:null==t||r?n[n.length-1]:o.call(n,Math.max(n.length-t,0))},j.rest=j.tail=j.drop=function(n,t,r){return o.call(n,null==t||r?1:t)},j.compact=function(n){return j.filter(n,j.identity)};var M=function(n,t,r){return t&&j.every(n,j.isArray)?c.apply(r,n):(A(n,function(n){j.isArray(n)||j.isArguments(n)?t?a.apply(r,n):M(n,t,r):r.push(n)}),r)};j.flatten=function(n,t){return M(n,t,[])},j.without=function(n){return j.difference(n,o.call(arguments,1))},j.partition=function(n,t){var r=[],e=[];return A(n,function(n){(t(n)?r:e).push(n)}),[r,e]},j.uniq=j.unique=function(n,t,r,e){j.isFunction(t)&&(e=r,r=t,t=!1);var u=r?j.map(n,r,e):n,i=[],a=[];return A(u,function(r,e){(t?e&&a[a.length-1]===r:j.contains(a,r))||(a.push(r),i.push(n[e]))}),i},j.union=function(){return j.uniq(j.flatten(arguments,!0))},j.intersection=function(n){var t=o.call(arguments,1);return j.filter(j.uniq(n),function(n){return j.every(t,function(t){return j.contains(t,n)})})},j.difference=function(n){var t=c.apply(e,o.call(arguments,1));return j.filter(n,function(n){return!j.contains(t,n)})},j.zip=function(){for(var n=j.max(j.pluck(arguments,"length").concat(0)),t=new Array(n),r=0;n>r;r++)t[r]=j.pluck(arguments,""+r);return t},j.object=function(n,t){if(null==n)return{};for(var r={},e=0,u=n.length;u>e;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},j.indexOf=function(n,t,r){if(null==n)return-1;var e=0,u=n.length;if(r){if("number"!=typeof r)return e=j.sortedIndex(n,t),n[e]===t?e:-1;e=0>r?Math.max(0,u+r):r}if(y&&n.indexOf===y)return n.indexOf(t,r);for(;u>e;e++)if(n[e]===t)return e;return-1},j.lastIndexOf=function(n,t,r){if(null==n)return-1;var e=null!=r;if(b&&n.lastIndexOf===b)return e?n.lastIndexOf(t,r):n.lastIndexOf(t);for(var u=e?r:n.length;u--;)if(n[u]===t)return u;return-1},j.range=function(n,t,r){arguments.length<=1&&(t=n||0,n=0),r=arguments[2]||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=0,i=new Array(e);e>u;)i[u++]=n,n+=r;return i};var R=function(){};j.bind=function(n,t){var r,e;if(_&&n.bind===_)return _.apply(n,o.call(arguments,1));if(!j.isFunction(n))throw new TypeError;return r=o.call(arguments,2),e=function(){if(!(this instanceof e))return n.apply(t,r.concat(o.call(arguments)));R.prototype=n.prototype;var u=new R;R.prototype=null;var i=n.apply(u,r.concat(o.call(arguments)));return Object(i)===i?i:u}},j.partial=function(n){var t=o.call(arguments,1);return function(){for(var r=0,e=t.slice(),u=0,i=e.length;i>u;u++)e[u]===j&&(e[u]=arguments[r++]);for(;r<arguments.length;)e.push(arguments[r++]);return n.apply(this,e)}},j.bindAll=function(n){var t=o.call(arguments,1);if(0===t.length)throw new Error("bindAll must be passed function names");return A(t,function(t){n[t]=j.bind(n[t],n)}),n},j.memoize=function(n,t){var r={};return t||(t=j.identity),function(){var e=t.apply(this,arguments);return j.has(r,e)?r[e]:r[e]=n.apply(this,arguments)}},j.delay=function(n,t){var r=o.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},j.defer=function(n){return j.delay.apply(j,[n,1].concat(o.call(arguments,1)))},j.throttle=function(n,t,r){var e,u,i,a=null,o=0;r||(r={});var c=function(){o=!1===r.leading?0:j.now(),a=null,i=n.apply(e,u),e=u=null};return function(){var l=j.now();o||!1!==r.leading||(o=l);var f=t-(l-o);return e=this,u=arguments,0>=f?(clearTimeout(a),a=null,o=l,i=n.apply(e,u),e=u=null):a||!1===r.trailing||(a=setTimeout(c,f)),i}},j.debounce=function(n,t,r){var e,u,i,a,o,c=function(){var l=j.now()-a;t>l?e=setTimeout(c,t-l):(e=null,r||(o=n.apply(i,u),i=u=null))};return function(){i=this,u=arguments,a=j.now();var l=r&&!e;return e||(e=setTimeout(c,t)),l&&(o=n.apply(i,u),i=u=null),o}},j.once=function(n){var t,r=!1;return function(){return r?t:(r=!0,t=n.apply(this,arguments),n=null,t)}},j.wrap=function(n,t){return j.partial(t,n)},j.compose=function(){var n=arguments;return function(){for(var t=arguments,r=n.length-1;r>=0;r--)t=[n[r].apply(this,t)];return t[0]}},j.after=function(n,t){return function(){return--n<1?t.apply(this,arguments):void 0}},j.keys=function(n){if(!j.isObject(n))return[];if(w)return w(n);var t=[];for(var r in n)j.has(n,r)&&t.push(r);return t},j.values=function(n){for(var t=j.keys(n),r=t.length,e=new Array(r),u=0;r>u;u++)e[u]=n[t[u]];return e},j.pairs=function(n){for(var t=j.keys(n),r=t.length,e=new Array(r),u=0;r>u;u++)e[u]=[t[u],n[t[u]]];return e},j.invert=function(n){for(var t={},r=j.keys(n),e=0,u=r.length;u>e;e++)t[n[r[e]]]=r[e];return t},j.functions=j.methods=function(n){var t=[];for(var r in n)j.isFunction(n[r])&&t.push(r);return t.sort()},j.extend=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)n[r]=t[r]}),n},j.pick=function(n){var t={},r=c.apply(e,o.call(arguments,1));return A(r,function(r){r in n&&(t[r]=n[r])}),t},j.omit=function(n){var t={},r=c.apply(e,o.call(arguments,1));for(var u in n)j.contains(r,u)||(t[u]=n[u]);return t},j.defaults=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)void 0===n[r]&&(n[r]=t[r])}),n},j.clone=function(n){return j.isObject(n)?j.isArray(n)?n.slice():j.extend({},n):n},j.tap=function(n,t){return t(n),n};var S=function(n,t,r,e){if(n===t)return 0!==n||1/n==1/t;if(null==n||null==t)return n===t;n instanceof j&&(n=n._wrapped),t instanceof j&&(t=t._wrapped);var u=l.call(n);if(u!=l.call(t))return!1;switch(u){case"[object String]":return n==String(t);case"[object Number]":return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case"[object Date]":case"[object Boolean]":return+n==+t;case"[object RegExp]":return n.source==t.source&&n.global==t.global&&n.multiline==t.multiline&&n.ignoreCase==t.ignoreCase}if("object"!=typeof n||"object"!=typeof t)return!1;for(var i=r.length;i--;)if(r[i]==n)return e[i]==t;var a=n.constructor,o=t.constructor;if(a!==o&&!(j.isFunction(a)&&a instanceof a&&j.isFunction(o)&&o instanceof o)&&"constructor"in n&&"constructor"in t)return!1;r.push(n),e.push(t);var c=0,f=!0;if("[object Array]"==u){if(c=n.length,f=c==t.length)for(;c--&&(f=S(n[c],t[c],r,e)););}else{for(var s in n)if(j.has(n,s)&&(c++,!(f=j.has(t,s)&&S(n[s],t[s],r,e))))break;if(f){for(s in t)if(j.has(t,s)&&!c--)break;f=!c}}return r.pop(),e.pop(),f};j.isEqual=function(n,t){return S(n,t,[],[])},j.isEmpty=function(n){if(null==n)return!0;if(j.isArray(n)||j.isString(n))return 0===n.length;for(var t in n)if(j.has(n,t))return!1;return!0},j.isElement=function(n){return!(!n||1!==n.nodeType)},j.isArray=x||function(n){return"[object Array]"==l.call(n)},j.isObject=function(n){return n===Object(n)},A(["Arguments","Function","String","Number","Date","RegExp"],function(n){j["is"+n]=function(t){return l.call(t)=="[object "+n+"]"}}),j.isArguments(arguments)||(j.isArguments=function(n){return!(!n||!j.has(n,"callee"))}),"function"!=typeof/./&&(j.isFunction=function(n){return"function"==typeof n}),j.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},j.isNaN=function(n){return j.isNumber(n)&&n!=+n},j.isBoolean=function(n){return!0===n||!1===n||"[object Boolean]"==l.call(n)},j.isNull=function(n){return null===n},j.isUndefined=function(n){return void 0===n},j.has=function(n,t){return f.call(n,t)},j.noConflict=function(){return n._=t,this},j.identity=function(n){return n},j.constant=function(n){return function(){return n}},j.property=function(n){return function(t){return t[n]}},j.matches=function(n){return function(t){if(t===n)return!0;for(var r in n)if(n[r]!==t[r])return!1;return!0}},j.times=function(n,t,r){for(var e=Array(Math.max(0,n)),u=0;n>u;u++)e[u]=t.call(r,u);return e},j.random=function(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))},j.now=Date.now||function(){return(new Date).getTime()};var T={escape:{
"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;"}};T.unescape=j.invert(T.escape);var I={escape:new RegExp("["+j.keys(T.escape).join("")+"]","g"),unescape:new RegExp("("+j.keys(T.unescape).join("|")+")","g")};j.each(["escape","unescape"],function(n){j[n]=function(t){return null==t?"":(""+t).replace(I[n],function(t){return T[n][t]})}}),j.result=function(n,t){if(null!=n){var r=n[t];return j.isFunction(r)?r.call(n):r}},j.mixin=function(n){A(j.functions(n),function(t){var r=j[t]=n[t];j.prototype[t]=function(){var n=[this._wrapped];return a.apply(n,arguments),z.call(this,r.apply(j,n))}})};var N=0;j.uniqueId=function(n){var t=++N+"";return n?n+t:t},j.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var q=/(.)^/,B={"'":"'","\\":"\\","\r":"r","\n":"n","\t":"t","\u2028":"u2028","\u2029":"u2029"};j.template=function(n,t,r){var e;r=j.defaults({},r,j.templateSettings);var u=new RegExp([(r.escape||q).source,(r.interpolate||q).source,(r.evaluate||q).source].join("|")+"|$","g"),i=0,a="__p+='";n.replace(u,function(t,r,e,u,o){return a+=n.slice(i,o).replace(/\\|'|\r|\n|\t|\u2028|\u2029/g,function(n){return"\\"+B[n]}),r&&(a+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'"),e&&(a+="'+\n((__t=("+e+"))==null?'':__t)+\n'"),u&&(a+="';\n"+u+"\n__p+='"),i=o+t.length,t}),a+="';\n",r.variable||(a="with(obj||{}){\n"+a+"}\n"),a="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+a+"return __p;\n";try{e=new Function(r.variable||"obj","_",a)}catch(o){throw o.source=a,o}if(t)return e(t,j);var c=function(n){return e.call(this,n,j)};return c.source="function("+(r.variable||"obj")+"){\n"+a+"}",c},j.chain=function(n){return j(n).chain()};var z=function(n){return this._chain?j(n).chain():n};j.mixin(j),A(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var t=e[n];j.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!=n&&"splice"!=n||0!==r.length||delete r[0],z.call(this,r)}}),A(["concat","join","slice"],function(n){var t=e[n];j.prototype[n]=function(){return z.call(this,t.apply(this._wrapped,arguments))}}),j.extend(j.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}}),"function"==typeof define&&define.amd&&define("underscore",[],function(){return j})}.call(this),function(t,e){if("function"==typeof define&&define.amd)define(["underscore","jquery","exports"],function(i,r,s){t.Backbone=e(t,s,i,r)});else if("undefined"!=typeof exports){var i=require("underscore");e(t,exports,i)}else t.Backbone=e(t,{},t._,t.jQuery||t.Zepto||t.ender||t.$)}(this,function(t,e,i,r){var s=t.Backbone,n=[],o=n.slice;e.VERSION="1.1.2",e.$=r,e.noConflict=function(){return t.Backbone=s,this},e.emulateHTTP=!1,e.emulateJSON=!1;var u=e.Events={on:function(t,e,i){return c(this,"on",t,[e,i])&&e?(this._events||(this._events={}),(this._events[t]||(this._events[t]=[])).push({callback:e,context:i,ctx:i||this}),this):this},once:function(t,e,r){if(!c(this,"once",t,[e,r])||!e)return this;var s=this,n=i.once(function(){s.off(t,n),e.apply(this,arguments)});return n._callback=e,this.on(t,n,r)},off:function(t,e,r){var s,n,a,o,h,u,l,f;if(!this._events||!c(this,"off",t,[e,r]))return this;if(!t&&!e&&!r)return this._events=void 0,this;for(o=t?[t]:i.keys(this._events),h=0,u=o.length;h<u;h++)if(t=o[h],a=this._events[t]){if(this._events[t]=s=[],e||r)for(l=0,f=a.length;l<f;l++)n=a[l],(e&&e!==n.callback&&e!==n.callback._callback||r&&r!==n.context)&&s.push(n);s.length||delete this._events[t]}return this},trigger:function(t){if(!this._events)return this;var e=o.call(arguments,1);if(!c(this,"trigger",t,e))return this;var i=this._events[t],r=this._events.all;return i&&f(i,e),r&&f(r,arguments),this},stopListening:function(t,e,r){var s=this._listeningTo;if(!s)return this;var n=!e&&!r;r||"object"!=typeof e||(r=this),t&&((s={})[t._listenId]=t);for(var a in s)t=s[a],t.off(e,r,this),(n||i.isEmpty(t._events))&&delete this._listeningTo[a];return this}},l=/\s+/,c=function(t,e,i,r){if(!i)return!0;if("object"==typeof i){for(var s in i)t[e].apply(t,[s,i[s]].concat(r));return!1}if(l.test(i)){for(var n=i.split(l),a=0,o=n.length;a<o;a++)t[e].apply(t,[n[a]].concat(r));return!1}return!0},f=function(t,e){var i,r=-1,s=t.length,n=e[0],a=e[1],o=e[2];switch(e.length){case 0:for(;++r<s;)(i=t[r]).callback.call(i.ctx);return;case 1:for(;++r<s;)(i=t[r]).callback.call(i.ctx,n);return;case 2:for(;++r<s;)(i=t[r]).callback.call(i.ctx,n,a);return;case 3:for(;++r<s;)(i=t[r]).callback.call(i.ctx,n,a,o);return;default:for(;++r<s;)(i=t[r]).callback.apply(i.ctx,e);return}},d={listenTo:"on",listenToOnce:"once"};i.each(d,function(t,e){u[e]=function(e,r,s){return(this._listeningTo||(this._listeningTo={}))[e._listenId||(e._listenId=i.uniqueId("l"))]=e,s||"object"!=typeof r||(s=this),e[t](r,s,this),this}}),u.bind=u.on,u.unbind=u.off,i.extend(e,u);var p=e.Model=function(t,e){var r=t||{};e||(e={}),this.cid=i.uniqueId("c"),this.attributes={},e.collection&&(this.collection=e.collection),e.parse&&(r=this.parse(r,e)||{}),r=i.defaults({},r,i.result(this,"defaults")),this.set(r,e),this.changed={},this.initialize.apply(this,arguments)};i.extend(p.prototype,u,{changed:null,validationError:null,idAttribute:"id",initialize:function(){},toJSON:function(t){return i.clone(this.attributes)},sync:function(){return e.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return i.escape(this.get(t))},has:function(t){return null!=this.get(t)},set:function(t,e,r){var s,n,a,o,h,u,l,c;if(null==t)return this;if("object"==typeof t?(n=t,r=e):(n={})[t]=e,r||(r={}),!this._validate(n,r))return!1;a=r.unset,h=r.silent,o=[],u=this._changing,this._changing=!0,u||(this._previousAttributes=i.clone(this.attributes),this.changed={}),c=this.attributes,l=this._previousAttributes,this.idAttribute in n&&(this.id=n[this.idAttribute]);for(s in n)e=n[s],i.isEqual(c[s],e)||o.push(s),i.isEqual(l[s],e)?delete this.changed[s]:this.changed[s]=e,a?delete c[s]:c[s]=e;if(!h){o.length&&(this._pending=r);for(var f=0,d=o.length;f<d;f++)this.trigger("change:"+o[f],this,c[o[f]],r)}if(u)return this;if(!h)for(;this._pending;)r=this._pending,this._pending=!1,this.trigger("change",this,r);return this._pending=!1,this._changing=!1,this},unset:function(t,e){return this.set(t,void 0,i.extend({},e,{unset:!0}))},clear:function(t){var e={};for(var r in this.attributes)e[r]=void 0;return this.set(e,i.extend({},t,{unset:!0}))},hasChanged:function(t){return null==t?!i.isEmpty(this.changed):i.has(this.changed,t)},changedAttributes:function(t){if(!t)return!!this.hasChanged()&&i.clone(this.changed);var e,r=!1,s=this._changing?this._previousAttributes:this.attributes;for(var n in t)i.isEqual(s[n],e=t[n])||((r||(r={}))[n]=e);return r},previous:function(t){return null!=t&&this._previousAttributes?this._previousAttributes[t]:null},previousAttributes:function(){return i.clone(this._previousAttributes)},fetch:function(t){t=t?i.clone(t):{},void 0===t.parse&&(t.parse=!0);var e=this,r=t.success;return t.success=function(i){if(!e.set(e.parse(i,t),t))return!1;r&&r(e,i,t),e.trigger("sync",e,i,t)},q(this,t),this.sync("read",this,t)},save:function(t,e,r){var s,n,a,o=this.attributes;if(null==t||"object"==typeof t?(s=t,r=e):(s={})[t]=e,r=i.extend({validate:!0},r),s&&!r.wait){if(!this.set(s,r))return!1}else if(!this._validate(s,r))return!1;s&&r.wait&&(this.attributes=i.extend({},o,s)),void 0===r.parse&&(r.parse=!0);var h=this,u=r.success;return r.success=function(t){h.attributes=o;var e=h.parse(t,r);if(r.wait&&(e=i.extend(s||{},e)),i.isObject(e)&&!h.set(e,r))return!1;u&&u(h,t,r),h.trigger("sync",h,t,r)},q(this,r),n=this.isNew()?"create":r.patch?"patch":"update","patch"===n&&(r.attrs=s),a=this.sync(n,this,r),s&&r.wait&&(this.attributes=o),a},destroy:function(t){t=t?i.clone(t):{};var e=this,r=t.success,s=function(){e.trigger("destroy",e,e.collection,t)};if(t.success=function(i){(t.wait||e.isNew())&&s(),r&&r(e,i,t),e.isNew()||e.trigger("sync",e,i,t)},this.isNew())return t.success(),!1;q(this,t);var n=this.sync("delete",this,t);return t.wait||s(),n},url:function(){var t=i.result(this,"urlRoot")||i.result(this.collection,"url")||M();return this.isNew()?t:t.replace(/([^\/])$/,"$1/")+encodeURIComponent(this.id)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(t){return this._validate({},i.extend(t||{},{validate:!0}))},_validate:function(t,e){if(!e.validate||!this.validate)return!0;t=i.extend({},this.attributes,t);var r=this.validationError=this.validate(t,e)||null;return!r||(this.trigger("invalid",this,r,i.extend(e,{validationError:r})),!1)}});var v=["keys","values","pairs","invert","pick","omit"];i.each(v,function(t){p.prototype[t]=function(){var e=o.call(arguments);return e.unshift(this.attributes),i[t].apply(i,e)}});var g=e.Collection=function(t,e){e||(e={}),e.model&&(this.model=e.model),void 0!==e.comparator&&(this.comparator=e.comparator),this._reset(),this.initialize.apply(this,arguments),t&&this.reset(t,i.extend({silent:!0},e))},m={add:!0,remove:!0,merge:!0},y={add:!0,remove:!1};i.extend(g.prototype,u,{model:p,initialize:function(){},toJSON:function(t){return this.map(function(e){return e.toJSON(t)})},sync:function(){return e.sync.apply(this,arguments)},add:function(t,e){return this.set(t,i.extend({merge:!1},e,y))},remove:function(t,e){var r=!i.isArray(t);t=r?[t]:i.clone(t),e||(e={});var s,n,a,o;for(s=0,n=t.length;s<n;s++)(o=t[s]=this.get(t[s]))&&(delete this._byId[o.id],delete this._byId[o.cid],a=this.indexOf(o),this.models.splice(a,1),this.length--,e.silent||(e.index=a,o.trigger("remove",o,this,e)),this._removeReference(o,e));return r?t[0]:t},set:function(t,e){e=i.defaults({},e,m),e.parse&&(t=this.parse(t,e));var r=!i.isArray(t);t=r?t?[t]:[]:i.clone(t);var s,n,a,o,h,u,l,c=e.at,f=this.model,d=this.comparator&&null==c&&!1!==e.sort,v=i.isString(this.comparator)?this.comparator:null,g=[],y=[],_={},b=e.add,w=e.merge,x=e.remove,E=!(d||!b||!x)&&[];for(s=0,n=t.length;s<n;s++){if(h=t[s]||{},a=h instanceof p?o=h:h[f.prototype.idAttribute||"id"],u=this.get(a))x&&(_[u.cid]=!0),w&&(h=h===o?o.attributes:h,e.parse&&(h=u.parse(h,e)),u.set(h,e),d&&!l&&u.hasChanged(v)&&(l=!0)),t[s]=u;else if(b){if(!(o=t[s]=this._prepareModel(h,e)))continue;g.push(o),this._addReference(o,e)}o=u||o,!E||!o.isNew()&&_[o.id]||E.push(o),_[o.id]=!0}if(x){for(s=0,n=this.length;s<n;++s)_[(o=this.models[s]).cid]||y.push(o);y.length&&this.remove(y,e)}if(g.length||E&&E.length)if(d&&(l=!0),this.length+=g.length,null!=c)for(s=0,n=g.length;s<n;s++)this.models.splice(c+s,0,g[s]);else{E&&(this.models.length=0);var k=E||g;for(s=0,n=k.length;s<n;s++)this.models.push(k[s])}if(l&&this.sort({silent:!0}),!e.silent){for(s=0,n=g.length;s<n;s++)(o=g[s]).trigger("add",o,this,e);(l||E&&E.length)&&this.trigger("sort",this,e)}return r?t[0]:t},reset:function(t,e){e||(e={});for(var r=0,s=this.models.length;r<s;r++)this._removeReference(this.models[r],e);return e.previousModels=this.models,this._reset(),t=this.add(t,i.extend({silent:!0},e)),e.silent||this.trigger("reset",this,e),t},push:function(t,e){return this.add(t,i.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);return this.remove(e,t),e},unshift:function(t,e){return this.add(t,i.extend({at:0},e))},shift:function(t){var e=this.at(0);return this.remove(e,t),e},slice:function(){return o.apply(this.models,arguments)},get:function(t){if(null!=t)return this._byId[t]||this._byId[t.id]||this._byId[t.cid]},at:function(t){return this.models[t]},where:function(t,e){return i.isEmpty(t)?e?void 0:[]:this[e?"find":"filter"](function(e){for(var i in t)if(t[i]!==e.get(i))return!1;return!0})},findWhere:function(t){return this.where(t,!0)},sort:function(t){if(!this.comparator)throw new Error("Cannot sort a set without a comparator");return t||(t={}),i.isString(this.comparator)||1===this.comparator.length?this.models=this.sortBy(this.comparator,this):this.models.sort(i.bind(this.comparator,this)),t.silent||this.trigger("sort",this,t),this},pluck:function(t){return i.invoke(this.models,"get",t)},fetch:function(t){t=t?i.clone(t):{},void 0===t.parse&&(t.parse=!0);var e=t.success,r=this;return t.success=function(i){var s=t.reset?"reset":"set";r[s](i,t),e&&e(r,i,t),r.trigger("sync",r,i,t)},q(this,t),this.sync("read",this,t)},create:function(t,e){if(e=e?i.clone(e):{},!(t=this._prepareModel(t,e)))return!1;e.wait||this.add(t,e);var r=this,s=e.success;return e.success=function(t,i){e.wait&&r.add(t,e),s&&s(t,i,e)},t.save(null,e),t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(t,e){if(t instanceof p)return t;e=e?i.clone(e):{},e.collection=this;var r=new this.model(t,e);return r.validationError?(this.trigger("invalid",this,r.validationError,e),!1):r},_addReference:function(t,e){this._byId[t.cid]=t,null!=t.id&&(this._byId[t.id]=t),t.collection||(t.collection=this),t.on("all",this._onModelEvent,this)},_removeReference:function(t,e){this===t.collection&&delete t.collection,t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,e,i,r){("add"!==t&&"remove"!==t||i===this)&&("destroy"===t&&this.remove(e,r),e&&t==="change:"+e.idAttribute&&(delete this._byId[e.previous(e.idAttribute)],null!=e.id&&(this._byId[e.id]=e)),this.trigger.apply(this,arguments))}});var _=["forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","difference","indexOf","shuffle","lastIndexOf","isEmpty","chain","sample"];i.each(_,function(t){g.prototype[t]=function(){var e=o.call(arguments);return e.unshift(this.models),i[t].apply(i,e)}});var b=["groupBy","countBy","sortBy","indexBy"];i.each(b,function(t){g.prototype[t]=function(e,r){var s=i.isFunction(e)?e:function(t){return t.get(e)};return i[t](this.models,s,r)}});var w=e.View=function(t){this.cid=i.uniqueId("view"),t||(t={}),i.extend(this,i.pick(t,E)),this._ensureElement(),this.initialize.apply(this,arguments),this.delegateEvents()},E=["model","collection","el","id","attributes","className","tagName","events"];i.extend(w.prototype,u,{tagName:"div",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){return this.$el.remove(),this.stopListening(),this},setElement:function(t,i){return this.$el&&this.undelegateEvents(),this.$el=t instanceof e.$?t:e.$(t),this.el=this.$el[0],!1!==i&&this.delegateEvents(),this},delegateEvents:function(t){if(!t&&!(t=i.result(this,"events")))return this;this.undelegateEvents();for(var e in t){var r=t[e];if(i.isFunction(r)||(r=this[t[e]]),r){var s=e.match(/^(\S+)\s*(.*)$/),n=s[1],a=s[2];r=i.bind(r,this),n+=".delegateEvents"+this.cid,""===a?this.$el.on(n,r):this.$el.on(n,a,r)}}return this},undelegateEvents:function(){return this.$el.off(".delegateEvents"+this.cid),this},_ensureElement:function(){if(this.el)this.setElement(i.result(this,"el"),!1);else{var t=i.extend({},i.result(this,"attributes"));this.id&&(t.id=i.result(this,"id")),this.className&&(t.class=i.result(this,"className"));var r=e.$("<"+i.result(this,"tagName")+">").attr(t);this.setElement(r,!1)}}}),e.sync=function(t,r,s){var n=T[t];i.defaults(s||(s={}),{emulateHTTP:e.emulateHTTP,emulateJSON:e.emulateJSON});var a={type:n,dataType:"json"};if(s.url||(a.url=i.result(r,"url")||M()),null!=s.data||!r||"create"!==t&&"update"!==t&&"patch"!==t||(a.contentType="application/json",a.data=JSON.stringify(s.attrs||r.toJSON(s))),s.emulateJSON&&(a.contentType="application/x-www-form-urlencoded",a.data=a.data?{model:a.data}:{}),s.emulateHTTP&&("PUT"===n||"DELETE"===n||"PATCH"===n)){a.type="POST",s.emulateJSON&&(a.data._method=n);var o=s.beforeSend;s.beforeSend=function(t){if(t.setRequestHeader("X-HTTP-Method-Override",n),o)return o.apply(this,arguments)}}"GET"===a.type||s.emulateJSON||(a.processData=!1),"PATCH"===a.type&&k&&(a.xhr=function(){return new ActiveXObject("Microsoft.XMLHTTP")});var h=s.xhr=e.ajax(i.extend(a,s));return r.trigger("request",r,h,s),h};var k=!("undefined"==typeof window||!window.ActiveXObject||window.XMLHttpRequest&&(new XMLHttpRequest).dispatchEvent),T={create:"POST",update:"PUT",patch:"PATCH",delete:"DELETE",read:"GET"};e.ajax=function(){return e.$.ajax.apply(e.$,arguments)};var $=e.Router=function(t){t||(t={}),t.routes&&(this.routes=t.routes),this._bindRoutes(),this.initialize.apply(this,arguments)};i.extend($.prototype,u,{initialize:function(){},route:function(t,r,s){i.isRegExp(t)||(t=this._routeToRegExp(t)),i.isFunction(r)&&(s=r,r=""),s||(s=this[r]);var n=this;return e.history.route(t,function(i){var a=n._extractParameters(t,i);n.execute(s,a),n.trigger.apply(n,["route:"+r].concat(a)),n.trigger("route",r,a),e.history.trigger("route",n,r,a)}),this},execute:function(t,e){t&&t.apply(this,e)},navigate:function(t,i){return e.history.navigate(t,i),this},_bindRoutes:function(){if(this.routes){this.routes=i.result(this,"routes");for(var t,e=i.keys(this.routes);null!=(t=e.pop());)this.route(t,this.routes[t])}},_routeToRegExp:function(t){return t=t.replace(/[\-{}\[\]+?.,\\\^$|#\s]/g,"\\$&").replace(/\((.*?)\)/g,"(?:$1)?").replace(/(\(\?)?:\w+/g,function(t,e){return e?t:"([^/?]+)"}).replace(/\*\w+/g,"([^?]*?)"),new RegExp("^"+t+"(?:\\?([\\s\\S]*))?$")},_extractParameters:function(t,e){var r=t.exec(e).slice(1);return i.map(r,function(t,e){return e===r.length-1?t||null:t?decodeURIComponent(t):null})}});var N=e.History=function(){this.handlers=[],i.bindAll(this,"checkUrl"),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},R=/^[#\/]|\s+$/g,P=/msie [\w.]+/;N.started=!1,i.extend(N.prototype,u,{interval:50,atRoot:function(){return this.location.pathname.replace(/[^\/]$/,"$&/")===this.root},getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""},getFragment:function(t,e){if(null==t)if(this._hasPushState||!this._wantsHashChange||e){t=decodeURI(this.location.pathname+this.location.search);var i=this.root.replace(/\/$/,"");t.indexOf(i)||(t=t.slice(i.length))}else t=this.getHash();return t.replace(R,"")},start:function(t){if(N.started)throw new Error("Backbone.history has already been started");N.started=!0,this.options=i.extend({root:"/"},this.options,t),this.root=this.options.root,this._wantsHashChange=!1!==this.options.hashChange,this._wantsPushState=!!this.options.pushState,this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var r=this.getFragment(),s=document.documentMode,n=P.exec(navigator.userAgent.toLowerCase())&&(!s||s<=7);if(this.root=("/"+this.root+"/").replace(/^\/+|\/+$/g,"/"),n&&this._wantsHashChange){var a=e.$('<iframe src="javascript:0" tabindex="-1">');this.iframe=a.hide().appendTo("body")[0].contentWindow,this.navigate(r)}this._hasPushState?e.$(window).on("popstate",this.checkUrl):this._wantsHashChange&&"onhashchange"in window&&!n?e.$(window).on("hashchange",this.checkUrl):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),this.fragment=r;var o=this.location;if(this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot())return this.fragment=this.getFragment(null,!0),this.location.replace(this.root+"#"+this.fragment),!0;this._hasPushState&&this.atRoot()&&o.hash&&(this.fragment=this.getHash().replace(R,""),this.history.replaceState({},document.title,this.root+this.fragment))}if(!this.options.silent)return this.loadUrl()},stop:function(){e.$(window).off("popstate",this.checkUrl).off("hashchange",this.checkUrl),this._checkUrlInterval&&clearInterval(this._checkUrlInterval),N.started=!1},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();if(e===this.fragment&&this.iframe&&(e=this.getFragment(this.getHash(this.iframe))),e===this.fragment)return!1;this.iframe&&this.navigate(e),this.loadUrl()},loadUrl:function(t){return t=this.fragment=this.getFragment(t),i.any(this.handlers,function(e){if(e.route.test(t))return e.callback(t),!0})},navigate:function(t,e){if(!N.started)return!1;e&&!0!==e||(e={trigger:!!e});var i=this.root+(t=this.getFragment(t||""));if(t=t.replace(/#.*$/,""),this.fragment!==t){if(this.fragment=t,""===t&&"/"!==i&&(i=i.slice(0,-1)),this._hasPushState)this.history[e.replace?"replaceState":"pushState"]({},document.title,i);else{if(!this._wantsHashChange)return this.location.assign(i);this._updateHash(this.location,t,e.replace),this.iframe&&t!==this.getFragment(this.getHash(this.iframe))&&(e.replace||this.iframe.document.open().close(),this._updateHash(this.iframe.location,t,e.replace))}return e.trigger?this.loadUrl(t):void 0}},_updateHash:function(t,e,i){if(i){var r=t.href.replace(/(javascript:|#).*$/,"");t.replace(r+"#"+e)}else t.hash="#"+e}}),e.history=new N;var U=function(t,e){var s,r=this;s=t&&i.has(t,"constructor")?t.constructor:function(){return r.apply(this,arguments)},i.extend(s,r,e);var n=function(){this.constructor=s};return n.prototype=r.prototype,s.prototype=new n,t&&i.extend(s.prototype,t),s.__super__=r.prototype,s};p.extend=g.extend=$.extend=w.extend=N.extend=U;var M=function(){throw new Error('A "url" property or function must be specified')},q=function(t,e){var i=e.error;e.error=function(r){i&&i(t,r,e),t.trigger("error",t,r,e)}};return e}),function(){var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.5.3",t.utils={},t.utils.warn=function(t){return function(e){t.console&&console.warn&&console.warn(e)}}(this),t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var t=Array.prototype.slice.call(arguments),e=t.pop(),n=t;if("function"!=typeof e)throw new TypeError("last argument must be a function");n.forEach(function(t){this.hasHandler(t)||(this.events[t]=[]),this.events[t].push(e)},this)},t.EventEmitter.prototype.removeListener=function(t,e){if(this.hasHandler(t)){var n=this.events[t].indexOf(e);this.events[t].splice(n,1),this.events[t].length||delete this.events[t]}},t.EventEmitter.prototype.emit=function(t){if(this.hasHandler(t)){var e=Array.prototype.slice.call(arguments,1);this.events[t].forEach(function(t){t.apply(void 0,e)})}},t.EventEmitter.prototype.hasHandler=function(t){return t in this.events},t.tokenizer=function(t){if(!arguments.length||null==t||void 0==t)return[];if(Array.isArray(t))return t.map(function(t){return t.toLowerCase()});for(var e=t.toString().replace(/^\s+/,""),n=e.length-1;n>=0;n--)if(/\S/.test(e.charAt(n))){e=e.substring(0,n+1);break}return e.split(/\s+/).map(function(t){return t.toLowerCase()})},t.Pipeline=function(){this._stack=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in this.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[e.label]=e},t.Pipeline.warnIfFunctionNotRegistered=function(e){e.label&&e.label in this.registeredFunctions||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.registeredFunctions[e];if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){Array.prototype.slice.call(arguments).forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._stack.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._stack.indexOf(e)+1;this._stack.splice(i,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._stack.indexOf(e);this._stack.splice(i,0,n)},t.Pipeline.prototype.remove=function(t){var e=this._stack.indexOf(t);this._stack.splice(e,1)},t.Pipeline.prototype.run=function(t){for(var e=[],n=t.length,i=this._stack.length,o=0;n>o;o++){for(var r=t[o],s=0;i>s&&void 0!==(r=this._stack[s](r,o,t));s++);void 0!==r&&e.push(r)}return e},t.Pipeline.prototype.reset=function(){this._stack=[]},t.Pipeline.prototype.toJSON=function(){return this._stack.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Vector=function(){this._magnitude=null,this.list=void 0,this.length=0},t.Vector.Node=function(t,e,n){this.idx=t,this.val=e,this.next=n},t.Vector.prototype.insert=function(e,n){var i=this.list;if(!i)return this.list=new t.Vector.Node(e,n,i),this.length++;for(var o=i,r=i.next;void 0!=r;){if(e<r.idx)return o.next=new t.Vector.Node(e,n,r),this.length++;o=r,r=r.next}return o.next=new t.Vector.Node(e,n,r),this.length++},t.Vector.prototype.magnitude=function(){if(this._magniture)return this._magnitude;for(var t,e=this.list,n=0;e;)t=e.val,n+=t*t,e=e.next;return this._magnitude=Math.sqrt(n)},t.Vector.prototype.dot=function(t){for(var e=this.list,n=t.list,i=0;e&&n;)e.idx<n.idx?e=e.next:e.idx>n.idx?n=n.next:(i+=e.val*n.val,e=e.next,n=n.next);return i},t.Vector.prototype.similarity=function(t){return this.dot(t)/(this.magnitude()*t.magnitude())},t.SortedSet=function(){this.length=0,this.elements=[]},t.SortedSet.load=function(t){var e=new this;return e.elements=t,e.length=t.length,e},t.SortedSet.prototype.add=function(){Array.prototype.slice.call(arguments).forEach(function(t){~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t)},this),this.length=this.elements.length},t.SortedSet.prototype.toArray=function(){return this.elements.slice()},t.SortedSet.prototype.map=function(t,e){return this.elements.map(t,e)},t.SortedSet.prototype.forEach=function(t,e){return this.elements.forEach(t,e)},t.SortedSet.prototype.indexOf=function(t,e,n){var e=e||0,n=n||this.elements.length,i=n-e,o=e+Math.floor(i/2),r=this.elements[o];return 1>=i?r===t?o:-1:t>r?this.indexOf(t,o,n):r>t?this.indexOf(t,e,o):r===t?o:void 0},t.SortedSet.prototype.locationFor=function(t,e,n){var e=e||0,n=n||this.elements.length,i=n-e,o=e+Math.floor(i/2),r=this.elements[o];if(1>=i){if(r>t)return o;if(t>r)return o+1}return t>r?this.locationFor(t,o,n):r>t?this.locationFor(t,e,o):void 0},t.SortedSet.prototype.intersect=function(e){for(var n=new t.SortedSet,i=0,o=0,r=this.length,s=e.length,a=this.elements,h=e.elements;!(i>r-1||o>s-1);)a[i]!==h[o]?a[i]<h[o]?i++:a[i]>h[o]&&o++:(n.add(a[i]),i++,o++);return n},t.SortedSet.prototype.clone=function(){var e=new t.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},t.SortedSet.prototype.union=function(t){var e,n,i;return this.length>=t.length?(e=this,n=t):(e=t,n=this),i=e.clone(),i.add.apply(i,n.toArray()),i},t.SortedSet.prototype.toJSON=function(){return this.toArray()},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.Store,this.tokenStore=new t.TokenStore,this.corpusTokens=new t.SortedSet,this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var t=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,t)},t.Index.prototype.off=function(t,e){return this.eventEmitter.removeListener(t,e)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;return n._fields=e.fields,n._ref=e.ref,n.documentStore=t.Store.load(e.documentStore),n.tokenStore=t.TokenStore.load(e.tokenStore),n.corpusTokens=t.SortedSet.load(e.corpusTokens),n.pipeline=t.Pipeline.load(e.pipeline),n},t.Index.prototype.field=function(t,e){var e=e||{},n={name:t,boost:e.boost||1};return this._fields.push(n),this},t.Index.prototype.ref=function(t){return this._ref=t,this},t.Index.prototype.add=function(e,n){var i={},o=new t.SortedSet,r=e[this._ref],n=void 0===n||n;this._fields.forEach(function(n){var r=this.pipeline.run(t.tokenizer(e[n.name]));i[n.name]=r,t.SortedSet.prototype.add.apply(o,r)},this),this.documentStore.set(r,o),t.SortedSet.prototype.add.apply(this.corpusTokens,o.toArray());for(var s=0;s<o.length;s++){var a=o.elements[s],h=this._fields.reduce(function(t,e){var n=i[e.name].length;return n?t+i[e.name].filter(function(t){return t===a}).length/n*e.boost:t},0);this.tokenStore.add(a,{ref:r,tf:h})}n&&this.eventEmitter.emit("add",e,this)},t.Index.prototype.remove=function(t,e){var n=t[this._ref],e=void 0===e||e;if(this.documentStore.has(n)){var i=this.documentStore.get(n);this.documentStore.remove(n),i.forEach(function(t){this.tokenStore.remove(t,n)},this),e&&this.eventEmitter.emit("remove",t,this)}},t.Index.prototype.update=function(t,e){var e=void 0===e||e;this.remove(t,!1),this.add(t,!1),e&&this.eventEmitter.emit("update",t,this)},t.Index.prototype.idf=function(t){var e="@"+t;if(Object.prototype.hasOwnProperty.call(this._idfCache,e))return this._idfCache[e];var n=this.tokenStore.count(t),i=1;return n>0&&(i=1+Math.log(this.tokenStore.length/n)),this._idfCache[e]=i},t.Index.prototype.search=function(e){var n=this.pipeline.run(t.tokenizer(e)),i=new t.Vector,o=[],r=this._fields.reduce(function(t,e){return t+e.boost},0);return n.some(function(t){return this.tokenStore.has(t)},this)?(n.forEach(function(e,n,s){var a=1/s.length*this._fields.length*r,h=this,l=this.tokenStore.expand(e).reduce(function(n,o){var r=h.corpusTokens.indexOf(o),s=h.idf(o),l=1,u=new t.SortedSet;if(o!==e){var c=Math.max(3,o.length-e.length);l=1/Math.log(c)}return r>-1&&i.insert(r,a*s*l),Object.keys(h.tokenStore.get(o)).forEach(function(t){u.add(t)}),n.union(u)},new t.SortedSet);o.push(l)},this),o.reduce(function(t,e){return t.intersect(e)}).map(function(t){return{ref:t,score:i.similarity(this.documentVector(t))}},this).sort(function(t,e){return e.score-t.score})):[]},t.Index.prototype.documentVector=function(e){for(var n=this.documentStore.get(e),i=n.length,o=new t.Vector,r=0;i>r;r++){var s=n.elements[r],a=this.tokenStore.get(s)[e].tf,h=this.idf(s);o.insert(this.corpusTokens.indexOf(s),a*h)}return o},t.Index.prototype.toJSON=function(){return{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),tokenStore:this.tokenStore.toJSON(),corpusTokens:this.corpusTokens.toJSON(),pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(t){var e=Array.prototype.slice.call(arguments,1);e.unshift(this),t.apply(this,e)},t.Store=function(){this.store={},this.length=0},t.Store.load=function(e){var n=new this;return n.length=e.length,n.store=Object.keys(e.store).reduce(function(n,i){return n[i]=t.SortedSet.load(e.store[i]),n},{}),n},t.Store.prototype.set=function(t,e){this.store[t]=e,this.length=Object.keys(this.store).length},t.Store.prototype.get=function(t){return this.store[t]},t.Store.prototype.has=function(t){return t in this.store},t.Store.prototype.remove=function(t){this.has(t)&&(delete this.store[t],this.length--)},t.Store.prototype.toJSON=function(){return{store:this.store,length:this.length}},t.stemmer=function(){var t={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},e={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},i="[aeiouy]",o="[^aeiou][^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,h="^("+o+")?"+r+o+r+o;return function(n){var r,u,c,p,f,d,v;if(n.length<3)return n;if(c=n.substr(0,1),"y"==c&&(n=c.toUpperCase()+n.substr(1)),p=/^(.+?)(ss|i)es$/,f=/^(.+?)([^s])s$/,p.test(n)?n=n.replace(p,"$1$2"):f.test(n)&&(n=n.replace(f,"$1$2")),p=/^(.+?)eed$/,f=/^(.+?)(ed|ing)$/,p.test(n)){var m=p.exec(n);p=new RegExp(s),p.test(m[1])&&(p=/.$/,n=n.replace(p,""))}else if(f.test(n)){var m=f.exec(n);r=m[1],f=new RegExp("^([^aeiou][^aeiouy]*)?[aeiouy]"),f.test(r)&&(n=r,
f=/(at|bl|iz)$/,d=new RegExp("([^aeiouylsz])\\1$"),v=new RegExp("^"+o+i+"[^aeiouwxy]$"),f.test(n)?n+="e":d.test(n)?(p=/.$/,n=n.replace(p,"")):v.test(n)&&(n+="e"))}if(p=/^(.+?[^aeiou])y$/,p.test(n)){var m=p.exec(n);r=m[1],n=r+"i"}if(p=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,p.test(n)){var m=p.exec(n);r=m[1],u=m[2],p=new RegExp(s),p.test(r)&&(n=r+t[u])}if(p=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,p.test(n)){var m=p.exec(n);r=m[1],u=m[2],p=new RegExp(s),p.test(r)&&(n=r+e[u])}if(p=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,f=/^(.+?)(s|t)(ion)$/,p.test(n)){var m=p.exec(n);r=m[1],p=new RegExp(h),p.test(r)&&(n=r)}else if(f.test(n)){var m=f.exec(n);r=m[1]+m[2],f=new RegExp(h),f.test(r)&&(n=r)}if(p=/^(.+?)e$/,p.test(n)){var m=p.exec(n);r=m[1],p=new RegExp(h),f=new RegExp("^([^aeiou][^aeiouy]*)?[aeiouy][aeiou]*[^aeiou][^aeiouy]*([aeiouy][aeiou]*)?$"),d=new RegExp("^"+o+i+"[^aeiouwxy]$"),(p.test(r)||f.test(r)&&!d.test(r))&&(n=r)}return p=/ll$/,f=new RegExp(h),p.test(n)&&f.test(n)&&(p=/.$/,n=n.replace(p,"")),"y"==c&&(n=c.toLowerCase()+n.substr(1)),n}}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return-1===t.stopWordFilter.stopWords.indexOf(e)?e:void 0},t.stopWordFilter.stopWords=new t.SortedSet,t.stopWordFilter.stopWords.length=119,t.stopWordFilter.stopWords.elements=["","a","able","about","across","after","all","almost","also","am","among","an","and","any","are","as","at","be","because","been","but","by","can","cannot","could","dear","did","do","does","either","else","ever","every","for","from","get","got","had","has","have","he","her","hers","him","his","how","however","i","if","in","into","is","it","its","just","least","let","like","likely","may","me","might","most","must","my","neither","no","nor","not","of","off","often","on","only","or","other","our","own","rather","said","say","says","she","should","since","so","some","than","that","the","their","them","then","there","these","they","this","tis","to","too","twas","us","wants","was","we","were","what","when","where","which","while","who","whom","why","will","with","would","yet","you","your"],t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(t){return t.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.TokenStore=function(){this.root={docs:{}},this.length=0},t.TokenStore.load=function(t){var e=new this;return e.root=t.root,e.length=t.length,e},t.TokenStore.prototype.add=function(t,e,n){var n=n||this.root,i=t[0],o=t.slice(1);return i in n||(n[i]={docs:{}}),0===o.length?(n[i].docs[e.ref]=e,void(this.length+=1)):this.add(o,e,n[i])},t.TokenStore.prototype.has=function(t){if(!t)return!1;for(var e=this.root,n=0;n<t.length;n++){if(!e[t[n]])return!1;e=e[t[n]]}return!0},t.TokenStore.prototype.getNode=function(t){if(!t)return{};for(var e=this.root,n=0;n<t.length;n++){if(!e[t[n]])return{};e=e[t[n]]}return e},t.TokenStore.prototype.get=function(t,e){return this.getNode(t,e).docs||{}},t.TokenStore.prototype.count=function(t,e){return Object.keys(this.get(t,e)).length},t.TokenStore.prototype.remove=function(t,e){if(t){for(var n=this.root,i=0;i<t.length;i++){if(!(t[i]in n))return;n=n[t[i]]}delete n.docs[e]}},t.TokenStore.prototype.expand=function(t,e){var n=this.getNode(t),i=n.docs||{},e=e||[];return Object.keys(i).length&&e.push(t),Object.keys(n).forEach(function(n){"docs"!==n&&e.concat(this.expand(t+n,e))},this),e},t.TokenStore.prototype.toJSON=function(){return{root:this.root,length:this.length}},function(t,e){"function"==typeof define&&define.amd?define(e):"object"==typeof exports?module.exports=e():t.lunr=e()}(this,function(){return t})}();var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p])};return function(d,b){function __(){this.constructor=d}extendStatics(d,b),d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)}}(),typedoc;!function(typedoc){function registerService(constructor,name,priority){void 0===priority&&(priority=0),services.push({constructor:constructor,name:name,priority:priority,instance:null}),services.sort(function(a,b){return a.priority-b.priority})}function registerComponent(constructor,selector,priority,namespace){void 0===priority&&(priority=0),void 0===namespace&&(namespace="*"),components.push({selector:selector,constructor:constructor,priority:priority,namespace:namespace}),components.sort(function(a,b){return a.priority-b.priority})}typedoc.$html=$("html");var services=[],components=[];typedoc.$document=$(document),typedoc.$window=$(window),typedoc.$body=$("body"),typedoc.registerService=registerService,typedoc.registerComponent=registerComponent,"undefined"!=typeof Backbone&&(typedoc.Events=function(){var res=function(){};return _.extend(res.prototype,Backbone.Events),res}());var Application=function(_super){function Application(){var _this=_super.call(this)||this;return _this.createServices(),_this.createComponents(typedoc.$body),_this}return __extends(Application,_super),Application.prototype.createServices=function(){_(services).forEach(function(c){c.instance=new c.constructor,typedoc[c.name]=c.instance})},Application.prototype.createComponents=function($context,namespace){void 0===namespace&&(namespace="default");var result=[];return _(components).forEach(function(c){c.namespace!=namespace&&"*"!=c.namespace||$context.find(c.selector).each(function(m,el){var instance,$el=$(el);(instance=$el.data("component"))?-1==_(result).indexOf(instance)&&result.push(instance):(instance=new c.constructor({el:el}),$el.data("component",instance),result.push(instance))})}),result},Application}(typedoc.Events);typedoc.Application=Application}(typedoc||(typedoc={}));var typedoc;!function(typedoc){var FilterItem=function(){function FilterItem(key,value){this.key=key,this.value=value,this.defaultValue=value,this.initialize(),window.localStorage[this.key]&&this.setValue(this.fromLocalStorage(window.localStorage[this.key]))}return FilterItem.prototype.initialize=function(){},FilterItem.prototype.handleValueChange=function(oldValue,newValue){},FilterItem.prototype.fromLocalStorage=function(value){return value},FilterItem.prototype.toLocalStorage=function(value){return value},FilterItem.prototype.setValue=function(value){if(this.value!=value){var oldValue=this.value;this.value=value,window.localStorage[this.key]=this.toLocalStorage(value),this.handleValueChange(oldValue,value)}},FilterItem}(),FilterItemCheckbox=function(_super){function FilterItemCheckbox(){return null!==_super&&_super.apply(this,arguments)||this}return __extends(FilterItemCheckbox,_super),FilterItemCheckbox.prototype.initialize=function(){var _this=this;this.$checkbox=$("#tsd-filter-"+this.key),this.$checkbox.on("change",function(){_this.setValue(_this.$checkbox.prop("checked"))})},FilterItemCheckbox.prototype.handleValueChange=function(oldValue,newValue){this.$checkbox.prop("checked",this.value),typedoc.$html.toggleClass("toggle-"+this.key,this.value!=this.defaultValue)},FilterItemCheckbox.prototype.fromLocalStorage=function(value){return"true"==value},FilterItemCheckbox.prototype.toLocalStorage=function(value){return value?"true":"false"},FilterItemCheckbox}(FilterItem),FilterItemSelect=function(_super){function FilterItemSelect(){return null!==_super&&_super.apply(this,arguments)||this}return __extends(FilterItemSelect,_super),FilterItemSelect.prototype.initialize=function(){var _this=this;typedoc.$html.addClass("toggle-"+this.key+this.value),this.$select=$("#tsd-filter-"+this.key),this.$select.on(typedoc.pointerDown+" mouseover",function(){_this.$select.addClass("active")}).on("mouseleave",function(){_this.$select.removeClass("active")}).on(typedoc.pointerUp,"li",function(e){_this.$select.removeClass("active"),_this.setValue($(e.target).attr("data-value"))}),typedoc.$document.on(typedoc.pointerDown,function(e){$(e.target).parents().addBack().is(_this.$select)||_this.$select.removeClass("active")})},FilterItemSelect.prototype.handleValueChange=function(oldValue,newValue){this.$select.find("li.selected").removeClass("selected"),this.$select.find(".tsd-select-label").text(this.$select.find('li[data-value="'+newValue+'"]').addClass("selected").text()),typedoc.$html.removeClass("toggle-"+oldValue),typedoc.$html.addClass("toggle-"+newValue)},FilterItemSelect}(FilterItem),Filter=function(_super){function Filter(options){var _this=_super.call(this,options)||this;return _this.optionVisibility=new FilterItemSelect("visibility","private"),_this.optionInherited=new FilterItemCheckbox("inherited",!0),_this.optionExternals=new FilterItemCheckbox("externals",!0),_this.optionOnlyExported=new FilterItemCheckbox("only-exported",!1),_this}return __extends(Filter,_super),Filter.isSupported=function(){try{return void 0!==window.localStorage}catch(e){return!1}},Filter}(Backbone.View);Filter.isSupported()?typedoc.registerComponent(Filter,"#tsd-filter"):typedoc.$html.addClass("no-filter")}(typedoc||(typedoc={}));var typedoc;!function(typedoc){var MenuHighlight=function(_super){function MenuHighlight(options){var _this=_super.call(this,options)||this;return _this.index=0,_this.listenTo(typedoc.viewport,"resize",_this.onResize),_this.listenTo(typedoc.viewport,"scroll",_this.onScroll),_this.createAnchors(),_this}return __extends(MenuHighlight,_super),MenuHighlight.prototype.createAnchors=function(){var _this=this;this.index=0,this.anchors=[{position:0}];var base=window.location.href;-1!=base.indexOf("#")&&(base=base.substr(0,base.indexOf("#"))),this.$el.find("a").each(function(index,el){var href=el.href;if(-1!=href.indexOf("#")&&href.substr(0,base.length)==base){var hash=href.substr(href.indexOf("#")+1),$anchor=$("a.tsd-anchor[name="+hash+"]");0!=$anchor.length&&_this.anchors.push({$link:$(el.parentNode),$anchor:$anchor,position:0})}}),this.onResize()},MenuHighlight.prototype.onResize=function(){for(var anchor,index=1,count=this.anchors.length;index<count;index++)anchor=this.anchors[index],anchor.position=anchor.$anchor.offset().top;this.anchors.sort(function(a,b){return a.position-b.position}),this.onScroll(typedoc.viewport.scrollTop)},MenuHighlight.prototype.onScroll=function(scrollTop){var anchors=this.anchors,index=this.index,count=anchors.length-1;for(scrollTop+=5;index>0&&anchors[index].position>scrollTop;)index-=1;for(;index<count&&anchors[index+1].position<scrollTop;)index+=1;this.index!=index&&(this.index>0&&this.anchors[this.index].$link.removeClass("focus"),this.index=index,this.index>0&&this.anchors[this.index].$link.addClass("focus"))},MenuHighlight}(Backbone.View);typedoc.MenuHighlight=MenuHighlight,typedoc.registerComponent(MenuHighlight,".menu-highlight")}(typedoc||(typedoc={}));var typedoc;!function(typedoc){var StickyMode,hasPositionSticky=typedoc.$html.hasClass("csspositionsticky");!function(StickyMode){StickyMode[StickyMode.None=0]="None",StickyMode[StickyMode.Secondary=1]="Secondary",StickyMode[StickyMode.Current=2]="Current"}(StickyMode||(StickyMode={}));var MenuSticky=function(_super){function MenuSticky(options){var _this=_super.call(this,options)||this;return _this.state="",_this.stickyMode=StickyMode.None,_this.$current=_this.$el.find("> ul.current"),_this.$navigation=_this.$el.parents(".menu-sticky-wrap"),_this.$container=_this.$el.parents(".row"),_this.listenTo(typedoc.viewport,"resize",_this.onResize),hasPositionSticky||_this.listenTo(typedoc.viewport,"scroll",_this.onScroll),_this.onResize(typedoc.viewport.width,typedoc.viewport.height),_this}return __extends(MenuSticky,_super),MenuSticky.prototype.setState=function(state){this.state!=state&&(""!=this.state&&this.$navigation.removeClass(this.state),this.state=state,""!=this.state&&this.$navigation.addClass(this.state))},MenuSticky.prototype.onResize=function(width,height){this.stickyMode=StickyMode.None,this.setState("");var containerTop=this.$container.offset().top,containerHeight=this.$container.height(),bottom=containerTop+containerHeight;if(this.$navigation.height()<containerHeight){var elHeight=this.$el.height(),elTop=this.$el.offset().top;if(this.$current.length){var currentHeight=this.$current.height(),currentTop=this.$current.offset().top;this.$navigation.css("top",containerTop-currentTop+20),currentHeight<height&&(this.stickyMode=StickyMode.Current,this.stickyTop=currentTop,this.stickyBottom=bottom-elHeight+(currentTop-elTop)-20)}elHeight<height&&(this.$navigation.css("top",containerTop-elTop+20),this.stickyMode=StickyMode.Secondary,this.stickyTop=elTop,this.stickyBottom=bottom-elHeight-20)}hasPositionSticky?this.stickyMode==StickyMode.Current?this.setState("sticky-current"):this.stickyMode==StickyMode.Secondary?this.setState("sticky"):this.setState(""):(this.$navigation.css("left",this.$navigation.offset().left),this.onScroll(typedoc.viewport.scrollTop))},MenuSticky.prototype.onScroll=function(scrollTop){this.stickyMode==StickyMode.Current?scrollTop>this.stickyBottom?this.setState("sticky-bottom"):this.setState(scrollTop+20>this.stickyTop?"sticky-current":""):this.stickyMode==StickyMode.Secondary&&(scrollTop>this.stickyBottom?this.setState("sticky-bottom"):this.setState(scrollTop+20>this.stickyTop?"sticky":""))},MenuSticky}(Backbone.View);typedoc.MenuSticky=MenuSticky,typedoc.registerComponent(MenuSticky,".menu-sticky")}(typedoc||(typedoc={}));var typedoc;!function(typedoc){var search;!function(search){function createIndex(){function batch(){for(var cycles=0;cycles++<100;)if(index.add(rows[pos]),++pos==length)return setLoadingState(SearchLoadingState.Ready);setTimeout(batch,10)}index=new lunr.Index,index.pipeline.add(lunr.trimmer),index.field("name",{boost:10}),index.field("parent"),index.ref("id");var rows=search.data.rows,pos=0,length=rows.length;batch()}function loadIndex(){loadingState==SearchLoadingState.Idle&&(setTimeout(function(){loadingState==SearchLoadingState.Idle&&setLoadingState(SearchLoadingState.Loading)},500),void 0!==search.data?createIndex():$.get($el.attr("data-index")).done(function(source){eval(source),createIndex()}).fail(function(){setLoadingState(SearchLoadingState.Failure)}))}function updateResults(){if(loadingState==SearchLoadingState.Ready){$results.empty();for(var res=index.search(query),i=0,c=Math.min(10,res.length);i<c;i++){var row=search.data.rows[res[i].ref],name=row.name;row.parent&&(name='<span class="parent">'+row.parent+".</span>"+name),$results.append('<li class="'+row.classes+'"><a href="'+base+row.url+'" class="tsd-kind-icon">'+name+"</li>")}}}function setLoadingState(value){loadingState!=value&&($el.removeClass(SearchLoadingState[loadingState].toLowerCase()),loadingState=value,$el.addClass(SearchLoadingState[loadingState].toLowerCase()),value==SearchLoadingState.Ready&&updateResults())}function setHasFocus(value){hasFocus!=value&&(hasFocus=value,$el.toggleClass("has-focus"),value?(setQuery(""),$field.val("")):$field.val(query))}function setQuery(value){query=$.trim(value),updateResults()}function setCurrentResult(dir){var $current=$results.find(".current");if(0==$current.length)$results.find(1==dir?"li:first-child":"li:last-child").addClass("current");else{var $rel=1==dir?$current.next("li"):$current.prev("li");$rel.length>0&&($current.removeClass("current"),$rel.addClass("current"))}}function gotoCurrentResult(){var $current=$results.find(".current");0==$current.length&&($current=$results.find("li:first-child")),$current.length>0&&(window.location.href=$current.find("a").prop("href"),$field.blur())}var SearchLoadingState;!function(SearchLoadingState){SearchLoadingState[SearchLoadingState.Idle=0]="Idle",SearchLoadingState[SearchLoadingState.Loading=1]="Loading",SearchLoadingState[SearchLoadingState.Ready=2]="Ready",SearchLoadingState[SearchLoadingState.Failure=3]="Failure"}(SearchLoadingState||(SearchLoadingState={}));var $el=$("#tsd-search"),$field=$("#tsd-search-field"),$results=$(".results"),base=$el.attr("data-base")+"/",query="",loadingState=SearchLoadingState.Idle,hasFocus=!1,preventPress=!1,index;$field.on("focusin",function(){setHasFocus(!0),loadIndex()}).on("focusout",function(){setTimeout(function(){return setHasFocus(!1)},100)}).on("input",function(){setQuery($.trim($field.val()))}).on("keydown",function(e){13==e.keyCode||27==e.keyCode||38==e.keyCode||40==e.keyCode?(preventPress=!0,e.preventDefault(),13==e.keyCode?gotoCurrentResult():27==e.keyCode?$field.blur():38==e.keyCode?setCurrentResult(-1):40==e.keyCode&&setCurrentResult(1)):preventPress=!1}).on("keypress",function(e){preventPress&&e.preventDefault()}),$("body").on("keydown",function(e){e.altKey||e.ctrlKey||e.metaKey||!hasFocus&&e.keyCode>47&&e.keyCode<112&&$field.focus()})}(search=typedoc.search||(typedoc.search={}))}(typedoc||(typedoc={}));var typedoc;!function(typedoc){var SignatureGroup=function(){function SignatureGroup($signature,$description){this.$signature=$signature,this.$description=$description}return SignatureGroup.prototype.addClass=function(className){return this.$signature.addClass(className),this.$description.addClass(className),this},SignatureGroup.prototype.removeClass=function(className){return this.$signature.removeClass(className),this.$description.removeClass(className),this},SignatureGroup}(),Signature=function(_super){function Signature(options){var _this=_super.call(this,options)||this;return _this.index=-1,_this.createGroups(),_this.groups&&(_this.$el.addClass("active").on("touchstart",".tsd-signature",function(event){return _this.onClick(event)}).on("click",".tsd-signature",function(event){return _this.onClick(event)}),_this.$container.addClass("active"),_this.setIndex(0)),_this}return __extends(Signature,_super),Signature.prototype.setIndex=function(index){if(index<0&&(index=0),index>this.groups.length-1&&(index=this.groups.length-1),this.index!=index){var to=this.groups[index];if(this.index>-1){var from=this.groups[this.index];typedoc.animateHeight(this.$container,function(){from.removeClass("current").addClass("fade-out"),to.addClass("current fade-in"),typedoc.viewport.triggerResize()}),setTimeout(function(){from.removeClass("fade-out"),to.removeClass("fade-in")},300)}else to.addClass("current"),typedoc.viewport.triggerResize();this.index=index}},Signature.prototype.createGroups=function(){var _this=this,$signatures=this.$el.find("> .tsd-signature");if(!($signatures.length<2)){this.$container=this.$el.siblings(".tsd-descriptions");var $descriptions=this.$container.find("> .tsd-description");this.groups=[],$signatures.each(function(index,el){_this.groups.push(new SignatureGroup($(el),$descriptions.eq(index)))})}},Signature.prototype.onClick=function(e){var _this=this;e.preventDefault(),_(this.groups).forEach(function(group,index){group.$signature.is(e.currentTarget)&&_this.setIndex(index)})},Signature}(Backbone.View);typedoc.registerComponent(Signature,".tsd-signatures")}(typedoc||(typedoc={}));var typedoc;!function(typedoc){var Toggle=function(_super){function Toggle(options){var _this=_super.call(this,options)||this;return _this.className=_this.$el.attr("data-toggle"),_this.$el.on(typedoc.pointerUp,function(e){return _this.onPointerUp(e)}),_this.$el.on("click",function(e){return e.preventDefault()}),typedoc.$document.on(typedoc.pointerDown,function(e){return _this.onDocumentPointerDown(e)}),typedoc.$document.on(typedoc.pointerUp,function(e){return _this.onDocumentPointerUp(e)}),_this}return __extends(Toggle,_super),Toggle.prototype.setActive=function(value){if(this.active!=value){this.active=value,typedoc.$html.toggleClass("has-"+this.className,value),this.$el.toggleClass("active",value);var transition=(this.active?"to-has-":"from-has-")+this.className;typedoc.$html.addClass(transition),setTimeout(function(){return typedoc.$html.removeClass(transition)},500)}},Toggle.prototype.onPointerUp=function(event){typedoc.hasPointerMoved||(this.setActive(!0),event.preventDefault())},Toggle.prototype.onDocumentPointerDown=function(e){if(this.active){var $path=$(e.target).parents().addBack();if($path.hasClass("col-menu"))return;if($path.hasClass("tsd-filter-group"))return;this.setActive(!1)}},Toggle.prototype.onDocumentPointerUp=function(e){var _this=this;if(!typedoc.hasPointerMoved&&this.active){var $path=$(e.target).parents().addBack();if($path.hasClass("col-menu")){var $link=$path.filter("a");if($link.length){var href=window.location.href;-1!=href.indexOf("#")&&(href=href.substr(0,href.indexOf("#"))),$link.prop("href").substr(0,href.length)==href&&setTimeout(function(){return _this.setActive(!1)},250)}}}},Toggle}(Backbone.View);typedoc.registerComponent(Toggle,"a[data-toggle]")}(typedoc||(typedoc={}));var typedoc;!function(typedoc){var Viewport=function(_super){function Viewport(){var _this=_super.call(this)||this;return _this.scrollTop=0,_this.width=0,_this.height=0,typedoc.$window.on("scroll",_(function(){return _this.onScroll()}).throttle(10)),typedoc.$window.on("resize",_(function(){return _this.onResize()}).throttle(10)),_this.onResize(),_this.onScroll(),_this}return __extends(Viewport,_super),Viewport.prototype.triggerResize=function(){this.trigger("resize",this.width,this.height)},Viewport.prototype.onResize=function(){this.width=typedoc.$window.width(),this.height=typedoc.$window.height(),this.trigger("resize",this.width,this.height)},Viewport.prototype.onScroll=function(){this.scrollTop=typedoc.$window.scrollTop(),this.trigger("scroll",this.scrollTop)},Viewport}(typedoc.Events);typedoc.Viewport=Viewport,typedoc.registerService(Viewport,"viewport")}(typedoc||(typedoc={}));var typedoc;!function(typedoc){typedoc.pointerDown="mousedown",typedoc.pointerMove="mousemove",typedoc.pointerUp="mouseup",typedoc.pointerDownPosition={x:0,y:0},typedoc.preventNextClick=!1,typedoc.isPointerDown=!1,typedoc.isPointerTouch=!1,typedoc.hasPointerMoved=!1,typedoc.isMobile=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),typedoc.$html.addClass(typedoc.isMobile?"is-mobile":"not-mobile"),typedoc.isMobile&&"ontouchstart"in document.documentElement&&(typedoc.isPointerTouch=!0,typedoc.pointerDown="touchstart",typedoc.pointerMove="touchmove",typedoc.pointerUp="touchend"),typedoc.$document.on(typedoc.pointerDown,function(e){typedoc.isPointerDown=!0,typedoc.hasPointerMoved=!1;var t="touchstart"==typedoc.pointerDown?e.originalEvent.targetTouches[0]:e;typedoc.pointerDownPosition.x=t.pageX,typedoc.pointerDownPosition.y=t.pageY}).on(typedoc.pointerMove,function(e){if(typedoc.isPointerDown&&!typedoc.hasPointerMoved){var t="touchstart"==typedoc.pointerDown?e.originalEvent.targetTouches[0]:e,x=typedoc.pointerDownPosition.x-t.pageX,y=typedoc.pointerDownPosition.y-t.pageY;typedoc.hasPointerMoved=Math.sqrt(x*x+y*y)>10}}).on(typedoc.pointerUp,function(e){typedoc.isPointerDown=!1}).on("click",function(e){typedoc.preventNextClick&&(e.preventDefault(),e.stopImmediatePropagation(),typedoc.preventNextClick=!1)})}(typedoc||(typedoc={}));var typedoc;!function(typedoc){function noTransition($el,callback){$el.addClass("no-transition"),callback(),$el.offset(),$el.removeClass("no-transition")}function animateHeight($el,callback,success){var to,from=$el.height();noTransition($el,function(){callback(),$el.css("height",""),to=$el.height(),from!=to&&typedoc.transition&&$el.css("height",from)}),from!=to&&typedoc.transition?($el.css("height",to),$el.on(typedoc.transition.endEvent,function(){noTransition($el,function(){$el.off(typedoc.transition.endEvent).css("height",""),success&&success()})})):success&&success()}typedoc.transition=function(tuples){for(var name in tuples)if(tuples.hasOwnProperty(name)&&void 0!==document.body.style[name])return{name:name,endEvent:tuples[name]};return null}({transition:"transitionend",OTransition:"oTransitionEnd",msTransition:"msTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"}),typedoc.noTransition=noTransition,typedoc.animateHeight=animateHeight}(typedoc||(typedoc={}));var typedoc;!function(typedoc){typedoc.app=new typedoc.Application}(typedoc||(typedoc={}));
'''
'''--- docs/assets/js/search.js ---
var typedoc = typedoc || {};
            typedoc.search = typedoc.search || {};
            typedoc.search.data = {"kinds":{"4":"Enumeration","16":"Enumeration member","32":"Variable","64":"Function","128":"Class","256":"Interface","512":"Constructor","1024":"Property","2048":"Method","65536":"Type literal","2097152":"Object literal","4194304":"Type alias"},"rows":[{"id":0,"kind":4,"name":"EventType","url":"enums/eventtype.html","classes":"tsd-kind-enum"},{"id":1,"kind":16,"name":"TransactionCreated","url":"enums/eventtype.html#transactioncreated","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":2,"kind":16,"name":"TransactionConfirmed","url":"enums/eventtype.html#transactionconfirmed","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":3,"kind":16,"name":"TransactionDenied","url":"enums/eventtype.html#transactiondenied","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":4,"kind":16,"name":"TransactionFailed","url":"enums/eventtype.html#transactionfailed","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":5,"kind":16,"name":"InitializeAccount","url":"enums/eventtype.html#initializeaccount","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":6,"kind":16,"name":"WrapEth","url":"enums/eventtype.html#wrapeth","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":7,"kind":16,"name":"UnwrapWeth","url":"enums/eventtype.html#unwrapweth","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":8,"kind":16,"name":"ApproveCurrency","url":"enums/eventtype.html#approvecurrency","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":9,"kind":16,"name":"ApproveAsset","url":"enums/eventtype.html#approveasset","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":10,"kind":16,"name":"ApproveAllAssets","url":"enums/eventtype.html#approveallassets","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":11,"kind":16,"name":"UnapproveCurrency","url":"enums/eventtype.html#unapprovecurrency","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":12,"kind":16,"name":"MatchOrders","url":"enums/eventtype.html#matchorders","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":13,"kind":16,"name":"CancelOrder","url":"enums/eventtype.html#cancelorder","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":14,"kind":16,"name":"ApproveOrder","url":"enums/eventtype.html#approveorder","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":15,"kind":16,"name":"CreateOrder","url":"enums/eventtype.html#createorder","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":16,"kind":16,"name":"OrderDenied","url":"enums/eventtype.html#orderdenied","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":17,"kind":16,"name":"TransferAll","url":"enums/eventtype.html#transferall","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":18,"kind":16,"name":"TransferOne","url":"enums/eventtype.html#transferone","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":19,"kind":16,"name":"WrapAssets","url":"enums/eventtype.html#wrapassets","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":20,"kind":16,"name":"UnwrapAssets","url":"enums/eventtype.html#unwrapassets","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":21,"kind":16,"name":"LiquidateAssets","url":"enums/eventtype.html#liquidateassets","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":22,"kind":16,"name":"PurchaseAssets","url":"enums/eventtype.html#purchaseassets","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"EventType"},{"id":23,"kind":256,"name":"EventData","url":"interfaces/eventdata.html","classes":"tsd-kind-interface"},{"id":24,"kind":1024,"name":"accountAddress","url":"interfaces/eventdata.html#accountaddress","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"EventData"},{"id":25,"kind":1024,"name":"toAddress","url":"interfaces/eventdata.html#toaddress","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"EventData"},{"id":26,"kind":1024,"name":"proxyAddress","url":"interfaces/eventdata.html#proxyaddress","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"EventData"},{"id":27,"kind":1024,"name":"amount","url":"interfaces/eventdata.html#amount","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"EventData"},{"id":28,"kind":1024,"name":"contractAddress","url":"interfaces/eventdata.html#contractaddress","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"EventData"},{"id":29,"kind":1024,"name":"assets","url":"interfaces/eventdata.html#assets","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"EventData"},{"id":30,"kind":1024,"name":"asset","url":"interfaces/eventdata.html#asset","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"EventData"},{"id":31,"kind":1024,"name":"transactionHash","url":"interfaces/eventdata.html#transactionhash","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"EventData"},{"id":32,"kind":1024,"name":"event","url":"interfaces/eventdata.html#event","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"EventData"},{"id":33,"kind":1024,"name":"error","url":"interfaces/eventdata.html#error","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"EventData"},{"id":34,"kind":1024,"name":"order","url":"interfaces/eventdata.html#order","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"EventData"},{"id":35,"kind":1024,"name":"buy","url":"interfaces/eventdata.html#buy","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"EventData"},{"id":36,"kind":1024,"name":"sell","url":"interfaces/eventdata.html#sell","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"EventData"},{"id":37,"kind":1024,"name":"matchMetadata","url":"interfaces/eventdata.html#matchmetadata","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"EventData"},{"id":38,"kind":256,"name":"OpenSeaAPIConfig","url":"interfaces/openseaapiconfig.html","classes":"tsd-kind-interface"},{"id":39,"kind":1024,"name":"networkName","url":"interfaces/openseaapiconfig.html#networkname","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAPIConfig"},{"id":40,"kind":1024,"name":"apiKey","url":"interfaces/openseaapiconfig.html#apikey","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAPIConfig"},{"id":41,"kind":1024,"name":"apiBaseUrl","url":"interfaces/openseaapiconfig.html#apibaseurl","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAPIConfig"},{"id":42,"kind":1024,"name":"gasPrice","url":"interfaces/openseaapiconfig.html#gasprice","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAPIConfig"},{"id":43,"kind":4,"name":"OrderSide","url":"enums/orderside.html","classes":"tsd-kind-enum"},{"id":44,"kind":16,"name":"Buy","url":"enums/orderside.html#buy","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"OrderSide"},{"id":45,"kind":16,"name":"Sell","url":"enums/orderside.html#sell","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"OrderSide"},{"id":46,"kind":4,"name":"FeeMethod","url":"enums/feemethod.html","classes":"tsd-kind-enum"},{"id":47,"kind":16,"name":"ProtocolFee","url":"enums/feemethod.html#protocolfee","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"FeeMethod"},{"id":48,"kind":16,"name":"SplitFee","url":"enums/feemethod.html#splitfee","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"FeeMethod"},{"id":49,"kind":4,"name":"SaleKind","url":"enums/salekind.html","classes":"tsd-kind-enum"},{"id":50,"kind":16,"name":"FixedPrice","url":"enums/salekind.html#fixedprice","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"SaleKind"},{"id":51,"kind":16,"name":"DutchAuction","url":"enums/salekind.html#dutchauction","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"SaleKind"},{"id":52,"kind":4,"name":"AssetContractType","url":"enums/assetcontracttype.html","classes":"tsd-kind-enum"},{"id":53,"kind":16,"name":"Fungible","url":"enums/assetcontracttype.html#fungible","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetContractType"},{"id":54,"kind":16,"name":"SemiFungible","url":"enums/assetcontracttype.html#semifungible","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetContractType"},{"id":55,"kind":16,"name":"NonFungible","url":"enums/assetcontracttype.html#nonfungible","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetContractType"},{"id":56,"kind":16,"name":"Unknown","url":"enums/assetcontracttype.html#unknown","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetContractType"},{"id":57,"kind":4,"name":"WyvernSchemaName","url":"enums/wyvernschemaname.html","classes":"tsd-kind-enum"},{"id":58,"kind":16,"name":"ERC20","url":"enums/wyvernschemaname.html#erc20","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"WyvernSchemaName"},{"id":59,"kind":16,"name":"ERC721","url":"enums/wyvernschemaname.html#erc721","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"WyvernSchemaName"},{"id":60,"kind":16,"name":"ERC1155","url":"enums/wyvernschemaname.html#erc1155","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"WyvernSchemaName"},{"id":61,"kind":16,"name":"LegacyEnjin","url":"enums/wyvernschemaname.html#legacyenjin","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"WyvernSchemaName"},{"id":62,"kind":16,"name":"ENSShortNameAuction","url":"enums/wyvernschemaname.html#ensshortnameauction","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"WyvernSchemaName"},{"id":63,"kind":4,"name":"TokenStandardVersion","url":"enums/tokenstandardversion.html","classes":"tsd-kind-enum"},{"id":64,"kind":16,"name":"Unsupported","url":"enums/tokenstandardversion.html#unsupported","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"TokenStandardVersion"},{"id":65,"kind":16,"name":"Locked","url":"enums/tokenstandardversion.html#locked","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"TokenStandardVersion"},{"id":66,"kind":16,"name":"Enjin","url":"enums/tokenstandardversion.html#enjin","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"TokenStandardVersion"},{"id":67,"kind":16,"name":"ERC721v1","url":"enums/tokenstandardversion.html#erc721v1","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"TokenStandardVersion"},{"id":68,"kind":16,"name":"ERC721v2","url":"enums/tokenstandardversion.html#erc721v2","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"TokenStandardVersion"},{"id":69,"kind":16,"name":"ERC721v3","url":"enums/tokenstandardversion.html#erc721v3","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"TokenStandardVersion"},{"id":70,"kind":4,"name":"WyvernAssetLocation","url":"enums/wyvernassetlocation.html","classes":"tsd-kind-enum"},{"id":71,"kind":16,"name":"Account","url":"enums/wyvernassetlocation.html#account","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"WyvernAssetLocation"},{"id":72,"kind":16,"name":"Proxy","url":"enums/wyvernassetlocation.html#proxy","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"WyvernAssetLocation"},{"id":73,"kind":16,"name":"Other","url":"enums/wyvernassetlocation.html#other","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"WyvernAssetLocation"},{"id":74,"kind":256,"name":"WyvernNFTAsset","url":"interfaces/wyvernnftasset.html","classes":"tsd-kind-interface"},{"id":75,"kind":1024,"name":"id","url":"interfaces/wyvernnftasset.html#id","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"WyvernNFTAsset"},{"id":76,"kind":1024,"name":"address","url":"interfaces/wyvernnftasset.html#address","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"WyvernNFTAsset"},{"id":77,"kind":256,"name":"WyvernFTAsset","url":"interfaces/wyvernftasset.html","classes":"tsd-kind-interface"},{"id":78,"kind":1024,"name":"id","url":"interfaces/wyvernftasset.html#id","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"WyvernFTAsset"},{"id":79,"kind":1024,"name":"address","url":"interfaces/wyvernftasset.html#address","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"WyvernFTAsset"},{"id":80,"kind":1024,"name":"quantity","url":"interfaces/wyvernftasset.html#quantity","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"WyvernFTAsset"},{"id":81,"kind":256,"name":"WyvernBundle","url":"interfaces/wyvernbundle.html","classes":"tsd-kind-interface"},{"id":82,"kind":1024,"name":"assets","url":"interfaces/wyvernbundle.html#assets","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"WyvernBundle"},{"id":83,"kind":1024,"name":"schemas","url":"interfaces/wyvernbundle.html#schemas","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"WyvernBundle"},{"id":84,"kind":1024,"name":"name","url":"interfaces/wyvernbundle.html#name","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"WyvernBundle"},{"id":85,"kind":1024,"name":"description","url":"interfaces/wyvernbundle.html#description","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"WyvernBundle"},{"id":86,"kind":1024,"name":"external_link","url":"interfaces/wyvernbundle.html#external_link","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"WyvernBundle"},{"id":87,"kind":256,"name":"OpenSeaAccount","url":"interfaces/openseaaccount.html","classes":"tsd-kind-interface"},{"id":88,"kind":1024,"name":"address","url":"interfaces/openseaaccount.html#address","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAccount"},{"id":89,"kind":1024,"name":"config","url":"interfaces/openseaaccount.html#config","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAccount"},{"id":90,"kind":1024,"name":"profileImgUrl","url":"interfaces/openseaaccount.html#profileimgurl","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAccount"},{"id":91,"kind":1024,"name":"user","url":"interfaces/openseaaccount.html#user","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAccount"},{"id":92,"kind":256,"name":"OpenSeaUser","url":"interfaces/openseauser.html","classes":"tsd-kind-interface"},{"id":93,"kind":1024,"name":"username","url":"interfaces/openseauser.html#username","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaUser"},{"id":94,"kind":256,"name":"Asset","url":"interfaces/asset.html","classes":"tsd-kind-interface"},{"id":95,"kind":1024,"name":"tokenId","url":"interfaces/asset.html#tokenid","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Asset"},{"id":96,"kind":1024,"name":"tokenAddress","url":"interfaces/asset.html#tokenaddress","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Asset"},{"id":97,"kind":1024,"name":"schemaName","url":"interfaces/asset.html#schemaname","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Asset"},{"id":98,"kind":1024,"name":"version","url":"interfaces/asset.html#version","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Asset"},{"id":99,"kind":1024,"name":"name","url":"interfaces/asset.html#name","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Asset"},{"id":100,"kind":1024,"name":"decimals","url":"interfaces/asset.html#decimals","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Asset"},{"id":101,"kind":256,"name":"OpenSeaAssetContract","url":"interfaces/openseaassetcontract.html","classes":"tsd-kind-interface"},{"id":102,"kind":1024,"name":"name","url":"interfaces/openseaassetcontract.html#name","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetContract"},{"id":103,"kind":1024,"name":"address","url":"interfaces/openseaassetcontract.html#address","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetContract"},{"id":104,"kind":1024,"name":"type","url":"interfaces/openseaassetcontract.html#type","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetContract"},{"id":105,"kind":1024,"name":"schemaName","url":"interfaces/openseaassetcontract.html#schemaname","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetContract"},{"id":106,"kind":1024,"name":"sellerFeeBasisPoints","url":"interfaces/openseaassetcontract.html#sellerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetContract"},{"id":107,"kind":1024,"name":"buyerFeeBasisPoints","url":"interfaces/openseaassetcontract.html#buyerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetContract"},{"id":108,"kind":1024,"name":"description","url":"interfaces/openseaassetcontract.html#description","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetContract"},{"id":109,"kind":1024,"name":"tokenSymbol","url":"interfaces/openseaassetcontract.html#tokensymbol","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetContract"},{"id":110,"kind":1024,"name":"imageUrl","url":"interfaces/openseaassetcontract.html#imageurl","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetContract"},{"id":111,"kind":1024,"name":"stats","url":"interfaces/openseaassetcontract.html#stats","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetContract"},{"id":112,"kind":1024,"name":"traits","url":"interfaces/openseaassetcontract.html#traits","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetContract"},{"id":113,"kind":1024,"name":"externalLink","url":"interfaces/openseaassetcontract.html#externallink","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetContract"},{"id":114,"kind":1024,"name":"wikiLink","url":"interfaces/openseaassetcontract.html#wikilink","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetContract"},{"id":115,"kind":1024,"name":"openseaSellerFeeBasisPoints","url":"interfaces/openseaassetcontract.html#openseasellerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaAssetContract"},{"id":116,"kind":1024,"name":"openseaBuyerFeeBasisPoints","url":"interfaces/openseaassetcontract.html#openseabuyerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaAssetContract"},{"id":117,"kind":1024,"name":"devSellerFeeBasisPoints","url":"interfaces/openseaassetcontract.html#devsellerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaAssetContract"},{"id":118,"kind":1024,"name":"devBuyerFeeBasisPoints","url":"interfaces/openseaassetcontract.html#devbuyerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaAssetContract"},{"id":119,"kind":256,"name":"NumericalTraitStats","url":"interfaces/numericaltraitstats.html","classes":"tsd-kind-interface tsd-is-not-exported"},{"id":120,"kind":1024,"name":"min","url":"interfaces/numericaltraitstats.html#min","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-not-exported","parent":"NumericalTraitStats"},{"id":121,"kind":1024,"name":"max","url":"interfaces/numericaltraitstats.html#max","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-not-exported","parent":"NumericalTraitStats"},{"id":122,"kind":256,"name":"StringTraitStats","url":"interfaces/stringtraitstats.html","classes":"tsd-kind-interface tsd-is-not-exported"},{"id":123,"kind":256,"name":"OpenSeaCollection","url":"interfaces/openseacollection.html","classes":"tsd-kind-interface"},{"id":124,"kind":1024,"name":"name","url":"interfaces/openseacollection.html#name","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":125,"kind":1024,"name":"slug","url":"interfaces/openseacollection.html#slug","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":126,"kind":1024,"name":"editors","url":"interfaces/openseacollection.html#editors","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":127,"kind":1024,"name":"hidden","url":"interfaces/openseacollection.html#hidden","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":128,"kind":1024,"name":"featured","url":"interfaces/openseacollection.html#featured","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":129,"kind":1024,"name":"createdDate","url":"interfaces/openseacollection.html#createddate","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":130,"kind":1024,"name":"description","url":"interfaces/openseacollection.html#description","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":131,"kind":1024,"name":"imageUrl","url":"interfaces/openseacollection.html#imageurl","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":132,"kind":1024,"name":"largeImageUrl","url":"interfaces/openseacollection.html#largeimageurl","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":133,"kind":1024,"name":"featuredImageUrl","url":"interfaces/openseacollection.html#featuredimageurl","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":134,"kind":1024,"name":"stats","url":"interfaces/openseacollection.html#stats","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":135,"kind":1024,"name":"displayData","url":"interfaces/openseacollection.html#displaydata","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":136,"kind":1024,"name":"paymentTokens","url":"interfaces/openseacollection.html#paymenttokens","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":137,"kind":1024,"name":"payoutAddress","url":"interfaces/openseacollection.html#payoutaddress","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":138,"kind":1024,"name":"traitStats","url":"interfaces/openseacollection.html#traitstats","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":139,"kind":1024,"name":"externalLink","url":"interfaces/openseacollection.html#externallink","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":140,"kind":1024,"name":"wikiLink","url":"interfaces/openseacollection.html#wikilink","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaCollection"},{"id":141,"kind":1024,"name":"openseaSellerFeeBasisPoints","url":"interfaces/openseacollection.html#openseasellerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaCollection"},{"id":142,"kind":1024,"name":"openseaBuyerFeeBasisPoints","url":"interfaces/openseacollection.html#openseabuyerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaCollection"},{"id":143,"kind":1024,"name":"devSellerFeeBasisPoints","url":"interfaces/openseacollection.html#devsellerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaCollection"},{"id":144,"kind":1024,"name":"devBuyerFeeBasisPoints","url":"interfaces/openseacollection.html#devbuyerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaCollection"},{"id":145,"kind":256,"name":"OpenSeaTraitStats","url":"interfaces/openseatraitstats.html","classes":"tsd-kind-interface"},{"id":146,"kind":256,"name":"OpenSeaAsset","url":"interfaces/openseaasset.html","classes":"tsd-kind-interface"},{"id":147,"kind":1024,"name":"assetContract","url":"interfaces/openseaasset.html#assetcontract","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":148,"kind":1024,"name":"collection","url":"interfaces/openseaasset.html#collection","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":149,"kind":1024,"name":"name","url":"interfaces/openseaasset.html#name","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite","parent":"OpenSeaAsset"},{"id":150,"kind":1024,"name":"description","url":"interfaces/openseaasset.html#description","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":151,"kind":1024,"name":"owner","url":"interfaces/openseaasset.html#owner","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":152,"kind":1024,"name":"orders","url":"interfaces/openseaasset.html#orders","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":153,"kind":1024,"name":"buyOrders","url":"interfaces/openseaasset.html#buyorders","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":154,"kind":1024,"name":"sellOrders","url":"interfaces/openseaasset.html#sellorders","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":155,"kind":1024,"name":"isPresale","url":"interfaces/openseaasset.html#ispresale","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":156,"kind":1024,"name":"imageUrl","url":"interfaces/openseaasset.html#imageurl","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":157,"kind":1024,"name":"imagePreviewUrl","url":"interfaces/openseaasset.html#imagepreviewurl","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":158,"kind":1024,"name":"imageUrlOriginal","url":"interfaces/openseaasset.html#imageurloriginal","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":159,"kind":1024,"name":"imageUrlThumbnail","url":"interfaces/openseaasset.html#imageurlthumbnail","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":160,"kind":1024,"name":"openseaLink","url":"interfaces/openseaasset.html#opensealink","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":161,"kind":1024,"name":"externalLink","url":"interfaces/openseaasset.html#externallink","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":162,"kind":1024,"name":"traits","url":"interfaces/openseaasset.html#traits","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":163,"kind":1024,"name":"numSales","url":"interfaces/openseaasset.html#numsales","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":164,"kind":1024,"name":"lastSale","url":"interfaces/openseaasset.html#lastsale","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":165,"kind":1024,"name":"backgroundColor","url":"interfaces/openseaasset.html#backgroundcolor","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":166,"kind":1024,"name":"transferFee","url":"interfaces/openseaasset.html#transferfee","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":167,"kind":1024,"name":"transferFeePaymentToken","url":"interfaces/openseaasset.html#transferfeepaymenttoken","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAsset"},{"id":168,"kind":1024,"name":"tokenId","url":"interfaces/openseaasset.html#tokenid","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaAsset"},{"id":169,"kind":1024,"name":"tokenAddress","url":"interfaces/openseaasset.html#tokenaddress","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaAsset"},{"id":170,"kind":1024,"name":"schemaName","url":"interfaces/openseaasset.html#schemaname","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaAsset"},{"id":171,"kind":1024,"name":"version","url":"interfaces/openseaasset.html#version","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaAsset"},{"id":172,"kind":1024,"name":"decimals","url":"interfaces/openseaasset.html#decimals","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaAsset"},{"id":173,"kind":256,"name":"AssetEvent","url":"interfaces/assetevent.html","classes":"tsd-kind-interface"},{"id":174,"kind":1024,"name":"eventType","url":"interfaces/assetevent.html#eventtype","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"AssetEvent"},{"id":175,"kind":1024,"name":"eventTimestamp","url":"interfaces/assetevent.html#eventtimestamp","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"AssetEvent"},{"id":176,"kind":1024,"name":"auctionType","url":"interfaces/assetevent.html#auctiontype","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"AssetEvent"},{"id":177,"kind":1024,"name":"totalPrice","url":"interfaces/assetevent.html#totalprice","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"AssetEvent"},{"id":178,"kind":1024,"name":"transaction","url":"interfaces/assetevent.html#transaction","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"AssetEvent"},{"id":179,"kind":1024,"name":"paymentToken","url":"interfaces/assetevent.html#paymenttoken","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"AssetEvent"},{"id":180,"kind":4,"name":"AuctionType","url":"enums/auctiontype.html","classes":"tsd-kind-enum"},{"id":181,"kind":16,"name":"Dutch","url":"enums/auctiontype.html#dutch","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AuctionType"},{"id":182,"kind":16,"name":"English","url":"enums/auctiontype.html#english","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AuctionType"},{"id":183,"kind":16,"name":"MinPrice","url":"enums/auctiontype.html#minprice","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AuctionType"},{"id":184,"kind":4,"name":"AssetEventType","url":"enums/asseteventtype.html","classes":"tsd-kind-enum"},{"id":185,"kind":16,"name":"AuctionCreated","url":"enums/asseteventtype.html#auctioncreated","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetEventType"},{"id":186,"kind":16,"name":"AuctionSuccessful","url":"enums/asseteventtype.html#auctionsuccessful","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetEventType"},{"id":187,"kind":16,"name":"AuctionCancelled","url":"enums/asseteventtype.html#auctioncancelled","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetEventType"},{"id":188,"kind":16,"name":"OfferEntered","url":"enums/asseteventtype.html#offerentered","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetEventType"},{"id":189,"kind":16,"name":"BidEntered","url":"enums/asseteventtype.html#bidentered","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetEventType"},{"id":190,"kind":16,"name":"BidWithdraw","url":"enums/asseteventtype.html#bidwithdraw","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetEventType"},{"id":191,"kind":16,"name":"AssetTransfer","url":"enums/asseteventtype.html#assettransfer","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetEventType"},{"id":192,"kind":16,"name":"AssetApprove","url":"enums/asseteventtype.html#assetapprove","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetEventType"},{"id":193,"kind":16,"name":"CompositionCreated","url":"enums/asseteventtype.html#compositioncreated","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetEventType"},{"id":194,"kind":16,"name":"Custom","url":"enums/asseteventtype.html#custom","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetEventType"},{"id":195,"kind":16,"name":"Payout","url":"enums/asseteventtype.html#payout","classes":"tsd-kind-enum-member tsd-parent-kind-enum","parent":"AssetEventType"},{"id":196,"kind":256,"name":"Transaction","url":"interfaces/transaction.html","classes":"tsd-kind-interface"},{"id":197,"kind":1024,"name":"fromAccount","url":"interfaces/transaction.html#fromaccount","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Transaction"},{"id":198,"kind":1024,"name":"toAccount","url":"interfaces/transaction.html#toaccount","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Transaction"},{"id":199,"kind":1024,"name":"createdDate","url":"interfaces/transaction.html#createddate","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Transaction"},{"id":200,"kind":1024,"name":"modifiedDate","url":"interfaces/transaction.html#modifieddate","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Transaction"},{"id":201,"kind":1024,"name":"transactionHash","url":"interfaces/transaction.html#transactionhash","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Transaction"},{"id":202,"kind":1024,"name":"transactionIndex","url":"interfaces/transaction.html#transactionindex","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Transaction"},{"id":203,"kind":1024,"name":"blockNumber","url":"interfaces/transaction.html#blocknumber","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Transaction"},{"id":204,"kind":1024,"name":"blockHash","url":"interfaces/transaction.html#blockhash","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Transaction"},{"id":205,"kind":1024,"name":"timestamp","url":"interfaces/transaction.html#timestamp","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Transaction"},{"id":206,"kind":256,"name":"OpenSeaFungibleToken","url":"interfaces/openseafungibletoken.html","classes":"tsd-kind-interface"},{"id":207,"kind":1024,"name":"imageUrl","url":"interfaces/openseafungibletoken.html#imageurl","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaFungibleToken"},{"id":208,"kind":1024,"name":"ethPrice","url":"interfaces/openseafungibletoken.html#ethprice","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaFungibleToken"},{"id":209,"kind":1024,"name":"usdPrice","url":"interfaces/openseafungibletoken.html#usdprice","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaFungibleToken"},{"id":210,"kind":1024,"name":"name","url":"interfaces/openseafungibletoken.html#name","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaFungibleToken"},{"id":211,"kind":1024,"name":"symbol","url":"interfaces/openseafungibletoken.html#symbol","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaFungibleToken"},{"id":212,"kind":1024,"name":"decimals","url":"interfaces/openseafungibletoken.html#decimals","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaFungibleToken"},{"id":213,"kind":1024,"name":"address","url":"interfaces/openseafungibletoken.html#address","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"OpenSeaFungibleToken"},{"id":214,"kind":256,"name":"OpenSeaAssetBundle","url":"interfaces/openseaassetbundle.html","classes":"tsd-kind-interface"},{"id":215,"kind":1024,"name":"maker","url":"interfaces/openseaassetbundle.html#maker","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundle"},{"id":216,"kind":1024,"name":"assets","url":"interfaces/openseaassetbundle.html#assets","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundle"},{"id":217,"kind":1024,"name":"name","url":"interfaces/openseaassetbundle.html#name","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundle"},{"id":218,"kind":1024,"name":"slug","url":"interfaces/openseaassetbundle.html#slug","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundle"},{"id":219,"kind":1024,"name":"permalink","url":"interfaces/openseaassetbundle.html#permalink","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundle"},{"id":220,"kind":1024,"name":"sellOrders","url":"interfaces/openseaassetbundle.html#sellorders","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundle"},{"id":221,"kind":1024,"name":"assetContract","url":"interfaces/openseaassetbundle.html#assetcontract","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundle"},{"id":222,"kind":1024,"name":"description","url":"interfaces/openseaassetbundle.html#description","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundle"},{"id":223,"kind":1024,"name":"externalLink","url":"interfaces/openseaassetbundle.html#externallink","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundle"},{"id":224,"kind":256,"name":"OpenSeaAssetBundleJSON","url":"interfaces/openseaassetbundlejson.html","classes":"tsd-kind-interface"},{"id":225,"kind":1024,"name":"assets","url":"interfaces/openseaassetbundlejson.html#assets","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundleJSON"},{"id":226,"kind":1024,"name":"name","url":"interfaces/openseaassetbundlejson.html#name","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundleJSON"},{"id":227,"kind":1024,"name":"description","url":"interfaces/openseaassetbundlejson.html#description","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundleJSON"},{"id":228,"kind":1024,"name":"external_link","url":"interfaces/openseaassetbundlejson.html#external_link","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundleJSON"},{"id":229,"kind":1024,"name":"maker","url":"interfaces/openseaassetbundlejson.html#maker","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundleJSON"},{"id":230,"kind":256,"name":"OpenSeaAssetBundleQuery","url":"interfaces/openseaassetbundlequery.html","classes":"tsd-kind-interface"},{"id":231,"kind":1024,"name":"asset_contract_address","url":"interfaces/openseaassetbundlequery.html#asset_contract_address","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundleQuery"},{"id":232,"kind":1024,"name":"token_ids","url":"interfaces/openseaassetbundlequery.html#token_ids","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundleQuery"},{"id":233,"kind":1024,"name":"on_sale","url":"interfaces/openseaassetbundlequery.html#on_sale","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundleQuery"},{"id":234,"kind":1024,"name":"owner","url":"interfaces/openseaassetbundlequery.html#owner","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundleQuery"},{"id":235,"kind":1024,"name":"offset","url":"interfaces/openseaassetbundlequery.html#offset","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundleQuery"},{"id":236,"kind":1024,"name":"limit","url":"interfaces/openseaassetbundlequery.html#limit","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundleQuery"},{"id":237,"kind":1024,"name":"search","url":"interfaces/openseaassetbundlequery.html#search","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetBundleQuery"},{"id":238,"kind":256,"name":"OpenSeaFees","url":"interfaces/openseafees.html","classes":"tsd-kind-interface"},{"id":239,"kind":1024,"name":"openseaSellerFeeBasisPoints","url":"interfaces/openseafees.html#openseasellerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaFees"},{"id":240,"kind":1024,"name":"openseaBuyerFeeBasisPoints","url":"interfaces/openseafees.html#openseabuyerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaFees"},{"id":241,"kind":1024,"name":"devSellerFeeBasisPoints","url":"interfaces/openseafees.html#devsellerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaFees"},{"id":242,"kind":1024,"name":"devBuyerFeeBasisPoints","url":"interfaces/openseafees.html#devbuyerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaFees"},{"id":243,"kind":256,"name":"ComputedFees","url":"interfaces/computedfees.html","classes":"tsd-kind-interface"},{"id":244,"kind":1024,"name":"totalBuyerFeeBasisPoints","url":"interfaces/computedfees.html#totalbuyerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"ComputedFees"},{"id":245,"kind":1024,"name":"totalSellerFeeBasisPoints","url":"interfaces/computedfees.html#totalsellerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"ComputedFees"},{"id":246,"kind":1024,"name":"transferFee","url":"interfaces/computedfees.html#transferfee","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"ComputedFees"},{"id":247,"kind":1024,"name":"transferFeeTokenAddress","url":"interfaces/computedfees.html#transferfeetokenaddress","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"ComputedFees"},{"id":248,"kind":1024,"name":"sellerBountyBasisPoints","url":"interfaces/computedfees.html#sellerbountybasispoints","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"ComputedFees"},{"id":249,"kind":1024,"name":"openseaSellerFeeBasisPoints","url":"interfaces/computedfees.html#openseasellerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"ComputedFees"},{"id":250,"kind":1024,"name":"openseaBuyerFeeBasisPoints","url":"interfaces/computedfees.html#openseabuyerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"ComputedFees"},{"id":251,"kind":1024,"name":"devSellerFeeBasisPoints","url":"interfaces/computedfees.html#devsellerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"ComputedFees"},{"id":252,"kind":1024,"name":"devBuyerFeeBasisPoints","url":"interfaces/computedfees.html#devbuyerfeebasispoints","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"ComputedFees"},{"id":253,"kind":256,"name":"ExchangeMetadataForAsset","url":"interfaces/exchangemetadataforasset.html","classes":"tsd-kind-interface"},{"id":254,"kind":1024,"name":"asset","url":"interfaces/exchangemetadataforasset.html#asset","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"ExchangeMetadataForAsset"},{"id":255,"kind":1024,"name":"schema","url":"interfaces/exchangemetadataforasset.html#schema","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"ExchangeMetadataForAsset"},{"id":256,"kind":1024,"name":"referrerAddress","url":"interfaces/exchangemetadataforasset.html#referreraddress","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"ExchangeMetadataForAsset"},{"id":257,"kind":256,"name":"ExchangeMetadataForBundle","url":"interfaces/exchangemetadataforbundle.html","classes":"tsd-kind-interface"},{"id":258,"kind":1024,"name":"bundle","url":"interfaces/exchangemetadataforbundle.html#bundle","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"ExchangeMetadataForBundle"},{"id":259,"kind":1024,"name":"referrerAddress","url":"interfaces/exchangemetadataforbundle.html#referreraddress","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"ExchangeMetadataForBundle"},{"id":260,"kind":256,"name":"UnhashedOrder","url":"interfaces/unhashedorder.html","classes":"tsd-kind-interface"},{"id":261,"kind":1024,"name":"feeMethod","url":"interfaces/unhashedorder.html#feemethod","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite","parent":"UnhashedOrder"},{"id":262,"kind":1024,"name":"side","url":"interfaces/unhashedorder.html#side","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite","parent":"UnhashedOrder"},{"id":263,"kind":1024,"name":"saleKind","url":"interfaces/unhashedorder.html#salekind","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite","parent":"UnhashedOrder"},{"id":264,"kind":1024,"name":"howToCall","url":"interfaces/unhashedorder.html#howtocall","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite","parent":"UnhashedOrder"},{"id":265,"kind":1024,"name":"quantity","url":"interfaces/unhashedorder.html#quantity","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"UnhashedOrder"},{"id":266,"kind":1024,"name":"makerReferrerFee","url":"interfaces/unhashedorder.html#makerreferrerfee","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"UnhashedOrder"},{"id":267,"kind":1024,"name":"waitingForBestCounterOrder","url":"interfaces/unhashedorder.html#waitingforbestcounterorder","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"UnhashedOrder"},{"id":268,"kind":1024,"name":"englishAuctionReservePrice","url":"interfaces/unhashedorder.html#englishauctionreserveprice","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"UnhashedOrder"},{"id":269,"kind":1024,"name":"metadata","url":"interfaces/unhashedorder.html#metadata","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"UnhashedOrder"},{"id":270,"kind":1024,"name":"exchange","url":"interfaces/unhashedorder.html#exchange","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":271,"kind":1024,"name":"maker","url":"interfaces/unhashedorder.html#maker","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":272,"kind":1024,"name":"taker","url":"interfaces/unhashedorder.html#taker","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":273,"kind":1024,"name":"makerRelayerFee","url":"interfaces/unhashedorder.html#makerrelayerfee","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":274,"kind":1024,"name":"takerRelayerFee","url":"interfaces/unhashedorder.html#takerrelayerfee","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":275,"kind":1024,"name":"makerProtocolFee","url":"interfaces/unhashedorder.html#makerprotocolfee","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":276,"kind":1024,"name":"takerProtocolFee","url":"interfaces/unhashedorder.html#takerprotocolfee","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":277,"kind":1024,"name":"feeRecipient","url":"interfaces/unhashedorder.html#feerecipient","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":278,"kind":1024,"name":"target","url":"interfaces/unhashedorder.html#target","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":279,"kind":1024,"name":"calldata","url":"interfaces/unhashedorder.html#calldata","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":280,"kind":1024,"name":"replacementPattern","url":"interfaces/unhashedorder.html#replacementpattern","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":281,"kind":1024,"name":"staticTarget","url":"interfaces/unhashedorder.html#statictarget","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":282,"kind":1024,"name":"staticExtradata","url":"interfaces/unhashedorder.html#staticextradata","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":283,"kind":1024,"name":"paymentToken","url":"interfaces/unhashedorder.html#paymenttoken","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":284,"kind":1024,"name":"basePrice","url":"interfaces/unhashedorder.html#baseprice","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":285,"kind":1024,"name":"extra","url":"interfaces/unhashedorder.html#extra","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":286,"kind":1024,"name":"listingTime","url":"interfaces/unhashedorder.html#listingtime","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":287,"kind":1024,"name":"expirationTime","url":"interfaces/unhashedorder.html#expirationtime","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":288,"kind":1024,"name":"salt","url":"interfaces/unhashedorder.html#salt","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnhashedOrder"},{"id":289,"kind":256,"name":"UnsignedOrder","url":"interfaces/unsignedorder.html","classes":"tsd-kind-interface"},{"id":290,"kind":1024,"name":"hash","url":"interfaces/unsignedorder.html#hash","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"UnsignedOrder"},{"id":291,"kind":1024,"name":"feeMethod","url":"interfaces/unsignedorder.html#feemethod","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited","parent":"UnsignedOrder"},{"id":292,"kind":1024,"name":"side","url":"interfaces/unsignedorder.html#side","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited","parent":"UnsignedOrder"},{"id":293,"kind":1024,"name":"saleKind","url":"interfaces/unsignedorder.html#salekind","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited","parent":"UnsignedOrder"},{"id":294,"kind":1024,"name":"howToCall","url":"interfaces/unsignedorder.html#howtocall","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited","parent":"UnsignedOrder"},{"id":295,"kind":1024,"name":"quantity","url":"interfaces/unsignedorder.html#quantity","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":296,"kind":1024,"name":"makerReferrerFee","url":"interfaces/unsignedorder.html#makerreferrerfee","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":297,"kind":1024,"name":"waitingForBestCounterOrder","url":"interfaces/unsignedorder.html#waitingforbestcounterorder","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":298,"kind":1024,"name":"englishAuctionReservePrice","url":"interfaces/unsignedorder.html#englishauctionreserveprice","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":299,"kind":1024,"name":"metadata","url":"interfaces/unsignedorder.html#metadata","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":300,"kind":1024,"name":"exchange","url":"interfaces/unsignedorder.html#exchange","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":301,"kind":1024,"name":"maker","url":"interfaces/unsignedorder.html#maker","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":302,"kind":1024,"name":"taker","url":"interfaces/unsignedorder.html#taker","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":303,"kind":1024,"name":"makerRelayerFee","url":"interfaces/unsignedorder.html#makerrelayerfee","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":304,"kind":1024,"name":"takerRelayerFee","url":"interfaces/unsignedorder.html#takerrelayerfee","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":305,"kind":1024,"name":"makerProtocolFee","url":"interfaces/unsignedorder.html#makerprotocolfee","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":306,"kind":1024,"name":"takerProtocolFee","url":"interfaces/unsignedorder.html#takerprotocolfee","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":307,"kind":1024,"name":"feeRecipient","url":"interfaces/unsignedorder.html#feerecipient","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":308,"kind":1024,"name":"target","url":"interfaces/unsignedorder.html#target","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":309,"kind":1024,"name":"calldata","url":"interfaces/unsignedorder.html#calldata","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":310,"kind":1024,"name":"replacementPattern","url":"interfaces/unsignedorder.html#replacementpattern","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":311,"kind":1024,"name":"staticTarget","url":"interfaces/unsignedorder.html#statictarget","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":312,"kind":1024,"name":"staticExtradata","url":"interfaces/unsignedorder.html#staticextradata","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":313,"kind":1024,"name":"paymentToken","url":"interfaces/unsignedorder.html#paymenttoken","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":314,"kind":1024,"name":"basePrice","url":"interfaces/unsignedorder.html#baseprice","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":315,"kind":1024,"name":"extra","url":"interfaces/unsignedorder.html#extra","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":316,"kind":1024,"name":"listingTime","url":"interfaces/unsignedorder.html#listingtime","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":317,"kind":1024,"name":"expirationTime","url":"interfaces/unsignedorder.html#expirationtime","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":318,"kind":1024,"name":"salt","url":"interfaces/unsignedorder.html#salt","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"UnsignedOrder"},{"id":319,"kind":256,"name":"Order","url":"interfaces/order.html","classes":"tsd-kind-interface"},{"id":320,"kind":1024,"name":"createdTime","url":"interfaces/order.html#createdtime","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Order"},{"id":321,"kind":1024,"name":"currentPrice","url":"interfaces/order.html#currentprice","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Order"},{"id":322,"kind":1024,"name":"currentBounty","url":"interfaces/order.html#currentbounty","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Order"},{"id":323,"kind":1024,"name":"makerAccount","url":"interfaces/order.html#makeraccount","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Order"},{"id":324,"kind":1024,"name":"takerAccount","url":"interfaces/order.html#takeraccount","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Order"},{"id":325,"kind":1024,"name":"paymentTokenContract","url":"interfaces/order.html#paymenttokencontract","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Order"},{"id":326,"kind":1024,"name":"feeRecipientAccount","url":"interfaces/order.html#feerecipientaccount","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Order"},{"id":327,"kind":1024,"name":"cancelledOrFinalized","url":"interfaces/order.html#cancelledorfinalized","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Order"},{"id":328,"kind":1024,"name":"markedInvalid","url":"interfaces/order.html#markedinvalid","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Order"},{"id":329,"kind":1024,"name":"asset","url":"interfaces/order.html#asset","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Order"},{"id":330,"kind":1024,"name":"assetBundle","url":"interfaces/order.html#assetbundle","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"Order"},{"id":331,"kind":1024,"name":"hash","url":"interfaces/order.html#hash","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":332,"kind":1024,"name":"feeMethod","url":"interfaces/order.html#feemethod","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited","parent":"Order"},{"id":333,"kind":1024,"name":"side","url":"interfaces/order.html#side","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited","parent":"Order"},{"id":334,"kind":1024,"name":"saleKind","url":"interfaces/order.html#salekind","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited","parent":"Order"},{"id":335,"kind":1024,"name":"howToCall","url":"interfaces/order.html#howtocall","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited","parent":"Order"},{"id":336,"kind":1024,"name":"quantity","url":"interfaces/order.html#quantity","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":337,"kind":1024,"name":"makerReferrerFee","url":"interfaces/order.html#makerreferrerfee","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":338,"kind":1024,"name":"waitingForBestCounterOrder","url":"interfaces/order.html#waitingforbestcounterorder","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":339,"kind":1024,"name":"englishAuctionReservePrice","url":"interfaces/order.html#englishauctionreserveprice","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":340,"kind":1024,"name":"metadata","url":"interfaces/order.html#metadata","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":341,"kind":1024,"name":"exchange","url":"interfaces/order.html#exchange","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":342,"kind":1024,"name":"maker","url":"interfaces/order.html#maker","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":343,"kind":1024,"name":"taker","url":"interfaces/order.html#taker","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":344,"kind":1024,"name":"makerRelayerFee","url":"interfaces/order.html#makerrelayerfee","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":345,"kind":1024,"name":"takerRelayerFee","url":"interfaces/order.html#takerrelayerfee","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":346,"kind":1024,"name":"makerProtocolFee","url":"interfaces/order.html#makerprotocolfee","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":347,"kind":1024,"name":"takerProtocolFee","url":"interfaces/order.html#takerprotocolfee","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":348,"kind":1024,"name":"feeRecipient","url":"interfaces/order.html#feerecipient","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":349,"kind":1024,"name":"target","url":"interfaces/order.html#target","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":350,"kind":1024,"name":"calldata","url":"interfaces/order.html#calldata","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":351,"kind":1024,"name":"replacementPattern","url":"interfaces/order.html#replacementpattern","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":352,"kind":1024,"name":"staticTarget","url":"interfaces/order.html#statictarget","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":353,"kind":1024,"name":"staticExtradata","url":"interfaces/order.html#staticextradata","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":354,"kind":1024,"name":"paymentToken","url":"interfaces/order.html#paymenttoken","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":355,"kind":1024,"name":"basePrice","url":"interfaces/order.html#baseprice","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":356,"kind":1024,"name":"extra","url":"interfaces/order.html#extra","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":357,"kind":1024,"name":"listingTime","url":"interfaces/order.html#listingtime","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":358,"kind":1024,"name":"expirationTime","url":"interfaces/order.html#expirationtime","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":359,"kind":1024,"name":"salt","url":"interfaces/order.html#salt","classes":"tsd-kind-property tsd-parent-kind-interface tsd-is-inherited","parent":"Order"},{"id":360,"kind":256,"name":"OrderJSON","url":"interfaces/orderjson.html","classes":"tsd-kind-interface"},{"id":361,"kind":1024,"name":"exchange","url":"interfaces/orderjson.html#exchange","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":362,"kind":1024,"name":"maker","url":"interfaces/orderjson.html#maker","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":363,"kind":1024,"name":"taker","url":"interfaces/orderjson.html#taker","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":364,"kind":1024,"name":"makerRelayerFee","url":"interfaces/orderjson.html#makerrelayerfee","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":365,"kind":1024,"name":"takerRelayerFee","url":"interfaces/orderjson.html#takerrelayerfee","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":366,"kind":1024,"name":"makerProtocolFee","url":"interfaces/orderjson.html#makerprotocolfee","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":367,"kind":1024,"name":"takerProtocolFee","url":"interfaces/orderjson.html#takerprotocolfee","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":368,"kind":1024,"name":"makerReferrerFee","url":"interfaces/orderjson.html#makerreferrerfee","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":369,"kind":1024,"name":"feeRecipient","url":"interfaces/orderjson.html#feerecipient","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":370,"kind":1024,"name":"feeMethod","url":"interfaces/orderjson.html#feemethod","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":371,"kind":1024,"name":"side","url":"interfaces/orderjson.html#side","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":372,"kind":1024,"name":"saleKind","url":"interfaces/orderjson.html#salekind","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":373,"kind":1024,"name":"target","url":"interfaces/orderjson.html#target","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":374,"kind":1024,"name":"howToCall","url":"interfaces/orderjson.html#howtocall","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":375,"kind":1024,"name":"calldata","url":"interfaces/orderjson.html#calldata","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":376,"kind":1024,"name":"replacementPattern","url":"interfaces/orderjson.html#replacementpattern","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":377,"kind":1024,"name":"staticTarget","url":"interfaces/orderjson.html#statictarget","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":378,"kind":1024,"name":"staticExtradata","url":"interfaces/orderjson.html#staticextradata","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":379,"kind":1024,"name":"paymentToken","url":"interfaces/orderjson.html#paymenttoken","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":380,"kind":1024,"name":"quantity","url":"interfaces/orderjson.html#quantity","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":381,"kind":1024,"name":"basePrice","url":"interfaces/orderjson.html#baseprice","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":382,"kind":1024,"name":"englishAuctionReservePrice","url":"interfaces/orderjson.html#englishauctionreserveprice","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":383,"kind":1024,"name":"extra","url":"interfaces/orderjson.html#extra","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":384,"kind":1024,"name":"createdTime","url":"interfaces/orderjson.html#createdtime","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":385,"kind":1024,"name":"listingTime","url":"interfaces/orderjson.html#listingtime","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":386,"kind":1024,"name":"expirationTime","url":"interfaces/orderjson.html#expirationtime","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":387,"kind":1024,"name":"salt","url":"interfaces/orderjson.html#salt","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":388,"kind":1024,"name":"metadata","url":"interfaces/orderjson.html#metadata","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":389,"kind":1024,"name":"hash","url":"interfaces/orderjson.html#hash","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderJSON"},{"id":390,"kind":256,"name":"OrderQuery","url":"interfaces/orderquery.html","classes":"tsd-kind-interface"},{"id":391,"kind":1024,"name":"owner","url":"interfaces/orderquery.html#owner","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderQuery"},{"id":392,"kind":1024,"name":"sale_kind","url":"interfaces/orderquery.html#sale_kind","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderQuery"},{"id":393,"kind":1024,"name":"asset_contract_address","url":"interfaces/orderquery.html#asset_contract_address","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderQuery"},{"id":394,"kind":1024,"name":"payment_token_address","url":"interfaces/orderquery.html#payment_token_address","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderQuery"},{"id":395,"kind":1024,"name":"is_english","url":"interfaces/orderquery.html#is_english","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderQuery"},{"id":396,"kind":1024,"name":"is_expired","url":"interfaces/orderquery.html#is_expired","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderQuery"},{"id":397,"kind":1024,"name":"bundled","url":"interfaces/orderquery.html#bundled","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderQuery"},{"id":398,"kind":1024,"name":"include_invalid","url":"interfaces/orderquery.html#include_invalid","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderQuery"},{"id":399,"kind":1024,"name":"token_id","url":"interfaces/orderquery.html#token_id","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderQuery"},{"id":400,"kind":1024,"name":"token_ids","url":"interfaces/orderquery.html#token_ids","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderQuery"},{"id":401,"kind":1024,"name":"listed_after","url":"interfaces/orderquery.html#listed_after","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderQuery"},{"id":402,"kind":1024,"name":"listed_before","url":"interfaces/orderquery.html#listed_before","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderQuery"},{"id":403,"kind":1024,"name":"limit","url":"interfaces/orderquery.html#limit","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderQuery"},{"id":404,"kind":1024,"name":"offset","url":"interfaces/orderquery.html#offset","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderQuery"},{"id":405,"kind":256,"name":"OpenSeaAssetQuery","url":"interfaces/openseaassetquery.html","classes":"tsd-kind-interface"},{"id":406,"kind":1024,"name":"owner","url":"interfaces/openseaassetquery.html#owner","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetQuery"},{"id":407,"kind":1024,"name":"asset_contract_address","url":"interfaces/openseaassetquery.html#asset_contract_address","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetQuery"},{"id":408,"kind":1024,"name":"token_ids","url":"interfaces/openseaassetquery.html#token_ids","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetQuery"},{"id":409,"kind":1024,"name":"search","url":"interfaces/openseaassetquery.html#search","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetQuery"},{"id":410,"kind":1024,"name":"order_by","url":"interfaces/openseaassetquery.html#order_by","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetQuery"},{"id":411,"kind":1024,"name":"order_direction","url":"interfaces/openseaassetquery.html#order_direction","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetQuery"},{"id":412,"kind":1024,"name":"limit","url":"interfaces/openseaassetquery.html#limit","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetQuery"},{"id":413,"kind":1024,"name":"offset","url":"interfaces/openseaassetquery.html#offset","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaAssetQuery"},{"id":414,"kind":256,"name":"OpenSeaFungibleTokenQuery","url":"interfaces/openseafungibletokenquery.html","classes":"tsd-kind-interface"},{"id":415,"kind":1024,"name":"limit","url":"interfaces/openseafungibletokenquery.html#limit","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaFungibleTokenQuery"},{"id":416,"kind":1024,"name":"offset","url":"interfaces/openseafungibletokenquery.html#offset","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaFungibleTokenQuery"},{"id":417,"kind":1024,"name":"symbol","url":"interfaces/openseafungibletokenquery.html#symbol","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OpenSeaFungibleTokenQuery"},{"id":418,"kind":256,"name":"OrderbookResponse","url":"interfaces/orderbookresponse.html","classes":"tsd-kind-interface"},{"id":419,"kind":1024,"name":"orders","url":"interfaces/orderbookresponse.html#orders","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderbookResponse"},{"id":420,"kind":1024,"name":"count","url":"interfaces/orderbookresponse.html#count","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"OrderbookResponse"},{"id":421,"kind":256,"name":"PartialAbiDefinition","url":"interfaces/partialabidefinition.html","classes":"tsd-kind-interface"},{"id":422,"kind":1024,"name":"type","url":"interfaces/partialabidefinition.html#type","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"PartialAbiDefinition"},{"id":423,"kind":1024,"name":"name","url":"interfaces/partialabidefinition.html#name","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"PartialAbiDefinition"},{"id":424,"kind":1024,"name":"inputs","url":"interfaces/partialabidefinition.html#inputs","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"PartialAbiDefinition"},{"id":425,"kind":1024,"name":"outputs","url":"interfaces/partialabidefinition.html#outputs","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"PartialAbiDefinition"},{"id":426,"kind":1024,"name":"payable","url":"interfaces/partialabidefinition.html#payable","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"PartialAbiDefinition"},{"id":427,"kind":1024,"name":"constant","url":"interfaces/partialabidefinition.html#constant","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"PartialAbiDefinition"},{"id":428,"kind":1024,"name":"anonymous","url":"interfaces/partialabidefinition.html#anonymous","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"PartialAbiDefinition"},{"id":429,"kind":1024,"name":"stateMutability","url":"interfaces/partialabidefinition.html#statemutability","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"PartialAbiDefinition"},{"id":430,"kind":4194304,"name":"WyvernAsset","url":"globals.html#wyvernasset","classes":"tsd-kind-type-alias"},{"id":431,"kind":4194304,"name":"WyvernAtomicMatchParameters","url":"globals.html#wyvernatomicmatchparameters","classes":"tsd-kind-type-alias"},{"id":432,"kind":4194304,"name":"FungibleToken","url":"globals.html#fungibletoken","classes":"tsd-kind-type-alias"},{"id":433,"kind":4194304,"name":"ExchangeMetadata","url":"globals.html#exchangemetadata","classes":"tsd-kind-type-alias"},{"id":434,"kind":4194304,"name":"FungibleTokenQuery","url":"globals.html#fungibletokenquery","classes":"tsd-kind-type-alias"},{"id":435,"kind":4194304,"name":"Web3Callback","url":"globals.html#web3callback","classes":"tsd-kind-type-alias tsd-has-type-parameter"},{"id":436,"kind":65536,"name":"__type","url":"globals.html#web3callback.__type","classes":"tsd-kind-type-literal tsd-parent-kind-type-alias tsd-is-not-exported","parent":"Web3Callback"},{"id":437,"kind":4194304,"name":"Web3RPCCallback","url":"globals.html#web3rpccallback","classes":"tsd-kind-type-alias"},{"id":438,"kind":4194304,"name":"TxnCallback","url":"globals.html#txncallback","classes":"tsd-kind-type-alias"},{"id":439,"kind":65536,"name":"__type","url":"globals.html#txncallback.__type","classes":"tsd-kind-type-literal tsd-parent-kind-type-alias tsd-is-not-exported","parent":"TxnCallback"},{"id":440,"kind":4194304,"name":"PartialReadonlyContractAbi","url":"globals.html#partialreadonlycontractabi","classes":"tsd-kind-type-alias"},{"id":441,"kind":32,"name":"ERC20","url":"globals.html#erc20","classes":"tsd-kind-variable"},{"id":442,"kind":32,"name":"ERC721","url":"globals.html#erc721","classes":"tsd-kind-variable"},{"id":443,"kind":32,"name":"ERC1155","url":"globals.html#erc1155","classes":"tsd-kind-variable"},{"id":444,"kind":32,"name":"StaticCheckTxOrigin","url":"globals.html#staticchecktxorigin","classes":"tsd-kind-variable"},{"id":445,"kind":32,"name":"StaticCheckCheezeWizards","url":"globals.html#staticcheckcheezewizards","classes":"tsd-kind-variable"},{"id":446,"kind":32,"name":"StaticCheckDecentralandEstates","url":"globals.html#staticcheckdecentralandestates","classes":"tsd-kind-variable"},{"id":447,"kind":32,"name":"CheezeWizardsBasicTournament","url":"globals.html#cheezewizardsbasictournament","classes":"tsd-kind-variable"},{"id":448,"kind":32,"name":"DecentralandEstates","url":"globals.html#decentralandestates","classes":"tsd-kind-variable"},{"id":449,"kind":32,"name":"CanonicalWETH","url":"globals.html#canonicalweth","classes":"tsd-kind-variable"},{"id":450,"kind":32,"name":"WrappedNFT","url":"globals.html#wrappednft","classes":"tsd-kind-variable"},{"id":451,"kind":32,"name":"WrappedNFTFactory","url":"globals.html#wrappednftfactory","classes":"tsd-kind-variable"},{"id":452,"kind":32,"name":"WrappedNFTLiquidationProxy","url":"globals.html#wrappednftliquidationproxy","classes":"tsd-kind-variable"},{"id":453,"kind":32,"name":"UniswapFactory","url":"globals.html#uniswapfactory","classes":"tsd-kind-variable"},{"id":454,"kind":32,"name":"UniswapExchange","url":"globals.html#uniswapexchange","classes":"tsd-kind-variable"},{"id":455,"kind":64,"name":"getMethod","url":"globals.html#getmethod","classes":"tsd-kind-function"},{"id":456,"kind":64,"name":"event","url":"globals.html#event","classes":"tsd-kind-function"},{"id":457,"kind":2097152,"name":"DECENTRALAND_AUCTION_CONFIG","url":"globals.html#decentraland_auction_config","classes":"tsd-kind-object-literal"},{"id":458,"kind":32,"name":"1","url":"globals.html#decentraland_auction_config.1","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"DECENTRALAND_AUCTION_CONFIG"},{"id":459,"kind":2097152,"name":"proxyABI","url":"globals.html#proxyabi","classes":"tsd-kind-object-literal"},{"id":460,"kind":32,"name":"constant","url":"globals.html#proxyabi.constant","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"proxyABI"},{"id":461,"kind":32,"name":"inputs","url":"globals.html#proxyabi.inputs","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"proxyABI"},{"id":462,"kind":32,"name":"name","url":"globals.html#proxyabi.name","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"proxyABI"},{"id":463,"kind":32,"name":"outputs","url":"globals.html#proxyabi.outputs","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"proxyABI"},{"id":464,"kind":32,"name":"payable","url":"globals.html#proxyabi.payable","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"proxyABI"},{"id":465,"kind":32,"name":"stateMutability","url":"globals.html#proxyabi.statemutability","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"proxyABI"},{"id":466,"kind":32,"name":"type","url":"globals.html#proxyabi.type","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"proxyABI"},{"id":467,"kind":2097152,"name":"proxyAssertABI","url":"globals.html#proxyassertabi","classes":"tsd-kind-object-literal"},{"id":468,"kind":32,"name":"constant","url":"globals.html#proxyassertabi.constant","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"proxyAssertABI"},{"id":469,"kind":32,"name":"inputs","url":"globals.html#proxyassertabi.inputs","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"proxyAssertABI"},{"id":470,"kind":32,"name":"name","url":"globals.html#proxyassertabi.name","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"proxyAssertABI"},{"id":471,"kind":32,"name":"outputs","url":"globals.html#proxyassertabi.outputs","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"proxyAssertABI"},{"id":472,"kind":32,"name":"payable","url":"globals.html#proxyassertabi.payable","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"proxyAssertABI"},{"id":473,"kind":32,"name":"stateMutability","url":"globals.html#proxyassertabi.statemutability","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"proxyAssertABI"},{"id":474,"kind":32,"name":"type","url":"globals.html#proxyassertabi.type","classes":"tsd-kind-variable tsd-parent-kind-object-literal","parent":"proxyAssertABI"},{"id":475,"kind":256,"name":"LimitedCallSpec","url":"interfaces/limitedcallspec.html","classes":"tsd-kind-interface"},{"id":476,"kind":1024,"name":"target","url":"interfaces/limitedcallspec.html#target","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"LimitedCallSpec"},{"id":477,"kind":1024,"name":"calldata","url":"interfaces/limitedcallspec.html#calldata","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"LimitedCallSpec"},{"id":478,"kind":256,"name":"CallSpec","url":"interfaces/callspec.html","classes":"tsd-kind-interface"},{"id":479,"kind":1024,"name":"target","url":"interfaces/callspec.html#target","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"CallSpec"},{"id":480,"kind":1024,"name":"calldata","url":"interfaces/callspec.html#calldata","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"CallSpec"},{"id":481,"kind":1024,"name":"replacementPattern","url":"interfaces/callspec.html#replacementpattern","classes":"tsd-kind-property tsd-parent-kind-interface","parent":"CallSpec"},{"id":482,"kind":32,"name":"encodeReplacementPattern","url":"globals.html#encodereplacementpattern","classes":"tsd-kind-variable"},{"id":483,"kind":4194304,"name":"Encoder","url":"globals.html#encoder","classes":"tsd-kind-type-alias"},{"id":484,"kind":65536,"name":"__type","url":"globals.html#encoder.__type","classes":"tsd-kind-type-literal tsd-parent-kind-type-alias tsd-is-not-exported","parent":"Encoder"},{"id":485,"kind":64,"name":"encodeCall","url":"globals.html#encodecall","classes":"tsd-kind-function"},{"id":486,"kind":64,"name":"encodeSell","url":"globals.html#encodesell","classes":"tsd-kind-function"},{"id":487,"kind":4194304,"name":"AtomicizedSellEncoder","url":"globals.html#atomicizedsellencoder","classes":"tsd-kind-type-alias"},{"id":488,"kind":65536,"name":"__type","url":"globals.html#atomicizedsellencoder.__type","classes":"tsd-kind-type-literal tsd-parent-kind-type-alias tsd-is-not-exported","parent":"AtomicizedSellEncoder"},{"id":489,"kind":64,"name":"encodeAtomicizedSell","url":"globals.html#encodeatomicizedsell","classes":"tsd-kind-function"},{"id":490,"kind":4194304,"name":"AtomicizedBuyEncoder","url":"globals.html#atomicizedbuyencoder","classes":"tsd-kind-type-alias"},{"id":491,"kind":65536,"name":"__type","url":"globals.html#atomicizedbuyencoder.__type","classes":"tsd-kind-type-literal tsd-parent-kind-type-alias tsd-is-not-exported","parent":"AtomicizedBuyEncoder"},{"id":492,"kind":64,"name":"encodeAtomicizedBuy","url":"globals.html#encodeatomicizedbuy","classes":"tsd-kind-function"},{"id":493,"kind":64,"name":"encodeBuy","url":"globals.html#encodebuy","classes":"tsd-kind-function"},{"id":494,"kind":4194304,"name":"DefaultCallEncoder","url":"globals.html#defaultcallencoder","classes":"tsd-kind-type-alias"},{"id":495,"kind":65536,"name":"__type","url":"globals.html#defaultcallencoder.__type","classes":"tsd-kind-type-literal tsd-parent-kind-type-alias tsd-is-not-exported","parent":"DefaultCallEncoder"},{"id":496,"kind":64,"name":"encodeDefaultCall","url":"globals.html#encodedefaultcall","classes":"tsd-kind-function"},{"id":497,"kind":64,"name":"encodeAtomicizedTransfer","url":"globals.html#encodeatomicizedtransfer","classes":"tsd-kind-function"},{"id":498,"kind":64,"name":"encodeTransferCall","url":"globals.html#encodetransfercall","classes":"tsd-kind-function"},{"id":499,"kind":64,"name":"encodeProxyCall","url":"globals.html#encodeproxycall","classes":"tsd-kind-function"},{"id":500,"kind":64,"name":"encodeAtomicizedCalldata","url":"globals.html#encodeatomicizedcalldata","classes":"tsd-kind-function tsd-is-not-exported"},{"id":501,"kind":32,"name":"DEFAULT_GAS_INCREASE_FACTOR","url":"globals.html#default_gas_increase_factor","classes":"tsd-kind-variable"},{"id":502,"kind":32,"name":"NULL_ADDRESS","url":"globals.html#null_address","classes":"tsd-kind-variable"},{"id":503,"kind":32,"name":"NULL_BLOCK_HASH","url":"globals.html#null_block_hash","classes":"tsd-kind-variable"},{"id":504,"kind":32,"name":"OPENSEA_FEE_RECIPIENT","url":"globals.html#opensea_fee_recipient","classes":"tsd-kind-variable"},{"id":505,"kind":32,"name":"DEP_INFURA_KEY","url":"globals.html#dep_infura_key","classes":"tsd-kind-variable"},{"id":506,"kind":32,"name":"MAINNET_PROVIDER_URL","url":"globals.html#mainnet_provider_url","classes":"tsd-kind-variable"},{"id":507,"kind":32,"name":"RINKEBY_PROVIDER_URL","url":"globals.html#rinkeby_provider_url","classes":"tsd-kind-variable"},{"id":508,"kind":32,"name":"INVERSE_BASIS_POINT","url":"globals.html#inverse_basis_point","classes":"tsd-kind-variable"},{"id":509,"kind":32,"name":"MAX_UINT_256","url":"globals.html#max_uint_256","classes":"tsd-kind-variable"},{"id":510,"kind":32,"name":"WYVERN_EXCHANGE_ADDRESS_MAINNET","url":"globals.html#wyvern_exchange_address_mainnet","classes":"tsd-kind-variable"},{"id":511,"kind":32,"name":"WYVERN_EXCHANGE_ADDRESS_RINKEBY","url":"globals.html#wyvern_exchange_address_rinkeby","classes":"tsd-kind-variable"},{"id":512,"kind":32,"name":"ENJIN_COIN_ADDRESS","url":"globals.html#enjin_coin_address","classes":"tsd-kind-variable"},{"id":513,"kind":32,"name":"MANA_ADDRESS","url":"globals.html#mana_address","classes":"tsd-kind-variable"},{"id":514,"kind":32,"name":"ENJIN_ADDRESS","url":"globals.html#enjin_address","classes":"tsd-kind-variable"},{"id":515,"kind":32,"name":"ENJIN_LEGACY_ADDRESS","url":"globals.html#enjin_legacy_address","classes":"tsd-kind-variable"},{"id":516,"kind":32,"name":"CK_ADDRESS","url":"globals.html#ck_address","classes":"tsd-kind-variable"},{"id":517,"kind":32,"name":"CK_RINKEBY_ADDRESS","url":"globals.html#ck_rinkeby_address","classes":"tsd-kind-variable"},{"id":518,"kind":32,"name":"WRAPPED_NFT_FACTORY_ADDRESS_MAINNET","url":"globals.html#wrapped_nft_factory_address_mainnet","classes":"tsd-kind-variable"},{"id":519,"kind":32,"name":"WRAPPED_NFT_FACTORY_ADDRESS_RINKEBY","url":"globals.html#wrapped_nft_factory_address_rinkeby","classes":"tsd-kind-variable"},{"id":520,"kind":32,"name":"WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_MAINNET","url":"globals.html#wrapped_nft_liquidation_proxy_address_mainnet","classes":"tsd-kind-variable"},{"id":521,"kind":32,"name":"WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_RINKEBY","url":"globals.html#wrapped_nft_liquidation_proxy_address_rinkeby","classes":"tsd-kind-variable"},{"id":522,"kind":32,"name":"UNISWAP_FACTORY_ADDRESS_MAINNET","url":"globals.html#uniswap_factory_address_mainnet","classes":"tsd-kind-variable"},{"id":523,"kind":32,"name":"UNISWAP_FACTORY_ADDRESS_RINKEBY","url":"globals.html#uniswap_factory_address_rinkeby","classes":"tsd-kind-variable"},{"id":524,"kind":32,"name":"DEFAULT_WRAPPED_NFT_LIQUIDATION_UNISWAP_SLIPPAGE_IN_BASIS_POINTS","url":"globals.html#default_wrapped_nft_liquidation_uniswap_slippage_in_basis_points","classes":"tsd-kind-variable"},{"id":525,"kind":32,"name":"CHEEZE_WIZARDS_GUILD_ADDRESS","url":"globals.html#cheeze_wizards_guild_address","classes":"tsd-kind-variable"},{"id":526,"kind":32,"name":"CHEEZE_WIZARDS_GUILD_RINKEBY_ADDRESS","url":"globals.html#cheeze_wizards_guild_rinkeby_address","classes":"tsd-kind-variable"},{"id":527,"kind":32,"name":"CHEEZE_WIZARDS_BASIC_TOURNAMENT_ADDRESS","url":"globals.html#cheeze_wizards_basic_tournament_address","classes":"tsd-kind-variable"},{"id":528,"kind":32,"name":"CHEEZE_WIZARDS_BASIC_TOURNAMENT_RINKEBY_ADDRESS","url":"globals.html#cheeze_wizards_basic_tournament_rinkeby_address","classes":"tsd-kind-variable"},{"id":529,"kind":32,"name":"DECENTRALAND_ESTATE_ADDRESS","url":"globals.html#decentraland_estate_address","classes":"tsd-kind-variable"},{"id":530,"kind":32,"name":"STATIC_CALL_TX_ORIGIN_ADDRESS","url":"globals.html#static_call_tx_origin_address","classes":"tsd-kind-variable"},{"id":531,"kind":32,"name":"STATIC_CALL_TX_ORIGIN_RINKEBY_ADDRESS","url":"globals.html#static_call_tx_origin_rinkeby_address","classes":"tsd-kind-variable"},{"id":532,"kind":32,"name":"STATIC_CALL_CHEEZE_WIZARDS_ADDRESS","url":"globals.html#static_call_cheeze_wizards_address","classes":"tsd-kind-variable"},{"id":533,"kind":32,"name":"STATIC_CALL_CHEEZE_WIZARDS_RINKEBY_ADDRESS","url":"globals.html#static_call_cheeze_wizards_rinkeby_address","classes":"tsd-kind-variable"},{"id":534,"kind":32,"name":"STATIC_CALL_DECENTRALAND_ESTATES_ADDRESS","url":"globals.html#static_call_decentraland_estates_address","classes":"tsd-kind-variable"},{"id":535,"kind":32,"name":"DEFAULT_BUYER_FEE_BASIS_POINTS","url":"globals.html#default_buyer_fee_basis_points","classes":"tsd-kind-variable"},{"id":536,"kind":32,"name":"DEFAULT_SELLER_FEE_BASIS_POINTS","url":"globals.html#default_seller_fee_basis_points","classes":"tsd-kind-variable"},{"id":537,"kind":32,"name":"OPENSEA_SELLER_BOUNTY_BASIS_POINTS","url":"globals.html#opensea_seller_bounty_basis_points","classes":"tsd-kind-variable"},{"id":538,"kind":32,"name":"DEFAULT_MAX_BOUNTY","url":"globals.html#default_max_bounty","classes":"tsd-kind-variable"},{"id":539,"kind":32,"name":"MIN_EXPIRATION_SECONDS","url":"globals.html#min_expiration_seconds","classes":"tsd-kind-variable"},{"id":540,"kind":32,"name":"ORDER_MATCHING_LATENCY_SECONDS","url":"globals.html#order_matching_latency_seconds","classes":"tsd-kind-variable"},{"id":541,"kind":32,"name":"SELL_ORDER_BATCH_SIZE","url":"globals.html#sell_order_batch_size","classes":"tsd-kind-variable"},{"id":542,"kind":32,"name":"ORDERBOOK_VERSION","url":"globals.html#orderbook_version","classes":"tsd-kind-variable"},{"id":543,"kind":32,"name":"API_VERSION","url":"globals.html#api_version","classes":"tsd-kind-variable"},{"id":544,"kind":32,"name":"API_BASE_MAINNET","url":"globals.html#api_base_mainnet","classes":"tsd-kind-variable"},{"id":545,"kind":32,"name":"API_BASE_RINKEBY","url":"globals.html#api_base_rinkeby","classes":"tsd-kind-variable"},{"id":546,"kind":32,"name":"SITE_HOST_MAINNET","url":"globals.html#site_host_mainnet","classes":"tsd-kind-variable"},{"id":547,"kind":32,"name":"SITE_HOST_RINKEBY","url":"globals.html#site_host_rinkeby","classes":"tsd-kind-variable"},{"id":548,"kind":32,"name":"ORDERBOOK_PATH","url":"globals.html#orderbook_path","classes":"tsd-kind-variable"},{"id":549,"kind":32,"name":"API_PATH","url":"globals.html#api_path","classes":"tsd-kind-variable"},{"id":550,"kind":4,"name":"Side","url":"enums/side.html","classes":"tsd-kind-enum tsd-is-not-exported"},{"id":551,"kind":16,"name":"Buy","url":"enums/side.html#buy","classes":"tsd-kind-enum-member tsd-parent-kind-enum tsd-is-not-exported","parent":"Side"},{"id":552,"kind":16,"name":"Sell","url":"enums/side.html#sell","classes":"tsd-kind-enum-member tsd-parent-kind-enum tsd-is-not-exported","parent":"Side"},{"id":553,"kind":32,"name":"MAX_ERROR_LENGTH","url":"globals.html#max_error_length","classes":"tsd-kind-variable"},{"id":554,"kind":2097152,"name":"SaleKindInterface","url":"globals.html#salekindinterface","classes":"tsd-kind-object-literal tsd-is-not-exported"},{"id":555,"kind":32,"name":"Side","url":"globals.html#salekindinterface.side","classes":"tsd-kind-variable tsd-parent-kind-object-literal tsd-is-not-exported","parent":"SaleKindInterface"},{"id":556,"kind":32,"name":"SaleKind","url":"globals.html#salekindinterface.salekind","classes":"tsd-kind-variable tsd-parent-kind-object-literal tsd-is-not-exported","parent":"SaleKindInterface"},{"id":557,"kind":64,"name":"validateParameters","url":"globals.html#salekindinterface.validateparameters","classes":"tsd-kind-function tsd-parent-kind-object-literal tsd-is-not-exported","parent":"SaleKindInterface"},{"id":558,"kind":64,"name":"canSettleOrder","url":"globals.html#salekindinterface.cansettleorder","classes":"tsd-kind-function tsd-parent-kind-object-literal tsd-is-not-exported","parent":"SaleKindInterface"},{"id":559,"kind":64,"name":"requireOrdersCanMatch","url":"globals.html#requireorderscanmatch","classes":"tsd-kind-function"},{"id":560,"kind":64,"name":"requireOrderCalldataCanMatch","url":"globals.html#requireordercalldatacanmatch","classes":"tsd-kind-function"},{"id":561,"kind":128,"name":"OpenSeaPort","url":"classes/openseaport.html","classes":"tsd-kind-class"},{"id":562,"kind":1024,"name":"web3","url":"classes/openseaport.html#web3","classes":"tsd-kind-property tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":563,"kind":1024,"name":"web3ReadOnly","url":"classes/openseaport.html#web3readonly","classes":"tsd-kind-property tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":564,"kind":1024,"name":"logger","url":"classes/openseaport.html#logger","classes":"tsd-kind-property tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":565,"kind":65536,"name":"__type","url":"classes/openseaport.html#logger.__type","classes":"tsd-kind-type-literal tsd-parent-kind-property tsd-is-not-exported","parent":"OpenSeaPort.logger"},{"id":566,"kind":1024,"name":"api","url":"classes/openseaport.html#api","classes":"tsd-kind-property tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":567,"kind":1024,"name":"gasPriceAddition","url":"classes/openseaport.html#gaspriceaddition","classes":"tsd-kind-property tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":568,"kind":1024,"name":"gasIncreaseFactor","url":"classes/openseaport.html#gasincreasefactor","classes":"tsd-kind-property tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":569,"kind":512,"name":"constructor","url":"classes/openseaport.html#constructor","classes":"tsd-kind-constructor tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":570,"kind":2048,"name":"addListener","url":"classes/openseaport.html#addlistener","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":571,"kind":2048,"name":"removeListener","url":"classes/openseaport.html#removelistener","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":572,"kind":2048,"name":"removeAllListeners","url":"classes/openseaport.html#removealllisteners","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":573,"kind":2048,"name":"wrapAssets","url":"classes/openseaport.html#wrapassets","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":574,"kind":2048,"name":"unwrapAssets","url":"classes/openseaport.html#unwrapassets","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":575,"kind":2048,"name":"liquidateAssets","url":"classes/openseaport.html#liquidateassets","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":576,"kind":2048,"name":"purchaseAssets","url":"classes/openseaport.html#purchaseassets","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":577,"kind":2048,"name":"getQuoteFromUniswap","url":"classes/openseaport.html#getquotefromuniswap","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":578,"kind":2048,"name":"wrapEth","url":"classes/openseaport.html#wrapeth","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":579,"kind":2048,"name":"unwrapWeth","url":"classes/openseaport.html#unwrapweth","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":580,"kind":2048,"name":"createBundleBuyOrder","url":"classes/openseaport.html#createbundlebuyorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":581,"kind":2048,"name":"createBuyOrder","url":"classes/openseaport.html#createbuyorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":582,"kind":2048,"name":"createSellOrder","url":"classes/openseaport.html#createsellorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":583,"kind":2048,"name":"createFactorySellOrders","url":"classes/openseaport.html#createfactorysellorders","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":584,"kind":2048,"name":"createBundleSellOrder","url":"classes/openseaport.html#createbundlesellorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":585,"kind":2048,"name":"fulfillOrder","url":"classes/openseaport.html#fulfillorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":586,"kind":2048,"name":"cancelOrder","url":"classes/openseaport.html#cancelorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":587,"kind":2048,"name":"approveSemiOrNonFungibleToken","url":"classes/openseaport.html#approvesemiornonfungibletoken","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":588,"kind":2048,"name":"approveFungibleToken","url":"classes/openseaport.html#approvefungibletoken","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":589,"kind":2048,"name":"unapproveFungibleToken","url":"classes/openseaport.html#unapprovefungibletoken","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":590,"kind":2048,"name":"getCurrentPrice","url":"classes/openseaport.html#getcurrentprice","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":591,"kind":2048,"name":"isOrderFulfillable","url":"classes/openseaport.html#isorderfulfillable","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":592,"kind":2048,"name":"isAssetTransferrable","url":"classes/openseaport.html#isassettransferrable","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":593,"kind":2048,"name":"transfer","url":"classes/openseaport.html#transfer","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":594,"kind":2048,"name":"transferAll","url":"classes/openseaport.html#transferall","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":595,"kind":2048,"name":"getFungibleTokens","url":"classes/openseaport.html#getfungibletokens","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":596,"kind":2048,"name":"getAssetBalance","url":"classes/openseaport.html#getassetbalance","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":597,"kind":2048,"name":"getTokenBalance","url":"classes/openseaport.html#gettokenbalance","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":598,"kind":2048,"name":"computeFees","url":"classes/openseaport.html#computefees","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":599,"kind":2048,"name":"validateAndPostOrder","url":"classes/openseaport.html#validateandpostorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":600,"kind":2048,"name":"_computeGasPrice","url":"classes/openseaport.html#_computegasprice","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":601,"kind":2048,"name":"_correctGasAmount","url":"classes/openseaport.html#_correctgasamount","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":602,"kind":2048,"name":"_estimateGasForMatch","url":"classes/openseaport.html#_estimategasformatch","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":603,"kind":2048,"name":"_estimateGasForTransfer","url":"classes/openseaport.html#_estimategasfortransfer","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":604,"kind":2048,"name":"_getProxy","url":"classes/openseaport.html#_getproxy","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":605,"kind":2048,"name":"_initializeProxy","url":"classes/openseaport.html#_initializeproxy","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":606,"kind":2048,"name":"_getApprovedTokenCount","url":"classes/openseaport.html#_getapprovedtokencount","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":607,"kind":2048,"name":"_makeBuyOrder","url":"classes/openseaport.html#_makebuyorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":608,"kind":2048,"name":"_makeSellOrder","url":"classes/openseaport.html#_makesellorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":609,"kind":2048,"name":"_getStaticCallTargetAndExtraData","url":"classes/openseaport.html#_getstaticcalltargetandextradata","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":610,"kind":2048,"name":"_makeBundleBuyOrder","url":"classes/openseaport.html#_makebundlebuyorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":611,"kind":2048,"name":"_makeBundleSellOrder","url":"classes/openseaport.html#_makebundlesellorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":612,"kind":2048,"name":"_makeMatchingOrder","url":"classes/openseaport.html#_makematchingorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":613,"kind":2048,"name":"_validateMatch","url":"classes/openseaport.html#_validatematch","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":614,"kind":2048,"name":"_createEmailWhitelistEntry","url":"classes/openseaport.html#_createemailwhitelistentry","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":615,"kind":2048,"name":"_sellOrderValidationAndApprovals","url":"classes/openseaport.html#_sellordervalidationandapprovals","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":616,"kind":2048,"name":"_approveOrder","url":"classes/openseaport.html#_approveorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":617,"kind":2048,"name":"_validateOrder","url":"classes/openseaport.html#_validateorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":618,"kind":2048,"name":"_approveAll","url":"classes/openseaport.html#_approveall","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":619,"kind":2048,"name":"_buyOrderValidationAndApprovals","url":"classes/openseaport.html#_buyordervalidationandapprovals","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":620,"kind":2048,"name":"_ownsAssetOnChain","url":"classes/openseaport.html#_ownsassetonchain","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":621,"kind":2048,"name":"_getBuyFeeParameters","url":"classes/openseaport.html#_getbuyfeeparameters","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":622,"kind":2048,"name":"_getSellFeeParameters","url":"classes/openseaport.html#_getsellfeeparameters","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaPort"},{"id":623,"kind":64,"name":"annotateERC721TransferABI","url":"globals.html#annotateerc721transferabi","classes":"tsd-kind-function"},{"id":624,"kind":64,"name":"annotateERC20TransferABI","url":"globals.html#annotateerc20transferabi","classes":"tsd-kind-function"},{"id":625,"kind":2097152,"name":"SCHEMA_NAME_TO_ASSET_CONTRACT_TYPE","url":"globals.html#schema_name_to_asset_contract_type","classes":"tsd-kind-object-literal tsd-is-not-exported"},{"id":626,"kind":32,"name":"__computed","url":"globals.html#schema_name_to_asset_contract_type.__computed","classes":"tsd-kind-variable tsd-parent-kind-object-literal tsd-is-not-exported","parent":"SCHEMA_NAME_TO_ASSET_CONTRACT_TYPE"},{"id":627,"kind":32,"name":"txCallbacks","url":"globals.html#txcallbacks","classes":"tsd-kind-variable tsd-is-not-exported"},{"id":628,"kind":65536,"name":"__type","url":"globals.html#txcallbacks.__type","classes":"tsd-kind-type-literal tsd-parent-kind-variable tsd-is-not-exported","parent":"txCallbacks"},{"id":629,"kind":64,"name":"promisify","url":"globals.html#promisify","classes":"tsd-kind-function tsd-has-type-parameter tsd-is-not-exported"},{"id":630,"kind":64,"name":"promisifyCall","url":"globals.html#promisifycall","classes":"tsd-kind-function tsd-has-type-parameter"},{"id":631,"kind":64,"name":"track","url":"globals.html#track","classes":"tsd-kind-function tsd-is-not-exported"},{"id":632,"kind":64,"name":"confirmTransaction","url":"globals.html#confirmtransaction","classes":"tsd-kind-function"},{"id":633,"kind":64,"name":"assetFromJSON","url":"globals.html#assetfromjson","classes":"tsd-kind-function"},{"id":634,"kind":64,"name":"assetEventFromJSON","url":"globals.html#asseteventfromjson","classes":"tsd-kind-function"},{"id":635,"kind":64,"name":"transactionFromJSON","url":"globals.html#transactionfromjson","classes":"tsd-kind-function"},{"id":636,"kind":64,"name":"accountFromJSON","url":"globals.html#accountfromjson","classes":"tsd-kind-function"},{"id":637,"kind":64,"name":"userFromJSON","url":"globals.html#userfromjson","classes":"tsd-kind-function"},{"id":638,"kind":64,"name":"assetBundleFromJSON","url":"globals.html#assetbundlefromjson","classes":"tsd-kind-function"},{"id":639,"kind":64,"name":"assetContractFromJSON","url":"globals.html#assetcontractfromjson","classes":"tsd-kind-function"},{"id":640,"kind":64,"name":"collectionFromJSON","url":"globals.html#collectionfromjson","classes":"tsd-kind-function"},{"id":641,"kind":64,"name":"tokenFromJSON","url":"globals.html#tokenfromjson","classes":"tsd-kind-function"},{"id":642,"kind":64,"name":"orderFromJSON","url":"globals.html#orderfromjson","classes":"tsd-kind-function"},{"id":643,"kind":64,"name":"orderToJSON","url":"globals.html#ordertojson","classes":"tsd-kind-function"},{"id":644,"kind":64,"name":"personalSignAsync","url":"globals.html#personalsignasync","classes":"tsd-kind-function"},{"id":645,"kind":64,"name":"isContractAddress","url":"globals.html#iscontractaddress","classes":"tsd-kind-function"},{"id":646,"kind":64,"name":"makeBigNumber","url":"globals.html#makebignumber","classes":"tsd-kind-function"},{"id":647,"kind":64,"name":"sendRawTransaction","url":"globals.html#sendrawtransaction","classes":"tsd-kind-function"},{"id":648,"kind":64,"name":"rawCall","url":"globals.html#rawcall","classes":"tsd-kind-function"},{"id":649,"kind":64,"name":"estimateGas","url":"globals.html#estimategas","classes":"tsd-kind-function"},{"id":650,"kind":64,"name":"getCurrentGasPrice","url":"globals.html#getcurrentgasprice","classes":"tsd-kind-function"},{"id":651,"kind":64,"name":"getTransferFeeSettings","url":"globals.html#gettransferfeesettings","classes":"tsd-kind-function"},{"id":652,"kind":64,"name":"parseSignatureHex","url":"globals.html#parsesignaturehex","classes":"tsd-kind-function tsd-is-not-exported"},{"id":653,"kind":64,"name":"estimateCurrentPrice","url":"globals.html#estimatecurrentprice","classes":"tsd-kind-function"},{"id":654,"kind":64,"name":"getWyvernAsset","url":"globals.html#getwyvernasset","classes":"tsd-kind-function"},{"id":655,"kind":64,"name":"getWyvernBundle","url":"globals.html#getwyvernbundle","classes":"tsd-kind-function"},{"id":656,"kind":64,"name":"getOrderHash","url":"globals.html#getorderhash","classes":"tsd-kind-function"},{"id":657,"kind":64,"name":"assignOrdersToSides","url":"globals.html#assignorderstosides","classes":"tsd-kind-function"},{"id":658,"kind":64,"name":"canSettleOrder","url":"globals.html#cansettleorder","classes":"tsd-kind-function tsd-is-not-exported"},{"id":659,"kind":64,"name":"delay","url":"globals.html#delay","classes":"tsd-kind-function"},{"id":660,"kind":64,"name":"validateAndFormatWalletAddress","url":"globals.html#validateandformatwalletaddress","classes":"tsd-kind-function"},{"id":661,"kind":64,"name":"onDeprecated","url":"globals.html#ondeprecated","classes":"tsd-kind-function"},{"id":662,"kind":64,"name":"getNonCompliantApprovalAddress","url":"globals.html#getnoncompliantapprovaladdress","classes":"tsd-kind-function"},{"id":663,"kind":128,"name":"OpenSeaAPI","url":"classes/openseaapi.html","classes":"tsd-kind-class"},{"id":664,"kind":1024,"name":"hostUrl","url":"classes/openseaapi.html#hosturl","classes":"tsd-kind-property tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":665,"kind":1024,"name":"apiBaseUrl","url":"classes/openseaapi.html#apibaseurl","classes":"tsd-kind-property tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":666,"kind":1024,"name":"pageSize","url":"classes/openseaapi.html#pagesize","classes":"tsd-kind-property tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":667,"kind":1024,"name":"logger","url":"classes/openseaapi.html#logger","classes":"tsd-kind-property tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":668,"kind":65536,"name":"__type","url":"classes/openseaapi.html#logger.__type","classes":"tsd-kind-type-literal tsd-parent-kind-property tsd-is-not-exported","parent":"OpenSeaAPI.logger"},{"id":669,"kind":512,"name":"constructor","url":"classes/openseaapi.html#constructor","classes":"tsd-kind-constructor tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":670,"kind":2048,"name":"postOrder","url":"classes/openseaapi.html#postorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":671,"kind":2048,"name":"postAssetWhitelist","url":"classes/openseaapi.html#postassetwhitelist","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":672,"kind":2048,"name":"getOrder","url":"classes/openseaapi.html#getorder","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":673,"kind":2048,"name":"getOrders","url":"classes/openseaapi.html#getorders","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":674,"kind":2048,"name":"getAsset","url":"classes/openseaapi.html#getasset","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":675,"kind":2048,"name":"getAssets","url":"classes/openseaapi.html#getassets","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":676,"kind":2048,"name":"getPaymentTokens","url":"classes/openseaapi.html#getpaymenttokens","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":677,"kind":2048,"name":"getBundle","url":"classes/openseaapi.html#getbundle","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":678,"kind":2048,"name":"getBundles","url":"classes/openseaapi.html#getbundles","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":679,"kind":2048,"name":"get","url":"classes/openseaapi.html#get","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":680,"kind":2048,"name":"post","url":"classes/openseaapi.html#post","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":681,"kind":2048,"name":"put","url":"classes/openseaapi.html#put","classes":"tsd-kind-method tsd-parent-kind-class","parent":"OpenSeaAPI"},{"id":682,"kind":64,"name":"_throwOrContinue","url":"globals.html#_throworcontinue","classes":"tsd-kind-function tsd-is-not-exported"},{"id":683,"kind":32,"name":"CheezeWizardsGuild","url":"globals.html#cheezewizardsguild","classes":"tsd-kind-variable"}]};
'''
'''--- docs/classes/openseaapi.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaAPI | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseaapi.html">OpenSeaAPI</a>
				</li>
			</ul>
			<h1>Class OpenSeaAPI</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">OpenSeaAPI</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Constructors</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-constructor tsd-parent-kind-class"><a href="openseaapi.html#constructor" class="tsd-kind-icon">constructor</a></li>
							</ul>
						</section>
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-class"><a href="openseaapi.html#apibaseurl" class="tsd-kind-icon">api<wbr>Base<wbr>Url</a></li>
								<li class="tsd-kind-property tsd-parent-kind-class"><a href="openseaapi.html#hosturl" class="tsd-kind-icon">host<wbr>Url</a></li>
								<li class="tsd-kind-property tsd-parent-kind-class"><a href="openseaapi.html#logger" class="tsd-kind-icon">logger</a></li>
								<li class="tsd-kind-property tsd-parent-kind-class"><a href="openseaapi.html#pagesize" class="tsd-kind-icon">page<wbr>Size</a></li>
							</ul>
						</section>
						<section class="tsd-index-section ">
							<h3>Methods</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaapi.html#get" class="tsd-kind-icon">get</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaapi.html#getasset" class="tsd-kind-icon">get<wbr>Asset</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaapi.html#getassets" class="tsd-kind-icon">get<wbr>Assets</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaapi.html#getbundle" class="tsd-kind-icon">get<wbr>Bundle</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaapi.html#getbundles" class="tsd-kind-icon">get<wbr>Bundles</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaapi.html#getorder" class="tsd-kind-icon">get<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaapi.html#getorders" class="tsd-kind-icon">get<wbr>Orders</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaapi.html#getpaymenttokens" class="tsd-kind-icon">get<wbr>Payment<wbr>Tokens</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaapi.html#post" class="tsd-kind-icon">post</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaapi.html#postassetwhitelist" class="tsd-kind-icon">post<wbr>Asset<wbr>Whitelist</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaapi.html#postorder" class="tsd-kind-icon">post<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaapi.html#put" class="tsd-kind-icon">put</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Constructors</h2>
				<section class="tsd-panel tsd-member tsd-kind-constructor tsd-parent-kind-class">
					<a name="constructor" class="tsd-anchor"></a>
					<h3>constructor</h3>
					<ul class="tsd-signatures tsd-kind-constructor tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">new <wbr>Open<wbr>SeaAPI<span class="tsd-signature-symbol">(</span>config<span class="tsd-signature-symbol">: </span><a href="../interfaces/openseaapiconfig.html" class="tsd-signature-type">OpenSeaAPIConfig</a>, logger<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">function</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="openseaapi.html" class="tsd-signature-type">OpenSeaAPI</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L53">api.ts:53</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>config: <a href="../interfaces/openseaapiconfig.html" class="tsd-signature-type">OpenSeaAPIConfig</a></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagOptional">Optional</span> logger: <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">function</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="openseaapi.html" class="tsd-signature-type">OpenSeaAPI</a></h4>
						</li>
					</ul>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-class">
					<a name="apibaseurl" class="tsd-anchor"></a>
					<h3>api<wbr>Base<wbr>Url</h3>
					<div class="tsd-signature tsd-kind-icon">api<wbr>Base<wbr>Url<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L43">api.ts:43</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-class">
					<a name="hosturl" class="tsd-anchor"></a>
					<h3>host<wbr>Url</h3>
					<div class="tsd-signature tsd-kind-icon">host<wbr>Url<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L39">api.ts:39</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-class">
					<a name="logger" class="tsd-anchor"></a>
					<h3>logger</h3>
					<div class="tsd-signature tsd-kind-icon">logger<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">function</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L51">api.ts:51</a></li>
						</ul>
					</aside>
					<div class="tsd-type-declaration">
						<h4>Type declaration</h4>
						<ul class="tsd-parameters">
							<li class="tsd-parameter-siganture">
								<ul class="tsd-signatures tsd-kind-type-literal tsd-parent-kind-property tsd-is-not-exported">
									<li class="tsd-signature tsd-kind-icon"><span class="tsd-signature-symbol">(</span>arg<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">void</span></li>
								</ul>
								<ul class="tsd-descriptions">
									<li class="tsd-description">
										<h4 class="tsd-parameters-title">Parameters</h4>
										<ul class="tsd-parameters">
											<li>
												<h5>arg: <span class="tsd-signature-type">string</span></h5>
											</li>
										</ul>
										<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">void</span></h4>
									</li>
								</ul>
							</li>
						</ul>
					</div>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-class">
					<a name="pagesize" class="tsd-anchor"></a>
					<h3>page<wbr>Size</h3>
					<div class="tsd-signature tsd-kind-icon">page<wbr>Size<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;20</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L47">api.ts:47</a></li>
						</ul>
					</aside>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Methods</h2>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="get" class="tsd-anchor"></a>
					<h3>get</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">get<span class="tsd-signature-symbol">(</span>apiPath<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, query<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L307">api.ts:307</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>apiPath: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> query: <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol"> =&nbsp;{}</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="getasset" class="tsd-anchor"></a>
					<h3>get<wbr>Asset</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Asset<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span>, retries<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/openseaasset.html" class="tsd-signature-type">OpenSeaAsset</a><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L191">api.ts:191</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>token<wbr>Id<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">null</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></h5>
										</li>
									</ul>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> retries: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;1</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/openseaasset.html" class="tsd-signature-type">OpenSeaAsset</a><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="getassets" class="tsd-anchor"></a>
					<h3>get<wbr>Assets</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Assets<span class="tsd-signature-symbol">(</span>query<span class="tsd-signature-symbol">?: </span><a href="../interfaces/openseaassetquery.html" class="tsd-signature-type">OpenSeaAssetQuery</a>, page<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L218">api.ts:218</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> query: <a href="../interfaces/openseaassetquery.html" class="tsd-signature-type">OpenSeaAssetQuery</a><span class="tsd-signature-symbol"> =&nbsp;{}</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> page: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;1</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="getbundle" class="tsd-anchor"></a>
					<h3>get<wbr>Bundle</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Bundle<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/openseaassetbundle.html" class="tsd-signature-type">OpenSeaAssetBundle</a><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L270">api.ts:270</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>slug<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/openseaassetbundle.html" class="tsd-signature-type">OpenSeaAssetBundle</a><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="getbundles" class="tsd-anchor"></a>
					<h3>get<wbr>Bundles</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Bundles<span class="tsd-signature-symbol">(</span>query<span class="tsd-signature-symbol">?: </span><a href="../interfaces/openseaassetbundlequery.html" class="tsd-signature-type">OpenSeaAssetBundleQuery</a>, page<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L285">api.ts:285</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> query: <a href="../interfaces/openseaassetbundlequery.html" class="tsd-signature-type">OpenSeaAssetBundleQuery</a><span class="tsd-signature-symbol"> =&nbsp;{}</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> page: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;1</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="getorder" class="tsd-anchor"></a>
					<h3>get<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Order<span class="tsd-signature-symbol">(</span>query<span class="tsd-signature-symbol">: </span><a href="../interfaces/orderquery.html" class="tsd-signature-type">OrderQuery</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L125">api.ts:125</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>query: <a href="../interfaces/orderquery.html" class="tsd-signature-type">OrderQuery</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="getorders" class="tsd-anchor"></a>
					<h3>get<wbr>Orders</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Orders<span class="tsd-signature-symbol">(</span>query<span class="tsd-signature-symbol">?: </span><a href="../interfaces/orderquery.html" class="tsd-signature-type">OrderQuery</a>, page<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L156">api.ts:156</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> query: <a href="../interfaces/orderquery.html" class="tsd-signature-type">OrderQuery</a><span class="tsd-signature-symbol"> =&nbsp;{}</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> page: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;1</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="getpaymenttokens" class="tsd-anchor"></a>
					<h3>get<wbr>Payment<wbr>Tokens</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Payment<wbr>Tokens<span class="tsd-signature-symbol">(</span>query<span class="tsd-signature-symbol">?: </span><a href="../interfaces/openseafungibletokenquery.html" class="tsd-signature-type">OpenSeaFungibleTokenQuery</a>, page<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span>, retries<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L242">api.ts:242</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> query: <a href="../interfaces/openseafungibletokenquery.html" class="tsd-signature-type">OpenSeaFungibleTokenQuery</a><span class="tsd-signature-symbol"> =&nbsp;{}</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> page: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;1</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> retries: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;1</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="post" class="tsd-anchor"></a>
					<h3>post</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">post<span class="tsd-signature-symbol">(</span>apiPath<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, body<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">object</span>, opts<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">RequestInit</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L323">api.ts:323</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>apiPath: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagOptional">Optional</span> body: <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">object</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> opts: <span class="tsd-signature-type">RequestInit</span><span class="tsd-signature-symbol"> =&nbsp;{}</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="postassetwhitelist" class="tsd-anchor"></a>
					<h3>post<wbr>Asset<wbr>Whitelist</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">post<wbr>Asset<wbr>Whitelist<span class="tsd-signature-symbol">(</span>tokenAddress<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, tokenId<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span>, email<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L107">api.ts:107</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>tokenAddress: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5>tokenId: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></h5>
								</li>
								<li>
									<h5>email: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="postorder" class="tsd-anchor"></a>
					<h3>post<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">post<wbr>Order<span class="tsd-signature-symbol">(</span>order<span class="tsd-signature-symbol">: </span><a href="../interfaces/orderjson.html" class="tsd-signature-type">OrderJSON</a>, retries<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L86">api.ts:86</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>order: <a href="../interfaces/orderjson.html" class="tsd-signature-type">OrderJSON</a></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> retries: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;2</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="put" class="tsd-anchor"></a>
					<h3>put</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">put<span class="tsd-signature-symbol">(</span>apiPath<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, body<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span>, opts<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">RequestInit</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L346">api.ts:346</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>apiPath: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5>body: <span class="tsd-signature-type">object</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> opts: <span class="tsd-signature-type">RequestInit</span><span class="tsd-signature-symbol"> =&nbsp;{}</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-class">
						<a href="openseaapi.html" class="tsd-kind-icon">Open<wbr>SeaAPI</a>
						<ul>
							<li class=" tsd-kind-constructor tsd-parent-kind-class">
								<a href="openseaapi.html#constructor" class="tsd-kind-icon">constructor</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-class">
								<a href="openseaapi.html#apibaseurl" class="tsd-kind-icon">api<wbr>Base<wbr>Url</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-class">
								<a href="openseaapi.html#hosturl" class="tsd-kind-icon">host<wbr>Url</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-class">
								<a href="openseaapi.html#logger" class="tsd-kind-icon">logger</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-class">
								<a href="openseaapi.html#pagesize" class="tsd-kind-icon">page<wbr>Size</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaapi.html#get" class="tsd-kind-icon">get</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaapi.html#getasset" class="tsd-kind-icon">get<wbr>Asset</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaapi.html#getassets" class="tsd-kind-icon">get<wbr>Assets</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaapi.html#getbundle" class="tsd-kind-icon">get<wbr>Bundle</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaapi.html#getbundles" class="tsd-kind-icon">get<wbr>Bundles</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaapi.html#getorder" class="tsd-kind-icon">get<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaapi.html#getorders" class="tsd-kind-icon">get<wbr>Orders</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaapi.html#getpaymenttokens" class="tsd-kind-icon">get<wbr>Payment<wbr>Tokens</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaapi.html#post" class="tsd-kind-icon">post</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaapi.html#postassetwhitelist" class="tsd-kind-icon">post<wbr>Asset<wbr>Whitelist</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaapi.html#postorder" class="tsd-kind-icon">post<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaapi.html#put" class="tsd-kind-icon">put</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/classes/openseaport.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaPort | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseaport.html">OpenSeaPort</a>
				</li>
			</ul>
			<h1>Class OpenSeaPort</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">OpenSeaPort</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Constructors</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-constructor tsd-parent-kind-class"><a href="openseaport.html#constructor" class="tsd-kind-icon">constructor</a></li>
							</ul>
						</section>
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-class"><a href="openseaport.html#api" class="tsd-kind-icon">api</a></li>
								<li class="tsd-kind-property tsd-parent-kind-class"><a href="openseaport.html#gasincreasefactor" class="tsd-kind-icon">gas<wbr>Increase<wbr>Factor</a></li>
								<li class="tsd-kind-property tsd-parent-kind-class"><a href="openseaport.html#gaspriceaddition" class="tsd-kind-icon">gas<wbr>Price<wbr>Addition</a></li>
								<li class="tsd-kind-property tsd-parent-kind-class"><a href="openseaport.html#logger" class="tsd-kind-icon">logger</a></li>
								<li class="tsd-kind-property tsd-parent-kind-class"><a href="openseaport.html#web3" class="tsd-kind-icon">web3</a></li>
								<li class="tsd-kind-property tsd-parent-kind-class"><a href="openseaport.html#web3readonly" class="tsd-kind-icon">web3<wbr>Read<wbr>Only</a></li>
							</ul>
						</section>
						<section class="tsd-index-section ">
							<h3>Methods</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_approveall" class="tsd-kind-icon">_approve<wbr>All</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_approveorder" class="tsd-kind-icon">_approve<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_buyordervalidationandapprovals" class="tsd-kind-icon">_buy<wbr>Order<wbr>Validation<wbr>And<wbr>Approvals</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_computegasprice" class="tsd-kind-icon">_compute<wbr>Gas<wbr>Price</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_correctgasamount" class="tsd-kind-icon">_correct<wbr>Gas<wbr>Amount</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_createemailwhitelistentry" class="tsd-kind-icon">_create<wbr>Email<wbr>Whitelist<wbr>Entry</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_estimategasformatch" class="tsd-kind-icon">_estimate<wbr>Gas<wbr>For<wbr>Match</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_estimategasfortransfer" class="tsd-kind-icon">_estimate<wbr>Gas<wbr>For<wbr>Transfer</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_getapprovedtokencount" class="tsd-kind-icon">_get<wbr>Approved<wbr>Token<wbr>Count</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_getbuyfeeparameters" class="tsd-kind-icon">_get<wbr>Buy<wbr>Fee<wbr>Parameters</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_getproxy" class="tsd-kind-icon">_get<wbr>Proxy</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_getsellfeeparameters" class="tsd-kind-icon">_get<wbr>Sell<wbr>Fee<wbr>Parameters</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_getstaticcalltargetandextradata" class="tsd-kind-icon">_get<wbr>Static<wbr>Call<wbr>Target<wbr>And<wbr>Extra<wbr>Data</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_initializeproxy" class="tsd-kind-icon">_initialize<wbr>Proxy</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_makebundlebuyorder" class="tsd-kind-icon">_make<wbr>Bundle<wbr>Buy<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_makebundlesellorder" class="tsd-kind-icon">_make<wbr>Bundle<wbr>Sell<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_makebuyorder" class="tsd-kind-icon">_make<wbr>Buy<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_makematchingorder" class="tsd-kind-icon">_make<wbr>Matching<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_makesellorder" class="tsd-kind-icon">_make<wbr>Sell<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_ownsassetonchain" class="tsd-kind-icon">_owns<wbr>Asset<wbr>OnChain</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_sellordervalidationandapprovals" class="tsd-kind-icon">_sell<wbr>Order<wbr>Validation<wbr>And<wbr>Approvals</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_validatematch" class="tsd-kind-icon">_validate<wbr>Match</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#_validateorder" class="tsd-kind-icon">_validate<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#addlistener" class="tsd-kind-icon">add<wbr>Listener</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#approvefungibletoken" class="tsd-kind-icon">approve<wbr>Fungible<wbr>Token</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#approvesemiornonfungibletoken" class="tsd-kind-icon">approve<wbr>Semi<wbr>OrNon<wbr>Fungible<wbr>Token</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#cancelorder" class="tsd-kind-icon">cancel<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#computefees" class="tsd-kind-icon">compute<wbr>Fees</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#createbundlebuyorder" class="tsd-kind-icon">create<wbr>Bundle<wbr>Buy<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#createbundlesellorder" class="tsd-kind-icon">create<wbr>Bundle<wbr>Sell<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#createbuyorder" class="tsd-kind-icon">create<wbr>Buy<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#createfactorysellorders" class="tsd-kind-icon">create<wbr>Factory<wbr>Sell<wbr>Orders</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#createsellorder" class="tsd-kind-icon">create<wbr>Sell<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#fulfillorder" class="tsd-kind-icon">fulfill<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#getassetbalance" class="tsd-kind-icon">get<wbr>Asset<wbr>Balance</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#getcurrentprice" class="tsd-kind-icon">get<wbr>Current<wbr>Price</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#getfungibletokens" class="tsd-kind-icon">get<wbr>Fungible<wbr>Tokens</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#getquotefromuniswap" class="tsd-kind-icon">get<wbr>Quote<wbr>From<wbr>Uniswap</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#gettokenbalance" class="tsd-kind-icon">get<wbr>Token<wbr>Balance</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#isassettransferrable" class="tsd-kind-icon">is<wbr>Asset<wbr>Transferrable</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#isorderfulfillable" class="tsd-kind-icon">is<wbr>Order<wbr>Fulfillable</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#liquidateassets" class="tsd-kind-icon">liquidate<wbr>Assets</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#purchaseassets" class="tsd-kind-icon">purchase<wbr>Assets</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#removealllisteners" class="tsd-kind-icon">remove<wbr>All<wbr>Listeners</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#removelistener" class="tsd-kind-icon">remove<wbr>Listener</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#transfer" class="tsd-kind-icon">transfer</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#transferall" class="tsd-kind-icon">transfer<wbr>All</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#unapprovefungibletoken" class="tsd-kind-icon">unapprove<wbr>Fungible<wbr>Token</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#unwrapassets" class="tsd-kind-icon">unwrap<wbr>Assets</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#unwrapweth" class="tsd-kind-icon">unwrap<wbr>Weth</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#validateandpostorder" class="tsd-kind-icon">validate<wbr>And<wbr>Post<wbr>Order</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#wrapassets" class="tsd-kind-icon">wrap<wbr>Assets</a></li>
								<li class="tsd-kind-method tsd-parent-kind-class"><a href="openseaport.html#wrapeth" class="tsd-kind-icon">wrap<wbr>Eth</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Constructors</h2>
				<section class="tsd-panel tsd-member tsd-kind-constructor tsd-parent-kind-class">
					<a name="constructor" class="tsd-anchor"></a>
					<h3>constructor</h3>
					<ul class="tsd-signatures tsd-kind-constructor tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">new <wbr>Open<wbr>Sea<wbr>Port<span class="tsd-signature-symbol">(</span>provider<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Provider</span>, apiConfig<span class="tsd-signature-symbol">?: </span><a href="../interfaces/openseaapiconfig.html" class="tsd-signature-type">OpenSeaAPIConfig</a>, logger<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">function</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="openseaport.html" class="tsd-signature-type">OpenSeaPort</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L98">seaport.ts:98</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>provider: <span class="tsd-signature-type">Provider</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> apiConfig: <a href="../interfaces/openseaapiconfig.html" class="tsd-signature-type">OpenSeaAPIConfig</a><span class="tsd-signature-symbol"> =&nbsp;{}</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagOptional">Optional</span> logger: <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">function</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="openseaport.html" class="tsd-signature-type">OpenSeaPort</a></h4>
						</li>
					</ul>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-class">
					<a name="api" class="tsd-anchor"></a>
					<h3>api</h3>
					<div class="tsd-signature tsd-kind-icon">api<span class="tsd-signature-symbol">:</span> <a href="openseaapi.html" class="tsd-signature-type">OpenSeaAPI</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L86">seaport.ts:86</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-class">
					<a name="gasincreasefactor" class="tsd-anchor"></a>
					<h3>gas<wbr>Increase<wbr>Factor</h3>
					<div class="tsd-signature tsd-kind-icon">gas<wbr>Increase<wbr>Factor<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;DEFAULT_GAS_INCREASE_FACTOR</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L90">seaport.ts:90</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-class">
					<a name="gaspriceaddition" class="tsd-anchor"></a>
					<h3>gas<wbr>Price<wbr>Addition</h3>
					<div class="tsd-signature tsd-kind-icon">gas<wbr>Price<wbr>Addition<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol"> =&nbsp;new BigNumber(3)</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L88">seaport.ts:88</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-class">
					<a name="logger" class="tsd-anchor"></a>
					<h3>logger</h3>
					<div class="tsd-signature tsd-kind-icon">logger<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">function</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L84">seaport.ts:84</a></li>
						</ul>
					</aside>
					<div class="tsd-type-declaration">
						<h4>Type declaration</h4>
						<ul class="tsd-parameters">
							<li class="tsd-parameter-siganture">
								<ul class="tsd-signatures tsd-kind-type-literal tsd-parent-kind-property tsd-is-not-exported">
									<li class="tsd-signature tsd-kind-icon"><span class="tsd-signature-symbol">(</span>arg<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">void</span></li>
								</ul>
								<ul class="tsd-descriptions">
									<li class="tsd-description">
										<h4 class="tsd-parameters-title">Parameters</h4>
										<ul class="tsd-parameters">
											<li>
												<h5>arg: <span class="tsd-signature-type">string</span></h5>
											</li>
										</ul>
										<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">void</span></h4>
									</li>
								</ul>
							</li>
						</ul>
					</div>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-class">
					<a name="web3" class="tsd-anchor"></a>
					<h3>web3</h3>
					<div class="tsd-signature tsd-kind-icon">web3<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Web3</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L81">seaport.ts:81</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-class">
					<a name="web3readonly" class="tsd-anchor"></a>
					<h3>web3<wbr>Read<wbr>Only</h3>
					<div class="tsd-signature tsd-kind-icon">web3<wbr>Read<wbr>Only<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Web3</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L82">seaport.ts:82</a></li>
						</ul>
					</aside>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Methods</h2>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_approveall" class="tsd-anchor"></a>
					<h3>_approve<wbr>All</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_approve<wbr>All<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-symbol">(</span><span class="tsd-signature-type">null</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L2563">seaport.ts:2563</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>proxy<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>schema<wbr>Names<span class="tsd-signature-symbol">: </span><a href="../enums/wyvernschemaname.html" class="tsd-signature-type">WyvernSchemaName</a><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>wy<wbr>Assets<span class="tsd-signature-symbol">: </span><span class="tsd-signature-symbol">(</span><a href="../interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="../interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">[]</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-symbol">(</span><span class="tsd-signature-type">null</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_approveorder" class="tsd-anchor"></a>
					<h3>_approve<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_approve<wbr>Order<span class="tsd-signature-symbol">(</span>order<span class="tsd-signature-symbol">: </span><a href="../interfaces/unsignedorder.html" class="tsd-signature-type">UnsignedOrder</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L2514">seaport.ts:2514</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>order: <a href="../interfaces/unsignedorder.html" class="tsd-signature-type">UnsignedOrder</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></h4>
							<p>Transaction hash of the approval transaction</p>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_buyordervalidationandapprovals" class="tsd-anchor"></a>
					<h3>_buy<wbr>Order<wbr>Validation<wbr>And<wbr>Approvals</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_buy<wbr>Order<wbr>Validation<wbr>And<wbr>Approvals<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L2646">seaport.ts:2646</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>counter<wbr>Order<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>order<span class="tsd-signature-symbol">: </span><a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_computegasprice" class="tsd-anchor"></a>
					<h3>_compute<wbr>Gas<wbr>Price</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_compute<wbr>Gas<wbr>Price<span class="tsd-signature-symbol">(</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1702">seaport.ts:1702</a></li>
								</ul>
							</aside>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_correctgasamount" class="tsd-anchor"></a>
					<h3>_correct<wbr>Gas<wbr>Amount</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_correct<wbr>Gas<wbr>Amount<span class="tsd-signature-symbol">(</span>estimation<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1713">seaport.ts:1713</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>estimation: <span class="tsd-signature-type">number</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">number</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_createemailwhitelistentry" class="tsd-anchor"></a>
					<h3>_create<wbr>Email<wbr>Whitelist<wbr>Entry</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_create<wbr>Email<wbr>Whitelist<wbr>Entry<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L2448">seaport.ts:2448</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>buyer<wbr>Email<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>order<span class="tsd-signature-symbol">: </span><a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_estimategasformatch" class="tsd-anchor"></a>
					<h3>_estimate<wbr>Gas<wbr>For<wbr>Match</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_estimate<wbr>Gas<wbr>For<wbr>Match<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span>, retries<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1726">seaport.ts:1726</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>buy<span class="tsd-signature-symbol">: </span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>metadata<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>sell<span class="tsd-signature-symbol">: </span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a></h5>
										</li>
									</ul>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> retries: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;1</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_estimategasfortransfer" class="tsd-anchor"></a>
					<h3>_estimate<wbr>Gas<wbr>For<wbr>Transfer</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_estimate<wbr>Gas<wbr>For<wbr>Transfer<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1784">seaport.ts:1784</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>assets<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>from<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>schema<wbr>Name<span class="tsd-signature-symbol">: </span><a href="../enums/wyvernschemaname.html" class="tsd-signature-type">WyvernSchemaName</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>to<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_getapprovedtokencount" class="tsd-anchor"></a>
					<h3>_get<wbr>Approved<wbr>Token<wbr>Count</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_get<wbr>Approved<wbr>Token<wbr>Count<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1877">seaport.ts:1877</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>proxy<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_getbuyfeeparameters" class="tsd-anchor"></a>
					<h3>_get<wbr>Buy<wbr>Fee<wbr>Parameters</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_get<wbr>Buy<wbr>Fee<wbr>Parameters<span class="tsd-signature-symbol">(</span>totalBuyerFeeBasisPoints<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span>, totalSellerFeeBasisPoints<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span>, sellOrder<span class="tsd-signature-symbol">?: </span><a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L2730">seaport.ts:2730</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>totalBuyerFeeBasisPoints: <span class="tsd-signature-type">number</span></h5>
								</li>
								<li>
									<h5>totalSellerFeeBasisPoints: <span class="tsd-signature-type">number</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagOptional">Optional</span> sellOrder: <a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">object</span></h4>
							<ul class="tsd-parameters">
								<li class="tsd-parameter">
									<h5>fee<wbr>Method<span class="tsd-signature-symbol">: </span><a href="../enums/feemethod.html" class="tsd-signature-type">FeeMethod</a></h5>
								</li>
								<li class="tsd-parameter">
									<h5>fee<wbr>Recipient<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>maker<wbr>Protocol<wbr>Fee<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">BigNumber</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>maker<wbr>Referrer<wbr>Fee<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">BigNumber</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>maker<wbr>Relayer<wbr>Fee<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">BigNumber</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>taker<wbr>Protocol<wbr>Fee<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">BigNumber</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>taker<wbr>Relayer<wbr>Fee<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">BigNumber</span></h5>
								</li>
							</ul>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_getproxy" class="tsd-anchor"></a>
					<h3>_get<wbr>Proxy</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_get<wbr>Proxy<span class="tsd-signature-symbol">(</span>accountAddress<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, retries<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1817">seaport.ts:1817</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>accountAddress: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> retries: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;0</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_getsellfeeparameters" class="tsd-anchor"></a>
					<h3>_get<wbr>Sell<wbr>Fee<wbr>Parameters</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_get<wbr>Sell<wbr>Fee<wbr>Parameters<span class="tsd-signature-symbol">(</span>totalBuyerFeeBasisPoints<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span>, totalSellerFeeBasisPoints<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span>, waitForHighestBid<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span>, sellerBountyBasisPoints<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L2764">seaport.ts:2764</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>totalBuyerFeeBasisPoints: <span class="tsd-signature-type">number</span></h5>
								</li>
								<li>
									<h5>totalSellerFeeBasisPoints: <span class="tsd-signature-type">number</span></h5>
								</li>
								<li>
									<h5>waitForHighestBid: <span class="tsd-signature-type">boolean</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> sellerBountyBasisPoints: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;0</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">object</span></h4>
							<ul class="tsd-parameters">
								<li class="tsd-parameter">
									<h5>fee<wbr>Method<span class="tsd-signature-symbol">: </span><a href="../enums/feemethod.html" class="tsd-signature-type">FeeMethod</a></h5>
								</li>
								<li class="tsd-parameter">
									<h5>fee<wbr>Recipient<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>maker<wbr>Protocol<wbr>Fee<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">BigNumber</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>maker<wbr>Referrer<wbr>Fee<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">BigNumber</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>maker<wbr>Relayer<wbr>Fee<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">BigNumber</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>taker<wbr>Protocol<wbr>Fee<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">BigNumber</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>taker<wbr>Relayer<wbr>Fee<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">BigNumber</span></h5>
								</li>
							</ul>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_getstaticcalltargetandextradata" class="tsd-anchor"></a>
					<h3>_get<wbr>Static<wbr>Call<wbr>Target<wbr>And<wbr>Extra<wbr>Data</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_get<wbr>Static<wbr>Call<wbr>Target<wbr>And<wbr>Extra<wbr>Data<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L2062">seaport.ts:2062</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>asset<span class="tsd-signature-symbol">: </span><a href="../interfaces/openseaasset.html" class="tsd-signature-type">OpenSeaAsset</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>use<wbr>Txn<wbr>Origin<wbr>Static<wbr>Call<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_initializeproxy" class="tsd-anchor"></a>
					<h3>_initialize<wbr>Proxy</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_initialize<wbr>Proxy<span class="tsd-signature-symbol">(</span>accountAddress<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1841">seaport.ts:1841</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>accountAddress: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_makebundlebuyorder" class="tsd-anchor"></a>
					<h3>_make<wbr>Bundle<wbr>Buy<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_make<wbr>Bundle<wbr>Buy<wbr>Order<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L2138">seaport.ts:2138</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>assets<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>collection<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">object</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>expiration<wbr>Time<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>extra<wbr>Bounty<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>payment<wbr>Token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>quantities<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>referrer<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>sell<wbr>Order<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>start<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_makebundlesellorder" class="tsd-anchor"></a>
					<h3>_make<wbr>Bundle<wbr>Sell<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_make<wbr>Bundle<wbr>Sell<wbr>Order<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L2217">seaport.ts:2217</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>assets<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>bundle<wbr>Description<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>bundle<wbr>External<wbr>Link<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>bundle<wbr>Name<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>buyer<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>collection<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">object</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>end<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>english<wbr>Auction<wbr>Reserve<wbr>Price<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>expiration<wbr>Time<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>extra<wbr>Bounty<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>listing<wbr>Time<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>payment<wbr>Token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>quantities<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>start<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>wait<wbr>For<wbr>Highest<wbr>Bid<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_makebuyorder" class="tsd-anchor"></a>
					<h3>_make<wbr>Buy<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_make<wbr>Buy<wbr>Order<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1897">seaport.ts:1897</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>asset<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>expiration<wbr>Time<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>extra<wbr>Bounty<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>payment<wbr>Token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>quantity<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>referrer<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>sell<wbr>Order<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>start<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_makematchingorder" class="tsd-anchor"></a>
					<h3>_make<wbr>Matching<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_make<wbr>Matching<wbr>Order<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="../interfaces/unsignedorder.html" class="tsd-signature-type">UnsignedOrder</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L2308">seaport.ts:2308</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>order<span class="tsd-signature-symbol">: </span><a href="../interfaces/unsignedorder.html" class="tsd-signature-type">UnsignedOrder</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>recipient<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="../interfaces/unsignedorder.html" class="tsd-signature-type">UnsignedOrder</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_makesellorder" class="tsd-anchor"></a>
					<h3>_make<wbr>Sell<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_make<wbr>Sell<wbr>Order<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1978">seaport.ts:1978</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>asset<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>buyer<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>end<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>english<wbr>Auction<wbr>Reserve<wbr>Price<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>expiration<wbr>Time<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>extra<wbr>Bounty<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>listing<wbr>Time<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>payment<wbr>Token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>quantity<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>start<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>wait<wbr>For<wbr>Highest<wbr>Bid<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_ownsassetonchain" class="tsd-anchor"></a>
					<h3>_owns<wbr>Asset<wbr>OnChain</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_owns<wbr>Asset<wbr>OnChain<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L2699">seaport.ts:2699</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>proxy<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>schema<wbr>Name<span class="tsd-signature-symbol">: </span><a href="../enums/wyvernschemaname.html" class="tsd-signature-type">WyvernSchemaName</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>wy<wbr>Asset<span class="tsd-signature-symbol">: </span><a href="../interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="../interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_sellordervalidationandapprovals" class="tsd-anchor"></a>
					<h3>_sell<wbr>Order<wbr>Validation<wbr>And<wbr>Approvals</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_sell<wbr>Order<wbr>Validation<wbr>And<wbr>Approvals<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L2463">seaport.ts:2463</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>order<span class="tsd-signature-symbol">: </span><a href="../interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_validatematch" class="tsd-anchor"></a>
					<h3>_validate<wbr>Match</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_validate<wbr>Match<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span>, retries<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L2400">seaport.ts:2400</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>buy<span class="tsd-signature-symbol">: </span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>sell<span class="tsd-signature-symbol">: </span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>should<wbr>Validate<wbr>Buy<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>should<wbr>Validate<wbr>Sell<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span></h5>
										</li>
									</ul>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> retries: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;1</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="_validateorder" class="tsd-anchor"></a>
					<h3>_validate<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">_validate<wbr>Order<span class="tsd-signature-symbol">(</span>order<span class="tsd-signature-symbol">: </span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L2543">seaport.ts:2543</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>order: <a href="../interfaces/order.html" class="tsd-signature-type">Order</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="addlistener" class="tsd-anchor"></a>
					<h3>add<wbr>Listener</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">add<wbr>Listener<span class="tsd-signature-symbol">(</span>event<span class="tsd-signature-symbol">: </span><a href="../enums/eventtype.html" class="tsd-signature-type">EventType</a>, listener<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">function</span>, once<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">EventSubscription</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L154">seaport.ts:154</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>event: <a href="../enums/eventtype.html" class="tsd-signature-type">EventType</a></h5>
								</li>
								<li>
									<h5>listener: <span class="tsd-signature-type">function</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter-siganture">
											<ul class="tsd-signatures tsd-kind-type-literal tsd-is-not-exported">
												<li class="tsd-signature tsd-kind-icon"><span class="tsd-signature-symbol">(</span>data<span class="tsd-signature-symbol">: </span><a href="../interfaces/eventdata.html" class="tsd-signature-type">EventData</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">void</span></li>
											</ul>
											<ul class="tsd-descriptions">
												<li class="tsd-description">
													<h4 class="tsd-parameters-title">Parameters</h4>
													<ul class="tsd-parameters">
														<li>
															<h5>data: <a href="../interfaces/eventdata.html" class="tsd-signature-type">EventData</a></h5>
														</li>
													</ul>
													<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">void</span></h4>
												</li>
											</ul>
										</li>
									</ul>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> once: <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol"> =&nbsp;false</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">EventSubscription</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="approvefungibletoken" class="tsd-anchor"></a>
					<h3>approve<wbr>Fungible<wbr>Token</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">approve<wbr>Fungible<wbr>Token<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1121">seaport.ts:1121</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>minimum<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>proxy<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span><span class="tsd-signature-symbol">&gt;</span></h4>
							<p>Transaction hash if a new transaction occurred, otherwise null</p>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="approvesemiornonfungibletoken" class="tsd-anchor"></a>
					<h3>approve<wbr>Semi<wbr>OrNon<wbr>Fungible<wbr>Token</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">approve<wbr>Semi<wbr>OrNon<wbr>Fungible<wbr>Token<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L971">seaport.ts:971</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>proxy<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>schema<wbr>Name<span class="tsd-signature-symbol">: </span><a href="../enums/wyvernschemaname.html" class="tsd-signature-type">WyvernSchemaName</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>skip<wbr>Approve<wbr>All<wbr>IfToken<wbr>Address<wbr>In<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Set</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>token<wbr>Abi<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>token<wbr>Id<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span><span class="tsd-signature-symbol">&gt;</span></h4>
							<p>Transaction hash if a new transaction was created, otherwise null</p>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="cancelorder" class="tsd-anchor"></a>
					<h3>cancel<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">cancel<wbr>Order<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L923">seaport.ts:923</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>order<span class="tsd-signature-symbol">: </span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="computefees" class="tsd-anchor"></a>
					<h3>compute<wbr>Fees</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">compute<wbr>Fees<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/computedfees.html" class="tsd-signature-type">ComputedFees</a><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1586">seaport.ts:1586</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>asset<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><a href="../interfaces/openseaasset.html" class="tsd-signature-type">OpenSeaAsset</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>extra<wbr>Bounty<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>is<wbr>Private<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>side<span class="tsd-signature-symbol">: </span><a href="../enums/orderside.html" class="tsd-signature-type">OrderSide</a></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/computedfees.html" class="tsd-signature-type">ComputedFees</a><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="createbundlebuyorder" class="tsd-anchor"></a>
					<h3>create<wbr>Bundle<wbr>Buy<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">create<wbr>Bundle<wbr>Buy<wbr>Order<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L469">seaport.ts:469</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>assets<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>collection<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">object</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>expiration<wbr>Time<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>payment<wbr>Token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>quantities<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>referrer<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>sell<wbr>Order<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>start<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="createbundlesellorder" class="tsd-anchor"></a>
					<h3>create<wbr>Bundle<wbr>Sell<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">create<wbr>Bundle<wbr>Sell<wbr>Order<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L819">seaport.ts:819</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>assets<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>bundle<wbr>Description<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>bundle<wbr>External<wbr>Link<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>bundle<wbr>Name<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>buyer<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>collection<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">object</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>end<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>english<wbr>Auction<wbr>Reserve<wbr>Price<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>expiration<wbr>Time<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>extra<wbr>Bounty<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>listing<wbr>Time<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>payment<wbr>Token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>quantities<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>start<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>wait<wbr>For<wbr>Highest<wbr>Bid<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="createbuyorder" class="tsd-anchor"></a>
					<h3>create<wbr>Buy<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">create<wbr>Buy<wbr>Order<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L537">seaport.ts:537</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>asset<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>expiration<wbr>Time<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>payment<wbr>Token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>quantity<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>referrer<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>sell<wbr>Order<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>start<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="createfactorysellorders" class="tsd-anchor"></a>
					<h3>create<wbr>Factory<wbr>Sell<wbr>Orders</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">create<wbr>Factory<wbr>Sell<wbr>Orders<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L687">seaport.ts:687</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>assets<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>buyer<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>buyer<wbr>Email<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>end<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>expiration<wbr>Time<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>extra<wbr>Bounty<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>listing<wbr>Time<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>number<wbr>OfOrders<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>payment<wbr>Token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>quantity<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>start<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>wait<wbr>For<wbr>Highest<wbr>Bid<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">&gt;</span></h4>
							<p>The number of orders created in total</p>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="createsellorder" class="tsd-anchor"></a>
					<h3>create<wbr>Sell<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">create<wbr>Sell<wbr>Order<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L608">seaport.ts:608</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>asset<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>buyer<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>buyer<wbr>Email<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>end<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>english<wbr>Auction<wbr>Reserve<wbr>Price<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>expiration<wbr>Time<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>extra<wbr>Bounty<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>listing<wbr>Time<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>payment<wbr>Token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>quantity<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>start<wbr>Amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>wait<wbr>For<wbr>Highest<wbr>Bid<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="fulfillorder" class="tsd-anchor"></a>
					<h3>fulfill<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">fulfill<wbr>Order<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L892">seaport.ts:892</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>order<span class="tsd-signature-symbol">: </span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>recipient<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>referrer<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></h4>
							<p>Transaction hash for fulfilling the order</p>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="getassetbalance" class="tsd-anchor"></a>
					<h3>get<wbr>Asset<wbr>Balance</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Asset<wbr>Balance<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span>, retries<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1500">seaport.ts:1500</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>asset<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a></h5>
										</li>
									</ul>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> retries: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;1</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="getcurrentprice" class="tsd-anchor"></a>
					<h3>get<wbr>Current<wbr>Price</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Current<wbr>Price<span class="tsd-signature-symbol">(</span>order<span class="tsd-signature-symbol">: </span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1230">seaport.ts:1230</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>order: <a href="../interfaces/order.html" class="tsd-signature-type">Order</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="getfungibletokens" class="tsd-anchor"></a>
					<h3>get<wbr>Fungible<wbr>Tokens</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Fungible<wbr>Tokens<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/openseafungibletoken.html" class="tsd-signature-type">OpenSeaFungibleToken</a><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1458">seaport.ts:1458</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> __namedParameters: <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol"> =&nbsp;{}</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>name<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>symbol<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/openseafungibletoken.html" class="tsd-signature-type">OpenSeaFungibleToken</a><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="getquotefromuniswap" class="tsd-anchor"></a>
					<h3>get<wbr>Quote<wbr>From<wbr>Uniswap</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Quote<wbr>From<wbr>Uniswap<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L358">seaport.ts:358</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>contract<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>is<wbr>Buying<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>num<wbr>Tokens<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="gettokenbalance" class="tsd-anchor"></a>
					<h3>get<wbr>Token<wbr>Balance</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Token<wbr>Balance<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span>, retries<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1561">seaport.ts:1561</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>schema<wbr>Name<span class="tsd-signature-symbol">: </span><a href="../enums/wyvernschemaname.html" class="tsd-signature-type">WyvernSchemaName</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
									</ul>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> retries: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;1</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="isassettransferrable" class="tsd-anchor"></a>
					<h3>is<wbr>Asset<wbr>Transferrable</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">is<wbr>Asset<wbr>Transferrable<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span>, retries<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1296">seaport.ts:1296</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>asset<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>from<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>quantity<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">BigNumber</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>to<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>use<wbr>Proxy<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span></h5>
										</li>
									</ul>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> retries: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;1</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="isorderfulfillable" class="tsd-anchor"></a>
					<h3>is<wbr>Order<wbr>Fulfillable</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">is<wbr>Order<wbr>Fulfillable<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1257">seaport.ts:1257</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>order<span class="tsd-signature-symbol">: </span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>recipient<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>referrer<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="liquidateassets" class="tsd-anchor"></a>
					<h3>liquidate<wbr>Assets</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">liquidate<wbr>Assets<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L277">seaport.ts:277</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>assets<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>uniswap<wbr>Slippage<wbr>Allowed<wbr>InBasis<wbr>Points<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="purchaseassets" class="tsd-anchor"></a>
					<h3>purchase<wbr>Assets</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">purchase<wbr>Assets<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L324">seaport.ts:324</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>amount<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">BigNumber</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>contract<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>num<wbr>Tokens<wbr>ToBuy<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="removealllisteners" class="tsd-anchor"></a>
					<h3>remove<wbr>All<wbr>Listeners</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">remove<wbr>All<wbr>Listeners<span class="tsd-signature-symbol">(</span>event<span class="tsd-signature-symbol">?: </span><a href="../enums/eventtype.html" class="tsd-signature-type">EventType</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">void</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L175">seaport.ts:175</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5><span class="tsd-flag ts-flagOptional">Optional</span> event: <a href="../enums/eventtype.html" class="tsd-signature-type">EventType</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">void</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="removelistener" class="tsd-anchor"></a>
					<h3>remove<wbr>Listener</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">remove<wbr>Listener<span class="tsd-signature-symbol">(</span>subscription<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">EventSubscription</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">void</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L166">seaport.ts:166</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>subscription: <span class="tsd-signature-type">EventSubscription</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">void</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="transfer" class="tsd-anchor"></a>
					<h3>transfer</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">transfer<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1355">seaport.ts:1355</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>asset<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>from<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>quantity<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">BigNumber</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>to<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></h4>
							<p>Transaction hash</p>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="transferall" class="tsd-anchor"></a>
					<h3>transfer<wbr>All</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">transfer<wbr>All<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1407">seaport.ts:1407</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>assets<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>from<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>schema<wbr>Name<span class="tsd-signature-symbol">: </span><a href="../enums/wyvernschemaname.html" class="tsd-signature-type">WyvernSchemaName</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>to<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></h4>
							<p>Transaction hash</p>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="unapprovefungibletoken" class="tsd-anchor"></a>
					<h3>unapprove<wbr>Fungible<wbr>Token</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">unapprove<wbr>Fungible<wbr>Token<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1194">seaport.ts:1194</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>proxy<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>token<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></h4>
							<p>Transaction hash</p>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="unwrapassets" class="tsd-anchor"></a>
					<h3>unwrap<wbr>Assets</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">unwrap<wbr>Assets<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L228">seaport.ts:228</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>assets<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a><span class="tsd-signature-symbol">[]</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>destination<wbr>Addresses<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">[]</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="unwrapweth" class="tsd-anchor"></a>
					<h3>unwrap<wbr>Weth</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">unwrap<wbr>Weth<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L429">seaport.ts:429</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>amount<wbr>InEth<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="validateandpostorder" class="tsd-anchor"></a>
					<h3>validate<wbr>And<wbr>Post<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">validate<wbr>And<wbr>Post<wbr>Order<span class="tsd-signature-symbol">(</span>order<span class="tsd-signature-symbol">: </span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L1675">seaport.ts:1675</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>order: <a href="../interfaces/order.html" class="tsd-signature-type">Order</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><a href="../interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">&gt;</span></h4>
							<p>The order as stored by the orderbook</p>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="wrapassets" class="tsd-anchor"></a>
					<h3>wrap<wbr>Assets</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">wrap<wbr>Assets<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L186">seaport.ts:186</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>assets<span class="tsd-signature-symbol">: </span><a href="../interfaces/asset.html" class="tsd-signature-type">Asset</a><span class="tsd-signature-symbol">[]</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-method tsd-parent-kind-class">
					<a name="wrapeth" class="tsd-anchor"></a>
					<h3>wrap<wbr>Eth</h3>
					<ul class="tsd-signatures tsd-kind-method tsd-parent-kind-class">
						<li class="tsd-signature tsd-kind-icon">wrap<wbr>Eth<span class="tsd-signature-symbol">(</span>__namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/seaport.ts#L397">seaport.ts:397</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>amount<wbr>InEth<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-class">
						<a href="openseaport.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Port</a>
						<ul>
							<li class=" tsd-kind-constructor tsd-parent-kind-class">
								<a href="openseaport.html#constructor" class="tsd-kind-icon">constructor</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-class">
								<a href="openseaport.html#api" class="tsd-kind-icon">api</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-class">
								<a href="openseaport.html#gasincreasefactor" class="tsd-kind-icon">gas<wbr>Increase<wbr>Factor</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-class">
								<a href="openseaport.html#gaspriceaddition" class="tsd-kind-icon">gas<wbr>Price<wbr>Addition</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-class">
								<a href="openseaport.html#logger" class="tsd-kind-icon">logger</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-class">
								<a href="openseaport.html#web3" class="tsd-kind-icon">web3</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-class">
								<a href="openseaport.html#web3readonly" class="tsd-kind-icon">web3<wbr>Read<wbr>Only</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_approveall" class="tsd-kind-icon">_approve<wbr>All</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_approveorder" class="tsd-kind-icon">_approve<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_buyordervalidationandapprovals" class="tsd-kind-icon">_buy<wbr>Order<wbr>Validation<wbr>And<wbr>Approvals</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_computegasprice" class="tsd-kind-icon">_compute<wbr>Gas<wbr>Price</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_correctgasamount" class="tsd-kind-icon">_correct<wbr>Gas<wbr>Amount</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_createemailwhitelistentry" class="tsd-kind-icon">_create<wbr>Email<wbr>Whitelist<wbr>Entry</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_estimategasformatch" class="tsd-kind-icon">_estimate<wbr>Gas<wbr>For<wbr>Match</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_estimategasfortransfer" class="tsd-kind-icon">_estimate<wbr>Gas<wbr>For<wbr>Transfer</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_getapprovedtokencount" class="tsd-kind-icon">_get<wbr>Approved<wbr>Token<wbr>Count</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_getbuyfeeparameters" class="tsd-kind-icon">_get<wbr>Buy<wbr>Fee<wbr>Parameters</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_getproxy" class="tsd-kind-icon">_get<wbr>Proxy</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_getsellfeeparameters" class="tsd-kind-icon">_get<wbr>Sell<wbr>Fee<wbr>Parameters</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_getstaticcalltargetandextradata" class="tsd-kind-icon">_get<wbr>Static<wbr>Call<wbr>Target<wbr>And<wbr>Extra<wbr>Data</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_initializeproxy" class="tsd-kind-icon">_initialize<wbr>Proxy</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_makebundlebuyorder" class="tsd-kind-icon">_make<wbr>Bundle<wbr>Buy<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_makebundlesellorder" class="tsd-kind-icon">_make<wbr>Bundle<wbr>Sell<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_makebuyorder" class="tsd-kind-icon">_make<wbr>Buy<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_makematchingorder" class="tsd-kind-icon">_make<wbr>Matching<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_makesellorder" class="tsd-kind-icon">_make<wbr>Sell<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_ownsassetonchain" class="tsd-kind-icon">_owns<wbr>Asset<wbr>OnChain</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_sellordervalidationandapprovals" class="tsd-kind-icon">_sell<wbr>Order<wbr>Validation<wbr>And<wbr>Approvals</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_validatematch" class="tsd-kind-icon">_validate<wbr>Match</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#_validateorder" class="tsd-kind-icon">_validate<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#addlistener" class="tsd-kind-icon">add<wbr>Listener</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#approvefungibletoken" class="tsd-kind-icon">approve<wbr>Fungible<wbr>Token</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#approvesemiornonfungibletoken" class="tsd-kind-icon">approve<wbr>Semi<wbr>OrNon<wbr>Fungible<wbr>Token</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#cancelorder" class="tsd-kind-icon">cancel<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#computefees" class="tsd-kind-icon">compute<wbr>Fees</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#createbundlebuyorder" class="tsd-kind-icon">create<wbr>Bundle<wbr>Buy<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#createbundlesellorder" class="tsd-kind-icon">create<wbr>Bundle<wbr>Sell<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#createbuyorder" class="tsd-kind-icon">create<wbr>Buy<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#createfactorysellorders" class="tsd-kind-icon">create<wbr>Factory<wbr>Sell<wbr>Orders</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#createsellorder" class="tsd-kind-icon">create<wbr>Sell<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#fulfillorder" class="tsd-kind-icon">fulfill<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#getassetbalance" class="tsd-kind-icon">get<wbr>Asset<wbr>Balance</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#getcurrentprice" class="tsd-kind-icon">get<wbr>Current<wbr>Price</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#getfungibletokens" class="tsd-kind-icon">get<wbr>Fungible<wbr>Tokens</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#getquotefromuniswap" class="tsd-kind-icon">get<wbr>Quote<wbr>From<wbr>Uniswap</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#gettokenbalance" class="tsd-kind-icon">get<wbr>Token<wbr>Balance</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#isassettransferrable" class="tsd-kind-icon">is<wbr>Asset<wbr>Transferrable</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#isorderfulfillable" class="tsd-kind-icon">is<wbr>Order<wbr>Fulfillable</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#liquidateassets" class="tsd-kind-icon">liquidate<wbr>Assets</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#purchaseassets" class="tsd-kind-icon">purchase<wbr>Assets</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#removealllisteners" class="tsd-kind-icon">remove<wbr>All<wbr>Listeners</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#removelistener" class="tsd-kind-icon">remove<wbr>Listener</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#transfer" class="tsd-kind-icon">transfer</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#transferall" class="tsd-kind-icon">transfer<wbr>All</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#unapprovefungibletoken" class="tsd-kind-icon">unapprove<wbr>Fungible<wbr>Token</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#unwrapassets" class="tsd-kind-icon">unwrap<wbr>Assets</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#unwrapweth" class="tsd-kind-icon">unwrap<wbr>Weth</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#validateandpostorder" class="tsd-kind-icon">validate<wbr>And<wbr>Post<wbr>Order</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#wrapassets" class="tsd-kind-icon">wrap<wbr>Assets</a>
							</li>
							<li class=" tsd-kind-method tsd-parent-kind-class">
								<a href="openseaport.html#wrapeth" class="tsd-kind-icon">wrap<wbr>Eth</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/enums/assetcontracttype.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>AssetContractType | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="assetcontracttype.html">AssetContractType</a>
				</li>
			</ul>
			<h1>Enumeration AssetContractType</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Enumeration members</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="assetcontracttype.html#fungible" class="tsd-kind-icon">Fungible</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="assetcontracttype.html#nonfungible" class="tsd-kind-icon">Non<wbr>Fungible</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="assetcontracttype.html#semifungible" class="tsd-kind-icon">Semi<wbr>Fungible</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="assetcontracttype.html#unknown" class="tsd-kind-icon">Unknown</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Enumeration members</h2>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="fungible" class="tsd-anchor"></a>
					<h3>Fungible</h3>
					<div class="tsd-signature tsd-kind-icon">Fungible<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;fungible&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L139">types.ts:139</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="nonfungible" class="tsd-anchor"></a>
					<h3>Non<wbr>Fungible</h3>
					<div class="tsd-signature tsd-kind-icon">Non<wbr>Fungible<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;non-fungible&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L141">types.ts:141</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="semifungible" class="tsd-anchor"></a>
					<h3>Semi<wbr>Fungible</h3>
					<div class="tsd-signature tsd-kind-icon">Semi<wbr>Fungible<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;semi-fungible&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L140">types.ts:140</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="unknown" class="tsd-anchor"></a>
					<h3>Unknown</h3>
					<div class="tsd-signature tsd-kind-icon">Unknown<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;unknown&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L142">types.ts:142</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-enum">
						<a href="assetcontracttype.html" class="tsd-kind-icon">Asset<wbr>Contract<wbr>Type</a>
						<ul>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="assetcontracttype.html#fungible" class="tsd-kind-icon">Fungible</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="assetcontracttype.html#nonfungible" class="tsd-kind-icon">Non<wbr>Fungible</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="assetcontracttype.html#semifungible" class="tsd-kind-icon">Semi<wbr>Fungible</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="assetcontracttype.html#unknown" class="tsd-kind-icon">Unknown</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/enums/asseteventtype.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>AssetEventType | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="asseteventtype.html">AssetEventType</a>
				</li>
			</ul>
			<h1>Enumeration AssetEventType</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Enumeration members</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="asseteventtype.html#assetapprove" class="tsd-kind-icon">Asset<wbr>Approve</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="asseteventtype.html#assettransfer" class="tsd-kind-icon">Asset<wbr>Transfer</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="asseteventtype.html#auctioncancelled" class="tsd-kind-icon">Auction<wbr>Cancelled</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="asseteventtype.html#auctioncreated" class="tsd-kind-icon">Auction<wbr>Created</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="asseteventtype.html#auctionsuccessful" class="tsd-kind-icon">Auction<wbr>Successful</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="asseteventtype.html#bidentered" class="tsd-kind-icon">Bid<wbr>Entered</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="asseteventtype.html#bidwithdraw" class="tsd-kind-icon">Bid<wbr>Withdraw</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="asseteventtype.html#compositioncreated" class="tsd-kind-icon">Composition<wbr>Created</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="asseteventtype.html#custom" class="tsd-kind-icon">Custom</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="asseteventtype.html#offerentered" class="tsd-kind-icon">Offer<wbr>Entered</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="asseteventtype.html#payout" class="tsd-kind-icon">Payout</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Enumeration members</h2>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="assetapprove" class="tsd-anchor"></a>
					<h3>Asset<wbr>Approve</h3>
					<div class="tsd-signature tsd-kind-icon">Asset<wbr>Approve<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;approve&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L423">types.ts:423</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="assettransfer" class="tsd-anchor"></a>
					<h3>Asset<wbr>Transfer</h3>
					<div class="tsd-signature tsd-kind-icon">Asset<wbr>Transfer<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;transfer&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L422">types.ts:422</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="auctioncancelled" class="tsd-anchor"></a>
					<h3>Auction<wbr>Cancelled</h3>
					<div class="tsd-signature tsd-kind-icon">Auction<wbr>Cancelled<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;cancelled&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L418">types.ts:418</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="auctioncreated" class="tsd-anchor"></a>
					<h3>Auction<wbr>Created</h3>
					<div class="tsd-signature tsd-kind-icon">Auction<wbr>Created<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;created&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L416">types.ts:416</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="auctionsuccessful" class="tsd-anchor"></a>
					<h3>Auction<wbr>Successful</h3>
					<div class="tsd-signature tsd-kind-icon">Auction<wbr>Successful<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;successful&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L417">types.ts:417</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="bidentered" class="tsd-anchor"></a>
					<h3>Bid<wbr>Entered</h3>
					<div class="tsd-signature tsd-kind-icon">Bid<wbr>Entered<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;bid_entered&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L420">types.ts:420</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="bidwithdraw" class="tsd-anchor"></a>
					<h3>Bid<wbr>Withdraw</h3>
					<div class="tsd-signature tsd-kind-icon">Bid<wbr>Withdraw<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;bid_withdraw&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L421">types.ts:421</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="compositioncreated" class="tsd-anchor"></a>
					<h3>Composition<wbr>Created</h3>
					<div class="tsd-signature tsd-kind-icon">Composition<wbr>Created<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;composition_created&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L424">types.ts:424</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="custom" class="tsd-anchor"></a>
					<h3>Custom</h3>
					<div class="tsd-signature tsd-kind-icon">Custom<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;custom&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L425">types.ts:425</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="offerentered" class="tsd-anchor"></a>
					<h3>Offer<wbr>Entered</h3>
					<div class="tsd-signature tsd-kind-icon">Offer<wbr>Entered<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;offer_entered&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L419">types.ts:419</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="payout" class="tsd-anchor"></a>
					<h3>Payout</h3>
					<div class="tsd-signature tsd-kind-icon">Payout<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;payout&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L426">types.ts:426</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-enum">
						<a href="asseteventtype.html" class="tsd-kind-icon">Asset<wbr>Event<wbr>Type</a>
						<ul>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="asseteventtype.html#assetapprove" class="tsd-kind-icon">Asset<wbr>Approve</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="asseteventtype.html#assettransfer" class="tsd-kind-icon">Asset<wbr>Transfer</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="asseteventtype.html#auctioncancelled" class="tsd-kind-icon">Auction<wbr>Cancelled</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="asseteventtype.html#auctioncreated" class="tsd-kind-icon">Auction<wbr>Created</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="asseteventtype.html#auctionsuccessful" class="tsd-kind-icon">Auction<wbr>Successful</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="asseteventtype.html#bidentered" class="tsd-kind-icon">Bid<wbr>Entered</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="asseteventtype.html#bidwithdraw" class="tsd-kind-icon">Bid<wbr>Withdraw</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="asseteventtype.html#compositioncreated" class="tsd-kind-icon">Composition<wbr>Created</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="asseteventtype.html#custom" class="tsd-kind-icon">Custom</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="asseteventtype.html#offerentered" class="tsd-kind-icon">Offer<wbr>Entered</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="asseteventtype.html#payout" class="tsd-kind-icon">Payout</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/enums/auctiontype.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>AuctionType | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="auctiontype.html">AuctionType</a>
				</li>
			</ul>
			<h1>Enumeration AuctionType</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Enumeration members</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="auctiontype.html#dutch" class="tsd-kind-icon">Dutch</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="auctiontype.html#english" class="tsd-kind-icon">English</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="auctiontype.html#minprice" class="tsd-kind-icon">Min<wbr>Price</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Enumeration members</h2>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="dutch" class="tsd-anchor"></a>
					<h3>Dutch</h3>
					<div class="tsd-signature tsd-kind-icon">Dutch<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;dutch&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L407">types.ts:407</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="english" class="tsd-anchor"></a>
					<h3>English</h3>
					<div class="tsd-signature tsd-kind-icon">English<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;english&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L408">types.ts:408</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="minprice" class="tsd-anchor"></a>
					<h3>Min<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">Min<wbr>Price<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;min_price&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L409">types.ts:409</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-enum">
						<a href="auctiontype.html" class="tsd-kind-icon">Auction<wbr>Type</a>
						<ul>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="auctiontype.html#dutch" class="tsd-kind-icon">Dutch</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="auctiontype.html#english" class="tsd-kind-icon">English</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="auctiontype.html#minprice" class="tsd-kind-icon">Min<wbr>Price</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/enums/eventtype.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>EventType | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="eventtype.html">EventType</a>
				</li>
			</ul>
			<h1>Enumeration EventType</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Enumeration members</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#approveallassets" class="tsd-kind-icon">Approve<wbr>All<wbr>Assets</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#approveasset" class="tsd-kind-icon">Approve<wbr>Asset</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#approvecurrency" class="tsd-kind-icon">Approve<wbr>Currency</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#approveorder" class="tsd-kind-icon">Approve<wbr>Order</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#cancelorder" class="tsd-kind-icon">Cancel<wbr>Order</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#createorder" class="tsd-kind-icon">Create<wbr>Order</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#initializeaccount" class="tsd-kind-icon">Initialize<wbr>Account</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#liquidateassets" class="tsd-kind-icon">Liquidate<wbr>Assets</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#matchorders" class="tsd-kind-icon">Match<wbr>Orders</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#orderdenied" class="tsd-kind-icon">Order<wbr>Denied</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#purchaseassets" class="tsd-kind-icon">Purchase<wbr>Assets</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#transactionconfirmed" class="tsd-kind-icon">Transaction<wbr>Confirmed</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#transactioncreated" class="tsd-kind-icon">Transaction<wbr>Created</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#transactiondenied" class="tsd-kind-icon">Transaction<wbr>Denied</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#transactionfailed" class="tsd-kind-icon">Transaction<wbr>Failed</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#transferall" class="tsd-kind-icon">Transfer<wbr>All</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#transferone" class="tsd-kind-icon">Transfer<wbr>One</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#unapprovecurrency" class="tsd-kind-icon">Unapprove<wbr>Currency</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#unwrapassets" class="tsd-kind-icon">Unwrap<wbr>Assets</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#unwrapweth" class="tsd-kind-icon">Unwrap<wbr>Weth</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#wrapassets" class="tsd-kind-icon">Wrap<wbr>Assets</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="eventtype.html#wrapeth" class="tsd-kind-icon">Wrap<wbr>Eth</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Enumeration members</h2>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="approveallassets" class="tsd-anchor"></a>
					<h3>Approve<wbr>All<wbr>Assets</h3>
					<div class="tsd-signature tsd-kind-icon">Approve<wbr>All<wbr>Assets<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;ApproveAllAssets&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L47">types.ts:47</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="approveasset" class="tsd-anchor"></a>
					<h3>Approve<wbr>Asset</h3>
					<div class="tsd-signature tsd-kind-icon">Approve<wbr>Asset<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;ApproveAsset&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L46">types.ts:46</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="approvecurrency" class="tsd-anchor"></a>
					<h3>Approve<wbr>Currency</h3>
					<div class="tsd-signature tsd-kind-icon">Approve<wbr>Currency<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;ApproveCurrency&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L45">types.ts:45</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="approveorder" class="tsd-anchor"></a>
					<h3>Approve<wbr>Order</h3>
					<div class="tsd-signature tsd-kind-icon">Approve<wbr>Order<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;ApproveOrder&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L53">types.ts:53</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="cancelorder" class="tsd-anchor"></a>
					<h3>Cancel<wbr>Order</h3>
					<div class="tsd-signature tsd-kind-icon">Cancel<wbr>Order<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;CancelOrder&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L52">types.ts:52</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="createorder" class="tsd-anchor"></a>
					<h3>Create<wbr>Order</h3>
					<div class="tsd-signature tsd-kind-icon">Create<wbr>Order<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;CreateOrder&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L54">types.ts:54</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="initializeaccount" class="tsd-anchor"></a>
					<h3>Initialize<wbr>Account</h3>
					<div class="tsd-signature tsd-kind-icon">Initialize<wbr>Account<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;InitializeAccount&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L42">types.ts:42</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="liquidateassets" class="tsd-anchor"></a>
					<h3>Liquidate<wbr>Assets</h3>
					<div class="tsd-signature tsd-kind-icon">Liquidate<wbr>Assets<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;LiquidateAssets&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L65">types.ts:65</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="matchorders" class="tsd-anchor"></a>
					<h3>Match<wbr>Orders</h3>
					<div class="tsd-signature tsd-kind-icon">Match<wbr>Orders<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;MatchOrders&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L51">types.ts:51</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="orderdenied" class="tsd-anchor"></a>
					<h3>Order<wbr>Denied</h3>
					<div class="tsd-signature tsd-kind-icon">Order<wbr>Denied<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;OrderDenied&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L56">types.ts:56</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="purchaseassets" class="tsd-anchor"></a>
					<h3>Purchase<wbr>Assets</h3>
					<div class="tsd-signature tsd-kind-icon">Purchase<wbr>Assets<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;PurchaseAssets&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L66">types.ts:66</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="transactionconfirmed" class="tsd-anchor"></a>
					<h3>Transaction<wbr>Confirmed</h3>
					<div class="tsd-signature tsd-kind-icon">Transaction<wbr>Confirmed<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;TransactionConfirmed&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L37">types.ts:37</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="transactioncreated" class="tsd-anchor"></a>
					<h3>Transaction<wbr>Created</h3>
					<div class="tsd-signature tsd-kind-icon">Transaction<wbr>Created<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;TransactionCreated&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L36">types.ts:36</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="transactiondenied" class="tsd-anchor"></a>
					<h3>Transaction<wbr>Denied</h3>
					<div class="tsd-signature tsd-kind-icon">Transaction<wbr>Denied<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;TransactionDenied&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L38">types.ts:38</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="transactionfailed" class="tsd-anchor"></a>
					<h3>Transaction<wbr>Failed</h3>
					<div class="tsd-signature tsd-kind-icon">Transaction<wbr>Failed<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;TransactionFailed&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L39">types.ts:39</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="transferall" class="tsd-anchor"></a>
					<h3>Transfer<wbr>All</h3>
					<div class="tsd-signature tsd-kind-icon">Transfer<wbr>All<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;TransferAll&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L59">types.ts:59</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="transferone" class="tsd-anchor"></a>
					<h3>Transfer<wbr>One</h3>
					<div class="tsd-signature tsd-kind-icon">Transfer<wbr>One<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;TransferOne&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L60">types.ts:60</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="unapprovecurrency" class="tsd-anchor"></a>
					<h3>Unapprove<wbr>Currency</h3>
					<div class="tsd-signature tsd-kind-icon">Unapprove<wbr>Currency<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;UnapproveCurrency&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L48">types.ts:48</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="unwrapassets" class="tsd-anchor"></a>
					<h3>Unwrap<wbr>Assets</h3>
					<div class="tsd-signature tsd-kind-icon">Unwrap<wbr>Assets<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;UnwrapAssets&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L64">types.ts:64</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="unwrapweth" class="tsd-anchor"></a>
					<h3>Unwrap<wbr>Weth</h3>
					<div class="tsd-signature tsd-kind-icon">Unwrap<wbr>Weth<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;UnwrapWeth&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L44">types.ts:44</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="wrapassets" class="tsd-anchor"></a>
					<h3>Wrap<wbr>Assets</h3>
					<div class="tsd-signature tsd-kind-icon">Wrap<wbr>Assets<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;WrapAssets&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L63">types.ts:63</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="wrapeth" class="tsd-anchor"></a>
					<h3>Wrap<wbr>Eth</h3>
					<div class="tsd-signature tsd-kind-icon">Wrap<wbr>Eth<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;WrapEth&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L43">types.ts:43</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-enum">
						<a href="eventtype.html" class="tsd-kind-icon">Event<wbr>Type</a>
						<ul>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#approveallassets" class="tsd-kind-icon">Approve<wbr>All<wbr>Assets</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#approveasset" class="tsd-kind-icon">Approve<wbr>Asset</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#approvecurrency" class="tsd-kind-icon">Approve<wbr>Currency</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#approveorder" class="tsd-kind-icon">Approve<wbr>Order</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#cancelorder" class="tsd-kind-icon">Cancel<wbr>Order</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#createorder" class="tsd-kind-icon">Create<wbr>Order</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#initializeaccount" class="tsd-kind-icon">Initialize<wbr>Account</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#liquidateassets" class="tsd-kind-icon">Liquidate<wbr>Assets</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#matchorders" class="tsd-kind-icon">Match<wbr>Orders</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#orderdenied" class="tsd-kind-icon">Order<wbr>Denied</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#purchaseassets" class="tsd-kind-icon">Purchase<wbr>Assets</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#transactionconfirmed" class="tsd-kind-icon">Transaction<wbr>Confirmed</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#transactioncreated" class="tsd-kind-icon">Transaction<wbr>Created</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#transactiondenied" class="tsd-kind-icon">Transaction<wbr>Denied</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#transactionfailed" class="tsd-kind-icon">Transaction<wbr>Failed</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#transferall" class="tsd-kind-icon">Transfer<wbr>All</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#transferone" class="tsd-kind-icon">Transfer<wbr>One</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#unapprovecurrency" class="tsd-kind-icon">Unapprove<wbr>Currency</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#unwrapassets" class="tsd-kind-icon">Unwrap<wbr>Assets</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#unwrapweth" class="tsd-kind-icon">Unwrap<wbr>Weth</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#wrapassets" class="tsd-kind-icon">Wrap<wbr>Assets</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="eventtype.html#wrapeth" class="tsd-kind-icon">Wrap<wbr>Eth</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/enums/feemethod.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>FeeMethod | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="feemethod.html">FeeMethod</a>
				</li>
			</ul>
			<h1>Enumeration FeeMethod</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Enumeration members</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="feemethod.html#protocolfee" class="tsd-kind-icon">Protocol<wbr>Fee</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="feemethod.html#splitfee" class="tsd-kind-icon">Split<wbr>Fee</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Enumeration members</h2>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="protocolfee" class="tsd-anchor"></a>
					<h3>Protocol<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">Protocol<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;0</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L120">types.ts:120</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="splitfee" class="tsd-anchor"></a>
					<h3>Split<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">Split<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;1</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L121">types.ts:121</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-enum">
						<a href="feemethod.html" class="tsd-kind-icon">Fee<wbr>Method</a>
						<ul>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="feemethod.html#protocolfee" class="tsd-kind-icon">Protocol<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="feemethod.html#splitfee" class="tsd-kind-icon">Split<wbr>Fee</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/enums/orderside.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OrderSide | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="orderside.html">OrderSide</a>
				</li>
			</ul>
			<h1>Enumeration OrderSide</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Enumeration members</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="orderside.html#buy" class="tsd-kind-icon">Buy</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="orderside.html#sell" class="tsd-kind-icon">Sell</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Enumeration members</h2>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="buy" class="tsd-anchor"></a>
					<h3>Buy</h3>
					<div class="tsd-signature tsd-kind-icon">Buy<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;0</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L110">types.ts:110</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="sell" class="tsd-anchor"></a>
					<h3>Sell</h3>
					<div class="tsd-signature tsd-kind-icon">Sell<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;1</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L111">types.ts:111</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-enum">
						<a href="orderside.html" class="tsd-kind-icon">Order<wbr>Side</a>
						<ul>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="orderside.html#buy" class="tsd-kind-icon">Buy</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="orderside.html#sell" class="tsd-kind-icon">Sell</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/enums/salekind.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>SaleKind | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="salekind.html">SaleKind</a>
				</li>
			</ul>
			<h1>Enumeration SaleKind</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Enumeration members</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="salekind.html#dutchauction" class="tsd-kind-icon">Dutch<wbr>Auction</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="salekind.html#fixedprice" class="tsd-kind-icon">Fixed<wbr>Price</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Enumeration members</h2>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="dutchauction" class="tsd-anchor"></a>
					<h3>Dutch<wbr>Auction</h3>
					<div class="tsd-signature tsd-kind-icon">Dutch<wbr>Auction<span class="tsd-signature-symbol">:</span> </div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L131">types.ts:131</a></li>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/debugging.ts#L13">debugging.ts:13</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="fixedprice" class="tsd-anchor"></a>
					<h3>Fixed<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">Fixed<wbr>Price<span class="tsd-signature-symbol">:</span> </div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L130">types.ts:130</a></li>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/debugging.ts#L13">debugging.ts:13</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-enum">
						<a href="salekind.html" class="tsd-kind-icon">Sale<wbr>Kind</a>
						<ul>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="salekind.html#dutchauction" class="tsd-kind-icon">Dutch<wbr>Auction</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="salekind.html#fixedprice" class="tsd-kind-icon">Fixed<wbr>Price</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/enums/side.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>Side | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="side.html">Side</a>
				</li>
			</ul>
			<h1>Enumeration Side</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section tsd-is-not-exported">
							<h3>Enumeration members</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-enum-member tsd-parent-kind-enum tsd-is-not-exported"><a href="side.html#buy" class="tsd-kind-icon">Buy</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum tsd-is-not-exported"><a href="side.html#sell" class="tsd-kind-icon">Sell</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group tsd-is-not-exported">
				<h2>Enumeration members</h2>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum tsd-is-not-exported">
					<a name="buy" class="tsd-anchor"></a>
					<h3>Buy</h3>
					<div class="tsd-signature tsd-kind-icon">Buy<span class="tsd-signature-symbol">:</span> </div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/debugging.ts#L11">debugging.ts:11</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum tsd-is-not-exported">
					<a name="sell" class="tsd-anchor"></a>
					<h3>Sell</h3>
					<div class="tsd-signature tsd-kind-icon">Sell<span class="tsd-signature-symbol">:</span> </div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/debugging.ts#L11">debugging.ts:11</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-enum tsd-is-not-exported">
						<a href="side.html" class="tsd-kind-icon">Side</a>
						<ul>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum tsd-is-not-exported">
								<a href="side.html#buy" class="tsd-kind-icon">Buy</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum tsd-is-not-exported">
								<a href="side.html#sell" class="tsd-kind-icon">Sell</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/enums/tokenstandardversion.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>TokenStandardVersion | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="tokenstandardversion.html">TokenStandardVersion</a>
				</li>
			</ul>
			<h1>Enumeration TokenStandardVersion</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Enumeration members</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="tokenstandardversion.html#erc721v1" class="tsd-kind-icon">ERC721v1</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="tokenstandardversion.html#erc721v2" class="tsd-kind-icon">ERC721v2</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="tokenstandardversion.html#erc721v3" class="tsd-kind-icon">ERC721v3</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="tokenstandardversion.html#enjin" class="tsd-kind-icon">Enjin</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="tokenstandardversion.html#locked" class="tsd-kind-icon">Locked</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="tokenstandardversion.html#unsupported" class="tsd-kind-icon">Unsupported</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Enumeration members</h2>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="erc721v1" class="tsd-anchor"></a>
					<h3>ERC721v1</h3>
					<div class="tsd-signature tsd-kind-icon">ERC721v1<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;1.0&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L171">types.ts:171</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="erc721v2" class="tsd-anchor"></a>
					<h3>ERC721v2</h3>
					<div class="tsd-signature tsd-kind-icon">ERC721v2<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;2.0&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L172">types.ts:172</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="erc721v3" class="tsd-anchor"></a>
					<h3>ERC721v3</h3>
					<div class="tsd-signature tsd-kind-icon">ERC721v3<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;3.0&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L173">types.ts:173</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="enjin" class="tsd-anchor"></a>
					<h3>Enjin</h3>
					<div class="tsd-signature tsd-kind-icon">Enjin<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;1155-1.0&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L170">types.ts:170</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="locked" class="tsd-anchor"></a>
					<h3>Locked</h3>
					<div class="tsd-signature tsd-kind-icon">Locked<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;locked&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L169">types.ts:169</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="unsupported" class="tsd-anchor"></a>
					<h3>Unsupported</h3>
					<div class="tsd-signature tsd-kind-icon">Unsupported<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;unsupported&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L168">types.ts:168</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-enum">
						<a href="tokenstandardversion.html" class="tsd-kind-icon">Token<wbr>Standard<wbr>Version</a>
						<ul>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="tokenstandardversion.html#erc721v1" class="tsd-kind-icon">ERC721v1</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="tokenstandardversion.html#erc721v2" class="tsd-kind-icon">ERC721v2</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="tokenstandardversion.html#erc721v3" class="tsd-kind-icon">ERC721v3</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="tokenstandardversion.html#enjin" class="tsd-kind-icon">Enjin</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="tokenstandardversion.html#locked" class="tsd-kind-icon">Locked</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="tokenstandardversion.html#unsupported" class="tsd-kind-icon">Unsupported</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/enums/wyvernassetlocation.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>WyvernAssetLocation | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="wyvernassetlocation.html">WyvernAssetLocation</a>
				</li>
			</ul>
			<h1>Enumeration WyvernAssetLocation</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Enumeration members</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="wyvernassetlocation.html#account" class="tsd-kind-icon">Account</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="wyvernassetlocation.html#other" class="tsd-kind-icon">Other</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="wyvernassetlocation.html#proxy" class="tsd-kind-icon">Proxy</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Enumeration members</h2>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="account" class="tsd-anchor"></a>
					<h3>Account</h3>
					<div class="tsd-signature tsd-kind-icon">Account<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;account&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L177">types.ts:177</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="other" class="tsd-anchor"></a>
					<h3>Other</h3>
					<div class="tsd-signature tsd-kind-icon">Other<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;other&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L179">types.ts:179</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="proxy" class="tsd-anchor"></a>
					<h3>Proxy</h3>
					<div class="tsd-signature tsd-kind-icon">Proxy<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;proxy&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L178">types.ts:178</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-enum">
						<a href="wyvernassetlocation.html" class="tsd-kind-icon">Wyvern<wbr>Asset<wbr>Location</a>
						<ul>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="wyvernassetlocation.html#account" class="tsd-kind-icon">Account</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="wyvernassetlocation.html#other" class="tsd-kind-icon">Other</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="wyvernassetlocation.html#proxy" class="tsd-kind-icon">Proxy</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/enums/wyvernschemaname.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>WyvernSchemaName | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="wyvernschemaname.html">WyvernSchemaName</a>
				</li>
			</ul>
			<h1>Enumeration WyvernSchemaName</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Enumeration members</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="wyvernschemaname.html#ensshortnameauction" class="tsd-kind-icon">ENSShort<wbr>Name<wbr>Auction</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="wyvernschemaname.html#erc1155" class="tsd-kind-icon">ERC1155</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="wyvernschemaname.html#erc20" class="tsd-kind-icon">ERC20</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="wyvernschemaname.html#erc721" class="tsd-kind-icon">ERC721</a></li>
								<li class="tsd-kind-enum-member tsd-parent-kind-enum"><a href="wyvernschemaname.html#legacyenjin" class="tsd-kind-icon">Legacy<wbr>Enjin</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Enumeration members</h2>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="ensshortnameauction" class="tsd-anchor"></a>
					<h3>ENSShort<wbr>Name<wbr>Auction</h3>
					<div class="tsd-signature tsd-kind-icon">ENSShort<wbr>Name<wbr>Auction<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;ENSShortNameAuction&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L151">types.ts:151</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="erc1155" class="tsd-anchor"></a>
					<h3>ERC1155</h3>
					<div class="tsd-signature tsd-kind-icon">ERC1155<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;ERC1155&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L149">types.ts:149</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="erc20" class="tsd-anchor"></a>
					<h3>ERC20</h3>
					<div class="tsd-signature tsd-kind-icon">ERC20<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;ERC20&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L147">types.ts:147</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="erc721" class="tsd-anchor"></a>
					<h3>ERC721</h3>
					<div class="tsd-signature tsd-kind-icon">ERC721<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;ERC721&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L148">types.ts:148</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-enum-member tsd-parent-kind-enum">
					<a name="legacyenjin" class="tsd-anchor"></a>
					<h3>Legacy<wbr>Enjin</h3>
					<div class="tsd-signature tsd-kind-icon">Legacy<wbr>Enjin<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol"> =&nbsp;&quot;Enjin&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L150">types.ts:150</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-enum">
						<a href="wyvernschemaname.html" class="tsd-kind-icon">Wyvern<wbr>Schema<wbr>Name</a>
						<ul>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="wyvernschemaname.html#ensshortnameauction" class="tsd-kind-icon">ENSShort<wbr>Name<wbr>Auction</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="wyvernschemaname.html#erc1155" class="tsd-kind-icon">ERC1155</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="wyvernschemaname.html#erc20" class="tsd-kind-icon">ERC20</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="wyvernschemaname.html#erc721" class="tsd-kind-icon">ERC721</a>
							</li>
							<li class=" tsd-kind-enum-member tsd-parent-kind-enum">
								<a href="wyvernschemaname.html#legacyenjin" class="tsd-kind-icon">Legacy<wbr>Enjin</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/globals.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="assets/js/search.js" data-base=".">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="globals.html">Globals</a>
				</li>
			</ul>
			<h1> opensea-js</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Enumerations</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-enum"><a href="enums/assetcontracttype.html" class="tsd-kind-icon">Asset<wbr>Contract<wbr>Type</a></li>
								<li class="tsd-kind-enum"><a href="enums/asseteventtype.html" class="tsd-kind-icon">Asset<wbr>Event<wbr>Type</a></li>
								<li class="tsd-kind-enum"><a href="enums/auctiontype.html" class="tsd-kind-icon">Auction<wbr>Type</a></li>
								<li class="tsd-kind-enum"><a href="enums/eventtype.html" class="tsd-kind-icon">Event<wbr>Type</a></li>
								<li class="tsd-kind-enum"><a href="enums/feemethod.html" class="tsd-kind-icon">Fee<wbr>Method</a></li>
								<li class="tsd-kind-enum"><a href="enums/orderside.html" class="tsd-kind-icon">Order<wbr>Side</a></li>
								<li class="tsd-kind-enum"><a href="enums/salekind.html" class="tsd-kind-icon">Sale<wbr>Kind</a></li>
								<li class="tsd-kind-enum tsd-is-not-exported"><a href="enums/side.html" class="tsd-kind-icon">Side</a></li>
								<li class="tsd-kind-enum"><a href="enums/tokenstandardversion.html" class="tsd-kind-icon">Token<wbr>Standard<wbr>Version</a></li>
								<li class="tsd-kind-enum"><a href="enums/wyvernassetlocation.html" class="tsd-kind-icon">Wyvern<wbr>Asset<wbr>Location</a></li>
								<li class="tsd-kind-enum"><a href="enums/wyvernschemaname.html" class="tsd-kind-icon">Wyvern<wbr>Schema<wbr>Name</a></li>
							</ul>
						</section>
						<section class="tsd-index-section ">
							<h3>Classes</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-class"><a href="classes/openseaapi.html" class="tsd-kind-icon">Open<wbr>SeaAPI</a></li>
								<li class="tsd-kind-class"><a href="classes/openseaport.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Port</a></li>
							</ul>
						</section>
						<section class="tsd-index-section ">
							<h3>Interfaces</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-interface"><a href="interfaces/asset.html" class="tsd-kind-icon">Asset</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/assetevent.html" class="tsd-kind-icon">Asset<wbr>Event</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/callspec.html" class="tsd-kind-icon">Call<wbr>Spec</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/computedfees.html" class="tsd-kind-icon">Computed<wbr>Fees</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/eventdata.html" class="tsd-kind-icon">Event<wbr>Data</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/exchangemetadataforasset.html" class="tsd-kind-icon">Exchange<wbr>Metadata<wbr>For<wbr>Asset</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/exchangemetadataforbundle.html" class="tsd-kind-icon">Exchange<wbr>Metadata<wbr>For<wbr>Bundle</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/limitedcallspec.html" class="tsd-kind-icon">Limited<wbr>Call<wbr>Spec</a></li>
								<li class="tsd-kind-interface tsd-is-not-exported"><a href="interfaces/numericaltraitstats.html" class="tsd-kind-icon">Numerical<wbr>Trait<wbr>Stats</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/openseaapiconfig.html" class="tsd-kind-icon">Open<wbr>SeaAPIConfig</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/openseaaccount.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Account</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/openseaasset.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/openseaassetbundle.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Bundle</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/openseaassetbundlejson.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>BundleJSON</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/openseaassetbundlequery.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Bundle<wbr>Query</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/openseaassetcontract.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Contract</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/openseaassetquery.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Query</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/openseacollection.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Collection</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/openseafees.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Fees</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/openseafungibletoken.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Fungible<wbr>Token</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/openseafungibletokenquery.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Fungible<wbr>Token<wbr>Query</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/openseatraitstats.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Trait<wbr>Stats</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/openseauser.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>User</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/order.html" class="tsd-kind-icon">Order</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/orderjson.html" class="tsd-kind-icon">OrderJSON</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/orderquery.html" class="tsd-kind-icon">Order<wbr>Query</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/orderbookresponse.html" class="tsd-kind-icon">Orderbook<wbr>Response</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/partialabidefinition.html" class="tsd-kind-icon">Partial<wbr>Abi<wbr>Definition</a></li>
								<li class="tsd-kind-interface tsd-is-not-exported"><a href="interfaces/stringtraitstats.html" class="tsd-kind-icon">String<wbr>Trait<wbr>Stats</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/transaction.html" class="tsd-kind-icon">Transaction</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/unhashedorder.html" class="tsd-kind-icon">Unhashed<wbr>Order</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/unsignedorder.html" class="tsd-kind-icon">Unsigned<wbr>Order</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/wyvernbundle.html" class="tsd-kind-icon">Wyvern<wbr>Bundle</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/wyvernftasset.html" class="tsd-kind-icon">WyvernFTAsset</a></li>
								<li class="tsd-kind-interface"><a href="interfaces/wyvernnftasset.html" class="tsd-kind-icon">WyvernNFTAsset</a></li>
							</ul>
						</section>
						<section class="tsd-index-section ">
							<h3>Type aliases</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-type-alias"><a href="globals.html#atomicizedbuyencoder" class="tsd-kind-icon">Atomicized<wbr>Buy<wbr>Encoder</a></li>
								<li class="tsd-kind-type-alias"><a href="globals.html#atomicizedsellencoder" class="tsd-kind-icon">Atomicized<wbr>Sell<wbr>Encoder</a></li>
								<li class="tsd-kind-type-alias"><a href="globals.html#defaultcallencoder" class="tsd-kind-icon">Default<wbr>Call<wbr>Encoder</a></li>
								<li class="tsd-kind-type-alias"><a href="globals.html#encoder" class="tsd-kind-icon">Encoder</a></li>
								<li class="tsd-kind-type-alias"><a href="globals.html#exchangemetadata" class="tsd-kind-icon">Exchange<wbr>Metadata</a></li>
								<li class="tsd-kind-type-alias"><a href="globals.html#fungibletoken" class="tsd-kind-icon">Fungible<wbr>Token</a></li>
								<li class="tsd-kind-type-alias"><a href="globals.html#fungibletokenquery" class="tsd-kind-icon">Fungible<wbr>Token<wbr>Query</a></li>
								<li class="tsd-kind-type-alias"><a href="globals.html#partialreadonlycontractabi" class="tsd-kind-icon">Partial<wbr>Readonly<wbr>Contract<wbr>Abi</a></li>
								<li class="tsd-kind-type-alias"><a href="globals.html#txncallback" class="tsd-kind-icon">Txn<wbr>Callback</a></li>
								<li class="tsd-kind-type-alias tsd-has-type-parameter"><a href="globals.html#web3callback" class="tsd-kind-icon">Web3<wbr>Callback</a></li>
								<li class="tsd-kind-type-alias"><a href="globals.html#web3rpccallback" class="tsd-kind-icon">Web3RPCCallback</a></li>
								<li class="tsd-kind-type-alias"><a href="globals.html#wyvernasset" class="tsd-kind-icon">Wyvern<wbr>Asset</a></li>
								<li class="tsd-kind-type-alias"><a href="globals.html#wyvernatomicmatchparameters" class="tsd-kind-icon">Wyvern<wbr>Atomic<wbr>Match<wbr>Parameters</a></li>
							</ul>
						</section>
						<section class="tsd-index-section ">
							<h3>Variables</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-variable"><a href="globals.html#api_base_mainnet" class="tsd-kind-icon">API_<wbr>BASE_<wbr>MAINNET</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#api_base_rinkeby" class="tsd-kind-icon">API_<wbr>BASE_<wbr>RINKEBY</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#api_path" class="tsd-kind-icon">API_<wbr>PATH</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#api_version" class="tsd-kind-icon">API_<wbr>VERSION</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#cheeze_wizards_basic_tournament_address" class="tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>BASIC_<wbr>TOURNAMENT_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#cheeze_wizards_basic_tournament_rinkeby_address" class="tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>BASIC_<wbr>TOURNAMENT_<wbr>RINKEBY_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#cheeze_wizards_guild_address" class="tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>GUILD_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#cheeze_wizards_guild_rinkeby_address" class="tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>GUILD_<wbr>RINKEBY_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#ck_address" class="tsd-kind-icon">CK_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#ck_rinkeby_address" class="tsd-kind-icon">CK_<wbr>RINKEBY_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#canonicalweth" class="tsd-kind-icon">CanonicalWETH</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#cheezewizardsbasictournament" class="tsd-kind-icon">Cheeze<wbr>Wizards<wbr>Basic<wbr>Tournament</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#cheezewizardsguild" class="tsd-kind-icon">Cheeze<wbr>Wizards<wbr>Guild</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#decentraland_estate_address" class="tsd-kind-icon">DECENTRALAND_<wbr>ESTATE_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#default_buyer_fee_basis_points" class="tsd-kind-icon">DEFAULT_<wbr>BUYER_<wbr>FEE_<wbr>BASIS_<wbr>POINTS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#default_gas_increase_factor" class="tsd-kind-icon">DEFAULT_<wbr>GAS_<wbr>INCREASE_<wbr>FACTOR</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#default_max_bounty" class="tsd-kind-icon">DEFAULT_<wbr>MAX_<wbr>BOUNTY</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#default_seller_fee_basis_points" class="tsd-kind-icon">DEFAULT_<wbr>SELLER_<wbr>FEE_<wbr>BASIS_<wbr>POINTS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#default_wrapped_nft_liquidation_uniswap_slippage_in_basis_points" class="tsd-kind-icon">DEFAULT_<wbr>WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>UNISWAP_<wbr>SLIPPAGE_<wbr>IN_<wbr>BASIS_<wbr>POINTS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#dep_infura_key" class="tsd-kind-icon">DEP_<wbr>INFURA_<wbr>KEY</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#decentralandestates" class="tsd-kind-icon">Decentraland<wbr>Estates</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#enjin_address" class="tsd-kind-icon">ENJIN_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#enjin_coin_address" class="tsd-kind-icon">ENJIN_<wbr>COIN_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#enjin_legacy_address" class="tsd-kind-icon">ENJIN_<wbr>LEGACY_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#erc1155" class="tsd-kind-icon">ERC1155</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#erc20" class="tsd-kind-icon">ERC20</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#erc721" class="tsd-kind-icon">ERC721</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#inverse_basis_point" class="tsd-kind-icon">INVERSE_<wbr>BASIS_<wbr>POINT</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#mainnet_provider_url" class="tsd-kind-icon">MAINNET_<wbr>PROVIDER_<wbr>URL</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#mana_address" class="tsd-kind-icon">MANA_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#max_error_length" class="tsd-kind-icon">MAX_<wbr>ERROR_<wbr>LENGTH</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#max_uint_256" class="tsd-kind-icon">MAX_<wbr>UINT_<wbr>256</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#min_expiration_seconds" class="tsd-kind-icon">MIN_<wbr>EXPIRATION_<wbr>SECONDS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#null_address" class="tsd-kind-icon">NULL_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#null_block_hash" class="tsd-kind-icon">NULL_<wbr>BLOCK_<wbr>HASH</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#opensea_fee_recipient" class="tsd-kind-icon">OPENSEA_<wbr>FEE_<wbr>RECIPIENT</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#opensea_seller_bounty_basis_points" class="tsd-kind-icon">OPENSEA_<wbr>SELLER_<wbr>BOUNTY_<wbr>BASIS_<wbr>POINTS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#orderbook_path" class="tsd-kind-icon">ORDERBOOK_<wbr>PATH</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#orderbook_version" class="tsd-kind-icon">ORDERBOOK_<wbr>VERSION</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#order_matching_latency_seconds" class="tsd-kind-icon">ORDER_<wbr>MATCHING_<wbr>LATENCY_<wbr>SECONDS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#rinkeby_provider_url" class="tsd-kind-icon">RINKEBY_<wbr>PROVIDER_<wbr>URL</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#sell_order_batch_size" class="tsd-kind-icon">SELL_<wbr>ORDER_<wbr>BATCH_<wbr>SIZE</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#site_host_mainnet" class="tsd-kind-icon">SITE_<wbr>HOST_<wbr>MAINNET</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#site_host_rinkeby" class="tsd-kind-icon">SITE_<wbr>HOST_<wbr>RINKEBY</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#static_call_cheeze_wizards_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>CHEEZE_<wbr>WIZARDS_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#static_call_cheeze_wizards_rinkeby_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>CHEEZE_<wbr>WIZARDS_<wbr>RINKEBY_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#static_call_decentraland_estates_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>DECENTRALAND_<wbr>ESTATES_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#static_call_tx_origin_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>TX_<wbr>ORIGIN_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#static_call_tx_origin_rinkeby_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>TX_<wbr>ORIGIN_<wbr>RINKEBY_<wbr>ADDRESS</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#staticcheckcheezewizards" class="tsd-kind-icon">Static<wbr>Check<wbr>Cheeze<wbr>Wizards</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#staticcheckdecentralandestates" class="tsd-kind-icon">Static<wbr>Check<wbr>Decentraland<wbr>Estates</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#staticchecktxorigin" class="tsd-kind-icon">Static<wbr>Check<wbr>TxOrigin</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#uniswap_factory_address_mainnet" class="tsd-kind-icon">UNISWAP_<wbr>FACTORY_<wbr>ADDRESS_<wbr>MAINNET</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#uniswap_factory_address_rinkeby" class="tsd-kind-icon">UNISWAP_<wbr>FACTORY_<wbr>ADDRESS_<wbr>RINKEBY</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#uniswapexchange" class="tsd-kind-icon">Uniswap<wbr>Exchange</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#uniswapfactory" class="tsd-kind-icon">Uniswap<wbr>Factory</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#wrapped_nft_factory_address_mainnet" class="tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>FACTORY_<wbr>ADDRESS_<wbr>MAINNET</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#wrapped_nft_factory_address_rinkeby" class="tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>FACTORY_<wbr>ADDRESS_<wbr>RINKEBY</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#wrapped_nft_liquidation_proxy_address_mainnet" class="tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>PROXY_<wbr>ADDRESS_<wbr>MAINNET</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#wrapped_nft_liquidation_proxy_address_rinkeby" class="tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>PROXY_<wbr>ADDRESS_<wbr>RINKEBY</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#wyvern_exchange_address_mainnet" class="tsd-kind-icon">WYVERN_<wbr>EXCHANGE_<wbr>ADDRESS_<wbr>MAINNET</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#wyvern_exchange_address_rinkeby" class="tsd-kind-icon">WYVERN_<wbr>EXCHANGE_<wbr>ADDRESS_<wbr>RINKEBY</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#wrappednft" class="tsd-kind-icon">WrappedNFT</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#wrappednftfactory" class="tsd-kind-icon">WrappedNFTFactory</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#wrappednftliquidationproxy" class="tsd-kind-icon">WrappedNFTLiquidation<wbr>Proxy</a></li>
								<li class="tsd-kind-variable"><a href="globals.html#encodereplacementpattern" class="tsd-kind-icon">encode<wbr>Replacement<wbr>Pattern</a></li>
								<li class="tsd-kind-variable tsd-is-not-exported"><a href="globals.html#txcallbacks" class="tsd-kind-icon">tx<wbr>Callbacks</a></li>
							</ul>
						</section>
						<section class="tsd-index-section ">
							<h3>Functions</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-function tsd-is-not-exported"><a href="globals.html#_throworcontinue" class="tsd-kind-icon">_throw<wbr>OrContinue</a></li>
								<li class="tsd-kind-function"><a href="globals.html#accountfromjson" class="tsd-kind-icon">account<wbr>FromJSON</a></li>
								<li class="tsd-kind-function"><a href="globals.html#annotateerc20transferabi" class="tsd-kind-icon">annotateERC20<wbr>TransferABI</a></li>
								<li class="tsd-kind-function"><a href="globals.html#annotateerc721transferabi" class="tsd-kind-icon">annotateERC721<wbr>TransferABI</a></li>
								<li class="tsd-kind-function"><a href="globals.html#assetbundlefromjson" class="tsd-kind-icon">asset<wbr>Bundle<wbr>FromJSON</a></li>
								<li class="tsd-kind-function"><a href="globals.html#assetcontractfromjson" class="tsd-kind-icon">asset<wbr>Contract<wbr>FromJSON</a></li>
								<li class="tsd-kind-function"><a href="globals.html#asseteventfromjson" class="tsd-kind-icon">asset<wbr>Event<wbr>FromJSON</a></li>
								<li class="tsd-kind-function"><a href="globals.html#assetfromjson" class="tsd-kind-icon">asset<wbr>FromJSON</a></li>
								<li class="tsd-kind-function"><a href="globals.html#assignorderstosides" class="tsd-kind-icon">assign<wbr>Orders<wbr>ToSides</a></li>
								<li class="tsd-kind-function tsd-is-not-exported"><a href="globals.html#cansettleorder" class="tsd-kind-icon">can<wbr>Settle<wbr>Order</a></li>
								<li class="tsd-kind-function"><a href="globals.html#collectionfromjson" class="tsd-kind-icon">collection<wbr>FromJSON</a></li>
								<li class="tsd-kind-function"><a href="globals.html#confirmtransaction" class="tsd-kind-icon">confirm<wbr>Transaction</a></li>
								<li class="tsd-kind-function"><a href="globals.html#delay" class="tsd-kind-icon">delay</a></li>
								<li class="tsd-kind-function"><a href="globals.html#encodeatomicizedbuy" class="tsd-kind-icon">encode<wbr>Atomicized<wbr>Buy</a></li>
								<li class="tsd-kind-function tsd-is-not-exported"><a href="globals.html#encodeatomicizedcalldata" class="tsd-kind-icon">encode<wbr>Atomicized<wbr>Calldata</a></li>
								<li class="tsd-kind-function"><a href="globals.html#encodeatomicizedsell" class="tsd-kind-icon">encode<wbr>Atomicized<wbr>Sell</a></li>
								<li class="tsd-kind-function"><a href="globals.html#encodeatomicizedtransfer" class="tsd-kind-icon">encode<wbr>Atomicized<wbr>Transfer</a></li>
								<li class="tsd-kind-function"><a href="globals.html#encodebuy" class="tsd-kind-icon">encode<wbr>Buy</a></li>
								<li class="tsd-kind-function"><a href="globals.html#encodecall" class="tsd-kind-icon">encode<wbr>Call</a></li>
								<li class="tsd-kind-function"><a href="globals.html#encodedefaultcall" class="tsd-kind-icon">encode<wbr>Default<wbr>Call</a></li>
								<li class="tsd-kind-function"><a href="globals.html#encodeproxycall" class="tsd-kind-icon">encode<wbr>Proxy<wbr>Call</a></li>
								<li class="tsd-kind-function"><a href="globals.html#encodesell" class="tsd-kind-icon">encode<wbr>Sell</a></li>
								<li class="tsd-kind-function"><a href="globals.html#encodetransfercall" class="tsd-kind-icon">encode<wbr>Transfer<wbr>Call</a></li>
								<li class="tsd-kind-function"><a href="globals.html#estimatecurrentprice" class="tsd-kind-icon">estimate<wbr>Current<wbr>Price</a></li>
								<li class="tsd-kind-function"><a href="globals.html#estimategas" class="tsd-kind-icon">estimate<wbr>Gas</a></li>
								<li class="tsd-kind-function"><a href="globals.html#event" class="tsd-kind-icon">event</a></li>
								<li class="tsd-kind-function"><a href="globals.html#getcurrentgasprice" class="tsd-kind-icon">get<wbr>Current<wbr>Gas<wbr>Price</a></li>
								<li class="tsd-kind-function"><a href="globals.html#getmethod" class="tsd-kind-icon">get<wbr>Method</a></li>
								<li class="tsd-kind-function"><a href="globals.html#getnoncompliantapprovaladdress" class="tsd-kind-icon">get<wbr>Non<wbr>Compliant<wbr>Approval<wbr>Address</a></li>
								<li class="tsd-kind-function"><a href="globals.html#getorderhash" class="tsd-kind-icon">get<wbr>Order<wbr>Hash</a></li>
								<li class="tsd-kind-function"><a href="globals.html#gettransferfeesettings" class="tsd-kind-icon">get<wbr>Transfer<wbr>Fee<wbr>Settings</a></li>
								<li class="tsd-kind-function"><a href="globals.html#getwyvernasset" class="tsd-kind-icon">get<wbr>Wyvern<wbr>Asset</a></li>
								<li class="tsd-kind-function"><a href="globals.html#getwyvernbundle" class="tsd-kind-icon">get<wbr>Wyvern<wbr>Bundle</a></li>
								<li class="tsd-kind-function"><a href="globals.html#iscontractaddress" class="tsd-kind-icon">is<wbr>Contract<wbr>Address</a></li>
								<li class="tsd-kind-function"><a href="globals.html#makebignumber" class="tsd-kind-icon">make<wbr>Big<wbr>Number</a></li>
								<li class="tsd-kind-function"><a href="globals.html#ondeprecated" class="tsd-kind-icon">on<wbr>Deprecated</a></li>
								<li class="tsd-kind-function"><a href="globals.html#orderfromjson" class="tsd-kind-icon">order<wbr>FromJSON</a></li>
								<li class="tsd-kind-function"><a href="globals.html#ordertojson" class="tsd-kind-icon">order<wbr>ToJSON</a></li>
								<li class="tsd-kind-function tsd-is-not-exported"><a href="globals.html#parsesignaturehex" class="tsd-kind-icon">parse<wbr>Signature<wbr>Hex</a></li>
								<li class="tsd-kind-function"><a href="globals.html#personalsignasync" class="tsd-kind-icon">personal<wbr>Sign<wbr>Async</a></li>
								<li class="tsd-kind-function tsd-has-type-parameter tsd-is-not-exported"><a href="globals.html#promisify" class="tsd-kind-icon">promisify</a></li>
								<li class="tsd-kind-function tsd-has-type-parameter"><a href="globals.html#promisifycall" class="tsd-kind-icon">promisify<wbr>Call</a></li>
								<li class="tsd-kind-function"><a href="globals.html#rawcall" class="tsd-kind-icon">raw<wbr>Call</a></li>
								<li class="tsd-kind-function"><a href="globals.html#requireordercalldatacanmatch" class="tsd-kind-icon">require<wbr>Order<wbr>Calldata<wbr>Can<wbr>Match</a></li>
								<li class="tsd-kind-function"><a href="globals.html#requireorderscanmatch" class="tsd-kind-icon">require<wbr>Orders<wbr>Can<wbr>Match</a></li>
								<li class="tsd-kind-function"><a href="globals.html#sendrawtransaction" class="tsd-kind-icon">send<wbr>Raw<wbr>Transaction</a></li>
								<li class="tsd-kind-function"><a href="globals.html#tokenfromjson" class="tsd-kind-icon">token<wbr>FromJSON</a></li>
								<li class="tsd-kind-function tsd-is-not-exported"><a href="globals.html#track" class="tsd-kind-icon">track</a></li>
								<li class="tsd-kind-function"><a href="globals.html#transactionfromjson" class="tsd-kind-icon">transaction<wbr>FromJSON</a></li>
								<li class="tsd-kind-function"><a href="globals.html#userfromjson" class="tsd-kind-icon">user<wbr>FromJSON</a></li>
								<li class="tsd-kind-function"><a href="globals.html#validateandformatwalletaddress" class="tsd-kind-icon">validate<wbr>And<wbr>Format<wbr>Wallet<wbr>Address</a></li>
							</ul>
						</section>
						<section class="tsd-index-section ">
							<h3>Object literals</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-object-literal"><a href="globals.html#decentraland_auction_config" class="tsd-kind-icon">DECENTRALAND_<wbr>AUCTION_<wbr>CONFIG</a></li>
								<li class="tsd-kind-object-literal tsd-is-not-exported"><a href="globals.html#schema_name_to_asset_contract_type" class="tsd-kind-icon">SCHEMA_<wbr>NAME_<wbr>TO_<wbr>ASSET_<wbr>CONTRACT_<wbr>TYPE</a></li>
								<li class="tsd-kind-object-literal tsd-is-not-exported"><a href="globals.html#salekindinterface" class="tsd-kind-icon">Sale<wbr>Kind<wbr>Interface</a></li>
								<li class="tsd-kind-object-literal"><a href="globals.html#proxyabi" class="tsd-kind-icon">proxyABI</a></li>
								<li class="tsd-kind-object-literal"><a href="globals.html#proxyassertabi" class="tsd-kind-icon">proxy<wbr>AssertABI</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Type aliases</h2>
				<section class="tsd-panel tsd-member tsd-kind-type-alias">
					<a name="atomicizedbuyencoder" class="tsd-anchor"></a>
					<h3>Atomicized<wbr>Buy<wbr>Encoder</h3>
					<div class="tsd-signature tsd-kind-icon">Atomicized<wbr>Buy<wbr>Encoder<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">function</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L63">utils/schema.ts:63</a></li>
						</ul>
					</aside>
					<div class="tsd-type-declaration">
						<h4>Type declaration</h4>
						<ul class="tsd-parameters">
							<li class="tsd-parameter-siganture">
								<ul class="tsd-signatures tsd-kind-type-literal tsd-parent-kind-type-alias tsd-is-not-exported">
									<li class="tsd-signature tsd-kind-icon"><span class="tsd-signature-symbol">(</span>schemas<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span>, assets<span class="tsd-signature-symbol">: </span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">[]</span>, address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, wyvernProtocol<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">WyvernProtocol</span>, networkName<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Network</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/callspec.html" class="tsd-signature-type">CallSpec</a></li>
								</ul>
								<ul class="tsd-descriptions">
									<li class="tsd-description">
										<h4 class="tsd-parameters-title">Parameters</h4>
										<ul class="tsd-parameters">
											<li>
												<h5>schemas: <span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span></h5>
											</li>
											<li>
												<h5>assets: <a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">[]</span></h5>
											</li>
											<li>
												<h5>address: <span class="tsd-signature-type">string</span></h5>
											</li>
											<li>
												<h5>wyvernProtocol: <span class="tsd-signature-type">WyvernProtocol</span></h5>
											</li>
											<li>
												<h5>networkName: <span class="tsd-signature-type">Network</span></h5>
											</li>
										</ul>
										<h4 class="tsd-returns-title">Returns <a href="interfaces/callspec.html" class="tsd-signature-type">CallSpec</a></h4>
									</li>
								</ul>
							</li>
						</ul>
					</div>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-type-alias">
					<a name="atomicizedsellencoder" class="tsd-anchor"></a>
					<h3>Atomicized<wbr>Sell<wbr>Encoder</h3>
					<div class="tsd-signature tsd-kind-icon">Atomicized<wbr>Sell<wbr>Encoder<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">function</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L48">utils/schema.ts:48</a></li>
						</ul>
					</aside>
					<div class="tsd-type-declaration">
						<h4>Type declaration</h4>
						<ul class="tsd-parameters">
							<li class="tsd-parameter-siganture">
								<ul class="tsd-signatures tsd-kind-type-literal tsd-parent-kind-type-alias tsd-is-not-exported">
									<li class="tsd-signature tsd-kind-icon"><span class="tsd-signature-symbol">(</span>schemas<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span>, assets<span class="tsd-signature-symbol">: </span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">[]</span>, address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, wyvernProtocol<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">WyvernProtocol</span>, networkName<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Network</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/callspec.html" class="tsd-signature-type">CallSpec</a></li>
								</ul>
								<ul class="tsd-descriptions">
									<li class="tsd-description">
										<h4 class="tsd-parameters-title">Parameters</h4>
										<ul class="tsd-parameters">
											<li>
												<h5>schemas: <span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span></h5>
											</li>
											<li>
												<h5>assets: <a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">[]</span></h5>
											</li>
											<li>
												<h5>address: <span class="tsd-signature-type">string</span></h5>
											</li>
											<li>
												<h5>wyvernProtocol: <span class="tsd-signature-type">WyvernProtocol</span></h5>
											</li>
											<li>
												<h5>networkName: <span class="tsd-signature-type">Network</span></h5>
											</li>
										</ul>
										<h4 class="tsd-returns-title">Returns <a href="interfaces/callspec.html" class="tsd-signature-type">CallSpec</a></h4>
									</li>
								</ul>
							</li>
						</ul>
					</div>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-type-alias">
					<a name="defaultcallencoder" class="tsd-anchor"></a>
					<h3>Default<wbr>Call<wbr>Encoder</h3>
					<div class="tsd-signature tsd-kind-icon">Default<wbr>Call<wbr>Encoder<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">function</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L120">utils/schema.ts:120</a></li>
						</ul>
					</aside>
					<div class="tsd-type-declaration">
						<h4>Type declaration</h4>
						<ul class="tsd-parameters">
							<li class="tsd-parameter-siganture">
								<ul class="tsd-signatures tsd-kind-type-literal tsd-parent-kind-type-alias tsd-is-not-exported">
									<li class="tsd-signature tsd-kind-icon"><span class="tsd-signature-symbol">(</span>abi<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">AnnotatedFunctionABI</span>, address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></li>
								</ul>
								<ul class="tsd-descriptions">
									<li class="tsd-description">
										<h4 class="tsd-parameters-title">Parameters</h4>
										<ul class="tsd-parameters">
											<li>
												<h5>abi: <span class="tsd-signature-type">AnnotatedFunctionABI</span></h5>
											</li>
											<li>
												<h5>address: <span class="tsd-signature-type">string</span></h5>
											</li>
										</ul>
										<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">string</span></h4>
									</li>
								</ul>
							</li>
						</ul>
					</div>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-type-alias">
					<a name="encoder" class="tsd-anchor"></a>
					<h3>Encoder</h3>
					<div class="tsd-signature tsd-kind-icon">Encoder<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">function</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L29">utils/schema.ts:29</a></li>
						</ul>
					</aside>
					<div class="tsd-type-declaration">
						<h4>Type declaration</h4>
						<ul class="tsd-parameters">
							<li class="tsd-parameter-siganture">
								<ul class="tsd-signatures tsd-kind-type-literal tsd-parent-kind-type-alias tsd-is-not-exported">
									<li class="tsd-signature tsd-kind-icon"><span class="tsd-signature-symbol">(</span>schema<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">&gt;</span>, asset<span class="tsd-signature-symbol">: </span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a>, address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/callspec.html" class="tsd-signature-type">CallSpec</a></li>
								</ul>
								<ul class="tsd-descriptions">
									<li class="tsd-description">
										<h4 class="tsd-parameters-title">Parameters</h4>
										<ul class="tsd-parameters">
											<li>
												<h5>schema: <span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">&gt;</span></h5>
											</li>
											<li>
												<h5>asset: <a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a></h5>
											</li>
											<li>
												<h5>address: <span class="tsd-signature-type">string</span></h5>
											</li>
										</ul>
										<h4 class="tsd-returns-title">Returns <a href="interfaces/callspec.html" class="tsd-signature-type">CallSpec</a></h4>
									</li>
								</ul>
							</li>
						</ul>
					</div>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-type-alias">
					<a name="exchangemetadata" class="tsd-anchor"></a>
					<h3>Exchange<wbr>Metadata</h3>
					<div class="tsd-signature tsd-kind-icon">Exchange<wbr>Metadata<span class="tsd-signature-symbol">:</span> <a href="interfaces/exchangemetadataforasset.html" class="tsd-signature-type">ExchangeMetadataForAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/exchangemetadataforbundle.html" class="tsd-signature-type">ExchangeMetadataForBundle</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L558">types.ts:558</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-type-alias">
					<a name="fungibletoken" class="tsd-anchor"></a>
					<h3>Fungible<wbr>Token</h3>
					<div class="tsd-signature tsd-kind-icon">Fungible<wbr>Token<span class="tsd-signature-symbol">:</span> <a href="interfaces/openseafungibletoken.html" class="tsd-signature-type">OpenSeaFungibleToken</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L471">types.ts:471</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-type-alias">
					<a name="fungibletokenquery" class="tsd-anchor"></a>
					<h3>Fungible<wbr>Token<wbr>Query</h3>
					<div class="tsd-signature tsd-kind-icon">Fungible<wbr>Token<wbr>Query<span class="tsd-signature-symbol">:</span> <a href="interfaces/openseafungibletokenquery.html" class="tsd-signature-type">OpenSeaFungibleTokenQuery</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L691">types.ts:691</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-type-alias">
					<a name="partialreadonlycontractabi" class="tsd-anchor"></a>
					<h3>Partial<wbr>Readonly<wbr>Contract<wbr>Abi</h3>
					<div class="tsd-signature tsd-kind-icon">Partial<wbr>Readonly<wbr>Contract<wbr>Abi<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Readonly</span><span class="tsd-signature-symbol">&lt;</span><a href="interfaces/partialabidefinition.html" class="tsd-signature-type">PartialAbiDefinition</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L716">types.ts:716</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-type-alias">
					<a name="txncallback" class="tsd-anchor"></a>
					<h3>Txn<wbr>Callback</h3>
					<div class="tsd-signature tsd-kind-icon">Txn<wbr>Callback<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">function</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L701">types.ts:701</a></li>
						</ul>
					</aside>
					<div class="tsd-type-declaration">
						<h4>Type declaration</h4>
						<ul class="tsd-parameters">
							<li class="tsd-parameter-siganture">
								<ul class="tsd-signatures tsd-kind-type-literal tsd-parent-kind-type-alias tsd-is-not-exported">
									<li class="tsd-signature tsd-kind-icon"><span class="tsd-signature-symbol">(</span>result<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">void</span></li>
								</ul>
								<ul class="tsd-descriptions">
									<li class="tsd-description">
										<h4 class="tsd-parameters-title">Parameters</h4>
										<ul class="tsd-parameters">
											<li>
												<h5>result: <span class="tsd-signature-type">boolean</span></h5>
											</li>
										</ul>
										<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">void</span></h4>
									</li>
								</ul>
							</li>
						</ul>
					</div>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-type-alias tsd-has-type-parameter">
					<a name="web3callback" class="tsd-anchor"></a>
					<h3>Web3<wbr>Callback</h3>
					<div class="tsd-signature tsd-kind-icon">Web3<wbr>Callback<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">function</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L699">types.ts:699</a></li>
						</ul>
					</aside>
					<div class="tsd-type-declaration">
						<h4>Type declaration</h4>
						<ul class="tsd-parameters">
							<li class="tsd-parameter-siganture">
								<ul class="tsd-signatures tsd-kind-type-literal tsd-parent-kind-type-alias tsd-is-not-exported">
									<li class="tsd-signature tsd-kind-icon"><span class="tsd-signature-symbol">(</span>err<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Error</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span>, result<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">T</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">void</span></li>
								</ul>
								<ul class="tsd-descriptions">
									<li class="tsd-description">
										<h4 class="tsd-parameters-title">Parameters</h4>
										<ul class="tsd-parameters">
											<li>
												<h5>err: <span class="tsd-signature-type">Error</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></h5>
											</li>
											<li>
												<h5>result: <span class="tsd-signature-type">T</span></h5>
											</li>
										</ul>
										<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">void</span></h4>
									</li>
								</ul>
							</li>
						</ul>
					</div>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-type-alias">
					<a name="web3rpccallback" class="tsd-anchor"></a>
					<h3>Web3RPCCallback</h3>
					<div class="tsd-signature tsd-kind-icon">Web3RPCCallback<span class="tsd-signature-symbol">:</span> <a href="globals.html#web3callback" class="tsd-signature-type">Web3Callback</a><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">JSONRPCResponsePayload</span><span class="tsd-signature-symbol">&gt;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L700">types.ts:700</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-type-alias">
					<a name="wyvernasset" class="tsd-anchor"></a>
					<h3>Wyvern<wbr>Asset</h3>
					<div class="tsd-signature tsd-kind-icon">Wyvern<wbr>Asset<span class="tsd-signature-symbol">:</span> <a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L191">types.ts:191</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-type-alias">
					<a name="wyvernatomicmatchparameters" class="tsd-anchor"></a>
					<h3>Wyvern<wbr>Atomic<wbr>Match<wbr>Parameters</h3>
					<div class="tsd-signature tsd-kind-icon">Wyvern<wbr>Atomic<wbr>Match<wbr>Parameters<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">[</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">, </span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">, </span><span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">, </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">, </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">, </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">, </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">, </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">, </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">, </span><span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">, </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L202">types.ts:202</a></li>
						</ul>
					</aside>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Variables</h2>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="api_base_mainnet" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> API_<wbr>BASE_<wbr>MAINNET</h3>
					<div class="tsd-signature tsd-kind-icon">API_<wbr>BASE_<wbr>MAINNET<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"https://api.opensea.io"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;https://api.opensea.io&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L47">constants.ts:47</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="api_base_rinkeby" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> API_<wbr>BASE_<wbr>RINKEBY</h3>
					<div class="tsd-signature tsd-kind-icon">API_<wbr>BASE_<wbr>RINKEBY<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"https://testnets-api.opensea.io"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;https://testnets-api.opensea.io&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L48">constants.ts:48</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="api_path" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> API_<wbr>PATH</h3>
					<div class="tsd-signature tsd-kind-icon">API_<wbr>PATH<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> =&nbsp;&#x60;/api/v${ORDERBOOK_VERSION}&#x60;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L52">constants.ts:52</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="api_version" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> API_<wbr>VERSION</h3>
					<div class="tsd-signature tsd-kind-icon">API_<wbr>VERSION<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;1</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L46">constants.ts:46</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="cheeze_wizards_basic_tournament_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> CHEEZE_<wbr>WIZARDS_<wbr>BASIC_<wbr>TOURNAMENT_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>BASIC_<wbr>TOURNAMENT_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol"> =&nbsp;WyvernProtocol.NULL_ADDRESS</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L30">constants.ts:30</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="cheeze_wizards_basic_tournament_rinkeby_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> CHEEZE_<wbr>WIZARDS_<wbr>BASIC_<wbr>TOURNAMENT_<wbr>RINKEBY_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>BASIC_<wbr>TOURNAMENT_<wbr>RINKEBY_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x8852f5F7d1BB867AAf8fdBB0851Aa431d1df5ca1"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x8852f5F7d1BB867AAf8fdBB0851Aa431d1df5ca1&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L31">constants.ts:31</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="cheeze_wizards_guild_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> CHEEZE_<wbr>WIZARDS_<wbr>GUILD_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>GUILD_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol"> =&nbsp;WyvernProtocol.NULL_ADDRESS</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L28">constants.ts:28</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="cheeze_wizards_guild_rinkeby_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> CHEEZE_<wbr>WIZARDS_<wbr>GUILD_<wbr>RINKEBY_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>GUILD_<wbr>RINKEBY_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x095731b672b76b00A0b5cb9D8258CD3F6E976cB2"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x095731b672b76b00A0b5cb9D8258CD3F6E976cB2&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L29">constants.ts:29</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="ck_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> CK_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">CK_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x06012c8cf97bead5deae237070f9587f8e7a266d"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x06012c8cf97bead5deae237070f9587f8e7a266d&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L19">constants.ts:19</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="ck_rinkeby_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> CK_<wbr>RINKEBY_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">CK_<wbr>RINKEBY_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x16baf0de678e52367adc69fd067e5edd1d33e3bf"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x16baf0de678e52367adc69fd067e5edd1d33e3bf&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L20">constants.ts:20</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="canonicalweth" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> CanonicalWETH</h3>
					<div class="tsd-signature tsd-kind-icon">CanonicalWETH<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&#x27;constant&#x27;: true, &#x27;inputs&#x27;: [], &#x27;name&#x27;: &#x27;name&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}], &#x27;payable&#x27;: false, &#x27;stateMutability&#x27;: &#x27;view&#x27;, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: false, &#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;guy&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;name&#x27;: &#x27;wad&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;name&#x27;: &#x27;approve&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;bool&#x27;}], &#x27;payable&#x27;: false, &#x27;stateMutability&#x27;: &#x27;nonpayable&#x27;, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: true, &#x27;inputs&#x27;: [], &#x27;name&#x27;: &#x27;totalSupply&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;payable&#x27;: false, &#x27;stateMutability&#x27;: &#x27;view&#x27;, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: false, &#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;src&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;name&#x27;: &#x27;dst&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;name&#x27;: &#x27;wad&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;name&#x27;: &#x27;transferFrom&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;bool&#x27;}], &#x27;payable&#x27;: false, &#x27;stateMutability&#x27;: &#x27;nonpayable&#x27;, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: false, &#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;wad&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;name&#x27;: &#x27;withdraw&#x27;, &#x27;outputs&#x27;: [], &#x27;payable&#x27;: false, &#x27;stateMutability&#x27;: &#x27;nonpayable&#x27;, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: true, &#x27;inputs&#x27;: [], &#x27;name&#x27;: &#x27;decimals&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;uint8&#x27;}], &#x27;payable&#x27;: false, &#x27;stateMutability&#x27;: &#x27;view&#x27;, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: true, &#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}], &#x27;name&#x27;: &#x27;balanceOf&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;payable&#x27;: false, &#x27;stateMutability&#x27;: &#x27;view&#x27;, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: true, &#x27;inputs&#x27;: [], &#x27;name&#x27;: &#x27;symbol&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}], &#x27;payable&#x27;: false, &#x27;stateMutability&#x27;: &#x27;view&#x27;, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: false, &#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;dst&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;name&#x27;: &#x27;wad&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;name&#x27;: &#x27;transfer&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;bool&#x27;}], &#x27;payable&#x27;: false, &#x27;stateMutability&#x27;: &#x27;nonpayable&#x27;, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: false, &#x27;inputs&#x27;: [], &#x27;name&#x27;: &#x27;deposit&#x27;, &#x27;outputs&#x27;: [], &#x27;payable&#x27;: true, &#x27;stateMutability&#x27;: &#x27;payable&#x27;, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: true, &#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}], &#x27;name&#x27;: &#x27;allowance&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;payable&#x27;: false, &#x27;stateMutability&#x27;: &#x27;view&#x27;, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;payable&#x27;: true, &#x27;stateMutability&#x27;: &#x27;payable&#x27;, &#x27;type&#x27;: &#x27;fallback&#x27;}, {&#x27;anonymous&#x27;: false, &#x27;inputs&#x27;: [{&#x27;indexed&#x27;: true, &#x27;name&#x27;: &#x27;src&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;indexed&#x27;: true, &#x27;name&#x27;: &#x27;guy&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;indexed&#x27;: false, &#x27;name&#x27;: &#x27;wad&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;name&#x27;: &#x27;Approval&#x27;, &#x27;type&#x27;: &#x27;event&#x27;}, {&#x27;anonymous&#x27;: false, &#x27;inputs&#x27;: [{&#x27;indexed&#x27;: true, &#x27;name&#x27;: &#x27;src&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;indexed&#x27;: true, &#x27;name&#x27;: &#x27;dst&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;indexed&#x27;: false, &#x27;name&#x27;: &#x27;wad&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;name&#x27;: &#x27;Transfer&#x27;, &#x27;type&#x27;: &#x27;event&#x27;}, {&#x27;anonymous&#x27;: false, &#x27;inputs&#x27;: [{&#x27;indexed&#x27;: true, &#x27;name&#x27;: &#x27;dst&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;indexed&#x27;: false, &#x27;name&#x27;: &#x27;wad&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;name&#x27;: &#x27;Deposit&#x27;, &#x27;type&#x27;: &#x27;event&#x27;}, {&#x27;anonymous&#x27;: false, &#x27;inputs&#x27;: [{&#x27;indexed&#x27;: true, &#x27;name&#x27;: &#x27;src&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;indexed&#x27;: false, &#x27;name&#x27;: &#x27;wad&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;name&#x27;: &#x27;Withdrawal&#x27;, &#x27;type&#x27;: &#x27;event&#x27;}]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/CanonicalWETH.ts#L3">abi/CanonicalWETH.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="cheezewizardsbasictournament" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> Cheeze<wbr>Wizards<wbr>Basic<wbr>Tournament</h3>
					<div class="tsd-signature tsd-kind-icon">Cheeze<wbr>Wizards<wbr>Basic<wbr>Tournament<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;cfoAddress&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;ceoAddress&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;pauseDuration&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;pause&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;newCfo&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;setCfo&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;duelResolver&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;newCeo&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;setCeo&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;newCoo&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;setCoo&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;powerScale&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;cooAddress&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;isPaused&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;inputs&quot;: [{&quot;name&quot;: &quot;cooAddress_&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;duelResolver_&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;powerScale_&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;tournamentStartBlock_&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;admissionDuration_&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;revivalDuration_&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;ascensionDuration_&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;fightDuration_&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;cullingDuration_&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;blueMoldBasePower_&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;sessionsBetweenMoldDoubling_&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;duelTimeoutBlocks_&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;constructor&quot;}, {&quot;payable&quot;: true, &quot;stateMutability&quot;: &quot;payable&quot;, &quot;type&quot;: &quot;fallback&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;duelId&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId1&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId2&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;timeoutBlock&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;isAscensionBattle&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;name&quot;: &quot;DuelStart&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;duelId&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId1&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId2&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;moveSet1&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;moveSet2&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;power1&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;power2&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;DuelEnd&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;duelId&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId1&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId2&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;power1&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;power2&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;DuelTimeOut&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;WizardElimination&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;AscensionStart&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId1&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId2&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;AscensionPairUp&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;power&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;AscensionComplete&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;power&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;Revive&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;givingWizId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;receivingWizId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;amountGifted&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;PowerGifted&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;claimingWinnerId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;prizeAmount&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;PrizeClaimed&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;pauseEndingBlock&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;Paused&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;previousCeo&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;newCeo&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;CEOTransferred&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;previousCoo&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;newCoo&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;COOTransferred&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;previousCfo&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;newCfo&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;CFOTransferred&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;interfaceId&quot;, &quot;type&quot;: &quot;bytes4&quot;}], &quot;name&quot;: &quot;supportsInterface&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;isActive&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;getWizard&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;affinity&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;power&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;maxPower&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;nonce&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;currentDuel&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;ascending&quot;, &quot;type&quot;: &quot;bool&quot;}, {&quot;name&quot;: &quot;ascensionOpponent&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;molded&quot;, &quot;type&quot;: &quot;bool&quot;}, {&quot;name&quot;: &quot;ready&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;wizardFingerprint&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bytes32&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;isReady&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}, {&quot;name&quot;: &quot;powers&quot;, &quot;type&quot;: &quot;uint88[]&quot;}], &quot;name&quot;: &quot;enterWizards&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: true, &quot;stateMutability&quot;: &quot;payable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;revive&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: true, &quot;stateMutability&quot;: &quot;payable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;updateAffinity&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;startAscension&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;commitment&quot;, &quot;type&quot;: &quot;bytes32&quot;}], &quot;name&quot;: &quot;challengeAscending&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;commitment&quot;, &quot;type&quot;: &quot;bytes32&quot;}], &quot;name&quot;: &quot;acceptAscensionChallenge&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [], &quot;name&quot;: &quot;completeAscension&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;committingWizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;otherWizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;commitment&quot;, &quot;type&quot;: &quot;bytes32&quot;}], &quot;name&quot;: &quot;oneSidedCommit&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;cancelCommitment&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId1&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;wizardId2&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;commit1&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;commit2&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;sig1&quot;, &quot;type&quot;: &quot;bytes&quot;}, {&quot;name&quot;: &quot;sig2&quot;, &quot;type&quot;: &quot;bytes&quot;}], &quot;name&quot;: &quot;doubleCommit&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;duelId&quot;, &quot;type&quot;: &quot;bytes32&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;committingWizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;commit&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;moveSet&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;salt&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;otherWizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;otherCommit&quot;, &quot;type&quot;: &quot;bytes32&quot;}], &quot;name&quot;: &quot;oneSidedReveal&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId1&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;wizardId2&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;commit1&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;commit2&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;moveSet1&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;moveSet2&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;salt1&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;salt2&quot;, &quot;type&quot;: &quot;bytes32&quot;}], &quot;name&quot;: &quot;doubleReveal&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId1&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;wizardId2&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;resolveTimedOutDuel&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;sendingWizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;receivingWizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;giftPower&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}, {&quot;name&quot;: &quot;survivor&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;cullMoldedWithSurvivor&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;moldyWizardIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}], &quot;name&quot;: &quot;cullMoldedWithMolded&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}], &quot;name&quot;: &quot;cullTiredWizards&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;claimingWinnerId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;claimTheBigCheeze&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;claimingWinnerId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;allWinners&quot;, &quot;type&quot;: &quot;uint256[]&quot;}], &quot;name&quot;: &quot;claimSharedWinnings&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [], &quot;name&quot;: &quot;destroy&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/CheezeWizardsBasicTournament.ts#L3">abi/CheezeWizardsBasicTournament.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="cheezewizardsguild" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> Cheeze<wbr>Wizards<wbr>Guild</h3>
					<div class="tsd-signature tsd-kind-icon">Cheeze<wbr>Wizards<wbr>Guild<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;approve&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [], &quot;name&quot;: &quot;closeSeries&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}, {&quot;name&quot;: &quot;powers&quot;, &quot;type&quot;: &quot;uint88[]&quot;}, {&quot;name&quot;: &quot;affinities&quot;, &quot;type&quot;: &quot;uint8[]&quot;}, {&quot;name&quot;: &quot;owner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;mintReservedWizards&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;powers&quot;, &quot;type&quot;: &quot;uint88[]&quot;}, {&quot;name&quot;: &quot;affinities&quot;, &quot;type&quot;: &quot;uint8[]&quot;}, {&quot;name&quot;: &quot;owner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;mintWizards&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;wizardIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;minter&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;reservedIds&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;openSeries&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;seriesId&quot;, &quot;type&quot;: &quot;uint64&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;safeTransferFrom&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;_data&quot;, &quot;type&quot;: &quot;bytes&quot;}], &quot;name&quot;: &quot;safeTransferFrom&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;newAffinity&quot;, &quot;type&quot;: &quot;uint8&quot;}], &quot;name&quot;: &quot;setAffinity&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;approved&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;name&quot;: &quot;setApprovalForAll&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;newCeo&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;setCeo&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;newCfo&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;setCfo&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;newCoo&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;setCoo&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}, {&quot;name&quot;: &quot;metadata&quot;, &quot;type&quot;: &quot;bytes32[]&quot;}], &quot;name&quot;: &quot;setMetadata&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;transferFrom&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;inputs&quot;: [{&quot;name&quot;: &quot;_cooAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;constructor&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;seriesIndex&quot;, &quot;type&quot;: &quot;uint64&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;reservedIds&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;SeriesOpen&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;seriesIndex&quot;, &quot;type&quot;: &quot;uint64&quot;}], &quot;name&quot;: &quot;SeriesClose&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: true, &quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;metadata&quot;, &quot;type&quot;: &quot;bytes32&quot;}], &quot;name&quot;: &quot;MetadataSet&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;Transfer&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;owner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;approved&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;Approval&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;owner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;operator&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;approved&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;name&quot;: &quot;ApprovalForAll&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;affinity&quot;, &quot;type&quot;: &quot;uint8&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;innatePower&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;WizardConjured&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;affinity&quot;, &quot;type&quot;: &quot;uint8&quot;}], &quot;name&quot;: &quot;WizardAffinityAssigned&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;previousCeo&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;newCeo&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;CEOTransferred&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;previousCoo&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;newCoo&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;COOTransferred&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;previousCfo&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;newCfo&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;CFOTransferred&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;_INTERFACE_ID_ERC165&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bytes4&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;_INTERFACE_ID_INVALID&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bytes4&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;owner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;balanceOf&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;ceoAddress&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;cfoAddress&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;cooAddress&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_contract&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_interfaceId&quot;, &quot;type&quot;: &quot;bytes4&quot;}], &quot;name&quot;: &quot;doesContractImplementInterface&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;getApproved&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;id&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;getWizard&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;owner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;innatePower&quot;, &quot;type&quot;: &quot;uint88&quot;}, {&quot;name&quot;: &quot;affinity&quot;, &quot;type&quot;: &quot;uint8&quot;}, {&quot;name&quot;: &quot;metadata&quot;, &quot;type&quot;: &quot;bytes32&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;owner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;operator&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;isApprovedForAll&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;spender&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;tokenId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;isApprovedOrOwner&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;ownerOf&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;interfaceId&quot;, &quot;type&quot;: &quot;bytes4&quot;}], &quot;name&quot;: &quot;supportsInterface&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;hash&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;sig&quot;, &quot;type&quot;: &quot;bytes&quot;}], &quot;name&quot;: &quot;verifySignature&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;wizardId1&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;wizardId2&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;hash1&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;hash2&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;sig1&quot;, &quot;type&quot;: &quot;bytes&quot;}, {&quot;name&quot;: &quot;sig2&quot;, &quot;type&quot;: &quot;bytes&quot;}], &quot;name&quot;: &quot;verifySignatures&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;wizardsById&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;affinity&quot;, &quot;type&quot;: &quot;uint8&quot;}, {&quot;name&quot;: &quot;innatePower&quot;, &quot;type&quot;: &quot;uint88&quot;}, {&quot;name&quot;: &quot;owner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;metadata&quot;, &quot;type&quot;: &quot;bytes32&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/CheezeWizardsGuild.ts#L3">abi/CheezeWizardsGuild.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="decentraland_estate_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> DECENTRALAND_<wbr>ESTATE_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">DECENTRALAND_<wbr>ESTATE_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x959e104e1a4db6317fa58f8295f586e1a978c297"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x959e104e1a4db6317fa58f8295f586e1a978c297&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L32">constants.ts:32</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="default_buyer_fee_basis_points" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> DEFAULT_<wbr>BUYER_<wbr>FEE_<wbr>BASIS_<wbr>POINTS</h3>
					<div class="tsd-signature tsd-kind-icon">DEFAULT_<wbr>BUYER_<wbr>FEE_<wbr>BASIS_<wbr>POINTS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">0</span><span class="tsd-signature-symbol"> =&nbsp;0</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L38">constants.ts:38</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="default_gas_increase_factor" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> DEFAULT_<wbr>GAS_<wbr>INCREASE_<wbr>FACTOR</h3>
					<div class="tsd-signature tsd-kind-icon">DEFAULT_<wbr>GAS_<wbr>INCREASE_<wbr>FACTOR<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">1.01</span><span class="tsd-signature-symbol"> =&nbsp;1.01</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L4">constants.ts:4</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="default_max_bounty" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> DEFAULT_<wbr>MAX_<wbr>BOUNTY</h3>
					<div class="tsd-signature tsd-kind-icon">DEFAULT_<wbr>MAX_<wbr>BOUNTY<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">250</span><span class="tsd-signature-symbol"> =&nbsp;DEFAULT_SELLER_FEE_BASIS_POINTS</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L41">constants.ts:41</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="default_seller_fee_basis_points" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> DEFAULT_<wbr>SELLER_<wbr>FEE_<wbr>BASIS_<wbr>POINTS</h3>
					<div class="tsd-signature tsd-kind-icon">DEFAULT_<wbr>SELLER_<wbr>FEE_<wbr>BASIS_<wbr>POINTS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">250</span><span class="tsd-signature-symbol"> =&nbsp;250</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L39">constants.ts:39</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="default_wrapped_nft_liquidation_uniswap_slippage_in_basis_points" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> DEFAULT_<wbr>WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>UNISWAP_<wbr>SLIPPAGE_<wbr>IN_<wbr>BASIS_<wbr>POINTS</h3>
					<div class="tsd-signature tsd-kind-icon">DEFAULT_<wbr>WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>UNISWAP_<wbr>SLIPPAGE_<wbr>IN_<wbr>BASIS_<wbr>POINTS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">1000</span><span class="tsd-signature-symbol"> =&nbsp;1000</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L27">constants.ts:27</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="dep_infura_key" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> DEP_<wbr>INFURA_<wbr>KEY</h3>
					<div class="tsd-signature tsd-kind-icon">DEP_<wbr>INFURA_<wbr>KEY<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"e8695bce67944848aa95459fac052f8e"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;e8695bce67944848aa95459fac052f8e&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L8">constants.ts:8</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="decentralandestates" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> Decentraland<wbr>Estates</h3>
					<div class="tsd-signature tsd-kind-icon">Decentraland<wbr>Estates<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_interfaceId&quot;, &quot;type&quot;: &quot;bytes4&quot;}], &quot;name&quot;: &quot;supportsInterface&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;name&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_name&quot;, &quot;type&quot;: &quot;string&quot;}, {&quot;name&quot;: &quot;_symbol&quot;, &quot;type&quot;: &quot;string&quot;}, {&quot;name&quot;: &quot;_registry&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;initialize&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_tokenId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;getApproved&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_tokenId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;approve&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;landIdEstate&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_operator&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_tokenId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;_data&quot;, &quot;type&quot;: &quot;bytes&quot;}], &quot;name&quot;: &quot;onERC721Received&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bytes4&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;getFingerprint&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;result&quot;, &quot;type&quot;: &quot;bytes32&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;totalSupply&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_tokenId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;transferFrom&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;landId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;data&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;name&quot;: &quot;updateLandData&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_owner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_index&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;tokenOfOwnerByIndex&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;estateLandIds&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;landIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}, {&quot;name&quot;: &quot;destinatary&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;transferManyLands&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;landIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}, {&quot;name&quot;: &quot;data&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;name&quot;: &quot;updateManyLandData&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_tokenId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;safeTransferFrom&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_name&quot;, &quot;type&quot;: &quot;string&quot;}, {&quot;name&quot;: &quot;_symbol&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;name&quot;: &quot;initialize&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_tokenId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;exists&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_index&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;tokenByIndex&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_registry&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;setLANDRegistry&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;metadata&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;name&quot;: &quot;updateMetadata&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [], &quot;name&quot;: &quot;ping&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_tokenId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;ownerOf&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;operator&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;isUpdateAuthorized&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_owner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;balanceOf&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;estateIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}], &quot;name&quot;: &quot;safeTransferManyFrom&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;registry&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [], &quot;name&quot;: &quot;initialize&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;owner&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;fingerprint&quot;, &quot;type&quot;: &quot;bytes&quot;}], &quot;name&quot;: &quot;verifyFingerprint&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;symbol&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;updateOperator&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;estateLandIndex&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_approved&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;name&quot;: &quot;setApprovalForAll&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;landId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;destinatary&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;transferLand&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;getMetadata&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;operator&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;setUpdateOperator&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_tokenId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;_data&quot;, &quot;type&quot;: &quot;bytes&quot;}], &quot;name&quot;: &quot;safeTransferFrom&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;landId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;getLandEstateId&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;contractName&quot;, &quot;type&quot;: &quot;string&quot;}, {&quot;name&quot;: &quot;migrationId&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;name&quot;: &quot;isMigrated&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_sender&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;initialize&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_tokenId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;tokenURI&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;metadata&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;name&quot;: &quot;mint&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;estateIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}, {&quot;name&quot;: &quot;data&quot;, &quot;type&quot;: &quot;bytes&quot;}], &quot;name&quot;: &quot;safeTransferManyFrom&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_owner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_operator&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;isApprovedForAll&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;newOwner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;transferOwnership&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;getEstateSize&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: true, &quot;name&quot;: &quot;previousOwner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: true, &quot;name&quot;: &quot;newOwner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;OwnershipTransferred&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: true, &quot;name&quot;: &quot;_from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: true, &quot;name&quot;: &quot;_to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: true, &quot;name&quot;: &quot;_tokenId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;Transfer&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: true, &quot;name&quot;: &quot;_owner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: true, &quot;name&quot;: &quot;_approved&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: true, &quot;name&quot;: &quot;_tokenId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;Approval&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: true, &quot;name&quot;: &quot;_owner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: true, &quot;name&quot;: &quot;_operator&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;_approved&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;name&quot;: &quot;ApprovalForAll&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: true, &quot;name&quot;: &quot;_owner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: true, &quot;name&quot;: &quot;_estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;_data&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;name&quot;: &quot;CreateEstate&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: true, &quot;name&quot;: &quot;_estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: true, &quot;name&quot;: &quot;_landId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;AddLand&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: true, &quot;name&quot;: &quot;_estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: true, &quot;name&quot;: &quot;_landId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: true, &quot;name&quot;: &quot;_destinatary&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;RemoveLand&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: true, &quot;name&quot;: &quot;_assetId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: true, &quot;name&quot;: &quot;_holder&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: true, &quot;name&quot;: &quot;_operator&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;_data&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;name&quot;: &quot;Update&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: true, &quot;name&quot;: &quot;_estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: true, &quot;name&quot;: &quot;_operator&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;UpdateOperator&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: true, &quot;name&quot;: &quot;_registry&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;SetLANDRegistry&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;contractName&quot;, &quot;type&quot;: &quot;string&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;migrationId&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;name&quot;: &quot;Migrated&quot;, &quot;type&quot;: &quot;event&quot;}]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/DecentralandEstates.ts#L3">abi/DecentralandEstates.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="enjin_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> ENJIN_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">ENJIN_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0xfaaFDc07907ff5120a76b34b731b278c38d6043C"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0xfaaFDc07907ff5120a76b34b731b278c38d6043C&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L17">constants.ts:17</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="enjin_coin_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> ENJIN_<wbr>COIN_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">ENJIN_<wbr>COIN_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L15">constants.ts:15</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="enjin_legacy_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> ENJIN_<wbr>LEGACY_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">ENJIN_<wbr>LEGACY_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x8562c38485B1E8cCd82E44F89823dA76C98eb0Ab"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x8562c38485B1E8cCd82E44F89823dA76C98eb0Ab&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L18">constants.ts:18</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="erc1155" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> ERC1155</h3>
					<div class="tsd-signature tsd-kind-icon">ERC1155<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;fallback&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_owner&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_spender&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;Approval&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_block&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_storage&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_oldContract&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;Initialize&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_block&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_nextContract&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;Retire&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_from&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_data&quot;,&quot;type&quot;: &quot;string&quot;}],&quot;name&quot;: &quot;Log&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;UpdateDecimals&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;UpdateName&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;UpdateSymbol&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_uri&quot;,&quot;type&quot;: &quot;string&quot;}],&quot;name&quot;: &quot;SetURI&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_from&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;Assign&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_creator&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;AcceptAssignment&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_creator&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_isNonFungible&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;name&quot;: &quot;Create&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;Mint&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;UpdateMaxMeltFee&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;UpdateMeltFee&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_owner&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_operator&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_approved&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;name&quot;: &quot;OperatorApproval&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_from&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;Transfer&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_sender&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_feeId&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_feeValue&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;TransferFee&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;UpdateMaxTransferFee&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;UpdateTransferable&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;UpdateTransferFee&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_account&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_whitelisted&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_on&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;name&quot;: &quot;Whitelist&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_owner&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;Melt&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_sender&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;DeployERCAdapter&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_tradeId&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_firstParty&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_secondParty&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_escrowedEnjFirstParty&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;CreateTrade&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_tradeId&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_firstParty&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_secondParty&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_receivedEnjFirstParty&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_changeEnjFirstParty&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_receivedEnjSecondParty&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;CompleteTrade&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;anonymous&quot;: false,&quot;inputs&quot;: [{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_tradeId&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;indexed&quot;: true,&quot;name&quot;: &quot;_firstParty&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;indexed&quot;: false,&quot;name&quot;: &quot;_receivedEnjFirstParty&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;CancelTrade&quot;,&quot;type&quot;: &quot;event&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_interfaceID&quot;,&quot;type&quot;: &quot;bytes4&quot;}],&quot;name&quot;: &quot;supportsInterface&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;pure&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_name&quot;,&quot;type&quot;: &quot;string&quot;},{&quot;name&quot;: &quot;_totalSupply&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_initialReserve&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_supplyModel&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_meltValue&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_meltFeeRatio&quot;,&quot;type&quot;: &quot;uint16&quot;},{&quot;name&quot;: &quot;_transferable&quot;,&quot;type&quot;: &quot;uint8&quot;},{&quot;name&quot;: &quot;_transferFeeSettings&quot;,&quot;type&quot;: &quot;uint256[3]&quot;},{&quot;name&quot;: &quot;_nonFungible&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;name&quot;: &quot;create&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_initialReserve&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;minMeltValue&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address[]&quot;},{&quot;name&quot;: &quot;_values&quot;,&quot;type&quot;: &quot;uint256[]&quot;}],&quot;name&quot;: &quot;mintFungibles&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address[]&quot;}],&quot;name&quot;: &quot;mintNonFungibles&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address[]&quot;},{&quot;name&quot;: &quot;_data&quot;,&quot;type&quot;: &quot;uint128[]&quot;}],&quot;name&quot;: &quot;mintNonFungiblesWithData&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;reserve&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint128&quot;}],&quot;name&quot;: &quot;releaseReserve&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_name&quot;,&quot;type&quot;: &quot;string&quot;}],&quot;name&quot;: &quot;updateName&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_creator&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;assign&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;acceptAssignment&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_account&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_whitelisted&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_on&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;name&quot;: &quot;setWhitelisted&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_transferable&quot;,&quot;type&quot;: &quot;uint8&quot;}],&quot;name&quot;: &quot;setTransferable&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_fee&quot;,&quot;type&quot;: &quot;uint16&quot;}],&quot;name&quot;: &quot;setMeltFee&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_fee&quot;,&quot;type&quot;: &quot;uint16&quot;}],&quot;name&quot;: &quot;decreaseMaxMeltFee&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_fee&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;setTransferFee&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_fee&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;decreaseMaxTransferFee&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_decimals&quot;,&quot;type&quot;: &quot;uint8&quot;},{&quot;name&quot;: &quot;_symbol&quot;,&quot;type&quot;: &quot;string&quot;}],&quot;name&quot;: &quot;deployERC20Adapter&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_symbol&quot;,&quot;type&quot;: &quot;string&quot;}],&quot;name&quot;: &quot;deployERC721Adapter&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_data&quot;,&quot;type&quot;: &quot;string&quot;}],&quot;name&quot;: &quot;addLog&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [],&quot;name&quot;: &quot;typeCount&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_index&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;typeByIndex&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [],&quot;name&quot;: &quot;nonFungibleTypeCount&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_index&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;nonFungibleTypeByIndex&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [],&quot;name&quot;: &quot;fungibleTypeCount&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_index&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;fungibleTypeByIndex&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;typeData&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;_name&quot;,&quot;type&quot;: &quot;string&quot;},{&quot;name&quot;: &quot;_creator&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_meltValue&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_meltFeeRatio&quot;,&quot;type&quot;: &quot;uint16&quot;},{&quot;name&quot;: &quot;_meltFeeMaxRatio&quot;,&quot;type&quot;: &quot;uint16&quot;},{&quot;name&quot;: &quot;_supplyModel&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_totalSupply&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_circulatingSupply&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_reserve&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_transferable&quot;,&quot;type&quot;: &quot;uint8&quot;},{&quot;name&quot;: &quot;_transferFeeData&quot;,&quot;type&quot;: &quot;uint256[4]&quot;},{&quot;name&quot;: &quot;_nonFungible&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;transferSettings&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;_transferable&quot;,&quot;type&quot;: &quot;uint8&quot;},{&quot;name&quot;: &quot;_transferFeeType&quot;,&quot;type&quot;: &quot;uint8&quot;},{&quot;name&quot;: &quot;_transferFeeCurrency&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_transferFeeValue&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_transferFeeMaxValue&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_creator&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;isCreatorOf&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_account&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_whitelisted&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;whitelisted&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;name&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;string&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;totalSupply&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;mintableSupply&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;circulatingSupply&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_owner&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;balanceOf&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;decimals&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint8&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;symbol&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;string&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;getERC20Adapter&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;getERC721Adapter&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;transfer&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_data&quot;,&quot;type&quot;: &quot;bytes&quot;}],&quot;name&quot;: &quot;safeTransfer&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_msgSender&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;transferAdapter&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_from&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;transferFrom&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_from&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_data&quot;,&quot;type&quot;: &quot;bytes&quot;}],&quot;name&quot;: &quot;safeTransferFrom&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_from&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_msgSender&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;transferFromAdapter&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_ids&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_values&quot;,&quot;type&quot;: &quot;uint256[]&quot;}],&quot;name&quot;: &quot;batchTransfer&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_ids&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_values&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_data&quot;,&quot;type&quot;: &quot;bytes&quot;}],&quot;name&quot;: &quot;safeBatchTransfer&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_from&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_ids&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_values&quot;,&quot;type&quot;: &quot;uint256[]&quot;}],&quot;name&quot;: &quot;batchTransferFrom&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_from&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_ids&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_values&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_data&quot;,&quot;type&quot;: &quot;bytes&quot;}],&quot;name&quot;: &quot;safeBatchTransferFrom&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address[]&quot;},{&quot;name&quot;: &quot;_ids&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_values&quot;,&quot;type&quot;: &quot;uint256[]&quot;}],&quot;name&quot;: &quot;multicastTransfer&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address[]&quot;},{&quot;name&quot;: &quot;_ids&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_values&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_data&quot;,&quot;type&quot;: &quot;bytes&quot;}],&quot;name&quot;: &quot;safeMulticastTransfer&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_from&quot;,&quot;type&quot;: &quot;address[]&quot;},{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address[]&quot;},{&quot;name&quot;: &quot;_ids&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_values&quot;,&quot;type&quot;: &quot;uint256[]&quot;}],&quot;name&quot;: &quot;multicastTransferFrom&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_owner&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_spender&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;allowance&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_spender&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_currentValue&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;approve&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_spender&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_currentValue&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_msgSender&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;approveAdapter&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_spender&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_ids&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_currentValues&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_values&quot;,&quot;type&quot;: &quot;uint256[]&quot;}],&quot;name&quot;: &quot;batchApprove&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_operator&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_ids&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_approved&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;name&quot;: &quot;setApproval&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_operator&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_approved&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;name&quot;: &quot;setApprovalForAll&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_operator&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_approved&quot;,&quot;type&quot;: &quot;bool&quot;},{&quot;name&quot;: &quot;_msgSender&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;setApprovalAdapter&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_owner&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_operator&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;isApproved&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_owner&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_operator&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;isApprovedForAll&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_from&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;transferFees&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;_transferValue&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_minTransferValue&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_transferFeeCurrency&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_fee&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_maxFee&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_askingIds&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_askingValues&quot;,&quot;type&quot;: &quot;uint128[]&quot;},{&quot;name&quot;: &quot;_offeringIds&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_offeringValues&quot;,&quot;type&quot;: &quot;uint128[]&quot;},{&quot;name&quot;: &quot;_secondParty&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;createTrade&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;tradeCompletable&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;completeTrade&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;cancelTrade&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_ids&quot;,&quot;type&quot;: &quot;uint256[]&quot;},{&quot;name&quot;: &quot;_values&quot;,&quot;type&quot;: &quot;uint256[]&quot;}],&quot;name&quot;: &quot;melt&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;ownerOf&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_uri&quot;,&quot;type&quot;: &quot;string&quot;}],&quot;name&quot;: &quot;setURI&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;uri&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;string&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;nonFungibleCount&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_index&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;nonFungibleByIndex&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_owner&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_index&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;nonFungibleOfOwnerByIndex&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;isNonFungible&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;pure&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: true,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_addr&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;isContract&quot;,&quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;bool&quot;}],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_erc20ContractAddress&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;releaseERC20&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;releaseETH&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_erc721ContractAddress&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_token&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;releaseERC721&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_erc1155ContractAddress&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_id&quot;,&quot;type&quot;: &quot;uint256&quot;},{&quot;name&quot;: &quot;_value&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;releaseERC1155&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_storage&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_oldContract&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;initialize&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_nextContract&quot;,&quot;type&quot;: &quot;address&quot;}],&quot;name&quot;: &quot;retire&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;}]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/ERC1155.ts#L3">abi/ERC1155.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="erc20" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> ERC20</h3>
					<div class="tsd-signature tsd-kind-icon">ERC20<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&#x27;constant&#x27;: true, &#x27;inputs&#x27;: [], &#x27;name&#x27;: &#x27;name&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}], &#x27;payable&#x27;: false, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: false, &#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_spender&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;name&#x27;: &#x27;_value&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;name&#x27;: &#x27;approve&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;success&#x27;, &#x27;type&#x27;: &#x27;bool&#x27;}], &#x27;payable&#x27;: false, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: true, &#x27;inputs&#x27;: [], &#x27;name&#x27;: &#x27;totalSupply&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;payable&#x27;: false, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: false, &#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_from&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;name&#x27;: &#x27;_to&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;name&#x27;: &#x27;_value&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;name&#x27;: &#x27;transferFrom&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;success&#x27;, &#x27;type&#x27;: &#x27;bool&#x27;}], &#x27;payable&#x27;: false, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: true, &#x27;inputs&#x27;: [], &#x27;name&#x27;: &#x27;decimals&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;uint8&#x27;}], &#x27;payable&#x27;: false, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: true, &#x27;inputs&#x27;: [], &#x27;name&#x27;: &#x27;version&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}], &#x27;payable&#x27;: false, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: true, &#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_owner&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}], &#x27;name&#x27;: &#x27;balanceOf&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;balance&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;payable&#x27;: false, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: true, &#x27;inputs&#x27;: [], &#x27;name&#x27;: &#x27;symbol&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}], &#x27;payable&#x27;: false, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: false, &#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_to&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;name&#x27;: &#x27;_value&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;name&#x27;: &#x27;transfer&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;success&#x27;, &#x27;type&#x27;: &#x27;bool&#x27;}], &#x27;payable&#x27;: false, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: false, &#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_spender&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;name&#x27;: &#x27;_value&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}, {&#x27;name&#x27;: &#x27;_extraData&#x27;, &#x27;type&#x27;: &#x27;bytes&#x27;}], &#x27;name&#x27;: &#x27;approveAndCall&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;success&#x27;, &#x27;type&#x27;: &#x27;bool&#x27;}], &#x27;payable&#x27;: false, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;constant&#x27;: true, &#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_owner&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;name&#x27;: &#x27;_spender&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}], &#x27;name&#x27;: &#x27;allowance&#x27;, &#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;remaining&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;payable&#x27;: false, &#x27;type&#x27;: &#x27;function&#x27;}, {&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_initialAmount&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}, {&#x27;name&#x27;: &#x27;_tokenName&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}, {&#x27;name&#x27;: &#x27;_decimalUnits&#x27;, &#x27;type&#x27;: &#x27;uint8&#x27;}, {&#x27;name&#x27;: &#x27;_tokenSymbol&#x27;, &#x27;type&#x27;: &#x27;string&#x27;}], &#x27;type&#x27;: &#x27;constructor&#x27;}, {&#x27;payable&#x27;: false, &#x27;type&#x27;: &#x27;fallback&#x27;}, {&#x27;anonymous&#x27;: false, &#x27;inputs&#x27;: [{&#x27;indexed&#x27;: true, &#x27;name&#x27;: &#x27;_from&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;indexed&#x27;: true, &#x27;name&#x27;: &#x27;_to&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;indexed&#x27;: false, &#x27;name&#x27;: &#x27;_value&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;name&#x27;: &#x27;Transfer&#x27;, &#x27;type&#x27;: &#x27;event&#x27;}, {&#x27;anonymous&#x27;: false, &#x27;inputs&#x27;: [{&#x27;indexed&#x27;: true, &#x27;name&#x27;: &#x27;_owner&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;indexed&#x27;: true, &#x27;name&#x27;: &#x27;_spender&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;indexed&#x27;: false, &#x27;name&#x27;: &#x27;_value&#x27;, &#x27;type&#x27;: &#x27;uint256&#x27;}], &#x27;name&#x27;: &#x27;Approval&#x27;, &#x27;type&#x27;: &#x27;event&#x27;}]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/ERC20.ts#L3">abi/ERC20.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="erc721" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> ERC721</h3>
					<div class="tsd-signature tsd-kind-icon">ERC721<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&#x27;constant&#x27;: true,&#x27;inputs&#x27;: [],&#x27;name&#x27;: &#x27;name&#x27;,&#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;string&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;view&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: true,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;name&#x27;: &#x27;kittyIndexToApproved&#x27;,&#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;view&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: true,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;name&#x27;: &#x27;partIndexToApproved&#x27;,&#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;view&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: true,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;name&#x27;: &#x27;allowed&#x27;,&#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;view&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: true,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_tokenId&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;name&#x27;: &#x27;getApproved&#x27;,&#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;view&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: false,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_to&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;name&#x27;: &#x27;_tokenId&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;name&#x27;: &#x27;approve&#x27;,&#x27;outputs&#x27;: [],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;nonpayable&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: true,&#x27;inputs&#x27;: [],&#x27;name&#x27;: &#x27;totalSupply&#x27;,&#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;view&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&quot;constant&quot;: false,&quot;inputs&quot;: [{&quot;name&quot;: &quot;_to&quot;,&quot;type&quot;: &quot;address&quot;},{&quot;name&quot;: &quot;_tokenId&quot;,&quot;type&quot;: &quot;uint256&quot;}],&quot;name&quot;: &quot;transfer&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;function&quot;},{&#x27;constant&#x27;: false,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_from&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;name&#x27;: &#x27;_to&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;name&#x27;: &#x27;_tokenId&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;name&#x27;: &#x27;transferFrom&#x27;,&#x27;outputs&#x27;: [],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;nonpayable&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: true,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_owner&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;name&#x27;: &#x27;_index&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;name&#x27;: &#x27;tokenOfOwnerByIndex&#x27;,&#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;view&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: false,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_from&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;name&#x27;: &#x27;_to&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;name&#x27;: &#x27;_tokenId&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;name&#x27;: &#x27;safeTransferFrom&#x27;,&#x27;outputs&#x27;: [],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;nonpayable&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: true,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_tokenId&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;name&#x27;: &#x27;exists&#x27;,&#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;bool&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;view&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: true,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_index&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;name&#x27;: &#x27;tokenByIndex&#x27;,&#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;view&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: true,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_tokenId&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;name&#x27;: &#x27;ownerOf&#x27;,&#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;view&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: true,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_owner&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},],&#x27;name&#x27;: &#x27;balanceOf&#x27;,&#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;view&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: true,&#x27;inputs&#x27;: [],&#x27;name&#x27;: &#x27;symbol&#x27;,&#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;string&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;view&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: false,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_to&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;name&#x27;: &#x27;_approved&#x27;,&#x27;type&#x27;: &#x27;bool&#x27;,},],&#x27;name&#x27;: &#x27;setApprovalForAll&#x27;,&#x27;outputs&#x27;: [],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;nonpayable&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: false,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_from&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;name&#x27;: &#x27;_to&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;name&#x27;: &#x27;_tokenId&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},{&#x27;name&#x27;: &#x27;_data&#x27;,&#x27;type&#x27;: &#x27;bytes&#x27;,},],&#x27;name&#x27;: &#x27;safeTransferFrom&#x27;,&#x27;outputs&#x27;: [],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;nonpayable&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: true,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_tokenId&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;name&#x27;: &#x27;tokenURI&#x27;,&#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;string&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;view&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;constant&#x27;: true,&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_owner&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;name&#x27;: &#x27;_operator&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},],&#x27;name&#x27;: &#x27;isApprovedForAll&#x27;,&#x27;outputs&#x27;: [{&#x27;name&#x27;: &#x27;&#x27;,&#x27;type&#x27;: &#x27;bool&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;view&#x27;,&#x27;type&#x27;: &#x27;function&#x27;,},{&#x27;inputs&#x27;: [{&#x27;name&#x27;: &#x27;_name&#x27;,&#x27;type&#x27;: &#x27;string&#x27;,},{&#x27;name&#x27;: &#x27;_symbol&#x27;,&#x27;type&#x27;: &#x27;string&#x27;,},],&#x27;payable&#x27;: false,&#x27;stateMutability&#x27;: &#x27;nonpayable&#x27;,&#x27;type&#x27;: &#x27;constructor&#x27;,},{&#x27;anonymous&#x27;: false,&#x27;inputs&#x27;: [{&#x27;indexed&#x27;: true,&#x27;name&#x27;: &#x27;_from&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;indexed&#x27;: true,&#x27;name&#x27;: &#x27;_to&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;indexed&#x27;: false,&#x27;name&#x27;: &#x27;_tokenId&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;name&#x27;: &#x27;Transfer&#x27;,&#x27;type&#x27;: &#x27;event&#x27;,},{&#x27;anonymous&#x27;: false,&#x27;inputs&#x27;: [{&#x27;indexed&#x27;: true,&#x27;name&#x27;: &#x27;_owner&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;indexed&#x27;: true,&#x27;name&#x27;: &#x27;_approved&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;indexed&#x27;: false,&#x27;name&#x27;: &#x27;_tokenId&#x27;,&#x27;type&#x27;: &#x27;uint256&#x27;,},],&#x27;name&#x27;: &#x27;Approval&#x27;,&#x27;type&#x27;: &#x27;event&#x27;,},{&#x27;anonymous&#x27;: false,&#x27;inputs&#x27;: [{&#x27;indexed&#x27;: true,&#x27;name&#x27;: &#x27;_owner&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;indexed&#x27;: true,&#x27;name&#x27;: &#x27;_operator&#x27;,&#x27;type&#x27;: &#x27;address&#x27;,},{&#x27;indexed&#x27;: false,&#x27;name&#x27;: &#x27;_approved&#x27;,&#x27;type&#x27;: &#x27;bool&#x27;,},],&#x27;name&#x27;: &#x27;ApprovalForAll&#x27;,&#x27;type&#x27;: &#x27;event&#x27;,},]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/ERC721v3.ts#L3">abi/ERC721v3.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="inverse_basis_point" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> INVERSE_<wbr>BASIS_<wbr>POINT</h3>
					<div class="tsd-signature tsd-kind-icon">INVERSE_<wbr>BASIS_<wbr>POINT<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">10000</span><span class="tsd-signature-symbol"> =&nbsp;10000</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L11">constants.ts:11</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="mainnet_provider_url" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> MAINNET_<wbr>PROVIDER_<wbr>URL</h3>
					<div class="tsd-signature tsd-kind-icon">MAINNET_<wbr>PROVIDER_<wbr>URL<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"https://api.opensea.io/jsonrpc/v1/"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;https://api.opensea.io/jsonrpc/v1/&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L9">constants.ts:9</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="mana_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> MANA_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">MANA_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x0f5d2fb29fb7d3cfee444a200298f468908cc942"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x0f5d2fb29fb7d3cfee444a200298f468908cc942&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L16">constants.ts:16</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="max_error_length" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> MAX_<wbr>ERROR_<wbr>LENGTH</h3>
					<div class="tsd-signature tsd-kind-icon">MAX_<wbr>ERROR_<wbr>LENGTH<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">120</span><span class="tsd-signature-symbol"> =&nbsp;120</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/debugging.ts#L5">debugging.ts:5</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="max_uint_256" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> MAX_<wbr>UINT_<wbr>256</h3>
					<div class="tsd-signature tsd-kind-icon">MAX_<wbr>UINT_<wbr>256<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol"> =&nbsp;WyvernProtocol.MAX_UINT_256</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L12">constants.ts:12</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="min_expiration_seconds" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> MIN_<wbr>EXPIRATION_<wbr>SECONDS</h3>
					<div class="tsd-signature tsd-kind-icon">MIN_<wbr>EXPIRATION_<wbr>SECONDS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">10</span><span class="tsd-signature-symbol"> =&nbsp;10</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L42">constants.ts:42</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="null_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> NULL_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">NULL_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol"> =&nbsp;WyvernProtocol.NULL_ADDRESS</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L5">constants.ts:5</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="null_block_hash" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> NULL_<wbr>BLOCK_<wbr>HASH</h3>
					<div class="tsd-signature tsd-kind-icon">NULL_<wbr>BLOCK_<wbr>HASH<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L6">constants.ts:6</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="opensea_fee_recipient" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> OPENSEA_<wbr>FEE_<wbr>RECIPIENT</h3>
					<div class="tsd-signature tsd-kind-icon">OPENSEA_<wbr>FEE_<wbr>RECIPIENT<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x5b3256965e7c3cf26e11fcaf296dfc8807c01073"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x5b3256965e7c3cf26e11fcaf296dfc8807c01073&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L7">constants.ts:7</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="opensea_seller_bounty_basis_points" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> OPENSEA_<wbr>SELLER_<wbr>BOUNTY_<wbr>BASIS_<wbr>POINTS</h3>
					<div class="tsd-signature tsd-kind-icon">OPENSEA_<wbr>SELLER_<wbr>BOUNTY_<wbr>BASIS_<wbr>POINTS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">100</span><span class="tsd-signature-symbol"> =&nbsp;100</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L40">constants.ts:40</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="orderbook_path" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> ORDERBOOK_<wbr>PATH</h3>
					<div class="tsd-signature tsd-kind-icon">ORDERBOOK_<wbr>PATH<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> =&nbsp;&#x60;/wyvern/v${ORDERBOOK_VERSION}&#x60;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L51">constants.ts:51</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="orderbook_version" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> ORDERBOOK_<wbr>VERSION</h3>
					<div class="tsd-signature tsd-kind-icon">ORDERBOOK_<wbr>VERSION<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;1</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L45">constants.ts:45</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="order_matching_latency_seconds" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> ORDER_<wbr>MATCHING_<wbr>LATENCY_<wbr>SECONDS</h3>
					<div class="tsd-signature tsd-kind-icon">ORDER_<wbr>MATCHING_<wbr>LATENCY_<wbr>SECONDS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;60 * 60 * 24 * 7</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L43">constants.ts:43</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="rinkeby_provider_url" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> RINKEBY_<wbr>PROVIDER_<wbr>URL</h3>
					<div class="tsd-signature tsd-kind-icon">RINKEBY_<wbr>PROVIDER_<wbr>URL<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"https://testnets-api.opensea.io/jsonrpc/v1/"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;https://testnets-api.opensea.io/jsonrpc/v1/&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L10">constants.ts:10</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="sell_order_batch_size" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> SELL_<wbr>ORDER_<wbr>BATCH_<wbr>SIZE</h3>
					<div class="tsd-signature tsd-kind-icon">SELL_<wbr>ORDER_<wbr>BATCH_<wbr>SIZE<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">3</span><span class="tsd-signature-symbol"> =&nbsp;3</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L44">constants.ts:44</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="site_host_mainnet" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> SITE_<wbr>HOST_<wbr>MAINNET</h3>
					<div class="tsd-signature tsd-kind-icon">SITE_<wbr>HOST_<wbr>MAINNET<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"https://opensea.io"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;https://opensea.io&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L49">constants.ts:49</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="site_host_rinkeby" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> SITE_<wbr>HOST_<wbr>RINKEBY</h3>
					<div class="tsd-signature tsd-kind-icon">SITE_<wbr>HOST_<wbr>RINKEBY<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"https://rinkeby.opensea.io"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;https://rinkeby.opensea.io&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L50">constants.ts:50</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="static_call_cheeze_wizards_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> STATIC_<wbr>CALL_<wbr>CHEEZE_<wbr>WIZARDS_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">STATIC_<wbr>CALL_<wbr>CHEEZE_<wbr>WIZARDS_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol"> =&nbsp;WyvernProtocol.NULL_ADDRESS</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L35">constants.ts:35</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="static_call_cheeze_wizards_rinkeby_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> STATIC_<wbr>CALL_<wbr>CHEEZE_<wbr>WIZARDS_<wbr>RINKEBY_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">STATIC_<wbr>CALL_<wbr>CHEEZE_<wbr>WIZARDS_<wbr>RINKEBY_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x8a640bdf8886dd6ca1fad9f22382b50deeacde08"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x8a640bdf8886dd6ca1fad9f22382b50deeacde08&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L36">constants.ts:36</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="static_call_decentraland_estates_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> STATIC_<wbr>CALL_<wbr>DECENTRALAND_<wbr>ESTATES_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">STATIC_<wbr>CALL_<wbr>DECENTRALAND_<wbr>ESTATES_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x93c3cd7ba04556d2e3d7b8106ce0f83e24a87a7e"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x93c3cd7ba04556d2e3d7b8106ce0f83e24a87a7e&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L37">constants.ts:37</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="static_call_tx_origin_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> STATIC_<wbr>CALL_<wbr>TX_<wbr>ORIGIN_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">STATIC_<wbr>CALL_<wbr>TX_<wbr>ORIGIN_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0xbff6ade67e3717101dd8d0a7f3de1bf6623a2ba8"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0xbff6ade67e3717101dd8d0a7f3de1bf6623a2ba8&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L33">constants.ts:33</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="static_call_tx_origin_rinkeby_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> STATIC_<wbr>CALL_<wbr>TX_<wbr>ORIGIN_<wbr>RINKEBY_<wbr>ADDRESS</h3>
					<div class="tsd-signature tsd-kind-icon">STATIC_<wbr>CALL_<wbr>TX_<wbr>ORIGIN_<wbr>RINKEBY_<wbr>ADDRESS<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0xe291abab95677bc652a44f973a8e06d48464e11c"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0xe291abab95677bc652a44f973a8e06d48464e11c&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L34">constants.ts:34</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="staticcheckcheezewizards" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> Static<wbr>Check<wbr>Cheeze<wbr>Wizards</h3>
					<div class="tsd-signature tsd-kind-icon">Static<wbr>Check<wbr>Cheeze<wbr>Wizards<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_wizardId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;_fingerprint&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;checkTxOrigin&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;name&quot;: &quot;succeedIfCurrentWizardFingerprintMatchesProvidedWizardFingerprint&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [], &quot;name&quot;: &quot;renounceOwnership&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_newOpenSeaAdminAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;changeOpenSeaAdminAddress&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_newTournamentAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;changeTournamentAddress&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;owner&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;isOwner&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;newOwner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;transferOwnership&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;inputs&quot;: [{&quot;name&quot;: &quot;_cheezeWizardTournamentAddress&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_openSeaAdminAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;constructor&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;previousOwner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;newOwner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;OwnershipTransferred&quot;, &quot;type&quot;: &quot;event&quot;}]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/StaticCheckCheezeWizards.ts#L3">abi/StaticCheckCheezeWizards.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="staticcheckdecentralandestates" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> Static<wbr>Check<wbr>Decentraland<wbr>Estates</h3>
					<div class="tsd-signature tsd-kind-icon">Static<wbr>Check<wbr>Decentraland<wbr>Estates<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_newAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;changeDecentralandEstateAddress&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_estateId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;_fingerprint&quot;, &quot;type&quot;: &quot;bytes32&quot;}, {&quot;name&quot;: &quot;checkTxOrigin&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;name&quot;: &quot;succeedIfCurrentEstateFingerprintMatchesProvidedEstateFingerprint&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [], &quot;name&quot;: &quot;renounceOwnership&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_newOpenSeaAdminAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;changeOpenSeaAdminAddress&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;owner&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;isOwner&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;newOwner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;transferOwnership&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;inputs&quot;: [{&quot;name&quot;: &quot;_decentralandEstateAddress&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_openSeaAdminAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;constructor&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;previousOwner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;newOwner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;OwnershipTransferred&quot;, &quot;type&quot;: &quot;event&quot;}]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/StaticCheckDecentralandEstates.ts#L3">abi/StaticCheckDecentralandEstates.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="staticchecktxorigin" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> Static<wbr>Check<wbr>TxOrigin</h3>
					<div class="tsd-signature tsd-kind-icon">Static<wbr>Check<wbr>TxOrigin<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;succeedIfTxOriginMatchesHardcodedAddress&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [], &quot;name&quot;: &quot;renounceOwnership&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_specifiedAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;succeedIfTxOriginMatchesSpecifiedAddress&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;owner&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;isOwner&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_newHardcodedAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;changeHardcodedAddress&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;newOwner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;transferOwnership&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;inputs&quot;: [{&quot;name&quot;: &quot;_hardcodedAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;constructor&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;previousOwner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;newOwner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;OwnershipTransferred&quot;, &quot;type&quot;: &quot;event&quot;}]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/StaticCheckTxOrigin.ts#L3">abi/StaticCheckTxOrigin.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="uniswap_factory_address_mainnet" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> UNISWAP_<wbr>FACTORY_<wbr>ADDRESS_<wbr>MAINNET</h3>
					<div class="tsd-signature tsd-kind-icon">UNISWAP_<wbr>FACTORY_<wbr>ADDRESS_<wbr>MAINNET<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L25">constants.ts:25</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="uniswap_factory_address_rinkeby" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> UNISWAP_<wbr>FACTORY_<wbr>ADDRESS_<wbr>RINKEBY</h3>
					<div class="tsd-signature tsd-kind-icon">UNISWAP_<wbr>FACTORY_<wbr>ADDRESS_<wbr>RINKEBY<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L26">constants.ts:26</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="uniswapexchange" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> Uniswap<wbr>Exchange</h3>
					<div class="tsd-signature tsd-kind-icon">Uniswap<wbr>Exchange<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&quot;name&quot;: &quot;TokenPurchase&quot;, &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;buyer&quot;, &quot;indexed&quot;: true}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;eth_sold&quot;, &quot;indexed&quot;: true}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_bought&quot;, &quot;indexed&quot;: true}], &quot;anonymous&quot;: false, &quot;type&quot;: &quot;event&quot;}, {&quot;name&quot;: &quot;EthPurchase&quot;, &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;buyer&quot;, &quot;indexed&quot;: true}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_sold&quot;, &quot;indexed&quot;: true}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;eth_bought&quot;, &quot;indexed&quot;: true}], &quot;anonymous&quot;: false, &quot;type&quot;: &quot;event&quot;}, {&quot;name&quot;: &quot;AddLiquidity&quot;, &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;provider&quot;, &quot;indexed&quot;: true}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;eth_amount&quot;, &quot;indexed&quot;: true}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;token_amount&quot;, &quot;indexed&quot;: true}], &quot;anonymous&quot;: false, &quot;type&quot;: &quot;event&quot;}, {&quot;name&quot;: &quot;RemoveLiquidity&quot;, &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;provider&quot;, &quot;indexed&quot;: true}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;eth_amount&quot;, &quot;indexed&quot;: true}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;token_amount&quot;, &quot;indexed&quot;: true}], &quot;anonymous&quot;: false, &quot;type&quot;: &quot;event&quot;}, {&quot;name&quot;: &quot;Transfer&quot;, &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_from&quot;, &quot;indexed&quot;: true}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_to&quot;, &quot;indexed&quot;: true}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;_value&quot;, &quot;indexed&quot;: false}], &quot;anonymous&quot;: false, &quot;type&quot;: &quot;event&quot;}, {&quot;name&quot;: &quot;Approval&quot;, &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_owner&quot;, &quot;indexed&quot;: true}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_spender&quot;, &quot;indexed&quot;: true}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;_value&quot;, &quot;indexed&quot;: false}], &quot;anonymous&quot;: false, &quot;type&quot;: &quot;event&quot;}, {&quot;name&quot;: &quot;setup&quot;, &quot;outputs&quot;: [], &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;token_addr&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;addLiquidity&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_liquidity&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;max_tokens&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: true, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;removeLiquidity&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;amount&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_eth&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_tokens&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;__default__&quot;, &quot;outputs&quot;: [], &quot;inputs&quot;: [], &quot;constant&quot;: false, &quot;payable&quot;: true, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;ethToTokenSwapInput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_tokens&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: true, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;ethToTokenTransferInput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_tokens&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;recipient&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: true, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;ethToTokenSwapOutput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: true, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;ethToTokenTransferOutput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;recipient&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: true, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;tokenToEthSwapInput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_sold&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_eth&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;tokenToEthTransferInput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_sold&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_eth&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;recipient&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;tokenToEthSwapOutput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;eth_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;max_tokens&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;tokenToEthTransferOutput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;eth_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;max_tokens&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;recipient&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;tokenToTokenSwapInput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_sold&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_tokens_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_eth_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;token_addr&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;tokenToTokenTransferInput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_sold&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_tokens_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_eth_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;recipient&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;token_addr&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;tokenToTokenSwapOutput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;max_tokens_sold&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;max_eth_sold&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;token_addr&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;tokenToTokenTransferOutput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;max_tokens_sold&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;max_eth_sold&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;recipient&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;token_addr&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;tokenToExchangeSwapInput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_sold&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_tokens_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_eth_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;exchange_addr&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;tokenToExchangeTransferInput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_sold&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_tokens_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;min_eth_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;recipient&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;exchange_addr&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;tokenToExchangeSwapOutput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;max_tokens_sold&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;max_eth_sold&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;exchange_addr&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;tokenToExchangeTransferOutput&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_bought&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;max_tokens_sold&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;max_eth_sold&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;deadline&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;recipient&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;exchange_addr&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;getEthToTokenInputPrice&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;eth_sold&quot;}], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;getEthToTokenOutputPrice&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_bought&quot;}], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;getTokenToEthInputPrice&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;tokens_sold&quot;}], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;getTokenToEthOutputPrice&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;eth_bought&quot;}], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;tokenAddress&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;factoryAddress&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;balanceOf&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_owner&quot;}], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;transfer&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;bool&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_to&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;_value&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;transferFrom&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;bool&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_from&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_to&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;_value&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;approve&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;bool&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_spender&quot;}, {&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;_value&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;allowance&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_owner&quot;}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_spender&quot;}], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;name&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;bytes32&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;symbol&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;bytes32&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;decimals&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;totalSupply&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/UniswapExchange.ts#L3">abi/UniswapExchange.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="uniswapfactory" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> Uniswap<wbr>Factory</h3>
					<div class="tsd-signature tsd-kind-icon">Uniswap<wbr>Factory<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&quot;name&quot;: &quot;NewExchange&quot;, &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;token&quot;, &quot;indexed&quot;: true}, {&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;exchange&quot;, &quot;indexed&quot;: true}], &quot;anonymous&quot;: false, &quot;type&quot;: &quot;event&quot;}, {&quot;name&quot;: &quot;initializeFactory&quot;, &quot;outputs&quot;: [], &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;template&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;createExchange&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;token&quot;}], &quot;constant&quot;: false, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;getExchange&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;token&quot;}], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;getToken&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;exchange&quot;}], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;getTokenWithId&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;token_id&quot;}], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;exchangeTemplate&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;address&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}, {&quot;name&quot;: &quot;tokenCount&quot;, &quot;outputs&quot;: [{&quot;type&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;out&quot;}], &quot;inputs&quot;: [], &quot;constant&quot;: true, &quot;payable&quot;: false, &quot;type&quot;: &quot;function&quot;}]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/UniswapFactory.ts#L3">abi/UniswapFactory.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="wrapped_nft_factory_address_mainnet" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> WRAPPED_<wbr>NFT_<wbr>FACTORY_<wbr>ADDRESS_<wbr>MAINNET</h3>
					<div class="tsd-signature tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>FACTORY_<wbr>ADDRESS_<wbr>MAINNET<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0xf11b5815b143472b7f7c52af0bfa6c6a2c8f40e1"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0xf11b5815b143472b7f7c52af0bfa6c6a2c8f40e1&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L21">constants.ts:21</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="wrapped_nft_factory_address_rinkeby" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> WRAPPED_<wbr>NFT_<wbr>FACTORY_<wbr>ADDRESS_<wbr>RINKEBY</h3>
					<div class="tsd-signature tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>FACTORY_<wbr>ADDRESS_<wbr>RINKEBY<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x94c71c87244b862cfd64d36af468309e4804ec09"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x94c71c87244b862cfd64d36af468309e4804ec09&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L22">constants.ts:22</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="wrapped_nft_liquidation_proxy_address_mainnet" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>PROXY_<wbr>ADDRESS_<wbr>MAINNET</h3>
					<div class="tsd-signature tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>PROXY_<wbr>ADDRESS_<wbr>MAINNET<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x995835145dd85c012f3e2d7d5561abd626658c04"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x995835145dd85c012f3e2d7d5561abd626658c04&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L23">constants.ts:23</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="wrapped_nft_liquidation_proxy_address_rinkeby" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>PROXY_<wbr>ADDRESS_<wbr>RINKEBY</h3>
					<div class="tsd-signature tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>PROXY_<wbr>ADDRESS_<wbr>RINKEBY<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0xaa775Eb452353aB17f7cf182915667c2598D43d3"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0xaa775Eb452353aB17f7cf182915667c2598D43d3&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L24">constants.ts:24</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="wyvern_exchange_address_mainnet" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> WYVERN_<wbr>EXCHANGE_<wbr>ADDRESS_<wbr>MAINNET</h3>
					<div class="tsd-signature tsd-kind-icon">WYVERN_<wbr>EXCHANGE_<wbr>ADDRESS_<wbr>MAINNET<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x7be8076f4ea4a4ad08075c2508e481d6c946d12b"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x7be8076f4ea4a4ad08075c2508e481d6c946d12b&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L13">constants.ts:13</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="wyvern_exchange_address_rinkeby" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> WYVERN_<wbr>EXCHANGE_<wbr>ADDRESS_<wbr>RINKEBY</h3>
					<div class="tsd-signature tsd-kind-icon">WYVERN_<wbr>EXCHANGE_<wbr>ADDRESS_<wbr>RINKEBY<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">"0x5206e78b21ce315ce284fb24cf05e0585a93b1d9"</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0x5206e78b21ce315ce284fb24cf05e0585a93b1d9&quot;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/constants.ts#L14">constants.ts:14</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="wrappednft" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> WrappedNFT</h3>
					<div class="tsd-signature tsd-kind-icon">WrappedNFT<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;uint256[]&quot;, &quot;name&quot;: &quot;_nftIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}, {&quot;internalType&quot;: &quot;address[]&quot;, &quot;name&quot;: &quot;_destinationAddresses&quot;, &quot;type&quot;: &quot;address[]&quot;}], &quot;name&quot;: &quot;burnTokensAndWithdrawNfts&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;name&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;string&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;spender&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;value&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;approve&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;bool&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_operator&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;_tokenId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;internalType&quot;: &quot;bytes&quot;, &quot;name&quot;: &quot;_data&quot;, &quot;type&quot;: &quot;bytes&quot;}], &quot;name&quot;: &quot;onERC721Received&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;bytes4&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bytes4&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;totalSupply&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;_numSlotsToCheck&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;batchRemoveWithdrawnNFTsFromStorage&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;value&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;transferFrom&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;bool&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;decimals&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;uint8&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint8&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;wyvernTokenTransferProxyAddress&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;uniswapFactoryAddress&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;spender&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;addedValue&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;increaseAllowance&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;bool&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;owner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;balanceOf&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;nftIsDepositedInContract&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;bool&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;symbol&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;string&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;string&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;uint256[]&quot;, &quot;name&quot;: &quot;_nftIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}], &quot;name&quot;: &quot;depositNftsAndMintTokens&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;spender&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;subtractedValue&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;decreaseAllowance&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;bool&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;value&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;transfer&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;bool&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;owner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;spender&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;allowance&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;nftCoreAddress&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;wrappedNFTLiquidationProxyAddress&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_nftCoreAddress&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_uniswapFactoryAddress&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_wyvernTokenTransferProxyAddress&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_wrappedNFTLiquidationProxyAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;constructor&quot;}, {&quot;payable&quot;: true, &quot;stateMutability&quot;: &quot;payable&quot;, &quot;type&quot;: &quot;fallback&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;nftId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;DepositNFTAndMintToken&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;nftId&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;BurnTokenAndWithdrawNFT&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: true, &quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: true, &quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;to&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;value&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;Transfer&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: true, &quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;owner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: true, &quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;spender&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;value&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;Approval&quot;, &quot;type&quot;: &quot;event&quot;}]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/WrappedNFT.ts#L3">abi/WrappedNFT.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="wrappednftfactory" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> WrappedNFTFactory</h3>
					<div class="tsd-signature tsd-kind-icon">WrappedNFTFactory<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;wyvernTokenTransferProxyAddress&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;uniswapFactoryAddress&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;_startIndex&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;_endIndex&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_previousFactoryAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;importMappingsFromPreviousFactory&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;idToNftContract&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;wrapperContractsCreated&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;uint256&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;wrapperContractToNftContract&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [], &quot;name&quot;: &quot;renounceOwnership&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_nftContractAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;createWrapperContract&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;owner&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;isOwner&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;bool&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_newWyvernTokenTransferProxyAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;updateWyvernTokenTransferProxyAddress&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_newWrappedNFTLiquidationProxyAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;updateWrappedNFTLiquidationProxyAddress&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;nftContractToWrapperContract&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_nftContractAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;getWrapperContractForNFTContractAddress&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_newUniswapFactoryAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;updateUniswapFactoryContractAddress&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;newOwner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;transferOwnership&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;wrappedNFTLiquidationProxyAddress&quot;, &quot;outputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;inputs&quot;: [{&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_uniswapFactoryAddress&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;_wyvernTokenTransferProxyAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;constructor&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;nftContract&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;wrapperContract&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;NewWrapperContractCreated&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;previousOwner&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;internalType&quot;: &quot;address&quot;, &quot;name&quot;: &quot;newOwner&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;OwnershipTransferred&quot;, &quot;type&quot;: &quot;event&quot;}]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/WrappedNFTFactory.ts#L3">abi/WrappedNFTFactory.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="wrappednftliquidationproxy" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> WrappedNFTLiquidation<wbr>Proxy</h3>
					<div class="tsd-signature tsd-kind-icon">WrappedNFTLiquidation<wbr>Proxy<span class="tsd-signature-symbol">:</span> <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a><span class="tsd-signature-symbol"> =&nbsp;[{&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_operator&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_from&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_tokenId&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;name&quot;: &quot;_data&quot;, &quot;type&quot;: &quot;bytes&quot;}], &quot;name&quot;: &quot;onERC721Received&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;bytes4&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_nftIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}, {&quot;name&quot;: &quot;_nftContractAddresses&quot;, &quot;type&quot;: &quot;address[]&quot;}, {&quot;name&quot;: &quot;_isMixedBatchOfNFTs&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;name&quot;: &quot;wrapNFTs&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;uniswapFactoryAddress&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: true, &quot;inputs&quot;: [], &quot;name&quot;: &quot;wrappedNFTFactoryAddress&quot;, &quot;outputs&quot;: [{&quot;name&quot;: &quot;&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;view&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_nftContractAddress&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_numTokensToPurchase&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;purchaseNFTs&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: true, &quot;stateMutability&quot;: &quot;payable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_nftIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}, {&quot;name&quot;: &quot;_nftContractAddresses&quot;, &quot;type&quot;: &quot;address[]&quot;}, {&quot;name&quot;: &quot;_isMixedBatchOfNFTs&quot;, &quot;type&quot;: &quot;bool&quot;}, {&quot;name&quot;: &quot;_uniswapSlippageAllowedInBasisPoints&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;liquidateNFTs&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;constant&quot;: false, &quot;inputs&quot;: [{&quot;name&quot;: &quot;_nftIds&quot;, &quot;type&quot;: &quot;uint256[]&quot;}, {&quot;name&quot;: &quot;_nftContractAddresses&quot;, &quot;type&quot;: &quot;address[]&quot;}, {&quot;name&quot;: &quot;_destinationAddresses&quot;, &quot;type&quot;: &quot;address[]&quot;}, {&quot;name&quot;: &quot;_isMixedBatchOfNFTs&quot;, &quot;type&quot;: &quot;bool&quot;}], &quot;name&quot;: &quot;unwrapNFTs&quot;, &quot;outputs&quot;: [], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;function&quot;}, {&quot;inputs&quot;: [{&quot;name&quot;: &quot;_wrappedNFTFactoryAddress&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;name&quot;: &quot;_uniswapFactoryAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;payable&quot;: false, &quot;stateMutability&quot;: &quot;nonpayable&quot;, &quot;type&quot;: &quot;constructor&quot;}, {&quot;payable&quot;: true, &quot;stateMutability&quot;: &quot;payable&quot;, &quot;type&quot;: &quot;fallback&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;numTokensMelted&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;nftContractAddress&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;ethReceived&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;LiquidateNFTs&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;numTokensBought&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;nftContractAddress&quot;, &quot;type&quot;: &quot;address&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;ethSpent&quot;, &quot;type&quot;: &quot;uint256&quot;}], &quot;name&quot;: &quot;PurchaseNFTs&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;numTokensWrapped&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;nftContractAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;WrapNFTs&quot;, &quot;type&quot;: &quot;event&quot;}, {&quot;anonymous&quot;: false, &quot;inputs&quot;: [{&quot;indexed&quot;: false, &quot;name&quot;: &quot;numTokensUnwrapped&quot;, &quot;type&quot;: &quot;uint256&quot;}, {&quot;indexed&quot;: false, &quot;name&quot;: &quot;nftContractAddress&quot;, &quot;type&quot;: &quot;address&quot;}], &quot;name&quot;: &quot;UnwrapNFTs&quot;, &quot;type&quot;: &quot;event&quot;}]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/WrappedNFTLiquidationProxy.ts#L3">abi/WrappedNFTLiquidationProxy.ts:3</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable">
					<a name="encodereplacementpattern" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> encode<wbr>Replacement<wbr>Pattern</h3>
					<div class="tsd-signature tsd-kind-icon">encode<wbr>Replacement<wbr>Pattern<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">ReplacementEncoder</span><span class="tsd-signature-symbol"> =&nbsp;WyvernProtocol.encodeReplacementPattern</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L27">utils/schema.ts:27</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-variable tsd-is-not-exported">
					<a name="txcallbacks" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> tx<wbr>Callbacks</h3>
					<div class="tsd-signature tsd-kind-icon">tx<wbr>Callbacks<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">object</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L118">utils/utils.ts:118</a></li>
						</ul>
					</aside>
					<div class="tsd-type-declaration">
						<h4>Type declaration</h4>
						<ul class="tsd-parameters">
							<li class="tsd-parameter-index-signature">
								<h5><span class="tsd-signature-symbol">[</span>key: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]: </span><a href="globals.html#txncallback" class="tsd-signature-type">TxnCallback</a><span class="tsd-signature-symbol">[]</span></h5>
							</li>
						</ul>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Functions</h2>
				<section class="tsd-panel tsd-member tsd-kind-function tsd-is-not-exported">
					<a name="_throworcontinue" class="tsd-anchor"></a>
					<h3>_throw<wbr>OrContinue</h3>
					<ul class="tsd-signatures tsd-kind-function tsd-is-not-exported">
						<li class="tsd-signature tsd-kind-icon">_throw<wbr>OrContinue<span class="tsd-signature-symbol">(</span>error<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Error</span>, retries<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">void</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/api.ts#L422">api.ts:422</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>error: <span class="tsd-signature-type">Error</span></h5>
								</li>
								<li>
									<h5>retries: <span class="tsd-signature-type">number</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">void</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="accountfromjson" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> account<wbr>FromJSON</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">account<wbr>FromJSON<span class="tsd-signature-symbol">(</span>account<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/openseaaccount.html" class="tsd-signature-type">OpenSeaAccount</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L281">utils/utils.ts:281</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>account: <span class="tsd-signature-type">any</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="interfaces/openseaaccount.html" class="tsd-signature-type">OpenSeaAccount</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="annotateerc20transferabi" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> annotateERC20<wbr>TransferABI</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">annotateERC20<wbr>TransferABI<span class="tsd-signature-symbol">(</span>asset<span class="tsd-signature-symbol">: </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">AnnotatedFunctionABI</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L79">utils/utils.ts:79</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>asset: <a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">AnnotatedFunctionABI</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="annotateerc721transferabi" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> annotateERC721<wbr>TransferABI</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">annotateERC721<wbr>TransferABI<span class="tsd-signature-symbol">(</span>asset<span class="tsd-signature-symbol">: </span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">AnnotatedFunctionABI</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L56">utils/utils.ts:56</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>asset: <a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">AnnotatedFunctionABI</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="assetbundlefromjson" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> asset<wbr>Bundle<wbr>FromJSON</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">asset<wbr>Bundle<wbr>FromJSON<span class="tsd-signature-symbol">(</span>asset_bundle<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/openseaassetbundle.html" class="tsd-signature-type">OpenSeaAssetBundle</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L296">utils/utils.ts:296</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>asset_bundle: <span class="tsd-signature-type">any</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="interfaces/openseaassetbundle.html" class="tsd-signature-type">OpenSeaAssetBundle</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="assetcontractfromjson" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> asset<wbr>Contract<wbr>FromJSON</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">asset<wbr>Contract<wbr>FromJSON<span class="tsd-signature-symbol">(</span>asset_contract<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/openseaassetcontract.html" class="tsd-signature-type">OpenSeaAssetContract</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L316">utils/utils.ts:316</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>asset_contract: <span class="tsd-signature-type">any</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="interfaces/openseaassetcontract.html" class="tsd-signature-type">OpenSeaAssetContract</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="asseteventfromjson" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> asset<wbr>Event<wbr>FromJSON</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">asset<wbr>Event<wbr>FromJSON<span class="tsd-signature-symbol">(</span>assetEvent<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/assetevent.html" class="tsd-signature-type">AssetEvent</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L256">utils/utils.ts:256</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>assetEvent: <span class="tsd-signature-type">any</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="interfaces/assetevent.html" class="tsd-signature-type">AssetEvent</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="assetfromjson" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> asset<wbr>FromJSON</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">asset<wbr>FromJSON<span class="tsd-signature-symbol">(</span>asset<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/openseaasset.html" class="tsd-signature-type">OpenSeaAsset</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L208">utils/utils.ts:208</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>asset: <span class="tsd-signature-type">any</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="interfaces/openseaasset.html" class="tsd-signature-type">OpenSeaAsset</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="assignorderstosides" class="tsd-anchor"></a>
					<h3>assign<wbr>Orders<wbr>ToSides</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">assign<wbr>Orders<wbr>ToSides<span class="tsd-signature-symbol">(</span>order<span class="tsd-signature-symbol">: </span><a href="interfaces/order.html" class="tsd-signature-type">Order</a>, matchingOrder<span class="tsd-signature-symbol">: </span><a href="interfaces/unsignedorder.html" class="tsd-signature-type">UnsignedOrder</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L861">utils/utils.ts:861</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>order: <a href="interfaces/order.html" class="tsd-signature-type">Order</a></h5>
								</li>
								<li>
									<h5>matchingOrder: <a href="interfaces/unsignedorder.html" class="tsd-signature-type">UnsignedOrder</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">object</span></h4>
							<ul class="tsd-parameters">
								<li class="tsd-parameter">
									<h5>buy<span class="tsd-signature-symbol">: </span><a href="interfaces/order.html" class="tsd-signature-type">Order</a></h5>
								</li>
								<li class="tsd-parameter">
									<h5>sell<span class="tsd-signature-symbol">: </span><a href="interfaces/order.html" class="tsd-signature-type">Order</a></h5>
								</li>
							</ul>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function tsd-is-not-exported">
					<a name="cansettleorder" class="tsd-anchor"></a>
					<h3>can<wbr>Settle<wbr>Order</h3>
					<ul class="tsd-signatures tsd-kind-function tsd-is-not-exported">
						<li class="tsd-signature tsd-kind-icon">can<wbr>Settle<wbr>Order<span class="tsd-signature-symbol">(</span>client<span class="tsd-signature-symbol">: </span><a href="classes/openseaport.html" class="tsd-signature-type">OpenSeaPort</a>, order<span class="tsd-signature-symbol">: </span><a href="interfaces/order.html" class="tsd-signature-type">Order</a>, matchingOrder<span class="tsd-signature-symbol">: </span><a href="interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L890">utils/utils.ts:890</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>client: <a href="classes/openseaport.html" class="tsd-signature-type">OpenSeaPort</a></h5>
								</li>
								<li>
									<h5>order: <a href="interfaces/order.html" class="tsd-signature-type">Order</a></h5>
								</li>
								<li>
									<h5>matchingOrder: <a href="interfaces/order.html" class="tsd-signature-type">Order</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="collectionfromjson" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> collection<wbr>FromJSON</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">collection<wbr>FromJSON<span class="tsd-signature-symbol">(</span>collection<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/openseacollection.html" class="tsd-signature-type">OpenSeaCollection</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L336">utils/utils.ts:336</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>collection: <span class="tsd-signature-type">any</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="interfaces/openseacollection.html" class="tsd-signature-type">OpenSeaCollection</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="confirmtransaction" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> confirm<wbr>Transaction</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">confirm<wbr>Transaction<span class="tsd-signature-symbol">(</span>web3<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Web3</span>, txHash<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Object</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L196">utils/utils.ts:196</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>web3: <span class="tsd-signature-type">Web3</span></h5>
								</li>
								<li>
									<h5>txHash: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Object</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="delay" class="tsd-anchor"></a>
					<h3>delay</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">delay<span class="tsd-signature-symbol">(</span>ms<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Object</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L917">utils/utils.ts:917</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>ms: <span class="tsd-signature-type">number</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Object</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="encodeatomicizedbuy" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> encode<wbr>Atomicized<wbr>Buy</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">encode<wbr>Atomicized<wbr>Buy<span class="tsd-signature-symbol">(</span>schemas<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">[]</span>, assets<span class="tsd-signature-symbol">: </span><span class="tsd-signature-symbol">(</span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">[]</span>, address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, wyvernProtocol<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span>, networkName<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Network</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L65">utils/schema.ts:65</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>schemas: <span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">[]</span></h5>
								</li>
								<li>
									<h5>assets: <span class="tsd-signature-symbol">(</span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">[]</span></h5>
								</li>
								<li>
									<h5>address: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5>wyvernProtocol: <span class="tsd-signature-type">any</span></h5>
								</li>
								<li>
									<h5>networkName: <span class="tsd-signature-type">Network</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">object</span></h4>
							<ul class="tsd-parameters">
								<li class="tsd-parameter">
									<h5>calldata<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>replacement<wbr>Pattern<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>target<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span></h5>
								</li>
							</ul>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function tsd-is-not-exported">
					<a name="encodeatomicizedcalldata" class="tsd-anchor"></a>
					<h3>encode<wbr>Atomicized<wbr>Calldata</h3>
					<ul class="tsd-signatures tsd-kind-function tsd-is-not-exported">
						<li class="tsd-signature tsd-kind-icon">encode<wbr>Atomicized<wbr>Calldata<span class="tsd-signature-symbol">(</span>atomicizer<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">WyvernAtomicizerContract</span>, schemas<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span>, assets<span class="tsd-signature-symbol">: </span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">[]</span>, address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, side<span class="tsd-signature-symbol">: </span><a href="enums/orderside.html" class="tsd-signature-type">OrderSide</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L211">utils/schema.ts:211</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>atomicizer: <span class="tsd-signature-type">WyvernAtomicizerContract</span></h5>
								</li>
								<li>
									<h5>schemas: <span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span></h5>
								</li>
								<li>
									<h5>assets: <a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">[]</span></h5>
								</li>
								<li>
									<h5>address: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5>side: <a href="enums/orderside.html" class="tsd-signature-type">OrderSide</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">object</span></h4>
							<ul class="tsd-parameters">
								<li class="tsd-parameter">
									<h5>atomicized<wbr>Calldata<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>atomicized<wbr>Replacement<wbr>Pattern<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span></h5>
								</li>
							</ul>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="encodeatomicizedsell" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> encode<wbr>Atomicized<wbr>Sell</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">encode<wbr>Atomicized<wbr>Sell<span class="tsd-signature-symbol">(</span>schemas<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">[]</span>, assets<span class="tsd-signature-symbol">: </span><span class="tsd-signature-symbol">(</span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">[]</span>, address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, wyvernProtocol<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span>, networkName<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Network</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L50">utils/schema.ts:50</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>schemas: <span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">[]</span></h5>
								</li>
								<li>
									<h5>assets: <span class="tsd-signature-symbol">(</span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">[]</span></h5>
								</li>
								<li>
									<h5>address: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5>wyvernProtocol: <span class="tsd-signature-type">any</span></h5>
								</li>
								<li>
									<h5>networkName: <span class="tsd-signature-type">Network</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">object</span></h4>
							<ul class="tsd-parameters">
								<li class="tsd-parameter">
									<h5>calldata<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>replacement<wbr>Pattern<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>target<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span></h5>
								</li>
							</ul>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="encodeatomicizedtransfer" class="tsd-anchor"></a>
					<h3>encode<wbr>Atomicized<wbr>Transfer</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">encode<wbr>Atomicized<wbr>Transfer<span class="tsd-signature-symbol">(</span>schemas<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span>, assets<span class="tsd-signature-symbol">: </span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">[]</span>, from<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, to<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, wyvernProtocol<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">WyvernProtocol</span>, networkName<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Network</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/limitedcallspec.html" class="tsd-signature-type">LimitedCallSpec</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L145">utils/schema.ts:145</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>schemas: <span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span></h5>
								</li>
								<li>
									<h5>assets: <a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">[]</span></h5>
								</li>
								<li>
									<h5>from: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5>to: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5>wyvernProtocol: <span class="tsd-signature-type">WyvernProtocol</span></h5>
								</li>
								<li>
									<h5>networkName: <span class="tsd-signature-type">Network</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="interfaces/limitedcallspec.html" class="tsd-signature-type">LimitedCallSpec</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="encodebuy" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> encode<wbr>Buy</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">encode<wbr>Buy<span class="tsd-signature-symbol">(</span>schema<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a><span class="tsd-signature-symbol">&gt;</span>, asset<span class="tsd-signature-symbol">: </span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a>, address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L78">utils/schema.ts:78</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>schema: <span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a><span class="tsd-signature-symbol">&gt;</span></h5>
								</li>
								<li>
									<h5>asset: <a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a></h5>
								</li>
								<li>
									<h5>address: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">object</span></h4>
							<ul class="tsd-parameters">
								<li class="tsd-parameter">
									<h5>calldata<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>replacement<wbr>Pattern<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>target<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="encodecall" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> encode<wbr>Call</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">encode<wbr>Call<span class="tsd-signature-symbol">(</span>abi<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">AnnotatedFunctionABI</span>, parameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L31">utils/schema.ts:31</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>abi: <span class="tsd-signature-type">AnnotatedFunctionABI</span></h5>
								</li>
								<li>
									<h5>parameters: <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">[]</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">string</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="encodedefaultcall" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> encode<wbr>Default<wbr>Call</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">encode<wbr>Default<wbr>Call<span class="tsd-signature-symbol">(</span>abi<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">AnnotatedFunctionABI</span>, address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L122">utils/schema.ts:122</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>abi: <span class="tsd-signature-type">AnnotatedFunctionABI</span></h5>
								</li>
								<li>
									<h5>address: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">string</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="encodeproxycall" class="tsd-anchor"></a>
					<h3>encode<wbr>Proxy<wbr>Call</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">encode<wbr>Proxy<wbr>Call<span class="tsd-signature-symbol">(</span>address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, howToCall<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">HowToCall</span>, calldata<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, shouldAssert<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L204">utils/schema.ts:204</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>address: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5>howToCall: <span class="tsd-signature-type">HowToCall</span></h5>
								</li>
								<li>
									<h5>calldata: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> shouldAssert: <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol"> =&nbsp;true</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">string</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="encodesell" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> encode<wbr>Sell</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">encode<wbr>Sell<span class="tsd-signature-symbol">(</span>schema<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a><span class="tsd-signature-symbol">&gt;</span>, asset<span class="tsd-signature-symbol">: </span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a>, address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L39">utils/schema.ts:39</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>schema: <span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a><span class="tsd-signature-symbol">&gt;</span></h5>
								</li>
								<li>
									<h5>asset: <a href="interfaces/wyvernnftasset.html" class="tsd-signature-type">WyvernNFTAsset</a><span class="tsd-signature-symbol"> | </span><a href="interfaces/wyvernftasset.html" class="tsd-signature-type">WyvernFTAsset</a></h5>
								</li>
								<li>
									<h5>address: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">object</span></h4>
							<ul class="tsd-parameters">
								<li class="tsd-parameter">
									<h5>calldata<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>replacement<wbr>Pattern<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
								</li>
								<li class="tsd-parameter">
									<h5>target<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="encodetransfercall" class="tsd-anchor"></a>
					<h3>encode<wbr>Transfer<wbr>Call</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">encode<wbr>Transfer<wbr>Call<span class="tsd-signature-symbol">(</span>transferAbi<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">AnnotatedFunctionABI</span>, from<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, to<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L179">utils/schema.ts:179</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>transferAbi: <span class="tsd-signature-type">AnnotatedFunctionABI</span></h5>
								</li>
								<li>
									<h5>from: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5>to: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">string</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="estimatecurrentprice" class="tsd-anchor"></a>
					<h3>estimate<wbr>Current<wbr>Price</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">estimate<wbr>Current<wbr>Price<span class="tsd-signature-symbol">(</span>order<span class="tsd-signature-symbol">: </span><a href="interfaces/order.html" class="tsd-signature-type">Order</a>, secondsToBacktrack<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span>, shouldRoundUp<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">BigNumber</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L732">utils/utils.ts:732</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>order: <a href="interfaces/order.html" class="tsd-signature-type">Order</a></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> secondsToBacktrack: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> =&nbsp;30</span></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> shouldRoundUp: <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol"> =&nbsp;true</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">BigNumber</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="estimategas" class="tsd-anchor"></a>
					<h3>estimate<wbr>Gas</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">estimate<wbr>Gas<span class="tsd-signature-symbol">(</span>web3<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Web3</span>, __namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L618">utils/utils.ts:618</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>web3: <span class="tsd-signature-type">Web3</span></h5>
								</li>
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>data<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>from<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>to<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>value<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">BigNumber</span></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="event" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> event</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">event<span class="tsd-signature-symbol">(</span>abi<span class="tsd-signature-symbol">: </span><a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a>, name<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">EventAbi</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/contracts.ts#L15">contracts.ts:15</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>abi: <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a></h5>
								</li>
								<li>
									<h5>name: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">EventAbi</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="getcurrentgasprice" class="tsd-anchor"></a>
					<h3>get<wbr>Current<wbr>Gas<wbr>Price</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Current<wbr>Gas<wbr>Price<span class="tsd-signature-symbol">(</span>web3<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Web3</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L637">utils/utils.ts:637</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>web3: <span class="tsd-signature-type">Web3</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="getmethod" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> get<wbr>Method</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Method<span class="tsd-signature-symbol">(</span>abi<span class="tsd-signature-symbol">: </span><a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a>, name<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">AnnotatedFunctionABI</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/contracts.ts#L5">contracts.ts:5</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>abi: <a href="globals.html#partialreadonlycontractabi" class="tsd-signature-type">PartialReadonlyContractAbi</a></h5>
								</li>
								<li>
									<h5>name: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">AnnotatedFunctionABI</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="getnoncompliantapprovaladdress" class="tsd-anchor"></a>
					<h3>get<wbr>Non<wbr>Compliant<wbr>Approval<wbr>Address</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Non<wbr>Compliant<wbr>Approval<wbr>Address<span class="tsd-signature-symbol">(</span>erc721Contract<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">ContractInstance</span>, tokenId<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, accountAddress<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L951">utils/utils.ts:951</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>erc721Contract: <span class="tsd-signature-type">ContractInstance</span></h5>
								</li>
								<li>
									<h5>tokenId: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5>accountAddress: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="getorderhash" class="tsd-anchor"></a>
					<h3>get<wbr>Order<wbr>Hash</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Order<wbr>Hash<span class="tsd-signature-symbol">(</span>order<span class="tsd-signature-symbol">: </span><a href="interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L842">utils/utils.ts:842</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>order: <a href="interfaces/unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">any</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="gettransferfeesettings" class="tsd-anchor"></a>
					<h3>get<wbr>Transfer<wbr>Fee<wbr>Settings</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Transfer<wbr>Fee<wbr>Settings<span class="tsd-signature-symbol">(</span>web3<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Web3</span>, __namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L647">utils/utils.ts:647</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>web3: <span class="tsd-signature-type">Web3</span></h5>
								</li>
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>asset<span class="tsd-signature-symbol">: </span><a href="interfaces/asset.html" class="tsd-signature-type">Asset</a></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="getwyvernasset" class="tsd-anchor"></a>
					<h3>get<wbr>Wyvern<wbr>Asset</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Wyvern<wbr>Asset<span class="tsd-signature-symbol">(</span>schema<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">&gt;</span>, asset<span class="tsd-signature-symbol">: </span><a href="interfaces/asset.html" class="tsd-signature-type">Asset</a>, quantity<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L772">utils/utils.ts:772</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>schema: <span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">&gt;</span></h5>
								</li>
								<li>
									<h5>asset: <a href="interfaces/asset.html" class="tsd-signature-type">Asset</a></h5>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagDefault value">Default value</span> quantity: <span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol"> =&nbsp;new BigNumber(1)</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="getwyvernbundle" class="tsd-anchor"></a>
					<h3>get<wbr>Wyvern<wbr>Bundle</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">get<wbr>Wyvern<wbr>Bundle<span class="tsd-signature-symbol">(</span>assets<span class="tsd-signature-symbol">: </span><a href="interfaces/asset.html" class="tsd-signature-type">Asset</a><span class="tsd-signature-symbol">[]</span>, schemas<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span>, quantities<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/wyvernbundle.html" class="tsd-signature-type">WyvernBundle</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L797">utils/utils.ts:797</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>assets: <a href="interfaces/asset.html" class="tsd-signature-type">Asset</a><span class="tsd-signature-symbol">[]</span></h5>
								</li>
								<li>
									<h5>schemas: <span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Schema</span><span class="tsd-signature-symbol">&lt;</span><a href="globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span></h5>
								</li>
								<li>
									<h5>quantities: <span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">[]</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="interfaces/wyvernbundle.html" class="tsd-signature-type">WyvernBundle</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="iscontractaddress" class="tsd-anchor"></a>
					<h3>is<wbr>Contract<wbr>Address</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">is<wbr>Contract<wbr>Address<span class="tsd-signature-symbol">(</span>web3<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Web3</span>, address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L516">utils/utils.ts:516</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>web3: <span class="tsd-signature-type">Web3</span></h5>
								</li>
								<li>
									<h5>address: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="makebignumber" class="tsd-anchor"></a>
					<h3>make<wbr>Big<wbr>Number</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">make<wbr>Big<wbr>Number<span class="tsd-signature-symbol">(</span>arg<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">BigNumber</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L526">utils/utils.ts:526</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>arg: <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">BigNumber</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">BigNumber</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="ondeprecated" class="tsd-anchor"></a>
					<h3>on<wbr>Deprecated</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">on<wbr>Deprecated<span class="tsd-signature-symbol">(</span>msg<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">void</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L943">utils/utils.ts:943</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>msg: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">void</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="orderfromjson" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> order<wbr>FromJSON</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">order<wbr>FromJSON<span class="tsd-signature-symbol">(</span>order<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/order.html" class="tsd-signature-type">Order</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L379">utils/utils.ts:379</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>order: <span class="tsd-signature-type">any</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="interfaces/order.html" class="tsd-signature-type">Order</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="ordertojson" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> order<wbr>ToJSON</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">order<wbr>ToJSON<span class="tsd-signature-symbol">(</span>order<span class="tsd-signature-symbol">: </span><a href="interfaces/order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/orderjson.html" class="tsd-signature-type">OrderJSON</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L442">utils/utils.ts:442</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>order: <a href="interfaces/order.html" class="tsd-signature-type">Order</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="interfaces/orderjson.html" class="tsd-signature-type">OrderJSON</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function tsd-is-not-exported">
					<a name="parsesignaturehex" class="tsd-anchor"></a>
					<h3>parse<wbr>Signature<wbr>Hex</h3>
					<ul class="tsd-signatures tsd-kind-function tsd-is-not-exported">
						<li class="tsd-signature tsd-kind-icon">parse<wbr>Signature<wbr>Hex<span class="tsd-signature-symbol">(</span>signature<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">ECSignature</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L678">utils/utils.ts:678</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>signature: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">ECSignature</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="personalsignasync" class="tsd-anchor"></a>
					<h3>personal<wbr>Sign<wbr>Async</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">personal<wbr>Sign<wbr>Async<span class="tsd-signature-symbol">(</span>web3<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Web3</span>, message<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, signerAddress<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">ECSignature</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L492">utils/utils.ts:492</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>web3: <span class="tsd-signature-type">Web3</span></h5>
								</li>
								<li>
									<h5>message: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5>signerAddress: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">ECSignature</span><span class="tsd-signature-symbol">&gt;</span></h4>
							<p>A signature if provider can sign, otherwise null</p>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function tsd-has-type-parameter tsd-is-not-exported">
					<a name="promisify" class="tsd-anchor"></a>
					<h3>promisify</h3>
					<ul class="tsd-signatures tsd-kind-function tsd-has-type-parameter tsd-is-not-exported">
						<li class="tsd-signature tsd-kind-icon">promisify&lt;T&gt;<span class="tsd-signature-symbol">(</span>inner<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">function</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">T</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L125">utils/utils.ts:125</a></li>
								</ul>
							</aside>
							<h4 class="tsd-type-parameters-title">Type parameters</h4>
							<ul class="tsd-type-parameters">
								<li>
									<h4>T</h4>
								</li>
							</ul>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>inner: <span class="tsd-signature-type">function</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter-siganture">
											<ul class="tsd-signatures tsd-kind-type-literal tsd-is-not-exported">
												<li class="tsd-signature tsd-kind-icon"><span class="tsd-signature-symbol">(</span>fn<span class="tsd-signature-symbol">: </span><a href="globals.html#web3callback" class="tsd-signature-type">Web3Callback</a><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">T</span><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">void</span></li>
											</ul>
											<ul class="tsd-descriptions">
												<li class="tsd-description">
													<h4 class="tsd-parameters-title">Parameters</h4>
													<ul class="tsd-parameters">
														<li>
															<h5>fn: <a href="globals.html#web3callback" class="tsd-signature-type">Web3Callback</a><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">T</span><span class="tsd-signature-symbol">&gt;</span></h5>
														</li>
													</ul>
													<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">void</span></h4>
												</li>
											</ul>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">T</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function tsd-has-type-parameter">
					<a name="promisifycall" class="tsd-anchor"></a>
					<h3>promisify<wbr>Call</h3>
					<ul class="tsd-signatures tsd-kind-function tsd-has-type-parameter">
						<li class="tsd-signature tsd-kind-icon">promisify<wbr>Call&lt;T&gt;<span class="tsd-signature-symbol">(</span>callback<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">function</span>, onError<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">function</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">T</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L145">utils/utils.ts:145</a></li>
								</ul>
							</aside>
							<h4 class="tsd-type-parameters-title">Type parameters</h4>
							<ul class="tsd-type-parameters">
								<li>
									<h4>T</h4>
								</li>
							</ul>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>callback: <span class="tsd-signature-type">function</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter-siganture">
											<ul class="tsd-signatures tsd-kind-type-literal tsd-is-not-exported">
												<li class="tsd-signature tsd-kind-icon"><span class="tsd-signature-symbol">(</span>fn<span class="tsd-signature-symbol">: </span><a href="globals.html#web3callback" class="tsd-signature-type">Web3Callback</a><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">T</span><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">void</span></li>
											</ul>
											<ul class="tsd-descriptions">
												<li class="tsd-description">
													<h4 class="tsd-parameters-title">Parameters</h4>
													<ul class="tsd-parameters">
														<li>
															<h5>fn: <a href="globals.html#web3callback" class="tsd-signature-type">Web3Callback</a><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">T</span><span class="tsd-signature-symbol">&gt;</span></h5>
														</li>
													</ul>
													<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">void</span></h4>
												</li>
											</ul>
										</li>
									</ul>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagOptional">Optional</span> onError: <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">function</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">T</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="rawcall" class="tsd-anchor"></a>
					<h3>raw<wbr>Call</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">raw<wbr>Call<span class="tsd-signature-symbol">(</span>web3<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Web3</span>, __namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span>, onError<span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">function</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L586">utils/utils.ts:586</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>web3: <span class="tsd-signature-type">Web3</span></h5>
								</li>
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>data<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>from<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>to<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
									</ul>
								</li>
								<li>
									<h5><span class="tsd-flag ts-flagOptional">Optional</span> onError: <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">function</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="requireordercalldatacanmatch" class="tsd-anchor"></a>
					<h3>require<wbr>Order<wbr>Calldata<wbr>Can<wbr>Match</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">require<wbr>Order<wbr>Calldata<wbr>Can<wbr>Match<span class="tsd-signature-symbol">(</span>client<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">WyvernProtocol</span>, __namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/debugging.ts#L105">debugging.ts:105</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>client: <span class="tsd-signature-type">WyvernProtocol</span></h5>
								</li>
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>buy<span class="tsd-signature-symbol">: </span><a href="interfaces/order.html" class="tsd-signature-type">Order</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>sell<span class="tsd-signature-symbol">: </span><a href="interfaces/order.html" class="tsd-signature-type">Order</a></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="requireorderscanmatch" class="tsd-anchor"></a>
					<h3>require<wbr>Orders<wbr>Can<wbr>Match</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">require<wbr>Orders<wbr>Can<wbr>Match<span class="tsd-signature-symbol">(</span>client<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">WyvernProtocol</span>, __namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/debugging.ts#L34">debugging.ts:34</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>client: <span class="tsd-signature-type">WyvernProtocol</span></h5>
								</li>
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>account<wbr>Address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>buy<span class="tsd-signature-symbol">: </span><a href="interfaces/order.html" class="tsd-signature-type">Order</a></h5>
										</li>
										<li class="tsd-parameter">
											<h5>sell<span class="tsd-signature-symbol">: </span><a href="interfaces/order.html" class="tsd-signature-type">Order</a></h5>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">void</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="sendrawtransaction" class="tsd-anchor"></a>
					<h3>send<wbr>Raw<wbr>Transaction</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">send<wbr>Raw<wbr>Transaction<span class="tsd-signature-symbol">(</span>web3<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Web3</span>, __namedParameters<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">object</span>, onError<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">function</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L547">utils/utils.ts:547</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>web3: <span class="tsd-signature-type">Web3</span></h5>
								</li>
								<li>
									<h5>__namedParameters: <span class="tsd-signature-type">object</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter">
											<h5>data<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>from<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>gas<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">BigNumber</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>gas<wbr>Price<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">BigNumber</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>to<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></h5>
										</li>
										<li class="tsd-parameter">
											<h5>value<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">BigNumber</span></h5>
										</li>
									</ul>
								</li>
								<li>
									<h5>onError: <span class="tsd-signature-type">function</span></h5>
									<ul class="tsd-parameters">
										<li class="tsd-parameter-siganture">
											<ul class="tsd-signatures tsd-kind-type-literal tsd-is-not-exported">
												<li class="tsd-signature tsd-kind-icon"><span class="tsd-signature-symbol">(</span>error<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Error</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">void</span></li>
											</ul>
											<ul class="tsd-descriptions">
												<li class="tsd-description">
													<h4 class="tsd-parameters-title">Parameters</h4>
													<ul class="tsd-parameters">
														<li>
															<h5>error: <span class="tsd-signature-type">Error</span></h5>
														</li>
													</ul>
													<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">void</span></h4>
												</li>
											</ul>
										</li>
									</ul>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="tokenfromjson" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> token<wbr>FromJSON</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">token<wbr>FromJSON<span class="tsd-signature-symbol">(</span>token<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/openseafungibletoken.html" class="tsd-signature-type">OpenSeaFungibleToken</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L364">utils/utils.ts:364</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>token: <span class="tsd-signature-type">any</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="interfaces/openseafungibletoken.html" class="tsd-signature-type">OpenSeaFungibleToken</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function tsd-is-not-exported">
					<a name="track" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> track</h3>
					<ul class="tsd-signatures tsd-kind-function tsd-is-not-exported">
						<li class="tsd-signature tsd-kind-icon">track<span class="tsd-signature-symbol">(</span>web3<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Web3</span>, txHash<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span>, onFinalized<span class="tsd-signature-symbol">: </span><a href="globals.html#txncallback" class="tsd-signature-type">TxnCallback</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">void</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L170">utils/utils.ts:170</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>web3: <span class="tsd-signature-type">Web3</span></h5>
								</li>
								<li>
									<h5>txHash: <span class="tsd-signature-type">string</span></h5>
								</li>
								<li>
									<h5>onFinalized: <a href="globals.html#txncallback" class="tsd-signature-type">TxnCallback</a></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">void</span></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="transactionfromjson" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> transaction<wbr>FromJSON</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">transaction<wbr>FromJSON<span class="tsd-signature-symbol">(</span>transaction<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/transaction.html" class="tsd-signature-type">Transaction</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L267">utils/utils.ts:267</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>transaction: <span class="tsd-signature-type">any</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="interfaces/transaction.html" class="tsd-signature-type">Transaction</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="userfromjson" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> user<wbr>FromJSON</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">user<wbr>FromJSON<span class="tsd-signature-symbol">(</span>user<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><a href="interfaces/openseauser.html" class="tsd-signature-type">OpenSeaUser</a></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L290">utils/utils.ts:290</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>user: <span class="tsd-signature-type">any</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <a href="interfaces/openseauser.html" class="tsd-signature-type">OpenSeaUser</a></h4>
						</li>
					</ul>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-function">
					<a name="validateandformatwalletaddress" class="tsd-anchor"></a>
					<h3>validate<wbr>And<wbr>Format<wbr>Wallet<wbr>Address</h3>
					<ul class="tsd-signatures tsd-kind-function">
						<li class="tsd-signature tsd-kind-icon">validate<wbr>And<wbr>Format<wbr>Wallet<wbr>Address<span class="tsd-signature-symbol">(</span>web3<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Web3</span>, address<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></li>
					</ul>
					<ul class="tsd-descriptions">
						<li class="tsd-description">
							<aside class="tsd-sources">
								<ul>
									<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L926">utils/utils.ts:926</a></li>
								</ul>
							</aside>
							<h4 class="tsd-parameters-title">Parameters</h4>
							<ul class="tsd-parameters">
								<li>
									<h5>web3: <span class="tsd-signature-type">Web3</span></h5>
								</li>
								<li>
									<h5>address: <span class="tsd-signature-type">string</span></h5>
								</li>
							</ul>
							<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">string</span></h4>
						</li>
					</ul>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Object literals</h2>
				<section class="tsd-panel tsd-member tsd-kind-object-literal">
					<a name="decentraland_auction_config" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> DECENTRALAND_<wbr>AUCTION_<wbr>CONFIG</h3>
					<div class="tsd-signature tsd-kind-icon">DECENTRALAND_<wbr>AUCTION_<wbr>CONFIG<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">object</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/contracts.ts#L25">contracts.ts:25</a></li>
						</ul>
					</aside>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="decentraland_auction_config.1" class="tsd-anchor"></a>
						<h3>1</h3>
						<div class="tsd-signature tsd-kind-icon">1<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> =&nbsp;&quot;0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d&quot;</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/contracts.ts#L26">contracts.ts:26</a></li>
							</ul>
						</aside>
					</section>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-object-literal tsd-is-not-exported">
					<a name="schema_name_to_asset_contract_type" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> SCHEMA_<wbr>NAME_<wbr>TO_<wbr>ASSET_<wbr>CONTRACT_<wbr>TYPE</h3>
					<div class="tsd-signature tsd-kind-icon">SCHEMA_<wbr>NAME_<wbr>TO_<wbr>ASSET_<wbr>CONTRACT_<wbr>TYPE<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">object</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L108">utils/utils.ts:108</a></li>
						</ul>
					</aside>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal tsd-is-not-exported">
						<a name="schema_name_to_asset_contract_type.__computed" class="tsd-anchor"></a>
						<h3>__computed</h3>
						<div class="tsd-signature tsd-kind-icon">__computed<span class="tsd-signature-symbol">:</span> <a href="enums/assetcontracttype.html#nonfungible" class="tsd-signature-type">NonFungible</a><span class="tsd-signature-symbol"> =&nbsp;AssetContractType.NonFungible</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L109">utils/utils.ts:109</a></li>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L110">utils/utils.ts:110</a></li>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L111">utils/utils.ts:111</a></li>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L112">utils/utils.ts:112</a></li>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/utils.ts#L113">utils/utils.ts:113</a></li>
							</ul>
						</aside>
					</section>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-object-literal tsd-is-not-exported">
					<a name="salekindinterface" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> Sale<wbr>Kind<wbr>Interface</h3>
					<div class="tsd-signature tsd-kind-icon">Sale<wbr>Kind<wbr>Interface<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">object</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/debugging.ts#L15">debugging.ts:15</a></li>
						</ul>
					</aside>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal tsd-is-not-exported">
						<a name="salekindinterface.salekind" class="tsd-anchor"></a>
						<h3>Sale<wbr>Kind</h3>
						<div class="tsd-signature tsd-kind-icon">Sale<wbr>Kind<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">SaleKind</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/debugging.ts#L17">debugging.ts:17</a></li>
							</ul>
						</aside>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal tsd-is-not-exported">
						<a name="salekindinterface.side" class="tsd-anchor"></a>
						<h3>Side</h3>
						<div class="tsd-signature tsd-kind-icon">Side<span class="tsd-signature-symbol">:</span> <a href="enums/side.html" class="tsd-signature-type">Side</a></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/debugging.ts#L16">debugging.ts:16</a></li>
							</ul>
						</aside>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-function tsd-parent-kind-object-literal tsd-is-not-exported">
						<a name="salekindinterface.cansettleorder" class="tsd-anchor"></a>
						<h3>can<wbr>Settle<wbr>Order</h3>
						<ul class="tsd-signatures tsd-kind-function tsd-parent-kind-object-literal tsd-is-not-exported">
							<li class="tsd-signature tsd-kind-icon">can<wbr>Settle<wbr>Order<span class="tsd-signature-symbol">(</span>listingTime<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span>, expirationTime<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span></li>
						</ul>
						<ul class="tsd-descriptions">
							<li class="tsd-description">
								<aside class="tsd-sources">
									<ul>
										<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/debugging.ts#L23">debugging.ts:23</a></li>
									</ul>
								</aside>
								<h4 class="tsd-parameters-title">Parameters</h4>
								<ul class="tsd-parameters">
									<li>
										<h5>listingTime: <span class="tsd-signature-type">number</span></h5>
									</li>
									<li>
										<h5>expirationTime: <span class="tsd-signature-type">number</span></h5>
									</li>
								</ul>
								<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">boolean</span></h4>
							</li>
						</ul>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-function tsd-parent-kind-object-literal tsd-is-not-exported">
						<a name="salekindinterface.validateparameters" class="tsd-anchor"></a>
						<h3>validate<wbr>Parameters</h3>
						<ul class="tsd-signatures tsd-kind-function tsd-parent-kind-object-literal tsd-is-not-exported">
							<li class="tsd-signature tsd-kind-icon">validate<wbr>Parameters<span class="tsd-signature-symbol">(</span>saleKind<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">SaleKind</span>, expirationTime<span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">boolean</span></li>
						</ul>
						<ul class="tsd-descriptions">
							<li class="tsd-description">
								<aside class="tsd-sources">
									<ul>
										<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/debugging.ts#L19">debugging.ts:19</a></li>
									</ul>
								</aside>
								<h4 class="tsd-parameters-title">Parameters</h4>
								<ul class="tsd-parameters">
									<li>
										<h5>saleKind: <span class="tsd-signature-type">SaleKind</span></h5>
									</li>
									<li>
										<h5>expirationTime: <span class="tsd-signature-type">number</span></h5>
									</li>
								</ul>
								<h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">boolean</span></h4>
							</li>
						</ul>
					</section>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-object-literal">
					<a name="proxyabi" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> proxyABI</h3>
					<div class="tsd-signature tsd-kind-icon">proxyABI<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">object</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L1">abi/Proxy.ts:1</a></li>
						</ul>
					</aside>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="proxyabi.constant" class="tsd-anchor"></a>
						<h3>constant</h3>
						<div class="tsd-signature tsd-kind-icon">constant<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol"> =&nbsp;false</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L1">abi/Proxy.ts:1</a></li>
							</ul>
						</aside>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="proxyabi.inputs" class="tsd-anchor"></a>
						<h3>inputs</h3>
						<div class="tsd-signature tsd-kind-icon">inputs<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol"> =&nbsp;[{&#x27;name&#x27;: &#x27;dest&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;name&#x27;: &#x27;howToCall&#x27;, &#x27;type&#x27;: &#x27;uint8&#x27;}, {&#x27;name&#x27;: &#x27;calldata&#x27;, &#x27;type&#x27;: &#x27;bytes&#x27;}]</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L1">abi/Proxy.ts:1</a></li>
							</ul>
						</aside>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="proxyabi.name" class="tsd-anchor"></a>
						<h3>name</h3>
						<div class="tsd-signature tsd-kind-icon">name<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> =&nbsp;&quot;proxy&quot;</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L1">abi/Proxy.ts:1</a></li>
							</ul>
						</aside>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="proxyabi.outputs" class="tsd-anchor"></a>
						<h3>outputs</h3>
						<div class="tsd-signature tsd-kind-icon">outputs<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol"> =&nbsp;[{&#x27;name&#x27;: &#x27;success&#x27;, &#x27;type&#x27;: &#x27;bool&#x27;}]</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L1">abi/Proxy.ts:1</a></li>
							</ul>
						</aside>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="proxyabi.payable" class="tsd-anchor"></a>
						<h3>payable</h3>
						<div class="tsd-signature tsd-kind-icon">payable<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol"> =&nbsp;false</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L1">abi/Proxy.ts:1</a></li>
							</ul>
						</aside>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="proxyabi.statemutability" class="tsd-anchor"></a>
						<h3>state<wbr>Mutability</h3>
						<div class="tsd-signature tsd-kind-icon">state<wbr>Mutability<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> =&nbsp;&quot;nonpayable&quot;</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L1">abi/Proxy.ts:1</a></li>
							</ul>
						</aside>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="proxyabi.type" class="tsd-anchor"></a>
						<h3>type</h3>
						<div class="tsd-signature tsd-kind-icon">type<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> =&nbsp;&quot;function&quot;</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L1">abi/Proxy.ts:1</a></li>
							</ul>
						</aside>
					</section>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-object-literal">
					<a name="proxyassertabi" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagConst">Const</span> proxy<wbr>AssertABI</h3>
					<div class="tsd-signature tsd-kind-icon">proxy<wbr>AssertABI<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">object</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L3">abi/Proxy.ts:3</a></li>
						</ul>
					</aside>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="proxyassertabi.constant" class="tsd-anchor"></a>
						<h3>constant</h3>
						<div class="tsd-signature tsd-kind-icon">constant<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol"> =&nbsp;false</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L3">abi/Proxy.ts:3</a></li>
							</ul>
						</aside>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="proxyassertabi.inputs" class="tsd-anchor"></a>
						<h3>inputs</h3>
						<div class="tsd-signature tsd-kind-icon">inputs<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol"> =&nbsp;[{&#x27;name&#x27;: &#x27;dest&#x27;, &#x27;type&#x27;: &#x27;address&#x27;}, {&#x27;name&#x27;: &#x27;howToCall&#x27;, &#x27;type&#x27;: &#x27;uint8&#x27;}, {&#x27;name&#x27;: &#x27;calldata&#x27;, &#x27;type&#x27;: &#x27;bytes&#x27;}]</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L3">abi/Proxy.ts:3</a></li>
							</ul>
						</aside>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="proxyassertabi.name" class="tsd-anchor"></a>
						<h3>name</h3>
						<div class="tsd-signature tsd-kind-icon">name<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> =&nbsp;&quot;proxyAssert&quot;</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L3">abi/Proxy.ts:3</a></li>
							</ul>
						</aside>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="proxyassertabi.outputs" class="tsd-anchor"></a>
						<h3>outputs</h3>
						<div class="tsd-signature tsd-kind-icon">outputs<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">never</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol"> =&nbsp;[]</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L3">abi/Proxy.ts:3</a></li>
							</ul>
						</aside>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="proxyassertabi.payable" class="tsd-anchor"></a>
						<h3>payable</h3>
						<div class="tsd-signature tsd-kind-icon">payable<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol"> =&nbsp;false</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L3">abi/Proxy.ts:3</a></li>
							</ul>
						</aside>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="proxyassertabi.statemutability" class="tsd-anchor"></a>
						<h3>state<wbr>Mutability</h3>
						<div class="tsd-signature tsd-kind-icon">state<wbr>Mutability<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> =&nbsp;&quot;nonpayable&quot;</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L3">abi/Proxy.ts:3</a></li>
							</ul>
						</aside>
					</section>
					<section class="tsd-panel tsd-member tsd-kind-variable tsd-parent-kind-object-literal">
						<a name="proxyassertabi.type" class="tsd-anchor"></a>
						<h3>type</h3>
						<div class="tsd-signature tsd-kind-icon">type<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> =&nbsp;&quot;function&quot;</span></div>
						<aside class="tsd-sources">
							<ul>
								<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/abi/Proxy.ts#L3">abi/Proxy.ts:3</a></li>
							</ul>
						</aside>
					</section>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals current ">
						<a href="globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
					<li class=" tsd-kind-enum">
						<a href="enums/assetcontracttype.html" class="tsd-kind-icon">Asset<wbr>Contract<wbr>Type</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/asseteventtype.html" class="tsd-kind-icon">Asset<wbr>Event<wbr>Type</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/auctiontype.html" class="tsd-kind-icon">Auction<wbr>Type</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/eventtype.html" class="tsd-kind-icon">Event<wbr>Type</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/feemethod.html" class="tsd-kind-icon">Fee<wbr>Method</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/orderside.html" class="tsd-kind-icon">Order<wbr>Side</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/salekind.html" class="tsd-kind-icon">Sale<wbr>Kind</a>
					</li>
					<li class=" tsd-kind-enum tsd-is-not-exported">
						<a href="enums/side.html" class="tsd-kind-icon">Side</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/tokenstandardversion.html" class="tsd-kind-icon">Token<wbr>Standard<wbr>Version</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/wyvernassetlocation.html" class="tsd-kind-icon">Wyvern<wbr>Asset<wbr>Location</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/wyvernschemaname.html" class="tsd-kind-icon">Wyvern<wbr>Schema<wbr>Name</a>
					</li>
					<li class=" tsd-kind-class">
						<a href="classes/openseaapi.html" class="tsd-kind-icon">Open<wbr>SeaAPI</a>
					</li>
					<li class=" tsd-kind-class">
						<a href="classes/openseaport.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Port</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/asset.html" class="tsd-kind-icon">Asset</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/assetevent.html" class="tsd-kind-icon">Asset<wbr>Event</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/callspec.html" class="tsd-kind-icon">Call<wbr>Spec</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/computedfees.html" class="tsd-kind-icon">Computed<wbr>Fees</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/eventdata.html" class="tsd-kind-icon">Event<wbr>Data</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/exchangemetadataforasset.html" class="tsd-kind-icon">Exchange<wbr>Metadata<wbr>For<wbr>Asset</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/exchangemetadataforbundle.html" class="tsd-kind-icon">Exchange<wbr>Metadata<wbr>For<wbr>Bundle</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/limitedcallspec.html" class="tsd-kind-icon">Limited<wbr>Call<wbr>Spec</a>
					</li>
					<li class=" tsd-kind-interface tsd-is-not-exported">
						<a href="interfaces/numericaltraitstats.html" class="tsd-kind-icon">Numerical<wbr>Trait<wbr>Stats</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaapiconfig.html" class="tsd-kind-icon">Open<wbr>SeaAPIConfig</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaaccount.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Account</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaasset.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaassetbundle.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Bundle</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaassetbundlejson.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>BundleJSON</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaassetbundlequery.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Bundle<wbr>Query</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaassetcontract.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Contract</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaassetquery.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Query</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseacollection.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Collection</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseafees.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Fees</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseafungibletoken.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Fungible<wbr>Token</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseafungibletokenquery.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Fungible<wbr>Token<wbr>Query</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseatraitstats.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Trait<wbr>Stats</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseauser.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>User</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/order.html" class="tsd-kind-icon">Order</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/orderjson.html" class="tsd-kind-icon">OrderJSON</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/orderquery.html" class="tsd-kind-icon">Order<wbr>Query</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/orderbookresponse.html" class="tsd-kind-icon">Orderbook<wbr>Response</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/partialabidefinition.html" class="tsd-kind-icon">Partial<wbr>Abi<wbr>Definition</a>
					</li>
					<li class=" tsd-kind-interface tsd-is-not-exported">
						<a href="interfaces/stringtraitstats.html" class="tsd-kind-icon">String<wbr>Trait<wbr>Stats</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/transaction.html" class="tsd-kind-icon">Transaction</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/unhashedorder.html" class="tsd-kind-icon">Unhashed<wbr>Order</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/unsignedorder.html" class="tsd-kind-icon">Unsigned<wbr>Order</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/wyvernbundle.html" class="tsd-kind-icon">Wyvern<wbr>Bundle</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/wyvernftasset.html" class="tsd-kind-icon">WyvernFTAsset</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/wyvernnftasset.html" class="tsd-kind-icon">WyvernNFTAsset</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#atomicizedbuyencoder" class="tsd-kind-icon">Atomicized<wbr>Buy<wbr>Encoder</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#atomicizedsellencoder" class="tsd-kind-icon">Atomicized<wbr>Sell<wbr>Encoder</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#defaultcallencoder" class="tsd-kind-icon">Default<wbr>Call<wbr>Encoder</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#encoder" class="tsd-kind-icon">Encoder</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#exchangemetadata" class="tsd-kind-icon">Exchange<wbr>Metadata</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#fungibletoken" class="tsd-kind-icon">Fungible<wbr>Token</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#fungibletokenquery" class="tsd-kind-icon">Fungible<wbr>Token<wbr>Query</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#partialreadonlycontractabi" class="tsd-kind-icon">Partial<wbr>Readonly<wbr>Contract<wbr>Abi</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#txncallback" class="tsd-kind-icon">Txn<wbr>Callback</a>
					</li>
					<li class=" tsd-kind-type-alias tsd-has-type-parameter">
						<a href="globals.html#web3callback" class="tsd-kind-icon">Web3<wbr>Callback</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#web3rpccallback" class="tsd-kind-icon">Web3RPCCallback</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#wyvernasset" class="tsd-kind-icon">Wyvern<wbr>Asset</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#wyvernatomicmatchparameters" class="tsd-kind-icon">Wyvern<wbr>Atomic<wbr>Match<wbr>Parameters</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#api_base_mainnet" class="tsd-kind-icon">API_<wbr>BASE_<wbr>MAINNET</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#api_base_rinkeby" class="tsd-kind-icon">API_<wbr>BASE_<wbr>RINKEBY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#api_path" class="tsd-kind-icon">API_<wbr>PATH</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#api_version" class="tsd-kind-icon">API_<wbr>VERSION</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#cheeze_wizards_basic_tournament_address" class="tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>BASIC_<wbr>TOURNAMENT_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#cheeze_wizards_basic_tournament_rinkeby_address" class="tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>BASIC_<wbr>TOURNAMENT_<wbr>RINKEBY_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#cheeze_wizards_guild_address" class="tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>GUILD_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#cheeze_wizards_guild_rinkeby_address" class="tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>GUILD_<wbr>RINKEBY_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#ck_address" class="tsd-kind-icon">CK_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#ck_rinkeby_address" class="tsd-kind-icon">CK_<wbr>RINKEBY_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#canonicalweth" class="tsd-kind-icon">CanonicalWETH</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#cheezewizardsbasictournament" class="tsd-kind-icon">Cheeze<wbr>Wizards<wbr>Basic<wbr>Tournament</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#cheezewizardsguild" class="tsd-kind-icon">Cheeze<wbr>Wizards<wbr>Guild</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#decentraland_estate_address" class="tsd-kind-icon">DECENTRALAND_<wbr>ESTATE_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#default_buyer_fee_basis_points" class="tsd-kind-icon">DEFAULT_<wbr>BUYER_<wbr>FEE_<wbr>BASIS_<wbr>POINTS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#default_gas_increase_factor" class="tsd-kind-icon">DEFAULT_<wbr>GAS_<wbr>INCREASE_<wbr>FACTOR</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#default_max_bounty" class="tsd-kind-icon">DEFAULT_<wbr>MAX_<wbr>BOUNTY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#default_seller_fee_basis_points" class="tsd-kind-icon">DEFAULT_<wbr>SELLER_<wbr>FEE_<wbr>BASIS_<wbr>POINTS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#default_wrapped_nft_liquidation_uniswap_slippage_in_basis_points" class="tsd-kind-icon">DEFAULT_<wbr>WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>UNISWAP_<wbr>SLIPPAGE_<wbr>IN_<wbr>BASIS_<wbr>POINTS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#dep_infura_key" class="tsd-kind-icon">DEP_<wbr>INFURA_<wbr>KEY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#decentralandestates" class="tsd-kind-icon">Decentraland<wbr>Estates</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#enjin_address" class="tsd-kind-icon">ENJIN_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#enjin_coin_address" class="tsd-kind-icon">ENJIN_<wbr>COIN_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#enjin_legacy_address" class="tsd-kind-icon">ENJIN_<wbr>LEGACY_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#erc1155" class="tsd-kind-icon">ERC1155</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#erc20" class="tsd-kind-icon">ERC20</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#erc721" class="tsd-kind-icon">ERC721</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#inverse_basis_point" class="tsd-kind-icon">INVERSE_<wbr>BASIS_<wbr>POINT</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#mainnet_provider_url" class="tsd-kind-icon">MAINNET_<wbr>PROVIDER_<wbr>URL</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#mana_address" class="tsd-kind-icon">MANA_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#max_error_length" class="tsd-kind-icon">MAX_<wbr>ERROR_<wbr>LENGTH</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#max_uint_256" class="tsd-kind-icon">MAX_<wbr>UINT_<wbr>256</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#min_expiration_seconds" class="tsd-kind-icon">MIN_<wbr>EXPIRATION_<wbr>SECONDS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#null_address" class="tsd-kind-icon">NULL_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#null_block_hash" class="tsd-kind-icon">NULL_<wbr>BLOCK_<wbr>HASH</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#opensea_fee_recipient" class="tsd-kind-icon">OPENSEA_<wbr>FEE_<wbr>RECIPIENT</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#opensea_seller_bounty_basis_points" class="tsd-kind-icon">OPENSEA_<wbr>SELLER_<wbr>BOUNTY_<wbr>BASIS_<wbr>POINTS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#orderbook_path" class="tsd-kind-icon">ORDERBOOK_<wbr>PATH</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#orderbook_version" class="tsd-kind-icon">ORDERBOOK_<wbr>VERSION</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#order_matching_latency_seconds" class="tsd-kind-icon">ORDER_<wbr>MATCHING_<wbr>LATENCY_<wbr>SECONDS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#rinkeby_provider_url" class="tsd-kind-icon">RINKEBY_<wbr>PROVIDER_<wbr>URL</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#sell_order_batch_size" class="tsd-kind-icon">SELL_<wbr>ORDER_<wbr>BATCH_<wbr>SIZE</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#site_host_mainnet" class="tsd-kind-icon">SITE_<wbr>HOST_<wbr>MAINNET</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#site_host_rinkeby" class="tsd-kind-icon">SITE_<wbr>HOST_<wbr>RINKEBY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#static_call_cheeze_wizards_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>CHEEZE_<wbr>WIZARDS_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#static_call_cheeze_wizards_rinkeby_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>CHEEZE_<wbr>WIZARDS_<wbr>RINKEBY_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#static_call_decentraland_estates_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>DECENTRALAND_<wbr>ESTATES_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#static_call_tx_origin_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>TX_<wbr>ORIGIN_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#static_call_tx_origin_rinkeby_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>TX_<wbr>ORIGIN_<wbr>RINKEBY_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#staticcheckcheezewizards" class="tsd-kind-icon">Static<wbr>Check<wbr>Cheeze<wbr>Wizards</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#staticcheckdecentralandestates" class="tsd-kind-icon">Static<wbr>Check<wbr>Decentraland<wbr>Estates</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#staticchecktxorigin" class="tsd-kind-icon">Static<wbr>Check<wbr>TxOrigin</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#uniswap_factory_address_mainnet" class="tsd-kind-icon">UNISWAP_<wbr>FACTORY_<wbr>ADDRESS_<wbr>MAINNET</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#uniswap_factory_address_rinkeby" class="tsd-kind-icon">UNISWAP_<wbr>FACTORY_<wbr>ADDRESS_<wbr>RINKEBY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#uniswapexchange" class="tsd-kind-icon">Uniswap<wbr>Exchange</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#uniswapfactory" class="tsd-kind-icon">Uniswap<wbr>Factory</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wrapped_nft_factory_address_mainnet" class="tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>FACTORY_<wbr>ADDRESS_<wbr>MAINNET</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wrapped_nft_factory_address_rinkeby" class="tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>FACTORY_<wbr>ADDRESS_<wbr>RINKEBY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wrapped_nft_liquidation_proxy_address_mainnet" class="tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>PROXY_<wbr>ADDRESS_<wbr>MAINNET</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wrapped_nft_liquidation_proxy_address_rinkeby" class="tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>PROXY_<wbr>ADDRESS_<wbr>RINKEBY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wyvern_exchange_address_mainnet" class="tsd-kind-icon">WYVERN_<wbr>EXCHANGE_<wbr>ADDRESS_<wbr>MAINNET</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wyvern_exchange_address_rinkeby" class="tsd-kind-icon">WYVERN_<wbr>EXCHANGE_<wbr>ADDRESS_<wbr>RINKEBY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wrappednft" class="tsd-kind-icon">WrappedNFT</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wrappednftfactory" class="tsd-kind-icon">WrappedNFTFactory</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wrappednftliquidationproxy" class="tsd-kind-icon">WrappedNFTLiquidation<wbr>Proxy</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#encodereplacementpattern" class="tsd-kind-icon">encode<wbr>Replacement<wbr>Pattern</a>
					</li>
					<li class=" tsd-kind-variable tsd-is-not-exported">
						<a href="globals.html#txcallbacks" class="tsd-kind-icon">tx<wbr>Callbacks</a>
					</li>
					<li class=" tsd-kind-function tsd-is-not-exported">
						<a href="globals.html#_throworcontinue" class="tsd-kind-icon">_throw<wbr>OrContinue</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#accountfromjson" class="tsd-kind-icon">account<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#annotateerc20transferabi" class="tsd-kind-icon">annotateERC20<wbr>TransferABI</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#annotateerc721transferabi" class="tsd-kind-icon">annotateERC721<wbr>TransferABI</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#assetbundlefromjson" class="tsd-kind-icon">asset<wbr>Bundle<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#assetcontractfromjson" class="tsd-kind-icon">asset<wbr>Contract<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#asseteventfromjson" class="tsd-kind-icon">asset<wbr>Event<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#assetfromjson" class="tsd-kind-icon">asset<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#assignorderstosides" class="tsd-kind-icon">assign<wbr>Orders<wbr>ToSides</a>
					</li>
					<li class=" tsd-kind-function tsd-is-not-exported">
						<a href="globals.html#cansettleorder" class="tsd-kind-icon">can<wbr>Settle<wbr>Order</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#collectionfromjson" class="tsd-kind-icon">collection<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#confirmtransaction" class="tsd-kind-icon">confirm<wbr>Transaction</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#delay" class="tsd-kind-icon">delay</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodeatomicizedbuy" class="tsd-kind-icon">encode<wbr>Atomicized<wbr>Buy</a>
					</li>
					<li class=" tsd-kind-function tsd-is-not-exported">
						<a href="globals.html#encodeatomicizedcalldata" class="tsd-kind-icon">encode<wbr>Atomicized<wbr>Calldata</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodeatomicizedsell" class="tsd-kind-icon">encode<wbr>Atomicized<wbr>Sell</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodeatomicizedtransfer" class="tsd-kind-icon">encode<wbr>Atomicized<wbr>Transfer</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodebuy" class="tsd-kind-icon">encode<wbr>Buy</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodecall" class="tsd-kind-icon">encode<wbr>Call</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodedefaultcall" class="tsd-kind-icon">encode<wbr>Default<wbr>Call</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodeproxycall" class="tsd-kind-icon">encode<wbr>Proxy<wbr>Call</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodesell" class="tsd-kind-icon">encode<wbr>Sell</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodetransfercall" class="tsd-kind-icon">encode<wbr>Transfer<wbr>Call</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#estimatecurrentprice" class="tsd-kind-icon">estimate<wbr>Current<wbr>Price</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#estimategas" class="tsd-kind-icon">estimate<wbr>Gas</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#event" class="tsd-kind-icon">event</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#getcurrentgasprice" class="tsd-kind-icon">get<wbr>Current<wbr>Gas<wbr>Price</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#getmethod" class="tsd-kind-icon">get<wbr>Method</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#getnoncompliantapprovaladdress" class="tsd-kind-icon">get<wbr>Non<wbr>Compliant<wbr>Approval<wbr>Address</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#getorderhash" class="tsd-kind-icon">get<wbr>Order<wbr>Hash</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#gettransferfeesettings" class="tsd-kind-icon">get<wbr>Transfer<wbr>Fee<wbr>Settings</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#getwyvernasset" class="tsd-kind-icon">get<wbr>Wyvern<wbr>Asset</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#getwyvernbundle" class="tsd-kind-icon">get<wbr>Wyvern<wbr>Bundle</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#iscontractaddress" class="tsd-kind-icon">is<wbr>Contract<wbr>Address</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#makebignumber" class="tsd-kind-icon">make<wbr>Big<wbr>Number</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#ondeprecated" class="tsd-kind-icon">on<wbr>Deprecated</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#orderfromjson" class="tsd-kind-icon">order<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#ordertojson" class="tsd-kind-icon">order<wbr>ToJSON</a>
					</li>
					<li class=" tsd-kind-function tsd-is-not-exported">
						<a href="globals.html#parsesignaturehex" class="tsd-kind-icon">parse<wbr>Signature<wbr>Hex</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#personalsignasync" class="tsd-kind-icon">personal<wbr>Sign<wbr>Async</a>
					</li>
					<li class=" tsd-kind-function tsd-has-type-parameter tsd-is-not-exported">
						<a href="globals.html#promisify" class="tsd-kind-icon">promisify</a>
					</li>
					<li class=" tsd-kind-function tsd-has-type-parameter">
						<a href="globals.html#promisifycall" class="tsd-kind-icon">promisify<wbr>Call</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#rawcall" class="tsd-kind-icon">raw<wbr>Call</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#requireordercalldatacanmatch" class="tsd-kind-icon">require<wbr>Order<wbr>Calldata<wbr>Can<wbr>Match</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#requireorderscanmatch" class="tsd-kind-icon">require<wbr>Orders<wbr>Can<wbr>Match</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#sendrawtransaction" class="tsd-kind-icon">send<wbr>Raw<wbr>Transaction</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#tokenfromjson" class="tsd-kind-icon">token<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function tsd-is-not-exported">
						<a href="globals.html#track" class="tsd-kind-icon">track</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#transactionfromjson" class="tsd-kind-icon">transaction<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#userfromjson" class="tsd-kind-icon">user<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#validateandformatwalletaddress" class="tsd-kind-icon">validate<wbr>And<wbr>Format<wbr>Wallet<wbr>Address</a>
					</li>
					<li class=" tsd-kind-object-literal">
						<a href="globals.html#decentraland_auction_config" class="tsd-kind-icon">DECENTRALAND_<wbr>AUCTION_<wbr>CONFIG</a>
					</li>
					<li class=" tsd-kind-object-literal tsd-is-not-exported">
						<a href="globals.html#schema_name_to_asset_contract_type" class="tsd-kind-icon">SCHEMA_<wbr>NAME_<wbr>TO_<wbr>ASSET_<wbr>CONTRACT_<wbr>TYPE</a>
					</li>
					<li class=" tsd-kind-object-literal tsd-is-not-exported">
						<a href="globals.html#salekindinterface" class="tsd-kind-icon">Sale<wbr>Kind<wbr>Interface</a>
					</li>
					<li class=" tsd-kind-object-literal">
						<a href="globals.html#proxyabi" class="tsd-kind-icon">proxyABI</a>
					</li>
					<li class=" tsd-kind-object-literal">
						<a href="globals.html#proxyassertabi" class="tsd-kind-icon">proxy<wbr>AssertABI</a>
					</li>
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/index.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="assets/js/search.js" data-base=".">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="globals.html">Globals</a>
				</li>
			</ul>
			<h1> opensea-js</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<div class="tsd-panel tsd-typography">
				<p><img src="https://storage.googleapis.com/opensea-static/opensea-js-logo.png" alt="OpenSea.js Logo" title="OpenSea.js Logo"></p>
				<h1 id="opensea-js-omit-in-toc-">OpenSea.js <!-- omit in toc --></h1>
				<p><a href="https://opensource.org/licenses/MIT"><img src="https://badges.frapsoft.com/os/mit/mit.svg?v=102" alt="https://badges.frapsoft.com/os/mit/mit.svg?v=102"></a>
				<!-- [![npm](https://img.shields.io/npm/v/wyvern-js.svg)](https://www.npmjs.com/package/wyvern-js) [![npm](https://img.shields.io/npm/dt/wyvern-js.svg)](https://www.npmjs.com/package/wyvern-js) --></p>
				<p>A JavaScript library for crypto-native ecommerce: buying, selling, and bidding on any cryptogood. With OpenSea.js, you can easily build your own native marketplace for your non-fungible tokens, or NFTs. These can be ERC-721 or ERC-1155 (semi-fungible) items. You don&#39;t have to deploy your own smart contracts or backend orderbooks.</p>
				<p>Published on <a href="https://github.com/ProjectOpenSea/opensea-js">GitHub</a> and <a href="https://www.npmjs.com/package/opensea-js">npm</a></p>
				<ul>
					<li><a href="#synopsis">Synopsis</a></li>
					<li><a href="#installation">Installation</a></li>
					<li><a href="#getting-started">Getting Started</a><ul>
							<li><a href="#fetching-assets">Fetching Assets</a><ul>
									<li><a href="#checking-balances-and-ownerships">Checking Balances and Ownerships</a></li>
								</ul>
							</li>
							<li><a href="#making-offers">Making Offers</a><ul>
									<li><a href="#bidding-on-multiple-assets">Bidding on Multiple Assets</a></li>
									<li><a href="#bidding-on-ens-short-name-auctions">Bidding on ENS Short Name Auctions</a></li>
								</ul>
							</li>
							<li><a href="#making-listings--selling-items">Making Listings / Selling Items</a><ul>
									<li><a href="#creating-english-auctions">Creating English Auctions</a></li>
								</ul>
							</li>
							<li><a href="#running-crowdsales">Running Crowdsales</a></li>
							<li><a href="#fetching-orders">Fetching Orders</a></li>
							<li><a href="#buying-items">Buying Items</a></li>
							<li><a href="#accepting-offers">Accepting Offers</a></li>
							<li><a href="#transferring-items-or-coins-gifting">Transferring Items or Coins (Gifting)</a></li>
						</ul>
					</li>
					<li><a href="#affiliate-program">Affiliate Program</a><ul>
							<li><a href="#referring-listings">Referring Listings</a></li>
							<li><a href="#referring-offers">Referring Offers</a></li>
							<li><a href="#custom-affiliate-programs">Custom Affiliate Programs</a></li>
							<li><a href="#custom-referral-bounties">Custom Referral Bounties</a></li>
						</ul>
					</li>
					<li><a href="#advanced">Advanced</a><ul>
							<li><a href="#scheduling-future-listings">Scheduling Future Listings</a></li>
							<li><a href="#purchasing-items-for-other-users">Purchasing Items for Other Users</a></li>
							<li><a href="#bulk-transfers">Bulk Transfers</a></li>
							<li><a href="#creating-bundles">Creating Bundles</a></li>
							<li><a href="#using-erc-20-tokens-instead-of-ether">Using ERC-20 Tokens Instead of Ether</a></li>
							<li><a href="#private-auctions">Private Auctions</a></li>
							<li><a href="#sharing-sale-fees-with-opensea">Sharing Sale Fees with OpenSea</a></li>
							<li><a href="#listening-to-events">Listening to Events</a></li>
						</ul>
					</li>
					<li><a href="#learning-more">Learning More</a><ul>
							<li><a href="#example-code">Example Code</a></li>
						</ul>
					</li>
					<li><a href="#migrating-to-version-10">Migrating to version 1.0</a></li>
					<li><a href="#development-information">Development Information</a></li>
					<li><a href="#diagnosing-common-issues">Diagnosing Common Issues</a></li>
				</ul>
				<h2 id="synopsis">Synopsis</h2>
				<p>This is the JavaScript SDK for <a href="https://opensea.io">OpenSea</a>, the largest marketplace for crypto collectibles. It allows developers to access the official orderbook, filter it, create buy orders (<strong>offers</strong>), create sell orders (<strong>auctions</strong>), create collections of assets to sell at once (<strong>bundles</strong>), and complete trades programmatically.</p>
				<p>For the first time, you can build a <em>cryptocommerce dapp</em>.</p>
				<p>You get started by instantiating your own seaport. Then you can create orders off-chain or fulfill orders on-chain, and listen to events (like <code>ApproveAllAssets</code> or <code>WrapEth</code>) in the process.</p>
				<p>Happy seafaring! ‚õµÔ∏è</p>
				<h2 id="installation">Installation</h2>
				<p>We recommend switching to Node.js version 8.11 to make sure common crypto dependencies work. Execute <code>nvm use</code>, if you have Node Version Manager.</p>
				<p>Then, in your project, run:</p>
				<pre><code class="lang-bash">npm install --save opensea-js
</code></pre>
				<p>Install <a href="https://github.com/ethereum/web3.js">web3</a> too if you haven&#39;t already.</p>
				<p>If you run into an error while building the dependencies and you&#39;re on a Mac, run this:</p>
				<pre><code class="lang-bash">xcode-select --install <span class="hljs-comment"># Install Command Line Tools if you haven't already.</span>
sudo xcode-select --switch /Library/Developer/CommandLineTools <span class="hljs-comment"># Enable command line tools</span>
sudo npm explore npm -g -- npm install node-gyp@latest <span class="hljs-comment"># (Optional) update node-gyp</span>
</code></pre>
				<h2 id="getting-started">Getting Started</h2>
				<p>To get started, create a new OpenSeaJS client, called an OpenSeaPort üö¢, using your Web3 provider:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Web3 <span class="hljs-keyword">from</span> <span class="hljs-string">'web3'</span>
<span class="hljs-keyword">import</span> { OpenSeaPort, Network } <span class="hljs-keyword">from</span> <span class="hljs-string">'opensea-js'</span>

<span class="hljs-comment">// This example provider won't let you make transactions, only read-only calls:</span>
<span class="hljs-keyword">const</span> provider = <span class="hljs-keyword">new</span> Web3.providers.HttpProvider(<span class="hljs-string">'https://mainnet.infura.io'</span>)

<span class="hljs-keyword">const</span> seaport = <span class="hljs-keyword">new</span> OpenSeaPort(provider, {
  <span class="hljs-attr">networkName</span>: Network.Main
})
</code></pre>
				<p><strong>NOTE:</strong> Using the sample Infura provider above won&#39;t let you authorize transactions, which are needed when approving and trading assets and currency. To make transactions, you need a provider with a private key or mnemonic set.</p>
				<p>In a browser with web3 or an extension like <a href="https://metamask.io/">MetaMask</a> or <a href="http://www.meetdapper.com/">Dapper</a>, you can use <code>window.ethereum</code> (or <code>window.web3.currentProvider</code> for legacy mobile web3 browsers) to access the native provider. In a Node.js script, you can follow <a href="https://github.com/ProjectOpenSea/opensea-creatures/blob/master/scripts/sell.js">this example</a> to use a custom mnemonic.</p>
				<h3 id="fetching-assets">Fetching Assets</h3>
				<p>Assets are items on OpenSea. They can be non-fungible (conforming to standards like ERC721), semi-fungible (like ERC1155 assets), and even fungible (ERC20).</p>
				<p>Assets are represented by the <code>Asset</code> type, defined in TypeScript:</p>
				<pre><code class="lang-TypeScript"><span class="hljs-comment">/**
 * Simple, unannotated non-fungible asset spec
 */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> Asset {
  <span class="hljs-comment">// The asset's token ID, or null if ERC-20</span>
  tokenId: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span>,
  <span class="hljs-comment">// The asset's contract address</span>
  tokenAddress: <span class="hljs-built_in">string</span>,
  <span class="hljs-comment">// The Wyvern schema name (defaults to "ERC721") for this asset</span>
  schemaName?: WyvernSchemaName,
  <span class="hljs-comment">// Optional for ENS names</span>
  name?: <span class="hljs-built_in">string</span>,
  <span class="hljs-comment">// Optional for fungible items</span>
  decimals?: <span class="hljs-built_in">number</span>
}
</code></pre>
				<p>The <code>Asset</code> type is the minimal type you need for most marketplace actions. <code>WyvernSchemaName</code> is optional. If omitted, most actions will assume you&#39;re referring to a non-fungible, ERC721 asset. Other options include &#39;ERC20&#39; and &#39;ERC1155&#39;. You can import <code>import { WyvernSchemaName } from &quot;opensea-js/lib/types&quot;</code> to get the full range of schemas supported.</p>
				<p>You can fetch an asset using the <code>OpenSeaAPI</code>, which will return an <code>OpenSeaAsset</code> for you (<code>OpenSeaAsset</code> extends <code>Asset</code>):</p>
				<pre><code class="lang-TypeScript"><span class="hljs-keyword">const</span> asset: OpenSeaAsset = <span class="hljs-keyword">await</span> seaport.api.getAsset({
  tokenAddress, <span class="hljs-comment">// string</span>
  tokenId, <span class="hljs-comment">// string | number | null</span>
})
</code></pre>
				<p>Note that fungible ERC20 assets have <code>null</code> as their token id.</p>
				<h4 id="checking-balances-and-ownerships">Checking Balances and Ownerships</h4>
				<p>The nice thing about the <code>Asset</code> type is that it unifies logic between fungibles, non-fungibles, and semi-fungibles.</p>
				<p>Once you have an <code>Asset</code>, you can see how many any account owns, regardless of whether it&#39;s an ERC-20 token or a non-fungible good:</p>
				<pre><code class="lang-JavaScript">
<span class="hljs-keyword">const</span> asset = {
  <span class="hljs-attr">tokenAddress</span>: <span class="hljs-string">"0x06012c8cf97bead5deae237070f9587f8e7a266d"</span>, <span class="hljs-comment">// CryptoKitties</span>
  <span class="hljs-attr">tokenId</span>: <span class="hljs-string">"1"</span>, <span class="hljs-comment">// Token ID</span>
}

<span class="hljs-keyword">const</span> balance = <span class="hljs-keyword">await</span> seaport.getAssetBalance({
  accountAddress, <span class="hljs-comment">// string</span>
  asset, <span class="hljs-comment">// Asset</span>
})

<span class="hljs-keyword">const</span> ownsKitty = balance.greaterThan(<span class="hljs-number">0</span>)
</code></pre>
				<p>You can use this same method for fungible ERC-20 tokens like wrapped ETH (WETH). As a convenience, you can use this fungible wrapper for checking fungible balances:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> balanceOfWETH = <span class="hljs-keyword">await</span> seaport.getTokenBalance({
  accountAddress, <span class="hljs-comment">// string</span>
  <span class="hljs-attr">tokenAddress</span>: <span class="hljs-string">"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"</span>
})
</code></pre>
				<h3 id="making-offers">Making Offers</h3>
				<p>Once you have your asset, you can do this to make an offer on it:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-comment">// Token ID and smart contract address for a non-fungible token:</span>
<span class="hljs-keyword">const</span> { tokenId, tokenAddress } = YOUR_ASSET
<span class="hljs-comment">// The offerer's wallet address:</span>
<span class="hljs-keyword">const</span> accountAddress = <span class="hljs-string">"0x1234..."</span>

<span class="hljs-keyword">const</span> offer = <span class="hljs-keyword">await</span> seaport.createBuyOrder({
  <span class="hljs-attr">asset</span>: {
    tokenId,
    tokenAddress,
    schemaName <span class="hljs-comment">// WyvernSchemaName. If omitted, defaults to 'ERC721'. Other options include 'ERC20' and 'ERC1155'</span>
  },
  accountAddress,
  <span class="hljs-comment">// Value of the offer, in units of the payment token (or wrapped ETH if none is specified):</span>
  <span class="hljs-attr">startAmount</span>: <span class="hljs-number">1.2</span>,
})
</code></pre>
				<p>When you make an offer on an item owned by an OpenSea user, <strong>that user will automatically get an email notifying them with the offer amount</strong>, if it&#39;s above their desired threshold.</p>
				<h4 id="bidding-on-multiple-assets">Bidding on Multiple Assets</h4>
				<p>You can also make an offer on a bundle of assets. This could also be used for creating a bounty for whoever can acquire a list of items. Here&#39;s how you do it:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> assets = YOUR_ASSETS
<span class="hljs-keyword">const</span> offer = <span class="hljs-keyword">await</span> seaport.createBundleBuyOrder({
  assets,
  accountAddress,
  <span class="hljs-attr">startAmount</span>: <span class="hljs-number">2.4</span>,
  <span class="hljs-comment">// Optional expiration time for the order, in Unix time (seconds):</span>
  <span class="hljs-attr">expirationTime</span>: <span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Date</span>.now() / <span class="hljs-number">1000</span> + <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>) <span class="hljs-comment">// One day from now</span>
})
</code></pre>
				<p>When you bid on multiple assets, an email will be sent to the owner if a bundle exists on OpenSea that contains the assets. In the future, OpenSea will send emails to multiple owners if the assets aren&#39;t all owned by the same wallet.</p>
				<h4 id="bidding-on-ens-short-name-auctions">Bidding on ENS Short Name Auctions</h4>
				<p>The Ethereum Name Service (ENS) is auctioning short (3-6 character) names that can be used for labeling wallet addresses and more. Learn more on the <a href="https://opensea.io/ens">ENS FAQ</a>.</p>
				<p>To bid, you must use the ENS Short Name schema:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> {
  tokenId,
  <span class="hljs-comment">// Token address should be `0xfac7bea255a6990f749363002136af6556b31e04` on mainnet</span>
  tokenAddress,
  <span class="hljs-comment">// Name must have `.eth` at the end and correspond with the tokenId</span>
  name
} = ENS_ASSET <span class="hljs-comment">// You can get an ENS asset from `seaport.api.getAsset(...)`</span>

<span class="hljs-keyword">const</span> offer = <span class="hljs-keyword">await</span> seaport.createBuyOrder({
  <span class="hljs-attr">asset</span>: {
    tokenId,
    tokenAddress,
    name,
    <span class="hljs-comment">// Only needed for the short-name auction, not ENS names</span>
    <span class="hljs-comment">// that have been sold once already:</span>
    <span class="hljs-attr">schemaName</span>: <span class="hljs-string">"ENSShortNameAuction"</span>
  },
  <span class="hljs-comment">// Your wallet address (the bidder's address):</span>
  <span class="hljs-attr">accountAddress</span>: <span class="hljs-string">"0x1234..."</span>
  <span class="hljs-comment">// Value of the offer, in wrapped ETH:</span>
  <span class="hljs-attr">startAmount</span>: <span class="hljs-number">1.2</span>,
})
</code></pre>
				<h3 id="making-listings-selling-items">Making Listings / Selling Items</h3>
				<p>To sell an asset, call <code>createSellOrder</code>. You can do a fixed-price listing, where <code>startAmount</code> is equal to <code>endAmount</code>, or a declining <a href="https://en.wikipedia.org/wiki/Dutch_auction">Dutch auction</a>, where <code>endAmount</code> is lower and the price declines until <code>expirationTime</code> is hit:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-comment">// Expire this auction one day from now.</span>
<span class="hljs-comment">// Note that we convert from the JavaScript timestamp (milliseconds):</span>
<span class="hljs-keyword">const</span> expirationTime = <span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Date</span>.now() / <span class="hljs-number">1000</span> + <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>)

<span class="hljs-keyword">const</span> listing = <span class="hljs-keyword">await</span> seaport.createSellOrder({
  <span class="hljs-attr">asset</span>: {
    tokenId,
    tokenAddress,
  },
  accountAddress,
  <span class="hljs-attr">startAmount</span>: <span class="hljs-number">3</span>,
  <span class="hljs-comment">// If `endAmount` is specified, the order will decline in value to that amount until `expirationTime`. Otherwise, it's a fixed-price order:</span>
  <span class="hljs-attr">endAmount</span>: <span class="hljs-number">0.1</span>,
  expirationTime
})
</code></pre>
				<p>The units for <code>startAmount</code> and <code>endAmount</code> are Ether, ETH. If you want to specify another ERC-20 token to use, see <a href="#using-erc-20-tokens-instead-of-ether">Using ERC-20 Tokens Instead of Ether</a>.</p>
				<p>See <a href="#listening-to-events">Listening to Events</a> to respond to the setup transactions that occur the first time a user sells an item.</p>
				<h4 id="creating-english-auctions">Creating English Auctions</h4>
				<p>English Auctions are auctions that start at a small amount (we recommend even doing 0!) and increase with every bid. At expiration time, the item sells to the highest bidder.</p>
				<p>To create an English Auction, create a listing that waits for the highest bid by setting <code>waitForHighestBid</code> to <code>true</code>:</p>
				<pre><code class="lang-JavaScript">
<span class="hljs-comment">// Create an auction to receive Wrapped Ether (WETH). See note below.</span>
<span class="hljs-keyword">const</span> paymentTokenAddress = <span class="hljs-string">"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"</span>

<span class="hljs-keyword">const</span> startAmount = <span class="hljs-number">0</span> <span class="hljs-comment">// The minimum amount to sell for, in normal units (e.g. ETH)</span>

<span class="hljs-keyword">const</span> auction = <span class="hljs-keyword">await</span> seaport.createSellOrder({
  <span class="hljs-attr">asset</span>: {
    tokenId,
    tokenAddress,
  },
  accountAddress,
  startAmount,
  expirationTime,
  paymentTokenAddress,
  <span class="hljs-attr">waitForHighestBid</span>: <span class="hljs-literal">true</span>
})
</code></pre>
				<p>Note that auctions aren&#39;t supported with Ether directly due to limitations in Ethereum, so you have to use an ERC20 token, like Wrapped Ether (WETH), a stablecoin like DAI, etc. See <a href="#using-erc-20-tokens-instead-of-ether">Using ERC-20 Tokens Instead of Ether</a> for more info.</p>
				<h3 id="running-crowdsales">Running Crowdsales</h3>
				<p>You can now sell items to users <strong>without having to pay gas to mint them</strong>!</p>
				<p>To create a presale or crowdsale and create batches of sell orders for a single asset factory, first follow the <a href="https://docs.opensea.io/docs/opensea-initial-item-sale-tutorial">tutorial</a> for creating your crowdsale contract.</p>
				<p>Then call <code>createFactorySellOrders</code> with your factory contract address and asset option identifier, and set <code>numberOfOrders</code> to the number of assets you&#39;d like to let users buy and mint:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-comment">// Expire these auctions one day from now</span>
<span class="hljs-keyword">const</span> expirationTime = <span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Date</span>.now() / <span class="hljs-number">1000</span> + <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>)

<span class="hljs-keyword">const</span> sellOrders = <span class="hljs-keyword">await</span> seaport.createFactorySellOrders({
  <span class="hljs-attr">assetId</span>: ASSET_OPTION_ID,
  <span class="hljs-attr">factoryAddress</span>: FACTORY_CONTRACT_ADDRESS,
  accountAddress,
  startAmount,
  endAmount,
  expirationTime,
  <span class="hljs-comment">// Will create 100 sell orders in parallel batches of 10, to speed things up:</span>
  <span class="hljs-attr">numberOfOrders</span>: <span class="hljs-number">100</span>
})
</code></pre>
				<p>Here&#39;s an <a href="https://github.com/ProjectOpenSea/opensea-creatures/blob/master/scripts/sell.js">example script</a> you can use to mint items.</p>
				<p><strong>NOTE:</strong> If <code>numberOfOrders</code> is greater than 5, we will automatically batch them in groups of 5 so you can post orders in parallel. Requires an <code>apiKey</code> to be set during seaport initialization in order to not be throttled by the API.</p>
				<p>Games using this method include <a href="https://opensea.io/assets/coins&amp;steelfounderssale">Coins &amp; Steel</a> and a couple in stealth :) If you have questions or want support, contact us at <a href="mailto:contact@opensea.io">contact@opensea.io</a> (or in <a href="https://discord.gg/ga8EJbv">Discord</a>).</p>
				<h3 id="fetching-orders">Fetching Orders</h3>
				<p>To retrieve a list of offers and auction on an asset, you can use an instance of the <code>OpenSeaAPI</code> exposed on the client. Parameters passed into API filter objects are underscored instead of camel-cased, similar to the main <a href="https://docs.opensea.io/v1.0/reference">OpenSea API parameters</a>:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">import</span> { OrderSide } <span class="hljs-keyword">from</span> <span class="hljs-string">'opensea-js/lib/types'</span>

<span class="hljs-comment">// Get offers (bids), a.k.a. orders where `side == 0`</span>
<span class="hljs-keyword">const</span> { orders, count } = <span class="hljs-keyword">await</span> seaport.api.getOrders({
  <span class="hljs-attr">asset_contract_address</span>: tokenAddress,
  <span class="hljs-attr">token_id</span>: token_id,
  <span class="hljs-attr">side</span>: OrderSide.Buy
})

<span class="hljs-comment">// Get page 2 of all auctions, a.k.a. orders where `side == 1`</span>
<span class="hljs-keyword">const</span> { orders, count } = <span class="hljs-keyword">await</span> seaport.api.getOrders({
  <span class="hljs-attr">asset_contract_address</span>: tokenAddress,
  <span class="hljs-attr">token_id</span>: token_id,
  <span class="hljs-attr">side</span>: OrderSide.Sell
}, <span class="hljs-number">2</span>)
</code></pre>
				<p>Note that the listing price of an asset is equal to the <code>currentPrice</code> of the <strong>lowest valid sell order</strong> on the asset. Users can lower their listing price without invalidating previous sell orders, so all get shipped down until they&#39;re cancelled or one is fulfilled.</p>
				<p>To learn more about signatures, makers, takers, listingTime vs createdTime and other kinds of order terminology, please read the <a href="https://docs.opensea.io/reference#terminology"><strong>Terminology Section</strong></a> of the API Docs.</p>
				<p>The available API filters for the orders endpoint is documented in the <code>OrderJSON</code> interface below, but see the main <a href="https://docs.opensea.io/reference#reference-getting-started">API Docs</a> for a playground, along with more up-to-date and detailed explanantions.</p>
				<pre><code class="lang-TypeScript"><span class="hljs-comment">/**
   * Attrs used by orderbook to make queries easier
   * More to come soon!
   */</span>
  maker?: <span class="hljs-built_in">string</span>, <span class="hljs-comment">// Address of the order's creator</span>
  taker?: <span class="hljs-built_in">string</span>, <span class="hljs-comment">// The null address if anyone is allowed to take the order</span>
  side?: OrderSide, <span class="hljs-comment">// 0 for offers, 1 for auctions</span>
  owner?: <span class="hljs-built_in">string</span>, <span class="hljs-comment">// Address of owner of the order's asset</span>
  sale_kind?: SaleKind, <span class="hljs-comment">// 0 for fixed-price, 1 for Dutch auctions</span>
  asset_contract_address?: <span class="hljs-built_in">string</span>, <span class="hljs-comment">// Contract address for order's asset</span>
  token_id?: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>,
  token_ids?: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>&gt;,
  listed_after?: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>, <span class="hljs-comment">// This means listing_time &gt; value in seconds</span>
  listed_before?: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>, <span class="hljs-comment">// This means listing_time &lt;= value in seconds</span>

  <span class="hljs-comment">// For pagination</span>
  limit?: <span class="hljs-built_in">number</span>,
  offset?: <span class="hljs-built_in">number</span>,
</code></pre>
				<h3 id="buying-items">Buying Items</h3>
				<p>To buy an item , you need to <strong>fulfill a sell order</strong>. To do that, it&#39;s just one call:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> order = <span class="hljs-keyword">await</span> seaport.api.getOrder({ <span class="hljs-attr">side</span>: OrderSide.Sell, ... })
<span class="hljs-keyword">const</span> accountAddress = <span class="hljs-string">"0x..."</span> <span class="hljs-comment">// The buyer's wallet address, also the taker</span>
<span class="hljs-keyword">const</span> transactionHash = <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.props.seaport.fulfillOrder({ order, accountAddress })
</code></pre>
				<p>Note that the <code>fulfillOrder</code> promise resolves when the transaction has been confirmed and mined to the blockchain. To get the transaction hash before this happens, add an event listener (see <a href="#listening-to-events">Listening to Events</a>) for the <code>TransactionCreated</code> event.</p>
				<p>If the order is a sell order (<code>order.side === OrderSide.Sell</code>), the taker is the <em>buyer</em> and this will prompt the buyer to pay for the item(s).</p>
				<h3 id="accepting-offers">Accepting Offers</h3>
				<p>Similar to fulfilling sell orders above, you need to fulfill a buy order on an item you own to receive the tokens in the offer.</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> order = <span class="hljs-keyword">await</span> seaport.api.getOrder({ <span class="hljs-attr">side</span>: OrderSide.Buy, ... })
<span class="hljs-keyword">const</span> accountAddress = <span class="hljs-string">"0x..."</span> <span class="hljs-comment">// The owner's wallet address, also the taker</span>
<span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.props.seaport.fulfillOrder({ order, accountAddress })
</code></pre>
				<p>If the order is a buy order (<code>order.side === OrderSide.Buy</code>), then the taker is the <em>owner</em> and this will prompt the owner to exchange their item(s) for whatever is being offered in return. See <a href="#listening-to-events">Listening to Events</a> below to respond to the setup transactions that occur the first time a user accepts a bid.</p>
				<h3 id="transferring-items-or-coins-gifting">Transferring Items or Coins (Gifting)</h3>
				<p>A handy feature in OpenSea.js is the ability to transfer any supported asset (fungible or non-fungible tokens) in one line of JavaScript.</p>
				<p>To transfer an ERC-721 asset or an ERC-1155 asset, it&#39;s just one call:</p>
				<pre><code class="lang-JavaScript">
<span class="hljs-keyword">const</span> transactionHash = <span class="hljs-keyword">await</span> seaport.transfer({
  <span class="hljs-attr">asset</span>: { tokenId, tokenAddress },
  fromAddress, <span class="hljs-comment">// Must own the asset</span>
  toAddress
})
</code></pre>
				<p>For fungible ERC-1155 assets, you can set <code>schemaName</code> to &quot;ERC1155&quot; and pass a <code>quantity</code> in to transfer multiple at once:</p>
				<pre><code class="lang-JavaScript">
<span class="hljs-keyword">const</span> transactionHash = <span class="hljs-keyword">await</span> seaport.transfer({
  <span class="hljs-attr">asset</span>: {
    tokenId,
    tokenAddress,
    <span class="hljs-attr">schemaName</span>: <span class="hljs-string">"ERC1155"</span>
  },
  fromAddress, <span class="hljs-comment">// Must own the asset</span>
  toAddress,
  <span class="hljs-attr">quantity</span>: <span class="hljs-number">2</span>,
})
</code></pre>
				<p>To transfer fungible assets without token IDs, like ERC20 tokens, you can pass in an <code>OpenSeaFungibleToken</code> as the <code>asset</code>, set <code>schemaName</code> to &quot;ERC20&quot;, and include <code>quantity</code> in base units (e.g. wei) to indicate how many.</p>
				<p>Example for transfering 2 DAI ($2) to another address:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> paymentToken = (<span class="hljs-keyword">await</span> seaport.api.getPaymentTokens({ <span class="hljs-attr">symbol</span>: <span class="hljs-string">'DAI'</span>})).tokens[<span class="hljs-number">0</span>]
<span class="hljs-keyword">const</span> quantity = <span class="hljs-keyword">new</span> BigNumber(<span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, paymentToken.decimals)).times(<span class="hljs-number">2</span>)
<span class="hljs-keyword">const</span> transactionHash = <span class="hljs-keyword">await</span> seaport.transfer({
  <span class="hljs-attr">asset</span>: {
    <span class="hljs-attr">tokenId</span>: <span class="hljs-literal">null</span>,
    <span class="hljs-attr">tokenAddress</span>: paymentToken.address,
    <span class="hljs-attr">schemaName</span>: <span class="hljs-string">"ERC20"</span>
  },
  fromAddress, <span class="hljs-comment">// Must own the tokens</span>
  toAddress,
  quantity
})
</code></pre>
				<p>For more information, check out the documentation for WyvernSchemas on <a href="https://projectopensea.github.io/opensea-js/">https://projectopensea.github.io/opensea-js/</a>.</p>
				<h2 id="affiliate-program">Affiliate Program</h2>
				<p>OpenSea.js allows to you easily create an affiliate program in just a few lines of JavaScript! It&#39;s the crypto-equivalent of bounty hunting, and best of all, it&#39;s <strong>fully paid for by OpenSea</strong> so you can keep all of your winnings üí∞</p>
				<p>If you want to be an affiliate, you can use this to <strong>win at least 1%</strong> of the sale price of any listing, both for assets and bundles.</p>
				<h3 id="referring-listings">Referring Listings</h3>
				<p>You can instantly create an affiliate program for your assets by just passing in one more parameter when fulfilling orders... <strong>and OpenSea will pay for it!</strong> Whenever someone refers a sale or the acceptance of an offer, you can add a <code>referrerAddress</code> to give their wallet credit:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> referrerAddress = <span class="hljs-string">"0x..."</span> <span class="hljs-comment">// The referrer's wallet address</span>
<span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.props.seaport.fulfillOrder({ order, accountAddress, referrerAddress })
</code></pre>
				<p>This works for buying assets and bundles, along with accepting bids that had no referrer attached to them (see below).</p>
				<p>As long as the referrer hasn&#39;t referred the buyer before, OpenSea will send the referrer an email congradulating them, along with <strong>1%</strong> of the item&#39;s sale price. If you&#39;d like to be able to refer the same user for multiple purchases, contact us at <a href="mailto:contact@opensea.io">contact@opensea.io</a> (or in <a href="https://discord.gg/ga8EJbv">Discord</a>).</p>
				<h3 id="referring-offers">Referring Offers</h3>
				<p>Now you can also refer offers on assets! When the seller accepts the offer, the referrer will get credit:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> referrerAddress = <span class="hljs-string">"0x..."</span> <span class="hljs-comment">// The referrer's wallet address</span>
<span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.props.seaport.createBuyOrder({
  <span class="hljs-attr">asset</span>: {
    tokenId,
    tokenAddress,
  },
  accountAddress, <span class="hljs-comment">// Address of the bidder</span>
  <span class="hljs-attr">startAmount</span>: <span class="hljs-number">1.2</span>,
  referrerAddress <span class="hljs-comment">// Address of the referrer</span>
})
</code></pre>
				<p>The same thing works for <code>createBundleBuyOrder</code>.</p>
				<h3 id="custom-affiliate-programs">Custom Affiliate Programs</h3>
				<p>You can use <code>createBuyOrder({ referrerAddress })</code> to create your own affiliate programs as well.</p>
				<p>When buyers place offers or bids on an asset, the referrers will automatically be recorded on OpenSea.io. Then, you can use the <a href="https://docs.opensea.io/reference#retrieving-orders">Orderbook API</a> to inspect the <code>metadata</code> for orders and manually pay out referrers if you want to. The referrer will be labeled as <code>referrerAddress</code> in the <code>metadata</code> field.</p>
				<h3 id="custom-referral-bounties">Custom Referral Bounties</h3>
				<p>Sellers can customize the bounties they add to their items when listing them for sale. By default, OpenSea will pay referrers 1% and sellers pay them nothing, but sellers can increase this up to the full OpenSea fee (currently 2.5% for most assets) for both assets and bundles:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-comment">// Price the Genesis CryptoKitty at 100 ETH</span>
<span class="hljs-keyword">const</span> startAmount = <span class="hljs-number">100</span>
<span class="hljs-comment">// Reward referrers with 10% of the final sale price,</span>
<span class="hljs-comment">// or 10 ETH in this case</span>
<span class="hljs-keyword">const</span> extraBountyPercent = <span class="hljs-number">10</span>
<span class="hljs-comment">// The final bounty will be 10% + 1% from OpenSea, or 11 ETH!</span>

<span class="hljs-keyword">const</span> auction = <span class="hljs-keyword">await</span> seaport.createSellOrder({
  <span class="hljs-attr">tokenAddress</span>: <span class="hljs-string">"0x06012c8cf97bead5deae237070f9587f8e7a266d"</span>, <span class="hljs-comment">// CryptoKitties</span>
  <span class="hljs-attr">tokenId</span>: <span class="hljs-string">"1"</span>, <span class="hljs-comment">// Token ID</span>
  <span class="hljs-attr">accountAddress</span>: OWNERS_WALLET_ADDRESS,
  startAmount,
  <span class="hljs-attr">extraBountyBasisPoints</span>: extraBountyPercent * <span class="hljs-number">100</span>
})
</code></pre>
				<p><strong>NOTE:</strong> The final bounty in the example above will be 10% from the seller plus 1% from OpenSea, or 11 ETH in total!</p>
				<p>Developers can request to increase the OpenSea fee to allow for higher bounties - by default, it&#39;s capped at 2.5%. If you have any questions, contact us at <a href="mailto:contact@opensea.io">contact@opensea.io</a> (or in <a href="https://discord.gg/ga8EJbv">Discord</a>), or join the program at <a href="https://opensea.io/account#referrals">https://opensea.io/account#referrals</a>.</p>
				<h2 id="advanced">Advanced</h2>
				<p>Interested in purchasing for users server-side or with a bot, making bundling items together, scheduling future orders, or making bids in different ERC-20 tokens? OpenSea.js can help with that.</p>
				<h3 id="scheduling-future-listings">Scheduling Future Listings</h3>
				<p>You can create sell orders that aren&#39;t fulfillable until a future date. Just pass in a <code>listingTime</code> (a UTC timestamp in seconds) to your seaport instance:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> auction = <span class="hljs-keyword">await</span> seaport.createSellOrder({
  tokenAddress,
  tokenId,
  accountAddress,
  <span class="hljs-attr">startAmount</span>: <span class="hljs-number">1</span>,
  <span class="hljs-attr">listingTime</span>: <span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Date</span>.now() / <span class="hljs-number">1000</span> + <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>) <span class="hljs-comment">// One day from now</span>
})
</code></pre>
				<h3 id="purchasing-items-for-other-users">Purchasing Items for Other Users</h3>
				<p>You can buy and transfer an item to someone else in one step! Just pass the <code>recipientAddress</code> parameter:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> order = <span class="hljs-keyword">await</span> seaport.api.getOrder({ <span class="hljs-attr">side</span>: OrderSide.Sell, ... })
<span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.props.seaport.fulfillOrder({
  order,
  accountAddress, <span class="hljs-comment">// The address of your wallet, which will sign the transaction</span>
  recipientAddress <span class="hljs-comment">// The address of the recipient, i.e. the wallet you're purchasing on behalf of</span>
})
</code></pre>
				<p>If the order is a sell order (<code>order.side === OrderSide.Sell</code>), the taker is the <em>buyer</em> and this will prompt the buyer to pay for the item(s) but send them to the <code>recipientAddress</code>. If the order is a buy order ( <code>OrderSide.Buy</code>), the taker is the <em>seller</em> but the bid amount be sent to the <code>recipientAddress</code>.</p>
				<h3 id="bulk-transfers">Bulk Transfers</h3>
				<p>A handy feature in OpenSea.js is the ability to transfer multiple items at once in a single transaction. This works by grouping together as many <code>transferFrom</code> calls as the Ethereum gas limit allows, which is usually under 30 items, for most item contracts.</p>
				<p>To make a bulk transfer, it&#39;s just one call:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> assets: <span class="hljs-built_in">Array</span>&lt;{<span class="hljs-attr">tokenId</span>: string; tokenAddress: string}&gt; = [...]

<span class="hljs-keyword">const</span> transactionHash = <span class="hljs-keyword">await</span> seaport.transferAll({
  assets,
  fromAddress, <span class="hljs-comment">// Must own all the assets</span>
  toAddress
})
</code></pre>
				<p>This will automatically approve the assets for trading and confirm the transaction for sending them.</p>
				<h3 id="creating-bundles">Creating Bundles</h3>
				<p>You can also create bundles of assets to sell at the same time! If the owner has approved all the assets in the bundle already, only a signature is needed to create it.</p>
				<p>To make a bundle, it&#39;s just one call:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> assets: <span class="hljs-built_in">Array</span>&lt;{<span class="hljs-attr">tokenId</span>: string; tokenAddress: string}&gt; = [...]

<span class="hljs-keyword">const</span> bundle = <span class="hljs-keyword">await</span> seaport.createBundleSellOrder({
  bundleName, bundleDescription, bundleExternalLink,
  assets, accountAddress, startAmount, endAmount,
  expirationTime, paymentTokenAddress
})
</code></pre>
				<p>The parameters <code>bundleDescription</code>, <code>bundleExternalLink</code>, and <code>expirationTime</code> are optional, and <code>endAmount</code> can equal <code>startAmount</code>, similar to the normal <code>createSellOrder</code> functionality.</p>
				<p>The parameter <code>paymentTokenAddress</code> is the address of the ERC-20 token to accept in return. If it&#39;s <code>undefined</code> or <code>null</code>, the amount is assumed to be in Ether.</p>
				<p>Wait what, you can use other currencies than ETH?</p>
				<h3 id="using-erc-20-tokens-instead-of-ether">Using ERC-20 Tokens Instead of Ether</h3>
				<p>Here&#39;s an example of listing the Genesis CryptoKitty for $100! No more needing to worry about the exchange rate:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-comment">// Token address for the DAI stablecoin, which is pegged to $1 USD</span>
<span class="hljs-keyword">const</span> paymentTokenAddress = <span class="hljs-string">"0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"</span>

<span class="hljs-comment">// The units for `startAmount` and `endAmount` are now in DAI, so $100 USD</span>
<span class="hljs-keyword">const</span> auction = <span class="hljs-keyword">await</span> seaport.createSellOrder({
  <span class="hljs-attr">tokenAddress</span>: <span class="hljs-string">"0x06012c8cf97bead5deae237070f9587f8e7a266d"</span>, <span class="hljs-comment">// CryptoKitties</span>
  <span class="hljs-attr">tokenId</span>: <span class="hljs-string">"1"</span>, <span class="hljs-comment">// Token ID</span>
  <span class="hljs-attr">accountAddress</span>: OWNERS_WALLET_ADDRESS,
  <span class="hljs-attr">startAmount</span>: <span class="hljs-number">100</span>,
  paymentTokenAddress
})
</code></pre>
				<p>You can use <code>getPaymentTokens</code> to search for tokens by symbol name. And you can even list all orders for a specific ERC-20 token by querying the API:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">const</span> token = (<span class="hljs-keyword">await</span> seaport.api.getPaymentTokens({ <span class="hljs-attr">symbol</span>: <span class="hljs-string">'MANA'</span>})).tokens[<span class="hljs-number">0</span>]

<span class="hljs-keyword">const</span> order = <span class="hljs-keyword">await</span> seaport.api.getOrders({
  <span class="hljs-attr">side</span>: OrderSide.Sell,
  <span class="hljs-attr">payment_token_address</span>: token.address
})
</code></pre>
				<p><strong>Fun note:</strong> soon, all ERC-20 tokens will be allowed! This will mean you can create crazy offers on crypto collectibles <strong>using your own ERC-20 token</strong>. However, opensea.io will only display offers and auctions in ERC-20 tokens that it knows about, optimizing the user experience of order takers. Orders made with the following tokens will be shown on OpenSea:</p>
				<ul>
					<li>MANA, Decentraland&#39;s currency: <a href="https://etherscan.io/token/0x0f5d2fb29fb7d3cfee444a200298f468908cc942">https://etherscan.io/token/0x0f5d2fb29fb7d3cfee444a200298f468908cc942</a> </li>
					<li>DAI, Maker&#39;s stablecoin, pegged to $1 USD: <a href="https://etherscan.io/token/0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359">https://etherscan.io/token/0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359</a></li>
					<li>And tons more! See the &quot;Currencies&quot; list in the sidebar on <a href="https://opensea.io/assets">https://opensea.io/assets</a> for a full list, or contact us to add yours: <a href="https://discord.gg/ga8EJbv">Discord</a></li>
				</ul>
				<h3 id="private-auctions">Private Auctions</h3>
				<p>Now you can make auctions and listings that can only be fulfilled by an address or email of your choosing. This allows you to negotiate a price in some channel and sell for your chosen price on OpenSea, <strong>without having to trust that the counterparty will abide by your terms!</strong></p>
				<p>Here&#39;s an example of listing a Decentraland parcel for 10 ETH with a specific buyer address allowed to take it. No more needing to worry about whether they&#39;ll give you enough back!</p>
				<pre><code class="lang-JavaScript"><span class="hljs-comment">// Address allowed to buy from you</span>
<span class="hljs-keyword">const</span> buyerAddress = <span class="hljs-string">"0x123..."</span>

<span class="hljs-keyword">const</span> listing = <span class="hljs-keyword">await</span> seaport.createSellOrder({
  <span class="hljs-attr">tokenAddress</span>: <span class="hljs-string">"0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d"</span>, <span class="hljs-comment">// Decentraland</span>
  <span class="hljs-attr">tokenId</span>: <span class="hljs-string">"115792089237316195423570985008687907832853042650384256231655107562007036952461"</span>, <span class="hljs-comment">// Token ID</span>
  <span class="hljs-attr">accountAddress</span>: OWNERS_WALLET_ADDRESS,
  <span class="hljs-attr">startAmount</span>: <span class="hljs-number">10</span>,
  buyerAddress
})
</code></pre>
				<h3 id="sharing-sale-fees-with-opensea">Sharing Sale Fees with OpenSea</h3>
				<p>We share fees for successful sales with game developers, relayers, and affiliates using the OpenSea orderbook. Developers can customize the fee amount to apply to  buyers and/or sellers.</p>
				<p>See <a href="#affiliate-program">Affiliate Program</a> above for how to register referrers for sales.</p>
				<p>More information will appear here when our redesigned affiliate program is ready. In the meantime, contact us at <a href="mailto:contact@opensea.io">contact@opensea.io</a> (or in <a href="https://discord.gg/ga8EJbv">Discord</a>), or use our legacy affiliate program at <a href="https://opensea.io/account#referrals">https://opensea.io/account#referrals</a>.</p>
				<h3 id="listening-to-events">Listening to Events</h3>
				<p>Events are fired whenever transactions or orders are being created, and when transactions return receipts from recently mined blocks on the Ethereum blockchain.</p>
				<p>Our recommendation is that you &quot;forward&quot; OpenSea events to your own store or state management system. Here&#39;s an example of doing that with a Redux action:</p>
				<pre><code class="lang-JavaScript"><span class="hljs-keyword">import</span> { EventType } <span class="hljs-keyword">from</span> <span class="hljs-string">'opensea-js'</span>
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> ActionTypes <span class="hljs-keyword">from</span> <span class="hljs-string">'./index'</span>
<span class="hljs-keyword">import</span> { openSeaPort } <span class="hljs-keyword">from</span> <span class="hljs-string">'../globalSingletons'</span>

<span class="hljs-comment">// ...</span>

handleSeaportEvents() {
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">dispatch, getState</span>) </span>{
    openSeaPort.addListener(EventType.TransactionCreated, ({ transactionHash, event }) =&gt; {
      <span class="hljs-built_in">console</span>.info({ transactionHash, event })
      dispatch({ <span class="hljs-attr">type</span>: ActionTypes.SET_PENDING_TRANSACTION_HASH, <span class="hljs-attr">hash</span>: transactionHash })
    })
    openSeaPort.addListener(EventType.TransactionConfirmed, ({ transactionHash, event }) =&gt; {
      <span class="hljs-built_in">console</span>.info({ transactionHash, event })
      <span class="hljs-comment">// Only reset your exchange UI if we're finishing an order fulfillment or cancellation</span>
      <span class="hljs-keyword">if</span> (event == EventType.MatchOrders || event == EventType.CancelOrder) {
        dispatch({ <span class="hljs-attr">type</span>: ActionTypes.RESET_EXCHANGE })
      }
    })
    openSeaPort.addListener(EventType.TransactionDenied, ({ transactionHash, event }) =&gt; {
      <span class="hljs-built_in">console</span>.info({ transactionHash, event })
      dispatch({ <span class="hljs-attr">type</span>: ActionTypes.RESET_EXCHANGE })
    })
    openSeaPort.addListener(EventType.TransactionFailed, ({ transactionHash, event }) =&gt; {
      <span class="hljs-built_in">console</span>.info({ transactionHash, event })
      dispatch({ <span class="hljs-attr">type</span>: ActionTypes.RESET_EXCHANGE })
    })
    openSeaPort.addListener(EventType.InitializeAccount, ({ accountAddress }) =&gt; {
      <span class="hljs-built_in">console</span>.info({ accountAddress })
      dispatch({ <span class="hljs-attr">type</span>: ActionTypes.INITIALIZE_PROXY })
    })
    openSeaPort.addListener(EventType.WrapEth, ({ accountAddress, amount }) =&gt; {
      <span class="hljs-built_in">console</span>.info({ accountAddress, amount })
      dispatch({ <span class="hljs-attr">type</span>: ActionTypes.WRAP_ETH })
    })
    openSeaPort.addListener(EventType.UnwrapWeth, ({ accountAddress, amount }) =&gt; {
      <span class="hljs-built_in">console</span>.info({ accountAddress, amount })
      dispatch({ <span class="hljs-attr">type</span>: ActionTypes.UNWRAP_WETH })
    })
    openSeaPort.addListener(EventType.ApproveCurrency, ({ accountAddress, tokenAddress }) =&gt; {
      <span class="hljs-built_in">console</span>.info({ accountAddress, tokenAddress })
      dispatch({ <span class="hljs-attr">type</span>: ActionTypes.APPROVE_WETH })
    })
    openSeaPort.addListener(EventType.ApproveAllAssets, ({ accountAddress, proxyAddress, tokenAddress }) =&gt; {
      <span class="hljs-built_in">console</span>.info({ accountAddress, proxyAddress, tokenAddress })
      dispatch({ <span class="hljs-attr">type</span>: ActionTypes.APPROVE_ALL_ASSETS })
    })
    openSeaPort.addListener(EventType.ApproveAsset, ({ accountAddress, proxyAddress, tokenAddress, tokenId }) =&gt; {
      <span class="hljs-built_in">console</span>.info({ accountAddress, proxyAddress, tokenAddress, tokenId })
      dispatch({ <span class="hljs-attr">type</span>: ActionTypes.APPROVE_ASSET })
    })
    openSeaPort.addListener(EventType.CreateOrder, ({ order, accountAddress }) =&gt; {
      <span class="hljs-built_in">console</span>.info({ order, accountAddress })
      dispatch({ <span class="hljs-attr">type</span>: ActionTypes.CREATE_ORDER })
    })
    openSeaPort.addListener(EventType.OrderDenied, ({ order, accountAddress }) =&gt; {
      <span class="hljs-built_in">console</span>.info({ order, accountAddress })
      dispatch({ <span class="hljs-attr">type</span>: ActionTypes.RESET_EXCHANGE })
    })
    openSeaPort.addListener(EventType.MatchOrders, ({ buy, sell, accountAddress }) =&gt; {
      <span class="hljs-built_in">console</span>.info({ buy, sell, accountAddress })
      dispatch({ <span class="hljs-attr">type</span>: ActionTypes.FULFILL_ORDER })
    })
    openSeaPort.addListener(EventType.CancelOrder, ({ order, accountAddress }) =&gt; {
      <span class="hljs-built_in">console</span>.info({ order, accountAddress })
      dispatch({ <span class="hljs-attr">type</span>: ActionTypes.CANCEL_ORDER })
    })
  }
}
</code></pre>
				<p>To remove all listeners and start over, just call <code>seaport.removeAllListeners()</code>.</p>
				<h2 id="learning-more">Learning More</h2>
				<p>Auto-generated documentation for each export is available <a href="https://projectopensea.github.io/opensea-js/">here</a>.</p>
				<p>If you need extra help, support is free! Contact the OpenSea devs. They&#39;re available every day on <a href="https://discord.gg/XjwWYgU">Discord</a> in the <code>#developers</code> channel.</p>
				<h3 id="example-code">Example Code</h3>
				<p>Check out the <a href="https://github.com/ProjectOpenSea/ships-log">Ship&#39;s Log</a>, built with the SDK, which shows the recent orders in the OpenSea orderbook.</p>
				<p>You can view a live demo <a href="https://ships-log.herokuapp.com/">here</a>! Also check out the <a href="https://mythereum.io/marketplace">Mythereum marketplace</a>, which is entirely powered by OpenSea.js.</p>
				<h2 id="migrating-to-version-1-0">Migrating to version 1.0</h2>
				<p>See the <a href="CHANGELOG.md">Changelog</a>.</p>
				<h2 id="development-information">Development Information</h2>
				<p><strong>Setup</strong></p>
				<p><a href="https://nodejs.org/en/">Node &gt;= v8.11.2</a> required.</p>
				<p>Before any development, install the required NPM dependencies:</p>
				<pre><code class="lang-bash">npm install
</code></pre>
				<p>And install TypeScript if you haven&#39;t already:</p>
				<pre><code class="lang-bash">npm install -g tslint typescript
</code></pre>
				<p><strong>Build</strong></p>
				<p>Then, lint and build the library into the <code>lib</code> directory:</p>
				<pre><code class="lang-bash">npm run build
</code></pre>
				<p>Or run the tests:</p>
				<pre><code class="lang-bash">npm <span class="hljs-built_in">test</span>
</code></pre>
				<p>Note that the tests require access to both Infura and the OpenSea API. The timeout is adjustable via the <code>test</code> script in <code>package.json</code>.</p>
				<p><strong>Generate Documentation</strong></p>
				<p>Generate html docs, also available for browsing <a href="https://projectopensea.github.io/opensea-js/">here</a>:</p>
				<pre><code class="lang-bash">npm run docsHtml
</code></pre>
				<p>Or generate markdown docs available for browsing on git repos:</p>
				<pre><code class="lang-bash">npm run docsMarkdown
</code></pre>
				<p>Due to a markdown theme typescript issue, <code>docs</code> just generates html docs right now:</p>
				<pre><code class="lang-bash">npm run docs
</code></pre>
				<p><strong>Contributing</strong></p>
				<p>Contributions welcome! Please use GitHub issues for suggestions/concerns - if you prefer to express your intentions in code, feel free to submit a pull request.</p>
				<h2 id="diagnosing-common-issues">Diagnosing Common Issues</h2>
				<ul>
					<li><p>Is the <code>expirationTime</code> in future?  If not, change it to a time in the future.</p>
					</li>
					<li><p>Are the input addresses all strings? If not, convert them to strings.</p>
					</li>
					<li><p>Is your computer&#39;s internal clock accurate? If not, try enabling automatic clock adjustment locally or following <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-time.html">this tutorial</a> to update an Amazon EC2 instance.</p>
					</li>
					<li><p>Are you attempting to purchase a token that&#39;s unpurchasable on <a href="https://opensea.io/">OpenSea</a>?  If so, contact us <a href="https://discord.gg/XjwWYgU">Discord</a> in the <code>#developers</code> channel and we&#39;ll help to diagnose the issue.</p>
					</li>
				</ul>
			</div>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
					<li class=" tsd-kind-enum">
						<a href="enums/assetcontracttype.html" class="tsd-kind-icon">Asset<wbr>Contract<wbr>Type</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/asseteventtype.html" class="tsd-kind-icon">Asset<wbr>Event<wbr>Type</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/auctiontype.html" class="tsd-kind-icon">Auction<wbr>Type</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/eventtype.html" class="tsd-kind-icon">Event<wbr>Type</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/feemethod.html" class="tsd-kind-icon">Fee<wbr>Method</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/orderside.html" class="tsd-kind-icon">Order<wbr>Side</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/salekind.html" class="tsd-kind-icon">Sale<wbr>Kind</a>
					</li>
					<li class=" tsd-kind-enum tsd-is-not-exported">
						<a href="enums/side.html" class="tsd-kind-icon">Side</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/tokenstandardversion.html" class="tsd-kind-icon">Token<wbr>Standard<wbr>Version</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/wyvernassetlocation.html" class="tsd-kind-icon">Wyvern<wbr>Asset<wbr>Location</a>
					</li>
					<li class=" tsd-kind-enum">
						<a href="enums/wyvernschemaname.html" class="tsd-kind-icon">Wyvern<wbr>Schema<wbr>Name</a>
					</li>
					<li class=" tsd-kind-class">
						<a href="classes/openseaapi.html" class="tsd-kind-icon">Open<wbr>SeaAPI</a>
					</li>
					<li class=" tsd-kind-class">
						<a href="classes/openseaport.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Port</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/asset.html" class="tsd-kind-icon">Asset</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/assetevent.html" class="tsd-kind-icon">Asset<wbr>Event</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/callspec.html" class="tsd-kind-icon">Call<wbr>Spec</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/computedfees.html" class="tsd-kind-icon">Computed<wbr>Fees</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/eventdata.html" class="tsd-kind-icon">Event<wbr>Data</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/exchangemetadataforasset.html" class="tsd-kind-icon">Exchange<wbr>Metadata<wbr>For<wbr>Asset</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/exchangemetadataforbundle.html" class="tsd-kind-icon">Exchange<wbr>Metadata<wbr>For<wbr>Bundle</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/limitedcallspec.html" class="tsd-kind-icon">Limited<wbr>Call<wbr>Spec</a>
					</li>
					<li class=" tsd-kind-interface tsd-is-not-exported">
						<a href="interfaces/numericaltraitstats.html" class="tsd-kind-icon">Numerical<wbr>Trait<wbr>Stats</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaapiconfig.html" class="tsd-kind-icon">Open<wbr>SeaAPIConfig</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaaccount.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Account</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaasset.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaassetbundle.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Bundle</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaassetbundlejson.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>BundleJSON</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaassetbundlequery.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Bundle<wbr>Query</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaassetcontract.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Contract</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseaassetquery.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Query</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseacollection.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Collection</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseafees.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Fees</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseafungibletoken.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Fungible<wbr>Token</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseafungibletokenquery.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Fungible<wbr>Token<wbr>Query</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseatraitstats.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Trait<wbr>Stats</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/openseauser.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>User</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/order.html" class="tsd-kind-icon">Order</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/orderjson.html" class="tsd-kind-icon">OrderJSON</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/orderquery.html" class="tsd-kind-icon">Order<wbr>Query</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/orderbookresponse.html" class="tsd-kind-icon">Orderbook<wbr>Response</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/partialabidefinition.html" class="tsd-kind-icon">Partial<wbr>Abi<wbr>Definition</a>
					</li>
					<li class=" tsd-kind-interface tsd-is-not-exported">
						<a href="interfaces/stringtraitstats.html" class="tsd-kind-icon">String<wbr>Trait<wbr>Stats</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/transaction.html" class="tsd-kind-icon">Transaction</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/unhashedorder.html" class="tsd-kind-icon">Unhashed<wbr>Order</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/unsignedorder.html" class="tsd-kind-icon">Unsigned<wbr>Order</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/wyvernbundle.html" class="tsd-kind-icon">Wyvern<wbr>Bundle</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/wyvernftasset.html" class="tsd-kind-icon">WyvernFTAsset</a>
					</li>
					<li class=" tsd-kind-interface">
						<a href="interfaces/wyvernnftasset.html" class="tsd-kind-icon">WyvernNFTAsset</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#atomicizedbuyencoder" class="tsd-kind-icon">Atomicized<wbr>Buy<wbr>Encoder</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#atomicizedsellencoder" class="tsd-kind-icon">Atomicized<wbr>Sell<wbr>Encoder</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#defaultcallencoder" class="tsd-kind-icon">Default<wbr>Call<wbr>Encoder</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#encoder" class="tsd-kind-icon">Encoder</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#exchangemetadata" class="tsd-kind-icon">Exchange<wbr>Metadata</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#fungibletoken" class="tsd-kind-icon">Fungible<wbr>Token</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#fungibletokenquery" class="tsd-kind-icon">Fungible<wbr>Token<wbr>Query</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#partialreadonlycontractabi" class="tsd-kind-icon">Partial<wbr>Readonly<wbr>Contract<wbr>Abi</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#txncallback" class="tsd-kind-icon">Txn<wbr>Callback</a>
					</li>
					<li class=" tsd-kind-type-alias tsd-has-type-parameter">
						<a href="globals.html#web3callback" class="tsd-kind-icon">Web3<wbr>Callback</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#web3rpccallback" class="tsd-kind-icon">Web3RPCCallback</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#wyvernasset" class="tsd-kind-icon">Wyvern<wbr>Asset</a>
					</li>
					<li class=" tsd-kind-type-alias">
						<a href="globals.html#wyvernatomicmatchparameters" class="tsd-kind-icon">Wyvern<wbr>Atomic<wbr>Match<wbr>Parameters</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#api_base_mainnet" class="tsd-kind-icon">API_<wbr>BASE_<wbr>MAINNET</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#api_base_rinkeby" class="tsd-kind-icon">API_<wbr>BASE_<wbr>RINKEBY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#api_path" class="tsd-kind-icon">API_<wbr>PATH</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#api_version" class="tsd-kind-icon">API_<wbr>VERSION</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#cheeze_wizards_basic_tournament_address" class="tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>BASIC_<wbr>TOURNAMENT_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#cheeze_wizards_basic_tournament_rinkeby_address" class="tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>BASIC_<wbr>TOURNAMENT_<wbr>RINKEBY_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#cheeze_wizards_guild_address" class="tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>GUILD_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#cheeze_wizards_guild_rinkeby_address" class="tsd-kind-icon">CHEEZE_<wbr>WIZARDS_<wbr>GUILD_<wbr>RINKEBY_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#ck_address" class="tsd-kind-icon">CK_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#ck_rinkeby_address" class="tsd-kind-icon">CK_<wbr>RINKEBY_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#canonicalweth" class="tsd-kind-icon">CanonicalWETH</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#cheezewizardsbasictournament" class="tsd-kind-icon">Cheeze<wbr>Wizards<wbr>Basic<wbr>Tournament</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#cheezewizardsguild" class="tsd-kind-icon">Cheeze<wbr>Wizards<wbr>Guild</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#decentraland_estate_address" class="tsd-kind-icon">DECENTRALAND_<wbr>ESTATE_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#default_buyer_fee_basis_points" class="tsd-kind-icon">DEFAULT_<wbr>BUYER_<wbr>FEE_<wbr>BASIS_<wbr>POINTS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#default_gas_increase_factor" class="tsd-kind-icon">DEFAULT_<wbr>GAS_<wbr>INCREASE_<wbr>FACTOR</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#default_max_bounty" class="tsd-kind-icon">DEFAULT_<wbr>MAX_<wbr>BOUNTY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#default_seller_fee_basis_points" class="tsd-kind-icon">DEFAULT_<wbr>SELLER_<wbr>FEE_<wbr>BASIS_<wbr>POINTS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#default_wrapped_nft_liquidation_uniswap_slippage_in_basis_points" class="tsd-kind-icon">DEFAULT_<wbr>WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>UNISWAP_<wbr>SLIPPAGE_<wbr>IN_<wbr>BASIS_<wbr>POINTS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#dep_infura_key" class="tsd-kind-icon">DEP_<wbr>INFURA_<wbr>KEY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#decentralandestates" class="tsd-kind-icon">Decentraland<wbr>Estates</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#enjin_address" class="tsd-kind-icon">ENJIN_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#enjin_coin_address" class="tsd-kind-icon">ENJIN_<wbr>COIN_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#enjin_legacy_address" class="tsd-kind-icon">ENJIN_<wbr>LEGACY_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#erc1155" class="tsd-kind-icon">ERC1155</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#erc20" class="tsd-kind-icon">ERC20</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#erc721" class="tsd-kind-icon">ERC721</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#inverse_basis_point" class="tsd-kind-icon">INVERSE_<wbr>BASIS_<wbr>POINT</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#mainnet_provider_url" class="tsd-kind-icon">MAINNET_<wbr>PROVIDER_<wbr>URL</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#mana_address" class="tsd-kind-icon">MANA_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#max_error_length" class="tsd-kind-icon">MAX_<wbr>ERROR_<wbr>LENGTH</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#max_uint_256" class="tsd-kind-icon">MAX_<wbr>UINT_<wbr>256</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#min_expiration_seconds" class="tsd-kind-icon">MIN_<wbr>EXPIRATION_<wbr>SECONDS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#null_address" class="tsd-kind-icon">NULL_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#null_block_hash" class="tsd-kind-icon">NULL_<wbr>BLOCK_<wbr>HASH</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#opensea_fee_recipient" class="tsd-kind-icon">OPENSEA_<wbr>FEE_<wbr>RECIPIENT</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#opensea_seller_bounty_basis_points" class="tsd-kind-icon">OPENSEA_<wbr>SELLER_<wbr>BOUNTY_<wbr>BASIS_<wbr>POINTS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#orderbook_path" class="tsd-kind-icon">ORDERBOOK_<wbr>PATH</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#orderbook_version" class="tsd-kind-icon">ORDERBOOK_<wbr>VERSION</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#order_matching_latency_seconds" class="tsd-kind-icon">ORDER_<wbr>MATCHING_<wbr>LATENCY_<wbr>SECONDS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#rinkeby_provider_url" class="tsd-kind-icon">RINKEBY_<wbr>PROVIDER_<wbr>URL</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#sell_order_batch_size" class="tsd-kind-icon">SELL_<wbr>ORDER_<wbr>BATCH_<wbr>SIZE</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#site_host_mainnet" class="tsd-kind-icon">SITE_<wbr>HOST_<wbr>MAINNET</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#site_host_rinkeby" class="tsd-kind-icon">SITE_<wbr>HOST_<wbr>RINKEBY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#static_call_cheeze_wizards_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>CHEEZE_<wbr>WIZARDS_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#static_call_cheeze_wizards_rinkeby_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>CHEEZE_<wbr>WIZARDS_<wbr>RINKEBY_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#static_call_decentraland_estates_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>DECENTRALAND_<wbr>ESTATES_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#static_call_tx_origin_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>TX_<wbr>ORIGIN_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#static_call_tx_origin_rinkeby_address" class="tsd-kind-icon">STATIC_<wbr>CALL_<wbr>TX_<wbr>ORIGIN_<wbr>RINKEBY_<wbr>ADDRESS</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#staticcheckcheezewizards" class="tsd-kind-icon">Static<wbr>Check<wbr>Cheeze<wbr>Wizards</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#staticcheckdecentralandestates" class="tsd-kind-icon">Static<wbr>Check<wbr>Decentraland<wbr>Estates</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#staticchecktxorigin" class="tsd-kind-icon">Static<wbr>Check<wbr>TxOrigin</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#uniswap_factory_address_mainnet" class="tsd-kind-icon">UNISWAP_<wbr>FACTORY_<wbr>ADDRESS_<wbr>MAINNET</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#uniswap_factory_address_rinkeby" class="tsd-kind-icon">UNISWAP_<wbr>FACTORY_<wbr>ADDRESS_<wbr>RINKEBY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#uniswapexchange" class="tsd-kind-icon">Uniswap<wbr>Exchange</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#uniswapfactory" class="tsd-kind-icon">Uniswap<wbr>Factory</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wrapped_nft_factory_address_mainnet" class="tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>FACTORY_<wbr>ADDRESS_<wbr>MAINNET</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wrapped_nft_factory_address_rinkeby" class="tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>FACTORY_<wbr>ADDRESS_<wbr>RINKEBY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wrapped_nft_liquidation_proxy_address_mainnet" class="tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>PROXY_<wbr>ADDRESS_<wbr>MAINNET</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wrapped_nft_liquidation_proxy_address_rinkeby" class="tsd-kind-icon">WRAPPED_<wbr>NFT_<wbr>LIQUIDATION_<wbr>PROXY_<wbr>ADDRESS_<wbr>RINKEBY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wyvern_exchange_address_mainnet" class="tsd-kind-icon">WYVERN_<wbr>EXCHANGE_<wbr>ADDRESS_<wbr>MAINNET</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wyvern_exchange_address_rinkeby" class="tsd-kind-icon">WYVERN_<wbr>EXCHANGE_<wbr>ADDRESS_<wbr>RINKEBY</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wrappednft" class="tsd-kind-icon">WrappedNFT</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wrappednftfactory" class="tsd-kind-icon">WrappedNFTFactory</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#wrappednftliquidationproxy" class="tsd-kind-icon">WrappedNFTLiquidation<wbr>Proxy</a>
					</li>
					<li class=" tsd-kind-variable">
						<a href="globals.html#encodereplacementpattern" class="tsd-kind-icon">encode<wbr>Replacement<wbr>Pattern</a>
					</li>
					<li class=" tsd-kind-variable tsd-is-not-exported">
						<a href="globals.html#txcallbacks" class="tsd-kind-icon">tx<wbr>Callbacks</a>
					</li>
					<li class=" tsd-kind-function tsd-is-not-exported">
						<a href="globals.html#_throworcontinue" class="tsd-kind-icon">_throw<wbr>OrContinue</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#accountfromjson" class="tsd-kind-icon">account<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#annotateerc20transferabi" class="tsd-kind-icon">annotateERC20<wbr>TransferABI</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#annotateerc721transferabi" class="tsd-kind-icon">annotateERC721<wbr>TransferABI</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#assetbundlefromjson" class="tsd-kind-icon">asset<wbr>Bundle<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#assetcontractfromjson" class="tsd-kind-icon">asset<wbr>Contract<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#asseteventfromjson" class="tsd-kind-icon">asset<wbr>Event<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#assetfromjson" class="tsd-kind-icon">asset<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#assignorderstosides" class="tsd-kind-icon">assign<wbr>Orders<wbr>ToSides</a>
					</li>
					<li class=" tsd-kind-function tsd-is-not-exported">
						<a href="globals.html#cansettleorder" class="tsd-kind-icon">can<wbr>Settle<wbr>Order</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#collectionfromjson" class="tsd-kind-icon">collection<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#confirmtransaction" class="tsd-kind-icon">confirm<wbr>Transaction</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#delay" class="tsd-kind-icon">delay</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodeatomicizedbuy" class="tsd-kind-icon">encode<wbr>Atomicized<wbr>Buy</a>
					</li>
					<li class=" tsd-kind-function tsd-is-not-exported">
						<a href="globals.html#encodeatomicizedcalldata" class="tsd-kind-icon">encode<wbr>Atomicized<wbr>Calldata</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodeatomicizedsell" class="tsd-kind-icon">encode<wbr>Atomicized<wbr>Sell</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodeatomicizedtransfer" class="tsd-kind-icon">encode<wbr>Atomicized<wbr>Transfer</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodebuy" class="tsd-kind-icon">encode<wbr>Buy</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodecall" class="tsd-kind-icon">encode<wbr>Call</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodedefaultcall" class="tsd-kind-icon">encode<wbr>Default<wbr>Call</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodeproxycall" class="tsd-kind-icon">encode<wbr>Proxy<wbr>Call</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodesell" class="tsd-kind-icon">encode<wbr>Sell</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#encodetransfercall" class="tsd-kind-icon">encode<wbr>Transfer<wbr>Call</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#estimatecurrentprice" class="tsd-kind-icon">estimate<wbr>Current<wbr>Price</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#estimategas" class="tsd-kind-icon">estimate<wbr>Gas</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#event" class="tsd-kind-icon">event</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#getcurrentgasprice" class="tsd-kind-icon">get<wbr>Current<wbr>Gas<wbr>Price</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#getmethod" class="tsd-kind-icon">get<wbr>Method</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#getnoncompliantapprovaladdress" class="tsd-kind-icon">get<wbr>Non<wbr>Compliant<wbr>Approval<wbr>Address</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#getorderhash" class="tsd-kind-icon">get<wbr>Order<wbr>Hash</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#gettransferfeesettings" class="tsd-kind-icon">get<wbr>Transfer<wbr>Fee<wbr>Settings</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#getwyvernasset" class="tsd-kind-icon">get<wbr>Wyvern<wbr>Asset</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#getwyvernbundle" class="tsd-kind-icon">get<wbr>Wyvern<wbr>Bundle</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#iscontractaddress" class="tsd-kind-icon">is<wbr>Contract<wbr>Address</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#makebignumber" class="tsd-kind-icon">make<wbr>Big<wbr>Number</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#ondeprecated" class="tsd-kind-icon">on<wbr>Deprecated</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#orderfromjson" class="tsd-kind-icon">order<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#ordertojson" class="tsd-kind-icon">order<wbr>ToJSON</a>
					</li>
					<li class=" tsd-kind-function tsd-is-not-exported">
						<a href="globals.html#parsesignaturehex" class="tsd-kind-icon">parse<wbr>Signature<wbr>Hex</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#personalsignasync" class="tsd-kind-icon">personal<wbr>Sign<wbr>Async</a>
					</li>
					<li class=" tsd-kind-function tsd-has-type-parameter tsd-is-not-exported">
						<a href="globals.html#promisify" class="tsd-kind-icon">promisify</a>
					</li>
					<li class=" tsd-kind-function tsd-has-type-parameter">
						<a href="globals.html#promisifycall" class="tsd-kind-icon">promisify<wbr>Call</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#rawcall" class="tsd-kind-icon">raw<wbr>Call</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#requireordercalldatacanmatch" class="tsd-kind-icon">require<wbr>Order<wbr>Calldata<wbr>Can<wbr>Match</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#requireorderscanmatch" class="tsd-kind-icon">require<wbr>Orders<wbr>Can<wbr>Match</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#sendrawtransaction" class="tsd-kind-icon">send<wbr>Raw<wbr>Transaction</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#tokenfromjson" class="tsd-kind-icon">token<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function tsd-is-not-exported">
						<a href="globals.html#track" class="tsd-kind-icon">track</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#transactionfromjson" class="tsd-kind-icon">transaction<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#userfromjson" class="tsd-kind-icon">user<wbr>FromJSON</a>
					</li>
					<li class=" tsd-kind-function">
						<a href="globals.html#validateandformatwalletaddress" class="tsd-kind-icon">validate<wbr>And<wbr>Format<wbr>Wallet<wbr>Address</a>
					</li>
					<li class=" tsd-kind-object-literal">
						<a href="globals.html#decentraland_auction_config" class="tsd-kind-icon">DECENTRALAND_<wbr>AUCTION_<wbr>CONFIG</a>
					</li>
					<li class=" tsd-kind-object-literal tsd-is-not-exported">
						<a href="globals.html#schema_name_to_asset_contract_type" class="tsd-kind-icon">SCHEMA_<wbr>NAME_<wbr>TO_<wbr>ASSET_<wbr>CONTRACT_<wbr>TYPE</a>
					</li>
					<li class=" tsd-kind-object-literal tsd-is-not-exported">
						<a href="globals.html#salekindinterface" class="tsd-kind-icon">Sale<wbr>Kind<wbr>Interface</a>
					</li>
					<li class=" tsd-kind-object-literal">
						<a href="globals.html#proxyabi" class="tsd-kind-icon">proxyABI</a>
					</li>
					<li class=" tsd-kind-object-literal">
						<a href="globals.html#proxyassertabi" class="tsd-kind-icon">proxy<wbr>AssertABI</a>
					</li>
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/asset.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>Asset | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="asset.html">Asset</a>
				</li>
			</ul>
			<h1>Interface Asset</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">Asset</span>
						<ul class="tsd-hierarchy">
							<li>
								<a href="openseaasset.html" class="tsd-signature-type">OpenSeaAsset</a>
							</li>
						</ul>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="asset.html#decimals" class="tsd-kind-icon">decimals</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="asset.html#name" class="tsd-kind-icon">name</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="asset.html#schemaname" class="tsd-kind-icon">schema<wbr>Name</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="asset.html#tokenaddress" class="tsd-kind-icon">token<wbr>Address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="asset.html#tokenid" class="tsd-kind-icon">token<wbr>Id</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="asset.html#version" class="tsd-kind-icon">version</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="decimals" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> decimals</h3>
					<div class="tsd-signature tsd-kind-icon">decimals<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L240">types.ts:240</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="name" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> name</h3>
					<div class="tsd-signature tsd-kind-icon">name<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L238">types.ts:238</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="schemaname" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> schema<wbr>Name</h3>
					<div class="tsd-signature tsd-kind-icon">schema<wbr>Name<span class="tsd-signature-symbol">:</span> <a href="../enums/wyvernschemaname.html" class="tsd-signature-type">WyvernSchemaName</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L234">types.ts:234</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="tokenaddress" class="tsd-anchor"></a>
					<h3>token<wbr>Address</h3>
					<div class="tsd-signature tsd-kind-icon">token<wbr>Address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L232">types.ts:232</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="tokenid" class="tsd-anchor"></a>
					<h3>token<wbr>Id</h3>
					<div class="tsd-signature tsd-kind-icon">token<wbr>Id<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L230">types.ts:230</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="version" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> version</h3>
					<div class="tsd-signature tsd-kind-icon">version<span class="tsd-signature-symbol">:</span> <a href="../enums/tokenstandardversion.html" class="tsd-signature-type">TokenStandardVersion</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L236">types.ts:236</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="asset.html" class="tsd-kind-icon">Asset</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="asset.html#decimals" class="tsd-kind-icon">decimals</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="asset.html#name" class="tsd-kind-icon">name</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="asset.html#schemaname" class="tsd-kind-icon">schema<wbr>Name</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="asset.html#tokenaddress" class="tsd-kind-icon">token<wbr>Address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="asset.html#tokenid" class="tsd-kind-icon">token<wbr>Id</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="asset.html#version" class="tsd-kind-icon">version</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/assetevent.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>AssetEvent | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="assetevent.html">AssetEvent</a>
				</li>
			</ul>
			<h1>Interface AssetEvent</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">AssetEvent</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="assetevent.html#auctiontype" class="tsd-kind-icon">auction<wbr>Type</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="assetevent.html#eventtimestamp" class="tsd-kind-icon">event<wbr>Timestamp</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="assetevent.html#eventtype" class="tsd-kind-icon">event<wbr>Type</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="assetevent.html#paymenttoken" class="tsd-kind-icon">payment<wbr>Token</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="assetevent.html#totalprice" class="tsd-kind-icon">total<wbr>Price</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="assetevent.html#transaction" class="tsd-kind-icon">transaction</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="auctiontype" class="tsd-anchor"></a>
					<h3>auction<wbr>Type</h3>
					<div class="tsd-signature tsd-kind-icon">auction<wbr>Type<span class="tsd-signature-symbol">:</span> <a href="../enums/auctiontype.html" class="tsd-signature-type">AuctionType</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L391">types.ts:391</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="eventtimestamp" class="tsd-anchor"></a>
					<h3>event<wbr>Timestamp</h3>
					<div class="tsd-signature tsd-kind-icon">event<wbr>Timestamp<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Date</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L388">types.ts:388</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="eventtype" class="tsd-anchor"></a>
					<h3>event<wbr>Type</h3>
					<div class="tsd-signature tsd-kind-icon">event<wbr>Type<span class="tsd-signature-symbol">:</span> <a href="../enums/asseteventtype.html" class="tsd-signature-type">AssetEventType</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L385">types.ts:385</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="paymenttoken" class="tsd-anchor"></a>
					<h3>payment<wbr>Token</h3>
					<div class="tsd-signature tsd-kind-icon">payment<wbr>Token<span class="tsd-signature-symbol">:</span> <a href="openseafungibletoken.html" class="tsd-signature-type">OpenSeaFungibleToken</a><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L400">types.ts:400</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="totalprice" class="tsd-anchor"></a>
					<h3>total<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">total<wbr>Price<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L394">types.ts:394</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="transaction" class="tsd-anchor"></a>
					<h3>transaction</h3>
					<div class="tsd-signature tsd-kind-icon">transaction<span class="tsd-signature-symbol">:</span> <a href="transaction.html" class="tsd-signature-type">Transaction</a><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L397">types.ts:397</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="assetevent.html" class="tsd-kind-icon">Asset<wbr>Event</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="assetevent.html#auctiontype" class="tsd-kind-icon">auction<wbr>Type</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="assetevent.html#eventtimestamp" class="tsd-kind-icon">event<wbr>Timestamp</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="assetevent.html#eventtype" class="tsd-kind-icon">event<wbr>Type</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="assetevent.html#paymenttoken" class="tsd-kind-icon">payment<wbr>Token</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="assetevent.html#totalprice" class="tsd-kind-icon">total<wbr>Price</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="assetevent.html#transaction" class="tsd-kind-icon">transaction</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/callspec.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>CallSpec | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="callspec.html">CallSpec</a>
				</li>
			</ul>
			<h1>Interface CallSpec</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">CallSpec</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="callspec.html#calldata" class="tsd-kind-icon">calldata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="callspec.html#replacementpattern" class="tsd-kind-icon">replacement<wbr>Pattern</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="callspec.html#target" class="tsd-kind-icon">target</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="calldata" class="tsd-anchor"></a>
					<h3>calldata</h3>
					<div class="tsd-signature tsd-kind-icon">calldata<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L23">utils/schema.ts:23</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="replacementpattern" class="tsd-anchor"></a>
					<h3>replacement<wbr>Pattern</h3>
					<div class="tsd-signature tsd-kind-icon">replacement<wbr>Pattern<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L24">utils/schema.ts:24</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="target" class="tsd-anchor"></a>
					<h3>target</h3>
					<div class="tsd-signature tsd-kind-icon">target<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L22">utils/schema.ts:22</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="callspec.html" class="tsd-kind-icon">Call<wbr>Spec</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="callspec.html#calldata" class="tsd-kind-icon">calldata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="callspec.html#replacementpattern" class="tsd-kind-icon">replacement<wbr>Pattern</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="callspec.html#target" class="tsd-kind-icon">target</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/computedfees.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>ComputedFees | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="computedfees.html">ComputedFees</a>
				</li>
			</ul>
			<h1>Interface ComputedFees</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<a href="openseafees.html" class="tsd-signature-type">OpenSeaFees</a>
						<ul class="tsd-hierarchy">
							<li>
								<span class="target">ComputedFees</span>
							</li>
						</ul>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="computedfees.html#devbuyerfeebasispoints" class="tsd-kind-icon">dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="computedfees.html#devsellerfeebasispoints" class="tsd-kind-icon">dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="computedfees.html#openseabuyerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="computedfees.html#openseasellerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="computedfees.html#sellerbountybasispoints" class="tsd-kind-icon">seller<wbr>Bounty<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="computedfees.html#totalbuyerfeebasispoints" class="tsd-kind-icon">total<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="computedfees.html#totalsellerfeebasispoints" class="tsd-kind-icon">total<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="computedfees.html#transferfee" class="tsd-kind-icon">transfer<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="computedfees.html#transferfeetokenaddress" class="tsd-kind-icon">transfer<wbr>Fee<wbr>Token<wbr>Address</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="devbuyerfeebasispoints" class="tsd-anchor"></a>
					<h3>dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="openseafees.html">OpenSeaFees</a>.<a href="openseafees.html#devbuyerfeebasispoints">devBuyerFeeBasisPoints</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L527">types.ts:527</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="devsellerfeebasispoints" class="tsd-anchor"></a>
					<h3>dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="openseafees.html">OpenSeaFees</a>.<a href="openseafees.html#devsellerfeebasispoints">devSellerFeeBasisPoints</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L525">types.ts:525</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="openseabuyerfeebasispoints" class="tsd-anchor"></a>
					<h3>opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="openseafees.html">OpenSeaFees</a>.<a href="openseafees.html#openseabuyerfeebasispoints">openseaBuyerFeeBasisPoints</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L523">types.ts:523</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="openseasellerfeebasispoints" class="tsd-anchor"></a>
					<h3>opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="openseafees.html">OpenSeaFees</a>.<a href="openseafees.html#openseasellerfeebasispoints">openseaSellerFeeBasisPoints</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L521">types.ts:521</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="sellerbountybasispoints" class="tsd-anchor"></a>
					<h3>seller<wbr>Bounty<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">seller<wbr>Bounty<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L544">types.ts:544</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="totalbuyerfeebasispoints" class="tsd-anchor"></a>
					<h3>total<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">total<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L535">types.ts:535</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="totalsellerfeebasispoints" class="tsd-anchor"></a>
					<h3>total<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">total<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L536">types.ts:536</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="transferfee" class="tsd-anchor"></a>
					<h3>transfer<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">transfer<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L539">types.ts:539</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="transferfeetokenaddress" class="tsd-anchor"></a>
					<h3>transfer<wbr>Fee<wbr>Token<wbr>Address</h3>
					<div class="tsd-signature tsd-kind-icon">transfer<wbr>Fee<wbr>Token<wbr>Address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L540">types.ts:540</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="computedfees.html" class="tsd-kind-icon">Computed<wbr>Fees</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="computedfees.html#devbuyerfeebasispoints" class="tsd-kind-icon">dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="computedfees.html#devsellerfeebasispoints" class="tsd-kind-icon">dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="computedfees.html#openseabuyerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="computedfees.html#openseasellerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="computedfees.html#sellerbountybasispoints" class="tsd-kind-icon">seller<wbr>Bounty<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="computedfees.html#totalbuyerfeebasispoints" class="tsd-kind-icon">total<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="computedfees.html#totalsellerfeebasispoints" class="tsd-kind-icon">total<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="computedfees.html#transferfee" class="tsd-kind-icon">transfer<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="computedfees.html#transferfeetokenaddress" class="tsd-kind-icon">transfer<wbr>Fee<wbr>Token<wbr>Address</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/eventdata.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>EventData | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="eventdata.html">EventData</a>
				</li>
			</ul>
			<h1>Interface EventData</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">EventData</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="eventdata.html#accountaddress" class="tsd-kind-icon">account<wbr>Address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="eventdata.html#amount" class="tsd-kind-icon">amount</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="eventdata.html#asset" class="tsd-kind-icon">asset</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="eventdata.html#assets" class="tsd-kind-icon">assets</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="eventdata.html#buy" class="tsd-kind-icon">buy</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="eventdata.html#contractaddress" class="tsd-kind-icon">contract<wbr>Address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="eventdata.html#error" class="tsd-kind-icon">error</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="eventdata.html#event" class="tsd-kind-icon">event</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="eventdata.html#matchmetadata" class="tsd-kind-icon">match<wbr>Metadata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="eventdata.html#order" class="tsd-kind-icon">order</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="eventdata.html#proxyaddress" class="tsd-kind-icon">proxy<wbr>Address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="eventdata.html#sell" class="tsd-kind-icon">sell</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="eventdata.html#toaddress" class="tsd-kind-icon">to<wbr>Address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="eventdata.html#transactionhash" class="tsd-kind-icon">transaction<wbr>Hash</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="accountaddress" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> account<wbr>Address</h3>
					<div class="tsd-signature tsd-kind-icon">account<wbr>Address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L73">types.ts:73</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="amount" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> amount</h3>
					<div class="tsd-signature tsd-kind-icon">amount<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L76">types.ts:76</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="asset" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> asset</h3>
					<div class="tsd-signature tsd-kind-icon">asset<span class="tsd-signature-symbol">:</span> <a href="../globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L79">types.ts:79</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="assets" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> assets</h3>
					<div class="tsd-signature tsd-kind-icon">assets<span class="tsd-signature-symbol">:</span> <a href="../globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">[]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L78">types.ts:78</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="buy" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> buy</h3>
					<div class="tsd-signature tsd-kind-icon">buy<span class="tsd-signature-symbol">:</span> <a href="order.html" class="tsd-signature-type">Order</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L86">types.ts:86</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="contractaddress" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> contract<wbr>Address</h3>
					<div class="tsd-signature tsd-kind-icon">contract<wbr>Address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L77">types.ts:77</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="error" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> error</h3>
					<div class="tsd-signature tsd-kind-icon">error<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Error</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L83">types.ts:83</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="event" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> event</h3>
					<div class="tsd-signature tsd-kind-icon">event<span class="tsd-signature-symbol">:</span> <a href="../enums/eventtype.html" class="tsd-signature-type">EventType</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L82">types.ts:82</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="matchmetadata" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> match<wbr>Metadata</h3>
					<div class="tsd-signature tsd-kind-icon">match<wbr>Metadata<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L88">types.ts:88</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="order" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> order</h3>
					<div class="tsd-signature tsd-kind-icon">order<span class="tsd-signature-symbol">:</span> <a href="order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol"> | </span><a href="unsignedorder.html" class="tsd-signature-type">UnsignedOrder</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L85">types.ts:85</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="proxyaddress" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> proxy<wbr>Address</h3>
					<div class="tsd-signature tsd-kind-icon">proxy<wbr>Address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L75">types.ts:75</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="sell" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> sell</h3>
					<div class="tsd-signature tsd-kind-icon">sell<span class="tsd-signature-symbol">:</span> <a href="order.html" class="tsd-signature-type">Order</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L87">types.ts:87</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="toaddress" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> to<wbr>Address</h3>
					<div class="tsd-signature tsd-kind-icon">to<wbr>Address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L74">types.ts:74</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="transactionhash" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> transaction<wbr>Hash</h3>
					<div class="tsd-signature tsd-kind-icon">transaction<wbr>Hash<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L81">types.ts:81</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="eventdata.html" class="tsd-kind-icon">Event<wbr>Data</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="eventdata.html#accountaddress" class="tsd-kind-icon">account<wbr>Address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="eventdata.html#amount" class="tsd-kind-icon">amount</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="eventdata.html#asset" class="tsd-kind-icon">asset</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="eventdata.html#assets" class="tsd-kind-icon">assets</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="eventdata.html#buy" class="tsd-kind-icon">buy</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="eventdata.html#contractaddress" class="tsd-kind-icon">contract<wbr>Address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="eventdata.html#error" class="tsd-kind-icon">error</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="eventdata.html#event" class="tsd-kind-icon">event</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="eventdata.html#matchmetadata" class="tsd-kind-icon">match<wbr>Metadata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="eventdata.html#order" class="tsd-kind-icon">order</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="eventdata.html#proxyaddress" class="tsd-kind-icon">proxy<wbr>Address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="eventdata.html#sell" class="tsd-kind-icon">sell</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="eventdata.html#toaddress" class="tsd-kind-icon">to<wbr>Address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="eventdata.html#transactionhash" class="tsd-kind-icon">transaction<wbr>Hash</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/exchangemetadataforasset.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>ExchangeMetadataForAsset | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="exchangemetadataforasset.html">ExchangeMetadataForAsset</a>
				</li>
			</ul>
			<h1>Interface ExchangeMetadataForAsset</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">ExchangeMetadataForAsset</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="exchangemetadataforasset.html#asset" class="tsd-kind-icon">asset</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="exchangemetadataforasset.html#referreraddress" class="tsd-kind-icon">referrer<wbr>Address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="exchangemetadataforasset.html#schema" class="tsd-kind-icon">schema</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="asset" class="tsd-anchor"></a>
					<h3>asset</h3>
					<div class="tsd-signature tsd-kind-icon">asset<span class="tsd-signature-symbol">:</span> <a href="../globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L548">types.ts:548</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="referreraddress" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> referrer<wbr>Address</h3>
					<div class="tsd-signature tsd-kind-icon">referrer<wbr>Address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L550">types.ts:550</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="schema" class="tsd-anchor"></a>
					<h3>schema</h3>
					<div class="tsd-signature tsd-kind-icon">schema<span class="tsd-signature-symbol">:</span> <a href="../enums/wyvernschemaname.html" class="tsd-signature-type">WyvernSchemaName</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L549">types.ts:549</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="exchangemetadataforasset.html" class="tsd-kind-icon">Exchange<wbr>Metadata<wbr>For<wbr>Asset</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="exchangemetadataforasset.html#asset" class="tsd-kind-icon">asset</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="exchangemetadataforasset.html#referreraddress" class="tsd-kind-icon">referrer<wbr>Address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="exchangemetadataforasset.html#schema" class="tsd-kind-icon">schema</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/exchangemetadataforbundle.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>ExchangeMetadataForBundle | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="exchangemetadataforbundle.html">ExchangeMetadataForBundle</a>
				</li>
			</ul>
			<h1>Interface ExchangeMetadataForBundle</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">ExchangeMetadataForBundle</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="exchangemetadataforbundle.html#bundle" class="tsd-kind-icon">bundle</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="exchangemetadataforbundle.html#referreraddress" class="tsd-kind-icon">referrer<wbr>Address</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="bundle" class="tsd-anchor"></a>
					<h3>bundle</h3>
					<div class="tsd-signature tsd-kind-icon">bundle<span class="tsd-signature-symbol">:</span> <a href="wyvernbundle.html" class="tsd-signature-type">WyvernBundle</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L554">types.ts:554</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="referreraddress" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> referrer<wbr>Address</h3>
					<div class="tsd-signature tsd-kind-icon">referrer<wbr>Address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L555">types.ts:555</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="exchangemetadataforbundle.html" class="tsd-kind-icon">Exchange<wbr>Metadata<wbr>For<wbr>Bundle</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="exchangemetadataforbundle.html#bundle" class="tsd-kind-icon">bundle</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="exchangemetadataforbundle.html#referreraddress" class="tsd-kind-icon">referrer<wbr>Address</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/limitedcallspec.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>LimitedCallSpec | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="limitedcallspec.html">LimitedCallSpec</a>
				</li>
			</ul>
			<h1>Interface LimitedCallSpec</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">LimitedCallSpec</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="limitedcallspec.html#calldata" class="tsd-kind-icon">calldata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="limitedcallspec.html#target" class="tsd-kind-icon">target</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="calldata" class="tsd-anchor"></a>
					<h3>calldata</h3>
					<div class="tsd-signature tsd-kind-icon">calldata<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L18">utils/schema.ts:18</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="target" class="tsd-anchor"></a>
					<h3>target</h3>
					<div class="tsd-signature tsd-kind-icon">target<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/utils/schema.ts#L17">utils/schema.ts:17</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="limitedcallspec.html" class="tsd-kind-icon">Limited<wbr>Call<wbr>Spec</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="limitedcallspec.html#calldata" class="tsd-kind-icon">calldata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="limitedcallspec.html#target" class="tsd-kind-icon">target</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/numericaltraitstats.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>NumericalTraitStats | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="numericaltraitstats.html">NumericalTraitStats</a>
				</li>
			</ul>
			<h1>Interface NumericalTraitStats</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">NumericalTraitStats</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section tsd-is-not-exported">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-not-exported"><a href="numericaltraitstats.html#max" class="tsd-kind-icon">max</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-not-exported"><a href="numericaltraitstats.html#min" class="tsd-kind-icon">min</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group tsd-is-not-exported">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-not-exported">
					<a name="max" class="tsd-anchor"></a>
					<h3>max</h3>
					<div class="tsd-signature tsd-kind-icon">max<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L279">types.ts:279</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-not-exported">
					<a name="min" class="tsd-anchor"></a>
					<h3>min</h3>
					<div class="tsd-signature tsd-kind-icon">min<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L278">types.ts:278</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface tsd-is-not-exported">
						<a href="numericaltraitstats.html" class="tsd-kind-icon">Numerical<wbr>Trait<wbr>Stats</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-not-exported">
								<a href="numericaltraitstats.html#max" class="tsd-kind-icon">max</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-not-exported">
								<a href="numericaltraitstats.html#min" class="tsd-kind-icon">min</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/openseaaccount.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaAccount | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseaaccount.html">OpenSeaAccount</a>
				</li>
			</ul>
			<h1>Interface OpenSeaAccount</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">OpenSeaAccount</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaaccount.html#address" class="tsd-kind-icon">address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaaccount.html#config" class="tsd-kind-icon">config</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaaccount.html#profileimgurl" class="tsd-kind-icon">profile<wbr>Img<wbr>Url</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaaccount.html#user" class="tsd-kind-icon">user</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="address" class="tsd-anchor"></a>
					<h3>address</h3>
					<div class="tsd-signature tsd-kind-icon">address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L209">types.ts:209</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="config" class="tsd-anchor"></a>
					<h3>config</h3>
					<div class="tsd-signature tsd-kind-icon">config<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L211">types.ts:211</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="profileimgurl" class="tsd-anchor"></a>
					<h3>profile<wbr>Img<wbr>Url</h3>
					<div class="tsd-signature tsd-kind-icon">profile<wbr>Img<wbr>Url<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L214">types.ts:214</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="user" class="tsd-anchor"></a>
					<h3>user</h3>
					<div class="tsd-signature tsd-kind-icon">user<span class="tsd-signature-symbol">:</span> <a href="openseauser.html" class="tsd-signature-type">OpenSeaUser</a><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L217">types.ts:217</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="openseaaccount.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Account</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaaccount.html#address" class="tsd-kind-icon">address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaaccount.html#config" class="tsd-kind-icon">config</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaaccount.html#profileimgurl" class="tsd-kind-icon">profile<wbr>Img<wbr>Url</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaaccount.html#user" class="tsd-kind-icon">user</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/openseaapiconfig.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaAPIConfig | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseaapiconfig.html">OpenSeaAPIConfig</a>
				</li>
			</ul>
			<h1>Interface OpenSeaAPIConfig</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">OpenSeaAPIConfig</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaapiconfig.html#apibaseurl" class="tsd-kind-icon">api<wbr>Base<wbr>Url</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaapiconfig.html#apikey" class="tsd-kind-icon">api<wbr>Key</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaapiconfig.html#gasprice" class="tsd-kind-icon">gas<wbr>Price</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaapiconfig.html#networkname" class="tsd-kind-icon">network<wbr>Name</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="apibaseurl" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> api<wbr>Base<wbr>Url</h3>
					<div class="tsd-signature tsd-kind-icon">api<wbr>Base<wbr>Url<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L101">types.ts:101</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="apikey" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> api<wbr>Key</h3>
					<div class="tsd-signature tsd-kind-icon">api<wbr>Key<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L100">types.ts:100</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="gasprice" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> gas<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">gas<wbr>Price<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L103">types.ts:103</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="networkname" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> network<wbr>Name</h3>
					<div class="tsd-signature tsd-kind-icon">network<wbr>Name<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Network</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L99">types.ts:99</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="openseaapiconfig.html" class="tsd-kind-icon">Open<wbr>SeaAPIConfig</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaapiconfig.html#apibaseurl" class="tsd-kind-icon">api<wbr>Base<wbr>Url</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaapiconfig.html#apikey" class="tsd-kind-icon">api<wbr>Key</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaapiconfig.html#gasprice" class="tsd-kind-icon">gas<wbr>Price</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaapiconfig.html#networkname" class="tsd-kind-icon">network<wbr>Name</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/openseaasset.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaAsset | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseaasset.html">OpenSeaAsset</a>
				</li>
			</ul>
			<h1>Interface OpenSeaAsset</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<a href="asset.html" class="tsd-signature-type">Asset</a>
						<ul class="tsd-hierarchy">
							<li>
								<span class="target">OpenSeaAsset</span>
							</li>
						</ul>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#assetcontract" class="tsd-kind-icon">asset<wbr>Contract</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#backgroundcolor" class="tsd-kind-icon">background<wbr>Color</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#buyorders" class="tsd-kind-icon">buy<wbr>Orders</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#collection" class="tsd-kind-icon">collection</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseaasset.html#decimals" class="tsd-kind-icon">decimals</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#description" class="tsd-kind-icon">description</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#externallink" class="tsd-kind-icon">external<wbr>Link</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#imagepreviewurl" class="tsd-kind-icon">image<wbr>Preview<wbr>Url</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#imageurl" class="tsd-kind-icon">image<wbr>Url</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#imageurloriginal" class="tsd-kind-icon">image<wbr>Url<wbr>Original</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#imageurlthumbnail" class="tsd-kind-icon">image<wbr>Url<wbr>Thumbnail</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#ispresale" class="tsd-kind-icon">is<wbr>Presale</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#lastsale" class="tsd-kind-icon">last<wbr>Sale</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite"><a href="openseaasset.html#name" class="tsd-kind-icon">name</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#numsales" class="tsd-kind-icon">num<wbr>Sales</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#opensealink" class="tsd-kind-icon">opensea<wbr>Link</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#orders" class="tsd-kind-icon">orders</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#owner" class="tsd-kind-icon">owner</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseaasset.html#schemaname" class="tsd-kind-icon">schema<wbr>Name</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#sellorders" class="tsd-kind-icon">sell<wbr>Orders</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseaasset.html#tokenaddress" class="tsd-kind-icon">token<wbr>Address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseaasset.html#tokenid" class="tsd-kind-icon">token<wbr>Id</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#traits" class="tsd-kind-icon">traits</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#transferfee" class="tsd-kind-icon">transfer<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaasset.html#transferfeepaymenttoken" class="tsd-kind-icon">transfer<wbr>Fee<wbr>Payment<wbr>Token</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseaasset.html#version" class="tsd-kind-icon">version</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="assetcontract" class="tsd-anchor"></a>
					<h3>asset<wbr>Contract</h3>
					<div class="tsd-signature tsd-kind-icon">asset<wbr>Contract<span class="tsd-signature-symbol">:</span> <a href="openseaassetcontract.html" class="tsd-signature-type">OpenSeaAssetContract</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L335">types.ts:335</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="backgroundcolor" class="tsd-anchor"></a>
					<h3>background<wbr>Color</h3>
					<div class="tsd-signature tsd-kind-icon">background<wbr>Color<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L372">types.ts:372</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="buyorders" class="tsd-anchor"></a>
					<h3>buy<wbr>Orders</h3>
					<div class="tsd-signature tsd-kind-icon">buy<wbr>Orders<span class="tsd-signature-symbol">:</span> <a href="order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L346">types.ts:346</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="collection" class="tsd-anchor"></a>
					<h3>collection</h3>
					<div class="tsd-signature tsd-kind-icon">collection<span class="tsd-signature-symbol">:</span> <a href="openseacollection.html" class="tsd-signature-type">OpenSeaCollection</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L336">types.ts:336</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="decimals" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> decimals</h3>
					<div class="tsd-signature tsd-kind-icon">decimals<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="asset.html">Asset</a>.<a href="asset.html#decimals">decimals</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L240">types.ts:240</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="description" class="tsd-anchor"></a>
					<h3>description</h3>
					<div class="tsd-signature tsd-kind-icon">description<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L340">types.ts:340</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="externallink" class="tsd-anchor"></a>
					<h3>external<wbr>Link</h3>
					<div class="tsd-signature tsd-kind-icon">external<wbr>Link<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L364">types.ts:364</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="imagepreviewurl" class="tsd-anchor"></a>
					<h3>image<wbr>Preview<wbr>Url</h3>
					<div class="tsd-signature tsd-kind-icon">image<wbr>Preview<wbr>Url<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L356">types.ts:356</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="imageurl" class="tsd-anchor"></a>
					<h3>image<wbr>Url</h3>
					<div class="tsd-signature tsd-kind-icon">image<wbr>Url<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L353">types.ts:353</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="imageurloriginal" class="tsd-anchor"></a>
					<h3>image<wbr>Url<wbr>Original</h3>
					<div class="tsd-signature tsd-kind-icon">image<wbr>Url<wbr>Original<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L358">types.ts:358</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="imageurlthumbnail" class="tsd-anchor"></a>
					<h3>image<wbr>Url<wbr>Thumbnail</h3>
					<div class="tsd-signature tsd-kind-icon">image<wbr>Url<wbr>Thumbnail<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L360">types.ts:360</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="ispresale" class="tsd-anchor"></a>
					<h3>is<wbr>Presale</h3>
					<div class="tsd-signature tsd-kind-icon">is<wbr>Presale<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">boolean</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L351">types.ts:351</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="lastsale" class="tsd-anchor"></a>
					<h3>last<wbr>Sale</h3>
					<div class="tsd-signature tsd-kind-icon">last<wbr>Sale<span class="tsd-signature-symbol">:</span> <a href="assetevent.html" class="tsd-signature-type">AssetEvent</a><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L370">types.ts:370</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite">
					<a name="name" class="tsd-anchor"></a>
					<h3>name</h3>
					<div class="tsd-signature tsd-kind-icon">name<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Overrides <a href="asset.html">Asset</a>.<a href="asset.html#name">name</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L338">types.ts:338</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="numsales" class="tsd-anchor"></a>
					<h3>num<wbr>Sales</h3>
					<div class="tsd-signature tsd-kind-icon">num<wbr>Sales<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L368">types.ts:368</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="opensealink" class="tsd-anchor"></a>
					<h3>opensea<wbr>Link</h3>
					<div class="tsd-signature tsd-kind-icon">opensea<wbr>Link<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L362">types.ts:362</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="orders" class="tsd-anchor"></a>
					<h3>orders</h3>
					<div class="tsd-signature tsd-kind-icon">orders<span class="tsd-signature-symbol">:</span> <a href="order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L344">types.ts:344</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="owner" class="tsd-anchor"></a>
					<h3>owner</h3>
					<div class="tsd-signature tsd-kind-icon">owner<span class="tsd-signature-symbol">:</span> <a href="openseaaccount.html" class="tsd-signature-type">OpenSeaAccount</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L342">types.ts:342</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="schemaname" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> schema<wbr>Name</h3>
					<div class="tsd-signature tsd-kind-icon">schema<wbr>Name<span class="tsd-signature-symbol">:</span> <a href="../enums/wyvernschemaname.html" class="tsd-signature-type">WyvernSchemaName</a></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="asset.html">Asset</a>.<a href="asset.html#schemaname">schemaName</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L234">types.ts:234</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="sellorders" class="tsd-anchor"></a>
					<h3>sell<wbr>Orders</h3>
					<div class="tsd-signature tsd-kind-icon">sell<wbr>Orders<span class="tsd-signature-symbol">:</span> <a href="order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L348">types.ts:348</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="tokenaddress" class="tsd-anchor"></a>
					<h3>token<wbr>Address</h3>
					<div class="tsd-signature tsd-kind-icon">token<wbr>Address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="asset.html">Asset</a>.<a href="asset.html#tokenaddress">tokenAddress</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L232">types.ts:232</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="tokenid" class="tsd-anchor"></a>
					<h3>token<wbr>Id</h3>
					<div class="tsd-signature tsd-kind-icon">token<wbr>Id<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="asset.html">Asset</a>.<a href="asset.html#tokenid">tokenId</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L230">types.ts:230</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="traits" class="tsd-anchor"></a>
					<h3>traits</h3>
					<div class="tsd-signature tsd-kind-icon">traits<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">[]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L366">types.ts:366</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="transferfee" class="tsd-anchor"></a>
					<h3>transfer<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">transfer<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L374">types.ts:374</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="transferfeepaymenttoken" class="tsd-anchor"></a>
					<h3>transfer<wbr>Fee<wbr>Payment<wbr>Token</h3>
					<div class="tsd-signature tsd-kind-icon">transfer<wbr>Fee<wbr>Payment<wbr>Token<span class="tsd-signature-symbol">:</span> <a href="openseafungibletoken.html" class="tsd-signature-type">OpenSeaFungibleToken</a><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L376">types.ts:376</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="version" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> version</h3>
					<div class="tsd-signature tsd-kind-icon">version<span class="tsd-signature-symbol">:</span> <a href="../enums/tokenstandardversion.html" class="tsd-signature-type">TokenStandardVersion</a></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="asset.html">Asset</a>.<a href="asset.html#version">version</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L236">types.ts:236</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="openseaasset.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#assetcontract" class="tsd-kind-icon">asset<wbr>Contract</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#backgroundcolor" class="tsd-kind-icon">background<wbr>Color</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#buyorders" class="tsd-kind-icon">buy<wbr>Orders</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#collection" class="tsd-kind-icon">collection</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseaasset.html#decimals" class="tsd-kind-icon">decimals</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#description" class="tsd-kind-icon">description</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#externallink" class="tsd-kind-icon">external<wbr>Link</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#imagepreviewurl" class="tsd-kind-icon">image<wbr>Preview<wbr>Url</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#imageurl" class="tsd-kind-icon">image<wbr>Url</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#imageurloriginal" class="tsd-kind-icon">image<wbr>Url<wbr>Original</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#imageurlthumbnail" class="tsd-kind-icon">image<wbr>Url<wbr>Thumbnail</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#ispresale" class="tsd-kind-icon">is<wbr>Presale</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#lastsale" class="tsd-kind-icon">last<wbr>Sale</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite">
								<a href="openseaasset.html#name" class="tsd-kind-icon">name</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#numsales" class="tsd-kind-icon">num<wbr>Sales</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#opensealink" class="tsd-kind-icon">opensea<wbr>Link</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#orders" class="tsd-kind-icon">orders</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#owner" class="tsd-kind-icon">owner</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseaasset.html#schemaname" class="tsd-kind-icon">schema<wbr>Name</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#sellorders" class="tsd-kind-icon">sell<wbr>Orders</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseaasset.html#tokenaddress" class="tsd-kind-icon">token<wbr>Address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseaasset.html#tokenid" class="tsd-kind-icon">token<wbr>Id</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#traits" class="tsd-kind-icon">traits</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#transferfee" class="tsd-kind-icon">transfer<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaasset.html#transferfeepaymenttoken" class="tsd-kind-icon">transfer<wbr>Fee<wbr>Payment<wbr>Token</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseaasset.html#version" class="tsd-kind-icon">version</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/openseaassetbundle.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaAssetBundle | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseaassetbundle.html">OpenSeaAssetBundle</a>
				</li>
			</ul>
			<h1>Interface OpenSeaAssetBundle</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">OpenSeaAssetBundle</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundle.html#assetcontract" class="tsd-kind-icon">asset<wbr>Contract</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundle.html#assets" class="tsd-kind-icon">assets</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundle.html#description" class="tsd-kind-icon">description</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundle.html#externallink" class="tsd-kind-icon">external<wbr>Link</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundle.html#maker" class="tsd-kind-icon">maker</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundle.html#name" class="tsd-kind-icon">name</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundle.html#permalink" class="tsd-kind-icon">permalink</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundle.html#sellorders" class="tsd-kind-icon">sell<wbr>Orders</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundle.html#slug" class="tsd-kind-icon">slug</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="assetcontract" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> asset<wbr>Contract</h3>
					<div class="tsd-signature tsd-kind-icon">asset<wbr>Contract<span class="tsd-signature-symbol">:</span> <a href="openseaassetcontract.html" class="tsd-signature-type">OpenSeaAssetContract</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L487">types.ts:487</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="assets" class="tsd-anchor"></a>
					<h3>assets</h3>
					<div class="tsd-signature tsd-kind-icon">assets<span class="tsd-signature-symbol">:</span> <a href="openseaasset.html" class="tsd-signature-type">OpenSeaAsset</a><span class="tsd-signature-symbol">[]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L479">types.ts:479</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="description" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> description</h3>
					<div class="tsd-signature tsd-kind-icon">description<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L488">types.ts:488</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="externallink" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> external<wbr>Link</h3>
					<div class="tsd-signature tsd-kind-icon">external<wbr>Link<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L489">types.ts:489</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="maker" class="tsd-anchor"></a>
					<h3>maker</h3>
					<div class="tsd-signature tsd-kind-icon">maker<span class="tsd-signature-symbol">:</span> <a href="openseaaccount.html" class="tsd-signature-type">OpenSeaAccount</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L478">types.ts:478</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="name" class="tsd-anchor"></a>
					<h3>name</h3>
					<div class="tsd-signature tsd-kind-icon">name<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L480">types.ts:480</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="permalink" class="tsd-anchor"></a>
					<h3>permalink</h3>
					<div class="tsd-signature tsd-kind-icon">permalink<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L482">types.ts:482</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="sellorders" class="tsd-anchor"></a>
					<h3>sell<wbr>Orders</h3>
					<div class="tsd-signature tsd-kind-icon">sell<wbr>Orders<span class="tsd-signature-symbol">:</span> <a href="order.html" class="tsd-signature-type">Order</a><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">null</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L485">types.ts:485</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="slug" class="tsd-anchor"></a>
					<h3>slug</h3>
					<div class="tsd-signature tsd-kind-icon">slug<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L481">types.ts:481</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="openseaassetbundle.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Bundle</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundle.html#assetcontract" class="tsd-kind-icon">asset<wbr>Contract</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundle.html#assets" class="tsd-kind-icon">assets</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundle.html#description" class="tsd-kind-icon">description</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundle.html#externallink" class="tsd-kind-icon">external<wbr>Link</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundle.html#maker" class="tsd-kind-icon">maker</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundle.html#name" class="tsd-kind-icon">name</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundle.html#permalink" class="tsd-kind-icon">permalink</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundle.html#sellorders" class="tsd-kind-icon">sell<wbr>Orders</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundle.html#slug" class="tsd-kind-icon">slug</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/openseaassetbundlejson.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaAssetBundleJSON | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseaassetbundlejson.html">OpenSeaAssetBundleJSON</a>
				</li>
			</ul>
			<h1>Interface OpenSeaAssetBundleJSON</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">OpenSeaAssetBundleJSON</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundlejson.html#assets" class="tsd-kind-icon">assets</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundlejson.html#description" class="tsd-kind-icon">description</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundlejson.html#external_link" class="tsd-kind-icon">external_<wbr>link</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundlejson.html#maker" class="tsd-kind-icon">maker</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundlejson.html#name" class="tsd-kind-icon">name</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="assets" class="tsd-anchor"></a>
					<h3>assets</h3>
					<div class="tsd-signature tsd-kind-icon">assets<span class="tsd-signature-symbol">:</span> <a href="openseaasset.html" class="tsd-signature-type">OpenSeaAsset</a><span class="tsd-signature-symbol">[]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L493">types.ts:493</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="description" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> description</h3>
					<div class="tsd-signature tsd-kind-icon">description<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L495">types.ts:495</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="external_link" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> external_<wbr>link</h3>
					<div class="tsd-signature tsd-kind-icon">external_<wbr>link<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L496">types.ts:496</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="maker" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> maker</h3>
					<div class="tsd-signature tsd-kind-icon">maker<span class="tsd-signature-symbol">:</span> <a href="openseaaccount.html" class="tsd-signature-type">OpenSeaAccount</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L499">types.ts:499</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="name" class="tsd-anchor"></a>
					<h3>name</h3>
					<div class="tsd-signature tsd-kind-icon">name<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L494">types.ts:494</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="openseaassetbundlejson.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>BundleJSON</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundlejson.html#assets" class="tsd-kind-icon">assets</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundlejson.html#description" class="tsd-kind-icon">description</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundlejson.html#external_link" class="tsd-kind-icon">external_<wbr>link</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundlejson.html#maker" class="tsd-kind-icon">maker</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundlejson.html#name" class="tsd-kind-icon">name</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/openseaassetbundlequery.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaAssetBundleQuery | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseaassetbundlequery.html">OpenSeaAssetBundleQuery</a>
				</li>
			</ul>
			<h1>Interface OpenSeaAssetBundleQuery</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="tsd-signature-type">object</span>
						<ul class="tsd-hierarchy">
							<li>
								<span class="target">OpenSeaAssetBundleQuery</span>
							</li>
						</ul>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundlequery.html#asset_contract_address" class="tsd-kind-icon">asset_<wbr>contract_<wbr>address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundlequery.html#limit" class="tsd-kind-icon">limit</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundlequery.html#offset" class="tsd-kind-icon">offset</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundlequery.html#on_sale" class="tsd-kind-icon">on_<wbr>sale</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundlequery.html#owner" class="tsd-kind-icon">owner</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundlequery.html#search" class="tsd-kind-icon">search</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetbundlequery.html#token_ids" class="tsd-kind-icon">token_<wbr>ids</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="asset_contract_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> asset_<wbr>contract_<wbr>address</h3>
					<div class="tsd-signature tsd-kind-icon">asset_<wbr>contract_<wbr>address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L507">types.ts:507</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="limit" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> limit</h3>
					<div class="tsd-signature tsd-kind-icon">limit<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L512">types.ts:512</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="offset" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> offset</h3>
					<div class="tsd-signature tsd-kind-icon">offset<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L511">types.ts:511</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="on_sale" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> on_<wbr>sale</h3>
					<div class="tsd-signature tsd-kind-icon">on_<wbr>sale<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">true</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">false</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L509">types.ts:509</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="owner" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> owner</h3>
					<div class="tsd-signature tsd-kind-icon">owner<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L510">types.ts:510</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="search" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> search</h3>
					<div class="tsd-signature tsd-kind-icon">search<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L513">types.ts:513</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="token_ids" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> token_<wbr>ids</h3>
					<div class="tsd-signature tsd-kind-icon">token_<wbr>ids<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L508">types.ts:508</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="openseaassetbundlequery.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Bundle<wbr>Query</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundlequery.html#asset_contract_address" class="tsd-kind-icon">asset_<wbr>contract_<wbr>address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundlequery.html#limit" class="tsd-kind-icon">limit</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundlequery.html#offset" class="tsd-kind-icon">offset</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundlequery.html#on_sale" class="tsd-kind-icon">on_<wbr>sale</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundlequery.html#owner" class="tsd-kind-icon">owner</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundlequery.html#search" class="tsd-kind-icon">search</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetbundlequery.html#token_ids" class="tsd-kind-icon">token_<wbr>ids</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/openseaassetcontract.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaAssetContract | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseaassetcontract.html">OpenSeaAssetContract</a>
				</li>
			</ul>
			<h1>Interface OpenSeaAssetContract</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<a href="openseafees.html" class="tsd-signature-type">OpenSeaFees</a>
						<ul class="tsd-hierarchy">
							<li>
								<span class="target">OpenSeaAssetContract</span>
							</li>
						</ul>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetcontract.html#address" class="tsd-kind-icon">address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetcontract.html#buyerfeebasispoints" class="tsd-kind-icon">buyer<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetcontract.html#description" class="tsd-kind-icon">description</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseaassetcontract.html#devbuyerfeebasispoints" class="tsd-kind-icon">dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseaassetcontract.html#devsellerfeebasispoints" class="tsd-kind-icon">dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetcontract.html#externallink" class="tsd-kind-icon">external<wbr>Link</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetcontract.html#imageurl" class="tsd-kind-icon">image<wbr>Url</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetcontract.html#name" class="tsd-kind-icon">name</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseaassetcontract.html#openseabuyerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseaassetcontract.html#openseasellerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetcontract.html#schemaname" class="tsd-kind-icon">schema<wbr>Name</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetcontract.html#sellerfeebasispoints" class="tsd-kind-icon">seller<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetcontract.html#stats" class="tsd-kind-icon">stats</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetcontract.html#tokensymbol" class="tsd-kind-icon">token<wbr>Symbol</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetcontract.html#traits" class="tsd-kind-icon">traits</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetcontract.html#type" class="tsd-kind-icon">type</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetcontract.html#wikilink" class="tsd-kind-icon">wiki<wbr>Link</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="address" class="tsd-anchor"></a>
					<h3>address</h3>
					<div class="tsd-signature tsd-kind-icon">address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L250">types.ts:250</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="buyerfeebasispoints" class="tsd-anchor"></a>
					<h3>buyer<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">buyer<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L259">types.ts:259</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="description" class="tsd-anchor"></a>
					<h3>description</h3>
					<div class="tsd-signature tsd-kind-icon">description<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L262">types.ts:262</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="devbuyerfeebasispoints" class="tsd-anchor"></a>
					<h3>dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="openseafees.html">OpenSeaFees</a>.<a href="openseafees.html#devbuyerfeebasispoints">devBuyerFeeBasisPoints</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L527">types.ts:527</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="devsellerfeebasispoints" class="tsd-anchor"></a>
					<h3>dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="openseafees.html">OpenSeaFees</a>.<a href="openseafees.html#devsellerfeebasispoints">devSellerFeeBasisPoints</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L525">types.ts:525</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="externallink" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> external<wbr>Link</h3>
					<div class="tsd-signature tsd-kind-icon">external<wbr>Link<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L272">types.ts:272</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="imageurl" class="tsd-anchor"></a>
					<h3>image<wbr>Url</h3>
					<div class="tsd-signature tsd-kind-icon">image<wbr>Url<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L266">types.ts:266</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="name" class="tsd-anchor"></a>
					<h3>name</h3>
					<div class="tsd-signature tsd-kind-icon">name<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L248">types.ts:248</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="openseabuyerfeebasispoints" class="tsd-anchor"></a>
					<h3>opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="openseafees.html">OpenSeaFees</a>.<a href="openseafees.html#openseabuyerfeebasispoints">openseaBuyerFeeBasisPoints</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L523">types.ts:523</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="openseasellerfeebasispoints" class="tsd-anchor"></a>
					<h3>opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="openseafees.html">OpenSeaFees</a>.<a href="openseafees.html#openseasellerfeebasispoints">openseaSellerFeeBasisPoints</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L521">types.ts:521</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="schemaname" class="tsd-anchor"></a>
					<h3>schema<wbr>Name</h3>
					<div class="tsd-signature tsd-kind-icon">schema<wbr>Name<span class="tsd-signature-symbol">:</span> <a href="../enums/wyvernschemaname.html" class="tsd-signature-type">WyvernSchemaName</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L254">types.ts:254</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="sellerfeebasispoints" class="tsd-anchor"></a>
					<h3>seller<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">seller<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L257">types.ts:257</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="stats" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> stats</h3>
					<div class="tsd-signature tsd-kind-icon">stats<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">object</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L268">types.ts:268</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="tokensymbol" class="tsd-anchor"></a>
					<h3>token<wbr>Symbol</h3>
					<div class="tsd-signature tsd-kind-icon">token<wbr>Symbol<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L264">types.ts:264</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="traits" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> traits</h3>
					<div class="tsd-signature tsd-kind-icon">traits<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">[]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L270">types.ts:270</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="type" class="tsd-anchor"></a>
					<h3>type</h3>
					<div class="tsd-signature tsd-kind-icon">type<span class="tsd-signature-symbol">:</span> <a href="../enums/assetcontracttype.html" class="tsd-signature-type">AssetContractType</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L252">types.ts:252</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="wikilink" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> wiki<wbr>Link</h3>
					<div class="tsd-signature tsd-kind-icon">wiki<wbr>Link<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L274">types.ts:274</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="openseaassetcontract.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Contract</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetcontract.html#address" class="tsd-kind-icon">address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetcontract.html#buyerfeebasispoints" class="tsd-kind-icon">buyer<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetcontract.html#description" class="tsd-kind-icon">description</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseaassetcontract.html#devbuyerfeebasispoints" class="tsd-kind-icon">dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseaassetcontract.html#devsellerfeebasispoints" class="tsd-kind-icon">dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetcontract.html#externallink" class="tsd-kind-icon">external<wbr>Link</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetcontract.html#imageurl" class="tsd-kind-icon">image<wbr>Url</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetcontract.html#name" class="tsd-kind-icon">name</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseaassetcontract.html#openseabuyerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseaassetcontract.html#openseasellerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetcontract.html#schemaname" class="tsd-kind-icon">schema<wbr>Name</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetcontract.html#sellerfeebasispoints" class="tsd-kind-icon">seller<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetcontract.html#stats" class="tsd-kind-icon">stats</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetcontract.html#tokensymbol" class="tsd-kind-icon">token<wbr>Symbol</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetcontract.html#traits" class="tsd-kind-icon">traits</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetcontract.html#type" class="tsd-kind-icon">type</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetcontract.html#wikilink" class="tsd-kind-icon">wiki<wbr>Link</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/openseaassetquery.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaAssetQuery | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseaassetquery.html">OpenSeaAssetQuery</a>
				</li>
			</ul>
			<h1>Interface OpenSeaAssetQuery</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">OpenSeaAssetQuery</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetquery.html#asset_contract_address" class="tsd-kind-icon">asset_<wbr>contract_<wbr>address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetquery.html#limit" class="tsd-kind-icon">limit</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetquery.html#offset" class="tsd-kind-icon">offset</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetquery.html#order_by" class="tsd-kind-icon">order_<wbr>by</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetquery.html#order_direction" class="tsd-kind-icon">order_<wbr>direction</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetquery.html#owner" class="tsd-kind-icon">owner</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetquery.html#search" class="tsd-kind-icon">search</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseaassetquery.html#token_ids" class="tsd-kind-icon">token_<wbr>ids</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="asset_contract_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> asset_<wbr>contract_<wbr>address</h3>
					<div class="tsd-signature tsd-kind-icon">asset_<wbr>contract_<wbr>address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L671">types.ts:671</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="limit" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> limit</h3>
					<div class="tsd-signature tsd-kind-icon">limit<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L676">types.ts:676</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="offset" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> offset</h3>
					<div class="tsd-signature tsd-kind-icon">offset<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L677">types.ts:677</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="order_by" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> order_<wbr>by</h3>
					<div class="tsd-signature tsd-kind-icon">order_<wbr>by<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L674">types.ts:674</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="order_direction" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> order_<wbr>direction</h3>
					<div class="tsd-signature tsd-kind-icon">order_<wbr>direction<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L675">types.ts:675</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="owner" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> owner</h3>
					<div class="tsd-signature tsd-kind-icon">owner<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L670">types.ts:670</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="search" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> search</h3>
					<div class="tsd-signature tsd-kind-icon">search<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L673">types.ts:673</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="token_ids" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> token_<wbr>ids</h3>
					<div class="tsd-signature tsd-kind-icon">token_<wbr>ids<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L672">types.ts:672</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="openseaassetquery.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Asset<wbr>Query</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetquery.html#asset_contract_address" class="tsd-kind-icon">asset_<wbr>contract_<wbr>address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetquery.html#limit" class="tsd-kind-icon">limit</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetquery.html#offset" class="tsd-kind-icon">offset</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetquery.html#order_by" class="tsd-kind-icon">order_<wbr>by</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetquery.html#order_direction" class="tsd-kind-icon">order_<wbr>direction</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetquery.html#owner" class="tsd-kind-icon">owner</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetquery.html#search" class="tsd-kind-icon">search</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseaassetquery.html#token_ids" class="tsd-kind-icon">token_<wbr>ids</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/openseacollection.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaCollection | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseacollection.html">OpenSeaCollection</a>
				</li>
			</ul>
			<h1>Interface OpenSeaCollection</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<a href="openseafees.html" class="tsd-signature-type">OpenSeaFees</a>
						<ul class="tsd-hierarchy">
							<li>
								<span class="target">OpenSeaCollection</span>
							</li>
						</ul>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#createddate" class="tsd-kind-icon">created<wbr>Date</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#description" class="tsd-kind-icon">description</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseacollection.html#devbuyerfeebasispoints" class="tsd-kind-icon">dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseacollection.html#devsellerfeebasispoints" class="tsd-kind-icon">dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#displaydata" class="tsd-kind-icon">display<wbr>Data</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#editors" class="tsd-kind-icon">editors</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#externallink" class="tsd-kind-icon">external<wbr>Link</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#featured" class="tsd-kind-icon">featured</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#featuredimageurl" class="tsd-kind-icon">featured<wbr>Image<wbr>Url</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#hidden" class="tsd-kind-icon">hidden</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#imageurl" class="tsd-kind-icon">image<wbr>Url</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#largeimageurl" class="tsd-kind-icon">large<wbr>Image<wbr>Url</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#name" class="tsd-kind-icon">name</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseacollection.html#openseabuyerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseacollection.html#openseasellerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#paymenttokens" class="tsd-kind-icon">payment<wbr>Tokens</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#payoutaddress" class="tsd-kind-icon">payout<wbr>Address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#slug" class="tsd-kind-icon">slug</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#stats" class="tsd-kind-icon">stats</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#traitstats" class="tsd-kind-icon">trait<wbr>Stats</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseacollection.html#wikilink" class="tsd-kind-icon">wiki<wbr>Link</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="createddate" class="tsd-anchor"></a>
					<h3>created<wbr>Date</h3>
					<div class="tsd-signature tsd-kind-icon">created<wbr>Date<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Date</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L301">types.ts:301</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="description" class="tsd-anchor"></a>
					<h3>description</h3>
					<div class="tsd-signature tsd-kind-icon">description<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L304">types.ts:304</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="devbuyerfeebasispoints" class="tsd-anchor"></a>
					<h3>dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="openseafees.html">OpenSeaFees</a>.<a href="openseafees.html#devbuyerfeebasispoints">devBuyerFeeBasisPoints</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L527">types.ts:527</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="devsellerfeebasispoints" class="tsd-anchor"></a>
					<h3>dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="openseafees.html">OpenSeaFees</a>.<a href="openseafees.html#devsellerfeebasispoints">devSellerFeeBasisPoints</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L525">types.ts:525</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="displaydata" class="tsd-anchor"></a>
					<h3>display<wbr>Data</h3>
					<div class="tsd-signature tsd-kind-icon">display<wbr>Data<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">object</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L314">types.ts:314</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="editors" class="tsd-anchor"></a>
					<h3>editors</h3>
					<div class="tsd-signature tsd-kind-icon">editors<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">[]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L295">types.ts:295</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="externallink" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> external<wbr>Link</h3>
					<div class="tsd-signature tsd-kind-icon">external<wbr>Link<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L322">types.ts:322</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="featured" class="tsd-anchor"></a>
					<h3>featured</h3>
					<div class="tsd-signature tsd-kind-icon">featured<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">boolean</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L299">types.ts:299</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="featuredimageurl" class="tsd-anchor"></a>
					<h3>featured<wbr>Image<wbr>Url</h3>
					<div class="tsd-signature tsd-kind-icon">featured<wbr>Image<wbr>Url<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L310">types.ts:310</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="hidden" class="tsd-anchor"></a>
					<h3>hidden</h3>
					<div class="tsd-signature tsd-kind-icon">hidden<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">boolean</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L297">types.ts:297</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="imageurl" class="tsd-anchor"></a>
					<h3>image<wbr>Url</h3>
					<div class="tsd-signature tsd-kind-icon">image<wbr>Url<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L306">types.ts:306</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="largeimageurl" class="tsd-anchor"></a>
					<h3>large<wbr>Image<wbr>Url</h3>
					<div class="tsd-signature tsd-kind-icon">large<wbr>Image<wbr>Url<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L308">types.ts:308</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="name" class="tsd-anchor"></a>
					<h3>name</h3>
					<div class="tsd-signature tsd-kind-icon">name<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L291">types.ts:291</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="openseabuyerfeebasispoints" class="tsd-anchor"></a>
					<h3>opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="openseafees.html">OpenSeaFees</a>.<a href="openseafees.html#openseabuyerfeebasispoints">openseaBuyerFeeBasisPoints</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L523">types.ts:523</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="openseasellerfeebasispoints" class="tsd-anchor"></a>
					<h3>opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="openseafees.html">OpenSeaFees</a>.<a href="openseafees.html#openseasellerfeebasispoints">openseaSellerFeeBasisPoints</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L521">types.ts:521</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="paymenttokens" class="tsd-anchor"></a>
					<h3>payment<wbr>Tokens</h3>
					<div class="tsd-signature tsd-kind-icon">payment<wbr>Tokens<span class="tsd-signature-symbol">:</span> <a href="openseafungibletoken.html" class="tsd-signature-type">OpenSeaFungibleToken</a><span class="tsd-signature-symbol">[]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L316">types.ts:316</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="payoutaddress" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> payout<wbr>Address</h3>
					<div class="tsd-signature tsd-kind-icon">payout<wbr>Address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L318">types.ts:318</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="slug" class="tsd-anchor"></a>
					<h3>slug</h3>
					<div class="tsd-signature tsd-kind-icon">slug<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L293">types.ts:293</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="stats" class="tsd-anchor"></a>
					<h3>stats</h3>
					<div class="tsd-signature tsd-kind-icon">stats<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">object</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L312">types.ts:312</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="traitstats" class="tsd-anchor"></a>
					<h3>trait<wbr>Stats</h3>
					<div class="tsd-signature tsd-kind-icon">trait<wbr>Stats<span class="tsd-signature-symbol">:</span> <a href="openseatraitstats.html" class="tsd-signature-type">OpenSeaTraitStats</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L320">types.ts:320</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="wikilink" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> wiki<wbr>Link</h3>
					<div class="tsd-signature tsd-kind-icon">wiki<wbr>Link<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L324">types.ts:324</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="openseacollection.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Collection</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#createddate" class="tsd-kind-icon">created<wbr>Date</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#description" class="tsd-kind-icon">description</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseacollection.html#devbuyerfeebasispoints" class="tsd-kind-icon">dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseacollection.html#devsellerfeebasispoints" class="tsd-kind-icon">dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#displaydata" class="tsd-kind-icon">display<wbr>Data</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#editors" class="tsd-kind-icon">editors</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#externallink" class="tsd-kind-icon">external<wbr>Link</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#featured" class="tsd-kind-icon">featured</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#featuredimageurl" class="tsd-kind-icon">featured<wbr>Image<wbr>Url</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#hidden" class="tsd-kind-icon">hidden</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#imageurl" class="tsd-kind-icon">image<wbr>Url</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#largeimageurl" class="tsd-kind-icon">large<wbr>Image<wbr>Url</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#name" class="tsd-kind-icon">name</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseacollection.html#openseabuyerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseacollection.html#openseasellerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#paymenttokens" class="tsd-kind-icon">payment<wbr>Tokens</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#payoutaddress" class="tsd-kind-icon">payout<wbr>Address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#slug" class="tsd-kind-icon">slug</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#stats" class="tsd-kind-icon">stats</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#traitstats" class="tsd-kind-icon">trait<wbr>Stats</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseacollection.html#wikilink" class="tsd-kind-icon">wiki<wbr>Link</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/openseafees.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaFees | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseafees.html">OpenSeaFees</a>
				</li>
			</ul>
			<h1>Interface OpenSeaFees</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">OpenSeaFees</span>
						<ul class="tsd-hierarchy">
							<li>
								<a href="openseaassetcontract.html" class="tsd-signature-type">OpenSeaAssetContract</a>
							</li>
							<li>
								<a href="openseacollection.html" class="tsd-signature-type">OpenSeaCollection</a>
							</li>
							<li>
								<a href="computedfees.html" class="tsd-signature-type">ComputedFees</a>
							</li>
						</ul>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseafees.html#devbuyerfeebasispoints" class="tsd-kind-icon">dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseafees.html#devsellerfeebasispoints" class="tsd-kind-icon">dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseafees.html#openseabuyerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseafees.html#openseasellerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="devbuyerfeebasispoints" class="tsd-anchor"></a>
					<h3>dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L527">types.ts:527</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="devsellerfeebasispoints" class="tsd-anchor"></a>
					<h3>dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L525">types.ts:525</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="openseabuyerfeebasispoints" class="tsd-anchor"></a>
					<h3>opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L523">types.ts:523</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="openseasellerfeebasispoints" class="tsd-anchor"></a>
					<h3>opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</h3>
					<div class="tsd-signature tsd-kind-icon">opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L521">types.ts:521</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="openseafees.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Fees</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseafees.html#devbuyerfeebasispoints" class="tsd-kind-icon">dev<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseafees.html#devsellerfeebasispoints" class="tsd-kind-icon">dev<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseafees.html#openseabuyerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Buyer<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseafees.html#openseasellerfeebasispoints" class="tsd-kind-icon">opensea<wbr>Seller<wbr>Fee<wbr>Basis<wbr>Points</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/openseafungibletoken.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaFungibleToken | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseafungibletoken.html">OpenSeaFungibleToken</a>
				</li>
			</ul>
			<h1>Interface OpenSeaFungibleToken</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="tsd-signature-type">Token</span>
						<ul class="tsd-hierarchy">
							<li>
								<span class="target">OpenSeaFungibleToken</span>
							</li>
						</ul>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseafungibletoken.html#address" class="tsd-kind-icon">address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseafungibletoken.html#decimals" class="tsd-kind-icon">decimals</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseafungibletoken.html#ethprice" class="tsd-kind-icon">eth<wbr>Price</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseafungibletoken.html#imageurl" class="tsd-kind-icon">image<wbr>Url</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseafungibletoken.html#name" class="tsd-kind-icon">name</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="openseafungibletoken.html#symbol" class="tsd-kind-icon">symbol</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseafungibletoken.html#usdprice" class="tsd-kind-icon">usd<wbr>Price</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="address" class="tsd-anchor"></a>
					<h3>address</h3>
					<div class="tsd-signature tsd-kind-icon">address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Token.address</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-schemas/dist/types.d.ts:17</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="decimals" class="tsd-anchor"></a>
					<h3>decimals</h3>
					<div class="tsd-signature tsd-kind-icon">decimals<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Token.decimals</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-schemas/dist/types.d.ts:16</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="ethprice" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> eth<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">eth<wbr>Price<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L466">types.ts:466</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="imageurl" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> image<wbr>Url</h3>
					<div class="tsd-signature tsd-kind-icon">image<wbr>Url<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L465">types.ts:465</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="name" class="tsd-anchor"></a>
					<h3>name</h3>
					<div class="tsd-signature tsd-kind-icon">name<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Token.name</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-schemas/dist/types.d.ts:14</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="symbol" class="tsd-anchor"></a>
					<h3>symbol</h3>
					<div class="tsd-signature tsd-kind-icon">symbol<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Token.symbol</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-schemas/dist/types.d.ts:15</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="usdprice" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> usd<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">usd<wbr>Price<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L467">types.ts:467</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="openseafungibletoken.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Fungible<wbr>Token</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseafungibletoken.html#address" class="tsd-kind-icon">address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseafungibletoken.html#decimals" class="tsd-kind-icon">decimals</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseafungibletoken.html#ethprice" class="tsd-kind-icon">eth<wbr>Price</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseafungibletoken.html#imageurl" class="tsd-kind-icon">image<wbr>Url</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseafungibletoken.html#name" class="tsd-kind-icon">name</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="openseafungibletoken.html#symbol" class="tsd-kind-icon">symbol</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseafungibletoken.html#usdprice" class="tsd-kind-icon">usd<wbr>Price</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/openseafungibletokenquery.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaFungibleTokenQuery | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseafungibletokenquery.html">OpenSeaFungibleTokenQuery</a>
				</li>
			</ul>
			<h1>Interface OpenSeaFungibleTokenQuery</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="tsd-signature-type">object</span>
						<ul class="tsd-hierarchy">
							<li>
								<span class="target">OpenSeaFungibleTokenQuery</span>
							</li>
						</ul>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseafungibletokenquery.html#limit" class="tsd-kind-icon">limit</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseafungibletokenquery.html#offset" class="tsd-kind-icon">offset</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseafungibletokenquery.html#symbol" class="tsd-kind-icon">symbol</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="limit" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> limit</h3>
					<div class="tsd-signature tsd-kind-icon">limit<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L684">types.ts:684</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="offset" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> offset</h3>
					<div class="tsd-signature tsd-kind-icon">offset<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L685">types.ts:685</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="symbol" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> symbol</h3>
					<div class="tsd-signature tsd-kind-icon">symbol<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L687">types.ts:687</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="openseafungibletokenquery.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Fungible<wbr>Token<wbr>Query</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseafungibletokenquery.html#limit" class="tsd-kind-icon">limit</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseafungibletokenquery.html#offset" class="tsd-kind-icon">offset</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseafungibletokenquery.html#symbol" class="tsd-kind-icon">symbol</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/openseatraitstats.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaTraitStats | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseatraitstats.html">OpenSeaTraitStats</a>
				</li>
			</ul>
			<h1>Interface OpenSeaTraitStats</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">OpenSeaTraitStats</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel tsd-kind-interface">
				<h3 class="tsd-before-signature">Indexable</h3>
				<div class="tsd-signature tsd-kind-icon"><span class="tsd-signature-symbol">[</span>traitName: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]: </span><a href="numericaltraitstats.html" class="tsd-signature-type">NumericalTraitStats</a><span class="tsd-signature-symbol"> | </span><a href="stringtraitstats.html" class="tsd-signature-type">StringTraitStats</a></div>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="openseatraitstats.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>Trait<wbr>Stats</a>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/openseauser.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OpenSeaUser | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="openseauser.html">OpenSeaUser</a>
				</li>
			</ul>
			<h1>Interface OpenSeaUser</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">OpenSeaUser</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="openseauser.html#username" class="tsd-kind-icon">username</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="username" class="tsd-anchor"></a>
					<h3>username</h3>
					<div class="tsd-signature tsd-kind-icon">username<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L222">types.ts:222</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="openseauser.html" class="tsd-kind-icon">Open<wbr>Sea<wbr>User</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="openseauser.html#username" class="tsd-kind-icon">username</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/order.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>Order | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="order.html">Order</a>
				</li>
			</ul>
			<h1>Interface Order</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<a href="unsignedorder.html" class="tsd-signature-type">UnsignedOrder</a>
					</li>
					<li>
						<span class="tsd-signature-type">object</span>
						<ul class="tsd-hierarchy">
							<li>
								<span class="target">Order</span>
							</li>
						</ul>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="order.html#asset" class="tsd-kind-icon">asset</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="order.html#assetbundle" class="tsd-kind-icon">asset<wbr>Bundle</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#baseprice" class="tsd-kind-icon">base<wbr>Price</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#calldata" class="tsd-kind-icon">calldata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="order.html#cancelledorfinalized" class="tsd-kind-icon">cancelled<wbr>OrFinalized</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="order.html#createdtime" class="tsd-kind-icon">created<wbr>Time</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="order.html#currentbounty" class="tsd-kind-icon">current<wbr>Bounty</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="order.html#currentprice" class="tsd-kind-icon">current<wbr>Price</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#englishauctionreserveprice" class="tsd-kind-icon">english<wbr>Auction<wbr>Reserve<wbr>Price</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#exchange" class="tsd-kind-icon">exchange</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#expirationtime" class="tsd-kind-icon">expiration<wbr>Time</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#extra" class="tsd-kind-icon">extra</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited"><a href="order.html#feemethod" class="tsd-kind-icon">fee<wbr>Method</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#feerecipient" class="tsd-kind-icon">fee<wbr>Recipient</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="order.html#feerecipientaccount" class="tsd-kind-icon">fee<wbr>Recipient<wbr>Account</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#hash" class="tsd-kind-icon">hash</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited"><a href="order.html#howtocall" class="tsd-kind-icon">how<wbr>ToCall</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#listingtime" class="tsd-kind-icon">listing<wbr>Time</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#maker" class="tsd-kind-icon">maker</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="order.html#makeraccount" class="tsd-kind-icon">maker<wbr>Account</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#makerprotocolfee" class="tsd-kind-icon">maker<wbr>Protocol<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#makerreferrerfee" class="tsd-kind-icon">maker<wbr>Referrer<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#makerrelayerfee" class="tsd-kind-icon">maker<wbr>Relayer<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="order.html#markedinvalid" class="tsd-kind-icon">marked<wbr>Invalid</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#metadata" class="tsd-kind-icon">metadata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#paymenttoken" class="tsd-kind-icon">payment<wbr>Token</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="order.html#paymenttokencontract" class="tsd-kind-icon">payment<wbr>Token<wbr>Contract</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#quantity" class="tsd-kind-icon">quantity</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#replacementpattern" class="tsd-kind-icon">replacement<wbr>Pattern</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited"><a href="order.html#salekind" class="tsd-kind-icon">sale<wbr>Kind</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#salt" class="tsd-kind-icon">salt</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited"><a href="order.html#side" class="tsd-kind-icon">side</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#staticextradata" class="tsd-kind-icon">static<wbr>Extradata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#statictarget" class="tsd-kind-icon">static<wbr>Target</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#taker" class="tsd-kind-icon">taker</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="order.html#takeraccount" class="tsd-kind-icon">taker<wbr>Account</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#takerprotocolfee" class="tsd-kind-icon">taker<wbr>Protocol<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#takerrelayerfee" class="tsd-kind-icon">taker<wbr>Relayer<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#target" class="tsd-kind-icon">target</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="order.html#waitingforbestcounterorder" class="tsd-kind-icon">waiting<wbr>For<wbr>Best<wbr>Counter<wbr>Order</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="asset" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> asset</h3>
					<div class="tsd-signature tsd-kind-icon">asset<span class="tsd-signature-symbol">:</span> <a href="openseaasset.html" class="tsd-signature-type">OpenSeaAsset</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L594">types.ts:594</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="assetbundle" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> asset<wbr>Bundle</h3>
					<div class="tsd-signature tsd-kind-icon">asset<wbr>Bundle<span class="tsd-signature-symbol">:</span> <a href="openseaassetbundle.html" class="tsd-signature-type">OpenSeaAssetBundle</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L595">types.ts:595</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="baseprice" class="tsd-anchor"></a>
					<h3>base<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">base<wbr>Price<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.basePrice</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:103</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="calldata" class="tsd-anchor"></a>
					<h3>calldata</h3>
					<div class="tsd-signature tsd-kind-icon">calldata<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.calldata</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:98</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="cancelledorfinalized" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> cancelled<wbr>OrFinalized</h3>
					<div class="tsd-signature tsd-kind-icon">cancelled<wbr>OrFinalized<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">true</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">false</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L592">types.ts:592</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="createdtime" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> created<wbr>Time</h3>
					<div class="tsd-signature tsd-kind-icon">created<wbr>Time<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L585">types.ts:585</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="currentbounty" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> current<wbr>Bounty</h3>
					<div class="tsd-signature tsd-kind-icon">current<wbr>Bounty<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L587">types.ts:587</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="currentprice" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> current<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">current<wbr>Price<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L586">types.ts:586</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="englishauctionreserveprice" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> english<wbr>Auction<wbr>Reserve<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">english<wbr>Auction<wbr>Reserve<wbr>Price<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#englishauctionreserveprice">englishAuctionReservePrice</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L570">types.ts:570</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="exchange" class="tsd-anchor"></a>
					<h3>exchange</h3>
					<div class="tsd-signature tsd-kind-icon">exchange<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.exchange</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:85</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="expirationtime" class="tsd-anchor"></a>
					<h3>expiration<wbr>Time</h3>
					<div class="tsd-signature tsd-kind-icon">expiration<wbr>Time<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.expirationTime</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:106</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="extra" class="tsd-anchor"></a>
					<h3>extra</h3>
					<div class="tsd-signature tsd-kind-icon">extra<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.extra</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:104</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
					<a name="feemethod" class="tsd-anchor"></a>
					<h3>fee<wbr>Method</h3>
					<div class="tsd-signature tsd-kind-icon">fee<wbr>Method<span class="tsd-signature-symbol">:</span> <a href="../enums/feemethod.html" class="tsd-signature-type">FeeMethod</a></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#feemethod">feeMethod</a></p>
						<p>Overrides Order.feeMethod</p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L561">types.ts:561</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="feerecipient" class="tsd-anchor"></a>
					<h3>fee<wbr>Recipient</h3>
					<div class="tsd-signature tsd-kind-icon">fee<wbr>Recipient<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.feeRecipient</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:92</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="feerecipientaccount" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> fee<wbr>Recipient<wbr>Account</h3>
					<div class="tsd-signature tsd-kind-icon">fee<wbr>Recipient<wbr>Account<span class="tsd-signature-symbol">:</span> <a href="openseaaccount.html" class="tsd-signature-type">OpenSeaAccount</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L591">types.ts:591</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="hash" class="tsd-anchor"></a>
					<h3>hash</h3>
					<div class="tsd-signature tsd-kind-icon">hash<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unsignedorder.html">UnsignedOrder</a>.<a href="unsignedorder.html#hash">hash</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L576">types.ts:576</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
					<a name="howtocall" class="tsd-anchor"></a>
					<h3>how<wbr>ToCall</h3>
					<div class="tsd-signature tsd-kind-icon">how<wbr>ToCall<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">HowToCall</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#howtocall">howToCall</a></p>
						<p>Overrides Order.howToCall</p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L564">types.ts:564</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="listingtime" class="tsd-anchor"></a>
					<h3>listing<wbr>Time</h3>
					<div class="tsd-signature tsd-kind-icon">listing<wbr>Time<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.listingTime</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:105</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="maker" class="tsd-anchor"></a>
					<h3>maker</h3>
					<div class="tsd-signature tsd-kind-icon">maker<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.maker</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:86</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="makeraccount" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> maker<wbr>Account</h3>
					<div class="tsd-signature tsd-kind-icon">maker<wbr>Account<span class="tsd-signature-symbol">:</span> <a href="openseaaccount.html" class="tsd-signature-type">OpenSeaAccount</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L588">types.ts:588</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="makerprotocolfee" class="tsd-anchor"></a>
					<h3>maker<wbr>Protocol<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">maker<wbr>Protocol<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.makerProtocolFee</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:90</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="makerreferrerfee" class="tsd-anchor"></a>
					<h3>maker<wbr>Referrer<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">maker<wbr>Referrer<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#makerreferrerfee">makerReferrerFee</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L568">types.ts:568</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="makerrelayerfee" class="tsd-anchor"></a>
					<h3>maker<wbr>Relayer<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">maker<wbr>Relayer<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.makerRelayerFee</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:88</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="markedinvalid" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> marked<wbr>Invalid</h3>
					<div class="tsd-signature tsd-kind-icon">marked<wbr>Invalid<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">true</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">false</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L593">types.ts:593</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="metadata" class="tsd-anchor"></a>
					<h3>metadata</h3>
					<div class="tsd-signature tsd-kind-icon">metadata<span class="tsd-signature-symbol">:</span> <a href="../globals.html#exchangemetadata" class="tsd-signature-type">ExchangeMetadata</a></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#metadata">metadata</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L572">types.ts:572</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="paymenttoken" class="tsd-anchor"></a>
					<h3>payment<wbr>Token</h3>
					<div class="tsd-signature tsd-kind-icon">payment<wbr>Token<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.paymentToken</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:102</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="paymenttokencontract" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> payment<wbr>Token<wbr>Contract</h3>
					<div class="tsd-signature tsd-kind-icon">payment<wbr>Token<wbr>Contract<span class="tsd-signature-symbol">:</span> <a href="openseafungibletoken.html" class="tsd-signature-type">OpenSeaFungibleToken</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L590">types.ts:590</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="quantity" class="tsd-anchor"></a>
					<h3>quantity</h3>
					<div class="tsd-signature tsd-kind-icon">quantity<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#quantity">quantity</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L565">types.ts:565</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="replacementpattern" class="tsd-anchor"></a>
					<h3>replacement<wbr>Pattern</h3>
					<div class="tsd-signature tsd-kind-icon">replacement<wbr>Pattern<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.replacementPattern</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:99</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
					<a name="salekind" class="tsd-anchor"></a>
					<h3>sale<wbr>Kind</h3>
					<div class="tsd-signature tsd-kind-icon">sale<wbr>Kind<span class="tsd-signature-symbol">:</span> <a href="../enums/salekind.html" class="tsd-signature-type">SaleKind</a></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#salekind">saleKind</a></p>
						<p>Overrides Order.saleKind</p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L563">types.ts:563</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="salt" class="tsd-anchor"></a>
					<h3>salt</h3>
					<div class="tsd-signature tsd-kind-icon">salt<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.salt</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:107</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
					<a name="side" class="tsd-anchor"></a>
					<h3>side</h3>
					<div class="tsd-signature tsd-kind-icon">side<span class="tsd-signature-symbol">:</span> <a href="../enums/orderside.html" class="tsd-signature-type">OrderSide</a></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#side">side</a></p>
						<p>Overrides Order.side</p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L562">types.ts:562</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="staticextradata" class="tsd-anchor"></a>
					<h3>static<wbr>Extradata</h3>
					<div class="tsd-signature tsd-kind-icon">static<wbr>Extradata<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.staticExtradata</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:101</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="statictarget" class="tsd-anchor"></a>
					<h3>static<wbr>Target</h3>
					<div class="tsd-signature tsd-kind-icon">static<wbr>Target<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.staticTarget</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:100</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="taker" class="tsd-anchor"></a>
					<h3>taker</h3>
					<div class="tsd-signature tsd-kind-icon">taker<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.taker</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:87</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="takeraccount" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> taker<wbr>Account</h3>
					<div class="tsd-signature tsd-kind-icon">taker<wbr>Account<span class="tsd-signature-symbol">:</span> <a href="openseaaccount.html" class="tsd-signature-type">OpenSeaAccount</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L589">types.ts:589</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="takerprotocolfee" class="tsd-anchor"></a>
					<h3>taker<wbr>Protocol<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">taker<wbr>Protocol<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.takerProtocolFee</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:91</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="takerrelayerfee" class="tsd-anchor"></a>
					<h3>taker<wbr>Relayer<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">taker<wbr>Relayer<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.takerRelayerFee</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:89</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="target" class="tsd-anchor"></a>
					<h3>target</h3>
					<div class="tsd-signature tsd-kind-icon">target<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.target</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:96</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="waitingforbestcounterorder" class="tsd-anchor"></a>
					<h3>waiting<wbr>For<wbr>Best<wbr>Counter<wbr>Order</h3>
					<div class="tsd-signature tsd-kind-icon">waiting<wbr>For<wbr>Best<wbr>Counter<wbr>Order<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">boolean</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#waitingforbestcounterorder">waitingForBestCounterOrder</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L569">types.ts:569</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="order.html" class="tsd-kind-icon">Order</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="order.html#asset" class="tsd-kind-icon">asset</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="order.html#assetbundle" class="tsd-kind-icon">asset<wbr>Bundle</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#baseprice" class="tsd-kind-icon">base<wbr>Price</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#calldata" class="tsd-kind-icon">calldata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="order.html#cancelledorfinalized" class="tsd-kind-icon">cancelled<wbr>OrFinalized</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="order.html#createdtime" class="tsd-kind-icon">created<wbr>Time</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="order.html#currentbounty" class="tsd-kind-icon">current<wbr>Bounty</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="order.html#currentprice" class="tsd-kind-icon">current<wbr>Price</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#englishauctionreserveprice" class="tsd-kind-icon">english<wbr>Auction<wbr>Reserve<wbr>Price</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#exchange" class="tsd-kind-icon">exchange</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#expirationtime" class="tsd-kind-icon">expiration<wbr>Time</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#extra" class="tsd-kind-icon">extra</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
								<a href="order.html#feemethod" class="tsd-kind-icon">fee<wbr>Method</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#feerecipient" class="tsd-kind-icon">fee<wbr>Recipient</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="order.html#feerecipientaccount" class="tsd-kind-icon">fee<wbr>Recipient<wbr>Account</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#hash" class="tsd-kind-icon">hash</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
								<a href="order.html#howtocall" class="tsd-kind-icon">how<wbr>ToCall</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#listingtime" class="tsd-kind-icon">listing<wbr>Time</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#maker" class="tsd-kind-icon">maker</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="order.html#makeraccount" class="tsd-kind-icon">maker<wbr>Account</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#makerprotocolfee" class="tsd-kind-icon">maker<wbr>Protocol<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#makerreferrerfee" class="tsd-kind-icon">maker<wbr>Referrer<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#makerrelayerfee" class="tsd-kind-icon">maker<wbr>Relayer<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="order.html#markedinvalid" class="tsd-kind-icon">marked<wbr>Invalid</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#metadata" class="tsd-kind-icon">metadata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#paymenttoken" class="tsd-kind-icon">payment<wbr>Token</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="order.html#paymenttokencontract" class="tsd-kind-icon">payment<wbr>Token<wbr>Contract</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#quantity" class="tsd-kind-icon">quantity</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#replacementpattern" class="tsd-kind-icon">replacement<wbr>Pattern</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
								<a href="order.html#salekind" class="tsd-kind-icon">sale<wbr>Kind</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#salt" class="tsd-kind-icon">salt</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
								<a href="order.html#side" class="tsd-kind-icon">side</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#staticextradata" class="tsd-kind-icon">static<wbr>Extradata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#statictarget" class="tsd-kind-icon">static<wbr>Target</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#taker" class="tsd-kind-icon">taker</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="order.html#takeraccount" class="tsd-kind-icon">taker<wbr>Account</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#takerprotocolfee" class="tsd-kind-icon">taker<wbr>Protocol<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#takerrelayerfee" class="tsd-kind-icon">taker<wbr>Relayer<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#target" class="tsd-kind-icon">target</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="order.html#waitingforbestcounterorder" class="tsd-kind-icon">waiting<wbr>For<wbr>Best<wbr>Counter<wbr>Order</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/orderbookresponse.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OrderbookResponse | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="orderbookresponse.html">OrderbookResponse</a>
				</li>
			</ul>
			<h1>Interface OrderbookResponse</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">OrderbookResponse</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderbookresponse.html#count" class="tsd-kind-icon">count</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderbookresponse.html#orders" class="tsd-kind-icon">orders</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="count" class="tsd-anchor"></a>
					<h3>count</h3>
					<div class="tsd-signature tsd-kind-icon">count<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L695">types.ts:695</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="orders" class="tsd-anchor"></a>
					<h3>orders</h3>
					<div class="tsd-signature tsd-kind-icon">orders<span class="tsd-signature-symbol">:</span> <a href="orderjson.html" class="tsd-signature-type">OrderJSON</a><span class="tsd-signature-symbol">[]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L694">types.ts:694</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="orderbookresponse.html" class="tsd-kind-icon">Orderbook<wbr>Response</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderbookresponse.html#count" class="tsd-kind-icon">count</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderbookresponse.html#orders" class="tsd-kind-icon">orders</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/orderjson.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OrderJSON | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="orderjson.html">OrderJSON</a>
				</li>
			</ul>
			<h1>Interface OrderJSON</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="tsd-signature-type">object</span>
						<ul class="tsd-hierarchy">
							<li>
								<span class="target">OrderJSON</span>
							</li>
						</ul>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#baseprice" class="tsd-kind-icon">base<wbr>Price</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#calldata" class="tsd-kind-icon">calldata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#createdtime" class="tsd-kind-icon">created<wbr>Time</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#englishauctionreserveprice" class="tsd-kind-icon">english<wbr>Auction<wbr>Reserve<wbr>Price</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#exchange" class="tsd-kind-icon">exchange</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#expirationtime" class="tsd-kind-icon">expiration<wbr>Time</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#extra" class="tsd-kind-icon">extra</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#feemethod" class="tsd-kind-icon">fee<wbr>Method</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#feerecipient" class="tsd-kind-icon">fee<wbr>Recipient</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#hash" class="tsd-kind-icon">hash</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#howtocall" class="tsd-kind-icon">how<wbr>ToCall</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#listingtime" class="tsd-kind-icon">listing<wbr>Time</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#maker" class="tsd-kind-icon">maker</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#makerprotocolfee" class="tsd-kind-icon">maker<wbr>Protocol<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#makerreferrerfee" class="tsd-kind-icon">maker<wbr>Referrer<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#makerrelayerfee" class="tsd-kind-icon">maker<wbr>Relayer<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#metadata" class="tsd-kind-icon">metadata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#paymenttoken" class="tsd-kind-icon">payment<wbr>Token</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#quantity" class="tsd-kind-icon">quantity</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#replacementpattern" class="tsd-kind-icon">replacement<wbr>Pattern</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#salekind" class="tsd-kind-icon">sale<wbr>Kind</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#salt" class="tsd-kind-icon">salt</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#side" class="tsd-kind-icon">side</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#staticextradata" class="tsd-kind-icon">static<wbr>Extradata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#statictarget" class="tsd-kind-icon">static<wbr>Target</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#taker" class="tsd-kind-icon">taker</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#takerprotocolfee" class="tsd-kind-icon">taker<wbr>Protocol<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#takerrelayerfee" class="tsd-kind-icon">taker<wbr>Relayer<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderjson.html#target" class="tsd-kind-icon">target</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="baseprice" class="tsd-anchor"></a>
					<h3>base<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">base<wbr>Price<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L625">types.ts:625</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="calldata" class="tsd-anchor"></a>
					<h3>calldata</h3>
					<div class="tsd-signature tsd-kind-icon">calldata<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L618">types.ts:618</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="createdtime" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> created<wbr>Time</h3>
					<div class="tsd-signature tsd-kind-icon">created<wbr>Time<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L630">types.ts:630</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="englishauctionreserveprice" class="tsd-anchor"></a>
					<h3>english<wbr>Auction<wbr>Reserve<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">english<wbr>Auction<wbr>Reserve<wbr>Price<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">undefined</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L626">types.ts:626</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="exchange" class="tsd-anchor"></a>
					<h3>exchange</h3>
					<div class="tsd-signature tsd-kind-icon">exchange<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L604">types.ts:604</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="expirationtime" class="tsd-anchor"></a>
					<h3>expiration<wbr>Time</h3>
					<div class="tsd-signature tsd-kind-icon">expiration<wbr>Time<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L632">types.ts:632</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="extra" class="tsd-anchor"></a>
					<h3>extra</h3>
					<div class="tsd-signature tsd-kind-icon">extra<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L627">types.ts:627</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="feemethod" class="tsd-anchor"></a>
					<h3>fee<wbr>Method</h3>
					<div class="tsd-signature tsd-kind-icon">fee<wbr>Method<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L613">types.ts:613</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="feerecipient" class="tsd-anchor"></a>
					<h3>fee<wbr>Recipient</h3>
					<div class="tsd-signature tsd-kind-icon">fee<wbr>Recipient<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L612">types.ts:612</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="hash" class="tsd-anchor"></a>
					<h3>hash</h3>
					<div class="tsd-signature tsd-kind-icon">hash<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L638">types.ts:638</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="howtocall" class="tsd-anchor"></a>
					<h3>how<wbr>ToCall</h3>
					<div class="tsd-signature tsd-kind-icon">how<wbr>ToCall<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L617">types.ts:617</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="listingtime" class="tsd-anchor"></a>
					<h3>listing<wbr>Time</h3>
					<div class="tsd-signature tsd-kind-icon">listing<wbr>Time<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L631">types.ts:631</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="maker" class="tsd-anchor"></a>
					<h3>maker</h3>
					<div class="tsd-signature tsd-kind-icon">maker<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L605">types.ts:605</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="makerprotocolfee" class="tsd-anchor"></a>
					<h3>maker<wbr>Protocol<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">maker<wbr>Protocol<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L609">types.ts:609</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="makerreferrerfee" class="tsd-anchor"></a>
					<h3>maker<wbr>Referrer<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">maker<wbr>Referrer<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L611">types.ts:611</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="makerrelayerfee" class="tsd-anchor"></a>
					<h3>maker<wbr>Relayer<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">maker<wbr>Relayer<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L607">types.ts:607</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="metadata" class="tsd-anchor"></a>
					<h3>metadata</h3>
					<div class="tsd-signature tsd-kind-icon">metadata<span class="tsd-signature-symbol">:</span> <a href="../globals.html#exchangemetadata" class="tsd-signature-type">ExchangeMetadata</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L636">types.ts:636</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="paymenttoken" class="tsd-anchor"></a>
					<h3>payment<wbr>Token</h3>
					<div class="tsd-signature tsd-kind-icon">payment<wbr>Token<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L622">types.ts:622</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="quantity" class="tsd-anchor"></a>
					<h3>quantity</h3>
					<div class="tsd-signature tsd-kind-icon">quantity<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L624">types.ts:624</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="replacementpattern" class="tsd-anchor"></a>
					<h3>replacement<wbr>Pattern</h3>
					<div class="tsd-signature tsd-kind-icon">replacement<wbr>Pattern<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L619">types.ts:619</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="salekind" class="tsd-anchor"></a>
					<h3>sale<wbr>Kind</h3>
					<div class="tsd-signature tsd-kind-icon">sale<wbr>Kind<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L615">types.ts:615</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="salt" class="tsd-anchor"></a>
					<h3>salt</h3>
					<div class="tsd-signature tsd-kind-icon">salt<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L634">types.ts:634</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="side" class="tsd-anchor"></a>
					<h3>side</h3>
					<div class="tsd-signature tsd-kind-icon">side<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L614">types.ts:614</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="staticextradata" class="tsd-anchor"></a>
					<h3>static<wbr>Extradata</h3>
					<div class="tsd-signature tsd-kind-icon">static<wbr>Extradata<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L621">types.ts:621</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="statictarget" class="tsd-anchor"></a>
					<h3>static<wbr>Target</h3>
					<div class="tsd-signature tsd-kind-icon">static<wbr>Target<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L620">types.ts:620</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="taker" class="tsd-anchor"></a>
					<h3>taker</h3>
					<div class="tsd-signature tsd-kind-icon">taker<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L606">types.ts:606</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="takerprotocolfee" class="tsd-anchor"></a>
					<h3>taker<wbr>Protocol<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">taker<wbr>Protocol<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L610">types.ts:610</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="takerrelayerfee" class="tsd-anchor"></a>
					<h3>taker<wbr>Relayer<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">taker<wbr>Relayer<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L608">types.ts:608</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="target" class="tsd-anchor"></a>
					<h3>target</h3>
					<div class="tsd-signature tsd-kind-icon">target<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L616">types.ts:616</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="orderjson.html" class="tsd-kind-icon">OrderJSON</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#baseprice" class="tsd-kind-icon">base<wbr>Price</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#calldata" class="tsd-kind-icon">calldata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#createdtime" class="tsd-kind-icon">created<wbr>Time</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#englishauctionreserveprice" class="tsd-kind-icon">english<wbr>Auction<wbr>Reserve<wbr>Price</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#exchange" class="tsd-kind-icon">exchange</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#expirationtime" class="tsd-kind-icon">expiration<wbr>Time</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#extra" class="tsd-kind-icon">extra</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#feemethod" class="tsd-kind-icon">fee<wbr>Method</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#feerecipient" class="tsd-kind-icon">fee<wbr>Recipient</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#hash" class="tsd-kind-icon">hash</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#howtocall" class="tsd-kind-icon">how<wbr>ToCall</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#listingtime" class="tsd-kind-icon">listing<wbr>Time</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#maker" class="tsd-kind-icon">maker</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#makerprotocolfee" class="tsd-kind-icon">maker<wbr>Protocol<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#makerreferrerfee" class="tsd-kind-icon">maker<wbr>Referrer<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#makerrelayerfee" class="tsd-kind-icon">maker<wbr>Relayer<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#metadata" class="tsd-kind-icon">metadata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#paymenttoken" class="tsd-kind-icon">payment<wbr>Token</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#quantity" class="tsd-kind-icon">quantity</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#replacementpattern" class="tsd-kind-icon">replacement<wbr>Pattern</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#salekind" class="tsd-kind-icon">sale<wbr>Kind</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#salt" class="tsd-kind-icon">salt</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#side" class="tsd-kind-icon">side</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#staticextradata" class="tsd-kind-icon">static<wbr>Extradata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#statictarget" class="tsd-kind-icon">static<wbr>Target</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#taker" class="tsd-kind-icon">taker</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#takerprotocolfee" class="tsd-kind-icon">taker<wbr>Protocol<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#takerrelayerfee" class="tsd-kind-icon">taker<wbr>Relayer<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderjson.html#target" class="tsd-kind-icon">target</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/orderquery.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>OrderQuery | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="orderquery.html">OrderQuery</a>
				</li>
			</ul>
			<h1>Interface OrderQuery</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="tsd-signature-type">object</span>
						<ul class="tsd-hierarchy">
							<li>
								<span class="target">OrderQuery</span>
							</li>
						</ul>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderquery.html#asset_contract_address" class="tsd-kind-icon">asset_<wbr>contract_<wbr>address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderquery.html#bundled" class="tsd-kind-icon">bundled</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderquery.html#include_invalid" class="tsd-kind-icon">include_<wbr>invalid</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderquery.html#is_english" class="tsd-kind-icon">is_<wbr>english</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderquery.html#is_expired" class="tsd-kind-icon">is_<wbr>expired</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderquery.html#limit" class="tsd-kind-icon">limit</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderquery.html#listed_after" class="tsd-kind-icon">listed_<wbr>after</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderquery.html#listed_before" class="tsd-kind-icon">listed_<wbr>before</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderquery.html#offset" class="tsd-kind-icon">offset</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderquery.html#owner" class="tsd-kind-icon">owner</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderquery.html#payment_token_address" class="tsd-kind-icon">payment_<wbr>token_<wbr>address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderquery.html#sale_kind" class="tsd-kind-icon">sale_<wbr>kind</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderquery.html#token_id" class="tsd-kind-icon">token_<wbr>id</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="orderquery.html#token_ids" class="tsd-kind-icon">token_<wbr>ids</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="asset_contract_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> asset_<wbr>contract_<wbr>address</h3>
					<div class="tsd-signature tsd-kind-icon">asset_<wbr>contract_<wbr>address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L650">types.ts:650</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="bundled" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> bundled</h3>
					<div class="tsd-signature tsd-kind-icon">bundled<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">true</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">false</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L654">types.ts:654</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="include_invalid" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> include_<wbr>invalid</h3>
					<div class="tsd-signature tsd-kind-icon">include_<wbr>invalid<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">true</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">false</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L655">types.ts:655</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="is_english" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> is_<wbr>english</h3>
					<div class="tsd-signature tsd-kind-icon">is_<wbr>english<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">true</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">false</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L652">types.ts:652</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="is_expired" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> is_<wbr>expired</h3>
					<div class="tsd-signature tsd-kind-icon">is_<wbr>expired<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">true</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">false</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L653">types.ts:653</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="limit" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> limit</h3>
					<div class="tsd-signature tsd-kind-icon">limit<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L662">types.ts:662</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="listed_after" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> listed_<wbr>after</h3>
					<div class="tsd-signature tsd-kind-icon">listed_<wbr>after<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L659">types.ts:659</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="listed_before" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> listed_<wbr>before</h3>
					<div class="tsd-signature tsd-kind-icon">listed_<wbr>before<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L661">types.ts:661</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="offset" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> offset</h3>
					<div class="tsd-signature tsd-kind-icon">offset<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">number</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L663">types.ts:663</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="owner" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> owner</h3>
					<div class="tsd-signature tsd-kind-icon">owner<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L648">types.ts:648</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="payment_token_address" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> payment_<wbr>token_<wbr>address</h3>
					<div class="tsd-signature tsd-kind-icon">payment_<wbr>token_<wbr>address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L651">types.ts:651</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="sale_kind" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> sale_<wbr>kind</h3>
					<div class="tsd-signature tsd-kind-icon">sale_<wbr>kind<span class="tsd-signature-symbol">:</span> <a href="../enums/salekind.html" class="tsd-signature-type">SaleKind</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L649">types.ts:649</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="token_id" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> token_<wbr>id</h3>
					<div class="tsd-signature tsd-kind-icon">token_<wbr>id<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L656">types.ts:656</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="token_ids" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> token_<wbr>ids</h3>
					<div class="tsd-signature tsd-kind-icon">token_<wbr>ids<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Array</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">number</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&gt;</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L657">types.ts:657</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="orderquery.html" class="tsd-kind-icon">Order<wbr>Query</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderquery.html#asset_contract_address" class="tsd-kind-icon">asset_<wbr>contract_<wbr>address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderquery.html#bundled" class="tsd-kind-icon">bundled</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderquery.html#include_invalid" class="tsd-kind-icon">include_<wbr>invalid</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderquery.html#is_english" class="tsd-kind-icon">is_<wbr>english</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderquery.html#is_expired" class="tsd-kind-icon">is_<wbr>expired</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderquery.html#limit" class="tsd-kind-icon">limit</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderquery.html#listed_after" class="tsd-kind-icon">listed_<wbr>after</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderquery.html#listed_before" class="tsd-kind-icon">listed_<wbr>before</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderquery.html#offset" class="tsd-kind-icon">offset</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderquery.html#owner" class="tsd-kind-icon">owner</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderquery.html#payment_token_address" class="tsd-kind-icon">payment_<wbr>token_<wbr>address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderquery.html#sale_kind" class="tsd-kind-icon">sale_<wbr>kind</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderquery.html#token_id" class="tsd-kind-icon">token_<wbr>id</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="orderquery.html#token_ids" class="tsd-kind-icon">token_<wbr>ids</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/partialabidefinition.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>PartialAbiDefinition | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="partialabidefinition.html">PartialAbiDefinition</a>
				</li>
			</ul>
			<h1>Interface PartialAbiDefinition</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">PartialAbiDefinition</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="partialabidefinition.html#anonymous" class="tsd-kind-icon">anonymous</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="partialabidefinition.html#constant" class="tsd-kind-icon">constant</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="partialabidefinition.html#inputs" class="tsd-kind-icon">inputs</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="partialabidefinition.html#name" class="tsd-kind-icon">name</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="partialabidefinition.html#outputs" class="tsd-kind-icon">outputs</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="partialabidefinition.html#payable" class="tsd-kind-icon">payable</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="partialabidefinition.html#statemutability" class="tsd-kind-icon">state<wbr>Mutability</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="partialabidefinition.html#type" class="tsd-kind-icon">type</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="anonymous" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> anonymous</h3>
					<div class="tsd-signature tsd-kind-icon">anonymous<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">true</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">false</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L713">types.ts:713</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="constant" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> constant</h3>
					<div class="tsd-signature tsd-kind-icon">constant<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">true</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">false</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L712">types.ts:712</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="inputs" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> inputs</h3>
					<div class="tsd-signature tsd-kind-icon">inputs<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">[]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L709">types.ts:709</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="name" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> name</h3>
					<div class="tsd-signature tsd-kind-icon">name<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L708">types.ts:708</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="outputs" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> outputs</h3>
					<div class="tsd-signature tsd-kind-icon">outputs<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">[]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L710">types.ts:710</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="payable" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> payable</h3>
					<div class="tsd-signature tsd-kind-icon">payable<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">true</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">false</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L711">types.ts:711</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="statemutability" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> state<wbr>Mutability</h3>
					<div class="tsd-signature tsd-kind-icon">state<wbr>Mutability<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Web3.ConstructorStateMutability</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L714">types.ts:714</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="type" class="tsd-anchor"></a>
					<h3>type</h3>
					<div class="tsd-signature tsd-kind-icon">type<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">AbiType</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L707">types.ts:707</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="partialabidefinition.html" class="tsd-kind-icon">Partial<wbr>Abi<wbr>Definition</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="partialabidefinition.html#anonymous" class="tsd-kind-icon">anonymous</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="partialabidefinition.html#constant" class="tsd-kind-icon">constant</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="partialabidefinition.html#inputs" class="tsd-kind-icon">inputs</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="partialabidefinition.html#name" class="tsd-kind-icon">name</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="partialabidefinition.html#outputs" class="tsd-kind-icon">outputs</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="partialabidefinition.html#payable" class="tsd-kind-icon">payable</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="partialabidefinition.html#statemutability" class="tsd-kind-icon">state<wbr>Mutability</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="partialabidefinition.html#type" class="tsd-kind-icon">type</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/stringtraitstats.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>StringTraitStats | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="stringtraitstats.html">StringTraitStats</a>
				</li>
			</ul>
			<h1>Interface StringTraitStats</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">StringTraitStats</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel tsd-kind-interface tsd-is-not-exported">
				<h3 class="tsd-before-signature">Indexable</h3>
				<div class="tsd-signature tsd-kind-icon"><span class="tsd-signature-symbol">[</span>key: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]: </span><span class="tsd-signature-type">number</span></div>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface tsd-is-not-exported">
						<a href="stringtraitstats.html" class="tsd-kind-icon">String<wbr>Trait<wbr>Stats</a>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/transaction.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>Transaction | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="transaction.html">Transaction</a>
				</li>
			</ul>
			<h1>Interface Transaction</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">Transaction</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="transaction.html#blockhash" class="tsd-kind-icon">block<wbr>Hash</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="transaction.html#blocknumber" class="tsd-kind-icon">block<wbr>Number</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="transaction.html#createddate" class="tsd-kind-icon">created<wbr>Date</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="transaction.html#fromaccount" class="tsd-kind-icon">from<wbr>Account</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="transaction.html#modifieddate" class="tsd-kind-icon">modified<wbr>Date</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="transaction.html#timestamp" class="tsd-kind-icon">timestamp</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="transaction.html#toaccount" class="tsd-kind-icon">to<wbr>Account</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="transaction.html#transactionhash" class="tsd-kind-icon">transaction<wbr>Hash</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="transaction.html#transactionindex" class="tsd-kind-icon">transaction<wbr>Index</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="blockhash" class="tsd-anchor"></a>
					<h3>block<wbr>Hash</h3>
					<div class="tsd-signature tsd-kind-icon">block<wbr>Hash<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L455">types.ts:455</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="blocknumber" class="tsd-anchor"></a>
					<h3>block<wbr>Number</h3>
					<div class="tsd-signature tsd-kind-icon">block<wbr>Number<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L452">types.ts:452</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="createddate" class="tsd-anchor"></a>
					<h3>created<wbr>Date</h3>
					<div class="tsd-signature tsd-kind-icon">created<wbr>Date<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Date</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L440">types.ts:440</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="fromaccount" class="tsd-anchor"></a>
					<h3>from<wbr>Account</h3>
					<div class="tsd-signature tsd-kind-icon">from<wbr>Account<span class="tsd-signature-symbol">:</span> <a href="openseaaccount.html" class="tsd-signature-type">OpenSeaAccount</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L434">types.ts:434</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="modifieddate" class="tsd-anchor"></a>
					<h3>modified<wbr>Date</h3>
					<div class="tsd-signature tsd-kind-icon">modified<wbr>Date<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Date</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L443">types.ts:443</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="timestamp" class="tsd-anchor"></a>
					<h3>timestamp</h3>
					<div class="tsd-signature tsd-kind-icon">timestamp<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Date</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L458">types.ts:458</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="toaccount" class="tsd-anchor"></a>
					<h3>to<wbr>Account</h3>
					<div class="tsd-signature tsd-kind-icon">to<wbr>Account<span class="tsd-signature-symbol">:</span> <a href="openseaaccount.html" class="tsd-signature-type">OpenSeaAccount</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L437">types.ts:437</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="transactionhash" class="tsd-anchor"></a>
					<h3>transaction<wbr>Hash</h3>
					<div class="tsd-signature tsd-kind-icon">transaction<wbr>Hash<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L446">types.ts:446</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="transactionindex" class="tsd-anchor"></a>
					<h3>transaction<wbr>Index</h3>
					<div class="tsd-signature tsd-kind-icon">transaction<wbr>Index<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L449">types.ts:449</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="transaction.html" class="tsd-kind-icon">Transaction</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="transaction.html#blockhash" class="tsd-kind-icon">block<wbr>Hash</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="transaction.html#blocknumber" class="tsd-kind-icon">block<wbr>Number</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="transaction.html#createddate" class="tsd-kind-icon">created<wbr>Date</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="transaction.html#fromaccount" class="tsd-kind-icon">from<wbr>Account</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="transaction.html#modifieddate" class="tsd-kind-icon">modified<wbr>Date</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="transaction.html#timestamp" class="tsd-kind-icon">timestamp</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="transaction.html#toaccount" class="tsd-kind-icon">to<wbr>Account</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="transaction.html#transactionhash" class="tsd-kind-icon">transaction<wbr>Hash</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="transaction.html#transactionindex" class="tsd-kind-icon">transaction<wbr>Index</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/unhashedorder.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>UnhashedOrder | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="unhashedorder.html">UnhashedOrder</a>
				</li>
			</ul>
			<h1>Interface UnhashedOrder</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="tsd-signature-type">Order</span>
						<ul class="tsd-hierarchy">
							<li>
								<span class="target">UnhashedOrder</span>
								<ul class="tsd-hierarchy">
									<li>
										<a href="unsignedorder.html" class="tsd-signature-type">UnsignedOrder</a>
									</li>
								</ul>
							</li>
						</ul>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#baseprice" class="tsd-kind-icon">base<wbr>Price</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#calldata" class="tsd-kind-icon">calldata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="unhashedorder.html#englishauctionreserveprice" class="tsd-kind-icon">english<wbr>Auction<wbr>Reserve<wbr>Price</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#exchange" class="tsd-kind-icon">exchange</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#expirationtime" class="tsd-kind-icon">expiration<wbr>Time</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#extra" class="tsd-kind-icon">extra</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite"><a href="unhashedorder.html#feemethod" class="tsd-kind-icon">fee<wbr>Method</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#feerecipient" class="tsd-kind-icon">fee<wbr>Recipient</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite"><a href="unhashedorder.html#howtocall" class="tsd-kind-icon">how<wbr>ToCall</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#listingtime" class="tsd-kind-icon">listing<wbr>Time</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#maker" class="tsd-kind-icon">maker</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#makerprotocolfee" class="tsd-kind-icon">maker<wbr>Protocol<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="unhashedorder.html#makerreferrerfee" class="tsd-kind-icon">maker<wbr>Referrer<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#makerrelayerfee" class="tsd-kind-icon">maker<wbr>Relayer<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="unhashedorder.html#metadata" class="tsd-kind-icon">metadata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#paymenttoken" class="tsd-kind-icon">payment<wbr>Token</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="unhashedorder.html#quantity" class="tsd-kind-icon">quantity</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#replacementpattern" class="tsd-kind-icon">replacement<wbr>Pattern</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite"><a href="unhashedorder.html#salekind" class="tsd-kind-icon">sale<wbr>Kind</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#salt" class="tsd-kind-icon">salt</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite"><a href="unhashedorder.html#side" class="tsd-kind-icon">side</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#staticextradata" class="tsd-kind-icon">static<wbr>Extradata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#statictarget" class="tsd-kind-icon">static<wbr>Target</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#taker" class="tsd-kind-icon">taker</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#takerprotocolfee" class="tsd-kind-icon">taker<wbr>Protocol<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#takerrelayerfee" class="tsd-kind-icon">taker<wbr>Relayer<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unhashedorder.html#target" class="tsd-kind-icon">target</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="unhashedorder.html#waitingforbestcounterorder" class="tsd-kind-icon">waiting<wbr>For<wbr>Best<wbr>Counter<wbr>Order</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="baseprice" class="tsd-anchor"></a>
					<h3>base<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">base<wbr>Price<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.basePrice</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:103</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="calldata" class="tsd-anchor"></a>
					<h3>calldata</h3>
					<div class="tsd-signature tsd-kind-icon">calldata<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.calldata</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:98</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="englishauctionreserveprice" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> english<wbr>Auction<wbr>Reserve<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">english<wbr>Auction<wbr>Reserve<wbr>Price<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L570">types.ts:570</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="exchange" class="tsd-anchor"></a>
					<h3>exchange</h3>
					<div class="tsd-signature tsd-kind-icon">exchange<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.exchange</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:85</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="expirationtime" class="tsd-anchor"></a>
					<h3>expiration<wbr>Time</h3>
					<div class="tsd-signature tsd-kind-icon">expiration<wbr>Time<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.expirationTime</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:106</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="extra" class="tsd-anchor"></a>
					<h3>extra</h3>
					<div class="tsd-signature tsd-kind-icon">extra<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.extra</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:104</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite">
					<a name="feemethod" class="tsd-anchor"></a>
					<h3>fee<wbr>Method</h3>
					<div class="tsd-signature tsd-kind-icon">fee<wbr>Method<span class="tsd-signature-symbol">:</span> <a href="../enums/feemethod.html" class="tsd-signature-type">FeeMethod</a></div>
					<aside class="tsd-sources">
						<p>Overrides Order.feeMethod</p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L561">types.ts:561</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="feerecipient" class="tsd-anchor"></a>
					<h3>fee<wbr>Recipient</h3>
					<div class="tsd-signature tsd-kind-icon">fee<wbr>Recipient<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.feeRecipient</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:92</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite">
					<a name="howtocall" class="tsd-anchor"></a>
					<h3>how<wbr>ToCall</h3>
					<div class="tsd-signature tsd-kind-icon">how<wbr>ToCall<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">HowToCall</span></div>
					<aside class="tsd-sources">
						<p>Overrides Order.howToCall</p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L564">types.ts:564</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="listingtime" class="tsd-anchor"></a>
					<h3>listing<wbr>Time</h3>
					<div class="tsd-signature tsd-kind-icon">listing<wbr>Time<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.listingTime</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:105</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="maker" class="tsd-anchor"></a>
					<h3>maker</h3>
					<div class="tsd-signature tsd-kind-icon">maker<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.maker</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:86</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="makerprotocolfee" class="tsd-anchor"></a>
					<h3>maker<wbr>Protocol<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">maker<wbr>Protocol<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.makerProtocolFee</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:90</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="makerreferrerfee" class="tsd-anchor"></a>
					<h3>maker<wbr>Referrer<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">maker<wbr>Referrer<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L568">types.ts:568</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="makerrelayerfee" class="tsd-anchor"></a>
					<h3>maker<wbr>Relayer<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">maker<wbr>Relayer<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.makerRelayerFee</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:88</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="metadata" class="tsd-anchor"></a>
					<h3>metadata</h3>
					<div class="tsd-signature tsd-kind-icon">metadata<span class="tsd-signature-symbol">:</span> <a href="../globals.html#exchangemetadata" class="tsd-signature-type">ExchangeMetadata</a></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L572">types.ts:572</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="paymenttoken" class="tsd-anchor"></a>
					<h3>payment<wbr>Token</h3>
					<div class="tsd-signature tsd-kind-icon">payment<wbr>Token<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.paymentToken</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:102</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="quantity" class="tsd-anchor"></a>
					<h3>quantity</h3>
					<div class="tsd-signature tsd-kind-icon">quantity<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L565">types.ts:565</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="replacementpattern" class="tsd-anchor"></a>
					<h3>replacement<wbr>Pattern</h3>
					<div class="tsd-signature tsd-kind-icon">replacement<wbr>Pattern<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.replacementPattern</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:99</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite">
					<a name="salekind" class="tsd-anchor"></a>
					<h3>sale<wbr>Kind</h3>
					<div class="tsd-signature tsd-kind-icon">sale<wbr>Kind<span class="tsd-signature-symbol">:</span> <a href="../enums/salekind.html" class="tsd-signature-type">SaleKind</a></div>
					<aside class="tsd-sources">
						<p>Overrides Order.saleKind</p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L563">types.ts:563</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="salt" class="tsd-anchor"></a>
					<h3>salt</h3>
					<div class="tsd-signature tsd-kind-icon">salt<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.salt</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:107</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite">
					<a name="side" class="tsd-anchor"></a>
					<h3>side</h3>
					<div class="tsd-signature tsd-kind-icon">side<span class="tsd-signature-symbol">:</span> <a href="../enums/orderside.html" class="tsd-signature-type">OrderSide</a></div>
					<aside class="tsd-sources">
						<p>Overrides Order.side</p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L562">types.ts:562</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="staticextradata" class="tsd-anchor"></a>
					<h3>static<wbr>Extradata</h3>
					<div class="tsd-signature tsd-kind-icon">static<wbr>Extradata<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.staticExtradata</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:101</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="statictarget" class="tsd-anchor"></a>
					<h3>static<wbr>Target</h3>
					<div class="tsd-signature tsd-kind-icon">static<wbr>Target<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.staticTarget</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:100</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="taker" class="tsd-anchor"></a>
					<h3>taker</h3>
					<div class="tsd-signature tsd-kind-icon">taker<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.taker</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:87</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="takerprotocolfee" class="tsd-anchor"></a>
					<h3>taker<wbr>Protocol<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">taker<wbr>Protocol<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.takerProtocolFee</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:91</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="takerrelayerfee" class="tsd-anchor"></a>
					<h3>taker<wbr>Relayer<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">taker<wbr>Relayer<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.takerRelayerFee</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:89</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="target" class="tsd-anchor"></a>
					<h3>target</h3>
					<div class="tsd-signature tsd-kind-icon">target<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.target</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:96</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="waitingforbestcounterorder" class="tsd-anchor"></a>
					<h3>waiting<wbr>For<wbr>Best<wbr>Counter<wbr>Order</h3>
					<div class="tsd-signature tsd-kind-icon">waiting<wbr>For<wbr>Best<wbr>Counter<wbr>Order<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">boolean</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L569">types.ts:569</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="unhashedorder.html" class="tsd-kind-icon">Unhashed<wbr>Order</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#baseprice" class="tsd-kind-icon">base<wbr>Price</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#calldata" class="tsd-kind-icon">calldata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="unhashedorder.html#englishauctionreserveprice" class="tsd-kind-icon">english<wbr>Auction<wbr>Reserve<wbr>Price</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#exchange" class="tsd-kind-icon">exchange</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#expirationtime" class="tsd-kind-icon">expiration<wbr>Time</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#extra" class="tsd-kind-icon">extra</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite">
								<a href="unhashedorder.html#feemethod" class="tsd-kind-icon">fee<wbr>Method</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#feerecipient" class="tsd-kind-icon">fee<wbr>Recipient</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite">
								<a href="unhashedorder.html#howtocall" class="tsd-kind-icon">how<wbr>ToCall</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#listingtime" class="tsd-kind-icon">listing<wbr>Time</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#maker" class="tsd-kind-icon">maker</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#makerprotocolfee" class="tsd-kind-icon">maker<wbr>Protocol<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="unhashedorder.html#makerreferrerfee" class="tsd-kind-icon">maker<wbr>Referrer<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#makerrelayerfee" class="tsd-kind-icon">maker<wbr>Relayer<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="unhashedorder.html#metadata" class="tsd-kind-icon">metadata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#paymenttoken" class="tsd-kind-icon">payment<wbr>Token</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="unhashedorder.html#quantity" class="tsd-kind-icon">quantity</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#replacementpattern" class="tsd-kind-icon">replacement<wbr>Pattern</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite">
								<a href="unhashedorder.html#salekind" class="tsd-kind-icon">sale<wbr>Kind</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#salt" class="tsd-kind-icon">salt</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite">
								<a href="unhashedorder.html#side" class="tsd-kind-icon">side</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#staticextradata" class="tsd-kind-icon">static<wbr>Extradata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#statictarget" class="tsd-kind-icon">static<wbr>Target</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#taker" class="tsd-kind-icon">taker</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#takerprotocolfee" class="tsd-kind-icon">taker<wbr>Protocol<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#takerrelayerfee" class="tsd-kind-icon">taker<wbr>Relayer<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unhashedorder.html#target" class="tsd-kind-icon">target</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="unhashedorder.html#waitingforbestcounterorder" class="tsd-kind-icon">waiting<wbr>For<wbr>Best<wbr>Counter<wbr>Order</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/unsignedorder.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>UnsignedOrder | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="unsignedorder.html">UnsignedOrder</a>
				</li>
			</ul>
			<h1>Interface UnsignedOrder</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<a href="unhashedorder.html" class="tsd-signature-type">UnhashedOrder</a>
						<ul class="tsd-hierarchy">
							<li>
								<span class="target">UnsignedOrder</span>
								<ul class="tsd-hierarchy">
									<li>
										<a href="order.html" class="tsd-signature-type">Order</a>
									</li>
								</ul>
							</li>
						</ul>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#baseprice" class="tsd-kind-icon">base<wbr>Price</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#calldata" class="tsd-kind-icon">calldata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#englishauctionreserveprice" class="tsd-kind-icon">english<wbr>Auction<wbr>Reserve<wbr>Price</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#exchange" class="tsd-kind-icon">exchange</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#expirationtime" class="tsd-kind-icon">expiration<wbr>Time</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#extra" class="tsd-kind-icon">extra</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited"><a href="unsignedorder.html#feemethod" class="tsd-kind-icon">fee<wbr>Method</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#feerecipient" class="tsd-kind-icon">fee<wbr>Recipient</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="unsignedorder.html#hash" class="tsd-kind-icon">hash</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited"><a href="unsignedorder.html#howtocall" class="tsd-kind-icon">how<wbr>ToCall</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#listingtime" class="tsd-kind-icon">listing<wbr>Time</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#maker" class="tsd-kind-icon">maker</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#makerprotocolfee" class="tsd-kind-icon">maker<wbr>Protocol<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#makerreferrerfee" class="tsd-kind-icon">maker<wbr>Referrer<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#makerrelayerfee" class="tsd-kind-icon">maker<wbr>Relayer<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#metadata" class="tsd-kind-icon">metadata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#paymenttoken" class="tsd-kind-icon">payment<wbr>Token</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#quantity" class="tsd-kind-icon">quantity</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#replacementpattern" class="tsd-kind-icon">replacement<wbr>Pattern</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited"><a href="unsignedorder.html#salekind" class="tsd-kind-icon">sale<wbr>Kind</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#salt" class="tsd-kind-icon">salt</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited"><a href="unsignedorder.html#side" class="tsd-kind-icon">side</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#staticextradata" class="tsd-kind-icon">static<wbr>Extradata</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#statictarget" class="tsd-kind-icon">static<wbr>Target</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#taker" class="tsd-kind-icon">taker</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#takerprotocolfee" class="tsd-kind-icon">taker<wbr>Protocol<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#takerrelayerfee" class="tsd-kind-icon">taker<wbr>Relayer<wbr>Fee</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#target" class="tsd-kind-icon">target</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface tsd-is-inherited"><a href="unsignedorder.html#waitingforbestcounterorder" class="tsd-kind-icon">waiting<wbr>For<wbr>Best<wbr>Counter<wbr>Order</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="baseprice" class="tsd-anchor"></a>
					<h3>base<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">base<wbr>Price<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.basePrice</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:103</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="calldata" class="tsd-anchor"></a>
					<h3>calldata</h3>
					<div class="tsd-signature tsd-kind-icon">calldata<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.calldata</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:98</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="englishauctionreserveprice" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> english<wbr>Auction<wbr>Reserve<wbr>Price</h3>
					<div class="tsd-signature tsd-kind-icon">english<wbr>Auction<wbr>Reserve<wbr>Price<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#englishauctionreserveprice">englishAuctionReservePrice</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L570">types.ts:570</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="exchange" class="tsd-anchor"></a>
					<h3>exchange</h3>
					<div class="tsd-signature tsd-kind-icon">exchange<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.exchange</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:85</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="expirationtime" class="tsd-anchor"></a>
					<h3>expiration<wbr>Time</h3>
					<div class="tsd-signature tsd-kind-icon">expiration<wbr>Time<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.expirationTime</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:106</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="extra" class="tsd-anchor"></a>
					<h3>extra</h3>
					<div class="tsd-signature tsd-kind-icon">extra<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.extra</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:104</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
					<a name="feemethod" class="tsd-anchor"></a>
					<h3>fee<wbr>Method</h3>
					<div class="tsd-signature tsd-kind-icon">fee<wbr>Method<span class="tsd-signature-symbol">:</span> <a href="../enums/feemethod.html" class="tsd-signature-type">FeeMethod</a></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#feemethod">feeMethod</a></p>
						<p>Overrides Order.feeMethod</p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L561">types.ts:561</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="feerecipient" class="tsd-anchor"></a>
					<h3>fee<wbr>Recipient</h3>
					<div class="tsd-signature tsd-kind-icon">fee<wbr>Recipient<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.feeRecipient</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:92</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="hash" class="tsd-anchor"></a>
					<h3>hash</h3>
					<div class="tsd-signature tsd-kind-icon">hash<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L576">types.ts:576</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
					<a name="howtocall" class="tsd-anchor"></a>
					<h3>how<wbr>ToCall</h3>
					<div class="tsd-signature tsd-kind-icon">how<wbr>ToCall<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">HowToCall</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#howtocall">howToCall</a></p>
						<p>Overrides Order.howToCall</p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L564">types.ts:564</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="listingtime" class="tsd-anchor"></a>
					<h3>listing<wbr>Time</h3>
					<div class="tsd-signature tsd-kind-icon">listing<wbr>Time<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.listingTime</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:105</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="maker" class="tsd-anchor"></a>
					<h3>maker</h3>
					<div class="tsd-signature tsd-kind-icon">maker<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.maker</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:86</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="makerprotocolfee" class="tsd-anchor"></a>
					<h3>maker<wbr>Protocol<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">maker<wbr>Protocol<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.makerProtocolFee</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:90</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="makerreferrerfee" class="tsd-anchor"></a>
					<h3>maker<wbr>Referrer<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">maker<wbr>Referrer<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#makerreferrerfee">makerReferrerFee</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L568">types.ts:568</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="makerrelayerfee" class="tsd-anchor"></a>
					<h3>maker<wbr>Relayer<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">maker<wbr>Relayer<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.makerRelayerFee</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:88</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="metadata" class="tsd-anchor"></a>
					<h3>metadata</h3>
					<div class="tsd-signature tsd-kind-icon">metadata<span class="tsd-signature-symbol">:</span> <a href="../globals.html#exchangemetadata" class="tsd-signature-type">ExchangeMetadata</a></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#metadata">metadata</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L572">types.ts:572</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="paymenttoken" class="tsd-anchor"></a>
					<h3>payment<wbr>Token</h3>
					<div class="tsd-signature tsd-kind-icon">payment<wbr>Token<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.paymentToken</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:102</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="quantity" class="tsd-anchor"></a>
					<h3>quantity</h3>
					<div class="tsd-signature tsd-kind-icon">quantity<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#quantity">quantity</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L565">types.ts:565</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="replacementpattern" class="tsd-anchor"></a>
					<h3>replacement<wbr>Pattern</h3>
					<div class="tsd-signature tsd-kind-icon">replacement<wbr>Pattern<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.replacementPattern</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:99</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
					<a name="salekind" class="tsd-anchor"></a>
					<h3>sale<wbr>Kind</h3>
					<div class="tsd-signature tsd-kind-icon">sale<wbr>Kind<span class="tsd-signature-symbol">:</span> <a href="../enums/salekind.html" class="tsd-signature-type">SaleKind</a></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#salekind">saleKind</a></p>
						<p>Overrides Order.saleKind</p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L563">types.ts:563</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="salt" class="tsd-anchor"></a>
					<h3>salt</h3>
					<div class="tsd-signature tsd-kind-icon">salt<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.salt</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:107</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
					<a name="side" class="tsd-anchor"></a>
					<h3>side</h3>
					<div class="tsd-signature tsd-kind-icon">side<span class="tsd-signature-symbol">:</span> <a href="../enums/orderside.html" class="tsd-signature-type">OrderSide</a></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#side">side</a></p>
						<p>Overrides Order.side</p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L562">types.ts:562</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="staticextradata" class="tsd-anchor"></a>
					<h3>static<wbr>Extradata</h3>
					<div class="tsd-signature tsd-kind-icon">static<wbr>Extradata<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.staticExtradata</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:101</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="statictarget" class="tsd-anchor"></a>
					<h3>static<wbr>Target</h3>
					<div class="tsd-signature tsd-kind-icon">static<wbr>Target<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.staticTarget</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:100</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="taker" class="tsd-anchor"></a>
					<h3>taker</h3>
					<div class="tsd-signature tsd-kind-icon">taker<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.taker</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:87</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="takerprotocolfee" class="tsd-anchor"></a>
					<h3>taker<wbr>Protocol<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">taker<wbr>Protocol<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.takerProtocolFee</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:91</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="takerrelayerfee" class="tsd-anchor"></a>
					<h3>taker<wbr>Relayer<wbr>Fee</h3>
					<div class="tsd-signature tsd-kind-icon">taker<wbr>Relayer<wbr>Fee<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">BigNumber</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.takerRelayerFee</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:89</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="target" class="tsd-anchor"></a>
					<h3>target</h3>
					<div class="tsd-signature tsd-kind-icon">target<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<p>Inherited from Order.target</p>
						<ul>
							<li>Defined in /Users/alex/Sites/Projects/Ozone/OpenSea/opensea-js/node_modules/wyvern-js/lib/types.d.ts:96</li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
					<a name="waitingforbestcounterorder" class="tsd-anchor"></a>
					<h3>waiting<wbr>For<wbr>Best<wbr>Counter<wbr>Order</h3>
					<div class="tsd-signature tsd-kind-icon">waiting<wbr>For<wbr>Best<wbr>Counter<wbr>Order<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">boolean</span></div>
					<aside class="tsd-sources">
						<p>Inherited from <a href="unhashedorder.html">UnhashedOrder</a>.<a href="unhashedorder.html#waitingforbestcounterorder">waitingForBestCounterOrder</a></p>
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L569">types.ts:569</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="unsignedorder.html" class="tsd-kind-icon">Unsigned<wbr>Order</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#baseprice" class="tsd-kind-icon">base<wbr>Price</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#calldata" class="tsd-kind-icon">calldata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#englishauctionreserveprice" class="tsd-kind-icon">english<wbr>Auction<wbr>Reserve<wbr>Price</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#exchange" class="tsd-kind-icon">exchange</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#expirationtime" class="tsd-kind-icon">expiration<wbr>Time</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#extra" class="tsd-kind-icon">extra</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
								<a href="unsignedorder.html#feemethod" class="tsd-kind-icon">fee<wbr>Method</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#feerecipient" class="tsd-kind-icon">fee<wbr>Recipient</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="unsignedorder.html#hash" class="tsd-kind-icon">hash</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
								<a href="unsignedorder.html#howtocall" class="tsd-kind-icon">how<wbr>ToCall</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#listingtime" class="tsd-kind-icon">listing<wbr>Time</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#maker" class="tsd-kind-icon">maker</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#makerprotocolfee" class="tsd-kind-icon">maker<wbr>Protocol<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#makerreferrerfee" class="tsd-kind-icon">maker<wbr>Referrer<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#makerrelayerfee" class="tsd-kind-icon">maker<wbr>Relayer<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#metadata" class="tsd-kind-icon">metadata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#paymenttoken" class="tsd-kind-icon">payment<wbr>Token</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#quantity" class="tsd-kind-icon">quantity</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#replacementpattern" class="tsd-kind-icon">replacement<wbr>Pattern</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
								<a href="unsignedorder.html#salekind" class="tsd-kind-icon">sale<wbr>Kind</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#salt" class="tsd-kind-icon">salt</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-overwrite tsd-is-inherited">
								<a href="unsignedorder.html#side" class="tsd-kind-icon">side</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#staticextradata" class="tsd-kind-icon">static<wbr>Extradata</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#statictarget" class="tsd-kind-icon">static<wbr>Target</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#taker" class="tsd-kind-icon">taker</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#takerprotocolfee" class="tsd-kind-icon">taker<wbr>Protocol<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#takerrelayerfee" class="tsd-kind-icon">taker<wbr>Relayer<wbr>Fee</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#target" class="tsd-kind-icon">target</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface tsd-is-inherited">
								<a href="unsignedorder.html#waitingforbestcounterorder" class="tsd-kind-icon">waiting<wbr>For<wbr>Best<wbr>Counter<wbr>Order</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/wyvernbundle.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>WyvernBundle | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="wyvernbundle.html">WyvernBundle</a>
				</li>
			</ul>
			<h1>Interface WyvernBundle</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">WyvernBundle</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="wyvernbundle.html#assets" class="tsd-kind-icon">assets</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="wyvernbundle.html#description" class="tsd-kind-icon">description</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="wyvernbundle.html#external_link" class="tsd-kind-icon">external_<wbr>link</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="wyvernbundle.html#name" class="tsd-kind-icon">name</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="wyvernbundle.html#schemas" class="tsd-kind-icon">schemas</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="assets" class="tsd-anchor"></a>
					<h3>assets</h3>
					<div class="tsd-signature tsd-kind-icon">assets<span class="tsd-signature-symbol">:</span> <a href="../globals.html#wyvernasset" class="tsd-signature-type">WyvernAsset</a><span class="tsd-signature-symbol">[]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L195">types.ts:195</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="description" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> description</h3>
					<div class="tsd-signature tsd-kind-icon">description<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L198">types.ts:198</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="external_link" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> external_<wbr>link</h3>
					<div class="tsd-signature tsd-kind-icon">external_<wbr>link<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L199">types.ts:199</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="name" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> name</h3>
					<div class="tsd-signature tsd-kind-icon">name<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L197">types.ts:197</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="schemas" class="tsd-anchor"></a>
					<h3>schemas</h3>
					<div class="tsd-signature tsd-kind-icon">schemas<span class="tsd-signature-symbol">:</span> <a href="../enums/wyvernschemaname.html" class="tsd-signature-type">WyvernSchemaName</a><span class="tsd-signature-symbol">[]</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L196">types.ts:196</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="wyvernbundle.html" class="tsd-kind-icon">Wyvern<wbr>Bundle</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="wyvernbundle.html#assets" class="tsd-kind-icon">assets</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="wyvernbundle.html#description" class="tsd-kind-icon">description</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="wyvernbundle.html#external_link" class="tsd-kind-icon">external_<wbr>link</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="wyvernbundle.html#name" class="tsd-kind-icon">name</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="wyvernbundle.html#schemas" class="tsd-kind-icon">schemas</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/wyvernftasset.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>WyvernFTAsset | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="wyvernftasset.html">WyvernFTAsset</a>
				</li>
			</ul>
			<h1>Interface WyvernFTAsset</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">WyvernFTAsset</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="wyvernftasset.html#address" class="tsd-kind-icon">address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="wyvernftasset.html#id" class="tsd-kind-icon">id</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="wyvernftasset.html#quantity" class="tsd-kind-icon">quantity</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="address" class="tsd-anchor"></a>
					<h3>address</h3>
					<div class="tsd-signature tsd-kind-icon">address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L188">types.ts:188</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="id" class="tsd-anchor"></a>
					<h3><span class="tsd-flag ts-flagOptional">Optional</span> id</h3>
					<div class="tsd-signature tsd-kind-icon">id<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">undefined</span><span class="tsd-signature-symbol"> | </span><span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L187">types.ts:187</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="quantity" class="tsd-anchor"></a>
					<h3>quantity</h3>
					<div class="tsd-signature tsd-kind-icon">quantity<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L189">types.ts:189</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="wyvernftasset.html" class="tsd-kind-icon">WyvernFTAsset</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="wyvernftasset.html#address" class="tsd-kind-icon">address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="wyvernftasset.html#id" class="tsd-kind-icon">id</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="wyvernftasset.html#quantity" class="tsd-kind-icon">quantity</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- docs/interfaces/wyvernnftasset.html ---
<!doctype html>
<html class="default no-js">
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>WyvernNFTAsset | opensea-js</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../assets/css/main.css">
</head>
<body>
<header>
	<div class="tsd-page-toolbar">
		<div class="container">
			<div class="table-wrap">
				<div class="table-cell" id="tsd-search" data-index="../assets/js/search.js" data-base="..">
					<div class="field">
						<label for="tsd-search-field" class="tsd-widget search no-caption">Search</label>
						<input id="tsd-search-field" type="text" />
					</div>
					<ul class="results">
						<li class="state loading">Preparing search index...</li>
						<li class="state failure">The search index is not available</li>
					</ul>
					<a href="../index.html" class="title">opensea-js</a>
				</div>
				<div class="table-cell" id="tsd-widgets">
					<div id="tsd-filter">
						<a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a>
						<div class="tsd-filter-group">
							<div class="tsd-select" id="tsd-filter-visibility">
								<span class="tsd-select-label">All</span>
								<ul class="tsd-select-list">
									<li data-value="public">Public</li>
									<li data-value="protected">Public/Protected</li>
									<li data-value="private" class="selected">All</li>
								</ul>
							</div>
							<input type="checkbox" id="tsd-filter-inherited" checked />
							<label class="tsd-widget" for="tsd-filter-inherited">Inherited</label>
							<input type="checkbox" id="tsd-filter-externals" checked />
							<label class="tsd-widget" for="tsd-filter-externals">Externals</label>
							<input type="checkbox" id="tsd-filter-only-exported" />
							<label class="tsd-widget" for="tsd-filter-only-exported">Only exported</label>
						</div>
					</div>
					<a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a>
				</div>
			</div>
		</div>
	</div>
	<div class="tsd-page-title">
		<div class="container">
			<ul class="tsd-breadcrumb">
				<li>
					<a href="../globals.html">Globals</a>
				</li>
				<li>
					<a href="wyvernnftasset.html">WyvernNFTAsset</a>
				</li>
			</ul>
			<h1>Interface WyvernNFTAsset</h1>
		</div>
	</div>
</header>
<div class="container container-main">
	<div class="row">
		<div class="col-8 col-content">
			<section class="tsd-panel tsd-hierarchy">
				<h3>Hierarchy</h3>
				<ul class="tsd-hierarchy">
					<li>
						<span class="target">WyvernNFTAsset</span>
					</li>
				</ul>
			</section>
			<section class="tsd-panel-group tsd-index-group">
				<h2>Index</h2>
				<section class="tsd-panel tsd-index-panel">
					<div class="tsd-index-content">
						<section class="tsd-index-section ">
							<h3>Properties</h3>
							<ul class="tsd-index-list">
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="wyvernnftasset.html#address" class="tsd-kind-icon">address</a></li>
								<li class="tsd-kind-property tsd-parent-kind-interface"><a href="wyvernnftasset.html#id" class="tsd-kind-icon">id</a></li>
							</ul>
						</section>
					</div>
				</section>
			</section>
			<section class="tsd-panel-group tsd-member-group ">
				<h2>Properties</h2>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="address" class="tsd-anchor"></a>
					<h3>address</h3>
					<div class="tsd-signature tsd-kind-icon">address<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L184">types.ts:184</a></li>
						</ul>
					</aside>
				</section>
				<section class="tsd-panel tsd-member tsd-kind-property tsd-parent-kind-interface">
					<a name="id" class="tsd-anchor"></a>
					<h3>id</h3>
					<div class="tsd-signature tsd-kind-icon">id<span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div>
					<aside class="tsd-sources">
						<ul>
							<li>Defined in <a href="https://github.com/ProjectOpenSea/opensea-js/blob/f0e42f8/src/types.ts#L183">types.ts:183</a></li>
						</ul>
					</aside>
				</section>
			</section>
		</div>
		<div class="col-4 col-menu menu-sticky-wrap menu-highlight">
			<nav class="tsd-navigation primary">
				<ul>
					<li class="globals  ">
						<a href="../globals.html"><em>Globals</em></a>
					</li>
				</ul>
			</nav>
			<nav class="tsd-navigation secondary menu-sticky">
				<ul class="before-current">
				</ul>
				<ul class="current">
					<li class="current tsd-kind-interface">
						<a href="wyvernnftasset.html" class="tsd-kind-icon">WyvernNFTAsset</a>
						<ul>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="wyvernnftasset.html#address" class="tsd-kind-icon">address</a>
							</li>
							<li class=" tsd-kind-property tsd-parent-kind-interface">
								<a href="wyvernnftasset.html#id" class="tsd-kind-icon">id</a>
							</li>
						</ul>
					</li>
				</ul>
				<ul class="after-current">
				</ul>
			</nav>
		</div>
	</div>
</div>
<footer class="with-border-bottom">
	<div class="container">
		<h2>Legend</h2>
		<div class="tsd-legend-group">
			<ul class="tsd-legend">
				<li class="tsd-kind-module"><span class="tsd-kind-icon">Module</span></li>
				<li class="tsd-kind-object-literal"><span class="tsd-kind-icon">Object literal</span></li>
				<li class="tsd-kind-variable"><span class="tsd-kind-icon">Variable</span></li>
				<li class="tsd-kind-function"><span class="tsd-kind-icon">Function</span></li>
				<li class="tsd-kind-function tsd-has-type-parameter"><span class="tsd-kind-icon">Function with type parameter</span></li>
				<li class="tsd-kind-index-signature"><span class="tsd-kind-icon">Index signature</span></li>
				<li class="tsd-kind-type-alias"><span class="tsd-kind-icon">Type alias</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-enum"><span class="tsd-kind-icon">Enumeration</span></li>
				<li class="tsd-kind-enum-member"><span class="tsd-kind-icon">Enumeration member</span></li>
				<li class="tsd-kind-property tsd-parent-kind-enum"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-enum"><span class="tsd-kind-icon">Method</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-interface"><span class="tsd-kind-icon">Interface</span></li>
				<li class="tsd-kind-interface tsd-has-type-parameter"><span class="tsd-kind-icon">Interface with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-interface"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-interface"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-class"><span class="tsd-kind-icon">Class</span></li>
				<li class="tsd-kind-class tsd-has-type-parameter"><span class="tsd-kind-icon">Class with type parameter</span></li>
				<li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class"><span class="tsd-kind-icon">Property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class"><span class="tsd-kind-icon">Accessor</span></li>
				<li class="tsd-kind-index-signature tsd-parent-kind-class"><span class="tsd-kind-icon">Index signature</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-constructor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited constructor</span></li>
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-protected"><span class="tsd-kind-icon">Protected accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li>
				<li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li>
				<li class="tsd-kind-accessor tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private accessor</span></li>
			</ul>
			<ul class="tsd-legend">
				<li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li>
				<li class="tsd-kind-call-signature tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li>
			</ul>
		</div>
	</div>
</footer>
<div class="container tsd-generator">
	<p>Generated using <a href="http://typedoc.org/" target="_blank">TypeDoc</a></p>
</div>
<div class="overlay"></div>
<script src="../assets/js/main.js"></script>
<script>if (location.protocol == 'file:') document.write('<script src="../assets/js/search.js"><' + '/script>');</script>
</body>
</html>
'''
'''--- lib/abi/CanonicalWETH.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const CanonicalWETH: PartialReadonlyContractAbi;

'''
'''--- lib/abi/CanonicalWETH.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CanonicalWETH = void 0;
exports.CanonicalWETH = [{ 'constant': true, 'inputs': [], 'name': 'name', 'outputs': [{ 'name': '', 'type': 'string' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': 'guy', 'type': 'address' }, { 'name': 'wad', 'type': 'uint256' }], 'name': 'approve', 'outputs': [{ 'name': '', 'type': 'bool' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'totalSupply', 'outputs': [{ 'name': '', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': 'src', 'type': 'address' }, { 'name': 'dst', 'type': 'address' }, { 'name': 'wad', 'type': 'uint256' }], 'name': 'transferFrom', 'outputs': [{ 'name': '', 'type': 'bool' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': 'wad', 'type': 'uint256' }], 'name': 'withdraw', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'decimals', 'outputs': [{ 'name': '', 'type': 'uint8' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '', 'type': 'address' }], 'name': 'balanceOf', 'outputs': [{ 'name': '', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'symbol', 'outputs': [{ 'name': '', 'type': 'string' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': 'dst', 'type': 'address' }, { 'name': 'wad', 'type': 'uint256' }], 'name': 'transfer', 'outputs': [{ 'name': '', 'type': 'bool' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [], 'name': 'deposit', 'outputs': [], 'payable': true, 'stateMutability': 'payable', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '', 'type': 'address' }, { 'name': '', 'type': 'address' }], 'name': 'allowance', 'outputs': [{ 'name': '', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'payable': true, 'stateMutability': 'payable', 'type': 'fallback' }, { 'anonymous': false, 'inputs': [{ 'indexed': true, 'name': 'src', 'type': 'address' }, { 'indexed': true, 'name': 'guy', 'type': 'address' }, { 'indexed': false, 'name': 'wad', 'type': 'uint256' }], 'name': 'Approval', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': true, 'name': 'src', 'type': 'address' }, { 'indexed': true, 'name': 'dst', 'type': 'address' }, { 'indexed': false, 'name': 'wad', 'type': 'uint256' }], 'name': 'Transfer', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': true, 'name': 'dst', 'type': 'address' }, { 'indexed': false, 'name': 'wad', 'type': 'uint256' }], 'name': 'Deposit', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': true, 'name': 'src', 'type': 'address' }, { 'indexed': false, 'name': 'wad', 'type': 'uint256' }], 'name': 'Withdrawal', 'type': 'event' }];
//# sourceMappingURL=CanonicalWETH.js.map
'''
'''--- lib/abi/CheezeWizardsBasicTournament.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const CheezeWizardsBasicTournament: PartialReadonlyContractAbi;

'''
'''--- lib/abi/CheezeWizardsBasicTournament.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheezeWizardsBasicTournament = void 0;
exports.CheezeWizardsBasicTournament = [{ "constant": true, "inputs": [], "name": "cfoAddress", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "ceoAddress", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "pauseDuration", "type": "uint256" }], "name": "pause", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "newCfo", "type": "address" }], "name": "setCfo", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "duelResolver", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "newCeo", "type": "address" }], "name": "setCeo", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "newCoo", "type": "address" }], "name": "setCoo", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "powerScale", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "cooAddress", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "isPaused", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "inputs": [{ "name": "cooAddress_", "type": "address" }, { "name": "duelResolver_", "type": "address" }, { "name": "powerScale_", "type": "uint256" }, { "name": "tournamentStartBlock_", "type": "uint256" }, { "name": "admissionDuration_", "type": "uint256" }, { "name": "revivalDuration_", "type": "uint256" }, { "name": "ascensionDuration_", "type": "uint256" }, { "name": "fightDuration_", "type": "uint256" }, { "name": "cullingDuration_", "type": "uint256" }, { "name": "blueMoldBasePower_", "type": "uint256" }, { "name": "sessionsBetweenMoldDoubling_", "type": "uint256" }, { "name": "duelTimeoutBlocks_", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "payable": true, "stateMutability": "payable", "type": "fallback" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "duelId", "type": "bytes32" }, { "indexed": false, "name": "wizardId1", "type": "uint256" }, { "indexed": false, "name": "wizardId2", "type": "uint256" }, { "indexed": false, "name": "timeoutBlock", "type": "uint256" }, { "indexed": false, "name": "isAscensionBattle", "type": "bool" }], "name": "DuelStart", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "duelId", "type": "bytes32" }, { "indexed": false, "name": "wizardId1", "type": "uint256" }, { "indexed": false, "name": "wizardId2", "type": "uint256" }, { "indexed": false, "name": "moveSet1", "type": "bytes32" }, { "indexed": false, "name": "moveSet2", "type": "bytes32" }, { "indexed": false, "name": "power1", "type": "uint256" }, { "indexed": false, "name": "power2", "type": "uint256" }], "name": "DuelEnd", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "duelId", "type": "bytes32" }, { "indexed": false, "name": "wizardId1", "type": "uint256" }, { "indexed": false, "name": "wizardId2", "type": "uint256" }, { "indexed": false, "name": "power1", "type": "uint256" }, { "indexed": false, "name": "power2", "type": "uint256" }], "name": "DuelTimeOut", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "wizardId", "type": "uint256" }], "name": "WizardElimination", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "wizardId", "type": "uint256" }], "name": "AscensionStart", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "wizardId1", "type": "uint256" }, { "indexed": false, "name": "wizardId2", "type": "uint256" }], "name": "AscensionPairUp", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "wizardId", "type": "uint256" }, { "indexed": false, "name": "power", "type": "uint256" }], "name": "AscensionComplete", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "wizId", "type": "uint256" }, { "indexed": false, "name": "power", "type": "uint256" }], "name": "Revive", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "givingWizId", "type": "uint256" }, { "indexed": false, "name": "receivingWizId", "type": "uint256" }, { "indexed": false, "name": "amountGifted", "type": "uint256" }], "name": "PowerGifted", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "claimingWinnerId", "type": "uint256" }, { "indexed": false, "name": "prizeAmount", "type": "uint256" }], "name": "PrizeClaimed", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "pauseEndingBlock", "type": "uint256" }], "name": "Paused", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "previousCeo", "type": "address" }, { "indexed": false, "name": "newCeo", "type": "address" }], "name": "CEOTransferred", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "previousCoo", "type": "address" }, { "indexed": false, "name": "newCoo", "type": "address" }], "name": "COOTransferred", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "previousCfo", "type": "address" }, { "indexed": false, "name": "newCfo", "type": "address" }], "name": "CFOTransferred", "type": "event" }, { "constant": true, "inputs": [{ "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "isActive", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "wizardId", "type": "uint256" }], "name": "getWizard", "outputs": [{ "name": "affinity", "type": "uint256" }, { "name": "power", "type": "uint256" }, { "name": "maxPower", "type": "uint256" }, { "name": "nonce", "type": "uint256" }, { "name": "currentDuel", "type": "bytes32" }, { "name": "ascending", "type": "bool" }, { "name": "ascensionOpponent", "type": "uint256" }, { "name": "molded", "type": "bool" }, { "name": "ready", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "wizardId", "type": "uint256" }], "name": "wizardFingerprint", "outputs": [{ "name": "", "type": "bytes32" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "wizardId", "type": "uint256" }], "name": "isReady", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "wizardIds", "type": "uint256[]" }, { "name": "powers", "type": "uint88[]" }], "name": "enterWizards", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [{ "name": "wizardId", "type": "uint256" }], "name": "revive", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [{ "name": "wizardId", "type": "uint256" }], "name": "updateAffinity", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "wizardId", "type": "uint256" }], "name": "startAscension", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "wizardId", "type": "uint256" }, { "name": "commitment", "type": "bytes32" }], "name": "challengeAscending", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "commitment", "type": "bytes32" }], "name": "acceptAscensionChallenge", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "completeAscension", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "committingWizardId", "type": "uint256" }, { "name": "otherWizardId", "type": "uint256" }, { "name": "commitment", "type": "bytes32" }], "name": "oneSidedCommit", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "wizardId", "type": "uint256" }], "name": "cancelCommitment", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "wizardId1", "type": "uint256" }, { "name": "wizardId2", "type": "uint256" }, { "name": "commit1", "type": "bytes32" }, { "name": "commit2", "type": "bytes32" }, { "name": "sig1", "type": "bytes" }, { "name": "sig2", "type": "bytes" }], "name": "doubleCommit", "outputs": [{ "name": "duelId", "type": "bytes32" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "committingWizardId", "type": "uint256" }, { "name": "commit", "type": "bytes32" }, { "name": "moveSet", "type": "bytes32" }, { "name": "salt", "type": "bytes32" }, { "name": "otherWizardId", "type": "uint256" }, { "name": "otherCommit", "type": "bytes32" }], "name": "oneSidedReveal", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "wizardId1", "type": "uint256" }, { "name": "wizardId2", "type": "uint256" }, { "name": "commit1", "type": "bytes32" }, { "name": "commit2", "type": "bytes32" }, { "name": "moveSet1", "type": "bytes32" }, { "name": "moveSet2", "type": "bytes32" }, { "name": "salt1", "type": "bytes32" }, { "name": "salt2", "type": "bytes32" }], "name": "doubleReveal", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "wizardId1", "type": "uint256" }, { "name": "wizardId2", "type": "uint256" }], "name": "resolveTimedOutDuel", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "sendingWizardId", "type": "uint256" }, { "name": "receivingWizardId", "type": "uint256" }], "name": "giftPower", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "wizardIds", "type": "uint256[]" }, { "name": "survivor", "type": "uint256" }], "name": "cullMoldedWithSurvivor", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "moldyWizardIds", "type": "uint256[]" }], "name": "cullMoldedWithMolded", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "wizardIds", "type": "uint256[]" }], "name": "cullTiredWizards", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "claimingWinnerId", "type": "uint256" }], "name": "claimTheBigCheeze", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "claimingWinnerId", "type": "uint256" }, { "name": "allWinners", "type": "uint256[]" }], "name": "claimSharedWinnings", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "destroy", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }];
//# sourceMappingURL=CheezeWizardsBasicTournament.js.map
'''
'''--- lib/abi/CheezeWizardsGuild.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const CheezeWizardsGuild: PartialReadonlyContractAbi;

'''
'''--- lib/abi/CheezeWizardsGuild.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheezeWizardsGuild = void 0;
exports.CheezeWizardsGuild = [{ "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "wizardId", "type": "uint256" }], "name": "approve", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "closeSeries", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "wizardIds", "type": "uint256[]" }, { "name": "powers", "type": "uint88[]" }, { "name": "affinities", "type": "uint8[]" }, { "name": "owner", "type": "address" }], "name": "mintReservedWizards", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "powers", "type": "uint88[]" }, { "name": "affinities", "type": "uint8[]" }, { "name": "owner", "type": "address" }], "name": "mintWizards", "outputs": [{ "name": "wizardIds", "type": "uint256[]" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "minter", "type": "address" }, { "name": "reservedIds", "type": "uint256" }], "name": "openSeries", "outputs": [{ "name": "seriesId", "type": "uint64" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "wizardId", "type": "uint256" }], "name": "safeTransferFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "wizardId", "type": "uint256" }, { "name": "_data", "type": "bytes" }], "name": "safeTransferFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "wizardId", "type": "uint256" }, { "name": "newAffinity", "type": "uint8" }], "name": "setAffinity", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "approved", "type": "bool" }], "name": "setApprovalForAll", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "newCeo", "type": "address" }], "name": "setCeo", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "newCfo", "type": "address" }], "name": "setCfo", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "newCoo", "type": "address" }], "name": "setCoo", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "wizardIds", "type": "uint256[]" }, { "name": "metadata", "type": "bytes32[]" }], "name": "setMetadata", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "wizardId", "type": "uint256" }], "name": "transferFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "name": "_cooAddress", "type": "address" }], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "seriesIndex", "type": "uint64" }, { "indexed": false, "name": "reservedIds", "type": "uint256" }], "name": "SeriesOpen", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "seriesIndex", "type": "uint64" }], "name": "SeriesClose", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "wizardId", "type": "uint256" }, { "indexed": false, "name": "metadata", "type": "bytes32" }], "name": "MetadataSet", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "from", "type": "address" }, { "indexed": false, "name": "to", "type": "address" }, { "indexed": false, "name": "wizardId", "type": "uint256" }], "name": "Transfer", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "owner", "type": "address" }, { "indexed": false, "name": "approved", "type": "address" }, { "indexed": false, "name": "wizardId", "type": "uint256" }], "name": "Approval", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "owner", "type": "address" }, { "indexed": false, "name": "operator", "type": "address" }, { "indexed": false, "name": "approved", "type": "bool" }], "name": "ApprovalForAll", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "wizardId", "type": "uint256" }, { "indexed": false, "name": "affinity", "type": "uint8" }, { "indexed": false, "name": "innatePower", "type": "uint256" }], "name": "WizardConjured", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "wizardId", "type": "uint256" }, { "indexed": false, "name": "affinity", "type": "uint8" }], "name": "WizardAffinityAssigned", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "previousCeo", "type": "address" }, { "indexed": false, "name": "newCeo", "type": "address" }], "name": "CEOTransferred", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "previousCoo", "type": "address" }, { "indexed": false, "name": "newCoo", "type": "address" }], "name": "COOTransferred", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "previousCfo", "type": "address" }, { "indexed": false, "name": "newCfo", "type": "address" }], "name": "CFOTransferred", "type": "event" }, { "constant": true, "inputs": [], "name": "_INTERFACE_ID_ERC165", "outputs": [{ "name": "", "type": "bytes4" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "_INTERFACE_ID_INVALID", "outputs": [{ "name": "", "type": "bytes4" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "ceoAddress", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "cfoAddress", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "cooAddress", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "_contract", "type": "address" }, { "name": "_interfaceId", "type": "bytes4" }], "name": "doesContractImplementInterface", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "wizardId", "type": "uint256" }], "name": "getApproved", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "id", "type": "uint256" }], "name": "getWizard", "outputs": [{ "name": "owner", "type": "address" }, { "name": "innatePower", "type": "uint88" }, { "name": "affinity", "type": "uint8" }, { "name": "metadata", "type": "bytes32" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "owner", "type": "address" }, { "name": "operator", "type": "address" }], "name": "isApprovedForAll", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "spender", "type": "address" }, { "name": "tokenId", "type": "uint256" }], "name": "isApprovedOrOwner", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "wizardId", "type": "uint256" }], "name": "ownerOf", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "wizardId", "type": "uint256" }, { "name": "hash", "type": "bytes32" }, { "name": "sig", "type": "bytes" }], "name": "verifySignature", "outputs": [], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "wizardId1", "type": "uint256" }, { "name": "wizardId2", "type": "uint256" }, { "name": "hash1", "type": "bytes32" }, { "name": "hash2", "type": "bytes32" }, { "name": "sig1", "type": "bytes" }, { "name": "sig2", "type": "bytes" }], "name": "verifySignatures", "outputs": [], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "wizardsById", "outputs": [{ "name": "affinity", "type": "uint8" }, { "name": "innatePower", "type": "uint88" }, { "name": "owner", "type": "address" }, { "name": "metadata", "type": "bytes32" }], "payable": false, "stateMutability": "view", "type": "function" }];
//# sourceMappingURL=CheezeWizardsGuild.js.map
'''
'''--- lib/abi/DecentralandEstates.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const DecentralandEstates: PartialReadonlyContractAbi;

'''
'''--- lib/abi/DecentralandEstates.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecentralandEstates = void 0;
exports.DecentralandEstates = [{ "constant": true, "inputs": [{ "name": "_interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "name", "outputs": [{ "name": "", "type": "string" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_name", "type": "string" }, { "name": "_symbol", "type": "string" }, { "name": "_registry", "type": "address" }], "name": "initialize", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_tokenId", "type": "uint256" }], "name": "getApproved", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_to", "type": "address" }, { "name": "_tokenId", "type": "uint256" }], "name": "approve", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "landIdEstate", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_operator", "type": "address" }, { "name": "_from", "type": "address" }, { "name": "_tokenId", "type": "uint256" }, { "name": "_data", "type": "bytes" }], "name": "onERC721Received", "outputs": [{ "name": "", "type": "bytes4" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "estateId", "type": "uint256" }], "name": "getFingerprint", "outputs": [{ "name": "result", "type": "bytes32" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "totalSupply", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_from", "type": "address" }, { "name": "_to", "type": "address" }, { "name": "_tokenId", "type": "uint256" }], "name": "transferFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "estateId", "type": "uint256" }, { "name": "landId", "type": "uint256" }, { "name": "data", "type": "string" }], "name": "updateLandData", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_owner", "type": "address" }, { "name": "_index", "type": "uint256" }], "name": "tokenOfOwnerByIndex", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }, { "name": "", "type": "uint256" }], "name": "estateLandIds", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "estateId", "type": "uint256" }, { "name": "landIds", "type": "uint256[]" }, { "name": "destinatary", "type": "address" }], "name": "transferManyLands", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "estateId", "type": "uint256" }, { "name": "landIds", "type": "uint256[]" }, { "name": "data", "type": "string" }], "name": "updateManyLandData", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_from", "type": "address" }, { "name": "_to", "type": "address" }, { "name": "_tokenId", "type": "uint256" }], "name": "safeTransferFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_name", "type": "string" }, { "name": "_symbol", "type": "string" }], "name": "initialize", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_tokenId", "type": "uint256" }], "name": "exists", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "_index", "type": "uint256" }], "name": "tokenByIndex", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_registry", "type": "address" }], "name": "setLANDRegistry", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "estateId", "type": "uint256" }, { "name": "metadata", "type": "string" }], "name": "updateMetadata", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "ping", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_tokenId", "type": "uint256" }], "name": "ownerOf", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "operator", "type": "address" }, { "name": "estateId", "type": "uint256" }], "name": "isUpdateAuthorized", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "_owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "estateIds", "type": "uint256[]" }], "name": "safeTransferManyFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "registry", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "initialize", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "estateId", "type": "uint256" }, { "name": "fingerprint", "type": "bytes" }], "name": "verifyFingerprint", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "symbol", "outputs": [{ "name": "", "type": "string" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "updateOperator", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }, { "name": "", "type": "uint256" }], "name": "estateLandIndex", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_to", "type": "address" }, { "name": "_approved", "type": "bool" }], "name": "setApprovalForAll", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "estateId", "type": "uint256" }, { "name": "landId", "type": "uint256" }, { "name": "destinatary", "type": "address" }], "name": "transferLand", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "estateId", "type": "uint256" }], "name": "getMetadata", "outputs": [{ "name": "", "type": "string" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "estateId", "type": "uint256" }, { "name": "operator", "type": "address" }], "name": "setUpdateOperator", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_from", "type": "address" }, { "name": "_to", "type": "address" }, { "name": "_tokenId", "type": "uint256" }, { "name": "_data", "type": "bytes" }], "name": "safeTransferFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "landId", "type": "uint256" }], "name": "getLandEstateId", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "contractName", "type": "string" }, { "name": "migrationId", "type": "string" }], "name": "isMigrated", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_sender", "type": "address" }], "name": "initialize", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_tokenId", "type": "uint256" }], "name": "tokenURI", "outputs": [{ "name": "", "type": "string" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "metadata", "type": "string" }], "name": "mint", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "estateIds", "type": "uint256[]" }, { "name": "data", "type": "bytes" }], "name": "safeTransferManyFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_owner", "type": "address" }, { "name": "_operator", "type": "address" }], "name": "isApprovedForAll", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "estateId", "type": "uint256" }], "name": "getEstateSize", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "previousOwner", "type": "address" }, { "indexed": true, "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_from", "type": "address" }, { "indexed": true, "name": "_to", "type": "address" }, { "indexed": true, "name": "_tokenId", "type": "uint256" }], "name": "Transfer", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_owner", "type": "address" }, { "indexed": true, "name": "_approved", "type": "address" }, { "indexed": true, "name": "_tokenId", "type": "uint256" }], "name": "Approval", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_owner", "type": "address" }, { "indexed": true, "name": "_operator", "type": "address" }, { "indexed": false, "name": "_approved", "type": "bool" }], "name": "ApprovalForAll", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_owner", "type": "address" }, { "indexed": true, "name": "_estateId", "type": "uint256" }, { "indexed": false, "name": "_data", "type": "string" }], "name": "CreateEstate", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_estateId", "type": "uint256" }, { "indexed": true, "name": "_landId", "type": "uint256" }], "name": "AddLand", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_estateId", "type": "uint256" }, { "indexed": true, "name": "_landId", "type": "uint256" }, { "indexed": true, "name": "_destinatary", "type": "address" }], "name": "RemoveLand", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_assetId", "type": "uint256" }, { "indexed": true, "name": "_holder", "type": "address" }, { "indexed": true, "name": "_operator", "type": "address" }, { "indexed": false, "name": "_data", "type": "string" }], "name": "Update", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_estateId", "type": "uint256" }, { "indexed": true, "name": "_operator", "type": "address" }], "name": "UpdateOperator", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_registry", "type": "address" }], "name": "SetLANDRegistry", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "contractName", "type": "string" }, { "indexed": false, "name": "migrationId", "type": "string" }], "name": "Migrated", "type": "event" }];
//# sourceMappingURL=DecentralandEstates.js.map
'''
'''--- lib/abi/ERC1155.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const ERC1155: PartialReadonlyContractAbi;

'''
'''--- lib/abi/ERC1155.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERC1155 = void 0;
exports.ERC1155 = [
    {
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "fallback"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            },
            {
                "indexed": true,
                "name": "_owner",
                "type": "address"
            },
            {
                "indexed": true,
                "name": "_spender",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "_value",
                "type": "uint256"
            }
        ],
        "name": "Approval",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "_block",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "_storage",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "_oldContract",
                "type": "address"
            }
        ],
        "name": "Initialize",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "_block",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "_nextContract",
                "type": "address"
            }
        ],
        "name": "Retire",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            },
            {
                "indexed": true,
                "name": "_from",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "_data",
                "type": "string"
            }
        ],
        "name": "Log",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "UpdateDecimals",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "UpdateName",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "UpdateSymbol",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "_uri",
                "type": "string"
            }
        ],
        "name": "SetURI",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            },
            {
                "indexed": true,
                "name": "_from",
                "type": "address"
            },
            {
                "indexed": true,
                "name": "_to",
                "type": "address"
            }
        ],
        "name": "Assign",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            },
            {
                "indexed": true,
                "name": "_creator",
                "type": "address"
            }
        ],
        "name": "AcceptAssignment",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            },
            {
                "indexed": true,
                "name": "_creator",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "_isNonFungible",
                "type": "bool"
            }
        ],
        "name": "Create",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "_value",
                "type": "uint256"
            }
        ],
        "name": "Mint",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "UpdateMaxMeltFee",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "UpdateMeltFee",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_owner",
                "type": "address"
            },
            {
                "indexed": true,
                "name": "_operator",
                "type": "address"
            },
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "_approved",
                "type": "bool"
            }
        ],
        "name": "OperatorApproval",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            },
            {
                "indexed": true,
                "name": "_from",
                "type": "address"
            },
            {
                "indexed": true,
                "name": "_to",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "_value",
                "type": "uint256"
            }
        ],
        "name": "Transfer",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            },
            {
                "indexed": true,
                "name": "_sender",
                "type": "address"
            },
            {
                "indexed": true,
                "name": "_feeId",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "_feeValue",
                "type": "uint256"
            }
        ],
        "name": "TransferFee",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "UpdateMaxTransferFee",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "UpdateTransferable",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "UpdateTransferFee",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            },
            {
                "indexed": true,
                "name": "_account",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "_whitelisted",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "_on",
                "type": "bool"
            }
        ],
        "name": "Whitelist",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            },
            {
                "indexed": true,
                "name": "_owner",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "_value",
                "type": "uint256"
            }
        ],
        "name": "Melt",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_id",
                "type": "uint256"
            },
            {
                "indexed": true,
                "name": "_sender",
                "type": "address"
            }
        ],
        "name": "DeployERCAdapter",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_tradeId",
                "type": "uint256"
            },
            {
                "indexed": true,
                "name": "_firstParty",
                "type": "address"
            },
            {
                "indexed": true,
                "name": "_secondParty",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "_escrowedEnjFirstParty",
                "type": "uint256"
            }
        ],
        "name": "CreateTrade",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_tradeId",
                "type": "uint256"
            },
            {
                "indexed": true,
                "name": "_firstParty",
                "type": "address"
            },
            {
                "indexed": true,
                "name": "_secondParty",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "_receivedEnjFirstParty",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "_changeEnjFirstParty",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "_receivedEnjSecondParty",
                "type": "uint256"
            }
        ],
        "name": "CompleteTrade",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "name": "_tradeId",
                "type": "uint256"
            },
            {
                "indexed": true,
                "name": "_firstParty",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "_receivedEnjFirstParty",
                "type": "uint256"
            }
        ],
        "name": "CancelTrade",
        "type": "event"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_interfaceID",
                "type": "bytes4"
            }
        ],
        "name": "supportsInterface",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "payable": false,
        "stateMutability": "pure",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_name",
                "type": "string"
            },
            {
                "name": "_totalSupply",
                "type": "uint256"
            },
            {
                "name": "_initialReserve",
                "type": "uint256"
            },
            {
                "name": "_supplyModel",
                "type": "address"
            },
            {
                "name": "_meltValue",
                "type": "uint256"
            },
            {
                "name": "_meltFeeRatio",
                "type": "uint16"
            },
            {
                "name": "_transferable",
                "type": "uint8"
            },
            {
                "name": "_transferFeeSettings",
                "type": "uint256[3]"
            },
            {
                "name": "_nonFungible",
                "type": "bool"
            }
        ],
        "name": "create",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_initialReserve",
                "type": "uint256"
            }
        ],
        "name": "minMeltValue",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_to",
                "type": "address[]"
            },
            {
                "name": "_values",
                "type": "uint256[]"
            }
        ],
        "name": "mintFungibles",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_to",
                "type": "address[]"
            }
        ],
        "name": "mintNonFungibles",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_to",
                "type": "address[]"
            },
            {
                "name": "_data",
                "type": "uint128[]"
            }
        ],
        "name": "mintNonFungiblesWithData",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "reserve",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_value",
                "type": "uint128"
            }
        ],
        "name": "releaseReserve",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_name",
                "type": "string"
            }
        ],
        "name": "updateName",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_creator",
                "type": "address"
            }
        ],
        "name": "assign",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "acceptAssignment",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_account",
                "type": "address"
            },
            {
                "name": "_whitelisted",
                "type": "address"
            },
            {
                "name": "_on",
                "type": "bool"
            }
        ],
        "name": "setWhitelisted",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_transferable",
                "type": "uint8"
            }
        ],
        "name": "setTransferable",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_fee",
                "type": "uint16"
            }
        ],
        "name": "setMeltFee",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_fee",
                "type": "uint16"
            }
        ],
        "name": "decreaseMaxMeltFee",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_fee",
                "type": "uint256"
            }
        ],
        "name": "setTransferFee",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_fee",
                "type": "uint256"
            }
        ],
        "name": "decreaseMaxTransferFee",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_decimals",
                "type": "uint8"
            },
            {
                "name": "_symbol",
                "type": "string"
            }
        ],
        "name": "deployERC20Adapter",
        "outputs": [
            {
                "name": "",
                "type": "address"
            }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_symbol",
                "type": "string"
            }
        ],
        "name": "deployERC721Adapter",
        "outputs": [
            {
                "name": "",
                "type": "address"
            }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_data",
                "type": "string"
            }
        ],
        "name": "addLog",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "typeCount",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_index",
                "type": "uint256"
            }
        ],
        "name": "typeByIndex",
        "outputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "nonFungibleTypeCount",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_index",
                "type": "uint256"
            }
        ],
        "name": "nonFungibleTypeByIndex",
        "outputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "fungibleTypeCount",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_index",
                "type": "uint256"
            }
        ],
        "name": "fungibleTypeByIndex",
        "outputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "typeData",
        "outputs": [
            {
                "name": "_name",
                "type": "string"
            },
            {
                "name": "_creator",
                "type": "address"
            },
            {
                "name": "_meltValue",
                "type": "uint256"
            },
            {
                "name": "_meltFeeRatio",
                "type": "uint16"
            },
            {
                "name": "_meltFeeMaxRatio",
                "type": "uint16"
            },
            {
                "name": "_supplyModel",
                "type": "address"
            },
            {
                "name": "_totalSupply",
                "type": "uint256"
            },
            {
                "name": "_circulatingSupply",
                "type": "uint256"
            },
            {
                "name": "_reserve",
                "type": "uint256"
            },
            {
                "name": "_transferable",
                "type": "uint8"
            },
            {
                "name": "_transferFeeData",
                "type": "uint256[4]"
            },
            {
                "name": "_nonFungible",
                "type": "bool"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "transferSettings",
        "outputs": [
            {
                "name": "_transferable",
                "type": "uint8"
            },
            {
                "name": "_transferFeeType",
                "type": "uint8"
            },
            {
                "name": "_transferFeeCurrency",
                "type": "uint256"
            },
            {
                "name": "_transferFeeValue",
                "type": "uint256"
            },
            {
                "name": "_transferFeeMaxValue",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_creator",
                "type": "address"
            }
        ],
        "name": "isCreatorOf",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_account",
                "type": "address"
            },
            {
                "name": "_whitelisted",
                "type": "address"
            }
        ],
        "name": "whitelisted",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "name",
        "outputs": [
            {
                "name": "",
                "type": "string"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "totalSupply",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "mintableSupply",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "circulatingSupply",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "name": "balanceOf",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "decimals",
        "outputs": [
            {
                "name": "",
                "type": "uint8"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "symbol",
        "outputs": [
            {
                "name": "",
                "type": "string"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "getERC20Adapter",
        "outputs": [
            {
                "name": "",
                "type": "address"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "getERC721Adapter",
        "outputs": [
            {
                "name": "",
                "type": "address"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "name": "transfer",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_value",
                "type": "uint256"
            },
            {
                "name": "_data",
                "type": "bytes"
            }
        ],
        "name": "safeTransfer",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_value",
                "type": "uint256"
            },
            {
                "name": "_msgSender",
                "type": "address"
            }
        ],
        "name": "transferAdapter",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "name": "transferFrom",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_value",
                "type": "uint256"
            },
            {
                "name": "_data",
                "type": "bytes"
            }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_value",
                "type": "uint256"
            },
            {
                "name": "_msgSender",
                "type": "address"
            }
        ],
        "name": "transferFromAdapter",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_ids",
                "type": "uint256[]"
            },
            {
                "name": "_values",
                "type": "uint256[]"
            }
        ],
        "name": "batchTransfer",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_ids",
                "type": "uint256[]"
            },
            {
                "name": "_values",
                "type": "uint256[]"
            },
            {
                "name": "_data",
                "type": "bytes"
            }
        ],
        "name": "safeBatchTransfer",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_ids",
                "type": "uint256[]"
            },
            {
                "name": "_values",
                "type": "uint256[]"
            }
        ],
        "name": "batchTransferFrom",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_ids",
                "type": "uint256[]"
            },
            {
                "name": "_values",
                "type": "uint256[]"
            },
            {
                "name": "_data",
                "type": "bytes"
            }
        ],
        "name": "safeBatchTransferFrom",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_to",
                "type": "address[]"
            },
            {
                "name": "_ids",
                "type": "uint256[]"
            },
            {
                "name": "_values",
                "type": "uint256[]"
            }
        ],
        "name": "multicastTransfer",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_to",
                "type": "address[]"
            },
            {
                "name": "_ids",
                "type": "uint256[]"
            },
            {
                "name": "_values",
                "type": "uint256[]"
            },
            {
                "name": "_data",
                "type": "bytes"
            }
        ],
        "name": "safeMulticastTransfer",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_from",
                "type": "address[]"
            },
            {
                "name": "_to",
                "type": "address[]"
            },
            {
                "name": "_ids",
                "type": "uint256[]"
            },
            {
                "name": "_values",
                "type": "uint256[]"
            }
        ],
        "name": "multicastTransferFrom",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_spender",
                "type": "address"
            }
        ],
        "name": "allowance",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_currentValue",
                "type": "uint256"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "name": "approve",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_currentValue",
                "type": "uint256"
            },
            {
                "name": "_value",
                "type": "uint256"
            },
            {
                "name": "_msgSender",
                "type": "address"
            }
        ],
        "name": "approveAdapter",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_ids",
                "type": "uint256[]"
            },
            {
                "name": "_currentValues",
                "type": "uint256[]"
            },
            {
                "name": "_values",
                "type": "uint256[]"
            }
        ],
        "name": "batchApprove",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_operator",
                "type": "address"
            },
            {
                "name": "_ids",
                "type": "uint256[]"
            },
            {
                "name": "_approved",
                "type": "bool"
            }
        ],
        "name": "setApproval",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_operator",
                "type": "address"
            },
            {
                "name": "_approved",
                "type": "bool"
            }
        ],
        "name": "setApprovalForAll",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_operator",
                "type": "address"
            },
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_approved",
                "type": "bool"
            },
            {
                "name": "_msgSender",
                "type": "address"
            }
        ],
        "name": "setApprovalAdapter",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_operator",
                "type": "address"
            },
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "isApproved",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_operator",
                "type": "address"
            }
        ],
        "name": "isApprovedForAll",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_value",
                "type": "uint256"
            },
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            }
        ],
        "name": "transferFees",
        "outputs": [
            {
                "name": "_transferValue",
                "type": "uint256"
            },
            {
                "name": "_minTransferValue",
                "type": "uint256"
            },
            {
                "name": "_transferFeeCurrency",
                "type": "uint256"
            },
            {
                "name": "_fee",
                "type": "uint256"
            },
            {
                "name": "_maxFee",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_askingIds",
                "type": "uint256[]"
            },
            {
                "name": "_askingValues",
                "type": "uint128[]"
            },
            {
                "name": "_offeringIds",
                "type": "uint256[]"
            },
            {
                "name": "_offeringValues",
                "type": "uint128[]"
            },
            {
                "name": "_secondParty",
                "type": "address"
            }
        ],
        "name": "createTrade",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "tradeCompletable",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "completeTrade",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "cancelTrade",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_ids",
                "type": "uint256[]"
            },
            {
                "name": "_values",
                "type": "uint256[]"
            }
        ],
        "name": "melt",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "ownerOf",
        "outputs": [
            {
                "name": "",
                "type": "address"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_uri",
                "type": "string"
            }
        ],
        "name": "setURI",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "uri",
        "outputs": [
            {
                "name": "",
                "type": "string"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "nonFungibleCount",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_index",
                "type": "uint256"
            }
        ],
        "name": "nonFungibleByIndex",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_index",
                "type": "uint256"
            }
        ],
        "name": "nonFungibleOfOwnerByIndex",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            }
        ],
        "name": "isNonFungible",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "payable": false,
        "stateMutability": "pure",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_addr",
                "type": "address"
            }
        ],
        "name": "isContract",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_erc20ContractAddress",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "name": "releaseERC20",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "name": "releaseETH",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_erc721ContractAddress",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_token",
                "type": "uint256"
            }
        ],
        "name": "releaseERC721",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_erc1155ContractAddress",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "name": "releaseERC1155",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_storage",
                "type": "address"
            },
            {
                "name": "_oldContract",
                "type": "address"
            }
        ],
        "name": "initialize",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_nextContract",
                "type": "address"
            }
        ],
        "name": "retire",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    }
];
//# sourceMappingURL=ERC1155.js.map
'''
'''--- lib/abi/ERC20.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const ERC20: PartialReadonlyContractAbi;

'''
'''--- lib/abi/ERC20.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERC20 = void 0;
exports.ERC20 = [{ 'constant': true, 'inputs': [], 'name': 'name', 'outputs': [{ 'name': '', 'type': 'string' }], 'payable': false, 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_spender', 'type': 'address' }, { 'name': '_value', 'type': 'uint256' }], 'name': 'approve', 'outputs': [{ 'name': 'success', 'type': 'bool' }], 'payable': false, 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'totalSupply', 'outputs': [{ 'name': '', 'type': 'uint256' }], 'payable': false, 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_from', 'type': 'address' }, { 'name': '_to', 'type': 'address' }, { 'name': '_value', 'type': 'uint256' }], 'name': 'transferFrom', 'outputs': [{ 'name': 'success', 'type': 'bool' }], 'payable': false, 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'decimals', 'outputs': [{ 'name': '', 'type': 'uint8' }], 'payable': false, 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'version', 'outputs': [{ 'name': '', 'type': 'string' }], 'payable': false, 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_owner', 'type': 'address' }], 'name': 'balanceOf', 'outputs': [{ 'name': 'balance', 'type': 'uint256' }], 'payable': false, 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'symbol', 'outputs': [{ 'name': '', 'type': 'string' }], 'payable': false, 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_to', 'type': 'address' }, { 'name': '_value', 'type': 'uint256' }], 'name': 'transfer', 'outputs': [{ 'name': 'success', 'type': 'bool' }], 'payable': false, 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_spender', 'type': 'address' }, { 'name': '_value', 'type': 'uint256' }, { 'name': '_extraData', 'type': 'bytes' }], 'name': 'approveAndCall', 'outputs': [{ 'name': 'success', 'type': 'bool' }], 'payable': false, 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_owner', 'type': 'address' }, { 'name': '_spender', 'type': 'address' }], 'name': 'allowance', 'outputs': [{ 'name': 'remaining', 'type': 'uint256' }], 'payable': false, 'type': 'function' }, { 'inputs': [{ 'name': '_initialAmount', 'type': 'uint256' }, { 'name': '_tokenName', 'type': 'string' }, { 'name': '_decimalUnits', 'type': 'uint8' }, { 'name': '_tokenSymbol', 'type': 'string' }], 'type': 'constructor' }, { 'payable': false, 'type': 'fallback' }, { 'anonymous': false, 'inputs': [{ 'indexed': true, 'name': '_from', 'type': 'address' }, { 'indexed': true, 'name': '_to', 'type': 'address' }, { 'indexed': false, 'name': '_value', 'type': 'uint256' }], 'name': 'Transfer', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': true, 'name': '_owner', 'type': 'address' }, { 'indexed': true, 'name': '_spender', 'type': 'address' }, { 'indexed': false, 'name': '_value', 'type': 'uint256' }], 'name': 'Approval', 'type': 'event' }];
//# sourceMappingURL=ERC20.js.map
'''
'''--- lib/abi/ERC721v3.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const ERC721: PartialReadonlyContractAbi;

'''
'''--- lib/abi/ERC721v3.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERC721 = void 0;
exports.ERC721 = [
    {
        'constant': true,
        'inputs': [],
        'name': 'name',
        'outputs': [
            {
                'name': '',
                'type': 'string',
            },
        ],
        'payable': false,
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'constant': true,
        'inputs': [
            {
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'kittyIndexToApproved',
        'outputs': [
            {
                'name': '',
                'type': 'address',
            },
        ],
        'payable': false,
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'constant': true,
        'inputs': [
            {
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'partIndexToApproved',
        'outputs': [
            {
                'name': '',
                'type': 'address',
            },
        ],
        'payable': false,
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'constant': true,
        'inputs': [
            {
                'name': '',
                'type': 'address',
            },
            {
                'name': '',
                'type': 'uint256',
            },
        ],
        'name': 'allowed',
        'outputs': [
            {
                'name': '',
                'type': 'address',
            },
        ],
        'payable': false,
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'constant': true,
        'inputs': [
            {
                'name': '_tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'getApproved',
        'outputs': [
            {
                'name': '',
                'type': 'address',
            },
        ],
        'payable': false,
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'constant': false,
        'inputs': [
            {
                'name': '_to',
                'type': 'address',
            },
            {
                'name': '_tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'approve',
        'outputs': [],
        'payable': false,
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'constant': true,
        'inputs': [],
        'name': 'totalSupply',
        'outputs': [
            {
                'name': '',
                'type': 'uint256',
            },
        ],
        'payable': false,
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_tokenId",
                "type": "uint256"
            }
        ],
        "name": "transfer",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        'constant': false,
        'inputs': [
            {
                'name': '_from',
                'type': 'address',
            },
            {
                'name': '_to',
                'type': 'address',
            },
            {
                'name': '_tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'transferFrom',
        'outputs': [],
        'payable': false,
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'constant': true,
        'inputs': [
            {
                'name': '_owner',
                'type': 'address',
            },
            {
                'name': '_index',
                'type': 'uint256',
            },
        ],
        'name': 'tokenOfOwnerByIndex',
        'outputs': [
            {
                'name': '',
                'type': 'uint256',
            },
        ],
        'payable': false,
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'constant': false,
        'inputs': [
            {
                'name': '_from',
                'type': 'address',
            },
            {
                'name': '_to',
                'type': 'address',
            },
            {
                'name': '_tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'safeTransferFrom',
        'outputs': [],
        'payable': false,
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'constant': true,
        'inputs': [
            {
                'name': '_tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'exists',
        'outputs': [
            {
                'name': '',
                'type': 'bool',
            },
        ],
        'payable': false,
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'constant': true,
        'inputs': [
            {
                'name': '_index',
                'type': 'uint256',
            },
        ],
        'name': 'tokenByIndex',
        'outputs': [
            {
                'name': '',
                'type': 'uint256',
            },
        ],
        'payable': false,
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'constant': true,
        'inputs': [
            {
                'name': '_tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'ownerOf',
        'outputs': [
            {
                'name': '',
                'type': 'address',
            },
        ],
        'payable': false,
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'constant': true,
        'inputs': [
            {
                'name': '_owner',
                'type': 'address',
            },
        ],
        'name': 'balanceOf',
        'outputs': [
            {
                'name': '',
                'type': 'uint256',
            },
        ],
        'payable': false,
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'constant': true,
        'inputs': [],
        'name': 'symbol',
        'outputs': [
            {
                'name': '',
                'type': 'string',
            },
        ],
        'payable': false,
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'constant': false,
        'inputs': [
            {
                'name': '_to',
                'type': 'address',
            },
            {
                'name': '_approved',
                'type': 'bool',
            },
        ],
        'name': 'setApprovalForAll',
        'outputs': [],
        'payable': false,
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'constant': false,
        'inputs': [
            {
                'name': '_from',
                'type': 'address',
            },
            {
                'name': '_to',
                'type': 'address',
            },
            {
                'name': '_tokenId',
                'type': 'uint256',
            },
            {
                'name': '_data',
                'type': 'bytes',
            },
        ],
        'name': 'safeTransferFrom',
        'outputs': [],
        'payable': false,
        'stateMutability': 'nonpayable',
        'type': 'function',
    },
    {
        'constant': true,
        'inputs': [
            {
                'name': '_tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'tokenURI',
        'outputs': [
            {
                'name': '',
                'type': 'string',
            },
        ],
        'payable': false,
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'constant': true,
        'inputs': [
            {
                'name': '_owner',
                'type': 'address',
            },
            {
                'name': '_operator',
                'type': 'address',
            },
        ],
        'name': 'isApprovedForAll',
        'outputs': [
            {
                'name': '',
                'type': 'bool',
            },
        ],
        'payable': false,
        'stateMutability': 'view',
        'type': 'function',
    },
    {
        'inputs': [
            {
                'name': '_name',
                'type': 'string',
            },
            {
                'name': '_symbol',
                'type': 'string',
            },
        ],
        'payable': false,
        'stateMutability': 'nonpayable',
        'type': 'constructor',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'name': '_from',
                'type': 'address',
            },
            {
                'indexed': true,
                'name': '_to',
                'type': 'address',
            },
            {
                'indexed': false,
                'name': '_tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'Transfer',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'name': '_owner',
                'type': 'address',
            },
            {
                'indexed': true,
                'name': '_approved',
                'type': 'address',
            },
            {
                'indexed': false,
                'name': '_tokenId',
                'type': 'uint256',
            },
        ],
        'name': 'Approval',
        'type': 'event',
    },
    {
        'anonymous': false,
        'inputs': [
            {
                'indexed': true,
                'name': '_owner',
                'type': 'address',
            },
            {
                'indexed': true,
                'name': '_operator',
                'type': 'address',
            },
            {
                'indexed': false,
                'name': '_approved',
                'type': 'bool',
            },
        ],
        'name': 'ApprovalForAll',
        'type': 'event',
    },
];
//# sourceMappingURL=ERC721v3.js.map
'''
'''--- lib/abi/Proxy.d.ts ---
export declare const proxyABI: any;
export declare const proxyAssertABI: any;

'''
'''--- lib/abi/Proxy.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxyAssertABI = exports.proxyABI = void 0;
exports.proxyABI = { 'constant': false, 'inputs': [{ 'name': 'dest', 'type': 'address' }, { 'name': 'howToCall', 'type': 'uint8' }, { 'name': 'calldata', 'type': 'bytes' }], 'name': 'proxy', 'outputs': [{ 'name': 'success', 'type': 'bool' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' };
exports.proxyAssertABI = { 'constant': false, 'inputs': [{ 'name': 'dest', 'type': 'address' }, { 'name': 'howToCall', 'type': 'uint8' }, { 'name': 'calldata', 'type': 'bytes' }], 'name': 'proxyAssert', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' };
//# sourceMappingURL=Proxy.js.map
'''
'''--- lib/abi/StaticCheckCheezeWizards.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const StaticCheckCheezeWizards: PartialReadonlyContractAbi;

'''
'''--- lib/abi/StaticCheckCheezeWizards.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticCheckCheezeWizards = void 0;
exports.StaticCheckCheezeWizards = [{ "constant": true, "inputs": [{ "name": "_wizardId", "type": "uint256" }, { "name": "_fingerprint", "type": "bytes32" }, { "name": "checkTxOrigin", "type": "bool" }], "name": "succeedIfCurrentWizardFingerprintMatchesProvidedWizardFingerprint", "outputs": [], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_newOpenSeaAdminAddress", "type": "address" }], "name": "changeOpenSeaAdminAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_newTournamentAddress", "type": "address" }], "name": "changeTournamentAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "isOwner", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "name": "_cheezeWizardTournamentAddress", "type": "address" }, { "name": "_openSeaAdminAddress", "type": "address" }], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "previousOwner", "type": "address" }, { "indexed": false, "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" }];
//# sourceMappingURL=StaticCheckCheezeWizards.js.map
'''
'''--- lib/abi/StaticCheckDecentralandEstates.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const StaticCheckDecentralandEstates: PartialReadonlyContractAbi;

'''
'''--- lib/abi/StaticCheckDecentralandEstates.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticCheckDecentralandEstates = void 0;
exports.StaticCheckDecentralandEstates = [{ "constant": false, "inputs": [{ "name": "_newAddress", "type": "address" }], "name": "changeDecentralandEstateAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_estateId", "type": "uint256" }, { "name": "_fingerprint", "type": "bytes32" }, { "name": "checkTxOrigin", "type": "bool" }], "name": "succeedIfCurrentEstateFingerprintMatchesProvidedEstateFingerprint", "outputs": [], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_newOpenSeaAdminAddress", "type": "address" }], "name": "changeOpenSeaAdminAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "isOwner", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "name": "_decentralandEstateAddress", "type": "address" }, { "name": "_openSeaAdminAddress", "type": "address" }], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "previousOwner", "type": "address" }, { "indexed": false, "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" }];
//# sourceMappingURL=StaticCheckDecentralandEstates.js.map
'''
'''--- lib/abi/StaticCheckTxOrigin.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const StaticCheckTxOrigin: PartialReadonlyContractAbi;

'''
'''--- lib/abi/StaticCheckTxOrigin.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticCheckTxOrigin = void 0;
exports.StaticCheckTxOrigin = [{ "constant": true, "inputs": [], "name": "succeedIfTxOriginMatchesHardcodedAddress", "outputs": [], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_specifiedAddress", "type": "address" }], "name": "succeedIfTxOriginMatchesSpecifiedAddress", "outputs": [], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "isOwner", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_newHardcodedAddress", "type": "address" }], "name": "changeHardcodedAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "name": "_hardcodedAddress", "type": "address" }], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "previousOwner", "type": "address" }, { "indexed": false, "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" }];
//# sourceMappingURL=StaticCheckTxOrigin.js.map
'''
'''--- lib/abi/UniswapExchange.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const UniswapExchange: PartialReadonlyContractAbi;

'''
'''--- lib/abi/UniswapExchange.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniswapExchange = void 0;
exports.UniswapExchange = [{ "name": "TokenPurchase", "inputs": [{ "type": "address", "name": "buyer", "indexed": true }, { "type": "uint256", "name": "eth_sold", "indexed": true }, { "type": "uint256", "name": "tokens_bought", "indexed": true }], "anonymous": false, "type": "event" }, { "name": "EthPurchase", "inputs": [{ "type": "address", "name": "buyer", "indexed": true }, { "type": "uint256", "name": "tokens_sold", "indexed": true }, { "type": "uint256", "name": "eth_bought", "indexed": true }], "anonymous": false, "type": "event" }, { "name": "AddLiquidity", "inputs": [{ "type": "address", "name": "provider", "indexed": true }, { "type": "uint256", "name": "eth_amount", "indexed": true }, { "type": "uint256", "name": "token_amount", "indexed": true }], "anonymous": false, "type": "event" }, { "name": "RemoveLiquidity", "inputs": [{ "type": "address", "name": "provider", "indexed": true }, { "type": "uint256", "name": "eth_amount", "indexed": true }, { "type": "uint256", "name": "token_amount", "indexed": true }], "anonymous": false, "type": "event" }, { "name": "Transfer", "inputs": [{ "type": "address", "name": "_from", "indexed": true }, { "type": "address", "name": "_to", "indexed": true }, { "type": "uint256", "name": "_value", "indexed": false }], "anonymous": false, "type": "event" }, { "name": "Approval", "inputs": [{ "type": "address", "name": "_owner", "indexed": true }, { "type": "address", "name": "_spender", "indexed": true }, { "type": "uint256", "name": "_value", "indexed": false }], "anonymous": false, "type": "event" }, { "name": "setup", "outputs": [], "inputs": [{ "type": "address", "name": "token_addr" }], "constant": false, "payable": false, "type": "function" }, { "name": "addLiquidity", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "min_liquidity" }, { "type": "uint256", "name": "max_tokens" }, { "type": "uint256", "name": "deadline" }], "constant": false, "payable": true, "type": "function" }, { "name": "removeLiquidity", "outputs": [{ "type": "uint256", "name": "out" }, { "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "amount" }, { "type": "uint256", "name": "min_eth" }, { "type": "uint256", "name": "min_tokens" }, { "type": "uint256", "name": "deadline" }], "constant": false, "payable": false, "type": "function" }, { "name": "__default__", "outputs": [], "inputs": [], "constant": false, "payable": true, "type": "function" }, { "name": "ethToTokenSwapInput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "min_tokens" }, { "type": "uint256", "name": "deadline" }], "constant": false, "payable": true, "type": "function" }, { "name": "ethToTokenTransferInput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "min_tokens" }, { "type": "uint256", "name": "deadline" }, { "type": "address", "name": "recipient" }], "constant": false, "payable": true, "type": "function" }, { "name": "ethToTokenSwapOutput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "tokens_bought" }, { "type": "uint256", "name": "deadline" }], "constant": false, "payable": true, "type": "function" }, { "name": "ethToTokenTransferOutput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "tokens_bought" }, { "type": "uint256", "name": "deadline" }, { "type": "address", "name": "recipient" }], "constant": false, "payable": true, "type": "function" }, { "name": "tokenToEthSwapInput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "tokens_sold" }, { "type": "uint256", "name": "min_eth" }, { "type": "uint256", "name": "deadline" }], "constant": false, "payable": false, "type": "function" }, { "name": "tokenToEthTransferInput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "tokens_sold" }, { "type": "uint256", "name": "min_eth" }, { "type": "uint256", "name": "deadline" }, { "type": "address", "name": "recipient" }], "constant": false, "payable": false, "type": "function" }, { "name": "tokenToEthSwapOutput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "eth_bought" }, { "type": "uint256", "name": "max_tokens" }, { "type": "uint256", "name": "deadline" }], "constant": false, "payable": false, "type": "function" }, { "name": "tokenToEthTransferOutput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "eth_bought" }, { "type": "uint256", "name": "max_tokens" }, { "type": "uint256", "name": "deadline" }, { "type": "address", "name": "recipient" }], "constant": false, "payable": false, "type": "function" }, { "name": "tokenToTokenSwapInput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "tokens_sold" }, { "type": "uint256", "name": "min_tokens_bought" }, { "type": "uint256", "name": "min_eth_bought" }, { "type": "uint256", "name": "deadline" }, { "type": "address", "name": "token_addr" }], "constant": false, "payable": false, "type": "function" }, { "name": "tokenToTokenTransferInput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "tokens_sold" }, { "type": "uint256", "name": "min_tokens_bought" }, { "type": "uint256", "name": "min_eth_bought" }, { "type": "uint256", "name": "deadline" }, { "type": "address", "name": "recipient" }, { "type": "address", "name": "token_addr" }], "constant": false, "payable": false, "type": "function" }, { "name": "tokenToTokenSwapOutput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "tokens_bought" }, { "type": "uint256", "name": "max_tokens_sold" }, { "type": "uint256", "name": "max_eth_sold" }, { "type": "uint256", "name": "deadline" }, { "type": "address", "name": "token_addr" }], "constant": false, "payable": false, "type": "function" }, { "name": "tokenToTokenTransferOutput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "tokens_bought" }, { "type": "uint256", "name": "max_tokens_sold" }, { "type": "uint256", "name": "max_eth_sold" }, { "type": "uint256", "name": "deadline" }, { "type": "address", "name": "recipient" }, { "type": "address", "name": "token_addr" }], "constant": false, "payable": false, "type": "function" }, { "name": "tokenToExchangeSwapInput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "tokens_sold" }, { "type": "uint256", "name": "min_tokens_bought" }, { "type": "uint256", "name": "min_eth_bought" }, { "type": "uint256", "name": "deadline" }, { "type": "address", "name": "exchange_addr" }], "constant": false, "payable": false, "type": "function" }, { "name": "tokenToExchangeTransferInput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "tokens_sold" }, { "type": "uint256", "name": "min_tokens_bought" }, { "type": "uint256", "name": "min_eth_bought" }, { "type": "uint256", "name": "deadline" }, { "type": "address", "name": "recipient" }, { "type": "address", "name": "exchange_addr" }], "constant": false, "payable": false, "type": "function" }, { "name": "tokenToExchangeSwapOutput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "tokens_bought" }, { "type": "uint256", "name": "max_tokens_sold" }, { "type": "uint256", "name": "max_eth_sold" }, { "type": "uint256", "name": "deadline" }, { "type": "address", "name": "exchange_addr" }], "constant": false, "payable": false, "type": "function" }, { "name": "tokenToExchangeTransferOutput", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "tokens_bought" }, { "type": "uint256", "name": "max_tokens_sold" }, { "type": "uint256", "name": "max_eth_sold" }, { "type": "uint256", "name": "deadline" }, { "type": "address", "name": "recipient" }, { "type": "address", "name": "exchange_addr" }], "constant": false, "payable": false, "type": "function" }, { "name": "getEthToTokenInputPrice", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "eth_sold" }], "constant": true, "payable": false, "type": "function" }, { "name": "getEthToTokenOutputPrice", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "tokens_bought" }], "constant": true, "payable": false, "type": "function" }, { "name": "getTokenToEthInputPrice", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "tokens_sold" }], "constant": true, "payable": false, "type": "function" }, { "name": "getTokenToEthOutputPrice", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "uint256", "name": "eth_bought" }], "constant": true, "payable": false, "type": "function" }, { "name": "tokenAddress", "outputs": [{ "type": "address", "name": "out" }], "inputs": [], "constant": true, "payable": false, "type": "function" }, { "name": "factoryAddress", "outputs": [{ "type": "address", "name": "out" }], "inputs": [], "constant": true, "payable": false, "type": "function" }, { "name": "balanceOf", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "address", "name": "_owner" }], "constant": true, "payable": false, "type": "function" }, { "name": "transfer", "outputs": [{ "type": "bool", "name": "out" }], "inputs": [{ "type": "address", "name": "_to" }, { "type": "uint256", "name": "_value" }], "constant": false, "payable": false, "type": "function" }, { "name": "transferFrom", "outputs": [{ "type": "bool", "name": "out" }], "inputs": [{ "type": "address", "name": "_from" }, { "type": "address", "name": "_to" }, { "type": "uint256", "name": "_value" }], "constant": false, "payable": false, "type": "function" }, { "name": "approve", "outputs": [{ "type": "bool", "name": "out" }], "inputs": [{ "type": "address", "name": "_spender" }, { "type": "uint256", "name": "_value" }], "constant": false, "payable": false, "type": "function" }, { "name": "allowance", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [{ "type": "address", "name": "_owner" }, { "type": "address", "name": "_spender" }], "constant": true, "payable": false, "type": "function" }, { "name": "name", "outputs": [{ "type": "bytes32", "name": "out" }], "inputs": [], "constant": true, "payable": false, "type": "function" }, { "name": "symbol", "outputs": [{ "type": "bytes32", "name": "out" }], "inputs": [], "constant": true, "payable": false, "type": "function" }, { "name": "decimals", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [], "constant": true, "payable": false, "type": "function" }, { "name": "totalSupply", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [], "constant": true, "payable": false, "type": "function" }];
//# sourceMappingURL=UniswapExchange.js.map
'''
'''--- lib/abi/UniswapFactory.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const UniswapFactory: PartialReadonlyContractAbi;

'''
'''--- lib/abi/UniswapFactory.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniswapFactory = void 0;
exports.UniswapFactory = [{ "name": "NewExchange", "inputs": [{ "type": "address", "name": "token", "indexed": true }, { "type": "address", "name": "exchange", "indexed": true }], "anonymous": false, "type": "event" }, { "name": "initializeFactory", "outputs": [], "inputs": [{ "type": "address", "name": "template" }], "constant": false, "payable": false, "type": "function" }, { "name": "createExchange", "outputs": [{ "type": "address", "name": "out" }], "inputs": [{ "type": "address", "name": "token" }], "constant": false, "payable": false, "type": "function" }, { "name": "getExchange", "outputs": [{ "type": "address", "name": "out" }], "inputs": [{ "type": "address", "name": "token" }], "constant": true, "payable": false, "type": "function" }, { "name": "getToken", "outputs": [{ "type": "address", "name": "out" }], "inputs": [{ "type": "address", "name": "exchange" }], "constant": true, "payable": false, "type": "function" }, { "name": "getTokenWithId", "outputs": [{ "type": "address", "name": "out" }], "inputs": [{ "type": "uint256", "name": "token_id" }], "constant": true, "payable": false, "type": "function" }, { "name": "exchangeTemplate", "outputs": [{ "type": "address", "name": "out" }], "inputs": [], "constant": true, "payable": false, "type": "function" }, { "name": "tokenCount", "outputs": [{ "type": "uint256", "name": "out" }], "inputs": [], "constant": true, "payable": false, "type": "function" }];
//# sourceMappingURL=UniswapFactory.js.map
'''
'''--- lib/abi/WrappedNFT.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const WrappedNFT: PartialReadonlyContractAbi;

'''
'''--- lib/abi/WrappedNFT.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WrappedNFT = void 0;
exports.WrappedNFT = [{ "constant": false, "inputs": [{ "internalType": "uint256[]", "name": "_nftIds", "type": "uint256[]" }, { "internalType": "address[]", "name": "_destinationAddresses", "type": "address[]" }], "name": "burnTokensAndWithdrawNfts", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "internalType": "address", "name": "_operator", "type": "address" }, { "internalType": "address", "name": "_from", "type": "address" }, { "internalType": "uint256", "name": "_tokenId", "type": "uint256" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "name": "onERC721Received", "outputs": [{ "internalType": "bytes4", "name": "", "type": "bytes4" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "internalType": "uint256", "name": "_numSlotsToCheck", "type": "uint256" }], "name": "batchRemoveWithdrawnNFTsFromStorage", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "wyvernTokenTransferProxyAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "uniswapFactoryAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "nftIsDepositedInContract", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "internalType": "uint256[]", "name": "_nftIds", "type": "uint256[]" }], "name": "depositNftsAndMintTokens", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "nftCoreAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "wrappedNFTLiquidationProxyAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "_nftCoreAddress", "type": "address" }, { "internalType": "address", "name": "_uniswapFactoryAddress", "type": "address" }, { "internalType": "address", "name": "_wyvernTokenTransferProxyAddress", "type": "address" }, { "internalType": "address", "name": "_wrappedNFTLiquidationProxyAddress", "type": "address" }], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "payable": true, "stateMutability": "payable", "type": "fallback" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "DepositNFTAndMintToken", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "BurnTokenAndWithdrawNFT", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" }];
//# sourceMappingURL=WrappedNFT.js.map
'''
'''--- lib/abi/WrappedNFTFactory.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const WrappedNFTFactory: PartialReadonlyContractAbi;

'''
'''--- lib/abi/WrappedNFTFactory.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WrappedNFTFactory = void 0;
exports.WrappedNFTFactory = [{ "constant": true, "inputs": [], "name": "wyvernTokenTransferProxyAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "uniswapFactoryAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "internalType": "uint256", "name": "_startIndex", "type": "uint256" }, { "internalType": "uint256", "name": "_endIndex", "type": "uint256" }, { "internalType": "address", "name": "_previousFactoryAddress", "type": "address" }], "name": "importMappingsFromPreviousFactory", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "idToNftContract", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "wrapperContractsCreated", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "wrapperContractToNftContract", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "internalType": "address", "name": "_nftContractAddress", "type": "address" }], "name": "createWrapperContract", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "isOwner", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "internalType": "address", "name": "_newWyvernTokenTransferProxyAddress", "type": "address" }], "name": "updateWyvernTokenTransferProxyAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "internalType": "address", "name": "_newWrappedNFTLiquidationProxyAddress", "type": "address" }], "name": "updateWrappedNFTLiquidationProxyAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "nftContractToWrapperContract", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "internalType": "address", "name": "_nftContractAddress", "type": "address" }], "name": "getWrapperContractForNFTContractAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "internalType": "address", "name": "_newUniswapFactoryAddress", "type": "address" }], "name": "updateUniswapFactoryContractAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "wrappedNFTLiquidationProxyAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "_uniswapFactoryAddress", "type": "address" }, { "internalType": "address", "name": "_wyvernTokenTransferProxyAddress", "type": "address" }], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "nftContract", "type": "address" }, { "indexed": false, "internalType": "address", "name": "wrapperContract", "type": "address" }], "name": "NewWrapperContractCreated", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "previousOwner", "type": "address" }, { "indexed": false, "internalType": "address", "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" }];
//# sourceMappingURL=WrappedNFTFactory.js.map
'''
'''--- lib/abi/WrappedNFTLiquidationProxy.d.ts ---
import { PartialReadonlyContractAbi } from "../types";
export declare const WrappedNFTLiquidationProxy: PartialReadonlyContractAbi;

'''
'''--- lib/abi/WrappedNFTLiquidationProxy.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WrappedNFTLiquidationProxy = void 0;
exports.WrappedNFTLiquidationProxy = [{ "constant": false, "inputs": [{ "name": "_operator", "type": "address" }, { "name": "_from", "type": "address" }, { "name": "_tokenId", "type": "uint256" }, { "name": "_data", "type": "bytes" }], "name": "onERC721Received", "outputs": [{ "name": "", "type": "bytes4" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_nftIds", "type": "uint256[]" }, { "name": "_nftContractAddresses", "type": "address[]" }, { "name": "_isMixedBatchOfNFTs", "type": "bool" }], "name": "wrapNFTs", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "uniswapFactoryAddress", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "wrappedNFTFactoryAddress", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_nftContractAddress", "type": "address" }, { "name": "_numTokensToPurchase", "type": "uint256" }], "name": "purchaseNFTs", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_nftIds", "type": "uint256[]" }, { "name": "_nftContractAddresses", "type": "address[]" }, { "name": "_isMixedBatchOfNFTs", "type": "bool" }, { "name": "_uniswapSlippageAllowedInBasisPoints", "type": "uint256" }], "name": "liquidateNFTs", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_nftIds", "type": "uint256[]" }, { "name": "_nftContractAddresses", "type": "address[]" }, { "name": "_destinationAddresses", "type": "address[]" }, { "name": "_isMixedBatchOfNFTs", "type": "bool" }], "name": "unwrapNFTs", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "name": "_wrappedNFTFactoryAddress", "type": "address" }, { "name": "_uniswapFactoryAddress", "type": "address" }], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "payable": true, "stateMutability": "payable", "type": "fallback" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "numTokensMelted", "type": "uint256" }, { "indexed": false, "name": "nftContractAddress", "type": "address" }, { "indexed": false, "name": "ethReceived", "type": "uint256" }], "name": "LiquidateNFTs", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "numTokensBought", "type": "uint256" }, { "indexed": false, "name": "nftContractAddress", "type": "address" }, { "indexed": false, "name": "ethSpent", "type": "uint256" }], "name": "PurchaseNFTs", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "numTokensWrapped", "type": "uint256" }, { "indexed": false, "name": "nftContractAddress", "type": "address" }], "name": "WrapNFTs", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "numTokensUnwrapped", "type": "uint256" }, { "indexed": false, "name": "nftContractAddress", "type": "address" }], "name": "UnwrapNFTs", "type": "event" }];
//# sourceMappingURL=WrappedNFTLiquidationProxy.js.map
'''
'''--- lib/api.d.ts ---
import 'isomorphic-unfetch';
import { OpenSeaAPIConfig, OpenSeaAsset, OpenSeaAssetBundle, OpenSeaAssetBundleQuery, OpenSeaAssetQuery, OpenSeaFungibleToken, OpenSeaFungibleTokenQuery, Order, OrderJSON, OrderQuery } from './types';
export declare class OpenSeaAPI {
    /**
     * Host url for OpenSea
     */
    readonly hostUrl: string;
    /**
     * Base url for the API
     */
    readonly apiBaseUrl: string;
    /**
     * Page size to use for fetching orders
     */
    pageSize: number;
    /**
     * Logger function to use when debugging
     */
    logger: (arg: string) => void;
    private apiKey;
    /**
     * Create an instance of the OpenSea API
     * @param config OpenSeaAPIConfig for setting up the API, including an optional API key, network name, and base URL
     * @param logger Optional function for logging debug strings before and after requests are made
     */
    constructor(config: OpenSeaAPIConfig, logger?: (arg: string) => void);
    /**
     * Send an order to the orderbook.
     * Throws when the order is invalid.
     * IN NEXT VERSION: change order input to Order type
     * @param order Order JSON to post to the orderbook
     * @param retries Number of times to retry if the service is unavailable for any reason
     */
    postOrder(order: OrderJSON, retries?: number): Promise<Order>;
    /**
     * Create a whitelist entry for an asset to prevent others from buying.
     * Buyers will have to have verified at least one of the emails
     * on an asset in order to buy.
     * This will throw a 403 if the given API key isn't allowed to create whitelist entries for this contract or asset.
     * @param tokenAddress Address of the asset's contract
     * @param tokenId The asset's token ID
     * @param email The email allowed to buy.
     */
    postAssetWhitelist(tokenAddress: string, tokenId: string | number, email: string): Promise<boolean>;
    /**
     * Get an order from the orderbook, throwing if none is found.
     * @param query Query to use for getting orders. A subset of parameters
     *  on the `OrderJSON` type is supported
     */
    getOrder(query: OrderQuery): Promise<Order>;
    /**
     * Get a list of orders from the orderbook, returning the page of orders
     *  and the count of total orders found.
     * @param query Query to use for getting orders. A subset of parameters
     *  on the `OrderJSON` type is supported
     * @param page Page number, defaults to 1. Can be overridden by
     * `limit` and `offset` attributes from OrderQuery
     */
    getOrders(query?: OrderQuery, page?: number): Promise<{
        orders: Order[];
        count: number;
    }>;
    /**
     * Fetch an asset from the API, throwing if none is found
     * @param tokenAddress Address of the asset's contract
     * @param tokenId The asset's token ID, or null if ERC-20
     * @param retries Number of times to retry if the service is unavailable for any reason
     */
    getAsset({ tokenAddress, tokenId }: {
        tokenAddress: string;
        tokenId: string | number | null;
    }, retries?: number): Promise<OpenSeaAsset>;
    /**
     * Fetch list of assets from the API, returning the page of assets and the count of total assets
     * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetJSON` type is supported
     * @param page Page number, defaults to 1. Can be overridden by
     * `limit` and `offset` attributes from OpenSeaAssetQuery
     */
    getAssets(query?: OpenSeaAssetQuery, page?: number): Promise<{
        assets: OpenSeaAsset[];
        estimatedCount: number;
    }>;
    /**
     * Fetch list of fungible tokens from the API matching paramters
     * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetJSON` type is supported
     * @param page Page number, defaults to 1. Can be overridden by
     * `limit` and `offset` attributes from OpenSeaFungibleTokenQuery
     * @param retries Number of times to retry if the service is unavailable for any reason
     */
    getPaymentTokens(query?: OpenSeaFungibleTokenQuery, page?: number, retries?: number): Promise<{
        tokens: OpenSeaFungibleToken[];
    }>;
    /**
     * Fetch an bundle from the API, return null if it isn't found
     * @param slug The bundle's identifier
     */
    getBundle({ slug }: {
        slug: string;
    }): Promise<OpenSeaAssetBundle | null>;
    /**
     * Fetch list of bundles from the API, returning the page of bundles and the count of total bundles
     * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetBundleJSON` type is supported
     * @param page Page number, defaults to 1. Can be overridden by
     * `limit` and `offset` attributes from OpenSeaAssetBundleQuery
     */
    getBundles(query?: OpenSeaAssetBundleQuery, page?: number): Promise<{
        bundles: OpenSeaAssetBundle[];
        estimatedCount: number;
    }>;
    /**
     * Get JSON data from API, sending auth token in headers
     * @param apiPath Path to URL endpoint under API
     * @param query Data to send. Will be stringified using QueryString
     */
    get(apiPath: string, query?: object): Promise<any>;
    /**
     * POST JSON data to API, sending auth token in headers
     * @param apiPath Path to URL endpoint under API
     * @param body Data to send. Will be JSON.stringified
     * @param opts RequestInit opts, similar to Fetch API. If it contains
     *  a body, it won't be stringified.
     */
    post(apiPath: string, body?: object, opts?: RequestInit): Promise<any>;
    /**
     * PUT JSON data to API, sending auth token in headers
     * @param apiPath Path to URL endpoint under API
     * @param body Data to send
     * @param opts RequestInit opts, similar to Fetch API. If it contains
     *  a body, it won't be stringified.
     */
    put(apiPath: string, body: object, opts?: RequestInit): Promise<any>;
    /**
     * Get from an API Endpoint, sending auth token in headers
     * @param apiPath Path to URL endpoint under API
     * @param opts RequestInit opts, similar to Fetch API
     */
    private _fetch;
    private _handleApiResponse;
}

'''
'''--- lib/api.js ---
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenSeaAPI = void 0;
require("isomorphic-unfetch");
var QueryString = require("query-string");
var types_1 = require("./types");
var utils_1 = require("./utils/utils");
var constants_1 = require("./constants");
var OpenSeaAPI = /** @class */ (function () {
    /**
     * Create an instance of the OpenSea API
     * @param config OpenSeaAPIConfig for setting up the API, including an optional API key, network name, and base URL
     * @param logger Optional function for logging debug strings before and after requests are made
     */
    function OpenSeaAPI(config, logger) {
        /**
         * Page size to use for fetching orders
         */
        this.pageSize = 20;
        this.apiKey = config.apiKey;
        switch (config.networkName) {
            case types_1.Network.Rinkeby:
                this.apiBaseUrl = config.apiBaseUrl || constants_1.API_BASE_RINKEBY;
                this.hostUrl = constants_1.SITE_HOST_RINKEBY;
                break;
            case types_1.Network.Main:
            default:
                this.apiBaseUrl = config.apiBaseUrl || constants_1.API_BASE_MAINNET;
                this.hostUrl = constants_1.SITE_HOST_MAINNET;
                break;
        }
        // Debugging: default to nothing
        this.logger = logger || (function (arg) { return arg; });
    }
    /**
     * Send an order to the orderbook.
     * Throws when the order is invalid.
     * IN NEXT VERSION: change order input to Order type
     * @param order Order JSON to post to the orderbook
     * @param retries Number of times to retry if the service is unavailable for any reason
     */
    OpenSeaAPI.prototype.postOrder = function (order, retries) {
        if (retries === void 0) { retries = 2; }
        return __awaiter(this, void 0, void 0, function () {
            var json, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 4]);
                        return [4 /*yield*/, this.post(constants_1.ORDERBOOK_PATH + "/orders/post/", order)];
                    case 1:
                        json = (_a.sent());
                        return [3 /*break*/, 4];
                    case 2:
                        error_1 = _a.sent();
                        _throwOrContinue(error_1, retries);
                        return [4 /*yield*/, utils_1.delay(3000)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, this.postOrder(order, retries - 1)];
                    case 4: return [2 /*return*/, utils_1.orderFromJSON(json)];
                }
            });
        });
    };
    /**
     * Create a whitelist entry for an asset to prevent others from buying.
     * Buyers will have to have verified at least one of the emails
     * on an asset in order to buy.
     * This will throw a 403 if the given API key isn't allowed to create whitelist entries for this contract or asset.
     * @param tokenAddress Address of the asset's contract
     * @param tokenId The asset's token ID
     * @param email The email allowed to buy.
     */
    OpenSeaAPI.prototype.postAssetWhitelist = function (tokenAddress, tokenId, email) {
        return __awaiter(this, void 0, void 0, function () {
            var json;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.post(constants_1.API_PATH + "/asset/" + tokenAddress + "/" + tokenId + "/whitelist/", {
                            email: email
                        })];
                    case 1:
                        json = _a.sent();
                        return [2 /*return*/, !!json.success];
                }
            });
        });
    };
    /**
     * Get an order from the orderbook, throwing if none is found.
     * @param query Query to use for getting orders. A subset of parameters
     *  on the `OrderJSON` type is supported
     */
    OpenSeaAPI.prototype.getOrder = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var result, orderJSON, json, json;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.get(constants_1.ORDERBOOK_PATH + "/orders/", __assign({ limit: 1 }, query))];
                    case 1:
                        result = _a.sent();
                        if (constants_1.ORDERBOOK_VERSION == 0) {
                            json = result;
                            orderJSON = json[0];
                        }
                        else {
                            json = result;
                            orderJSON = json.orders[0];
                        }
                        if (!orderJSON) {
                            throw new Error("Not found: no matching order found");
                        }
                        return [2 /*return*/, utils_1.orderFromJSON(orderJSON)];
                }
            });
        });
    };
    /**
     * Get a list of orders from the orderbook, returning the page of orders
     *  and the count of total orders found.
     * @param query Query to use for getting orders. A subset of parameters
     *  on the `OrderJSON` type is supported
     * @param page Page number, defaults to 1. Can be overridden by
     * `limit` and `offset` attributes from OrderQuery
     */
    OpenSeaAPI.prototype.getOrders = function (query, page) {
        if (query === void 0) { query = {}; }
        if (page === void 0) { page = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var result, json, json;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.get(constants_1.ORDERBOOK_PATH + "/orders/", __assign({ limit: this.pageSize, offset: (page - 1) * this.pageSize }, query))];
                    case 1:
                        result = _a.sent();
                        if (constants_1.ORDERBOOK_VERSION == 0) {
                            json = result;
                            return [2 /*return*/, {
                                    orders: json.map(function (j) { return utils_1.orderFromJSON(j); }),
                                    count: json.length
                                }];
                        }
                        else {
                            json = result;
                            return [2 /*return*/, {
                                    orders: json.orders.map(function (j) { return utils_1.orderFromJSON(j); }),
                                    count: json.count
                                }];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Fetch an asset from the API, throwing if none is found
     * @param tokenAddress Address of the asset's contract
     * @param tokenId The asset's token ID, or null if ERC-20
     * @param retries Number of times to retry if the service is unavailable for any reason
     */
    OpenSeaAPI.prototype.getAsset = function (_a, retries) {
        var tokenAddress = _a.tokenAddress, tokenId = _a.tokenId;
        if (retries === void 0) { retries = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var json, error_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 4]);
                        return [4 /*yield*/, this.get(constants_1.API_PATH + "/asset/" + tokenAddress + "/" + (tokenId || 0) + "/")];
                    case 1:
                        json = _b.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        error_2 = _b.sent();
                        _throwOrContinue(error_2, retries);
                        return [4 /*yield*/, utils_1.delay(1000)];
                    case 3:
                        _b.sent();
                        return [2 /*return*/, this.getAsset({ tokenAddress: tokenAddress, tokenId: tokenId }, retries - 1)];
                    case 4: return [2 /*return*/, utils_1.assetFromJSON(json)];
                }
            });
        });
    };
    /**
     * Fetch list of assets from the API, returning the page of assets and the count of total assets
     * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetJSON` type is supported
     * @param page Page number, defaults to 1. Can be overridden by
     * `limit` and `offset` attributes from OpenSeaAssetQuery
     */
    OpenSeaAPI.prototype.getAssets = function (query, page) {
        if (query === void 0) { query = {}; }
        if (page === void 0) { page = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var json;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.get(constants_1.API_PATH + "/assets/", __assign({ limit: this.pageSize, offset: (page - 1) * this.pageSize }, query))];
                    case 1:
                        json = _a.sent();
                        return [2 /*return*/, {
                                assets: json.assets.map(function (j) { return utils_1.assetFromJSON(j); }),
                                estimatedCount: json.estimated_count
                            }];
                }
            });
        });
    };
    /**
     * Fetch list of fungible tokens from the API matching paramters
     * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetJSON` type is supported
     * @param page Page number, defaults to 1. Can be overridden by
     * `limit` and `offset` attributes from OpenSeaFungibleTokenQuery
     * @param retries Number of times to retry if the service is unavailable for any reason
     */
    OpenSeaAPI.prototype.getPaymentTokens = function (query, page, retries) {
        if (query === void 0) { query = {}; }
        if (page === void 0) { page = 1; }
        if (retries === void 0) { retries = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var json, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 4]);
                        return [4 /*yield*/, this.get(constants_1.API_PATH + "/tokens/", __assign(__assign({}, query), { limit: this.pageSize, offset: (page - 1) * this.pageSize }))];
                    case 1:
                        json = _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        error_3 = _a.sent();
                        _throwOrContinue(error_3, retries);
                        return [4 /*yield*/, utils_1.delay(1000)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, this.getPaymentTokens(query, page, retries - 1)];
                    case 4: return [2 /*return*/, {
                            tokens: json.map(function (t) { return utils_1.tokenFromJSON(t); })
                        }];
                }
            });
        });
    };
    /**
     * Fetch an bundle from the API, return null if it isn't found
     * @param slug The bundle's identifier
     */
    OpenSeaAPI.prototype.getBundle = function (_a) {
        var slug = _a.slug;
        return __awaiter(this, void 0, void 0, function () {
            var json;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.get(constants_1.API_PATH + "/bundle/" + slug + "/")];
                    case 1:
                        json = _b.sent();
                        return [2 /*return*/, json ? utils_1.assetBundleFromJSON(json) : null];
                }
            });
        });
    };
    /**
     * Fetch list of bundles from the API, returning the page of bundles and the count of total bundles
     * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetBundleJSON` type is supported
     * @param page Page number, defaults to 1. Can be overridden by
     * `limit` and `offset` attributes from OpenSeaAssetBundleQuery
     */
    OpenSeaAPI.prototype.getBundles = function (query, page) {
        if (query === void 0) { query = {}; }
        if (page === void 0) { page = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var json;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.get(constants_1.API_PATH + "/bundles/", __assign(__assign({}, query), { limit: this.pageSize, offset: (page - 1) * this.pageSize }))];
                    case 1:
                        json = _a.sent();
                        return [2 /*return*/, {
                                bundles: json.bundles.map(function (j) { return utils_1.assetBundleFromJSON(j); }),
                                estimatedCount: json.estimated_count
                            }];
                }
            });
        });
    };
    /**
     * Get JSON data from API, sending auth token in headers
     * @param apiPath Path to URL endpoint under API
     * @param query Data to send. Will be stringified using QueryString
     */
    OpenSeaAPI.prototype.get = function (apiPath, query) {
        if (query === void 0) { query = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var qs, url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        qs = QueryString.stringify(query);
                        url = apiPath + "?" + qs;
                        return [4 /*yield*/, this._fetch(url)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.json()];
                }
            });
        });
    };
    /**
     * POST JSON data to API, sending auth token in headers
     * @param apiPath Path to URL endpoint under API
     * @param body Data to send. Will be JSON.stringified
     * @param opts RequestInit opts, similar to Fetch API. If it contains
     *  a body, it won't be stringified.
     */
    OpenSeaAPI.prototype.post = function (apiPath, body, opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var fetchOpts, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fetchOpts = __assign({ method: 'POST', body: body ? JSON.stringify(body) : undefined, headers: {
                                Accept: 'application/json',
                                'Content-Type': 'application/json',
                            } }, opts);
                        return [4 /*yield*/, this._fetch(apiPath, fetchOpts)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.json()];
                }
            });
        });
    };
    /**
     * PUT JSON data to API, sending auth token in headers
     * @param apiPath Path to URL endpoint under API
     * @param body Data to send
     * @param opts RequestInit opts, similar to Fetch API. If it contains
     *  a body, it won't be stringified.
     */
    OpenSeaAPI.prototype.put = function (apiPath, body, opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(apiPath, body, __assign({ method: 'PUT' }, opts))];
            });
        });
    };
    /**
     * Get from an API Endpoint, sending auth token in headers
     * @param apiPath Path to URL endpoint under API
     * @param opts RequestInit opts, similar to Fetch API
     */
    OpenSeaAPI.prototype._fetch = function (apiPath, opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var apiBase, apiKey, finalUrl, finalOpts;
            var _this = this;
            return __generator(this, function (_a) {
                apiBase = this.apiBaseUrl;
                apiKey = this.apiKey;
                finalUrl = apiBase + apiPath;
                finalOpts = __assign(__assign({}, opts), { headers: __assign(__assign({}, (apiKey ? { 'X-API-KEY': apiKey } : {})), (opts.headers || {})) });
                this.logger("Sending request: " + finalUrl + " " + JSON.stringify(finalOpts).substr(0, 100) + "...");
                return [2 /*return*/, fetch(finalUrl, finalOpts).then(function (res) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                        return [2 /*return*/, this._handleApiResponse(res)];
                    }); }); })];
            });
        });
    };
    OpenSeaAPI.prototype._handleApiResponse = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var result, errorMessage, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (response.ok) {
                            this.logger("Got success: " + response.status);
                            return [2 /*return*/, response];
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, response.text()];
                    case 2:
                        result = _b.sent();
                        result = JSON.parse(result);
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 4:
                        this.logger("Got error " + response.status + ": " + JSON.stringify(result));
                        switch (response.status) {
                            case 400:
                                errorMessage = result && result.errors
                                    ? result.errors.join(', ')
                                    : "Invalid request: " + JSON.stringify(result);
                                break;
                            case 401:
                            case 403:
                                errorMessage = "Unauthorized. Full message was '" + JSON.stringify(result) + "'";
                                break;
                            case 404:
                                errorMessage = "Not found. Full message was '" + JSON.stringify(result) + "'";
                                break;
                            case 500:
                                errorMessage = "Internal server error. OpenSea has been alerted, but if the problem persists please contact us via Discord: https://discord.gg/ga8EJbv - full message was " + JSON.stringify(result);
                                break;
                            case 503:
                                errorMessage = "Service unavailable. Please try again in a few minutes. If the problem persists please contact us via Discord: https://discord.gg/ga8EJbv - full message was " + JSON.stringify(result);
                                break;
                            default:
                                errorMessage = "Message: " + JSON.stringify(result);
                                break;
                        }
                        throw new Error("API Error " + response.status + ": " + errorMessage);
                }
            });
        });
    };
    return OpenSeaAPI;
}());
exports.OpenSeaAPI = OpenSeaAPI;
function _throwOrContinue(error, retries) {
    var isUnavailable = !!error.message && (error.message.includes('503') ||
        error.message.includes('429'));
    if (retries <= 0 || !isUnavailable) {
        throw error;
    }
}
//# sourceMappingURL=api.js.map
'''
'''--- lib/constants.d.ts ---
import { BigNumber } from 'bignumber.js';
export declare const DEFAULT_GAS_INCREASE_FACTOR = 1.01;
export declare const NULL_ADDRESS: string;
export declare const NULL_BLOCK_HASH = "0x0000000000000000000000000000000000000000000000000000000000000000";
export declare const OPENSEA_FEE_RECIPIENT = "0x5b3256965e7c3cf26e11fcaf296dfc8807c01073";
export declare const DEP_INFURA_KEY = "e8695bce67944848aa95459fac052f8e";
export declare const MAINNET_PROVIDER_URL = "https://api.opensea.io/jsonrpc/v1/";
export declare const RINKEBY_PROVIDER_URL = "https://testnets-api.opensea.io/jsonrpc/v1/";
export declare const INVERSE_BASIS_POINT = 10000;
export declare const MAX_UINT_256: BigNumber;
export declare const WYVERN_EXCHANGE_ADDRESS_MAINNET = "0x7be8076f4ea4a4ad08075c2508e481d6c946d12b";
export declare const WYVERN_EXCHANGE_ADDRESS_RINKEBY = "0x5206e78b21ce315ce284fb24cf05e0585a93b1d9";
export declare const ENJIN_COIN_ADDRESS = "0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c";
export declare const MANA_ADDRESS = "0x0f5d2fb29fb7d3cfee444a200298f468908cc942";
export declare const ENJIN_ADDRESS = "0xfaaFDc07907ff5120a76b34b731b278c38d6043C";
export declare const ENJIN_LEGACY_ADDRESS = "0x8562c38485B1E8cCd82E44F89823dA76C98eb0Ab";
export declare const CK_ADDRESS = "0x06012c8cf97bead5deae237070f9587f8e7a266d";
export declare const CK_RINKEBY_ADDRESS = "0x16baf0de678e52367adc69fd067e5edd1d33e3bf";
export declare const WRAPPED_NFT_FACTORY_ADDRESS_MAINNET = "0xf11b5815b143472b7f7c52af0bfa6c6a2c8f40e1";
export declare const WRAPPED_NFT_FACTORY_ADDRESS_RINKEBY = "0x94c71c87244b862cfd64d36af468309e4804ec09";
export declare const WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_MAINNET = "0x995835145dd85c012f3e2d7d5561abd626658c04";
export declare const WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_RINKEBY = "0xaa775Eb452353aB17f7cf182915667c2598D43d3";
export declare const UNISWAP_FACTORY_ADDRESS_MAINNET = "0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95";
export declare const UNISWAP_FACTORY_ADDRESS_RINKEBY = "0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36";
export declare const DEFAULT_WRAPPED_NFT_LIQUIDATION_UNISWAP_SLIPPAGE_IN_BASIS_POINTS = 1000;
export declare const CHEEZE_WIZARDS_GUILD_ADDRESS: string;
export declare const CHEEZE_WIZARDS_GUILD_RINKEBY_ADDRESS = "0x095731b672b76b00A0b5cb9D8258CD3F6E976cB2";
export declare const CHEEZE_WIZARDS_BASIC_TOURNAMENT_ADDRESS: string;
export declare const CHEEZE_WIZARDS_BASIC_TOURNAMENT_RINKEBY_ADDRESS = "0x8852f5F7d1BB867AAf8fdBB0851Aa431d1df5ca1";
export declare const DECENTRALAND_ESTATE_ADDRESS = "0x959e104e1a4db6317fa58f8295f586e1a978c297";
export declare const STATIC_CALL_TX_ORIGIN_ADDRESS = "0xbff6ade67e3717101dd8d0a7f3de1bf6623a2ba8";
export declare const STATIC_CALL_TX_ORIGIN_RINKEBY_ADDRESS = "0xe291abab95677bc652a44f973a8e06d48464e11c";
export declare const STATIC_CALL_CHEEZE_WIZARDS_ADDRESS: string;
export declare const STATIC_CALL_CHEEZE_WIZARDS_RINKEBY_ADDRESS = "0x8a640bdf8886dd6ca1fad9f22382b50deeacde08";
export declare const STATIC_CALL_DECENTRALAND_ESTATES_ADDRESS = "0x93c3cd7ba04556d2e3d7b8106ce0f83e24a87a7e";
export declare const DEFAULT_BUYER_FEE_BASIS_POINTS = 0;
export declare const DEFAULT_SELLER_FEE_BASIS_POINTS = 250;
export declare const OPENSEA_SELLER_BOUNTY_BASIS_POINTS = 100;
export declare const DEFAULT_MAX_BOUNTY = 250;
export declare const MIN_EXPIRATION_SECONDS = 10;
export declare const ORDER_MATCHING_LATENCY_SECONDS: number;
export declare const SELL_ORDER_BATCH_SIZE = 3;
export declare const ORDERBOOK_VERSION: number;
export declare const API_VERSION: number;
export declare const API_BASE_MAINNET = "https://api.opensea.io";
export declare const API_BASE_RINKEBY = "https://testnets-api.opensea.io";
export declare const SITE_HOST_MAINNET = "https://opensea.io";
export declare const SITE_HOST_RINKEBY = "https://rinkeby.opensea.io";
export declare const ORDERBOOK_PATH: string;
export declare const API_PATH: string;

'''
'''--- lib/constants.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.API_PATH = exports.ORDERBOOK_PATH = exports.SITE_HOST_RINKEBY = exports.SITE_HOST_MAINNET = exports.API_BASE_RINKEBY = exports.API_BASE_MAINNET = exports.API_VERSION = exports.ORDERBOOK_VERSION = exports.SELL_ORDER_BATCH_SIZE = exports.ORDER_MATCHING_LATENCY_SECONDS = exports.MIN_EXPIRATION_SECONDS = exports.DEFAULT_MAX_BOUNTY = exports.OPENSEA_SELLER_BOUNTY_BASIS_POINTS = exports.DEFAULT_SELLER_FEE_BASIS_POINTS = exports.DEFAULT_BUYER_FEE_BASIS_POINTS = exports.STATIC_CALL_DECENTRALAND_ESTATES_ADDRESS = exports.STATIC_CALL_CHEEZE_WIZARDS_RINKEBY_ADDRESS = exports.STATIC_CALL_CHEEZE_WIZARDS_ADDRESS = exports.STATIC_CALL_TX_ORIGIN_RINKEBY_ADDRESS = exports.STATIC_CALL_TX_ORIGIN_ADDRESS = exports.DECENTRALAND_ESTATE_ADDRESS = exports.CHEEZE_WIZARDS_BASIC_TOURNAMENT_RINKEBY_ADDRESS = exports.CHEEZE_WIZARDS_BASIC_TOURNAMENT_ADDRESS = exports.CHEEZE_WIZARDS_GUILD_RINKEBY_ADDRESS = exports.CHEEZE_WIZARDS_GUILD_ADDRESS = exports.DEFAULT_WRAPPED_NFT_LIQUIDATION_UNISWAP_SLIPPAGE_IN_BASIS_POINTS = exports.UNISWAP_FACTORY_ADDRESS_RINKEBY = exports.UNISWAP_FACTORY_ADDRESS_MAINNET = exports.WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_RINKEBY = exports.WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_MAINNET = exports.WRAPPED_NFT_FACTORY_ADDRESS_RINKEBY = exports.WRAPPED_NFT_FACTORY_ADDRESS_MAINNET = exports.CK_RINKEBY_ADDRESS = exports.CK_ADDRESS = exports.ENJIN_LEGACY_ADDRESS = exports.ENJIN_ADDRESS = exports.MANA_ADDRESS = exports.ENJIN_COIN_ADDRESS = exports.WYVERN_EXCHANGE_ADDRESS_RINKEBY = exports.WYVERN_EXCHANGE_ADDRESS_MAINNET = exports.MAX_UINT_256 = exports.INVERSE_BASIS_POINT = exports.RINKEBY_PROVIDER_URL = exports.MAINNET_PROVIDER_URL = exports.DEP_INFURA_KEY = exports.OPENSEA_FEE_RECIPIENT = exports.NULL_BLOCK_HASH = exports.NULL_ADDRESS = exports.DEFAULT_GAS_INCREASE_FACTOR = void 0;
var wyvern_js_1 = require("wyvern-js");
exports.DEFAULT_GAS_INCREASE_FACTOR = 1.01;
exports.NULL_ADDRESS = wyvern_js_1.WyvernProtocol.NULL_ADDRESS;
exports.NULL_BLOCK_HASH = '0x0000000000000000000000000000000000000000000000000000000000000000';
exports.OPENSEA_FEE_RECIPIENT = '0x5b3256965e7c3cf26e11fcaf296dfc8807c01073';
exports.DEP_INFURA_KEY = 'e8695bce67944848aa95459fac052f8e';
exports.MAINNET_PROVIDER_URL = 'https://api.opensea.io/jsonrpc/v1/';
exports.RINKEBY_PROVIDER_URL = 'https://testnets-api.opensea.io/jsonrpc/v1/';
exports.INVERSE_BASIS_POINT = 10000;
exports.MAX_UINT_256 = wyvern_js_1.WyvernProtocol.MAX_UINT_256;
exports.WYVERN_EXCHANGE_ADDRESS_MAINNET = '0x7be8076f4ea4a4ad08075c2508e481d6c946d12b';
exports.WYVERN_EXCHANGE_ADDRESS_RINKEBY = '0x5206e78b21ce315ce284fb24cf05e0585a93b1d9';
exports.ENJIN_COIN_ADDRESS = '0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c';
exports.MANA_ADDRESS = '0x0f5d2fb29fb7d3cfee444a200298f468908cc942';
exports.ENJIN_ADDRESS = '0xfaaFDc07907ff5120a76b34b731b278c38d6043C';
exports.ENJIN_LEGACY_ADDRESS = '0x8562c38485B1E8cCd82E44F89823dA76C98eb0Ab';
exports.CK_ADDRESS = '0x06012c8cf97bead5deae237070f9587f8e7a266d';
exports.CK_RINKEBY_ADDRESS = '0x16baf0de678e52367adc69fd067e5edd1d33e3bf';
exports.WRAPPED_NFT_FACTORY_ADDRESS_MAINNET = '0xf11b5815b143472b7f7c52af0bfa6c6a2c8f40e1';
exports.WRAPPED_NFT_FACTORY_ADDRESS_RINKEBY = '0x94c71c87244b862cfd64d36af468309e4804ec09';
exports.WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_MAINNET = '0x995835145dd85c012f3e2d7d5561abd626658c04';
exports.WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_RINKEBY = '0xaa775Eb452353aB17f7cf182915667c2598D43d3';
exports.UNISWAP_FACTORY_ADDRESS_MAINNET = '0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95';
exports.UNISWAP_FACTORY_ADDRESS_RINKEBY = '0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36';
exports.DEFAULT_WRAPPED_NFT_LIQUIDATION_UNISWAP_SLIPPAGE_IN_BASIS_POINTS = 1000;
exports.CHEEZE_WIZARDS_GUILD_ADDRESS = wyvern_js_1.WyvernProtocol.NULL_ADDRESS; // TODO: Update this address once Dapper has deployed their mainnet contracts
exports.CHEEZE_WIZARDS_GUILD_RINKEBY_ADDRESS = '0x095731b672b76b00A0b5cb9D8258CD3F6E976cB2';
exports.CHEEZE_WIZARDS_BASIC_TOURNAMENT_ADDRESS = wyvern_js_1.WyvernProtocol.NULL_ADDRESS; // TODO: Update this address once Dapper has deployed their mainnet contracts
exports.CHEEZE_WIZARDS_BASIC_TOURNAMENT_RINKEBY_ADDRESS = '0x8852f5F7d1BB867AAf8fdBB0851Aa431d1df5ca1';
exports.DECENTRALAND_ESTATE_ADDRESS = '0x959e104e1a4db6317fa58f8295f586e1a978c297';
exports.STATIC_CALL_TX_ORIGIN_ADDRESS = '0xbff6ade67e3717101dd8d0a7f3de1bf6623a2ba8';
exports.STATIC_CALL_TX_ORIGIN_RINKEBY_ADDRESS = '0xe291abab95677bc652a44f973a8e06d48464e11c';
exports.STATIC_CALL_CHEEZE_WIZARDS_ADDRESS = wyvern_js_1.WyvernProtocol.NULL_ADDRESS; // TODO: Deploy this address once Dapper has deployed their mainnet contracts
exports.STATIC_CALL_CHEEZE_WIZARDS_RINKEBY_ADDRESS = '0x8a640bdf8886dd6ca1fad9f22382b50deeacde08';
exports.STATIC_CALL_DECENTRALAND_ESTATES_ADDRESS = '0x93c3cd7ba04556d2e3d7b8106ce0f83e24a87a7e';
exports.DEFAULT_BUYER_FEE_BASIS_POINTS = 0;
exports.DEFAULT_SELLER_FEE_BASIS_POINTS = 250;
exports.OPENSEA_SELLER_BOUNTY_BASIS_POINTS = 100;
exports.DEFAULT_MAX_BOUNTY = exports.DEFAULT_SELLER_FEE_BASIS_POINTS;
exports.MIN_EXPIRATION_SECONDS = 10;
exports.ORDER_MATCHING_LATENCY_SECONDS = 60 * 60 * 24 * 7;
exports.SELL_ORDER_BATCH_SIZE = 3;
exports.ORDERBOOK_VERSION = 1;
exports.API_VERSION = 1;
exports.API_BASE_MAINNET = 'https://api.opensea.io';
exports.API_BASE_RINKEBY = 'https://testnets-api.opensea.io';
exports.SITE_HOST_MAINNET = 'https://opensea.io';
exports.SITE_HOST_RINKEBY = 'https://rinkeby.opensea.io';
exports.ORDERBOOK_PATH = "/wyvern/v" + exports.ORDERBOOK_VERSION;
exports.API_PATH = "/api/v" + exports.ORDERBOOK_VERSION;
//# sourceMappingURL=constants.js.map
'''
'''--- lib/contracts.d.ts ---
import { PartialReadonlyContractAbi } from './types';
import { EventAbi } from 'web3';
import { AnnotatedFunctionABI } from 'wyvern-js/lib/types';
export declare const getMethod: (abi: PartialReadonlyContractAbi, name: string) => AnnotatedFunctionABI;
export declare const event: (abi: PartialReadonlyContractAbi, name: string) => EventAbi;
export declare const DECENTRALAND_AUCTION_CONFIG: {
    '1': string;
};
export { ERC20 } from './abi/ERC20';
export { ERC721 } from './abi/ERC721v3';
export { ERC1155 } from './abi/ERC1155';
export { StaticCheckTxOrigin } from './abi/StaticCheckTxOrigin';
export { StaticCheckCheezeWizards } from './abi/StaticCheckCheezeWizards';
export { StaticCheckDecentralandEstates } from './abi/StaticCheckDecentralandEstates';
export { CheezeWizardsBasicTournament } from './abi/CheezeWizardsBasicTournament';
export { DecentralandEstates } from './abi/DecentralandEstates';
export { CanonicalWETH } from './abi/CanonicalWETH';
export { WrappedNFT } from './abi/WrappedNFT';
export { WrappedNFTFactory } from './abi/WrappedNFTFactory';
export { WrappedNFTLiquidationProxy } from './abi/WrappedNFTLiquidationProxy';
export { UniswapFactory } from './abi/UniswapFactory';
export { UniswapExchange } from './abi/UniswapExchange';

'''
'''--- lib/contracts.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniswapExchange = exports.UniswapFactory = exports.WrappedNFTLiquidationProxy = exports.WrappedNFTFactory = exports.WrappedNFT = exports.CanonicalWETH = exports.DecentralandEstates = exports.CheezeWizardsBasicTournament = exports.StaticCheckDecentralandEstates = exports.StaticCheckCheezeWizards = exports.StaticCheckTxOrigin = exports.ERC1155 = exports.ERC721 = exports.ERC20 = exports.DECENTRALAND_AUCTION_CONFIG = exports.event = exports.getMethod = void 0;
var getMethod = function (abi, name) {
    var methodAbi = abi.find(function (x) { return x.type == 'function' && x.name == name; });
    if (!methodAbi) {
        throw new Error("ABI " + name + " not found");
    }
    // Have to cast since there's a bug in
    // web3 types on the 'type' field
    return methodAbi;
};
exports.getMethod = getMethod;
var event = function (abi, name) {
    var eventAbi = abi.find(function (x) { return x.type == 'event' && x.name == name; });
    if (!eventAbi) {
        throw new Error("ABI " + name + " not found");
    }
    // Have to cast since there's a bug in
    // web3 types on the 'type' field
    return eventAbi;
};
exports.event = event;
exports.DECENTRALAND_AUCTION_CONFIG = {
    '1': '0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d',
};
var ERC20_1 = require("./abi/ERC20");
Object.defineProperty(exports, "ERC20", { enumerable: true, get: function () { return ERC20_1.ERC20; } });
var ERC721v3_1 = require("./abi/ERC721v3");
Object.defineProperty(exports, "ERC721", { enumerable: true, get: function () { return ERC721v3_1.ERC721; } });
var ERC1155_1 = require("./abi/ERC1155");
Object.defineProperty(exports, "ERC1155", { enumerable: true, get: function () { return ERC1155_1.ERC1155; } });
var StaticCheckTxOrigin_1 = require("./abi/StaticCheckTxOrigin");
Object.defineProperty(exports, "StaticCheckTxOrigin", { enumerable: true, get: function () { return StaticCheckTxOrigin_1.StaticCheckTxOrigin; } });
var StaticCheckCheezeWizards_1 = require("./abi/StaticCheckCheezeWizards");
Object.defineProperty(exports, "StaticCheckCheezeWizards", { enumerable: true, get: function () { return StaticCheckCheezeWizards_1.StaticCheckCheezeWizards; } });
var StaticCheckDecentralandEstates_1 = require("./abi/StaticCheckDecentralandEstates");
Object.defineProperty(exports, "StaticCheckDecentralandEstates", { enumerable: true, get: function () { return StaticCheckDecentralandEstates_1.StaticCheckDecentralandEstates; } });
var CheezeWizardsBasicTournament_1 = require("./abi/CheezeWizardsBasicTournament");
Object.defineProperty(exports, "CheezeWizardsBasicTournament", { enumerable: true, get: function () { return CheezeWizardsBasicTournament_1.CheezeWizardsBasicTournament; } });
var DecentralandEstates_1 = require("./abi/DecentralandEstates");
Object.defineProperty(exports, "DecentralandEstates", { enumerable: true, get: function () { return DecentralandEstates_1.DecentralandEstates; } });
var CanonicalWETH_1 = require("./abi/CanonicalWETH");
Object.defineProperty(exports, "CanonicalWETH", { enumerable: true, get: function () { return CanonicalWETH_1.CanonicalWETH; } });
var WrappedNFT_1 = require("./abi/WrappedNFT");
Object.defineProperty(exports, "WrappedNFT", { enumerable: true, get: function () { return WrappedNFT_1.WrappedNFT; } });
var WrappedNFTFactory_1 = require("./abi/WrappedNFTFactory");
Object.defineProperty(exports, "WrappedNFTFactory", { enumerable: true, get: function () { return WrappedNFTFactory_1.WrappedNFTFactory; } });
var WrappedNFTLiquidationProxy_1 = require("./abi/WrappedNFTLiquidationProxy");
Object.defineProperty(exports, "WrappedNFTLiquidationProxy", { enumerable: true, get: function () { return WrappedNFTLiquidationProxy_1.WrappedNFTLiquidationProxy; } });
var UniswapFactory_1 = require("./abi/UniswapFactory");
Object.defineProperty(exports, "UniswapFactory", { enumerable: true, get: function () { return UniswapFactory_1.UniswapFactory; } });
var UniswapExchange_1 = require("./abi/UniswapExchange");
Object.defineProperty(exports, "UniswapExchange", { enumerable: true, get: function () { return UniswapExchange_1.UniswapExchange; } });
//# sourceMappingURL=contracts.js.map
'''
'''--- lib/debugging.d.ts ---
import { WyvernProtocol } from 'wyvern-js';
import { Order } from './types';
export declare const MAX_ERROR_LENGTH = 120;
/**
 * Debug the `ordersCanMatch` part of Wyvern
 * @param buy Buy order for debugging
 * @param sell Sell order for debugging
 */
export declare function requireOrdersCanMatch(client: WyvernProtocol, { buy, sell, accountAddress }: {
    buy: Order;
    sell: Order;
    accountAddress: string;
}): Promise<void>;
/**
 * Debug the `orderCalldataCanMatch` part of Wyvern
 * @param buy Buy order for debugging
 * @param sell Sell Order for debugging
 */
export declare function requireOrderCalldataCanMatch(client: WyvernProtocol, { buy, sell }: {
    buy: Order;
    sell: Order;
}): Promise<void>;

'''
'''--- lib/debugging.js ---
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requireOrderCalldataCanMatch = exports.requireOrdersCanMatch = exports.MAX_ERROR_LENGTH = void 0;
var constants_1 = require("./constants");
exports.MAX_ERROR_LENGTH = 120;
/**
 * This file reproduces Solidity methods to make debugging easier
 */
var Side;
(function (Side) {
    Side[Side["Buy"] = 0] = "Buy";
    Side[Side["Sell"] = 1] = "Sell";
})(Side || (Side = {}));
var SaleKind;
(function (SaleKind) {
    SaleKind[SaleKind["FixedPrice"] = 0] = "FixedPrice";
    SaleKind[SaleKind["DutchAuction"] = 1] = "DutchAuction";
})(SaleKind || (SaleKind = {}));
var SaleKindInterface = {
    Side: Side,
    SaleKind: SaleKind,
    validateParameters: function (saleKind, expirationTime) {
        return (saleKind === SaleKind.FixedPrice || expirationTime > 0);
    },
    canSettleOrder: function (listingTime, expirationTime) {
        var now = Math.round(Date.now() / 1000);
        return (listingTime < now) && (expirationTime === 0 || now < expirationTime);
    }
};
/**
 * Debug the `ordersCanMatch` part of Wyvern
 * @param buy Buy order for debugging
 * @param sell Sell order for debugging
 */
function requireOrdersCanMatch(client, _a) {
    var buy = _a.buy, sell = _a.sell, accountAddress = _a.accountAddress;
    return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, client.wyvernExchange.ordersCanMatch_.callAsync([buy.exchange, buy.maker, buy.taker, buy.feeRecipient, buy.target, buy.staticTarget, buy.paymentToken, sell.exchange, sell.maker, sell.taker, sell.feeRecipient, sell.target, sell.staticTarget, sell.paymentToken], [buy.makerRelayerFee, buy.takerRelayerFee, buy.makerProtocolFee, buy.takerProtocolFee, buy.basePrice, buy.extra, buy.listingTime, buy.expirationTime, buy.salt, sell.makerRelayerFee, sell.takerRelayerFee, sell.makerProtocolFee, sell.takerProtocolFee, sell.basePrice, sell.extra, sell.listingTime, sell.expirationTime, sell.salt], [buy.feeMethod, buy.side, buy.saleKind, buy.howToCall, sell.feeMethod, sell.side, sell.saleKind, sell.howToCall], buy.calldata, sell.calldata, buy.replacementPattern, sell.replacementPattern, buy.staticExtradata, sell.staticExtradata, { from: accountAddress })];
                case 1:
                    result = _b.sent();
                    if (result) {
                        return [2 /*return*/];
                    }
                    if (!(+buy.side == +SaleKindInterface.Side.Buy && +sell.side == +SaleKindInterface.Side.Sell)) {
                        throw new Error('Must be opposite-side');
                    }
                    if (!(buy.feeMethod == sell.feeMethod)) {
                        throw new Error('Must use same fee method');
                    }
                    if (!(buy.paymentToken == sell.paymentToken)) {
                        throw new Error('Must use same payment token');
                    }
                    if (!(sell.taker == constants_1.NULL_ADDRESS || sell.taker == buy.maker)) {
                        throw new Error('Sell taker must be null or matching buy maker');
                    }
                    if (!(buy.taker == constants_1.NULL_ADDRESS || buy.taker == sell.maker)) {
                        throw new Error('Buy taker must be null or matching sell maker');
                    }
                    if (!((sell.feeRecipient == constants_1.NULL_ADDRESS && buy.feeRecipient != constants_1.NULL_ADDRESS) || (sell.feeRecipient != constants_1.NULL_ADDRESS && buy.feeRecipient == constants_1.NULL_ADDRESS))) {
                        throw new Error('One order must be maker and the other must be taker');
                    }
                    if (!(buy.target == sell.target)) {
                        throw new Error('Must match target');
                    }
                    if (!(buy.howToCall == sell.howToCall)) {
                        throw new Error('Must match howToCall');
                    }
                    if (!SaleKindInterface.canSettleOrder(+buy.listingTime, +buy.expirationTime)) {
                        throw new Error("Buy-side order is set in the future or expired");
                    }
                    if (!SaleKindInterface.canSettleOrder(+sell.listingTime, +sell.expirationTime)) {
                        throw new Error("Sell-side order is set in the future or expired");
                    }
                    // Handle default, which is likely now() being diff than local time
                    throw new Error('Error creating your order. Check that your system clock is set to the current date and time before you try again.');
            }
        });
    });
}
exports.requireOrdersCanMatch = requireOrdersCanMatch;
/**
 * Debug the `orderCalldataCanMatch` part of Wyvern
 * @param buy Buy order for debugging
 * @param sell Sell Order for debugging
 */
function requireOrderCalldataCanMatch(client, _a) {
    var buy = _a.buy, sell = _a.sell;
    return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, client.wyvernExchange.orderCalldataCanMatch.callAsync(buy.calldata, buy.replacementPattern, sell.calldata, sell.replacementPattern)];
                case 1:
                    result = _b.sent();
                    if (result) {
                        return [2 /*return*/];
                    }
                    throw new Error('Unable to match offer data with auction data.');
            }
        });
    });
}
exports.requireOrderCalldataCanMatch = requireOrderCalldataCanMatch;
//# sourceMappingURL=debugging.js.map
'''
'''--- lib/errors.d.ts ---
import { Order } from "./types";
export declare const MAX_ERROR_LENGTH = 120;
/**
 * Debug the `ordersCanMatch` part of Wyvern
 * @param buy Buy order for debugging
 * @param sell Sell order for debugging
 */
export declare function debugOrdersCanMatch(buy: Order, sell: Order): Promise<void>;
/**
 * Debug the `orderCalldataCanMatch` part of Wyvern
 * @param buy Buy order for debugging
 * @param sell Sell Order for debugging
 */
export declare function debugOrderCalldataCanMatch(buy: Order, sell: Order): Promise<void>;

'''
'''--- lib/errors.js ---
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
exports.MAX_ERROR_LENGTH = 120;
var Side;
(function (Side) {
    Side[Side["Buy"] = 0] = "Buy";
    Side[Side["Sell"] = 1] = "Sell";
})(Side || (Side = {}));
var SaleKind;
(function (SaleKind) {
    SaleKind[SaleKind["FixedPrice"] = 0] = "FixedPrice";
    SaleKind[SaleKind["DutchAuction"] = 1] = "DutchAuction";
})(SaleKind || (SaleKind = {}));
var SaleKindInterface = {
    Side: Side,
    SaleKind: SaleKind,
    validateParameters: function (saleKind, expirationTime) {
        return (saleKind === SaleKind.FixedPrice || expirationTime > 0);
    },
    canSettleOrder: function (listingTime, expirationTime) {
        var now = Math.round(Date.now() / 1000);
        return (listingTime < now) && (expirationTime === 0 || now < expirationTime);
    }
};
/**
 * Debug the `ordersCanMatch` part of Wyvern
 * @param buy Buy order for debugging
 * @param sell Sell order for debugging
 */
function debugOrdersCanMatch(buy, sell) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (!(+buy.side == +SaleKindInterface.Side.Buy && +sell.side == +SaleKindInterface.Side.Sell)) {
                throw new Error('Must be opposite-side');
            }
            if (!(buy.feeMethod == sell.feeMethod)) {
                throw new Error('Must use same fee method');
            }
            if (!(buy.paymentToken == sell.paymentToken)) {
                throw new Error('Must use same payment token');
            }
            if (!(sell.taker == utils_1.NULL_ADDRESS || sell.taker == buy.maker)) {
                throw new Error('Sell taker must be null or matching buy maker');
            }
            if (!(buy.taker == utils_1.NULL_ADDRESS || buy.taker == sell.maker)) {
                throw new Error('Buy taker must be null or matching sell maker');
            }
            if (!((sell.feeRecipient == utils_1.NULL_ADDRESS && buy.feeRecipient != utils_1.NULL_ADDRESS) || (sell.feeRecipient != utils_1.NULL_ADDRESS && buy.feeRecipient == utils_1.NULL_ADDRESS))) {
                throw new Error('One order must be maker and the other must be taker');
            }
            if (!(buy.target == sell.target)) {
                throw new Error('Must match target');
            }
            if (!(buy.howToCall == sell.howToCall)) {
                throw new Error('Must match howToCall');
            }
            if (!SaleKindInterface.canSettleOrder(+buy.listingTime, +buy.expirationTime)) {
                throw new Error("Buy-side order is set to the future or expired");
            }
            if (!SaleKindInterface.canSettleOrder(+sell.listingTime, +sell.expirationTime)) {
                throw new Error("Sell-side order is set to the future or expired");
            }
            // Handle default
            throw new Error('Unable to match offer with auction');
        });
    });
}
exports.debugOrdersCanMatch = debugOrdersCanMatch;
/**
 * Debug the `orderCalldataCanMatch` part of Wyvern
 * @param buy Buy order for debugging
 * @param sell Sell Order for debugging
 */
function debugOrderCalldataCanMatch(buy, sell) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            throw new Error('Unable to match offer data with auction data.');
        });
    });
}
exports.debugOrderCalldataCanMatch = debugOrderCalldataCanMatch;
//# sourceMappingURL=errors.js.map
'''
'''--- lib/index.d.ts ---
import { OpenSeaPort } from './seaport';
import { OpenSeaAPI } from './api';
import { Network, EventData, EventType } from './types';
export { orderToJSON, orderFromJSON, WyvernProtocol } from './utils/utils';
export { encodeCall, encodeSell, encodeAtomicizedBuy, encodeAtomicizedSell, encodeDefaultCall, encodeReplacementPattern, AbiType, } from './utils/schema';
/**
 * Example setup:
 *
 * import * as Web3 from 'web3'
 * import { OpenSeaPort, Network } from 'opensea-js'
 * const provider = new Web3.providers.HttpProvider('https://mainnet.infura.io')
 * const client = new OpenSeaPort(provider, {
 *   networkName: Network.Main
 * })
 */
export { OpenSeaPort, OpenSeaAPI, EventData, EventType, Network };

'''
'''--- lib/index.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Network = exports.EventType = exports.OpenSeaAPI = exports.OpenSeaPort = exports.AbiType = exports.encodeReplacementPattern = exports.encodeDefaultCall = exports.encodeAtomicizedSell = exports.encodeAtomicizedBuy = exports.encodeSell = exports.encodeCall = exports.WyvernProtocol = exports.orderFromJSON = exports.orderToJSON = void 0;
var seaport_1 = require("./seaport");
Object.defineProperty(exports, "OpenSeaPort", { enumerable: true, get: function () { return seaport_1.OpenSeaPort; } });
var api_1 = require("./api");
Object.defineProperty(exports, "OpenSeaAPI", { enumerable: true, get: function () { return api_1.OpenSeaAPI; } });
var types_1 = require("./types");
Object.defineProperty(exports, "Network", { enumerable: true, get: function () { return types_1.Network; } });
Object.defineProperty(exports, "EventType", { enumerable: true, get: function () { return types_1.EventType; } });
var utils_1 = require("./utils/utils");
Object.defineProperty(exports, "orderToJSON", { enumerable: true, get: function () { return utils_1.orderToJSON; } });
Object.defineProperty(exports, "orderFromJSON", { enumerable: true, get: function () { return utils_1.orderFromJSON; } });
Object.defineProperty(exports, "WyvernProtocol", { enumerable: true, get: function () { return utils_1.WyvernProtocol; } });
var schema_1 = require("./utils/schema");
Object.defineProperty(exports, "encodeCall", { enumerable: true, get: function () { return schema_1.encodeCall; } });
Object.defineProperty(exports, "encodeSell", { enumerable: true, get: function () { return schema_1.encodeSell; } });
Object.defineProperty(exports, "encodeAtomicizedBuy", { enumerable: true, get: function () { return schema_1.encodeAtomicizedBuy; } });
Object.defineProperty(exports, "encodeAtomicizedSell", { enumerable: true, get: function () { return schema_1.encodeAtomicizedSell; } });
Object.defineProperty(exports, "encodeDefaultCall", { enumerable: true, get: function () { return schema_1.encodeDefaultCall; } });
Object.defineProperty(exports, "encodeReplacementPattern", { enumerable: true, get: function () { return schema_1.encodeReplacementPattern; } });
Object.defineProperty(exports, "AbiType", { enumerable: true, get: function () { return schema_1.AbiType; } });
//# sourceMappingURL=index.js.map
'''
'''--- lib/seaport.d.ts ---
import { BigNumber } from 'bignumber.js';
import { EventSubscription } from 'fbemitter';
import * as Web3 from 'web3';
import { OpenSeaAPI } from './api';
import { Asset, ComputedFees, EventData, EventType, FeeMethod, OpenSeaAPIConfig, OpenSeaAsset, OpenSeaFungibleToken, Order, OrderSide, PartialReadonlyContractAbi, UnhashedOrder, UnsignedOrder, WyvernAsset, WyvernSchemaName } from './types';
export declare class OpenSeaPort {
    web3: Web3;
    web3ReadOnly: Web3;
    logger: (arg: string) => void;
    readonly api: OpenSeaAPI;
    gasPriceAddition: BigNumber;
    gasIncreaseFactor: number;
    private _networkName;
    private _wyvernProtocol;
    private _wyvernProtocolReadOnly;
    private _emitter;
    private _wrappedNFTFactoryAddress;
    private _wrappedNFTLiquidationProxyAddress;
    private _uniswapFactoryAddress;
    /**
     * Your very own seaport.
     * Create a new instance of OpenSeaJS.
     * @param provider Web3 Provider to use for transactions. For example:
     *  `const provider = new Web3.providers.HttpProvider('https://mainnet.infura.io')`
     * @param apiConfig configuration options, including `networkName`
     * @param logger logger, optional, a function that will be called with debugging
     *  information
     */
    constructor(provider: Web3.Provider, apiConfig?: OpenSeaAPIConfig, logger?: (arg: string) => void);
    /**
     * Add a listener to a marketplace event
     * @param event An event to listen for
     * @param listener A callback that will accept an object with event data
     * @param once Whether the listener should only be called once
     */
    addListener(event: EventType, listener: (data: EventData) => void, once?: boolean): EventSubscription;
    /**
     * Remove an event listener, included here for completeness.
     * Simply calls `.remove()` on a subscription
     * @param subscription The event subscription returned from `addListener`
     */
    removeListener(subscription: EventSubscription): void;
    /**
     * Remove all event listeners. Good idea to call this when you're unmounting
     * a component that listens to events to make UI updates
     * @param event Optional EventType to remove listeners for
     */
    removeAllListeners(event?: EventType): void;
    /**
     * Wraps an arbirary group of NFTs into their corresponding WrappedNFT ERC20 tokens.
     * Emits the `WrapAssets` event when the transaction is prompted.
     * @param param0 __namedParameters Object
     * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to bundle together.
     * @param accountAddress Address of the user's wallet
     */
    wrapAssets({ assets, accountAddress }: {
        assets: Asset[];
        accountAddress: string;
    }): Promise<void>;
    /**
     * Unwraps an arbirary group of NFTs from their corresponding WrappedNFT ERC20 tokens back into ERC721 tokens.
     * Emits the `UnwrapAssets` event when the transaction is prompted.
     * @param param0 __namedParameters Object
     * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to bundle together.
     * @param destinationAddresses Addresses that each resulting ERC721 token will be sent to. Must be the same length as `tokenIds`. Each address corresponds with its respective token ID in the `tokenIds` array.
     * @param accountAddress Address of the user's wallet
     */
    unwrapAssets({ assets, destinationAddresses, accountAddress }: {
        assets: Asset[];
        destinationAddresses: string[];
        accountAddress: string;
    }): Promise<void>;
    /**
     * Liquidates an arbirary group of NFTs by atomically wrapping them into their
     * corresponding WrappedNFT ERC20 tokens, and then immediately selling those
     * ERC20 tokens on their corresponding Uniswap exchange.
     * Emits the `LiquidateAssets` event when the transaction is prompted.
     * @param param0 __namedParameters Object
     * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to bundle together.
     * @param accountAddress Address of the user's wallet
     * @param uniswapSlippageAllowedInBasisPoints The amount of slippage that a user will tolerate in their Uniswap trade; if Uniswap cannot fulfill the order without more slippage, the whole function will revert.
     */
    liquidateAssets({ assets, accountAddress, uniswapSlippageAllowedInBasisPoints }: {
        assets: Asset[];
        accountAddress: string;
        uniswapSlippageAllowedInBasisPoints: number;
    }): Promise<void>;
    /**
     * Purchases a bundle of WrappedNFT tokens from Uniswap and then unwraps them into ERC721 tokens.
     * Emits the `PurchaseAssets` event when the transaction is prompted.
     * @param param0 __namedParameters Object
     * @param numTokensToBuy The number of WrappedNFT tokens to purchase and unwrap
     * @param amount The estimated cost in wei for tokens (probably some ratio above the minimum amount to avoid the transaction failing due to frontrunning, minimum amount is found by calling UniswapExchange(uniswapAddress).getEthToTokenOutputPrice(numTokensToBuy.mul(10**18));
     * @param contractAddress Address of the corresponding NFT core contract for these NFTs.
     * @param accountAddress Address of the user's wallet
     */
    purchaseAssets({ numTokensToBuy, amount, contractAddress, accountAddress }: {
        numTokensToBuy: number;
        amount: BigNumber;
        contractAddress: string;
        accountAddress: string;
    }): Promise<void>;
    /**
     * Gets the estimated cost or payout of either buying or selling NFTs to Uniswap using either purchaseAssts() or liquidateAssets()
     * @param param0 __namedParameters Object
     * @param numTokens The number of WrappedNFT tokens to either purchase or sell
     * @param isBuying A bool for whether the user is buying or selling
     * @param contractAddress Address of the corresponding NFT core contract for these NFTs.
     */
    getQuoteFromUniswap({ numTokens, isBuying, contractAddress }: {
        numTokens: number;
        isBuying: boolean;
        contractAddress: string;
    }): Promise<number>;
    /**
     * Wrap ETH into W-ETH.
     * W-ETH is needed for placing buy orders (making offers).
     * Emits the `WrapEth` event when the transaction is prompted.
     * @param param0 __namedParameters Object
     * @param amountInEth How much ether to wrap
     * @param accountAddress Address of the user's wallet containing the ether
     */
    wrapEth({ amountInEth, accountAddress }: {
        amountInEth: number;
        accountAddress: string;
    }): Promise<void>;
    /**
     * Unwrap W-ETH into ETH.
     * Emits the `UnwrapWeth` event when the transaction is prompted.
     * @param param0 __namedParameters Object
     * @param amountInEth How much W-ETH to unwrap
     * @param accountAddress Address of the user's wallet containing the W-ETH
     */
    unwrapWeth({ amountInEth, accountAddress }: {
        amountInEth: number;
        accountAddress: string;
    }): Promise<void>;
    /**
     * Create a buy order to make an offer on a bundle or group of assets.
     * Will throw an 'Insufficient balance' error if the maker doesn't have enough W-ETH to make the offer.
     * If the user hasn't approved W-ETH access yet, this will emit `ApproveCurrency` before asking for approval.
     * @param param0 __namedParameters Object
     * @param assets Array of Asset objects to bid on
     * @param collection Optional collection for computing fees, required only if all assets belong to the same collection
     * @param quantities The quantity of each asset to sell. Defaults to 1 for each.
     * @param accountAddress Address of the maker's wallet
     * @param startAmount Value of the offer, in units of the payment token (or wrapped ETH if no payment token address specified)
     * @param expirationTime Expiration time for the order, in seconds. An expiration time of 0 means "never expire"
     * @param paymentTokenAddress Optional address for using an ERC-20 token in the order. If unspecified, defaults to W-ETH
     * @param sellOrder Optional sell order (like an English auction) to ensure fee and schema compatibility
     * @param referrerAddress The optional address that referred the order
     */
    createBundleBuyOrder({ assets, collection, quantities, accountAddress, startAmount, expirationTime, paymentTokenAddress, sellOrder, referrerAddress }: {
        assets: Asset[];
        collection?: {
            slug: string;
        };
        quantities?: number[];
        accountAddress: string;
        startAmount: number;
        expirationTime?: number;
        paymentTokenAddress?: string;
        sellOrder?: Order;
        referrerAddress?: string;
    }): Promise<Order>;
    /**
     * Create a buy order to make an offer on an asset.
     * Will throw an 'Insufficient balance' error if the maker doesn't have enough W-ETH to make the offer.
     * If the user hasn't approved W-ETH access yet, this will emit `ApproveCurrency` before asking for approval.
     * @param param0 __namedParameters Object
     * @param asset The asset to trade
     * @param accountAddress Address of the maker's wallet
     * @param startAmount Value of the offer, in units of the payment token (or wrapped ETH if no payment token address specified)
     * @param quantity The number of assets to bid for (if fungible or semi-fungible). Defaults to 1. In units, not base units, e.g. not wei.
     * @param expirationTime Expiration time for the order, in seconds. An expiration time of 0 means "never expire"
     * @param paymentTokenAddress Optional address for using an ERC-20 token in the order. If unspecified, defaults to W-ETH
     * @param sellOrder Optional sell order (like an English auction) to ensure fee and schema compatibility
     * @param referrerAddress The optional address that referred the order
     */
    createBuyOrder({ asset, accountAddress, startAmount, quantity, expirationTime, paymentTokenAddress, sellOrder, referrerAddress }: {
        asset: Asset;
        accountAddress: string;
        startAmount: number;
        quantity?: number;
        expirationTime?: number;
        paymentTokenAddress?: string;
        sellOrder?: Order;
        referrerAddress?: string;
    }): Promise<Order>;
    /**
     * Create a sell order to auction an asset.
     * Will throw a 'You do not own enough of this asset' error if the maker doesn't have the asset or not enough of it to sell the specific `quantity`.
     * If the user hasn't approved access to the token yet, this will emit `ApproveAllAssets` (or `ApproveAsset` if the contract doesn't support approve-all) before asking for approval.
     * @param param0 __namedParameters Object
     * @param tokenId DEPRECATED: Token ID. Use `asset` instead.
     * @param tokenAddress DEPRECATED: Address of the token's contract. Use `asset` instead.
     * @param asset The asset to trade
     * @param accountAddress Address of the maker's wallet
     * @param startAmount Price of the asset at the start of the auction. Units are in the amount of a token above the token's decimal places (integer part). For example, for ether, expected units are in ETH, not wei.
     * @param endAmount Optional price of the asset at the end of its expiration time. Units are in the amount of a token above the token's decimal places (integer part). For example, for ether, expected units are in ETH, not wei.
     * @param quantity The number of assets to sell (if fungible or semi-fungible). Defaults to 1. In units, not base units, e.g. not wei.
     * @param listingTime Optional time when the order will become fulfillable, in UTC seconds. Undefined means it will start now.
     * @param expirationTime Expiration time for the order, in UTC seconds. An expiration time of 0 means "never expire."
     * @param waitForHighestBid If set to true, this becomes an English auction that increases in price for every bid. The highest bid wins when the auction expires, as long as it's at least `startAmount`. `expirationTime` must be > 0.
     * @param englishAuctionReservePrice Optional price level, below which orders may be placed but will not be matched.  Orders below the reserve can be manually accepted but will not be automatically matched.
     * @param paymentTokenAddress Address of the ERC-20 token to accept in return. If undefined or null, uses Ether.
     * @param extraBountyBasisPoints Optional basis points (1/100th of a percent) to reward someone for referring the fulfillment of this order
     * @param buyerAddress Optional address that's allowed to purchase this item. If specified, no other address will be able to take the order, unless its value is the null address.
     * @param buyerEmail Optional email of the user that's allowed to purchase this item. If specified, a user will have to verify this email before being able to take the order.
     */
    createSellOrder({ asset, accountAddress, startAmount, endAmount, quantity, listingTime, expirationTime, waitForHighestBid, englishAuctionReservePrice, paymentTokenAddress, extraBountyBasisPoints, buyerAddress, buyerEmail }: {
        asset: Asset;
        accountAddress: string;
        startAmount: number;
        endAmount?: number;
        quantity?: number;
        listingTime?: number;
        expirationTime?: number;
        waitForHighestBid?: boolean;
        englishAuctionReservePrice?: number;
        paymentTokenAddress?: string;
        extraBountyBasisPoints?: number;
        buyerAddress?: string;
        buyerEmail?: string;
    }): Promise<Order>;
    /**
     * Create multiple sell orders in bulk to auction assets out of an asset factory.
     * Will throw a 'You do not own this asset' error if the maker doesn't own the factory.
     * Items will mint to users' wallets only when they buy them. See https://docs.opensea.io/docs/opensea-initial-item-sale-tutorial for more info.
     * If the user hasn't approved access to the token yet, this will emit `ApproveAllAssets` (or `ApproveAsset` if the contract doesn't support approve-all) before asking for approval.
     * @param param0 __namedParameters Object
     * @param assets Which assets you want to post orders for. Use the tokenAddress of your factory contract
     * @param accountAddress Address of the factory owner's wallet
     * @param startAmount Price of the asset at the start of the auction, or minimum acceptable bid if it's an English auction. Units are in the amount of a token above the token's decimal places (integer part). For example, for ether, expected units are in ETH, not wei.
     * @param endAmount Optional price of the asset at the end of its expiration time. If not specified, will be set to `startAmount`. Units are in the amount of a token above the token's decimal places (integer part). For example, for ether, expected units are in ETH, not wei.
     * @param quantity The number of assets to sell at one time (if fungible or semi-fungible). Defaults to 1. In units, not base units, e.g. not wei.
     * @param listingTime Optional time when the order will become fulfillable, in UTC seconds. Undefined means it will start now.
     * @param expirationTime Expiration time for the order, in seconds. An expiration time of 0 means "never expire."
     * @param waitForHighestBid If set to true, this becomes an English auction that increases in price for every bid. The highest bid wins when the auction expires, as long as it's at least `startAmount`. `expirationTime` must be > 0.
     * @param paymentTokenAddress Address of the ERC-20 token to accept in return. If undefined or null, uses Ether.
     * @param extraBountyBasisPoints Optional basis points (1/100th of a percent) to reward someone for referring the fulfillment of each order
     * @param buyerAddress Optional address that's allowed to purchase each item. If specified, no other address will be able to take each order.
     * @param buyerEmail Optional email of the user that's allowed to purchase each item. If specified, a user will have to verify this email before being able to take each order.
     * @param numberOfOrders Number of times to repeat creating the same order for each asset. If greater than 5, creates them in batches of 5. Requires an `apiKey` to be set during seaport initialization in order to not be throttled by the API.
     * @returns The number of orders created in total
     */
    createFactorySellOrders({ assets, accountAddress, startAmount, endAmount, quantity, listingTime, expirationTime, waitForHighestBid, paymentTokenAddress, extraBountyBasisPoints, buyerAddress, buyerEmail, numberOfOrders }: {
        assets: Asset[];
        accountAddress: string;
        startAmount: number;
        endAmount?: number;
        quantity?: number;
        listingTime?: number;
        expirationTime?: number;
        waitForHighestBid?: boolean;
        paymentTokenAddress?: string;
        extraBountyBasisPoints?: number;
        buyerAddress?: string;
        buyerEmail?: string;
        numberOfOrders?: number;
    }): Promise<number>;
    /**
     * Create a sell order to auction a bundle of assets.
     * Will throw a 'You do not own this asset' error if the maker doesn't have one of the assets.
     * If the user hasn't approved access to any of the assets yet, this will emit `ApproveAllAssets` (or `ApproveAsset` if the contract doesn't support approve-all) before asking for approval for each asset.
     * @param param0 __namedParameters Object
     * @param bundleName Name of the bundle
     * @param bundleDescription Optional description of the bundle. Markdown is allowed.
     * @param bundleExternalLink Optional link to a page that adds context to the bundle.
     * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to bundle together.
     * @param collection Optional collection for computing fees, required only if all assets belong to the same collection
     * @param quantities The quantity of each asset to sell. Defaults to 1 for each.
     * @param accountAddress The address of the maker of the bundle and the owner of all the assets.
     * @param startAmount Price of the asset at the start of the auction, or minimum acceptable bid if it's an English auction.
     * @param endAmount Optional price of the asset at the end of its expiration time. If not specified, will be set to `startAmount`.
     * @param listingTime Optional time when the order will become fulfillable, in UTC seconds. Undefined means it will start now.
     * @param expirationTime Expiration time for the order, in seconds. An expiration time of 0 means "never expire."
     * @param waitForHighestBid If set to true, this becomes an English auction that increases in price for every bid. The highest bid wins when the auction expires, as long as it's at least `startAmount`. `expirationTime` must be > 0.
     * @param englishAuctionReservePrice Optional price level, below which orders may be placed but will not be matched.  Orders below the reserve can be manually accepted but will not be automatically matched.
     * @param paymentTokenAddress Address of the ERC-20 token to accept in return. If undefined or null, uses Ether.
     * @param extraBountyBasisPoints Optional basis points (1/100th of a percent) to reward someone for referring the fulfillment of this order
     * @param buyerAddress Optional address that's allowed to purchase this bundle. If specified, no other address will be able to take the order, unless it's the null address.
     */
    createBundleSellOrder({ bundleName, bundleDescription, bundleExternalLink, assets, collection, quantities, accountAddress, startAmount, endAmount, expirationTime, listingTime, waitForHighestBid, englishAuctionReservePrice, paymentTokenAddress, extraBountyBasisPoints, buyerAddress }: {
        bundleName: string;
        bundleDescription?: string;
        bundleExternalLink?: string;
        assets: Asset[];
        collection?: {
            slug: string;
        };
        quantities?: number[];
        accountAddress: string;
        startAmount: number;
        endAmount?: number;
        listingTime?: number;
        expirationTime?: number;
        waitForHighestBid?: boolean;
        englishAuctionReservePrice?: number;
        paymentTokenAddress?: string;
        extraBountyBasisPoints?: number;
        buyerAddress?: string;
    }): Promise<Order>;
    /**
     * Fullfill or "take" an order for an asset, either a buy or sell order
     * @param param0 __namedParamaters Object
     * @param order The order to fulfill, a.k.a. "take"
     * @param accountAddress The taker's wallet address
     * @param recipientAddress The optional address to receive the order's item(s) or curriencies. If not specified, defaults to accountAddress.
     * @param referrerAddress The optional address that referred the order
     * @returns Transaction hash for fulfilling the order
     */
    fulfillOrder({ order, accountAddress, recipientAddress, referrerAddress }: {
        order: Order;
        accountAddress: string;
        recipientAddress?: string;
        referrerAddress?: string;
    }): Promise<string>;
    /**
     * Cancel an order on-chain, preventing it from ever being fulfilled.
     * @param param0 __namedParameters Object
     * @param order The order to cancel
     * @param accountAddress The order maker's wallet address
     */
    cancelOrder({ order, accountAddress }: {
        order: Order;
        accountAddress: string;
    }): Promise<void>;
    /**
     * Approve a non-fungible token for use in trades.
     * Requires an account to be initialized first.
     * Called internally, but exposed for dev flexibility.
     * Checks to see if already approved, first. Then tries different approval methods from best to worst.
     * @param param0 __namedParamters Object
     * @param tokenId Token id to approve, but only used if approve-all isn't
     *  supported by the token contract
     * @param tokenAddress The contract address of the token being approved
     * @param accountAddress The user's wallet address
     * @param proxyAddress Address of the user's proxy contract. If not provided,
     *  will attempt to fetch it from Wyvern.
     * @param tokenAbi ABI of the token's contract. Defaults to a flexible ERC-721
     *  contract.
     * @param skipApproveAllIfTokenAddressIn an optional list of token addresses that, if a token is approve-all type, will skip approval
     * @param schemaName The Wyvern schema name corresponding to the asset type
     * @returns Transaction hash if a new transaction was created, otherwise null
     */
    approveSemiOrNonFungibleToken({ tokenId, tokenAddress, accountAddress, proxyAddress, tokenAbi, skipApproveAllIfTokenAddressIn, schemaName }: {
        tokenId: string;
        tokenAddress: string;
        accountAddress: string;
        proxyAddress?: string;
        tokenAbi?: PartialReadonlyContractAbi;
        skipApproveAllIfTokenAddressIn?: Set<string>;
        schemaName?: WyvernSchemaName;
    }): Promise<string | null>;
    /**
     * Approve a fungible token (e.g. W-ETH) for use in trades.
     * Called internally, but exposed for dev flexibility.
     * Checks to see if the minimum amount is already approved, first.
     * @param param0 __namedParamters Object
     * @param accountAddress The user's wallet address
     * @param tokenAddress The contract address of the token being approved
     * @param proxyAddress The user's proxy address. If unspecified, uses the Wyvern token transfer proxy address.
     * @param minimumAmount The minimum amount needed to skip a transaction. Defaults to the max-integer.
     * @returns Transaction hash if a new transaction occurred, otherwise null
     */
    approveFungibleToken({ accountAddress, tokenAddress, proxyAddress, minimumAmount }: {
        accountAddress: string;
        tokenAddress: string;
        proxyAddress?: string;
        minimumAmount?: BigNumber;
    }): Promise<string | null>;
    /**
     * Un-approve a fungible token (e.g. W-ETH) for use in trades.
     * Called internally, but exposed for dev flexibility.
     * Useful for old ERC20s that require a 0 approval count before
     * changing the count
     * @param param0 __namedParamters Object
     * @param accountAddress The user's wallet address
     * @param tokenAddress The contract address of the token being approved
     * @param proxyAddress The user's proxy address. If unspecified, uses the Wyvern token transfer proxy address.
     * @returns Transaction hash
     */
    unapproveFungibleToken({ accountAddress, tokenAddress, proxyAddress }: {
        accountAddress: string;
        tokenAddress: string;
        proxyAddress?: string;
    }): Promise<string>;
    /**
     * Gets the price for the order using the contract
     * @param order The order to calculate the price for
     */
    getCurrentPrice(order: Order): Promise<BigNumber>;
    /**
     * Returns whether an order is fulfillable.
     * An order may not be fulfillable if a target item's transfer function
     * is locked for some reason, e.g. an item is being rented within a game
     * or trading has been locked for an item type.
     * @param param0 __namedParamters Object
     * @param order Order to check
     * @param accountAddress The account address that will be fulfilling the order
     * @param recipientAddress The optional address to receive the order's item(s) or curriencies. If not specified, defaults to accountAddress.
     * @param referrerAddress The optional address that referred the order
     */
    isOrderFulfillable({ order, accountAddress, recipientAddress, referrerAddress }: {
        order: Order;
        accountAddress: string;
        recipientAddress?: string;
        referrerAddress?: string;
    }): Promise<boolean>;
    /**
     * Returns whether an asset is transferrable.
     * An asset may not be transferrable if its transfer function
     * is locked for some reason, e.g. an item is being rented within a game
     * or trading has been locked for an item type.
     * @param param0 __namedParamters Object
     * @param tokenId DEPRECATED: Token ID. Use `asset` instead.
     * @param tokenAddress DEPRECATED: Address of the token's contract. Use `asset` instead.
     * @param asset The asset to trade
     * @param fromAddress The account address that currently owns the asset
     * @param toAddress The account address that will be acquiring the asset
     * @param quantity The amount of the asset to transfer, if it's fungible (optional). In units (not base units), e.g. not wei.
     * @param useProxy Use the `fromAddress`'s proxy contract only if the `fromAddress` has already approved the asset for sale. Required if checking an ERC-721 v1 asset (like CryptoKitties) that doesn't check if the transferFrom caller is the owner of the asset (only allowing it if it's an approved address).
     * @param retries How many times to retry if false
     */
    isAssetTransferrable({ asset, fromAddress, toAddress, quantity, useProxy }: {
        asset: Asset;
        fromAddress: string;
        toAddress: string;
        quantity?: number | BigNumber;
        useProxy?: boolean;
    }, retries?: number): Promise<boolean>;
    /**
     * Transfer a fungible or non-fungible asset to another address
     * @param param0 __namedParamaters Object
     * @param fromAddress The owner's wallet address
     * @param toAddress The recipient's wallet address
     * @param asset The fungible or non-fungible asset to transfer
     * @param quantity The amount of the asset to transfer, if it's fungible (optional). In units (not base units), e.g. not wei.
     * @returns Transaction hash
     */
    transfer({ fromAddress, toAddress, asset, quantity }: {
        fromAddress: string;
        toAddress: string;
        asset: Asset;
        quantity?: number | BigNumber;
    }): Promise<string>;
    /**
     * Transfer one or more assets to another address.
     * ERC-721 and ERC-1155 assets are supported
     * @param param0 __namedParamaters Object
     * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to transfer.
     * @param fromAddress The owner's wallet address
     * @param toAddress The recipient's wallet address
     * @param schemaName The Wyvern schema name corresponding to the asset type, if not in each Asset definition
     * @returns Transaction hash
     */
    transferAll({ assets, fromAddress, toAddress, schemaName }: {
        assets: Asset[];
        fromAddress: string;
        toAddress: string;
        schemaName?: WyvernSchemaName;
    }): Promise<string>;
    /**
     * Get known payment tokens (ERC-20) that match your filters.
     * @param param0 __namedParamters Object
     * @param symbol Filter by the ERC-20 symbol for the token,
     *    e.g. "DAI" for Dai stablecoin
     * @param address Filter by the ERC-20 contract address for the token,
     *    e.g. "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359" for Dai
     * @param name Filter by the name of the ERC-20 contract.
     *    Not guaranteed to exist or be unique for each token type.
     *    e.g. '' for Dai and 'Decentraland' for MANA
     * FUTURE: officiallySupported: Filter for tokens that are
     *    officially supported and shown on opensea.io
     */
    getFungibleTokens({ symbol, address, name }?: {
        symbol?: string;
        address?: string;
        name?: string;
    }): Promise<OpenSeaFungibleToken[]>;
    /**
     * Get an account's balance of any Asset.
     * @param param0 __namedParameters Object
     * @param accountAddress Account address to check
     * @param asset The Asset to check balance for
     * @param retries How many times to retry if balance is 0
     */
    getAssetBalance({ accountAddress, asset }: {
        accountAddress: string;
        asset: Asset;
    }, retries?: number): Promise<BigNumber>;
    /**
     * Get the balance of a fungible token.
     * Convenience method for getAssetBalance for fungibles
     * @param param0 __namedParameters Object
     * @param accountAddress Account address to check
     * @param tokenAddress The address of the token to check balance for
     * @param schemaName Optional schema name for the fungible token
     * @param retries Number of times to retry if balance is undefined
     */
    getTokenBalance({ accountAddress, tokenAddress, schemaName }: {
        accountAddress: string;
        tokenAddress: string;
        schemaName?: WyvernSchemaName;
    }, retries?: number): Promise<BigNumber>;
    /**
     * Compute the fees for an order
     * @param param0 __namedParameters
     * @param asset Asset to use for fees. May be blank ONLY for multi-collection bundles.
     * @param side The side of the order (buy or sell)
     * @param accountAddress The account to check fees for (useful if fees differ by account, like transfer fees)
     * @param extraBountyBasisPoints The basis points to add for the bounty. Will throw if it exceeds the assets' contract's OpenSea fee.
     */
    computeFees({ asset, side, accountAddress, extraBountyBasisPoints }: {
        asset?: OpenSeaAsset;
        side: OrderSide;
        accountAddress?: string;
        extraBountyBasisPoints?: number;
    }): Promise<ComputedFees>;
    /**
     * Validate and post an order to the OpenSea orderbook.
     * @param order The order to post. Can either be signed by the maker or pre-approved on the Wyvern contract using approveOrder. See https://github.com/ProjectWyvern/wyvern-ethereum/blob/master/contracts/exchange/Exchange.sol#L178
     * @returns The order as stored by the orderbook
     */
    validateAndPostOrder(order: Order): Promise<Order>;
    /**
     * DEPRECATED: ERC-1559
     * https://eips.ethereum.org/EIPS/eip-1559
     * Compute the gas price for sending a txn, in wei
     * Will be slightly above the mean to make it faster
     */
    _computeGasPrice(): Promise<BigNumber>;
    /**
     * Compute the gas amount for sending a txn
     * Will be slightly above the result of estimateGas to make it more reliable
     * @param estimation The result of estimateGas for a transaction
     */
    _correctGasAmount(estimation: number): number;
    /**
     * Estimate the gas needed to match two orders. Returns undefined if tx errors
     * @param param0 __namedParamaters Object
     * @param buy The buy order to match
     * @param sell The sell order to match
     * @param accountAddress The taker's wallet address
     * @param metadata Metadata bytes32 to send with the match
     * @param retries Number of times to retry if false
     */
    _estimateGasForMatch({ buy, sell, accountAddress, metadata }: {
        buy: Order;
        sell: Order;
        accountAddress: string;
        metadata?: string;
    }, retries?: number): Promise<number | undefined>;
    /**
     * Estimate the gas needed to transfer assets in bulk
     * Used for tests
     * @param param0 __namedParamaters Object
     * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to transfer.
     * @param fromAddress The owner's wallet address
     * @param toAddress The recipient's wallet address
     * @param schemaName The Wyvern schema name corresponding to the asset type, if not in each asset
     */
    _estimateGasForTransfer({ assets, fromAddress, toAddress, schemaName }: {
        assets: Asset[];
        fromAddress: string;
        toAddress: string;
        schemaName?: WyvernSchemaName;
    }): Promise<number>;
    /**
     * Get the proxy address for a user's wallet.
     * Internal method exposed for dev flexibility.
     * @param accountAddress The user's wallet address
     * @param retries Optional number of retries to do
     */
    _getProxy(accountAddress: string, retries?: number): Promise<string | null>;
    /**
     * Initialize the proxy for a user's wallet.
     * Proxies are used to make trades on behalf of the order's maker so that
     *  trades can happen when the maker isn't online.
     * Internal method exposed for dev flexibility.
     * @param accountAddress The user's wallet address
     */
    _initializeProxy(accountAddress: string): Promise<string>;
    /**
     * For a fungible token to use in trades (like W-ETH), get the amount
     *  approved for use by the Wyvern transfer proxy.
     * Internal method exposed for dev flexibility.
     * @param param0 __namedParamters Object
     * @param accountAddress Address for the user's wallet
     * @param tokenAddress Address for the token's contract
     * @param proxyAddress User's proxy address. If undefined, uses the token transfer proxy address
     */
    _getApprovedTokenCount({ accountAddress, tokenAddress, proxyAddress }: {
        accountAddress: string;
        tokenAddress?: string;
        proxyAddress?: string;
    }): Promise<BigNumber>;
    _makeBuyOrder({ asset, quantity, accountAddress, startAmount, expirationTime, paymentTokenAddress, extraBountyBasisPoints, sellOrder, referrerAddress }: {
        asset: Asset;
        quantity: number;
        accountAddress: string;
        startAmount: number;
        expirationTime: number;
        paymentTokenAddress: string;
        extraBountyBasisPoints: number;
        sellOrder?: UnhashedOrder;
        referrerAddress?: string;
    }): Promise<UnhashedOrder>;
    _makeSellOrder({ asset, quantity, accountAddress, startAmount, endAmount, listingTime, expirationTime, waitForHighestBid, englishAuctionReservePrice, paymentTokenAddress, extraBountyBasisPoints, buyerAddress }: {
        asset: Asset;
        quantity: number;
        accountAddress: string;
        startAmount: number;
        endAmount?: number;
        waitForHighestBid: boolean;
        englishAuctionReservePrice?: number;
        listingTime?: number;
        expirationTime: number;
        paymentTokenAddress: string;
        extraBountyBasisPoints: number;
        buyerAddress: string;
    }): Promise<UnhashedOrder>;
    _getStaticCallTargetAndExtraData({ asset, useTxnOriginStaticCall }: {
        asset: OpenSeaAsset;
        useTxnOriginStaticCall: boolean;
    }): Promise<{
        staticTarget: string;
        staticExtradata: string;
    }>;
    _makeBundleBuyOrder({ assets, collection, quantities, accountAddress, startAmount, expirationTime, paymentTokenAddress, extraBountyBasisPoints, sellOrder, referrerAddress }: {
        assets: Asset[];
        collection?: {
            slug: string;
        };
        quantities: number[];
        accountAddress: string;
        startAmount: number;
        expirationTime: number;
        paymentTokenAddress: string;
        extraBountyBasisPoints: number;
        sellOrder?: UnhashedOrder;
        referrerAddress?: string;
    }): Promise<UnhashedOrder>;
    _makeBundleSellOrder({ bundleName, bundleDescription, bundleExternalLink, assets, collection, quantities, accountAddress, startAmount, endAmount, listingTime, expirationTime, waitForHighestBid, englishAuctionReservePrice, paymentTokenAddress, extraBountyBasisPoints, buyerAddress }: {
        bundleName: string;
        bundleDescription?: string;
        bundleExternalLink?: string;
        assets: Asset[];
        collection?: {
            slug: string;
        };
        quantities: number[];
        accountAddress: string;
        startAmount: number;
        endAmount?: number;
        listingTime?: number;
        expirationTime: number;
        waitForHighestBid: boolean;
        englishAuctionReservePrice?: number;
        paymentTokenAddress: string;
        extraBountyBasisPoints: number;
        buyerAddress: string;
    }): Promise<UnhashedOrder>;
    _makeMatchingOrder({ order, accountAddress, recipientAddress }: {
        order: UnsignedOrder;
        accountAddress: string;
        recipientAddress: string;
    }): UnsignedOrder;
    /**
     * Validate against Wyvern that a buy and sell order can match
     * @param param0 __namedParamters Object
     * @param buy The buy order to validate
     * @param sell The sell order to validate
     * @param accountAddress Address for the user's wallet
     * @param shouldValidateBuy Whether to validate the buy order individually.
     * @param shouldValidateSell Whether to validate the sell order individually.
     * @param retries How many times to retry if validation fails
     */
    _validateMatch({ buy, sell, accountAddress, shouldValidateBuy, shouldValidateSell }: {
        buy: Order;
        sell: Order;
        accountAddress: string;
        shouldValidateBuy?: boolean;
        shouldValidateSell?: boolean;
    }, retries?: number): Promise<boolean>;
    _createEmailWhitelistEntry({ order, buyerEmail }: {
        order: UnhashedOrder;
        buyerEmail: string;
    }): Promise<void>;
    _sellOrderValidationAndApprovals({ order, accountAddress }: {
        order: UnhashedOrder;
        accountAddress: string;
    }): Promise<void>;
    /**
     * Instead of signing an off-chain order, you can approve an order
     * with on on-chain transaction using this method
     * @param order Order to approve
     * @returns Transaction hash of the approval transaction
     */
    _approveOrder(order: UnsignedOrder): Promise<string>;
    _validateOrder(order: Order): Promise<boolean>;
    _approveAll({ schemaNames, wyAssets, accountAddress, proxyAddress }: {
        schemaNames: WyvernSchemaName[];
        wyAssets: WyvernAsset[];
        accountAddress: string;
        proxyAddress?: string;
    }): Promise<(string | null)[]>;
    _buyOrderValidationAndApprovals({ order, counterOrder, accountAddress }: {
        order: UnhashedOrder;
        counterOrder?: Order;
        accountAddress: string;
    }): Promise<void>;
    /**
     * Check if an account, or its proxy, owns an asset on-chain
     * @param accountAddress Account address for the wallet
     * @param proxyAddress Proxy address for the account
     * @param wyAsset asset to check. If fungible, the `quantity` attribute will be the minimum amount to own
     * @param schemaName WyvernSchemaName for the asset
     */
    _ownsAssetOnChain({ accountAddress, proxyAddress, wyAsset, schemaName }: {
        accountAddress: string;
        proxyAddress?: string | null;
        wyAsset: WyvernAsset;
        schemaName: WyvernSchemaName;
    }): Promise<boolean>;
    _getBuyFeeParameters(totalBuyerFeeBasisPoints: number, totalSellerFeeBasisPoints: number, sellOrder?: UnhashedOrder): {
        makerRelayerFee: BigNumber;
        takerRelayerFee: BigNumber;
        makerProtocolFee: BigNumber;
        takerProtocolFee: BigNumber;
        makerReferrerFee: BigNumber;
        feeRecipient: string;
        feeMethod: FeeMethod;
    };
    _getSellFeeParameters(totalBuyerFeeBasisPoints: number, totalSellerFeeBasisPoints: number, waitForHighestBid: boolean, sellerBountyBasisPoints?: number): {
        makerRelayerFee: BigNumber;
        takerRelayerFee: BigNumber;
        makerProtocolFee: BigNumber;
        takerProtocolFee: BigNumber;
        makerReferrerFee: BigNumber;
        feeRecipient: string;
        feeMethod: FeeMethod;
    };
    /**
     * Validate fee parameters
     * @param totalBuyerFeeBasisPoints Total buyer fees
     * @param totalSellerFeeBasisPoints Total seller fees
     */
    private _validateFees;
    /**
     * Get the listing and expiration time paramters for a new order
     * @param expirationTimestamp Timestamp to expire the order (in seconds), or 0 for non-expiring
     * @param listingTimestamp Timestamp to start the order (in seconds), or undefined to start it now
     * @param waitingForBestCounterOrder Whether this order should be hidden until the best match is found
     */
    private _getTimeParameters;
    /**
     * Compute the `basePrice` and `extra` parameters to be used to price an order.
     * Also validates the expiration time and auction type.
     * @param tokenAddress Address of the ERC-20 token to use for trading.
     * Use the null address for ETH
     * @param expirationTime When the auction expires, or 0 if never.
     * @param startAmount The base value for the order, in the token's main units (e.g. ETH instead of wei)
     * @param endAmount The end value for the order, in the token's main units (e.g. ETH instead of wei). If unspecified, the order's `extra` attribute will be 0
     */
    private _getPriceParameters;
    private _getMetadata;
    private _atomicMatch;
    private _getRequiredAmountForTakingSellOrder;
    private _authorizeOrder;
    private _getSchema;
    private _dispatch;
    /**
     * Get the clients to use for a read call
     * @param retries current retry value
     */
    private _getClientsForRead;
    private _confirmTransaction;
    private _pollCallbackForConfirmation;
}

'''
'''--- lib/seaport.js ---
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenSeaPort = void 0;
var bignumber_js_1 = require("bignumber.js");
var ethereumjs_util_1 = require("ethereumjs-util");
var fbemitter_1 = require("fbemitter");
var _ = require("lodash");
var Web3 = require("web3");
var wyvern_js_1 = require("wyvern-js");
var WyvernSchemas = require("wyvern-schemas");
var api_1 = require("./api");
var constants_1 = require("./constants");
var contracts_1 = require("./contracts");
var debugging_1 = require("./debugging");
var types_1 = require("./types");
var schema_1 = require("./utils/schema");
var utils_1 = require("./utils/utils");
var OpenSeaPort = /** @class */ (function () {
    /**
     * Your very own seaport.
     * Create a new instance of OpenSeaJS.
     * @param provider Web3 Provider to use for transactions. For example:
     *  `const provider = new Web3.providers.HttpProvider('https://mainnet.infura.io')`
     * @param apiConfig configuration options, including `networkName`
     * @param logger logger, optional, a function that will be called with debugging
     *  information
     */
    function OpenSeaPort(provider, apiConfig, logger) {
        if (apiConfig === void 0) { apiConfig = {}; }
        // Extra gwei to add to the mean gas price when making transactions
        this.gasPriceAddition = new bignumber_js_1.BigNumber(3);
        // Multiply gas estimate by this factor when making transactions
        this.gasIncreaseFactor = constants_1.DEFAULT_GAS_INCREASE_FACTOR;
        // API config
        apiConfig.networkName = apiConfig.networkName || types_1.Network.Main;
        apiConfig.gasPrice = apiConfig.gasPrice;
        this.api = new api_1.OpenSeaAPI(apiConfig);
        this._networkName = apiConfig.networkName;
        var readonlyProvider = new Web3.providers.HttpProvider(this._networkName == types_1.Network.Main ? constants_1.MAINNET_PROVIDER_URL : constants_1.RINKEBY_PROVIDER_URL);
        // Web3 Config
        this.web3 = new Web3(provider);
        this.web3ReadOnly = new Web3(readonlyProvider);
        // WyvernJS config
        this._wyvernProtocol = new wyvern_js_1.WyvernProtocol(provider, {
            network: this._networkName,
        });
        // WyvernJS config for readonly (optimization for infura calls)
        this._wyvernProtocolReadOnly = new wyvern_js_1.WyvernProtocol(readonlyProvider, {
            network: this._networkName,
        });
        // WrappedNFTLiquidationProxy Config
        this._wrappedNFTFactoryAddress = this._networkName == types_1.Network.Main ? constants_1.WRAPPED_NFT_FACTORY_ADDRESS_MAINNET : constants_1.WRAPPED_NFT_FACTORY_ADDRESS_RINKEBY;
        this._wrappedNFTLiquidationProxyAddress = this._networkName == types_1.Network.Main ? constants_1.WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_MAINNET : constants_1.WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_RINKEBY;
        this._uniswapFactoryAddress = this._networkName == types_1.Network.Main ? constants_1.UNISWAP_FACTORY_ADDRESS_MAINNET : constants_1.UNISWAP_FACTORY_ADDRESS_RINKEBY;
        // Emit events
        this._emitter = new fbemitter_1.EventEmitter();
        // Debugging: default to nothing
        this.logger = logger || (function (arg) { return arg; });
    }
    /**
     * Add a listener to a marketplace event
     * @param event An event to listen for
     * @param listener A callback that will accept an object with event data
     * @param once Whether the listener should only be called once
     */
    OpenSeaPort.prototype.addListener = function (event, listener, once) {
        if (once === void 0) { once = false; }
        var subscription = once
            ? this._emitter.once(event, listener)
            : this._emitter.addListener(event, listener);
        return subscription;
    };
    /**
     * Remove an event listener, included here for completeness.
     * Simply calls `.remove()` on a subscription
     * @param subscription The event subscription returned from `addListener`
     */
    OpenSeaPort.prototype.removeListener = function (subscription) {
        subscription.remove();
    };
    /**
     * Remove all event listeners. Good idea to call this when you're unmounting
     * a component that listens to events to make UI updates
     * @param event Optional EventType to remove listeners for
     */
    OpenSeaPort.prototype.removeAllListeners = function (event) {
        this._emitter.removeAllListeners(event);
    };
    /**
     * Wraps an arbirary group of NFTs into their corresponding WrappedNFT ERC20 tokens.
     * Emits the `WrapAssets` event when the transaction is prompted.
     * @param param0 __namedParameters Object
     * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to bundle together.
     * @param accountAddress Address of the user's wallet
     */
    OpenSeaPort.prototype.wrapAssets = function (_a) {
        var assets = _a.assets, accountAddress = _a.accountAddress;
        return __awaiter(this, void 0, void 0, function () {
            var schema, wyAssets, tokenIds, tokenAddresses, isMixedBatchOfAssets, txHash;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        schema = this._getSchema(types_1.WyvernSchemaName.ERC721);
                        wyAssets = assets.map(function (a) { return utils_1.getWyvernAsset(schema, a); });
                        tokenIds = wyAssets.map(function (a) { return a.id; });
                        tokenAddresses = wyAssets.map(function (a) { return a.address; });
                        isMixedBatchOfAssets = !tokenAddresses.every(function (val, i, arr) { return val === arr[0]; });
                        this._dispatch(types_1.EventType.WrapAssets, { assets: wyAssets, accountAddress: accountAddress });
                        return [4 /*yield*/, utils_1.sendRawTransaction(this.web3, {
                                from: accountAddress,
                                to: this._wrappedNFTLiquidationProxyAddress,
                                value: 0,
                                data: schema_1.encodeCall(contracts_1.getMethod(contracts_1.WrappedNFTLiquidationProxy, 'wrapNFTs'), [tokenIds, tokenAddresses, isMixedBatchOfAssets])
                            }, function (error) {
                                _this._dispatch(types_1.EventType.TransactionDenied, { error: error, accountAddress: accountAddress });
                            })];
                    case 1:
                        txHash = _b.sent();
                        return [4 /*yield*/, this._confirmTransaction(txHash, types_1.EventType.WrapAssets, "Wrapping Assets")];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Unwraps an arbirary group of NFTs from their corresponding WrappedNFT ERC20 tokens back into ERC721 tokens.
     * Emits the `UnwrapAssets` event when the transaction is prompted.
     * @param param0 __namedParameters Object
     * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to bundle together.
     * @param destinationAddresses Addresses that each resulting ERC721 token will be sent to. Must be the same length as `tokenIds`. Each address corresponds with its respective token ID in the `tokenIds` array.
     * @param accountAddress Address of the user's wallet
     */
    OpenSeaPort.prototype.unwrapAssets = function (_a) {
        var assets = _a.assets, destinationAddresses = _a.destinationAddresses, accountAddress = _a.accountAddress;
        return __awaiter(this, void 0, void 0, function () {
            var schema, wyAssets, tokenIds, tokenAddresses, isMixedBatchOfAssets, txHash;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!assets || !destinationAddresses || assets.length != destinationAddresses.length) {
                            throw new Error("The 'assets' and 'destinationAddresses' arrays must exist and have the same length.");
                        }
                        schema = this._getSchema(types_1.WyvernSchemaName.ERC721);
                        wyAssets = assets.map(function (a) { return utils_1.getWyvernAsset(schema, a); });
                        tokenIds = wyAssets.map(function (a) { return a.id; });
                        tokenAddresses = wyAssets.map(function (a) { return a.address; });
                        isMixedBatchOfAssets = !tokenAddresses.every(function (val, i, arr) { return val === arr[0]; });
                        this._dispatch(types_1.EventType.UnwrapAssets, { assets: wyAssets, accountAddress: accountAddress });
                        return [4 /*yield*/, utils_1.sendRawTransaction(this.web3, {
                                from: accountAddress,
                                to: this._wrappedNFTLiquidationProxyAddress,
                                value: 0,
                                data: schema_1.encodeCall(contracts_1.getMethod(contracts_1.WrappedNFTLiquidationProxy, 'unwrapNFTs'), [tokenIds, tokenAddresses, destinationAddresses, isMixedBatchOfAssets]),
                            }, function (error) {
                                _this._dispatch(types_1.EventType.TransactionDenied, { error: error, accountAddress: accountAddress });
                            })];
                    case 1:
                        txHash = _b.sent();
                        return [4 /*yield*/, this._confirmTransaction(txHash, types_1.EventType.UnwrapAssets, "Unwrapping Assets")];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Liquidates an arbirary group of NFTs by atomically wrapping them into their
     * corresponding WrappedNFT ERC20 tokens, and then immediately selling those
     * ERC20 tokens on their corresponding Uniswap exchange.
     * Emits the `LiquidateAssets` event when the transaction is prompted.
     * @param param0 __namedParameters Object
     * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to bundle together.
     * @param accountAddress Address of the user's wallet
     * @param uniswapSlippageAllowedInBasisPoints The amount of slippage that a user will tolerate in their Uniswap trade; if Uniswap cannot fulfill the order without more slippage, the whole function will revert.
     */
    OpenSeaPort.prototype.liquidateAssets = function (_a) {
        var assets = _a.assets, accountAddress = _a.accountAddress, uniswapSlippageAllowedInBasisPoints = _a.uniswapSlippageAllowedInBasisPoints;
        return __awaiter(this, void 0, void 0, function () {
            var uniswapSlippage, schema, wyAssets, tokenIds, tokenAddresses, isMixedBatchOfAssets, txHash;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        uniswapSlippage = uniswapSlippageAllowedInBasisPoints === 0 ? constants_1.DEFAULT_WRAPPED_NFT_LIQUIDATION_UNISWAP_SLIPPAGE_IN_BASIS_POINTS : uniswapSlippageAllowedInBasisPoints;
                        schema = this._getSchema(types_1.WyvernSchemaName.ERC721);
                        wyAssets = assets.map(function (a) { return utils_1.getWyvernAsset(schema, a); });
                        tokenIds = wyAssets.map(function (a) { return a.id; });
                        tokenAddresses = wyAssets.map(function (a) { return a.address; });
                        isMixedBatchOfAssets = !tokenAddresses.every(function (val, i, arr) { return val === arr[0]; });
                        this._dispatch(types_1.EventType.LiquidateAssets, { assets: wyAssets, accountAddress: accountAddress });
                        return [4 /*yield*/, utils_1.sendRawTransaction(this.web3, {
                                from: accountAddress,
                                to: this._wrappedNFTLiquidationProxyAddress,
                                value: 0,
                                data: schema_1.encodeCall(contracts_1.getMethod(contracts_1.WrappedNFTLiquidationProxy, 'liquidateNFTs'), [tokenIds, tokenAddresses, isMixedBatchOfAssets, uniswapSlippage]),
                            }, function (error) {
                                _this._dispatch(types_1.EventType.TransactionDenied, { error: error, accountAddress: accountAddress });
                            })];
                    case 1:
                        txHash = _b.sent();
                        return [4 /*yield*/, this._confirmTransaction(txHash, types_1.EventType.LiquidateAssets, "Liquidating Assets")];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Purchases a bundle of WrappedNFT tokens from Uniswap and then unwraps them into ERC721 tokens.
     * Emits the `PurchaseAssets` event when the transaction is prompted.
     * @param param0 __namedParameters Object
     * @param numTokensToBuy The number of WrappedNFT tokens to purchase and unwrap
     * @param amount The estimated cost in wei for tokens (probably some ratio above the minimum amount to avoid the transaction failing due to frontrunning, minimum amount is found by calling UniswapExchange(uniswapAddress).getEthToTokenOutputPrice(numTokensToBuy.mul(10**18));
     * @param contractAddress Address of the corresponding NFT core contract for these NFTs.
     * @param accountAddress Address of the user's wallet
     */
    OpenSeaPort.prototype.purchaseAssets = function (_a) {
        var numTokensToBuy = _a.numTokensToBuy, amount = _a.amount, contractAddress = _a.contractAddress, accountAddress = _a.accountAddress;
        return __awaiter(this, void 0, void 0, function () {
            var token, txHash;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        token = WyvernSchemas.tokens[this._networkName].canonicalWrappedEther;
                        this._dispatch(types_1.EventType.PurchaseAssets, { amount: amount, contractAddress: contractAddress, accountAddress: accountAddress });
                        return [4 /*yield*/, utils_1.sendRawTransaction(this.web3, {
                                from: accountAddress,
                                to: this._wrappedNFTLiquidationProxyAddress,
                                value: amount,
                                data: schema_1.encodeCall(contracts_1.getMethod(contracts_1.WrappedNFTLiquidationProxy, 'purchaseNFTs'), [numTokensToBuy, contractAddress]),
                            }, function (error) {
                                _this._dispatch(types_1.EventType.TransactionDenied, { error: error, accountAddress: accountAddress });
                            })];
                    case 1:
                        txHash = _b.sent();
                        return [4 /*yield*/, this._confirmTransaction(txHash, types_1.EventType.PurchaseAssets, "Purchasing Assets")];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the estimated cost or payout of either buying or selling NFTs to Uniswap using either purchaseAssts() or liquidateAssets()
     * @param param0 __namedParameters Object
     * @param numTokens The number of WrappedNFT tokens to either purchase or sell
     * @param isBuying A bool for whether the user is buying or selling
     * @param contractAddress Address of the corresponding NFT core contract for these NFTs.
     */
    OpenSeaPort.prototype.getQuoteFromUniswap = function (_a) {
        var numTokens = _a.numTokens, isBuying = _a.isBuying, contractAddress = _a.contractAddress;
        return __awaiter(this, void 0, void 0, function () {
            var wrappedNFTFactoryContract, wrappedNFTFactory, wrappedNFTAddress, wrappedNFTContract, wrappedNFT, uniswapFactoryContract, uniswapFactory, uniswapExchangeAddress, uniswapExchangeContract, uniswapExchange, amount, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        wrappedNFTFactoryContract = this.web3.eth.contract(contracts_1.WrappedNFTFactory);
                        return [4 /*yield*/, wrappedNFTFactoryContract.at(this._wrappedNFTFactoryAddress)];
                    case 1:
                        wrappedNFTFactory = _d.sent();
                        return [4 /*yield*/, wrappedNFTFactory.nftContractToWrapperContract(contractAddress)];
                    case 2:
                        wrappedNFTAddress = _d.sent();
                        wrappedNFTContract = this.web3.eth.contract(contracts_1.WrappedNFT);
                        return [4 /*yield*/, wrappedNFTContract.at(wrappedNFTAddress)];
                    case 3:
                        wrappedNFT = _d.sent();
                        uniswapFactoryContract = this.web3.eth.contract(contracts_1.UniswapFactory);
                        return [4 /*yield*/, uniswapFactoryContract.at(this._uniswapFactoryAddress)];
                    case 4:
                        uniswapFactory = _d.sent();
                        return [4 /*yield*/, uniswapFactory.getExchange(wrappedNFTAddress)];
                    case 5:
                        uniswapExchangeAddress = _d.sent();
                        uniswapExchangeContract = this.web3.eth.contract(contracts_1.UniswapExchange);
                        return [4 /*yield*/, uniswapExchangeContract.at(uniswapExchangeAddress)
                            // Convert desired WNFT to wei
                        ];
                    case 6:
                        uniswapExchange = _d.sent();
                        amount = wyvern_js_1.WyvernProtocol.toBaseUnitAmount(utils_1.makeBigNumber(numTokens), wrappedNFT.decimals());
                        if (!isBuying) return [3 /*break*/, 8];
                        _b = parseInt;
                        return [4 /*yield*/, uniswapExchange.getEthToTokenOutputPrice(amount)];
                    case 7: return [2 /*return*/, _b.apply(void 0, [_d.sent()])];
                    case 8:
                        _c = parseInt;
                        return [4 /*yield*/, uniswapExchange.getTokenToEthInputPrice(amount)];
                    case 9: return [2 /*return*/, _c.apply(void 0, [_d.sent()])];
                }
            });
        });
    };
    /**
     * Wrap ETH into W-ETH.
     * W-ETH is needed for placing buy orders (making offers).
     * Emits the `WrapEth` event when the transaction is prompted.
     * @param param0 __namedParameters Object
     * @param amountInEth How much ether to wrap
     * @param accountAddress Address of the user's wallet containing the ether
     */
    OpenSeaPort.prototype.wrapEth = function (_a) {
        var amountInEth = _a.amountInEth, accountAddress = _a.accountAddress;
        return __awaiter(this, void 0, void 0, function () {
            var token, amount, txHash;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        token = WyvernSchemas.tokens[this._networkName].canonicalWrappedEther;
                        amount = wyvern_js_1.WyvernProtocol.toBaseUnitAmount(utils_1.makeBigNumber(amountInEth), token.decimals);
                        this._dispatch(types_1.EventType.WrapEth, { accountAddress: accountAddress, amount: amount });
                        return [4 /*yield*/, utils_1.sendRawTransaction(this.web3, {
                                from: accountAddress,
                                to: token.address,
                                value: amount,
                                data: schema_1.encodeCall(contracts_1.getMethod(contracts_1.CanonicalWETH, 'deposit'), []),
                            }, function (error) {
                                _this._dispatch(types_1.EventType.TransactionDenied, { error: error, accountAddress: accountAddress });
                            })];
                    case 1:
                        txHash = _b.sent();
                        return [4 /*yield*/, this._confirmTransaction(txHash, types_1.EventType.WrapEth, "Wrapping ETH")];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Unwrap W-ETH into ETH.
     * Emits the `UnwrapWeth` event when the transaction is prompted.
     * @param param0 __namedParameters Object
     * @param amountInEth How much W-ETH to unwrap
     * @param accountAddress Address of the user's wallet containing the W-ETH
     */
    OpenSeaPort.prototype.unwrapWeth = function (_a) {
        var amountInEth = _a.amountInEth, accountAddress = _a.accountAddress;
        return __awaiter(this, void 0, void 0, function () {
            var token, amount, txHash;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        token = WyvernSchemas.tokens[this._networkName].canonicalWrappedEther;
                        amount = wyvern_js_1.WyvernProtocol.toBaseUnitAmount(utils_1.makeBigNumber(amountInEth), token.decimals);
                        this._dispatch(types_1.EventType.UnwrapWeth, { accountAddress: accountAddress, amount: amount });
                        return [4 /*yield*/, utils_1.sendRawTransaction(this.web3, {
                                from: accountAddress,
                                to: token.address,
                                value: 0,
                                data: schema_1.encodeCall(contracts_1.getMethod(contracts_1.CanonicalWETH, 'withdraw'), [amount.toString()]),
                            }, function (error) {
                                _this._dispatch(types_1.EventType.TransactionDenied, { error: error, accountAddress: accountAddress });
                            })];
                    case 1:
                        txHash = _b.sent();
                        return [4 /*yield*/, this._confirmTransaction(txHash, types_1.EventType.UnwrapWeth, "Unwrapping W-ETH")];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create a buy order to make an offer on a bundle or group of assets.
     * Will throw an 'Insufficient balance' error if the maker doesn't have enough W-ETH to make the offer.
     * If the user hasn't approved W-ETH access yet, this will emit `ApproveCurrency` before asking for approval.
     * @param param0 __namedParameters Object
     * @param assets Array of Asset objects to bid on
     * @param collection Optional collection for computing fees, required only if all assets belong to the same collection
     * @param quantities The quantity of each asset to sell. Defaults to 1 for each.
     * @param accountAddress Address of the maker's wallet
     * @param startAmount Value of the offer, in units of the payment token (or wrapped ETH if no payment token address specified)
     * @param expirationTime Expiration time for the order, in seconds. An expiration time of 0 means "never expire"
     * @param paymentTokenAddress Optional address for using an ERC-20 token in the order. If unspecified, defaults to W-ETH
     * @param sellOrder Optional sell order (like an English auction) to ensure fee and schema compatibility
     * @param referrerAddress The optional address that referred the order
     */
    OpenSeaPort.prototype.createBundleBuyOrder = function (_a) {
        var assets = _a.assets, collection = _a.collection, quantities = _a.quantities, accountAddress = _a.accountAddress, startAmount = _a.startAmount, _b = _a.expirationTime, expirationTime = _b === void 0 ? 0 : _b, paymentTokenAddress = _a.paymentTokenAddress, sellOrder = _a.sellOrder, referrerAddress = _a.referrerAddress;
        return __awaiter(this, void 0, void 0, function () {
            var order, hashedOrder, signature, error_1, orderWithSignature;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        // Default to 1 of each asset
                        quantities = quantities || assets.map(function (a) { return 1; });
                        paymentTokenAddress = paymentTokenAddress || WyvernSchemas.tokens[this._networkName].canonicalWrappedEther.address;
                        return [4 /*yield*/, this._makeBundleBuyOrder({
                                assets: assets,
                                collection: collection,
                                quantities: quantities,
                                accountAddress: accountAddress,
                                startAmount: startAmount,
                                expirationTime: expirationTime,
                                paymentTokenAddress: paymentTokenAddress,
                                extraBountyBasisPoints: 0,
                                sellOrder: sellOrder,
                                referrerAddress: referrerAddress
                            })
                            // NOTE not in Wyvern exchange code:
                            // frontend checks to make sure
                            // token is approved and sufficiently available
                        ];
                    case 1:
                        order = _c.sent();
                        // NOTE not in Wyvern exchange code:
                        // frontend checks to make sure
                        // token is approved and sufficiently available
                        return [4 /*yield*/, this._buyOrderValidationAndApprovals({ order: order, accountAddress: accountAddress })];
                    case 2:
                        // NOTE not in Wyvern exchange code:
                        // frontend checks to make sure
                        // token is approved and sufficiently available
                        _c.sent();
                        hashedOrder = __assign(__assign({}, order), { hash: utils_1.getOrderHash(order) });
                        _c.label = 3;
                    case 3:
                        _c.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this._authorizeOrder(hashedOrder)];
                    case 4:
                        signature = _c.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        error_1 = _c.sent();
                        console.error(error_1);
                        throw new Error("You declined to authorize your offer");
                    case 6:
                        orderWithSignature = __assign(__assign({}, hashedOrder), signature);
                        return [2 /*return*/, this.validateAndPostOrder(orderWithSignature)];
                }
            });
        });
    };
    /**
     * Create a buy order to make an offer on an asset.
     * Will throw an 'Insufficient balance' error if the maker doesn't have enough W-ETH to make the offer.
     * If the user hasn't approved W-ETH access yet, this will emit `ApproveCurrency` before asking for approval.
     * @param param0 __namedParameters Object
     * @param asset The asset to trade
     * @param accountAddress Address of the maker's wallet
     * @param startAmount Value of the offer, in units of the payment token (or wrapped ETH if no payment token address specified)
     * @param quantity The number of assets to bid for (if fungible or semi-fungible). Defaults to 1. In units, not base units, e.g. not wei.
     * @param expirationTime Expiration time for the order, in seconds. An expiration time of 0 means "never expire"
     * @param paymentTokenAddress Optional address for using an ERC-20 token in the order. If unspecified, defaults to W-ETH
     * @param sellOrder Optional sell order (like an English auction) to ensure fee and schema compatibility
     * @param referrerAddress The optional address that referred the order
     */
    OpenSeaPort.prototype.createBuyOrder = function (_a) {
        var asset = _a.asset, accountAddress = _a.accountAddress, startAmount = _a.startAmount, _b = _a.quantity, quantity = _b === void 0 ? 1 : _b, _c = _a.expirationTime, expirationTime = _c === void 0 ? 0 : _c, paymentTokenAddress = _a.paymentTokenAddress, sellOrder = _a.sellOrder, referrerAddress = _a.referrerAddress;
        return __awaiter(this, void 0, void 0, function () {
            var order, hashedOrder, signature, error_2, orderWithSignature;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        paymentTokenAddress = paymentTokenAddress || WyvernSchemas.tokens[this._networkName].canonicalWrappedEther.address;
                        return [4 /*yield*/, this._makeBuyOrder({
                                asset: asset,
                                quantity: quantity,
                                accountAddress: accountAddress,
                                startAmount: startAmount,
                                expirationTime: expirationTime,
                                paymentTokenAddress: paymentTokenAddress,
                                extraBountyBasisPoints: 0,
                                sellOrder: sellOrder,
                                referrerAddress: referrerAddress
                            })
                            // NOTE not in Wyvern exchange code:
                            // frontend checks to make sure
                            // token is approved and sufficiently available
                        ];
                    case 1:
                        order = _d.sent();
                        // NOTE not in Wyvern exchange code:
                        // frontend checks to make sure
                        // token is approved and sufficiently available
                        return [4 /*yield*/, this._buyOrderValidationAndApprovals({ order: order, accountAddress: accountAddress })];
                    case 2:
                        // NOTE not in Wyvern exchange code:
                        // frontend checks to make sure
                        // token is approved and sufficiently available
                        _d.sent();
                        hashedOrder = __assign(__assign({}, order), { hash: utils_1.getOrderHash(order) });
                        _d.label = 3;
                    case 3:
                        _d.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this._authorizeOrder(hashedOrder)];
                    case 4:
                        signature = _d.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        error_2 = _d.sent();
                        console.error(error_2);
                        throw new Error("You declined to authorize your offer");
                    case 6:
                        orderWithSignature = __assign(__assign({}, hashedOrder), signature);
                        return [2 /*return*/, this.validateAndPostOrder(orderWithSignature)];
                }
            });
        });
    };
    /**
     * Create a sell order to auction an asset.
     * Will throw a 'You do not own enough of this asset' error if the maker doesn't have the asset or not enough of it to sell the specific `quantity`.
     * If the user hasn't approved access to the token yet, this will emit `ApproveAllAssets` (or `ApproveAsset` if the contract doesn't support approve-all) before asking for approval.
     * @param param0 __namedParameters Object
     * @param tokenId DEPRECATED: Token ID. Use `asset` instead.
     * @param tokenAddress DEPRECATED: Address of the token's contract. Use `asset` instead.
     * @param asset The asset to trade
     * @param accountAddress Address of the maker's wallet
     * @param startAmount Price of the asset at the start of the auction. Units are in the amount of a token above the token's decimal places (integer part). For example, for ether, expected units are in ETH, not wei.
     * @param endAmount Optional price of the asset at the end of its expiration time. Units are in the amount of a token above the token's decimal places (integer part). For example, for ether, expected units are in ETH, not wei.
     * @param quantity The number of assets to sell (if fungible or semi-fungible). Defaults to 1. In units, not base units, e.g. not wei.
     * @param listingTime Optional time when the order will become fulfillable, in UTC seconds. Undefined means it will start now.
     * @param expirationTime Expiration time for the order, in UTC seconds. An expiration time of 0 means "never expire."
     * @param waitForHighestBid If set to true, this becomes an English auction that increases in price for every bid. The highest bid wins when the auction expires, as long as it's at least `startAmount`. `expirationTime` must be > 0.
     * @param englishAuctionReservePrice Optional price level, below which orders may be placed but will not be matched.  Orders below the reserve can be manually accepted but will not be automatically matched.
     * @param paymentTokenAddress Address of the ERC-20 token to accept in return. If undefined or null, uses Ether.
     * @param extraBountyBasisPoints Optional basis points (1/100th of a percent) to reward someone for referring the fulfillment of this order
     * @param buyerAddress Optional address that's allowed to purchase this item. If specified, no other address will be able to take the order, unless its value is the null address.
     * @param buyerEmail Optional email of the user that's allowed to purchase this item. If specified, a user will have to verify this email before being able to take the order.
     */
    OpenSeaPort.prototype.createSellOrder = function (_a) {
        var asset = _a.asset, accountAddress = _a.accountAddress, startAmount = _a.startAmount, endAmount = _a.endAmount, _b = _a.quantity, quantity = _b === void 0 ? 1 : _b, listingTime = _a.listingTime, _c = _a.expirationTime, expirationTime = _c === void 0 ? 0 : _c, _d = _a.waitForHighestBid, waitForHighestBid = _d === void 0 ? false : _d, englishAuctionReservePrice = _a.englishAuctionReservePrice, paymentTokenAddress = _a.paymentTokenAddress, _e = _a.extraBountyBasisPoints, extraBountyBasisPoints = _e === void 0 ? 0 : _e, buyerAddress = _a.buyerAddress, buyerEmail = _a.buyerEmail;
        return __awaiter(this, void 0, void 0, function () {
            var order, hashedOrder, signature, error_3, orderWithSignature;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0: return [4 /*yield*/, this._makeSellOrder({
                            asset: asset,
                            quantity: quantity,
                            accountAddress: accountAddress,
                            startAmount: startAmount,
                            endAmount: endAmount,
                            listingTime: listingTime,
                            expirationTime: expirationTime,
                            waitForHighestBid: waitForHighestBid,
                            englishAuctionReservePrice: englishAuctionReservePrice,
                            paymentTokenAddress: paymentTokenAddress || constants_1.NULL_ADDRESS,
                            extraBountyBasisPoints: extraBountyBasisPoints,
                            buyerAddress: buyerAddress || constants_1.NULL_ADDRESS
                        })];
                    case 1:
                        order = _f.sent();
                        return [4 /*yield*/, this._sellOrderValidationAndApprovals({ order: order, accountAddress: accountAddress })];
                    case 2:
                        _f.sent();
                        if (!buyerEmail) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._createEmailWhitelistEntry({ order: order, buyerEmail: buyerEmail })];
                    case 3:
                        _f.sent();
                        _f.label = 4;
                    case 4:
                        hashedOrder = __assign(__assign({}, order), { hash: utils_1.getOrderHash(order) });
                        _f.label = 5;
                    case 5:
                        _f.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this._authorizeOrder(hashedOrder)];
                    case 6:
                        signature = _f.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        error_3 = _f.sent();
                        console.error(error_3);
                        throw new Error("You declined to authorize your auction");
                    case 8:
                        orderWithSignature = __assign(__assign({}, hashedOrder), signature);
                        return [2 /*return*/, this.validateAndPostOrder(orderWithSignature)];
                }
            });
        });
    };
    /**
     * Create multiple sell orders in bulk to auction assets out of an asset factory.
     * Will throw a 'You do not own this asset' error if the maker doesn't own the factory.
     * Items will mint to users' wallets only when they buy them. See https://docs.opensea.io/docs/opensea-initial-item-sale-tutorial for more info.
     * If the user hasn't approved access to the token yet, this will emit `ApproveAllAssets` (or `ApproveAsset` if the contract doesn't support approve-all) before asking for approval.
     * @param param0 __namedParameters Object
     * @param assets Which assets you want to post orders for. Use the tokenAddress of your factory contract
     * @param accountAddress Address of the factory owner's wallet
     * @param startAmount Price of the asset at the start of the auction, or minimum acceptable bid if it's an English auction. Units are in the amount of a token above the token's decimal places (integer part). For example, for ether, expected units are in ETH, not wei.
     * @param endAmount Optional price of the asset at the end of its expiration time. If not specified, will be set to `startAmount`. Units are in the amount of a token above the token's decimal places (integer part). For example, for ether, expected units are in ETH, not wei.
     * @param quantity The number of assets to sell at one time (if fungible or semi-fungible). Defaults to 1. In units, not base units, e.g. not wei.
     * @param listingTime Optional time when the order will become fulfillable, in UTC seconds. Undefined means it will start now.
     * @param expirationTime Expiration time for the order, in seconds. An expiration time of 0 means "never expire."
     * @param waitForHighestBid If set to true, this becomes an English auction that increases in price for every bid. The highest bid wins when the auction expires, as long as it's at least `startAmount`. `expirationTime` must be > 0.
     * @param paymentTokenAddress Address of the ERC-20 token to accept in return. If undefined or null, uses Ether.
     * @param extraBountyBasisPoints Optional basis points (1/100th of a percent) to reward someone for referring the fulfillment of each order
     * @param buyerAddress Optional address that's allowed to purchase each item. If specified, no other address will be able to take each order.
     * @param buyerEmail Optional email of the user that's allowed to purchase each item. If specified, a user will have to verify this email before being able to take each order.
     * @param numberOfOrders Number of times to repeat creating the same order for each asset. If greater than 5, creates them in batches of 5. Requires an `apiKey` to be set during seaport initialization in order to not be throttled by the API.
     * @returns The number of orders created in total
     */
    OpenSeaPort.prototype.createFactorySellOrders = function (_a) {
        var assets = _a.assets, accountAddress = _a.accountAddress, startAmount = _a.startAmount, endAmount = _a.endAmount, _b = _a.quantity, quantity = _b === void 0 ? 1 : _b, listingTime = _a.listingTime, _c = _a.expirationTime, expirationTime = _c === void 0 ? 0 : _c, _d = _a.waitForHighestBid, waitForHighestBid = _d === void 0 ? false : _d, paymentTokenAddress = _a.paymentTokenAddress, _e = _a.extraBountyBasisPoints, extraBountyBasisPoints = _e === void 0 ? 0 : _e, buyerAddress = _a.buyerAddress, buyerEmail = _a.buyerEmail, _f = _a.numberOfOrders, numberOfOrders = _f === void 0 ? 1 : _f;
        return __awaiter(this, void 0, void 0, function () {
            var dummyOrder, _makeAndPostOneSellOrder, range, batches, numOrdersCreated, _i, batches_1, subRange, batchOrdersCreated;
            var _this = this;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        if (numberOfOrders < 1) {
                            throw new Error('Need to make at least one sell order');
                        }
                        if (!assets || !assets.length) {
                            throw new Error('Need at least one asset to create orders for');
                        }
                        if (_.uniqBy(assets, function (a) { return a.tokenAddress; }).length !== 1) {
                            throw new Error('All assets must be on the same factory contract address');
                        }
                        return [4 /*yield*/, this._makeSellOrder({
                                asset: assets[0],
                                quantity: quantity,
                                accountAddress: accountAddress,
                                startAmount: startAmount,
                                endAmount: endAmount,
                                listingTime: listingTime,
                                expirationTime: expirationTime,
                                waitForHighestBid: waitForHighestBid,
                                paymentTokenAddress: paymentTokenAddress || constants_1.NULL_ADDRESS,
                                extraBountyBasisPoints: extraBountyBasisPoints,
                                buyerAddress: buyerAddress || constants_1.NULL_ADDRESS
                            })];
                    case 1:
                        dummyOrder = _g.sent();
                        return [4 /*yield*/, this._sellOrderValidationAndApprovals({ order: dummyOrder, accountAddress: accountAddress })];
                    case 2:
                        _g.sent();
                        _makeAndPostOneSellOrder = function (asset) { return __awaiter(_this, void 0, void 0, function () {
                            var order, hashedOrder, signature, error_4, orderWithSignature;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this._makeSellOrder({
                                            asset: asset,
                                            quantity: quantity,
                                            accountAddress: accountAddress,
                                            startAmount: startAmount,
                                            endAmount: endAmount,
                                            listingTime: listingTime,
                                            expirationTime: expirationTime,
                                            waitForHighestBid: waitForHighestBid,
                                            paymentTokenAddress: paymentTokenAddress || constants_1.NULL_ADDRESS,
                                            extraBountyBasisPoints: extraBountyBasisPoints,
                                            buyerAddress: buyerAddress || constants_1.NULL_ADDRESS
                                        })];
                                    case 1:
                                        order = _a.sent();
                                        if (!buyerEmail) return [3 /*break*/, 3];
                                        return [4 /*yield*/, this._createEmailWhitelistEntry({ order: order, buyerEmail: buyerEmail })];
                                    case 2:
                                        _a.sent();
                                        _a.label = 3;
                                    case 3:
                                        hashedOrder = __assign(__assign({}, order), { hash: utils_1.getOrderHash(order) });
                                        _a.label = 4;
                                    case 4:
                                        _a.trys.push([4, 6, , 7]);
                                        return [4 /*yield*/, this._authorizeOrder(hashedOrder)];
                                    case 5:
                                        signature = _a.sent();
                                        return [3 /*break*/, 7];
                                    case 6:
                                        error_4 = _a.sent();
                                        console.error(error_4);
                                        throw new Error("You declined to authorize your auction, or your web3 provider can't sign using personal_sign. Try 'web3-provider-engine' and make sure a mnemonic is set. Just a reminder: there's no gas needed anymore to mint tokens!");
                                    case 7:
                                        orderWithSignature = __assign(__assign({}, hashedOrder), signature);
                                        return [2 /*return*/, this.validateAndPostOrder(orderWithSignature)];
                                }
                            });
                        }); };
                        range = _.range(numberOfOrders * assets.length);
                        batches = _.chunk(range, constants_1.SELL_ORDER_BATCH_SIZE);
                        numOrdersCreated = 0;
                        _i = 0, batches_1 = batches;
                        _g.label = 3;
                    case 3:
                        if (!(_i < batches_1.length)) return [3 /*break*/, 7];
                        subRange = batches_1[_i];
                        return [4 /*yield*/, Promise.all(subRange.map(function (assetOrderIndex) { return __awaiter(_this, void 0, void 0, function () {
                                var assetIndex;
                                return __generator(this, function (_a) {
                                    assetIndex = Math.floor(assetOrderIndex / numberOfOrders);
                                    return [2 /*return*/, _makeAndPostOneSellOrder(assets[assetIndex])];
                                });
                            }); }))];
                    case 4:
                        batchOrdersCreated = _g.sent();
                        this.logger("Created and posted a batch of " + batchOrdersCreated.length + " orders in parallel.");
                        numOrdersCreated += batchOrdersCreated.length;
                        // Don't overwhelm router
                        return [4 /*yield*/, utils_1.delay(500)];
                    case 5:
                        // Don't overwhelm router
                        _g.sent();
                        _g.label = 6;
                    case 6:
                        _i++;
                        return [3 /*break*/, 3];
                    case 7: return [2 /*return*/, numOrdersCreated];
                }
            });
        });
    };
    /**
     * Create a sell order to auction a bundle of assets.
     * Will throw a 'You do not own this asset' error if the maker doesn't have one of the assets.
     * If the user hasn't approved access to any of the assets yet, this will emit `ApproveAllAssets` (or `ApproveAsset` if the contract doesn't support approve-all) before asking for approval for each asset.
     * @param param0 __namedParameters Object
     * @param bundleName Name of the bundle
     * @param bundleDescription Optional description of the bundle. Markdown is allowed.
     * @param bundleExternalLink Optional link to a page that adds context to the bundle.
     * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to bundle together.
     * @param collection Optional collection for computing fees, required only if all assets belong to the same collection
     * @param quantities The quantity of each asset to sell. Defaults to 1 for each.
     * @param accountAddress The address of the maker of the bundle and the owner of all the assets.
     * @param startAmount Price of the asset at the start of the auction, or minimum acceptable bid if it's an English auction.
     * @param endAmount Optional price of the asset at the end of its expiration time. If not specified, will be set to `startAmount`.
     * @param listingTime Optional time when the order will become fulfillable, in UTC seconds. Undefined means it will start now.
     * @param expirationTime Expiration time for the order, in seconds. An expiration time of 0 means "never expire."
     * @param waitForHighestBid If set to true, this becomes an English auction that increases in price for every bid. The highest bid wins when the auction expires, as long as it's at least `startAmount`. `expirationTime` must be > 0.
     * @param englishAuctionReservePrice Optional price level, below which orders may be placed but will not be matched.  Orders below the reserve can be manually accepted but will not be automatically matched.
     * @param paymentTokenAddress Address of the ERC-20 token to accept in return. If undefined or null, uses Ether.
     * @param extraBountyBasisPoints Optional basis points (1/100th of a percent) to reward someone for referring the fulfillment of this order
     * @param buyerAddress Optional address that's allowed to purchase this bundle. If specified, no other address will be able to take the order, unless it's the null address.
     */
    OpenSeaPort.prototype.createBundleSellOrder = function (_a) {
        var bundleName = _a.bundleName, bundleDescription = _a.bundleDescription, bundleExternalLink = _a.bundleExternalLink, assets = _a.assets, collection = _a.collection, quantities = _a.quantities, accountAddress = _a.accountAddress, startAmount = _a.startAmount, endAmount = _a.endAmount, _b = _a.expirationTime, expirationTime = _b === void 0 ? 0 : _b, listingTime = _a.listingTime, _c = _a.waitForHighestBid, waitForHighestBid = _c === void 0 ? false : _c, englishAuctionReservePrice = _a.englishAuctionReservePrice, paymentTokenAddress = _a.paymentTokenAddress, _d = _a.extraBountyBasisPoints, extraBountyBasisPoints = _d === void 0 ? 0 : _d, buyerAddress = _a.buyerAddress;
        return __awaiter(this, void 0, void 0, function () {
            var order, hashedOrder, signature, error_5, orderWithSignature;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        // Default to one of each asset
                        quantities = quantities || assets.map(function (a) { return 1; });
                        return [4 /*yield*/, this._makeBundleSellOrder({
                                bundleName: bundleName,
                                bundleDescription: bundleDescription,
                                bundleExternalLink: bundleExternalLink,
                                assets: assets,
                                collection: collection,
                                quantities: quantities,
                                accountAddress: accountAddress,
                                startAmount: startAmount,
                                endAmount: endAmount,
                                listingTime: listingTime,
                                expirationTime: expirationTime,
                                waitForHighestBid: waitForHighestBid,
                                englishAuctionReservePrice: englishAuctionReservePrice,
                                paymentTokenAddress: paymentTokenAddress || constants_1.NULL_ADDRESS,
                                extraBountyBasisPoints: extraBountyBasisPoints,
                                buyerAddress: buyerAddress || constants_1.NULL_ADDRESS,
                            })];
                    case 1:
                        order = _e.sent();
                        return [4 /*yield*/, this._sellOrderValidationAndApprovals({ order: order, accountAddress: accountAddress })];
                    case 2:
                        _e.sent();
                        hashedOrder = __assign(__assign({}, order), { hash: utils_1.getOrderHash(order) });
                        _e.label = 3;
                    case 3:
                        _e.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this._authorizeOrder(hashedOrder)];
                    case 4:
                        signature = _e.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        error_5 = _e.sent();
                        console.error(error_5);
                        throw new Error("You declined to authorize your auction");
                    case 6:
                        orderWithSignature = __assign(__assign({}, hashedOrder), signature);
                        return [2 /*return*/, this.validateAndPostOrder(orderWithSignature)];
                }
            });
        });
    };
    /**
     * Fullfill or "take" an order for an asset, either a buy or sell order
     * @param param0 __namedParamaters Object
     * @param order The order to fulfill, a.k.a. "take"
     * @param accountAddress The taker's wallet address
     * @param recipientAddress The optional address to receive the order's item(s) or curriencies. If not specified, defaults to accountAddress.
     * @param referrerAddress The optional address that referred the order
     * @returns Transaction hash for fulfilling the order
     */
    OpenSeaPort.prototype.fulfillOrder = function (_a) {
        var order = _a.order, accountAddress = _a.accountAddress, recipientAddress = _a.recipientAddress, referrerAddress = _a.referrerAddress;
        return __awaiter(this, void 0, void 0, function () {
            var matchingOrder, _b, buy, sell, metadata, transactionHash;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        matchingOrder = this._makeMatchingOrder({
                            order: order,
                            accountAddress: accountAddress,
                            recipientAddress: recipientAddress || accountAddress
                        });
                        _b = utils_1.assignOrdersToSides(order, matchingOrder), buy = _b.buy, sell = _b.sell;
                        metadata = this._getMetadata(order, referrerAddress);
                        return [4 /*yield*/, this._atomicMatch({ buy: buy, sell: sell, accountAddress: accountAddress, metadata: metadata })];
                    case 1:
                        transactionHash = _c.sent();
                        return [4 /*yield*/, this._confirmTransaction(transactionHash, types_1.EventType.MatchOrders, "Fulfilling order", function () { return __awaiter(_this, void 0, void 0, function () {
                                var isOpen;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this._validateOrder(order)];
                                        case 1:
                                            isOpen = _a.sent();
                                            return [2 /*return*/, !isOpen];
                                    }
                                });
                            }); })];
                    case 2:
                        _c.sent();
                        return [2 /*return*/, transactionHash];
                }
            });
        });
    };
    /**
     * Cancel an order on-chain, preventing it from ever being fulfilled.
     * @param param0 __namedParameters Object
     * @param order The order to cancel
     * @param accountAddress The order maker's wallet address
     */
    OpenSeaPort.prototype.cancelOrder = function (_a) {
        var order = _a.order, accountAddress = _a.accountAddress;
        return __awaiter(this, void 0, void 0, function () {
            var transactionHash;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this._dispatch(types_1.EventType.CancelOrder, { order: order, accountAddress: accountAddress });
                        return [4 /*yield*/, this._wyvernProtocol.wyvernExchange.cancelOrder_.sendTransactionAsync([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata, order.v || 0, order.r || constants_1.NULL_BLOCK_HASH, order.s || constants_1.NULL_BLOCK_HASH, { from: accountAddress })];
                    case 1:
                        transactionHash = _b.sent();
                        return [4 /*yield*/, this._confirmTransaction(transactionHash.toString(), types_1.EventType.CancelOrder, "Cancelling order", function () { return __awaiter(_this, void 0, void 0, function () {
                                var isOpen;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this._validateOrder(order)];
                                        case 1:
                                            isOpen = _a.sent();
                                            return [2 /*return*/, !isOpen];
                                    }
                                });
                            }); })];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Approve a non-fungible token for use in trades.
     * Requires an account to be initialized first.
     * Called internally, but exposed for dev flexibility.
     * Checks to see if already approved, first. Then tries different approval methods from best to worst.
     * @param param0 __namedParamters Object
     * @param tokenId Token id to approve, but only used if approve-all isn't
     *  supported by the token contract
     * @param tokenAddress The contract address of the token being approved
     * @param accountAddress The user's wallet address
     * @param proxyAddress Address of the user's proxy contract. If not provided,
     *  will attempt to fetch it from Wyvern.
     * @param tokenAbi ABI of the token's contract. Defaults to a flexible ERC-721
     *  contract.
     * @param skipApproveAllIfTokenAddressIn an optional list of token addresses that, if a token is approve-all type, will skip approval
     * @param schemaName The Wyvern schema name corresponding to the asset type
     * @returns Transaction hash if a new transaction was created, otherwise null
     */
    OpenSeaPort.prototype.approveSemiOrNonFungibleToken = function (_a) {
        var tokenId = _a.tokenId, tokenAddress = _a.tokenAddress, accountAddress = _a.accountAddress, proxyAddress = _a.proxyAddress, _b = _a.tokenAbi, tokenAbi = _b === void 0 ? contracts_1.ERC721 : _b, _c = _a.skipApproveAllIfTokenAddressIn, skipApproveAllIfTokenAddressIn = _c === void 0 ? new Set() : _c, _d = _a.schemaName, schemaName = _d === void 0 ? types_1.WyvernSchemaName.ERC721 : _d;
        return __awaiter(this, void 0, void 0, function () {
            var schema, tokenContract, contract, approvalAllCheck, isApprovedForAll, txHash, error_6, approvalOneCheck, isApprovedForOne, txHash, error_7;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        schema = this._getSchema(schemaName);
                        tokenContract = this.web3.eth.contract(tokenAbi);
                        return [4 /*yield*/, tokenContract.at(tokenAddress)];
                    case 1:
                        contract = _e.sent();
                        if (!!proxyAddress) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._getProxy(accountAddress)];
                    case 2:
                        proxyAddress = (_e.sent()) || undefined;
                        if (!proxyAddress) {
                            throw new Error('Uninitialized account');
                        }
                        _e.label = 3;
                    case 3:
                        approvalAllCheck = function () { return __awaiter(_this, void 0, void 0, function () {
                            var isApprovedForAllRaw;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, utils_1.rawCall(this.web3ReadOnly, {
                                            from: accountAddress,
                                            to: contract.address,
                                            data: contract.isApprovedForAll.getData(accountAddress, proxyAddress)
                                        })];
                                    case 1:
                                        isApprovedForAllRaw = _a.sent();
                                        return [2 /*return*/, parseInt(isApprovedForAllRaw)];
                                }
                            });
                        }); };
                        return [4 /*yield*/, approvalAllCheck()];
                    case 4:
                        isApprovedForAll = _e.sent();
                        if (isApprovedForAll == 1) {
                            // Supports ApproveAll
                            this.logger('Already approved proxy for all tokens');
                            return [2 /*return*/, null];
                        }
                        if (!(isApprovedForAll == 0)) return [3 /*break*/, 9];
                        // Supports ApproveAll
                        //  not approved for all yet
                        if (skipApproveAllIfTokenAddressIn.has(tokenAddress)) {
                            this.logger('Already approving proxy for all tokens in another transaction');
                            return [2 /*return*/, null];
                        }
                        skipApproveAllIfTokenAddressIn.add(tokenAddress);
                        _e.label = 5;
                    case 5:
                        _e.trys.push([5, 8, , 9]);
                        this._dispatch(types_1.EventType.ApproveAllAssets, {
                            accountAddress: accountAddress,
                            proxyAddress: proxyAddress,
                            contractAddress: tokenAddress
                        });
                        return [4 /*yield*/, utils_1.sendRawTransaction(this.web3, {
                                from: accountAddress,
                                to: contract.address,
                                data: contract.setApprovalForAll.getData(proxyAddress, true),
                            }, function (error) {
                                _this._dispatch(types_1.EventType.TransactionDenied, { error: error, accountAddress: accountAddress });
                            })];
                    case 6:
                        txHash = _e.sent();
                        return [4 /*yield*/, this._confirmTransaction(txHash, types_1.EventType.ApproveAllAssets, 'Approving all tokens of this type for trading', function () { return __awaiter(_this, void 0, void 0, function () {
                                var result;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, approvalAllCheck()];
                                        case 1:
                                            result = _a.sent();
                                            return [2 /*return*/, result == 1];
                                    }
                                });
                            }); })];
                    case 7:
                        _e.sent();
                        return [2 /*return*/, txHash];
                    case 8:
                        error_6 = _e.sent();
                        console.error(error_6);
                        throw new Error("Couldn't get permission to approve these tokens for trading. Their contract might not be implemented correctly. Please contact the developer!");
                    case 9:
                        // Does not support ApproveAll (ERC721 v1 or v2)
                        this.logger('Contract does not support Approve All');
                        approvalOneCheck = function () { return __awaiter(_this, void 0, void 0, function () {
                            var approvedAddr;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, utils_1.promisifyCall(function (c) { return contract.getApproved.call(tokenId, c); })];
                                    case 1:
                                        approvedAddr = _a.sent();
                                        if (approvedAddr == proxyAddress) {
                                            this.logger('Already approved proxy for this token');
                                            return [2 /*return*/, true];
                                        }
                                        this.logger("Approve response: " + approvedAddr);
                                        if (!!approvedAddr) return [3 /*break*/, 3];
                                        return [4 /*yield*/, utils_1.getNonCompliantApprovalAddress(contract, tokenId, accountAddress)];
                                    case 2:
                                        approvedAddr = _a.sent();
                                        if (approvedAddr == proxyAddress) {
                                            this.logger('Already approved proxy for this item');
                                            return [2 /*return*/, true];
                                        }
                                        this.logger("Special-case approve response: " + approvedAddr);
                                        _a.label = 3;
                                    case 3: return [2 /*return*/, false];
                                }
                            });
                        }); };
                        return [4 /*yield*/, approvalOneCheck()];
                    case 10:
                        isApprovedForOne = _e.sent();
                        if (isApprovedForOne) {
                            return [2 /*return*/, null];
                        }
                        _e.label = 11;
                    case 11:
                        _e.trys.push([11, 14, , 15]);
                        this._dispatch(types_1.EventType.ApproveAsset, {
                            accountAddress: accountAddress,
                            proxyAddress: proxyAddress,
                            asset: utils_1.getWyvernAsset(schema, { tokenId: tokenId, tokenAddress: tokenAddress })
                        });
                        return [4 /*yield*/, utils_1.sendRawTransaction(this.web3, {
                                from: accountAddress,
                                to: contract.address,
                                data: contract.approve.getData(proxyAddress, tokenId),
                            }, function (error) {
                                _this._dispatch(types_1.EventType.TransactionDenied, { error: error, accountAddress: accountAddress });
                            })];
                    case 12:
                        txHash = _e.sent();
                        return [4 /*yield*/, this._confirmTransaction(txHash, types_1.EventType.ApproveAsset, "Approving single token for trading", approvalOneCheck)];
                    case 13:
                        _e.sent();
                        return [2 /*return*/, txHash];
                    case 14:
                        error_7 = _e.sent();
                        console.error(error_7);
                        throw new Error("Couldn't get permission to approve this token for trading. Its contract might not be implemented correctly. Please contact the developer!");
                    case 15: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Approve a fungible token (e.g. W-ETH) for use in trades.
     * Called internally, but exposed for dev flexibility.
     * Checks to see if the minimum amount is already approved, first.
     * @param param0 __namedParamters Object
     * @param accountAddress The user's wallet address
     * @param tokenAddress The contract address of the token being approved
     * @param proxyAddress The user's proxy address. If unspecified, uses the Wyvern token transfer proxy address.
     * @param minimumAmount The minimum amount needed to skip a transaction. Defaults to the max-integer.
     * @returns Transaction hash if a new transaction occurred, otherwise null
     */
    OpenSeaPort.prototype.approveFungibleToken = function (_a) {
        var accountAddress = _a.accountAddress, tokenAddress = _a.tokenAddress, proxyAddress = _a.proxyAddress, _b = _a.minimumAmount, minimumAmount = _b === void 0 ? wyvern_js_1.WyvernProtocol.MAX_UINT_256 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var approvedAmount, hasOldApproveMethod, txHash;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        proxyAddress = proxyAddress || wyvern_js_1.WyvernProtocol.getTokenTransferProxyAddress(this._networkName);
                        return [4 /*yield*/, this._getApprovedTokenCount({
                                accountAddress: accountAddress,
                                tokenAddress: tokenAddress,
                                proxyAddress: proxyAddress
                            })];
                    case 1:
                        approvedAmount = _c.sent();
                        if (approvedAmount.greaterThanOrEqualTo(minimumAmount)) {
                            this.logger('Already approved enough currency for trading');
                            return [2 /*return*/, null];
                        }
                        this.logger("Not enough token approved for trade: " + approvedAmount + " approved to transfer " + tokenAddress);
                        this._dispatch(types_1.EventType.ApproveCurrency, {
                            accountAddress: accountAddress,
                            contractAddress: tokenAddress,
                            proxyAddress: proxyAddress
                        });
                        hasOldApproveMethod = [constants_1.ENJIN_COIN_ADDRESS, constants_1.MANA_ADDRESS].includes(tokenAddress.toLowerCase());
                        if (!(minimumAmount.greaterThan(0) && hasOldApproveMethod)) return [3 /*break*/, 3];
                        // Older erc20s require initial approval to be 0
                        return [4 /*yield*/, this.unapproveFungibleToken({ accountAddress: accountAddress, tokenAddress: tokenAddress, proxyAddress: proxyAddress })];
                    case 2:
                        // Older erc20s require initial approval to be 0
                        _c.sent();
                        _c.label = 3;
                    case 3: return [4 /*yield*/, utils_1.sendRawTransaction(this.web3, {
                            from: accountAddress,
                            to: tokenAddress,
                            data: schema_1.encodeCall(contracts_1.getMethod(contracts_1.ERC20, 'approve'), 
                            // Always approve maximum amount, to prevent the need for followup
                            // transactions (and because old ERC20s like MANA/ENJ are non-compliant)
                            [proxyAddress, wyvern_js_1.WyvernProtocol.MAX_UINT_256.toString()]),
                        }, function (error) {
                            _this._dispatch(types_1.EventType.TransactionDenied, { error: error, accountAddress: accountAddress });
                        })];
                    case 4:
                        txHash = _c.sent();
                        return [4 /*yield*/, this._confirmTransaction(txHash, types_1.EventType.ApproveCurrency, "Approving currency for trading", function () { return __awaiter(_this, void 0, void 0, function () {
                                var newlyApprovedAmount;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this._getApprovedTokenCount({
                                                accountAddress: accountAddress,
                                                tokenAddress: tokenAddress,
                                                proxyAddress: proxyAddress
                                            })];
                                        case 1:
                                            newlyApprovedAmount = _a.sent();
                                            return [2 /*return*/, newlyApprovedAmount.greaterThanOrEqualTo(minimumAmount)];
                                    }
                                });
                            }); })];
                    case 5:
                        _c.sent();
                        return [2 /*return*/, txHash];
                }
            });
        });
    };
    /**
     * Un-approve a fungible token (e.g. W-ETH) for use in trades.
     * Called internally, but exposed for dev flexibility.
     * Useful for old ERC20s that require a 0 approval count before
     * changing the count
     * @param param0 __namedParamters Object
     * @param accountAddress The user's wallet address
     * @param tokenAddress The contract address of the token being approved
     * @param proxyAddress The user's proxy address. If unspecified, uses the Wyvern token transfer proxy address.
     * @returns Transaction hash
     */
    OpenSeaPort.prototype.unapproveFungibleToken = function (_a) {
        var accountAddress = _a.accountAddress, tokenAddress = _a.tokenAddress, proxyAddress = _a.proxyAddress;
        return __awaiter(this, void 0, void 0, function () {
            var txHash;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        proxyAddress = proxyAddress || wyvern_js_1.WyvernProtocol.getTokenTransferProxyAddress(this._networkName);
                        return [4 /*yield*/, utils_1.sendRawTransaction(this.web3, {
                                from: accountAddress,
                                to: tokenAddress,
                                data: schema_1.encodeCall(contracts_1.getMethod(contracts_1.ERC20, 'approve'), [proxyAddress, 0]),
                            }, function (error) {
                                _this._dispatch(types_1.EventType.TransactionDenied, { error: error, accountAddress: accountAddress });
                            })];
                    case 1:
                        txHash = _b.sent();
                        return [4 /*yield*/, this._confirmTransaction(txHash, types_1.EventType.UnapproveCurrency, "Resetting Currency Approval", function () { return __awaiter(_this, void 0, void 0, function () {
                                var newlyApprovedAmount;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this._getApprovedTokenCount({
                                                accountAddress: accountAddress,
                                                tokenAddress: tokenAddress,
                                                proxyAddress: proxyAddress
                                            })];
                                        case 1:
                                            newlyApprovedAmount = _a.sent();
                                            return [2 /*return*/, newlyApprovedAmount.isZero()];
                                    }
                                });
                            }); })];
                    case 2:
                        _b.sent();
                        return [2 /*return*/, txHash];
                }
            });
        });
    };
    /**
     * Gets the price for the order using the contract
     * @param order The order to calculate the price for
     */
    OpenSeaPort.prototype.getCurrentPrice = function (order) {
        return __awaiter(this, void 0, void 0, function () {
            var currentPrice;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._wyvernProtocolReadOnly.wyvernExchange.calculateCurrentPrice_.callAsync([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata)];
                    case 1:
                        currentPrice = _a.sent();
                        return [2 /*return*/, currentPrice];
                }
            });
        });
    };
    /**
     * Returns whether an order is fulfillable.
     * An order may not be fulfillable if a target item's transfer function
     * is locked for some reason, e.g. an item is being rented within a game
     * or trading has been locked for an item type.
     * @param param0 __namedParamters Object
     * @param order Order to check
     * @param accountAddress The account address that will be fulfilling the order
     * @param recipientAddress The optional address to receive the order's item(s) or curriencies. If not specified, defaults to accountAddress.
     * @param referrerAddress The optional address that referred the order
     */
    OpenSeaPort.prototype.isOrderFulfillable = function (_a) {
        var order = _a.order, accountAddress = _a.accountAddress, recipientAddress = _a.recipientAddress, referrerAddress = _a.referrerAddress;
        return __awaiter(this, void 0, void 0, function () {
            var matchingOrder, _b, buy, sell, metadata, gas;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        matchingOrder = this._makeMatchingOrder({
                            order: order,
                            accountAddress: accountAddress,
                            recipientAddress: recipientAddress || accountAddress
                        });
                        _b = utils_1.assignOrdersToSides(order, matchingOrder), buy = _b.buy, sell = _b.sell;
                        metadata = this._getMetadata(order, referrerAddress);
                        return [4 /*yield*/, this._estimateGasForMatch({ buy: buy, sell: sell, accountAddress: accountAddress, metadata: metadata })];
                    case 1:
                        gas = _c.sent();
                        this.logger("Gas estimate for " + (order.side == types_1.OrderSide.Sell ? "sell" : "buy") + " order: " + gas);
                        return [2 /*return*/, gas != null && gas > 0];
                }
            });
        });
    };
    /**
     * Returns whether an asset is transferrable.
     * An asset may not be transferrable if its transfer function
     * is locked for some reason, e.g. an item is being rented within a game
     * or trading has been locked for an item type.
     * @param param0 __namedParamters Object
     * @param tokenId DEPRECATED: Token ID. Use `asset` instead.
     * @param tokenAddress DEPRECATED: Address of the token's contract. Use `asset` instead.
     * @param asset The asset to trade
     * @param fromAddress The account address that currently owns the asset
     * @param toAddress The account address that will be acquiring the asset
     * @param quantity The amount of the asset to transfer, if it's fungible (optional). In units (not base units), e.g. not wei.
     * @param useProxy Use the `fromAddress`'s proxy contract only if the `fromAddress` has already approved the asset for sale. Required if checking an ERC-721 v1 asset (like CryptoKitties) that doesn't check if the transferFrom caller is the owner of the asset (only allowing it if it's an approved address).
     * @param retries How many times to retry if false
     */
    OpenSeaPort.prototype.isAssetTransferrable = function (_a, retries) {
        var asset = _a.asset, fromAddress = _a.fromAddress, toAddress = _a.toAddress, quantity = _a.quantity, _b = _a.useProxy, useProxy = _b === void 0 ? false : _b;
        if (retries === void 0) { retries = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var schema, quantityBN, wyAsset, abi, from, proxyAddress, data, gas, error_8;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        schema = this._getSchema(asset.schemaName);
                        quantityBN = quantity
                            ? wyvern_js_1.WyvernProtocol.toBaseUnitAmount(utils_1.makeBigNumber(quantity), asset.decimals || 0)
                            : utils_1.makeBigNumber(1);
                        wyAsset = utils_1.getWyvernAsset(schema, asset, quantityBN);
                        abi = schema.functions.transfer(wyAsset);
                        from = fromAddress;
                        if (!useProxy) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._getProxy(fromAddress)];
                    case 1:
                        proxyAddress = _c.sent();
                        if (!proxyAddress) {
                            console.error("This asset's owner (" + fromAddress + ") does not have a proxy!");
                            return [2 /*return*/, false];
                        }
                        from = proxyAddress;
                        _c.label = 2;
                    case 2:
                        data = schema_1.encodeTransferCall(abi, fromAddress, toAddress);
                        _c.label = 3;
                    case 3:
                        _c.trys.push([3, 5, , 8]);
                        return [4 /*yield*/, utils_1.estimateGas(this._getClientsForRead(retries).web3, {
                                from: from,
                                to: abi.target,
                                data: data
                            })];
                    case 4:
                        gas = _c.sent();
                        return [2 /*return*/, gas > 0];
                    case 5:
                        error_8 = _c.sent();
                        if (retries <= 0) {
                            console.error(error_8);
                            console.error(from, abi.target, data);
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, utils_1.delay(500)];
                    case 6:
                        _c.sent();
                        return [4 /*yield*/, this.isAssetTransferrable({ asset: asset, fromAddress: fromAddress, toAddress: toAddress, quantity: quantity, useProxy: useProxy }, retries - 1)];
                    case 7: return [2 /*return*/, _c.sent()];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Transfer a fungible or non-fungible asset to another address
     * @param param0 __namedParamaters Object
     * @param fromAddress The owner's wallet address
     * @param toAddress The recipient's wallet address
     * @param asset The fungible or non-fungible asset to transfer
     * @param quantity The amount of the asset to transfer, if it's fungible (optional). In units (not base units), e.g. not wei.
     * @returns Transaction hash
     */
    OpenSeaPort.prototype.transfer = function (_a) {
        var fromAddress = _a.fromAddress, toAddress = _a.toAddress, asset = _a.asset, _b = _a.quantity, quantity = _b === void 0 ? 1 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var schema, quantityBN, wyAsset, isCryptoKitties, isOldNFT, abi, data, txHash;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        schema = this._getSchema(asset.schemaName);
                        quantityBN = wyvern_js_1.WyvernProtocol.toBaseUnitAmount(utils_1.makeBigNumber(quantity), asset.decimals || 0);
                        wyAsset = utils_1.getWyvernAsset(schema, asset, quantityBN);
                        isCryptoKitties = [constants_1.CK_ADDRESS, constants_1.CK_RINKEBY_ADDRESS].includes(wyAsset.address);
                        isOldNFT = isCryptoKitties || !!asset.version && [
                            types_1.TokenStandardVersion.ERC721v1, types_1.TokenStandardVersion.ERC721v2
                        ].includes(asset.version);
                        abi = asset.schemaName === types_1.WyvernSchemaName.ERC20
                            ? utils_1.annotateERC20TransferABI(wyAsset)
                            : isOldNFT
                                ? utils_1.annotateERC721TransferABI(wyAsset)
                                : schema.functions.transfer(wyAsset);
                        this._dispatch(types_1.EventType.TransferOne, { accountAddress: fromAddress, toAddress: toAddress, asset: wyAsset });
                        data = schema_1.encodeTransferCall(abi, fromAddress, toAddress);
                        return [4 /*yield*/, utils_1.sendRawTransaction(this.web3, {
                                from: fromAddress,
                                to: abi.target,
                                data: data,
                            }, function (error) {
                                _this._dispatch(types_1.EventType.TransactionDenied, { error: error, accountAddress: fromAddress });
                            })];
                    case 1:
                        txHash = _c.sent();
                        return [4 /*yield*/, this._confirmTransaction(txHash, types_1.EventType.TransferOne, "Transferring asset")];
                    case 2:
                        _c.sent();
                        return [2 /*return*/, txHash];
                }
            });
        });
    };
    /**
     * Transfer one or more assets to another address.
     * ERC-721 and ERC-1155 assets are supported
     * @param param0 __namedParamaters Object
     * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to transfer.
     * @param fromAddress The owner's wallet address
     * @param toAddress The recipient's wallet address
     * @param schemaName The Wyvern schema name corresponding to the asset type, if not in each Asset definition
     * @returns Transaction hash
     */
    OpenSeaPort.prototype.transferAll = function (_a) {
        var assets = _a.assets, fromAddress = _a.fromAddress, toAddress = _a.toAddress, _b = _a.schemaName, schemaName = _b === void 0 ? types_1.WyvernSchemaName.ERC721 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var schemaNames, wyAssets, _c, calldata, target, proxyAddress, txHash;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        toAddress = utils_1.validateAndFormatWalletAddress(this.web3, toAddress);
                        schemaNames = assets.map(function (asset) { return asset.schemaName || schemaName; });
                        wyAssets = assets.map(function (asset) { return utils_1.getWyvernAsset(_this._getSchema(asset.schemaName), asset); });
                        _c = schema_1.encodeAtomicizedTransfer(schemaNames.map(function (name) { return _this._getSchema(name); }), wyAssets, fromAddress, toAddress, this._wyvernProtocol, this._networkName), calldata = _c.calldata, target = _c.target;
                        return [4 /*yield*/, this._getProxy(fromAddress)];
                    case 1:
                        proxyAddress = _d.sent();
                        if (!!proxyAddress) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._initializeProxy(fromAddress)];
                    case 2:
                        proxyAddress = _d.sent();
                        _d.label = 3;
                    case 3: return [4 /*yield*/, this._approveAll({ schemaNames: schemaNames, wyAssets: wyAssets, accountAddress: fromAddress, proxyAddress: proxyAddress })];
                    case 4:
                        _d.sent();
                        this._dispatch(types_1.EventType.TransferAll, { accountAddress: fromAddress, toAddress: toAddress, assets: wyAssets });
                        return [4 /*yield*/, utils_1.sendRawTransaction(this.web3, {
                                from: fromAddress,
                                to: proxyAddress,
                                data: schema_1.encodeProxyCall(target, types_1.HowToCall.DelegateCall, calldata),
                            }, function (error) {
                                _this._dispatch(types_1.EventType.TransactionDenied, { error: error, accountAddress: fromAddress });
                            })];
                    case 5:
                        txHash = _d.sent();
                        return [4 /*yield*/, this._confirmTransaction(txHash, types_1.EventType.TransferAll, "Transferring " + assets.length + " asset" + (assets.length == 1 ? '' : 's'))];
                    case 6:
                        _d.sent();
                        return [2 /*return*/, txHash];
                }
            });
        });
    };
    /**
     * Get known payment tokens (ERC-20) that match your filters.
     * @param param0 __namedParamters Object
     * @param symbol Filter by the ERC-20 symbol for the token,
     *    e.g. "DAI" for Dai stablecoin
     * @param address Filter by the ERC-20 contract address for the token,
     *    e.g. "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359" for Dai
     * @param name Filter by the name of the ERC-20 contract.
     *    Not guaranteed to exist or be unique for each token type.
     *    e.g. '' for Dai and 'Decentraland' for MANA
     * FUTURE: officiallySupported: Filter for tokens that are
     *    officially supported and shown on opensea.io
     */
    OpenSeaPort.prototype.getFungibleTokens = function (_a) {
        var _b = _a === void 0 ? {} : _a, symbol = _b.symbol, address = _b.address, name = _b.name;
        return __awaiter(this, void 0, void 0, function () {
            var tokenSettings, tokens, offlineTokens;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        utils_1.onDeprecated("Use `api.getPaymentTokens` instead");
                        tokenSettings = WyvernSchemas.tokens[this._networkName];
                        return [4 /*yield*/, this.api.getPaymentTokens({ symbol: symbol, address: address, name: name })];
                    case 1:
                        tokens = (_c.sent()).tokens;
                        offlineTokens = __spreadArray([
                            tokenSettings.canonicalWrappedEther
                        ], tokenSettings.otherTokens).filter(function (t) {
                            if (symbol != null && t.symbol.toLowerCase() != symbol.toLowerCase()) {
                                return false;
                            }
                            if (address != null && t.address.toLowerCase() != address.toLowerCase()) {
                                return false;
                            }
                            if (name != null && t.name != name) {
                                return false;
                            }
                            return true;
                        });
                        return [2 /*return*/, __spreadArray(__spreadArray([], offlineTokens), tokens)];
                }
            });
        });
    };
    /**
     * Get an account's balance of any Asset.
     * @param param0 __namedParameters Object
     * @param accountAddress Account address to check
     * @param asset The Asset to check balance for
     * @param retries How many times to retry if balance is 0
     */
    OpenSeaPort.prototype.getAssetBalance = function (_a, retries) {
        var accountAddress = _a.accountAddress, asset = _a.asset;
        if (retries === void 0) { retries = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var schema, wyAsset, abi_1, contract_1, inputValues_1, count, abi_2, contract_2, inputValues_2, owner;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        schema = this._getSchema(asset.schemaName);
                        wyAsset = utils_1.getWyvernAsset(schema, asset);
                        if (!schema.functions.countOf) return [3 /*break*/, 2];
                        abi_1 = schema.functions.countOf(wyAsset);
                        contract_1 = this._getClientsForRead(retries).web3.eth.contract([abi_1]).at(abi_1.target);
                        inputValues_1 = abi_1.inputs.filter(function (x) { return x.value !== undefined; }).map(function (x) { return x.value; });
                        return [4 /*yield*/, utils_1.promisifyCall(function (c) {
                                var _a;
                                return (_a = contract_1[abi_1.name]).call.apply(_a, __spreadArray(__spreadArray([accountAddress], inputValues_1), [c]));
                            })];
                    case 1:
                        count = _b.sent();
                        if (count !== undefined) {
                            return [2 /*return*/, count];
                        }
                        return [3 /*break*/, 5];
                    case 2:
                        if (!schema.functions.ownerOf) return [3 /*break*/, 4];
                        abi_2 = schema.functions.ownerOf(wyAsset);
                        contract_2 = this._getClientsForRead(retries).web3.eth.contract([abi_2]).at(abi_2.target);
                        if (abi_2.inputs.filter(function (x) { return x.value === undefined; })[0]) {
                            throw new Error("Missing an argument for finding the owner of this asset");
                        }
                        inputValues_2 = abi_2.inputs.map(function (i) { return i.value.toString(); });
                        return [4 /*yield*/, utils_1.promisifyCall(function (c) {
                                var _a;
                                return (_a = contract_2[abi_2.name]).call.apply(_a, __spreadArray(__spreadArray([], inputValues_2), [c]));
                            })];
                    case 3:
                        owner = _b.sent();
                        if (owner) {
                            return [2 /*return*/, owner.toLowerCase() == accountAddress.toLowerCase()
                                    ? new bignumber_js_1.BigNumber(1)
                                    : new bignumber_js_1.BigNumber(0)];
                        }
                        return [3 /*break*/, 5];
                    case 4: 
                    // Missing ownership call - skip check to allow listings
                    // by default
                    throw new Error('Missing ownership schema for this asset type');
                    case 5:
                        if (!(retries <= 0)) return [3 /*break*/, 6];
                        throw new Error('Unable to get current owner from smart contract');
                    case 6: return [4 /*yield*/, utils_1.delay(500)
                        // Recursively check owner again
                    ];
                    case 7:
                        _b.sent();
                        return [4 /*yield*/, this.getAssetBalance({ accountAddress: accountAddress, asset: asset }, retries - 1)];
                    case 8: 
                    // Recursively check owner again
                    return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    /**
     * Get the balance of a fungible token.
     * Convenience method for getAssetBalance for fungibles
     * @param param0 __namedParameters Object
     * @param accountAddress Account address to check
     * @param tokenAddress The address of the token to check balance for
     * @param schemaName Optional schema name for the fungible token
     * @param retries Number of times to retry if balance is undefined
     */
    OpenSeaPort.prototype.getTokenBalance = function (_a, retries) {
        var accountAddress = _a.accountAddress, tokenAddress = _a.tokenAddress, _b = _a.schemaName, schemaName = _b === void 0 ? types_1.WyvernSchemaName.ERC20 : _b;
        if (retries === void 0) { retries = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var asset;
            return __generator(this, function (_c) {
                asset = {
                    tokenId: null,
                    tokenAddress: tokenAddress,
                    schemaName: schemaName
                };
                return [2 /*return*/, this.getAssetBalance({ accountAddress: accountAddress, asset: asset }, retries)];
            });
        });
    };
    /**
     * Compute the fees for an order
     * @param param0 __namedParameters
     * @param asset Asset to use for fees. May be blank ONLY for multi-collection bundles.
     * @param side The side of the order (buy or sell)
     * @param accountAddress The account to check fees for (useful if fees differ by account, like transfer fees)
     * @param extraBountyBasisPoints The basis points to add for the bounty. Will throw if it exceeds the assets' contract's OpenSea fee.
     */
    OpenSeaPort.prototype.computeFees = function (_a) {
        var asset = _a.asset, side = _a.side, accountAddress = _a.accountAddress, _b = _a.extraBountyBasisPoints, extraBountyBasisPoints = _b === void 0 ? 0 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var openseaBuyerFeeBasisPoints, openseaSellerFeeBasisPoints, devBuyerFeeBasisPoints, devSellerFeeBasisPoints, transferFee, transferFeeTokenAddress, maxTotalBountyBPS, result, error_9, sellerBountyBasisPoints, bountyTooLarge, errorMessage;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        openseaBuyerFeeBasisPoints = constants_1.DEFAULT_BUYER_FEE_BASIS_POINTS;
                        openseaSellerFeeBasisPoints = constants_1.DEFAULT_SELLER_FEE_BASIS_POINTS;
                        devBuyerFeeBasisPoints = 0;
                        devSellerFeeBasisPoints = 0;
                        transferFee = utils_1.makeBigNumber(0);
                        transferFeeTokenAddress = null;
                        maxTotalBountyBPS = constants_1.DEFAULT_MAX_BOUNTY;
                        if (asset) {
                            openseaBuyerFeeBasisPoints = +asset.collection.openseaBuyerFeeBasisPoints;
                            openseaSellerFeeBasisPoints = +asset.collection.openseaSellerFeeBasisPoints;
                            devBuyerFeeBasisPoints = +asset.collection.devBuyerFeeBasisPoints;
                            devSellerFeeBasisPoints = +asset.collection.devSellerFeeBasisPoints;
                            maxTotalBountyBPS = openseaSellerFeeBasisPoints;
                        }
                        if (!(side == types_1.OrderSide.Sell && asset)) return [3 /*break*/, 4];
                        // Server-side knowledge
                        transferFee = asset.transferFee
                            ? utils_1.makeBigNumber(asset.transferFee)
                            : transferFee;
                        transferFeeTokenAddress = asset.transferFeePaymentToken
                            ? asset.transferFeePaymentToken.address
                            : transferFeeTokenAddress;
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, utils_1.getTransferFeeSettings(this.web3, { asset: asset, accountAddress: accountAddress })];
                    case 2:
                        result = _c.sent();
                        transferFee = result.transferFee != null ? result.transferFee : transferFee;
                        transferFeeTokenAddress = result.transferFeeTokenAddress || transferFeeTokenAddress;
                        return [3 /*break*/, 4];
                    case 3:
                        error_9 = _c.sent();
                        // Use server defaults
                        console.error(error_9);
                        return [3 /*break*/, 4];
                    case 4:
                        sellerBountyBasisPoints = side == types_1.OrderSide.Sell
                            ? extraBountyBasisPoints
                            : 0;
                        bountyTooLarge = sellerBountyBasisPoints + constants_1.OPENSEA_SELLER_BOUNTY_BASIS_POINTS > maxTotalBountyBPS;
                        if (sellerBountyBasisPoints > 0 && bountyTooLarge) {
                            errorMessage = "Total bounty exceeds the maximum for this asset type (" + maxTotalBountyBPS / 100 + "%).";
                            if (maxTotalBountyBPS >= constants_1.OPENSEA_SELLER_BOUNTY_BASIS_POINTS) {
                                errorMessage += " Remember that OpenSea will add " + constants_1.OPENSEA_SELLER_BOUNTY_BASIS_POINTS / 100 + "% for referrers with OpenSea accounts!";
                            }
                            throw new Error(errorMessage);
                        }
                        return [2 /*return*/, {
                                totalBuyerFeeBasisPoints: openseaBuyerFeeBasisPoints + devBuyerFeeBasisPoints,
                                totalSellerFeeBasisPoints: openseaSellerFeeBasisPoints + devSellerFeeBasisPoints,
                                openseaBuyerFeeBasisPoints: openseaBuyerFeeBasisPoints,
                                openseaSellerFeeBasisPoints: openseaSellerFeeBasisPoints,
                                devBuyerFeeBasisPoints: devBuyerFeeBasisPoints,
                                devSellerFeeBasisPoints: devSellerFeeBasisPoints,
                                sellerBountyBasisPoints: sellerBountyBasisPoints,
                                transferFee: transferFee,
                                transferFeeTokenAddress: transferFeeTokenAddress,
                            }];
                }
            });
        });
    };
    /**
     * Validate and post an order to the OpenSea orderbook.
     * @param order The order to post. Can either be signed by the maker or pre-approved on the Wyvern contract using approveOrder. See https://github.com/ProjectWyvern/wyvern-ethereum/blob/master/contracts/exchange/Exchange.sol#L178
     * @returns The order as stored by the orderbook
     */
    OpenSeaPort.prototype.validateAndPostOrder = function (order) {
        return __awaiter(this, void 0, void 0, function () {
            var hash, confirmedOrder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._wyvernProtocolReadOnly.wyvernExchange.hashOrder_.callAsync([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata)];
                    case 1:
                        hash = _a.sent();
                        if (hash !== order.hash) {
                            console.error(order);
                            throw new Error("Order couldn't be validated by the exchange due to a hash mismatch. Make sure your wallet is on the right network!");
                        }
                        this.logger('Order hashes match');
                        return [4 /*yield*/, this.api.postOrder(utils_1.orderToJSON(order))];
                    case 2:
                        confirmedOrder = _a.sent();
                        return [2 /*return*/, confirmedOrder];
                }
            });
        });
    };
    /**
     * DEPRECATED: ERC-1559
     * https://eips.ethereum.org/EIPS/eip-1559
     * Compute the gas price for sending a txn, in wei
     * Will be slightly above the mean to make it faster
     */
    OpenSeaPort.prototype._computeGasPrice = function () {
        return __awaiter(this, void 0, void 0, function () {
            var meanGas, weiToAdd;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.getCurrentGasPrice(this.web3)];
                    case 1:
                        meanGas = _a.sent();
                        weiToAdd = this.web3.toWei(this.gasPriceAddition, 'gwei');
                        return [2 /*return*/, meanGas.plus(weiToAdd)];
                }
            });
        });
    };
    /**
     * Compute the gas amount for sending a txn
     * Will be slightly above the result of estimateGas to make it more reliable
     * @param estimation The result of estimateGas for a transaction
     */
    OpenSeaPort.prototype._correctGasAmount = function (estimation) {
        return Math.ceil(estimation * this.gasIncreaseFactor);
    };
    /**
     * Estimate the gas needed to match two orders. Returns undefined if tx errors
     * @param param0 __namedParamaters Object
     * @param buy The buy order to match
     * @param sell The sell order to match
     * @param accountAddress The taker's wallet address
     * @param metadata Metadata bytes32 to send with the match
     * @param retries Number of times to retry if false
     */
    OpenSeaPort.prototype._estimateGasForMatch = function (_a, retries) {
        var buy = _a.buy, sell = _a.sell, accountAddress = _a.accountAddress, _b = _a.metadata, metadata = _b === void 0 ? constants_1.NULL_BLOCK_HASH : _b;
        if (retries === void 0) { retries = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var value, error_10;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(buy.maker.toLowerCase() == accountAddress.toLowerCase() && buy.paymentToken == constants_1.NULL_ADDRESS)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._getRequiredAmountForTakingSellOrder(sell)];
                    case 1:
                        value = _c.sent();
                        _c.label = 2;
                    case 2:
                        _c.trys.push([2, 4, , 7]);
                        return [4 /*yield*/, this._getClientsForRead(retries).wyvernProtocol.wyvernExchange.atomicMatch_.estimateGasAsync([buy.exchange, buy.maker, buy.taker, buy.feeRecipient, buy.target, buy.staticTarget, buy.paymentToken, sell.exchange, sell.maker, sell.taker, sell.feeRecipient, sell.target, sell.staticTarget, sell.paymentToken], [buy.makerRelayerFee, buy.takerRelayerFee, buy.makerProtocolFee, buy.takerProtocolFee, buy.basePrice, buy.extra, buy.listingTime, buy.expirationTime, buy.salt, sell.makerRelayerFee, sell.takerRelayerFee, sell.makerProtocolFee, sell.takerProtocolFee, sell.basePrice, sell.extra, sell.listingTime, sell.expirationTime, sell.salt], [buy.feeMethod, buy.side, buy.saleKind, buy.howToCall, sell.feeMethod, sell.side, sell.saleKind, sell.howToCall], buy.calldata, sell.calldata, buy.replacementPattern, sell.replacementPattern, buy.staticExtradata, sell.staticExtradata, [
                                buy.v || 0,
                                sell.v || 0
                            ], [
                                buy.r || constants_1.NULL_BLOCK_HASH,
                                buy.s || constants_1.NULL_BLOCK_HASH,
                                sell.r || constants_1.NULL_BLOCK_HASH,
                                sell.s || constants_1.NULL_BLOCK_HASH,
                                metadata
                            ], 
                            // Typescript error in estimate gas method, so use any
                            { from: accountAddress, value: value })];
                    case 3: return [2 /*return*/, _c.sent()];
                    case 4:
                        error_10 = _c.sent();
                        if (retries <= 0) {
                            console.error(error_10);
                            return [2 /*return*/, undefined];
                        }
                        return [4 /*yield*/, utils_1.delay(200)];
                    case 5:
                        _c.sent();
                        return [4 /*yield*/, this._estimateGasForMatch({ buy: buy, sell: sell, accountAddress: accountAddress, metadata: metadata }, retries - 1)];
                    case 6: return [2 /*return*/, _c.sent()];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Estimate the gas needed to transfer assets in bulk
     * Used for tests
     * @param param0 __namedParamaters Object
     * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to transfer.
     * @param fromAddress The owner's wallet address
     * @param toAddress The recipient's wallet address
     * @param schemaName The Wyvern schema name corresponding to the asset type, if not in each asset
     */
    OpenSeaPort.prototype._estimateGasForTransfer = function (_a) {
        var assets = _a.assets, fromAddress = _a.fromAddress, toAddress = _a.toAddress, _b = _a.schemaName, schemaName = _b === void 0 ? types_1.WyvernSchemaName.ERC721 : _b;
        return __awaiter(this, void 0, void 0, function () {
            var schemaNames, wyAssets, proxyAddress, _c, calldata, target;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        schemaNames = assets.map(function (asset) { return asset.schemaName || schemaName; });
                        wyAssets = assets.map(function (asset) { return utils_1.getWyvernAsset(_this._getSchema(asset.schemaName), asset); });
                        return [4 /*yield*/, this._getProxy(fromAddress)];
                    case 1:
                        proxyAddress = _d.sent();
                        if (!proxyAddress) {
                            throw new Error('Uninitialized proxy address');
                        }
                        return [4 /*yield*/, this._approveAll({ schemaNames: schemaNames, wyAssets: wyAssets, accountAddress: fromAddress, proxyAddress: proxyAddress })];
                    case 2:
                        _d.sent();
                        _c = schema_1.encodeAtomicizedTransfer(schemaNames.map(function (name) { return _this._getSchema(name); }), wyAssets, fromAddress, toAddress, this._wyvernProtocol, this._networkName), calldata = _c.calldata, target = _c.target;
                        return [2 /*return*/, utils_1.estimateGas(this.web3, {
                                from: fromAddress,
                                to: proxyAddress,
                                data: schema_1.encodeProxyCall(target, types_1.HowToCall.DelegateCall, calldata)
                            })];
                }
            });
        });
    };
    /**
     * Get the proxy address for a user's wallet.
     * Internal method exposed for dev flexibility.
     * @param accountAddress The user's wallet address
     * @param retries Optional number of retries to do
     */
    OpenSeaPort.prototype._getProxy = function (accountAddress, retries) {
        if (retries === void 0) { retries = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var proxyAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._wyvernProtocolReadOnly.wyvernProxyRegistry.proxies.callAsync(accountAddress)];
                    case 1:
                        proxyAddress = _a.sent();
                        if (proxyAddress == '0x') {
                            throw new Error("Couldn't retrieve your account from the blockchain - make sure you're on the correct Ethereum network!");
                        }
                        if (!(!proxyAddress || proxyAddress == constants_1.NULL_ADDRESS)) return [3 /*break*/, 5];
                        if (!(retries > 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, utils_1.delay(1000)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this._getProxy(accountAddress, retries - 1)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        proxyAddress = null;
                        _a.label = 5;
                    case 5: return [2 /*return*/, proxyAddress];
                }
            });
        });
    };
    /**
     * Initialize the proxy for a user's wallet.
     * Proxies are used to make trades on behalf of the order's maker so that
     *  trades can happen when the maker isn't online.
     * Internal method exposed for dev flexibility.
     * @param accountAddress The user's wallet address
     */
    OpenSeaPort.prototype._initializeProxy = function (accountAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var txnData, gasEstimate, transactionHash, proxyAddress;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._dispatch(types_1.EventType.InitializeAccount, { accountAddress: accountAddress });
                        this.logger("Initializing proxy for account: " + accountAddress);
                        txnData = { from: accountAddress };
                        return [4 /*yield*/, this._wyvernProtocolReadOnly.wyvernProxyRegistry.registerProxy.estimateGasAsync(txnData)];
                    case 1:
                        gasEstimate = _a.sent();
                        return [4 /*yield*/, this._wyvernProtocol.wyvernProxyRegistry.registerProxy.sendTransactionAsync(__assign(__assign({}, txnData), { gas: this._correctGasAmount(gasEstimate) }))];
                    case 2:
                        transactionHash = _a.sent();
                        return [4 /*yield*/, this._confirmTransaction(transactionHash, types_1.EventType.InitializeAccount, "Initializing proxy for account", function () { return __awaiter(_this, void 0, void 0, function () {
                                var polledProxy;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this._getProxy(accountAddress)];
                                        case 1:
                                            polledProxy = _a.sent();
                                            return [2 /*return*/, !!polledProxy];
                                    }
                                });
                            }); })];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this._getProxy(accountAddress, 10)];
                    case 4:
                        proxyAddress = _a.sent();
                        if (!proxyAddress) {
                            throw new Error('Failed to initialize your account :( Please restart your wallet/browser and try again!');
                        }
                        return [2 /*return*/, proxyAddress];
                }
            });
        });
    };
    /**
     * For a fungible token to use in trades (like W-ETH), get the amount
     *  approved for use by the Wyvern transfer proxy.
     * Internal method exposed for dev flexibility.
     * @param param0 __namedParamters Object
     * @param accountAddress Address for the user's wallet
     * @param tokenAddress Address for the token's contract
     * @param proxyAddress User's proxy address. If undefined, uses the token transfer proxy address
     */
    OpenSeaPort.prototype._getApprovedTokenCount = function (_a) {
        var accountAddress = _a.accountAddress, tokenAddress = _a.tokenAddress, proxyAddress = _a.proxyAddress;
        return __awaiter(this, void 0, void 0, function () {
            var addressToApprove, approved;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!tokenAddress) {
                            tokenAddress = WyvernSchemas.tokens[this._networkName].canonicalWrappedEther.address;
                        }
                        addressToApprove = proxyAddress || wyvern_js_1.WyvernProtocol.getTokenTransferProxyAddress(this._networkName);
                        return [4 /*yield*/, utils_1.rawCall(this.web3, {
                                from: accountAddress,
                                to: tokenAddress,
                                data: schema_1.encodeCall(contracts_1.getMethod(contracts_1.ERC20, 'allowance'), [accountAddress, addressToApprove]),
                            })];
                    case 1:
                        approved = _b.sent();
                        return [2 /*return*/, utils_1.makeBigNumber(approved)];
                }
            });
        });
    };
    OpenSeaPort.prototype._makeBuyOrder = function (_a) {
        var asset = _a.asset, quantity = _a.quantity, accountAddress = _a.accountAddress, startAmount = _a.startAmount, _b = _a.expirationTime, expirationTime = _b === void 0 ? 0 : _b, paymentTokenAddress = _a.paymentTokenAddress, _c = _a.extraBountyBasisPoints, extraBountyBasisPoints = _c === void 0 ? 0 : _c, sellOrder = _a.sellOrder, referrerAddress = _a.referrerAddress;
        return __awaiter(this, void 0, void 0, function () {
            var schema, quantityBN, wyAsset, openSeaAsset, taker, _d, totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, _e, makerRelayerFee, takerRelayerFee, makerProtocolFee, takerProtocolFee, makerReferrerFee, feeRecipient, feeMethod, _f, target, calldata, replacementPattern, _g, basePrice, extra, paymentToken, times, _h, staticTarget, staticExtradata;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        accountAddress = utils_1.validateAndFormatWalletAddress(this.web3, accountAddress);
                        schema = this._getSchema(asset.schemaName);
                        quantityBN = wyvern_js_1.WyvernProtocol.toBaseUnitAmount(utils_1.makeBigNumber(quantity), asset.decimals || 0);
                        wyAsset = utils_1.getWyvernAsset(schema, asset, quantityBN);
                        return [4 /*yield*/, this.api.getAsset(asset)];
                    case 1:
                        openSeaAsset = _j.sent();
                        taker = sellOrder
                            ? sellOrder.maker
                            : constants_1.NULL_ADDRESS;
                        return [4 /*yield*/, this.computeFees({ asset: openSeaAsset, extraBountyBasisPoints: extraBountyBasisPoints, side: types_1.OrderSide.Buy })];
                    case 2:
                        _d = _j.sent(), totalBuyerFeeBasisPoints = _d.totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints = _d.totalSellerFeeBasisPoints;
                        _e = this._getBuyFeeParameters(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, sellOrder), makerRelayerFee = _e.makerRelayerFee, takerRelayerFee = _e.takerRelayerFee, makerProtocolFee = _e.makerProtocolFee, takerProtocolFee = _e.takerProtocolFee, makerReferrerFee = _e.makerReferrerFee, feeRecipient = _e.feeRecipient, feeMethod = _e.feeMethod;
                        _f = schema_1.encodeBuy(schema, wyAsset, accountAddress), target = _f.target, calldata = _f.calldata, replacementPattern = _f.replacementPattern;
                        return [4 /*yield*/, this._getPriceParameters(types_1.OrderSide.Buy, paymentTokenAddress, expirationTime, startAmount)];
                    case 3:
                        _g = _j.sent(), basePrice = _g.basePrice, extra = _g.extra, paymentToken = _g.paymentToken;
                        times = this._getTimeParameters(expirationTime);
                        return [4 /*yield*/, this._getStaticCallTargetAndExtraData({ asset: openSeaAsset, useTxnOriginStaticCall: false })];
                    case 4:
                        _h = _j.sent(), staticTarget = _h.staticTarget, staticExtradata = _h.staticExtradata;
                        return [2 /*return*/, {
                                exchange: wyvern_js_1.WyvernProtocol.getExchangeContractAddress(this._networkName),
                                maker: accountAddress,
                                taker: taker,
                                quantity: quantityBN,
                                makerRelayerFee: makerRelayerFee,
                                takerRelayerFee: takerRelayerFee,
                                makerProtocolFee: makerProtocolFee,
                                takerProtocolFee: takerProtocolFee,
                                makerReferrerFee: makerReferrerFee,
                                waitingForBestCounterOrder: false,
                                feeMethod: feeMethod,
                                feeRecipient: feeRecipient,
                                side: types_1.OrderSide.Buy,
                                saleKind: types_1.SaleKind.FixedPrice,
                                target: target,
                                howToCall: types_1.HowToCall.Call,
                                calldata: calldata,
                                replacementPattern: replacementPattern,
                                staticTarget: staticTarget,
                                staticExtradata: staticExtradata,
                                paymentToken: paymentToken,
                                basePrice: basePrice,
                                extra: extra,
                                listingTime: times.listingTime,
                                expirationTime: times.expirationTime,
                                salt: wyvern_js_1.WyvernProtocol.generatePseudoRandomSalt(),
                                metadata: {
                                    asset: wyAsset,
                                    schema: schema.name,
                                    referrerAddress: referrerAddress
                                }
                            }];
                }
            });
        });
    };
    OpenSeaPort.prototype._makeSellOrder = function (_a) {
        var asset = _a.asset, quantity = _a.quantity, accountAddress = _a.accountAddress, startAmount = _a.startAmount, endAmount = _a.endAmount, listingTime = _a.listingTime, expirationTime = _a.expirationTime, waitForHighestBid = _a.waitForHighestBid, _b = _a.englishAuctionReservePrice, englishAuctionReservePrice = _b === void 0 ? 0 : _b, paymentTokenAddress = _a.paymentTokenAddress, extraBountyBasisPoints = _a.extraBountyBasisPoints, buyerAddress = _a.buyerAddress;
        return __awaiter(this, void 0, void 0, function () {
            var schema, quantityBN, wyAsset, openSeaAsset, _c, totalSellerFeeBasisPoints, totalBuyerFeeBasisPoints, sellerBountyBasisPoints, _d, target, calldata, replacementPattern, orderSaleKind, _e, basePrice, extra, paymentToken, reservePrice, times, _f, makerRelayerFee, takerRelayerFee, makerProtocolFee, takerProtocolFee, makerReferrerFee, feeRecipient, feeMethod, _g, staticTarget, staticExtradata;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        accountAddress = utils_1.validateAndFormatWalletAddress(this.web3, accountAddress);
                        schema = this._getSchema(asset.schemaName);
                        quantityBN = wyvern_js_1.WyvernProtocol.toBaseUnitAmount(utils_1.makeBigNumber(quantity), asset.decimals || 0);
                        wyAsset = utils_1.getWyvernAsset(schema, asset, quantityBN);
                        return [4 /*yield*/, this.api.getAsset(asset)];
                    case 1:
                        openSeaAsset = _h.sent();
                        return [4 /*yield*/, this.computeFees({ asset: openSeaAsset, side: types_1.OrderSide.Sell, extraBountyBasisPoints: extraBountyBasisPoints })];
                    case 2:
                        _c = _h.sent(), totalSellerFeeBasisPoints = _c.totalSellerFeeBasisPoints, totalBuyerFeeBasisPoints = _c.totalBuyerFeeBasisPoints, sellerBountyBasisPoints = _c.sellerBountyBasisPoints;
                        _d = schema_1.encodeSell(schema, wyAsset, accountAddress), target = _d.target, calldata = _d.calldata, replacementPattern = _d.replacementPattern;
                        orderSaleKind = endAmount != null && endAmount !== startAmount
                            ? types_1.SaleKind.DutchAuction
                            : types_1.SaleKind.FixedPrice;
                        return [4 /*yield*/, this._getPriceParameters(types_1.OrderSide.Sell, paymentTokenAddress, expirationTime, startAmount, endAmount, waitForHighestBid, englishAuctionReservePrice)];
                    case 3:
                        _e = _h.sent(), basePrice = _e.basePrice, extra = _e.extra, paymentToken = _e.paymentToken, reservePrice = _e.reservePrice;
                        times = this._getTimeParameters(expirationTime, listingTime, waitForHighestBid);
                        _f = this._getSellFeeParameters(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, waitForHighestBid, sellerBountyBasisPoints), makerRelayerFee = _f.makerRelayerFee, takerRelayerFee = _f.takerRelayerFee, makerProtocolFee = _f.makerProtocolFee, takerProtocolFee = _f.takerProtocolFee, makerReferrerFee = _f.makerReferrerFee, feeRecipient = _f.feeRecipient, feeMethod = _f.feeMethod;
                        return [4 /*yield*/, this._getStaticCallTargetAndExtraData({ asset: openSeaAsset, useTxnOriginStaticCall: waitForHighestBid })];
                    case 4:
                        _g = _h.sent(), staticTarget = _g.staticTarget, staticExtradata = _g.staticExtradata;
                        return [2 /*return*/, {
                                exchange: wyvern_js_1.WyvernProtocol.getExchangeContractAddress(this._networkName),
                                maker: accountAddress,
                                taker: buyerAddress,
                                quantity: quantityBN,
                                makerRelayerFee: makerRelayerFee,
                                takerRelayerFee: takerRelayerFee,
                                makerProtocolFee: makerProtocolFee,
                                takerProtocolFee: takerProtocolFee,
                                makerReferrerFee: makerReferrerFee,
                                waitingForBestCounterOrder: waitForHighestBid,
                                englishAuctionReservePrice: reservePrice ? utils_1.makeBigNumber(reservePrice) : undefined,
                                feeMethod: feeMethod,
                                feeRecipient: feeRecipient,
                                side: types_1.OrderSide.Sell,
                                saleKind: orderSaleKind,
                                target: target,
                                howToCall: types_1.HowToCall.Call,
                                calldata: calldata,
                                replacementPattern: replacementPattern,
                                staticTarget: staticTarget,
                                staticExtradata: staticExtradata,
                                paymentToken: paymentToken,
                                basePrice: basePrice,
                                extra: extra,
                                listingTime: times.listingTime,
                                expirationTime: times.expirationTime,
                                salt: wyvern_js_1.WyvernProtocol.generatePseudoRandomSalt(),
                                metadata: {
                                    asset: wyAsset,
                                    schema: schema.name,
                                }
                            }];
                }
            });
        });
    };
    OpenSeaPort.prototype._getStaticCallTargetAndExtraData = function (_a) {
        var asset = _a.asset, useTxnOriginStaticCall = _a.useTxnOriginStaticCall;
        return __awaiter(this, void 0, void 0, function () {
            var isCheezeWizards, isDecentralandEstate, isMainnet, cheezeWizardsBasicTournamentAddress, cheezeWizardsBasicTournamentABI, cheezeWizardsBasicTournmentInstance, wizardFingerprint, decentralandEstateAddress, decentralandEstateABI, decentralandEstateInstance, estateFingerprint;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        isCheezeWizards = [
                            constants_1.CHEEZE_WIZARDS_GUILD_ADDRESS.toLowerCase(),
                            constants_1.CHEEZE_WIZARDS_GUILD_RINKEBY_ADDRESS.toLowerCase()
                        ].includes(asset.tokenAddress.toLowerCase());
                        isDecentralandEstate = asset.tokenAddress.toLowerCase() == constants_1.DECENTRALAND_ESTATE_ADDRESS.toLowerCase();
                        isMainnet = this._networkName == types_1.Network.Main;
                        if (isMainnet && !useTxnOriginStaticCall) {
                            // While testing, we will use dummy values for mainnet. We will remove this if-statement once we have pushed the PR once and tested on Rinkeby
                            return [2 /*return*/, {
                                    staticTarget: constants_1.NULL_ADDRESS,
                                    staticExtradata: '0x',
                                }];
                        }
                        if (!isCheezeWizards) return [3 /*break*/, 3];
                        cheezeWizardsBasicTournamentAddress = isMainnet ? constants_1.CHEEZE_WIZARDS_BASIC_TOURNAMENT_ADDRESS : constants_1.CHEEZE_WIZARDS_BASIC_TOURNAMENT_RINKEBY_ADDRESS;
                        cheezeWizardsBasicTournamentABI = this.web3.eth.contract(contracts_1.CheezeWizardsBasicTournament);
                        return [4 /*yield*/, cheezeWizardsBasicTournamentABI.at(cheezeWizardsBasicTournamentAddress)];
                    case 1:
                        cheezeWizardsBasicTournmentInstance = _b.sent();
                        return [4 /*yield*/, utils_1.rawCall(this.web3, {
                                to: cheezeWizardsBasicTournmentInstance.address,
                                data: cheezeWizardsBasicTournmentInstance.wizardFingerprint.getData(asset.tokenId)
                            })];
                    case 2:
                        wizardFingerprint = _b.sent();
                        return [2 /*return*/, {
                                staticTarget: isMainnet
                                    ? constants_1.STATIC_CALL_CHEEZE_WIZARDS_ADDRESS
                                    : constants_1.STATIC_CALL_CHEEZE_WIZARDS_RINKEBY_ADDRESS,
                                staticExtradata: schema_1.encodeCall(contracts_1.getMethod(contracts_1.StaticCheckCheezeWizards, 'succeedIfCurrentWizardFingerprintMatchesProvidedWizardFingerprint'), [asset.tokenId, wizardFingerprint, useTxnOriginStaticCall]),
                            }];
                    case 3:
                        if (!(isDecentralandEstate && isMainnet)) return [3 /*break*/, 6];
                        decentralandEstateAddress = constants_1.DECENTRALAND_ESTATE_ADDRESS;
                        decentralandEstateABI = this.web3.eth.contract(contracts_1.DecentralandEstates);
                        return [4 /*yield*/, decentralandEstateABI.at(decentralandEstateAddress)];
                    case 4:
                        decentralandEstateInstance = _b.sent();
                        return [4 /*yield*/, utils_1.rawCall(this.web3, {
                                to: decentralandEstateInstance.address,
                                data: decentralandEstateInstance.getFingerprint.getData(asset.tokenId)
                            })];
                    case 5:
                        estateFingerprint = _b.sent();
                        return [2 /*return*/, {
                                staticTarget: constants_1.STATIC_CALL_DECENTRALAND_ESTATES_ADDRESS,
                                staticExtradata: schema_1.encodeCall(contracts_1.getMethod(contracts_1.StaticCheckDecentralandEstates, 'succeedIfCurrentEstateFingerprintMatchesProvidedEstateFingerprint'), [asset.tokenId, estateFingerprint, useTxnOriginStaticCall]),
                            }];
                    case 6:
                        if (useTxnOriginStaticCall) {
                            return [2 /*return*/, {
                                    staticTarget: isMainnet
                                        ? constants_1.STATIC_CALL_TX_ORIGIN_ADDRESS
                                        : constants_1.STATIC_CALL_TX_ORIGIN_RINKEBY_ADDRESS,
                                    staticExtradata: schema_1.encodeCall(contracts_1.getMethod(contracts_1.StaticCheckTxOrigin, 'succeedIfTxOriginMatchesHardcodedAddress'), []),
                                }];
                        }
                        else {
                            // Noop - no checks
                            return [2 /*return*/, {
                                    staticTarget: constants_1.NULL_ADDRESS,
                                    staticExtradata: '0x',
                                }];
                        }
                        _b.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    OpenSeaPort.prototype._makeBundleBuyOrder = function (_a) {
        var assets = _a.assets, collection = _a.collection, quantities = _a.quantities, accountAddress = _a.accountAddress, startAmount = _a.startAmount, _b = _a.expirationTime, expirationTime = _b === void 0 ? 0 : _b, paymentTokenAddress = _a.paymentTokenAddress, _c = _a.extraBountyBasisPoints, extraBountyBasisPoints = _c === void 0 ? 0 : _c, sellOrder = _a.sellOrder, referrerAddress = _a.referrerAddress;
        return __awaiter(this, void 0, void 0, function () {
            var quantityBNs, bundle, orderedSchemas, taker, asset, _d, _e, totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, _f, makerRelayerFee, takerRelayerFee, makerProtocolFee, takerProtocolFee, makerReferrerFee, feeRecipient, feeMethod, _g, calldata, replacementPattern, _h, basePrice, extra, paymentToken, times;
            var _this = this;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        accountAddress = utils_1.validateAndFormatWalletAddress(this.web3, accountAddress);
                        quantityBNs = quantities.map(function (quantity, i) { return wyvern_js_1.WyvernProtocol.toBaseUnitAmount(utils_1.makeBigNumber(quantity), assets[i].decimals || 0); });
                        bundle = utils_1.getWyvernBundle(assets, assets.map(function (a) { return _this._getSchema(a.schemaName); }), quantityBNs);
                        orderedSchemas = bundle.schemas.map(function (name) { return _this._getSchema(name); });
                        taker = sellOrder
                            ? sellOrder.maker
                            : constants_1.NULL_ADDRESS;
                        if (!collection) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.api.getAsset(assets[0])];
                    case 1:
                        _d = _j.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _d = undefined;
                        _j.label = 3;
                    case 3:
                        asset = _d;
                        return [4 /*yield*/, this.computeFees({ asset: asset, extraBountyBasisPoints: extraBountyBasisPoints, side: types_1.OrderSide.Buy })];
                    case 4:
                        _e = _j.sent(), totalBuyerFeeBasisPoints = _e.totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints = _e.totalSellerFeeBasisPoints;
                        _f = this._getBuyFeeParameters(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, sellOrder), makerRelayerFee = _f.makerRelayerFee, takerRelayerFee = _f.takerRelayerFee, makerProtocolFee = _f.makerProtocolFee, takerProtocolFee = _f.takerProtocolFee, makerReferrerFee = _f.makerReferrerFee, feeRecipient = _f.feeRecipient, feeMethod = _f.feeMethod;
                        _g = schema_1.encodeAtomicizedBuy(orderedSchemas, bundle.assets, accountAddress, this._wyvernProtocol, this._networkName), calldata = _g.calldata, replacementPattern = _g.replacementPattern;
                        return [4 /*yield*/, this._getPriceParameters(types_1.OrderSide.Buy, paymentTokenAddress, expirationTime, startAmount)];
                    case 5:
                        _h = _j.sent(), basePrice = _h.basePrice, extra = _h.extra, paymentToken = _h.paymentToken;
                        times = this._getTimeParameters(expirationTime);
                        return [2 /*return*/, {
                                exchange: wyvern_js_1.WyvernProtocol.getExchangeContractAddress(this._networkName),
                                maker: accountAddress,
                                taker: taker,
                                quantity: utils_1.makeBigNumber(1),
                                makerRelayerFee: makerRelayerFee,
                                takerRelayerFee: takerRelayerFee,
                                makerProtocolFee: makerProtocolFee,
                                takerProtocolFee: takerProtocolFee,
                                makerReferrerFee: makerReferrerFee,
                                waitingForBestCounterOrder: false,
                                feeMethod: feeMethod,
                                feeRecipient: feeRecipient,
                                side: types_1.OrderSide.Buy,
                                saleKind: types_1.SaleKind.FixedPrice,
                                target: wyvern_js_1.WyvernProtocol.getAtomicizerContractAddress(this._networkName),
                                howToCall: types_1.HowToCall.DelegateCall,
                                calldata: calldata,
                                replacementPattern: replacementPattern,
                                staticTarget: constants_1.NULL_ADDRESS,
                                staticExtradata: '0x',
                                paymentToken: paymentToken,
                                basePrice: basePrice,
                                extra: extra,
                                listingTime: times.listingTime,
                                expirationTime: times.expirationTime,
                                salt: wyvern_js_1.WyvernProtocol.generatePseudoRandomSalt(),
                                metadata: {
                                    bundle: bundle,
                                    referrerAddress: referrerAddress
                                }
                            }];
                }
            });
        });
    };
    OpenSeaPort.prototype._makeBundleSellOrder = function (_a) {
        var bundleName = _a.bundleName, bundleDescription = _a.bundleDescription, bundleExternalLink = _a.bundleExternalLink, assets = _a.assets, collection = _a.collection, quantities = _a.quantities, accountAddress = _a.accountAddress, startAmount = _a.startAmount, endAmount = _a.endAmount, listingTime = _a.listingTime, expirationTime = _a.expirationTime, waitForHighestBid = _a.waitForHighestBid, _b = _a.englishAuctionReservePrice, englishAuctionReservePrice = _b === void 0 ? 0 : _b, paymentTokenAddress = _a.paymentTokenAddress, extraBountyBasisPoints = _a.extraBountyBasisPoints, buyerAddress = _a.buyerAddress;
        return __awaiter(this, void 0, void 0, function () {
            var quantityBNs, bundle, orderedSchemas, asset, _c, _d, totalSellerFeeBasisPoints, totalBuyerFeeBasisPoints, sellerBountyBasisPoints, _e, calldata, replacementPattern, _f, basePrice, extra, paymentToken, reservePrice, times, orderSaleKind, _g, makerRelayerFee, takerRelayerFee, makerProtocolFee, takerProtocolFee, makerReferrerFee, feeRecipient;
            var _this = this;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        accountAddress = utils_1.validateAndFormatWalletAddress(this.web3, accountAddress);
                        quantityBNs = quantities.map(function (quantity, i) { return wyvern_js_1.WyvernProtocol.toBaseUnitAmount(utils_1.makeBigNumber(quantity), assets[i].decimals || 0); });
                        bundle = utils_1.getWyvernBundle(assets, assets.map(function (a) { return _this._getSchema(a.schemaName); }), quantityBNs);
                        orderedSchemas = bundle.schemas.map(function (name) { return _this._getSchema(name); });
                        bundle.name = bundleName;
                        bundle.description = bundleDescription;
                        bundle.external_link = bundleExternalLink;
                        if (!collection) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.api.getAsset(assets[0])];
                    case 1:
                        _c = _h.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _c = undefined;
                        _h.label = 3;
                    case 3:
                        asset = _c;
                        return [4 /*yield*/, this.computeFees({ asset: asset, side: types_1.OrderSide.Sell, extraBountyBasisPoints: extraBountyBasisPoints })];
                    case 4:
                        _d = _h.sent(), totalSellerFeeBasisPoints = _d.totalSellerFeeBasisPoints, totalBuyerFeeBasisPoints = _d.totalBuyerFeeBasisPoints, sellerBountyBasisPoints = _d.sellerBountyBasisPoints;
                        _e = schema_1.encodeAtomicizedSell(orderedSchemas, bundle.assets, accountAddress, this._wyvernProtocol, this._networkName), calldata = _e.calldata, replacementPattern = _e.replacementPattern;
                        return [4 /*yield*/, this._getPriceParameters(types_1.OrderSide.Sell, paymentTokenAddress, expirationTime, startAmount, endAmount, waitForHighestBid, englishAuctionReservePrice)];
                    case 5:
                        _f = _h.sent(), basePrice = _f.basePrice, extra = _f.extra, paymentToken = _f.paymentToken, reservePrice = _f.reservePrice;
                        times = this._getTimeParameters(expirationTime, listingTime, waitForHighestBid);
                        orderSaleKind = endAmount != null && endAmount !== startAmount
                            ? types_1.SaleKind.DutchAuction
                            : types_1.SaleKind.FixedPrice;
                        _g = this._getSellFeeParameters(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, waitForHighestBid, sellerBountyBasisPoints), makerRelayerFee = _g.makerRelayerFee, takerRelayerFee = _g.takerRelayerFee, makerProtocolFee = _g.makerProtocolFee, takerProtocolFee = _g.takerProtocolFee, makerReferrerFee = _g.makerReferrerFee, feeRecipient = _g.feeRecipient;
                        return [2 /*return*/, {
                                exchange: wyvern_js_1.WyvernProtocol.getExchangeContractAddress(this._networkName),
                                maker: accountAddress,
                                taker: buyerAddress,
                                quantity: utils_1.makeBigNumber(1),
                                makerRelayerFee: makerRelayerFee,
                                takerRelayerFee: takerRelayerFee,
                                makerProtocolFee: makerProtocolFee,
                                takerProtocolFee: takerProtocolFee,
                                makerReferrerFee: makerReferrerFee,
                                waitingForBestCounterOrder: waitForHighestBid,
                                englishAuctionReservePrice: reservePrice ? utils_1.makeBigNumber(reservePrice) : undefined,
                                feeMethod: types_1.FeeMethod.SplitFee,
                                feeRecipient: feeRecipient,
                                side: types_1.OrderSide.Sell,
                                saleKind: orderSaleKind,
                                target: wyvern_js_1.WyvernProtocol.getAtomicizerContractAddress(this._networkName),
                                howToCall: types_1.HowToCall.DelegateCall,
                                calldata: calldata,
                                replacementPattern: replacementPattern,
                                staticTarget: constants_1.NULL_ADDRESS,
                                staticExtradata: '0x',
                                paymentToken: paymentToken,
                                basePrice: basePrice,
                                extra: extra,
                                listingTime: times.listingTime,
                                expirationTime: times.expirationTime,
                                salt: wyvern_js_1.WyvernProtocol.generatePseudoRandomSalt(),
                                metadata: {
                                    bundle: bundle
                                }
                            }];
                }
            });
        });
    };
    OpenSeaPort.prototype._makeMatchingOrder = function (_a) {
        var _this = this;
        var order = _a.order, accountAddress = _a.accountAddress, recipientAddress = _a.recipientAddress;
        accountAddress = utils_1.validateAndFormatWalletAddress(this.web3, accountAddress);
        recipientAddress = utils_1.validateAndFormatWalletAddress(this.web3, recipientAddress);
        var computeOrderParams = function () {
            if ('asset' in order.metadata) {
                var schema = _this._getSchema(order.metadata.schema);
                return order.side == types_1.OrderSide.Buy
                    ? schema_1.encodeSell(schema, order.metadata.asset, recipientAddress)
                    : schema_1.encodeBuy(schema, order.metadata.asset, recipientAddress);
            }
            else if ('bundle' in order.metadata) {
                // We're matching a bundle order
                var bundle = order.metadata.bundle;
                var orderedSchemas = bundle.schemas
                    ? bundle.schemas.map(function (schemaName) { return _this._getSchema(schemaName); })
                    // Backwards compat:
                    : bundle.assets.map(function () { return _this._getSchema('schema' in order.metadata
                        ? order.metadata.schema
                        : undefined); });
                var atomicized = order.side == types_1.OrderSide.Buy
                    ? schema_1.encodeAtomicizedSell(orderedSchemas, order.metadata.bundle.assets, recipientAddress, _this._wyvernProtocol, _this._networkName)
                    : schema_1.encodeAtomicizedBuy(orderedSchemas, order.metadata.bundle.assets, recipientAddress, _this._wyvernProtocol, _this._networkName);
                return {
                    target: wyvern_js_1.WyvernProtocol.getAtomicizerContractAddress(_this._networkName),
                    calldata: atomicized.calldata,
                    replacementPattern: atomicized.replacementPattern
                };
            }
            else {
                throw new Error('Invalid order metadata');
            }
        };
        var _b = computeOrderParams(), target = _b.target, calldata = _b.calldata, replacementPattern = _b.replacementPattern;
        var times = this._getTimeParameters(0);
        // Compat for matching buy orders that have fee recipient still on them
        var feeRecipient = order.feeRecipient == constants_1.NULL_ADDRESS
            ? constants_1.OPENSEA_FEE_RECIPIENT
            : constants_1.NULL_ADDRESS;
        var matchingOrder = {
            exchange: order.exchange,
            maker: accountAddress,
            taker: order.maker,
            quantity: order.quantity,
            makerRelayerFee: order.makerRelayerFee,
            takerRelayerFee: order.takerRelayerFee,
            makerProtocolFee: order.makerProtocolFee,
            takerProtocolFee: order.takerProtocolFee,
            makerReferrerFee: order.makerReferrerFee,
            waitingForBestCounterOrder: false,
            feeMethod: order.feeMethod,
            feeRecipient: feeRecipient,
            side: (order.side + 1) % 2,
            saleKind: types_1.SaleKind.FixedPrice,
            target: target,
            howToCall: order.howToCall,
            calldata: calldata,
            replacementPattern: replacementPattern,
            staticTarget: constants_1.NULL_ADDRESS,
            staticExtradata: '0x',
            paymentToken: order.paymentToken,
            basePrice: order.basePrice,
            extra: utils_1.makeBigNumber(0),
            listingTime: times.listingTime,
            expirationTime: times.expirationTime,
            salt: wyvern_js_1.WyvernProtocol.generatePseudoRandomSalt(),
            metadata: order.metadata,
        };
        return __assign(__assign({}, matchingOrder), { hash: utils_1.getOrderHash(matchingOrder) });
    };
    /**
     * Validate against Wyvern that a buy and sell order can match
     * @param param0 __namedParamters Object
     * @param buy The buy order to validate
     * @param sell The sell order to validate
     * @param accountAddress Address for the user's wallet
     * @param shouldValidateBuy Whether to validate the buy order individually.
     * @param shouldValidateSell Whether to validate the sell order individually.
     * @param retries How many times to retry if validation fails
     */
    OpenSeaPort.prototype._validateMatch = function (_a, retries) {
        var buy = _a.buy, sell = _a.sell, accountAddress = _a.accountAddress, _b = _a.shouldValidateBuy, shouldValidateBuy = _b === void 0 ? false : _b, _c = _a.shouldValidateSell, shouldValidateSell = _c === void 0 ? false : _c;
        if (retries === void 0) { retries = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var buyValid, sellValid, canMatch, calldataCanMatch, error_11;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 7, , 10]);
                        if (!shouldValidateBuy) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._validateOrder(buy)];
                    case 1:
                        buyValid = _d.sent();
                        this.logger("Buy order is valid: " + buyValid);
                        if (!buyValid) {
                            throw new Error('Invalid buy order. It may have recently been removed. Please refresh the page and try again!');
                        }
                        _d.label = 2;
                    case 2:
                        if (!shouldValidateSell) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._validateOrder(sell)];
                    case 3:
                        sellValid = _d.sent();
                        this.logger("Sell order is valid: " + sellValid);
                        if (!sellValid) {
                            throw new Error('Invalid sell order. It may have recently been removed. Please refresh the page and try again!');
                        }
                        _d.label = 4;
                    case 4: return [4 /*yield*/, debugging_1.requireOrdersCanMatch(this._getClientsForRead(retries).wyvernProtocol, { buy: buy, sell: sell, accountAddress: accountAddress })];
                    case 5:
                        canMatch = _d.sent();
                        this.logger("Orders matching: " + canMatch);
                        return [4 /*yield*/, debugging_1.requireOrderCalldataCanMatch(this._getClientsForRead(retries).wyvernProtocol, { buy: buy, sell: sell })];
                    case 6:
                        calldataCanMatch = _d.sent();
                        this.logger("Order calldata matching: " + calldataCanMatch);
                        return [2 /*return*/, true];
                    case 7:
                        error_11 = _d.sent();
                        if (retries <= 0) {
                            throw new Error("Error matching this listing: " + error_11.message + ". Please contact the maker or try again later!");
                        }
                        return [4 /*yield*/, utils_1.delay(500)];
                    case 8:
                        _d.sent();
                        return [4 /*yield*/, this._validateMatch({ buy: buy, sell: sell, accountAddress: accountAddress, shouldValidateBuy: shouldValidateBuy, shouldValidateSell: shouldValidateSell }, retries - 1)];
                    case 9: return [2 /*return*/, _d.sent()];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    // For creating email whitelists on order takers
    OpenSeaPort.prototype._createEmailWhitelistEntry = function (_a) {
        var order = _a.order, buyerEmail = _a.buyerEmail;
        return __awaiter(this, void 0, void 0, function () {
            var asset;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        asset = 'asset' in order.metadata
                            ? order.metadata.asset
                            : undefined;
                        if (!asset || !asset.id) {
                            throw new Error("Whitelisting only available for non-fungible assets.");
                        }
                        return [4 /*yield*/, this.api.postAssetWhitelist(asset.address, asset.id, buyerEmail)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    // Throws
    OpenSeaPort.prototype._sellOrderValidationAndApprovals = function (_a) {
        var order = _a.order, accountAddress = _a.accountAddress;
        return __awaiter(this, void 0, void 0, function () {
            var wyAssets, schemaNames, tokenAddress, minimumAmount, sellValid;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        wyAssets = 'bundle' in order.metadata
                            ? order.metadata.bundle.assets
                            : order.metadata.asset
                                ? [order.metadata.asset]
                                : [];
                        schemaNames = 'bundle' in order.metadata && 'schemas' in order.metadata.bundle
                            ? order.metadata.bundle.schemas
                            : 'schema' in order.metadata
                                ? [order.metadata.schema]
                                : [];
                        tokenAddress = order.paymentToken;
                        return [4 /*yield*/, this._approveAll({ schemaNames: schemaNames, wyAssets: wyAssets, accountAddress: accountAddress })
                            // For fulfilling bids,
                            // need to approve access to fungible token because of the way fees are paid
                            // This can be done at a higher level to show UI
                        ];
                    case 1:
                        _b.sent();
                        if (!(tokenAddress != constants_1.NULL_ADDRESS)) return [3 /*break*/, 3];
                        minimumAmount = utils_1.makeBigNumber(order.basePrice);
                        return [4 /*yield*/, this.approveFungibleToken({ accountAddress: accountAddress, tokenAddress: tokenAddress, minimumAmount: minimumAmount })];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3: return [4 /*yield*/, this._wyvernProtocolReadOnly.wyvernExchange.validateOrderParameters_.callAsync([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata, { from: accountAddress })];
                    case 4:
                        sellValid = _b.sent();
                        if (!sellValid) {
                            console.error(order);
                            throw new Error("Failed to validate sell order parameters. Make sure you're on the right network!");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Instead of signing an off-chain order, you can approve an order
     * with on on-chain transaction using this method
     * @param order Order to approve
     * @returns Transaction hash of the approval transaction
     */
    OpenSeaPort.prototype._approveOrder = function (order) {
        return __awaiter(this, void 0, void 0, function () {
            var accountAddress, includeInOrderBook, transactionHash;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        accountAddress = order.maker;
                        includeInOrderBook = true;
                        this._dispatch(types_1.EventType.ApproveOrder, { order: order, accountAddress: accountAddress });
                        return [4 /*yield*/, this._wyvernProtocol.wyvernExchange.approveOrder_.sendTransactionAsync([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata, includeInOrderBook, { from: accountAddress })];
                    case 1:
                        transactionHash = _a.sent();
                        return [4 /*yield*/, this._confirmTransaction(transactionHash.toString(), types_1.EventType.ApproveOrder, "Approving order", function () { return __awaiter(_this, void 0, void 0, function () {
                                var isApproved;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this._validateOrder(order)];
                                        case 1:
                                            isApproved = _a.sent();
                                            return [2 /*return*/, isApproved];
                                    }
                                });
                            }); })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, transactionHash];
                }
            });
        });
    };
    OpenSeaPort.prototype._validateOrder = function (order) {
        return __awaiter(this, void 0, void 0, function () {
            var isValid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._wyvernProtocolReadOnly.wyvernExchange.validateOrder_.callAsync([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata, order.v || 0, order.r || constants_1.NULL_BLOCK_HASH, order.s || constants_1.NULL_BLOCK_HASH)];
                    case 1:
                        isValid = _a.sent();
                        return [2 /*return*/, isValid];
                }
            });
        });
    };
    OpenSeaPort.prototype._approveAll = function (_a) {
        var schemaNames = _a.schemaNames, wyAssets = _a.wyAssets, accountAddress = _a.accountAddress, proxyAddress = _a.proxyAddress;
        return __awaiter(this, void 0, void 0, function () {
            var _b, contractsWithApproveAll;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = proxyAddress;
                        if (_b) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._getProxy(accountAddress)];
                    case 1:
                        _b = (_c.sent());
                        _c.label = 2;
                    case 2:
                        proxyAddress = _b || undefined;
                        if (!!proxyAddress) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._initializeProxy(accountAddress)];
                    case 3:
                        proxyAddress = _c.sent();
                        _c.label = 4;
                    case 4:
                        contractsWithApproveAll = new Set();
                        return [2 /*return*/, Promise.all(wyAssets.map(function (wyAsset, i) { return __awaiter(_this, void 0, void 0, function () {
                                var schemaName, isOwner, error_12, minAmount, _a, wyNFTAsset, wyFTAsset;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            schemaName = schemaNames[i];
                                            _b.label = 1;
                                        case 1:
                                            _b.trys.push([1, 3, , 4]);
                                            return [4 /*yield*/, this._ownsAssetOnChain({
                                                    accountAddress: accountAddress,
                                                    proxyAddress: proxyAddress,
                                                    wyAsset: wyAsset,
                                                    schemaName: schemaName
                                                })];
                                        case 2:
                                            isOwner = _b.sent();
                                            return [3 /*break*/, 4];
                                        case 3:
                                            error_12 = _b.sent();
                                            // let it through for assets we don't support yet
                                            isOwner = true;
                                            return [3 /*break*/, 4];
                                        case 4:
                                            if (!isOwner) {
                                                minAmount = 'quantity' in wyAsset
                                                    ? wyAsset.quantity
                                                    : 1;
                                                console.error("Failed on-chain ownership check: " + accountAddress + " on " + schemaName + ":", wyAsset);
                                                throw new Error("You don't own enough to do that (" + minAmount + " base units of " + wyAsset.address + (wyAsset.id ? (" token " + wyAsset.id) : '') + ")");
                                            }
                                            _a = schemaName;
                                            switch (_a) {
                                                case types_1.WyvernSchemaName.ERC721: return [3 /*break*/, 5];
                                                case types_1.WyvernSchemaName.ERC1155: return [3 /*break*/, 5];
                                                case types_1.WyvernSchemaName.LegacyEnjin: return [3 /*break*/, 5];
                                                case types_1.WyvernSchemaName.ENSShortNameAuction: return [3 /*break*/, 5];
                                                case types_1.WyvernSchemaName.ERC20: return [3 /*break*/, 7];
                                            }
                                            return [3 /*break*/, 9];
                                        case 5:
                                            wyNFTAsset = wyAsset;
                                            return [4 /*yield*/, this.approveSemiOrNonFungibleToken({
                                                    tokenId: wyNFTAsset.id.toString(),
                                                    tokenAddress: wyNFTAsset.address,
                                                    accountAddress: accountAddress,
                                                    proxyAddress: proxyAddress,
                                                    schemaName: schemaName,
                                                    skipApproveAllIfTokenAddressIn: contractsWithApproveAll
                                                })];
                                        case 6: return [2 /*return*/, _b.sent()];
                                        case 7:
                                            wyFTAsset = wyAsset;
                                            if (contractsWithApproveAll.has(wyFTAsset.address)) {
                                                // Return null to indicate no tx occurred
                                                return [2 /*return*/, null];
                                            }
                                            contractsWithApproveAll.add(wyFTAsset.address);
                                            return [4 /*yield*/, this.approveFungibleToken({
                                                    tokenAddress: wyFTAsset.address,
                                                    accountAddress: accountAddress,
                                                    proxyAddress: proxyAddress
                                                })
                                                // For other assets, including contracts:
                                                // Send them to the user's proxy
                                                // if (where != WyvernAssetLocation.Proxy) {
                                                //   return this.transferOne({
                                                //     schemaName: schema.name,
                                                //     asset: wyAsset,
                                                //     isWyvernAsset: true,
                                                //     fromAddress: accountAddress,
                                                //     toAddress: proxy
                                                //   })
                                                // }
                                                // return true
                                            ];
                                        case 8: return [2 /*return*/, _b.sent()
                                            // For other assets, including contracts:
                                            // Send them to the user's proxy
                                            // if (where != WyvernAssetLocation.Proxy) {
                                            //   return this.transferOne({
                                            //     schemaName: schema.name,
                                            //     asset: wyAsset,
                                            //     isWyvernAsset: true,
                                            //     fromAddress: accountAddress,
                                            //     toAddress: proxy
                                            //   })
                                            // }
                                            // return true
                                        ];
                                        case 9: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                }
            });
        });
    };
    // Throws
    OpenSeaPort.prototype._buyOrderValidationAndApprovals = function (_a) {
        var order = _a.order, counterOrder = _a.counterOrder, accountAddress = _a.accountAddress;
        return __awaiter(this, void 0, void 0, function () {
            var tokenAddress, balance, minimumAmount, buyValid;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        tokenAddress = order.paymentToken;
                        if (!(tokenAddress != constants_1.NULL_ADDRESS)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getTokenBalance({ accountAddress: accountAddress, tokenAddress: tokenAddress })
                            /* NOTE: no buy-side auctions for now, so sell.saleKind === 0 */
                        ];
                    case 1:
                        balance = _b.sent();
                        minimumAmount = utils_1.makeBigNumber(order.basePrice);
                        if (!counterOrder) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._getRequiredAmountForTakingSellOrder(counterOrder)];
                    case 2:
                        minimumAmount = _b.sent();
                        _b.label = 3;
                    case 3:
                        // Check WETH balance
                        if (balance.toNumber() < minimumAmount.toNumber()) {
                            if (tokenAddress == WyvernSchemas.tokens[this._networkName].canonicalWrappedEther.address) {
                                throw new Error('Insufficient balance. You may need to wrap Ether.');
                            }
                            else {
                                throw new Error('Insufficient balance.');
                            }
                        }
                        // Check token approval
                        // This can be done at a higher level to show UI
                        return [4 /*yield*/, this.approveFungibleToken({ accountAddress: accountAddress, tokenAddress: tokenAddress, minimumAmount: minimumAmount })];
                    case 4:
                        // Check token approval
                        // This can be done at a higher level to show UI
                        _b.sent();
                        _b.label = 5;
                    case 5: return [4 /*yield*/, this._wyvernProtocolReadOnly.wyvernExchange.validateOrderParameters_.callAsync([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken], [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt], order.feeMethod, order.side, order.saleKind, order.howToCall, order.calldata, order.replacementPattern, order.staticExtradata, { from: accountAddress })];
                    case 6:
                        buyValid = _b.sent();
                        if (!buyValid) {
                            console.error(order);
                            throw new Error("Failed to validate buy order parameters. Make sure you're on the right network!");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Check if an account, or its proxy, owns an asset on-chain
     * @param accountAddress Account address for the wallet
     * @param proxyAddress Proxy address for the account
     * @param wyAsset asset to check. If fungible, the `quantity` attribute will be the minimum amount to own
     * @param schemaName WyvernSchemaName for the asset
     */
    OpenSeaPort.prototype._ownsAssetOnChain = function (_a) {
        var accountAddress = _a.accountAddress, proxyAddress = _a.proxyAddress, wyAsset = _a.wyAsset, schemaName = _a.schemaName;
        return __awaiter(this, void 0, void 0, function () {
            var asset, minAmount, accountBalance, _b, proxyBalance;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        asset = {
                            tokenId: wyAsset.id || null,
                            tokenAddress: wyAsset.address,
                            schemaName: schemaName
                        };
                        minAmount = new bignumber_js_1.BigNumber('quantity' in wyAsset
                            ? wyAsset.quantity
                            : 1);
                        return [4 /*yield*/, this.getAssetBalance({ accountAddress: accountAddress, asset: asset })];
                    case 1:
                        accountBalance = _c.sent();
                        if (accountBalance.greaterThanOrEqualTo(minAmount)) {
                            return [2 /*return*/, true];
                        }
                        _b = proxyAddress;
                        if (_b) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._getProxy(accountAddress)];
                    case 2:
                        _b = (_c.sent());
                        _c.label = 3;
                    case 3:
                        proxyAddress = _b;
                        if (!proxyAddress) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getAssetBalance({ accountAddress: proxyAddress, asset: asset })];
                    case 4:
                        proxyBalance = _c.sent();
                        if (proxyBalance.greaterThanOrEqualTo(minAmount)) {
                            return [2 /*return*/, true];
                        }
                        _c.label = 5;
                    case 5: return [2 /*return*/, false];
                }
            });
        });
    };
    OpenSeaPort.prototype._getBuyFeeParameters = function (totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, sellOrder) {
        this._validateFees(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints);
        var makerRelayerFee;
        var takerRelayerFee;
        if (sellOrder) {
            // Use the sell order's fees to ensure compatiblity and force the order
            // to only be acceptable by the sell order maker.
            // Swap maker/taker depending on whether it's an English auction (taker)
            // TODO add extraBountyBasisPoints when making bidder bounties
            makerRelayerFee = sellOrder.waitingForBestCounterOrder
                ? utils_1.makeBigNumber(sellOrder.makerRelayerFee)
                : utils_1.makeBigNumber(sellOrder.takerRelayerFee);
            takerRelayerFee = sellOrder.waitingForBestCounterOrder
                ? utils_1.makeBigNumber(sellOrder.takerRelayerFee)
                : utils_1.makeBigNumber(sellOrder.makerRelayerFee);
        }
        else {
            makerRelayerFee = utils_1.makeBigNumber(totalBuyerFeeBasisPoints);
            takerRelayerFee = utils_1.makeBigNumber(totalSellerFeeBasisPoints);
        }
        return {
            makerRelayerFee: makerRelayerFee,
            takerRelayerFee: takerRelayerFee,
            makerProtocolFee: utils_1.makeBigNumber(0),
            takerProtocolFee: utils_1.makeBigNumber(0),
            makerReferrerFee: utils_1.makeBigNumber(0),
            feeRecipient: constants_1.OPENSEA_FEE_RECIPIENT,
            feeMethod: types_1.FeeMethod.SplitFee
        };
    };
    OpenSeaPort.prototype._getSellFeeParameters = function (totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, waitForHighestBid, sellerBountyBasisPoints) {
        if (sellerBountyBasisPoints === void 0) { sellerBountyBasisPoints = 0; }
        this._validateFees(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints);
        // Use buyer as the maker when it's an English auction, so Wyvern sets prices correctly
        var feeRecipient = waitForHighestBid
            ? constants_1.NULL_ADDRESS
            : constants_1.OPENSEA_FEE_RECIPIENT;
        // Swap maker/taker fees when it's an English auction,
        // since these sell orders are takers not makers
        var makerRelayerFee = waitForHighestBid
            ? utils_1.makeBigNumber(totalBuyerFeeBasisPoints)
            : utils_1.makeBigNumber(totalSellerFeeBasisPoints);
        var takerRelayerFee = waitForHighestBid
            ? utils_1.makeBigNumber(totalSellerFeeBasisPoints)
            : utils_1.makeBigNumber(totalBuyerFeeBasisPoints);
        return {
            makerRelayerFee: makerRelayerFee,
            takerRelayerFee: takerRelayerFee,
            makerProtocolFee: utils_1.makeBigNumber(0),
            takerProtocolFee: utils_1.makeBigNumber(0),
            makerReferrerFee: utils_1.makeBigNumber(sellerBountyBasisPoints),
            feeRecipient: feeRecipient,
            feeMethod: types_1.FeeMethod.SplitFee
        };
    };
    /**
     * Validate fee parameters
     * @param totalBuyerFeeBasisPoints Total buyer fees
     * @param totalSellerFeeBasisPoints Total seller fees
     */
    OpenSeaPort.prototype._validateFees = function (totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints) {
        var maxFeePercent = constants_1.INVERSE_BASIS_POINT / 100;
        if (totalBuyerFeeBasisPoints > constants_1.INVERSE_BASIS_POINT
            || totalSellerFeeBasisPoints > constants_1.INVERSE_BASIS_POINT) {
            throw new Error("Invalid buyer/seller fees: must be less than " + maxFeePercent + "%");
        }
        if (totalBuyerFeeBasisPoints < 0
            || totalSellerFeeBasisPoints < 0) {
            throw new Error("Invalid buyer/seller fees: must be at least 0%");
        }
    };
    /**
     * Get the listing and expiration time paramters for a new order
     * @param expirationTimestamp Timestamp to expire the order (in seconds), or 0 for non-expiring
     * @param listingTimestamp Timestamp to start the order (in seconds), or undefined to start it now
     * @param waitingForBestCounterOrder Whether this order should be hidden until the best match is found
     */
    OpenSeaPort.prototype._getTimeParameters = function (expirationTimestamp, listingTimestamp, waitingForBestCounterOrder) {
        if (waitingForBestCounterOrder === void 0) { waitingForBestCounterOrder = false; }
        // Validation
        var minExpirationTimestamp = Math.round(Date.now() / 1000 + constants_1.MIN_EXPIRATION_SECONDS);
        var minListingTimestamp = Math.round(Date.now() / 1000);
        if (expirationTimestamp != 0 && expirationTimestamp < minExpirationTimestamp) {
            throw new Error("Expiration time must be at least " + constants_1.MIN_EXPIRATION_SECONDS + " seconds from now, or zero (non-expiring).");
        }
        if (listingTimestamp && listingTimestamp < minListingTimestamp) {
            throw new Error('Listing time cannot be in the past.');
        }
        if (listingTimestamp && expirationTimestamp != 0 && listingTimestamp >= expirationTimestamp) {
            throw new Error('Listing time must be before the expiration time.');
        }
        if (waitingForBestCounterOrder && expirationTimestamp == 0) {
            throw new Error('English auctions must have an expiration time.');
        }
        if (waitingForBestCounterOrder && listingTimestamp) {
            throw new Error("Cannot schedule an English auction for the future.");
        }
        if (parseInt(expirationTimestamp.toString()) != expirationTimestamp) {
            throw new Error("Expiration timestamp must be a whole number of seconds");
        }
        if (waitingForBestCounterOrder) {
            listingTimestamp = expirationTimestamp;
            // Expire one week from now, to ensure server can match it
            // Later, this will expire closer to the listingTime
            expirationTimestamp = expirationTimestamp + constants_1.ORDER_MATCHING_LATENCY_SECONDS;
        }
        else {
            // Small offset to account for latency
            listingTimestamp = listingTimestamp || Math.round(Date.now() / 1000 - 100);
        }
        return {
            listingTime: utils_1.makeBigNumber(listingTimestamp),
            expirationTime: utils_1.makeBigNumber(expirationTimestamp),
        };
    };
    /**
     * Compute the `basePrice` and `extra` parameters to be used to price an order.
     * Also validates the expiration time and auction type.
     * @param tokenAddress Address of the ERC-20 token to use for trading.
     * Use the null address for ETH
     * @param expirationTime When the auction expires, or 0 if never.
     * @param startAmount The base value for the order, in the token's main units (e.g. ETH instead of wei)
     * @param endAmount The end value for the order, in the token's main units (e.g. ETH instead of wei). If unspecified, the order's `extra` attribute will be 0
     */
    OpenSeaPort.prototype._getPriceParameters = function (orderSide, tokenAddress, expirationTime, startAmount, endAmount, waitingForBestCounterOrder, englishAuctionReservePrice) {
        if (waitingForBestCounterOrder === void 0) { waitingForBestCounterOrder = false; }
        return __awaiter(this, void 0, void 0, function () {
            var priceDiff, paymentToken, isEther, tokens, token, basePrice, extra, reservePrice;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        priceDiff = endAmount != null
                            ? startAmount - endAmount
                            : 0;
                        paymentToken = tokenAddress.toLowerCase();
                        isEther = tokenAddress == constants_1.NULL_ADDRESS;
                        return [4 /*yield*/, this.api.getPaymentTokens({ address: paymentToken })];
                    case 1:
                        tokens = (_a.sent()).tokens;
                        token = tokens[0];
                        // Validation
                        if (isNaN(startAmount) || startAmount == null || startAmount < 0) {
                            throw new Error("Starting price must be a number >= 0");
                        }
                        if (!isEther && !token) {
                            throw new Error("No ERC-20 token found for '" + paymentToken + "'");
                        }
                        if (isEther && waitingForBestCounterOrder) {
                            throw new Error("English auctions must use wrapped ETH or an ERC-20 token.");
                        }
                        if (isEther && orderSide === types_1.OrderSide.Buy) {
                            throw new Error("Offers must use wrapped ETH or an ERC-20 token.");
                        }
                        if (priceDiff < 0) {
                            throw new Error('End price must be less than or equal to the start price.');
                        }
                        if (priceDiff > 0 && expirationTime == 0) {
                            throw new Error('Expiration time must be set if order will change in price.');
                        }
                        if (englishAuctionReservePrice && !waitingForBestCounterOrder) {
                            throw new Error('Reserve prices may only be set on English auctions.');
                        }
                        if (englishAuctionReservePrice && (englishAuctionReservePrice < startAmount)) {
                            throw new Error('Reserve price must be greater than or equal to the start amount.');
                        }
                        basePrice = isEther
                            ? utils_1.makeBigNumber(this.web3.toWei(startAmount, 'ether')).round()
                            : wyvern_js_1.WyvernProtocol.toBaseUnitAmount(utils_1.makeBigNumber(startAmount), token.decimals);
                        extra = isEther
                            ? utils_1.makeBigNumber(this.web3.toWei(priceDiff, 'ether')).round()
                            : wyvern_js_1.WyvernProtocol.toBaseUnitAmount(utils_1.makeBigNumber(priceDiff), token.decimals);
                        reservePrice = englishAuctionReservePrice
                            ? isEther
                                ? utils_1.makeBigNumber(this.web3.toWei(englishAuctionReservePrice, 'ether')).round()
                                : wyvern_js_1.WyvernProtocol.toBaseUnitAmount(utils_1.makeBigNumber(englishAuctionReservePrice), token.decimals)
                            : undefined;
                        return [2 /*return*/, { basePrice: basePrice, extra: extra, paymentToken: paymentToken, reservePrice: reservePrice }];
                }
            });
        });
    };
    OpenSeaPort.prototype._getMetadata = function (order, referrerAddress) {
        var referrer = referrerAddress || order.metadata.referrerAddress;
        if (referrer && ethereumjs_util_1.isValidAddress(referrer)) {
            return referrer;
        }
        return undefined;
    };
    OpenSeaPort.prototype._atomicMatch = function (_a) {
        var buy = _a.buy, sell = _a.sell, accountAddress = _a.accountAddress, _b = _a.metadata, metadata = _b === void 0 ? constants_1.NULL_BLOCK_HASH : _b;
        return __awaiter(this, void 0, void 0, function () {
            var value, shouldValidateBuy, shouldValidateSell, txHash, txnData, args, gasEstimate, error_13, error_14;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        shouldValidateBuy = true;
                        shouldValidateSell = true;
                        if (!(sell.maker.toLowerCase() == accountAddress.toLowerCase())) return [3 /*break*/, 2];
                        // USER IS THE SELLER, only validate the buy order
                        return [4 /*yield*/, this._sellOrderValidationAndApprovals({ order: sell, accountAddress: accountAddress })];
                    case 1:
                        // USER IS THE SELLER, only validate the buy order
                        _c.sent();
                        shouldValidateSell = false;
                        return [3 /*break*/, 6];
                    case 2:
                        if (!(buy.maker.toLowerCase() == accountAddress.toLowerCase())) return [3 /*break*/, 6];
                        // USER IS THE BUYER, only validate the sell order
                        return [4 /*yield*/, this._buyOrderValidationAndApprovals({ order: buy, counterOrder: sell, accountAddress: accountAddress })];
                    case 3:
                        // USER IS THE BUYER, only validate the sell order
                        _c.sent();
                        shouldValidateBuy = false;
                        if (!(buy.paymentToken == constants_1.NULL_ADDRESS)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this._getRequiredAmountForTakingSellOrder(sell)];
                    case 4:
                        value = _c.sent();
                        _c.label = 5;
                    case 5: return [3 /*break*/, 6];
                    case 6: return [4 /*yield*/, this._validateMatch({ buy: buy, sell: sell, accountAddress: accountAddress, shouldValidateBuy: shouldValidateBuy, shouldValidateSell: shouldValidateSell })];
                    case 7:
                        _c.sent();
                        this._dispatch(types_1.EventType.MatchOrders, { buy: buy, sell: sell, accountAddress: accountAddress, matchMetadata: metadata });
                        txnData = { from: accountAddress, value: value };
                        args = [
                            [buy.exchange, buy.maker, buy.taker, buy.feeRecipient, buy.target,
                                buy.staticTarget, buy.paymentToken, sell.exchange, sell.maker, sell.taker, sell.feeRecipient, sell.target, sell.staticTarget, sell.paymentToken],
                            [buy.makerRelayerFee, buy.takerRelayerFee, buy.makerProtocolFee, buy.takerProtocolFee, buy.basePrice, buy.extra, buy.listingTime, buy.expirationTime, buy.salt, sell.makerRelayerFee, sell.takerRelayerFee, sell.makerProtocolFee, sell.takerProtocolFee, sell.basePrice, sell.extra, sell.listingTime, sell.expirationTime, sell.salt],
                            [buy.feeMethod, buy.side, buy.saleKind, buy.howToCall, sell.feeMethod, sell.side, sell.saleKind, sell.howToCall],
                            buy.calldata,
                            sell.calldata,
                            buy.replacementPattern,
                            sell.replacementPattern,
                            buy.staticExtradata,
                            sell.staticExtradata,
                            [
                                buy.v || 0,
                                sell.v || 0
                            ],
                            [
                                buy.r || constants_1.NULL_BLOCK_HASH,
                                buy.s || constants_1.NULL_BLOCK_HASH,
                                sell.r || constants_1.NULL_BLOCK_HASH,
                                sell.s || constants_1.NULL_BLOCK_HASH,
                                metadata
                            ]
                        ];
                        _c.label = 8;
                    case 8:
                        _c.trys.push([8, 10, , 11]);
                        return [4 /*yield*/, this._wyvernProtocolReadOnly.wyvernExchange.atomicMatch_.estimateGasAsync(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], txnData)];
                    case 9:
                        gasEstimate = _c.sent();
                        txnData.gas = this._correctGasAmount(gasEstimate);
                        return [3 /*break*/, 11];
                    case 10:
                        error_13 = _c.sent();
                        console.error("Failed atomic match with args: ", args, error_13);
                        throw new Error("Oops, the Ethereum network rejected this transaction :( The OpenSea devs have been alerted, but this problem is typically due an item being locked or untransferrable. The exact error was \"" + error_13.message.substr(0, debugging_1.MAX_ERROR_LENGTH) + "...\"");
                    case 11:
                        _c.trys.push([11, 13, , 14]);
                        this.logger("Fulfilling order with gas set to " + txnData.gas);
                        return [4 /*yield*/, this._wyvernProtocol.wyvernExchange.atomicMatch_.sendTransactionAsync(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], txnData)];
                    case 12:
                        txHash = _c.sent();
                        return [3 /*break*/, 14];
                    case 13:
                        error_14 = _c.sent();
                        console.error(error_14);
                        this._dispatch(types_1.EventType.TransactionDenied, { error: error_14, buy: buy, sell: sell, accountAddress: accountAddress, matchMetadata: metadata });
                        throw new Error("Failed to authorize transaction: \"" + (error_14.message
                            ? error_14.message
                            : 'user denied') + "...\"");
                    case 14: return [2 /*return*/, txHash];
                }
            });
        });
    };
    OpenSeaPort.prototype._getRequiredAmountForTakingSellOrder = function (sell) {
        return __awaiter(this, void 0, void 0, function () {
            var currentPrice, estimatedPrice, maxPrice, feePercentage, fee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCurrentPrice(sell)];
                    case 1:
                        currentPrice = _a.sent();
                        estimatedPrice = utils_1.estimateCurrentPrice(sell);
                        maxPrice = bignumber_js_1.BigNumber.max(currentPrice, estimatedPrice);
                        // TODO Why is this not always a big number?
                        sell.takerRelayerFee = utils_1.makeBigNumber(sell.takerRelayerFee);
                        feePercentage = sell.takerRelayerFee.div(constants_1.INVERSE_BASIS_POINT);
                        fee = feePercentage.times(maxPrice);
                        return [2 /*return*/, fee.plus(maxPrice).ceil()];
                }
            });
        });
    };
    OpenSeaPort.prototype._authorizeOrder = function (order) {
        return __awaiter(this, void 0, void 0, function () {
            var message, signerAddress, makerIsSmartContract, error_15;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        message = order.hash;
                        signerAddress = order.maker;
                        this._dispatch(types_1.EventType.CreateOrder, { order: order, accountAddress: order.maker });
                        return [4 /*yield*/, utils_1.isContractAddress(this.web3, signerAddress)];
                    case 1:
                        makerIsSmartContract = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 7, , 8]);
                        if (!makerIsSmartContract) return [3 /*break*/, 4];
                        // The web3 provider is probably a smart contract wallet.
                        // Fallback to on-chain approval.
                        return [4 /*yield*/, this._approveOrder(order)];
                    case 3:
                        // The web3 provider is probably a smart contract wallet.
                        // Fallback to on-chain approval.
                        _a.sent();
                        return [2 /*return*/, null];
                    case 4: return [4 /*yield*/, utils_1.personalSignAsync(this.web3, message, signerAddress)];
                    case 5: return [2 /*return*/, _a.sent()];
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        error_15 = _a.sent();
                        this._dispatch(types_1.EventType.OrderDenied, { order: order, accountAddress: signerAddress });
                        throw error_15;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    OpenSeaPort.prototype._getSchema = function (schemaName) {
        var schemaName_ = schemaName || types_1.WyvernSchemaName.ERC721;
        var schema = WyvernSchemas.schemas[this._networkName].filter(function (s) { return s.name == schemaName_; })[0];
        if (!schema) {
            throw new Error("Trading for this asset (" + schemaName_ + ") is not yet supported. Please contact us or check back later!");
        }
        return schema;
    };
    OpenSeaPort.prototype._dispatch = function (event, data) {
        this._emitter.emit(event, data);
    };
    /**
     * Get the clients to use for a read call
     * @param retries current retry value
     */
    OpenSeaPort.prototype._getClientsForRead = function (retries) {
        if (retries === void 0) { retries = 1; }
        if (retries > 0) {
            // Use injected provider by default
            return {
                'web3': this.web3,
                'wyvernProtocol': this._wyvernProtocol
            };
        }
        else {
            // Use provided provider as fallback
            return {
                'web3': this.web3ReadOnly,
                'wyvernProtocol': this._wyvernProtocolReadOnly
            };
        }
    };
    OpenSeaPort.prototype._confirmTransaction = function (transactionHash, event, description, testForSuccess) {
        return __awaiter(this, void 0, void 0, function () {
            var transactionEventData, error_16;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        transactionEventData = { transactionHash: transactionHash, event: event };
                        this.logger("Transaction started: " + description);
                        if (!(transactionHash == constants_1.NULL_BLOCK_HASH)) return [3 /*break*/, 4];
                        // This was a smart contract wallet that doesn't know the transaction
                        this._dispatch(types_1.EventType.TransactionCreated, { event: event });
                        if (!!testForSuccess) return [3 /*break*/, 2];
                        // Wait if test not implemented
                        this.logger("Unknown action, waiting 1 minute: " + description);
                        return [4 /*yield*/, utils_1.delay(60 * 1000)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2: return [4 /*yield*/, this._pollCallbackForConfirmation(event, description, testForSuccess)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        this._dispatch(types_1.EventType.TransactionCreated, transactionEventData);
                        return [4 /*yield*/, utils_1.confirmTransaction(this.web3, transactionHash)];
                    case 5:
                        _a.sent();
                        this.logger("Transaction succeeded: " + description);
                        this._dispatch(types_1.EventType.TransactionConfirmed, transactionEventData);
                        return [3 /*break*/, 7];
                    case 6:
                        error_16 = _a.sent();
                        this.logger("Transaction failed: " + description);
                        this._dispatch(types_1.EventType.TransactionFailed, __assign(__assign({}, transactionEventData), { error: error_16 }));
                        throw error_16;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    OpenSeaPort.prototype._pollCallbackForConfirmation = function (event, description, testForSuccess) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var initialRetries, testResolve;
                        var _this = this;
                        return __generator(this, function (_a) {
                            initialRetries = 60;
                            testResolve = function (retries) { return __awaiter(_this, void 0, void 0, function () {
                                var wasSuccessful;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, testForSuccess()];
                                        case 1:
                                            wasSuccessful = _a.sent();
                                            if (wasSuccessful) {
                                                this.logger("Transaction succeeded: " + description);
                                                this._dispatch(types_1.EventType.TransactionConfirmed, { event: event });
                                                return [2 /*return*/, resolve()];
                                            }
                                            else if (retries <= 0) {
                                                return [2 /*return*/, reject()];
                                            }
                                            if (retries % 10 == 0) {
                                                this.logger("Tested transaction " + (initialRetries - retries + 1) + " times: " + description);
                                            }
                                            return [4 /*yield*/, utils_1.delay(5000)];
                                        case 2:
                                            _a.sent();
                                            return [2 /*return*/, testResolve(retries - 1)];
                                    }
                                });
                            }); };
                            return [2 /*return*/, testResolve(initialRetries)];
                        });
                    }); })];
            });
        });
    };
    return OpenSeaPort;
}());
exports.OpenSeaPort = OpenSeaPort;
//# sourceMappingURL=seaport.js.map
'''
'''--- lib/types.d.ts ---
import BigNumber from 'bignumber.js';
import * as Web3 from 'web3';
import { Network, HowToCall, ECSignature, Order as WyvernOrder } from 'wyvern-js/lib/types';
import { Token } from 'wyvern-schemas/dist/types';
export { Network, HowToCall, ECSignature };
/**
 * Events emitted by the SDK. There are five types:
 * 1. Transaction events, which tell you when a new transaction was
 *    created, confirmed, denied, or failed.
 * 2. pre-transaction events, which are named (like "WrapEth") and indicate
 *    that Web3 is asking for a signature on a transaction that needs to occur before
 *    an order is made or fulfilled. This includes approval events and account
 *    initialization.
 * 3. Basic actions: matching, cancelling, and creating orders.
 *    The "CreateOrder" event fires when a signature is being prompted
 *    to create an off-chain order. The "OrderDenied" event fires when a signature
 *    request is denied by the user.
 * 4. The "TransferAll" event, which fires when a user is about to directly
 *    transfer one or more assets to another account
 */
export declare enum EventType {
    TransactionCreated = "TransactionCreated",
    TransactionConfirmed = "TransactionConfirmed",
    TransactionDenied = "TransactionDenied",
    TransactionFailed = "TransactionFailed",
    InitializeAccount = "InitializeAccount",
    WrapEth = "WrapEth",
    UnwrapWeth = "UnwrapWeth",
    ApproveCurrency = "ApproveCurrency",
    ApproveAsset = "ApproveAsset",
    ApproveAllAssets = "ApproveAllAssets",
    UnapproveCurrency = "UnapproveCurrency",
    MatchOrders = "MatchOrders",
    CancelOrder = "CancelOrder",
    ApproveOrder = "ApproveOrder",
    CreateOrder = "CreateOrder",
    OrderDenied = "OrderDenied",
    TransferAll = "TransferAll",
    TransferOne = "TransferOne",
    WrapAssets = "WrapAssets",
    UnwrapAssets = "UnwrapAssets",
    LiquidateAssets = "LiquidateAssets",
    PurchaseAssets = "PurchaseAssets"
}
/**
 * Data that gets sent with each EventType
 */
export interface EventData {
    accountAddress?: string;
    toAddress?: string;
    proxyAddress?: string;
    amount?: BigNumber;
    contractAddress?: string;
    assets?: WyvernAsset[];
    asset?: WyvernAsset;
    transactionHash?: string;
    event?: EventType;
    error?: Error;
    order?: Order | UnsignedOrder;
    buy?: Order;
    sell?: Order;
    matchMetadata?: string;
}
/**
 * OpenSea API configuration object
 * @param apiKey Optional key to use for API
 * @param networkName `Network` type to use. Defaults to `Network.Main` (mainnet)
 * @param gasPrice Default gas price to send to the Wyvern Protocol
 * @param apiBaseUrl Optional base URL to use for the API
 */
export interface OpenSeaAPIConfig {
    networkName?: Network;
    apiKey?: string;
    apiBaseUrl?: string;
    gasPrice?: BigNumber;
}
/**
 * Wyvern order side: buy or sell.
 */
export declare enum OrderSide {
    Buy = 0,
    Sell = 1
}
/**
 * Wyvern fee method
 * ProtocolFee: Charge maker fee to seller and charge taker fee to buyer.
 * SplitFee: Maker fees are deducted from the token amount that the maker receives. Taker fees are extra tokens that must be paid by the taker.
 */
export declare enum FeeMethod {
    ProtocolFee = 0,
    SplitFee = 1
}
/**
 * Wyvern: type of sale. Fixed or Dutch auction
 * Note: not imported from wyvern.js because it uses
 * EnglishAuction as 1 and DutchAuction as 2
 */
export declare enum SaleKind {
    FixedPrice = 0,
    DutchAuction = 1
}
/**
 * Types of asset contracts
 * Given by the asset_contract_type in the OpenSea API
 */
export declare enum AssetContractType {
    Fungible = "fungible",
    SemiFungible = "semi-fungible",
    NonFungible = "non-fungible",
    Unknown = "unknown"
}
export declare enum WyvernSchemaName {
    ERC20 = "ERC20",
    ERC721 = "ERC721",
    ERC1155 = "ERC1155",
    LegacyEnjin = "Enjin",
    ENSShortNameAuction = "ENSShortNameAuction"
}
/**
 * The NFT version that this contract uses.
 * ERC721 versions are:
 * 1.0: CryptoKitties and early 721s, which lack approve-all and
 *      have problems calling `transferFrom` from the owner's account.
 * 2.0: CryptoSaga and others that lack `transferFrom` and have
 *      `takeOwnership` instead
 * 3.0: The current OpenZeppelin standard:
 *      https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC721/ERC721.sol
 * Special cases:
 * locked: When the transfer function has been locked by the dev
 */
export declare enum TokenStandardVersion {
    Unsupported = "unsupported",
    Locked = "locked",
    Enjin = "1155-1.0",
    ERC721v1 = "1.0",
    ERC721v2 = "2.0",
    ERC721v3 = "3.0"
}
export declare enum WyvernAssetLocation {
    Account = "account",
    Proxy = "proxy",
    Other = "other"
}
export interface WyvernNFTAsset {
    id: string;
    address: string;
}
export interface WyvernFTAsset {
    id?: string;
    address: string;
    quantity: string;
}
export declare type WyvernAsset = WyvernNFTAsset | WyvernFTAsset;
export interface WyvernBundle {
    assets: WyvernAsset[];
    schemas: WyvernSchemaName[];
    name?: string;
    description?: string;
    external_link?: string;
}
export declare type WyvernAtomicMatchParameters = [string[], BigNumber[], Array<(number | BigNumber)>, string, string, string, string, string, string, Array<(number | BigNumber)>, string[]];
/**
 * The OpenSea account object appended to orders, providing extra metadata, profile images and usernames
 */
export interface OpenSeaAccount {
    address: string;
    config: string;
    profileImgUrl: string;
    user: OpenSeaUser | null;
}
export interface OpenSeaUser {
    username: string;
}
/**
 * Simple, unannotated asset spec
 */
export interface Asset {
    tokenId: string | null;
    tokenAddress: string;
    schemaName?: WyvernSchemaName;
    version?: TokenStandardVersion;
    name?: string;
    decimals?: number;
}
/**
 * Annotated asset contract with OpenSea metadata
 */
export interface OpenSeaAssetContract extends OpenSeaFees {
    name: string;
    address: string;
    type: AssetContractType;
    schemaName: WyvernSchemaName;
    sellerFeeBasisPoints: number;
    buyerFeeBasisPoints: number;
    description: string;
    tokenSymbol: string;
    imageUrl: string;
    stats?: object;
    traits?: object[];
    externalLink?: string;
    wikiLink?: string;
}
interface NumericalTraitStats {
    min: number;
    max: number;
}
interface StringTraitStats {
    [key: string]: number;
}
/**
 * Annotated collection with OpenSea metadata
 */
export interface OpenSeaCollection extends OpenSeaFees {
    name: string;
    slug: string;
    editors: string[];
    hidden: boolean;
    featured: boolean;
    createdDate: Date;
    description: string;
    imageUrl: string;
    largeImageUrl: string;
    featuredImageUrl: string;
    stats: object;
    displayData: object;
    paymentTokens: OpenSeaFungibleToken[];
    payoutAddress?: string;
    traitStats: OpenSeaTraitStats;
    externalLink?: string;
    wikiLink?: string;
}
export interface OpenSeaTraitStats {
    [traitName: string]: NumericalTraitStats | StringTraitStats;
}
/**
 * Annotated asset spec with OpenSea metadata
 */
export interface OpenSeaAsset extends Asset {
    assetContract: OpenSeaAssetContract;
    collection: OpenSeaCollection;
    name: string;
    description: string;
    owner: OpenSeaAccount;
    orders: Order[] | null;
    buyOrders: Order[] | null;
    sellOrders: Order[] | null;
    isPresale: boolean;
    imageUrl: string;
    imagePreviewUrl: string;
    imageUrlOriginal: string;
    imageUrlThumbnail: string;
    openseaLink: string;
    externalLink: string;
    traits: object[];
    numSales: number;
    lastSale: AssetEvent | null;
    backgroundColor: string | null;
    transferFee: BigNumber | string | null;
    transferFeePaymentToken: OpenSeaFungibleToken | null;
}
/**
 * Defines a AssetEvent type which contains details about an event that occurred
 */
export interface AssetEvent {
    eventType: AssetEventType;
    eventTimestamp: Date;
    auctionType: AuctionType;
    totalPrice: string;
    transaction: Transaction | null;
    paymentToken: OpenSeaFungibleToken | null;
}
/**
 * Defines set of possible auctions types
 */
export declare enum AuctionType {
    Dutch = "dutch",
    English = "english",
    MinPrice = "min_price"
}
/**
 * Defines the possible types of asset events that can take place
 */
export declare enum AssetEventType {
    AuctionCreated = "created",
    AuctionSuccessful = "successful",
    AuctionCancelled = "cancelled",
    OfferEntered = "offer_entered",
    BidEntered = "bid_entered",
    BidWithdraw = "bid_withdraw",
    AssetTransfer = "transfer",
    AssetApprove = "approve",
    CompositionCreated = "composition_created",
    Custom = "custom",
    Payout = "payout"
}
/**
 * Defines a Transaction type.
 */
export interface Transaction {
    fromAccount: OpenSeaAccount;
    toAccount: OpenSeaAccount;
    createdDate: Date;
    modifiedDate: Date;
    transactionHash: string;
    transactionIndex: string;
    blockNumber: string;
    blockHash: string;
    timestamp: Date;
}
/**
 * Full annotated Fungible Token spec with OpenSea metadata
 */
export interface OpenSeaFungibleToken extends Token {
    imageUrl?: string;
    ethPrice?: string;
    usdPrice?: string;
}
export declare type FungibleToken = OpenSeaFungibleToken;
/**
 * Bundles of assets, grouped together into one OpenSea order
 * URLs for bundles are auto-generated from the name
 */
export interface OpenSeaAssetBundle {
    maker: OpenSeaAccount;
    assets: OpenSeaAsset[];
    name: string;
    slug: string;
    permalink: string;
    sellOrders: Order[] | null;
    assetContract?: OpenSeaAssetContract;
    description?: string;
    externalLink?: string;
}
export interface OpenSeaAssetBundleJSON {
    assets: OpenSeaAsset[];
    name: string;
    description?: string;
    external_link?: string;
    maker?: OpenSeaAccount;
}
/**
 * Query interface for Bundles
 */
export interface OpenSeaAssetBundleQuery extends Partial<OpenSeaAssetBundleJSON> {
    asset_contract_address?: string;
    token_ids?: Array<number | string>;
    on_sale?: boolean;
    owner?: string;
    offset?: number;
    limit?: number;
    search?: string;
}
/**
 * The basis point values of each type of fee
 */
export interface OpenSeaFees {
    openseaSellerFeeBasisPoints: number;
    openseaBuyerFeeBasisPoints: number;
    devSellerFeeBasisPoints: number;
    devBuyerFeeBasisPoints: number;
}
/**
 * Fully computed fees including bounties and transfer fees
 */
export interface ComputedFees extends OpenSeaFees {
    totalBuyerFeeBasisPoints: number;
    totalSellerFeeBasisPoints: number;
    transferFee: BigNumber;
    transferFeeTokenAddress: string | null;
    sellerBountyBasisPoints: number;
}
export interface ExchangeMetadataForAsset {
    asset: WyvernAsset;
    schema: WyvernSchemaName;
    referrerAddress?: string;
}
export interface ExchangeMetadataForBundle {
    bundle: WyvernBundle;
    referrerAddress?: string;
}
export declare type ExchangeMetadata = ExchangeMetadataForAsset | ExchangeMetadataForBundle;
export interface UnhashedOrder extends WyvernOrder {
    feeMethod: FeeMethod;
    side: OrderSide;
    saleKind: SaleKind;
    howToCall: HowToCall;
    quantity: BigNumber;
    makerReferrerFee: BigNumber;
    waitingForBestCounterOrder: boolean;
    englishAuctionReservePrice?: BigNumber;
    metadata: ExchangeMetadata;
}
export interface UnsignedOrder extends UnhashedOrder {
    hash: string;
}
/**
 * Orders don't need to be signed if they're pre-approved
 * with a transaction on the contract to approveOrder_
 */
export interface Order extends UnsignedOrder, Partial<ECSignature> {
    createdTime?: BigNumber;
    currentPrice?: BigNumber;
    currentBounty?: BigNumber;
    makerAccount?: OpenSeaAccount;
    takerAccount?: OpenSeaAccount;
    paymentTokenContract?: OpenSeaFungibleToken;
    feeRecipientAccount?: OpenSeaAccount;
    cancelledOrFinalized?: boolean;
    markedInvalid?: boolean;
    asset?: OpenSeaAsset;
    assetBundle?: OpenSeaAssetBundle;
}
/**
 * Order attributes, including orderbook-specific query options
 * See https://docs.opensea.io/reference#retrieving-orders for the full
 * list of API query parameters and documentation.
 */
export interface OrderJSON extends Partial<ECSignature> {
    exchange: string;
    maker: string;
    taker: string;
    makerRelayerFee: string;
    takerRelayerFee: string;
    makerProtocolFee: string;
    takerProtocolFee: string;
    makerReferrerFee: string;
    feeRecipient: string;
    feeMethod: number;
    side: number;
    saleKind: number;
    target: string;
    howToCall: number;
    calldata: string;
    replacementPattern: string;
    staticTarget: string;
    staticExtradata: string;
    paymentToken: string;
    quantity: string;
    basePrice: string;
    englishAuctionReservePrice: string | undefined;
    extra: string;
    createdTime?: number | string;
    listingTime: number | string;
    expirationTime: number | string;
    salt: string;
    metadata: ExchangeMetadata;
    hash: string;
}
/**
 * Query interface for Orders
 * Includes `maker`, `taker` and `side` from above
 * See https://docs.opensea.io/reference#retrieving-orders for
 * full docs.
 */
export interface OrderQuery extends Partial<OrderJSON> {
    owner?: string;
    sale_kind?: SaleKind;
    asset_contract_address?: string;
    payment_token_address?: string;
    is_english?: boolean;
    is_expired?: boolean;
    bundled?: boolean;
    include_invalid?: boolean;
    token_id?: number | string;
    token_ids?: Array<number | string>;
    listed_after?: number | string;
    listed_before?: number | string;
    limit?: number;
    offset?: number;
}
/**
 * Query interface for Assets
 */
export interface OpenSeaAssetQuery {
    owner?: string;
    asset_contract_address?: string;
    token_ids?: Array<number | string>;
    search?: string;
    order_by?: string;
    order_direction?: string;
    limit?: number;
    offset?: number;
}
/**
 * Query interface for Fungible Assets
 */
export interface OpenSeaFungibleTokenQuery extends Partial<OpenSeaFungibleToken> {
    limit?: number;
    offset?: number;
    symbol?: string;
}
export declare type FungibleTokenQuery = OpenSeaFungibleTokenQuery;
export interface OrderbookResponse {
    orders: OrderJSON[];
    count: number;
}
export declare type Web3Callback<T> = (err: Error | null, result: T) => void;
export declare type Web3RPCCallback = Web3Callback<Web3.JSONRPCResponsePayload>;
export declare type TxnCallback = (result: boolean) => void;
/**
 * To simplify typifying ABIs
 */
export interface PartialAbiDefinition {
    type: Web3.AbiType | string;
    name?: string;
    inputs?: object[];
    outputs?: object[];
    payable?: boolean;
    constant?: boolean;
    anonymous?: boolean;
    stateMutability?: Web3.ConstructorStateMutability | string;
}
export declare type PartialReadonlyContractAbi = Array<Readonly<PartialAbiDefinition>>;

'''
'''--- lib/types.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetEventType = exports.AuctionType = exports.WyvernAssetLocation = exports.TokenStandardVersion = exports.WyvernSchemaName = exports.AssetContractType = exports.SaleKind = exports.FeeMethod = exports.OrderSide = exports.EventType = exports.HowToCall = exports.Network = void 0;
var types_1 = require("wyvern-js/lib/types");
Object.defineProperty(exports, "Network", { enumerable: true, get: function () { return types_1.Network; } });
Object.defineProperty(exports, "HowToCall", { enumerable: true, get: function () { return types_1.HowToCall; } });
/**
 * Events emitted by the SDK. There are five types:
 * 1. Transaction events, which tell you when a new transaction was
 *    created, confirmed, denied, or failed.
 * 2. pre-transaction events, which are named (like "WrapEth") and indicate
 *    that Web3 is asking for a signature on a transaction that needs to occur before
 *    an order is made or fulfilled. This includes approval events and account
 *    initialization.
 * 3. Basic actions: matching, cancelling, and creating orders.
 *    The "CreateOrder" event fires when a signature is being prompted
 *    to create an off-chain order. The "OrderDenied" event fires when a signature
 *    request is denied by the user.
 * 4. The "TransferAll" event, which fires when a user is about to directly
 *    transfer one or more assets to another account
 */
var EventType;
(function (EventType) {
    // Transactions and signature requests
    EventType["TransactionCreated"] = "TransactionCreated";
    EventType["TransactionConfirmed"] = "TransactionConfirmed";
    EventType["TransactionDenied"] = "TransactionDenied";
    EventType["TransactionFailed"] = "TransactionFailed";
    // Pre-transaction events
    EventType["InitializeAccount"] = "InitializeAccount";
    EventType["WrapEth"] = "WrapEth";
    EventType["UnwrapWeth"] = "UnwrapWeth";
    EventType["ApproveCurrency"] = "ApproveCurrency";
    EventType["ApproveAsset"] = "ApproveAsset";
    EventType["ApproveAllAssets"] = "ApproveAllAssets";
    EventType["UnapproveCurrency"] = "UnapproveCurrency";
    // Basic actions: matching orders, creating orders, and cancelling orders
    EventType["MatchOrders"] = "MatchOrders";
    EventType["CancelOrder"] = "CancelOrder";
    EventType["ApproveOrder"] = "ApproveOrder";
    EventType["CreateOrder"] = "CreateOrder";
    // When the signature request for an order is denied
    EventType["OrderDenied"] = "OrderDenied";
    // When transferring one or more assets
    EventType["TransferAll"] = "TransferAll";
    EventType["TransferOne"] = "TransferOne";
    // When wrapping or unwrapping NFTs
    EventType["WrapAssets"] = "WrapAssets";
    EventType["UnwrapAssets"] = "UnwrapAssets";
    EventType["LiquidateAssets"] = "LiquidateAssets";
    EventType["PurchaseAssets"] = "PurchaseAssets";
})(EventType = exports.EventType || (exports.EventType = {}));
/**
 * Wyvern order side: buy or sell.
 */
var OrderSide;
(function (OrderSide) {
    OrderSide[OrderSide["Buy"] = 0] = "Buy";
    OrderSide[OrderSide["Sell"] = 1] = "Sell";
})(OrderSide = exports.OrderSide || (exports.OrderSide = {}));
/**
 * Wyvern fee method
 * ProtocolFee: Charge maker fee to seller and charge taker fee to buyer.
 * SplitFee: Maker fees are deducted from the token amount that the maker receives. Taker fees are extra tokens that must be paid by the taker.
 */
var FeeMethod;
(function (FeeMethod) {
    FeeMethod[FeeMethod["ProtocolFee"] = 0] = "ProtocolFee";
    FeeMethod[FeeMethod["SplitFee"] = 1] = "SplitFee";
})(FeeMethod = exports.FeeMethod || (exports.FeeMethod = {}));
/**
 * Wyvern: type of sale. Fixed or Dutch auction
 * Note: not imported from wyvern.js because it uses
 * EnglishAuction as 1 and DutchAuction as 2
 */
var SaleKind;
(function (SaleKind) {
    SaleKind[SaleKind["FixedPrice"] = 0] = "FixedPrice";
    SaleKind[SaleKind["DutchAuction"] = 1] = "DutchAuction";
})(SaleKind = exports.SaleKind || (exports.SaleKind = {}));
/**
 * Types of asset contracts
 * Given by the asset_contract_type in the OpenSea API
 */
var AssetContractType;
(function (AssetContractType) {
    AssetContractType["Fungible"] = "fungible";
    AssetContractType["SemiFungible"] = "semi-fungible";
    AssetContractType["NonFungible"] = "non-fungible";
    AssetContractType["Unknown"] = "unknown";
})(AssetContractType = exports.AssetContractType || (exports.AssetContractType = {}));
// Wyvern Schemas (see https://github.com/ProjectOpenSea/wyvern-schemas)
var WyvernSchemaName;
(function (WyvernSchemaName) {
    WyvernSchemaName["ERC20"] = "ERC20";
    WyvernSchemaName["ERC721"] = "ERC721";
    WyvernSchemaName["ERC1155"] = "ERC1155";
    WyvernSchemaName["LegacyEnjin"] = "Enjin";
    WyvernSchemaName["ENSShortNameAuction"] = "ENSShortNameAuction";
    // CryptoPunks = 'CryptoPunks'
})(WyvernSchemaName = exports.WyvernSchemaName || (exports.WyvernSchemaName = {}));
/**
 * The NFT version that this contract uses.
 * ERC721 versions are:
 * 1.0: CryptoKitties and early 721s, which lack approve-all and
 *      have problems calling `transferFrom` from the owner's account.
 * 2.0: CryptoSaga and others that lack `transferFrom` and have
 *      `takeOwnership` instead
 * 3.0: The current OpenZeppelin standard:
 *      https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC721/ERC721.sol
 * Special cases:
 * locked: When the transfer function has been locked by the dev
 */
var TokenStandardVersion;
(function (TokenStandardVersion) {
    TokenStandardVersion["Unsupported"] = "unsupported";
    TokenStandardVersion["Locked"] = "locked";
    TokenStandardVersion["Enjin"] = "1155-1.0";
    TokenStandardVersion["ERC721v1"] = "1.0";
    TokenStandardVersion["ERC721v2"] = "2.0";
    TokenStandardVersion["ERC721v3"] = "3.0";
})(TokenStandardVersion = exports.TokenStandardVersion || (exports.TokenStandardVersion = {}));
var WyvernAssetLocation;
(function (WyvernAssetLocation) {
    WyvernAssetLocation["Account"] = "account";
    WyvernAssetLocation["Proxy"] = "proxy";
    WyvernAssetLocation["Other"] = "other";
})(WyvernAssetLocation = exports.WyvernAssetLocation || (exports.WyvernAssetLocation = {}));
/**
 * Defines set of possible auctions types
 */
var AuctionType;
(function (AuctionType) {
    AuctionType["Dutch"] = "dutch";
    AuctionType["English"] = "english";
    AuctionType["MinPrice"] = "min_price";
})(AuctionType = exports.AuctionType || (exports.AuctionType = {}));
/**
 * Defines the possible types of asset events that can take place
 */
var AssetEventType;
(function (AssetEventType) {
    AssetEventType["AuctionCreated"] = "created";
    AssetEventType["AuctionSuccessful"] = "successful";
    AssetEventType["AuctionCancelled"] = "cancelled";
    AssetEventType["OfferEntered"] = "offer_entered";
    AssetEventType["BidEntered"] = "bid_entered";
    AssetEventType["BidWithdraw"] = "bid_withdraw";
    AssetEventType["AssetTransfer"] = "transfer";
    AssetEventType["AssetApprove"] = "approve";
    AssetEventType["CompositionCreated"] = "composition_created";
    AssetEventType["Custom"] = "custom";
    AssetEventType["Payout"] = "payout";
})(AssetEventType = exports.AssetEventType || (exports.AssetEventType = {}));
//# sourceMappingURL=types.js.map
'''
'''--- lib/utils.d.ts ---
import BigNumber from 'bignumber.js';
import * as Web3 from 'web3';
import { AnnotatedFunctionABI, Schema } from 'wyvern-schemas/dist/types';
import { WyvernAtomicizerContract } from 'wyvern-js/lib/abi_gen/wyvern_atomicizer';
import { HowToCall } from 'wyvern-js/lib/types';
import { Asset, AssetEvent, ECSignature, OpenSeaAccount, OpenSeaAsset, OpenSeaAssetBundle, OpenSeaAssetContract, OpenSeaCollection, OpenSeaFungibleToken, OpenSeaUser, Order, OrderJSON, Transaction, UnhashedOrder, UnsignedOrder, Web3Callback, WyvernAsset, WyvernBundle, WyvernFTAsset, WyvernNFTAsset } from './types';
export declare const annotateERC721TransferABI: (asset: WyvernNFTAsset) => AnnotatedFunctionABI;
export declare const annotateERC20TransferABI: (asset: WyvernFTAsset) => AnnotatedFunctionABI;
/**
 * Promisify a call a method on a contract,
 * handling Parity errors. Returns '0x' if error.
 * Note that if T is not "string", this may return a falsey
 * value when the contract doesn't support the method (e.g. `isApprovedForAll`).
 * @param callback An anonymous function that takes a web3 callback
 * and returns a Web3 Contract's call result, e.g. `c => erc721.ownerOf(3, c)`
 * @param onError callback when user denies transaction
 */
export declare function promisifyCall<T>(callback: (fn: Web3Callback<T>) => void, onError?: (error: Error) => void): Promise<T | undefined>;
export declare const confirmTransaction: (web3: Web3, txHash: string) => Promise<{}>;
export declare const assetFromJSON: (asset: any) => OpenSeaAsset;
export declare const assetEventFromJSON: (assetEvent: any) => AssetEvent;
export declare const transactionFromJSON: (transaction: any) => Transaction;
export declare const accountFromJSON: (account: any) => OpenSeaAccount;
export declare const userFromJSON: (user: any) => OpenSeaUser;
export declare const assetBundleFromJSON: (asset_bundle: any) => OpenSeaAssetBundle;
export declare const assetContractFromJSON: (asset_contract: any) => OpenSeaAssetContract;
export declare const collectionFromJSON: (collection: any) => OpenSeaCollection;
export declare const tokenFromJSON: (token: any) => OpenSeaFungibleToken;
export declare const orderFromJSON: (order: any) => Order;
/**
 * Convert an order to JSON, hashing it as well if necessary
 * @param order order (hashed or unhashed)
 */
export declare const orderToJSON: (order: Order) => OrderJSON;
/**
 * Sign messages using web3 personal signatures
 * @param web3 Web3 instance
 * @param message message to sign
 * @param signerAddress web3 address signing the message
 * @returns A signature if provider can sign, otherwise null
 */
export declare function personalSignAsync(web3: Web3, message: string, signerAddress: string): Promise<ECSignature | null>;
/**
 * Special fixes for making BigNumbers using web3 results
 * @param arg An arg or the result of a web3 call to turn into a BigNumber
 */
export declare function makeBigNumber(arg: number | string | BigNumber): BigNumber;
/**
 * Send a transaction to the blockchain and optionally confirm it
 * @param web3 Web3 instance
 * @param param0 __namedParameters
 * @param from address sending transaction
 * @param to destination contract address
 * @param data data to send to contract
 * @param gasPrice gas price to use. If unspecified, uses web3 default (mean gas price)
 * @param value value in ETH to send with data. Defaults to 0
 * @param onError callback when user denies transaction
 */
export declare function sendRawTransaction(web3: Web3, { from, to, data, gasPrice, value, gas }: Web3.TxData, onError: (error: Error) => void): Promise<string>;
/**
 * Call a method on a contract, sending arbitrary data and
 * handling Parity errors. Returns '0x' if error.
 * @param web3 Web3 instance
 * @param param0 __namedParameters
 * @param from address sending call
 * @param to destination contract address
 * @param data data to send to contract
 * @param onError callback when user denies transaction
 */
export declare function rawCall(web3: Web3, { from, to, data }: Web3.CallData, onError?: (error: Error) => void): Promise<string>;
/**
 * Estimate Gas usage for a transaction
 * @param web3 Web3 instance
 * @param from address sending transaction
 * @param to destination contract address
 * @param data data to send to contract
 * @param value value in ETH to send with data
 */
export declare function estimateGas(web3: Web3, { from, to, data, value }: Web3.TxData): Promise<number>;
/**
 * Get mean gas price for sending a txn, in wei
 * @param web3 Web3 instance
 */
export declare function getCurrentGasPrice(web3: Web3): Promise<BigNumber>;
/**
 * Get current transfer fees for an asset
 * @param web3 Web3 instance
 * @param asset The asset to check for transfer fees
 */
export declare function getTransferFeeSettings(web3: Web3, { asset, accountAddress }: {
    asset: Asset;
    accountAddress?: string;
}): Promise<{
    transferFee: BigNumber | undefined;
    transferFeeTokenAddress: string | undefined;
}>;
/**
 * Estimates the price of an order
 * @param order The order to estimate price on
 * @param secondsToBacktrack The number of seconds to subtract on current time,
 *  to fix race conditions
 * @param shouldRoundUp Whether to round up fractional wei
 */
export declare function estimateCurrentPrice(order: Order, secondsToBacktrack?: number, shouldRoundUp?: boolean): BigNumber;
/**
 * Wrapper function for getting generic Wyvern assets from OpenSea assets
 * @param schema Wyvern schema for the asset
 * @param asset The fungible or nonfungible asset to format
 */
export declare function getWyvernAsset(schema: Schema<WyvernAsset>, asset: Asset, quantity?: BigNumber): WyvernAsset;
/**
 * Get the Wyvern representation of an NFT asset
 * @param schema The WyvernSchema needed to access this asset
 * @param asset The asset
 */
export declare function getWyvernNFTAsset(schema: Schema<WyvernNFTAsset>, asset: Asset): WyvernNFTAsset;
/**
 * Get the Wyvern representation of a fungible asset
 * @param schema The WyvernSchema needed to access this asset
 * @param asset The asset to trade
 * @param quantity The number of items to trade
 */
export declare function getWyvernFTAsset(schema: Schema<WyvernFTAsset>, asset: Asset, quantity: BigNumber): WyvernFTAsset;
/**
 * Get the Wyvern representation of a group of NFT assets
 * Sort order is enforced here. Throws if there's a duplicate.
 * @param schema The WyvernSchema needed to access these assets
 * @param assets Assets to bundle
 */
export declare function getWyvernBundle(schema: any, assets: Asset[]): WyvernBundle;
/**
 * Get the non-prefixed hash for the order
 * (Fixes a Wyvern typescript issue and casing issue)
 * @param order order to hash
 */
export declare function getOrderHash(order: UnhashedOrder): string;
/**
 * Assign an order and a new matching order to their buy/sell sides
 * @param order Original order
 * @param matchingOrder The result of _makeMatchingOrder
 */
export declare function assignOrdersToSides(order: Order, matchingOrder: UnsignedOrder): {
    buy: Order;
    sell: Order;
};
/**
 * Delay using setTimeout
 * @param ms milliseconds to wait
 */
export declare function delay(ms: number): Promise<{}>;
/**
 * Encode the atomicized transfer of many assets
 * @param schema Wyvern Schema for the assets
 * @param assets List of assets to transfer
 * @param from Current address owning the assets
 * @param to Destination address
 * @param atomicizer Wyvern Atomicizer instance
 */
export declare function encodeAtomicizedTransfer(schema: Schema<any>, assets: WyvernAsset[], from: string, to: string, atomicizer: WyvernAtomicizerContract): {
    calldata: string;
};
/**
 * Encode a transfer call for a Wyvern schema function
 * @param transferAbi Annotated Wyvern ABI
 * @param from From address
 * @param to To address
 */
export declare function encodeTransferCall(transferAbi: AnnotatedFunctionABI, from: string, to: string): string;
/**
 * Encode a call to a user's proxy contract
 * @param address The address for the proxy to call
 * @param howToCall How to call the addres
 * @param calldata The data to use in the call
 * @param shouldAssert Whether to assert success in the proxy call
 */
export declare function encodeProxyCall(address: string, howToCall: HowToCall, calldata: string, shouldAssert?: boolean): string;
/**
 * Validates that an address exists, isn't null, and is properly
 * formatted for Wyvern and OpenSea
 * @param address input address
 */
export declare function validateAndFormatWalletAddress(web3: Web3, address: string): string;
/**
 * Notify developer when a pattern will be deprecated
 * @param msg message to log to console
 */
export declare function onDeprecated(msg: string): void;
/**
 * Get special-case approval addresses for an erc721 contract
 * @param erc721Contract contract to check
 */
export declare function getNonCompliantApprovalAddress(erc721Contract: Web3.ContractInstance, tokenId: string, accountAddress: string): Promise<string | undefined>;

'''
'''--- lib/utils.js ---
"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var _this = this;
var bignumber_js_1 = require("bignumber.js");
var wyvern_js_1 = require("wyvern-js");
var ethUtil = require("ethereumjs-util");
var _ = require("lodash");
var Web3 = require("web3");
var WyvernSchemas = require("wyvern-schemas");
var types_1 = require("wyvern-schemas/dist/types");
var contracts_1 = require("./contracts");
var types_2 = require("./types");
var constants_1 = require("./constants");
var proxyABI = { 'constant': false, 'inputs': [{ 'name': 'dest', 'type': 'address' }, { 'name': 'howToCall', 'type': 'uint8' }, { 'name': 'calldata', 'type': 'bytes' }], 'name': 'proxy', 'outputs': [{ 'name': 'success', 'type': 'bool' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' };
var proxyAssertABI = { 'constant': false, 'inputs': [{ 'name': 'dest', 'type': 'address' }, { 'name': 'howToCall', 'type': 'uint8' }, { 'name': 'calldata', 'type': 'bytes' }], 'name': 'proxyAssert', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' };
exports.annotateERC721TransferABI = function (asset) { return ({
    "constant": false,
    "inputs": [
        {
            "name": "_to",
            "type": "address",
            "kind": types_1.FunctionInputKind.Replaceable
        },
        {
            "name": "_tokenId",
            "type": "uint256",
            "kind": types_1.FunctionInputKind.Asset,
            "value": asset.id
        }
    ],
    "target": asset.address,
    "name": "transfer",
    "outputs": [],
    "payable": false,
    "stateMutability": types_1.StateMutability.Nonpayable,
    "type": Web3.AbiType.Function
}); };
exports.annotateERC20TransferABI = function (asset) { return ({
    "constant": false,
    "inputs": [
        {
            "name": "_to",
            "type": "address",
            "kind": types_1.FunctionInputKind.Replaceable
        },
        {
            "name": "_amount",
            "type": "uint256",
            "kind": types_1.FunctionInputKind.Count,
            "value": asset.quantity
        }
    ],
    "target": asset.address,
    "name": "transfer",
    "outputs": [
        {
            "name": "success",
            "type": "bool",
            "kind": types_1.FunctionOutputKind.Other
        }
    ],
    "payable": false,
    "stateMutability": types_1.StateMutability.Nonpayable,
    "type": Web3.AbiType.Function
}); };
var SCHEMA_NAME_TO_ASSET_CONTRACT_TYPE = (_a = {},
    _a[types_2.WyvernSchemaName.ERC721] = types_2.AssetContractType.NonFungible,
    _a[types_2.WyvernSchemaName.ERC1155] = types_2.AssetContractType.SemiFungible,
    _a[types_2.WyvernSchemaName.ERC20] = types_2.AssetContractType.Fungible,
    _a[types_2.WyvernSchemaName.LegacyEnjin] = types_2.AssetContractType.SemiFungible,
    _a[types_2.WyvernSchemaName.ENSShortNameAuction] = types_2.AssetContractType.NonFungible,
    _a);
// OTHER
var txCallbacks = {};
/**
 * Promisify a callback-syntax web3 function
 * @param inner callback function that accepts a Web3 callback function and passes
 * it to the Web3 function
 */
function promisify(inner) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    return inner(function (err, res) {
                        if (err) {
                            reject(err);
                        }
                        resolve(res);
                    });
                })];
        });
    });
}
/**
 * Promisify a call a method on a contract,
 * handling Parity errors. Returns '0x' if error.
 * Note that if T is not "string", this may return a falsey
 * value when the contract doesn't support the method (e.g. `isApprovedForAll`).
 * @param callback An anonymous function that takes a web3 callback
 * and returns a Web3 Contract's call result, e.g. `c => erc721.ownerOf(3, c)`
 * @param onError callback when user denies transaction
 */
function promisifyCall(callback, onError) {
    return __awaiter(this, void 0, void 0, function () {
        var result, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, promisify(callback)];
                case 1:
                    result = _a.sent();
                    if (result == '0x') {
                        // Geth compatibility
                        return [2 /*return*/, undefined];
                    }
                    return [2 /*return*/, result];
                case 2:
                    error_1 = _a.sent();
                    // Probably method not found, and web3 is a Parity node
                    if (onError) {
                        onError(error_1);
                    }
                    else {
                        console.error(error_1);
                    }
                    return [2 /*return*/, undefined];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.promisifyCall = promisifyCall;
var track = function (web3, txHash, onFinalized) {
    if (txCallbacks[txHash]) {
        txCallbacks[txHash].push(onFinalized);
    }
    else {
        txCallbacks[txHash] = [onFinalized];
        var poll_1 = function () { return __awaiter(_this, void 0, void 0, function () {
            var tx, receipt, status_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, promisify(function (c) { return web3.eth.getTransaction(txHash, c); })];
                    case 1:
                        tx = _a.sent();
                        if (!(tx && tx.blockHash && tx.blockHash !== constants_1.NULL_BLOCK_HASH)) return [3 /*break*/, 3];
                        return [4 /*yield*/, promisify(function (c) { return web3.eth.getTransactionReceipt(txHash, c); })];
                    case 2:
                        receipt = _a.sent();
                        if (!receipt) {
                            // Hack: assume success if no receipt
                            console.warn('No receipt found for ', txHash);
                        }
                        status_1 = receipt
                            ? parseInt((receipt.status || "0").toString()) == 1
                            : true;
                        txCallbacks[txHash].map(function (f) { return f(status_1); });
                        delete txCallbacks[txHash];
                        return [3 /*break*/, 4];
                    case 3:
                        setTimeout(poll_1, 1000);
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        poll_1().catch();
    }
};
exports.confirmTransaction = function (web3, txHash) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve, reject) {
                track(web3, txHash, function (didSucceed) {
                    if (didSucceed) {
                        resolve("Transaction complete!");
                    }
                    else {
                        reject(new Error("Transaction failed :( You might have already completed this action. See more on the mainnet at etherscan.io/tx/" + txHash));
                    }
                });
            })];
    });
}); };
exports.assetFromJSON = function (asset) {
    var isAnimated = asset.image_url && asset.image_url.endsWith('.gif');
    var isSvg = asset.image_url && asset.image_url.endsWith('.svg');
    var fromJSON = {
        tokenId: asset.token_id.toString(),
        tokenAddress: asset.asset_contract.address,
        name: asset.name,
        description: asset.description,
        owner: asset.owner,
        assetContract: exports.assetContractFromJSON(asset.asset_contract),
        collection: exports.collectionFromJSON(asset.collection),
        orders: asset.orders ? asset.orders.map(exports.orderFromJSON) : null,
        sellOrders: asset.sell_orders ? asset.sell_orders.map(exports.orderFromJSON) : null,
        buyOrders: asset.buy_orders ? asset.buy_orders.map(exports.orderFromJSON) : null,
        isPresale: asset.is_presale,
        // Don't use previews if it's a special image
        imageUrl: isAnimated || isSvg
            ? asset.image_url
            : (asset.image_preview_url || asset.image_url),
        imagePreviewUrl: asset.image_preview_url,
        imageUrlOriginal: asset.image_original_url,
        imageUrlThumbnail: asset.image_thumbnail_url,
        externalLink: asset.external_link,
        openseaLink: asset.permalink,
        traits: asset.traits,
        numSales: asset.num_sales,
        lastSale: asset.last_sale ? exports.assetEventFromJSON(asset.last_sale) : null,
        backgroundColor: asset.background_color ? "#" + asset.background_color : null,
        transferFee: asset.transfer_fee
            ? makeBigNumber(asset.transfer_fee)
            : null,
        transferFeePaymentToken: asset.transfer_fee_payment_token
            ? exports.tokenFromJSON(asset.transfer_fee_payment_token)
            : null,
    };
    // If orders were included, put them in sell/buy order groups
    if (fromJSON.orders && !fromJSON.sellOrders) {
        fromJSON.sellOrders = fromJSON.orders.filter(function (o) { return o.side == types_2.OrderSide.Sell; });
    }
    if (fromJSON.orders && !fromJSON.buyOrders) {
        fromJSON.buyOrders = fromJSON.orders.filter(function (o) { return o.side == types_2.OrderSide.Buy; });
    }
    return fromJSON;
};
exports.assetEventFromJSON = function (assetEvent) {
    return {
        eventType: assetEvent.event_type,
        eventTimestamp: assetEvent.event_timestamp,
        auctionType: assetEvent.auction_type,
        totalPrice: assetEvent.total_price,
        transaction: assetEvent.transaction ? exports.transactionFromJSON(assetEvent.transaction) : null,
        paymentToken: assetEvent.payment_token ? exports.tokenFromJSON(assetEvent.payment_token) : null,
    };
};
exports.transactionFromJSON = function (transaction) {
    return {
        fromAccount: exports.accountFromJSON(transaction.from_account),
        toAccount: exports.accountFromJSON(transaction.to_account),
        createdDate: new Date(transaction.created_date + "Z"),
        modifiedDate: new Date(transaction.modified_date + "Z"),
        transactionHash: transaction.transaction_hash,
        transactionIndex: transaction.transaction_index,
        blockNumber: transaction.block_number,
        blockHash: transaction.block_hash,
        timestamp: new Date(transaction.timestamp + "Z"),
    };
};
exports.accountFromJSON = function (account) {
    return {
        address: account.address,
        config: account.config,
        profileImgUrl: account.profile_img_url,
        user: account.user ? exports.userFromJSON(account.user) : null
    };
};
exports.userFromJSON = function (user) {
    return {
        username: user.username
    };
};
exports.assetBundleFromJSON = function (asset_bundle) {
    var fromJSON = {
        maker: asset_bundle.maker,
        assets: asset_bundle.assets.map(exports.assetFromJSON),
        assetContract: asset_bundle.asset_contract
            ? exports.assetContractFromJSON(asset_bundle.asset_contract)
            : undefined,
        name: asset_bundle.name,
        slug: asset_bundle.slug,
        description: asset_bundle.description,
        externalLink: asset_bundle.external_link,
        permalink: asset_bundle.permalink,
        sellOrders: asset_bundle.sell_orders ? asset_bundle.sell_orders.map(exports.orderFromJSON) : null
    };
    return fromJSON;
};
exports.assetContractFromJSON = function (asset_contract) {
    return {
        name: asset_contract.name,
        description: asset_contract.description,
        type: asset_contract.asset_contract_type,
        schemaName: asset_contract.schema_name,
        address: asset_contract.address,
        tokenSymbol: asset_contract.symbol,
        buyerFeeBasisPoints: asset_contract.buyer_fee_basis_points,
        sellerFeeBasisPoints: asset_contract.seller_fee_basis_points,
        openseaBuyerFeeBasisPoints: asset_contract.opensea_buyer_fee_basis_points,
        openseaSellerFeeBasisPoints: asset_contract.opensea_seller_fee_basis_points,
        devBuyerFeeBasisPoints: asset_contract.dev_buyer_fee_basis_points,
        devSellerFeeBasisPoints: asset_contract.dev_seller_fee_basis_points,
        imageUrl: asset_contract.image_url,
        externalLink: asset_contract.external_link,
        wikiLink: asset_contract.wiki_link,
    };
};
exports.collectionFromJSON = function (collection) {
    var createdDate = new Date(collection.created_date + "Z");
    return {
        createdDate: createdDate,
        name: collection.name,
        description: collection.description,
        slug: collection.slug,
        editors: collection.editors,
        hidden: collection.hidden,
        featured: collection.featured,
        featuredImageUrl: collection.featured_image_url,
        displayData: collection.display_data,
        paymentTokens: (collection.payment_tokens || []).map(exports.tokenFromJSON),
        openseaBuyerFeeBasisPoints: collection.opensea_buyer_fee_basis_points,
        openseaSellerFeeBasisPoints: collection.opensea_seller_fee_basis_points,
        devBuyerFeeBasisPoints: collection.dev_buyer_fee_basis_points,
        devSellerFeeBasisPoints: collection.dev_seller_fee_basis_points,
        payoutAddress: collection.payout_address,
        imageUrl: collection.image_url,
        largeImageUrl: collection.large_image_url,
        stats: collection.stats,
        traitStats: collection.traits,
        externalLink: collection.external_url,
        wikiLink: collection.wiki_url,
    };
};
exports.tokenFromJSON = function (token) {
    var fromJSON = {
        name: token.name,
        symbol: token.symbol,
        decimals: token.decimals,
        address: token.address,
        imageUrl: token.image_url,
        ethPrice: token.eth_price,
        usdPrice: token.usd_price,
    };
    return fromJSON;
};
exports.orderFromJSON = function (order) {
    var createdDate = new Date(order.created_date + "Z");
    var fromJSON = {
        hash: order.order_hash || order.hash,
        cancelledOrFinalized: order.cancelled || order.finalized,
        markedInvalid: order.marked_invalid,
        metadata: order.metadata,
        quantity: new bignumber_js_1.default(order.quantity || 1),
        exchange: order.exchange,
        makerAccount: order.maker,
        takerAccount: order.maker,
        // Use string address to conform to Wyvern Order schema
        maker: order.maker.address,
        taker: order.taker.address,
        makerRelayerFee: new bignumber_js_1.default(order.maker_relayer_fee),
        takerRelayerFee: new bignumber_js_1.default(order.taker_relayer_fee),
        makerProtocolFee: new bignumber_js_1.default(order.maker_protocol_fee),
        takerProtocolFee: new bignumber_js_1.default(order.taker_protocol_fee),
        makerReferrerFee: new bignumber_js_1.default(order.maker_referrer_fee || 0),
        waitingForBestCounterOrder: order.fee_recipient.address == constants_1.NULL_ADDRESS,
        feeMethod: order.fee_method,
        feeRecipientAccount: order.fee_recipient,
        feeRecipient: order.fee_recipient.address,
        side: order.side,
        saleKind: order.sale_kind,
        target: order.target,
        howToCall: order.how_to_call,
        calldata: order.calldata,
        replacementPattern: order.replacement_pattern,
        staticTarget: order.static_target,
        staticExtradata: order.static_extradata,
        paymentToken: order.payment_token,
        basePrice: new bignumber_js_1.default(order.base_price),
        extra: new bignumber_js_1.default(order.extra),
        currentBounty: new bignumber_js_1.default(order.current_bounty || 0),
        currentPrice: new bignumber_js_1.default(order.current_price || 0),
        createdTime: new bignumber_js_1.default(Math.round(createdDate.getTime() / 1000)),
        listingTime: new bignumber_js_1.default(order.listing_time),
        expirationTime: new bignumber_js_1.default(order.expiration_time),
        salt: new bignumber_js_1.default(order.salt),
        v: parseInt(order.v),
        r: order.r,
        s: order.s,
        paymentTokenContract: order.payment_token_contract ? exports.tokenFromJSON(order.payment_token_contract) : undefined,
        asset: order.asset ? exports.assetFromJSON(order.asset) : undefined,
        assetBundle: order.asset_bundle ? exports.assetBundleFromJSON(order.asset_bundle) : undefined,
    };
    // Use client-side price calc, to account for buyer fee (not added by server) and latency
    fromJSON.currentPrice = estimateCurrentPrice(fromJSON);
    return fromJSON;
};
/**
 * Convert an order to JSON, hashing it as well if necessary
 * @param order order (hashed or unhashed)
 */
exports.orderToJSON = function (order) {
    var asJSON = {
        exchange: order.exchange.toLowerCase(),
        maker: order.maker.toLowerCase(),
        taker: order.taker.toLowerCase(),
        makerRelayerFee: order.makerRelayerFee.toString(),
        takerRelayerFee: order.takerRelayerFee.toString(),
        makerProtocolFee: order.makerProtocolFee.toString(),
        takerProtocolFee: order.takerProtocolFee.toString(),
        makerReferrerFee: order.makerReferrerFee.toString(),
        feeMethod: order.feeMethod,
        feeRecipient: order.feeRecipient.toLowerCase(),
        side: order.side,
        saleKind: order.saleKind,
        target: order.target.toLowerCase(),
        howToCall: order.howToCall,
        calldata: order.calldata,
        replacementPattern: order.replacementPattern,
        staticTarget: order.staticTarget.toLowerCase(),
        staticExtradata: order.staticExtradata,
        paymentToken: order.paymentToken.toLowerCase(),
        quantity: order.quantity.toString(),
        basePrice: order.basePrice.toString(),
        extra: order.extra.toString(),
        createdTime: order.createdTime
            ? order.createdTime.toString()
            : undefined,
        listingTime: order.listingTime.toString(),
        expirationTime: order.expirationTime.toString(),
        salt: order.salt.toString(),
        metadata: order.metadata,
        v: order.v,
        r: order.r,
        s: order.s,
        hash: order.hash
    };
    return asJSON;
};
/**
 * Sign messages using web3 personal signatures
 * @param web3 Web3 instance
 * @param message message to sign
 * @param signerAddress web3 address signing the message
 * @returns A signature if provider can sign, otherwise null
 */
function personalSignAsync(web3, message, signerAddress) {
    return __awaiter(this, void 0, void 0, function () {
        var signature, error;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (web3.currentProvider.isDapper) {
                        // Optimize Dapper - don't try signature
                        return [2 /*return*/, null];
                    }
                    return [4 /*yield*/, promisify(function (c) { return web3.currentProvider.sendAsync({
                            method: 'personal_sign',
                            params: [message, signerAddress],
                            from: signerAddress,
                            id: new Date().getTime()
                        }, c); })];
                case 1:
                    signature = _a.sent();
                    error = signature.error;
                    if (error) {
                        return [2 /*return*/, null];
                    }
                    try {
                        return [2 /*return*/, parseSignatureHex(signature.result)];
                    }
                    catch (error) {
                        // Dapper wallet signature isn't parseable
                        return [2 /*return*/, null];
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.personalSignAsync = personalSignAsync;
/**
 * Special fixes for making BigNumbers using web3 results
 * @param arg An arg or the result of a web3 call to turn into a BigNumber
 */
function makeBigNumber(arg) {
    // Zero sometimes returned as 0x from contracts
    if (arg === '0x') {
        arg = 0;
    }
    // fix "new BigNumber() number type has more than 15 significant digits"
    arg = arg.toString();
    return new bignumber_js_1.default(arg);
}
exports.makeBigNumber = makeBigNumber;
/**
 * Send a transaction to the blockchain and optionally confirm it
 * @param web3 Web3 instance
 * @param param0 __namedParameters
 * @param from address sending transaction
 * @param to destination contract address
 * @param data data to send to contract
 * @param gasPrice gas price to use. If unspecified, uses web3 default (mean gas price)
 * @param value value in ETH to send with data. Defaults to 0
 * @param onError callback when user denies transaction
 */
function sendRawTransaction(web3, _a, onError) {
    var from = _a.from, to = _a.to, data = _a.data, gasPrice = _a.gasPrice, _b = _a.value, value = _b === void 0 ? 0 : _b, gas = _a.gas;
    return __awaiter(this, void 0, void 0, function () {
        var txHashRes, error_2;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!(gas == null)) return [3 /*break*/, 2];
                    return [4 /*yield*/, estimateGas(web3, { from: from, to: to, data: data, value: value })];
                case 1:
                    // This gas cannot be increased due to an ethjs error
                    gas = _c.sent();
                    _c.label = 2;
                case 2:
                    _c.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, promisify(function (c) { return web3.eth.sendTransaction({
                            from: from,
                            to: to,
                            value: value,
                            data: data,
                            gas: gas,
                            gasPrice: gasPrice
                        }, c); })];
                case 3:
                    txHashRes = _c.sent();
                    return [2 /*return*/, txHashRes.toString()];
                case 4:
                    error_2 = _c.sent();
                    onError(error_2);
                    throw error_2;
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.sendRawTransaction = sendRawTransaction;
/**
 * Call a method on a contract, sending arbitrary data and
 * handling Parity errors. Returns '0x' if error.
 * @param web3 Web3 instance
 * @param param0 __namedParameters
 * @param from address sending call
 * @param to destination contract address
 * @param data data to send to contract
 * @param onError callback when user denies transaction
 */
function rawCall(web3, _a, onError) {
    var from = _a.from, to = _a.to, data = _a.data;
    return __awaiter(this, void 0, void 0, function () {
        var result, error_3;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, promisify(function (c) { return web3.eth.call({
                            from: from,
                            to: to,
                            data: data
                        }, c); })];
                case 1:
                    result = _b.sent();
                    return [2 /*return*/, result];
                case 2:
                    error_3 = _b.sent();
                    // Probably method not found, and web3 is a Parity node
                    if (onError) {
                        onError(error_3);
                    }
                    // Backwards compatibility with Geth nodes
                    return [2 /*return*/, '0x'];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.rawCall = rawCall;
/**
 * Estimate Gas usage for a transaction
 * @param web3 Web3 instance
 * @param from address sending transaction
 * @param to destination contract address
 * @param data data to send to contract
 * @param value value in ETH to send with data
 */
function estimateGas(web3, _a) {
    var from = _a.from, to = _a.to, data = _a.data, _b = _a.value, value = _b === void 0 ? 0 : _b;
    return __awaiter(this, void 0, void 0, function () {
        var amount;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, promisify(function (c) { return web3.eth.estimateGas({
                        from: from,
                        to: to,
                        value: value,
                        data: data,
                    }, c); })];
                case 1:
                    amount = _c.sent();
                    return [2 /*return*/, amount];
            }
        });
    });
}
exports.estimateGas = estimateGas;
/**
 * Get mean gas price for sending a txn, in wei
 * @param web3 Web3 instance
 */
function getCurrentGasPrice(web3) {
    return __awaiter(this, void 0, void 0, function () {
        var meanGas;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, promisify(function (c) { return web3.eth.getGasPrice(c); })];
                case 1:
                    meanGas = _a.sent();
                    return [2 /*return*/, meanGas];
            }
        });
    });
}
exports.getCurrentGasPrice = getCurrentGasPrice;
/**
 * Get current transfer fees for an asset
 * @param web3 Web3 instance
 * @param asset The asset to check for transfer fees
 */
function getTransferFeeSettings(web3, _a) {
    var asset = _a.asset, accountAddress = _a.accountAddress;
    return __awaiter(this, void 0, void 0, function () {
        var transferFee, transferFeeTokenAddress, feeContract_1, params;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(asset.tokenAddress.toLowerCase() == constants_1.ENJIN_ADDRESS.toLowerCase())) return [3 /*break*/, 2];
                    feeContract_1 = web3.eth.contract(contracts_1.ERC1155).at(asset.tokenAddress);
                    return [4 /*yield*/, promisifyCall(function (c) { return feeContract_1.transferSettings(asset.tokenId, { from: accountAddress }, c); })];
                case 1:
                    params = _b.sent();
                    if (params) {
                        transferFee = makeBigNumber(params[3]);
                        if (params[2] == 0) {
                            transferFeeTokenAddress = constants_1.ENJIN_COIN_ADDRESS;
                        }
                    }
                    _b.label = 2;
                case 2: return [2 /*return*/, { transferFee: transferFee, transferFeeTokenAddress: transferFeeTokenAddress }];
            }
        });
    });
}
exports.getTransferFeeSettings = getTransferFeeSettings;
// sourced from 0x.js:
// https://github.com/ProjectWyvern/wyvern-js/blob/39999cb93ce5d80ea90b4382182d1bd4339a9c6c/src/utils/signature_utils.ts
function parseSignatureHex(signature) {
    // HACK: There is no consensus on whether the signatureHex string should be formatted as
    // v + r + s OR r + s + v, and different clients (even different versions of the same client)
    // return the signature params in different orders. In order to support all client implementations,
    // we parse the signature in both ways, and evaluate if either one is a valid signature.
    var validVParamValues = [27, 28];
    var ecSignatureRSV = _parseSignatureHexAsRSV(signature);
    if (_.includes(validVParamValues, ecSignatureRSV.v)) {
        return ecSignatureRSV;
    }
    // For older clients
    var ecSignatureVRS = _parseSignatureHexAsVRS(signature);
    if (_.includes(validVParamValues, ecSignatureVRS.v)) {
        return ecSignatureVRS;
    }
    throw new Error('Invalid signature');
    function _parseSignatureHexAsVRS(signatureHex) {
        var signatureBuffer = ethUtil.toBuffer(signatureHex);
        var v = signatureBuffer[0];
        if (v < 27) {
            v += 27;
        }
        var r = signatureBuffer.slice(1, 33);
        var s = signatureBuffer.slice(33, 65);
        var ecSignature = {
            v: v,
            r: ethUtil.bufferToHex(r),
            s: ethUtil.bufferToHex(s),
        };
        return ecSignature;
    }
    function _parseSignatureHexAsRSV(signatureHex) {
        var _a = ethUtil.fromRpcSig(signatureHex), v = _a.v, r = _a.r, s = _a.s;
        var ecSignature = {
            v: v,
            r: ethUtil.bufferToHex(r),
            s: ethUtil.bufferToHex(s),
        };
        return ecSignature;
    }
}
/**
 * Estimates the price of an order
 * @param order The order to estimate price on
 * @param secondsToBacktrack The number of seconds to subtract on current time,
 *  to fix race conditions
 * @param shouldRoundUp Whether to round up fractional wei
 */
function estimateCurrentPrice(order, secondsToBacktrack, shouldRoundUp) {
    if (secondsToBacktrack === void 0) { secondsToBacktrack = 30; }
    if (shouldRoundUp === void 0) { shouldRoundUp = true; }
    var basePrice = order.basePrice, listingTime = order.listingTime, expirationTime = order.expirationTime, extra = order.extra;
    var side = order.side, takerRelayerFee = order.takerRelayerFee, makerRelayerFee = order.makerRelayerFee, saleKind = order.saleKind, feeRecipient = order.feeRecipient;
    var now = new bignumber_js_1.default(Math.round(Date.now() / 1000)).minus(secondsToBacktrack);
    basePrice = new bignumber_js_1.default(basePrice);
    listingTime = new bignumber_js_1.default(listingTime);
    expirationTime = new bignumber_js_1.default(expirationTime);
    extra = new bignumber_js_1.default(extra);
    var exactPrice = basePrice;
    if (saleKind == types_2.SaleKind.FixedPrice) {
        // Do nothing, price is correct
    }
    else if (saleKind == types_2.SaleKind.DutchAuction) {
        var diff = extra.times(now.minus(listingTime))
            .dividedBy(expirationTime.minus(listingTime));
        exactPrice = side == types_2.OrderSide.Sell
            /* Sell-side - start price: basePrice. End price: basePrice - extra. */
            ? basePrice.minus(diff)
            /* Buy-side - start price: basePrice. End price: basePrice + extra. */
            : basePrice.plus(diff);
    }
    // Add buyer fee
    if (side == types_2.OrderSide.Sell) {
        // Buyer fee increases sale price
        var buyerFeeBPS = order.waitingForBestCounterOrder
            ? makerRelayerFee
            : takerRelayerFee;
        exactPrice = exactPrice.times(+buyerFeeBPS / constants_1.INVERSE_BASIS_POINT + 1);
    }
    return shouldRoundUp ? exactPrice.ceil() : exactPrice;
}
exports.estimateCurrentPrice = estimateCurrentPrice;
/**
 * Wrapper function for getting generic Wyvern assets from OpenSea assets
 * @param schema Wyvern schema for the asset
 * @param asset The fungible or nonfungible asset to format
 */
function getWyvernAsset(schema, asset, quantity) {
    if (quantity === void 0) { quantity = new bignumber_js_1.default(1); }
    if (SCHEMA_NAME_TO_ASSET_CONTRACT_TYPE[schema.name] == types_2.AssetContractType.NonFungible) {
        return getWyvernNFTAsset(schema, asset);
    }
    else {
        return getWyvernFTAsset(schema, asset, quantity);
    }
}
exports.getWyvernAsset = getWyvernAsset;
/**
 * Get the Wyvern representation of an NFT asset
 * @param schema The WyvernSchema needed to access this asset
 * @param asset The asset
 */
function getWyvernNFTAsset(schema, asset) {
    return schema.assetFromFields({
        'ID': asset.tokenId != null
            ? asset.tokenId.toString()
            : undefined,
        'Address': asset.tokenAddress.toLowerCase(),
        'Name': asset.name,
    });
}
exports.getWyvernNFTAsset = getWyvernNFTAsset;
/**
 * Get the Wyvern representation of a fungible asset
 * @param schema The WyvernSchema needed to access this asset
 * @param asset The asset to trade
 * @param quantity The number of items to trade
 */
function getWyvernFTAsset(schema, asset, quantity) {
    var tokenId = asset.tokenId != null
        ? asset.tokenId
        : undefined;
    return schema.assetFromFields({
        'ID': tokenId,
        'Quantity': quantity.toString(),
        'Address': asset.tokenAddress.toLowerCase(),
    });
}
exports.getWyvernFTAsset = getWyvernFTAsset;
/**
 * Get the Wyvern representation of a group of NFT assets
 * Sort order is enforced here. Throws if there's a duplicate.
 * @param schema The WyvernSchema needed to access these assets
 * @param assets Assets to bundle
 */
function getWyvernBundle(schema, assets) {
    var wyAssets = assets.map(function (asset) { return getWyvernNFTAsset(schema, asset); });
    var sorters = [function (a) { return a.address; }, function (a) { return a.id; }];
    var uniqueAssets = _.uniqBy(wyAssets, function (a) { return sorters[0](a) + "-" + sorters[1](a); });
    if (uniqueAssets.length != wyAssets.length) {
        throw new Error("Bundle can't contain duplicate assets");
    }
    var sortedWyAssets = _.sortBy(wyAssets, sorters);
    return {
        assets: sortedWyAssets
    };
}
exports.getWyvernBundle = getWyvernBundle;
/**
 * Get the non-prefixed hash for the order
 * (Fixes a Wyvern typescript issue and casing issue)
 * @param order order to hash
 */
function getOrderHash(order) {
    var orderWithStringTypes = __assign({}, order, { maker: order.maker.toLowerCase(), taker: order.taker.toLowerCase(), feeRecipient: order.feeRecipient.toLowerCase(), side: order.side.toString(), saleKind: order.saleKind.toString(), howToCall: order.howToCall.toString(), feeMethod: order.feeMethod.toString() });
    return wyvern_js_1.WyvernProtocol.getOrderHashHex(orderWithStringTypes);
}
exports.getOrderHash = getOrderHash;
/**
 * Assign an order and a new matching order to their buy/sell sides
 * @param order Original order
 * @param matchingOrder The result of _makeMatchingOrder
 */
function assignOrdersToSides(order, matchingOrder) {
    var isSellOrder = order.side == types_2.OrderSide.Sell;
    var buy;
    var sell;
    if (!isSellOrder) {
        buy = order;
        sell = __assign({}, matchingOrder, { v: buy.v, r: buy.r, s: buy.s });
    }
    else {
        sell = order;
        buy = __assign({}, matchingOrder, { v: sell.v, r: sell.r, s: sell.s });
    }
    return { buy: buy, sell: sell };
}
exports.assignOrdersToSides = assignOrdersToSides;
// BROKEN
// TODO fix this calldata for buy orders
function canSettleOrder(client, order, matchingOrder) {
    return __awaiter(this, void 0, void 0, function () {
        var calldata, seller, proxy, contract;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    calldata = order.calldata.slice(0, 98) + "1111111111111111111111111111111111111111" + order.calldata.slice(138);
                    seller = order.side == types_2.OrderSide.Buy ? matchingOrder.maker : order.maker;
                    return [4 /*yield*/, client._getProxy(seller)];
                case 1:
                    proxy = _a.sent();
                    if (!proxy) {
                        console.warn("No proxy found for seller " + seller);
                        return [2 /*return*/, false];
                    }
                    contract = (client.web3.eth.contract([proxyABI])).at(proxy);
                    return [2 /*return*/, promisify(function (c) {
                            return contract.proxy.call(order.target, order.howToCall, calldata, { from: seller }, c);
                        })];
            }
        });
    });
}
/**
 * Delay using setTimeout
 * @param ms milliseconds to wait
 */
function delay(ms) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (res) { return setTimeout(res, ms); })];
        });
    });
}
exports.delay = delay;
/**
 * Encode the atomicized transfer of many assets
 * @param schema Wyvern Schema for the assets
 * @param assets List of assets to transfer
 * @param from Current address owning the assets
 * @param to Destination address
 * @param atomicizer Wyvern Atomicizer instance
 */
function encodeAtomicizedTransfer(schema, assets, from, to, atomicizer) {
    var transactions = assets.map(function (asset) {
        var transfer = schema.functions.transfer(asset);
        var calldata = encodeTransferCall(transfer, from, to);
        return {
            calldata: calldata,
            address: transfer.target,
            value: new bignumber_js_1.default(0),
        };
    });
    var atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(function (t) { return t.address; }), transactions.map(function (t) { return t.value; }), transactions.map(function (t) { return new bignumber_js_1.default((t.calldata.length - 2) / 2); }), // subtract 2 for '0x', divide by 2 for hex
    transactions.map(function (t) { return t.calldata; }).reduce(function (x, current) { return x + current.slice(2); }, '0x'));
    return {
        calldata: atomicizedCalldata,
    };
}
exports.encodeAtomicizedTransfer = encodeAtomicizedTransfer;
/**
 * Encode a transfer call for a Wyvern schema function
 * @param transferAbi Annotated Wyvern ABI
 * @param from From address
 * @param to To address
 */
function encodeTransferCall(transferAbi, from, to) {
    var parameters = transferAbi.inputs.map(function (input) {
        switch (input.kind) {
            case types_1.FunctionInputKind.Replaceable:
                return to;
            case types_1.FunctionInputKind.Owner:
                return from;
            case types_1.FunctionInputKind.Asset:
            default:
                if (input.value == null) {
                    throw new Error("Unsupported function input kind: " + input.kind);
                }
                return input.value;
        }
    });
    return WyvernSchemas.encodeCall(transferAbi, parameters);
}
exports.encodeTransferCall = encodeTransferCall;
/**
 * Encode a call to a user's proxy contract
 * @param address The address for the proxy to call
 * @param howToCall How to call the addres
 * @param calldata The data to use in the call
 * @param shouldAssert Whether to assert success in the proxy call
 */
function encodeProxyCall(address, howToCall, calldata, shouldAssert) {
    if (shouldAssert === void 0) { shouldAssert = true; }
    var abi = shouldAssert ? proxyAssertABI : proxyABI;
    return WyvernSchemas.encodeCall(abi, [address, howToCall, Buffer.from(calldata.slice(2), 'hex')]);
}
exports.encodeProxyCall = encodeProxyCall;
/**
 * Validates that an address exists, isn't null, and is properly
 * formatted for Wyvern and OpenSea
 * @param address input address
 */
function validateAndFormatWalletAddress(web3, address) {
    if (!address) {
        throw new Error('No wallet address found');
    }
    if (!web3.isAddress(address)) {
        throw new Error('Invalid wallet address');
    }
    if (address == constants_1.NULL_ADDRESS) {
        throw new Error('Wallet cannot be the null address');
    }
    return address.toLowerCase();
}
exports.validateAndFormatWalletAddress = validateAndFormatWalletAddress;
/**
 * Notify developer when a pattern will be deprecated
 * @param msg message to log to console
 */
function onDeprecated(msg) {
    console.warn("DEPRECATION NOTICE: " + msg);
}
exports.onDeprecated = onDeprecated;
/**
 * Get special-case approval addresses for an erc721 contract
 * @param erc721Contract contract to check
 */
function getNonCompliantApprovalAddress(erc721Contract, tokenId, accountAddress) {
    return __awaiter(this, void 0, void 0, function () {
        var results;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.all([
                        // CRYPTOKITTIES check
                        promisifyCall(function (c) { return erc721Contract.kittyIndexToApproved.call(tokenId, c); }),
                        // Etherbots check
                        promisifyCall(function (c) { return erc721Contract.partIndexToApproved.call(tokenId, c); }),
                    ])];
                case 1:
                    results = _a.sent();
                    return [2 /*return*/, _.compact(results)[0]];
            }
        });
    });
}
exports.getNonCompliantApprovalAddress = getNonCompliantApprovalAddress;
//# sourceMappingURL=utils.js.map
'''
'''--- lib/utils/schema.d.ts ---
import { WyvernProtocol } from 'wyvern-js';
import { HowToCall, ReplacementEncoder, Network } from 'wyvern-js/lib/types';
import { AnnotatedFunctionABI, Schema } from 'wyvern-schemas/dist/types';
export { AbiType } from 'wyvern-schemas';
import { WyvernAsset } from '../types';
export interface LimitedCallSpec {
    target: string;
    calldata: string;
}
export interface CallSpec {
    target: string;
    calldata: string;
    replacementPattern: string;
}
export declare const encodeReplacementPattern: ReplacementEncoder;
export declare type Encoder = (schema: Schema<WyvernAsset>, asset: WyvernAsset, address: string) => CallSpec;
export declare const encodeCall: (abi: AnnotatedFunctionABI, parameters: any[]) => string;
export declare const encodeSell: Encoder;
export declare type AtomicizedSellEncoder = (schemas: Array<Schema<WyvernAsset>>, assets: WyvernAsset[], address: string, wyvernProtocol: WyvernProtocol, networkName: Network) => CallSpec;
export declare const encodeAtomicizedSell: AtomicizedSellEncoder;
export declare type AtomicizedBuyEncoder = (schemas: Array<Schema<WyvernAsset>>, assets: WyvernAsset[], address: string, wyvernProtocol: WyvernProtocol, networkName: Network) => CallSpec;
export declare const encodeAtomicizedBuy: AtomicizedBuyEncoder;
export declare const encodeBuy: Encoder;
export declare type DefaultCallEncoder = (abi: AnnotatedFunctionABI, address: string) => string;
export declare const encodeDefaultCall: DefaultCallEncoder;
/**
 * Encode the atomicized transfer of many assets
 * @param schema Wyvern Schema for the assets
 * @param assets List of assets to transfer
 * @param from Current address owning the assets
 * @param to Destination address
 * @param atomicizer Wyvern Atomicizer instance
 */
export declare function encodeAtomicizedTransfer(schemas: Array<Schema<WyvernAsset>>, assets: WyvernAsset[], from: string, to: string, wyvernProtocol: WyvernProtocol, networkName: Network): LimitedCallSpec;
/**
 * Encode a transfer call for a Wyvern schema function
 * @param transferAbi Annotated Wyvern ABI
 * @param from From address
 * @param to To address
 */
export declare function encodeTransferCall(transferAbi: AnnotatedFunctionABI, from: string, to: string): string;
/**
 * Encode a call to a user's proxy contract
 * @param address The address for the proxy to call
 * @param howToCall How to call the addres
 * @param calldata The data to use in the call
 * @param shouldAssert Whether to assert success in the proxy call
 */
export declare function encodeProxyCall(address: string, howToCall: HowToCall, calldata: string, shouldAssert?: boolean): string;

'''
'''--- lib/utils/schema.js ---
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeProxyCall = exports.encodeTransferCall = exports.encodeAtomicizedTransfer = exports.encodeDefaultCall = exports.encodeBuy = exports.encodeAtomicizedBuy = exports.encodeAtomicizedSell = exports.encodeSell = exports.encodeCall = exports.encodeReplacementPattern = exports.AbiType = void 0;
var bignumber_js_1 = require("bignumber.js");
var ethABI = require("ethereumjs-abi");
var wyvern_js_1 = require("wyvern-js");
var types_1 = require("wyvern-schemas/dist/types");
var wyvern_schemas_1 = require("wyvern-schemas");
Object.defineProperty(exports, "AbiType", { enumerable: true, get: function () { return wyvern_schemas_1.AbiType; } });
var types_2 = require("../types");
var Proxy_1 = require("../abi/Proxy");
exports.encodeReplacementPattern = wyvern_js_1.WyvernProtocol.encodeReplacementPattern;
var encodeCall = function (abi, parameters) {
    var inputTypes = abi.inputs.map(function (i) { return i.type; });
    return '0x' + Buffer.concat([
        ethABI.methodID(abi.name, inputTypes),
        ethABI.rawEncode(inputTypes, parameters),
    ]).toString('hex');
};
exports.encodeCall = encodeCall;
var encodeSell = function (schema, asset, address) {
    var transfer = schema.functions.transfer(asset);
    return {
        target: transfer.target,
        calldata: exports.encodeDefaultCall(transfer, address),
        replacementPattern: exports.encodeReplacementPattern(transfer),
    };
};
exports.encodeSell = encodeSell;
var encodeAtomicizedSell = function (schemas, assets, address, wyvernProtocol, networkName) {
    var atomicizer = wyvernProtocol.wyvernAtomicizer;
    var _a = encodeAtomicizedCalldata(atomicizer, schemas, assets, address, types_2.OrderSide.Sell), atomicizedCalldata = _a.atomicizedCalldata, atomicizedReplacementPattern = _a.atomicizedReplacementPattern;
    return {
        calldata: atomicizedCalldata,
        replacementPattern: atomicizedReplacementPattern,
        target: wyvern_js_1.WyvernProtocol.getAtomicizerContractAddress(networkName)
    };
};
exports.encodeAtomicizedSell = encodeAtomicizedSell;
var encodeAtomicizedBuy = function (schemas, assets, address, wyvernProtocol, networkName) {
    var atomicizer = wyvernProtocol.wyvernAtomicizer;
    var _a = encodeAtomicizedCalldata(atomicizer, schemas, assets, address, types_2.OrderSide.Buy), atomicizedCalldata = _a.atomicizedCalldata, atomicizedReplacementPattern = _a.atomicizedReplacementPattern;
    return {
        calldata: atomicizedCalldata,
        replacementPattern: atomicizedReplacementPattern,
        target: wyvern_js_1.WyvernProtocol.getAtomicizerContractAddress(networkName)
    };
};
exports.encodeAtomicizedBuy = encodeAtomicizedBuy;
var encodeBuy = function (schema, asset, address) {
    var transfer = schema.functions.transfer(asset);
    var replaceables = transfer.inputs.filter(function (i) { return i.kind === types_1.FunctionInputKind.Replaceable; });
    var ownerInputs = transfer.inputs.filter(function (i) { return i.kind === types_1.FunctionInputKind.Owner; });
    // Validate
    if (replaceables.length !== 1) {
        throw new Error('Only 1 input can match transfer destination, but instead ' + replaceables.length + ' did');
    }
    // Compute calldata
    var parameters = transfer.inputs.map(function (input) {
        switch (input.kind) {
            case types_1.FunctionInputKind.Replaceable:
                return address;
            case types_1.FunctionInputKind.Owner:
                return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);
            default:
                try {
                    return input.value.toString();
                }
                catch (e) {
                    console.error(schema);
                    console.error(asset);
                    throw e;
                }
        }
    });
    var calldata = exports.encodeCall(transfer, parameters);
    // Compute replacement pattern
    var replacementPattern = '0x';
    if (ownerInputs.length > 0) {
        replacementPattern = exports.encodeReplacementPattern(transfer, types_1.FunctionInputKind.Owner);
    }
    return {
        target: transfer.target,
        calldata: calldata,
        replacementPattern: replacementPattern,
    };
};
exports.encodeBuy = encodeBuy;
var encodeDefaultCall = function (abi, address) {
    var parameters = abi.inputs.map(function (input) {
        switch (input.kind) {
            case types_1.FunctionInputKind.Replaceable:
                return wyvern_js_1.WyvernProtocol.generateDefaultValue(input.type);
            case types_1.FunctionInputKind.Owner:
                return address;
            case types_1.FunctionInputKind.Asset:
            default:
                return input.value;
        }
    });
    return exports.encodeCall(abi, parameters);
};
exports.encodeDefaultCall = encodeDefaultCall;
/**
 * Encode the atomicized transfer of many assets
 * @param schema Wyvern Schema for the assets
 * @param assets List of assets to transfer
 * @param from Current address owning the assets
 * @param to Destination address
 * @param atomicizer Wyvern Atomicizer instance
 */
function encodeAtomicizedTransfer(schemas, assets, from, to, wyvernProtocol, networkName) {
    var atomicizer = wyvernProtocol.wyvernAtomicizer;
    var transactions = assets.map(function (asset, i) {
        var schema = schemas[i];
        var transfer = schema.functions.transfer(asset);
        var calldata = encodeTransferCall(transfer, from, to);
        return {
            calldata: calldata,
            address: transfer.target,
            value: new bignumber_js_1.BigNumber(0),
        };
    });
    var atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(function (t) { return t.address; }), transactions.map(function (t) { return t.value; }), transactions.map(function (t) { return new bignumber_js_1.BigNumber((t.calldata.length - 2) / 2); }), // subtract 2 for '0x', divide by 2 for hex
    transactions.map(function (t) { return t.calldata; }).reduce(function (x, current) { return x + current.slice(2); }, '0x'));
    return {
        calldata: atomicizedCalldata,
        target: wyvern_js_1.WyvernProtocol.getAtomicizerContractAddress(networkName)
    };
}
exports.encodeAtomicizedTransfer = encodeAtomicizedTransfer;
/**
 * Encode a transfer call for a Wyvern schema function
 * @param transferAbi Annotated Wyvern ABI
 * @param from From address
 * @param to To address
 */
function encodeTransferCall(transferAbi, from, to) {
    var parameters = transferAbi.inputs.map(function (input) {
        switch (input.kind) {
            case types_1.FunctionInputKind.Replaceable:
                return to;
            case types_1.FunctionInputKind.Owner:
                return from;
            case types_1.FunctionInputKind.Asset:
            default:
                if (input.value == null) {
                    throw new Error("Unsupported function input kind: " + input.kind);
                }
                return input.value;
        }
    });
    return exports.encodeCall(transferAbi, parameters);
}
exports.encodeTransferCall = encodeTransferCall;
/**
 * Encode a call to a user's proxy contract
 * @param address The address for the proxy to call
 * @param howToCall How to call the addres
 * @param calldata The data to use in the call
 * @param shouldAssert Whether to assert success in the proxy call
 */
function encodeProxyCall(address, howToCall, calldata, shouldAssert) {
    if (shouldAssert === void 0) { shouldAssert = true; }
    var abi = shouldAssert ? Proxy_1.proxyAssertABI : Proxy_1.proxyABI;
    return exports.encodeCall(abi, [address, howToCall, Buffer.from(calldata.slice(2), 'hex')]);
}
exports.encodeProxyCall = encodeProxyCall;
// Helpers for atomicizer
function encodeAtomicizedCalldata(atomicizer, schemas, assets, address, side) {
    var encoder = side === types_2.OrderSide.Sell ? exports.encodeSell : exports.encodeBuy;
    try {
        var transactions = assets.map(function (asset, i) {
            var schema = schemas[i];
            var _a = encoder(schema, asset, address), target = _a.target, calldata = _a.calldata;
            return {
                calldata: calldata,
                abi: schema.functions.transfer(asset),
                address: target,
                value: new bignumber_js_1.BigNumber(0),
            };
        });
        var atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(transactions.map(function (t) { return t.address; }), transactions.map(function (t) { return t.value; }), transactions.map(function (t) { return new bignumber_js_1.BigNumber((t.calldata.length - 2) / 2); }), // subtract 2 for '0x', divide by 2 for hex
        transactions.map(function (t) { return t.calldata; }).reduce(function (x, y) { return x + y.slice(2); }));
        var kind = side === types_2.OrderSide.Buy ? types_1.FunctionInputKind.Owner : undefined;
        var atomicizedReplacementPattern = wyvern_js_1.WyvernProtocol.encodeAtomicizedReplacementPattern(transactions.map(function (t) { return t.abi; }), kind);
        if (!atomicizedCalldata || !atomicizedReplacementPattern) {
            throw new Error("Invalid calldata: " + atomicizedCalldata + ", " + atomicizedReplacementPattern);
        }
        return {
            atomicizedCalldata: atomicizedCalldata,
            atomicizedReplacementPattern: atomicizedReplacementPattern
        };
    }
    catch (error) {
        console.error({ schemas: schemas, assets: assets, address: address, side: side });
        throw new Error("Failed to construct your order: likely something strange about this type of item. OpenSea has been notified. Please contact us in Discord! Original error: " + error);
    }
}
//# sourceMappingURL=schema.js.map
'''
'''--- lib/utils/utils.d.ts ---
import BigNumber from 'bignumber.js';
import { WyvernProtocol } from 'wyvern-js';
import * as Web3 from 'web3';
import { AnnotatedFunctionABI, Schema } from 'wyvern-schemas/dist/types';
import { Asset, AssetEvent, ECSignature, OpenSeaAccount, OpenSeaAsset, OpenSeaAssetBundle, OpenSeaAssetContract, OpenSeaCollection, OpenSeaFungibleToken, OpenSeaUser, Order, OrderJSON, Transaction, UnhashedOrder, UnsignedOrder, Web3Callback, WyvernAsset, WyvernBundle, WyvernFTAsset, WyvernNFTAsset } from '../types';
export { WyvernProtocol };
export declare const annotateERC721TransferABI: (asset: WyvernNFTAsset) => AnnotatedFunctionABI;
export declare const annotateERC20TransferABI: (asset: WyvernFTAsset) => AnnotatedFunctionABI;
/**
 * Promisify a call a method on a contract,
 * handling Parity errors. Returns '0x' if error.
 * Note that if T is not "string", this may return a falsey
 * value when the contract doesn't support the method (e.g. `isApprovedForAll`).
 * @param callback An anonymous function that takes a web3 callback
 * and returns a Web3 Contract's call result, e.g. `c => erc721.ownerOf(3, c)`
 * @param onError callback when user denies transaction
 */
export declare function promisifyCall<T>(callback: (fn: Web3Callback<T>) => void, onError?: (error: Error) => void): Promise<T | undefined>;
export declare const confirmTransaction: (web3: Web3, txHash: string) => Promise<unknown>;
export declare const assetFromJSON: (asset: any) => OpenSeaAsset;
export declare const assetEventFromJSON: (assetEvent: any) => AssetEvent;
export declare const transactionFromJSON: (transaction: any) => Transaction;
export declare const accountFromJSON: (account: any) => OpenSeaAccount;
export declare const userFromJSON: (user: any) => OpenSeaUser;
export declare const assetBundleFromJSON: (asset_bundle: any) => OpenSeaAssetBundle;
export declare const assetContractFromJSON: (asset_contract: any) => OpenSeaAssetContract;
export declare const collectionFromJSON: (collection: any) => OpenSeaCollection;
export declare const tokenFromJSON: (token: any) => OpenSeaFungibleToken;
export declare const orderFromJSON: (order: any) => Order;
/**
 * Convert an order to JSON, hashing it as well if necessary
 * @param order order (hashed or unhashed)
 */
export declare const orderToJSON: (order: Order) => OrderJSON;
/**
 * Sign messages using web3 personal signatures
 * @param web3 Web3 instance
 * @param message message to sign
 * @param signerAddress web3 address signing the message
 * @returns A signature if provider can sign, otherwise null
 */
export declare function personalSignAsync(web3: Web3, message: string, signerAddress: string): Promise<ECSignature>;
/**
 * Checks whether a given address contains any code
 * @param web3 Web3 instance
 * @param address input address
 */
export declare function isContractAddress(web3: Web3, address: string): Promise<boolean>;
/**
 * Special fixes for making BigNumbers using web3 results
 * @param arg An arg or the result of a web3 call to turn into a BigNumber
 */
export declare function makeBigNumber(arg: number | string | BigNumber): BigNumber;
/**
 * Send a transaction to the blockchain and optionally confirm it
 * @param web3 Web3 instance
 * @param param0 __namedParameters
 * @param from address sending transaction
 * @param to destination contract address
 * @param data data to send to contract
 * @param gasPrice gas price to use. If unspecified, uses web3 default (mean gas price)
 * @param value value in ETH to send with data. Defaults to 0
 * @param onError callback when user denies transaction
 */
export declare function sendRawTransaction(web3: Web3, { from, to, data, gasPrice, value, gas }: Web3.TxData, onError: (error: Error) => void): Promise<string>;
/**
 * Call a method on a contract, sending arbitrary data and
 * handling Parity errors. Returns '0x' if error.
 * @param web3 Web3 instance
 * @param param0 __namedParameters
 * @param from address sending call
 * @param to destination contract address
 * @param data data to send to contract
 * @param onError callback when user denies transaction
 */
export declare function rawCall(web3: Web3, { from, to, data }: Web3.CallData, onError?: (error: Error) => void): Promise<string>;
/**
 * Estimate Gas usage for a transaction
 * @param web3 Web3 instance
 * @param from address sending transaction
 * @param to destination contract address
 * @param data data to send to contract
 * @param value value in ETH to send with data
 */
export declare function estimateGas(web3: Web3, { from, to, data, value }: Web3.TxData): Promise<number>;
/**
 * Get mean gas price for sending a txn, in wei
 * @param web3 Web3 instance
 */
export declare function getCurrentGasPrice(web3: Web3): Promise<BigNumber>;
/**
 * Get current transfer fees for an asset
 * @param web3 Web3 instance
 * @param asset The asset to check for transfer fees
 */
export declare function getTransferFeeSettings(web3: Web3, { asset, accountAddress }: {
    asset: Asset;
    accountAddress?: string;
}): Promise<{
    transferFee: BigNumber | undefined;
    transferFeeTokenAddress: string | undefined;
}>;
/**
 * Estimates the price of an order
 * @param order The order to estimate price on
 * @param secondsToBacktrack The number of seconds to subtract on current time,
 *  to fix race conditions
 * @param shouldRoundUp Whether to round up fractional wei
 */
export declare function estimateCurrentPrice(order: Order, secondsToBacktrack?: number, shouldRoundUp?: boolean): BigNumber;
/**
 * Get the Wyvern representation of a fungible asset
 * @param schema The WyvernSchema needed to access this asset
 * @param asset The asset to trade
 * @param quantity The number of items to trade
 */
export declare function getWyvernAsset(schema: Schema<WyvernAsset>, asset: Asset, quantity?: BigNumber): WyvernAsset;
/**
 * Get the Wyvern representation of a group of assets
 * Sort order is enforced here. Throws if there's a duplicate.
 * @param assets Assets to bundle
 * @param schemas The WyvernSchemas needed to access each asset, respectively
 * @param quantities The quantity of each asset to bundle, respectively
 */
export declare function getWyvernBundle(assets: Asset[], schemas: Array<Schema<WyvernAsset>>, quantities: BigNumber[]): WyvernBundle;
/**
 * Get the non-prefixed hash for the order
 * (Fixes a Wyvern typescript issue and casing issue)
 * @param order order to hash
 */
export declare function getOrderHash(order: UnhashedOrder): string;
/**
 * Assign an order and a new matching order to their buy/sell sides
 * @param order Original order
 * @param matchingOrder The result of _makeMatchingOrder
 */
export declare function assignOrdersToSides(order: Order, matchingOrder: UnsignedOrder): {
    buy: Order;
    sell: Order;
};
/**
 * Delay using setTimeout
 * @param ms milliseconds to wait
 */
export declare function delay(ms: number): Promise<unknown>;
/**
 * Validates that an address exists, isn't null, and is properly
 * formatted for Wyvern and OpenSea
 * @param address input address
 */
export declare function validateAndFormatWalletAddress(web3: Web3, address: string): string;
/**
 * Notify developer when a pattern will be deprecated
 * @param msg message to log to console
 */
export declare function onDeprecated(msg: string): void;
/**
 * Get special-case approval addresses for an erc721 contract
 * @param erc721Contract contract to check
 */
export declare function getNonCompliantApprovalAddress(erc721Contract: Web3.ContractInstance, tokenId: string, accountAddress: string): Promise<string | undefined>;

'''
'''--- lib/utils/utils.js ---
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNonCompliantApprovalAddress = exports.onDeprecated = exports.validateAndFormatWalletAddress = exports.delay = exports.assignOrdersToSides = exports.getOrderHash = exports.getWyvernBundle = exports.getWyvernAsset = exports.estimateCurrentPrice = exports.getTransferFeeSettings = exports.getCurrentGasPrice = exports.estimateGas = exports.rawCall = exports.sendRawTransaction = exports.makeBigNumber = exports.isContractAddress = exports.personalSignAsync = exports.orderToJSON = exports.orderFromJSON = exports.tokenFromJSON = exports.collectionFromJSON = exports.assetContractFromJSON = exports.assetBundleFromJSON = exports.userFromJSON = exports.accountFromJSON = exports.transactionFromJSON = exports.assetEventFromJSON = exports.assetFromJSON = exports.confirmTransaction = exports.promisifyCall = exports.annotateERC20TransferABI = exports.annotateERC721TransferABI = exports.WyvernProtocol = void 0;
var bignumber_js_1 = require("bignumber.js");
var wyvern_js_1 = require("wyvern-js");
Object.defineProperty(exports, "WyvernProtocol", { enumerable: true, get: function () { return wyvern_js_1.WyvernProtocol; } });
var ethUtil = require("ethereumjs-util");
var _ = require("lodash");
var Web3 = require("web3");
var types_1 = require("wyvern-schemas/dist/types");
var contracts_1 = require("../contracts");
var types_2 = require("../types");
var constants_1 = require("../constants");
var Proxy_1 = require("../abi/Proxy");
var annotateERC721TransferABI = function (asset) { return ({
    "constant": false,
    "inputs": [
        {
            "name": "_to",
            "type": "address",
            "kind": types_1.FunctionInputKind.Replaceable
        },
        {
            "name": "_tokenId",
            "type": "uint256",
            "kind": types_1.FunctionInputKind.Asset,
            "value": asset.id
        }
    ],
    "target": asset.address,
    "name": "transfer",
    "outputs": [],
    "payable": false,
    "stateMutability": types_1.StateMutability.Nonpayable,
    "type": Web3.AbiType.Function
}); };
exports.annotateERC721TransferABI = annotateERC721TransferABI;
var annotateERC20TransferABI = function (asset) { return ({
    "constant": false,
    "inputs": [
        {
            "name": "_to",
            "type": "address",
            "kind": types_1.FunctionInputKind.Replaceable
        },
        {
            "name": "_amount",
            "type": "uint256",
            "kind": types_1.FunctionInputKind.Count,
            "value": asset.quantity
        }
    ],
    "target": asset.address,
    "name": "transfer",
    "outputs": [
        {
            "name": "success",
            "type": "bool",
            "kind": types_1.FunctionOutputKind.Other
        }
    ],
    "payable": false,
    "stateMutability": types_1.StateMutability.Nonpayable,
    "type": Web3.AbiType.Function
}); };
exports.annotateERC20TransferABI = annotateERC20TransferABI;
var SCHEMA_NAME_TO_ASSET_CONTRACT_TYPE = (_a = {},
    _a[types_2.WyvernSchemaName.ERC721] = types_2.AssetContractType.NonFungible,
    _a[types_2.WyvernSchemaName.ERC1155] = types_2.AssetContractType.SemiFungible,
    _a[types_2.WyvernSchemaName.ERC20] = types_2.AssetContractType.Fungible,
    _a[types_2.WyvernSchemaName.LegacyEnjin] = types_2.AssetContractType.SemiFungible,
    _a[types_2.WyvernSchemaName.ENSShortNameAuction] = types_2.AssetContractType.NonFungible,
    _a);
// OTHER
var txCallbacks = {};
/**
 * Promisify a callback-syntax web3 function
 * @param inner callback function that accepts a Web3 callback function and passes
 * it to the Web3 function
 */
function promisify(inner) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    return inner(function (err, res) {
                        if (err) {
                            reject(err);
                        }
                        resolve(res);
                    });
                })];
        });
    });
}
/**
 * Promisify a call a method on a contract,
 * handling Parity errors. Returns '0x' if error.
 * Note that if T is not "string", this may return a falsey
 * value when the contract doesn't support the method (e.g. `isApprovedForAll`).
 * @param callback An anonymous function that takes a web3 callback
 * and returns a Web3 Contract's call result, e.g. `c => erc721.ownerOf(3, c)`
 * @param onError callback when user denies transaction
 */
function promisifyCall(callback, onError) {
    return __awaiter(this, void 0, void 0, function () {
        var result, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, promisify(callback)];
                case 1:
                    result = _a.sent();
                    if (result == '0x') {
                        // Geth compatibility
                        return [2 /*return*/, undefined];
                    }
                    return [2 /*return*/, result];
                case 2:
                    error_1 = _a.sent();
                    // Probably method not found, and web3 is a Parity node
                    if (onError) {
                        onError(error_1);
                    }
                    else {
                        console.error(error_1);
                    }
                    return [2 /*return*/, undefined];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.promisifyCall = promisifyCall;
var track = function (web3, txHash, onFinalized) {
    if (txCallbacks[txHash]) {
        txCallbacks[txHash].push(onFinalized);
    }
    else {
        txCallbacks[txHash] = [onFinalized];
        var poll_1 = function () { return __awaiter(void 0, void 0, void 0, function () {
            var tx, receipt, status_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, promisify(function (c) { return web3.eth.getTransaction(txHash, c); })];
                    case 1:
                        tx = _a.sent();
                        if (!(tx && tx.blockHash && tx.blockHash !== constants_1.NULL_BLOCK_HASH)) return [3 /*break*/, 3];
                        return [4 /*yield*/, promisify(function (c) { return web3.eth.getTransactionReceipt(txHash, c); })];
                    case 2:
                        receipt = _a.sent();
                        if (!receipt) {
                            // Hack: assume success if no receipt
                            console.warn('No receipt found for ', txHash);
                        }
                        status_1 = receipt
                            ? parseInt((receipt.status || "0").toString()) == 1
                            : true;
                        txCallbacks[txHash].map(function (f) { return f(status_1); });
                        delete txCallbacks[txHash];
                        return [3 /*break*/, 4];
                    case 3:
                        setTimeout(poll_1, 1000);
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        poll_1().catch();
    }
};
var confirmTransaction = function (web3, txHash) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve, reject) {
                track(web3, txHash, function (didSucceed) {
                    if (didSucceed) {
                        resolve("Transaction complete!");
                    }
                    else {
                        reject(new Error("Transaction failed :( You might have already completed this action. See more on the mainnet at etherscan.io/tx/" + txHash));
                    }
                });
            })];
    });
}); };
exports.confirmTransaction = confirmTransaction;
var assetFromJSON = function (asset) {
    var isAnimated = asset.image_url && asset.image_url.endsWith('.gif');
    var isSvg = asset.image_url && asset.image_url.endsWith('.svg');
    var fromJSON = {
        tokenId: asset.token_id.toString(),
        tokenAddress: asset.asset_contract.address,
        name: asset.name,
        description: asset.description,
        owner: asset.owner,
        assetContract: exports.assetContractFromJSON(asset.asset_contract),
        collection: exports.collectionFromJSON(asset.collection),
        orders: asset.orders ? asset.orders.map(exports.orderFromJSON) : null,
        sellOrders: asset.sell_orders ? asset.sell_orders.map(exports.orderFromJSON) : null,
        buyOrders: asset.buy_orders ? asset.buy_orders.map(exports.orderFromJSON) : null,
        isPresale: asset.is_presale,
        // Don't use previews if it's a special image
        imageUrl: isAnimated || isSvg
            ? asset.image_url
            : (asset.image_preview_url || asset.image_url),
        imagePreviewUrl: asset.image_preview_url,
        imageUrlOriginal: asset.image_original_url,
        imageUrlThumbnail: asset.image_thumbnail_url,
        externalLink: asset.external_link,
        openseaLink: asset.permalink,
        traits: asset.traits,
        numSales: asset.num_sales,
        lastSale: asset.last_sale ? exports.assetEventFromJSON(asset.last_sale) : null,
        backgroundColor: asset.background_color ? "#" + asset.background_color : null,
        transferFee: asset.transfer_fee
            ? makeBigNumber(asset.transfer_fee)
            : null,
        transferFeePaymentToken: asset.transfer_fee_payment_token
            ? exports.tokenFromJSON(asset.transfer_fee_payment_token)
            : null,
    };
    // If orders were included, put them in sell/buy order groups
    if (fromJSON.orders && !fromJSON.sellOrders) {
        fromJSON.sellOrders = fromJSON.orders.filter(function (o) { return o.side == types_2.OrderSide.Sell; });
    }
    if (fromJSON.orders && !fromJSON.buyOrders) {
        fromJSON.buyOrders = fromJSON.orders.filter(function (o) { return o.side == types_2.OrderSide.Buy; });
    }
    return fromJSON;
};
exports.assetFromJSON = assetFromJSON;
var assetEventFromJSON = function (assetEvent) {
    return {
        eventType: assetEvent.event_type,
        eventTimestamp: assetEvent.event_timestamp,
        auctionType: assetEvent.auction_type,
        totalPrice: assetEvent.total_price,
        transaction: assetEvent.transaction ? exports.transactionFromJSON(assetEvent.transaction) : null,
        paymentToken: assetEvent.payment_token ? exports.tokenFromJSON(assetEvent.payment_token) : null,
    };
};
exports.assetEventFromJSON = assetEventFromJSON;
var transactionFromJSON = function (transaction) {
    return {
        fromAccount: exports.accountFromJSON(transaction.from_account),
        toAccount: exports.accountFromJSON(transaction.to_account),
        createdDate: new Date(transaction.created_date + "Z"),
        modifiedDate: new Date(transaction.modified_date + "Z"),
        transactionHash: transaction.transaction_hash,
        transactionIndex: transaction.transaction_index,
        blockNumber: transaction.block_number,
        blockHash: transaction.block_hash,
        timestamp: new Date(transaction.timestamp + "Z"),
    };
};
exports.transactionFromJSON = transactionFromJSON;
var accountFromJSON = function (account) {
    return {
        address: account.address,
        config: account.config,
        profileImgUrl: account.profile_img_url,
        user: account.user ? exports.userFromJSON(account.user) : null
    };
};
exports.accountFromJSON = accountFromJSON;
var userFromJSON = function (user) {
    return {
        username: user.username
    };
};
exports.userFromJSON = userFromJSON;
var assetBundleFromJSON = function (asset_bundle) {
    var fromJSON = {
        maker: asset_bundle.maker,
        assets: asset_bundle.assets.map(exports.assetFromJSON),
        assetContract: asset_bundle.asset_contract
            ? exports.assetContractFromJSON(asset_bundle.asset_contract)
            : undefined,
        name: asset_bundle.name,
        slug: asset_bundle.slug,
        description: asset_bundle.description,
        externalLink: asset_bundle.external_link,
        permalink: asset_bundle.permalink,
        sellOrders: asset_bundle.sell_orders ? asset_bundle.sell_orders.map(exports.orderFromJSON) : null
    };
    return fromJSON;
};
exports.assetBundleFromJSON = assetBundleFromJSON;
var assetContractFromJSON = function (asset_contract) {
    return {
        name: asset_contract.name,
        description: asset_contract.description,
        type: asset_contract.asset_contract_type,
        schemaName: asset_contract.schema_name,
        address: asset_contract.address,
        tokenSymbol: asset_contract.symbol,
        buyerFeeBasisPoints: +asset_contract.buyer_fee_basis_points,
        sellerFeeBasisPoints: +asset_contract.seller_fee_basis_points,
        openseaBuyerFeeBasisPoints: +asset_contract.opensea_buyer_fee_basis_points,
        openseaSellerFeeBasisPoints: +asset_contract.opensea_seller_fee_basis_points,
        devBuyerFeeBasisPoints: +asset_contract.dev_buyer_fee_basis_points,
        devSellerFeeBasisPoints: +asset_contract.dev_seller_fee_basis_points,
        imageUrl: asset_contract.image_url,
        externalLink: asset_contract.external_link,
        wikiLink: asset_contract.wiki_link,
    };
};
exports.assetContractFromJSON = assetContractFromJSON;
var collectionFromJSON = function (collection) {
    var createdDate = new Date(collection.created_date + "Z");
    return {
        createdDate: createdDate,
        name: collection.name,
        description: collection.description,
        slug: collection.slug,
        editors: collection.editors,
        hidden: collection.hidden,
        featured: collection.featured,
        featuredImageUrl: collection.featured_image_url,
        displayData: collection.display_data,
        paymentTokens: (collection.payment_tokens || []).map(exports.tokenFromJSON),
        openseaBuyerFeeBasisPoints: +collection.opensea_buyer_fee_basis_points,
        openseaSellerFeeBasisPoints: +collection.opensea_seller_fee_basis_points,
        devBuyerFeeBasisPoints: +collection.dev_buyer_fee_basis_points,
        devSellerFeeBasisPoints: +collection.dev_seller_fee_basis_points,
        payoutAddress: collection.payout_address,
        imageUrl: collection.image_url,
        largeImageUrl: collection.large_image_url,
        stats: collection.stats,
        traitStats: collection.traits,
        externalLink: collection.external_url,
        wikiLink: collection.wiki_url,
    };
};
exports.collectionFromJSON = collectionFromJSON;
var tokenFromJSON = function (token) {
    var fromJSON = {
        name: token.name,
        symbol: token.symbol,
        decimals: token.decimals,
        address: token.address,
        imageUrl: token.image_url,
        ethPrice: token.eth_price,
        usdPrice: token.usd_price,
    };
    return fromJSON;
};
exports.tokenFromJSON = tokenFromJSON;
var orderFromJSON = function (order) {
    var createdDate = new Date(order.created_date + "Z");
    var fromJSON = {
        hash: order.order_hash || order.hash,
        cancelledOrFinalized: order.cancelled || order.finalized,
        markedInvalid: order.marked_invalid,
        metadata: order.metadata,
        quantity: new bignumber_js_1.default(order.quantity || 1),
        exchange: order.exchange,
        makerAccount: order.maker,
        takerAccount: order.taker,
        // Use string address to conform to Wyvern Order schema
        maker: order.maker.address,
        taker: order.taker.address,
        makerRelayerFee: new bignumber_js_1.default(order.maker_relayer_fee),
        takerRelayerFee: new bignumber_js_1.default(order.taker_relayer_fee),
        makerProtocolFee: new bignumber_js_1.default(order.maker_protocol_fee),
        takerProtocolFee: new bignumber_js_1.default(order.taker_protocol_fee),
        makerReferrerFee: new bignumber_js_1.default(order.maker_referrer_fee || 0),
        waitingForBestCounterOrder: order.fee_recipient.address == constants_1.NULL_ADDRESS,
        feeMethod: order.fee_method,
        feeRecipientAccount: order.fee_recipient,
        feeRecipient: order.fee_recipient.address,
        side: order.side,
        saleKind: order.sale_kind,
        target: order.target,
        howToCall: order.how_to_call,
        calldata: order.calldata,
        replacementPattern: order.replacement_pattern,
        staticTarget: order.static_target,
        staticExtradata: order.static_extradata,
        paymentToken: order.payment_token,
        basePrice: new bignumber_js_1.default(order.base_price),
        extra: new bignumber_js_1.default(order.extra),
        currentBounty: new bignumber_js_1.default(order.current_bounty || 0),
        currentPrice: new bignumber_js_1.default(order.current_price || 0),
        createdTime: new bignumber_js_1.default(Math.round(createdDate.getTime() / 1000)),
        listingTime: new bignumber_js_1.default(order.listing_time),
        expirationTime: new bignumber_js_1.default(order.expiration_time),
        salt: new bignumber_js_1.default(order.salt),
        v: parseInt(order.v),
        r: order.r,
        s: order.s,
        paymentTokenContract: order.payment_token_contract ? exports.tokenFromJSON(order.payment_token_contract) : undefined,
        asset: order.asset ? exports.assetFromJSON(order.asset) : undefined,
        assetBundle: order.asset_bundle ? exports.assetBundleFromJSON(order.asset_bundle) : undefined,
    };
    // Use client-side price calc, to account for buyer fee (not added by server) and latency
    fromJSON.currentPrice = estimateCurrentPrice(fromJSON);
    return fromJSON;
};
exports.orderFromJSON = orderFromJSON;
/**
 * Convert an order to JSON, hashing it as well if necessary
 * @param order order (hashed or unhashed)
 */
var orderToJSON = function (order) {
    var asJSON = {
        exchange: order.exchange.toLowerCase(),
        maker: order.maker.toLowerCase(),
        taker: order.taker.toLowerCase(),
        makerRelayerFee: order.makerRelayerFee.toString(),
        takerRelayerFee: order.takerRelayerFee.toString(),
        makerProtocolFee: order.makerProtocolFee.toString(),
        takerProtocolFee: order.takerProtocolFee.toString(),
        makerReferrerFee: order.makerReferrerFee.toString(),
        feeMethod: order.feeMethod,
        feeRecipient: order.feeRecipient.toLowerCase(),
        side: order.side,
        saleKind: order.saleKind,
        target: order.target.toLowerCase(),
        howToCall: order.howToCall,
        calldata: order.calldata,
        replacementPattern: order.replacementPattern,
        staticTarget: order.staticTarget.toLowerCase(),
        staticExtradata: order.staticExtradata,
        paymentToken: order.paymentToken.toLowerCase(),
        quantity: order.quantity.toString(),
        basePrice: order.basePrice.toString(),
        englishAuctionReservePrice: order.englishAuctionReservePrice ? order.englishAuctionReservePrice.toString() : undefined,
        extra: order.extra.toString(),
        createdTime: order.createdTime
            ? order.createdTime.toString()
            : undefined,
        listingTime: order.listingTime.toString(),
        expirationTime: order.expirationTime.toString(),
        salt: order.salt.toString(),
        metadata: order.metadata,
        v: order.v,
        r: order.r,
        s: order.s,
        hash: order.hash
    };
    return asJSON;
};
exports.orderToJSON = orderToJSON;
/**
 * Sign messages using web3 personal signatures
 * @param web3 Web3 instance
 * @param message message to sign
 * @param signerAddress web3 address signing the message
 * @returns A signature if provider can sign, otherwise null
 */
function personalSignAsync(web3, message, signerAddress) {
    return __awaiter(this, void 0, void 0, function () {
        var signature, error;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, promisify(function (c) { return web3.currentProvider.sendAsync({
                        method: 'personal_sign',
                        params: [message, signerAddress],
                        from: signerAddress,
                        id: new Date().getTime()
                    }, c); })];
                case 1:
                    signature = _a.sent();
                    error = signature.error;
                    if (error) {
                        throw new Error(error);
                    }
                    return [2 /*return*/, parseSignatureHex(signature.result)];
            }
        });
    });
}
exports.personalSignAsync = personalSignAsync;
/**
 * Checks whether a given address contains any code
 * @param web3 Web3 instance
 * @param address input address
 */
function isContractAddress(web3, address) {
    return __awaiter(this, void 0, void 0, function () {
        var code;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, promisify(function (c) { return web3.eth.getCode(address, c); })];
                case 1:
                    code = _a.sent();
                    return [2 /*return*/, code !== '0x'];
            }
        });
    });
}
exports.isContractAddress = isContractAddress;
/**
 * Special fixes for making BigNumbers using web3 results
 * @param arg An arg or the result of a web3 call to turn into a BigNumber
 */
function makeBigNumber(arg) {
    // Zero sometimes returned as 0x from contracts
    if (arg === '0x') {
        arg = 0;
    }
    // fix "new BigNumber() number type has more than 15 significant digits"
    arg = arg.toString();
    return new bignumber_js_1.default(arg);
}
exports.makeBigNumber = makeBigNumber;
/**
 * Send a transaction to the blockchain and optionally confirm it
 * @param web3 Web3 instance
 * @param param0 __namedParameters
 * @param from address sending transaction
 * @param to destination contract address
 * @param data data to send to contract
 * @param gasPrice gas price to use. If unspecified, uses web3 default (mean gas price)
 * @param value value in ETH to send with data. Defaults to 0
 * @param onError callback when user denies transaction
 */
function sendRawTransaction(web3, _a, onError) {
    var from = _a.from, to = _a.to, data = _a.data, gasPrice = _a.gasPrice, _b = _a.value, value = _b === void 0 ? 0 : _b, gas = _a.gas;
    return __awaiter(this, void 0, void 0, function () {
        var txHashRes, error_2;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!(gas == null)) return [3 /*break*/, 2];
                    return [4 /*yield*/, estimateGas(web3, { from: from, to: to, data: data, value: value })];
                case 1:
                    // This gas cannot be increased due to an ethjs error
                    gas = _c.sent();
                    _c.label = 2;
                case 2:
                    _c.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, promisify(function (c) { return web3.eth.sendTransaction({
                            from: from,
                            to: to,
                            value: value,
                            data: data,
                            gas: gas,
                            gasPrice: gasPrice
                        }, c); })];
                case 3:
                    txHashRes = _c.sent();
                    return [2 /*return*/, txHashRes.toString()];
                case 4:
                    error_2 = _c.sent();
                    onError(error_2);
                    throw error_2;
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.sendRawTransaction = sendRawTransaction;
/**
 * Call a method on a contract, sending arbitrary data and
 * handling Parity errors. Returns '0x' if error.
 * @param web3 Web3 instance
 * @param param0 __namedParameters
 * @param from address sending call
 * @param to destination contract address
 * @param data data to send to contract
 * @param onError callback when user denies transaction
 */
function rawCall(web3, _a, onError) {
    var from = _a.from, to = _a.to, data = _a.data;
    return __awaiter(this, void 0, void 0, function () {
        var result, error_3;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, promisify(function (c) { return web3.eth.call({
                            from: from,
                            to: to,
                            data: data
                        }, c); })];
                case 1:
                    result = _b.sent();
                    return [2 /*return*/, result];
                case 2:
                    error_3 = _b.sent();
                    // Probably method not found, and web3 is a Parity node
                    if (onError) {
                        onError(error_3);
                    }
                    // Backwards compatibility with Geth nodes
                    return [2 /*return*/, '0x'];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.rawCall = rawCall;
/**
 * Estimate Gas usage for a transaction
 * @param web3 Web3 instance
 * @param from address sending transaction
 * @param to destination contract address
 * @param data data to send to contract
 * @param value value in ETH to send with data
 */
function estimateGas(web3, _a) {
    var from = _a.from, to = _a.to, data = _a.data, _b = _a.value, value = _b === void 0 ? 0 : _b;
    return __awaiter(this, void 0, void 0, function () {
        var amount;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, promisify(function (c) { return web3.eth.estimateGas({
                        from: from,
                        to: to,
                        value: value,
                        data: data,
                    }, c); })];
                case 1:
                    amount = _c.sent();
                    return [2 /*return*/, amount];
            }
        });
    });
}
exports.estimateGas = estimateGas;
/**
 * Get mean gas price for sending a txn, in wei
 * @param web3 Web3 instance
 */
function getCurrentGasPrice(web3) {
    return __awaiter(this, void 0, void 0, function () {
        var meanGas;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, promisify(function (c) { return web3.eth.getGasPrice(c); })];
                case 1:
                    meanGas = _a.sent();
                    return [2 /*return*/, meanGas];
            }
        });
    });
}
exports.getCurrentGasPrice = getCurrentGasPrice;
/**
 * Get current transfer fees for an asset
 * @param web3 Web3 instance
 * @param asset The asset to check for transfer fees
 */
function getTransferFeeSettings(web3, _a) {
    var asset = _a.asset, accountAddress = _a.accountAddress;
    return __awaiter(this, void 0, void 0, function () {
        var transferFee, transferFeeTokenAddress, feeContract_1, params;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(asset.tokenAddress.toLowerCase() == constants_1.ENJIN_ADDRESS.toLowerCase())) return [3 /*break*/, 2];
                    feeContract_1 = web3.eth.contract(contracts_1.ERC1155).at(asset.tokenAddress);
                    return [4 /*yield*/, promisifyCall(function (c) { return feeContract_1.transferSettings(asset.tokenId, { from: accountAddress }, c); })];
                case 1:
                    params = _b.sent();
                    if (params) {
                        transferFee = makeBigNumber(params[3]);
                        if (params[2] == 0) {
                            transferFeeTokenAddress = constants_1.ENJIN_COIN_ADDRESS;
                        }
                    }
                    _b.label = 2;
                case 2: return [2 /*return*/, { transferFee: transferFee, transferFeeTokenAddress: transferFeeTokenAddress }];
            }
        });
    });
}
exports.getTransferFeeSettings = getTransferFeeSettings;
// sourced from 0x.js:
// https://github.com/ProjectWyvern/wyvern-js/blob/39999cb93ce5d80ea90b4382182d1bd4339a9c6c/src/utils/signature_utils.ts
function parseSignatureHex(signature) {
    // HACK: There is no consensus on whether the signatureHex string should be formatted as
    // v + r + s OR r + s + v, and different clients (even different versions of the same client)
    // return the signature params in different orders. In order to support all client implementations,
    // we parse the signature in both ways, and evaluate if either one is a valid signature.
    var validVParamValues = [27, 28];
    var ecSignatureRSV = _parseSignatureHexAsRSV(signature);
    if (_.includes(validVParamValues, ecSignatureRSV.v)) {
        return ecSignatureRSV;
    }
    // For older clients
    var ecSignatureVRS = _parseSignatureHexAsVRS(signature);
    if (_.includes(validVParamValues, ecSignatureVRS.v)) {
        return ecSignatureVRS;
    }
    throw new Error('Invalid signature');
    function _parseSignatureHexAsVRS(signatureHex) {
        var signatureBuffer = ethUtil.toBuffer(signatureHex);
        var v = signatureBuffer[0];
        if (v < 27) {
            v += 27;
        }
        var r = signatureBuffer.slice(1, 33);
        var s = signatureBuffer.slice(33, 65);
        var ecSignature = {
            v: v,
            r: ethUtil.bufferToHex(r),
            s: ethUtil.bufferToHex(s),
        };
        return ecSignature;
    }
    function _parseSignatureHexAsRSV(signatureHex) {
        var _a = ethUtil.fromRpcSig(signatureHex), v = _a.v, r = _a.r, s = _a.s;
        var ecSignature = {
            v: v,
            r: ethUtil.bufferToHex(r),
            s: ethUtil.bufferToHex(s),
        };
        return ecSignature;
    }
}
/**
 * Estimates the price of an order
 * @param order The order to estimate price on
 * @param secondsToBacktrack The number of seconds to subtract on current time,
 *  to fix race conditions
 * @param shouldRoundUp Whether to round up fractional wei
 */
function estimateCurrentPrice(order, secondsToBacktrack, shouldRoundUp) {
    if (secondsToBacktrack === void 0) { secondsToBacktrack = 30; }
    if (shouldRoundUp === void 0) { shouldRoundUp = true; }
    var basePrice = order.basePrice, listingTime = order.listingTime, expirationTime = order.expirationTime, extra = order.extra;
    var side = order.side, takerRelayerFee = order.takerRelayerFee, saleKind = order.saleKind;
    var now = new bignumber_js_1.default(Math.round(Date.now() / 1000)).minus(secondsToBacktrack);
    basePrice = new bignumber_js_1.default(basePrice);
    listingTime = new bignumber_js_1.default(listingTime);
    expirationTime = new bignumber_js_1.default(expirationTime);
    extra = new bignumber_js_1.default(extra);
    var exactPrice = basePrice;
    if (saleKind === types_2.SaleKind.FixedPrice) {
        // Do nothing, price is correct
    }
    else if (saleKind === types_2.SaleKind.DutchAuction) {
        var diff = extra.times(now.minus(listingTime))
            .dividedBy(expirationTime.minus(listingTime));
        exactPrice = side == types_2.OrderSide.Sell
            /* Sell-side - start price: basePrice. End price: basePrice - extra. */
            ? basePrice.minus(diff)
            /* Buy-side - start price: basePrice. End price: basePrice + extra. */
            : basePrice.plus(diff);
    }
    // Add taker fee only for buyers
    if (side === types_2.OrderSide.Sell && !order.waitingForBestCounterOrder) {
        // Buyer fee increases sale price
        exactPrice = exactPrice.times(+takerRelayerFee / constants_1.INVERSE_BASIS_POINT + 1);
    }
    return shouldRoundUp ? exactPrice.ceil() : exactPrice;
}
exports.estimateCurrentPrice = estimateCurrentPrice;
/**
 * Get the Wyvern representation of a fungible asset
 * @param schema The WyvernSchema needed to access this asset
 * @param asset The asset to trade
 * @param quantity The number of items to trade
 */
function getWyvernAsset(schema, asset, quantity) {
    if (quantity === void 0) { quantity = new bignumber_js_1.default(1); }
    var tokenId = asset.tokenId != null
        ? asset.tokenId.toString()
        : undefined;
    return schema.assetFromFields({
        'ID': tokenId,
        'Quantity': quantity.toString(),
        'Address': asset.tokenAddress.toLowerCase(),
        'Name': asset.name
    });
}
exports.getWyvernAsset = getWyvernAsset;
/**
 * Get the Wyvern representation of a group of assets
 * Sort order is enforced here. Throws if there's a duplicate.
 * @param assets Assets to bundle
 * @param schemas The WyvernSchemas needed to access each asset, respectively
 * @param quantities The quantity of each asset to bundle, respectively
 */
function getWyvernBundle(assets, schemas, quantities) {
    if (assets.length != quantities.length) {
        throw new Error("Bundle must have a quantity for every asset");
    }
    if (assets.length != schemas.length) {
        throw new Error("Bundle must have a schema for every asset");
    }
    var wyAssets = assets.map(function (asset, i) { return getWyvernAsset(schemas[i], asset, quantities[i]); });
    var sorters = [
        function (assetAndSchema) { return assetAndSchema.asset.address; },
        function (assetAndSchema) { return assetAndSchema.asset.id || 0; }
    ];
    var wyAssetsAndSchemas = wyAssets.map(function (asset, i) { return ({
        asset: asset,
        schema: schemas[i].name
    }); });
    var uniqueAssets = _.uniqBy(wyAssetsAndSchemas, function (group) { return sorters[0](group) + "-" + sorters[1](group); });
    if (uniqueAssets.length != wyAssetsAndSchemas.length) {
        throw new Error("Bundle can't contain duplicate assets");
    }
    var sortedWyAssetsAndSchemas = _.sortBy(wyAssetsAndSchemas, sorters);
    return {
        assets: sortedWyAssetsAndSchemas.map(function (group) { return group.asset; }),
        schemas: sortedWyAssetsAndSchemas.map(function (group) { return group.schema; }),
    };
}
exports.getWyvernBundle = getWyvernBundle;
/**
 * Get the non-prefixed hash for the order
 * (Fixes a Wyvern typescript issue and casing issue)
 * @param order order to hash
 */
function getOrderHash(order) {
    var orderWithStringTypes = __assign(__assign({}, order), { maker: order.maker.toLowerCase(), taker: order.taker.toLowerCase(), feeRecipient: order.feeRecipient.toLowerCase(), side: order.side.toString(), saleKind: order.saleKind.toString(), howToCall: order.howToCall.toString(), feeMethod: order.feeMethod.toString() });
    return wyvern_js_1.WyvernProtocol.getOrderHashHex(orderWithStringTypes);
}
exports.getOrderHash = getOrderHash;
/**
 * Assign an order and a new matching order to their buy/sell sides
 * @param order Original order
 * @param matchingOrder The result of _makeMatchingOrder
 */
function assignOrdersToSides(order, matchingOrder) {
    var isSellOrder = order.side == types_2.OrderSide.Sell;
    var buy;
    var sell;
    if (!isSellOrder) {
        buy = order;
        sell = __assign(__assign({}, matchingOrder), { v: buy.v, r: buy.r, s: buy.s });
    }
    else {
        sell = order;
        buy = __assign(__assign({}, matchingOrder), { v: sell.v, r: sell.r, s: sell.s });
    }
    return { buy: buy, sell: sell };
}
exports.assignOrdersToSides = assignOrdersToSides;
// BROKEN
// TODO fix this calldata for buy orders
function canSettleOrder(client, order, matchingOrder) {
    return __awaiter(this, void 0, void 0, function () {
        var calldata, seller, proxy, contract;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    calldata = order.calldata.slice(0, 98) + "1111111111111111111111111111111111111111" + order.calldata.slice(138);
                    seller = order.side == types_2.OrderSide.Buy ? matchingOrder.maker : order.maker;
                    return [4 /*yield*/, client._getProxy(seller)];
                case 1:
                    proxy = _a.sent();
                    if (!proxy) {
                        console.warn("No proxy found for seller " + seller);
                        return [2 /*return*/, false];
                    }
                    contract = (client.web3.eth.contract([Proxy_1.proxyABI])).at(proxy);
                    return [2 /*return*/, promisify(function (c) {
                            return contract.proxy.call(order.target, order.howToCall, calldata, { from: seller }, c);
                        })];
            }
        });
    });
}
/**
 * Delay using setTimeout
 * @param ms milliseconds to wait
 */
function delay(ms) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (res) { return setTimeout(res, ms); })];
        });
    });
}
exports.delay = delay;
/**
 * Validates that an address exists, isn't null, and is properly
 * formatted for Wyvern and OpenSea
 * @param address input address
 */
function validateAndFormatWalletAddress(web3, address) {
    if (!address) {
        throw new Error('No wallet address found');
    }
    if (!web3.isAddress(address)) {
        throw new Error('Invalid wallet address');
    }
    if (address == constants_1.NULL_ADDRESS) {
        throw new Error('Wallet cannot be the null address');
    }
    return address.toLowerCase();
}
exports.validateAndFormatWalletAddress = validateAndFormatWalletAddress;
/**
 * Notify developer when a pattern will be deprecated
 * @param msg message to log to console
 */
function onDeprecated(msg) {
    console.warn("DEPRECATION NOTICE: " + msg);
}
exports.onDeprecated = onDeprecated;
/**
 * Get special-case approval addresses for an erc721 contract
 * @param erc721Contract contract to check
 */
function getNonCompliantApprovalAddress(erc721Contract, tokenId, accountAddress) {
    return __awaiter(this, void 0, void 0, function () {
        var results;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.all([
                        // CRYPTOKITTIES check
                        promisifyCall(function (c) { return erc721Contract.kittyIndexToApproved.call(tokenId, c); }),
                        // Etherbots check
                        promisifyCall(function (c) { return erc721Contract.partIndexToApproved.call(tokenId, c); }),
                    ])];
                case 1:
                    results = _a.sent();
                    return [2 /*return*/, _.compact(results)[0]];
            }
        });
    });
}
exports.getNonCompliantApprovalAddress = getNonCompliantApprovalAddress;
//# sourceMappingURL=utils.js.map
'''
'''--- package-lock.json ---
{
  "name": "opensea-js",
  "version": "1.2.0",
  "lockfileVersion": 1,
  "requires": true,
  "dependencies": {
    "0x.js": {
      "version": "0.29.2",
      "resolved": "https://registry.npmjs.org/0x.js/-/0x.js-0.29.2.tgz",
      "integrity": "sha512-KG7VED+NVCM2PetW9Nj4+6eflm7ANrUn2+7fMdvHHrSV24Pnz1dgnyFFttFp8gp4CUlQuByBWsvyRo6A8kpmyg==",
      "requires": {
        "@0xproject/assert": "^0.0.10",
        "@0xproject/json-schemas": "^0.7.2",
        "@0xproject/utils": "^0.1.3",
        "@0xproject/web3-wrapper": "^0.1.4",
        "bintrees": "^1.0.2",
        "bn.js": "^4.11.8",
        "compare-versions": "^3.0.1",
        "ethereumjs-abi": "^0.6.4",
        "ethereumjs-blockstream": "^2.0.6",
        "ethereumjs-util": "^5.1.1",
        "find-versions": "^2.0.0",
        "js-sha3": "^0.6.1",
        "lodash": "^4.17.4",
        "uuid": "^3.1.0",
        "web3": "^0.20.0"
      },
      "dependencies": {
        "@0xproject/assert": {
          "version": "0.0.10",
          "resolved": "https://registry.npmjs.org/@0xproject/assert/-/assert-0.0.10.tgz",
          "integrity": "sha512-ixOh0WCMz6iukuzBiMbqD3zz5aNV0WoP65i3Wh+pjCtnbN58u6+Fz1Is6UHqblbLpVOEloAsc38mx3J2vdFTSA==",
          "requires": {
            "@0xproject/json-schemas": "^0.7.2",
            "@0xproject/utils": "^0.1.3",
            "lodash": "^4.17.4",
            "valid-url": "^1.0.9"
          }
        },
        "ethereumjs-abi": {
          "version": "0.6.8",
          "resolved": "https://registry.npmjs.org/ethereumjs-abi/-/ethereumjs-abi-0.6.8.tgz",
          "integrity": "sha512-Tx0r/iXI6r+lRsdvkFDlut0N08jWMnKRZ6Gkq+Nmw75lZe4e6o3EkSnkaBP5NF6+m5PTGAr9JP43N3LyeoglsA==",
          "requires": {
            "bn.js": "^4.11.8",
            "ethereumjs-util": "^6.0.0"
          },
          "dependencies": {
            "ethereumjs-util": {
              "version": "6.2.1",
              "resolved": "https://registry.npmjs.org/ethereumjs-util/-/ethereumjs-util-6.2.1.tgz",
              "integrity": "sha512-W2Ktez4L01Vexijrm5EB6w7dg4n/TgpoYU4avuT5T3Vmnw/eCRtiBrJfQYS/DCSvDIOLn2k57GcHdeBcgVxAqw==",
              "requires": {
                "@types/bn.js": "^4.11.3",
                "bn.js": "^4.11.0",
                "create-hash": "^1.1.2",
                "elliptic": "^6.5.2",
                "ethereum-cryptography": "^0.1.3",
                "ethjs-util": "0.1.6",
                "rlp": "^2.2.3"
              }
            }
          }
        },
        "js-sha3": {
          "version": "0.6.1",
          "resolved": "https://registry.npmjs.org/js-sha3/-/js-sha3-0.6.1.tgz",
          "integrity": "sha1-W4n3enR3Z5h39YxKB1JAk0sflcA="
        }
      }
    },
    "@0xproject/abi-gen": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/@0xproject/abi-gen/-/abi-gen-0.1.7.tgz",
      "integrity": "sha512-mFFprGLVYHl9sD6PGwcAwTqncueqfau6wPGwJV7mQ/Vj3thMo17BY8xzpeSIkXjrdo6lZHlzyVUVrEA1krfjSw==",
      "requires": {
        "@0xproject/utils": "^0.3.0",
        "chalk": "^2.3.0",
        "glob": "^7.1.2",
        "handlebars": "^4.0.11",
        "lodash": "^4.17.4",
        "mkdirp": "^0.5.1",
        "to-snake-case": "^1.0.0",
        "web3": "^0.20.0",
        "yargs": "^10.0.3"
      },
      "dependencies": {
        "@0xproject/utils": {
          "version": "0.3.4",
          "resolved": "https://registry.npmjs.org/@0xproject/utils/-/utils-0.3.4.tgz",
          "integrity": "sha512-6rNzuZvY3PghEMcZBGzwGdyMBQ11DXXWWMF3Ar3ajRZvSIjPSLpO7cVXcQQOTnTksiSDLJn/kkaQHz8ZT9yJ+w==",
          "requires": {
            "bignumber.js": "~4.1.0",
            "js-sha3": "^0.7.0",
            "lodash": "^4.17.4",
            "web3": "^0.20.0"
          }
        },
        "ansi-regex": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz",
          "integrity": "sha1-7QMXwyIGT3lGbAKWa922Bas32Zg="
        },
        "camelcase": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-4.1.0.tgz",
          "integrity": "sha1-1UVjW+HjPFQmScaRc+Xeas+uNN0="
        },
        "cliui": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/cliui/-/cliui-4.1.0.tgz",
          "integrity": "sha512-4FG+RSG9DL7uEwRUZXZn3SS34DiDPfzP0VOiEwtUWlE+AR2EIg+hSyvrIgUUfhdgR/UkAeW2QHgeP+hWrXs7jQ==",
          "requires": {
            "string-width": "^2.1.1",
            "strip-ansi": "^4.0.0",
            "wrap-ansi": "^2.0.0"
          }
        },
        "strip-ansi": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz",
          "integrity": "sha1-qEeQIusaw2iocTibY1JixQXuNo8=",
          "requires": {
            "ansi-regex": "^3.0.0"
          }
        },
        "yargs": {
          "version": "10.1.2",
          "resolved": "https://registry.npmjs.org/yargs/-/yargs-10.1.2.tgz",
          "integrity": "sha512-ivSoxqBGYOqQVruxD35+EyCFDYNEFL/Uo6FcOnz+9xZdZzK0Zzw4r4KhbrME1Oo2gOggwJod2MnsdamSG7H9ig==",
          "requires": {
            "cliui": "^4.0.0",
            "decamelize": "^1.1.1",
            "find-up": "^2.1.0",
            "get-caller-file": "^1.0.1",
            "os-locale": "^2.0.0",
            "require-directory": "^2.1.1",
            "require-main-filename": "^1.0.1",
            "set-blocking": "^2.0.0",
            "string-width": "^2.0.0",
            "which-module": "^2.0.0",
            "y18n": "^3.2.1",
            "yargs-parser": "^8.1.0"
          }
        },
        "yargs-parser": {
          "version": "8.1.0",
          "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-8.1.0.tgz",
          "integrity": "sha512-yP+6QqN8BmrgW2ggLtTbdrOyBNSI7zBa4IykmiV5R1wl1JWNxQvWhMfMdmzIYtKU7oP3OOInY/tl2ov3BDjnJQ==",
          "requires": {
            "camelcase": "^4.1.0"
          }
        }
      }
    },
    "@0xproject/assert": {
      "version": "0.0.11",
      "resolved": "https://registry.npmjs.org/@0xproject/assert/-/assert-0.0.11.tgz",
      "integrity": "sha512-hl4C3w5qX7vbvPses/PtOlZg4tX/elXJ3RPuEOYvHNnBEOFybNSDsGrrPegPxkW56mZWBhwyBaqThTj9OoVmYQ==",
      "requires": {
        "@0xproject/json-schemas": "^0.7.3",
        "@0xproject/utils": "^0.2.0",
        "lodash": "^4.17.4",
        "valid-url": "^1.0.9"
      },
      "dependencies": {
        "@0xproject/utils": {
          "version": "0.2.4",
          "resolved": "https://registry.npmjs.org/@0xproject/utils/-/utils-0.2.4.tgz",
          "integrity": "sha512-Le2BDLybmEW+gt2VjbTgL0REDa+58CN4QA64VGUGBFueJ3IPqQQv6ctuZm9MkwW13ckXs+kR5nqgcfRnV1cDsg==",
          "requires": {
            "bignumber.js": "~4.1.0",
            "js-sha3": "^0.7.0",
            "lodash": "^4.17.4",
            "web3": "^0.20.0"
          }
        }
      }
    },
    "@0xproject/json-schemas": {
      "version": "0.7.24",
      "resolved": "https://registry.npmjs.org/@0xproject/json-schemas/-/json-schemas-0.7.24.tgz",
      "integrity": "sha1-IaErQ6sKtKowLQLEiRZozaNrbGQ=",
      "requires": {
        "@0xproject/typescript-typings": "^0.3.2",
        "@types/node": "^8.0.53",
        "jsonschema": "^1.2.0",
        "lodash.values": "^4.3.0"
      },
      "dependencies": {
        "@types/node": {
          "version": "8.10.66",
          "resolved": "https://registry.npmjs.org/@types/node/-/node-8.10.66.tgz",
          "integrity": "sha512-tktOkFUA4kXx2hhhrB8bIFb5TbwzS4uOhKEmwiD+NoiL0qtP2OQ9mFldbgD4dV1djrlBYP6eBuQZiWjuHUpqFw=="
        }
      }
    },
    "@0xproject/types": {
      "version": "0.1.9",
      "resolved": "https://registry.npmjs.org/@0xproject/types/-/types-0.1.9.tgz",
      "integrity": "sha512-msxltUG+kp1LEaoLzVR6a47Qc9nd69UzzYGm5xAvfdm5osNtiVWrL8MrCP0PolMN9sji/4H9PD1UESf0SKvI+g==",
      "requires": {
        "bignumber.js": "~4.1.0",
        "web3": "^0.20.0"
      }
    },
    "@0xproject/typescript-typings": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/@0xproject/typescript-typings/-/typescript-typings-0.3.2.tgz",
      "integrity": "sha1-q8NgtEGv2pkxAEUMqDad+r91k2s=",
      "requires": {
        "@0xproject/types": "^0.7.0",
        "bignumber.js": "~4.1.0"
      },
      "dependencies": {
        "@0xproject/types": {
          "version": "0.7.0",
          "resolved": "https://registry.npmjs.org/@0xproject/types/-/types-0.7.0.tgz",
          "integrity": "sha1-+tE5Je6SrU7hmAZopcsr7U3Kq48=",
          "requires": {
            "@types/node": "^8.0.53",
            "bignumber.js": "~4.1.0"
          }
        },
        "@types/node": {
          "version": "8.10.66",
          "resolved": "https://registry.npmjs.org/@types/node/-/node-8.10.66.tgz",
          "integrity": "sha512-tktOkFUA4kXx2hhhrB8bIFb5TbwzS4uOhKEmwiD+NoiL0qtP2OQ9mFldbgD4dV1djrlBYP6eBuQZiWjuHUpqFw=="
        }
      }
    },
    "@0xproject/utils": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@0xproject/utils/-/utils-0.1.3.tgz",
      "integrity": "sha512-lVuXcHe4cd68gG5HYQk7QPxtnkDpcdpMDiT3dNlcBYU68r8FbE4pGOmhUtdztQmJjHxmcEkH/G8yoAr/0DSzyQ==",
      "requires": {
        "bignumber.js": "~4.1.0",
        "js-sha3": "^0.7.0",
        "lodash": "^4.17.4"
      }
    },
    "@0xproject/web3-wrapper": {
      "version": "0.1.14",
      "resolved": "https://registry.npmjs.org/@0xproject/web3-wrapper/-/web3-wrapper-0.1.14.tgz",
      "integrity": "sha512-mO4ZaSwjWkcuuYnd75mrgj5xzzdSz5solGZar1XRJ6HY++IMWPOXnGYWImIkW6jK1l0HfYnvw7fBr2eAJCQYNA==",
      "requires": {
        "@0xproject/utils": "^0.3.4",
        "lodash": "^4.17.4",
        "web3": "^0.20.0"
      },
      "dependencies": {
        "@0xproject/utils": {
          "version": "0.3.4",
          "resolved": "https://registry.npmjs.org/@0xproject/utils/-/utils-0.3.4.tgz",
          "integrity": "sha512-6rNzuZvY3PghEMcZBGzwGdyMBQ11DXXWWMF3Ar3ajRZvSIjPSLpO7cVXcQQOTnTksiSDLJn/kkaQHz8ZT9yJ+w==",
          "requires": {
            "bignumber.js": "~4.1.0",
            "js-sha3": "^0.7.0",
            "lodash": "^4.17.4",
            "web3": "^0.20.0"
          }
        }
      }
    },
    "@babel/code-frame": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.8.3.tgz",
      "integrity": "sha512-a9gxpmdXtZEInkCSHUJDLHZVBgb1QS0jhss4cPP93EW7s+uC5bikET2twEF3KV+7rDblJcmNvTR7VJejqd2C2g==",
      "requires": {
        "@babel/highlight": "^7.8.3"
      }
    },
    "@babel/highlight": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.8.3.tgz",
      "integrity": "sha512-PX4y5xQUvy0fnEVHrYOarRPXVWafSjTW9T0Hab8gVIawpl2Sj0ORyrygANq+KjcNlSSTw0YCLSNA8OyZ1I4yEg==",
      "requires": {
        "chalk": "^2.0.0",
        "esutils": "^2.0.2",
        "js-tokens": "^4.0.0"
      }
    },
    "@babel/runtime": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.8.4.tgz",
      "integrity": "sha512-neAp3zt80trRVBI1x0azq6c57aNBqYZH8KhMm3TaB7wEI5Q4A2SHfBHE8w9gOhI/lrqxtEbXZgQIrHP+wvSGwQ==",
      "dev": true,
      "requires": {
        "regenerator-runtime": "^0.13.2"
      },
      "dependencies": {
        "regenerator-runtime": {
          "version": "0.13.3",
          "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.3.tgz",
          "integrity": "sha512-naKIZz2GQ8JWh///G7L3X6LaQUAMp2lvb1rvwwsURe/VXwD6VMfr+/1NuNw3ag8v2kY1aQ/go5SNn79O9JU7yw==",
          "dev": true
        }
      }
    },
    "@machinomy/types-safe-buffer": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/@machinomy/types-safe-buffer/-/types-safe-buffer-0.0.1.tgz",
      "integrity": "sha1-v4DZSizJC52EOHSao1Qtv3ofcrA=",
      "dev": true
    },
    "@types/bn.js": {
      "version": "4.11.6",
      "resolved": "https://registry.npmjs.org/@types/bn.js/-/bn.js-4.11.6.tgz",
      "integrity": "sha512-pqr857jrp2kPuO9uRjZ3PwnJTjoQy+fcdxvBTvHm6dkmEL9q+hDD/2j/0ELOBPtPnS8LjCX0gI9nbl8lVkadpg==",
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/chai": {
      "version": "4.2.9",
      "resolved": "https://registry.npmjs.org/@types/chai/-/chai-4.2.9.tgz",
      "integrity": "sha512-NeXgZj+MFL4izGqA4sapdYzkzQG+MtGra9vhQ58dnmDY++VgJaRUws+aLVV5zRJCYJl/8s9IjMmhiUw1WsKSmw==",
      "dev": true
    },
    "@types/color-name": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@types/color-name/-/color-name-1.1.1.tgz",
      "integrity": "sha512-rr+OQyAjxze7GgWrSaJwydHStIhHq2lvY3BOC2Mj7KnzI7XK0Uw1TOOdI9lDoajEbSWLiYgoo4f1R51erQfhPQ==",
      "dev": true
    },
    "@types/events": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/events/-/events-3.0.0.tgz",
      "integrity": "sha512-EaObqwIvayI5a8dCzhFrjKzVwKLxjoG9T6Ppd5CEo07LRKfQ8Yokw54r5+Wq7FaBQ+yXRvQAYPrHwya1/UFt9g==",
      "dev": true
    },
    "@types/fbemitter": {
      "version": "2.0.32",
      "resolved": "https://registry.npmjs.org/@types/fbemitter/-/fbemitter-2.0.32.tgz",
      "integrity": "sha1-jtIE2g9U6cjq7DGx7skeJRMtCCw=",
      "dev": true
    },
    "@types/fs-extra": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/@types/fs-extra/-/fs-extra-5.0.1.tgz",
      "integrity": "sha512-h3wnflb+jMTipvbbZnClgA2BexrT4w0GcfoCz5qyxd0IRsbqhLSyesM6mqZTAnhbVmhyTm5tuxfRu9R+8l+lGw==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/glob": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/@types/glob/-/glob-7.1.1.tgz",
      "integrity": "sha512-1Bh06cbWJUHMC97acuD6UMG29nMt0Aqz1vF3guLfG+kHHJhy3AyohZFFxYk2f7Q1SQIrNwvncxAE0N/9s70F2w==",
      "dev": true,
      "requires": {
        "@types/events": "*",
        "@types/minimatch": "*",
        "@types/node": "*"
      }
    },
    "@types/handlebars": {
      "version": "4.0.36",
      "resolved": "https://registry.npmjs.org/@types/handlebars/-/handlebars-4.0.36.tgz",
      "integrity": "sha512-LjNiTX7TY7wtuC6y3QwC93hKMuqYhgV9A1uXBKNvZtVC8ZvyWAjZkJ5BvT0K7RKqORRYRLMrqCxpw5RgS+MdrQ==",
      "dev": true
    },
    "@types/highlight.js": {
      "version": "9.12.2",
      "resolved": "https://registry.npmjs.org/@types/highlight.js/-/highlight.js-9.12.2.tgz",
      "integrity": "sha512-y5x0XD/WXDaGSyiTaTcKS4FurULJtSiYbGTeQd0m2LYZGBcZZ/7fM6t5H/DzeUF+kv8y6UfmF6yJABQsHcp9VQ==",
      "dev": true
    },
    "@types/lodash": {
      "version": "4.14.149",
      "resolved": "https://registry.npmjs.org/@types/lodash/-/lodash-4.14.149.tgz",
      "integrity": "sha512-ijGqzZt/b7BfzcK9vTrS6MFljQRPn5BFWOx8oE0GYxribu6uV+aA9zZuXI1zc/etK9E8nrgdoF2+LgUw7+9tJQ=="
    },
    "@types/marked": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@types/marked/-/marked-0.3.0.tgz",
      "integrity": "sha512-CSf9YWJdX1DkTNu9zcNtdCcn6hkRtB5ILjbhRId4ZOQqx30fXmdecuaXhugQL6eyrhuXtaHJ7PHI+Vm7k9ZJjg==",
      "dev": true
    },
    "@types/minimatch": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@types/minimatch/-/minimatch-3.0.3.tgz",
      "integrity": "sha512-tHq6qdbT9U1IRSGf14CL0pUlULksvY9OZ+5eEgl1N7t+OA3tGvNpxJCzuKQlsNgCVwbAs670L1vcVQi8j9HjnA==",
      "dev": true
    },
    "@types/mocha": {
      "version": "5.2.7",
      "resolved": "https://registry.npmjs.org/@types/mocha/-/mocha-5.2.7.tgz",
      "integrity": "sha512-NYrtPht0wGzhwe9+/idPaBB+TqkY9AhTvOLMkThm0IoEfLaiVQZwBwyJ5puCkO3AUCWrmcoePjp2mbFocKy4SQ==",
      "dev": true
    },
    "@types/node": {
      "version": "9.6.55",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-9.6.55.tgz",
      "integrity": "sha512-e/5tg8Ok0gSrN6pvHphnwTK0/CD9VPZrtZqpvvpEFAtfs+ZntusgGaWkf2lSEq1OFe2EDPeUMiMVpy4nZpJ4AQ=="
    },
    "@types/node-fetch": {
      "version": "2.5.5",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.5.5.tgz",
      "integrity": "sha512-IWwjsyYjGw+em3xTvWVQi5MgYKbRs0du57klfTaZkv/B24AEQ/p/IopNeqIYNy3EsfHOpg8ieQSDomPcsYMHpA==",
      "dev": true,
      "requires": {
        "@types/node": "*",
        "form-data": "^3.0.0"
      },
      "dependencies": {
        "form-data": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.0.tgz",
          "integrity": "sha512-CKMFDglpbMi6PyN+brwB9Q/GOw0eAnsrEZDgcsH5Krhz5Od/haKHAX0NmQfha2zPPz0JpWzA7GJHGSnvCRLWsg==",
          "dev": true,
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        }
      }
    },
    "@types/parse-json": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/@types/parse-json/-/parse-json-4.0.0.tgz",
      "integrity": "sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA==",
      "dev": true
    },
    "@types/pbkdf2": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@types/pbkdf2/-/pbkdf2-3.1.0.tgz",
      "integrity": "sha512-Cf63Rv7jCQ0LaL8tNXmEyqTHuIJxRdlS5vMh1mj5voN4+QFhVZnlZruezqpWYDiJ8UTzhP0VmeLXCmBk66YrMQ==",
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/query-string": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/@types/query-string/-/query-string-6.3.0.tgz",
      "integrity": "sha512-yuIv/WRffRzL7cBW+sla4HwBZrEXRNf1MKQ5SklPEadth+BKbDxiVG8A3iISN5B3yC4EeSCzMZP8llHTcUhOzQ==",
      "dev": true,
      "requires": {
        "query-string": "*"
      }
    },
    "@types/secp256k1": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@types/secp256k1/-/secp256k1-4.0.1.tgz",
      "integrity": "sha512-+ZjSA8ELlOp8SlKi0YLB2tz9d5iPNEmOBd+8Rz21wTMdaXQIa9b6TEnD6l5qKOCypE7FSyPyck12qZJxSDNoog==",
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/shelljs": {
      "version": "0.7.8",
      "resolved": "https://registry.npmjs.org/@types/shelljs/-/shelljs-0.7.8.tgz",
      "integrity": "sha512-M2giRw93PxKS7YjU6GZjtdV9HASdB7TWqizBXe4Ju7AqbKlWvTr0gNO92XH56D/gMxqD/jNHLNfC5hA34yGqrQ==",
      "dev": true,
      "requires": {
        "@types/glob": "*",
        "@types/node": "*"
      }
    },
    "abstract-leveldown": {
      "version": "2.6.3",
      "resolved": "https://registry.npmjs.org/abstract-leveldown/-/abstract-leveldown-2.6.3.tgz",
      "integrity": "sha512-2++wDf/DYqkPR3o5tbfdhF96EfMApo1GpPfzOsR/ZYXdkSmELlvOOEAl9iKkRsktMPHdGjO4rtkBpf2I7TiTeA==",
      "requires": {
        "xtend": "~4.0.0"
      }
    },
    "acorn": {
      "version": "5.7.3",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-5.7.3.tgz",
      "integrity": "sha512-T/zvzYRfbVojPWahDsE5evJdHb3oJoQfFbsrKM7w5Zcs++Tr257tia3BmMP8XYVjp1S9RZXQMh7gao96BlqZOw=="
    },
    "acorn-dynamic-import": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/acorn-dynamic-import/-/acorn-dynamic-import-2.0.2.tgz",
      "integrity": "sha1-x1K9IQvvZ5UBtsbLf8hPj0cVjMQ=",
      "requires": {
        "acorn": "^4.0.3"
      },
      "dependencies": {
        "acorn": {
          "version": "4.0.13",
          "resolved": "https://registry.npmjs.org/acorn/-/acorn-4.0.13.tgz",
          "integrity": "sha1-EFSVrlNh1pe9GVyCUZLhrX8lN4c="
        }
      }
    },
    "ajv": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.11.0.tgz",
      "integrity": "sha512-nCprB/0syFYy9fVYU1ox1l2KN8S9I+tziH8D4zdZuLT3N6RMlGSGt5FSTpAiHB/Whv8Qs1cWHma1aMKZyaHRKA==",
      "requires": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      }
    },
    "ajv-keywords": {
      "version": "3.4.1",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-3.4.1.tgz",
      "integrity": "sha512-RO1ibKvd27e6FEShVFfPALuHI3WjSVNeK5FIsmme/LYRNxjKuNj+Dt7bucLa6NdSv3JcVTyMlm9kGR84z1XpaQ=="
    },
    "align-text": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/align-text/-/align-text-0.1.4.tgz",
      "integrity": "sha1-DNkKVhCT810KmSVsIrcGlDP60Rc=",
      "requires": {
        "kind-of": "^3.0.2",
        "longest": "^1.0.1",
        "repeat-string": "^1.5.2"
      }
    },
    "ansi-regex": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz",
      "integrity": "sha1-w7M6te42DYbg5ijwRorn7yfWVN8="
    },
    "ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "requires": {
        "color-convert": "^1.9.0"
      }
    },
    "anymatch": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-2.0.0.tgz",
      "integrity": "sha512-5teOsQWABXHHBFP9y3skS5P3d/WfWXpv3FUpy+LorMrNYaT9pI4oLMQX7jzQ2KklNpGpWHzdCXTDT2Y3XGlZBw==",
      "requires": {
        "micromatch": "^3.1.4",
        "normalize-path": "^2.1.1"
      },
      "dependencies": {
        "normalize-path": {
          "version": "2.1.1",
          "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-2.1.1.tgz",
          "integrity": "sha1-GrKLVW4Zg2Oowab35vogE3/mrtk=",
          "requires": {
            "remove-trailing-separator": "^1.0.1"
          }
        }
      }
    },
    "argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "requires": {
        "sprintf-js": "~1.0.2"
      }
    },
    "arr-diff": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/arr-diff/-/arr-diff-4.0.0.tgz",
      "integrity": "sha1-1kYQdP6/7HHn4VI1dhoyml3HxSA="
    },
    "arr-flatten": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/arr-flatten/-/arr-flatten-1.1.0.tgz",
      "integrity": "sha512-L3hKV5R/p5o81R7O02IGnwpDmkp6E982XhtbuwSe3O4qOtMMMtodicASA1Cny2U+aCXcNpml+m4dPsvsJ3jatg=="
    },
    "arr-union": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/arr-union/-/arr-union-3.1.0.tgz",
      "integrity": "sha1-45sJrqne+Gao8gbiiK9jkZuuOcQ="
    },
    "array-uniq": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/array-uniq/-/array-uniq-1.0.3.tgz",
      "integrity": "sha1-r2rId6Jcx/dOBYiUdThY39sk/bY="
    },
    "array-unique": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/array-unique/-/array-unique-0.3.2.tgz",
      "integrity": "sha1-qJS3XUvE9s1nnvMkSp/Y9Gri1Cg="
    },
    "arrify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-1.0.1.tgz",
      "integrity": "sha1-iYUI2iIm84DfkEcoRWhJwVAaSw0="
    },
    "asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha1-5QNHYR1+aQlDIIu9r+vLwvuGbUY="
    },
    "asn1": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.4.tgz",
      "integrity": "sha512-jxwzQpLQjSmWXgwaCZE9Nz+glAG01yF1QnWgbhGwHI5A6FRIEY6IVqtHhIepHqI7/kyEyQEagBC5mBEFlIYvdg==",
      "requires": {
        "safer-buffer": "~2.1.0"
      }
    },
    "asn1.js": {
      "version": "4.10.1",
      "resolved": "https://registry.npmjs.org/asn1.js/-/asn1.js-4.10.1.tgz",
      "integrity": "sha512-p32cOF5q0Zqs9uBiONKYLm6BClCoBCM5O9JfeUSlnQLBTxYdTK+pW+nXflm8UkKd2UYlEbYz5qEi0JuZR9ckSw==",
      "requires": {
        "bn.js": "^4.0.0",
        "inherits": "^2.0.1",
        "minimalistic-assert": "^1.0.0"
      }
    },
    "assert": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/assert/-/assert-1.5.0.tgz",
      "integrity": "sha512-EDsgawzwoun2CZkCgtxJbv392v4nbk9XDD06zI+kQYoBM/3RBWLlEyJARDOmhAAosBjWACEkKL6S+lIZtcAubA==",
      "requires": {
        "object-assign": "^4.1.1",
        "util": "0.10.3"
      },
      "dependencies": {
        "inherits": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.1.tgz",
          "integrity": "sha1-sX0I0ya0Qj5Wjv9xn5GwscvfafE="
        },
        "util": {
          "version": "0.10.3",
          "resolved": "https://registry.npmjs.org/util/-/util-0.10.3.tgz",
          "integrity": "sha1-evsa/lCAUkZInj23/g7TeTNqwPk=",
          "requires": {
            "inherits": "2.0.1"
          }
        }
      }
    },
    "assert-plus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
      "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU="
    },
    "assertion-error": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/assertion-error/-/assertion-error-1.1.0.tgz",
      "integrity": "sha512-jgsaNduz+ndvGyFt3uSuWqvy4lCnIJiovtouQN5JZHOKCS2QuhEdbcQHFhVksz2N2U9hXJo8odG7ETyWlEeuDw==",
      "dev": true
    },
    "assign-symbols": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assign-symbols/-/assign-symbols-1.0.0.tgz",
      "integrity": "sha1-WWZ/QfrdTyDMvCu5a41Pf3jsA2c="
    },
    "async": {
      "version": "2.6.3",
      "resolved": "https://registry.npmjs.org/async/-/async-2.6.3.tgz",
      "integrity": "sha512-zflvls11DCy+dQWzTW2dzuilv8Z5X/pjfmZOWba6TNIVDm+2UDaJmXSOXlasHKfNBs8oo3M0aT50fDEWfKZjXg==",
      "requires": {
        "lodash": "^4.17.14"
      }
    },
    "async-each": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/async-each/-/async-each-1.0.3.tgz",
      "integrity": "sha512-z/WhQ5FPySLdvREByI2vZiTWwCnF0moMJ1hK9YQwDTHKh6I7/uSckMetoRGb5UBZPC1z0jlw+n/XCgjeH7y1AQ=="
    },
    "async-eventemitter": {
      "version": "github:ahultgren/async-eventemitter#fa06e39e56786ba541c180061dbf2c0a5bbf951c",
      "from": "github:ahultgren/async-eventemitter#fa06e39e56786ba541c180061dbf2c0a5bbf951c",
      "requires": {
        "async": "^2.4.0"
      }
    },
    "asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha1-x57Zf380y48robyXkLzDZkdLS3k="
    },
    "atob": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/atob/-/atob-2.1.2.tgz",
      "integrity": "sha512-Wm6ukoaOGJi/73p/cl2GvLjTI5JM1k/O14isD73YML8StrH/7/lRFgmg8nICZgD3bZZvjwCGxtMOD3wWNAu8cg=="
    },
    "awesome-typescript-loader": {
      "version": "3.5.0",
      "resolved": "https://registry.npmjs.org/awesome-typescript-loader/-/awesome-typescript-loader-3.5.0.tgz",
      "integrity": "sha512-qzgm9SEvodVkSi9QY7Me1/rujg+YBNMjayNSAyzNghwTEez++gXoPCwMvpbHRG7wrOkDCiF6dquvv9ESmUBAuw==",
      "requires": {
        "chalk": "^2.3.1",
        "enhanced-resolve": "3.3.0",
        "loader-utils": "^1.1.0",
        "lodash": "^4.17.4",
        "micromatch": "^3.0.3",
        "mkdirp": "^0.5.1",
        "source-map-support": "^0.5.3"
      },
      "dependencies": {
        "enhanced-resolve": {
          "version": "3.3.0",
          "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-3.3.0.tgz",
          "integrity": "sha512-2qbxE7ek3YxPJ1ML6V+satHkzHpJQKWkRHmRx6mfAoW59yP8YH8BFplbegSP+u2hBd6B6KCOpvJQ3dZAP+hkpg==",
          "requires": {
            "graceful-fs": "^4.1.2",
            "memory-fs": "^0.4.0",
            "object-assign": "^4.0.1",
            "tapable": "^0.2.5"
          }
        },
        "source-map": {
          "version": "0.6.1",
          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
          "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="
        },
        "source-map-support": {
          "version": "0.5.19",
          "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.19.tgz",
          "integrity": "sha512-Wonm7zOCIJzBGQdB+thsPar0kYuCIzYvxZwlBa87yi/Mdjv7Tip2cyVbLj5o0cFPN4EVkuTwb3GDDyUx2DGnGw==",
          "requires": {
            "buffer-from": "^1.0.0",
            "source-map": "^0.6.0"
          }
        }
      }
    },
    "aws-sign2": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
      "integrity": "sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg="
    },
    "aws4": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.11.0.tgz",
      "integrity": "sha512-xh1Rl34h6Fi1DC2WWKfxUTVqRsNnr6LsKz2+hfwDxQJWmrx8+c7ylaqBMcHfl1U1r2dsifOvKX3LQuLNZ+XSvA=="
    },
    "axios": {
      "version": "0.17.1",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.17.1.tgz",
      "integrity": "sha1-LY4+XQvb1zJ/kbyBT1xXZg+Bgk0=",
      "requires": {
        "follow-redirects": "^1.2.5",
        "is-buffer": "^1.1.5"
      }
    },
    "babel-code-frame": {
      "version": "6.26.0",
      "resolved": "https://registry.npmjs.org/babel-code-frame/-/babel-code-frame-6.26.0.tgz",
      "integrity": "sha1-Y/1D99weO7fONZR9uP42mj9Yx0s=",
      "requires": {
        "chalk": "^1.1.3",
        "esutils": "^2.0.2",
        "js-tokens": "^3.0.2"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "2.2.1",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-2.2.1.tgz",
          "integrity": "sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4="
        },
        "chalk": {
          "version": "1.1.3",
          "resolved": "https://registry.npmjs.org/chalk/-/chalk-1.1.3.tgz",
          "integrity": "sha1-qBFcVeSnAv5NFQq9OHKCKn4J/Jg=",
          "requires": {
            "ansi-styles": "^2.2.1",
            "escape-string-regexp": "^1.0.2",
            "has-ansi": "^2.0.0",
            "strip-ansi": "^3.0.0",
            "supports-color": "^2.0.0"
          }
        },
        "js-tokens": {
          "version": "3.0.2",
          "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-3.0.2.tgz",
          "integrity": "sha1-mGbfOVECEw449/mWvOtlRDIJwls="
        },
        "supports-color": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-2.0.0.tgz",
          "integrity": "sha1-U10EXOa2Nj+kARcIRimZXp3zJMc="
        }
      }
    },
    "babel-core": {
      "version": "6.26.3",
      "resolved": "https://registry.npmjs.org/babel-core/-/babel-core-6.26.3.tgz",
      "integrity": "sha512-6jyFLuDmeidKmUEb3NM+/yawG0M2bDZ9Z1qbZP59cyHLz8kYGKYwpJP0UwUKKUiTRNvxfLesJnTedqczP7cTDA==",
      "requires": {
        "babel-code-frame": "^6.26.0",
        "babel-generator": "^6.26.0",
        "babel-helpers": "^6.24.1",
        "babel-messages": "^6.23.0",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.26.0",
        "babel-template": "^6.26.0",
        "babel-traverse": "^6.26.0",
        "babel-types": "^6.26.0",
        "babylon": "^6.18.0",
        "convert-source-map": "^1.5.1",
        "debug": "^2.6.9",
        "json5": "^0.5.1",
        "lodash": "^4.17.4",
        "minimatch": "^3.0.4",
        "path-is-absolute": "^1.0.1",
        "private": "^0.1.8",
        "slash": "^1.0.0",
        "source-map": "^0.5.7"
      }
    },
    "babel-generator": {
      "version": "6.26.1",
      "resolved": "https://registry.npmjs.org/babel-generator/-/babel-generator-6.26.1.tgz",
      "integrity": "sha512-HyfwY6ApZj7BYTcJURpM5tznulaBvyio7/0d4zFOeMPUmfxkCjHocCuoLa2SAGzBI8AREcH3eP3758F672DppA==",
      "requires": {
        "babel-messages": "^6.23.0",
        "babel-runtime": "^6.26.0",
        "babel-types": "^6.26.0",
        "detect-indent": "^4.0.0",
        "jsesc": "^1.3.0",
        "lodash": "^4.17.4",
        "source-map": "^0.5.7",
        "trim-right": "^1.0.1"
      },
      "dependencies": {
        "jsesc": {
          "version": "1.3.0",
          "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-1.3.0.tgz",
          "integrity": "sha1-RsP+yMGJKxKwgz25vHYiF226s0s="
        }
      }
    },
    "babel-helper-builder-binary-assignment-operator-visitor": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-helper-builder-binary-assignment-operator-visitor/-/babel-helper-builder-binary-assignment-operator-visitor-6.24.1.tgz",
      "integrity": "sha1-zORReto1b0IgvK6KAsKzRvmlZmQ=",
      "requires": {
        "babel-helper-explode-assignable-expression": "^6.24.1",
        "babel-runtime": "^6.22.0",
        "babel-types": "^6.24.1"
      }
    },
    "babel-helper-call-delegate": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-helper-call-delegate/-/babel-helper-call-delegate-6.24.1.tgz",
      "integrity": "sha1-7Oaqzdx25Bw0YfiL/Fdb0Nqi340=",
      "requires": {
        "babel-helper-hoist-variables": "^6.24.1",
        "babel-runtime": "^6.22.0",
        "babel-traverse": "^6.24.1",
        "babel-types": "^6.24.1"
      }
    },
    "babel-helper-define-map": {
      "version": "6.26.0",
      "resolved": "https://registry.npmjs.org/babel-helper-define-map/-/babel-helper-define-map-6.26.0.tgz",
      "integrity": "sha1-pfVtq0GiX5fstJjH66ypgZ+Vvl8=",
      "requires": {
        "babel-helper-function-name": "^6.24.1",
        "babel-runtime": "^6.26.0",
        "babel-types": "^6.26.0",
        "lodash": "^4.17.4"
      }
    },
    "babel-helper-explode-assignable-expression": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-helper-explode-assignable-expression/-/babel-helper-explode-assignable-expression-6.24.1.tgz",
      "integrity": "sha1-8luCz33BBDPFX3BZLVdGQArCLKo=",
      "requires": {
        "babel-runtime": "^6.22.0",
        "babel-traverse": "^6.24.1",
        "babel-types": "^6.24.1"
      }
    },
    "babel-helper-function-name": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-helper-function-name/-/babel-helper-function-name-6.24.1.tgz",
      "integrity": "sha1-00dbjAPtmCQqJbSDUasYOZ01gKk=",
      "requires": {
        "babel-helper-get-function-arity": "^6.24.1",
        "babel-runtime": "^6.22.0",
        "babel-template": "^6.24.1",
        "babel-traverse": "^6.24.1",
        "babel-types": "^6.24.1"
      }
    },
    "babel-helper-get-function-arity": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-helper-get-function-arity/-/babel-helper-get-function-arity-6.24.1.tgz",
      "integrity": "sha1-j3eCqpNAfEHTqlCQj4mwMbG2hT0=",
      "requires": {
        "babel-runtime": "^6.22.0",
        "babel-types": "^6.24.1"
      }
    },
    "babel-helper-hoist-variables": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-helper-hoist-variables/-/babel-helper-hoist-variables-6.24.1.tgz",
      "integrity": "sha1-HssnaJydJVE+rbyZFKc/VAi+enY=",
      "requires": {
        "babel-runtime": "^6.22.0",
        "babel-types": "^6.24.1"
      }
    },
    "babel-helper-optimise-call-expression": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-helper-optimise-call-expression/-/babel-helper-optimise-call-expression-6.24.1.tgz",
      "integrity": "sha1-96E0J7qfc/j0+pk8VKl4gtEkQlc=",
      "requires": {
        "babel-runtime": "^6.22.0",
        "babel-types": "^6.24.1"
      }
    },
    "babel-helper-regex": {
      "version": "6.26.0",
      "resolved": "https://registry.npmjs.org/babel-helper-regex/-/babel-helper-regex-6.26.0.tgz",
      "integrity": "sha1-MlxZ+QL4LyS3T6zu0DY5VPZJXnI=",
      "requires": {
        "babel-runtime": "^6.26.0",
        "babel-types": "^6.26.0",
        "lodash": "^4.17.4"
      }
    },
    "babel-helper-remap-async-to-generator": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-helper-remap-async-to-generator/-/babel-helper-remap-async-to-generator-6.24.1.tgz",
      "integrity": "sha1-XsWBgnrXI/7N04HxySg5BnbkVRs=",
      "requires": {
        "babel-helper-function-name": "^6.24.1",
        "babel-runtime": "^6.22.0",
        "babel-template": "^6.24.1",
        "babel-traverse": "^6.24.1",
        "babel-types": "^6.24.1"
      }
    },
    "babel-helper-replace-supers": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-helper-replace-supers/-/babel-helper-replace-supers-6.24.1.tgz",
      "integrity": "sha1-v22/5Dk40XNpohPKiov3S2qQqxo=",
      "requires": {
        "babel-helper-optimise-call-expression": "^6.24.1",
        "babel-messages": "^6.23.0",
        "babel-runtime": "^6.22.0",
        "babel-template": "^6.24.1",
        "babel-traverse": "^6.24.1",
        "babel-types": "^6.24.1"
      }
    },
    "babel-helpers": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-helpers/-/babel-helpers-6.24.1.tgz",
      "integrity": "sha1-NHHenK7DiOXIUOWX5Yom3fN2ArI=",
      "requires": {
        "babel-runtime": "^6.22.0",
        "babel-template": "^6.24.1"
      }
    },
    "babel-messages": {
      "version": "6.23.0",
      "resolved": "https://registry.npmjs.org/babel-messages/-/babel-messages-6.23.0.tgz",
      "integrity": "sha1-8830cDhYA1sqKVHG7F7fbGLyYw4=",
      "requires": {
        "babel-runtime": "^6.22.0"
      }
    },
    "babel-plugin-check-es2015-constants": {
      "version": "6.22.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-check-es2015-constants/-/babel-plugin-check-es2015-constants-6.22.0.tgz",
      "integrity": "sha1-NRV7EBQm/S/9PaP3XH0ekYNbv4o=",
      "requires": {
        "babel-runtime": "^6.22.0"
      }
    },
    "babel-plugin-syntax-async-functions": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-syntax-async-functions/-/babel-plugin-syntax-async-functions-6.13.0.tgz",
      "integrity": "sha1-ytnK0RkbWtY0vzCuCHI5HgZHvpU="
    },
    "babel-plugin-syntax-exponentiation-operator": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-syntax-exponentiation-operator/-/babel-plugin-syntax-exponentiation-operator-6.13.0.tgz",
      "integrity": "sha1-nufoM3KQ2pUoggGmpX9BcDF4MN4="
    },
    "babel-plugin-syntax-trailing-function-commas": {
      "version": "6.22.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-syntax-trailing-function-commas/-/babel-plugin-syntax-trailing-function-commas-6.22.0.tgz",
      "integrity": "sha1-ugNgk3+NBuQBgKQ/4NVhb/9TLPM="
    },
    "babel-plugin-transform-async-to-generator": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-async-to-generator/-/babel-plugin-transform-async-to-generator-6.24.1.tgz",
      "integrity": "sha1-ZTbjeK/2yx1VF6wOQOs+n8jQh2E=",
      "requires": {
        "babel-helper-remap-async-to-generator": "^6.24.1",
        "babel-plugin-syntax-async-functions": "^6.8.0",
        "babel-runtime": "^6.22.0"
      }
    },
    "babel-plugin-transform-es2015-arrow-functions": {
      "version": "6.22.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-arrow-functions/-/babel-plugin-transform-es2015-arrow-functions-6.22.0.tgz",
      "integrity": "sha1-RSaSy3EdX3ncf4XkQM5BufJE0iE=",
      "requires": {
        "babel-runtime": "^6.22.0"
      }
    },
    "babel-plugin-transform-es2015-block-scoped-functions": {
      "version": "6.22.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-block-scoped-functions/-/babel-plugin-transform-es2015-block-scoped-functions-6.22.0.tgz",
      "integrity": "sha1-u8UbSflk1wy42OC5ToICRs46YUE=",
      "requires": {
        "babel-runtime": "^6.22.0"
      }
    },
    "babel-plugin-transform-es2015-block-scoping": {
      "version": "6.26.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-block-scoping/-/babel-plugin-transform-es2015-block-scoping-6.26.0.tgz",
      "integrity": "sha1-1w9SmcEwjQXBL0Y4E7CgnnOxiV8=",
      "requires": {
        "babel-runtime": "^6.26.0",
        "babel-template": "^6.26.0",
        "babel-traverse": "^6.26.0",
        "babel-types": "^6.26.0",
        "lodash": "^4.17.4"
      }
    },
    "babel-plugin-transform-es2015-classes": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-classes/-/babel-plugin-transform-es2015-classes-6.24.1.tgz",
      "integrity": "sha1-WkxYpQyclGHlZLSyo7+ryXolhNs=",
      "requires": {
        "babel-helper-define-map": "^6.24.1",
        "babel-helper-function-name": "^6.24.1",
        "babel-helper-optimise-call-expression": "^6.24.1",
        "babel-helper-replace-supers": "^6.24.1",
        "babel-messages": "^6.23.0",
        "babel-runtime": "^6.22.0",
        "babel-template": "^6.24.1",
        "babel-traverse": "^6.24.1",
        "babel-types": "^6.24.1"
      }
    },
    "babel-plugin-transform-es2015-computed-properties": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-computed-properties/-/babel-plugin-transform-es2015-computed-properties-6.24.1.tgz",
      "integrity": "sha1-b+Ko0WiV1WNPTNmZttNICjCBWbM=",
      "requires": {
        "babel-runtime": "^6.22.0",
        "babel-template": "^6.24.1"
      }
    },
    "babel-plugin-transform-es2015-destructuring": {
      "version": "6.23.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-destructuring/-/babel-plugin-transform-es2015-destructuring-6.23.0.tgz",
      "integrity": "sha1-mXux8auWf2gtKwh2/jWNYOdlxW0=",
      "requires": {
        "babel-runtime": "^6.22.0"
      }
    },
    "babel-plugin-transform-es2015-duplicate-keys": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-duplicate-keys/-/babel-plugin-transform-es2015-duplicate-keys-6.24.1.tgz",
      "integrity": "sha1-c+s9MQypaePvnskcU3QabxV2Qj4=",
      "requires": {
        "babel-runtime": "^6.22.0",
        "babel-types": "^6.24.1"
      }
    },
    "babel-plugin-transform-es2015-for-of": {
      "version": "6.23.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-for-of/-/babel-plugin-transform-es2015-for-of-6.23.0.tgz",
      "integrity": "sha1-9HyVsrYT3x0+zC/bdXNiPHUkhpE=",
      "requires": {
        "babel-runtime": "^6.22.0"
      }
    },
    "babel-plugin-transform-es2015-function-name": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-function-name/-/babel-plugin-transform-es2015-function-name-6.24.1.tgz",
      "integrity": "sha1-g0yJhTvDaxrw86TF26qU/Y6sqos=",
      "requires": {
        "babel-helper-function-name": "^6.24.1",
        "babel-runtime": "^6.22.0",
        "babel-types": "^6.24.1"
      }
    },
    "babel-plugin-transform-es2015-literals": {
      "version": "6.22.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-literals/-/babel-plugin-transform-es2015-literals-6.22.0.tgz",
      "integrity": "sha1-T1SgLWzWbPkVKAAZox0xklN3yi4=",
      "requires": {
        "babel-runtime": "^6.22.0"
      }
    },
    "babel-plugin-transform-es2015-modules-amd": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-modules-amd/-/babel-plugin-transform-es2015-modules-amd-6.24.1.tgz",
      "integrity": "sha1-Oz5UAXI5hC1tGcMBHEvS8AoA0VQ=",
      "requires": {
        "babel-plugin-transform-es2015-modules-commonjs": "^6.24.1",
        "babel-runtime": "^6.22.0",
        "babel-template": "^6.24.1"
      }
    },
    "babel-plugin-transform-es2015-modules-commonjs": {
      "version": "6.26.2",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-modules-commonjs/-/babel-plugin-transform-es2015-modules-commonjs-6.26.2.tgz",
      "integrity": "sha512-CV9ROOHEdrjcwhIaJNBGMBCodN+1cfkwtM1SbUHmvyy35KGT7fohbpOxkE2uLz1o6odKK2Ck/tz47z+VqQfi9Q==",
      "requires": {
        "babel-plugin-transform-strict-mode": "^6.24.1",
        "babel-runtime": "^6.26.0",
        "babel-template": "^6.26.0",
        "babel-types": "^6.26.0"
      }
    },
    "babel-plugin-transform-es2015-modules-systemjs": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-modules-systemjs/-/babel-plugin-transform-es2015-modules-systemjs-6.24.1.tgz",
      "integrity": "sha1-/4mhQrkRmpBhlfXxBuzzBdlAfSM=",
      "requires": {
        "babel-helper-hoist-variables": "^6.24.1",
        "babel-runtime": "^6.22.0",
        "babel-template": "^6.24.1"
      }
    },
    "babel-plugin-transform-es2015-modules-umd": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-modules-umd/-/babel-plugin-transform-es2015-modules-umd-6.24.1.tgz",
      "integrity": "sha1-rJl+YoXNGO1hdq22B9YCNErThGg=",
      "requires": {
        "babel-plugin-transform-es2015-modules-amd": "^6.24.1",
        "babel-runtime": "^6.22.0",
        "babel-template": "^6.24.1"
      }
    },
    "babel-plugin-transform-es2015-object-super": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-object-super/-/babel-plugin-transform-es2015-object-super-6.24.1.tgz",
      "integrity": "sha1-JM72muIcuDp/hgPa0CH1cusnj40=",
      "requires": {
        "babel-helper-replace-supers": "^6.24.1",
        "babel-runtime": "^6.22.0"
      }
    },
    "babel-plugin-transform-es2015-parameters": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-parameters/-/babel-plugin-transform-es2015-parameters-6.24.1.tgz",
      "integrity": "sha1-V6w1GrScrxSpfNE7CfZv3wpiXys=",
      "requires": {
        "babel-helper-call-delegate": "^6.24.1",
        "babel-helper-get-function-arity": "^6.24.1",
        "babel-runtime": "^6.22.0",
        "babel-template": "^6.24.1",
        "babel-traverse": "^6.24.1",
        "babel-types": "^6.24.1"
      }
    },
    "babel-plugin-transform-es2015-shorthand-properties": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-shorthand-properties/-/babel-plugin-transform-es2015-shorthand-properties-6.24.1.tgz",
      "integrity": "sha1-JPh11nIch2YbvZmkYi5R8U3jiqA=",
      "requires": {
        "babel-runtime": "^6.22.0",
        "babel-types": "^6.24.1"
      }
    },
    "babel-plugin-transform-es2015-spread": {
      "version": "6.22.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-spread/-/babel-plugin-transform-es2015-spread-6.22.0.tgz",
      "integrity": "sha1-1taKmfia7cRTbIGlQujdnxdG+NE=",
      "requires": {
        "babel-runtime": "^6.22.0"
      }
    },
    "babel-plugin-transform-es2015-sticky-regex": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-sticky-regex/-/babel-plugin-transform-es2015-sticky-regex-6.24.1.tgz",
      "integrity": "sha1-AMHNsaynERLN8M9hJsLta0V8zbw=",
      "requires": {
        "babel-helper-regex": "^6.24.1",
        "babel-runtime": "^6.22.0",
        "babel-types": "^6.24.1"
      }
    },
    "babel-plugin-transform-es2015-template-literals": {
      "version": "6.22.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-template-literals/-/babel-plugin-transform-es2015-template-literals-6.22.0.tgz",
      "integrity": "sha1-qEs0UPfp+PH2g51taH2oS7EjbY0=",
      "requires": {
        "babel-runtime": "^6.22.0"
      }
    },
    "babel-plugin-transform-es2015-typeof-symbol": {
      "version": "6.23.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-typeof-symbol/-/babel-plugin-transform-es2015-typeof-symbol-6.23.0.tgz",
      "integrity": "sha1-3sCfHN3/lLUqxz1QXITfWdzOs3I=",
      "requires": {
        "babel-runtime": "^6.22.0"
      }
    },
    "babel-plugin-transform-es2015-unicode-regex": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-unicode-regex/-/babel-plugin-transform-es2015-unicode-regex-6.24.1.tgz",
      "integrity": "sha1-04sS9C6nMj9yk4fxinxa4frrNek=",
      "requires": {
        "babel-helper-regex": "^6.24.1",
        "babel-runtime": "^6.22.0",
        "regexpu-core": "^2.0.0"
      }
    },
    "babel-plugin-transform-exponentiation-operator": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-exponentiation-operator/-/babel-plugin-transform-exponentiation-operator-6.24.1.tgz",
      "integrity": "sha1-KrDJx/MJj6SJB3cruBP+QejeOg4=",
      "requires": {
        "babel-helper-builder-binary-assignment-operator-visitor": "^6.24.1",
        "babel-plugin-syntax-exponentiation-operator": "^6.8.0",
        "babel-runtime": "^6.22.0"
      }
    },
    "babel-plugin-transform-regenerator": {
      "version": "6.26.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-regenerator/-/babel-plugin-transform-regenerator-6.26.0.tgz",
      "integrity": "sha1-4HA2lvveJ/Cj78rPi03KL3s6jy8=",
      "requires": {
        "regenerator-transform": "^0.10.0"
      }
    },
    "babel-plugin-transform-strict-mode": {
      "version": "6.24.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-strict-mode/-/babel-plugin-transform-strict-mode-6.24.1.tgz",
      "integrity": "sha1-1fr3qleKZbvlkc9e2uBKDGcCB1g=",
      "requires": {
        "babel-runtime": "^6.22.0",
        "babel-types": "^6.24.1"
      }
    },
    "babel-preset-env": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/babel-preset-env/-/babel-preset-env-1.7.0.tgz",
      "integrity": "sha512-9OR2afuKDneX2/q2EurSftUYM0xGu4O2D9adAhVfADDhrYDaxXV0rBbevVYoY9n6nyX1PmQW/0jtpJvUNr9CHg==",
      "requires": {
        "babel-plugin-check-es2015-constants": "^6.22.0",
        "babel-plugin-syntax-trailing-function-commas": "^6.22.0",
        "babel-plugin-transform-async-to-generator": "^6.22.0",
        "babel-plugin-transform-es2015-arrow-functions": "^6.22.0",
        "babel-plugin-transform-es2015-block-scoped-functions": "^6.22.0",
        "babel-plugin-transform-es2015-block-scoping": "^6.23.0",
        "babel-plugin-transform-es2015-classes": "^6.23.0",
        "babel-plugin-transform-es2015-computed-properties": "^6.22.0",
        "babel-plugin-transform-es2015-destructuring": "^6.23.0",
        "babel-plugin-transform-es2015-duplicate-keys": "^6.22.0",
        "babel-plugin-transform-es2015-for-of": "^6.23.0",
        "babel-plugin-transform-es2015-function-name": "^6.22.0",
        "babel-plugin-transform-es2015-literals": "^6.22.0",
        "babel-plugin-transform-es2015-modules-amd": "^6.22.0",
        "babel-plugin-transform-es2015-modules-commonjs": "^6.23.0",
        "babel-plugin-transform-es2015-modules-systemjs": "^6.23.0",
        "babel-plugin-transform-es2015-modules-umd": "^6.23.0",
        "babel-plugin-transform-es2015-object-super": "^6.22.0",
        "babel-plugin-transform-es2015-parameters": "^6.23.0",
        "babel-plugin-transform-es2015-shorthand-properties": "^6.22.0",
        "babel-plugin-transform-es2015-spread": "^6.22.0",
        "babel-plugin-transform-es2015-sticky-regex": "^6.22.0",
        "babel-plugin-transform-es2015-template-literals": "^6.22.0",
        "babel-plugin-transform-es2015-typeof-symbol": "^6.23.0",
        "babel-plugin-transform-es2015-unicode-regex": "^6.22.0",
        "babel-plugin-transform-exponentiation-operator": "^6.22.0",
        "babel-plugin-transform-regenerator": "^6.22.0",
        "browserslist": "^3.2.6",
        "invariant": "^2.2.2",
        "semver": "^5.3.0"
      }
    },
    "babel-register": {
      "version": "6.26.0",
      "resolved": "https://registry.npmjs.org/babel-register/-/babel-register-6.26.0.tgz",
      "integrity": "sha1-btAhFz4vy0htestFxgCahW9kcHE=",
      "requires": {
        "babel-core": "^6.26.0",
        "babel-runtime": "^6.26.0",
        "core-js": "^2.5.0",
        "home-or-tmp": "^2.0.0",
        "lodash": "^4.17.4",
        "mkdirp": "^0.5.1",
        "source-map-support": "^0.4.15"
      },
      "dependencies": {
        "core-js": {
          "version": "2.6.12",
          "resolved": "https://registry.npmjs.org/core-js/-/core-js-2.6.12.tgz",
          "integrity": "sha512-Kb2wC0fvsWfQrgk8HU5lW6U/Lcs8+9aaYcy4ZFc6DDlo4nZ7n70dEgE5rtR0oG6ufKDUnrwfWL1mXR5ljDatrQ=="
        },
        "source-map-support": {
          "version": "0.4.18",
          "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.4.18.tgz",
          "integrity": "sha512-try0/JqxPLF9nOjvSta7tVondkP5dwgyLDjVoyMDlmjugT2lRZ1OfsrYTkCd2hkDnJTKRbO/Rl3orm8vlsUzbA==",
          "requires": {
            "source-map": "^0.5.6"
          }
        }
      }
    },
    "babel-runtime": {
      "version": "6.26.0",
      "resolved": "https://registry.npmjs.org/babel-runtime/-/babel-runtime-6.26.0.tgz",
      "integrity": "sha1-llxwWGaOgrVde/4E/yM3vItWR/4=",
      "requires": {
        "core-js": "^2.4.0",
        "regenerator-runtime": "^0.11.0"
      },
      "dependencies": {
        "core-js": {
          "version": "2.6.12",
          "resolved": "https://registry.npmjs.org/core-js/-/core-js-2.6.12.tgz",
          "integrity": "sha512-Kb2wC0fvsWfQrgk8HU5lW6U/Lcs8+9aaYcy4ZFc6DDlo4nZ7n70dEgE5rtR0oG6ufKDUnrwfWL1mXR5ljDatrQ=="
        }
      }
    },
    "babel-template": {
      "version": "6.26.0",
      "resolved": "https://registry.npmjs.org/babel-template/-/babel-template-6.26.0.tgz",
      "integrity": "sha1-3gPi0WOWsGn0bdn/+FIfsaDjXgI=",
      "requires": {
        "babel-runtime": "^6.26.0",
        "babel-traverse": "^6.26.0",
        "babel-types": "^6.26.0",
        "babylon": "^6.18.0",
        "lodash": "^4.17.4"
      }
    },
    "babel-traverse": {
      "version": "6.26.0",
      "resolved": "https://registry.npmjs.org/babel-traverse/-/babel-traverse-6.26.0.tgz",
      "integrity": "sha1-RqnL1+3MYsjlwGTi0tjQ9ANXZu4=",
      "requires": {
        "babel-code-frame": "^6.26.0",
        "babel-messages": "^6.23.0",
        "babel-runtime": "^6.26.0",
        "babel-types": "^6.26.0",
        "babylon": "^6.18.0",
        "debug": "^2.6.8",
        "globals": "^9.18.0",
        "invariant": "^2.2.2",
        "lodash": "^4.17.4"
      }
    },
    "babel-types": {
      "version": "6.26.0",
      "resolved": "https://registry.npmjs.org/babel-types/-/babel-types-6.26.0.tgz",
      "integrity": "sha1-o7Bz+Uq0nrb6Vc1lInozQ4BjJJc=",
      "requires": {
        "babel-runtime": "^6.26.0",
        "esutils": "^2.0.2",
        "lodash": "^4.17.4",
        "to-fast-properties": "^1.0.3"
      }
    },
    "babelify": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/babelify/-/babelify-7.3.0.tgz",
      "integrity": "sha1-qlau3nBn/XvVSWZu4W3ChQh+iOU=",
      "requires": {
        "babel-core": "^6.0.14",
        "object-assign": "^4.0.0"
      }
    },
    "babylon": {
      "version": "6.18.0",
      "resolved": "https://registry.npmjs.org/babylon/-/babylon-6.18.0.tgz",
      "integrity": "sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ=="
    },
    "balanced-match": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.0.tgz",
      "integrity": "sha1-ibTRmasr7kneFk6gK4nORi1xt2c="
    },
    "base": {
      "version": "0.11.2",
      "resolved": "https://registry.npmjs.org/base/-/base-0.11.2.tgz",
      "integrity": "sha512-5T6P4xPgpp0YDFvSWwEZ4NoE3aM4QBQXDzmVbraCkFj8zHM+mba8SyqB5DbZWyR7mYHo6Y7BdQo3MoA4m0TeQg==",
      "requires": {
        "cache-base": "^1.0.1",
        "class-utils": "^0.3.5",
        "component-emitter": "^1.2.1",
        "define-property": "^1.0.0",
        "isobject": "^3.0.1",
        "mixin-deep": "^1.2.0",
        "pascalcase": "^0.1.1"
      },
      "dependencies": {
        "define-property": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-1.0.0.tgz",
          "integrity": "sha1-dp66rz9KY6rTr56NMEybvnm/sOY=",
          "requires": {
            "is-descriptor": "^1.0.0"
          }
        },
        "is-accessor-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz",
          "integrity": "sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==",
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-data-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz",
          "integrity": "sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==",
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-descriptor": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz",
          "integrity": "sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==",
          "requires": {
            "is-accessor-descriptor": "^1.0.0",
            "is-data-descriptor": "^1.0.0",
            "kind-of": "^6.0.2"
          }
        },
        "kind-of": {
          "version": "6.0.3",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
          "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw=="
        }
      }
    },
    "base-x": {
      "version": "3.0.8",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.8.tgz",
      "integrity": "sha512-Rl/1AWP4J/zRrk54hhlxH4drNxPJXYUaKffODVI53/dAsV4t9fBxyxYKAVPU1XBHxYwOWP9h9H0hM2MVw4YfJA==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "base64-js": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.3.1.tgz",
      "integrity": "sha512-mLQ4i2QO1ytvGWFWmcngKO//JXAQueZvwEKtjgQFM4jIK0kU+ytMfplL8j+n5mspOfjHwoAg+9yhb7BwAHm36g=="
    },
    "bcrypt-pbkdf": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
      "integrity": "sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=",
      "requires": {
        "tweetnacl": "^0.14.3"
      }
    },
    "big.js": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/big.js/-/big.js-5.2.2.tgz",
      "integrity": "sha512-vyL2OymJxmarO8gxMr0mhChsO9QGwhynfuu4+MHTAW6czfq9humCB7rKpUjDd9YUiDPU4mzpyupFSvOClAwbmQ=="
    },
    "bignumber.js": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-4.1.0.tgz",
      "integrity": "sha512-eJzYkFYy9L4JzXsbymsFn3p54D+llV27oTQ+ziJG7WFRheJcNZilgVXMG0LoZtlQSKBsJdWtLFqOD0u+U0jZKA=="
    },
    "binary-extensions": {
      "version": "1.13.1",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-1.13.1.tgz",
      "integrity": "sha512-Un7MIEDdUC5gNpcGDV97op1Ywk748MpHcFTHoYs6qnj1Z3j7I53VG3nwZhKzoBZmbdRNnb6WRdFlwl7tSDuZGw=="
    },
    "bindings": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/bindings/-/bindings-1.5.0.tgz",
      "integrity": "sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==",
      "requires": {
        "file-uri-to-path": "1.0.0"
      }
    },
    "bintrees": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/bintrees/-/bintrees-1.0.2.tgz",
      "integrity": "sha1-SfiW1uhYpKSZ34XDj7OZua/4QPg="
    },
    "bip66": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/bip66/-/bip66-1.1.5.tgz",
      "integrity": "sha1-AfqHSHhcpwlV1QESF9GzE5lpyiI=",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "blakejs": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/blakejs/-/blakejs-1.1.0.tgz",
      "integrity": "sha1-ad+S75U6qIylGjLfarHFShVfx6U="
    },
    "bn.js": {
      "version": "4.11.8",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-4.11.8.tgz",
      "integrity": "sha512-ItfYfPLkWHUjckQCk8xC+LwxgK8NYcXywGigJgSwOP8Y2iyWT4f2vsZnoOXTTbo+o5yXmIUJ4gn5538SO5S3gA=="
    },
    "brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "requires": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "braces": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-2.3.2.tgz",
      "integrity": "sha512-aNdbnj9P8PjdXU4ybaWLK2IF3jc/EoDYbC7AazW6to3TRsfXxscC9UXOB5iDiEQrkyIbWp2SLQda4+QAa7nc3w==",
      "requires": {
        "arr-flatten": "^1.1.0",
        "array-unique": "^0.3.2",
        "extend-shallow": "^2.0.1",
        "fill-range": "^4.0.0",
        "isobject": "^3.0.1",
        "repeat-element": "^1.1.2",
        "snapdragon": "^0.8.1",
        "snapdragon-node": "^2.0.1",
        "split-string": "^3.0.2",
        "to-regex": "^3.0.1"
      },
      "dependencies": {
        "extend-shallow": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
          "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
          "requires": {
            "is-extendable": "^0.1.0"
          }
        }
      }
    },
    "brorand": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/brorand/-/brorand-1.1.0.tgz",
      "integrity": "sha1-EsJe/kCkXjwyPrhnWgoM5XsiNx8="
    },
    "browser-stdout": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/browser-stdout/-/browser-stdout-1.3.1.tgz",
      "integrity": "sha512-qhAVI1+Av2X7qelOfAIYwXONood6XlZE/fXaBSmW/T5SzLAmCgzi+eiWE7fUvbHaeNBQH13UftjpXxsfLkMpgw==",
      "dev": true
    },
    "browserify-aes": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/browserify-aes/-/browserify-aes-1.2.0.tgz",
      "integrity": "sha512-+7CHXqGuspUn/Sl5aO7Ea0xWGAtETPXNSAjHo48JfLdPWcMng33Xe4znFvQweqc/uzk5zSOI3H52CYnjCfb5hA==",
      "requires": {
        "buffer-xor": "^1.0.3",
        "cipher-base": "^1.0.0",
        "create-hash": "^1.1.0",
        "evp_bytestokey": "^1.0.3",
        "inherits": "^2.0.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "browserify-cipher": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/browserify-cipher/-/browserify-cipher-1.0.1.tgz",
      "integrity": "sha512-sPhkz0ARKbf4rRQt2hTpAHqn47X3llLkUGn+xEJzLjwY8LRs2p0v7ljvI5EyoRO/mexrNunNECisZs+gw2zz1w==",
      "requires": {
        "browserify-aes": "^1.0.4",
        "browserify-des": "^1.0.0",
        "evp_bytestokey": "^1.0.0"
      }
    },
    "browserify-des": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/browserify-des/-/browserify-des-1.0.2.tgz",
      "integrity": "sha512-BioO1xf3hFwz4kc6iBhI3ieDFompMhrMlnDFC4/0/vd5MokpuAc3R+LYbwTA9A5Yc9pq9UYPqffKpW2ObuwX5A==",
      "requires": {
        "cipher-base": "^1.0.1",
        "des.js": "^1.0.0",
        "inherits": "^2.0.1",
        "safe-buffer": "^5.1.2"
      }
    },
    "browserify-rsa": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/browserify-rsa/-/browserify-rsa-4.0.1.tgz",
      "integrity": "sha1-IeCr+vbyApzy+vsTNWenAdQTVSQ=",
      "requires": {
        "bn.js": "^4.1.0",
        "randombytes": "^2.0.1"
      }
    },
    "browserify-sign": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/browserify-sign/-/browserify-sign-4.0.4.tgz",
      "integrity": "sha1-qk62jl17ZYuqa/alfmMMvXqT0pg=",
      "requires": {
        "bn.js": "^4.1.1",
        "browserify-rsa": "^4.0.0",
        "create-hash": "^1.1.0",
        "create-hmac": "^1.1.2",
        "elliptic": "^6.0.0",
        "inherits": "^2.0.1",
        "parse-asn1": "^5.0.0"
      }
    },
    "browserify-zlib": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/browserify-zlib/-/browserify-zlib-0.2.0.tgz",
      "integrity": "sha512-Z942RysHXmJrhqk88FmKBVq/v5tqmSkDz7p54G/MGyjMnCFFnC79XWNbg+Vta8W6Wb2qtSZTSxIGkJrRpCFEiA==",
      "requires": {
        "pako": "~1.0.5"
      }
    },
    "browserslist": {
      "version": "3.2.8",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-3.2.8.tgz",
      "integrity": "sha512-WHVocJYavUwVgVViC0ORikPHQquXwVh939TaelZ4WDqpWgTX/FsGhl/+P4qBUAGcRvtOgDgC+xftNWWp2RUTAQ==",
      "requires": {
        "caniuse-lite": "^1.0.30000844",
        "electron-to-chromium": "^1.3.47"
      }
    },
    "bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha1-vhYedsNU9veIrkBx9j806MTwpCo=",
      "requires": {
        "base-x": "^3.0.2"
      }
    },
    "bs58check": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/bs58check/-/bs58check-2.1.2.tgz",
      "integrity": "sha512-0TS1jicxdU09dwJMNZtVAfzPi6Q6QeN0pM1Fkzrjn+XYHvzMKPU3pHVpva+769iNVSfIYWf7LJ6WR+BuuMf8cA==",
      "requires": {
        "bs58": "^4.0.0",
        "create-hash": "^1.1.0",
        "safe-buffer": "^5.1.2"
      }
    },
    "buffer": {
      "version": "4.9.2",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-4.9.2.tgz",
      "integrity": "sha512-xq+q3SRMOxGivLhBNaUdC64hDTQwejJ+H0T/NB1XMtTVEwNTrfFF3gAxiyW0Bu/xWEGhjVKgUcMhCrUy2+uCWg==",
      "requires": {
        "base64-js": "^1.0.2",
        "ieee754": "^1.1.4",
        "isarray": "^1.0.0"
      }
    },
    "buffer-from": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.1.tgz",
      "integrity": "sha512-MQcXEUbCKtEo7bhqEs6560Hyd4XaovZlO/k9V3hjVUF/zwW7KBVdSK4gIt/bzwS9MbR5qob+F5jusZsb0YQK2A=="
    },
    "buffer-xor": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/buffer-xor/-/buffer-xor-1.0.3.tgz",
      "integrity": "sha1-JuYe0UIvtw3ULm42cp7VHYVf6Nk="
    },
    "builtin-modules": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/builtin-modules/-/builtin-modules-1.1.1.tgz",
      "integrity": "sha1-Jw8HbFpywC9bZaR9+Uxf46J4iS8="
    },
    "builtin-status-codes": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/builtin-status-codes/-/builtin-status-codes-3.0.0.tgz",
      "integrity": "sha1-hZgoeOIbmOHGZCXgPQF0eI9Wnug="
    },
    "cache-base": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/cache-base/-/cache-base-1.0.1.tgz",
      "integrity": "sha512-AKcdTnFSWATd5/GCPRxr2ChwIJ85CeyrEyjRHlKxQ56d4XJMGym0uAiKn0xbLOGOl3+yRpOTi484dVCEc5AUzQ==",
      "requires": {
        "collection-visit": "^1.0.0",
        "component-emitter": "^1.2.1",
        "get-value": "^2.0.6",
        "has-value": "^1.0.0",
        "isobject": "^3.0.1",
        "set-value": "^2.0.0",
        "to-object-path": "^0.3.0",
        "union-value": "^1.0.0",
        "unset-value": "^1.0.0"
      }
    },
    "call-bind": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
      "requires": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      }
    },
    "callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true
    },
    "camelcase": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-1.2.1.tgz",
      "integrity": "sha1-m7UwTS4LVmmLLHWLCKPqqdqlijk="
    },
    "caniuse-lite": {
      "version": "1.0.30001191",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001191.tgz",
      "integrity": "sha512-xJJqzyd+7GCJXkcoBiQ1GuxEiOBCLQ0aVW9HMekifZsAVGdj5eJ4mFB9fEhSHipq9IOk/QXFJUiIr9lZT+EsGw=="
    },
    "caseless": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
      "integrity": "sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw="
    },
    "center-align": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/center-align/-/center-align-0.1.3.tgz",
      "integrity": "sha1-qg0yYptu6XIgBBHL1EYckHvCt60=",
      "requires": {
        "align-text": "^0.1.3",
        "lazy-cache": "^1.0.3"
      }
    },
    "chai": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/chai/-/chai-4.2.0.tgz",
      "integrity": "sha512-XQU3bhBukrOsQCuwZndwGcCVQHyZi53fQ6Ys1Fym7E4olpIqqZZhhoFJoaKVvV17lWQoXYwgWN2nF5crA8J2jw==",
      "dev": true,
      "requires": {
        "assertion-error": "^1.1.0",
        "check-error": "^1.0.2",
        "deep-eql": "^3.0.1",
        "get-func-name": "^2.0.0",
        "pathval": "^1.1.0",
        "type-detect": "^4.0.5"
      }
    },
    "chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "requires": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "dependencies": {
        "has-flag": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
          "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0="
        },
        "supports-color": {
          "version": "5.5.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
          "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
          "requires": {
            "has-flag": "^3.0.0"
          }
        }
      }
    },
    "check-error": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/check-error/-/check-error-1.0.2.tgz",
      "integrity": "sha1-V00xLt2Iu13YkS6Sht1sCu1KrII=",
      "dev": true
    },
    "checkpoint-store": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/checkpoint-store/-/checkpoint-store-1.1.0.tgz",
      "integrity": "sha1-BOTLUWuRQziTWB5tRgGnjpVS6gY=",
      "requires": {
        "functional-red-black-tree": "^1.0.1"
      }
    },
    "chokidar": {
      "version": "2.1.8",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-2.1.8.tgz",
      "integrity": "sha512-ZmZUazfOzf0Nve7duiCKD23PFSCs4JPoYyccjUFF3aQkQadqBhfzhjkwBH2mNOG9cTBwhamM37EIsIkZw3nRgg==",
      "requires": {
        "anymatch": "^2.0.0",
        "async-each": "^1.0.1",
        "braces": "^2.3.2",
        "fsevents": "^1.2.7",
        "glob-parent": "^3.1.0",
        "inherits": "^2.0.3",
        "is-binary-path": "^1.0.0",
        "is-glob": "^4.0.0",
        "normalize-path": "^3.0.0",
        "path-is-absolute": "^1.0.0",
        "readdirp": "^2.2.1",
        "upath": "^1.1.1"
      }
    },
    "ci-info": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-2.0.0.tgz",
      "integrity": "sha512-5tK7EtrZ0N+OLFMthtqOj4fI2Jeb88C4CAZPu25LDVUgXJ0A3Js4PMGqrn0JU1W0Mh1/Z8wZzYPxqUrXeBboCQ==",
      "dev": true
    },
    "cipher-base": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/cipher-base/-/cipher-base-1.0.4.tgz",
      "integrity": "sha512-Kkht5ye6ZGmwv40uUDZztayT2ThLQGfnj/T71N/XzeZeo3nf8foyW7zGTsPYkEya3m5f3cAypH+qe7YOrM1U2Q==",
      "requires": {
        "inherits": "^2.0.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "class-utils": {
      "version": "0.3.6",
      "resolved": "https://registry.npmjs.org/class-utils/-/class-utils-0.3.6.tgz",
      "integrity": "sha512-qOhPa/Fj7s6TY8H8esGu5QNpMMQxz79h+urzrNYN6mn+9BnxlDGf5QZ+XeCDsxSjPqsSR56XOZOJmpeurnLMeg==",
      "requires": {
        "arr-union": "^3.1.0",
        "define-property": "^0.2.5",
        "isobject": "^3.0.0",
        "static-extend": "^0.1.1"
      },
      "dependencies": {
        "define-property": {
          "version": "0.2.5",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
          "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
          "requires": {
            "is-descriptor": "^0.1.0"
          }
        }
      }
    },
    "cliui": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-2.1.0.tgz",
      "integrity": "sha1-S0dXYP+AJkx2LDoXGQMukcf+oNE=",
      "requires": {
        "center-align": "^0.1.1",
        "right-align": "^0.1.1",
        "wordwrap": "0.0.2"
      }
    },
    "clone": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/clone/-/clone-2.1.2.tgz",
      "integrity": "sha1-G39Ln1kfHo+DZwQBYANFoCiHQ18="
    },
    "code-point-at": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/code-point-at/-/code-point-at-1.1.0.tgz",
      "integrity": "sha1-DQcLTQQ6W+ozovGkDi7bPZpMz3c="
    },
    "collection-visit": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/collection-visit/-/collection-visit-1.0.0.tgz",
      "integrity": "sha1-S8A3PBZLwykbTTaMgpzxqApZ3KA=",
      "requires": {
        "map-visit": "^1.0.0",
        "object-visit": "^1.0.0"
      }
    },
    "color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "requires": {
        "color-name": "1.1.3"
      }
    },
    "color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU="
    },
    "combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "requires": {
        "delayed-stream": "~1.0.0"
      }
    },
    "commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ=="
    },
    "compare-versions": {
      "version": "3.5.1",
      "resolved": "https://registry.npmjs.org/compare-versions/-/compare-versions-3.5.1.tgz",
      "integrity": "sha512-9fGPIB7C6AyM18CJJBHt5EnCZDG3oiTJYy0NjfIAGjKpzv0tkxWko7TNQHF5ymqm7IH03tqmeuBxtvD+Izh6mg=="
    },
    "component-emitter": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.0.tgz",
      "integrity": "sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg=="
    },
    "concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s="
    },
    "console-browserify": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/console-browserify/-/console-browserify-1.2.0.tgz",
      "integrity": "sha512-ZMkYO/LkF17QvCPqM0gxw8yUzigAOZOSWSHg91FH6orS7vcEj5dVZTidN2fQ14yBSdg97RqhSNwLUXInd52OTA=="
    },
    "constants-browserify": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/constants-browserify/-/constants-browserify-1.0.0.tgz",
      "integrity": "sha1-wguW2MYXdIqvHBYCF2DNJ/y4y3U="
    },
    "convert-source-map": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.7.0.tgz",
      "integrity": "sha512-4FJkXzKXEDB1snCFZlLP4gpC3JILicCpGbzG9f9G7tGqGCzETQ2hWPrcinA9oU4wtf2biUaEH5065UnMeR33oA==",
      "requires": {
        "safe-buffer": "~5.1.1"
      },
      "dependencies": {
        "safe-buffer": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
          "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
        }
      }
    },
    "cookiejar": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/cookiejar/-/cookiejar-2.1.2.tgz",
      "integrity": "sha512-Mw+adcfzPxcPeI+0WlvRrr/3lGVO0bD75SxX6811cxSh1Wbxx7xZBGK1eVtDf6si8rg2lhnUjsVLMFMfbRIuwA=="
    },
    "copy-descriptor": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/copy-descriptor/-/copy-descriptor-0.1.1.tgz",
      "integrity": "sha1-Z29us8OZl8LuGsOpJP1hJHSPV40="
    },
    "core-js": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/core-js/-/core-js-1.2.7.tgz",
      "integrity": "sha1-ZSKUwUZR2yj6k70tX/KYOk8IxjY="
    },
    "core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="
    },
    "cosmiconfig": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-6.0.0.tgz",
      "integrity": "sha512-xb3ZL6+L8b9JLLCx3ZdoZy4+2ECphCMo2PwqgP1tlfVq6M6YReyzBJtvWWtbDSpNr9hn96pkCiZqUcFEc+54Qg==",
      "dev": true,
      "requires": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.1.0",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.7.2"
      },
      "dependencies": {
        "parse-json": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.0.0.tgz",
          "integrity": "sha512-OOY5b7PAEFV0E2Fir1KOkxchnZNCdowAJgQ5NuxjpBKTRP3pQhwkrkxqQjeoKJ+fO7bCpmIZaogI4eZGDMEGOw==",
          "dev": true,
          "requires": {
            "@babel/code-frame": "^7.0.0",
            "error-ex": "^1.3.1",
            "json-parse-better-errors": "^1.0.1",
            "lines-and-columns": "^1.1.6"
          }
        },
        "path-type": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
          "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
          "dev": true
        }
      }
    },
    "create-ecdh": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/create-ecdh/-/create-ecdh-4.0.3.tgz",
      "integrity": "sha512-GbEHQPMOswGpKXM9kCWVrremUcBmjteUaQ01T9rkKCPDXfUHX0IoP9LpHYo2NPFampa4e+/pFDc3jQdxrxQLaw==",
      "requires": {
        "bn.js": "^4.1.0",
        "elliptic": "^6.0.0"
      }
    },
    "create-hash": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/create-hash/-/create-hash-1.2.0.tgz",
      "integrity": "sha512-z00bCGNHDG8mHAkP7CtT1qVu+bFQUPjYq/4Iv3C3kWjTFV10zIjfSoeqXo9Asws8gwSHDGj/hl2u4OGIjapeCg==",
      "requires": {
        "cipher-base": "^1.0.1",
        "inherits": "^2.0.1",
        "md5.js": "^1.3.4",
        "ripemd160": "^2.0.1",
        "sha.js": "^2.4.0"
      }
    },
    "create-hmac": {
      "version": "1.1.7",
      "resolved": "https://registry.npmjs.org/create-hmac/-/create-hmac-1.1.7.tgz",
      "integrity": "sha512-MJG9liiZ+ogc4TzUwuvbER1JRdgvUFSB5+VR/g5h82fGaIRWMWddtKBHi7/sVhfjQZ6SehlyhvQYrcYkaUIpLg==",
      "requires": {
        "cipher-base": "^1.0.3",
        "create-hash": "^1.1.0",
        "inherits": "^2.0.1",
        "ripemd160": "^2.0.0",
        "safe-buffer": "^5.0.1",
        "sha.js": "^2.4.8"
      }
    },
    "cross-spawn": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-5.1.0.tgz",
      "integrity": "sha1-6L0O/uWPz/b4+UUQoKVUu/ojVEk=",
      "requires": {
        "lru-cache": "^4.0.1",
        "shebang-command": "^1.2.0",
        "which": "^1.2.9"
      }
    },
    "crypto-browserify": {
      "version": "3.12.0",
      "resolved": "https://registry.npmjs.org/crypto-browserify/-/crypto-browserify-3.12.0.tgz",
      "integrity": "sha512-fz4spIh+znjO2VjL+IdhEpRJ3YN6sMzITSBijk6FK2UvTqruSQW+/cCZTSNsMiZNvUeq0CqurF+dAbyiGOY6Wg==",
      "requires": {
        "browserify-cipher": "^1.0.0",
        "browserify-sign": "^4.0.0",
        "create-ecdh": "^4.0.0",
        "create-hash": "^1.1.0",
        "create-hmac": "^1.1.0",
        "diffie-hellman": "^5.0.0",
        "inherits": "^2.0.1",
        "pbkdf2": "^3.0.3",
        "public-encrypt": "^4.0.0",
        "randombytes": "^2.0.0",
        "randomfill": "^1.0.3"
      }
    },
    "crypto-js": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/crypto-js/-/crypto-js-3.3.0.tgz",
      "integrity": "sha512-DIT51nX0dCfKltpRiXV+/TVZq+Qq2NgF4644+K7Ttnla7zEzqc+kjJyiB96BHNyUTBxyjzRcZYpUdZa+QAqi6Q=="
    },
    "d": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/d/-/d-1.0.1.tgz",
      "integrity": "sha512-m62ShEObQ39CfralilEQRjH6oAMtNCV1xJyEx5LpRYUVN+EviphDgUc/F3hnYbADmkiNs67Y+3ylmlG7Lnu+FA==",
      "requires": {
        "es5-ext": "^0.10.50",
        "type": "^1.0.1"
      }
    },
    "dashdash": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
      "integrity": "sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
      "requires": {
        "assert-plus": "^1.0.0"
      }
    },
    "debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "requires": {
        "ms": "2.0.0"
      }
    },
    "decamelize": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz",
      "integrity": "sha1-9lNNFRSCabIDUue+4m9QH5oZEpA="
    },
    "decode-uri-component": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/decode-uri-component/-/decode-uri-component-0.2.0.tgz",
      "integrity": "sha1-6zkTMzRYd1y4TNGh+uBiEGu4dUU="
    },
    "deep-eql": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/deep-eql/-/deep-eql-3.0.1.tgz",
      "integrity": "sha512-+QeIQyN5ZuO+3Uk5DYh6/1eKO0m0YmJFGNmFHGACpf1ClL1nmlV/p4gNgbl2pJGxgXb4faqo6UE+M5ACEMyVcw==",
      "dev": true,
      "requires": {
        "type-detect": "^4.0.0"
      }
    },
    "deep-equal": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/deep-equal/-/deep-equal-1.1.1.tgz",
      "integrity": "sha512-yd9c5AdiqVcR+JjcwUQb9DkhJc8ngNr0MahEBGvDiJw8puWab2yZlh+nkasOnZP+EGTAP6rRp2JzJhJZzvNF8g==",
      "requires": {
        "is-arguments": "^1.0.4",
        "is-date-object": "^1.0.1",
        "is-regex": "^1.0.4",
        "object-is": "^1.0.1",
        "object-keys": "^1.1.1",
        "regexp.prototype.flags": "^1.2.0"
      }
    },
    "deferred-leveldown": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/deferred-leveldown/-/deferred-leveldown-1.2.2.tgz",
      "integrity": "sha512-uukrWD2bguRtXilKt6cAWKyoXrTSMo5m7crUdLfWQmu8kIm88w3QZoUL+6nhpfKVmhHANER6Re3sKoNoZ3IKMA==",
      "requires": {
        "abstract-leveldown": "~2.6.0"
      }
    },
    "define-properties": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.1.3.tgz",
      "integrity": "sha512-3MqfYKj2lLzdMSf8ZIZE/V+Zuy+BgD6f164e8K2w7dgnpKArBDerGYpM46IYYcjnkdPNMjPk9A6VFB8+3SKlXQ==",
      "requires": {
        "object-keys": "^1.0.12"
      }
    },
    "define-property": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/define-property/-/define-property-2.0.2.tgz",
      "integrity": "sha512-jwK2UV4cnPpbcG7+VRARKTZPUWowwXA8bzH5NP6ud0oeAxyYPuGZUAC7hMugpCdz4BeSZl2Dl9k66CHJ/46ZYQ==",
      "requires": {
        "is-descriptor": "^1.0.2",
        "isobject": "^3.0.1"
      },
      "dependencies": {
        "is-accessor-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz",
          "integrity": "sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==",
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-data-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz",
          "integrity": "sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==",
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-descriptor": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz",
          "integrity": "sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==",
          "requires": {
            "is-accessor-descriptor": "^1.0.0",
            "is-data-descriptor": "^1.0.0",
            "kind-of": "^6.0.2"
          }
        },
        "kind-of": {
          "version": "6.0.3",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
          "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw=="
        }
      }
    },
    "defined": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/defined/-/defined-1.0.0.tgz",
      "integrity": "sha1-yY2bzvdWdBiOEQlpFRGZ45sfppM="
    },
    "delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha1-3zrhmayt+31ECqrgsp4icrJOxhk="
    },
    "des.js": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/des.js/-/des.js-1.0.1.tgz",
      "integrity": "sha512-Q0I4pfFrv2VPd34/vfLrFOoRmlYj3OV50i7fskps1jZWK1kApMWWT9G6RRUeYedLcBDIhnSDaUvJMb3AhUlaEA==",
      "requires": {
        "inherits": "^2.0.1",
        "minimalistic-assert": "^1.0.0"
      }
    },
    "detect-indent": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/detect-indent/-/detect-indent-4.0.0.tgz",
      "integrity": "sha1-920GQ1LN9Docts5hnE7jqUdd4gg=",
      "requires": {
        "repeating": "^2.0.0"
      }
    },
    "diff": {
      "version": "3.5.0",
      "resolved": "https://registry.npmjs.org/diff/-/diff-3.5.0.tgz",
      "integrity": "sha512-A46qtFgd+g7pDZinpnwiRJtxbC1hpgf0uzP3iG89scHk0AUC7A1TGxf5OiiOUv/JMZR8GOt8hL900hV0bOy5xA=="
    },
    "diffie-hellman": {
      "version": "5.0.3",
      "resolved": "https://registry.npmjs.org/diffie-hellman/-/diffie-hellman-5.0.3.tgz",
      "integrity": "sha512-kqag/Nl+f3GwyK25fhUMYj81BUOrZ9IuJsjIcDE5icNM9FJHAVm3VcUDxdLPoQtTuUylWm6ZIknYJwwaPxsUzg==",
      "requires": {
        "bn.js": "^4.1.0",
        "miller-rabin": "^4.0.0",
        "randombytes": "^2.0.0"
      }
    },
    "doctrine": {
      "version": "0.7.2",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-0.7.2.tgz",
      "integrity": "sha1-fLhgNZujvpDgQLJrcpzkv6ZUxSM=",
      "requires": {
        "esutils": "^1.1.6",
        "isarray": "0.0.1"
      },
      "dependencies": {
        "esutils": {
          "version": "1.1.6",
          "resolved": "https://registry.npmjs.org/esutils/-/esutils-1.1.6.tgz",
          "integrity": "sha1-wBzKqa5LiXxtDD4hCuUvPHqEQ3U="
        },
        "isarray": {
          "version": "0.0.1",
          "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
          "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8="
        }
      }
    },
    "dom-walk": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/dom-walk/-/dom-walk-0.1.2.tgz",
      "integrity": "sha512-6QvTW9mrGeIegrFXdtQi9pk7O/nSK6lSdXW2eqUspN5LWD7UTji2Fqw5V2YLjBpHEoU9Xl/eUWNpDeZvoyOv2w=="
    },
    "domain-browser": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/domain-browser/-/domain-browser-1.2.0.tgz",
      "integrity": "sha512-jnjyiM6eRyZl2H+W8Q/zLMA481hzi0eszAaBUzIVnmYVDBbnLxVNnfu1HgEBvCbL+71FrxMl3E6lpKH7Ge3OXA=="
    },
    "dotignore": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/dotignore/-/dotignore-0.1.2.tgz",
      "integrity": "sha512-UGGGWfSauusaVJC+8fgV+NVvBXkCTmVv7sk6nojDZZvuOUNGUy0Zk4UpHQD6EDjS0jpBwcACvH4eofvyzBcRDw==",
      "requires": {
        "minimatch": "^3.0.4"
      }
    },
    "drbg.js": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/drbg.js/-/drbg.js-1.0.1.tgz",
      "integrity": "sha1-Pja2xCs3BDgjzbwzLVjzHiRFSAs=",
      "requires": {
        "browserify-aes": "^1.0.6",
        "create-hash": "^1.1.2",
        "create-hmac": "^1.1.4"
      }
    },
    "ecc-jsbn": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
      "integrity": "sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=",
      "requires": {
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.1.0"
      }
    },
    "electron-to-chromium": {
      "version": "1.3.671",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.3.671.tgz",
      "integrity": "sha512-RTD97QkdrJKaKwRv9h/wGAaoR2lGxNXEcBXS31vjitgTPwTWAbLdS7cEsBK68eEQy7p6YyT8D5BxBEYHu2SuwQ=="
    },
    "elliptic": {
      "version": "6.5.2",
      "resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.2.tgz",
      "integrity": "sha512-f4x70okzZbIQl/NSRLkI/+tteV/9WqL98zx+SQ69KbXxmVrmjwsNUPn/gYJJ0sHvEak24cZgHIPegRePAtA/xw==",
      "requires": {
        "bn.js": "^4.4.0",
        "brorand": "^1.0.1",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.0",
        "inherits": "^2.0.1",
        "minimalistic-assert": "^1.0.0",
        "minimalistic-crypto-utils": "^1.0.0"
      }
    },
    "emojis-list": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/emojis-list/-/emojis-list-2.1.0.tgz",
      "integrity": "sha1-TapNnbAPmBmIDHn6RXrlsJof04k="
    },
    "encoding": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/encoding/-/encoding-0.1.12.tgz",
      "integrity": "sha1-U4tm8+5izRq1HsMjgp0flIDHS+s=",
      "requires": {
        "iconv-lite": "~0.4.13"
      }
    },
    "end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "dev": true,
      "requires": {
        "once": "^1.4.0"
      }
    },
    "enhanced-resolve": {
      "version": "3.4.1",
      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-3.4.1.tgz",
      "integrity": "sha1-BCHjOf1xQZs9oT0Smzl5BAIwR24=",
      "requires": {
        "graceful-fs": "^4.1.2",
        "memory-fs": "^0.4.0",
        "object-assign": "^4.0.1",
        "tapable": "^0.2.7"
      }
    },
    "errno": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/errno/-/errno-0.1.7.tgz",
      "integrity": "sha512-MfrRBDWzIWifgq6tJj60gkAwtLNb6sQPlcFrSOflcP1aFmmruKQ2wRnze/8V6kgyz7H3FF8Npzv78mZ7XLLflg==",
      "requires": {
        "prr": "~1.0.1"
      }
    },
    "error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "requires": {
        "is-arrayish": "^0.2.1"
      }
    },
    "es-abstract": {
      "version": "1.18.0-next.2",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.18.0-next.2.tgz",
      "integrity": "sha512-Ih4ZMFHEtZupnUh6497zEL4y2+w8+1ljnCyaTa+adcoafI1GOvMwFlDjBLfWR7y9VLfrjRJe9ocuHY1PSR9jjw==",
      "requires": {
        "call-bind": "^1.0.2",
        "es-to-primitive": "^1.2.1",
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2",
        "has": "^1.0.3",
        "has-symbols": "^1.0.1",
        "is-callable": "^1.2.2",
        "is-negative-zero": "^2.0.1",
        "is-regex": "^1.1.1",
        "object-inspect": "^1.9.0",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.2",
        "string.prototype.trimend": "^1.0.3",
        "string.prototype.trimstart": "^1.0.3"
      },
      "dependencies": {
        "is-regex": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.1.2.tgz",
          "integrity": "sha512-axvdhb5pdhEVThqJzYXwMlVuZwC+FF2DpcOhTS+y/8jVq4trxyPgfcwIxIKiyeuLlSQYKkmUaPQJ8ZE4yNKXDg==",
          "requires": {
            "call-bind": "^1.0.2",
            "has-symbols": "^1.0.1"
          }
        },
        "object-inspect": {
          "version": "1.9.0",
          "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.9.0.tgz",
          "integrity": "sha512-i3Bp9iTqwhaLZBxGkRfo5ZbE07BQRT7MGu8+nNgwW9ItGp1TzCTw2DLEoWwjClxBjOFI/hWljTAmYGCEwmtnOw=="
        }
      }
    },
    "es-to-primitive": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.2.1.tgz",
      "integrity": "sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==",
      "requires": {
        "is-callable": "^1.1.4",
        "is-date-object": "^1.0.1",
        "is-symbol": "^1.0.2"
      }
    },
    "es5-ext": {
      "version": "0.10.53",
      "resolved": "https://registry.npmjs.org/es5-ext/-/es5-ext-0.10.53.tgz",
      "integrity": "sha512-Xs2Stw6NiNHWypzRTY1MtaG/uJlwCk8kH81920ma8mvN8Xq1gsfhZvpkImLQArw8AHnv8MT2I45J3c0R8slE+Q==",
      "requires": {
        "es6-iterator": "~2.0.3",
        "es6-symbol": "~3.1.3",
        "next-tick": "~1.0.0"
      }
    },
    "es6-iterator": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/es6-iterator/-/es6-iterator-2.0.3.tgz",
      "integrity": "sha1-p96IkUGgWpSwhUQDstCg+/qY87c=",
      "requires": {
        "d": "1",
        "es5-ext": "^0.10.35",
        "es6-symbol": "^3.1.1"
      }
    },
    "es6-map": {
      "version": "0.1.5",
      "resolved": "https://registry.npmjs.org/es6-map/-/es6-map-0.1.5.tgz",
      "integrity": "sha1-kTbgUD3MBqMBaQ8LsU/042TpSfA=",
      "requires": {
        "d": "1",
        "es5-ext": "~0.10.14",
        "es6-iterator": "~2.0.1",
        "es6-set": "~0.1.5",
        "es6-symbol": "~3.1.1",
        "event-emitter": "~0.3.5"
      }
    },
    "es6-set": {
      "version": "0.1.5",
      "resolved": "https://registry.npmjs.org/es6-set/-/es6-set-0.1.5.tgz",
      "integrity": "sha1-0rPsXU2ADO2BjbU40ol02wpzzLE=",
      "requires": {
        "d": "1",
        "es5-ext": "~0.10.14",
        "es6-iterator": "~2.0.1",
        "es6-symbol": "3.1.1",
        "event-emitter": "~0.3.5"
      },
      "dependencies": {
        "es6-symbol": {
          "version": "3.1.1",
          "resolved": "https://registry.npmjs.org/es6-symbol/-/es6-symbol-3.1.1.tgz",
          "integrity": "sha1-vwDvT9q2uhtG7Le2KbTH7VcVzHc=",
          "requires": {
            "d": "1",
            "es5-ext": "~0.10.14"
          }
        }
      }
    },
    "es6-symbol": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/es6-symbol/-/es6-symbol-3.1.3.tgz",
      "integrity": "sha512-NJ6Yn3FuDinBaBRWl/q5X/s4koRHBrgKAu+yGI6JCBeiu3qrcbJhwT2GeR/EXVfylRk8dpQVJoLEFhK+Mu31NA==",
      "requires": {
        "d": "^1.0.1",
        "ext": "^1.1.2"
      }
    },
    "es6-weak-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/es6-weak-map/-/es6-weak-map-2.0.3.tgz",
      "integrity": "sha512-p5um32HOTO1kP+w7PRnB+5lQ43Z6muuMuIMffvDN8ZB4GcnjLBV6zGStpbASIMk4DCAvEaamhe2zhyCb/QXXsA==",
      "requires": {
        "d": "1",
        "es5-ext": "^0.10.46",
        "es6-iterator": "^2.0.3",
        "es6-symbol": "^3.1.1"
      }
    },
    "escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="
    },
    "escope": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/escope/-/escope-3.6.0.tgz",
      "integrity": "sha1-4Bl16BJ4GhY6ba392AOY3GTIicM=",
      "requires": {
        "es6-map": "^0.1.3",
        "es6-weak-map": "^2.0.1",
        "esrecurse": "^4.1.0",
        "estraverse": "^4.1.1"
      }
    },
    "esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A=="
    },
    "esrecurse": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.2.1.tgz",
      "integrity": "sha512-64RBB++fIOAXPw3P9cy89qfMlvZEXZkqqJkjqqXIvzP5ezRZjW+lPWjw35UX/3EhUPFYbg5ER4JYgDw4007/DQ==",
      "requires": {
        "estraverse": "^4.1.0"
      }
    },
    "estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw=="
    },
    "esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g=="
    },
    "eth-block-tracker": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/eth-block-tracker/-/eth-block-tracker-2.3.1.tgz",
      "integrity": "sha512-NamWuMBIl8kmkJFVj8WzGatySTzQPQag4Xr677yFxdVtIxACFbL/dQowk0MzEqIKk93U1TwY3MjVU6mOcwZnKA==",
      "requires": {
        "async-eventemitter": "github:ahultgren/async-eventemitter#fa06e39e56786ba541c180061dbf2c0a5bbf951c",
        "eth-query": "^2.1.0",
        "ethereumjs-tx": "^1.3.3",
        "ethereumjs-util": "^5.1.3",
        "ethjs-util": "^0.1.3",
        "json-rpc-engine": "^3.6.0",
        "pify": "^2.3.0",
        "tape": "^4.6.3"
      }
    },
    "eth-query": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/eth-query/-/eth-query-2.1.2.tgz",
      "integrity": "sha1-1nQdkAAQa1FRDHLbktY2VFam2l4=",
      "requires": {
        "json-rpc-random-id": "^1.0.0",
        "xtend": "^4.0.1"
      }
    },
    "eth-sig-util": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/eth-sig-util/-/eth-sig-util-1.4.2.tgz",
      "integrity": "sha1-jZWCAsftuq6Dlwf7pvCf8ydgYhA=",
      "requires": {
        "ethereumjs-abi": "git+https://github.com/ethereumjs/ethereumjs-abi.git",
        "ethereumjs-util": "^5.1.1"
      },
      "dependencies": {
        "ethereumjs-abi": {
          "version": "git+https://github.com/ethereumjs/ethereumjs-abi.git#1a27c59c15ab1e95ee8e5c4ed6ad814c49cc439e",
          "from": "git+https://github.com/ethereumjs/ethereumjs-abi.git",
          "requires": {
            "bn.js": "^4.11.8",
            "ethereumjs-util": "^6.0.0"
          },
          "dependencies": {
            "ethereumjs-util": {
              "version": "6.2.1",
              "resolved": "https://registry.npmjs.org/ethereumjs-util/-/ethereumjs-util-6.2.1.tgz",
              "integrity": "sha512-W2Ktez4L01Vexijrm5EB6w7dg4n/TgpoYU4avuT5T3Vmnw/eCRtiBrJfQYS/DCSvDIOLn2k57GcHdeBcgVxAqw==",
              "requires": {
                "@types/bn.js": "^4.11.3",
                "bn.js": "^4.11.0",
                "create-hash": "^1.1.2",
                "elliptic": "^6.5.2",
                "ethereum-cryptography": "^0.1.3",
                "ethjs-util": "0.1.6",
                "rlp": "^2.2.3"
              }
            }
          }
        }
      }
    },
    "ethereum-common": {
      "version": "0.0.18",
      "resolved": "https://registry.npmjs.org/ethereum-common/-/ethereum-common-0.0.18.tgz",
      "integrity": "sha1-L9w1dvIykDNYl26znaeDIT/5Uj8="
    },
    "ethereum-cryptography": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.1.3.tgz",
      "integrity": "sha512-w8/4x1SGGzc+tO97TASLja6SLd3fRIK2tLVcV2Gx4IB21hE19atll5Cq9o3d0ZmAYC/8aw0ipieTSiekAea4SQ==",
      "requires": {
        "@types/pbkdf2": "^3.0.0",
        "@types/secp256k1": "^4.0.1",
        "blakejs": "^1.1.0",
        "browserify-aes": "^1.2.0",
        "bs58check": "^2.1.2",
        "create-hash": "^1.2.0",
        "create-hmac": "^1.1.7",
        "hash.js": "^1.1.7",
        "keccak": "^3.0.0",
        "pbkdf2": "^3.0.17",
        "randombytes": "^2.1.0",
        "safe-buffer": "^5.1.2",
        "scrypt-js": "^3.0.0",
        "secp256k1": "^4.0.1",
        "setimmediate": "^1.0.5"
      },
      "dependencies": {
        "keccak": {
          "version": "3.0.1",
          "resolved": "https://registry.npmjs.org/keccak/-/keccak-3.0.1.tgz",
          "integrity": "sha512-epq90L9jlFWCW7+pQa6JOnKn2Xgl2mtI664seYR6MHskvI9agt7AnDqmAlp9TqU4/caMYbA08Hi5DMZAl5zdkA==",
          "requires": {
            "node-addon-api": "^2.0.0",
            "node-gyp-build": "^4.2.0"
          }
        },
        "secp256k1": {
          "version": "4.0.2",
          "resolved": "https://registry.npmjs.org/secp256k1/-/secp256k1-4.0.2.tgz",
          "integrity": "sha512-UDar4sKvWAksIlfX3xIaQReADn+WFnHvbVujpcbr+9Sf/69odMwy2MUsz5CKLQgX9nsIyrjuxL2imVyoNHa3fg==",
          "requires": {
            "elliptic": "^6.5.2",
            "node-addon-api": "^2.0.0",
            "node-gyp-build": "^4.2.0"
          }
        }
      }
    },
    "ethereumjs-abi": {
      "version": "git+https://github.com/ProjectWyvern/ethereumjs-abi.git#3d2d89641a6ad5984929b6ca4b646452ec74f73d",
      "from": "git+https://github.com/ProjectWyvern/ethereumjs-abi.git",
      "requires": {
        "bn.js": "^4.10.0",
        "ethereumjs-util": "^4.3.0"
      },
      "dependencies": {
        "ethereumjs-util": {
          "version": "4.5.1",
          "resolved": "https://registry.npmjs.org/ethereumjs-util/-/ethereumjs-util-4.5.1.tgz",
          "integrity": "sha512-WrckOZ7uBnei4+AKimpuF1B3Fv25OmoRgmYCpGsP7u8PFxXAmAgiJSYT2kRWnt6fVIlKaQlZvuwXp7PIrmn3/w==",
          "requires": {
            "bn.js": "^4.8.0",
            "create-hash": "^1.1.2",
            "elliptic": "^6.5.2",
            "ethereum-cryptography": "^0.1.3",
            "rlp": "^2.0.0"
          }
        }
      }
    },
    "ethereumjs-account": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/ethereumjs-account/-/ethereumjs-account-2.0.5.tgz",
      "integrity": "sha512-bgDojnXGjhMwo6eXQC0bY6UK2liSFUSMwwylOmQvZbSl/D7NXQ3+vrGO46ZeOgjGfxXmgIeVNDIiHw7fNZM4VA==",
      "requires": {
        "ethereumjs-util": "^5.0.0",
        "rlp": "^2.0.0",
        "safe-buffer": "^5.1.1"
      }
    },
    "ethereumjs-block": {
      "version": "1.7.1",
      "resolved": "https://registry.npmjs.org/ethereumjs-block/-/ethereumjs-block-1.7.1.tgz",
      "integrity": "sha512-B+sSdtqm78fmKkBq78/QLKJbu/4Ts4P2KFISdgcuZUPDm9x+N7qgBPIIFUGbaakQh8bzuquiRVbdmvPKqbILRg==",
      "requires": {
        "async": "^2.0.1",
        "ethereum-common": "0.2.0",
        "ethereumjs-tx": "^1.2.2",
        "ethereumjs-util": "^5.0.0",
        "merkle-patricia-tree": "^2.1.2"
      },
      "dependencies": {
        "ethereum-common": {
          "version": "0.2.0",
          "resolved": "https://registry.npmjs.org/ethereum-common/-/ethereum-common-0.2.0.tgz",
          "integrity": "sha512-XOnAR/3rntJgbCdGhqdaLIxDLWKLmsZOGhHdBKadEr6gEnJLH52k93Ou+TUdFaPN3hJc3isBZBal3U/XZ15abA=="
        }
      }
    },
    "ethereumjs-blockstream": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/ethereumjs-blockstream/-/ethereumjs-blockstream-2.0.7.tgz",
      "integrity": "sha512-sfUdy3F9ShoUpW28C2Z1H8LzFu+oSxtC1lUjmwXYQsENappFOhKUhsODP72hzfo3GZQXfQnpLXWE3yUcU2/t7g==",
      "requires": {
        "immutable": "3.8.1",
        "source-map-support": "0.4.14",
        "uuid": "3.0.1"
      },
      "dependencies": {
        "uuid": {
          "version": "3.0.1",
          "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.0.1.tgz",
          "integrity": "sha1-ZUS7ot/ajBzxfmKaOjBeK7H+5sE="
        }
      }
    },
    "ethereumjs-common": {
      "version": "1.5.2",
      "resolved": "https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-1.5.2.tgz",
      "integrity": "sha512-hTfZjwGX52GS2jcVO6E2sx4YuFnf0Fhp5ylo4pEPhEffNln7vS59Hr5sLnp3/QCazFLluuBZ+FZ6J5HTp0EqCA=="
    },
    "ethereumjs-tx": {
      "version": "1.3.7",
      "resolved": "https://registry.npmjs.org/ethereumjs-tx/-/ethereumjs-tx-1.3.7.tgz",
      "integrity": "sha512-wvLMxzt1RPhAQ9Yi3/HKZTn0FZYpnsmQdbKYfUUpi4j1SEIcbkd9tndVjcPrufY3V7j2IebOpC00Zp2P/Ay2kA==",
      "requires": {
        "ethereum-common": "^0.0.18",
        "ethereumjs-util": "^5.0.0"
      }
    },
    "ethereumjs-util": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ethereumjs-util/-/ethereumjs-util-5.2.0.tgz",
      "integrity": "sha512-CJAKdI0wgMbQFLlLRtZKGcy/L6pzVRgelIZqRqNbuVFM3K9VEnyfbcvz0ncWMRNCe4kaHWjwRYQcYMucmwsnWA==",
      "requires": {
        "bn.js": "^4.11.0",
        "create-hash": "^1.1.2",
        "ethjs-util": "^0.1.3",
        "keccak": "^1.0.2",
        "rlp": "^2.0.0",
        "safe-buffer": "^5.1.1",
        "secp256k1": "^3.0.1"
      }
    },
    "ethereumjs-vm": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/ethereumjs-vm/-/ethereumjs-vm-2.6.0.tgz",
      "integrity": "sha512-r/XIUik/ynGbxS3y+mvGnbOKnuLo40V5Mj1J25+HEO63aWYREIqvWeRO/hnROlMBE5WoniQmPmhiaN0ctiHaXw==",
      "requires": {
        "async": "^2.1.2",
        "async-eventemitter": "^0.2.2",
        "ethereumjs-account": "^2.0.3",
        "ethereumjs-block": "~2.2.0",
        "ethereumjs-common": "^1.1.0",
        "ethereumjs-util": "^6.0.0",
        "fake-merkle-patricia-tree": "^1.0.1",
        "functional-red-black-tree": "^1.0.1",
        "merkle-patricia-tree": "^2.3.2",
        "rustbn.js": "~0.2.0",
        "safe-buffer": "^5.1.1"
      },
      "dependencies": {
        "async-eventemitter": {
          "version": "0.2.4",
          "resolved": "https://registry.npmjs.org/async-eventemitter/-/async-eventemitter-0.2.4.tgz",
          "integrity": "sha512-pd20BwL7Yt1zwDFy+8MX8F1+WCT8aQeKj0kQnTrH9WaeRETlRamVhD0JtRPmrV4GfOJ2F9CvdQkZeZhnh2TuHw==",
          "requires": {
            "async": "^2.4.0"
          }
        },
        "ethereumjs-block": {
          "version": "2.2.2",
          "resolved": "https://registry.npmjs.org/ethereumjs-block/-/ethereumjs-block-2.2.2.tgz",
          "integrity": "sha512-2p49ifhek3h2zeg/+da6XpdFR3GlqY3BIEiqxGF8j9aSRIgkb7M1Ky+yULBKJOu8PAZxfhsYA+HxUk2aCQp3vg==",
          "requires": {
            "async": "^2.0.1",
            "ethereumjs-common": "^1.5.0",
            "ethereumjs-tx": "^2.1.1",
            "ethereumjs-util": "^5.0.0",
            "merkle-patricia-tree": "^2.1.2"
          },
          "dependencies": {
            "ethereumjs-util": {
              "version": "5.2.1",
              "resolved": "https://registry.npmjs.org/ethereumjs-util/-/ethereumjs-util-5.2.1.tgz",
              "integrity": "sha512-v3kT+7zdyCm1HIqWlLNrHGqHGLpGYIhjeHxQjnDXjLT2FyGJDsd3LWMYUo7pAFRrk86CR3nUJfhC81CCoJNNGQ==",
              "requires": {
                "bn.js": "^4.11.0",
                "create-hash": "^1.1.2",
                "elliptic": "^6.5.2",
                "ethereum-cryptography": "^0.1.3",
                "ethjs-util": "^0.1.3",
                "rlp": "^2.0.0",
                "safe-buffer": "^5.1.1"
              }
            }
          }
        },
        "ethereumjs-tx": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ethereumjs-tx/-/ethereumjs-tx-2.1.2.tgz",
          "integrity": "sha512-zZEK1onCeiORb0wyCXUvg94Ve5It/K6GD1K+26KfFKodiBiS6d9lfCXlUKGBBdQ+bv7Day+JK0tj1K+BeNFRAw==",
          "requires": {
            "ethereumjs-common": "^1.5.0",
            "ethereumjs-util": "^6.0.0"
          }
        },
        "ethereumjs-util": {
          "version": "6.2.1",
          "resolved": "https://registry.npmjs.org/ethereumjs-util/-/ethereumjs-util-6.2.1.tgz",
          "integrity": "sha512-W2Ktez4L01Vexijrm5EB6w7dg4n/TgpoYU4avuT5T3Vmnw/eCRtiBrJfQYS/DCSvDIOLn2k57GcHdeBcgVxAqw==",
          "requires": {
            "@types/bn.js": "^4.11.3",
            "bn.js": "^4.11.0",
            "create-hash": "^1.1.2",
            "elliptic": "^6.5.2",
            "ethereum-cryptography": "^0.1.3",
            "ethjs-util": "0.1.6",
            "rlp": "^2.2.3"
          }
        }
      }
    },
    "ethjs-util": {
      "version": "0.1.6",
      "resolved": "https://registry.npmjs.org/ethjs-util/-/ethjs-util-0.1.6.tgz",
      "integrity": "sha512-CUnVOQq7gSpDHZVVrQW8ExxUETWrnrvXYvYz55wOU8Uj4VCgw56XC2B/fVqQN+f7gmrnRHSLVnFAwsCuNwji8w==",
      "requires": {
        "is-hex-prefixed": "1.0.0",
        "strip-hex-prefix": "1.0.0"
      }
    },
    "event-emitter": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/event-emitter/-/event-emitter-0.3.5.tgz",
      "integrity": "sha1-34xp7vFkeSPHFXuc6DhAYQsCzDk=",
      "requires": {
        "d": "1",
        "es5-ext": "~0.10.14"
      }
    },
    "events": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/events/-/events-3.1.0.tgz",
      "integrity": "sha512-Rv+u8MLHNOdMjTAFeT3nCjHn2aGlx435FP/sDHNaRhDEMwyI/aB22Kj2qIN8R0cw3z28psEQLYwxVKLsKrMgWg=="
    },
    "evp_bytestokey": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/evp_bytestokey/-/evp_bytestokey-1.0.3.tgz",
      "integrity": "sha512-/f2Go4TognH/KvCISP7OUsHn85hT9nUkxxA9BEWxFn+Oj9o8ZNLm/40hdlgSLyuOimsrTKLUMEorQexp/aPQeA==",
      "requires": {
        "md5.js": "^1.3.4",
        "safe-buffer": "^5.1.1"
      }
    },
    "execa": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/execa/-/execa-0.7.0.tgz",
      "integrity": "sha1-lEvs00zEHuMqY6n68nrVpl/Fl3c=",
      "requires": {
        "cross-spawn": "^5.0.1",
        "get-stream": "^3.0.0",
        "is-stream": "^1.1.0",
        "npm-run-path": "^2.0.0",
        "p-finally": "^1.0.0",
        "signal-exit": "^3.0.0",
        "strip-eof": "^1.0.0"
      }
    },
    "expand-brackets": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/expand-brackets/-/expand-brackets-2.1.4.tgz",
      "integrity": "sha1-t3c14xXOMPa27/D4OwQVGiJEliI=",
      "requires": {
        "debug": "^2.3.3",
        "define-property": "^0.2.5",
        "extend-shallow": "^2.0.1",
        "posix-character-classes": "^0.1.0",
        "regex-not": "^1.0.0",
        "snapdragon": "^0.8.1",
        "to-regex": "^3.0.1"
      },
      "dependencies": {
        "define-property": {
          "version": "0.2.5",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
          "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
          "requires": {
            "is-descriptor": "^0.1.0"
          }
        },
        "extend-shallow": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
          "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
          "requires": {
            "is-extendable": "^0.1.0"
          }
        }
      }
    },
    "ext": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/ext/-/ext-1.4.0.tgz",
      "integrity": "sha512-Key5NIsUxdqKg3vIsdw9dSuXpPCQ297y6wBjL30edxwPgt2E44WcWBZey/ZvUc6sERLTxKdyCu4gZFmUbk1Q7A==",
      "requires": {
        "type": "^2.0.0"
      },
      "dependencies": {
        "type": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/type/-/type-2.0.0.tgz",
          "integrity": "sha512-KBt58xCHry4Cejnc2ISQAF7QY+ORngsWfxezO68+12hKV6lQY8P/psIkcbjeHWn7MqcgciWJyCCevFMJdIXpow=="
        }
      }
    },
    "extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
    },
    "extend-shallow": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-3.0.2.tgz",
      "integrity": "sha1-Jqcarwc7OfshJxcnRhMcJwQCjbg=",
      "requires": {
        "assign-symbols": "^1.0.0",
        "is-extendable": "^1.0.1"
      },
      "dependencies": {
        "is-extendable": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/is-extendable/-/is-extendable-1.0.1.tgz",
          "integrity": "sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==",
          "requires": {
            "is-plain-object": "^2.0.4"
          }
        }
      }
    },
    "extglob": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/extglob/-/extglob-2.0.4.tgz",
      "integrity": "sha512-Nmb6QXkELsuBr24CJSkilo6UHHgbekK5UiZgfE6UHD3Eb27YC6oD+bhcT+tJ6cl8dmsgdQxnWlcry8ksBIBLpw==",
      "requires": {
        "array-unique": "^0.3.2",
        "define-property": "^1.0.0",
        "expand-brackets": "^2.1.4",
        "extend-shallow": "^2.0.1",
        "fragment-cache": "^0.2.1",
        "regex-not": "^1.0.0",
        "snapdragon": "^0.8.1",
        "to-regex": "^3.0.1"
      },
      "dependencies": {
        "define-property": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-1.0.0.tgz",
          "integrity": "sha1-dp66rz9KY6rTr56NMEybvnm/sOY=",
          "requires": {
            "is-descriptor": "^1.0.0"
          }
        },
        "extend-shallow": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
          "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
          "requires": {
            "is-extendable": "^0.1.0"
          }
        },
        "is-accessor-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz",
          "integrity": "sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==",
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-data-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz",
          "integrity": "sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==",
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-descriptor": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz",
          "integrity": "sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==",
          "requires": {
            "is-accessor-descriptor": "^1.0.0",
            "is-data-descriptor": "^1.0.0",
            "kind-of": "^6.0.2"
          }
        },
        "kind-of": {
          "version": "6.0.3",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
          "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw=="
        }
      }
    },
    "extsprintf": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
      "integrity": "sha1-lpGEQOMEGnpBT4xS48V06zw+HgU="
    },
    "fake-merkle-patricia-tree": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/fake-merkle-patricia-tree/-/fake-merkle-patricia-tree-1.0.1.tgz",
      "integrity": "sha1-S4w6z7Ugr635hgsfFM2M40As3dM=",
      "requires": {
        "checkpoint-store": "^1.1.0"
      }
    },
    "fast-deep-equal": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.1.tgz",
      "integrity": "sha512-8UEa58QDLauDNfpbrX55Q9jrGHThw2ZMdOky5Gl1CDtVeJDPVrG4Jxx1N8jw2gkWaff5UUuX1KJd+9zGe2B+ZA=="
    },
    "fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw=="
    },
    "fbemitter": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/fbemitter/-/fbemitter-2.1.1.tgz",
      "integrity": "sha1-Uj4U/a9SSIBbsC9i78M75wP1GGU=",
      "requires": {
        "fbjs": "^0.8.4"
      }
    },
    "fbjs": {
      "version": "0.8.17",
      "resolved": "https://registry.npmjs.org/fbjs/-/fbjs-0.8.17.tgz",
      "integrity": "sha1-xNWY6taUkRJlPWWIsBpc3Nn5D90=",
      "requires": {
        "core-js": "^1.0.0",
        "isomorphic-fetch": "^2.1.1",
        "loose-envify": "^1.0.0",
        "object-assign": "^4.1.0",
        "promise": "^7.1.1",
        "setimmediate": "^1.0.5",
        "ua-parser-js": "^0.7.18"
      }
    },
    "fetch-ponyfill": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/fetch-ponyfill/-/fetch-ponyfill-4.1.0.tgz",
      "integrity": "sha1-rjzl9zLGReq4fkroeTQUcJsjmJM=",
      "requires": {
        "node-fetch": "~1.7.1"
      }
    },
    "file-uri-to-path": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz",
      "integrity": "sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw=="
    },
    "fill-range": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-4.0.0.tgz",
      "integrity": "sha1-1USBHUKPmOsGpj3EAtJAPDKMOPc=",
      "requires": {
        "extend-shallow": "^2.0.1",
        "is-number": "^3.0.0",
        "repeat-string": "^1.6.1",
        "to-regex-range": "^2.1.0"
      },
      "dependencies": {
        "extend-shallow": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
          "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
          "requires": {
            "is-extendable": "^0.1.0"
          }
        }
      }
    },
    "find-up": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-2.1.0.tgz",
      "integrity": "sha1-RdG35QbHF93UgndaK3eSCjwMV6c=",
      "requires": {
        "locate-path": "^2.0.0"
      }
    },
    "find-versions": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/find-versions/-/find-versions-2.0.0.tgz",
      "integrity": "sha1-KtkNSQ9oKMGqQCks9wmsMxghDDw=",
      "requires": {
        "array-uniq": "^1.0.0",
        "semver-regex": "^1.0.0"
      }
    },
    "follow-redirects": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.13.2.tgz",
      "integrity": "sha512-6mPTgLxYm3r6Bkkg0vNM0HTjfGrOEtsfbhagQvbxDEsEkpNhw582upBaoRZylzen6krEmxXJgt9Ju6HiI4O7BA=="
    },
    "for-each": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.3.tgz",
      "integrity": "sha512-jqYfLp7mo9vIyQf8ykW2v7A+2N4QjeCeI5+Dz9XraiO1ign81wjiH7Fb9vSOWvQfNtmSa4H2RoQTrrXivdUZmw==",
      "requires": {
        "is-callable": "^1.1.3"
      }
    },
    "for-in": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/for-in/-/for-in-1.0.2.tgz",
      "integrity": "sha1-gQaNKVqBQuwKxybG4iAMMPttXoA="
    },
    "forever-agent": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
      "integrity": "sha1-+8cfDEGt6zf5bFd60e1C2P2sypE="
    },
    "form-data": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
      "requires": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.6",
        "mime-types": "^2.1.12"
      }
    },
    "fragment-cache": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/fragment-cache/-/fragment-cache-0.2.1.tgz",
      "integrity": "sha1-QpD60n8T6Jvn8zeZxrxaCr//DRk=",
      "requires": {
        "map-cache": "^0.2.2"
      }
    },
    "fs-extra": {
      "version": "0.30.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-0.30.0.tgz",
      "integrity": "sha1-8jP/zAjU2n1DLapEl3aYnbHfk/A=",
      "requires": {
        "graceful-fs": "^4.1.2",
        "jsonfile": "^2.1.0",
        "klaw": "^1.0.0",
        "path-is-absolute": "^1.0.0",
        "rimraf": "^2.2.8"
      }
    },
    "fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8="
    },
    "fsevents": {
      "version": "1.2.11",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-1.2.11.tgz",
      "integrity": "sha512-+ux3lx6peh0BpvY0JebGyZoiR4D+oYzdPZMKJwkZ+sFkNJzpL7tXc/wehS49gUAxg3tmMHPHZkA8JU2rhhgDHw==",
      "optional": true,
      "requires": {
        "bindings": "^1.5.0",
        "nan": "^2.12.1",
        "node-pre-gyp": "*"
      },
      "dependencies": {
        "abbrev": {
          "version": "1.1.1",
          "resolved": false,
          "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
          "optional": true
        },
        "ansi-regex": {
          "version": "2.1.1",
          "resolved": false,
          "integrity": "sha1-w7M6te42DYbg5ijwRorn7yfWVN8=",
          "optional": true
        },
        "aproba": {
          "version": "1.2.0",
          "resolved": false,
          "integrity": "sha512-Y9J6ZjXtoYh8RnXVCMOU/ttDmk1aBjunq9vO0ta5x85WDQiQfUF9sIPBITdbiiIVcBo03Hi3jMxigBtsddlXRw==",
          "optional": true
        },
        "are-we-there-yet": {
          "version": "1.1.5",
          "resolved": false,
          "integrity": "sha512-5hYdAkZlcG8tOLujVDTgCT+uPX0VnpAH28gWsLfzpXYm7wP6mp5Q/gYyR7YQ0cKVJcXJnl3j2kpBan13PtQf6w==",
          "optional": true,
          "requires": {
            "delegates": "^1.0.0",
            "readable-stream": "^2.0.6"
          }
        },
        "balanced-match": {
          "version": "1.0.0",
          "resolved": false,
          "integrity": "sha1-ibTRmasr7kneFk6gK4nORi1xt2c=",
          "optional": true
        },
        "brace-expansion": {
          "version": "1.1.11",
          "resolved": false,
          "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
          "optional": true,
          "requires": {
            "balanced-match": "^1.0.0",
            "concat-map": "0.0.1"
          }
        },
        "chownr": {
          "version": "1.1.3",
          "resolved": false,
          "integrity": "sha512-i70fVHhmV3DtTl6nqvZOnIjbY0Pe4kAUjwHj8z0zAdgBtYrJyYwLKCCuRBQ5ppkyL0AkN7HKRnETdmdp1zqNXw==",
          "optional": true
        },
        "code-point-at": {
          "version": "1.1.0",
          "resolved": false,
          "integrity": "sha1-DQcLTQQ6W+ozovGkDi7bPZpMz3c=",
          "optional": true
        },
        "concat-map": {
          "version": "0.0.1",
          "resolved": false,
          "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=",
          "optional": true
        },
        "console-control-strings": {
          "version": "1.1.0",
          "resolved": false,
          "integrity": "sha1-PXz0Rk22RG6mRL9LOVB/mFEAjo4=",
          "optional": true
        },
        "core-util-is": {
          "version": "1.0.2",
          "resolved": false,
          "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=",
          "optional": true
        },
        "debug": {
          "version": "3.2.6",
          "resolved": false,
          "integrity": "sha512-mel+jf7nrtEl5Pn1Qx46zARXKDpBbvzezse7p7LqINmdoIk8PYP5SySaxEmYv6TZ0JyEKA1hsCId6DIhgITtWQ==",
          "optional": true,
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "deep-extend": {
          "version": "0.6.0",
          "resolved": false,
          "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==",
          "optional": true
        },
        "delegates": {
          "version": "1.0.0",
          "resolved": false,
          "integrity": "sha1-hMbhWbgZBP3KWaDvRM2HDTElD5o=",
          "optional": true
        },
        "detect-libc": {
          "version": "1.0.3",
          "resolved": false,
          "integrity": "sha1-+hN8S9aY7fVc1c0CrFWfkaTEups=",
          "optional": true
        },
        "fs-minipass": {
          "version": "1.2.7",
          "resolved": false,
          "integrity": "sha512-GWSSJGFy4e9GUeCcbIkED+bgAoFyj7XF1mV8rma3QW4NIqX9Kyx79N/PF61H5udOV3aY1IaMLs6pGbH71nlCTA==",
          "optional": true,
          "requires": {
            "minipass": "^2.6.0"
          }
        },
        "fs.realpath": {
          "version": "1.0.0",
          "resolved": false,
          "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
          "optional": true
        },
        "gauge": {
          "version": "2.7.4",
          "resolved": false,
          "integrity": "sha1-LANAXHU4w51+s3sxcCLjJfsBi/c=",
          "optional": true,
          "requires": {
            "aproba": "^1.0.3",
            "console-control-strings": "^1.0.0",
            "has-unicode": "^2.0.0",
            "object-assign": "^4.1.0",
            "signal-exit": "^3.0.0",
            "string-width": "^1.0.1",
            "strip-ansi": "^3.0.1",
            "wide-align": "^1.1.0"
          }
        },
        "glob": {
          "version": "7.1.6",
          "resolved": false,
          "integrity": "sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==",
          "optional": true,
          "requires": {
            "fs.realpath": "^1.0.0",
            "inflight": "^1.0.4",
            "inherits": "2",
            "minimatch": "^3.0.4",
            "once": "^1.3.0",
            "path-is-absolute": "^1.0.0"
          }
        },
        "has-unicode": {
          "version": "2.0.1",
          "resolved": false,
          "integrity": "sha1-4Ob+aijPUROIVeCG0Wkedx3iqLk=",
          "optional": true
        },
        "iconv-lite": {
          "version": "0.4.24",
          "resolved": false,
          "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
          "optional": true,
          "requires": {
            "safer-buffer": ">= 2.1.2 < 3"
          }
        },
        "ignore-walk": {
          "version": "3.0.3",
          "resolved": false,
          "integrity": "sha512-m7o6xuOaT1aqheYHKf8W6J5pYH85ZI9w077erOzLje3JsB1gkafkAhHHY19dqjulgIZHFm32Cp5uNZgcQqdJKw==",
          "optional": true,
          "requires": {
            "minimatch": "^3.0.4"
          }
        },
        "inflight": {
          "version": "1.0.6",
          "resolved": false,
          "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
          "optional": true,
          "requires": {
            "once": "^1.3.0",
            "wrappy": "1"
          }
        },
        "inherits": {
          "version": "2.0.4",
          "resolved": false,
          "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
          "optional": true
        },
        "ini": {
          "version": "1.3.5",
          "resolved": false,
          "integrity": "sha512-RZY5huIKCMRWDUqZlEi72f/lmXKMvuszcMBduliQ3nnWbx9X/ZBQO7DijMEYS9EhHBb2qacRUMtC7svLwe0lcw==",
          "optional": true
        },
        "is-fullwidth-code-point": {
          "version": "1.0.0",
          "resolved": false,
          "integrity": "sha1-754xOG8DGn8NZDr4L95QxFfvAMs=",
          "optional": true,
          "requires": {
            "number-is-nan": "^1.0.0"
          }
        },
        "isarray": {
          "version": "1.0.0",
          "resolved": false,
          "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=",
          "optional": true
        },
        "minimatch": {
          "version": "3.0.4",
          "resolved": false,
          "integrity": "sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==",
          "optional": true,
          "requires": {
            "brace-expansion": "^1.1.7"
          }
        },
        "minimist": {
          "version": "0.0.8",
          "resolved": false,
          "integrity": "sha1-hX/Kv8M5fSYluCKCYuhqp6ARsF0=",
          "optional": true
        },
        "minipass": {
          "version": "2.9.0",
          "resolved": false,
          "integrity": "sha512-wxfUjg9WebH+CUDX/CdbRlh5SmfZiy/hpkxaRI16Y9W56Pa75sWgd/rvFilSgrauD9NyFymP/+JFV3KwzIsJeg==",
          "optional": true,
          "requires": {
            "safe-buffer": "^5.1.2",
            "yallist": "^3.0.0"
          }
        },
        "minizlib": {
          "version": "1.3.3",
          "resolved": false,
          "integrity": "sha512-6ZYMOEnmVsdCeTJVE0W9ZD+pVnE8h9Hma/iOwwRDsdQoePpoX56/8B6z3P9VNwppJuBKNRuFDRNRqRWexT9G9Q==",
          "optional": true,
          "requires": {
            "minipass": "^2.9.0"
          }
        },
        "mkdirp": {
          "version": "0.5.1",
          "resolved": false,
          "integrity": "sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM=",
          "optional": true,
          "requires": {
            "minimist": "0.0.8"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": false,
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "optional": true
        },
        "needle": {
          "version": "2.4.0",
          "resolved": false,
          "integrity": "sha512-4Hnwzr3mi5L97hMYeNl8wRW/Onhy4nUKR/lVemJ8gJedxxUyBLm9kkrDColJvoSfwi0jCNhD+xCdOtiGDQiRZg==",
          "optional": true,
          "requires": {
            "debug": "^3.2.6",
            "iconv-lite": "^0.4.4",
            "sax": "^1.2.4"
          }
        },
        "node-pre-gyp": {
          "version": "0.14.0",
          "resolved": false,
          "integrity": "sha512-+CvDC7ZttU/sSt9rFjix/P05iS43qHCOOGzcr3Ry99bXG7VX953+vFyEuph/tfqoYu8dttBkE86JSKBO2OzcxA==",
          "optional": true,
          "requires": {
            "detect-libc": "^1.0.2",
            "mkdirp": "^0.5.1",
            "needle": "^2.2.1",
            "nopt": "^4.0.1",
            "npm-packlist": "^1.1.6",
            "npmlog": "^4.0.2",
            "rc": "^1.2.7",
            "rimraf": "^2.6.1",
            "semver": "^5.3.0",
            "tar": "^4.4.2"
          }
        },
        "nopt": {
          "version": "4.0.1",
          "resolved": false,
          "integrity": "sha1-0NRoWv1UFRk8jHUFYC0NF81kR00=",
          "optional": true,
          "requires": {
            "abbrev": "1",
            "osenv": "^0.1.4"
          }
        },
        "npm-bundled": {
          "version": "1.1.1",
          "resolved": false,
          "integrity": "sha512-gqkfgGePhTpAEgUsGEgcq1rqPXA+tv/aVBlgEzfXwA1yiUJF7xtEt3CtVwOjNYQOVknDk0F20w58Fnm3EtG0fA==",
          "optional": true,
          "requires": {
            "npm-normalize-package-bin": "^1.0.1"
          }
        },
        "npm-normalize-package-bin": {
          "version": "1.0.1",
          "resolved": false,
          "integrity": "sha512-EPfafl6JL5/rU+ot6P3gRSCpPDW5VmIzX959Ob1+ySFUuuYHWHekXpwdUZcKP5C+DS4GEtdJluwBjnsNDl+fSA==",
          "optional": true
        },
        "npm-packlist": {
          "version": "1.4.7",
          "resolved": false,
          "integrity": "sha512-vAj7dIkp5NhieaGZxBJB8fF4R0078rqsmhJcAfXZ6O7JJhjhPK96n5Ry1oZcfLXgfun0GWTZPOxaEyqv8GBykQ==",
          "optional": true,
          "requires": {
            "ignore-walk": "^3.0.1",
            "npm-bundled": "^1.0.1"
          }
        },
        "npmlog": {
          "version": "4.1.2",
          "resolved": false,
          "integrity": "sha512-2uUqazuKlTaSI/dC8AzicUck7+IrEaOnN/e0jd3Xtt1KcGpwx30v50mL7oPyr/h9bL3E4aZccVwpwP+5W9Vjkg==",
          "optional": true,
          "requires": {
            "are-we-there-yet": "~1.1.2",
            "console-control-strings": "~1.1.0",
            "gauge": "~2.7.3",
            "set-blocking": "~2.0.0"
          }
        },
        "number-is-nan": {
          "version": "1.0.1",
          "resolved": false,
          "integrity": "sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=",
          "optional": true
        },
        "object-assign": {
          "version": "4.1.1",
          "resolved": false,
          "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM=",
          "optional": true
        },
        "once": {
          "version": "1.4.0",
          "resolved": false,
          "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
          "optional": true,
          "requires": {
            "wrappy": "1"
          }
        },
        "os-homedir": {
          "version": "1.0.2",
          "resolved": false,
          "integrity": "sha1-/7xJiDNuDoM94MFox+8VISGqf7M=",
          "optional": true
        },
        "os-tmpdir": {
          "version": "1.0.2",
          "resolved": false,
          "integrity": "sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=",
          "optional": true
        },
        "osenv": {
          "version": "0.1.5",
          "resolved": false,
          "integrity": "sha512-0CWcCECdMVc2Rw3U5w9ZjqX6ga6ubk1xDVKxtBQPK7wis/0F2r9T6k4ydGYhecl7YUBxBVxhL5oisPsNxAPe2g==",
          "optional": true,
          "requires": {
            "os-homedir": "^1.0.0",
            "os-tmpdir": "^1.0.0"
          }
        },
        "path-is-absolute": {
          "version": "1.0.1",
          "resolved": false,
          "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
          "optional": true
        },
        "process-nextick-args": {
          "version": "2.0.1",
          "resolved": false,
          "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
          "optional": true
        },
        "rc": {
          "version": "1.2.8",
          "resolved": false,
          "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
          "optional": true,
          "requires": {
            "deep-extend": "^0.6.0",
            "ini": "~1.3.0",
            "minimist": "^1.2.0",
            "strip-json-comments": "~2.0.1"
          },
          "dependencies": {
            "minimist": {
              "version": "1.2.0",
              "resolved": false,
              "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=",
              "optional": true
            }
          }
        },
        "readable-stream": {
          "version": "2.3.6",
          "resolved": false,
          "integrity": "sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==",
          "optional": true,
          "requires": {
            "core-util-is": "~1.0.0",
            "inherits": "~2.0.3",
            "isarray": "~1.0.0",
            "process-nextick-args": "~2.0.0",
            "safe-buffer": "~5.1.1",
            "string_decoder": "~1.1.1",
            "util-deprecate": "~1.0.1"
          }
        },
        "rimraf": {
          "version": "2.7.1",
          "resolved": false,
          "integrity": "sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==",
          "optional": true,
          "requires": {
            "glob": "^7.1.3"
          }
        },
        "safe-buffer": {
          "version": "5.1.2",
          "resolved": false,
          "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
          "optional": true
        },
        "safer-buffer": {
          "version": "2.1.2",
          "resolved": false,
          "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
          "optional": true
        },
        "sax": {
          "version": "1.2.4",
          "resolved": false,
          "integrity": "sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw==",
          "optional": true
        },
        "semver": {
          "version": "5.7.1",
          "resolved": false,
          "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
          "optional": true
        },
        "set-blocking": {
          "version": "2.0.0",
          "resolved": false,
          "integrity": "sha1-BF+XgtARrppoA93TgrJDkrPYkPc=",
          "optional": true
        },
        "signal-exit": {
          "version": "3.0.2",
          "resolved": false,
          "integrity": "sha1-tf3AjxKH6hF4Yo5BXiUTK3NkbG0=",
          "optional": true
        },
        "string-width": {
          "version": "1.0.2",
          "resolved": false,
          "integrity": "sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=",
          "optional": true,
          "requires": {
            "code-point-at": "^1.0.0",
            "is-fullwidth-code-point": "^1.0.0",
            "strip-ansi": "^3.0.0"
          }
        },
        "string_decoder": {
          "version": "1.1.1",
          "resolved": false,
          "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
          "optional": true,
          "requires": {
            "safe-buffer": "~5.1.0"
          }
        },
        "strip-ansi": {
          "version": "3.0.1",
          "resolved": false,
          "integrity": "sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=",
          "optional": true,
          "requires": {
            "ansi-regex": "^2.0.0"
          }
        },
        "strip-json-comments": {
          "version": "2.0.1",
          "resolved": false,
          "integrity": "sha1-PFMZQukIwml8DsNEhYwobHygpgo=",
          "optional": true
        },
        "tar": {
          "version": "4.4.13",
          "resolved": false,
          "integrity": "sha512-w2VwSrBoHa5BsSyH+KxEqeQBAllHhccyMFVHtGtdMpF4W7IRWfZjFiQceJPChOeTsSDVUpER2T8FA93pr0L+QA==",
          "optional": true,
          "requires": {
            "chownr": "^1.1.1",
            "fs-minipass": "^1.2.5",
            "minipass": "^2.8.6",
            "minizlib": "^1.2.1",
            "mkdirp": "^0.5.0",
            "safe-buffer": "^5.1.2",
            "yallist": "^3.0.3"
          }
        },
        "util-deprecate": {
          "version": "1.0.2",
          "resolved": false,
          "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=",
          "optional": true
        },
        "wide-align": {
          "version": "1.1.3",
          "resolved": false,
          "integrity": "sha512-QGkOQc8XL6Bt5PwnsExKBPuMKBxnGxWWW3fU55Xt4feHozMUhdUMaBCk290qpm/wG5u/RSKzwdAC4i51YigihA==",
          "optional": true,
          "requires": {
            "string-width": "^1.0.2 || 2"
          }
        },
        "wrappy": {
          "version": "1.0.2",
          "resolved": false,
          "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
          "optional": true
        },
        "yallist": {
          "version": "3.1.1",
          "resolved": false,
          "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
          "optional": true
        }
      }
    },
    "function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "functional-red-black-tree": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
      "integrity": "sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc="
    },
    "get-caller-file": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-1.0.3.tgz",
      "integrity": "sha512-3t6rVToeoZfYSGd8YoLFR2DJkiQrIiUrGcjvFX2mDw3bn6k2OtwHN0TNCLbBO+w8qTvimhDkv+LSscbJY1vE6w=="
    },
    "get-func-name": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/get-func-name/-/get-func-name-2.0.0.tgz",
      "integrity": "sha1-6td0q+5y4gQJQzoGY2YCPdaIekE=",
      "dev": true
    },
    "get-intrinsic": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.1.1.tgz",
      "integrity": "sha512-kWZrnVM42QCiEA2Ig1bG8zjoIMOgxWwYCEeNdwY6Tv/cOSeGpcoX4pXHfKUxNKVoArnrEr2e9srnAxxGIraS9Q==",
      "requires": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-symbols": "^1.0.1"
      }
    },
    "get-stream": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-3.0.0.tgz",
      "integrity": "sha1-jpQ9E1jcN1VQVOy+LtsFqhdO3hQ="
    },
    "get-value": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/get-value/-/get-value-2.0.6.tgz",
      "integrity": "sha1-3BXKHGcjh8p2vTesCjlbogQqLCg="
    },
    "getpass": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
      "integrity": "sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
      "requires": {
        "assert-plus": "^1.0.0"
      }
    },
    "glob": {
      "version": "7.1.6",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.6.tgz",
      "integrity": "sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==",
      "requires": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      }
    },
    "glob-parent": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-3.1.0.tgz",
      "integrity": "sha1-nmr2KZ2NO9K9QEMIMr0RPfkGxa4=",
      "requires": {
        "is-glob": "^3.1.0",
        "path-dirname": "^1.0.0"
      },
      "dependencies": {
        "is-glob": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-3.1.0.tgz",
          "integrity": "sha1-e6WuJCF4BKxwcHuWkiVnSGzD6Eo=",
          "requires": {
            "is-extglob": "^2.1.0"
          }
        }
      }
    },
    "global": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/global/-/global-4.4.0.tgz",
      "integrity": "sha512-wv/LAoHdRE3BeTGz53FAamhGlPLhlssK45usmGFThIi4XqnBmjKQ16u+RNbP7WvigRZDxUsM0J3gcQ5yicaL0w==",
      "requires": {
        "min-document": "^2.19.0",
        "process": "^0.11.10"
      }
    },
    "globals": {
      "version": "9.18.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-9.18.0.tgz",
      "integrity": "sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ=="
    },
    "graceful-fs": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.3.tgz",
      "integrity": "sha512-a30VEBm4PEdx1dRB7MFK7BejejvCvBronbLjht+sHuGYj8PHs7M/5Z+rt5lw551vZ7yfTCj4Vuyy3mSJytDWRQ=="
    },
    "growl": {
      "version": "1.10.5",
      "resolved": "https://registry.npmjs.org/growl/-/growl-1.10.5.tgz",
      "integrity": "sha512-qBr4OuELkhPenW6goKVXiv47US3clb3/IbuWF9KNKEijAy9oeHxU9IgzjvJhHkUzhaj7rOUD7+YGWqUjLp5oSA==",
      "dev": true
    },
    "handlebars": {
      "version": "4.7.3",
      "resolved": "https://registry.npmjs.org/handlebars/-/handlebars-4.7.3.tgz",
      "integrity": "sha512-SRGwSYuNfx8DwHD/6InAPzD6RgeruWLT+B8e8a7gGs8FWgHzlExpTFMEq2IA6QpAfOClpKHy6+8IqTjeBCu6Kg==",
      "requires": {
        "neo-async": "^2.6.0",
        "optimist": "^0.6.1",
        "source-map": "^0.6.1",
        "uglify-js": "^3.1.4"
      },
      "dependencies": {
        "source-map": {
          "version": "0.6.1",
          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
          "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="
        },
        "uglify-js": {
          "version": "3.7.7",
          "resolved": "https://registry.npmjs.org/uglify-js/-/uglify-js-3.7.7.tgz",
          "integrity": "sha512-FeSU+hi7ULYy6mn8PKio/tXsdSXN35lm4KgV2asx00kzrLU9Pi3oAslcJT70Jdj7PHX29gGUPOT6+lXGBbemhA==",
          "optional": true,
          "requires": {
            "commander": "~2.20.3",
            "source-map": "~0.6.1"
          }
        }
      }
    },
    "har-schema": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
      "integrity": "sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI="
    },
    "har-validator": {
      "version": "5.1.5",
      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
      "requires": {
        "ajv": "^6.12.3",
        "har-schema": "^2.0.0"
      },
      "dependencies": {
        "ajv": {
          "version": "6.12.6",
          "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
          "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
          "requires": {
            "fast-deep-equal": "^3.1.1",
            "fast-json-stable-stringify": "^2.0.0",
            "json-schema-traverse": "^0.4.1",
            "uri-js": "^4.2.2"
          }
        }
      }
    },
    "has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "requires": {
        "function-bind": "^1.1.1"
      }
    },
    "has-ansi": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/has-ansi/-/has-ansi-2.0.0.tgz",
      "integrity": "sha1-NPUEnOHs3ysGSa8+8k5F7TVBbZE=",
      "requires": {
        "ansi-regex": "^2.0.0"
      }
    },
    "has-flag": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-2.0.0.tgz",
      "integrity": "sha1-6CB68cx7MNRGzHC3NLXovhj4jVE="
    },
    "has-symbols": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.1.tgz",
      "integrity": "sha512-PLcsoqu++dmEIZB+6totNFKq/7Do+Z0u4oT0zKOJNl3lYK6vGwwu2hjHs+68OEZbTjiUE9bgOABXbP/GvrS0Kg=="
    },
    "has-value": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/has-value/-/has-value-1.0.0.tgz",
      "integrity": "sha1-GLKB2lhbHFxR3vJMkw7SmgvmsXc=",
      "requires": {
        "get-value": "^2.0.6",
        "has-values": "^1.0.0",
        "isobject": "^3.0.0"
      }
    },
    "has-values": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/has-values/-/has-values-1.0.0.tgz",
      "integrity": "sha1-lbC2P+whRmGab+V/51Yo1aOe/k8=",
      "requires": {
        "is-number": "^3.0.0",
        "kind-of": "^4.0.0"
      },
      "dependencies": {
        "kind-of": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-4.0.0.tgz",
          "integrity": "sha1-IIE989cSkosgc3hpGkUGb65y3Vc=",
          "requires": {
            "is-buffer": "^1.1.5"
          }
        }
      }
    },
    "hash-base": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/hash-base/-/hash-base-3.0.4.tgz",
      "integrity": "sha1-X8hoaEfs1zSZQDMZprCj8/auSRg=",
      "requires": {
        "inherits": "^2.0.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "hash.js": {
      "version": "1.1.7",
      "resolved": "https://registry.npmjs.org/hash.js/-/hash.js-1.1.7.tgz",
      "integrity": "sha512-taOaskGt4z4SOANNseOviYDvjEJinIkRgmp7LbKP2YTTmVxWBl87s/uzK9r+44BclBSp2X7K1hqeNfz9JbBeXA==",
      "requires": {
        "inherits": "^2.0.3",
        "minimalistic-assert": "^1.0.1"
      }
    },
    "he": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/he/-/he-1.1.1.tgz",
      "integrity": "sha1-k0EP0hsAlzUVH4howvJx80J+I/0=",
      "dev": true
    },
    "highlight.js": {
      "version": "9.18.1",
      "resolved": "https://registry.npmjs.org/highlight.js/-/highlight.js-9.18.1.tgz",
      "integrity": "sha512-OrVKYz70LHsnCgmbXctv/bfuvntIKDz177h0Co37DQ5jamGZLVmoCVMtjMtNZY3X9DrCcKfklHPNeA0uPZhSJg==",
      "dev": true
    },
    "hmac-drbg": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/hmac-drbg/-/hmac-drbg-1.0.1.tgz",
      "integrity": "sha1-0nRXAQJabHdabFRXk+1QL8DGSaE=",
      "requires": {
        "hash.js": "^1.0.3",
        "minimalistic-assert": "^1.0.0",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    },
    "home-or-tmp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/home-or-tmp/-/home-or-tmp-2.0.0.tgz",
      "integrity": "sha1-42w/LSyufXRqhX440Y1fMqeILbg=",
      "requires": {
        "os-homedir": "^1.0.0",
        "os-tmpdir": "^1.0.1"
      }
    },
    "hosted-git-info": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.5.tgz",
      "integrity": "sha512-kssjab8CvdXfcXMXVcvsXum4Hwdq9XGtRD3TteMEvEbq0LXyiNQr6AprqKqfeaDXze7SxWvRxdpwE6ku7ikLkg=="
    },
    "http-signature": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
      "integrity": "sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=",
      "requires": {
        "assert-plus": "^1.0.0",
        "jsprim": "^1.2.2",
        "sshpk": "^1.7.0"
      }
    },
    "https-browserify": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/https-browserify/-/https-browserify-1.0.0.tgz",
      "integrity": "sha1-7AbBDgo0wPL68Zn3/X/Hj//QPHM="
    },
    "husky": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/husky/-/husky-4.2.3.tgz",
      "integrity": "sha512-VxTsSTRwYveKXN4SaH1/FefRJYCtx+wx04sSVcOpD7N2zjoHxa+cEJ07Qg5NmV3HAK+IRKOyNVpi2YBIVccIfQ==",
      "dev": true,
      "requires": {
        "chalk": "^3.0.0",
        "ci-info": "^2.0.0",
        "compare-versions": "^3.5.1",
        "cosmiconfig": "^6.0.0",
        "find-versions": "^3.2.0",
        "opencollective-postinstall": "^2.0.2",
        "pkg-dir": "^4.2.0",
        "please-upgrade-node": "^3.2.0",
        "slash": "^3.0.0",
        "which-pm-runs": "^1.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "4.2.1",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.2.1.tgz",
          "integrity": "sha512-9VGjrMsG1vePxcSweQsN20KY/c4zN0h9fLjqAbwbPfahM3t+NL+M9HC8xeXG2I8pX5NoamTGNuomEUFI7fcUjA==",
          "dev": true,
          "requires": {
            "@types/color-name": "^1.1.1",
            "color-convert": "^2.0.1"
          }
        },
        "chalk": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/chalk/-/chalk-3.0.0.tgz",
          "integrity": "sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==",
          "dev": true,
          "requires": {
            "ansi-styles": "^4.1.0",
            "supports-color": "^7.1.0"
          }
        },
        "color-convert": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
          "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
          "dev": true,
          "requires": {
            "color-name": "~1.1.4"
          }
        },
        "color-name": {
          "version": "1.1.4",
          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
          "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
          "dev": true
        },
        "find-versions": {
          "version": "3.2.0",
          "resolved": "https://registry.npmjs.org/find-versions/-/find-versions-3.2.0.tgz",
          "integrity": "sha512-P8WRou2S+oe222TOCHitLy8zj+SIsVJh52VP4lvXkaFVnOFFdoWv1H1Jjvel1aI6NCFOAaeAVm8qrI0odiLcww==",
          "dev": true,
          "requires": {
            "semver-regex": "^2.0.0"
          }
        },
        "has-flag": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
          "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
          "dev": true
        },
        "semver-regex": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/semver-regex/-/semver-regex-2.0.0.tgz",
          "integrity": "sha512-mUdIBBvdn0PLOeP3TEkMH7HHeUP3GjsXCwKarjv/kGmUFOYg1VqEemKhoQpWMu6X2I8kHeuVdGibLGkVK+/5Qw==",
          "dev": true
        },
        "slash": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
          "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
          "dev": true
        },
        "supports-color": {
          "version": "7.1.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.1.0.tgz",
          "integrity": "sha512-oRSIpR8pxT1Wr2FquTNnGet79b3BWljqOuoW/h4oBhxJ/HUbX5nX6JSruTkvXDCFMwDPvsaTTbvMLKZWSy0R5g==",
          "dev": true,
          "requires": {
            "has-flag": "^4.0.0"
          }
        }
      }
    },
    "iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3"
      }
    },
    "ieee754": {
      "version": "1.1.13",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.1.13.tgz",
      "integrity": "sha512-4vf7I2LYV/HaWerSo3XmlMkp5eZ83i+/CDluXi/IGTs/O1sejBNhTtnxzmRZfvOUqj7lZjqHkeTvpgSFDlWZTg=="
    },
    "immediate": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/immediate/-/immediate-3.3.0.tgz",
      "integrity": "sha512-HR7EVodfFUdQCTIeySw+WDRFJlPcLOJbXfwwZ7Oom6tjsvZ3bOkCDJHehQC3nxJrv7+f9XecwazynjU8e4Vw3Q=="
    },
    "immutable": {
      "version": "3.8.1",
      "resolved": "https://registry.npmjs.org/immutable/-/immutable-3.8.1.tgz",
      "integrity": "sha1-IAgH8Rqw9ycQ6khVQt4IgHX2jNI="
    },
    "import-fresh": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.2.1.tgz",
      "integrity": "sha512-6e1q1cnWP2RXD9/keSkxHScg508CdXqXWgWBaETNhyuBFz+kUZlKboh+ISK+bU++DmbHimVBrOz/zzPe0sZ3sQ==",
      "dev": true,
      "requires": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      }
    },
    "inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
      "requires": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "interpret": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/interpret/-/interpret-1.2.0.tgz",
      "integrity": "sha512-mT34yGKMNceBQUoVn7iCDKDntA7SC6gycMAWzGx1z/CMCTV7b2AAtXlo3nRyHZ1FelRkQbQjprHSYGwzLtkVbw=="
    },
    "invariant": {
      "version": "2.2.4",
      "resolved": "https://registry.npmjs.org/invariant/-/invariant-2.2.4.tgz",
      "integrity": "sha512-phJfQVBuaJM5raOpJjSfkiD6BpbCE4Ns//LaXl6wGYtUBY83nWS6Rf9tXm2e8VaK60JEjYldbPif/A2B1C2gNA==",
      "requires": {
        "loose-envify": "^1.0.0"
      }
    },
    "invert-kv": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/invert-kv/-/invert-kv-1.0.0.tgz",
      "integrity": "sha1-EEqOSqym09jNFXqO+L+rLXo//bY="
    },
    "is-accessor-descriptor": {
      "version": "0.1.6",
      "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-0.1.6.tgz",
      "integrity": "sha1-qeEss66Nh2cn7u84Q/igiXtcmNY=",
      "requires": {
        "kind-of": "^3.0.2"
      }
    },
    "is-arguments": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-arguments/-/is-arguments-1.1.0.tgz",
      "integrity": "sha512-1Ij4lOMPl/xB5kBDn7I+b2ttPMKa8szhEIrXDuXQD/oe3HJLTLhqhgGspwgyGd6MOywBUqVvYicF72lkgDnIHg==",
      "requires": {
        "call-bind": "^1.0.0"
      }
    },
    "is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha1-d8mYQFJ6qOyxqLppe4BkWnqSap0="
    },
    "is-binary-path": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-1.0.1.tgz",
      "integrity": "sha1-dfFmQrSA8YenEcgUFh/TpKdlWJg=",
      "requires": {
        "binary-extensions": "^1.0.0"
      }
    },
    "is-buffer": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/is-buffer/-/is-buffer-1.1.6.tgz",
      "integrity": "sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w=="
    },
    "is-callable": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.3.tgz",
      "integrity": "sha512-J1DcMe8UYTBSrKezuIUTUwjXsho29693unXM2YhJUTR2txK/eG47bvNa/wipPFmZFgr/N6f1GA66dv0mEyTIyQ=="
    },
    "is-data-descriptor": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-0.1.4.tgz",
      "integrity": "sha1-C17mSDiOLIYCgueT8YVv7D8wG1Y=",
      "requires": {
        "kind-of": "^3.0.2"
      }
    },
    "is-date-object": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.0.2.tgz",
      "integrity": "sha512-USlDT524woQ08aoZFzh3/Z6ch9Y/EWXEHQ/AaRN0SkKq4t2Jw2R2339tSXmwuVoY7LLlBCbOIlx2myP/L5zk0g=="
    },
    "is-descriptor": {
      "version": "0.1.6",
      "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-0.1.6.tgz",
      "integrity": "sha512-avDYr0SB3DwO9zsMov0gKCESFYqCnE4hq/4z3TdUlukEy5t9C0YRq7HLrsN52NAcqXKaepeCD0n+B0arnVG3Hg==",
      "requires": {
        "is-accessor-descriptor": "^0.1.6",
        "is-data-descriptor": "^0.1.4",
        "kind-of": "^5.0.0"
      },
      "dependencies": {
        "kind-of": {
          "version": "5.1.0",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-5.1.0.tgz",
          "integrity": "sha512-NGEErnH6F2vUuXDh+OlbcKW7/wOcfdRHaZ7VWtqCztfHri/++YKmP51OdWeGPuqCOba6kk2OTe5d02VmTB80Pw=="
        }
      }
    },
    "is-extendable": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/is-extendable/-/is-extendable-0.1.1.tgz",
      "integrity": "sha1-YrEQ4omkcUGOPsNqYX1HLjAd/Ik="
    },
    "is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI="
    },
    "is-finite": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-finite/-/is-finite-1.1.0.tgz",
      "integrity": "sha512-cdyMtqX/BOqqNBBiKlIVkytNHm49MtMlYyn1zxzvJKWmFMlGzm+ry5BBfYyeY9YmNKbRSo/o7OX9w9ale0wg3w=="
    },
    "is-fn": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-fn/-/is-fn-1.0.0.tgz",
      "integrity": "sha1-lUPV3nvPWwiiLsiiC65uKG1RDYw="
    },
    "is-fullwidth-code-point": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz",
      "integrity": "sha1-754xOG8DGn8NZDr4L95QxFfvAMs=",
      "requires": {
        "number-is-nan": "^1.0.0"
      }
    },
    "is-function": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-function/-/is-function-1.0.2.tgz",
      "integrity": "sha512-lw7DUp0aWXYg+CBCN+JKkcE0Q2RayZnSvnZBlwgxHBQhqt5pZNVy4Ri7H9GmmXkdu7LUthszM+Tor1u/2iBcpQ=="
    },
    "is-glob": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.1.tgz",
      "integrity": "sha512-5G0tKtBTFImOqDnLB2hG6Bp2qcKEFduo4tZu9MT/H6NQv/ghhy30o55ufafxJ/LdH79LLs2Kfrn85TLKyA7BUg==",
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "is-hex-prefixed": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-hex-prefixed/-/is-hex-prefixed-1.0.0.tgz",
      "integrity": "sha1-fY035q135dEnFIkTxXPggtd39VQ="
    },
    "is-negative-zero": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.1.tgz",
      "integrity": "sha512-2z6JzQvZRa9A2Y7xC6dQQm4FSTSTNWjKIYYTt4246eMTJmIo0Q+ZyOsU66X8lxK1AbB92dFeglPLrhwpeRKO6w=="
    },
    "is-number": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-3.0.0.tgz",
      "integrity": "sha1-JP1iAaR4LPUFYcgQJ2r8fRLXEZU=",
      "requires": {
        "kind-of": "^3.0.2"
      }
    },
    "is-plain-object": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-2.0.4.tgz",
      "integrity": "sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==",
      "requires": {
        "isobject": "^3.0.1"
      }
    },
    "is-regex": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.0.5.tgz",
      "integrity": "sha512-vlKW17SNq44owv5AQR3Cq0bQPEb8+kF3UKZ2fiZNOWtztYE5i0CzCZxFDwO58qAOWtxdBRVO/V5Qin1wjCqFYQ==",
      "requires": {
        "has": "^1.0.3"
      }
    },
    "is-stream": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz",
      "integrity": "sha1-EtSj3U5o4Lec6428hBc66A2RykQ="
    },
    "is-symbol": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.0.3.tgz",
      "integrity": "sha512-OwijhaRSgqvhm/0ZdAcXNZt9lYdKFpcRDT5ULUuYXPoT794UNOdU+gpT6Rzo7b4V2HUl/op6GqY894AZwv9faQ==",
      "requires": {
        "has-symbols": "^1.0.1"
      }
    },
    "is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="
    },
    "is-utf8": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-utf8/-/is-utf8-0.2.1.tgz",
      "integrity": "sha1-Sw2hRCEE0bM2NA6AeX6GXPOffXI="
    },
    "is-windows": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-windows/-/is-windows-1.0.2.tgz",
      "integrity": "sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA=="
    },
    "isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
    },
    "isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA="
    },
    "isobject": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz",
      "integrity": "sha1-TkMekrEalzFjaqH5yNHMvP2reN8="
    },
    "isomorphic-fetch": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/isomorphic-fetch/-/isomorphic-fetch-2.2.1.tgz",
      "integrity": "sha1-YRrhrPFPXoH3KVB0coGf6XM1WKk=",
      "requires": {
        "node-fetch": "^1.0.1",
        "whatwg-fetch": ">=0.10.0"
      }
    },
    "isomorphic-unfetch": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/isomorphic-unfetch/-/isomorphic-unfetch-2.1.1.tgz",
      "integrity": "sha512-nd8AULy4i2rA8dv0nOBT9xieIegd3xi7NDxTQ9+iNXDTyaG6VbUYW3F+TdMRqxqXhDFWM2k7fttKx9W2Wd8JpQ==",
      "requires": {
        "node-fetch": "^2.1.2",
        "unfetch": "^3.1.0"
      },
      "dependencies": {
        "node-fetch": {
          "version": "2.6.0",
          "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.0.tgz",
          "integrity": "sha512-8dG4H5ujfvFiqDmVu9fQ5bOHUC15JMjMY/Zumv26oOvvVJjM67KF8koCWIabKQ1GJIa9r2mMZscBq/TbdOcmNA=="
        }
      }
    },
    "isstream": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
      "integrity": "sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="
    },
    "js-sha3": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/js-sha3/-/js-sha3-0.7.0.tgz",
      "integrity": "sha512-Wpks3yBDm0UcL5qlVhwW9Jr9n9i4FfeWBFOOXP5puDS/SiudJGhw7DPyBqn3487qD4F0lsC0q3zxink37f7zeA=="
    },
    "js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "js-yaml": {
      "version": "3.13.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.13.1.tgz",
      "integrity": "sha512-YfbcO7jXDdyj0DGxYVSlSeQNHbD7XPWvrVWeVUujrQEoZzWJIRrCPoyk6kL6IAjAG2IolMK4T0hNUe0HOUs5Jw==",
      "requires": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      }
    },
    "jsbn": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
      "integrity": "sha1-peZUwuWi3rXyAdls77yoDA7y9RM="
    },
    "jsesc": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-0.5.0.tgz",
      "integrity": "sha1-597mbjXW/Bb3EP6R1c9p9w8IkR0="
    },
    "json-loader": {
      "version": "0.5.7",
      "resolved": "https://registry.npmjs.org/json-loader/-/json-loader-0.5.7.tgz",
      "integrity": "sha512-QLPs8Dj7lnf3e3QYS1zkCo+4ZwqOiF9d/nZnYozTISxXWCfNs9yuky5rJw4/W34s7POaNlbZmQGaB5NiXCbP4w=="
    },
    "json-parse-better-errors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/json-parse-better-errors/-/json-parse-better-errors-1.0.2.tgz",
      "integrity": "sha512-mrqyZKfX5EhL7hvqcV6WG1yYjnjeuYDzDhhcAAUrq8Po85NBQBJP+ZDUT75qZQ98IkUoBqdkExkukOU7Ts2wrw==",
      "dev": true
    },
    "json-rpc-engine": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/json-rpc-engine/-/json-rpc-engine-3.8.0.tgz",
      "integrity": "sha512-6QNcvm2gFuuK4TKU1uwfH0Qd/cOSb9c1lls0gbnIhciktIUQJwz6NQNAW4B1KiGPenv7IKu97V222Yo1bNhGuA==",
      "requires": {
        "async": "^2.0.1",
        "babel-preset-env": "^1.7.0",
        "babelify": "^7.3.0",
        "json-rpc-error": "^2.0.0",
        "promise-to-callback": "^1.0.0",
        "safe-event-emitter": "^1.0.1"
      }
    },
    "json-rpc-error": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/json-rpc-error/-/json-rpc-error-2.0.0.tgz",
      "integrity": "sha1-p6+cICg4tekFxyUOVH8a/3cligI=",
      "requires": {
        "inherits": "^2.0.1"
      }
    },
    "json-rpc-random-id": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-rpc-random-id/-/json-rpc-random-id-1.0.1.tgz",
      "integrity": "sha1-uknZat7RRE27jaPSA3SKy7zeyMg="
    },
    "json-schema": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz",
      "integrity": "sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM="
    },
    "json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg=="
    },
    "json-stable-stringify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify/-/json-stable-stringify-1.0.1.tgz",
      "integrity": "sha1-mnWdOcXy/1A/1TAGRu1EX4jE+a8=",
      "requires": {
        "jsonify": "~0.0.0"
      }
    },
    "json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="
    },
    "json5": {
      "version": "0.5.1",
      "resolved": "https://registry.npmjs.org/json5/-/json5-0.5.1.tgz",
      "integrity": "sha1-Hq3nrMASA0rYTiOWdn6tn6VJWCE="
    },
    "jsonfile": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-2.4.0.tgz",
      "integrity": "sha1-NzaitCi4e72gzIO1P6PWM6NcKug=",
      "requires": {
        "graceful-fs": "^4.1.6"
      }
    },
    "jsonify": {
      "version": "0.0.0",
      "resolved": "https://registry.npmjs.org/jsonify/-/jsonify-0.0.0.tgz",
      "integrity": "sha1-LHS27kHZPKUbe1qu6PUDYx0lKnM="
    },
    "jsonschema": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/jsonschema/-/jsonschema-1.4.0.tgz",
      "integrity": "sha512-/YgW6pRMr6M7C+4o8kS+B/2myEpHCrxO4PEWnqJNBFMjn7EWXqlQ4tGwL6xTHeRplwuZmcAncdvfOad1nT2yMw=="
    },
    "jsprim": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz",
      "integrity": "sha1-MT5mvB5cwG5Di8G3SZwuXFastqI=",
      "requires": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.2.3",
        "verror": "1.10.0"
      }
    },
    "keccak": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/keccak/-/keccak-1.4.0.tgz",
      "integrity": "sha512-eZVaCpblK5formjPjeTBik7TAg+pqnDrMHIffSvi9Lh7PQgM1+hSzakUeZFCk9DVVG0dacZJuaz2ntwlzZUIBw==",
      "requires": {
        "bindings": "^1.2.1",
        "inherits": "^2.0.3",
        "nan": "^2.2.1",
        "safe-buffer": "^5.1.0"
      }
    },
    "kind-of": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
      "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
      "requires": {
        "is-buffer": "^1.1.5"
      }
    },
    "klaw": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/klaw/-/klaw-1.3.1.tgz",
      "integrity": "sha1-QIhDO0azsbolnXh4XY6W9zugJDk=",
      "requires": {
        "graceful-fs": "^4.1.9"
      }
    },
    "lazy-cache": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/lazy-cache/-/lazy-cache-1.0.4.tgz",
      "integrity": "sha1-odePw6UEdMuAhF07O24dpJpEbo4="
    },
    "lcid": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/lcid/-/lcid-1.0.0.tgz",
      "integrity": "sha1-MIrMr6C8SDo4Z7S28rlQYlHRuDU=",
      "requires": {
        "invert-kv": "^1.0.0"
      }
    },
    "level-codec": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/level-codec/-/level-codec-7.0.1.tgz",
      "integrity": "sha512-Ua/R9B9r3RasXdRmOtd+t9TCOEIIlts+TN/7XTT2unhDaL6sJn83S3rUyljbr6lVtw49N3/yA0HHjpV6Kzb2aQ=="
    },
    "level-errors": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/level-errors/-/level-errors-1.0.5.tgz",
      "integrity": "sha512-/cLUpQduF6bNrWuAC4pwtUKA5t669pCsCi2XbmojG2tFeOr9j6ShtdDCtFFQO1DRt+EVZhx9gPzP9G2bUaG4ig==",
      "requires": {
        "errno": "~0.1.1"
      }
    },
    "level-iterator-stream": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/level-iterator-stream/-/level-iterator-stream-1.3.1.tgz",
      "integrity": "sha1-5Dt4sagUPm+pek9IXrjqUwNS8u0=",
      "requires": {
        "inherits": "^2.0.1",
        "level-errors": "^1.0.3",
        "readable-stream": "^1.0.33",
        "xtend": "^4.0.0"
      },
      "dependencies": {
        "isarray": {
          "version": "0.0.1",
          "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
          "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8="
        },
        "readable-stream": {
          "version": "1.1.14",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz",
          "integrity": "sha1-fPTFTvZI44EwhMY23SB54WbAgdk=",
          "requires": {
            "core-util-is": "~1.0.0",
            "inherits": "~2.0.1",
            "isarray": "0.0.1",
            "string_decoder": "~0.10.x"
          }
        },
        "string_decoder": {
          "version": "0.10.31",
          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz",
          "integrity": "sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ="
        }
      }
    },
    "level-ws": {
      "version": "0.0.0",
      "resolved": "https://registry.npmjs.org/level-ws/-/level-ws-0.0.0.tgz",
      "integrity": "sha1-Ny5RIXeSSgBCSwtDrvK7QkltIos=",
      "requires": {
        "readable-stream": "~1.0.15",
        "xtend": "~2.1.1"
      },
      "dependencies": {
        "isarray": {
          "version": "0.0.1",
          "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
          "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8="
        },
        "object-keys": {
          "version": "0.4.0",
          "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-0.4.0.tgz",
          "integrity": "sha1-KKaq50KN0sOpLz2V8hM13SBOAzY="
        },
        "readable-stream": {
          "version": "1.0.34",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-1.0.34.tgz",
          "integrity": "sha1-Elgg40vIQtLyqq+v5MKRbuMsFXw=",
          "requires": {
            "core-util-is": "~1.0.0",
            "inherits": "~2.0.1",
            "isarray": "0.0.1",
            "string_decoder": "~0.10.x"
          }
        },
        "string_decoder": {
          "version": "0.10.31",
          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz",
          "integrity": "sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ="
        },
        "xtend": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/xtend/-/xtend-2.1.2.tgz",
          "integrity": "sha1-bv7MKk2tjmlixJAbM3znuoe10os=",
          "requires": {
            "object-keys": "~0.4.0"
          }
        }
      }
    },
    "levelup": {
      "version": "1.3.9",
      "resolved": "https://registry.npmjs.org/levelup/-/levelup-1.3.9.tgz",
      "integrity": "sha512-VVGHfKIlmw8w1XqpGOAGwq6sZm2WwWLmlDcULkKWQXEA5EopA8OBNJ2Ck2v6bdk8HeEZSbCSEgzXadyQFm76sQ==",
      "requires": {
        "deferred-leveldown": "~1.2.1",
        "level-codec": "~7.0.0",
        "level-errors": "~1.0.3",
        "level-iterator-stream": "~1.3.0",
        "prr": "~1.0.1",
        "semver": "~5.4.1",
        "xtend": "~4.0.0"
      },
      "dependencies": {
        "semver": {
          "version": "5.4.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-5.4.1.tgz",
          "integrity": "sha512-WfG/X9+oATh81XtllIo/I8gOiY9EXRdv1cQdyykeXK17YcUW3EXUAi2To4pcH6nZtJPr7ZOpM5OMyWJZm+8Rsg=="
        }
      }
    },
    "lines-and-columns": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.1.6.tgz",
      "integrity": "sha1-HADHQ7QzzQpOgHWPe2SldEDZ/wA=",
      "dev": true
    },
    "load-json-file": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-2.0.0.tgz",
      "integrity": "sha1-eUfkIUmvgNaWy/eXvKq8/h/inKg=",
      "requires": {
        "graceful-fs": "^4.1.2",
        "parse-json": "^2.2.0",
        "pify": "^2.0.0",
        "strip-bom": "^3.0.0"
      }
    },
    "loader-runner": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/loader-runner/-/loader-runner-2.4.0.tgz",
      "integrity": "sha512-Jsmr89RcXGIwivFY21FcRrisYZfvLMTWx5kOLc+JTxtpBOG6xML0vzbc6SEQG2FO9/4Fc3wW4LVcB5DmGflaRw=="
    },
    "loader-utils": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/loader-utils/-/loader-utils-1.2.3.tgz",
      "integrity": "sha512-fkpz8ejdnEMG3s37wGL07iSBDg99O9D5yflE9RGNH3hRdx9SOwYfnGYdZOUIZitN8E+E2vkq3MUMYMvPYl5ZZA==",
      "requires": {
        "big.js": "^5.2.2",
        "emojis-list": "^2.0.0",
        "json5": "^1.0.1"
      },
      "dependencies": {
        "json5": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/json5/-/json5-1.0.1.tgz",
          "integrity": "sha512-aKS4WQjPenRxiQsC93MNfjx+nbF4PAdYzmd/1JIj8HYzqfbu86beTuNgXDzPknWk0n0uARlyewZo4s++ES36Ow==",
          "requires": {
            "minimist": "^1.2.0"
          }
        }
      }
    },
    "locate-path": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-2.0.0.tgz",
      "integrity": "sha1-K1aLJl7slExtnA3pw9u7ygNUzY4=",
      "requires": {
        "p-locate": "^2.0.0",
        "path-exists": "^3.0.0"
      }
    },
    "lodash": {
      "version": "4.17.15",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.15.tgz",
      "integrity": "sha512-8xOcRHvCjnocdS5cpwXQXVzmmh5e5+saE2QGoeQmbKmRS6J3VQppPOIt0MnmE+4xlZoumy0GPG0D0MVIQbNA1A=="
    },
    "lodash.assign": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/lodash.assign/-/lodash.assign-4.2.0.tgz",
      "integrity": "sha1-DZnzzNem0mHRm9rrkkUAXShYCOc="
    },
    "lodash.unescape": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.unescape/-/lodash.unescape-4.0.1.tgz",
      "integrity": "sha1-vyJJiGzlFM2hEvrpIYzcBlIR/Jw="
    },
    "lodash.values": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.values/-/lodash.values-4.3.0.tgz",
      "integrity": "sha1-o6bCsOvsxcLLocF+bmIP6BtT00c="
    },
    "longest": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/longest/-/longest-1.0.1.tgz",
      "integrity": "sha1-MKCy2jj3N3DoKUoNIuZiXtd9AJc="
    },
    "loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "requires": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      }
    },
    "lru-cache": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.5.tgz",
      "integrity": "sha512-sWZlbEP2OsHNkXrMl5GYk/jKk70MBng6UU4YI/qGDYbgf6YbP4EvmqISbXCoJiRKs+1bSpFHVgQxvJ17F2li5g==",
      "requires": {
        "pseudomap": "^1.0.2",
        "yallist": "^2.1.2"
      }
    },
    "ltgt": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/ltgt/-/ltgt-2.2.1.tgz",
      "integrity": "sha1-81ypHEk/e3PaDgdJUwTxezH4fuU="
    },
    "make-error": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.5.tgz",
      "integrity": "sha512-c3sIjNUow0+8swNwVpqoH4YCShKNFkMaw6oH1mNS2haDZQqkeZFlHS3dhoeEbKKmJB4vXpJucU6oH75aDYeE9g=="
    },
    "map-age-cleaner": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/map-age-cleaner/-/map-age-cleaner-0.1.3.tgz",
      "integrity": "sha512-bJzx6nMoP6PDLPBFmg7+xRKeFZvFboMrGlxmNj9ClvX53KrmvM5bXFXEWjbz4cz1AFn+jWJ9z/DJSz7hrs0w3w==",
      "dev": true,
      "requires": {
        "p-defer": "^1.0.0"
      }
    },
    "map-cache": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/map-cache/-/map-cache-0.2.2.tgz",
      "integrity": "sha1-wyq9C9ZSXZsFFkW7TyasXcmKDb8="
    },
    "map-visit": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/map-visit/-/map-visit-1.0.0.tgz",
      "integrity": "sha1-7Nyo8TFE5mDxtb1B8S80edmN+48=",
      "requires": {
        "object-visit": "^1.0.0"
      }
    },
    "marked": {
      "version": "0.3.19",
      "resolved": "https://registry.npmjs.org/marked/-/marked-0.3.19.tgz",
      "integrity": "sha512-ea2eGWOqNxPcXv8dyERdSr/6FmzvWwzjMxpfGB/sbMccXoct+xY+YukPD+QTUZwyvK7BZwcr4m21WBOW41pAkg==",
      "dev": true
    },
    "md5.js": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/md5.js/-/md5.js-1.3.5.tgz",
      "integrity": "sha512-xitP+WxNPcTTOgnTJcrhM0xvdPepipPSf3I8EIpGKeFLjt3PlJLIDG3u8EX53ZIubkb+5U2+3rELYpEhHhzdkg==",
      "requires": {
        "hash-base": "^3.0.0",
        "inherits": "^2.0.1",
        "safe-buffer": "^5.1.2"
      }
    },
    "mem": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/mem/-/mem-1.1.0.tgz",
      "integrity": "sha1-Xt1StIXKHZAP5kiVUFOZoN+kX3Y=",
      "requires": {
        "mimic-fn": "^1.0.0"
      }
    },
    "memdown": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/memdown/-/memdown-1.4.1.tgz",
      "integrity": "sha1-tOThkhdGZP+65BNhqlAPMRnv4hU=",
      "requires": {
        "abstract-leveldown": "~2.7.1",
        "functional-red-black-tree": "^1.0.1",
        "immediate": "^3.2.3",
        "inherits": "~2.0.1",
        "ltgt": "~2.2.0",
        "safe-buffer": "~5.1.1"
      },
      "dependencies": {
        "abstract-leveldown": {
          "version": "2.7.2",
          "resolved": "https://registry.npmjs.org/abstract-leveldown/-/abstract-leveldown-2.7.2.tgz",
          "integrity": "sha512-+OVvxH2rHVEhWLdbudP6p0+dNMXu8JA1CbhP19T8paTYAcX7oJ4OVjT+ZUVpv7mITxXHqDMej+GdqXBmXkw09w==",
          "requires": {
            "xtend": "~4.0.0"
          }
        },
        "safe-buffer": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
          "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
        }
      }
    },
    "memory-fs": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/memory-fs/-/memory-fs-0.4.1.tgz",
      "integrity": "sha1-OpoguEYlI+RHz7x+i7gO1me/xVI=",
      "requires": {
        "errno": "^0.1.3",
        "readable-stream": "^2.0.1"
      }
    },
    "memorystream": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/memorystream/-/memorystream-0.3.1.tgz",
      "integrity": "sha1-htcJCzDORV1j+64S3aUaR93K+bI="
    },
    "merkle-patricia-tree": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/merkle-patricia-tree/-/merkle-patricia-tree-2.3.2.tgz",
      "integrity": "sha512-81PW5m8oz/pz3GvsAwbauj7Y00rqm81Tzad77tHBwU7pIAtN+TJnMSOJhxBKflSVYhptMMb9RskhqHqrSm1V+g==",
      "requires": {
        "async": "^1.4.2",
        "ethereumjs-util": "^5.0.0",
        "level-ws": "0.0.0",
        "levelup": "^1.2.1",
        "memdown": "^1.0.0",
        "readable-stream": "^2.0.0",
        "rlp": "^2.0.0",
        "semaphore": ">=1.0.1"
      },
      "dependencies": {
        "async": {
          "version": "1.5.2",
          "resolved": "https://registry.npmjs.org/async/-/async-1.5.2.tgz",
          "integrity": "sha1-7GphrlZIDAw8skHJVhjiCJL5Zyo="
        }
      }
    },
    "micromatch": {
      "version": "3.1.10",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-3.1.10.tgz",
      "integrity": "sha512-MWikgl9n9M3w+bpsY3He8L+w9eF9338xRl8IAO5viDizwSzziFEyUzo2xrrloB64ADbTf8uA8vRqqttDTOmccg==",
      "requires": {
        "arr-diff": "^4.0.0",
        "array-unique": "^0.3.2",
        "braces": "^2.3.1",
        "define-property": "^2.0.2",
        "extend-shallow": "^3.0.2",
        "extglob": "^2.0.4",
        "fragment-cache": "^0.2.1",
        "kind-of": "^6.0.2",
        "nanomatch": "^1.2.9",
        "object.pick": "^1.3.0",
        "regex-not": "^1.0.0",
        "snapdragon": "^0.8.1",
        "to-regex": "^3.0.2"
      },
      "dependencies": {
        "kind-of": {
          "version": "6.0.3",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
          "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw=="
        }
      }
    },
    "miller-rabin": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/miller-rabin/-/miller-rabin-4.0.1.tgz",
      "integrity": "sha512-115fLhvZVqWwHPbClyntxEVfVDfl9DLLTuJvq3g2O/Oxi8AiNouAHvDSzHS0viUJc+V5vm3eq91Xwqn9dp4jRA==",
      "requires": {
        "bn.js": "^4.0.0",
        "brorand": "^1.0.1"
      }
    },
    "mime-db": {
      "version": "1.43.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.43.0.tgz",
      "integrity": "sha512-+5dsGEEovYbT8UY9yD7eE4XTc4UwJ1jBYlgaQQF38ENsKR3wj/8q8RFZrF9WIZpB2V1ArTVFUva8sAul1NzRzQ=="
    },
    "mime-types": {
      "version": "2.1.26",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.26.tgz",
      "integrity": "sha512-01paPWYgLrkqAyrlDorC1uDwl2p3qZT7yl806vW7DvDoxwXi46jsjFbg+WdwotBIk6/MbEhO/dh5aZ5sNj/dWQ==",
      "requires": {
        "mime-db": "1.43.0"
      }
    },
    "mimic-fn": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-1.2.0.tgz",
      "integrity": "sha512-jf84uxzwiuiIVKiOLpfYk7N46TSy8ubTonmneY9vrpHNAnp0QBt2BxWV9dO3/j+BoVAb+a5G6YDPW3M5HOdMWQ=="
    },
    "min-document": {
      "version": "2.19.0",
      "resolved": "https://registry.npmjs.org/min-document/-/min-document-2.19.0.tgz",
      "integrity": "sha1-e9KC4/WELtKVu3SM3Z8f+iyCRoU=",
      "requires": {
        "dom-walk": "^0.1.0"
      }
    },
    "minimalistic-assert": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz",
      "integrity": "sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A=="
    },
    "minimalistic-crypto-utils": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/minimalistic-crypto-utils/-/minimalistic-crypto-utils-1.0.1.tgz",
      "integrity": "sha1-9sAMHAsIIkblxNmd+4x8CDsrWCo="
    },
    "minimatch": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz",
      "integrity": "sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==",
      "requires": {
        "brace-expansion": "^1.1.7"
      }
    },
    "minimist": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz",
      "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ="
    },
    "mixin-deep": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/mixin-deep/-/mixin-deep-1.3.2.tgz",
      "integrity": "sha512-WRoDn//mXBiJ1H40rqa3vH0toePwSsGb45iInWlTySa+Uu4k3tYUSxa2v1KqAiLtvlrSzaExqS1gtk96A9zvEA==",
      "requires": {
        "for-in": "^1.0.2",
        "is-extendable": "^1.0.1"
      },
      "dependencies": {
        "is-extendable": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/is-extendable/-/is-extendable-1.0.1.tgz",
          "integrity": "sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==",
          "requires": {
            "is-plain-object": "^2.0.4"
          }
        }
      }
    },
    "mkdirp": {
      "version": "0.5.1",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz",
      "integrity": "sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM=",
      "requires": {
        "minimist": "0.0.8"
      },
      "dependencies": {
        "minimist": {
          "version": "0.0.8",
          "resolved": "https://registry.npmjs.org/minimist/-/minimist-0.0.8.tgz",
          "integrity": "sha1-hX/Kv8M5fSYluCKCYuhqp6ARsF0="
        }
      }
    },
    "mocha": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/mocha/-/mocha-5.2.0.tgz",
      "integrity": "sha512-2IUgKDhc3J7Uug+FxMXuqIyYzH7gJjXECKe/w43IGgQHTSj3InJi+yAA7T24L9bQMRKiUEHxEX37G5JpVUGLcQ==",
      "dev": true,
      "requires": {
        "browser-stdout": "1.3.1",
        "commander": "2.15.1",
        "debug": "3.1.0",
        "diff": "3.5.0",
        "escape-string-regexp": "1.0.5",
        "glob": "7.1.2",
        "growl": "1.10.5",
        "he": "1.1.1",
        "minimatch": "3.0.4",
        "mkdirp": "0.5.1",
        "supports-color": "5.4.0"
      },
      "dependencies": {
        "commander": {
          "version": "2.15.1",
          "resolved": "https://registry.npmjs.org/commander/-/commander-2.15.1.tgz",
          "integrity": "sha512-VlfT9F3V0v+jr4yxPc5gg9s62/fIVWsd2Bk2iD435um1NlGMYdVCq+MjcXnhYq2icNOizHr1kK+5TI6H0Hy0ag==",
          "dev": true
        },
        "debug": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
          "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
          "dev": true,
          "requires": {
            "ms": "2.0.0"
          }
        },
        "glob": {
          "version": "7.1.2",
          "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.2.tgz",
          "integrity": "sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==",
          "dev": true,
          "requires": {
            "fs.realpath": "^1.0.0",
            "inflight": "^1.0.4",
            "inherits": "2",
            "minimatch": "^3.0.4",
            "once": "^1.3.0",
            "path-is-absolute": "^1.0.0"
          }
        },
        "has-flag": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
          "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0=",
          "dev": true
        },
        "supports-color": {
          "version": "5.4.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.4.0.tgz",
          "integrity": "sha512-zjaXglF5nnWpsq470jSv6P9DwPvgLkuapYmfDm3JWOm0vkNTVF2tI4UrN2r6jH1qM/uc/WtxYY1hYoA2dOKj5w==",
          "dev": true,
          "requires": {
            "has-flag": "^3.0.0"
          }
        }
      }
    },
    "mocha-typescript": {
      "version": "1.1.17",
      "resolved": "https://registry.npmjs.org/mocha-typescript/-/mocha-typescript-1.1.17.tgz",
      "integrity": "sha512-Ge6pCQkZumkkhxVNdAf3JxunskShgaynCb30HYD7TT1Yhog/7NW2+6w5RcRHI+nuQrCMTX6z1+qf2pD8qwCoQA==",
      "dev": true,
      "requires": {
        "@types/mocha": "^5.2.0",
        "chalk": "^2.4.1",
        "cross-spawn": "^6.0.5",
        "yargs": "^11.0.0"
      },
      "dependencies": {
        "ansi-regex": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz",
          "integrity": "sha1-7QMXwyIGT3lGbAKWa922Bas32Zg=",
          "dev": true
        },
        "camelcase": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-4.1.0.tgz",
          "integrity": "sha1-1UVjW+HjPFQmScaRc+Xeas+uNN0=",
          "dev": true
        },
        "cliui": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/cliui/-/cliui-4.1.0.tgz",
          "integrity": "sha512-4FG+RSG9DL7uEwRUZXZn3SS34DiDPfzP0VOiEwtUWlE+AR2EIg+hSyvrIgUUfhdgR/UkAeW2QHgeP+hWrXs7jQ==",
          "dev": true,
          "requires": {
            "string-width": "^2.1.1",
            "strip-ansi": "^4.0.0",
            "wrap-ansi": "^2.0.0"
          }
        },
        "cross-spawn": {
          "version": "6.0.5",
          "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.5.tgz",
          "integrity": "sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==",
          "dev": true,
          "requires": {
            "nice-try": "^1.0.4",
            "path-key": "^2.0.1",
            "semver": "^5.5.0",
            "shebang-command": "^1.2.0",
            "which": "^1.2.9"
          }
        },
        "execa": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/execa/-/execa-1.0.0.tgz",
          "integrity": "sha512-adbxcyWV46qiHyvSp50TKt05tB4tK3HcmF7/nxfAdhnox83seTDbwnaqKO4sXRy7roHAIFqJP/Rw/AuEbX61LA==",
          "dev": true,
          "requires": {
            "cross-spawn": "^6.0.0",
            "get-stream": "^4.0.0",
            "is-stream": "^1.1.0",
            "npm-run-path": "^2.0.0",
            "p-finally": "^1.0.0",
            "signal-exit": "^3.0.0",
            "strip-eof": "^1.0.0"
          }
        },
        "get-stream": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-4.1.0.tgz",
          "integrity": "sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==",
          "dev": true,
          "requires": {
            "pump": "^3.0.0"
          }
        },
        "invert-kv": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/invert-kv/-/invert-kv-2.0.0.tgz",
          "integrity": "sha512-wPVv/y/QQ/Uiirj/vh3oP+1Ww+AWehmi1g5fFWGPF6IpCBCDVrhgHRMvrLfdYcwDh3QJbGXDW4JAuzxElLSqKA==",
          "dev": true
        },
        "lcid": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/lcid/-/lcid-2.0.0.tgz",
          "integrity": "sha512-avPEb8P8EGnwXKClwsNUgryVjllcRqtMYa49NTsbQagYuT1DcXnl1915oxWjoyGrXR6zH/Y0Zc96xWsPcoDKeA==",
          "dev": true,
          "requires": {
            "invert-kv": "^2.0.0"
          }
        },
        "mem": {
          "version": "4.3.0",
          "resolved": "https://registry.npmjs.org/mem/-/mem-4.3.0.tgz",
          "integrity": "sha512-qX2bG48pTqYRVmDB37rn/6PT7LcR8T7oAX3bf99u1Tt1nzxYfxkgqDwUwolPlXweM0XzBOBFzSx4kfp7KP1s/w==",
          "dev": true,
          "requires": {
            "map-age-cleaner": "^0.1.1",
            "mimic-fn": "^2.0.0",
            "p-is-promise": "^2.0.0"
          }
        },
        "mimic-fn": {
          "version": "2.1.0",
          "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
          "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
          "dev": true
        },
        "os-locale": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/os-locale/-/os-locale-3.1.0.tgz",
          "integrity": "sha512-Z8l3R4wYWM40/52Z+S265okfFj8Kt2cC2MKY+xNi3kFs+XGI7WXu/I309QQQYbRW4ijiZ+yxs9pqEhJh0DqW3Q==",
          "dev": true,
          "requires": {
            "execa": "^1.0.0",
            "lcid": "^2.0.0",
            "mem": "^4.0.0"
          }
        },
        "strip-ansi": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz",
          "integrity": "sha1-qEeQIusaw2iocTibY1JixQXuNo8=",
          "dev": true,
          "requires": {
            "ansi-regex": "^3.0.0"
          }
        },
        "yargs": {
          "version": "11.1.1",
          "resolved": "https://registry.npmjs.org/yargs/-/yargs-11.1.1.tgz",
          "integrity": "sha512-PRU7gJrJaXv3q3yQZ/+/X6KBswZiaQ+zOmdprZcouPYtQgvNU35i+68M4b1ZHLZtYFT5QObFLV+ZkmJYcwKdiw==",
          "dev": true,
          "requires": {
            "cliui": "^4.0.0",
            "decamelize": "^1.1.1",
            "find-up": "^2.1.0",
            "get-caller-file": "^1.0.1",
            "os-locale": "^3.1.0",
            "require-directory": "^2.1.1",
            "require-main-filename": "^1.0.1",
            "set-blocking": "^2.0.0",
            "string-width": "^2.0.0",
            "which-module": "^2.0.0",
            "y18n": "^3.2.1",
            "yargs-parser": "^9.0.2"
          }
        },
        "yargs-parser": {
          "version": "9.0.2",
          "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-9.0.2.tgz",
          "integrity": "sha1-nM9qQ0YP5O1Aqbto9I1DuKaMwHc=",
          "dev": true,
          "requires": {
            "camelcase": "^4.1.0"
          }
        }
      }
    },
    "ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
    },
    "nan": {
      "version": "2.14.0",
      "resolved": "https://registry.npmjs.org/nan/-/nan-2.14.0.tgz",
      "integrity": "sha512-INOFj37C7k3AfaNTtX8RhsTw7qRy7eLET14cROi9+5HAVbbHuIWUHEauBv5qT4Av2tWasiTY1Jw6puUNqRJXQg=="
    },
    "nanomatch": {
      "version": "1.2.13",
      "resolved": "https://registry.npmjs.org/nanomatch/-/nanomatch-1.2.13.tgz",
      "integrity": "sha512-fpoe2T0RbHwBTBUOftAfBPaDEi06ufaUai0mE6Yn1kacc3SnTErfb/h+X94VXzI64rKFHYImXSvdwGGCmwOqCA==",
      "requires": {
        "arr-diff": "^4.0.0",
        "array-unique": "^0.3.2",
        "define-property": "^2.0.2",
        "extend-shallow": "^3.0.2",
        "fragment-cache": "^0.2.1",
        "is-windows": "^1.0.2",
        "kind-of": "^6.0.2",
        "object.pick": "^1.3.0",
        "regex-not": "^1.0.0",
        "snapdragon": "^0.8.1",
        "to-regex": "^3.0.1"
      },
      "dependencies": {
        "kind-of": {
          "version": "6.0.3",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
          "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw=="
        }
      }
    },
    "neo-async": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/neo-async/-/neo-async-2.6.1.tgz",
      "integrity": "sha512-iyam8fBuCUpWeKPGpaNMetEocMt364qkCsfL9JuhjXX6dRnguRVOfk2GZaDpPjcOKiiXCPINZC1GczQ7iTq3Zw=="
    },
    "next-tick": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/next-tick/-/next-tick-1.0.0.tgz",
      "integrity": "sha1-yobR/ogoFpsBICCOPchCS524NCw="
    },
    "nice-try": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/nice-try/-/nice-try-1.0.5.tgz",
      "integrity": "sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==",
      "dev": true
    },
    "node-addon-api": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-2.0.2.tgz",
      "integrity": "sha512-Ntyt4AIXyaLIuMHF6IOoTakB3K+RWxwtsHNRxllEoA6vPwP9o4866g6YWDLUdnucilZhmkxiHwHr11gAENw+QA=="
    },
    "node-fetch": {
      "version": "1.7.3",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-1.7.3.tgz",
      "integrity": "sha512-NhZ4CsKx7cYm2vSrBAr2PvFOe6sWDf0UYLRqA6svUYg7+/TSfVAu49jYC4BvQ4Sms9SZgdqGBgroqfDhJdTyKQ==",
      "requires": {
        "encoding": "^0.1.11",
        "is-stream": "^1.0.1"
      }
    },
    "node-gyp-build": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/node-gyp-build/-/node-gyp-build-4.2.3.tgz",
      "integrity": "sha512-MN6ZpzmfNCRM+3t57PTJHgHyw/h4OWnZ6mR8P5j/uZtqQr46RRuDE/P+g3n0YR/AiYXeWixZZzaip77gdICfRg=="
    },
    "node-libs-browser": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/node-libs-browser/-/node-libs-browser-2.2.1.tgz",
      "integrity": "sha512-h/zcD8H9kaDZ9ALUWwlBUDo6TKF8a7qBSCSEGfjTVIYeqsioSKaAX+BN7NgiMGp6iSIXZ3PxgCu8KS3b71YK5Q==",
      "requires": {
        "assert": "^1.1.1",
        "browserify-zlib": "^0.2.0",
        "buffer": "^4.3.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "crypto-browserify": "^3.11.0",
        "domain-browser": "^1.1.1",
        "events": "^3.0.0",
        "https-browserify": "^1.0.0",
        "os-browserify": "^0.3.0",
        "path-browserify": "0.0.1",
        "process": "^0.11.10",
        "punycode": "^1.2.4",
        "querystring-es3": "^0.2.0",
        "readable-stream": "^2.3.3",
        "stream-browserify": "^2.0.1",
        "stream-http": "^2.7.2",
        "string_decoder": "^1.0.0",
        "timers-browserify": "^2.0.4",
        "tty-browserify": "0.0.0",
        "url": "^0.11.0",
        "util": "^0.11.0",
        "vm-browserify": "^1.0.1"
      },
      "dependencies": {
        "punycode": {
          "version": "1.4.1",
          "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz",
          "integrity": "sha1-wNWmOycYgArY4esPpSachN1BhF4="
        }
      }
    },
    "normalize-package-data": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz",
      "integrity": "sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==",
      "requires": {
        "hosted-git-info": "^2.1.4",
        "resolve": "^1.10.0",
        "semver": "2 || 3 || 4 || 5",
        "validate-npm-package-license": "^3.0.1"
      }
    },
    "normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA=="
    },
    "npm-run-path": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-2.0.2.tgz",
      "integrity": "sha1-NakjLfo11wZ7TLLd8jV7GHFTbF8=",
      "requires": {
        "path-key": "^2.0.0"
      }
    },
    "number-is-nan": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/number-is-nan/-/number-is-nan-1.0.1.tgz",
      "integrity": "sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0="
    },
    "oauth-sign": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ=="
    },
    "object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM="
    },
    "object-copy": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/object-copy/-/object-copy-0.1.0.tgz",
      "integrity": "sha1-fn2Fi3gb18mRpBupde04EnVOmYw=",
      "requires": {
        "copy-descriptor": "^0.1.0",
        "define-property": "^0.2.5",
        "kind-of": "^3.0.3"
      },
      "dependencies": {
        "define-property": {
          "version": "0.2.5",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
          "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
          "requires": {
            "is-descriptor": "^0.1.0"
          }
        }
      }
    },
    "object-inspect": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.7.0.tgz",
      "integrity": "sha512-a7pEHdh1xKIAgTySUGgLMx/xwDZskN1Ud6egYYN3EdRW4ZMPNEDUTF+hwy2LUC+Bl+SyLXANnwz/jyh/qutKUw=="
    },
    "object-is": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/object-is/-/object-is-1.1.5.tgz",
      "integrity": "sha512-3cyDsyHgtmi7I7DfSSI2LDp6SK2lwvtbg0p0R1e0RvTqF5ceGx+K2dfSjm1bKDMVCFEDAQvy+o8c6a7VujOddw==",
      "requires": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3"
      }
    },
    "object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA=="
    },
    "object-visit": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/object-visit/-/object-visit-1.0.1.tgz",
      "integrity": "sha1-95xEk68MU3e1n+OdOV5BBC3QRbs=",
      "requires": {
        "isobject": "^3.0.0"
      }
    },
    "object.assign": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.2.tgz",
      "integrity": "sha512-ixT2L5THXsApyiUPYKmW+2EHpXXe5Ii3M+f4e+aJFAHao5amFRW6J0OO6c/LU8Be47utCx2GL89hxGB6XSmKuQ==",
      "requires": {
        "call-bind": "^1.0.0",
        "define-properties": "^1.1.3",
        "has-symbols": "^1.0.1",
        "object-keys": "^1.1.1"
      }
    },
    "object.pick": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/object.pick/-/object.pick-1.3.0.tgz",
      "integrity": "sha1-h6EKxMFpS9Lhy/U1kaZhQftd10c=",
      "requires": {
        "isobject": "^3.0.1"
      }
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
      "requires": {
        "wrappy": "1"
      }
    },
    "opencollective-postinstall": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/opencollective-postinstall/-/opencollective-postinstall-2.0.2.tgz",
      "integrity": "sha512-pVOEP16TrAO2/fjej1IdOyupJY8KDUM1CvsaScRbw6oddvpQoOfGk4ywha0HKKVAD6RkW4x6Q+tNBwhf3Bgpuw==",
      "dev": true
    },
    "optimist": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/optimist/-/optimist-0.6.1.tgz",
      "integrity": "sha1-2j6nRob6IaGaERwybpDrFaAZZoY=",
      "requires": {
        "minimist": "~0.0.1",
        "wordwrap": "~0.0.2"
      },
      "dependencies": {
        "minimist": {
          "version": "0.0.10",
          "resolved": "https://registry.npmjs.org/minimist/-/minimist-0.0.10.tgz",
          "integrity": "sha1-3j+YVD2/lggr5IrRoMfNqDYwHc8="
        }
      }
    },
    "os-browserify": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/os-browserify/-/os-browserify-0.3.0.tgz",
      "integrity": "sha1-hUNzx/XCMVkU/Jv8a9gjj92h7Cc="
    },
    "os-homedir": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/os-homedir/-/os-homedir-1.0.2.tgz",
      "integrity": "sha1-/7xJiDNuDoM94MFox+8VISGqf7M="
    },
    "os-locale": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/os-locale/-/os-locale-2.1.0.tgz",
      "integrity": "sha512-3sslG3zJbEYcaC4YVAvDorjGxc7tv6KVATnLPZONiljsUncvihe9BQoVCEs0RZ1kmf4Hk9OBqlZfJZWI4GanKA==",
      "requires": {
        "execa": "^0.7.0",
        "lcid": "^1.0.0",
        "mem": "^1.1.0"
      }
    },
    "os-tmpdir": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
      "integrity": "sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ="
    },
    "p-defer": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-defer/-/p-defer-1.0.0.tgz",
      "integrity": "sha1-n26xgvbJqozXQwBKfU+WsZaw+ww=",
      "dev": true
    },
    "p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha1-P7z7FbiZpEEjs0ttzBi3JDNqLK4="
    },
    "p-is-promise": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/p-is-promise/-/p-is-promise-2.1.0.tgz",
      "integrity": "sha512-Y3W0wlRPK8ZMRbNq97l4M5otioeA5lm1z7bkNkxCka8HSPjR0xRWmpCmc9utiaLP9Jb1eD8BgeIxTW4AIF45Pg==",
      "dev": true
    },
    "p-limit": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-1.3.0.tgz",
      "integrity": "sha512-vvcXsLAJ9Dr5rQOPk7toZQZJApBl2K4J6dANSsEuh6QI41JYcsS/qhTGa9ErIUUgK3WNQoJYvylxvjqmiqEA9Q==",
      "requires": {
        "p-try": "^1.0.0"
      }
    },
    "p-locate": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-2.0.0.tgz",
      "integrity": "sha1-IKAQOyIqcMj9OcwuWAaA893l7EM=",
      "requires": {
        "p-limit": "^1.1.0"
      }
    },
    "p-try": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-1.0.0.tgz",
      "integrity": "sha1-y8ec26+P1CKOE/Yh8rGiN8GyB7M="
    },
    "pako": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/pako/-/pako-1.0.11.tgz",
      "integrity": "sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw=="
    },
    "parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "requires": {
        "callsites": "^3.0.0"
      }
    },
    "parse-asn1": {
      "version": "5.1.5",
      "resolved": "https://registry.npmjs.org/parse-asn1/-/parse-asn1-5.1.5.tgz",
      "integrity": "sha512-jkMYn1dcJqF6d5CpU689bq7w/b5ALS9ROVSpQDPrZsqqesUJii9qutvoT5ltGedNXMO2e16YUWIghG9KxaViTQ==",
      "requires": {
        "asn1.js": "^4.0.0",
        "browserify-aes": "^1.0.0",
        "create-hash": "^1.1.0",
        "evp_bytestokey": "^1.0.0",
        "pbkdf2": "^3.0.3",
        "safe-buffer": "^5.1.1"
      }
    },
    "parse-headers": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/parse-headers/-/parse-headers-2.0.3.tgz",
      "integrity": "sha512-QhhZ+DCCit2Coi2vmAKbq5RGTRcQUOE2+REgv8vdyu7MnYx2eZztegqtTx99TZ86GTIwqiy3+4nQTWZ2tgmdCA=="
    },
    "parse-json": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-2.2.0.tgz",
      "integrity": "sha1-9ID0BDTvgHQfhGkJn43qGPVaTck=",
      "requires": {
        "error-ex": "^1.2.0"
      }
    },
    "pascalcase": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/pascalcase/-/pascalcase-0.1.1.tgz",
      "integrity": "sha1-s2PlXoAGym/iF4TS2yK9FdeRfxQ="
    },
    "path-browserify": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/path-browserify/-/path-browserify-0.0.1.tgz",
      "integrity": "sha512-BapA40NHICOS+USX9SN4tyhq+A2RrN/Ws5F0Z5aMHDp98Fl86lX8Oti8B7uN93L4Ifv4fHOEA+pQw87gmMO/lQ=="
    },
    "path-dirname": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/path-dirname/-/path-dirname-1.0.2.tgz",
      "integrity": "sha1-zDPSTVJeCZpTiMAzbG4yuRYGCeA="
    },
    "path-exists": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
      "integrity": "sha1-zg6+ql94yxiSXqfYENe1mwEP1RU="
    },
    "path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18="
    },
    "path-key": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
      "integrity": "sha1-QRyttXTFoUDTpLGRDUDYDMn0C0A="
    },
    "path-parse": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.6.tgz",
      "integrity": "sha512-GSmOT2EbHrINBf9SR7CDELwlJ8AENk3Qn7OikK4nFYAu3Ote2+JYNVvkpAEQm3/TLNEJFD/xZJjzyxg3KBWOzw=="
    },
    "path-type": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-2.0.0.tgz",
      "integrity": "sha1-8BLMuEFbcJb8LaoQVMPXI4lZTHM=",
      "requires": {
        "pify": "^2.0.0"
      }
    },
    "pathval": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/pathval/-/pathval-1.1.0.tgz",
      "integrity": "sha1-uULm1L3mUwBe9rcTYd74cn0GReA=",
      "dev": true
    },
    "pbkdf2": {
      "version": "3.0.17",
      "resolved": "https://registry.npmjs.org/pbkdf2/-/pbkdf2-3.0.17.tgz",
      "integrity": "sha512-U/il5MsrZp7mGg3mSQfn742na2T+1/vHDCG5/iTI3X9MKUuYUZVLQhyRsg06mCgDBTd57TxzgZt7P+fYfjRLtA==",
      "requires": {
        "create-hash": "^1.1.2",
        "create-hmac": "^1.1.4",
        "ripemd160": "^2.0.1",
        "safe-buffer": "^5.0.1",
        "sha.js": "^2.4.8"
      }
    },
    "performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="
    },
    "pify": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
      "integrity": "sha1-7RQaasBDqEnqWISY59yosVMw6Qw="
    },
    "pinkie": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/pinkie/-/pinkie-2.0.4.tgz",
      "integrity": "sha1-clVrgM+g1IqXToDnckjoDtT3+HA="
    },
    "pinkie-promise": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz",
      "integrity": "sha1-ITXW36ejWMBprJsXh3YogihFD/o=",
      "requires": {
        "pinkie": "^2.0.0"
      }
    },
    "pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "dev": true,
      "requires": {
        "find-up": "^4.0.0"
      },
      "dependencies": {
        "find-up": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
          "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
          "dev": true,
          "requires": {
            "locate-path": "^5.0.0",
            "path-exists": "^4.0.0"
          }
        },
        "locate-path": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
          "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
          "dev": true,
          "requires": {
            "p-locate": "^4.1.0"
          }
        },
        "p-limit": {
          "version": "2.2.2",
          "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.2.2.tgz",
          "integrity": "sha512-WGR+xHecKTr7EbUEhyLSh5Dube9JtdiG78ufaeLxTgpudf/20KqyMioIUZJAezlTIi6evxuoUs9YXc11cU+yzQ==",
          "dev": true,
          "requires": {
            "p-try": "^2.0.0"
          }
        },
        "p-locate": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
          "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
          "dev": true,
          "requires": {
            "p-limit": "^2.2.0"
          }
        },
        "p-try": {
          "version": "2.2.0",
          "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
          "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
          "dev": true
        },
        "path-exists": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
          "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
          "dev": true
        }
      }
    },
    "please-upgrade-node": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/please-upgrade-node/-/please-upgrade-node-3.2.0.tgz",
      "integrity": "sha512-gQR3WpIgNIKwBMVLkpMUeR3e1/E1y42bqDQZfql+kDeXd8COYfM8PQA4X6y7a8u9Ua9FHmsrrmirW2vHs45hWg==",
      "dev": true,
      "requires": {
        "semver-compare": "^1.0.0"
      }
    },
    "posix-character-classes": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/posix-character-classes/-/posix-character-classes-0.1.1.tgz",
      "integrity": "sha1-AerA/jta9xoqbAL+q7jB/vfgDqs="
    },
    "private": {
      "version": "0.1.8",
      "resolved": "https://registry.npmjs.org/private/-/private-0.1.8.tgz",
      "integrity": "sha512-VvivMrbvd2nKkiG38qjULzlc+4Vx4wm/whI9pQD35YrARNnhxeiRktSOhSukRLFNlzg6Br/cJPet5J/u19r/mg=="
    },
    "process": {
      "version": "0.11.10",
      "resolved": "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
      "integrity": "sha1-czIwDoQBYb2j5podHZGn1LwW8YI="
    },
    "process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag=="
    },
    "progress": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
      "integrity": "sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==",
      "dev": true
    },
    "promise": {
      "version": "7.3.1",
      "resolved": "https://registry.npmjs.org/promise/-/promise-7.3.1.tgz",
      "integrity": "sha512-nolQXZ/4L+bP/UGlkfaIujX9BKxGwmQ9OT4mOt5yvy8iK1h3wqTEJCijzGANTCCl9nWjY41juyAn2K3Q1hLLTg==",
      "requires": {
        "asap": "~2.0.3"
      }
    },
    "promise-to-callback": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/promise-to-callback/-/promise-to-callback-1.0.0.tgz",
      "integrity": "sha1-XSp0kBC/tn2WNZj805YHRqaP7vc=",
      "requires": {
        "is-fn": "^1.0.0",
        "set-immediate-shim": "^1.0.1"
      }
    },
    "prr": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/prr/-/prr-1.0.1.tgz",
      "integrity": "sha1-0/wRS6BplaRexok/SEzrHXj19HY="
    },
    "pseudomap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
      "integrity": "sha1-8FKijacOYYkX7wqKw0wa5aaChrM="
    },
    "psl": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.8.0.tgz",
      "integrity": "sha512-RIdOzyoavK+hA18OGGWDqUTsCLhtA7IcZ/6NCs4fFJaHBDab+pDDmDIByWFRQJq2Cd7r1OoQxBGKOaztq+hjIQ=="
    },
    "public-encrypt": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/public-encrypt/-/public-encrypt-4.0.3.tgz",
      "integrity": "sha512-zVpa8oKZSz5bTMTFClc1fQOnyyEzpl5ozpi1B5YcvBrdohMjH2rfsBtyXcuNuwjsDIXmBYlF2N5FlJYhR29t8Q==",
      "requires": {
        "bn.js": "^4.1.0",
        "browserify-rsa": "^4.0.0",
        "create-hash": "^1.1.0",
        "parse-asn1": "^5.0.0",
        "randombytes": "^2.0.1",
        "safe-buffer": "^5.1.2"
      }
    },
    "pump": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
      "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
      "dev": true,
      "requires": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "punycode": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
      "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A=="
    },
    "qs": {
      "version": "6.5.2",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.2.tgz",
      "integrity": "sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA=="
    },
    "query-string": {
      "version": "6.11.1",
      "resolved": "https://registry.npmjs.org/query-string/-/query-string-6.11.1.tgz",
      "integrity": "sha512-1ZvJOUl8ifkkBxu2ByVM/8GijMIPx+cef7u3yroO3Ogm4DOdZcF5dcrWTIlSHe3Pg/mtlt6/eFjObDfJureZZA==",
      "requires": {
        "decode-uri-component": "^0.2.0",
        "split-on-first": "^1.0.0",
        "strict-uri-encode": "^2.0.0"
      }
    },
    "querystring": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/querystring/-/querystring-0.2.0.tgz",
      "integrity": "sha1-sgmEkgO7Jd+CDadW50cAWHhSFiA="
    },
    "querystring-es3": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/querystring-es3/-/querystring-es3-0.2.1.tgz",
      "integrity": "sha1-nsYfeQSYdXB9aUFFlv2Qek1xHnM="
    },
    "randombytes": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz",
      "integrity": "sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==",
      "requires": {
        "safe-buffer": "^5.1.0"
      }
    },
    "randomfill": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/randomfill/-/randomfill-1.0.4.tgz",
      "integrity": "sha512-87lcbR8+MhcWcUiQ+9e+Rwx8MyR2P7qnt15ynUlbm3TU/fjbgz4GsvfSUDTemtCCtVCqb4ZcEFlyPNTh9bBTLw==",
      "requires": {
        "randombytes": "^2.0.5",
        "safe-buffer": "^5.1.0"
      }
    },
    "read-pkg": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/read-pkg/-/read-pkg-2.0.0.tgz",
      "integrity": "sha1-jvHAYjxqbbDcZxPEv6xGMysjaPg=",
      "requires": {
        "load-json-file": "^2.0.0",
        "normalize-package-data": "^2.3.2",
        "path-type": "^2.0.0"
      }
    },
    "read-pkg-up": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/read-pkg-up/-/read-pkg-up-2.0.0.tgz",
      "integrity": "sha1-a3KoBImE4MQeeVEP1en6mbO1Sb4=",
      "requires": {
        "find-up": "^2.0.0",
        "read-pkg": "^2.0.0"
      }
    },
    "readable-stream": {
      "version": "2.3.7",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
      "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
      "requires": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      },
      "dependencies": {
        "safe-buffer": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
          "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
        }
      }
    },
    "readdirp": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-2.2.1.tgz",
      "integrity": "sha512-1JU/8q+VgFZyxwrJ+SVIOsh+KywWGpds3NTqikiKpDMZWScmAYyKIgqkO+ARvNWJfXeXR1zxz7aHF4u4CyH6vQ==",
      "requires": {
        "graceful-fs": "^4.1.11",
        "micromatch": "^3.1.10",
        "readable-stream": "^2.0.2"
      }
    },
    "rechoir": {
      "version": "0.6.2",
      "resolved": "https://registry.npmjs.org/rechoir/-/rechoir-0.6.2.tgz",
      "integrity": "sha1-hSBLVNuoLVdC4oyWdW70OvUOM4Q=",
      "dev": true,
      "requires": {
        "resolve": "^1.1.6"
      }
    },
    "regenerate": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/regenerate/-/regenerate-1.4.2.tgz",
      "integrity": "sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A=="
    },
    "regenerator-runtime": {
      "version": "0.11.1",
      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.11.1.tgz",
      "integrity": "sha512-MguG95oij0fC3QV3URf4V2SDYGJhJnJGqvIIgdECeODCT98wSWDAJ94SSuVpYQUoTcGUIL6L4yNB7j1DFFHSBg=="
    },
    "regenerator-transform": {
      "version": "0.10.1",
      "resolved": "https://registry.npmjs.org/regenerator-transform/-/regenerator-transform-0.10.1.tgz",
      "integrity": "sha512-PJepbvDbuK1xgIgnau7Y90cwaAmO/LCLMI2mPvaXq2heGMR3aWW5/BQvYrhJ8jgmQjXewXvBjzfqKcVOmhjZ6Q==",
      "requires": {
        "babel-runtime": "^6.18.0",
        "babel-types": "^6.19.0",
        "private": "^0.1.6"
      }
    },
    "regex-not": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/regex-not/-/regex-not-1.0.2.tgz",
      "integrity": "sha512-J6SDjUgDxQj5NusnOtdFxDwN/+HWykR8GELwctJ7mdqhcyy1xEc4SRFHUXvxTp661YaVKAjfRLZ9cCqS6tn32A==",
      "requires": {
        "extend-shallow": "^3.0.2",
        "safe-regex": "^1.1.0"
      }
    },
    "regexp.prototype.flags": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.3.1.tgz",
      "integrity": "sha512-JiBdRBq91WlY7uRJ0ds7R+dU02i6LKi8r3BuQhNXn+kmeLN+EfHhfjqMRis1zJxnlu88hq/4dx0P2OP3APRTOA==",
      "requires": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3"
      }
    },
    "regexpu-core": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/regexpu-core/-/regexpu-core-2.0.0.tgz",
      "integrity": "sha1-SdA4g3uNz4v6W5pCE5k45uoq4kA=",
      "requires": {
        "regenerate": "^1.2.1",
        "regjsgen": "^0.2.0",
        "regjsparser": "^0.1.4"
      }
    },
    "regjsgen": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/regjsgen/-/regjsgen-0.2.0.tgz",
      "integrity": "sha1-bAFq3qxVT3WCP+N6wFuS1aTtsfc="
    },
    "regjsparser": {
      "version": "0.1.5",
      "resolved": "https://registry.npmjs.org/regjsparser/-/regjsparser-0.1.5.tgz",
      "integrity": "sha1-fuj4Tcb6eS0/0K4ijSS9lJ6tIFw=",
      "requires": {
        "jsesc": "~0.5.0"
      }
    },
    "remove-trailing-separator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz",
      "integrity": "sha1-wkvOKig62tW8P1jg1IJJuSN52O8="
    },
    "repeat-element": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/repeat-element/-/repeat-element-1.1.3.tgz",
      "integrity": "sha512-ahGq0ZnV5m5XtZLMb+vP76kcAM5nkLqk0lpqAuojSKGgQtn4eRi4ZZGm2olo2zKFH+sMsWaqOCW1dqAnOru72g=="
    },
    "repeat-string": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/repeat-string/-/repeat-string-1.6.1.tgz",
      "integrity": "sha1-jcrkcOHIirwtYA//Sndihtp15jc="
    },
    "repeating": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/repeating/-/repeating-2.0.1.tgz",
      "integrity": "sha1-UhTFOpJtNVJwdSf7q0FdvAjQbdo=",
      "requires": {
        "is-finite": "^1.0.0"
      }
    },
    "request": {
      "version": "2.88.2",
      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
      "requires": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.8.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.6",
        "extend": "~3.0.2",
        "forever-agent": "~0.6.1",
        "form-data": "~2.3.2",
        "har-validator": "~5.1.3",
        "http-signature": "~1.2.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.19",
        "oauth-sign": "~0.9.0",
        "performance-now": "^2.1.0",
        "qs": "~6.5.2",
        "safe-buffer": "^5.1.2",
        "tough-cookie": "~2.5.0",
        "tunnel-agent": "^0.6.0",
        "uuid": "^3.3.2"
      }
    },
    "require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha1-jGStX9MNqxyXbiNE/+f3kqam30I="
    },
    "require-from-string": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-1.2.1.tgz",
      "integrity": "sha1-UpyczvJzgK3+yaL5ZbZJu+5jZBg="
    },
    "require-main-filename": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/require-main-filename/-/require-main-filename-1.0.1.tgz",
      "integrity": "sha1-l/cXtp1IeE9fUmpsWqj/3aBVpNE="
    },
    "resolve": {
      "version": "1.15.1",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.15.1.tgz",
      "integrity": "sha512-84oo6ZTtoTUpjgNEr5SJyzQhzL72gaRodsSfyxC/AXRvwu0Yse9H8eF9IpGo7b8YetZhlI6v7ZQ6bKBFV/6S7w==",
      "requires": {
        "path-parse": "^1.0.6"
      }
    },
    "resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true
    },
    "resolve-url": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/resolve-url/-/resolve-url-0.2.1.tgz",
      "integrity": "sha1-LGN/53yJOv0qZj/iGqkIAGjiBSo="
    },
    "resumer": {
      "version": "0.0.0",
      "resolved": "https://registry.npmjs.org/resumer/-/resumer-0.0.0.tgz",
      "integrity": "sha1-8ej0YeQGS6Oegq883CqMiT0HZ1k=",
      "requires": {
        "through": "~2.3.4"
      }
    },
    "ret": {
      "version": "0.1.15",
      "resolved": "https://registry.npmjs.org/ret/-/ret-0.1.15.tgz",
      "integrity": "sha512-TTlYpa+OL+vMMNG24xSlQGEJ3B/RzEfUlLct7b5G/ytav+wPrplCpVMFuwzXbkecJrb6IYo1iFb0S9v37754mg=="
    },
    "right-align": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/right-align/-/right-align-0.1.3.tgz",
      "integrity": "sha1-YTObci/mo1FWiSENJOFMlhSGE+8=",
      "requires": {
        "align-text": "^0.1.1"
      }
    },
    "rimraf": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.7.1.tgz",
      "integrity": "sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==",
      "requires": {
        "glob": "^7.1.3"
      }
    },
    "ripemd160": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/ripemd160/-/ripemd160-2.0.2.tgz",
      "integrity": "sha512-ii4iagi25WusVoiC4B4lq7pbXfAp3D9v5CwfkY33vffw2+pkDjY1D8GaN7spsxvCSx8dkPqOZCEZyfxcmJG2IA==",
      "requires": {
        "hash-base": "^3.0.0",
        "inherits": "^2.0.1"
      }
    },
    "rlp": {
      "version": "2.2.4",
      "resolved": "https://registry.npmjs.org/rlp/-/rlp-2.2.4.tgz",
      "integrity": "sha512-fdq2yYCWpAQBhwkZv+Z8o/Z4sPmYm1CUq6P7n6lVTOdb949CnqA0sndXal5C1NleSVSZm6q5F3iEbauyVln/iw==",
      "requires": {
        "bn.js": "^4.11.1"
      }
    },
    "rustbn.js": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/rustbn.js/-/rustbn.js-0.2.0.tgz",
      "integrity": "sha512-4VlvkRUuCJvr2J6Y0ImW7NvTCriMi7ErOAqWk1y69vAdoNIzCF3yPmgeNzx+RQTLEDFq5sHfscn1MwHxP9hNfA=="
    },
    "safe-buffer": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.0.tgz",
      "integrity": "sha512-fZEwUGbVl7kouZs1jCdMLdt95hdIv0ZeHg6L7qPeciMZhZ+/gdesW4wgTARkrFWEpspjEATAzUGPG8N2jJiwbg=="
    },
    "safe-event-emitter": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/safe-event-emitter/-/safe-event-emitter-1.0.1.tgz",
      "integrity": "sha512-e1wFe99A91XYYxoQbcq2ZJUWurxEyP8vfz7A7vuUe1s95q8r5ebraVaA1BukYJcpM6V16ugWoD9vngi8Ccu5fg==",
      "requires": {
        "events": "^3.0.0"
      }
    },
    "safe-regex": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex/-/safe-regex-1.1.0.tgz",
      "integrity": "sha1-QKNmnzsHfR6UPURinhV91IAjvy4=",
      "requires": {
        "ret": "~0.1.10"
      }
    },
    "safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "scrypt-js": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/scrypt-js/-/scrypt-js-3.0.1.tgz",
      "integrity": "sha512-cdwTTnqPu0Hyvf5in5asVdZocVDTNRmR7XEcJuIzMjJeSHybHl7vpB66AzwTaIg6CLSbtjcxc8fqcySfnTkccA=="
    },
    "secp256k1": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/secp256k1/-/secp256k1-3.8.0.tgz",
      "integrity": "sha512-k5ke5avRZbtl9Tqx/SA7CbY3NF6Ro+Sj9cZxezFzuBlLDmyqPiL8hJJ+EmzD8Ig4LUDByHJ3/iPOVoRixs/hmw==",
      "requires": {
        "bindings": "^1.5.0",
        "bip66": "^1.1.5",
        "bn.js": "^4.11.8",
        "create-hash": "^1.2.0",
        "drbg.js": "^1.0.1",
        "elliptic": "^6.5.2",
        "nan": "^2.14.0",
        "safe-buffer": "^5.1.2"
      }
    },
    "semaphore": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/semaphore/-/semaphore-1.1.0.tgz",
      "integrity": "sha512-O4OZEaNtkMd/K0i6js9SL+gqy0ZCBMgUvlSqHKi4IBdjhe7wB8pwztUk1BbZ1fmrvpwFrPbHzqd2w5pTcJH6LA=="
    },
    "semver": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ=="
    },
    "semver-compare": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/semver-compare/-/semver-compare-1.0.0.tgz",
      "integrity": "sha1-De4hahyUGrN+nvsXiPavxf9VN/w=",
      "dev": true
    },
    "semver-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/semver-regex/-/semver-regex-1.0.0.tgz",
      "integrity": "sha1-kqSWkGX5xwxpR1PVUkj8aPj2Usk="
    },
    "set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha1-BF+XgtARrppoA93TgrJDkrPYkPc="
    },
    "set-immediate-shim": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/set-immediate-shim/-/set-immediate-shim-1.0.1.tgz",
      "integrity": "sha1-SysbJ+uAip+NzEgaWOXlb1mfP2E="
    },
    "set-value": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/set-value/-/set-value-2.0.1.tgz",
      "integrity": "sha512-JxHc1weCN68wRY0fhCoXpyK55m/XPHafOmK4UWD7m2CI14GMcFypt4w/0+NV5f/ZMby2F6S2wwA7fgynh9gWSw==",
      "requires": {
        "extend-shallow": "^2.0.1",
        "is-extendable": "^0.1.1",
        "is-plain-object": "^2.0.3",
        "split-string": "^3.0.1"
      },
      "dependencies": {
        "extend-shallow": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
          "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
          "requires": {
            "is-extendable": "^0.1.0"
          }
        }
      }
    },
    "setimmediate": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/setimmediate/-/setimmediate-1.0.5.tgz",
      "integrity": "sha1-KQy7Iy4waULX1+qbg3Mqt4VvgoU="
    },
    "sha.js": {
      "version": "2.4.11",
      "resolved": "https://registry.npmjs.org/sha.js/-/sha.js-2.4.11.tgz",
      "integrity": "sha512-QMEp5B7cftE7APOjk5Y6xgrbWu+WkLVQwk8JNjZ8nKRciZaByEW6MubieAiToS7+dwvrjGhH8jRXz3MVd0AYqQ==",
      "requires": {
        "inherits": "^2.0.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "shebang-command": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
      "integrity": "sha1-RKrGW2lbAzmJaMOfNj/uXer98eo=",
      "requires": {
        "shebang-regex": "^1.0.0"
      }
    },
    "shebang-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
      "integrity": "sha1-2kL0l0DAtC2yypcoVxyxkMmO/qM="
    },
    "shelljs": {
      "version": "0.8.3",
      "resolved": "https://registry.npmjs.org/shelljs/-/shelljs-0.8.3.tgz",
      "integrity": "sha512-fc0BKlAWiLpwZljmOvAOTE/gXawtCoNrP5oaY7KIaQbbyHeQVg01pSEuEGvGh3HEdBU4baCD7wQBwADmM/7f7A==",
      "dev": true,
      "requires": {
        "glob": "^7.0.0",
        "interpret": "^1.0.0",
        "rechoir": "^0.6.2"
      }
    },
    "signal-exit": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.2.tgz",
      "integrity": "sha1-tf3AjxKH6hF4Yo5BXiUTK3NkbG0="
    },
    "slash": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-1.0.0.tgz",
      "integrity": "sha1-xB8vbDn8FtHNF61LXYlhFK5HDVU="
    },
    "snapdragon": {
      "version": "0.8.2",
      "resolved": "https://registry.npmjs.org/snapdragon/-/snapdragon-0.8.2.tgz",
      "integrity": "sha512-FtyOnWN/wCHTVXOMwvSv26d+ko5vWlIDD6zoUJ7LW8vh+ZBC8QdljveRP+crNrtBwioEUWy/4dMtbBjA4ioNlg==",
      "requires": {
        "base": "^0.11.1",
        "debug": "^2.2.0",
        "define-property": "^0.2.5",
        "extend-shallow": "^2.0.1",
        "map-cache": "^0.2.2",
        "source-map": "^0.5.6",
        "source-map-resolve": "^0.5.0",
        "use": "^3.1.0"
      },
      "dependencies": {
        "define-property": {
          "version": "0.2.5",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
          "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
          "requires": {
            "is-descriptor": "^0.1.0"
          }
        },
        "extend-shallow": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
          "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
          "requires": {
            "is-extendable": "^0.1.0"
          }
        }
      }
    },
    "snapdragon-node": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/snapdragon-node/-/snapdragon-node-2.1.1.tgz",
      "integrity": "sha512-O27l4xaMYt/RSQ5TR3vpWCAB5Kb/czIcqUFOM/C4fYcLnbZUc1PkjTAMjof2pBWaSTwOUd6qUHcFGVGj7aIwnw==",
      "requires": {
        "define-property": "^1.0.0",
        "isobject": "^3.0.0",
        "snapdragon-util": "^3.0.1"
      },
      "dependencies": {
        "define-property": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-1.0.0.tgz",
          "integrity": "sha1-dp66rz9KY6rTr56NMEybvnm/sOY=",
          "requires": {
            "is-descriptor": "^1.0.0"
          }
        },
        "is-accessor-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz",
          "integrity": "sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==",
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-data-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz",
          "integrity": "sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==",
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-descriptor": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz",
          "integrity": "sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==",
          "requires": {
            "is-accessor-descriptor": "^1.0.0",
            "is-data-descriptor": "^1.0.0",
            "kind-of": "^6.0.2"
          }
        },
        "kind-of": {
          "version": "6.0.3",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
          "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw=="
        }
      }
    },
    "snapdragon-util": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/snapdragon-util/-/snapdragon-util-3.0.1.tgz",
      "integrity": "sha512-mbKkMdQKsjX4BAL4bRYTj21edOf8cN7XHdYUJEe+Zn99hVEYcMvKPct1IqNe7+AZPirn8BCDOQBHQZknqmKlZQ==",
      "requires": {
        "kind-of": "^3.2.0"
      }
    },
    "solc": {
      "version": "0.4.26",
      "resolved": "https://registry.npmjs.org/solc/-/solc-0.4.26.tgz",
      "integrity": "sha512-o+c6FpkiHd+HPjmjEVpQgH7fqZ14tJpXhho+/bQXlXbliLIS/xjXb42Vxh+qQY1WCSTMQ0+a5vR9vi0MfhU6mA==",
      "requires": {
        "fs-extra": "^0.30.0",
        "memorystream": "^0.3.1",
        "require-from-string": "^1.1.0",
        "semver": "^5.3.0",
        "yargs": "^4.7.1"
      },
      "dependencies": {
        "camelcase": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-3.0.0.tgz",
          "integrity": "sha1-MvxLn82vhF/N9+c7uXysImHwqwo="
        },
        "cliui": {
          "version": "3.2.0",
          "resolved": "https://registry.npmjs.org/cliui/-/cliui-3.2.0.tgz",
          "integrity": "sha1-EgYBU3qRbSmUD5NNo7SNWFo5IT0=",
          "requires": {
            "string-width": "^1.0.1",
            "strip-ansi": "^3.0.1",
            "wrap-ansi": "^2.0.0"
          }
        },
        "find-up": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/find-up/-/find-up-1.1.2.tgz",
          "integrity": "sha1-ay6YIrGizgpgq2TWEOzK1TyyTQ8=",
          "requires": {
            "path-exists": "^2.0.0",
            "pinkie-promise": "^2.0.0"
          }
        },
        "load-json-file": {
          "version": "1.1.0",
          "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-1.1.0.tgz",
          "integrity": "sha1-lWkFcI1YtLq0wiYbBPWfMcmTdMA=",
          "requires": {
            "graceful-fs": "^4.1.2",
            "parse-json": "^2.2.0",
            "pify": "^2.0.0",
            "pinkie-promise": "^2.0.0",
            "strip-bom": "^2.0.0"
          }
        },
        "os-locale": {
          "version": "1.4.0",
          "resolved": "https://registry.npmjs.org/os-locale/-/os-locale-1.4.0.tgz",
          "integrity": "sha1-IPnxeuKe00XoveWDsT0gCYA8FNk=",
          "requires": {
            "lcid": "^1.0.0"
          }
        },
        "path-exists": {
          "version": "2.1.0",
          "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-2.1.0.tgz",
          "integrity": "sha1-D+tsZPD8UY2adU3V77YscCJ2H0s=",
          "requires": {
            "pinkie-promise": "^2.0.0"
          }
        },
        "path-type": {
          "version": "1.1.0",
          "resolved": "https://registry.npmjs.org/path-type/-/path-type-1.1.0.tgz",
          "integrity": "sha1-WcRPfuSR2nBNpBXaWkBwuk+P5EE=",
          "requires": {
            "graceful-fs": "^4.1.2",
            "pify": "^2.0.0",
            "pinkie-promise": "^2.0.0"
          }
        },
        "read-pkg": {
          "version": "1.1.0",
          "resolved": "https://registry.npmjs.org/read-pkg/-/read-pkg-1.1.0.tgz",
          "integrity": "sha1-9f+qXs0pyzHAR0vKfXVra7KePyg=",
          "requires": {
            "load-json-file": "^1.0.0",
            "normalize-package-data": "^2.3.2",
            "path-type": "^1.0.0"
          }
        },
        "read-pkg-up": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/read-pkg-up/-/read-pkg-up-1.0.1.tgz",
          "integrity": "sha1-nWPBMnbAZZGNV/ACpX9AobZD+wI=",
          "requires": {
            "find-up": "^1.0.0",
            "read-pkg": "^1.0.0"
          }
        },
        "string-width": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz",
          "integrity": "sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=",
          "requires": {
            "code-point-at": "^1.0.0",
            "is-fullwidth-code-point": "^1.0.0",
            "strip-ansi": "^3.0.0"
          }
        },
        "strip-bom": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-2.0.0.tgz",
          "integrity": "sha1-YhmoVhZSBJHzV4i9vxRHqZx+aw4=",
          "requires": {
            "is-utf8": "^0.2.0"
          }
        },
        "which-module": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/which-module/-/which-module-1.0.0.tgz",
          "integrity": "sha1-u6Y8qGGUiZT/MHc2CJ47lgJsKk8="
        },
        "window-size": {
          "version": "0.2.0",
          "resolved": "https://registry.npmjs.org/window-size/-/window-size-0.2.0.tgz",
          "integrity": "sha1-tDFbtCFKPXBY6+7okuE/ok2YsHU="
        },
        "yargs": {
          "version": "4.8.1",
          "resolved": "https://registry.npmjs.org/yargs/-/yargs-4.8.1.tgz",
          "integrity": "sha1-wMQpJMpKqmsObaFznfshZDn53cA=",
          "requires": {
            "cliui": "^3.2.0",
            "decamelize": "^1.1.1",
            "get-caller-file": "^1.0.1",
            "lodash.assign": "^4.0.3",
            "os-locale": "^1.4.0",
            "read-pkg-up": "^1.0.1",
            "require-directory": "^2.1.1",
            "require-main-filename": "^1.0.1",
            "set-blocking": "^2.0.0",
            "string-width": "^1.0.1",
            "which-module": "^1.0.0",
            "window-size": "^0.2.0",
            "y18n": "^3.2.1",
            "yargs-parser": "^2.4.1"
          }
        },
        "yargs-parser": {
          "version": "2.4.1",
          "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-2.4.1.tgz",
          "integrity": "sha1-hVaN488VD/SfpRgl8DqMiA3cxcQ=",
          "requires": {
            "camelcase": "^3.0.0",
            "lodash.assign": "^4.0.6"
          }
        }
      }
    },
    "source-list-map": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/source-list-map/-/source-list-map-2.0.1.tgz",
      "integrity": "sha512-qnQ7gVMxGNxsiL4lEuJwe/To8UnK7fAnmbGEEH8RpLouuKbeEm0lhbQVFIrNSuB+G7tVrAlVsZgETT5nljf+Iw=="
    },
    "source-map": {
      "version": "0.5.7",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz",
      "integrity": "sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w="
    },
    "source-map-resolve": {
      "version": "0.5.3",
      "resolved": "https://registry.npmjs.org/source-map-resolve/-/source-map-resolve-0.5.3.tgz",
      "integrity": "sha512-Htz+RnsXWk5+P2slx5Jh3Q66vhQj1Cllm0zvnaY98+NFx+Dv2CF/f5O/t8x+KaNdrdIAsruNzoh/KpialbqAnw==",
      "requires": {
        "atob": "^2.1.2",
        "decode-uri-component": "^0.2.0",
        "resolve-url": "^0.2.1",
        "source-map-url": "^0.4.0",
        "urix": "^0.1.0"
      }
    },
    "source-map-support": {
      "version": "0.4.14",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.4.14.tgz",
      "integrity": "sha1-nURjdyWYuGJxtPUj9sH04Cp9au8=",
      "requires": {
        "source-map": "^0.5.6"
      }
    },
    "source-map-url": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/source-map-url/-/source-map-url-0.4.0.tgz",
      "integrity": "sha1-PpNdfd1zYxuXZZlW1VEo6HtQhKM="
    },
    "spdx-correct": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.1.0.tgz",
      "integrity": "sha512-lr2EZCctC2BNR7j7WzJ2FpDznxky1sjfxvvYEyzxNyb6lZXHODmEoJeFu4JupYlkfha1KZpJyoqiJ7pgA1qq8Q==",
      "requires": {
        "spdx-expression-parse": "^3.0.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "spdx-exceptions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.2.0.tgz",
      "integrity": "sha512-2XQACfElKi9SlVb1CYadKDXvoajPgBVPn/gOQLrTvHdElaVhr7ZEbqJaRnJLVNeaI4cMEAgVCeBMKF6MWRDCRA=="
    },
    "spdx-expression-parse": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.0.tgz",
      "integrity": "sha512-Yg6D3XpRD4kkOmTpdgbUiEJFKghJH03fiC1OPll5h/0sO6neh2jqRDVHOQ4o/LMea0tgCkbMgea5ip/e+MkWyg==",
      "requires": {
        "spdx-exceptions": "^2.1.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "spdx-license-ids": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.5.tgz",
      "integrity": "sha512-J+FWzZoynJEXGphVIS+XEh3kFSjZX/1i9gFBaWQcB+/tmpe2qUsSBABpcxqxnAxFdiUFEgAX1bjYGQvIZmoz9Q=="
    },
    "split-on-first": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/split-on-first/-/split-on-first-1.1.0.tgz",
      "integrity": "sha512-43ZssAJaMusuKWL8sKUBQXHWOpq8d6CfN/u1p4gUzfJkM05C8rxTmYrkIPTXapZpORA6LkkzcUulJ8FqA7Uudw=="
    },
    "split-string": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/split-string/-/split-string-3.1.0.tgz",
      "integrity": "sha512-NzNVhJDYpwceVVii8/Hu6DKfD2G+NrQHlS/V/qgv763EYudVwEcMQNxd2lh+0VrUByXN/oJkl5grOhYWvQUYiw==",
      "requires": {
        "extend-shallow": "^3.0.0"
      }
    },
    "sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw="
    },
    "sshpk": {
      "version": "1.16.1",
      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.16.1.tgz",
      "integrity": "sha512-HXXqVUq7+pcKeLqqZj6mHFUMvXtOJt1uoUx09pFW6011inTMxqI8BA8PM95myrIyyKwdnzjdFjLiE6KBPVtJIg==",
      "requires": {
        "asn1": "~0.2.3",
        "assert-plus": "^1.0.0",
        "bcrypt-pbkdf": "^1.0.0",
        "dashdash": "^1.12.0",
        "ecc-jsbn": "~0.1.1",
        "getpass": "^0.1.1",
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.0.2",
        "tweetnacl": "~0.14.0"
      }
    },
    "static-extend": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/static-extend/-/static-extend-0.1.2.tgz",
      "integrity": "sha1-YICcOcv/VTNyJv1eC1IPNB8ftcY=",
      "requires": {
        "define-property": "^0.2.5",
        "object-copy": "^0.1.0"
      },
      "dependencies": {
        "define-property": {
          "version": "0.2.5",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
          "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
          "requires": {
            "is-descriptor": "^0.1.0"
          }
        }
      }
    },
    "stream-browserify": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/stream-browserify/-/stream-browserify-2.0.2.tgz",
      "integrity": "sha512-nX6hmklHs/gr2FuxYDltq8fJA1GDlxKQCz8O/IM4atRqBH8OORmBNgfvW5gG10GT/qQ9u0CzIvr2X5Pkt6ntqg==",
      "requires": {
        "inherits": "~2.0.1",
        "readable-stream": "^2.0.2"
      }
    },
    "stream-http": {
      "version": "2.8.3",
      "resolved": "https://registry.npmjs.org/stream-http/-/stream-http-2.8.3.tgz",
      "integrity": "sha512-+TSkfINHDo4J+ZobQLWiMouQYB+UVYFttRA94FpEzzJ7ZdqcL4uUUQ7WkdkI4DSozGmgBUE/a47L+38PenXhUw==",
      "requires": {
        "builtin-status-codes": "^3.0.0",
        "inherits": "^2.0.1",
        "readable-stream": "^2.3.6",
        "to-arraybuffer": "^1.0.0",
        "xtend": "^4.0.0"
      }
    },
    "strict-uri-encode": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strict-uri-encode/-/strict-uri-encode-2.0.0.tgz",
      "integrity": "sha1-ucczDHBChi9rFC3CdLvMWGbONUY="
    },
    "string-width": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz",
      "integrity": "sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==",
      "requires": {
        "is-fullwidth-code-point": "^2.0.0",
        "strip-ansi": "^4.0.0"
      },
      "dependencies": {
        "ansi-regex": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz",
          "integrity": "sha1-7QMXwyIGT3lGbAKWa922Bas32Zg="
        },
        "is-fullwidth-code-point": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
          "integrity": "sha1-o7MKXE8ZkYMWeqq5O+764937ZU8="
        },
        "strip-ansi": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz",
          "integrity": "sha1-qEeQIusaw2iocTibY1JixQXuNo8=",
          "requires": {
            "ansi-regex": "^3.0.0"
          }
        }
      }
    },
    "string.prototype.trim": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.4.tgz",
      "integrity": "sha512-hWCk/iqf7lp0/AgTF7/ddO1IWtSNPASjlzCicV5irAVdE1grjsneK26YG6xACMBEdCvO8fUST0UzDMh/2Qy+9Q==",
      "requires": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.18.0-next.2"
      }
    },
    "string.prototype.trimend": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.3.tgz",
      "integrity": "sha512-ayH0pB+uf0U28CtjlLvL7NaohvR1amUvVZk+y3DYb0Ey2PUV5zPkkKy9+U1ndVEIXO8hNg18eIv9Jntbii+dKw==",
      "requires": {
        "call-bind": "^1.0.0",
        "define-properties": "^1.1.3"
      }
    },
    "string.prototype.trimstart": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.3.tgz",
      "integrity": "sha512-oBIBUy5lea5tt0ovtOFiEQaBkoBBkyJhZXzJYrSmDo5IUUqbOPvVezuRs/agBIdZ2p2Eo1FD6bD9USyBLfl3xg==",
      "requires": {
        "call-bind": "^1.0.0",
        "define-properties": "^1.1.3"
      }
    },
    "string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "requires": {
        "safe-buffer": "~5.1.0"
      },
      "dependencies": {
        "safe-buffer": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
          "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
        }
      }
    },
    "strip-ansi": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz",
      "integrity": "sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=",
      "requires": {
        "ansi-regex": "^2.0.0"
      }
    },
    "strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha1-IzTBjpx1n3vdVv3vfprj1YjmjtM="
    },
    "strip-eof": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/strip-eof/-/strip-eof-1.0.0.tgz",
      "integrity": "sha1-u0P/VZim6wXYm1n80SnJgzE2Br8="
    },
    "strip-hex-prefix": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/strip-hex-prefix/-/strip-hex-prefix-1.0.0.tgz",
      "integrity": "sha1-DF8VX+8RUTczd96du1iNoFUA428=",
      "requires": {
        "is-hex-prefixed": "1.0.0"
      }
    },
    "supports-color": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-4.5.0.tgz",
      "integrity": "sha1-vnoN5ITexcXN34s9WRJQRJEvY1s=",
      "requires": {
        "has-flag": "^2.0.0"
      }
    },
    "tapable": {
      "version": "0.2.9",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-0.2.9.tgz",
      "integrity": "sha512-2wsvQ+4GwBvLPLWsNfLCDYGsW6xb7aeC6utq2Qh0PFwgEy7K7dsma9Jsmb2zSQj7GvYAyUGSntLtsv++GmgL1A=="
    },
    "tape": {
      "version": "4.13.3",
      "resolved": "https://registry.npmjs.org/tape/-/tape-4.13.3.tgz",
      "integrity": "sha512-0/Y20PwRIUkQcTCSi4AASs+OANZZwqPKaipGCEwp10dQMipVvSZwUUCi01Y/OklIGyHKFhIcjock+DKnBfLAFw==",
      "requires": {
        "deep-equal": "~1.1.1",
        "defined": "~1.0.0",
        "dotignore": "~0.1.2",
        "for-each": "~0.3.3",
        "function-bind": "~1.1.1",
        "glob": "~7.1.6",
        "has": "~1.0.3",
        "inherits": "~2.0.4",
        "is-regex": "~1.0.5",
        "minimist": "~1.2.5",
        "object-inspect": "~1.7.0",
        "resolve": "~1.17.0",
        "resumer": "~0.0.0",
        "string.prototype.trim": "~1.2.1",
        "through": "~2.3.8"
      },
      "dependencies": {
        "minimist": {
          "version": "1.2.5",
          "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.5.tgz",
          "integrity": "sha512-FM9nNUYrRBAELZQT3xeZQ7fmMOBg6nWNmJKTcgsJeaLstP/UODVpGsr5OhXhhXg6f+qtJ8uiZ+PUxkDWcgIXLw=="
        },
        "resolve": {
          "version": "1.17.0",
          "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.17.0.tgz",
          "integrity": "sha512-ic+7JYiV8Vi2yzQGFWOkiZD5Z9z7O2Zhm9XMaTxdJExKasieFCr+yXZ/WmXsckHiKl12ar0y6XiXDx3m4RHn1w==",
          "requires": {
            "path-parse": "^1.0.6"
          }
        }
      }
    },
    "through": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
      "integrity": "sha1-DdTJ/6q8NXlgsbckEV1+Doai4fU="
    },
    "timers-browserify": {
      "version": "2.0.11",
      "resolved": "https://registry.npmjs.org/timers-browserify/-/timers-browserify-2.0.11.tgz",
      "integrity": "sha512-60aV6sgJ5YEbzUdn9c8kYGIqOubPoUdqQCul3SBAsRCZ40s6Y5cMcrW4dt3/k/EsbLVJNl9n6Vz3fTc+k2GeKQ==",
      "requires": {
        "setimmediate": "^1.0.4"
      }
    },
    "to-arraybuffer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/to-arraybuffer/-/to-arraybuffer-1.0.1.tgz",
      "integrity": "sha1-fSKbH8xjfkZsoIEYCDanqr/4P0M="
    },
    "to-fast-properties": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-1.0.3.tgz",
      "integrity": "sha1-uDVx+k2MJbguIxsG46MFXeTKGkc="
    },
    "to-no-case": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/to-no-case/-/to-no-case-1.0.2.tgz",
      "integrity": "sha1-xyKQcWTvaxeBMsjmmTAhLRtKoWo="
    },
    "to-object-path": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/to-object-path/-/to-object-path-0.3.0.tgz",
      "integrity": "sha1-KXWIt7Dn4KwI4E5nL4XB9JmeF68=",
      "requires": {
        "kind-of": "^3.0.2"
      }
    },
    "to-regex": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/to-regex/-/to-regex-3.0.2.tgz",
      "integrity": "sha512-FWtleNAtZ/Ki2qtqej2CXTOayOH9bHDQF+Q48VpWyDXjbYxA4Yz8iDB31zXOBUlOHHKidDbqGVrTUvQMPmBGBw==",
      "requires": {
        "define-property": "^2.0.2",
        "extend-shallow": "^3.0.2",
        "regex-not": "^1.0.2",
        "safe-regex": "^1.1.0"
      }
    },
    "to-regex-range": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-2.1.1.tgz",
      "integrity": "sha1-fIDBe53+vlmeJzZ+DU3VWQFB2zg=",
      "requires": {
        "is-number": "^3.0.0",
        "repeat-string": "^1.6.1"
      }
    },
    "to-snake-case": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/to-snake-case/-/to-snake-case-1.0.0.tgz",
      "integrity": "sha1-znRpE4l5RgGah+Yu366upMYIq4w=",
      "requires": {
        "to-space-case": "^1.0.0"
      }
    },
    "to-space-case": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/to-space-case/-/to-space-case-1.0.0.tgz",
      "integrity": "sha1-sFLar7Gysp3HcM6gFj5ewOvJ/Bc=",
      "requires": {
        "to-no-case": "^1.0.0"
      }
    },
    "tough-cookie": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
      "requires": {
        "psl": "^1.1.28",
        "punycode": "^2.1.1"
      }
    },
    "trim-right": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/trim-right/-/trim-right-1.0.1.tgz",
      "integrity": "sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM="
    },
    "ts-node": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-6.2.0.tgz",
      "integrity": "sha512-ZNT+OEGfUNVMGkpIaDJJ44Zq3Yr0bkU/ugN1PHbU+/01Z7UV1fsELRiTx1KuQNvQ1A3pGh3y25iYF6jXgxV21A==",
      "requires": {
        "arrify": "^1.0.0",
        "buffer-from": "^1.1.0",
        "diff": "^3.1.0",
        "make-error": "^1.1.1",
        "minimist": "^1.2.0",
        "mkdirp": "^0.5.1",
        "source-map-support": "^0.5.6",
        "yn": "^2.0.0"
      },
      "dependencies": {
        "source-map": {
          "version": "0.6.1",
          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
          "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="
        },
        "source-map-support": {
          "version": "0.5.16",
          "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.16.tgz",
          "integrity": "sha512-efyLRJDr68D9hBBNIPWFjhpFzURh+KJykQwvMyW5UiZzYwoF6l4YMMDIJJEyFWxWCqfyxLzz6tSfUFR+kXXsVQ==",
          "requires": {
            "buffer-from": "^1.0.0",
            "source-map": "^0.6.0"
          }
        }
      }
    },
    "tslib": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.10.0.tgz",
      "integrity": "sha512-qOebF53frne81cf0S9B41ByenJ3/IuH8yJKngAX35CmiZySA0khhkovshKK+jGCaMnVomla7gVlIcc3EvKPbTQ=="
    },
    "tslint": {
      "version": "5.20.1",
      "resolved": "https://registry.npmjs.org/tslint/-/tslint-5.20.1.tgz",
      "integrity": "sha512-EcMxhzCFt8k+/UP5r8waCf/lzmeSyVlqxqMEDQE7rWYiQky8KpIBz1JAoYXfROHrPZ1XXd43q8yQnULOLiBRQg==",
      "requires": {
        "@babel/code-frame": "^7.0.0",
        "builtin-modules": "^1.1.1",
        "chalk": "^2.3.0",
        "commander": "^2.12.1",
        "diff": "^4.0.1",
        "glob": "^7.1.1",
        "js-yaml": "^3.13.1",
        "minimatch": "^3.0.4",
        "mkdirp": "^0.5.1",
        "resolve": "^1.3.2",
        "semver": "^5.3.0",
        "tslib": "^1.8.0",
        "tsutils": "^2.29.0"
      },
      "dependencies": {
        "diff": {
          "version": "4.0.2",
          "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
          "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A=="
        }
      }
    },
    "tslint-eslint-rules": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/tslint-eslint-rules/-/tslint-eslint-rules-4.1.1.tgz",
      "integrity": "sha1-fDDniC8mvCdr/5HSOEl1xp2viLo=",
      "requires": {
        "doctrine": "^0.7.2",
        "tslib": "^1.0.0",
        "tsutils": "^1.4.0"
      },
      "dependencies": {
        "tsutils": {
          "version": "1.9.1",
          "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-1.9.1.tgz",
          "integrity": "sha1-ufmrROVa+WgYMdXyjQrur1x1DLA="
        }
      }
    },
    "tsutils": {
      "version": "2.29.0",
      "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-2.29.0.tgz",
      "integrity": "sha512-g5JVHCIJwzfISaXpXE1qvNalca5Jwob6FjI4AoPlqMusJ6ftFE7IkkFoMhVLRgK+4Kx3gkzb8UZK5t5yTTvEmA==",
      "requires": {
        "tslib": "^1.8.1"
      }
    },
    "tty-browserify": {
      "version": "0.0.0",
      "resolved": "https://registry.npmjs.org/tty-browserify/-/tty-browserify-0.0.0.tgz",
      "integrity": "sha1-oVe6QC2iTpv5V/mqadUk7tQpAaY="
    },
    "tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "tweetnacl": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
      "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="
    },
    "type": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/type/-/type-1.2.0.tgz",
      "integrity": "sha512-+5nt5AAniqsCnu2cEQQdpzCAh33kVx8n0VoFidKpB1dVVLAN/F+bgVOqOJqOnEnrhp222clB5p3vUlD+1QAnfg=="
    },
    "type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "dev": true
    },
    "typed-promisify": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/typed-promisify/-/typed-promisify-0.4.0.tgz",
      "integrity": "sha1-reHT0yEwdnuk71OFFixyBpgQXQ8="
    },
    "typedoc": {
      "version": "0.11.1",
      "resolved": "https://registry.npmjs.org/typedoc/-/typedoc-0.11.1.tgz",
      "integrity": "sha512-jdNIoHm5wkZqxQTe/g9AQ3LKnZyrzHXqu6A/c9GUOeJyBWLxNr7/Dm3rwFvLksuxRNwTvY/0HRDU9sJTa9WQSg==",
      "dev": true,
      "requires": {
        "@types/fs-extra": "5.0.1",
        "@types/handlebars": "4.0.36",
        "@types/highlight.js": "9.12.2",
        "@types/lodash": "4.14.104",
        "@types/marked": "0.3.0",
        "@types/minimatch": "3.0.3",
        "@types/shelljs": "0.7.8",
        "fs-extra": "^5.0.0",
        "handlebars": "^4.0.6",
        "highlight.js": "^9.0.0",
        "lodash": "^4.17.5",
        "marked": "^0.3.17",
        "minimatch": "^3.0.0",
        "progress": "^2.0.0",
        "shelljs": "^0.8.1",
        "typedoc-default-themes": "^0.5.0",
        "typescript": "2.7.2"
      },
      "dependencies": {
        "@types/lodash": {
          "version": "4.14.104",
          "resolved": "https://registry.npmjs.org/@types/lodash/-/lodash-4.14.104.tgz",
          "integrity": "sha512-ufQcVg4daO8xQ5kopxRHanqFdL4AI7ondQkV+2f+7mz3gvp0LkBx2zBRC6hfs3T87mzQFmf5Fck7Fi145Ul6NQ==",
          "dev": true
        },
        "fs-extra": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-5.0.0.tgz",
          "integrity": "sha512-66Pm4RYbjzdyeuqudYqhFiNBbCIuI9kgRqLPSHIlXHidW8NIQtVdkM1yeZ4lXwuhbTETv3EUGMNHAAw6hiundQ==",
          "dev": true,
          "requires": {
            "graceful-fs": "^4.1.2",
            "jsonfile": "^4.0.0",
            "universalify": "^0.1.0"
          }
        },
        "jsonfile": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
          "integrity": "sha1-h3Gq4HmbZAdrdmQPygWPnBDjPss=",
          "dev": true,
          "requires": {
            "graceful-fs": "^4.1.6"
          }
        },
        "typescript": {
          "version": "2.7.2",
          "resolved": "https://registry.npmjs.org/typescript/-/typescript-2.7.2.tgz",
          "integrity": "sha512-p5TCYZDAO0m4G344hD+wx/LATebLWZNkkh2asWUFqSsD2OrDNhbAHuSjobrmsUmdzjJjEeZVU9g1h3O6vpstnw==",
          "dev": true
        }
      }
    },
    "typedoc-default-themes": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/typedoc-default-themes/-/typedoc-default-themes-0.5.0.tgz",
      "integrity": "sha1-bcJDPnjti+qOiHo6zeLzF4W9Yic=",
      "dev": true
    },
    "types-bn": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/types-bn/-/types-bn-0.0.1.tgz",
      "integrity": "sha512-Kqx+ic862yy/dqXex5M6ZFEf3w1Hwx2yynygY7zhnWw3n58jImSwUlN0JoaWyuCFWfbf12X+7/qiURXYSKv6GA==",
      "requires": {
        "bn.js": "4.11.7"
      },
      "dependencies": {
        "bn.js": {
          "version": "4.11.7",
          "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-4.11.7.tgz",
          "integrity": "sha512-LxFiV5mefv0ley0SzqkOPR1bC4EbpPx8LkOz5vMe/Yi15t5hzwgO/G+tc7wOtL4PZTYjwHu8JnEiSLumuSjSfA=="
        }
      }
    },
    "types-ethereumjs-util": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/types-ethereumjs-util/-/types-ethereumjs-util-0.0.8.tgz",
      "integrity": "sha1-RTDE/gado+qTdIuqPhjqcBM+RWA=",
      "dev": true,
      "requires": {
        "@machinomy/types-safe-buffer": "^0.0.1",
        "bn.js": "^4.11.7",
        "rlp": "^2.0.0",
        "types-bn": "git+https://github.com/machinomy/types-bn.git"
      },
      "dependencies": {
        "types-bn": {
          "version": "git+https://github.com/machinomy/types-bn.git#08ede69e138640d332b0dae0dc2e2fffee5f7160",
          "from": "git+https://github.com/machinomy/types-bn.git",
          "dev": true,
          "requires": {
            "bn.js": "4.11.7"
          },
          "dependencies": {
            "bn.js": {
              "version": "4.11.7",
              "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-4.11.7.tgz",
              "integrity": "sha512-LxFiV5mefv0ley0SzqkOPR1bC4EbpPx8LkOz5vMe/Yi15t5hzwgO/G+tc7wOtL4PZTYjwHu8JnEiSLumuSjSfA==",
              "dev": true
            }
          }
        }
      }
    },
    "typescript": {
      "version": "4.3.5",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.3.5.tgz",
      "integrity": "sha512-DqQgihaQ9cUrskJo9kIyW/+g0Vxsk8cDtZ52a3NGh0YNTfpUSArXSohyUGnvbPazEPLu398C0UxmKSOrPumUzA==",
      "dev": true
    },
    "typescript-eslint-parser": {
      "version": "16.0.1",
      "resolved": "https://registry.npmjs.org/typescript-eslint-parser/-/typescript-eslint-parser-16.0.1.tgz",
      "integrity": "sha512-IKawLTu4A2xN3aN/cPLxvZ0bhxZHILGDKTZWvWNJ3sLNhJ3PjfMEDQmR2VMpdRPrmWOadgWXRwjLBzSA8AGsaQ==",
      "requires": {
        "lodash.unescape": "4.0.1",
        "semver": "5.5.0"
      },
      "dependencies": {
        "semver": {
          "version": "5.5.0",
          "resolved": "https://registry.npmjs.org/semver/-/semver-5.5.0.tgz",
          "integrity": "sha512-4SJ3dm0WAwWy/NVeioZh5AntkdJoWKxHxcmyP622fOkgHa4z3R0TdBJICINyaSDE6uNwVc8gZr+ZinwZAH4xIA=="
        }
      }
    },
    "ua-parser-js": {
      "version": "0.7.21",
      "resolved": "https://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.7.21.tgz",
      "integrity": "sha512-+O8/qh/Qj8CgC6eYBVBykMrNtp5Gebn4dlGD/kKXVkJNDwyrAwSIqwz8CDf+tsAIWVycKcku6gIXJ0qwx/ZXaQ=="
    },
    "uglify-js": {
      "version": "2.8.29",
      "resolved": "https://registry.npmjs.org/uglify-js/-/uglify-js-2.8.29.tgz",
      "integrity": "sha1-KcVzMUgFe7Th913zW3qcty5qWd0=",
      "requires": {
        "source-map": "~0.5.1",
        "uglify-to-browserify": "~1.0.0",
        "yargs": "~3.10.0"
      },
      "dependencies": {
        "yargs": {
          "version": "3.10.0",
          "resolved": "https://registry.npmjs.org/yargs/-/yargs-3.10.0.tgz",
          "integrity": "sha1-9+572FfdfB0tOMDnTvvWgdFDH9E=",
          "requires": {
            "camelcase": "^1.0.2",
            "cliui": "^2.1.0",
            "decamelize": "^1.0.0",
            "window-size": "0.1.0"
          }
        }
      }
    },
    "uglify-to-browserify": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/uglify-to-browserify/-/uglify-to-browserify-1.0.2.tgz",
      "integrity": "sha1-bgkk1r2mta/jSeOabWMoUKD4grc=",
      "optional": true
    },
    "uglifyjs-webpack-plugin": {
      "version": "0.4.6",
      "resolved": "https://registry.npmjs.org/uglifyjs-webpack-plugin/-/uglifyjs-webpack-plugin-0.4.6.tgz",
      "integrity": "sha1-uVH0q7a9YX5m9j64kUmOORdj4wk=",
      "requires": {
        "source-map": "^0.5.6",
        "uglify-js": "^2.8.29",
        "webpack-sources": "^1.0.1"
      }
    },
    "unfetch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/unfetch/-/unfetch-3.1.2.tgz",
      "integrity": "sha512-L0qrK7ZeAudGiKYw6nzFjnJ2D5WHblUBwmHIqtPS6oKUd+Hcpk7/hKsSmcHsTlpd1TbTNsiRBUKRq3bHLNIqIw=="
    },
    "union-value": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/union-value/-/union-value-1.0.1.tgz",
      "integrity": "sha512-tJfXmxMeWYnczCVs7XAEvIV7ieppALdyepWMkHkwciRpZraG/xwT+s2JN8+pr1+8jCRf80FFzvr+MpQeeoF4Xg==",
      "requires": {
        "arr-union": "^3.1.0",
        "get-value": "^2.0.6",
        "is-extendable": "^0.1.1",
        "set-value": "^2.0.1"
      }
    },
    "universalify": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.1.2.tgz",
      "integrity": "sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==",
      "dev": true
    },
    "unset-value": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unset-value/-/unset-value-1.0.0.tgz",
      "integrity": "sha1-g3aHP30jNRef+x5vw6jtDfyKtVk=",
      "requires": {
        "has-value": "^0.3.1",
        "isobject": "^3.0.0"
      },
      "dependencies": {
        "has-value": {
          "version": "0.3.1",
          "resolved": "https://registry.npmjs.org/has-value/-/has-value-0.3.1.tgz",
          "integrity": "sha1-ex9YutpiyoJ+wKIHgCVlSEWZXh8=",
          "requires": {
            "get-value": "^2.0.3",
            "has-values": "^0.1.4",
            "isobject": "^2.0.0"
          },
          "dependencies": {
            "isobject": {
              "version": "2.1.0",
              "resolved": "https://registry.npmjs.org/isobject/-/isobject-2.1.0.tgz",
              "integrity": "sha1-8GVWEJaj8dou9GJy+BXIQNh+DIk=",
              "requires": {
                "isarray": "1.0.0"
              }
            }
          }
        },
        "has-values": {
          "version": "0.1.4",
          "resolved": "https://registry.npmjs.org/has-values/-/has-values-0.1.4.tgz",
          "integrity": "sha1-bWHeldkd/Km5oCCJrThL/49it3E="
        }
      }
    },
    "upath": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/upath/-/upath-1.2.0.tgz",
      "integrity": "sha512-aZwGpamFO61g3OlfT7OQCHqhGnW43ieH9WZeP7QxN/G/jS4jfqUkZxoryvJgVPEcrl5NL/ggHsSmLMHuH64Lhg=="
    },
    "uri-js": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.2.2.tgz",
      "integrity": "sha512-KY9Frmirql91X2Qgjry0Wd4Y+YTdrdZheS8TFwvkbLWf/G5KNJDCh6pKL5OZctEW4+0Baa5idK2ZQuELRwPznQ==",
      "requires": {
        "punycode": "^2.1.0"
      }
    },
    "urix": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/urix/-/urix-0.1.0.tgz",
      "integrity": "sha1-2pN/emLiH+wf0Y1Js1wpNQZ6bHI="
    },
    "url": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/url/-/url-0.11.0.tgz",
      "integrity": "sha1-ODjpfPxgUh63PFJajlW/3Z4uKPE=",
      "requires": {
        "punycode": "1.3.2",
        "querystring": "0.2.0"
      },
      "dependencies": {
        "punycode": {
          "version": "1.3.2",
          "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.3.2.tgz",
          "integrity": "sha1-llOgNvt8HuQjQvIyXM7v6jkmxI0="
        }
      }
    },
    "use": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/use/-/use-3.1.1.tgz",
      "integrity": "sha512-cwESVXlO3url9YWlFW/TA9cshCEhtu7IKJ/p5soJ/gGpj7vbvFrAY/eIioQ6Dw23KjZhYgiIo8HOs1nQ2vr/oQ=="
    },
    "utf8": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/utf8/-/utf8-2.1.2.tgz",
      "integrity": "sha1-H6DZJw6b6FDZsFAn9jUZv0ZFfZY="
    },
    "util": {
      "version": "0.11.1",
      "resolved": "https://registry.npmjs.org/util/-/util-0.11.1.tgz",
      "integrity": "sha512-HShAsny+zS2TZfaXxD9tYj4HQGlBezXZMZuM/S5PKLLoZkShZiGk9o5CzukI1LVHZvjdvZ2Sj1aW/Ndn2NB/HQ==",
      "requires": {
        "inherits": "2.0.3"
      },
      "dependencies": {
        "inherits": {
          "version": "2.0.3",
          "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
          "integrity": "sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="
        }
      }
    },
    "util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="
    },
    "uuid": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
      "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A=="
    },
    "valid-url": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/valid-url/-/valid-url-1.0.9.tgz",
      "integrity": "sha1-HBRHm0DxOXp1eC8RXkCGRHQzogA="
    },
    "validate-npm-package-license": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
      "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
      "requires": {
        "spdx-correct": "^3.0.0",
        "spdx-expression-parse": "^3.0.0"
      }
    },
    "verror": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
      "integrity": "sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=",
      "requires": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      }
    },
    "vm-browserify": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vm-browserify/-/vm-browserify-1.1.2.tgz",
      "integrity": "sha512-2ham8XPWTONajOR0ohOKOHXkm3+gaBmGut3SRuu75xLd/RRaY6vqgh8NBYYk7+RW3u5AtzPQZG8F10LHkl0lAQ=="
    },
    "watchpack": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/watchpack/-/watchpack-1.6.0.tgz",
      "integrity": "sha512-i6dHe3EyLjMmDlU1/bGQpEw25XSjkJULPuAVKCbNRefQVq48yXKUpwg538F7AZTf9kyr57zj++pQFltUa5H7yA==",
      "requires": {
        "chokidar": "^2.0.2",
        "graceful-fs": "^4.1.2",
        "neo-async": "^2.5.0"
      }
    },
    "web3": {
      "version": "0.20.7",
      "resolved": "https://registry.npmjs.org/web3/-/web3-0.20.7.tgz",
      "integrity": "sha512-VU6/DSUX93d1fCzBz7WP/SGCQizO1rKZi4Px9j/3yRyfssHyFcZamMw2/sj4E8TlfMXONvZLoforR8B4bRoyTQ==",
      "requires": {
        "bignumber.js": "git+https://github.com/frozeman/bignumber.js-nolookahead.git",
        "crypto-js": "^3.1.4",
        "utf8": "^2.1.1",
        "xhr2-cookies": "^1.1.0",
        "xmlhttprequest": "*"
      },
      "dependencies": {
        "bignumber.js": {
          "version": "git+https://github.com/frozeman/bignumber.js-nolookahead.git#57692b3ecfc98bbdd6b3a516cb2353652ea49934",
          "from": "git+https://github.com/frozeman/bignumber.js-nolookahead.git"
        }
      }
    },
    "web3-provider-engine": {
      "version": "13.8.0",
      "resolved": "https://registry.npmjs.org/web3-provider-engine/-/web3-provider-engine-13.8.0.tgz",
      "integrity": "sha512-fZXhX5VWwWpoFfrfocslyg6P7cN3YWPG/ASaevNfeO80R+nzgoPUBXcWQekSGSsNDkeRTis4aMmpmofYf1TNtQ==",
      "requires": {
        "async": "^2.5.0",
        "clone": "^2.0.0",
        "eth-block-tracker": "^2.2.2",
        "eth-sig-util": "^1.4.2",
        "ethereumjs-block": "^1.2.2",
        "ethereumjs-tx": "^1.2.0",
        "ethereumjs-util": "^5.1.1",
        "ethereumjs-vm": "^2.0.2",
        "fetch-ponyfill": "^4.0.0",
        "json-rpc-error": "^2.0.0",
        "json-stable-stringify": "^1.0.1",
        "promise-to-callback": "^1.0.0",
        "readable-stream": "^2.2.9",
        "request": "^2.67.0",
        "semaphore": "^1.0.3",
        "solc": "^0.4.2",
        "tape": "^4.4.0",
        "xhr": "^2.2.0",
        "xtend": "^4.0.1"
      }
    },
    "web3-typescript-typings": {
      "version": "0.9.11",
      "resolved": "https://registry.npmjs.org/web3-typescript-typings/-/web3-typescript-typings-0.9.11.tgz",
      "integrity": "sha512-SBadXrLAYE0yRzj8cDCtkEON39Nd2uLXi5IepjqykHSWOI4ybu7deD++RinUJ7eYOvwgljchJ8D6iexrmbdPbQ==",
      "dev": true,
      "requires": {
        "bignumber.js": "~4.1.0"
      }
    },
    "webpack": {
      "version": "3.12.0",
      "resolved": "https://registry.npmjs.org/webpack/-/webpack-3.12.0.tgz",
      "integrity": "sha512-Sw7MdIIOv/nkzPzee4o0EdvCuPmxT98+vVpIvwtcwcF1Q4SDSNp92vwcKc4REe7NItH9f1S4ra9FuQ7yuYZ8bQ==",
      "requires": {
        "acorn": "^5.0.0",
        "acorn-dynamic-import": "^2.0.0",
        "ajv": "^6.1.0",
        "ajv-keywords": "^3.1.0",
        "async": "^2.1.2",
        "enhanced-resolve": "^3.4.0",
        "escope": "^3.6.0",
        "interpret": "^1.0.0",
        "json-loader": "^0.5.4",
        "json5": "^0.5.1",
        "loader-runner": "^2.3.0",
        "loader-utils": "^1.1.0",
        "memory-fs": "~0.4.1",
        "mkdirp": "~0.5.0",
        "node-libs-browser": "^2.0.0",
        "source-map": "^0.5.3",
        "supports-color": "^4.2.1",
        "tapable": "^0.2.7",
        "uglifyjs-webpack-plugin": "^0.4.6",
        "watchpack": "^1.4.0",
        "webpack-sources": "^1.0.1",
        "yargs": "^8.0.2"
      }
    },
    "webpack-sources": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-1.4.3.tgz",
      "integrity": "sha512-lgTS3Xhv1lCOKo7SA5TjKXMjpSM4sBjNV5+q2bqesbSPs5FjGmU6jjtBSkX9b4qW87vDIsCIlUPOEhbZrMdjeQ==",
      "requires": {
        "source-list-map": "^2.0.0",
        "source-map": "~0.6.1"
      },
      "dependencies": {
        "source-map": {
          "version": "0.6.1",
          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
          "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="
        }
      }
    },
    "whatwg-fetch": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-fetch/-/whatwg-fetch-3.0.0.tgz",
      "integrity": "sha512-9GSJUgz1D4MfyKU7KRqwOjXCXTqWdFNvEr7eUBYchQiVc744mqK/MzXPNR2WsPkmkOa4ywfg8C2n8h+13Bey1Q=="
    },
    "which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "requires": {
        "isexe": "^2.0.0"
      }
    },
    "which-module": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/which-module/-/which-module-2.0.0.tgz",
      "integrity": "sha1-2e8H3Od7mQK4o6j6SzHD4/fm6Ho="
    },
    "which-pm-runs": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/which-pm-runs/-/which-pm-runs-1.0.0.tgz",
      "integrity": "sha1-Zws6+8VS4LVd9rd4DKdGFfI60cs=",
      "dev": true
    },
    "window-size": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/window-size/-/window-size-0.1.0.tgz",
      "integrity": "sha1-VDjNLqk7IC76Ohn+iIeu58lPnJ0="
    },
    "wordwrap": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz",
      "integrity": "sha1-t5Zpu0LstAn4PVg8rVLKF+qhZD8="
    },
    "wrap-ansi": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-2.1.0.tgz",
      "integrity": "sha1-2Pw9KE3QV5T+hJc8rs3Rz4JP3YU=",
      "requires": {
        "string-width": "^1.0.1",
        "strip-ansi": "^3.0.1"
      },
      "dependencies": {
        "string-width": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz",
          "integrity": "sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=",
          "requires": {
            "code-point-at": "^1.0.0",
            "is-fullwidth-code-point": "^1.0.0",
            "strip-ansi": "^3.0.0"
          }
        }
      }
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8="
    },
    "wyvern-js": {
      "version": "git+https://github.com/ProjectOpenSea/wyvern-js.git#fabb7660f23f2252c141077e32193d281036299e",
      "from": "git+https://github.com/ProjectOpenSea/wyvern-js.git#v3.2.1",
      "requires": {
        "0x.js": "^0.29.2",
        "@0xproject/abi-gen": "^0.1.1",
        "@0xproject/assert": "^0.0.11",
        "@0xproject/json-schemas": "^0.7.3",
        "@0xproject/types": "^0.1.3",
        "@0xproject/utils": "^0.1.3",
        "@0xproject/web3-wrapper": "^0.1.4",
        "@types/lodash": "^4.14.92",
        "@types/node": "^9.3.0",
        "awesome-typescript-loader": "^3.4.1",
        "bn.js": "^4.11.8",
        "ethereumjs-abi": "git+https://github.com/ProjectWyvern/ethereumjs-abi.git",
        "ethereumjs-util": "^5.1.3",
        "json-loader": "^0.5.7",
        "jsonschema": "^1.2.2",
        "lodash": "^4.17.4",
        "ts-node": "^6.1.0",
        "tslint": "^5.9.1",
        "tslint-eslint-rules": "^4.1.1",
        "types-bn": "^0.0.1",
        "types-ethereumjs-util": "^0.0.5",
        "typescript": "^2.6.2",
        "typescript-eslint-parser": "^16.0.0",
        "web3": "^0.20.4",
        "webpack": "^3.10.0"
      },
      "dependencies": {
        "buffer": {
          "version": "5.7.1",
          "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
          "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
          "requires": {
            "base64-js": "^1.3.1",
            "ieee754": "^1.1.13"
          }
        },
        "types-ethereumjs-util": {
          "version": "0.0.5",
          "resolved": "https://registry.npmjs.org/types-ethereumjs-util/-/types-ethereumjs-util-0.0.5.tgz",
          "integrity": "sha512-chNn3szW1YUNe+1olV4SfWd0ztkvSQQBBoDQ9KtQKlqMnR96mJVA4ZXBSzRgEuHU8zsxij3PPdTYvYawrWQt4g==",
          "requires": {
            "bn.js": "^4.11.7",
            "buffer": "^5.0.6",
            "rlp": "^2.0.0"
          }
        },
        "typescript": {
          "version": "2.9.2",
          "resolved": "https://registry.npmjs.org/typescript/-/typescript-2.9.2.tgz",
          "integrity": "sha512-Gr4p6nFNaoufRIY4NMdpQRNmgxVIGMs4Fcu/ujdYk3nAZqk7supzBE9idmvfZIlH/Cuj//dvi+019qEue9lV0w=="
        }
      }
    },
    "wyvern-schemas": {
      "version": "git+https://github.com/ProjectOpenSea/wyvern-schemas.git#e1a08fcf8ce2b11a0fe9cbdc7c9f77c59fadef26",
      "from": "git+https://github.com/ProjectOpenSea/wyvern-schemas.git#v0.11.1",
      "requires": {
        "@0xproject/utils": "^0.3.4",
        "axios": "^0.17.1",
        "bignumber.js": "^6.0.0",
        "typed-promisify": "^0.4.0",
        "web3-provider-engine": "^13.6.5",
        "wyvern-js": "github:ProjectOpenSea/wyvern-js#semver:^3.2.1"
      },
      "dependencies": {
        "@0xproject/utils": {
          "version": "0.3.4",
          "resolved": "https://registry.npmjs.org/@0xproject/utils/-/utils-0.3.4.tgz",
          "integrity": "sha512-6rNzuZvY3PghEMcZBGzwGdyMBQ11DXXWWMF3Ar3ajRZvSIjPSLpO7cVXcQQOTnTksiSDLJn/kkaQHz8ZT9yJ+w==",
          "requires": {
            "bignumber.js": "~4.1.0",
            "js-sha3": "^0.7.0",
            "lodash": "^4.17.4",
            "web3": "^0.20.0"
          },
          "dependencies": {
            "bignumber.js": {
              "version": "4.1.0",
              "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-4.1.0.tgz",
              "integrity": "sha512-eJzYkFYy9L4JzXsbymsFn3p54D+llV27oTQ+ziJG7WFRheJcNZilgVXMG0LoZtlQSKBsJdWtLFqOD0u+U0jZKA=="
            }
          }
        },
        "bignumber.js": {
          "version": "6.0.0",
          "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-6.0.0.tgz",
          "integrity": "sha512-x247jIuy60/+FtMRvscqfxtVHQf8AGx2hm9c6btkgC0x/hp9yt+teISNhvF8WlwRkCc5yF2fDECH8SIMe8j+GA=="
        },
        "buffer": {
          "version": "5.7.1",
          "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
          "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
          "requires": {
            "base64-js": "^1.3.1",
            "ieee754": "^1.1.13"
          }
        },
        "types-ethereumjs-util": {
          "version": "0.0.5",
          "resolved": "https://registry.npmjs.org/types-ethereumjs-util/-/types-ethereumjs-util-0.0.5.tgz",
          "integrity": "sha512-chNn3szW1YUNe+1olV4SfWd0ztkvSQQBBoDQ9KtQKlqMnR96mJVA4ZXBSzRgEuHU8zsxij3PPdTYvYawrWQt4g==",
          "requires": {
            "bn.js": "^4.11.7",
            "buffer": "^5.0.6",
            "rlp": "^2.0.0"
          }
        },
        "typescript": {
          "version": "2.9.2",
          "resolved": "https://registry.npmjs.org/typescript/-/typescript-2.9.2.tgz",
          "integrity": "sha512-Gr4p6nFNaoufRIY4NMdpQRNmgxVIGMs4Fcu/ujdYk3nAZqk7supzBE9idmvfZIlH/Cuj//dvi+019qEue9lV0w=="
        },
        "wyvern-js": {
          "version": "github:ProjectOpenSea/wyvern-js#fabb7660f23f2252c141077e32193d281036299e",
          "from": "github:ProjectOpenSea/wyvern-js#semver:^3.2.1",
          "requires": {
            "0x.js": "^0.29.2",
            "@0xproject/abi-gen": "^0.1.1",
            "@0xproject/assert": "^0.0.11",
            "@0xproject/json-schemas": "^0.7.3",
            "@0xproject/types": "^0.1.3",
            "@0xproject/utils": "^0.1.3",
            "@0xproject/web3-wrapper": "^0.1.4",
            "@types/lodash": "^4.14.92",
            "@types/node": "^9.3.0",
            "awesome-typescript-loader": "^3.4.1",
            "bn.js": "^4.11.8",
            "ethereumjs-abi": "git+https://github.com/ProjectWyvern/ethereumjs-abi.git",
            "ethereumjs-util": "^5.1.3",
            "json-loader": "^0.5.7",
            "jsonschema": "^1.2.2",
            "lodash": "^4.17.4",
            "ts-node": "^6.1.0",
            "tslint": "^5.9.1",
            "tslint-eslint-rules": "^4.1.1",
            "types-bn": "^0.0.1",
            "types-ethereumjs-util": "^0.0.5",
            "typescript": "^2.6.2",
            "typescript-eslint-parser": "^16.0.0",
            "web3": "^0.20.4",
            "webpack": "^3.10.0"
          },
          "dependencies": {
            "@0xproject/utils": {
              "version": "0.1.3",
              "resolved": "https://registry.npmjs.org/@0xproject/utils/-/utils-0.1.3.tgz",
              "integrity": "sha512-lVuXcHe4cd68gG5HYQk7QPxtnkDpcdpMDiT3dNlcBYU68r8FbE4pGOmhUtdztQmJjHxmcEkH/G8yoAr/0DSzyQ==",
              "requires": {
                "bignumber.js": "~4.1.0",
                "js-sha3": "^0.7.0",
                "lodash": "^4.17.4"
              }
            },
            "bignumber.js": {
              "version": "4.1.0",
              "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-4.1.0.tgz",
              "integrity": "sha512-eJzYkFYy9L4JzXsbymsFn3p54D+llV27oTQ+ziJG7WFRheJcNZilgVXMG0LoZtlQSKBsJdWtLFqOD0u+U0jZKA=="
            }
          }
        }
      }
    },
    "xhr": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/xhr/-/xhr-2.6.0.tgz",
      "integrity": "sha512-/eCGLb5rxjx5e3mF1A7s+pLlR6CGyqWN91fv1JgER5mVWg1MZmlhBvy9kjcsOdRk8RrIujotWyJamfyrp+WIcA==",
      "requires": {
        "global": "~4.4.0",
        "is-function": "^1.0.1",
        "parse-headers": "^2.0.0",
        "xtend": "^4.0.0"
      }
    },
    "xhr2-cookies": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/xhr2-cookies/-/xhr2-cookies-1.1.0.tgz",
      "integrity": "sha1-fXdEnQmZGX8VXLc7I99yUF7YnUg=",
      "requires": {
        "cookiejar": "^2.1.1"
      }
    },
    "xmlhttprequest": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/xmlhttprequest/-/xmlhttprequest-1.8.0.tgz",
      "integrity": "sha1-Z/4HXFwk/vOfnWX197f+dRcZaPw="
    },
    "xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ=="
    },
    "y18n": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-3.2.1.tgz",
      "integrity": "sha1-bRX7qITAhnnA136I53WegR4H+kE="
    },
    "yallist": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
      "integrity": "sha1-HBH5IY8HYImkfdUS+TxmmaaoHVI="
    },
    "yaml": {
      "version": "1.7.2",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.7.2.tgz",
      "integrity": "sha512-qXROVp90sb83XtAoqE8bP9RwAkTTZbugRUTm5YeFCBfNRPEp2YzTeqWiz7m5OORHzEvrA/qcGS8hp/E+MMROYw==",
      "dev": true,
      "requires": {
        "@babel/runtime": "^7.6.3"
      }
    },
    "yargs": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-8.0.2.tgz",
      "integrity": "sha1-YpmpBVsc78lp/355wdkY3Osiw2A=",
      "requires": {
        "camelcase": "^4.1.0",
        "cliui": "^3.2.0",
        "decamelize": "^1.1.1",
        "get-caller-file": "^1.0.1",
        "os-locale": "^2.0.0",
        "read-pkg-up": "^2.0.0",
        "require-directory": "^2.1.1",
        "require-main-filename": "^1.0.1",
        "set-blocking": "^2.0.0",
        "string-width": "^2.0.0",
        "which-module": "^2.0.0",
        "y18n": "^3.2.1",
        "yargs-parser": "^7.0.0"
      },
      "dependencies": {
        "camelcase": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-4.1.0.tgz",
          "integrity": "sha1-1UVjW+HjPFQmScaRc+Xeas+uNN0="
        },
        "cliui": {
          "version": "3.2.0",
          "resolved": "https://registry.npmjs.org/cliui/-/cliui-3.2.0.tgz",
          "integrity": "sha1-EgYBU3qRbSmUD5NNo7SNWFo5IT0=",
          "requires": {
            "string-width": "^1.0.1",
            "strip-ansi": "^3.0.1",
            "wrap-ansi": "^2.0.0"
          },
          "dependencies": {
            "string-width": {
              "version": "1.0.2",
              "resolved": "https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz",
              "integrity": "sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=",
              "requires": {
                "code-point-at": "^1.0.0",
                "is-fullwidth-code-point": "^1.0.0",
                "strip-ansi": "^3.0.0"
              }
            }
          }
        }
      }
    },
    "yargs-parser": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-7.0.0.tgz",
      "integrity": "sha1-jQrELxbqVd69MyyvTEA4s+P139k=",
      "requires": {
        "camelcase": "^4.1.0"
      },
      "dependencies": {
        "camelcase": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-4.1.0.tgz",
          "integrity": "sha1-1UVjW+HjPFQmScaRc+Xeas+uNN0="
        }
      }
    },
    "yn": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/yn/-/yn-2.0.0.tgz",
      "integrity": "sha1-5a2ryKz0CPY4X8dklWhMiOavaJo="
    }
  }
}

'''
'''--- package.json ---
{
  "name": "opensea-js",
  "version": "1.2.0",
  "description": "JavaScript SDK for the OpenSea marketplace. Let users buy or sell crypto collectibles and other cryptogoods, all on your own site!",
  "files": [
    "lib",
    "webpack.config.js"
  ],
  "main": "lib/index.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha test/**/*.ts --require ts-node/register --timeout 15000",
    "lint": "tslint --project . 'src/**/*.ts' --fix",
    "build": "npm run lint && tsc",
    "docs": "npm run docsHtml",
    "docsHtml": "./node_modules/.bin/typedoc --target ES5 --exclude src/abi --excludePrivate --out ./docs --ignoreCompilerErrors --mode file",
    "docsMarkdown": "./node_modules/.bin/typedoc --theme markdown --target ES5 --exclude src/abi --excludePrivate --out ./docs_markdown --ignoreCompilerErrors --mode file"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ProjectOpenSea/opensea-js.git"
  },
  "keywords": [
    "marketplace",
    "crypto",
    "collectibles",
    "javascript",
    "sdk",
    "node",
    "nft",
    "non-fungible-tokens",
    "ethereum",
    "project-opensea",
    "smart-contracts"
  ],
  "author": "OpenSea Developers",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ProjectOpenSea/opensea-js/issues"
  },
  "homepage": "https://docs.opensea.io/v1.0/reference",
  "dependencies": {
    "bignumber.js": "^4.1.0",
    "ethereumjs-abi": "git+https://github.com/ProjectWyvern/ethereumjs-abi.git",
    "ethereumjs-util": "^5.2.0",
    "fbemitter": "^2.1.1",
    "isomorphic-unfetch": "^2.1.1",
    "json-loader": "^0.5.7",
    "lodash": "^4.17.4",
    "query-string": "^6.11.1",
    "web3": "0.20.7",
    "webpack": "^3.10.0",
    "wyvern-js": "git+https://github.com/ProjectOpenSea/wyvern-js.git#v3.2.1",
    "wyvern-schemas": "git+https://github.com/ProjectOpenSea/wyvern-schemas.git#v0.11.1"
  },
  "husky": {
    "hooks": {
      "pre-commit": "npm run lint && npm run build && git add lib/*"
    }
  },
  "devDependencies": {
    "@types/chai": "4.2.9",
    "@types/fbemitter": "^2.0.32",
    "@types/lodash": "^4.14.92",
    "@types/node": "^9.3.0",
    "@types/node-fetch": "2.5.5",
    "@types/query-string": "^6.1.0",
    "chai": "^4.1.2",
    "husky": "^4.2.3",
    "mocha": "^5.2.0",
    "mocha-typescript": "^1.1.15",
    "ts-node": "^6.1.0",
    "tslint": "^5.9.1",
    "tslint-eslint-rules": "^4.1.1",
    "typedoc": "^0.11.1",
    "types-bn": "^0.0.1",
    "types-ethereumjs-util": "0.0.8",
    "typescript": "^4.3.5",
    "typescript-eslint-parser": "^16.0.0",
    "web3-typescript-typings": "^0.9.3"
  }
}

'''
'''--- src/abi/CanonicalWETH.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const CanonicalWETH: PartialReadonlyContractAbi = [{'constant': true, 'inputs': [], 'name': 'name', 'outputs': [{'name': '', 'type': 'string'}], 'payable': false, 'stateMutability': 'view', 'type': 'function'}, {'constant': false, 'inputs': [{'name': 'guy', 'type': 'address'}, {'name': 'wad', 'type': 'uint256'}], 'name': 'approve', 'outputs': [{'name': '', 'type': 'bool'}], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function'}, {'constant': true, 'inputs': [], 'name': 'totalSupply', 'outputs': [{'name': '', 'type': 'uint256'}], 'payable': false, 'stateMutability': 'view', 'type': 'function'}, {'constant': false, 'inputs': [{'name': 'src', 'type': 'address'}, {'name': 'dst', 'type': 'address'}, {'name': 'wad', 'type': 'uint256'}], 'name': 'transferFrom', 'outputs': [{'name': '', 'type': 'bool'}], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function'}, {'constant': false, 'inputs': [{'name': 'wad', 'type': 'uint256'}], 'name': 'withdraw', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function'}, {'constant': true, 'inputs': [], 'name': 'decimals', 'outputs': [{'name': '', 'type': 'uint8'}], 'payable': false, 'stateMutability': 'view', 'type': 'function'}, {'constant': true, 'inputs': [{'name': '', 'type': 'address'}], 'name': 'balanceOf', 'outputs': [{'name': '', 'type': 'uint256'}], 'payable': false, 'stateMutability': 'view', 'type': 'function'}, {'constant': true, 'inputs': [], 'name': 'symbol', 'outputs': [{'name': '', 'type': 'string'}], 'payable': false, 'stateMutability': 'view', 'type': 'function'}, {'constant': false, 'inputs': [{'name': 'dst', 'type': 'address'}, {'name': 'wad', 'type': 'uint256'}], 'name': 'transfer', 'outputs': [{'name': '', 'type': 'bool'}], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function'}, {'constant': false, 'inputs': [], 'name': 'deposit', 'outputs': [], 'payable': true, 'stateMutability': 'payable', 'type': 'function'}, {'constant': true, 'inputs': [{'name': '', 'type': 'address'}, {'name': '', 'type': 'address'}], 'name': 'allowance', 'outputs': [{'name': '', 'type': 'uint256'}], 'payable': false, 'stateMutability': 'view', 'type': 'function'}, {'payable': true, 'stateMutability': 'payable', 'type': 'fallback'}, {'anonymous': false, 'inputs': [{'indexed': true, 'name': 'src', 'type': 'address'}, {'indexed': true, 'name': 'guy', 'type': 'address'}, {'indexed': false, 'name': 'wad', 'type': 'uint256'}], 'name': 'Approval', 'type': 'event'}, {'anonymous': false, 'inputs': [{'indexed': true, 'name': 'src', 'type': 'address'}, {'indexed': true, 'name': 'dst', 'type': 'address'}, {'indexed': false, 'name': 'wad', 'type': 'uint256'}], 'name': 'Transfer', 'type': 'event'}, {'anonymous': false, 'inputs': [{'indexed': true, 'name': 'dst', 'type': 'address'}, {'indexed': false, 'name': 'wad', 'type': 'uint256'}], 'name': 'Deposit', 'type': 'event'}, {'anonymous': false, 'inputs': [{'indexed': true, 'name': 'src', 'type': 'address'}, {'indexed': false, 'name': 'wad', 'type': 'uint256'}], 'name': 'Withdrawal', 'type': 'event'}]

'''
'''--- src/abi/CheezeWizardsBasicTournament.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const CheezeWizardsBasicTournament: PartialReadonlyContractAbi = [{"constant": true, "inputs": [], "name": "cfoAddress", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "ceoAddress", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "pauseDuration", "type": "uint256"}], "name": "pause", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "newCfo", "type": "address"}], "name": "setCfo", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "duelResolver", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "newCeo", "type": "address"}], "name": "setCeo", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "newCoo", "type": "address"}], "name": "setCoo", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "powerScale", "outputs": [{"name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "cooAddress", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "isPaused", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"inputs": [{"name": "cooAddress_", "type": "address"}, {"name": "duelResolver_", "type": "address"}, {"name": "powerScale_", "type": "uint256"}, {"name": "tournamentStartBlock_", "type": "uint256"}, {"name": "admissionDuration_", "type": "uint256"}, {"name": "revivalDuration_", "type": "uint256"}, {"name": "ascensionDuration_", "type": "uint256"}, {"name": "fightDuration_", "type": "uint256"}, {"name": "cullingDuration_", "type": "uint256"}, {"name": "blueMoldBasePower_", "type": "uint256"}, {"name": "sessionsBetweenMoldDoubling_", "type": "uint256"}, {"name": "duelTimeoutBlocks_", "type": "uint256"}], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}, {"payable": true, "stateMutability": "payable", "type": "fallback"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "duelId", "type": "bytes32"}, {"indexed": false, "name": "wizardId1", "type": "uint256"}, {"indexed": false, "name": "wizardId2", "type": "uint256"}, {"indexed": false, "name": "timeoutBlock", "type": "uint256"}, {"indexed": false, "name": "isAscensionBattle", "type": "bool"}], "name": "DuelStart", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "duelId", "type": "bytes32"}, {"indexed": false, "name": "wizardId1", "type": "uint256"}, {"indexed": false, "name": "wizardId2", "type": "uint256"}, {"indexed": false, "name": "moveSet1", "type": "bytes32"}, {"indexed": false, "name": "moveSet2", "type": "bytes32"}, {"indexed": false, "name": "power1", "type": "uint256"}, {"indexed": false, "name": "power2", "type": "uint256"}], "name": "DuelEnd", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "duelId", "type": "bytes32"}, {"indexed": false, "name": "wizardId1", "type": "uint256"}, {"indexed": false, "name": "wizardId2", "type": "uint256"}, {"indexed": false, "name": "power1", "type": "uint256"}, {"indexed": false, "name": "power2", "type": "uint256"}], "name": "DuelTimeOut", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "wizardId", "type": "uint256"}], "name": "WizardElimination", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "wizardId", "type": "uint256"}], "name": "AscensionStart", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "wizardId1", "type": "uint256"}, {"indexed": false, "name": "wizardId2", "type": "uint256"}], "name": "AscensionPairUp", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "wizardId", "type": "uint256"}, {"indexed": false, "name": "power", "type": "uint256"}], "name": "AscensionComplete", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "wizId", "type": "uint256"}, {"indexed": false, "name": "power", "type": "uint256"}], "name": "Revive", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "givingWizId", "type": "uint256"}, {"indexed": false, "name": "receivingWizId", "type": "uint256"}, {"indexed": false, "name": "amountGifted", "type": "uint256"}], "name": "PowerGifted", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "claimingWinnerId", "type": "uint256"}, {"indexed": false, "name": "prizeAmount", "type": "uint256"}], "name": "PrizeClaimed", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "pauseEndingBlock", "type": "uint256"}], "name": "Paused", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "previousCeo", "type": "address"}, {"indexed": false, "name": "newCeo", "type": "address"}], "name": "CEOTransferred", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "previousCoo", "type": "address"}, {"indexed": false, "name": "newCoo", "type": "address"}], "name": "COOTransferred", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "previousCfo", "type": "address"}, {"indexed": false, "name": "newCfo", "type": "address"}], "name": "CFOTransferred", "type": "event"}, {"constant": true, "inputs": [{"name": "interfaceId", "type": "bytes4"}], "name": "supportsInterface", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "isActive", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "wizardId", "type": "uint256"}], "name": "getWizard", "outputs": [{"name": "affinity", "type": "uint256"}, {"name": "power", "type": "uint256"}, {"name": "maxPower", "type": "uint256"}, {"name": "nonce", "type": "uint256"}, {"name": "currentDuel", "type": "bytes32"}, {"name": "ascending", "type": "bool"}, {"name": "ascensionOpponent", "type": "uint256"}, {"name": "molded", "type": "bool"}, {"name": "ready", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "wizardId", "type": "uint256"}], "name": "wizardFingerprint", "outputs": [{"name": "", "type": "bytes32"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "wizardId", "type": "uint256"}], "name": "isReady", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "wizardIds", "type": "uint256[]"}, {"name": "powers", "type": "uint88[]"}], "name": "enterWizards", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function"}, {"constant": false, "inputs": [{"name": "wizardId", "type": "uint256"}], "name": "revive", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function"}, {"constant": false, "inputs": [{"name": "wizardId", "type": "uint256"}], "name": "updateAffinity", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "wizardId", "type": "uint256"}], "name": "startAscension", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "wizardId", "type": "uint256"}, {"name": "commitment", "type": "bytes32"}], "name": "challengeAscending", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "commitment", "type": "bytes32"}], "name": "acceptAscensionChallenge", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [], "name": "completeAscension", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "committingWizardId", "type": "uint256"}, {"name": "otherWizardId", "type": "uint256"}, {"name": "commitment", "type": "bytes32"}], "name": "oneSidedCommit", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "wizardId", "type": "uint256"}], "name": "cancelCommitment", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "wizardId1", "type": "uint256"}, {"name": "wizardId2", "type": "uint256"}, {"name": "commit1", "type": "bytes32"}, {"name": "commit2", "type": "bytes32"}, {"name": "sig1", "type": "bytes"}, {"name": "sig2", "type": "bytes"}], "name": "doubleCommit", "outputs": [{"name": "duelId", "type": "bytes32"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "committingWizardId", "type": "uint256"}, {"name": "commit", "type": "bytes32"}, {"name": "moveSet", "type": "bytes32"}, {"name": "salt", "type": "bytes32"}, {"name": "otherWizardId", "type": "uint256"}, {"name": "otherCommit", "type": "bytes32"}], "name": "oneSidedReveal", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "wizardId1", "type": "uint256"}, {"name": "wizardId2", "type": "uint256"}, {"name": "commit1", "type": "bytes32"}, {"name": "commit2", "type": "bytes32"}, {"name": "moveSet1", "type": "bytes32"}, {"name": "moveSet2", "type": "bytes32"}, {"name": "salt1", "type": "bytes32"}, {"name": "salt2", "type": "bytes32"}], "name": "doubleReveal", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "wizardId1", "type": "uint256"}, {"name": "wizardId2", "type": "uint256"}], "name": "resolveTimedOutDuel", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "sendingWizardId", "type": "uint256"}, {"name": "receivingWizardId", "type": "uint256"}], "name": "giftPower", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "wizardIds", "type": "uint256[]"}, {"name": "survivor", "type": "uint256"}], "name": "cullMoldedWithSurvivor", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "moldyWizardIds", "type": "uint256[]"}], "name": "cullMoldedWithMolded", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "wizardIds", "type": "uint256[]"}], "name": "cullTiredWizards", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "claimingWinnerId", "type": "uint256"}], "name": "claimTheBigCheeze", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "claimingWinnerId", "type": "uint256"}, {"name": "allWinners", "type": "uint256[]"}], "name": "claimSharedWinnings", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [], "name": "destroy", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}]

'''
'''--- src/abi/CheezeWizardsGuild.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const CheezeWizardsGuild: PartialReadonlyContractAbi = [{"constant": false, "inputs": [{"name": "to", "type": "address"}, {"name": "wizardId", "type": "uint256"}], "name": "approve", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [], "name": "closeSeries", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "wizardIds", "type": "uint256[]"}, {"name": "powers", "type": "uint88[]"}, {"name": "affinities", "type": "uint8[]"}, {"name": "owner", "type": "address"}], "name": "mintReservedWizards", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "powers", "type": "uint88[]"}, {"name": "affinities", "type": "uint8[]"}, {"name": "owner", "type": "address"}], "name": "mintWizards", "outputs": [{"name": "wizardIds", "type": "uint256[]"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "minter", "type": "address"}, {"name": "reservedIds", "type": "uint256"}], "name": "openSeries", "outputs": [{"name": "seriesId", "type": "uint64"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "from", "type": "address"}, {"name": "to", "type": "address"}, {"name": "wizardId", "type": "uint256"}], "name": "safeTransferFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "from", "type": "address"}, {"name": "to", "type": "address"}, {"name": "wizardId", "type": "uint256"}, {"name": "_data", "type": "bytes"}], "name": "safeTransferFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "wizardId", "type": "uint256"}, {"name": "newAffinity", "type": "uint8"}], "name": "setAffinity", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "to", "type": "address"}, {"name": "approved", "type": "bool"}], "name": "setApprovalForAll", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "newCeo", "type": "address"}], "name": "setCeo", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "newCfo", "type": "address"}], "name": "setCfo", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "newCoo", "type": "address"}], "name": "setCoo", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "wizardIds", "type": "uint256[]"}, {"name": "metadata", "type": "bytes32[]"}], "name": "setMetadata", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "from", "type": "address"}, {"name": "to", "type": "address"}, {"name": "wizardId", "type": "uint256"}], "name": "transferFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"name": "_cooAddress", "type": "address"}], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "seriesIndex", "type": "uint64"}, {"indexed": false, "name": "reservedIds", "type": "uint256"}], "name": "SeriesOpen", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "seriesIndex", "type": "uint64"}], "name": "SeriesClose", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "name": "wizardId", "type": "uint256"}, {"indexed": false, "name": "metadata", "type": "bytes32"}], "name": "MetadataSet", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "from", "type": "address"}, {"indexed": false, "name": "to", "type": "address"}, {"indexed": false, "name": "wizardId", "type": "uint256"}], "name": "Transfer", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "owner", "type": "address"}, {"indexed": false, "name": "approved", "type": "address"}, {"indexed": false, "name": "wizardId", "type": "uint256"}], "name": "Approval", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "owner", "type": "address"}, {"indexed": false, "name": "operator", "type": "address"}, {"indexed": false, "name": "approved", "type": "bool"}], "name": "ApprovalForAll", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "wizardId", "type": "uint256"}, {"indexed": false, "name": "affinity", "type": "uint8"}, {"indexed": false, "name": "innatePower", "type": "uint256"}], "name": "WizardConjured", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "wizardId", "type": "uint256"}, {"indexed": false, "name": "affinity", "type": "uint8"}], "name": "WizardAffinityAssigned", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "previousCeo", "type": "address"}, {"indexed": false, "name": "newCeo", "type": "address"}], "name": "CEOTransferred", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "previousCoo", "type": "address"}, {"indexed": false, "name": "newCoo", "type": "address"}], "name": "COOTransferred", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "previousCfo", "type": "address"}, {"indexed": false, "name": "newCfo", "type": "address"}], "name": "CFOTransferred", "type": "event"}, {"constant": true, "inputs": [], "name": "_INTERFACE_ID_ERC165", "outputs": [{"name": "", "type": "bytes4"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "_INTERFACE_ID_INVALID", "outputs": [{"name": "", "type": "bytes4"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "owner", "type": "address"}], "name": "balanceOf", "outputs": [{"name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "ceoAddress", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "cfoAddress", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "cooAddress", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "_contract", "type": "address"}, {"name": "_interfaceId", "type": "bytes4"}], "name": "doesContractImplementInterface", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "wizardId", "type": "uint256"}], "name": "getApproved", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "id", "type": "uint256"}], "name": "getWizard", "outputs": [{"name": "owner", "type": "address"}, {"name": "innatePower", "type": "uint88"}, {"name": "affinity", "type": "uint8"}, {"name": "metadata", "type": "bytes32"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "owner", "type": "address"}, {"name": "operator", "type": "address"}], "name": "isApprovedForAll", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "spender", "type": "address"}, {"name": "tokenId", "type": "uint256"}], "name": "isApprovedOrOwner", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "wizardId", "type": "uint256"}], "name": "ownerOf", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "interfaceId", "type": "bytes4"}], "name": "supportsInterface", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "wizardId", "type": "uint256"}, {"name": "hash", "type": "bytes32"}, {"name": "sig", "type": "bytes"}], "name": "verifySignature", "outputs": [], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "wizardId1", "type": "uint256"}, {"name": "wizardId2", "type": "uint256"}, {"name": "hash1", "type": "bytes32"}, {"name": "hash2", "type": "bytes32"}, {"name": "sig1", "type": "bytes"}, {"name": "sig2", "type": "bytes"}], "name": "verifySignatures", "outputs": [], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "", "type": "uint256"}], "name": "wizardsById", "outputs": [{"name": "affinity", "type": "uint8"}, {"name": "innatePower", "type": "uint88"}, {"name": "owner", "type": "address"}, {"name": "metadata", "type": "bytes32"}], "payable": false, "stateMutability": "view", "type": "function"}]

'''
'''--- src/abi/DecentralandEstates.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const DecentralandEstates: PartialReadonlyContractAbi = [{"constant": true, "inputs": [{"name": "_interfaceId", "type": "bytes4"}], "name": "supportsInterface", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "name", "outputs": [{"name": "", "type": "string"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "_name", "type": "string"}, {"name": "_symbol", "type": "string"}, {"name": "_registry", "type": "address"}], "name": "initialize", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "_tokenId", "type": "uint256"}], "name": "getApproved", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "_to", "type": "address"}, {"name": "_tokenId", "type": "uint256"}], "name": "approve", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "", "type": "uint256"}], "name": "landIdEstate", "outputs": [{"name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "_operator", "type": "address"}, {"name": "_from", "type": "address"}, {"name": "_tokenId", "type": "uint256"}, {"name": "_data", "type": "bytes"}], "name": "onERC721Received", "outputs": [{"name": "", "type": "bytes4"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "estateId", "type": "uint256"}], "name": "getFingerprint", "outputs": [{"name": "result", "type": "bytes32"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "totalSupply", "outputs": [{"name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "_from", "type": "address"}, {"name": "_to", "type": "address"}, {"name": "_tokenId", "type": "uint256"}], "name": "transferFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "estateId", "type": "uint256"}, {"name": "landId", "type": "uint256"}, {"name": "data", "type": "string"}], "name": "updateLandData", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "_owner", "type": "address"}, {"name": "_index", "type": "uint256"}], "name": "tokenOfOwnerByIndex", "outputs": [{"name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "", "type": "uint256"}, {"name": "", "type": "uint256"}], "name": "estateLandIds", "outputs": [{"name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "estateId", "type": "uint256"}, {"name": "landIds", "type": "uint256[]"}, {"name": "destinatary", "type": "address"}], "name": "transferManyLands", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "estateId", "type": "uint256"}, {"name": "landIds", "type": "uint256[]"}, {"name": "data", "type": "string"}], "name": "updateManyLandData", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "_from", "type": "address"}, {"name": "_to", "type": "address"}, {"name": "_tokenId", "type": "uint256"}], "name": "safeTransferFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "_name", "type": "string"}, {"name": "_symbol", "type": "string"}], "name": "initialize", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "_tokenId", "type": "uint256"}], "name": "exists", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "_index", "type": "uint256"}], "name": "tokenByIndex", "outputs": [{"name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "_registry", "type": "address"}], "name": "setLANDRegistry", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "estateId", "type": "uint256"}, {"name": "metadata", "type": "string"}], "name": "updateMetadata", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [], "name": "ping", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "_tokenId", "type": "uint256"}], "name": "ownerOf", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "operator", "type": "address"}, {"name": "estateId", "type": "uint256"}], "name": "isUpdateAuthorized", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "_owner", "type": "address"}], "name": "balanceOf", "outputs": [{"name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "from", "type": "address"}, {"name": "to", "type": "address"}, {"name": "estateIds", "type": "uint256[]"}], "name": "safeTransferManyFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "registry", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [], "name": "initialize", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "owner", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "estateId", "type": "uint256"}, {"name": "fingerprint", "type": "bytes"}], "name": "verifyFingerprint", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "symbol", "outputs": [{"name": "", "type": "string"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "", "type": "uint256"}], "name": "updateOperator", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "", "type": "uint256"}, {"name": "", "type": "uint256"}], "name": "estateLandIndex", "outputs": [{"name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "_to", "type": "address"}, {"name": "_approved", "type": "bool"}], "name": "setApprovalForAll", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "estateId", "type": "uint256"}, {"name": "landId", "type": "uint256"}, {"name": "destinatary", "type": "address"}], "name": "transferLand", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "estateId", "type": "uint256"}], "name": "getMetadata", "outputs": [{"name": "", "type": "string"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "estateId", "type": "uint256"}, {"name": "operator", "type": "address"}], "name": "setUpdateOperator", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "_from", "type": "address"}, {"name": "_to", "type": "address"}, {"name": "_tokenId", "type": "uint256"}, {"name": "_data", "type": "bytes"}], "name": "safeTransferFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "landId", "type": "uint256"}], "name": "getLandEstateId", "outputs": [{"name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"name": "contractName", "type": "string"}, {"name": "migrationId", "type": "string"}], "name": "isMigrated", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "_sender", "type": "address"}], "name": "initialize", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "_tokenId", "type": "uint256"}], "name": "tokenURI", "outputs": [{"name": "", "type": "string"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "to", "type": "address"}, {"name": "metadata", "type": "string"}], "name": "mint", "outputs": [{"name": "", "type": "uint256"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "from", "type": "address"}, {"name": "to", "type": "address"}, {"name": "estateIds", "type": "uint256[]"}, {"name": "data", "type": "bytes"}], "name": "safeTransferManyFrom", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "_owner", "type": "address"}, {"name": "_operator", "type": "address"}], "name": "isApprovedForAll", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "newOwner", "type": "address"}], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "estateId", "type": "uint256"}], "name": "getEstateSize", "outputs": [{"name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"anonymous": false, "inputs": [{"indexed": true, "name": "previousOwner", "type": "address"}, {"indexed": true, "name": "newOwner", "type": "address"}], "name": "OwnershipTransferred", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "name": "_from", "type": "address"}, {"indexed": true, "name": "_to", "type": "address"}, {"indexed": true, "name": "_tokenId", "type": "uint256"}], "name": "Transfer", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "name": "_owner", "type": "address"}, {"indexed": true, "name": "_approved", "type": "address"}, {"indexed": true, "name": "_tokenId", "type": "uint256"}], "name": "Approval", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "name": "_owner", "type": "address"}, {"indexed": true, "name": "_operator", "type": "address"}, {"indexed": false, "name": "_approved", "type": "bool"}], "name": "ApprovalForAll", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "name": "_owner", "type": "address"}, {"indexed": true, "name": "_estateId", "type": "uint256"}, {"indexed": false, "name": "_data", "type": "string"}], "name": "CreateEstate", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "name": "_estateId", "type": "uint256"}, {"indexed": true, "name": "_landId", "type": "uint256"}], "name": "AddLand", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "name": "_estateId", "type": "uint256"}, {"indexed": true, "name": "_landId", "type": "uint256"}, {"indexed": true, "name": "_destinatary", "type": "address"}], "name": "RemoveLand", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "name": "_assetId", "type": "uint256"}, {"indexed": true, "name": "_holder", "type": "address"}, {"indexed": true, "name": "_operator", "type": "address"}, {"indexed": false, "name": "_data", "type": "string"}], "name": "Update", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "name": "_estateId", "type": "uint256"}, {"indexed": true, "name": "_operator", "type": "address"}], "name": "UpdateOperator", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "name": "_registry", "type": "address"}], "name": "SetLANDRegistry", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "contractName", "type": "string"}, {"indexed": false, "name": "migrationId", "type": "string"}], "name": "Migrated", "type": "event"}]

'''
'''--- src/abi/ERC1155.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const ERC1155: PartialReadonlyContractAbi = [
  {
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "fallback"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "_owner",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_spender",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "Approval",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": false,
        "name": "_block",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "_storage",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_oldContract",
        "type": "address"
      }
    ],
    "name": "Initialize",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": false,
        "name": "_block",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "_nextContract",
        "type": "address"
      }
    ],
    "name": "Retire",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "_from",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_data",
        "type": "string"
      }
    ],
    "name": "Log",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "UpdateDecimals",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "UpdateName",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "UpdateSymbol",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "_uri",
        "type": "string"
      }
    ],
    "name": "SetURI",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "_from",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_to",
        "type": "address"
      }
    ],
    "name": "Assign",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "_creator",
        "type": "address"
      }
    ],
    "name": "AcceptAssignment",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "_creator",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_isNonFungible",
        "type": "bool"
      }
    ],
    "name": "Create",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "Mint",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "UpdateMaxMeltFee",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "UpdateMeltFee",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_owner",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_operator",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "_approved",
        "type": "bool"
      }
    ],
    "name": "OperatorApproval",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "_from",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_to",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "Transfer",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "_sender",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_feeId",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "_feeValue",
        "type": "uint256"
      }
    ],
    "name": "TransferFee",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "UpdateMaxTransferFee",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "UpdateTransferable",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "UpdateTransferFee",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "_account",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_whitelisted",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_on",
        "type": "bool"
      }
    ],
    "name": "Whitelist",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "_owner",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "Melt",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_id",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "_sender",
        "type": "address"
      }
    ],
    "name": "DeployERCAdapter",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_tradeId",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "_firstParty",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_secondParty",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_escrowedEnjFirstParty",
        "type": "uint256"
      }
    ],
    "name": "CreateTrade",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_tradeId",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "_firstParty",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_secondParty",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_receivedEnjFirstParty",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "_changeEnjFirstParty",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "_receivedEnjSecondParty",
        "type": "uint256"
      }
    ],
    "name": "CompleteTrade",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_tradeId",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "_firstParty",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_receivedEnjFirstParty",
        "type": "uint256"
      }
    ],
    "name": "CancelTrade",
    "type": "event"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_interfaceID",
        "type": "bytes4"
      }
    ],
    "name": "supportsInterface",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "pure",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_name",
        "type": "string"
      },
      {
        "name": "_totalSupply",
        "type": "uint256"
      },
      {
        "name": "_initialReserve",
        "type": "uint256"
      },
      {
        "name": "_supplyModel",
        "type": "address"
      },
      {
        "name": "_meltValue",
        "type": "uint256"
      },
      {
        "name": "_meltFeeRatio",
        "type": "uint16"
      },
      {
        "name": "_transferable",
        "type": "uint8"
      },
      {
        "name": "_transferFeeSettings",
        "type": "uint256[3]"
      },
      {
        "name": "_nonFungible",
        "type": "bool"
      }
    ],
    "name": "create",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_initialReserve",
        "type": "uint256"
      }
    ],
    "name": "minMeltValue",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_to",
        "type": "address[]"
      },
      {
        "name": "_values",
        "type": "uint256[]"
      }
    ],
    "name": "mintFungibles",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_to",
        "type": "address[]"
      }
    ],
    "name": "mintNonFungibles",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_to",
        "type": "address[]"
      },
      {
        "name": "_data",
        "type": "uint128[]"
      }
    ],
    "name": "mintNonFungiblesWithData",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "reserve",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_value",
        "type": "uint128"
      }
    ],
    "name": "releaseReserve",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_name",
        "type": "string"
      }
    ],
    "name": "updateName",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_creator",
        "type": "address"
      }
    ],
    "name": "assign",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "acceptAssignment",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_account",
        "type": "address"
      },
      {
        "name": "_whitelisted",
        "type": "address"
      },
      {
        "name": "_on",
        "type": "bool"
      }
    ],
    "name": "setWhitelisted",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_transferable",
        "type": "uint8"
      }
    ],
    "name": "setTransferable",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_fee",
        "type": "uint16"
      }
    ],
    "name": "setMeltFee",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_fee",
        "type": "uint16"
      }
    ],
    "name": "decreaseMaxMeltFee",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_fee",
        "type": "uint256"
      }
    ],
    "name": "setTransferFee",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_fee",
        "type": "uint256"
      }
    ],
    "name": "decreaseMaxTransferFee",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_decimals",
        "type": "uint8"
      },
      {
        "name": "_symbol",
        "type": "string"
      }
    ],
    "name": "deployERC20Adapter",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_symbol",
        "type": "string"
      }
    ],
    "name": "deployERC721Adapter",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_data",
        "type": "string"
      }
    ],
    "name": "addLog",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "typeCount",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_index",
        "type": "uint256"
      }
    ],
    "name": "typeByIndex",
    "outputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "nonFungibleTypeCount",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_index",
        "type": "uint256"
      }
    ],
    "name": "nonFungibleTypeByIndex",
    "outputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "fungibleTypeCount",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_index",
        "type": "uint256"
      }
    ],
    "name": "fungibleTypeByIndex",
    "outputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "typeData",
    "outputs": [
      {
        "name": "_name",
        "type": "string"
      },
      {
        "name": "_creator",
        "type": "address"
      },
      {
        "name": "_meltValue",
        "type": "uint256"
      },
      {
        "name": "_meltFeeRatio",
        "type": "uint16"
      },
      {
        "name": "_meltFeeMaxRatio",
        "type": "uint16"
      },
      {
        "name": "_supplyModel",
        "type": "address"
      },
      {
        "name": "_totalSupply",
        "type": "uint256"
      },
      {
        "name": "_circulatingSupply",
        "type": "uint256"
      },
      {
        "name": "_reserve",
        "type": "uint256"
      },
      {
        "name": "_transferable",
        "type": "uint8"
      },
      {
        "name": "_transferFeeData",
        "type": "uint256[4]"
      },
      {
        "name": "_nonFungible",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "transferSettings",
    "outputs": [
      {
        "name": "_transferable",
        "type": "uint8"
      },
      {
        "name": "_transferFeeType",
        "type": "uint8"
      },
      {
        "name": "_transferFeeCurrency",
        "type": "uint256"
      },
      {
        "name": "_transferFeeValue",
        "type": "uint256"
      },
      {
        "name": "_transferFeeMaxValue",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_creator",
        "type": "address"
      }
    ],
    "name": "isCreatorOf",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_account",
        "type": "address"
      },
      {
        "name": "_whitelisted",
        "type": "address"
      }
    ],
    "name": "whitelisted",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "name",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "totalSupply",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "mintableSupply",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "circulatingSupply",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_owner",
        "type": "address"
      }
    ],
    "name": "balanceOf",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "decimals",
    "outputs": [
      {
        "name": "",
        "type": "uint8"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "symbol",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "getERC20Adapter",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "getERC721Adapter",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "transfer",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_value",
        "type": "uint256"
      },
      {
        "name": "_data",
        "type": "bytes"
      }
    ],
    "name": "safeTransfer",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_value",
        "type": "uint256"
      },
      {
        "name": "_msgSender",
        "type": "address"
      }
    ],
    "name": "transferAdapter",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_from",
        "type": "address"
      },
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "transferFrom",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_from",
        "type": "address"
      },
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_value",
        "type": "uint256"
      },
      {
        "name": "_data",
        "type": "bytes"
      }
    ],
    "name": "safeTransferFrom",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_from",
        "type": "address"
      },
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_value",
        "type": "uint256"
      },
      {
        "name": "_msgSender",
        "type": "address"
      }
    ],
    "name": "transferFromAdapter",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_ids",
        "type": "uint256[]"
      },
      {
        "name": "_values",
        "type": "uint256[]"
      }
    ],
    "name": "batchTransfer",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_ids",
        "type": "uint256[]"
      },
      {
        "name": "_values",
        "type": "uint256[]"
      },
      {
        "name": "_data",
        "type": "bytes"
      }
    ],
    "name": "safeBatchTransfer",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_from",
        "type": "address"
      },
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_ids",
        "type": "uint256[]"
      },
      {
        "name": "_values",
        "type": "uint256[]"
      }
    ],
    "name": "batchTransferFrom",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_from",
        "type": "address"
      },
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_ids",
        "type": "uint256[]"
      },
      {
        "name": "_values",
        "type": "uint256[]"
      },
      {
        "name": "_data",
        "type": "bytes"
      }
    ],
    "name": "safeBatchTransferFrom",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_to",
        "type": "address[]"
      },
      {
        "name": "_ids",
        "type": "uint256[]"
      },
      {
        "name": "_values",
        "type": "uint256[]"
      }
    ],
    "name": "multicastTransfer",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_to",
        "type": "address[]"
      },
      {
        "name": "_ids",
        "type": "uint256[]"
      },
      {
        "name": "_values",
        "type": "uint256[]"
      },
      {
        "name": "_data",
        "type": "bytes"
      }
    ],
    "name": "safeMulticastTransfer",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_from",
        "type": "address[]"
      },
      {
        "name": "_to",
        "type": "address[]"
      },
      {
        "name": "_ids",
        "type": "uint256[]"
      },
      {
        "name": "_values",
        "type": "uint256[]"
      }
    ],
    "name": "multicastTransferFrom",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_owner",
        "type": "address"
      },
      {
        "name": "_spender",
        "type": "address"
      }
    ],
    "name": "allowance",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_spender",
        "type": "address"
      },
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_currentValue",
        "type": "uint256"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "approve",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_spender",
        "type": "address"
      },
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_currentValue",
        "type": "uint256"
      },
      {
        "name": "_value",
        "type": "uint256"
      },
      {
        "name": "_msgSender",
        "type": "address"
      }
    ],
    "name": "approveAdapter",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_spender",
        "type": "address"
      },
      {
        "name": "_ids",
        "type": "uint256[]"
      },
      {
        "name": "_currentValues",
        "type": "uint256[]"
      },
      {
        "name": "_values",
        "type": "uint256[]"
      }
    ],
    "name": "batchApprove",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_operator",
        "type": "address"
      },
      {
        "name": "_ids",
        "type": "uint256[]"
      },
      {
        "name": "_approved",
        "type": "bool"
      }
    ],
    "name": "setApproval",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_operator",
        "type": "address"
      },
      {
        "name": "_approved",
        "type": "bool"
      }
    ],
    "name": "setApprovalForAll",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_operator",
        "type": "address"
      },
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_approved",
        "type": "bool"
      },
      {
        "name": "_msgSender",
        "type": "address"
      }
    ],
    "name": "setApprovalAdapter",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_owner",
        "type": "address"
      },
      {
        "name": "_operator",
        "type": "address"
      },
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "isApproved",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_owner",
        "type": "address"
      },
      {
        "name": "_operator",
        "type": "address"
      }
    ],
    "name": "isApprovedForAll",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_value",
        "type": "uint256"
      },
      {
        "name": "_from",
        "type": "address"
      },
      {
        "name": "_to",
        "type": "address"
      }
    ],
    "name": "transferFees",
    "outputs": [
      {
        "name": "_transferValue",
        "type": "uint256"
      },
      {
        "name": "_minTransferValue",
        "type": "uint256"
      },
      {
        "name": "_transferFeeCurrency",
        "type": "uint256"
      },
      {
        "name": "_fee",
        "type": "uint256"
      },
      {
        "name": "_maxFee",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_askingIds",
        "type": "uint256[]"
      },
      {
        "name": "_askingValues",
        "type": "uint128[]"
      },
      {
        "name": "_offeringIds",
        "type": "uint256[]"
      },
      {
        "name": "_offeringValues",
        "type": "uint128[]"
      },
      {
        "name": "_secondParty",
        "type": "address"
      }
    ],
    "name": "createTrade",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "tradeCompletable",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "completeTrade",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "cancelTrade",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_ids",
        "type": "uint256[]"
      },
      {
        "name": "_values",
        "type": "uint256[]"
      }
    ],
    "name": "melt",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "ownerOf",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_uri",
        "type": "string"
      }
    ],
    "name": "setURI",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "uri",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "nonFungibleCount",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_index",
        "type": "uint256"
      }
    ],
    "name": "nonFungibleByIndex",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_owner",
        "type": "address"
      },
      {
        "name": "_index",
        "type": "uint256"
      }
    ],
    "name": "nonFungibleOfOwnerByIndex",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "isNonFungible",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "pure",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_addr",
        "type": "address"
      }
    ],
    "name": "isContract",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_erc20ContractAddress",
        "type": "address"
      },
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "releaseERC20",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "releaseETH",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_erc721ContractAddress",
        "type": "address"
      },
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_token",
        "type": "uint256"
      }
    ],
    "name": "releaseERC721",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_erc1155ContractAddress",
        "type": "address"
      },
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_id",
        "type": "uint256"
      },
      {
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "releaseERC1155",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_storage",
        "type": "address"
      },
      {
        "name": "_oldContract",
        "type": "address"
      }
    ],
    "name": "initialize",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_nextContract",
        "type": "address"
      }
    ],
    "name": "retire",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  }
]

'''
'''--- src/abi/ERC20.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const ERC20: PartialReadonlyContractAbi = [{'constant': true, 'inputs': [], 'name': 'name', 'outputs': [{'name': '', 'type': 'string'}], 'payable': false, 'type': 'function'}, {'constant': false, 'inputs': [{'name': '_spender', 'type': 'address'}, {'name': '_value', 'type': 'uint256'}], 'name': 'approve', 'outputs': [{'name': 'success', 'type': 'bool'}], 'payable': false, 'type': 'function'}, {'constant': true, 'inputs': [], 'name': 'totalSupply', 'outputs': [{'name': '', 'type': 'uint256'}], 'payable': false, 'type': 'function'}, {'constant': false, 'inputs': [{'name': '_from', 'type': 'address'}, {'name': '_to', 'type': 'address'}, {'name': '_value', 'type': 'uint256'}], 'name': 'transferFrom', 'outputs': [{'name': 'success', 'type': 'bool'}], 'payable': false, 'type': 'function'}, {'constant': true, 'inputs': [], 'name': 'decimals', 'outputs': [{'name': '', 'type': 'uint8'}], 'payable': false, 'type': 'function'}, {'constant': true, 'inputs': [], 'name': 'version', 'outputs': [{'name': '', 'type': 'string'}], 'payable': false, 'type': 'function'}, {'constant': true, 'inputs': [{'name': '_owner', 'type': 'address'}], 'name': 'balanceOf', 'outputs': [{'name': 'balance', 'type': 'uint256'}], 'payable': false, 'type': 'function'}, {'constant': true, 'inputs': [], 'name': 'symbol', 'outputs': [{'name': '', 'type': 'string'}], 'payable': false, 'type': 'function'}, {'constant': false, 'inputs': [{'name': '_to', 'type': 'address'}, {'name': '_value', 'type': 'uint256'}], 'name': 'transfer', 'outputs': [{'name': 'success', 'type': 'bool'}], 'payable': false, 'type': 'function'}, {'constant': false, 'inputs': [{'name': '_spender', 'type': 'address'}, {'name': '_value', 'type': 'uint256'}, {'name': '_extraData', 'type': 'bytes'}], 'name': 'approveAndCall', 'outputs': [{'name': 'success', 'type': 'bool'}], 'payable': false, 'type': 'function'}, {'constant': true, 'inputs': [{'name': '_owner', 'type': 'address'}, {'name': '_spender', 'type': 'address'}], 'name': 'allowance', 'outputs': [{'name': 'remaining', 'type': 'uint256'}], 'payable': false, 'type': 'function'}, {'inputs': [{'name': '_initialAmount', 'type': 'uint256'}, {'name': '_tokenName', 'type': 'string'}, {'name': '_decimalUnits', 'type': 'uint8'}, {'name': '_tokenSymbol', 'type': 'string'}], 'type': 'constructor'}, {'payable': false, 'type': 'fallback'}, {'anonymous': false, 'inputs': [{'indexed': true, 'name': '_from', 'type': 'address'}, {'indexed': true, 'name': '_to', 'type': 'address'}, {'indexed': false, 'name': '_value', 'type': 'uint256'}], 'name': 'Transfer', 'type': 'event'}, {'anonymous': false, 'inputs': [{'indexed': true, 'name': '_owner', 'type': 'address'}, {'indexed': true, 'name': '_spender', 'type': 'address'}, {'indexed': false, 'name': '_value', 'type': 'uint256'}], 'name': 'Approval', 'type': 'event'}]

'''
'''--- src/abi/ERC721v3.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const ERC721: PartialReadonlyContractAbi = [
  {
    'constant': true,
    'inputs': [],
    'name': 'name',
    'outputs': [
      {
        'name': '',
        'type': 'string',
      },
    ],
    'payable': false,
    'stateMutability': 'view',
    'type': 'function',
  },
  {
    'constant': true,
    'inputs': [
        {
          'name': '',
          'type': 'uint256',
        },
    ],
    'name': 'kittyIndexToApproved',
    'outputs': [
        {
          'name': '',
          'type': 'address',
        },
    ],
    'payable': false,
    'stateMutability': 'view',
    'type': 'function',
  },
  {
    'constant': true,
    'inputs': [
        {
          'name': '',
          'type': 'uint256',
        },
    ],
    'name': 'partIndexToApproved',
    'outputs': [
        {
          'name': '',
          'type': 'address',
        },
    ],
    'payable': false,
    'stateMutability': 'view',
    'type': 'function',
  },
  {
    'constant': true,
    'inputs': [
        {
          'name': '',
          'type': 'address',
        },
        {
          'name': '',
          'type': 'uint256',
        },
    ],
    'name': 'allowed',
    'outputs': [
        {
          'name': '',
          'type': 'address',
        },
    ],
    'payable': false,
    'stateMutability': 'view',
    'type': 'function',
  },
  {
    'constant': true,
    'inputs': [
      {
        'name': '_tokenId',
        'type': 'uint256',
      },
    ],
    'name': 'getApproved',
    'outputs': [
      {
        'name': '',
        'type': 'address',
      },
    ],
    'payable': false,
    'stateMutability': 'view',
    'type': 'function',
  },
  {
    'constant': false,
    'inputs': [
      {
        'name': '_to',
        'type': 'address',
      },
      {
        'name': '_tokenId',
        'type': 'uint256',
      },
    ],
    'name': 'approve',
    'outputs': [],
    'payable': false,
    'stateMutability': 'nonpayable',
    'type': 'function',
  },
  {
    'constant': true,
    'inputs': [],
    'name': 'totalSupply',
    'outputs': [
      {
        'name': '',
        'type': 'uint256',
      },
    ],
    'payable': false,
    'stateMutability': 'view',
    'type': 'function',
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_tokenId",
        "type": "uint256"
      }
    ],
    "name": "transfer",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    'constant': false,
    'inputs': [
      {
        'name': '_from',
        'type': 'address',
      },
      {
        'name': '_to',
        'type': 'address',
      },
      {
        'name': '_tokenId',
        'type': 'uint256',
      },
    ],
    'name': 'transferFrom',
    'outputs': [],
    'payable': false,
    'stateMutability': 'nonpayable',
    'type': 'function',
  },
  {
    'constant': true,
    'inputs': [
      {
        'name': '_owner',
        'type': 'address',
      },
      {
        'name': '_index',
        'type': 'uint256',
      },
    ],
    'name': 'tokenOfOwnerByIndex',
    'outputs': [
      {
        'name': '',
        'type': 'uint256',
      },
    ],
    'payable': false,
    'stateMutability': 'view',
    'type': 'function',
  },
  {
    'constant': false,
    'inputs': [
      {
        'name': '_from',
        'type': 'address',
      },
      {
        'name': '_to',
        'type': 'address',
      },
      {
        'name': '_tokenId',
        'type': 'uint256',
      },
    ],
    'name': 'safeTransferFrom',
    'outputs': [],
    'payable': false,
    'stateMutability': 'nonpayable',
    'type': 'function',
  },
  {
    'constant': true,
    'inputs': [
      {
        'name': '_tokenId',
        'type': 'uint256',
      },
    ],
    'name': 'exists',
    'outputs': [
      {
        'name': '',
        'type': 'bool',
      },
    ],
    'payable': false,
    'stateMutability': 'view',
    'type': 'function',
  },
  {
    'constant': true,
    'inputs': [
      {
        'name': '_index',
        'type': 'uint256',
      },
    ],
    'name': 'tokenByIndex',
    'outputs': [
      {
        'name': '',
        'type': 'uint256',
      },
    ],
    'payable': false,
    'stateMutability': 'view',
    'type': 'function',
  },
  {
    'constant': true,
    'inputs': [
      {
        'name': '_tokenId',
        'type': 'uint256',
      },
    ],
    'name': 'ownerOf',
    'outputs': [
      {
        'name': '',
        'type': 'address',
      },
    ],
    'payable': false,
    'stateMutability': 'view',
    'type': 'function',
  },
  {
    'constant': true,
    'inputs': [
      {
        'name': '_owner',
        'type': 'address',
      },
    ],
    'name': 'balanceOf',
    'outputs': [
      {
        'name': '',
        'type': 'uint256',
      },
    ],
    'payable': false,
    'stateMutability': 'view',
    'type': 'function',
  },
  {
    'constant': true,
    'inputs': [],
    'name': 'symbol',
    'outputs': [
      {
        'name': '',
        'type': 'string',
      },
    ],
    'payable': false,
    'stateMutability': 'view',
    'type': 'function',
  },
  {
    'constant': false,
    'inputs': [
      {
        'name': '_to',
        'type': 'address',
      },
      {
        'name': '_approved',
        'type': 'bool',
      },
    ],
    'name': 'setApprovalForAll',
    'outputs': [],
    'payable': false,
    'stateMutability': 'nonpayable',
    'type': 'function',
  },
  {
    'constant': false,
    'inputs': [
      {
        'name': '_from',
        'type': 'address',
      },
      {
        'name': '_to',
        'type': 'address',
      },
      {
        'name': '_tokenId',
        'type': 'uint256',
      },
      {
        'name': '_data',
        'type': 'bytes',
      },
    ],
    'name': 'safeTransferFrom',
    'outputs': [],
    'payable': false,
    'stateMutability': 'nonpayable',
    'type': 'function',
  },
  {
    'constant': true,
    'inputs': [
      {
        'name': '_tokenId',
        'type': 'uint256',
      },
    ],
    'name': 'tokenURI',
    'outputs': [
      {
        'name': '',
        'type': 'string',
      },
    ],
    'payable': false,
    'stateMutability': 'view',
    'type': 'function',
  },
  {
    'constant': true,
    'inputs': [
      {
        'name': '_owner',
        'type': 'address',
      },
      {
        'name': '_operator',
        'type': 'address',
      },
    ],
    'name': 'isApprovedForAll',
    'outputs': [
      {
        'name': '',
        'type': 'bool',
      },
    ],
    'payable': false,
    'stateMutability': 'view',
    'type': 'function',
  },
  {
    'inputs': [
      {
        'name': '_name',
        'type': 'string',
      },
      {
        'name': '_symbol',
        'type': 'string',
      },
    ],
    'payable': false,
    'stateMutability': 'nonpayable',
    'type': 'constructor',
  },
  {
    'anonymous': false,
    'inputs': [
      {
        'indexed': true,
        'name': '_from',
        'type': 'address',
      },
      {
        'indexed': true,
        'name': '_to',
        'type': 'address',
      },
      {
        'indexed': false,
        'name': '_tokenId',
        'type': 'uint256',
      },
    ],
    'name': 'Transfer',
    'type': 'event',
  },
  {
    'anonymous': false,
    'inputs': [
      {
        'indexed': true,
        'name': '_owner',
        'type': 'address',
      },
      {
        'indexed': true,
        'name': '_approved',
        'type': 'address',
      },
      {
        'indexed': false,
        'name': '_tokenId',
        'type': 'uint256',
      },
    ],
    'name': 'Approval',
    'type': 'event',
  },
  {
    'anonymous': false,
    'inputs': [
      {
        'indexed': true,
        'name': '_owner',
        'type': 'address',
      },
      {
        'indexed': true,
        'name': '_operator',
        'type': 'address',
      },
      {
        'indexed': false,
        'name': '_approved',
        'type': 'bool',
      },
    ],
    'name': 'ApprovalForAll',
    'type': 'event',
  },
]

'''
'''--- src/abi/Proxy.ts ---
export const proxyABI: any = {'constant': false, 'inputs': [{'name': 'dest', 'type': 'address'}, {'name': 'howToCall', 'type': 'uint8'}, {'name': 'calldata', 'type': 'bytes'}], 'name': 'proxy', 'outputs': [{'name': 'success', 'type': 'bool'}], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function'}

export const proxyAssertABI: any = {'constant': false, 'inputs': [{'name': 'dest', 'type': 'address'}, {'name': 'howToCall', 'type': 'uint8'}, {'name': 'calldata', 'type': 'bytes'}], 'name': 'proxyAssert', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function'}

'''
'''--- src/abi/StaticCheckCheezeWizards.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const StaticCheckCheezeWizards: PartialReadonlyContractAbi = [{"constant": true, "inputs": [{"name": "_wizardId", "type": "uint256"}, {"name": "_fingerprint", "type": "bytes32"}, {"name": "checkTxOrigin", "type": "bool"}], "name": "succeedIfCurrentWizardFingerprintMatchesProvidedWizardFingerprint", "outputs": [], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "_newOpenSeaAdminAddress", "type": "address"}], "name": "changeOpenSeaAdminAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "_newTournamentAddress", "type": "address"}], "name": "changeTournamentAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "owner", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "isOwner", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "newOwner", "type": "address"}], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"name": "_cheezeWizardTournamentAddress", "type": "address"}, {"name": "_openSeaAdminAddress", "type": "address"}], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "previousOwner", "type": "address"}, {"indexed": false, "name": "newOwner", "type": "address"}], "name": "OwnershipTransferred", "type": "event"}]

'''
'''--- src/abi/StaticCheckDecentralandEstates.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const StaticCheckDecentralandEstates: PartialReadonlyContractAbi = [{"constant": false, "inputs": [{"name": "_newAddress", "type": "address"}], "name": "changeDecentralandEstateAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "_estateId", "type": "uint256"}, {"name": "_fingerprint", "type": "bytes32"}, {"name": "checkTxOrigin", "type": "bool"}], "name": "succeedIfCurrentEstateFingerprintMatchesProvidedEstateFingerprint", "outputs": [], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "_newOpenSeaAdminAddress", "type": "address"}], "name": "changeOpenSeaAdminAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "owner", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "isOwner", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "newOwner", "type": "address"}], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"name": "_decentralandEstateAddress", "type": "address"}, {"name": "_openSeaAdminAddress", "type": "address"}], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "previousOwner", "type": "address"}, {"indexed": false, "name": "newOwner", "type": "address"}], "name": "OwnershipTransferred", "type": "event"}]

'''
'''--- src/abi/StaticCheckTxOrigin.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const StaticCheckTxOrigin: PartialReadonlyContractAbi = [{"constant": true, "inputs": [], "name": "succeedIfTxOriginMatchesHardcodedAddress", "outputs": [], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"name": "_specifiedAddress", "type": "address"}], "name": "succeedIfTxOriginMatchesSpecifiedAddress", "outputs": [], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "owner", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "isOwner", "outputs": [{"name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "_newHardcodedAddress", "type": "address"}], "name": "changeHardcodedAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "newOwner", "type": "address"}], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"name": "_hardcodedAddress", "type": "address"}], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "previousOwner", "type": "address"}, {"indexed": false, "name": "newOwner", "type": "address"}], "name": "OwnershipTransferred", "type": "event"}]

'''
'''--- src/abi/UniswapExchange.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const UniswapExchange: PartialReadonlyContractAbi = [{"name": "TokenPurchase", "inputs": [{"type": "address", "name": "buyer", "indexed": true}, {"type": "uint256", "name": "eth_sold", "indexed": true}, {"type": "uint256", "name": "tokens_bought", "indexed": true}], "anonymous": false, "type": "event"}, {"name": "EthPurchase", "inputs": [{"type": "address", "name": "buyer", "indexed": true}, {"type": "uint256", "name": "tokens_sold", "indexed": true}, {"type": "uint256", "name": "eth_bought", "indexed": true}], "anonymous": false, "type": "event"}, {"name": "AddLiquidity", "inputs": [{"type": "address", "name": "provider", "indexed": true}, {"type": "uint256", "name": "eth_amount", "indexed": true}, {"type": "uint256", "name": "token_amount", "indexed": true}], "anonymous": false, "type": "event"}, {"name": "RemoveLiquidity", "inputs": [{"type": "address", "name": "provider", "indexed": true}, {"type": "uint256", "name": "eth_amount", "indexed": true}, {"type": "uint256", "name": "token_amount", "indexed": true}], "anonymous": false, "type": "event"}, {"name": "Transfer", "inputs": [{"type": "address", "name": "_from", "indexed": true}, {"type": "address", "name": "_to", "indexed": true}, {"type": "uint256", "name": "_value", "indexed": false}], "anonymous": false, "type": "event"}, {"name": "Approval", "inputs": [{"type": "address", "name": "_owner", "indexed": true}, {"type": "address", "name": "_spender", "indexed": true}, {"type": "uint256", "name": "_value", "indexed": false}], "anonymous": false, "type": "event"}, {"name": "setup", "outputs": [], "inputs": [{"type": "address", "name": "token_addr"}], "constant": false, "payable": false, "type": "function"}, {"name": "addLiquidity", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "min_liquidity"}, {"type": "uint256", "name": "max_tokens"}, {"type": "uint256", "name": "deadline"}], "constant": false, "payable": true, "type": "function"}, {"name": "removeLiquidity", "outputs": [{"type": "uint256", "name": "out"}, {"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "amount"}, {"type": "uint256", "name": "min_eth"}, {"type": "uint256", "name": "min_tokens"}, {"type": "uint256", "name": "deadline"}], "constant": false, "payable": false, "type": "function"}, {"name": "__default__", "outputs": [], "inputs": [], "constant": false, "payable": true, "type": "function"}, {"name": "ethToTokenSwapInput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "min_tokens"}, {"type": "uint256", "name": "deadline"}], "constant": false, "payable": true, "type": "function"}, {"name": "ethToTokenTransferInput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "min_tokens"}, {"type": "uint256", "name": "deadline"}, {"type": "address", "name": "recipient"}], "constant": false, "payable": true, "type": "function"}, {"name": "ethToTokenSwapOutput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "tokens_bought"}, {"type": "uint256", "name": "deadline"}], "constant": false, "payable": true, "type": "function"}, {"name": "ethToTokenTransferOutput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "tokens_bought"}, {"type": "uint256", "name": "deadline"}, {"type": "address", "name": "recipient"}], "constant": false, "payable": true, "type": "function"}, {"name": "tokenToEthSwapInput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "tokens_sold"}, {"type": "uint256", "name": "min_eth"}, {"type": "uint256", "name": "deadline"}], "constant": false, "payable": false, "type": "function"}, {"name": "tokenToEthTransferInput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "tokens_sold"}, {"type": "uint256", "name": "min_eth"}, {"type": "uint256", "name": "deadline"}, {"type": "address", "name": "recipient"}], "constant": false, "payable": false, "type": "function"}, {"name": "tokenToEthSwapOutput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "eth_bought"}, {"type": "uint256", "name": "max_tokens"}, {"type": "uint256", "name": "deadline"}], "constant": false, "payable": false, "type": "function"}, {"name": "tokenToEthTransferOutput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "eth_bought"}, {"type": "uint256", "name": "max_tokens"}, {"type": "uint256", "name": "deadline"}, {"type": "address", "name": "recipient"}], "constant": false, "payable": false, "type": "function"}, {"name": "tokenToTokenSwapInput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "tokens_sold"}, {"type": "uint256", "name": "min_tokens_bought"}, {"type": "uint256", "name": "min_eth_bought"}, {"type": "uint256", "name": "deadline"}, {"type": "address", "name": "token_addr"}], "constant": false, "payable": false, "type": "function"}, {"name": "tokenToTokenTransferInput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "tokens_sold"}, {"type": "uint256", "name": "min_tokens_bought"}, {"type": "uint256", "name": "min_eth_bought"}, {"type": "uint256", "name": "deadline"}, {"type": "address", "name": "recipient"}, {"type": "address", "name": "token_addr"}], "constant": false, "payable": false, "type": "function"}, {"name": "tokenToTokenSwapOutput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "tokens_bought"}, {"type": "uint256", "name": "max_tokens_sold"}, {"type": "uint256", "name": "max_eth_sold"}, {"type": "uint256", "name": "deadline"}, {"type": "address", "name": "token_addr"}], "constant": false, "payable": false, "type": "function"}, {"name": "tokenToTokenTransferOutput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "tokens_bought"}, {"type": "uint256", "name": "max_tokens_sold"}, {"type": "uint256", "name": "max_eth_sold"}, {"type": "uint256", "name": "deadline"}, {"type": "address", "name": "recipient"}, {"type": "address", "name": "token_addr"}], "constant": false, "payable": false, "type": "function"}, {"name": "tokenToExchangeSwapInput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "tokens_sold"}, {"type": "uint256", "name": "min_tokens_bought"}, {"type": "uint256", "name": "min_eth_bought"}, {"type": "uint256", "name": "deadline"}, {"type": "address", "name": "exchange_addr"}], "constant": false, "payable": false, "type": "function"}, {"name": "tokenToExchangeTransferInput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "tokens_sold"}, {"type": "uint256", "name": "min_tokens_bought"}, {"type": "uint256", "name": "min_eth_bought"}, {"type": "uint256", "name": "deadline"}, {"type": "address", "name": "recipient"}, {"type": "address", "name": "exchange_addr"}], "constant": false, "payable": false, "type": "function"}, {"name": "tokenToExchangeSwapOutput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "tokens_bought"}, {"type": "uint256", "name": "max_tokens_sold"}, {"type": "uint256", "name": "max_eth_sold"}, {"type": "uint256", "name": "deadline"}, {"type": "address", "name": "exchange_addr"}], "constant": false, "payable": false, "type": "function"}, {"name": "tokenToExchangeTransferOutput", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "tokens_bought"}, {"type": "uint256", "name": "max_tokens_sold"}, {"type": "uint256", "name": "max_eth_sold"}, {"type": "uint256", "name": "deadline"}, {"type": "address", "name": "recipient"}, {"type": "address", "name": "exchange_addr"}], "constant": false, "payable": false, "type": "function"}, {"name": "getEthToTokenInputPrice", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "eth_sold"}], "constant": true, "payable": false, "type": "function"}, {"name": "getEthToTokenOutputPrice", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "tokens_bought"}], "constant": true, "payable": false, "type": "function"}, {"name": "getTokenToEthInputPrice", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "tokens_sold"}], "constant": true, "payable": false, "type": "function"}, {"name": "getTokenToEthOutputPrice", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "uint256", "name": "eth_bought"}], "constant": true, "payable": false, "type": "function"}, {"name": "tokenAddress", "outputs": [{"type": "address", "name": "out"}], "inputs": [], "constant": true, "payable": false, "type": "function"}, {"name": "factoryAddress", "outputs": [{"type": "address", "name": "out"}], "inputs": [], "constant": true, "payable": false, "type": "function"}, {"name": "balanceOf", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "address", "name": "_owner"}], "constant": true, "payable": false, "type": "function"}, {"name": "transfer", "outputs": [{"type": "bool", "name": "out"}], "inputs": [{"type": "address", "name": "_to"}, {"type": "uint256", "name": "_value"}], "constant": false, "payable": false, "type": "function"}, {"name": "transferFrom", "outputs": [{"type": "bool", "name": "out"}], "inputs": [{"type": "address", "name": "_from"}, {"type": "address", "name": "_to"}, {"type": "uint256", "name": "_value"}], "constant": false, "payable": false, "type": "function"}, {"name": "approve", "outputs": [{"type": "bool", "name": "out"}], "inputs": [{"type": "address", "name": "_spender"}, {"type": "uint256", "name": "_value"}], "constant": false, "payable": false, "type": "function"}, {"name": "allowance", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [{"type": "address", "name": "_owner"}, {"type": "address", "name": "_spender"}], "constant": true, "payable": false, "type": "function"}, {"name": "name", "outputs": [{"type": "bytes32", "name": "out"}], "inputs": [], "constant": true, "payable": false, "type": "function"}, {"name": "symbol", "outputs": [{"type": "bytes32", "name": "out"}], "inputs": [], "constant": true, "payable": false, "type": "function"}, {"name": "decimals", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [], "constant": true, "payable": false, "type": "function"}, {"name": "totalSupply", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [], "constant": true, "payable": false, "type": "function"}]

'''
'''--- src/abi/UniswapFactory.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const UniswapFactory: PartialReadonlyContractAbi = [{"name": "NewExchange", "inputs": [{"type": "address", "name": "token", "indexed": true}, {"type": "address", "name": "exchange", "indexed": true}], "anonymous": false, "type": "event"}, {"name": "initializeFactory", "outputs": [], "inputs": [{"type": "address", "name": "template"}], "constant": false, "payable": false, "type": "function"}, {"name": "createExchange", "outputs": [{"type": "address", "name": "out"}], "inputs": [{"type": "address", "name": "token"}], "constant": false, "payable": false, "type": "function"}, {"name": "getExchange", "outputs": [{"type": "address", "name": "out"}], "inputs": [{"type": "address", "name": "token"}], "constant": true, "payable": false, "type": "function"}, {"name": "getToken", "outputs": [{"type": "address", "name": "out"}], "inputs": [{"type": "address", "name": "exchange"}], "constant": true, "payable": false, "type": "function"}, {"name": "getTokenWithId", "outputs": [{"type": "address", "name": "out"}], "inputs": [{"type": "uint256", "name": "token_id"}], "constant": true, "payable": false, "type": "function"}, {"name": "exchangeTemplate", "outputs": [{"type": "address", "name": "out"}], "inputs": [], "constant": true, "payable": false, "type": "function"}, {"name": "tokenCount", "outputs": [{"type": "uint256", "name": "out"}], "inputs": [], "constant": true, "payable": false, "type": "function"}]

'''
'''--- src/abi/WrappedNFT.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const WrappedNFT: PartialReadonlyContractAbi = [{"constant": false, "inputs": [{"internalType": "uint256[]", "name": "_nftIds", "type": "uint256[]"}, {"internalType": "address[]", "name": "_destinationAddresses", "type": "address[]"}], "name": "burnTokensAndWithdrawNfts", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "name", "outputs": [{"internalType": "string", "name": "", "type": "string"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"internalType": "address", "name": "spender", "type": "address"}, {"internalType": "uint256", "name": "value", "type": "uint256"}], "name": "approve", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"internalType": "address", "name": "_operator", "type": "address"}, {"internalType": "address", "name": "_from", "type": "address"}, {"internalType": "uint256", "name": "_tokenId", "type": "uint256"}, {"internalType": "bytes", "name": "_data", "type": "bytes"}], "name": "onERC721Received", "outputs": [{"internalType": "bytes4", "name": "", "type": "bytes4"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "totalSupply", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"internalType": "uint256", "name": "_numSlotsToCheck", "type": "uint256"}], "name": "batchRemoveWithdrawnNFTsFromStorage", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"internalType": "address", "name": "from", "type": "address"}, {"internalType": "address", "name": "to", "type": "address"}, {"internalType": "uint256", "name": "value", "type": "uint256"}], "name": "transferFrom", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "decimals", "outputs": [{"internalType": "uint8", "name": "", "type": "uint8"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "wyvernTokenTransferProxyAddress", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "uniswapFactoryAddress", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"internalType": "address", "name": "spender", "type": "address"}, {"internalType": "uint256", "name": "addedValue", "type": "uint256"}], "name": "increaseAllowance", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"internalType": "address", "name": "owner", "type": "address"}], "name": "balanceOf", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "name": "nftIsDepositedInContract", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "symbol", "outputs": [{"internalType": "string", "name": "", "type": "string"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"internalType": "uint256[]", "name": "_nftIds", "type": "uint256[]"}], "name": "depositNftsAndMintTokens", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"internalType": "address", "name": "spender", "type": "address"}, {"internalType": "uint256", "name": "subtractedValue", "type": "uint256"}], "name": "decreaseAllowance", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"internalType": "address", "name": "to", "type": "address"}, {"internalType": "uint256", "name": "value", "type": "uint256"}], "name": "transfer", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"internalType": "address", "name": "owner", "type": "address"}, {"internalType": "address", "name": "spender", "type": "address"}], "name": "allowance", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "nftCoreAddress", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "wrappedNFTLiquidationProxyAddress", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "_nftCoreAddress", "type": "address"}, {"internalType": "address", "name": "_uniswapFactoryAddress", "type": "address"}, {"internalType": "address", "name": "_wyvernTokenTransferProxyAddress", "type": "address"}, {"internalType": "address", "name": "_wrappedNFTLiquidationProxyAddress", "type": "address"}], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}, {"payable": true, "stateMutability": "payable", "type": "fallback"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "uint256", "name": "nftId", "type": "uint256"}], "name": "DepositNFTAndMintToken", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "uint256", "name": "nftId", "type": "uint256"}], "name": "BurnTokenAndWithdrawNFT", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "from", "type": "address"}, {"indexed": true, "internalType": "address", "name": "to", "type": "address"}, {"indexed": false, "internalType": "uint256", "name": "value", "type": "uint256"}], "name": "Transfer", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "owner", "type": "address"}, {"indexed": true, "internalType": "address", "name": "spender", "type": "address"}, {"indexed": false, "internalType": "uint256", "name": "value", "type": "uint256"}], "name": "Approval", "type": "event"}]

'''
'''--- src/abi/WrappedNFTFactory.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const WrappedNFTFactory: PartialReadonlyContractAbi = [{"constant": true, "inputs": [], "name": "wyvernTokenTransferProxyAddress", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "uniswapFactoryAddress", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"internalType": "uint256", "name": "_startIndex", "type": "uint256"}, {"internalType": "uint256", "name": "_endIndex", "type": "uint256"}, {"internalType": "address", "name": "_previousFactoryAddress", "type": "address"}], "name": "importMappingsFromPreviousFactory", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "name": "idToNftContract", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "wrapperContractsCreated", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"internalType": "address", "name": "", "type": "address"}], "name": "wrapperContractToNftContract", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"internalType": "address", "name": "_nftContractAddress", "type": "address"}], "name": "createWrapperContract", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "owner", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "isOwner", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"internalType": "address", "name": "_newWyvernTokenTransferProxyAddress", "type": "address"}], "name": "updateWyvernTokenTransferProxyAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"internalType": "address", "name": "_newWrappedNFTLiquidationProxyAddress", "type": "address"}], "name": "updateWrappedNFTLiquidationProxyAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [{"internalType": "address", "name": "", "type": "address"}], "name": "nftContractToWrapperContract", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [{"internalType": "address", "name": "_nftContractAddress", "type": "address"}], "name": "getWrapperContractForNFTContractAddress", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"internalType": "address", "name": "_newUniswapFactoryAddress", "type": "address"}], "name": "updateUniswapFactoryContractAddress", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"internalType": "address", "name": "newOwner", "type": "address"}], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "wrappedNFTLiquidationProxyAddress", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "_uniswapFactoryAddress", "type": "address"}, {"internalType": "address", "name": "_wyvernTokenTransferProxyAddress", "type": "address"}], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "nftContract", "type": "address"}, {"indexed": false, "internalType": "address", "name": "wrapperContract", "type": "address"}], "name": "NewWrapperContractCreated", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "internalType": "address", "name": "previousOwner", "type": "address"}, {"indexed": false, "internalType": "address", "name": "newOwner", "type": "address"}], "name": "OwnershipTransferred", "type": "event"}]

'''
'''--- src/abi/WrappedNFTLiquidationProxy.ts ---
import { PartialReadonlyContractAbi } from "../types"

export const WrappedNFTLiquidationProxy: PartialReadonlyContractAbi = [{"constant": false, "inputs": [{"name": "_operator", "type": "address"}, {"name": "_from", "type": "address"}, {"name": "_tokenId", "type": "uint256"}, {"name": "_data", "type": "bytes"}], "name": "onERC721Received", "outputs": [{"name": "", "type": "bytes4"}], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "_nftIds", "type": "uint256[]"}, {"name": "_nftContractAddresses", "type": "address[]"}, {"name": "_isMixedBatchOfNFTs", "type": "bool"}], "name": "wrapNFTs", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": true, "inputs": [], "name": "uniswapFactoryAddress", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": true, "inputs": [], "name": "wrappedNFTFactoryAddress", "outputs": [{"name": "", "type": "address"}], "payable": false, "stateMutability": "view", "type": "function"}, {"constant": false, "inputs": [{"name": "_nftContractAddress", "type": "address"}, {"name": "_numTokensToPurchase", "type": "uint256"}], "name": "purchaseNFTs", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function"}, {"constant": false, "inputs": [{"name": "_nftIds", "type": "uint256[]"}, {"name": "_nftContractAddresses", "type": "address[]"}, {"name": "_isMixedBatchOfNFTs", "type": "bool"}, {"name": "_uniswapSlippageAllowedInBasisPoints", "type": "uint256"}], "name": "liquidateNFTs", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"constant": false, "inputs": [{"name": "_nftIds", "type": "uint256[]"}, {"name": "_nftContractAddresses", "type": "address[]"}, {"name": "_destinationAddresses", "type": "address[]"}, {"name": "_isMixedBatchOfNFTs", "type": "bool"}], "name": "unwrapNFTs", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"name": "_wrappedNFTFactoryAddress", "type": "address"}, {"name": "_uniswapFactoryAddress", "type": "address"}], "payable": false, "stateMutability": "nonpayable", "type": "constructor"}, {"payable": true, "stateMutability": "payable", "type": "fallback"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "numTokensMelted", "type": "uint256"}, {"indexed": false, "name": "nftContractAddress", "type": "address"}, {"indexed": false, "name": "ethReceived", "type": "uint256"}], "name": "LiquidateNFTs", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "numTokensBought", "type": "uint256"}, {"indexed": false, "name": "nftContractAddress", "type": "address"}, {"indexed": false, "name": "ethSpent", "type": "uint256"}], "name": "PurchaseNFTs", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "numTokensWrapped", "type": "uint256"}, {"indexed": false, "name": "nftContractAddress", "type": "address"}], "name": "WrapNFTs", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": false, "name": "numTokensUnwrapped", "type": "uint256"}, {"indexed": false, "name": "nftContractAddress", "type": "address"}], "name": "UnwrapNFTs", "type": "event"}]

'''
'''--- src/api.ts ---
import 'isomorphic-unfetch'
import * as QueryString from 'query-string'
import {
  Network,
  OpenSeaAPIConfig,
  OpenSeaAsset,
  OpenSeaAssetBundle,
  OpenSeaAssetBundleQuery,
  OpenSeaAssetQuery,
  OpenSeaFungibleToken,
  OpenSeaFungibleTokenQuery,
  Order,
  OrderbookResponse,
  OrderJSON,
  OrderQuery
} from './types'
import {
  assetBundleFromJSON,
  assetFromJSON,
  delay,
  orderFromJSON,
  tokenFromJSON
} from './utils/utils'
import {
  API_BASE_MAINNET,
  API_BASE_RINKEBY,
  API_PATH,
  ORDERBOOK_PATH,
  ORDERBOOK_VERSION,
  SITE_HOST_MAINNET,
  SITE_HOST_RINKEBY
} from './constants'

export class OpenSeaAPI {

  /**
   * Host url for OpenSea
   */
  public readonly hostUrl: string
  /**
   * Base url for the API
   */
  public readonly apiBaseUrl: string
  /**
   * Page size to use for fetching orders
   */
  public pageSize = 20
  /**
   * Logger function to use when debugging
   */
  public logger: (arg: string) => void

  private apiKey: string | undefined

  /**
   * Create an instance of the OpenSea API
   * @param config OpenSeaAPIConfig for setting up the API, including an optional API key, network name, and base URL
   * @param logger Optional function for logging debug strings before and after requests are made
   */
  constructor(config: OpenSeaAPIConfig, logger?: (arg: string) => void) {
    this.apiKey = config.apiKey

    switch (config.networkName) {
      case Network.Rinkeby:
        this.apiBaseUrl = config.apiBaseUrl || API_BASE_RINKEBY
        this.hostUrl = SITE_HOST_RINKEBY
        break
      case Network.Main:
      default:
        this.apiBaseUrl = config.apiBaseUrl || API_BASE_MAINNET
        this.hostUrl = SITE_HOST_MAINNET
        break
    }

    // Debugging: default to nothing
    this.logger = logger || ((arg: string) => arg)
  }

  /**
   * Send an order to the orderbook.
   * Throws when the order is invalid.
   * IN NEXT VERSION: change order input to Order type
   * @param order Order JSON to post to the orderbook
   * @param retries Number of times to retry if the service is unavailable for any reason
   */
  public async postOrder(order: OrderJSON, retries = 2): Promise<Order> {
    let json
    try {
      json = await this.post(`${ORDERBOOK_PATH}/orders/post/`, order) as OrderJSON
    } catch (error) {
      _throwOrContinue(error, retries)
      await delay(3000)
      return this.postOrder(order, retries - 1)
    }
    return orderFromJSON(json)
  }

  /**
   * Create a whitelist entry for an asset to prevent others from buying.
   * Buyers will have to have verified at least one of the emails
   * on an asset in order to buy.
   * This will throw a 403 if the given API key isn't allowed to create whitelist entries for this contract or asset.
   * @param tokenAddress Address of the asset's contract
   * @param tokenId The asset's token ID
   * @param email The email allowed to buy.
   */
  public async postAssetWhitelist(
      tokenAddress: string,
      tokenId: string | number,
      email: string
    ): Promise<boolean> {

    const json = await this.post(`${API_PATH}/asset/${tokenAddress}/${tokenId}/whitelist/`, {
      email
    })

    return !!json.success
  }

  /**
   * Get an order from the orderbook, throwing if none is found.
   * @param query Query to use for getting orders. A subset of parameters
   *  on the `OrderJSON` type is supported
   */
  public async getOrder(query: OrderQuery): Promise<Order> {

    const result = await this.get(
      `${ORDERBOOK_PATH}/orders/`, {
        limit: 1,
        ...query
      }
    )

    let orderJSON
    if (ORDERBOOK_VERSION == 0) {
      const json = result as OrderJSON[]
      orderJSON = json[0]
    } else {
      const json = result as OrderbookResponse
      orderJSON = json.orders[0]
    }
    if (!orderJSON) {
      throw new Error(`Not found: no matching order found`)
    }
    return orderFromJSON(orderJSON)
  }

  /**
   * Get a list of orders from the orderbook, returning the page of orders
   *  and the count of total orders found.
   * @param query Query to use for getting orders. A subset of parameters
   *  on the `OrderJSON` type is supported
   * @param page Page number, defaults to 1. Can be overridden by
   * `limit` and `offset` attributes from OrderQuery
   */
  public async getOrders(
      query: OrderQuery = {},
      page = 1
    ): Promise<{orders: Order[]; count: number}> {

    const result = await this.get(
      `${ORDERBOOK_PATH}/orders/`,
      {
        limit: this.pageSize,
        offset: (page - 1) * this.pageSize,
        ...query,
      }
    )

    if (ORDERBOOK_VERSION == 0) {
      const json = result as OrderJSON[]
      return {
        orders: json.map(j => orderFromJSON(j)),
        count: json.length
      }
    } else {
      const json = result as OrderbookResponse
      return {
        orders: json.orders.map(j => orderFromJSON(j)),
        count: json.count
      }
    }
  }

  /**
   * Fetch an asset from the API, throwing if none is found
   * @param tokenAddress Address of the asset's contract
   * @param tokenId The asset's token ID, or null if ERC-20
   * @param retries Number of times to retry if the service is unavailable for any reason
   */
  public async getAsset({
      tokenAddress, tokenId
    }: {
      tokenAddress: string,
      tokenId: string | number | null,
    },
                        retries = 1
    ): Promise<OpenSeaAsset> {

    let json
    try {
      json = await this.get(`${API_PATH}/asset/${tokenAddress}/${tokenId || 0}/`)
    } catch (error) {
      _throwOrContinue(error, retries)
      await delay(1000)
      return this.getAsset({ tokenAddress, tokenId }, retries - 1)
    }

    return assetFromJSON(json)
  }

  /**
   * Fetch list of assets from the API, returning the page of assets and the count of total assets
   * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetJSON` type is supported
   * @param page Page number, defaults to 1. Can be overridden by
   * `limit` and `offset` attributes from OpenSeaAssetQuery
   */
  public async getAssets(
      query: OpenSeaAssetQuery = {},
      page = 1
    ): Promise<{assets: OpenSeaAsset[]; estimatedCount: number}> {

    const json = await this.get(`${API_PATH}/assets/`, {
      limit: this.pageSize,
      offset: (page - 1) * this.pageSize,
      ...query
    })

    return {
      assets: json.assets.map((j: any) => assetFromJSON(j)),
      estimatedCount: json.estimated_count
    }
  }

  /**
   * Fetch list of fungible tokens from the API matching paramters
   * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetJSON` type is supported
   * @param page Page number, defaults to 1. Can be overridden by
   * `limit` and `offset` attributes from OpenSeaFungibleTokenQuery
   * @param retries Number of times to retry if the service is unavailable for any reason
   */
  public async getPaymentTokens(
      query: OpenSeaFungibleTokenQuery = {},
      page = 1,
      retries = 1
    ): Promise<{tokens: OpenSeaFungibleToken[]}> {

    let json
    try {
      json = await this.get(`${API_PATH}/tokens/`, {
        ...query,
        limit: this.pageSize,
        offset: (page - 1) * this.pageSize
      })
    } catch (error) {
      _throwOrContinue(error, retries)
      await delay(1000)
      return this.getPaymentTokens(query, page, retries - 1)
    }

    return {
      tokens: json.map((t: any) => tokenFromJSON(t))
    }
  }

  /**
   * Fetch an bundle from the API, return null if it isn't found
   * @param slug The bundle's identifier
   */
  public async getBundle({ slug }: {
      slug: string
    }): Promise<OpenSeaAssetBundle | null> {

    const json = await this.get(`${API_PATH}/bundle/${slug}/`)

    return json ? assetBundleFromJSON(json) : null
  }

  /**
   * Fetch list of bundles from the API, returning the page of bundles and the count of total bundles
   * @param query Query to use for getting orders. A subset of parameters on the `OpenSeaAssetBundleJSON` type is supported
   * @param page Page number, defaults to 1. Can be overridden by
   * `limit` and `offset` attributes from OpenSeaAssetBundleQuery
   */
  public async getBundles(
      query: OpenSeaAssetBundleQuery = {},
      page = 1
    ): Promise<{bundles: OpenSeaAssetBundle[]; estimatedCount: number}> {

    const json = await this.get(`${API_PATH}/bundles/`, {
      ...query,
      limit: this.pageSize,
      offset: (page - 1) * this.pageSize
    })

    return {
      bundles: json.bundles.map((j: any) => assetBundleFromJSON(j)),
      estimatedCount: json.estimated_count
    }
  }

  /**
   * Get JSON data from API, sending auth token in headers
   * @param apiPath Path to URL endpoint under API
   * @param query Data to send. Will be stringified using QueryString
   */
  public async get(apiPath: string, query: object = {}): Promise<any> {

    const qs = QueryString.stringify(query)
    const url = `${apiPath}?${qs}`

    const response = await this._fetch(url)
    return response.json()
  }

  /**
   * POST JSON data to API, sending auth token in headers
   * @param apiPath Path to URL endpoint under API
   * @param body Data to send. Will be JSON.stringified
   * @param opts RequestInit opts, similar to Fetch API. If it contains
   *  a body, it won't be stringified.
   */
  public async post(apiPath: string, body?: object, opts: RequestInit = {}): Promise<any> {

    const fetchOpts = {
      method: 'POST',
      body: body ? JSON.stringify(body) : undefined,
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
      },
      ...opts
    }

    const response = await this._fetch(apiPath, fetchOpts)
    return response.json()
  }

  /**
   * PUT JSON data to API, sending auth token in headers
   * @param apiPath Path to URL endpoint under API
   * @param body Data to send
   * @param opts RequestInit opts, similar to Fetch API. If it contains
   *  a body, it won't be stringified.
   */
  public async put(apiPath: string, body: object, opts: RequestInit = {}) {

    return this.post(apiPath, body, {
      method: 'PUT',
      ...opts
    })
  }

  /**
   * Get from an API Endpoint, sending auth token in headers
   * @param apiPath Path to URL endpoint under API
   * @param opts RequestInit opts, similar to Fetch API
   */
  private async _fetch(apiPath: string, opts: RequestInit = {}) {

    const apiBase = this.apiBaseUrl
    const apiKey = this.apiKey
    const finalUrl = apiBase + apiPath
    const finalOpts = {
      ...opts,
      headers: {
        ...(apiKey ? { 'X-API-KEY': apiKey } : {}),
        ...(opts.headers || {}),
      }
    }

    this.logger(`Sending request: ${finalUrl} ${JSON.stringify(finalOpts).substr(0, 100)}...`)

    return fetch(finalUrl, finalOpts).then(async res => this._handleApiResponse(res))
  }

  private async _handleApiResponse(response: Response) {
    if (response.ok) {
      this.logger(`Got success: ${response.status}`)
      return response
    }

    let result
    let errorMessage
    try {
      result = await response.text()
      result = JSON.parse(result)
    } catch {
      // Result will be undefined or text
    }

    this.logger(`Got error ${response.status}: ${JSON.stringify(result)}`)

    switch (response.status) {
      case 400:
        errorMessage = result && result.errors
          ? result.errors.join(', ')
          : `Invalid request: ${JSON.stringify(result)}`
        break
      case 401:
      case 403:
        errorMessage = `Unauthorized. Full message was '${JSON.stringify(result)}'`
        break
      case 404:
        errorMessage = `Not found. Full message was '${JSON.stringify(result)}'`
        break
      case 500:
        errorMessage = `Internal server error. OpenSea has been alerted, but if the problem persists please contact us via Discord: https://discord.gg/ga8EJbv - full message was ${JSON.stringify(result)}`
        break
      case 503:
        errorMessage = `Service unavailable. Please try again in a few minutes. If the problem persists please contact us via Discord: https://discord.gg/ga8EJbv - full message was ${JSON.stringify(result)}`
        break
      default:
        errorMessage = `Message: ${JSON.stringify(result)}`
        break
    }

    throw new Error(`API Error ${response.status}: ${errorMessage}`)
  }
}

function _throwOrContinue(error: Error, retries: number) {
  const isUnavailable = !!error.message && (
    error.message.includes('503') ||
    error.message.includes('429')
  )
  if (retries <= 0 || !isUnavailable) {
    throw error
  }
}

'''
'''--- src/constants.ts ---
import { WyvernProtocol } from 'wyvern-js'
import { BigNumber } from 'bignumber.js' // Typescript import issue

export const DEFAULT_GAS_INCREASE_FACTOR = 1.01
export const NULL_ADDRESS = WyvernProtocol.NULL_ADDRESS
export const NULL_BLOCK_HASH = '0x0000000000000000000000000000000000000000000000000000000000000000'
export const OPENSEA_FEE_RECIPIENT = '0x5b3256965e7c3cf26e11fcaf296dfc8807c01073'
export const DEP_INFURA_KEY = 'e8695bce67944848aa95459fac052f8e'
export const MAINNET_PROVIDER_URL = 'https://api.opensea.io/jsonrpc/v1/'
export const RINKEBY_PROVIDER_URL = 'https://testnets-api.opensea.io/jsonrpc/v1/'
export const INVERSE_BASIS_POINT = 10000
export const MAX_UINT_256 = WyvernProtocol.MAX_UINT_256
export const WYVERN_EXCHANGE_ADDRESS_MAINNET = '0x7be8076f4ea4a4ad08075c2508e481d6c946d12b'
export const WYVERN_EXCHANGE_ADDRESS_RINKEBY = '0x5206e78b21ce315ce284fb24cf05e0585a93b1d9'
export const ENJIN_COIN_ADDRESS = '0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c'
export const MANA_ADDRESS = '0x0f5d2fb29fb7d3cfee444a200298f468908cc942'
export const ENJIN_ADDRESS = '0xfaaFDc07907ff5120a76b34b731b278c38d6043C'
export const ENJIN_LEGACY_ADDRESS = '0x8562c38485B1E8cCd82E44F89823dA76C98eb0Ab'
export const CK_ADDRESS = '0x06012c8cf97bead5deae237070f9587f8e7a266d'
export const CK_RINKEBY_ADDRESS = '0x16baf0de678e52367adc69fd067e5edd1d33e3bf'
export const WRAPPED_NFT_FACTORY_ADDRESS_MAINNET = '0xf11b5815b143472b7f7c52af0bfa6c6a2c8f40e1'
export const WRAPPED_NFT_FACTORY_ADDRESS_RINKEBY = '0x94c71c87244b862cfd64d36af468309e4804ec09'
export const WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_MAINNET = '0x995835145dd85c012f3e2d7d5561abd626658c04'
export const WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_RINKEBY = '0xaa775Eb452353aB17f7cf182915667c2598D43d3'
export const UNISWAP_FACTORY_ADDRESS_MAINNET = '0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95'
export const UNISWAP_FACTORY_ADDRESS_RINKEBY = '0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36'
export const DEFAULT_WRAPPED_NFT_LIQUIDATION_UNISWAP_SLIPPAGE_IN_BASIS_POINTS = 1000
export const CHEEZE_WIZARDS_GUILD_ADDRESS = WyvernProtocol.NULL_ADDRESS  // TODO: Update this address once Dapper has deployed their mainnet contracts
export const CHEEZE_WIZARDS_GUILD_RINKEBY_ADDRESS = '0x095731b672b76b00A0b5cb9D8258CD3F6E976cB2'
export const CHEEZE_WIZARDS_BASIC_TOURNAMENT_ADDRESS = WyvernProtocol.NULL_ADDRESS  // TODO: Update this address once Dapper has deployed their mainnet contracts
export const CHEEZE_WIZARDS_BASIC_TOURNAMENT_RINKEBY_ADDRESS = '0x8852f5F7d1BB867AAf8fdBB0851Aa431d1df5ca1'
export const DECENTRALAND_ESTATE_ADDRESS = '0x959e104e1a4db6317fa58f8295f586e1a978c297'
export const STATIC_CALL_TX_ORIGIN_ADDRESS = '0xbff6ade67e3717101dd8d0a7f3de1bf6623a2ba8'
export const STATIC_CALL_TX_ORIGIN_RINKEBY_ADDRESS = '0xe291abab95677bc652a44f973a8e06d48464e11c'
export const STATIC_CALL_CHEEZE_WIZARDS_ADDRESS = WyvernProtocol.NULL_ADDRESS  // TODO: Deploy this address once Dapper has deployed their mainnet contracts
export const STATIC_CALL_CHEEZE_WIZARDS_RINKEBY_ADDRESS = '0x8a640bdf8886dd6ca1fad9f22382b50deeacde08'
export const STATIC_CALL_DECENTRALAND_ESTATES_ADDRESS = '0x93c3cd7ba04556d2e3d7b8106ce0f83e24a87a7e'
export const DEFAULT_BUYER_FEE_BASIS_POINTS = 0
export const DEFAULT_SELLER_FEE_BASIS_POINTS = 250
export const OPENSEA_SELLER_BOUNTY_BASIS_POINTS = 100
export const DEFAULT_MAX_BOUNTY = DEFAULT_SELLER_FEE_BASIS_POINTS
export const MIN_EXPIRATION_SECONDS = 10
export const ORDER_MATCHING_LATENCY_SECONDS = 60 * 60 * 24 * 7
export const SELL_ORDER_BATCH_SIZE = 3
export const ORDERBOOK_VERSION: number = 1
export const API_VERSION: number = 1
export const API_BASE_MAINNET = 'https://api.opensea.io'
export const API_BASE_RINKEBY = 'https://testnets-api.opensea.io'
export const SITE_HOST_MAINNET = 'https://opensea.io'
export const SITE_HOST_RINKEBY = 'https://rinkeby.opensea.io'
export const ORDERBOOK_PATH = `/wyvern/v${ORDERBOOK_VERSION}`
export const API_PATH = `/api/v${ORDERBOOK_VERSION}`

'''
'''--- src/contracts.ts ---
import { PartialReadonlyContractAbi } from './types'
import { EventAbi } from 'web3'
import { AnnotatedFunctionABI } from 'wyvern-js/lib/types'

export const getMethod = (abi: PartialReadonlyContractAbi, name: string): AnnotatedFunctionABI => {
  const methodAbi = abi.find(x => x.type == 'function' && x.name == name)
  if (!methodAbi) {
    throw new Error(`ABI ${name} not found`)
  }
  // Have to cast since there's a bug in
  // web3 types on the 'type' field
  return methodAbi as AnnotatedFunctionABI
}

export const event = (abi: PartialReadonlyContractAbi, name: string): EventAbi => {
  const eventAbi = abi.find(x => x.type == 'event' && x.name == name)
  if (!eventAbi) {
    throw new Error(`ABI ${name} not found`)
  }
  // Have to cast since there's a bug in
  // web3 types on the 'type' field
  return eventAbi as EventAbi
}

export const DECENTRALAND_AUCTION_CONFIG = {
  '1': '0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d',
}

export { ERC20 } from './abi/ERC20'
export { ERC721 } from './abi/ERC721v3'
export { ERC1155 } from './abi/ERC1155'
export { StaticCheckTxOrigin } from './abi/StaticCheckTxOrigin'
export { StaticCheckCheezeWizards } from './abi/StaticCheckCheezeWizards'
export { StaticCheckDecentralandEstates } from './abi/StaticCheckDecentralandEstates'
export { CheezeWizardsBasicTournament } from './abi/CheezeWizardsBasicTournament'
export { DecentralandEstates } from './abi/DecentralandEstates'
export { CanonicalWETH } from './abi/CanonicalWETH'
export { WrappedNFT } from './abi/WrappedNFT'
export { WrappedNFTFactory } from './abi/WrappedNFTFactory'
export { WrappedNFTLiquidationProxy } from './abi/WrappedNFTLiquidationProxy'
export { UniswapFactory } from './abi/UniswapFactory'
export { UniswapExchange } from './abi/UniswapExchange'

'''
'''--- src/debugging.ts ---
import { WyvernProtocol } from 'wyvern-js'
import { NULL_ADDRESS } from './constants'
import { Order } from './types'

export const MAX_ERROR_LENGTH = 120

/**
 * This file reproduces Solidity methods to make debugging easier
 */

enum Side { Buy, Sell }

enum SaleKind { FixedPrice, DutchAuction }

const SaleKindInterface = {
    Side,
    SaleKind,

    validateParameters(saleKind: SaleKind, expirationTime: number): boolean {
        return (saleKind === SaleKind.FixedPrice || expirationTime > 0)
    },

    canSettleOrder(listingTime: number, expirationTime: number): boolean {
        const now = Math.round(Date.now() / 1000)
        return (listingTime < now) && (expirationTime === 0 || now < expirationTime)
    }
}

/**
 * Debug the `ordersCanMatch` part of Wyvern
 * @param buy Buy order for debugging
 * @param sell Sell order for debugging
 */
export async function requireOrdersCanMatch(
    client: WyvernProtocol,
    {buy, sell, accountAddress}:
        { buy: Order, sell: Order, accountAddress: string }
) {
    const result = await client.wyvernExchange.ordersCanMatch_.callAsync(
        [buy.exchange, buy.maker, buy.taker, buy.feeRecipient, buy.target, buy.staticTarget, buy.paymentToken, sell.exchange, sell.maker, sell.taker, sell.feeRecipient, sell.target, sell.staticTarget, sell.paymentToken],
        [buy.makerRelayerFee, buy.takerRelayerFee, buy.makerProtocolFee, buy.takerProtocolFee, buy.basePrice, buy.extra, buy.listingTime, buy.expirationTime, buy.salt, sell.makerRelayerFee, sell.takerRelayerFee, sell.makerProtocolFee, sell.takerProtocolFee, sell.basePrice, sell.extra, sell.listingTime, sell.expirationTime, sell.salt],
        [buy.feeMethod, buy.side, buy.saleKind, buy.howToCall, sell.feeMethod, sell.side, sell.saleKind, sell.howToCall],
        buy.calldata,
        sell.calldata,
        buy.replacementPattern,
        sell.replacementPattern,
        buy.staticExtradata,
        sell.staticExtradata,
        {from: accountAddress},
    )

    if (result) {
        return
    }

    if (!(+buy.side == +SaleKindInterface.Side.Buy && +sell.side == +SaleKindInterface.Side.Sell)) {
        throw new Error('Must be opposite-side')
    }

    if (!(buy.feeMethod == sell.feeMethod)) {
        throw new Error('Must use same fee method')
    }

    if (!(buy.paymentToken == sell.paymentToken)) {
        throw new Error('Must use same payment token')
    }

    if (!(sell.taker == NULL_ADDRESS || sell.taker == buy.maker)) {
        throw new Error('Sell taker must be null or matching buy maker')
    }

    if (!(buy.taker == NULL_ADDRESS || buy.taker == sell.maker)) {
        throw new Error('Buy taker must be null or matching sell maker')
    }

    if (!((sell.feeRecipient == NULL_ADDRESS && buy.feeRecipient != NULL_ADDRESS) || (sell.feeRecipient != NULL_ADDRESS && buy.feeRecipient == NULL_ADDRESS))) {
        throw new Error('One order must be maker and the other must be taker')
    }

    if (!(buy.target == sell.target)) {
        throw new Error('Must match target')
    }

    if (!(buy.howToCall == sell.howToCall)) {
        throw new Error('Must match howToCall')
    }

    if (!SaleKindInterface.canSettleOrder(+buy.listingTime, +buy.expirationTime)) {
        throw new Error(`Buy-side order is set in the future or expired`)
    }

    if (!SaleKindInterface.canSettleOrder(+sell.listingTime, +sell.expirationTime)) {
        throw new Error(`Sell-side order is set in the future or expired`)
    }

    // Handle default, which is likely now() being diff than local time
    throw new Error('Error creating your order. Check that your system clock is set to the current date and time before you try again.')
}

/**
 * Debug the `orderCalldataCanMatch` part of Wyvern
 * @param buy Buy order for debugging
 * @param sell Sell Order for debugging
 */
export async function requireOrderCalldataCanMatch(
    client: WyvernProtocol,
    {buy, sell}:
        { buy: Order, sell: Order }
) {
    const result = await client.wyvernExchange.orderCalldataCanMatch.callAsync(buy.calldata, buy.replacementPattern, sell.calldata, sell.replacementPattern)
    if (result) {
        return
    }
    throw new Error('Unable to match offer data with auction data.')
}

'''
'''--- src/global.d.ts ---
// NO IMPORTS HERE
// Should be top-level

// Taken from wyvern and 0x
declare module 'web3_beta'
declare module 'web3-provider-engine'
declare module 'web3-provider-engine/subproviders/rpc'

/* tslint:enable */
declare module '*.json' {
    const json: any
    /* tslint:disable */
    export default json;
    /* tslint:enable */
}

declare module 'ethereumjs-abi' {
    const soliditySHA3: (argTypes: string[], args: any[]) => Buffer
    const methodID: (name: string, types: string[]) => Buffer
    const rawEncode: (argTypes: string[], args: any[]) => Buffer
    const encodeSingle: (type: string, arg: any) => Buffer
    const elementaryName: (name: string) => string
    const isDynamic: (type: string) => boolean
}

'''
'''--- src/index.ts ---
import { OpenSeaPort } from './seaport'
import { OpenSeaAPI } from './api'
import { Network, EventData, EventType } from './types'
export { orderToJSON, orderFromJSON, WyvernProtocol } from './utils/utils'
export {
  encodeCall,
  encodeSell, encodeAtomicizedBuy, encodeAtomicizedSell,
  encodeDefaultCall, encodeReplacementPattern,
  AbiType,
} from './utils/schema'

/**
 * Example setup:
 *
 * import * as Web3 from 'web3'
 * import { OpenSeaPort, Network } from 'opensea-js'
 * const provider = new Web3.providers.HttpProvider('https://mainnet.infura.io')
 * const client = new OpenSeaPort(provider, {
 *   networkName: Network.Main
 * })
 */

export {
  // Main SDK export:
  OpenSeaPort,
  // So the API could be used separately:
  OpenSeaAPI,
  // Useful for serializing and deserializing orders:
  // Types to help initialize SDK and listen to events.
  // Can also be imported using e.g.
  //   import { EventType } from 'opensea-js/lib/types'
  EventData, EventType, Network
}

'''
'''--- src/seaport.ts ---
import { BigNumber } from 'bignumber.js'
import { isValidAddress } from 'ethereumjs-util'
import { EventEmitter, EventSubscription } from 'fbemitter'
import * as _ from 'lodash'
import * as Web3 from 'web3'
import { WyvernProtocol } from 'wyvern-js'
import * as WyvernSchemas from 'wyvern-schemas'
import { Schema } from 'wyvern-schemas/dist/types'
import { OpenSeaAPI } from './api'
import {
  CHEEZE_WIZARDS_BASIC_TOURNAMENT_ADDRESS,
  CHEEZE_WIZARDS_BASIC_TOURNAMENT_RINKEBY_ADDRESS,
  CHEEZE_WIZARDS_GUILD_ADDRESS,
  CHEEZE_WIZARDS_GUILD_RINKEBY_ADDRESS,
  CK_ADDRESS,
  CK_RINKEBY_ADDRESS,
  DECENTRALAND_ESTATE_ADDRESS,
  DEFAULT_BUYER_FEE_BASIS_POINTS,
  DEFAULT_GAS_INCREASE_FACTOR,
  DEFAULT_MAX_BOUNTY,
  DEFAULT_SELLER_FEE_BASIS_POINTS,
  DEFAULT_WRAPPED_NFT_LIQUIDATION_UNISWAP_SLIPPAGE_IN_BASIS_POINTS, ENJIN_COIN_ADDRESS, INVERSE_BASIS_POINT, MAINNET_PROVIDER_URL, MANA_ADDRESS, MIN_EXPIRATION_SECONDS, NULL_ADDRESS, NULL_BLOCK_HASH, OPENSEA_FEE_RECIPIENT,
  OPENSEA_SELLER_BOUNTY_BASIS_POINTS,
  ORDER_MATCHING_LATENCY_SECONDS, RINKEBY_PROVIDER_URL,
  SELL_ORDER_BATCH_SIZE,
  STATIC_CALL_CHEEZE_WIZARDS_ADDRESS,
  STATIC_CALL_CHEEZE_WIZARDS_RINKEBY_ADDRESS,
  STATIC_CALL_DECENTRALAND_ESTATES_ADDRESS,
  STATIC_CALL_TX_ORIGIN_ADDRESS,
  STATIC_CALL_TX_ORIGIN_RINKEBY_ADDRESS,
  UNISWAP_FACTORY_ADDRESS_MAINNET,
  UNISWAP_FACTORY_ADDRESS_RINKEBY,
  WRAPPED_NFT_FACTORY_ADDRESS_MAINNET,
  WRAPPED_NFT_FACTORY_ADDRESS_RINKEBY,
  WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_MAINNET,
  WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_RINKEBY
} from './constants'
import { CanonicalWETH, CheezeWizardsBasicTournament, DecentralandEstates, ERC20, ERC721, getMethod, StaticCheckCheezeWizards, StaticCheckDecentralandEstates, StaticCheckTxOrigin, UniswapExchange, UniswapFactory, WrappedNFT, WrappedNFTFactory, WrappedNFTLiquidationProxy } from './contracts'
import {
  MAX_ERROR_LENGTH,
  requireOrderCalldataCanMatch, requireOrdersCanMatch
} from './debugging'
import { Asset, ComputedFees, ECSignature, EventData, EventType, FeeMethod, HowToCall, Network, OpenSeaAPIConfig, OpenSeaAsset, OpenSeaFungibleToken, Order, OrderSide, PartialReadonlyContractAbi, SaleKind, TokenStandardVersion, UnhashedOrder, UnsignedOrder, WyvernAsset, WyvernAtomicMatchParameters, WyvernFTAsset, WyvernNFTAsset, WyvernSchemaName } from './types'
import {
  encodeAtomicizedBuy,
  encodeAtomicizedSell, encodeAtomicizedTransfer, encodeBuy, encodeCall, encodeProxyCall, encodeSell, encodeTransferCall
} from './utils/schema'
import {
  annotateERC20TransferABI, annotateERC721TransferABI, assignOrdersToSides, confirmTransaction, delay, estimateCurrentPrice, estimateGas, getCurrentGasPrice, getNonCompliantApprovalAddress, getOrderHash, getTransferFeeSettings, getWyvernAsset, getWyvernBundle, isContractAddress, makeBigNumber, onDeprecated, orderToJSON,
  personalSignAsync, promisifyCall, rawCall, sendRawTransaction, validateAndFormatWalletAddress
} from './utils/utils'

export class OpenSeaPort {

  // Web3 instance to use
  public web3: Web3
  public web3ReadOnly: Web3
  // Logger function to use when debugging
  public logger: (arg: string) => void
  // API instance on this seaport
  public readonly api: OpenSeaAPI
  // Extra gwei to add to the mean gas price when making transactions
  public gasPriceAddition = new BigNumber(3)
  // Multiply gas estimate by this factor when making transactions
  public gasIncreaseFactor = DEFAULT_GAS_INCREASE_FACTOR

  private _networkName: Network
  private _wyvernProtocol: WyvernProtocol
  private _wyvernProtocolReadOnly: WyvernProtocol
  private _emitter: EventEmitter
  private _wrappedNFTFactoryAddress: string
  private _wrappedNFTLiquidationProxyAddress: string
  private _uniswapFactoryAddress: string

  /**
   * Your very own seaport.
   * Create a new instance of OpenSeaJS.
   * @param provider Web3 Provider to use for transactions. For example:
   *  `const provider = new Web3.providers.HttpProvider('https://mainnet.infura.io')`
   * @param apiConfig configuration options, including `networkName`
   * @param logger logger, optional, a function that will be called with debugging
   *  information
   */
  constructor(provider: Web3.Provider, apiConfig: OpenSeaAPIConfig = {}, logger?: (arg: string) => void) {

    // API config
    apiConfig.networkName = apiConfig.networkName || Network.Main
    apiConfig.gasPrice = apiConfig.gasPrice
    this.api = new OpenSeaAPI(apiConfig)

    this._networkName = apiConfig.networkName

    const readonlyProvider = new Web3.providers.HttpProvider(this._networkName == Network.Main ? MAINNET_PROVIDER_URL : RINKEBY_PROVIDER_URL)

    // Web3 Config
    this.web3 = new Web3(provider)
    this.web3ReadOnly = new Web3(readonlyProvider)

    // WyvernJS config
    this._wyvernProtocol = new WyvernProtocol(provider, {
      network: this._networkName,
    })

    // WyvernJS config for readonly (optimization for infura calls)
    this._wyvernProtocolReadOnly = new WyvernProtocol(readonlyProvider, {
      network: this._networkName,
    })

    // WrappedNFTLiquidationProxy Config
    this._wrappedNFTFactoryAddress = this._networkName == Network.Main ? WRAPPED_NFT_FACTORY_ADDRESS_MAINNET : WRAPPED_NFT_FACTORY_ADDRESS_RINKEBY
    this._wrappedNFTLiquidationProxyAddress = this._networkName == Network.Main ? WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_MAINNET : WRAPPED_NFT_LIQUIDATION_PROXY_ADDRESS_RINKEBY
    this._uniswapFactoryAddress = this._networkName == Network.Main ? UNISWAP_FACTORY_ADDRESS_MAINNET : UNISWAP_FACTORY_ADDRESS_RINKEBY

    // Emit events
    this._emitter = new EventEmitter()

    // Debugging: default to nothing
    this.logger = logger || ((arg: string) => arg)
  }

  /**
   * Add a listener to a marketplace event
   * @param event An event to listen for
   * @param listener A callback that will accept an object with event data
   * @param once Whether the listener should only be called once
   */
  public addListener(event: EventType, listener: (data: EventData) => void, once = false): EventSubscription {
    const subscription = once
      ? this._emitter.once(event, listener)
      : this._emitter.addListener(event, listener)
    return subscription
  }

  /**
   * Remove an event listener, included here for completeness.
   * Simply calls `.remove()` on a subscription
   * @param subscription The event subscription returned from `addListener`
   */
  public removeListener(subscription: EventSubscription) {
    subscription.remove()
  }

  /**
   * Remove all event listeners. Good idea to call this when you're unmounting
   * a component that listens to events to make UI updates
   * @param event Optional EventType to remove listeners for
   */
  public removeAllListeners(event?: EventType) {
    this._emitter.removeAllListeners(event)
  }

  /**
   * Wraps an arbirary group of NFTs into their corresponding WrappedNFT ERC20 tokens.
   * Emits the `WrapAssets` event when the transaction is prompted.
   * @param param0 __namedParameters Object
   * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to bundle together.
   * @param accountAddress Address of the user's wallet
   */
  public async wrapAssets(
      { assets, accountAddress }:
      { assets: Asset[];
        accountAddress: string; }
    ) {

    const schema = this._getSchema(WyvernSchemaName.ERC721)
    const wyAssets = assets.map(a => getWyvernAsset(schema, a))

    // Separate assets out into two arrays of tokenIds and tokenAddresses
    const tokenIds = wyAssets.map(a => a.id)
    const tokenAddresses = wyAssets.map(a => a.address)

    // Check if all tokenAddresses match. If not, then we have a mixedBatch of
    // NFTs from different NFT core contracts
    const isMixedBatchOfAssets: boolean = !tokenAddresses.every( (val, i, arr) => val === arr[0] )

    this._dispatch(EventType.WrapAssets, { assets: wyAssets, accountAddress })

    const txHash = await sendRawTransaction(this.web3, {
      from: accountAddress,
      to: this._wrappedNFTLiquidationProxyAddress,
      value: 0,
      data: encodeCall(getMethod(WrappedNFTLiquidationProxy, 'wrapNFTs'),
        [tokenIds, tokenAddresses, isMixedBatchOfAssets])
    }, error => {
      this._dispatch(EventType.TransactionDenied, { error, accountAddress })
    })

    await this._confirmTransaction(txHash, EventType.WrapAssets, "Wrapping Assets")
  }

  /**
   * Unwraps an arbirary group of NFTs from their corresponding WrappedNFT ERC20 tokens back into ERC721 tokens.
   * Emits the `UnwrapAssets` event when the transaction is prompted.
   * @param param0 __namedParameters Object
   * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to bundle together.
   * @param destinationAddresses Addresses that each resulting ERC721 token will be sent to. Must be the same length as `tokenIds`. Each address corresponds with its respective token ID in the `tokenIds` array.
   * @param accountAddress Address of the user's wallet
   */
  public async unwrapAssets(
      { assets, destinationAddresses, accountAddress }:
      { assets: Asset[];
        destinationAddresses: string[];
        accountAddress: string; }
    ) {

    if (!assets || !destinationAddresses || assets.length != destinationAddresses.length) {
      throw new Error("The 'assets' and 'destinationAddresses' arrays must exist and have the same length.")
    }

    const schema = this._getSchema(WyvernSchemaName.ERC721)
    const wyAssets = assets.map(a => getWyvernAsset(schema, a))

    // Separate assets out into two arrays of tokenIds and tokenAddresses
    const tokenIds = wyAssets.map(a => a.id)
    const tokenAddresses = wyAssets.map(a => a.address)

    // Check if all tokenAddresses match. If not, then we have a mixedBatch of
    // NFTs from different NFT core contracts
    const isMixedBatchOfAssets: boolean = !tokenAddresses.every( (val, i, arr) => val === arr[0] )

    this._dispatch(EventType.UnwrapAssets, { assets: wyAssets, accountAddress })

    const txHash = await sendRawTransaction(this.web3, {
      from: accountAddress,
      to: this._wrappedNFTLiquidationProxyAddress,
      value: 0,
      data: encodeCall(getMethod(WrappedNFTLiquidationProxy, 'unwrapNFTs'),
        [tokenIds, tokenAddresses, destinationAddresses, isMixedBatchOfAssets]),
    }, error => {
      this._dispatch(EventType.TransactionDenied, { error, accountAddress })
    })

    await this._confirmTransaction(txHash, EventType.UnwrapAssets, "Unwrapping Assets")
  }

  /**
   * Liquidates an arbirary group of NFTs by atomically wrapping them into their
   * corresponding WrappedNFT ERC20 tokens, and then immediately selling those
   * ERC20 tokens on their corresponding Uniswap exchange.
   * Emits the `LiquidateAssets` event when the transaction is prompted.
   * @param param0 __namedParameters Object
   * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to bundle together.
   * @param accountAddress Address of the user's wallet
   * @param uniswapSlippageAllowedInBasisPoints The amount of slippage that a user will tolerate in their Uniswap trade; if Uniswap cannot fulfill the order without more slippage, the whole function will revert.
   */
  public async liquidateAssets(
      { assets, accountAddress, uniswapSlippageAllowedInBasisPoints }:
      { assets: Asset[];
        accountAddress: string;
        uniswapSlippageAllowedInBasisPoints: number; }
    ) {

    // If no slippage parameter is provided, use a sane default value
    const uniswapSlippage = uniswapSlippageAllowedInBasisPoints === 0 ? DEFAULT_WRAPPED_NFT_LIQUIDATION_UNISWAP_SLIPPAGE_IN_BASIS_POINTS : uniswapSlippageAllowedInBasisPoints

    const schema = this._getSchema(WyvernSchemaName.ERC721)
    const wyAssets = assets.map(a => getWyvernAsset(schema, a))

    // Separate assets out into two arrays of tokenIds and tokenAddresses
    const tokenIds = wyAssets.map(a => a.id)
    const tokenAddresses = wyAssets.map(a => a.address)

    // Check if all tokenAddresses match. If not, then we have a mixedBatch of
    // NFTs from different NFT core contracts
    const isMixedBatchOfAssets: boolean = !tokenAddresses.every( (val, i, arr) => val === arr[0] )

    this._dispatch(EventType.LiquidateAssets, { assets: wyAssets, accountAddress })

    const txHash = await sendRawTransaction(this.web3, {
      from: accountAddress,
      to: this._wrappedNFTLiquidationProxyAddress,
      value: 0,
      data: encodeCall(getMethod(WrappedNFTLiquidationProxy, 'liquidateNFTs'),
        [tokenIds, tokenAddresses, isMixedBatchOfAssets, uniswapSlippage]),
    }, error => {
      this._dispatch(EventType.TransactionDenied, { error, accountAddress })
    })

    await this._confirmTransaction(txHash, EventType.LiquidateAssets, "Liquidating Assets")
  }

  /**
   * Purchases a bundle of WrappedNFT tokens from Uniswap and then unwraps them into ERC721 tokens.
   * Emits the `PurchaseAssets` event when the transaction is prompted.
   * @param param0 __namedParameters Object
   * @param numTokensToBuy The number of WrappedNFT tokens to purchase and unwrap
   * @param amount The estimated cost in wei for tokens (probably some ratio above the minimum amount to avoid the transaction failing due to frontrunning, minimum amount is found by calling UniswapExchange(uniswapAddress).getEthToTokenOutputPrice(numTokensToBuy.mul(10**18));
   * @param contractAddress Address of the corresponding NFT core contract for these NFTs.
   * @param accountAddress Address of the user's wallet
   */
  public async purchaseAssets(
      { numTokensToBuy, amount, contractAddress, accountAddress }:
      { numTokensToBuy: number;
        amount: BigNumber;
        contractAddress: string;
        accountAddress: string; }
    ) {

    const token = WyvernSchemas.tokens[this._networkName].canonicalWrappedEther

    this._dispatch(EventType.PurchaseAssets, { amount, contractAddress, accountAddress })

    const txHash = await sendRawTransaction(this.web3, {
      from: accountAddress,
      to: this._wrappedNFTLiquidationProxyAddress,
      value: amount,
      data: encodeCall(getMethod(WrappedNFTLiquidationProxy, 'purchaseNFTs'),
        [numTokensToBuy, contractAddress]),
    }, error => {
      this._dispatch(EventType.TransactionDenied, { error, accountAddress })
    })

    await this._confirmTransaction(txHash, EventType.PurchaseAssets, "Purchasing Assets")
  }

  /**
   * Gets the estimated cost or payout of either buying or selling NFTs to Uniswap using either purchaseAssts() or liquidateAssets()
   * @param param0 __namedParameters Object
   * @param numTokens The number of WrappedNFT tokens to either purchase or sell
   * @param isBuying A bool for whether the user is buying or selling
   * @param contractAddress Address of the corresponding NFT core contract for these NFTs.
   */
  public async getQuoteFromUniswap(
      { numTokens, isBuying, contractAddress }:
      { numTokens: number;
        isBuying: boolean;
        contractAddress: string; }
    ) {

    // Get UniswapExchange for WrappedNFTContract for contractAddress
    const wrappedNFTFactoryContract = this.web3.eth.contract(WrappedNFTFactory as any[])
    const wrappedNFTFactory = await wrappedNFTFactoryContract.at(this._wrappedNFTFactoryAddress)
    const wrappedNFTAddress = await wrappedNFTFactory.nftContractToWrapperContract(contractAddress)
    const wrappedNFTContract = this.web3.eth.contract(WrappedNFT as any[])
    const wrappedNFT = await wrappedNFTContract.at(wrappedNFTAddress)
    const uniswapFactoryContract = this.web3.eth.contract(UniswapFactory as any[])
    const uniswapFactory = await uniswapFactoryContract.at(this._uniswapFactoryAddress)
    const uniswapExchangeAddress = await uniswapFactory.getExchange(wrappedNFTAddress)
    const uniswapExchangeContract = this.web3.eth.contract(UniswapExchange as any[])
    const uniswapExchange = await uniswapExchangeContract.at(uniswapExchangeAddress)

    // Convert desired WNFT to wei
    const amount = WyvernProtocol.toBaseUnitAmount(makeBigNumber(numTokens), wrappedNFT.decimals())

    // Return quote from Uniswap
    if (isBuying) {
      return parseInt(await uniswapExchange.getEthToTokenOutputPrice(amount))
    } else {
      return parseInt(await uniswapExchange.getTokenToEthInputPrice(amount))
    }

  }

  /**
   * Wrap ETH into W-ETH.
   * W-ETH is needed for placing buy orders (making offers).
   * Emits the `WrapEth` event when the transaction is prompted.
   * @param param0 __namedParameters Object
   * @param amountInEth How much ether to wrap
   * @param accountAddress Address of the user's wallet containing the ether
   */
  public async wrapEth(
      { amountInEth, accountAddress }:
      { amountInEth: number; accountAddress: string }
    ) {

    const token = WyvernSchemas.tokens[this._networkName].canonicalWrappedEther

    const amount = WyvernProtocol.toBaseUnitAmount(makeBigNumber(amountInEth), token.decimals)

    this._dispatch(EventType.WrapEth, { accountAddress, amount })

    const txHash = await sendRawTransaction(this.web3, {
      from: accountAddress,
      to: token.address,
      value: amount,
      data: encodeCall(getMethod(CanonicalWETH, 'deposit'), []),
    }, error => {
      this._dispatch(EventType.TransactionDenied, { error, accountAddress })
    })

    await this._confirmTransaction(txHash, EventType.WrapEth, "Wrapping ETH")
  }

  /**
   * Unwrap W-ETH into ETH.
   * Emits the `UnwrapWeth` event when the transaction is prompted.
   * @param param0 __namedParameters Object
   * @param amountInEth How much W-ETH to unwrap
   * @param accountAddress Address of the user's wallet containing the W-ETH
   */
  public async unwrapWeth(
      { amountInEth, accountAddress }:
      { amountInEth: number; accountAddress: string }
    ) {

    const token = WyvernSchemas.tokens[this._networkName].canonicalWrappedEther

    const amount = WyvernProtocol.toBaseUnitAmount(makeBigNumber(amountInEth), token.decimals)

    this._dispatch(EventType.UnwrapWeth, { accountAddress, amount })

    const txHash = await sendRawTransaction(this.web3, {
      from: accountAddress,
      to: token.address,
      value: 0,
      data: encodeCall(getMethod(CanonicalWETH, 'withdraw'), [amount.toString()]),
    }, error => {
      this._dispatch(EventType.TransactionDenied, { error, accountAddress })
    })

    await this._confirmTransaction(txHash, EventType.UnwrapWeth, "Unwrapping W-ETH")
  }

  /**
   * Create a buy order to make an offer on a bundle or group of assets.
   * Will throw an 'Insufficient balance' error if the maker doesn't have enough W-ETH to make the offer.
   * If the user hasn't approved W-ETH access yet, this will emit `ApproveCurrency` before asking for approval.
   * @param param0 __namedParameters Object
   * @param assets Array of Asset objects to bid on
   * @param collection Optional collection for computing fees, required only if all assets belong to the same collection
   * @param quantities The quantity of each asset to sell. Defaults to 1 for each.
   * @param accountAddress Address of the maker's wallet
   * @param startAmount Value of the offer, in units of the payment token (or wrapped ETH if no payment token address specified)
   * @param expirationTime Expiration time for the order, in seconds. An expiration time of 0 means "never expire"
   * @param paymentTokenAddress Optional address for using an ERC-20 token in the order. If unspecified, defaults to W-ETH
   * @param sellOrder Optional sell order (like an English auction) to ensure fee and schema compatibility
   * @param referrerAddress The optional address that referred the order
   */
  public async createBundleBuyOrder(
      {  assets, collection, quantities, accountAddress, startAmount, expirationTime = 0, paymentTokenAddress, sellOrder, referrerAddress }:
      { assets: Asset[];
        collection?: { slug: string };
        quantities?: number[];
        accountAddress: string;
        startAmount: number;
        expirationTime?: number;
        paymentTokenAddress?: string;
        sellOrder?: Order;
        referrerAddress?: string; }
    ): Promise<Order> {

    // Default to 1 of each asset
    quantities = quantities || assets.map(a => 1)
    paymentTokenAddress = paymentTokenAddress || WyvernSchemas.tokens[this._networkName].canonicalWrappedEther.address

    const order = await this._makeBundleBuyOrder({
      assets,
      collection,
      quantities,
      accountAddress,
      startAmount,
      expirationTime,
      paymentTokenAddress,
      extraBountyBasisPoints: 0,
      sellOrder,
      referrerAddress
    })

    // NOTE not in Wyvern exchange code:
    // frontend checks to make sure
    // token is approved and sufficiently available
    await this._buyOrderValidationAndApprovals({ order, accountAddress })

    const hashedOrder = {
      ...order,
      hash: getOrderHash(order)
    }
    let signature
    try {
      signature = await this._authorizeOrder(hashedOrder)
    } catch (error) {
      console.error(error)
      throw new Error("You declined to authorize your offer")
    }

    const orderWithSignature = {
      ...hashedOrder,
      ...signature
    }
    return this.validateAndPostOrder(orderWithSignature)
  }

  /**
   * Create a buy order to make an offer on an asset.
   * Will throw an 'Insufficient balance' error if the maker doesn't have enough W-ETH to make the offer.
   * If the user hasn't approved W-ETH access yet, this will emit `ApproveCurrency` before asking for approval.
   * @param param0 __namedParameters Object
   * @param asset The asset to trade
   * @param accountAddress Address of the maker's wallet
   * @param startAmount Value of the offer, in units of the payment token (or wrapped ETH if no payment token address specified)
   * @param quantity The number of assets to bid for (if fungible or semi-fungible). Defaults to 1. In units, not base units, e.g. not wei.
   * @param expirationTime Expiration time for the order, in seconds. An expiration time of 0 means "never expire"
   * @param paymentTokenAddress Optional address for using an ERC-20 token in the order. If unspecified, defaults to W-ETH
   * @param sellOrder Optional sell order (like an English auction) to ensure fee and schema compatibility
   * @param referrerAddress The optional address that referred the order
   */
  public async createBuyOrder(
      { asset, accountAddress, startAmount, quantity = 1, expirationTime = 0, paymentTokenAddress, sellOrder, referrerAddress }:
      { asset: Asset;
        accountAddress: string;
        startAmount: number;
        quantity?: number;
        expirationTime?: number;
        paymentTokenAddress?: string;
        sellOrder?: Order;
        referrerAddress?: string; }
    ): Promise<Order> {

    paymentTokenAddress = paymentTokenAddress || WyvernSchemas.tokens[this._networkName].canonicalWrappedEther.address

    const order = await this._makeBuyOrder({
      asset,
      quantity,
      accountAddress,
      startAmount,
      expirationTime,
      paymentTokenAddress,
      extraBountyBasisPoints: 0,
      sellOrder,
      referrerAddress
    })

    // NOTE not in Wyvern exchange code:
    // frontend checks to make sure
    // token is approved and sufficiently available
    await this._buyOrderValidationAndApprovals({ order, accountAddress })

    const hashedOrder = {
      ...order,
      hash: getOrderHash(order)
    }
    let signature
    try {
      signature = await this._authorizeOrder(hashedOrder)
    } catch (error) {
      console.error(error)
      throw new Error("You declined to authorize your offer")
    }

    const orderWithSignature = {
      ...hashedOrder,
      ...signature
    }
    return this.validateAndPostOrder(orderWithSignature)
  }

  /**
   * Create a sell order to auction an asset.
   * Will throw a 'You do not own enough of this asset' error if the maker doesn't have the asset or not enough of it to sell the specific `quantity`.
   * If the user hasn't approved access to the token yet, this will emit `ApproveAllAssets` (or `ApproveAsset` if the contract doesn't support approve-all) before asking for approval.
   * @param param0 __namedParameters Object
   * @param tokenId DEPRECATED: Token ID. Use `asset` instead.
   * @param tokenAddress DEPRECATED: Address of the token's contract. Use `asset` instead.
   * @param asset The asset to trade
   * @param accountAddress Address of the maker's wallet
   * @param startAmount Price of the asset at the start of the auction. Units are in the amount of a token above the token's decimal places (integer part). For example, for ether, expected units are in ETH, not wei.
   * @param endAmount Optional price of the asset at the end of its expiration time. Units are in the amount of a token above the token's decimal places (integer part). For example, for ether, expected units are in ETH, not wei.
   * @param quantity The number of assets to sell (if fungible or semi-fungible). Defaults to 1. In units, not base units, e.g. not wei.
   * @param listingTime Optional time when the order will become fulfillable, in UTC seconds. Undefined means it will start now.
   * @param expirationTime Expiration time for the order, in UTC seconds. An expiration time of 0 means "never expire."
   * @param waitForHighestBid If set to true, this becomes an English auction that increases in price for every bid. The highest bid wins when the auction expires, as long as it's at least `startAmount`. `expirationTime` must be > 0.
   * @param englishAuctionReservePrice Optional price level, below which orders may be placed but will not be matched.  Orders below the reserve can be manually accepted but will not be automatically matched.
   * @param paymentTokenAddress Address of the ERC-20 token to accept in return. If undefined or null, uses Ether.
   * @param extraBountyBasisPoints Optional basis points (1/100th of a percent) to reward someone for referring the fulfillment of this order
   * @param buyerAddress Optional address that's allowed to purchase this item. If specified, no other address will be able to take the order, unless its value is the null address.
   * @param buyerEmail Optional email of the user that's allowed to purchase this item. If specified, a user will have to verify this email before being able to take the order.
   */
  public async createSellOrder(
      { asset, accountAddress, startAmount, endAmount, quantity = 1, listingTime, expirationTime = 0, waitForHighestBid = false, englishAuctionReservePrice, paymentTokenAddress, extraBountyBasisPoints = 0, buyerAddress, buyerEmail }:
      { asset: Asset;
        accountAddress: string;
        startAmount: number;
        endAmount?: number;
        quantity?: number;
        listingTime?: number;
        expirationTime?: number;
        waitForHighestBid?: boolean;
        englishAuctionReservePrice?: number;
        paymentTokenAddress?: string;
        extraBountyBasisPoints?: number;
        buyerAddress?: string;
        buyerEmail?: string; }
    ): Promise<Order> {

    const order = await this._makeSellOrder({
      asset,
      quantity,
      accountAddress,
      startAmount,
      endAmount,
      listingTime,
      expirationTime,
      waitForHighestBid,
      englishAuctionReservePrice,
      paymentTokenAddress: paymentTokenAddress || NULL_ADDRESS,
      extraBountyBasisPoints,
      buyerAddress: buyerAddress || NULL_ADDRESS
    })

    await this._sellOrderValidationAndApprovals({ order, accountAddress })

    if (buyerEmail) {
      await this._createEmailWhitelistEntry({ order, buyerEmail })
    }

    const hashedOrder = {
      ...order,
      hash: getOrderHash(order)
    }
    let signature
    try {
      signature = await this._authorizeOrder(hashedOrder)
    } catch (error) {
      console.error(error)
      throw new Error("You declined to authorize your auction")
    }

    const orderWithSignature = {
      ...hashedOrder,
      ...signature
    }

    return this.validateAndPostOrder(orderWithSignature)
  }

  /**
   * Create multiple sell orders in bulk to auction assets out of an asset factory.
   * Will throw a 'You do not own this asset' error if the maker doesn't own the factory.
   * Items will mint to users' wallets only when they buy them. See https://docs.opensea.io/docs/opensea-initial-item-sale-tutorial for more info.
   * If the user hasn't approved access to the token yet, this will emit `ApproveAllAssets` (or `ApproveAsset` if the contract doesn't support approve-all) before asking for approval.
   * @param param0 __namedParameters Object
   * @param assets Which assets you want to post orders for. Use the tokenAddress of your factory contract
   * @param accountAddress Address of the factory owner's wallet
   * @param startAmount Price of the asset at the start of the auction, or minimum acceptable bid if it's an English auction. Units are in the amount of a token above the token's decimal places (integer part). For example, for ether, expected units are in ETH, not wei.
   * @param endAmount Optional price of the asset at the end of its expiration time. If not specified, will be set to `startAmount`. Units are in the amount of a token above the token's decimal places (integer part). For example, for ether, expected units are in ETH, not wei.
   * @param quantity The number of assets to sell at one time (if fungible or semi-fungible). Defaults to 1. In units, not base units, e.g. not wei.
   * @param listingTime Optional time when the order will become fulfillable, in UTC seconds. Undefined means it will start now.
   * @param expirationTime Expiration time for the order, in seconds. An expiration time of 0 means "never expire."
   * @param waitForHighestBid If set to true, this becomes an English auction that increases in price for every bid. The highest bid wins when the auction expires, as long as it's at least `startAmount`. `expirationTime` must be > 0.
   * @param paymentTokenAddress Address of the ERC-20 token to accept in return. If undefined or null, uses Ether.
   * @param extraBountyBasisPoints Optional basis points (1/100th of a percent) to reward someone for referring the fulfillment of each order
   * @param buyerAddress Optional address that's allowed to purchase each item. If specified, no other address will be able to take each order.
   * @param buyerEmail Optional email of the user that's allowed to purchase each item. If specified, a user will have to verify this email before being able to take each order.
   * @param numberOfOrders Number of times to repeat creating the same order for each asset. If greater than 5, creates them in batches of 5. Requires an `apiKey` to be set during seaport initialization in order to not be throttled by the API.
   * @returns The number of orders created in total
   */
  public async createFactorySellOrders(
      { assets, accountAddress, startAmount, endAmount, quantity = 1, listingTime, expirationTime = 0, waitForHighestBid = false, paymentTokenAddress, extraBountyBasisPoints = 0, buyerAddress, buyerEmail, numberOfOrders = 1 }:
      { assets: Asset[];
        accountAddress: string;
        startAmount: number;
        endAmount?: number;
        quantity?: number;
        listingTime?: number;
        expirationTime?: number;
        waitForHighestBid?: boolean;
        paymentTokenAddress?: string;
        extraBountyBasisPoints?: number;
        buyerAddress?: string;
        buyerEmail?: string;
        numberOfOrders?: number; }
    ): Promise<number> {

    if (numberOfOrders < 1) {
      throw new Error('Need to make at least one sell order')
    }

    if (!assets || !assets.length) {
      throw new Error('Need at least one asset to create orders for')
    }

    if (_.uniqBy(assets, a => a.tokenAddress).length !== 1) {
      throw new Error('All assets must be on the same factory contract address')
    }

    // Validate just a single dummy order but don't post it
    const dummyOrder = await this._makeSellOrder({
      asset: assets[0],
      quantity,
      accountAddress,
      startAmount,
      endAmount,
      listingTime,
      expirationTime,
      waitForHighestBid,
      paymentTokenAddress: paymentTokenAddress || NULL_ADDRESS,
      extraBountyBasisPoints,
      buyerAddress: buyerAddress || NULL_ADDRESS
    })
    await this._sellOrderValidationAndApprovals({ order: dummyOrder, accountAddress })

    const _makeAndPostOneSellOrder = async (asset: Asset) => {
      const order = await this._makeSellOrder({
        asset,
        quantity,
        accountAddress,
        startAmount,
        endAmount,
        listingTime,
        expirationTime,
        waitForHighestBid,
        paymentTokenAddress: paymentTokenAddress || NULL_ADDRESS,
        extraBountyBasisPoints,
        buyerAddress: buyerAddress || NULL_ADDRESS
      })

      if (buyerEmail) {
        await this._createEmailWhitelistEntry({ order, buyerEmail })
      }

      const hashedOrder = {
        ...order,
        hash: getOrderHash(order)
      }
      let signature
      try {
        signature = await this._authorizeOrder(hashedOrder)
      } catch (error) {
        console.error(error)
        throw new Error("You declined to authorize your auction, or your web3 provider can't sign using personal_sign. Try 'web3-provider-engine' and make sure a mnemonic is set. Just a reminder: there's no gas needed anymore to mint tokens!")
      }

      const orderWithSignature = {
        ...hashedOrder,
        ...signature
      }

      return this.validateAndPostOrder(orderWithSignature)
    }

    const range = _.range(numberOfOrders * assets.length)
    const batches  = _.chunk(range, SELL_ORDER_BATCH_SIZE)
    let numOrdersCreated = 0

    for (const subRange of batches) {
      // subRange = e.g. [5, 6, 7, 8, 9]
      // batches of assets = e.g. [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, ... 10]

      // Will block until all SELL_ORDER_BATCH_SIZE orders
      // have come back in parallel
      const batchOrdersCreated = await Promise.all(subRange.map(async assetOrderIndex => {
        const assetIndex = Math.floor(assetOrderIndex / numberOfOrders)
        return _makeAndPostOneSellOrder(assets[assetIndex])
      }))

      this.logger(`Created and posted a batch of ${batchOrdersCreated.length} orders in parallel.`)

      numOrdersCreated += batchOrdersCreated.length

      // Don't overwhelm router
      await delay(500)
    }

    return numOrdersCreated
  }

  /**
   * Create a sell order to auction a bundle of assets.
   * Will throw a 'You do not own this asset' error if the maker doesn't have one of the assets.
   * If the user hasn't approved access to any of the assets yet, this will emit `ApproveAllAssets` (or `ApproveAsset` if the contract doesn't support approve-all) before asking for approval for each asset.
   * @param param0 __namedParameters Object
   * @param bundleName Name of the bundle
   * @param bundleDescription Optional description of the bundle. Markdown is allowed.
   * @param bundleExternalLink Optional link to a page that adds context to the bundle.
   * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to bundle together.
   * @param collection Optional collection for computing fees, required only if all assets belong to the same collection
   * @param quantities The quantity of each asset to sell. Defaults to 1 for each.
   * @param accountAddress The address of the maker of the bundle and the owner of all the assets.
   * @param startAmount Price of the asset at the start of the auction, or minimum acceptable bid if it's an English auction.
   * @param endAmount Optional price of the asset at the end of its expiration time. If not specified, will be set to `startAmount`.
   * @param listingTime Optional time when the order will become fulfillable, in UTC seconds. Undefined means it will start now.
   * @param expirationTime Expiration time for the order, in seconds. An expiration time of 0 means "never expire."
   * @param waitForHighestBid If set to true, this becomes an English auction that increases in price for every bid. The highest bid wins when the auction expires, as long as it's at least `startAmount`. `expirationTime` must be > 0.
   * @param englishAuctionReservePrice Optional price level, below which orders may be placed but will not be matched.  Orders below the reserve can be manually accepted but will not be automatically matched.
   * @param paymentTokenAddress Address of the ERC-20 token to accept in return. If undefined or null, uses Ether.
   * @param extraBountyBasisPoints Optional basis points (1/100th of a percent) to reward someone for referring the fulfillment of this order
   * @param buyerAddress Optional address that's allowed to purchase this bundle. If specified, no other address will be able to take the order, unless it's the null address.
   */
  public async createBundleSellOrder(
      { bundleName, bundleDescription, bundleExternalLink, assets, collection, quantities, accountAddress, startAmount, endAmount, expirationTime = 0, listingTime, waitForHighestBid = false, englishAuctionReservePrice, paymentTokenAddress, extraBountyBasisPoints = 0, buyerAddress }:
      { bundleName: string;
        bundleDescription?: string;
        bundleExternalLink?: string;
        assets: Asset[];
        collection?: { slug: string };
        quantities?: number[];
        accountAddress: string;
        startAmount: number;
        endAmount?: number;
        listingTime?: number;
        expirationTime?: number;
        waitForHighestBid?: boolean;
        englishAuctionReservePrice?: number;
        paymentTokenAddress?: string;
        extraBountyBasisPoints?: number;
        buyerAddress?: string; }
    ): Promise<Order> {

    // Default to one of each asset
    quantities = quantities || assets.map(a => 1)

    const order = await this._makeBundleSellOrder({
      bundleName,
      bundleDescription,
      bundleExternalLink,
      assets,
      collection,
      quantities,
      accountAddress,
      startAmount,
      endAmount,
      listingTime,
      expirationTime,
      waitForHighestBid,
      englishAuctionReservePrice,
      paymentTokenAddress: paymentTokenAddress || NULL_ADDRESS,
      extraBountyBasisPoints,
      buyerAddress: buyerAddress || NULL_ADDRESS,
    })

    await this._sellOrderValidationAndApprovals({ order, accountAddress })

    const hashedOrder = {
      ...order,
      hash: getOrderHash(order)
    }
    let signature
    try {
      signature = await this._authorizeOrder(hashedOrder)
    } catch (error) {
      console.error(error)
      throw new Error("You declined to authorize your auction")
    }

    const orderWithSignature = {
      ...hashedOrder,
      ...signature
    }

    return this.validateAndPostOrder(orderWithSignature)
  }

  /**
   * Fullfill or "take" an order for an asset, either a buy or sell order
   * @param param0 __namedParamaters Object
   * @param order The order to fulfill, a.k.a. "take"
   * @param accountAddress The taker's wallet address
   * @param recipientAddress The optional address to receive the order's item(s) or curriencies. If not specified, defaults to accountAddress.
   * @param referrerAddress The optional address that referred the order
   * @returns Transaction hash for fulfilling the order
   */
  public async fulfillOrder(
      { order, accountAddress, recipientAddress, referrerAddress }:
      { order: Order;
        accountAddress: string;
        recipientAddress?: string;
        referrerAddress?: string; }
    ): Promise<string> {
    const matchingOrder = this._makeMatchingOrder({
      order,
      accountAddress,
      recipientAddress: recipientAddress || accountAddress
    })

    const { buy, sell } = assignOrdersToSides(order, matchingOrder)

    const metadata = this._getMetadata(order, referrerAddress)
    const transactionHash = await this._atomicMatch({ buy, sell, accountAddress, metadata })

    await this._confirmTransaction(transactionHash, EventType.MatchOrders, "Fulfilling order", async () => {
      const isOpen = await this._validateOrder(order)
      return !isOpen
    })
    return transactionHash
  }

  /**
   * Cancel an order on-chain, preventing it from ever being fulfilled.
   * @param param0 __namedParameters Object
   * @param order The order to cancel
   * @param accountAddress The order maker's wallet address
   */
  public async cancelOrder(
      { order, accountAddress }:
      { order: Order;
        accountAddress: string}
    ) {

    this._dispatch(EventType.CancelOrder, { order, accountAddress })

    const transactionHash = await this._wyvernProtocol.wyvernExchange.cancelOrder_.sendTransactionAsync(
      [order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken],
      [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt],
      order.feeMethod,
      order.side,
      order.saleKind,
      order.howToCall,
      order.calldata,
      order.replacementPattern,
      order.staticExtradata,
      order.v || 0,
      order.r || NULL_BLOCK_HASH,
      order.s || NULL_BLOCK_HASH,
      { from: accountAddress })

    await this._confirmTransaction(transactionHash.toString(), EventType.CancelOrder, "Cancelling order", async () => {
      const isOpen = await this._validateOrder(order)
      return !isOpen
    })
  }

  /**
   * Approve a non-fungible token for use in trades.
   * Requires an account to be initialized first.
   * Called internally, but exposed for dev flexibility.
   * Checks to see if already approved, first. Then tries different approval methods from best to worst.
   * @param param0 __namedParamters Object
   * @param tokenId Token id to approve, but only used if approve-all isn't
   *  supported by the token contract
   * @param tokenAddress The contract address of the token being approved
   * @param accountAddress The user's wallet address
   * @param proxyAddress Address of the user's proxy contract. If not provided,
   *  will attempt to fetch it from Wyvern.
   * @param tokenAbi ABI of the token's contract. Defaults to a flexible ERC-721
   *  contract.
   * @param skipApproveAllIfTokenAddressIn an optional list of token addresses that, if a token is approve-all type, will skip approval
   * @param schemaName The Wyvern schema name corresponding to the asset type
   * @returns Transaction hash if a new transaction was created, otherwise null
   */
  public async approveSemiOrNonFungibleToken(
      { tokenId,
        tokenAddress,
        accountAddress,
        proxyAddress,
        tokenAbi = ERC721,
        skipApproveAllIfTokenAddressIn = new Set(),
        schemaName = WyvernSchemaName.ERC721 }:
      { tokenId: string;
        tokenAddress: string;
        accountAddress: string;
        proxyAddress?: string;
        tokenAbi?: PartialReadonlyContractAbi;
        skipApproveAllIfTokenAddressIn?: Set<string>;
        schemaName?: WyvernSchemaName; }
    ): Promise<string | null> {

    const schema = this._getSchema(schemaName)
    const tokenContract = this.web3.eth.contract(tokenAbi as any[])
    const contract = await tokenContract.at(tokenAddress)

    if (!proxyAddress) {
      proxyAddress = await this._getProxy(accountAddress) || undefined
      if (!proxyAddress) {
        throw new Error('Uninitialized account')
      }
    }

    const approvalAllCheck = async () => {
      // NOTE:
      // Use this long way of calling so we can check for method existence on a bool-returning method.
      const isApprovedForAllRaw = await rawCall(this.web3ReadOnly, {
        from: accountAddress,
        to: contract.address,
        data: contract.isApprovedForAll.getData(accountAddress, proxyAddress)
      })
      return parseInt(isApprovedForAllRaw)
    }
    const isApprovedForAll = await approvalAllCheck()

    if (isApprovedForAll == 1) {
      // Supports ApproveAll
      this.logger('Already approved proxy for all tokens')
      return null
    }

    if (isApprovedForAll == 0) {
      // Supports ApproveAll
      //  not approved for all yet

      if (skipApproveAllIfTokenAddressIn.has(tokenAddress)) {
        this.logger('Already approving proxy for all tokens in another transaction')
        return null
      }
      skipApproveAllIfTokenAddressIn.add(tokenAddress)

      try {
        this._dispatch(EventType.ApproveAllAssets, {
          accountAddress,
          proxyAddress,
          contractAddress: tokenAddress
        })

        const txHash = await sendRawTransaction(this.web3, {
          from: accountAddress,
          to: contract.address,
          data: contract.setApprovalForAll.getData(proxyAddress, true),
        }, error => {
          this._dispatch(EventType.TransactionDenied, { error, accountAddress })
        })
        await this._confirmTransaction(txHash, EventType.ApproveAllAssets, 'Approving all tokens of this type for trading', async () => {
          const result = await approvalAllCheck()
          return result == 1
        })
        return txHash
      } catch (error) {
        console.error(error)
        throw new Error("Couldn't get permission to approve these tokens for trading. Their contract might not be implemented correctly. Please contact the developer!")
      }
    }

    // Does not support ApproveAll (ERC721 v1 or v2)
    this.logger('Contract does not support Approve All')

    const approvalOneCheck = async () => {
      // Note: approvedAddr will be '0x' if not supported
      let approvedAddr = await promisifyCall<string>(c => contract.getApproved.call(tokenId, c))
      if (approvedAddr == proxyAddress) {
        this.logger('Already approved proxy for this token')
        return true
      }
      this.logger(`Approve response: ${approvedAddr}`)

      // SPECIAL CASING non-compliant contracts
      if (!approvedAddr) {
        approvedAddr = await getNonCompliantApprovalAddress(contract, tokenId, accountAddress)
        if (approvedAddr == proxyAddress) {
          this.logger('Already approved proxy for this item')
          return true
        }
        this.logger(`Special-case approve response: ${approvedAddr}`)
      }
      return false
    }

    const isApprovedForOne = await approvalOneCheck()
    if (isApprovedForOne) {
      return null
    }

    // Call `approve`

    try {
      this._dispatch(EventType.ApproveAsset, {
        accountAddress,
        proxyAddress,
        asset: getWyvernAsset(schema, { tokenId, tokenAddress })
      })

      const txHash = await sendRawTransaction(this.web3, {
        from: accountAddress,
        to: contract.address,
        data: contract.approve.getData(proxyAddress, tokenId),
      }, error => {
        this._dispatch(EventType.TransactionDenied, { error, accountAddress })
      })

      await this._confirmTransaction(txHash, EventType.ApproveAsset, "Approving single token for trading", approvalOneCheck)
      return txHash
    } catch (error) {
      console.error(error)
      throw new Error("Couldn't get permission to approve this token for trading. Its contract might not be implemented correctly. Please contact the developer!")
    }
  }

  /**
   * Approve a fungible token (e.g. W-ETH) for use in trades.
   * Called internally, but exposed for dev flexibility.
   * Checks to see if the minimum amount is already approved, first.
   * @param param0 __namedParamters Object
   * @param accountAddress The user's wallet address
   * @param tokenAddress The contract address of the token being approved
   * @param proxyAddress The user's proxy address. If unspecified, uses the Wyvern token transfer proxy address.
   * @param minimumAmount The minimum amount needed to skip a transaction. Defaults to the max-integer.
   * @returns Transaction hash if a new transaction occurred, otherwise null
   */
  public async approveFungibleToken(
      { accountAddress,
        tokenAddress,
        proxyAddress,
        minimumAmount = WyvernProtocol.MAX_UINT_256 }:
      { accountAddress: string;
        tokenAddress: string;
        proxyAddress?: string;
        minimumAmount?: BigNumber }
    ): Promise<string | null> {
    proxyAddress = proxyAddress || WyvernProtocol.getTokenTransferProxyAddress(this._networkName)

    const approvedAmount = await this._getApprovedTokenCount({
      accountAddress,
      tokenAddress,
      proxyAddress
    })

    if (approvedAmount.greaterThanOrEqualTo(minimumAmount)) {
      this.logger('Already approved enough currency for trading')
      return null
    }

    this.logger(`Not enough token approved for trade: ${approvedAmount} approved to transfer ${tokenAddress}`)

    this._dispatch(EventType.ApproveCurrency, {
      accountAddress,
      contractAddress: tokenAddress,
      proxyAddress
    })

    const hasOldApproveMethod = [ENJIN_COIN_ADDRESS, MANA_ADDRESS].includes(tokenAddress.toLowerCase())

    if (minimumAmount.greaterThan(0) && hasOldApproveMethod) {
      // Older erc20s require initial approval to be 0
      await this.unapproveFungibleToken({ accountAddress, tokenAddress, proxyAddress })
    }

    const txHash = await sendRawTransaction(this.web3, {
      from: accountAddress,
      to: tokenAddress,
      data: encodeCall(getMethod(ERC20, 'approve'),
        // Always approve maximum amount, to prevent the need for followup
        // transactions (and because old ERC20s like MANA/ENJ are non-compliant)
        [proxyAddress, WyvernProtocol.MAX_UINT_256.toString()]),
    }, error => {
      this._dispatch(EventType.TransactionDenied, { error, accountAddress })
    })

    await this._confirmTransaction(txHash, EventType.ApproveCurrency, "Approving currency for trading", async () => {
      const newlyApprovedAmount = await this._getApprovedTokenCount({
        accountAddress,
        tokenAddress,
        proxyAddress
      })
      return newlyApprovedAmount.greaterThanOrEqualTo(minimumAmount)
    })
    return txHash
  }

  /**
   * Un-approve a fungible token (e.g. W-ETH) for use in trades.
   * Called internally, but exposed for dev flexibility.
   * Useful for old ERC20s that require a 0 approval count before
   * changing the count
   * @param param0 __namedParamters Object
   * @param accountAddress The user's wallet address
   * @param tokenAddress The contract address of the token being approved
   * @param proxyAddress The user's proxy address. If unspecified, uses the Wyvern token transfer proxy address.
   * @returns Transaction hash
   */
  public async unapproveFungibleToken(
    { accountAddress,
      tokenAddress,
      proxyAddress }:
    { accountAddress: string;
      tokenAddress: string;
      proxyAddress?: string; }
  ): Promise<string> {
    proxyAddress = proxyAddress || WyvernProtocol.getTokenTransferProxyAddress(this._networkName)

    const txHash = await sendRawTransaction(this.web3, {
      from: accountAddress,
      to: tokenAddress,
      data: encodeCall(getMethod(ERC20, 'approve'), [proxyAddress, 0]),
    }, error => {
      this._dispatch(EventType.TransactionDenied, { error, accountAddress })
    })

    await this._confirmTransaction(txHash, EventType.UnapproveCurrency, "Resetting Currency Approval", async () => {
      const newlyApprovedAmount = await this._getApprovedTokenCount({
        accountAddress,
        tokenAddress,
        proxyAddress
      })
      return newlyApprovedAmount.isZero()
    })
    return txHash
  }

  /**
   * Gets the price for the order using the contract
   * @param order The order to calculate the price for
   */
  public async getCurrentPrice(order: Order) {

    const currentPrice = await this._wyvernProtocolReadOnly.wyvernExchange.calculateCurrentPrice_.callAsync(
      [order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken],
      [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt],
      order.feeMethod,
      order.side,
      order.saleKind,
      order.howToCall,
      order.calldata,
      order.replacementPattern,
      order.staticExtradata,
    )
    return currentPrice
  }

  /**
   * Returns whether an order is fulfillable.
   * An order may not be fulfillable if a target item's transfer function
   * is locked for some reason, e.g. an item is being rented within a game
   * or trading has been locked for an item type.
   * @param param0 __namedParamters Object
   * @param order Order to check
   * @param accountAddress The account address that will be fulfilling the order
   * @param recipientAddress The optional address to receive the order's item(s) or curriencies. If not specified, defaults to accountAddress.
   * @param referrerAddress The optional address that referred the order
   */
  public async isOrderFulfillable(
      { order, accountAddress, recipientAddress, referrerAddress }:
      { order: Order;
        accountAddress: string;
        recipientAddress?: string;
        referrerAddress?: string }
    ): Promise<boolean> {

    const matchingOrder = this._makeMatchingOrder({
      order,
      accountAddress,
      recipientAddress: recipientAddress || accountAddress
    })

    const { buy, sell } = assignOrdersToSides(order, matchingOrder)

    const metadata = this._getMetadata(order, referrerAddress)
    const gas = await this._estimateGasForMatch({ buy, sell, accountAddress, metadata })

    this.logger(`Gas estimate for ${order.side == OrderSide.Sell ? "sell" : "buy"} order: ${gas}`)

    return gas != null && gas > 0
  }

  /**
   * Returns whether an asset is transferrable.
   * An asset may not be transferrable if its transfer function
   * is locked for some reason, e.g. an item is being rented within a game
   * or trading has been locked for an item type.
   * @param param0 __namedParamters Object
   * @param tokenId DEPRECATED: Token ID. Use `asset` instead.
   * @param tokenAddress DEPRECATED: Address of the token's contract. Use `asset` instead.
   * @param asset The asset to trade
   * @param fromAddress The account address that currently owns the asset
   * @param toAddress The account address that will be acquiring the asset
   * @param quantity The amount of the asset to transfer, if it's fungible (optional). In units (not base units), e.g. not wei.
   * @param useProxy Use the `fromAddress`'s proxy contract only if the `fromAddress` has already approved the asset for sale. Required if checking an ERC-721 v1 asset (like CryptoKitties) that doesn't check if the transferFrom caller is the owner of the asset (only allowing it if it's an approved address).
   * @param retries How many times to retry if false
   */
  public async isAssetTransferrable(
    { asset, fromAddress, toAddress,
      quantity, useProxy = false }:
    { asset: Asset;
      fromAddress: string;
      toAddress: string;
      quantity?: number | BigNumber;
      useProxy?: boolean; },
    retries = 1
  ): Promise<boolean> {

    const schema = this._getSchema(asset.schemaName)
    const quantityBN = quantity
      ? WyvernProtocol.toBaseUnitAmount(makeBigNumber(quantity), asset.decimals || 0)
      : makeBigNumber(1)
    const wyAsset = getWyvernAsset(schema, asset, quantityBN)
    const abi = schema.functions.transfer(wyAsset)

    let from = fromAddress
    if (useProxy) {
      const proxyAddress = await this._getProxy(fromAddress)
      if (!proxyAddress) {
        console.error(`This asset's owner (${fromAddress}) does not have a proxy!`)
        return false
      }
      from = proxyAddress
    }

    const data = encodeTransferCall(abi, fromAddress, toAddress)

    try {
      const gas = await estimateGas(this._getClientsForRead(retries).web3, {
        from,
        to: abi.target,
        data
      })
      return gas > 0

    } catch (error) {

      if (retries <= 0) {
        console.error(error)
        console.error(from, abi.target, data)
        return false
      }
      await delay(500)
      return await this.isAssetTransferrable({ asset, fromAddress, toAddress, quantity, useProxy }, retries - 1)
    }
  }

  /**
   * Transfer a fungible or non-fungible asset to another address
   * @param param0 __namedParamaters Object
   * @param fromAddress The owner's wallet address
   * @param toAddress The recipient's wallet address
   * @param asset The fungible or non-fungible asset to transfer
   * @param quantity The amount of the asset to transfer, if it's fungible (optional). In units (not base units), e.g. not wei.
   * @returns Transaction hash
   */
  public async transfer(
      { fromAddress, toAddress, asset,
        quantity = 1 }:
      { fromAddress: string;
        toAddress: string;
        asset: Asset;
        quantity?: number | BigNumber; }
    ): Promise<string> {

    const schema = this._getSchema(asset.schemaName)
    const quantityBN = WyvernProtocol.toBaseUnitAmount(makeBigNumber(quantity), asset.decimals || 0)
    const wyAsset = getWyvernAsset(schema, asset, quantityBN)
    const isCryptoKitties = [CK_ADDRESS, CK_RINKEBY_ADDRESS].includes(wyAsset.address)
    // Since CK is common, infer isOldNFT from it in case user
    // didn't pass in `version`
    const isOldNFT = isCryptoKitties || !!asset.version && [
      TokenStandardVersion.ERC721v1, TokenStandardVersion.ERC721v2
    ].includes(asset.version)

    const abi = asset.schemaName === WyvernSchemaName.ERC20
      ? annotateERC20TransferABI(wyAsset as WyvernFTAsset)
      : isOldNFT
        ? annotateERC721TransferABI(wyAsset as WyvernNFTAsset)
        : schema.functions.transfer(wyAsset)

    this._dispatch(EventType.TransferOne, { accountAddress: fromAddress, toAddress, asset: wyAsset })

    const data = encodeTransferCall(abi, fromAddress, toAddress)
    const txHash = await sendRawTransaction(this.web3, {
      from: fromAddress,
      to: abi.target,
      data,
    }, error => {
      this._dispatch(EventType.TransactionDenied, { error, accountAddress: fromAddress })
    })

    await this._confirmTransaction(txHash, EventType.TransferOne, `Transferring asset`)
    return txHash
  }

  /**
   * Transfer one or more assets to another address.
   * ERC-721 and ERC-1155 assets are supported
   * @param param0 __namedParamaters Object
   * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to transfer.
   * @param fromAddress The owner's wallet address
   * @param toAddress The recipient's wallet address
   * @param schemaName The Wyvern schema name corresponding to the asset type, if not in each Asset definition
   * @returns Transaction hash
   */
  public async transferAll(
      { assets, fromAddress, toAddress, schemaName = WyvernSchemaName.ERC721 }:
      { assets: Asset[];
        fromAddress: string;
        toAddress: string;
        schemaName?: WyvernSchemaName; }
    ): Promise<string> {

    toAddress = validateAndFormatWalletAddress(this.web3, toAddress)

    const schemaNames = assets.map(asset => asset.schemaName || schemaName)
    const wyAssets = assets.map(asset => getWyvernAsset(this._getSchema(asset.schemaName), asset))

    const { calldata, target } = encodeAtomicizedTransfer(schemaNames.map(name => this._getSchema(name)), wyAssets, fromAddress, toAddress, this._wyvernProtocol, this._networkName)

    let proxyAddress = await this._getProxy(fromAddress)
    if (!proxyAddress) {
      proxyAddress = await this._initializeProxy(fromAddress)
    }

    await this._approveAll({ schemaNames, wyAssets, accountAddress: fromAddress, proxyAddress })

    this._dispatch(EventType.TransferAll, { accountAddress: fromAddress, toAddress, assets: wyAssets })

    const txHash = await sendRawTransaction(this.web3, {
      from: fromAddress,
      to: proxyAddress,
      data: encodeProxyCall(target, HowToCall.DelegateCall, calldata),
    }, error => {
      this._dispatch(EventType.TransactionDenied, { error, accountAddress: fromAddress })
    })

    await this._confirmTransaction(txHash, EventType.TransferAll, `Transferring ${assets.length} asset${assets.length == 1 ? '' : 's'}`)
    return txHash
  }

  /**
   * Get known payment tokens (ERC-20) that match your filters.
   * @param param0 __namedParamters Object
   * @param symbol Filter by the ERC-20 symbol for the token,
   *    e.g. "DAI" for Dai stablecoin
   * @param address Filter by the ERC-20 contract address for the token,
   *    e.g. "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359" for Dai
   * @param name Filter by the name of the ERC-20 contract.
   *    Not guaranteed to exist or be unique for each token type.
   *    e.g. '' for Dai and 'Decentraland' for MANA
   * FUTURE: officiallySupported: Filter for tokens that are
   *    officially supported and shown on opensea.io
   */
  public async getFungibleTokens(
      { symbol, address, name }:
      { symbol?: string;
        address?: string;
        name?: string } = {}
    ): Promise<OpenSeaFungibleToken[]> {

    onDeprecated("Use `api.getPaymentTokens` instead")

    const tokenSettings = WyvernSchemas.tokens[this._networkName]

    const { tokens } = await this.api.getPaymentTokens({ symbol, address, name })

    const offlineTokens: OpenSeaFungibleToken[] = [
      tokenSettings.canonicalWrappedEther,
      ...tokenSettings.otherTokens,
    ].filter(t => {
      if (symbol != null && t.symbol.toLowerCase() != symbol.toLowerCase()) {
        return false
      }
      if (address != null && t.address.toLowerCase() != address.toLowerCase()) {
        return false
      }
      if (name != null && t.name != name) {
        return false
      }
      return true
    })

    return [
      ...offlineTokens,
      ...tokens
    ]
  }

  /**
   * Get an account's balance of any Asset.
   * @param param0 __namedParameters Object
   * @param accountAddress Account address to check
   * @param asset The Asset to check balance for
   * @param retries How many times to retry if balance is 0
   */
  public async getAssetBalance(
      { accountAddress, asset }:
      { accountAddress: string;
        asset: Asset; },
      retries = 1
    ): Promise<BigNumber> {
    const schema = this._getSchema(asset.schemaName)
    const wyAsset = getWyvernAsset(schema, asset)

    if (schema.functions.countOf) {
      // ERC20 or ERC1155 (non-Enjin)

      const abi = schema.functions.countOf(wyAsset)
      const contract = this._getClientsForRead(retries).web3.eth.contract([abi as Web3.FunctionAbi]).at(abi.target)
      const inputValues = abi.inputs.filter(x => x.value !== undefined).map(x => x.value)
      const count = await promisifyCall<BigNumber>(c => contract[abi.name].call(accountAddress, ...inputValues, c))

      if (count !== undefined) {
        return count
      }

    } else if (schema.functions.ownerOf) {
      // ERC721 asset

      const abi = schema.functions.ownerOf(wyAsset)
      const contract = this._getClientsForRead(retries).web3.eth.contract([abi as Web3.FunctionAbi]).at(abi.target)
      if (abi.inputs.filter(x => x.value === undefined)[0]) {
        throw new Error("Missing an argument for finding the owner of this asset")
      }
      const inputValues = abi.inputs.map(i => i.value.toString())
      const owner = await promisifyCall<string>(c => contract[abi.name].call(...inputValues, c))
      if (owner) {
        return owner.toLowerCase() == accountAddress.toLowerCase()
          ? new BigNumber(1)
          : new BigNumber(0)
      }

    } else {
      // Missing ownership call - skip check to allow listings
      // by default
      throw new Error('Missing ownership schema for this asset type')
    }

    if (retries <= 0) {
      throw new Error('Unable to get current owner from smart contract')
    } else {
      await delay(500)
      // Recursively check owner again
      return await this.getAssetBalance({accountAddress, asset}, retries - 1)
    }
  }

  /**
   * Get the balance of a fungible token.
   * Convenience method for getAssetBalance for fungibles
   * @param param0 __namedParameters Object
   * @param accountAddress Account address to check
   * @param tokenAddress The address of the token to check balance for
   * @param schemaName Optional schema name for the fungible token
   * @param retries Number of times to retry if balance is undefined
   */
  public async getTokenBalance(
      { accountAddress, tokenAddress, schemaName = WyvernSchemaName.ERC20 }:
      { accountAddress: string;
        tokenAddress: string;
        schemaName?: WyvernSchemaName },
      retries = 1
    ) {

    const asset: Asset = {
      tokenId: null,
      tokenAddress,
      schemaName
    }
    return this.getAssetBalance({ accountAddress, asset }, retries)
  }

  /**
   * Compute the fees for an order
   * @param param0 __namedParameters
   * @param asset Asset to use for fees. May be blank ONLY for multi-collection bundles.
   * @param side The side of the order (buy or sell)
   * @param accountAddress The account to check fees for (useful if fees differ by account, like transfer fees)
   * @param extraBountyBasisPoints The basis points to add for the bounty. Will throw if it exceeds the assets' contract's OpenSea fee.
   */
  public async computeFees(
      { asset, side, accountAddress, extraBountyBasisPoints = 0 }:
      { asset?: OpenSeaAsset;
        side: OrderSide;
        accountAddress?: string;
        extraBountyBasisPoints?: number }
    ): Promise<ComputedFees> {

    let openseaBuyerFeeBasisPoints = DEFAULT_BUYER_FEE_BASIS_POINTS
    let openseaSellerFeeBasisPoints = DEFAULT_SELLER_FEE_BASIS_POINTS
    let devBuyerFeeBasisPoints = 0
    let devSellerFeeBasisPoints = 0
    let transferFee = makeBigNumber(0)
    let transferFeeTokenAddress = null
    let maxTotalBountyBPS = DEFAULT_MAX_BOUNTY

    if (asset) {
      openseaBuyerFeeBasisPoints = +asset.collection.openseaBuyerFeeBasisPoints
      openseaSellerFeeBasisPoints = +asset.collection.openseaSellerFeeBasisPoints
      devBuyerFeeBasisPoints = +asset.collection.devBuyerFeeBasisPoints
      devSellerFeeBasisPoints = +asset.collection.devSellerFeeBasisPoints

      maxTotalBountyBPS = openseaSellerFeeBasisPoints
    }

    // Compute transferFrom fees
    if (side == OrderSide.Sell && asset) {
      // Server-side knowledge
      transferFee = asset.transferFee
        ? makeBigNumber(asset.transferFee)
        : transferFee
      transferFeeTokenAddress = asset.transferFeePaymentToken
        ? asset.transferFeePaymentToken.address
        : transferFeeTokenAddress

      try {
        // web3 call to update it
        const result = await getTransferFeeSettings(this.web3, { asset, accountAddress })
        transferFee = result.transferFee != null ? result.transferFee : transferFee
        transferFeeTokenAddress = result.transferFeeTokenAddress || transferFeeTokenAddress
      } catch (error) {
        // Use server defaults
        console.error(error)
      }
    }

    // Compute bounty
    const sellerBountyBasisPoints = side == OrderSide.Sell
      ? extraBountyBasisPoints
      : 0

    // Check that bounty is in range of the opensea fee
    const bountyTooLarge = sellerBountyBasisPoints + OPENSEA_SELLER_BOUNTY_BASIS_POINTS > maxTotalBountyBPS
    if (sellerBountyBasisPoints > 0 && bountyTooLarge) {
      let errorMessage = `Total bounty exceeds the maximum for this asset type (${maxTotalBountyBPS / 100}%).`
      if (maxTotalBountyBPS >= OPENSEA_SELLER_BOUNTY_BASIS_POINTS) {
        errorMessage += ` Remember that OpenSea will add ${OPENSEA_SELLER_BOUNTY_BASIS_POINTS / 100}% for referrers with OpenSea accounts!`
      }
      throw new Error(errorMessage)
    }

    return {
      totalBuyerFeeBasisPoints: openseaBuyerFeeBasisPoints + devBuyerFeeBasisPoints,
      totalSellerFeeBasisPoints: openseaSellerFeeBasisPoints + devSellerFeeBasisPoints,
      openseaBuyerFeeBasisPoints,
      openseaSellerFeeBasisPoints,
      devBuyerFeeBasisPoints,
      devSellerFeeBasisPoints,
      sellerBountyBasisPoints,
      transferFee,
      transferFeeTokenAddress,
    }
  }

  /**
   * Validate and post an order to the OpenSea orderbook.
   * @param order The order to post. Can either be signed by the maker or pre-approved on the Wyvern contract using approveOrder. See https://github.com/ProjectWyvern/wyvern-ethereum/blob/master/contracts/exchange/Exchange.sol#L178
   * @returns The order as stored by the orderbook
   */
  public async validateAndPostOrder(order: Order): Promise<Order> {
    const hash = await this._wyvernProtocolReadOnly.wyvernExchange.hashOrder_.callAsync(
      [order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken],
      [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt],
      order.feeMethod,
      order.side,
      order.saleKind,
      order.howToCall,
      order.calldata,
      order.replacementPattern,
      order.staticExtradata)

    if (hash !== order.hash) {
      console.error(order)
      throw new Error(`Order couldn't be validated by the exchange due to a hash mismatch. Make sure your wallet is on the right network!`)
    }
    this.logger('Order hashes match')

    // Validation is called server-side
    const confirmedOrder = await this.api.postOrder(orderToJSON(order))
    return confirmedOrder
  }

  /**
   * DEPRECATED: ERC-1559
   * https://eips.ethereum.org/EIPS/eip-1559
   * Compute the gas price for sending a txn, in wei
   * Will be slightly above the mean to make it faster
   */
  public async _computeGasPrice(): Promise<BigNumber> {
    const meanGas = await getCurrentGasPrice(this.web3)
    const weiToAdd = this.web3.toWei(this.gasPriceAddition, 'gwei')
    return meanGas.plus(weiToAdd)
  }

  /**
   * Compute the gas amount for sending a txn
   * Will be slightly above the result of estimateGas to make it more reliable
   * @param estimation The result of estimateGas for a transaction
   */
  public _correctGasAmount(estimation: number): number {
    return Math.ceil(estimation * this.gasIncreaseFactor)
  }

  /**
   * Estimate the gas needed to match two orders. Returns undefined if tx errors
   * @param param0 __namedParamaters Object
   * @param buy The buy order to match
   * @param sell The sell order to match
   * @param accountAddress The taker's wallet address
   * @param metadata Metadata bytes32 to send with the match
   * @param retries Number of times to retry if false
   */
  public async _estimateGasForMatch(
      { buy, sell, accountAddress, metadata = NULL_BLOCK_HASH }:
      { buy: Order;
        sell: Order;
        accountAddress: string;
        metadata?: string },
      retries = 1
    ): Promise<number | undefined> {

    let value
    if (buy.maker.toLowerCase() == accountAddress.toLowerCase() && buy.paymentToken == NULL_ADDRESS) {
      value = await this._getRequiredAmountForTakingSellOrder(sell)
    }

    try {
      return await this._getClientsForRead(retries).wyvernProtocol.wyvernExchange.atomicMatch_.estimateGasAsync(
          [buy.exchange, buy.maker, buy.taker, buy.feeRecipient, buy.target, buy.staticTarget, buy.paymentToken, sell.exchange, sell.maker, sell.taker, sell.feeRecipient, sell.target, sell.staticTarget, sell.paymentToken],
          [buy.makerRelayerFee, buy.takerRelayerFee, buy.makerProtocolFee, buy.takerProtocolFee, buy.basePrice, buy.extra, buy.listingTime, buy.expirationTime, buy.salt, sell.makerRelayerFee, sell.takerRelayerFee, sell.makerProtocolFee, sell.takerProtocolFee, sell.basePrice, sell.extra, sell.listingTime, sell.expirationTime, sell.salt],
          [buy.feeMethod, buy.side, buy.saleKind, buy.howToCall, sell.feeMethod, sell.side, sell.saleKind, sell.howToCall],
          buy.calldata,
          sell.calldata,
          buy.replacementPattern,
          sell.replacementPattern,
          buy.staticExtradata,
          sell.staticExtradata,
          [
            buy.v || 0,
            sell.v || 0
          ],
          [
            buy.r || NULL_BLOCK_HASH,
            buy.s || NULL_BLOCK_HASH,
            sell.r || NULL_BLOCK_HASH,
            sell.s || NULL_BLOCK_HASH,
            metadata
          ],
            // Typescript error in estimate gas method, so use any
            { from: accountAddress, value } as any)
    } catch (error) {

      if (retries <= 0) {
        console.error(error)
        return undefined
      }
      await delay(200)
      return await this._estimateGasForMatch({ buy, sell, accountAddress, metadata }, retries - 1)
    }
  }

  /**
   * Estimate the gas needed to transfer assets in bulk
   * Used for tests
   * @param param0 __namedParamaters Object
   * @param assets An array of objects with the tokenId and tokenAddress of each of the assets to transfer.
   * @param fromAddress The owner's wallet address
   * @param toAddress The recipient's wallet address
   * @param schemaName The Wyvern schema name corresponding to the asset type, if not in each asset
   */
  public async _estimateGasForTransfer(
      { assets, fromAddress, toAddress, schemaName = WyvernSchemaName.ERC721 }:
      { assets: Asset[];
        fromAddress: string;
        toAddress: string;
        schemaName?: WyvernSchemaName; }
    ): Promise<number> {

    const schemaNames = assets.map(asset => asset.schemaName || schemaName)
    const wyAssets = assets.map(asset => getWyvernAsset(this._getSchema(asset.schemaName), asset))

    const proxyAddress = await this._getProxy(fromAddress)
    if (!proxyAddress) {
      throw new Error('Uninitialized proxy address')
    }

    await this._approveAll({schemaNames, wyAssets, accountAddress: fromAddress, proxyAddress})

    const { calldata, target } = encodeAtomicizedTransfer(schemaNames.map(name => this._getSchema(name)), wyAssets, fromAddress, toAddress, this._wyvernProtocol, this._networkName)

    return estimateGas(this.web3, {
      from: fromAddress,
      to: proxyAddress,
      data: encodeProxyCall(target, HowToCall.DelegateCall, calldata)
    })
  }

  /**
   * Get the proxy address for a user's wallet.
   * Internal method exposed for dev flexibility.
   * @param accountAddress The user's wallet address
   * @param retries Optional number of retries to do
   */
  public async _getProxy(accountAddress: string, retries = 0): Promise<string | null> {
    let proxyAddress: string | null = await this._wyvernProtocolReadOnly.wyvernProxyRegistry.proxies.callAsync(accountAddress)

    if (proxyAddress == '0x') {
      throw new Error("Couldn't retrieve your account from the blockchain - make sure you're on the correct Ethereum network!")
    }

    if (!proxyAddress || proxyAddress == NULL_ADDRESS) {
      if (retries > 0) {
        await delay(1000)
        return await this._getProxy(accountAddress, retries - 1)
      }
      proxyAddress = null
    }
    return proxyAddress
  }

  /**
   * Initialize the proxy for a user's wallet.
   * Proxies are used to make trades on behalf of the order's maker so that
   *  trades can happen when the maker isn't online.
   * Internal method exposed for dev flexibility.
   * @param accountAddress The user's wallet address
   */
  public async _initializeProxy(accountAddress: string): Promise<string> {

    this._dispatch(EventType.InitializeAccount, { accountAddress })
    this.logger(`Initializing proxy for account: ${accountAddress}`)

    const txnData: any = { from: accountAddress }
    const gasEstimate = await this._wyvernProtocolReadOnly.wyvernProxyRegistry.registerProxy.estimateGasAsync(txnData)
    const transactionHash = await this._wyvernProtocol.wyvernProxyRegistry.registerProxy.sendTransactionAsync({
      ...txnData,
      gas: this._correctGasAmount(gasEstimate)
    })

    await this._confirmTransaction(transactionHash, EventType.InitializeAccount, "Initializing proxy for account", async () => {
      const polledProxy = await this._getProxy(accountAddress)
      return !!polledProxy
    })

    const proxyAddress = await this._getProxy(accountAddress, 10)
    if (!proxyAddress) {
      throw new Error('Failed to initialize your account :( Please restart your wallet/browser and try again!')
    }

    return proxyAddress
  }

  /**
   * For a fungible token to use in trades (like W-ETH), get the amount
   *  approved for use by the Wyvern transfer proxy.
   * Internal method exposed for dev flexibility.
   * @param param0 __namedParamters Object
   * @param accountAddress Address for the user's wallet
   * @param tokenAddress Address for the token's contract
   * @param proxyAddress User's proxy address. If undefined, uses the token transfer proxy address
   */
  public async _getApprovedTokenCount(
      { accountAddress, tokenAddress, proxyAddress }:
      { accountAddress: string;
        tokenAddress?: string;
        proxyAddress?: string;
      }
    ) {
    if (!tokenAddress) {
      tokenAddress = WyvernSchemas.tokens[this._networkName].canonicalWrappedEther.address
    }
    const addressToApprove = proxyAddress || WyvernProtocol.getTokenTransferProxyAddress(this._networkName)
    const approved = await rawCall(this.web3, {
      from: accountAddress,
      to: tokenAddress,
      data: encodeCall(getMethod(ERC20, 'allowance'),
        [accountAddress, addressToApprove]),
    })
    return makeBigNumber(approved)
  }

  public async _makeBuyOrder(
      { asset, quantity, accountAddress, startAmount, expirationTime = 0, paymentTokenAddress, extraBountyBasisPoints = 0, sellOrder, referrerAddress }:
      { asset: Asset;
        quantity: number;
        accountAddress: string;
        startAmount: number;
        expirationTime: number;
        paymentTokenAddress: string;
        extraBountyBasisPoints: number;
        sellOrder?: UnhashedOrder;
        referrerAddress?: string; }
    ): Promise<UnhashedOrder> {

    accountAddress = validateAndFormatWalletAddress(this.web3, accountAddress)
    const schema = this._getSchema(asset.schemaName)
    const quantityBN = WyvernProtocol.toBaseUnitAmount(makeBigNumber(quantity), asset.decimals || 0)
    const wyAsset = getWyvernAsset(schema, asset, quantityBN)

    const openSeaAsset: OpenSeaAsset = await this.api.getAsset(asset)

    const taker = sellOrder
      ? sellOrder.maker
      : NULL_ADDRESS

    const {
      totalBuyerFeeBasisPoints,
      totalSellerFeeBasisPoints
    } = await this.computeFees({ asset: openSeaAsset, extraBountyBasisPoints, side: OrderSide.Buy })

    const {
      makerRelayerFee,
      takerRelayerFee,
      makerProtocolFee,
      takerProtocolFee,
      makerReferrerFee,
      feeRecipient,
      feeMethod
    } = this._getBuyFeeParameters(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, sellOrder)

    const { target, calldata, replacementPattern } = encodeBuy(schema, wyAsset, accountAddress)

    const { basePrice, extra, paymentToken } = await this._getPriceParameters(OrderSide.Buy, paymentTokenAddress, expirationTime, startAmount)
    const times = this._getTimeParameters(expirationTime)

    const { staticTarget, staticExtradata } = await this._getStaticCallTargetAndExtraData({ asset: openSeaAsset, useTxnOriginStaticCall: false })

    return {
      exchange: WyvernProtocol.getExchangeContractAddress(this._networkName),
      maker: accountAddress,
      taker,
      quantity: quantityBN,
      makerRelayerFee,
      takerRelayerFee,
      makerProtocolFee,
      takerProtocolFee,
      makerReferrerFee,
      waitingForBestCounterOrder: false,
      feeMethod,
      feeRecipient,
      side: OrderSide.Buy,
      saleKind: SaleKind.FixedPrice,
      target,
      howToCall: HowToCall.Call,
      calldata,
      replacementPattern,
      staticTarget,
      staticExtradata,
      paymentToken,
      basePrice,
      extra,
      listingTime: times.listingTime,
      expirationTime: times.expirationTime,
      salt: WyvernProtocol.generatePseudoRandomSalt(),
      metadata: {
        asset: wyAsset,
        schema: schema.name as WyvernSchemaName,
        referrerAddress
      }
    }
  }

  public async _makeSellOrder(
      { asset, quantity, accountAddress, startAmount, endAmount, listingTime, expirationTime, waitForHighestBid, englishAuctionReservePrice = 0, paymentTokenAddress, extraBountyBasisPoints, buyerAddress }:
      { asset: Asset;
        quantity: number;
        accountAddress: string;
        startAmount: number;
        endAmount?: number;
        waitForHighestBid: boolean;
        englishAuctionReservePrice?: number;
        listingTime?: number;
        expirationTime: number;
        paymentTokenAddress: string;
        extraBountyBasisPoints: number;
        buyerAddress: string; }
    ): Promise<UnhashedOrder> {

    accountAddress = validateAndFormatWalletAddress(this.web3, accountAddress)
    const schema = this._getSchema(asset.schemaName)
    const quantityBN = WyvernProtocol.toBaseUnitAmount(makeBigNumber(quantity), asset.decimals || 0)
    const wyAsset = getWyvernAsset(schema, asset, quantityBN)

    const openSeaAsset = await this.api.getAsset(asset)

    const { totalSellerFeeBasisPoints,
            totalBuyerFeeBasisPoints,
            sellerBountyBasisPoints } = await this.computeFees({ asset: openSeaAsset, side: OrderSide.Sell, extraBountyBasisPoints })

    const { target, calldata, replacementPattern } = encodeSell(schema, wyAsset, accountAddress)

    const orderSaleKind = endAmount != null && endAmount !== startAmount
      ? SaleKind.DutchAuction
      : SaleKind.FixedPrice

    const { basePrice, extra, paymentToken, reservePrice } = await this._getPriceParameters(OrderSide.Sell, paymentTokenAddress, expirationTime, startAmount, endAmount, waitForHighestBid, englishAuctionReservePrice)
    const times = this._getTimeParameters(expirationTime, listingTime, waitForHighestBid)

    const {
      makerRelayerFee,
      takerRelayerFee,
      makerProtocolFee,
      takerProtocolFee,
      makerReferrerFee,
      feeRecipient,
      feeMethod
    } = this._getSellFeeParameters(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, waitForHighestBid, sellerBountyBasisPoints)

    const { staticTarget, staticExtradata } = await this._getStaticCallTargetAndExtraData({ asset: openSeaAsset, useTxnOriginStaticCall: waitForHighestBid })

    return {
      exchange: WyvernProtocol.getExchangeContractAddress(this._networkName),
      maker: accountAddress,
      taker: buyerAddress,
      quantity: quantityBN,
      makerRelayerFee,
      takerRelayerFee,
      makerProtocolFee,
      takerProtocolFee,
      makerReferrerFee,
      waitingForBestCounterOrder: waitForHighestBid,
      englishAuctionReservePrice: reservePrice ? makeBigNumber(reservePrice) : undefined,
      feeMethod,
      feeRecipient,
      side: OrderSide.Sell,
      saleKind: orderSaleKind,
      target,
      howToCall: HowToCall.Call,
      calldata,
      replacementPattern,
      staticTarget,
      staticExtradata,
      paymentToken,
      basePrice,
      extra,
      listingTime: times.listingTime,
      expirationTime: times.expirationTime,
      salt: WyvernProtocol.generatePseudoRandomSalt(),
      metadata: {
        asset: wyAsset,
        schema: schema.name as WyvernSchemaName,
      }
    }
  }

  public async _getStaticCallTargetAndExtraData(
      { asset, useTxnOriginStaticCall }:
      { asset: OpenSeaAsset;
        useTxnOriginStaticCall: boolean; }
    ): Promise<{
      staticTarget: string;
      staticExtradata: string;
    }> {
    const isCheezeWizards = [
        CHEEZE_WIZARDS_GUILD_ADDRESS.toLowerCase(),
        CHEEZE_WIZARDS_GUILD_RINKEBY_ADDRESS.toLowerCase()
      ].includes(asset.tokenAddress.toLowerCase())
    const isDecentralandEstate = asset.tokenAddress.toLowerCase() == DECENTRALAND_ESTATE_ADDRESS.toLowerCase()
    const isMainnet = this._networkName == Network.Main

    if (isMainnet && !useTxnOriginStaticCall) {
      // While testing, we will use dummy values for mainnet. We will remove this if-statement once we have pushed the PR once and tested on Rinkeby
      return {
        staticTarget: NULL_ADDRESS,
        staticExtradata: '0x',
      }
    }

    if (isCheezeWizards) {
      const cheezeWizardsBasicTournamentAddress = isMainnet ? CHEEZE_WIZARDS_BASIC_TOURNAMENT_ADDRESS : CHEEZE_WIZARDS_BASIC_TOURNAMENT_RINKEBY_ADDRESS
      const cheezeWizardsBasicTournamentABI = this.web3.eth.contract(CheezeWizardsBasicTournament as any[])
      const cheezeWizardsBasicTournmentInstance = await cheezeWizardsBasicTournamentABI.at(cheezeWizardsBasicTournamentAddress)
      const wizardFingerprint = await rawCall(this.web3, {
        to: cheezeWizardsBasicTournmentInstance.address,
        data: cheezeWizardsBasicTournmentInstance.wizardFingerprint.getData(asset.tokenId)
      })
      return {
        staticTarget: isMainnet
          ? STATIC_CALL_CHEEZE_WIZARDS_ADDRESS
          : STATIC_CALL_CHEEZE_WIZARDS_RINKEBY_ADDRESS,
        staticExtradata: encodeCall(
          getMethod(
            StaticCheckCheezeWizards,
            'succeedIfCurrentWizardFingerprintMatchesProvidedWizardFingerprint'),
          [asset.tokenId, wizardFingerprint, useTxnOriginStaticCall]),
      }
    } else if (isDecentralandEstate && isMainnet) {
      // We stated that we will only use Decentraland estates static
      // calls on mainnet, since Decentraland uses Ropsten
      const decentralandEstateAddress = DECENTRALAND_ESTATE_ADDRESS
      const decentralandEstateABI = this.web3.eth.contract(DecentralandEstates as any[])
      const decentralandEstateInstance = await decentralandEstateABI.at(decentralandEstateAddress)
      const estateFingerprint = await rawCall(this.web3, {
        to: decentralandEstateInstance.address,
        data: decentralandEstateInstance.getFingerprint.getData(asset.tokenId)
      })
      return {
        staticTarget: STATIC_CALL_DECENTRALAND_ESTATES_ADDRESS,
        staticExtradata: encodeCall(
          getMethod(StaticCheckDecentralandEstates,
            'succeedIfCurrentEstateFingerprintMatchesProvidedEstateFingerprint'),
          [asset.tokenId, estateFingerprint, useTxnOriginStaticCall]),
      }
    } else if (useTxnOriginStaticCall) {
      return {
        staticTarget: isMainnet
          ? STATIC_CALL_TX_ORIGIN_ADDRESS
          : STATIC_CALL_TX_ORIGIN_RINKEBY_ADDRESS,
        staticExtradata: encodeCall(
          getMethod(StaticCheckTxOrigin, 'succeedIfTxOriginMatchesHardcodedAddress'),
          []),
      }
    } else {
      // Noop - no checks
      return {
        staticTarget: NULL_ADDRESS,
        staticExtradata: '0x',
      }
    }
  }

  public async _makeBundleBuyOrder(
      { assets, collection, quantities, accountAddress, startAmount, expirationTime = 0, paymentTokenAddress, extraBountyBasisPoints = 0, sellOrder, referrerAddress }:
      { assets: Asset[];
        collection?: { slug: string };
        quantities: number[];
        accountAddress: string;
        startAmount: number;
        expirationTime: number;
        paymentTokenAddress: string;
        extraBountyBasisPoints: number;
        sellOrder?: UnhashedOrder;
        referrerAddress?: string; }
    ): Promise<UnhashedOrder> {

    accountAddress = validateAndFormatWalletAddress(this.web3, accountAddress)
    const quantityBNs = quantities.map((quantity, i) => WyvernProtocol.toBaseUnitAmount(makeBigNumber(quantity), assets[i].decimals || 0))
    const bundle = getWyvernBundle(assets, assets.map(a => this._getSchema(a.schemaName)), quantityBNs)
    const orderedSchemas = bundle.schemas.map(name => this._getSchema(name))

    const taker = sellOrder
      ? sellOrder.maker
      : NULL_ADDRESS

    // If all assets are for the same collection, use its fees
    const asset = collection
      ? await this.api.getAsset(assets[0])
      : undefined
    const { totalBuyerFeeBasisPoints,
            totalSellerFeeBasisPoints } = await this.computeFees({ asset, extraBountyBasisPoints, side: OrderSide.Buy })

    const {
      makerRelayerFee,
      takerRelayerFee,
      makerProtocolFee,
      takerProtocolFee,
      makerReferrerFee,
      feeRecipient,
      feeMethod
    } = this._getBuyFeeParameters(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, sellOrder)

    const { calldata, replacementPattern } = encodeAtomicizedBuy(orderedSchemas, bundle.assets, accountAddress, this._wyvernProtocol, this._networkName)

    const { basePrice, extra, paymentToken } = await this._getPriceParameters(OrderSide.Buy, paymentTokenAddress, expirationTime, startAmount)
    const times = this._getTimeParameters(expirationTime)

    return {
      exchange: WyvernProtocol.getExchangeContractAddress(this._networkName),
      maker: accountAddress,
      taker,
      quantity: makeBigNumber(1),
      makerRelayerFee,
      takerRelayerFee,
      makerProtocolFee,
      takerProtocolFee,
      makerReferrerFee, // TODO use buyerBountyBPS
      waitingForBestCounterOrder: false,
      feeMethod,
      feeRecipient,
      side: OrderSide.Buy,
      saleKind: SaleKind.FixedPrice,
      target: WyvernProtocol.getAtomicizerContractAddress(this._networkName),
      howToCall: HowToCall.DelegateCall, // required DELEGATECALL to library for atomicizer
      calldata,
      replacementPattern,
      staticTarget: NULL_ADDRESS,
      staticExtradata: '0x',
      paymentToken,
      basePrice,
      extra,
      listingTime: times.listingTime,
      expirationTime: times.expirationTime,
      salt: WyvernProtocol.generatePseudoRandomSalt(),
      metadata: {
        bundle,
        referrerAddress
      }
    }
  }

  public async _makeBundleSellOrder(
      { bundleName, bundleDescription, bundleExternalLink, assets, collection, quantities, accountAddress, startAmount, endAmount, listingTime, expirationTime, waitForHighestBid, englishAuctionReservePrice = 0, paymentTokenAddress, extraBountyBasisPoints, buyerAddress }:
      { bundleName: string;
        bundleDescription?: string;
        bundleExternalLink?: string;
        assets: Asset[];
        collection?: { slug: string };
        quantities: number[];
        accountAddress: string;
        startAmount: number;
        endAmount?: number;
        listingTime?: number;
        expirationTime: number;
        waitForHighestBid: boolean;
        englishAuctionReservePrice?: number;
        paymentTokenAddress: string;
        extraBountyBasisPoints: number;
        buyerAddress: string; }
    ): Promise<UnhashedOrder> {

    accountAddress = validateAndFormatWalletAddress(this.web3, accountAddress)
    const quantityBNs = quantities.map((quantity, i) => WyvernProtocol.toBaseUnitAmount(makeBigNumber(quantity), assets[i].decimals || 0))
    const bundle = getWyvernBundle(assets, assets.map(a => this._getSchema(a.schemaName)), quantityBNs)
    const orderedSchemas = bundle.schemas.map(name => this._getSchema(name))
    bundle.name = bundleName
    bundle.description = bundleDescription
    bundle.external_link = bundleExternalLink

    // If all assets are for the same collection, use its fees
    const asset = collection
      ? await this.api.getAsset(assets[0])
      : undefined
    const {
      totalSellerFeeBasisPoints,
      totalBuyerFeeBasisPoints,
      sellerBountyBasisPoints } = await this.computeFees({ asset, side: OrderSide.Sell, extraBountyBasisPoints })

    const { calldata, replacementPattern } = encodeAtomicizedSell(orderedSchemas, bundle.assets, accountAddress, this._wyvernProtocol, this._networkName)

    const { basePrice, extra, paymentToken, reservePrice } = await this._getPriceParameters(OrderSide.Sell, paymentTokenAddress, expirationTime, startAmount, endAmount, waitForHighestBid, englishAuctionReservePrice)
    const times = this._getTimeParameters(expirationTime, listingTime, waitForHighestBid)

    const orderSaleKind = endAmount != null && endAmount !== startAmount
      ? SaleKind.DutchAuction
      : SaleKind.FixedPrice

    const {
      makerRelayerFee,
      takerRelayerFee,
      makerProtocolFee,
      takerProtocolFee,
      makerReferrerFee,
      feeRecipient
    } = this._getSellFeeParameters(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, waitForHighestBid, sellerBountyBasisPoints)

    return {
      exchange: WyvernProtocol.getExchangeContractAddress(this._networkName),
      maker: accountAddress,
      taker: buyerAddress,
      quantity: makeBigNumber(1),
      makerRelayerFee,
      takerRelayerFee,
      makerProtocolFee,
      takerProtocolFee,
      makerReferrerFee,
      waitingForBestCounterOrder: waitForHighestBid,
      englishAuctionReservePrice: reservePrice ? makeBigNumber(reservePrice) : undefined,
      feeMethod: FeeMethod.SplitFee,
      feeRecipient,
      side: OrderSide.Sell,
      saleKind: orderSaleKind,
      target: WyvernProtocol.getAtomicizerContractAddress(this._networkName),
      howToCall: HowToCall.DelegateCall, // required DELEGATECALL to library for atomicizer
      calldata,
      replacementPattern,
      staticTarget: NULL_ADDRESS,
      staticExtradata: '0x',
      paymentToken,
      basePrice,
      extra,
      listingTime: times.listingTime,
      expirationTime: times.expirationTime,
      salt: WyvernProtocol.generatePseudoRandomSalt(),
      metadata: {
        bundle
      }
    }
  }

  public _makeMatchingOrder(
      { order, accountAddress, recipientAddress }:
      { order: UnsignedOrder;
        accountAddress: string;
        recipientAddress: string; }
    ): UnsignedOrder {

    accountAddress = validateAndFormatWalletAddress(this.web3, accountAddress)
    recipientAddress = validateAndFormatWalletAddress(this.web3, recipientAddress)

    const computeOrderParams = () => {
      if ('asset' in order.metadata) {
        const schema = this._getSchema(order.metadata.schema)
        return order.side == OrderSide.Buy
          ? encodeSell(schema, order.metadata.asset, recipientAddress)
          : encodeBuy(schema, order.metadata.asset, recipientAddress)
      } else if ('bundle' in order.metadata) {
        // We're matching a bundle order
        const bundle = order.metadata.bundle
        const orderedSchemas = bundle.schemas
          ? bundle.schemas.map(schemaName => this._getSchema(schemaName))
          // Backwards compat:
          : bundle.assets.map(() => this._getSchema(
              'schema' in order.metadata
              ? order.metadata.schema
              : undefined))
        const atomicized = order.side == OrderSide.Buy
          ? encodeAtomicizedSell(orderedSchemas, order.metadata.bundle.assets, recipientAddress, this._wyvernProtocol, this._networkName)
          : encodeAtomicizedBuy(orderedSchemas, order.metadata.bundle.assets, recipientAddress, this._wyvernProtocol, this._networkName)
        return {
          target: WyvernProtocol.getAtomicizerContractAddress(this._networkName),
          calldata: atomicized.calldata,
          replacementPattern: atomicized.replacementPattern
        }
      } else {
        throw new Error('Invalid order metadata')
      }
    }

    const { target, calldata, replacementPattern } = computeOrderParams()
    const times = this._getTimeParameters(0)
    // Compat for matching buy orders that have fee recipient still on them
    const feeRecipient = order.feeRecipient == NULL_ADDRESS
      ? OPENSEA_FEE_RECIPIENT
      : NULL_ADDRESS

    const matchingOrder: UnhashedOrder = {
      exchange: order.exchange,
      maker: accountAddress,
      taker: order.maker,
      quantity: order.quantity,
      makerRelayerFee: order.makerRelayerFee,
      takerRelayerFee: order.takerRelayerFee,
      makerProtocolFee: order.makerProtocolFee,
      takerProtocolFee: order.takerProtocolFee,
      makerReferrerFee: order.makerReferrerFee,
      waitingForBestCounterOrder: false,
      feeMethod: order.feeMethod,
      feeRecipient,
      side: (order.side + 1) % 2,
      saleKind: SaleKind.FixedPrice,
      target,
      howToCall: order.howToCall,
      calldata,
      replacementPattern,
      staticTarget: NULL_ADDRESS,
      staticExtradata: '0x',
      paymentToken: order.paymentToken,
      basePrice: order.basePrice,
      extra: makeBigNumber(0),
      listingTime: times.listingTime,
      expirationTime: times.expirationTime,
      salt: WyvernProtocol.generatePseudoRandomSalt(),
      metadata: order.metadata,
    }

    return {
      ...matchingOrder,
      hash: getOrderHash(matchingOrder)
    }
  }

  /**
   * Validate against Wyvern that a buy and sell order can match
   * @param param0 __namedParamters Object
   * @param buy The buy order to validate
   * @param sell The sell order to validate
   * @param accountAddress Address for the user's wallet
   * @param shouldValidateBuy Whether to validate the buy order individually.
   * @param shouldValidateSell Whether to validate the sell order individually.
   * @param retries How many times to retry if validation fails
   */
  public async _validateMatch(
      { buy, sell, accountAddress, shouldValidateBuy = false, shouldValidateSell = false }:
      { buy: Order;
        sell: Order;
        accountAddress: string;
        shouldValidateBuy?: boolean;
        shouldValidateSell?: boolean; },
      retries = 1
    ): Promise<boolean> {

    try {
      if (shouldValidateBuy) {
        const buyValid = await this._validateOrder(buy)
        this.logger(`Buy order is valid: ${buyValid}`)

        if (!buyValid) {
          throw new Error('Invalid buy order. It may have recently been removed. Please refresh the page and try again!')
        }
      }

      if (shouldValidateSell) {
        const sellValid = await this._validateOrder(sell)
        this.logger(`Sell order is valid: ${sellValid}`)

        if (!sellValid) {
          throw new Error('Invalid sell order. It may have recently been removed. Please refresh the page and try again!')
        }
      }

      const canMatch = await requireOrdersCanMatch(this._getClientsForRead(retries).wyvernProtocol, { buy, sell, accountAddress })
      this.logger(`Orders matching: ${canMatch}`)

      const calldataCanMatch = await requireOrderCalldataCanMatch(this._getClientsForRead(retries).wyvernProtocol, { buy, sell })
      this.logger(`Order calldata matching: ${calldataCanMatch}`)

      return true

    } catch (error) {

      if (retries <= 0) {
        throw new Error(`Error matching this listing: ${error.message}. Please contact the maker or try again later!`)
      }
      await delay(500)
      return await this._validateMatch({ buy, sell, accountAddress, shouldValidateBuy, shouldValidateSell }, retries - 1)
    }
  }

  // For creating email whitelists on order takers
  public async _createEmailWhitelistEntry(
      { order, buyerEmail }:
      { order: UnhashedOrder;
        buyerEmail: string }
    ) {
    const asset = 'asset' in order.metadata
      ? order.metadata.asset
      : undefined
    if (!asset || !asset.id) {
      throw new Error("Whitelisting only available for non-fungible assets.")
    }
    await this.api.postAssetWhitelist(asset.address, asset.id, buyerEmail)
  }

  // Throws
  public async _sellOrderValidationAndApprovals(
      { order, accountAddress }:
      { order: UnhashedOrder;
        accountAddress: string }
    ) {

    const wyAssets = 'bundle' in order.metadata
      ? order.metadata.bundle.assets
      : order.metadata.asset
        ? [order.metadata.asset]
        : []
    const schemaNames = 'bundle' in order.metadata && 'schemas' in order.metadata.bundle
      ? order.metadata.bundle.schemas
      : 'schema' in order.metadata
        ? [order.metadata.schema]
        : []
    const tokenAddress = order.paymentToken

    await this._approveAll({schemaNames, wyAssets, accountAddress})

    // For fulfilling bids,
    // need to approve access to fungible token because of the way fees are paid
    // This can be done at a higher level to show UI
    if (tokenAddress != NULL_ADDRESS) {
      const minimumAmount = makeBigNumber(order.basePrice)
      await this.approveFungibleToken({ accountAddress, tokenAddress, minimumAmount })
    }

    // Check sell parameters
    const sellValid = await this._wyvernProtocolReadOnly.wyvernExchange.validateOrderParameters_.callAsync([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken],
      [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt],
      order.feeMethod,
      order.side,
      order.saleKind,
      order.howToCall,
      order.calldata,
      order.replacementPattern,
      order.staticExtradata,
      { from: accountAddress })
    if (!sellValid) {
      console.error(order)
      throw new Error(`Failed to validate sell order parameters. Make sure you're on the right network!`)
    }
  }

  /**
   * Instead of signing an off-chain order, you can approve an order
   * with on on-chain transaction using this method
   * @param order Order to approve
   * @returns Transaction hash of the approval transaction
   */
  public async _approveOrder(order: UnsignedOrder) {
    const accountAddress = order.maker
    const includeInOrderBook = true

    this._dispatch(EventType.ApproveOrder, { order, accountAddress })

    const transactionHash = await this._wyvernProtocol.wyvernExchange.approveOrder_.sendTransactionAsync(
      [order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken],
      [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt],
      order.feeMethod,
      order.side,
      order.saleKind,
      order.howToCall,
      order.calldata,
      order.replacementPattern,
      order.staticExtradata,
      includeInOrderBook,
      { from: accountAddress }
    )

    await this._confirmTransaction(transactionHash.toString(), EventType.ApproveOrder, "Approving order", async () => {
      const isApproved = await this._validateOrder(order)
      return isApproved
    })

    return transactionHash
  }

  public async _validateOrder(order: Order): Promise<boolean> {

    const isValid = await this._wyvernProtocolReadOnly.wyvernExchange.validateOrder_.callAsync(
      [order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken],
      [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt],
      order.feeMethod,
      order.side,
      order.saleKind,
      order.howToCall,
      order.calldata,
      order.replacementPattern,
      order.staticExtradata,
      order.v || 0,
      order.r || NULL_BLOCK_HASH,
      order.s || NULL_BLOCK_HASH)

    return isValid

  }

  public async _approveAll(
      { schemaNames, wyAssets, accountAddress, proxyAddress }:
      { schemaNames: WyvernSchemaName[];
        wyAssets: WyvernAsset[];
        accountAddress: string;
        proxyAddress?: string }
    ) {

    proxyAddress = proxyAddress || await this._getProxy(accountAddress) || undefined
    if (!proxyAddress) {
      proxyAddress = await this._initializeProxy(accountAddress)
    }
    const contractsWithApproveAll: Set<string> = new Set()

    return Promise.all(wyAssets.map(async (wyAsset, i) => {
      const schemaName = schemaNames[i]
      // Verify that the taker owns the asset
      let isOwner
      try {
        isOwner = await this._ownsAssetOnChain({
          accountAddress,
          proxyAddress,
          wyAsset,
          schemaName
        })
      } catch (error) {
        // let it through for assets we don't support yet
        isOwner = true
      }
      if (!isOwner) {
        const minAmount = 'quantity' in wyAsset
          ? wyAsset.quantity
          : 1
        console.error(`Failed on-chain ownership check: ${accountAddress} on ${schemaName}:`, wyAsset)
        throw new Error(`You don't own enough to do that (${minAmount} base units of ${wyAsset.address}${
            wyAsset.id ? (" token " + wyAsset.id) : ''
          })`)
      }
      switch (schemaName) {
        case WyvernSchemaName.ERC721:
        case WyvernSchemaName.ERC1155:
        case WyvernSchemaName.LegacyEnjin:
        case WyvernSchemaName.ENSShortNameAuction:
          // Handle NFTs and SFTs
          const wyNFTAsset = wyAsset as WyvernNFTAsset
          return await this.approveSemiOrNonFungibleToken({
            tokenId: wyNFTAsset.id.toString(),
            tokenAddress: wyNFTAsset.address,
            accountAddress,
            proxyAddress,
            schemaName,
            skipApproveAllIfTokenAddressIn: contractsWithApproveAll
          })
        case WyvernSchemaName.ERC20:
          // Handle FTs
          const wyFTAsset = wyAsset as WyvernFTAsset
          if (contractsWithApproveAll.has(wyFTAsset.address)) {
            // Return null to indicate no tx occurred
            return null
          }
          contractsWithApproveAll.add(wyFTAsset.address)
          return await this.approveFungibleToken({
            tokenAddress: wyFTAsset.address,
            accountAddress,
            proxyAddress
          })
        // For other assets, including contracts:
        // Send them to the user's proxy
        // if (where != WyvernAssetLocation.Proxy) {
        //   return this.transferOne({
        //     schemaName: schema.name,
        //     asset: wyAsset,
        //     isWyvernAsset: true,
        //     fromAddress: accountAddress,
        //     toAddress: proxy
        //   })
        // }
        // return true
      }
    }))
  }

  // Throws
  public async _buyOrderValidationAndApprovals(
      { order, counterOrder, accountAddress }:
      { order: UnhashedOrder; counterOrder?: Order; accountAddress: string }
    ) {
    const tokenAddress = order.paymentToken

    if (tokenAddress != NULL_ADDRESS) {
      const balance = await this.getTokenBalance({ accountAddress, tokenAddress })

      /* NOTE: no buy-side auctions for now, so sell.saleKind === 0 */
      let minimumAmount = makeBigNumber(order.basePrice)
      if (counterOrder) {
        minimumAmount = await this._getRequiredAmountForTakingSellOrder(counterOrder)
      }

      // Check WETH balance
      if (balance.toNumber() < minimumAmount.toNumber()) {
        if (tokenAddress == WyvernSchemas.tokens[this._networkName].canonicalWrappedEther.address) {
          throw new Error('Insufficient balance. You may need to wrap Ether.')
        } else {
          throw new Error('Insufficient balance.')
        }
      }

      // Check token approval
      // This can be done at a higher level to show UI
      await this.approveFungibleToken({ accountAddress, tokenAddress, minimumAmount })
    }

    // Check order formation
    const buyValid = await this._wyvernProtocolReadOnly.wyvernExchange.validateOrderParameters_.callAsync([order.exchange, order.maker, order.taker, order.feeRecipient, order.target, order.staticTarget, order.paymentToken],
      [order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt],
      order.feeMethod,
      order.side,
      order.saleKind,
      order.howToCall,
      order.calldata,
      order.replacementPattern,
      order.staticExtradata,
      { from: accountAddress })
    if (!buyValid) {
      console.error(order)
      throw new Error(`Failed to validate buy order parameters. Make sure you're on the right network!`)
    }
  }

  /**
   * Check if an account, or its proxy, owns an asset on-chain
   * @param accountAddress Account address for the wallet
   * @param proxyAddress Proxy address for the account
   * @param wyAsset asset to check. If fungible, the `quantity` attribute will be the minimum amount to own
   * @param schemaName WyvernSchemaName for the asset
   */
  public async _ownsAssetOnChain(
      { accountAddress, proxyAddress, wyAsset, schemaName }:
      { accountAddress: string; proxyAddress?: string | null; wyAsset: WyvernAsset; schemaName: WyvernSchemaName }
    ): Promise<boolean> {

    const asset: Asset = {
      tokenId: wyAsset.id || null,
      tokenAddress: wyAsset.address,
      schemaName
    }

    const minAmount = new BigNumber('quantity' in wyAsset
      ? wyAsset.quantity
      : 1)

    const accountBalance = await this.getAssetBalance({ accountAddress, asset })
    if (accountBalance.greaterThanOrEqualTo(minAmount)) {
      return true
    }

    proxyAddress = proxyAddress || await this._getProxy(accountAddress)
    if (proxyAddress) {
      const proxyBalance = await this.getAssetBalance({ accountAddress: proxyAddress, asset })
      if (proxyBalance.greaterThanOrEqualTo(minAmount)) {
        return true
      }
    }

    return false
  }

  public _getBuyFeeParameters(totalBuyerFeeBasisPoints: number, totalSellerFeeBasisPoints: number, sellOrder?: UnhashedOrder) {

    this._validateFees(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints)

    let makerRelayerFee
    let takerRelayerFee

    if (sellOrder) {
      // Use the sell order's fees to ensure compatiblity and force the order
      // to only be acceptable by the sell order maker.
      // Swap maker/taker depending on whether it's an English auction (taker)
      // TODO add extraBountyBasisPoints when making bidder bounties
      makerRelayerFee = sellOrder.waitingForBestCounterOrder
        ? makeBigNumber(sellOrder.makerRelayerFee)
        : makeBigNumber(sellOrder.takerRelayerFee)
      takerRelayerFee = sellOrder.waitingForBestCounterOrder
        ? makeBigNumber(sellOrder.takerRelayerFee)
        : makeBigNumber(sellOrder.makerRelayerFee)
    } else {
      makerRelayerFee = makeBigNumber(totalBuyerFeeBasisPoints)
      takerRelayerFee = makeBigNumber(totalSellerFeeBasisPoints)
    }

    return {
      makerRelayerFee,
      takerRelayerFee,
      makerProtocolFee: makeBigNumber(0),
      takerProtocolFee: makeBigNumber(0),
      makerReferrerFee: makeBigNumber(0), // TODO use buyerBountyBPS
      feeRecipient: OPENSEA_FEE_RECIPIENT,
      feeMethod: FeeMethod.SplitFee
    }
  }

  public _getSellFeeParameters(totalBuyerFeeBasisPoints: number, totalSellerFeeBasisPoints: number, waitForHighestBid: boolean, sellerBountyBasisPoints = 0) {

    this._validateFees(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints)
    // Use buyer as the maker when it's an English auction, so Wyvern sets prices correctly
    const feeRecipient = waitForHighestBid
      ? NULL_ADDRESS
      : OPENSEA_FEE_RECIPIENT

    // Swap maker/taker fees when it's an English auction,
    // since these sell orders are takers not makers
    const makerRelayerFee = waitForHighestBid
      ? makeBigNumber(totalBuyerFeeBasisPoints)
      : makeBigNumber(totalSellerFeeBasisPoints)
    const takerRelayerFee = waitForHighestBid
      ? makeBigNumber(totalSellerFeeBasisPoints)
      : makeBigNumber(totalBuyerFeeBasisPoints)

    return {
      makerRelayerFee,
      takerRelayerFee,
      makerProtocolFee: makeBigNumber(0),
      takerProtocolFee: makeBigNumber(0),
      makerReferrerFee: makeBigNumber(sellerBountyBasisPoints),
      feeRecipient,
      feeMethod: FeeMethod.SplitFee
    }
  }

  /**
   * Validate fee parameters
   * @param totalBuyerFeeBasisPoints Total buyer fees
   * @param totalSellerFeeBasisPoints Total seller fees
   */
  private _validateFees(totalBuyerFeeBasisPoints: number, totalSellerFeeBasisPoints: number) {
    const maxFeePercent = INVERSE_BASIS_POINT / 100

    if (totalBuyerFeeBasisPoints > INVERSE_BASIS_POINT
        || totalSellerFeeBasisPoints > INVERSE_BASIS_POINT) {
      throw new Error(`Invalid buyer/seller fees: must be less than ${maxFeePercent}%`)
    }

    if (totalBuyerFeeBasisPoints < 0
        || totalSellerFeeBasisPoints < 0) {
      throw new Error(`Invalid buyer/seller fees: must be at least 0%`)
    }
  }

  /**
   * Get the listing and expiration time paramters for a new order
   * @param expirationTimestamp Timestamp to expire the order (in seconds), or 0 for non-expiring
   * @param listingTimestamp Timestamp to start the order (in seconds), or undefined to start it now
   * @param waitingForBestCounterOrder Whether this order should be hidden until the best match is found
   */
  private _getTimeParameters(
      expirationTimestamp: number,
      listingTimestamp?: number,
      waitingForBestCounterOrder = false
    ) {

    // Validation
    const minExpirationTimestamp = Math.round(Date.now() / 1000 + MIN_EXPIRATION_SECONDS)
    const minListingTimestamp = Math.round(Date.now() / 1000)
    if (expirationTimestamp != 0 && expirationTimestamp < minExpirationTimestamp) {
      throw new Error(`Expiration time must be at least ${MIN_EXPIRATION_SECONDS} seconds from now, or zero (non-expiring).`)
    }
    if (listingTimestamp && listingTimestamp < minListingTimestamp) {
      throw new Error('Listing time cannot be in the past.')
    }
    if (listingTimestamp && expirationTimestamp != 0 && listingTimestamp >= expirationTimestamp) {
      throw new Error('Listing time must be before the expiration time.')
    }
    if (waitingForBestCounterOrder && expirationTimestamp == 0) {
      throw new Error('English auctions must have an expiration time.')
    }
    if (waitingForBestCounterOrder && listingTimestamp) {
      throw new Error(`Cannot schedule an English auction for the future.`)
    }
    if (parseInt(expirationTimestamp.toString()) != expirationTimestamp) {
      throw new Error(`Expiration timestamp must be a whole number of seconds`)
    }

    if (waitingForBestCounterOrder) {
      listingTimestamp = expirationTimestamp
      // Expire one week from now, to ensure server can match it
      // Later, this will expire closer to the listingTime
      expirationTimestamp = expirationTimestamp + ORDER_MATCHING_LATENCY_SECONDS
    } else {
      // Small offset to account for latency
      listingTimestamp = listingTimestamp || Math.round(Date.now() / 1000 - 100)
    }

    return {
      listingTime: makeBigNumber(listingTimestamp),
      expirationTime: makeBigNumber(expirationTimestamp),
    }
  }

  /**
   * Compute the `basePrice` and `extra` parameters to be used to price an order.
   * Also validates the expiration time and auction type.
   * @param tokenAddress Address of the ERC-20 token to use for trading.
   * Use the null address for ETH
   * @param expirationTime When the auction expires, or 0 if never.
   * @param startAmount The base value for the order, in the token's main units (e.g. ETH instead of wei)
   * @param endAmount The end value for the order, in the token's main units (e.g. ETH instead of wei). If unspecified, the order's `extra` attribute will be 0
   */
  private async _getPriceParameters(
      orderSide: OrderSide,
      tokenAddress: string,
      expirationTime: number,
      startAmount: number,
      endAmount ?: number,
      waitingForBestCounterOrder = false,
      englishAuctionReservePrice?: number,
    ) {

    const priceDiff = endAmount != null
      ? startAmount - endAmount
      : 0
    const paymentToken = tokenAddress.toLowerCase()
    const isEther = tokenAddress == NULL_ADDRESS
    const { tokens } = await this.api.getPaymentTokens({ address: paymentToken })
    const token = tokens[0]

    // Validation
    if (isNaN(startAmount) || startAmount == null || startAmount < 0) {
      throw new Error(`Starting price must be a number >= 0`)
    }
    if (!isEther && !token) {
      throw new Error(`No ERC-20 token found for '${paymentToken}'`)
    }
    if (isEther && waitingForBestCounterOrder) {
      throw new Error(`English auctions must use wrapped ETH or an ERC-20 token.`)
    }
    if (isEther && orderSide === OrderSide.Buy) {
      throw new Error(`Offers must use wrapped ETH or an ERC-20 token.`)
    }
    if (priceDiff < 0) {
      throw new Error('End price must be less than or equal to the start price.')
    }
    if (priceDiff > 0 && expirationTime == 0) {
      throw new Error('Expiration time must be set if order will change in price.')
    }
    if (englishAuctionReservePrice && !waitingForBestCounterOrder) {
      throw new Error('Reserve prices may only be set on English auctions.')
    }
    if (englishAuctionReservePrice && (englishAuctionReservePrice < startAmount)) {
      throw new Error('Reserve price must be greater than or equal to the start amount.')
    }

    // Note: WyvernProtocol.toBaseUnitAmount(makeBigNumber(startAmount), token.decimals)
    // will fail if too many decimal places, so special-case ether
    const basePrice = isEther
      ? makeBigNumber(this.web3.toWei(startAmount, 'ether')).round()
      : WyvernProtocol.toBaseUnitAmount(makeBigNumber(startAmount), token.decimals)

    const extra = isEther
      ? makeBigNumber(this.web3.toWei(priceDiff, 'ether')).round()
      : WyvernProtocol.toBaseUnitAmount(makeBigNumber(priceDiff), token.decimals)

    const reservePrice = englishAuctionReservePrice
      ? isEther
        ? makeBigNumber(this.web3.toWei(englishAuctionReservePrice, 'ether')).round()
        : WyvernProtocol.toBaseUnitAmount(makeBigNumber(englishAuctionReservePrice), token.decimals)
      : undefined

    return { basePrice, extra, paymentToken, reservePrice }
  }

  private _getMetadata(order: Order, referrerAddress?: string) {
    const referrer = referrerAddress || order.metadata.referrerAddress
    if (referrer && isValidAddress(referrer)) {
      return referrer
    }
    return undefined
  }

  private async _atomicMatch(
      { buy, sell, accountAddress, metadata = NULL_BLOCK_HASH }:
      { buy: Order; sell: Order; accountAddress: string; metadata?: string }
    ) {
    let value
    let shouldValidateBuy = true
    let shouldValidateSell = true

    if (sell.maker.toLowerCase() == accountAddress.toLowerCase()) {
      // USER IS THE SELLER, only validate the buy order
      await this._sellOrderValidationAndApprovals({ order: sell, accountAddress })
      shouldValidateSell = false

    } else if (buy.maker.toLowerCase() == accountAddress.toLowerCase()) {
      // USER IS THE BUYER, only validate the sell order
      await this._buyOrderValidationAndApprovals({ order: buy, counterOrder: sell, accountAddress })
      shouldValidateBuy = false

      // If using ETH to pay, set the value of the transaction to the current price
      if (buy.paymentToken == NULL_ADDRESS) {
        value = await this._getRequiredAmountForTakingSellOrder(sell)
      }
    } else {
      // User is neither - matching service
    }

    await this._validateMatch({ buy, sell, accountAddress, shouldValidateBuy, shouldValidateSell })

    this._dispatch(EventType.MatchOrders, { buy, sell, accountAddress, matchMetadata: metadata })

    let txHash
    const txnData: any = { from: accountAddress, value }
    const args: WyvernAtomicMatchParameters = [
      [buy.exchange, buy.maker, buy.taker, buy.feeRecipient, buy.target,
      buy.staticTarget, buy.paymentToken, sell.exchange, sell.maker, sell.taker, sell.feeRecipient, sell.target, sell.staticTarget, sell.paymentToken],
      [buy.makerRelayerFee, buy.takerRelayerFee, buy.makerProtocolFee, buy.takerProtocolFee, buy.basePrice, buy.extra, buy.listingTime, buy.expirationTime, buy.salt, sell.makerRelayerFee, sell.takerRelayerFee, sell.makerProtocolFee, sell.takerProtocolFee, sell.basePrice, sell.extra, sell.listingTime, sell.expirationTime, sell.salt],
      [buy.feeMethod, buy.side, buy.saleKind, buy.howToCall, sell.feeMethod, sell.side, sell.saleKind, sell.howToCall],
      buy.calldata,
      sell.calldata,
      buy.replacementPattern,
      sell.replacementPattern,
      buy.staticExtradata,
      sell.staticExtradata,
      [
        buy.v || 0,
        sell.v || 0
      ],
      [
        buy.r || NULL_BLOCK_HASH,
        buy.s || NULL_BLOCK_HASH,
        sell.r || NULL_BLOCK_HASH,
        sell.s || NULL_BLOCK_HASH,
        metadata
      ]
    ]

    // Estimate gas first
    try {
      // Typescript splat doesn't typecheck
      const gasEstimate = await this._wyvernProtocolReadOnly.wyvernExchange.atomicMatch_.estimateGasAsync(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], txnData)

      txnData.gas = this._correctGasAmount(gasEstimate)

    } catch (error) {
      console.error(`Failed atomic match with args: `, args, error)
      throw new Error(`Oops, the Ethereum network rejected this transaction :( The OpenSea devs have been alerted, but this problem is typically due an item being locked or untransferrable. The exact error was "${error.message.substr(0, MAX_ERROR_LENGTH)}..."`)
    }

    // Then do the transaction
    try {
      this.logger(`Fulfilling order with gas set to ${txnData.gas}`)
      txHash = await this._wyvernProtocol.wyvernExchange.atomicMatch_.sendTransactionAsync(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], txnData)
    } catch (error) {
      console.error(error)

      this._dispatch(EventType.TransactionDenied, { error, buy, sell, accountAddress, matchMetadata: metadata })

      throw new Error(`Failed to authorize transaction: "${
        error.message
          ? error.message
          : 'user denied'
        }..."`)
    }
    return txHash
  }

  private async _getRequiredAmountForTakingSellOrder(sell: Order) {
    const currentPrice = await this.getCurrentPrice(sell)
    const estimatedPrice = estimateCurrentPrice(sell)

    const maxPrice = BigNumber.max(currentPrice, estimatedPrice)

    // TODO Why is this not always a big number?
    sell.takerRelayerFee = makeBigNumber(sell.takerRelayerFee)
    const feePercentage = sell.takerRelayerFee.div(INVERSE_BASIS_POINT)
    const fee = feePercentage.times(maxPrice)
    return fee.plus(maxPrice).ceil()
  }

  private async _authorizeOrder(
      order: UnsignedOrder
    ): Promise<ECSignature | null> {
    const message = order.hash
    const signerAddress = order.maker

    this._dispatch(EventType.CreateOrder, { order, accountAddress: order.maker })

    const makerIsSmartContract = await isContractAddress(this.web3, signerAddress)

    try {
      if (makerIsSmartContract) {
        // The web3 provider is probably a smart contract wallet.
        // Fallback to on-chain approval.
        await this._approveOrder(order)
        return null
      } else {
        return await personalSignAsync(this.web3, message, signerAddress)
      }
    } catch (error) {
      this._dispatch(EventType.OrderDenied, { order, accountAddress: signerAddress })
      throw error
    }
  }

  private _getSchema(schemaName?: WyvernSchemaName): Schema<any> {
    const schemaName_ = schemaName || WyvernSchemaName.ERC721
    const schema = WyvernSchemas.schemas[this._networkName].filter(s => s.name == schemaName_)[0]

    if (!schema) {
      throw new Error(`Trading for this asset (${schemaName_}) is not yet supported. Please contact us or check back later!`)
    }
    return schema
  }

  private _dispatch(event: EventType, data: EventData) {
    this._emitter.emit(event, data)
  }

  /**
   * Get the clients to use for a read call
   * @param retries current retry value
   */
  private _getClientsForRead(
      retries = 1
    ): { web3: Web3, wyvernProtocol: WyvernProtocol } {
    if (retries > 0) {
      // Use injected provider by default
      return {
        'web3': this.web3,
        'wyvernProtocol': this._wyvernProtocol
      }
    } else {
      // Use provided provider as fallback
      return {
        'web3': this.web3ReadOnly,
        'wyvernProtocol': this._wyvernProtocolReadOnly
      }
    }
  }

  private async _confirmTransaction(transactionHash: string, event: EventType, description: string, testForSuccess?: () => Promise<boolean>): Promise<void> {

    const transactionEventData = { transactionHash, event }
    this.logger(`Transaction started: ${description}`)

    if (transactionHash == NULL_BLOCK_HASH) {
      // This was a smart contract wallet that doesn't know the transaction
      this._dispatch(EventType.TransactionCreated, { event })

      if (!testForSuccess) {
        // Wait if test not implemented
        this.logger(`Unknown action, waiting 1 minute: ${description}`)
        await delay(60 * 1000)
        return
      }

      return await this._pollCallbackForConfirmation(event, description, testForSuccess)
    }

    // Normal wallet
    try {
      this._dispatch(EventType.TransactionCreated, transactionEventData)
      await confirmTransaction(this.web3, transactionHash)
      this.logger(`Transaction succeeded: ${description}`)
      this._dispatch(EventType.TransactionConfirmed, transactionEventData)
    } catch (error) {
      this.logger(`Transaction failed: ${description}`)
      this._dispatch(EventType.TransactionFailed, {
        ...transactionEventData, error
      })
      throw error
    }
  }

  private async _pollCallbackForConfirmation(event: EventType, description: string, testForSuccess: () => Promise<boolean>): Promise<void> {

    return new Promise<void>(async (resolve, reject) => {

      const initialRetries = 60

      const testResolve: (r: number) => Promise<void> = async retries => {

        const wasSuccessful = await testForSuccess()
        if (wasSuccessful) {
          this.logger(`Transaction succeeded: ${description}`)
          this._dispatch(EventType.TransactionConfirmed, { event })
          return resolve()
        } else if (retries <= 0) {
          return reject()
        }

        if (retries % 10 == 0) {
          this.logger(`Tested transaction ${initialRetries - retries + 1} times: ${description}`)
        }
        await delay(5000)
        return testResolve(retries - 1)
      }

      return testResolve(initialRetries)
    })
  }
}

'''
'''--- src/types.ts ---
import BigNumber from 'bignumber.js'
import * as Web3 from 'web3'
import {
  Network,
  HowToCall,
  // Note: Wyvern SaleKind is wrong!
  ECSignature,
  Order as WyvernOrder
} from 'wyvern-js/lib/types'

import { Token } from 'wyvern-schemas/dist/types'

export {
  Network,
  HowToCall,
  ECSignature
}

/**
 * Events emitted by the SDK. There are five types:
 * 1. Transaction events, which tell you when a new transaction was
 *    created, confirmed, denied, or failed.
 * 2. pre-transaction events, which are named (like "WrapEth") and indicate
 *    that Web3 is asking for a signature on a transaction that needs to occur before
 *    an order is made or fulfilled. This includes approval events and account
 *    initialization.
 * 3. Basic actions: matching, cancelling, and creating orders.
 *    The "CreateOrder" event fires when a signature is being prompted
 *    to create an off-chain order. The "OrderDenied" event fires when a signature
 *    request is denied by the user.
 * 4. The "TransferAll" event, which fires when a user is about to directly
 *    transfer one or more assets to another account
 */
export enum EventType {
  // Transactions and signature requests
  TransactionCreated = "TransactionCreated",
  TransactionConfirmed = "TransactionConfirmed",
  TransactionDenied = "TransactionDenied",
  TransactionFailed = "TransactionFailed",

  // Pre-transaction events
  InitializeAccount = "InitializeAccount",
  WrapEth = "WrapEth",
  UnwrapWeth = "UnwrapWeth",
  ApproveCurrency = "ApproveCurrency",
  ApproveAsset = "ApproveAsset",
  ApproveAllAssets = "ApproveAllAssets",
  UnapproveCurrency = "UnapproveCurrency",

  // Basic actions: matching orders, creating orders, and cancelling orders
  MatchOrders = "MatchOrders",
  CancelOrder = "CancelOrder",
  ApproveOrder = "ApproveOrder",
  CreateOrder = "CreateOrder",
  // When the signature request for an order is denied
  OrderDenied = "OrderDenied",

  // When transferring one or more assets
  TransferAll = "TransferAll",
  TransferOne = "TransferOne",

  // When wrapping or unwrapping NFTs
  WrapAssets = "WrapAssets",
  UnwrapAssets = "UnwrapAssets",
  LiquidateAssets = "LiquidateAssets",
  PurchaseAssets = "PurchaseAssets",
}

/**
 * Data that gets sent with each EventType
 */
export interface EventData {
  accountAddress?: string
  toAddress?: string
  proxyAddress?: string
  amount?: BigNumber
  contractAddress?: string
  assets?: WyvernAsset[]
  asset?: WyvernAsset

  transactionHash?: string
  event?: EventType
  error?: Error

  order?: Order | UnsignedOrder
  buy?: Order
  sell?: Order
  matchMetadata?: string
}

/**
 * OpenSea API configuration object
 * @param apiKey Optional key to use for API
 * @param networkName `Network` type to use. Defaults to `Network.Main` (mainnet)
 * @param gasPrice Default gas price to send to the Wyvern Protocol
 * @param apiBaseUrl Optional base URL to use for the API
 */
export interface OpenSeaAPIConfig {
  networkName?: Network
  apiKey?: string
  apiBaseUrl?: string
  // Sent to WyvernJS
  gasPrice?: BigNumber
}

/**
 * Wyvern order side: buy or sell.
 */
export enum OrderSide {
  Buy = 0,
  Sell = 1,
}

/**
 * Wyvern fee method
 * ProtocolFee: Charge maker fee to seller and charge taker fee to buyer.
 * SplitFee: Maker fees are deducted from the token amount that the maker receives. Taker fees are extra tokens that must be paid by the taker.
 */
export enum FeeMethod {
  ProtocolFee = 0,
  SplitFee = 1,
}

/**
 * Wyvern: type of sale. Fixed or Dutch auction
 * Note: not imported from wyvern.js because it uses
 * EnglishAuction as 1 and DutchAuction as 2
 */
export enum SaleKind {
  FixedPrice = 0,
  DutchAuction = 1,
}

/**
 * Types of asset contracts
 * Given by the asset_contract_type in the OpenSea API
 */
export enum AssetContractType {
  Fungible = 'fungible',
  SemiFungible = 'semi-fungible',
  NonFungible = 'non-fungible',
  Unknown = 'unknown',
}

// Wyvern Schemas (see https://github.com/ProjectOpenSea/wyvern-schemas)
export enum WyvernSchemaName {
  ERC20 = 'ERC20',
  ERC721 = 'ERC721',
  ERC1155 = 'ERC1155',
  LegacyEnjin = 'Enjin',
  ENSShortNameAuction = 'ENSShortNameAuction',
  // CryptoPunks = 'CryptoPunks'
}

/**
 * The NFT version that this contract uses.
 * ERC721 versions are:
 * 1.0: CryptoKitties and early 721s, which lack approve-all and
 *      have problems calling `transferFrom` from the owner's account.
 * 2.0: CryptoSaga and others that lack `transferFrom` and have
 *      `takeOwnership` instead
 * 3.0: The current OpenZeppelin standard:
 *      https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC721/ERC721.sol
 * Special cases:
 * locked: When the transfer function has been locked by the dev
 */
export enum TokenStandardVersion {
  Unsupported = 'unsupported',
  Locked = 'locked',
  Enjin = '1155-1.0',
  ERC721v1 = '1.0',
  ERC721v2 = '2.0',
  ERC721v3 = '3.0',
}

export enum WyvernAssetLocation {
  Account = 'account',
  Proxy = 'proxy',
  Other = 'other'
}

export interface WyvernNFTAsset {
  id: string
  address: string
}
export interface WyvernFTAsset {
  id?: string
  address: string
  quantity: string
}
export type WyvernAsset = WyvernNFTAsset | WyvernFTAsset

// Abstractions over Wyvern assets for bundles
export interface WyvernBundle {
  assets: WyvernAsset[]
  schemas: WyvernSchemaName[]
  name?: string
  description?: string
  external_link?: string
}

export type WyvernAtomicMatchParameters = [string[], BigNumber[], Array<(number | BigNumber)>, string, string, string, string, string, string, Array<(number | BigNumber)>, string[]]

/**
 * The OpenSea account object appended to orders, providing extra metadata, profile images and usernames
 */
export interface OpenSeaAccount {
  // Wallet address for this account
  address: string
  // Public configuration info, including "affiliate" for users who are in the OpenSea affiliate program
  config: string

  // This account's profile image - by default, randomly generated by the server
  profileImgUrl: string

  // More information explicitly set by this account's owner on OpenSea
  user: OpenSeaUser | null
}

export interface OpenSeaUser {
  // Username for this user
  username: string
}

/**
 * Simple, unannotated asset spec
 */
export interface Asset {
  // The asset's token ID, or null if ERC-20
  tokenId: string | null,
  // The asset's contract address
  tokenAddress: string,
  // The Wyvern schema name (e.g. "ERC721") for this asset
  schemaName?: WyvernSchemaName,
  // The token standard version of this asset
  version?: TokenStandardVersion,
  // Optional for ENS names
  name?: string,
  // Optional for fungible items
  decimals?: number
}

/**
 * Annotated asset contract with OpenSea metadata
 */
export interface OpenSeaAssetContract extends OpenSeaFees {
  // Name of the asset's contract
  name: string
  // Address of this contract
  address: string
  // Type of token (fungible/NFT)
  type: AssetContractType
  // Wyvern Schema Name for this contract
  schemaName: WyvernSchemaName

  // Total fee levied on sellers by this contract, in basis points
  sellerFeeBasisPoints: number
  // Total fee levied on buyers by this contract, in basis points
  buyerFeeBasisPoints: number

  // Description of the contract
  description: string
  // Contract's Etherscan / OpenSea symbol
  tokenSymbol: string
  // Image for the contract
  imageUrl: string
  // Object with stats about the contract
  stats?: object
  // Array of trait types for the contract
  traits?: object[]
  // Link to the contract's main website
  externalLink?: string
  // Link to the contract's wiki, if available
  wikiLink?: string
}

interface NumericalTraitStats {
  min: number,
  max: number
}

interface StringTraitStats {
  [key: string]: number,
}

/**
 * Annotated collection with OpenSea metadata
 */
export interface OpenSeaCollection extends OpenSeaFees {
  // Name of the collection
  name: string
  // Slug, used in URL
  slug: string
  // Accounts allowed to edit this collection
  editors: string[]
  // Whether this collection is hidden from the homepage
  hidden: boolean
  // Whether this collection is featured
  featured: boolean
  // Date collection was created
  createdDate: Date,

  // Description of the collection
  description: string
  // Image for the collection
  imageUrl: string
  // Image for the collection, large
  largeImageUrl: string
  // Image for the collection when featured
  featuredImageUrl: string
  // Object with stats about the collection
  stats: object
  // Data about displaying cards
  displayData: object,
  // Tokens allowed for this collection
  paymentTokens: OpenSeaFungibleToken[]
  // Address for dev fee payouts
  payoutAddress?: string,
  // Array of trait types for the collection
  traitStats: OpenSeaTraitStats,
  // Link to the collection's main website
  externalLink?: string
  // Link to the collection's wiki, if available
  wikiLink?: string
}

export interface OpenSeaTraitStats {
  [traitName: string]: NumericalTraitStats | StringTraitStats
}

/**
 * Annotated asset spec with OpenSea metadata
 */
export interface OpenSeaAsset extends Asset {
  assetContract: OpenSeaAssetContract
  collection: OpenSeaCollection
  // The asset's given name
  name: string
  // Description of the asset
  description: string
  // Owner of the asset
  owner: OpenSeaAccount
  // Orders on the asset. Null if asset was fetched in a list
  orders: Order[] | null
  // Buy orders (offers) on the asset. Null if asset in a list and didn't prefetch buy orders
  buyOrders: Order[] | null
  // Sell orders (auctions) on the asset. Null if asset in a list and didn't prefetch sell orders
  sellOrders: Order[] | null

  // Whether the asset is on a pre-sale (so token ids aren't real)
  isPresale: boolean
  // The cached and size-optimized image url for this token
  imageUrl: string
  // The image preview url for this token.
  // Note: Loses gif animation and may have issues with SVGs
  imagePreviewUrl: string
  // The original image url for this token
  imageUrlOriginal: string
  // Thumbnail url for this token
  imageUrlThumbnail: string
  // Link to token on OpenSea
  openseaLink: string
  // Link to token on dapp's site
  externalLink: string
  // Array of traits on this token
  traits: object[],
  // Number of times this token has been traded (sold)
  numSales: number
  // Data about the last time this token was sold
  lastSale: AssetEvent | null
  // The suggested background color for the image url
  backgroundColor: string | null,
  // The per-transfer fee, in base units, for this asset in its transfer method
  transferFee: BigNumber | string | null,
  // The transfer fee token for this asset in its transfer method
  transferFeePaymentToken: OpenSeaFungibleToken | null
}

/**
 * Defines a AssetEvent type which contains details about an event that occurred
 */
export interface AssetEvent {

  // The type of event
  eventType: AssetEventType

  // The timestamp of the transaction (if on-chain) or when the off-chain occurred
  eventTimestamp: Date

  // The auction type
  auctionType: AuctionType

  // The total price of the sale in the payment
  totalPrice: string

  // The transaction associated with the token sale
  transaction: Transaction | null

  // Details about the token used in the payment for this asset
  paymentToken: OpenSeaFungibleToken | null
}

/**
 * Defines set of possible auctions types
 */
export enum AuctionType {
  Dutch = 'dutch',
  English = 'english',
  MinPrice = 'min_price',
}

/**
 * Defines the possible types of asset events that can take place
 */
export enum AssetEventType {
  AuctionCreated = 'created',
  AuctionSuccessful = 'successful',
  AuctionCancelled = 'cancelled',
  OfferEntered = 'offer_entered',
  BidEntered = 'bid_entered',
  BidWithdraw = 'bid_withdraw',
  AssetTransfer = 'transfer',
  AssetApprove = 'approve',
  CompositionCreated = 'composition_created',
  Custom = 'custom',
  Payout = 'payout',
}

/**
 * Defines a Transaction type.
 */
export interface Transaction {
  // The details about the account that sent the transaction
  fromAccount: OpenSeaAccount

  // The details about the account that received the transaction
  toAccount: OpenSeaAccount

  // Date when the transaction was created
  createdDate: Date

  // Date when the transaction was modified
  modifiedDate: Date

  // The transaction hash
  transactionHash: string

  // The index of the transaction within the block
  transactionIndex: string

  // The number of the block in which this transaction resides
  blockNumber: string

  // The hash of the block in which this transaction resides
  blockHash: string

  // The timestamp of the transaction
  timestamp: Date
}

/**
 * Full annotated Fungible Token spec with OpenSea metadata
 */
export interface OpenSeaFungibleToken extends Token {
  imageUrl?: string
  ethPrice?: string
  usdPrice?: string
}

// Backwards compat
export type FungibleToken = OpenSeaFungibleToken

/**
 * Bundles of assets, grouped together into one OpenSea order
 * URLs for bundles are auto-generated from the name
 */
export interface OpenSeaAssetBundle {
  maker: OpenSeaAccount
  assets: OpenSeaAsset[]
  name: string
  slug: string
  permalink: string

  // Sell orders (auctions) on the bundle. Null if bundle in a list and didn't prefetch sell orders
  sellOrders: Order[] | null

  assetContract?: OpenSeaAssetContract
  description?: string
  externalLink?: string
}

export interface OpenSeaAssetBundleJSON {
  assets: OpenSeaAsset[]
  name: string
  description?: string
  external_link?: string

  // From API only
  maker?: OpenSeaAccount
}

/**
 * Query interface for Bundles
 */
export interface OpenSeaAssetBundleQuery extends Partial<OpenSeaAssetBundleJSON> {

  asset_contract_address?: string
  token_ids?: Array<number | string>
  on_sale?: boolean
  owner?: string
  offset?: number
  limit?: number
  search?: string
}

/**
 * The basis point values of each type of fee
 */
export interface OpenSeaFees {
  // Fee for OpenSea levied on sellers
  openseaSellerFeeBasisPoints: number
  // Fee for OpenSea levied on buyers
  openseaBuyerFeeBasisPoints: number
  // Fee for the collection owner levied on sellers
  devSellerFeeBasisPoints: number
  // Fee for the collection owner levied on buyers
  devBuyerFeeBasisPoints: number
}

/**
 * Fully computed fees including bounties and transfer fees
 */
export interface ComputedFees extends OpenSeaFees {
  // Total fees. dev + opensea
  totalBuyerFeeBasisPoints: number
  totalSellerFeeBasisPoints: number

  // Fees that the item's creator takes on every transfer
  transferFee: BigNumber
  transferFeeTokenAddress: string | null

  // Fees that go to whoever refers the order to the taker.
  // Comes out of OpenSea fees
  sellerBountyBasisPoints: number
}

export interface ExchangeMetadataForAsset {
  asset: WyvernAsset
  schema: WyvernSchemaName
  referrerAddress?: string
}

export interface ExchangeMetadataForBundle {
  bundle: WyvernBundle
  referrerAddress?: string
}

export type ExchangeMetadata = ExchangeMetadataForAsset | ExchangeMetadataForBundle

export interface UnhashedOrder extends WyvernOrder {
  feeMethod: FeeMethod
  side: OrderSide
  saleKind: SaleKind
  howToCall: HowToCall
  quantity: BigNumber

  // OpenSea-specific
  makerReferrerFee: BigNumber
  waitingForBestCounterOrder: boolean
  englishAuctionReservePrice?: BigNumber

  metadata: ExchangeMetadata
}

export interface UnsignedOrder extends UnhashedOrder {
  hash: string
}

/**
 * Orders don't need to be signed if they're pre-approved
 * with a transaction on the contract to approveOrder_
 */
export interface Order extends UnsignedOrder, Partial<ECSignature> {
  // Read-only server-side appends
  createdTime?: BigNumber
  currentPrice?: BigNumber
  currentBounty?: BigNumber
  makerAccount?: OpenSeaAccount
  takerAccount?: OpenSeaAccount
  paymentTokenContract?: OpenSeaFungibleToken
  feeRecipientAccount?: OpenSeaAccount
  cancelledOrFinalized?: boolean
  markedInvalid?: boolean
  asset?: OpenSeaAsset
  assetBundle?: OpenSeaAssetBundle
}

/**
 * Order attributes, including orderbook-specific query options
 * See https://docs.opensea.io/reference#retrieving-orders for the full
 * list of API query parameters and documentation.
 */
export interface OrderJSON extends Partial<ECSignature> {
  exchange: string
  maker: string
  taker: string
  makerRelayerFee: string
  takerRelayerFee: string
  makerProtocolFee: string
  takerProtocolFee: string
  makerReferrerFee: string
  feeRecipient: string
  feeMethod: number
  side: number
  saleKind: number
  target: string
  howToCall: number
  calldata: string
  replacementPattern: string
  staticTarget: string
  staticExtradata: string
  paymentToken: string

  quantity: string
  basePrice: string
  englishAuctionReservePrice: string | undefined
  extra: string

  // createdTime is undefined when order hasn't been posted yet
  createdTime?: number | string
  listingTime: number | string
  expirationTime: number | string

  salt: string

  metadata: ExchangeMetadata

  hash: string
}

/**
 * Query interface for Orders
 * Includes `maker`, `taker` and `side` from above
 * See https://docs.opensea.io/reference#retrieving-orders for
 * full docs.
 */
export interface OrderQuery extends Partial<OrderJSON> {
  owner?: string,
  sale_kind?: SaleKind,
  asset_contract_address?: string,
  payment_token_address?: string,
  is_english?: boolean
  is_expired?: boolean
  bundled?: boolean
  include_invalid?: boolean
  token_id?: number | string
  token_ids?: Array<number | string>
  // This means listing_time > value in seconds
  listed_after?: number | string
  // This means listing_time <= value in seconds
  listed_before?: number | string
  limit?: number
  offset?: number
}

/**
 * Query interface for Assets
 */
export interface OpenSeaAssetQuery {
  owner?: string
  asset_contract_address?: string
  token_ids?: Array<number | string>
  search?: string
  order_by?: string
  order_direction?: string
  limit?: number
  offset?: number
}

/**
 * Query interface for Fungible Assets
 */
export interface OpenSeaFungibleTokenQuery extends Partial<OpenSeaFungibleToken> {
  limit?: number
  offset?: number
  // Typescript bug requires this duplication
  symbol?: string
}

// Backwards compat
export type FungibleTokenQuery = OpenSeaFungibleTokenQuery

export interface OrderbookResponse {
  orders: OrderJSON[]
  count: number
}

// Types related to Web3
export type Web3Callback<T> = (err: Error | null, result: T) => void
export type Web3RPCCallback = Web3Callback<Web3.JSONRPCResponsePayload>
export type TxnCallback = (result: boolean) => void

/**
 * To simplify typifying ABIs
 */
export interface PartialAbiDefinition {
  type: Web3.AbiType | string // Not Partial!
  name?: string
  inputs?: object[]
  outputs?: object[]
  payable?: boolean
  constant?: boolean
  anonymous?: boolean
  stateMutability?: Web3.ConstructorStateMutability | string
}
export type PartialReadonlyContractAbi = Array<Readonly<PartialAbiDefinition>>

'''
'''--- src/utils/schema.ts ---
import { BigNumber } from 'bignumber.js'
import * as ethABI from 'ethereumjs-abi'
import { WyvernProtocol } from 'wyvern-js'
import { HowToCall, ReplacementEncoder, Network } from 'wyvern-js/lib/types'
import { WyvernAtomicizerContract } from 'wyvern-js/lib/abi_gen/wyvern_atomicizer'

import {
  AnnotatedFunctionABI,
  FunctionInputKind,
  Schema,
} from 'wyvern-schemas/dist/types'
export { AbiType } from 'wyvern-schemas'
import { WyvernAsset, OrderSide } from '../types'
import { proxyAssertABI, proxyABI } from '../abi/Proxy'

export interface LimitedCallSpec {
  target: string
  calldata: string
}

export interface CallSpec {
  target: string
  calldata: string
  replacementPattern: string
}

export const encodeReplacementPattern: ReplacementEncoder = WyvernProtocol.encodeReplacementPattern

export type Encoder = (schema: Schema<WyvernAsset>, asset: WyvernAsset, address: string) => CallSpec

export const encodeCall = (abi: AnnotatedFunctionABI, parameters: any[]): string => {
  const inputTypes = abi.inputs.map(i => i.type)
  return '0x' + Buffer.concat([
    ethABI.methodID(abi.name, inputTypes),
    ethABI.rawEncode(inputTypes, parameters),
  ]).toString('hex')
}

export const encodeSell: Encoder = (schema, asset, address) => {
  const transfer = schema.functions.transfer(asset)
  return {
    target: transfer.target,
    calldata: encodeDefaultCall(transfer, address),
    replacementPattern: encodeReplacementPattern(transfer),
  }
}

export type AtomicizedSellEncoder = (schemas: Array<Schema<WyvernAsset>>, assets: WyvernAsset[], address: string, wyvernProtocol: WyvernProtocol, networkName: Network) => CallSpec

export const encodeAtomicizedSell: AtomicizedSellEncoder = (schemas, assets, address, wyvernProtocol, networkName) => {

  const atomicizer = wyvernProtocol.wyvernAtomicizer

  const { atomicizedCalldata, atomicizedReplacementPattern } = encodeAtomicizedCalldata(atomicizer, schemas, assets, address, OrderSide.Sell)

  return {
    calldata: atomicizedCalldata,
    replacementPattern: atomicizedReplacementPattern,
    target: WyvernProtocol.getAtomicizerContractAddress(networkName)
  }
}

export type AtomicizedBuyEncoder = (schemas: Array<Schema<WyvernAsset>>, assets: WyvernAsset[], address: string, wyvernProtocol: WyvernProtocol, networkName: Network) => CallSpec

export const encodeAtomicizedBuy: AtomicizedBuyEncoder = (schemas, assets, address, wyvernProtocol, networkName) => {

  const atomicizer = wyvernProtocol.wyvernAtomicizer

  const { atomicizedCalldata, atomicizedReplacementPattern } = encodeAtomicizedCalldata(atomicizer, schemas, assets, address, OrderSide.Buy)

  return {
    calldata: atomicizedCalldata,
    replacementPattern: atomicizedReplacementPattern,
    target: WyvernProtocol.getAtomicizerContractAddress(networkName)
  }
}

export const encodeBuy: Encoder = (schema, asset, address) => {
  const transfer = schema.functions.transfer(asset)
  const replaceables = transfer.inputs.filter((i: any) => i.kind === FunctionInputKind.Replaceable)
  const ownerInputs = transfer.inputs.filter((i: any) => i.kind === FunctionInputKind.Owner)

  // Validate
  if (replaceables.length !== 1) {
    throw new Error('Only 1 input can match transfer destination, but instead ' + replaceables.length + ' did')
  }

  // Compute calldata
  const parameters = transfer.inputs.map((input: any) => {
    switch (input.kind) {
      case FunctionInputKind.Replaceable:
        return address
      case FunctionInputKind.Owner:
        return WyvernProtocol.generateDefaultValue(input.type)
      default:
        try {
          return input.value.toString()
        } catch (e) {
          console.error(schema)
          console.error(asset)
          throw e
        }
    }
  })
  const calldata = encodeCall(transfer, parameters)

  // Compute replacement pattern
  let replacementPattern = '0x'
  if (ownerInputs.length > 0) {
    replacementPattern = encodeReplacementPattern(transfer, FunctionInputKind.Owner)
  }

  return {
    target: transfer.target,
    calldata,
    replacementPattern,
  }
}

export type DefaultCallEncoder = (abi: AnnotatedFunctionABI, address: string) => string

export const encodeDefaultCall: DefaultCallEncoder = (abi, address) => {
  const parameters = abi.inputs.map(input => {
    switch (input.kind) {
      case FunctionInputKind.Replaceable:
        return WyvernProtocol.generateDefaultValue(input.type)
      case FunctionInputKind.Owner:
        return address
      case FunctionInputKind.Asset:
      default:
        return input.value
    }
  })
  return encodeCall(abi, parameters)
}

/**
 * Encode the atomicized transfer of many assets
 * @param schema Wyvern Schema for the assets
 * @param assets List of assets to transfer
 * @param from Current address owning the assets
 * @param to Destination address
 * @param atomicizer Wyvern Atomicizer instance
 */
export function encodeAtomicizedTransfer(schemas: Array<Schema<WyvernAsset>>, assets: WyvernAsset[], from: string, to: string, wyvernProtocol: WyvernProtocol, networkName: Network): LimitedCallSpec {

  const atomicizer = wyvernProtocol.wyvernAtomicizer

  const transactions = assets.map((asset: WyvernAsset, i) => {
    const schema = schemas[i]
    const transfer = schema.functions.transfer(asset)
    const calldata = encodeTransferCall(transfer, from, to)
    return {
      calldata,
      address: transfer.target,
      value: new BigNumber(0),
    }
  })

  const atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(
    transactions.map((t: any) => t.address),
    transactions.map((t: any) => t.value),
    transactions.map((t: any) => new BigNumber((t.calldata.length - 2) / 2)), // subtract 2 for '0x', divide by 2 for hex
    transactions.map((t: any) => t.calldata).reduce((x: string, current: string) => x + current.slice(2), '0x'), // cut off the '0x'
  )

  return {
    calldata: atomicizedCalldata,
    target: WyvernProtocol.getAtomicizerContractAddress(networkName)
  }
}

/**
 * Encode a transfer call for a Wyvern schema function
 * @param transferAbi Annotated Wyvern ABI
 * @param from From address
 * @param to To address
 */
export function encodeTransferCall(transferAbi: AnnotatedFunctionABI, from: string, to: string) {
  const parameters = transferAbi.inputs.map(input => {
    switch (input.kind) {
      case FunctionInputKind.Replaceable:
        return to
      case FunctionInputKind.Owner:
        return from
      case FunctionInputKind.Asset:
      default:
        if (input.value == null) {
          throw new Error(`Unsupported function input kind: ${input.kind}`)
        }
        return input.value
    }
  })
  return encodeCall(transferAbi, parameters)
}

/**
 * Encode a call to a user's proxy contract
 * @param address The address for the proxy to call
 * @param howToCall How to call the addres
 * @param calldata The data to use in the call
 * @param shouldAssert Whether to assert success in the proxy call
 */
export function encodeProxyCall(address: string, howToCall: HowToCall, calldata: string, shouldAssert = true) {
  const abi = shouldAssert ? proxyAssertABI : proxyABI
  return encodeCall(abi, [address, howToCall, Buffer.from(calldata.slice(2), 'hex')])
}

// Helpers for atomicizer

function encodeAtomicizedCalldata(atomicizer: WyvernAtomicizerContract, schemas: Array<Schema<WyvernAsset>>, assets: WyvernAsset[], address: string, side: OrderSide) {

  const encoder = side === OrderSide.Sell ? encodeSell : encodeBuy

  try {
    const transactions = assets.map((asset, i) => {
      const schema = schemas[i]
      const { target, calldata } = encoder(schema, asset, address)
      return {
        calldata,
        abi: schema.functions.transfer(asset),
        address: target,
        value: new BigNumber(0),
      }
    })

    const atomicizedCalldata = atomicizer.atomicize.getABIEncodedTransactionData(
      transactions.map(t => t.address),
      transactions.map(t => t.value),
      transactions.map(t => new BigNumber((t.calldata.length - 2) / 2)), // subtract 2 for '0x', divide by 2 for hex
      transactions.map(t => t.calldata).reduce((x, y) => x + y.slice(2)), // cut off the '0x'
    )

    const kind = side === OrderSide.Buy ? FunctionInputKind.Owner : undefined

    const atomicizedReplacementPattern = WyvernProtocol.encodeAtomicizedReplacementPattern(transactions.map(t => t.abi), kind)

    if (!atomicizedCalldata || !atomicizedReplacementPattern) {
      throw new Error(`Invalid calldata: ${atomicizedCalldata}, ${atomicizedReplacementPattern}`)
    }
    return {
      atomicizedCalldata,
      atomicizedReplacementPattern
    }
  } catch (error) {
    console.error({ schemas, assets, address, side })
    throw new Error(`Failed to construct your order: likely something strange about this type of item. OpenSea has been notified. Please contact us in Discord! Original error: ${error}`)
  }
}

'''
'''--- src/utils/utils.ts ---
import BigNumber from 'bignumber.js'
import { WyvernProtocol } from 'wyvern-js'
import * as ethUtil from 'ethereumjs-util'
import * as _ from 'lodash'
import * as Web3 from 'web3'
import {
  AnnotatedFunctionABI,
  FunctionInputKind,
  FunctionOutputKind,
  Schema,
  StateMutability
} from 'wyvern-schemas/dist/types'
import { ERC1155 } from '../contracts'

import { OpenSeaPort } from '..'
import {
  Asset,
  AssetContractType,
  AssetEvent,
  ECSignature,
  OpenSeaAccount,
  OpenSeaAsset,
  OpenSeaAssetBundle,
  OpenSeaAssetContract,
  OpenSeaCollection,
  OpenSeaFungibleToken,
  OpenSeaTraitStats, OpenSeaUser,
  Order,
  OrderJSON,
  OrderSide,
  SaleKind,
  Transaction,
  TxnCallback,
  UnhashedOrder,
  UnsignedOrder,
  Web3Callback,
  WyvernAsset,
  WyvernBundle,
  WyvernFTAsset,
  WyvernNFTAsset,
  WyvernSchemaName
} from '../types'
import {
  ENJIN_ADDRESS,
  ENJIN_COIN_ADDRESS,
  INVERSE_BASIS_POINT,
  NULL_ADDRESS,
  NULL_BLOCK_HASH
} from '../constants'
import { proxyABI } from '../abi/Proxy'

export {
  WyvernProtocol
}

export const annotateERC721TransferABI = (asset: WyvernNFTAsset): AnnotatedFunctionABI => ({
  "constant": false,
  "inputs": [
    {
      "name": "_to",
      "type": "address",
      "kind": FunctionInputKind.Replaceable
    },
    {
      "name": "_tokenId",
      "type": "uint256",
      "kind": FunctionInputKind.Asset,
      "value": asset.id
    }
  ],
  "target": asset.address,
  "name": "transfer",
  "outputs": [],
  "payable": false,
  "stateMutability": StateMutability.Nonpayable,
  "type": Web3.AbiType.Function
})

export const annotateERC20TransferABI = (asset: WyvernFTAsset): AnnotatedFunctionABI => ({
  "constant": false,
  "inputs": [
    {
      "name": "_to",
      "type": "address",
      "kind": FunctionInputKind.Replaceable
    },
    {
      "name": "_amount",
      "type": "uint256",
      "kind": FunctionInputKind.Count,
      "value": asset.quantity
    }
  ],
  "target": asset.address,
  "name": "transfer",
  "outputs": [
    {
      "name": "success",
      "type": "bool",
      "kind": FunctionOutputKind.Other
    }
  ],
  "payable": false,
  "stateMutability": StateMutability.Nonpayable,
  "type": Web3.AbiType.Function
})

const SCHEMA_NAME_TO_ASSET_CONTRACT_TYPE: {[key in WyvernSchemaName]: AssetContractType} = {
  [WyvernSchemaName.ERC721]: AssetContractType.NonFungible,
  [WyvernSchemaName.ERC1155]: AssetContractType.SemiFungible,
  [WyvernSchemaName.ERC20]: AssetContractType.Fungible,
  [WyvernSchemaName.LegacyEnjin]: AssetContractType.SemiFungible,
  [WyvernSchemaName.ENSShortNameAuction]: AssetContractType.NonFungible,
}

// OTHER

const txCallbacks: {[key: string]: TxnCallback[]} = {}

/**
 * Promisify a callback-syntax web3 function
 * @param inner callback function that accepts a Web3 callback function and passes
 * it to the Web3 function
 */
async function promisify<T>(
    inner: (fn: Web3Callback<T>) => void
  ) {
  return new Promise<T>((resolve, reject) =>
    inner((err, res) => {
      if (err) { reject(err) }
      resolve(res)
    })
  )
}

/**
 * Promisify a call a method on a contract,
 * handling Parity errors. Returns '0x' if error.
 * Note that if T is not "string", this may return a falsey
 * value when the contract doesn't support the method (e.g. `isApprovedForAll`).
 * @param callback An anonymous function that takes a web3 callback
 * and returns a Web3 Contract's call result, e.g. `c => erc721.ownerOf(3, c)`
 * @param onError callback when user denies transaction
 */
export async function promisifyCall<T>(
    callback: (fn: Web3Callback<T>) => void,
    onError?: (error: Error) => void
  ): Promise<T | undefined> {

  try {

    const result: any = await promisify<T>(callback)
    if (result == '0x') {
      // Geth compatibility
      return undefined
    }
    return result as T

  } catch (error) {
    // Probably method not found, and web3 is a Parity node
    if (onError) {
      onError(error)
    } else {
      console.error(error)
    }
    return undefined
  }
}

const track = (web3: Web3, txHash: string, onFinalized: TxnCallback) => {
  if (txCallbacks[txHash]) {
    txCallbacks[txHash].push(onFinalized)
  } else {
    txCallbacks[txHash] = [onFinalized]
    const poll = async () => {
      const tx = await promisify<Web3.Transaction>(c => web3.eth.getTransaction(txHash, c))
      if (tx && tx.blockHash && tx.blockHash !== NULL_BLOCK_HASH) {
        const receipt = await promisify<Web3.TransactionReceipt | null>(c => web3.eth.getTransactionReceipt(txHash, c))
        if (!receipt) {
          // Hack: assume success if no receipt
          console.warn('No receipt found for ', txHash)
        }
        const status = receipt
          ? parseInt((receipt.status || "0").toString()) == 1
          : true
        txCallbacks[txHash].map(f => f(status))
        delete txCallbacks[txHash]
      } else {
        setTimeout(poll, 1000)
      }
    }
    poll().catch()
  }
}

export const confirmTransaction = async (web3: Web3, txHash: string) => {
  return new Promise((resolve, reject) => {
    track(web3, txHash, (didSucceed: boolean) => {
      if (didSucceed) {
        resolve("Transaction complete!")
      } else {
        reject(new Error(`Transaction failed :( You might have already completed this action. See more on the mainnet at etherscan.io/tx/${txHash}`))
      }
    })
  })
}

export const assetFromJSON = (asset: any): OpenSeaAsset => {
  const isAnimated = asset.image_url && asset.image_url.endsWith('.gif')
  const isSvg = asset.image_url && asset.image_url.endsWith('.svg')
  const fromJSON: OpenSeaAsset = {
    tokenId: asset.token_id.toString(),
    tokenAddress: asset.asset_contract.address,
    name: asset.name,
    description: asset.description,
    owner: asset.owner,
    assetContract: assetContractFromJSON(asset.asset_contract),
    collection: collectionFromJSON(asset.collection),
    orders: asset.orders ? asset.orders.map(orderFromJSON) : null,
    sellOrders: asset.sell_orders ? asset.sell_orders.map(orderFromJSON) : null,
    buyOrders: asset.buy_orders ? asset.buy_orders.map(orderFromJSON) : null,

    isPresale: asset.is_presale,
    // Don't use previews if it's a special image
    imageUrl: isAnimated || isSvg
      ? asset.image_url
      : (asset.image_preview_url || asset.image_url),
    imagePreviewUrl: asset.image_preview_url,
    imageUrlOriginal: asset.image_original_url,
    imageUrlThumbnail: asset.image_thumbnail_url,

    externalLink: asset.external_link,
    openseaLink: asset.permalink,
    traits: asset.traits,
    numSales: asset.num_sales,
    lastSale: asset.last_sale ? assetEventFromJSON(asset.last_sale) : null,
    backgroundColor: asset.background_color ? `#${asset.background_color}` : null,

    transferFee: asset.transfer_fee
      ? makeBigNumber(asset.transfer_fee)
      : null,
    transferFeePaymentToken: asset.transfer_fee_payment_token
      ? tokenFromJSON(asset.transfer_fee_payment_token)
      : null,
  }
  // If orders were included, put them in sell/buy order groups
  if (fromJSON.orders && !fromJSON.sellOrders) {
    fromJSON.sellOrders = fromJSON.orders.filter(o => o.side == OrderSide.Sell)
  }
  if (fromJSON.orders && !fromJSON.buyOrders) {
    fromJSON.buyOrders = fromJSON.orders.filter(o => o.side == OrderSide.Buy)
  }
  return fromJSON
}

export const assetEventFromJSON = (assetEvent: any): AssetEvent => {
  return {
    eventType: assetEvent.event_type,
    eventTimestamp: assetEvent.event_timestamp,
    auctionType: assetEvent.auction_type,
    totalPrice: assetEvent.total_price,
    transaction: assetEvent.transaction ? transactionFromJSON(assetEvent.transaction) : null,
    paymentToken: assetEvent.payment_token ?  tokenFromJSON(assetEvent.payment_token) : null,
  }
}

export const transactionFromJSON = (transaction: any): Transaction => {
  return {
    fromAccount: accountFromJSON(transaction.from_account),
    toAccount: accountFromJSON(transaction.to_account),
    createdDate: new Date(`${transaction.created_date}Z`),
    modifiedDate: new Date(`${transaction.modified_date}Z`),
    transactionHash: transaction.transaction_hash,
    transactionIndex: transaction.transaction_index,
    blockNumber: transaction.block_number,
    blockHash: transaction.block_hash,
    timestamp: new Date(`${transaction.timestamp}Z`),
  }
}

export const accountFromJSON = (account: any): OpenSeaAccount => {
  return {
    address: account.address,
    config: account.config,
    profileImgUrl: account.profile_img_url,
    user: account.user ? userFromJSON(account.user) : null
  }
}

export const userFromJSON = (user: any): OpenSeaUser => {
  return {
    username: user.username
  }
}

export const assetBundleFromJSON = (asset_bundle: any): OpenSeaAssetBundle => {

  const fromJSON: OpenSeaAssetBundle = {
    maker: asset_bundle.maker,
    assets: asset_bundle.assets.map(assetFromJSON),
    assetContract: asset_bundle.asset_contract
      ? assetContractFromJSON(asset_bundle.asset_contract)
      : undefined,
    name: asset_bundle.name,
    slug: asset_bundle.slug,
    description: asset_bundle.description,
    externalLink: asset_bundle.external_link,
    permalink: asset_bundle.permalink,

    sellOrders: asset_bundle.sell_orders ? asset_bundle.sell_orders.map(orderFromJSON) : null
  }

  return fromJSON
}

export const assetContractFromJSON = (asset_contract: any): OpenSeaAssetContract => {
  return {
    name: asset_contract.name,
    description: asset_contract.description,
    type: asset_contract.asset_contract_type,
    schemaName: asset_contract.schema_name,
    address: asset_contract.address,
    tokenSymbol: asset_contract.symbol,
    buyerFeeBasisPoints: +asset_contract.buyer_fee_basis_points,
    sellerFeeBasisPoints: +asset_contract.seller_fee_basis_points,
    openseaBuyerFeeBasisPoints: +asset_contract.opensea_buyer_fee_basis_points,
    openseaSellerFeeBasisPoints: +asset_contract.opensea_seller_fee_basis_points,
    devBuyerFeeBasisPoints: +asset_contract.dev_buyer_fee_basis_points,
    devSellerFeeBasisPoints: +asset_contract.dev_seller_fee_basis_points,
    imageUrl: asset_contract.image_url,
    externalLink: asset_contract.external_link,
    wikiLink: asset_contract.wiki_link,
  }
}

export const collectionFromJSON = (collection: any): OpenSeaCollection => {
  const createdDate = new Date(`${collection.created_date}Z`)

  return {
    createdDate,
    name: collection.name,
    description: collection.description,
    slug: collection.slug,
    editors: collection.editors,
    hidden: collection.hidden,
    featured: collection.featured,
    featuredImageUrl: collection.featured_image_url,
    displayData: collection.display_data,
    paymentTokens: (collection.payment_tokens || []).map(tokenFromJSON),
    openseaBuyerFeeBasisPoints: +collection.opensea_buyer_fee_basis_points,
    openseaSellerFeeBasisPoints: +collection.opensea_seller_fee_basis_points,
    devBuyerFeeBasisPoints: +collection.dev_buyer_fee_basis_points,
    devSellerFeeBasisPoints: +collection.dev_seller_fee_basis_points,
    payoutAddress: collection.payout_address,
    imageUrl: collection.image_url,
    largeImageUrl: collection.large_image_url,
    stats: collection.stats,
    traitStats: collection.traits as OpenSeaTraitStats,
    externalLink: collection.external_url,
    wikiLink: collection.wiki_url,
  }
}

export const tokenFromJSON = (token: any): OpenSeaFungibleToken => {

  const fromJSON: OpenSeaFungibleToken = {
    name: token.name,
    symbol: token.symbol,
    decimals: token.decimals,
    address: token.address,
    imageUrl: token.image_url,
    ethPrice: token.eth_price,
    usdPrice: token.usd_price,
  }

  return fromJSON
}

export const orderFromJSON = (order: any): Order => {

  const createdDate = new Date(`${order.created_date}Z`)

  const fromJSON: Order = {
    hash: order.order_hash || order.hash,
    cancelledOrFinalized: order.cancelled || order.finalized,
    markedInvalid: order.marked_invalid,
    metadata: order.metadata,
    quantity: new BigNumber(order.quantity || 1),
    exchange: order.exchange,
    makerAccount: order.maker,
    takerAccount: order.taker,
    // Use string address to conform to Wyvern Order schema
    maker: order.maker.address,
    taker: order.taker.address,
    makerRelayerFee: new BigNumber(order.maker_relayer_fee),
    takerRelayerFee: new BigNumber(order.taker_relayer_fee),
    makerProtocolFee: new BigNumber(order.maker_protocol_fee),
    takerProtocolFee: new BigNumber(order.taker_protocol_fee),
    makerReferrerFee: new BigNumber(order.maker_referrer_fee || 0),
    waitingForBestCounterOrder: order.fee_recipient.address == NULL_ADDRESS,
    feeMethod: order.fee_method,
    feeRecipientAccount: order.fee_recipient,
    feeRecipient: order.fee_recipient.address,
    side: order.side,
    saleKind: order.sale_kind,
    target: order.target,
    howToCall: order.how_to_call,
    calldata: order.calldata,
    replacementPattern: order.replacement_pattern,
    staticTarget: order.static_target,
    staticExtradata: order.static_extradata,
    paymentToken: order.payment_token,
    basePrice: new BigNumber(order.base_price),
    extra: new BigNumber(order.extra),
    currentBounty: new BigNumber(order.current_bounty || 0),
    currentPrice: new BigNumber(order.current_price || 0),

    createdTime: new BigNumber(Math.round(createdDate.getTime() / 1000)),
    listingTime: new BigNumber(order.listing_time),
    expirationTime: new BigNumber(order.expiration_time),

    salt: new BigNumber(order.salt),
    v: parseInt(order.v),
    r: order.r,
    s: order.s,

    paymentTokenContract: order.payment_token_contract ? tokenFromJSON(order.payment_token_contract) : undefined,
    asset: order.asset ? assetFromJSON(order.asset) : undefined,
    assetBundle: order.asset_bundle ? assetBundleFromJSON(order.asset_bundle) : undefined,
  }

  // Use client-side price calc, to account for buyer fee (not added by server) and latency
  fromJSON.currentPrice = estimateCurrentPrice(fromJSON)

  return fromJSON
}

/**
 * Convert an order to JSON, hashing it as well if necessary
 * @param order order (hashed or unhashed)
 */
export const orderToJSON = (order: Order): OrderJSON => {
  const asJSON: OrderJSON = {
    exchange: order.exchange.toLowerCase(),
    maker: order.maker.toLowerCase(),
    taker: order.taker.toLowerCase(),
    makerRelayerFee: order.makerRelayerFee.toString(),
    takerRelayerFee: order.takerRelayerFee.toString(),
    makerProtocolFee: order.makerProtocolFee.toString(),
    takerProtocolFee: order.takerProtocolFee.toString(),
    makerReferrerFee: order.makerReferrerFee.toString(),
    feeMethod: order.feeMethod,
    feeRecipient: order.feeRecipient.toLowerCase(),
    side: order.side,
    saleKind: order.saleKind,
    target: order.target.toLowerCase(),
    howToCall: order.howToCall,
    calldata: order.calldata,
    replacementPattern: order.replacementPattern,
    staticTarget: order.staticTarget.toLowerCase(),
    staticExtradata: order.staticExtradata,
    paymentToken: order.paymentToken.toLowerCase(),
    quantity: order.quantity.toString(),
    basePrice: order.basePrice.toString(),
    englishAuctionReservePrice: order.englishAuctionReservePrice ? order.englishAuctionReservePrice.toString() : undefined,
    extra: order.extra.toString(),
    createdTime: order.createdTime
      ? order.createdTime.toString()
      : undefined,
    listingTime: order.listingTime.toString(),
    expirationTime: order.expirationTime.toString(),
    salt: order.salt.toString(),

    metadata: order.metadata,

    v: order.v,
    r: order.r,
    s: order.s,

    hash: order.hash
  }
  return asJSON
}

/**
 * Sign messages using web3 personal signatures
 * @param web3 Web3 instance
 * @param message message to sign
 * @param signerAddress web3 address signing the message
 * @returns A signature if provider can sign, otherwise null
 */
export async function personalSignAsync(web3: Web3, message: string, signerAddress: string
  ): Promise<ECSignature> {

  const signature = await promisify<Web3.JSONRPCResponsePayload>(c => web3.currentProvider.sendAsync({
      method: 'personal_sign',
      params: [message, signerAddress],
      from: signerAddress,
      id: new Date().getTime()
    } as any, c)
  )

  const error = (signature as any).error
  if (error) {
    throw new Error(error)
  }

  return parseSignatureHex(signature.result)
}

/**
 * Checks whether a given address contains any code
 * @param web3 Web3 instance
 * @param address input address
 */
export async function isContractAddress(web3: Web3, address: string
  ): Promise<boolean> {
    const code = await promisify<string>(c => web3.eth.getCode(address, c))
    return code !== '0x'
}

/**
 * Special fixes for making BigNumbers using web3 results
 * @param arg An arg or the result of a web3 call to turn into a BigNumber
 */
export function makeBigNumber(arg: number | string | BigNumber): BigNumber {
  // Zero sometimes returned as 0x from contracts
  if (arg === '0x') {
    arg = 0
  }
  // fix "new BigNumber() number type has more than 15 significant digits"
  arg = arg.toString()
  return new BigNumber(arg)
}

/**
 * Send a transaction to the blockchain and optionally confirm it
 * @param web3 Web3 instance
 * @param param0 __namedParameters
 * @param from address sending transaction
 * @param to destination contract address
 * @param data data to send to contract
 * @param gasPrice gas price to use. If unspecified, uses web3 default (mean gas price)
 * @param value value in ETH to send with data. Defaults to 0
 * @param onError callback when user denies transaction
 */
export async function sendRawTransaction(
    web3: Web3,
    {from, to, data, gasPrice, value = 0, gas}: Web3.TxData,
    onError: (error: Error) => void
  ): Promise<string> {

  if (gas == null) {
    // This gas cannot be increased due to an ethjs error
    gas = await estimateGas(web3, { from, to, data, value })
  }

  try {
    const txHashRes = await promisify<string>(c => web3.eth.sendTransaction({
      from,
      to,
      value,
      data,
      gas,
      gasPrice
    }, c))
    return txHashRes.toString()

  } catch (error) {

    onError(error)
    throw error
  }
}

/**
 * Call a method on a contract, sending arbitrary data and
 * handling Parity errors. Returns '0x' if error.
 * @param web3 Web3 instance
 * @param param0 __namedParameters
 * @param from address sending call
 * @param to destination contract address
 * @param data data to send to contract
 * @param onError callback when user denies transaction
 */
export async function rawCall(
    web3: Web3,
    { from, to, data }: Web3.CallData,
    onError?: (error: Error) => void
  ): Promise<string> {

  try {
    const result = await promisify<string>(c => web3.eth.call({
      from,
      to,
      data
    }, c))
    return result

  } catch (error) {
    // Probably method not found, and web3 is a Parity node
    if (onError) {
      onError(error)
    }
    // Backwards compatibility with Geth nodes
    return '0x'
  }
}

/**
 * Estimate Gas usage for a transaction
 * @param web3 Web3 instance
 * @param from address sending transaction
 * @param to destination contract address
 * @param data data to send to contract
 * @param value value in ETH to send with data
 */
export async function estimateGas(
    web3: Web3,
    {from, to, data, value = 0 }: Web3.TxData
  ): Promise<number> {

  const amount = await promisify<number>(c => web3.eth.estimateGas({
    from,
    to,
    value,
    data,
  }, c))

  return amount
}

/**
 * Get mean gas price for sending a txn, in wei
 * @param web3 Web3 instance
 */
export async function getCurrentGasPrice(web3: Web3): Promise<BigNumber> {
  const meanGas = await promisify<BigNumber>(c => web3.eth.getGasPrice(c))
  return meanGas
}

/**
 * Get current transfer fees for an asset
 * @param web3 Web3 instance
 * @param asset The asset to check for transfer fees
 */
export async function getTransferFeeSettings(
    web3: Web3,
    { asset, accountAddress }: {
      asset: Asset;
      accountAddress?: string;
    }
  ) {
  let transferFee: BigNumber | undefined
  let transferFeeTokenAddress: string | undefined

  if (asset.tokenAddress.toLowerCase() == ENJIN_ADDRESS.toLowerCase()) {
    // Enjin asset
    const feeContract = web3.eth.contract(ERC1155 as any).at(asset.tokenAddress)

    const params = await promisifyCall<any[]>(c => feeContract.transferSettings(
        asset.tokenId,
        { from: accountAddress },
      c)
    )
    if (params) {
      transferFee = makeBigNumber(params[3])
      if (params[2] == 0) {
        transferFeeTokenAddress = ENJIN_COIN_ADDRESS
      }
    }
  }
  return { transferFee, transferFeeTokenAddress }
}

// sourced from 0x.js:
// https://github.com/ProjectWyvern/wyvern-js/blob/39999cb93ce5d80ea90b4382182d1bd4339a9c6c/src/utils/signature_utils.ts
function parseSignatureHex(signature: string): ECSignature {
  // HACK: There is no consensus on whether the signatureHex string should be formatted as
  // v + r + s OR r + s + v, and different clients (even different versions of the same client)
  // return the signature params in different orders. In order to support all client implementations,
  // we parse the signature in both ways, and evaluate if either one is a valid signature.
  const validVParamValues = [27, 28]

  const ecSignatureRSV = _parseSignatureHexAsRSV(signature)
  if (_.includes(validVParamValues, ecSignatureRSV.v)) {
    return ecSignatureRSV
  }

  // For older clients
  const ecSignatureVRS = _parseSignatureHexAsVRS(signature)
  if (_.includes(validVParamValues, ecSignatureVRS.v)) {
    return ecSignatureVRS
  }

  throw new Error('Invalid signature')

  function _parseSignatureHexAsVRS(signatureHex: string) {
    const signatureBuffer: any = ethUtil.toBuffer(signatureHex)
    let v = signatureBuffer[0]
    if (v < 27) {
      v += 27
    }
    const r = signatureBuffer.slice(1, 33)
    const s = signatureBuffer.slice(33, 65)
    const ecSignature = {
      v,
      r: ethUtil.bufferToHex(r),
      s: ethUtil.bufferToHex(s),
    }
    return ecSignature
  }

  function _parseSignatureHexAsRSV(signatureHex: string) {
    const { v, r, s } = ethUtil.fromRpcSig(signatureHex)
    const ecSignature = {
        v,
        r: ethUtil.bufferToHex(r),
        s: ethUtil.bufferToHex(s),
    }
    return ecSignature
  }
}

/**
 * Estimates the price of an order
 * @param order The order to estimate price on
 * @param secondsToBacktrack The number of seconds to subtract on current time,
 *  to fix race conditions
 * @param shouldRoundUp Whether to round up fractional wei
 */
export function estimateCurrentPrice(order: Order, secondsToBacktrack = 30, shouldRoundUp = true) {
  let { basePrice, listingTime, expirationTime, extra } = order
  const { side, takerRelayerFee, saleKind } = order

  const now = new BigNumber(Math.round(Date.now() / 1000)).minus(secondsToBacktrack)
  basePrice = new BigNumber(basePrice)
  listingTime = new BigNumber(listingTime)
  expirationTime = new BigNumber(expirationTime)
  extra = new BigNumber(extra)

  let exactPrice = basePrice

  if (saleKind === SaleKind.FixedPrice) {
    // Do nothing, price is correct
  } else if (saleKind === SaleKind.DutchAuction) {
    const diff = extra.times(now.minus(listingTime))
                  .dividedBy(expirationTime.minus(listingTime))

    exactPrice = side == OrderSide.Sell
      /* Sell-side - start price: basePrice. End price: basePrice - extra. */
      ? basePrice.minus(diff)
      /* Buy-side - start price: basePrice. End price: basePrice + extra. */
      : basePrice.plus(diff)
  }

  // Add taker fee only for buyers
  if (side === OrderSide.Sell && !order.waitingForBestCounterOrder) {
    // Buyer fee increases sale price
    exactPrice = exactPrice.times(+takerRelayerFee / INVERSE_BASIS_POINT + 1)
  }

  return shouldRoundUp ? exactPrice.ceil() : exactPrice
}

/**
 * Get the Wyvern representation of a fungible asset
 * @param schema The WyvernSchema needed to access this asset
 * @param asset The asset to trade
 * @param quantity The number of items to trade
 */
export function getWyvernAsset(
    schema: Schema<WyvernAsset>,
    asset: Asset,
    quantity = new BigNumber(1)
  ): WyvernAsset {

  const tokenId = asset.tokenId != null
    ? asset.tokenId.toString()
    : undefined

  return schema.assetFromFields({
    'ID': tokenId,
    'Quantity': quantity.toString(),
    'Address': asset.tokenAddress.toLowerCase(),
    'Name': asset.name
  })
}

/**
 * Get the Wyvern representation of a group of assets
 * Sort order is enforced here. Throws if there's a duplicate.
 * @param assets Assets to bundle
 * @param schemas The WyvernSchemas needed to access each asset, respectively
 * @param quantities The quantity of each asset to bundle, respectively
 */
export function getWyvernBundle(
    assets: Asset[],
    schemas: Array<Schema<WyvernAsset>>,
    quantities: BigNumber[]
  ): WyvernBundle {

  if (assets.length != quantities.length) {
    throw new Error("Bundle must have a quantity for every asset")
  }

  if (assets.length != schemas.length) {
    throw new Error("Bundle must have a schema for every asset")
  }

  const wyAssets = assets.map((asset, i) => getWyvernAsset(schemas[i], asset, quantities[i]))

  const sorters = [
    (assetAndSchema: { asset: WyvernAsset, schema: WyvernSchemaName }) => assetAndSchema.asset.address,
    (assetAndSchema: { asset: WyvernAsset, schema: WyvernSchemaName }) => assetAndSchema.asset.id || 0
  ]

  const wyAssetsAndSchemas = wyAssets.map((asset, i) => ({
    asset,
    schema: schemas[i].name as WyvernSchemaName
  }))

  const uniqueAssets = _.uniqBy(wyAssetsAndSchemas, group => `${sorters[0](group)}-${sorters[1](group)}`)

  if (uniqueAssets.length != wyAssetsAndSchemas.length) {
    throw new Error("Bundle can't contain duplicate assets")
  }

  const sortedWyAssetsAndSchemas = _.sortBy(wyAssetsAndSchemas, sorters)

  return {
    assets: sortedWyAssetsAndSchemas.map(group => group.asset),
    schemas: sortedWyAssetsAndSchemas.map(group => group.schema),
  }
}

/**
 * Get the non-prefixed hash for the order
 * (Fixes a Wyvern typescript issue and casing issue)
 * @param order order to hash
 */
export function getOrderHash(order: UnhashedOrder) {
  const orderWithStringTypes = {
    ...order,
    maker: order.maker.toLowerCase(),
    taker: order.taker.toLowerCase(),
    feeRecipient: order.feeRecipient.toLowerCase(),
    side: order.side.toString(),
    saleKind: order.saleKind.toString(),
    howToCall: order.howToCall.toString(),
    feeMethod: order.feeMethod.toString()
  }
  return WyvernProtocol.getOrderHashHex(orderWithStringTypes as any)
}

/**
 * Assign an order and a new matching order to their buy/sell sides
 * @param order Original order
 * @param matchingOrder The result of _makeMatchingOrder
 */
export function assignOrdersToSides(order: Order, matchingOrder: UnsignedOrder ): { buy: Order; sell: Order } {

  const isSellOrder = order.side == OrderSide.Sell

  let buy: Order
  let sell: Order
  if (!isSellOrder) {
    buy = order
    sell = {
      ...matchingOrder,
      v: buy.v,
      r: buy.r,
      s: buy.s
    }
  } else {
    sell = order
    buy = {
      ...matchingOrder,
      v: sell.v,
      r: sell.r,
      s: sell.s
    }
  }

  return { buy, sell }
}

// BROKEN
// TODO fix this calldata for buy orders
async function canSettleOrder(client: OpenSeaPort, order: Order, matchingOrder: Order): Promise<boolean> {

  // HACK that doesn't always work
  //  to change null address to 0x1111111... for replacing calldata
  const calldata = order.calldata.slice(0, 98) + "1111111111111111111111111111111111111111" + order.calldata.slice(138)

  const seller = order.side == OrderSide.Buy ? matchingOrder.maker : order.maker
  const proxy = await client._getProxy(seller)
  if (!proxy) {
    console.warn(`No proxy found for seller ${seller}`)
    return false
  }
  const contract = (client.web3.eth.contract([proxyABI])).at(proxy)
  return promisify<boolean>(c =>
    contract.proxy.call(
      order.target,
      order.howToCall,
      calldata,
      {from: seller},
    c)
  )
}

/**
 * Delay using setTimeout
 * @param ms milliseconds to wait
 */
export async function delay(ms: number) {
  return new Promise(res => setTimeout(res, ms))
}

/**
 * Validates that an address exists, isn't null, and is properly
 * formatted for Wyvern and OpenSea
 * @param address input address
 */
export function validateAndFormatWalletAddress(web3: Web3, address: string): string {
  if (!address) {
    throw new Error('No wallet address found')
  }
  if (!web3.isAddress(address)) {
    throw new Error('Invalid wallet address')
  }
  if (address == NULL_ADDRESS) {
    throw new Error('Wallet cannot be the null address')
  }
  return address.toLowerCase()
}

/**
 * Notify developer when a pattern will be deprecated
 * @param msg message to log to console
 */
export function onDeprecated(msg: string) {
  console.warn(`DEPRECATION NOTICE: ${msg}`)
}

/**
 * Get special-case approval addresses for an erc721 contract
 * @param erc721Contract contract to check
 */
export async function getNonCompliantApprovalAddress(erc721Contract: Web3.ContractInstance, tokenId: string, accountAddress: string): Promise<string | undefined> {

  const results = await Promise.all([
    // CRYPTOKITTIES check
    promisifyCall<string>(c => erc721Contract.kittyIndexToApproved.call(tokenId, c)),
    // Etherbots check
    promisifyCall<string>(c => erc721Contract.partIndexToApproved.call(tokenId, c)),
  ])

  return _.compact(results)[0]
}

'''
'''--- test/api/api.ts ---
import {
  assert
} from 'chai'
import {
  suite,
  test
} from 'mocha-typescript'
import * as Web3 from 'web3'
import { WyvernProtocol } from 'wyvern-js'
import { orderToJSON } from '../../src'
import { MAINNET_PROVIDER_URL, NULL_ADDRESS, ORDERBOOK_VERSION, ORDER_MATCHING_LATENCY_SECONDS } from '../../src/constants'
import { OpenSeaPort } from '../../src/index'
import { Network, OrderSide } from '../../src/types'
import { getOrderHash, makeBigNumber } from '../../src/utils/utils'
import { ALEX_ADDRESS, apiToTest, CK_ADDRESS, CK_RINKEBY_ADDRESS, CK_RINKEBY_SELLER_FEE, CK_RINKEBY_TOKEN_ID, mainApi, MAINNET_API_KEY, MYTHEREUM_ADDRESS, MYTHEREUM_TOKEN_ID, rinkebyApi, RINKEBY_API_KEY, WETH_ADDRESS } from '../constants'

const provider = new Web3.providers.HttpProvider(MAINNET_PROVIDER_URL)

const client = new OpenSeaPort(provider, {
  networkName: Network.Main,
  apiKey: MAINNET_API_KEY
}, line => console.info(`MAINNET: ${line}`))

suite('api', () => {

  test('API has correct base url', () => {
    assert.equal(mainApi.apiBaseUrl, 'https://api.opensea.io')
    assert.equal(rinkebyApi.apiBaseUrl, 'https://testnets-api.opensea.io')
  })

  test('API fetches bundles and prefetches sell orders', async () => {
    const { bundles } = await apiToTest.getBundles({asset_contract_address: CK_RINKEBY_ADDRESS})
    assert.isArray(bundles)

    const bundle = bundles[0]
    assert.isNotNull(bundle)
    if (!bundle) {
      return
    }
    assert.include(bundle.assets.map(a => a.assetContract.name), "CryptoKittiesRinkeby")
    assert.isNotEmpty(bundle.sellOrders)
  })

  test('Includes API key in token request', async () => {
    const oldLogger = rinkebyApi.logger

    const logPromise = new Promise<void>((resolve, reject) => {
      rinkebyApi.logger = log => {
        try {
          assert.include(log, `"X-API-KEY":"${RINKEBY_API_KEY}"`)
          resolve()
        } catch (e) {
          reject(e)
        } finally {
          rinkebyApi.logger = oldLogger
        }
      }
      rinkebyApi.getPaymentTokens({ symbol: "WETH" })
    })

    await logPromise
  })

  test('An API asset\'s order has correct hash', async () => {
    const asset = await mainApi.getAsset({ tokenAddress: CK_ADDRESS, tokenId: 1 })
    assert.isNotNull(asset.orders)
    if (!asset.orders) {
      return
    }
    const order = asset.orders[0]
    assert.isNotNull(order)
    if (!order) {
      return
    }
    assert.equal(order.hash, getOrderHash(order))
  })

  test('orderToJSON is correct', async () => {
    const accountAddress = ALEX_ADDRESS
    const quantity = 1
    const amountInToken = 1.2
    const paymentTokenAddress = WETH_ADDRESS
    const extraBountyBasisPoints = 0
    const expirationTime = Math.round(Date.now() / 1000 + 60) // one minute from now
    const englishAuctionReservePrice = 2

    const tokenId = MYTHEREUM_TOKEN_ID.toString()
    const tokenAddress = MYTHEREUM_ADDRESS
    const order = await client._makeSellOrder({
      asset: { tokenAddress, tokenId },
      quantity,
      accountAddress,
      startAmount: amountInToken,
      paymentTokenAddress,
      extraBountyBasisPoints,
      buyerAddress: NULL_ADDRESS,
      expirationTime,
      waitForHighestBid: true,
      englishAuctionReservePrice,
    })

    const hashedOrder = {
      ...order,
      hash: getOrderHash(order)
    }

    const orderData = orderToJSON(hashedOrder)
    assert.equal(orderData.quantity, quantity.toString())
    assert.equal(orderData.maker, accountAddress)
    assert.equal(orderData.taker, NULL_ADDRESS)
    assert.equal(orderData.basePrice, WyvernProtocol.toBaseUnitAmount(makeBigNumber(amountInToken), 18).toString())
    assert.equal(orderData.paymentToken, paymentTokenAddress)
    assert.equal(orderData.extra, extraBountyBasisPoints.toString())
    assert.equal(orderData.expirationTime, expirationTime + ORDER_MATCHING_LATENCY_SECONDS)
    assert.equal(orderData.englishAuctionReservePrice, WyvernProtocol.toBaseUnitAmount(makeBigNumber(englishAuctionReservePrice), 18).toString())
  })

  test('API fetches tokens', async () => {
    const { tokens } = await apiToTest.getPaymentTokens({ symbol: "MANA" })
    assert.isArray(tokens)
    assert.equal(tokens.length, 1)
    assert.equal(tokens[0].name, "Decentraland MANA")
  })

  test('Rinkeby API orders have correct OpenSea url', async () => {
    const order = await rinkebyApi.getOrder({})
    if (!order.asset) {
      return
    }
    const url = `https://testnets.opensea.io/assets/${order.asset.assetContract.address}/${order.asset.tokenId}`
    assert.equal(order.asset.openseaLink, url)
  })

  test('Mainnet API orders have correct OpenSea url', async () => {
    const order = await mainApi.getOrder({})
    if (!order.asset) {
      return
    }
    const url = `https://opensea.io/assets/${order.asset.assetContract.address}/${order.asset.tokenId}`
    assert.equal(order.asset.openseaLink, url)
  })

  test('API fetches orderbook', async () => {
    const {orders, count} = await apiToTest.getOrders()
    assert.isArray(orders)
    assert.isNumber(count)
    assert.equal(orders.length, apiToTest.pageSize)
    // assert.isAtLeast(count, orders.length)
  })

  test('API can change page size', async () => {
    const defaultPageSize = apiToTest.pageSize
    apiToTest.pageSize = 7
    const {orders} = await apiToTest.getOrders()
    assert.equal(orders.length, 7)
    apiToTest.pageSize = defaultPageSize
  })

  if (ORDERBOOK_VERSION > 0) {
    test('API orderbook paginates', async () => {
      const {orders, count} = await apiToTest.getOrders()
      const pagination = await apiToTest.getOrders({}, 2)
      assert.equal(pagination.orders.length, apiToTest.pageSize)
      assert.notDeepEqual(pagination.orders[0], orders[0])
      assert.equal(pagination.count, count)
    })
  }

  test('API fetches orders for asset contract and asset', async () => {
    const forKitties = await apiToTest.getOrders({asset_contract_address: CK_RINKEBY_ADDRESS})
    assert.isAbove(forKitties.orders.length, 0)
    assert.isAbove(forKitties.count, 0)

    const forKitty = await apiToTest.getOrders({asset_contract_address: CK_RINKEBY_ADDRESS, token_id: CK_RINKEBY_TOKEN_ID})
    assert.isArray(forKitty.orders)
  })

  test('API fetches orders for asset owner', async () => {
    const forOwner = await apiToTest.getOrders({owner: ALEX_ADDRESS})
    assert.isAbove(forOwner.orders.length, 0)
    assert.isAbove(forOwner.count, 0)
    const owners = forOwner.orders.map(o => o.asset && o.asset.owner && o.asset.owner.address)
    owners.forEach(owner => {
      assert.include([ALEX_ADDRESS, NULL_ADDRESS], owner)
    })
  })

  test('API fetches buy orders for maker', async () => {
    const forMaker = await apiToTest.getOrders({maker: ALEX_ADDRESS, side: OrderSide.Buy})
    assert.isAbove(forMaker.orders.length, 0)
    assert.isAbove(forMaker.count, 0)
    forMaker.orders.forEach(order => {
      assert.equal(ALEX_ADDRESS, order.maker)
      assert.equal(OrderSide.Buy, order.side)
    })
  })

  test("API doesn't fetch impossible orders", async () => {
    try {
      const order = await apiToTest.getOrder({maker: ALEX_ADDRESS, taker: ALEX_ADDRESS})
      assert.fail()
    } catch(e) {
      assert.include(e.message, "Not found")
    }
  })

  test('API excludes cancelledOrFinalized and markedInvalid orders', async () => {
    const {orders} = await apiToTest.getOrders({limit: 50})
    const finishedOrders = orders.filter(o => o.cancelledOrFinalized)
    assert.isEmpty(finishedOrders)
    const invalidOrders = orders.filter(o => o.markedInvalid)
    assert.isEmpty(invalidOrders)
  })

  test('API fetches fees for an asset', async () => {
    const asset = await apiToTest.getAsset({ tokenAddress: CK_RINKEBY_ADDRESS, tokenId: CK_RINKEBY_TOKEN_ID })
    assert.equal(asset.tokenId, CK_RINKEBY_TOKEN_ID.toString())
    assert.equal(asset.assetContract.name, "CryptoKittiesRinkeby")
    assert.equal(asset.assetContract.sellerFeeBasisPoints, CK_RINKEBY_SELLER_FEE)
  })

  test('API fetches assets', async () => {
    const { assets } = await apiToTest.getAssets({asset_contract_address: CK_RINKEBY_ADDRESS, order_by: "current_price"})
    assert.isArray(assets)
    assert.equal(assets.length, apiToTest.pageSize)

    const asset = assets[0]
    assert.equal(asset.assetContract.name, "CryptoKittiesRinkeby")
  })

  test('API handles errors', async () => {
    // 401 Unauthorized
    try {
      await apiToTest.get('/user')
    } catch (error) {
      assert.include(error.message, "Unauthorized")
    }

    // 404 Not found
    try {
      await apiToTest.get(`/asset/${CK_RINKEBY_ADDRESS}/0`)
    } catch (error) {
      assert.include(error.message, "Not found")
    }

    // 400 malformed
    const res = await apiToTest.getOrders({
      // Get an old order to make sure listing time is too early
      listed_before: Math.round(Date.now() / 1000 - 3600)
    })
    const order = res.orders[0]
    assert.isNotNull(order)

    try {
      const newOrder = {
        ...orderToJSON(order),
        v: 1,
        r: "",
        s: ""
      }
      await apiToTest.postOrder(newOrder)
    } catch (error) {
      // TODO sometimes the error is "Expected the listing time to be at or past the current time"
      // assert.include(error.message, "Order failed exchange validation")
    }
  })
})

'''
'''--- test/constants.ts ---
import { OpenSeaAPI } from '../src/api'
import { Network } from '../src/types'
import {CK_ADDRESS, CK_RINKEBY_ADDRESS} from '../src/constants'

export const MAINNET_API_KEY = "f657f0172a3b4b61bffec08c376dbaf8"
export const RINKEBY_API_KEY = "af3f190b8f2d4d98b51499ae40315829"

export const mainApi = new OpenSeaAPI({
  apiKey: MAINNET_API_KEY,
  networkName: Network.Main
}, console.info)

export const rinkebyApi = new OpenSeaAPI({
  apiKey: RINKEBY_API_KEY,
  networkName: Network.Rinkeby
}, console.info)

export const apiToTest = rinkebyApi

export {
  CK_ADDRESS,
  CK_RINKEBY_ADDRESS
}
export const GODS_UNCHAINED_ADDRESS = '0x6ebeaf8e8e946f0716e6533a6f2cefc83f60e8ab'
export const CRYPTO_CRYSTAL_ADDRESS = '0xcfbc9103362aec4ce3089f155c2da2eea1cb7602'
export const DIGITAL_ART_CHAIN_ADDRESS = '0x323a3e1693e7a0959f65972f3bf2dfcb93239dfe'
export const MYTHEREUM_ADDRESS = '0xc70be5b7c19529ef642d16c10dfe91c58b5c3bf0'
export const DIGITAL_ART_CHAIN_TOKEN_ID = 189
export const GODS_UNCHAINED_TOKEN_ID = 76719
export const MYTHEREUM_TOKEN_ID = 4367
export const CK_RINKEBY_BUNDLE_SLUG = 'puff-kitty'
export const WETH_ADDRESS = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
export const ENS_RINKEBY_TOKEN_ADDRESS = '0x53ceb15b76023fbec5bb39450214926f6aa77d2e'
export const ENS_RINKEBY_SHORT_NAME_OWNER = '0xe0ee13cd5a45e7fa140409edfc9ce17c7b11e6d2'
export const ENS_HELLO_TOKEN_ID = '12910348618308260923200348219926901280687058984330794534952861439530514639560'
export const ENS_HELLO_NAME = 'hello'

export const CK_RINKEBY_TOKEN_ID = 1068
export const CK_TOKEN_ID = 637488
export const CRYPTOPUNKS_ID = 7858
export const CK_RINKEBY_SELLER_FEE = 250

// Toasta Gun, NFT
export const CATS_IN_MECHS_ID = '11081664790290028159747096595969945056246807881612483124155840544084353614722'
// Bounty, FT
export const AGE_OF_RUST_TOKEN_ID = '10855508365998404086189256032722001339622921863551706494238735756561045520384'
export const CRYPTOVOXELS_WEARABLE_ADDRESS = '0xa58b5224e2fd94020cb2837231b2b0e4247301a6'
export const CRYPTOVOXELS_WEARABLE_ID = '908'
export const CRYPTOVOXELS_WEARABLE_2_ID = '693'
export const DECENTRALAND_ADDRESS = '0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d'
export const DECENTRALAND_ID = '115792089237316195423570985008687907840339254722644902427849348925505937604680'
export const DISSOLUTION_TOKEN_ID = '39803530675327460487158288219684256433559304725576879659134376004308812431360'
export const CRYPTOFLOWERS_CONTRACT_ADDRESS_WITH_BUYER_FEE = '0x8bc67d00253fd60b1afcce88b78820413139f4c6'
export const CRYPTOPUNKS_ADDRESS = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'
export const SANDBOX_RINKEBY_ADDRESS = '0xcdeadfb2caa81d8c16d2935f3e379dda61242be9'
export const SANDBOX_RINKEBY_ID = '44221324190444972628403853229966997983936414854632412290085204005353951330306'
export const SPIRIT_CLASH_TOKEN_ID = '10855508365998412378240648478527290366700749920879042165450277893550637056000'
export const SPIRIT_CLASH_OWNER = '0x6a846239658f5a16a0b5977e1c0d007bc13267f0'
export const BENZENE_ADDRESS = '0x6524b87960c2d573ae514fd4181777e7842435d4'
export const GODS_UNCHAINED_CHEST_ADDRESS = '0xee85966b4974d3c6f71a2779cc3b6f53afbc2b68'

export const ALEX_ADDRESS = '0xe96a1b303a1eb8d04fb973eb2b291b8d591c8f72'
export const RANDOM_ADDRESS = '0x196a1b303a1eb8d04fb973eb2b291b8d591c8f72'
export const ALEX_ADDRESS_2 = '0x431e44389a003f0ec6e83b3578db5075a44ac523'
export const DEVIN_ADDRESS = '0x0239769a1adf4def9f07da824b80b9c4fcb59593'
export const DAN_ADDRESS = '0x530cf036ed4fa58f7301a9c788c9806624cefd19'
export const DAN_DAPPER_ADDRESS = '0x4819352bd7fadcCFAA8A2cDA4b2825a9ec51417c'

'''
'''--- test/fixtures/orders.json ---
[
  {"created_date": "2019-01-29T04:04:03.258323", "order_hash": "0x3f8d16507c4d9905815e860324d64b9c9f5933a70e59c2a07a63320459f67826", "metadata": {"asset": {"id": "505", "address": "0x16baf0de678e52367adc69fd067e5edd1d33e3bf"}, "schema": "ERC721"}, "exchange": "0x5206e78b21ce315ce284fb24cf05e0585a93b1d9", "maker": {"user": {"username": "alex2"}, "profile_img_url": "https://storage.googleapis.com/opensea-static/opensea-profile/11.png", "address": "0xe96a1b303a1eb8d04fb973eb2b291b8d591c8f72", "config": "affiliate"}, "taker": {"user": null, "profile_img_url": "https://storage.googleapis.com/opensea-static/opensea-profile/1.png", "address": "0x0000000000000000000000000000000000000000", "config": ""}, "current_price": "10000000000000000", "current_bounty": "100000000000000.0", "maker_relayer_fee": "100", "taker_relayer_fee": "250", "maker_protocol_fee": "0", "taker_protocol_fee": "0", "maker_referrer_fee": "0", "fee_recipient": {"user": null, "profile_img_url": "https://storage.googleapis.com/opensea-static/opensea-profile/1.png", "address": "0x0000000000000000000000000000000000000000", "config": ""}, "fee_method": 1, "side": 1, "sale_kind": 0, "target": "0x16baf0de678e52367adc69fd067e5edd1d33e3bf", "how_to_call": 0, "calldata": "0x23b872dd000000000000000000000000e96a1b303a1eb8d04fb973eb2b291b8d591c8f72000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f9", "replacement_pattern": "0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000", "static_target": "0x0000000000000000000000000000000000000000", "static_extradata": "0x", "payment_token": "0xc778417e063141139fce010982780140aa0cd5ab", "payment_token_contract": {"address": "0xc778417e063141139fce010982780140aa0cd5ab", "image_url": null, "name": "Wrapped Ether", "symbol": "WETH", "decimals": 18, "eth_price": "1.000000000000000"}, "base_price": "10000000000000000", "extra": "0", "listing_time": 1548734810, "expiration_time": 0, "salt": "83006245783548033686093530747847303952463217644495033304999143031082661844460", "v": 28, "r": "0x2a0b0f3b8e6705cdf7894d9f1fb547646c5502a9d1d993c308ed0310620cf660", "s": "0x19211a9a0c3ab3bb94b840774a2f9badf637b95d90b68965a4cf3734d5eaba98", "cancelled": false, "finalized": false, "marked_invalid": false, "prefixed_hash": "0x98a07dfb9e4da7ffc0ad0fb230afc8684dc4a0ac44623eded6a4c42e1df99954"},
  {
      "exchange": "0x0000000000000000000000000000000000000000",
      "maker": {"address": "0x0000000000000000000000000000000000000000"},
      "taker": {"address": "0x0000000000000000000000000000000000000000"},
      "maker_relayer_fee": "0",
      "taker_relayer_fee": "0",
      "maker_protocol_fee": "0",
      "taker_protocol_fee": "0",
      "fee_recipient": {"address": "0x0000000000000000000000000000000000000000"},
      "fee_method": "0",
      "side": "0",
      "sale_kind": "0",
      "target": "0x0000000000000000000000000000000000000000",
      "how_to_call": "0",
      "calldata": "0x",
      "replacement_pattern": "0x",
      "static_target": "0x0000000000000000000000000000000000000000",
      "static_extradata": "0x",
      "payment_token": "0x0000000000000000000000000000000000000000",
      "base_price": "0",
      "extra": "0",
      "listing_time": "0",
      "expiration_time": "0",
      "salt": "0",
      "order_hash": "0x611bdaa1abb525bcc8a261575b72b1dd796cd309cfbf25783df67d88385e458a"
  },
  {
      "exchange": "0x3177ea64b90543b5706f6661549fd4bd8baebb1e",
      "maker": {"address": "0x065abe5f01cf94d37762780695cf19b151ed5809"},
      "taker": {"address": "0x0000000000000000000000000000000000000000"},
      "maker_relayer_fee": "0",
      "taker_relayer_fee": "0",
      "maker_protocol_fee": "0",
      "taker_protocol_fee": "0",
      "fee_method": "0",
      "fee_recipient": {"address": "0x11db40014e2985c360b3f2a4ba350fbf104dc326"},
      "side": "0",
      "sale_kind": "0",
      "target": "0x16baf0de678e52367adc69fd067e5edd1d33e3bf",
      "how_to_call": "0",
      "calldata": "0x23b872dd0000000000000000000000001111111111111111111111111111111111111111000000000000000000000000065abe5f01cf94d37762780695cf19b151ed5809000000000000000000000000000000000000000000000000000000000000006f",
      "replacement_pattern": "0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "static_target": "0x0000000000000000000000000000000000000000",
      "static_extradata": "0x",
      "payment_token": "0xc778417e063141139fce010982780140aa0cd5ab",
      "base_price": "20000000000000000",
      "extra": "0",
      "listing_time": "1528769775",
      "expiration_time": "0",
      "salt": "53846990274470578006430928947393045524278076945060732094139894196992264138607",
      "order_hash": "0x9ff08c3956db7cc4fcdad563e65f280ec561dd68e84d6b212ccde09c712a9aba",
      "metadata": {
        "asset": {
          "id": 111,
          "address": "0x16baf0de678e52367adc69fd067e5edd1d33e3bf"
        },
        "schema": "ERC721"
      }
  },
  {
      "order_hash": "0x5045ff865c3b1a0ca4c99e760127b6b969979863f2d3417f4ce06b3e448d7b5a",
      "metadata": {
          "asset": {
              "id": "8576",
              "address": "0xcfbc9103362aec4ce3089f155c2da2eea1cb7602"
          },
          "schema": "ERC721"
      },
      "exchange": "0x7be8076f4ea4a4ad08075c2508e481d6c946d12b",
      "maker": {
          "user": 462,
          "profile_img_url": "https://storage.googleapis.com/opensea-static/opensea-profile/30.png",
          "address": "0x223edbc8166ba1b514729261ff53fb8c73ab4d79",
          "config": ""
      },
      "taker": {
          "user": 1766,
          "profile_img_url": "https://storage.googleapis.com/opensea-static/opensea-profile/1.png",
          "address": "0x0000000000000000000000000000000000000000",
          "config": ""
      },
      "current_price": "7174257768513290",
      "maker_relayer_fee": "250",
      "taker_relayer_fee": "0",
      "maker_protocol_fee": "0",
      "taker_protocol_fee": "0",
      "fee_recipient": {
          "user": null,
          "profile_img_url": "https://storage.googleapis.com/opensea-static/opensea-profile/28.png",
          "address": "0x5b3256965e7c3cf26e11fcaf296dfc8807c01073",
          "config": ""
      },
      "fee_method": 1,
      "side": 1,
      "sale_kind": 1,
      "target": "0xcfbc9103362aec4ce3089f155c2da2eea1cb7602",
      "how_to_call": 0,
      "calldata": "0x23b872dd000000000000000000000000223edbc8166ba1b514729261ff53fb8c73ab4d7900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002180",
      "replacement_pattern": "0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000",
      "static_target": "0x0000000000000000000000000000000000000000",
      "static_extradata": "0x",
      "payment_token": "0x0000000000000000000000000000000000000000",
      "base_price": "8500000000000000",
      "extra": "3000000000000001",
      "listing_time": 1534620227,
      "expiration_time": 1535829926,
      "salt": "79790726582490632926414916888561832909222048588204370740711320601991661022189",
      "v": 27,
      "r": "0x6670e13713f0c748b7b679d1263ee444d9ae888ff8a51e86eee308b38284b56b",
      "s": "0x722915ae24400e802ee8d71683629f3ef271517cabcf6b25240719680b841afe",
      "cancelled": false,
      "finalized": false,
      "marked_invalid": false,
      "prefixed_hash": "0x044665f3aca521068b7e2b4b7497c541fcbedf73f64f7fd78d45e74be3b3e6a6"
  },
  {
    "order_hash": "0xa1d001b2bf6db176d53cf58433eccebf35c964ab5c52d1a01870c1346a105fcd",
    "metadata": {
        "asset": {
            "id": "764",
            "address": "0xcfbc9103362aec4ce3089f155c2da2eea1cb7602"
        },
        "schema": "ERC721"
    },
    "exchange": "0x7be8076f4ea4a4ad08075c2508e481d6c946d12b",
    "maker": {
        "user": {
            "username": "wanderer"
        },
        "profile_img_url": "https://storage.googleapis.com/opensea-static/opensea-profile/4.png",
        "address": "0x6be4a7bbb812bfa6a63126ee7b76c8a13529bdb8",
        "config": ""
    },
    "taker": {
        "user": {
            "username": "NullAddress"
        },
        "profile_img_url": "https://storage.googleapis.com/opensea-static/opensea-profile/1.png",
        "address": "0x0000000000000000000000000000000000000000",
        "config": ""
    },
    "current_price": "0.01",
    "maker_relayer_fee": "0",
    "taker_relayer_fee": "0",
    "maker_protocol_fee": "0",
    "taker_protocol_fee": "0",
    "fee_recipient": {
        "user": null,
        "profile_img_url": "https://storage.googleapis.com/opensea-static/opensea-profile/20.png",
        "address": "0x11db40014e2985c360b3f2a4ba350fbf104dc326",
        "config": ""
    },
    "fee_method": 0,
    "side": 0,
    "sale_kind": 0,
    "target": "0xcfbc9103362aec4ce3089f155c2da2eea1cb7602",
    "how_to_call": 0,
    "calldata": "0x23b872dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000006be4a7bbb812bfa6a63126ee7b76c8a13529bdb800000000000000000000000000000000000000000000000000000000000002fc",
    "replacement_pattern": "0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "static_target": "0x0000000000000000000000000000000000000000",
    "static_extradata": "0x",
    "payment_token": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
    "base_price": "10000000000000000",
    "extra": "0",
    "listing_time": 1529186191,
    "expiration_time": 0,
    "salt": "40568100110604210101393766805325371426576667098111185846452878965970704361888",
    "v": 28,
    "r": "0x96ccf4bb243e5c95d9f72364c0fd8daeb036e791c9244bb8c7c9ce1b41f78692",
    "s": "0x56c515bd9c3292864c1dd0b4baebd0aae8610b3fb38597a77a54228297fb9f58",
    "cancelled": false,
    "finalized": false,
    "marked_invalid": false,
    "prefixed_hash": null
  }
]

'''
'''--- test/seaport/bundles.ts ---
import {
  assert,
} from 'chai'

import { before } from 'mocha'

import {
  suite,
  test,
} from 'mocha-typescript'

import { OpenSeaPort } from '../../src/index'
import * as Web3 from 'web3'
import { Network, WyvernSchemaName, UnhashedOrder } from '../../src/types'
import { ALEX_ADDRESS, DIGITAL_ART_CHAIN_ADDRESS, DIGITAL_ART_CHAIN_TOKEN_ID, MYTHEREUM_TOKEN_ID, MYTHEREUM_ADDRESS, MAINNET_API_KEY, DISSOLUTION_TOKEN_ID, GODS_UNCHAINED_CHEST_ADDRESS, CRYPTOVOXELS_WEARABLE_ID, CRYPTOVOXELS_WEARABLE_ADDRESS, AGE_OF_RUST_TOKEN_ID, ALEX_ADDRESS_2, BENZENE_ADDRESS, CRYPTOVOXELS_WEARABLE_2_ID, WETH_ADDRESS } from '../constants'
import { testFeesMakerOrder } from './fees'
import { testMatchingNewOrder } from './orders' 
import {
  MAINNET_PROVIDER_URL,
  NULL_ADDRESS,
  ENJIN_ADDRESS,
} from '../../src/constants'

const provider = new Web3.providers.HttpProvider(MAINNET_PROVIDER_URL)

const client = new OpenSeaPort(provider, {
  networkName: Network.Main,
  apiKey: MAINNET_API_KEY
}, line => console.info(`MAINNET: ${line}`))

const assetsForBundleOrder = [
  { tokenId: MYTHEREUM_TOKEN_ID.toString(), tokenAddress: MYTHEREUM_ADDRESS, quantity: 1 },
  { tokenId: DIGITAL_ART_CHAIN_TOKEN_ID.toString(), tokenAddress: DIGITAL_ART_CHAIN_ADDRESS, quantity: 1 },
]

const fungibleAssetsForBundleOrder = [
  { tokenAddress: BENZENE_ADDRESS, tokenId: null, schemaName: WyvernSchemaName.ERC20, quantity: 20 },
  { tokenAddress: GODS_UNCHAINED_CHEST_ADDRESS, tokenId: null, schemaName: WyvernSchemaName.ERC20, quantity: 1 },
]

const heterogenousSemiFungibleAssetsForBundleOrder = [
  { tokenId: DISSOLUTION_TOKEN_ID, tokenAddress: ENJIN_ADDRESS, schemaName: WyvernSchemaName.ERC1155, quantity: 2 },
  { tokenId: AGE_OF_RUST_TOKEN_ID, tokenAddress: ENJIN_ADDRESS, schemaName: WyvernSchemaName.ERC1155, quantity: 1 },
  { tokenId: CRYPTOVOXELS_WEARABLE_ID, tokenAddress: CRYPTOVOXELS_WEARABLE_ADDRESS, schemaName: WyvernSchemaName.ERC1155, quantity: 1 },
]

const homogenousSemiFungibleAssetsForBundleOrder = [
  { tokenId: CRYPTOVOXELS_WEARABLE_ID, tokenAddress: CRYPTOVOXELS_WEARABLE_ADDRESS, schemaName: WyvernSchemaName.ERC1155, quantity: 1 },
  { tokenId: CRYPTOVOXELS_WEARABLE_2_ID, tokenAddress: CRYPTOVOXELS_WEARABLE_ADDRESS, schemaName: WyvernSchemaName.ERC1155, quantity: 2 },
]

let manaAddress: string

suite('seaport: bundles', () => {

  before(async () => {
    manaAddress = (await client.api.getPaymentTokens({ symbol: 'MANA'})).tokens[0].address
  })

  test('Matches heterogenous bundle buy order', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS
    const amountInEth = 0.01

    const order = await client._makeBundleBuyOrder({
      assets: assetsForBundleOrder,
      quantities: [1, 1],
      accountAddress,
      startAmount: amountInEth,
      extraBountyBasisPoints: 0,
      expirationTime: 0,
      paymentTokenAddress: WETH_ADDRESS
    })

    assert.equal(order.paymentToken, WETH_ADDRESS)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInEth)
    assert.equal(order.extra.toNumber(), 0)
    assert.equal(order.expirationTime.toNumber(), 0)
    testBundleMetadata(order, WyvernSchemaName.ERC721)
    testFeesMakerOrder(order, undefined)

    await client._buyOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test('Matches homogenous bundle buy order', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS
    const amountInToken = 10
    const assets = [{ tokenId: MYTHEREUM_TOKEN_ID.toString(), tokenAddress: MYTHEREUM_ADDRESS }]

    const order = await client._makeBundleBuyOrder({
      assets,
      quantities: [1],
      accountAddress,
      startAmount: amountInToken,
      extraBountyBasisPoints: 0,
      expirationTime: 0,
      paymentTokenAddress: manaAddress
    })

    const asset = await client.api.getAsset(assets[0])

    assert.equal(order.paymentToken, manaAddress)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInToken)
    assert.equal(order.extra.toNumber(), 0)
    assert.equal(order.expirationTime.toNumber(), 0)
    testBundleMetadata(order, WyvernSchemaName.ERC721)
    testFeesMakerOrder(order, asset.collection)

    await client._buyOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test('Matches fixed heterogenous bountied bundle sell order', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS
    const amountInEth = 1
    const bountyPercent = 1.5

    const order = await client._makeBundleSellOrder({
      bundleName: "Test Bundle",
      bundleDescription: "This is a test with different types of assets",
      assets: assetsForBundleOrder,
      quantities: [1, 1],
      accountAddress,
      startAmount: amountInEth,
      extraBountyBasisPoints: bountyPercent * 100,
      expirationTime: 0,
      paymentTokenAddress: NULL_ADDRESS,
      waitForHighestBid: false,
      buyerAddress: NULL_ADDRESS
    })

    assert.equal(order.paymentToken, NULL_ADDRESS)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInEth)
    assert.equal(order.extra.toNumber(), 0)
    assert.equal(order.expirationTime.toNumber(), 0)
    testBundleMetadata(order, WyvernSchemaName.ERC721)
    testFeesMakerOrder(order, undefined, bountyPercent * 100)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test('Matches homogenous, bountied bundle sell order', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS
    const amountInEth = 1
    const bountyPercent = 0.8

    const assets = [{ tokenId: MYTHEREUM_TOKEN_ID.toString(), tokenAddress: MYTHEREUM_ADDRESS }]

    const order = await client._makeBundleSellOrder({
      bundleName: "Test Homogenous Bundle",
      bundleDescription: "This is a test with one type of asset",
      assets,
      quantities: [1],
      accountAddress,
      startAmount: amountInEth,
      extraBountyBasisPoints: bountyPercent * 100,
      expirationTime: 0,
      paymentTokenAddress: NULL_ADDRESS,
      waitForHighestBid: false,
      buyerAddress: NULL_ADDRESS
    })

    const asset = await client.api.getAsset(assets[0])

    assert.equal(order.paymentToken, NULL_ADDRESS)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInEth)
    assert.equal(order.extra.toNumber(), 0)
    assert.equal(order.expirationTime.toNumber(), 0)
    testBundleMetadata(order, WyvernSchemaName.ERC721)
    testFeesMakerOrder(order, asset.collection, bountyPercent * 100)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test('Matches a new bundle sell order for an ERC-20 token (MANA)', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS
    const token = (await client.api.getPaymentTokens({ symbol: 'MANA'})).tokens[0]
    const amountInToken = 2.422

    const order = await client._makeBundleSellOrder({
      bundleName: "Test Bundle",
      bundleDescription: "This is a test with different types of assets",
      assets: assetsForBundleOrder,
      quantities: [1, 1],
      accountAddress,
      startAmount: amountInToken,
      paymentTokenAddress: token.address,
      extraBountyBasisPoints: 0,
      expirationTime: 0,
      waitForHighestBid: false,
      buyerAddress: NULL_ADDRESS
    })

    assert.equal(order.paymentToken, token.address)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, token.decimals) * amountInToken)
    assert.equal(order.extra.toNumber(), 0)
    testBundleMetadata(order, WyvernSchemaName.ERC721)
    assert.equal(order.expirationTime.toNumber(), 0)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test('Matches Dutch bundle order for different approve-all assets', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS
    const expirationTime = Math.round(Date.now() / 1000 + 60 * 60 * 24) // one day from now
    const amountInEth = 1

    const order = await client._makeBundleSellOrder({
      bundleName: "Test Bundle",
      bundleDescription: "This is a test with different types of assets",
      assets: assetsForBundleOrder,
      quantities: [1, 1],
      accountAddress,
      startAmount: amountInEth,
      endAmount: 0,
      expirationTime,
      extraBountyBasisPoints: 0,
      waitForHighestBid: false,
      buyerAddress: NULL_ADDRESS,
      paymentTokenAddress: NULL_ADDRESS
    })

    assert.equal(order.paymentToken, NULL_ADDRESS)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInEth)
    assert.equal(order.extra.toNumber(), Math.pow(10, 18) * amountInEth)
    assert.equal(order.expirationTime.toNumber(), expirationTime)
    testBundleMetadata(order, WyvernSchemaName.ERC721)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test('Can bundle multiple fungible tokens together', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS
    const amountInEth = 1

    const order = await client._makeBundleSellOrder({
      bundleName: "Test Bundle",
      bundleDescription: "This is a test with fungible assets",
      assets: fungibleAssetsForBundleOrder,
      quantities: fungibleAssetsForBundleOrder.map(a => a.quantity),
      accountAddress,
      startAmount: amountInEth,
      expirationTime: 0,
      extraBountyBasisPoints: 0,
      waitForHighestBid: false,
      buyerAddress: NULL_ADDRESS,
      paymentTokenAddress: NULL_ADDRESS
    })

    assert.equal(order.paymentToken, NULL_ADDRESS)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInEth)
    testBundleMetadata(order, WyvernSchemaName.ERC20)
    testFeesMakerOrder(order, undefined)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test('Can bundle multiple SFTs together', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS
    const amountInEth = 1

    const order = await client._makeBundleSellOrder({
      bundleName: "Test Bundle",
      bundleDescription: "This is a test with SFT assets",
      assets: heterogenousSemiFungibleAssetsForBundleOrder,
      quantities: heterogenousSemiFungibleAssetsForBundleOrder.map(a => a.quantity),
      accountAddress,
      startAmount: amountInEth,
      expirationTime: 0,
      extraBountyBasisPoints: 0,
      waitForHighestBid: false,
      buyerAddress: NULL_ADDRESS,
      paymentTokenAddress: NULL_ADDRESS
    })

    assert.equal(order.paymentToken, NULL_ADDRESS)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInEth)
    testBundleMetadata(order, WyvernSchemaName.ERC1155)
    testFeesMakerOrder(order, undefined)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test('Can bundle multiple homogenous semifungibles', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS
    const amountInEth = 1
    const asset = await client.api.getAsset(homogenousSemiFungibleAssetsForBundleOrder[0])

    const order = await client._makeBundleSellOrder({
      bundleName: "Test Bundle",
      bundleDescription: "This is a test with homogenous SFT assets",
      assets: homogenousSemiFungibleAssetsForBundleOrder,
      collection: asset.collection,
      quantities: homogenousSemiFungibleAssetsForBundleOrder.map(a => a.quantity),
      accountAddress,
      startAmount: amountInEth,
      expirationTime: 0,
      extraBountyBasisPoints: 0,
      waitForHighestBid: false,
      buyerAddress: NULL_ADDRESS,
      paymentTokenAddress: NULL_ADDRESS
    })

    assert.equal(order.paymentToken, NULL_ADDRESS)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInEth)
    testBundleMetadata(order, WyvernSchemaName.ERC1155)
    testFeesMakerOrder(order, asset.collection)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test('Matches bundle sell order for misordered assets with different schemas', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS_2
    const amountInEth = 1
    const assets = [
      assetsForBundleOrder[0],
      fungibleAssetsForBundleOrder[0],
      heterogenousSemiFungibleAssetsForBundleOrder[0]]

    const order = await client._makeBundleSellOrder({
      bundleName: "Test Bundle",
      bundleDescription: "This is a test with different schemas of assets",
      assets,
      quantities: assets.map(a => a.quantity),
      accountAddress,
      startAmount: amountInEth,
      expirationTime: 0,
      extraBountyBasisPoints: 0,
      waitForHighestBid: false,
      buyerAddress: NULL_ADDRESS,
      paymentTokenAddress: NULL_ADDRESS
    })

    assert.equal(order.paymentToken, NULL_ADDRESS)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInEth)
    testFeesMakerOrder(order, undefined)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })
  
  test('Matches bundle buy order for misordered assets with different schemas', async () => {
    const accountAddress = ALEX_ADDRESS_2
    const takerAddress = ALEX_ADDRESS
    const amountInEth = 0.01
    const assets = [
      assetsForBundleOrder[0],
      fungibleAssetsForBundleOrder[0],
      heterogenousSemiFungibleAssetsForBundleOrder[0]]

    const order = await client._makeBundleBuyOrder({
      assets,
      quantities: assets.map(a => a.quantity),
      accountAddress,
      startAmount: amountInEth,
      expirationTime: 0,
      extraBountyBasisPoints: 0,
      paymentTokenAddress: WETH_ADDRESS
    })

    assert.equal(order.paymentToken, WETH_ADDRESS)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInEth)
    assert.equal(order.extra.toNumber(), 0)
    assert.equal(order.expirationTime.toNumber(), 0)
    testFeesMakerOrder(order, undefined)

    await client._buyOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

})

function testBundleMetadata(order: UnhashedOrder, schemaName: WyvernSchemaName) {
  assert.containsAllKeys(order.metadata, ['bundle'])
  if (!('bundle' in order.metadata)) {
    return
  }
  assert.isNotEmpty(order.metadata.bundle.assets)
  const expectedSchemas = order.metadata.bundle.assets.map(a => schemaName)
  assert.deepEqual(order.metadata.bundle.schemas, expectedSchemas)
}

'''
'''--- test/seaport/fees.ts ---
import BigNumber from 'bignumber.js'
import {
  assert
} from 'chai'
import { before } from 'mocha'
import {
  suite,
  test
} from 'mocha-typescript'
import * as Web3 from 'web3'
import {
  DEFAULT_BUYER_FEE_BASIS_POINTS,
  DEFAULT_MAX_BOUNTY,
  DEFAULT_SELLER_FEE_BASIS_POINTS,
  ENJIN_ADDRESS,
  ENJIN_COIN_ADDRESS, MAINNET_PROVIDER_URL, NULL_ADDRESS, OPENSEA_FEE_RECIPIENT,
  OPENSEA_SELLER_BOUNTY_BASIS_POINTS
} from '../../src/constants'
import { OpenSeaPort } from '../../src/index'
import { FeeMethod, Network, OpenSeaAsset, OpenSeaCollection, Order, OrderSide, UnhashedOrder } from '../../src/types'
import { getOrderHash } from '../../src/utils/utils'
import {
  ALEX_ADDRESS,
  CATS_IN_MECHS_ID, CK_ADDRESS, CK_TOKEN_ID, DECENTRALAND_ADDRESS,
  DECENTRALAND_ID, MAINNET_API_KEY, MYTHEREUM_ADDRESS, MYTHEREUM_TOKEN_ID, SPIRIT_CLASH_OWNER, SPIRIT_CLASH_TOKEN_ID, WETH_ADDRESS
} from '../constants'

const provider = new Web3.providers.HttpProvider(MAINNET_PROVIDER_URL)

const client = new OpenSeaPort(provider, {
  networkName: Network.Main,
  apiKey: MAINNET_API_KEY
}, line => console.info(`MAINNET: ${line}`))

let asset: OpenSeaAsset
const expirationTime = Math.round(Date.now() / 1000 + 60 * 60 * 24) // one day from now

suite('seaport: fees', () => {
  before(async () => {
    const tokenId = MYTHEREUM_TOKEN_ID.toString()
    const tokenAddress = MYTHEREUM_ADDRESS
    asset = await client.api.getAsset({ tokenAddress, tokenId })
    assert.isNotNull(asset)
  })

  test("Computes fees correctly for non-zero-fee asset", async () => {
    const bountyPercent = 1.5
    const extraBountyBasisPoints = bountyPercent * 100

    const collection = asset.collection
    const buyerFeeBasisPoints = collection.openseaBuyerFeeBasisPoints + collection.devBuyerFeeBasisPoints
    const sellerFeeBasisPoints = collection.openseaSellerFeeBasisPoints + collection.devSellerFeeBasisPoints

    const buyerFees = await client.computeFees({
      asset,
      extraBountyBasisPoints,
      side: OrderSide.Buy
    })
    assert.equal(buyerFees.totalBuyerFeeBasisPoints, buyerFeeBasisPoints)
    assert.equal(buyerFees.totalSellerFeeBasisPoints, sellerFeeBasisPoints)
    assert.equal(buyerFees.devBuyerFeeBasisPoints, collection.devBuyerFeeBasisPoints)
    assert.equal(buyerFees.devSellerFeeBasisPoints, collection.devSellerFeeBasisPoints)
    assert.equal(buyerFees.openseaBuyerFeeBasisPoints, collection.openseaBuyerFeeBasisPoints)
    assert.equal(buyerFees.openseaSellerFeeBasisPoints, collection.openseaSellerFeeBasisPoints)
    assert.equal(buyerFees.sellerBountyBasisPoints, 0)

    const sellerFees = await client.computeFees({
      asset,
      extraBountyBasisPoints,
      side: OrderSide.Sell
    })
    assert.equal(sellerFees.totalBuyerFeeBasisPoints, buyerFeeBasisPoints)
    assert.equal(sellerFees.totalSellerFeeBasisPoints, sellerFeeBasisPoints)
    assert.equal(sellerFees.devBuyerFeeBasisPoints, collection.devBuyerFeeBasisPoints)
    assert.equal(sellerFees.devSellerFeeBasisPoints, collection.devSellerFeeBasisPoints)
    assert.equal(sellerFees.openseaBuyerFeeBasisPoints, collection.openseaBuyerFeeBasisPoints)
    assert.equal(sellerFees.openseaSellerFeeBasisPoints, collection.openseaSellerFeeBasisPoints)
    assert.equal(sellerFees.sellerBountyBasisPoints, extraBountyBasisPoints)

    const heterogenousBundleSellerFees = await client.computeFees({
      extraBountyBasisPoints,
      side: OrderSide.Sell
    })
    assert.equal(heterogenousBundleSellerFees.totalBuyerFeeBasisPoints, DEFAULT_BUYER_FEE_BASIS_POINTS)
    assert.equal(heterogenousBundleSellerFees.totalSellerFeeBasisPoints, DEFAULT_SELLER_FEE_BASIS_POINTS)
    assert.equal(heterogenousBundleSellerFees.devBuyerFeeBasisPoints, 0)
    assert.equal(heterogenousBundleSellerFees.devSellerFeeBasisPoints, 0)
    assert.equal(heterogenousBundleSellerFees.openseaBuyerFeeBasisPoints, DEFAULT_BUYER_FEE_BASIS_POINTS)
    assert.equal(heterogenousBundleSellerFees.openseaSellerFeeBasisPoints, DEFAULT_SELLER_FEE_BASIS_POINTS)
    assert.equal(heterogenousBundleSellerFees.sellerBountyBasisPoints, extraBountyBasisPoints)
  })

  test.skip("Computes fees correctly for zero-fee asset", async () => {
    const asset = await client.api.getAsset({ tokenAddress: DECENTRALAND_ADDRESS, tokenId: DECENTRALAND_ID })
    const bountyPercent = 0

    const buyerFees = await client.computeFees({
      asset,
      extraBountyBasisPoints: bountyPercent * 100,
      side: OrderSide.Buy
    })
    assert.equal(buyerFees.totalBuyerFeeBasisPoints, 0)
    assert.equal(buyerFees.totalSellerFeeBasisPoints, 0)
    assert.equal(buyerFees.devBuyerFeeBasisPoints, 0)
    assert.equal(buyerFees.devSellerFeeBasisPoints, 0)
    assert.equal(buyerFees.openseaBuyerFeeBasisPoints, 0)
    assert.equal(buyerFees.openseaSellerFeeBasisPoints, 0)
    assert.equal(buyerFees.sellerBountyBasisPoints, 0)

    const sellerFees = await client.computeFees({
      asset,
      extraBountyBasisPoints: bountyPercent * 100,
      side: OrderSide.Sell
    })
    assert.equal(sellerFees.totalBuyerFeeBasisPoints, 0)
    assert.equal(sellerFees.totalSellerFeeBasisPoints, 0)
    assert.equal(sellerFees.devBuyerFeeBasisPoints, 0)
    assert.equal(sellerFees.devSellerFeeBasisPoints, 0)
    assert.equal(sellerFees.openseaBuyerFeeBasisPoints, 0)
    assert.equal(sellerFees.openseaSellerFeeBasisPoints, 0)
    assert.equal(sellerFees.sellerBountyBasisPoints, bountyPercent * 100)

  })

  test("Errors for computing fees correctly", async () => {

    try {
      await client.computeFees({
        asset,
        extraBountyBasisPoints: 200,
        side: OrderSide.Sell
      })
      assert.fail()
    } catch (error) {
      if (!error.message.includes('bounty exceeds the maximum') ||
          !error.message.includes('OpenSea will add')) {
        assert.fail(error.message)
      }
    }
  })

  test('First page of orders have valid hashes and fees', async () => {
    const { orders } = await client.api.getOrders()
    assert.isNotEmpty(orders)

    orders.forEach(order => {
      if (order.asset) {
        assert.isNotEmpty(order.asset.assetContract)
        assert.isNotEmpty(order.asset.tokenId)
        testFeesMakerOrder(order, order.asset.collection)
      }
      assert.isNotEmpty(order.paymentTokenContract)

      const accountAddress = ALEX_ADDRESS
      const matchingOrder = client._makeMatchingOrder({
        order,
        accountAddress,
        recipientAddress: accountAddress
      })
      const matchingOrderHash = matchingOrder.hash

      const orderHash = getOrderHash(matchingOrder)
      assert.equal(orderHash, matchingOrderHash)
    })
  })

  test("Computes per-transfer fees correctly, Enjin and CK", async () => {

    const asset = await client.api.getAsset({ tokenAddress: ENJIN_ADDRESS, tokenId: CATS_IN_MECHS_ID })

    const zeroTransferFeeAsset = await client.api.getAsset({ tokenAddress: CK_ADDRESS, tokenId: CK_TOKEN_ID })

    const sellerFees = await client.computeFees({
      asset,
      side: OrderSide.Sell
    })

    const sellerZeroFees = await client.computeFees({
      asset: zeroTransferFeeAsset,
      side: OrderSide.Sell
    })

    assert.equal(sellerZeroFees.transferFee.toString(), "0")
    assert.isNull(sellerZeroFees.transferFeeTokenAddress)

    assert.equal(sellerFees.transferFee.toString(), "1000000000000000000")
    assert.equal(sellerFees.transferFeeTokenAddress, ENJIN_COIN_ADDRESS)
  })

  // NOTE: Enjin platform limitation:
  // the transfer fee isn't showing as whitelisted (skipped) by Enjin's method
  test.skip("Computes whitelisted Enjin per-transfer fees correctly", async () => {

    const whitelistedAsset = await client.api.getAsset({ tokenAddress: ENJIN_ADDRESS, tokenId: SPIRIT_CLASH_TOKEN_ID })

    const sellerZeroFees = await client.computeFees({
      asset: whitelistedAsset,
      side: OrderSide.Sell,
      accountAddress: SPIRIT_CLASH_OWNER
    })

    assert.equal(sellerZeroFees.transferFee.toString(), "0")
    assert.equal(sellerZeroFees.transferFeeTokenAddress, ENJIN_COIN_ADDRESS)
  })

  test("_getBuyFeeParameters works for assets", async () => {
    const accountAddress = ALEX_ADDRESS
    const extraBountyBasisPoints = 0
    const sellOrder = await client._makeSellOrder({
      asset,
      quantity: 1,
      accountAddress,
      startAmount: 1,
      paymentTokenAddress: NULL_ADDRESS,
      extraBountyBasisPoints,
      buyerAddress: NULL_ADDRESS,
      expirationTime: 0,
      waitForHighestBid: false,
    })

    const {
      totalBuyerFeeBasisPoints,
      totalSellerFeeBasisPoints
    } = await client.computeFees({ asset, extraBountyBasisPoints, side: OrderSide.Buy })

    const {
      makerRelayerFee,
      takerRelayerFee,
      makerProtocolFee,
      takerProtocolFee,
      makerReferrerFee,
      feeRecipient,
      feeMethod
    } = client._getBuyFeeParameters(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, sellOrder)

    assert.isAbove(totalSellerFeeBasisPoints, 0)
    
    unitTestFeesBuyOrder({
      makerRelayerFee,
      takerRelayerFee,
      makerProtocolFee,
      takerProtocolFee,
      makerReferrerFee,
      feeRecipient,
      feeMethod
    })
  })

  test("_getBuyFeeParameters works for English auction assets", async () => {
    const accountAddress = ALEX_ADDRESS
    const extraBountyBasisPoints = 0
    const sellOrder = await client._makeSellOrder({
      asset,
      quantity: 1,
      accountAddress,
      startAmount: 1,
      paymentTokenAddress: WETH_ADDRESS,
      extraBountyBasisPoints,
      buyerAddress: NULL_ADDRESS,
      expirationTime,
      waitForHighestBid: true,
    })

    const {
      totalBuyerFeeBasisPoints,
      totalSellerFeeBasisPoints
    } = await client.computeFees({ asset, extraBountyBasisPoints, side: OrderSide.Buy })

    const {
      makerRelayerFee,
      takerRelayerFee,
      makerProtocolFee,
      takerProtocolFee,
      makerReferrerFee,
      feeRecipient,
      feeMethod
    } = client._getBuyFeeParameters(totalBuyerFeeBasisPoints, totalSellerFeeBasisPoints, sellOrder)
    
    assert.isAbove(totalSellerFeeBasisPoints, 0)
    
    unitTestFeesBuyOrder({
      makerRelayerFee,
      takerRelayerFee,
      makerProtocolFee,
      takerProtocolFee,
      makerReferrerFee,
      feeRecipient,
      feeMethod
    })
  })
})

function unitTestFeesBuyOrder({
  makerRelayerFee,
  takerRelayerFee,
  makerProtocolFee,
  takerProtocolFee,
  makerReferrerFee,
  feeRecipient,
  feeMethod
}: {
  makerRelayerFee: BigNumber,
  takerRelayerFee: BigNumber,
  makerProtocolFee: BigNumber,
  takerProtocolFee: BigNumber,
  makerReferrerFee: BigNumber,
  feeRecipient: string,
  feeMethod: FeeMethod
}) {
  assert.equal(+makerRelayerFee, asset.collection.openseaBuyerFeeBasisPoints)
  assert.equal(+takerRelayerFee, asset.collection.openseaSellerFeeBasisPoints)
  assert.equal(+makerProtocolFee, 0)
  assert.equal(+takerProtocolFee, 0)
  assert.equal(+makerReferrerFee, 0)
  assert.equal(feeRecipient, OPENSEA_FEE_RECIPIENT)
  assert.equal(feeMethod, FeeMethod.SplitFee)
}

export function testFeesMakerOrder(order: Order | UnhashedOrder, collection?: OpenSeaCollection, makerBountyBPS?: number) {
  assert.equal(order.makerProtocolFee.toNumber(), 0)
  assert.equal(order.takerProtocolFee.toNumber(), 0)
  if (order.waitingForBestCounterOrder) {
    assert.equal(order.feeRecipient, NULL_ADDRESS)
  } else {
    assert.equal(order.feeRecipient, OPENSEA_FEE_RECIPIENT)
  }
  // Public order
  if (makerBountyBPS != null) {
    assert.equal(order.makerReferrerFee.toNumber(), makerBountyBPS)
  }
  if (collection) {
    const totalSellerFee = collection.devSellerFeeBasisPoints + collection.openseaSellerFeeBasisPoints
    const totalBuyerFeeBasisPoints = collection.devBuyerFeeBasisPoints + collection.openseaBuyerFeeBasisPoints
    // Homogenous sale
    if (order.side == OrderSide.Sell && order.waitingForBestCounterOrder) {
      // Fees may not match the contract's fees, which are changeable.
    } else if (order.side == OrderSide.Sell) {

      assert.equal(order.makerRelayerFee.toNumber(), totalSellerFee)
      assert.equal(order.takerRelayerFee.toNumber(), totalBuyerFeeBasisPoints)

      assert.equal(order.makerRelayerFee.toNumber(), collection.devSellerFeeBasisPoints + collection.openseaSellerFeeBasisPoints)
      // Check bounty
      if (collection.openseaSellerFeeBasisPoints >= OPENSEA_SELLER_BOUNTY_BASIS_POINTS) {
        assert.isAtMost(OPENSEA_SELLER_BOUNTY_BASIS_POINTS + order.makerReferrerFee.toNumber(), collection.openseaSellerFeeBasisPoints)
      } else {
        // No extra bounty allowed if < 1%
        assert.equal(order.makerReferrerFee.toNumber(), 0)
      }
    } else {

      assert.equal(order.makerRelayerFee.toNumber(), totalBuyerFeeBasisPoints)
      assert.equal(order.takerRelayerFee.toNumber(), totalSellerFee)

      assert.equal(order.makerRelayerFee.toNumber(), collection.devBuyerFeeBasisPoints + collection.openseaBuyerFeeBasisPoints)
    }
  } else {
    // Heterogenous
    if (order.side == OrderSide.Sell) {
      assert.equal(order.makerRelayerFee.toNumber(), DEFAULT_SELLER_FEE_BASIS_POINTS)
      assert.equal(order.takerRelayerFee.toNumber(), DEFAULT_BUYER_FEE_BASIS_POINTS)
      assert.isAtMost(OPENSEA_SELLER_BOUNTY_BASIS_POINTS + order.makerReferrerFee.toNumber(), DEFAULT_MAX_BOUNTY)
    } else {
      assert.equal(order.makerRelayerFee.toNumber(), DEFAULT_BUYER_FEE_BASIS_POINTS)
      assert.equal(order.takerRelayerFee.toNumber(), DEFAULT_SELLER_FEE_BASIS_POINTS)
    }
  }
}

'''
'''--- test/seaport/misc.ts ---
import {
  assert
} from 'chai'
import {
  suite,
  test
} from 'mocha-typescript'
import * as Web3 from 'web3'
import {
  CK_ADDRESS,
  MAINNET_PROVIDER_URL,
  MAX_UINT_256
} from '../../src/constants'
import { ERC721 } from '../../src/contracts'
import { OpenSeaPort } from '../../src/index'
import { Network } from '../../src/types'
import { getNonCompliantApprovalAddress, isContractAddress } from '../../src/utils/utils'
import { ALEX_ADDRESS, ALEX_ADDRESS_2, CK_TOKEN_ID, DAN_ADDRESS, DAN_DAPPER_ADDRESS, MAINNET_API_KEY, WETH_ADDRESS } from '../constants'

const provider = new Web3.providers.HttpProvider(MAINNET_PROVIDER_URL)

const client = new OpenSeaPort(provider, {
  networkName: Network.Main,
  apiKey: MAINNET_API_KEY
}, line => console.info(`MAINNET: ${line}`))

suite('seaport: misc', () => {

  test('Instance has public methods', () => {
    assert.equal(typeof client.getCurrentPrice, 'function')
    assert.equal(typeof client.wrapEth, 'function')
  })

  test('Instance exposes API methods', () => {
    assert.equal(typeof client.api.getOrder, 'function')
    assert.equal(typeof client.api.getOrders, 'function')
    assert.equal(typeof client.api.postOrder, 'function')
  })

  test('Instance exposes some underscored methods', () => {
    assert.equal(typeof client._initializeProxy, 'function')
    assert.equal(typeof client._getProxy, 'function')
  })

  test('Fetches proxy for an account', async () => {
    const accountAddress = ALEX_ADDRESS
    const proxy = await client._getProxy(accountAddress)
    assert.isNotNull(proxy)
  })

  test('Fetches positive token balance for an account', async () => {
    const accountAddress = ALEX_ADDRESS
    const balance = await client.getTokenBalance({ accountAddress, tokenAddress: WETH_ADDRESS })
    assert.isAbove(balance.toNumber(), 0)
  })

  test('Accounts have maximum token balance approved', async () => {
    const accountAddress = ALEX_ADDRESS
    const approved = await client._getApprovedTokenCount({ accountAddress })
    assert.equal(approved.toString(), MAX_UINT_256.toString())
  })

  test('Single-approval tokens are approved for tester address', async () => {
    const accountAddress = ALEX_ADDRESS_2
    const proxyAddress = await client._getProxy(accountAddress)
    const tokenId = CK_TOKEN_ID.toString()
    const tokenAddress = CK_ADDRESS
    const erc721 = await client.web3.eth.contract(ERC721 as any).at(tokenAddress)
    const approvedAddress = await getNonCompliantApprovalAddress(erc721, tokenId, accountAddress)
    // assert.equal(approvedAddress, proxyAddress)
  })

  test('Checks whether an address is a contract addrress', async () => {
    const smartContractWalletAddress = DAN_DAPPER_ADDRESS
    const acccountOneIsContractAddress = await isContractAddress(client.web3, smartContractWalletAddress)
    const nonSmartContractWalletAddress = DAN_ADDRESS
    const acccountTwoIsContractAddress = await isContractAddress(client.web3, nonSmartContractWalletAddress)
    assert.equal(acccountOneIsContractAddress, true)
    assert.equal(acccountTwoIsContractAddress, false)
  })

})

'''
'''--- test/seaport/orders.ts ---
import { BigNumber } from 'bignumber.js'
import {
  assert
} from 'chai'
import { before } from 'mocha'
import {
  suite,
  test
} from 'mocha-typescript'
import * as Web3 from 'web3'
import {
  ENJIN_ADDRESS,
  INVERSE_BASIS_POINT,
  MAINNET_PROVIDER_URL,
  NULL_ADDRESS,
  OPENSEA_FEE_RECIPIENT,
  RINKEBY_PROVIDER_URL
} from '../../src/constants'
import { OpenSeaPort } from '../../src/index'
import { Asset, Network, Order, OrderJSON, OrderSide, SaleKind, UnhashedOrder, UnsignedOrder, WyvernSchemaName } from '../../src/types'
import { assignOrdersToSides, estimateCurrentPrice, getOrderHash, makeBigNumber, orderFromJSON } from '../../src/utils/utils'
import { ALEX_ADDRESS, ALEX_ADDRESS_2, CATS_IN_MECHS_ID, CK_ADDRESS, CK_RINKEBY_ADDRESS, CK_RINKEBY_TOKEN_ID, CK_TOKEN_ID, CRYPTOFLOWERS_CONTRACT_ADDRESS_WITH_BUYER_FEE, CRYPTO_CRYSTAL_ADDRESS, DEVIN_ADDRESS, DIGITAL_ART_CHAIN_ADDRESS, DIGITAL_ART_CHAIN_TOKEN_ID, DISSOLUTION_TOKEN_ID, ENS_HELLO_NAME, ENS_HELLO_TOKEN_ID, ENS_RINKEBY_SHORT_NAME_OWNER, ENS_RINKEBY_TOKEN_ADDRESS, MAINNET_API_KEY, MYTHEREUM_ADDRESS, MYTHEREUM_TOKEN_ID, RINKEBY_API_KEY, WETH_ADDRESS } from '../constants'
import * as ordersJSONFixture from '../fixtures/orders.json'
import { testFeesMakerOrder } from './fees'

const ordersJSON = ordersJSONFixture as any
const englishSellOrderJSON = ordersJSON[0] as OrderJSON

const provider = new Web3.providers.HttpProvider(MAINNET_PROVIDER_URL)
const rinkebyProvider = new Web3.providers.HttpProvider(RINKEBY_PROVIDER_URL)

const client = new OpenSeaPort(provider, {
  networkName: Network.Main,
  apiKey: MAINNET_API_KEY
}, line => console.info(`MAINNET: ${line}`))

const rinkebyClient = new OpenSeaPort(rinkebyProvider, {
  networkName: Network.Rinkeby,
  apiKey: RINKEBY_API_KEY
}, line => console.info(`RINKEBY: ${line}`))

const assetsForBundleOrder = [
  { tokenId: MYTHEREUM_TOKEN_ID.toString(), tokenAddress: MYTHEREUM_ADDRESS },
  { tokenId: DIGITAL_ART_CHAIN_TOKEN_ID.toString(), tokenAddress: DIGITAL_ART_CHAIN_ADDRESS },
]

const assetsForBulkTransfer = assetsForBundleOrder

let manaAddress: string
let daiAddress: string

suite('seaport: orders', () => {

  before(async () => {
    daiAddress = (await client.api.getPaymentTokens({ symbol: 'DAI'})).tokens[0].address
    manaAddress = (await client.api.getPaymentTokens({ symbol: 'MANA'})).tokens[0].address
  })

  ordersJSON.map((orderJSON: OrderJSON, index: number) => {
    test('Order #' + index + ' has correct types', () => {
      const order = orderFromJSON(orderJSON)
      assert.instanceOf(order.basePrice, BigNumber)
      assert.typeOf(order.hash, "string")
      assert.typeOf(order.maker, "string")
      assert.equal(+order.quantity, 1)
    })
  })

  ordersJSON.map((orderJSON: OrderJSON, index: number) => {
    test('Order #' + index + ' has correct hash', () => {
      const order = orderFromJSON(orderJSON)
      assert.equal(order.hash, getOrderHash(order))
    })
  })

  test("Correctly sets decimals on fungible order", async () => {
    const accountAddress = ALEX_ADDRESS
    const tokenId = DISSOLUTION_TOKEN_ID.toString()
    const tokenAddress = ENJIN_ADDRESS
    const quantity = 1
    const decimals = 2

    const order = await client._makeSellOrder({
      asset: { tokenAddress, tokenId, decimals, schemaName: WyvernSchemaName.ERC1155 },
      quantity,
      accountAddress,
      startAmount: 2,
      extraBountyBasisPoints: 0,
      buyerAddress: NULL_ADDRESS,
      expirationTime: 0,
      paymentTokenAddress: NULL_ADDRESS,
      waitForHighestBid: false,
    })

    assert.equal(order.quantity.toNumber(), quantity * Math.pow(10, decimals))
  })

  test("Correctly errors for invalid sell order price parameters", async () => {
    const accountAddress = ALEX_ADDRESS
    const expirationTime = Math.round(Date.now() / 1000 + 60) // one minute from now
    const paymentTokenAddress = manaAddress
    const tokenId = MYTHEREUM_TOKEN_ID.toString()
    const tokenAddress = MYTHEREUM_ADDRESS

    try {
      await client._makeSellOrder({
        asset: { tokenAddress, tokenId },
        quantity: 1,
        accountAddress,
        startAmount: 2,
        extraBountyBasisPoints: 0,
        buyerAddress: NULL_ADDRESS,
        expirationTime: 0,
        paymentTokenAddress,
        waitForHighestBid: true,
      })
      assert.fail()
    } catch (error) {
      assert.include(error.message, 'English auctions must have an expiration time')
    }

    try {
      await client._makeSellOrder({
        asset: { tokenAddress, tokenId },
        quantity: 1,
        accountAddress,
        startAmount: 2,
        endAmount: 1, // Allow declining minimum bid
        extraBountyBasisPoints: 0,
        buyerAddress: NULL_ADDRESS,
        expirationTime,
        paymentTokenAddress: NULL_ADDRESS,
        waitForHighestBid: true,
      })
      assert.fail()
    } catch (error) {
      assert.include(error.message, 'English auctions must use wrapped ETH')
    }

    try {
      await client._makeSellOrder({
        asset: { tokenAddress, tokenId },
        quantity: 1,
        accountAddress,
        startAmount: 2,
        endAmount: 3,
        extraBountyBasisPoints: 0,
        buyerAddress: NULL_ADDRESS,
        expirationTime,
        paymentTokenAddress: NULL_ADDRESS,
        waitForHighestBid: false,
      })
      assert.fail()
    } catch (error) {
      assert.include(error.message, 'End price must be less than or equal to the start price')
    }

    try {
      await client._makeSellOrder({
        asset: { tokenAddress, tokenId },
        quantity: 1,
        accountAddress,
        startAmount: 2,
        endAmount: 1,
        extraBountyBasisPoints: 0,
        buyerAddress: NULL_ADDRESS,
        expirationTime: 0,
        paymentTokenAddress: NULL_ADDRESS,
        waitForHighestBid: false,
      })
      assert.fail()
    } catch (error) {
      assert.include(error.message, 'Expiration time must be set if order will change in price')
    }

    try {
      await client._makeSellOrder({
        asset: { tokenAddress, tokenId },
        quantity: 1,
        accountAddress,
        startAmount: 2,
        listingTime: Math.round(Date.now() / 1000 - 60),
        extraBountyBasisPoints: 0,
        buyerAddress: NULL_ADDRESS,
        expirationTime: 0,
        paymentTokenAddress: NULL_ADDRESS,
        waitForHighestBid: false,
      })
      assert.fail()
    } catch (error) {
      assert.include(error.message, 'Listing time cannot be in the past')
    }

    try {
      await client._makeSellOrder({
        asset: { tokenAddress, tokenId },
        quantity: 1,
        accountAddress,
        startAmount: 2,
        listingTime: Math.round(Date.now() / 1000 + 20),
        extraBountyBasisPoints: 0,
        buyerAddress: NULL_ADDRESS,
        expirationTime,
        paymentTokenAddress,
        waitForHighestBid: true,
      })
      assert.fail()
    } catch (error) {
      assert.include(error.message, 'Cannot schedule an English auction for the future')
    }

    try {
      await client._makeSellOrder({
        asset: { tokenAddress, tokenId },
        quantity: 1,
        accountAddress,
        startAmount: 2,
        extraBountyBasisPoints: 0,
        buyerAddress: NULL_ADDRESS,
        expirationTime,
        paymentTokenAddress,
        waitForHighestBid: false,
        englishAuctionReservePrice: 1
      })
      assert.fail()
    } catch (error) {
      assert.include(error.message, 'Reserve prices may only be set on English auctions')
    }

    try {
      await client._makeSellOrder({
        asset: { tokenAddress, tokenId },
        quantity: 1,
        accountAddress,
        startAmount: 2,
        extraBountyBasisPoints: 0,
        buyerAddress: NULL_ADDRESS,
        expirationTime,
        paymentTokenAddress,
        waitForHighestBid: true,
        englishAuctionReservePrice: 1
      })
      assert.fail()
    } catch (error) {
      assert.include(error.message, 'Reserve price must be greater than or equal to the start amount')
    }
  })

  test("Correctly errors for invalid buy order price parameters", async () => {
    const accountAddress = ALEX_ADDRESS_2
    const expirationTime = Math.round(Date.now() / 1000 + 60) // one minute from now
    const tokenId = MYTHEREUM_TOKEN_ID.toString()
    const tokenAddress = MYTHEREUM_ADDRESS

    try {
      await client._makeBuyOrder({
        asset: { tokenAddress, tokenId },
        quantity: 1,
        accountAddress,
        startAmount: 2,
        extraBountyBasisPoints: 0,
        expirationTime,
        paymentTokenAddress: NULL_ADDRESS
      })
      assert.fail()
    } catch (error) {
      assert.include(error.message, 'Offers must use wrapped ETH or an ERC-20 token')
    }
  })

  test('Cannot yet match a new English auction sell order, bountied', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS_2
    const amountInToken = 1.2
    const paymentTokenAddress = WETH_ADDRESS
    const expirationTime = Math.round(Date.now() / 1000 + 60) // one minute from now
    const bountyPercent = 1.1

    const tokenId = MYTHEREUM_TOKEN_ID.toString()
    const tokenAddress = MYTHEREUM_ADDRESS

    const asset = await client.api.getAsset({ tokenAddress, tokenId })

    const order = await client._makeSellOrder({
      asset: { tokenAddress, tokenId },
      quantity: 1,
      accountAddress,
      startAmount: amountInToken,
      paymentTokenAddress,
      extraBountyBasisPoints: bountyPercent * 100,
      buyerAddress: NULL_ADDRESS,
      expirationTime,
      waitForHighestBid: true,
    })

    assert.equal(order.taker, NULL_ADDRESS)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInToken)
    assert.equal(order.extra.toNumber(), 0)
    // Make sure there's gap time to expire it
    assert.isAbove(order.expirationTime.toNumber(), expirationTime)
    // Make sure it's listed in the future
    assert.equal(order.listingTime.toNumber(), expirationTime)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is impossible
    try {
      await testMatchingNewOrder(order, takerAddress, expirationTime + 100)
      assert.fail()
    } catch (error) {
      assert.include(error.message, "Buy-side order is set in the future or expired")
    }
  })

  test.skip('Can match a finished English auction sell order', async () => {
    const makerAddress = ALEX_ADDRESS_2
    const takerAddress = ALEX_ADDRESS
    const matcherAddress = DEVIN_ADDRESS
    const now = Math.round(Date.now() / 1000)
    // Get bid from server
    const paymentTokenAddress = WETH_ADDRESS
    const { orders } = await rinkebyClient.api.getOrders({
      side: OrderSide.Buy,
      asset_contract_address: CK_RINKEBY_ADDRESS,
      token_id: CK_RINKEBY_TOKEN_ID,
      payment_token_address: paymentTokenAddress,
      maker: makerAddress
    })
    const buy = orders[0]
    assert.isDefined(buy)
    assert.isDefined(buy.asset)
    if (!buy || !buy.asset) {
      return
    }
    // Make sure it's listed in the past
    assert.isBelow(buy.listingTime.toNumber(), now)
    testFeesMakerOrder(buy, buy.asset.collection)

    const sell = orderFromJSON(englishSellOrderJSON)
    assert.equal(+sell.quantity, 1)
    assert.equal(sell.feeRecipient, NULL_ADDRESS)
    assert.equal(sell.paymentToken, paymentTokenAddress)

    /* Requirements in Wyvern contract for funds transfer. */
    assert.isAtMost(buy.takerRelayerFee.toNumber(), sell.takerRelayerFee.toNumber())
    assert.isAtMost(buy.takerProtocolFee.toNumber(), sell.takerProtocolFee.toNumber())
    const sellPrice = await rinkebyClient.getCurrentPrice(sell)
    const buyPrice = await rinkebyClient.getCurrentPrice(buy)
    assert.isAtLeast(buyPrice.toNumber(), sellPrice.toNumber())
    console.info(`Matching two orders that differ in price by ${buyPrice.toNumber() - sellPrice.toNumber()}`)

    await rinkebyClient._buyOrderValidationAndApprovals({ order: buy, accountAddress: makerAddress })
    await rinkebyClient._sellOrderValidationAndApprovals({ order: sell, accountAddress: takerAddress })

    const gas = await rinkebyClient._estimateGasForMatch({ buy, sell, accountAddress: matcherAddress })
    assert.isAbove(gas || 0, 0)
    console.info(`Match gas cost: ${gas}`)
  })

  test('Ensures buy order compatibility with an English sell order', async () => {
    const accountAddress = ALEX_ADDRESS_2
    const takerAddress = ALEX_ADDRESS
    const paymentTokenAddress = WETH_ADDRESS
    const amountInToken = 0.01
    const expirationTime = Math.round(Date.now() / 1000 + 60 * 60 * 24) // one day from now
    const extraBountyBasisPoints = 1.1 * 100

    const tokenId = MYTHEREUM_TOKEN_ID.toString()
    const tokenAddress = MYTHEREUM_ADDRESS

    const asset = await client.api.getAsset({ tokenAddress, tokenId })

    const sellOrder = await client._makeSellOrder({
      asset: { tokenAddress, tokenId },
      quantity: 1,
      accountAddress: takerAddress,
      startAmount: amountInToken,
      paymentTokenAddress,
      expirationTime,
      extraBountyBasisPoints,
      buyerAddress: NULL_ADDRESS,
      waitForHighestBid: true,
    })

    const buyOrder = await client._makeBuyOrder({
      asset: { tokenAddress, tokenId, schemaName: WyvernSchemaName.ERC721 },
      quantity: 1,
      accountAddress,
      paymentTokenAddress,
      startAmount: amountInToken,
      expirationTime: 0,
      extraBountyBasisPoints: 0,
      sellOrder,
    })

    testFeesMakerOrder(buyOrder, asset.collection)
    assert.equal(sellOrder.taker, NULL_ADDRESS)
    assert.equal(buyOrder.taker, sellOrder.maker)
    assert.equal(buyOrder.makerRelayerFee.toNumber(), sellOrder.makerRelayerFee.toNumber())
    assert.equal(buyOrder.takerRelayerFee.toNumber(), sellOrder.takerRelayerFee.toNumber())
    assert.equal(buyOrder.makerProtocolFee.toNumber(), sellOrder.makerProtocolFee.toNumber())
    assert.equal(buyOrder.takerProtocolFee.toNumber(), sellOrder.takerProtocolFee.toNumber())

    await client._buyOrderValidationAndApprovals({ order: buyOrder, accountAddress })
    await client._sellOrderValidationAndApprovals({ order: sellOrder, accountAddress: takerAddress })
  })

  test.skip("Creates ENS name buy order", async () => {
    const paymentTokenAddress = WETH_ADDRESS
    const buyOrder = await rinkebyClient._makeBuyOrder({
      asset: {
        tokenId: ENS_HELLO_TOKEN_ID,
        tokenAddress: ENS_RINKEBY_TOKEN_ADDRESS,
        name: ENS_HELLO_NAME,
        schemaName: WyvernSchemaName.ENSShortNameAuction,
      },
      quantity: 1,
      accountAddress: ENS_RINKEBY_SHORT_NAME_OWNER,
      paymentTokenAddress,
      startAmount: 0.01,
      expirationTime: Math.round(Date.now() / 1000 + 60 * 60 * 24),  // one day from now
      extraBountyBasisPoints: 0,
    })
    // TODO (joshuawu): Fill this test out after backend supports ENS short names.
    // assert.equal(buyOrder, {})
  })

  test("Matches a private sell order, doesn't for wrong taker", async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS_2
    const amountInToken = 2
    const bountyPercent = 1

    const tokenId = MYTHEREUM_TOKEN_ID.toString()
    const tokenAddress = MYTHEREUM_ADDRESS

    const asset = await client.api.getAsset({ tokenAddress, tokenId })

    const order = await client._makeSellOrder({
      asset: { tokenAddress, tokenId },
      quantity: 1,
      accountAddress,
      startAmount: amountInToken,
      extraBountyBasisPoints: bountyPercent * 100,
      buyerAddress: takerAddress,
      expirationTime: 0,
      paymentTokenAddress: NULL_ADDRESS,
      waitForHighestBid: false,
    })

    assert.equal(order.paymentToken, NULL_ADDRESS)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInToken)
    assert.equal(order.extra.toNumber(), 0)
    assert.equal(order.expirationTime.toNumber(), 0)
    testFeesMakerOrder(order, asset.collection, bountyPercent * 100)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
    // Make sure no one else can take it
    try {
      await testMatchingNewOrder(order, DEVIN_ADDRESS)
    } catch (e) {
      // It works!
      return
    }
    assert.fail()
  })

  test('Matches a new dutch sell order of a small amount of ERC-20 item (DAI) for ETH', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS_2
    const amountInEth = 0.012

    const tokenId = null
    const tokenAddress = daiAddress
    const expirationTime = Math.round(Date.now() / 1000 + 60 * 60 * 24)

    const order = await client._makeSellOrder({
      asset: { tokenAddress, tokenId, schemaName: WyvernSchemaName.ERC20 },
      quantity: Math.pow(10, 18) * 0.01,
      accountAddress,
      startAmount: amountInEth,
      endAmount: 0,
      paymentTokenAddress: NULL_ADDRESS,
      extraBountyBasisPoints: 0,
      buyerAddress: NULL_ADDRESS,
      expirationTime, // one day from now,
      waitForHighestBid: false,
    })

    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInEth)
    assert.equal(order.extra.toNumber(), Math.pow(10, 18) * amountInEth)
    assert.equal(order.expirationTime.toNumber(), expirationTime)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test('Matches a new sell order of an 1155 item for ETH', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS_2
    const amountInEth = 2

    const tokenId = CATS_IN_MECHS_ID
    const tokenAddress = ENJIN_ADDRESS

    const asset = await client.api.getAsset({ tokenAddress, tokenId })

    const order = await client._makeSellOrder({
      asset: { tokenAddress, tokenId, schemaName: WyvernSchemaName.ERC1155 },
      quantity: 1,
      accountAddress,
      startAmount: amountInEth,
      paymentTokenAddress: NULL_ADDRESS,
      extraBountyBasisPoints: 0,
      buyerAddress: NULL_ADDRESS,
      expirationTime: 0,
      waitForHighestBid: false,
    })

    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInEth)
    assert.equal(order.extra.toNumber(), 0)
    assert.equal(order.expirationTime.toNumber(), 0)
    testFeesMakerOrder(order, asset.collection)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test('Matches a buy order of an 1155 item for W-ETH', async () => {
    const accountAddress = ALEX_ADDRESS_2
    const takerAddress = ALEX_ADDRESS
    const paymentToken = WETH_ADDRESS
    const amountInToken = 0.01

    const tokenId = DISSOLUTION_TOKEN_ID
    const tokenAddress = ENJIN_ADDRESS

    const asset = await client.api.getAsset({ tokenAddress, tokenId })

    const order = await client._makeBuyOrder({
      asset: { tokenAddress, tokenId, schemaName: WyvernSchemaName.ERC1155 },
      quantity: 1,
      accountAddress,
      startAmount: amountInToken,
      paymentTokenAddress: paymentToken,
      expirationTime: 0,
      extraBountyBasisPoints: 0,
    })

    assert.equal(order.taker, NULL_ADDRESS)
    assert.equal(order.paymentToken, paymentToken)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInToken)
    assert.equal(order.extra.toNumber(), 0)
    assert.equal(order.expirationTime.toNumber(), 0)
    testFeesMakerOrder(order, asset.collection)

    await client._buyOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test('Matches a new bountied sell order for an ERC-20 token (MANA)', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS_2
    const paymentToken = (await client.api.getPaymentTokens({ symbol: 'MANA'})).tokens[0]
    const amountInToken = 5000
    const bountyPercent = 1

    const tokenId = MYTHEREUM_TOKEN_ID.toString()
    const tokenAddress = MYTHEREUM_ADDRESS

    const asset = await client.api.getAsset({ tokenAddress, tokenId })

    const order = await client._makeSellOrder({
      asset: { tokenAddress, tokenId },
      quantity: 1,
      accountAddress,
      startAmount: amountInToken,
      paymentTokenAddress: paymentToken.address,
      extraBountyBasisPoints: bountyPercent * 100,
      buyerAddress: NULL_ADDRESS, // Check that null doesn't trigger private orders
      expirationTime: 0,
      waitForHighestBid: false,
    })

    assert.equal(order.paymentToken, paymentToken.address)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, paymentToken.decimals) * amountInToken)
    assert.equal(order.extra.toNumber(), 0)
    assert.equal(order.expirationTime.toNumber(), 0)
    testFeesMakerOrder(order, asset.collection, bountyPercent * 100)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test('Matches a buy order with an ERC-20 token (DAI)', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS_2
    const paymentToken = (await client.api.getPaymentTokens({ symbol: 'DAI'})).tokens[0]
    const amountInToken = 3

    const tokenId = CK_TOKEN_ID.toString()
    const tokenAddress = CK_ADDRESS

    const asset = await client.api.getAsset({ tokenAddress, tokenId })

    const order = await client._makeBuyOrder({
      asset: { tokenAddress, tokenId },
      quantity: 1,
      accountAddress,
      startAmount: amountInToken,
      paymentTokenAddress: paymentToken.address,
      expirationTime: 0,
      extraBountyBasisPoints: 0,
    })

    assert.equal(order.taker, NULL_ADDRESS)
    assert.equal(order.paymentToken, paymentToken.address)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, paymentToken.decimals) * amountInToken)
    assert.equal(order.extra.toNumber(), 0)
    assert.equal(order.expirationTime.toNumber(), 0)
    testFeesMakerOrder(order, asset.collection)

    await client._buyOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test('Serializes payment token and matches most recent ERC-20 sell order', async () => {
    const takerAddress = ALEX_ADDRESS

    const order = await client.api.getOrder({
      side: OrderSide.Sell,
      payment_token_address: manaAddress
    })

    assert.isNotNull(order.paymentTokenContract)
    if (!order.paymentTokenContract) {
      return
    }
    assert.equal(order.paymentTokenContract.address, manaAddress)
    assert.equal(order.paymentToken, manaAddress)
    // TODO why can't we test atomicMatch?
    await testMatchingOrder(order, takerAddress, false)
  })

  test('Bulk transfer', async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS_2

    const gas = await client._estimateGasForTransfer({
      assets: assetsForBulkTransfer,
      fromAddress: accountAddress,
      toAddress: takerAddress
    })

    assert.isAbove(gas, 0)
  })

  test('Fungible tokens filter', async () => {
    const manaTokens = (await client.api.getPaymentTokens({ symbol: "MANA" })).tokens
    assert.equal(manaTokens.length, 1)
    const mana = manaTokens[0]
    assert.isNotNull(mana)
    assert.equal(mana.name, "Decentraland MANA")
    assert.equal(mana.address, "0x0f5d2fb29fb7d3cfee444a200298f468908cc942")
    assert.equal(mana.decimals, 18)

    const dai = (await client.api.getPaymentTokens({ symbol: "DAI" })).tokens[0]
    assert.isNotNull(dai)
    assert.equal(dai.name, "Dai Stablecoin")
    assert.equal(dai.decimals, 18)

    const all = await client.api.getPaymentTokens()
    assert.isNotEmpty(all)
  })

  test('orderToJSON computes correct current price for Dutch auctions', async () => {
    const { orders } = await client.api.getOrders({ sale_kind: SaleKind.DutchAuction })
    assert.equal(orders.length, client.api.pageSize)
    orders.map(order => {
      assert.isNotNull(order.currentPrice)
      const buyerFeeBPS = order.asset
        ? order.asset.assetContract.buyerFeeBasisPoints
        : order.assetBundle && order.assetBundle.assetContract
          ? order.assetBundle.assetContract.buyerFeeBasisPoints
          : null
      if (!order.currentPrice || buyerFeeBPS) {
        // Skip checks with buyer fees
        return
      }
      const multiple = order.side == OrderSide.Sell
        ? +order.takerRelayerFee / INVERSE_BASIS_POINT + 1
        : 1
      // Possible race condition
      assert.equal(order.currentPrice.toPrecision(3), estimateCurrentPrice(order).toPrecision(3))
      assert.isAtLeast(order.basePrice.times(multiple).toNumber(), order.currentPrice.toNumber())
    })
  })

  test('orderToJSON current price includes buyer fee', async () => {
    const { orders } = await client.api.getOrders({
      sale_kind: SaleKind.FixedPrice,
      asset_contract_address: CRYPTOFLOWERS_CONTRACT_ADDRESS_WITH_BUYER_FEE,
      bundled: false,
      side: OrderSide.Sell,
      is_english: false
    })
    assert.isNotEmpty(orders)
    orders.map(order => {
      assert.isNotNull(order.currentPrice)
      assert.isNotNull(order.asset)
      if (!order.currentPrice || !order.asset) {
        return
      }
      const buyerFeeBPS = order.takerRelayerFee
      const multiple = +buyerFeeBPS / INVERSE_BASIS_POINT + 1
      assert.equal(
        order.basePrice.times(multiple).toNumber(),
        estimateCurrentPrice(order).toNumber()
      )
    })
  })

  test('orderToJSON current price does not include buyer fee for English auctions', async () => {
    const { orders } = await client.api.getOrders({
      side: OrderSide.Sell,
      is_english: true
    })
    assert.isNotEmpty(orders)
    orders.map(order => {
      assert.isNotNull(order.currentPrice)
      assert.isNotNull(order.asset)
      if (!order.currentPrice || !order.asset) {
        return
      }
      assert.equal(
        order.basePrice.toNumber(),
        estimateCurrentPrice(order).toNumber()
      )
    })
  })

  test.skip('Matches first buy order in book', async () => {
    const order = await client.api.getOrder({side: OrderSide.Buy})
    assert.isNotNull(order)
    if (!order) {
      return
    }
    const assetOrBundle = order.asset || order.assetBundle
    assert.isNotNull(assetOrBundle)
    if (!assetOrBundle) {
      return
    }
    const takerAddress = order.maker
    // Taker might not have all approval permissions so only test match
    await testMatchingOrder(order, takerAddress, false)
  })

  test('Matches a buy order and estimates gas on fulfillment', async () => {
    // Need to use a taker who has created a proxy and approved W-ETH already
    const takerAddress = ALEX_ADDRESS

    const order = await client.api.getOrder({
      side: OrderSide.Buy,
      owner: takerAddress,
      // Use a token that has already been approved via approve-all
      asset_contract_address: DIGITAL_ART_CHAIN_ADDRESS
    })
    assert.isNotNull(order)
    if (!order) {
      return
    }
    assert.isNotNull(order.asset)
    if (!order.asset) {
      return
    }
    await testMatchingOrder(order, takerAddress, true)
  })

  test('Matches a referred order via sell_orders and getAssets', async () => {
    const { assets } = await client.api.getAssets({asset_contract_address: CRYPTO_CRYSTAL_ADDRESS, order_by: "sale_price", order_direction: "desc" })

    const asset = assets.filter(a => !!a.sellOrders)[0]
    assert.isNotNull(asset)
    if (!asset || !asset.sellOrders) {
      return
    }

    const order = asset.sellOrders[0]
    assert.isNotNull(order)
    if (!order) {
      return
    }
    // Make sure match is valid
    const takerAddress = ALEX_ADDRESS
    const referrerAddress = ALEX_ADDRESS_2
    await testMatchingOrder(order, takerAddress, true, referrerAddress)
  })
})

export async function testMatchingOrder(order: Order, accountAddress: string, testAtomicMatch = false, referrerAddress?: string) {
  // Test a separate recipient for sell orders
  const recipientAddress = order.side === OrderSide.Sell ?  ALEX_ADDRESS_2 : accountAddress
  const matchingOrder = client._makeMatchingOrder({
    order,
    accountAddress,
    recipientAddress
  })
  assert.equal(matchingOrder.hash, getOrderHash(matchingOrder))

  const { buy, sell } = assignOrdersToSides(order, matchingOrder)

  if (!order.waitingForBestCounterOrder) {
    const isValid = await client._validateMatch({ buy, sell, accountAddress })
    assert.isTrue(isValid)
  } else {
    console.info(`English Auction detected, skipping validation`)
  }

  if (testAtomicMatch && !order.waitingForBestCounterOrder) {
    const isValid = await client._validateOrder(order)
    assert.isTrue(isValid)
    const isFulfillable = await client.isOrderFulfillable({
      order,
      accountAddress,
      recipientAddress,
      referrerAddress
    })
    assert.isTrue(isFulfillable)
  }
}

export async function testMatchingNewOrder(unhashedOrder: UnhashedOrder, accountAddress: string, counterOrderListingTime?: number) {
  const order = {
    ...unhashedOrder,
    hash: getOrderHash(unhashedOrder)
  }

  const matchingOrder = client._makeMatchingOrder({
    order,
    accountAddress,
    recipientAddress: accountAddress
  })
  if (counterOrderListingTime != null) {
    matchingOrder.listingTime = makeBigNumber(counterOrderListingTime)
    matchingOrder.hash = getOrderHash(matchingOrder)
  }
  assert.equal(matchingOrder.hash, getOrderHash(matchingOrder))

  // Test fees
  assert.equal(matchingOrder.makerProtocolFee.toNumber(), 0)
  assert.equal(matchingOrder.takerProtocolFee.toNumber(), 0)
  if (order.waitingForBestCounterOrder) {
    assert.equal(matchingOrder.feeRecipient, OPENSEA_FEE_RECIPIENT)
  } else {
    assert.equal(matchingOrder.feeRecipient, NULL_ADDRESS)
  }
  assert.equal(matchingOrder.makerRelayerFee.toNumber(), order.makerRelayerFee.toNumber())
  assert.equal(matchingOrder.takerRelayerFee.toNumber(), order.takerRelayerFee.toNumber())
  assert.equal(matchingOrder.makerReferrerFee.toNumber(), order.makerReferrerFee.toNumber())

  const v = 27
  const r = ''
  const s = ''

  let buy: Order
  let sell: Order
  if (order.side == OrderSide.Buy) {
    buy = {
      ...order,
      v, r, s
    }
    sell = {
      ...matchingOrder,
      v, r, s
    }
  } else {
    sell = {
      ...order,
      v, r, s
    }
    buy = {
      ...matchingOrder,
      v, r, s
    }
  }

  const isValid = await client._validateMatch({ buy, sell, accountAddress })
  assert.isTrue(isValid)

  // Make sure assets are transferrable
  await Promise.all(getAssetsAndQuantities(order).map(async ({asset, quantity}) => {
    const fromAddress = sell.maker
    const toAddress =  buy.maker
    const useProxy = asset.tokenAddress === CK_ADDRESS || asset.schemaName === WyvernSchemaName.ERC20
    const isTransferrable = await client.isAssetTransferrable({
      asset,
      quantity,
      fromAddress,
      toAddress,
      useProxy,
    })
    assert.isTrue(isTransferrable, `Not transferrable: ${asset.tokenAddress} # ${asset.tokenId} schema ${asset.schemaName} quantity ${quantity} from ${fromAddress} to ${toAddress} using proxy: ${useProxy}`)
  }))
}

function getAssetsAndQuantities(
    order: Order | UnsignedOrder | UnhashedOrder
  ): Array<{ asset: Asset, quantity: BigNumber }> {

  const wyAssets = 'bundle' in order.metadata
    ? order.metadata.bundle.assets
    : order.metadata.asset
      ? [ order.metadata.asset ]
      : []
  const schemaNames = 'bundle' in order.metadata && 'schemas' in order.metadata.bundle
    ? order.metadata.bundle.schemas
    : 'schema' in order.metadata
      ? [order.metadata.schema]
      : []

  assert.isNotEmpty(wyAssets)
  assert.equal(wyAssets.length, schemaNames.length)

  return wyAssets.map((wyAsset, i) => {
    const asset: Asset = {
      tokenId: 'id' in wyAsset && wyAsset.id != null ? wyAsset.id : null,
      tokenAddress: wyAsset.address,
      schemaName: schemaNames[i]
    }
    if ('quantity' in wyAsset) {
      return { asset, quantity: new BigNumber(wyAsset.quantity) }
    } else {
      return { asset, quantity: new BigNumber(1) }
    }
  })
}

'''
'''--- test/seaport/ownersAndTransfers.ts ---
import {
  assert,
} from 'chai'

import { before } from 'mocha'

import {
  suite,
  test,
} from 'mocha-typescript'

import { OpenSeaPort } from '../../src/index'
import * as Web3 from 'web3'
import { Network, WyvernSchemaName, WyvernNFTAsset, WyvernFTAsset } from '../../src/types'
import { ALEX_ADDRESS, DIGITAL_ART_CHAIN_ADDRESS, DIGITAL_ART_CHAIN_TOKEN_ID, MYTHEREUM_TOKEN_ID, MYTHEREUM_ADDRESS, GODS_UNCHAINED_ADDRESS, CK_ADDRESS, DEVIN_ADDRESS, ALEX_ADDRESS_2, GODS_UNCHAINED_TOKEN_ID, CK_TOKEN_ID, MAINNET_API_KEY, RINKEBY_API_KEY, CK_RINKEBY_ADDRESS, CK_RINKEBY_TOKEN_ID, CATS_IN_MECHS_ID, RANDOM_ADDRESS, DISSOLUTION_TOKEN_ID, SANDBOX_RINKEBY_ID, SANDBOX_RINKEBY_ADDRESS, AGE_OF_RUST_TOKEN_ID, WETH_ADDRESS } from '../constants'
import {
  ENJIN_ADDRESS,
  ENJIN_LEGACY_ADDRESS, MAINNET_PROVIDER_URL, MAX_UINT_256, RINKEBY_PROVIDER_URL
} from '../../src/constants'

const provider = new Web3.providers.HttpProvider(MAINNET_PROVIDER_URL)
const rinkebyProvider = new Web3.providers.HttpProvider(RINKEBY_PROVIDER_URL)

const client = new OpenSeaPort(provider, {
  networkName: Network.Main,
  apiKey: MAINNET_API_KEY
}, line => console.info(`MAINNET: ${line}`))

const rinkebyClient = new OpenSeaPort(rinkebyProvider, {
  networkName: Network.Rinkeby,
  apiKey: RINKEBY_API_KEY
}, line => console.info(`RINKEBY: ${line}`))

let manaAddress: string

suite('seaport: owners and transfers', () => {

  before(async () => {
    manaAddress = (await client.api.getPaymentTokens({ symbol: 'MANA'})).tokens[0].address
  })

  test("On-chain ownership throws for invalid assets", async () => {
    const accountAddress = ALEX_ADDRESS
    const schemaName = WyvernSchemaName.ERC721
    const wyAssetRinkeby: WyvernNFTAsset = {
      id: CK_RINKEBY_TOKEN_ID.toString(),
      address: CK_RINKEBY_ADDRESS
    }
    try {
      // Use mainnet client with rinkeby asset
      const isOwner = await client._ownsAssetOnChain({ accountAddress, wyAsset: wyAssetRinkeby, schemaName })
      assert.fail()
    } catch (error) {
      assert.include(error.message, 'Unable to get current owner')
    }
  })

  test("On-chain ownership correctly pulled for ERC721s", async () => {
    const accountAddress = ALEX_ADDRESS
    const schemaName = WyvernSchemaName.ERC721

    // Ownership
    const wyAsset: WyvernNFTAsset = {
      id: MYTHEREUM_TOKEN_ID.toString(),
      address: MYTHEREUM_ADDRESS
    }
    const isOwner = await client._ownsAssetOnChain({ accountAddress, wyAsset, schemaName })
    assert.isTrue(isOwner)

    // Non-ownership
    const isOwner2 = await client._ownsAssetOnChain({ accountAddress: ALEX_ADDRESS_2, wyAsset, schemaName })
    assert.isFalse(isOwner2)
  })

  test("On-chain ownership correctly pulled for ERC20s", async () => {
    const accountAddress = ALEX_ADDRESS
    const schemaName = WyvernSchemaName.ERC20

    // Ownership
    const wyAsset: WyvernFTAsset = {
      address: manaAddress,
      quantity: "1"
    }
    const isOwner = await client._ownsAssetOnChain({ accountAddress, wyAsset, schemaName })
    assert.isTrue(isOwner)

    // Not enough ownership
    const isOwner2 = await client._ownsAssetOnChain({ accountAddress, wyAsset: { ...wyAsset, quantity: MAX_UINT_256.toString() }, schemaName })
    assert.isFalse(isOwner2)

    // Non-ownership
    const isOwner3 = await client._ownsAssetOnChain({ accountAddress: RANDOM_ADDRESS, wyAsset, schemaName })
    assert.isFalse(isOwner3)
  })

  test("On-chain ownership correctly pulled for ERC1155s", async () => {
    const accountAddress = ALEX_ADDRESS
    const schemaName = WyvernSchemaName.ERC1155

    // Ownership of NFT
    const wyAssetNFT: WyvernNFTAsset = {
      id: AGE_OF_RUST_TOKEN_ID,
      address: ENJIN_ADDRESS
    }
    const isOwner = await client._ownsAssetOnChain({ accountAddress, wyAsset: wyAssetNFT, schemaName })
    assert.isTrue(isOwner)

    // Non-ownership
    const isOwner2 = await client._ownsAssetOnChain({ accountAddress: RANDOM_ADDRESS, wyAsset: wyAssetNFT, schemaName })
    assert.isFalse(isOwner2)

    // Ownership of FT
    const wyAssetFT: WyvernFTAsset = {
      id: DISSOLUTION_TOKEN_ID,
      address: ENJIN_ADDRESS,
      quantity: "1"
    }
    const isOwner3 = await client._ownsAssetOnChain({ accountAddress, wyAsset: wyAssetFT, schemaName })
    assert.isTrue(isOwner3)

    // Not enough ownership
    const isOwner5 = await client._ownsAssetOnChain({ accountAddress, wyAsset: { ...wyAssetFT, quantity: MAX_UINT_256.toString() }, schemaName })
    assert.isFalse(isOwner5)

    // Non-ownership
    const isOwner4 = await client._ownsAssetOnChain({ accountAddress: RANDOM_ADDRESS, wyAsset: wyAssetFT, schemaName })
    assert.isFalse(isOwner4)
  })

  test('ERC-721v3 asset locked in contract is not transferrable', async () => {
    const isTransferrable = await client.isAssetTransferrable({
      asset: {
        tokenId: GODS_UNCHAINED_TOKEN_ID.toString(),
        tokenAddress: GODS_UNCHAINED_ADDRESS,
      },
      fromAddress: ALEX_ADDRESS,
      toAddress: ALEX_ADDRESS_2
    })
    assert.isNotTrue(isTransferrable)
  })

  test('ERC-721 v3 asset not owned by fromAddress is not transferrable', async () => {
    const isTransferrable = await client.isAssetTransferrable({
      asset: {
        tokenId: "1",
        tokenAddress: DIGITAL_ART_CHAIN_ADDRESS,
      },
      fromAddress: ALEX_ADDRESS,
      toAddress: ALEX_ADDRESS_2
    })
    assert.isNotTrue(isTransferrable)
  })

  test('ERC-721 v3 asset owned by fromAddress is transferrable', async () => {
    const isTransferrable = await client.isAssetTransferrable({
      asset: {
        tokenId: DIGITAL_ART_CHAIN_TOKEN_ID.toString(),
        tokenAddress: DIGITAL_ART_CHAIN_ADDRESS,
      },
      fromAddress: ALEX_ADDRESS,
      toAddress: ALEX_ADDRESS_2
    })
    assert.isTrue(isTransferrable)
  })

  test('ERC-721 v1 asset owned by fromAddress is transferrable', async () => {
    const isTransferrable = await client.isAssetTransferrable({
      asset: {
        tokenId: CK_TOKEN_ID.toString(),
        tokenAddress: CK_ADDRESS,
      },
      fromAddress: ALEX_ADDRESS_2,
      toAddress: ALEX_ADDRESS,
      useProxy: true
    })
    assert.isTrue(isTransferrable)
  })

  test('ERC-20 asset not owned by fromAddress is not transferrable', async () => {
    const isTransferrable = await client.isAssetTransferrable({
      asset: {
        tokenId: null,
        tokenAddress: WETH_ADDRESS,
        schemaName: WyvernSchemaName.ERC20
      },
      fromAddress: RANDOM_ADDRESS,
      toAddress: ALEX_ADDRESS_2,
    })
    assert.isNotTrue(isTransferrable)
  })

  test('ERC-20 asset owned by fromAddress is transferrable', async () => {
    const isTransferrable = await client.isAssetTransferrable({
      asset: {
        tokenId: null,
        tokenAddress: WETH_ADDRESS,
        schemaName: WyvernSchemaName.ERC20
      },
      quantity: Math.pow(10, 18) * 0.001,
      fromAddress: ALEX_ADDRESS,
      toAddress: ALEX_ADDRESS_2,
    })
    assert.isTrue(isTransferrable)
  })

  test('ERC-1155 asset locked in contract is not transferrable', async () => {
    const isTransferrable2 = await client.isAssetTransferrable({
      asset: {
        tokenId: ENJIN_LEGACY_ADDRESS.toString(),
        tokenAddress: CATS_IN_MECHS_ID,
        schemaName: WyvernSchemaName.ERC1155
      },
      fromAddress: ALEX_ADDRESS,
      toAddress: ALEX_ADDRESS_2,
    })
    assert.isNotTrue(isTransferrable2)
  })

  test('ERC-1155 asset not owned by fromAddress is not transferrable', async () => {
    const isTransferrable = await client.isAssetTransferrable({
      asset: {
        tokenId: CATS_IN_MECHS_ID,
        tokenAddress: ENJIN_ADDRESS,
        schemaName: WyvernSchemaName.ERC1155
      },
      fromAddress: DEVIN_ADDRESS,
      toAddress: ALEX_ADDRESS_2,
    })
    assert.isNotTrue(isTransferrable)
  })

  test('Rinkeby ERC-1155 asset owned by fromAddress is transferrable', async () => {
    const isTransferrable = await rinkebyClient.isAssetTransferrable({
      asset: {
        tokenAddress: SANDBOX_RINKEBY_ADDRESS,
        tokenId: SANDBOX_RINKEBY_ID,
        schemaName: WyvernSchemaName.ERC1155
      },
      fromAddress: "0x61c461ecc993aadeb7e4b47e96d1b8cc37314b20",
      toAddress: ALEX_ADDRESS,
    })
    assert.isTrue(isTransferrable)
  })
})

'''
'''--- test/seaport/staticCall.ts ---
import * as WyvernSchemas from 'wyvern-schemas'
import {
  assert,
} from 'chai'

import {
  suite,
  test,
} from 'mocha-typescript'

import { OpenSeaPort } from '../../src/index'
import * as Web3 from 'web3'
import { Network } from '../../src/types'
import { ALEX_ADDRESS, MYTHEREUM_TOKEN_ID, MYTHEREUM_ADDRESS, ALEX_ADDRESS_2, MAINNET_API_KEY, RINKEBY_API_KEY } from '../constants'
import { testFeesMakerOrder } from './fees'
import { getMethod, StaticCheckTxOrigin } from '../../src/contracts'
import { testMatchingNewOrder } from './orders'
import {
  MAINNET_PROVIDER_URL, NULL_ADDRESS,
  RINKEBY_PROVIDER_URL,
  STATIC_CALL_TX_ORIGIN_ADDRESS
} from '../../src/constants'
import { encodeCall } from '../../src/utils/schema'

const provider = new Web3.providers.HttpProvider(MAINNET_PROVIDER_URL)
const rinkebyProvider = new Web3.providers.HttpProvider(RINKEBY_PROVIDER_URL)

const client = new OpenSeaPort(provider, {
  networkName: Network.Main,
  apiKey: MAINNET_API_KEY
}, line => console.info(`MAINNET: ${line}`))

const rinkebyClient = new OpenSeaPort(rinkebyProvider, {
  networkName: Network.Rinkeby,
  apiKey: RINKEBY_API_KEY
}, line => console.info(`RINKEBY: ${line}`))

suite('seaport: static calls', () => {

  test("Mainnet staticCall tx.origin can be applied to arbitrary order", async () => {
    const accountAddress = ALEX_ADDRESS
    const takerAddress = ALEX_ADDRESS_2
    const amountInToken = 2

    const tokenId = MYTHEREUM_TOKEN_ID.toString()
    const tokenAddress = MYTHEREUM_ADDRESS

    const order = await client._makeSellOrder({
      asset: { tokenAddress, tokenId },
      accountAddress,
      startAmount: amountInToken,
      extraBountyBasisPoints: 0,
      buyerAddress: NULL_ADDRESS,
      expirationTime: 0,
      quantity: 1,
      paymentTokenAddress: NULL_ADDRESS,
      waitForHighestBid: false
    })

    order.staticTarget = STATIC_CALL_TX_ORIGIN_ADDRESS
    order.staticExtradata = encodeCall(getMethod(StaticCheckTxOrigin, 'succeedIfTxOriginMatchesSpecifiedAddress'), [takerAddress])

    assert.equal(order.paymentToken, NULL_ADDRESS)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test.skip("Mainnet StaticCall Decentraland", async () => {
    // Mainnet Decentraland
    const accountAddress = '0xf293dfe0ac79c2536b9426957ac8898d6c743717' // Mainnet Decentraland Estate owner
    const takerAddress = ALEX_ADDRESS_2
    const amountInToken = 2

    const tokenId = '2898' // Mainnet DecentralandEstate TokenID
    const tokenAddress = '0x959e104e1a4db6317fa58f8295f586e1a978c297' // Mainnet DecentralandEstates Contract

    const asset = await client.api.getAsset({ tokenAddress, tokenId })

    const order = await client._makeSellOrder({
      asset: { tokenAddress, tokenId },
      accountAddress,
      startAmount: amountInToken,
      extraBountyBasisPoints: 0,
      buyerAddress: NULL_ADDRESS,
      expirationTime: 0,
      quantity: 1,
      paymentTokenAddress: NULL_ADDRESS,
      waitForHighestBid: false
    })

    assert.equal(order.paymentToken, NULL_ADDRESS)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInToken)
    assert.equal(order.extra.toNumber(), 0)
    assert.equal(order.expirationTime.toNumber(), 0)
    testFeesMakerOrder(order, asset.collection, 0)

    await client._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })

  test.skip("Testnet StaticCall CheezeWizards", async () => {
    // Testnet Cheezewizards
    const accountAddress = ALEX_ADDRESS // Testnet CheezeWizards token owner
    const takerAddress = ALEX_ADDRESS_2
    const amountInToken = 2

     // Testnet Cheezewizards
    const tokenId = '3' // Testnet CheezeWizards TokenID
    const tokenAddress = '0x095731b672b76b00A0b5cb9D8258CD3F6E976cB2' // Testnet CheezeWizards Guild address

    const asset = await rinkebyClient.api.getAsset({ tokenAddress, tokenId })

    const order = await rinkebyClient._makeSellOrder({
      asset: { tokenAddress, tokenId },
      accountAddress,
      startAmount: amountInToken,
      extraBountyBasisPoints: 0,
      buyerAddress: NULL_ADDRESS,
      expirationTime: 0,
      quantity: 1,
      paymentTokenAddress: NULL_ADDRESS,
      waitForHighestBid: false
    })

    assert.equal(order.paymentToken, NULL_ADDRESS)
    assert.equal(order.basePrice.toNumber(), Math.pow(10, 18) * amountInToken)
    assert.equal(order.extra.toNumber(), 0)
    assert.equal(order.expirationTime.toNumber(), 0)
    testFeesMakerOrder(order, asset.collection, 0)

    await rinkebyClient._sellOrderValidationAndApprovals({ order, accountAddress })
    // Make sure match is valid
    await testMatchingNewOrder(order, takerAddress)
  })
})

'''
'''--- tsconfig.json ---
{
    "include": [
        "./src/**/*",
        "./node_modules/web3-typescript-typings/index.d.ts",
        "./node_modules/types-bn/index.d.ts",
        "./node_modules/types-ethereumjs-util/index.d.ts"
    ],
    "compilerOptions": {
        "outDir": "lib",
        "noImplicitThis": false,
        "module": "commonjs",
        "target": "es5",
        "types": ["node"],
        "lib": ["es2017", "dom"],
        "sourceMap": true,
        "declaration": true,
        "experimentalDecorators": true,
        "noImplicitReturns": true,
        "pretty": true,
        "strict": true,
        "baseUrl": ".",
        "paths": {
            "buffer" : ["./buffer-override.d.ts"]
        }
    }
}

'''
'''--- tsconfig.tests.json ---
{
    "extends": "./tsconfig.json",
    "include": [
        "./test/**/*",
    ]
}
'''
'''--- tslint.json ---
{
    "extends": ["tslint:latest", "tslint-eslint-rules"],
    "rules": {
        "adjacent-overload-signatures": true,
        "arrow-parens": [true, "ban-single-arg-parens"],
        "arrow-return-shorthand": true,
        "await-promise": true,
        "binary-expression-operand-order": true,
        "callable-types": true,
        "class-name": true,
        "completed-docs": [
            true,
            {
                "functions": { "visibilities": ["exported"] },
                "methods": { "locations": "instance", "privacies": ["public", "protected"] }
            }
        ],
        "curly": true,
        "eofline": true,
        "encoding": true,
        "import-spacing": true,
        "indent": [true, "spaces", 2],
        "interface-name": false,
        "interface-over-type-literal": true,
        "linebreak-style": [true, "LF"],
        "max-classes-per-file": [true, 1],
        "max-line-length": false,
        "member-access": true,
        "member-ordering": [true, "public-before-private", "static-before-instance", "variables-before-functions"],
        "newline-before-return": false,
        "new-parens": true,
        "no-angle-bracket-type-assertion": true,
        "no-boolean-literal-compare": true,
        "no-console": [true, "log"],
        "no-default-export": true,
        "no-empty-interface": false,
        "no-floating-promises": true,
        "no-non-null-assertion": true,
        "no-parameter-reassignment": false,
        "no-redundant-jsdoc": true,
        "no-return-await": false,
        "no-string-throw": true,
        "no-string-literal": false,
        "no-submodule-imports": false,
        "no-unnecessary-type-assertion": true,
        "no-implicit-dependencies": [true, "dev"],
        "number-literal-format": true,
        "object-literal-sort-keys": false,
        "object-literal-key-quotes": false,
        "ordered-imports": [
            false,
            {
                "grouped-imports": true
            }
        ],
        "trailing-comma": false,
        "prefer-const": true,
        "prefer-for-of": true,
        "prefer-function-over-method": false,
        "promise-function-async": true,
        "quotemark": false,
        "radix": false,
        "semicolon": [true, "never"],
        "space-before-function-paren": [
            true,
            {
                "anonymous": "never",
                "named": "never",
                "method": "never",
                "constructor": "never",
                "asyncArrow": "always"
            }
        ],
        "space-within-parens": false,
        "triple-equals": false,
        "type-literal-delimiter": false,
        "variable-name": [true, "ban-keywords", "allow-pascal-case"],
        "whitespace": [
            true,
            "check-branch",
            "check-module",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-rest-spread",
            "check-type",
            "check-typecast",
            "check-preblock"
        ]
    }
}

'''
'''--- webpack.config.js ---
const _ = require('lodash')
const webpack = require('webpack')
const path = require('path')
const production = process.env.NODE_ENV === 'production'

let entry = {
  'index': './src/index.ts'
}
if (production) {
  entry = _.assign({}, entry, {'index.min': './src/index.ts'})
}

module.exports = {
  entry,
  output: {
    path: path.resolve(__dirname, '_bundles'),
    filename: '[name].js',
    libraryTarget: 'commonjs',
    library: 'OpenSea'
  },
  resolve: {
    extensions: ['.ts', '.js', '.json']
  },
  devtool: 'source-map',
  plugins: [
    new webpack.optimize.UglifyJsPlugin({
      minimize: true,
      sourceMap: true,
      include: /\.min\.js$/
    })
  ],
  module: {
    rules: [
      {
        test: /\.ts$/,
        use: [
          {
            loader: 'awesome-typescript-loader',
            query: {
              declaration: false
            }
          }
        ],
        exclude: /node_modules/
      },
      {
        test: /\.json$/,
        loader: 'json-loader'
      }
    ]
  }
}

'''