*GitHub Repository "nativeanish/jbond-near"*

'''--- contract/Cargo.toml ---
[package]
name = "jbond-near"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
near-sdk = "3.1.0"

[lib]
crate-type = ["cdylib"]

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"

'''
'''--- package.json ---
{
	"name": "jbond-near",
	"version": "1.0.0",
	"main": "index.js",
	"license": "MIT",
	"dependencies": {
		"near-api-js": "^0.44.2",
		"parcel": "^2.3.2",
		"react": "^17.0.2",
		"react-dom": "^17.0.2",
		"sha256": "^0.2.0"
	},
	"devDependencies": {
		"@types/node": "^17.0.21",
		"@types/react": "^17.0.39",
		"@types/react-dom": "^17.0.13",
		"@types/sha256": "^0.2.0",
		"buffer": "^6.0.3",
		"process": "^0.11.10"
	},
	"scripts": {
		"dev": "npx parcel public/index.html"
	}
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html>
	<head>
		<title>James Bond Application</title>
	</head>
	<body>
		<div id="mountNode"></div>
		<script src="./index.tsx" type="module"></script>
	</body>
</html>

'''
'''--- src/reducer/fs.ts ---
import { solved } from "../utils/init";
export type ActionType = { type: "solved"; payload: string };
export async function reducer(
	state: Promise<
		Array<{
			e_msg: string;
			image: string;
			meta_data: string;
			account: Array<{ account: string; id: number }>;
		}>
	>,
	action: ActionType
) {
	switch (action.type) {
		case "solved":
			return await solved(action.payload);
		default:
			return state;
	}
}

'''
'''--- src/utils/init.ts ---
import * as nearapi from "near-api-js";
const get_near = async () => {
	const { keyStores } = nearapi;
	const keyStore = new keyStores.BrowserLocalStorageKeyStore();
	const config = {
		networkId: "testnet",
		keyStore, // optional if not signing transactions
		nodeUrl: "https://rpc.testnet.near.org",
		walletUrl: "https://wallet.testnet.near.org",
		helperUrl: "https://helper.testnet.near.org",
		explorerUrl: "https://explorer.testnet.near.org",
	};
	const near = await nearapi.connect(config);
	return near;
};

const get_wallet = async () => {
	const near = await get_near();
	const wallet = new nearapi.WalletConnection(near, null);
	return wallet;
};
const get_contract = async () => {
	const wallet = await get_wallet();
	const contract = new nearapi.Contract(
		wallet.account(),
		"dev-1646742801328-89498554696770",
		{
			viewMethods: ["get"],
			changeMethods: ["solved"],
		}
	);
	return contract;
};
export const checkSign = async () => {
	const wallet = await get_wallet();
	if (wallet.isSignedIn()) {
		return wallet.getAccountId();
	} else {
		return false;
	}
};
export const signin = async () => {
	const wallet = await get_wallet();
	wallet.requestSignIn();
	return wallet.getAccountId();
};
export const sign_out = async () => {
	const wallet = await get_wallet();
	wallet.signOut();
};
export const get = async () => {
	const contract = await get_contract();
	const response = await contract.get();
	return response;
};

export const solved = async (msgf: string) => {
	const contract = await get_contract();
	await contract.solved({
		msg: msgf,
	});
	return await get();
};

'''