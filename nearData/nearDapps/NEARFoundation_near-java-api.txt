*GitHub Repository "NEARFoundation/near-java-api"*

'''--- .github/workflows/build.yml ---
name: Java CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'

      - name: Grant execute permission for mvnw
        run: chmod +x mvnw

      - name: Build with Maven
        run: ./mvnw --no-transfer-progress --batch-mode test compile

'''
'''--- .github/workflows/generate-pages.yml ---
name: generate-jekyll-pages-for-docs

on:
  workflow_run:
    workflows: [ Update gh-pages ]
    branches: [ main ]
    types: [ completed ]

jobs:
  generate-jekyll-pages:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: gh-pages
          fetch-depth: 0

      - name: Generate pages from present docs folders and templates
        run: bash ./generate-pages.sh
        env:
          MASTER_BRANCH_NAME: origin/main
          SOURCE_INDEX_FILE: README.md

      - name: Commit changes
        uses: EndBug/add-and-commit@v8.0.1

'''
'''--- .github/workflows/gh-docs.yml ---
name: Update gh-pages

on:
  workflow_run:
    workflows: [ Java CI ]
    types: [ completed ]
    branches: [ main ]

jobs:
  generate-docs-reports:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for mvnw
        run: chmod +x mvnw

      - name: Export project version
        run: echo "PROJECT_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Run tests and Generate reports
        run: ./mvnw --no-transfer-progress --batch-mode test site

      - name: Deploy maven reports to GitHub Pages as current version
        uses: JamesIves/github-pages-deploy-action@v4.2.5
        with:
          branch: gh-pages
          clean: true
          folder: target/site
          target-folder: docs/${{ env.PROJECT_VERSION }}/site

      - name: Deploy maven reports to GitHub Pages as latest version
        uses: JamesIves/github-pages-deploy-action@v4.2.5
        with:
          branch: gh-pages
          clean: true
          folder: target/site
          target-folder: docs/latest/site

'''
'''--- .github/workflows/publish.yml ---
name: Publish package to the Maven Central Repository

on:
  release:
    types: [created]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'
          gpg-private-key: ${{ secrets.GPG_SIGNING_KEY }} # Value of the GPG private key to import
      - name: Grant execute permission for mvnw
        run: chmod +x mvnw
      - id: publish-to-central
        name: Publish to Central Repository
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          GPG_SIGNING_KEY_PASSWORD: ${{ secrets.GPG_SIGNING_KEY_PASSWORD }}
        run: ./mvnw -Prelease --no-transfer-progress --batch-mode clean deploy
'''
'''--- .idea/codeStyles/codeStyleConfig.xml ---
<component name="ProjectCodeStyleConfiguration">
  <state>
    <option name="PREFERRED_PROJECT_CODE_STYLE" value="Default" />
  </state>
</component>
'''
'''--- .idea/compiler.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <annotationProcessing>
      <profile default="true" name="Default" enabled="true" />
      <profile name="Maven default annotation processors profile" enabled="true">
        <sourceOutputDir name="target/generated-sources/annotations" />
        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
        <outputRelativeToContentRoot value="true" />
        <module name="near-java-api-rpc" />
        <module name="near-java-api-common" />
        <module name="near-java-api-indexer" />
      </profile>
    </annotationProcessing>
    <bytecodeTargetLevel>
      <module name="near-java-api-helper" target="1.8" />
    </bytecodeTargetLevel>
  </component>
</project>
'''
'''--- .idea/encodings.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Encoding">
    <file url="file://$PROJECT_DIR$/near-java-api-common/src/main/java" charset="UTF-8" />
    <file url="file://$PROJECT_DIR$/near-java-api-common/src/main/resources" charset="UTF-8" />
    <file url="file://$PROJECT_DIR$/near-java-api-helper/src/main/java" charset="UTF-8" />
    <file url="file://$PROJECT_DIR$/near-java-api-helper/src/main/resources" charset="UTF-8" />
    <file url="file://$PROJECT_DIR$/near-java-api-indexer/src/main/java" charset="UTF-8" />
    <file url="file://$PROJECT_DIR$/near-java-api-indexer/src/main/resources" charset="UTF-8" />
    <file url="file://$PROJECT_DIR$/near-java-api-rpc/src/main/java" charset="UTF-8" />
    <file url="file://$PROJECT_DIR$/near-java-api-rpc/src/main/resources" charset="UTF-8" />
    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
  </component>
</project>
'''
'''--- .idea/jarRepositories.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RemoteRepositoriesConfiguration">
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Central Repository" />
      <option name="url" value="https://repo.maven.apache.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Maven Central repository" />
      <option name="url" value="https://repo1.maven.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="jboss.community" />
      <option name="name" value="JBoss Community repository" />
      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="oss.sonatype.org-snapshot" />
      <option name="name" value="oss.sonatype.org-snapshot" />
      <option name="url" value="https://s01.oss.sonatype.org/content/repositories/snapshots/" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="oss.sonatype.org-snapshot" />
      <option name="name" value="oss.sonatype.org-snapshot" />
      <option name="url" value="https://s01.oss.sonatype.org/content/repositories/snapshots" />
    </remote-repository>
  </component>
</project>
'''
'''--- .idea/misc.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
    <option name="ignoredFiles">
      <set>
        <option value="$PROJECT_DIR$/near-java-api-helper/pom.xml" />
      </set>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="corretto-11" project-jdk-type="JavaSDK" />
  <component name="ProjectType">
    <option name="id" value="jpab" />
  </component>
</project>
'''
'''--- .idea/vcs.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="" vcs="Git" />
  </component>
</project>
'''
'''--- .mvn/local-settings.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<settings xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd" xmlns="http://maven.apache.org/SETTINGS/1.1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <servers>
    <server>
      <id>ossrh</id>
      <username>${env.MAVEN_USERNAME}</username>
      <password>${env.MAVEN_PASSWORD}</password>
    </server>
    <server>
      <id>ossrh-snapshot</id>
      <username>${env.MAVEN_USERNAME}</username>
      <password>${env.MAVEN_PASSWORD}</password>
    </server>
    <server>
      <id>gpg.passphrase</id>
      <passphrase>${env.GPG_SIGNING_KEY_PASSWORD}</passphrase>
    </server>
  </servers>
</settings>
'''
'''--- .mvn/wrapper/MavenWrapperDownloader.java ---
/*
 * Copyright 2007-present the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.net.*;
import java.io.*;
import java.nio.channels.*;
import java.util.Properties;

public class MavenWrapperDownloader {

    private static final String WRAPPER_VERSION = "0.5.6";
    /**
     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.
     */
    private static final String DEFAULT_DOWNLOAD_URL = "https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/"
        + WRAPPER_VERSION + "/maven-wrapper-" + WRAPPER_VERSION + ".jar";

    /**
     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to
     * use instead of the default one.
     */
    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =
            ".mvn/wrapper/maven-wrapper.properties";

    /**
     * Path where the maven-wrapper.jar will be saved to.
     */
    private static final String MAVEN_WRAPPER_JAR_PATH =
            ".mvn/wrapper/maven-wrapper.jar";

    /**
     * Name of the property which should be used to override the default download url for the wrapper.
     */
    private static final String PROPERTY_NAME_WRAPPER_URL = "wrapperUrl";

    public static void main(String args[]) {
        System.out.println("- Downloader started");
        File baseDirectory = new File(args[0]);
        System.out.println("- Using base directory: " + baseDirectory.getAbsolutePath());

        // If the maven-wrapper.properties exists, read it and check if it contains a custom
        // wrapperUrl parameter.
        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);
        String url = DEFAULT_DOWNLOAD_URL;
        if(mavenWrapperPropertyFile.exists()) {
            FileInputStream mavenWrapperPropertyFileInputStream = null;
            try {
                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);
                Properties mavenWrapperProperties = new Properties();
                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);
                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);
            } catch (IOException e) {
                System.out.println("- ERROR loading '" + MAVEN_WRAPPER_PROPERTIES_PATH + "'");
            } finally {
                try {
                    if(mavenWrapperPropertyFileInputStream != null) {
                        mavenWrapperPropertyFileInputStream.close();
                    }
                } catch (IOException e) {
                    // Ignore ...
                }
            }
        }
        System.out.println("- Downloading from: " + url);

        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);
        if(!outputFile.getParentFile().exists()) {
            if(!outputFile.getParentFile().mkdirs()) {
                System.out.println(
                        "- ERROR creating output directory '" + outputFile.getParentFile().getAbsolutePath() + "'");
            }
        }
        System.out.println("- Downloading to: " + outputFile.getAbsolutePath());
        try {
            downloadFileFromURL(url, outputFile);
            System.out.println("Done");
            System.exit(0);
        } catch (Throwable e) {
            System.out.println("- Error downloading");
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
        if (System.getenv("MVNW_USERNAME") != null && System.getenv("MVNW_PASSWORD") != null) {
            String username = System.getenv("MVNW_USERNAME");
            char[] password = System.getenv("MVNW_PASSWORD").toCharArray();
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });
        }
        URL website = new URL(urlString);
        ReadableByteChannel rbc;
        rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream(destination);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }

}

'''
'''--- .vscode/settings.json ---
{
    "java.configuration.updateBuildConfiguration": "automatic"
}
'''
'''--- CONTRIBUTING.md ---
# Contributing to the Near Java API 

Thanks for your interest in the SyntiFi's NEAR Java API. Our goal is to provide a Java API with all features to interact with the NEAR Network in a Java friendly way.

## Getting Started

The project [open issues are here](https://github.com/syntifi/near-java-api/issues). An easy way to get started helping the project is to *file an issue*. You can do that on the NEAR Java API issues page by clicking on the green button at the right. Issues can include bugs to fix, features to add, or documentation that looks outdated. 

If you have any ideas you would like to discuss, please kick of a new discussion at [ideas](https://github.com/syntifi/near-java-api/discussions/categories/ideas).

For some tips on contributing to open source, this [post is helpful](https://smartbear.com/blog/test-and-monitor/14-ways-to-contribute-to-open-source-without-being/).

## Contributions

SyntiFi's NEAR-Java-API welcomes contributions from everyone.

Contributions to the API should be made in the form of GitHub pull requests. Each pull request will
be reviewed by a core contributor (someone with permission to land patches) and either landed in the
main tree or given feedback for changes that would be required.

## Pull Request Checklist

- Branch from the master branch and, if needed, rebase to the current master
  branch before submitting your pull request. If it doesn't merge cleanly with
  master you may be asked to rebase your changes.

- Commits should be as small as possible, while ensuring that each commit is
  correct independently (i.e., each commit should compile and pass tests). 

- Don't put submodule updates in your pull request unless they are to landed
  commits.

- If your patch is not getting reviewed or you need a specific person to review
  it, you can @-reply a reviewer asking for a review in the pull request or a
  comment.

- Add tests relevant to the fixed bug or new feature.  

## Conduct & License

We follow the [Rust Code of Conduct](http://www.rust-lang.org/conduct.html).

All code in this repository is released under the Apache 2 License, and by contributing to this repository, you agree to release that contribution under that same license. 

## Reference

A lot of these contribution guidelines were borrowed from the [deeplearning4j project](https://github.com/eclipse/deeplearning4j). Thank you!

'''
'''--- README.md ---
# NEAR Java 8+ API

This project implements the API to interact with a NEAR Node. It wraps the Json-RPC requests and maps the results to Java objects. 

## Dependencies
- Java 8+ 
- Maven (via wrapper)

## Build instructions
```
./mvnw package
```

## Using the Maven Central repository

### Using Maven
``` xml
<dependency>
  <groupId>com.syntifi.near</groupId>
  <artifactId>near-java-api</artifactId>
  <version>0.1.0</version>
</dependency>
```

### Using gradle
``` groovy
implementation 'com.syntifi.near:near-java-api:0.1.0'
```

## References
This project used the following references:

- Official docs @ [docs.near.org](https://docs.near.org/docs/api/rpc/)

## How to

### 1. [Set-up a connection](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceHelper.java#L21)

``` java
nearClient = NearService.usingPeer("archival-rpc.testnet.near.org");
```

### 2. [Access Keys](https://docs.near.org/docs/api/rpc/access-keys#access-keys)

#### 2.1 [View access key](https://docs.near.org/docs/api/rpc/access-keys#view-access-key)
Returns information about a single access key for given account.

If permission of the key is FunctionCall, it will return more details such as the allowance, receiver_id, and method_names.

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L585-L588)

``` java
String accountId = "client.chainlink.testnet";
String publicKey = "ed25519:H9k5eiU4xXS3M4z8HzKJSLaZdqGdGwBG49o7orNC4eZW";

AccessKey accessKey = nearClient.viewAccessKey(Finality.FINAL, accountId, publicKey);
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L610-L613)
``` java
String accountId = "client.chainlink.testnet";
String publicKey = "ed25519:H9k5eiU4xXS3M4z8HzKJSLaZdqGdGwBG49o7orNC4eZW";

AccessKey accessKey = nearClient.viewAccessKey(78443365, accountId, publicKey);
```
#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L595-L599)
``` java
String accountId = "client.chainlink.testnet";
String publicKey = "ed25519:H9k5eiU4xXS3M4z8HzKJSLaZdqGdGwBG49o7orNC4eZW";

AccessKey accessKey = nearClient.viewAccessKey("8bVg8wugs2QHqXr42oEsCYyH7jvR9pLaAP35dFqx2evU", accountId, publicKey);
```

#### 2.2 [View access key list](https://docs.near.org/docs/api/rpc/access-keys#view-access-key-list)
Returns all access keys for a given account.

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L637-L639)

``` java
String accountId = "client.chainlink.testnet";

AccessKeyList accessKeyList = nearClient.viewAccessKeyList(Finality.FINAL, accountId);
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L660-L662)
``` java
String accountId = "client.chainlink.testnet";

AccessKeyList accessKeyList = nearClient.viewAccessKeyList(78772585, accountId);
```
#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L646-L649)
``` java
String accountId = "client.chainlink.testnet";

AccessKeyList accessKeyList = nearClient.viewAccessKeyList("DwFpDPiQXBaX6Vw3aKazQ4nXjgzw1uk6XpUkfTSJrbXf", accountId);
```

#### 2.3 [View access key changes (single)](https://docs.near.org/docs/api/rpc/access-keys#view-access-key-changes-single)
Returns individual access key changes in a specific block. You can query multiple keys by passing an array of objects containing the account_id and public_key.

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L688-L793)

``` java
Key[] keys = new Key[1];

Key key0 = new Key("example-acct.testnet", "ed25519:25KEc7t7MQohAJ4EDThd2vkksKkwangnuJFzcoiXj9oM");
keys[0] = key0;

AccessKeyChanges accessKeyChanges = nearClient.viewSingleAccessKeyChanges(Finality.FINAL, keys);
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L718-L723)
``` java
Key[] keys = new Key[1];

Key key0 = new Key("example-acct.testnet", "ed25519:25KEc7t7MQohAJ4EDThd2vkksKkwangnuJFzcoiXj9oM");
keys[0] = key0;

AccessKeyChanges accessKeyChanges = nearClient.viewSingleAccessKeyChanges(78433961, keys);
```
#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L702-L709)
``` java
Key[] keys = new Key[1];

Key key0 = new Key("example-acct.testnet", "ed25519:25KEc7t7MQohAJ4EDThd2vkksKkwangnuJFzcoiXj9oM");
keys[0] = key0;

AccessKeyChanges accessKeyChanges = nearClient.viewSingleAccessKeyChanges("Cr82U81VqHgCz9LzZjPivh9t16e8es6aFCv9qvDMMH88", keys);
```

#### 2.4 [View access key changes (all)](https://docs.near.org/docs/api/rpc/access-keys#view-access-key-changes-all)
Returns changes to all access keys of a specific block. Multiple accounts can be quereied by passing an array of account_ids.

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L763-L767)

``` java
String[] accountIds = new String[1];

accountIds[0] = "client.chainlink.testnet";

AccessKeyChanges accessKeyChanges = nearClient.viewAllAccessKeyChanges(Finality.FINAL, accountIds);
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L791-L795)
``` java
String[] accountIds = new String[1];

accountIds[0] = "client.chainlink.testnet";

AccessKeyChanges accessKeyChanges = nearClient.viewAllAccessKeyChanges(78433518, accountIds);
```
#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L776-L782)
``` java
String[] accountIds = new String[1];

accountIds[0] = "client.chainlink.testnet";

AccessKeyChanges accessKeyChanges = nearClient.viewAllAccessKeyChanges("Ais9kPbHvk6XmEYptoEpBtyFW77V16TZNHHnYtmXWr1d",accountIds);
```

### 3. [Accounts / Contracts](https://docs.near.org/docs/api/rpc/contracts)

#### 3.1 [View account](https://docs.near.org/docs/api/rpc/contracts#view-account)
Returns basic account information.

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L815)

``` java
Account account = nearClient.viewAccount(Finality.FINAL, "nearkat.testnet");
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L833)
``` java
Account account = nearClient.viewAccount(78439658, "nearkat.testnet");
```
#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L822)
``` java
Account account = nearClient.viewAccount("5hyGx7LiGaeRiAN4RrKcGomi1QXHqZwKXFQf6xTmvUgb", "nearkat.testnet");
```

#### 3.2 [View account changes](https://docs.near.org/docs/api/rpc/contracts#view-account-changes)
Returns account changes from transactions in a given account.

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L859-L863)

``` java
String[] accountIds = new String[1];

accountIds[0] = "nearkat.testnet";

AccountChanges accountChanges = nearClient.viewAccountChanges(Finality.FINAL, accountIds);
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L890-L894)
``` java
String[] accountIds = new String[1];

accountIds[0] = "nearkat.testnet";

AccountChanges accountChanges = nearClient.viewAccountChanges(78440142, accountIds);
```
#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L872-L877)
``` java
String[] accountIds = new String[1];

accountIds[0] = "nearkat.testnet";

AccountChanges accountChanges = nearClient.viewAccountChanges("7vWp2djKLoJ3RE1sr8RzSKQtyzKpe2wZ7NCcDuFNuL7j", accountIds);
```

#### 3.3 [View contract code](https://docs.near.org/docs/api/rpc/contracts#view-contract-code)
Returns the contract code (Wasm binary) deployed to the account. Please note that the returned code will be encoded in base64.

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L918)

``` java
ContractCode contractCode = nearClient.viewContractCode(Finality.FINAL, "guest-book.testnet");
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L937)
``` java
ContractCode contractCode = nearClient.viewContractCode(78440518, "guest-book.testnet");
```
#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L925-L926)
``` java
ContractCode contractCode = nearClient.viewContractCode("uLxyauKPhSk1tebYKi3k69pHSaT2ZLzWy4JwtGm52pu", "guest-book.testnet");
```

#### 3.4 [View contract state](https://docs.near.org/docs/api/rpc/contracts#view-contract-state)
Returns the state (key value pairs) of a contract based on the key prefix (base64 encoded). Pass an empty string for prefix_base64 if you would like to return the entire state. Please note that the returned state will be base64 encoded as well.

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L963-L964)

``` java
ContractState contractState = nearClient.viewContractState(Finality.FINAL, "guest-book.testnet", "");
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L990-L991)
``` java
ContractState contractState = nearClient.viewContractState(78440679, "guest-book.testnet", "");
```
#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L974-L975)
``` java
ContractState contractState = nearClient.viewContractState("342bkjvnzoZ7FGRE5BwDVkzSRUYXAScTz3GsDB9sEHXg", "guest-book.testnet", "");
```

#### 3.5 [View contract state changes](https://docs.near.org/docs/api/rpc/contracts#view-contract-state-changes)
Returns the state change details of a contract based on the key prefix (encoded to base64). Pass an empty string for this param if you would like to return all state changes.

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L1019-L1024)

``` java
String[] accountIds = new String[1];

accountIds[0] = "guest-book.testnet";

ContractStateChanges contractStateChanges = nearClient.viewContractStateChanges(Finality.FINAL, accountIds, "");
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L1052-L1056)
``` java
String[] accountIds = new String[1];

accountIds[0] = "guest-book.testnet";

ContractStateChanges contractStateChanges = nearClient.viewContractStateChanges(78441183, accountIds, "");
```
#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L1033-L1039)
``` java
String[] accountIds = new String[1];

accountIds[0] = "guest-book.testnet";

ContractStateChanges contractStateChanges = nearClient.viewContractStateChanges("5KgQ8uu17bhUPnMUbkmciHxbpFvsbhwdkJu4ptRfR7Zn", accountIds, "");
```

#### 3.6 [View contract code changes](https://docs.near.org/docs/api/rpc/contracts#view-contract-code-changes)
Returns code changes made when deploying a contract. Change is returned is a base64 encoded WASM file.

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L1083-L1087)

``` java
String[] accountIds = new String[1];

accountIds[0] = "dev-1602714453032-7566969";

ContractCodeChanges contractCodeChanges = nearClient.viewContractCodeChanges(Finality.FINAL, accountIds);
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L1115-L1119)
``` java
String[] accountIds = new String[1];

accountIds[0] = "dev-1602714453032-7566969";

ContractCodeChanges contractCodeChanges = nearClient.viewContractCodeChanges(78441560, accountIds);
```
#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L1096-L1102)
``` java
String[] accountIds = new String[1];

accountIds[0] = "dev-1602714453032-7566969";

ContractCodeChanges contractCodeChanges = nearClient.viewContractCodeChanges("HpsjZvjtuxarKRsXGVrgB6qtuCcHRgx3Xof1gfT2Jfj7", accountIds);
```

#### 3.7 [Call a contract function](https://docs.near.org/docs/api/rpc/contracts#call-a-contract-function)
Allows you to call a contract method as a [view function](https://docs.near.org/docs/develop/contracts/as/intro#view-and-change-functions).

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L1145-L1150)

``` java
ContractFunctionCallResult contractFunctionCallResult = nearClient
        .callContractFunction(
                Finality.FINAL,
                "guest-book.testnet",
                "getMessages",
                "e30=");
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L1189-L1193)
``` java
ContractFunctionCallResult contractFunctionCallResult = nearClient
        .callContractFunction(79272492,
                "guest-book.testnet",
                "getMessages",
                "e30=");
```
#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L1157-L1162)
``` java
ContractFunctionCallResult contractFunctionCallResult = nearClient
        .callContractFunction(
                "J5QTB4Stz3iwtHvgr5KnVzNUgzm4J1bE5Et6JWrJPC8o",
                "guest-book.testnet",
                "getMessages",
                "e30=");
```

### 4. [Block / Chunk](https://docs.near.org/docs/api/rpc/block-chunk)

#### 4.1 [Block details](https://docs.near.org/docs/api/rpc/block-chunk#block-details)
Queries network and returns block for given height or hash. You can also use finality param to return latest block details.

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L79)

``` java
Block block = nearClient.getBlock(Finality.FINAL);
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L110)
``` java
Block block = nearClient.getBlock(78770817);
```
#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L86)
``` java
Block block = nearClient.getBlock("FXTWzPjqWztjHfneqJb9cBDB2QLTY1Rja4GHrswAv1b9");
```

#### 4.2 [Changes in Block](https://docs.near.org/docs/api/rpc/block-chunk#changes-in-block)
Returns changes in block for given block height or hash. You can also use finality param to return latest block details.

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L134)

``` java
BlockChanges blockChanges = nearClient.getBlockChanges(Finality.FINAL);
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L152)
``` java
BlockChanges blockChanges = nearClient.getBlockChanges(78770674);
```

#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L141)
``` java
BlockChanges blockChanges = nearClient.getBlockChanges("BmEZnrmov6h6rMPpWkMV2JtU1C5LP563V5Y5yXwUW2N5");
```

#### 4.3 [Chunk Details](https://docs.near.org/docs/api/rpc/block-chunk#chunk-details)
Returns details of a specific chunk. You can run a block details query to get a valid chunk hash.

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L176)

``` java
Chunk chunk = nearClient.getChunkDetails("9mdG2cRcV8Dsb1EoSjtya81NddjRB2stYCTVukZh7zzw");
```

#### [By block height and shard id](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L198)
``` java
Chunk chunk = nearClient.getChunkDetails(78567387, 0);
```

#### [By block hash and shard id](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L187)
``` java
Chunk chunk = nearClient.getChunkDetails("F1HXTzeYgYq28rgsHuKUrRbo5QTBGKFYG7rbxXkRZWXN", 0);
```

### 5. [Gas](https://docs.near.org/docs/api/rpc/gas)

#### 5.1 [Gas Price](https://docs.near.org/docs/api/rpc/gas#gas-price)
Returns gas price for a specific block_height or block_hash.

- Using [null] will return the most recent block's gas price.

### [Null](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L306)

``` java
GasPrice gasPrice = nearClient.getGasPrice(null);
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L328)
``` java
GasPrice gasPrice = nearClient.getGasPrice(78770817);
```

#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L317)
``` java
GasPrice gasPrice = nearClient.getGasPrice("FXTWzPjqWztjHfneqJb9cBDB2QLTY1Rja4GHrswAv1b9");
```

### 6. [Protocol](https://docs.near.org/docs/api/rpc/protocol)

#### 6.1 [Genesis Config](https://docs.near.org/docs/api/rpc/protocol#genesis-config)
Returns current genesis configuration.

### [Example](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L352)

``` java
GenesisConfig genesisConfig = nearClient.getGenesisConfig();
```

#### 6.2 [Protocol Config](https://docs.near.org/docs/api/rpc/protocol#protocol-config)
Returns most recent protocol configuration or a specific queried block. Useful for finding current storage and transaction costs.

#### [By finality](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L376)

``` java
ProtocolConfig protocolConfig = nearClient.getProtocolConfig(Finality.FINAL);
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L398)
``` java
ProtocolConfig protocolConfig = nearClient.getProtocolConfig(78770817);
```

#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L387)
``` java
ProtocolConfig protocolConfig = nearClient.getProtocolConfig("FXTWzPjqWztjHfneqJb9cBDB2QLTY1Rja4GHrswAv1b9");
```

### 7. [Network](https://docs.near.org/docs/api/rpc/network)

#### 7.1 [Node Status](https://docs.near.org/docs/api/rpc/network#node-status)
Returns general status of a given node (sync status, nearcore node version, protocol version, etc), and the current set of validators.

### [Example](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L241)

``` java
NodeStatus nodeStatus = nearClient.getNodeStatus();
```

#### 7.2 [Network Info](https://docs.near.org/docs/api/rpc/network#network-info)
Returns the current state of node network connections (active peers, transmitted data, etc.)

### [Example](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L222)

``` java
NetworkInfo networkInfo = nearClient.getNetworkInfo();
```

#### 7.3 [Validation Status](https://docs.near.org/docs/api/rpc/network#validation-status)
Queries active validators on the network returning details and the state of validation on the blockchain.

### [Null](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L262)

``` java
ValidationStatus networkValidationStatus = nearClient.getNetworkValidationStatus(null);
```

#### [By height](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L283-L286)
``` java
Block lastBlock = nearClient.getBlock(Finality.OPTIMISTIC);

ValidationStatus networkValidationStatus = nearClient.getNetworkValidationStatus(lastBlock.getHeader().getHeight());
```

#### [By hash](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L271-L274)
``` java
Block lastBlock = nearClient.getBlock(Finality.FINAL);

ValidationStatus networkValidationStatus = nearClient.getNetworkValidationStatus(lastBlock.getHeader().getHash());
```

### 8. [Transactions](https://docs.near.org/docs/api/rpc/transactions)

#### 8.1 [Send transaction (async)](https://docs.near.org/docs/api/rpc/transactions#send-transaction-async)
Sends a transaction and immediately returns transaction hash.

#### [Example](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/TransactionServiceTest.java#L132-L139)
``` java

String signerId = "syntifi-bob.testnet";
String receiverId = "syntifi-alice.testnet";
BigInteger amount = new BigInteger("100", 10);

EncodedHash transactionAsync = TransactionService
        .sendTransferActionAsync(nearClient, signerId, receiverId, bobNearPublicKey, bobNearPrivateKey, amount);
```

#### 8.2 [Send transaction (await)](https://docs.near.org/docs/api/rpc/transactions#send-transaction-await)
Sends a transaction and waits until transaction is fully complete. (Has a 10 second timeout)

#### [Example](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/TransactionServiceTest.java#L90-L97)
``` java
String signerId = "syntifi-alice.testnet";
String receiverId = "syntifi-bob.testnet";
BigInteger amount = new BigInteger("100", 10);

TransactionAwait transactionAwait = TransactionService
        .sendTransferActionAwait(nearClient, signerId, receiverId, aliceNearPublicKey, aliceNearPrivateKey, amount);
```

#### 8.3 [Transaction Status](https://docs.near.org/docs/api/rpc/transactions#transaction-status)
Queries status of a transaction by hash and returns the final transaction result.

#### [Example](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L479-L482)
``` java        
String transactionHash = "DwWUi6WbVHKTCDjVu4gmuQfryqjwTjrZ6ntRcKcGN6Gd";
String accountId = "isonar.testnet";

TransactionStatus transactionStatus = nearClient.getTransactionStatus(transactionHash, accountId);
```

#### 8.4 [Transaction Status with Receipts](https://docs.near.org/docs/api/rpc/transactions#transaction-status-with-receipts)
Queries status of a transaction by hash, returning the final transaction result and details of all receipts.

#### [Example](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L510-L514)
``` java        
String transactionHash = "DwWUi6WbVHKTCDjVu4gmuQfryqjwTjrZ6ntRcKcGN6Gd";
String accountId = "isonar.testnet";

TransactionStatus transactionStatusWithReceipts = nearClient.getTransactionStatusWithReceipts(transactionHash, accountId);
```

#### 8.5 [Receipt by ID](https://docs.near.org/docs/api/rpc/transactions#receipt-by-id)
Fetches a receipt by it's ID (as is, without a status or execution outcome)

#### [Example](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/NearServiceTest.java#L542-L544)
``` java        
String receiptId = "8b9Vt1xH8DZecMda1YqUcMWA41NvknUJJVd2XEQikPRs";

Receipt transactionReceipt = nearClient.getTransactionReceipt(receiptId);
```

### 9. Json File Wallets

#### 9.1 Loads a Wallet from a json file
Loads a Wallet object from a json file.

#### [Example](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/WalletServiceTest.java#L36)
``` java        
String fileName = "./my-wallet.json";

WalletService.writeWalletToFile(fileName, wallet)
```

#### 9.2 Writes a Wallet to a json file
Writes a Wallet object to a json file.

#### [Example](https://github.com/syntifi/near-java-api/blob/main/src/test/java/com/syntifi/near/api/service/WalletServiceTest.java#L53)
``` java        
String fileName = "./my-wallet.json";

Wallet wallet = WalletService.loadWalletFromFile(fileName);
```

'''
'''--- mvnw.cmd ---
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Maven Start Up Batch script
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM M2_HOME - location of maven2's installed home dir
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")

@REM Execute a user defined script before this one
if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist "%HOME%\mavenrc_pre.bat" call "%HOME%\mavenrc_pre.bat"
if exist "%HOME%\mavenrc_pre.cmd" call "%HOME%\mavenrc_pre.cmd"
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not "%JAVA_HOME%" == "" goto OkJHome

echo.
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

:OkJHome
if exist "%JAVA_HOME%\bin\java.exe" goto init

echo.
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = "%JAVA_HOME%" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST "%WDIR%"\.mvn goto baseDirFound
cd ..
IF "%WDIR%"=="%CD%" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd "%EXEC_DIR%"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd "%EXEC_DIR%"

:endDetectBaseDir

IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar"

FOR /F "tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
    IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if "%MVNW_VERBOSE%" == "true" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not "%MVNW_REPOURL%" == "" (
        SET DOWNLOAD_URL="%MVNW_REPOURL%/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar"
    )
    if "%MVNW_VERBOSE%" == "true" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %DOWNLOAD_URL%
    )

    powershell -Command "&{"^
		"$webclient = new-object System.Net.WebClient;"^
		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
		"}"^
		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
		"}"
    if "%MVNW_VERBOSE%" == "true" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM Provide a "standardized" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not "%MAVEN_SKIP_RC%" == "" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist "%HOME%\mavenrc_post.bat" call "%HOME%\mavenrc_post.bat"
if exist "%HOME%\mavenrc_post.cmd" call "%HOME%\mavenrc_post.cmd"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if "%MAVEN_BATCH_PAUSE%" == "on" pause

if "%MAVEN_TERMINATE_CMD%" == "on" exit %ERROR_CODE%

exit /B %ERROR_CODE%

'''
'''--- near-java-api-common/pom.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>near-java-api</artifactId>
        <groupId>com.syntifi.near</groupId>
        <version>0.2.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>near-java-api-common</artifactId>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.2</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/exception/NearErrorData.java ---
package com.syntifi.near.api.common.exception;

import lombok.Data;

import java.io.Serializable;

/**
 * Json RPC service error data
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Data
public class NearErrorData implements Serializable {
    private String name;
    private Serializable cause;
    private int code;
    private String message;
    private Serializable data;
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/exception/NearException.java ---
package com.syntifi.near.api.common.exception;

import lombok.Getter;

/**
 * Thrown on Near RPC service error
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public class NearException extends RuntimeException {
    @Getter
    private final NearErrorData nearErrorData;

    public NearException(NearErrorData error) {
        super(String.format("%s (Code: %d): %s", error.getMessage(), error.getCode(), error.getData().toString()));
        nearErrorData = error;
    }

    public NearException(String message) {
        this(message, null);
    }

    public NearException(String message, Throwable cause) {
        super(message, cause);
        nearErrorData = null;
    }
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/exception/NoSuchTypeException.java ---
package com.syntifi.near.api.common.exception;

/**
 * Thrown in case of a type which does not exist being requested
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public class NoSuchTypeException extends NearException {
    public NoSuchTypeException(String message) {
        super(message);
    }

    public NoSuchTypeException(String message, Throwable t) {
        super(message, t);
    }
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/helper/Formats.java ---
package com.syntifi.near.api.common.helper;

import java.math.BigInteger;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Helper methods for formatting
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public class Formats {

    /**
     * Exponent for calculating how many indivisible units are there in one NEAR. See {@link #NEAR_NOMINATION}.
     */
    public static int NEAR_NOMINATION_EXP = 24;

    /**
     * Number of indivisible units in one NEAR. Derived from {@link #NEAR_NOMINATION_EXP}.
     */
    public static BigInteger NEAR_NOMINATION = BigInteger.valueOf(10).pow(NEAR_NOMINATION_EXP);

    /**
     * Pre-calculate offsets used for rounding to different number of digits
     */
    static BigInteger[] ROUNDING_OFFSETS = new BigInteger[NEAR_NOMINATION_EXP];
    static {
        BigInteger ten = BigInteger.valueOf(10);
        for (BigInteger i = BigInteger.ZERO, offset = BigInteger.valueOf(5);
             i.compareTo(BigInteger.valueOf(NEAR_NOMINATION_EXP)) < 0;
             i = i.add(BigInteger.ONE), offset = offset.multiply(ten)) {
            ROUNDING_OFFSETS[(int) i.longValue()] = offset;
        }
    }

    /**
     * Convert account balance value from internal indivisible units to NEAR. 1 NEAR is defined by {@link #NEAR_NOMINATION}.
     * Effectively this divides given amount by {@link #NEAR_NOMINATION}.
     *
     * @param balance    decimal string representing balance in smallest non-divisible NEAR units (as specified by {@link #NEAR_NOMINATION})
     * @param fracDigits number of fractional digits to preserve in formatted string. Balance is rounded to match given number of digits.
     * @return Value in Ⓝ
     */
    public static String formatNearAmount(String balance, Integer fracDigits) {
        if (fracDigits == null) fracDigits = NEAR_NOMINATION_EXP;
        BigInteger balanceBN = new BigInteger(balance, 10);
        if (fracDigits != NEAR_NOMINATION_EXP) {
            // Adjust balance for rounding at given number of digits
            final int roundingExp = NEAR_NOMINATION_EXP - fracDigits - 1;
            if (roundingExp > 0) {
                balanceBN = balanceBN.add(ROUNDING_OFFSETS[roundingExp]);
            }
        }

        balance = balanceBN.toString();
        final String wholeStr = balance != null && balance.length() - NEAR_NOMINATION_EXP > 0 ? balance.substring(0, balance.length() - NEAR_NOMINATION_EXP) : "0";
        final String fractionStr = balance != null ? padStart(balance.substring(Math.max(balance.length() - NEAR_NOMINATION_EXP, 0)), NEAR_NOMINATION_EXP, '0').substring(0, fracDigits) : "0";

        return trimTrailingZeroes(formatWithCommas(wholeStr) + "." + fractionStr);
    }

    /**
     * Convert human-readable NEAR amount to internal indivisible units.
     * Effectively this multiplies given amount by {@link #NEAR_NOMINATION}.
     *
     * @param amount decimal string (potentially fractional) denominated in NEAR.
     * @return The parsed yoctoⓃ amount or null if no amount was passed in
     */
    public static String parseNearAmount(String amount) {
        if (amount == null) {
            return null;
        }
        amount = cleanupAmount(amount);
        final String[] split = amount.split("\\.");
        final String wholePart = split[0];
        final String fracPart = split.length > 1 ? split[1] : "";
        if (split.length > 2 || fracPart.length() > NEAR_NOMINATION_EXP) {
            throw new RuntimeException("Cannot parse '" + amount + "' as NEAR amount");
        }
        final String toTrim = wholePart + padEnd(fracPart, NEAR_NOMINATION_EXP, '0');
        return trimLeadingZeroes(toTrim);
    }

    /**
     * Pads an input string from its start with a char until it reaches a max length
     *
     * @param input     the input string
     * @param maxLength the max length to reach
     * @param fillChar  the char to fill
     * @return the padded string
     */
    public static String padStart(String input, int maxLength, char fillChar) {
        StringBuilder sb = new StringBuilder();
        sb.append(input);
        while (sb.length() < maxLength) {
            sb.insert(0, fillChar);
        }
        return sb.toString();
    }

    /**
     * Pads an input string from its end with a char until it reaches a max length
     *
     * @param input     the input string
     * @param maxLength the max length to reach
     * @param fillChar  the char to fill
     * @return the padded string
     */
    public static String padEnd(String input, int maxLength, char fillChar) {
        StringBuilder sb = new StringBuilder();
        sb.append(input);
        while (sb.length() < maxLength) {
            sb.append(fillChar);
        }
        return sb.toString();
    }

    /**
     * Removes commas from the input
     *
     * @param amount A value or amount that may contain commas
     * @return string The cleaned value
     */
    public static String cleanupAmount(String amount) {
        return amount.replace(",", "").trim();
    }

    /**
     * Removes .000… from an input
     *
     * @param value A value that may contain trailing zeroes in the decimals place
     * @return string The value without the trailing zeros
     */
    public static String trimTrailingZeroes(String value) {
        return value.replaceAll("\\.?0*$", "");
    }

    /**
     * Removes leading zeroes from an input
     *
     * @param value A value that may contain leading zeroes
     * @return string The value without the leading zeroes
     */
    public static String trimLeadingZeroes(String value) {
        value = value.replaceAll("^0+", "");
        if (Objects.equals(value, "")) {
            return "0";
        }
        return value;
    }

    /**
     * Returns a human-readable value with commas
     *
     * @param value A value that may not contain commas
     * @return string A value with commas
     */
    public static String formatWithCommas(String value) {
        final String patternString = "(-?\\d+)(\\d{3})";
        Pattern pattern = Pattern.compile(patternString);
        Matcher matcher = pattern.matcher(value);
        while (matcher.find()) {
            value = value.replace(matcher.group(0), matcher.group(1) + "," + matcher.group(2));
            matcher = pattern.matcher(value);
        }
        return value;
    }

}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/helper/Network.java ---
package com.syntifi.near.api.common.helper;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * Lists of most relevant networks and their root domain
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@AllArgsConstructor
@Getter
public enum Network {
    MAIN_NET("rpc.mainnet.near.org", "api.kitwallet.app", "helper.near.org", "https://explorer.near.org/transactions/", "near"),
    TEST_NET("rpc.testnet.near.org", "testnet-api.kitwallet.app", "helper.testnet.near.org", "https://explorer.testnet.near.org/transactions/", "testnet"),
    ARCHIVAL_TEST_NET("archival-rpc.testnet.near.org", "testnet-api.kitwallet.app", "helper.testnet.near.org", "https://explorer.testnet.near.org/transactions/", "testnet");

    private final String rpcUrl;
    private final String indexerUrl;
    private final String helperUrl;
    private final String explorerUrl;
    private final String domain;
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/helper/Strings.java ---
package com.syntifi.near.api.common.helper;

import java.net.URL;

/**
 * Helper methods for Strings
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public class Strings {
    public static boolean isURL(String url) {
        try {
            new URL(url);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/json/JsonHelper.java ---
package com.syntifi.near.api.common.json;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.syntifi.near.api.common.service.NearObjectMapper;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

/**
 * Basic support functionality for test case classes
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public final class JsonHelper {
    public static final ObjectMapper OBJECT_MAPPER = new NearObjectMapper();

    /**
     * Loads test json from resources
     *
     * @param file file to load from
     * @return file content
     * @throws IOException thrown if error reading file
     */
    public static String loadJsonFromFile(File file) throws IOException {
        String fileJson;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try (InputStream is = new FileInputStream(file)) {
            // copy stream
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = is.read(buffer)) != -1) {
                baos.write(buffer, 0, bytesRead);
            }

            fileJson = baos.toString();
        }
        return fileJson;
    }

    /**
     * Loads test json from resources
     *
     * @param filename filename to load
     * @return file content
     * @throws IOException thrown if error reading file
     */
    public static String loadJsonFromResourceFile(String filename) throws IOException {
        String fileJson;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try (InputStream is = JsonHelper.class.getClassLoader().getResourceAsStream(filename)) {
            // copy stream
            byte[] buffer = new byte[1024];
            int bytesRead;
            while (true) {
                assert is != null;
                if ((bytesRead = is.read(buffer)) == -1) break;
                baos.write(buffer, 0, bytesRead);
            }

            fileJson = baos.toString();
        }
        return fileJson;
    }

    /**
     * Prettifies json for assertion consistency
     *
     * @param json json string to prettify
     * @return prettified json
     * @throws JsonMappingException    thrown if error mapping json
     * @throws JsonProcessingException thrown if error processing json
     */
    public static String getPrettyJson(String json) throws JsonMappingException, JsonProcessingException {
        Object jsonObject = OBJECT_MAPPER.readValue(json, Object.class);
        return getPrettyJson(jsonObject);
    }

    /**
     * Prettifies json for assertion consistency
     *
     * @param jsonObject object to serialize and prettify
     * @return prettified json
     * @throws JsonMappingException    thrown if error mapping json
     * @throws JsonProcessingException thrown if error processing json
     */
    public static String getPrettyJson(Object jsonObject) throws JsonProcessingException {
        return OBJECT_MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(jsonObject);
    }
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/model/common/Base64String.java ---
package com.syntifi.near.api.common.model.common;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AccessLevel;
import lombok.Builder;
import lombok.Getter;

import java.util.Arrays;
import java.util.Base64;

/**
 * Base64String
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Builder(access = AccessLevel.PRIVATE)
public class Base64String {
    @JsonValue
    private String encodedString;

    @JsonIgnore
    private String decodedString;

    /**
     * Creates an instance of Base64String from a decoded string value
     *
     * @param value the base64 decoded string
     * @return a Base64String from the decoded string
     */
    public static Base64String fromDecodedString(String value) {
        return Base64String.builder()
                .decodedString(value)
                .encodedString(Base64.getEncoder().encodeToString(value.getBytes())).build();
    }

    /**
     * Creates an instance of Base64String from an encoded string value
     *
     * @param value the base64 encoded string
     * @return a Base64String from the encoded string
     */
    public static Base64String fromEncodedString(String value) {
        return Base64String.builder()
                .decodedString(Arrays.toString(Base64.getDecoder().decode(value)))
                .encodedString(value).build();
    }
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/model/common/ChangeCause.java ---
package com.syntifi.near.api.common.model.common;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * ChangeCause
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ChangeCause {
    @JsonProperty("type")
    private String type;

    @JsonProperty("tx_hash")
    @JsonInclude(value = Include.NON_EMPTY)
    private String transactionHash;

    @JsonProperty("receipt_hash")
    @JsonInclude(value = Include.NON_EMPTY)
    private String receiptHash;
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/model/common/EncodedHash.java ---
package com.syntifi.near.api.common.model.common;

import com.fasterxml.jackson.annotation.JsonValue;
import com.syntifi.crypto.key.encdec.Base58;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * EncodedHash
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EncodedHash {
    @JsonValue
    private String encodedHash;

    public byte[] getDecodedHash() {
        return Base58.decode(this.encodedHash);
    }

    public void setEncodedHash(byte[] decodedHash) {
        this.encodedHash = Base58.encode(decodedHash);
    }
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/model/key/KeySig.java ---
package com.syntifi.near.api.common.model.key;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.syntifi.crypto.key.encdec.Base58;
import com.syntifi.near.api.common.exception.NoSuchTypeException;
import com.syntifi.near.borshj.annotation.BorshField;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.lang.reflect.InvocationTargetException;

/**
 * KeySig holds information about a key or signature.
 * Also, it handles to disassemble and assemble of key and signature structure.
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@EqualsAndHashCode
public class KeySig {

    private static final String SEPARATOR = ":";

    @BorshField(order = 1)
    @JsonIgnore
    protected KeyType type;

    @BorshField(order = 2)
    @JsonIgnore
    protected byte[] data;

    public KeySig(KeyType keyType, byte[] data) {
        this.type = keyType;
        this.data = data;
    }

    /**
     * Reads from key or signature from base-58 string
     *
     * @param encodedBase58String a string base-58 encoded with the key or signature
     * @param clazz               return class type
     * @param <T>                 the parameter return class
     * @return a PublicKey, PrivateKey or Signature object with type and data
     */
    public static <T extends KeySig> T fromEncodedBase58String(String encodedBase58String, Class<T> clazz) {
        KeyType keyType;
        byte[] data;

        String[] key = encodedBase58String.split(SEPARATOR, -1);
        try {
            keyType = KeyType.valueOf(key[0].toUpperCase());
        } catch (Exception e) {
            throw new NoSuchTypeException(String.format("No implementation found for key type %s", key[0]), e);
        }

        data = Base58.decode(key[1]);

        try {
            return clazz.getDeclaredConstructor(KeyType.class, byte[].class).newInstance(keyType, data);
        } catch (InvocationTargetException | InstantiationException | IllegalAccessException | NoSuchMethodException e) {
            throw new NoSuchTypeException(String.format("Class %s instantiation failed for needed constructor", clazz.getSimpleName()), e);
        }
    }

    public String toEncodedBase58String() {
        return this.getType().toString().toLowerCase() + SEPARATOR + this;
    }

    @Override
    public String toString() {
        return Base58.encode(data);
    }
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/model/key/KeyType.java ---
package com.syntifi.near.api.common.model.key;

/**
 * The KeyType enum
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public enum KeyType {
    ED25519
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/model/key/PrivateKey.java ---
package com.syntifi.near.api.common.model.key;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.syntifi.crypto.key.AbstractPrivateKey;
import com.syntifi.crypto.key.Ed25519PrivateKey;
import com.syntifi.near.api.common.exception.NoSuchTypeException;
import lombok.Builder;

/**
 * Holds a Near PrivateKey
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public class PrivateKey extends KeySig {

    private static final int KEY_SIZE = 32;

    public PrivateKey() {
        // This solves the case for borsh deserialization for keys of
        // type ED25591 because to read the 'fixed' byte array we must know
        // its size.
        // If any other key (and signature) is implemented, a different
        // approach is needed (like getters and setters annotation on borsh)
        this.data = new byte[KEY_SIZE];
    }

    @Builder
    public PrivateKey(KeyType keyType, byte[] data) {
        super(keyType, data);
    }

    public AbstractPrivateKey getPrivateKey() {
        if (type == KeyType.ED25519) {
            return new Ed25519PrivateKey(data);
        }
        throw new NoSuchTypeException(String.format("No implementation found for key type %s", type));
    }

    @JsonCreator
    public static PrivateKey getPrivateKeyFromJson(String base58String) {
        return fromEncodedBase58String(base58String, PrivateKey.class);
    }

    @JsonValue
    public String getJsonPrivateKey() {
        return this.toEncodedBase58String();
    }
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/model/key/PublicKey.java ---
package com.syntifi.near.api.common.model.key;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.syntifi.crypto.key.AbstractPublicKey;
import com.syntifi.crypto.key.Ed25519PublicKey;
import com.syntifi.near.api.common.exception.NoSuchTypeException;
import com.syntifi.near.borshj.Borsh;
import lombok.Builder;
import lombok.EqualsAndHashCode;

/**
 * Holds a Near PublicKey
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@EqualsAndHashCode(callSuper = true)
public class PublicKey extends KeySig implements Borsh {

    private static final int KEY_SIZE = 32;

    public PublicKey() {
        // This solves the case for borsh deserialization for keys of
        // type ED25591 because to read the 'fixed' byte array we must know
        // its size.
        // If any other key (and signature) is implemented, a different
        // approach is needed (like getters and setters annotation on borsh)
        this.data = new byte[KEY_SIZE];
    }

    /**
     * Instantiate a Public Key
     *
     * @param keyType the KeyType
     * @param data    the key bytes
     */
    @Builder
    public PublicKey(KeyType keyType, byte[] data) {
        super(keyType, data);
    }

    public AbstractPublicKey getPublicKey() {
        if (type == KeyType.ED25519) {
            return new Ed25519PublicKey(data);
        }
        throw new NoSuchTypeException(String.format("No implementation found for key type %s", type));
    }

    @JsonCreator
    public static PublicKey getPublicKeyFromJson(String base58String) {
        return fromEncodedBase58String(base58String, PublicKey.class);
    }

    @JsonValue
    public String getJsonPublicKey() {
        return this.toEncodedBase58String();
    }
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/model/key/Signature.java ---
package com.syntifi.near.api.common.model.key;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.syntifi.near.borshj.Borsh;
import lombok.Builder;
import lombok.EqualsAndHashCode;

/**
 * Holds a Near Signature
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@EqualsAndHashCode(callSuper = true)
public class Signature extends KeySig implements Borsh {

    private static final int SIGNATURE_SIZE = 64;

    public Signature() {
        // This solves the case for borsh deserialization for signatures of
        // type ED25591 because to read the 'fixed' byte array we must know
        // its size.
        // If any other signature (and key) is implemented, a different
        // approach is needed (like getters and setters annotation on borsh)
        this.data = new byte[SIGNATURE_SIZE];
    }

    @Builder
    public Signature(KeyType keyType, byte[] data) {
        super(keyType, data);
    }

    @JsonCreator
    public static Signature getSignatureFromJson(String base58String) {
        return fromEncodedBase58String(base58String, Signature.class);
    }

    @JsonValue
    public String getJsonSignature() {
        return this.toEncodedBase58String();
    }
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/model/key/Wallet.java ---
package com.syntifi.near.api.common.model.key;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;

/**
 * Simple structure class mainly to hold information read from json wallets.
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
public class Wallet {
    @JsonProperty("account_id")
    private String account;
    @JsonProperty("public_key")
    private PublicKey publicKey;
    @JsonProperty("private_key")
    private PrivateKey privateKey;
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/service/NearObjectMapper.java ---
package com.syntifi.near.api.common.service;

import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Custom Jackson {@link ObjectMapper} for any customizations
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public class NearObjectMapper extends ObjectMapper {
    public static final ObjectMapper INSTANCE = new NearObjectMapper();
}

'''
'''--- near-java-api-common/src/main/java/com/syntifi/near/api/common/service/WalletService.java ---
package com.syntifi.near.api.common.service;

import com.syntifi.near.api.common.json.JsonHelper;
import com.syntifi.near.api.common.model.key.Wallet;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

/**
 * Service methods to manipulate wallets
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public class WalletService {
    /**
     * Loads a wallet from filesystem
     *
     * @param file the file to read from
     * @return a wallet with loaded content
     * @throws IOException thrown if file not found or not a valid wallet json
     */
    public static Wallet loadWalletFromFile(File file) throws IOException {
        return JsonHelper.OBJECT_MAPPER.readValue(
                JsonHelper.loadJsonFromFile(file),
                Wallet.class);
    }

    /**
     * Writes a wallet to filesystem
     *
     * @param file   the file to write to
     * @param wallet the wallet to persist
     * @throws IOException thrown if file could not be written
     */
    public static void writeWalletToFile(File file, Wallet wallet) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            writer.write(JsonHelper.OBJECT_MAPPER.writeValueAsString(wallet));
        }
    }
}

'''
'''--- near-java-api-common/src/test/java/com/syntifi/near/api/common/helper/FormatsTest.java ---
package com.syntifi.near.api.common.helper;

import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.List;

import static com.syntifi.near.api.common.helper.Formats.formatNearAmount;
import static com.syntifi.near.api.common.helper.Formats.parseNearAmount;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class FormatsTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(FormatsTest.class);

    private static final List<String[]> formatNearAmountSamples = Arrays.asList(
            new String[]{"8999999999837087887", null, "0.000008999999999837087887"},
            new String[]{"8099099999837087887", null, "0.000008099099999837087887"},
            new String[]{"999998999999999837087887000", null, "999.998999999999837087887"},
            //new String[]{"1'+'0'.repeat(13)", null,"0.00000000001"},
            new String[]{"9999989999999998370878870000000", null, "9,999,989.99999999837087887"},
            new String[]{"000000000000000000000000", null, "0"},
            new String[]{"1000000000000000000000000", null, "1"},
            new String[]{"999999999999999999000000", null, "0.999999999999999999"},
            new String[]{"999999999999999999000000", "10", "1"},
            new String[]{"1003000000000000000000000", "3", "1.003"},
            new String[]{"3000000000000000000000", "3", "0.003"},
            new String[]{"3000000000000000000000", "4", "0.003"},
            new String[]{"3500000000000000000000", "3", "0.004"},
            new String[]{"03500000000000000000000", "3", "0.004"},
            new String[]{"10000000999999997410000000", null, "10.00000099999999741"},
            new String[]{"10100000999999997410000000", null, "10.10000099999999741"},
            new String[]{"10040000999999997410000000", "2", "10.04"},
            new String[]{"10999000999999997410000000", "2", "11"},
            new String[]{"1000000100000000000000000000000", null, "1,000,000.1"},
            new String[]{"1000100000000000000000000000000", null, "1,000,100"},
            new String[]{"910000000000000000000000", "0", "1"});

    private static final List<String[]> parseNearAmountSamples = Arrays.asList(
            new String[]{null, null},
            new String[]{"5.3", "5300000000000000000000000"},
            new String[]{"5", "5000000000000000000000000"},
            new String[]{"1", "1000000000000000000000000"},
            new String[]{"10", "10000000000000000000000000"},
            new String[]{"0.000008999999999837087887", "8999999999837087887"},
            new String[]{"0.000008099099999837087887", "8099099999837087887"},
            new String[]{"999.998999999999837087887000", "999998999999999837087887000"},
            new String[]{"0.000000000000001", "1000000000"},
            new String[]{"0", "0"},
            new String[]{"0.000", "0"},
            new String[]{"0.000001", "1000000000000000000"},
            new String[]{".000001", "1000000000000000000"},
            new String[]{"000000.000001", "1000000000000000000"},
            new String[]{"000000.0000010000", "1000000000000000000"},
            new String[]{"1,000,000.1", "1000000100000000000000000000000"});

    @Test
    void formatNearAmount_shouldEqualExpected() {
        formatNearAmountSamples.forEach(val -> {
            String result = formatNearAmount(val[0], val[1] == null ? null : Integer.parseInt(val[1]));
            LOGGER.debug("{} parsing {} expecting {} got {}", result.equals(val[2]) ? "OK" : "WRONG", val[0], val[2], result);
            //assertEquals(val[2], result);
        });
    }

    @Test
    void parseNearAmount_shouldEqualExpected() {
        parseNearAmountSamples.forEach(val -> {
            LOGGER.debug("parsing {} expecting {}", val[0], val[1]);
            assertEquals(val[1], parseNearAmount(val[0]));
        });
    }
}

'''
'''--- near-java-api-common/src/test/java/com/syntifi/near/api/common/key/AbstractKeyTest.java ---
package com.syntifi.near.api.common.key;

import com.syntifi.crypto.key.AbstractPrivateKey;
import com.syntifi.crypto.key.AbstractPublicKey;
import com.syntifi.near.api.common.model.key.PrivateKey;
import com.syntifi.near.api.common.model.key.PublicKey;
import com.syntifi.near.api.common.model.key.Wallet;
import org.junit.jupiter.api.BeforeAll;

import java.io.IOException;

import static com.syntifi.near.api.common.json.JsonHelper.OBJECT_MAPPER;
import static com.syntifi.near.api.common.json.JsonHelper.loadJsonFromResourceFile;

public abstract class AbstractKeyTest {
    protected static Wallet aliceWallet;
    protected static Wallet bobWallet;

    protected static PrivateKey aliceNearPrivateKey;
    protected static PublicKey aliceNearPublicKey;
    protected static AbstractPrivateKey alicePrivateKey;
    protected static AbstractPublicKey alicePublicKey;

    protected static PrivateKey bobNearPrivateKey;
    protected static PublicKey bobNearPublicKey;
    protected static AbstractPrivateKey bobPrivateKey;
    protected static AbstractPublicKey bobPublicKey;

    @BeforeAll
    static void loadKeys() throws IOException {
        aliceWallet = OBJECT_MAPPER.readValue(loadJsonFromResourceFile("testnet-wallets/alice.json"), Wallet.class);
        bobWallet = OBJECT_MAPPER.readValue(loadJsonFromResourceFile("testnet-wallets/bob.json"), Wallet.class);

        aliceNearPrivateKey = aliceWallet.getPrivateKey();
        aliceNearPublicKey = aliceWallet.getPublicKey();
        alicePrivateKey = aliceNearPrivateKey.getPrivateKey();
        alicePublicKey = aliceNearPublicKey.getPublicKey();

        bobNearPrivateKey = bobWallet.getPrivateKey();
        bobNearPublicKey = bobWallet.getPublicKey();
        bobPrivateKey = bobNearPrivateKey.getPrivateKey();
        bobPublicKey = bobNearPublicKey.getPublicKey();
    }
}

'''
'''--- near-java-api-common/src/test/java/com/syntifi/near/api/common/key/KeySigTest.java ---
package com.syntifi.near.api.common.key;

import com.syntifi.near.api.common.exception.NoSuchTypeException;
import com.syntifi.near.api.common.model.key.KeySig;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertThrows;

public class KeySigTest {
    @Test
    void fromEncodedBase58String_with_invalid_keyType_should_throw_NoSuchTypeException() {
        assertThrows(NoSuchTypeException.class, () -> KeySig.fromEncodedBase58String("ASDF", KeySig.class));
    }

    @Test
    void fromEncodedBase58String_with_invalid_class_should_throw_NoSuchTypeException() {
        class KeySigNoConstructor extends KeySig {
        }
        assertThrows(NoSuchTypeException.class, () -> KeySig.fromEncodedBase58String("ed25519:F8jARHGZdHqnwrxrnv1pFVzzirXZR2vJzeYbvwQbxZyP", KeySigNoConstructor.class));
    }
}

'''
'''--- near-java-api-common/src/test/java/com/syntifi/near/api/common/key/PrivateKeyTest.java ---
package com.syntifi.near.api.common.key;

import com.syntifi.near.api.common.exception.NoSuchTypeException;
import com.syntifi.near.api.common.model.key.KeyType;
import com.syntifi.near.api.common.model.key.PrivateKey;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class PrivateKeyTest extends AbstractKeyTest {

    @Test
    void getPrivateKey_with_invalidKeyType_should_throw_NoSuchTypeException() {
        PrivateKey key = new PrivateKey();
        assertThrows(NoSuchTypeException.class, key::getPrivateKey);
    }

    @Test
    void loadWalletFromString_and_loadAPrivateKey() {
        assertEquals(KeyType.ED25519, aliceNearPrivateKey.getType());

        assertDoesNotThrow(aliceNearPrivateKey::getPrivateKey);
    }
}

'''
'''--- near-java-api-common/src/test/java/com/syntifi/near/api/common/key/PublicKeyTest.java ---
package com.syntifi.near.api.common.key;

import com.syntifi.near.api.common.exception.NoSuchTypeException;
import com.syntifi.near.api.common.model.key.KeyType;
import com.syntifi.near.api.common.model.key.PublicKey;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class PublicKeyTest extends AbstractKeyTest {

    @Test
    void getPublicKey_with_invalidKeyType_should_throw_NoSuchTypeException() {
        PublicKey key = new PublicKey();
        assertThrows(NoSuchTypeException.class, key::getPublicKey);
    }

    @Test
    void loadWalletFromString_and_loadAPublicKey() {
        assertEquals(KeyType.ED25519, aliceNearPublicKey.getType());

        assertDoesNotThrow(aliceNearPublicKey::getPublicKey);
    }
}

'''
'''--- near-java-api-common/src/test/java/com/syntifi/near/api/common/key/SignatureTest.java ---
package com.syntifi.near.api.common.key;

import org.junit.jupiter.api.Test;

import java.security.GeneralSecurityException;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class SignatureTest extends AbstractKeyTest {
    @Test
    void loadPrivateAndPublicKey_matchesDerivedPublicKey() {
        assertArrayEquals(alicePublicKey.getKey(), alicePrivateKey.derivePublicKey().getKey());
        assertArrayEquals(bobPublicKey.getKey(), bobPrivateKey.derivePublicKey().getKey());
    }

    @Test
    void loadPrivateAndPublicKey_Sign_and_Verify_should_be_valid() throws GeneralSecurityException {
        byte[] aliceMessage = "Hello, Bob!".getBytes();
        byte[] aliceSignature = alicePrivateKey.sign(aliceMessage);

        assertTrue(alicePublicKey.verify(aliceMessage, aliceSignature));

        byte[] bobMessage = "Hello, Alice!".getBytes();
        byte[] bobSignature = bobPrivateKey.sign(bobMessage);

        assertTrue(bobPublicKey.verify(bobMessage, bobSignature));
    }
}

'''
'''--- near-java-api-common/src/test/java/com/syntifi/near/api/common/key/WalletTest.java ---
package com.syntifi.near.api.common.key;

import com.syntifi.near.api.common.model.key.Wallet;
import org.json.JSONException;
import org.junit.jupiter.api.Test;
import org.skyscreamer.jsonassert.JSONAssert;

import java.io.IOException;

import static com.syntifi.near.api.common.json.JsonHelper.OBJECT_MAPPER;
import static com.syntifi.near.api.common.json.JsonHelper.getPrettyJson;
import static com.syntifi.near.api.common.json.JsonHelper.loadJsonFromResourceFile;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

public class WalletTest {
    @Test
    void loadWallet_should_load_ok() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("testnet-wallets/alice.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, Wallet.class));

        Wallet wallet = OBJECT_MAPPER.readValue(inputJson, Wallet.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(wallet), false);
    }
}

'''
'''--- near-java-api-common/src/test/java/com/syntifi/near/api/common/service/WalletServiceTest.java ---
package com.syntifi.near.api.common.service;

import com.syntifi.near.api.common.json.JsonHelper;
import com.syntifi.near.api.common.model.key.Wallet;
import org.junit.jupiter.api.Test;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

class WalletServiceTest {

    @Test
    void loadWalletFromFile_inexist_should_throw_IOException() {
        assertThrows(IOException.class, () -> WalletService.loadWalletFromFile(new File("")));
    }

    @Test
    void writeWalletToFile_invalidPath_should_throw_IOException() {
        assertThrows(IOException.class, () -> WalletService.writeWalletToFile(new File(""), new Wallet()));
    }

    @Test
    void writeWalletToFile_should_write_wallet_to_file() throws IOException {
        String fileName = "./wallet-d1fe5b15a491ad5bf4c1cdb290f17bee71d21449ddac80fb7b92f38fe530cf5e.json";

        Wallet wallet = loadATestWallet();

        assertDoesNotThrow(() -> WalletService.writeWalletToFile(new File(fileName), wallet));

        assertTrue(Files.exists(Paths.get(fileName)));

        assertNotNull(WalletService.loadWalletFromFile(new File(fileName)));

        Files.delete(Paths.get(fileName));
    }

    @Test
    void loadWalletFromFile_should_load_to_Wallet() throws IOException {
        String fileName = "./wallet-d1fe5b15a491ad5bf4c1cdb290f17bee71d21449ddac80fb7b92f38fe530cf5e.json";

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {
            writer.write(JsonHelper.loadJsonFromResourceFile("testnet-wallets/alice.json"));
        }

        Wallet wallet = WalletService.loadWalletFromFile(new File(fileName));

        Files.delete(Paths.get(fileName));

        assertNotNull(wallet);
    }

    static Wallet loadATestWallet() throws IOException {
        return JsonHelper.OBJECT_MAPPER.readValue(JsonHelper.loadJsonFromResourceFile("testnet-wallets/alice.json"), Wallet.class);
    }
}
'''
'''--- near-java-api-common/src/test/resources/testnet-wallets/alice.json ---
{
  "account_id": "d1fe5b15a491ad5bf4c1cdb290f17bee71d21449ddac80fb7b92f38fe530cf5e",
  "public_key": "ed25519:F8jARHGZdHqnwrxrnv1pFVzzirXZR2vJzeYbvwQbxZyP",
  "private_key": "ed25519:32UfEkBGTFpfu6M7RebN1JqMDrdf1YyztgYmcUG5XcRkEraJioFZLPtBvYVmAVvnjWAToSsWScJYSFViv8MaATRF"
}
'''
'''--- near-java-api-common/src/test/resources/testnet-wallets/bob.json ---
{
  "account_id": "ba56c617a2e8dd1ba484c48d40c659f088af74bd1bd8dc3c37ef1c2280547f61",
  "public_key": "ed25519:DYPaMCfE8xQUDQ19NnGCr18WQiqYwjSoaeXpKTDFv3kt",
  "private_key": "ed25519:59drpA65TXWoyYuQWuRgKcrxCcQaCrZB9YiUbVBjMrmch6utfoyVvDZ8Liz5mrhosr7szwrmDvVTZ7jrFbGCCaR6"
}
'''
'''--- near-java-api-indexer/pom.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>near-java-api</artifactId>
        <groupId>com.syntifi.near</groupId>
        <version>0.2.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>near-java-api-indexer</artifactId>
    <dependencies>
        <dependency>
            <groupId>com.syntifi.near</groupId>
            <artifactId>near-java-api-common</artifactId>
            <version>0.2.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.retrofit2</groupId>
            <artifactId>converter-jackson</artifactId>
            <version>${retrofit2.version}</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.retrofit2</groupId>
            <artifactId>retrofit</artifactId>
            <version>${retrofit2.version}</version>
        </dependency>
    </dependencies>
</project>
'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/NearIndexerClient.java ---
package com.syntifi.near.api.indexer;

import com.syntifi.near.api.common.helper.Network;
import com.syntifi.near.api.common.service.NearObjectMapper;
import com.syntifi.near.api.indexer.model.AccountIdList;
import com.syntifi.near.api.indexer.model.NearValue;
import com.syntifi.near.api.indexer.model.RecentActivity;
import com.syntifi.near.api.indexer.model.StakingDeposit;
import okhttp3.Headers;
import okhttp3.OkHttpClient;
import retrofit2.Call;
import retrofit2.Retrofit;
import retrofit2.converter.jackson.JacksonConverterFactory;
import retrofit2.http.GET;
import retrofit2.http.Path;

import java.util.List;

/**
 * Near indexer client uses http API to retrieve useful information on chain data
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public interface NearIndexerClient {

    /**
     * Fetches all likely NFTs given an accountId
     *
     * @param accountId the account to search information for
     * @return a retrofit call for a AccountIdList
     */
    @GET("account/{accountId}/likelyNFTs")
    Call<AccountIdList> getAccountLikelyNFTs(@Path("accountId") String accountId);

    /**
     * Fetches all likely FTs (Tokens) given an accountId
     *
     * @param accountId the account to search information for
     * @return a retrofit call for a AccountIdList
     */
    @GET("account/{accountId}/likelyTokens")
    Call<AccountIdList> getAccountLikelyFTs(@Path("accountId") String accountId);

    /**
     * Fetches staing deposits for an account
     *
     * @param accountId the account to search information for
     * @return a retrofit call for a list of StakingDeposits
     */
    @GET("staking-deposits/{accountId}")
    Call<List<StakingDeposit>> getStakingDeposits(@Path("accountId") String accountId);

    /**
     * Fetches a list of recent activities for one account
     *
     * @param accountId the account to fetch activity
     * @return list of recent activity for the account
     */
    @GET("account/{accountId}/activity")
    Call<RecentActivity> getNearRecentActivity(@Path("accountId") String accountId);

    /**
     * Fetches the value of near in fiat currency
     *
     * @return the Near fiat value
     */
    @GET("/fiat")
    Call<NearValue> getNearValue();

    /**
     * Fetches a list of accounts for a given public key
     *
     * @param publicKey the account public key
     * @return list containing all account ids
     */
    @GET("publicKey/{publicKey}/accounts")
    Call<List<String>> getNearAccounts(@Path("publicKey") String publicKey);

    /**
     * NearIndexerService builder
     *
     * @param network the indexer url to connect to
     * @return the indexer service instance
     */
    static NearIndexerClient usingNetwork(Network network) {
        Headers customHeaders = new Headers.Builder()
                .add("Content-Type", "application/json")
                .add("Cache-Control", "no-cache")
                .build();

        Retrofit retrofit = new Retrofit.Builder()
                .client(new OkHttpClient.Builder()
                        .addInterceptor(
                                chain -> chain.proceed(chain.request().newBuilder().headers(customHeaders).build())).build())
                .baseUrl("https://" + network.getIndexerUrl())
                .addConverterFactory(JacksonConverterFactory.create(NearObjectMapper.INSTANCE))
                .build();

        return retrofit.create(NearIndexerClient.class);
    }
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/exception/NearIndexerException.java ---
package com.syntifi.near.api.indexer.exception;

import com.syntifi.near.api.common.exception.NearException;

/**
 * Thrown on Near Indexer error
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public class NearIndexerException extends NearException {
    public NearIndexerException(String message) {
        super(message);
    }
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/json/deserializer/NearValueDeserializer.java ---
package com.syntifi.near.api.indexer.json.deserializer;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.syntifi.near.api.indexer.model.NearValue;

import java.io.IOException;

/**
 * Custom serializer for near fiat value
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public class NearValueDeserializer extends JsonDeserializer<NearValue> {
    public NearValue deserialize(JsonParser p, DeserializationContext ctxt)
            throws IOException {
        JsonNode node = p.getCodec().readTree(p);
        node = node.get("near");

        return NearValue.builder()
                .usDollars(node.get("usd").floatValue())
                .euros(node.get("eur").floatValue())
                .chineseYuan(node.get("cny").floatValue())
                .lastUpdatedAt(node.get("last_updated_at").asLong())
                .build();
    }
}
'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/json/deserializer/RecentActivityItemDeserializer.java ---
package com.syntifi.near.api.indexer.json.deserializer;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.syntifi.near.api.common.model.key.PublicKey;
import com.syntifi.near.api.indexer.exception.NearIndexerException;
import com.syntifi.near.api.indexer.model.RecentActivityAccessKey;
import com.syntifi.near.api.indexer.model.RecentActivityArgAddKey;
import com.syntifi.near.api.indexer.model.RecentActivityArgCreateAccount;
import com.syntifi.near.api.indexer.model.RecentActivityArgDeleteAccount;
import com.syntifi.near.api.indexer.model.RecentActivityArgDeleteKey;
import com.syntifi.near.api.indexer.model.RecentActivityArgDeployContract;
import com.syntifi.near.api.indexer.model.RecentActivityArgFunctionCall;
import com.syntifi.near.api.indexer.model.RecentActivityArgStake;
import com.syntifi.near.api.indexer.model.RecentActivityArgTransfer;
import com.syntifi.near.api.indexer.model.RecentActivityItem;
import com.syntifi.near.api.indexer.model.RecentActivityPermission;

import java.io.IOException;
import java.math.BigInteger;

/**
 * Custom serializer for a recent activity item
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public class RecentActivityItemDeserializer extends JsonDeserializer<RecentActivityItem> {
    public RecentActivityItem deserialize(JsonParser p, DeserializationContext ctxt)
            throws IOException {
        JsonNode node = p.getCodec().readTree(p);

        final RecentActivityItem recentActivityItem = RecentActivityItem.builder()
                .blockHash(node.get("block_hash").asText())
                .blockTimestamp(node.get("block_timestamp").asText())
                .hash(node.get("hash").asText())
                .actionIndex(node.get("action_index").asInt())
                .signerId(node.get("signer_id").asText())
                .receiverId(node.get("receiver_id").asText())
                .actionKind(RecentActivityItem.RecentActivityActionKind.valueOf(node.get("action_kind").asText()))
                .build();

        JsonNode argsNode = node.get("args");
        if (RecentActivityItem.RecentActivityActionKind.CREATE_ACCOUNT.equals(recentActivityItem.getActionKind())) {
            recentActivityItem.setArgs(RecentActivityArgCreateAccount.builder().build());
        } else if (RecentActivityItem.RecentActivityActionKind.DEPLOY_CONTRACT.equals(recentActivityItem.getActionKind())) {
            recentActivityItem.setArgs(RecentActivityArgDeployContract.builder()
                    .code(argsNode.get("code").binaryValue()).build());
        } else if (RecentActivityItem.RecentActivityActionKind.FUNCTION_CALL.equals(recentActivityItem.getActionKind())) {
            recentActivityItem.setArgs(RecentActivityArgFunctionCall.builder()
                    .methodName(argsNode.get("method_name").asText())
                    .argsJson(argsNode.get("args_json").asText())
                    .argsBase64(argsNode.get("args_base64").asText())
                    .gas(argsNode.get("gas").asLong())
                    .deposit(argsNode.get("deposit").asText())
                    .build());
        } else if (RecentActivityItem.RecentActivityActionKind.TRANSFER.equals(recentActivityItem.getActionKind())) {
            recentActivityItem.setArgs(
                    RecentActivityArgTransfer.builder()
                            .deposit(argsNode.get("deposit").asText())
                            .build());
        } else if (RecentActivityItem.RecentActivityActionKind.STAKE.equals(recentActivityItem.getActionKind())) {
            recentActivityItem.setArgs(RecentActivityArgStake.builder()
                    .stake(new BigInteger(argsNode.get("stake").asText()))
                    .publicKey(PublicKey.getPublicKeyFromJson(argsNode.get("public_key").asText()))
                    .build());
        } else if (RecentActivityItem.RecentActivityActionKind.ADD_KEY.equals(recentActivityItem.getActionKind())) {
            JsonNode accessKey = argsNode.get("access_key");
            recentActivityItem.setArgs(
                    RecentActivityArgAddKey.builder()
                            .accessKey(
                                    RecentActivityAccessKey.builder()
                                            .nonce(accessKey.get("nonce").asLong())
                                            .permission(RecentActivityPermission.builder()
                                                    .permissionKind(
                                                            RecentActivityPermission.PermissionKind.valueOf(accessKey.get("permission").get("permission_kind").asText()))
                                                    .build())
                                            .build())
                            .publicKey(argsNode.get("public_key").asText())
                            .build());
        } else if (RecentActivityItem.RecentActivityActionKind.DELETE_KEY.equals(recentActivityItem.getActionKind())) {
            recentActivityItem.setArgs(RecentActivityArgDeleteKey.builder()
                    .publicKey(PublicKey.getPublicKeyFromJson(argsNode.get("public_key").asText()))
                    .build());
        } else if (RecentActivityItem.RecentActivityActionKind.DELETE_ACCOUNT.equals(recentActivityItem.getActionKind())) {
            recentActivityItem.setArgs(RecentActivityArgDeleteAccount.builder()
                    .beneficiaryId(argsNode.get("beneficiary_id").asText())
                    .build());
        } else {
            throw new NearIndexerException(
                    String.format("Action %s not mapped for deserialization", recentActivityItem.getActionKind()));
        }

        return recentActivityItem;
    }
}
'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/AccountIdList.java ---
package com.syntifi.near.api.indexer.model;

import java.util.ArrayList;

/**
 * Holds a list of Strings with account ids
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public class AccountIdList extends ArrayList<String> {
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/NearValue.java ---
package com.syntifi.near.api.indexer.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.syntifi.near.api.indexer.json.deserializer.NearValueDeserializer;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * NearValue
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@JsonDeserialize(using = NearValueDeserializer.class)
public class NearValue {
    @JsonProperty("usd")
    private float usDollars;
    @JsonProperty("eur")
    private float euros;
    @JsonProperty("cny")
    private float chineseYuan;
    @JsonProperty("last_updated_at")
    private long lastUpdatedAt;
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/RecentActivity.java ---
package com.syntifi.near.api.indexer.model;

import java.util.ArrayList;

/**
 * RecentActivity ArrayList
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public class RecentActivity extends ArrayList<RecentActivityItem> {
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/RecentActivityAccessKey.java ---
package com.syntifi.near.api.indexer.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * RecentActivityPermission
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RecentActivityAccessKey {
    @JsonProperty("nonce")
    private long nonce;

    @JsonProperty("permission")
    private RecentActivityPermission permission;
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/RecentActivityArg.java ---
package com.syntifi.near.api.indexer.model;

/**
 * RecentActivityArg
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public interface RecentActivityArg {
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/RecentActivityArgAddKey.java ---
package com.syntifi.near.api.indexer.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * RecentActivityArg
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RecentActivityArgAddKey implements RecentActivityArg {
    @JsonProperty("access_key")
    private RecentActivityAccessKey accessKey;

    @JsonProperty("public_key")
    private String publicKey;
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/RecentActivityArgCreateAccount.java ---
package com.syntifi.near.api.indexer.model;

import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * RecentActivityArg
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@NoArgsConstructor
@Builder
public class RecentActivityArgCreateAccount implements RecentActivityArg {
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/RecentActivityArgDeleteAccount.java ---
package com.syntifi.near.api.indexer.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * RecentActivityArg
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RecentActivityArgDeleteAccount implements RecentActivityArg {
    private String beneficiaryId;
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/RecentActivityArgDeleteKey.java ---
package com.syntifi.near.api.indexer.model;

import com.syntifi.near.api.common.model.key.PublicKey;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * RecentActivityArg
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RecentActivityArgDeleteKey implements RecentActivityArg {
    private PublicKey publicKey;
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/RecentActivityArgDeployContract.java ---
package com.syntifi.near.api.indexer.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * RecentActivityArg
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RecentActivityArgDeployContract implements RecentActivityArg {
    private byte[] code;
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/RecentActivityArgFunctionCall.java ---
package com.syntifi.near.api.indexer.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * RecentActivityArg
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RecentActivityArgFunctionCall implements RecentActivityArg {
    @JsonProperty("method_name")
    private String methodName;

    @JsonProperty("args_json")
    private String argsJson;

    @JsonProperty("args_base64")
    private String argsBase64;

    @JsonProperty("gas")
    private long gas;

    @JsonProperty("deposit")
    private String deposit;
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/RecentActivityArgStake.java ---
package com.syntifi.near.api.indexer.model;

import com.syntifi.near.api.common.model.key.PublicKey;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.math.BigInteger;

/**
 * RecentActivityArg
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RecentActivityArgStake implements RecentActivityArg {
    private BigInteger stake;

    private PublicKey publicKey;
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/RecentActivityArgTransfer.java ---
package com.syntifi.near.api.indexer.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * RecentActivityArg
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RecentActivityArgTransfer implements RecentActivityArg {
    @JsonProperty("deposit")
    private String deposit;
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/RecentActivityItem.java ---
package com.syntifi.near.api.indexer.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.syntifi.near.api.indexer.json.deserializer.RecentActivityItemDeserializer;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * RecentActivityItem
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@JsonDeserialize(using = RecentActivityItemDeserializer.class)
public class RecentActivityItem {
    public enum RecentActivityActionKind {
        CREATE_ACCOUNT,
        DEPLOY_CONTRACT,
        FUNCTION_CALL,
        TRANSFER,
        STAKE,
        ADD_KEY,
        DELETE_KEY,
        DELETE_ACCOUNT
    }

    @JsonProperty("block_hash")
    String blockHash;

    @JsonProperty("block_timestamp")
    String blockTimestamp;

    @JsonProperty("hash")
    String hash;

    @JsonProperty("action_index")
    Integer actionIndex;

    @JsonProperty("signer_id")
    String signerId;

    @JsonProperty("receiver_id")
    String receiverId;

    @JsonProperty("action_kind")
    RecentActivityActionKind actionKind;

    @JsonProperty("args")
    RecentActivityArg args;
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/RecentActivityPermission.java ---
package com.syntifi.near.api.indexer.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * RecentActivityPermission
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RecentActivityPermission {
    public enum PermissionKind {
        FULL_ACCESS,
        FUNCTION_CALL
    }

    @JsonProperty("permission_kind")
    private PermissionKind permissionKind;
}

'''
'''--- near-java-api-indexer/src/main/java/com/syntifi/near/api/indexer/model/StakingDeposit.java ---
package com.syntifi.near.api.indexer.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;

import java.math.BigInteger;

/**
 * Holds data of a staking deposit
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
public class StakingDeposit {
    @JsonProperty("deposit")
    private BigInteger deposit;
    @JsonProperty("validator_id")
    private String validator;
}

'''
'''--- near-java-api-indexer/src/test/java/com/syntifi/near/api/indexer/service/NearIndexerClientHelper.java ---
package com.syntifi.near.api.indexer.service;

import com.syntifi.near.api.common.helper.Network;
import com.syntifi.near.api.indexer.NearIndexerClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NearIndexerClientHelper {

    private static final Logger LOGGER = LoggerFactory.getLogger(NearIndexerClientHelper.class);

    public static NearIndexerClient nearIndexerClient;

    static {
        Network network = Network.TEST_NET;

        LOGGER.debug("======== Running tests with indexer {} ========", network.getIndexerUrl());
        nearIndexerClient = NearIndexerClient.usingNetwork(network);
    }
}

'''
'''--- near-java-api-indexer/src/test/java/com/syntifi/near/api/indexer/service/NearIndexerClientTest.java ---
package com.syntifi.near.api.indexer.service;

import com.syntifi.near.api.indexer.model.AccountIdList;
import com.syntifi.near.api.indexer.model.NearValue;
import com.syntifi.near.api.indexer.model.RecentActivity;
import com.syntifi.near.api.indexer.model.StakingDeposit;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import retrofit2.Response;

import java.io.IOException;
import java.util.List;

import static com.syntifi.near.api.indexer.service.NearIndexerClientHelper.nearIndexerClient;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * Basic Service call testing
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public class NearIndexerClientTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(NearIndexerClientTest.class);

    @Test
    void getNearValue_valid() throws IOException {
        Response<NearValue> value = nearIndexerClient.getNearValue().execute();

        assertTrue(value.isSuccessful());

        NearValue nearValue = value.body();

        assertNotNull(nearValue);

        LOGGER.debug("Response {}", nearValue.getUsDollars());
        LOGGER.debug("Response {}", nearValue.getEuros());
        LOGGER.debug("Response {}", nearValue.getChineseYuan());
        LOGGER.debug("Response {}", nearValue.getLastUpdatedAt());

        assertNotNull(nearValue);
    }

    @Test
    void getNearAccounts_valid() throws IOException {
        Response<List<String>> value = nearIndexerClient.getNearAccounts("ed25519:F8jARHGZdHqnwrxrnv1pFVzzirXZR2vJzeYbvwQbxZyP").execute();

        assertTrue(value.isSuccessful());

        List<String> nearAccounts = value.body();

        assertNotNull(nearAccounts);

        assertTrue(nearAccounts.size()>=1);

        assertTrue(nearAccounts.contains("syntifi-alice.testnet"));
    }

    @Test
    void getAccountLikelyNFTs_valid() throws IOException {
        Response<AccountIdList> value = nearIndexerClient.getAccountLikelyNFTs("syntifi-alice.testnet").execute();

        assertTrue(value.isSuccessful());

        AccountIdList dappsAccountList = value.body();

        assertNotNull(dappsAccountList);

        dappsAccountList.forEach(i -> LOGGER.debug("{}", i));
    }

    @Test
    void getAccountLikelyFTs_valid() throws IOException {
        Response<AccountIdList> value = nearIndexerClient.getAccountLikelyFTs("wallet-test.testnet").execute();

        assertTrue(value.isSuccessful());

        AccountIdList accountIdList = value.body();

        assertNotNull(accountIdList);

        accountIdList.forEach(i -> LOGGER.debug("{}", i));
    }

    @Test
    void getStakingDeposits_valid() throws IOException {
        Response<List<StakingDeposit>> value = nearIndexerClient.getStakingDeposits("wallet-test.testnet").execute();

        assertTrue(value.isSuccessful());

        List<StakingDeposit> stakingDeposits = value.body();

        assertNotNull(stakingDeposits);

        stakingDeposits.forEach(i -> LOGGER.debug("deposit: {} validator: {}", i.getDeposit(), i.getValidator()));
    }

    @Test
    void getNearRecentActivity_valid() throws IOException {
        Response<RecentActivity> value = nearIndexerClient.getNearRecentActivity("wallet-test.testnet").execute();

        assertTrue(value.isSuccessful());

        RecentActivity nearValue = value.body();

        assertNotNull(nearValue);

        nearValue.forEach(item -> LOGGER.debug("Item kind: {}", item.getActionKind()));

        LOGGER.debug("Response {}", nearValue.size());

        assertNotNull(nearValue);
    }
}
'''
'''--- near-java-api-rpc/pom.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>near-java-api</artifactId>
        <groupId>com.syntifi.near</groupId>
        <version>0.2.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>near-java-api-rpc</artifactId>

    <dependencies>
        <dependency>
            <groupId>com.syntifi.near</groupId>
            <artifactId>near-java-api-common</artifactId>
            <version>0.2.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.syntifi.near</groupId>
            <artifactId>near-java-api-common</artifactId>
            <version>0.2.0-SNAPSHOT</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.github.oak</groupId>
            <artifactId>jsonrpc4j</artifactId>
            <version>${jsonrpc4j.version}</version>
        </dependency>
    </dependencies>
</project>
'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/NearClient.java ---
package com.syntifi.near.api.rpc;

import com.googlecode.jsonrpc4j.JsonRpcFixedParam;
import com.googlecode.jsonrpc4j.JsonRpcHttpClient;
import com.googlecode.jsonrpc4j.JsonRpcMethod;
import com.googlecode.jsonrpc4j.JsonRpcParam;
import com.googlecode.jsonrpc4j.JsonRpcParamsPassMode;
import com.googlecode.jsonrpc4j.ProxyUtil;
import com.syntifi.near.api.common.exception.NearException;
import com.syntifi.near.api.common.helper.Network;
import com.syntifi.near.api.rpc.jsonrpc4j.exception.NearExceptionResolver;
import com.syntifi.near.api.rpc.model.accesskey.AccessKey;
import com.syntifi.near.api.rpc.model.accesskey.AccessKeyChanges;
import com.syntifi.near.api.rpc.model.accesskey.AccessKeyList;
import com.syntifi.near.api.rpc.model.accesskey.Key;
import com.syntifi.near.api.rpc.model.account.Account;
import com.syntifi.near.api.rpc.model.account.AccountChanges;
import com.syntifi.near.api.rpc.model.block.Block;
import com.syntifi.near.api.rpc.model.block.BlockChanges;
import com.syntifi.near.api.rpc.model.block.Chunk;
import com.syntifi.near.api.rpc.model.contract.ContractCode;
import com.syntifi.near.api.rpc.model.contract.ContractCodeChanges;
import com.syntifi.near.api.rpc.model.contract.ContractFunctionCallResult;
import com.syntifi.near.api.rpc.model.contract.ContractState;
import com.syntifi.near.api.rpc.model.contract.ContractStateChanges;
import com.syntifi.near.api.rpc.model.gas.GasPrice;
import com.syntifi.near.api.rpc.model.identifier.Finality;
import com.syntifi.near.api.rpc.model.network.NetworkInfo;
import com.syntifi.near.api.rpc.model.network.NodeStatus;
import com.syntifi.near.api.rpc.model.network.ValidationStatus;
import com.syntifi.near.api.rpc.model.protocol.GenesisConfig;
import com.syntifi.near.api.rpc.model.protocol.ProtocolConfig;
import com.syntifi.near.api.rpc.model.transaction.Receipt;
import com.syntifi.near.api.rpc.model.transaction.TransactionAwait;
import com.syntifi.near.api.rpc.model.transaction.TransactionStatus;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Map;
import java.util.TreeMap;

/**
 * RPC client for the Near network
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public interface NearClient {

    /**
     * NearService builder
     *
     * @param network the rpc peer url to connect to
     * @return the data holding object
     * @throws NearException thrown when url is invalid or unparseable
     */
    static NearClient usingNetwork(Network network) throws NearException {
        Map<String, String> customHeaders = new TreeMap<>();
        customHeaders.put("Content-Type", "application/json");

        try {
            JsonRpcHttpClient client = new JsonRpcHttpClient(NearRpcObjectMapper.INSTANCE,
                    new URL("https://" + network.getRpcUrl()),
                    customHeaders);

            client.setExceptionResolver(new NearExceptionResolver());

            return ProxyUtil.createClientProxy(NearClient.class.getClassLoader(), NearClient.class, client);
        } catch (MalformedURLException e) {
            throw new NearException("Invalid URL " + network.getRpcUrl(), e.getCause());
        }
    }

    /**
     * Queries network and returns block for given height or hash.
     *
     * @param finality the finality param
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("block")
    Block getBlock(@JsonRpcParam("finality") Finality finality) throws NearException;

    /**
     * Queries network and returns block for given height or hash.
     *
     * @param blockHash the block's hash
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("block")
    Block getBlock(@JsonRpcParam("block_id") String blockHash) throws NearException;

    /**
     * Queries network and returns block for given height or hash.
     *
     * @param blockHeight the block's height
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("block")
    Block getBlock(@JsonRpcParam("block_id") long blockHeight) throws NearException;

    /**
     * @param finality the finality param
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes_in_block")
    BlockChanges getBlockChanges(@JsonRpcParam("finality") Finality finality) throws NearException;

    /**
     * @param blockHash the block's hash
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes_in_block")
    BlockChanges getBlockChanges(@JsonRpcParam("block_id") String blockHash) throws NearException;

    /**
     * @param blockHeight the block's height
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes_in_block")
    BlockChanges getBlockChanges(@JsonRpcParam("block_id") long blockHeight) throws NearException;

    /**
     * Returns details of a specific chunk. You can run a block details query to get
     * a valid chunk hash.
     *
     * @param chunkId the id of the chunk
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("chunk")
    Chunk getChunkDetails(@JsonRpcParam("chunk_id") String chunkId) throws NearException;

    /**
     * Returns details of a specific chunk. You can run a block details query to get
     * a valid chunk hash.
     *
     * @param blockId the block hash
     * @param shardId the id of the shard
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("chunk")
    Chunk getChunkDetails(@JsonRpcParam("block_id") String blockId,
                          @JsonRpcParam("shard_id") long shardId) throws NearException;

    /**
     * Returns details of a specific chunk. You can run a block details query to get
     * a valid chunk hash.
     *
     * @param blockId the block height
     * @param shardId the id of the shard
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("chunk")
    Chunk getChunkDetails(@JsonRpcParam("block_id") long blockId,
                          @JsonRpcParam("shard_id") long shardId) throws NearException;

    /**
     * Returns general status of a given node (sync status, near core node version,
     * protocol version, etc.), and the current set of validators.
     *
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("status")
    NodeStatus getNodeStatus() throws NearException;

    /**
     * Returns the current state of node network connections (active peers,
     * transmitted data, etc.)
     *
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("network_info")
    NetworkInfo getNetworkInfo() throws NearException;

    /**
     * Queries active validators on the network returning details and the state of
     * validation on the blockchain.
     *
     * @param blockHash the block's hash
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod(value = "validators", paramsPassMode = JsonRpcParamsPassMode.ARRAY)
    ValidationStatus getNetworkValidationStatus(String blockHash) throws NearException;

    /**
     * Queries active validators on the network returning details and the state of
     * validation on the blockchain.
     *
     * @param blockHeight the block's height
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod(value = "validators", paramsPassMode = JsonRpcParamsPassMode.ARRAY)
    ValidationStatus getNetworkValidationStatus(long blockHeight) throws NearException;

    /**
     * Returns gas price for a specific block_height or block_hash.
     * - Using [null] will return the most recent block's gas price.
     *
     * @param blockHash the block's hash
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod(value = "gas_price", paramsPassMode = JsonRpcParamsPassMode.ARRAY)
    GasPrice getGasPrice(String blockHash) throws NearException;

    /**
     * Returns gas price for a specific block_height or block_hash.
     *
     * @param blockHeight the block's height
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod(value = "gas_price", paramsPassMode = JsonRpcParamsPassMode.ARRAY)
    GasPrice getGasPrice(long blockHeight) throws NearException;

    /**
     * Returns current genesis configuration.
     *
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_genesis_config")
    GenesisConfig getGenesisConfig() throws NearException;

    /**
     * Returns most recent protocol configuration or a specific queried block.
     * Useful for finding current storage and transaction costs.
     *
     * @param finality the finality param
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_protocol_config")
    ProtocolConfig getProtocolConfig(@JsonRpcParam("finality") Finality finality)
            throws NearException;

    /**
     * Returns most recent protocol configuration or a specific queried block.
     * Useful for finding current storage and transaction costs.
     *
     * @param blockHash the block's hash
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_protocol_config")
    ProtocolConfig getProtocolConfig(@JsonRpcParam("block_id") String blockHash) throws NearException;

    /**
     * Returns most recent protocol configuration or a specific queried block.
     * Useful for finding current storage and transaction costs.
     *
     * @param blockHeight the block's height
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_protocol_config")
    ProtocolConfig getProtocolConfig(@JsonRpcParam("block_id") long blockHeight) throws NearException;

    /**
     * Sends a transaction and immediately returns transaction hash.
     *
     * @param base64EncodedSignedTransaction the base64 encoded signed transaction
     *                                       string
     * @return the transaction hash
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod(value = "broadcast_tx_async", paramsPassMode = JsonRpcParamsPassMode.ARRAY)
    String sendTransactionAsync(String base64EncodedSignedTransaction) throws NearException;

    /**
     * Sends a transaction and waits until transaction is fully complete. (Has a 10-second timeout)
     *
     * @param base64EncodedSignedTransaction the base64 encoded signed transaction
     *                                       string
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod(value = "broadcast_tx_commit", paramsPassMode = JsonRpcParamsPassMode.ARRAY)
    TransactionAwait sendTransactionAwait(String base64EncodedSignedTransaction) throws NearException;

    /**
     * Queries status of a transaction by hash and returns the final transaction
     * result.
     *
     * @param transactionHash the transaction hash
     * @param senderAccountId the sender's account id
     * @return the data holding object the final transaction result
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod(value = "tx", paramsPassMode = JsonRpcParamsPassMode.ARRAY)
    TransactionStatus getTransactionStatus(String transactionHash, String senderAccountId)
            throws NearException;

    /**
     * Queries status of a transaction by hash, returning the final transaction
     * result and details of all receipts.
     *
     * @param transactionHash the transaction hash
     * @param senderAccountId the sender's account id
     * @return the data holding object the final transaction result and details of
     * all receipts
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod(value = "EXPERIMENTAL_tx_status", paramsPassMode = JsonRpcParamsPassMode.ARRAY)
    TransactionStatus getTransactionStatusWithReceipts(String transactionHash, String senderAccountId)
            throws NearException;

    /**
     * Fetches a receipt by its ID (as is, without a status or execution outcome)
     *
     * @param receiptId the receipt ID to query for info
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_receipt")
    Receipt getTransactionReceipt(@JsonRpcParam("receipt_id") String receiptId) throws NearException;

    /**
     * Returns information about a single access key for given account.
     * <p>
     * If permission of the key is FunctionCall, it will return more details such as
     * the allowance, receiver_id, and method_names.
     *
     * @param finality  the finality param
     * @param accountId the account id
     * @param publicKey the associated public key
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_access_key")
    AccessKey viewAccessKey(@JsonRpcParam("finality") Finality finality,
                            @JsonRpcParam("account_id") String accountId, @JsonRpcParam("public_key") String publicKey)
            throws NearException;

    /**
     * Returns information about a single access key for given account.
     * <p>
     * If permission of the key is FunctionCall, it will return more details such as
     * the allowance, receiver_id, and method_names.
     *
     * @param blockHash the block's hash
     * @param accountId the account id
     * @param publicKey the associated public key
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_access_key")
    AccessKey viewAccessKey(@JsonRpcParam("block_id") String blockHash,
                            @JsonRpcParam("account_id") String accountId, @JsonRpcParam("public_key") String publicKey)
            throws NearException;

    /**
     * Returns information about a single access key for given account.
     * <p>
     * If permission of the key is FunctionCall, it will return more details such as
     * the allowance, receiver_id, and method_names.
     *
     * @param blockHeight the block's height
     * @param accountId   the account id
     * @param publicKey   the associated public key
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_access_key")
    AccessKey viewAccessKey(@JsonRpcParam("block_id") long blockHeight,
                            @JsonRpcParam("account_id") String accountId, @JsonRpcParam("public_key") String publicKey)
            throws NearException;

    /**
     * Returns all access keys for a given account.
     *
     * @param finality  the finality param
     * @param accountId the account id
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_access_key_list")
    AccessKeyList viewAccessKeyList(@JsonRpcParam("finality") Finality finality,
                                    @JsonRpcParam("account_id") String accountId)
            throws NearException;

    /**
     * Returns all access keys for a given account.
     *
     * @param blockHash the block's hash
     * @param accountId the account id
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_access_key_list")
    AccessKeyList viewAccessKeyList(@JsonRpcParam("block_id") String blockHash,
                                    @JsonRpcParam("account_id") String accountId)
            throws NearException;

    /**
     * Returns all access keys for a given account.
     *
     * @param blockHeight the block's height
     * @param accountId   the account id
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_access_key_list")
    AccessKeyList viewAccessKeyList(@JsonRpcParam("block_id") long blockHeight,
                                    @JsonRpcParam("account_id") String accountId)
            throws NearException;

    /**
     * Returns individual access key changes in a specific block. You can query
     * multiple keys by passing an array of objects containing the account_id and
     * key.
     *
     * @param finality the finality param
     * @param keys     the key data to query for changes
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "single_access_key_changes")
    AccessKeyChanges viewSingleAccessKeyChanges(@JsonRpcParam("finality") Finality finality,
                                                @JsonRpcParam("keys") Key[] keys)
            throws NearException;

    /**
     * Returns individual access key changes in a specific block. You can query
     * multiple keys by passing an array of objects containing the account_id and
     * key.
     *
     * @param blockHash the block's hash
     * @param keys      the key data to query for changes
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "single_access_key_changes")
    AccessKeyChanges viewSingleAccessKeyChanges(@JsonRpcParam("block_id") String blockHash,
                                                @JsonRpcParam("keys") Key[] keys)
            throws NearException;

    /**
     * Returns individual access key changes in a specific block. You can query
     * multiple keys by passing an array of objects containing the account_id and
     * key.
     *
     * @param blockHeight the block's height
     * @param keys        the key data to query for changes
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "single_access_key_changes")
    AccessKeyChanges viewSingleAccessKeyChanges(@JsonRpcParam("block_id") long blockHeight,
                                                @JsonRpcParam("keys") Key[] keys)
            throws NearException;

    /**
     * Returns changes to all access keys of a specific block. Multiple accounts can
     * be queried by passing an array of account_ids.
     *
     * @param finality   the finality param
     * @param accountIds the account ids
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "all_access_key_changes")
    AccessKeyChanges viewAllAccessKeyChanges(@JsonRpcParam("finality") Finality finality,
                                             @JsonRpcParam("account_ids") String[] accountIds)
            throws NearException;

    /**
     * Returns changes to all access keys of a specific block. Multiple accounts can
     * be queried by passing an array of account_ids.
     *
     * @param blockHash  the block's hash
     * @param accountIds the account ids
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "all_access_key_changes")
    AccessKeyChanges viewAllAccessKeyChanges(@JsonRpcParam("block_id") String blockHash,
                                             @JsonRpcParam("account_ids") String[] accountIds)
            throws NearException;

    /**
     * Returns changes to all access keys of a specific block. Multiple accounts can
     * be queried by passing an array of account_ids.
     *
     * @param blockHeight the block's height
     * @param accountIds  the account ids
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "all_access_key_changes")
    AccessKeyChanges viewAllAccessKeyChanges(@JsonRpcParam("block_id") long blockHeight,
                                             @JsonRpcParam("account_ids") String[] accountIds)
            throws NearException;

    /**
     * Returns basic account information.
     *
     * @param finality  the finality param
     * @param accountId the account id
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_account")
    Account viewAccount(@JsonRpcParam("finality") Finality finality,
                        @JsonRpcParam("account_id") String accountId)
            throws NearException;

    /**
     * Returns basic account information.
     *
     * @param blockHash the block's hash
     * @param accountId the account id
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_account")
    Account viewAccount(@JsonRpcParam("block_id") String blockHash,
                        @JsonRpcParam("account_id") String accountId)
            throws NearException;

    /**
     * Returns basic account information.
     *
     * @param blockHeight the block's height
     * @param accountId   the account id
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_account")
    Account viewAccount(@JsonRpcParam("block_id") long blockHeight,
                        @JsonRpcParam("account_id") String accountId)
            throws NearException;

    /**
     * Returns account changes from transactions in a given account.
     *
     * @param finality   the finality param
     * @param accountIds the account ids
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "account_changes")
    AccountChanges viewAccountChanges(@JsonRpcParam("finality") Finality finality,
                                      @JsonRpcParam("account_ids") String[] accountIds)
            throws NearException;

    /**
     * Returns account changes from transactions in a given account.
     *
     * @param blockHash  the block's hash
     * @param accountIds the account ids
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "account_changes")
    AccountChanges viewAccountChanges(@JsonRpcParam("block_id") String blockHash,
                                      @JsonRpcParam("account_ids") String[] accountIds)
            throws NearException;

    /**
     * Returns account changes from transactions in a given account.
     *
     * @param blockHeight the block's height
     * @param accountIds  the account ids
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "account_changes")
    AccountChanges viewAccountChanges(@JsonRpcParam("block_id") long blockHeight,
                                      @JsonRpcParam("account_ids") String[] accountIds)
            throws NearException;

    /**
     * Returns the contract code (Wasm binary) deployed to the account. Please note
     * that the returned code will be encoded in base64.
     *
     * @param finality  the finality param
     * @param accountId the account id
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_code")
    ContractCode viewContractCode(@JsonRpcParam("finality") Finality finality,
                                  @JsonRpcParam("account_id") String accountId)
            throws NearException;

    /**
     * Returns the contract code (Wasm binary) deployed to the account. Please note
     * that the returned code will be encoded in base64.
     *
     * @param blockHash the block's hash
     * @param accountId the account id
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_code")
    ContractCode viewContractCode(@JsonRpcParam("block_id") String blockHash,
                                  @JsonRpcParam("account_id") String accountId)
            throws NearException;

    /**
     * Returns the contract code (Wasm binary) deployed to the account. Please note
     * that the returned code will be encoded in base64.
     *
     * @param blockHeight the block's height
     * @param accountId   the account id
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_code")
    ContractCode viewContractCode(@JsonRpcParam("block_id") long blockHeight,
                                  @JsonRpcParam("account_id") String accountId)
            throws NearException;

    /**
     * Returns the state (key value pairs) of a contract based on the key prefix
     * (base64 encoded). Pass an empty string for prefix_base64 if you would like to
     * return the entire state. Please note that the returned state will be base64
     * encoded as well.
     *
     * @param finality     the finality param
     * @param accountId    the account id
     * @param prefixBase64 the base64 encoded prefix
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_state")
    ContractState viewContractState(@JsonRpcParam("finality") Finality finality,
                                    @JsonRpcParam("account_id") String accountId,
                                    @JsonRpcParam("prefix_base64") String prefixBase64)
            throws NearException;

    /**
     * Returns the state (key value pairs) of a contract based on the key prefix
     * (base64 encoded). Pass an empty string for prefix_base64 if you would like to
     * return the entire state. Please note that the returned state will be base64
     * encoded as well.
     *
     * @param blockHash    the block's hash
     * @param accountId    the account id
     * @param prefixBase64 the base64 encoded prefix
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_state")
    ContractState viewContractState(@JsonRpcParam("block_id") String blockHash,
                                    @JsonRpcParam("account_id") String accountId,
                                    @JsonRpcParam("prefix_base64") String prefixBase64)
            throws NearException;

    /**
     * Returns the state (key value pairs) of a contract based on the key prefix
     * (base64 encoded). Pass an empty string for prefix_base64 if you would like to
     * return the entire state. Please note that the returned state will be base64
     * encoded as well.
     *
     * @param blockHeight  the block's height
     * @param accountId    the account id
     * @param prefixBase64 the base64 encoded prefix
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "view_state")
    ContractState viewContractState(@JsonRpcParam("block_id") long blockHeight,
                                    @JsonRpcParam("account_id") String accountId,
                                    @JsonRpcParam("prefix_base64") String prefixBase64)
            throws NearException;

    /**
     * Returns the state change details of a contract based on the key prefix
     * (encoded to base64). Pass an empty string for this param if you would like to
     * return all state changes.
     *
     * @param finality        the finality param
     * @param accountIds      the account ids
     * @param keyPrefixBase64 the base64 encoded key prefix
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "data_changes")
    ContractStateChanges viewContractStateChanges(@JsonRpcParam("finality") Finality finality,
                                                  @JsonRpcParam("account_ids") String[] accountIds,
                                                  @JsonRpcParam("key_prefix_base64") String keyPrefixBase64)
            throws NearException;

    /**
     * Returns the state change details of a contract based on the key prefix
     * (encoded to base64). Pass an empty string for this param if you would like to
     * return all state changes.
     *
     * @param blockHash       the block's hash
     * @param accountIds      the account ids
     * @param keyPrefixBase64 the base64 encoded key prefix
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "data_changes")
    ContractStateChanges viewContractStateChanges(@JsonRpcParam("block_id") String blockHash,
                                                  @JsonRpcParam("account_ids") String[] accountIds,
                                                  @JsonRpcParam("key_prefix_base64") String keyPrefixBase64)
            throws NearException;

    /**
     * Returns the state change details of a contract based on the key prefix
     * (encoded to base64). Pass an empty string for this param if you would like to
     * return all state changes.
     *
     * @param blockHeight     the block's height
     * @param accountIds      the account ids
     * @param keyPrefixBase64 the base64 encoded key prefix
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "data_changes")
    ContractStateChanges viewContractStateChanges(@JsonRpcParam("block_id") long blockHeight,
                                                  @JsonRpcParam("account_ids") String[] accountIds,
                                                  @JsonRpcParam("key_prefix_base64") String keyPrefixBase64)
            throws NearException;

    /**
     * Returns code changes made when deploying a contract. Change is returned is a
     * base64 encoded WASM file.
     *
     * @param finality   the finality param
     * @param accountIds the account ids
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "contract_code_changes")
    ContractCodeChanges viewContractCodeChanges(@JsonRpcParam("finality") Finality finality,
                                                @JsonRpcParam("account_ids") String[] accountIds)
            throws NearException;

    /**
     * Returns code changes made when deploying a contract. Change is returned is a
     * base64 encoded WASM file.
     *
     * @param blockHash  the block's hash
     * @param accountIds the account ids
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "contract_code_changes")
    ContractCodeChanges viewContractCodeChanges(@JsonRpcParam("block_id") String blockHash,
                                                @JsonRpcParam("account_ids") String[] accountIds)
            throws NearException;

    /**
     * Returns code changes made when deploying a contract. Change is returned is a
     * base64 encoded WASM file.
     *
     * @param blockHeight the block's height
     * @param accountIds  the account ids
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("EXPERIMENTAL_changes")
    @JsonRpcFixedParam(name = "changes_type", value = "contract_code_changes")
    ContractCodeChanges viewContractCodeChanges(@JsonRpcParam("block_id") long blockHeight,
                                                @JsonRpcParam("account_ids") String[] accountIds)
            throws NearException;

    /**
     * Allows you to call a contract method as a view function.
     *
     * @param finality   the finality param
     * @param accountId  the account id
     * @param methodName the name of the method to call the name of the method to
     *                   call
     * @param argsBase64 the method's base64 encoded arguments
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "call_function")
    ContractFunctionCallResult callContractFunction(@JsonRpcParam("finality") Finality finality,
                                                    @JsonRpcParam("account_id") String accountId,
                                                    @JsonRpcParam("method_name") String methodName,
                                                    @JsonRpcParam("args_base64") String argsBase64)
            throws NearException;

    /**
     * Allows you to call a contract method as a view function.
     *
     * @param blockHash  the block's hash
     * @param accountId  the account id
     * @param methodName the name of the method to call
     * @param argsBase64 the method's base64 encoded arguments
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "call_function")
    ContractFunctionCallResult callContractFunction(@JsonRpcParam("block_id") String blockHash,
                                                    @JsonRpcParam("account_id") String accountId,
                                                    @JsonRpcParam("method_name") String methodName,
                                                    @JsonRpcParam("args_base64") String argsBase64)
            throws NearException;

    /**
     * Allows you to call a contract method as a view function.
     *
     * @param blockHeight the block's height
     * @param accountId   the account id
     * @param methodName  the name of the method to call
     * @param argsBase64  the method's base64 encoded arguments
     * @return the data holding object
     * @throws NearException rpc call error exception
     */
    @JsonRpcMethod("query")
    @JsonRpcFixedParam(name = "request_type", value = "call_function")
    ContractFunctionCallResult callContractFunction(@JsonRpcParam("block_id") long blockHeight,
                                                    @JsonRpcParam("account_id") String accountId,
                                                    @JsonRpcParam("method_name") String methodName,
                                                    @JsonRpcParam("args_base64") String argsBase64)
            throws NearException;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/NearRpcObjectMapper.java ---
package com.syntifi.near.api.rpc;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.cfg.CoercionAction;
import com.fasterxml.jackson.databind.cfg.CoercionInputShape;
import com.syntifi.near.api.common.service.NearObjectMapper;
import com.syntifi.near.api.rpc.model.transaction.SuccessReceiptIdStatus;
import com.syntifi.near.api.rpc.model.transaction.SuccessValueStatus;

/**
 * Custom Jackson {@link ObjectMapper} for any customizations
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public class NearRpcObjectMapper extends NearObjectMapper {
    public static final ObjectMapper INSTANCE = new NearObjectMapper();

    private NearRpcObjectMapper() {
        super();

        coercionConfigFor(SuccessReceiptIdStatus.class)
                .setCoercion(CoercionInputShape.EmptyString, CoercionAction.AsEmpty);
        coercionConfigFor(SuccessValueStatus.class)
                .setCoercion(CoercionInputShape.EmptyString, CoercionAction.AsEmpty);
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/json/deserializer/AbstractAnyOfDeserializer.java ---
package com.syntifi.near.api.rpc.json.deserializer;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.syntifi.near.api.common.exception.NoSuchTypeException;

import java.io.IOException;

/**
 * AbstractAnyOfDeserializer for deserializing objects with inheritance
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public abstract class AbstractAnyOfDeserializer extends AsPropertyTypeDeserializer {

    protected AbstractAnyOfDeserializer(final JavaType bt, final TypeIdResolver idRes, final String typePropertyName,
                                        final boolean typeIdVisible, JavaType defaultImpl) {
        super(bt, idRes, typePropertyName, typeIdVisible, defaultImpl);
    }

    protected AbstractAnyOfDeserializer(final AsPropertyTypeDeserializer src, final BeanProperty property) {
        super(src, property);
    }

    @Override
    public Object deserializeTypedFromObject(final JsonParser jp, final DeserializationContext ctxt)
            throws IOException {
        JsonNode node = jp.readValueAsTree();
        Class<?> subType;
        JsonNode subTypeNode = getTypeNode(node);
        try {
            String anyOfType = subTypeNode.isObject() ? subTypeNode.fieldNames().next() : subTypeNode.asText();
            subType = getClassByName(anyOfType);
        } catch (NoSuchTypeException e) {
            throw new IOException("Parse error", e);
        }
        TypeFactory factory = new ObjectMapper().getTypeFactory();
        JavaType type = factory.constructType(subType);

        try (JsonParser jsonParser = new TreeTraversingParser(node, jp.getCodec())) {
            jsonParser.nextToken();
            JsonDeserializer<Object> deser = ctxt.findContextualValueDeserializer(type, _property);
            return deser.deserialize(jsonParser, ctxt);
        }
    }

    /**
     * Returns the node which contains the type key.
     * <p>
     * Override if you have a child node which holds the type information.
     *
     * @param currentNode the current deserialization node
     * @return node which contains the type key.
     */
    protected JsonNode getTypeNode(JsonNode currentNode) {
        return currentNode;
    }

    /**
     * Method that returns the instance of the found type
     *
     * @param classType the name of the class type
     * @return {@link Class} of the type
     * @throws NoSuchTypeException no such type found
     */
    protected abstract Class<?> getClassByName(String classType) throws NoSuchTypeException;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/json/deserializer/PermissionDeserializer.java ---
package com.syntifi.near.api.rpc.json.deserializer;

import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.syntifi.near.api.common.exception.NoSuchTypeException;
import com.syntifi.near.api.rpc.model.accesskey.permission.PermissionTypeData;

/**
 * Specific implementation of AbstractAnyOfDeserializer for Permission type objects
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public class PermissionDeserializer extends AbstractAnyOfDeserializer {

    public PermissionDeserializer(final JavaType bt, final TypeIdResolver idRes, final String typePropertyName,
                                  final boolean typeIdVisible, JavaType defaultImpl) {
        super(bt, idRes, typePropertyName, typeIdVisible, defaultImpl);
    }

    public PermissionDeserializer(final AsPropertyTypeDeserializer src, final BeanProperty property) {
        super(src, property);
    }

    @Override
    public TypeDeserializer forProperty(final BeanProperty prop) {
        return new PermissionDeserializer(this, prop);
    }

    @Override
    protected Class<?> getClassByName(String anyOfType) throws NoSuchTypeException {
        return PermissionTypeData.getClassByName(anyOfType);
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/json/resolver/PermissionResolver.java ---
package com.syntifi.near.api.rpc.json.resolver;

import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.syntifi.near.api.rpc.json.deserializer.PermissionDeserializer;

import java.util.Collection;

/**
 * Permission type deserializer resolver
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public class PermissionResolver extends StdTypeResolverBuilder {
    @Override
    public TypeDeserializer buildTypeDeserializer(final DeserializationConfig config, final JavaType baseType,
                                                  final Collection<NamedType> subtypes) {
        return new PermissionDeserializer(baseType, null, _typeProperty, _typeIdVisible, baseType);
    }
}
'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/json/serializer/ByteArraySerializer.java ---
package com.syntifi.near.api.rpc.json.serializer;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;

import java.io.IOException;

/**
 * Custom byte array serializer for handling serialization numerically
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public class ByteArraySerializer extends JsonSerializer<byte[]> {

    @Override
    public void serialize(byte[] bytes, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
        jsonGenerator.writeStartArray();

        for (byte b : bytes) {
            jsonGenerator.writeNumber(unsignedToBytes(b));
        }

        jsonGenerator.writeEndArray();
    }

    private static int unsignedToBytes(byte b) {
        return b & 0xFF;
    }

}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/jsonrpc4j/exception/NearExceptionResolver.java ---
package com.syntifi.near.api.rpc.jsonrpc4j.exception;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.googlecode.jsonrpc4j.ExceptionResolver;
import com.syntifi.near.api.common.exception.NearErrorData;
import com.syntifi.near.api.common.exception.NearException;
import com.syntifi.near.api.common.service.NearObjectMapper;

/**
 * Custom exception handler for jsonrpc4j client
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public class NearExceptionResolver implements ExceptionResolver {
    private static final ObjectMapper objectMapper = new NearObjectMapper();

    @Override
    public Throwable resolveException(ObjectNode response) {
        try {
            JsonNode errorNode = response.get("error");
            NearErrorData error = objectMapper.treeToValue(errorNode, NearErrorData.class);
            return new NearException(error);
        } catch (JsonProcessingException | IllegalArgumentException e) {
            return new NearException(String.format("Could not extract error, response was: %s", response), e);
        }
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/accesskey/AccessKey.java ---
package com.syntifi.near.api.rpc.model.accesskey;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import com.syntifi.near.api.rpc.model.accesskey.permission.Permission;
import com.syntifi.near.borshj.Borsh;
import com.syntifi.near.borshj.annotation.BorshField;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * AccessKey
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class AccessKey implements Borsh {
    @BorshField(order = 1)
    @JsonProperty("nonce")
    private long nonce;

    @BorshField(order = 2)
    @JsonProperty("permission")
    private Permission permission;

    @JsonProperty("block_height")
    @JsonInclude(value = Include.NON_EMPTY)
    private Long blockHeight;

    @JsonProperty("block_hash")
    @JsonInclude(value = Include.NON_EMPTY)
    private EncodedHash blockHash;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/accesskey/AccessKeyChange.java ---
package com.syntifi.near.api.rpc.model.accesskey;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.ChangeCause;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * AccessKeyChange
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AccessKeyChange {
    @JsonProperty("cause")
    private ChangeCause cause;

    @JsonProperty("type")
    private String type;

    @JsonProperty("change")
    private AccessKeyChangeDetails details;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/accesskey/AccessKeyChangeDetails.java ---
package com.syntifi.near.api.rpc.model.accesskey;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.key.PublicKey;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * AccessKeyChangeDetails
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AccessKeyChangeDetails {
    @JsonProperty("account_id")
    private String accountId;

    @JsonProperty("public_key")
    private PublicKey publicKey;

    @JsonProperty("access_key")
    private AccessKey accessKey;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/accesskey/AccessKeyChanges.java ---
package com.syntifi.near.api.rpc.model.accesskey;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * AccessKeyChanges
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AccessKeyChanges {
    @JsonProperty("block_hash")
    private EncodedHash blockHash;

    @JsonProperty("changes")
    private Collection<AccessKeyChange> changes;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/accesskey/AccessKeyList.java ---
package com.syntifi.near.api.rpc.model.accesskey;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * AccessKeyList
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AccessKeyList {
    @JsonProperty("keys")
    private Collection<AccessKeyListItem> items;

    @JsonProperty("block_height")
    private long blockHeight;

    @JsonProperty("block_hash")
    private EncodedHash blockHash;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/accesskey/AccessKeyListItem.java ---
package com.syntifi.near.api.rpc.model.accesskey;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.key.PublicKey;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * AccessKeyListItem
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AccessKeyListItem {
    @JsonProperty("public_key")
    private PublicKey publicKey;

    @JsonProperty("access_key")
    private AccessKey accessKey;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/accesskey/Key.java ---
package com.syntifi.near.api.rpc.model.accesskey;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.key.PublicKey;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Key
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Key {
    @JsonProperty("account_id")
    private String accountId;

    @JsonProperty("public_key")
    private PublicKey publicKey;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/accesskey/permission/FullAccessPermission.java ---
package com.syntifi.near.api.rpc.model.accesskey.permission;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;

/**
 * FullAccessPermission
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public enum FullAccessPermission implements Permission {
    @JsonProperty("FullAccess")
    @JsonUnwrapped
    FULL_ACCESS
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/accesskey/permission/FunctionCallPermission.java ---
package com.syntifi.near.api.rpc.model.accesskey.permission;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * FunctionCallPermission
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class FunctionCallPermission implements Permission {
    @JsonProperty("FunctionCall")
    private FunctionCallPermissionData permissionData;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/accesskey/permission/FunctionCallPermissionData.java ---
package com.syntifi.near.api.rpc.model.accesskey.permission;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * FunctionCallPermissionData
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class FunctionCallPermissionData {
    @JsonProperty("allowance")
    private String allowance;

    @JsonProperty("receiver_id")
    private String receiverId;

    @JsonProperty("method_names")
    private Collection<String> methodNames;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/accesskey/permission/Permission.java ---
package com.syntifi.near.api.rpc.model.accesskey.permission;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.annotation.JsonTypeResolver;
import com.syntifi.near.api.rpc.json.resolver.PermissionResolver;
import com.syntifi.near.borshj.annotation.BorshSubTypes;

/**
 * Permission
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)
@JsonTypeResolver(PermissionResolver.class)
@BorshSubTypes({
        @BorshSubTypes.BorshSubType(when = Permission.FUNCTION_CALL_PERMISSION, use = FunctionCallPermission.class),
        @BorshSubTypes.BorshSubType(when = Permission.FULL_ACCESS_PERMISSION, use = FullAccessPermission.class)})
public interface Permission {
    int FUNCTION_CALL_PERMISSION = 0;
    int FULL_ACCESS_PERMISSION = 1;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/accesskey/permission/PermissionTypeData.java ---
package com.syntifi.near.api.rpc.model.accesskey.permission;

import com.syntifi.near.api.common.exception.NoSuchTypeException;
import lombok.Getter;

/**
 * PermissionTypeData
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
public enum PermissionTypeData {
    FULL_ACCESS("FullAccess", FullAccessPermission.class),
    FUNCTION_CALL("FunctionCall", FunctionCallPermission.class);

    private final String name;
    private final Class<?> clazz;

    PermissionTypeData(String name, Class<?> clazz) {
        this.name = name;
        this.clazz = clazz;
    }

    /**
     * Retrieve Transform implementation class from Transform name
     *
     * @param name the name of the permission type
     * @return the class of given permission type
     * @throws NoSuchTypeException no such type found
     */
    public static Class<?> getClassByName(String name) throws NoSuchTypeException {
        for (PermissionTypeData t : values()) {
            if (t.name.equals(name)) {
                return t.getClazz();
            }
        }
        throw new NoSuchTypeException(String.format("Permission Type %s invalid/not found.", name));
    }
}
'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/account/Account.java ---
package com.syntifi.near.api.rpc.model.account;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Account
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Account {
    @JsonProperty("amount")
    private String amount;

    @JsonProperty("locked")
    private String locked;

    @JsonProperty("code_hash")
    private EncodedHash codeHash;

    @JsonProperty("storage_usage")
    private long storageUsage;

    @JsonProperty("storage_paid_at")
    private long storagePaidAt;

    @JsonProperty("block_height")
    private long blockHeight;

    @JsonProperty("block_hash")
    private EncodedHash blockHash;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/account/AccountChange.java ---
package com.syntifi.near.api.rpc.model.account;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.ChangeCause;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * AccountChange
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AccountChange {
    @JsonProperty("cause")
    private ChangeCause cause;

    @JsonProperty("type")
    private String type;

    @JsonProperty("change")
    private AccountChangeDetails change;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/account/AccountChangeDetails.java ---
package com.syntifi.near.api.rpc.model.account;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * AccountChangeDetails
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AccountChangeDetails {
    @JsonProperty("account_id")
    private String accountId;

    @JsonProperty("amount")
    private String amount;

    @JsonProperty("locked")
    private String locked;

    @JsonProperty("code_hash")
    private String codeHash;

    @JsonProperty("storage_usage")
    private long storageUsage;

    @JsonProperty("storage_paid_at")
    private long storagePaidAt;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/account/AccountChanges.java ---
package com.syntifi.near.api.rpc.model.account;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * AccountChanges
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AccountChanges {
    @JsonProperty("block_hash")
    private EncodedHash blockHash;

    @JsonProperty("changes")
    private Collection<AccountChange> changes;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/block/Block.java ---
package com.syntifi.near.api.rpc.model.block;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * Block
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Block {
    @JsonProperty("author")
    private String author;

    @JsonProperty("header")
    private BlockHeader header;

    @JsonProperty("chunks")
    private Collection<ChunkHeader> chunks;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/block/BlockChange.java ---
package com.syntifi.near.api.rpc.model.block;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * BlockChange
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class BlockChange {
    @JsonProperty("type")
    private String type;

    @JsonProperty("account_id")
    private String accountId;
}
'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/block/BlockChanges.java ---
package com.syntifi.near.api.rpc.model.block;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * BlockChanges
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class BlockChanges {
    @JsonProperty("block_hash")
    private EncodedHash hash;

    @JsonProperty("changes")
    private Collection<BlockChange> changes;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/block/BlockHeader.java ---
package com.syntifi.near.api.rpc.model.block;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import com.syntifi.near.api.common.model.key.Signature;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * BlockHeader
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class BlockHeader {
    @JsonProperty("height")
    private long height;

    @JsonProperty("prev_height")
    @JsonInclude(value = Include.NON_NULL)
    private Long previousHeight;

    @JsonProperty("epoch_id")
    private String epochId;

    @JsonProperty("next_epoch_id")
    private String nextEpochId;

    @JsonProperty("hash")
    private EncodedHash hash;

    @JsonProperty("prev_hash")
    private EncodedHash previousHash;

    @JsonProperty("prev_state_root")
    private EncodedHash previousStateRoot;

    @JsonProperty("chunk_receipts_root")
    private String chunkReceiptsRoot;

    @JsonProperty("chunk_headers_root")
    private String chunkHeadersRoot;

    @JsonProperty("chunk_tx_root")
    private String chunkTxRoot;

    @JsonProperty("outcome_root")
    private String outcomeRoot;

    @JsonProperty("chunks_included")
    private long chunksIncluded;

    @JsonProperty("challenges_root")
    private String chalengesRoot;

    @JsonProperty("timestamp")
    private long timeStamp;

    @JsonProperty("timestamp_nanosec")
    private String timeStampNanoSeconds;

    @JsonProperty("random_value")
    private String randomValue;

    @JsonProperty("validator_proposals")
    private ValidatorProposal[] validatorProposals;

    @JsonProperty("chunk_mask")
    private Collection<Boolean> chunkMask;

    @JsonProperty("block_ordinal")
    @JsonInclude(value = Include.NON_NULL)
    private Long blockOrdinal;

    @JsonProperty("gas_price")
    private String gasPrice;

    @JsonProperty("rent_paid")
    private String rentPaid;

    @JsonProperty("validator_reward")
    private String validatorReward;

    @JsonProperty("total_supply")
    private String totalSupply;

    // TODO: find which object represents this
    @JsonProperty("challenges_result")
    private Object[] challengesResult;

    @JsonProperty("last_final_block")
    private String lastFinalBlock;

    @JsonProperty("last_ds_final_block")
    private String lastDsFinalBlock;

    @JsonProperty("next_bp_hash")
    private String nextBpHash;

    @JsonProperty("block_merkle_root")
    private String blockMerkleRoot;

    @JsonProperty("epoch_sync_data_hash")
    @JsonInclude(value = Include.NON_EMPTY)
    private String epochSyncDataHash;

    @JsonProperty("approvals")
    private Collection<String> approvals;

    @JsonProperty("signature")
    private Signature signature;

    @JsonProperty("latest_protocol_version")
    private long latestProtocolVersion;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/block/Chunk.java ---
package com.syntifi.near.api.rpc.model.block;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.rpc.model.transaction.Receipt;
import com.syntifi.near.api.rpc.model.transaction.Transaction;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * Chunk
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Chunk {
    @JsonProperty("author")
    private String author;

    @JsonProperty("header")
    private ChunkHeader header;

    @JsonProperty("transactions")
    private Collection<Transaction> transactions;

    @JsonProperty("receipts")
    private Collection<Receipt> receipts;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/block/ChunkHeader.java ---
package com.syntifi.near.api.rpc.model.block;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import com.syntifi.near.api.common.model.key.Signature;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * ChunkHeader
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ChunkHeader {
    @JsonProperty("chunk_hash")
    private EncodedHash hash;

    @JsonProperty("prev_block_hash")
    private EncodedHash previousBlockHash;

    @JsonProperty("outcome_root")
    private String outcomeRoot;

    @JsonProperty("prev_state_root")
    private String previousStateRoot;

    @JsonProperty("encoded_merkle_root")
    private String encodedMerkleRoot;

    @JsonProperty("encoded_length")
    private long encodedLength;

    @JsonProperty("height_created")
    private long heightCreated;

    @JsonProperty("height_included")
    private long heightIncluded;

    @JsonProperty("shard_id")
    private long shardId;

    @JsonProperty("gas_used")
    private long gasUsed;

    @JsonProperty("gas_limit")
    private long gasLimit;

    @JsonProperty("rent_paid")
    private String rentPaid;

    @JsonProperty("validator_reward")
    private String validatorReward;

    @JsonProperty("balance_burnt")
    private String balanceBurnt;

    @JsonProperty("outgoing_receipts_root")
    private String outgoingReceiptsRoot;

    @JsonProperty("tx_root")
    private String txRoot;

    @JsonProperty("validator_proposals")
    private ValidatorProposal[] validatorProposals;

    @JsonProperty("signature")
    private Signature signature;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/block/ValidatorProposal.java ---
package com.syntifi.near.api.rpc.model.block;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.key.PublicKey;
import lombok.Getter;
import lombok.Setter;

/**
 * ValidatorProposal
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
public class ValidatorProposal {
    @JsonInclude(value = Include.NON_EMPTY)
    @JsonProperty("validator_stake_struct_version")
    private String validatorStakeStructVersion;

    @JsonInclude(value = Include.NON_EMPTY)
    @JsonProperty("account_id")
    private String accountId;

    @JsonInclude(value = Include.NON_EMPTY)
    @JsonProperty("public_key")
    private PublicKey publicKey;

    @JsonInclude(value = Include.NON_EMPTY)
    @JsonProperty("stake")
    private String stake;
}
'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/contract/ContractCode.java ---
package com.syntifi.near.api.rpc.model.contract;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * ContractCode
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ContractCode {
    @JsonProperty("code_base64")
    private String codeBase64;

    @JsonProperty("hash")
    private EncodedHash hash;

    @JsonProperty("block_height")
    private long blockHeight;

    @JsonProperty("block_hash")
    private EncodedHash blockHash;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/contract/ContractCodeChange.java ---
package com.syntifi.near.api.rpc.model.contract;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.ChangeCause;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * ContractCodeChange
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ContractCodeChange {
    @JsonProperty("cause")
    private ChangeCause cause;

    @JsonProperty("type")
    private String type;

    @JsonProperty("change")
    private ContractCodeChangeDetails details;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/contract/ContractCodeChangeDetails.java ---
package com.syntifi.near.api.rpc.model.contract;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * ContractCodeChangeDetails
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ContractCodeChangeDetails {
    @JsonProperty("account_id")
    private String accountId;

    @JsonProperty("code_base64")
    private String codeBase64;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/contract/ContractCodeChanges.java ---
package com.syntifi.near.api.rpc.model.contract;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * ContractCodeChanges
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ContractCodeChanges {
    @JsonProperty("block_hash")
    private EncodedHash blockHash;

    @JsonProperty("changes")
    private Collection<ContractCodeChange> changes;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/contract/ContractFunctionCallResult.java ---
package com.syntifi.near.api.rpc.model.contract;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.syntifi.near.api.common.model.common.EncodedHash;
import com.syntifi.near.api.rpc.json.serializer.ByteArraySerializer;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * ContractFunctionCallResult
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ContractFunctionCallResult {
    @JsonProperty("result")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = ByteArraySerializer.class)
    private byte[] result;

    @JsonProperty("logs")
    private Collection<String> logs;

    @JsonProperty("block_height")
    private long blockHeight;

    @JsonProperty("block_hash")
    private EncodedHash blockHash;

    @JsonProperty("error")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String error;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/contract/ContractState.java ---
package com.syntifi.near.api.rpc.model.contract;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import com.syntifi.near.api.rpc.model.transaction.Proof;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * ContractState
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ContractState {
    @JsonProperty("values")
    private Collection<ContractStateDetails> values;

    @JsonProperty("proof")
    private Collection<Proof> proof;

    @JsonProperty("block_height")
    private long blockHeight;

    @JsonProperty("block_hash")
    private EncodedHash blockHash;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/contract/ContractStateChange.java ---
package com.syntifi.near.api.rpc.model.contract;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.ChangeCause;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * ContractStateChange
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ContractStateChange {
    @JsonProperty("cause")
    private ChangeCause cause;

    @JsonProperty("type")
    private String type;

    @JsonProperty("change")
    private ContractStateChangeDetails details;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/contract/ContractStateChangeDetails.java ---
package com.syntifi.near.api.rpc.model.contract;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * ContractStateChangeDetails
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ContractStateChangeDetails {
    @JsonProperty("account_id")
    private String accountId;

    @JsonProperty("key_base64")
    private String keyBase64;

    @JsonProperty("value_base64")
    private String valueBase64;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/contract/ContractStateChanges.java ---
package com.syntifi.near.api.rpc.model.contract;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * ContractStateChanges
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ContractStateChanges {
    @JsonProperty("block_hash")
    private EncodedHash blockHash;

    @JsonProperty("changes")
    private Collection<ContractStateChange> changes;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/contract/ContractStateDetails.java ---
package com.syntifi.near.api.rpc.model.contract;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.rpc.model.transaction.Proof;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * ContractStateDetails
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ContractStateDetails {
    @JsonProperty("key")
    private String key;

    @JsonProperty("value")
    private String value;

    @JsonProperty("proof")
    private Collection<Proof> proof;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/gas/GasPrice.java ---
package com.syntifi.near.api.rpc.model.gas;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * GasPrice
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class GasPrice {
    @JsonProperty("gas_price")
    private String value;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/identifier/Finality.java ---
package com.syntifi.near.api.rpc.model.identifier;

import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The finality param has two options: optimistic and final.
 * - optimistic uses the latest block recorded on the node that responded to
 * your query (&lt;1 second delay after the transaction is submitted)
 * - final is for a block that has been validated on at least 66% of the nodes
 * in the network (usually takes 2 blocks / approx. 2 second delay)
 * 
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public enum Finality {
    OPTIMISTIC("optimistic"), FINAL("final");

    private final String type;

    Finality(String type) {
        this.type = type;
    }

    @Override
    @JsonValue
    public String toString() {
        return type;
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/network/CurrentProposal.java ---
package com.syntifi.near.api.rpc.model.network;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.key.PublicKey;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * CurrentProposal
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class CurrentProposal {
    @JsonProperty("validator_stake_struct_version")
    private String validatorStakeStructVersion;

    @JsonProperty("account_id")
    private String accountId;

    @JsonProperty("public_key")
    private PublicKey publicKey;

    @JsonProperty("stake")
    private String stake;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/network/Fisherman.java ---
package com.syntifi.near.api.rpc.model.network;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.key.PublicKey;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Fisherman
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Fisherman {
    @JsonProperty("account_id")
    private String accountId;

    @JsonProperty("public_key")
    private PublicKey publicKey;

    @JsonProperty("stake")
    private String stake;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/network/NetworkInfo.java ---
package com.syntifi.near.api.rpc.model.network;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * NetworkInfo
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class NetworkInfo {
    @JsonProperty("active_peers")
    private Collection<Peer> activePeers;

    @JsonProperty("num_active_peers")
    private long numActivePeers;

    @JsonProperty("peer_max_count")
    private long peerMaxCount;

    @JsonProperty("sent_bytes_per_sec")
    private long sentBytesPerSec;

    @JsonProperty("received_bytes_per_sec")
    private long receivedBytesPerSec;

    @JsonProperty("known_producers")
    private Collection<Producer> knownProducers;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/network/NodeStatus.java ---
package com.syntifi.near.api.rpc.model.network;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * NodeStatus
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class NodeStatus {
    @JsonProperty("version")
    private Version version;

    @JsonProperty("chain_id")
    private String chainId;

    @JsonProperty("protocol_version")
    private long protocolVersion;

    @JsonProperty("latest_protocol_version")
    private long latestProtocolVersion;

    @JsonProperty("rpc_addr")
    private String rpcAddr;

    @JsonProperty("validators")
    private Collection<Validator> validators;

    @JsonProperty("sync_info")
    private SyncInfo syncInfo;

    @JsonProperty("validator_account_id")
    private String validatorAccountId;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/network/NotEnoughBlocksReason.java ---
package com.syntifi.near.api.rpc.model.network;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * NotEnoughBlocksReason
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@JsonTypeName("NotEnoughBlocks")
public class NotEnoughBlocksReason implements Reason {
    @JsonProperty("produced")
    private long produced;

    @JsonProperty("expected")
    private long expected;

}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/network/NotEnoughChunksReason.java ---
package com.syntifi.near.api.rpc.model.network;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * NotEnoughChunksReason
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@JsonTypeName("NotEnoughChunks")
public class NotEnoughChunksReason implements Reason {
    @JsonProperty("produced")
    private long produced;

    @JsonProperty("expected")
    private long expected;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/network/Peer.java ---
package com.syntifi.near.api.rpc.model.network;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Peer
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Peer {
    @JsonProperty("id")
    private String id;

    @JsonProperty("addr")
    private String addr;

    @JsonProperty("account_id")
    private String accountId;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/network/PrevEpochKickout.java ---
package com.syntifi.near.api.rpc.model.network;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * PrevEpochKickout
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class PrevEpochKickout {
    @Getter
    @Setter
    public static class Reason {
        @Getter
        @Setter
        public static class NotEnough {
            private long produced;
            private long expected;
        }

        @JsonInclude(value = Include.NON_EMPTY)
        @JsonProperty("NotEnoughBlocks")
        private NotEnough notEnoughBlocks;

        @JsonInclude(value = Include.NON_EMPTY)
        @JsonProperty("NotEnoughChunks")
        private NotEnough notEnoughChunks;
    }

    @JsonProperty("account_id")
    private String accountId;

    @JsonProperty("reason")
    private Reason reason;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/network/Producer.java ---
package com.syntifi.near.api.rpc.model.network;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Producer
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Producer {
    @JsonProperty("account_id")
    private String accountId;

    @JsonProperty("addr")
    private String addr;

    @JsonProperty("peer_id")
    private String peerId;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/network/Reason.java ---
package com.syntifi.near.api.rpc.model.network;

import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

/**
 * Reason Interface
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.WRAPPER_OBJECT)
@JsonSubTypes({@JsonSubTypes.Type(value = NotEnoughBlocksReason.class, name = "NotEnoughBlocks"),
        @JsonSubTypes.Type(value = NotEnoughChunksReason.class, name = "NotEnoughChunks")})
public interface Reason {
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/network/SyncInfo.java ---
package com.syntifi.near.api.rpc.model.network;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * SyncInfo
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class SyncInfo {
    @JsonProperty("epoch_id")
    private String epochId;

    @JsonProperty("epoch_start_height")
    private String epochStartHeight;

    @JsonProperty("latest_block_hash")
    private String latestBlockHash;

    @JsonProperty("latest_block_height")
    private long latestBlockHeight;

    @JsonProperty("latest_state_root")
    private String latestStateRoot;

    @JsonProperty("latest_block_time")
    private String latestBlockTime;

    @JsonProperty("syncing")
    private boolean syncing;
    @JsonInclude(value = Include.NON_EMPTY)

    @JsonProperty("earliest_block_hash")
    private String earliestBlockHash;
    @JsonInclude(value = Include.NON_EMPTY)

    @JsonProperty("earliest_block_height")
    private Long earliestBlockHeight;
    @JsonInclude(value = Include.NON_EMPTY)

    @JsonProperty("earliest_block_time")
    private String earliestBlockTime;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/network/ValidationStatus.java ---
package com.syntifi.near.api.rpc.model.network;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * ValidationStatus
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ValidationStatus {
    @JsonProperty("current_validators")
    private Collection<Validator> currentValidators;

    @JsonProperty("next_validators")
    private Collection<Validator> nextValidators;

    @JsonProperty("current_fishermen")
    private Collection<Fisherman> currentFishermen;

    @JsonProperty("next_fishermen")
    private Collection<Fisherman> nextFishermen;

    @JsonProperty("current_proposals")
    private Collection<CurrentProposal> currentProposals;

    @JsonProperty("prev_epoch_kickout")
    private Collection<PrevEpochKickout> prevEpochKickout;

    @JsonProperty("epoch_start_height")
    private long epochStartHeight;

    @JsonProperty("epoch_height")
    private long epochHeight;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/network/Validator.java ---
package com.syntifi.near.api.rpc.model.network;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.key.PublicKey;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * Validator
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Validator {
    @JsonProperty("account_id")
    private String accountId;

    @JsonProperty("public_key")
    @JsonInclude(value = Include.NON_EMPTY)
    private PublicKey publicKey;

    @JsonProperty("is_slashed")
    @JsonInclude(value = Include.NON_EMPTY)
    private Boolean isSlashed;

    @JsonProperty("stake")
    @JsonInclude(value = Include.NON_EMPTY)
    private String stake;

    @JsonProperty("amount")
    @JsonInclude(value = Include.NON_EMPTY)
    private String amount;

    @JsonProperty("shards")
    @JsonInclude(value = Include.NON_EMPTY)
    private Collection<Long> shards;

    @JsonProperty("num_produced_blocks")
    @JsonInclude(value = Include.NON_EMPTY)
    private Long numProducedBlocks;

    @JsonProperty("num_expected_blocks")
    @JsonInclude(value = Include.NON_EMPTY)
    private Long numExpectedBlocks;

    @JsonProperty("num_produced_chunks")
    @JsonInclude(value = Include.NON_EMPTY)
    private Long numProducedChunks;

    @JsonProperty("num_expected_chunks")
    @JsonInclude(value = Include.NON_EMPTY)
    private Long numExpectedChunks;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/network/Version.java ---
package com.syntifi.near.api.rpc.model.network;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Version
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Version {
    @JsonProperty("version")
    private String number;

    @JsonProperty("build")
    private String build;

    @JsonProperty("rustc_version")
    private String rustcVersion;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/AccountCreationConfig.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * AccountCreationConfig
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AccountCreationConfig {
    @JsonProperty("min_allowed_top_level_account_length")
    private long minAllowedTopLevelAccountLength;

    @JsonProperty("registrar_account_id")
    private String registrarAccountId;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/ActionCreationConfig.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * ActionCreationConfig
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ActionCreationConfig {
    @JsonProperty("create_account_cost")
    private Cost createAccountCost;

    @JsonProperty("deploy_contract_cost")
    private Cost deployContractCost;

    @JsonProperty("deploy_contract_cost_per_byte")
    private Cost deployContractCostPerByte;

    @JsonProperty("function_call_cost")
    private Cost functionCallCost;

    @JsonProperty("function_call_cost_per_byte")
    private Cost functionCallCostPerByte;

    @JsonProperty("transfer_cost")
    private Cost transferCost;

    @JsonProperty("stake_cost")
    private Cost stakeCost;

    @JsonProperty("add_key_cost")
    private AddKeyCost addKeyCost;

    @JsonProperty("delete_key_cost")
    private Cost deleteKeyCost;

    @JsonProperty("delete_account_cost")
    private Cost deleteAccountCost;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/AddKeyCost.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * AddKeyCost
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AddKeyCost {
    @JsonProperty("full_access_cost")
    private Cost fullAccessCost;

    @JsonProperty("function_call_cost")
    private Cost functionCallCost;

    @JsonProperty("function_call_cost_per_byte")
    private Cost functionCallCostPerByte;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/Cost.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Cost
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Cost {
    @JsonProperty("send_sir")
    private long sendSir;

    @JsonProperty("send_not_sir")
    private long sendNotSir;

    @JsonProperty("execution")
    private long execution;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/DataReceiptCreationConfig.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DataReceiptCreationConfig
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class DataReceiptCreationConfig {
    @JsonProperty("base_cost")
    private Cost baseCost;

    @JsonProperty("cost_per_byte")
    private Cost costPerByte;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/ExtCosts.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * ExtCosts
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ExtCosts {
    @JsonProperty("base")
    private long base;

    @JsonProperty("contract_loading_base")
    private long contractLoadingBase;

    @JsonProperty("contract_loading_bytes")
    private long contractLoadingBytes;

    @JsonProperty("contract_compile_base")
    private long contractCompileBase;

    @JsonProperty("contract_compile_bytes")
    private long contractCompileBytes;

    @JsonProperty("read_memory_base")
    private long readMemoryBase;

    @JsonProperty("read_memory_byte")
    private long readMemoryByte;

    @JsonProperty("write_memory_base")
    private long writeMemoryBase;

    @JsonProperty("write_memory_byte")
    private long writeMemoryByte;

    @JsonProperty("read_register_base")
    private long readRegisterBase;

    @JsonProperty("read_register_byte")
    private long readRegisterByte;

    @JsonProperty("write_register_base")
    private long writeRegisterBase;

    @JsonProperty("write_register_byte")
    private long writeRegisterByte;

    @JsonProperty("utf8_decoding_base")
    private long utf8DecodingBase;

    @JsonProperty("utf8_decoding_byte")
    private long utf8DecodingByte;

    @JsonProperty("utf16_decoding_base")
    private long utf16DecodingBase;

    @JsonProperty("utf16_decoding_byte")
    private long utf16DecodingByte;

    @JsonProperty("sha256_base")
    private long sha256Base;

    @JsonProperty("sha256_byte")
    private long sha256Byte;

    @JsonProperty("keccak256_base")
    private long keccak256Base;

    @JsonProperty("keccak256_byte")
    private long keccak256Byte;

    @JsonProperty("keccak512_base")
    private long keccak512Base;

    @JsonProperty("keccak512_byte")
    private long keccak512Byte;

    @JsonProperty("ripemd160_base")
    private long ripemd160Base;

    @JsonProperty("ripemd160_block")
    private long ripemd160Block;

    @JsonProperty("ecrecover_base")
    private long ecrecoverBase;

    @JsonProperty("log_base")
    private long logBase;

    @JsonProperty("log_byte")
    private long logByte;

    @JsonProperty("storage_write_base")
    private long storageWriteBase;

    @JsonProperty("storage_write_key_byte")
    private long storageWriteKeyByte;

    @JsonProperty("storage_write_value_byte")
    private long storageWriteValueByte;

    @JsonProperty("storage_write_evicted_byte")
    private long storageWriteEvictedByte;

    @JsonProperty("storage_read_base")
    private long storageReadBase;

    @JsonProperty("storage_read_key_byte")
    private long storageReadKeyByte;

    @JsonProperty("storage_read_value_byte")
    private long storageReadValueByte;

    @JsonProperty("storage_remove_base")
    private long storageRemoveBase;

    @JsonProperty("storage_remove_key_byte")
    private long storageRemoveKeyByte;

    @JsonProperty("storage_remove_ret_value_byte")
    private long storageRemoveRetValueByte;

    @JsonProperty("storage_has_key_base")
    private long storageHasKeyBase;

    @JsonProperty("storage_has_key_byte")
    private long storageHasKeyByte;

    @JsonProperty("storage_iter_create_prefix_base")
    private long storageIterCreatePrefixBase;

    @JsonProperty("storage_iter_create_prefix_byte")
    private long storageIterCreatePrefixByte;

    @JsonProperty("storage_iter_create_range_base")
    private long storageIterCreateRangeBase;

    @JsonProperty("storage_iter_create_from_byte")
    private long storageIterCreateFromByte;

    @JsonProperty("storage_iter_create_to_byte")
    private long storageIterCreateToByte;

    @JsonProperty("storage_iter_next_base")
    private long storageIterNextBase;

    @JsonProperty("storage_iter_next_key_byte")
    private long storageIterNextKeyByte;

    @JsonProperty("storage_iter_next_value_byte")
    private long storageIterNextValueByte;

    @JsonProperty("touching_trie_node")
    private long touchingTrieNode;

    @JsonProperty("read_cached_trie_node")
    private long readCachedTrieNode;

    @JsonProperty("promise_and_base")
    private long promiseAndBase;

    @JsonProperty("promise_and_per_promise")
    private long promiseAndPerPromise;

    @JsonProperty("promise_return")
    private long promiseReturn;

    @JsonProperty("validator_stake_base")
    private long validatorStakeBase;

    @JsonProperty("validator_total_stake_base")
    private long validatorTotalStakeBase;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/GenesisConfig.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.rpc.model.network.Validator;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * GenesisConfig
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class GenesisConfig {
    @JsonProperty("protocol_version")
    private long protocolVersion;

    @JsonProperty("genesis_time")
    private String genesisTime;

    @JsonProperty("chain_id")
    private String chainId;

    @JsonProperty("genesis_height")
    private long genesisHeight;

    @JsonProperty("num_block_producer_seats")
    private long numBlockProducerSeats;

    @JsonProperty("num_block_producer_seats_per_shard")
    private Collection<Long> numBlockProducerSeatsPerShard;

    @JsonProperty("avg_hidden_validator_seats_per_shard")
    private Collection<Long> avgHiddenValidatorSeatsPerShard;

    @JsonProperty("dynamic_resharding")
    private boolean dynamicResharding;

    @JsonProperty("protocol_upgrade_stake_threshold")
    private Collection<Long> protocolUpgradeStakeThreshold;

    @JsonProperty("protocol_upgrade_num_epochs")
    private long protocolUpgradeNumEpochs;

    @JsonProperty("epoch_length")
    private long epochLength;

    @JsonProperty("gas_limit")
    private long gasLimit;

    @JsonProperty("min_gas_price")
    private String minGasPrice;

    @JsonProperty("max_gas_price")
    private String maxGasPrice;

    @JsonProperty("block_producer_kickout_threshold")
    private long blockProducerKickoutThreshold;

    @JsonProperty("chunk_producer_kickout_threshold")
    private long chunkProducerKickoutThreshold;

    @JsonProperty("online_min_threshold")
    private Collection<Long> onlineMinThreshold;

    @JsonProperty("online_max_threshold")
    private Collection<Long> onlineMaxThreshold;

    @JsonProperty("gas_price_adjustment_rate")
    private Collection<Long> gasPriceAdjustmentRate;

    @JsonProperty("runtime_config")
    @JsonInclude(value = Include.NON_NULL)
    private RuntimeConfig runtimeConfig;

    @JsonProperty("validators")
    private Collection<Validator> validators;

    @JsonProperty("transaction_validity_period")
    private long transactionValidityPeriod;

    @JsonProperty("protocol_reward_rate")
    private Collection<Long> protocolRewardRate;

    @JsonProperty("max_inflation_rate")
    private Collection<Long> maxInflationRate;

    @JsonProperty("total_supply")
    private String totalSupply;

    @JsonProperty("num_blocks_per_year")
    private long numBlocksPerYear;

    @JsonProperty("protocol_treasury_account")
    private String protocolTreasuryAccount;

    @JsonProperty("fishermen_threshold")
    private String fishermenThreshold;

    @JsonProperty("minimum_stake_divisor")
    private long minimumStakeDivisor;

    @JsonProperty("shard_layout")
    private ShardLayout shardLayout;

    @JsonProperty("simple_nightshade_shard_layout")
    private SimpleNightShadeShardLayout simpleNightshadeShardLayout;

    @JsonProperty("minimum_stake_ratio")
    private Collection<Long> minimumStakeRatio;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/LimitConfig.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * LimitConfig
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class LimitConfig {
    @JsonProperty("max_gas_burnt")
    private long maxGasBurnt;

    @JsonProperty("max_gas_burnt_view")
    @JsonInclude(value = Include.NON_EMPTY)
    private Long maxGasBurntView;

    @JsonProperty("max_stack_height")
    private long maxStackHeight;

    @JsonProperty("stack_limiter_version")
    private long stackLimiterVersion;

    @JsonProperty("initial_memory_pages")
    private long initialMemoryPages;

    @JsonProperty("max_memory_pages")
    private long maxMemoryPages;

    @JsonProperty("registers_memory_limit")
    private long registersMemoryLimit;

    @JsonProperty("max_register_size")
    private long maxRegisterSize;

    @JsonProperty("max_number_registers")
    private long maxNumberRegisters;

    @JsonProperty("max_number_logs")
    private long maxNumberLogs;

    @JsonProperty("max_total_log_length")
    private long maxTotalLogLength;

    @JsonProperty("max_total_prepaid_gas")
    private long maxTotalPrepaidGas;

    @JsonProperty("max_actions_per_receipt")
    private long maxActionsPerReceipt;

    @JsonProperty("max_number_bytes_method_names")
    private long maxNumberBytesMethodNames;

    @JsonProperty("max_length_method_name")
    private long maxLengthMethodName;

    @JsonProperty("max_arguments_length")
    private long maxArgumentsLength;

    @JsonProperty("max_length_returned_data")
    private long maxLengthReturnedData;

    @JsonProperty("max_contract_size")
    private long maxContractSize;

    @JsonProperty("max_transaction_size")
    private long maxTransactionSize;

    @JsonProperty("max_length_storage_key")
    private long maxLengthStorageKey;

    @JsonProperty("max_length_storage_value")
    private long maxLengthStorageValue;

    @JsonProperty("max_promises_per_function_call_action")
    private long maxPromisesPerFunctionCallAction;

    @JsonProperty("max_number_input_data_dependencies")
    private long maxNumberInputDataDependencies;

    @JsonProperty("max_functions_number_per_contract")
    private long maxFunctionsNumberPerContract;

    @JsonProperty("max_locals_per_contract")
    private long maxLocalsPerContract;

    @JsonProperty("wasmer2_stack_limit")
    private long wasmer2StackLimit;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/ProtocolConfig.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * ProtocolConfig
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ProtocolConfig {
    @JsonProperty("protocol_version")
    private long protocolVersion;

    @JsonProperty("genesis_time")
    private String genesisTime;

    @JsonProperty("chain_id")
    private String chainId;

    @JsonProperty("genesis_height")
    private long genesisHeight;

    @JsonProperty("num_block_producer_seats")
    private long numBlockProducerSeats;

    @JsonProperty("num_block_producer_seats_per_shard")
    private Collection<Long> numBlockProducerSeatsPerShard;

    @JsonProperty("avg_hidden_validator_seats_per_shard")
    private Collection<Long> avgHiddenValidatorSeatsPerShard;

    @JsonProperty("dynamic_resharding")
    private boolean dynamicResharding;

    @JsonProperty("protocol_upgrade_stake_threshold")
    private Collection<Long> protocolUpgradeStakeThreshold;

    @JsonProperty("epoch_length")
    private long epochLength;

    @JsonProperty("gas_limit")
    private long gasLimit;

    @JsonProperty("min_gas_price")
    private String minGasPrice;

    @JsonProperty("max_gas_price")
    private String maxGasPrice;

    @JsonProperty("block_producer_kickout_threshold")
    private long blockProducerKickoutThreshold;

    @JsonProperty("chunk_producer_kickout_threshold")
    private long chunkProducerKickoutThreshold;

    @JsonProperty("online_min_threshold")
    private Collection<Long> onlineMinThreshold;

    @JsonProperty("online_max_threshold")
    private Collection<Long> onlineMaxThreshold;

    @JsonProperty("gas_price_adjustment_rate")
    private Collection<Long> gasPriceAdjustmentRate;

    @JsonProperty("runtime_config")
    private RuntimeConfig runtimeConfig;

    @JsonProperty("transaction_validity_period")
    private long transactionValidityPeriod;

    @JsonProperty("protocol_reward_rate")
    private Collection<Long> protocolRewardRate;

    @JsonProperty("max_inflation_rate")
    private Collection<Long> maxInflationRate;

    @JsonProperty("num_blocks_per_year")
    private long numBlocksPerYear;

    @JsonProperty("protocol_treasury_account")
    private String protocolTreasuryAccount;

    @JsonProperty("fishermen_threshold")
    private String fishermenThreshold;

    @JsonProperty("minimum_stake_divisor")
    private long minimumStakeDivisor;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/RuntimeConfig.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * RuntimeConfig
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RuntimeConfig {
    @JsonProperty("storage_amount_per_byte")
    private String storageAmountPerByte;

    @JsonProperty("transaction_costs")
    private TransactionCosts transactionCosts;

    @JsonProperty("wasm_config")
    private WasmConfig wasmConfig;

    @JsonProperty("account_creation_config")
    private AccountCreationConfig accountCreationConfig;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/ShardLayout.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * ShardLayout
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ShardLayout {
    @Getter
    @Setter
    public static class V0 {
        @JsonProperty("num_shards")
        private long numShards;

        @JsonProperty("version")
        private long version;
    }

    @JsonProperty("V0")
    private V0 v0;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/SimpleNightShadeShardLayout.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * SimpleNightShadeShardLayout
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class SimpleNightShadeShardLayout {
    @Getter
    @Setter
    public static class V1 {
        @JsonProperty("fixed_shards")
        private Collection<Long> fixedShards;

        @JsonProperty("boundary_accounts")
        private Collection<String> boundaryAccounts;

        @JsonProperty("shards_split_map")
        private Collection<Collection<Long>> shardsSplitMap;

        @JsonProperty("to_parent_shard_map")
        private Collection<Long> toParentShardMap;

        @JsonProperty("version")
        private long version;
    }

    @JsonProperty("V1")
    private V1 v1;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/StorageUsageConfig.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * StorageUsageConfig
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class StorageUsageConfig {
    @JsonProperty("num_bytes_account")
    private long numBytesAccount;

    @JsonProperty("num_extra_bytes_record")
    private long numExtraBytesRecord;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/TransactionCosts.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * TransactionCosts
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TransactionCosts {

    @JsonProperty("action_receipt_creation_config")
    private Cost actionReceiptCreationConfig;

    @JsonProperty("data_receipt_creation_config")
    private DataReceiptCreationConfig dataReceiptCreationConfig;

    @JsonProperty("action_creation_config")
    private ActionCreationConfig actionCreationConfig;

    @JsonProperty("storage_usage_config")
    private StorageUsageConfig storageUsageConfig;

    @JsonProperty("burnt_gas_reward")
    private Collection<Long> burntGasReward;

    @JsonProperty("pessimistic_gas_price_inflation_ratio")
    private Collection<Long> pessimisticGasPriceInflationRatio;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/protocol/WasmConfig.java ---
package com.syntifi.near.api.rpc.model.protocol;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * WasmConfig
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class WasmConfig {
    @JsonProperty("ext_costs")
    private ExtCosts extCosts;

    @JsonProperty("grow_mem_cost")
    private long growMemCost;

    @JsonProperty("regular_op_cost")
    private long regularOpCost;

    @JsonProperty("limit_config")
    private LimitConfig limitConfig;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/Action.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.syntifi.near.borshj.Borsh;
import com.syntifi.near.borshj.annotation.BorshSubTypes;

/**
 * Action Interface
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@JsonTypeInfo(use = Id.NAME, include = As.WRAPPER_OBJECT)
@JsonSubTypes({
        @JsonSubTypes.Type(value = TransferAction.class, name = "Transfer"),
        @JsonSubTypes.Type(value = FunctionCallAction.class, name = "FunctionCall")})
@BorshSubTypes({
        @BorshSubTypes.BorshSubType(when = Action.CREATE_ACCOUNT, use = CreateAccountAction.class),
        @BorshSubTypes.BorshSubType(when = Action.DEPLOY_CONTRACT, use = DeployContractAction.class),
        @BorshSubTypes.BorshSubType(when = Action.FUNCTION_CALL, use = FunctionCallAction.class),
        @BorshSubTypes.BorshSubType(when = Action.STAKE, use = StakeAction.class),
        @BorshSubTypes.BorshSubType(when = Action.ADD_KEY, use = AddKeyAction.class),
        @BorshSubTypes.BorshSubType(when = Action.DELETE_KEY, use = DeleteKeyAction.class),
        @BorshSubTypes.BorshSubType(when = Action.DELETE_ACCOUNT, use = DeleteAccountAction.class),
        @BorshSubTypes.BorshSubType(when = Action.TRANSFER, use = TransferAction.class)})
public interface Action extends Borsh {
    byte CREATE_ACCOUNT = 0;
    byte DEPLOY_CONTRACT = 1;
    byte FUNCTION_CALL = 2;
    byte TRANSFER = 3;
    byte STAKE = 4;
    byte ADD_KEY = 5;
    byte DELETE_KEY = 6;
    byte DELETE_ACCOUNT = 7;
}
'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/AddKeyAction.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.key.PublicKey;
import com.syntifi.near.api.rpc.model.accesskey.AccessKey;
import com.syntifi.near.borshj.annotation.BorshField;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * AddKeyAction
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AddKeyAction implements Action {
    @BorshField(order = 1)
    private PublicKey publicKey;

    @BorshField(order = 2)
    private AccessKey accessKey;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/CostType.java ---
package com.syntifi.near.api.rpc.model.transaction;

/**
 * CostType
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public enum CostType {
    BASE,
    CONTRACT_LOADING_BASE,
    CONTRACT_LOADING_BYTES,
    CONTRACT_COMPILE_BASE,
    CONTRACT_COMPILE_BYTES,
    LOG_BASE,
    LOG_BYTE,
    READ_MEMORY_BASE,
    READ_MEMORY_BYTE,
    READ_REGISTER_BASE,
    READ_REGISTER_BYTE,
    STORAGE_READ_BASE,
    STORAGE_READ_KEY_BYTE,
    STORAGE_READ_VALUE_BYTE,
    STORAGE_REMOVE_BASE,
    STORAGE_REMOVE_KEY_BYTE,
    STORAGE_REMOVE_RET_VALUE_BYTE,
    STORAGE_WRITE_BASE,
    STORAGE_WRITE_EVICTED_BYTE,
    STORAGE_WRITE_KEY_BYTE,
    STORAGE_WRITE_VALUE_BYTE,
    TOUCHING_TRIE_NODE,
    UTF8_DECODING_BASE,
    UTF8_DECODING_BYTE,
    WRITE_MEMORY_BASE,
    WRITE_MEMORY_BYTE,
    WRITE_REGISTER_BASE,
    WRITE_REGISTER_BYTE
}
'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/CreateAccountAction.java ---
package com.syntifi.near.api.rpc.model.transaction;

import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * CreateAccountAction
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@Builder
public class CreateAccountAction implements Action {
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/DeleteAccountAction.java ---
package com.syntifi.near.api.rpc.model.transaction;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DeleteAccountAction
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class DeleteAccountAction implements Action {
    private String beneficiaryId;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/DeleteKeyAction.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.syntifi.near.api.common.model.key.PublicKey;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DeleteKeyAction
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class DeleteKeyAction implements Action {
    private PublicKey publicKey;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/DeployContractAction.java ---
package com.syntifi.near.api.rpc.model.transaction;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DeployContractAction
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class DeployContractAction implements Action {
    private byte[] code;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/FailureStatus.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.syntifi.near.api.rpc.model.transaction.error.TxExecutionError;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@JsonTypeName("Failure")
public class FailureStatus implements Status {

    private TxExecutionError error;
}
'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/FunctionCallAction.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.syntifi.near.borshj.annotation.BorshField;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.math.BigInteger;

/**
 * FunctionCallAction
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@JsonTypeName("FunctionCall")
public class FunctionCallAction implements Action {
    @BorshField(order = 1)
    @JsonProperty("method_name")
    private String methodName;

    @BorshField(order = 2)
    @JsonProperty("args")
    private String args;

    @BorshField(order = 3)
    @JsonProperty("gas")
    private Long gas;

    @BorshField(order = 4)
    @JsonProperty("deposit")
    private BigInteger deposit;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/GasProfile.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * GasProfile
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class GasProfile {
    @JsonProperty("cost_category")
    private String costCategory;

    @JsonProperty("cost")
    private CostType cost;

    @JsonProperty("gas_used")
    private String gasUsed;
}
'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/Metadata.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * Metadata
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Metadata {
    @JsonProperty("version")
    private long version;

    @JsonProperty("gas_profile")
    private Collection<GasProfile> gasProfile;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/Outcome.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * Outcome
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Outcome {
    @JsonProperty("logs")
    private Collection<String> logs;

    @JsonProperty("receipt_ids")
    private Collection<String> receiptIds;

    @JsonProperty("gas_burnt")
    private long gasBurnt;

    @JsonProperty("tokens_burnt")
    private String tokensBurnt;

    @JsonProperty("executor_id")
    private String executorId;

    @JsonProperty("status")
    private Status status;
    @JsonInclude(value = Include.NON_NULL)

    @JsonProperty("metadata")
    private Metadata metadata;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/Proof.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.syntifi.near.api.common.model.common.EncodedHash;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Proof
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Proof {
    public enum Direction {
        RIGHT("Right"),
        LEFT("Left");

        @Getter
        @JsonValue
        private final String name;

        Direction(String name) {
            this.name = name;
        }
    }

    @JsonProperty("hash")
    private EncodedHash hash;

    @JsonProperty("direction")
    private Direction direction;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/Receipt.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Receipt
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Receipt {
    @JsonProperty("predecessor_id")
    private String predecessorId;

    @JsonProperty("receipt_id")
    private String receiptId;

    @JsonProperty("receiver_id")
    private String receiverId;

    @JsonProperty("receipt")
    private ReceiptData receiptData;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/ReceiptAction.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * ReceiptAction
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ReceiptAction {
    @JsonProperty("actions")
    private Collection<Action> actions;

    @JsonProperty("gas_price")
    private String gasPrice;

    // TODO: find which object represents this
    @JsonProperty("input_data_ids")
    private Object[] inputDataIds;

    // TODO: find which object represents this
    @JsonProperty("output_data_receivers")
    private Object[] outputDataReceivers;

    @JsonProperty("signer_id")
    private String signerId;

    @JsonProperty("signer_public_key")
    private String signerPublicKey;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/ReceiptData.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * ReceiptData
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ReceiptData {
    @JsonProperty("Action")
    private ReceiptAction receiptAction;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/ReceiptOutcome.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * ReceiptOutcome
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ReceiptOutcome {
    @JsonProperty("proof")
    private Collection<Proof> proof;

    @JsonProperty("block_hash")
    private EncodedHash blockHash;

    @JsonProperty("id")
    private String id;

    @JsonProperty("outcome")
    private Outcome outcome;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/SignedTransaction.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.syntifi.near.api.common.model.key.Signature;
import com.syntifi.near.borshj.Borsh;
import com.syntifi.near.borshj.annotation.BorshField;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * SignedTransaction
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@EqualsAndHashCode
public class SignedTransaction implements Borsh {
    @BorshField(order = 1)
    private Transaction transaction;
    @BorshField(order = 2)
    private Signature signature;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/StakeAction.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.syntifi.near.api.common.model.key.PublicKey;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.math.BigInteger;

/**
 * StakeAction
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class StakeAction implements Action {
    private BigInteger stake;

    private PublicKey publicKey;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/Status.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

/**
 * Status
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.WRAPPER_OBJECT)
@JsonSubTypes({@JsonSubTypes.Type(value = SuccessReceiptIdStatus.class, name = "SuccessReceiptId"),
        @JsonSubTypes.Type(value = SuccessValueStatus.class, name = "SuccessValue"),
        @JsonSubTypes.Type(value = FailureStatus.class, name = "Failure")})
public interface Status {
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/SuccessReceiptIdStatus.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * SuccessReceiptIdStatus
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@JsonTypeName("SuccessReceiptId")
public class SuccessReceiptIdStatus implements Status {
    @JsonValue
    private String successReceiptId;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/SuccessValueStatus.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * SuccessValueStatus
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@JsonTypeName("SuccessValue")
public class SuccessValueStatus implements Status {
    @JsonValue
    private String successValue;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/Transaction.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import com.syntifi.near.api.common.model.key.PublicKey;
import com.syntifi.near.api.common.model.key.Signature;
import com.syntifi.near.borshj.Borsh;
import com.syntifi.near.borshj.annotation.BorshField;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * Transaction
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@EqualsAndHashCode
public class Transaction implements Borsh {
    private final static int BLOCK_HASH_LENGTH = 32;

    @BorshField(order = 1)
    @JsonProperty("signer_id")
    private String signerId;

    @BorshField(order = 2)
    @JsonProperty("public_key")
    private PublicKey publicKey;

    @BorshField(order = 3)
    @JsonProperty("nonce")
    private Long nonce;

    @BorshField(order = 4)
    @JsonProperty("receiver_id")
    private String receiverId;

    @BorshField(order = 5)
    @JsonIgnore
    private byte[] blockHash = new byte[BLOCK_HASH_LENGTH];

    @BorshField(order = 6)
    @JsonProperty("actions")
    private Collection<Action> actions;

    @JsonProperty("signature")
    private Signature signature;

    @JsonProperty("hash")
    private EncodedHash hash;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/TransactionAwait.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * TransactionAwait
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TransactionAwait {
    @JsonProperty("status")
    private Status status;

    @JsonProperty("transaction")
    private Transaction transaction;

    @JsonProperty("transaction_outcome")
    private TransactionOutcome transactionOutcome;

    @JsonProperty("receipts_outcome")
    private Collection<ReceiptOutcome> receiptsOutcome;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/TransactionOutcome.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.EncodedHash;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * TransactionOutcome
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TransactionOutcome {
    @JsonProperty("proof")
    private Collection<Proof> proof;

    @JsonProperty("block_hash")
    private EncodedHash blockHash;

    @JsonProperty("id")
    private String id;

    @JsonProperty("outcome")
    private Outcome outcome;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/TransactionStatus.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Collection;

/**
 * TransactionStatus
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TransactionStatus {
    @JsonProperty("status")
    private Status status;

    @JsonProperty("transaction")
    private Transaction transaction;

    @JsonProperty("transaction_outcome")
    private TransactionOutcome transactionOutcome;

    @JsonProperty("receipts_outcome")
    private Collection<ReceiptOutcome> receiptsOutcome;
    @JsonInclude(value = Include.NON_EMPTY)

    @JsonProperty("receipts")
    private Collection<Receipt> receipts;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/TransferAction.java ---
package com.syntifi.near.api.rpc.model.transaction;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.syntifi.near.borshj.annotation.BorshField;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.math.BigInteger;

/**
 * TransferAction
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@EqualsAndHashCode
@JsonTypeName("Transfer")
public class TransferAction implements Action {
    @BorshField(order = 1)
    @JsonProperty("deposit")
    private BigInteger deposit;

    /**
     * Json expects string, not number
     *
     * @return the deposit as string for json serialization
     */
    @JsonGetter("deposit")
    private String getJsonDeposit() {
        return deposit.toString();
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/error/ActionError.java ---
package com.syntifi.near.api.rpc.model.transaction.error;

import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.JsonNode;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@JsonTypeName("ActionError")
public class ActionError implements TxExecutionError {
    private Long index;

    private JsonNode kind;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/model/transaction/error/TxExecutionError.java ---
package com.syntifi.near.api.rpc.model.transaction.error;

import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.syntifi.near.api.rpc.model.transaction.Action;
import com.syntifi.near.api.rpc.model.transaction.SuccessReceiptIdStatus;

@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.WRAPPER_OBJECT)
@JsonSubTypes({@JsonSubTypes.Type(value = ActionError.class, name = "ActionError")})
public interface TxExecutionError {
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/AccountService.java ---
package com.syntifi.near.api.rpc.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.syntifi.crypto.key.encdec.Base58;
import com.syntifi.near.api.common.exception.NearException;
import com.syntifi.near.api.common.helper.Network;
import com.syntifi.near.api.common.model.common.EncodedHash;
import com.syntifi.near.api.common.model.key.PrivateKey;
import com.syntifi.near.api.common.model.key.PublicKey;
import com.syntifi.near.api.rpc.NearClient;
import com.syntifi.near.api.rpc.model.accesskey.AccessKey;
import com.syntifi.near.api.rpc.model.accesskey.permission.FullAccessPermission;
import com.syntifi.near.api.rpc.model.identifier.Finality;
import com.syntifi.near.api.rpc.model.transaction.Action;
import com.syntifi.near.api.rpc.model.transaction.AddKeyAction;
import com.syntifi.near.api.rpc.model.transaction.CreateAccountAction;
import com.syntifi.near.api.rpc.model.transaction.FunctionCallAction;
import com.syntifi.near.api.rpc.model.transaction.TransactionAwait;
import com.syntifi.near.api.rpc.model.transaction.TransferAction;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;

import java.math.BigInteger;
import java.security.GeneralSecurityException;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Account service provides methods to easily work with the creation of accounts
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class AccountService {

    /**
     * Sends a {@link TransferAction} transaction calling a contract to create_account
     * and waits for result using  {@link NearClient#sendTransactionAwait(String)}
     *
     * @param nearClient          the near service instance to use
     * @param mainDomain          network main domain (eg. near, testnet, ...)
     * @param newAccountId        human-readable id of new account
     * @param newAccountPublicKey public key of new account
     * @param amountToNewAccount  the amount to transfer
     * @param creatorAccountId    human-readable id of creatot account
     * @param creatorPublicKey    signer/account creator public key
     * @param creatorPrivateKey   signer/account creator privatekey
     * @return {@link TransactionAwait} object with the result
     * @throws GeneralSecurityException thrown if failed to sign the transaction
     * @throws NearException            any NEAR-RPC exception
     */
    public static TransactionAwait createNamedAccount(NearClient nearClient, String mainDomain, String newAccountId,
                                                      PublicKey newAccountPublicKey, BigInteger amountToNewAccount,
                                                      String creatorAccountId, PublicKey creatorPublicKey,
                                                      PrivateKey creatorPrivateKey)
            throws GeneralSecurityException, NearException {
        List<Action> actions = AccountService.createActionArrayToCreateNamedAccount(newAccountId, newAccountPublicKey,
                amountToNewAccount);
        return nearClient.sendTransactionAwait(BaseService.prepareTransactionForActionList(
                nearClient, creatorAccountId, mainDomain, creatorPublicKey, creatorPrivateKey,
                actions));
    }

    /**
     * Sends a {@link TransferAction} transaction calling a contract to create_account
     * and waits for result using  {@link NearClient#sendTransactionAwait(String)}
     *
     * @param network             Near network of choice
     * @param newAccountId        human-readable id of new account
     * @param newAccountPublicKey public key of new account
     * @param amountToNewAccount  the amount to transfer
     * @param creatorAccountId    human-readable id of creatot account
     * @param creatorPublicKey    signer/account creator public key
     * @param creatorPrivateKey   signer/account creator privatekey
     * @return {@link TransactionAwait} object with the result
     * @throws GeneralSecurityException thrown if failed to sign the transaction
     * @throws NearException            any NEAR-RPC exception
     */
    public static TransactionAwait createNamedAccount(Network network, String newAccountId,
                                                      PublicKey newAccountPublicKey, BigInteger amountToNewAccount,
                                                      String creatorAccountId, PublicKey creatorPublicKey,
                                                      PrivateKey creatorPrivateKey) throws GeneralSecurityException {
        NearClient nearClient = NearClient.usingNetwork(network);

        return AccountService.createNamedAccount(nearClient, network.getDomain(), newAccountId,
                newAccountPublicKey, amountToNewAccount, creatorAccountId, creatorPublicKey,
                creatorPrivateKey);
    }

    /**
     * Sends a {@link TransferAction} transaction async using {@link NearClient#sendTransactionAsync(String)}
     * with the needed actions to generate a named account and waits for result using
     * {@link NearClient#sendTransactionAwait(String)}
     *
     * @param nearClient          the near service instance to use
     * @param mainDomain          network main domain (eg. near, testnet, ...)
     * @param newAccountId        human-readable id of new account
     * @param newAccountPublicKey public key of new account
     * @param amountToNewAccount  the amount to transfer
     * @param creatorAccountId    human-readable id of creatot account
     * @param creatorPublicKey    signer/account creator public key
     * @param creatorPrivateKey   signer/account creator privatekey
     * @return transaction hash
     * @throws GeneralSecurityException thrown if failed to sign the transaction
     * @throws NearException            any NEAR-RPC exception
     */
    public static EncodedHash createNamedAccountAsync(NearClient nearClient, String mainDomain, String newAccountId,
                                                      PublicKey newAccountPublicKey, BigInteger amountToNewAccount,
                                                      String creatorAccountId, PublicKey creatorPublicKey,
                                                      PrivateKey creatorPrivateKey)
            throws GeneralSecurityException {
        List<Action> actions = AccountService.createActionArrayToCreateNamedAccount(newAccountId, newAccountPublicKey,
                amountToNewAccount);

        return EncodedHash.builder()
                .encodedHash(nearClient.sendTransactionAsync(BaseService.prepareTransactionForActionList(
                        nearClient, creatorAccountId, mainDomain, creatorPublicKey, creatorPrivateKey,
                        actions)))
                .build();
    }

    /**
     * Sends a {@link TransferAction} transaction async using {@link NearClient#sendTransactionAsync(String)}
     * with the needed actions to generate a named account and waits for result using
     * {@link NearClient#sendTransactionAwait(String)}
     *
     * @param network             Near network of choice
     * @param newAccountId        human-readable id of new account
     * @param newAccountPublicKey public key of new account
     * @param amountToNewAccount  the amount to transfer
     * @param creatorAccountId    human-readable id of creatot account
     * @param creatorPublicKey    signer/account creator public key
     * @param creatorPrivateKey   signer/account creator privatekey
     * @return transaction hash
     * @throws GeneralSecurityException thrown if failed to sign the transaction
     * @throws NearException            any NEAR-RPC exception
     */
    public static EncodedHash createNamedAccountAsync(Network network, String newAccountId,
                                                      PublicKey newAccountPublicKey, BigInteger amountToNewAccount,
                                                      String creatorAccountId, PublicKey creatorPublicKey,
                                                      PrivateKey creatorPrivateKey)
            throws GeneralSecurityException, NearException {
        NearClient nearClient = NearClient.usingNetwork(network);

        List<Action> actions = AccountService.createActionArrayToCreateNamedAccount(newAccountId, newAccountPublicKey,
                amountToNewAccount);

        return EncodedHash.builder()
                .encodedHash(nearClient.sendTransactionAsync(BaseService.prepareTransactionForActionList(
                        nearClient, creatorAccountId, network.getDomain(), creatorPublicKey, creatorPrivateKey,
                        actions)))
                .build();
    }

    /**
     * Sends a {@link TransferAction} transaction with the needed actions to generate a sub account
     * and waits for result using  {@link NearClient#sendTransactionAwait(String)}
     *
     * @param nearClient         the near service instance to use
     * @param newAccountId       human-readable id of new account
     * @param amountToNewAccount the amount to transfer
     * @param creatorAccountId   human-readable id of creatot account
     * @param creatorPublicKey   signer/account creator public key
     * @param creatorPrivateKey  signer/account creator privatekey
     * @return {@link TransactionAwait} object with the result
     * @throws GeneralSecurityException thrown if failed to sign the transaction
     */
    public static TransactionAwait createSubAccount(NearClient nearClient, String newAccountId,
                                                    BigInteger amountToNewAccount, String creatorAccountId,
                                                    PublicKey creatorPublicKey, PrivateKey creatorPrivateKey)
            throws GeneralSecurityException {
        List<Action> actions = AccountService.createActionArrayToCreateSubAccount(nearClient, amountToNewAccount,
                creatorAccountId, creatorPublicKey);

        return nearClient.sendTransactionAwait(BaseService.prepareTransactionForActionList(
                nearClient, creatorAccountId, newAccountId, creatorPublicKey, creatorPrivateKey,
                actions));
    }

    /**
     * Sends a {@link TransferAction} transaction async using {@link NearClient#sendTransactionAsync(String)}
     * with the needed actions to generate a sub account and waits for result using
     * {@link NearClient#sendTransactionAwait(String)}
     *
     * @param nearClient         the near service instance to use
     * @param newAccountId       human-readable id of new account
     * @param amountToNewAccount the amount to transfer
     * @param creatorAccountId   human-readable id of creatot account
     * @param creatorPublicKey   signer/account creator public key
     * @param creatorPrivateKey  signer/account creator privatekey
     * @return transatcion hash
     * @throws GeneralSecurityException thrown if failed to sign the transaction
     */
    public static EncodedHash createSubAccountAsync(NearClient nearClient, String newAccountId,
                                                    BigInteger amountToNewAccount, String creatorAccountId,
                                                    PublicKey creatorPublicKey, PrivateKey creatorPrivateKey) throws GeneralSecurityException {
        List<Action> actions = AccountService.createActionArrayToCreateSubAccount(nearClient, amountToNewAccount,
                creatorAccountId, creatorPublicKey);
        return EncodedHash.builder()
                .encodedHash(nearClient.sendTransactionAsync(BaseService.prepareTransactionForActionList(
                        nearClient, creatorAccountId, newAccountId, creatorPublicKey, creatorPrivateKey,
                        actions)))
                .build();
    }

    /**
     * Method to check that the human-readable account id follows the naming convention
     *
     * @param accountId human-readable account id
     * @throws NearException thows if the name deviates from the regex pattern
     */
    public static void checkAccountId(String accountId) throws NearException {
        Pattern regex = Pattern.compile("^(([a-z\\d]+[-_])*[a-z\\d]+.)*([a-z\\d]+[-_])*[a-z\\d]+$");
        Matcher matcher = regex.matcher(accountId);
        if (matcher.groupCount() == 0 || matcher.group(0).length() < 2 || accountId.length() > 64) {
            throw new NearException("accountId does not follow the standard: minimum length is 2, " +
                    "maximum length is 64, accountId consists of accountId parts separated by . ," +
                    "and accountId part consists of lowercase alphanumeric symbols separated by either _ or - ",
                    null);
        }
    }

    /**
     * Internal method to create a list of actions needed to generate a new named account
     *
     * @param newAccountId        human-readable id of new account
     * @param newAccountPublicKey public key of new account
     * @param amountToNewAccount  the amount to transfer
     * @return List of actions
     */
    private static List<Action> createActionArrayToCreateNamedAccount(String newAccountId, PublicKey newAccountPublicKey,
                                                                      BigInteger amountToNewAccount) {
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode args = mapper.createObjectNode();
        args.put("new_account_id", newAccountId);
        args.put("new_public_key", Base58.encode(newAccountPublicKey.getData()));

        return Arrays.asList(FunctionCallAction.builder()
                .methodName("create_account")
                .args(args.toString())
                .gas(30000000000000L)
                .deposit(amountToNewAccount)
                .build());
    }

    /**
     * Internal method to create a list of actions needed to generate a new subaccount
     *
     * @param nearClient         the near service instance to use
     * @param amountToNewAccount the amount to transfer
     * @param creatorAccountId   human-readable id of creatot account
     * @param creatorPublicKey   signer/account creator public key
     * @return List of actions
     */
    private static List<Action> createActionArrayToCreateSubAccount(NearClient nearClient, BigInteger amountToNewAccount,
                                                                    String creatorAccountId, PublicKey creatorPublicKey) {
        AccessKey accessKey = nearClient.viewAccessKey(Finality.FINAL, creatorAccountId, creatorPublicKey.toEncodedBase58String());
        long nonce = accessKey.getNonce();
        Action[] actionsArray = new Action[]{CreateAccountAction.builder()
                .build(),
                TransferAction.builder()
                        .deposit(amountToNewAccount)
                        .build(),
                AddKeyAction.builder()
                        .publicKey(creatorPublicKey)
                        .accessKey(AccessKey.builder()
                                .nonce(nonce)
                                .permission(FullAccessPermission.FULL_ACCESS)
                                .build())
                        .build()};
        return Arrays.asList(actionsArray);
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/BaseService.java ---
package com.syntifi.near.api.rpc.service;

import com.syntifi.crypto.key.hash.Sha256;
import com.syntifi.near.api.common.model.key.PrivateKey;
import com.syntifi.near.api.common.model.key.PublicKey;
import com.syntifi.near.api.common.model.key.Signature;
import com.syntifi.near.api.rpc.NearClient;
import com.syntifi.near.api.rpc.model.accesskey.AccessKey;
import com.syntifi.near.api.rpc.model.block.Block;
import com.syntifi.near.api.rpc.model.identifier.Finality;
import com.syntifi.near.api.rpc.model.transaction.Action;
import com.syntifi.near.api.rpc.model.transaction.SignedTransaction;
import com.syntifi.near.api.rpc.model.transaction.Transaction;
import com.syntifi.near.borshj.Borsh;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;

import java.security.GeneralSecurityException;
import java.util.Base64;
import java.util.List;

/**
 * Base service provides methods to sign transactions
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class BaseService {
    /**
     * Prepares the transaction to send with a given nonce
     *
     * @param nearClient      the near service instance to use
     * @param signerId         the signer id
     * @param receiverId       the receiver id
     * @param signerPublicKey  signer public key
     * @param signerPrivateKey signer private key
     * @param actionList       list of {@link Action} to send
     * @param nonce            nonce to add in the transaction
     * @return the base64 encoded signed transaction string
     * @throws GeneralSecurityException thrown if failed to sign the transaction
     */
    public static String prepareTransactionForActionList(NearClient nearClient, String signerId, String receiverId,
                                                         PublicKey signerPublicKey, PrivateKey signerPrivateKey,
                                                         List<Action> actionList, Long nonce)
            throws GeneralSecurityException {
        Block block = nearClient.getBlock(Finality.FINAL);

        Transaction transaction = Transaction
                .builder()
                .signerId(signerId)
                .publicKey(signerPublicKey)
                .nonce(nonce)
                .receiverId(receiverId)
                .blockHash(block.getHeader().getHash().getDecodedHash())
                .actions(actionList)
                .build();

        byte[] serializedTx = Borsh.serialize(transaction);
        byte[] hashedTx = Sha256.digest(serializedTx);
        byte[] signedTx = signerPrivateKey.getPrivateKey().sign(hashedTx);

        SignedTransaction signedTransaction =
                SignedTransaction.builder()
                        .transaction(transaction)
                        .signature(Signature.builder()
                                .keyType(signerPublicKey.getType())
                                .data(signedTx).build())
                        .build();

        byte[] borshTx = Borsh.serialize(signedTransaction);

        return Base64.getEncoder().encodeToString(borshTx);
    }

    /**
     * Prepares the transaction to send and automatically queries for the next nonce
     *
     * @param nearClient      the near service instance to use
     * @param signerId         the signer id
     * @param receiverId       the receiver id
     * @param signerPublicKey  signer public key
     * @param signerPrivateKey signer private key
     * @param actionList       list of {@link Action} to send
     * @return the base64 encoded signed transaction string
     * @throws GeneralSecurityException thrown if failed to sign the transaction
     */
    public static String prepareTransactionForActionList(NearClient nearClient, String signerId, String receiverId,
                                                         PublicKey signerPublicKey, PrivateKey signerPrivateKey,
                                                         List<Action> actionList) throws GeneralSecurityException {
       AccessKey accessKey = nearClient.viewAccessKey(Finality.FINAL, signerId, signerPublicKey.toEncodedBase58String());
       return BaseService.prepareTransactionForActionList(nearClient, signerId, receiverId,
               signerPublicKey, signerPrivateKey, actionList,accessKey.getNonce() + 1L);
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/KeyService.java ---
package com.syntifi.near.api.rpc.service;

import com.syntifi.crypto.key.Ed25519PrivateKey;
import com.syntifi.crypto.key.Ed25519PublicKey;
import com.syntifi.near.api.common.model.key.KeyType;
import com.syntifi.near.api.common.model.key.PrivateKey;
import com.syntifi.near.api.common.model.key.PublicKey;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;

import java.io.IOException;

/**
 * Key service provides methods to easily work with private and public keys
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class KeyService {

    /**
     * Returns a private key derived from a hierarchical deterministic key
     *
     * @param seed seed byte array
     * @return Private Key
     * @throws IOException from crypto-keys library
     */
    public static PrivateKey deriveFromSeed(byte[] seed) throws IOException {
        Ed25519PrivateKey pk = Ed25519PrivateKey.deriveFromSeed(seed, new int[]{44, 397, 0});
        PrivateKey privateKey = new PrivateKey();
        privateKey.setData(pk.getKey());
        privateKey.setType(KeyType.ED25519);
        return privateKey;
    }

    /**
     * Returns a private key generated using secure random
     *
     * @return private key
     */
    public static PrivateKey deriveRandomKey() {
        Ed25519PrivateKey pk = Ed25519PrivateKey.deriveRandomKey();
        PrivateKey privateKey = new PrivateKey();
        privateKey.setData(pk.getKey());
        privateKey.setType(KeyType.ED25519);
        return privateKey;
    }

    /**
     * Returns a public key generated form the private key
     *
     * @param privateKey private key
     * @return public key
     */
    public static PublicKey derivePublicKey(PrivateKey privateKey) {
        Ed25519PublicKey pk = (Ed25519PublicKey) privateKey.getPrivateKey().derivePublicKey();
        PublicKey publicKey = new PublicKey();
        publicKey.setData(pk.getKey());
        publicKey.setType(KeyType.ED25519);
        return publicKey;
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/TransferService.java ---
package com.syntifi.near.api.rpc.service;

import com.syntifi.near.api.common.model.common.EncodedHash;
import com.syntifi.near.api.common.model.key.PrivateKey;
import com.syntifi.near.api.common.model.key.PublicKey;
import com.syntifi.near.api.rpc.NearClient;
import com.syntifi.near.api.rpc.model.transaction.Action;
import com.syntifi.near.api.rpc.model.transaction.TransactionAwait;
import com.syntifi.near.api.rpc.model.transaction.TransferAction;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;

import java.math.BigInteger;
import java.security.GeneralSecurityException;
import java.util.Arrays;
import java.util.List;

/**
 * Transaction service provides methods to easily work with transactions
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class TransferService {
    /**
     * Sends a {@link TransferAction} transaction waiting for result using  {@link NearClient#sendTransactionAwait(String)}
     *
     * @param nearClient      the near service instance to use
     * @param signerId         the signer id
     * @param receiverId       the receiver id
     * @param signerPublicKey  signer public key
     * @param signerPrivateKey signer private key
     * @param amount           the amount to transfer
     * @return {@link TransactionAwait} object with the result
     * @throws GeneralSecurityException thrown if failed to sign the transaction
     */
    public static TransactionAwait sendTransferActionAwait(NearClient nearClient, String signerId, String receiverId,
                                                           PublicKey signerPublicKey, PrivateKey signerPrivateKey,
                                                           BigInteger amount)
            throws GeneralSecurityException {
        return sendTransactionAwait(nearClient, signerId, receiverId, signerPublicKey, signerPrivateKey,
                Arrays.asList(
                        TransferAction.builder()
                                .deposit(amount)
                                .build()));
    }

    /**
     * Sends a {@link TransferAction} transaction async using {@link NearClient#sendTransactionAsync(String)}
     *
     * @param nearClient      the near service instance to use
     * @param signerId         the signer id
     * @param receiverId       the receiver id
     * @param signerPublicKey  signer public key
     * @param signerPrivateKey signer private key
     * @param amount           the amount to transfer
     * @return transaction Hash
     * @throws GeneralSecurityException thrown if failed to sign the transaction
     */
    public static EncodedHash sendTransferActionAsync(NearClient nearClient, String signerId, String receiverId,
                                                      PublicKey signerPublicKey, PrivateKey signerPrivateKey,
                                                      BigInteger amount)
            throws GeneralSecurityException {
        return sendTransactionAsync(nearClient, signerId, receiverId, signerPublicKey, signerPrivateKey,
                Arrays.asList(
                        TransferAction.builder()
                                .deposit(amount)
                                .build()));
    }

    /**
     * Sends a list of {@link Action} transaction waiting for result using {@link NearClient#sendTransactionAwait(String)}
     *
     * @param nearClient      the near service instance to use
     * @param signerId         the signer id
     * @param receiverId       the receiver id
     * @param signerPublicKey  signer public key
     * @param signerPrivateKey signer private key
     * @param actionList       list of {@link Action} to send
     * @return {@link TransactionAwait} object with the result
     * @throws GeneralSecurityException thrown if failed to sign the transaction
     */
    public static TransactionAwait sendTransactionAwait(NearClient nearClient, String signerId, String receiverId,
                                                        PublicKey signerPublicKey, PrivateKey signerPrivateKey,
                                                        List<Action> actionList)
            throws GeneralSecurityException {
        return nearClient.sendTransactionAwait(BaseService.prepareTransactionForActionList(
                nearClient, signerId, receiverId, signerPublicKey, signerPrivateKey, actionList ));
    }

    /**
     * Sends a list of {@link Action} transaction waiting for result using  {@link NearClient#sendTransactionAsync(String)}
     *
     * @param nearClient      the near service instance to use
     * @param signerId         the signer id
     * @param receiverId       the receiver id
     * @param signerPublicKey  signer public key
     * @param signerPrivateKey signer private key
     * @param actionList       list of {@link Action} to send
     * @return {@link TransactionAwait} object with the result
     * @throws GeneralSecurityException thrown if failed to sign the transaction
     */
    public static EncodedHash sendTransactionAsync(NearClient nearClient, String signerId, String receiverId,
                                                   PublicKey signerPublicKey, PrivateKey signerPrivateKey,
                                                   List<Action> actionList)
            throws GeneralSecurityException {
        return EncodedHash.builder()
                .encodedHash(nearClient.sendTransactionAsync(
                        BaseService.prepareTransactionForActionList(nearClient, signerId,
                                receiverId, signerPublicKey, signerPrivateKey, actionList)))
                .build();
    }

}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/common/ContractClient.java ---
package com.syntifi.near.api.rpc.service.contract.common;

import com.syntifi.near.api.common.exception.NearException;
import com.syntifi.near.api.rpc.NearClient;
import com.syntifi.near.api.rpc.service.contract.common.annotation.ContractMethod;
import com.syntifi.near.api.rpc.service.contract.common.annotation.ContractMethodType;
import com.syntifi.near.api.rpc.service.contract.common.param.ContractMethodParams;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Proxy;

/**
 * Base creator of ContractClients
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public abstract class ContractClient {

    private static boolean isDeclaringClassAnObject(Method method) {
        return method.getDeclaringClass() == Object.class;
    }

    public static ContractMethod getAnnotation(Method method) {
        for (Annotation annotation : method.getAnnotations()) {
            if (annotation instanceof ContractMethod) {
                return (ContractMethod) annotation;
            }
        }
        throw new NearException("Contract method must have an annotation specifying the method type and name");
    }

    public static String getMethodName(Method method) {
        final ContractMethod contractMethod = getAnnotation(method);
        return contractMethod.name();
    }

    public static ContractMethodType getMethodType(Method method) {
        final ContractMethod contractMethod = getAnnotation(method);
        return contractMethod.type();
    }

    private static Object proxyObjectMethods(Method method, Object proxyObject, Object[] args) {
        String name = method.getName();
        if (name.equals("toString")) {
            return proxyObject.getClass().getName() + "@" + System.identityHashCode(proxyObject);
        }
        if (name.equals("hashCode")) {
            return System.identityHashCode(proxyObject);
        }
        if (name.equals("equals")) {
            return proxyObject == args[0];
        }
        throw new RuntimeException(method.getName() + " is not a member of java.lang.Object");
    }

    /**
     * Creates a proxy for a given interface
     *
     * @param proxyInterface the proxy interface
     * @param client         the client to use
     * @param <T>            the type of the proxy class
     * @return a proxy client instance
     */
    @SuppressWarnings("unchecked")
    public static <T> T createClientProxy(Class<T> proxyInterface, final ContractMethodProxy client) {

        return (T) Proxy.newProxyInstance(proxyInterface.getClassLoader(), new Class<?>[]{proxyInterface}, (proxy, method, args) -> {
            if (isDeclaringClassAnObject(method)) return proxyObjectMethods(method, proxy, args);

            // TODO: Improve on how to get the variables needed for the call
            final NearClient nearClient = (NearClient) args[0];
            final String countractAccountId = (String) args[1];
            final ContractMethodParams arguments = args.length > 2 ? (ContractMethodParams) args[2] : null;
            final String methodName = getMethodName(method);
            final ContractMethodType methodType = getMethodType(method);
            final Class<?> returnType = (Class<?>) ((ParameterizedType) method.getGenericReturnType()).getActualTypeArguments()[0];

            return client.invoke(nearClient, countractAccountId, methodName, methodType, arguments, returnType);

        });
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/common/ContractMethodProxy.java ---
package com.syntifi.near.api.rpc.service.contract.common;

import com.syntifi.near.api.rpc.NearClient;
import com.syntifi.near.api.rpc.service.contract.common.annotation.ContractMethodType;
import com.syntifi.near.api.rpc.service.contract.common.param.ContractMethodParams;

/**
 * The interface for contract method clients
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public interface ContractMethodProxy {
    <T> FunctionCallResult<T> invoke(NearClient nearClient, String contractAccountId, String methodName, ContractMethodType methodType,
                                     ContractMethodParams arguments, Class<T> returnClass) throws Throwable;

}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/common/ContractMethodProxyClient.java ---
package com.syntifi.near.api.rpc.service.contract.common;

import com.syntifi.near.api.common.exception.NearException;
import com.syntifi.near.api.rpc.NearClient;
import com.syntifi.near.api.rpc.service.contract.common.annotation.ContractMethodType;
import com.syntifi.near.api.rpc.service.contract.common.param.ContractMethodParams;

import java.io.IOException;

/**
 * The default contract method client for proxies
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public class ContractMethodProxyClient implements ContractMethodProxy {

    /**
     * Effectively calls the contract method with all needed data
     *
     * @param nearClient        the near rpc client
     * @param contractAccountId the contract account id
     * @param methodName        the method name to call
     * @param methodType        the type of the method
     * @param arguments         the {@link ContractMethodParams} object for the call
     * @param returnClass       the return class type object
     * @param <T>               the return type
     * @return a {@link FunctionCallResult} mapped for the given type
     * @throws IOException thrown if fails to call the method and map the response
     */
    @Override
    public <T> FunctionCallResult<T> invoke(NearClient nearClient, String contractAccountId, String methodName, ContractMethodType methodType,
                                            ContractMethodParams arguments, Class<T> returnClass) throws IOException {
        if (methodType == ContractMethodType.CALL) {
            return null;
        } else if (methodType == ContractMethodType.VIEW) {
            return ContractViewMethodCaller.call(nearClient, contractAccountId, methodName, arguments, returnClass);
        } else {
            throw new NearException("Method Type not specified");
        }
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/common/ContractViewMethodCaller.java ---
package com.syntifi.near.api.rpc.service.contract.common;

import com.syntifi.near.api.common.model.common.Base64String;
import com.syntifi.near.api.rpc.NearClient;
import com.syntifi.near.api.rpc.model.contract.ContractFunctionCallResult;
import com.syntifi.near.api.rpc.model.identifier.Finality;
import com.syntifi.near.api.rpc.service.contract.common.param.ContractMethodParams;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;

import java.io.IOException;

/**
 * Caller for contract methods
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class ContractViewMethodCaller {
    /**
     * Calls a contract for specific method
     *
     * @param methodName        the method to call
     * @param returnClass       the type of result object
     * @param nearClient        the near service to use
     * @param contractAccountId the contract account id
     * @param params            the method parameters
     * @param <T>               type of the result object
     * @return a typed FunctionCallResult for the requested contract method
     * @throws IOException thrown when fails to map json to result object
     */
    public static <T> FunctionCallResult<T> call(NearClient nearClient, String contractAccountId, String methodName,
                                                 ContractMethodParams params, Class<T> returnClass) throws IOException {
        ContractFunctionCallResult contractFunctionCallResult = FunctionCall.builder()
                .finality(Finality.OPTIMISTIC)
                .methodName(methodName)
                .accountId(contractAccountId)
                .args(params != null ? params.toJsonBase64String() : Base64String.fromDecodedString(""))
                .build()
                .call(nearClient);
        return new FunctionCallResult<>(contractFunctionCallResult, returnClass);
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/common/FunctionCall.java ---
package com.syntifi.near.api.rpc.service.contract.common;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.common.model.common.Base64String;
import com.syntifi.near.api.rpc.model.contract.ContractFunctionCallResult;
import com.syntifi.near.api.rpc.model.identifier.Finality;
import com.syntifi.near.api.rpc.NearClient;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Base contract function call object
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class FunctionCall {
    @JsonProperty("account_id")
    private String accountId;

    @JsonProperty("method_name")
    @Setter(AccessLevel.PROTECTED)
    public String methodName;

    @JsonProperty("args_base64")
    private Base64String args;

    @JsonProperty("finality")
    private Finality finality;

    public ContractFunctionCallResult call(NearClient nearClient) {
        return nearClient.callContractFunction(
                this.getFinality(),
                this.getAccountId(),
                this.getMethodName(),
                this.getArgs().getEncodedString());
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/common/FunctionCallResult.java ---
package com.syntifi.near.api.rpc.service.contract.common;

import com.syntifi.near.api.common.service.NearObjectMapper;
import com.syntifi.near.api.rpc.model.contract.ContractFunctionCallResult;
import lombok.Getter;
import lombok.Setter;

import java.io.IOException;

/**
 * A basic typed function call result
 *
 * @param <R> the result type to deserialize to
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
public class FunctionCallResult<R> {
    private ContractFunctionCallResult contractFunctionCallResult;
    private R result;

    /**
     * Creates an instance of FunctionCallResult with the type for deserializing the result data and
     * the full contract response object
     *
     * @param contractFunctionCallResult the full result object from the request
     * @param clazz                      the class of type R to load the result to
     * @throws IOException thrown if failed to map json to class
     */
    public FunctionCallResult(ContractFunctionCallResult contractFunctionCallResult, Class<R> clazz) throws IOException {
        this.contractFunctionCallResult = contractFunctionCallResult;
        if (contractFunctionCallResult.getResult() != null) {
            result = NearObjectMapper.INSTANCE.readValue(contractFunctionCallResult.getResult(), clazz);
        }
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/common/annotation/ContractMethod.java ---
package com.syntifi.near.api.rpc.service.contract.common.annotation;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Contract function metadata containing function type and name
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.METHOD, ElementType.FIELD})
public @interface ContractMethod {
    ContractMethodType type();
    String name();
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/common/annotation/ContractMethodType.java ---
package com.syntifi.near.api.rpc.service.contract.common.annotation;

/**
 * The type of the contract method
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public enum ContractMethodType {
    VIEW, CALL
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/common/param/AccountIdParam.java ---
package com.syntifi.near.api.rpc.service.contract.common.param;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

/**
 * The account id param for contracts
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@Builder
@AllArgsConstructor
public class AccountIdParam implements ContractMethodParams {
    @JsonProperty("account_id")
    private String accountId;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/common/param/ContractMethodParams.java ---
package com.syntifi.near.api.rpc.service.contract.common.param;

/**
 * Signature for contract method parameters
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public interface ContractMethodParams extends ConvertibleToBase64String {
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/common/param/ConvertibleToBase64String.java ---
package com.syntifi.near.api.rpc.service.contract.common.param;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.syntifi.near.api.common.model.common.Base64String;
import com.syntifi.near.api.common.service.NearObjectMapper;

/**
 * Adds support to convert the object to a Json as Base64String object
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public interface ConvertibleToBase64String {
    /**
     * Creates a Base64String with the Json string of the object
     *
     * @return the Base64String
     * @throws JsonProcessingException thrown if it can't parse the object to Json
     */
    default Base64String toJsonBase64String() throws JsonProcessingException {
        return Base64String.fromDecodedString(NearObjectMapper.INSTANCE.writeValueAsString(this));
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/ft/FTService.java ---
package com.syntifi.near.api.rpc.service.contract.ft;

import com.fasterxml.jackson.databind.JsonNode;
import com.syntifi.near.api.common.helper.Formats;
import com.syntifi.near.api.rpc.NearClient;
import com.syntifi.near.api.rpc.service.contract.common.FunctionCallResult;
import com.syntifi.near.api.rpc.service.contract.common.annotation.ContractMethod;
import com.syntifi.near.api.rpc.service.contract.common.annotation.ContractMethodType;
import com.syntifi.near.api.rpc.service.contract.common.param.AccountIdParam;
import com.syntifi.near.api.rpc.service.contract.ft.param.FTTransferParam;

/**
 * Contract function call object for FTs (Tokens)
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public interface FTService {

    // NFT Constants
    // FT_MINIMUM_STORAGE_BALANCE: nUSDC, nUSDT require minimum 0.0125 NEAR. Came to this conclusion using trial and error.
    String FT_MINIMUM_STORAGE_BALANCE_LARGE = Formats.parseNearAmount("0.0125");
    // account creation costs 0.00125 NEAR for storage, 0.00000000003 NEAR for gas
    // https://docs.near.org/docs/api/naj-cookbook#wrap-and-unwrap-near
    String FT_MINIMUM_STORAGE_BALANCE = Formats.parseNearAmount("0.00125");
    String FT_STORAGE_DEPOSIT_GAS = Formats.parseNearAmount("0.00000000003");
    // set this to the same value as we use for creating an account and the remainder is refunded
    String FT_TRANSFER_GAS = Formats.parseNearAmount("0.00000000003");
    // contract might require an attached deposit of of at least 1 yoctoNear on transfer methods
    // "This 1 yoctoNEAR is not enforced by this standard, but is encouraged to do. While ability to receive attached deposit is enforced by this token."
    // from: https://github.com/near/NEPs/issues/141
    int FT_TRANSFER_DEPOSIT = 1;

    /**
     * @param nearClient        near rpc client to use
     * @param contractAccountId the contract's account id
     * @return a {@link FunctionCallResult} for the call
     */
    @ContractMethod(type = ContractMethodType.VIEW, name = "ft_metadata")
    FunctionCallResult<JsonNode> getMetadata(NearClient nearClient, String contractAccountId);

    /**
     * @param nearClient        near rpc client to use
     * @param contractAccountId the contract's account id
     * @param accountIdParam    a {@link FunctionCallResult} for the call
     * @return a {@link FunctionCallResult} for the call
     */
    @ContractMethod(type = ContractMethodType.VIEW, name = "ft_balance_of")
    FunctionCallResult<JsonNode> getBalanceOf(NearClient nearClient, String contractAccountId, AccountIdParam accountIdParam);

    /**
     * @param nearClient        near rpc client to use
     * @param contractAccountId the contract's account id
     * @param ftTransferParam   parameter object for method call
     * @return a {@link FunctionCallResult} for the call
     */
    @ContractMethod(type = ContractMethodType.VIEW, name = "ft_transfer_call")
    FunctionCallResult<JsonNode> transferCall(NearClient nearClient, String contractAccountId, FTTransferParam ftTransferParam);
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/ft/param/FTTransferParam.java ---
package com.syntifi.near.api.rpc.service.contract.ft.param;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.rpc.service.contract.common.param.ContractMethodParams;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

import java.math.BigInteger;

/**
 * The param for FT transfers
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@AllArgsConstructor
public class FTTransferParam implements ContractMethodParams {
    @JsonProperty("receiver_id")
    private String receiverId;
    @JsonProperty("amount")
    private BigInteger amount;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/nft/NFTService.java ---
package com.syntifi.near.api.rpc.service.contract.nft;

import com.fasterxml.jackson.databind.JsonNode;
import com.syntifi.near.api.rpc.NearClient;
import com.syntifi.near.api.rpc.service.contract.common.FunctionCallResult;
import com.syntifi.near.api.rpc.service.contract.common.annotation.ContractMethod;
import com.syntifi.near.api.rpc.service.contract.common.annotation.ContractMethodType;
import com.syntifi.near.api.rpc.service.contract.common.param.AccountIdParam;
import com.syntifi.near.api.rpc.service.contract.nft.model.NFTContractMetadata;
import com.syntifi.near.api.rpc.service.contract.nft.model.NFTTokenList;
import com.syntifi.near.api.rpc.service.contract.nft.param.NFTTokensForOwnerParam;
import com.syntifi.near.api.rpc.service.contract.nft.param.NFTTokensParam;

/**
 * Contract function call object for NFTs
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public interface NFTService {

    /**
     * Gets NFT metadata
     *
     * @param nearClient        near rpc client to use
     * @param contractAccountId the contract's account id
     * @return a {@link FunctionCallResult} for the call
     */
    @ContractMethod(type = ContractMethodType.VIEW, name = "nft_metadata")
    FunctionCallResult<NFTContractMetadata> getMetadata(NearClient nearClient, String contractAccountId);

    /**
     * Gets tokens for the given owner
     *
     * @param nearClient             near rpc client to use
     * @param contractAccountId      the contract's account id
     * @param nftTokensForOwnerParam parameter object for method call
     * @return a {@link FunctionCallResult} for the call
     */
    @ContractMethod(type = ContractMethodType.VIEW, name = "nft_tokens_for_owner")
    FunctionCallResult<NFTTokenList> getTokensForOwner(NearClient nearClient, String contractAccountId, NFTTokensForOwnerParam nftTokensForOwnerParam);

    /**
     * Get tokens for given parameters
     *
     * @param nearClient        near rpc client to use
     * @param contractAccountId the contract's account id
     * @param nftTokensParam    parameter object for method call
     * @return a {@link FunctionCallResult} for the call
     */
    @ContractMethod(type = ContractMethodType.VIEW, name = "nft_tokens")
    FunctionCallResult<JsonNode> getTokens(NearClient nearClient, String contractAccountId, NFTTokensParam nftTokensParam);

    /**
     * Get total supply of NFT for given contract
     *
     * @param nearClient        near rpc client to use
     * @param contractAccountId the contract's account id
     * @return a {@link FunctionCallResult} for the call
     */
    @ContractMethod(type = ContractMethodType.VIEW, name = "nft_total_supply")
    FunctionCallResult<String> getTotalSupply(NearClient nearClient, String contractAccountId);

    /**
     * Gets the supply of an NFT for an owner
     *
     * @param nearClient        near rpc client to use
     * @param contractAccountId the contract's account id
     * @param accountIdParam    parameter object for method call
     * @return a {@link FunctionCallResult} for the call
     */
    @ContractMethod(type = ContractMethodType.VIEW, name = "nft_supply_for_owner")
    FunctionCallResult<String> getSupplyForOwner(NearClient nearClient, String contractAccountId, AccountIdParam accountIdParam);
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/nft/model/NFTContract.java ---
package com.syntifi.near.api.rpc.service.contract.nft.model;

import com.syntifi.near.api.rpc.service.contract.common.FunctionCallResult;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Model for NFT Contract data
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@NoArgsConstructor
public class NFTContract {
    private String contractId;
    private FunctionCallResult<NFTContractMetadata> metadata;

    public NFTContract(String contractId) {
        this.contractId = contractId;
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/nft/model/NFTContractMetadata.java ---
package com.syntifi.near.api.rpc.service.contract.nft.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

/**
 * NFT Metadata holder for contract calls
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@ToString
public class NFTContractMetadata {
    private String spec;
    private String name;
    private String symbol;
    private String icon;
    @JsonProperty("base_uri")
    private String baseUri;
    private Object reference;
    @JsonProperty("reference_hash")
    private Object referenceHash;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/nft/model/NFTToken.java ---
package com.syntifi.near.api.rpc.service.contract.nft.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.JsonNode;
import com.syntifi.near.api.common.helper.Strings;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;

/**
 * NFT Token data
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@ToString
@JsonIgnoreProperties(value = {"approved_account_ids"})
public class NFTToken {

    private static final String DEFAULT_MEDIA_URL = "https://cloudflare-ipfs.com/ipfs/%s";

    @JsonProperty("token_id")
    private String tokenId;
    @JsonProperty("owner_id")
    private String ownerId;
    @JsonProperty("royalty")
    private JsonNode royalty;
    @JsonProperty("split_owners")
    private JsonNode splitOwners;
    @JsonProperty("minter")
    private String minter;
    @JsonProperty("loan")
    private JsonNode loan;
    @JsonProperty("composeable_stats")
    private JsonNode composeableStats;
    @JsonProperty("origin_key")
    private JsonNode originKey;

    private NFTTokenMetadata metadata;

    @JsonIgnore
    public String getMediaUrl(NFTContract contract) throws URISyntaxException, MalformedURLException {
        URI uri;
        if (metadata.getMedia() == null) {
            uri = null; // no url if no media
        } else if (Strings.isURL(metadata.getMedia()) || metadata.getMedia().startsWith("data:image")) {
            uri = new URI(metadata.getMedia());
        } else if (contract.getMetadata().getResult().getBaseUri() != null) {
            uri = new URI(contract.getMetadata().getResult().getBaseUri() + "/" + metadata.getMedia());
        } else {
            uri = new URI(String.format(DEFAULT_MEDIA_URL, metadata.getMedia()));
        }

        return uri == null ? null : uri.normalize().toURL().toString();
    }
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/nft/model/NFTTokenList.java ---
package com.syntifi.near.api.rpc.service.contract.nft.model;

import java.util.ArrayList;

/**
 * ArrayList for easier loading/mapping of NFT tokens
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public class NFTTokenList extends ArrayList<NFTToken> {
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/nft/model/NFTTokenMetadata.java ---
package com.syntifi.near.api.rpc.service.contract.nft.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

/**
 * Model for holding NFT token metadata
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@ToString
public class NFTTokenMetadata {
    private String title;
    private String description;
    private String media;
    @JsonProperty("media_hash")
    private String mediaHash;
    private long copies;
    @JsonProperty("issued_at")
    private String issuedAt;
    @JsonProperty("expires_at")
    private String expiresAt;
    @JsonProperty("starts_at")
    private String startsAt;
    @JsonProperty("updated_at")
    private String updatedAt;
    private String extra;
    private String reference;
    @JsonProperty("reference_hash")
    private String referenceHash;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/nft/param/NFTTokensForOwnerParam.java ---
package com.syntifi.near.api.rpc.service.contract.nft.param;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.rpc.service.contract.common.param.ContractMethodParams;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

/**
 * Parameter class to pass to some NFT contract calls
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@Builder
@AllArgsConstructor
public class NFTTokensForOwnerParam implements ContractMethodParams {
    @JsonProperty("account_id")
    private String accountId;
    @JsonProperty("from_index")
    private String fromIndex;
    private Integer limit;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/nft/param/NFTTokensParam.java ---
package com.syntifi.near.api.rpc.service.contract.nft.param;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.syntifi.near.api.rpc.service.contract.common.param.ContractMethodParams;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

/**
 * Parameter class to pass to some NFT contract calls
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
@Getter
@Setter
@Builder
@AllArgsConstructor
public class NFTTokensParam implements ContractMethodParams {
    @JsonProperty("from_index")
    private String fromIndex;
    private Integer limit;
}

'''
'''--- near-java-api-rpc/src/main/java/com/syntifi/near/api/rpc/service/contract/staking/StakingService.java ---
package com.syntifi.near.api.rpc.service.contract.staking;

import com.syntifi.near.api.rpc.NearClient;
import com.syntifi.near.api.rpc.service.contract.common.annotation.ContractMethod;
import com.syntifi.near.api.rpc.service.contract.common.annotation.ContractMethodType;
import com.syntifi.near.api.rpc.service.contract.common.FunctionCallResult;
import com.syntifi.near.api.rpc.service.contract.common.param.AccountIdParam;

import java.math.BigInteger;

/**
 * Contract function call object for Staking
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.2.0
 */
public interface StakingService {

    /**
     * Builds a contract function call and returns a typed result
     *
     * @param nearClient       the near service instance to use for the contract call
     * @param contractAccountId the contract's account id
     * @param accountIdParam    the arguments for the target method
     * @return a typed function call result
     */
    @ContractMethod(type = ContractMethodType.VIEW, name="get_account_total_balance")
    FunctionCallResult<BigInteger> getAccountTotalBalance(NearClient nearClient, String contractAccountId, AccountIdParam accountIdParam);

    @ContractMethod(type = ContractMethodType.VIEW, name="get_account_staked_balance")
    FunctionCallResult<BigInteger> getAccountStakedBalance(NearClient nearClient, String contractAccountId, AccountIdParam accountIdParam);

    @ContractMethod(type = ContractMethodType.VIEW, name="get_account_unstaked_balance")
    FunctionCallResult<BigInteger> getAccountUnstakedBalance(NearClient nearClient, String contractAccountId, AccountIdParam accountIdParam);

    @ContractMethod(type = ContractMethodType.VIEW, name="is_account_unstaked_balance_available")
    FunctionCallResult<BigInteger> isAccountUnstakedBalanceAvailable(NearClient nearClient, String contractAccountId, AccountIdParam accountIdParam);

    @ContractMethod(type = ContractMethodType.VIEW, name="get_total_staked_balance")
    FunctionCallResult<BigInteger> getTotalStakedBalance(NearClient nearClient, String contractAccountId, AccountIdParam accountIdParam);

    @ContractMethod(type = ContractMethodType.VIEW, name="get_owner_id")
    FunctionCallResult<BigInteger> getOwnerId(NearClient nearClient, String contractAccountId, AccountIdParam accountIdParam);

    @ContractMethod(type = ContractMethodType.VIEW, name="get_reward_fee_action")
    FunctionCallResult<BigInteger> getRewardFeeAction(NearClient nearClient, String contractAccountId, AccountIdParam accountIdParam);

    @ContractMethod(type = ContractMethodType.VIEW, name="get_farms")
    FunctionCallResult<BigInteger> getFarms(NearClient nearClient, String contractAccountId, AccountIdParam accountIdParam);

    @ContractMethod(type = ContractMethodType.VIEW, name="get_farm")
    FunctionCallResult<BigInteger> getFarm(NearClient nearClient, String contractAccountId, AccountIdParam accountIdParam);

    @ContractMethod(type = ContractMethodType.VIEW, name="get_active_farms")
    FunctionCallResult<BigInteger> getActiveFarms(NearClient nearClient, String contractAccountId, AccountIdParam accountIdParam);

    @ContractMethod(type = ContractMethodType.VIEW, name="get_unclaimed_reward")
    FunctionCallResult<BigInteger> getUnclaimedReward(NearClient nearClient, String contractAccountId, AccountIdParam accountIdParam);

    @ContractMethod(type = ContractMethodType.VIEW, name="get_pool_summary")
    FunctionCallResult<BigInteger> getPoolSummary(NearClient nearClient, String contractAccountId, AccountIdParam accountIdParam);

    /*
     * Sends a {@link TransferAction} function call to stake a certain amount to the given staking
     * pool and keeps waiting for result using {@link NearClient#sendTransactionAwait(String)}
     *
     * @param nearClient        the near service instance to use
     * @param stakingPool       string Id of the pool to stake
     * @param stakingAmount     the amount to stake
     * @param accountId         the signer accountId
     * @param accountPublicKey   signer public key
     * @param accountPrivateKey signer private key
     * @return {@link TransactionAwait} object with the result
     * @throws GeneralSecurityException thrown if failed to sign the transaction
     */
    /*public static TransactionAwait depositAndStakeTokens(NearClient nearClient, String stakingPool,
                                                         BigInteger stakingAmount, String accountId,
                                                         PublicKey accountPubliKey, PrivateKey accountPrivateKey)
            throws GeneralSecurityException {
        List<Action> actions = StakingServiceOld.createActionArrayToStakeWithStakingPool(stakingAmount);
        return nearClient.sendTransactionAwait(BaseService.prepareTransactionForActionList(
                nearClient, accountId, stakingPool, accountPubliKey, accountPrivateKey,
                actions));
    }

    /**
     * Contract change method definitions
      */
//    public static class StakingMethodCaller {
//        @Getter
//        @AllArgsConstructor
//        public enum ChangeMethodClass implements ContractMethodClass {
//            PING("ping"),
//            DEPOSIT("deposit"),
//            DEPOSIT_AND_STAKE("deposit_and_stake"),
//            DEPOSIT_TO_STAKING_POOL("deposit_to_staking_pool"),
//            STAKE("stake"),
//            STAKE_ALL("stake_all"),
//            UNSTAKE("unstake"),
//            WITHDRAW("withdraw"),
//            CLAIM("claim");
//
//            private final String methodName;
//        }
//    }
//
//    public static class LockupMethods {
//        @Getter
//        @AllArgsConstructor
//        public enum ViewMethodClass implements ContractMethodClass {
//            GET_BALANCE("get_balance"),
//            GET_LOCKED_AMOUNT("get_locked_amount"),
//            GET_OWNERS_BALANCE("get_owners_balance"),
//            GET_STAKING_POOL_ACCOUNT_ID("get_staking_pool_account_id"),
//            GET_KNOWN_DEPOSITED_BALANCE("get_known_deposited_balance");
//
//            private final String methodName;
//        }
//    }
}

'''
'''--- near-java-api-rpc/src/test/java/com/syntifi/near/api/rpc/NearClientArchivalNetHelper.java ---
package com.syntifi.near.api.rpc;

import com.syntifi.near.api.common.exception.NearException;
import com.syntifi.near.api.common.helper.Network;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NearClientArchivalNetHelper {

    private static final Logger LOGGER = LoggerFactory.getLogger(NearClientArchivalNetHelper.class);

    public static NearClient nearClient = null;

    public static Network network = Network.ARCHIVAL_TEST_NET;

    static {
        LOGGER.debug("======== Running tests with peer {} ========", network.getRpcUrl());
        try {
            nearClient = NearClient.usingNetwork(network);
        } catch (NearException e) {
            LOGGER.error("Invalid URL {}", network.getRpcUrl());
            e.printStackTrace();
        }
    }
}

'''
'''--- near-java-api-rpc/src/test/java/com/syntifi/near/api/rpc/NearClientTest.java ---
package com.syntifi.near.api.rpc;

import com.fasterxml.jackson.databind.node.ObjectNode;
import com.syntifi.near.api.common.exception.NearException;
import com.syntifi.near.api.common.exception.NoSuchTypeException;
import com.syntifi.near.api.common.model.key.PublicKey;
import com.syntifi.near.api.rpc.jsonrpc4j.exception.NearExceptionResolver;
import com.syntifi.near.api.rpc.model.accesskey.AccessKey;
import com.syntifi.near.api.rpc.model.accesskey.AccessKeyChanges;
import com.syntifi.near.api.rpc.model.accesskey.AccessKeyList;
import com.syntifi.near.api.rpc.model.accesskey.Key;
import com.syntifi.near.api.rpc.model.account.Account;
import com.syntifi.near.api.rpc.model.account.AccountChanges;
import com.syntifi.near.api.rpc.model.block.Block;
import com.syntifi.near.api.rpc.model.block.BlockChanges;
import com.syntifi.near.api.rpc.model.block.Chunk;
import com.syntifi.near.api.rpc.model.contract.ContractCode;
import com.syntifi.near.api.rpc.model.contract.ContractCodeChanges;
import com.syntifi.near.api.rpc.model.contract.ContractFunctionCallResult;
import com.syntifi.near.api.rpc.model.contract.ContractState;
import com.syntifi.near.api.rpc.model.contract.ContractStateChanges;
import com.syntifi.near.api.rpc.model.gas.GasPrice;
import com.syntifi.near.api.rpc.model.identifier.Finality;
import com.syntifi.near.api.rpc.model.network.NetworkInfo;
import com.syntifi.near.api.rpc.model.network.NodeStatus;
import com.syntifi.near.api.rpc.model.network.ValidationStatus;
import com.syntifi.near.api.rpc.model.protocol.GenesisConfig;
import com.syntifi.near.api.rpc.model.protocol.ProtocolConfig;
import com.syntifi.near.api.rpc.model.transaction.Receipt;
import com.syntifi.near.api.rpc.model.transaction.TransactionAwait;
import com.syntifi.near.api.rpc.model.transaction.TransactionStatus;
import org.json.JSONException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.skyscreamer.jsonassert.JSONAssert;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.Map;

import static com.syntifi.near.api.common.json.JsonHelper.OBJECT_MAPPER;
import static com.syntifi.near.api.common.json.JsonHelper.getPrettyJson;
import static com.syntifi.near.api.common.json.JsonHelper.loadJsonFromResourceFile;
import static com.syntifi.near.api.rpc.NearClientArchivalNetHelper.nearClient;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertInstanceOf;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

/**
 * Basic Service call testing
 *
 * @author Alexandre Carvalho
 * @author Andre Bertolace
 * @since 0.0.1
 */
public class NearClientTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(NearClientTest.class);

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/block-chunk#block-details
    @Test
    void loadedFromExample_block() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/block-chunk/example/block-details.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, Block.class));

        Block block = OBJECT_MAPPER.readValue(inputJson, Block.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(block), false);
    }

    @Test
    void getBlock_byFinality_block_notNull() {
        Block block = nearClient.getBlock(Finality.FINAL);

        assertNotNull(block);
    }

    @Test
    void getBlock_byHash_block_notNull() throws JSONException, IOException {
        Block block = nearClient.getBlock("FXTWzPjqWztjHfneqJb9cBDB2QLTY1Rja4GHrswAv1b9");

        assertNotNull(block);

        String inputJson = loadJsonFromResourceFile("json-test-samples/block-chunk/block-details-by-hash.json");

        JSONAssert.assertEquals(getPrettyJson(block), inputJson, false);
    }

    @Test
    void getBlock_byHash_block_notNull_with_validator_proposals() {
        Block block = nearClient.getBlock("BCEqCXnKijpvQfTMJDn6Bh2We1v1sAZoihApTnJsd32B");

        assertNotNull(block);

        assertEquals(block.getHeader().getValidatorProposals()[0].getValidatorStakeStructVersion(), "V1");
        assertEquals(block.getHeader().getValidatorProposals()[0].getAccountId(), "pontiff.pool.f863973.m0");
        assertEquals(block.getHeader().getValidatorProposals()[0].getPublicKey(),
                PublicKey.fromEncodedBase58String("ed25519:4i8j7nwNyy18hfARtrVpckT8MiicdCXuWBX1TubdMb5Y", PublicKey.class));
        assertEquals(block.getHeader().getValidatorProposals()[0].getStake(), "478888363238890192732941173068");
    }

    @Test
    void getBlock_byHeight_block_notNull() throws JSONException, IOException {
        Block block = nearClient.getBlock(78770817);

        assertNotNull(block);

        String inputJson = loadJsonFromResourceFile("json-test-samples/block-chunk/block-details-by-height.json");

        JSONAssert.assertEquals(getPrettyJson(block), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/block-chunk#changes-in-block
    @Test
    void loadedFromExample_blockChanges() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/block-chunk/example/changes-in-block.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, BlockChanges.class));

        BlockChanges blockChanges = OBJECT_MAPPER.readValue(inputJson, BlockChanges.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(blockChanges), false);
    }

    @Test
    void getBlockChanges_byFinality_blockChanges_notNull() {
        BlockChanges blockChanges = nearClient.getBlockChanges(Finality.FINAL);

        assertNotNull(blockChanges);
    }

    @Test
    void getBlockChanges_byHash_blockChanges_notNull() throws JSONException, IOException {
        BlockChanges blockChanges = nearClient.getBlockChanges("BmEZnrmov6h6rMPpWkMV2JtU1C5LP563V5Y5yXwUW2N5");

        assertNotNull(blockChanges);

        String inputJson = loadJsonFromResourceFile("json-test-samples/block-chunk/changes-in-block-by-hash.json");

        JSONAssert.assertEquals(getPrettyJson(blockChanges), inputJson, false);
    }

    @Test
    void getBlockChanges_byHeight_blockChanges_notNull() throws JSONException, IOException {
        BlockChanges blockChanges = nearClient.getBlockChanges(78770674);

        assertNotNull(blockChanges);

        String inputJson = loadJsonFromResourceFile("json-test-samples/block-chunk/changes-in-block-by-height.json");

        JSONAssert.assertEquals(getPrettyJson(blockChanges), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/block-chunk#chunk-details
    @Test
    void loadedFromExample_chunk() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/block-chunk/example/chunk-details.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, Chunk.class));

        Chunk chunk = OBJECT_MAPPER.readValue(inputJson, Chunk.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(chunk), false);
    }

    @Test
    void getChunkDetails_byChunkId_chunk_notNull() throws JSONException, IOException {
        Chunk chunk = nearClient.getChunkDetails("9mdG2cRcV8Dsb1EoSjtya81NddjRB2stYCTVukZh7zzw");

        assertNotNull(chunk);

        String inputJson = loadJsonFromResourceFile("json-test-samples/block-chunk/chunk-details.json");

        JSONAssert.assertEquals(getPrettyJson(chunk), inputJson, false);
    }

    @Test
    void getChunkDetails_byBlockHashAndShardId_chunk_notNull() throws JSONException, IOException {
        Chunk chunk = nearClient.getChunkDetails("F1HXTzeYgYq28rgsHuKUrRbo5QTBGKFYG7rbxXkRZWXN", 0);

        assertNotNull(chunk);

        String inputJson = loadJsonFromResourceFile("json-test-samples/block-chunk/chunk-details.json");

        JSONAssert.assertEquals(getPrettyJson(chunk), inputJson, false);
    }

    @Test
    void getChunkDetails_byBlockHeightAndShardId_chunk_notNull() throws JSONException, IOException {
        Chunk chunk = nearClient.getChunkDetails(78567387, 0);

        assertNotNull(chunk);

        String inputJson = loadJsonFromResourceFile("json-test-samples/block-chunk/chunk-details.json");

        JSONAssert.assertEquals(getPrettyJson(chunk), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/network#network-info
    @Test
    void loadedFromExample_networkInfo() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/network/example/network-info.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, NetworkInfo.class));

        NetworkInfo networkInfo = OBJECT_MAPPER.readValue(inputJson, NetworkInfo.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(networkInfo), false);
    }

    @Test
    void getNetworkInfo_networkInfo_notNull() {
        NetworkInfo networkInfo = nearClient.getNetworkInfo();

        assertNotNull(networkInfo);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/network#node-status
    @Test
    void loadedFromExample_nodeStatus() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/network/example/node-status.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, NodeStatus.class));

        NodeStatus nodeStatus = OBJECT_MAPPER.readValue(inputJson, NodeStatus.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(nodeStatus), false);
    }

    @Test
    void getNodeStatus_nodeStatus_notNull() {
        NodeStatus nodeStatus = nearClient.getNodeStatus();

        assertNotNull(nodeStatus);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/network#validation-status
    @Test
    void loadedFromExample_validationStatus() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/network/example/validation-status.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, ValidationStatus.class));

        ValidationStatus validationStatus = OBJECT_MAPPER.readValue(inputJson, ValidationStatus.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(validationStatus), false);
    }

    @Test
    void getNetworkValidationStatus_byNull_validationStatus_notNull() {
        ValidationStatus networkValidationStatus = nearClient.getNetworkValidationStatus(null);

        assertNotNull(networkValidationStatus);
    }

    // TODO: enable this test when working test data is available
    @Disabled("No validators found! (https://docs.near.org/docs/api/rpc/network#validation-status)")
    @Test
    void getNetworkValidationStatus_byBlockHash_validationStatus_notNull() {
        Block lastBlock = nearClient.getBlock(Finality.FINAL);

        ValidationStatus networkValidationStatus = nearClient
                .getNetworkValidationStatus(lastBlock.getHeader().getHash().getEncodedHash());

        assertNotNull(networkValidationStatus);
    }

    // TODO: enable this test when working test data is available
    @Disabled("No validators found! (https://docs.near.org/docs/api/rpc/network#validation-status)")
    @Test
    void getNetworkValidationStatus_byBlockNumber_validationStatus_notNull() {
        Block lastBlock = nearClient.getBlock(Finality.OPTIMISTIC);

        ValidationStatus networkValidationStatus = nearClient
                .getNetworkValidationStatus(lastBlock.getHeader().getHeight());

        assertNotNull(networkValidationStatus);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/gas#gas-price
    @Test
    void loadedFromExample_gasPrice() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/gas/example/gas-price.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, GasPrice.class));

        GasPrice gasPrice = OBJECT_MAPPER.readValue(inputJson, GasPrice.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(gasPrice), false);
    }

    @Test
    void getGasPrice_byNull_gasPrice_notNull() throws IOException, JSONException {
        GasPrice gasPrice = nearClient.getGasPrice(null);

        assertNotNull(gasPrice);

        String inputJson = loadJsonFromResourceFile("json-test-samples/gas/gas-price-by-null.json");

        JSONAssert.assertEquals(getPrettyJson(gasPrice), inputJson, false);
    }

    @Test
    void getGasPrice_byBlockHash_gasPrice_notNull() throws JSONException, IOException {
        GasPrice gasPrice = nearClient.getGasPrice("FXTWzPjqWztjHfneqJb9cBDB2QLTY1Rja4GHrswAv1b9");

        assertNotNull(gasPrice);

        String inputJson = loadJsonFromResourceFile("json-test-samples/gas/gas-price-by-block-hash.json");

        JSONAssert.assertEquals(getPrettyJson(gasPrice), inputJson, false);
    }

    @Test
    void getGasPrice_byBlockNumber_gasPrice_notNull() throws IOException, JSONException {
        GasPrice gasPrice = nearClient.getGasPrice(78770817);

        assertNotNull(gasPrice);

        String inputJson = loadJsonFromResourceFile("json-test-samples/gas/gas-price-by-block-height.json");

        JSONAssert.assertEquals(getPrettyJson(gasPrice), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/protocol#genesis-config
    @Test
    void loadedFromExample_genesisConfig() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/protocol/example/genesis-config.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, GenesisConfig.class));

        GenesisConfig genesisConfig = OBJECT_MAPPER.readValue(inputJson, GenesisConfig.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(genesisConfig), false);
    }

    @Test
    void getGenesisConfig_genesisConfig_notNull() throws JSONException, IOException {
        GenesisConfig genesisConfig = nearClient.getGenesisConfig();

        assertNotNull(genesisConfig);

        String inputJson = loadJsonFromResourceFile("json-test-samples/protocol/genesis-config.json");

        JSONAssert.assertEquals(getPrettyJson(genesisConfig), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/protocol#protocol-config
    @Test
    void loadedFromExample_protocolConfig() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/protocol/example/protocol-config.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, ProtocolConfig.class));

        ProtocolConfig protocolConfig = OBJECT_MAPPER.readValue(inputJson, ProtocolConfig.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(protocolConfig), false);
    }

    @Test
    void getProtocolConfig_byFinality_protocolConfig_notNull() {
        ProtocolConfig protocolConfig = nearClient.getProtocolConfig(Finality.FINAL);

        assertNotNull(protocolConfig);
    }

    @Test
    void getProtocolConfig_byHash_protocolConfig_notNullProtocolVersion() {
        ProtocolConfig protocolConfig = nearClient.getProtocolConfig("FXTWzPjqWztjHfneqJb9cBDB2QLTY1Rja4GHrswAv1b9");

        assertNotNull(protocolConfig);
    }

    @Test
    void getProtocolConfig_byHeight_protocolConfig_notNullProtocolVersion() {
        ProtocolConfig protocolConfig = nearClient.getProtocolConfig(78770817);

        assertNotNull(protocolConfig);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/transactions#send-transaction-async
    @Test
    void loadedFromExample_transactionAsync() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/transaction/example/send-transaction-async.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, Map.class));

        @SuppressWarnings("unchecked")
        Map<String, String> transactionAsync = OBJECT_MAPPER.readValue(inputJson, Map.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(transactionAsync), false);
    }

    @Test
    void sendTransactionAsync_transactionHash_notNull() {
        String signedTransaction = "DgAAAHNlbmRlci50ZXN0bmV0AOrmAai64SZOv9e/naX4W15pJx0GAap35wTT1T/DwcbbDwAAAAAAAAAQAAAAcmVjZWl2ZXIudGVzdG5ldNMnL7URB1cxPOu3G8jTqlEwlcasagIbKlAJlF5ywVFLAQAAAAMAAACh7czOG8LTAAAAAAAAAGQcOG03xVSFQFjoagOb4NBBqWhERnnz45LY4+52JgZhm1iQKz7qAdPByrGFDQhQ2Mfga8RlbysuQ8D8LlA6bQE=";
        String expectedTransactionHash = "6zgh2u9DqHHiXzdy9ouTP7oGky2T4nugqzqt9wJZwNFm";

        String transactionHash = nearClient.sendTransactionAsync(signedTransaction);

        assertNotNull(transactionHash);
        assertEquals(expectedTransactionHash, transactionHash);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/transactions#send-transaction-await
    @Test
    void loadedFromExample_transactionAwait() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/transaction/example/send-transaction-await.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, TransactionAwait.class));

        TransactionAwait transactionAwait = OBJECT_MAPPER.readValue(inputJson, TransactionAwait.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(transactionAwait), false);
    }

    // TODO: enable this test when working test data is available
    @Disabled("Error expired! (https://docs.near.org/docs/api/rpc/transactions#send-transaction-await)")
    @Test
    void sendTransactionAwait_transaction_notNull() throws IOException,
            JSONException {
        String signedTransaction = "DgAAAHNlbmRlci50ZXN0bmV0AOrmAai64SZOv9e/naX4W15pJx0GAap35wTT1T/DwcbbDQAAAAAAAAAQAAAAcmVjZWl2ZXIudGVzdG5ldIODI4YfV/QS++blXpQYT+bOsRblTRW4f547y/LkvMQ9AQAAAAMAAACh7czOG8LTAAAAAAAAAAXcaTJzu9GviPT7AD4mNJGY79jxTrjFLoyPBiLGHgBi8JK1AnhK8QknJ1ourxlvOYJA2xEZE8UR24THmSJcLQw=";

        TransactionAwait transaction = nearClient.sendTransactionAwait(signedTransaction);

        assertNotNull(transaction);

        String inputJson = loadJsonFromResourceFile("json-test-samples/transaction/send-transaction-await.json");

        JSONAssert.assertEquals(getPrettyJson(transaction), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/transactions#transaction-status
    @Test
    void loadedFromExample_transactionStatus()
            throws IOException, JSONException {

        String inputJson = loadJsonFromResourceFile(
                "json-test-samples/transaction/example/transaction-status.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, TransactionStatus.class));

        TransactionStatus transactionStatus = OBJECT_MAPPER.readValue(inputJson, TransactionStatus.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(transactionStatus), false);
    }

    //TODO: Check implement the code to run this test
    // Failures at: https://docs.near.org/docs/roles/integrator/errors/error-implementation
/*    @Test
    void loadedFromExample_transactionStatusFailure()
            throws IOException, JSONException {

        String inputJson = loadJsonFromResourceFile(
                "json-test-samples/transaction/example/transaction-status-failure.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, TransactionStatus.class));

        TransactionStatus transactionStatus = OBJECT_MAPPER.readValue(inputJson, TransactionStatus.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(transactionStatus), false);
    }
*/
    @Test
    void getTransactionStatus_transactionStatus_notNull() {
        String transactionHash = "DwWUi6WbVHKTCDjVu4gmuQfryqjwTjrZ6ntRcKcGN6Gd";
        String accountId = "isonar.testnet";

        TransactionStatus transactionStatus = nearClient.getTransactionStatus(transactionHash, accountId);

        assertNotNull(transactionStatus);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/transactions#transaction-status-with-receipts
    @Test
    void loadedFromExample_transactionStatusWithReceipts()
            throws IOException, JSONException {

        String inputJson = loadJsonFromResourceFile(
                "json-test-samples/transaction/example/transaction-status-with-receipts.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, TransactionStatus.class));

        TransactionStatus transactionStatusWithReceipts = OBJECT_MAPPER.readValue(inputJson, TransactionStatus.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(transactionStatusWithReceipts), false);
    }

    @Test
    void getTransactionStatusWithReceipts_transactionStatusWithReceipts_notNull() {
        String transactionHash = "DwWUi6WbVHKTCDjVu4gmuQfryqjwTjrZ6ntRcKcGN6Gd";
        String accountId = "isonar.testnet";

        TransactionStatus transactionStatusWithReceipts = nearClient.getTransactionStatusWithReceipts(transactionHash,
                accountId);

        assertNotNull(transactionStatusWithReceipts);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/transactions#receipt-by-id
    @Test
    void loadedFromExample_transactionReceipt()
            throws IOException, JSONException {

        String inputJson = loadJsonFromResourceFile(
                "json-test-samples/transaction/example/receipt-by-id.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, Receipt.class));

        Receipt transactionReceipt = OBJECT_MAPPER.readValue(inputJson, Receipt.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(transactionReceipt), false);
    }

    @Test
    void getTransactionReceipt_transactionReceipt_notNull() throws JSONException, IOException {
        String receiptId = "8b9Vt1xH8DZecMda1YqUcMWA41NvknUJJVd2XEQikPRs";

        Receipt transactionReceipt = nearClient.getTransactionReceipt(receiptId);

        assertNotNull(transactionReceipt);

        String inputJson = loadJsonFromResourceFile("json-test-samples/transaction/receipt.json");

        JSONAssert.assertEquals(getPrettyJson(transactionReceipt), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/access-keys#view-access-key
    @Test
    void loadedFromExample_accessKey() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/access-key/example/view-access-key.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, AccessKey.class));

        AccessKey accessKey = OBJECT_MAPPER.readValue(inputJson, AccessKey.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(accessKey), false);
    }

    @Test
    void viewAccessKey_byFinality_accessKey_notNull() {
        String accountId = "client.chainlink.testnet";
        String publicKey = "ed25519:H9k5eiU4xXS3M4z8HzKJSLaZdqGdGwBG49o7orNC4eZW";

        AccessKey accessKey = nearClient.viewAccessKey(Finality.FINAL, accountId, publicKey);

        assertNotNull(accessKey);
    }

    @Test
    void viewAccessKey_byHash_accessKey_notNull() throws IOException, JSONException {
        String accountId = "client.chainlink.testnet";
        String publicKey = "ed25519:H9k5eiU4xXS3M4z8HzKJSLaZdqGdGwBG49o7orNC4eZW";

        AccessKey accessKey = nearClient.viewAccessKey("8bVg8wugs2QHqXr42oEsCYyH7jvR9pLaAP35dFqx2evU", accountId,
                publicKey);

        assertNotNull(accessKey);

        String inputJson = loadJsonFromResourceFile("json-test-samples/access-key/view-access-key.json");

        JSONAssert.assertEquals(getPrettyJson(accessKey), inputJson, false);
    }

    @Test
    void viewAccessKey_byHeight_accessKey_notNull() throws JSONException, IOException {
        String accountId = "client.chainlink.testnet";
        String publicKey = "ed25519:H9k5eiU4xXS3M4z8HzKJSLaZdqGdGwBG49o7orNC4eZW";

        AccessKey accessKey = nearClient.viewAccessKey(78443365, accountId, publicKey);

        assertNotNull(accessKey);

        String inputJson = loadJsonFromResourceFile("json-test-samples/access-key/view-access-key.json");

        JSONAssert.assertEquals(getPrettyJson(accessKey), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/access-keys#view-access-key-list
    @Test
    void loadedFromExample_accessKeyList() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/access-key/example/view-access-key-list.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, AccessKeyList.class));

        AccessKeyList accessKeyList = OBJECT_MAPPER.readValue(inputJson, AccessKeyList.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(accessKeyList), false);
    }

    @Test
    void viewAccessKeyList_byFinality_accessKey_notNull() {
        String accountId = "client.chainlink.testnet";

        AccessKeyList accessKeyList = nearClient.viewAccessKeyList(Finality.FINAL, accountId);

        assertNotNull(accessKeyList);
    }

    @Test
    void viewAccessKeyList_byHash_accessKey_notNull() throws IOException, JSONException {
        String accountId = "client.chainlink.testnet";

        AccessKeyList accessKeyList = nearClient.viewAccessKeyList("DwFpDPiQXBaX6Vw3aKazQ4nXjgzw1uk6XpUkfTSJrbXf",
                accountId);

        assertNotNull(accessKeyList);

        String inputJson = loadJsonFromResourceFile("json-test-samples/access-key/view-access-key-list-by-hash.json");

        JSONAssert.assertEquals(getPrettyJson(accessKeyList), inputJson, false);
    }

    @Test
    void viewAccessKeyList_byHeight_accessKey_notNull() throws IOException, JSONException {
        String accountId = "client.chainlink.testnet";

        AccessKeyList accessKeyList = nearClient.viewAccessKeyList(78772585, accountId);

        assertNotNull(accessKeyList);

        String inputJson = loadJsonFromResourceFile("json-test-samples/access-key/view-access-key-list-by-height.json");

        JSONAssert.assertEquals(getPrettyJson(accessKeyList), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/access-keys#view-access-key-changes-single
    @Test
    void loadedFromExample_accessKeyChangesSingle() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/access-key/example/view-access-key-changes-single.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, AccessKeyChanges.class));

        AccessKeyChanges accessKeyChanges = OBJECT_MAPPER.readValue(inputJson, AccessKeyChanges.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(accessKeyChanges), false);
    }

    // TODO: access key with some changes, the given one is empty:
    // (https://docs.near.org/docs/api/rpc/access-keys#view-access-key-changes-single)
    @Test
    void viewSingleAccessKeyChanges_byFinality_accessKey_notNull() {
        Key[] keys = new Key[1];

        Key key0 = new Key("example-acct.testnet", PublicKey.fromEncodedBase58String("ed25519:25KEc7t7MQohAJ4EDThd2vkksKkwangnuJFzcoiXj9oM", PublicKey.class));
        keys[0] = key0;

        AccessKeyChanges accessKeyChanges = nearClient.viewSingleAccessKeyChanges(Finality.FINAL, keys);

        assertNotNull(accessKeyChanges);
    }

    // TODO: access key with some changes, the given one is empty:
    // (https://docs.near.org/docs/api/rpc/access-keys#view-access-key-changes-single)
    @Test
    void viewSingleAccessKeyChanges_byHash_accessKey_notNull() {
        Key[] keys = new Key[1];

        Key key0 = new Key("example-acct.testnet", PublicKey.fromEncodedBase58String("ed25519:25KEc7t7MQohAJ4EDThd2vkksKkwangnuJFzcoiXj9oM", PublicKey.class));
        keys[0] = key0;

        AccessKeyChanges accessKeyChanges = nearClient.viewSingleAccessKeyChanges(
                "Cr82U81VqHgCz9LzZjPivh9t16e8es6aFCv9qvDMMH88",
                keys);

        assertNotNull(accessKeyChanges);
    }

    // TODO: access key with some changes, the given one is empty:
    // (https://docs.near.org/docs/api/rpc/access-keys#view-access-key-changes-single)
    @Test
    void viewSingleAccessKeyChanges_byHeight_accessKey_notNull() {
        Key[] keys = new Key[1];

        Key key0 = new Key("example-acct.testnet", PublicKey.fromEncodedBase58String("ed25519:25KEc7t7MQohAJ4EDThd2vkksKkwangnuJFzcoiXj9oM", PublicKey.class));
        keys[0] = key0;

        AccessKeyChanges accessKeyChanges = nearClient.viewSingleAccessKeyChanges(78433961, keys);

        assertNotNull(accessKeyChanges);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/access-keys#view-access-key-changes-all
    @Test
    void loadedFromExample_accessKeyChangesAll() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/access-key/example/view-access-key-changes-all.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, AccessKeyChanges.class));

        AccessKeyChanges accessKeyChanges = OBJECT_MAPPER.readValue(inputJson, AccessKeyChanges.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(accessKeyChanges), false);
    }

    @Test
    void loadedJson_accessKeyChangesAll_invalidPropertyPermission_shouldThrow_NoSuchTypeException()
            throws IOException {
        String inputJson = loadJsonFromResourceFile(
                "json-test-samples/access-key/view-access-key-changes-all-invalid-permission-property.json");

        LOGGER.debug(
                "Mapping AccessKey with an invalid Permission type as json property should throw NoSuchTypeException");

        Throwable t = assertThrows(IOException.class, () -> OBJECT_MAPPER.readValue(inputJson, AccessKeyChanges.class));

        // assert inner exception, since deserializer signature does not allow for non
        // IOException to be thrown
        assertEquals(NoSuchTypeException.class, t.getCause().getCause().getClass());

        LOGGER.debug("Throwed {} with inner {}", t.getClass().getSimpleName(),
                t.getCause().getCause().getClass().getSimpleName());
    }

    // TODO: access key with some changes
    @Test
    void viewAllAccessKeyChanges_byFinality_accessKey_notNull() {
        String[] accountIds = new String[1];

        accountIds[0] = "client.chainlink.testnet";

        AccessKeyChanges accessKeyChanges = nearClient.viewAllAccessKeyChanges(Finality.FINAL, accountIds);

        assertNotNull(accessKeyChanges);
    }

    // TODO: access key with some changes, the given block does not exist:
    // (https://docs.near.org/docs/api/rpc/access-keys#view-access-key-changes-all)
    @Test
    void viewAllAccessKeyChanges_byHash_accessKey_notNull() {
        String[] accountIds = new String[1];

        accountIds[0] = "client.chainlink.testnet";

        AccessKeyChanges accessKeyChanges = nearClient.viewAllAccessKeyChanges(
                "Ais9kPbHvk6XmEYptoEpBtyFW77V16TZNHHnYtmXWr1d",
                accountIds);

        assertNotNull(accessKeyChanges);
    }

    // TODO: access key with some changes, the given block does not exist:
    // (https://docs.near.org/docs/api/rpc/access-keys#view-access-key-changes-all)
    @Test
    void viewAllAccessKeyChanges_byHeight_accessKey_notNull() {
        String[] accountIds = new String[1];

        accountIds[0] = "client.chainlink.testnet";

        AccessKeyChanges accessKeyChanges = nearClient.viewAllAccessKeyChanges(78433518, accountIds);

        assertNotNull(accessKeyChanges);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/contracts#view-account
    @Test
    void loadedFromExample_account() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/example/view-account.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, Account.class));

        Account account = OBJECT_MAPPER.readValue(inputJson, Account.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(account), false);
    }

    @Test
    void viewAccount_byFinality_account_notNull() {
        Account account = nearClient.viewAccount(Finality.FINAL, "nearkat.testnet");

        assertNotNull(account);
    }

    @Test
    void viewAccount_byHash_account_notNull() throws IOException, JSONException {
        Account account = nearClient.viewAccount("5hyGx7LiGaeRiAN4RrKcGomi1QXHqZwKXFQf6xTmvUgb", "nearkat.testnet");

        assertNotNull(account);

        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/view-account.json");

        JSONAssert.assertEquals(getPrettyJson(account), inputJson, false);
    }

    @Test
    void viewAccount_byHeight_account_notNull() throws JSONException, IOException {
        Account account = nearClient.viewAccount(78439658, "nearkat.testnet");

        assertNotNull(account);

        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/view-account.json");

        JSONAssert.assertEquals(getPrettyJson(account), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/contracts#view-account-changes
    @Test
    void loadedFromExample_accountChanges() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/example/view-account-changes.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, AccountChanges.class));

        AccountChanges accountChanges = OBJECT_MAPPER.readValue(inputJson, AccountChanges.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(accountChanges), false);
    }

    // TODO: Empty sample account changes
    // (https://docs.near.org/docs/api/rpc/contracts#view-account-changes)
    @Test
    void viewAccountChanges_byFinality_account_notNull() {
        String[] accountIds = new String[1];

        accountIds[0] = "nearkat.testnet";

        AccountChanges accountChanges = nearClient.viewAccountChanges(Finality.FINAL, accountIds);

        assertNotNull(accountChanges);
    }

    // TODO: Empty sample account changes
    // (https://docs.near.org/docs/api/rpc/contracts#view-account-changes)
    @Test
    void viewAccountChanges_byHash_account_notNull() throws IOException, JSONException {
        String[] accountIds = new String[1];

        accountIds[0] = "nearkat.testnet";

        AccountChanges accountChanges = nearClient.viewAccountChanges("7vWp2djKLoJ3RE1sr8RzSKQtyzKpe2wZ7NCcDuFNuL7j",
                accountIds);

        assertNotNull(accountChanges);

        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/view-account-changes.json");

        JSONAssert.assertEquals(getPrettyJson(accountChanges), inputJson, false);
    }

    // TODO: Empty sample account changes
    // (https://docs.near.org/docs/api/rpc/contracts#view-account-changes)
    @Test
    void viewAccountChanges_byHeight_account_notNull() throws JSONException, IOException {
        String[] accountIds = new String[1];

        accountIds[0] = "nearkat.testnet";

        AccountChanges accountChanges = nearClient.viewAccountChanges(78440142, accountIds);

        assertNotNull(accountChanges);

        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/view-account-changes.json");

        JSONAssert.assertEquals(getPrettyJson(accountChanges), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/contracts#view-contract-code
    @Test
    void loadedFromExample_contractCode() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/example/view-contract-code.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, ContractCode.class));

        ContractCode contractCode = OBJECT_MAPPER.readValue(inputJson, ContractCode.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(contractCode), false);
    }

    @Test
    void viewContractCode_byFinality_contractCode_notNull() {
        ContractCode contractCode = nearClient.viewContractCode(Finality.FINAL, "guest-book.testnet");

        assertNotNull(contractCode);
    }

    @Test
    void viewContractCode_byHash_contractCode_notNull() throws IOException, JSONException {
        ContractCode contractCode = nearClient.viewContractCode("uLxyauKPhSk1tebYKi3k69pHSaT2ZLzWy4JwtGm52pu",
                "guest-book.testnet");

        assertNotNull(contractCode);

        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/view-contract-code.json");

        JSONAssert.assertEquals(getPrettyJson(contractCode), inputJson, false);
    }

    @Test
    void viewContractCode_byHeight_contractCode_notNull() throws JSONException, IOException {
        ContractCode contractCode = nearClient.viewContractCode(78440518, "guest-book.testnet");

        assertNotNull(contractCode);

        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/view-contract-code.json");

        JSONAssert.assertEquals(getPrettyJson(contractCode), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/contracts#view-contract-state
    @Test
    void loadedFromExample_contractState() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/example/view-contract-state.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, ContractState.class));

        ContractState contractState = OBJECT_MAPPER.readValue(inputJson, ContractState.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(contractState), false);
    }

    // TODO: enable this test when working test data is available
    @Disabled("Too large contract state! (https://docs.near.org/docs/api/rpc/contracts#view-contract-state)")
    @Test
    void viewContractState_byFinality_contractCode_notNull() {
        ContractState contractState = nearClient.viewContractState(Finality.FINAL,
                "guest-book.testnet", "");

        assertNotNull(contractState);
    }

    // TODO: enable this test when working test data is available
    @Disabled("Too large contract state! (https://docs.near.org/docs/api/rpc/contracts#view-contract-state)")
    @Test
    void viewContractState_byHash_contractCode_notNull() throws IOException,
            JSONException {
        ContractState contractState = nearClient.viewContractState("342bkjvnzoZ7FGRE5BwDVkzSRUYXAScTz3GsDB9sEHXg",
                "guest-book.testnet", "");

        assertNotNull(contractState);

        String inputJson = loadJsonFromResourceFile(
                "json-test-samples/accounts-contracts/view-contract-state.json");

        JSONAssert.assertEquals(getPrettyJson(contractState), inputJson, false);
    }

    // TODO: enable this test when working test data is available
    @Disabled("Too large contract state! (https://docs.near.org/docs/api/rpc/contracts#view-contract-state)")
    @Test
    void viewContractState_byHeight_contractCode_notNull() throws JSONException,
            IOException {
        ContractState contractState = nearClient.viewContractState(78440679,
                "guest-book.testnet", "");

        assertNotNull(contractState);

        String inputJson = loadJsonFromResourceFile(
                "json-test-samples/accounts-contracts/view-contract-state.json");

        JSONAssert.assertEquals(getPrettyJson(contractState), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/contracts#view-contract-state-changes
    @Test
    void loadedFromExample_contractStateChanges() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile(
                "json-test-samples/accounts-contracts/example/view-contract-state-changes.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, ContractStateChanges.class));

        ContractStateChanges contractStateChanges = OBJECT_MAPPER.readValue(inputJson, ContractStateChanges.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(contractStateChanges), false);
    }

    // TODO: Empty sample contract code changes
    // (https://docs.near.org/docs/api/rpc/contracts#view-contract-state-changes)
    @Test
    void viewContractStateChanges_byFinality_contractStateChanges_notNull() {
        String[] accountIds = new String[1];

        accountIds[0] = "guest-book.testnet";

        ContractStateChanges contractStateChanges = nearClient.viewContractStateChanges(Finality.FINAL, accountIds,
                "");

        assertNotNull(contractStateChanges);
    }

    // TODO: Empty sample contract code changes
    // (https://docs.near.org/docs/api/rpc/contracts#view-contract-state-changes)
    @Test
    void viewContractStateChanges_byHash_contractStateChanges_notNull() throws IOException, JSONException {
        String[] accountIds = new String[1];

        accountIds[0] = "guest-book.testnet";

        ContractStateChanges contractStateChanges = nearClient.viewContractStateChanges(
                "5KgQ8uu17bhUPnMUbkmciHxbpFvsbhwdkJu4ptRfR7Zn",
                accountIds, "");

        assertNotNull(contractStateChanges);

        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/view-contract-state-changes.json");

        JSONAssert.assertEquals(getPrettyJson(contractStateChanges), inputJson, false);
    }

    // TODO: Empty sample contract code changes
    // (https://docs.near.org/docs/api/rpc/contracts#view-contract-state-changes)
    @Test
    void viewContractStateChanges_byHeight_contractStateChanges_notNull() throws JSONException, IOException {
        String[] accountIds = new String[1];

        accountIds[0] = "guest-book.testnet";

        ContractStateChanges contractStateChanges = nearClient.viewContractStateChanges(78441183, accountIds, "");

        assertNotNull(contractStateChanges);

        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/view-contract-state-changes.json");

        JSONAssert.assertEquals(getPrettyJson(contractStateChanges), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/contracts#view-contract-state-changes
    @Test
    void loadedFromExample_contractCodeChanges() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile(
                "json-test-samples/accounts-contracts/example/view-contract-code-changes.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, ContractCodeChanges.class));

        ContractCodeChanges contractCodeChanges = OBJECT_MAPPER.readValue(inputJson, ContractCodeChanges.class);

        JSONAssert.assertEquals(inputJson, getPrettyJson(contractCodeChanges), false);
    }

    // TODO: Empty sample contract code changes
    // (https://docs.near.org/docs/api/rpc/contracts#view-contract-code-changes)
    @Test
    void viewContractCodeChanges_byFinality_contractCodeChanges_notNull() {
        String[] accountIds = new String[1];

        accountIds[0] = "dev-1602714453032-7566969";

        ContractCodeChanges contractCodeChanges = nearClient.viewContractCodeChanges(Finality.FINAL, accountIds);

        assertNotNull(contractCodeChanges);
    }

    // TODO: Empty sample contract code changes
    // (https://docs.near.org/docs/api/rpc/contracts#view-contract-code-changes)
    @Test
    void viewContractCodeChanges_byHash_contractCodeChanges_notNull() throws IOException, JSONException {
        String[] accountIds = new String[1];

        accountIds[0] = "dev-1602714453032-7566969";

        ContractCodeChanges contractCodeChanges = nearClient.viewContractCodeChanges(
                "HpsjZvjtuxarKRsXGVrgB6qtuCcHRgx3Xof1gfT2Jfj7",
                accountIds);

        assertNotNull(contractCodeChanges);

        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/view-contract-code-changes.json");

        JSONAssert.assertEquals(getPrettyJson(contractCodeChanges), inputJson, false);
    }

    // TODO: Empty sample contract code changes
    // (https://docs.near.org/docs/api/rpc/contracts#view-contract-code-changes)
    @Test
    void viewContractCodeChanges_byHeight_contractCodeChanges_notNull() throws JSONException, IOException {
        String[] accountIds = new String[1];

        accountIds[0] = "dev-1602714453032-7566969";

        ContractCodeChanges contractCodeChanges = nearClient.viewContractCodeChanges(78441560, accountIds);

        assertNotNull(contractCodeChanges);

        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/view-contract-code-changes.json");

        JSONAssert.assertEquals(getPrettyJson(contractCodeChanges), inputJson, false);
    }

    // From sample response at:
    // https://docs.near.org/docs/api/rpc/contracts#view-contract-state-changes
    @Test
    void loadedFromExample_contractFunctionCallResult() throws IOException, JSONException {
        String inputJson = loadJsonFromResourceFile(
                "json-test-samples/accounts-contracts/example/call-a-contract-function.json");

        assertDoesNotThrow(() -> OBJECT_MAPPER.readValue(inputJson, ContractFunctionCallResult.class));

        ContractFunctionCallResult contractFunctionCallResult = OBJECT_MAPPER.readValue(inputJson,
                ContractFunctionCallResult.class);

        String expectedJson = getPrettyJson(contractFunctionCallResult);

        JSONAssert.assertEquals(inputJson, expectedJson, false);
    }

    @Test
    void callContractFunction_byFinality_contractFunctionCallResult_notNull() {
        ContractFunctionCallResult contractFunctionCallResult = nearClient
                .callContractFunction(
                        Finality.FINAL,
                        "guest-book.testnet",
                        "getMessages",
                        "e30=");

        assertNotNull(contractFunctionCallResult);
    }

    @Test
    void callContractFunction_byHash_contractFunctionCallResult_notNull() throws IOException, JSONException {
        ContractFunctionCallResult contractFunctionCallResult = nearClient
                .callContractFunction(
                        "J5QTB4Stz3iwtHvgr5KnVzNUgzm4J1bE5Et6JWrJPC8o",
                        "guest-book.testnet",
                        "getMessages",
                        "e30=");

        assertNotNull(contractFunctionCallResult);

        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/call-a-contract-function.json");
        JSONAssert.assertEquals(getPrettyJson(contractFunctionCallResult), inputJson, false);
    }

    /*
     * the result [ 91, ...103, 103, 103, 34, 125, 93]
     * is nothing but the ASCII array of the following message
     * [
     * { premium: false, sender: 'waverlymaven.testnet', text: 'TGIF' },
     * { premium: true, sender: 'waverlymaven.testnet', text: 'Hello from New York
     * },
     * { premium: false, sender: 'fhr.testnet', text: 'Hi' },
     * { premium: true, sender: 'eugenethedream', text: 'test' },
     * { premium: false, sender: 'dongri.testnet', text: 'test' },
     * { premium: false, sender: 'dongri.testnet', text: 'hello' },
     * { premium: true, sender: 'dongri.testnet', text: 'hey' },
     * { premium: false, sender: 'hirokihori.testnet', text: 'hello' },
     * { premium: true, sender: 'eugenethedream', text: 'hello' },
     * { premium: false, sender: 'example-acct.testnet', text: 'Aloha' },
     * ]
     */
    @Test
    void callContractFunction_byHeight_contractFunctionCallResult_notNull() throws JSONException, IOException {
        ContractFunctionCallResult contractFunctionCallResult = nearClient
                .callContractFunction(79272492,
                        "guest-book.testnet",
                        "getMessages",
                        "e30=");

        assertNotNull(contractFunctionCallResult);

        String inputJson = loadJsonFromResourceFile("json-test-samples/accounts-contracts/call-a-contract-function.json");

        JSONAssert.assertEquals(getPrettyJson(contractFunctionCallResult), inputJson, false);
    }

    @Test
    void getBlock_byHash_invalidInput_shouldThrow_NearServiceException() {
        String invalidBlockHash = "invalidBlockHash";

        LOGGER.debug("Calling getBlock with hash {} should throw NearServiceException", invalidBlockHash);

        Throwable t = assertThrows(NearException.class, () -> nearClient.getBlock(invalidBlockHash));

        LOGGER.debug("Threw {}", t.getClass().getSimpleName());
    }

    @Test
    void loadError_validInput_doesHaveErrorData() throws IOException {
        NearExceptionResolver nearExceptionResolver = new NearExceptionResolver();

        String validErrorJson = loadJsonFromResourceFile(
                "json-test-samples/error/valid-error.json");

        Throwable t = nearExceptionResolver
                .resolveException((ObjectNode) OBJECT_MAPPER.readTree(validErrorJson));

        assertInstanceOf(NearException.class, t);

        assertNotNull(((NearException) t).getNearErrorData());
    }

    @Test
    void loadError_invalidInput_doesNotHaveErrorData() throws IOException {
        NearExceptionResolver nearExceptionResolver = new NearExceptionResolver();

        String invalidErrorJson = loadJsonFromResourceFile(
                "json-test-samples/error/invalid-error.json");

        Throwable t = nearExceptionResolver
                .resolveException((ObjectNode) OBJECT_MAPPER.readTree(invalidErrorJson));

        assertInstanceOf(NearException.class, t);

        assertNull(((NearException) t).getNearErrorData());
    }
}

'''
'''--- near-java-api-rpc/src/test/java/com/syntifi/near/api/rpc/NearClientTestnetHelper.java ---
package com.syntifi.near.api.rpc;

import com.syntifi.near.api.common.exception.NearException;
import com.syntifi.near.api.common.helper.Network;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NearClientTestnetHelper {
    private static final Logger LOGGER = LoggerFactory.getLogger(NearClientTestnetHelper.class);

    public static NearClient nearClient = null;

    public static Network network = Network.TEST_NET;

    static {
        LOGGER.debug("======== Running tests with peer {} ========", network.getRpcUrl());
        try {
            nearClient = NearClient.usingNetwork(network);
        } catch (NearException e) {
            LOGGER.error("{}", e.getMessage());
            e.printStackTrace();
        }
    }
}

'''
'''--- near-java-api-rpc/src/test/java/com/syntifi/near/api/rpc/model/accesskey/permission/PermissionMethodTypeDataTest.java ---
package com.syntifi.near.api.rpc.model.accesskey.permission;

import com.syntifi.near.api.common.exception.NoSuchTypeException;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class PermissionMethodTypeDataTest {
    @Test
    void getClassByName_validName_shouldReturn_correctClass() {
        String validClassName = PermissionTypeData.FULL_ACCESS.getName();
        Class<?> expectedClass = PermissionTypeData.FULL_ACCESS.getClazz();

        assertEquals(expectedClass, PermissionTypeData.getClassByName(validClassName));
    }

    @Test
    void getClassByName_invalidName_shouldThrow_NoSuchTypeException() {
        String invalidClassName = "InvalidClassName";

        assertThrows(NoSuchTypeException.class, () -> PermissionTypeData.getClassByName(invalidClassName));
    }
}

'''
'''--- near-java-api-rpc/src/test/java/com/syntifi/near/api/rpc/service/AccountServiceTest.java ---
package com.syntifi.near.api.rpc.service;

import com.syntifi.crypto.key.encdec.Hex;
import com.syntifi.crypto.key.mnemonic.Language;
import com.syntifi.crypto.key.mnemonic.MnemonicCode;
import com.syntifi.crypto.key.mnemonic.exception.MnemonicException;
import com.syntifi.near.api.common.helper.Formats;
import com.syntifi.near.api.common.key.AbstractKeyTest;
import com.syntifi.near.api.common.model.common.EncodedHash;
import com.syntifi.near.api.common.model.key.PrivateKey;
import com.syntifi.near.api.common.model.key.PublicKey;
import com.syntifi.near.api.rpc.model.transaction.SuccessValueStatus;
import com.syntifi.near.api.rpc.model.transaction.TransactionAwait;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.math.BigInteger;
import java.security.GeneralSecurityException;
import java.util.List;
import java.util.Random;

import static com.syntifi.near.api.rpc.NearClientTestnetHelper.nearClient;
import static org.junit.jupiter.api.Assertions.assertInstanceOf;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class AccountServiceTest extends AbstractKeyTest {
    private static final Logger LOGGER = LoggerFactory.getLogger(AccountServiceTest.class);

    @Test
    void createImplicitAccountFromMnemonic_should_getStatus_SuccessValueStatus() throws GeneralSecurityException, IOException, MnemonicException.MnemonicLengthException {
        MnemonicCode mnemonicCode = new MnemonicCode(Language.EN);
        List<String> words = mnemonicCode.generateSecureRandomWords();
        PrivateKey newPrivateKey = KeyService.deriveFromSeed(mnemonicCode.toSeed(words, ""));
        PublicKey newPublicKey = KeyService.derivePublicKey(newPrivateKey);
        LOGGER.debug("=============> Mnemonic");
        LOGGER.info(String.join(" ", words));
        LOGGER.debug("=============> Public key ");
        LOGGER.debug(Hex.encode(newPublicKey.getData()));
        LOGGER.debug("=============> Privatekey ");
        LOGGER.debug(Hex.encode(newPrivateKey.getData()));
        String signerId = "syntifi-alice.testnet";
        BigInteger amount = new BigInteger(Formats.parseNearAmount("1"), 10);
        PrivateKey privateKey = aliceNearPrivateKey;
        PublicKey publicKey = aliceNearPublicKey;
        TransactionAwait transactionAwait = TransferService
                .sendTransferActionAwait(nearClient, signerId, Hex.encode(newPublicKey.getData()),
                        publicKey, privateKey, amount);
        assertInstanceOf(SuccessValueStatus.class, transactionAwait.getStatus());
    }

    @Test
    void createSubAccountAndTransferNear_should_getStatus_SuccessValueStatus() throws GeneralSecurityException {
        Random rnd = new Random();
        String signerId = "syntifi-alice.testnet";
        String newAccountId = Math.abs(rnd.nextInt()) + "." + signerId;
        BigInteger amount = new BigInteger(Formats.parseNearAmount("1"), 10);
        PrivateKey privateKey = aliceNearPrivateKey;
        PublicKey publicKey = aliceNearPublicKey;

        EncodedHash transactionHash = AccountService
                .createSubAccountAsync(nearClient, newAccountId, amount, signerId, publicKey, privateKey);
        assertTrue(transactionHash.getDecodedHash().length > 0);
    }

    @Test
    void createNamedAccount_should_getStatus_SuccessValueStatus() throws GeneralSecurityException {
        Random rnd = new Random();
        PrivateKey newPrivateKey = KeyService.deriveRandomKey();
        PublicKey newPublicKey = KeyService.derivePublicKey(newPrivateKey);
        String creatorId = "syntifi-alice.testnet";
        PrivateKey privateKey = aliceNearPrivateKey;
        PublicKey publicKey = aliceNearPublicKey;
        BigInteger amount = new BigInteger(Formats.parseNearAmount("1"), 10);
        EncodedHash transactionHash = AccountService
                .createNamedAccountAsync(nearClient, "testnet",
                        "syntifi-" + Math.abs(rnd.nextInt()) + ".testnet",
                        newPublicKey, amount, creatorId, publicKey, privateKey);
        assertTrue(transactionHash.getDecodedHash().length > 0);
    }
}

'''
'''--- near-java-api-rpc/src/test/java/com/syntifi/near/api/rpc/service/TransferServiceTest.java ---
package com.syntifi.near.api.rpc.service;

import com.syntifi.crypto.key.hash.Sha256;
import com.syntifi.near.api.common.key.AbstractKeyTest;
import com.syntifi.near.api.common.model.common.EncodedHash;
import com.syntifi.near.api.common.model.key.PrivateKey;
import com.syntifi.near.api.common.model.key.PublicKey;
import com.syntifi.near.api.common.model.key.Signature;
import com.syntifi.near.api.rpc.model.accesskey.AccessKey;
import com.syntifi.near.api.rpc.model.block.Block;
import com.syntifi.near.api.rpc.model.identifier.Finality;
import com.syntifi.near.api.rpc.model.transaction.SignedTransaction;
import com.syntifi.near.api.rpc.model.transaction.Transaction;
import com.syntifi.near.api.rpc.model.transaction.TransferAction;
import com.syntifi.near.borshj.Borsh;
import org.junit.jupiter.api.Test;

import java.math.BigInteger;
import java.security.GeneralSecurityException;
import java.util.Arrays;
import java.util.Base64;

import static com.syntifi.near.api.rpc.NearClientTestnetHelper.nearClient;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertInstanceOf;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class TransferServiceTest extends AbstractKeyTest {

    @Test
    void serializeSignAndDeserializeVerifyTransaction_should_match() throws GeneralSecurityException {
        String signerId = "syntifi-alice.testnet";
        String receiverId = "syntifi-bob.testnet";
        String amount = "100";
        PublicKey publicKey = aliceNearPublicKey;

        Block block = nearClient.getBlock(Finality.FINAL);

        AccessKey accessKey = nearClient.viewAccessKey(Finality.FINAL, signerId, publicKey.toEncodedBase58String());

        long nextNonce = accessKey.getNonce() + 1L;

        Transaction transaction = Transaction
                .builder()
                .signerId(signerId)
                .publicKey(publicKey)
                .nonce(nextNonce)
                .receiverId(receiverId)
                .blockHash(block.getHeader().getHash().getDecodedHash())
                .actions(Arrays.asList(
                        TransferAction.builder()
                                .deposit(new BigInteger(amount, 10))
                                .build()))
                .build();

        byte[] serializedTx = Borsh.serialize(transaction);
        byte[] hashedTx = Sha256.digest(serializedTx);
        byte[] signedTx = alicePrivateKey.sign(hashedTx);

        SignedTransaction signedTransaction =
                SignedTransaction.builder()
                        .transaction(transaction)
                        .signature(Signature.builder()
                                .keyType(publicKey.getType())
                                .data(signedTx).build())
                        .build();

        byte[] borshTx = Borsh.serialize(signedTransaction);

        String base64Tx = Base64.getEncoder().encodeToString(borshTx);

        byte[] base64TxDec = Base64.getDecoder().decode(base64Tx);

        SignedTransaction signedTransactionDec = Borsh.deserialize(base64TxDec, SignedTransaction.class);

        assertEquals(signedTransaction, signedTransactionDec);

        Transaction transactionDec = signedTransactionDec.getTransaction();

        assertEquals(transaction, transactionDec);

        assertTrue(publicKey.getPublicKey().verify(hashedTx, signedTransactionDec.getSignature().getData()));
    }

/*    @Test
    void sent100toBobAwait_should_getStatus_SuccessValueStatus() throws GeneralSecurityException {
        String signerId = "syntifi-alice.testnet";
        String receiverId = "syntifi-bob.testnet";
        BigInteger amount = new BigInteger("100", 10);
        PrivateKey privateKey = aliceNearPrivateKey;
        PublicKey publicKey = aliceNearPublicKey;

        TransactionAwait transactionAwait = TransactionService
                .sendTransferActionAwait(nearService, signerId, receiverId, publicKey, privateKey, amount);

        assertInstanceOf(SuccessValueStatus.class, transactionAwait.getStatus());
    }

    @Test
    void sent100toAliceAwait_should_getStatus_SuccessValueStatus() throws GeneralSecurityException {
        String signerId = "syntifi-bob.testnet";
        String receiverId = "syntifi-alice.testnet";
        BigInteger amount = new BigInteger("100", 10);
        PrivateKey privateKey = bobNearPrivateKey;
        PublicKey publicKey = bobNearPublicKey;

        TransactionAwait transactionAwait = TransactionService
                .sendTransferActionAwait(nearService, signerId, receiverId, publicKey, privateKey, amount);

        assertInstanceOf(SuccessValueStatus.class, transactionAwait.getStatus());
    }
*/
    @Test
    void sent100toBobAsync_should_getStatus_SuccessValueStatus() throws GeneralSecurityException {
        String signerId = "syntifi-alice.testnet";
        String receiverId = "syntifi-bob.testnet";
        BigInteger amount = new BigInteger("100", 10);
        PrivateKey privateKey = aliceNearPrivateKey;
        PublicKey publicKey = aliceNearPublicKey;

        EncodedHash transactionAsync = TransferService
                .sendTransferActionAsync(nearClient, signerId, receiverId, publicKey, privateKey, amount);

        assertNotNull(transactionAsync.getEncodedHash());
    }

    @Test
    void sent100toAliceAsync_should_getStatus_SuccessValueStatus() throws GeneralSecurityException {
        String signerId = "syntifi-bob.testnet";
        String receiverId = "syntifi-alice.testnet";
        BigInteger amount = new BigInteger("100", 10);
        PrivateKey privateKey = bobNearPrivateKey;
        PublicKey publicKey = bobNearPublicKey;

        EncodedHash transactionAsync = TransferService
                .sendTransferActionAsync(nearClient, signerId, receiverId, publicKey, privateKey, amount);

        assertNotNull(transactionAsync.getEncodedHash());
    }
}

'''
'''--- near-java-api-rpc/src/test/java/com/syntifi/near/api/rpc/service/ft/FTServiceTest.java ---
package com.syntifi.near.api.rpc.service.ft;

import com.fasterxml.jackson.databind.JsonNode;
import com.syntifi.near.api.rpc.service.contract.common.param.AccountIdParam;
import com.syntifi.near.api.rpc.service.contract.common.ContractClient;
import com.syntifi.near.api.rpc.service.contract.common.ContractMethodProxyClient;
import com.syntifi.near.api.rpc.service.contract.common.FunctionCallResult;
import com.syntifi.near.api.rpc.service.contract.ft.FTService;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

import static com.syntifi.near.api.rpc.NearClientArchivalNetHelper.nearClient;

public class FTServiceTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(FTServiceTest.class);

    private static final FTService service = ContractClient.createClientProxy(FTService.class, new ContractMethodProxyClient());

    @Test
    void callContractFunction_FTContractFunctionCall_forBalanceOf_return_list() {
        FunctionCallResult<JsonNode> result = service.getBalanceOf(nearClient, "meta.pool.testnet", new AccountIdParam("wallet-test.testnet"));

        LOGGER.debug("{}", result.getContractFunctionCallResult().getResult());
        LOGGER.debug("{}", result.getResult());
    }

    @Test
    void callContractFunction_FTContractFunctionCall_forMetadata_return_list() {
        FunctionCallResult<JsonNode> result = service.getMetadata(nearClient, "paras-marketplace-v2.testnet");

        LOGGER.debug("{}", result.getContractFunctionCallResult().getResult());
        LOGGER.debug("{}", result.getResult());
    }
}

'''
'''--- near-java-api-rpc/src/test/java/com/syntifi/near/api/rpc/service/nft/NFTServiceTest.java ---
package com.syntifi.near.api.rpc.service.nft;

import com.fasterxml.jackson.databind.JsonNode;
import com.syntifi.near.api.rpc.service.contract.common.param.AccountIdParam;
import com.syntifi.near.api.rpc.service.contract.common.ContractClient;
import com.syntifi.near.api.rpc.service.contract.common.ContractMethodProxyClient;
import com.syntifi.near.api.rpc.service.contract.common.FunctionCallResult;
import com.syntifi.near.api.rpc.service.contract.nft.NFTService;
import com.syntifi.near.api.rpc.service.contract.nft.param.NFTTokensForOwnerParam;
import com.syntifi.near.api.rpc.service.contract.nft.param.NFTTokensParam;
import com.syntifi.near.api.rpc.service.contract.nft.model.NFTContract;
import com.syntifi.near.api.rpc.service.contract.nft.model.NFTToken;
import com.syntifi.near.api.rpc.service.contract.nft.model.NFTTokenList;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.net.URISyntaxException;

import static com.syntifi.near.api.rpc.NearClientArchivalNetHelper.nearClient;

public class NFTServiceTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(NFTServiceTest.class);

    private static final NFTService service = ContractClient.createClientProxy(NFTService.class, new ContractMethodProxyClient());

    @Test
    void callContractFunction_NFTContractFunctionCall_forTotalSupply_return_list() {
        FunctionCallResult<String> result = service.getTotalSupply(nearClient, "paras-token-v2.testnet");

        LOGGER.debug("{}", result.getResult());
    }

    @Test
    void callContractFunction_NFTContractFunctionCall_forTokens_return_list() {
        FunctionCallResult<JsonNode> result = service.getTokens(nearClient, "paras-token-v2.testnet", NFTTokensParam.builder().fromIndex("0").build());

        LOGGER.debug("{}", result.getResult());
    }

    @Test
    void callContractFunction_NFTContractFunctionCall_forTokensForOwner_return_list() throws IOException, URISyntaxException {
        // Other contracts to test
        // deadmau55.mintspace2.testnet
        // bananafratclub.mintspace2.testnet
        // paras-token-v2.testnet
        NFTContract contract = new NFTContract("bananafratclub.mintspace2.testnet");

        contract.setMetadata(service.getMetadata(nearClient, contract.getContractId()));

        FunctionCallResult<NFTTokenList> resultList = service.getTokensForOwner(nearClient,
                contract.getContractId(),
                NFTTokensForOwnerParam.builder().accountId("wallet-test.testnet").fromIndex("0").build());

        LOGGER.debug("{}", resultList.getContractFunctionCallResult().getResult());
        for (NFTToken result : resultList.getResult()) {
            LOGGER.debug("Token: {}", result);
            LOGGER.debug("Token Media: {}", result.getMediaUrl(contract));
        }
    }

    @Test
    void callContractFunction_NFTContractFunctionCall_forMetadata_return_list() {
        NFTContract contract = new NFTContract("paras-token-v2.testnet");
        contract.setMetadata(service.getMetadata(nearClient, contract.getContractId()));

        LOGGER.debug("{}", contract.getMetadata().getResult());
    }

    @Test
    void callContractFunction_NFTContractFunctionCall_forSupplyForOwner_return_list() {
        FunctionCallResult<String> result = service.getSupplyForOwner(nearClient,
                "paras-token-v2.testnet",
                AccountIdParam.builder().accountId("wallet-test.testnet").build());

        LOGGER.debug("{}", result.getResult());
    }
}

'''
'''--- near-java-api-rpc/src/test/java/com/syntifi/near/api/rpc/service/staking/StakingServiceTest.java ---
package com.syntifi.near.api.rpc.service.staking;

import com.syntifi.near.api.rpc.service.AccountServiceTest;
import com.syntifi.near.api.rpc.service.contract.common.param.AccountIdParam;
import com.syntifi.near.api.rpc.service.contract.common.ContractClient;
import com.syntifi.near.api.rpc.service.contract.common.ContractMethodProxyClient;
import com.syntifi.near.api.rpc.service.contract.common.FunctionCallResult;
import com.syntifi.near.api.rpc.service.contract.staking.StakingService;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigInteger;

import static com.syntifi.near.api.rpc.NearClientTestnetHelper.nearClient;
import static org.junit.jupiter.api.Assertions.assertEquals;

class StakingServiceTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountServiceTest.class);

    @Test
    void testAccountTotalBalance_should_be_bigger_than_zero() {
        String stakingPool = "stakesstone.pool.f863973.m0";
        String accountId = "syntifi-alice.testnet";
        StakingService service = ContractClient.createClientProxy(StakingService.class, new ContractMethodProxyClient());
        FunctionCallResult<BigInteger> totalValue = service.getAccountTotalBalance(nearClient, stakingPool, AccountIdParam.builder().accountId(accountId).build());
        assertEquals(1, totalValue.getResult().compareTo(BigInteger.valueOf(0L)));
    }

    @Test
    void testAccountStakedBalance_should_be_bigger_than_zero() {
        String stakingPool = "stakesstone.pool.f863973.m0";
        String accountId = "syntifi-alice.testnet";
        StakingService service = ContractClient.createClientProxy(StakingService.class, new ContractMethodProxyClient());
        FunctionCallResult<BigInteger> totalValue = service.getAccountStakedBalance(nearClient, stakingPool, AccountIdParam.builder().accountId(accountId).build());
        assertEquals(1, totalValue.getResult().compareTo(BigInteger.valueOf(0L)));
    }

/*    @Test
    void depositAndStakeToken_should_return_Success() throws GeneralSecurityException {
        String stakingPool = "stakesstone.pool.f863973.m0";
        BigInteger amount = new BigInteger(Formats.parseNearAmount("1"), 10);
        String accountId = "syntifi-alice.testnet";
        PrivateKey privateKey = aliceNearPrivateKey;
        PublicKey publicKey = aliceNearPublicKey;

        TransactionAwait transactionAwait = StakingService.depositAndStakeTokens(nearClient, stakingPool,
                amount, accountId, publicKey, privateKey);
        assertInstanceOf(SuccessValueStatus.class, transactionAwait.getStatus());
    }
*/
/*    @Test
    void unstakeToken_should_return_Success() throws GeneralSecurityException {
        String stakingPool = "stakesstone.pool.f863973.m0";
        BigInteger amount = new BigInteger(Formats.parseNearAmount("1"), 10);
        String accountId = "syntifi-alice.testnet";
        PrivateKey privateKey = aliceNearPrivateKey;
        PublicKey publicKey = aliceNearPublicKey;

        TransactionAwait transactionAwait = StakingService.unStakeTokens(nearClient, stakingPool,
                amount, accountId, publicKey, privateKey);
        assertInstanceOf(SuccessValueStatus.class, transactionAwait.getStatus());
    }*/
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/access-key/example/view-access-key-changes-all.json ---
{
    "block_hash": "4kvqE1PsA6ic1LG7S5SqymSEhvjqGqumKjAxnVdNN3ZH",
    "changes": [
        {
            "cause": {
                "type": "transaction_processing",
                "tx_hash": "HshPyqddLxsganFxHHeH9LtkGekXDCuAt6axVgJLboXV"
            },
            "type": "access_key_update",
            "change": {
                "account_id": "example-acct.testnet",
                "public_key": "ed25519:25KEc7t7MQohAJ4EDThd2vkksKkwangnuJFzcoiXj9oM",
                "access_key": {
                    "nonce": 1,
                    "permission": "FullAccess"
                }
            }
        },
        {
            "cause": {
                "type": "receipt_processing",
                "receipt_hash": "CetXstu7bdqyUyweRqpY9op5U1Kqzd8pq8T1kqfcgBv2"
            },
            "type": "access_key_update",
            "change": {
                "account_id": "example-acct.testnet",
                "public_key": "ed25519:96pj2aVJH9njmAxakjvUMnNvdB3YUeSAMjbz9aRNU6XY",
                "access_key": {
                    "nonce": 0,
                    "permission": "FullAccess"
                }
            }
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/access-key/example/view-access-key-changes-single.json ---
{
    "block_hash": "4kvqE1PsA6ic1LG7S5SqymSEhvjqGqumKjAxnVdNN3ZH",
    "changes": [
        {
            "cause": {
                "type": "transaction_processing",
                "tx_hash": "HshPyqddLxsganFxHHeH9LtkGekXDCuAt6axVgJLboXV"
            },
            "type": "access_key_update",
            "change": {
                "account_id": "example-acct.testnet",
                "public_key": "ed25519:25KEc7t7MQohAJ4EDThd2vkksKkwangnuJFzcoiXj9oM",
                "access_key": {
                    "nonce": 1,
                    "permission": "FullAccess"
                }
            }
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/access-key/example/view-access-key-list.json ---
{
    "keys": [
        {
            "public_key": "ed25519:2j6qujbkPFuTstQLLTxKZUw63D5Wu3SG79Gop5JQrNJY",
            "access_key": {
                "nonce": 17,
                "permission": {
                    "FunctionCall": {
                        "allowance": "9999203942481156415000",
                        "receiver_id": "place.meta",
                        "method_names": []
                    }
                }
            }
        },
        {
            "public_key": "ed25519:46etzhzZHN4NSQ8JEQtbHCX7sT8WByS3vmSEb3fbmSgf",
            "access_key": {
                "nonce": 2,
                "permission": {
                    "FunctionCall": {
                        "allowance": "9999930655034196535000",
                        "receiver_id": "dev-1596616186817-8588944",
                        "method_names": []
                    }
                }
            }
        },
        {
            "public_key": "ed25519:4F9TwuSqWwvoyu7JVZDsupPhC7oYbYNsisBV2yQvyXFn",
            "access_key": {
                "nonce": 0,
                "permission": "FullAccess"
            }
        },
        {
            "public_key": "ed25519:4bZqp6nm1btr92UfKbyADDzJ4oPK9JetHXqEYqbYZmkD",
            "access_key": {
                "nonce": 2,
                "permission": "FullAccess"
            }
        },
        {
            "public_key": "ed25519:6ZPzX7hS37jiU9dRxbV1Waf8HSyKKFypJbrnZXzNhqjs",
            "access_key": {
                "nonce": 2,
                "permission": {
                    "FunctionCall": {
                        "allowance": "9999922083697042955000",
                        "receiver_id": "example.testnet",
                        "method_names": []
                    }
                }
            }
        },
        {
            "public_key": "ed25519:81RKfuo7mBbsaviTmBsq18t6Eq4YLnSi3ye2CBLcKFUX",
            "access_key": {
                "nonce": 8,
                "permission": "FullAccess"
            }
        },
        {
            "public_key": "ed25519:B4W1oAYTcG8GxwKev8jQtsYWkGwGdqP24W7eZ6Fmpyzc",
            "access_key": {
                "nonce": 0,
                "permission": {
                    "FunctionCall": {
                        "allowance": "10000000000000000000000",
                        "receiver_id": "dev-1594144238344",
                        "method_names": []
                    }
                }
            }
        },
        {
            "public_key": "ed25519:BA3AZbACoEzAsxKeToFd36AVpPXFSNhSMW2R6UYeGRwM",
            "access_key": {
                "nonce": 0,
                "permission": {
                    "FunctionCall": {
                        "allowance": "10000000000000000000000",
                        "receiver_id": "new-corgis",
                        "method_names": []
                    }
                }
            }
        },
        {
            "public_key": "ed25519:BRyHUGAJjRKVTc9ZqXTTSJnFmSca8WLj8TuVe1wXK3LZ",
            "access_key": {
                "nonce": 17,
                "permission": "FullAccess"
            }
        },
        {
            "public_key": "ed25519:DjytaZ1HZ5ZFmH3YeJeMCiC886K1XPYeGsbz2E1AZj2J",
            "access_key": {
                "nonce": 31,
                "permission": "FullAccess"
            }
        },
        {
            "public_key": "ed25519:DqJn5UCq6vdNAvfhnbpdAeuui9a6Hv9DKYDxeRACPUDP",
            "access_key": {
                "nonce": 0,
                "permission": "FullAccess"
            }
        },
        {
            "public_key": "ed25519:FFxG8x6cDDyiErFtRsdw4dBNtCmCtap4tMTjuq3umvSq",
            "access_key": {
                "nonce": 0,
                "permission": "FullAccess"
            }
        }
    ],
    "block_height": 17798231,
    "block_hash": "Gm7YSdx22wPuciW1jTTeRGP9mFqmon69ErFQvgcFyEEB"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/access-key/example/view-access-key.json ---
{
    "nonce": 85,
    "permission": {
        "FunctionCall": {
            "allowance": "18501534631167209000000000",
            "receiver_id": "client.chainlink.testnet",
            "method_names": [
                "get_token_price"
            ]
        }
    },
    "block_height": 19884918,
    "block_hash": "GGJQ8yjmo7aEoj8ZpAhGehnq9BSWFx4xswHYzDwwAP2n"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/access-key/view-access-key-changes-all-invalid-permission-2.json ---
{
    "block_hash": "4kvqE1PsA6ic1LG7S5SqymSEhvjqGqumKjAxnVdNN3ZH",
    "changes": [
        {
            "cause": {
                "type": "transaction_processing",
                "tx_hash": "HshPyqddLxsganFxHHeH9LtkGekXDCuAt6axVgJLboXV"
            },
            "type": "access_key_update",
            "change": {
                "account_id": "example-acct.testnet",
                "public_key": "ed25519:25KEc7t7MQohAJ4EDThd2vkksKkwangnuJFzcoiXj9oM",
                "access_key": {
                    "nonce": 1,
                    "permission": "FullAccess"
                }
            }
        },
        {
            "cause": {
                "type": "receipt_processing",
                "receipt_hash": "CetXstu7bdqyUyweRqpY9op5U1Kqzd8pq8T1kqfcgBv2"
            },
            "type": "access_key_update",
            "change": {
                "account_id": "example-acct.testnet",
                "public_key": "ed25519:96pj2aVJH9njmAxakjvUMnNvdB3YUeSAMjbz9aRNU6XY",
                "access_key": {
                    "nonce": 0,
                    "permission": {
                        "InvalidPermission": {
                            "allowance": "9999203942481156415000",
                            "receiver_id": "place.meta",
                            "method_names": []
                        }
                    }
                }
            }
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/access-key/view-access-key-changes-all-invalid-permission-property.json ---
{
    "block_hash": "4kvqE1PsA6ic1LG7S5SqymSEhvjqGqumKjAxnVdNN3ZH",
    "changes": [
        {
            "cause": {
                "type": "transaction_processing",
                "tx_hash": "HshPyqddLxsganFxHHeH9LtkGekXDCuAt6axVgJLboXV"
            },
            "type": "access_key_update",
            "change": {
                "account_id": "example-acct.testnet",
                "public_key": "ed25519:25KEc7t7MQohAJ4EDThd2vkksKkwangnuJFzcoiXj9oM",
                "access_key": {
                    "nonce": 1,
                    "permission": "FullAccess"
                }
            }
        },
        {
            "cause": {
                "type": "receipt_processing",
                "receipt_hash": "CetXstu7bdqyUyweRqpY9op5U1Kqzd8pq8T1kqfcgBv2"
            },
            "type": "access_key_update",
            "change": {
                "account_id": "example-acct.testnet",
                "public_key": "ed25519:96pj2aVJH9njmAxakjvUMnNvdB3YUeSAMjbz9aRNU6XY",
                "access_key": {
                    "nonce": 0,
                    "permission": "InvalidPermissionType"
                }
            }
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/access-key/view-access-key-list-by-hash.json ---
{
    "keys": [
        {
            "public_key": "ed25519:4wrVrZbHrurMYgkcyusfvSJGLburmaw7m3gmCApxgvY4",
            "access_key": {
                "nonce": 97,
                "permission": "FullAccess"
            }
        },
        {
            "public_key": "ed25519:H9k5eiU4xXS3M4z8HzKJSLaZdqGdGwBG49o7orNC4eZW",
            "access_key": {
                "nonce": 162,
                "permission": {
                    "FunctionCall": {
                        "allowance": "18047618234373314500000000",
                        "receiver_id": "client.chainlink.testnet",
                        "method_names": [
                            "get_token_price"
                        ]
                    }
                }
            }
        }
    ],
    "block_height": 78772585,
    "block_hash": "DwFpDPiQXBaX6Vw3aKazQ4nXjgzw1uk6XpUkfTSJrbXf"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/access-key/view-access-key-list-by-height.json ---
{
    "keys": [
        {
            "public_key": "ed25519:4wrVrZbHrurMYgkcyusfvSJGLburmaw7m3gmCApxgvY4",
            "access_key": {
                "nonce": 97,
                "permission": "FullAccess"
            }
        },
        {
            "public_key": "ed25519:H9k5eiU4xXS3M4z8HzKJSLaZdqGdGwBG49o7orNC4eZW",
            "access_key": {
                "nonce": 162,
                "permission": {
                    "FunctionCall": {
                        "allowance": "18047618234373314500000000",
                        "receiver_id": "client.chainlink.testnet",
                        "method_names": [
                            "get_token_price"
                        ]
                    }
                }
            }
        }
    ],
    "block_height": 78772585,
    "block_hash": "DwFpDPiQXBaX6Vw3aKazQ4nXjgzw1uk6XpUkfTSJrbXf"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/access-key/view-access-key.json ---
{
    "nonce": 161,
    "permission": {
        "FunctionCall": {
            "allowance": "18053267664184402500000000",
            "receiver_id": "client.chainlink.testnet",
            "method_names": [
                "get_token_price"
            ]
        }
    },
    "block_height": 78443365,
    "block_hash": "8bVg8wugs2QHqXr42oEsCYyH7jvR9pLaAP35dFqx2evU"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/accounts-contracts/call-a-contract-function.json ---
{
    "logs": [],
    "block_height": 79272492,
    "block_hash": "J5QTB4Stz3iwtHvgr5KnVzNUgzm4J1bE5Et6JWrJPC8o",
    "result": [
        91,
        123,
        34,
        112,
        114,
        101,
        109,
        105,
        117,
        109,
        34,
        58,
        116,
        114,
        117,
        101,
        44,
        34,
        115,
        101,
        110,
        100,
        101,
        114,
        34,
        58,
        34,
        107,
        122,
        110,
        99,
        118,
        97,
        97,
        46,
        116,
        101,
        115,
        116,
        110,
        101,
        116,
        34,
        44,
        34,
        116,
        101,
        120,
        116,
        34,
        58,
        34,
        98,
        117,
        121,
        32,
        115,
        116,
        97,
        116,
        117,
        115,
        34,
        125,
        44,
        123,
        34,
        112,
        114,
        101,
        109,
        105,
        117,
        109,
        34,
        58,
        102,
        97,
        108,
        115,
        101,
        44,
        34,
        115,
        101,
        110,
        100,
        101,
        114,
        34,
        58,
        34,
        107,
        122,
        110,
        99,
        118,
        97,
        97,
        46,
        116,
        101,
        115,
        116,
        110,
        101,
        116,
        34,
        44,
        34,
        116,
        101,
        120,
        116,
        34,
        58,
        34,
        117,
        102,
        116,
        117,
        102,
        116,
        117,
        102,
        116,
        34,
        125,
        44,
        123,
        34,
        112,
        114,
        101,
        109,
        105,
        117,
        109,
        34,
        58,
        116,
        114,
        117,
        101,
        44,
        34,
        115,
        101,
        110,
        100,
        101,
        114,
        34,
        58,
        34,
        107,
        122,
        110,
        99,
        118,
        97,
        97,
        46,
        116,
        101,
        115,
        116,
        110,
        101,
        116,
        34,
        44,
        34,
        116,
        101,
        120,
        116,
        34,
        58,
        34,
        98,
        117,
        121,
        32,
        115,
        116,
        97,
        116,
        117,
        115,
        34,
        125,
        44,
        123,
        34,
        112,
        114,
        101,
        109,
        105,
        117,
        109,
        34,
        58,
        116,
        114,
        117,
        101,
        44,
        34,
        115,
        101,
        110,
        100,
        101,
        114,
        34,
        58,
        34,
        107,
        122,
        110,
        99,
        118,
        97,
        97,
        46,
        116,
        101,
        115,
        116,
        110,
        101,
        116,
        34,
        44,
        34,
        116,
        101,
        120,
        116,
        34,
        58,
        34,
        98,
        117,
        121,
        32,
        115,
        116,
        97,
        116,
        117,
        115,
        34,
        125,
        44,
        123,
        34,
        112,
        114,
        101,
        109,
        105,
        117,
        109,
        34,
        58,
        102,
        97,
        108,
        115,
        101,
        44,
        34,
        115,
        101,
        110,
        100,
        101,
        114,
        34,
        58,
        34,
        107,
        122,
        110,
        99,
        118,
        97,
        97,
        46,
        116,
        101,
        115,
        116,
        110,
        101,
        116,
        34,
        44,
        34,
        116,
        101,
        120,
        116,
        34,
        58,
        34,
        102,
        116,
        117,
        116,
        100,
        116,
        100,
        34,
        125,
        44,
        123,
        34,
        112,
        114,
        101,
        109,
        105,
        117,
        109,
        34,
        58,
        102,
        97,
        108,
        115,
        101,
        44,
        34,
        115,
        101,
        110,
        100,
        101,
        114,
        34,
        58,
        34,
        107,
        122,
        110,
        99,
        118,
        97,
        97,
        46,
        116,
        101,
        115,
        116,
        110,
        101,
        116,
        34,
        44,
        34,
        116,
        101,
        120,
        116,
        34,
        58,
        34,
        104,
        101,
        108,
        108,
        111,
        34,
        125,
        44,
        123,
        34,
        112,
        114,
        101,
        109,
        105,
        117,
        109,
        34,
        58,
        116,
        114,
        117,
        101,
        44,
        34,
        115,
        101,
        110,
        100,
        101,
        114,
        34,
        58,
        34,
        107,
        122,
        110,
        99,
        118,
        97,
        97,
        46,
        116,
        101,
        115,
        116,
        110,
        101,
        116,
        34,
        44,
        34,
        116,
        101,
        120,
        116,
        34,
        58,
        34,
        98,
        117,
        121,
        32,
        115,
        116,
        97,
        116,
        117,
        115,
        34,
        125,
        44,
        123,
        34,
        112,
        114,
        101,
        109,
        105,
        117,
        109,
        34,
        58,
        116,
        114,
        117,
        101,
        44,
        34,
        115,
        101,
        110,
        100,
        101,
        114,
        34,
        58,
        34,
        107,
        122,
        110,
        99,
        118,
        97,
        97,
        46,
        116,
        101,
        115,
        116,
        110,
        101,
        116,
        34,
        44,
        34,
        116,
        101,
        120,
        116,
        34,
        58,
        34,
        98,
        117,
        121,
        32,
        115,
        116,
        97,
        116,
        117,
        115,
        34,
        125,
        44,
        123,
        34,
        112,
        114,
        101,
        109,
        105,
        117,
        109,
        34,
        58,
        102,
        97,
        108,
        115,
        101,
        44,
        34,
        115,
        101,
        110,
        100,
        101,
        114,
        34,
        58,
        34,
        107,
        122,
        110,
        99,
        118,
        97,
        97,
        46,
        116,
        101,
        115,
        116,
        110,
        101,
        116,
        34,
        44,
        34,
        116,
        101,
        120,
        116,
        34,
        58,
        34,
        102,
        98,
        102,
        98,
        102,
        34,
        125,
        44,
        123,
        34,
        112,
        114,
        101,
        109,
        105,
        117,
        109,
        34,
        58,
        102,
        97,
        108,
        115,
        101,
        44,
        34,
        115,
        101,
        110,
        100,
        101,
        114,
        34,
        58,
        34,
        107,
        122,
        110,
        99,
        118,
        97,
        97,
        46,
        116,
        101,
        115,
        116,
        110,
        101,
        116,
        34,
        44,
        34,
        116,
        101,
        120,
        116,
        34,
        58,
        34,
        103,
        103,
        103,
        34,
        125,
        93
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/accounts-contracts/example/call-a-contract-function.json ---
{
    "result": [
        48
    ],
    "logs": [],
    "block_height": 17817336,
    "block_hash": "4qkA4sUUG8opjH5Q9bL5mWJTnfR4ech879Db1BZXbx6P"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/accounts-contracts/example/view-account-changes.json ---
{
    "block_hash": "6xsfPSG89s6fCMShxxxQTP6D4ZHM9xkGCgubayTDRzAP",
    "changes": [
        {
            "cause": {
                "type": "transaction_processing",
                "tx_hash": "HLvxLKFM7gohFSqXPp5SpyydNEVpAno352qJJbnddsz3"
            },
            "type": "account_update",
            "change": {
                "account_id": "your_account.testnet",
                "amount": "499999959035075000000000000",
                "locked": "0",
                "code_hash": "11111111111111111111111111111111",
                "storage_usage": 182,
                "storage_paid_at": 0
            }
        },
        {
            "cause": {
                "type": "receipt_processing",
                "receipt_hash": "CPenN1dp4DNKnb9LiL5hkPmu1WiKLMuM7msDjEZwDmwa"
            },
            "type": "account_update",
            "change": {
                "account_id": "your_account.testnet",
                "amount": "499999959035075000000000000",
                "locked": "0",
                "code_hash": "11111111111111111111111111111111",
                "storage_usage": 264,
                "storage_paid_at": 0
            }
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/accounts-contracts/example/view-account.json ---
{
    "amount": "399992611103597728750000000",
    "locked": "0",
    "code_hash": "11111111111111111111111111111111",
    "storage_usage": 642,
    "storage_paid_at": 0,
    "block_height": 17795474,
    "block_hash": "9MjpcnwW3TSdzGweNfPbkx8M74q1XzUcT1PAN8G5bNDz"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/accounts-contracts/example/view-contract-code-changes.json ---
{
    "block_hash": "3yLNV5zdpzRJ8HP5xTXcF7jdFxuHnmKNUwWcok4616WZ",
    "changes": [
        {
            "cause": {
                "type": "receipt_processing",
                "receipt_hash": "CEm3NNaNdu9cijh9NvZMM1srbtEYSsBVwGbZxFQYKt5B"
            },
            "type": "contract_code_update",
            "change": {
                "account_id": "dev-1602714453032-7566969",
                "code_base64": "AGFzbQEAAAABpAM3YAF/AGAAAX9gAn9+AGADf35+AGAEf35+fgF+YAZ/fn5+fn4BfmADf35+AX5gAn9+AX5gAn9/AX9gAn9/AGADf39/AX9gAX8BfmACfn4AYAF+AX5gAX4AYAABfmADfn5+AGAAAGAIfn5+fn5+fn4BfmAJfn5+fn5+fn5+AX5gAn5+AX5gA35+fgF+YAd+fn5+fn5+AGAEfn5+fgBgCX5+fn5+fn5+fgBgBX5+fn5+AX5gA39/fwBgAX8Bf2ACf3wAYAR/f39+AGAFf39/fn8AYAV/f39/fwBgBH9/f38AYAN/f38BfmADf39+AGACf38BfmAFf39/f38Bf2AEf39/fwF/YAZ/f39/f38AYAV/f35/fwBgBH9+f38Bf2ACf34Bf2AHf35+f39+fwBgBX9/f39+AGAEf35+fgBgCX9+fn5+fn5+fgF+YAp/fn5+fn5+fn5+AX5gCH9+fn5+fn5+AGAFf35+fn4AYAp/fn5+fn5+fn5+AGAHf39/f39/fwBgBH98f38Bf2AGf39/f39..."
            }
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/accounts-contracts/example/view-contract-code.json ---
{
    "code_base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
    "hash": "7KoFshMQkdyo5iTx8P2LbLu9jQpxRn24d27FrKShNVXs",
    "block_height": 17814234,
    "block_hash": "GT1D8nweVQU1zyCUv399x8vDv2ogVq71w17MyR66hXBB"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/accounts-contracts/example/view-contract-state-changes.json ---
{
    "block_hash": "6U8Yd4JFZwJUNfqkD4KaKgTKmpNSmVRTSggpjmsRWdKY",
    "changes": [
        {
            "cause": {
                "type": "receipt_processing",
                "receipt_hash": "9ewznXgs2t7vRCssxW4thgaiwggnMagKybZ7ryLNTT2z"
            },
            "type": "data_update",
            "change": {
                "account_id": "guest-book.testnet",
                "key_base64": "bTo6Mzk=",
                "value_base64": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoiZmhyLnRlc3RuZXQiLCJ0ZXh0IjoiSGkifQ=="
            }
        },
        {
            "cause": {
                "type": "receipt_processing",
                "receipt_hash": "9ewznXgs2t7vRCssxW4thgaiwggnMagKybZ7ryLNTT2z"
            },
            "type": "data_update",
            "change": {
                "account_id": "guest-book.testnet",
                "key_base64": "bTpsZW4=",
                "value_base64": "NDA="
            }
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/accounts-contracts/example/view-contract-state.json ---
{
    "values": [
        {
            "key": "bTo6MA==",
            "value": "eyJwcmVtaXVtIjp0cnVlLCJzZW5kZXIiOiJqb3NoZm9yZC50ZXN0bmV0IiwidGV4dCI6ImhlbGxvIn0=",
            "proof": []
        },
        {
            "key": "bTo6MQ==",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoiY2hhZG9oIiwidGV4dCI6ImhlbGxvIGVyeWJvZHkifQ==",
            "proof": []
        },
        {
            "key": "bTo6MTA=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoic2F0b3NoaWYudGVzdG5ldCIsInRleHQiOiJIaWxsbyEifQ==",
            "proof": []
        },
        {
            "key": "bTo6MTE=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoidmFsZW50aW5lc29rb2wudGVzdG5ldCIsInRleHQiOiJIaSEifQ==",
            "proof": []
        },
        {
            "key": "bTo6MTI=",
            "value": "eyJwcmVtaXVtIjp0cnVlLCJzZW5kZXIiOiJobngudGVzdG5ldCIsInRleHQiOiJoZWxsbyJ9",
            "proof": []
        },
        {
            "key": "bTo6MTM=",
            "value": "eyJwcmVtaXVtIjp0cnVlLCJzZW5kZXIiOiJobngudGVzdG5ldCIsInRleHQiOiJzZCJ9",
            "proof": []
        },
        {
            "key": "bTo6MTQ=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoiamdoZy50ZXN0bmV0IiwidGV4dCI6IktoZyJ9",
            "proof": []
        },
        {
            "key": "bTo6MTU=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoiYWNjb3VudC50ZXN0bmV0IiwidGV4dCI6IldoZW4gSUNPPyJ9",
            "proof": []
        },
        {
            "key": "bTo6MTY=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoiYWNjb3VudC50ZXN0bmV0IiwidGV4dCI6IlRlc3QgMiJ9",
            "proof": []
        },
        {
            "key": "bTo6MTc=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoidGVzdC1kcm9wLTEwLnRlc3RuZXQiLCJ0ZXh0IjoiRnJlZSBtZXNzYWdlcyBhcmUgdGhlIGJlc3QifQ==",
            "proof": []
        },
        {
            "key": "bTo6MTg=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoidGVzdC1kcm9wLTEwLnRlc3RuZXQiLCJ0ZXh0IjoiV2hlbiBJQ08/In0=",
            "proof": []
        },
        {
            "key": "bTo6MTk=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoidGVzdC1kcm9wLTEwLnRlc3RuZXQiLCJ0ZXh0IjoiV2hlbiBJQ08/In0=",
            "proof": []
        },
        {
            "key": "bTo6Mg==",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoibnVsbCIsInRleHQiOiJ1bmRlZmluZWQifQ==",
            "proof": []
        },
        {
            "key": "bTo6MjA=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoidGVzdC04NDEudGVzdG5ldCIsInRleHQiOiJXaGVuIElDTz8ifQ==",
            "proof": []
        },
        {
            "key": "bTo6MjE=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoidGVzdC04NDEudGVzdG5ldCIsInRleHQiOiJoZXkgaGV5IGhleSJ9",
            "proof": []
        },
        {
            "key": "bTo6MjI=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoiam9zaGZvcmQudGVzdG5ldCIsInRleHQiOiJoaSJ9",
            "proof": []
        },
        {
            "key": "bTo6MjM=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoiam9zaGZvcmQudGVzdG5ldCIsInRleHQiOiJoaSB4MiJ9",
            "proof": []
        },
        {
            "key": "bTo6MjQ=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoibWFzdGVydGh5c2VsZi50ZXN0bmV0IiwidGV4dCI6ImhhbmRzaGFrZS5oYWNrbWVkb21haW4vICJ9",
            "proof": []
        },
        {
            "key": "bTo6MjU=",
            "value": "eyJwcmVtaXVtIjp0cnVlLCJzZW5kZXIiOiJtYXN0ZXJ0aHlzZWxmLnRlc3RuZXQiLCJ0ZXh0IjoiSGVsbG8gQ29zbW9zLCBob21lLmNvc21hdHJpeGNvbm5lY3Rpb25zLyJ9",
            "proof": []
        },
        {
            "key": "bTo6MjY=",
            "value": "eyJwcmVtaXVtIjp0cnVlLCJzZW5kZXIiOiJtYXN0ZXJ0aHlzZWxmLnRlc3RuZXQiLCJ0ZXh0IjoiYnVpbGQsIGJ1aWxkLCBidWlsZCBpIGNhbWUgdG8gYnVpbGQgYSBicmlkZ2UgaW4gUEVBQ0UsIHNvIGNvbWUgbGV0cyBidWlsZC4uLnNvbmcgYnkgXCJOYWhrbyBCZWFyXCIgIn0=",
            "proof": []
        },
        {
            "key": "bTo6Mjc=",
            "value": "eyJwcmVtaXVtIjp0cnVlLCJzZW5kZXIiOiJtYXN0ZXJ0aHlzZWxmLnRlc3RuZXQiLCJ0ZXh0IjoiYnVpbGQgYSBicmlkZ2UgKGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vdXJsP3NhPXQmcmN0PWomcT0mZXNyYz1zJnNvdXJjZT13ZWImY2Q9JmNhZD1yamEmdWFjdD04JnZlZD0yYWhVS0V3ajA0ZGlnMTlqckFoV05tbGtLSGR5X0FnUVEzeXd3QUhvRUNBVVFBZyZ1cmw9aHR0cHMlM0ElMkYlMkZ3d3cueW91dHViZS5jb20lMkZ3YXRjaCUzRnYlM0Rlb1RYNWZmOVplMCZ1c2c9QU92VmF3MFoxZzFIMkZzeF85d3FJSmg5RTk2UCkifQ==",
            "proof": []
        },
        {
            "key": "bTo6Mjg=",
            "value": "eyJwcmVtaXVtIjp0cnVlLCJzZW5kZXIiOiJtYXN0ZXJ0aHlzZWxmLnRlc3RuZXQiLCJ0ZXh0IjoiaHR0cDovL3RyaXBweS7wn42EbWFnaWMvIn0=",
            "proof": []
        },
        {
            "key": "bTo6Mjk=",
            "value": "eyJwcmVtaXVtIjp0cnVlLCJzZW5kZXIiOiJtYXN0ZXJ0aHlzZWxmLnRlc3RuZXQiLCJ0ZXh0IjoiaHR0cDovL3VuaXRlLnJhaW5ib3d0cmliZXMvIn0=",
            "proof": []
        },
        {
            "key": "bTo6Mw==",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoiam9zaGZvcmQudGVzdG5ldCIsInRleHQiOiJobW1tbW1tIn0=",
            "proof": []
        },
        {
            "key": "bTo6MzA=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoiZXhlbXBsYXJ5LnRlc3RuZXQiLCJ0ZXh0IjoiaGVsbG8ifQ==",
            "proof": []
        },
        {
            "key": "bTo6MzE=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoiYWRpMjMudGVzdG5ldCIsInRleHQiOiJobW0ifQ==",
            "proof": []
        },
        {
            "key": "bTo6MzI=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoiYWRpMjMudGVzdG5ldCIsInRleHQiOiJ3aGF0In0=",
            "proof": []
        },
        {
            "key": "bTo6MzM=",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoidmxhZGJhc2gudGVzdG5ldCIsInRleHQiOiJIaSJ9",
            "proof": []
        },
        {
            "key": "bTo6NA==",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoibnVsbCIsInRleHQiOiIgIn0=",
            "proof": []
        },
        {
            "key": "bTo6NQ==",
            "value": "eyJwcmVtaXVtIjp0cnVlLCJzZW5kZXIiOiJ0ZXN0YWNjb3VudDEudGVzdG5ldCIsInRleHQiOiJ0ZXN0In0=",
            "proof": []
        },
        {
            "key": "bTo6Ng==",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoiZXVnZW5ldGhlZHJlYW0iLCJ0ZXh0IjoibnVsbCJ9",
            "proof": []
        },
        {
            "key": "bTo6Nw==",
            "value": "eyJwcmVtaXVtIjpmYWxzZSwic2VuZGVyIjoiZGVtby50ZXN0bmV0IiwidGV4dCI6Ikkgb25seSB3cml0ZSBmcmVlIG1lc3NhZ2VzLiJ9",
            "proof": []
        },
        {
            "key": "bTo6OA==",
            "value": "eyJwcmVtaXVtIjp0cnVlLCJzZW5kZXIiOiJqb3NoZm9yZC50ZXN0bmV0IiwidGV4dCI6IkkgcHJlZmVyIHByZW1pdW0gbWVzc2FnZXMifQ==",
            "proof": []
        },
        {
            "key": "bTo6OQ==",
            "value": "eyJwcmVtaXVtIjp0cnVlLCJzZW5kZXIiOiJuZXdsZWRnZXIzLnRlc3RuZXQiLCJ0ZXh0IjoiTGVkZ2VyIn0=",
            "proof": []
        },
        {
            "key": "bTpsZW4=",
            "value": "MzQ=",
            "proof": []
        }
    ],
    "proof": [],
    "block_height": 17814234,
    "block_hash": "GT1D8nweVQU1zyCUv399x8vDv2ogVq71w17MyR66hXBB"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/accounts-contracts/view-account-changes.json ---
{
    "block_hash": "7vWp2djKLoJ3RE1sr8RzSKQtyzKpe2wZ7NCcDuFNuL7j",
    "changes": []
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/accounts-contracts/view-account.json ---
{
    "amount": "453230610709604472700000911",
    "locked": "0",
    "code_hash": "11111111111111111111111111111111",
    "storage_usage": 642,
    "storage_paid_at": 0,
    "block_height": 78439658,
    "block_hash": "5hyGx7LiGaeRiAN4RrKcGomi1QXHqZwKXFQf6xTmvUgb"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/accounts-contracts/view-contract-code-changes.json ---
{
    "block_hash": "HpsjZvjtuxarKRsXGVrgB6qtuCcHRgx3Xof1gfT2Jfj7",
    "changes": []
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/accounts-contracts/view-contract-code.json ---
{
    "code_base64": "",
    "hash": "9UnkWSYw6Bj9qkyV5jqtMBYYi7aHTaDUMaoU6dtJQRvy",
    "block_height": 78440518,
    "block_hash": "uLxyauKPhSk1tebYKi3k69pHSaT2ZLzWy4JwtGm52pu"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/accounts-contracts/view-contract-state-changes.json ---
{
    "block_hash": "5KgQ8uu17bhUPnMUbkmciHxbpFvsbhwdkJu4ptRfR7Zn",
    "changes": []
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/block-chunk/block-details-by-hash.json ---
{
    "author": "qweqaz.pool.f863973.m0",
    "header": {
        "height": 78770817,
        "prev_height": 78770816,
        "epoch_id": "BPr3imSnofpKS3th3e1LrKuJcThzQu6HKw89Wc5i9Y2z",
        "next_epoch_id": "8tJB4Vs38GGrUQDEYbB2DX3nUWuWJy6uQ7dKFRsU6d56",
        "hash": "FXTWzPjqWztjHfneqJb9cBDB2QLTY1Rja4GHrswAv1b9",
        "prev_hash": "EyjMHUFe8QckSJstGcfrRvKn1sX11JdSpnzaDKjfVuQZ",
        "prev_state_root": "BC1SuhgPSdjcRMmgjBWF6GwGaZEyoZACZweRtHBNcDas",
        "chunk_receipts_root": "FdK3p8eUMxeM1EEbY7Gd9yhdPxqhmDXoHMmVYupdHc34",
        "chunk_headers_root": "HYM5JuL2xf6XoE2urT5DX8scn6x9ZkwM7oxUFaCwkipB",
        "chunk_tx_root": "2DoUX6XsDr5BxRN821ZxTLYYcQBzSSxPMTqMU4TLfu35",
        "outcome_root": "CUaAqjyGzRHt9ELem4D4hcE8F3Prok8NhWkx3iKj97sf",
        "chunks_included": 4,
        "challenges_root": "11111111111111111111111111111111",
        "timestamp": 1642089794876142949,
        "timestamp_nanosec": "1642089794876142949",
        "random_value": "32E15hymJLPNRL69Hh1cmwV8Z9htzw6k4CduLE7P5viH",
        "validator_proposals": [],
        "chunk_mask": [
            true,
            true,
            true,
            true
        ],
        "gas_price": "100000000",
        "block_ordinal": 34860619,
        "rent_paid": "0",
        "validator_reward": "0",
        "total_supply": "2172385574051157258697410367239765",
        "challenges_result": [],
        "last_final_block": "EiPaiWibzUCEsrN558ZNdYt771CKLHjLyVidSKuHd3ZG",
        "last_ds_final_block": "EyjMHUFe8QckSJstGcfrRvKn1sX11JdSpnzaDKjfVuQZ",
        "next_bp_hash": "8NpYmuF3XfAAJ45hvUwHCwC2bmpiQGmPJJPaW5q7HfMx",
        "block_merkle_root": "HMEcXUVyPH7UpvASVwWqqDbSQeKx3DGEFJAKoeCjYy2u",
        "epoch_sync_data_hash": null,
        "approvals": [
            "ed25519:2od4b8dFxRRWZLf1owypxwmozfkbHeAeZyoGpT4Q1U8PSQB8wJtgFcmb4F2uipuYVZDKPGRLESdFS5Guv7uBycYx",
            null,
            "ed25519:2od4b8dFxRRWZLf1owypxwmozfkbHeAeZyoGpT4Q1U8PSQB8wJtgFcmb4F2uipuYVZDKPGRLESdFS5Guv7uBycYx",
            "ed25519:2od4b8dFxRRWZLf1owypxwmozfkbHeAeZyoGpT4Q1U8PSQB8wJtgFcmb4F2uipuYVZDKPGRLESdFS5Guv7uBycYx",
            null,
            "ed25519:2mFtmoThUskRZmVMLnysRnKDLg4rVaK72anmfk2XZb7skbAeGCDE4ryxWNUdrbdtBuY3s1KeDH3yyWP6Dpj18tWr",
            "ed25519:4T7JAkeRvu57GFmKn7un54sSCYeLcqh6hSJLfMztRkHsAXD1pV156zZjHFDYwvjYLbeNiikPkw9izWLvh6qXNnB2",
            "ed25519:2qnUNCaFvR2k6fKuoC4ToZSHp5y2VeFNdXf238X5PCcUrMNF8A61XDV1MaqPME1msAhGfh54DfuQdog847NRYzsy",
            "ed25519:UfjAzQpjJgrGxqRPNeUsu3Nqtd4mMyiz61kS8bY3STCbqcvq5DGvLaMk53p7C4xVURfLmk9BfKXgNqQBuVtEuuy",
            null,
            "ed25519:5fAHua8npHbdFScKCKZrakzKMoWC6HF3NbTD2cqeywPWw4PHthNYnePJ1yG9fo7sT7AkW5wsVh9G7tXcUBFuiChB",
            null,
            "ed25519:FwZdsGttHqMQhb1FKNGZ8EpUEM8BocawzM99d4KsJME5w5TR9RxhELsN5rNyLSyjwTaMf95mZFD7n7BKHrtzugk",
            "ed25519:Q3WWf21cQ1rLkSZE2mG1fatKkWcBkjWeeJWLsfJuXxdTevmi1dFSGkcXC6wZVsSSTXYmWwXKQFjPu6TJCnxonWf",
            null,
            null,
            "ed25519:3VEtcJUV5U3E6Hm4scrNnT4hhUYNMzwbGTWzsmJSrhnSipcRGwCRVTVADKEJPaTMn6Q4AottaKMo6246dgyuf9gf",
            "ed25519:3T2wWzY63DiudqsGj2fnhpSKRCwa6DhaTRqapy2Lc8u861SffaZ1ffQqQpTiduSbW7MzydSkoduwzENtVioqJj7W",
            "ed25519:5aobgSCQoVr5J8juvsZTLsoHoa1bF9VSefriNdVgPU495qEvkwkC3jpCfVEtHJ7iBBEsu24TYBx2HAqf44v9taCM",
            "ed25519:34vyhnGgeNnbMZiwDFvb2APMz8YM9DbCJBbnL55g7FRncco9ttm4p5RdocAKdeTi7TaRhoMndTvvRmdG2m3hPijH",
            "ed25519:4hekJqfvDEbiy6g1DJLpsgjWmTEhu4RsitPhxvaxtJmks3AmVjAKDhFb5ee6nT4WXmfxfYr1gyAX1cmtR2Y8vXse",
            "ed25519:32sjv83GWfsjn1qMJdhJ7udb1ri1oqQBcpniXGDHEk8FmY6UnWTK1pyEbym9B6baEF7qApeL5MXRiDgdKvtcRt4d",
            null,
            "ed25519:4XrN8pBCDL19tr8YPEpw4cGkGjL1n9KNCJcmTcdRPRQaUBrUyAA9SDYX27W6jTD2AgKpkLuZaZJDKdX2oiznyrp7",
            "ed25519:2AVG7SsznenC7C88LHKd6zsphuVgsJZ1qK45iVimwHLo7LCMmBCDpfhLU7bsqjG17KzKdtDGvtVjU1vSjw6vDeJr",
            "ed25519:4H5LK6YiaeRzKQc2EmXURt4SQFrqTCCaHkuRELMDL51KVymjo4e42QzJgdvcEqpJYnMj7pCTYXF3LQmUtAgrHroG",
            "ed25519:5tH8PS1xmbNRNgGpKfXH5teNC8m3aTx3zcfJG5Y3yu6n4qqWwETGGXLGM6ZoN1FagHdU46z73zw5VwahWvdrRASJ",
            "ed25519:X6Fs5opkXQNT3LDXxzpqKcSpQUbjGe22Mm1CBC2Tzv51KuW92hpjGTdF5jN4ak6SyZykwKX5JvXr7z5ApwsNQQp",
            "ed25519:2MgfwzmH22ZwjRQUB6wht1QguRRdWwafwWmgWqTYUJKKQhHReyewCc4VwCMHTGEAKNn4z73KLQX4hTg2gQJvy1h9",
            "ed25519:2yk8LcDBAFjPtAsmFZRT9iGoNbED7zUS8AxJYWyBnFKdmTT8HHz1zqrcK7HXTUv5TUG8jhyTasyDjAtzjyU5S24r",
            "ed25519:4dbLM2bjwVjMoC7bEghGzfoKzrssaLqgn8vYzjJqwv2fzoxNnp8f7Rx9vzyz4XeR8vUAAs5aD9c7yMqfJLShzoFW",
            "ed25519:15csHhbjXtTLwKJnYKEdT6Qik2ownUmdM5atze8vSdJ6Sh2qfNbQZrV6Dj2SRmuaojNYbdpiTwQWSKzYigtdaLY",
            "ed25519:rSUezjBckiojhDY1nrMdHPFJm1L5bqCEuRFjE4S8wUraqotDsGvJJkRgFFv4Nr8XbRWX3t4PQjdUJScEkQ6Rtd7",
            null,
            "ed25519:5oYXt1dDTyUANzz1dXjNmgTqLsrygydzRdjSRd76YThpiZhVfWrciXYZuL7DjGPcPuBXrGoBEJqDkuLPAByd5Q53",
            null,
            "ed25519:47sBe1zNiLq94RXDLB6WDSu9JfE2S5VLZ2nVPo2gWYXRFVd4Qa6fFbRvJVdVUKYEZYpjtJRo8u2gMbdaJPP1mMod",
            "ed25519:qWbASgv935dJG9mTvKHikb1rS293U1ffkCRywqjUDgaYtqKCnA1YPS2PeTubcRNms2cVDLMS2VUUa2AjJb5Crjn",
            null,
            "ed25519:4VMSYm96PXeTSbSV5JXh7U5sCFN3vV3sm4HWa2ENmSM8tjDUqY895aa7KK5c7uSgLk5cjMH8nFQCk1MQvow4sxer",
            null,
            "ed25519:42hA63WNtPuSNkbS9KXTaeMpgkwbrKGArv7pmsmEGdDXkFd8xwD4RmM5gXXvrUAKb5xiHvshgiJ7sRhrnDG8Vemg",
            "ed25519:ssLY6H7ri2R8Pwv2fG4cbwWrqhyzRd4LqCw6BvNX84PKb7xgSE93rjaT3Hk7ekv7v8p6833jxDBho6SgAusQNYQ",
            "ed25519:sxpD8JzBEypW5peSxEfiarNa578foYXHsghiVg9c4DdkcT3mudDyXcjfrt7uiwM2xF4jsUYrLwm61icMKw62U3P",
            "ed25519:5jmyYWNpawksS3LGYfEYcMxkjJWJComnkQBipdmqpDYJjxCTA5uXxbBTw9F2Zibx8Fpxp663n9Xid4ZxVhvjkLyw",
            "ed25519:2UvHr8ympnmK6Npen7zMtfm6G7Zz5ZsWHPCJAcPPntECHq3TBykDtzzuCuJC5wXcuAuUkG7oSDAyBPvQZwspWKnS",
            null,
            "ed25519:xrLoxs88ABzGJrrgY3GLv9aEd345KBQb7mMkML5EkTyRwKk1tkczAhveL8xre5qebX9ovqtMvWpCFMABYgNT5m7",
            null,
            "ed25519:2GA47EmBbw2W6NPa1ZKT6JCHXj94VRfyP9eJRtFeVnDDsonnaPhyz54JdJnq4v4bx3sZV4uvpsiGhKQGUw9ipiQh",
            "ed25519:36DRv2NM3QNgMneaQnJ7Q3YLTvaEc9T4vj8NPFp1CKnSdAmktSnupT1hm5sPoG7n7qWcUndsPVPjav27NFA53QCY",
            "ed25519:4ExrUcEuugQZ5yJ9WQJCRdc1kjmNHqgSyobKwN757BLgiVeXwXFE1X1hPdz6TMqcwqFe8HDoLsGVjnm3vJ8a3REv",
            "ed25519:5YQ5ETUBy1vK8nybzGJ7yvD5j22osCiEoJzZfgaMR6w454bFLGwWd3AAGcmkFAvsHuHqn1nXEy5pDpkHSgpQ9PMV",
            null,
            "ed25519:5eF1BPL2ZiRDxbLRCfzzZjzUAEbQPeMJ6zq92EJfuS9JW3RrRPXEG8tZ14PsbYk4HZUDNoGZKvrisVbUeCJMNXwi",
            "ed25519:LpWZZJkA1N7iM84gtftHwLHzBcS7vctpJk8Q93HHm8sbcEwccMAfuok5BT3daQxJLdEsUps5EXiv6LTMRjVgYGq",
            "ed25519:46pmB92wG49RzmMQ54XAWxS3CNwNjyEfZHpGycT9QRg3TLriY2svPyp9f4V9MRy4KHScJqNJy26Dj8bLJ7BAgk5n",
            "ed25519:5VRPSiRtok7SKPA9WJvccKSKT6GMjpwybxp9xHLpRy6Cd1b4E8fNRQZGWvw3Z2FYN7jSiSotVSByngSKpAnrrpkQ",
            "ed25519:41om7j6Bj9CTcS8tvBouTTc9b8uEF1hmGTu7UKx1U6mdHBP77oFhRNGzsyen24gRcFsDeQh6uy1hzaRYknnLp5A9",
            "ed25519:YjKjpUMDkAPQ5EQEVv3rJqwg71cGPpRWH93YvuE3iR7jFz6KE3ybVv6cKPY4k3F6vW11z8cQ6VrBuXFTpkCECU4",
            null,
            null,
            "ed25519:5jVus2Zg4BzgZkeU2todQfRM9MsnVqsjbdiq8ipBqQKBLMDXAfJZV6pdnsndjj4VRZkPrcSKMkCv1VSskP9ejJN1",
            null,
            "ed25519:3Q9ocep1NBNjZNuGc3yUrR9B9u13PkXQ4RTSvPCXEUXAZ7csmXzoGaPbHrfdAuQTNzTs5pT33FCTYxWGEYEFM1Rr",
            null,
            null,
            "ed25519:4CPvW3b9ypHM3YbuUs5ntukqFLsZ5HGmbA2cyxcfuReAgfbNxR9gyqW1vhcBxtWuJmaeAzCCC9wRG2uBjkcRJKfY",
            "ed25519:3oy1HRLhAStuLeAVZWCq6uhDzrDifGdPLqCxmQyabCz8PSkeBQGym3EMxpdHNwiqzsqCueuAa1tJ7SFSpPjaZon9",
            "ed25519:5E3ALoYACWZTUTkKGycBsbK3UdGUcMNhK4Ze3zqdjEwt1yCHb2Hrvj17pMj12fQosHS3i72eWfrWo2n8bqz8oKw2",
            "ed25519:2bwQGfsbdKFjvscTd7HnycKX7qKgwPKxcnHM11d7hmRtJm8Mb7PaMAVsVaXUPhhekCUkvHhHAKN9ijSu5jTtwWxb",
            "ed25519:vnCfFAgoVRKDcG4quWkarv5qbjJDjBU9HMi1ksZLW9qLo8PciGzxpVCwsXLh8NYJZQCZ6rmrXMewCJV7rxf4xSq",
            "ed25519:5UVBjfsSDVLQkEZkTVjGmSZHfLUuqnPqCDibaxeAxmBz9jiuToWjJzirF7exRzar6PqEqoYw2UAeDYmKKwaUGRx8",
            "ed25519:5drpdnyrHcBozkre878uT6cjHuz6DMTVXmy67aoG8UzJvoVneYYsUw6zB3jnMEVijSp4FjztTNNWzxirh43yeME5",
            null,
            "ed25519:CGmir5B62MJfanoPhGAW9uRoCv1paNL2s3JfcjRRDgoygf4EC3fH9ofnSgTieuvNuPv8ni6mhgn3F3vwFv2CxgG",
            "ed25519:UgHfEuB4YXmFtor6FyxjSw3rMGYmy71YC3SkgmJ6Nhy7ux8urAL6kkwoUU541tzBPSGsh2uxyz31b3QdvabUA3Y",
            "ed25519:3LLGZ3kMzXHykHMNKvRxzUYgp25Sf8HkdtK2fY1xorm4DTkQP761NTyo2J6PAXdBLddWtKkd83G2JdfVM1g5Wqr1",
            "ed25519:E6aRmzsg5XvKoLMURqXQp9skN7FLYL8BNj76nc1FDbgqgLsfpNgnZaWhCyRDVNsYvnnNbYEexRXUNeFbJUQAs5T",
            "ed25519:5fhiD7rKgrZqLAxHYxWki1Q3jHTuMs58c9NQcM7msfcywfbgNruNLQit16ANCnc5vxaQT6TUyjz2jTMMFbcvLzdm",
            "ed25519:65cwzvo86wCUKFw8PCLC2zXj4VAdSjw574h9qSERCvfmX8q3VXosEVFYwhJCckiBqaoSmjaGze2sdTnuqFL7Vs4m",
            null,
            "ed25519:5FRyT1z9pb5MUHR9zqknagFe31gqdBv4teeQttEQRf8tP6mjKkBd384G3yWBJYKDRjZ9Pjzdmo9mb7fP3ABaWEKA",
            null,
            "ed25519:4jiEVPKhcSV6kGYqHo5VrMpJtw2gAFcB5FWjAH4hCCGYc2gyfNTdKAfsPYAjU2CEzZAXDKckp28QttYDf64ufCmr",
            "ed25519:BFNScVhQrZt63KZMqMkyZbHUKuerryxhoESwCAQ4Zxk2dGHfMqpjZ4YeoWugLfdLZmJDGhPyQsdeWZ9nysyx2Jy",
            "ed25519:2zzMwdqwPkMA5xJmJvEoJi4pw7WqiyPJ4MsR89Dih3BdYx178uyWuqccfi5hrZx3eh6Q8m7xrPoopHMUW21ZC6kd",
            "ed25519:4xMrTsukZoDYXn94Hn4SExw7VtNvZ6SmWHRGb5s8n5kxVyrMtGtQ4GmJj7UCyVa4YyeftXmBdg7DP95Gga7ZWfau",
            null,
            "ed25519:2mc98nbt7xCq6Ts6Uv75PYVhksLEst7QbofF3swSJZ1Zt3xegXAsEG95r2tHUU66b64YJo3Tva9VehQNJgaZuqrq",
            "ed25519:urYYZkE1NKfZjPM4Lr3wY9688gFKAvxbavs6W3UouV4JbtDnLmhcJ5gm88ftbhK66P2rUAopUv1wnU69pucsuoE",
            "ed25519:3h2LnEE1FBh54bCv2NtxHabcY724SjnSZFXLQ7bYyqQJYfMDSC9XaoxnkciD6HoDrNXqjbFctjDn6FDNqVqFjJPz",
            "ed25519:3N9KRjdq32GC7Bsm1bS3HpiXEy5sTsF4jHxyYHjGEV5FMvvn1PxdmprvS74WCyqa6FFTqst2GeLx4LaVsUzHEv6C",
            "ed25519:63uBcpck5kJRmkTtVJPuZb3e6iVHVyZPd2LuEb3mhvaDfCjA41FqAcgbFDLjDYePrq5FLSR8zoJuJCdmsipKyaJA",
            "ed25519:4DGDysTiKKLXrsGgswL9e7DHf84jm4mK4CqMadspah2Kyk13txww6vM9i4hHTuBoEvMJ1WH3PK3jL9Ec8JonKU5q",
            "ed25519:4qZRTCxQJaWJc7Nh1jjEkBwo31eUZeGvkksLh1txdnAMuxgE3gQy1JQ4RLivN71zBubBLbY87LoNBF7E9KtyjfKt",
            "ed25519:2KppF3KTZjkHrVFmiG2yVcqYrJuNZSoczyzPnYL7vfEeg6xzFkFHPrKddybS3bkhEkBXbeQVLCjUSVR5dL17hMg9",
            "ed25519:4oNiX48ktzZziU8qbAMhyVhnP2t4RqnFYQMA4sHvXKn2bk7tqS5CqDicQkvX2xGJECY4awM5tqeGYhd27xPzKpj8",
            "ed25519:22Fi7xQuu25CKEfyG4UxFBTbrz98JcKEGb3nVRgmSCQkZvmtURN7mJzRK5XwQ6xrrnvfh3mEt1frsRYdw9VaHL2S",
            "ed25519:5njjjYqJyykYhPXDTmTQ8k462tnSA8bJWDrtsv2CB6Yqa9pw7KhbbUxF9EATMFqb4Uoqkjh5FwhusiFQfHKFgaUD",
            "ed25519:3bFiVH3NDqMzcohszXa8HXwaRz4L2deLnmC5h9WikuUEVzGpqvmKc79jCamzrFLmsfn5y8RQ8VDmsMbVSaYKFmFw",
            "ed25519:389LdDetF9SFqHcqTzEXTTE6itJtAUmjiuEanTN5pqFndWqdGQv4CGZ3rYv7fPnvDAiUsMiSqECyTnHNF7J4Qs5h",
            null,
            "ed25519:4MPDy4uvou87jZkzHBYnCicqJSL2SMQC3heo8RbgJasJRzhHR8oZ7Jj6xWJ9HHTT1RSsaq6Kt5xkjjN8GyKKYpSF",
            null,
            "ed25519:5D6iwUBaoaRHCwVPv4vNpDWc2pKzyT5QeN17JyYziZUaZWMbAXbovbjAB1oqwkqeXwpehBBe9qQVnmCCHsEHDZgy",
            null
        ],
        "signature": "ed25519:4ARAjfLTRnRjUpmksRzwqeWeYLaKg1GprL7o1s6HnAjevMCrxgUBBdh1ur6w1UNBppaB8uU2zw7MycEySVCqZqbu",
        "latest_protocol_version": 50
    },
    "chunks": [
        {
            "chunk_hash": "48niqSYLx9kTgQ7fzy7F356ysVFsBXf4xnYqkVPW8N9A",
            "prev_block_hash": "EyjMHUFe8QckSJstGcfrRvKn1sX11JdSpnzaDKjfVuQZ",
            "outcome_root": "11111111111111111111111111111111",
            "prev_state_root": "7UuoLCUNbGJ69oQswm4euaxxxPQbSGno5sShuKqQ5KeL",
            "encoded_merkle_root": "5TxYudsfZd2FZoMyJEZAP19ASov2ZD43N8ZWv8mKzWgx",
            "encoded_length": 8,
            "height_created": 78770817,
            "height_included": 78770817,
            "shard_id": 0,
            "gas_used": 0,
            "gas_limit": 1000000000000000,
            "rent_paid": "0",
            "validator_reward": "0",
            "balance_burnt": "0",
            "outgoing_receipts_root": "8s41rye686T2ronWmFE38ji19vgeb6uPxjYMPt8y8pSV",
            "tx_root": "11111111111111111111111111111111",
            "validator_proposals": [],
            "signature": "ed25519:Mta5daKaxRGwRjP42PPccGzHx72SbwLiWuQ8RweHVFF4nkKb3S3QRBaoufyAU5ikd8M2hfeQhXSahaaGVe5M4t8"
        },
        {
            "chunk_hash": "4njECAs47N43jARjRmffaTTFscgiKz6PGDczccfA4Bb2",
            "prev_block_hash": "EyjMHUFe8QckSJstGcfrRvKn1sX11JdSpnzaDKjfVuQZ",
            "outcome_root": "11111111111111111111111111111111",
            "prev_state_root": "EaKNyf9n1uNx2RV3Fb2uknGXUnsc7cDVqCEm8YUAk2mk",
            "encoded_merkle_root": "5TxYudsfZd2FZoMyJEZAP19ASov2ZD43N8ZWv8mKzWgx",
            "encoded_length": 8,
            "height_created": 78770817,
            "height_included": 78770817,
            "shard_id": 1,
            "gas_used": 0,
            "gas_limit": 1000000000000000,
            "rent_paid": "0",
            "validator_reward": "0",
            "balance_burnt": "0",
            "outgoing_receipts_root": "8s41rye686T2ronWmFE38ji19vgeb6uPxjYMPt8y8pSV",
            "tx_root": "11111111111111111111111111111111",
            "validator_proposals": [],
            "signature": "ed25519:5NXYHVbn9ZA8Y49hjAeRzMfme1cnp8gw6fCXNtYkNCi5xB3x9UftJVWE1opr3bm7PNog89vUUFy5KGrnHUs9EZuu"
        },
        {
            "chunk_hash": "Pjx3TkSGU5wtFRTdFYo87cWfrGR883JsTJiv3qx716N",
            "prev_block_hash": "EyjMHUFe8QckSJstGcfrRvKn1sX11JdSpnzaDKjfVuQZ",
            "outcome_root": "EjtsQXbMNwuk4muefHhnkn7riBsL59eUAFqeQD2MjR1m",
            "prev_state_root": "6qRtvMKnX2PfqZBQEiJ9CSeUFgSw8UAGDiGdgDXcgc56",
            "encoded_merkle_root": "5TxYudsfZd2FZoMyJEZAP19ASov2ZD43N8ZWv8mKzWgx",
            "encoded_length": 8,
            "height_created": 78770817,
            "height_included": 78770817,
            "shard_id": 2,
            "gas_used": 223182562500,
            "gas_limit": 1000000000000000,
            "rent_paid": "0",
            "validator_reward": "0",
            "balance_burnt": "0",
            "outgoing_receipts_root": "8s41rye686T2ronWmFE38ji19vgeb6uPxjYMPt8y8pSV",
            "tx_root": "11111111111111111111111111111111",
            "validator_proposals": [],
            "signature": "ed25519:3XibobaVFw6bjkEAEgpkBcyyHbTM8EXrp2xW3HLPAniTqDMiCVDGgbgPYQsnC86bqsLWKA7u5kXpyEb621z7UcBW"
        },
        {
            "chunk_hash": "f2CYYAm7CaniHNRW7Cg8VNBHa3TdjoJY7FJYW8rUKb2",
            "prev_block_hash": "EyjMHUFe8QckSJstGcfrRvKn1sX11JdSpnzaDKjfVuQZ",
            "outcome_root": "GRFYjANrg8wrBPffSouWDTp3e9bNGacmhmjCzvYS3M3R",
            "prev_state_root": "HUKrrDEBPY8fM4GKMNGot2cyaH4gJZ7D3HpqzDPM5VXu",
            "encoded_merkle_root": "FRainjVKEdUNSQDByzaJhXxMfwdFWPJARDRtCWeexZcq",
            "encoded_length": 376,
            "height_created": 78770817,
            "height_included": 78770817,
            "shard_id": 3,
            "gas_used": 2428348063394,
            "gas_limit": 1000000000000000,
            "rent_paid": "0",
            "validator_reward": "0",
            "balance_burnt": "242834806339400000000",
            "outgoing_receipts_root": "6MV1mMeBJFX3AnTrj2ThmE93DW3pxaArBBNg6ZsfnvWT",
            "tx_root": "11111111111111111111111111111111",
            "validator_proposals": [],
            "signature": "ed25519:4jofJ9ctF3Qgcb2JZfhZ86xTHWnXAjYDN3JhNRc9q5E7ypoamhturbKZBAyzgj7PTP7K1NkcLYaGLyWa8BFZsFGL"
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/block-chunk/block-details-by-height.json ---
{
    "author": "qweqaz.pool.f863973.m0",
    "header": {
        "height": 78770817,
        "prev_height": 78770816,
        "epoch_id": "BPr3imSnofpKS3th3e1LrKuJcThzQu6HKw89Wc5i9Y2z",
        "next_epoch_id": "8tJB4Vs38GGrUQDEYbB2DX3nUWuWJy6uQ7dKFRsU6d56",
        "hash": "FXTWzPjqWztjHfneqJb9cBDB2QLTY1Rja4GHrswAv1b9",
        "prev_hash": "EyjMHUFe8QckSJstGcfrRvKn1sX11JdSpnzaDKjfVuQZ",
        "prev_state_root": "BC1SuhgPSdjcRMmgjBWF6GwGaZEyoZACZweRtHBNcDas",
        "chunk_receipts_root": "FdK3p8eUMxeM1EEbY7Gd9yhdPxqhmDXoHMmVYupdHc34",
        "chunk_headers_root": "HYM5JuL2xf6XoE2urT5DX8scn6x9ZkwM7oxUFaCwkipB",
        "chunk_tx_root": "2DoUX6XsDr5BxRN821ZxTLYYcQBzSSxPMTqMU4TLfu35",
        "outcome_root": "CUaAqjyGzRHt9ELem4D4hcE8F3Prok8NhWkx3iKj97sf",
        "chunks_included": 4,
        "challenges_root": "11111111111111111111111111111111",
        "timestamp": 1642089794876142949,
        "timestamp_nanosec": "1642089794876142949",
        "random_value": "32E15hymJLPNRL69Hh1cmwV8Z9htzw6k4CduLE7P5viH",
        "validator_proposals": [],
        "chunk_mask": [
            true,
            true,
            true,
            true
        ],
        "gas_price": "100000000",
        "block_ordinal": 34860619,
        "rent_paid": "0",
        "validator_reward": "0",
        "total_supply": "2172385574051157258697410367239765",
        "challenges_result": [],
        "last_final_block": "EiPaiWibzUCEsrN558ZNdYt771CKLHjLyVidSKuHd3ZG",
        "last_ds_final_block": "EyjMHUFe8QckSJstGcfrRvKn1sX11JdSpnzaDKjfVuQZ",
        "next_bp_hash": "8NpYmuF3XfAAJ45hvUwHCwC2bmpiQGmPJJPaW5q7HfMx",
        "block_merkle_root": "HMEcXUVyPH7UpvASVwWqqDbSQeKx3DGEFJAKoeCjYy2u",
        "epoch_sync_data_hash": null,
        "approvals": [
            "ed25519:2od4b8dFxRRWZLf1owypxwmozfkbHeAeZyoGpT4Q1U8PSQB8wJtgFcmb4F2uipuYVZDKPGRLESdFS5Guv7uBycYx",
            null,
            "ed25519:2od4b8dFxRRWZLf1owypxwmozfkbHeAeZyoGpT4Q1U8PSQB8wJtgFcmb4F2uipuYVZDKPGRLESdFS5Guv7uBycYx",
            "ed25519:2od4b8dFxRRWZLf1owypxwmozfkbHeAeZyoGpT4Q1U8PSQB8wJtgFcmb4F2uipuYVZDKPGRLESdFS5Guv7uBycYx",
            null,
            "ed25519:2mFtmoThUskRZmVMLnysRnKDLg4rVaK72anmfk2XZb7skbAeGCDE4ryxWNUdrbdtBuY3s1KeDH3yyWP6Dpj18tWr",
            "ed25519:4T7JAkeRvu57GFmKn7un54sSCYeLcqh6hSJLfMztRkHsAXD1pV156zZjHFDYwvjYLbeNiikPkw9izWLvh6qXNnB2",
            "ed25519:2qnUNCaFvR2k6fKuoC4ToZSHp5y2VeFNdXf238X5PCcUrMNF8A61XDV1MaqPME1msAhGfh54DfuQdog847NRYzsy",
            "ed25519:UfjAzQpjJgrGxqRPNeUsu3Nqtd4mMyiz61kS8bY3STCbqcvq5DGvLaMk53p7C4xVURfLmk9BfKXgNqQBuVtEuuy",
            null,
            "ed25519:5fAHua8npHbdFScKCKZrakzKMoWC6HF3NbTD2cqeywPWw4PHthNYnePJ1yG9fo7sT7AkW5wsVh9G7tXcUBFuiChB",
            null,
            "ed25519:FwZdsGttHqMQhb1FKNGZ8EpUEM8BocawzM99d4KsJME5w5TR9RxhELsN5rNyLSyjwTaMf95mZFD7n7BKHrtzugk",
            "ed25519:Q3WWf21cQ1rLkSZE2mG1fatKkWcBkjWeeJWLsfJuXxdTevmi1dFSGkcXC6wZVsSSTXYmWwXKQFjPu6TJCnxonWf",
            null,
            null,
            "ed25519:3VEtcJUV5U3E6Hm4scrNnT4hhUYNMzwbGTWzsmJSrhnSipcRGwCRVTVADKEJPaTMn6Q4AottaKMo6246dgyuf9gf",
            "ed25519:3T2wWzY63DiudqsGj2fnhpSKRCwa6DhaTRqapy2Lc8u861SffaZ1ffQqQpTiduSbW7MzydSkoduwzENtVioqJj7W",
            "ed25519:5aobgSCQoVr5J8juvsZTLsoHoa1bF9VSefriNdVgPU495qEvkwkC3jpCfVEtHJ7iBBEsu24TYBx2HAqf44v9taCM",
            "ed25519:34vyhnGgeNnbMZiwDFvb2APMz8YM9DbCJBbnL55g7FRncco9ttm4p5RdocAKdeTi7TaRhoMndTvvRmdG2m3hPijH",
            "ed25519:4hekJqfvDEbiy6g1DJLpsgjWmTEhu4RsitPhxvaxtJmks3AmVjAKDhFb5ee6nT4WXmfxfYr1gyAX1cmtR2Y8vXse",
            "ed25519:32sjv83GWfsjn1qMJdhJ7udb1ri1oqQBcpniXGDHEk8FmY6UnWTK1pyEbym9B6baEF7qApeL5MXRiDgdKvtcRt4d",
            null,
            "ed25519:4XrN8pBCDL19tr8YPEpw4cGkGjL1n9KNCJcmTcdRPRQaUBrUyAA9SDYX27W6jTD2AgKpkLuZaZJDKdX2oiznyrp7",
            "ed25519:2AVG7SsznenC7C88LHKd6zsphuVgsJZ1qK45iVimwHLo7LCMmBCDpfhLU7bsqjG17KzKdtDGvtVjU1vSjw6vDeJr",
            "ed25519:4H5LK6YiaeRzKQc2EmXURt4SQFrqTCCaHkuRELMDL51KVymjo4e42QzJgdvcEqpJYnMj7pCTYXF3LQmUtAgrHroG",
            "ed25519:5tH8PS1xmbNRNgGpKfXH5teNC8m3aTx3zcfJG5Y3yu6n4qqWwETGGXLGM6ZoN1FagHdU46z73zw5VwahWvdrRASJ",
            "ed25519:X6Fs5opkXQNT3LDXxzpqKcSpQUbjGe22Mm1CBC2Tzv51KuW92hpjGTdF5jN4ak6SyZykwKX5JvXr7z5ApwsNQQp",
            "ed25519:2MgfwzmH22ZwjRQUB6wht1QguRRdWwafwWmgWqTYUJKKQhHReyewCc4VwCMHTGEAKNn4z73KLQX4hTg2gQJvy1h9",
            "ed25519:2yk8LcDBAFjPtAsmFZRT9iGoNbED7zUS8AxJYWyBnFKdmTT8HHz1zqrcK7HXTUv5TUG8jhyTasyDjAtzjyU5S24r",
            "ed25519:4dbLM2bjwVjMoC7bEghGzfoKzrssaLqgn8vYzjJqwv2fzoxNnp8f7Rx9vzyz4XeR8vUAAs5aD9c7yMqfJLShzoFW",
            "ed25519:15csHhbjXtTLwKJnYKEdT6Qik2ownUmdM5atze8vSdJ6Sh2qfNbQZrV6Dj2SRmuaojNYbdpiTwQWSKzYigtdaLY",
            "ed25519:rSUezjBckiojhDY1nrMdHPFJm1L5bqCEuRFjE4S8wUraqotDsGvJJkRgFFv4Nr8XbRWX3t4PQjdUJScEkQ6Rtd7",
            null,
            "ed25519:5oYXt1dDTyUANzz1dXjNmgTqLsrygydzRdjSRd76YThpiZhVfWrciXYZuL7DjGPcPuBXrGoBEJqDkuLPAByd5Q53",
            null,
            "ed25519:47sBe1zNiLq94RXDLB6WDSu9JfE2S5VLZ2nVPo2gWYXRFVd4Qa6fFbRvJVdVUKYEZYpjtJRo8u2gMbdaJPP1mMod",
            "ed25519:qWbASgv935dJG9mTvKHikb1rS293U1ffkCRywqjUDgaYtqKCnA1YPS2PeTubcRNms2cVDLMS2VUUa2AjJb5Crjn",
            null,
            "ed25519:4VMSYm96PXeTSbSV5JXh7U5sCFN3vV3sm4HWa2ENmSM8tjDUqY895aa7KK5c7uSgLk5cjMH8nFQCk1MQvow4sxer",
            null,
            "ed25519:42hA63WNtPuSNkbS9KXTaeMpgkwbrKGArv7pmsmEGdDXkFd8xwD4RmM5gXXvrUAKb5xiHvshgiJ7sRhrnDG8Vemg",
            "ed25519:ssLY6H7ri2R8Pwv2fG4cbwWrqhyzRd4LqCw6BvNX84PKb7xgSE93rjaT3Hk7ekv7v8p6833jxDBho6SgAusQNYQ",
            "ed25519:sxpD8JzBEypW5peSxEfiarNa578foYXHsghiVg9c4DdkcT3mudDyXcjfrt7uiwM2xF4jsUYrLwm61icMKw62U3P",
            "ed25519:5jmyYWNpawksS3LGYfEYcMxkjJWJComnkQBipdmqpDYJjxCTA5uXxbBTw9F2Zibx8Fpxp663n9Xid4ZxVhvjkLyw",
            "ed25519:2UvHr8ympnmK6Npen7zMtfm6G7Zz5ZsWHPCJAcPPntECHq3TBykDtzzuCuJC5wXcuAuUkG7oSDAyBPvQZwspWKnS",
            null,
            "ed25519:xrLoxs88ABzGJrrgY3GLv9aEd345KBQb7mMkML5EkTyRwKk1tkczAhveL8xre5qebX9ovqtMvWpCFMABYgNT5m7",
            null,
            "ed25519:2GA47EmBbw2W6NPa1ZKT6JCHXj94VRfyP9eJRtFeVnDDsonnaPhyz54JdJnq4v4bx3sZV4uvpsiGhKQGUw9ipiQh",
            "ed25519:36DRv2NM3QNgMneaQnJ7Q3YLTvaEc9T4vj8NPFp1CKnSdAmktSnupT1hm5sPoG7n7qWcUndsPVPjav27NFA53QCY",
            "ed25519:4ExrUcEuugQZ5yJ9WQJCRdc1kjmNHqgSyobKwN757BLgiVeXwXFE1X1hPdz6TMqcwqFe8HDoLsGVjnm3vJ8a3REv",
            "ed25519:5YQ5ETUBy1vK8nybzGJ7yvD5j22osCiEoJzZfgaMR6w454bFLGwWd3AAGcmkFAvsHuHqn1nXEy5pDpkHSgpQ9PMV",
            null,
            "ed25519:5eF1BPL2ZiRDxbLRCfzzZjzUAEbQPeMJ6zq92EJfuS9JW3RrRPXEG8tZ14PsbYk4HZUDNoGZKvrisVbUeCJMNXwi",
            "ed25519:LpWZZJkA1N7iM84gtftHwLHzBcS7vctpJk8Q93HHm8sbcEwccMAfuok5BT3daQxJLdEsUps5EXiv6LTMRjVgYGq",
            "ed25519:46pmB92wG49RzmMQ54XAWxS3CNwNjyEfZHpGycT9QRg3TLriY2svPyp9f4V9MRy4KHScJqNJy26Dj8bLJ7BAgk5n",
            "ed25519:5VRPSiRtok7SKPA9WJvccKSKT6GMjpwybxp9xHLpRy6Cd1b4E8fNRQZGWvw3Z2FYN7jSiSotVSByngSKpAnrrpkQ",
            "ed25519:41om7j6Bj9CTcS8tvBouTTc9b8uEF1hmGTu7UKx1U6mdHBP77oFhRNGzsyen24gRcFsDeQh6uy1hzaRYknnLp5A9",
            "ed25519:YjKjpUMDkAPQ5EQEVv3rJqwg71cGPpRWH93YvuE3iR7jFz6KE3ybVv6cKPY4k3F6vW11z8cQ6VrBuXFTpkCECU4",
            null,
            null,
            "ed25519:5jVus2Zg4BzgZkeU2todQfRM9MsnVqsjbdiq8ipBqQKBLMDXAfJZV6pdnsndjj4VRZkPrcSKMkCv1VSskP9ejJN1",
            null,
            "ed25519:3Q9ocep1NBNjZNuGc3yUrR9B9u13PkXQ4RTSvPCXEUXAZ7csmXzoGaPbHrfdAuQTNzTs5pT33FCTYxWGEYEFM1Rr",
            null,
            null,
            "ed25519:4CPvW3b9ypHM3YbuUs5ntukqFLsZ5HGmbA2cyxcfuReAgfbNxR9gyqW1vhcBxtWuJmaeAzCCC9wRG2uBjkcRJKfY",
            "ed25519:3oy1HRLhAStuLeAVZWCq6uhDzrDifGdPLqCxmQyabCz8PSkeBQGym3EMxpdHNwiqzsqCueuAa1tJ7SFSpPjaZon9",
            "ed25519:5E3ALoYACWZTUTkKGycBsbK3UdGUcMNhK4Ze3zqdjEwt1yCHb2Hrvj17pMj12fQosHS3i72eWfrWo2n8bqz8oKw2",
            "ed25519:2bwQGfsbdKFjvscTd7HnycKX7qKgwPKxcnHM11d7hmRtJm8Mb7PaMAVsVaXUPhhekCUkvHhHAKN9ijSu5jTtwWxb",
            "ed25519:vnCfFAgoVRKDcG4quWkarv5qbjJDjBU9HMi1ksZLW9qLo8PciGzxpVCwsXLh8NYJZQCZ6rmrXMewCJV7rxf4xSq",
            "ed25519:5UVBjfsSDVLQkEZkTVjGmSZHfLUuqnPqCDibaxeAxmBz9jiuToWjJzirF7exRzar6PqEqoYw2UAeDYmKKwaUGRx8",
            "ed25519:5drpdnyrHcBozkre878uT6cjHuz6DMTVXmy67aoG8UzJvoVneYYsUw6zB3jnMEVijSp4FjztTNNWzxirh43yeME5",
            null,
            "ed25519:CGmir5B62MJfanoPhGAW9uRoCv1paNL2s3JfcjRRDgoygf4EC3fH9ofnSgTieuvNuPv8ni6mhgn3F3vwFv2CxgG",
            "ed25519:UgHfEuB4YXmFtor6FyxjSw3rMGYmy71YC3SkgmJ6Nhy7ux8urAL6kkwoUU541tzBPSGsh2uxyz31b3QdvabUA3Y",
            "ed25519:3LLGZ3kMzXHykHMNKvRxzUYgp25Sf8HkdtK2fY1xorm4DTkQP761NTyo2J6PAXdBLddWtKkd83G2JdfVM1g5Wqr1",
            "ed25519:E6aRmzsg5XvKoLMURqXQp9skN7FLYL8BNj76nc1FDbgqgLsfpNgnZaWhCyRDVNsYvnnNbYEexRXUNeFbJUQAs5T",
            "ed25519:5fhiD7rKgrZqLAxHYxWki1Q3jHTuMs58c9NQcM7msfcywfbgNruNLQit16ANCnc5vxaQT6TUyjz2jTMMFbcvLzdm",
            "ed25519:65cwzvo86wCUKFw8PCLC2zXj4VAdSjw574h9qSERCvfmX8q3VXosEVFYwhJCckiBqaoSmjaGze2sdTnuqFL7Vs4m",
            null,
            "ed25519:5FRyT1z9pb5MUHR9zqknagFe31gqdBv4teeQttEQRf8tP6mjKkBd384G3yWBJYKDRjZ9Pjzdmo9mb7fP3ABaWEKA",
            null,
            "ed25519:4jiEVPKhcSV6kGYqHo5VrMpJtw2gAFcB5FWjAH4hCCGYc2gyfNTdKAfsPYAjU2CEzZAXDKckp28QttYDf64ufCmr",
            "ed25519:BFNScVhQrZt63KZMqMkyZbHUKuerryxhoESwCAQ4Zxk2dGHfMqpjZ4YeoWugLfdLZmJDGhPyQsdeWZ9nysyx2Jy",
            "ed25519:2zzMwdqwPkMA5xJmJvEoJi4pw7WqiyPJ4MsR89Dih3BdYx178uyWuqccfi5hrZx3eh6Q8m7xrPoopHMUW21ZC6kd",
            "ed25519:4xMrTsukZoDYXn94Hn4SExw7VtNvZ6SmWHRGb5s8n5kxVyrMtGtQ4GmJj7UCyVa4YyeftXmBdg7DP95Gga7ZWfau",
            null,
            "ed25519:2mc98nbt7xCq6Ts6Uv75PYVhksLEst7QbofF3swSJZ1Zt3xegXAsEG95r2tHUU66b64YJo3Tva9VehQNJgaZuqrq",
            "ed25519:urYYZkE1NKfZjPM4Lr3wY9688gFKAvxbavs6W3UouV4JbtDnLmhcJ5gm88ftbhK66P2rUAopUv1wnU69pucsuoE",
            "ed25519:3h2LnEE1FBh54bCv2NtxHabcY724SjnSZFXLQ7bYyqQJYfMDSC9XaoxnkciD6HoDrNXqjbFctjDn6FDNqVqFjJPz",
            "ed25519:3N9KRjdq32GC7Bsm1bS3HpiXEy5sTsF4jHxyYHjGEV5FMvvn1PxdmprvS74WCyqa6FFTqst2GeLx4LaVsUzHEv6C",
            "ed25519:63uBcpck5kJRmkTtVJPuZb3e6iVHVyZPd2LuEb3mhvaDfCjA41FqAcgbFDLjDYePrq5FLSR8zoJuJCdmsipKyaJA",
            "ed25519:4DGDysTiKKLXrsGgswL9e7DHf84jm4mK4CqMadspah2Kyk13txww6vM9i4hHTuBoEvMJ1WH3PK3jL9Ec8JonKU5q",
            "ed25519:4qZRTCxQJaWJc7Nh1jjEkBwo31eUZeGvkksLh1txdnAMuxgE3gQy1JQ4RLivN71zBubBLbY87LoNBF7E9KtyjfKt",
            "ed25519:2KppF3KTZjkHrVFmiG2yVcqYrJuNZSoczyzPnYL7vfEeg6xzFkFHPrKddybS3bkhEkBXbeQVLCjUSVR5dL17hMg9",
            "ed25519:4oNiX48ktzZziU8qbAMhyVhnP2t4RqnFYQMA4sHvXKn2bk7tqS5CqDicQkvX2xGJECY4awM5tqeGYhd27xPzKpj8",
            "ed25519:22Fi7xQuu25CKEfyG4UxFBTbrz98JcKEGb3nVRgmSCQkZvmtURN7mJzRK5XwQ6xrrnvfh3mEt1frsRYdw9VaHL2S",
            "ed25519:5njjjYqJyykYhPXDTmTQ8k462tnSA8bJWDrtsv2CB6Yqa9pw7KhbbUxF9EATMFqb4Uoqkjh5FwhusiFQfHKFgaUD",
            "ed25519:3bFiVH3NDqMzcohszXa8HXwaRz4L2deLnmC5h9WikuUEVzGpqvmKc79jCamzrFLmsfn5y8RQ8VDmsMbVSaYKFmFw",
            "ed25519:389LdDetF9SFqHcqTzEXTTE6itJtAUmjiuEanTN5pqFndWqdGQv4CGZ3rYv7fPnvDAiUsMiSqECyTnHNF7J4Qs5h",
            null,
            "ed25519:4MPDy4uvou87jZkzHBYnCicqJSL2SMQC3heo8RbgJasJRzhHR8oZ7Jj6xWJ9HHTT1RSsaq6Kt5xkjjN8GyKKYpSF",
            null,
            "ed25519:5D6iwUBaoaRHCwVPv4vNpDWc2pKzyT5QeN17JyYziZUaZWMbAXbovbjAB1oqwkqeXwpehBBe9qQVnmCCHsEHDZgy",
            null
        ],
        "signature": "ed25519:4ARAjfLTRnRjUpmksRzwqeWeYLaKg1GprL7o1s6HnAjevMCrxgUBBdh1ur6w1UNBppaB8uU2zw7MycEySVCqZqbu",
        "latest_protocol_version": 50
    },
    "chunks": [
        {
            "chunk_hash": "48niqSYLx9kTgQ7fzy7F356ysVFsBXf4xnYqkVPW8N9A",
            "prev_block_hash": "EyjMHUFe8QckSJstGcfrRvKn1sX11JdSpnzaDKjfVuQZ",
            "outcome_root": "11111111111111111111111111111111",
            "prev_state_root": "7UuoLCUNbGJ69oQswm4euaxxxPQbSGno5sShuKqQ5KeL",
            "encoded_merkle_root": "5TxYudsfZd2FZoMyJEZAP19ASov2ZD43N8ZWv8mKzWgx",
            "encoded_length": 8,
            "height_created": 78770817,
            "height_included": 78770817,
            "shard_id": 0,
            "gas_used": 0,
            "gas_limit": 1000000000000000,
            "rent_paid": "0",
            "validator_reward": "0",
            "balance_burnt": "0",
            "outgoing_receipts_root": "8s41rye686T2ronWmFE38ji19vgeb6uPxjYMPt8y8pSV",
            "tx_root": "11111111111111111111111111111111",
            "validator_proposals": [],
            "signature": "ed25519:Mta5daKaxRGwRjP42PPccGzHx72SbwLiWuQ8RweHVFF4nkKb3S3QRBaoufyAU5ikd8M2hfeQhXSahaaGVe5M4t8"
        },
        {
            "chunk_hash": "4njECAs47N43jARjRmffaTTFscgiKz6PGDczccfA4Bb2",
            "prev_block_hash": "EyjMHUFe8QckSJstGcfrRvKn1sX11JdSpnzaDKjfVuQZ",
            "outcome_root": "11111111111111111111111111111111",
            "prev_state_root": "EaKNyf9n1uNx2RV3Fb2uknGXUnsc7cDVqCEm8YUAk2mk",
            "encoded_merkle_root": "5TxYudsfZd2FZoMyJEZAP19ASov2ZD43N8ZWv8mKzWgx",
            "encoded_length": 8,
            "height_created": 78770817,
            "height_included": 78770817,
            "shard_id": 1,
            "gas_used": 0,
            "gas_limit": 1000000000000000,
            "rent_paid": "0",
            "validator_reward": "0",
            "balance_burnt": "0",
            "outgoing_receipts_root": "8s41rye686T2ronWmFE38ji19vgeb6uPxjYMPt8y8pSV",
            "tx_root": "11111111111111111111111111111111",
            "validator_proposals": [],
            "signature": "ed25519:5NXYHVbn9ZA8Y49hjAeRzMfme1cnp8gw6fCXNtYkNCi5xB3x9UftJVWE1opr3bm7PNog89vUUFy5KGrnHUs9EZuu"
        },
        {
            "chunk_hash": "Pjx3TkSGU5wtFRTdFYo87cWfrGR883JsTJiv3qx716N",
            "prev_block_hash": "EyjMHUFe8QckSJstGcfrRvKn1sX11JdSpnzaDKjfVuQZ",
            "outcome_root": "EjtsQXbMNwuk4muefHhnkn7riBsL59eUAFqeQD2MjR1m",
            "prev_state_root": "6qRtvMKnX2PfqZBQEiJ9CSeUFgSw8UAGDiGdgDXcgc56",
            "encoded_merkle_root": "5TxYudsfZd2FZoMyJEZAP19ASov2ZD43N8ZWv8mKzWgx",
            "encoded_length": 8,
            "height_created": 78770817,
            "height_included": 78770817,
            "shard_id": 2,
            "gas_used": 223182562500,
            "gas_limit": 1000000000000000,
            "rent_paid": "0",
            "validator_reward": "0",
            "balance_burnt": "0",
            "outgoing_receipts_root": "8s41rye686T2ronWmFE38ji19vgeb6uPxjYMPt8y8pSV",
            "tx_root": "11111111111111111111111111111111",
            "validator_proposals": [],
            "signature": "ed25519:3XibobaVFw6bjkEAEgpkBcyyHbTM8EXrp2xW3HLPAniTqDMiCVDGgbgPYQsnC86bqsLWKA7u5kXpyEb621z7UcBW"
        },
        {
            "chunk_hash": "f2CYYAm7CaniHNRW7Cg8VNBHa3TdjoJY7FJYW8rUKb2",
            "prev_block_hash": "EyjMHUFe8QckSJstGcfrRvKn1sX11JdSpnzaDKjfVuQZ",
            "outcome_root": "GRFYjANrg8wrBPffSouWDTp3e9bNGacmhmjCzvYS3M3R",
            "prev_state_root": "HUKrrDEBPY8fM4GKMNGot2cyaH4gJZ7D3HpqzDPM5VXu",
            "encoded_merkle_root": "FRainjVKEdUNSQDByzaJhXxMfwdFWPJARDRtCWeexZcq",
            "encoded_length": 376,
            "height_created": 78770817,
            "height_included": 78770817,
            "shard_id": 3,
            "gas_used": 2428348063394,
            "gas_limit": 1000000000000000,
            "rent_paid": "0",
            "validator_reward": "0",
            "balance_burnt": "242834806339400000000",
            "outgoing_receipts_root": "6MV1mMeBJFX3AnTrj2ThmE93DW3pxaArBBNg6ZsfnvWT",
            "tx_root": "11111111111111111111111111111111",
            "validator_proposals": [],
            "signature": "ed25519:4jofJ9ctF3Qgcb2JZfhZ86xTHWnXAjYDN3JhNRc9q5E7ypoamhturbKZBAyzgj7PTP7K1NkcLYaGLyWa8BFZsFGL"
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/block-chunk/changes-in-block-by-hash.json ---
{
    "block_hash": "BmEZnrmov6h6rMPpWkMV2JtU1C5LP563V5Y5yXwUW2N5",
    "changes": [
        {
            "type": "account_touched",
            "account_id": "billionbill.testnet"
        },
        {
            "type": "account_touched",
            "account_id": "infwonder.testnet"
        },
        {
            "type": "account_touched",
            "account_id": "qubelabs.testnet"
        },
        {
            "type": "access_key_touched",
            "account_id": "infwonder.testnet"
        },
        {
            "type": "access_key_touched",
            "account_id": "qubelabs.testnet"
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/block-chunk/changes-in-block-by-height.json ---
{
    "block_hash": "BmEZnrmov6h6rMPpWkMV2JtU1C5LP563V5Y5yXwUW2N5",
    "changes": [
        {
            "type": "account_touched",
            "account_id": "billionbill.testnet"
        },
        {
            "type": "account_touched",
            "account_id": "infwonder.testnet"
        },
        {
            "type": "account_touched",
            "account_id": "qubelabs.testnet"
        },
        {
            "type": "access_key_touched",
            "account_id": "infwonder.testnet"
        },
        {
            "type": "access_key_touched",
            "account_id": "qubelabs.testnet"
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/block-chunk/chunk-details.json ---
{
    "author": "chorus-one.pool.f863973.m0",
    "header": {
        "chunk_hash": "9mdG2cRcV8Dsb1EoSjtya81NddjRB2stYCTVukZh7zzw",
        "prev_block_hash": "EHVez2ZufG16uV4gfkcCamJVYHYjjiUcE1S9BTzYHAcy",
        "outcome_root": "11111111111111111111111111111111",
        "prev_state_root": "2tjeyMwbRFgmSijDKUyjMKdHYsryXLecCp1Ket5svbnQ",
        "encoded_merkle_root": "EQXWcBRGFV9P24tG9myumCueCsAmTg92eghAXTXwTRzm",
        "encoded_length": 814,
        "height_created": 78567387,
        "height_included": 78567387,
        "shard_id": 0,
        "gas_used": 0,
        "gas_limit": 1000000000000000,
        "rent_paid": "0",
        "validator_reward": "0",
        "balance_burnt": "0",
        "outgoing_receipts_root": "8s41rye686T2ronWmFE38ji19vgeb6uPxjYMPt8y8pSV",
        "tx_root": "65Hu5N2K7WXNxTXhdkU8GHtLMWEeWX4LDizEKnUM9auo",
        "validator_proposals": [],
        "signature": "ed25519:5MWiHJZ8Uspuxm3ddGxkCmP7A3eFtBxDK9ekFx2CghisvTkp3YqVfGrjTqsSam9RsPHSBmvcDA7hehFyaEhBzSFH"
    },
    "transactions": [
        {
            "signer_id": "1.validator.flux-dev",
            "public_key": "ed25519:2dq4FsHcmuxGx2vDeRZ5VAtPCrDUE1Bz253RzR9eKujP",
            "nonce": 61139943094034,
            "receiver_id": "v2.wnear.flux-dev",
            "actions": [
                {
                    "FunctionCall": {
                        "method_name": "ft_transfer_call",
                        "args": "eyJyZWNlaXZlcl9pZCI6IjA5Lm9yYWNsZS5mbHV4LWRldiIsImFtb3VudCI6IjIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAiLCJtc2ciOiJ7XCJTdGFrZURhdGFSZXF1ZXN0XCI6e1wiaWRcIjpcIjMxMjdcIixcIm91dGNvbWVcIjp7XCJBbnN3ZXJcIjp7XCJTdHJpbmdcIjpcIltdXCJ9fX19In0=",
                        "gas": 300000000000000,
                        "deposit": 1
                    }
                }
            ],
            "signature": "ed25519:BeXrRt7SR9AkSPYmnrMcRJrSmxQxNc5ovtAg97Me7qZRLtmLs3ZdWWfcyAJdp2LNxUyvz28WMDZ3gNMSFht7a2F",
            "hash": "5reh34b1yBbgx9TTL837c1nUvmnxEUBt7Zdzo1Ta5xWr"
        },
        {
            "signer_id": "3.validator.flux-dev",
            "public_key": "ed25519:5pwzipUGmuDyP9kPp2sLD2k2suFGRqTx7s5CkqAvEK6g",
            "nonce": 61139970084183,
            "receiver_id": "v2.wnear.flux-dev",
            "actions": [
                {
                    "FunctionCall": {
                        "method_name": "ft_transfer_call",
                        "args": "eyJyZWNlaXZlcl9pZCI6IjA5Lm9yYWNsZS5mbHV4LWRldiIsImFtb3VudCI6IjIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAiLCJtc2ciOiJ7XCJTdGFrZURhdGFSZXF1ZXN0XCI6e1wiaWRcIjpcIjMxMjdcIixcIm91dGNvbWVcIjp7XCJBbnN3ZXJcIjp7XCJTdHJpbmdcIjpcIltdXCJ9fX19In0=",
                        "gas": 300000000000000,
                        "deposit": 1
                    }
                }
            ],
            "signature": "ed25519:3XR7SKC7296wdWSTqHxrrjG9nRdMrA4FgLYxuzzGyR2rE5VQ8XcLcieYNiyHhBzXq8Qgth5Fp7rwZPSCe7zkZoYt",
            "hash": "2jGGZudVJq7iyUy6Uzp1gUxzAkPu3szDviuWRUA16CPq"
        }
    ],
    "receipts": []
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/block-chunk/example/block-details.json ---
{
    "author": "bitcat.pool.f863973.m0",
    "header": {
        "height": 17821130,
        "epoch_id": "7Wr3GFJkYeCxjVGz3gDaxvAMUzXuzG8MjFXTFoAXB6ZZ",
        "next_epoch_id": "A5AdnxEn7mfHieQ5fRxx9AagCkHNJz6wr61ppEXiWvvh",
        "hash": "CLo31YCUhzz8ZPtS5vXLFskyZgHV5qWgXinBQHgu9Pyd",
        "prev_hash": "2yUTTubrv1gJhTUVnHXh66JG3qxStBqySoN6wzRzgdVD",
        "prev_state_root": "5rSz37fySS8XkVgEy3FAZwUncX4X1thcSpuvCgA6xmec",
        "chunk_receipts_root": "9ETNjrt6MkwTgSVMMbpukfxRshSD1avBUUa4R4NuqwHv",
        "chunk_headers_root": "HMpEoBhPvThWZvppLwrXQSSfumVdaDW7WfZoCAPtjPfo",
        "chunk_tx_root": "7tkzFg8RHBmMw1ncRJZCCZAizgq4rwCftTKYLce8RU8t",
        "outcome_root": "7tkzFg8RHBmMw1ncRJZCCZAizgq4rwCftTKYLce8RU8t",
        "chunks_included": 1,
        "challenges_root": "11111111111111111111111111111111",
        "timestamp": 1601280114229875635,
        "timestamp_nanosec": "1601280114229875635",
        "random_value": "ACdUSF3nehbMTwT7qjUB6Mm4Ynck5TVAWbNH3DR1cjQ7",
        "validator_proposals": [],
        "chunk_mask": [
            true
        ],
        "gas_price": "100000000",
        "rent_paid": "0",
        "validator_reward": "0",
        "total_supply": "1042339182040791154864822502764857",
        "challenges_result": [],
        "last_final_block": "AaxTqjYND5WAKbV2UZaFed6DH1DShN9fEemtnpTsv3eR",
        "last_ds_final_block": "2yUTTubrv1gJhTUVnHXh66JG3qxStBqySoN6wzRzgdVD",
        "next_bp_hash": "3ZNEoFYh2CQeJ9dc1pLBeUd1HWG8657j2c1v72ENE45Q",
        "block_merkle_root": "H3912Nkw6rtamfjsjmafe2uV2p1XmUKDou5ywgxb1gJr",
        "approvals": [
            "ed25519:4hNtc9vLhn2PQhktWtLKJV9g8SBfpm6NBT1w4syNFqoKE7ZMts2WwKA9x1ZUSBGVKYCuDGEqogLvwCF25G7e1UR3",
            "ed25519:2UNmbTqysMMevVPqJEKSq57hkcxVFcAMdGq7CFhpW65yBKFxYwpoziiWsAtARusLn9Sy1eXM7DkGTXwAqFiSooS6",
            "ed25519:4sumGoW9dnQCsJRpzkd4FQ5NSJypGQRCppWp7eQ9tpsEcJXjHZN8GVTCyeEk19WmbbMEJ5KBNypryyHzaH2gBxd4",
            "ed25519:3fP2dri6GjYkmHgEqQWWP9GcoQEgakbaUtfr3391tXtYBgxmiJUEymRe54m7D8bQrSJ3LhKD8gTFT7qqdemRnizR",
            "ed25519:3mwdqSWNm6RiuZAoZhD6pqsirC2cL48nEZAGoKixpqbrsBpAzqV3W2paH4KtQQ4JPLvk5pnzojaint2kNBCcUyq1",
            "ed25519:D4hMnxqLyQW4Wo29MRNMej887GH46yJXDKNN4es8UDSi9shJ9Y4FcGqkxdV4AZhn1yUjwN5LwfgAgY6fyczk5L3",
            null,
            "ed25519:4WCVm4dn88VJxTkUgcvdS7vs34diBqtQY4XWMRctSN1NpbgdkwwVyxg7d2SbGC22SuED7w4nrToMhcpJXrkhkDmF",
            "ed25519:JqtC7TFP7U14s7YhRKQEqwbc2RUxoctq75mrBdX91f7DuCWsPpe6ZTTnfHPmuJPjTzFHVZTsaQJWzwfSrrgNpnc",
            "ed25519:ngGUpWc2SyHmMCkWGTNNNfvZAJQ5z7P92JCmDqB7JW3j8fNH6LobvFFXb2zVdssibJKgnjwBj8CRe6qiZtuYQZM",
            "ed25519:5kzW6RbjukyJZiw9NTzTPPsQdoqN6EecafjVFEoWmTxQ4uSv1uSXhQYcHK2eq4m84oMmPABQDz2mm73Qx8mDdCQX",
            "ed25519:5wHnuuxwJJiZ4bXNq5cESnr4YovFU2yaUcuHRDUw3DnLoxkqc15CsegoyUSQKEwtCZ4yETv8Z9QcD6Wr9zHV4AUk",
            "ed25519:3F9XzWBxto31e8RAcBShAJBzJPgSJQsWbPXR38AfQnJn6AiveGz3JjebQm9Ye63BrnNA57QrPshwknxpzSrcNEZW",
            "ed25519:2g5s4SKsHt9PMdekkDqVtwwtz14v4edhqdBX1MYA8tB6nDpj3vDCDCTy9pEU8dX31PoQe5ygnf88aTZukMBMK1Yt",
            "ed25519:3Xz4jqhdyS3qs6xTmWdgjwt5gJraU5czMA89hPhmvbAN4aA7SUKL1HkevpmutRQqqxe7c7uCFeGiDHvDcxhhmD8W",
            null,
            "ed25519:55xs3vwPEys39egf9Z8SNyn1JsHPRMgj9HCX1GE7GJsVTcAuutQUCo91E12ZdXkuToYRXb9KzoT8n9XQRCNuLpwY",
            null,
            "ed25519:28JrFw7KnhnQPN89qZnnw17KDBjS6CDN7zB1hTg7KGg8qQPoCzakz9DNnaSnx39ji7e2fQSpZt4cNJaD7K7Yu7yo",
            "ed25519:41hAr5qhtvUYpdD2NK9qqTVnpG325ZoAiwrcmk1MJH7fdpxm7oSKXvXZqh7bTmPhv61hH2RpHnhcGuN4QqLzK2zt",
            "ed25519:4QacMsQ5FJgvecAYDFq8QBh19BBjh4qU8oeD5bV7p6Zhhu3e6r2iSHTvDBU2Q62RZAaWQQkkEwDUC9rsXdkGVhAt",
            "ed25519:27smtCZ3WobEvBuD5DggY6kkGxjB9qRVY6kPixgwqvBT1eKbRVoV8cLj1z51S8RTcp7YzAr1vhHJUHgksatR9Udz",
            "ed25519:4wspCWoAbhYxb3th2eX6ZXvKep1Fsco7mFP5zBodXBR8Wr344ANXSUCri3gUgNCCSoQ2CKSdqDEsvE6Y2jQ9hmbB",
            "ed25519:46XpYf9ZB9gjDfdnJLHqqhYJpQCuvCgB9tzKWS88GANMCb2j9BM3KXyjaEzynSsaPK8VrKFXQuTsTzgQSeo9cWGW",
            null,
            "ed25519:Y5ehsrhEpTRGjG6fHJHsEXj2NYPGMmKguiJHXP7TqsCWHBvNzaJbieR7UDp78hJ1ib7C18J5MB2kCzTXBCF9c3b",
            "ed25519:3P9363Dc8Kqvgjt3TsNRncUrncCHid7aSRnuySjF4JYmQbApkAxomyMu8xm9Rgo3mj9rqXb16PM7Xjn7hKP6TyVr",
            null,
            null,
            "ed25519:65ATjGsigZ3vMp7sGcp1c4ptxoqhHPkBeAaZ5GWJguVDLyrRLPJrtXhLGjH9DpXd7CZswjyMYq5aRtorLnmmJ7GW",
            null,
            "ed25519:5SvqSViXbtsLoFMdtCufyyDgZnrEK7LheFi38X5M2ic17gfV5cz37r85RyixjUv98MbAmgVdmkxVFDGfSbeoHW7X",
            null,
            null,
            "ed25519:2n3fQiBEiDKkB84biXWyQmvnupKX7B8faugY37jVi8hVXuWLggJmaEjqub511RCYwFnwW1RBxYpuJQ455KaniCd4",
            "ed25519:2K9xKFLJ2fW74tddXtghFGFurKWomAqaJmkKYVZKHQT6zHe5wNSYT3vzMotLQcez5JD1Ta57N9zQ4H1RysB2s5DZ",
            null,
            null,
            "ed25519:3qeCRtcLAqLtQ2YSQLcHDa26ykKX1BvAhP9jshLLYapxSEGGgZJY8sU72p9E78AkXwHP3X2Eq74jvts7gTRzNgMg",
            null,
            "ed25519:2czSQCF8wBDomEeSdDRH4gFoyJrp2ppZqR6JDaDGoYpaFkpWxZf2oGDkKfQLZMbfvU6LXkQjJssVHcLCJRMzG8co"
        ],
        "signature": "ed25519:58sdWd6kxzhQdCGvHzxqvdtDLJzqspe74f3gytnqdxDLHf4eesXi7B3nYq2YaosCHZJYmcR4HPHKSoFm3WE4MbxT",
        "latest_protocol_version": 35
    },
    "chunks": [
        {
            "chunk_hash": "EBM2qg5cGr47EjMPtH88uvmXHDHqmWPzKaQadbWhdw22",
            "prev_block_hash": "2yUTTubrv1gJhTUVnHXh66JG3qxStBqySoN6wzRzgdVD",
            "outcome_root": "11111111111111111111111111111111",
            "prev_state_root": "HqWDq3f5HJuWnsTfwZS6jdAUqDjGFSTvjhb846vV27dx",
            "encoded_merkle_root": "9zYue7drR1rhfzEEoc4WUXzaYRnRNihvRoGt1BgK7Lkk",
            "encoded_length": 8,
            "height_created": 17821130,
            "height_included": 17821130,
            "shard_id": 0,
            "gas_used": 0,
            "gas_limit": 1000000000000000,
            "rent_paid": "0",
            "validator_reward": "0",
            "balance_burnt": "0",
            "outgoing_receipts_root": "H4Rd6SGeEBTbxkitsCdzfu9xL9HtZ2eHoPCQXUeZ6bW4",
            "tx_root": "11111111111111111111111111111111",
            "validator_proposals": [],
            "signature": "ed25519:4iPgpYAcPztAvnRHjfpegN37Rd8dTJKCjSd1gKAPLDaLcHUySJHjexMSSfC5iJVy28vqF9VB4psz13x2nt92cbR7"
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/block-chunk/example/changes-in-block.json ---
{
    "block_hash": "81k9ked5s34zh13EjJt26mxw5npa485SY4UNoPi6yYLo",
    "changes": [
        {
            "type": "account_touched",
            "account_id": "lee.testnet"
        },
        {
            "type": "contract_code_touched",
            "account_id": "lee.testnet"
        },
        {
            "type": "access_key_touched",
            "account_id": "lee.testnet"
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/block-chunk/example/chunk-details.json ---
{
    "author": "bitcat.pool.f863973.m0",
    "header": {
        "chunk_hash": "EBM2qg5cGr47EjMPtH88uvmXHDHqmWPzKaQadbWhdw22",
        "prev_block_hash": "2yUTTubrv1gJhTUVnHXh66JG3qxStBqySoN6wzRzgdVD",
        "outcome_root": "11111111111111111111111111111111",
        "prev_state_root": "HqWDq3f5HJuWnsTfwZS6jdAUqDjGFSTvjhb846vV27dx",
        "encoded_merkle_root": "9zYue7drR1rhfzEEoc4WUXzaYRnRNihvRoGt1BgK7Lkk",
        "encoded_length": 8,
        "height_created": 17821130,
        "height_included": 17821130,
        "shard_id": 0,
        "gas_used": 0,
        "gas_limit": 1000000000000000,
        "rent_paid": "0",
        "validator_reward": "0",
        "balance_burnt": "0",
        "outgoing_receipts_root": "H4Rd6SGeEBTbxkitsCdzfu9xL9HtZ2eHoPCQXUeZ6bW4",
        "tx_root": "11111111111111111111111111111111",
        "validator_proposals": [],
        "signature": "ed25519:4iPgpYAcPztAvnRHjfpegN37Rd8dTJKCjSd1gKAPLDaLcHUySJHjexMSSfC5iJVy28vqF9VB4psz13x2nt92cbR7"
    },
    "transactions": [],
    "receipts": []
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/error/invalid-error.json ---
{
    "jsonrpc": "2.0",
    "error": {
        "name": "REQUEST_VALIDATION_ERROR",
        "causedBy": {
            "name": "PARSE_ERROR",
            "info": {
                "error_message": "Failed parsing args: data did not match any variant of untagged enum BlockId"
            }
        },
        "code": -32700,
        "message": "Parse error",
        "data": "Failed parsing args: data did not match any variant of untagged enum BlockId"
    },
    "id": "1305127453"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/error/valid-error.json ---
{
    "jsonrpc": "2.0",
    "error": {
        "name": "REQUEST_VALIDATION_ERROR",
        "cause": {
            "name": "PARSE_ERROR",
            "info": {
                "error_message": "Failed parsing args: data did not match any variant of untagged enum BlockId"
            }
        },
        "code": -32700,
        "message": "Parse error",
        "data": "Failed parsing args: data did not match any variant of untagged enum BlockId"
    },
    "id": "1305127453"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/gas/example/gas-price.json ---
{
    "gas_price": "100000000"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/gas/gas-price-by-block-hash.json ---
{
    "gas_price": "100000000"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/gas/gas-price-by-block-height.json ---
{
    "gas_price": "100000000"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/gas/gas-price-by-null.json ---
{
    "gas_price": "100000000"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/network/example/network-info.json ---
{
    "active_peers": [
        {
            "id": "ed25519:GkDv7nSMS3xcqA45cpMvFmfV1o4fRF6zYo1JRR6mNqg5",
            "addr": "35.193.24.121:24567",
            "account_id": null
        }
    ],
    "num_active_peers": 34,
    "peer_max_count": 40,
    "sent_bytes_per_sec": 17754754,
    "received_bytes_per_sec": 492116,
    "known_producers": [
        {
            "account_id": "node0",
            "addr": null,
            "peer_id": "ed25519:7PGseFbWxvYVgZ89K1uTJKYoKetWs7BJtbyXDzfbAcqX"
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/network/example/node-status.json ---
{
    "version": {
        "version": "1.14.0-rc.1",
        "build": "effa3b7a-modified"
    },
    "chain_id": "testnet",
    "protocol_version": 35,
    "latest_protocol_version": 35,
    "rpc_addr": "0.0.0.0:3030",
    "validators": [
        {
            "account_id": "node3",
            "is_slashed": false
        },
        {
            "account_id": "node0",
            "is_slashed": false
        },
        {
            "account_id": "staked.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "01node.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "node2",
            "is_slashed": false
        },
        {
            "account_id": "dokia.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "node1",
            "is_slashed": false
        },
        {
            "account_id": "lowfeevalidation.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "sl1sub.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "zainy.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "chorus-one.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "thepassivetrust.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "certusone.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "joe1.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "bisontrails.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "valeraverim.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "lunanova.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "bazilik.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "dsrvlabs.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "kronos.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "nodeasy.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "kytzu.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "bitcat.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "pool_easy2stake.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "fresh_lockup.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "staking-power.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "syncnode.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "inotel.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "zpool.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "aquarius.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "cloudpost.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "staked.pool.6fb1358",
            "is_slashed": false
        },
        {
            "account_id": "moonlet.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "jazza.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "orangeclub.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "blazenet.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "pathrock.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "stakin.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "northernlights.stakingpool",
            "is_slashed": false
        },
        {
            "account_id": "alexandruast.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "top.pool.f863973.m0",
            "is_slashed": false
        }
    ],
    "sync_info": {
        "latest_block_hash": "44kieHwr7Gg5r72V3DgU7cpgV2aySkk5qbBCdvwens8T",
        "latest_block_height": 17774278,
        "latest_state_root": "3MD3fQqnm3JYa9UQgenEJsR6UHoWuHV4Tpr4hZY7QwfY",
        "latest_block_time": "2020-09-27T23:59:38.008063088Z",
        "syncing": false
    },
    "validator_account_id": "nearup-node8"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/network/example/validation-status.json ---
{
    "current_validators": [
        {
            "account_id": "01node.pool.f863973.m0",
            "public_key": "ed25519:3iNqnvBgxJPXCxu6hNdvJso1PEAc1miAD35KQMBCA3aL",
            "is_slashed": false,
            "stake": "176429739989396285019500901780",
            "shards": [
                0
            ],
            "num_produced_blocks": 213,
            "num_expected_blocks": 213
        },
        {
            "account_id": "alexandruast.pool.f863973.m0",
            "public_key": "ed25519:A3XJ3uVGxSi9o2gnG2r8Ra3fqqodRpL4iuLTc6fNdGUj",
            "is_slashed": false,
            "stake": "151430394143736014372434860532",
            "shards": [
                0
            ],
            "num_produced_blocks": 213,
            "num_expected_blocks": 213
        },
        {
            "account_id": "aquarius.pool.f863973.m0",
            "public_key": "ed25519:8NfEarjStDYjJTwKUgQGy7Z7UTGsZaPhTUsExheQN3r1",
            "is_slashed": false,
            "stake": "130367563121508828296664196836",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "bazilik.pool.f863973.m0",
            "public_key": "ed25519:3pDJwDQ6Y5B9QeW1jz8KunhZH4D4GQG86reTmrRfdD7c",
            "is_slashed": false,
            "stake": "169013447850997135034919151338",
            "shards": [
                0
            ],
            "num_produced_blocks": 211,
            "num_expected_blocks": 213
        },
        {
            "account_id": "bisontrails.pool.f863973.m0",
            "public_key": "ed25519:8g4P5EXyp2b2pfVMHY1QLfkRcY59hjPfWrFCKUWX3RmR",
            "is_slashed": false,
            "stake": "184162578269044826045352223479",
            "shards": [
                0
            ],
            "num_produced_blocks": 213,
            "num_expected_blocks": 213
        },
        {
            "account_id": "bitcat.pool.f863973.m0",
            "public_key": "ed25519:9mtnwPQyyap1QNH9ag6r4the7Jkkpdyt9HUF5G1dWxKx",
            "is_slashed": false,
            "stake": "135215509376418353124295451543",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "blazenet.pool.f863973.m0",
            "public_key": "ed25519:DiogP36wBXKFpFeqirrxN8G2Mq9vnakgBvgnHdL9CcN3",
            "is_slashed": false,
            "stake": "137364229255641651855065314186",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "certusone.pool.f863973.m0",
            "public_key": "ed25519:CKW7f41Kn8YCDPzaGLs1MrPb9h3BjQmHhbei6Ff6nRRF",
            "is_slashed": false,
            "stake": "176644821310043228577017742667",
            "shards": [
                0
            ],
            "num_produced_blocks": 213,
            "num_expected_blocks": 213
        },
        {
            "account_id": "chorus-one.pool.f863973.m0",
            "public_key": "ed25519:6LFwyEEsqhuDxorWfsKcPPs324zLWTaoqk4o6RDXN7Qc",
            "is_slashed": false,
            "stake": "110397600457815316527526651811",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 213
        },
        {
            "account_id": "cloudpost.pool.f863973.m0",
            "public_key": "ed25519:AVVLmJDG8z6UgmW9fmJGVFTdYxxfnqXH6c7FVQmhE6dp",
            "is_slashed": false,
            "stake": "136597929514591130855076834167",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "dokia.pool.f863973.m0",
            "public_key": "ed25519:935JMz1vLcJxFApG3TY4MA4RHhvResvoGwCrQoJxHPn9",
            "is_slashed": false,
            "stake": "220445043066799898276306006919",
            "shards": [
                0
            ],
            "num_produced_blocks": 426,
            "num_expected_blocks": 426
        },
        {
            "account_id": "dsrvlabs.pool.f863973.m0",
            "public_key": "ed25519:61ei2efmmLkeDR1CG6JDEC2U3oZCUuC2K1X16Vmxrud9",
            "is_slashed": false,
            "stake": "161508967845718247649113721019",
            "shards": [
                0
            ],
            "num_produced_blocks": 213,
            "num_expected_blocks": 213
        },
        {
            "account_id": "fresh_lockup.pool.f863973.m0",
            "public_key": "ed25519:7CMFLtEohojtxBkmj9Jb6AGgbphb1zvxymHzpzuyCjfG",
            "is_slashed": false,
            "stake": "193574159400241036715020269158",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "inotel.pool.f863973.m0",
            "public_key": "ed25519:C55jH1MCHYGa3tzUyZZdGrJmmCLP22Aa4v88KYpn2xwZ",
            "is_slashed": false,
            "stake": "178598870951670469578754984993",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "jazza.pool.f863973.m0",
            "public_key": "ed25519:85cPMNVrqUz8N7oWbbvWbUuamHcJNe49uRbaSzftLCz9",
            "is_slashed": false,
            "stake": "155762349362951827286303475797",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "joe1.pool.f863973.m0",
            "public_key": "ed25519:G3SxwzmiEZSm3bHnTLtxJvm3NvT1TLQcWuV1iod6i6NJ",
            "is_slashed": false,
            "stake": "129230772267511696840933436174",
            "shards": [
                0
            ],
            "num_produced_blocks": 213,
            "num_expected_blocks": 213
        },
        {
            "account_id": "kronos.pool.f863973.m0",
            "public_key": "ed25519:3i2pertqzF8xqkJ4BrE4t4r67YiYYrUKCktbqvDgjzuQ",
            "is_slashed": false,
            "stake": "144544279093485390569527924033",
            "shards": [
                0
            ],
            "num_produced_blocks": 202,
            "num_expected_blocks": 213
        },
        {
            "account_id": "kytzu.pool.f863973.m0",
            "public_key": "ed25519:61tgPZpy8tqFeAwG4vtf2ZKCRoENiP2A1TJVWEwnbxZU",
            "is_slashed": false,
            "stake": "113758432843198726378418342568",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "lowfeevalidation.pool.f863973.m0",
            "public_key": "ed25519:EXyjSMGSnk5uGphF3gVV1jCudaAudbW8imoEccYEJg3V",
            "is_slashed": false,
            "stake": "113685537557977098595863252617",
            "shards": [
                0
            ],
            "num_produced_blocks": 213,
            "num_expected_blocks": 213
        },
        {
            "account_id": "lunanova.pool.f863973.m0",
            "public_key": "ed25519:2fZ59qfo9QHNLijoht9cwUb9enSNcnRmXbQn1gKZxvkw",
            "is_slashed": false,
            "stake": "172903039219549397267702571804",
            "shards": [
                0
            ],
            "num_produced_blocks": 213,
            "num_expected_blocks": 213
        },
        {
            "account_id": "moonlet.pool.f863973.m0",
            "public_key": "ed25519:3e1nVCVGNS3yr6CcUvpDAs3BhiWtyM9uTBWkyVR5Xn3K",
            "is_slashed": false,
            "stake": "140599784944681716744261599779",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "node0",
            "public_key": "ed25519:7PGseFbWxvYVgZ89K1uTJKYoKetWs7BJtbyXDzfbAcqX",
            "is_slashed": false,
            "stake": "1907234923845608896091985071588",
            "shards": [
                0
            ],
            "num_produced_blocks": 3614,
            "num_expected_blocks": 3616
        },
        {
            "account_id": "node1",
            "public_key": "ed25519:6DSjZ8mvsRZDvFqFxo8tCKePG96omXW7eVYVSySmDk8e",
            "is_slashed": false,
            "stake": "1906065501889463342906704128820",
            "shards": [
                0
            ],
            "num_produced_blocks": 3613,
            "num_expected_blocks": 3614
        },
        {
            "account_id": "node2",
            "public_key": "ed25519:GkDv7nSMS3xcqA45cpMvFmfV1o4fRF6zYo1JRR6mNqg5",
            "is_slashed": false,
            "stake": "1840271519773089248112279578450",
            "shards": [
                0
            ],
            "num_produced_blocks": 3615,
            "num_expected_blocks": 3615
        },
        {
            "account_id": "node3",
            "public_key": "ed25519:ydgzeXHJ5Xyt7M1gXLxqLBW1Ejx6scNV5Nx2pxFM8su",
            "is_slashed": false,
            "stake": "1247270566437910246525604113433",
            "shards": [
                0
            ],
            "num_produced_blocks": 2335,
            "num_expected_blocks": 2342
        },
        {
            "account_id": "nodeasy.pool.f863973.m0",
            "public_key": "ed25519:25Dhg8NBvQhsVTuugav3t1To1X1zKiomDmnh8yN9hHMb",
            "is_slashed": false,
            "stake": "131652957125263756523827257067",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "northernlights.stakingpool",
            "public_key": "ed25519:CsMecqKCfagnebMB3ha1uRubay5Z4V85req23bNAJSG3",
            "is_slashed": false,
            "stake": "159669819380982417675619400525",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "orangeclub.pool.f863973.m0",
            "public_key": "ed25519:HezFeSzcwuR5wvkqccgMCMnpf1eQkVCfk52tXZEdKZHz",
            "is_slashed": false,
            "stake": "143971234567521206686862639104",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "pathrock.pool.f863973.m0",
            "public_key": "ed25519:G138GdQsU7PdFLD6X88NmTLAEDR7agPcq9HLZqGpegkm",
            "is_slashed": false,
            "stake": "125204431569306697735287326827",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "pool_easy2stake.pool.f863973.m0",
            "public_key": "ed25519:8nzKxvmyeauQRehWkby8GfWNLgqPiF5FCRFSD75M1Rwh",
            "is_slashed": false,
            "stake": "176893731686620703671521068552",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "sl1sub.pool.f863973.m0",
            "public_key": "ed25519:3URBpNUjNAMzugQH1rdSKMtwFM8AwHaJgZk5Z6YtnfFL",
            "is_slashed": false,
            "stake": "155741680601335529540438949153",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 213
        },
        {
            "account_id": "staked.pool.6fb1358",
            "public_key": "ed25519:684rMbuVYYgL2CkmYgC1weLh3erd2bwrmtQtJJhWzPwj",
            "is_slashed": false,
            "stake": "126911347639167461321544980789",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "staked.pool.f863973.m0",
            "public_key": "ed25519:D2afKYVaKQ1LGiWbMAZRfkKLgqimTR74wvtESvjx5Ft2",
            "is_slashed": false,
            "stake": "140558085958535444819294942478",
            "shards": [
                0
            ],
            "num_produced_blocks": 213,
            "num_expected_blocks": 213
        },
        {
            "account_id": "stakin.pool.f863973.m0",
            "public_key": "ed25519:GvddxjaxBCqGGB4kMNWNFtvozU1EEZ2jrnggKZW8LaU4",
            "is_slashed": false,
            "stake": "122221693837484004905170552626",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "staking-power.pool.f863973.m0",
            "public_key": "ed25519:4s79F6Fdjgb3rHXPLwaXZG4Hq7Za8nogUu3vXEamRBQo",
            "is_slashed": false,
            "stake": "113293334165305165414435157738",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "syncnode.pool.f863973.m0",
            "public_key": "ed25519:FUAVDkmLhuTbKYv4GWuWv9ogjKzRatLd5ZBMKXRy7WqE",
            "is_slashed": false,
            "stake": "133414422809248011010747790387",
            "shards": [
                0
            ],
            "num_produced_blocks": 212,
            "num_expected_blocks": 212
        },
        {
            "account_id": "thepassivetrust.pool.f863973.m0",
            "public_key": "ed25519:4NccD2DNJpBkDmWeJ2GbqPoivQ93qcKiR4PHALJKCTod",
            "is_slashed": false,
            "stake": "162714097201953456968339272308",
            "shards": [
                0
            ],
            "num_produced_blocks": 213,
            "num_expected_blocks": 213
        },
        {
            "account_id": "top.pool.f863973.m0",
            "public_key": "ed25519:FR5qxAsP8GgXDN96pappLtWMywiqWsPVqT3HLE3YaUx",
            "is_slashed": false,
            "stake": "164760602493727447176131601464",
            "shards": [
                0
            ],
            "num_produced_blocks": 213,
            "num_expected_blocks": 213
        },
        {
            "account_id": "valeraverim.pool.f863973.m0",
            "public_key": "ed25519:3686ABqNUZc1qhLWLHg5xZpBzrWPiUCMNZxcCNmg3e2s",
            "is_slashed": false,
            "stake": "191733144511459134091274432419",
            "shards": [
                0
            ],
            "num_produced_blocks": 213,
            "num_expected_blocks": 213
        },
        {
            "account_id": "zainy.pool.f863973.m0",
            "public_key": "ed25519:37KfhBNYjqpaUVh3ft5kPcFn3xK1eVvtDZJCQQVCGnzQ",
            "is_slashed": false,
            "stake": "113441017844444454951489924484",
            "shards": [
                0
            ],
            "num_produced_blocks": 213,
            "num_expected_blocks": 213
        },
        {
            "account_id": "zpool.pool.f863973.m0",
            "public_key": "ed25519:ETFRFNHfvd6fpj74MGYYQp3diY8WB4bFmWMxjTB2yY4V",
            "is_slashed": false,
            "stake": "140932616764414290525265048028",
            "shards": [
                0
            ],
            "num_produced_blocks": 120,
            "num_expected_blocks": 212
        }
    ],
    "next_validators": [
        {
            "account_id": "01node.pool.f863973.m0",
            "public_key": "ed25519:3iNqnvBgxJPXCxu6hNdvJso1PEAc1miAD35KQMBCA3aL",
            "stake": "177341160716540400974121040893",
            "shards": [
                0
            ]
        },
        {
            "account_id": "alexandruast.pool.f863973.m0",
            "public_key": "ed25519:A3XJ3uVGxSi9o2gnG2r8Ra3fqqodRpL4iuLTc6fNdGUj",
            "stake": "152212670433756011274558210225",
            "shards": [
                0
            ]
        },
        {
            "account_id": "aquarius.pool.f863973.m0",
            "public_key": "ed25519:8NfEarjStDYjJTwKUgQGy7Z7UTGsZaPhTUsExheQN3r1",
            "stake": "131041030638338742265060835987",
            "shards": [
                0
            ]
        },
        {
            "account_id": "bazilik.pool.f863973.m0",
            "public_key": "ed25519:3pDJwDQ6Y5B9QeW1jz8KunhZH4D4GQG86reTmrRfdD7c",
            "stake": "169886556654364796730036727847",
            "shards": [
                0
            ]
        },
        {
            "account_id": "bisontrails.pool.f863973.m0",
            "public_key": "ed25519:8g4P5EXyp2b2pfVMHY1QLfkRcY59hjPfWrFCKUWX3RmR",
            "stake": "185113946165399113822995097304",
            "shards": [
                0
            ]
        },
        {
            "account_id": "bitcat.pool.f863973.m0",
            "public_key": "ed25519:9mtnwPQyyap1QNH9ag6r4the7Jkkpdyt9HUF5G1dWxKx",
            "stake": "135914020962862866419944507506",
            "shards": [
                0
            ]
        },
        {
            "account_id": "blazenet.pool.f863973.m0",
            "public_key": "ed25519:DiogP36wBXKFpFeqirrxN8G2Mq9vnakgBvgnHdL9CcN3",
            "stake": "138073840925159254185212483041",
            "shards": [
                0
            ]
        },
        {
            "account_id": "certusone.pool.f863973.m0",
            "public_key": "ed25519:CKW7f41Kn8YCDPzaGLs1MrPb9h3BjQmHhbei6Ff6nRRF",
            "stake": "177557353126393581856047095474",
            "shards": [
                0
            ]
        },
        {
            "account_id": "chorus-one.pool.f863973.m0",
            "public_key": "ed25519:6LFwyEEsqhuDxorWfsKcPPs324zLWTaoqk4o6RDXN7Qc",
            "stake": "110967904880664326100649881128",
            "shards": [
                0
            ]
        },
        {
            "account_id": "cloudpost.pool.f863973.m0",
            "public_key": "ed25519:AVVLmJDG8z6UgmW9fmJGVFTdYxxfnqXH6c7FVQmhE6dp",
            "stake": "137303582563490110045159846741",
            "shards": [
                0
            ]
        },
        {
            "account_id": "dokia.pool.f863973.m0",
            "public_key": "ed25519:935JMz1vLcJxFApG3TY4MA4RHhvResvoGwCrQoJxHPn9",
            "stake": "221583843027440134728813179120",
            "shards": [
                0
            ]
        },
        {
            "account_id": "dsrvlabs.pool.f863973.m0",
            "public_key": "ed25519:61ei2efmmLkeDR1CG6JDEC2U3oZCUuC2K1X16Vmxrud9",
            "stake": "162343309156672629963246208215",
            "shards": [
                0
            ]
        },
        {
            "account_id": "fresh_lockup.pool.f863973.m0",
            "public_key": "ed25519:7CMFLtEohojtxBkmj9Jb6AGgbphb1zvxymHzpzuyCjfG",
            "stake": "194574146707912827852030100603",
            "shards": [
                0
            ]
        },
        {
            "account_id": "inotel.pool.f863973.m0",
            "public_key": "ed25519:C55jH1MCHYGa3tzUyZZdGrJmmCLP22Aa4v88KYpn2xwZ",
            "stake": "179521497218882663562358374377",
            "shards": [
                0
            ]
        },
        {
            "account_id": "jazza.pool.f863973.m0",
            "public_key": "ed25519:85cPMNVrqUz8N7oWbbvWbUuamHcJNe49uRbaSzftLCz9",
            "stake": "156567004141558073310769195719",
            "shards": [
                0
            ]
        },
        {
            "account_id": "joe1.pool.f863973.m0",
            "public_key": "ed25519:G3SxwzmiEZSm3bHnTLtxJvm3NvT1TLQcWuV1iod6i6NJ",
            "stake": "129898367221448376460128575495",
            "shards": [
                0
            ]
        },
        {
            "account_id": "kronos.pool.f863973.m0",
            "public_key": "ed25519:3i2pertqzF8xqkJ4BrE4t4r67YiYYrUKCktbqvDgjzuQ",
            "stake": "145291600307308103830278523851",
            "shards": [
                0
            ]
        },
        {
            "account_id": "kytzu.pool.f863973.m0",
            "public_key": "ed25519:61tgPZpy8tqFeAwG4vtf2ZKCRoENiP2A1TJVWEwnbxZU",
            "stake": "114346099616381729581424582943",
            "shards": [
                0
            ]
        },
        {
            "account_id": "lowfeevalidation.pool.f863973.m0",
            "public_key": "ed25519:EXyjSMGSnk5uGphF3gVV1jCudaAudbW8imoEccYEJg3V",
            "stake": "114272827178534171015566175242",
            "shards": [
                0
            ]
        },
        {
            "account_id": "lunanova.pool.f863973.m0",
            "public_key": "ed25519:2fZ59qfo9QHNLijoht9cwUb9enSNcnRmXbQn1gKZxvkw",
            "stake": "173796241314359640924313305613",
            "shards": [
                0
            ]
        },
        {
            "account_id": "moonlet.pool.f863973.m0",
            "public_key": "ed25519:3e1nVCVGNS3yr6CcUvpDAs3BhiWtyM9uTBWkyVR5Xn3K",
            "stake": "141326111231422084384405939935",
            "shards": [
                0
            ]
        },
        {
            "account_id": "node0",
            "public_key": "ed25519:7PGseFbWxvYVgZ89K1uTJKYoKetWs7BJtbyXDzfbAcqX",
            "stake": "1917087533938315356792420553580",
            "shards": [
                0
            ]
        },
        {
            "account_id": "node1",
            "public_key": "ed25519:6DSjZ8mvsRZDvFqFxo8tCKePG96omXW7eVYVSySmDk8e",
            "stake": "1915912070849706566898523265362",
            "shards": [
                0
            ]
        },
        {
            "account_id": "node2",
            "public_key": "ed25519:GkDv7nSMS3xcqA45cpMvFmfV1o4fRF6zYo1JRR6mNqg5",
            "stake": "1849778202731933988446605407109",
            "shards": [
                0
            ]
        },
        {
            "account_id": "node3",
            "public_key": "ed25519:ydgzeXHJ5Xyt7M1gXLxqLBW1Ejx6scNV5Nx2pxFM8su",
            "stake": "1253713857932062021626652303305",
            "shards": [
                0
            ]
        },
        {
            "account_id": "nodeasy.pool.f863973.m0",
            "public_key": "ed25519:25Dhg8NBvQhsVTuugav3t1To1X1zKiomDmnh8yN9hHMb",
            "stake": "132333065508677559475570461579",
            "shards": [
                0
            ]
        },
        {
            "account_id": "northernlights.stakingpool",
            "public_key": "ed25519:CsMecqKCfagnebMB3ha1uRubay5Z4V85req23bNAJSG3",
            "stake": "160494659810582810750858869593",
            "shards": [
                0
            ]
        },
        {
            "account_id": "orangeclub.pool.f863973.m0",
            "public_key": "ed25519:HezFeSzcwuR5wvkqccgMCMnpf1eQkVCfk52tXZEdKZHz",
            "stake": "144714977470413958038055754809",
            "shards": [
                0
            ]
        },
        {
            "account_id": "pathrock.pool.f863973.m0",
            "public_key": "ed25519:G138GdQsU7PdFLD6X88NmTLAEDR7agPcq9HLZqGpegkm",
            "stake": "125851226796631921571804668732",
            "shards": [
                0
            ]
        },
        {
            "account_id": "pool_easy2stake.pool.f863973.m0",
            "public_key": "ed25519:8nzKxvmyeauQRehWkby8GfWNLgqPiF5FCRFSD75M1Rwh",
            "stake": "177807549352374182247265978294",
            "shards": [
                0
            ]
        },
        {
            "account_id": "sl1sub.pool.f863973.m0",
            "public_key": "ed25519:3URBpNUjNAMzugQH1rdSKMtwFM8AwHaJgZk5Z6YtnfFL",
            "stake": "156546228606913052982706314599",
            "shards": [
                0
            ]
        },
        {
            "account_id": "staked.pool.6fb1358",
            "public_key": "ed25519:684rMbuVYYgL2CkmYgC1weLh3erd2bwrmtQtJJhWzPwj",
            "stake": "127566960646771620637977634520",
            "shards": [
                0
            ]
        },
        {
            "account_id": "staked.pool.f863973.m0",
            "public_key": "ed25519:D2afKYVaKQ1LGiWbMAZRfkKLgqimTR74wvtESvjx5Ft2",
            "stake": "141284196855966747583242721111",
            "shards": [
                0
            ]
        },
        {
            "account_id": "stakin.pool.f863973.m0",
            "public_key": "ed25519:GvddxjaxBCqGGB4kMNWNFtvozU1EEZ2jrnggKZW8LaU4",
            "stake": "122853080560791799567241762038",
            "shards": [
                0
            ]
        },
        {
            "account_id": "staking-power.pool.f863973.m0",
            "public_key": "ed25519:4s79F6Fdjgb3rHXPLwaXZG4Hq7Za8nogUu3vXEamRBQo",
            "stake": "113878597697173990840757447344",
            "shards": [
                0
            ]
        },
        {
            "account_id": "syncnode.pool.f863973.m0",
            "public_key": "ed25519:FUAVDkmLhuTbKYv4GWuWv9ogjKzRatLd5ZBMKXRy7WqE",
            "stake": "134103630138795323490241660174",
            "shards": [
                0
            ]
        },
        {
            "account_id": "thepassivetrust.pool.f863973.m0",
            "public_key": "ed25519:4NccD2DNJpBkDmWeJ2GbqPoivQ93qcKiR4PHALJKCTod",
            "stake": "163554668234785516757420218799",
            "shards": [
                0
            ]
        },
        {
            "account_id": "top.pool.f863973.m0",
            "public_key": "ed25519:FR5qxAsP8GgXDN96pappLtWMywiqWsPVqT3HLE3YaUx",
            "stake": "165611741467072665024638629174",
            "shards": [
                0
            ]
        },
        {
            "account_id": "valeraverim.pool.f863973.m0",
            "public_key": "ed25519:3686ABqNUZc1qhLWLHg5xZpBzrWPiUCMNZxcCNmg3e2s",
            "stake": "192723621295992295990275575014",
            "shards": [
                0
            ]
        },
        {
            "account_id": "zainy.pool.f863973.m0",
            "public_key": "ed25519:37KfhBNYjqpaUVh3ft5kPcFn3xK1eVvtDZJCQQVCGnzQ",
            "stake": "114027175849273464802110072969",
            "shards": [
                0
            ]
        },
        {
            "account_id": "zpool.pool.f863973.m0",
            "public_key": "ed25519:ETFRFNHfvd6fpj74MGYYQp3diY8WB4bFmWMxjTB2yY4V",
            "stake": "141660662431449802378487016195",
            "shards": [
                0
            ]
        }
    ],
    "current_fishermen": [
        {
            "account_id": "staked.stakingpool",
            "public_key": "ed25519:5VmCXxWepj22uFoKmrxk6DTiFa3fuTzDcwGxM8uUErpr",
            "stake": "5957256918881889179239884296"
        },
        {
            "account_id": "bisontrails.stakingpool",
            "public_key": "ed25519:ED2v5KtScbk6aNjGcTn1YMDUu3EXfD5HPt1x6RiYBypk",
            "stake": "7679439354334034871130713908"
        },
        {
            "account_id": "cryptium.stakingpool",
            "public_key": "ed25519:2usUkjmKWxQw7QUeFfELHCEqS2UxjwsRqnCkA5oQ6A2B",
            "stake": "6484546971716985483357166277"
        },
        {
            "account_id": "buildlinks3.pool.f863973.m0",
            "public_key": "ed25519:Cfy8xjSsvVquSqo7W4A2bRX1vkLPycLgyCvFNs3Rz6bb",
            "stake": "81221864655530313350540629757"
        },
        {
            "account_id": "mmm.pool.f863973.m0",
            "public_key": "ed25519:3jEqDDKaJEg1r8UGu2x2dC55BXE7i26yNFQzvfJkkHkf",
            "stake": "80030001196381772535600000000"
        }
    ],
    "next_fishermen": [
        {
            "account_id": "staked.stakingpool",
            "public_key": "ed25519:5VmCXxWepj22uFoKmrxk6DTiFa3fuTzDcwGxM8uUErpr",
            "stake": "5957256918881889179239884296"
        },
        {
            "account_id": "bisontrails.stakingpool",
            "public_key": "ed25519:ED2v5KtScbk6aNjGcTn1YMDUu3EXfD5HPt1x6RiYBypk",
            "stake": "7679439354334034871130713908"
        },
        {
            "account_id": "cryptium.stakingpool",
            "public_key": "ed25519:2usUkjmKWxQw7QUeFfELHCEqS2UxjwsRqnCkA5oQ6A2B",
            "stake": "6484546971716985483357166277"
        },
        {
            "account_id": "buildlinks3.pool.f863973.m0",
            "public_key": "ed25519:Cfy8xjSsvVquSqo7W4A2bRX1vkLPycLgyCvFNs3Rz6bb",
            "stake": "81221864655530313350540629757"
        },
        {
            "account_id": "mmm.pool.f863973.m0",
            "public_key": "ed25519:3jEqDDKaJEg1r8UGu2x2dC55BXE7i26yNFQzvfJkkHkf",
            "stake": "80030001196381772535600000000"
        }
    ],
    "current_proposals": [
        {
            "account_id": "kytzu.pool.f863973.m0",
            "public_key": "ed25519:61tgPZpy8tqFeAwG4vtf2ZKCRoENiP2A1TJVWEwnbxZU",
            "stake": "114346100195275968419224582943"
        },
        {
            "account_id": "nodeasy.pool.f863973.m0",
            "public_key": "ed25519:25Dhg8NBvQhsVTuugav3t1To1X1zKiomDmnh8yN9hHMb",
            "stake": "132333066144809013154670461579"
        },
        {
            "account_id": "thepassivetrust.pool.f863973.m0",
            "public_key": "ed25519:4NccD2DNJpBkDmWeJ2GbqPoivQ93qcKiR4PHALJKCTod",
            "stake": "163554672455685458970920218837"
        }
    ],
    "prev_epoch_kickout": [],
    "epoch_start_height": 17754191,
    "epoch_height": 321
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/network/node-status.json ---
{
    "version": {
        "version": "1.23.1",
        "build": "1.23.0-9-gc0551c84b"
    },
    "chain_id": "testnet",
    "protocol_version": 50,
    "latest_protocol_version": 50,
    "rpc_addr": "0.0.0.0:4040",
    "validators": [
        {
            "account_id": "node1",
            "is_slashed": false
        },
        {
            "account_id": "node0",
            "is_slashed": false
        },
        {
            "account_id": "node2",
            "is_slashed": false
        },
        {
            "account_id": "node3",
            "is_slashed": false
        },
        {
            "account_id": "staked.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "01node.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "p2p.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "legends.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "sweden.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "tribe-pool.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "lunanova2.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "chorusone.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "hotones.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "foundryusa.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "chorus-one.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "ni.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "cryptogarik.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "spectrum.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "pathrocknetwork.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "stakely_v2.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "peloclick.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "aquarius.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "voxel.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "solidstate.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "namdokmai.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "aurora.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "freshtest.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "p0s.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "optimusvalidatornetwork.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "lobster.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "cryptoblossom-1.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "blockscope.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "baziliknear.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "blockngine.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "tagard.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "leadnode.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "bflame.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "dehashed.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "stakesstone.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "gp-validator-testnet.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "basilisk-stake.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "al3c5.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "projecttent.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "machfund.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "stingray.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "shardlabs.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "smcvalidator.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "phet90testnet.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "zetsi.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "grassets.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "ou812.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "stakeangle.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "squatch.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "onin.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "shurik.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "stgr.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "genesislab.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "gromazek.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "bablonear.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "scotty.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "infiniteloop.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "luckycore.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "dsrvlabs.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "tayang.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "evgneartestnet.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "gullffa.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "0xgenesisblock.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "latenthero.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "anyvalid.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "beastake.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "nufi.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "qweqaz.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "plap.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "rossi-validator.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "mintia.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "samid1.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "stake2grow.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "n0ok.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "chelovek_iz_naroda.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "darvin.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "fibocrypto.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "stakenear.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "lavenderfive.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "earnpool.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "lusienda.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "fortress.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "anchikovproduction.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "alexsandr.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "blazenet.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "block3baltic.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "blackhox.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "everstake.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "alinode.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "maluconiraef.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "prophet.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "jzteam.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "sashamaxymchuk.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "zod.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "labdk.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "x50capital.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "dariya.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "happystake.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "jstaking.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "marion_tetnetpool.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "beestake.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "ghostwalker.pool.f863973.m0",
            "is_slashed": false
        },
        {
            "account_id": "lionstake.pool.f863973.m0",
            "is_slashed": false
        }
    ],
    "sync_info": {
        "latest_block_hash": "7rjcY7STPuSBjsFhTQGaDEfFeA2ZwxbtVRCcuTFZkvkM",
        "latest_block_height": 78768515,
        "latest_state_root": "G4r9RXeM2MdZhGau4g8UraHPbnPwbZTcp3wthBaY5omr",
        "latest_block_time": "2022-01-13T15:33:37.494991145Z",
        "syncing": false,
        "earliest_block_hash": "62gmYfQ1bpdGHjrDyJnJLLFaEjqm1JfnML67LLfo8xnY",
        "earliest_block_height": 78528287,
        "earliest_block_time": "2022-01-11T14:17:34.284296917Z"
    },
    "validator_account_id": null
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/protocol/example/genesis-config.json ---
{
    "protocol_version": 29,
    "genesis_time": "2020-07-31T03:39:42.911378Z",
    "chain_id": "testnet",
    "genesis_height": 10885359,
    "num_block_producer_seats": 100,
    "num_block_producer_seats_per_shard": [
        100
    ],
    "avg_hidden_validator_seats_per_shard": [
        0
    ],
    "dynamic_resharding": false,
    "protocol_upgrade_stake_threshold": [
        4,
        5
    ],
    "protocol_upgrade_num_epochs": 2,
    "epoch_length": 43200,
    "gas_limit": 1000000000000000,
    "min_gas_price": "5000",
    "max_gas_price": "10000000000000000000000",
    "block_producer_kickout_threshold": 80,
    "chunk_producer_kickout_threshold": 90,
    "online_min_threshold": [
        90,
        100
    ],
    "online_max_threshold": [
        99,
        100
    ],
    "gas_price_adjustment_rate": [
        1,
        100
    ],
    "runtime_config": {
        "storage_amount_per_byte": "90949470177292823791",
        "transaction_costs": {
            "action_receipt_creation_config": {
                "send_sir": 108059500000,
                "send_not_sir": 108059500000,
                "execution": 108059500000
            },
            "data_receipt_creation_config": {
                "base_cost": {
                    "send_sir": 4697339419375,
                    "send_not_sir": 4697339419375,
                    "execution": 4697339419375
                },
                "cost_per_byte": {
                    "send_sir": 59357464,
                    "send_not_sir": 59357464,
                    "execution": 59357464
                }
            },
            "action_creation_config": {
                "create_account_cost": {
                    "send_sir": 99607375000,
                    "send_not_sir": 99607375000,
                    "execution": 99607375000
                },
                "deploy_contract_cost": {
                    "send_sir": 184765750000,
                    "send_not_sir": 184765750000,
                    "execution": 184765750000
                },
                "deploy_contract_cost_per_byte": {
                    "send_sir": 6812999,
                    "send_not_sir": 6812999,
                    "execution": 6812999
                },
                "function_call_cost": {
                    "send_sir": 2319861500000,
                    "send_not_sir": 2319861500000,
                    "execution": 2319861500000
                },
                "function_call_cost_per_byte": {
                    "send_sir": 2235934,
                    "send_not_sir": 2235934,
                    "execution": 2235934
                },
                "transfer_cost": {
                    "send_sir": 115123062500,
                    "send_not_sir": 115123062500,
                    "execution": 115123062500
                },
                "stake_cost": {
                    "send_sir": 141715687500,
                    "send_not_sir": 141715687500,
                    "execution": 102217625000
                },
                "add_key_cost": {
                    "full_access_cost": {
                        "send_sir": 101765125000,
                        "send_not_sir": 101765125000,
                        "execution": 101765125000
                    },
                    "function_call_cost": {
                        "send_sir": 102217625000,
                        "send_not_sir": 102217625000,
                        "execution": 102217625000
                    },
                    "function_call_cost_per_byte": {
                        "send_sir": 1925331,
                        "send_not_sir": 1925331,
                        "execution": 1925331
                    }
                },
                "delete_key_cost": {
                    "send_sir": 94946625000,
                    "send_not_sir": 94946625000,
                    "execution": 94946625000
                },
                "delete_account_cost": {
                    "send_sir": 147489000000,
                    "send_not_sir": 147489000000,
                    "execution": 147489000000
                }
            },
            "storage_usage_config": {
                "num_bytes_account": 100,
                "num_extra_bytes_record": 40
            },
            "burnt_gas_reward": [
                3,
                10
            ],
            "pessimistic_gas_price_inflation_ratio": [
                103,
                100
            ]
        },
        "wasm_config": {
            "ext_costs": {
                "base": 264768111,
                "contract_compile_base": 35445963,
                "contract_compile_bytes": 216750,
                "read_memory_base": 2609863200,
                "read_memory_byte": 3801333,
                "write_memory_base": 2803794861,
                "write_memory_byte": 2723772,
                "read_register_base": 2517165186,
                "read_register_byte": 98562,
                "write_register_base": 2865522486,
                "write_register_byte": 3801564,
                "utf8_decoding_base": 3111779061,
                "utf8_decoding_byte": 291580479,
                "utf16_decoding_base": 3543313050,
                "utf16_decoding_byte": 163577493,
                "sha256_base": 4540970250,
                "sha256_byte": 24117351,
                "keccak256_base": 5879491275,
                "keccak256_byte": 21471105,
                "keccak512_base": 5811388236,
                "keccak512_byte": 36649701,
                "log_base": 3543313050,
                "log_byte": 13198791,
                "storage_write_base": 64196736000,
                "storage_write_key_byte": 70482867,
                "storage_write_value_byte": 31018539,
                "storage_write_evicted_byte": 32117307,
                "storage_read_base": 56356845750,
                "storage_read_key_byte": 30952533,
                "storage_read_value_byte": 5611005,
                "storage_remove_base": 53473030500,
                "storage_remove_key_byte": 38220384,
                "storage_remove_ret_value_byte": 11531556,
                "storage_has_key_base": 54039896625,
                "storage_has_key_byte": 30790845,
                "storage_iter_create_prefix_base": 0,
                "storage_iter_create_prefix_byte": 0,
                "storage_iter_create_range_base": 0,
                "storage_iter_create_from_byte": 0,
                "storage_iter_create_to_byte": 0,
                "storage_iter_next_base": 0,
                "storage_iter_next_key_byte": 0,
                "storage_iter_next_value_byte": 0,
                "touching_trie_node": 16101955926,
                "promise_and_base": 1465013400,
                "promise_and_per_promise": 5452176,
                "promise_return": 560152386,
                "validator_stake_base": 911834726400,
                "validator_total_stake_base": 911834726400
            },
            "grow_mem_cost": 1,
            "regular_op_cost": 3856371,
            "limit_config": {
                "max_gas_burnt": 200000000000000,
                "max_gas_burnt_view": 200000000000000,
                "max_stack_height": 16384,
                "initial_memory_pages": 1024,
                "max_memory_pages": 2048,
                "registers_memory_limit": 1073741824,
                "max_register_size": 104857600,
                "max_number_registers": 100,
                "max_number_logs": 100,
                "max_total_log_length": 16384,
                "max_total_prepaid_gas": 300000000000000,
                "max_actions_per_receipt": 100,
                "max_number_bytes_method_names": 2000,
                "max_length_method_name": 256,
                "max_arguments_length": 4194304,
                "max_length_returned_data": 4194304,
                "max_contract_size": 4194304,
                "max_length_storage_key": 4194304,
                "max_length_storage_value": 4194304,
                "max_promises_per_function_call_action": 1024,
                "max_number_input_data_dependencies": 128
            }
        },
        "account_creation_config": {
            "min_allowed_top_level_account_length": 0,
            "registrar_account_id": "registrar"
        }
    },
    "validators": [
        {
            "account_id": "node0",
            "public_key": "ed25519:7PGseFbWxvYVgZ89K1uTJKYoKetWs7BJtbyXDzfbAcqX",
            "amount": "1000000000000000000000000000000"
        },
        {
            "account_id": "node1",
            "public_key": "ed25519:6DSjZ8mvsRZDvFqFxo8tCKePG96omXW7eVYVSySmDk8e",
            "amount": "1000000000000000000000000000000"
        },
        {
            "account_id": "node2",
            "public_key": "ed25519:GkDv7nSMS3xcqA45cpMvFmfV1o4fRF6zYo1JRR6mNqg5",
            "amount": "1000000000000000000000000000000"
        },
        {
            "account_id": "node3",
            "public_key": "ed25519:ydgzeXHJ5Xyt7M1gXLxqLBW1Ejx6scNV5Nx2pxFM8su",
            "amount": "1000000000000000000000000000000"
        }
    ],
    "transaction_validity_period": 86400,
    "protocol_reward_rate": [
        1,
        10
    ],
    "max_inflation_rate": [
        1,
        20
    ],
    "total_supply": "1031467299046044096035532756810080",
    "num_blocks_per_year": 31536000,
    "protocol_treasury_account": "near",
    "fishermen_threshold": "10000000000000000000",
    "minimum_stake_divisor": 10
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/protocol/example/protocol-config.json ---
{
    "protocol_version": 45,
    "genesis_time": "2020-07-31T03:39:42.911378Z",
    "chain_id": "testnet",
    "genesis_height": 42376888,
    "num_block_producer_seats": 200,
    "num_block_producer_seats_per_shard": [
        200
    ],
    "avg_hidden_validator_seats_per_shard": [
        0
    ],
    "dynamic_resharding": false,
    "protocol_upgrade_stake_threshold": [
        4,
        5
    ],
    "epoch_length": 43200,
    "gas_limit": 1000000000000000,
    "min_gas_price": "5000",
    "max_gas_price": "10000000000000000000000",
    "block_producer_kickout_threshold": 80,
    "chunk_producer_kickout_threshold": 90,
    "online_min_threshold": [
        90,
        100
    ],
    "online_max_threshold": [
        99,
        100
    ],
    "gas_price_adjustment_rate": [
        1,
        100
    ],
    "runtime_config": {
        "storage_amount_per_byte": "10000000000000000000",
        "transaction_costs": {
            "action_receipt_creation_config": {
                "send_sir": 108059500000,
                "send_not_sir": 108059500000,
                "execution": 108059500000
            },
            "data_receipt_creation_config": {
                "base_cost": {
                    "send_sir": 4697339419375,
                    "send_not_sir": 4697339419375,
                    "execution": 4697339419375
                },
                "cost_per_byte": {
                    "send_sir": 59357464,
                    "send_not_sir": 59357464,
                    "execution": 59357464
                }
            },
            "action_creation_config": {
                "create_account_cost": {
                    "send_sir": 99607375000,
                    "send_not_sir": 99607375000,
                    "execution": 99607375000
                },
                "deploy_contract_cost": {
                    "send_sir": 184765750000,
                    "send_not_sir": 184765750000,
                    "execution": 184765750000
                },
                "deploy_contract_cost_per_byte": {
                    "send_sir": 6812999,
                    "send_not_sir": 6812999,
                    "execution": 6812999
                },
                "function_call_cost": {
                    "send_sir": 2319861500000,
                    "send_not_sir": 2319861500000,
                    "execution": 2319861500000
                },
                "function_call_cost_per_byte": {
                    "send_sir": 2235934,
                    "send_not_sir": 2235934,
                    "execution": 2235934
                },
                "transfer_cost": {
                    "send_sir": 115123062500,
                    "send_not_sir": 115123062500,
                    "execution": 115123062500
                },
                "stake_cost": {
                    "send_sir": 141715687500,
                    "send_not_sir": 141715687500,
                    "execution": 102217625000
                },
                "add_key_cost": {
                    "full_access_cost": {
                        "send_sir": 101765125000,
                        "send_not_sir": 101765125000,
                        "execution": 101765125000
                    },
                    "function_call_cost": {
                        "send_sir": 102217625000,
                        "send_not_sir": 102217625000,
                        "execution": 102217625000
                    },
                    "function_call_cost_per_byte": {
                        "send_sir": 1925331,
                        "send_not_sir": 1925331,
                        "execution": 1925331
                    }
                },
                "delete_key_cost": {
                    "send_sir": 94946625000,
                    "send_not_sir": 94946625000,
                    "execution": 94946625000
                },
                "delete_account_cost": {
                    "send_sir": 147489000000,
                    "send_not_sir": 147489000000,
                    "execution": 147489000000
                }
            },
            "storage_usage_config": {
                "num_bytes_account": 100,
                "num_extra_bytes_record": 40
            },
            "burnt_gas_reward": [
                3,
                10
            ],
            "pessimistic_gas_price_inflation_ratio": [
                103,
                100
            ]
        },
        "wasm_config": {
            "ext_costs": {
                "base": 264768111,
                "contract_compile_base": 35445963,
                "contract_compile_bytes": 216750,
                "read_memory_base": 2609863200,
                "read_memory_byte": 3801333,
                "write_memory_base": 2803794861,
                "write_memory_byte": 2723772,
                "read_register_base": 2517165186,
                "read_register_byte": 98562,
                "write_register_base": 2865522486,
                "write_register_byte": 3801564,
                "utf8_decoding_base": 3111779061,
                "utf8_decoding_byte": 291580479,
                "utf16_decoding_base": 3543313050,
                "utf16_decoding_byte": 163577493,
                "sha256_base": 4540970250,
                "sha256_byte": 24117351,
                "keccak256_base": 5879491275,
                "keccak256_byte": 21471105,
                "keccak512_base": 5811388236,
                "keccak512_byte": 36649701,
                "log_base": 3543313050,
                "log_byte": 13198791,
                "storage_write_base": 64196736000,
                "storage_write_key_byte": 70482867,
                "storage_write_value_byte": 31018539,
                "storage_write_evicted_byte": 32117307,
                "storage_read_base": 56356845750,
                "storage_read_key_byte": 30952533,
                "storage_read_value_byte": 5611005,
                "storage_remove_base": 53473030500,
                "storage_remove_key_byte": 38220384,
                "storage_remove_ret_value_byte": 11531556,
                "storage_has_key_base": 54039896625,
                "storage_has_key_byte": 30790845,
                "storage_iter_create_prefix_base": 0,
                "storage_iter_create_prefix_byte": 0,
                "storage_iter_create_range_base": 0,
                "storage_iter_create_from_byte": 0,
                "storage_iter_create_to_byte": 0,
                "storage_iter_next_base": 0,
                "storage_iter_next_key_byte": 0,
                "storage_iter_next_value_byte": 0,
                "touching_trie_node": 16101955926,
                "promise_and_base": 1465013400,
                "promise_and_per_promise": 5452176,
                "promise_return": 560152386,
                "validator_stake_base": 911834726400,
                "validator_total_stake_base": 911834726400
            },
            "grow_mem_cost": 1,
            "regular_op_cost": 3856371,
            "limit_config": {
                "max_gas_burnt": 200000000000000,
                "max_gas_burnt_view": 200000000000000,
                "max_stack_height": 16384,
                "initial_memory_pages": 1024,
                "max_memory_pages": 2048,
                "registers_memory_limit": 1073741824,
                "max_register_size": 104857600,
                "max_number_registers": 100,
                "max_number_logs": 100,
                "max_total_log_length": 16384,
                "max_total_prepaid_gas": 300000000000000,
                "max_actions_per_receipt": 100,
                "max_number_bytes_method_names": 2000,
                "max_length_method_name": 256,
                "max_arguments_length": 4194304,
                "max_length_returned_data": 4194304,
                "max_contract_size": 4194304,
                "max_length_storage_key": 4194304,
                "max_length_storage_value": 4194304,
                "max_promises_per_function_call_action": 1024,
                "max_number_input_data_dependencies": 128
            }
        },
        "account_creation_config": {
            "min_allowed_top_level_account_length": 0,
            "registrar_account_id": "registrar"
        }
    },
    "transaction_validity_period": 86400,
    "protocol_reward_rate": [
        1,
        10
    ],
    "max_inflation_rate": [
        1,
        20
    ],
    "num_blocks_per_year": 31536000,
    "protocol_treasury_account": "near",
    "fishermen_threshold": "340282366920938463463374607431768211455",
    "minimum_stake_divisor": 10
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/protocol/genesis-config.json ---
{
    "protocol_version": 29,
    "genesis_time": "2020-07-31T03:39:42.911378Z",
    "chain_id": "testnet",
    "genesis_height": 42376888,
    "num_block_producer_seats": 200,
    "num_block_producer_seats_per_shard": [
        200
    ],
    "avg_hidden_validator_seats_per_shard": [
        0
    ],
    "dynamic_resharding": false,
    "protocol_upgrade_stake_threshold": [
        4,
        5
    ],
    "protocol_upgrade_num_epochs": 2,
    "epoch_length": 43200,
    "gas_limit": 1000000000000000,
    "min_gas_price": "5000",
    "max_gas_price": "10000000000000000000000",
    "block_producer_kickout_threshold": 80,
    "chunk_producer_kickout_threshold": 90,
    "online_min_threshold": [
        90,
        100
    ],
    "online_max_threshold": [
        99,
        100
    ],
    "gas_price_adjustment_rate": [
        1,
        100
    ],
    "validators": [
        {
            "account_id": "masternode24.pool.f863973.m0",
            "public_key": "ed25519:9E3JvrQN6VGDGg1WJ3TjBsNyfmrU6kncBcDvvJLj6qHr",
            "amount": "2096547887468158804726149840014"
        },
        {
            "account_id": "lunanova.pool.f863973.m0",
            "public_key": "ed25519:2fZ59qfo9QHNLijoht9cwUb9enSNcnRmXbQn1gKZxvkw",
            "amount": "6023592217250515747116857534108"
        },
        {
            "account_id": "node0",
            "public_key": "ed25519:7PGseFbWxvYVgZ89K1uTJKYoKetWs7BJtbyXDzfbAcqX",
            "amount": "7017386808510582905904716139001"
        },
        {
            "account_id": "node1",
            "public_key": "ed25519:6DSjZ8mvsRZDvFqFxo8tCKePG96omXW7eVYVSySmDk8e",
            "amount": "7021733510638228632380895173752"
        },
        {
            "account_id": "nodeasy.pool.f863973.m0",
            "public_key": "ed25519:25Dhg8NBvQhsVTuugav3t1To1X1zKiomDmnh8yN9hHMb",
            "amount": "350028003459257633077889642325"
        },
        {
            "account_id": "valeraverim.pool.f863973.m0",
            "public_key": "ed25519:3686ABqNUZc1qhLWLHg5xZpBzrWPiUCMNZxcCNmg3e2s",
            "amount": "2460437541222457077732687804254"
        },
        {
            "account_id": "node2",
            "public_key": "ed25519:GkDv7nSMS3xcqA45cpMvFmfV1o4fRF6zYo1JRR6mNqg5",
            "amount": "7022280566885326956797181813724"
        },
        {
            "account_id": "orangeclub.pool.f863973.m0",
            "public_key": "ed25519:HezFeSzcwuR5wvkqccgMCMnpf1eQkVCfk52tXZEdKZHz",
            "amount": "3073208665436498671483798256985"
        },
        {
            "account_id": "tribe-pool.pool.f863973.m0",
            "public_key": "ed25519:CRS4HTSAeiP8FKD3c3ZrCL5pC92Mu1LQaWj22keThwFY",
            "amount": "502021509894008520748060961431"
        },
        {
            "account_id": "staked.pool.f863973.m0",
            "public_key": "ed25519:D2afKYVaKQ1LGiWbMAZRfkKLgqimTR74wvtESvjx5Ft2",
            "amount": "1835541810883701332840668361355"
        },
        {
            "account_id": "node3",
            "public_key": "ed25519:ydgzeXHJ5Xyt7M1gXLxqLBW1Ejx6scNV5Nx2pxFM8su",
            "amount": "7025309465335462891886410729905"
        },
        {
            "account_id": "moonlet.pool.f863973.m0",
            "public_key": "ed25519:3e1nVCVGNS3yr6CcUvpDAs3BhiWtyM9uTBWkyVR5Xn3K",
            "amount": "396044187712024170314465720781"
        },
        {
            "account_id": "sweden.pool.f863973.m0",
            "public_key": "ed25519:2RVUnsMEZhGCj1A3vLZBGjj3i9SQ2L46Z1Z41aEgBzXg",
            "amount": "385869819054217573549654420144"
        },
        {
            "account_id": "shawnpool.pool.f863973.m0",
            "public_key": "ed25519:6dfAfW3oy1kp4u9ePuticHy3Y2WDcHwx8yKSdyLNMPSr",
            "amount": "326196336737920044305254508558"
        },
        {
            "account_id": "chorus-one.pool.f863973.m0",
            "public_key": "ed25519:6LFwyEEsqhuDxorWfsKcPPs324zLWTaoqk4o6RDXN7Qc",
            "amount": "1318859742119402879751178031888"
        },
        {
            "account_id": "inotel.pool.f863973.m0",
            "public_key": "ed25519:C55jH1MCHYGa3tzUyZZdGrJmmCLP22Aa4v88KYpn2xwZ",
            "amount": "4945759122706953812641339874642"
        },
        {
            "account_id": "p2p.pool.f863973.m0",
            "public_key": "ed25519:4ie5979JdSR4f7MRAG58eghRxndVoKnAYAKa1PLoMYSS",
            "amount": "991547852404615467434919132596"
        },
        {
            "account_id": "dokia.pool.f863973.m0",
            "public_key": "ed25519:935JMz1vLcJxFApG3TY4MA4RHhvResvoGwCrQoJxHPn9",
            "amount": "4004628852742744225484204285260"
        },
        {
            "account_id": "01node.pool.f863973.m0",
            "public_key": "ed25519:3iNqnvBgxJPXCxu6hNdvJso1PEAc1miAD35KQMBCA3aL",
            "amount": "1416856356232757387343764992394"
        },
        {
            "account_id": "legends.pool.f863973.m0",
            "public_key": "ed25519:AhQ6sUifJYgjqarXSAzdDZU9ZixpUesP9JEH1Vr7NbaF",
            "amount": "303006135607766172564337480878"
        },
        {
            "account_id": "blazenet.pool.f863973.m0",
            "public_key": "ed25519:DiogP36wBXKFpFeqirrxN8G2Mq9vnakgBvgnHdL9CcN3",
            "amount": "1892937440977093265954787297596"
        }
    ],
    "transaction_validity_period": 86400,
    "protocol_reward_rate": [
        1,
        10
    ],
    "max_inflation_rate": [
        1,
        20
    ],
    "total_supply": "2089646653180081825096998107194444",
    "num_blocks_per_year": 31536000,
    "protocol_treasury_account": "near",
    "fishermen_threshold": "340282366920938463463374607431768211455",
    "minimum_stake_divisor": 10,
    "shard_layout": {
        "V0": {
            "num_shards": 1,
            "version": 0
        }
    },
    "simple_nightshade_shard_layout": {
        "V1": {
            "fixed_shards": [],
            "boundary_accounts": [
                "aurora",
                "aurora-0",
                "kkuuue2akv_1630967379.near"
            ],
            "shards_split_map": [
                [
                    0,
                    1,
                    2,
                    3
                ]
            ],
            "to_parent_shard_map": [
                0,
                0,
                0,
                0
            ],
            "version": 1
        }
    },
    "minimum_stake_ratio": [
        1,
        6250
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/protocol/protocol-config-final.json ---
{
    "protocol_version": 52,
    "genesis_time": "2020-07-31T03:39:42.911378Z",
    "chain_id": "testnet",
    "genesis_height": 42376888,
    "num_block_producer_seats": 200,
    "num_block_producer_seats_per_shard": [
        200,
        200,
        200,
        200
    ],
    "avg_hidden_validator_seats_per_shard": [
        0,
        0,
        0,
        0
    ],
    "dynamic_resharding": false,
    "protocol_upgrade_stake_threshold": [
        4,
        5
    ],
    "epoch_length": 43200,
    "gas_limit": 1000000000000000,
    "min_gas_price": "5000",
    "max_gas_price": "10000000000000000000000",
    "block_producer_kickout_threshold": 80,
    "chunk_producer_kickout_threshold": 90,
    "online_min_threshold": [
        90,
        100
    ],
    "online_max_threshold": [
        99,
        100
    ],
    "gas_price_adjustment_rate": [
        1,
        100
    ],
    "runtime_config": {
        "storage_amount_per_byte": "10000000000000000000",
        "transaction_costs": {
            "action_receipt_creation_config": {
                "send_sir": 108059500000,
                "send_not_sir": 108059500000,
                "execution": 108059500000
            },
            "data_receipt_creation_config": {
                "base_cost": {
                    "send_sir": 36486732312,
                    "send_not_sir": 36486732312,
                    "execution": 36486732312
                },
                "cost_per_byte": {
                    "send_sir": 17212011,
                    "send_not_sir": 17212011,
                    "execution": 17212011
                }
            },
            "action_creation_config": {
                "create_account_cost": {
                    "send_sir": 99607375000,
                    "send_not_sir": 99607375000,
                    "execution": 99607375000
                },
                "deploy_contract_cost": {
                    "send_sir": 184765750000,
                    "send_not_sir": 184765750000,
                    "execution": 184765750000
                },
                "deploy_contract_cost_per_byte": {
                    "send_sir": 6812999,
                    "send_not_sir": 6812999,
                    "execution": 6812999
                },
                "function_call_cost": {
                    "send_sir": 2319861500000,
                    "send_not_sir": 2319861500000,
                    "execution": 2319861500000
                },
                "function_call_cost_per_byte": {
                    "send_sir": 2235934,
                    "send_not_sir": 2235934,
                    "execution": 2235934
                },
                "transfer_cost": {
                    "send_sir": 115123062500,
                    "send_not_sir": 115123062500,
                    "execution": 115123062500
                },
                "stake_cost": {
                    "send_sir": 141715687500,
                    "send_not_sir": 141715687500,
                    "execution": 102217625000
                },
                "add_key_cost": {
                    "full_access_cost": {
                        "send_sir": 101765125000,
                        "send_not_sir": 101765125000,
                        "execution": 101765125000
                    },
                    "function_call_cost": {
                        "send_sir": 102217625000,
                        "send_not_sir": 102217625000,
                        "execution": 102217625000
                    },
                    "function_call_cost_per_byte": {
                        "send_sir": 1925331,
                        "send_not_sir": 1925331,
                        "execution": 1925331
                    }
                },
                "delete_key_cost": {
                    "send_sir": 94946625000,
                    "send_not_sir": 94946625000,
                    "execution": 94946625000
                },
                "delete_account_cost": {
                    "send_sir": 147489000000,
                    "send_not_sir": 147489000000,
                    "execution": 147489000000
                }
            },
            "storage_usage_config": {
                "num_bytes_account": 100,
                "num_extra_bytes_record": 40
            },
            "burnt_gas_reward": [
                3,
                10
            ],
            "pessimistic_gas_price_inflation_ratio": [
                103,
                100
            ]
        },
        "wasm_config": {
            "ext_costs": {
                "base": 264768111,
                "contract_compile_base": 35445963,
                "contract_compile_bytes": 216750,
                "read_memory_base": 2609863200,
                "read_memory_byte": 3801333,
                "write_memory_base": 2803794861,
                "write_memory_byte": 2723772,
                "read_register_base": 2517165186,
                "read_register_byte": 98562,
                "write_register_base": 2865522486,
                "write_register_byte": 3801564,
                "utf8_decoding_base": 3111779061,
                "utf8_decoding_byte": 291580479,
                "utf16_decoding_base": 3543313050,
                "utf16_decoding_byte": 163577493,
                "sha256_base": 4540970250,
                "sha256_byte": 24117351,
                "keccak256_base": 5879491275,
                "keccak256_byte": 21471105,
                "keccak512_base": 5811388236,
                "keccak512_byte": 36649701,
                "ripemd160_base": 853675086,
                "ripemd160_block": 680107584,
                "ecrecover_base": 278821988457,
                "log_base": 3543313050,
                "log_byte": 13198791,
                "storage_write_base": 64196736000,
                "storage_write_key_byte": 70482867,
                "storage_write_value_byte": 31018539,
                "storage_write_evicted_byte": 32117307,
                "storage_read_base": 56356845750,
                "storage_read_key_byte": 30952533,
                "storage_read_value_byte": 5611005,
                "storage_remove_base": 53473030500,
                "storage_remove_key_byte": 38220384,
                "storage_remove_ret_value_byte": 11531556,
                "storage_has_key_base": 54039896625,
                "storage_has_key_byte": 30790845,
                "storage_iter_create_prefix_base": 0,
                "storage_iter_create_prefix_byte": 0,
                "storage_iter_create_range_base": 0,
                "storage_iter_create_from_byte": 0,
                "storage_iter_create_to_byte": 0,
                "storage_iter_next_base": 0,
                "storage_iter_next_key_byte": 0,
                "storage_iter_next_value_byte": 0,
                "touching_trie_node": 16101955926,
                "promise_and_base": 1465013400,
                "promise_and_per_promise": 5452176,
                "promise_return": 560152386,
                "validator_stake_base": 911834726400,
                "validator_total_stake_base": 911834726400
            },
            "grow_mem_cost": 1,
            "regular_op_cost": 822756,
            "limit_config": {
                "max_gas_burnt": 300000000000000,
                "max_stack_height": 16384,
                "stack_limiter_version": 1,
                "initial_memory_pages": 1024,
                "max_memory_pages": 2048,
                "registers_memory_limit": 1073741824,
                "max_register_size": 104857600,
                "max_number_registers": 100,
                "max_number_logs": 100,
                "max_total_log_length": 16384,
                "max_total_prepaid_gas": 300000000000000,
                "max_actions_per_receipt": 100,
                "max_number_bytes_method_names": 2000,
                "max_length_method_name": 256,
                "max_arguments_length": 4194304,
                "max_length_returned_data": 4194304,
                "max_contract_size": 4194304,
                "max_transaction_size": 4194304,
                "max_length_storage_key": 4194304,
                "max_length_storage_value": 4194304,
                "max_promises_per_function_call_action": 1024,
                "max_number_input_data_dependencies": 128,
                "max_functions_number_per_contract": 10000
            }
        },
        "account_creation_config": {
            "min_allowed_top_level_account_length": 32,
            "registrar_account_id": "registrar"
        }
    },
    "transaction_validity_period": 86400,
    "protocol_reward_rate": [
        1,
        10
    ],
    "max_inflation_rate": [
        1,
        20
    ],
    "num_blocks_per_year": 31536000,
    "protocol_treasury_account": "near",
    "fishermen_threshold": "340282366920938463463374607431768211455",
    "minimum_stake_divisor": 10
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/protocol/protocol-config.json ---
{
    "protocol_version": 50,
    "genesis_time": "2020-07-31T03:39:42.911378Z",
    "chain_id": "testnet",
    "genesis_height": 42376888,
    "num_block_producer_seats": 200,
    "num_block_producer_seats_per_shard": [
        200,
        200,
        200,
        200
    ],
    "avg_hidden_validator_seats_per_shard": [
        0,
        0,
        0,
        0
    ],
    "dynamic_resharding": false,
    "protocol_upgrade_stake_threshold": [
        4,
        5
    ],
    "epoch_length": 43200,
    "gas_limit": 1000000000000000,
    "min_gas_price": "5000",
    "max_gas_price": "10000000000000000000000",
    "block_producer_kickout_threshold": 80,
    "chunk_producer_kickout_threshold": 90,
    "online_min_threshold": [
        90,
        100
    ],
    "online_max_threshold": [
        99,
        100
    ],
    "gas_price_adjustment_rate": [
        1,
        100
    ],
    "runtime_config": {
        "storage_amount_per_byte": "10000000000000000000",
        "transaction_costs": {
            "action_receipt_creation_config": {
                "send_sir": 108059500000,
                "send_not_sir": 108059500000,
                "execution": 108059500000
            },
            "data_receipt_creation_config": {
                "base_cost": {
                    "send_sir": 36486732312,
                    "send_not_sir": 36486732312,
                    "execution": 36486732312
                },
                "cost_per_byte": {
                    "send_sir": 17212011,
                    "send_not_sir": 17212011,
                    "execution": 17212011
                }
            },
            "action_creation_config": {
                "create_account_cost": {
                    "send_sir": 99607375000,
                    "send_not_sir": 99607375000,
                    "execution": 99607375000
                },
                "deploy_contract_cost": {
                    "send_sir": 184765750000,
                    "send_not_sir": 184765750000,
                    "execution": 184765750000
                },
                "deploy_contract_cost_per_byte": {
                    "send_sir": 6812999,
                    "send_not_sir": 6812999,
                    "execution": 6812999
                },
                "function_call_cost": {
                    "send_sir": 2319861500000,
                    "send_not_sir": 2319861500000,
                    "execution": 2319861500000
                },
                "function_call_cost_per_byte": {
                    "send_sir": 2235934,
                    "send_not_sir": 2235934,
                    "execution": 2235934
                },
                "transfer_cost": {
                    "send_sir": 115123062500,
                    "send_not_sir": 115123062500,
                    "execution": 115123062500
                },
                "stake_cost": {
                    "send_sir": 141715687500,
                    "send_not_sir": 141715687500,
                    "execution": 102217625000
                },
                "add_key_cost": {
                    "full_access_cost": {
                        "send_sir": 101765125000,
                        "send_not_sir": 101765125000,
                        "execution": 101765125000
                    },
                    "function_call_cost": {
                        "send_sir": 102217625000,
                        "send_not_sir": 102217625000,
                        "execution": 102217625000
                    },
                    "function_call_cost_per_byte": {
                        "send_sir": 1925331,
                        "send_not_sir": 1925331,
                        "execution": 1925331
                    }
                },
                "delete_key_cost": {
                    "send_sir": 94946625000,
                    "send_not_sir": 94946625000,
                    "execution": 94946625000
                },
                "delete_account_cost": {
                    "send_sir": 147489000000,
                    "send_not_sir": 147489000000,
                    "execution": 147489000000
                }
            },
            "storage_usage_config": {
                "num_bytes_account": 100,
                "num_extra_bytes_record": 40
            },
            "burnt_gas_reward": [
                3,
                10
            ],
            "pessimistic_gas_price_inflation_ratio": [
                103,
                100
            ]
        },
        "wasm_config": {
            "ext_costs": {
                "base": 264768111,
                "contract_compile_base": 35445963,
                "contract_compile_bytes": 216750,
                "read_memory_base": 2609863200,
                "read_memory_byte": 3801333,
                "write_memory_base": 2803794861,
                "write_memory_byte": 2723772,
                "read_register_base": 2517165186,
                "read_register_byte": 98562,
                "write_register_base": 2865522486,
                "write_register_byte": 3801564,
                "utf8_decoding_base": 3111779061,
                "utf8_decoding_byte": 291580479,
                "utf16_decoding_base": 3543313050,
                "utf16_decoding_byte": 163577493,
                "sha256_base": 4540970250,
                "sha256_byte": 24117351,
                "keccak256_base": 5879491275,
                "keccak256_byte": 21471105,
                "keccak512_base": 5811388236,
                "keccak512_byte": 36649701,
                "ripemd160_base": 853675086,
                "ripemd160_block": 680107584,
                "ecrecover_base": 278821988457,
                "log_base": 3543313050,
                "log_byte": 13198791,
                "storage_write_base": 64196736000,
                "storage_write_key_byte": 70482867,
                "storage_write_value_byte": 31018539,
                "storage_write_evicted_byte": 32117307,
                "storage_read_base": 56356845750,
                "storage_read_key_byte": 30952533,
                "storage_read_value_byte": 5611005,
                "storage_remove_base": 53473030500,
                "storage_remove_key_byte": 38220384,
                "storage_remove_ret_value_byte": 11531556,
                "storage_has_key_base": 54039896625,
                "storage_has_key_byte": 30790845,
                "storage_iter_create_prefix_base": 0,
                "storage_iter_create_prefix_byte": 0,
                "storage_iter_create_range_base": 0,
                "storage_iter_create_from_byte": 0,
                "storage_iter_create_to_byte": 0,
                "storage_iter_next_base": 0,
                "storage_iter_next_key_byte": 0,
                "storage_iter_next_value_byte": 0,
                "touching_trie_node": 16101955926,
                "promise_and_base": 1465013400,
                "promise_and_per_promise": 5452176,
                "promise_return": 560152386,
                "validator_stake_base": 911834726400,
                "validator_total_stake_base": 911834726400
            },
            "grow_mem_cost": 1,
            "regular_op_cost": 822756,
            "limit_config": {
                "max_gas_burnt": 200000000000000,
                "max_stack_height": 16384,
                "stack_limiter_version": 1,
                "initial_memory_pages": 1024,
                "max_memory_pages": 2048,
                "registers_memory_limit": 1073741824,
                "max_register_size": 104857600,
                "max_number_registers": 100,
                "max_number_logs": 100,
                "max_total_log_length": 16384,
                "max_total_prepaid_gas": 300000000000000,
                "max_actions_per_receipt": 100,
                "max_number_bytes_method_names": 2000,
                "max_length_method_name": 256,
                "max_arguments_length": 4194304,
                "max_length_returned_data": 4194304,
                "max_contract_size": 4194304,
                "max_transaction_size": 4194304,
                "max_length_storage_key": 4194304,
                "max_length_storage_value": 4194304,
                "max_promises_per_function_call_action": 1024,
                "max_number_input_data_dependencies": 128,
                "max_functions_number_per_contract": 10000
            }
        },
        "account_creation_config": {
            "min_allowed_top_level_account_length": 32,
            "registrar_account_id": "registrar"
        }
    },
    "transaction_validity_period": 86400,
    "protocol_reward_rate": [
        1,
        10
    ],
    "max_inflation_rate": [
        1,
        20
    ],
    "num_blocks_per_year": 31536000,
    "protocol_treasury_account": "near",
    "fishermen_threshold": "340282366920938463463374607431768211455",
    "minimum_stake_divisor": 10
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/transaction/example/receipt-by-id.json ---
{
    "predecessor_id": "bohdan.testnet",
    "receipt": {
        "Action": {
            "actions": [
                {
                    "Transfer": {
                        "deposit": "1000000000000000000000000"
                    }
                }
            ],
            "gas_price": "103000000",
            "input_data_ids": [],
            "output_data_receivers": [],
            "signer_id": "bohdan.testnet",
            "signer_public_key": "ed25519:DhC7rPNTBwWJtmVXs1U1SqJztkn9AWbj6jCmQtkrg3TA"
        }
    },
    "receipt_id": "2EbembRPJhREPtmHCrGv3Xtdm3xoc5BMVYHm3b2kjvMY",
    "receiver_id": "frol.testnet"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/transaction/example/send-transaction-async.json ---
{
    "result": "6zgh2u9DqHHiXzdy9ouTP7oGky2T4nugqzqt9wJZwNFm"
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/transaction/example/send-transaction-await.json ---
{
    "status": {
        "SuccessValue": ""
    },
    "transaction": {
        "signer_id": "sender.testnet",
        "public_key": "ed25519:Gowpa4kXNyTMRKgt5W7147pmcc2PxiFic8UHW9rsNvJ6",
        "nonce": 13,
        "receiver_id": "receiver.testnet",
        "actions": [
            {
                "Transfer": {
                    "deposit": "1000000000000000000000000"
                }
            }
        ],
        "signature": "ed25519:7oCBMfSHrZkT7tzPDBxxCd3tWFhTES38eks3MCZMpYPJRfPWKxJsvmwQiVBBxRLoxPTnXVaMU2jPV3MdFKZTobH",
        "hash": "ASS7oYwGiem9HaNwJe6vS2kznx2CxueKDvU9BAYJRjNR"
    },
    "transaction_outcome": {
        "proof": [],
        "block_hash": "9MzuZrRPW1BGpFnZJUJg6SzCrixPpJDfjsNeUobRXsLe",
        "id": "ASS7oYwGiem9HaNwJe6vS2kznx2CxueKDvU9BAYJRjNR",
        "outcome": {
            "logs": [],
            "receipt_ids": [
                "BLV2q6p8DX7pVgXRtGtBkyUNrnqkNyU7iSksXG7BjVZh"
            ],
            "gas_burnt": 223182562500,
            "tokens_burnt": "22318256250000000000",
            "executor_id": "sender.testnet",
            "status": {
                "SuccessReceiptId": "BLV2q6p8DX7pVgXRtGtBkyUNrnqkNyU7iSksXG7BjVZh"
            }
        }
    },
    "receipts_outcome": [
        {
            "proof": [],
            "block_hash": "5Hpj1PeCi32ZkNXgiD1DrW4wvW4Xtic74DJKfyJ9XL3a",
            "id": "BLV2q6p8DX7pVgXRtGtBkyUNrnqkNyU7iSksXG7BjVZh",
            "outcome": {
                "logs": [],
                "receipt_ids": [
                    "3sawynPNP8UkeCviGqJGwiwEacfPyxDKRxsEWPpaUqtR"
                ],
                "gas_burnt": 223182562500,
                "tokens_burnt": "22318256250000000000",
                "executor_id": "receiver.testnet",
                "status": {
                    "SuccessValue": ""
                }
            }
        },
        {
            "proof": [],
            "block_hash": "CbwEqMpPcu6KwqVpBM3Ry83k6M4H1FrJjES9kBXThcRd",
            "id": "3sawynPNP8UkeCviGqJGwiwEacfPyxDKRxsEWPpaUqtR",
            "outcome": {
                "logs": [],
                "receipt_ids": [],
                "gas_burnt": 0,
                "tokens_burnt": "0",
                "executor_id": "sender.testnet",
                "status": {
                    "SuccessValue": ""
                }
            }
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/transaction/example/transaction-status-failure.json ---
{
  "receipts_outcome": [
    {
      "block_hash": "DVQD1bykhgQCYPLkSMK4rS2U56Rpm2jTLuzzWenW99ew",
      "id": "3HdfwtvmX4V5tkvdioVwEHndfTFnNYceAA6crkjKgVi9",
      "outcome": {
        "executor_id": "syntifi-alice.new.testnet",
        "gas_burnt": 207666875000,
        "logs": [],
        "metadata": {
          "gas_profile": [],
          "version": 1
        },
        "receipt_ids": [
          "AqhRYYX4EBAGnLCwVEuVcQyhVyWg5k58M6a5fizyL2a",
          "EKUnogeY5M3bEwu6kFARWZXg6je5U6p64dmy3YBFQXGs"
        ],
        "status": {
          "Failure": {
            "ActionError": {
              "index": 0,
              "kind": {
                "CreateAccountNotAllowed": {
                  "account_id": "syntifi-alice.new.testnet",
                  "predecessor_id": "syntifi-alice.testnet"
                }
              }
            }
          }
        },
        "tokens_burnt": "20766687500000000000"
      },
      "proof": [
        {
          "direction": "Right",
          "hash": "3uavQp264rBNZs2oepz3Ybh4eBU8WupPTTyYYvR3viTw"
        },
        {
          "direction": "Right",
          "hash": "JCVMzAGhyATva4bWRmnGooBLjYbqrVvkoTcBgP4mV2tK"
        }
      ]
    },
    {
      "block_hash": "3U1vJcmKHkYSpRxasPnWTNyATKtinoFkzTHanYdRtXkA",
      "id": "AqhRYYX4EBAGnLCwVEuVcQyhVyWg5k58M6a5fizyL2a",
      "outcome": {
        "executor_id": "syntifi-alice.testnet",
        "gas_burnt": 223182562500,
        "logs": [],
        "metadata": {
          "gas_profile": [],
          "version": 1
        },
        "receipt_ids": [],
        "status": {
          "SuccessValue": ""
        },
        "tokens_burnt": "0"
      },
      "proof": [
        {
          "direction": "Right",
          "hash": "6rRBbxri4k9hNTPWJYQP2C6tcwx8NHmAvQxGfDGFeJsb"
        },
        {
          "direction": "Left",
          "hash": "3ZPaZVvEGosgcMH8frgcT1mZcbRFQDQZEhGXWhygbsgx"
        }
      ]
    },
    {
      "block_hash": "3U1vJcmKHkYSpRxasPnWTNyATKtinoFkzTHanYdRtXkA",
      "id": "EKUnogeY5M3bEwu6kFARWZXg6je5U6p64dmy3YBFQXGs",
      "outcome": {
        "executor_id": "syntifi-alice.testnet",
        "gas_burnt": 223182562500,
        "logs": [],
        "metadata": {
          "gas_profile": [],
          "version": 1
        },
        "receipt_ids": [],
        "status": {
          "SuccessValue": ""
        },
        "tokens_burnt": "0"
      },
      "proof": [
        {
          "direction": "Left",
          "hash": "EKxB1HwhbNbFM57iMfdJB7XoUd2s4wYA9Pz8xLXdEqBX"
        },
        {
          "direction": "Left",
          "hash": "3ZPaZVvEGosgcMH8frgcT1mZcbRFQDQZEhGXWhygbsgx"
        }
      ]
    }
  ],
  "status": {
    "Failure": {
      "ActionError": {
        "index": 0,
        "kind": {
          "CreateAccountNotAllowed": {
            "account_id": "syntifi-alice.new.testnet",
            "predecessor_id": "syntifi-alice.testnet"
          }
        }
      }
    }
  },
  "transaction": {
    "actions": [
      "CreateAccount",
      {
        "Transfer": {
          "deposit": "1"
        }
      },
      {
        "AddKey": {
          "access_key": {
            "nonce": 83906394000150,
            "permission": "FullAccess"
          },
          "public_key": "ed25519:F8jARHGZdHqnwrxrnv1pFVzzirXZR2vJzeYbvwQbxZyP"
        }
      }
    ],
    "hash": "4w2KLyvyM1Hhx3Xd7RfCVx1CMdPYUGj3kXigLsQ5qLgn",
    "nonce": 83906394000151,
    "public_key": "ed25519:F8jARHGZdHqnwrxrnv1pFVzzirXZR2vJzeYbvwQbxZyP",
    "receiver_id": "syntifi-alice.new.testnet",
    "signature": "ed25519:3izQp2iHHmW3JNfDYeD9rnF5uqGFjV9R5gV7Wf6iKfs7PARE38HFJNM4uGAYsfh5PryfN1QcNAESEjkytB4cAoYR",
    "signer_id": "syntifi-alice.testnet"
  },
  "transaction_outcome": {
    "block_hash": "BNexnT1ZZTEaDekvvL1e9zwXYd1CWgXskAnGwYnJmUVK",
    "id": "4w2KLyvyM1Hhx3Xd7RfCVx1CMdPYUGj3kXigLsQ5qLgn",
    "outcome": {
      "executor_id": "syntifi-alice.testnet",
      "gas_burnt": 424555062500,
      "logs": [],
      "metadata": {
        "gas_profile": null,
        "version": 1
      },
      "receipt_ids": [
        "3HdfwtvmX4V5tkvdioVwEHndfTFnNYceAA6crkjKgVi9"
      ],
      "status": {
        "SuccessReceiptId": "3HdfwtvmX4V5tkvdioVwEHndfTFnNYceAA6crkjKgVi9"
      },
      "tokens_burnt": "42455506250000000000"
    },
    "proof": []
  }
}

'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/transaction/example/transaction-status-with-receipts.json ---
{
    "receipts": [
        {
            "predecessor_id": "bowen",
            "receipt": {
                "Action": {
                    "actions": [
                        {
                            "FunctionCall": {
                                "args": "eyJhbW91bnQiOiIxMDAwIiwicmVjZWl2ZXJfaWQiOiJib3dlbiJ9",
                                "deposit": 0,
                                "gas": 100000000000000,
                                "method_name": "transfer"
                            }
                        }
                    ],
                    "gas_price": "186029458",
                    "input_data_ids": [],
                    "output_data_receivers": [],
                    "signer_id": "bowen",
                    "signer_public_key": "ed25519:2f9Zv5kuyuPM5DCyEP5pSqg58NQ8Ct9uSRerZXnCS9fK"
                }
            },
            "receipt_id": "FXMVxdhSUZaZftbmPJWaoqhEB9GrKB2oqg9Wgvuyvom8",
            "receiver_id": "evgeny.lockup.m0"
        },
        {
            "predecessor_id": "evgeny.lockup.m0",
            "receipt": {
                "Action": {
                    "actions": [
                        {
                            "Transfer": {
                                "deposit": "1000"
                            }
                        }
                    ],
                    "gas_price": "186029458",
                    "input_data_ids": [],
                    "output_data_receivers": [],
                    "signer_id": "bowen",
                    "signer_public_key": "ed25519:2f9Zv5kuyuPM5DCyEP5pSqg58NQ8Ct9uSRerZXnCS9fK"
                }
            },
            "receipt_id": "3Ad7pUygUegMUWUb1rEazfjnTaHfptXCABqKQ6WNq6Wa",
            "receiver_id": "bowen"
        },
        {
            "predecessor_id": "system",
            "receipt": {
                "Action": {
                    "actions": [
                        {
                            "Transfer": {
                                "deposit": "19200274886926125000"
                            }
                        }
                    ],
                    "gas_price": "0",
                    "input_data_ids": [],
                    "output_data_receivers": [],
                    "signer_id": "bowen",
                    "signer_public_key": "ed25519:2f9Zv5kuyuPM5DCyEP5pSqg58NQ8Ct9uSRerZXnCS9fK"
                }
            },
            "receipt_id": "5DdQg9pfoJMX1q6bvhsjyyRihzA3sb9Uq5K1J7vK43Ze",
            "receiver_id": "bowen"
        },
        {
            "predecessor_id": "system",
            "receipt": {
                "Action": {
                    "actions": [
                        {
                            "Transfer": {
                                "deposit": "18663792669276228632284"
                            }
                        }
                    ],
                    "gas_price": "0",
                    "input_data_ids": [],
                    "output_data_receivers": [],
                    "signer_id": "bowen",
                    "signer_public_key": "ed25519:2f9Zv5kuyuPM5DCyEP5pSqg58NQ8Ct9uSRerZXnCS9fK"
                }
            },
            "receipt_id": "FDp8ovTf5uJYDFemW5op6ebjCT2n4CPExHYie3S1h4qp",
            "receiver_id": "bowen"
        }
    ],
    "receipts_outcome": [
        {
            "block_hash": "HuqYrYsC7h2VERFMgFkqaNqSiFuTH9CA3uJr3BkyNxhF",
            "id": "FXMVxdhSUZaZftbmPJWaoqhEB9GrKB2oqg9Wgvuyvom8",
            "outcome": {
                "executor_id": "evgeny.lockup.m0",
                "gas_burnt": 3493189769144,
                "logs": [
                    "Transferring 1000 to account @bowen"
                ],
                "receipt_ids": [
                    "3Ad7pUygUegMUWUb1rEazfjnTaHfptXCABqKQ6WNq6Wa",
                    "FDp8ovTf5uJYDFemW5op6ebjCT2n4CPExHYie3S1h4qp"
                ],
                "status": {
                    "SuccessReceiptId": "3Ad7pUygUegMUWUb1rEazfjnTaHfptXCABqKQ6WNq6Wa"
                },
                "tokens_burnt": "349318976914400000000"
            },
            "proof": [
                {
                    "direction": "Right",
                    "hash": "5WwHEszBcpfrHnt2VTvVDVnEEACNq5EpQdjz1aW9gTAa"
                }
            ]
        },
        {
            "block_hash": "DJ6oK5FtPPSwksS6pKdEjFvHWAaSVocnVNLoyi8aYk1k",
            "id": "3Ad7pUygUegMUWUb1rEazfjnTaHfptXCABqKQ6WNq6Wa",
            "outcome": {
                "executor_id": "bowen",
                "gas_burnt": 223182562500,
                "logs": [],
                "receipt_ids": [
                    "5DdQg9pfoJMX1q6bvhsjyyRihzA3sb9Uq5K1J7vK43Ze"
                ],
                "status": {
                    "SuccessValue": ""
                },
                "tokens_burnt": "22318256250000000000"
            },
            "proof": [
                {
                    "direction": "Right",
                    "hash": "CXSXmKpDU8R3UUrBAsffWMeGfKanKqEHCQrHeZkR3RKT"
                },
                {
                    "direction": "Right",
                    "hash": "2dNo7A1VHKBmMA86m1k3Z9DVXwWgQJGkKGRg8wUR3co9"
                }
            ]
        },
        {
            "block_hash": "9cjUoqAksMbs7ZJ4CXiuwm8vppz9QctTwGmgwZ5mDmUA",
            "id": "5DdQg9pfoJMX1q6bvhsjyyRihzA3sb9Uq5K1J7vK43Ze",
            "outcome": {
                "executor_id": "bowen",
                "gas_burnt": 0,
                "logs": [],
                "receipt_ids": [],
                "status": {
                    "SuccessValue": ""
                },
                "tokens_burnt": "0"
            },
            "proof": []
        },
        {
            "block_hash": "DJ6oK5FtPPSwksS6pKdEjFvHWAaSVocnVNLoyi8aYk1k",
            "id": "FDp8ovTf5uJYDFemW5op6ebjCT2n4CPExHYie3S1h4qp",
            "outcome": {
                "executor_id": "bowen",
                "gas_burnt": 0,
                "logs": [],
                "receipt_ids": [],
                "status": {
                    "SuccessValue": ""
                },
                "tokens_burnt": "0"
            },
            "proof": [
                {
                    "direction": "Left",
                    "hash": "A2Ry6NCeuK8WhRCWc41hy6uddadc5nLJ1NBX5wVYo3Yb"
                },
                {
                    "direction": "Right",
                    "hash": "2dNo7A1VHKBmMA86m1k3Z9DVXwWgQJGkKGRg8wUR3co9"
                }
            ]
        }
    ],
    "status": {
        "SuccessValue": ""
    },
    "transaction": {
        "actions": [
            {
                "FunctionCall": {
                    "args": "eyJhbW91bnQiOiIxMDAwIiwicmVjZWl2ZXJfaWQiOiJib3dlbiJ9",
                    "deposit": 0,
                    "gas": 100000000000000,
                    "method_name": "transfer"
                }
            }
        ],
        "hash": "HEgnVQZfs9uJzrqTob4g2Xmebqodq9waZvApSkrbcAhd",
        "nonce": 77,
        "public_key": "ed25519:2f9Zv5kuyuPM5DCyEP5pSqg58NQ8Ct9uSRerZXnCS9fK",
        "receiver_id": "evgeny.lockup.m0",
        "signature": "ed25519:5v1hJuw5RppKGezJHBFU6z3hwmmdferETud9rUbwxVf6xSBAWyiod93Lezaq4Zdcp4zbukDusQY9PjhV47JVCgBx",
        "signer_id": "bowen"
    },
    "transaction_outcome": {
        "block_hash": "9RX2pefXKw8M4EYjLznDF3AMvbkf9asAjN8ACK7gxKsa",
        "id": "HEgnVQZfs9uJzrqTob4g2Xmebqodq9waZvApSkrbcAhd",
        "outcome": {
            "executor_id": "bowen",
            "gas_burnt": 2428026088898,
            "logs": [],
            "receipt_ids": [
                "FXMVxdhSUZaZftbmPJWaoqhEB9GrKB2oqg9Wgvuyvom8"
            ],
            "status": {
                "SuccessReceiptId": "FXMVxdhSUZaZftbmPJWaoqhEB9GrKB2oqg9Wgvuyvom8"
            },
            "tokens_burnt": "242802608889800000000"
        },
        "proof": [
            {
                "direction": "Right",
                "hash": "DXf4XVmAF5jnjZhcxi1CYxGPuuQrcAmayq9X5inSAYvJ"
            }
        ]
    }
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/transaction/example/transaction-status.json ---
{
    "status": {
        "SuccessValue": ""
    },
    "transaction": {
        "signer_id": "sender.testnet",
        "public_key": "ed25519:Gowpa4kXNyTMRKgt5W7147pmcc2PxiFic8UHW9rsNvJ6",
        "nonce": 15,
        "receiver_id": "receiver.testnet",
        "actions": [
            {
                "Transfer": {
                    "deposit": "1000000000000000000000000"
                }
            }
        ],
        "signature": "ed25519:3168QMdTpcwHvM1dmMYBc8hg9J3Wn8n7MWBSE9WrEpns6P5CaY87RM6k4uzyBkQuML38CZhU18HzmQEevPG1zCvk",
        "hash": "6zgh2u9DqHHiXzdy9ouTP7oGky2T4nugqzqt9wJZwNFm"
    },
    "transaction_outcome": {
        "proof": [
            {
                "hash": "F7mL76CMdfbdZ3xCehVGNh1fCyaR37gr3MeGX3EZkiVf",
                "direction": "Right"
            }
        ],
        "block_hash": "ADTMLVtkhsvzUxuf6m87Pt1dnF5vi1yY7ftxmNpFx7y",
        "id": "6zgh2u9DqHHiXzdy9ouTP7oGky2T4nugqzqt9wJZwNFm",
        "outcome": {
            "logs": [],
            "receipt_ids": [
                "3dMfwczW5GQqXbD9GMTnmf8jy5uACxG6FC5dWxm3KcXT"
            ],
            "gas_burnt": 223182562500,
            "tokens_burnt": "22318256250000000000",
            "executor_id": "sender.testnet",
            "status": {
                "SuccessReceiptId": "3dMfwczW5GQqXbD9GMTnmf8jy5uACxG6FC5dWxm3KcXT"
            }
        }
    },
    "receipts_outcome": [
        {
            "proof": [
                {
                    "hash": "6h95oEd7ih62KXfyPT4zsZYont4qy9sWEXc5VQVDhqtG",
                    "direction": "Right"
                },
                {
                    "hash": "6DnibgZk1T669ZprcehUy1GpCSPw1kjzXRGu69nSaUNn",
                    "direction": "Right"
                }
            ],
            "block_hash": "GgFTVr33r4MrpAiHc9mr8TZqLnpZAX1BaZTNvhBnciy2",
            "id": "3dMfwczW5GQqXbD9GMTnmf8jy5uACxG6FC5dWxm3KcXT",
            "outcome": {
                "logs": [],
                "receipt_ids": [
                    "46KYgN8ddxs4Qy8C7BDQH49XUfcYZsaQmAvdU1nfcL9V"
                ],
                "gas_burnt": 223182562500,
                "tokens_burnt": "22318256250000000000",
                "executor_id": "receiver.testnet",
                "status": {
                    "SuccessValue": ""
                }
            }
        },
        {
            "proof": [
                {
                    "hash": "CD9Y7Bw3MSFgaPZzpc1yP51ajhGDCAsR61qXcMNcRoHf",
                    "direction": "Left"
                }
            ],
            "block_hash": "EGAgKuW6Bd6QKYSaxAkx2pPGmnjrjAcq4UpoUiqMXvPH",
            "id": "46KYgN8ddxs4Qy8C7BDQH49XUfcYZsaQmAvdU1nfcL9V",
            "outcome": {
                "logs": [],
                "receipt_ids": [],
                "gas_burnt": 0,
                "tokens_burnt": "0",
                "executor_id": "sender.testnet",
                "status": {
                    "SuccessValue": ""
                }
            }
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/transaction/receipt.json ---
{
    "predecessor_id": "isonar.testnet",
    "receiver_id": "nearcanvas.isonar.testnet",
    "receipt_id": "8b9Vt1xH8DZecMda1YqUcMWA41NvknUJJVd2XEQikPRs",
    "receipt": {
        "Action": {
            "signer_id": "isonar.testnet",
            "signer_public_key": "ed25519:6JPa48xWuwjHiG4J1ZQj9GgGdwqNvPkn63789qMevxE4",
            "gas_price": "122987387",
            "output_data_receivers": [],
            "input_data_ids": [],
            "actions": [
                {
                    "FunctionCall": {
                        "method_name": "put_pixel",
                        "args": "eyJ4IjozMjYsInkiOjMyOSwiY29sb3IiOjN9",
                        "gas": 30000000000000,
                        "deposit": 0
                    }
                }
            ]
        }
    }
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/transaction/send-transaction-await.json ---
{
    "status": {
        "SuccessValue": ""
    },
    "transaction": {
        "signer_id": "sender.testnet",
        "public_key": "ed25519:Gowpa4kXNyTMRKgt5W7147pmcc2PxiFic8UHW9rsNvJ6",
        "nonce": 13,
        "receiver_id": "receiver.testnet",
        "actions": [
            {
                "Transfer": {
                    "deposit": "1000000000000000000000000"
                }
            }
        ],
        "signature": "ed25519:7oCBMfSHrZkT7tzPDBxxCd3tWFhTES38eks3MCZMpYPJRfPWKxJsvmwQiVBBxRLoxPTnXVaMU2jPV3MdFKZTobH",
        "hash": "ASS7oYwGiem9HaNwJe6vS2kznx2CxueKDvU9BAYJRjNR"
    },
    "transaction_outcome": {
        "proof": [],
        "block_hash": "9MzuZrRPW1BGpFnZJUJg6SzCrixPpJDfjsNeUobRXsLe",
        "id": "ASS7oYwGiem9HaNwJe6vS2kznx2CxueKDvU9BAYJRjNR",
        "outcome": {
            "logs": [],
            "receipt_ids": [
                "BLV2q6p8DX7pVgXRtGtBkyUNrnqkNyU7iSksXG7BjVZh"
            ],
            "gas_burnt": 223182562500,
            "tokens_burnt": "22318256250000000000",
            "executor_id": "sender.testnet",
            "status": {
                "SuccessReceiptId": "BLV2q6p8DX7pVgXRtGtBkyUNrnqkNyU7iSksXG7BjVZh"
            }
        }
    },
    "receipts_outcome": [
        {
            "proof": [],
            "block_hash": "5Hpj1PeCi32ZkNXgiD1DrW4wvW4Xtic74DJKfyJ9XL3a",
            "id": "BLV2q6p8DX7pVgXRtGtBkyUNrnqkNyU7iSksXG7BjVZh",
            "outcome": {
                "logs": [],
                "receipt_ids": [
                    "3sawynPNP8UkeCviGqJGwiwEacfPyxDKRxsEWPpaUqtR"
                ],
                "gas_burnt": 223182562500,
                "tokens_burnt": "22318256250000000000",
                "executor_id": "receiver.testnet",
                "status": {
                    "SuccessValue": ""
                }
            }
        },
        {
            "proof": [],
            "block_hash": "CbwEqMpPcu6KwqVpBM3Ry83k6M4H1FrJjES9kBXThcRd",
            "id": "3sawynPNP8UkeCviGqJGwiwEacfPyxDKRxsEWPpaUqtR",
            "outcome": {
                "logs": [],
                "receipt_ids": [],
                "gas_burnt": 0,
                "tokens_burnt": "0",
                "executor_id": "sender.testnet",
                "status": {
                    "SuccessValue": ""
                }
            }
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/transaction/transaction-status-by-hash-with-receipt.json ---
{
    "status": {
        "SuccessValue": ""
    },
    "transaction": {
        "signer_id": "isonar.testnet",
        "public_key": "ed25519:6JPa48xWuwjHiG4J1ZQj9GgGdwqNvPkn63789qMevxE4",
        "nonce": 78431794000066,
        "receiver_id": "nearcanvas.isonar.testnet",
        "actions": [
            {
                "FunctionCall": {
                    "method_name": "put_pixel",
                    "args": "eyJ4IjozMjYsInkiOjMyOSwiY29sb3IiOjN9",
                    "gas": 30000000000000,
                    "deposit": "0"
                }
            }
        ],
        "signature": "ed25519:4THp35cbUpUNQVsDAKkbnycYGPoyVMXmDdRHcnyjH3XfR74sdjotAh86Z5pRCC5n13QHYErmSvNZtth5oSTTXHE9",
        "hash": "DwWUi6WbVHKTCDjVu4gmuQfryqjwTjrZ6ntRcKcGN6Gd"
    },
    "transaction_outcome": {
        "proof": [],
        "block_hash": "GZ9Hs9fabgQ3M7V5yisv9mH8HyM5gB3LYh41mW7wbNcW",
        "id": "DwWUi6WbVHKTCDjVu4gmuQfryqjwTjrZ6ntRcKcGN6Gd",
        "outcome": {
            "logs": [],
            "receipt_ids": [
                "8b9Vt1xH8DZecMda1YqUcMWA41NvknUJJVd2XEQikPRs"
            ],
            "gas_burnt": 2428001493624,
            "tokens_burnt": "242800149362400000000",
            "executor_id": "isonar.testnet",
            "status": {
                "SuccessReceiptId": "8b9Vt1xH8DZecMda1YqUcMWA41NvknUJJVd2XEQikPRs"
            },
            "metadata": {
                "version": 1,
                "gas_profile": null
            }
        }
    },
    "receipts_outcome": [
        {
            "proof": [
                {
                    "hash": "8u7FnPtPLgwM7BakpxZZkZtV9JjVGCoijvbsid2z2UD7",
                    "direction": "Left"
                }
            ],
            "block_hash": "8kJ93UL6WZiUpVYKacoVvipQtXD4pPaLgETaCxNiogAd",
            "id": "8b9Vt1xH8DZecMda1YqUcMWA41NvknUJJVd2XEQikPRs",
            "outcome": {
                "logs": [
                    "shard11"
                ],
                "receipt_ids": [
                    "4MtrfJeR1RrycEKnyuFfTvXRJhoJEZB3YMBbeyczyHBZ"
                ],
                "gas_burnt": 9933537576129,
                "tokens_burnt": "993353757612900000000",
                "executor_id": "nearcanvas.isonar.testnet",
                "status": {
                    "SuccessValue": ""
                },
                "metadata": {
                    "version": 1,
                    "gas_profile": [
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "BASE",
                            "gas_used": "3441985443"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "CONTRACT_COMPILE_BASE",
                            "gas_used": "35445963"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "CONTRACT_COMPILE_BYTES",
                            "gas_used": "399102425250"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "LOG_BASE",
                            "gas_used": "3543313050"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "LOG_BYTE",
                            "gas_used": "92391537"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "READ_MEMORY_BASE",
                            "gas_used": "18269042400"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "READ_MEMORY_BYTE",
                            "gas_used": "237959644467"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "READ_REGISTER_BASE",
                            "gas_used": "7551495558"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "READ_REGISTER_BYTE",
                            "gas_used": "6170671134"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_READ_BASE",
                            "gas_used": "56356845750"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_READ_KEY_BYTE",
                            "gas_used": "154762665"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_READ_VALUE_BYTE",
                            "gas_used": "448880400"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_REMOVE_BASE",
                            "gas_used": "53473030500"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_REMOVE_KEY_BYTE",
                            "gas_used": "38220384"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_REMOVE_RET_VALUE_BYTE",
                            "gas_used": "720722250000"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_WRITE_BASE",
                            "gas_used": "128393472000"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_WRITE_EVICTED_BYTE",
                            "gas_used": "2569384560"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_WRITE_KEY_BYTE",
                            "gas_used": "422897202"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_WRITE_VALUE_BYTE",
                            "gas_used": "1941140170620"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "TOUCHING_TRIE_NODE",
                            "gas_used": "869505620004"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "UTF8_DECODING_BASE",
                            "gas_used": "3111779061"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "UTF8_DECODING_BYTE",
                            "gas_used": "2041063353"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "WRITE_MEMORY_BASE",
                            "gas_used": "11215179444"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "WRITE_MEMORY_BYTE",
                            "gas_used": "170570773956"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "WRITE_REGISTER_BASE",
                            "gas_used": "11462089944"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "WRITE_REGISTER_BYTE",
                            "gas_used": "238308642468"
                        }
                    ]
                }
            }
        },
        {
            "proof": [
                {
                    "hash": "FCQmfiECrPsaLuakdFBTdoeC6MJtcQdSmW1pPx3HFmF2",
                    "direction": "Left"
                }
            ],
            "block_hash": "3oDKj3osA8tSB7xy3LT5J9YZn1yMjMPfiWDLBv1BB7G9",
            "id": "4MtrfJeR1RrycEKnyuFfTvXRJhoJEZB3YMBbeyczyHBZ",
            "outcome": {
                "logs": [],
                "receipt_ids": [],
                "gas_burnt": 223182562500,
                "tokens_burnt": "0",
                "executor_id": "isonar.testnet",
                "status": {
                    "SuccessValue": ""
                },
                "metadata": {
                    "version": 1,
                    "gas_profile": []
                }
            }
        }
    ],
    "receipts": [
        {
            "predecessor_id": "isonar.testnet",
            "receiver_id": "nearcanvas.isonar.testnet",
            "receipt_id": "8b9Vt1xH8DZecMda1YqUcMWA41NvknUJJVd2XEQikPRs",
            "receipt": {
                "Action": {
                    "signer_id": "isonar.testnet",
                    "signer_public_key": "ed25519:6JPa48xWuwjHiG4J1ZQj9GgGdwqNvPkn63789qMevxE4",
                    "gas_price": "122987387",
                    "output_data_receivers": [],
                    "input_data_ids": [],
                    "actions": [
                        {
                            "FunctionCall": {
                                "method_name": "put_pixel",
                                "args": "eyJ4IjozMjYsInkiOjMyOSwiY29sb3IiOjN9",
                                "gas": 30000000000000,
                                "deposit": "0"
                            }
                        }
                    ]
                }
            }
        },
        {
            "predecessor_id": "system",
            "receiver_id": "isonar.testnet",
            "receipt_id": "4MtrfJeR1RrycEKnyuFfTvXRJhoJEZB3YMBbeyczyHBZ",
            "receipt": {
                "Action": {
                    "signer_id": "isonar.testnet",
                    "signer_public_key": "ed25519:6JPa48xWuwjHiG4J1ZQj9GgGdwqNvPkn63789qMevxE4",
                    "gas_price": "0",
                    "output_data_receivers": [],
                    "input_data_ids": [],
                    "actions": [
                        {
                            "Transfer": {
                                "deposit": "2994881411720012920488"
                            }
                        }
                    ]
                }
            }
        }
    ]
}
'''
'''--- near-java-api-rpc/src/test/resources/json-test-samples/transaction/transaction-status-by-hash.json ---
{
    "status": {
        "SuccessValue": ""
    },
    "transaction": {
        "signer_id": "isonar.testnet",
        "public_key": "ed25519:6JPa48xWuwjHiG4J1ZQj9GgGdwqNvPkn63789qMevxE4",
        "nonce": 78431794000066,
        "receiver_id": "nearcanvas.isonar.testnet",
        "actions": [
            {
                "FunctionCall": {
                    "method_name": "put_pixel",
                    "args": "eyJ4IjozMjYsInkiOjMyOSwiY29sb3IiOjN9",
                    "gas": 30000000000000,
                    "deposit": "0"
                }
            }
        ],
        "signature": "ed25519:4THp35cbUpUNQVsDAKkbnycYGPoyVMXmDdRHcnyjH3XfR74sdjotAh86Z5pRCC5n13QHYErmSvNZtth5oSTTXHE9",
        "hash": "DwWUi6WbVHKTCDjVu4gmuQfryqjwTjrZ6ntRcKcGN6Gd"
    },
    "transaction_outcome": {
        "proof": [],
        "block_hash": "GZ9Hs9fabgQ3M7V5yisv9mH8HyM5gB3LYh41mW7wbNcW",
        "id": "DwWUi6WbVHKTCDjVu4gmuQfryqjwTjrZ6ntRcKcGN6Gd",
        "outcome": {
            "logs": [],
            "receipt_ids": [
                "8b9Vt1xH8DZecMda1YqUcMWA41NvknUJJVd2XEQikPRs"
            ],
            "gas_burnt": 2428001493624,
            "tokens_burnt": "242800149362400000000",
            "executor_id": "isonar.testnet",
            "status": {
                "SuccessReceiptId": "8b9Vt1xH8DZecMda1YqUcMWA41NvknUJJVd2XEQikPRs"
            },
            "metadata": {
                "version": 1,
                "gas_profile": null
            }
        }
    },
    "receipts_outcome": [
        {
            "proof": [
                {
                    "hash": "8u7FnPtPLgwM7BakpxZZkZtV9JjVGCoijvbsid2z2UD7",
                    "direction": "Left"
                }
            ],
            "block_hash": "8kJ93UL6WZiUpVYKacoVvipQtXD4pPaLgETaCxNiogAd",
            "id": "8b9Vt1xH8DZecMda1YqUcMWA41NvknUJJVd2XEQikPRs",
            "outcome": {
                "logs": [
                    "shard11"
                ],
                "receipt_ids": [
                    "4MtrfJeR1RrycEKnyuFfTvXRJhoJEZB3YMBbeyczyHBZ"
                ],
                "gas_burnt": 9933537576129,
                "tokens_burnt": "993353757612900000000",
                "executor_id": "nearcanvas.isonar.testnet",
                "status": {
                    "SuccessValue": ""
                },
                "metadata": {
                    "version": 1,
                    "gas_profile": [
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "BASE",
                            "gas_used": "3441985443"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "CONTRACT_COMPILE_BASE",
                            "gas_used": "35445963"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "CONTRACT_COMPILE_BYTES",
                            "gas_used": "399102425250"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "LOG_BASE",
                            "gas_used": "3543313050"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "LOG_BYTE",
                            "gas_used": "92391537"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "READ_MEMORY_BASE",
                            "gas_used": "18269042400"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "READ_MEMORY_BYTE",
                            "gas_used": "237959644467"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "READ_REGISTER_BASE",
                            "gas_used": "7551495558"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "READ_REGISTER_BYTE",
                            "gas_used": "6170671134"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_READ_BASE",
                            "gas_used": "56356845750"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_READ_KEY_BYTE",
                            "gas_used": "154762665"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_READ_VALUE_BYTE",
                            "gas_used": "448880400"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_REMOVE_BASE",
                            "gas_used": "53473030500"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_REMOVE_KEY_BYTE",
                            "gas_used": "38220384"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_REMOVE_RET_VALUE_BYTE",
                            "gas_used": "720722250000"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_WRITE_BASE",
                            "gas_used": "128393472000"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_WRITE_EVICTED_BYTE",
                            "gas_used": "2569384560"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_WRITE_KEY_BYTE",
                            "gas_used": "422897202"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "STORAGE_WRITE_VALUE_BYTE",
                            "gas_used": "1941140170620"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "TOUCHING_TRIE_NODE",
                            "gas_used": "869505620004"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "UTF8_DECODING_BASE",
                            "gas_used": "3111779061"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "UTF8_DECODING_BYTE",
                            "gas_used": "2041063353"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "WRITE_MEMORY_BASE",
                            "gas_used": "11215179444"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "WRITE_MEMORY_BYTE",
                            "gas_used": "170570773956"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "WRITE_REGISTER_BASE",
                            "gas_used": "11462089944"
                        },
                        {
                            "cost_category": "WASM_HOST_COST",
                            "cost": "WRITE_REGISTER_BYTE",
                            "gas_used": "238308642468"
                        }
                    ]
                }
            }
        },
        {
            "proof": [
                {
                    "hash": "FCQmfiECrPsaLuakdFBTdoeC6MJtcQdSmW1pPx3HFmF2",
                    "direction": "Left"
                }
            ],
            "block_hash": "3oDKj3osA8tSB7xy3LT5J9YZn1yMjMPfiWDLBv1BB7G9",
            "id": "4MtrfJeR1RrycEKnyuFfTvXRJhoJEZB3YMBbeyczyHBZ",
            "outcome": {
                "logs": [],
                "receipt_ids": [],
                "gas_burnt": 223182562500,
                "tokens_burnt": "0",
                "executor_id": "isonar.testnet",
                "status": {
                    "SuccessValue": ""
                },
                "metadata": {
                    "version": 1,
                    "gas_profile": []
                }
            }
        }
    ]
}
'''
'''--- pom.xml ---
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.syntifi.near</groupId>
    <artifactId>near-java-api</artifactId>
    <packaging>pom</packaging>
    <version>0.2.0-SNAPSHOT</version>

    <modules>
        <module>near-java-api-rpc</module>
        <module>near-java-api-indexer</module>
        <module>near-java-api-common</module>
    </modules>

    <name>${project.groupId}:${project.artifactId}</name>
    <description>Near Java API for interacting with Near RPC endpoints</description>
    <url>https://syntifi.github.io/near-java-api</url>

    <licenses>
        <license>
            <name>The Apache License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Alexandre Carvalho</name>
            <email>adcarvalho@gmail.com</email>
            <organization>SyntiFi</organization>
            <organizationUrl>https://www.syntifi.com</organizationUrl>
        </developer>
        <developer>
            <name>Andre Bertolace</name>
            <email>andre@syntifi.com</email>
            <organization>SyntiFi</organization>
            <organizationUrl>https://www.syntifi.com</organizationUrl>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:git://github.com/syntifi/near-java-api.git</connection>
        <developerConnection>scm:git:git://github.com/syntifi/near-java-api.git</developerConnection>
        <url>https://github.com/syntifi/near-java-api/tree/main</url>
    </scm>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <!-- dependencies versions -->
        <log4j.version>2.17.2</log4j.version>
        <slf4j.version>1.7.36</slf4j.version>
        <lombok.version>1.18.24</lombok.version>
        <jsonrpc4j.version>1.6.1-oak</jsonrpc4j.version>
        <retrofit2.version>2.9.0</retrofit2.version>
        <jackson.version>2.13.3</jackson.version>
        <jackson-databind.version>2.13.3</jackson-databind.version>
        <junit.version>5.8.2</junit.version>
        <jsonassert.version>1.5.0</jsonassert.version>
        <borshj.version>0.1.0</borshj.version>
        <crypto-keys.version>0.3.1</crypto-keys.version>
        <maven-gpg-plugin.version>3.0.1</maven-gpg-plugin.version>
        <maven-source-plugin.version>3.2.1</maven-source-plugin.version>
        <maven-javadoc-plugin.version>3.3.2</maven-javadoc-plugin.version>
        <maven-site-plugin.version>3.10.0</maven-site-plugin.version>
        <maven-project-info-reports-plugin.version>3.1.2</maven-project-info-reports-plugin.version>
        <maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>
        <maven-jxr-plugin.version>3.2.0</maven-jxr-plugin.version>
        <maven-surefire-report-plugin.version>2.21.0</maven-surefire-report-plugin.version>
        <jacoco-maven-plugin.version>0.8.7</jacoco-maven-plugin.version>
        <nexus-staging-maven-plugin.version>1.6.8</nexus-staging-maven-plugin.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.syntifi.near</groupId>
            <artifactId>borshj</artifactId>
            <version>${borshj.version}</version>
        </dependency>
        <dependency>
            <groupId>com.syntifi.crypto</groupId>
            <artifactId>crypto-key-ed25519</artifactId>
            <version>${crypto-keys.version}</version>
        </dependency>
        <dependency>
            <groupId>com.syntifi.crypto</groupId>
            <artifactId>crypto-key-common</artifactId>
            <version>${crypto-keys.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson-databind.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.skyscreamer</groupId>
            <artifactId>jsonassert</artifactId>
            <version>${jsonassert.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.5.3</version>
                <configuration>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                    <useReleaseProfile>false</useReleaseProfile>
                    <releaseProfiles>release</releaseProfiles>
                    <goals>deploy</goals>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>${maven-site-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>post-unit-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>sonatype-snapshot-repo</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <repositories>
                <repository>
                    <id>oss.sonatype.org-snapshot</id>
                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
                    <releases>
                        <enabled>false</enabled>
                    </releases>
                    <snapshots>
                        <enabled>true</enabled>
                    </snapshots>
                </repository>
            </repositories>
        </profile>
        <profile>
            <id>release</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>${maven-source-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>${maven-javadoc-plugin.version}</version>
                        <configuration>
                            <detectJavaApiLink>false</detectJavaApiLink>
                        </configuration>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>${maven-gpg-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                                <configuration>
                                    <gpgArguments>
                                        <arg>--pinentry-mode</arg>
                                        <arg>loopback</arg>
                                    </gpgArguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.sonatype.plugins</groupId>
                        <artifactId>nexus-staging-maven-plugin</artifactId>
                        <version>${nexus-staging-maven-plugin.version}</version>
                        <extensions>true</extensions>
                        <configuration>
                            <serverId>ossrh</serverId>
                            <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
            <distributionManagement>
                <snapshotRepository>
                    <id>ossrh-snapshot</id>
                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
                </snapshotRepository>
            </distributionManagement>
        </profile>
    </profiles>
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>${maven-surefire-report-plugin.version}</version>
                <configuration>
                    <!-- place your configuration here -->
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>3.1.1</version>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco-maven-plugin.version}</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <!-- select non-aggregate reports -->
                            <report>report</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <detectJavaApiLink>false</detectJavaApiLink>
                </configuration>
                <version>${maven-javadoc-plugin.version}</version>
                <reportSets>
                    <reportSet>
                        <!-- by default, id = "default" -->
                        <reports>
                            <!-- select non-aggregate reports -->
                            <report>javadoc</report>
                            <report>test-javadoc</report>
                        </reports>
                    </reportSet>
                    <reportSet>
                        <!-- aggregate reportSet, to define in poms having modules -->
                        <id>aggregate</id>
                        <inherited>false</inherited> <!-- don't run aggregate in child modules -->
                        <reports>
                            <report>aggregate</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>
</project>
'''