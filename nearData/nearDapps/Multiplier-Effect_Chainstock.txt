*GitHub Repository "Multiplier-Effect/Chainstock"*

'''--- README.md ---
<!-- @format -->

# Chainstock
## Quick Start
### 배포된 데모 웹 사이트 접속 후 실행 - Chrome 최적화

[https://chainstock.vercel.app](https://chainstock.vercel.app)

### 직접 다운로드 후 실행
#### 레포지토리 복사
```
git clone https://github.com/Multiplier-Effect/Chainstock
```
#### 필요 환경 설치
```
yarn
```
#### 프론트엔드 실행
```
yarn start
```
#### 프론트엔드 접속
```
https://localhost:3000/
```
## ChainStock를 소개합니다!

ChainStock은 비상장주식 중 비통일주식의 복잡한 거래방식과 주식 소유자 위변조 문제를 해결하는 블록체인 기반 비상장주식 거래 플랫폼입니다. 

현재 투자자들의 많은 관심을 받고 있는 비상장주식은 거래 규모(2022년 기준 시초 약 34조)와 그 가치가 점점 더 커지고 있으나 비상장주식을 거래하는 데에는 많은 서류와 절차가 필요한 상황입니다. 또한 비상장주식의 소유자를 확인할 수 있는 방법이 시스템화 되어 있지 않아 양도자의 소유권 확인 역시 복잡하고 위변조 가능성이 있습니다. ChainStock은 블록체인을 통해 거래내역을 기록하고 소유권을 증명하여 이러한 불편함과 위험성을 없앴습니다.

## ChainStock의 기술 소개

ChainStock은 NEAR Protocol을 기반으로 운영되며 NFT 기술을 사용하고 Smart Contract를 통해 이를 구현합니다.

**Near Protocol**

NEAR Protocol은 레거시 블록체인의 문제점인 비싼 비용과 느린 처리 속도를 해결하기 위해 등장했으며, 최종 확인 처리 속도 1초와 저렴한 수수료가 특징인 블록체인이며 Sharding 기술을 도입하고 구현하는 최초의 블록체인입니다. Mass adoption을 위해 개발자 친화성, 사용성에 포커스를 맞춘 NEAR Protocol을 사용해 빠르고 저렴한 비용에 유저들이 비상장 주식 거래를 할 수 있도록 DApp을 빌딩하고 있습니다.

더 많은 NEAR Protocol에 대한 설명은 NEAR Protocol 홈페이지를 참고해주세요.

[NEAR Protocol | Reimagine your World](https://near.org)

**NFT 기술**

NFT는 ‘대체 불가능한 토큰’으로 희소성을 가진 디지털 자산 즉, 디지털 세계에서 등기부등본과 같은 개념입니다. 최초의 창작자가 누구인지, 어떤 사람들이 소유해왔는지를 고유한 암호로 저장하기 때문에 소유권의 위변조가 불가능한 것이 특징입니다. ‘원본’을 증명할 수 있는 기술로 주식의 소유자 증명과 거래시 위변조를 막을 수 있기 때문에 주요 기술로 사용하였습니다. 비통일주식 1주를 NFT 토큰으로 발행하는 데 사용됩니다.

**ERC721 기반 Smart Contract**

한 주 단위로 구성되어있는 주식의 특성과 맞게 비통일주식을 스마트 컨트랙트를 통해 ERC721 표준을 따른 NFT 토큰으로 발행하고 거래하는 형태로 구현합니다. 

스마트 컨트랙트 주요 기능은 

1. 비통일 주식을 NFT로 만들기 위해 발행하고 `approve` 과정을 거치기 

2. 비통일 주식을 토큰으로 구매하고 사용자 간 `transfer`를 구현하기 입니다.

## ChainStock의 기대효과

**간편한 비통일주식 발행으로 스타트업, 벤처 생태계 활성화 가능**

그동안 복잡한 비통일주식 거래 방식으로 인해 스타트업도 비통일주식을 발행하기 어려웠고 투자자 역시 구입하기 어려웠습니다. 하지만 NFT 기술을 이용한다면 발행과 구매, 거래가 모두 간편해지기 때문에 투자가 활성화될 수 있습니다.

**비통일주식 거래의 단순화, 간편화**

기존에 많은 서류들이 필요했던 것에 비해 플랫폼에 가입하고 계좌나 지갑을 연결하고 플랫폼 위에서 바로 거래하기만 하면 되므로 매우 간편합니다.

**주주명부 관리 간편화**

기업에서 직접 관리해야했던 주주명부 역시 토큰 소유권 확인을 통해 자동으로 관리되고 간편하고 빠르게 확인할 수 있습니다.

**비통일주식 관련 서류 위변조검사 기능**

기존에 많은 서류들이 위변조 되었는지 구매자와 기업 측에서 검사를 했어야 하는데 반면 NFT 기술을 사용한다면 트랜잭션만 확인하면 되므로 위변조검사 기능이 매우 간편해집니다.

**비통일주식 거래 장부화 및 투명화**

블록체인 기술의 장점을 이용해 21세기에 맞지 않는 거래 과정이 수기로 이루어지는 복잡하고 불투명했던 방식을 간편하고 투명하게 디지털화시켜 변화시킬 수 있습니다. 

## 개인 사용자를 위한 사용설명서

### 1. 회원가입 / 로그인

ChainStock은 NEAR Protocol 공식 wallet을 사용하여 로그인합니다.

1-1. [https://wallet.near.org](https://wallet.near.org/) NEAR Protocol 공식 월렛 홈페이지에서 자신의 지갑을 생성합니다.

<img width="1280" alt="1111" src="https://user-images.githubusercontent.com/56113089/170502187-74d31815-1569-4140-968f-871adab6c6fd.png">

1-2. 지갑 생성이 완료되었다면 메인화면 오른쪽 상단의 버튼을 눌러 NEAR wallet에 로그인해주세요.

<img width="1280" alt="2" src="https://user-images.githubusercontent.com/56113089/170502300-0ef01436-71db-4a40-9fce-3b50c41419d1.png">

### 2. 종목 확인

- 로그인시 바로 만날 수 있는 페이지 입니다.
- 왼쪽 메뉴바에서 'Market'을 눌러서도 다음과 같이 전체 기업 종목 확인을 할 수 있습니다.
- 구매가능한 주식의 이름과 가격, 소유주를 확인할 수 있습니다.
- 각 주식의 ‘view’를 누르면 각 매물의 상세페이지로 이동하게 됩니다.

![3](https://user-images.githubusercontent.com/56113089/170502484-f3f81e3a-b907-4bb1-a07b-1ad6cd3e982f.png)

### 3. 주식 구매

- 2에서 view를 누르면 볼 수 있는 매물의 상세 페이지입니다.
- 구매하고자 하는 주식의 기업정보와 소유자, 가격을 볼 수 있습니다.
- 구매하기 버튼을 클릭하면 해당 매물을 구매할 수 있는 페이지로 이동합니다.
- 구매 페이지에서 Approve를 누르면 구매가 완료됩니다.

![4](https://user-images.githubusercontent.com/56113089/170502535-db08cf28-cdc1-4d4c-bf0c-bbdb268880bb.png)

![5](https://user-images.githubusercontent.com/56113089/170502638-08a89087-1be2-47b8-8c63-9084d1744d02.png)

### 4. 마이페이지 / 종목 판매

- 왼쪽 메뉴바의 'MyPage'를 누르면 본 화면으로 이동할 수 있습니다.
- 보유 중인 주식 목록과 현재 판매중인 주식 목록을 확인할 수 있습니다.
- 보유 중인 주식 목록에서 판매 버튼을 누르면 판매할 수 있는 팝업이 생성됩니다.
- 
![6](https://user-images.githubusercontent.com/56113089/170502679-1fe2471e-5a2c-4de0-87df-e2b71755b933.png)

![7](https://user-images.githubusercontent.com/56113089/170502692-6c9ec50f-8ed4-4893-815b-404c62930bca.png)

### 5. 주주 명부 확인

- 주식을 소유 중인 사람들과 그 거래를 증명하는 거래 증명서를 확인할 수 있습니다.

![8](https://user-images.githubusercontent.com/56113089/170502736-c5e76343-5a0f-416b-ac6d-ca959f86a3d9.png)

- '거래 증명서' 칸을 누르면 다음과 같이 실제 NEAR transaction을 확인할 수 있는 페이지로 이동하게 됩니다.

![9](https://user-images.githubusercontent.com/56113089/170502762-e51c4ddc-86e5-44d2-bddd-082ca7f307e8.png)

'''
'''--- package.json ---
{
  "name": "near-marketplace-nft",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@devexpress/dx-react-chart-material-ui": "^3.0.2",
    "@emotion/react": "^11.4.1",
    "@emotion/styled": "^11.3.0",
    "@material-ui/core": "^5.0.0-beta.5",
    "@material-ui/icons": "^5.0.0-beta.5",
    "@material-ui/styles": "^5.0.0-beta.5",
    "@mui/icons-material": "^5.4.2",
    "@mui/material": "^5.7.0",
    "@mui/styles": "^5.7.0",
    "@mui/x-data-grid": "^5.10.0",
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "formik": "^2.2.9",
    "near-api-js": "^0.42.0",
    "nft.storage": "^3.2.0",
    "prop-types": "^15.7.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-feather": "^2.0.9",
    "react-perfect-scrollbar": "^1.5.8",
    "react-redux": "^7.2.5",
    "react-router-dom": "^5.3.0",
    "react-scripts": "4.0.3",
    "redux": "^4.1.1",
    "redux-thunk": "^2.3.0",
    "web-vitals": "^1.0.1",
    "yup": "^0.32.9"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!-- @format -->

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="theme-color" content="#000000" />
		<meta
			name="description"
			content="Web site created using create-react-app"
		/>
		<link rel="apple-touch-icon" href="%PUBLIC_URL%/favicon.ico" />
		<!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
		<link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
		<!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
		<title>ChainStock</title>
	</head>
	<body>
		<noscript>You need to enable JavaScript to run this app.</noscript>
		<div id="root"></div>
		<!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
	</body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "NFT MP_GOARD",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- public/static/icon.svg ---
<svg width="119" height="113" viewBox="0 0 119 113" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M64.2438 1.68806L90.3936 19.0309C90.9977 19.4315 91.5003 20.0146 91.8502 20.7201C92.2001 21.4259 92.3845 22.2286 92.3845 23.0462C92.3845 23.8638 92.2001 24.6665 91.8502 25.3723C91.5003 26.0778 90.9977 26.6609 90.3936 27.0614L64.244 44.4051C62.575 45.512 60.693 46.0935 58.7787 46.0935C56.8642 46.0935 54.9821 45.512 53.3134 44.4051L27.1636 27.0614C26.5597 26.6609 26.0569 26.0778 25.707 25.3723C25.3571 24.6665 25.1726 23.8638 25.1726 23.0462C25.1726 22.2286 25.3571 21.4259 25.707 20.7201C26.0569 20.0146 26.5597 19.4315 27.1636 19.0309L53.3134 1.68806C54.9821 0.581207 56.8642 -4.19617e-05 58.7787 -4.19617e-05C60.693 -4.19617e-05 62.575 0.581207 64.2438 1.68806Z" fill="#828DF8"/>
<path opacity="0.7" d="M64.1025 17.9692L101.553 42.807C102.157 43.2075 102.66 43.7906 103.01 44.4961C103.359 45.2019 103.544 46.0046 103.544 46.8222C103.544 47.6398 103.359 48.4427 103.01 49.1483C102.66 49.8541 102.157 50.4369 101.553 50.8377L64.1025 75.6752C62.4338 76.7818 60.5518 77.3633 58.6375 77.3633C56.7232 77.3633 54.8411 76.7818 53.1724 75.6752L15.7219 50.8377C15.118 50.4369 14.6152 49.8541 14.2653 49.1483C13.9154 48.4427 13.731 47.6398 13.731 46.8222C13.731 46.0046 13.9154 45.2019 14.2653 44.4961C14.6152 43.7906 15.118 43.2075 15.7219 42.807L53.1724 17.9692C54.8411 16.8626 56.7232 16.2814 58.6375 16.2814C60.5518 16.2814 62.4338 16.8626 64.1025 17.9692Z" fill="#828DF8"/>
<path opacity="0.4" d="M64.9563 34.248L117.012 68.7729C117.615 69.173 118.117 69.755 118.467 70.4596C118.816 71.164 119 71.9656 119 72.7818C119 73.5981 118.816 74.3995 118.467 75.1041C118.117 75.8085 117.615 76.3907 117.012 76.7905L64.9561 111.315C63.29 112.42 61.4111 113 59.4999 113C57.5888 113 55.7098 112.42 54.0438 111.315L1.98771 76.7905C1.38477 76.3907 0.882812 75.8085 0.533485 75.1041C0.184151 74.3995 7.62939e-06 73.5981 7.62939e-06 72.7818C7.62939e-06 71.9656 0.184151 71.164 0.533485 70.4596C0.882812 69.755 1.38477 69.173 1.98771 68.7729L54.0438 34.248C55.7098 33.1432 57.5888 32.5626 59.4999 32.5626C61.4111 32.5626 63.29 33.1432 64.9563 34.248Z" fill="#828DF8"/>
</svg>

'''
'''--- src/App.js ---
import "react-perfect-scrollbar/dist/css/styles.css";
import { BrowserRouter } from "react-router-dom";
import { Provider as ReduxProvider } from "react-redux";
import { ThemeProvider } from "@material-ui/core";
import theme from "./theme/theme";
import GlobalStyles from "./theme/GlobalStyles";
import Routes from "./Routes";
import Store from "./redux/store";

function App() {
  return (
    <BrowserRouter>
      <ThemeProvider theme={theme}>
        <GlobalStyles />
        <ReduxProvider store={Store}>
          <Routes />
        </ReduxProvider>
      </ThemeProvider>
    </BrowserRouter>
  );
}

export default App;

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/Routes.js ---
/** @format */

import { Switch, Redirect } from "react-router-dom";
import { connect } from "react-redux";
import RouteWithLayout from "./utils/RouteWithLayout";
import DashboardLayout from "./layouts/DashboardLayout";
import AccountView from "./view/AccountView";
import DashboardView from "./view/DashboardView";
import MainLayout from "./layouts/MainLayout";
import MarketView from "./view/MarketPubView";
import TokenView from "./view/TokenView";
import MainView from "./view/MainView";
import CreateTokenView from "./view/CreateTokenView";

const Routes = (props) => {
	const { wallet, auth } = props;

	console.log(auth);

	if (wallet ? wallet.isSignedIn() : false) {
		return (
			<Switch>
				<RouteWithLayout
					path='/'
					exact
					component={DashboardView}
					layout={DashboardLayout}
				/>
				<RouteWithLayout
					path='/market'
					exact
					component={DashboardView}
					layout={DashboardLayout}
				/>
				<RouteWithLayout
					path='/mypage'
					exact
					component={AccountView}
					layout={DashboardLayout}
				/>
				<RouteWithLayout
					path='/token/:id'
					exact
					component={TokenView}
					layout={DashboardLayout}
				/>
				<Redirect exact to='/dashboard' />
			</Switch>
		);
	}
	return (
		<Switch>
			<RouteWithLayout
				path='/market'
				exact
				component={MarketView}
				layout={MainLayout}
			/>
			<Redirect exact to='/market' />
		</Switch>
	);
};

const mapStateToProps = (state) => ({
	wallet: state.app.wallet,
	auth: state.app.auth,
});

export default connect(mapStateToProps)(Routes);

'''
'''--- src/components/Logo.js ---
/** @format */

const Logo = (props) => <img alt='Logo' src='static/icon.svg' {...props} />;

export default Logo;

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import reportWebVitals from './reportWebVitals';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/layouts/DashboardLayout.js ---
import { useState } from "react";
import { styled } from "@material-ui/core/styles";
import DashboardNavbar from "./DashboardNavbar";
import DashboardSidebar from "./DashboardSidebar";

const DashboardLayoutRoot = styled("div")(({ theme }) => ({
  backgroundColor: theme.palette.background.default,
  display: "flex",
  height: "100%",
  overflow: "hidden",
  width: "100%",
}));

const DashboardLayoutWrapper = styled("div")(({ theme }) => ({
  display: "flex",
  flex: "1 1 auto",
  overflow: "hidden",
  paddingTop: 64,
  [theme.breakpoints.up("lg")]: {
    paddingLeft: 256,
  },
}));

const DashboardLayoutContainer = styled("div")({
  display: "flex",
  flex: "1 1 auto",
  overflow: "hidden",
});

const DashboardLayoutContent = styled("div")({
  flex: "1 1 auto",
  height: "100%",
  overflow: "auto",
});

const DashboardLayout = ({ children }) => {
  const [isMobileNavOpen, setMobileNavOpen] = useState(false);

  return (
    <DashboardLayoutRoot>
      <DashboardNavbar onMobileNavOpen={() => setMobileNavOpen(true)} />
      <DashboardSidebar
        onMobileClose={() => setMobileNavOpen(false)}
        openMobile={isMobileNavOpen}
      />
      <DashboardLayoutWrapper>
        <DashboardLayoutContainer>
          <DashboardLayoutContent>{children}</DashboardLayoutContent>
        </DashboardLayoutContainer>
      </DashboardLayoutWrapper>
    </DashboardLayoutRoot>
  );
};

export default DashboardLayout;

'''
'''--- src/layouts/DashboardNavbar.js ---
/** @format */

import { useState } from "react";
import { connect } from "react-redux";
import { Link as RouterLink } from "react-router-dom";
import PropTypes from "prop-types";
import AppBar from "@material-ui/core/AppBar";
import Badge from "@material-ui/core/Badge";
import Box from "@material-ui/core/Box";
import Hidden from "@material-ui/core/Hidden";
import IconButton from "@material-ui/core/IconButton";
import Toolbar from "@material-ui/core/Toolbar";
import MenuIcon from "@material-ui/icons/Menu";
import NotificationsIcon from "@material-ui/icons/NotificationsOutlined";
import { LogOut as LogoutIcon } from "react-feather";
import Logo from "../components/Logo";
import { logout } from "../redux/action";
import Typography from "@material-ui/core/Typography";

const DashboardNavbar = ({ onMobileNavOpen, logout, ...rest }) => {
	const [notifications] = useState([]);

	return (
		<AppBar elevation={0} {...rest}>
			<Toolbar>
				<RouterLink to='/'>
					<Logo height='48' weight='48' />
				</RouterLink>
				<RouterLink to='/' padding='20'>
					<Typography
						gutterBottom
						variant='h3'
						component='h2'
						padding='20'
						color='white'>
						ChainStock
					</Typography>
				</RouterLink>
				<Box sx={{ flexGrow: "1" }} />
				<Hidden lgDown>
					<IconButton color='inherit' size='large'>
						<Badge
							badgeContent={notifications.length}
							color='primary'
							variant='dot'>
							<NotificationsIcon />
						</Badge>
					</IconButton>
					<IconButton color='inherit' size='large' onClick={logout}>
						<LogoutIcon />
					</IconButton>
				</Hidden>
				<Hidden lgUp>
					<IconButton color='inherit' onClick={onMobileNavOpen} size='large'>
						<MenuIcon />
					</IconButton>
				</Hidden>
			</Toolbar>
		</AppBar>
	);
};

DashboardNavbar.propTypes = {
	onMobileNavOpen: PropTypes.func,
};

const mapStateToProps = (state) => ({
	title: state.app.title,
});

const mapDispatchToProps = (dispatch) => ({
	logout: () => dispatch(logout()),
});

export default connect(mapStateToProps, mapDispatchToProps)(DashboardNavbar);

'''
'''--- src/layouts/DashboardSidebar.js ---
/** @format */

import { useEffect } from "react";
import { connect } from "react-redux";
import { Link as RouterLink, useLocation } from "react-router-dom";
import PropTypes from "prop-types";
import {
	Avatar,
	Box,
	Button,
	Divider,
	Drawer,
	Hidden,
	List,
	Typography,
} from "@material-ui/core";
import {
	BarChart as BarChartIcon,
	ShoppingBag as ShoppingBagIcon,
	User as UserIcon,
	FilePlus as FilePlusIcon,
} from "react-feather";
import NavItem from "./NavItem";
import { logout } from "../redux/action";

const user = {
	avatar: "/static/images/avatars/profile.jpeg",
	jobTitle: "투자자",
	name: "여수현",
};

const items = [
	{
		href: "/market",
		icon: BarChartIcon,
		title: "Market",
	},
	{
		href: "/mypage",
		icon: UserIcon,
		title: "My page",
	},
];

const DashboardSidebar = ({ onMobileClose, openMobile, logout }) => {
	const location = useLocation();

	useEffect(() => {
		if (openMobile && onMobileClose) {
			onMobileClose();
		}
		//eslint-disable-next-line
	}, [location.pathname]);

	const content = (
		<Box
			sx={{
				display: "flex",
				flexDirection: "column",
				height: "100%",
			}}>
			<Box
				sx={{
					alignItems: "center",
					display: "flex",
					flexDirection: "column",
					p: 2,
				}}>
				<Avatar
					component={RouterLink}
					src={user.avatar}
					sx={{
						cursor: "pointer",
						width: 64,
						height: 64,
					}}
					to='/account'
				/>
				<Typography color='textPrimary' variant='h5'>
					{user.name}
				</Typography>
				<Typography color='textSecondary' variant='body2'>
					{user.jobTitle}
				</Typography>
			</Box>
			<Divider />
			<Box sx={{ p: 2 }}>
				<List>
					{items.map((item) => (
						<NavItem
							href={item.href}
							key={item.title}
							title={item.title}
							icon={item.icon}
						/>
					))}
				</List>
			</Box>
			<Box sx={{ flexGrow: 1 }} />
		</Box>
	);

	const buttonLogout = (
		<Box
			sx={{
				backgroundColor: "background.default",
				m: 1,
				p: 2,
			}}>
			<Box
				sx={{
					display: "flex",
					justifyContent: "center",
				}}>
				<Button
					onClick={logout}
					color='primary'
					component='a'
					variant='contained'>
					Logout
				</Button>
			</Box>
		</Box>
	);

	return (
		<>
			<Hidden lgUp>
				<Drawer
					anchor='left'
					onClose={onMobileClose}
					open={openMobile}
					variant='temporary'
					PaperProps={{
						sx: {
							width: 256,
						},
					}}>
					{content}
					{buttonLogout}
				</Drawer>
			</Hidden>
			<Hidden lgDown>
				<Drawer
					anchor='left'
					open
					variant='persistent'
					PaperProps={{
						sx: {
							width: 256,
							top: 64,
							height: "calc(100% - 64px)",
						},
					}}>
					{content}
				</Drawer>
			</Hidden>
		</>
	);
};

DashboardSidebar.propTypes = {
	onMobileClose: PropTypes.func,
	openMobile: PropTypes.bool,
};

DashboardSidebar.defaultProps = {
	onMobileClose: () => {},
	openMobile: false,
};

const mapStateToProps = (state) => ({
	title: state.app.title,
});

const mapDispatchToProps = (dispatch) => ({
	logout: () => dispatch(logout()),
});

export default connect(mapStateToProps, mapDispatchToProps)(DashboardSidebar);

'''
'''--- src/layouts/MainLayout.js ---
import { styled } from "@material-ui/core/styles";
import MainNavbar from "./MainNavbar";

const MainLayoutRoot = styled("div")(({ theme }) => ({
  backgroundColor: theme.palette.background.paper,
  display: "flex",
  height: "100%",
  overflow: "hidden",
  width: "100%",
}));

const MainLayoutWrapper = styled("div")({
  display: "flex",
  flex: "1 1 auto",
  overflow: "hidden",
  paddingTop: 64,
});

const MainLayoutContainer = styled("div")({
  display: "flex",
  flex: "1 1 auto",
  overflow: "hidden",
});

const MainLayoutContent = styled("div")({
  flex: "1 1 auto",
  height: "100%",
  overflow: "auto",
});

const MainLayout = ({ children }) => (
  <MainLayoutRoot>
    <MainNavbar />
    <MainLayoutWrapper>
      <MainLayoutContainer>
        <MainLayoutContent>{children}</MainLayoutContent>
      </MainLayoutContainer>
    </MainLayoutWrapper>
  </MainLayoutRoot>
);

export default MainLayout;

'''
'''--- src/layouts/MainNavbar.js ---
/** @format */

import { connect } from "react-redux";
import { Link as RouterLink } from "react-router-dom";
import { AppBar, Toolbar, IconButton, Box } from "@material-ui/core";
import { LogIn as LoginIcon } from "react-feather";
import Logo from "../components/Logo";
import { login } from "../redux/action";
import Typography from "@material-ui/core/Typography";

const MainNavbar = (props) => {
	const { login, ...prop } = props;
	return (
		<AppBar elevation={0} {...prop}>
			<Toolbar sx={{ height: 64 }}>
				<RouterLink to='/'>
					<Logo height='48' weight='68' />
				</RouterLink>
				<RouterLink to='/' padding='20'>
					<Typography
						gutterBottom
						variant='h3'
						component='h2'
						padding='20'
						color='white'>
						ChainStock
					</Typography>
				</RouterLink>
				<Box sx={{ flexGrow: "1" }} />
				<IconButton onClick={() => login()} color='inherit'>
					<LoginIcon />
				</IconButton>
			</Toolbar>
		</AppBar>
	);
};

const mapStateToProps = (state) => ({
	wallet: state.app.wallet,
});

const mapDispatchToProps = (dispatch) => ({
	login: () => dispatch(login()),
});

export default connect(mapStateToProps, mapDispatchToProps)(MainNavbar);

'''
'''--- src/layouts/NavItem.js ---
import {
  NavLink as RouterLink,
  matchPath,
  useLocation,
} from "react-router-dom";
import PropTypes from "prop-types";
import { Button, ListItem } from "@material-ui/core";

const NavItem = ({ href, icon: Icon, title, ...rest }) => {
  const location = useLocation();
  const active = href
    ? !!matchPath(
        {
          path: href,
          end: false,
        },
        location.pathname
      )
    : false;

  return (
    <ListItem disableGutters sx={{ display: "flex", py: 0 }} {...rest}>
      <Button
        component={RouterLink}
        sx={{
          color: "text.secondary",
          fontWeight: "medium",
          justifyContent: "flex-start",
          letterSpacing: 0,
          py: 1.25,
          textTransform: "none",
          width: "100%",
          ...(active && {
            color: "primary.main",
          }),
          "& svg": {
            mr: 1,
          },
        }}
        to={href}
      >
        {Icon && <Icon size="20" />}
        <span>{title}</span>
      </Button>
    </ListItem>
  );
};

NavItem.propTypes = {
  href: PropTypes.string,
  icon: PropTypes.elementType,
  title: PropTypes.string,
};

export default NavItem;

'''
'''--- src/redux/action/index.js ---
/** @format */

import types from "../constants";
import * as nearAPI from "near-api-js";
import { Contract, WalletConnection } from "near-api-js";
import {
	parseNearAmount,
	formatNearAmount,
} from "near-api-js/lib/utils/format";
import { NFTStorage, File } from "nft.storage";

const contractName = "dev-1642578662049-35854783086806";

const getNear = async () => {
	const { keyStores, connect } = nearAPI;
	const keyStore = new keyStores.BrowserLocalStorageKeyStore();

	const config = {
		networkId: "testnet",
		keyStore, // optional if not signing transactions
		nodeUrl: "https://rpc.testnet.near.org",
		walletUrl: "https://wallet.testnet.near.org",
		helperUrl: "https://helper.testnet.near.org",
		explorerUrl: "https://explorer.testnet.near.org",
	};
	const near = await connect(config);
	return near;
};

const setMediaToNftStorage = async (payload) => {
	const apiKey = process.env.REACT_APP_NFT_STORAGE_API_KEY;
	const client = new NFTStorage({ token: apiKey });
	const metadata = await client.store({
		name: payload.name,
		description: "",
		image: payload.fileBuffer,
	});
	console.log("metadata: ", metadata);
	return metadata;
};

class NearClient {
	// The user account name
	accountId;
	// The sigined to wallet
	auth;
	// Near Object
	near;
	// The wallet
	wallet;
	// The wallet balance
	walletBalance;
	// The contract near
	contract;

	setupInitializeNear = async () => {
		this.near = await getNear();
		this.wallet = new WalletConnection(this.near);
		return this.wallet;
	};

	getWallet = () => {
		if (!this.wallet) {
			throw Error("not initial near blockchain");
		}
		return this.wallet;
	};

	getContract = () => {
		if (!this.wallet) {
			throw Error("not initial near blockchain");
		}
		this.contract = new Contract(this.wallet.account(), contractName, {
			// view methods do not change state but usually return a value
			viewMethods: ["nft_tokens", "nft_token", "get_sale", "nft_total_supply"],
			changeMethods: [
				"new",
				"nft_mint",
				"nft_transfer",
				"nft_approve_account_id",
			], // change methods modify state
			// account object to initialize and sign transactions.
			sender: this.wallet.getAccountId(),
		});
		return this.contract;
	};

	initAuth = () => {
		return this.wallet.isSignedIn();
	};
	// Add dispatch title for login and logout
	login = () => {
		if (!this.wallet) {
			throw Error("not initial near blockchain");
		}
		this.wallet.requestSignIn();
	};

	logout = () => {
		if (!this.wallet) {
			throw Error("not initial near blockchain");
		}
		this.wallet.signOut();
		this.auth = false;
		return this.auth;
	};
}

const nearClient = new NearClient();

export const initNear = () => async (dispatch) => {
	const wallet = await nearClient.setupInitializeNear();

	dispatch({
		type: types.WALLET,
		payload: wallet,
	});
	console.log("wallet", wallet);
	return wallet;
};

export const mint = () => async (dispatch) => {};

export const getNftList = () => async (dispatch) => {
	if (!nearClient.wallet) {
		throw Error("not initial near blockchain");
	}

	const contract = nearClient.getContract();
	const test = await contract.nft_tokens();
	// Change total supply to ids tokens to current contract
	const totalSupply = parseInt(await contract.nft_total_supply());
	console.log("total Supply", totalSupply);
	console.log("nft_tokens: ", test);

	const nftList = [];
	for (let i = 26; i <= 55; i++) {
		const res = await contract.nft_token({ token_id: i.toString() });
		// console.log("res", res);
		nftList.push({ ...res, i });
	}
	console.log("list: ", nftList);

	dispatch({
		type: types.GET_MEME_TOKEN_LIST,
		payload: nftList,
	});
};

export const login = () => (dispatch) => {
	dispatch({
		type: types.TITLE,
		payload: "Connect to wallet",
	});
	nearClient.login();
	dispatch({
		type: types.LOGIN,
		payload: true,
	});
};

export const logout = () => (dispatch) => {
	dispatch({
		type: types.TITLE,
		payload: "Logout to wallet",
	});
	nearClient.logout();
	dispatch({
		type: types.LOGIN,
		payload: false,
	});
};

export const registerNft = (payload) => async (dispatch) => {
	const {
		utils: {
			format: { formatNearAmount },
		},
	} = nearAPI;

	dispatch({
		type: types.LOADING,
		payload: true,
	});
	dispatch({
		type: types.TITLE,
		payload: "Register NFT to NEAR blockchain",
	});
	console.log(payload);
	const raw = await setMediaToNftStorage(payload);
	console.log("raw", raw.data.image.hostname + raw.data.image.pathname);
	const path = raw.data.image.hostname + raw.data.image.pathname;
	const GAS = 200000000000000;
	const deposit = parseNearAmount("1");
	const contract = nearClient.getContract();
	const totalSupply = parseInt(await contract.nft_total_supply());
	await contract.nft_mint(
		{
			token_id: totalSupply + 1,
			metadata: { media: path, title: "Toss", description: "test" },
		},
		GAS,
		deposit
	);
	dispatch({
		type: types.LOADING,
		payload: false,
	});
};

export const payment = async (user, token_id, approval_id, pay) => {
	const contract = nearClient.getContract();
	const GAS = 200000000000000;
	const deposit = formatNearAmount("1000000000000000000000000");
	await contract.nft_transfer(
		{
			receiver_id: "chainstocktest.testnet",
			token_id: token_id,
			approval_id: approval_id,
		},
		GAS,
		deposit
	);
};

'''
'''--- src/redux/constants.js ---
const constants = {
  INIT_NEAR: "INIT_NEAR",
  WALLET: "WALLET",
  LOGIN: "LOGIN",
  ADD_MEME: "ADD_MEME",
  GET_MEME_TOKEN_LIST: "GET_MEME_TOKEN_LIST",
  TITLE: "TITLE_CREATE_BUCKET",
  LOADING: "LOADING",
};

export default constants;

'''
'''--- src/redux/reducers/app.js ---
import types from "../constants";

const initialState = {
  wallet: null,
  near: null,
  auth: null,
  paths: null,
  nftList: null,
  totalMemes: null,
  title: "",
  addMeme: null,
  loading: false,
};

const app = (state = initialState, action) => {
  switch (action.type) {
    case types.WALLET:
      return { ...state, wallet: action.payload };
    case types.INIT_NEAR:
      return { ...state, near: action.payload };
    case types.LOGIN:
      return { ...state, auth: action.payload };
    case types.GET_MEME_TOKEN_LIST:
      return { ...state, nftList: action.payload };
    case types.ADD_MEME:
      return { ...state, addMeme: action.payload };
    case types.TITLE:
      return { ...state, title: action.payload };
    case types.LOADING:
      return { ...state, loading: action.payload };
    default:
      return state;
  }
};

export default app;

'''
'''--- src/redux/reducers/index.js ---
import { combineReducers } from "redux";
import app from "./app";

export default combineReducers({
  app: app,
});

'''
'''--- src/redux/store/index.js ---
import { createStore, applyMiddleware } from "redux";
import thunk from "redux-thunk";
import RootReducer from "../reducers";

const middlewares = [thunk];

const initialState = {};

const Store = createStore(
  RootReducer,
  initialState,
  applyMiddleware(...middlewares)
);

export default Store;

'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/theme/GlobalStyles.js ---
import { createStyles } from "@material-ui/core/styles";
import { makeStyles } from "@material-ui/styles";

const useStyles = makeStyles(() =>
  createStyles({
    "@global": {
      "*": {
        boxSizing: "border-box",
        margin: 0,
        padding: 0,
      },
      html: {
        "-webkit-font-smoothing": "antialiased",
        "-moz-osx-font-smoothing": "grayscale",
        height: "100%",
        width: "100%",
      },
      body: {
        backgroundColor: "#f4f6f8",
        height: "100%",
        width: "100%",
      },
      a: {
        textDecoration: "none",
      },
      "#root": {
        height: "100%",
        width: "100%",
      },
    },
  })
);

const GlobalStyles = () => {
  useStyles();
  return null;
};

export default GlobalStyles;

'''
'''--- src/theme/theme.js ---
/** @format */

import { createTheme } from "@material-ui/core";
const theme = createTheme({
	palette: {
		background: {
			default: "#f4f6f8",
			paper: "#ffffff",
		},
		primary: {
			contrastText: "#ffffff",
			main: "#111827",
		},
		text: {
			primary: "#172b4d",
			secondary: "#6b778c",
		},
	},
	shadows: [
		"none",
		"0 0 0 1px rgba(63,63,68,0.05), 0 1px 2px 0 rgba(63,63,68,0.15)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 2px 2px -2px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 4px 8px -2px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 5px 8px -2px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 6px 12px -4px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 7px 12px -4px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 6px 16px -4px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 7px 16px -4px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 8px 18px -8px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 9px 18px -8px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 10px 20px -8px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 11px 20px -8px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 12px 22px -8px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 13px 22px -8px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 14px 24px -8px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 16px 28px -8px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 18px 30px -8px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 20px 32px -8px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 22px 34px -8px rgba(0,0,0,0.25)",
		"0 0 1px 0 rgba(0,0,0,0.31), 0 24px 36px -8px rgba(0,0,0,0.25)",
	],
	typography: {
		h1: {
			fontWeight: 500,
			fontSize: 35,
			letterSpacing: "-0.24px",
		},
		h2: {
			fontWeight: 500,
			fontSize: 29,
			letterSpacing: "-0.24px",
		},
		h3: {
			fontWeight: 500,
			fontSize: 24,
			letterSpacing: "-0.06px",
		},
		h4: {
			fontWeight: 500,
			fontSize: 20,
			letterSpacing: "-0.06px",
		},
		h5: {
			fontWeight: 500,
			fontSize: 16,
			letterSpacing: "-0.05px",
		},
		h6: {
			fontWeight: 500,
			fontSize: 14,
			letterSpacing: "-0.05px",
		},
		overline: {
			fontWeight: 500,
		},
	},
});

export default theme;

'''
'''--- src/utils/RouteWithLayout.js ---
import { Route } from "react-router-dom";
import PropTypes from "prop-types";

const RouteWithLayout = (props) => {
  const { layout: Layout, component: Component, ...rest } = props;

  return (
    <Route
      {...rest}
      render={(matchProps) => (
        <Layout>
          <Component {...matchProps} />
        </Layout>
      )}
    />
  );
};

RouteWithLayout.propTypes = {
  component: PropTypes.any.isRequired,
  layout: PropTypes.any.isRequired,
  path: PropTypes.string,
};

export default RouteWithLayout;

'''
'''--- src/view/AccountView/StockList.js ---
/** @format */
import { useEffect, useState } from "react";
import { Link as RouterLink } from "react-router-dom";
import Button from "@material-ui/core/Button";
import Card from "@material-ui/core/Card";
import CardActions from "@material-ui/core/CardActions";
import CardContent from "@material-ui/core/CardContent";
import CardMedia from "@material-ui/core/CardMedia";
import Grid from "@material-ui/core/Grid";
import Typography from "@material-ui/core/Typography";
import Link from "@material-ui/core/Link";
import Stack from "@mui/material/Stack";
import Box from "@mui/material/Box";
import Modal from "@mui/material/Modal";
import TextField from "@mui/material/TextField";

const StockList = (props) => {
	const { dataArr, salesArr, wallet } = props;

	const [rerender, setRerender] = useState(false);
	const [open, setOpen] = useState(false);
	const handleOpen = () => {
		setOpen(true);
	};
	const handleClose = () => {
		setOpen(false);
	};

	const onSale = (i) => {
		salesArr.push(dataArr[i]);
		dataArr.splice(i, 1);
		setRerender(!rerender);
		handleOpen();
	};
	useEffect(() => {
		setRerender(!rerender);
	}, []);
	let count = 0;
	const resultArr = dataArr.filter((i) => {
		if (wallet == i.owner_id) {
			count = count + 1;
		}
		return 0;
	});
	const style = {
		position: "absolute",
		top: "50%",
		left: "50%",
		transform: "translate(-50%, -50%)",
		width: 400,
		bgcolor: "background.paper",
		border: "2px solid #000",
		// boxShadow: 24,
		p: 4,
	};

	return (
		<>
			<Stack direction='row' spacing={20}>
				<Card sx={{ minWidth: 300 }}>
					<CardContent>
						<Typography
							sx={{ fontSize: 14 }}
							color='text.secondary'
							gutterBottom>
							보유 비상장 주식 수
						</Typography>
						<Typography variant='h2' component='div' gutterBottom>
							{count}
						</Typography>
						<Typography color='text.secondary'>{wallet}</Typography>
					</CardContent>
				</Card>

				<Card sx={{ minWidth: 300 }}>
					<CardContent>
						<Typography
							sx={{ fontSize: 14 }}
							color='text.secondary'
							gutterBottom>
							판매 중인 비상장 주식 수
						</Typography>
						<Typography variant='h2' component='div'>
							{salesArr.length}
						</Typography>
						<Typography color='text.secondary'>{wallet}</Typography>
					</CardContent>
				</Card>
			</Stack>
			<Typography
				noWrap
				gutterBottom
				variant='h3'
				component='h3'
				sx={{ paddingTop: "42px", paddingBottom: "24px" }}>
				보유 중인 비상장주식
			</Typography>
			<Grid container spacing={4}>
				{dataArr.map((el, i) => (
					<Grid item key={i} xs={6} sm={4} md={3}>
						<Modal hideBackdrop open={open} onClose={handleClose}>
							<Box sx={style}>
								<h2 id='child-modal-title'>비상장 주식 판매하기</h2>
								<br />
								<p id='child-modal-description'>판매 가격을 입력해주세요</p>
								<br />
								<TextField
									id='outlined-basic'
									label='NEAR'
									variant='outlined'
								/>
								<br />
								<Button onClick={handleClose}>확인</Button>
							</Box>
						</Modal>
						<Card
							sx={{ height: "100%", display: "flex", flexDirection: "column" }}>
							<CardMedia
								sx={{ paddingTop: "100%", backgroundSize: "contain" }}
								image={el.metadata.media}
								title={el.metadata.title}
							/>
							<CardContent sx={{ flexGrow: 1 }}>
								<Typography gutterBottom variant='h3' component='h2'>
									{el.metadata.title}
								</Typography>
								<Typography>{el.metadata.extra} NEAR</Typography>
								<Typography>{el.owner_id}</Typography>
							</CardContent>
							<CardActions>
								<Grid container direction='row' justifyContent='space-between'>
									<Link component={RouterLink} to={`/token/${el.token_id}`}>
										<Button size='small' color='primary'>
											View
										</Button>
									</Link>
									<Button
										size='small'
										color='primary'
										onClick={() => onSale(i)}>
										판매하기
									</Button>
								</Grid>
							</CardActions>
						</Card>
					</Grid>
				))}
			</Grid>
			<Typography
				noWrap
				gutterBottom
				variant='h3'
				component='h3'
				sx={{ paddingTop: "42px", paddingBottom: "24px" }}>
				판매 중인 비상장주식
			</Typography>
			<Grid container spacing={4}>
				{salesArr &&
					salesArr.map((el, i) => (
						<Grid item key={i} xs={6} sm={4} md={3}>
							<Card
								sx={{
									height: "100%",
									display: "flex",
									flexDirection: "column",
								}}>
								<CardMedia
									sx={{ paddingTop: "100%", backgroundSize: "contain" }}
									image={el.metadata.media}
									title={el.metadata.title}
								/>
								<CardContent sx={{ flexGrow: 1 }}>
									<Typography gutterBottom variant='h3' component='h2'>
										{el.metadata.title}
									</Typography>
									<Typography>{el.metadata.extra} NEAR</Typography>
									<Typography>{el.owner_id}</Typography>
								</CardContent>
								<CardActions>
									<Grid
										container
										direction='row'
										justifyContent='space-between'>
										<Link component={RouterLink} to={`/token/${el.token_id}`}>
											<Button size='small' color='primary'>
												View
											</Button>
										</Link>
										<Button size='small' color='primary'>
											판매하기
										</Button>
									</Grid>
								</CardActions>
							</Card>
						</Grid>
					))}
			</Grid>
		</>
	);
};

export default StockList;

'''
'''--- src/view/AccountView/index.js ---
/** @format */

import { NFTStorage } from "nft.storage";
import { useEffect, useCallback, useState } from "react";
import { connect } from "react-redux";
import { getNftList } from "../../redux/action";

import Typography from "@material-ui/core/Typography";
import Container from "@material-ui/core/Container";
import StockList from "./StockList";

const AccountView = (props) => {
	const { wallet, nftList, getNftList } = props;
	const [rerender, setRerender] = useState(false);

	const getNftListAccount = useCallback(async () => {
		await getNftList();
	}, [getNftList]);

	const salesArr = [];

	useEffect(() => {
		getNftListAccount();
	}, [getNftListAccount]);

	const resultArr = nftList.filter((i) => {
		if (wallet._authData.accountId == i.owner_id) {
			return i;
		}
	});

	// useEffect(() => {
	// 	setRerender(!rerender);
	// 	console.log(rerender);
	// }, [salesArr]);

	return (
		<Container sx={{ paddingTop: "24x", paddingBottom: "24px" }} maxWidth='md'>
			<Typography
				noWrap
				gutterBottom
				variant='h1'
				component='h1'
				sx={{ paddingTop: "42px" }}>
				마이페이지
			</Typography>
			<Typography
				noWrap
				gutterBottom
				variant='h3'
				component='h3'
				sx={{ paddingTop: "42px", paddingBottom: "24px" }}>
				보유 주식 현황
			</Typography>
			{/* <Charts dataArr={nftList} wallet={wallet._authData.accountId} /> */}

			<StockList
				salesArr={salesArr}
				dataArr={resultArr}
				wallet={wallet._authData.accountId}
			/>

			{/* <SaleList salesArr={salesArr} /> */}
		</Container>
	);
};

const mapStateToProps = (state) => ({
	wallet: state.app.wallet,
	nftList: state.app.nftList,
});

const mapDispatchToProps = (dispatch) => ({
	getNftList: () => dispatch(getNftList()),
});

export default connect(mapStateToProps, mapDispatchToProps)(AccountView);

'''
'''--- src/view/CreateTokenView/Backdrop.js ---
import Backdrop from "@material-ui/core/Backdrop";
import CircularProgress from "@material-ui/core/CircularProgress";
import Typography from "@material-ui/core/Typography";
import Grid from "@material-ui/core/Grid";
import { makeStyles } from "@material-ui/styles";

const useStyles = makeStyles((theme) => ({
  backdrop: {
    zIndex: theme.zIndex.drawer + 1,
    color: "#fff",
  },
}));

const SimpleBackdrop = (props) => {
  const { open, title } = props;
  const classes = useStyles();

  return (
    <div>
      <Backdrop className={classes.backdrop} open={open}>
        <Grid container direction="column" alignItems="center">
          <CircularProgress color="inherit" />
          <Typography>{title}</Typography>
        </Grid>
      </Backdrop>
    </div>
  );
};

export default SimpleBackdrop;

'''
'''--- src/view/CreateTokenView/CreateNft.js ---
/** @format */

import { useFormik, Formik, Form } from "formik";
import * as Yup from "yup";
import { makeStyles } from "@material-ui/styles";
import Card from "@material-ui/core/Card";
import CardActions from "@material-ui/core/CardActions";
import CardContent from "@material-ui/core/CardContent";
import CardMedia from "@material-ui/core/CardMedia";
import TextField from "@material-ui/core/TextField";
import Box from "@material-ui/core/Box";
import Button from "@material-ui/core/Button";
import Container from "@material-ui/core/Container";
import IconButton from "@material-ui/core/IconButton";
import AddPhotoAlternateIcon from "@material-ui/icons/AddPhotoAlternate";
import Typography from "@material-ui/core/Typography";

const useStyles = makeStyles((theme) => ({
	input: {
		display: "none",
	},
	cardGrid: {
		paddingTop: theme.spacing(8),
		paddingBottom: theme.spacing(8),
	},
	card: {
		height: "100%",
		display: "flex",
		flexDirection: "column",
	},
	cardMedia: {
		paddingTop: "56.25%", // 16:9
	},
	cardContent: {
		flexGrow: 1,
	},
}));

const CreateNft = (props) => {
	const { registerNft } = props;
	const classes = useStyles();

	const validationSchema = Yup.object({
		file: Yup.mixed().required("Add media"),
		name: Yup.string("Add name NFT token").max(255).required("Required"),
		// price: Yup.number("Введите цену NFT token").required("Цена обязательна"),
		// createdOn: yup.date().default(function () {
		//   return new Date();
		// }),
	});

	// const formik = useFormik({
	//   initialValues: { file: null, fileUrl: null, name: "", price: "" },
	//   validationSchema: validationSchema,
	//   onSubmit: async (values) => {
	//     console.log(values);
	//     try {
	//       await registerNft({
	//         fileBuffer: values.file,
	//         name: values.name,
	//         price: values.price,
	//       });
	//     } catch (error) {
	//       console.log(error);
	//     }
	//   },
	// });

	return (
		<Container maxWidth='sm'>
			<Typography
				noWrap
				gutterBottom
				variant='h3'
				component='h2'
				sx={{ paddingTop: "42px" }}>
				비상장 주식 발행
			</Typography>
			<Formik
				initialValues={{ file: null, fileUrl: null, name: "", price: "" }}
				validationSchema={validationSchema}
				onSubmit={async (values, { setSubmitting }) => {
					console.log(values);
					try {
						await registerNft({
							fileBuffer: values.file,
							name: values.name,
						});
						setSubmitting(false);
					} catch (error) {
						console.log(error);
					}
				}}>
				{(props) => {
					const {
						values,
						touched,
						errors,
						isSubmitting,
						handleChange,
						handleSubmit,
						setFieldValue,
					} = props;
					const uploadMedia = (file) => {
						let fileReader = new FileReader();
						fileReader.onload = function (e) {
							// The file's text will be printed here
							setFieldValue("fileUrl", e.target.result);
						};
						fileReader.readAsDataURL(file);
					};
					return (
						<Form onSubmit={handleSubmit}>
							<Card className={classes.card}>
								<input
									className={classes.input}
									accept='image/*'
									id='file'
									type='file'
									name='file'
									onChange={(event) => {
										setFieldValue("file", event.currentTarget.files[0]);
										uploadMedia(event.currentTarget.files[0]);
									}}
								/>

								<CardMedia
									// className={classes.cardMedia}
									component='img'
									image={
										values.file
											? values.fileUrl
											: "https://via.placeholder.com/500x300?text=Visit+Blogging.com+NowC/O https://placeholder.com/"
									}
									// title={formik}
								/>
								<CardContent className={classes.cardContent}>
									<label htmlFor='file'>
										<IconButton component='span'>
											<AddPhotoAlternateIcon
												fontSize='large'
												color='secondary'
											/>
										</IconButton>
									</label>
									<TextField
										fullWidth
										label='종목 이름'
										margin='normal'
										name='name'
										variant='outlined'
										onChange={handleChange}
										value={values.name}
										helperText={touched.name && errors.name}
										error={touched.name && Boolean(errors.name)}
									/>
									<TextField
										fullWidth
										label='발행 가격'
										margin='normal'
										name='name'
										variant='outlined'
										onChange={handleChange}
										value={values.name}
										helperText={touched.name && errors.name}
										error={touched.name && Boolean(errors.name)}
									/>
								</CardContent>
								<CardActions>
									<Button
										type='submit'
										disabled={isSubmitting}
										color='primary'
										fullWidth
										size='large'
										variant='contained'
										// onClick={formik.handleSubmit}
									>
										Create NFT
									</Button>
								</CardActions>
							</Card>
							<Box display='flex' justifyContent='center'></Box>
						</Form>
					);
				}}
			</Formik>
		</Container>
	);
};

export default CreateNft;

'''
'''--- src/view/CreateTokenView/index.js ---
import { useState, useEffect } from "react";
import { connect } from "react-redux";
import { makeStyles } from "@material-ui/styles";
import Alert from "@material-ui/core/Alert";
import Container from "@material-ui/core/Container";
import Snackbar from "@material-ui/core/Snackbar";
import { registerNft } from "../../redux/action";
import SimpleBackdrop from "./Backdrop";
import CreateNft from "./CreateNft";

const useStyles = makeStyles((theme) => ({
  root: {
    backgroundColor: theme.palette.background.dark,
    minHeight: "100%",
    paddingBottom: theme.spacing(3),
    paddingTop: theme.spacing(3),
  },
}));

function AlertShow(props) {
  return <Alert elevation={6} variant="filled" {...props} />;
}

const CreateTokenView = (props) => {
  const { loading, title, registerNft } = props;
  const classes = useStyles();
  const [openSnackbar, setOpenSnacbar] = useState(false);

  const handleClose = () => {
    setOpenSnacbar(false);
  };
  return (
    <Container maxWidth={false}>
      <CreateNft registerNft={registerNft} />
      <SimpleBackdrop open={loading} title={title} />
      <Snackbar
        anchorOrigin={{ vertical: "top", horizontal: "center" }}
        open={openSnackbar}
        autoHideDuration={6000}
        onClose={handleClose}
      >
        <AlertShow onClose={handleClose} severity="success">
          Успех, NFT token создан!
        </AlertShow>
      </Snackbar>
    </Container>
  );
};

const mapStateToProps = (state) => ({
  loading: state.app.loading,
  title: state.app.title,
});

const mapDispatchToProps = (dispatch) => ({
  registerNft: (payload) => dispatch(registerNft(payload)),
});

export default connect(mapStateToProps, mapDispatchToProps)(CreateTokenView);

'''
'''--- src/view/DashboardView/Album.js ---
/** @format */

import { Link as RouterLink } from "react-router-dom";
import Button from "@material-ui/core/Button";
import Card from "@material-ui/core/Card";
import CardActions from "@material-ui/core/CardActions";
import CardContent from "@material-ui/core/CardContent";
import CardMedia from "@material-ui/core/CardMedia";
import Grid from "@material-ui/core/Grid";
import Typography from "@material-ui/core/Typography";
import Container from "@material-ui/core/Container";
import IconButton from "@material-ui/core/IconButton";
import Link from "@material-ui/core/Link";
import { FavoriteBorder as FavoriteBorderIcon } from "@material-ui/icons";

const Album = (props) => {
	const { dataArr } = props;

	return (
		<Container sx={{ paddingTop: "24px", paddingBottom: "24px" }} maxWidth='md'>
			<Grid container spacing={4}>
				{dataArr.map((el, i) => (
					<Grid item key={i} xs={6} sm={4} md={3}>
						<Card
							sx={{ height: "100%", display: "flex", flexDirection: "column" }}>
							<CardMedia
								sx={{ paddingTop: "100%", backgroundSize: "contain" }}
								image={el.metadata.media}
								title={el.metadata.title}
							/>
							<CardContent sx={{ flexGrow: 1 }}>
								<Typography gutterBottom variant='h3' component='h2'>
									{el.metadata.title}
								</Typography>
								<Typography>{el.metadata.extra} NEAR</Typography>
								<Typography>{el.owner_id}</Typography>
							</CardContent>
							<CardActions>
								<Grid container direction='row' justifyContent='space-between'>
									<Link component={RouterLink} to={`/token/${el.token_id}`}>
										<Button size='small' color='primary'>
											View
										</Button>
									</Link>
									<IconButton>
										<FavoriteBorderIcon />
									</IconButton>
								</Grid>
							</CardActions>
						</Card>
					</Grid>
				))}
			</Grid>
		</Container>
	);
};

export default Album;

'''
'''--- src/view/DashboardView/index.js ---
/** @format */

import { useEffect, useCallback } from "react";
import { connect } from "react-redux";
import { getNftList } from "../../redux/action";
import Container from "@material-ui/core/Container";
import Album from "./Album";
import Typography from "@material-ui/core/Typography";

const DashboardView = (props) => {
	const { wallet, nftList, getNftList } = props;

	const getNftListDashboard = useCallback(async () => {
		await getNftList();
	}, [getNftList]);

	useEffect(() => {
		getNftListDashboard();
	}, [getNftListDashboard]);

	return (
		<Container sx={{ paddingTop: "24px", paddingBottom: "24px" }} maxWidth='md'>
			<Typography noWrap gutterBottom variant='h1' component='h1'>
				구매 가능 비상장 주식
			</Typography>
			{Array.isArray(nftList) && nftList.length > 0 && (
				<Album dataArr={nftList} />
			)}
			{!nftList && <h1>loading...</h1>}
		</Container>
	);
};

const mapStateToProps = (state) => ({
	wallet: state.app.wallet,
	nftList: state.app.nftList,
});

const mapDispatchToProps = (dispatch) => ({
	getNftList: () => dispatch(getNftList()),
});

export default connect(mapStateToProps, mapDispatchToProps)(DashboardView);

'''
'''--- src/view/MainView/index.js ---
/** @format */

import { useEffect, useCallback } from "react";
import { connect } from "react-redux";
import { getNftList, initNear } from "../../redux/action";

const MainView = (props) => {
	return <>main</>;
};

const mapStateToProps = (state) => ({
	wallet: state.app.wallet,
	nftList: state.app.nftList,
});

const mapDispatchToProps = (dispatch) => ({
	initNear: () => dispatch(initNear()),
	getNftList: () => dispatch(getNftList()),
});

export default connect(mapStateToProps, mapDispatchToProps)(MainView);

'''
'''--- src/view/MarketPubView/Album.js ---
/** @format */

import Button from "@material-ui/core/Button";
import Card from "@material-ui/core/Card";
import CardActions from "@material-ui/core/CardActions";
import CardContent from "@material-ui/core/CardContent";
import CardMedia from "@material-ui/core/CardMedia";
import Grid from "@material-ui/core/Grid";
import Typography from "@material-ui/core/Typography";
import Container from "@material-ui/core/Container";

const Album = (props) => {
	const { dataArr } = props;

	return (
		<Container sx={{ paddingTop: "24px", paddingBottom: "24px" }} maxWidth='md'>
			<Grid container spacing={4}>
				{dataArr.map((el, i) => (
					<Grid item key={i} xs={6} sm={4} md={3}>
						<Card
							sx={{ height: "100%", display: "flex", flexDirection: "column" }}>
							<CardMedia
								sx={{ paddingTop: "100%", backgroundSize: "contain" }}
								image={el.metadata.media}
								title={el.metadata.title}
							/>
							<CardContent sx={{ flexGrow: 1 }}>
								<Typography gutterBottom variant='h3' component='h2'>
									{el.metadata.title}
								</Typography>
								<Typography>{el.owner_id}</Typography>
							</CardContent>
							<CardActions>
								<Grid
									container
									direction='row'
									justifyContent='space-between'
									alignItems='center'>
									<Button size='small' color='primary'>
										View
									</Button>
									<Typography>{el.metadata.extra} NEAR</Typography>
								</Grid>
							</CardActions>
						</Card>
					</Grid>
				))}
			</Grid>
		</Container>
	);
};

export default Album;

'''
'''--- src/view/MarketPubView/index.js ---
/** @format */

import { useEffect, useCallback } from "react";
import { connect } from "react-redux";
import Album from "./Album";
// import { Link as RouterLink } from "react-router-dom";
import { getNftList, initNear } from "../../redux/action";
import Container from "@material-ui/core/Container";
import Popular from "./popular";
import Grid from "@material-ui/core/Grid";
import New from "./new";

const MarketView = (props) => {
	const { nftList, getNftList, initNear } = props;
	// if (!nftList) {
	//   setInterval(getNftList, 3000);
	// }

	const initNearGetNft = useCallback(async () => {
		await initNear();
		await getNftList();
	}, [initNear, getNftList]);

	// The depencies to nftList if nftList add depencies to cycle call initNearGetNft()
	useEffect(() => {
		initNearGetNft();
	}, [initNearGetNft]);

	return (
		<Container sx={{ paddingTop: "24px", paddingBottom: "24px" }} maxWidth='md'>
			<Grid container spacing={1}>
				<Grid item xs={12}>
					<img src='/mainpic.png' width='800px' />
				</Grid>
			</Grid>
			<Grid container spacing={2}>
				<Grid item xs={5}>
					<New />
				</Grid>
				<Grid item xs={7}>
					<Popular />
				</Grid>
			</Grid>
		</Container>
	);
};

const mapStateToProps = (state) => ({
	wallet: state.app.wallet,
	nftList: state.app.nftList,
});

const mapDispatchToProps = (dispatch) => ({
	initNear: () => dispatch(initNear()),
	getNftList: () => dispatch(getNftList()),
});
export default connect(mapStateToProps, mapDispatchToProps)(MarketView);

'''
'''--- src/view/MarketPubView/new.js ---
/** @format */

import * as React from "react";
import ImageList from "@mui/material/ImageList";
import ImageListItem from "@mui/material/ImageListItem";
import ImageListItemBar from "@mui/material/ImageListItemBar";
import ListSubheader from "@mui/material/ListSubheader";
import IconButton from "@mui/material/IconButton";
import InfoIcon from "@mui/icons-material/Info";

export default function New() {
	return (
		<ImageList sx={{ hieght: 450 }}>
			<ImageListItem key='Subheader' cols={2}>
				<ListSubheader component='div'>새 종목</ListSubheader>
			</ImageListItem>
			{itemData.map((item) => (
				<ImageListItem key={item.img}>
					<img
						src={`${item.img}?w=248&fit=crop&auto=format`}
						srcSet={`${item.img}?w=248&fit=crop&auto=format&dpr=2 2x`}
						alt={item.title}
						loading='lazy'
					/>
					<ImageListItemBar
						title={item.title}
						subtitle={item.author}
						actionIcon={
							<IconButton
								sx={{ color: "rgba(255, 255, 255, 0.54)" }}
								aria-label={`info about ${item.title}`}>
								<InfoIcon />
							</IconButton>
						}
					/>
				</ImageListItem>
			))}
		</ImageList>
	);
}

const itemData = [
	{
		img: "/static/images/logo/socar.png",
		title: "쏘카",
		author: "socar",
		rows: 2,
		cols: 2,
		featured: true,
	},
	{
		img: "/static/images/logo/kurly.png",
		title: "컬리",
		author: "kurly",
	},
	{
		img: "/static/images/logo/yanolja.png",
		title: "야놀자",
		author: "yanolja",
	},
	{
		img: "/static/images/logo/toss.png",
		title: "비바리퍼블리카",
		author: "toss",
		cols: 2,
	},
];

'''
'''--- src/view/MarketPubView/popular.js ---
/** @format */

import * as React from "react";
import PropTypes from "prop-types";
import { alpha } from "@mui/material/styles";
import Box from "@mui/material/Box";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TablePagination from "@mui/material/TablePagination";
import TableRow from "@mui/material/TableRow";
import TableSortLabel from "@mui/material/TableSortLabel";
import Toolbar from "@mui/material/Toolbar";
import Typography from "@mui/material/Typography";
import Paper from "@mui/material/Paper";
import Checkbox from "@mui/material/Checkbox";
import IconButton from "@mui/material/IconButton";
import Tooltip from "@mui/material/Tooltip";
import FormControlLabel from "@mui/material/FormControlLabel";
import Switch from "@mui/material/Switch";
import DeleteIcon from "@mui/icons-material/Delete";
import FilterListIcon from "@mui/icons-material/FilterList";
import { visuallyHidden } from "@mui/utils";

function createData(name, calories, fat, carbs, protein) {
	return {
		name,
		calories,
		fat,
		carbs,
		protein,
	};
}

const rows = [
	createData("컬리", 305, 30, 67, 4.3),
	createData("쏘카", 452, 12, 51, 4.9),
	createData("비바리퍼블리카", 421, 16.0, 24, 6.0),
	createData("야놀자", 159, 8, 24, 4.0),
	createData("케이뱅크", 356, 15, 49, 3.9),
	createData("빗썸", 408, 41, 87, 6.5),
	createData("두나무", 237, 10, 37, 4.3),
];

function descendingComparator(a, b, orderBy) {
	if (b[orderBy] < a[orderBy]) {
		return -1;
	}
	if (b[orderBy] > a[orderBy]) {
		return 1;
	}
	return 0;
}

function getComparator(order, orderBy) {
	return order === "desc"
		? (a, b) => descendingComparator(a, b, orderBy)
		: (a, b) => -descendingComparator(a, b, orderBy);
}

// This method is created for cross-browser compatibility, if you don't
// need to support IE11, you can use Array.prototype.sort() directly
function stableSort(array, comparator) {
	const stabilizedThis = array.map((el, index) => [el, index]);
	stabilizedThis.sort((a, b) => {
		const order = comparator(a[0], b[0]);
		if (order !== 0) {
			return order;
		}
		return a[1] - b[1];
	});
	return stabilizedThis.map((el) => el[0]);
}

const headCells = [
	{
		id: "name",
		numeric: false,
		disablePadding: false,
		label: "종목명",
	},
	{
		id: "calories",
		numeric: true,
		disablePadding: false,
		label: "일일 거래 건수",
	},
	{
		id: "fat",
		numeric: true,
		disablePadding: false,
		label: "평균 가격 (NEAR)",
	},
	{
		id: "carbs",
		numeric: true,
		disablePadding: false,
		label: "Carbs (g)",
	},
	{
		id: "protein",
		numeric: true,
		disablePadding: false,
		label: "Protein (g)",
	},
];

function EnhancedTableHead(props) {
	const {
		onSelectAllClick,
		order,
		orderBy,
		numSelected,
		rowCount,
		onRequestSort,
	} = props;
	const createSortHandler = (property) => (event) => {
		onRequestSort(event, property);
	};

	return (
		<TableHead paddingLeft='40'>
			<TableRow paddingLeft='40'>
				{/* <TableCell padding="checkbox">
          <Checkbox
            color="primary"
            indeterminate={numSelected > 0 && numSelected < rowCount}
            checked={rowCount > 0 && numSelected === rowCount}
            onChange={onSelectAllClick}
            inputProps={{
              'aria-label': 'select all desserts',
            }}
          />
        </TableCell> */}
				{headCells.map((headCell) => (
					<TableCell
						key={headCell.id}
						align={headCell.numeric ? "right" : "left"}
						padding={headCell.disablePadding ? "none" : "normal"}
						sortDirection={orderBy === headCell.id ? order : false}>
						<TableSortLabel
							active={orderBy === headCell.id}
							direction={orderBy === headCell.id ? order : "asc"}
							onClick={createSortHandler(headCell.id)}>
							{headCell.label}
							{orderBy === headCell.id ? (
								<Box component='span' sx={visuallyHidden}>
									{order === "desc" ? "sorted descending" : "sorted ascending"}
								</Box>
							) : null}
						</TableSortLabel>
					</TableCell>
				))}
			</TableRow>
		</TableHead>
	);
}

EnhancedTableHead.propTypes = {
	numSelected: PropTypes.number.isRequired,
	onRequestSort: PropTypes.func.isRequired,
	onSelectAllClick: PropTypes.func.isRequired,
	order: PropTypes.oneOf(["asc", "desc"]).isRequired,
	orderBy: PropTypes.string.isRequired,
	rowCount: PropTypes.number.isRequired,
};

const EnhancedTableToolbar = (props) => {
	const { numSelected } = props;

	return (
		<Toolbar
			sx={{
				pl: { sm: 2 },
				pr: { xs: 1, sm: 1 },
				...(numSelected > 0 && {
					bgcolor: (theme) =>
						alpha(
							theme.palette.primary.main,
							theme.palette.action.activatedOpacity
						),
				}),
			}}>
			{numSelected > 0 ? (
				<Typography
					sx={{ flex: "1 1 100%" }}
					color='inherit'
					variant='subtitle1'
					component='div'>
					{numSelected} selected
				</Typography>
			) : (
				<Typography
					sx={{ flex: "1 1 100%" }}
					variant='h6'
					id='tableTitle'
					component='div'>
					인기 종목
				</Typography>
			)}

			{numSelected > 0 ? (
				<Tooltip title='Delete'>
					<IconButton>
						<DeleteIcon />
					</IconButton>
				</Tooltip>
			) : (
				<Tooltip title='Filter list'>
					<IconButton>
						<FilterListIcon />
					</IconButton>
				</Tooltip>
			)}
		</Toolbar>
	);
};

EnhancedTableToolbar.propTypes = {
	numSelected: PropTypes.number.isRequired,
};

export default function EnhancedTable() {
	const [order, setOrder] = React.useState("asc");
	const [orderBy, setOrderBy] = React.useState("calories");
	const [selected, setSelected] = React.useState([]);
	const [page, setPage] = React.useState(0);
	const [dense, setDense] = React.useState(false);
	const [rowsPerPage, setRowsPerPage] = React.useState(5);

	const handleRequestSort = (event, property) => {
		const isAsc = orderBy === property && order === "asc";
		setOrder(isAsc ? "desc" : "asc");
		setOrderBy(property);
	};

	const handleSelectAllClick = (event) => {
		if (event.target.checked) {
			const newSelecteds = rows.map((n) => n.name);
			setSelected(newSelecteds);
			return;
		}
		setSelected([]);
	};

	const handleClick = (event, name) => {
		const selectedIndex = selected.indexOf(name);
		let newSelected = [];

		if (selectedIndex === -1) {
			newSelected = newSelected.concat(selected, name);
		} else if (selectedIndex === 0) {
			newSelected = newSelected.concat(selected.slice(1));
		} else if (selectedIndex === selected.length - 1) {
			newSelected = newSelected.concat(selected.slice(0, -1));
		} else if (selectedIndex > 0) {
			newSelected = newSelected.concat(
				selected.slice(0, selectedIndex),
				selected.slice(selectedIndex + 1)
			);
		}

		setSelected(newSelected);
	};

	const handleChangePage = (event, newPage) => {
		setPage(newPage);
	};

	const handleChangeRowsPerPage = (event) => {
		setRowsPerPage(parseInt(event.target.value, 10));
		setPage(0);
	};

	const handleChangeDense = (event) => {
		setDense(event.target.checked);
	};

	const isSelected = (name) => selected.indexOf(name) !== -1;

	// Avoid a layout jump when reaching the last page with empty rows.
	const emptyRows =
		page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;

	return (
		<Box sx={{ width: "100%" }}>
			<Paper sx={{ width: "100%", mb: 2 }}>
				<EnhancedTableToolbar numSelected={selected.length} />
				<TableContainer>
					<Table
						sx={{ minWidth: 750 }}
						aria-labelledby='tableTitle'
						size={dense ? "small" : "medium"}>
						<EnhancedTableHead
							numSelected={selected.length}
							order={order}
							orderBy={orderBy}
							onSelectAllClick={handleSelectAllClick}
							onRequestSort={handleRequestSort}
							rowCount={rows.length}
							paddingLeft='40'
						/>
						<TableBody>
							{/* if you don't need to support IE11, you can replace the `stableSort` call with:
                 rows.slice().sort(getComparator(order, orderBy)) */}
							{stableSort(rows, getComparator(order, orderBy))
								.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
								.map((row, index) => {
									const isItemSelected = isSelected(row.name);
									const labelId = `enhanced-table-checkbox-${index}`;

									return (
										<TableRow
											hover
											onClick={(event) => handleClick(event, row.name)}
											role='checkbox'
											aria-checked={isItemSelected}
											tabIndex={-1}
											key={row.name}
											selected={isItemSelected}
											paddingLeft='40'>
											{/* <TableCell padding="checkbox">
                        <Checkbox
                          color="primary"
                          checked={isItemSelected}
                          inputProps={{
                            'aria-labelledby': labelId,
                          }}
                        />
                      </TableCell> */}
											<TableCell
												component='th'
												id={labelId}
												scope='row'
												paddingLeft='40'>
												{row.name}
											</TableCell>
											<TableCell align='right'>{row.calories}</TableCell>
											<TableCell align='right'>{row.fat}</TableCell>
											<TableCell align='right'>{row.carbs}</TableCell>
											<TableCell align='right'>{row.protein}</TableCell>
										</TableRow>
									);
								})}
							{emptyRows > 0 && (
								<TableRow
									style={{
										height: (dense ? 33 : 53) * emptyRows,
									}}>
									<TableCell colSpan={6} />
								</TableRow>
							)}
						</TableBody>
					</Table>
				</TableContainer>
				<TablePagination
					rowsPerPageOptions={[5, 10, 25]}
					component='div'
					count={rows.length}
					rowsPerPage={rowsPerPage}
					page={page}
					onPageChange={handleChangePage}
					onRowsPerPageChange={handleChangeRowsPerPage}
				/>
			</Paper>
			<FormControlLabel
				control={<Switch checked={dense} onChange={handleChangeDense} />}
				label='Dense padding'
			/>
		</Box>
	);
}

'''
'''--- src/view/TokenView/InfoNft.js ---
/** @format */

import Divider from "@material-ui/core/Divider";
import Card from "@material-ui/core/Card";
import CardContent from "@material-ui/core/CardContent";
import CardHeader from "@material-ui/core/CardHeader";
import { Typography } from "@material-ui/core";
import Button from "@material-ui/core/Button";
import CardActions from "@material-ui/core/CardActions";
import { payment } from "../../redux/action";

const InfoNft = (props, wallet) => {
	const { nft } = props;
	console.log(nft.metadata.title);
	const buy = () => {
		payment(nft.owner_id, nft.token_id, 0, nft.metadata.extra);
	};
	let data = [];
	if (nft.metadata.title === "Toss") {
		data =
			"Toss는 대한민국의 스타트업인 비바 리퍼블리카가 개발한 송금 서비스 앱이다. 이 앱은 공인인증서나 보안 매체 없이 앱을 통해 빠르고 손쉽게 송금이 가능하도록 만들었다. Toss를 운영하고 있는 비바 리퍼블리카는 보안과 관제 시스템에 대한 금융감독원의 실사와 금융위원회의 승인을 통해 전자 금융업으로 공식 등록된 업체이다. 비바 리퍼블리카는 은행과의 공식 업무 제휴를 통해 Toss 서비스를 제공하고 있다. 이 앱은 본인 명의의 스마트폰을 소유한 만 14세 이상의 금융서비스 이용자라면 모두 사용할 수 있다.";
	} else if (nft.metadata.title === "Kbank") {
		data =
			"케이뱅크는 대한민국 최초의 인터넷 전문은행으로, 2017년 4월 3일에 영업을 시작하였다. 카카오뱅크, 토스뱅크와 달리 모바일과 PC를 모두 활용할 수 있다. 인터넷 전문은행이기 때문에 시중은행과 다르게 오프라인 영업점은 없으며, 모든 ATM에서 입·출금 수수료 면제 혜택을 받을 수 있다. KT 통신 대리점을 통한 영업망 연계로 통신비를 절감할 수 있는 혜택도 있다.";
	} else if (nft.metadata.title === "Kurly") {
		data =
			"마켓컬리는 대한민국의 온라인 식재료 판매업체이다. 김슬아는 2015년 마켓 <컬리>를 설립하고 대한민국 내 최초로 새벽 배송 시대를 열었다. 샛별 배송'으로 신선식품 배달 시장을 개척하였는데, '샛별 배송'은 채소, 과일 등 신선식품을 밤 11시까지 주문하면 다음날 아침 7시 이전에 배송하는 서비스다. 대한민국 내에서는 유일하게 상품 입고부터 배송까지 유통 전 과정을 일정 온도로 유지하는 풀콜드체인(Full Cold-Chain) 시스템을 보유하였다. <컬리>의 2018년 매출액은 1571억 원, 2019년 1350억 원 규모 시리즈D 투자를 마감하며 예비 유니콘(기업가치 1조 원 이상의 비상장기업)으로 평가받았다.";
	} else if (nft.metadata.title === "Socar") {
		data =
			"쏘카는 스마트폰 애플리케이션을 통해 카셰어링 서비스를 제공하는 영리기업이다. 일반 렌터카의 직접 주유 방식과는 다르게 이동거리(km)당 주행요금이 부과되며, 주유시 결제는 반드시 차 내에 비치된 쏘카 카드로 진행해야 한다. 따라서, 렌터카처럼 주유 게이지를 맞춰서 반납해야하는 번거로움은 없지만 장거리 운행시 주행요금이 다소 비싸다는 지적이 있었다.";
	} else if (nft.metadata.title === "Yanolja") {
		data =
			"2021년 기준 향후 2~3년 내로 기업공개(IPO)를 할 것으로 보인다. 어느 증시에 상장할지 아직 확정적이지 않으나, 쿠팡이 소프트뱅크비전펀드로부터 3조 원가량의 투자를 유치한 후 미국 증시에 상장한 선례에 비춰봤을 때 이와 비슷하게 미국 증시 상장을 추진할 가능성도 점쳐지고 있다. 업계에서는 2023년 미국 상장을 목표로 계획을 짜고 있다는 시각이 우세하다. ";
	}
	return (
		<>
			<Card>
				<CardHeader title='기업 정보' />
				<Divider />
				<CardContent>
					<Typography>{data}</Typography>

					<Divider />
				</CardContent>
			</Card>
			<br />
			<Card>
				<CardHeader title='구매 정보' />
				<Divider />
				<CardContent>
					<Typography>소유자</Typography>
					<Typography>{nft.owner_id}</Typography>
					<Divider />
					<Typography>가격</Typography>
					<Typography style={{ color: "#e6b000" }}>
						{nft.metadata.extra} NEAR
					</Typography>
					<Divider />
				</CardContent>
				<CardActions style={{ flexDirection: "column" }}>
					<Button
						color='primary'
						onClick={buy}
						size='large'
						type='submit'
						variant='contained'>
						구매하기
					</Button>
				</CardActions>
			</Card>
		</>
	);
};

export default InfoNft;

'''
'''--- src/view/TokenView/MediaNft.js ---
import { makeStyles } from "@material-ui/styles";
import Card from "@material-ui/core/Card";
import CardMedia from "@material-ui/core/CardMedia";

const useStyles = makeStyles((theme) => ({
  card: {
    height: "100%",
    display: "flex",
  },
  cardMedia: {
    paddingTop: "100%", // 16:9
    flexGrow: 1,
  },
}));

const MediaNft = (props) => {
  const { img, titleImg } = props;
  const classes = useStyles();

  return (
    <Card className={classes.card}>
      <CardMedia
        sx={{ backgroundSize: "contain" }}
        className={classes.cardMedia}
        image={img}
        title={titleImg}
      />
    </Card>
  );
};
export default MediaNft;

'''
'''--- src/view/TokenView/index.js ---
/** @format */

import { connect } from "react-redux";
import { useParams } from "react-router-dom";
import { makeStyles } from "@material-ui/styles";
import Container from "@material-ui/core/Container";
import Grid from "@material-ui/core/Grid";
import MediaNft from "./MediaNft";
import InfoNft from "./InfoNft";
import { DataGrid, GridColDef, GridValueGetterParams } from "@mui/x-data-grid";
import Typography from "@material-ui/core/Typography";

const useStyles = makeStyles((theme) => ({
	root: {
		backgroundColor: theme.palette.background.dark,
		minHeight: "100%",
		paddingTop: theme.spacing(3),
	},
}));

const TokenView = (props, state) => {
	const { nftList } = props;
	const linkId = useParams().id;
	const classes = useStyles();

	const tokenData = nftList.find((el) => el.token_id === linkId);

	const resultArr = nftList.filter((i) => {
		if (tokenData.metadata.title == i.metadata.title) {
			return i;
		}
	});

	const columns: GridColDef[] = [
		{ field: "id", headerName: "ID", width: 70 },
		{ field: "Name", headerName: "주주명", width: 230 },
		{ field: "transaction", headerName: "거래 증명서", width: 500 },
	];
	const row = [];

	for (let i = 0; i < resultArr.length; i++) {
		row.push({
			id: i,
			Name: resultArr[i].owner_id,
			transaction: `https://explorer.testnet.near.org/accounts/${resultArr[i].owner_id}`,
		});
		console.log(row);
	}

	return (
		<>
			<Container className={classes.root}>
				<h1>{tokenData.metadata.title}</h1>
				<br />
				<Grid container spacing={3}>
					<Grid item lg={6} md={6} xs={12}>
						<MediaNft
							img={tokenData.metadata.media}
							title={tokenData.metadata.title}
						/>
					</Grid>
					<Grid item lg={6} md={6} xs={12}>
						<InfoNft nft={tokenData} wallet={state} />
					</Grid>
				</Grid>
			</Container>
			<Container>
				<h1>주주 명부</h1>
				<br />
				<div style={{ height: 400, width: "100%", margin: 10 }}>
					<DataGrid
						rows={row}
						columns={columns}
						pageSize={5}
						rowsPerPageOptions={[5]}
					/>
				</div>
			</Container>
		</>
	);
};

const mapStateToProps = (state) => ({
	nftList: state.app.nftList,
	wallet: state.app.wallet,
});

export default connect(mapStateToProps)(TokenView);

'''