*GitHub Repository "ADVLTD/abacus-learning-reactnative"*

'''--- App.js ---
import React, {useState, useEffect} from 'react';
import {View, LogBox} from 'react-native';
import 'regenerator-runtime/runtime';

import * as nearAPI from 'near-api-js';

import {NavigationContainer} from '@react-navigation/native';
import {createNativeStackNavigator} from '@react-navigation/native-stack';

import FlashMessage from 'react-native-flash-message';

import Home from './src/InstructionalCode/AccountCreation/1-UsingAPI/screens/Home';
import SignIn from './src/InstructionalCode/UserAuthentication/SignIn';
import VideoPlayer from './src/InstructionalCode/SendMoney/UsingContractCall/VideoPlayer';

LogBox.ignoreLogs(['Warning: ...']);
LogBox.ignoreAllLogs();
const {utils} = nearAPI;
const Stack = createNativeStackNavigator();
const axios = require('axios');

const App = () => {
  return (
    <View style={{flex: 1}}>
      <NavigationContainer>
        <Stack.Navigator>
          <Stack.Screen name="Home" component={Home} />
          <Stack.Screen name="SignIn" component={SignIn} />
          <Stack.Screen name="Video Player" component={VideoPlayer} />
          
        </Stack.Navigator>
      </NavigationContainer>
      <FlashMessage position="top" />
    </View>
  );
};

export default App;

'''
'''--- __tests__/App-test.js ---
/**
 * @format
 */

import 'react-native';
import React from 'react';
import App from '../App';

// Note: test renderer must be required after react-native.
import renderer from 'react-test-renderer';

it('renders correctly', () => {
  renderer.create(<App />);
});

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['module:metro-react-native-babel-preset'],
};

'''
'''--- index.js ---
/**
 * @format
 */
 import {Buffer} from 'buffer';
 global.Buffer = Buffer;
 import {AppRegistry} from 'react-native';
 import App from './App';
 import {name as appName} from './app.json';
 
 //Initializing localStorage in react native window which is required for near and wallet connections to store keys
 let localStorageData = {};
 window.localStorage = {
   getItem: key => localStorageData[key],
  
   removeItem: key => localStorageData[key],
   setItem: (key, value) => {
     localStorageData[key] = value;
   },
   clear: () => {
     localStorageData = {};
   },
 };
 
 window.location = {...window.location, href: ''};
 AppRegistry.registerComponent(appName, () => App);
 
'''
'''--- metro.config.js ---
/**
 * Metro configuration for React Native
 * https://github.com/facebook/react-native
 *
 * @format
 */

module.exports = {
  transformer: {
    getTransformOptions: async () => ({
      transform: {
        experimentalImportSupport: false,
        inlineRequires: true,
      },
    }),
  },
};

'''
'''--- src/InstructionalCode/AccountCreation/1-UsingAPI/screens/Home.js ---
import React, {useState, useEffect} from 'react';
import {
  Text,
  SafeAreaView,
  StyleSheet,
  View,
  Dimensions,
  TouchableOpacity,
  TextInput,
  Image,
  LogBox,
} from 'react-native';
import 'regenerator-runtime/runtime';

import * as nearAPI from 'near-api-js';

import {createNativeStackNavigator} from '@react-navigation/native-stack';

import {showMessage} from 'react-native-flash-message';
import {ColorDotsLoader} from 'react-native-indicator';
import Clipboard from '@react-native-clipboard/clipboard';
import {initContract} from '../../../../NearFunctions/initializeContract';

LogBox.ignoreLogs(['Warning: ...']);
LogBox.ignoreAllLogs();
const {utils} = nearAPI;
const Stack = createNativeStackNavigator();
const axios = require('axios');

const Home = ({navigation, route}) => {
  //state to store account id values
  const [text, onChangeText] = React.useState('');
  // to toggle loader
  const [loader, showLoader] = useState(false);
  //to store passphrase
  const [passPhrase, setPassPhrase] = useState('');

  //As soon as component is mounted , clear password and account id
  useEffect(() => {
    onChangeText('');
  }, []);

  //Function to store account id on change
  const onNearAccountIdChange = e => {
    onChangeText(e);
  };

  //Function used to create a sub account
  const createAccount = async () => {
    //Star showing loading animation in loader
    showLoader(true);
    //Call to rest api server to create an account
    axios
      .post('http://localhost:3000/create_user', {
        //text is the name of account it stored in state
        name: text,
      })
      .then(async function (response) {
        //Set details received from api
        global.accountName = response.data.accountName;
        global.publicKey = response.data.publicKey;
        global.privateKey = response.data.privateKey;
        //set passphrase received from api in state
        setPassPhrase(response.data.passPhrase);
        // Show success message
        showMessage({
          message: 'Account successfully created',
          type: 'success',
          statusBarHeight: 50,
        });
        showLoader(false);
        //Initialize contract with details received from api
      })
      .catch(function (error) {
        console.log(error);
        //When there is error , stop loader
        showLoader(false);
        // clear account id
        onChangeText('');
        //clear password state

        // display error message to user
        showMessage({
          message: 'Error creating account',
          type: 'danger',
          statusBarHeight: 50,
        });
      });
  };

  //Function to initialize a contract with details of keys received from api
  //Initialized contract with keys
  const clearPassPhraseAndContinue = () => {
    //Initialize contract with details received from API
    window.nearInitPromise = initContract(accountName, publicKey, privateKey)
      .then(async ({contract, currentUser, nearConfig, walletConnection}) => {
        // After connection is established with near and wallet , we store the details in our state
        global.contractObject = contract;
        global.currentUserObject = currentUser;
        global.walletConnection = walletConnection;

        showLoader(false);
        //Clear passphrase and navigate to Home screen
        setPassPhrase('');
        navigation.navigate('Home');
      })

      .catch(async error => {
        showLoader(false);

        showMessage({
          message: error.message,
          type: 'danger',
          statusBarHeight: 50,
        });
      });
  };
  // Copies passphrase to clipboard
  const copyToClipboard = async () => {
    Clipboard.setString(passPhrase);
  };

  return (
    <SafeAreaView style={{backgroundColor: '#25282A'}}>
      <View style={styles.headerContainer}>
        <Image
          style={styles.nearLogo}
          source={require('../../../../assets/images/near_icon.png')}
        />
        <Text style={styles.header}>Create Account</Text>
      </View>

      <View style={styles.settingsContainer}>
        {passPhrase ? (
          <View style={styles.passPhraseMainContainer}>
            <View style={styles.passPhraseContainer}>
              <View style={styles.passPhraseCopyImageContainer}>
                <TouchableOpacity onPress={copyToClipboard}>
                  <Image
                    style={styles.passPhraseCopyImage}
                    source={require('../../../../assets/images/copy.png')}
                  />
                </TouchableOpacity>
              </View>

              <Text style={styles.passPhraseText}>{passPhrase}</Text>
            </View>
            <TouchableOpacity
              style={styles.button}
              onPress={clearPassPhraseAndContinue}>
              <Text style={styles.buttonText}>Continue</Text>
            </TouchableOpacity>
          </View>
        ) : (
          <>
            <Text style={styles.inputLabel}>Account Details</Text>
            <TextInput
              style={styles.input}
              onChangeText={e => onNearAccountIdChange(e)}
              value={text}
              placeholder="Enter account id"
              placeholderTextColor="white"
            />

            <TouchableOpacity style={styles.button} onPress={createAccount}>
              <Text style={styles.buttonText}>Submit</Text>
            </TouchableOpacity>
            {loader ? (
              <View>
                <ColorDotsLoader
                  color1="#ffffff"
                  color2="#808080"
                  color3="#000000"
                  size={10}
                  color="white"
                />
              </View>
            ) : null}
            <TouchableOpacity onPress={() => navigation.navigate('SignIn')}>
              <Text style={styles.signInText}>
                Already Have an account ?{' '}
                <Text style={styles.signInCTA}>Sign In</Text>
              </Text>
            </TouchableOpacity>
          </>
        )}
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  innerContainer: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    height: Dimensions.get('window').height / 1.7,
    margin: 0,
    padding: 0,
  },
  nearLogo: {
    width: 80,
    height: 80,
    marginTop: 30,
  },
  header: {
    color: 'white',
    fontSize: 20,
  },
  headerContainer: {
    width: Dimensions.get('window').width,
    display: 'flex',
    alignItems: 'center',
  },
  welcomeText: {
    fontSize: 20,
    marginBottom: 10,
  },
  nameText: {
    fontSize: 24,
    marginBottom: 10,
    fontWeight: 'bold',
  },
  inputLabel: {
    color: 'white',
    marginTop: Dimensions.get('window').height / 6,
    alignSelf: 'flex-start',
    marginLeft: 65,
    marginBottom: 10,
  },
  button: {
    alignItems: 'center',
    marginTop: 40,

    padding: 12,
    color: 'white',

    borderColor: 'white',
    borderWidth: 0.3,
    borderRadius: 8,
    width: 150,
    marginBottom: 20,
  },
  buttonText: {
    color: 'white',
  },
  input: {
    height: 50,

    borderWidth: 0.3,
    borderColor: 'white',
    borderRadius: 4,
    padding: 10,
    width: Dimensions.get('window').width / 1.5,
    color: 'white',
    marginBottom: 10,
  },
  settingsContainer: {
    backgroundColor: '#25282A',
    minHeight: Dimensions.get('window').height,
    minWidth: Dimensions.get('window').width,
    display: 'flex',
    fontSize: 30,
    alignItems: 'center',
  },
  signInText: {
    color: 'white',

    marginTop: Dimensions.get('window').height / 5,
  },
  signInCTA: {
    fontWeight: 'bold',
    textDecorationLine: 'underline',
  },
  passPhraseContainer: {
    marginTop: Dimensions.get('window').height / 6,
    marginLeft: 20,
    marginRight: 20,
    borderWidth: 0.2,
    borderColor: 'white',
    display: 'flex',
    justifyContent: 'center',
  },
  passPhraseText: {
    color: 'white',
    fontSize: 18,
    paddingLeft: 20,
    paddingRight: 20,
    paddingTop: 30,
    paddingBottom: 70,
  },
  passPhraseMainContainer: {
    display: 'flex',
    alignItems: 'center',
  },
  passPhraseCopyImage: {
    height: 20,
    width: 20,
    margin: 20,
  },
  passPhraseCopyImageContainer: {
    display: 'flex',
    alignItems: 'flex-end',
  },
});

export default Home;

'''
'''--- src/InstructionalCode/SendMoney/UsingContractCall/VideoPlayer.js ---
import React from 'react';
import {
  Text,
  SafeAreaView,
  StyleSheet,
  View,
  Dimensions,
  TouchableOpacity,
  ScrollView,
  Image,
} from 'react-native';
import Video from 'react-native-video';
import * as nearAPI from 'near-api-js';

import {showMessage} from 'react-native-flash-message';

const {utils} = nearAPI;

export default function VideoPlayer({navigation}) {

  //Function to receive tokens when video played has ended
  const receiveTokens = async videoNumber => {
    try {
        // checkUserVideoWatchHistory is a view contract method defined in contract that checks whether a user has watched a video
      const result = await contractObject.checkUserVideoWatchHistory({
        mainAccount: accountName,
        videoId: videoNumber,
      });
      // if result is false i.e user has not watched video
      if (!result) {
        // send token is a change method defined in contract method
        // sends token to the wallet address in params with the given near amount
        await contractObject.sendToken({
          yoctonearAsU128: utils.format.parseNearAmount('1'),
          walletAddress: currentUserObject.accountId,
        });
        // saveUserVideoDetails saves users video id so that reward is not given again.
        // it is a change contract method call
        await contractObject.saveUserVideoDetails({
          mainAccount: accountName,
          videoId: videoNumber,
        });
        //show success message
        showMessage({
          message: 'Successfully sent tokens',
          type: 'success',
          statusBarHeight: 50,
        });
      } else {
        //show success message
        showMessage({
          message: 'Video reward already given',
          type: 'success',
          statusBarHeight: 50,
        });
      }
    } catch (err) {
      //show failed message if token couldn't be sent
      console.log(err.message);
      showMessage({
        message: "Couldn't send tokens",
        type: 'danger',
        statusBarHeight: 50,
      });
    }
  };

  //function called when sign out icon is clicked
  const onSignOutButtonClick = () => {
   //Clear keys and account details stored in local storage
    localStorage.clear();

    // navigate to Home screen
    navigation.navigate('Home');
  };
  return (
    <SafeAreaView style={{flex: 1}}>
      <View style={styles.topBar}>
        <Text style={styles.topText}>Near Learning App</Text>

        <View style={styles.rightIconContainer}>
          <TouchableOpacity
            onPress={() => {
              onSignOutButtonClick();
            }}>
            <Image
              style={styles.topBarIcons}
              source={require('../../../assets/images/logout.png')}
            />
          </TouchableOpacity>
          <TouchableOpacity onPress={() => navigation.navigate('Settings')}>
            <Image
              style={styles.topBarIcons}
              source={require('../../../assets/images/gear.png')}
            />
          </TouchableOpacity>
        </View>
      </View>
      <ScrollView style={styles.scrollView}>
        <View style={styles.videoPlayerContainer}>
          <View style={styles.videoMaiContainer}>
            <View style={styles.videoContainer}>
              <Video
                source={{
                  uri: 'https://cdn.videvo.net/videvo_files/video/free/2016-04/large_watermarked/Audio_bands_Feed_preview.mp4',
                }}
                style={styles.backgroundVideo}
                controls={true}
                paused={true}
                //on End function is called when video is finished
                onEnd={() => receiveTokens('11')}
              />
            </View>
            <Text style={styles.videoText}>Near Video 1</Text>
          </View>
          <View style={styles.videoMaiContainer}>
            <View style={styles.videoContainer}>
              <Video
                source={{
                  uri: 'https://cdn.videvo.net/videvo_files/video/free/2016-04/large_watermarked/Audio_bands_Feed_preview.mp4',
                }}
                style={styles.backgroundVideo}
                controls={true}
                paused={true}
                onEnd={() => receiveTokens('12')}
              />
            </View>
            <Text style={styles.videoText}>Near Video 2</Text>
          </View>
          <View style={styles.videoMaiContainer}>
            <View style={styles.videoContainer}>
              <Video
                source={{
                  uri: 'https://cdn.videvo.net/videvo_files/video/free/2016-04/large_watermarked/Audio_bands_Feed_preview.mp4',
                }} // Can be a URL or a local file.
                style={styles.backgroundVideo}
                controls={true}
                paused={true}
                onEnd={() => receiveTokens('13')}
              />
            </View>
            <Text style={styles.videoText}>Near Video 3</Text>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  videoPlayerContainer: {
    backgroundColor: '#25282A',
    minHeight: Dimensions.get('window').height,
  },
  topText: {
    color: 'white',
    fontSize: 20,
  },
  topBar: {
    alignSelf: 'stretch',
    height: 52,
    flexDirection: 'row',
    backgroundColor: '#25282A',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingLeft: 10,
    paddingRight: 10,
    borderBottomColor: '#888',
    borderBottomWidth: 1,
  },
  backgroundVideo: {
    position: 'absolute',
    top: 20,
    left: 0,
    bottom: 0,
    right: 0,
    borderRadius: 8,
  },
  videoContainer: {
    height: Dimensions.get('window').height / 3,
    margin: 10,
    marginTop: 0,
  },
  videoText: {
    fontSize: 18,

    marginLeft: 15,
    color: 'white',
    marginTop: 10,
    marginBottom: 15,
  },
  videoMaiContainer: {
    margin: 5,
    borderBottomColor: '#888',
    borderBottomWidth: 1,
  },
  topBarIcons: {height: 20, width: 20, marginLeft: 10, resizeMode: 'cover'},
  rightIconContainer: {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'stretch',
  },
});

'''
'''--- src/InstructionalCode/UserAuthentication/SignIn.js ---
import React, {useState, useEffect} from 'react';
import {
  Text,
  SafeAreaView,
  StyleSheet,
  View,
  Dimensions,
  TouchableOpacity,
  TextInput,
  Image,
} from 'react-native';
import 'regenerator-runtime/runtime';
import {initContract} from '../../NearFunctions/initializeContract.js';

import {showMessage} from 'react-native-flash-message';
import {ColorDotsLoader} from 'react-native-indicator';
const axios = require('axios');

const SignIn = ({navigation, route}) => {
  //to store password
  const [passphrase, onPassPhraseChange] = React.useState('');
  //toggle loader
  const [loader, showLoader] = useState(false);

  //function called on passphrase change
  const onNearPassPhraseChange = async e => {
    onPassPhraseChange(e);
  };

  // function called when sign in button is clicked
  // calls the api to sign in with passphrase that user types in the text input
  const onSignInClick = () => {
    
    showLoader(true);
    axios
      // Get user details like public key,private key from api
      .post('http://localhost:3000/user_details', {
        seed_phrase: passphrase,
      })
      .then(async function (response) {
        // if api response is success, store details in device memory

        global.accountName = response.data.accountName;
        global.publicKey = response.data.publicKey;
        global.privateKey = response.data.privateKey;
        if (response.data.success) {
            // when api is successful reinitialize contract with new keys
          window.nearInitPromise = initContract(
            accountName,
            publicKey,
            privateKey,
          )
            .then(
              async ({contract, currentUser, nearConfig, walletConnection}) => {
                // After connection is established with near and wallet with new keys , we store the details in our state
            
                global.contractObject = contract;
                global.currentUserObject = currentUser;
                global.walletConnection = walletConnection;

                showLoader(false);
                // Navigate to video player
                navigation.navigate('Video Player');
              },
            )

            .catch(async error => {
              showLoader(false);
              // deleteAccount(accountName)

              showMessage({
                message: error.message,
                type: 'danger',
                statusBarHeight: 50,
              });
            });
        } else {
          showLoader(false);
          showMessage({
            message: 'No account found',
            type: 'danger',
            statusBarHeight: 50,
          });
        }
      })
      .catch(err => {
        // if api request fails show this error
        console.log(err);
        showLoader(false);
        showMessage({
          message: err.message,
          type: 'danger',
          statusBarHeight: 50,
        });
      });
  };

  return (
    <SafeAreaView style={{backgroundColor: '#25282A'}}>
      <View style={styles.headerContainer}>
        <Image
          style={styles.nearLogo}
          source={require('../../assets/images/near_icon.png')}
        />
        <Text style={styles.header}>Sign In</Text>
      </View>

      <View style={styles.settingsContainer}>
        <Text style={styles.inputLabel}>Account Details</Text>

        <TextInput
          style={[styles.input, {height: Platform.OS == 'android' ? 50 : 50}]}
          onChangeText={onNearPassPhraseChange}
          value={passphrase}
          editable={true}
          selectTextOnFocus={true}
          placeholder="Enter passphrase"
          placeholderTextColor="white"
        />

        <TouchableOpacity style={styles.button} onPress={onSignInClick}>
          <Text style={styles.buttonText}>Submit</Text>
        </TouchableOpacity>
        {loader ? (
          <View>
            <ColorDotsLoader
              color1="#ffffff"
              color2="#808080"
              color3="#000000"
              size={10}
              color="white"
            />
          </View>
        ) : null}
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  innerContainer: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    height: Dimensions.get('window').height / 1.7,
    margin: 0,
    padding: 0,
  },
  nearLogo: {
    width: 80,
    height: 80,
    marginTop: 30,
  },
  header: {
    color: 'white',
    fontSize: 20,
  },
  headerContainer: {
    width: Dimensions.get('window').width,
    display: 'flex',
    alignItems: 'center',
  },
  welcomeText: {
    fontSize: 20,
    marginBottom: 10,
  },
  nameText: {
    fontSize: 24,
    marginBottom: 10,
    fontWeight: 'bold',
  },
  inputLabel: {
    color: 'white',
    marginTop: Dimensions.get('window').height / 6,
    alignSelf: 'flex-start',
    marginLeft: 65,
    marginBottom: 10,
  },
  button: {
    alignItems: 'center',
    marginTop: 40,

    padding: 12,
    color: 'white',

    borderColor: 'white',
    borderWidth: 0.3,
    borderRadius: 8,
    width: 150,
    marginBottom: 20,
  },
  buttonText: {
    color: 'white',
  },
  input: {
    height: 50,

    borderWidth: 0.3,
    borderColor: 'white',
    borderRadius: 4,
    padding: 10,
    width: Dimensions.get('window').width / 1.5,
    color: 'white',
    marginBottom: 10,
  },
  settingsContainer: {
    backgroundColor: '#25282A',
    minHeight: Dimensions.get('window').height,
    minWidth: Dimensions.get('window').width,
    display: 'flex',
    fontSize: 30,
    alignItems: 'center',
  },

  signInCTA: {
    fontWeight: 'bold',
    textDecorationLine: 'underline',
  },
});

export default SignIn;

'''
'''--- src/NearFunctions/config.js ---
const CONTRACT_NAME = "headstraitdev2.testnet";

function getConfig(env) {
  switch (env) {
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case "production":
    case "development":
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
      };
    case "betanet":
      return {
        networkId: "betanet",
        nodeUrl: "https://rpc.betanet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.betanet.near.org",
        helperUrl: "https://helper.betanet.near.org",
      };
    case "local":
      return {
        networkId: "local",
        nodeUrl: "http://localhost:3030",
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: "http://localhost:4000/wallet",
        contractName: CONTRACT_NAME,
      };
    case "test":
    case "ci":
      return {
        networkId: "shared-test",
        nodeUrl: "https://rpc.ci-testnet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    case "ci-betanet":
      return {
        networkId: "shared-test-staging",
        nodeUrl: "https://rpc.ci-betanet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      );
  }
}

module.exports = getConfig;

'''
'''--- src/NearFunctions/initializeContract.js ---
import {connect, Contract, WalletConnection} from 'near-api-js';
const {keyStores, KeyPair, utils} = nearAPI;

import * as nearAPI from 'near-api-js';
import {LogBox} from 'react-native';
import getConfig from './config';
LogBox.ignoreLogs(['Warning: ...']); // Ignore log notification by message
LogBox.ignoreAllLogs(); //Ignore all log notifications

// Initialize contract & set global variables .
export async function initContract(accountName, publicKey, privateKey) {
  //get config details for testnet for given contract defined in the config.js file
  const nearConfig = getConfig(process.env.NODE_ENV || 'testnet');

  // creating a inMemoryKey keystore
  const keyStore = new keyStores.InMemoryKeyStore();
  // format key
  const PRIVATE_KEY = privateKey.split(':')[1];
  // creates a public / private key pair using the provided private key
  const keyPair = KeyPair.fromString(PRIVATE_KEY);

  // // adds the keyPair you created to keyStore
  await keyStore.setKey('testnet', accountName, keyPair);

  // This is a key that stores the private key in storage
  const obj2Key = 'near-api-js:keystore:' + accountName + ':testnet';
  //Setting the public key in storage
  localStorage.setItem('undefined_wallet_auth_key', publicKey);
  //Setting private key in storage
  localStorage.setItem(obj2Key, privateKey);

  //Connect to near
  const config = {
    networkId: 'testnet',
    keyStore: keyStore,
    nodeUrl: 'https://rpc.testnet.near.org',
    walletUrl: 'https://wallet.testnet.near.org',
    helperUrl: 'https://helper.testnet.near.org',
    explorerUrl: 'https://explorer.testnet.near.org',
  };
  const near = await connect(config);

  // // Wallet connection is created by using near connection already established

  const walletConnection = new nearAPI.WalletConnection(near);

  // Once we get the wallet details , we save the user details like account it and balance in currentUser object
  let currentUser;
  if (walletConnection.getAccountId()) {
    currentUser = {
      accountId: walletConnection.getAccountId(),
      balance: (await walletConnection.account().state()).amount,
    };
  }

  //   // Initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(
    walletConnection.account(),
    nearConfig.contractName,
    {
      //send token is our contract change method that sends token
      changeMethods: ['saveUserSubAccounts', 'sendToken'],
      viewMethods: ['checkUserVideoWatchHistory'],
      //sender is required for signing in
      sender: walletConnection.account(),
    },
  );

  //     //Returns necessary details that will be used in App.js
  return {contract, currentUser, nearConfig, walletConnection};
}

'''