*GitHub Repository "neararabic/friendbook-rs"*

'''--- Cargo.toml ---
[package]
name = "friendbookrs"
version = "0.1.0"
authors = ["Mohammed Hassan <mhassanist@testnear.net>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true
'''
'''--- README.md ---
# مشروع كتاب الأصدقاء Friendbook in Rust
مشروع بسيط  يمكن المستخدمين من ارسال رسائل لأصدقائهم على حساباتهم فى نيــر باستخدام لغة البرمجة Rust

## لتشغيل المشروع

يحتاج المشروع لتثبيت أدوات التطوير الخاصة بلغة رست و ويب أسمبلي rust and web assembly tool chain
يمكن اتباع خطوات تثبيتهم هنــاhttps://www.near-sdk.io/

1- قم بنسخ المشروع لجهازك clone

2- من داخل مجلد المشروع فى شاشة الأوامر terminal قم بكتابة الأمر التالي

```
env 'RUSTFLAGS=-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
```

- ملحوظة: الجزء `env 'RUSTFLAGS=-C link-arg=-s'` يقوم بعمل تحسين لعملية تحويل الكود و يؤثر جذرياً على حجم الملف الناتج و بالتالى تكلفة رفع الملف و استضافته على البلوك تشين. إذا كان الملف الناتج من العملية السابقة أكبر من 200 كيلو بايت لديك (14 ميجا بايت مثلاً أو أكثر) فهذا يعنى أن الأمر لم يعمل بشكل صحيح و يجب عليك فحص إعدادات رست و تفعيله.

3- ستلاحظ وجود ملفات جديدة تم انشائها داخل مجلد target و منها الملف `friendbookrs.wasm`

4- يمكنك رفع هذا الملف مباشرة على البلوك تشين بالطرق المعتادة مثل

```
 near dev-deploy .\target\wasm32-unknown-unknown\release\friendbookrs.wasm
```

5- يجب استدعاء الدالة init  أولاً
6- يمكنك استعدعاء الدوال الأخري بعد ذلك 
```
 near call $CONTRACT list_writings --accountId $ACCOUNT
 near call $CONTRACT write_something '{"message":"sample message","receiver":"myaccount.testnet"}' --accountId $ACCOUNT
 
```

'''
'''--- rustfmt.toml ---
tab_spaces = 2

'''
'''--- src/lib.rs ---
//استيراد ما نحتاجه من بيئة العمل
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::Vector;
use near_sdk::{env, near_bindgen, PanicOnDefault};
near_sdk::setup_alloc!();

//لاستيراد
//Writing ستركتشر
//من ملف
//models.rs
mod models;
use models::Writing;

//the main contract struct definition
//تعريف العقد الرئيسي للبرنامج الخاص بنا
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
  //تخزين قائمة الرسائل
  writing_list: Vector<Writing>,
}

//the main contract struct implementation
//كود الدوال (الفنكشنز) الخاصة بالعقد الرئيسي
#[near_bindgen]
impl Contract {
  //فنكشن لكتابة رسالة لصديق
  pub fn write_something(&mut self, message: String, receiver: String) -> Writing {
    //الحصول على المستخدم صاحب هذه العملية - الذي قام باستدعاء الفنكشن
    let sender: String = env::signer_account_id();

    let writing = Writing {
      message,
      sender,
      receiver,
    };
    self.writing_list.push(&writing);
    return writing;
  }
  //فنكشن لاسترجاع الرسائل الخاصة بالمستخدم الذى استدعى هذه الفنكشن
  pub fn list_writings(&self) -> Vec<Writing> {
    let mut data = Vec::new();

    for w in self.writing_list.iter() {
      //إضافة الرسائل المرسلة و المستقبلة من المستخدم الذى قام باستدعاء هذه الدالة
      if w.receiver == env::signer_account_id() || w.sender == env::signer_account_id() {
        data.push(w);
      }
    }
    return data;
  }

  //هذه الدالة هامة جدا لتجهيز الأوبجيكت الخاص بقائمة الرسائل و يجب استدعائها أولاً مرة واحدة
  //قبل البدء فى إضافة أو عرض الرسائل
  #[init]
  pub fn init() -> Self {
    let this = Self {
      //تجهيز فيكتور قائمة الرسائل
      writing_list: Vector::new("messages".try_to_vec().unwrap()),
    };

    this
  }
}

'''
'''--- src/models.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};

#[derive(Deserialize, Serialize, BorshDeserialize, BorshSerialize, Default)]
#[serde(crate = "near_sdk::serde")]
pub struct Writing {
  pub message: String,
  pub sender: String,
  pub receiver: String,
}

'''