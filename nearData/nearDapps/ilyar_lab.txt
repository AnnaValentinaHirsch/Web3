*GitHub Repository "ilyar/lab"*

'''--- .etc/karma.conf.js ---
// Karma configuration file, see link for more information
// https://karma-runner.github.io/1.0/config/configuration-file.html
const path = require('path')
module.exports = function (config) {
  config.set({
    basePath: '',
    frameworks: ['jasmine', '@angular-devkit/build-angular'],
    plugins: [
      require('karma-jasmine'),
      require('karma-chrome-launcher'),
      require('karma-jasmine-html-reporter'),
      require('karma-coverage'),
      require('@angular-devkit/build-angular/plugins/karma')
    ],
    client: {
      jasmine: {
        // you can add configuration options for Jasmine here
        // the possible options are listed at https://jasmine.github.io/api/edge/Configuration.html
        // for example, you can disable the random execution with `random: false`
        // or set a specific seed with `seed: 4321`
      },
      clearContext: false // leave Jasmine Spec Runner output visible in browser
    },
    jasmineHtmlReporter: {
      suppressAll: true // removes the duplicated traces
    },
    coverageReporter: {
      dir: path.join(path.dirname(__dirname), 'log', 'coverage-web'),
      subdir: '.',
      reporters: [
        { type: 'html' },
        { type: 'text-summary' }
      ]
    },
    reporters: ['progress', 'kjhtml'],
    port: 9876,
    colors: true,
    logLevel: config.LOG_INFO,
    autoWatch: true,
    browsers: [
      'Chrome',
    ],
    singleRun: false,
    restartOnFileChange: true
  })
}

'''
'''--- .etc/service-worker.json ---
{
  "$schema": "../node_modules/@angular/service-worker/config/schema.json",
  "index": "/index.html",
  "assetGroups": [
    {
      "name": "app",
      "installMode": "prefetch",
      "resources": {
        "files": [
          "/index.html",
          "/asset/manifest.webmanifest",
          "/*.json",
          "/*.css",
          "/*.js"
        ]
      }
    },
    {
      "name": "asset",
      "installMode": "lazy",
      "updateMode": "prefetch",
      "resources": {
        "files": [
          "/asset/**",
          "/*.(eot|svg|cur|jpg|png|webp|gif|otf|ttf|woff|woff2|ani)"
        ]
      }
    }
  ]
}

'''
'''--- README.md ---
# NgApp

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 12.2.6.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.

'''
'''--- angular.json ---
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "cli": {
    "packageManager": "yarn",
    "defaultCollection": "@angular-eslint/schematics"
  },
  "newProjectRoot": "projects",
  "projects": {
    "web": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "inlineTemplate": true,
          "inlineStyle": true,
          "style": "scss"
        },
        "@schematics/angular:application": {
          "strict": false
        }
      },
      "root": "",
      "sourceRoot": "src/web",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "build/web",
            "index": "src/web/index.html",
            "main": "src/web/main.ts",
            "polyfills": "src/web/polyfills.ts",
            "tsConfig": "tsconfig.web.json",
            "inlineStyleLanguage": "scss",
            "assets": [
              "src/web/asset",
              "src/web/manifest.webmanifest"
            ],
            "styles": [
              "src/web/styles.scss"
            ],
            "scripts": [],
            "serviceWorker": true,
            "ngswConfigPath": ".etc/service-worker.json"
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "fileReplacements": [
                {
                  "replace": "src/web/environments/environment.ts",
                  "with": "src/web/environments/environment.prod.ts"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "buildOptimizer": false,
              "optimization": false,
              "vendorChunk": true,
              "extractLicenses": false,
              "sourceMap": true,
              "namedChunks": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "browserTarget": "web:build:production"
            },
            "development": {
              "browserTarget": "web:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "browserTarget": "web:build"
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "main": "src/web/test.ts",
            "polyfills": "src/web/polyfills.ts",
            "tsConfig": "tsconfig.spec.json",
            "karmaConfig": ".etc/karma.conf.js",
            "inlineStyleLanguage": "scss",
            "assets": [
              "src/web/asset",
              "src/web/manifest.webmanifest"
            ],
            "styles": [
              "src/web/styles.scss"
            ],
            "scripts": []
          }
        },
        "lint": {
          "builder": "@angular-eslint/builder:lint",
          "options": {
            "lintFilePatterns": [
              "src/**/*.ts",
              "src/**/*.html"
            ]
          }
        },
        "deploy": {
          "builder": "angular-cli-ghpages:deploy",
          "options": {
            "repo": "git@github.com:depositum/depositum.github.io.git"
          }
        }
      }
    }
  },
  "defaultProject": "web"
}

'''
'''--- package.json ---
{
  "name": "depositum",
  "description": "The simplify DiFi",
  "version": "1.0.0-alpha.0",
  "repository": "git@github.com:InfinityHackathon/metabuidl-2021-novum-depositum.git",
  "license": "UNLICENSED",
  "browserslist": [
    "defaults",
    "Firefox ESR",
    "not IE 11"
  ],
  "scripts": {
    "postinstall": "yarn --silent asset",
    "ng": "ng",
    "start": "ng serve",
    "build_web": "ng build --base-href=/",
    "deploy_web": "ng deploy --base-href=/",
    "asset": "pwa-asset-generator src/web/asset/logo.svg src/web/asset/icon --favicon --favicon --type png --padding 0 --background transparent --opaque false --log false",
    "watch": "ng build --watch --configuration development",
    "test_coverage": "yarn test --code-coverage",
    "lint": "ng lint",
    "test": "ng test --watch=false --browsers=ChromeHeadless"
  },
  "eslintConfig": {
    "root": true,
    "ignorePatterns": [
      "projects/**/*"
    ],
    "overrides": [
      {
        "files": [
          "*.ts"
        ],
        "parserOptions": {
          "project": [
            "tsconfig.json"
          ],
          "createDefaultProgram": true
        },
        "extends": [
          "plugin:@angular-eslint/recommended",
          "plugin:@angular-eslint/template/process-inline-templates"
        ],
        "rules": {
          "object-curly-spacing": [
            "error",
            "never"
          ],
          "computed-property-spacing": [
            "error",
            "always"
          ],
          "comma-dangle": [
            "error",
            "always-multiline"
          ],
          "semi": [
            "error",
            "never"
          ],
          "quotes": [
            "error",
            "single"
          ],
          "@angular-eslint/directive-selector": [
            "error",
            {
              "type": "attribute",
              "prefix": "app",
              "style": "camelCase"
            }
          ],
          "@angular-eslint/component-selector": [
            "error",
            {
              "type": "element",
              "prefix": "app",
              "style": "kebab-case"
            }
          ]
        }
      },
      {
        "files": [
          "*.html"
        ],
        "extends": [
          "plugin:@angular-eslint/template/recommended"
        ],
        "rules": {}
      }
    ]
  },
  "dependencies": {
    "@angular/animations": "~12.2.0",
    "@angular/common": "~12.2.0",
    "@angular/compiler": "~12.2.0",
    "@angular/core": "~12.2.0",
    "@angular/forms": "~12.2.0",
    "@angular/platform-browser": "~12.2.0",
    "@angular/platform-browser-dynamic": "~12.2.0",
    "@angular/router": "~12.2.0",
    "@angular/service-worker": "~12.2.0",
    "near-api-js": "^0.42.0",
    "rxjs": "^7.3.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.11.4"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "~12.2.6",
    "@angular-eslint/builder": "12.4.1",
    "@angular-eslint/eslint-plugin": "12.4.1",
    "@angular-eslint/eslint-plugin-template": "12.4.1",
    "@angular-eslint/schematics": "12.4.1",
    "@angular-eslint/template-parser": "12.4.1",
    "@angular/cli": "~12.2.6",
    "@angular/compiler-cli": "~12.2.0",
    "@types/jasmine": "~3.8.0",
    "@types/node": "^12.11.1",
    "@typescript-eslint/eslint-plugin": "4.28.2",
    "@typescript-eslint/parser": "4.28.2",
    "angular-cli-ghpages": "^1.0.0-rc.2",
    "eslint": "^7.26.0",
    "jasmine-core": "~3.8.0",
    "karma": "~6.3.0",
    "karma-chrome-launcher": "~3.1.0",
    "karma-coverage": "~2.0.3",
    "karma-jasmine": "~4.0.0",
    "karma-jasmine-html-reporter": "~1.7.0",
    "pwa-asset-generator": "^4.3.6",
    "typescript": "~4.3.5"
  }
}

'''
'''--- src/contract/depositum/depositum.ts ---
import {
  Contract,
  Account,
} from 'near-api-js'
interface DepositumInterface {
  coin_list(): Promise<string[]>
  balance_of(account_id: Account): Promise<Array<Array<[string, string]>>>
}
export class Depositum {
  private contract: DepositumInterface
  constructor(account: Account, contractId: string) {
    // @ts-ignore
    this.contract = new Contract(account, contractId, {
      viewMethods: [
        'coin_list',
        'strategy_list',
        'balance_of',
      ],
      changeMethods: [
        'coin_enable',
        'coin_disable',
      ],
    })
  }
  coin_list(): Promise<string[]> {
    return this.contract.coin_list()
  }
  balance_of(account_id: Account): Promise<Array<Array<[string, string]>>> {
    return this.contract.balance_of(account_id)
  }
}

'''
'''--- src/web/app/app-routing.module.ts ---
import {NgModule} from '@angular/core'
import {RouterModule, Routes} from '@angular/router'

const routes: Routes = []

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule],
})
export class AppRoutingModule { }

'''
'''--- src/web/app/app.component.spec.ts ---
import {TestBed} from '@angular/core/testing'
import {RouterTestingModule} from '@angular/router/testing'
import {AppComponent} from './app.component'
import {PanelComponent} from './panel/panel.component'

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule,
      ],
      declarations: [
        PanelComponent,
        AppComponent,
      ],
    }).compileComponents()
  })

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent)
    const app = fixture.componentInstance
    expect(app).toBeTruthy()
  })

  it('should have as title', () => {
    const fixture = TestBed.createComponent(AppComponent)
    const app = fixture.componentInstance
    expect(app.title).toEqual('DEPOSITUM')
  })

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent)
    fixture.detectChanges()
    const compiled = fixture.nativeElement as HTMLElement
    expect(compiled.querySelector('app-panel .title')?.textContent).toContain('DEPOSITUM')
    expect(compiled.querySelector('app-panel .description')?.textContent).toContain('The simplify DiFi')
  })
})

'''
'''--- src/web/app/app.component.ts ---
import {Component} from '@angular/core'
import pkg from '../../../package.json'

@Component({
  selector: 'app-root',
  template: `
    <app-panel
      [title]="title"
      [description]="description"></app-panel>
    <router-outlet></router-outlet>
  `,
  styles: [],
})
export class AppComponent {
  title = pkg.name.toUpperCase()
  description = pkg.description
}

'''
'''--- src/web/app/app.module.ts ---
import {NgModule} from '@angular/core'
import {BrowserModule} from '@angular/platform-browser'

import {AppRoutingModule} from './app-routing.module'
import {AppComponent} from './app.component'
import {ServiceWorkerModule} from '@angular/service-worker'
import {environment} from '../environments/environment'
import {PanelComponent} from './panel/panel.component'
import {WalletService} from "./wallet.service";

@NgModule({
  declarations: [
    AppComponent,
    PanelComponent,
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    ServiceWorkerModule.register('ngsw-worker.js', {
      enabled: environment.production,
      // Register the ServiceWorker as soon as the app is stable
      // or after 30 seconds (whichever comes first).
      registrationStrategy: 'registerWhenStable:30000',
    }),
  ],
  providers: [
  ],
  bootstrap: [AppComponent],
})
export class AppModule { }

'''
'''--- src/web/app/panel/panel.component.spec.ts ---
import {ComponentFixture, TestBed} from '@angular/core/testing'
import {PanelComponent} from './panel.component'

describe('PanelComponent', () => {
  let component: PanelComponent
  let fixture: ComponentFixture<PanelComponent>

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ PanelComponent ],
    })
    .compileComponents()
  })

  beforeEach(() => {
    fixture = TestBed.createComponent(PanelComponent)
    component = fixture.componentInstance
    fixture.detectChanges()
  })

  it('should create', () => {
    expect(component).toBeTruthy()
  })
})

'''
'''--- src/web/app/panel/panel.component.ts ---
import {
  Component,
  Input,
} from '@angular/core'
import {WalletService} from '../wallet.service'

@Component({
  selector: 'app-panel',
  template: `
<!--    <div class="grid-container" *ngIf="!wallet.isAuthenticated()">-->
    <div class="grid-container">
      <div class="grid-x grid-padding-x" *ngIf="title || description">
        <div class="large-12 cell align-center">
          <h1 class="title" *ngIf="title">{{title}}</h1>
          <span class="description" *ngIf="description" style="display: block">{{description}}</span>
          <img width="255" [alt]="title" src="../../asset/logo.svg">
        </div>
      </div>
      <div class="grid-x grid-padding-x">
        <div class="large-12 cell align-center">
<!--          <button class="button" (click)="wallet.signIn()">Connect Wallet</button>-->
          <button class="button">Connect Wallet</button>
        </div>
      </div>
    </div>
  `,
  styles: [`
    :host {
      text-align: center;
      display: block;
    }
    .title {
      font-size: 2rem;
      font-weight: bold;
    }
    .description {
      font-size: 1.5rem;
    }
  `],
})
export class PanelComponent {
  @Input() title?: string;
  @Input() description?: string;

  constructor(private wallet: WalletService) {}
}

'''
'''--- src/web/app/wallet.service.ts ---
import {Injectable} from '@angular/core'
import {
  config,
  configList,
  NetworkConfig,
} from '../config'
import {
  connect,
  keyStores,
  WalletConnection,
} from 'near-api-js'
import {
  formatNearAmount,
  parseNearAmount,
} from 'near-api-js/lib/utils/format'
import {Depositum} from '../../contract/depositum/depositum'

const toNear = (balance: string) => Math.floor(parseFloat(formatNearAmount(balance)) * 100) / 100
const envDefault = 'testnet'

@Injectable({
  providedIn: 'root',
})
export class WalletService {
  connection?: WalletConnection
  contractName?: string
  contract?: Depositum
  accountId?: string
  config?: NetworkConfig
  configList: NetworkConfig[] = []
  // Depositum
  coinList: string[] = []

  constructor() {
    this.configList = configList()
    this.initContract(envDefault).catch(reason => {
      throw new Error(reason.message)
    })
  }

  async initContract(env: string): Promise<void> {
    this.config = config(env) // TODO implement detect env
    // FIXME yarn build_web => [error] SyntaxError: build/web/main-es2015.XXX.js: Deleting local variable in strict mode. (1:259472)
    // const near = await connect(Object.assign({
    //   deps: {
    //     keyStore: new keyStores.BrowserLocalStorageKeyStore(),
    //   },
    // }, this.config))
    // this.connection = new WalletConnection(near, this.config.networkId)
    // this.accountId = this.connection.getAccountId()
    // this.contractName = this.config.contractName
    // this.contract = new Depositum(this.connection.account(), this.contractName)
    // await this.update()
  }

  async update(): Promise<void> {
    await this.updateCoinList()
  }

  async updateCoinList(): Promise<void> {
    this.coinList = await this.contract?.coin_list() || []
  }

  signIn(): void {
    this.connection?.requestSignIn(this.config?.contractName)
  }

  isAuthenticated(): boolean {
    return !!this.accountId
  }

  signOut(): void {
    this.connection?.signOut()
    this.accountId = ''
  }
}

'''
'''--- src/web/asset/logo.svg ---
<svg width="120" height="120"
     viewBox="0 0 120 120"
     xmlns="http://www.w3.org/2000/svg">
  <g fill="#1976d2" stroke="#1976d2">
    <!--left-->
    <rect x="30" y="15" width="25" height="20" />
    <rect x="30" y="85" width="25" height="20" />
    <rect x="5" y="5" width="25" height="110" />
    <!--center-->
    <rect x="40" y="50" width="40" height="20" />
    <!--right-->
    <rect x="70" y="15" width="25" height="20" />
    <rect x="70" y="85" width="25" height="20" />
    <rect x="90" y="5" width="25" height="110" />
  </g>
</svg>

'''
'''--- src/web/config.ts ---
import {environment} from './environments/environment'

export interface NetworkConfig {
  networkId: string
  nodeUrl: string
  contractName: string
  walletUrl?: string
  helperUrl?: string
  explorerUrl?: string
  keyPath?: string
  masterAccount?: string
}

const developList = [
  'local',
]

const productionList = [
  'testnet',
  'betanet',
]

export function configList(): NetworkConfig[] {
  if (!environment.production) {
    productionList.push(...developList)
  }
  return productionList.map(it => config(it))
}

export function config(env: string): NetworkConfig {
  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: 'alpha.depositum.near',
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
      }
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: 'alpha.depositum.testnet',
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      }
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: 'alpha.depositum.betanet',
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org',
        explorerUrl: 'https://explorer.betanet.near.org',
      }
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        contractName: 'alpha.depositum.local',
        walletUrl: 'http://localhost:4000/wallet',
        helperUrl: 'http://localhost:3000',
      }
    default:
      throw Error(`Unconfigured environment '${env}'`)
  }
}

'''
'''--- src/web/environments/environment.prod.ts ---
export const environment = {
  production: true,
}

'''
'''--- src/web/environments/environment.ts ---
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.

export const environment = {
  production: false,
}

/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.

'''
'''--- src/web/index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>DEPOSITUM</title>
  <meta name="description" content="DEPOSITUM — The simplify DiFi">
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="manifest" href="asset/manifest.webmanifest">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/foundation-sites@6.6.3/dist/css/foundation.min.css" integrity="sha256-ogmFxjqiTMnZhxCqVmcqTvjfe1Y/ec4WaRj/aQPvn+I=" crossorigin="anonymous">
  <meta name="theme-color" content="#1976d2">
  <link rel="icon" type="image/png" sizes="196x196" href="asset/icon/favicon-196.png">
  <link rel="apple-touch-icon" href="asset/icon/apple-icon-180.png">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-2048-2732.png"
        media="(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-2732-2048.png"
        media="(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-1668-2388.png"
        media="(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-2388-1668.png"
        media="(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-1536-2048.png"
        media="(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-2048-1536.png"
        media="(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-1668-2224.png"
        media="(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-2224-1668.png"
        media="(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-1620-2160.png"
        media="(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-2160-1620.png"
        media="(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-1284-2778.png"
        media="(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-2778-1284.png"
        media="(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-1170-2532.png"
        media="(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-2532-1170.png"
        media="(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-1125-2436.png"
        media="(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-2436-1125.png"
        media="(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-1242-2688.png"
        media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-2688-1242.png"
        media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-828-1792.png"
        media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-1792-828.png"
        media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-1242-2208.png"
        media="(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-2208-1242.png"
        media="(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-750-1334.png"
        media="(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-1334-750.png"
        media="(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-640-1136.png"
        media="(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)">
  <link rel="apple-touch-startup-image" href="asset/icon/apple-splash-1136-640.png"
        media="(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)">
</head>
<body>
  <app-root></app-root>
  <noscript>Please enable JavaScript to continue using this application.</noscript>
</body>
</html>

'''
'''--- src/web/main.ts ---
import {enableProdMode} from '@angular/core'
import {platformBrowserDynamic} from '@angular/platform-browser-dynamic'

import {AppModule} from './app/app.module'
import {environment} from './environments/environment'

if (environment.production) {
  enableProdMode()
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err))

'''
'''--- src/web/polyfills.ts ---
/**
 * This file includes polyfills needed by Angular and is loaded before the app.
 * You can add your own extra polyfills to this file.
 *
 * This file is divided into 2 sections:
 *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
 *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
 *      file.
 *
 * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
 * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),
 * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.
 *
 * Learn more in https://angular.io/guide/browser-support
 */

/***************************************************************************************************
 * BROWSER POLYFILLS
 */

/**
 * IE11 requires the following for NgClass support on SVG elements
 */
// import 'classlist.js';  // Run `npm install --save classlist.js`.

/**
 * Web Animations `@angular/platform-browser/animations`
 * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.
 * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).
 */
// import 'web-animations-js';  // Run `npm install --save web-animations-js`.

/**
 * By default, zone.js will patch all possible macroTask and DomEvents
 * user can disable parts of macroTask/DomEvents patch by setting following flags
 * because those flags need to be set before `zone.js` being loaded, and webpack
 * will put import in the top of bundle, so user need to create a separate file
 * in this directory (for example: zone-flags.ts), and put the following flags
 * into that file, and then add the following code before importing zone.js.
 * import './zone-flags';
 *
 * The flags allowed in zone-flags.ts are listed here.
 *
 * The following flags will work for all browsers.
 *
 * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
 * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
 * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
 *
 *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
 *  with the following flag, it will bypass `zone.js` patch for IE/Edge
 *
 *  (window as any).__Zone_enable_cross_context_check = true;
 *
 */

/***************************************************************************************************
 * Zone JS is required by default for Angular itself.
 */
import 'zone.js'  // Included with Angular CLI.

/***************************************************************************************************
 * APPLICATION IMPORTS
 */

'''
'''--- src/web/test.ts ---
// This file is required by karma.conf.js and loads recursively all the .spec and framework files

import 'zone.js/testing'
import {getTestBed} from '@angular/core/testing'
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting,
} from '@angular/platform-browser-dynamic/testing'

declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
}

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting(),
  {teardown: {destroyAfterEach: true}},
)

// Then we find all the tests.
const context = require.context('./', true, /\.spec\.ts$/)
// And load the modules.
context.keys().map(context)

'''
'''--- tsconfig.json ---
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./build/out-tsc",
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "resolveJsonModule": true,
    "allowSyntheticDefaultImports": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "es2017",
    "module": "es2020",
    "lib": [
      "es2018",
      "dom"
    ]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}

'''
'''--- tsconfig.spec.json ---
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "build/spec",
    "types": [
      "jasmine"
    ]
  },
  "files": [
    "src/web/test.ts",
    "src/web/polyfills.ts"
  ],
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}

'''
'''--- tsconfig.web.json ---
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "build/web",
    "types": []
  },
  "files": [
    "src/web/main.ts",
    "src/web/polyfills.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}

'''