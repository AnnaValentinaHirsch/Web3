*GitHub Repository "MARS-DAO/MarsDaoAutoFarm"*

'''--- README.md ---
# MarsDAOAutoFarm
v3.0.0 Jan 23, 2023

MarsDAO autofarm.

## Contracts

Network: **Binance Smart Chain**.

| Contract                    | Address                                    |
| --------------------------- | ------------------------------------------ |
| GovernanceMarsDAO           | 0x585d49b69b0f5020243E9f3f89A9dbCc5D163FbB |
| MarsAutoFarmGovernance (v2) | 0x953D579f431A0B58EBFF6Bd4083067E34a837C37 |
| MarsAutoFarm (v2)           | 0x4c94639b015db991D61d0B612e0e8D3Dc7e15e49 |
| MarsAutoFarmGovernance      | 0x9431E5Ccc83A514BFAEdDe729853A7B20BfD83de |
| MarsAutoFarm                | 0x5aEF70fb368b930f3129a5EcD795a6Bb2678C338 |

## Pools v2

| PID | Pair         | Platform | Strat   | Platform PID | LP token                                   | Strat                                      |
| --- | ------------ | -------- | ------- | ------------ | ------------------------------------------ | ------------------------------------------ |
| 0   | BNB-BSW      | BiSwap   | BStratX | 10           | 0x46492B26639Df0cda9b2769429845cb991591E0A | 0x870Da874b6E34022C511aF89A0F8877e02c31d41 |
| 1   | BNB-USDT     | BiSwap   | BStratX | 2            | 0x8840C6252e2e86e545deFb6da98B2a0E26d8C1BA | 0x06115e4bCB4FB19dE3d3d3E7513a3eeCCbA6F509 |
| 2   | CAKE-USDT    | Pancake  | Strat2X | 47           | 0xA39Af17CE4a8eb807E076805Da1e2B8EA7D0755b | 0x288bbFeE20E0664fb0b0bea6ff5cB18731509c07 |
| 5   | DOGE-BNB     | Pancake  | Strat2X | 37           | 0xac109C8025F272414fd9e2faA805a583708A017f | 0x523A50057176e53A1f9E26D214cCa6487d6E82E9 |
| 6   | WOO-BNB      | Pancake  | Strat2X | 45           | 0x89eE0491CE55d2f7472A97602a95426216167189 | 0x5C876D050c3934951C02c2D71c557aCe1803dA0e |
| 7   | ALPACA-BUSD  | Pancake  | Strat2X | 35           | 0x7752e1FA9F3a2e860856458517008558DEb989e3 | 0x627E79FEaC810eC70B6dbE02e518546c5e8d95FC |
| 8   | BETA-BNB     | Pancake  | Strat2X | 61           | 0x88a02D94F437799f06f8c256ff07Aa397E6D0016 | 0x6B61F05A0Abd84295FBA1b291ffafFcc811f4E89 |
| 9   | EPS-BNB      | Pancake  | Strat2X | 33           | 0xddE420cbB3794ebD8FFC3Ac69F9c78e5d1411870 | 0xDc15c39eBd1585284EED375605b3f4E8D51eCeBe |
| 10  | C98-BNB      | Pancake  | Strat2X | 53           | 0x92247860A03F48d5c6425c7CA35CDcFCB1013AA1 | 0x479d3699B6E20C942D13Cb8446a654d5d76520dA |
| 11  | CAKE-BNB     | Pancake  | Strat2X | 2            | 0x0eD7e52944161450477ee417DE9Cd3a859b14fD0 | 0xeABfe55235bC5874292e01ACD8dAc00027329f5C |
| 12  | BP-BNB       | Pancake  | Strat2X | 58           | 0x2bF2dEB40639201C9A94c9e33b4852D9AEa5fd2D | 0xc5280d6b45440fc222bc3DCe11E2090591D87Ca7 |
| 13  | USDT-BSW     | BiSwap   | BStratX | 9            | 0x2b30c317ceDFb554Ec525F85E79538D59970BEb0 | 0x5D986A3f3F9F23f6A0fD214F80ab55B6fBefD143 |
| 14  | TONCOIN-USDT | BiSwap   | BStratX | 102          | 0x923dD5668A0F373B714f8D230425ed7799c5d63D | 0xb49a8f5ac25BB0BFf45f8dE525B53CB4e6F07294 |
| 15  | NEAR-BNB     | BiSwap   | BStratX | 78           | 0xe0E9FDd2F0BcdBcaF55661B6Fa1efc0Ce181504b | 0x7749eA2f8C2A7cfCa5ba72871c1051A1be9A42Ee |
| 16  | MATIC-BNB    | BiSwap   | BStratX | 70           | 0x3B09e13Ca9189FBD6a196cfE5FbD477C885afBf3 | 0x4776e897011C4bbeBCFdfe136FfC59393ef88c0A |
| 17  | BAKE-BNB     | BiSwap   | BStratX | 24           | 0x4c372698eaF2DA2A04dfEaDFE14DB0635fEfdB34 | 0xF9aAD8E5599178cf727eA071B543d1a1421F0673 |
| 18  | ETH-USDT     | BiSwap   | BStratX | 5            | 0x63b30de1A998e9E64FD58A21F68D323B9BcD8F85 | 0x217Ef5B6ad42973923608691b5b9864523Da86ee |
| 19  | BTCB-USDT    | BiSwap   | BStratX | 6            | 0xa987f0b7098585c735cD943ee07544a84e923d1D | 0x8De294309deC9170081cE088CC63B6082f9AF29d |
| 20  | BNB-BTCB     | BiSwap   | BStratX | 8            | 0xC7e9d76ba11099AF3F330ff829c5F442d571e057 | 0xFf15A5FD75fcB8D98FdD06cEe08fBdF85cd9fAf8 |
| 21  | FTM-BNB      | BiSwap   | BStratX | 69           | 0x7bfCd2bda87fd2312A946BD9b68f5Acc6E21595a | 0xEb3E1a5ACd1987cCF578962911458088c823419d |
| 22  | GALA-BNB     | BiSwap   | BStratX | 92           | 0x4F00ADEED60FCba76e58a5d067b6A4b9Daf8e30f | 0xe9EC05E146213b21acE72Acc032DbDF861b8F680 |
| 24  | XRP-BNB      | BiSwap   | BStratX | 21           | 0x5dc30Bb8D7F02eFEf28f7E637D17Aea13Fa96906 | 0x40d8bC5002f05257e99977E791d169Bd20dA4086 |
| 25  | DOT-BNB      | BiSwap   | BStratX | 14           | 0xe7fbB8bd95322618e925affd84D7eC0E32DC0e57 | 0x17F17670e0c90858CbBE2A8cd964704faf0B3Cb5 |
| 26  | ADA-BNB      | BiSwap   | BStratX | 16           | 0x8860922Eb2795aB0D57363653Dd7EBf18D7c0A42 | 0x0f151c753f2d73FAb4dB5F714dD0F4E552B72e37 |
| 27  | TWT-BNB      | BiSwap   | BStratX | 27           | 0xF1A12EC907B3d87b6De7a9A5C3820566c621f68B | 0xeC06C77207F8Fe2815aE6f9FD315Ce2EB7b88CB3 |
| 29  | BTT-BUSD     | BiSwap   | BStratX | 105          | 0xB0c7DC6f0b67210708a22ab543480F162C24d110 | 0xE45670256f535D74069A6de17B5f93F8F759e1D4 |
| 30  | USDC-USDT    | BiSwap   | BStratX | 4            | 0x1483767E665B3591677Fd49F724bf7430C18Bf83 | 0xDd192Bf847c9D82746c45dA67d40C4ddA6092180 |
| 31  | ATOM-BNB     | BiSwap   | BStratX | 97           | 0x5a36E9659F94F27e4526DDf6Dd8f0c3B3386D7F3 | 0x48A15b9935e96c46a1B04920D79d94174cAe4A75 |
| 32  | EOS-BNB      | BiSwap   | BStratX | 96           | 0x7683f8349376F297138D3082e236F0E34aF1D1c3 | 0xF4E73eA908a4B7b51FD565e717519f0FE43c4Ff8 |
| 33  | BUSD-BNB     | Pancake  | Strat2X | 3            | 0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16 | 0xb6720F08FC85f137B2C1deA1Cd9E3e94205FC41F |
| 34  | CHESS-USDC   | Pancake  | Strat2X | 51           | 0x1472976E0B97F5B2fC93f1FFF14e2b5C4447b64F | 0x30517ABFE81bA61AC46355dE9d6eE1B6E8FeD90f |
| 36  | GMT-USDC     | Pancake  | Strat2X | 85           | 0x007EC643C7Cc33a70C083fC305c283dd009C8b94 | 0xccdC13d68F5e5fb5882f2d9d57636cbbA4F4407F |

## Pools

| PID | Pair         | Platform | Strat   | Platform PID | LP token                                   | Start                                      |
| --- | ------------ | -------- | ------- | ------------ | ------------------------------------------ | ------------------------------------------ |
| 2   | DODO-BNB     | Pancake  | StratX  | 305          | 0xA9986Fcbdb23c2E8B11AB40102990a08f8E58f06 | 0xC4977ddE969f5253F3a423A177a97e1695Ae37c6 |
| 3   | DOGE-BNB     | Pancake  | StratX  | 376          | 0xac109C8025F272414fd9e2faA805a583708A017f | 0x262A100Fe9579F76E13FfF8648B02d888470ACAB |
| 4   | CAKE-USDT    | Pancake  | StratX  | 422          | 0xA39Af17CE4a8eb807E076805Da1e2B8EA7D0755b | 0x35Eca2C521d69cBf67B6Ae3BB49C99bC4b8d6769 |
| 9   | WOO-BNB      | Pancake  | StratX  | 414          | 0x89eE0491CE55d2f7472A97602a95426216167189 | 0x5cbe1fbE4Bf89457b046f4fba9Ac0b2d0feb8a58 |
| 11  | ALPACA-BUSD  | Pancake  | StratX  | 362          | 0x7752e1FA9F3a2e860856458517008558DEb989e3 | 0xFc00a02B5C5CCA32feE91a0F0D86D97C10a9cd40 |
| 15  | BETA-BNB     | Pancake  | StratX  | 461          | 0x88a02D94F437799f06f8c256ff07Aa397E6D0016 | 0x50a8487C45CeFcaEf1AC00100292bd82D1054182 |
| 16  | C98-BNB      | Pancake  | StratX  | 431          | 0x92247860A03F48d5c6425c7CA35CDcFCB1013AA1 | 0x4f15844a540918c73346DE87722e87354657Bf8F |
| 17  | EPS-BNB      | Pancake  | StratX  | 350          | 0xddE420cbB3794ebD8FFC3Ac69F9c78e5d1411870 | 0x1912f9f163F67819ccb8A6f43E82A3C6c8afeB4E |
| 19  | CAKE-BNB     | Pancake  | StratX  | 251          | 0x0eD7e52944161450477ee417DE9Cd3a859b14fD0 | 0xE9872a59A2F26C0d328f8479a34aEf552400C30A |
| 20  | USDT-BSW     | BiSwap   | BStratX | 9            | 0x2b30c317ceDFb554Ec525F85E79538D59970BEb0 | 0xD2085cA58557b88416B223A5dC2562E531f44aBd |
| 21  | BNB-BSW      | BiSwap   | BStratX | 10           | 0x46492B26639Df0cda9b2769429845cb991591E0A | 0x8F67eb54b285CBCc66F6c265aCD1B94BcB8a9CFb |
| 22  | TONCOIN-USDT | BiSwap   | BStratX | 102          | 0x923dD5668A0F373B714f8D230425ed7799c5d63D | 0xB2F0937A1797149E53385654E2bE8D39638D2900 |
| 23  | NEAR-BNB     | BiSwap   | BStratX | 78           | 0xe0E9FDd2F0BcdBcaF55661B6Fa1efc0Ce181504b | 0x9e1ef57E79FbBa38Dd5e5939fBAEb480c2a555CD |
| 24  | MATIC-BNB    | BiSwap   | BStratX | 70           | 0x3B09e13Ca9189FBD6a196cfE5FbD477C885afBf3 | 0x6178ef1edF53988c45283F1df36F204bB7Db44bc |
| 25  | BAKE-BNB     | BiSwap   | BStratX | 24           | 0x4c372698eaF2DA2A04dfEaDFE14DB0635fEfdB34 | 0xB7C3f89da72abB15f141c2458587244434DC015c |
| 26  | ETH-USDT     | BiSwap   | BStratX | 5            | 0x63b30de1A998e9E64FD58A21F68D323B9BcD8F85 | 0x562f64AD75271D9b5338Aa8cCDfD72e5B04b7B7B |
| 27  | BNB-USDT     | BiSwap   | BStratX | 2            | 0x8840C6252e2e86e545deFb6da98B2a0E26d8C1BA | 0x4c4E8FDD0D913C864cA317feA0C6F26A7736A5e2 |
| 28  | BTCB-USDT    | BiSwap   | BStratX | 6            | 0xa987f0b7098585c735cD943ee07544a84e923d1D | 0x76907A66A8bA2404bE3D52a0AF084C5A0ed51389 |
| 29  | BNB-BTCB     | BiSwap   | BStratX | 8            | 0xC7e9d76ba11099AF3F330ff829c5F442d571e057 | 0x2711B77A1546F1A03e1FEDa737a77C82b3c88a0F |
| 30  | FTM-BNB      | BiSwap   | BStratX | 69           | 0x7bfCd2bda87fd2312A946BD9b68f5Acc6E21595a | 0x61Ff745696fA7C91e9dA84A703eE9AFffbCA0fdf |
| 31  | GALA-BNB     | BiSwap   | BStratX | 92           | 0x4F00ADEED60FCba76e58a5d067b6A4b9Daf8e30f | 0x2e9D3a41848de5bA87D5E0c73f7b342211F9E47C |
| 32  | HERO-BNB     | BiSwap   | BStratX | 74           | 0xf842a922edb51fE7ca464823bFf7FD906366eE4b | 0x43864c237f43c5fBAB5B8A509f7e656B4b096070 |
| 33  | XRP-BNB      | BiSwap   | BStratX | 21           | 0x5dc30Bb8D7F02eFEf28f7E637D17Aea13Fa96906 | 0x8175A7CDe7D4be9E62f29A315D3ee7C5Eb2f4984 |
| 34  | DOT-BNB      | BiSwap   | BStratX | 14           | 0xe7fbB8bd95322618e925affd84D7eC0E32DC0e57 | 0x3E5180EdaE625c88D83f31fa55F7E0335Fb7FA2e |
| 35  | ADA-BNB      | BiSwap   | BStratX | 16           | 0x8860922Eb2795aB0D57363653Dd7EBf18D7c0A42 | 0xD85Cec4AcF41A0ed98B68f2c7E95Fc394960a640 |
| 36  | TWT-BNB      | BiSwap   | BStratX | 27           | 0xF1A12EC907B3d87b6De7a9A5C3820566c621f68B | 0x70b185238e7F7E36A9D46f4F147E3180c6e71c2e |
| 37  | THG-BNB      | BiSwap   | BStratX | 82           | 0x122d12eBccbb96c5B20E97672120d56C87F6aF82 | 0xeEe0189389325e0886BfC03EE4ed1EbB898E94f4 |
| 38  | BTT-BUSD     | BiSwap   | BStratX | 105          | 0xB0c7DC6f0b67210708a22ab543480F162C24d110 | 0xF9ED5C461cf67Ee164999f4EAD699011B324D9C5 |
| 39  | BP-BNB       | Pancake  | StratX  | 449          | 0x2bF2dEB40639201C9A94c9e33b4852D9AEa5fd2D | 0x32817d6A6c66f058BEDff44638dCE776605BAc72 |
| 41  | BUSD-BNB     | Pancake  | StratX  | 252          | 0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16 | 0xc15d70B6D3aBb225BDE8dEfEe3e42Ed1aEcF25eD |
| 42  | CHESS-USDC   | Pancake  | StratX  | 429          | 0x1472976E0B97F5B2fC93f1FFF14e2b5C4447b64F | 0xE3c7D9EED56EA715522FcB1746739AF69DbD8737 |
| 43  | QI-BNB       | Pancake  | StratX  | 476          | 0xf924E642f05ACC57fc3b14990c2B1a137683b201 | 0xA957d2FcFB75a8BeC1a2C05E2a6f4a05a91c188C |
| 44  | USDC-USDT    | BiSwap   | BStratX | 4            | 0x1483767E665B3591677Fd49F724bf7430C18Bf83 | 0x79B5358A8E2481ac6Aa876eEa21a3F2444b3A776 |
| 45  | ATOM-BNB     | BiSwap   | BStratX | 97           | 0x5a36E9659F94F27e4526DDf6Dd8f0c3B3386D7F3 | 0x6bE1529a1e5ECfe1e51A5e58968F7161CbbC3D1c |
| 46  | EOS-BNB      | BiSwap   | BStratX | 96           | 0x7683f8349376F297138D3082e236F0E34aF1D1c3 | 0xf69b0bc6E8a921FDC08083aD7f38Ea374e2cA1d3 |
| 47  | CAKE         | Pancake  | StratX  | 0            | 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82 | 0x23941d4bBfdFa1276AED8E3F34390F03df482a33 |
| 48  | GMT-USDC     | Pancake  | StratX  | 514          | 0x007EC643C7Cc33a70C083fC305c283dd009C8b94 | 0x2FF2093fAFB08bf824768fffEa6cC9e484CdE112 |

Powered by 2023 © TTM GROUP.

'''
'''--- hardhat.config.ts ---
import '@nomiclabs/hardhat-waffle';
import '@nomiclabs/hardhat-web3';
import '@nomiclabs/hardhat-ethers';
import '@nomiclabs/hardhat-etherscan';
import '@nomiclabs/hardhat-truffle5';
import '@nomiclabs/hardhat-ganache';

import 'hardhat-gas-reporter';

import { config as dotEnvConfig } from 'dotenv';
dotEnvConfig();

import { HardhatUserConfig } from 'hardhat/types';

// This is a sample Hardhat task. To learn how to create your own go to
// https://hardhat.org/guides/create-task.html
// task("accounts", "Prints the list of accounts", async () => {
//   const accounts = await ethers.getSigners();
//
//   for (const account of accounts) {
//     console.log(account.address);
//   }
// });

// You need to export an object to set up your config
// Go to https://hardhat.org/config/ to learn more
//https://api.bscscan.com/api?module=gastracker&action=gasoracle&apikey=YourApiKeyToken
//Ethereum (default)	ETH	https://api.etherscan.io/api?module=proxy&action=eth_gasPrice
//Binance	BNB	https://api.bscscan.com/api?module=proxy&action=eth_gasPrice
//Polygon	MATIC	https://api.polygonscan.com/api?module=proxy&action=eth_gasPrice
//Avalanche	AVAX	https://api.snowtrace.io/api?module=proxy&action=eth_gasPrice
//Heco	HT	https://api.hecoinfo.com/api?module=proxy&action=eth_gasPrice
//Moonriver	MOVR	https://api-moonriver.moonscan.io/api?module=proxy&action=eth_gasPrice
const config: HardhatUserConfig = {
    defaultNetwork: 'hardhat',
    gasReporter: {
        currency: 'USD',
        token:'BNB',
        gasPriceApi:'https://api.bscscan.com/api?module=proxy&action=eth_gasPrice',
        coinmarketcap: process.env.COINMARKETCAP_API_KEY,
        showTimeSpent:true,
        enabled: true
    },
    paths: {
        sources: './contracts',
        tests: './test',
        artifacts: './artifacts',
        cache: './cache',
    },
    networks: {
        hardhat: {
            hardfork: "istanbul",
            forking: {
                url: `${process.env.MORALIS_BSC_MAIN_RPC_URL}`,
                // url: 'http://localhost:8545',
                // blockNumber: 13000000,
                blockNumber: 13928412,
            },
            accounts: [
                // 5 accounts with 10^14 ETH each
                // Addresses:
                //   0x186e446fbd41dD51Ea2213dB2d3ae18B05A05ba8
                //   0x6824c889f6EbBA8Dac4Dd4289746FCFaC772Ea56
                //   0xCFf94465bd20C91C86b0c41e385052e61ed49f37
                //   0xEBAf3e0b7dBB0Eb41d66875Dd64d9F0F314651B3
                //   0xbFe6D5155040803CeB12a73F8f3763C26dd64a92
                {
                    privateKey:
                        '0xf269c6517520b4435128014f9c1e50c1c498374a7f5143f035bfb32153f3adab',
                    balance: '100000000000000000000000000000000',
                },
                {
                    privateKey:
                        '0xca3547a47684862274b476b689f951fad53219fbde79f66c9394e30f1f0b4904',
                    balance: '100000000000000000000000000000000',
                },
                {
                    privateKey:
                        '0x4bad9ef34aa208258e3d5723700f38a7e10a6bca6af78398da61e534be792ea8',
                    balance: '100000000000000000000000000000000',
                },
                {
                    privateKey:
                        '0xffc03a3bd5f36131164ad24616d6cde59a0cfef48235dd8b06529fc0e7d91f7c',
                    balance: '100000000000000000000000000000000',
                },
                {
                    privateKey:
                        '0x380c430a9b8fa9cce5524626d25a942fab0f26801d30bfd41d752be9ba74bd98',
                    balance: '100000000000000000000000000000000',
                },
            ],
            allowUnlimitedContractSize: false,
            blockGasLimit: 40000000,
            gas: 40000000,
            gasPrice: 'auto',
            loggingEnabled: false,
        },
        mainnet: {
            url: `${process.env.GETBLOCK_BSC_MAIN_RPC_URL}`,
            accounts: [`${process.env.PRIVATE_KEY_BSC}`],
        },
        development: {
            url: 'http://127.0.0.1:8545',
            gas: 12400000,
            timeout: 1000000,
        },
    },
    solidity: {
        compilers: [
            {
                version: '0.6.12',
                settings: {
                    optimizer: {
                        enabled: true,
                        runs: 200,
                    },
                },
            },
        ],
    },
    mocha: {
        timeout: 500000,
    },
    etherscan: {
        apiKey: `${process.env.BSCSCAN_API_KEY}`,
    },
};

export default config;

'''
'''--- migrations/1_initial_migration.js ---
//const StratX = artifacts.require("StratX");
//const BStratX = artifacts.require("BStratX");
/*
address _marsAutoFarmAddress,
address _marsTokenAddress,
address _dev25,
address _dev75
*/

module.exports = async (deployer, network) => {
  const mars="0x60322971a672B81BccE5947706D22c19dAeCf6Fb";
  const dev75="0x5733dc1a89627a499Fc2E82b205A4E04Adbc2F51";
  const dev25="0x2737D47BbE628B3Cb9740E70f5d6d46766671e91";
  const marsAvtofarm="0x5aEF70fb368b930f3129a5EcD795a6Bb2678C338";
  try{
    //deployer.deploy(StratX,marsAvtofarm,mars,dev25,dev75);
    //deployer.deploy(BStratX,marsAvtofarm,mars,dev25,dev75);
  }catch(err){
    console.log("ERROR:",err);
  }

};
'''
'''--- package.json ---
{
    "scripts": {
        "lint": "npx prettier --write 'contracts/**/*.sol' && npx prettier --write 'scripts/**/*.js' && npx prettier --write 'test/**/*.ts'",
        "lint:contracts": "npx prettier --write 'contracts/**/*.sol'",
        "compile": "npx hardhat compile",
        "fork": "npx hardhat node",
        "test": "npx hardhat test",
        "test_v": "npx hardhat test --verbose",
        "test:coverage": "npx hardhat coverage  --testfiles 'test/*.ts'",
        "test:verbose": "npx hardhat test --verbose test/*.ts",
        "deploy:mainnet": "npx hardhat deploy --network matic --tags MXPNftFarm --gasprice 1000000000",
        "deploy:rinkeby": "npx hardhat deploy --network matic --tags MXPNftFarm --gasprice 1000000000",
        "deploy:matic": "npx hardhat deploy --network matic --tags MXPNftFarm --gasprice 1000000000",
        "deploy:polygon": "npx hardhat deploy --network polygon --tags MXPNftFarm --gasprice 1000000000",
        "deploy": "export $(cat .env | xargs) && bash scripts/deploy.sh $npm_config_network",
        "getAddress": "node getAddress.js",
        "maxwatches": "echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p"
    },
    "dependencies": {
        "@openzeppelin/test-helpers": "^0.5.15",
        "@truffle/hdwallet-provider": "^1.2.6",
        "node-fetch": "3.1.0",
        "truffle-plugin-verify": "0.5.18",
        "web3-eth": "1.6.1",
        "web3-eth-abi": "1.6.1",
        "web3-utils": "1.6.1",
        "@nomiclabs/hardhat-etherscan": "^2.1.6",
        "@nomiclabs/hardhat-ganache": "^2.0.1",
        "@nomiclabs/hardhat-truffle5": "^2.0.0",
        "@types/mocha": "^9.0.0",
        "dotenv": "^10.0.0",
        "hardhat-gas-reporter": "^1.0.4",
        "prettier": "^2.3.2",
        "prettier-plugin-solidity": "^1.0.0-beta.17",
        "ts-node": "^10.2.1",
        "typescript": "^4.4.2",
        "waffle": "^0.0.4",
        "yargs": "^17.1.1"
    },
    "devDependencies": {
        "@commitlint/config-conventional": "^12.1.1",
        "@nomiclabs/hardhat-ethers": "^2.0.2",
        "@nomiclabs/hardhat-waffle": "^2.0.1",
        "@nomiclabs/hardhat-web3": "^2.0.0",
        "@openzeppelin/test-helpers":"^0.5.15",
        "chai": "^4.3.4",
        "chai-as-promised": "^7.1.1",
        "colors": "^1.4.0",
        "ethereum-waffle": "^3.3.0",
        "hardhat-gas-reporter":"^1.0.4",
        "ethers": "^5.4.5",
        "hardhat": "^2.6.8",
        "hardhat-deploy": "^0.7.10",
        "hardhat-deploy-ethers": "^0.3.0-beta.8",
        "husky": "^6.0.0",
        "solhint": "^3.3.6",
        "solidity-coverage": "^0.7.16",
        "standard-version": "^9.3.0"
    }
}

'''
'''--- scripts/deploy.sh ---
#!/bin/bash
truffle migrate --reset --network $1
echo "please wait...60 sec"
sleep 60

#truffle run verify StratX --network $1
truffle run verify BStratX --network $1

echo "done"
'''
'''--- test/MarsDaoAutoFarm.test.js ---
const { expectRevert, time,BN,ether} = require('@openzeppelin/test-helpers');
const { ethers, network } = require('hardhat');
const { array } = require('yargs');
const MarsAutoFarm = artifacts.require('MarsAutoFarm');
const StratX= artifacts.require('StratX');
const BStratX= artifacts.require('BStratX');
const ForceSend = artifacts.require('ForceSend');
const IERC20= artifacts.require('IERC20');
const MockERC20 = artifacts.require('MockERC20');
const GovernanceMarsDAO = artifacts.require('GovernanceMarsDAO');
const MarsAutoFarmGovernance=artifacts.require('MarsAutoFarmGovernance');

//const { DONOR_ADDRESS,B_DONOR_ADDRESS} = process.env;
const DONOR_ADDRESS='0x73feaa1eE314F8c655E354234017bE2193C9E24E';
const B_DONOR_ADDRESS='0xdbc1a13490deef9c3c12b44fe77b503c1b061739';
const LP='0x0eD7e52944161450477ee417DE9Cd3a859b14fD0';// (Pancake: CAKE_BNB)
const LPpid=251;
const BLP='0x5a36E9659F94F27e4526DDf6Dd8f0c3B3386D7F3';// (Biswap: ATOM_BNB)
const BLPpid=97;
const MARS_ADDRESS="0x4eC57B0156564DDdEa375F313927ec2DDc975D69";
const BUSD="0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56";
const CakeToken="0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82";
const BSWToken="0x965F527D9159dCe6288a2219DB51fc6Eef120dD1";

contract('MarsAutoFarm', ([alice, bob, carol, scot,developer]) => {

    before(async () => {
        this.mars=await IERC20.at(MARS_ADDRESS);
        this.marsAutoFarm = await MarsAutoFarm.new(MARS_ADDRESS, { from: alice });

        const forceSend = await ForceSend.new();
        await forceSend.go(DONOR_ADDRESS, { value: web3.utils.toWei("1", "ether") });
        this.lp = await IERC20.at(LP);
        await network.provider.request({
            method: 'hardhat_impersonateAccount',
            params: [DONOR_ADDRESS],
        });

        await this.lp.transfer(bob,web3.utils.toWei("1000", "ether"),{ from: DONOR_ADDRESS });
        await this.lp.transfer(carol,web3.utils.toWei("1000", "ether"),{ from: DONOR_ADDRESS });
        await this.lp.transfer(scot,web3.utils.toWei("1000", "ether"),{ from: DONOR_ADDRESS });
        

        const BforceSend = await ForceSend.new();
        await BforceSend.go(B_DONOR_ADDRESS, { value: web3.utils.toWei("1", "ether") });
        this.blp = await IERC20.at(BLP);

        await network.provider.request({
            method: 'hardhat_impersonateAccount',
            params: [B_DONOR_ADDRESS],
        });

        await this.blp.transfer(bob,web3.utils.toWei("1000", "ether"),{ from: B_DONOR_ADDRESS });
        await this.blp.transfer(carol,web3.utils.toWei("1000", "ether"),{ from: B_DONOR_ADDRESS });
        await this.blp.transfer(scot,web3.utils.toWei("1000", "ether"),{ from: B_DONOR_ADDRESS });       
        

    });

    it('deploy governance', async () => {
        this.newMars = await MockERC20.new('newMars', 'newMars', web3.utils.toWei("10000000", "ether"), { from: alice });
        this.gmarsToken= await GovernanceMarsDAO.new(this.newMars.address, { from: alice });
        await this.newMars.approve(this.gmarsToken.address, web3.utils.toWei("1000000", "ether"), { from: alice });
        await this.gmarsToken.mint(web3.utils.toWei("1000000", "ether"), { from: alice });
        await this.gmarsToken.transfer(bob,web3.utils.toWei("200000", "ether"),{ from: alice });
        await this.gmarsToken.transfer(carol,web3.utils.toWei("200000", "ether"),{ from: alice });
        await this.gmarsToken.transfer(scot,web3.utils.toWei("200000", "ether"),{ from: alice });
        this.governance = await MarsAutoFarmGovernance.new(this.marsAutoFarm.address,this.newMars.address,this.gmarsToken.address,{ from: alice });
        this.marsAutoFarm.setGovernance(this.governance.address,{ from: alice });
    });

    it('deploy StratX & BStratX', async () => {
        this.StratX = await StratX.new(this.marsAutoFarm.address,MARS_ADDRESS,developer,developer, { from: alice });
        this.BStratX = await BStratX.new(this.marsAutoFarm.address,MARS_ADDRESS,developer,developer, { from: alice });
        await this.lp.approve(this.StratX.address, web3.utils.toWei("1000", "ether"), { from: bob });
        await this.lp.approve(this.StratX.address, web3.utils.toWei("1000", "ether"), { from: carol });
        await this.lp.approve(this.StratX.address, web3.utils.toWei("1000", "ether"), { from: scot });
        await this.blp.approve(this.BStratX.address, web3.utils.toWei("1000", "ether"), { from: bob });
        await this.blp.approve(this.BStratX.address, web3.utils.toWei("1000", "ether"), { from: carol });
        await this.blp.approve(this.BStratX.address, web3.utils.toWei("1000", "ether"), { from: scot });
    });

    it('add pools', async () => {
        await this.marsAutoFarm.add(this.StratX.address,LP,LPpid,{ from: alice });
        await this.marsAutoFarm.add(this.BStratX.address,BLP,BLPpid,{ from: alice });
    });

    it('governance: create proposal', async () => {
        var calldata=web3.eth.abi.encodeParameters(['address[][]'], [[
            [
            "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82",
            "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
            "0x20de22029ab63cf9a7cf5feb2b737ca1ee4c82a6"
            ],
            [
            "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82",
            "0x20de22029ab63cf9a7cf5feb2b737ca1ee4c82a6"
            ]
        ]]);
        await this.newMars.approve(this.governance.address, web3.utils.toWei("1000", "ether"), { from: alice });
        await this.gmarsToken.approve(this.governance.address, web3.utils.toWei("1000000", "ether"), { from: alice });
        await this.governance.propose([0,1],6,calldata,{ from: alice });
        //console.log(web3.eth.abi.decodeParameters(['address[][]'],(await this.governance.proposals(0)).calldatas));
        
        calldata=web3.eth.abi.encodeParameters(['uint256'],[5000]);
        await this.governance.propose([0,1],1,calldata,{ from: alice });
        //pause()
        await this.governance.propose([0,1],4,0x00,{ from: alice });

        //console.log(await this.governance.getActions(2));
    });

    it('governance: voting', async () => {
        await this.gmarsToken.approve(this.governance.address, web3.utils.toWei("200", "ether"), { from: bob });
        await this.gmarsToken.approve(this.governance.address, web3.utils.toWei("200", "ether"), { from: carol });
        await this.gmarsToken.approve(this.governance.address, web3.utils.toWei("200", "ether"), { from: scot });

        await this.governance.castVote(0,web3.utils.toWei("100", "ether"),false,{ from: bob });
        await this.governance.castVote(0,web3.utils.toWei("100", "ether"),false,{ from: carol });
        await this.governance.castVote(0,web3.utils.toWei("100", "ether"),false,{ from: scot });

        await this.governance.castVote(1,web3.utils.toWei("100", "ether"),true,{ from: bob });
        await this.governance.castVote(1,web3.utils.toWei("100", "ether"),true,{ from: carol });
        await this.governance.castVote(1,web3.utils.toWei("100", "ether"),true,{ from: scot });
      
    });

    it('deposit & harvest', async () => {
        await this.marsAutoFarm.deposit(0,web3.utils.toWei("1000", "ether"),{ from: bob });
        await this.marsAutoFarm.deposit(1,web3.utils.toWei("1000", "ether"),{ from: bob });
        for (let i = 0; i < 100; ++i) {
            await time.advanceBlock();
        }
        await this.marsAutoFarm.deposit(0,web3.utils.toWei("1000", "ether"),{ from: carol });
        await this.marsAutoFarm.deposit(1,web3.utils.toWei("1000", "ether"),{ from: carol });
        for (let i = 0; i < 100; ++i) {
            await time.advanceBlock();
        }
        await this.marsAutoFarm.deposit(0,web3.utils.toWei("1000", "ether"),{ from: scot });
        await this.marsAutoFarm.deposit(1,web3.utils.toWei("1000", "ether"),{ from: scot });
        for (let i = 0; i < 100; ++i) {
            await time.advanceBlock();
        }
        await this.marsAutoFarm.deposit(0,0,{ from: scot });
        await this.marsAutoFarm.deposit(1,0,{ from: scot });
    });

    it('users info', async () => {
        
        console.log("bob : stakedWantTokens pool 0: ",
        web3.utils.fromWei(await this.marsAutoFarm.stakedWantTokens(0,bob)),
        " pool 1: ",web3.utils.fromWei(await this.marsAutoFarm.stakedWantTokens(1,bob)));
        console.log("carol : stakedWantTokens pool 0: ",
        web3.utils.fromWei(await this.marsAutoFarm.stakedWantTokens(0,carol)),
        " pool 1: ",web3.utils.fromWei(await this.marsAutoFarm.stakedWantTokens(1,carol)));
        console.log("scot : stakedWantTokens pool 0: ",
        web3.utils.fromWei(await this.marsAutoFarm.stakedWantTokens(0,scot)),
        " pool 1: ",web3.utils.fromWei(await this.marsAutoFarm.stakedWantTokens(1,scot)));

        console.log("bob : pendingReward pool 0: ",
        web3.utils.fromWei(await this.marsAutoFarm.pendingReward(0,bob)),
        " pool 1: ",web3.utils.fromWei(await this.marsAutoFarm.pendingReward(1,bob)));
        console.log("carol : pendingReward pool 0: ",
        web3.utils.fromWei(await this.marsAutoFarm.pendingReward(0,carol)),
        " pool 1: ",web3.utils.fromWei(await this.marsAutoFarm.pendingReward(1,carol)));
        console.log("scot : pendingReward pool 0: ",
        web3.utils.fromWei(await this.marsAutoFarm.pendingReward(0,scot)),
        " pool 1: ",web3.utils.fromWei(await this.marsAutoFarm.pendingReward(1,scot)));

    });

    it('withdraw', async () => {
        await this.marsAutoFarm.withdraw(0,web3.utils.toWei("100", "ether"),{ from: bob });
        await this.marsAutoFarm.withdraw(1,web3.utils.toWei("100", "ether"),{ from: bob });
        await this.marsAutoFarm.withdraw(0,web3.utils.toWei("100", "ether"),{ from: carol });
        await this.marsAutoFarm.withdraw(1,web3.utils.toWei("100", "ether"),{ from: carol });
        await this.marsAutoFarm.withdraw(0,web3.utils.toWei("100", "ether"),{ from: scot });
        await this.marsAutoFarm.withdraw(1,web3.utils.toWei("100", "ether"),{ from: scot });
    });

    it('withdraw all', async () => {
        await this.marsAutoFarm.withdraw(0,web3.utils.toWei("1000", "ether"),{ from: bob });
        await this.marsAutoFarm.withdraw(1,web3.utils.toWei("1000", "ether"),{ from: bob });
        await this.marsAutoFarm.withdraw(0,web3.utils.toWei("1000", "ether"),{ from: carol });
        await this.marsAutoFarm.withdraw(1,web3.utils.toWei("1000", "ether"),{ from: carol });
        await this.marsAutoFarm.withdraw(0,web3.utils.toWei("1000", "ether"),{ from: scot });
        await this.marsAutoFarm.withdraw(1,web3.utils.toWei("1000", "ether"),{ from: scot });
    });

});
'''
'''--- truffle-config.js ---
/**
 * Use this file to configure your truffle project. It's seeded with some
 * common settings for different networks and features like migrations,
 * compilation and testing. Uncomment the ones you need or modify
 * them to suit your project as necessary.
 *
 * More information about configuration can be found at:
 *
 * trufflesuite.com/docs/advanced/configuration
 *
 * To deploy via Infura you'll need a wallet provider (like @truffle/hdwallet-provider)
 * to sign your transactions before they're sent to a remote public node. Infura accounts
 * are available for free at: infura.io/register.
 *
 * You'll also need a mnemonic - the twelve word phrase the wallet uses to generate
 * public/private key pairs. If you're publishing your code to GitHub make sure you load this
 * phrase from a file you've .gitignored so it doesn't accidentally become public.
 *
 */

// const HDWalletProvider = require('@truffle/hdwallet-provider');
// const infuraKey = "fj4jll3k.....";
//
// const fs = require('fs');
// const mnemonic = fs.readFileSync(".secret").toString().trim();
const HDWalletProvider = require("@truffle/hdwallet-provider");
module.exports = {
  /**
   * Networks define how you connect to your ethereum client and let you set the
   * defaults web3 uses to send transactions. If you don't specify one truffle
   * will spin up a development blockchain for you on port 9545 when you
   * run `develop` or `test`. You can ask a truffle command to use a specific
   * network from the command line, e.g
   *
   * $ truffle test --network <network-name>
   */

  networks: {
    development: {
      networkCheckTimeout: 20000,
      host: "127.0.0.1",     // Localhost (default: none)
      port: 8545,            // Standard Ethereum port (default: none)
      network_id: "*",       // Any network (default: none)
      //network_id: 1,        // Ethereum public network
    // optional config values:
    // gas                  -
    // gasPrice             - use gas and gasPrice if creating type 0 transactions
    // maxFeePerGas         -
    // maxPriorityFeePerGas - use maxFeePerGas and maxPriorityFeePerGas if creating type 2 transactions (https://eips.ethereum.org/EIPS/eip-1559)
    // from - default address to use for any transaction Truffle makes during migrations
    // provider - web3 provider instance Truffle should use to talk to the Ethereum network.
    //          - function that returns a web3 provider instance (see below.)
    //          - if specified, host and port are ignored.
    // skipDryRun: - true if you don't want to test run the migration locally before the actual migration (default is false)
    // confirmations: 5, //- number of confirmations to wait between deployments (default: 0)
    // timeoutBlocks: - if a transaction is not mined, keep waiting for this number of blocks (default is 50)
    // deploymentPollingInterval: - duration between checks for completion of deployment transactions
    // disableConfirmationListener: - true to disable web3's confirmation listener
     },
     bscmain: {
       network_id: 56,
       networkCheckTimeout: 10000,
       provider: () => new HDWalletProvider({
         providerOrUrl: process.env.BSC_MAIN_RPC_URL,
         privateKeys: [process.env.PRIVATE_KEY_BSC]
       }),
       skipDryRun: false,
     },
     bsctest: {
       //provider: () => new HDWalletProvider([process.env.PRIVATE_KEY_BSC_TEST], process.env.INFURA_BSC),
       provider: () => new HDWalletProvider({
         providerOrUrl: process.env.BSC_TEST_RPC_URL,
         privateKeys: [process.env.PRIVATE_KEY_BSC]
       }),
       url: process.env.BSC_TEST_RPC_URL,
       network_id: 97
    }
    // Useful for testing. The `development` name is special - truffle uses it by default
    // if it's defined here and no other network is specified at the command line.
    // You should run a client (like ganache-cli, geth or parity) in a separate terminal
    // tab if you use this network and you must also set the `host`, `port` and `network_id`
    // options below to some value.
    //
    // development: {
    //  host: "127.0.0.1",     // Localhost (default: none)
    //  port: 8545,            // Standard Ethereum port (default: none)
    //  network_id: "*",       // Any network (default: none)
    // },
    // Another network with more advanced options...
    // advanced: {
    // port: 8777,             // Custom port
    // network_id: 1342,       // Custom network
    // gas: 8500000,           // Gas sent with each transaction (default: ~6700000)
    // gasPrice: 20000000000,  // 20 gwei (in wei) (default: 100 gwei)
    // from: <address>,        // Account to send txs from (default: accounts[0])
    // websocket: true        // Enable EventEmitter interface for web3 (default: false)
    // },
    // Useful for deploying to a public network.
    // NB: It's important to wrap the provider as a function.
    // ropsten: {
    // provider: () => new HDWalletProvider(mnemonic, `https://ropsten.infura.io/v3/YOUR-PROJECT-ID`),
    // network_id: 3,       // Ropsten's id
    // gas: 5500000,        // Ropsten has a lower block limit than mainnet
    // confirmations: 2,    // # of confs to wait between deployments. (default: 0)
    // timeoutBlocks: 200,  // # of blocks before a deployment times out  (minimum/default: 50)
    // skipDryRun: true     // Skip dry run before migrations? (default: false for public nets )
    // },
    // Useful for private networks
    // private: {
    // provider: () => new HDWalletProvider(mnemonic, `https://network.io`),
    // network_id: 2111,   // This network is yours, in the cloud.
    // production: true    // Treats this network as if it was a public net. (default: false)
    // }
  },

  // Set default mocha options here, use special reporters etc.
  mocha: {
    timeout: 10000000
  },

  // Configure your compilers
  compilers: {
    solc: {
       version: "0.6.12",    // Fetch exact version from solc-bin (default: truffle's version)
      // docker: true,        // Use "0.5.1" you've installed locally with docker (default: false)
       settings: {          // See the solidity docs for advice about optimization and evmVersion
        optimizer: {
          enabled: true,
          runs: 200
        },
        evmVersion: "istanbul"
       }
    }
  },
  plugins: [
    'truffle-plugin-verify'
  ],
  api_keys: {
    etherscan: process.env.BSCSCAN_API_KEY
  }

};

'''
'''--- waffle.json ---
{
    "compilerType": "solcjs",
    "compilerVersion": "0.6.12",
    "sourceDirectory": "./contracts",
    "outputDirectory": "./build"
  }
'''