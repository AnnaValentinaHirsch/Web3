*GitHub Repository "kkentup/near-design-market"*

'''--- .eslintrc.json ---
{
  "env": {
    "es2020": true,
    "browser": true,
    "node": true,
    "mocha": true
  }
}

'''
'''--- README.md ---
# near-design-farmers'-market
**developed by wife and husband**

**1**\. To run this project is easy, you need run the following commands

**1.1** "npm install"

**1.2** "npm start"

Then you can open http://localhost:3000/ to see the app. Smart contract ("designmarket.kentup.testnet") currently deployed on testnet is used by default.

**2**\. Smart contract is in folder "contract"

To compile the contract, you need change your directory to "contract" first. Then run "yarn build" and "yarn build".

Some test cases are added in "contract/\_\_test\_\_/", you can run "yarn test" to verify if the smart contracts work as expected.

**3**\. A little more about this project

**4**\. Some NEAR commands for your reference

**4.1** for deploying the smart contract

near create-account test.designmarket.testnet --masterAccount designmarket.testnet --initialBalance 10

near deploy --accountId test.designmarket.testnet --wasmFile build/market.wasm --initFunction init --initArgs '{"owner_id": "designmarket.testnet"}'

**4.2** for reviewing the currenct states

near view test.designmarket.testnet get_owner '{}'

near view test.designmarket.testnet get_designs '{}'

near view test.designmarket.testnet get_reports '{}'

near view test.designmarket.testnet get_pool_amount '{}'

near view test.designmarket.testnet get_offers_by_object_id '{"object_id": "design_1"}'

near view test.designmarket.testnet get_reports_by_object_id '{"object_id": "design_1"}'

**4.3** for adding a new design/offer/report

near call test.designmarket.testnet new_design '{"object_id": "design_1", "type": 1, "price": "100000000000000000000000", "image": "https://design.market/images/1", "deposit": "1000000000000000000000000" }' --accountId=client1.testnet --depositYocto=2000000000000000000000000

near call test.designmarket.testnet buy_design '{"object_id": "design_1"}' --depositYocto=100000000000000000000000 --accountId=client2.testnet

near call test.designmarket.testnet add_offer '{"object_id": "design_1"}' --depositYocto=1000000000000000000000000 --accountId=client3.testnet

near call test.designmarket.testnet new_report '{"object_id": "home_decor", "report_url": "report_1", "deposit": "500000000000000000000000"}' --depositYocto=1000000000000000000000000 --accountId=client4.testnet
'''
'''--- contract/__test__/test.ava.js ---
import { NEAR, Worker } from 'near-workspaces';
import test from 'ava';

const ONE_NEAR = "1000000000000000000000000";

test.beforeEach(async t => {
    // Init the worker and start a Sandbox server
    const worker = await Worker.init();

    // Prepare sandbox for tests, create accounts, deploy contracts, etc.
    const root = worker.rootAccount;

    // Create market account for contract deployment
    const market = await root.createSubAccount("market");

    // Deploy the design market contract.
    await market.deploy("./build/market.wasm");

    // Initialize the design market contract
    await root.call(market, "init", {owner_id: root.accountId});

    // Test users
    const ali = await root.createSubAccount("ali", {initialBalance: NEAR.parse('10 N').toJSON()});
    const bob = await root.createSubAccount("bob", {initialBalance: NEAR.parse('10 N').toJSON()});
    const cha = await root.createSubAccount("cha", {initialBalance: NEAR.parse('10 N').toJSON()});

    // Save state for test runs
    t.context.worker = worker;
    t.context.accounts = { root, market, ali, bob, cha};
});

// If the environment is reused, use test.after to replace test.afterEach
test.afterEach(async t => {
    await t.context.worker.tearDown().catch(error => {
        console.log('Failed to tear down the worker:', error);
    });
});

test("design market init test", async t => {
    const { root, market } = t.context.accounts;
    const designs = await market.view("get_designs", {});
    t.deepEqual(designs, []);

    const owner = await market.view("get_owner", {});
    t.is(owner, root.accountId);

    const pool = await market.view("get_pool_amount", {});
    t.is(pool, "0");

    const repors = await market.view("get_reports", {});
    t.deepEqual(designs, []);
});

test("add a new design object works", async t => {
    const { market, ali } = t.context.accounts;
    let attachedDeposit = "2 N";
    await ali.call(market, "new_design", {object_id: "design_1", type: 1, price: "10000000000000000", image: "image_link_1", deposit: ONE_NEAR}, {attachedDeposit});
    await ali.call(market, "new_design", {object_id: "design_2", type: 2, price: "10000000000000000", image: "image_link_2", deposit: ONE_NEAR}, {attachedDeposit});

    const designs = await market.view('get_designs', {});
    t.deepEqual(designs[0][1], {object_id: "design_1", type: 1, price: "10000000000000000", image: "image_link_1", offers: {}, on_sale: true, orig_owner: ali.accountId, owner: ali.accountId, copyright_deposit: ONE_NEAR, reports: 0, timeStamp: designs[0][1].timeStamp});
    t.deepEqual(designs[1][1], {object_id: "design_2", type: 2, price: "10000000000000000", image: "image_link_2", offers: {}, on_sale: true, orig_owner: ali.accountId, owner: ali.accountId, copyright_deposit: ONE_NEAR, reports: 0, timeStamp: designs[1][1].timeStamp});
});

test("buy a design object works", async t => {
    const { market, ali, bob } = t.context.accounts;
    let attachedDeposit = "2 N";
    await ali.call(market, "new_design", {object_id: "design_1", type: 1, price: "10000000000000000", image: "image_link_1", deposit: ONE_NEAR}, {attachedDeposit});

    let designs = await market.view('get_designs', {});
    t.deepEqual(designs[0][1], {object_id: "design_1", type: 1, price: "10000000000000000", image: "image_link_1", offers: {}, on_sale: true, orig_owner: ali.accountId, owner: ali.accountId, copyright_deposit: ONE_NEAR, reports: 0, timeStamp: designs[0][1].timeStamp});

    await bob.call(market, "buy_design", {object_id: "design_1"}, {attachedDeposit});

    designs = await market.view('get_designs', {});
    t.deepEqual(designs[0][1], {object_id: "design_1", type: 1, price: "10000000000000000", image: "image_link_1", offers: {}, on_sale: false, orig_owner: ali.accountId, owner: bob.accountId, copyright_deposit: ONE_NEAR, reports: 0, timeStamp: designs[0][1].timeStamp});
});

test("add a new offer works", async t => {
    const { market, ali, bob } = t.context.accounts;
    let offer = "1000000000000000000000000";
    let attachedDeposit = "2 N";
    await ali.call(market, "new_design", {object_id: "design_1", type: 1, price: "10000000000000000", image: "image_link_1", deposit: ONE_NEAR}, {attachedDeposit});

    let designs = await market.view('get_designs', {});
    t.deepEqual(designs[0][1], {object_id: "design_1", type: 1, price: "10000000000000000", image: "image_link_1", offers: {}, on_sale: true, orig_owner: ali.accountId, owner: ali.accountId, copyright_deposit: ONE_NEAR, reports: 0, timeStamp: designs[0][1].timeStamp});

    await bob.call(market, "add_offer", {object_id: "design_1", offer}, {attachedDeposit});

    designs = await market.view('get_designs', {});
    let cur_offers = {};
    cur_offers[bob.accountId] = offer;
    t.deepEqual(designs[0][1], {object_id: "design_1", type: 1, price: "10000000000000000", image: "image_link_1", offers: cur_offers, on_sale: true, orig_owner: ali.accountId, owner: ali.accountId, copyright_deposit: ONE_NEAR, reports: 0, timeStamp: designs[0][1].timeStamp});
    
    const offers = await market.view('get_offers_by_object_id', {object_id: "design_1"});
    t.deepEqual(offers, [{accountId: bob.accountId, offer}]);
});

test("add a new report works", async t => {
    const { root, market, ali, bob } = t.context.accounts;
    let attachedDeposit = "2 N";
    await ali.call(market, "new_design", {object_id: "design_1", type: 1, price: "10000000000000000", image: "image_link_1", deposit: ONE_NEAR}, {attachedDeposit});

    let designs = await market.view('get_designs', {});
    t.deepEqual(designs[0][1], {object_id: "design_1", type: 1, price: "10000000000000000", image: "image_link_1", offers: {}, on_sale: true, orig_owner: ali.accountId, owner: ali.accountId, copyright_deposit: ONE_NEAR, reports: 0, timeStamp: designs[0][1].timeStamp});

    await bob.call(market, "new_report", {object_id: "design_1", report_url: "report_1", deposit: ONE_NEAR}, {attachedDeposit});

    designs = await market.view('get_designs', {});
    t.deepEqual(designs[0][1], {object_id: "design_1", type: 1, price: "10000000000000000", image: "image_link_1", offers: {}, on_sale: true, orig_owner: ali.accountId, owner: ali.accountId, copyright_deposit: ONE_NEAR, reports: 1, timeStamp: designs[0][1].timeStamp});

    let reports = await market.view("get_reports", {});
    t.deepEqual(reports[0][1], {object_id: "design_1", reporter: bob.accountId, report: "report_1", report_id: 0, approved: false, proof: "", deposit: ONE_NEAR, timeStamp: reports[0][1].timeStamp});
    
    reports = await market.view('get_reports_by_object_id', {object_id: "design_1"});
    t.deepEqual(reports[0], {object_id: "design_1", reporter: bob.accountId, report: "report_1", report_id: 0, approved: false, proof: "", deposit: ONE_NEAR, timeStamp: reports[0].timeStamp});

    await root.call(market, 'approve_report', {report_id: "design_1R0", proof: "proof_1"}, {attachedDeposit});

    reports = await market.view('get_reports_by_object_id', {object_id: "design_1"});
    t.deepEqual(reports[0], {object_id: "design_1", reporter: bob.accountId, report: "report_1", report_id: 0, approved: true, proof: "proof_1", deposit: "0", timeStamp: reports[0].timeStamp});

    const pool = await market.view("get_pool_amount", {});
    t.is(pool, "25000000000000000000000");
});

'''
'''--- contract/babel.config.json ---
{
    "plugins": [
        "near-sdk-js/lib/build-tools/near-bindgen-exporter",
        ["@babel/plugin-proposal-decorators", {"version": "legacy"}]
    ],
    "presets": ["@babel/preset-typescript"]
}

'''
'''--- contract/jsconfig.json ---
{
    "compilerOptions": {
	"experimentalDecorators": true,
    },
    "exclude": [
	"node_modules"
    ],
}

'''
'''--- contract/package.json ---
{
  "name": "smartcontract",
  "version": "1.0.0",
  "main": "index.js",
  "author": "Kent",
  "license": "MIT",
  "type": "module",
  "scripts": {
    "build": "near-sdk-js build src/index.ts build/market.wasm",
    "test": "ava"
  },
  "dependencies": {
    "lodash-es": "^4.17.21",
    "near-sdk-js": "^0.5.0"
  },
  "devDependencies": {
    "@types/lodash-es": "^4.17.6",
    "ava": "^5.0.1",
    "near-workspaces": "^3.2.2",
    "typescript": "^4.8.0"
  }
}

'''
'''--- contract/src/design.ts ---
export class Design {
    object_id: string;
    // 0: Jewelry, 1: Custume, 2: Furniture, 3: Electronic Devices, 4: Accessories
    type: number;
    orig_owner: string;
    owner: string;
    on_sale: boolean;
    price: string;
    image: string;
    reports: number;
    copyright_deposit: string;
    offers: { [accountId: string] : string };
    timeStamp: string;

    constructor(
        {
            owner,
            object_id,
            type,
            price,
            image,
            offers,
            deposit,
            timeStamp
        }:{
            owner: string,
            object_id: string,
            type: number,
            price: string,
            image: string,
            offers: { [accountId: string] : string },
            deposit: string,
            timeStamp: string
        }) {
        this.object_id = object_id;
        this.type = type;
        this.orig_owner = owner;
        this.owner = owner;
        this.on_sale = true;
        this.price = price;
        this.image = image;
        this.reports = 0;
        this.copyright_deposit = deposit;
        this.offers = offers;
        this.timeStamp = timeStamp;
    }
}

'''
'''--- contract/src/index.ts ---
import { NearBindgen, near, call, view, UnorderedMap, assert, initialize } from 'near-sdk-js';
import { create_design, replace_design, get_design, get_design_owned, get_design_orig_owned, get_design_no_deposit} from './utils';
import { purchase_process, process_design_deposit, process_offer, transfer_near } from './utils';
import { create_report, get_report, get_report_owned, get_report_no_deposit, process_report_deposit, process_report_approval } from './utils';

// lock design copyright deposit for 30 days
const MIN_COPYRIGHT_LOCK_TIME = "2_592_000_000_000_000";

@NearBindgen({ requireInit: true })
export class Contract {
    // owner of the contract
    owner_id: string;
    // designs: object_id -> Design
    designs: UnorderedMap;
    // reports: object_id -> Report
    reports: UnorderedMap;
    // treasury
    treasury_pool: string;

    constructor() {
        this.owner_id = '';
        this.designs = new UnorderedMap("designs");
        this.reports = new UnorderedMap("reports");
        this.treasury_pool = "0";
    }

    @initialize({})
    init({owner_id} : {owner_id: string}) {
        this.owner_id = owner_id;
        this.designs = new UnorderedMap("designs");
        this.reports = new UnorderedMap("reports");
        this.treasury_pool = "0";
    }

    @call({ payableFunction: true })
    // put new design
    new_design({object_id, type, price, image, deposit} : {object_id: string, type: number, price: string, image: string, deposit: string}) {
        //measure the initial storage being used on the contract
        let initialStorageUsage = near.storageUsage();

        let offers: { [accountId: string] : string } = {};
        let design = create_design({contract: this, object_id, type, price, image, offers, deposit, timeStamp: near.blockTimestamp()});
        if (design == null) {
            throw Error("Design is not created successfully");
        }

        this.designs.set(object_id, design);

        //calculate the required storage which was the used
        let requiredStorageInBytes = near.storageUsage().valueOf() - initialStorageUsage.valueOf();
        process_design_deposit({design: design, storageUsed: requiredStorageInBytes});
    }

    @call({ payableFunction: true })
    // put new design
    buy_design({object_id} : {object_id: string}) {
        let design = get_design({contract: this, object_id});
        if (BigInt(design.price) > near.attachedDeposit().valueOf()) {
            throw Error("attached deposit must be greater than the design's price");
        }
        assert(design.on_sale == true, "Design is not on sale");
        let fee = purchase_process({design: design, buyer: near.predecessorAccountId(), offer: near.attachedDeposit().valueOf()});
        let new_pool = fee + BigInt(this.treasury_pool);
        this.treasury_pool = new_pool.toString();
        this.designs.set(object_id, design);
    }

    @call({ payableFunction: true })
    // update sale status
    transfer_design({object_id, new_owner} : {object_id: string, new_owner: string}) {
        let design = get_design_owned({contract: this, object_id});
        design.owner = new_owner;
        this.designs.set(object_id, design);
    }

    @call({ payableFunction: true })
    // withdraw design copyright deposit
    withdraw_design_deposit({object_id} : {object_id: string}) {
        let design = get_design_orig_owned({contract: this, object_id});
        assert(BigInt(design.copyright_deposit) > 0, "No Deposit for this design object");
        assert(BigInt(design.timeStamp) + BigInt(MIN_COPYRIGHT_LOCK_TIME) <= near.blockTimestamp(), "Deposit is not available to be withdrawn");
        transfer_near(near.predecessorAccountId(), BigInt(design.copyright_deposit));
        design.copyright_deposit = "0";
        this.designs.set(object_id, design);
    }

    @call({ payableFunction: true })
    // update sale price
    update_price({object_id, price} : {object_id: string, price: string}) {
        let design = get_design_owned({contract: this, object_id});
        design.price = price;
        this.designs.set(object_id, design);
    }

    @call({ payableFunction: true })
    // update sale status
    update_sale({object_id, on_sale} : {object_id: string, on_sale: boolean}) {
        let design = get_design_owned({contract: this, object_id});
        assert(design.on_sale != on_sale, "No need to update sale status");
        design.on_sale = on_sale;
        this.designs.set(object_id, design);
    }

    @call({ payableFunction: true })
    // place an offer on a specific design
    add_offer({object_id, offer} : {object_id: string, offer: string}) {
        let design = get_design({contract: this, object_id});
        let bidder = near.predecessorAccountId();
        assert(bidder != design.owner, "Owner cannot put an offer on her/his own Design");
        let attachedDeposit = near.attachedDeposit().valueOf();
        assert(BigInt(offer) > 0, "Offer must be non-zero");
        //measure the initial storage being used on the contract
        let initialStorageUsage = near.storageUsage();
        let new_offers: { [accountId: string] : string } = {};
        Object.entries(design.offers).forEach(([key, value], index) => {
            new_offers[key] = value;
        });
        new_offers[bidder] = offer;
        let new_design = replace_design({design, offers: new_offers});
        this.designs.set(object_id, new_design);
        //calculate the required storage which was the used
        let requiredStorageInBytes = near.storageUsage().valueOf() - initialStorageUsage.valueOf();
        process_offer({offer, storageUsed: requiredStorageInBytes});
    }

    @call({ payableFunction: true })
    // remove an offer on a specific design
    remove_offer({object_id} : {object_id: string}) {
        let design = get_design({contract: this, object_id});
        let bidder = near.predecessorAccountId();
        let new_offers: { [accountId: string] : string } = {};
        Object.entries(design.offers).forEach(([key, value], index) => {
            if (key != bidder) {
                new_offers[key] = value;
            } else {
                transfer_near(bidder, BigInt(value));
            }
        });
        let new_design = replace_design({design, offers: new_offers});
        this.designs.set(object_id, new_design);
    }

    @call({ payableFunction: true })
    // take an offer on a specific design
    take_offer({object_id, bidder} : {object_id: string, bidder: string}) {
        let design = get_design_owned({contract: this, object_id});
        let new_offers: { [accountId: string] : string } = {};
        let offer = "0";
        Object.entries(design.offers).forEach(([key, value], index) => {
            if (key != bidder) {
                new_offers[key] = value;
            } else {
                offer = value;
            }
        });
        let new_design = replace_design({design, offers: new_offers});
        this.designs.set(object_id, new_design);
        purchase_process({design: new_design, buyer: bidder, offer: BigInt(offer)});
    }

    @call({ payableFunction: true })
    // add new report
    new_report({object_id, report_url, deposit} : {object_id: string, report_url: string, deposit: string}) {
        let design = get_design({contract: this, object_id});
        //measure the initial storage being used on the contract
        let initialStorageUsage = near.storageUsage();

        let report = create_report({contract: this, object_id, report_url, id: design.reports, timeStamp: near.blockTimestamp(), deposit});
        if (report == null) {
            throw Error("Report is not created successfully");
        }
        let report_id = object_id + "R" + design.reports.toString();
        this.reports.set(report_id, report);
        design.reports += 1;
        this.designs.set(object_id, design);

        //calculate the required storage which was the used
        let requiredStorageInBytes = near.storageUsage().valueOf() - initialStorageUsage.valueOf();
        process_report_deposit({design, report, storageUsed: requiredStorageInBytes});
    }

    @call({ payableFunction: true })
    // update sale price
    update_report({report_id, report_url} : {report_id: string, report_url: string}) {
        let design = get_report_owned({contract: this, report_id});
        design.report = report_url;
        this.designs.set(report_id, design);
    }

    @call({ payableFunction: true })
    // approve report and reward the reporter
    approve_report({report_id, proof} : {report_id: string, proof: string}) {
        let report = get_report({contract: this, report_id});
        let object_id = report.object_id;
        let design = get_design({contract: this, object_id});
        let approver = near.predecessorAccountId();
        assert(approver == this.owner_id, "Only the contract onwer can approve a report");
        let fee = process_report_approval({report, proof, design});
        let new_pool = fee + BigInt(this.treasury_pool);
        this.treasury_pool = new_pool.toString();
        this.designs.set(object_id, design);
        this.reports.set(report_id, report);
    }

    @call({ payableFunction: true })
    // cancel report and deposit in treasury
    deny_report({report_id, proof} : {report_id: string, proof: string}) {
        let report = get_report({contract: this, report_id});
        let approver = near.predecessorAccountId();
        assert(approver == this.owner_id, "Only the contract onwer can deny a report");
        report.proof = proof;
        report.deposit = "0";
        this.reports.set(report_id, report);
    }

    @call({ payableFunction: true })
    // distribute NEAR in treasury
    transfer_deposit({receiver, amount} : {receiver: string, amount: string}) {
        let caller = near.predecessorAccountId();
        assert(caller == this.owner_id, "Only contract owner can do transfer");
        assert(BigInt(amount) <= BigInt(this.treasury_pool), `No enough deposit ${this.treasury_pool} in treasury`);
        transfer_near(receiver, BigInt(amount));
    }

    @view({})
    // returns the owner of the contract
    get_owner() {
        return this.owner_id;
    }

    @view({})
    // returns the amount of NEAR in treasure pool
    get_pool_amount() {
        return this.treasury_pool;
    }

    @view({})
    // returns the number of designs which are on sale
    get_designs() {
        return this.designs.toArray();
    }

    @view({})
    //returns the number of sales for a given account (result is a string)
    get_offers_by_object_id({object_id} : {object_id: string}) {
        let design = get_design_no_deposit({contract: this, object_id});
        const output = Object.keys(design.offers).map((key) => {
            return {
              accountId: key,
              offer: design.offers[key]
            }
        });
        return output;
    }

    @view({})
    //returns the number of sales for a given account (result is a string)
    get_offer_by_acct_id({object_id, acct_id} : {object_id: string, acct_id: string}) {
        let design = get_design_no_deposit({contract: this, object_id});
        Object.entries(design.offers).forEach(([key, value], index) => {
            if (key == acct_id) {
                return value;
            }
        });
        return "0";
    }

    @view({})
    // returns all the reports
    get_reports() {
        return this.reports.toArray();
    }

    @view({})
    //returns the number of sales for a given account (result is a string)
    get_reports_by_object_id({object_id} : {object_id: string}) {
        let design = get_design_no_deposit({contract: this, object_id});
        if (design.reports == 0) {
            return [];
        }
        let reports = [];
        for (let i = 0; i < design.reports; i++) {
            let report_id = object_id + "R" + i.toString();
            let report = get_report_no_deposit({contract: this, report_id});
            reports.push(report);
        }
        return reports;
    }
}
'''
'''--- contract/src/report.ts ---
export class Report {
    reporter: string;
    object_id: string;
    deposit: string;
    report: string;
    report_id: number;
    approved: boolean;
    proof: string;
    timeStamp: string;

    constructor(
        {
            reporter,
            object_id,
            report,
            report_id,
            timeStamp,
            deposit
        }:{
            reporter: string,
            object_id: string,
            report: string,
            report_id: number,
            timeStamp: string,
            deposit: string
        }) {
        this.reporter = reporter;
        this.object_id = object_id;
        this.report = report;
        this.report_id = report_id;
        this.approved = false;
        this.proof = "";
        this.timeStamp = timeStamp;
	this.deposit = deposit;
    }
}

'''
'''--- contract/src/utils.ts ---
import { assert, near } from "near-sdk-js";
import { Design } from "./design";
import { Contract } from "./index";
import { Report } from "./report";

// 1 NEAR
const MIN_COPYRIGHT_DEPOSIT = "1000000000000000000000000";

// make sure the user attached at least 1 yoctoNEAR
// for security purpose
function assert_min_one_yocto() {
    assert(near.attachedDeposit().valueOf() >= 1, "Requires attached deposit of at least 1 yoctoNEAR");
}

// transfer NEAR to another account
export function transfer_near(account: string, amount: bigint) {
    const promise = near.promiseBatchCreate(account);
    near.promiseBatchActionTransfer(promise, amount);
}

// create the design of specific id
// shouldn't make changes to the design object itself after return
export function create_design({
    contract,
    object_id,
    type,
    price,
    image,
    offers,
    deposit,
    timeStamp
}:{
    contract: Contract,
    object_id: string
    type: number,
    price: string,
    image: string,
    offers: { [accountId: string] : string },
    deposit: string,
    timeStamp: bigint
}): Design {
    let design = contract.designs.get(object_id);
    assert(design == null, "Design already exists on market");

    let owner = near.predecessorAccountId();
    assert(BigInt(deposit) >= BigInt(price) / 5n, "Copyright Deposit must be at least 20% of the object price");
    return new Design({owner, object_id, type, price, image, offers, deposit, timeStamp: timeStamp.toString()});
}

// create a new design object for "offer" change
// shouldn't make changes to the design object itself after return
export function replace_design({
    design,
    offers
}:{
    design: Design,
    offers: { [accountId: string] : string }
}): Design {
    let new_design = new Design({owner: design.owner, object_id: design.object_id, type: design.type, price: design.price, image: design.image, offers, deposit: design.copyright_deposit, timeStamp: design.timeStamp});
    if (new_design == null) {
        throw Error("Design is not created successfully");
    }
    new_design.orig_owner = design.orig_owner;
    return new_design;
}

// return the design only if the caller is the owner
export function get_design_owned({
    contract,
    object_id
}:{
    contract: Contract,
    object_id: string
}): Design {
    assert_min_one_yocto();

    let design = contract.designs.get(object_id) as Design;
    assert(design != null, `Design with ID ${object_id} doesn't exist`);

    let owner = near.predecessorAccountId();
    assert(owner == design.owner, "only the owner of the design can make changes");
    return design;
}

// return the design only if the caller is the original owner
export function get_design_orig_owned({
    contract,
    object_id
}:{
    contract: Contract,
    object_id: string
}): Design {
    assert_min_one_yocto();

    let design = contract.designs.get(object_id) as Design;
    assert(design != null, `Design with ID ${object_id} doesn't exist`);

    let owner = near.predecessorAccountId();
    assert(owner == design.orig_owner, "only the original owner of the sale can make changes");
    return design;
}

// return the design of specific id
// should only make changes for "purchase", "offer" and "report" after return
export function get_design({
    contract,
    object_id
}:{
    contract: Contract,
    object_id: string
}): Design {
    assert_min_one_yocto();

    let design = contract.designs.get(object_id) as Design;
    assert(design != null, `Design with ID ${object_id} doesn't exist`);
    return design;
}

// return the design of specific id
// should only be called in "view" functions
export function get_design_no_deposit({
    contract,
    object_id
}:{
    contract: Contract,
    object_id: string
}): Design {
    let design = contract.designs.get(object_id) as Design;
    assert(design != null, `Design with ID ${object_id} doesn't exist`);
    return design;
}

// process the initial deposit based on the amount of storage that was used up and copyright protection
export function process_design_deposit({ design, storageUsed} : {design: Design, storageUsed: bigint}) {
    //get how much it would cost to store the information
    let requiredCost = storageUsed * near.storageByteCost().valueOf()
    //get the attached deposit
    let attachedDeposit = near.attachedDeposit().valueOf();

    //make sure that the attached deposit is greater than or equal to the required deposit
    assert(
        (BigInt(MIN_COPYRIGHT_DEPOSIT) <= BigInt(design.copyright_deposit)) && (requiredCost + BigInt(design.copyright_deposit) <= attachedDeposit),
        `Must attach ${requiredCost + BigInt(MIN_COPYRIGHT_DEPOSIT)} yoctoNEAR to cover storage and copyright protection fee`
    );

    //get amount of refund
    let refund = attachedDeposit - requiredCost - BigInt(design.copyright_deposit);
    near.log(`Refunding ${refund} yoctoNEAR`);

    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount
    if (refund > 1) {
        // Send the money to the beneficiary
        transfer_near(near.predecessorAccountId(), refund);
    }
}

// process the deposit based on offer and the amount of storage that was used up
export function process_offer({ offer, storageUsed} : {offer: string, storageUsed: bigint}) {
    //get how much it would cost to store the information
    let requiredCost = storageUsed * near.storageByteCost().valueOf()
    //get the attached deposit
    let attachedDeposit = near.attachedDeposit().valueOf();

    //make sure that the attached deposit is greater than or equal to the required deposit
    assert(
        requiredCost + BigInt(offer) <= attachedDeposit,
        `Must attach ${requiredCost + BigInt(offer)} yoctoNEAR to cover storage and offer`
    );

    //get amount of refund
    let refund = attachedDeposit - requiredCost - BigInt(offer);
    near.log(`Refunding ${refund} yoctoNEAR`);

    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount
    if (refund > 1) {
        // Send the money to the beneficiary
        transfer_near(near.predecessorAccountId(), refund);
    }
}

// calculate royalty, 5%
function get_royalty(price: bigint): bigint {
    return price / 20n;
}

// calculate platform fee, 2.5%
function get_fee(price: bigint): bigint {
    return price / 40n;
}

// process the purchase
export function purchase_process({
    design,
    buyer,
    offer,
}: {
    design: Design,
    buyer: string,
    offer: bigint
}): bigint {
    let royalty = get_royalty(offer);
    let fee = get_fee(offer);
    transfer_near(design.orig_owner, royalty);
    transfer_near(design.owner, offer - royalty - fee);
    design.on_sale = false;
    design.owner = buyer;
    return fee;
}

// return the report of specific id
// shouldn't make changes to the design object itself after return
export function create_report({
    contract,
    object_id,
    report_url,
    id,
    timeStamp,
    deposit
}:{
    contract: Contract,
    object_id: string,
    report_url: string,
    id: number,
    timeStamp: bigint,
    deposit: string
}): Report {
    let report_id = object_id + id.toString();
    let report = contract.reports.get(report_id);
    assert(report == null, "Report already exists on market");

    let owner = near.predecessorAccountId();
    return new Report({reporter: owner, object_id, report: report_url, report_id: id, timeStamp: timeStamp.toString(), deposit});
}

// return the report only if the caller is the owner
export function get_report_owned({
    contract,
    report_id
}:{
    contract: Contract,
    report_id: string
}): Report {
    assert_min_one_yocto();

    let report = contract.reports.get(report_id) as Report;
    assert(report != null, `Report with ID ${report_id} doesn't exist`);

    let owner = near.predecessorAccountId();
    assert(owner == report.reporter, "only the owner of the report can make changes");

    return report;
}

// return the report of specific id
// should only make changes for "approve" and "deny" after return
export function get_report({
    contract,
    report_id
}:{
    contract: Contract,
    report_id: string
}): Report {
    assert_min_one_yocto();

    let report = contract.reports.get(report_id) as Report;
    assert(report != null, `Report with ID ${report_id} doesn't exist`);

    return report;
}

// return the report of specific id
// should only be called in "view" functions
export function get_report_no_deposit({
    contract,
    report_id
}:{
    contract: Contract,
    report_id: string
}): Design {
    let design = contract.reports.get(report_id) as Design;
    assert(design != null, `Report with ID ${report_id} doesn't exist`);
    return design;
}

// process the approval of speicific report
export function process_report_approval({
    report,
    proof,
    design
}:{
    report: Report,
    proof: string,
    design: Design
}) : bigint {
    report.approved = true;
    report.proof = proof;
    let fee = get_fee(BigInt(design.copyright_deposit));
    transfer_near(report.reporter, BigInt(report.deposit) + BigInt(design.copyright_deposit) - fee);
    design.copyright_deposit = "0";
    report.deposit = "0";
    return fee;
}

// process the initial deposit based on the amount of storage that was used up and copyright protection
export function process_report_deposit({ design, report, storageUsed} : {design: Design, report: Report, storageUsed: bigint}) {
    //get how much it would cost to store the information
    let requiredCost = storageUsed * near.storageByteCost().valueOf();
    //get the attached deposit
    let attachedDeposit = near.attachedDeposit().valueOf();

    //make sure that the attached deposit is greater than or equal to half the design price
    assert((BigInt(design.copyright_deposit) / 2n) <= BigInt(report.deposit),
        `Deposit cannot be less than ${BigInt(design.copyright_deposit) / 2n} yoctoNEAR`
    );
    assert(requiredCost + BigInt(report.deposit) <= attachedDeposit,
        `Must attach ${requiredCost + BigInt(MIN_COPYRIGHT_DEPOSIT)} yoctoNEAR to cover storage and report deposit fee`
    );

    //get the copyright protection amount
    let refund = attachedDeposit - requiredCost - BigInt(report.deposit);
    near.log(`Refunding ${refund} yoctoNEAR`);

    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount
    if (refund > 1) {
        // Send the money to the beneficiary
        transfer_near(near.predecessorAccountId(), refund);
    }
}

// refund the initial deposit based on the amount of storage that was used up
export function refund_deposit(storageUsed: bigint) {
    //get how much it would cost to store the information
    let requiredCost = storageUsed * near.storageByteCost().valueOf()
    //get the attached deposit
    let attachedDeposit = near.attachedDeposit().valueOf();

    //make sure that the attached deposit is greater than or equal to the required cost
    assert(
        requiredCost <= attachedDeposit,
        `Must attach ${requiredCost} yoctoNEAR to cover storage`
    );

    //get the refund amount from the attached deposit - required cost
    let refund = attachedDeposit - requiredCost;
    near.log(`Refunding ${refund} yoctoNEAR`);

    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount
    if (refund > 1) {
        // Send the money to the beneficiary
        transfer_near(near.predecessorAccountId(), refund);
    }
}

'''
'''--- contract/tsconfig.json ---
{
    "compilerOptions": {
	"experimentalDecorators": true,
	"target": "es2020",
	"moduleResolution": "node",
	"noEmit": true
    },
    "exclude": [
	"node_modules"
    ],
}

'''
'''--- package.json ---
{
  "name": "near-design-market",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.10.5",
    "@emotion/styled": "^11.10.5",
    "@mui/material": "^5.10.14",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "assert": "^2.0.0",
    "bootstrap": "^5.2.1",
    "bootstrap-icons": "^1.9.1",
    "buffer": "^6.0.3",
    "near-api-js": "^1.1.0",
    "near-sdk-js": "^0.5.0",
    "react": "^18.2.0",
    "react-bootstrap": "^2.5.0",
    "react-dom": "^18.2.0",
    "react-icons": "^4.6.0",
    "react-scripts": "5.0.1",
    "react-toastify": "^9.0.8",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
.cover {
    background-image: radial-gradient( circle farthest-corner at 10% 20%,
    #35D07F 0%, #2aa666 47.7%, #207d4c 92.3% );
    border-radius: .5em;
}
.vh-80 {
    height: 80vh!important;
}
'''
'''--- src/App.js ---
import React, { useEffect, useCallback, useState } from "react";
import { Container, Nav } from "react-bootstrap";
import { login, logout, accountBalance } from "./utils/near";
import Wallet from "./components/Wallet";
import { Notification } from "./components/utils/Notifications";
import Designs from "./components/marketplace/Designs";
import Cover from "./components/utils/Cover";
import coverImg from "./images/cover.jpg";
import "./App.css";

const App = function AppWrapper() {
    const account = window.walletConnection.account();

    const [balance, setBalance] = useState("0");

    const getBalance = useCallback(async () => {
        if (account.accountId) {
            setBalance(await accountBalance());
        }
    });

    useEffect(() => {
        getBalance();
    }, [getBalance]);

    return (
        <div className="background2">
            <header></header>
            <Notification />
            {account.accountId ? (
                <Container fluid="md">
                    <Nav className="justify-content-end pt-3 pb-5">
                        <Nav.Item>
                            <Wallet
                                address={account.accountId}
                                amount={balance}
                                symbol="NEAR"
                                logout={logout}
                            />
                        </Nav.Item>
                    </Nav>
                    <main>
                        <Designs account={account.accountId}/>
                    </main>
                </Container>
            ) : (
                <Cover name="Design Farmers' Market" login={login} coverImg={coverImg} />
            )}
        </div>
    );
};

export default App;

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/components/Wallet.js ---
import React from "react";
import { Dropdown, Stack, Spinner } from "react-bootstrap";
import { IoFingerPrint } from "react-icons/io5";

const Wallet = ({ address, amount, symbol, logout }) => {
    if (address) {
        return (
            <>
                <Dropdown>
                    <Dropdown.Toggle
                        variant="light"
                        align="end"
                        id="dropdown-basic"
                        className="d-flex align-items-center border rounded-pill py-1"
                    >
                        {amount ? (
                            <>
                                {amount} <span className="ms-1"> {symbol}</span>
                            </>
                        ) : (
                            <Spinner animation="border" size="sm" className="opacity-25" />
                        )}
                    </Dropdown.Toggle>

                    <Dropdown.Menu className="shadow-lg border-0">
                        <Dropdown.Item
                            href={`https://explorer.testnet.near.org/accounts/${address}`}
                            target="_blank"
                        >
                            <Stack direction="horizontal" gap={2}>
                                <i className="bi bi-person-circle fs-4" />
                                <span className="font-monospace">{address}</span>
                            </Stack>
                        </Dropdown.Item>

                        <Dropdown.Divider />
                        <Dropdown.Item
                            as="button"
                            className="d-flex align-items-center"
                            onClick={() => {
                                logout();
                            }}
                        >
                            <i className="bi bi-box-arrow-right me-2 fs-4" />
                            Disconnect
                        </Dropdown.Item>
                    </Dropdown.Menu>
                </Dropdown>
            </>
        );
    }

    return null;
};

export default Wallet;

'''
'''--- src/components/marketplace/AddDesign.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
import { IconButton } from "@mui/material";
import { FcIdea } from "react-icons/fc";

const AddDesign = ({ save }) => {
    const [objectId, setObjectId] = useState("");
    const [image, setImage] = useState("");
    const [type, setType] = useState(0);
    const [price, setPrice] = useState("");
    const [deposit, setDeposit] = useState("");
    const isFormFilled = () => objectId && image && type && price && deposit;

    const [show, setShow] = useState(false);

    const handleClose = () => {
        setShow(false);
        setObjectId("");
        setImage("");
        setPrice("");
        setType(0);
        setDeposit("");
    }
    const handleShow = () => setShow(true);

    return (
        <div>
            <IconButton onClick={handleShow}>
                <FcIdea size={60} />
            </IconButton>

            <Modal show={show} onHide={handleClose} centered>
                <Modal.Header closeButton className="new-add-card-head">
                    <Modal.Title>Post New Design</Modal.Title>
                </Modal.Header>
                <Form>
                    <Modal.Body className="new-add-card">
                        <FloatingLabel
                            controlId="inputObjectId"
                            label="Design object Id"
                            className="mb-3"
                        >
                            <Form.Control
                                type="text"
                                onChange={(e) => {
                                    setObjectId(e.target.value);
                                }}
                                placeholder="Enter object ID of design"
                            />
                        </FloatingLabel>
                        <FloatingLabel
                            controlId="inputUrl"
                            label="Image URL"
                            className="mb-3"
                        >
                            <Form.Control
                                type="text"
                                placeholder="Image URL"
                                onChange={(e) => {
                                    setImage(e.target.value);
                                }}
                            />
                        </FloatingLabel>
                        <FloatingLabel
                            controlId="inputType"
                            label="Design Type"
                            className="mb-3"
                        >
                            <Form.Select
                                type="text"
                                placeholder="Design Type"
                                onChange={(e) => {
                                    setType(e.target.value);
                                }}
                            >
                                // 0: Jewelry, 1: Custume, 2: Furniture, 3: Electronic Devices, 4: Accessories
                                <option>Please select a design type</option>
                                <option value="0">Jewelry</option>
                                <option value="1">Custume</option>
                                <option value="2">Furniture</option>
                                <option value="3">Electronic Devices</option>
                                <option value="4">Accessories</option>
                            </Form.Select>
                        </FloatingLabel>
                        <FloatingLabel
                            controlId="inputPrice"
                            label="Price"
                            className="mb-3"
                        >
                            <Form.Control
                                type="text"
                                placeholder="Price"
                                onChange={(e) => {
                                    setPrice(e.target.value);
                                }}
                            />
                        </FloatingLabel>
                        <FloatingLabel
                            controlId="inputPrice"
                            label="Copyright Deposit"
                            className="mb-3"
                        >
                            <Form.Control
                                type="text"
                                placeholder="Copyright Deposit"
                                onChange={(e) => {
                                    setDeposit(e.target.value);
                                }}
                            />
                        </FloatingLabel>
                    </Modal.Body>
                </Form>
                <Modal.Footer className="new-add-card">
                    <Button
                        variant="dark"
                        disabled={!isFormFilled()}
                        onClick={() => {
                            save({
                                objectId,
                                type,
                                price,
                                image,
                                deposit,
                            });
                            handleClose();
                        }}
                    >
                        PUBLISH
                    </Button>
                </Modal.Footer>
            </Modal>
        </div>
    );
};

AddDesign.propTypes = {
    save: PropTypes.func.isRequired,
};

export default AddDesign;

'''
'''--- src/components/marketplace/Design.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { utils } from "near-api-js";
import { Card, Button, Col, Badge, Stack } from "react-bootstrap";

const Design = ({ design, buy, putOffer, takeOffer, account }) => {
    const { object_id, type, orig_owner, owner, reports, on_sale, price, image, offers } = design;

    const [newOffer, setNewOffer] = useState("");

    const offerExist = () => Object.keys(offers).length > 0;

    const isOwner = () => account == owner;

    const getPurchaseText = () => {
        let purchaseText;
        if (isOwner()) {
            purchaseText = "Download design files";
        } else {
            purchaseText = `Buy for ${utils.format.formatNearAmount(price)} NEAR`;
        }
        return purchaseText;
    }

    const getOfferText = () => {
        let offerText;
        if (Object.keys(offers).length == 0) {
            offerText = "NO offer available";
        } else {
            console.log(getTopBidder().top_offer);
            offerText = `Take top offer for \
                ${utils.format.formatNearAmount((getTopBidder().top_offer))} \
                NEAR`;
        }
        return offerText;
    }

    const getTypeText = () => {
        let typeText;
        // 0: Jewelry, 1: Custume, 2: Furniture, 3: Electronic Devices, 4: Accessories
        if (type == 0) {
            typeText = "Jewelry";
        } else if (type == 1) {
            typeText = "Custume";
        } else if (type == 2) {
            typeText = "Furniture";
        } else if (type == 3) {
            typeText = "Electronic Devices";
        } else {
            typeText = "Accessories";
        }
        return typeText;
    }

    const getReportText = () => {
        let reportText;
        if (reports == 0) {
            reportText = "NO reports";
        } else if (reports == 1) {
            reportText = `${reports} report`;
        } else {
            reportText = `${reports} reports`;
        }

        return reportText;
    }

    const triggerBuy = () => {
        buy(object_id, price, isOwner());
    };

    const triggerPutOffer = () => {
        console.log(object_id)
        console.log(newOffer)
        putOffer(object_id, newOffer);
    };

    // function to select the account who put the top offer
    const getTopBidder = () => {
        let top_bidder = "";
        let top_offer = "0";
        for (const [bidder, offer] of Object.entries(offers)) {
            if (BigInt(offer) > BigInt(top_offer)) {
                top_offer = offer;
                top_bidder = bidder;
            }
        }
        return {top_bidder, top_offer};
    };

    const triggerTakeOffer = () => {
        let {top_bidder, top_offer} = getTopBidder();
        takeOffer(object_id, top_bidder);
    };

    return (
        <Col key={object_id}>
            <Card className="card-background1">
                <Card.Header>
                    <Stack direction="horizontal" gap={2}>
                        <span className="font-monospace text">Designer: {orig_owner}</span>
                        <Badge bg="status" className="ms-auto">
                            {on_sale}
                        </Badge>
                    </Stack>
                </Card.Header>
                <div className=" ratio ratio-4x3">
                    <img src={image} alt={object_id} style={{ objectFit: "cover" }} />
                </div>
                <Card.Body className="d-flex flex-column text">
                    <Card.Title>{getTypeText()}, {object_id}</Card.Title>
                    <Card.Text className="text">
                        <span>{getReportText()}</span>
                    </Card.Text>
                    <Card.Text className="text">
                        <span>Owner: {owner}</span>
                    </Card.Text>
                    <Button
                        variant="outline-dark"
                        onClick={triggerBuy}
                        className="w-100 py-3"
                    >
                        <h2 className="content2">
                            {getPurchaseText()}
                        </h2>
                    </Button>
                    <form className="w-100 py-3">
                        <input placeholder='Offer' type="text" onChange={(e) => {
                            setNewOffer(e.target.value);
                        }}/>
                        <Button onClick={triggerPutOffer} disabled={isOwner()}>Add offer</Button>
                    </form>
                    <Button
                        variant="outline-dark"
                        onClick={triggerTakeOffer}
                        className="w-100 py-3"
                        disabled={!offerExist() || !isOwner()}
                    >
                        <h2 class="content2">
                            {getOfferText()}
                        </h2>
                    </Button>
                </Card.Body>
            </Card>
            <br />
            <br />
        </Col>
    );
};

Design.propTypes = {
    design: PropTypes.instanceOf(Object).isRequired,
    buy: PropTypes.func.isRequired,
    putOffer: PropTypes.func.isRequired,
    takeOffer: PropTypes.func.isRequired,
};

export default Design;

'''
'''--- src/components/marketplace/Designs.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddDesign from "./AddDesign";
import Design from "./Design";
import Loader from "../utils/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../utils/Notifications";
import {
    getDesigns as getDesignList,
    buyDesign,
    newDesign,
    addOffer,
    takeOffer,
} from "../../utils/marketplace";

window.Buffer = window.Buffer || require("buffer").Buffer;

const Designs = ({account}) => {
    const [designs, setDesigns] = useState([]);
    const [loading, setLoading] = useState(false);

    // function to get the list of designs
    const getDesigns = useCallback(async () => {
        try {
            setLoading(true);
            setDesigns(await getDesignList());
        } catch (error) {
            console.log({ error });
        } finally {
            setLoading(false);
        }
    });

    // function to add a new Design on market
    const addDesign = async (data) => {
        try {
            setLoading(true);
            newDesign(data).then((resp) => {
                getDesigns();
                toast(<NotificationSuccess text="Design added successfully." />);
            });
        } catch (error) {
            console.log({ error });
            toast(<NotificationError text="Failed to create a new design." />);
        } finally {
            setLoading(false);
        }
    };

    // function to buy Design
    const buy = async (object_id, price, isOwner) => {
        try {
            if (isOwner) {
                toast(<NotificationSuccess text="Start downloading soon..." />);
                return;
            }
            await buyDesign({object_id, price}).then((resp) => {
                getDesigns();
            });
            toast(<NotificationSuccess text="Design bought successfully" />);
        } catch (error) {
            toast(<NotificationError text="Failed to purchase design." />);
        } finally {
            setLoading(false);
        }
    };

    // function to add a new offer on a Design
    const newOffer = async (object_id, offer) => {
        try {
            setLoading(true);
            addOffer({object_id, offer}).then((resp) => {
                getDesigns();
                toast(<NotificationSuccess text="Offer added successfully." />);
            });
        } catch (error) {
            console.log({ error });
            toast(<NotificationError text="Failed to create a new offer." />);
        } finally {
            setLoading(false);
        }
    };

    // function to take the top offer on a Design
    const acceptOffer = async (object_id, bidder) => {
        try {
            if (bidder == null) {
                toast(<NotificationSuccess text="Only the owner can take the offer." />);
                return;
            }
            setLoading(true);
            takeOffer({object_id, bidder}).then((resp) => {
                getDesigns();
                toast(<NotificationSuccess text="Top offer taken successfully." />);
            });
        } catch (error) {
            console.log({ error });
            toast(<NotificationError text="Failed to take the top offer." />);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        getDesigns();
    }, []);

    return (
        <div className="grid">
            {!loading ? (
                <>
                    <div className="d-flex justify-content-between align-items-center mb-4">
                        <h1 className="third-title">The Fabulous designs over the world for you here :) </h1>
                        <AddDesign save={addDesign} />
                    </div>
                    <Row xs={1} sm={2} lg={3} className="g-3 mb-5 g-xl-4 g-xxl-5">
                        {designs.map((_design) => (
                            <Design
                                design={{
                                    ..._design[1],
                                }}
                                buy={buy}
                                putOffer={newOffer}
                                takeOffer={acceptOffer}
                                account = {account}
                            />
                        ))}
                    </Row>
                </>
            ) : (
                <Loader />
            )}
        </div>
    );
};

export default Designs;

'''
'''--- src/components/utils/Cover.js ---
import React from "react";
import PropTypes from "prop-types";
import { Button } from "react-bootstrap";
import {IconButton} from "@mui/material";
import { IoFingerPrint } from "react-icons/io5";

const Cover = ({ name, login, coverImg }) => {
    if ((name, login, coverImg)) {
        return (
            <div
                className="background"
                style={{ minHeight: "100vh" }}
            >
                <div className="mt-auto text-light mb-5">
                    <br />
                    <br />
                    <div
                        className="ratio ratio-1x1 mx-auto mb-2"
                        style={{ maxWidth: "600px" }}
                    >
                    <img src={coverImg} style={{borderRadius:'50%'}} />

                    </div>
                    <h1 className="title"> {name} </h1>
                    <p className="sub-title">Please connect your wallet to continue.</p>

                    <IconButton onClick={login}  style={{ width: "100%", display: "flex", justifyContent: "center" }}>
                        <IoFingerPrint size="80" color="#591202" />
                    </IconButton>
                </div>
            </div>
        );
    }
    return null;
};

Cover.propTypes = {
    name: PropTypes.string,
};

Cover.defaultProps = {
    name: "",
};

export default Cover;

'''
'''--- src/components/utils/Loader.js ---
import React from "react";
import { Spinner } from "react-bootstrap";

const Loader = () => (
    <div className="d-flex justify-content-center">
        <Spinner animation="border" role="status" className="opacity-25">
            <span className="visually-hidden">Loading...</span>
        </Spinner>
    </div>
);
export default Loader;

'''
'''--- src/components/utils/Notifications.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import PropTypes from "prop-types";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
    <ToastContainer
        position="bottom-center"
        autoClose={5000}
        hideProgressBar
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable={false}
        pauseOnHover
    />
);

const NotificationSuccess = ({ text }) => (
    <div>
        <i className="bi bi-check-circle-fill text-success mx-2" />
        <span className="text-secondary mx-1">{text}</span>
    </div>
);

const NotificationError = ({ text }) => (
    <div>
        <i className="bi bi-x-circle-fill text-danger mx-2" />
        <span className="text-secondary mx-1">{text}</span>
    </div>
);

const Props = {
    text: PropTypes.string,
};

const DefaultProps = {
    text: "",
};

NotificationSuccess.propTypes = Props;
NotificationSuccess.defaultProps = DefaultProps;

NotificationError.propTypes = Props;
NotificationError.defaultProps = DefaultProps;

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color:blueviolet;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.diagonal-gradient {
  background: linear-gradient(black, #E9967A);
}

.background {
  background: radial-gradient(#E9967A, black);
}

.background2{
  background: linear-gradient(black, #E9967A);
}

.title {
  color:#800000;
  font-style: italic;
  font-family:Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
  font-size:800%;
  font-variant-position:sub;
  text-align: center;
}

.sub-title{
  color:#591202;
  font-variant-position:inherit;
  font-size:150%;
  text-align: center;
}

.third-title{
  color:#E9967A;
  font-family:fantasy;
  font-size:200%
}

.card-background{
  background: radial-gradient(at 0% 30%, #a86552 10px, #e7d2ba 30%, #566670 50%);
}

.card-background1{
  background: radial-gradient(ellipse farthest-corner at 90% 90%,
  #a86552 , #e7d2ba 20%, #566670 50%, #d1a293);
}

.new-add-card{
  background: repeating-linear-gradient(-45deg, red, red 5px, blue 5px, blue 10px);
}

.new-add-card-head{
  background:#03a3ff;
}

.content{
  color:#ff5f03;
  font-size:200%
}

.content2{
  color:#033e3e;
  font-size: 120%;
}
'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { initContract } from "./utils/near";

import "bootstrap-icons/font/bootstrap-icons.css";
import "bootstrap/dist/css/bootstrap.min.css";

const root = ReactDOM.createRoot(document.getElementById('root'));
window.nearInitPromise = initContract()
    .then(() => {
        root.render(
            <React.StrictMode>
            <App />
            </React.StrictMode>
        );
    })
    .catch(console.error);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/reports/report_1.txt ---
This is an example of report. For demo.

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/utils/config.js ---
const CONTRACT_NAME = "designmarket.kentup.testnet";

function environment() {
    return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
    };
}

export default environment;

'''
'''--- src/utils/marketplace.js ---
const GAS = "300000000000000";
const STORAGE = "1000000000000000000000000";
const ONE_YOCTO = "1";

export async function newDesign({ objectId: object_id, type, price, image, deposit }) {
    let attachedValue = BigInt(deposit) + BigInt(STORAGE);
    await window.contract.new_design( {args: { object_id, type: Number(type), price, image, deposit }, gas: GAS, amount: attachedValue.toString()});
}

export async function buyDesign({ object_id, price }) {
    await window.contract.buy_design({ object_id }, GAS, price);
}

export async function transferDesign({ object_id, new_owner }) {
    await window.contract.transfer_design({ object_id, new_owner }, GAS, ONE_YOCTO);
}

export async function updatePrice({ object_id, price }) {
    await window.contract.update_price({ object_id, price }, GAS, ONE_YOCTO);
}

export async function updateSale({ object_id, on_sale }) {
    await window.contract.update_sale({ object_id, on_sale }, GAS, ONE_YOCTO);
}

export async function addOffer({ object_id, offer}) {
    let attachedValue = BigInt(offer) + BigInt(STORAGE);
    await window.contract.add_offer({args: { object_id, offer}, gas: GAS, amount:attachedValue.toString()});
}

export async function removeOffer({ object_id }) {
    await window.contract.remove_offer({ object_id }, GAS, ONE_YOCTO);
}

export async function takeOffer({ object_id, bidder }) {
    await window.contract.take_offer({ object_id, bidder }, GAS, ONE_YOCTO);
}

export function getDesigns() {
    return window.contract.get_designs();
}

export function getOffersByObjectId({ object_id }) {
    return window.contract.get_offers_by_object_id({ object_id });
}

export function getOffersByAcctId({ object_id, acct_id }) {
    return window.contract.get_offers_by_acct_id({ object_id, acct_id });
}

'''
'''--- src/utils/near.js ---
import environment from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const env = environment("testnet");

export async function initContract() {
    const near = await connect(
        Object.assign(
            {keyStore: new keyStores.BrowserLocalStorageKeyStore()},
            env
        )
    );
    window.walletConnection = new WalletConnection(near);
    window.accountId = window.walletConnection.getAccountId();
    window.contract = new Contract(
        window.walletConnection.account(),
        env.contractName,
        {
            // view methods
            viewMethods: ["get_designs", "get_offers_by_object_id", "get_offers_by_acct_id"],
            // call methods
            changeMethods: ["new_design", "buy_design", "transfer_design", "update_price", "update_sale", "add_offer", "remove_offer", "take_offer"],
        }
    );
}

export async function accountBalance() {
    return formatNearAmount(
        (await window.walletConnection.account().getAccountBalance()).total,
        2
    );
}

export async function getAccountId() {
    return window.walletConnection.getAccountId();
}

export function login() {
    window.walletConnection.requestSignIn(env.contractName);
}

export function logout() {
    window.walletConnection.signOut();
    window.location.reload();
}

'''
'''--- test/package-lock.json ---
{
  "name": "test",
  "version": "1.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "test",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "near-api-js": "^1.1.0"
      }
    },
    "node_modules/base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/bn.js": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
    },
    "node_modules/borsh": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
      "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha512-rsJZYVCgXd08sPqwmaIqjAd5SUTfonV0z/gDJ8D6cN8wQphky1kkAYEqQ+hmDxTw7UihvBfjUVUSY+DBEe44jg=="
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "dependencies": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "node_modules/http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-errors/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "node_modules/mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
      "bin": {
        "mustache": "bin/mustache"
      }
    },
    "node_modules/near-api-js": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-1.1.0.tgz",
      "integrity": "sha512-qYKv1mYsaDZc2uYndhS+ttDhR9+60qFc+ZjD6lWsAxr3ZskMjRwPffDGQZYhC7BRDQMe1HEbk6d5mf+TVm0Lqg==",
      "dependencies": {
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha512-f+4n+vC6s4ysy7YO7O2gslWZBUu8Qj2i2OUJOvjRxQva7jVjYjB29jrr9NCjmxZQR0gzrOcv1RnqoYOeMs5VRQ==",
      "dependencies": {
        "capability": "^0.2.5"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "node_modules/u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    }
  },
  "dependencies": {
    "base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "bn.js": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
    },
    "borsh": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
      "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
      "requires": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "requires": {
        "base-x": "^3.0.2"
      }
    },
    "capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha512-rsJZYVCgXd08sPqwmaIqjAd5SUTfonV0z/gDJ8D6cN8wQphky1kkAYEqQ+hmDxTw7UihvBfjUVUSY+DBEe44jg=="
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
    },
    "error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "requires": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "requires": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "dependencies": {
        "depd": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
          "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ=="
        }
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ=="
    },
    "near-api-js": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-1.1.0.tgz",
      "integrity": "sha512-qYKv1mYsaDZc2uYndhS+ttDhR9+60qFc+ZjD6lWsAxr3ZskMjRwPffDGQZYhC7BRDQMe1HEbk6d5mf+TVm0Lqg==",
      "requires": {
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "requires": {
        "whatwg-url": "^5.0.0"
      }
    },
    "o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha512-f+4n+vC6s4ysy7YO7O2gslWZBUu8Qj2i2OUJOvjRxQva7jVjYjB29jrr9NCjmxZQR0gzrOcv1RnqoYOeMs5VRQ==",
      "requires": {
        "capability": "^0.2.5"
      }
    },
    "safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA=="
    },
    "text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
    },
    "tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "requires": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    }
  }
}

'''
'''--- test/package.json ---
{
  "name": "test",
  "version": "1.0.0",
  "description": "For smart contract test",
  "main": "test.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "type": "module",
  "dependencies": {
    "near-api-js": "^1.1.0"
  }
}

'''
'''--- test/test.js ---
import { connect, Contract, keyStores, KeyPair, utils  } from "near-api-js";

const CONTRACT_NAME = "designtest9.kent777.testnet";
const env = {
    networkId: "testnet",
    nodeUrl: "https://rpc.testnet.near.org",
    contractName: CONTRACT_NAME,
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
    explorerUrl: "https://explorer.testnet.near.org",
};

const GAS = "300000000000000";
const STORAGE = "1000000000000000000000000";

let test_object_id = "";
let test_type = 2;
let test_price = "10000000000000000000";
let test_image_url = "";

const myKeyStore = new keyStores.InMemoryKeyStore();
const PRIVATE_KEY = "";
const ACCOUNT_ID = "";
// creates a public / private key pair using the provided private key
const keyPair = new utils.key_pair.KeyPairEd25519(PRIVATE_KEY);
//const keyPair = KeyPair.fromString(PRIVATE_KEY);
// adds the keyPair you created to keyStore
await myKeyStore.setKey(env.networkId, ACCOUNT_ID, keyPair);
console.log(myKeyStore);

const near = await connect(
    Object.assign(
        {keyStore: myKeyStore},
        env
    )
);

const account = await near.account(ACCOUNT_ID);
console.log(account);

let contract = new Contract(
    account,
    env.contractName,
    {
        // view methods
        viewMethods: ["get_designs", "get_offers_by_object_id", "get_offers_by_acct_id"],
        // call methods
        changeMethods: ["new_design", "buy_design", "transfer_design", "update_price", "update_sale", "add_offer", "remove_offer", "take_offer"],
        sender: account,
    }
);

export async function newDesign({ objectId: object_id, type, price, image }) {
    await contract.new_design( { object_id: object_id, type: Number(type), price: price, image: image }, GAS, STORAGE);
}

async function buyDesign({ object_id, price }) {
    await contract.buy_design({ object_id }, GAS, price);
}

async function getDesigns() {
    return await contract.get_designs();
}

async function test() {
    let designs_before = await getDesigns();
    console.log(designs_before);

    let resp = await newDesign({objectId: test_object_id, type: test_type, price: test_price, image: test_image_url});
    console.log(resp);

    let designs_after = await getDesigns();
    console.log(designs_after);
}

test().then();

'''