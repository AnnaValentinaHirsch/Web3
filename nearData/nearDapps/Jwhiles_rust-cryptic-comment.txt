*GitHub Repository "Jwhiles/rust-cryptic-comment"*

'''--- Cargo.toml ---
[package]
name = "rust-cryptic-comment"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"
serde = "1.0.118"

[profile.release]
codegen-units = 1

opt-level = "z"
lto = true
debug = false
panic = "abort"

overflow-checks = true

'''
'''--- README.md ---
# RUST CrYPtiC ComMMENT
## WHAT IS IT
A simple comment system, designed to be dropped into a silly website that could use comments. For example, [my website](www.johnwhiles.com). It makes commentors pay to post comments.

### WHy?
I think making people pay to use your website is probably an easy and effective way to avoid spam. Also because I wanted to understand wot a crypto is. Also I wanted to write RUST.

### INSPIRATION
* Smart Parking Meters
* Having seen comments on other websites

## How to Use it
WIP

You need
RUSTUP
NPM
THE NEAR CLI

Then run `make` in your command line and follow the help I guess?

## Hi John
if you are reading this, you've forgotten how this project works.

there are two parts.
* The backend is in rust, and is deployed to near manually, by you. Run make build and then make deploy to publish a new version. Any chances to the data model will require migration
* The frontend is a small react app

'''
'''--- frontend/README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- frontend/netlify.toml ---
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

'''
'''--- frontend/package.json ---
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@rollup/plugin-commonjs": "^21.0.1",
    "@rollup/plugin-node-resolve": "^13.1.3",
    "@testing-library/jest-dom": "^5.16.2",
    "@testing-library/react": "^12.1.2",
    "@testing-library/user-event": "^13.5.0",
    "@types/react": "^17.0.39",
    "@types/react-dom": "^17.0.11",
    "near-api-js": "^0.44.2",
    "prettier": "^2.5.1",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3",
    "rollup-plugin-peer-deps-external": "^2.2.4",
    "rollup-plugin-typescript2": "^0.31.2",
    "typescript": "^4.5.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "rollup --config",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@rollup/plugin-json": "^4.1.0",
    "@types/big.js": "^6.1.2",
    "rollup": "^2.67.1"
  }
}

'''
'''--- frontend/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- frontend/public/manifest.json ---
{
  "short_name": "cryptic-comments",
  "name": "cryptic-comments",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- frontend/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- frontend/rollup.config.js ---
import peerDepsExternal from "rollup-plugin-peer-deps-external";
import resolve from "@rollup/plugin-node-resolve";
import commonjs from "@rollup/plugin-commonjs";
import json from "@rollup/plugin-json";
import typescript from "rollup-plugin-typescript2";

// this override is needed because Module format cjs does not support top-level await
// eslint-disable-next-line @typescript-eslint/no-var-requires
const packageJson = require("./package.json");

const globals = {
  ...packageJson.devDependencies
};

export default {
  input: "src/index.tsx",
  output: {
    file: "dist/index.js",
    format: "cjs"
  },
  plugins: [
    peerDepsExternal(),
    resolve(),
    commonjs(),
    json(),
    typescript({
      useTsconfigDeclarationDir: true,
      tsconfigOverride: {
        exclude: ["**/*.stories.*"]
      }
    }),
    commonjs({
      exclude: "node_modules",
      ignoreGlobal: true
    })
  ],
  external: Object.keys(globals)
};

// Other useful plugins you might want to add are:
// @rollup/plugin-images - import image files into your components
// @rollup/plugin-json - import JSON files into your components
// rollup-plugin-terser - minify the Rollup bundle

'''
'''--- frontend/src/index.css ---
body {
  margin: 0;
  padding: 20px;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-size: 20px;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

button {
  background-color: green;
  color: white;
  font-size: 20px;
  border-radius: 20px;
  border: none;
  font-weight: bold;
  padding: 10px 30px;
  margin-top: 15px;
  cursor: pointer;
}

.commentform-container {
  border: 3px solid green;
  padding: 15px 20px;
  border-radius: 20px;
  width: 70%;
}

.commentform-section {
  margin-top: 15px;
}

.commentform-textarea {
  display: flex;
  height: 150px;
  width: 95%;
  margin-top: 10px;
  padding: 10px;
  font-size: 20px;
  border-radius: 20px;
  border: 1px solid green;
 }

.commentform-input {
  width: 80px;
  padding: 10px;
  border-radius: 20px;
  border: 1px solid green;
  margin-left: 10px;
}

'''
'''--- frontend/src/near/config.ts ---

const CONTRACT_NAME = process.env.CONTRACT_NAME || 'whilesj.testnet'; /* TODO: change this to your account */

type Env = 'production' | 'mainnet' | 'development' | 'testnet' | 'betanet' | 'local' | 'test' | 'ci' | 'ci-betanet'

export default function getConfig (env: Env) {
  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      }
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      }
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      }
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      }
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      }
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      }
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

'''
'''--- frontend/src/near/index.ts ---
import * as nearAPI from "near-api-js";
import Big from "big.js";
import getConfig from "./config";

let contract: any;
let wallet: any;
let nearConfig: any;

// hatch as in egg
export async function hatch() {
  nearConfig = getConfig("testnet"); // TODO

  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();

  const near = await nearAPI.connect({ keyStore, ...nearConfig, headers: {} });

  wallet = new nearAPI.WalletConnection(near, nearConfig.contractName);

  let currentUser;
  if (wallet.getAccountId()) {
    currentUser = {
      accountId: wallet.getAccountId(),
      balance: (await wallet.account().state()).amount
    };
  }

  contract = new nearAPI.Contract(wallet.account(), nearConfig.contractName, {
    viewMethods: ["get_comments"],
    changeMethods: ["add_comment", "create_post"]
  });

  return { contract, currentUser, nearConfig, walletConnection: wallet };
}

// -----------------------------------------------------------------------------------
// view functions
// -----------------------------------------------------------------------------------
export const getComments = async (postId: string) => {
  try {
    const comments = await contract.get_comments({ post_id: postId });
    return { type: "success", comments };
  } catch (e) {
    const message = (e as any).message;
    if (message.includes(`Post doesn't exist`)) {
      return { type: "post_not_found" };
    } else {
      throw e;
    }
  }
};

// -----------------------------------------------------------------------------------
// change functions
// -----------------------------------------------------------------------------------
export const addComment = async (
  content: string,
  donation: number,
  postId: string
) => {
  const donationB = Big(donation || "0")
    .times(10 ** 24)
    .toFixed();

  await contract.add_comment(
    {
      post_id: postId,
      content
    },
    Big(3)
      .times(10 ** 13)
      .toFixed(),
    donationB
  );
};

export const createPost = async (postId: string) => {
  await contract.create_post(
    {
      post_id: postId
    },
    Big(3)
      .times(10 ** 13)
      .toFixed()
  );
};

export const signIn = () => {
  wallet.requestSignIn(
    {
      contractId: nearConfig.contractName,
      methodNames: [contract.add_comment.name]
    }, //contract requesting access
    "Cryptic Comments" //optional name
  );
};

export const signOut = () => {
  wallet.signOut();
  window.location.replace(window.location.origin + window.location.pathname);
};

'''
'''--- frontend/src/react-app-env.d.ts ---
/// <reference types="react-scripts" />

'''
'''--- frontend/src/setupTests.ts ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- frontend/todo.md ---

* it doesn't work in an iframe, so I want to publish a npm package, which will export a function that takes a element id, and a contract id, then renders it into the screen. I can they just add a div to every page that wants comments, and a script that loads the thing and runs..

* Add timestamps to comments
* Come up with sensible scheme for post ids, also how they should be created
  * Do I just write a script that I run whenever I publish something? 
  * If the post_id doesn't exist - maybe add a button that creates the post, only I will be able to call it though
* stlylin..

* Maybes
  * Nested comments?
  * convert it to preact

'''
'''--- frontend/tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}

'''
'''--- src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Serialize};
use near_sdk::collections::Vector;
use near_sdk::collections::LookupMap;
use near_sdk::{env, near_bindgen};

near_sdk::setup_alloc!();

const ONE_NEAR: u128 = 1000000000000000000000000;

#[derive(Serialize, BorshSerialize, BorshDeserialize)]
pub struct Comment {
    author: String,
    content: String,
}

impl Comment {
    pub fn new(author: String, content: String) -> Self {
        Comment {
            author,
            content,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize)]
pub struct Post {
    comments: Vector<Comment>,
    id: String
}

impl Post {
    pub fn new(id: String) -> Self {
        let mut prefix = Vec::with_capacity(33);
        // Adding unique prefix.
        prefix.push(b's');
        // Adding the hash of the account_id (key of the outer map) to the prefix.
        // This is needed to differentiate across accounts.
        prefix.extend(env::sha256(id.as_bytes()));
        Post {
            comments: Vector::new(prefix),
            id: id
        }
    }
}

#[near_bindgen]
#[derive(BorshSerialize, BorshDeserialize)]
pub struct Contract {
    // String is the post_id
    posts: LookupMap<String, Post>,
    comment_cost: u128
}

impl Default for Contract {
    fn default() -> Self {
        Self {
            posts: LookupMap::new(b"r".to_vec()),
            comment_cost: ONE_NEAR / 100 // 0.01 NEAR
        }
    }
}

#[near_bindgen]
impl Contract {
    #[init(ignore_state)]
    pub fn clear_state() -> Self {
        assert!(
            env::predecessor_account_id() == env::current_account_id(),
            "only I can call this"
        );

        Self { posts: LookupMap::new(b"r".to_vec()), comment_cost: ONE_NEAR / 100 }
    }

    pub fn set_comment_cost(&mut self, new_cost: String) {
        let new_cost = new_cost.parse::<u128>().unwrap();

        assert!(env::predecessor_account_id() == env::current_account_id(), "Owner's method");

        self.comment_cost = new_cost;
        let log_message = format!("Set comment cost to {}", new_cost);
        env::log(log_message.as_bytes());
    }

    pub fn create_post(&mut self, post_id: String) {
        assert!(env::predecessor_account_id() == env::current_account_id(), "Owner's method");
        let post = Post::new(post_id);
        self.posts.insert(&post.id, &post);
        let log_message = format!("Created post with ID {}", post.id);
        env::log(log_message.as_bytes());
    }

    pub fn get_comments(self, post_id: String) -> Vec<Comment> {
        let post = self.posts.get(&post_id);
        assert!(post.is_some(), "Post doesn't exist");
        post.unwrap().comments.to_vec()
    }

    #[payable]
    pub fn add_comment(&mut self, post_id: String, content: String) {
        // check that the attached deposit is enough
        assert!(near_sdk::env::attached_deposit() >= self.comment_cost, "Not enough near staked. Minimum is currently {} Near", self.comment_cost);
           
        // check if the post exists in the map
        let post = self.posts.get(&post_id);
        assert!(post.is_some(), "Post doesn't exist");
        let mut post = post.unwrap();

        let author = env::predecessor_account_id();
        let new_comment = Comment::new(author, content);
        post.comments.push(&new_comment);
        self.posts.insert(&post_id, &post);
        let log_message = format!("Added comment {} to post", new_comment.content.clone());
        env::log(log_message.as_bytes());
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    // part of writing unit tests is setting up a mock context
    // in this example, this is only needed for env::log in the contract
    // this is also a useful list to peek at when wondering what's available in env::*
    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice.testnet".to_string(),
            signer_account_id: "robert.testnet".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "jane.testnet".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    // Should panic if adding comment to post that doesn't exist
    #[test]
    #[should_panic]
    fn add_comment() {
        // set up the mock context into the testing environment
        let context = get_context(vec![], false);
        testing_env!(context);
        // instantiate a contract variable with the counter at zero
        let mut contract = Contract { posts: LookupMap::new(b"r".to_vec()) };
        contract.add_comment("some_post".to_string(), "hello this is my comment".to_string());
    }
    
    // owner can create posts
    #[test]
    fn create_post() {
        // set up the mock context into the testing environment
        let context = get_context(vec![], false);
        testing_env!(context);
        // instantiate a contract variable with the counter at zero
        let mut contract = Contract { posts: LookupMap::new(b"r".to_vec()) };
        contract.create_post("some_post".to_string());
        contract.get_comments("some_post".to_string());
    }
}

'''
'''--- src/main.rs ---
fn main() {
    println!("Hello, world!");
}

'''