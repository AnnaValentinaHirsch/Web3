*GitHub Repository "mtoan2111/dFormPureReactjs"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
dForm_reactjs
==================

This app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] â‰¥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `dForm_reactjs.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `dForm_reactjs.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account dForm_reactjs.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'dForm_reactjs.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- package.json ---
{
    "name": "dForm_reactjs",
    "version": "0.0.1",
    "license": "UNLICENSED",
    "scripts": {
        "build": "npm run build:contract && npm run build:web",
        "build:contract": "node contract/compile.js",
        "build:contract:debug": "node contract/compile.js --debug",
        "build:web": "parcel build src/index.html --public-url ./",
        "dev:deploy:contract": "near dev-deploy",
        "deploy:contract": "near deploy",
        "deploy:pages": "gh-pages -d dist/",
        "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
        "start": "parcel src/index.html --open",
        "dev": "nodemon --watch contract -e ts --exec \"npm run start\"",
        "test": "npm run build:contract:debug && cd contract && npm run test && cd .. && jest test --runInBand",
        "start:testnet": "react-scripts start",
        "build:testnet": "react-scripts build",
        "buildwebpack": "webpack --mode production && cp public/index.html build/index.html"
    },
    "devDependencies": {
        "@babel/core": "^7.16.5",
        "@babel/preset-env": "^7.16.5",
        "@babel/preset-react": "^7.16.5",
        "babel-jest": "^27.4.5",
        "env-cmd": "~10.1.0",
        "gh-pages": "~3.1.0",
        "jest": "~26.6.2",
        "jest-environment-node": "~26.6.2",
        "near-cli": "~2.1.1",
        "nodemon": "~2.0.3",
        "parcel-bundler": "~1.12.4",
        "shelljs": "~0.8.4"
    },
    "dependencies": {
        "@babel/plugin-proposal-class-properties": "^7.16.5",
        "@babel/plugin-transform-runtime": "^7.16.5",
        "@emotion/react": "^11.5.0",
        "@emotion/styled": "^11.3.0",
        "@mui/icons-material": "^5.1.0",
        "@mui/material": "^5.1.0",
        "buffer": "^6.0.3",
        "dotenv-webpack": "^7.0.3",
        "fibers": ">= 3.1.0",
        "near-api-js": "~0.43.1",
        "node-sass": "^7.0.0",
        "process": "^0.11.10",
        "react": "^17.0.2",
        "react-dom": "^17.0.2",
        "react-redux": "^7.2.6",
        "react-router-dom": "^6.2.1",
        "react-scripts": "^5.0.0",
        "redux": "^4.1.2",
        "regenerator-runtime": "~0.13.5",
        "sass": "^1.3.0",
        "webpack-cli": "^4.9.1"
    },
    "jest": {
        "testEnvironment": "near-cli/test_environment",
        "testPathIgnorePatterns": [
            "<rootDir>/contract/",
            "<rootDir>/node_modules/"
        ]
    },
    "browserslist": {
        "production": [
            ">0.2%",
            "not dead",
            "not op_mini all"
        ],
        "development": [
            "last 1 chrome version",
            "last 1 firefox version",
            "last 1 safari version"
        ]
    }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" href="./assets/favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="apple-touch-icon" href="./assets/favicon.ico" />
        <title>D-Form</title>
    </head>
    <body>
        <noscript>You need to enable JavaScript to run this app.</noscript>
        <div id="coverBg"></div>
        <div id="root"></div>
        <script src="./bundle.js"></script>
    </body>
</html>

'''
'''--- src/App.js ---
import React from "react";
import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
import "./global.css";
import { Provider } from "react-redux";
import Store from "./redux/store";
import Layout from "./components/layout";
import { onUpdateWallet } from "./redux/action/wallet";
import Dashboard from "./pages/dashboard";
import FormCreate from "./pages/form-create";
import FormAnalysis from "./pages/form-analysis";
import Analysis from "./pages/analysis";
import ParticipantResult from "./pages/participant-result";
import FormDetail from "./pages/form-detail";
import Form from "./pages/form";
import CreateQuestion from "./pages/create-question";
import FormAnswer from "./pages/form-answer";

const App = ({ contract, currentUser, nearConfig, walletConnection }) => {
    Store.dispatch(
        onUpdateWallet({
            contract,
            currentUser,
            nearConfig,
            walletConnection,
        }),
    );
    return (
        <Router>
            <Provider store={Store}>
                <Layout>
                    <Routes>
                        <Route path="/" element={<Dashboard />} />
                        <Route path="/form-create" element={<FormCreate />} />
                        <Route path="/form-analysis" element={<FormAnalysis />} />
                        <Route path="/form-detail" element={<FormDetail />} />
                        <Route path="/form-answer" element={<FormAnswer />} />
                        <Route path="/form-analysis-detail" element={<Analysis />} />
                        <Route path="/participant-result" element={<ParticipantResult />} />
                        <Route path="/form" element={<Form />} />
                        <Route path="/create-question" element={<CreateQuestion />} />
                    </Routes>
                </Layout>
            </Provider>
        </Router>
    );
};

export default App;

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/components/account/account.js ---
import React, { useState } from "react";
import styles from "./account.module.css";
import { connect } from "react-redux";
import { Popover } from "@mui/material";
import AccountCircleOutlinedIcon from "@mui/icons-material/AccountCircleOutlined";
import ArrowDropDownCircleSharpIcon from "@mui/icons-material/ArrowDropDownCircleSharp";
import LogoutSharpIcon from "@mui/icons-material/LogoutSharp";
import { useNavigate } from "react-router-dom";

const UserAccount = () => {
    const [anchorEl, setAnchorEl] = useState(null);
    const [popoverId, setPopoverId] = useState(undefined);
    const [popoverOpen, setPopoverOpen] = useState(false);
    const navigate = useNavigate();

    const onRequestConnectWallet = () => {
        const { nearConfig, walletConnection } = window;
        walletConnection?.requestSignIn?.(nearConfig?.contractName);
    };

    const onRequestSignOut = () => {
        const { walletConnection } = window;
        walletConnection?.signOut?.();
        navigate("/");
    };

    const onRenderSignInButton = () => {
        return (
            <div className={styles.signIn_area}>
                <button className={styles.signIn_button} onClick={onRequestConnectWallet}>
                    SignIn
                </button>
            </div>
        );
    };

    const onOpenAccountPopover = (e) => {
        setAnchorEl(e.target);
        setPopoverId("simple-popover");
        setPopoverOpen(true);
    };

    const onCloseAccountPopover = () => {
        setAnchorEl(null);
        setPopoverId(undefined);
        setPopoverOpen(false);
    };

    const onRenderAccountDetail = () => {
        const { walletConnection } = window;
        const accountId = walletConnection?.getAccountId?.();
        let popoverRight = 1000;
        if (typeof window !== "undefined") {
            popoverRight = window?.screen?.width - 15;
        }
        return (
            <div className={styles.signIn_area}>
                <button className={styles.account_button} onClick={onOpenAccountPopover}>
                    <div className={styles.account_button_icon_area}>
                        <AccountCircleOutlinedIcon className={styles.account_button_icon} />
                    </div>
                    <div className={styles.account_button_accountId_area}>{accountId}</div>
                    <div>
                        <ArrowDropDownCircleSharpIcon className={styles.account_button_drop_icon} />
                    </div>
                </button>
                <Popover
                    id={popoverId}
                    open={popoverOpen}
                    anchorEl={anchorEl}
                    onClose={onCloseAccountPopover}
                    anchorReference="anchorPosition"
                    anchorPosition={{ top: 70, left: popoverRight }}
                    anchorOrigin={{
                        vertical: "bottom",
                        horizontal: "right",
                    }}
                    transformOrigin={{
                        vertical: "top",
                        horizontal: "right",
                    }}
                    className={styles.popover_container}
                >
                    <div className={styles.signOut_area}>
                        <button className={styles.signOut_button} onClick={onRequestSignOut}>
                            <LogoutSharpIcon className={styles.signOut_button_icon} />
                            <div className={styles.signOut_button_content}>Logout</div>
                        </button>
                    </div>
                </Popover>
            </div>
        );
    };

    const onRenderScene = () => {
        const { walletConnection } = window;
        const isSigned = walletConnection?.isSignedIn?.();
        if (isSigned) {
            return onRenderAccountDetail();
        }
        return onRenderSignInButton();
    };

    return <div className={styles.root}>{onRenderScene()}</div>;
};

export default UserAccount;

'''
'''--- src/components/account/account.module.css ---
.root {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
}

.signIn_area {
    width: 90%;
    height: 100%;
    display: flex;
    align-items: center;
}

.signIn_button {
    width: 100%;
    border: none;
    border-radius: 3000px;
    font-size: 16px;
    font-weight: 600;
    padding: 13px;
}

.signIn_button:hover {
    cursor: pointer;
}

.signOut_area {
    width: 350px;
    display: flex;
    justify-content: center;
    align-items: center;
    background: #fcfcfd;
}

.signOut_button {
    width: 80%;
    height: 80%;
    border: none;
    border-radius: 3000px;
    font-size: 15px;
    font-weight: 400;
    padding: 10px;
    margin: 30px 15px;
    background-color: #0072ce;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
}

.account_button {
    width: 100%;
    border: none;
    border-radius: 3000px;
    font-size: 16px;
    font-weight: 600;
    padding: 8px;
    display: flex;
    align-items: center;
    background-color: #e9e9e9;
    cursor: pointer;
}

.account_button_icon_area {
    display: flex;
    align-items: center;
}

.account_button_icon {
    font-size: 28px !important;
    color: var(--color-primary);
}

.account_button_accountId_area {
    margin-left: 5px;
    flex: 1;
    color: var(--color-primary);
    font-family: 'Bai Jamjuree', sans-serif;
}

.account_button_drop_icon {
    font-size: 28px !important;
    color: #cdcdcd;
}

.signOut_button_icon {
    font-size: 32px;
    color: white;
}

.signOut_button_content {
    font-size: 16px;
    font-weight: 600;
    color: white;
    margin-left: 5px;
}

'''
'''--- src/components/alert/index.js ---
import React from 'react';
import MuiAlert from '@mui/material/Alert';

const Alert = React.forwardRef(function Alert(props, ref) {
    return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />;
});

export default Alert;

'''
'''--- src/components/answer/answer.js ---

'''
'''--- src/components/answer/answer.module.css ---

'''
'''--- src/components/footer/footer.module.css ---
.root {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    padding: 3px 15px;
    box-shadow: var(--color-boxshadow);
}

.license {
    display: flex;
    align-items: center;
    max-width: 500px;
    width: 400px;
    height: 100%;
}

.logo {
    width: 70px;
    height: 100%;
    position: relative;
    color: black;
    margin: 0 10px;
}

.logo img {
    color: var(--color-primary);
}

.term_link {
    text-decoration: underline;
}

.term_link_color_secondary {
    color: var(--color-link);
}

.term {
    display: flex;
    flex-direction: column;
    justify-items: center;
    font-size: 13px;
    color: var(--color-secondary);
    padding-left: 40px;
}

.detail {
    text-align: center;
    font-size: 13px;
    color: var(--color-primary);
    display: flex;
    justify-content: center;
    align-items: center;
    flex: 1;
}

.qa {
    width: 400px;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    padding-right: 15px;
    justify-content: center;
}

.qa_quest {
    font-size: 14px;
    font-weight: 600;
    color: var(--color-secondary);
}

.qa_comm {
    margin-top: 5px;
    font-size: 16px;
    font-weight: 600;
    color: var(--color-primary);
}

.qa_comm_link {
    color: var(--color-link);
}

'''
'''--- src/components/footer/index.js ---
import React from "react";
import { Link } from "react-router-dom";
import styles from "./footer.module.css";
// import Image from 'next/image';
import Logo from "./lnc.svg";

export default class Footer extends React.Component {
    constructor(props) {
        super(props);
    }

    render() {
        return (
            <div className={styles.root}>
                <div className={styles.license}>
                    <div className={styles.logo}>
                        <img src={Logo} alt={"Error"} />
                    </div>
                    <div className={styles.term}>
                        <div>Â© 2021 NEAR Inc. All Rights Reserved.</div>
                        <div>
                            <Link to="https://wallet.near.org/terms">
                                <a className={styles.term_link}>Terms of Service</a>
                            </Link>
                            &nbsp; | &nbsp;
                            <Link to="https://near.org/privacy/">
                                <a className={styles.term_link}>Privacy Policy</a>
                            </Link>
                        </div>
                    </div>
                </div>
                <div className={styles.detail}>
                    NEAR is a scalable computing and storage platform that changes how the web works for the better. &nbsp;
                    <Link to="https://near.org/">
                        <a target="_blank" className={styles.term_link_color_secondary}>
                            Learn More
                        </a>
                    </Link>
                </div>
                <div className={styles.qa}>
                    <div className={styles.qa_quest}>Questions?</div>
                    <div className={styles.qa_comm}>
                        <Link to="https://near.chat/">
                            <a target="_blank" className={styles.qa_comm_link}>
                                Join Community
                            </a>
                        </Link>
                    </div>
                </div>
            </div>
        );
    }
}

'''
'''--- src/components/footer/lnc.svg ---
<?xml version="1.0" encoding="UTF-8"?> <svg xmlns="http://www.w3.org/2000/svg" width="80" height="35" viewBox="0 0 80 35" fill="none"><path d="M3.50186 29.3542L3.50186 11.4765L0 11.4765L0 32.7257L13.6121 32.7257L13.6121 29.3542L3.50186 29.3542Z" fill="black"></path><path d="M22.3078 12.7652L36.2597 33.6135L41.6202 33.6135L41.6202 5.9876L37.0674 5.9876L37.0674 26.8728L23.0421 5.9876L17.755 5.9876L17.755 33.6135L22.3078 33.6135L22.3078 12.7652Z" fill="black"></path><path d="M63.4603 35C71.0975 35 77.6049 30.0583 80 23.2578L74.8483 21.1723C73.3118 26.114 68.8831 29.6049 63.4603 29.6049C56.8173 29.6049 51.4848 24.2098 51.4848 17.5C51.4848 10.8355 56.8173 5.39508 63.4603 5.39508C68.8831 5.39508 73.3118 8.88601 74.8483 13.8277L79.9548 11.7422C77.6049 4.89637 71.0975 0 63.4603 0C53.7444 0 45.836 7.8886 45.836 17.5C45.836 27.1114 53.7444 35 63.4603 35Z" fill="black"></path></svg> 
'''
'''--- src/components/footer/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 414 162" class="near-logo">
    <g id="Layer_1" data-name="Layer 1">
        <path d="M207.21,54.75v52.5a.76.76,0,0,1-.75.75H201a7.49,7.49,0,0,1-6.3-3.43l-24.78-38.3.85,19.13v21.85a.76.76,0,0,1-.75.75h-7.22a.76.76,0,0,1-.75-.75V54.75a.76.76,0,0,1,.75-.75h5.43a7.52,7.52,0,0,1,6.3,3.42l24.78,38.24-.77-19.06V54.75a.75.75,0,0,1,.75-.75h7.22A.76.76,0,0,1,207.21,54.75Z" style="fill: #72727a;"></path>
        <path d="M281,108h-7.64a.75.75,0,0,1-.7-1L292.9,54.72A1.14,1.14,0,0,1,294,54h9.57a1.14,1.14,0,0,1,1.05.72L324.8,107a.75.75,0,0,1-.7,1h-7.64a.76.76,0,0,1-.71-.48l-16.31-43a.75.75,0,0,0-1.41,0l-16.31,43A.76.76,0,0,1,281,108Z" style="fill: #72727a"></path>
        <path d="M377.84,106.79,362.66,87.4c8.57-1.62,13.58-7.4,13.58-16.27,0-10.19-6.63-17.13-18.36-17.13H336.71a1.12,1.12,0,0,0-1.12,1.12h0a7.2,7.2,0,0,0,7.2,7.2H357c7.09,0,10.49,3.63,10.49,8.87s-3.32,9-10.49,9H336.71a1.13,1.13,0,0,0-1.12,1.13v26a.75.75,0,0,0,.75.75h7.22a.76.76,0,0,0,.75-.75V87.87h8.33l13.17,17.19a7.51,7.51,0,0,0,6,2.94h5.48A.75.75,0,0,0,377.84,106.79Z" style="fill: #72727a"></path>
        <path d="M258.17,54h-33.5a1,1,0,0,0-1,1h0A7.33,7.33,0,0,0,231,62.33h27.17a.74.74,0,0,0,.75-.75V54.75A.75.75,0,0,0,258.17,54Zm0,45.67h-25a.76.76,0,0,1-.75-.75V85.38a.75.75,0,0,1,.75-.75h23.11a.75.75,0,0,0,.75-.75V77a.75.75,0,0,0-.75-.75H224.79a1.13,1.13,0,0,0-1.12,1.13v29.45a1.12,1.12,0,0,0,1.12,1.13h33.38a.75.75,0,0,0,.75-.75v-6.83A.74.74,0,0,0,258.17,99.67Z" style="fill: #72727a"></path>
        <path d="M108.24,40.57,89.42,68.5a2,2,0,0,0,3,2.63l18.52-16a.74.74,0,0,1,1.24.56v50.29a.75.75,0,0,1-1.32.48l-56-67A9.59,9.59,0,0,0,47.54,36H45.59A9.59,9.59,0,0,0,36,45.59v70.82A9.59,9.59,0,0,0,45.59,126h0a9.59,9.59,0,0,0,8.17-4.57L72.58,93.5a2,2,0,0,0-3-2.63l-18.52,16a.74.74,0,0,1-1.24-.56V56.07a.75.75,0,0,1,1.32-.48l56,67a9.59,9.59,0,0,0,7.33,3.4h2a9.59,9.59,0,0,0,9.59-9.59V45.59A9.59,9.59,0,0,0,116.41,36h0A9.59,9.59,0,0,0,108.24,40.57Z" style="fill: #72727a"></path>
    </g>
</svg>
'''
'''--- src/components/form/form.js ---
import React from 'react';
import styles from './form.module.css';
// import Router from 'next/router';
import { onUpdateForm } from '../../redux/action/form';
import { connect } from 'react-redux';

class Form extends React.Component {
    onViewFormDetail = () => {
        const { id, title, qCounter } = this.props;
        this.props.onUpdateForm?.({
            id,
            title,
            qCounter,
        });
        this.props?.onViewMore?.({ id, title, qCounter });
    };

    render() {
        const { title, qCounter, qParticipant } = this.props;
        return (
            <div className={styles.root}>
                <div className={styles.form_detail_area}>
                    <span className={styles.title}>{title}</span>
                    <div className={styles.qCounter}>Total questions: {qCounter}</div>
                    {typeof qParticipant !== 'undefined' && <div className={styles.qCounter}>Total participants: {qParticipant}</div>}
                </div>
                <div className={styles.view_more} onClick={this.onViewFormDetail}>
                    View more
                </div>
            </div>
        );
    }
}

export default connect(null, {
    onUpdateForm,
})(Form);

'''
'''--- src/components/form/form.module.css ---
.root {
    width: 100%;
    height: 105px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-radius: 24px;
    background: var(--color-background);
    box-shadow: var(--color-boxshadow);
    padding: 8px 16px;
    margin: 10px 0;
}

.form_detail_area {
    flex: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-right: 10px;
}

.title {
    font-size: 18px;
    line-height: 25px;
    font-weight: 600;
}

.qCounter {
    font-size: 15px;
    line-height: 25px;
}

.view_more {
    font-size: 15px;
    font-style: italic;
    color: var(--color-link);
    cursor: pointer;
}

.view_more:hover {
    text-decoration: underline;
}

'''
'''--- src/components/header/header.module.css ---
.root {
    width: 100%;
    height: 100%;
    padding: 3px 15px;
    display: flex;
    align-items: center;
    box-shadow: var(--color-boxshadow);
    background: rgba(255, 255, 255, 0.1);
}

.logo {
    width: 70px;
    height: 100%;
    position: relative;
    color: black;
    margin: 0 10px;
}

.nav {
    padding-left: 40px;
    flex: 1;
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
}

.nav_icon {
    color: #999;
    width: 30px;
    height: 30px;
    font-weight: 300;
}

.nav_icon_active {
    composes: nav_icon;
    color: var(--color-active);
}

.nav_item {
    max-width: 250px;
    cursor: pointer;
}

.nav_item + .nav_item {
    margin-left: 20px;
}

.nav_item:hover {
    color: var(--color-active);
}

.account {
    width: 270px;
    height: 70%;
    border: none;
    border-left: 1px solid var(--color-border);
    display: flex;
    justify-self: center;
    align-items: center;
}

'''
'''--- src/components/header/index.js ---
import React from "react";
import styles from "./header.module.css";
import Logo from "./lnc.svg";
import Account from "../account/account";
import NavItem from "../navitem/navitem";
import QuestionAnswerIcon from "@mui/icons-material/QuestionAnswerOutlined";
import NoteAddOutlinedIcon from "@mui/icons-material/NoteAddOutlined";
import BarChartOutlinedIcon from "@mui/icons-material/BarChartOutlined";
import { useLocation } from "react-router-dom";

const Header = () => {
    const location = useLocation();

    const cPath = location.pathname;
    return (
        <div className={styles.root}>
            <div className={styles.logo}>
                <img src={Logo} alt={"Error"} />
            </div>
            <div className={styles.nav}>
                <div className={styles.nav_item}>
                    <NavItem icon={<QuestionAnswerIcon className={styles.nav_icon} />} content={"Join a form"} href={"/"} actived={cPath === "/"} />
                </div>
                <div className={styles.nav_item}>
                    <NavItem
                        icon={<NoteAddOutlinedIcon className={styles.nav_icon} />}
                        content={"New form"}
                        href={"/form-create"}
                        actived={cPath === "/form-create"}
                    />
                </div>
                <div className={styles.nav_item}>
                    <NavItem
                        icon={<BarChartOutlinedIcon className={styles.nav_icon} />}
                        content={"Form analysis"}
                        href={"/form-analysis"}
                        actived={cPath === "/form-analysis"}
                    />
                </div>
            </div>
            <div className={styles.account}>
                <Account />
            </div>
        </div>
    );
};

export default Header;

// export default withRouter(Header);

'''
'''--- src/components/header/lnc.svg ---
<?xml version="1.0" encoding="UTF-8"?> <svg xmlns="http://www.w3.org/2000/svg" width="80" height="35" viewBox="0 0 80 35" fill="none"><path d="M3.50186 29.3542L3.50186 11.4765L0 11.4765L0 32.7257L13.6121 32.7257L13.6121 29.3542L3.50186 29.3542Z" fill="black"></path><path d="M22.3078 12.7652L36.2597 33.6135L41.6202 33.6135L41.6202 5.9876L37.0674 5.9876L37.0674 26.8728L23.0421 5.9876L17.755 5.9876L17.755 33.6135L22.3078 33.6135L22.3078 12.7652Z" fill="black"></path><path d="M63.4603 35C71.0975 35 77.6049 30.0583 80 23.2578L74.8483 21.1723C73.3118 26.114 68.8831 29.6049 63.4603 29.6049C56.8173 29.6049 51.4848 24.2098 51.4848 17.5C51.4848 10.8355 56.8173 5.39508 63.4603 5.39508C68.8831 5.39508 73.3118 8.88601 74.8483 13.8277L79.9548 11.7422C77.6049 4.89637 71.0975 0 63.4603 0C53.7444 0 45.836 7.8886 45.836 17.5C45.836 27.1114 53.7444 35 63.4603 35Z" fill="black"></path></svg> 
'''
'''--- src/components/header/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 414 162" class="near-logo">
    <g id="Layer_1" data-name="Layer 1" fill="black">
        <path d="M207.21,54.75v52.5a.76.76,0,0,1-.75.75H201a7.49,7.49,0,0,1-6.3-3.43l-24.78-38.3.85,19.13v21.85a.76.76,0,0,1-.75.75h-7.22a.76.76,0,0,1-.75-.75V54.75a.76.76,0,0,1,.75-.75h5.43a7.52,7.52,0,0,1,6.3,3.42l24.78,38.24-.77-19.06V54.75a.75.75,0,0,1,.75-.75h7.22A.76.76,0,0,1,207.21,54.75Z"></path>
        <path d="M281,108h-7.64a.75.75,0,0,1-.7-1L292.9,54.72A1.14,1.14,0,0,1,294,54h9.57a1.14,1.14,0,0,1,1.05.72L324.8,107a.75.75,0,0,1-.7,1h-7.64a.76.76,0,0,1-.71-.48l-16.31-43a.75.75,0,0,0-1.41,0l-16.31,43A.76.76,0,0,1,281,108Z"></path>
        <path d="M377.84,106.79,362.66,87.4c8.57-1.62,13.58-7.4,13.58-16.27,0-10.19-6.63-17.13-18.36-17.13H336.71a1.12,1.12,0,0,0-1.12,1.12h0a7.2,7.2,0,0,0,7.2,7.2H357c7.09,0,10.49,3.63,10.49,8.87s-3.32,9-10.49,9H336.71a1.13,1.13,0,0,0-1.12,1.13v26a.75.75,0,0,0,.75.75h7.22a.76.76,0,0,0,.75-.75V87.87h8.33l13.17,17.19a7.51,7.51,0,0,0,6,2.94h5.48A.75.75,0,0,0,377.84,106.79Z"></path>
        <path d="M258.17,54h-33.5a1,1,0,0,0-1,1h0A7.33,7.33,0,0,0,231,62.33h27.17a.74.74,0,0,0,.75-.75V54.75A.75.75,0,0,0,258.17,54Zm0,45.67h-25a.76.76,0,0,1-.75-.75V85.38a.75.75,0,0,1,.75-.75h23.11a.75.75,0,0,0,.75-.75V77a.75.75,0,0,0-.75-.75H224.79a1.13,1.13,0,0,0-1.12,1.13v29.45a1.12,1.12,0,0,0,1.12,1.13h33.38a.75.75,0,0,0,.75-.75v-6.83A.74.74,0,0,0,258.17,99.67Z"></path>
        <path d="M108.24,40.57,89.42,68.5a2,2,0,0,0,3,2.63l18.52-16a.74.74,0,0,1,1.24.56v50.29a.75.75,0,0,1-1.32.48l-56-67A9.59,9.59,0,0,0,47.54,36H45.59A9.59,9.59,0,0,0,36,45.59v70.82A9.59,9.59,0,0,0,45.59,126h0a9.59,9.59,0,0,0,8.17-4.57L72.58,93.5a2,2,0,0,0-3-2.63l-18.52,16a.74.74,0,0,1-1.24-.56V56.07a.75.75,0,0,1,1.32-.48l56,67a9.59,9.59,0,0,0,7.33,3.4h2a9.59,9.59,0,0,0,9.59-9.59V45.59A9.59,9.59,0,0,0,116.41,36h0A9.59,9.59,0,0,0,108.24,40.57Z"></path>
    </g>
</svg>
'''
'''--- src/components/layout/index.js ---
import React from 'react';
import Header from '../header';
import Footer from '../footer';
import styles from './layout.module.css';

export default class Layout extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            scrolling: false,
        };
    }

    componentDidMount() {
        window.addEventListener('scroll', this.handleScroll);
    }

    componentWillUnmount() {
        window.removeEventListener('scroll', this.handleScroll);
    }

    handleScroll = () => {
        if (window.scrollY === 0 && this.state.scrolling === true) {
            this.setState({ scrolling: false });
        } else if (window.scrollY !== 0 && this.state.scrolling !== true) {
            this.setState({ scrolling: true });
        }
    };

    render() {
        const { children } = this.props;
        return (
            <div className={styles.root}>
                {/* <Head {...this.props}>
                    <title>Decentralize Form</title>
                    <link rel='preconnect' href='https://fonts.googleapis.com' />
                    <link rel='preconnect' href='https://fonts.gstatic.com' crossOrigin />
                    <link href='https://fonts.googleapis.com/css2?family=Bai+Jamjuree&display=swap' rel='stylesheet' />
                </Head> */}
                <div className={styles.header} style={this.state.scrolling ? { background: '#fff' } : null}>
                    <Header />
                </div>
                <div className={styles.body}>
                    <div className={styles.main}>{children}</div>
                    <div className={styles.footer}>
                        <Footer />
                    </div>
                </div>
            </div>
        );
    }
}

'''
'''--- src/components/layout/layout.module.css ---
.root {
    margin: 0 auto;
    width: 100%;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    position: relative;
    z-index: 1;
}

.header {
    width: 100%;
    height: 70px;
    position: fixed;
    top: 0;
    z-index: 999;
}

.body {
    width: 100%;
    height: calc(100vh - 70px);
    display: flex;
    flex-direction: column;
    justify-content: center;
    flex-basis: max-content;
    margin: 70px 0 0 0;
    overflow: auto;
}

.main {
    width: 100%;
    flex: 1;
    min-height: calc(100vh - 180px);
    display: flex;
    justify-content: center;
    padding: 50px 0 20px 0;
}

.footer {
    width: 100%;
    height: 100px;
    min-height: 100px;
    border-top: 1px solid var(--color-border);
}

'''
'''--- src/components/loading/index.js ---
import React from 'react';
import Backdrop from '@mui/material/Backdrop';
import CircularProgress from '@mui/material/CircularProgress';

export default class Loading extends React.Component {
    render() {
        const { open } = this.props;
        return (
            <Backdrop sx={{ color: '#fff', zIndex: 9999999 }} open={open}>
                <CircularProgress color='inherit' />
            </Backdrop>
        );
    }
}

'''
'''--- src/components/modal/confirmation/confirmation.module.css ---
.root {
    min-width: 400px;
    width: 100%;
    padding: 20px 30px;
    display: flex;
    flex-direction: column;
}

.action_title {
    font-size: 18px;
    font-weight: 400;
}

.action_area {
    margin: 40px 0 20px;
    display: flex;
    width: 100%;
    justify-content: space-between;
}

.action_btn {
    width: 48%;
    padding: 10px 0;
    border: 1px solid var(--color-border);
    cursor: pointer;
    border-radius: 8px;
}

.action_btn_confirm {
    width: 48%;
    padding: 10px 0;
    border: none;
    cursor: pointer;
    border-radius: 8px;
    background: var(--color-gradient);
    color: var(--color-text-button);
}

'''
'''--- src/components/modal/confirmation/index.js ---
import React from 'react';
import styles from './confirmation.module.css';

export default class Confirmation extends React.Component {
    onCancelBtnClicked = () => {
        this.props?.onDeny();
    };

    onAcceptBtnClicked = () => {
        this.props?.onAccept();
    };
    render() {
        return (
            <div className={styles.root}>
                <h2>Warning!!!</h2>
                <div className={styles.action_title}> Are you sure to make this action?</div>
                <div className={styles.action_area}>
                    <button className={styles.action_btn_confirm} onClick={this.onAcceptBtnClicked}>
                        OK
                    </button>
                    <button className={styles.action_btn} onClick={this.onCancelBtnClicked}>
                        Cancel
                    </button>
                </div>
            </div>
        );
    }
}

'''
'''--- src/components/modal/editform/editform.module.css ---
.root {
    min-width: 600px;
    max-height: 80vh;
    overflow: auto;
    padding: 30px;
}

.question_area {
    width: 100%;
    padding: 0 20px;
}

.question_block {
    margin: 10px 0px;
    width: 100%;
    display: flex;
    flex-direction: column;
}

.question_text_input {
    width: 100%;
    font-size: 17px;
    padding: 7px 0px;
    border: none;
    outline: none;
    background: none;
    border-bottom: 1px solid var(--color-border);
}

.question_block_btn_area {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 40px 0 0;
}

.btn {
    width: 48%;
    padding: 15px 0px;
    box-shadow: none;
    border: none;
    border-radius: 10px;
    font-size: 17px;
    font-weight: 600;
    cursor: pointer;
}

.question_block_btn_new {
    composes: btn;
    background: var(--color-gradient);
    border-radius: 24px;
    color: var(--color-text-button);
}

'''
'''--- src/components/modal/editform/index.js ---
import React from 'react';
import styles from './editform.module.css';
import { connect } from 'react-redux';

class EditQuestion extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            title: '',
        };
    }

    componentDidMount() {}

    onFormTitleChanged = (e) => {
        this.setState({
            title: e.target.value,
        });
    };

    onUpdateFormBtnClicked = () => {
        const { title } = this.state;
        this.props?.onAccept?.({ title });
    };

    render() {
        const { title } = this.state;
        return (
            <div className={styles.root}>
                <div className={styles.question_area}>
                    <h2>Edit Your Form</h2>
                    <div className={styles.question_block}>
                        <input className={styles.question_text_input} value={title} placeholder={'Type a new title here'} onChange={this.onFormTitleChanged} />
                        <div className={styles.question_block_btn_area}>
                            <button className={styles.question_block_btn_new} onClick={this.onUpdateFormBtnClicked}>
                                Update Form
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}

export default connect((state) => {
    return {
        wallet: state.wallet,
    };
})(EditQuestion);

'''
'''--- src/components/modal/editquestion/editquestion.module.css ---
.root {
    min-width: 600px;
    max-height: 80vh;
    overflow: auto;
    padding: 30px;
}

.question_area {
    width: 100%;
    padding: 0 20px;
}

.question_block {
    margin: 10px 0px;
    width: 100%;
    display: flex;
    flex-direction: column;
}

.question_type_cbx {
    border-radius: 24px;
}

.question_type_cbx > div {
    border-radius: 24px;
    height: 48px;
}

.question_block_content {
    width: 100%;
    display: flex;
    flex-direction: column;
    margin-top: 20px;
}

.question_block_title {
    font-size: 16px;
    line-height: 25px;
}

.question_block_input {
    width: 100%;
    display: flex;
    flex-direction: column;
    margin-top: 10px;
}

.question_block_input_item {
    display: flex;
    margin: 10px 0px;
    align-items: center;
    margin: 10px 0;
}

.question_block_input_item_icon {
    width: 25px;
    height: 25px;
    display: flex;
    justify-content: center;
    align-items: center;
    border: 1px solid black;
    border-radius: 50%;
}

.question_block_input_item_value {
    margin-left: 10px;
    line-height: 25px;
}

.question_block_text_input_area {
    border-bottom: 1px solid var(--color-border);
    margin: 10px 0px 20px 0px;
}

.question_block_text_input {
    width: 100%;
    font-size: 17px;
    padding: 7px 0px;
    border: none;
    outline: none;
    background: none;
}

.question_block_btn_area {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 40px 0 0;
}

.btn {
    width: 48%;
    padding: 15px 0px;
    box-shadow: none;
    border: none;
    border-radius: 10px;
    font-size: 17px;
    font-weight: 600;
    cursor: pointer;
}

.question_block_btn_finish {
    composes: btn;
    background: var(--color-gradient-secondary);
    border-radius: 24px;
    color: var(--color-text-button);
}

.question_block_btn_new {
    composes: btn;
    background: var(--color-gradient);
    border-radius: 24px;
    color: var(--color-text-button);
}

.question_block_text_input_item {
    height: 28px;
    background-color: transparent;
    font-size: 14px;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    outline: none;
    padding: 0 10px;
}

.question_block_remove_button {
    height: 28px;
    padding: 0 10px;
    margin-left: 10px;
    background-color: var(--color-danger);
    font-size: 14px;
    color: var(--color-text-button);
    border-radius: 8px;
    outline: none;
    border: none;
}

.question_block_new_button {
    width: 218px;
    height: 32px;
    padding: 0 10px;
    margin: 10px 0 40px 0;
    background: var(--color-gradient);
    font-size: 14px;
    color: var(--color-text-button);
    border-radius: 8px;
    outline: none;
    border: none;
}

'''
'''--- src/components/modal/editquestion/index.js ---
import React from 'react';
import styles from './editquestion.module.css';
import Autocomplete from '@mui/material/Autocomplete';
import TextField from '@mui/material/TextField';
import { connect } from 'react-redux';

class EditQuestion extends React.Component {
    questionType = [
        {
            id: 0,
            title: 'Yes/No question',
        },
        {
            id: 1,
            title: 'Choose one answer',
        },
        {
            id: 2,
            title: 'Choose multi answer',
        },
        {
            id: 3,
            title: 'Fill to the blank space',
        },
    ];
    alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V'];
    qTypeId = -1;
    title = '';
    onceAnswer = [];
    updated = false;

    constructor(props) {
        super(props);
        this.state = {
            aValue: this.questionType[0],
        };
    }

    componentDidMount() {
        if (this.props) {
            const { type, title, meta } = this.props;
            this.qTypeId = type;
            this.onceAnswer = meta?.split?.(';')?.map((ans) => {
                return { value: ans };
            });
            this.setState({
                title,
                aValue: this.questionType[type],
                isViewUpdated: !this.state.isViewUpdated,
            });
        }
    }

    onQuestionTitleChanged = (e) => {
        this.setState({
            title: e.target.value,
        });
    };

    onUpdateQuestion = () => {
        const { contract } = this.props.wallet;
        const { id } = this.props;
        const { title } = this.state;
        let meta = '';
        if (this.onceAnswer.length > 0) {
            let metas = [];
            this.onceAnswer?.map((answer) => {
                metas.push(answer.value);
            });
            meta = metas.join(';');
        }

        this.props?.onAccept?.({ id, title, meta });
    };

    onRenderQuestionType = () => {
        if (this.qTypeId !== null) {
            switch (this.qTypeId) {
                case 0:
                    return this.onRenderYesNoQuestion();
                case 1:
                    return this.onRenderOnceQuestion();
                case 2:
                    return this.onRenderOnceQuestion();
                case 3:
                    return this.onRenderFillQuestion();
                default:
                    return;
            }
        }
    };

    onQuestionTypeChange = (e, value) => {
        this.setState({
            aValue: value,
        });
    };

    onRenderYesNoQuestion = () => {
        return (
            <div className={styles.question_block_content}>
                <div className={styles.question_block_title}>Your question</div>
                <div className={styles.question_block_input}>
                    <div className={styles.question_block_text_input_area}>
                        <input
                            className={styles.question_block_text_input}
                            placeholder={'Type your question title here'}
                            onChange={this.onQuestionTitleChanged}
                            value={this.state.title}
                        />
                    </div>
                    <div className={styles.question_block_input_item}>
                        <div className={styles.question_block_input_item_icon}>A</div>
                        <div className={styles.question_block_input_item_value}>True</div>
                    </div>
                    <div className={styles.question_block_input_item}>
                        <div className={styles.question_block_input_item_icon}>B</div>
                        <div className={styles.question_block_input_item_value}>False</div>
                    </div>
                </div>
            </div>
        );
    };

    onRenderFillQuestion = () => {
        return (
            <div className={styles.question_block_content}>
                <div className={styles.question_block_title}>Your question</div>
                <div className={styles.question_block_input}>
                    <div className={styles.question_block_text_input_area}>
                        <input
                            className={styles.question_block_text_input}
                            placeholder={'Type your question title here'}
                            onChange={this.onQuestionTitleChanged}
                            value={this.state.title}
                        />
                    </div>
                </div>
            </div>
        );
    };

    onAddNewOnceAnswer = () => {
        this.onceAnswer.push({ value: '' });
        this.setState({
            isViewUpdated: !this.state.isViewUpdated,
        });
    };

    onRemoveOnceAnswer = (index) => {
        this.onceAnswer.splice(index, 1);
        this.setState({
            isViewUpdated: !this.state.isViewUpdated,
        });
    };

    onOnceQuestionChangedValue = (e, answer) => {
        if (answer) {
            answer.value = e.target.value;
        }
        this.setState({
            isViewUpdated: !this.state.isViewUpdated,
        });
    };

    onRenderOnceQuestion = () => {
        return (
            <div className={styles.question_block_content}>
                <div className={styles.question_block_title}>Your question</div>
                <div className={styles.question_block_input}>
                    <div className={styles.question_block_text_input_area}>
                        <input
                            className={styles.question_block_text_input}
                            placeholder={'Type your question title here'}
                            onChange={this.onQuestionTitleChanged}
                            value={this.state.title}
                        />
                    </div>
                    {this.onceAnswer?.map?.((answer, index) => {
                        return (
                            <div key={index} className={styles.question_block_input_item}>
                                <div className={styles.question_block_input_item_icon}>{this.alphabet[index]}</div>
                                <div className={styles.question_block_input_item_value}>
                                    <input
                                        value={answer.value}
                                        onChange={(e) => this.onOnceQuestionChangedValue(e, answer)}
                                        className={styles.question_block_text_input_item}
                                    />
                                </div>
                                <button onClick={() => this.onRemoveOnceAnswer(index)} className={styles.question_block_remove_button}>
                                    Remove
                                </button>
                            </div>
                        );
                    })}
                </div>
                <button onClick={this.onAddNewOnceAnswer} className={styles.question_block_new_button}>
                    + Add New Answer
                </button>
            </div>
        );
    };

    render() {
        const { type } = this.props;
        return (
            <div className={styles.root}>
                <div className={styles.question_area}>
                    <h2>Edit Your Question</h2>
                    <div className={styles.question_block}>
                        <div className={styles.question_block_title}>Question Type</div>
                        <div className={styles.question_block_input}>
                            <Autocomplete
                                className={styles.question_type_cbx}
                                disablePortal
                                value={this.state.aValue}
                                disabled={true}
                                isOptionEqualToValue={(option, value) => option.id === value.id}
                                id='combo-box-demo'
                                options={this.questionType}
                                getOptionLabel={(option) => option.title || ''}
                                sx={{ width: 300 }}
                                onChange={this.onQuestionTypeChange}
                                renderInput={(params) => <TextField {...params} className={styles.question_type_cbx} />}
                            />
                        </div>
                        {this.onRenderQuestionType()}
                        <div className={styles.question_block_btn_area}>
                            {/* <button className={styles.question_block_btn_finish}>Finish</button> */}
                            <button className={styles.question_block_btn_new} onClick={this.onUpdateQuestion}>
                                Update Question
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}

export default connect((state) => {
    return {
        wallet: state.wallet,
    };
})(EditQuestion);

'''
'''--- src/components/navitem/navitem.js ---
import React from "react";
import styles from "./navitem.module.css";
import { useNavigate } from "react-router-dom";

const NavItem = ({ icon, content, actived, href }) => {
    const navigation = useNavigate();
    const onNavItemClicked = () => {
        navigation(href);
    };

    return (
        <div className={styles.root} onClick={onNavItemClicked}>
            <div className={actived ? styles.nav_icon_active : styles.nav_icon}>{icon}</div>
            <div className={actived ? styles.nav_content_active : styles.nav_content}>{content}</div>
        </div>
    );
};

export default NavItem;

'''
'''--- src/components/navitem/navitem.module.css ---
.root {
    display: flex;
    width: 100%;
    height: 100%;
    align-items: center;
    justify-content: center;
}

.root:hover > div,
.root:hover svg {
    color: var(--color-active) !important;
    font-weight: 500;
}

.active {
    color: var(--color-active) !important;
    font-weight: 500;
}

.nav_icon {
    width: 48;
}

.nav_icon svg {
    color: var(--color-secondary) !important;
}

.nav_icon_active {
    composes: nav_icon;
    composes: active;
}

.nav_icon_active svg {
    color: var(--color-active) !important;
    font-weight: 500;
}

.nav_content {
    font-size: 17px;
    font-weight: 300;
    margin-left: 10px;
    color: var(--color-secondary);
}

.nav_content_active {
    composes: nav_content;
    composes: active;
}

'''
'''--- src/components/notify/index.js ---
import React from 'react';
import Snackbar from '@mui/material/Snackbar';
import Alert from '../alert';
import Loading from '../loading';
import styles from './notify.module.css';

export default class Notify extends React.Component {
    render() {
        const { openSnack, snackMsg, alertType, openLoading, onClose } = this.props;
        return (
            <>
                <Loading open={openLoading} />
                <Snackbar
                    open={openSnack}
                    anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
                    className={styles.snack_area}
                    autoHideDuration={3000}
                    onClose={onClose}>
                    <Alert onClose={onClose} sx={{ width: '100%' }} severity={alertType}>
                        {snackMsg}
                    </Alert>
                </Snackbar>
            </>
        );
    }
}

'''
'''--- src/components/notify/notify.module.css ---
.snack_area{
    margin-top: 50px;
}
'''
'''--- src/components/question/fill.js ---
import React from 'react';
import styles from './question.module.css';
import { connect } from 'react-redux';

class FillQuestion extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            ans: '',
        };
    }

    componentDidMount() {
        const { title } = this.props;
        this.setState({
            isUpdatedView: !this.state.isUpdatedView,
        });
    }

    onSubmitAnswerBtnClicked = () => {
        const { formId, id } = this.props;
        const { ans } = this.state;

        this.props?.onSubmitAnswer?.({
            formId,
            questionId: id,
            answer: ans,
        });
    };

    onAnswerChanged = (e) => {
        this.setState({
            ans: e.target.value,
        });
    };

    render() {
        const { title } = this.props;
        const { ans } = this.state;
        return (
            <div className={styles.root}>
                <div className={styles.question_area}>
                    <div>Question:</div>
                    <div className={styles.question_title}>{title}</div>
                    <div>
                        <div className={styles.question_meta_root}>
                            <textarea
                                className={styles.question_meta_input}
                                value={ans}
                                onChange={this.onAnswerChanged}
                                placeholder={'Type your answer here'}
                            />
                        </div>
                    </div>
                    <div className={styles.submit_button_area}>
                        <button className={styles.submit_button} onClick={this.onSubmitAnswerBtnClicked}>
                            Next
                        </button>
                    </div>
                </div>
            </div>
        );
    }
}

export default connect((state) => {
    return {
        wallet: state.wallet,
    };
})(FillQuestion);

'''
'''--- src/components/question/multi.js ---
import { style } from '@mui/system';
import React from 'react';
import styles from './question.module.css';
import FiberManualRecordOutlinedIcon from '@mui/icons-material/FiberManualRecordOutlined';
import { connect } from 'react-redux';

class OnceQuestion extends React.Component {
    alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
    anws = [];
    constructor(props) {
        super(props);
        this.state = {};
    }

    componentDidMount() {
        const { title, meta } = this.props;
        meta?.split?.(';')?.map?.((pick) => {
            this.anws.push({
                active: false,
                value: pick,
            });
        });
        this.setState({
            isUpdatedView: !this.state.isUpdatedView,
        });
    }

    onQuestionClicked = (ans) => {
        ans.active = !ans.active;
        this.setState({
            isUpdatedView: !this.state.isUpdatedView,
        });
    };

    onRenderQuestionMeta = (ans, index) => {
        return (
            <div key={index} className={styles.question_meta_root} onClick={() => this.onQuestionClicked(ans)}>
                <div className={ans.active ? styles.question_multi_mark_active : styles.question_multi_mask}>{this.alphabet[index]}</div>
                <div className={styles.question_meta_value}>{ans.value}</div>
            </div>
        );
    };

    onSubmitAnswerBtnClicked = () => {
        const { formId, id } = this.props;
        const ans = this.anws.filter((x) => x.active)?.map((a) => a.value);
        const meta = ans.join('*');

        this.props?.onSubmitAnswer?.({
            formId,
            questionId: id,
            answer: meta,
        });
    };

    render() {
        const { title } = this.props;
        return (
            <div className={styles.root}>
                <div className={styles.question_area}>
                    <div>Question:</div>
                    <div className={styles.question_title}>{title}</div>
                    <div>
                        {this.anws?.map?.((ans, index) => {
                            return this.onRenderQuestionMeta(ans, index);
                        })}
                    </div>
                    <div className={styles.submit_button_area}>
                        <button className={styles.submit_button} onClick={this.onSubmitAnswerBtnClicked}>
                            Next
                        </button>
                    </div>
                </div>
            </div>
        );
    }
}

export default connect((state) => {
    return {
        wallet: state.wallet,
    };
})(OnceQuestion);

'''
'''--- src/components/question/once.js ---
import { style } from '@mui/system';
import React from 'react';
import styles from './question.module.css';
import FiberManualRecordOutlinedIcon from '@mui/icons-material/FiberManualRecordOutlined';
import { connect } from 'react-redux';

class OnceQuestion extends React.Component {
    alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
    constructor(props) {
        super(props);
        this.state = {
            active: -1,
        };
    }

    onQuestionClicked = (index) => {
        this.setState({
            active: index,
        });
    };

    onRenderQuestionMeta = (value, index) => {
        const { active } = this.state;
        return (
            <div key={index} className={styles.question_meta_root} onClick={() => this.onQuestionClicked(index)}>
                <div className={active === index ? styles.question_meta_mark_active : styles.question_meta_mark}>{this.alphabet[index]}</div>
                <div className={styles.question_meta_value}>{value}</div>
            </div>
        );
    };

    // onSubmitAnswerBtnClicked = () => {
    //     const { formId, id, meta } = this.props;
    //     const { contract } = this.props.wallet;
    //     const { active } = this.state;
    //     const picks = meta?.split?.(';');

    //     contract
    //         .submit_answer({
    //             formId,
    //             questionId: id,
    //             answer: picks[active],
    //         })
    //         .then((ret) => {
    //             this.props.onNext?.();
    //         });
    // };

    onSubmitAnswerBtnClicked = () => {
        const { formId, id, meta } = this.props;
        const { contract } = this.props.wallet;
        const { active } = this.state;
        const picks = meta?.split?.(';');

        this.props?.onSubmitAnswer?.({
            formId,
            questionId: id,
            answer: picks[active],
        });
    };

    render() {
        const { title, meta } = this.props;
        const picks = meta?.split?.(';');
        return (
            <div className={styles.root}>
                <div className={styles.question_area}>
                    <div>Question:</div>
                    <div className={styles.question_title}>{title}</div>
                    <div>
                        {picks?.map?.((pick, index) => {
                            return this.onRenderQuestionMeta(pick, index);
                        })}
                    </div>
                    <div className={styles.submit_button_area}>
                        <button className={styles.submit_button} onClick={this.onSubmitAnswerBtnClicked}>
                            Next
                        </button>
                    </div>
                </div>
            </div>
        );
    }
}

export default connect((state) => {
    return {
        wallet: state.wallet,
    };
})(OnceQuestion);

'''
'''--- src/components/question/question.module.css ---
.root {
    width: 700px;
    height: 500px;
    display: flex;
    justify-content: center;
    align-items: flex-end;
    flex-direction: column;
}

.question_area {
    width: 100%;
    padding: 20px;
    border-radius: 24px;
    box-shadow: var(--color-boxshadow);
    background: var(--color-background);
}

.question_title {
    font-size: 24px;
    font-weight: 500;
    margin: 10px 0px;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--color-border);
}

.submit_button_area {
    width: 100%;
    display: flex;
    align-items: flex-end;
    justify-content: flex-end;
}

.submit_button {
    padding: 10px 40px;
    border: none;
    background: var(--color-gradient);
    border-radius: 10px;
    cursor: pointer;
    font-size: 17px;
    color: var(--color-text-button);
}

.question_meta_root {
    display: flex;
    cursor: pointer;
    align-items: center;
}

.question_meta_root + .question_meta_root {
    margin-top: 10px;
}

.question_meta_root:hover .question_meta_mark,
.question_meta_root:hover .question_multi_mask {
    background: var(--color-gradient);
    color: var(--color-text-button);
    border: none;
}

.question_meta_icon {
    display: flex;
    align-items: center;
}

.question_meta_mark {
    width: 25px;
    height: 25px;
    border: 1px solid black;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.question_multi_mask {
    width: 25px;
    height: 25px;
    border: 1px solid black;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.question_multi_mark_active {
    width: 25px;
    height: 25px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--color-gradient);
    color: var(--color-text-button);
}

.question_meta_mark_active {
    width: 25px;
    height: 25px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--color-gradient);
    color: var(--color-text-button);
}

.question_meta_value {
    margin-left: 10px;
}

.question_meta_input {
    width: 100%;
    border: none;
    padding: 12px;
    margin: 20px 0;
    outline: none;
    background-color: transparent;
    font-size: 16px;
    resize: none;
    min-height: 150px;
    border: 1px solid var(--color-border);
}

'''
'''--- src/components/question/yesno.js ---
import { style } from '@mui/system';
import React from 'react';
import styles from './question.module.css';
import FiberManualRecordOutlinedIcon from '@mui/icons-material/FiberManualRecordOutlined';
import { connect } from 'react-redux';

class YesNoQuestion extends React.Component {
    alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
    constructor(props) {
        super(props);
        this.state = {
            active: -1,
        };
    }

    onQuestionClicked = (index) => {
        this.setState({
            active: index,
        });
    };

    onRenderQuestionMeta = (value, index) => {
        const { active } = this.state;
        return (
            <div key={index} className={styles.question_meta_root} onClick={() => this.onQuestionClicked(index)}>
                <div className={active === index ? styles.question_meta_mark_active : styles.question_meta_mark}>{this.alphabet[index]}</div>
                <div className={styles.question_meta_value}>{value}</div>
            </div>
        );
    };

    // onSubmitAnswerBtnClicked = () => {
    //     const { formId, id, meta } = this.props;
    //     const { contract } = this.props.wallet;
    //     const { active } = this.state;
    //     const picks = ['True', 'False'];

    //     contract
    //         .submit_answer({
    //             formId,
    //             questionId: id,
    //             answer: picks[active],
    //         })
    //         .then((ret) => {
    //             this.props.onNext?.();
    //         });
    // };

    onSubmitAnswerBtnClicked = () => {
        const { formId, id, meta } = this.props;
        const { active } = this.state;
        const picks = ['True', 'False'];

        this.props?.onSubmitAnswer?.({
            formId,
            questionId: id,
            answer: picks[active],
        });
    };

    render() {
        const { title, meta } = this.props;
        const { active } = this.state;

        return (
            <div className={styles.root}>
                <div className={styles.question_area}>
                    <div>Question:</div>
                    <div className={styles.question_title}>{title}</div>
                    <div>
                        <div className={styles.question_meta_root} onClick={() => this.onQuestionClicked(0)}>
                            <div className={active === 0 ? styles.question_meta_mark_active : styles.question_meta_mark}>A</div>
                            <div className={styles.question_meta_value}>True</div>
                        </div>
                        <div className={styles.question_meta_root} onClick={() => this.onQuestionClicked(1)}>
                            <div className={active === 1 ? styles.question_meta_mark_active : styles.question_meta_mark}>B</div>
                            <div className={styles.question_meta_value}>False</div>
                        </div>
                    </div>
                    <div className={styles.submit_button_area}>
                        <button className={styles.submit_button} onClick={this.onSubmitAnswerBtnClicked}>
                            Next
                        </button>
                    </div>
                </div>
            </div>
        );
    }
}

export default connect((state) => {
    return {
        wallet: state.wallet,
    };
})(YesNoQuestion);

'''
'''--- src/components/search/search.js ---
import React from "react";
import { Search as SearchIcon } from "@mui/icons-material";
import styles from "./search.module.css";

export default class SearchInput extends React.Component {
    searchValue = "";
    constructor(props) {
        super(props);
    }

    onSearchContentChange = (e) => {
        const { value } = e.target;
        this.searchValue = value;
    };

    onSearchButtonClicked = () => {
        this.props?.onSearch?.({ id: this.searchValue });
    };

    render() {
        return (
            <div className={styles.root}>
                <div className={styles.search_input_area}>
                    <input className={styles.search_input} placeholder={"Type your form ID here"} onChange={this.onSearchContentChange} />
                </div>
                <button className={styles.search_button_area} onClick={this.onSearchButtonClicked}>
                    <div className={styles.search_icon_area}>
                        <SearchIcon />
                    </div>
                    Search
                </button>
            </div>
        );
    }
}

'''
'''--- src/components/search/search.module.css ---
.root {
    width: 100%;
    height: 100%;
    display: flex;
    background: var(--color-background);
    box-shadow: var(--color-boxshadow);
    border-radius: 24px;
    padding: 5px 20px;
    margin: 10px 0;
}

.search_icon_area {
    width: 36px;
    height: 36px;
    display: flex;
    justify-content: flex-start;
    align-items: center;
}

.search_input_area {
    width: 120px;
    flex: 1;
    text-align: center;
    display: flex;
    justify-content: flex-start;
    align-items: center;
}

.search_button_area {
    text-align: center;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    background-color: transparent;
    outline: none;
    border: none;
    padding: 0px 18px;
    font-size: 16px;
}

.search_button_area:hover {
    color: var(--color-active);
    cursor: pointer;
}

.search_input {
    width: 100%;
    height: 100%;
    border: none;
    outline: none;
    font-size: 17px;
    background: none;
}

.search_input:focus {
    border: none;
}

'''
'''--- src/components/textinput/textinput.js ---
import React from "react";
import styles from "./textinput.module.css";

export default class TextInput extends React.Component {
    onValueChange = (e) => {
        this.props?.onChange?.(e.target.value);
    };

    render() {
        const { placeholder } = this.props;
        return (
            <div className={styles.root}>
                <input className={styles.input} onChange={this.onValueChange} placeholder={placeholder} />
            </div>
        );
    }
}

'''
'''--- src/components/textinput/textinput.module.css ---
.root {
    width: 100%;
    background: var(--color-background);
    box-shadow: var(--color-boxshadow);
    border-radius: 24px;
    padding: 5px 15px;
    margin: 10px 0px;
    min-height: 60px;
    display: flex;
    align-items: center;
}

.input {
    border: none;
    outline: none;
    padding: 5px;
    font-size: 17px;
    width: 100%;
    height: 100%;
    background: transparent;
    color: var(--color-primary);
}

'''
'''--- src/config.js ---
const CONTRACT_NAME = "mtoan2111.testnet";

function getConfig(env) {
    switch (env) {
        case "production":
        case "mainnet":
            return {
                networkId: "mainnet",
                nodeUrl: "https://rpc.mainnet.near.org",
                contractName: CONTRACT_NAME,
                walletUrl: "https://wallet.near.org",
                helperUrl: "https://helper.mainnet.near.org",
                explorerUrl: "https://explorer.mainnet.near.org",
            };
        case "development":
        case "testnet":
            return {
                networkId: "testnet",
                nodeUrl: "https://rpc.testnet.near.org",
                contractName: CONTRACT_NAME,
                walletUrl: "https://wallet.testnet.near.org",
                helperUrl: "https://helper.testnet.near.org",
                explorerUrl: "https://explorer.testnet.near.org",
            };
        case "betanet":
            return {
                networkId: "betanet",
                nodeUrl: "https://rpc.betanet.near.org",
                contractName: CONTRACT_NAME,
                walletUrl: "https://wallet.betanet.near.org",
                helperUrl: "https://helper.betanet.near.org",
                explorerUrl: "https://explorer.betanet.near.org",
            };
        case "local":
            return {
                networkId: "local",
                nodeUrl: "http://localhost:3030",
                keyPath: `${process.env.HOME}/.near/validator_key.json`,
                walletUrl: "http://localhost:4000/wallet",
                contractName: CONTRACT_NAME,
            };
        case "test":
        case "ci":
            return {
                networkId: "shared-test",
                nodeUrl: "https://rpc.ci-testnet.near.org",
                contractName: CONTRACT_NAME,
                masterAccount: "test.near",
            };
        case "ci-betanet":
            return {
                networkId: "shared-test-staging",
                nodeUrl: "https://rpc.ci-betanet.near.org",
                contractName: CONTRACT_NAME,
                masterAccount: "test.near",
            };
        default:
            throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
    }
}

module.exports = getConfig;

'''
'''--- src/global.css ---
:root {
  --color-primary: #23262f;
  --color-secondary: #8392ab;
  --color-danger: #ff3c3c;
  --color-link: #0e78f5;
  --color-active: #3b71fe;
  --color-border: #c5ccdf;
  --color-text-button: #ffffff;
  --color-gradient: linear-gradient(135deg, #0072ce, #4d7efc);
  --color-gradient-secondary: linear-gradient(90.93deg, rgb(249, 185, 25) 15.31%, rgb(254, 204, 54) 96.49%);
  --color-boxshadow: rgb(0 0 0 / 8%) 0px 20px 27px 0px;
  --color-background: rgba(255, 255, 255, 0.5);
}

html,
body {
  padding: 0;
  margin: 0;
  font-family: 'Bai Jamjuree', sans-serif;
  font-size: 16px;
  color: var(--color-primary);
  background: #ffffff;
}

.form_bg {
  background: #f6f6f6 no-repeat center top;
  background-image: url(../public/bg.jpg);
  background-size: cover;
  filter: blur(3rem);
  height: 88vh;
  left: 0;
  opacity: 0.5;
  position: fixed;
  top: 20px;
  width: 100%;
  z-index: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

input,
button {
  font-family: 'Bai Jamjuree', sans-serif;
}

button {
  cursor: pointer;
}

* {
  box-sizing: border-box;
}

::-webkit-scrollbar {
  width: 8px;
  height: 8px;
  border-radius: 10px;
}
::-webkit-scrollbar-track {
  box-shadow: inset 0 0 4px rgb(150, 146, 146);
  border-radius: 10px;
}
::-webkit-scrollbar-thumb {
  background: #bfbdc5;
  border-radius: 10px;
}
::-webkit-scrollbar-thumb:hover {
  background: #c9c6d6;
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" href="./assets/favicon.ico" />
        <link rel="apple-touch-icon" href="./assets/favicon.ico" />
        <title>Welcome to NEAR</title>
        <link rel="stylesheet" href="global.css" />
    </head>
    <body>
        <div id="root"></div>
        <script src="./bundle.js"></script>
    </body>
</html>

'''
'''--- src/index.js ---
import "regenerator-runtime/runtime";
import React from "react";
import ReactDOM from "react-dom";
import { initContract } from "./utils";
import App from "./App";

window.nearInitPromise = initContract()
    .then((walletProps) => {
        ReactDOM.render(<App {...walletProps} />, document.querySelector("#root"));
    })
    .catch(console.error);

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['getGreeting'],
    changeMethods: [],
    sender: window.accountId
  })
})

test('getGreeting', async () => {
  const message = await window.contract.getGreeting({ accountId: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/pages/analysis/formanalysis.module.css ---
.root {
    display: flex;
    min-width: 600px;
    width: 30%;
    flex-direction: column;
    height: max-content;
}

.your_form_title {
    font-size: 28px;
    font-weight: 600;
    margin: 10px 0 20px;
    /* border-bottom: 1px solid var(--color-border); */
    padding-bottom: 10px;
}

.your_form_text {
    margin: 8px 0px;
}

.nothing_text {
    font-size: 18px;
    font-style: italic;
    color: var(--color-secondary);
    margin: 20px;
}

.your_form {
    width: 100%;
    display: flex;
    flex-direction: column;
}

.create_form_input {
    border: none;
}

.participant_root {
    display: flex;
    width: 100%;
    flex-wrap: wrap;
    background: var(--color-background);
    box-shadow: var(--color-boxshadow);
    border-radius: 24px;
    padding: 20px;
    margin-top: 30px;
}

.participant_area {
    display: flex;
    width: 48%;
    margin: 15px 0px;
    align-items: center;
    cursor: pointer;
}

.participant_area_avata {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 20px;
    font-weight: 900;
    text-transform: uppercase;
    color: var(--color-text-button);
}

.participant_area_name {
    font-size: 18px;
    font-weight: 500;
    margin-left: 15px;
    color: var(--color-link);
}

.participant_area:hover > .participant_area_name {
    text-decoration: underline;
}

'''
'''--- src/pages/analysis/index.js ---
import React, { useEffect, useState } from "react";
import { useParams, useLocation, useNavigate } from "react-router-dom";
import Notify from "../../components/notify";
import styles from "./formanalysis.module.css";

const FormAnalysisDetail = () => {
    const color = [
        "linear-gradient(135deg, #007AFF, #23D2FF)",
        "linear-gradient(135deg, #FFD3A5, #FD6585)",
        "linear-gradient(135deg, #FC3B63, #711DDF)",
        "linear-gradient(135deg, #69F9CC, #F8B0AD, #F6E884)",
        "linear-gradient(135deg, #EE9AB1, #FCFF00)",
        "linear-gradient(135deg, #EE9AE5, #5961F9)",
        "#FFD166",
        "#FA8F54",
    ];
    let participantRaws = [];
    const [form, setForm] = useState(null);
    const [participants, setParticipants] = useState([]);
    const [openSnack, setOpenSnack] = useState(false);
    const [snackMsg, setSnackMsg] = useState("");
    const [alertType, setAlertType] = useState("success");
    const [openLoading, setOpenLoading] = useState(false);
    const navigate = useNavigate();

    useEffect(() => {
        onGetForm();
    }, []);

    const useQuery = () => {
        const { search } = useLocation();
        return new URLSearchParams(search);
    };

    const query = useQuery();

    const onGetForm = () => {
        const { contract, walletConnection } = window;
        const userId = walletConnection.getAccountId();
        const id = query.get("id");
        contract
            ?.get_form?.({
                userId,
                id,
            })
            .then((formret) => {
                setForm(formret);
                onGetParticipants(formret);
            })
            .catch((err) => {
                console.log(err);
            });
    };

    const onGetParticipants = (form) => {
        const { contract, walletConnection } = window;
        const { id, q_participant } = form;
        const num_page = parseInt(q_participant / 5) + 1;
        const page_arr = new Array(num_page).fill(0);
        setParticipants([]);
        participantRaws = [];
        page_arr.map((page, index) => {
            contract
                .get_participants({
                    formId: id,
                    page: index + 1,
                })
                .then((data) => {
                    if (data) {
                        const pIndex = participantRaws.findIndex((x) => x?.page === data?.page);
                        if (pIndex === -1) {
                            participantRaws.push(data);
                            participantRaws.sort((a, b) => {
                                if (a.page < b.page) return -1;
                                if (a.page > b.page) return 1;
                                return 0;
                            });
                            let participants = [];
                            participantRaws.map((raw) => {
                                participants = [...participants, ...(raw?.data || [])];
                            });

                            setParticipants([...participants]);
                        }
                    }
                });
        });
    };

    const onParticipantDetailClicked = (participant) => {
        navigate(`/participant-result?u=${participant}&id=${form.id}`);
    };

    const onCloseSnack = () => {
        setOpenSnack(false);
    };

    const onRenderParticipant = (participant, index) => {
        const shortName = `${participant?.[0]}${participant?.[1]}`;
        return (
            <div className={styles.participant_area} key={index} onClick={() => onParticipantDetailClicked(participant)}>
                <div
                    className={styles.participant_area_avata}
                    style={{
                        background: onRandomColorBg(),
                    }}
                >
                    {shortName}
                </div>
                <div className={styles.participant_area_name}>{participant}</div>
            </div>
        );
    };

    const onRandomColorBg = () => {
        return color[Math.floor(Math.random() * 5)];
    };

    const onRenderFormDetail = () => {
        if (form) {
            const { title, q_counter, q_participant } = form;
            return (
                <div className={styles.root}>
                    <div className={styles.your_form_title}>{title}</div>
                    <div className={styles.your_form_text}>Total Question(s): {q_counter}</div>
                    <div className={styles.your_form_text}>Total Participant(s): {q_participant}</div>
                    {participants?.length > 0 ? (
                        <div className={styles.participant_root}>
                            {participants?.map((part, index) => {
                                return onRenderParticipant(part, index);
                            })}
                        </div>
                    ) : (
                        <div className={styles.participant_root}>
                            <div className={styles.nothing_text}>Nothing to display</div>
                        </div>
                    )}
                </div>
            );
        } else {
            return <div>The form is not existed or You do not have permission to see this form analysis</div>;
        }
    };

    return (
        <>
            <Notify openLoading={openLoading} openSnack={openSnack} alertType={alertType} snackMsg={snackMsg} onClose={onCloseSnack} />
            {onRenderFormDetail()}
        </>
    );
};

export default FormAnalysisDetail;

'''
'''--- src/pages/api/hello.js ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction

export default function handler(req, res) {
  res.status(200).json({ name: 'John Doe' })
}

'''
'''--- src/pages/create-question/index.js ---
import React, { useState } from "react";
import { connect } from "react-redux";
import styles from "./question.module.css";
import Autocomplete from "@mui/material/Autocomplete";
import TextField from "@mui/material/TextField";
import Notify from "../../components/notify";
import { useLocation, useNavigate } from "react-router-dom";

const Question = () => {
    const alphabet = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V"];
    const questionType = [
        {
            id: 0,
            title: "Yes/No question",
        },
        {
            id: 1,
            title: "Choose one answer",
        },
        {
            id: 2,
            title: "Choose multi answer",
        },
        {
            id: 3,
            title: "Fill to the blank space",
        },
    ];

    const [onceAnswer, setOnceAnswer] = useState([]);
    const [qTypeId, setQTypeId] = useState(null);
    const [title, setTitle] = useState("");
    const [openSnack, setOpenSnack] = useState(false);
    const [snackMsg, setSnackMsg] = useState("");
    const [alertType, setAlertType] = useState("success");
    const [openLoading, setOpenLoading] = useState(false);

    const useQuery = () => {
        const { search } = useLocation();
        return new URLSearchParams(search);
    };

    const query = useQuery();
    const navigate = useNavigate();

    const onQuestionTypeChange = (e, newValue) => {
        if (newValue) {
            setQTypeId(newValue.id);
        } else {
            setQTypeId(null);
        }
    };

    const onCreateNewQuestion = () => {
        setOpenLoading(true);
        const formId = query.get("form_id");
        const { contract } = window;
        if (qTypeId === null) {
            return onShowResult({
                type: "error",
                msg: "Question type could not be empty",
            });
        }

        if (title === "" || title === null) {
            return onShowResult({
                type: "error",
                msg: "Question title could not be empty",
            });
        }

        let meta = "";
        if (qTypeId !== 0 && qTypeId !== 3 && onceAnswer.length < 2) {
            return onShowResult({
                type: "error",
                msg: "The answer need to be greater than equal two",
            });
        }
        if (onceAnswer.length > 0) {
            let metas = [];
            let err = null;
            onceAnswer?.map((answer) => {
                if (answer.value === "") {
                    err = {
                        type: "error",
                        msg: "The answer could not be empty",
                    };
                }
                metas.push(answer.value?.trim?.());
            });
            if (err !== null) {
                return onShowResult(err);
            }
            if (metas.length !== new Set(metas).size) {
                return onShowResult({
                    type: "error",
                    msg: "The answer could not be dupplicated",
                });
            }
            meta = metas.join(";");
        }

        contract
            .new_question(
                {
                    formId,
                    type: qTypeId,
                    title,
                    meta,
                },
                300000000000000,
            )
            .then((question) => {
                if (question) {
                    setTitle("");
                    setQTypeId(null);
                    setOnceAnswer([]);
                    onShowResult({
                        type: "success",
                        msg: "New question has been added to this form",
                        title: "",
                    });
                } else {
                    onShowResult({
                        type: "error",
                        msg: "Create new question failure",
                    });
                }
            })
            .catch((err) => {
                console.log(err);
                onShowResult({
                    type: "error",
                    msg: err,
                });
            });
    };

    const onCloseSnack = () => {
        setOpenSnack(false);
    };

    const onShowResult = ({ type, msg, nTitle }) => {
        setOpenLoading(false);
        setOpenSnack(true);
        setAlertType(type);
        setSnackMsg(msg);
        setTitle(nTitle || title);
    };

    const onFinishCreateQuestion = () => {
        const formId = query.get("form_id");
        navigate(`/form-detail?id=${formId}`);
    };

    const onQuestionTitleChanged = (e) => {
        setTitle(e.target.value);
    };

    const onRenderQuestionType = () => {
        if (qTypeId !== null) {
            switch (qTypeId) {
                case 0:
                    return onRenderYesNoQuestion();
                case 1:
                    return onRenderOnceQuestion();
                case 2:
                    return onRenderOnceQuestion();
                case 3:
                    return onRenderFillQuestion();
                default:
                    return;
            }
        }
    };

    const onRenderYesNoQuestion = () => {
        return (
            <div className={styles.question_block_content}>
                <div className={styles.question_block_title}>Your question</div>
                <div className={styles.question_block_input}>
                    <div className={styles.question_block_text_input_area}>
                        <input
                            className={styles.question_block_text_input}
                            placeholder={"Type your question title here"}
                            onChange={onQuestionTitleChanged}
                            value={title}
                        />
                    </div>
                    <div className={styles.question_block_input_item}>
                        <div className={styles.question_block_input_item_icon}>A</div>
                        <div className={styles.question_block_input_item_value}>True</div>
                    </div>
                    <div className={styles.question_block_input_item}>
                        <div className={styles.question_block_input_item_icon}>B</div>
                        <div className={styles.question_block_input_item_value}>False</div>
                    </div>
                </div>
            </div>
        );
    };

    const onRenderFillQuestion = () => {
        return (
            <div className={styles.question_block_content}>
                <div className={styles.question_block_title}>Your question</div>
                <div className={styles.question_block_input}>
                    <div className={styles.question_block_text_input_area}>
                        <input
                            className={styles.question_block_text_input}
                            placeholder={"Type your question title here"}
                            onChange={onQuestionTitleChanged}
                            value={title}
                        />
                    </div>
                </div>
            </div>
        );
    };

    const onAddNewOnceAnswer = () => {
        console.log(123);
        onceAnswer.push({ value: "" });
        setOnceAnswer([...onceAnswer]);
    };

    const onRemoveOnceAnswer = (index) => {
        onceAnswer.splice(index, 1);
        setOnceAnswer([...onceAnswer]);
    };

    const onOnceQuestionChangedValue = (e, answer) => {
        if (answer) {
            answer.value = e.target.value;
            setOnceAnswer([...onceAnswer]);
        }
    };

    const onRenderOnceQuestion = () => {
        return (
            <div className={styles.question_block_content}>
                <div className={styles.question_block_title}>Your question</div>
                <div className={styles.question_block_input}>
                    <div className={styles.question_block_text_input_area}>
                        <input
                            className={styles.question_block_text_input}
                            placeholder={"Type your question title here"}
                            onChange={onQuestionTitleChanged}
                            value={title}
                        />
                    </div>
                    {onceAnswer?.map?.((answer, index) => {
                        return (
                            <div key={index} className={styles.question_block_input_item}>
                                <div className={styles.question_block_input_item_icon}>{alphabet[index]}</div>
                                <div className={styles.question_block_input_item_value}>
                                    <input
                                        value={answer.value}
                                        onChange={(e) => onOnceQuestionChangedValue(e, answer)}
                                        className={styles.question_block_text_input_item}
                                    />
                                </div>
                                <button onClick={() => onRemoveOnceAnswer(index)} className={styles.question_block_remove_button}>
                                    Remove
                                </button>
                            </div>
                        );
                    })}
                </div>
                <button onClick={onAddNewOnceAnswer} className={styles.question_block_new_button}>
                    + Add New Answer
                </button>
            </div>
        );
    };

    return (
        <>
            <Notify openLoading={openLoading} openSnack={openSnack} alertType={alertType} snackMsg={snackMsg} onClose={onCloseSnack} />
            <div className={styles.root}>
                <div className={styles.question_area}>
                    <h2>Create New Question</h2>
                    <div className={styles.question_block}>
                        <div className={styles.question_block_title}>Question Type</div>
                        <div className={styles.question_block_input}>
                            <Autocomplete
                                className={styles.question_type_cbx}
                                disablePortal
                                id="combo-box-demo"
                                options={questionType}
                                getOptionLabel={(option) => option.title}
                                sx={{ width: 300 }}
                                onChange={onQuestionTypeChange}
                                renderInput={(params) => <TextField {...params} className={styles.question_type_cbx} />}
                            />
                        </div>
                        {onRenderQuestionType()}
                        <div className={styles.question_block_btn_area}>
                            <button className={styles.question_block_btn_finish} onClick={onFinishCreateQuestion}>
                                Finish
                            </button>
                            <button className={styles.question_block_btn_new} onClick={onCreateNewQuestion}>
                                New Question
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
};

export default connect((state) => {
    return {
        wallet: state.wallet,
    };
})(Question);

'''
'''--- src/pages/create-question/question.module.css ---
.root {
    min-width: 600px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.question_area {
    width: 100%;
    border-radius: 24px;
    padding: 20px;
    margin-bottom: 15%;
    margin-top: 10%;
    box-shadow: var(--color-boxshadow);
    background: var(--color-background);
}

.question_block {
    margin: 10px 0px;
    width: 100%;
    display: flex;
    flex-direction: column;
}

.question_type_cbx {
    border-radius: 24px;
}

.question_type_cbx > div {
    border-radius: 24px;
    height: 48px;
}

.question_block_content {
    width: 100%;
    display: flex;
    flex-direction: column;
    margin-top: 20px;
}

.question_block_title {
    font-size: 16px;
    line-height: 25px;
}

.question_block_input {
    width: 100%;
    display: flex;
    flex-direction: column;
    margin-top: 10px;
}

.question_block_input_item {
    display: flex;
    margin: 10px 0px;
    align-items: center;
    margin: 10px 0;
}

.question_block_input_item_icon {
    width: 25px;
    height: 25px;
    display: flex;
    justify-content: center;
    align-items: center;
    border: 1px solid black;
    border-radius: 50%;
}

.question_block_input_item_value {
    margin-left: 10px;
    line-height: 25px;
}

.question_block_text_input_area {
    border-bottom: 1px solid var(--color-border);
    margin: 10px 0px 20px 0px;
}

.question_block_text_input {
    width: 100%;
    font-size: 17px;
    padding: 7px 0px;
    border: none;
    outline: none;
    background: none;
}

.question_block_btn_area {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 40px 0 0;
}

.btn {
    width: 48%;
    padding: 15px 0px;
    box-shadow: none;
    border: none;
    border-radius: 10px;
    font-size: 17px;
    font-weight: 600;
    cursor: pointer;
}

.question_block_btn_finish {
    composes: btn;
    background: var(--color-gradient-secondary);
    border-radius: 24px;
    color: var(--color-text-button);
}

.question_block_btn_new {
    composes: btn;
    background: var(--color-gradient);
    border-radius: 24px;
    color: var(--color-text-button);
}

.question_block_text_input_item {
    height: 28px;
    background-color: transparent;
    font-size: 14px;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    outline: none;
    padding: 0 10px;
}

.question_block_remove_button {
    height: 28px;
    padding: 0 10px;
    margin-left: 10px;
    background-color: var(--color-danger);
    font-size: 14px;
    color: var(--color-text-button);
    border-radius: 8px;
    outline: none;
    border: none;
}

.question_block_new_button {
    width: 218px;
    height: 32px;
    padding: 0 10px;
    margin: 10px 0 40px 0;
    background: var(--color-gradient);
    font-size: 14px;
    color: var(--color-text-button);
    border-radius: 8px;
    outline: none;
    border: none;
}

.snack_area {
    margin-top: 50px;
}

'''
'''--- src/pages/dashboard/dashboard.module.css ---
.root {
    min-width: 600px;
    width: 30%;
    height: 500px;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    flex-direction: column;
}

.dashboard_join {
    font-size: 28px;
    font-weight: 600;
    margin-bottom: 10px;
}

.search_area {
    width: 100%;
    display: flex;
}

'''
'''--- src/pages/dashboard/index.js ---
import React, { useState } from "react";
import styles from "./dashboard.module.css";
import SearchInput from "../../components/search/search";
import Notify from "../../components/notify";
import { useNavigate } from "react-router-dom";

const Dashboard = () => {
    const [openSnack, setOpenSnack] = useState(false);
    const [snackMsg, setSnackMsg] = useState("");
    const [alertType, setAlertType] = useState("success");
    const [openLoading, setOpenLoading] = useState(false);

    const navigate = useNavigate();

    const onJoinForm = ({ id }) => {
        if (id === "") {
            return this.onShowResult({
                type: "error",
                msg: "Form id could not be empty",
            });
        }
        navigate(`/form-answer?id=${id}`);
    };

    const onShowResult = ({ type, msg }) => {
        setOpenLoading(false);
        setOpenSnack(true);
        setAlertType(type);
        setSnackMsg(msg);
    };

    const onCloseSnack = () => {
        setOpenSnack(false);
    };

    return (
        <>
            <Notify openLoading={openLoading} openSnack={openSnack} alertType={alertType} snackMsg={snackMsg} onClose={onCloseSnack} />
            <div className={styles.root}>
                <div className={styles.dashboard_join}>Join a form now</div>
                <div className={styles.search_area}>
                    <SearchInput onSearch={onJoinForm} />
                </div>
            </div>
        </>
    );
};

export default Dashboard;

'''
'''--- src/pages/form-analysis/formanalysis.module.css ---
.root {
    display: flex;
    min-width: 600px;
    width: 30%;
    flex-direction: column;
    height: max-content;
}

.your_form_title {
    font-size: 28px;
    font-weight: 600;
    margin: 10px 0 20px;
    /* border-bottom: 1px solid var(--color-border); */
    padding-bottom: 10px;
}

.your_form_text {
    margin: 8px 0px;
}

.nothing_text {
    font-size: 18px;
    font-style: italic;
    color: var(--color-secondary);
    margin: 20px;
}

.your_form {
    width: 100%;
    display: flex;
    flex-direction: column;
}

.create_form_input {
    border: none;
}

.participant_root {
    display: flex;
    width: 100%;
    flex-wrap: wrap;
    background: var(--color-background);
    box-shadow: var(--color-boxshadow);
    border-radius: 24px;
    padding: 20px;
    margin-top: 30px;
}

.participant_area {
    display: flex;
    width: 48%;
    margin: 15px 0px;
    align-items: center;
    cursor: pointer;
}

.participant_area_avata {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 20px;
    font-weight: 900;
    text-transform: uppercase;
    color: var(--color-text-button);
}

.participant_area_name {
    font-size: 18px;
    font-weight: 500;
    margin-left: 15px;
    color: var(--color-link);
}

.participant_area:hover > .participant_area_name {
    text-decoration: underline;
}

'''
'''--- src/pages/form-analysis/index.js ---
import React, { useEffect, useState } from "react";
import { connect } from "react-redux";
// import Router, { withRouter } from 'next/router';
import Form from "../../components/form/form";
import styles from "./formanalysis.module.css";
import { useNavigate } from "react-router-dom";

// class FormAnalysis extends React.Component {
//     raws = [];
//     forms = [];
//     constructor(props) {
//         super(props);
//         state = {
//             total: 0,
//         };
//     }

//     componentDidMount() {
//         onGetFormsCount();
//     }

//     onGetFormsCount = () => {
//         const { contract, walletConnection } = window;
//         const userId = walletConnection.getAccountId();
//         contract
//             ?.get_form_count?.({
//                 userId: userId,
//             })
//             .then((total) => {
//                 onGetForms({ total });
//                 setState({
//                     total,
//                 });
//             })
//             .catch((err) => {
//                 console.log(err);
//             });
//     };

//     onGetForms = ({ total }) => {
//         try {
//             const { contract, walletConnection } = window;
//             const num_page = parseInt(total / 5) + 1;
//             const page_arr = new Array(num_page).fill(0);
//             forms = [];
//             const userId = walletConnection.getAccountId();
//             page_arr.map((page, index) => {
//                 contract
//                     .get_forms({
//                         userId,
//                         page: index + 1,
//                     })
//                     .then((data) => {
//                         if (data) {
//                             const pIndex = raws.findIndex((x) => x?.page === data?.page);
//                             if (pIndex === -1) {
//                                 raws.push(data);
//                                 raws.sort((a, b) => {
//                                     if (a.page < b.page) return -1;
//                                     if (a.page > b.page) return 1;
//                                     return 0;
//                                 });
//                                 let forms = [];
//                                 raws.map((raw) => {
//                                     forms = [...forms, ...(raw?.data || [])];
//                                 });
//                                 forms = forms;
//                                 setState({
//                                     isViewUpdated: !state.isViewUpdated,
//                                 });
//                             }
//                         }
//                     });
//             });
//         } catch (err) {}
//     };

//     onShowFormDetail = ({ id }) => {
//         Router.push(`form-analysis/${id}`);
//     };

//     render() {
//         return (
//             <div className={styles.root}>
//                 <div className={styles.your_form_title}>Your form(s): {state.total}</div>
//                 <div className={styles.your_form}>
//                     {forms?.map?.((form) => {
//                         const { id, owner, q_counter, title, q_participant } = form;
//                         return (
//                             <Form
//                                 key={id}
//                                 id={id}
//                                 owner={owner}
//                                 qCounter={q_counter}
//                                 qParticipant={q_participant}
//                                 title={title}
//                                 onViewMore={onShowFormDetail}
//                             />
//                         );
//                     })}
//                 </div>
//             </div>
//         );
//     }
// }

// export default connect((state) => {
//     return {
//         wallet: state.wallet,
//     };
// })(withRouter(FormAnalysis));

const FormAnalysis = () => {
    let raws = [];
    // let forms = [];
    const [total, setTotal] = useState(0);
    const [forms, setForm] = useState([]);
    const navigate = useNavigate();
    // constructor(props) {
    //     super(props);
    //     state = {
    //         total: 0,
    //     };
    // }

    useEffect(() => {
        onGetFormsCount();
    }, []);

    const onGetFormsCount = () => {
        const { contract, walletConnection } = window;
        const userId = walletConnection.getAccountId();
        contract
            ?.get_form_count?.({
                userId: userId,
            })
            .then((total) => {
                onGetForms({ total });
                setTotal(total);
            })
            .catch((err) => {
                console.log(err);
            });
    };

    const onGetForms = ({ total }) => {
        try {
            const { contract, walletConnection } = window;
            const num_page = parseInt(total / 5) + 1;
            const page_arr = new Array(num_page).fill(0);
            // forms = [];
            setForm([]);
            const userId = walletConnection.getAccountId();
            page_arr.map((page, index) => {
                contract
                    .get_forms({
                        userId,
                        page: index + 1,
                    })
                    .then((data) => {
                        if (data) {
                            const pIndex = raws.findIndex((x) => x?.page === data?.page);
                            if (pIndex === -1) {
                                raws.push(data);
                                raws.sort((a, b) => {
                                    if (a.page < b.page) return -1;
                                    if (a.page > b.page) return 1;
                                    return 0;
                                });
                                let forms = [];
                                raws.map((raw) => {
                                    forms = [...forms, ...(raw?.data || [])];
                                });
                                // forms = forms;
                                setForm([...forms]);
                            }
                        }
                    });
            });
        } catch (err) {
            console.log(err);
        }
    };

    const onShowFormDetail = ({ id }) => {
        navigate(`/form-analysis-detail?id=${id}`);
    };

    return (
        <div className={styles.root}>
            <div className={styles.your_form_title}>Your form(s): {total}</div>
            <div className={styles.your_form}>
                {forms?.map?.((form) => {
                    const { id, owner, q_counter, title, q_participant } = form;
                    return (
                        <Form key={id} id={id} owner={owner} qCounter={q_counter} qParticipant={q_participant} title={title} onViewMore={onShowFormDetail} />
                    );
                })}
            </div>
        </div>
    );
};

export default connect((state) => {
    return {
        wallet: state.wallet,
    };
})(FormAnalysis);

'''
'''--- src/pages/form-answer/form.module.css ---
.root {
    display: flex;
    align-items: center;
}

.snack_area {
    margin-top: 50px;
}

.no_question_area {
    display: flex;
    font-size: 18px;
    font-weight: 600;
}

.result_link {
    color: var(--color-link);
    cursor: pointer;
    margin-left: 5px;
}

.result_link:hover {
    text-decoration: underline;
}

.question_meta_input {
    border-bottom: 1px solid var(--color-border);
}

.question_meta_root {
    border-bottom: 1px solid var(--color-border);
}

'''
'''--- src/pages/form-answer/index.js ---
import React, { useEffect, useState } from "react";
import YesNoQuestion from "../../components/question/yesno";
import OnceQuestion from "../../components/question/once";
import MultiQuestion from "../../components/question/multi";
import FillQuestion from "../../components/question/fill";
import styles from "./form.module.css";
import Notify from "../../components/notify";
import { useLocation, useNavigate } from "react-router-dom";

const FormAnswer = () => {
    const [openSnack, setOpenSnack] = useState(false);
    const [snackMsg, setSnackMsg] = useState("");
    const [alertType, setAlertType] = useState("success");
    const [openLoading, setOpenLoading] = useState(false);
    const [formId, setFormId] = useState("");
    const [question, setQuestion] = useState({});

    const useQuery = () => {
        const { search } = useLocation();
        return new URLSearchParams(search);
    };

    const query = useQuery();
    const navigate = useNavigate();

    useEffect(() => {
        try {
            const { contract, walletConnection, nearConfig } = window;
            if (!walletConnection.isSignedIn()) {
                return walletConnection?.requestSignIn?.(nearConfig?.contractName);
            }

            const id = query.get("id");
            setFormId(id);
            const userId = walletConnection.getAccountId();
            onLoadingQuestion({ formId: id, userId });
        } catch (err) {
            console.log(err);
            onLoadingCompleted();
        }
    }, []);

    const onLoadingQuestion = ({ formId, userId }) => {
        setOpenLoading(true);
        setQuestion(null);
        const { contract } = window;
        contract
            .get_question({
                formId,
                userId,
            })
            .then((questionret) => {
                if (questionret) {
                    setQuestion({ ...questionret });
                    onLoadingCompleted();
                } else {
                    setQuestion({});
                    onLoadingCompleted();
                }
            })
            .catch((err) => {
                console.log(err);
                setQuestion({});
                onLoadingCompleted();
            });
    };

    const onGetNextQuestion = () => {
        const { walletConnection } = window;
        const id = query.get("id");
        const userId = walletConnection.getAccountId();
        onLoadingQuestion({ formId: id, userId });
    };

    const onLoadingCompleted = () => {
        setOpenLoading(false);
    };

    const onSubmitAnswer = ({ formId, questionId, answer }) => {
        const { contract } = window;
        if (typeof answer === "undefined" || answer === null || answer === "") {
            return onShowResult({
                type: "error",
                msg: "Please choose or type your answer before submit",
            });
        }

        setOpenLoading(true);

        contract
            .submit_answer(
                {
                    formId,
                    questionId,
                    answer,
                },
                300000000000000,
            )
            .then((ret) => {
                if (ret) {
                    onShowResult({
                        type: "success",
                        msg: "Answer has been submited",
                    });
                } else {
                    onShowResult({
                        type: "error",
                        msg: "Submit question failure Or The question has been deleted on time",
                    });
                }
                onGetNextQuestion();
            })
            .catch((err) => {
                onShowResult({
                    type: "error",
                    msg: String(err),
                });
            });
    };

    const onCloseSnack = () => {
        setOpenSnack(false);
    };

    const onShowResult = ({ type, msg }) => {
        setOpenLoading(false);
        setOpenSnack(true);
        setAlertType(type);
        setSnackMsg(msg);
    };

    const onRenderQuestion = () => {
        if (question !== null) {
            const { id, type, title, meta } = question;
            switch (type) {
                case 0:
                    return <YesNoQuestion formId={formId} id={id} title={title} meta={meta} onSubmitAnswer={onSubmitAnswer} />;
                case 1:
                    return <OnceQuestion formId={formId} id={id} title={title} meta={meta} onSubmitAnswer={onSubmitAnswer} />;
                case 2:
                    return <MultiQuestion formId={formId} id={id} title={title} meta={meta} onSubmitAnswer={onSubmitAnswer} />;
                case 3:
                    return <FillQuestion formId={formId} id={id} title={title} meta={meta} onSubmitAnswer={onSubmitAnswer} />;
                default:
                    return onRenderNoQuestion();
            }
        }
        return onRenderNoQuestion();
    };

    const onRenderLoadingQuestion = () => {};

    const onViewResultClicked = () => {
        const { walletConnection } = window;
        const userId = walletConnection.getAccountId();
        navigate(`/participant-result?u=${userId}&id=${formId}`);
    };

    const onRenderNoQuestion = () => {
        return (
            <div className={styles.no_question_area}>
                Your exam has already done. View your result{" "}
                <span className={styles.result_link} onClick={onViewResultClicked}>
                    now
                </span>
            </div>
        );
    };
    return (
        <>
            <Notify openLoading={openLoading} openSnack={openSnack} alertType={alertType} snackMsg={snackMsg} onClose={onCloseSnack} />
            <div className={styles.root}>{onRenderQuestion()}</div>
        </>
    );
};

export default FormAnswer;

'''
'''--- src/pages/form-create/formcreate.module.css ---
.root {
    display: flex;
    min-width: 600px;
    width: 30%;
    flex-direction: column;
    margin-top: 50px;
}

.new_form_title {
    font-size: 28px;
    font-weight: 600;
    margin-bottom: 20px;
}

.new_form_area {
    display: flex;
    align-items: center;
}

.create_form_btn_area {
    width: 200px;
    margin-left: 20px;
    overflow: hidden;
    display: flex;
}

.create_form_btn {
    width: 100%;
    height: 60px;
    border-radius: 24px;
    border: none;
    outline: none;
    box-shadow: none;
    background: var(--color-gradient);
    font-size: 16px;
    font-weight: 600;
    color: var(--color-text-button);
}

.create_form_btn:hover {
    background-color: royalblue;
}

.your_form_title {
    font-size: 28px;
    font-weight: 600;
    margin: 50px 0 10px 0;
}

.your_form {
    width: 100%;
    display: flex;
    flex-direction: column;
}

.create_form_input {
    border: none;
}

'''
'''--- src/pages/form-create/index.js ---
import React, { useEffect, useState } from "react";
import styles from "./formcreate.module.css";
import TextInput from "../../components/textinput/textinput";
import Form from "../../components/form/form";
import Notify from "../../components/notify";
import { useNavigate } from "react-router-dom";

const FormCreate = () => {
    let raws = [];
    let title = "";

    const [forms, setForms] = useState([]);
    const [total, setTotal] = useState(0);
    const [openSnack, setOpenSnack] = useState(false);
    const [snackMsg, setSnackMsg] = useState("");
    const [alertType, setAlertType] = useState("success");
    const [openLoading, setOpenLoading] = useState(false);
    const navigate = useNavigate();

    useEffect(() => {
        const { contract, walletConnection } = window;
        const userId = walletConnection.getAccountId();
        contract
            ?.get_form_count?.({
                userId: userId,
            })
            .then((total) => {
                onGetForms({ total });
                setTotal(total);
            })
            .catch((err) => {
                console.log(err);
            });
    }, []);

    const onCreateNewFormBtnClicked = () => {
        setOpenLoading(true);
        const { contract } = window;
        contract
            ?.init_new_form?.(
                {
                    title: title,
                },
                300000000000000,
            )
            .then((id) => {
                navigate(`/form?id=${id}`);
            })
            .catch((err) => {
                onShowResult({
                    type: "error",
                    msg: String(err),
                });
            });
    };

    const onNewFormTitleChanged = (value) => {
        title = value;
    };

    const onShowResult = ({ type, msg }) => {
        setOpenLoading(false);
        setOpenSnack(true);
        setAlertType(type);
        setSnackMsg(msg);
    };

    const onShowEditForm = ({ id, qCounter }) => {
        navigate(`/form-detail?id=${id}&c=${qCounter}`);
    };

    const onGetForms = ({ total }) => {
        try {
            const { contract, walletConnection } = window;
            const num_page = parseInt(total / 5) + 1;
            const page_arr = new Array(num_page).fill(0);
            setForms([]);
            const userId = walletConnection.getAccountId();
            page_arr.map((page, index) => {
                contract
                    .get_forms({
                        userId,
                        page: index + 1,
                    })
                    .then((data) => {
                        if (data) {
                            const pIndex = raws.findIndex((x) => x?.page === data?.page);
                            if (pIndex === -1) {
                                raws.push(data);
                                raws.sort((a, b) => {
                                    if (a.page < b.page) return -1;
                                    if (a.page > b.page) return 1;
                                    return 0;
                                });
                                let forms = [];
                                raws.map((raw) => {
                                    forms = [...forms, ...(raw?.data || [])];
                                });
                                setForms([...forms]);
                            }
                        }
                    });
            });
        } catch (err) {}
    };

    const onCloseSnack = () => {
        setOpenSnack(false);
    };
    return (
        <>
            <Notify openLoading={openLoading} openSnack={openSnack} alertType={alertType} snackMsg={snackMsg} onClose={onCloseSnack} />
            <div className={styles.root}>
                <div className={styles.new_form_title}>Create new form</div>
                <div className={styles.new_form_area}>
                    <TextInput placeholder={"Type your form name here"} onChange={onNewFormTitleChanged} className={styles.create_form_input} />
                    <div className={styles.create_form_btn_area}>
                        <button className={styles.create_form_btn} onClick={onCreateNewFormBtnClicked}>
                            Create
                        </button>
                    </div>
                </div>
                <div className={styles.your_form_title}>Your form(s): {total}</div>
                <div className={styles.your_form}>
                    {forms?.map?.((form) => {
                        const { id, owner, q_counter, title } = form;
                        return <Form key={id} id={id} owner={owner} qCounter={q_counter} title={title} onViewMore={onShowEditForm} />;
                    })}
                </div>
            </div>
        </>
    );
};

export default FormCreate;

'''
'''--- src/pages/form-detail/formdetail.module.css ---
.root {
    margin: 20px 0px;
    min-width: 700px;
    display: flex;
    flex-direction: column;
}

.form_area {
    width: 100%;
}

.form_header_area {
    display: flex;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--color-border);
}

.form_header_heading {
    flex: 1;
    font-size: 28px;
    font-weight: 600;
}

.form_header_action {
    width: 260px;
    display: flex;
    justify-content: flex-end;
}

.action_btn {
    display: flex;
    align-items: center;
    font-size: 16px;
    padding: 5px 10px;
    border: none;
    border-radius: 8px;
    color: var(--color-text-button);
    background: none;
}

.form_header_action_btn {
    composes: action_btn;
    border: 1px solid var(--color-border);
    color: var(--color-primary);
    padding: 10px;
}

.form_header_action_btnL {
    composes: action_btn;
    margin-right: 5px;
    color: var(--color-active);
}

.form_header_action_btnR {
    composes: action_btn;
    margin-left: 5px;
    color: var(--color-danger);
}

.form_header_action_btnL:hover {
    text-decoration: underline;
}

.form_header_action_btnR:hover {
    text-decoration: underline;
}

.form_title_area {
    margin: 15px 0px;
    display: flex;
}

.form_title_label {
    font-size: 16px;
    font-weight: 600;
}

.form_title_value {
    font-size: 16px;
    margin-left: 10px;
    flex: 1;
}

.form_question_area {
    display: flex;
    align-items: center;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--color-border);
}

.form_question_label {
    composes: form_title_label;
}

.form_question_value {
    composes: form_title_value;
}

.form_question_action {
    composes: form_header_action;
}

.question_area {
    display: flex;
    flex-direction: column;
    padding: 20px 0;
}

.question_detail_area {
    width: 100%;
    padding: 15px;
    border-radius: 24px;
    background: var(--color-background);
    box-shadow: var(--color-boxshadow);
    margin: 10px 0;
}

.question_detail_area + .question_detail_area {
    margin-top: 20px;
}

.question_detail_type {
    width: 100%;
    font-size: 17px;
    font-weight: 600;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--color-border);
    display: flex;
    align-items: center;
}

.question_detail_title {
    margin: 15px 0px;
    font-size: 17px;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--color-border);
}

.form_question_action {
    display: flex;
}

.question_detail_type_value {
    flex: 1;
}

.question_detail_type_action {
    display: flex;
    justify-content: space-between;
}

.question_block_input_item {
    display: flex;
    margin: 10px 0px;
    align-items: center;
    margin: 10px 0;
}

.question_block_input_item_icon {
    width: 25px;
    height: 25px;
    display: flex;
    justify-content: center;
    align-items: center;
    border: 1px solid black;
    border-radius: 50%;
}

.question_block_input_item_value {
    margin-left: 10px;
    line-height: 25px;
}

.snack_area {
    margin-top: 50px;
}

.form_title_icon {
    
}
'''
'''--- src/pages/form-detail/index.js ---
// import { withRouter } from 'next/router';
import React, { useEffect, useState } from "react";
import { connect } from "react-redux";
import styles from "./formdetail.module.css";
import EditOutlinedIcon from "@mui/icons-material/EditOutlined";
import DeleteOutlinedIcon from "@mui/icons-material/DeleteOutlined";
import AddOutlinedIcon from "@mui/icons-material/AddOutlined";
import Modal from "@mui/material/Modal";
import Box from "@mui/material/Box";
import EditQuestionModal from "../../components/modal/editquestion";
import ConfirmationModel from "../../components/modal/confirmation";
import EditFormModal from "../../components/modal/editform";
// import Router from 'next/router';
import Notify from "../../components/notify";
import Tooltip from "@mui/material/Tooltip";
import { useLocation, useNavigate } from "react-router-dom";

const FormDetail = () => {
    const qType = ["Yes/No question", "Choose one answer", "Choose multi answer", "Fill to the blank space"];
    const alphabet = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V"];
    let max_question = 0;
    let raws = [];

    const [formId, setFormId] = useState("");
    const [editingQuestion, setEditingQuestion] = useState({});
    const [removingQuestion, setRemovingQuestion] = useState({});
    const [removingForm, setRemovingForm] = useState({});
    const [questions, setQuestions] = useState([]);
    const [form, setForm] = useState({});
    const [step, setStep] = useState(0);
    const [err, setErr] = useState(false);
    const [err_msg, setErrMsg] = useState("");
    const [title, setTitle] = useState("");
    const [qCounter, setQCounter] = useState(0);
    const [openEditModal, setOpenEditModal] = useState(false);
    const [openRemoveQuestionModal, setOpenRemoveQuestionModal] = useState(false);
    const [openRemoveFormModal, setOpenRemoveFormModal] = useState(false);
    const [openSnack, setOpenSnack] = useState(false);
    const [openEditFormTitleModal, setOpenEditFormTitleModal] = useState(false);
    const [snackMsg, setSnackMsg] = useState("");
    const [alertType, setAlertType] = useState("success");
    const [openLoading, setOpenLoading] = useState(false);

    useEffect(() => {
        getFormDetail();
    }, []);

    const useQuery = () => {
        const { search } = useLocation();
        return new URLSearchParams(search);
    };

    const query = useQuery();
    const navigate = useNavigate();

    const getFormDetail = () => {
        const { contract, walletConnection } = window;
        const id = query.get("id");
        const userId = walletConnection.getAccountId();
        contract
            .get_form({
                userId,
                id,
            })
            .then((formret) => {
                if (formret) {
                    setForm({ ...formret });
                    const { id, title, q_counter } = formret;
                    setFormId(id);
                    getAllQuestion(id, q_counter);
                    setStep(1);
                    setTitle(title);
                    setQCounter(q_counter);
                }
            })
            .catch((err) => {
                console.log(err);
            });
    };

    const getAllQuestion = (formId, total) => {
        const { contract, walletConnection } = window;
        const num_page = parseInt(total / 5) + 1;
        const page_arr = new Array(num_page).fill(0);
        const userId = walletConnection.getAccountId();
        setQuestions([]);
        raws = [];
        page_arr.map((page, index) => {
            contract
                .get_questions({
                    userId,
                    formId: formId,
                    page: index + 1,
                })
                .then((data) => {
                    if (data) {
                        const pIndex = raws.findIndex((x) => x?.page === data?.page);
                        if (pIndex === -1) {
                            raws.push(data);
                            raws.sort((a, b) => {
                                if (a.page < b.page) return -1;
                                if (a.page > b.page) return 1;
                                return 0;
                            });
                            let questions = [];
                            raws.map((raw) => {
                                questions = [...questions, ...(raw?.data || [])];
                            });
                            setQuestions([...questions]);
                        }
                    }
                });
        });
    };

    const onEditQuestionBtnClicked = (question) => {
        setEditingQuestion(question);
        // editingQuestion = { ...question };
        setOpenEditModal(true);
    };

    const onCloseEditQuestionModal = () => {
        setEditingQuestion({});
        setOpenEditModal(false);
    };

    const onShowResult = ({ type, msg }) => {
        setOpenSnack(true);
        setSnackMsg(msg);
        setOpenEditModal(false);
        setOpenRemoveFormModal(false);
        setOpenRemoveQuestionModal(false);
        setOpenEditFormTitleModal(false);
        setAlertType(type);
        setOpenLoading(false);
    };

    const onUpdatedQuestionAccept = ({ id, title, meta }) => {
        setOpenEditModal(false);
        setOpenLoading(true);
        const { contract } = window;
        contract
            ?.update_question?.(
                {
                    id,
                    title,
                    meta,
                },
                300000000000000,
            )
            .then((question) => {
                if (question) {
                    getAllQuestion(formId, qCounter);
                    onShowResult({
                        type: "success",
                        msg: "Question has been updated",
                    });
                } else {
                    onShowResult({
                        type: "error",
                        msg: "Update question failure",
                    });
                }
            })
            .catch((err) => {
                console.log(err);
                onShowResult({
                    type: "error",
                    msg: String(err),
                });
            });
    };

    const onRemoveQuestionBtnClicked = (question) => {
        setRemovingQuestion(question);
        // removingQuestion = { ...question };
        setOpenRemoveQuestionModal(true);
    };

    const onCloseRemoveQuestionModal = () => {
        setRemovingQuestion({});
        // removingQuestion = {};
        setOpenRemoveQuestionModal(false);
    };

    const onRemoveQuestionDeny = () => {
        onCloseRemoveQuestionModal();
    };

    const onRemoveQuestionAccept = () => {
        setOpenRemoveQuestionModal(false);
        setOpenLoading(true);
        const { contract } = window;
        const { id } = removingQuestion;
        contract
            ?.delete_question(
                {
                    id,
                },
                300000000000000,
            )
            .then((ret) => {
                if (ret) {
                    if (ret) {
                        onShowResult({
                            type: "success",
                            msg: "Question has been deleted",
                        });
                        getFormDetail();
                    } else {
                        onShowResult({
                            type: "error",
                            msg: "Delete question failure",
                        });
                    }
                }
            })
            .catch((err) => {
                console.log(err);
                onShowResult({
                    type: "error",
                    msg: String(err),
                });
            });
    };

    const onAddNewQuestionBtnClicked = () => {
        navigate(`/form?id=${formId}`);
    };

    const onRemoveFormBtnClicked = () => {
        setOpenRemoveFormModal(true);
    };

    const onCloseRemoveFormModal = () => {
        setOpenRemoveFormModal(false);
    };

    const onCloseEditFormTitleModal = () => {
        setOpenEditFormTitleModal(false);
    };

    const onEditFormTitleBtnClicked = () => {
        setOpenEditFormTitleModal(true);
    };

    const onRemoveFormAccept = () => {
        setOpenRemoveFormModal(false);
        setOpenLoading(true);
        const { contract } = window;
        contract
            ?.delete_form(
                {
                    id: formId,
                },
                300000000000000,
            )
            .then((ret) => {
                if (ret) {
                    Router.push("/form-create");
                } else {
                    onShowResult({
                        type: "error",
                        msg: "Remove form failure",
                    });
                }
            })
            .catch((err) => {
                console.log(err);
                onShowResult({
                    type: "err",
                    msg: String(err),
                });
            });
    };

    const onUpdatedFormAccept = ({ title }) => {
        if (title === "") {
            return onShowResult({
                type: "error",
                msg: "Title could not be empty",
            });
        }

        if (title === form.title) {
            return onShowResult({
                type: "error",
                msg: "Title could not be the same",
            });
        }

        setOpenEditFormTitleModal(false);
        setOpenLoading(true);

        const { contract } = window;
        contract
            ?.update_form(
                {
                    id: formId,
                    title,
                },
                300000000000000,
            )
            .then((ret) => {
                if (ret) {
                    onShowResult({
                        type: "success",
                        msg: "Form has been updated",
                    });
                    getFormDetail();
                } else {
                    onShowResult({
                        type: "error",
                        msg: "Update form failure",
                    });
                }
            })
            .catch((err) => {
                console.log(err);
                onShowResult({
                    type: "error",
                    msg: String(err),
                });
            });
    };

    const onGetPublicLinkBtnClicked = () => {
        const uri = new URL(window.location.href);
        const { origin } = uri;
        const sharedLinked = `${origin}/form-answer?id=${formId}`;
        navigator.clipboard.writeText(sharedLinked);
        onShowResult({
            type: "success",
            msg: "Copied",
        });
    };

    const onCloseSnack = () => {
        setOpenSnack(false);
    };

    const onRenderStep = () => {
        switch (step) {
            case 0:
                return "Loading Form";
            case 1:
                return onRenderForm();
            default:
                break;
        }
    };

    const onRenderForm = () => {
        return (
            <div className={styles.form_area}>
                <div className={styles.form_header_area}>
                    <div className={styles.form_header_heading}>Your Form Information</div>
                    <div className={styles.form_header_action}>
                        <button className={styles.form_header_action_btnL} onClick={onGetPublicLinkBtnClicked}>
                            Get Link
                        </button>
                        <button className={styles.form_header_action_btnR} onClick={onRemoveFormBtnClicked}>
                            Delete Form
                        </button>
                    </div>
                </div>
                <div className={styles.form_title_area}>
                    <div className={styles.form_title_label}>Title:</div>
                    <div className={styles.form_title_value}>{title}</div>
                    <div className={styles.form_title_edit}>
                        <button className={styles.form_header_action_btnL} onClick={onEditFormTitleBtnClicked}>
                            <Tooltip title={"Edit"}>
                                <EditOutlinedIcon />
                            </Tooltip>
                        </button>
                    </div>
                </div>
                <div className={styles.form_question_area}>
                    <div className={styles.form_question_label}>Question(s): </div>
                    <div className={styles.form_question_value}>{qCounter}</div>
                    <div className={styles.form_question_action}>
                        <button className={styles.form_header_action_btn} onClick={onAddNewQuestionBtnClicked}>
                            <AddOutlinedIcon /> Add New Question
                        </button>
                    </div>
                </div>
                <div className={styles.question_area}>
                    {questions?.map?.((question) => {
                        return onRenderQuestion(question);
                    })}
                </div>
            </div>
        );
    };

    const onRenderQuestion = (question) => {
        const { id, type, title, meta } = question;
        return (
            <div key={id} className={styles.question_detail_area}>
                <div className={styles.question_detail_type}>
                    <div className={styles.question_detail_type_value}>{qType?.[type]}</div>
                    <div className={styles.question_detail_type_action}>
                        <Tooltip title={"Edit"}>
                            <button className={styles.form_header_action_btnL} onClick={() => onEditQuestionBtnClicked(question)}>
                                <EditOutlinedIcon />
                            </button>
                        </Tooltip>
                        <Tooltip title={"Delete"}>
                            <button className={styles.form_header_action_btnR} onClick={() => onRemoveQuestionBtnClicked(question)}>
                                <DeleteOutlinedIcon />
                            </button>
                        </Tooltip>
                    </div>
                </div>
                <div className={styles.question_detail_title}>Title: {title}</div>
                <div>{onRenderQuestionTypeDetail({ type, meta })}</div>
            </div>
        );
    };

    const onRenderQuestionTypeDetail = ({ type, meta }) => {
        let picks = meta?.split(";");
        switch (type) {
            case 0:
                picks = ["True", "False"];
            case 1:
            case 2:
                break;
            case 3:
                picks = [];
                break;
            default:
                break;
        }
        return (
            <div>
                {picks?.map((pick, index) => {
                    return (
                        <div key={index} className={styles.question_block_input_item}>
                            <div className={styles.question_block_input_item_icon}>{alphabet[index]}</div>
                            <div className={styles.question_block_input_item_value}>{pick}</div>
                        </div>
                    );
                })}
            </div>
        );
    };

    const box_style = {
        position: "absolute",
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)",
        minWidth: 600,
        bgcolor: "background.paper",
        boxShadow: 24,
        borderRadius: "24px",
    };

    return (
        <>
            <Notify openLoading={openLoading} openSnack={openSnack} alertType={alertType} snackMsg={snackMsg} onClose={onCloseSnack} />
            <Modal open={openEditModal} onClose={onCloseEditQuestionModal} aria-labelledby="modal-modal-title" aria-describedby="modal-modal-description">
                <Box sx={box_style}>
                    <EditQuestionModal {...editingQuestion} onAccept={onUpdatedQuestionAccept} />
                </Box>
            </Modal>
            <Modal
                open={openRemoveQuestionModal}
                onClose={onCloseRemoveQuestionModal}
                aria-labelledby="modal-modal-title"
                aria-describedby="modal-modal-description"
            >
                <Box sx={box_style}>
                    <ConfirmationModel onDeny={onRemoveQuestionDeny} onAccept={onRemoveQuestionAccept} />
                </Box>
            </Modal>
            <Modal open={openRemoveFormModal} onClose={onCloseRemoveFormModal} aria-labelledby="modal-modal-title" aria-describedby="modal-modal-description">
                <Box sx={box_style}>
                    <ConfirmationModel onDeny={onCloseRemoveFormModal} onAccept={onRemoveFormAccept} />
                </Box>
            </Modal>
            <Modal
                open={openEditFormTitleModal}
                onClose={onCloseEditFormTitleModal}
                aria-labelledby="modal-modal-title"
                aria-describedby="modal-modal-description"
            >
                <Box sx={box_style}>
                    <EditFormModal {...editingQuestion} onAccept={onUpdatedFormAccept} />
                </Box>
            </Modal>
            <div className={styles.root}>{onRenderStep()}</div>
        </>
    );
};

export default FormDetail;

'''
'''--- src/pages/form/form.module.css ---
.snack_area {
    margin-top: 50px;
}

'''
'''--- src/pages/form/index.js ---
import React, { useEffect, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";

const FormDetail = () => {
    const [loading, setLoading] = useState(true);
    const [valid, setValid] = useState(false);

    const useQuery = () => {
        const { search } = useLocation();
        return new URLSearchParams(search);
    };

    const query = useQuery();
    const navigate = useNavigate();

    useEffect(() => {
        const { contract, walletConnection } = window;
        const userId = walletConnection.getAccountId();
        const id = query.get("id");
        contract
            ?.get_form?.({
                userId,
                id,
            })
            .then((form) => {
                if (form) {
                    navigate(`/create-question?form_id=${form?.id}`);
                    onLoadingCompleted(true);
                } else {
                    onLoadingCompleted(false);
                }
            })
            .catch((err) => {
                onLoadingCompleted(false);
            });
    }, []);

    const onLoadingCompleted = (result) => {
        setLoading(false);
        setValid(result);
    };

    return <div style={{ marginTop: 40 }}>{loading ? "Validating..." : `${valid}`}</div>;
};

export default FormDetail;

'''
'''--- src/pages/participant-result/index.js ---
// import { withRouter } from 'next/router';
import React, { useEffect, useState } from "react";
import { connect } from "react-redux";
import styles from "./participantresult.module.css";
import Skeleton from "@mui/material/Skeleton";
import { useLocation } from "react-router-dom";

const ParticipantResult = () => {
    const qType = ["Yes/No question", "Choose one answer", "Choose multi answer", "Fill to the blank space"];
    let raws = [];
    let qCounter = 0;

    const [userId, setUserId] = useState("");
    const [form, setForm] = useState({});
    const [skeletons, setSkeletons] = useState([]);
    const [answers, setAnswers] = useState([]);

    useEffect(() => {
        getForm();
    }, []);

    const useQuery = () => {
        const { search } = useLocation();
        return new URLSearchParams(search);
    };

    const query = useQuery();

    const getForm = () => {
        const { contract, walletConnection } = window;
        const id = query.get("id");
        const userId = query.get("u");
        setUserId(userId);
        contract
            .get_form({
                id,
            })
            .then((formret) => {
                if (formret) {
                    if (formret.q_counter > 0) {
                        setSkeletons(new Array(formret.q_counter).fill(0));
                    }
                    getAnswers(formret.q_counter);
                    setForm({ ...formret });
                }
            })
            .catch((err) => {
                console.log(err);
            });
    };

    const getAnswers = (total) => {
        const { contract, walletConnection } = window;
        const id = query.get("id");
        const userId = query.get("u");
        const num_page = total % 5 === 0 ? parseInt(total / 5) : parseInt(total / 5) + 1;
        const page_arr = new Array(num_page).fill(0);
        setAnswers([]);
        raws = [];
        page_arr.map((page, index) => {
            contract
                .get_answer_statistical(
                    {
                        userId,
                        formId: id,
                        page: index + 1,
                    },
                    300000000000000,
                )
                .then((data) => {
                    if (data) {
                        const pIndex = raws.findIndex((x) => x?.page === data?.page);
                        if (pIndex === -1) {
                            raws.push(data);
                            raws.sort((a, b) => {
                                if (a.page < b.page) return -1;
                                if (a.page > b.page) return 1;
                                return 0;
                            });
                            let answers = [];
                            raws.map((raw) => {
                                answers = [...answers, ...(raw?.data || [])];
                            });
                            setAnswers([...answers]);
                        }
                    }
                });
        });
    };

    const onRenderAnswer = (ans, index) => {
        const { type, title, answer } = ans;
        let anw_tranform = answer;
        if (answer === "" || answer === null) {
            anw_tranform = "Does not have any answers";
        }
        let meta = anw_tranform.split("*");
        return (
            <div className={styles.answer_area} key={`ans_${index}`}>
                <div className={styles.answer_type}>Question Type: {qType[type]}</div>
                <div>
                    <span className={styles.answer_title}>Quesion:</span> {title}
                </div>
                <div className={styles.answer_title}>
                    Answer:{" "}
                    {meta?.map((me, index) => {
                        return (
                            <span className={styles.answer} key={index}>
                                {me};
                            </span>
                        );
                    })}
                </div>
            </div>
        );
    };

    const onRenderSkeletons = () => {
        return skeletons?.map?.((skl, index) => {
            return (
                <div className={styles.answer_skeleton} key={index}>
                    <Skeleton height={140} variant="rectangular" key={index} className={styles.answer_skeleton_item} animation="wave" />
                </div>
            );
        });
    };

    const onRenderAnswers = () => {
        return (
            <>
                {answers?.map?.((answer, index) => {
                    return onRenderAnswer(answer, index);
                })}
            </>
        );
    };

    const { title } = form;
    return (
        <div className={styles.root}>
            <div className={styles.form_title}>{title}</div>
            <div className={styles.form_answer}>
                The answer of <span className={styles.answer_userId}>{userId}</span> as follow:
            </div>
            {answers?.length === 0 ? onRenderSkeletons() : onRenderAnswers()}
            {/* {onRenderSkeletons()}
                {answers?.map?.((answer, index) => {
                    return onRenderAnswer(answer, index);
                })} */}
        </div>
    );
};

export default connect((state) => {
    return {
        wallet: state.wallet,
    };
})(ParticipantResult);

'''
'''--- src/pages/participant-result/participantresult.module.css ---
.root {
    display: flex;
    min-width: 600px;
    flex-direction: column;
}

.form_title {
    font-size: 24px;
    font-weight: 600;
    margin: 20px 0 20px 0;
    border-bottom: 1px solid var(--color-border);
    padding-bottom: 10px;
}

.form_answer {
    font-size: 16px;
    font-weight: 600;
    margin-bottom: 10px;
}

.answer_userId {
    color: var(--color-active);
}

.answer_area {
    padding: 20px;
    margin: 10px 0px;
    border-radius: 24px;
    background: var(--color-background);
    box-shadow: var(--color-boxshadow);
}

.answer_type {
    font-size: 16px;
    font-weight: 600;
    margin-bottom: 10px;
    border-bottom: 1px solid var(--color-border);
    padding-bottom: 10px;
}

.answer_title {
    font-size: 16px;
    line-height: 24px;
    font-weight: 600;
    margin: 5px 0;
}

.answer {
    font-size: 16px;
    line-height: 18px;
    margin: 5px 0;
    font-weight: 400;
}

.answer_skeleton {
    margin: 10px 0px;
    border-radius: 24px;
    background: var(--color-background);
    box-shadow: var(--color-boxshadow);
}

.answer_skeleton_item {
    height: 140px;
    border-radius: 24px;
}
'''
'''--- src/pages/participant/[...slug].js ---
import React from 'react';
import styles from './participant.module.css';
import TextInput from '../../components/textinput/textinput';
import Form from '../../components/form/form';
import { connect } from 'react-redux';
// import Router from 'next/router';

class FormCreate extends React.Component {
    raws = [];
    forms = [];
    title = '';
    constructor(props) {
        super(props);
        this.state = {
            total: 0,
        };
    }

    componentDidMount() {
        const { contract } = this.props.wallet;
        contract
            ?.get_form_count?.({}, 300000000000000)
            .then((total) => {
                this.onGetTotalForm({ total });
                this.setState({
                    total,
                });
            })
            .catch((err) => {
                console.log(err);
            });
    }

    onCreateNewFormBtnClicked = () => {
        const { contract } = this.props.wallet;
        contract
            ?.init_new_form?.(
                {
                    title: this.title,
                },
                300000000000000,
            )
            .then((id) => {
                Router.push(`form/${id}`);
            })
            .catch((err) => {
                console.log(err);
            });
    };

    onNewFormTitleChanged = (value) => {
        this.title = value;
    };

    onGetTotalForm = ({ total }) => {
        try {
            const { contract } = this.props.wallet;
            const num_page = parseInt(total / 10) + 1;
            const page_arr = new Array(num_page).fill(0);
            this.forms = [];
            page_arr.map((page, index) => {
                contract
                    .get_forms(
                        {
                            page: index + 1,
                        },
                        300000000000000,
                    )
                    .then((data) => {
                        if (data) {
                            const pIndex = this.raws.findIndex((x) => x?.page === data?.page);
                            if (pIndex === -1) {
                                this.raws.push(data);
                                this.raws.sort((a, b) => {
                                    if (a.page < b.page) return -1;
                                    if (a.page > b.page) return 1;
                                    return 0;
                                });
                                this.raws.map((raw) => {
                                    this.forms = [...this.forms, ...(raw?.data || [])];
                                });
                                this.setState({
                                    isViewUpdated: !this.state.isViewUpdated,
                                });
                            }
                        }
                    });
            });
        } catch (err) {
            console.log(err);
        }
    };

    render() {
        return (
            <div className={styles.root}>
                <div className={styles.new_form_title}>Create new form</div>
                <div className={styles.new_form_area}>
                    <TextInput placeholder={'Type your form name here'} onChange={this.onNewFormTitleChanged} className={styles.create_form_input} />
                    <div className={styles.create_form_btn_area}>
                        <button className={styles.create_form_btn} onClick={this.onCreateNewFormBtnClicked}>
                            Create
                        </button>
                    </div>
                </div>
                <div className={styles.your_form_title}>Your form</div>
                <div className={styles.your_form}>
                    {this.forms?.map?.((form) => {
                        const { id, owner, q_counter, title } = form;
                        return <Form key={id} id={id} owner={owner} qCounter={q_counter} title={title} />;
                    })}
                </div>
                <div></div>
            </div>
        );
    }
}

export default connect((state) => {
    return {
        wallet: state.wallet,
    };
})(FormCreate);

'''
'''--- src/pages/participant/participant.module.css ---

'''
'''--- src/redux/action/form.js ---
export const UPDATE_FORM = 'update_form';
export const CLEAR_FORM = 'clear_form';

export const onUpdateForm = (data) => {
    return {
        type: UPDATE_FORM,
        value: data,
    };
};

export const onClearForm = () => {
    return {
        type: CLEAR_FORM,
    };
};

'''
'''--- src/redux/action/wallet.js ---
export const UPDATE_WALLET = "update_wallet";
export const CLEAR_WALLET = "clear_wallet";

export const onUpdateWallet = (data) => {
    return {
        type: UPDATE_WALLET,
        value: data,
    };
};

export const onClearWallet = () => {
    return {
        type: CLEAR_WALLET,
    };
};

'''
'''--- src/redux/reducer/formreducer.js ---
import { CLEAR_FORM, UPDATE_FORM } from '../action/form';

const defaultState = {
    id: '',
    qCounter: '',
    title: '',
};

const FormReducer = (state = defaultState, content) => {
    const { type, value } = content;
    switch (type) {
        case CLEAR_FORM:
            return onClearForm();
        case UPDATE_FORM:
            return onUpdateForm(value);
        default:
            return state;
    }
};

const onClearForm = () => {
    return defaultState;
};

const onUpdateForm = ({ id, qCounter, title }) => {
    return {
        id,
        qCounter,
        title,
    };
};

export default FormReducer;

'''
'''--- src/redux/reducer/reducer.js ---
import { combineReducers } from 'redux';
import WalletReducer from './walletreducer';
import FormReducer from './formreducer';

const reducer = combineReducers({
    wallet: WalletReducer,
    form: FormReducer,
});

export default reducer;

'''
'''--- src/redux/reducer/walletreducer.js ---
import { CLEAR_WALLET, UPDATE_WALLET } from "../action/wallet";

const defaultState = {
    contract: {},
    currentUser: {},
    nearConfig: {},
    walletConnection: {},
};

const WalletReducer = (state = defaultState, content) => {
    const { type, value } = content;
    switch (type) {
        case CLEAR_WALLET:
            return onClearWallet();
        case UPDATE_WALLET:
            return onUpdateWallet(value);
        default:
            return state;
    }
};

const onClearWallet = () => {
    return defaultState;
};

const onUpdateWallet = ({ contract, currentUser, nearConfig, walletConnection }) => {
    return {
        contract,
        currentUser,
        nearConfig,
        walletConnection,
    };
};

export default WalletReducer;

'''
'''--- src/redux/store.js ---
import Reducer from "./reducer/reducer";
import { createStore } from "redux";

const store = createStore(Reducer);

export default store;

'''
'''--- src/redux/type.js ---
export default UPDATE_WALLET = "update_wallet";
export default CLEAR_WALLET = "clear_wallet"
'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import getConfig from "./config";

const nearConfig = getConfig("testnet");
// (window as any).global = window;
// @ts-ignore
window.Buffer = window.Buffer || require("buffer").Buffer;

// Initialize contract & set global variables
export async function initContract() {
    // Initialize connection to the NEAR testnet
    window.nearConfig = nearConfig;
    const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig));

    // Initializing Wallet based Account. It can work with NEAR testnet wallet that
    // is hosted at https://wallet.testnet.near.org
    window.walletConnection = new WalletConnection(near);

    // Getting the Account ID. If still unauthorized, it's just empty string
    window.accountId = window.walletConnection.getAccountId();

    // Initializing our contract APIs by contract name and configuration
    window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
        // View methods are read only. They don't modify the state, but usually return some value.
        viewMethods: ["get_forms", "get_form_count", "get_form", "get_question", "get_questions", "get_participants", "get_question_count"],
        changeMethods: [
            "init_new_form",
            "new_question",
            "submit_answer",
            "update_question",
            "update_form",
            "delete_form",
            "delete_question",
            "get_answer_statistical",
        ],
    });
}

export function logout() {
    window.walletConnection.signOut();
    // reload page
    window.location.replace(window.location.origin + window.location.pathname);
}

export function login() {
    // Allow the current app to make calls to the specified contract on the
    // user's behalf.
    // This works by creating a new access key for the user's account and storing
    // the private key in localStorage.
    window.walletConnection.requestSignIn(nearConfig.contractName);
}

'''
'''--- target/npmlist.json ---
{"version":"0.0.1","name":"dForm_reactjs","dependencies":{"@babel/plugin-proposal-class-properties":{"version":"7.16.5"},"@babel/plugin-transform-runtime":{"version":"7.16.5"},"@emotion/react":{"version":"11.7.1"},"@emotion/styled":{"version":"11.6.0"},"@mui/icons-material":{"version":"5.2.5"},"@mui/material":{"version":"5.2.5"},"buffer":{"version":"6.0.3"},"fibers":{"version":"5.0.0"},"near-api-js":{"version":"0.43.1"},"node-sass":{"version":"7.0.0"},"react-dom":{"version":"17.0.2"},"react-redux":{"version":"7.2.6"},"react-router-dom":{"version":"6.2.1"},"react-scripts":{"version":"5.0.0"},"react":{"version":"17.0.2"},"redux":{"version":"4.1.2"},"regenerator-runtime":{"version":"0.13.9"},"sass":{"version":"1.45.1"},"webpack-cli":{"version":"4.9.1"}}}
'''
'''--- webpack.config.js ---
const path = require("path");
const dotenv = require("dotenv-webpack");

const config = {
    entry: "./src/index.js",
    output: {
        filename: "bundle.js",
        path: path.resolve(__dirname, "build"),
    },
    module: {
        rules: [
            {
                use: {
                    loader: "babel-loader",
                },
                exclude: /node_modules/,
                test: /\.(js|jsx)$/,
            },
            {
                test: /\.css$/i,
                use: ["style-loader", "css-loader"],
            },
            {
                test: /\.(jpg|JPG|jpeg|gif|mp3|svg|ttf|woff2|woff|eot)$/gi,
                use: {
                    loader: "file-loader",
                },
            },
            {
                test: /\.png$/,
                exclude: /node_modules/,
                use: {
                    loader: "file-loader?name=images/[name].[ext]",
                },
            },
        ],
    },
    plugins: [new dotenv()],
};

module.exports = config;

'''