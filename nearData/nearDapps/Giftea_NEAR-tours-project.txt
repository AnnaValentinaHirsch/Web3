*GitHub Repository "Giftea/NEAR-tours-project"*

'''--- README.md ---
# Sample

This repository includes a complete project structure for AssemblyScript contracts targeting the NEAR platform.

The example here is very basic.  It's a simple contract demonstrating the following concepts:
- a single contract
- the difference between `view` vs. `change` methods
- basic contract storage

The goal of this repository is to make it as easy as possible to get started writing unit tests for AssemblyScript contracts built to work with NEAR Protocol.

## Usage

### Getting started

1. clone this repo to a local folder
2. run `yarn`
3. run `yarn install`
4. run `yarn test`

### Top-level `yarn` commands

- run `yarn test` to run all tests
  - (!) be sure to run `yarn build:release` at least once before:
    - run `yarn test:unit` to run only unit tests
- run `yarn build` to quickly verify build status
- run `yarn deploy` to quickly run the `./scripts/1.deploy.sh` command to deploy smart contract
- run `yarn clean` to clean up build folder

### Other documentation

- tour contract and test documentation
  - see `/src/tour/README` for contract interface
  - see `/src/tour/__tests__/README` for tour unit testing details
  - see `/scripts/README` for running scripts

### Contracts and Unit Tests

```txt
src
├── tour                        <-- tour contract
│   ├── README.md
│   ├── __tests__
│   │   ├── README.md
│   │   └── index.unit.spec.ts
│   └── assembly
│       └── index.ts
|       └── models
|            └── commentModel.ts
|            └── rateModel.ts
|            └── tourModel.ts
|
└── utils.ts                      <-- shared contract code
```

### Helper Scripts

```txt
scripts
├── 1.deploy.sh
├── 2.create_tour.sh
├── 3.get_tour.sh
├── 4.get_tours.sh
├── 5.buy_tour.sh
├── 6.update_tour.sh
├── 7.like_tour.sh
├── 8.dislike_tour.sh
├── 9.comment_on_tour.sh
├── 10.rate_tour.sh
├── 11.delete_tour.sh
└── README.md                     <-- instructions
```
## Deployed Contract Link
[Check out the deployed Smart Contract on explorer.testnet.near.org](https://explorer.testnet.near.org/transactions/4Y8PBn45mJtyDD4ir1aopPkMNqZdfC2hwJrXhTxAi7cA)
'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");
'''
'''--- asconfig.json ---
  {
  "workspaces": [
    "src/tour"
  ]
}
'''
'''--- package.json ---
{
  "name": "tour",
  "version": "1",
  "main": "index.js",
  "author": "Giftea",
  "license": "MIT",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test:unit'",
    "asp": "asp --verbose --nologo",
    "test:unit": "yarn asp -f unit.spec",
    "build": "asb --target debug",
    "build:release": "asb",
    "test": "yarn build:release && yarn test:unit",
    "clean": "rm -rf ./build && rm -rf ./neardev && rm -rf ./target"
  },
  "devDependencies": {
    "near-sdk-as": "^3.2.3"
  }
}

'''
'''--- scripts/1.deploy.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable"

echo "deleting $CONTRACT and setting $OWNER as beneficiary"
echo
near delete $CONTRACT $OWNER

echo --------------------------------------------
echo
echo "cleaning up the /neardev folder"
echo
rm -rf ./neardev

# exit on first error after this point to avoid redeploying with successful build
set -e

echo --------------------------------------------
echo
echo "rebuilding the contract (release build)"
echo
yarn build:release

echo --------------------------------------------
echo
echo "redeploying the contract"
echo
near dev-deploy ./build/release/tour.wasm

echo --------------------------------------------
echo run the following commands
echo
echo 'export CONTRACT=__new_contract_account_id__'
echo
echo

exit 0
'''
'''--- scripts/10.rate_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT rateTour '{"rate": { "tourId": "ID-1655110327981726020", "rate":5} }' --accountId $OWNER

'''
'''--- scripts/11.delete_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT deleteTour '{"id": "ID-1655110327981726020"}' --accountId $OWNER

'''
'''--- scripts/2.create_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT setTour '{"tour": {"name": "Mountain Explorer", "imageCover": "https://images.pexels.com/photos/618833/pexels-photo-618833.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2", "description": "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu","summary": "Breathtaking hike through the Canadian Banff National Park","price":"1000000000000000000000000","images": ["https://images.pexels.com/photos/618833/pexels-photo-618833.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2", "https://images.pexels.com/photos/747964/pexels-photo-747964.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2" ]  }}' --accountId $OWNER

'''
'''--- scripts/3.get_tour.sh ---
#!/usr/bin/env bash
near view $CONTRACT getTour '{"id": "ID-1655110327981726020"}'

'''
'''--- scripts/4.get_tours.sh ---
#!/usr/bin/env bash
near view $CONTRACT getTours --account_id $OWNER 
'''
'''--- scripts/5.buy_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT buyTour '{"tourId": "ID-1655110327981726020"}' --depositYocto=1000000000000000000000000 --accountId $OWNER
'''
'''--- scripts/6.update_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT updateTour '{"tour": {"id": "ID-1655110327981726020", "name": "Mountain Hiker", "imageCover": "https://images.pexels.com/photos/618833/pexels-photo-618833.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2", "description": "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu","summary": "Breathtaking hike through the Canadian Banff National Park","price":"1000000000000000000000000","images": ["https://images.pexels.com/photos/618833/pexels-photo-618833.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2", "https://images.pexels.com/photos/747964/pexels-photo-747964.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2" ]  }}' --accountId $OWNER

'''
'''--- scripts/7.like_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT likeTour '{"id": "ID-1655110327981726020"}' --accountId $OWNER

'''
'''--- scripts/8.dislike_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT dislikeTour '{"id": "ID-1655110327981726020"}' --accountId $OWNER

'''
'''--- scripts/9.comment_on_tour.sh ---
#!/usr/bin/env bash
near call $CONTRACT commentOnTour '{"comment": { "tourId": "ID-1655110327981726020", "comment":"Not Bad"} }' --accountId $OWNER

'''
'''--- scripts/README.md ---
## Setting up your terminal

The scripts in this folder support a simple demonstration of the contract.

It uses the following setup:

```txt
┌───────────────────────────────────────┬───────────────────────────────────────┐
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                   A                   │                   B                   │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
└───────────────────────────────────────┴───────────────────────────────────────┘
```

### Terminal **A**

*This window is used to compile, deploy and control the contract*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment
  export OWNER=           # any account you control

  # for example
  # export CONTRACT=dev-1654101510417-62946478212070
  # export OWNER=giftea.testnet
  ```

- Commands
  ```sh
  1.deploy.sh               # cleanup, compile and deploy contract
  2.create_tour.sh          # call methods on the deployed contract
  ```

### Terminal **B**

*This window is used to render the contract account storage*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment

  # for example
  # export CONTRACT=dev-1654101510417-62946478212070
  ```

- Commands
  ```sh
  # monitor contract storage using near-account-utils
  # https://github.com/near-examples/near-account-utils
  watch -d -n 1 yarn storage $CONTRACT
  ```
---

## OS Support

### Linux

- The `watch` command is supported natively on Linux
- To learn more about any of these shell commands take a look at [explainshell.com](https://explainshell.com)

### MacOS

- Consider `brew info visionmedia-watch` (or `brew install watch`)

### Windows

- Consider this article: [What is the Windows analog of the Linux watch command?](https://superuser.com/questions/191063/what-is-the-windows-analog-of-the-linux-watch-command#191068)
'''
'''--- src/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/tour/README.md ---
![Near, Inc. logo](https://near.org/wp-content/themes/near-19/assets/img/logo.svg?t=1553011311)

## Design

### Interface

```ts
function setTour
```
- "Change" function (ie. a function that alters contract state)
- Receives a `Tour` object as a parameter, creates a new Tour and returns the success message

```ts
function getTour
```
- "View" function (ie. a function that does not alters contract state)
- Recieves a Tour's `id` as parameter
- Returns a Tour object

```ts
function getTours
```
- "View" function (ie. a function that does not alters contract state)
- Returns the whole Tours details/content

```ts
function buyTour
```
- "Change" function (ie. a function that alters contract state)
- Recieves a Tour's `id` as parameter
- This fetches a Tour by the `id` parameter and increaments it's sold amount

```ts
function updateTour
```
- "Change" function (ie. a function that alters contract state)
- Receives a `Tour` object as a parameter, updates Tour and returns the success message

```ts
function deleteTour
```
- "Change" function (ie. a function that alters contract state)
- Recieves a Tour's `id` as parameter
- Fetches the Tour by `id`, deletes it together with it's comments and rates

```ts
function likeTour
```
- "Change" function (ie. a function that alters contract state)
- Recieves a Tour's `id` as parameter
- Fetches the Tour by `id`, and adds a like to it.
- If a like has been added by a user and the function is called again, it removes the like.
- If a dislike has been added by a user and the function is called, it removes the dislike and adds a like

```ts
function dislikeTour
```
- "Change" function (ie. a function that alters contract state)
- Recieves a Tour's `id` as parameter
- Fetches the Tour by `id`, and adds a dislike to it.
- If a dislike has been added by a user and the function is called again, it removes the dislike.
- If a like has been added by a user and the function is called, it removes the like and adds a dislike

```ts
function commentOnTour
```
- "Change" function (ie. a function that alters contract state)
- Receives a `Comment` object as a parameter, fetches the Tour by the `tourId` value within the `Comment` object
- Creates a new comment and adds it to the Tour

```ts
function rateTour
```
- "Change" function (ie. a function that alters contract state)
- Receives a `Rate` object as a parameter, fetches the Tour by the `tourId` value within the `Rate` object
- Creates a new rate and adds it to the Tour
- The function will not execute if a user has rated before

'''
'''--- src/tour/__tests__/README.md ---
### Unit Tests

Unit tests can be run with the command below:

```
yarn run test
```

### Tests for Contract in `index.unit.spec.ts`

```
[Describe]: Checks for creating account

 [Success]: ✔ creates a tour

[Describe]: View a single Tour

 [Success]: ✔ Returns a single tour
 [Success]: ✔ Smart contract panics when there's no Tour with such ID

[Describe]: To purchase a single Tour

 [Success]: ✔ purchases a single tour and returns a response
 [Success]: ✔ Smart contract panics when there's no Tour with such ID

[Describe]: To delete a single Tour

 [Success]: ✔ deletes a single tour and returns a response
 [Success]: ✔ Smart contract panics when there's no Tour with such ID

[Describe]: To like on a single Tour

 [Success]: ✔ likes on a single tour and returns a response
 [Success]: ✔ unlikes on a single tour and returns a response
 [Success]: ✔ Smart contract panics when there's no Tour with such ID

[Describe]: To dislike on a single Tour

 [Success]: ✔ dislikes on a single tour and returns a response
 [Success]: ✔ undislikes on a single tour and returns a response
 [Success]: ✔ Smart contract panics when there's no Tour with such ID

[Describe]: Comment on tour

 [Success]: ✔ comments on tour
 [Success]: ✔ Smart contract panics when there's no Tour with such ID

[Describe]: Rate tour

 [Success]: ✔ rates tour
 [Success]: ✔ Smart contract panics when there's no Tour with such ID

    [File]: src/tour/__tests__/index.unit.spec.ts
  [Groups]: 9 pass, 9 total
  [Result]: ✔ PASS
[Snapshot]: 0 total, 0 added, 0 removed, 0 different
 [Summary]: 17 pass,  0 fail, 17 total
    [Time]: 220.521ms

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  [Result]: ✔ PASS
   [Files]: 1 total
  [Groups]: 9 count, 9 pass
   [Tests]: 17 pass, 0 fail, 17 total
    [Time]: 15046.675ms
✨  Done in 32.52s.

```
'''
'''--- src/tour/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/tour/__tests__/index.unit.spec.ts ---
import { VMContext } from "near-mock-vm";
import { TxFee, creator, tour, comment, rate } from "../../utils";
import {
  setTour,
  getTour,
  buyTour,
  deleteTour,
  likeTour,
  dislikeTour,
  commentOnTour,
  rateTour,
} from "../assembly";
import { tourIds } from "../assembly/models/tourModel";

// SET TOUR
describe("Checks for creating account", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);
  });

  it("creates a tour", () => {
    const response = setTour(tour);

    expect(response).toBe("Tour Created!");
    expect(tourIds.length).toBeGreaterThan(
      0,
      "A new tour exists with the id: " + tourIds[0]
    );
  });
});

// GET TOUR
describe("View a single Tour", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);

    setTour(tour);
  });

  it("Returns a single tour", () => {
    expect(tour.id).toStrictEqual(
      tourIds[0],
      "The uniqueId on the returned tour is equal to the id: " + tourIds[0]
    );
  });

  it("Smart contract panics when there's no Tour with such ID", () => {
    function getUnknownItem(): void {
      getTour("ANC-0000001");
    }
    expect(getUnknownItem).toThrow("This Tour doesn't exist");
  });
});

// BUY TOUR
describe("To purchase a single Tour", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);
    setTour(tour);
  });

  it("purchases a single tour and returns a response", () => {
    const response = buyTour(tourIds[0]);
    expect(response).toBe("Successfully Purchased Tour!");
  });

  it("Smart contract panics when there's no Tour with such ID", () => {
    function buyUnknownItem(): void {
      buyTour("ANC-0000001");
    }
    expect(buyUnknownItem).toThrow("Tour not found");
  });
});

// DELETE TOUR
describe("To delete a single Tour", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);
    setTour(tour);
  });

  it("deletes a single tour and returns a response", () => {
    const response = deleteTour(tourIds[0]);
    expect(response).toBe("Successfully deleted Tour");
  });

  it("Smart contract panics when there's no Tour with such ID", () => {
    function deleteUnknownItem(): void {
      deleteTour("ANC-0000001");
    }
    expect(deleteUnknownItem).toThrow("This Tour doesn't exist");
  });
});

// LIKE TOUR
describe("To like on a single Tour", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);
    setTour(tour);
  });

  it("likes on a single tour and returns a response", () => {
    const response = likeTour(tourIds[0]);
    expect(response).toBe("You liked Tour with ID:" + tourIds[0]);
  });

  it("unlikes on a single tour and returns a response", () => {
    likeTour(tourIds[0]);
    const response = likeTour(tourIds[0]);
    expect(response).toBe("You unliked Tour with ID:" + tourIds[0]);
  });

  it("Smart contract panics when there's no Tour with such ID", () => {
    function likeUnknownItem(): void {
      likeTour("ANC-0000001");
    }
    expect(likeUnknownItem).toThrow("This Tour doesn't exist");
  });
});

// DISLIKE TOUR
describe("To dislike on a single Tour", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);

    setTour(tour);
  });

  it("dislikes on a single tour and returns a response", () => {
    const response = dislikeTour(tourIds[0]);
    expect(response).toBe("You disliked Tour with ID:" + tourIds[0]);
  });

  it("undislikes on a single tour and returns a response", () => {
    dislikeTour(tourIds[0]);
    const response = dislikeTour(tourIds[0]);
    expect(response).toBe("You undisliked Tour with ID:" + tourIds[0]);
  });

  it("Smart contract panics when there's no Tour with such ID", () => {
    function dislikeUnknownItem(): void {
      dislikeTour("ANC-0000001");
    }
    expect(dislikeUnknownItem).toThrow("This Tour doesn't exist");
  });
});

// COMMENT ON TOUR
describe("Comment on tour", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);
  });

  it("comments on tour", () => {
    setTour(tour);
    const response = commentOnTour(comment);

    expect(response).toBe("You commented on Tour with ID:" + tourIds[0]);
  });

  it("Smart contract panics when there's no Tour with such ID", () => {
    function commentOnInvalidTour(): void {
      commentOnTour(comment);
    }
    expect(commentOnInvalidTour).toThrow("This Tour doesn't exist");
  });
});

// RATE TOUR
describe("Rate tour", () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(TxFee);
    VMContext.setSigner_account_id(creator);
  });

  it("rates tour", () => {
    setTour(tour);
    const response = rateTour(rate);

    expect(response).toBe("You rated Tour with ID:" + tourIds[0]);
  });

  it("Smart contract panics when there's no Tour with such ID", () => {
    function rateOnInvalidTour(): void {
      rateTour(rate);
    }
    expect(rateOnInvalidTour).toThrow("This Tour doesn't exist");
  });
});

'''
'''--- src/tour/asconfig.json ---
{
    "extends": "near-sdk-as/asconfig.json",
    "workspaces": [
      "src/tour"
    ]
  }
'''
'''--- src/tour/assembly/index.ts ---
import { tourID } from './../../utils';
import { Tour, listedTours, TourParam, tourIds } from "./models/tourModel";
import { ContractPromiseBatch, context } from "near-sdk-as";
import { Comment, tourComments } from "./models/commentModel";
import { Rate, tourRates } from "./models/rateModel";

/*
CREATE NEW TOUR
*/
export function setTour(tour: TourParam): string {
  const tourId = generateuniqueID(); // generates unique ID

  let storedTour = listedTours.get(tourId);
  if (storedTour !== null) {
    throw new Error(`a tour with ${tourId} already exists`);
  }
  tourIds.push(tourId);
  listedTours.set(tourId, Tour.fromPayload(tourId, tour));
  return "Tour Created!";
}

/*
FETCH TOUR/TOURS
*/

export function getTour(id: string): Tour | null {
  assert(listedTours.contains(id), "This Tour doesn't exist");
  return listedTours.get(id);
}

export function getTours(): Tour[] {
  return listedTours.values();
}

/*
PURCHASE TOUR
*/

export function buyTour(tourId: string): string {
  const tour = getTour(tourId);
  if (tour == null) {
    throw new Error("Tour not found");
  }
  if (tour.price.toString() != context.attachedDeposit.toString()) {
    throw new Error("Attached deposit should equal to the tour's price");
  }
  ContractPromiseBatch.create(tour.owner).transfer(context.attachedDeposit);
  tour.incrementSoldAmount();
  listedTours.set(tour.id, tour);

  return "Successfully Purchased Tour!";
}

/*
UPDATE TOUR
*/

export function updateTour(tour: Tour): string {
  let storedTour = listedTours.get(tour.id);
  if (storedTour === null) {
    throw new Error(`Tour not found`);
  }
  const opt = storedTour.updateFromPayload(tour);

  listedTours.set(tour.id, opt);

  return "Successfully Updated Tour!";
}

/*
DELETE TOUR
*/

export function deleteTour(id: string): string {
  let tour = listedTours.getSome(id);

  tour.comments.forEach((comment) => {
    tourComments.delete(comment.id);
  });
  tour.rates.forEach((rate) => {
    tourRates.delete(rate.id);
  });

  listedTours.delete(id);

  return "Successfully deleted Tour";
}

/*
IMPRESSIONS ON TOUR
*/
// LIKE
export function likeTour(id: string): string {
  let storedTour = listedTours.getSome(id);

  if (storedTour.dislike.includes(context.sender)) {
    let uid = storedTour.dislike.findIndex((data) => data == context.sender);
    if (uid != -1) {
      storedTour.dislike.splice(uid, 1);
    }
  }

  if (storedTour.like.includes(context.sender)) {
    let uid = storedTour.like.findIndex((data) => data == context.sender);
    if (uid != -1) {
      storedTour.like.splice(uid, 1);
    }
    listedTours.set(id, storedTour);
    return "You unliked Tour with ID:" + id;
  }

  const opt = storedTour.likeTour();
  listedTours.set(id, opt);

  return "You liked Tour with ID:" + id;
}

// DISLIKE
export function dislikeTour(id: string): string {
  let storedTour = listedTours.getSome(id);

  if (storedTour.like.includes(context.sender)) {
    let uid = storedTour.like.findIndex((data) => data == context.sender);
    if (uid != -1) {
      storedTour.like.splice(uid, 1);
    }
  }

  if (storedTour.dislike.includes(context.sender)) {
    let uid = storedTour.dislike.findIndex((data) => data == context.sender);
    if (uid != -1) {
      storedTour.dislike.splice(uid, 1);
    }
    listedTours.set(id, storedTour);
    return "You undisliked Tour with ID:" + id;
  }

  const opt = storedTour.dislikeTour();
  listedTours.set(id, opt);

  return "You disliked Tour with ID:" + id;
}

/*
COMMENTS ON TOUR
*/
export function commentOnTour(comment: Comment): string {
  const commentId = generateuniqueID(); // generates unique ID

  let tour = listedTours.getSome(comment.tourId);

  tourComments.set(commentId, Comment.fromPayload(commentId, comment));
  let storedComment = tourComments.getSome(commentId);
  let opt = tour.comment(storedComment);
  listedTours.set(tour.id, opt);
  return "You commented on Tour with ID:" + comment.tourId;
}

/*
RATE TOUR
*/

export function rateTour(rate: Rate): string {
  const rateId = generateuniqueID(); // generates unique ID

  let tour = listedTours.getSome(rate.tourId);
  let found = false;

  for (var i = 0; i < tour.rates.length; i++) {
    if (tour.rates[i].owner == context.sender) {
      found = true;
      break;
    }
  }

  assert(!found, "You have already rated this Tour");

  tourRates.set(rateId, Rate.fromPayload(rateId, rate));
  let storedRate = tourRates.getSome(rateId);
  let opt = tour.rate(storedRate);
  listedTours.set(tour.id, opt);
  return "You rated Tour with ID:" + rate.tourId;
}

/**
 * generates a random ID 
 */
 function generateuniqueID(): tourID {
  const id = "ID-" + context.blockTimestamp.toString();
  return id;
}
'''
'''--- src/tour/assembly/models/commentModel.ts ---
import { PersistentUnorderedMap, context } from "near-sdk-as";
import { tourID } from "../../../utils";

@nearBindgen
export class Comment {
  id: string;
  tourId: string;
  comment: string;
  commenter: string;
  createdAt: u64;

  public static fromPayload(commentId: tourID, payload: Comment): Comment {
    const comment = new Comment();
    comment.id = commentId;
    comment.tourId = payload.tourId;
    comment.comment = payload.comment;
    comment.commenter = context.sender;
    comment.createdAt = context.blockTimestamp;

    return comment;
  }
}

export const tourComments = new PersistentUnorderedMap<string, Comment>(
  "COMMENT"
);

'''
'''--- src/tour/assembly/models/rateModel.ts ---
import { PersistentUnorderedMap, u128, context } from "near-sdk-as";
import { tourID } from "../../../utils";

@nearBindgen
export class Rate {
  id: string;
  tourId: string;
  rate: i32;
  owner: string;
  createdAt: u64;

  public static fromPayload(rateId: tourID, payload: Rate): Rate {
    const rate = new Rate();
    rate.id = rateId;
    rate.tourId = payload.tourId;
    rate.rate = payload.rate;
    rate.createdAt = context.blockTimestamp;
    rate.owner = context.sender;
    return rate;
  }
}

export const tourRates = new PersistentUnorderedMap<string, Rate>(
  "RATE"
);

'''
'''--- src/tour/assembly/models/tourModel.ts ---
import {
  PersistentUnorderedMap,
  u128,
  context,
  PersistentVector,
} from "near-sdk-as";
import { Comment } from "./commentModel";
import { Rate } from "./rateModel";
import { tourID } from "../../../utils";

@nearBindgen
export class TourParam {
  id: tourID;
  name: string;
  price: u128;
  summary: string;
  description: string;
  imageCover: string;
  images: string[];
}

@nearBindgen
export class Tour {
  id: tourID;
  name: string;
  ratingsAverage: f64;
  ratingsQuantity: u32;
  price: u128;
  summary: string;
  description: string;
  imageCover: string;
  images: string[];
  like: string[];
  dislike: string[];
  owner: string;
  sold: u32;
  comments: Comment[];
  rates: Rate[];
  createdAt: u64;

  public static fromPayload(tourId: tourID, payload: TourParam): Tour {
    const tour = new Tour();
    tour.id = tourId;
    tour.name = payload.name;
    tour.description = payload.description;
    tour.images = payload.images;
    tour.summary = payload.summary;
    tour.ratingsAverage = 0;
    tour.ratingsQuantity = 0;
    tour.price = payload.price;
    tour.imageCover = payload.imageCover;
    tour.owner = context.sender;
    tour.like = [];
    tour.dislike = [];
    tour.comments = [];
    tour.rates = [];
    tour.createdAt = context.blockTimestamp;

    return tour;
  }

  public incrementSoldAmount(): void {
    this.sold = this.sold + 1;
  }

  updateFromPayload(payload: Tour): Tour {
    this.name = payload.name;
    this.description = payload.description;
    this.images = payload.images;
    this.summary = payload.summary;
    this.price = payload.price;
    this.imageCover = payload.imageCover;
    return this;
  }

  likeTour(): Tour {
    this.like.push(context.sender);
    return this;
  }

  dislikeTour(): Tour {
    this.dislike.push(context.sender);
    return this;
  }

  comment(comment: Comment): Tour {
    this.comments.push(comment);
    return this;
  }

  rate(rate: Rate): Tour {
    this.rates.push(rate);
    let numRates = this.rates.length;
    this.ratingsQuantity = numRates;
    let num1 = this.rates.filter((item) => item.rate === 1).length;
    let num2 = this.rates.filter((item) => item.rate === 2).length;
    let num3 = this.rates.filter((item) => item.rate === 3).length;
    let num4 = this.rates.filter((item) => item.rate === 4).length;
    let num5 = this.rates.filter((item) => item.rate === 5).length;

    let tot = num1 + num2 + num3 + num4 + num5;
    let rateAvg = (num1 + num2 * 2 + num3 * 3 + num4 * 4 + num5 * 5) / tot;
    this.ratingsAverage = Math.round(rateAvg * 100) / 100;
    return this;
  }
}

export const listedTours = new PersistentUnorderedMap<string, Tour>(
  "LISTED_TOURS"
);
export const tourIds = new PersistentVector<string>("id");

'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
import { u128 } from "near-sdk-core";
import { Comment } from "./tour/assembly/models/commentModel";
import { Rate } from "./tour/assembly/models/rateModel";
import { TourParam } from "./tour/assembly/models/tourModel";

export type AccountId = string;
export type tourID = string;
export const TxFee = u128.from("520000000000000000000000");

/* Dummy data for TEST CASES */
export const creator = "giftea.testnet";

export const tour: TourParam = {
  id: "ID-42",
  name: "The Forest Hiker",
  images: ["img"],
  imageCover: "img",
  summary: "text",
  description: "text",
  price: TxFee,
};

export const comment: Comment = {
  id: "909",
  comment: "Hola",
  commenter: creator,
  tourId: tour.id,
  createdAt: 2393439489,
};

export const rate: Rate = {
  id: "01",
  tourId: tour.id,
  rate: 2,
  owner: creator,
  createdAt: 2393439489
};

'''