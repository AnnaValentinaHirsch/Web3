*GitHub Repository "Learn-NEAR-Hispano/NCD2--NEARVolunteer"*

'''--- .eslintrc.yml ---
env:
  es2021: true
  node: true
extends:
  - 'eslint:recommended'
  - 'plugin:@typescript-eslint/recommended'
parser: '@typescript-eslint/parser'
parserOptions:
  ecmaVersion: 12
  sourceType: module
plugins:
  - '@typescript-eslint'
rules: {}

'''
'''--- .gitpod.yml ---
image:
  file: .gitpod.Dockerfile
# Options to prebuild the image after github events and set notifications/badges
github:
  prebuilds:
    # enable for the master/default branch (defaults to true)
    master: true
    # enable for pull requests coming from this repo (defaults to true)
    pullRequests: true
    # enable for pull requests coming from forks (defaults to false)
    pullRequestsFromForks: true
    # add a check to pull requests (defaults to true)
    addCheck: true
    # add a "Review in Gitpod" button as a comment to pull requests (defaults to false)
    addComment: true
    # add a "Review in Gitpod" button to the pull request's description (defaults to false)
    addBadge: false
    # add a label once the prebuild is ready to pull requests (defaults to false)
    addLabel: false

# List the start up tasks. You can start them in parallel in multiple terminals. See https://www.gitpod.io/docs/config-start-tasks/
tasks:
  - before: echo "nvm use default" >> ~/.bashrc && nvm use default
    command: source ~/.bashrc; gp open README-Gitpod.md && yarn && alias near=./node_modules/near-cli/bin/near && yarn dev

ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- .travis.yml ---
language: node_js
node_js:
  - 12
os:
  - linux
  - osx
  - windows
env:
  - NODE_ENV=ci YARN_GPG=no
  - NODE_ENV=ci-betanet YARN_GPG=no
cache: yarn
script:
  - yarn lint && yarn test

'''
'''--- README-ES.md ---
**NEAR de voluntario**

NEARVolunteer es una dApp que permite a las personas recolectar certificados cada vez que participan en un voluntariado. Los eventos de voluntariado son creados por anfitriones, los cuales determinan el periodo en el que se podr√° reclamar el certificado.

Los voluntarios que tengan certificados, podr√°n recibir recompensas e invitaciones. Tambi√©n estos voluntarios son los √∫nicos que podr√°n calificar el evento y generar sugerencias. Adem√°s los voluntarios pueden formarse una reputaci√≥n por su nivel de participaci√≥n.

El proceso puede ser mejorado, si crear√° un mecanismo de reputaci√≥n, y solo aquellos voluntarios con un nivel de reputaci√≥n(n√∫mero de certificados) pueden generar eventos, de esa manera se evita que se creen imitaciones o eventos innecesarios.

Inicio r√°pido
===========

Para ejecutar este proyecto localmente:

1. Requisitos previos: aseg√∫rese de tener Node.js ‚â• 12 instalado (https://nodejs.org), luego √∫selo para instalar [yarn]: `npm install --global yarn` (o simplemente` npm i -g yarn `)
2. Ejecute el servidor de desarrollo local: `yarn && yarn dev` (consulte` package.json` para
   lista completa de `scripts` que puede ejecutar con` yarn`)

¬°Ahora tendr√° un entorno de desarrollo local respaldado por NEAR TestNet! Ejecutar `yarn dev` te dir√° la URL que puedes visitar en tu navegador para ver la aplicaci√≥n.

Explorando el c√≥digo
==================

1. El c√≥digo de backend vive en la carpeta `/ assembly`. Este c√≥digo se implementa en
   la cadena de bloques NEAR cuando ejecuta `yarn deploy: contract`. Este tipo de
   el c√≥digo que se ejecuta en una cadena de bloques se denomina "contrato inteligente" - [m√°s informaci√≥n
   acerca de los contratos inteligentes NEAR] [documentos de contratos inteligentes].
2. El c√≥digo de la interfaz reside en la carpeta `/ src`.
   [/src/index.html](/src/index.html) es un excelente lugar para comenzar a explorar. Nota
   que carga en `/ src / index.js`, donde puede aprender c√≥mo la interfaz
   se conecta a la cadena de bloques NEAR.
3. Pruebas: existen diferentes tipos de pruebas para el frontend y el backend. los
   el c√≥digo de backend se prueba con el comando [asp] para ejecutar el backend
   Pruebas de AssemblyScript y [jest] para ejecutar pruebas de frontend. Tu puedes correr
   ambos a la vez con "prueba de hilo".

Tanto el c√≥digo del lado del cliente como del contrato se recargar√°n autom√°ticamente a medida que cambie los archivos de origen.

Desplegar
======

Cada contrato inteligente en NEAR tiene su [propia cuenta asociada] [NEAR cuentas]. Cuando ejecuta `yarn dev`, sus contratos inteligentes se implementan en NEAR TestNet en vivo con una cuenta desechable. Cuando est√© listo para hacerlo permanente, aqu√≠ le explicamos c√≥mo hacerlo.

Paso 0: Instale near-cli
--------------------------

Necesita near-cli instalado globalmente. As√≠ es c√≥mo:

    npm install --global near-cli

Esto le dar√° la herramienta "near" [CLI]. Aseg√∫rese de que est√© instalado con:

    casi --versi√≥n

Paso 1: crea una cuenta para el contrato
------------------------------------------

Visite [NEAR Wallet] y cree una nueva cuenta. Implementar√°s estos contratos inteligentes en esta nueva cuenta.

Ahora autorice NEAR CLI para esta nueva cuenta y siga las instrucciones que le da:

    near login

Paso 2: establezca el nombre del contrato en el c√≥digo
---------------------------------

Modifique la l√≠nea en `src / config.js` que establece el nombre de cuenta del contrato. Config√∫relo con la identificaci√≥n de cuenta que utiliz√≥ anteriormente.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'tu-cuenta-aqu√≠!'

Paso 3: cambie la URL remota si clon√≥ este repositorio
-------------------------

A menos que haya bifurcado este repositorio, deber√° cambiar la URL remota a un repositorio al que tenga acceso de confirmaci√≥n. Esto permitir√° la implementaci√≥n autom√°tica en Github Pages desde la l√≠nea de comandos.

1) vaya a GitHub y cree un nuevo repositorio para este proyecto
2) abre tu terminal y en la ra√≠z de este proyecto ingresa lo siguiente:

    $ `git remote set-url origin https: // github.com / YOUR_USERNAME / YOUR_REPOSITORY.git`

Paso 4: ¬°despliegue!
---------------

Un comando:

    despliegue de hilo

Como puede ver en `package.json`, esto hace dos cosas:

1. crea e implementa contratos inteligentes en NEAR TestNet
2. construye e implementa c√≥digo frontend en GitHub usando [gh-pages]. Esto solo funcionar√° si el proyecto ya tiene un repositorio configurado en GitHub. Si√©ntase libre de modificar el script `deploy` en` package.json` para implementarlo en otro lugar.

Paso 5: üìë ¬°Explorando los m√©todos de contrato inteligente de NEAR Volunteer!
---------------

### Comando para agregar un evento:
    near view aysel.testnet getAllEvents 

### Comando para obtener todos los eventos:
    near call <id_of_your_smart_contract> addEvent '{"text":"path of your certificate","code":"code","dateStart":"XXXX-XX-XX","dateEnd":"XXXX-XX-XX"}' --account-id <your_account.testnet>

Ejemplo:

    near call aysel.testnet addEvent '{"text":"http://www.relal.org.co/images/Redes_RELAL/Voluntariado/Logo-Voluntariado.jpg","code":"123234","dateStart":"2021-10-02","dateEnd":"2021-10-04"}' --account-id aysel.testnet

### Comando para agregar un certificado:
    near view aysel.testnet getAllCertificates 

### Comando para obtener todos los certificados:
    near call <id_of_your_smart_contract> addCertificate '{"text":"path of your certificate"}' --account-id <your_account.testnet>

Ejemplo:

    near call aysel.testnet addCertificate '{"text":"123234"}' --account-id aysel.testnet

Paso 6: üìë ¬°Explorando las pruebas de NEAR Volunteer!
---------------
### Pruebas de contratos inteligentes

    yarn asp

### Pruebas de integraci√≥n y UI

    yarn jest

### Todas las pruebas

    npm run test

Paso 7: üìë ¬°Explorando el NEAR Volunteer en vivo!
---------------
Inicie sesi√≥n en su billetera cercana, cree eventos y reclame sus certificados

https://near-volunteer.vercel.app/

Agregue m√°s ideas en la figma de la maqueta, ser√° genial tener m√°s ideas

https://www.figma.com/file/gnhw58NXOAVfYnl7sg13zr/NEAR-Volunteer?node-id=0%3A1

  [NEAR]: https://nearprotocol.com/
  [yarn]: https://yarnpkg.com/
  [AssemblyScript]: https://docs.assemblyscript.org/
  [React]: https://reactjs.org
  [smart contract docs]: https://docs.nearprotocol.com/docs/roles/developer/contracts/assemblyscript
  [asp]: https://www.npmjs.com/package/@as-pect/cli
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.nearprotocol.com/docs/concepts/account
  [NEAR Wallet]: https://wallet.nearprotocol.com
  [near-cli]: https://github.com/nearprotocol/near-cli
  [CLI]: https://www.w3schools.com/whatis/whatis_cli.asp
  [create-near-app]: https://github.com/nearprotocol/create-near-app
  [gh-pages]: https://github.com/tschaub/gh-pages
'''
'''--- README-Gitpod.md ---
Guest Book - Gitpod version
===========================

Sign in with [NEAR] and add a message to the guest book! A starter app built with an [AssemblyScript] backend and a [React] frontend.

This README is specific to Gitpod and this example. For local development, please see [README.md](README.md).

Exploring The Code
==================

1. The backend code lives in the `/assembly` folder. This code gets deployed to
   the NEAR blockchain when you run `yarn deploy:contract`. This sort of
   code-that-runs-on-a-blockchain is called a "smart contract" ‚Äì [learn more
   about NEAR smart contracts][smart contract docs].
2. The frontend code lives in the `/src` folder.
   [/src/index.html](/src/index.html) is a great place to start exploring. Note
   that it loads in `/src/index.js`, where you can learn how the frontend
   connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and backend. The
   backend code gets tested with the [asp] command for running the backend
   AssemblyScript tests, and [jest] for running frontend tests. You can run
   both of these at once with `yarn test`.

Both contract and client-side code will auto-reload as you change source files.

Using
======

Gitpod has taken care of installing all the necessary tools and dependencies. At the bottom of Gitpod is a terminal which will display a link to follow:

    Server running at http://localhost:1234

A small dialog appears showing options similar to this:

![A Gitpod dialog box saying 'A service is available on port 1234' and giving options to 'Open Preview' or 'Open Browser'](assets/gitpod-port-1234.jpg)

The "Open Preview" option will open the site in a tab within the IDE. Note that Gitpod may need a little time to spin up the website. It's possible this step might require reloading after a brief pause.

The "Open Browser" option will open a new tab in your browser. Either option will work and is up to your preference.

Once you've opened the web app in your browser, log in and experiment with the simple "guest book" smart contract.

The "Save" button sends the text input to the blockchain, storing it as a string. The web app will reload with the new guest book messages automatically.

The "Save & Donate" button demonstrates attaching NEAR and a gas price when calling the smart contract's method `addMessage`. When the web app refreshes with "paid" messages, the user interface highlights them.

Data collection
===============
By using Gitpod in this project, you agree to opt-in to basic, anonymous analytics. No personal information is transmitted. Instead, these usage statistics aid in discovering potential bugs and user flow information.

  [smart contract docs]: https://docs.nearprotocol.com/docs/roles/developer/contracts/assemblyscript
  [asp]: https://www.npmjs.com/package/@as-pect/cli
  [jest]: https://jestjs.io/
  [NEAR]: https://nearprotocol.com/
  [AssemblyScript]: https://docs.assemblyscript.org/
  [React]: https://reactjs.org

'''
'''--- README.md ---
**NEAR Volunteer** 
NEAR Volunteer is a dApp that allows people to collect certificates every time they volunteer. Volunteer events are created by hosts, who determine the period in which the certificate can be claimed.

Volunteers who have certificates can receive rewards and invitations. Also these volunteers are the only ones who will be able to rate the event and generate suggestions. In addition, volunteers can build a reputation for their level of participation.

The process can be improved, if you will create a reputation mechanism, and only those volunteers with a reputation level (number of certificates) can generate events, thus avoiding unnecessary imitations or events being created.

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you have Node.js ‚â• 12 installed (https://nodejs.org), then use it to install [yarn]: `npm install --global yarn` (or just `npm i -g yarn`)
2. Run the local development server: `yarn && yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet! Running `yarn dev` will tell you the URL you can visit in your browser to see the app.

Exploring The Code
==================

1. The backend code lives in the `/assembly` folder. This code gets deployed to
   the NEAR blockchain when you run `yarn deploy:contract`. This sort of
   code-that-runs-on-a-blockchain is called a "smart contract" ‚Äì [learn more
   about NEAR smart contracts][smart contract docs].
2. The frontend code lives in the `/src` folder.
   [/src/index.html](/src/index.html) is a great place to start exploring. Note
   that it loads in `/src/index.js`, where you can learn how the frontend
   connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and backend. The
   backend code gets tested with the [asp] command for running the backend
   AssemblyScript tests, and [jest] for running frontend tests. You can run
   both of these at once with `yarn test`.

Both contract and client-side code will auto-reload as you change source files.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contracts get deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli
--------------------------

You need near-cli installed globally. Here's how:

    npm install --global near-cli

This will give you the `near` [CLI] tool. Ensure that it's installed with:

    near --version

Step 1: Create an account for the contract
------------------------------------------

Visit [NEAR Wallet] and make a new account. You'll be deploying these smart contracts to this new account.

Now authorize NEAR CLI for this new account, and follow the instructions it gives you:

    near login

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'your-account-here!'

Step 3: change remote URL if you cloned this repo 
-------------------------

Unless you forked this repository you will need to change the remote URL to a repo that you have commit access to. This will allow auto deployment to Github Pages from the command line.

1) go to GitHub and create a new repository for this project
2) open your terminal and in the root of this project enter the following:

    $ `git remote set-url origin https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git`

Step 4: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contracts to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Step 5: üìë Exploring the NEAR Volunteer smart contract methods!
---------------

### Command to add an event:
    near view aysel.testnet getAllEvents 

### Command to get all the events:
    near call <id_of_your_smart_contract> addEvent '{"text":"path of your certificate","code":"code","dateStart":"XXXX-XX-XX","dateEnd":"XXXX-XX-XX"}' --account-id <your_account.testnet>

Example:

    near call aysel.testnet addEvent '{"text":"http://www.relal.org.co/images/Redes_RELAL/Voluntariado/Logo-Voluntariado.jpg","code":"123234","dateStart":"2021-10-02","dateEnd":"2021-10-04"}' --account-id aysel.testnet

### Command to add a certificate:
    near view aysel.testnet getAllCertificates 

### Command to get all the certificates:
    near call <id_of_your_smart_contract> addCertificate '{"text":"path of your certificate"}' --account-id <your_account.testnet>

Example:

    near call aysel.testnet addCertificate '{"text":"123234"}' --account-id aysel.testnet

Step 6: üìë Exploring the NEAR Volunteer tests!
---------------
### Smart contract tests

    yarn asp

### Integration & UI tests 

    yarn jest

### All tests

    npm run test

Step 7: üìë Exploring the NEAR Volunteer on live!
---------------
Login in your near wallet, create events and claim your certificates

https://near-volunteer.vercel.app/

Add more ideas in the mockup figma, that'll be great to have more ideas

https://www.figma.com/file/gnhw58NXOAVfYnl7sg13zr/NEAR-Volunteer?node-id=0%3A1

Explanation:

    https://www.loom.com/share/2fe1fdce64d74a55ba42c4766231e2bc

  [NEAR]: https://nearprotocol.com/
  [yarn]: https://yarnpkg.com/
  [AssemblyScript]: https://docs.assemblyscript.org/
  [React]: https://reactjs.org
  [smart contract docs]: https://docs.nearprotocol.com/docs/roles/developer/contracts/assemblyscript
  [asp]: https://www.npmjs.com/package/@as-pect/cli
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.nearprotocol.com/docs/concepts/account
  [NEAR Wallet]: https://wallet.nearprotocol.com
  [near-cli]: https://github.com/nearprotocol/near-cli
  [CLI]: https://www.w3schools.com/whatis/whatis_cli.asp
  [create-near-app]: https://github.com/nearprotocol/create-near-app
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports')

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json",
  "entry": "assembly/main.ts",
  "options": {
    "binaryFile": "out/main.wasm"
  }
} 

'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />

'''
'''--- assembly/__tests__/certificates.spec.ts ---
import { addCertificate, getAllCertificates, addEvent } from '../main';
import { PostedCertificate, certificates, PostedEvent, events } from '../model';
import { VMContext, Context, u128 } from 'near-sdk-as';

function createCertificate(text: string): PostedCertificate {
  return new PostedCertificate(text);
}
function createEvent(text: string, code: string, dateStart: string, dateEnd: string): PostedEvent {
  return new PostedEvent(text, code, dateStart, dateEnd);
}

const path = 'https://cdn.pixabay.com/photo/image_certificate.jpg';
const code = '2863643';
const dateStart = '2021-09-30';
const dateEnd = '2021-10-02';

const certificateTest = '2863643';
const pathTest = 'https://cdn.pixabay.com/photo/image_certificate.jpg';
const certificate = createCertificate(pathTest);

describe('certificate tests', () => {
  beforeEach(() => {
    while(certificates.length > 0) {
      certificates.pop();
    }
  });

  it('adds a certificate', () => {
    addEvent(path, code, dateStart, dateEnd);
    addCertificate(certificateTest);
    expect(certificates.length).toBe(
      1,
      'should only contain one certificate'
    );
    expect(certificates[0]).toStrictEqual(
      certificate,
      'certificate should be "hello world"'
    );
  });

  it('adds a premium certificate', () => {
    VMContext.setAttached_deposit(u128.from('10000000000000000000000'));
    addEvent(path, code, dateStart, dateEnd);
    addCertificate(certificateTest);
    const certificatesAR = getAllCertificates();
    expect(certificatesAR[0].premium).toStrictEqual(true,
      'should be premium'
    );
  });

  it('retrieves certificates', () => {
    addEvent(path, code, dateStart, dateEnd);
    addCertificate(certificateTest);
    const certificatesArr = getAllCertificates();
    expect(certificatesArr.length).toBe(
      1,
      'should be one certificate'
    );
    expect(certificatesArr).toIncludeEqual(
      certificate,
      'certificates should include:\n' + certificate.toJSON()
    );
  });

  it('only show the last 10 certificates', () => {
    addEvent(path, code, dateStart, dateEnd);
    const newCertificates: PostedCertificate[] = [];
    for(let i: i32 = 0; i < 10; i++) {
      newCertificates.push(createCertificate(pathTest));
      addCertificate(certificateTest);
    }
    const certificates = getAllCertificates();
    log(certificates.slice(7, 10));
    expect(certificates).toStrictEqual(
      newCertificates,
      'should be the last ten certificates'
    );
  });
});

describe('attached deposit tests', () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(u128.fromString('0'));
    VMContext.setAccount_balance(u128.fromString('0'));
  });

  it('attaches a deposit to a contract call', () => {
    log('Initial account balance: ' + Context.accountBalance.toString());

    addCertificate(certificateTest);
    VMContext.setAttached_deposit(u128.from('10'));

    log('Attached deposit: 10');
    log('Account balance after deposit: ' + Context.accountBalance.toString());

    expect(Context.accountBalance.toString()).toStrictEqual(
      '10',
      'balance should be 10'
    );
  });
});

'''
'''--- assembly/__tests__/event.spec.ts ---
import { addEvent, getAllEvents } from '../main';
import { PostedEvent, events } from '../model';
import { VMContext, Context, u128 } from 'near-sdk-as';

function createEvent(text: string, code: string, dateStart: string, dateEnd: string): PostedEvent {
  return new PostedEvent(text, code, dateStart, dateEnd);
}

const path = 'https://cdn.pixabay.com/photo/image_certificate.jpg';
const code = '2863643';
const dateStart = '2021-09-30';
const dateEnd = '2021-10-02';

const event = createEvent(path, code, dateStart, dateEnd);

describe('events tests', () => {
  afterEach(() => {
    while(events.length > 0) {
      events.pop();
    }
  });

  it('adds an event', () => {
    addEvent(path, code, dateStart, dateEnd);
    expect(events.length).toBe(
      1,
      'should only contain one event'
    );
    expect(events[0]).toStrictEqual(
       event,
      'event should be a path'
    );
  });

  it('retrieves events', () => {
    addEvent(path, code, dateStart, dateEnd);
    const eventArr = getAllEvents();
    expect(eventArr.length).toBe(
      1,
      'should be one event'
    );
    expect(eventArr).toIncludeEqual(
      event,
      'event should include:\n' + event.toJSON()
    );
  });

  it('only show the last 10 events', () => {
    addEvent(path, code, dateStart, dateEnd);
    const newEvents: PostedEvent[] = [];
    for(let i: i32 = 0; i < 10; i++) {
      const text = 'event #' + i.toString();
      newEvents.push(createEvent(text, code, dateStart, dateEnd));
      addEvent(text, code, dateStart, dateEnd);
    }
    const events = getAllEvents();
    log(events.slice(7, 10));
    expect(events).toStrictEqual(
       newEvents,
      'should be the last ten events'
    );
    expect(events).not.toIncludeEqual(
      event,
      'shouldn\'t contain the first element'
    );
  });
});

describe('attached deposit tests', () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(u128.fromString('0'));
    VMContext.setAccount_balance(u128.fromString('0'));
  });

  it('attaches a deposit to a contract call', () => {
    log('Initial account balance: ' + Context.accountBalance.toString());

    addEvent(path, code, dateStart, dateEnd);
    VMContext.setAttached_deposit(u128.from('10'));

    log('Attached deposit: 10');
    log('Account balance after deposit: ' + Context.accountBalance.toString());

    expect(Context.accountBalance.toString()).toStrictEqual(
      '10',
      'balance should be 10'
    );
  });
});

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/main.ts ---
import { PostedCertificate, certificates, PostedEvent, events } from './model';
import { context } from "near-sdk-as";

// --- contract code goes below

// The maximum number of latest certificates the contract returns.
const ITEMS_LIMIT = 10;

/// CERTIFICATES

/**
 * Adds a new certificate under the name of the sender's account id.\
 * NOTE: This is a change method. Which means it will modify the state.\
 * But right now we don't distinguish them with annotations yet.
 */

export function addCertificate(text: string): bool {
  const numEvents = min(ITEMS_LIMIT, events.length);
  const startIndex = events.length - numEvents;
  for(let i = 0; i < numEvents; i++) {
    if(events[i + startIndex].codeEvent == text){
      // Creating a new certificate and populating fields with our data
      const certificate = new PostedCertificate(events[i + startIndex].text);
      // Adding the certificate to end of the the persistent collection
      certificates.push(certificate);
      return true
    }
  }
  return false
}

/**
 * Returns an array of last N certificates.\
 * NOTE: This is a view method. Which means it should NOT modify the state.
 */
 export function getAllCertificates(): PostedCertificate[] {
  const numCertificates = min(ITEMS_LIMIT, certificates.length);
  const startIndex = certificates.length - numCertificates;
  const result = new Array<PostedCertificate>(numCertificates);
  for(let i = 0; i < numCertificates; i++) {
    result[i] = certificates[i + startIndex];
  }
  return result;
}

/// EVENTS

/**
 * Adds a new event under the name of the sender's account id.\
 * NOTE: This is a change method. Which means it will modify the state.\
 * But right now we don't distinguish them with annotations yet.
 */
 export function addEvent(text: string, code: string, dateStart: string, dateEnd: string): bool {
  // Creating a new event and populating fields with our data
  const event = new PostedEvent(text, code, dateStart, dateEnd);
  // Adding the event to end of the the persistent collection
  events.push(event);

  return true
}

/**
 * Returns an array of last N events.\
 * NOTE: This is a view method. Which means it should NOT modify the state.
 */
 export function getAllEvents(): PostedEvent[] {
  const numEvents = min(ITEMS_LIMIT, events.length);
  const startIndex = events.length - numEvents;
  const result = new Array<PostedEvent>();
  for(let i = 0; i < numEvents; i++) {
      result.push(events[i + startIndex]);
  }
  return result;
}

'''
'''--- assembly/model.ts ---
import { context, u128, PersistentVector } from "near-sdk-as";

/** 
 * Exporting a new class PostedCertificate so it can be used outside of this file.
 */
@nearBindgen
export class PostedCertificate {
  premium: boolean;
  sender: string;
  active: boolean;
  constructor(public text: string) {
    this.premium = context.attachedDeposit >= u128.from('10000000000000000000000');
    this.sender = context.sender;
    this.active = true;
  }
}

/**
 * collections.vector is a persistent collection. Any changes to it will
 * be automatically saved in the storage.
 * The parameter to the constructor needs to be unique across a single contract.
 * It will be used as a prefix to all keys required to store data in the storage.
 */
export const certificates = new PersistentVector<PostedCertificate>("m");

/**  */
/** 
 * Exporting a new class PostedEvent so it can be used outside of this file.
 */
@nearBindgen
export class PostedEvent {
  sender: string;
  active: boolean;
  constructor(public text: string, public codeEvent: string, public dateStart: string, public dateEnd: string) {
    this.sender = context.sender;
    this.active = true;
  }
}

/**
* collections.vector is a persistent collection. Any changes to it will
* be automatically saved in the storage.
* The parameter to the constructor needs to be unique across a single contract.
* It will be used as a prefix to all keys required to store data in the storage.
*/
export const events = new PersistentVector<PostedEvent>("n");
'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react']
}

'''
'''--- package.json ---
{
  "name": "guest-book",
  "version": "0.1.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "build": "yarn build:contract && yarn build:web",
    "build:contract": "asb",
    "build:contract:debug": "asb --target debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "deploy": "yarn build && near deploy && gh-pages -d dist/",
    "dev": "yarn build:contract:debug && near dev-deploy && nodemon --watch assembly -e ts --exec yarn dev:start",
    "lint": "eslint \"./**/*.js\" \"./**/*.jsx\"",
    "start": "yarn deploy && parcel src/index.html",
    "dev:start": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "test": "yarn build:contract:debug && asp && jest"
  },
  "devDependencies": {
    "@babel/core": "^7.14.0",
    "@babel/preset-env": "^7.14.2",
    "@babel/preset-react": "^7.13.13",
    "@typescript-eslint/eslint-plugin": "^4.22.1",
    "@typescript-eslint/parser": "^4.22.1",
    "babel-jest": "^26.6.3",
    "eslint": "^7.26.0",
    "gh-pages": "^3.1.0",
    "jest": "^26.6.3",
    "jest-environment-node": "^26.6.2",
    "near-cli": "^2.0.0",
    "near-sdk-as": "3.2.3",
    "nodemon": "^2.0.7",
    "parcel-bundler": "^1.12.5",
    "react-test-renderer": "^17.0.2",
    "sass": "^1.32.13",
    "typescript": "^4.2.4"
  },
  "dependencies": {
    "big.js": "^6.1.1",
    "env-cmd": "^10.1.0",
    "near-api-js": "^0.41.0",
    "prop-types": "^15.7.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "regenerator-runtime": "^0.13.7"
  },
  "resolutions": {
     "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "projects": [
      {
        "displayName": "User interface tests",
        "testEnvironment": "jsdom",
        "testMatch": [
          "<rootDir>/src/tests/ui/*.js"
        ]
      },
      {
        "displayName": "Integration tests",
        "testEnvironment": "near-cli/test_environment",
        "testMatch": [
          "<rootDir>/src/tests/integration/*.js"
        ]
      }
    ],
    "testPathIgnorePatterns": [
      "assembly/*"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import "regenerator-runtime/runtime";
import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import Big from "big.js";
import Form from "./components/Form";
import FormEvent from "./components/FormEvent";
import SignIn from "./components/SignIn";
import Messages from "./components/Messages";

const SUGGESTED_DONATION = "0";
const BOATLOAD_OF_GAS = Big(3)
  .times(10 ** 13)
  .toFixed();

const App = ({ contract, currentUser, nearConfig, wallet }) => {
  const [messages, setMessages] = useState([]);
  const [events, setEvents] = useState([]);

  // filters
  const filterMessage = (messages) => {
    return messages.filter(
      (message) => message.sender == currentUser.accountId
    );
  };
  const filterEvents = (events) => {
    return events.filter((event) => event.sender == currentUser.accountId);
  };
  const filterEventByCode = (events, code) => {
    return events.filter((event) => event.codeEvent == code);
  };
  const randomInteger = (min, max) => {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };
  //

  useEffect(() => {
    // TODO: don't just fetch once; subscribe!

    contract.getAllCertificates().then((messages) => {
      setMessages(filterMessage(messages));
      // setMessages(messages);
    });
    contract.getAllEvents().then((events) => {
      setEvents(filterEvents(events));
      // setMessages(messages);
    });
  }, []);

  const onSubmit = (e) => {
    e.preventDefault();

    const { fieldset, message, donation } = e.target.elements;

    fieldset.disabled = true;

    // TODO: optimistically update page with new message,
    // update blockchain data in background
    // add uuid to each message, so we know which one is already known

    // validate event
    contract
      .addCertificate(
        {
          text: message.value,
        },
        BOATLOAD_OF_GAS
        // Big(donation.value || "0")
        //   .times(10 ** 24)
        //   .toFixed()
      )
      .then((result) => {
        if (result) {
          alert("Se creo con exito!");
        } else {
          alert("Este evento no esta disponible!");
        }
        contract.getAllCertificates().then((messages) => {
          setMessages(filterMessage(messages));
          // setMessages(messages);
          message.value = "";
          // donation.value = SUGGESTED_DONATION;
          fieldset.disabled = false;
          message.focus();
        });
      });
  };

  const onSubmitEvent = (e) => {
    e.preventDefault();

    const { fieldset, message, dateStart, dateEnd, donation } =
      e.target.elements;

    fieldset.disabled = true;

    // TODO: optimistically update page with new message,
    // update blockchain data in background
    // add uuid to each message, so we know which one is already known
    contract
      .addEvent(
        {
          text: message.value,
          code: String(randomInteger(100000, 9999999)),
          dateStart: String(dateStart.value),
          dateEnd: String(dateEnd.value),
        },
        BOATLOAD_OF_GAS
        // Big(donation.value || "0")
        //   .times(10 ** 24)
        //   .toFixed()
      )
      .then(() => {
        contract.getAllEvents().then((events) => {
          setEvents(filterEvents(events));
          // setMessages(messages);
          message.value = "";
          // donation.value = SUGGESTED_DONATION;
          fieldset.disabled = false;
          message.focus();
        });
      });
  };

  const signIn = () => {
    wallet.requestSignIn(
      nearConfig.contractName,
      "Near Attendance Certificate"
    );
  };

  const signOut = () => {
    wallet.signOut();
    window.location.replace(window.location.origin + window.location.pathname);
  };

  return (
    <>
      <header className="header-page">
        <div>
          <div></div>
          <div>
            <h1>NEAR Volunteer</h1>
          </div>
          <div className="control-button">
            {currentUser ? (
              <button onClick={signOut}>Log out</button>
            ) : (
              <button onClick={signIn}>Log in</button>
            )}
          </div>
        </div>
      </header>
      <div className="content-page">
        {currentUser ? (
          <div>
            <div className="tabs">
              <div className="tab">
                <input type="radio" id="tab-1" name="tab-group-1" />
                <label htmlFor="tab-1">Certificates</label>

                <div className="content">
                  {/* CERTIFICATES */}

                  {currentUser ? (
                    <Form onSubmit={onSubmit} currentUser={currentUser} />
                  ) : (
                    <SignIn />
                  )}
                  {!!currentUser && !!messages.length && (
                    <Messages
                      messages={messages}
                      title="Your certficates"
                      type="certificate"
                    />
                  )}
                </div>
              </div>

              <div className="tab">
                <input type="radio" id="tab-2" name="tab-group-1" />
                <label htmlFor="tab-2">Events</label>

                <div className="content">
                  {/* EVENTS */}

                  {currentUser ? (
                    <FormEvent
                      onSubmit={onSubmitEvent}
                      currentUser={currentUser}
                    />
                  ) : (
                    <SignIn />
                  )}
                  {!!currentUser && !!events.length && (
                    <Messages
                      messages={events}
                      title="Your events"
                      type="event"
                    />
                  )}
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className="introduction">
            <SignIn />
          </div>
        )}
      </div>
      <footer className="footer-page">
        <h6>Developer by Team NEAR Colab</h6>
      </footer>
    </>
  );
};

App.propTypes = {
  contract: PropTypes.shape({
    addCertificate: PropTypes.func.isRequired,
    getCertificates: PropTypes.func.isRequired,
    getAllCertificates: PropTypes.func.isRequired,
  }).isRequired,
  currentUser: PropTypes.shape({
    accountId: PropTypes.string.isRequired,
    balance: PropTypes.string.isRequired,
  }),
  nearConfig: PropTypes.shape({
    contractName: PropTypes.string.isRequired,
  }).isRequired,
  wallet: PropTypes.shape({
    requestSignIn: PropTypes.func.isRequired,
    signOut: PropTypes.func.isRequired,
  }).isRequired,
};

export default App;

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "aysel.testnet";

function getConfig(env) {
  switch (env) {
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case "production":
    case "development":
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
      };
    case "betanet":
      return {
        networkId: "betanet",
        nodeUrl: "https://rpc.betanet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.betanet.near.org",
        helperUrl: "https://helper.betanet.near.org",
      };
    case "local":
      return {
        networkId: "local",
        nodeUrl: "http://localhost:3030",
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: "http://localhost:4000/wallet",
        contractName: CONTRACT_NAME,
      };
    case "test":
    case "ci":
      return {
        networkId: "shared-test",
        nodeUrl: "https://rpc.ci-testnet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    case "ci-betanet":
      return {
        networkId: "shared-test-staging",
        nodeUrl: "https://rpc.ci-betanet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      );
  }
}

module.exports = getConfig;

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="./favicon.ico" />
    <link rel="stylesheet" href="global.scss">
    <title>NEAR Guest Book</title>
    <meta property="og:title" content="NEAR Attendance Certificate">
    <meta property="og:description" content="A guest book with comments stored on the NEAR blockchain">
    <!-- <meta property="og:image" content=""> -->
    <!-- <meta property="og:url" content=""> -->
    <!-- <meta name="twitter:card" content="summary_large_image"> -->
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `yarn dev`.
      To create a production bundle, use `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";
import getConfig from "./config.js";
import * as nearAPI from "near-api-js";

// Initializing contract
async function initContract() {
  const nearConfig = getConfig(process.env.NODE_ENV || "testnet");

  // Initializing connection to the NEAR TestNet
  const near = await nearAPI.connect({
    deps: {
      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore(),
    },
    ...nearConfig,
  });

  // Needed to access wallet
  const walletConnection = new nearAPI.WalletConnection(near);

  // Load in account data
  let currentUser;
  if (walletConnection.getAccountId()) {
    currentUser = {
      accountId: walletConnection.getAccountId(),
      balance: (await walletConnection.account().state()).amount,
    };
  }

  // Initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(
    walletConnection.account(),
    nearConfig.contractName,
    {
      // View methods are read-only ‚Äì they don't modify the state, but usually return some value
      viewMethods: ["getCertificates", "getAllCertificates", "getAllEvents"],
      // Change methods can modify the state, but you don't receive the returned value when called
      changeMethods: ["addCertificate", "addEvent"],
      // Sender is the account ID to initialize transactions.
      // getAccountId() will return empty string if user is still unauthorized
      sender: walletConnection.getAccountId(),
    }
  );

  return { contract, currentUser, nearConfig, walletConnection };
}

window.nearInitPromise = initContract().then(
  ({ contract, currentUser, nearConfig, walletConnection }) => {
    ReactDOM.render(
      <App
        contract={contract}
        currentUser={currentUser}
        nearConfig={nearConfig}
        wallet={walletConnection}
      />,
      document.getElementById("root")
    );
  }
);

'''
'''--- src/tests/integration/Certificate-integration.test.js ---
// these are made available by near-cli/test_environment
// note: do not remove the line below as it is needed for these tests
/* global nearlib, nearConfig */

import "regenerator-runtime/runtime";

let near;
let contract;
let accountId;

const path = "https://cdn.pixabay.com/photo/image_certificate.jpg";
const code = "2863643";
const dateStart = "2021-09-30";
const dateEnd = "2021-10-02";
const code2 = "2863645";
const code3 = "2863646";

const codeTest = "2863643";
const codeTest2 = "2863645";
const codeTest3 = "2863646";

beforeAll(async function () {
  near = await nearlib.connect(nearConfig);
  accountId = nearConfig.contractName;
  contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ["getAllCertificates"],
    changeMethods: ["addCertificate", "addEvent"],
    sender: accountId,
  });
  jest.setTimeout(120000);
});
it("send one certificate and retrieve it", async () => {
  await contract.addEvent({
    text: path,
    code: code,
    dateStart: dateStart,
    dateEnd: dateEnd,
  });
  await contract.addCertificate({ text: codeTest });
  const msgs = await contract.getAllCertificates();
  const expectedCertificatessResult = [
    {
      active: true,
      premium: false,
      sender: accountId,
      text: path,
    },
  ];
  expect(msgs).toEqual(expectedCertificatessResult);
});

it("send two more certificates and expect three total", async () => {
  await contract.addEvent({
    text: path,
    code: code2,
    dateStart: dateStart,
    dateEnd: dateEnd,
  });
  await contract.addEvent({
    text: path,
    code: code3,
    dateStart: dateStart,
    dateEnd: dateEnd,
  });
  await contract.addCertificate({ text: codeTest2 });
  await contract.addCertificate({ text: codeTest3 });
  const msgs = await contract.getAllCertificates();
  expect(msgs.length).toEqual(3);
});

'''
'''--- src/tests/integration/Event-integration.test.js ---
// these are made available by near-cli/test_environment
// note: do not remove the line below as it is needed for these tests
/* global nearlib, nearConfig */

import "regenerator-runtime/runtime";

let near;
let contract;
let accountId;

const path = "https://cdn.pixabay.com/photo/image_certificate.jpg";
const code = "2863643";
const dateStart = "2021-09-30";
const dateEnd = "2021-10-02";

jest.setTimeout(120000);

beforeAll(async function () {
  near = await nearlib.connect(nearConfig);
  accountId = nearConfig.contractName;
  contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ["getAllEvents"],
    changeMethods: ["addEvent"],
    sender: accountId,
  });
});

it("send one event and retrieve it", async () => {
  await contract.addEvent({
    text: path,
    code: code,
    dateStart: dateStart,
    dateEnd: dateEnd,
  });
  const msgs = await contract.getAllEvents();
  const expectedEvensResult = [
    {
      active: true,
      sender: accountId,
      text: path,
      codeEvent: code,
      dateStart: dateStart,
      dateEnd: dateEnd,
    },
  ];
  expect(msgs).toEqual(expectedEvensResult);
});

it("send two more events and expect three total", async () => {
  await contract.addEvent({
    text: "event # 1",
    code: code,
    dateStart: dateStart,
    dateEnd: dateEnd,
  });
  await contract.addEvent({
    text: "event # 2",
    code: code,
    dateStart: dateStart,
    dateEnd: dateEnd,
  });
  const msgs = await contract.getAllEvents();
  expect(msgs.length).toEqual(3);
});

'''
'''--- src/tests/ui/App-ui.test.js ---
import "regenerator-runtime/runtime";
import React from "react";
import TestRenderer from "react-test-renderer";
import App from "../../App";
const { act } = TestRenderer;

// Declare stubs for contract, walletConnection, and nearConfig
const contract = {
  account: {
    connection: {},
    accountId: "test.near",
  },
  contractId: "test.near",
  getAllCertificates: () => new Promise(() => {}),
  getCertificates: () => new Promise(() => {}),
  getAllEvents: () => new Promise(() => {}),
  addCertificate: () => "",
  addEvent: () => "",
};
const walletConnection = {
  account: () => ({ _state: { amount: "1" + "0".repeat(25) } }),
  requestSignIn: () => null,
  signOut: () => null,
  isSignedIn: () => false,
  getAccountId: () => "test.near",
};
const nearConfig = {
  networkId: "testnet",
  nodeUrl: "https://rpc.nearprotocol.com",
  contractName: "test.near",
  walletUrl: "https://wallet.nearprotocol.com",
  helperUrl: "https://near-contract-helper.onrender.com",
};

// For UI tests, use pattern from: https://reactjs.org/docs/test-renderer.html
let container;

beforeEach(() => {
  container = document.createElement("div");
  document.body.appendChild(container);
});

afterEach(() => {
  document.body.removeChild(container);
  container = null;
});

it("renders with proper title", () => {
  let testRenderer;

  act(() => {
    testRenderer = TestRenderer.create(
      <App
        contract={contract}
        wallet={walletConnection}
        nearConfig={nearConfig}
      />
    );
  });

  const testInstance = testRenderer.root;

  expect(testInstance.findByType("h1").children).toEqual(["NEAR Volunteer"]);
});

'''