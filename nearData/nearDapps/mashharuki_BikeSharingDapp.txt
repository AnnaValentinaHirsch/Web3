*GitHub Repository "mashharuki/BikeSharingDapp"*

'''--- README.md ---
# BikeSharingDapp

React.js と Rust で構築する自転車シェアリング Dapp 開発用のリポジトリです。

### WebAssembly(WASM)とは

ブラウザでプログラムを高速実行するための、「ブラウザ上で動くバイナリコードの新しいフォーマット(仕様)」のこと。  
Google, Microsoft, Mozzila, Apple によって仕様が策定され開発が進められている。  
C/C++や Rust、Golang、TypeScript などからコンパイルが可能。

### NEAR が採用するストレージステーキングについて

コントラクトのアカウントはブロックチェーン上で使用するすべてのストレージをカバーするのに十分な残高(NEAR)を持っていなければならない。ユーザーが増えるとそのストレージコストが増えていくがこれをユーザーに支払ってもらおうという考えがストレージステーキングである。

### アカウント作成コマンド

```
near generate-key ft_mashharuki.testnet
```

### ローカルで作成したアカウントを NearWallet にインポートする方法

作成したアカウント ID と privatekey を埋め込んで URL を叩く

[https://wallet.testnet.near.org/auto-import-secret-key#YOUR_ACCOUNT_ID/YOUR_PRIVATE_KEY](https://wallet.testnet.near.org/auto-import-secret-key#YOUR_ACCOUNT_ID/YOUR_PRIVATE_KEY)

### サブアカウント作成コマンド

```cmd
export ID=ft_mashharuki.testnet
near create-account sub.$ID --masterAccount $ID --initialBalance 30
```

### 今回テスト用の作成したアカウント

1. ft_mashharuki.testnet
2. sub.ft_mashharuki.testnet(FT コントラクトデプロイ済み)

### 開発用の作成したアカウントのニーモニックコード(開発用なので本番では使用しないこと！！)

```
nothing aisle fade bid fashion furnace approve sentence frog exchange citizen advance
```

### FT のデプロイトランザクション

[https://explorer.testnet.near.org/transactions/EmqAZmPPgsgnZvgmpXQxYKvdaSr9yb2VbKe57tab5cmM](https://explorer.testnet.near.org/transactions/EmqAZmPPgsgnZvgmpXQxYKvdaSr9yb2VbKe57tab5cmM)

### 雛形生成コマンド

`npx create-near-app@3.1.0 --frontend=react --contract=rust near_bike_share_dapp`

### コンソールに表示される URL 情報

```cmd
see: https://explorer.testnet.near.org/accounts/mashharuki.testnet
App.js:187 see: https://explorer.testnet.near.org/accounts/dev-1664367873698-91420483511088
```

### スマートコントラクトのテストコマンド

`yarn test:unit`

```cmd
running 3 tests
test tests::check_default ... ok
test tests::check_inspecting_account ... ok
test tests::return_by_other_account - should panic ... ok

test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

   Doc-tests bike_share

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

✨  Done in 16.48s.
```

### スマートコントラクトの結合テストコマンド

`yarn test:integration:rs`

```cmd
    Finished dev [unoptimized + debuginfo] target(s) in 4.09s
     Running `target/debug/examples/integration-tests`
2022-10-02T03:42:05.442562Z DEBUG stats: EpochId(`11111111111111111111111111111111`) Orphans: 0 With missing chunks: 0 In processing 0
2022-10-02T03:42:15.425218Z DEBUG stats: EpochId(`11111111111111111111111111111111`) Orphans: 0 With missing chunks: 0 In processing 0
16 AquR2kK8j2PrZy68pLwafPRoHG5DoDCYKqbqXZPUC85i Processed in progress for 0ms   Chunks:(✔))
15 7bJvc1NMdUPH8PfQBTmdHXz7nj6tesBHUVeCQJWMma96 Processed in progress for 1ms   Chunks:(✔))
14 x9PgUYDZXjCiMGquFbC4AsFCwcGqMNRQztHdJjkcctG Processed in progress for 1ms   Chunks:(✔))
13 5djvxjYD1YYSpSKuT5HsYgtTjPTgK39P5nCXCuBmFTK9 Processed in progress for 0ms   Chunks:(✔))
12 3WU71KsLjf9CixYiFGXdazbLz5mKzams1Ykd4ZsHxvq3 Processed in progress for 1ms   Chunks:(✔))
11 GocWFY5kL4v4X4BoPkArMQKEdHvwyyRdjtDuf7Nn9Udh Processed in progress for 1ms   Chunks:(✔))
10 898opjWfcxfphbByYZCs15ug383ArsFX6ZLZGUVSKwtQ Processed in progress for 1ms   Chunks:(✔))
9 7RPMov1zS7EN1isXBHiGwUnLHqxjEZhsuspyfYjJhUzz Processed in progress for 0ms   Chunks:(✔))
8 AsofRiS4yW3uQY5ijMb72SsiYDVfKn3mmQJZsvqW3quo Processed in progress for 3ms   Chunks:(✔))
7 GbNKn2uSqfVUZ5TgxbrswitAAREha6u2xU61CPYVaci Processed in progress for 5ms   Chunks:(✔))
6 FL2D5nWLCK9xDZc5AY7qkWV1bVpZdm9gE6VJFeCWfUtK Processed in progress for 0ms   Chunks:(✔))
5 A8CzdMScNjKpuMTCoHavu4mt7rFqkcfCVS8EwjTMFk4i Processed in progress for 1ms   Chunks:(✔))
4 3TtnEewz1oRKovdHNcjU93Ld1X8FxNRQPd9gU5yQathW Processed in progress for 1ms   Chunks:(✔))
3 ezKtwaU2tmLMsTVkYVZuWoMx87yfZjd6TdFP8cN527z Processed in progress for 216ms   Chunks:(✔))
2 amxwM5JDU17C67GuVU8KmAAHSsQKjEGwGmwPtj9Rmcz Processed in progress for 20ms   Chunks:(✔))
1 DLiLGBKKNCDsrYK6kMCDeUaPeeKpZT2wHw7TtxdeYaaK Processed in progress for 123ms   Chunks:(X))
2022-10-02T03:42:25.427102Z DEBUG stats: EpochId(`11111111111111111111111111111111`) Orphans: 0 With missing chunks: 0 In processing 0
32 5juGQqxLTBB7LGmVM1ZTokPUEZ3MpydNBFmcHn1hPsaS Processed in progress for 1ms   Chunks:(✔))
31 3Gfb7Xzvd9t97tnrZNRyC7wfJGos85REUhynQ1FLyy6s Processed in progress for 0ms   Chunks:(✔))
30 yT7g6cY6P29qi7yRf4A2Vo3mewa76tkmNZvxFPw56mw Processed in progress for 1ms   Chunks:(✔))
29 G1skPfqqVX5CfpnQtkCQL2zmLq1khB1b72UCpQ32fyaE Processed in progress for 1ms   Chunks:(✔))
28 AG8rH89tsoyJymN1hivz4R9ZPH7bQ3WBasMvrgmHrbWp Processed in progress for 1ms   Chunks:(✔))
27 k6zDwbTabxD4uKKMUFW639s1sLjGUEWY5QkKHZdomFW Processed in progress for 1ms   Chunks:(✔))
26 94vecdseScEcQ7WSax7LxXVcvnfjkHDGKYgDvZSFS6Qq Processed in progress for 1ms   Chunks:(✔))
25 EEtzpAZmgGXA5JZ6ZReupCWEAukJoWSmgfByAabhjFHk Processed in progress for 2ms   Chunks:(✔))
24 BbNf9snRUyGwBeFNnBoJHBmQiMqRxqrDXc8gapWh65vy Processed in progress for 0ms   Chunks:(✔))
23 5DBXCq58wFcL1XAnt9fKNt7fZ6tqC74KxEp9dmsCeZ3D Processed in progress for 1ms   Chunks:(✔))
22 HyLom11XcHntotebZyw24wVNvp639o7YcN2gJsXncRv6 Processed in progress for 1ms   Chunks:(✔))
21 HHDjNYHkBa6Rnemec9H74v4JkQGphRqhiqJp8qo2PHiW Processed in progress for 11ms   Chunks:(✔))
20 Bxdk4dKrW51w4dUjZC6AEr6aYvpHxAzCpkUmrd3dhyhD Processed in progress for 0ms   Chunks:(✔))
19 3EAVj8eL5g62Ds9g5sJSobH5wMEQDKcyKpq73bPDmTpM Processed in progress for 1ms   Chunks:(✔))
18 5rRigaG7SGYJpPTgvwuVTJkQWSfDGXxDom3LkjWBXVTp Processed in progress for 93ms   Chunks:(✔))
17 AMh9n8V3bGjLuBat2FzkQWZPhGcHDcPZSEKcorDLhYaX Processed in progress for 0ms   Chunks:(✔))
16 AquR2kK8j2PrZy68pLwafPRoHG5DoDCYKqbqXZPUC85i Processed in progress for 0ms   Chunks:(✔))
15 7bJvc1NMdUPH8PfQBTmdHXz7nj6tesBHUVeCQJWMma96 Processed in progress for 1ms   Chunks:(✔))
14 x9PgUYDZXjCiMGquFbC4AsFCwcGqMNRQztHdJjkcctG Processed in progress for 1ms   Chunks:(✔))
13 5djvxjYD1YYSpSKuT5HsYgtTjPTgK39P5nCXCuBmFTK9 Processed in progress for 0ms   Chunks:(✔))
12 3WU71KsLjf9CixYiFGXdazbLz5mKzams1Ykd4ZsHxvq3 Processed in progress for 1ms   Chunks:(✔))
11 GocWFY5kL4v4X4BoPkArMQKEdHvwyyRdjtDuf7Nn9Udh Processed in progress for 1ms   Chunks:(✔))
10 898opjWfcxfphbByYZCs15ug383ArsFX6ZLZGUVSKwtQ Processed in progress for 1ms   Chunks:(✔))
9 7RPMov1zS7EN1isXBHiGwUnLHqxjEZhsuspyfYjJhUzz Processed in progress for 0ms   Chunks:(✔))
8 AsofRiS4yW3uQY5ijMb72SsiYDVfKn3mmQJZsvqW3quo Processed in progress for 3ms   Chunks:(✔))
7 GbNKn2uSqfVUZ5TgxbrswitAAREha6u2xU61CPYVaci Processed in progress for 5ms   Chunks:(✔))
6 FL2D5nWLCK9xDZc5AY7qkWV1bVpZdm9gE6VJFeCWfUtK Processed in progress for 0ms   Chunks:(✔))
5 A8CzdMScNjKpuMTCoHavu4mt7rFqkcfCVS8EwjTMFk4i Processed in progress for 1ms   Chunks:(✔))
4 3TtnEewz1oRKovdHNcjU93Ld1X8FxNRQPd9gU5yQathW Processed in progress for 1ms   Chunks:(✔))
3 ezKtwaU2tmLMsTVkYVZuWoMx87yfZjd6TdFP8cN527z Processed in progress for 216ms   Chunks:(✔))
2 amxwM5JDU17C67GuVU8KmAAHSsQKjEGwGmwPtj9Rmcz Processed in progress for 20ms   Chunks:(✔))
1 DLiLGBKKNCDsrYK6kMCDeUaPeeKpZT2wHw7TtxdeYaaK Processed in progress for 123ms   Chunks:(X))
2022-10-02T03:42:35.428868Z DEBUG stats: EpochId(`11111111111111111111111111111111`) Orphans: 0 With missing chunks: 0 In processing 0
48 ENN8fKHeGUwrNdiiPnvah7EBAarLmaty4eoXZ96ooBb1 Processed in progress for 1ms   Chunks:(✔))
47 EX9ud6HE1i24GY4hyCrzZiszUXALnXHUZCFoDqveBDkz Processed in progress for 2ms   Chunks:(✔))
46 DtgcVo61NQra5UNm7qpAdDWTMD4oo3dRvar2v3CF812b Processed in progress for 1ms   Chunks:(✔))
45 8n8naKCZvPP2x5JKDKBaUM6vm1RGDF7wRtA1eEhkmRem Processed in progress for 1ms   Chunks:(✔))
44 DdyXa1NYX4nT9mUjZRyCBHJgbysMoQtttUgZw3aN63eq Processed in progress for 1ms   Chunks:(✔))
43 Hc1mfKjmjRLAVwBkGtNrEGkpugnG4wfwq1jfR2nBhuBf Processed in progress for 1ms   Chunks:(✔))
42 2zBr2TMY7Qoev9uKPye7v4dBzaH4L8iscbTCNFKYMmw6 Processed in progress for 1ms   Chunks:(✔))
41 7Edos24Zry4BUMrQ63KYrDBKhTqGToLdvwt8eVSAXc5k Processed in progress for 1ms   Chunks:(✔))
40 DzHpJQHKfHgm74C1wVCxGjxE149PfNJGZvPEjPkXXgBR Processed in progress for 2ms   Chunks:(✔))
39 2fHQFAZxUJa7HQCTecZJEp5qQ8DZ4NHk76bYKsu9xz63 Processed in progress for 1ms   Chunks:(✔))
38 g4Rj23gzp2WetE5AST9Rgf8kAGrEedmyeHZKT44xAfe Processed in progress for 1ms   Chunks:(✔))
37 Esq4j5bBcdmWLLXEWwDSMxRErpRTyKJkkbWywYbag7NU Processed in progress for 1ms   Chunks:(✔))
36 CTgvEAJBUaknMgZu67gLoHswUhNfntLXGBc4DUe8Qa7Z Processed in progress for 1ms   Chunks:(✔))
35 GXnkVoXjGgT5p8wo4vwA2UZFqdfXvRsmVu17g95bakKt Processed in progress for 0ms   Chunks:(✔))
34 FM4f4kUM4qj7Xmh4JecVxaXnRimdcnytLnkufVVujEMQ Processed in progress for 1ms   Chunks:(✔))
33 Hgu7sbkLh2rLD8xFsQEUoNXurxqB6UYANqB7461mUjR2 Processed in progress for 1ms   Chunks:(✔))
32 5juGQqxLTBB7LGmVM1ZTokPUEZ3MpydNBFmcHn1hPsaS Processed in progress for 1ms   Chunks:(✔))
31 3Gfb7Xzvd9t97tnrZNRyC7wfJGos85REUhynQ1FLyy6s Processed in progress for 0ms   Chunks:(✔))
30 yT7g6cY6P29qi7yRf4A2Vo3mewa76tkmNZvxFPw56mw Processed in progress for 1ms   Chunks:(✔))
29 G1skPfqqVX5CfpnQtkCQL2zmLq1khB1b72UCpQ32fyaE Processed in progress for 1ms   Chunks:(✔))
28 AG8rH89tsoyJymN1hivz4R9ZPH7bQ3WBasMvrgmHrbWp Processed in progress for 1ms   Chunks:(✔))
27 k6zDwbTabxD4uKKMUFW639s1sLjGUEWY5QkKHZdomFW Processed in progress for 1ms   Chunks:(✔))
26 94vecdseScEcQ7WSax7LxXVcvnfjkHDGKYgDvZSFS6Qq Processed in progress for 1ms   Chunks:(✔))
25 EEtzpAZmgGXA5JZ6ZReupCWEAukJoWSmgfByAabhjFHk Processed in progress for 2ms   Chunks:(✔))
24 BbNf9snRUyGwBeFNnBoJHBmQiMqRxqrDXc8gapWh65vy Processed in progress for 0ms   Chunks:(✔))
23 5DBXCq58wFcL1XAnt9fKNt7fZ6tqC74KxEp9dmsCeZ3D Processed in progress for 1ms   Chunks:(✔))
22 HyLom11XcHntotebZyw24wVNvp639o7YcN2gJsXncRv6 Processed in progress for 1ms   Chunks:(✔))
21 HHDjNYHkBa6Rnemec9H74v4JkQGphRqhiqJp8qo2PHiW Processed in progress for 11ms   Chunks:(✔))
20 Bxdk4dKrW51w4dUjZC6AEr6aYvpHxAzCpkUmrd3dhyhD Processed in progress for 0ms   Chunks:(✔))
19 3EAVj8eL5g62Ds9g5sJSobH5wMEQDKcyKpq73bPDmTpM Processed in progress for 1ms   Chunks:(✔))
18 5rRigaG7SGYJpPTgvwuVTJkQWSfDGXxDom3LkjWBXVTp Processed in progress for 93ms   Chunks:(✔))
17 AMh9n8V3bGjLuBat2FzkQWZPhGcHDcPZSEKcorDLhYaX Processed in progress for 0ms   Chunks:(✔))
16 AquR2kK8j2PrZy68pLwafPRoHG5DoDCYKqbqXZPUC85i Processed in progress for 0ms   Chunks:(✔))
15 7bJvc1NMdUPH8PfQBTmdHXz7nj6tesBHUVeCQJWMma96 Processed in progress for 1ms   Chunks:(✔))
14 x9PgUYDZXjCiMGquFbC4AsFCwcGqMNRQztHdJjkcctG Processed in progress for 1ms   Chunks:(✔))
13 5djvxjYD1YYSpSKuT5HsYgtTjPTgK39P5nCXCuBmFTK9 Processed in progress for 0ms   Chunks:(✔))
12 3WU71KsLjf9CixYiFGXdazbLz5mKzams1Ykd4ZsHxvq3 Processed in progress for 1ms   Chunks:(✔))
11 GocWFY5kL4v4X4BoPkArMQKEdHvwyyRdjtDuf7Nn9Udh Processed in progress for 1ms   Chunks:(✔))
10 898opjWfcxfphbByYZCs15ug383ArsFX6ZLZGUVSKwtQ Processed in progress for 1ms   Chunks:(✔))
9 7RPMov1zS7EN1isXBHiGwUnLHqxjEZhsuspyfYjJhUzz Processed in progress for 0ms   Chunks:(✔))
8 AsofRiS4yW3uQY5ijMb72SsiYDVfKn3mmQJZsvqW3quo Processed in progress for 3ms   Chunks:(✔))
7 GbNKn2uSqfVUZ5TgxbrswitAAREha6u2xU61CPYVaci Processed in progress for 5ms   Chunks:(✔))
6 FL2D5nWLCK9xDZc5AY7qkWV1bVpZdm9gE6VJFeCWfUtK Processed in progress for 0ms   Chunks:(✔))
5 A8CzdMScNjKpuMTCoHavu4mt7rFqkcfCVS8EwjTMFk4i Processed in progress for 1ms   Chunks:(✔))
4 3TtnEewz1oRKovdHNcjU93Ld1X8FxNRQPd9gU5yQathW Processed in progress for 1ms   Chunks:(✔))
3 ezKtwaU2tmLMsTVkYVZuWoMx87yfZjd6TdFP8cN527z Processed in progress for 216ms   Chunks:(✔))
2 amxwM5JDU17C67GuVU8KmAAHSsQKjEGwGmwPtj9Rmcz Processed in progress for 20ms   Chunks:(✔))
1 DLiLGBKKNCDsrYK6kMCDeUaPeeKpZT2wHw7TtxdeYaaK Processed in progress for 123ms   Chunks:(X))
Passed ✅ test_transfer_ft_to_user_inspected_bike
2022-10-02T03:42:45.429826Z DEBUG stats: EpochId(`11111111111111111111111111111111`) Orphans: 0 With missing chunks: 0 In processing 0
65 8EvoAeCrdXGVPLjaWKAJbkbWaKHfrWTbsrcf96ThmjaL Processed in progress for 1ms   Chunks:(✔))
64 3XT5PHQfWCzrz8dimry1EyXCEaR3XCmqZsXgTpUDP3UQ Processed in progress for 0ms   Chunks:(✔))
63 CkQQfCNav3gd29uy5v7DrHVcXt9ZCWjYiK9R4FW8fVXy Processed in progress for 0ms   Chunks:(✔))
62 9C21sdAU2wdsnG431LmjBuKMvWBhtmQBbDkGsAnBhitJ Processed in progress for 1ms   Chunks:(✔))
61 31fmvseLVDVjVGvAykRHUu2qyKfid8ESdFguHArTxWz7 Processed in progress for 0ms   Chunks:(✔))
60 6Wr8CMEJTvAGHCDTZQmftnkL3fHrzJnGuNQHTkEj7zDE Processed in progress for 1ms   Chunks:(✔))
59 28unnkSU2Z5m1LDebTXgRDsccE65SzvTbbjvtZxwoeUY Processed in progress for 1ms   Chunks:(✔))
58 7sTbpzdjoELUTpxqKUw6BXHf6TY4ArUsPaB4cEW6zMFV Processed in progress for 2ms   Chunks:(✔))
57 CY7UCRtbmruuQSocibMJJS8Y6tHdj2R5hdbX4X89bXrp Processed in progress for 1ms   Chunks:(✔))
56 G2UmBvAMTwpGxLXqAip2RraxKBkv1Hh1uaUyR4dy5TLh Processed in progress for 1ms   Chunks:(✔))
55 8BN7oJMUzqW3vFyzTok1Uona83Eix7MqAxGNvr9VzbSi Processed in progress for 1ms   Chunks:(✔))
54 AGgPXJV2qpKELBTGcGqZsDKfrMiV3NbiiDR5QzwFk8Ag Processed in progress for 0ms   Chunks:(✔))
53 G4x424in1Frov1aUiQn9vzLrmw56sNTzZ52qwefxyTrf Processed in progress for 0ms   Chunks:(✔))
52 EAzANTvJEYSm55ybdfpXga7h2WVsxMVonfYykj9W5vTt Processed in progress for 1ms   Chunks:(✔))
51 22PYbwgx1HNqqbChr2jJdUmr1etWA7soxbQbSGy3yJnv Processed in progress for 1ms   Chunks:(✔))
50 4JMomcvQmTmnvY6GZCXXQbcY1Qz4Qco8bjD9JAUBKUYG Processed in progress for 1ms   Chunks:(✔))
49 BFWZSLkDmEv6LjvEakBj5EY4mudNzoykxBGEyDiQJNW1 Processed in progress for 2ms   Chunks:(✔))
48 ENN8fKHeGUwrNdiiPnvah7EBAarLmaty4eoXZ96ooBb1 Processed in progress for 1ms   Chunks:(✔))
47 EX9ud6HE1i24GY4hyCrzZiszUXALnXHUZCFoDqveBDkz Processed in progress for 2ms   Chunks:(✔))
46 DtgcVo61NQra5UNm7qpAdDWTMD4oo3dRvar2v3CF812b Processed in progress for 1ms   Chunks:(✔))
45 8n8naKCZvPP2x5JKDKBaUM6vm1RGDF7wRtA1eEhkmRem Processed in progress for 1ms   Chunks:(✔))
44 DdyXa1NYX4nT9mUjZRyCBHJgbysMoQtttUgZw3aN63eq Processed in progress for 1ms   Chunks:(✔))
43 Hc1mfKjmjRLAVwBkGtNrEGkpugnG4wfwq1jfR2nBhuBf Processed in progress for 1ms   Chunks:(✔))
42 2zBr2TMY7Qoev9uKPye7v4dBzaH4L8iscbTCNFKYMmw6 Processed in progress for 1ms   Chunks:(✔))
41 7Edos24Zry4BUMrQ63KYrDBKhTqGToLdvwt8eVSAXc5k Processed in progress for 1ms   Chunks:(✔))
40 DzHpJQHKfHgm74C1wVCxGjxE149PfNJGZvPEjPkXXgBR Processed in progress for 2ms   Chunks:(✔))
39 2fHQFAZxUJa7HQCTecZJEp5qQ8DZ4NHk76bYKsu9xz63 Processed in progress for 1ms   Chunks:(✔))
38 g4Rj23gzp2WetE5AST9Rgf8kAGrEedmyeHZKT44xAfe Processed in progress for 1ms   Chunks:(✔))
37 Esq4j5bBcdmWLLXEWwDSMxRErpRTyKJkkbWywYbag7NU Processed in progress for 1ms   Chunks:(✔))
36 CTgvEAJBUaknMgZu67gLoHswUhNfntLXGBc4DUe8Qa7Z Processed in progress for 1ms   Chunks:(✔))
35 GXnkVoXjGgT5p8wo4vwA2UZFqdfXvRsmVu17g95bakKt Processed in progress for 0ms   Chunks:(✔))
34 FM4f4kUM4qj7Xmh4JecVxaXnRimdcnytLnkufVVujEMQ Processed in progress for 1ms   Chunks:(✔))
33 Hgu7sbkLh2rLD8xFsQEUoNXurxqB6UYANqB7461mUjR2 Processed in progress for 1ms   Chunks:(✔))
32 5juGQqxLTBB7LGmVM1ZTokPUEZ3MpydNBFmcHn1hPsaS Processed in progress for 1ms   Chunks:(✔))
31 3Gfb7Xzvd9t97tnrZNRyC7wfJGos85REUhynQ1FLyy6s Processed in progress for 0ms   Chunks:(✔))
30 yT7g6cY6P29qi7yRf4A2Vo3mewa76tkmNZvxFPw56mw Processed in progress for 1ms   Chunks:(✔))
29 G1skPfqqVX5CfpnQtkCQL2zmLq1khB1b72UCpQ32fyaE Processed in progress for 1ms   Chunks:(✔))
28 AG8rH89tsoyJymN1hivz4R9ZPH7bQ3WBasMvrgmHrbWp Processed in progress for 1ms   Chunks:(✔))
27 k6zDwbTabxD4uKKMUFW639s1sLjGUEWY5QkKHZdomFW Processed in progress for 1ms   Chunks:(✔))
26 94vecdseScEcQ7WSax7LxXVcvnfjkHDGKYgDvZSFS6Qq Processed in progress for 1ms   Chunks:(✔))
25 EEtzpAZmgGXA5JZ6ZReupCWEAukJoWSmgfByAabhjFHk Processed in progress for 2ms   Chunks:(✔))
24 BbNf9snRUyGwBeFNnBoJHBmQiMqRxqrDXc8gapWh65vy Processed in progress for 0ms   Chunks:(✔))
23 5DBXCq58wFcL1XAnt9fKNt7fZ6tqC74KxEp9dmsCeZ3D Processed in progress for 1ms   Chunks:(✔))
22 HyLom11XcHntotebZyw24wVNvp639o7YcN2gJsXncRv6 Processed in progress for 1ms   Chunks:(✔))
21 HHDjNYHkBa6Rnemec9H74v4JkQGphRqhiqJp8qo2PHiW Processed in progress for 11ms   Chunks:(✔))
20 Bxdk4dKrW51w4dUjZC6AEr6aYvpHxAzCpkUmrd3dhyhD Processed in progress for 0ms   Chunks:(✔))
19 3EAVj8eL5g62Ds9g5sJSobH5wMEQDKcyKpq73bPDmTpM Processed in progress for 1ms   Chunks:(✔))
18 5rRigaG7SGYJpPTgvwuVTJkQWSfDGXxDom3LkjWBXVTp Processed in progress for 93ms   Chunks:(✔))
17 AMh9n8V3bGjLuBat2FzkQWZPhGcHDcPZSEKcorDLhYaX Processed in progress for 0ms   Chunks:(✔))
16 AquR2kK8j2PrZy68pLwafPRoHG5DoDCYKqbqXZPUC85i Processed in progress for 0ms   Chunks:(✔))
15 7bJvc1NMdUPH8PfQBTmdHXz7nj6tesBHUVeCQJWMma96 Processed in progress for 1ms   Chunks:(✔))
2022-10-02T03:42:55.430917Z DEBUG stats: EpochId(`11111111111111111111111111111111`) Orphans: 0 With missing chunks: 0 In processing 0
81 BgP1HA6cAyTf6iMmHh6gCfYRheJQn7i2upv5ztKrDJXz Processed in progress for 0ms   Chunks:(✔))
80 GvkbDxpx3oGTbnpdYfpAhrLj9rxgrAEsZ64acy1b6EAw Processed in progress for 1ms   Chunks:(✔))
79 95sb9yjxzschXd6vfALgwrsizu8k9XhqMuzQ7okq6SkN Processed in progress for 2ms   Chunks:(✔))
78 HDuUBrwPZfRMSNh117y7nqsGMoSG8mScqdMDeTuNEk1D Processed in progress for 1ms   Chunks:(✔))
77 3THR5aNXbXsgD9VDJYD5mogSWWc3xU7QfBrAWV3p8Gd5 Processed in progress for 0ms   Chunks:(✔))
76 CsH3cyepJZq4sBQ4QbqLbySYZbEU6moZMz4qUz9UrtwV Processed in progress for 1ms   Chunks:(✔))
75 H7EChPZU3noRCc1nMAz33eCwZQpMMb4s7Sbhx3Mah61f Processed in progress for 2ms   Chunks:(✔))
74 A479dVpCriH9tW3hEcMfKdNUk79vmcUT5J3c7tdRLB5q Processed in progress for 0ms   Chunks:(✔))
73 HvrXABRvx37Fi1B38xJ6kLze1DH883uoKn4TJmetQ942 Processed in progress for 1ms   Chunks:(✔))
72 8eNEEVTbAUpri1KDCXVYCb2yxyN3cVkA7bnPwm6KCmMD Processed in progress for 1ms   Chunks:(✔))
71 EUgrb5nyXwqcNrbNiXhN5yNAPAdUGk5kaixFAPjPpKVN Processed in progress for 4ms   Chunks:(✔))
70 2k7iEoKaRjqd6M8pDKLPAmPvpzWSbdta652orRMcR5DZ Processed in progress for 2ms   Chunks:(✔))
69 C9nDm4osBo31diTrpdfGgWGUZ2FBAAdrMEbDcn7nU62P Processed in progress for 2ms   Chunks:(✔))
68 J1j59dsK6i2qfxWjLsepy6Y1LEytKMu6SxtHkVAEAhds Processed in progress for 0ms   Chunks:(✔))
67 AYf9YiEc3zfs4bsFzF2QXqSj2RwHisqQmvsYjyP86Hs2 Processed in progress for 1ms   Chunks:(✔))
66 8yFxHWMyA7uPoMMmimtnoKEbqiDFdgkXV4Uund7ZwKTX Processed in progress for 1ms   Chunks:(✔))
65 8EvoAeCrdXGVPLjaWKAJbkbWaKHfrWTbsrcf96ThmjaL Processed in progress for 1ms   Chunks:(✔))
64 3XT5PHQfWCzrz8dimry1EyXCEaR3XCmqZsXgTpUDP3UQ Processed in progress for 0ms   Chunks:(✔))
63 CkQQfCNav3gd29uy5v7DrHVcXt9ZCWjYiK9R4FW8fVXy Processed in progress for 0ms   Chunks:(✔))
62 9C21sdAU2wdsnG431LmjBuKMvWBhtmQBbDkGsAnBhitJ Processed in progress for 1ms   Chunks:(✔))
61 31fmvseLVDVjVGvAykRHUu2qyKfid8ESdFguHArTxWz7 Processed in progress for 0ms   Chunks:(✔))
60 6Wr8CMEJTvAGHCDTZQmftnkL3fHrzJnGuNQHTkEj7zDE Processed in progress for 1ms   Chunks:(✔))
59 28unnkSU2Z5m1LDebTXgRDsccE65SzvTbbjvtZxwoeUY Processed in progress for 1ms   Chunks:(✔))
58 7sTbpzdjoELUTpxqKUw6BXHf6TY4ArUsPaB4cEW6zMFV Processed in progress for 2ms   Chunks:(✔))
57 CY7UCRtbmruuQSocibMJJS8Y6tHdj2R5hdbX4X89bXrp Processed in progress for 1ms   Chunks:(✔))
56 G2UmBvAMTwpGxLXqAip2RraxKBkv1Hh1uaUyR4dy5TLh Processed in progress for 1ms   Chunks:(✔))
55 8BN7oJMUzqW3vFyzTok1Uona83Eix7MqAxGNvr9VzbSi Processed in progress for 1ms   Chunks:(✔))
54 AGgPXJV2qpKELBTGcGqZsDKfrMiV3NbiiDR5QzwFk8Ag Processed in progress for 0ms   Chunks:(✔))
53 G4x424in1Frov1aUiQn9vzLrmw56sNTzZ52qwefxyTrf Processed in progress for 0ms   Chunks:(✔))
52 EAzANTvJEYSm55ybdfpXga7h2WVsxMVonfYykj9W5vTt Processed in progress for 1ms   Chunks:(✔))
51 22PYbwgx1HNqqbChr2jJdUmr1etWA7soxbQbSGy3yJnv Processed in progress for 1ms   Chunks:(✔))
50 4JMomcvQmTmnvY6GZCXXQbcY1Qz4Qco8bjD9JAUBKUYG Processed in progress for 1ms   Chunks:(✔))
49 BFWZSLkDmEv6LjvEakBj5EY4mudNzoykxBGEyDiQJNW1 Processed in progress for 2ms   Chunks:(✔))
48 ENN8fKHeGUwrNdiiPnvah7EBAarLmaty4eoXZ96ooBb1 Processed in progress for 1ms   Chunks:(✔))
47 EX9ud6HE1i24GY4hyCrzZiszUXALnXHUZCFoDqveBDkz Processed in progress for 2ms   Chunks:(✔))
46 DtgcVo61NQra5UNm7qpAdDWTMD4oo3dRvar2v3CF812b Processed in progress for 1ms   Chunks:(✔))
45 8n8naKCZvPP2x5JKDKBaUM6vm1RGDF7wRtA1eEhkmRem Processed in progress for 1ms   Chunks:(✔))
44 DdyXa1NYX4nT9mUjZRyCBHJgbysMoQtttUgZw3aN63eq Processed in progress for 1ms   Chunks:(✔))
43 Hc1mfKjmjRLAVwBkGtNrEGkpugnG4wfwq1jfR2nBhuBf Processed in progress for 1ms   Chunks:(✔))
42 2zBr2TMY7Qoev9uKPye7v4dBzaH4L8iscbTCNFKYMmw6 Processed in progress for 1ms   Chunks:(✔))
41 7Edos24Zry4BUMrQ63KYrDBKhTqGToLdvwt8eVSAXc5k Processed in progress for 1ms   Chunks:(✔))
40 DzHpJQHKfHgm74C1wVCxGjxE149PfNJGZvPEjPkXXgBR Processed in progress for 2ms   Chunks:(✔))
39 2fHQFAZxUJa7HQCTecZJEp5qQ8DZ4NHk76bYKsu9xz63 Processed in progress for 1ms   Chunks:(✔))
38 g4Rj23gzp2WetE5AST9Rgf8kAGrEedmyeHZKT44xAfe Processed in progress for 1ms   Chunks:(✔))
37 Esq4j5bBcdmWLLXEWwDSMxRErpRTyKJkkbWywYbag7NU Processed in progress for 1ms   Chunks:(✔))
36 CTgvEAJBUaknMgZu67gLoHswUhNfntLXGBc4DUe8Qa7Z Processed in progress for 1ms   Chunks:(✔))
35 GXnkVoXjGgT5p8wo4vwA2UZFqdfXvRsmVu17g95bakKt Processed in progress for 0ms   Chunks:(✔))
34 FM4f4kUM4qj7Xmh4JecVxaXnRimdcnytLnkufVVujEMQ Processed in progress for 1ms   Chunks:(✔))
33 Hgu7sbkLh2rLD8xFsQEUoNXurxqB6UYANqB7461mUjR2 Processed in progress for 1ms   Chunks:(✔))
32 5juGQqxLTBB7LGmVM1ZTokPUEZ3MpydNBFmcHn1hPsaS Processed in progress for 1ms   Chunks:(✔))
31 3Gfb7Xzvd9t97tnrZNRyC7wfJGos85REUhynQ1FLyy6s Processed in progress for 0ms   Chunks:(✔))
Passed ✅ test_transfer_call_to_use_bike
✨  Done in 61.40s.
```

#### account_id のストレージの使用状況を表すデータ構造を取得するコマンド

`near view sub.dev-1660204085773-49134722844982 storage_balance_of '{"account_id": "'mashharuki.testnet'"}'`

```zsh
View call: sub.dev-1660204085773-49134722844982.storage_balance_of({"account_id": "mashharuki.testnet"})
{ total: '1250000000000000000000', available: '0' }
```

#### トークンを発行する

```zsh
near call sub23.mashharuki2.testnet new '{"owner_id": "'mashharuki2.testnet'", "total_supply": "1000000000000000", "metadata": { "spec": "ft-1.0.0", "name": "My First Token", "symbol": "MYFT", "decimals": 8 }}' --accountId mashharuki2.testnet
```

### トークンのやり取りを行うために受け取り側のアドレスを FT コントラクトに登録する

```zsh
 near call sub23.mashharuki2.testnet storage_deposit '' --accountId dev-1666503589999-87468235150551 --amount 0.00125
```

```zsh
near call sub23.mashharuki2.testnet ft_transfer '{"receiver_id": "dev-1666503589999-87468235150551", "amount": "19"}' --accountId mashharuki2.testnet --amount 0.000000000000000000000001
```

```zsh
near view sub23.mashharuki2.testnet ft_balance_of '{"account_id": "dev-1666503589999-87468235150551"}'
```

### 参考文献

1.  [Near Workspaces](https://github.com/near/workspaces-rs)
2.  [Gitpod](https://gitpod.io/workspaces)
3.  [Near Docs](https://docs.near.org/api/rpc/contracts)
4.  [NEP-141 Fungible Token](https://nomicon.io/Standards/Tokens/FungibleToken/Core#reference-level-explanation)
5.  [Storage Management](https://nomicon.io/Standards/StorageManagement)

'''
'''--- near_bike_share_dapp/.gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- near_bike_share_dapp/README.md ---
near-blank-project
==================

This [React] app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/frontend` folder. `/frontend/index.html` is a great
   place to start exploring. Note that it loads in `/frontend/assets/js/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- near_bike_share_dapp/contract/Cargo.toml ---
[package]
authors = ["mashharuki"]
edition = "2021"
name = "bike_share"
version = "1.0.0"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.0.0"
uint = {version = "0.9.3", default-features = false}

[profile.release]
codegen-units = 1
debug = false
lto = true
opt-level = "z"
overflow-checks = true
panic = "abort"

[workspace]
members = []
'''
'''--- near_bike_share_dapp/contract/src/lib.rs ---
use near_sdk::{
    borsh::{self, BorshDeserialize, BorshSerialize},
    env, ext_contract,
    json_types::{self, U128},
    log, near_bindgen, AccountId, Gas, PanicOnDefault, Promise, PromiseOrValue, PromiseResult,
};

const FT_CONTRACT_ACCOUNT: &str = "sub.ft_mashharuki.testnet"; 
const AMOUNT_REWARD_FOR_INSPECTIONS: u128 = 15;
const AMOUNT_TO_USE_BIKE: u128 = 30;

#[ext_contract(ext_ft)]
trait FungibleToken {
    fn ft_transfer(&mut self, receiver_id: String, amount: String, memo: Option<String>);
}

// enum of Bike
#[derive(BorshDeserialize, BorshSerialize)]
enum Bike {
    Available,             // 使用可能
    InUse(AccountId),      // AccountIdによって使用中
    Inspection(AccountId), // AccountIdによって点検中
}

/**
 * Contract
 */
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    bikes: Vec<Bike>,
}

#[near_bindgen]
impl Contract {
    /**
     * initialization
     */
    #[init]
    pub fn new(num_of_bikes: usize) -> Self {
        log!("initialize Contract with {} bikes", num_of_bikes);

        Self {
            bikes: {
                let mut bikes = Vec::new();
                for _i in 0..num_of_bikes {
                    bikes.push(Bike::Available);
                }
                bikes
            },
        }
    }

    /**
     * get account id using a bike
     */
    pub fn num_of_bikes(&self) -> usize {
        self.bikes.len()
    }

    /// indexで指定されたバイクが使用可能かどうかを判別します。
    pub fn is_available(&self, index: usize) -> bool {
        match self.bikes[index] {
            Bike::Available => true,
            _ => false,
        }
    }

    
    pub fn who_is_using(&self, index: usize) -> Option<AccountId> {
        match &self.bikes[index] {
            Bike::InUse(user_id) => Some(user_id.clone()),
            _ => None,
        }
    }

    /**
     * get account id inspecting a bike
     */
    pub fn who_is_inspecting(&self, index: usize) -> Option<AccountId> {
        match &self.bikes[index] {
            Bike::Inspection(inspector_id) => Some(inspector_id.clone()),
            _ => None,
        }
    }

    /**
     * get amount to use a bike function
     */
    pub fn amount_to_use_bike(&self) -> U128 {
        json_types::U128::from(AMOUNT_TO_USE_BIKE)
    }

    /**
     * fungible tokenの移転
     */
    pub fn ft_on_transfer(
        &mut self,
        sender_id: String,
        amount: String,
        msg: String,
    ) -> PromiseOrValue<U128> {
        assert_eq!(
            amount,
            AMOUNT_TO_USE_BIKE.to_string(),
            "Require {} ft to use the bike",
            AMOUNT_TO_USE_BIKE.to_string()
        );

        log!(
            "in ft_on_transfer: sender:{}, amount:{}, msg:{}",
            sender_id,
            amount,
            msg
        );

        // use_bike メソッドの呼び出し
        self.use_bike(msg.parse().unwrap(), sender_id.try_into().unwrap());
        // 受信したFTは全て受け取るので, 返却する残金は0.
        PromiseOrValue::Value(U128::from(0))
    }

    /**
     * change status Available → Inuse 
     */
    fn use_bike(&mut self, index: usize, user_id: AccountId) {
        log!("{} uses bike", &user_id);

        match &self.bikes[index] {
            Bike::Available => self.bikes[index] = Bike::InUse(user_id),
            _ => panic!("Bike is not available"),
        }
    }

    /**
     * change status Inuse → Inspecting
     */
    pub fn inspect_bike(&mut self, index: usize) {
        let user_id = env::predecessor_account_id();
        log!("{} inspects bike", &user_id);

        match &self.bikes[index] {
            Bike::Available => self.bikes[index] = Bike::Inspection(user_id),
            _ => panic!("Bike is not available"),
        }
    }

    /**
     * change status Inuse or Inspecting → Available
     */
    pub fn return_bike(&mut self, index: usize) {
        let user_id = env::predecessor_account_id();
        log!("{} returns bike", &user_id);

        match &self.bikes[index] {
            Bike::Available => panic!("Bike is already available"),
            Bike::InUse(user) => {
                assert_eq!(user.clone(), user_id, "Fail due to wrong account");
                self.bikes[index] = Bike::Available
            }
            Bike::Inspection(inspector) => {
                assert_eq!(inspector.clone(), user_id, "Fail due to wrong account");
                Self::return_inspected_bike(index);
            }
        };
    }

    /**
     * give a reward function
     */
    pub fn return_inspected_bike(index: usize) -> Promise {
        let contract_id = FT_CONTRACT_ACCOUNT.parse().unwrap();
        let amount = AMOUNT_REWARD_FOR_INSPECTIONS.to_string();
        let receiver_id = env::predecessor_account_id().to_string();

        log!(
            "{} transfer to {}: {} FT",
            env::current_account_id(),
            &receiver_id,
            &amount
        );

        // cross contract call (contract_idのft_transfer()メソッドを呼び出す)
        ext_ft::ext(contract_id)
            .with_attached_deposit(1)
            .ft_transfer(receiver_id, amount, None)
            .then(
                // callback (自身のcallback_return_bike()メソッドを呼び出す)
                Self::ext(env::current_account_id())
                    .with_static_gas(Gas(3_000_000_000_000))
                    .callback_return_bike(index),
            )
    }

    /// cross contract call の結果を元に処理を条件分岐します。
    // #[private]: predecessor(このメソッドを呼び出しているアカウント)とcurrent_account(このコントラクトのアカウント)が同じことをチェックするマクロです.
    // callbackの場合, コントラクトが自身のメソッドを呼び出すことを期待しています.
    #[private]
    pub fn callback_return_bike(&mut self, index: usize) {
        assert_eq!(env::promise_results_count(), 1, "This is a callback method");
        match env::promise_result(0) {
            PromiseResult::NotReady => unreachable!(),
            PromiseResult::Failed => panic!("Fail cross-contract call"),
            // 成功時のみBikeを返却(使用可能に変更)
            PromiseResult::Successful(_) => self.bikes[index] = Bike::Available,
        }
    }
}

#[cfg(test)]
mod tests {
    // テスト環境の構築に必要なものをインポート
    use near_sdk::test_utils::{accounts, VMContextBuilder};
    use near_sdk::testing_env;

    // Contractのモジュールをインポート
    use super::*;

    // VMContextBuilderのテンプレートを用意
    // VMContextBuilder: テスト環境(モックされたブロックチェーン)をcontext(テスト材料)をもとに変更できるインターフェース
    fn get_context(predecessor_account_id: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder
            .current_account_id(accounts(0)) // accounts(0): テスト用のアカウントリストの中の0番アカウントを取得します.
            .signer_account_id(predecessor_account_id.clone())
            .predecessor_account_id(predecessor_account_id);
        builder
    }

    #[test]
    fn check_default() {
        let mut context = get_context(accounts(1)); 
        testing_env!(context.build()); 
        let init_num = 5;
        let contract = Contract::new(init_num);

        // view関数の実行のみ許可する環境に初期化
        testing_env!(context.is_view(true).build());

        assert_eq!(contract.num_of_bikes(), init_num);
        for i in 0..init_num {
            assert!(contract.is_available(i))
        }
    }

    #[test]
    fn check_inspecting_account() {
        let mut context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new(5);

        let test_index = contract.bikes.len() - 1;
        contract.inspect_bike(test_index);

        testing_env!(context.is_view(true).build());

        for i in 0..contract.num_of_bikes() {
            if i == test_index {
                assert_eq!(accounts(1), contract.who_is_inspecting(i).unwrap());
            } else {
                assert!(contract.is_available(i))
            }
        }
    }

    
    #[test]
    #[should_panic(expected = "Fail due to wrong account")]
    fn return_by_other_account() {
        let mut context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new(5);

        contract.inspect_bike(0);

        testing_env!(context.predecessor_account_id(accounts(2)).build());
        contract.return_bike(0);
    }
}

'''
'''--- near_bike_share_dapp/frontend/App.js ---
import React, { useEffect, useState } from "react";
import "./assets/css/global.css";
import {
  amount_to_use_bike, ft_balance_of, ft_transfer, ft_transfer_call, inspect_bike, is_available, login,
  logout,
  num_of_bikes, return_bike, storage_balance_of,
  storage_deposit,
  storage_unregister, who_is_inspecting, who_is_using
} from "./assets/js/near/utils";

const bikeImg = require("./assets/img/bike.png");

/** どの画面を描画するのかの状態の定義 */
const RenderingStates = {
  SIGN_IN: "sign_in",
  REGISTRATION: "registration",
  HOME: "home",
  TRANSACTION: "transaction",
};

/**
 * App Component
 */
export default function App() {
  const [isBikeLoading, setBikeLoading] = useState(false);
  const [allBikeInfo, setAllBikeInfo] = useState([]);
  const [renderingState, setRenderingState] = useState(RenderingStates.HOME);
  const [showBalance, setShowBalance] = useState(false);
  const [balanceInfo, setBalanceInfo] = useState({});
  const [amountToUseBike, setAmountToUseBike] = useState(0);
  

  const initialBikeInfo = async () => {
    return { available: false, in_use: false, inspection: false };
  };

  const initialBalanceInfo = async () => {
    return { account_id: "", balance: 0 };
  };

  /** 指定されたindexのバイク情報をフロント用に整形して返却します. */
  const createBikeInfo = async (index) => {
    let bike = await initialBikeInfo();
    await is_available(index).then((is_available) => {
      if (is_available) {
        bike.available = is_available;
        return bike;
      }
    });
    await who_is_using(index).then((user_id) => {
      // サインインしているユーザのアカウントidと同じであればユーザは使用中なので
      // 使用中をtrueに変更します。
      if (window.accountId === user_id) {
        bike.in_use = true;
        return bike;
      }
    });
    await who_is_inspecting(index).then((inspector_id) => {
      // サインインしているユーザのアカウントidと同じであればユーザは点検中なので
      // 点検中をtrueに変更します。
      if (window.accountId === inspector_id) {
        bike.inspection = true;
      }
    });
    return bike;
  };

  /** バイクを使用, バイク情報を更新します。 */
  const transferFtToUseBike = async (index) => {
    console.log("Transfer ft to use bike");

    // 不要なトランザクションを避けるためにユーザの残高を確認
    const balance = await ft_balance_of(window.accountId);

    if (balance < amountToUseBike) {
      alert(amountToUseBike + "ft is required to use the bike");
    } else {
      try {
        ft_transfer_call(index, amountToUseBike.toString());
        // bikeコントラクト側で指定バイクの使用処理が実行されます.
        // トランザクションへのサイン後は画面がリロードされます.
      } catch (e) {
        alert(e);
      }
    }
  };

  /** バイクを点検, バイク情報を更新します。 */
  const inspectBikeThenUpdateInfo = async (index) => {
    console.log("Inspect bike");
    setRenderingState(RenderingStates.TRANSACTION);

    try {
      await inspect_bike(index);
    } catch (e) {
      alert(e);
    }
    await updateBikeInfo(index);

    setRenderingState(RenderingStates.HOME);
  };

  /** バイクを返却, バイク情報を更新します。 */
  const returnBikeThenUpdateInfo = async (index) => {
    console.log("Return bike");
    setRenderingState(RenderingStates.TRANSACTION);

    try {
      await return_bike(index);
    } catch (e) {
      alert(e);
    }
    await updateBikeInfo(index);

    setRenderingState(RenderingStates.HOME);
  };

  /** 特定のバイク情報を更新してallBikeInfoにセットします。 */
  const updateBikeInfo = async (index) => {
    const new_bike = await createBikeInfo(index);

    allBikeInfo[index] = new_bike;
    setAllBikeInfo(allBikeInfo);
    console.log("Update bikes: ", allBikeInfo);
  };

  /** account_idがftコントラクトに登録しているかを判別します。 */
  const isRegistered = async (account_id) => {
    const balance = await storage_balance_of(account_id);
    console.log("user's storage balance: ", balance);

    // ストレージ残高にnullが返ってくる場合は未登録を意味します.
    if (balance === null) {
      console.log("account is not yet registered");
      return false;
    } else {
      return true;
    }
  };

  /** ftコントラクトに登録します。 */
  const newUserRegister = async () => {
    try {
      await storage_deposit();
    } catch (e) {
      alert(e);
    }
  };

  /** account_idのft残高を取得し, 残高表示用オブジェクトbalanceInfoにセットします。 */
  const prepareBalanceInfo = async (account_id) => {
    const balance = await ft_balance_of(account_id);

    let balance_info = await initialBalanceInfo();
    balance_info.account_id = account_id;
    balance_info.balance = balance;

    setBalanceInfo(balance_info);
    setShowBalance(true);
  };

  console.log(
    "see:",
    `https://explorer.testnet.near.org/accounts/${window.accountId}`
  );

  console.log(
    "see:",
    `https://explorer.testnet.near.org/accounts/${window.contract.contractId}`
  );

  useEffect(() => {
    
    /**
     * init bike use amount
     */
    const initAmountToUseBike = async () => {
      const amount = await amount_to_use_bike(); 
      setAmountToUseBike(BigInt(amount));
    };

    /**
     * init Rendering state function
     */
    const initRenderingState = async () => {
      if (!window.walletConnection.isSignedIn()) {
        setRenderingState(RenderingStates.SIGN_IN);
      } else {
        // check register
        const is_registered = await isRegistered(window.accountId);
        if (!is_registered) {
          setRenderingState(RenderingStates.REGISTRATION);
        }
      }
    };

    /**
     * init bike info
     */
    const InitAllBikeInfo = async () => {
      setBikeLoading(true);
      const num = await num_of_bikes();
      console.log("Num of bikes:", num);

      let new_bikes = [];
      for (let i = 0; i < num; i++) {
        const bike = await createBikeInfo(i);
        new_bikes.push(bike);
      }

      setAllBikeInfo(new_bikes);
      console.log("Set bikes: ", new_bikes);
      setBikeLoading(false);
    };

    initAmountToUseBike();
    initRenderingState();
    InitAllBikeInfo();
  }, []);

  /** サインアウトボタンの表示に使用します。 */
  const signOutButton = () => {
    return (
      <button className="link" style={{ float: "right" }} onClick={logout}>
        Sign out
      </button>
    );
  };

  /** 登録解除ボタンの表示に使用します。 */
  const unregisterButton = () => {
    return (
      <button
        className="link"
        style={{ float: "right" }}
        onClick={storage_unregister}
      >
        Unregister
      </button>
    );
  };

  /** サインイン画面を表示します。 */
  const requireSignIn = () => {
    return (
      <div>
        <main>
          <p style={{ textAlign: "center", marginTop: "2.5em" }}>
            <button onClick={login}>Sign in</button>
          </p>
        </main>
      </div>
    );
  };

  /** 登録画面を表示します。 */
  const requireRegistration = () => {
    return (
      <div>
        {signOutButton()}
        <div style={{ textAlign: "center" }}>
          <h5>
            Registration in ft contract is required before using the bike app
          </h5>
        </div>
        <main>
          <p style={{ textAlign: "center", marginTop: "2.5em" }}>
            <button onClick={newUserRegister}>storage deposit</button>
          </p>
        </main>
      </div>
    );
  };

  /** 画面のヘッダー部分の表示に使用します。 */
  const header = () => {
    return <h1>Hello {window.accountId} !</h1>;
  };

  /** トランザクション中の画面を表示します。 */
  const transaction = () => {
    return (
      <div>
        {header()}
        <main>
          <p> in process... </p>
        </main>
      </div>
    );
  };

  // useのonClickでtransferFtToUseBikeを使用するように変更
  const bikeContents = () => {
    return (
      <>
        {isBikeLoading ? (
          <div class="bike" style={{ display: "flex" }}>
            <div class="bike_img">
              <img src={bikeImg} />
            </div>
            <div class="bike_index">: Loding Bike Contents ...</div>
          </div>

        ) : (
          <div>
            {allBikeInfo.map((bike, index) => {
              return (
                <div class="bike" style={{ display: "flex" }}>
                  <div class="bike_img">
                    <img src={bikeImg} />
                  </div>
                  <div class="bike_index">: {index}</div>
                  <button
                    // ボタンを無効化する条件を定義
                    disabled={!bike.available}
                    onClick={() => transferFtToUseBike(index)} // <- 変更！
                  >
                    use
                  </button>
                  <button
                    // ボタンを無効化する条件を定義
                    disabled={!bike.available}
                    onClick={() => inspectBikeThenUpdateInfo(index)}
                  >
                    inspect
                  </button>
                  <button
                    // ボタンを無効化する条件を定義。
                    // ログインユーザがバイクを使用も点検もしていない場合は使用できないようにしています。
                    disabled={!bike.in_use && !bike.inspection}
                    onClick={() => returnBikeThenUpdateInfo(index)}
                  >
                    return
                  </button>
                </div>
              );
            })}
          </div>
        )}
      </>
    );
  };

  /** 残高表示に使用します。 */
  const checkBalance = () => {
    return (
      <div class="balance_content">
        <button onClick={() => prepareBalanceInfo(window.accountId)}>
          check my balance
        </button>
        <button
          style={{ marginTop: "0.1em" }}
          onClick={() => prepareBalanceInfo(window.contract.contractId)}
        >
          check contract's balance
        </button>
        <span>or</span>
        <form
          onSubmit={async (event) => {
            event.preventDefault();
            const { fieldset, account } = event.target.elements;
            const account_to_check = account.value;
            fieldset.disabled = true;
            try {
              await prepareBalanceInfo(account_to_check);
            } catch (e) {
              alert(e);
            }
            fieldset.disabled = false;
          }}
        >
          <fieldset id="fieldset">
            <div style={{ display: "flex" }}>
              <input autoComplete="off" id="account" placeholder="account id" />
              <button style={{ borderRadius: "0 5px 5px 0" }}>check</button>
            </div>
          </fieldset>
        </form>
        {showBalance && (
          <div>
            <p>{balanceInfo.account_id}'s</p>
            <p>balance: {balanceInfo.balance}</p>
          </div>
        )}
      </div>
    );
  };

  /** ftの送信部分の表示に使用します。 */
  const transferFt = () => {
    return (
      <div>
        <form
          onSubmit={async (event) => {
            event.preventDefault();
            const { fieldset, account } = event.target.elements;
            const account_to_transfer = account.value;
            fieldset.disabled = true;
            try {
              await ft_transfer(account_to_transfer, amountToUseBike.toString());
            } catch (e) {
              alert(e);
            }
            fieldset.disabled = false;
          }}
        >
          <fieldset id="fieldset">
            <label
              htmlFor="account"
              style={{
                display: "block",
                color: "var(--gray)",
                marginBottom: "0.5em",
                marginTop: "1em",
              }}
            >
              give someone {amountToUseBike.toString()} ft
            </label>
            <div style={{ display: "flex" }}>
              <input
                autoComplete="off"
                id="account"
                style={{ flex: 1 }}
                placeholder="account id"
              />
              <button style={{ borderRadius: "0 5px 5px 0" }}>transfer</button>
            </div>
          </fieldset>
        </form>
      </div>
    );
  };

  /** ホーム画面を表示します。 */
  const home = () => {
    return (
      <div>
        {signOutButton()}
        {unregisterButton()}
        {header()}
        <main>
          {bikeContents()}
          {checkBalance()}
          {transferFt()}
        </main>
      </div>
    );
  };

  /** renderingStateに適した画面を表示します。 */
  switch (renderingState) {
    case RenderingStates.SIGN_IN:
      return <div>{requireSignIn()}</div>;

    case RenderingStates.REGISTRATION:
      return <div>{requireRegistration()}</div>;

    case RenderingStates.TRANSACTION:
      return <div>{transaction()}</div>;

    case RenderingStates.HOME:
      return <div>{home()}</div>;
  }
}
'''
'''--- near_bike_share_dapp/frontend/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- near_bike_share_dapp/frontend/assets/css/global.css ---
html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #ff585d;
  --secondary: #0072ce;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial,
    sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 30em;
  text-align: justify;
}

h1,
h5 {
  background-image: url(../img/logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0.5em;
  text-align: center;
}

.link {
  color: var(--primary);
  text-decoration: none;
}

.link:hover,
.link:focus {
  text-decoration: underline;
}

.link:active {
  color: var(--secondary);
}

button,
input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}

button:hover,
button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}

button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}

button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}

[disabled] button,
button[disabled] {
  box-shadow: none;
  background-color: var(--light-gray);
  color: rgb(82, 81, 81);
  cursor: not-allowed;
  transform: none;
}

[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}

[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}

@keyframes loader {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

fieldset {
  border: none;
  padding: 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}

input::selection {
  background-color: var(--secondary);
  color: #efefef;
}

input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

.bike {
  margin: 20 auto;
  padding: 5px;
  border-radius: 30px;
  background-color: gainsboro;
  width: 560px;
}

.bike_img {
  margin-top: 20px;
  margin-left: 10px;
}

.bike_index {
  margin-left: 10px;
  margin-right: 10px;
  margin-top: 30px;
}

.bike button {
  margin: 20px;
  width: 110px;
  height: 50px;
  background-color: steelblue;
  border-radius: 5px;
}

.balance_content {
  margin: 10 auto;
  border-radius: 10px;
  background-color: gainsboro;
  width: 400px;
}

.balance_content button {
  display: block;
  background-color: teal;
}

.balance_content button,
fieldset {
  width: 100%;
}

.balance_content p {
  margin: 0 auto;
  width: 200px;
}
'''
'''--- near_bike_share_dapp/frontend/assets/img/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- near_bike_share_dapp/frontend/assets/img/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- near_bike_share_dapp/frontend/assets/js/near/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "dev-1668931476711-22851070401597";
const FT_CONTRACT_NAME = "sub.ft_mashharuki.testnet";

function getConfig(env) {
  switch (env) {
    case "production":
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        ftContractName: FT_CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "development":
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        ftContractName: FT_CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    case "betanet":
      return {
        networkId: "betanet",
        nodeUrl: "https://rpc.betanet.near.org",
        contractName: CONTRACT_NAME,
        ftContractName: FT_CONTRACT_NAME,
        walletUrl: "https://wallet.betanet.near.org",
        helperUrl: "https://helper.betanet.near.org",
        explorerUrl: "https://explorer.betanet.near.org",
      };
    case "local":
      return {
        networkId: "local",
        nodeUrl: "http://localhost:3030",
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: "http://localhost:4000/wallet",
        contractName: CONTRACT_NAME,
        ftContractName: FT_CONTRACT_NAME,
      };
    case "test":
    case "ci":
      return {
        networkId: "shared-test",
        nodeUrl: "https://rpc.ci-testnet.near.org",
        contractName: CONTRACT_NAME,
        ftContractName: FT_CONTRACT_NAME,
        masterAccount: "test.near",
      };
    case "ci-betanet":
      return {
        networkId: "shared-test-staging",
        nodeUrl: "https://rpc.ci-betanet.near.org",
        contractName: CONTRACT_NAME,
        ftContractName: FT_CONTRACT_NAME,
        masterAccount: "test.near",
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      );
  }
}

module.exports = getConfig;
'''
'''--- near_bike_share_dapp/frontend/assets/js/near/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import getConfig from "./config";

const nearConfig = getConfig(process.env.NODE_ENV || "development");

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearConfig
    )
  );

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near);

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId();

  // コントラクトAPIの初期化
  window.contract = await new Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
      viewMethods: [
        "num_of_bikes",
        "is_available",
        "who_is_using",
        "who_is_inspecting",
        "amount_to_use_bike", 
      ],
      changeMethods: [
        "inspect_bike", 
        "return_bike"
      ], 
    }
  );

  // ftコントラクトとの接続を追加
  window.ftContract = await new Contract(
    window.walletConnection.account(),
    nearConfig.ftContractName,
    {
      viewMethods: [
        "ft_balance_of", 
        "storage_balance_of"
      ],
      changeMethods: [
        "storage_deposit",
        "storage_unregister",
        "ft_transfer",
        "ft_transfer_call", 
      ],
    }
  );
}

export function logout() {
  window.walletConnection.signOut();
  // reload page
  window.location.replace(window.location.origin + window.location.pathname);
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

export async function num_of_bikes() {
  let n = await window.contract.num_of_bikes();
  return n;
}

export async function is_available(index) {
  let response = await window.contract.is_available({
    index: index,
  });
  return response;
}

export async function who_is_using(index) {
  let response = await window.contract.who_is_using({
    index: index,
  });
  return response;
}

export async function who_is_inspecting(index) {
  let response = await window.contract.who_is_inspecting({
    index: index,
  });
  return response;
}

// export async function use_bike(index) {
//   let response = await window.contract.use_bike({
//     index: index,
//   });
//   return response;
// }

export async function inspect_bike(index) {
  let response = await window.contract.inspect_bike({
    index: index,
  });
  return response;
}

export async function return_bike(index) {
  let response = await window.contract.return_bike({
    index: index,
  });
  return response;
}

/**
 * account_idのftの残高を取得します。
 */
export async function ft_balance_of(account_id) {
  let balance = await window.ftContract.ft_balance_of({
    account_id: account_id,
  });
  console.log("balance:", balance);
  return balance;
}

/**
 * account_idのストレージの使用状況を表すデータ構造を取得します。
 * account_idが登録されていない場合はnullが返るので, 登録されているかどうかの判断にこの関数を使用します。
 */
export async function storage_balance_of(account_id) {
  let balance = await window.ftContract.storage_balance_of({
    account_id: account_id,
  });
  console.log("accountId:", account_id);
  return balance;
}

/** ストレージ使用量を支払い登録を行います。 */
export async function storage_deposit() {
  let response = await window.ftContract.storage_deposit(
    {}, // 引数の省略 = このメソッドを呼び出しているアカウントを登録
    "300000000000000", // ガス量の制限(in gas units)
    "1250000000000000000000" // デポジット (in yoctoNEAR, 1 yoctoNEAR = 10^-24 NEAR)
  );
  return response;
}

/** アカウントの登録を解除します。 */
// 今回は簡単のため強制的に解除する方法を引数指定でとっています。
export async function storage_unregister() {
  let response = await window.ftContract.storage_unregister(
    { force: true }, // アカウントの情報に関わらず登録を解除する, 所持しているftはバーンされる
    "300000000000000",
    "1"
  );
  return response;
}

/** ftをreceiver_idへ転送します。 */
export async function ft_transfer(receiver_id, amount) {
  let response = await window.ftContract.ft_transfer(
    {
      receiver_id: receiver_id,
      amount: amount,
    },
    "300000000000000",
    "1" // セキュリティ上必要な 1 yoctoNEAR
  );
  return response;
}

export async function amount_to_use_bike() {
  let amount = await window.contract.amount_to_use_bike();
  return amount;
}

export async function ft_transfer_call(index, amount) {
  let response = await window.ftContract.ft_transfer_call(
    {
      receiver_id: nearConfig.contractName,
      amount: amount,
      msg: index.toString(),
    },
    "300000000000000",
    "1"
  );
  return response;
}
'''
'''--- near_bike_share_dapp/frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/img/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/img/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js" type="module"></script>
  </body>
</html>

'''
'''--- near_bike_share_dapp/frontend/index.js ---
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import { initContract } from './assets/js/near/utils'

const container = document.querySelector('#root')
const root = createRoot(container) 

window.nearInitPromise = initContract()
  .then(() => {
    <App />
    root.render(<App tab="home" />)
  })
  .catch(console.error)

'''
'''--- near_bike_share_dapp/integration-tests/package.json ---
{
  "name": "ava-testing",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava --verbose"
  },
  "devDependencies": {
    "ava": "^4.2.0",
    "typescript": "^4.7.2",
    "ts-node": "^10.8.0",
    "@types/bn.js": "^5.1.0",
    "@types/node": "^18.6.2",
    "near-workspaces": "^3.2.1"
  },
  "dependencies": {}
}
'''
'''--- near_bike_share_dapp/integration-tests/rs/Cargo.toml ---
[package]
edition = "2018"
name = "integration-tests"
publish = false
version = "1.0.0"

[dev-dependencies]
anyhow = "1.0"
borsh = "0.9"
maplit = "1.0"
near-sdk = "4.0.0"
near-units = "0.2.0"
# arbitrary_precision enabled for u128 types that workspaces requires for Balance types
pkg-config = "0.3.1"
serde_json = {version = "1.0", features = ["arbitrary_precision"]}
tokio = {version = "1.18.1", features = ["full"]}
tracing = "0.1"
tracing-subscriber = {version = "0.3.11", features = ["env-filter"]}
workspaces = "0.4.0"

[[example]]
name = "integration-tests"
path = "src/tests.rs"
'''
'''--- near_bike_share_dapp/integration-tests/rs/src/tests.rs ---
use near_sdk::json_types::U128;
use near_units::parse_near;
use serde_json::json;
use workspaces::prelude::*;
use workspaces::{network::Sandbox, Account, Contract, Worker, AccountId};

const BIKE_WASM_FILEPATH: &str = "../../out/main.wasm";
const FT_CONTRACT_ACCOUNT: &str = "sub.ft_mashharuki.testnet";

const FT_TOTAL_SUPPLY: u128 = 1000;

#[tokio::test]
async fn test_ft_contract() -> anyhow::Result<()> {
    // テスト環境の初期化
    let worker = workspaces::sandbox().await?;

    // 各コントラクトの用意
    let bike_wasm = std::fs::read(BIKE_WASM_FILEPATH)?;
    let bike_contract = worker.dev_deploy(&bike_wasm).await?;
    let ft_contract = pull_contract(&worker).await?;

    // テストに使うアカウントを用意
    let owner = worker.root_account().unwrap();
    let bob = owner
        .create_subaccount(&worker, "bob")
        .initial_balance(parse_near!("100 N"))
        .transact()
        .await?
        .into_result()?;
    // aliceアカウントを追加
    let alice = owner
        .create_subaccount(&worker, "alice")
        .initial_balance(parse_near!("100 N"))
        .transact()
        .await?
        .into_result()?;

    // コントラクトの初期化
    ft_contract
        .call(&worker, "new_default_meta")
        .args_json(serde_json::json!({
            "owner_id": owner.id(),
            "total_supply": FT_TOTAL_SUPPLY.to_string(),
        }))?
        .transact()
        .await?;
    bike_contract
        .call(&worker, "new")
        .args_json(serde_json::json!({
            "num_of_bikes": 5
        }))?
        .transact()
        .await?;
    bike_contract
        .as_account()
        .call(&worker, ft_contract.id(), "storage_deposit")
        .args_json(serde_json::json!({
            "account_id": bike_contract.id()
        }))?
        .deposit(1250000000000000000000)
        .gas(300000000000000)
        .transact()
        .await?;

    // テスト実施
    test_transfer_ft_to_user_inspected_bike(&owner, &bob, &ft_contract, &bike_contract, &worker).await?;
    test_transfer_call_to_use_bike(&owner, &alice, &ft_contract, &bike_contract, &worker).await?; // <- 追加!
    Ok(())
}

/// 既にデプロイされているコントラクトを取得します。
async fn pull_contract(worker: &Worker<Sandbox>) -> anyhow::Result<Contract> {
    let testnet = workspaces::testnet_archival().await?;
    let contract_id: AccountId = FT_CONTRACT_ACCOUNT.parse()?;

    let contract = worker
        .import_contract(&contract_id, &testnet)
        .initial_balance(parse_near!("1000 N"))
        .transact()
        .await?;

    Ok(contract)
}

/// バイクを点検をしてくれたユーザへ報酬を支払えているかのテストを行います。
async fn test_transfer_ft_to_user_inspected_bike(
    owner: &Account,
    user: &Account,
    ft_contract: &Contract,
    bike_contract: &Contract,
    worker: &Worker<Sandbox>,
) -> anyhow::Result<()> {
    let remuneration_amount = 15;
    let test_bike_index = 0;

    // userのストレージ登録
    user.call(&worker, ft_contract.id(), "storage_deposit")
        .args_json(serde_json::json!({
            "account_id": user.id()
        }))?
        .deposit(1250000000000000000000)
        .gas(300000000000000)
        .transact()
        .await?;

    // bike_contractのFTの用意
    // ownerからbike_contractへftを転送
    owner
        .call(&worker, ft_contract.id(), "ft_transfer")
        .args_json(serde_json::json!({
            "receiver_id": bike_contract.id(),
            "amount": "50".to_string()
        }))?
        .deposit(1)
        .transact()
        .await?;

    // この時点でのuserの残高確認
    let user_balance: U128 = ft_contract
        .call(&worker, "ft_balance_of")
        .args_json(json!({"account_id": user.id()}))?
        .transact()
        .await?
        .json()?;
    assert_eq!(user_balance.0, 0);

    // ユーザによってバイクを点検
    user.call(&worker, bike_contract.id(), "inspect_bike")
        .args_json(serde_json::json!({
            "index": test_bike_index,
        }))?
        .gas(300000000000000)
        .transact()
        .await?;

    // 点検中のuserの残高確認
    let user_balance: U128 = ft_contract
        .call(&worker, "ft_balance_of")
        .args_json(json!({"account_id": user.id()}))?
        .transact()
        .await?
        .json()?;
    assert_eq!(user_balance.0, 0);

    // バイクを返却
    user.call(&worker, bike_contract.id(), "return_bike")
        .args_json(serde_json::json!({
            "index": test_bike_index,
        }))?
        .gas(300000000000000)
        .transact()
        .await?;

    // バイク返却後のuserの残高が増えていることを確認
    let user_balance: U128 = ft_contract
        .call(&worker, "ft_balance_of")
        .args_json(json!({"account_id": user.id()}))?
        .transact()
        .await?
        .json()?;
    assert_eq!(user_balance.0, remuneration_amount);

    println!("      Passed ✅ test_transfer_ft_to_user_inspected_bike");
    Ok(())
}

/// バイクを使用する際にftの転送ができているか確認します。
async fn test_transfer_call_to_use_bike(
    owner: &Account,
    user: &Account,
    ft_contract: &Contract,
    bike_contract: &Contract,
    worker: &Worker<Sandbox>,
) -> anyhow::Result<()> {
    let user_initial_amount = 100;
    let test_bike_index = 0;

    //あらかじめbikeコントラクトのテスト開始時の残高を取得。
    let bike_contract_initial_balance: U128 = ft_contract
        .call(&worker, "ft_balance_of")
        .args_json(json!({"account_id": bike_contract.id()}))?
        .transact()
        .await?
        .json()?;

    // バイクの使用に必要なftの量を取得
    let amount_to_use_bike: U128 = bike_contract
        .call(&worker, "amount_to_use_bike")
        .transact()
        .await?
        .json()?;

    // userのストレージ登録
    user.call(&worker, ft_contract.id(), "storage_deposit")
        .args_json(serde_json::json!({
            "account_id": user.id()
        }))?
        .deposit(1250000000000000000000)
        .gas(300000000000000)
        .transact()
        .await?;

    // userのftの用意
    // ownerからユーザへftを転送
    owner
        .call(&worker, ft_contract.id(), "ft_transfer")
        .args_json(serde_json::json!({
            "receiver_id": user.id(),
            "amount": user_initial_amount.to_string()
        }))?
        .deposit(1)
        .transact()
        .await?;

    // bike_contractへft送信し, バイクの使用を申請します
    user.call(&worker, ft_contract.id(), "ft_transfer_call")
        .args_json(serde_json::json!({
            "receiver_id": bike_contract.id(),
            "amount": amount_to_use_bike.0.to_string(),
            "msg": test_bike_index.to_string(),
        }))?
        .deposit(1)
        .gas(300000000000000)
        .transact()
        .await?;

    // バイクの使用者がuserであるか確認
    let bike_user_id: AccountId = bike_contract
        .call(&worker, "who_is_using")
        .args_json(json!({"index": test_bike_index}))?
        .transact()
        .await?
        .json()?;
    assert_eq!(user.id().clone(), bike_user_id);

    // ユーザはバイクを返却
    user.call(&worker, bike_contract.id(), "return_bike")
        .args_json(serde_json::json!({
            "index": test_bike_index,
        }))?
        .gas(300000000000000)
        .transact()
        .await?;

    // バイク返却後のuserの残高の確認
    let user_balance: U128 = ft_contract
        .call(&worker, "ft_balance_of")
        .args_json(json!({"account_id": user.id()}))?
        .transact()
        .await?
        .json()?;
    assert_eq!(user_balance.0, user_initial_amount - amount_to_use_bike.0);

    // bike_contractの残高の確認
    let bike_contract_balance: U128 = ft_contract
        .call(&worker, "ft_balance_of")
        .args_json(json!({"account_id": bike_contract.id()}))?
        .transact()
        .await?
        .json()?;
    assert_eq!(bike_contract_balance.0, bike_contract_initial_balance.0 + amount_to_use_bike.0);

    println!("      Passed ✅ test_transfer_call_to_use_bike");
    Ok(())
}
'''
'''--- near_bike_share_dapp/integration-tests/src/main.ava.ts ---
import anyTest, { TestFn } from 'ava';
import { NEAR, NearAccount, Worker } from 'near-workspaces';

// import { Near, Account, Contract } from 'near-api-js'
// import { nearConfig } from './config'
// import { truncate } from 'fs';

const BIKE_WASM_FILEPATH: string = "../out/main.wasm";
const FT_CONTRACT_ACCOUNT: string = "sub.ft_mashharuki.testnet";

const FT_TOTAL_SUPPLY: number = 1000;

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, any>;
}>

test.beforeEach(async (t) => {
  // テスト環境の初期化
  const worker = await Worker.init();

  // 各コントラクトの用意
  const owner = worker.rootAccount;
  const ftContract = await owner.importContract({
    testnetContract: FT_CONTRACT_ACCOUNT,
    isSubAccount: true,
    initialBalance: NEAR.parse('1000 N').toJSON(),
  });
  const bikeContract = await owner.devDeploy(BIKE_WASM_FILEPATH);

  // テストに使うアカウントを用意
  const bob = await owner.createSubAccount("bob", {
    initialBalance: NEAR.parse("100 N").toJSON(),
  });
  const alice = await owner.createSubAccount("alice", {
    initialBalance: NEAR.parse("100 N").toJSON(),
  });

  // コントラクトの初期化
  await owner.call(ftContract, 'new_default_meta',
    {
      "owner_id": owner.accountId,
      "total_supply": String(FT_TOTAL_SUPPLY),
    });
  await owner.call(bikeContract, 'new',
    {
      "num_of_bikes": 5,
    });
  await bikeContract.call(ftContract.accountId, 'storage_deposit',
    {
      "account_id": bikeContract.accountId,
    },
    {
      attachedDeposit: "1250000000000000000000",
      gas: "300000000000000",
    });

  // workerとaccountをテスト実行ように保存
  t.context.worker = worker;
  t.context.accounts = {
    owner,
    bikeContract,
    ftContract,
    alice,
    bob,
  };
})

test.afterEach(async t => {
  await t.context.worker.tearDown().catch(error => {
    console.log('Failed to tear down the worker:', error);
  });
});

test('test transfer ft to user inspected bike', async (t) => {
  const {
    owner,
    bikeContract,
    ftContract,
    bob,
  } = t.context.accounts;
  let user = bob;
  let remunerationAmount = 15;
  let testBikeIndex = 0;

  // userのストレージ登録
  await user.call(ftContract.accountId, 'storage_deposit',
    {
      "account_id": user.accountId,
    },
    {
      attachedDeposit: "1250000000000000000000",
      gas: "300000000000000",
    });

  // bikeContractのFTの用意
  // ownerからbikeContractへftを転送
  await owner.call(ftContract.accountId, "ft_transfer",
    {
      "receiver_id": bikeContract.accountId,
      "amount": "50"
    },
    {
      attachedDeposit: '1'
    });

  // この時点でのuserの残高確認
  let userBalance: string;
  userBalance = await owner.call(
    ftContract,
    "ft_balance_of",
    {
      "account_id": user.accountId,
    });
  t.is(userBalance, "0");

  // ユーザによってバイクを点検
  await user.call(bikeContract.accountId, "inspect_bike",
    {
      "index": testBikeIndex,
    },
    {
      gas: "300000000000000",
    });

  // 点検中のuserの残高確認
  userBalance = await owner.call(
    ftContract,
    "ft_balance_of",
    {
      "account_id": user.accountId,
    });
  t.is(userBalance, "0");

  // バイクを返却
  await user.call(bikeContract.accountId, "return_bike",
    {
      "index": testBikeIndex,
    },
    {
      gas: "300000000000000",
    });

  // バイク返却後のuserの残高が増えていることを確認
  userBalance = await owner.call(
    ftContract,
    "ft_balance_of",
    {
      "account_id": user.accountId,
    });
  t.is(userBalance, String(remunerationAmount));

  console.info("      Passed ✅ test transfer ft to user inspected bike");
});

test('test transfer call to use bike', async (t) => {
  const {
    owner,
    bikeContract,
    ftContract,
    alice,
  } = t.context.accounts;
  let user = alice;
  let userInitialAmount = 100;
  let testBikeIndex = 0;

  //あらかじめbikeコントラクトのテスト開始時の残高を取得。
  let bikeContractInitialBalance: string = await owner.call(
    ftContract,
    "ft_balance_of",
    {
      "account_id": bikeContract.accountId,
    });

  // バイクの使用に必要なftの量を取得
  let amountToUseBike: string = await owner.call(
    bikeContract,
    "amount_to_use_bike",
    {}
  );

  // userのストレージ登録
  await user.call(ftContract.accountId, 'storage_deposit',
    {
      "account_id": user.accountId,
    },
    {
      attachedDeposit: "1250000000000000000000",
      gas: "300000000000000",
    });

  // userのftの用意
  // ownerからユーザへftを転送
  await owner.call(ftContract.accountId, "ft_transfer",
    {
      "receiver_id": user.accountId,
      "amount": String(userInitialAmount),
    },
    {
      attachedDeposit: "1",
    });

  // bikeContractへft送信し, バイクの使用を申請します
  await user.call(ftContract.accountId, "ft_transfer_call",
    {
      "receiver_id": bikeContract.accountId,
      "amount": String(amountToUseBike),
      "msg": String(testBikeIndex),
    },
    {
      attachedDeposit: "1",
      gas: "300000000000000",
    });

  // バイクの使用者がuserであるか確認
  let bikeUserId: NearAccount = await owner.call(bikeContract, "who_is_using",
    {
      "index": testBikeIndex,
    });
  t.is(user.accountId, bikeUserId);

  // ユーザはバイクを返却
  await user.call(bikeContract.accountId, "return_bike",
    {
      "index": testBikeIndex,
    },
    {
      gas: "300000000000000",
    });

  // バイク返却後のuserの残高の確認
  let userBalance: string = await owner.call(ftContract, "ft_balance_of",
    {
      "account_id": user.accountId,
    });
  t.is(Number(userBalance), Number(userInitialAmount) - Number(amountToUseBike));

  // bike_contractの残高の確認
  let bikeContractBalance: string = await owner.call(ftContract, "ft_balance_of",
    {
      "account_id": bikeContract.accountId,
    });
  t.is(Number(bikeContractBalance), Number(bikeContractInitialBalance) + Number(amountToUseBike));

  console.info("      Passed ✅ test transfer call to use bike");
});
'''
'''--- near_bike_share_dapp/package.json ---
{
  "name": "near-bike-share-dapp",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "cd contract && rustup target add wasm32-unknown-unknown && cargo build --all --target wasm32-unknown-unknown --release && cp ./target/wasm32-unknown-unknown/release/bike_share.wasm ../out/main.wasm",
    "build:web": "parcel build frontend/index.html --public-url ./",
    "deploy": "npm run build:contract && near dev-deploy --initFunction 'new' --initArgs '{\"num_of_bikes\": 5}'",
    "reset": "rm -f ./neardev/dev-account.env ",
    "init": "export $(cat ./neardev/dev-account.env | xargs) FT_CONTRACT=sub.ft_mashharuki.testnet FT_OWNER=ft_mashharuki.testnet && near call $FT_CONTRACT storage_deposit '' --accountId $CONTRACT_NAME --amount 0.00125 && near call $FT_CONTRACT ft_transfer '{\"receiver_id\": \"'$CONTRACT_NAME'\", \"amount\": \"100\"}' --accountId $FT_OWNER --amount 0.000000000000000000000001",
    "start": "npm run reset && npm run deploy && npm run init && env-cmd -f ./neardev/dev-account.env parcel frontend/index.html --open",
    "dev": "nodemon --watch contract -e ts --exec \"npm run start\"",
    "test": "npm run build:contract && npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && cargo test",
    "test:integration": "npm run deploy && cd integration-tests && npm run test",
    "test:integration:ts": "echo not supported"
  },
  "devDependencies": {
    "@babel/core": "~7.18.2",
    "@babel/preset-env": "~7.18.2",
    "@babel/preset-react": "~7.17.12",
    "ava": "^4.2.0",
    "env-cmd": "~10.1.0",
    "near-cli": "~3.3.0",
    "nodemon": "~2.0.16",
    "parcel": "^2.7.0",
    "process": "^0.11.10",
    "react-test-renderer": "~18.1.0",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2"
  },
  "dependencies": {
    "near-api-js": "~0.44.2",
    "react": "~18.1.0",
    "react-dom": "~18.1.0",
    "regenerator-runtime": "~0.13.9"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "homepage": "https://bikesharingdapp.netlify.app",
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''