*GitHub Repository "kaan-nacaroglu/near-plate-guesser"*

'''--- README.md ---
# near-plate-guesser

This is a guessing game done with AssemblyScript and NEAR Protocol. 
Its goal is to match given Turkish plate numbers with writing the correct cities. 

## Requirements
- Install Node.js 
- Install Yarn `npm install --global yarn` OR `npm i -g yarn`
- Install NEAR CLI `npm install --global near-cli`
- You need a NEAR Wallet. You can get a testnet wallet for free. 

## How to Run
1. Run `near login`, and login to your testnet account.
2. Clone the repo to your local folder.
3. run `yarn` to load the near-modules
4. run `./scripts/1.dev-deploy.sh`
5. Follow along with the script.
6. run  `./scripts/2.use-contract.sh`
7. Guess the city
8. Repeat steps 6-7 as long as you want or until you get bored

### Methods

`function  fillVector(): PersistentVector<string>`
This function fills a PersistentVector with 9 items. Currently these items are manually inserted to the PV for the demo's sake, but this will be a JSON object that the program copies from.

`function  emptyVector(): PersistentVector<string>`
emptyVector() cycles through all the items and uses the .pop() method, empties the whole vector. 
Note: You might need to run this function to cleanup every item. 

`function  randomPlateNumber(): string`
This function gives us a number between 1 and max size of our Vector. (which is currently 9) It prints out the number and asks the question.

`function  guessThePlate(answer: string): string`
This function takes your answer and compares with the value in the vector. If it is true, it gives a correct statement, if it is incorrect it will say that you are incorrect. 

## TODO LIST
- Frontend
- Transaction of money(like a betting pool)
'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports")
'''
'''--- asconfig.json ---
{
    "extends" : "near-sdk-as/asconfig.json"
}
'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />

'''
'''--- assembly/__tests__/example.spec.ts ---
import { helloWorld } from "..";

describe("example", () => {
  it("should return 'Hello World'", () => {
    expect(helloWorld()).toStrictEqual("Hello World");
  }
)});

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/index.ts ---
import { storage, logging, PersistentVector, RNG, context } from "near-sdk-as";

// --- contract code goes below

let plates = new PersistentVector<string>("p");

export function fillVector() : PersistentVector<string>{
    if (plates.isEmpty) {
        plates.push("Adana");
        plates.push("Adıyaman");
        plates.push("Afyon");
        plates.push("Ağrı");
        plates.push("Amasya");
        plates.push("Ankara");
        plates.push("Antalya");
        plates.push("Artvin");
        plates.push("Aydın");               
    }
    return plates;
} 

export function emptyVector() : PersistentVector<string>{
    for (let i : i32 = 0; i < plates.length; i++) plates.pop();

    return plates;
} 

export function printVector() : void { 
    assert(!plates.isEmpty, "Vector is Empty")  
    for (let i= 0; i < plates.length; ++i) logging.log(plates[i]);
    
}

export function randomPlateNumber() : string {
  
    const SIZE = plates.length;
    const rng = new RNG<u32>(1, SIZE);
    const roll = rng.next();
    //storage set
    storage.set<i32>('num', <i32>roll);
    return "What is the name of the city with the Plate Number 0"+ (roll+1).toString();
}

export function guessThePlate(answer : string) : string{

  
  if(answer == plates[ storage.getPrimitive<i32>('num',0)]){
    return context.sender +" is Correct";
  }else{
    return  context.sender +" is Wrong";    
  }

}
'''
'''--- assembly/tsconfig.json ---
{
    "extends": "assemblyscript/std/assembly.json"
}
'''
'''--- package.json ---
{
  "name": "near-plate-guesser",
  "version": "1.0.0",
  "description": "Simple plate guessing game for Turkish plate numbers",
  "main": "index.js",
  "scripts": {
    "test": "asp",
    "build" : "asb"
  },
  "author": "kaan-nacaroglu",
  "license": "MIT",
  "devDependencies": {
    "near-sdk-as": "^3.2.3"
  }
}

'''
'''--- scripts/1.dev-deploy.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 1: Build the contract (may take a few seconds)"
echo ---------------------------------------------------------
echo

yarn build

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Deploy the contract"
echo
echo ---------------------------------------------------------
echo

# uncomment out the line below to deploy the other example contract
# near dev-deploy ./build/debug/simple.wasm

# comment the line below to deploy the other example contract
near dev-deploy ./build/release/near-plate-guesser.wasm

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Prepare your environment for next steps"
echo
echo "(a) find the contract (account) name in the message above"
echo "    it will look like this: [ Account id: dev-###-### ]"
echo
echo "(b) set an environment variable using this account name"
echo "    see example below (this may not work on Windows)"
echo
echo ---------------------------------------------------------
echo 'export CONTRACT=<dev-123-456>'
echo 'export OWNER=<YOUR-TESTNET-ACCOUNT>'
# uncomment this line for a useful hint when using the singleton style
# echo "near call \$CONTRACT init --accountId \$CONTRACT"
echo ---------------------------------------------------------
echo

exit 0

'''
'''--- scripts/2.use-contract.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1
[ -z "$OWNER" ] || echo "Found it! \$OWNER is set to [ $OWNER ]"

echo
echo
echo ---------------------------------------------------------
echo "Step 1: We need to fill up our vector with the cities"
echo
echo ---------------------------------------------------------
echo

near call $CONTRACT fillVector --accountId $OWNER

echo
echo

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Let's get our plate number."
echo
echo ---------------------------------------------------------
echo

near call $CONTRACT randomPlateNumber --accountId $OWNER

echo
echo
echo ---------------------------------------------------------
echo "You can make your guess now"
echo "near call \$CONTRACT guessThePlate '{\"answer\" : \"YOUR ANSWER HERE\"}' --accountId \$OWNER"
echo ---------------------------------------------------------
echo

exit 0
'''