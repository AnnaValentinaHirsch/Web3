*GitHub Repository "near-examples/cross-contract-hello-js"*

'''--- .github/workflows/tests.yml ---
name: Tests
on: push
jobs:
  workflows:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Install modules
        run: yarn
      - name: Run tests
        run: yarn test
'''
'''--- .gitpod.yml ---
image:
  file: .gitpod.Dockerfile

tasks:
  - init: echo "welcome"
    command: npm i && npm run deploy && npm run start

ports:
  - port: 1234
    onOpen: open-browser
'''
'''--- README.md ---
# ðŸ“ž Cross-Contract Hello 
[![](https://img.shields.io/badge/â‹ˆ%20Examples-Basics-green)](https://docs.near.org/tutorials/welcome)
[![](https://img.shields.io/badge/Gitpod-Ready-orange)](https://gitpod.io/#/https://github.com/near-examples/xcc-js)
[![](https://img.shields.io/badge/Contract-js-yellow)](https://docs.near.org/develop/contracts/anatomy)
[![](https://img.shields.io/badge/Frontend-none-inactive)](#)
[![](https://img.shields.io/badge/Testing-passing-green)](https://docs.near.org/develop/integrate/frontend)

The smart contract implements the simplest form of cross-contract calls: it calls the [Hello NEAR example](https://docs.near.org/tutorials/examples/hello-near) to get and set a greeting.

![](https://docs.near.org/assets/images/hello-near-banner-af016d03e81a65653c9230b95a05fe4a.png)

# What This Example Shows

1. How to query information from an external contract.
2. How to interact with an external contract.

<br />

# Quickstart

Clone this repository locally or [**open it in gitpod**](https://gitpod.io/#/https://github.com/near-examples/xcc-js). Then follow these steps:

### 1. Install Dependencies
```bash
npm install
```

### 2. Test the Contract
Deploy your contract in a sandbox and simulate interactions from users.

```bash
npm test
```

### 3. Deploy the Contract
Build the contract and deploy it in a testnet account
```bash
npm run deploy
```

### 4. Interact With the Contract
Ask the contract to perform a cross-contract call to query or change the greeting in Hello NEAR.

```bash
# Use near-cli to ask the contract to query te greeting
near call <dev-account> query_greeting --accountId <dev-account>

# Use near-cli to set increment the counter
near call <dev-account> change_greeting '{"new_greeting":"XCC Hi"}' --accountId <dev-account>
```
---

# Learn More
1. Learn more about the contract through its [README](./contract/README.md).
2. Check [**our documentation**](https://docs.near.org/develop/welcome).
'''
'''--- contract/README.md ---
# Cross-Contract Hello Contract

The smart contract implements the simplest form of cross-contract calls: it calls the [Hello NEAR example](https://docs.near.org/tutorials/examples/hello-near) to get and set a greeting.

```ts
@call
query_greeting() {
  const call = near.promiseBatchCreate(this.hello_account);
  near.promiseBatchActionFunctionCall(call, "get_greeting", bytes(JSON.stringify({})), 0, 5 * TGAS);
  const then = near.promiseThen(call, near.currentAccountId(), "query_greeting_callback", bytes(JSON.stringify({})), 0, 5 * TGAS);
  return near.promiseReturn(then);
}

@call
query_greeting_callback() {
  assert(near.currentAccountId() === near.predecessorAccountId(), "This is a private method");
  const greeting = near.promiseResult(0) as String;
  return greeting.substring(1, greeting.length-1);
}

@call
change_greeting({ new_greeting }: { new_greeting: string }) {
  const call = near.promiseBatchCreate(this.hello_account);
  near.promiseBatchActionFunctionCall(call, "set_greeting", bytes(JSON.stringify({ greeting: new_greeting })), 0, 5 * TGAS);
  const then = near.promiseThen(call, near.currentAccountId(), "change_greeting_callback", bytes(JSON.stringify({})), 0, 5 * TGAS);
  return near.promiseReturn(then);
}

@call
change_greeting_callback() {
  assert(near.currentAccountId() === near.predecessorAccountId(), "This is a private method");

  if (near.promiseResultsCount() == BigInt(1)) {
    near.log("Promise was successful!")
    return true
  } else {
    near.log("Promise failed...")
    return false
  }
}
```

<br />

# Quickstart

1. Make sure you have installed [node.js](https://nodejs.org/en/download/package-manager/) >= 16.
2. Install the [`NEAR CLI`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

```bash
npm run deploy
```

Once finished, check the `neardev/dev-account` file to find the address in which the contract was deployed:

```bash
cat ./neardev/dev-account  # dev-1659899566943-21539992274727
```

<br />

## 2. Get the Greeting

`query_greeting` performs a cross-contract call, calling the `get_greeting()` method from `hello-nearverse.testnet`.

`Call` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

```bash
# Use near-cli to ask the contract to query the greeting
near call <dev-account> query_greeting --accountId <dev-account>
```

<br />

## 3. Set a New Greeting
`change_greeting` performs a cross-contract call, calling the `set_greeting({greeting:String})` method from `hello-nearverse.testnet`.

`Call` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

```bash
# Use near-cli to change the greeting
near call <dev-account> change_greeting '{"new_greeting":"XCC Hi"}' --accountId <dev-account>
```

**Tip:** If you would like to call `change_greeting` or `query_greeting` using your own account, first login into NEAR using:

```bash
# Use near-cli to login your NEAR account
near login
```

and then use the logged account to sign the transaction: `--accountId <your-account>`.
'''
'''--- contract/build.sh ---
#!/bin/sh

echo ">> Building contract"

near-sdk-js build src/contract.ts build/contract.wasm
'''
'''--- contract/deploy.sh ---
#!/bin/sh

# build the contract
npm run build

# deploy the contract
near dev-deploy --wasmFile build/contract.wasm
'''
'''--- contract/package.json ---
{
  "name": "contract",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "type": "module",
  "scripts": {
    "build": "./build.sh",
    "deploy": "./deploy.sh",
    "test": "echo no unit testing"
  },
  "dependencies": {
    "near-cli": "^3.4.0",
    "near-sdk-js": "1.0.0"
  },
  "devDependencies": {
    "typescript": "^4.8.4",
    "ts-morph": "^16.0.0"
  }
}

'''
'''--- contract/src/contract.ts ---
import { NearBindgen, initialize, call, near, bytes, NearPromise } from "near-sdk-js";
import { AccountId } from "near-sdk-js/lib/types";

const FIVE_TGAS = BigInt("50000000000000");
const NO_DEPOSIT = BigInt(0);
const NO_ARGS = JSON.stringify({});

@NearBindgen({})
class CrossContractCall {
  hello_account: AccountId = "hello-nearverse.testnet";

  @initialize({})
  init({ hello_account }: { hello_account: AccountId }) {
    this.hello_account = hello_account
  }

  @call({})
  query_greeting(): NearPromise {
    const promise = NearPromise.new(this.hello_account)
    .functionCall("get_greeting", NO_ARGS, NO_DEPOSIT, FIVE_TGAS)
    .then(
      NearPromise.new(near.currentAccountId())
      .functionCall("query_greeting_callback", NO_ARGS, NO_DEPOSIT, FIVE_TGAS)
    )
    
    return promise.asReturn();
  }

  @call({privateFunction: true})
  query_greeting_callback(): String {
    let {result, success} = promiseResult()

    if (success) {
      return result.substring(1, result.length-1);
    } else {
      near.log("Promise failed...")
      return ""
    }
  }

  @call({})
  change_greeting({ new_greeting }: { new_greeting: string }): NearPromise {
    const promise = NearPromise.new(this.hello_account)
    .functionCall("set_greeting", JSON.stringify({ greeting: new_greeting }), NO_DEPOSIT, FIVE_TGAS)
    .then(
      NearPromise.new(near.currentAccountId())
      .functionCall("change_greeting_callback", NO_ARGS, NO_DEPOSIT, FIVE_TGAS)
    )

    return promise.asReturn();
  }

  @call({privateFunction: true})
  change_greeting_callback(): boolean {
    let { success } = promiseResult()

    if (success) {
      near.log(`Success!`)
      return true
    } else {
      near.log("Promise failed...")
      return false
    }
  }
}

function promiseResult(): {result: string, success: boolean}{
  let result, success;
  
  try{ result = near.promiseResult(0); success = true }
  catch{ result = undefined; success = false }
  
  return {result, success}
}
'''
'''--- contract/tsconfig.json ---
{
  "compilerOptions": {
    "experimentalDecorators": true,
    "target": "es5",
    "noEmit": true
  },
  "exclude": [
    "node_modules"
  ],
}
'''
'''--- integration-tests/package.json ---
{
  "name": "integration-tests",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/node": "^18.6.2",
    "ava": "^4.2.0",
    "near-workspaces": "^3.2.1",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2"
  },
  "dependencies": {}
}

'''
'''--- integration-tests/src/main.ava.ts ---
import { Worker, NearAccount } from 'near-workspaces';
import anyTest, { TestFn } from 'ava';

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = await Worker.init();

  // Prepare sandbox for tests, create accounts, deploy contracts, etx.
  const root = worker.rootAccount;
  
  // Create test account alice
  const alice = await root.createSubAccount("alice");
  const xcc = await root.createSubAccount("xcc");
  const helloNear = await root.createSubAccount("hello-near");

  // Deploy the hello near contract
  await helloNear.deploy("./src/hello-near/hello-near.wasm")

  // Deploy the xcc contract.
  await xcc.deploy(process.argv[2]);
  await xcc.call(xcc, "init", {hello_account: helloNear.accountId})

  // Save state for test runs, it is unique for each test
  t.context.worker = worker;
  t.context.accounts = {
    root,
    helloNear,
    xcc,
    alice,
  };
});

test.afterEach(async (t) => {
  await t.context.worker.tearDown().catch((error) => {
    console.log("Failed tear down the worker:", error);
  });
});

test("returns the default greeting", async (t) => {
  const { xcc, alice } = t.context.accounts;

  const greeting = await alice.call(xcc, "query_greeting", {}, { gas: "200000000000000" });
  t.is(greeting, 'Hello');
});

test("change the greeting", async (t) => {
  const { xcc, alice } = t.context.accounts;

  const result = await alice.call(xcc, "change_greeting", { new_greeting: "Howdy" }, { gas: "200000000000000" });
  t.is(result, true);

  const howdy = await alice.call(xcc, "query_greeting", {}, { gas: "200000000000000" });
  t.is(howdy, 'Howdy');
});
'''
'''--- package.json ---
{
  "name": "xcc-js",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "echo no frontend",
    "deploy": "cd contract && npm run deploy",
    "build": "npm run build:contract",
    "build:contract": "cd contract && npm run build",
    "test": "npm run build:contract && npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && npm test",
    "test:integration": "cd integration-tests && npm test -- -- \"./contract/build/contract.wasm\"",
    "postinstall": "echo no frontend && cd integration-tests && npm install && cd .. && cd contract && npm install"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}
'''