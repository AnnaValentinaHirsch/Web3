*GitHub Repository "near/bos-web-engine"*

'''--- .github/ISSUE_TEMPLATE/epic.md ---
---
name: Epic
about: Team level milestones in support of a roadmap initiative. Used to group several
  like-issues under a common outcome
title: "\U0001F537 [Epic] < Add a brief Title >"
labels: Epic
assignees: ''

---

---
name: Epic
about: Team level milestones in support of a roadmap initiative. Used to group several
  like-issues under a common outcome
title: "\U0001F537 [Epic] < Add a brief Title >"
labels: Epic
assignees: ''

---

## Description
(Overview of milestone or function governed by this epic)

## Resources
(Relevant documentation, Figma links, and other reference material)

1. Item 1
1. Item 2
1. Item 3

'''
'''--- .github/workflows/deploy-components-main.yml ---
name: Deploy Components to Mainnet
on:
  push:
    branches: [main]
concurrency: main # do not allow parallel execution
jobs:
  # We want to leverage the reusable workflow from bos cli as shown here, but
  # we need to temporarily use a modified version of that in order to support
  # tsx file deployment. We have copied the workflow here and modified it to
  # change all tsx files to jsx files before deploying. Once the bos cli
  # workflow is updated to support tsx files, we can remove this and use the
  # reusable workflow directly
  #
  # deploy-mainnet:
  #   uses: bos-cli-rs/bos-cli-rs/.github/workflows/deploy-mainnet.yml@main
  #   with:
  #     deploy-account-address: bwe-demos.near
  #     signer-account-address: bwe-demos.near
  #     signer-public-key: ed25519:8WLckTAFUtT7SADeAw4BF7tUFfgeG5ZW5kFbfi1TQZQB
  #   secrets:
  #     SIGNER_PRIVATE_KEY: ${{ secrets.SIGNER_PRIVATE_KEY }}
  deploy-widgets:
    runs-on: ubuntu-latest
    name: Deploy widgets to social.near (mainnet)
    env:
      BOS_DEPLOY_ACCOUNT_ID: bwe-demos.near
      BOS_SIGNER_ACCOUNT_ID: bwe-demos.near
      BOS_SIGNER_PUBLIC_KEY: ed25519:FJG379b3NocJo7Sk8TRekrNDn6C7vzvpYHm7MhAJaThh
      BOS_SIGNER_PRIVATE_KEY: ${{ secrets.SIGNER_PRIVATE_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install bos CLI
        working-directory: apps/demos # only while using forked version that is not installed
        run: |
          wget https://github.com/mpeterdev/bos-cli-rs/releases/download/v1/bos && chmod +x bos

      - name: Deploy widgets
        working-directory: apps/demos
        run: |
          ./bos components --social-db-folder "component_alpha" deploy "$BOS_DEPLOY_ACCOUNT_ID" sign-as "$BOS_SIGNER_ACCOUNT_ID" network-config mainnet sign-with-plaintext-private-key --signer-public-key "$BOS_SIGNER_PUBLIC_KEY" --signer-private-key "$BOS_SIGNER_PRIVATE_KEY" send

'''
'''--- .github/workflows/main.yml ---
on:
  schedule:
    # Runs "at 05:00, only on Saturday" 
    - cron: '0 5 * * 6'

jobs:
  move-to-next-iteration:
    name: Move to next iteration
    runs-on: ubuntu-latest

    steps:
    - uses: blombard/move-to-next-iteration@master
      with:
        owner: near
        number: 129
        token: ${{ secrets.MP_PROJECT_WORKFLOW_SECRET }}
        iteration-field: sprint
        iteration: current
        new-iteration: next
        statuses: None,Selected,Blocked,In Progress,In Review,Todo,Ready for Development

'''
'''--- .github/workflows/snyk-security.yml ---
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# A sample workflow which sets up Snyk to analyze the full Snyk platform (Snyk Open Source, Snyk Code,
# Snyk Container and Snyk Infrastructure as Code)
# The setup installs the Snyk CLI - for more details on the possible commands
# check https://docs.snyk.io/snyk-cli/cli-reference
# The results of Snyk Code are then uploaded to GitHub Security Code Scanning
#
# In order to use the Snyk Action you will need to have a Snyk API token.
# More details in https://github.com/snyk/actions#getting-your-snyk-token
# or you can signup for free at https://snyk.io/login
#
# For more examples, including how to limit scans to only high-severity issues
# and fail PR checks, see https://github.com/snyk/actions/

name: Snyk Security

on:
  push:
    branches: ["main" ]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  snyk:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Snyk CLI to check for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the SAST issues to GitHub Code Scanning
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

        # For Snyk Open Source you must first set up the development environment for your application's dependencies
        # For example for Node
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 20

        # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
        # Use || true to not fail the pipeline
      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif # || true

        env:
          # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

        # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
      # - name: Snyk Open Source monitor
      #   run: snyk monitor --all-projects

      #   # Runs Snyk Infrastructure as Code (IaC) analysis and uploads result to Snyk.
      #   # Use || true to not fail the pipeline.
      # - name: Snyk IaC test and report
      #   run: snyk iac test --report # || true

      #   # Build the docker image for testing
      # - name: Build a Docker image
      #   run: docker build -t your/image-to-test .
      #   # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.
      # - name: Snyk Container monitor
      #   run: snyk container monitor your/image-to-test --file=Dockerfile

        # Push the Snyk Code results into GitHub Code Scanning tab
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-code.sarif

'''
'''--- CONTRIBUTING.md ---
# Contributing

## Branching

Branch directly off `main` and use an appropriate prefix (`feat/`, `chore/`, `fix/`, etc)

## PRs

Use [closing keywords](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword) in PR descriptions to automatically close relevent issues when the PR is merged. E.g. `Closes #10`

## Syncing Component Updates with Engine Updates

As much as possible, please update demo components in `apps/demos` in the same PR as the engine modifications which necessitate the component updates. You may wish to get the engine change portion of your PR reviewed and approved before adding the component changes in case review comments lead to revisions to the implementation or resultant syntax

## Local Development

### Environment Setup

#### Node

The two recommended ways to install node are via a node version manager or a VS Code Dev Container. Dev Containers will not be covered here, but feel free to use them if you are familiar with them. Note that they may offer sub-optimal performance on Apple Silicon

Version managers:
- [nvm](https://github.com/nvm-sh/nvm) - most well known and still widely used, but has had issues with performance in the form of significantly increasing shell startup time
- [n](https://github.com/tj/n) - stable alternative. compatible with `.node-version` and `.nvmrc` files
- [fnm](https://github.com/Schniz/fnm) - more recent alternative written in Rust touting improved performance. compatible with `.node-version` and `.nvmrc` files

Check [the root package.json](./package.json) for an engine field defining the minimum supported node version. You should be able to tell your version manager to just install the correct major version to get the latest minor and patch versions. E.g. `nvm install 18` would yield the latest 18.x.x version

#### pnpm

This repo uses [pnpm](https://pnpm.io/) as its package manager, which also handles monorepo workspace management. Although the pnpm website offers multiple installation methods, they result in different major versions being installed. Please install pnpm via `npm install -g pnpm` to be in sync with the team

#### Turborepo

[Turborepo](https://turbo.build/repo) is used for monorepo task orchestration. You do not need to install it yourself nor understand it out of the gate, but it is worth reading up on at some point to understand how our scripts and caching work.

### Running Without Local Components

Run `pnpm dev` from the root of the repo to stand up your local `apps/web` instance. This will allow you to test changes to the web app itself or to test changes to the engine while loading components which are published on chain

### Running With Local Components

If you are going to make changes which require testing by writing or updating components, you can have your locally running `apps/web` instance load components from your local machine:
- Install the latest release of [bos-loader](https://github.com/near/bos-loader) via the script on the Release page
- Run `pnpm dev` from the root of the repo to stand up your local `apps/web` instance
- Run `pnpm serve` from `apps/demos` which will start a bos-loader server and make your local components available to the web app
- Open the web app and modify the browser URL directly to get to `/flags`  
  e.g. if your web at is running at `localhost:3000`, you would navigate to `localhost:3000/flags`
- Set the bos-loader URL which was printed in the bos-loader output

You can now navigate to components by URL, and if that component is made available by bos-loader, it will be loaded from your local machine. In the bos-loader output, you can see the account under which each directory is being served.

`apps/demos/src` is for published demos and tracked by git  
`apps/demos/ignore` is ignored by git and can be used a scratch space for testing components
'''
'''--- README.md ---
# React on Chain R&D

React on Chain (f.k.a. BOS Web Engine or BWE) is an experimental framework aimed at replacing the NEAR BOS VM with a full-featured React(or Preact) environment which would enable access to the greater web ecosystem including NPM dependencies. It is an R&D effort lead by Pagoda and will be considered for production usage once our GitHub [issues tagged as `P0 - Release requirement`](https://github.com/near/bos-web-engine/issues?q=is:open+is:issue+label:%22P0+-+Release+requirement%22) are completed.

**Developers who have created components on BOS should expect a reasonable migration effort to make their components compatible with RoC once it launches. See _"Will BWE be backwards compatible with existing VM components?"_ in the [FAQ](#FAQ) section for more info**

Some core goals:
- ability to import npm packages
- component code is minimally different from vanilla React
- isolation of component execution leverages browser sandboxing (iframes)
- configurable trust model to tune performance when embedded components are known to be safe

Examples of other impactful features we plan to research:
- TypeScript support
- Full web API support (canvas, etc)
- Cross-component global state management

For a more detailed breakdown of the work, see [issues labeled with `Epic`](https://github.com/near/bos-web-engine/issues?q=is:open+is:issue+label:Epic)

## More Info

See our [docs](https://roc-docs.near.dev)!

## FAQ

### Will RoC be backwards compatible with existing BOS components?

No. RoC is a complete re-write of the component runtime and will not be backwards compatible with existing components due to significant architectural differences. Components will be similar in many ways since they are already written with JSX, but RoC code will look much more like vanilla React with some additional patterns on top.

Our primary goal is to build the most capable engine to support complex dapps for a vibrant ecosystem, then we will make efforts to ease the migration of existing work as much as possible. There will be ample discussion before any decisions are made on when and how to start switching to RoC once it is ready.

### Can existing React codebases be used with React on Chain?

While the process to convert an existing React codebase to run on RoC will be significantly easier than the BOS, there will still be some syntax and architecture changes which must be handled manually.

### Other Questions
See our full FAQ [here](https://roc-docs.near.dev/alpha/FAQ)

'''
'''--- apps/demos/.bos-loader.toml ---
paths = [
  { account = "bwe-demos.near", path = "./src" },
  { account = "bwe.near", path = "./ignore" },
]

'''
'''--- apps/demos/README.md ---
# bwe-demos
Demo components for BOS Web Engine

'''
'''--- apps/demos/globals.d.ts ---
import type { JSX } from 'react';

declare global {
  interface BWEComponentConfig {
    id?: string;
    trust?: { mode: string };
  }

  interface BWEComponentProps {
    bwe?: BWEComponentConfig;
  }

  type BWEComponent<TProps = {}> = (props: TProps & BWEComponentProps) => JSX.Element;

  function Component(props: { bwe: { src: string; } & BWEComponentConfig } & Record<any, any>): JSX.Element
}

'''
'''--- apps/demos/ignore/README.md ---
This directory is a scratch pad for components which you do not want to commit. All files in this directory will be ignored by git, but will be served by bos-loader according to the config in [../.bos-loader.toml](../.bos-loader.toml)
'''
'''--- apps/demos/package.json ---
{
  "name": "@bos-web-engine/demos",
  "version": "1.0.0",
  "description": "",
  "main": "",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "serve": "bos-loader -w -c"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@types/react": "^18.2.34"
  }
}

'''
'''--- apps/demos/src/Account.module.css ---
.wrapper {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    min-width: 0;
}

.avatar {
    width: 2rem;
    height: 2rem;
    flex-shrink: 0;
    border: 1px solid var(--color-border-1);
    overflow: hidden;
    border-radius: 100%;

    img {
        display: block;
        object-fit: cover;
        width: 100%;
        height: 100%;
    }
}

.name {
    font: 700 14px/1.5 var(--font-primary);
    min-width: 0;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}
'''
'''--- apps/demos/src/AlphaDashboardPage.module.css ---
.wrapper {
  --color-new: #5bb98b;
  --color-visited: #bcbbb5;

  padding: 2rem;
  min-height: calc(100vh - var(--gateway-header-height));
  background: #f1f0ef;

  hr {
    border: none;
    width: 100%;
    height: 1px;
    background: #e2e1de;
  }

  @media (max-width: 900px) {
    padding: 1rem;
  }
}

.container {
  display: flex;
  flex-direction: column;
  gap: 2rem;
  max-width: 1000px;
  margin: 0 auto;

  @media (max-width: 900px) {
    gap: 1rem;
  }
}

.totals {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  gap: 1rem;
  text-align: center;

  @media (max-width: 1200px) {
    grid-template-columns: 1fr 1fr 1fr;
  }

  @media (max-width: 900px) {
    grid-template-columns: 1fr 1fr;
  }

  @media (max-width: 600px) {
    grid-template-columns: 1fr;
  }
}

.card {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  padding: 1rem;
  background: #fff;
  border-radius: 1rem;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.05), 0 5px 5px rgba(0, 0, 0, 0.05), 0 0 30px rgba(0, 0, 0, 0.05);
}

.cardHeader {
  display: flex;
  align-items: center;
  gap: 1rem;
  justify-content: space-between;
  padding-bottom: 1rem;
}

.cardFooter {
  display: flex;
  align-items: center;
  gap: 1rem;
  justify-content: space-between;
  padding-top: 1rem;
}

.label {
  opacity: 0.7;
  font-size: 0.8rem;
}

.total {
  font-size: 2rem;
  font-weight: 700;
}

.totalLinesAdded {
  font-size: 0.8rem;
  font-weight: 700;
  color: #5bb98b;
}

.totalLinesRemoved {
  font-size: 0.8rem;
  font-weight: 700;
  color: #e5484d;
}

.developers {
  display: flex;
  flex-direction: column;
}

.developer {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 0.25rem;
  border-bottom: 1px solid #e2e1de;
  padding: 0.5rem 0;
  word-break: break-word;

  &:first-child {
    padding-top: 0;
  }

  &:last-child {
    padding-bottom: 0;
    border-bottom: none;
  }

  @media (max-width: 600px) {
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
  }
}

.developerStats {
  display: flex;
  align-items: center;
  gap: 1rem;
  flex-wrap: wrap;
  font-size: 0.8rem;
  font-weight: 700;
}

.sorting {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.checkbox {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  font-size: 0.8rem;
  cursor: pointer;
  color: #6e56cf;
  font-weight: 700;
  ;
}

.components {
  display: flex;
  flex-direction: column;
}

.component {
  border-bottom: 1px solid #e2e1de;
  padding: 0.5rem 0;
  word-break: break-word;

  &:first-child {
    padding-top: 0;
  }

  &:last-child {
    padding-bottom: 0;
    border-bottom: none;
  }

  a {
    display: flex;
    align-items: center;
    gap: 1rem;
    text-decoration: none;
    transition: all 200ms;

    span {
      color: #63635e;
      transition: all 200ms;
    }

    &:link {
      color: var(--color-new);
    }

    &:visited {
      color: var(--color-visited);
    }

    &:hover {
      span {
        color: #21201c;
      }
    }
  }
}

.componentContent {
  display: flex;
  width: 100%;
  align-items: center;
  gap: 1rem;

  @media (max-width: 900px) {
    flex-direction: column;
    gap: 0.25rem;
    text-align: left;
    align-items: flex-start;

    span {
      margin: 0;
    }
  }
}

.legend {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  font-size: 0.65rem;
}

.timestamp {
  margin-left: auto;
  font-size: 0.8rem;
  white-space: nowrap;
}
'''
'''--- apps/demos/src/Button.module.css ---
.button {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  text-align: center;
  text-decoration: none;
  height: 2rem;
  padding: 0 1rem;
  font-size: 0.8rem;
  font-weight: 700;
  gap: 0.75rem;
  line-height: 1;
  cursor: pointer;
  border-radius: 10rem;
  color: var(--color-affirm);
  background: var(--color-surface-1);
  border: 1px solid var(--color-border-1);
  box-shadow: 0 0 0 0px var(--color-focus-outline);
  outline: none;
  transition: all 200ms;

  svg {
    fill: currentColor;
  }

  &:hover {
    border-color: var(--color-action-primary);
  }

  &:focus {
    border-color: var(--violet-12);
    box-shadow: 0 0 0 3px var(--color-focus-outline);
  }

  &:active {
    transition: none;
    border-color: var(--violet-7);
    background-color: var(--violet-2);
  }

  &:disabled {
    opacity: 0.35;
    pointer-events: none;
  }

  &[aria-busy='true'] {
    pointer-events: none;

    * {
      opacity: 0;
    }

    &::before {
      content: '';
      display: block;
      height: 1rem;
      width: 1rem;
      position: absolute;
      inset: 0;
      margin: auto;
      border-radius: 100%;
      border: 2px solid currentColor;
      border-color: currentColor transparent currentColor transparent;
      animation: spin 1.2s linear infinite;
    }
  }
}

.content {
  display: flex;
  gap: 0.5rem;
  align-items: center;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

'''
'''--- apps/demos/src/ComponentSource.module.css ---
.wrapper {
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.codeContainer {
  display: flex;
  flex-direction: column;
  row-gap: 1rem;
}

.entry {
  display: flex;
  flex-direction: row;
  column-gap: 1rem;
  font-size: 1.25rem;

  > input {
    width: 20rem;
  }

  > button {
    background-color: #33b074;
    border: none;
    color: #fff;
    border-radius: .25rem;

    &:hover {
      background-color: #2f7c57;
    }
    
    &:active {
      background-color: #174933;
    }
  }
}
'''
'''--- apps/demos/src/ContainerStorage.module.css ---
.wrapper {
  padding: 10px;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 1rem;
}

.btn {
  max-width: 200px;
}

'''
'''--- apps/demos/src/HelloWorld.module.css ---
.wrapper {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 1rem;
  background-color: #f1f0ef;
  min-height: calc(100vh - var(--gateway-header-height))
}    

.examples {
  display: flex;
  flex-direction: row;
  column-gap: 1rem;
  flex-wrap: wrap;
  row-gap: 1.5rem;
}
  
.card {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 2rem;
  padding: 2rem;
  max-width: 500px;
  background: var(--color-surface-1);
  border-radius: 1rem;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.05), 0 5px 5px rgba(0, 0, 0, 0.05), 0 0 30px rgba(0, 0, 0, 0.05);
  min-width: 25rem;
}

.icon {
  width: 1.5rem;
  height: 1.5rem;
}
  
'''
'''--- apps/demos/src/LandingPage.module.css ---
.wrapper {

  /* theme */
    --font-primary: 'Inter', sans-serif;

    font-family: var(--font-primary);
    line-height: 1.5;
    color: var(--color-text-1);
    color-scheme: light;
    -webkit-font-smoothing: antialiased;

    /* only needed values from our master theme */
    --color-border-1: var(--sand-5);
    --sand-5: #e2e1de;

    --color-surface-3: var(--sand-3);
    --sand-3: #f1f0ef;

    --color-surface-1: #fff;

    --color-text-2: var(--sand-11);
    --sand-11: #63635e;

    --text-s: 400 14px/1.5 var(--font-primary);

    --color-primary-action: var(--violet-9);
    --violet-9: #6e56cf;

    --color-text-1: var(--sand-12);
    --sand-12: #21201c;
  /* end theme */
  
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem;
  min-height: calc(100vh - var(--gateway-header-height));
  background: var(--color-surface-3);

  hr {
    border: none;
    width: 100%;
    height: 1px;
    background: var(--color-border-1);
  }
}

.card {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 2rem;
  padding: 2rem;
  max-width: 500px;
  background: var(--color-surface-1);
  border-radius: 1rem;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.05), 0 5px 5px rgba(0, 0, 0, 0.05), 0 0 30px rgba(0, 0, 0, 0.05);
}

.logo {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-decoration: none;
  color: var(--color-text-2);
  gap: 1rem;
  text-align: center;

  h1 {
    text-transform: uppercase;
    font-size: 1rem;
    letter-spacing: 0.25rem;
  }

  svg {
    width: 3rem;
  }
}

.section {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.label {
  display: flex;
  gap: 0.5rem;
  align-items: center;
  font: var(--text-s);
  color: var(--color-text-2);
  cursor: pointer;
}

.checkbox {
  width:1rem;
  height: 1rem;
}

.link {
  color: var(--color-primary-action);
  font-weight: 700;
  text-underline-offset: 0.15em;
}

.list {
  padding: 0;
  list-style: inside;
}
'''
'''--- apps/demos/src/Markdown.module.css ---
.wrapper {
    display: flex;
    flex-direction: column;
    gap: 1rem;

    a {
        color: var(--color-primary-action);
        font-weight: 700;
        text-underline-offset: 0.15em;
    }
}
'''
'''--- apps/demos/src/Message.module.css ---
.wrapper {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  padding: 1rem;
  background: var(--green-4);
  color: var(green-1);
  border-radius: 0.5rem;

  --green-1: #fbfefc;
  --green-4: #d6f1df;
  --green-10: #2b9a66;
}

.title {
  color: var(--green-10);
}

.message {
  color: var(--green-10);
}

'''
'''--- apps/demos/src/NPM/ModuleEntry.module.css ---
.wrapper {
    --color-primary-action: var(--violet-9);
    --violet-9: #6e56cf;
}

.link {
    color: var(--color-primary-action);
    font-weight: 700;
    text-underline-offset: 0.15em;
}
'''
'''--- apps/demos/src/NPM/Tracker.module.css ---
.wrapper {
  /* theme */
  --font-primary: 'Inter', sans-serif;

  font-family: var(--font-primary);
  line-height: 1.5;
  color: var(--color-text-1);
  color-scheme: light;
  -webkit-font-smoothing: antialiased;

  /* only needed values from our master theme */
  --color-border-1: var(--sand-5);
  --sand-5: #e2e1de;

  --color-surface-3: var(--sand-3);
  --sand-3: #f1f0ef;

  --color-surface-1: #fff;

  --color-text-1: var(--sand-12);
  --sand-12: #21201c;
  /* end theme */

  display: flex;
  flex-direction: column;
  row-gap: 1rem;
  padding: 1rem;
  min-height: calc(100vh - var(--gateway-header-height));
  background: var(--color-surface-1);
}
'''
'''--- apps/demos/src/NPM/Uuid.module.css ---
.wrapper {
  display: flex;
  flex-direction: column;
  row-gap: 1rem;
  padding: 2rem;
}

.input {
  display: flex;
  flex-direction: row;
  column-gap: 0.5rem;
}
'''
'''--- apps/demos/src/Post.module.css ---
.post {
    display: flex;
    flex-direction: column;
    width: 100%;
    gap: 1rem;
    padding: 1rem;
    background: var(--color-surface-1);
    border-radius: 1rem;
    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.05), 0 5px 5px rgba(0, 0, 0, 0.05), 0 0 30px rgba(0, 0, 0, 0.05);

    * {
        min-width: 0;
    }
}

.header {
    display: flex;
    align-items: center;
    gap: 1rem;
    min-width: 0;
    overflow: hidden;
}

.timestamp {
    margin-left: auto;
    font: var(--text-xs);
    color: var(--color-text-2);
    white-space: nowrap;
    flex-shrink: 0;
}
'''
'''--- apps/demos/src/QueryExample.module.css ---
.wrapper {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

'''
'''--- apps/demos/src/SocialFeedPage.module.css ---
.wrapper {
    /* theme */
    --font-primary: 'Inter', sans-serif;

    --text-xs: 400 12px/1.4 var(--font-primary);
    --text-s: 400 14px/1.5 var(--font-primary);
    --text-base: 400 16px/1.5 var(--font-primary);
    --text-l: 400 20px/1.3 var(--font-primary);
    --text-xl: 700 24px/1.3 var(--font-primary);
    --text-2xl: 700 30px/1.3 var(--font-primary);
    --text-3xl: 700 42px/1.3 var(--font-primary);
    --text-hero: 700 72px/1 var(--font-primary);

    --size-max-container-width-xs: 20rem;
    --size-max-container-width-s: 30rem;
    --size-max-container-width-m: 50rem;
    --size-max-container-width-l: 80rem;

    font-family: var(--font-primary);
    line-height: 1.5;
    background: var(--color-surface-1);
    color: var(--color-text-1);
    color-scheme: light;
    -webkit-font-smoothing: antialiased;

    --color-border-1: var(--sand-5);
    --color-text-1: var(--sand-12);
    --color-text-2: var(--sand-11);
    --color-surface-1: #fff;
    --color-surface-2: var(--sand-2);
    --color-surface-3: var(--sand-3);
    --color-surface-4: var(--sand-4);
    --color-focus-outline: var(--violet-6);
    --color-primary-action: var(--violet-9);
    --color-affirm: var(--green-8);
    --color-danger: var(--red-8);

    --sand-1: #fdfdfc;
    --sand-2: #f9f9f8;
    --sand-3: #f1f0ef;
    --sand-4: #e9e8e6;
    --sand-5: #e2e1de;
    --sand-6: #dad9d6;
    --sand-7: #cfceca;
    --sand-8: #bcbbb5;
    --sand-9: #8d8d86;
    --sand-10: #82827c;
    --sand-11: #63635e;
    --sand-12: #21201c;

    --violet-1: #fdfcfe;
    --violet-2: #faf8ff;
    --violet-3: #f4f0fe;
    --violet-4: #ebe4ff;
    --violet-5: #e1d9ff;
    --violet-6: #d4cafe;
    --violet-7: #c2b5f5;
    --violet-8: #aa99ec;
    --violet-9: #6e56cf;
    --violet-10: #654dc4;
    --violet-11: #6550b9;
    --violet-12: #2f265f;

    --red-1: #fffcfc;
    --red-2: #fff7f7;
    --red-3: #feebec;
    --red-4: #ffdbdc;
    --red-5: #ffcdce;
    --red-6: #fdbdbe;
    --red-7: #f4a9aa;
    --red-8: #eb8e90;
    --red-9: #e5484d;
    --red-10: #dc3e42;
    --red-11: #ce2c31;
    --red-12: #641723;

    --green-1: #fbfefc;
    --green-2: #f4fbf6;
    --green-3: #e6f6eb;
    --green-4: #d6f1df;
    --green-5: #c4e8d1;
    --green-6: #adddc0;
    --green-7: #8eceaa;
    --green-8: #5bb98b;
    --green-9: #30a46c;
    --green-10: #2b9a66;
    --green-11: #218358;
    --green-12: #193b2d;
  /* end theme */

    --spacing: 2rem;
    min-height: calc(100vh - var(--gateway-header-height));
    padding: var(--spacing) 1rem;
    background: var(--color-surface-3);

    @media (max-width: 900px) {
        --spacing: 1rem;
    }
}

.container {
    display: flex;
    flex-direction: column;
    gap: var(--spacing);
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
}

.posts {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.footer {
    display: flex;
    justify-content: center;
}
'''
'''--- apps/demos/src/SocialGet.module.css ---
.wrapper {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 1rem;
}

.data {
  white-space: pre-wrap;
}
'''
'''--- apps/demos/src/SocialSet.module.css ---
.wrapper {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 1rem;
}

.success {
  color: green;
}
'''
'''--- apps/demos/src/StateAndTrust/Root.module.css ---
.wrapper {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    padding: 2rem;
    background: #f1f0ef;
    min-height: calc(100vh - var(--gateway-header-height));
}

.container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    max-width: 1000px;
    margin: 0 auto;
}

.grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;

    @media (max-width: 800px) {
        grid-template-columns: 1fr;
    }
}
'''
'''--- apps/demos/src/StateAndTrust/SetParent.module.css ---

'''
'''--- apps/demos/src/StateAndTrust/Shape/Circle.module.css ---
.circle {
    position: relative;
    width: var(--shape-size);
    height: var(--shape-size);
    border-radius: var(--shape-size);
    background: var(--shape-color);
    cursor: pointer;
    transition: all 200ms;

    &:hover {
        transform: scale(1.1, 1.1);
    }
}

.icon {
    position: absolute;
    display: block;
    width: var(--shape-size);
    height: var(--shape-size);
    line-height: var(--shape-size);
    text-align: center;
    inset: 0;
    color: #fff;
    font-weight: 700;
}
'''
'''--- apps/demos/src/StateAndTrust/Shape/Square.module.css ---
.square {
    position: relative;
    width: var(--shape-size);
    height: var(--shape-size);
    background: var(--shape-color);
    cursor: pointer;
    transition: all 200ms;

    &:hover {
        transform: scale(1.1, 1.1);
    }
}

.icon {
    position: absolute;
    display: block;
    width: var(--shape-size);
    height: var(--shape-size);
    line-height: var(--shape-size);
    text-align: center;
    inset: 0;
    color: #fff;
    font-weight: 700;
}
'''
'''--- apps/demos/src/StateAndTrust/Shape/Triangle.module.css ---
.triangle {
    position: relative;
    width: 0;
    height: 0;
    border-left: calc(var(--shape-size) * 0.6) solid transparent;
    border-right: calc(var(--shape-size) * 0.6) solid transparent;
    border-bottom: var(--shape-size) solid var(--shape-color);
    cursor: pointer;
    transition: all 200ms;

    &:hover {
        transform: scale(1.1, 1.1);
    }
}

.icon {
    position: absolute;
    display: block;
    width: var(--shape-size);
    height: var(--shape-size);
    line-height: var(--shape-size);
    text-align: center;
    top: calc(var(--shape-size) * 0.075);
    left: calc(var(--shape-size) * -0.5);
    color: #fff;
    font-weight: 700;
}
'''
'''--- apps/demos/src/StateAndTrust/ShapeSet.module.css ---
.wrapper {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
    justify-content: center;
}
'''
'''--- apps/demos/src/StateAndTrust/TrustTree.module.css ---
.wrapper {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    padding: 2rem;
    background: #fff;
    border-radius: 1rem;
    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.05), 0 5px 5px rgba(0, 0, 0, 0.05), 0 0 30px rgba(0, 0, 0, 0.05);
    user-select: none;
    text-align: center;

    > *:not(:first-child) {
        border-top: 1px solid #e2e1de;
        padding-top: 2rem;
    }
}
'''
'''--- apps/demos/src/TrustStateBugChild.module.css ---
.wrapper {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

'''
'''--- apps/demos/src/TrustStateBugParent.module.css ---
.wrapper {
  display: flex;
  flex-direction: column;
  gap: 1rem;

  p {
    color: red;
    font-weight: 700;
  }
}

'''
'''--- apps/demos/src/TrustedStyleBugChild.module.css ---
.wrapper {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  background: green;
  color: white;
}

'''
'''--- apps/demos/src/TrustedStyleBugParent.module.css ---
.wrapper {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

'''
'''--- apps/demos/src/WalletSelector/CurrentAccount.module.css ---
.wrapper {
    padding: 1rem;
    display: flex;
    flex-direction: column;
    row-gap: 1rem;
}

.entryRow {
    display: flex;
    flex-direction: row;
    column-gap: 0.5rem;

    span {
        width: 10rem;
    }

    span::after {
        content: ':';
    }
}
'''
'''--- apps/demos/src/WalletSelector/SignAndSendTransaction.module.css ---
.wrapper {
    padding: 1rem;
    display: flex;
    flex-direction: column;
    row-gap: 1rem;
}

.entryRow {
    display: flex;
    flex-direction: row;
    column-gap: 0.5rem;

    span {
        width: 10rem;
    }

    span::after {
        content: ':';
    }
}
'''
'''--- apps/demos/src/WalletSelector/SignMessage.module.css ---
.wrapper {
    padding: 1rem;
    display: flex;
    flex-direction: column;
    row-gap: 1rem;
}

.entryRow {
    display: flex;
    flex-direction: row;
    column-gap: 0.5rem;

    span {
        width: 10rem;
    }

    span::after {
        content: ':';
    }
}
'''
'''--- apps/demos/tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES6",
    "jsx": "preserve",
    "allowJs": true,
    "module": "ESNext"
  }
}
'''
'''--- apps/docs/README.md ---
# BOS Web Engine Docs

### Local Development

```
$ pnpm start
```

This command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.

### Build

```
$ pnpm build
```

This command generates static content into the `build` directory and can be served using any static contents hosting service.
'''
'''--- apps/docs/babel.config.js ---
module.exports = {
  presets: [require.resolve('@docusaurus/core/lib/babel/preset')],
};

'''
'''--- apps/docs/docs/alpha/FAQ.md ---
---
sidebar_position: 5
---
# FAQ

## General

### When will the previous BOS VM stop being supported?

The transition will occur in a few stages.

There will be a beta period where both the VM and BWE are supported while we ensure BWE is stable and performant. During this period, we will encourage developers to build on BWE but breaking changes are more likely to occur as improvements to the engine are identified.

Once we are confident in the production readiness of BWE, we will start a grace period during which the VM will continue to be supported while the community works to migrate existing BOS components to BWE. We will assist in this with ample guidance and hopefully some tooling to make the process easier.

After the grace period, the VM will be deprecated and removed from the BOS runtime, since the security guarantees it provides are not sufficient for the future of BOS.

## Building Components with BWE

### What language and framework are BOS components written in?

BOS components are written in TypeScript or JavaScript and use Preact as the rendering engine with the React compatibility layer enabled. One of the main goals of BWE is to have syntax that is minimally different from vanilla (p)react, and only stray from it where necessary to accommodate the architecture of the engine and sandbox communication patterns.

### What non-BOS code can I import?

See the [npm section of our imports documentation](/alpha/building-decentralized-frontends/imports#npm) for full details. You can attempt to import any npm package, but not all will work due to the sandboxed environment.

### What are the performance limits? How many sandboxed components can reasonably be rendered on a page?

We don't have hard numbers to share here since our engine is constantly evolving, but the Social Feed app in our [demo list](http://bwe.near.dev) is a great example of a page with many components. We've found that the load time is reasonable for real world usage even on mobile devices with lower than average memory.

### Are browser APIs like Canvas supported?

We plan for these to be supported, but they aren't yet.

Once they are supported, there may be some caveats since access to browser APIs must be proxied— with isolation in mind— from sandbox code to the outer window.

If you have a strong need for a particular browser API, please let us know by [opening an Discussion](https://github.com/near/bos-web-engine/discussions/new?category=misc) on our GitHub repository.

Tracking: [#20](https://github.com/near/bos-web-engine/issues/20)

### Can I use other frontend frameworks?

No, BWE is implemented by tying directly into the render pipeline of Preact. Discussions have occurred about the feasibility of supporting other frameworks, but it would be a sizeable engineering effort.

You may be able to import component built in other frameworks if they can be bundled as Web Components

### Can I use web components?

Theoretically this is possible since Preact supports web componentsm, but we have not tested this and it is not officially supported.

### What about Shadow Realms?

Shadow Realms is a proposed browser standard which would offer some of the same benefits as BWE. Implementation of Shadow Realms is occuring slowly and it is unclear when it will be available in all major browsers, and whether it would be possible to use it in a way which is compatible with the BWE architecture. We will continue to monitor the progress of Shadow Realms.

### How do I interact with the external services?

You can directly call out to external services with the browser-native [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) or any other request library, but keep in mind that external service integrations can diminish the decentralization benefits of BOS if they are not decentralized themselves.

### Can my code editor handle component syntax?

Most component code is standard TSX which editors like VS Code can handle, but type definitions will be missing until a system is implemented to provide them.

## Architecture

### Why is isolation important? What are the attack vectors?

To achieve the high level of composability that is a central goal of BOS, developers must be able to embed components from other authors without the burden of personally auditing the code for malicious behavior. This is especially true if components are embedded dynamically and it is impossible for the dapp developer to know in advance which components will be loaded (e.g. a social post feed which can render components inline).

**Example attack**
Bob develops a defi dapp which has a button to initiate a transaction to transfer some value (e.g. fungible tokens). He then embeds a seemingly innocent BOS component from another author in his dapp— perhaps it is a UI component to render a nice accordion element. In that accordion element is code which directly modifies the DOM of the previously mentioned button, and causes it to present users with a transaction to transfer value to the malicious component author instead of wherever it was supposed to go. A user goes to Bob's defi dapp and clicks the transfer button, but doesn't realize the transaction they are confirming has been tampered with.

### How are off-chain dependencies decentralized?

Packages are loaded via CDNs, and most CDNs have decentralization architecture built in. That being said, it is possible for a CDN to go offline or be blocked in a particular region. In this case, the dependency will fail to load which may cause the component to fail to render.

In the spirit of progressive decentralization, BWE will launch with dependencies being powered by a single npm CDN. In the future, we will explore the following:
- a package registry hosted on an inherently decentralized network (e.g. IPFS)
- creating CDN-agnostic import syntax where developers can specify the package and version they require then leave resolution up to the gateway at runtime

### How do cross-components function calls work?

Containers maintain a set of callbacks, defined within the container, which are available to be "invoked" across container boundaries. This includes functions passed via `props` and function arguments passed to `props` functions. When an external container needs to invoke one of these callbacks, the external container requests the outer application to send a message to the target container identifying the method and arguments.

See [architecture.md](/alpha/further-reading/architecture.md#component-callbacks) for more details.

### What happens when I set an `onClick` function and it gets called?

When a DOM event handler (e.g. `onClick`, `onChange`) is fired, the outer application sends a message to the container to which the DOM element belongs. This is related to how container callbacks are invoked, but DOM callbacks are unique in that:
- the invocation originates in the outer application rather than from another container
- the callback is always invoked with the `event` object, for which only a subset of the fields are sent since `event` is not serializable
'''
'''--- apps/docs/docs/alpha/alpha-test.md ---
---
slug: /
sidebar_position: 1
---

# BWE Alpha Test

## Welcome 🎉

Thank you for participating in the alpha test for BOS Web Engine **(actual release name TBD)**; an improved execution layer for NEAR's decentralized front-end components.

Significant effort has been dedicated to this project, reaching a stage where most of the essential features are established, laying the groundwork for the development of more sophisticated and refined applications. BWE is on the verge of achieving complete parity with the former VM, while also providing substantial additional functionalities.

That being said, this is an **alpha** so rough edges and bugs should be expected. We appreciate your help in identifying these issues so we can quickly move towards a stable release. 🙏

:::danger Warning
Please use **non-vital NEAR accounts** during the alpha test since we have not yet initiated our security audit program. Avoid using accounts with significant balances, elevated permissions, or sentimental addresses.
:::

---

## Timeline

BWE alpha test begins on Feb 26, 2024 and runs for several weeks as we perform rigorous testing both internally and with community members such as yourself. 🙏

---

## How to get involved

    - [Test](#test) 
    - [Ask Questions & Get Support](#support) 
    - [Give Feedback](#give-feedback)

---

### Test

Using the [BWE Sandbox IDE](https://bwe-sandbox.near.dev), try any of the following:

- Write components that aren't possible to build using the current VM
- Write components that test the limits of BWE
- Migrate your existing components from the VM to BWE
- Migrate vanilla React components to BWE
- Test npm package imports

:::tip npm Package Support
A wide variety of npm packages should work out of the box with BWE, especially non-UI packages. See the [npm section of our imports documentation](/alpha/building-decentralized-frontends/imports#npm) for full details.

**Note:** You can attempt to import any npm package, but not all will work due to the sand boxed environment. We are using this testing period to determine which packages will work and cataloging them in docs.
:::

:::warning Not Supported Yet

    - `useRef` (refs not exposed to outer application)
    - `useContext`
    - `<canvas>` and other Web APIs
    - development with local code editor and bos-loader

:::

:::info Not Planned to be Supported
    - Direct DOM manipulation
    - Interoperability between BWE and the previous VM
:::

We'd love to see what you build and hear about your experience! Please share what you build with us and the community! 🙏

---

### Support

The BWE team will be available in Telegram and GitHub Discussions to answer any questions you might have and assist in troubleshooting.

- [Telegram Group](https://t.me/+IlVl5uEsGH83YTEx)
- [GitHub Discussions](https://github.com/near/bos-web-engine/discussions)

---

### Give Feedback

There are three main avenues for giving feedback. Please choose whichever is most convenient for you:

    - [BWE Feedback Form](https://forms.gle/5w16G5wix4ezWx4y5) - Easy google feedback form
    - [GitHub Discussions](https://github.com/near/bos-web-engine/discussions/new?category=alpha-test-feedback) - Alpha feedback section of BWE's GH Discussions
    - [GitHub Issues](https://github.com/near/bos-web-engine/issues/new) - Found a bug, performance issue, or have a feature request? [File it here.](https://github.com/near/bos-web-engine/issues) The more info the better, but don't let that be a blocker from filing one! If you only have time to file something quick, please do so and we can follow up for more details later 🙂

:::tip

We are looking for feedback in the following areas:

- Performance
- Syntax
- Documentation
- Level of effort to migrate components to BWE
- Missing capabilities
- Overall developer experience (DevX)
:::

'''
'''--- apps/docs/docs/alpha/building-decentralized-frontends/essential-syntax.md ---
---
sidebar_position: 1
---

# Essential Syntax

This document describes the essential syntax required for creating Components to run on the BOS Web Engine. All BOS developers should familiarize themselves with the contents of this document.

## Component Export

Every BWE component must have a valid export. This can be a named export where the name is `BWEComponent` or a default export. If you are not opinionated about your exports, we recommend following the example set by the boilerplate code generated in the sandbox.

## Component IDs

When embedding multiple instances of the same BWE Component at the same level within a parent Component, each child must be given an explicit ID in order for the engine to differentiate between them during renders. This is similar to the `key` prop in React, but is separately required by BOS Web Engine.

A very common use case where this is encountered is when rendering a `Component` within a `.map()` call on an array of data.

As a best practice, we recommend new Components be written with a meaningful `id` value to avoid potential collisions in the
future.

### Examples

Assuming we have an import of `import Child from near://bwe-demos.near/Child`:

---

```jsx
<Child />
```
✅
The automatically generated ID is sufficient to identify a single child Component.

---

```jsx
<Child />
<Child id="2nd" />
```
✅
The second Component has an explicit `id` value, preventing any collisions. While this does work, it would be much less brittle
if both child Components had unique `id` values.

---

```jsx
<Child id="1st" />
<Child id="2nd" />
```
✅✅
Ideal, makes future maintenance easier.

---

```jsx
<Child />
<Child />
```
❌ 
Without unique `id` values, child Components cannot be differentiated by the outer application.

---

<details>
  <summary>More Details</summary>
  <p>To ensure Components are uniquely addressable by the application, BOS Web Engine uses a Component's ancestors' path names as a prefix to create a base Component ID. So for a child Component `Child` under `Parent`, which in turn is a child under `Root`, the base Component ID would include a concatenation of `Child>Parent>Root`.</p>
<p>Rendering multiple instances of the same Component under the same Parent should be considered undefined behavior.</p>
</details>
'''
'''--- apps/docs/docs/alpha/building-decentralized-frontends/imports.md ---
---
sidebar_position: 3
---

# Imports

## npm

When importing npm packages, they are fetched in the user's browser from esm.sh, an npm package CDN.

**This means that you can import npm packages directly in your BWE component without having to install them.**

Note that not every npm package will function within the BWE environment

### Supported Packages

By default, `preact` and `react` (via `preact/compat`) are available via the container's `importmap`.

The BWE team has a tracker [here](https://bos-web-engine.vercel.app/webengine.near/NPM.Tracker) which categorizes known compatibility of packages. Expect the list to grow over time.

If you have certain packages which you would like to use within BWE, please chime in on [this thread](https://github.com/near/bos-web-engine/discussions/166)

#### Expected Incompatibility

Some packages are expected to not work within BWE due to its architecture and security model. Packages which rely on the following are expected to not work:

- direct access to the `window` or `document` objects
- usage of certain React hooks, in particular `useContext` and DOM manipulation via `useRef`
- state management across iframes
- React implementation details not in parity with Preact 

In general, external component libraries (e.g. Chakra UI) and state management libraries are not well-supported in the current version.

## BWE Components

Other BWE components can be imported and embedded within your component.

### Dedicated Import Syntax

Any BWE Component can be imported using the following syntax

```
near://<account-id>/<Component>
```

e.g.
```tsx
import Message from 'near://bwe-web.near/Message'

// ...

// in use
<Message />
```

Since components use default exports, you can import them using any name you like. Note the difference between the imported name and the component path:

```tsx
import Foo from 'near://bwe-web.near/Bar'
```

### Relative Imports

Components published by the same NEAR account and in the same directory can be imported using relative paths.

```tsx
import Foo from './Foo'
```

This only works for `./` paths. Other relative imports such as `../Foo` are not implemented.

:::tip
Directory support is a work in progress. If you place `/` separators in your component name when working in the sandbox, it will be treated as a directory separator.

From a component named `Foo/Bar.tsx`, relative imports will only be resolvable for other components starting with `Foo/`.
:::

'''
'''--- apps/docs/docs/alpha/building-decentralized-frontends/index.md ---
---
sidebar_position: 3
---

# Build

> Creating Decentralized Frontends and components w/ BOS Web Engine

A BWE component looks, for the most part, like a standard React component. There are some syntactical variations and essential enhancements to adapt seamlessly to the engine's framework.

## Terms

- **Outer Window Application (OWA)** - The application responsible for rendering Components and brokers messages between containers.

- **Components** - The functions returning JSX to be rendered in BOS Web Engine. Their source is stored on chain in the SocialDB contract.

- **Root Component** - The top-level Component loaded by the outer application.

- **Containers** - Provide the runtime context for one or more Components. They are implemented as sandboxed `<iframe>`s,
communicating with other containers via the outer window application's `window.postMessage` method.

'''
'''--- apps/docs/docs/alpha/building-decentralized-frontends/optimization.md ---
---
sidebar_position: 5
---

# Optimization

The options presented here can lead to decreased security and should only be used with clear understanding of the implications.

## Trust Mode

The default trust model of BWE is to encourage risk-free composability by sandboxing all embedded BWE components by default. There are cases where this might not be necessary, such as:
- embedding your own components
- embedding components from other developers you trust
- embedding components you have audited for malicious behavior and are locked to a specific version

If a component does not need to be sandboxed, you can change the `trust` mode on the embed and the component will be directly executed in the same container instead of having a separate sandboxed iframe created for it. This can yield significant performance improvements for pages which render many components (e.g. social feeds).

There are two modes for loading a Component: **sandboxed** (default) and **trusted**. These modes make it possible to define the boundaries within Component trees, granting developers more control over the balance of performance and security in their applications.

### Sandboxed

Sandboxed Components are run in a dedicated container, independent of their parent Component's context. All communication
between parent and child (e.g. re-rendering, `props` method invocation) is handled via `postMessage` communication through
the outer application.

If no trust modes are specified, every Component is sandboxed in a separate container.

### Trusted

When a Component is loaded as **trusted**, the parent Component inlines the child Component definition into its
own container and renders it as a child DOM subtree.

In short, embedding a component as trusted removes some application overhead but gives the embedded component the ability to read or manipulate the parent component's state and DOM.

### Usage

By default, Components are loaded in **sandboxed** mode. To change the loading policy, configure the `trust` prop with a desired `mode` property

The following modes are supported:
 - **sandboxed** (default): load this Component in its own container
 - **trusted**: load this Component within the parent Component
 - **trusted-author**: extends the **trusted** mode by inlining this Component and all descendant Components from the same author

#### Sandboxed
```jsx
import Foo from 'near://bwe-demos.near/Foo'

// ...

{/* omitting the `trust` prop would have the same behavior */}
<Foo trust={{ mode: "sandboxed" }} src="ex.near/Parent" />
```

#### Trusted
```jsx
import Foo from 'near://bwe-demos.near/Foo'

// ...

<Foo trust={{ mode: "trusted" }} src="ex.near/Parent" />
```

#### Trusted Author
```jsx
import Foo from 'near://bwe-demos.near/Foo'

// ...

{/* Root Component  */}
<Foo trust={{ mode: "trusted-author" }} src="ex.near/Parent" />

{/* Parent Component  */}
<>
  {/* trusted: same author  */}
  <Foo src="ex.near/X" id="x-implicit" />

  {/* trusted: same author, explicitly trusted; note that descendants of Y authored by ex.near will still be trusted */}
  <Foo src="ex.near/Y" trust={{ mode: "trusted" }} id="y" />

  {/* sandboxed: explicitly sandboxed, same author behavior is overridden */}
  <Foo src="ex.near/X" trust={{ mode: "sandboxed" }} id="x-sandboxed" />

  {/* sandboxed: different author, no trust specified */}
  <Foo src="mal.near/X" id="x-mal" />
</>
```

### Notes

- The root Component is always loaded as **sandboxed**.
- The `trust` prop must be specified as an object literal with literal values; i.e. the value may not contain any variables
    or be returned from a function. Loading happens prior to rendering, so the trust must be statically parseable. Any
    Component renders with a `trust` value that cannot be parsed statically are treated as **sandboxed**.
'''
'''--- apps/docs/docs/alpha/building-decentralized-frontends/styling.md ---
---
sidebar_position: 2
---

# Styling (CSS)

## CSS Modules

You can currently style BWE components with CSS modules. Each component has an associated CSS file which is saved on-chain alongside component source code.

In the sandbox, a CSS module is created automatically for every component.

Two syntaxes are supported for CSS modules imports. In the component `Foo.tsx`, you can use either of the following:
```tsx
import s from './Foo.module.css';
```

```tsx
import s from './styles.module.css';
```

:::warning
Although the second example above is what you will find in our starter code, we recommend using the pattern from the first example since it may be the only version that is allowed once local code editor support is implemented.
:::

### Features

#### CSS Nesting

CSS Nesting is supported. Here is an example of using it to style child elements and pseudo-classes:

```css
.entry {
  padding: 1rem;

  > input {
    width: 20rem;
  }

  > button {
    background-color: #33b074;

    &:hover {
      background-color: #2f7c57;
    }
    
    &:active {
      background-color: #174933;
    }
  }
}
```

### Learn from Our Examples

From the sandbox, use the search icon in left sidebar to pull up `webengine.near` components like `webengine.near/SocialFeedPage`

## CSS-in-JS

We have CSS-in-JS support [on our roadmap](https://github.com/near/bos-web-engine/issues/7), but it is not yet available.
'''
'''--- apps/docs/docs/alpha/building-decentralized-frontends/versioning.md ---
---
sidebar_position: 4
---

# Versioning

:::warning Not Yet Available
Versioning is currently being worked on by the BWE team and is not yet available for use. **Current behavior is that the latest version of a component is always used.**
:::

BWE Components will support versioning based on blockheight at which changes were published. This resembles commits in a git repository.

Default behavior will be to use the latest version of a component **at the time of publish of the parent component**. It will be possible to specify that the current latest version of an embedded component should be loaded instead.

<details>
  <summary>Why change the default behavior from BOS components?</summary>
  <p>Locking embedded components to their state at time of publish will lead to more predictable frontend behavior across the ecosystem. We have often seen broken UI as a result of component authors not locking their embeds to a specific version and the embedded component changing in functionality or presentation.</p>
</details>
'''
'''--- apps/docs/docs/alpha/further-reading/architecture.md ---
# Architecture

### BOS Component Loading
BOS Components are loaded in BOS Web Engine by way of a client-side pipeline, responsible for BOS Component source
fetching, TSX transpilation, and Component composition. A web worker services requests from the outer application to
load new Components, caching the Component source and transpiled wrapper function. The worker responds with the wrapped
source code, which is used to initialize containers with iframes.

![source-compile-container](/img/source-compile-container.png)
_High-level overview of the flow from BOS Component source to Component container._

### Component Containers
Containers are abstractions around sandboxed iframes, responsible for managing the lifecycle of a single root Component.
The outer application renders a container for each root Component, rendering the container's hidden iframe and executing
the container code in the iframe's `srcDoc` field.

Containers rely on Preact for Component lifecycle management. When a Component has updated, options hooks set in Preact
serialize the rendered node and send it to the outer application. The initial render request is explicitly triggered upon
container initialization. This Preact integration enables the use of React hooks within BOS Components.

Interactions between containers are facilitated by the iframe parent's _window_ object, e.g. `window.parent.postMessage()`. 
The outer application and individual containers register event handlers on this _window_ object to facilitate bidirectional
message passing to communicate renders and broker inter-Component callbacks. As a consequence of this, all inter-Component
communication is inherently asynchronous.

![Container to Outer Window Application](/img/container-owa.png)

_Component containers manage root Components, which may be under another Component in the DOM tree despite being sandboxed._

### Trust
Component Trust ensures that BOS Components retain control over composability with other Components. When rendering a BOS
Component in Web Engine, the **trust mode** determines how to load the Component:
- **trusted** loads the Component inside the same container
- **sandboxed** loads the Component as a root Component in a new container

Trust mode does not impact the rendered output in the outer application, but has implications for performance and security.
In particular:
- Trusted Components invoke methods directly within the same context. Sandboxed Components are subject to performance overhead
inherent in proxying callbacks through the outer application.
- Sandboxed Components are loaded dynamically, and their paths do not need to be known at build time. Trusted Components
incur a loading penalty upfront when fetching and parsing source for multiple Components, and must use statically-analyzable
paths to guarantee all Components are known at build time.
- Sandboxed Components run in their own sandboxed iframe container and may only communicate with other containers using a
well-defined message passing interface. Trusted Component trees run in the same context, with access to the same references.

Component Trust is best employed to create logical trust boundaries in a BOS application, for instance between Components
from different accounts. By default, BOS Components are loaded as **sandboxed**; loading a Component as **trusted** requires
explicit configuration.

![trusted-source-compile-container](/img/source-container-trusted.png)
_Trusted Components are included in the same container context as their parent Component._

### Component Callbacks
Callbacks between Components (e.g. functions passed via `props`) are supported in BOS Web Engine, though the exact behavior is
dependent on whether the Components are within the same container. Callbacks between two Components _in the same container_
work without constraints, but there are caveats for callbacks _between containers_ as the caller and callee exist in completely
independent contexts. Under the hood, these inter-container callbacks must be invoked (and return data) using the message passing interface
provided by `window.postMessage`, and are subject to some constraints accordingly:
- Arguments may only use types compatible with the [structured clone algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm).
While functions cannot be provided as arguments directly, references to callbacks in other containers may be passed, allowing
BOS Components to invoke functions on `props` with function arguments.
- Inter-container callbacks are inherently asynchronous, for which a Promise-based interface is provided to abstract away
the underlying event-based communication.

'''
'''--- apps/docs/docs/alpha/further-reading/index.md ---
---
sidebar_position: 4
---

# Further Reading
'''
'''--- apps/docs/docs/alpha/overview.md ---
---
sidebar_position: 2
---

# BWE Overview

BOS Web Engine (BWE) is the next-gen decentralized frontend execution environment.

BWE brings decentralized frontend development significantly closer to standard React development and provides enhanced, browser-backed security.

Key Features:
- Upgrades developer experience (TypeScript, improved debugging)
- Access to more powerful components (npm packages, true hooks, standard JS environment)
- Performance optimization & tuning (configurable trust model)
- Increased security guarantees using iframe sandboxing, removing the burden of code-level security rules

:::note
"BOS Web Engine" is a working title and will change before launch
:::

## Example Component
`Foo.tsx`
```tsx
// import CSS module
import s from './Foo.module.css';

// import another BWE component
import Account from 'near://webengine.near/Account'

// import a BWE component from the same account using a relative path
import Post from './Post'

type Props = {
  message?: string;
};

function Foo({ message = "Hello!" }: Props) {
  return (
    <div className={s.wrapper}>
      <Account props={{accountId: 'bwe-demos.near'}} />
      <Post props={{content: 'Hello World'}} />
      <p>{message}</p>
    </div>
  );
}

export default Foo as BWEComponent<Props>;
```

`Foo.module.css`
```css
.wrapper {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}
```

## How it Works

1. Component code is executed with Preact in hidden iframes with sandboxing features enabled
2. When the component in the iframe has performed a render, it emits an event with the DOM produced
3. The outer window application (OWA) listens for render events from all iframes and stitches their DOM outputs together onto the visible page

Javascript runs in sandboxes, HTML/CSS is returned

![Container to Outer Window Application](/img/container-owa.png)
'''
'''--- apps/docs/docs/alpha/tools.md ---
---
sidebar_position: 6
---

# Tools

Currently, the only tool which supports authoring and publishing BWE components is the BWE sandbox. This is a web-based development environment built by the BWE team at Pagoda.

The sandbox can be found at [bos-web-engine-sandbox.vercel.app](https://bos-web-engine-sandbox.vercel.app/)

Code for the sandbox can be found under `apps/sandbox` in the BWE repository [here](https://github.com/near/bos-web-engine/tree/main/apps/sandbox)

We look forward to supporting other tool developers as they adopt BWE.

<details>
  <summary>Want to build tooling for BWE?</summary>
  <p>The main thing to know is that BWE is still highly subject to change as we receive feedback on DevX and functionality. If you don't mind potential rework due to engine changes and want to start building now:</p>
  <p>Our sandbox package was built from the start to be reusable in other web implementations. Feel free to fork our project or pull out pieces you need. In the future we hope to publish many of our packages on NPM to make it easier to receive future updates.</p>
</details>
'''
'''--- apps/docs/docusaurus.config.ts ---
import { themes as prismThemes } from 'prism-react-renderer';
import type { Config } from '@docusaurus/types';
import type * as Preset from '@docusaurus/preset-classic';

const config: Config = {
  title: 'BOS Web Engine Docs',
  tagline: 'Next-gen decentralized frontend execution environment',
  favicon: 'img/favicon.ico',

  // Set the production url of your site here
  url: 'https://bos-web-engine-docs.vercel.app',
  // Set the /<baseUrl>/ pathname under which your site is served
  // For GitHub pages deployment, it is often '/<projectName>/'
  baseUrl: '/',

  onBrokenLinks: 'throw',
  onBrokenMarkdownLinks: 'warn',

  // Even if you don't use internationalization, you can use this field to set
  // useful metadata like html lang. For example, if your site is Chinese, you
  // may want to replace "en" with "zh-Hans".
  i18n: {
    defaultLocale: 'en',
    locales: ['en'],
  },

  presets: [
    [
      'classic',
      {
        docs: {
          routeBasePath: '/', // Serve the docs at the site's root
          sidebarPath: './sidebars.ts',
        },
        blog: false,
        theme: {
          customCss: './src/css/custom.css',
        },
      } satisfies Preset.Options,
    ],
  ],

  themeConfig: {
    image: 'img/social-card.svg',
    navbar: {
      title: 'BOS Web Engine Docs',
      logo: {
        alt: 'NEAR logo',
        src: 'img/logo.svg',
        srcDark: 'img/logo_rev.svg',
      },
      items: [
        {
          type: 'docSidebar',
          sidebarId: 'alpha',
          position: 'left',
          label: 'Alpha Test',
        },
        {
          href: 'https://bwe.near.dev',
          label: 'Gateway / Demos',
          position: 'left',
        },
        {
          href: 'https://bwe-sandbox.near.dev',
          label: 'Sandbox',
          position: 'left',
        },
        {
          href: 'https://github.com/near/bos-web-engine',
          label: 'GitHub',
          position: 'right',
        },
      ],
    },
    // Keeping for reference:
    //
    // footer: {
    //   style: 'dark',
    //   links: [
    // {
    //   title: 'Docs',
    //   items: [
    //     {
    //       label: 'Tutorial',
    //       to: '/docs/intro',
    //     },
    //   ],
    // },
    // {
    //   title: 'Community',
    //   items: [
    //     {
    //       label: 'Stack Overflow',
    //       href: 'https://stackoverflow.com/questions/tagged/docusaurus',
    //     },
    //     {
    //       label: 'Discord',
    //       href: 'https://discordapp.com/invite/docusaurus',
    //     },
    //     {
    //       label: 'Twitter',
    //       href: 'https://twitter.com/docusaurus',
    //     },
    //   ],
    // },
    // {
    //   title: 'More',
    //   items: [
    //     {
    //       label: 'Blog',
    //       to: '/blog',
    //     },
    //     {
    //       label: 'GitHub',
    //       href: 'https://github.com/facebook/docusaurus',
    //     },
    //   ],
    // },
    // ],
    // copyright: `Copyright © ${new Date().getFullYear()} Pagoda`,
    // },
    prism: {
      theme: prismThemes.github,
      darkTheme: prismThemes.dracula,
    },
  } satisfies Preset.ThemeConfig,
};

export default config;

'''
'''--- apps/docs/package.json ---
{
  "name": "docs",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "docusaurus": "docusaurus",
    "start": "docusaurus start --port 3001",
    "build": "docusaurus build",
    "swizzle": "docusaurus swizzle",
    "deploy": "docusaurus deploy",
    "clear": "docusaurus clear",
    "serve": "docusaurus serve",
    "write-translations": "docusaurus write-translations",
    "write-heading-ids": "docusaurus write-heading-ids",
    "typecheck": "tsc"
  },
  "dependencies": {
    "@docusaurus/core": "3.1.1",
    "@docusaurus/preset-classic": "3.1.1",
    "@mdx-js/react": "^3.0.0",
    "clsx": "^2.0.0",
    "prism-react-renderer": "^2.3.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  },
  "devDependencies": {
    "@docusaurus/module-type-aliases": "3.1.1",
    "@docusaurus/tsconfig": "3.1.1",
    "@docusaurus/types": "3.1.1",
    "typescript": "~5.2.2"
  },
  "browserslist": {
    "production": [
      ">0.5%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 3 chrome version",
      "last 3 firefox version",
      "last 5 safari version"
    ]
  }
}

'''
'''--- apps/docs/sidebars.ts ---
import type { SidebarsConfig } from '@docusaurus/plugin-content-docs';

/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.
 */
const sidebars: SidebarsConfig = {
  // By default, Docusaurus generates a sidebar from the docs folder structure
  // docs: [{ type: 'autogenerated', dirName: 'docs' }],
  alpha: [{ type: 'autogenerated', dirName: 'alpha' }],

  // But you can create a sidebar manually
  /*
  tutorialSidebar: [
    'intro',
    'hello',
    {
      type: 'category',
      label: 'Tutorial',
      items: ['tutorial-basics/create-a-document'],
    },
  ],
   */
};

export default sidebars;

'''
'''--- apps/docs/src/css/custom.css ---
/**
 * Any CSS included here will be global. The classic template
 * bundles Infima by default. Infima is a CSS framework designed to
 * work well for content-centric websites.
 */

/* You can override the default Infima variables here. */
:root {
  --ifm-color-primary: #2e8555;
  --ifm-color-primary-dark: #29784c;
  --ifm-color-primary-darker: #277148;
  --ifm-color-primary-darkest: #205d3b;
  --ifm-color-primary-light: #33925d;
  --ifm-color-primary-lighter: #359962;
  --ifm-color-primary-lightest: #3cad6e;
  --ifm-code-font-size: 95%;
  --docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.1);
}

/* For readability concerns, you should choose a lighter palette in dark mode. */
[data-theme='dark'] {
  --ifm-color-primary: #25c2a0;
  --ifm-color-primary-dark: #21af90;
  --ifm-color-primary-darker: #1fa588;
  --ifm-color-primary-darkest: #1a8870;
  --ifm-color-primary-light: #29d5b0;
  --ifm-color-primary-lighter: #32d8b4;
  --ifm-color-primary-lightest: #4fddbf;
  --docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.3);
}

'''
'''--- apps/docs/static/img/logo.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1656 567">
  <g>
    <path d="m703.42,157.72c-26.61,0-45.96,6.29-62.4,20.8l-29.03,25.15c-2.42,1.94-7.26,3.39-10.64.48-3.39-2.9-3.87-6.77-.97-10.64l15.48-23.22c2.42-3.39.49-7.74-3.87-7.74h-37.25c-4.35,0-7.74,3.39-7.74,7.74v226.4c0,4.35,3.39,7.74,7.74,7.74h38.7c4.35,0,7.74-3.39,7.74-7.74v-127.71c0-58.53,48.86-67.72,67.24-67.72,39.18,0,53.21,28.06,53.21,49.34v146.09c0,4.35,3.39,7.74,7.74,7.74h38.7c4.35,0,7.74-3.39,7.74-7.74v-150.93c0-54.18-35.32-88.04-92.4-88.04Z"/>
    <path d="m953.5,156.75c-74.98,0-122.87,45.96-122.87,108.36v34.35c0,65.79,47.89,110.78,122.87,110.78,66.27,0,112.71-34.35,117.55-80.79.49-4.84-2.9-8.22-7.74-8.22h-37.73c-3.39,0-6.29,1.94-7.26,5.32-4.84,15.48-27.57,38.7-64.82,38.7s-72.08-27.09-71.6-65.79l.49-43.05c.48-32.41,34.35-54.66,71.11-54.66,33.38,0,65.79,18.87,69.17,49.83h0c.28,3.58-2.18,6.81-5.71,7.49l-108.46,21.05c-4.35.97-7.74,4.84-7.74,9.67v.48c0,4.35,4.35,8.22,10.64,8.22h155.77c4.28,0,7.74-3.47,7.74-7.74v-30.47c0-57.56-49.83-103.52-121.42-103.52Z"/>
    <path d="m1223.42,156.75c-60.47,0-112.71,35.31-112.71,81.75,0,3.87,3.39,6.77,7.74,6.77h39.18c3.87,0,6.77-2.9,7.26-6.77,3.87-21.28,29.51-36.76,57.08-36.76,32.89,0,55.15,20.32,55.15,55.15v42.09c0,43.05-31.93,64.82-71.6,64.82-30.96,0-48.86-11.61-48.86-30.48,0-16.45,8.71-30.48,44.5-38.7l51.76-14.03c5.32-1.45,7.26-5.81,6.29-10.64-.48-3.87-4.83-5.81-8.71-5.81h-53.69c-45.47,0-91.43,29.02-91.43,71.59v6.77c0,43.54,41.12,66.27,88.04,66.27,29.99,0,55.63-11.61,71.59-25.15l23.71-20.32c3.87-3.39,7.74-3.39,11.12,0,2.9,2.9,1.93,7.26-.49,10.64l-14.51,22.74c-2.42,3.39-.49,7.74,3.87,7.74h34.83c4.35,0,7.74-3.39,7.74-7.74v-146.58c0-56.11-40.15-93.36-107.88-93.36Z"/>
    <path d="m1540.26,162.56h-54.18c-18.86,0-37.25,11.61-50.31,22.74l-21.28,18.38c-2.42,1.94-6.78,3.39-9.68.97-3.39-2.42-4.84-7.26-1.93-11.13l15.48-23.22c2.42-3.39.49-7.74-3.87-7.74h-36.28c-4.35,0-7.74,3.39-7.74,7.74v226.4c0,4.35,3.39,7.74,7.74,7.74h39.67c4.35,0,7.74-3.39,7.74-7.74v-116.1c0-49.83,20.32-72.08,64.34-72.08h50.31c4.35,0,7.74-3.39,7.74-7.74v-30.48c0-4.35-3.39-7.74-7.74-7.74Z"/>
  </g>
  <path d="m421.61,108c-13,0-25.07,6.74-31.88,17.82l-73.37,108.93c-2.39,3.59-1.42,8.43,2.17,10.82,2.91,1.94,6.76,1.7,9.41-.58l72.22-62.64c1.2-1.08,3.05-.97,4.13.23.49.55.75,1.26.75,1.99v196.12c0,1.62-1.31,2.92-2.93,2.92-.87,0-1.69-.38-2.24-1.05L181.56,121.24c-7.11-8.39-17.55-13.23-28.54-13.24h-7.63c-20.65,0-37.39,16.74-37.39,37.39v276.22c0,20.65,16.74,37.39,37.39,37.39,13,0,25.07-6.74,31.88-17.82l73.37-108.93c2.39-3.59,1.42-8.43-2.17-10.82-2.91-1.94-6.76-1.7-9.41.58l-72.22,62.64c-1.2,1.08-3.05.97-4.13-.23-.49-.55-.75-1.26-.74-1.99v-196.17c0-1.62,1.31-2.92,2.93-2.92.86,0,1.69.38,2.24,1.05l218.28,261.37c7.11,8.39,17.55,13.23,28.54,13.24h7.63c20.65.01,37.4-16.72,37.42-37.37V145.39c0-20.65-16.74-37.39-37.39-37.39Z"/>
</svg>
'''
'''--- apps/docs/static/img/logo_rev.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1656 567">
  <defs>
    <style>
      .cls-1 {
        fill: #fff;
      }
    </style>
  </defs>
  <g>
    <path class="cls-1" d="m703.42,157.72c-26.61,0-45.96,6.29-62.4,20.8l-29.03,25.15c-2.42,1.94-7.26,3.39-10.64.48-3.39-2.9-3.87-6.77-.97-10.64l15.48-23.22c2.42-3.39.49-7.74-3.87-7.74h-37.25c-4.35,0-7.74,3.39-7.74,7.74v226.4c0,4.35,3.39,7.74,7.74,7.74h38.7c4.35,0,7.74-3.39,7.74-7.74v-127.71c0-58.53,48.86-67.72,67.24-67.72,39.18,0,53.21,28.06,53.21,49.34v146.09c0,4.35,3.39,7.74,7.74,7.74h38.7c4.35,0,7.74-3.39,7.74-7.74v-150.93c0-54.18-35.32-88.04-92.4-88.04Z"/>
    <path class="cls-1" d="m953.5,156.75c-74.98,0-122.87,45.96-122.87,108.36v34.35c0,65.79,47.89,110.78,122.87,110.78,66.27,0,112.71-34.35,117.55-80.79.49-4.84-2.9-8.22-7.74-8.22h-37.73c-3.39,0-6.29,1.94-7.26,5.32-4.84,15.48-27.57,38.7-64.82,38.7s-72.08-27.09-71.6-65.79l.49-43.05c.48-32.41,34.35-54.66,71.11-54.66,33.38,0,65.79,18.87,69.17,49.83h0c.28,3.58-2.18,6.81-5.71,7.49l-108.46,21.05c-4.35.97-7.74,4.84-7.74,9.67v.48c0,4.35,4.35,8.22,10.64,8.22h155.77c4.28,0,7.74-3.47,7.74-7.74v-30.47c0-57.56-49.83-103.52-121.42-103.52Z"/>
    <path class="cls-1" d="m1223.42,156.75c-60.47,0-112.71,35.31-112.71,81.75,0,3.87,3.39,6.77,7.74,6.77h39.18c3.87,0,6.77-2.9,7.26-6.77,3.87-21.28,29.51-36.76,57.08-36.76,32.89,0,55.15,20.32,55.15,55.15v42.09c0,43.05-31.93,64.82-71.6,64.82-30.96,0-48.86-11.61-48.86-30.48,0-16.45,8.71-30.48,44.5-38.7l51.76-14.03c5.32-1.45,7.26-5.81,6.29-10.64-.48-3.87-4.83-5.81-8.71-5.81h-53.69c-45.47,0-91.43,29.02-91.43,71.59v6.77c0,43.54,41.12,66.27,88.04,66.27,29.99,0,55.63-11.61,71.59-25.15l23.71-20.32c3.87-3.39,7.74-3.39,11.12,0,2.9,2.9,1.93,7.26-.49,10.64l-14.51,22.74c-2.42,3.39-.49,7.74,3.87,7.74h34.83c4.35,0,7.74-3.39,7.74-7.74v-146.58c0-56.11-40.15-93.36-107.88-93.36Z"/>
    <path class="cls-1" d="m1540.26,162.56h-54.18c-18.86,0-37.25,11.61-50.31,22.74l-21.28,18.38c-2.42,1.94-6.78,3.39-9.68.97-3.39-2.42-4.84-7.26-1.93-11.13l15.48-23.22c2.42-3.39.49-7.74-3.87-7.74h-36.28c-4.35,0-7.74,3.39-7.74,7.74v226.4c0,4.35,3.39,7.74,7.74,7.74h39.67c4.35,0,7.74-3.39,7.74-7.74v-116.1c0-49.83,20.32-72.08,64.34-72.08h50.31c4.35,0,7.74-3.39,7.74-7.74v-30.48c0-4.35-3.39-7.74-7.74-7.74Z"/>
  </g>
  <path class="cls-1" d="m421.61,108c-13,0-25.07,6.74-31.88,17.82l-73.37,108.93c-2.39,3.59-1.42,8.43,2.17,10.82,2.91,1.94,6.76,1.7,9.41-.58l72.22-62.64c1.2-1.08,3.05-.97,4.13.23.49.55.75,1.26.75,1.99v196.12c0,1.62-1.31,2.92-2.93,2.92-.87,0-1.69-.38-2.24-1.05L181.56,121.24c-7.11-8.39-17.55-13.23-28.54-13.24h-7.63c-20.65,0-37.39,16.74-37.39,37.39v276.22c0,20.65,16.74,37.39,37.39,37.39,13,0,25.07-6.74,31.88-17.82l73.37-108.93c2.39-3.59,1.42-8.43-2.17-10.82-2.91-1.94-6.76-1.7-9.41.58l-72.22,62.64c-1.2,1.08-3.05.97-4.13-.23-.49-.55-.75-1.26-.74-1.99v-196.17c0-1.62,1.31-2.92,2.93-2.92.86,0,1.69.38,2.24,1.05l218.28,261.37c7.11,8.39,17.55,13.23,28.54,13.24h7.63c20.65.01,37.4-16.72,37.42-37.37V145.39c0-20.65-16.74-37.39-37.39-37.39Z"/>
</svg>
'''
'''--- apps/docs/static/img/social-card.svg ---
<svg width="800" height="400" viewBox="0 0 800 400" xmlns="http://www.w3.org/2000/svg"><mask id="satori_om-id"><rect x="0" y="0" width="800" height="400" fill="#fff"/></mask><rect x="0" y="0" width="800" height="400" fill="#fff"/><clipPath id="satori_cp-id-0"><rect x="300" y="81" width="200" height="200"/></clipPath><mask id="satori_om-id-0"><rect x="300" y="81" width="200" height="200" fill="#fff"/></mask><image x="300" y="81" width="200" height="200" href="data:image/svg+xml;utf8,%3Csvg  id=%22Layer_1%22 data-name=%22Layer 1%22 xmlns=%22http://www.w3.org/2000/svg%22 width=%22null%22 height=%22null%22 viewBox=%220 0 639 639%22%3E%3Cpath d=%22m457.61,144c-13,0-25.07,6.74-31.88,17.82l-73.37,108.93c-2.39,3.59-1.42,8.43,2.17,10.82,2.91,1.94,6.76,1.7,9.41-.58l72.22-62.64c1.2-1.08,3.05-.97,4.13.23.49.55.75,1.26.75,1.99v196.12c0,1.62-1.31,2.92-2.93,2.92-.87,0-1.69-.38-2.24-1.05L217.56,157.24c-7.11-8.39-17.55-13.23-28.54-13.24h-7.63c-20.65,0-37.39,16.74-37.39,37.39v276.22c0,20.65,16.74,37.39,37.39,37.39,13,0,25.07-6.74,31.88-17.82l73.37-108.93c2.39-3.59,1.42-8.43-2.17-10.82-2.91-1.94-6.76-1.7-9.41.58l-72.22,62.64c-1.2,1.08-3.05.97-4.13-.23-.49-.55-.75-1.26-.74-1.99v-196.17c0-1.62,1.31-2.92,2.93-2.92.86,0,1.69.38,2.24,1.05l218.28,261.37c7.11,8.39,17.55,13.23,28.54,13.24h7.63c20.65.01,37.4-16.72,37.42-37.37V181.39c0-20.65-16.74-37.39-37.39-37.39Z%22%3E%3C/path%3E%3C/svg%3E" preserveAspectRatio="none" clip-path="url(#satori_cp-id-0)" mask="url(#satori_om-id-0)"/><mask id="satori_om-id-0-0"><rect x="300" y="81" width="0" height="200" fill="#fff"/></mask><mask id="satori_om-id-1"><rect x="227" y="281" width="347" height="38" fill="#fff"/></mask><path fill="black" d="M239.0 311.0L229.0 311.0L229.0 287.7L238.3 287.7Q240.9 287.7 242.6 288.4Q244.3 289.2 245.2 290.5Q246.1 291.9 246.1 293.6L246.1 293.6Q246.1 295.0 245.5 296.0Q245.0 297.1 244.0 297.7Q243.1 298.4 241.9 298.6L241.9 298.6L241.9 298.9Q243.2 298.9 244.4 299.6Q245.5 300.3 246.3 301.6Q247.0 302.8 247.0 304.5L247.0 304.5Q247.0 306.4 246.1 307.8Q245.1 309.3 243.4 310.1Q241.6 311.0 239.0 311.0L239.0 311.0ZM233.9 300.7L233.9 306.9L238.0 306.9Q240.0 306.9 241.0 306.1Q241.9 305.3 241.9 304.0L241.9 304.0Q241.9 303.1 241.4 302.3Q241.0 301.6 240.1 301.2Q239.3 300.7 238.1 300.7L238.1 300.7L233.9 300.7ZM233.9 291.7L233.9 297.4L237.6 297.4Q238.6 297.4 239.4 297.1Q240.2 296.7 240.6 296.0Q241.1 295.4 241.1 294.5L241.1 294.5Q241.1 293.2 240.2 292.4Q239.3 291.7 237.7 291.7L237.7 291.7L233.9 291.7ZM271.6 299.3L271.6 299.3Q271.6 303.1 270.1 305.8Q268.7 308.5 266.2 309.9Q263.7 311.3 260.7 311.3L260.7 311.3Q257.6 311.3 255.1 309.9Q252.6 308.5 251.2 305.8Q249.8 303.1 249.8 299.3L249.8 299.3Q249.8 295.5 251.2 292.8Q252.6 290.2 255.1 288.8Q257.6 287.4 260.7 287.4L260.7 287.4Q263.7 287.4 266.2 288.8Q268.7 290.2 270.1 292.8Q271.6 295.5 271.6 299.3ZM266.6 299.3L266.6 299.3Q266.6 296.8 265.8 295.2Q265.1 293.5 263.8 292.6Q262.4 291.7 260.7 291.7L260.7 291.7Q258.9 291.7 257.5 292.6Q256.2 293.5 255.5 295.2Q254.8 296.8 254.8 299.3L254.8 299.3Q254.8 301.8 255.5 303.5Q256.2 305.2 257.5 306.0Q258.9 306.9 260.7 306.9L260.7 306.9Q262.4 306.9 263.8 306.0Q265.1 305.2 265.8 303.5Q266.6 301.8 266.6 299.3ZM292.5 294.4L287.8 294.4Q287.7 293.0 286.6 292.2Q285.6 291.5 283.8 291.5L283.8 291.5Q282.6 291.5 281.8 291.8Q281.0 292.1 280.5 292.7Q280.1 293.3 280.1 294.1L280.1 294.1Q280.1 294.7 280.4 295.2Q280.7 295.6 281.2 296.0Q281.7 296.3 282.4 296.5Q283.0 296.8 283.8 297.0L283.8 297.0L285.9 297.5Q287.4 297.8 288.7 298.4Q289.9 298.9 290.9 299.8Q291.8 300.6 292.3 301.7Q292.8 302.8 292.9 304.3L292.9 304.3Q292.8 306.4 291.8 308.0Q290.7 309.6 288.7 310.4Q286.7 311.3 283.8 311.3L283.8 311.3Q281 311.3 278.9 310.4Q276.8 309.6 275.7 307.9Q274.5 306.2 274.4 303.6L274.4 303.6L279.2 303.6Q279.3 304.8 279.9 305.6Q280.5 306.4 281.5 306.8Q282.5 307.2 283.8 307.2L283.8 307.2Q285.0 307.2 285.9 306.8Q286.9 306.4 287.4 305.8Q287.9 305.1 287.9 304.3L287.9 304.3Q287.9 303.5 287.4 303.0Q287.0 302.4 286.1 302.1Q285.2 301.7 283.9 301.4L283.9 301.4L281.4 300.7Q278.5 300.0 276.8 298.5Q275.0 297.0 275.1 294.4L275.1 294.4Q275.0 292.3 276.2 290.7Q277.3 289.1 279.3 288.2Q281.3 287.4 283.9 287.4L283.9 287.4Q286.5 287.4 288.4 288.2Q290.3 289.1 291.4 290.7Q292.5 292.3 292.5 294.4L292.5 294.4Z M313.6 311.0L308.8 311.0L302.1 287.7L307.5 287.7L311.4 303.8L311.6 303.8L315.8 287.7L320.4 287.7L324.7 303.9L324.9 303.9L328.7 287.7L334.1 287.7L327.4 311.0L322.6 311.0L318.2 295.7L318.0 295.7L313.6 311.0ZM342.7 311.3L342.7 311.3Q340.0 311.3 338.1 310.2Q336.1 309.1 335.1 307.1Q334.0 305.1 334.0 302.3L334.0 302.3Q334.0 299.6 335.1 297.6Q336.1 295.5 338.0 294.4Q339.9 293.3 342.5 293.3L342.5 293.3Q344.2 293.3 345.7 293.8Q347.2 294.4 348.3 295.5Q349.5 296.6 350.1 298.2Q350.7 299.9 350.7 302.1L350.7 302.1L350.7 303.5L336.0 303.5L336.0 300.5L346.1 300.5Q346.1 299.4 345.7 298.6Q345.2 297.8 344.4 297.3Q343.6 296.9 342.6 296.9L342.6 296.9Q341.5 296.9 340.6 297.4Q339.8 297.9 339.3 298.7Q338.8 299.6 338.8 300.6L338.8 300.6L338.8 303.5Q338.8 304.8 339.3 305.7Q339.8 306.7 340.7 307.2Q341.6 307.7 342.8 307.7L342.8 307.7Q343.6 307.7 344.2 307.5Q344.9 307.2 345.4 306.8Q345.9 306.3 346.1 305.7L346.1 305.7L350.6 306.0Q350.3 307.6 349.2 308.8Q348.2 310.0 346.5 310.6Q344.9 311.3 342.7 311.3ZM358.7 311.0L354.0 311.0L354.0 287.7L358.8 287.7L358.8 296.4L358.9 296.4Q359.3 295.7 359.9 295.0Q360.5 294.3 361.5 293.8Q362.4 293.3 363.9 293.3L363.9 293.3Q365.8 293.3 367.4 294.3Q369.0 295.3 370.0 297.3Q371.0 299.2 371.0 302.2L371.0 302.2Q371.0 305.2 370.0 307.2Q369.1 309.2 367.5 310.2Q365.9 311.2 363.9 311.2L363.9 311.2Q362.5 311.2 361.5 310.8Q360.5 310.3 359.9 309.6Q359.3 308.9 358.9 308.2L358.9 308.2L358.7 308.2L358.7 311.0ZM358.7 302.2L358.7 302.2Q358.7 303.8 359.1 304.9Q359.6 306.1 360.4 306.7Q361.2 307.4 362.4 307.4L362.4 307.4Q363.5 307.4 364.4 306.7Q365.2 306.1 365.6 304.9Q366.0 303.7 366.0 302.2L366.0 302.2Q366.0 300.7 365.6 299.6Q365.2 298.4 364.4 297.8Q363.6 297.1 362.4 297.1L362.4 297.1Q361.2 297.1 360.4 297.7Q359.6 298.4 359.1 299.5Q358.7 300.7 358.7 302.2Z M399.3 311.0L383.6 311.0L383.6 287.7L399.3 287.7L399.3 291.7L388.5 291.7L388.5 297.3L398.5 297.3L398.5 301.3L388.5 301.3L388.5 306.9L399.3 306.9L399.3 311.0ZM407.9 300.9L407.9 300.9L407.9 311.0L403.1 311.0L403.1 293.5L407.7 293.5L407.7 296.6L407.9 296.6Q408.5 295.1 409.9 294.2Q411.2 293.3 413.2 293.3L413.2 293.3Q415.0 293.3 416.3 294.1Q417.7 294.9 418.4 296.3Q419.2 297.8 419.2 299.8L419.2 299.8L419.2 311.0L414.4 311.0L414.4 300.7Q414.4 299.1 413.5 298.2Q412.7 297.3 411.3 297.3L411.3 297.3Q410.3 297.3 409.5 297.7Q408.8 298.1 408.4 298.9Q408.0 299.7 407.9 300.9ZM430.9 317.9L430.9 317.9Q428.5 317.9 426.8 317.2Q425.2 316.6 424.2 315.5Q423.2 314.4 422.9 313.0L422.9 313.0L427.4 312.4Q427.6 312.9 428.0 313.4Q428.5 313.8 429.2 314.1Q429.9 314.4 431.0 314.4L431.0 314.4Q432.6 314.4 433.6 313.6Q434.6 312.8 434.6 311.1L434.6 311.1L434.6 307.9L434.4 307.9Q434.1 308.6 433.5 309.2Q432.8 309.9 431.8 310.3Q430.8 310.7 429.4 310.7L429.4 310.7Q427.5 310.7 425.9 309.8Q424.3 308.9 423.3 307.0Q422.4 305.1 422.4 302.2L422.4 302.2Q422.4 299.2 423.3 297.2Q424.3 295.2 425.9 294.3Q427.5 293.3 429.4 293.3L429.4 293.3Q430.9 293.3 431.9 293.8Q432.9 294.3 433.5 295.0Q434.1 295.7 434.4 296.4L434.4 296.4L434.6 296.4L434.6 293.5L439.4 293.5L439.4 311.1Q439.4 313.3 438.3 314.8Q437.2 316.3 435.3 317.1Q433.4 317.9 430.9 317.9ZM431.0 307.1L431.0 307.1Q432.1 307.1 432.9 306.5Q433.8 305.9 434.2 304.8Q434.6 303.7 434.6 302.2L434.6 302.2Q434.6 300.6 434.2 299.5Q433.8 298.4 433.0 297.7Q432.1 297.1 431.0 297.1L431.0 297.1Q429.8 297.1 429.0 297.8Q428.1 298.4 427.7 299.5Q427.3 300.7 427.3 302.2L427.3 302.2Q427.3 303.7 427.7 304.8Q428.1 305.9 429.0 306.5Q429.8 307.1 431.0 307.1ZM448.1 311.0L443.3 311.0L443.3 293.5L448.1 293.5L448.1 311.0ZM445.7 291.2L445.7 291.2Q444.6 291.2 443.8 290.5Q443.1 289.8 443.1 288.8L443.1 288.8Q443.1 287.8 443.8 287.1Q444.6 286.3 445.7 286.3L445.7 286.3Q446.8 286.3 447.5 287.1Q448.3 287.8 448.3 288.8L448.3 288.8Q448.3 289.8 447.5 290.5Q446.8 291.2 445.7 291.2ZM456.8 300.9L456.8 300.9L456.8 311.0L452.0 311.0L452.0 293.5L456.6 293.5L456.6 296.6L456.8 296.6Q457.4 295.1 458.7 294.2Q460.1 293.3 462.0 293.3L462.0 293.3Q463.9 293.3 465.2 294.1Q466.6 294.9 467.3 296.3Q468.1 297.8 468.1 299.8L468.1 299.8L468.1 311.0L463.2 311.0L463.2 300.7Q463.2 299.1 462.4 298.2Q461.6 297.3 460.1 297.3L460.1 297.3Q459.1 297.3 458.4 297.7Q457.6 298.1 457.2 298.9Q456.8 299.7 456.8 300.9ZM479.8 311.3L479.8 311.3Q477.1 311.3 475.2 310.2Q473.2 309.1 472.2 307.1Q471.2 305.1 471.2 302.3L471.2 302.3Q471.2 299.6 472.2 297.6Q473.2 295.5 475.2 294.4Q477.1 293.3 479.6 293.3L479.6 293.3Q481.4 293.3 482.8 293.8Q484.3 294.4 485.5 295.5Q486.6 296.6 487.2 298.2Q487.8 299.9 487.8 302.1L487.8 302.1L487.8 303.5L473.1 303.5L473.1 300.5L483.3 300.5Q483.3 299.4 482.8 298.6Q482.4 297.8 481.6 297.3Q480.8 296.9 479.7 296.9L479.7 296.9Q478.6 296.9 477.8 297.4Q476.9 297.9 476.4 298.7Q476.0 299.6 475.9 300.6L475.9 300.6L475.9 303.5Q475.9 304.8 476.4 305.7Q476.9 306.7 477.8 307.2Q478.7 307.7 479.9 307.7L479.9 307.7Q480.7 307.7 481.4 307.5Q482.0 307.2 482.5 306.8Q483.0 306.3 483.2 305.7L483.2 305.7L487.7 306.0Q487.4 307.6 486.3 308.8Q485.3 310.0 483.6 310.6Q482.0 311.3 479.8 311.3Z M504.8 311.2L504.8 311.2Q502.9 311.2 501.2 310.2Q499.6 309.2 498.7 307.2Q497.8 305.2 497.8 302.2L497.8 302.2Q497.8 299.2 498.7 297.3Q499.7 295.3 501.3 294.3Q502.9 293.3 504.8 293.3L504.8 293.3Q506.3 293.3 507.3 293.8Q508.3 294.3 508.9 295.0Q509.5 295.7 509.8 296.4L509.8 296.4L509.9 296.4L509.9 287.7L514.8 287.7L514.8 311.0L510 311.0L510 308.2L509.8 308.2Q509.5 308.9 508.8 309.6Q508.2 310.3 507.2 310.8Q506.3 311.2 504.8 311.2ZM506.4 307.4L506.4 307.4Q507.5 307.4 508.4 306.7Q509.2 306.1 509.6 304.9Q510.0 303.8 510.0 302.2L510.0 302.2Q510.0 300.7 509.6 299.5Q509.2 298.4 508.4 297.7Q507.5 297.1 506.4 297.1L506.4 297.1Q505.2 297.1 504.4 297.8Q503.5 298.4 503.1 299.6Q502.7 300.7 502.7 302.2L502.7 302.2Q502.7 303.7 503.1 304.9Q503.6 306.1 504.4 306.7Q505.2 307.4 506.4 307.4ZM526.6 311.3L526.6 311.3Q524.0 311.3 522.1 310.2Q520.1 309.0 519.1 307.0Q518.0 305.0 518.0 302.3L518.0 302.3Q518.0 299.6 519.1 297.6Q520.1 295.5 522.1 294.4Q524.0 293.3 526.6 293.3L526.6 293.3Q529.3 293.3 531.2 294.4Q533.1 295.5 534.2 297.6Q535.2 299.6 535.2 302.3L535.2 302.3Q535.2 305.0 534.2 307.0Q533.1 309.0 531.2 310.2Q529.3 311.3 526.6 311.3ZM526.6 307.5L526.6 307.5Q527.9 307.5 528.7 306.9Q529.5 306.2 529.9 305.0Q530.3 303.8 530.3 302.3L530.3 302.3Q530.3 300.7 529.9 299.5Q529.5 298.3 528.7 297.7Q527.9 297.0 526.6 297.0L526.6 297.0Q525.4 297.0 524.6 297.7Q523.8 298.3 523.4 299.5Q523.0 300.7 523.0 302.3L523.0 302.3Q523.0 303.8 523.4 305.0Q523.8 306.2 524.6 306.9Q525.4 307.5 526.6 307.5ZM546.3 311.3L546.3 311.3Q543.6 311.3 541.7 310.2Q539.7 309.0 538.7 307.0Q537.7 304.9 537.7 302.3L537.7 302.3Q537.7 299.6 538.7 297.6Q539.8 295.6 541.7 294.4Q543.6 293.3 546.2 293.3L546.2 293.3Q548.5 293.3 550.2 294.1Q552.0 294.9 553.0 296.4Q554.0 297.9 554.1 300.0L554.1 300.0L549.5 300.0Q549.3 298.6 548.5 297.8Q547.6 297.0 546.3 297.0L546.3 297.0Q545.2 297.0 544.4 297.7Q543.5 298.3 543.1 299.4Q542.6 300.6 542.6 302.2L542.6 302.2Q542.6 303.9 543.1 305.1Q543.5 306.2 544.4 306.8Q545.2 307.5 546.3 307.5L546.3 307.5Q547.1 307.5 547.8 307.1Q548.5 306.8 548.9 306.1Q549.4 305.5 549.5 304.6L549.5 304.6L554.1 304.6Q553.9 306.6 553.0 308.1Q552 309.6 550.3 310.4Q548.6 311.3 546.3 311.3ZM571.7 298.5L571.7 298.5L567.3 298.7Q567.1 298.2 566.8 297.7Q566.4 297.3 565.8 297.0Q565.2 296.7 564.3 296.7L564.3 296.7Q563.2 296.7 562.4 297.2Q561.7 297.6 561.7 298.4L561.7 298.4Q561.7 299.1 562.2 299.5Q562.7 299.9 563.9 300.2L563.9 300.2L567.0 300.8Q569.6 301.3 570.8 302.5Q572.1 303.7 572.1 305.5L572.1 305.5Q572.1 307.3 571.1 308.6Q570.1 309.8 568.3 310.6Q566.6 311.3 564.3 311.3L564.3 311.3Q560.9 311.3 558.8 309.8Q556.8 308.4 556.4 305.9L556.4 305.9L561.2 305.6Q561.4 306.7 562.2 307.3Q563.0 307.8 564.3 307.8L564.3 307.8Q565.6 307.8 566.4 307.3Q567.2 306.8 567.2 306.0L567.2 306.0Q567.2 305.4 566.6 304.9Q566.1 304.5 564.9 304.3L564.9 304.3L561.9 303.7Q559.4 303.2 558.1 301.9Q556.9 300.7 556.9 298.7L556.9 298.7Q556.9 297.0 557.8 295.8Q558.7 294.6 560.4 293.9Q562.0 293.3 564.3 293.3L564.3 293.3Q567.6 293.3 569.5 294.7Q571.4 296.1 571.7 298.5Z "/></svg>
'''
'''--- apps/docs/tsconfig.json ---
{
  // This file is not used in compilation. It is here just for a nice editor experience.
  "extends": "@docusaurus/tsconfig",
  "compilerOptions": {
    "baseUrl": "."
  }
}

'''
'''--- apps/sandbox/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ['custom'],
};

'''
'''--- apps/sandbox/README.md ---
# BWE Sandbox Preview

This is a very thin Next JS application that provides a demo of the [@bos-web-engine/sandbox](../../packages/sandbox/README.md) component.

'''
'''--- apps/sandbox/next.config.js ---
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  webpack: (config) => ({
    ...config,
    resolve: {
      ...config.resolve,
      fallback: { ...config.resolve.fallback, fs: false },
    },
  }),
};

module.exports = nextConfig;

'''
'''--- apps/sandbox/package.json ---
{
  "name": "sandbox",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev -p 3005",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@bos-web-engine/application": "workspace:*",
    "@bos-web-engine/sandbox": "workspace:*",
    "@bos-web-engine/social-db": "workspace:*",
    "@bos-web-engine/ui": "workspace:*",
    "@bos-web-engine/wallet-selector-control": "workspace:*",
    "@near-wallet-selector/core": "^8.9.2",
    "@near-wallet-selector/here-wallet": "^8.9.2",
    "@near-wallet-selector/meteor-wallet": "^8.9.2",
    "@near-wallet-selector/modal-ui": "^8.9.2",
    "@near-wallet-selector/my-near-wallet": "^8.9.5",
    "@near-wallet-selector/nightly": "^8.9.2",
    "@near-wallet-selector/sender": "^8.9.2",
    "next": "14.0.4",
    "postcss-preset-env": "^9.3.0",
    "react": "^18",
    "react-dom": "^18"
  },
  "devDependencies": {
    "@bos-web-engine/common": "workspace:*",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.0.4",
    "tsconfig": "workspace:*",
    "typescript": "^5"
  }
}

'''
'''--- apps/sandbox/postcss.config.json ---
{
  "plugins": [
    [
      "postcss-preset-env",
      {
        "stage": 3,
        "features": {
          "custom-properties": false,
          "nesting-rules": true
        }
      }
    ]
  ]
}

'''
'''--- apps/sandbox/src/constants.ts ---
import { WalletSelectorParams } from '@near-wallet-selector/core';
import { setupHereWallet } from '@near-wallet-selector/here-wallet';
import { setupMeteorWallet } from '@near-wallet-selector/meteor-wallet';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';
import { setupNightly } from '@near-wallet-selector/nightly';
import { setupSender } from '@near-wallet-selector/sender';

export const MAINNET_WALLET_SELECTOR_PARAMS: WalletSelectorParams = {
  network: 'mainnet',
  modules: [
    setupMyNearWallet(),
    setupSender(),
    setupHereWallet(),
    setupMeteorWallet(),
    setupNightly(),
  ],
};

'''
'''--- apps/sandbox/src/hooks/useQueryParams.ts ---
import { QueryParams } from '@bos-web-engine/common';
import { useSearchParams } from 'next/navigation';
import { useEffect, useState } from 'react';

export function useQueryParams() {
  const searchParams = useSearchParams();
  const [queryParams, setQueryParams] = useState<QueryParams>({});

  useEffect(() => {
    /*
      This pattern gives us a more stable reference for queryParams to reduce
      re-renders. We only update our state when searchParams changes.
    */

    const params: QueryParams = {};

    searchParams.forEach((value, key) => {
      params[key] = value;
    });

    setQueryParams(params);
  }, [searchParams]);

  return {
    queryParams,
  };
}

'''
'''--- apps/sandbox/src/styles/app.module.css ---
.wrapper {
  --gateway-header-height: 3rem;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  width: 100%;
}

.header {
  display: flex;
  align-items: center;
  gap: 1rem;
  position: sticky;
  top: 0;
  height: var(--gateway-header-height);
  flex-shrink: 0;
  padding: 0 1rem;
  z-index: 2000;
  box-shadow: 0 1px 0 var(--color-border-1);
  background: var(--color-surface-1);

  [aria-haspopup='menu'] {
    margin-right: -0.6rem;
  }
}

.logo {
  display: inline-flex;
  gap: 1rem;
  align-items: center;
  color: var(--color-text-2);
  margin-right: auto;
  transition: all 200ms;
  text-decoration: none;
  outline: none;

  &:hover,
  &:focus {
    color: var(--color-text-1);
  }

  svg {
    display: block;
    height: 1rem;
    flex-shrink: 0;
  }

  h1 {
    font-family: sans-serif;
    font-size: 1.1rem;
    text-transform: uppercase;
    font-weight: 300;
  }
}

.main {
  display: flex;
  flex-grow: 1;
  width: 100%;

  > * {
    width: 100%;
  }
}

'''
'''--- apps/sandbox/src/styles/globals.css ---
html,
body,
#next {
  min-height: 100vh;
}

.nws-modal-wrapper {
  z-index: 5000 !important;
}

.nws-modal {
  box-shadow: 0 0 30px rgba(0, 0, 0, 0.5) !important;
}

.nws-modal-overlay {
  background: rgba(118, 118, 118, 0.5) !important;
}

'''
'''--- apps/sandbox/src/styles/home.module.css ---
.wrapper {
  display: flex;
  align-items: stretch;
  width: 100%;
}

'''
'''--- apps/sandbox/tsconfig.json ---
{
  "extends": "tsconfig/nextjs.json",
  "include": ["next-env.d.ts", "src"],
  "exclude": ["node_modules"],
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

'''
'''--- apps/web/.env ---
NEXT_PUBLIC_DEFAULT_ROOT_COMPONENT=bwe-demos.near/LandingPage
'''
'''--- apps/web/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ['custom'],
};

'''
'''--- apps/web/README.md ---
## Getting Started

First, run the development server:

```bash
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn/foundations/about-nextjs) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_source=github.com&utm_medium=referral&utm_campaign=turborepo-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

'''
'''--- apps/web/next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- apps/web/next.config.js ---
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  webpack: (config) => ({
    ...config,
    resolve: {
      ...config.resolve,
      fallback: { ...config.resolve.fallback, fs: false },
    },
  }),
};

module.exports = nextConfig;

'''
'''--- apps/web/package.json ---
{
  "name": "web",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "dev:components": "next start",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "lint:fix": "next lint --fix",
    "lint:check": "eslint --cache --max-warnings 0 .",
    "format:check": "prettier --check ."
  },
  "dependencies": {
    "@bos-web-engine/application": "workspace:*",
    "@bos-web-engine/hot-reload-client": "workspace:*",
    "@bos-web-engine/sandbox": "workspace:*",
    "@bos-web-engine/social-db": "workspace:*",
    "@bos-web-engine/ui": "workspace:*",
    "@bos-web-engine/wallet-selector-control": "workspace:*",
    "@near-wallet-selector/core": "^8.9.2",
    "@near-wallet-selector/here-wallet": "^8.9.2",
    "@near-wallet-selector/meteor-wallet": "^8.9.2",
    "@near-wallet-selector/modal-ui": "^8.9.2",
    "@near-wallet-selector/my-near-wallet": "^8.9.5",
    "@near-wallet-selector/nightly": "^8.9.2",
    "@near-wallet-selector/sender": "^8.9.2",
    "next": "^13.5.6",
    "postcss-preset-env": "^9.3.0",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-hook-form": "^7.46.2",
    "react-json-tree": "^0.18.0",
    "react-syntax-highlighter": "^15.5.0",
    "uuid": "^9.0.0",
    "zustand": "^4.4.3"
  },
  "devDependencies": {
    "@bos-web-engine/common": "workspace:*",
    "@types/node": "^17.0.12",
    "@types/react": "^18.2.34",
    "@types/react-dom": "^18.0.7",
    "@types/react-syntax-highlighter": "^15.5.8",
    "@types/uuid": "^9.0.1",
    "encoding": "^0.1.13",
    "eslint": "7.32.0",
    "eslint-config-custom": "workspace:*",
    "rollup-plugin-copy": "^3.5.0",
    "tsconfig": "workspace:*",
    "typescript": "^4.5.3"
  }
}

'''
'''--- apps/web/postcss.config.json ---
{
  "plugins": [
    [
      "postcss-preset-env",
      {
        "stage": 3,
        "features": {
          "custom-properties": false,
          "nesting-rules": true
        }
      }
    ]
  ]
}

'''
'''--- apps/web/src/components/Inspector.module.css ---
.button {
  background-color: transparent;
  padding: 0.5rem;
  border: 1px solid transparent;
  border-bottom: 1px solid black;
  text-align: left;
  overflow-wrap: break-word;

  &:hover {
    border: 1px solid white;
  }

  &[data-selected='true'] {
    background-color: var(--violet-9);
    font-family: monospace;
    font-size: 1rem;
  }
}

.componentList {
  display: flex;
  flex: none;
  flex-direction: column;
  min-width: 20rem;
  max-width: 30rem;
  background-color: var(--color-surface-4);
  overflow-y: auto;
}

.panel {
  display: flex;
  flex-direction: column;
  width: 100vw;
  height: 40vh;
  position: fixed;
  bottom: 0;
  left: 0;
  z-index: 2;
  background-color: var(--color-surface-4);
  color: white;

  button {
    color: white;
  }
}

.sourceViewer {
  display: flex;
  height: 100%;

  @media (max-width: 1000px) {
    flex-direction: column;
    font-size: 0.8rem;
  }
}

.flagSet {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  padding-inline: 1rem;

  label:after {
    content: ':';
  }
}

.flag {
  --input-height: 2rem;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  gap: 0.5rem;
  align-items: center;
  input[type='url'] {
    min-width: 20rem;
    border-radius: 0.25rem 0 0 0.25rem;
    height: var(--input-height);
    border: none;
  }
  > button {
    all: unset;
    background-color: hsl(270, 50%, 40%);
    padding-inline: 0.5rem;
    padding-block: 0.25rem;
    border-radius: 0.25rem;
    border: 1px solid hsl(40, 13%, 18%);

    &:hover {
      background-color: hsl(270, 50%, 30%);
    }
    &:active {
      background-color: hsl(270, 50%, 25%);
    }
  }

  input[type='checkbox'] {
    height: calc(var(--input-height) * 0.8);
    width: calc(var(--input-height) * 0.8);
  }
}

.clearable {
  display: flex;
  flex-direction: row;

  button {
    height: var(--input-height);
    border: none;
    border-radius: 0 0.25rem 0.25rem 0;
    background-color: hsl(0, 0%, 85%);
    flex-shrink: 0;

    &:hover {
      background-color: hsl(0, 0%, 60%);
    }

    &:active {
      background-color: hsl(0, 0%, 50%);
    }
  }
}

.dropdownTrigger {
  box-sizing: border-box;
  background-color: var(--color-surface-4);
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  border: 1px solid var(--color-cta-primary);
  border-radius: 0.25rem;
  padding: 0.25rem;
  cursor: pointer;
  flex-grow: 1;
}

.selectorDropdown {
  width: calc(100vw - 1rem);
  margin-inline: 0.5rem;
  color: var(--color-text-1);
  font-family: monospace;
  max-width: unset;

  div {
    font-size: 1rem;
  }
}

.root {
  height: 100%;
}

.sourceContent {
  @media (max-width: 1000px) {
    padding-top: 0.5rem;
  }
}

.tabsList {
  flex-shrink: 0;
}

.mobileSourceBar {
  display: flex;
  gap: 0.5rem;
  padding: 0.25rem;
}

.syntaxWrapper {
  flex: 1;
  overflow-x: auto;
  padding: 0;
}

.dialogContent {
  padding-inline: 18px;
  padding-block-start: 3rem;
}

.radioItem {
  padding-inline: 0;
}

.devToolsButton {
  background-color: var(--color-surface-4);
  position: fixed;
  right: 1.5rem;
  padding: 0.5rem;
  border: none;
  text-align: left;
  border-radius: 0.5rem 0.5rem 0 0;
  color: white;

  &:hover {
    color: var(--color-focus-outline);
    background-color: var(--color-surface-1);

    svg {
      fill: var(--color-focus-outline);
    }
  }
}

.openButton {
  bottom: 0;
  width: fit-content;
}

.closeButton {
  bottom: calc(40vh - 1px);
  width: 3rem;
  svg {
    fill: white;
  }
}

'''
'''--- apps/web/src/components/Messaging.module.css ---
.panel {
  display: flex;
  border-top: 1px solid black;
  overflow: hidden;
}

.codePanel {
  background-color: #002b36;
  flex: 3;
  font-size: 0.8rem;
  height: 100%;
  overflow: auto;
}

.messages {
  display: flex;
  flex: 2;
  flex-direction: column;
  min-width: 20rem;
  max-width: 30rem;
  background-color: #343028;
  overflow: auto;
}

.messageRow {
  cursor: pointer;
  color: white;
  display: flex;
  flex-direction: row;
  padding: 0.6rem;
  border-bottom: 1px solid lightgray;
}

.selectedMessage {
  background-color: #34307a;
}

.messageIndex {
  flex: 1;
  font-size: 0.5rem;
  padding-top: 0.2rem;
}

.messageName {
  flex: 2;
  font-size: 0.6rem;
  font-weight: 600;
}

.messageSource {
  flex: 6;
  font-size: 0.7rem;
}

.messageTarget {
  flex: 6;
  font-size: 0.7rem;
}

'''
'''--- apps/web/src/constants.ts ---
import { WalletSelectorParams } from '@near-wallet-selector/core';
import { setupHereWallet } from '@near-wallet-selector/here-wallet';
import { setupMeteorWallet } from '@near-wallet-selector/meteor-wallet';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';
import { setupNightly } from '@near-wallet-selector/nightly';
import { setupSender } from '@near-wallet-selector/sender';

export const MAINNET_WALLET_SELECTOR_PARAMS: WalletSelectorParams = {
  network: 'mainnet',
  modules: [
    setupMyNearWallet(),
    setupSender(),
    setupHereWallet(),
    setupMeteorWallet(),
    setupNightly(),
  ],
};

'''
'''--- apps/web/src/hooks/useComponentMetrics.ts ---
import type { ComponentMetrics, BWEMessage } from '@bos-web-engine/application';
import { useCallback, useState } from 'react';

type MetricCollectionItem = BWEMessage | string;

export function useComponentMetrics() {
  const [metrics, setMetrics] = useState<ComponentMetrics>({
    componentsLoaded: [],
    messages: [],
  });

  const buildAppender = useCallback(function buildCollectionAppender<
    T extends MetricCollectionItem,
  >(metricsKey: keyof ComponentMetrics) {
    return (item: T) =>
      setMetrics((currentMetrics) => ({
        ...currentMetrics,
        [metricsKey]: [...currentMetrics[metricsKey], item],
      }));
  }, []);

  return {
    metrics,
    reportMessage: buildAppender<BWEMessage>('messages'),
  };
}

'''
'''--- apps/web/src/hooks/useMediaQuery.ts ---
import { useState, useEffect } from 'react';

export function useMediaQuery(query: string) {
  const [matches, setMatches] = useState(false);

  useEffect(() => {
    const media = window.matchMedia(query);
    if (media.matches !== matches) {
      setMatches(media.matches);
    }

    const listener = () => {
      setMatches(media.matches);
    };
    media.addEventListener('change', listener);

    return () => media.removeEventListener('change', listener);
  }, [matches, query]);

  return matches;
}

'''
'''--- apps/web/src/hooks/useQueryParams.ts ---
import { QueryParams } from '@bos-web-engine/common';
import { useSearchParams } from 'next/navigation';
import { useEffect, useState } from 'react';

export function useQueryParams() {
  const searchParams = useSearchParams();
  const [queryParams, setQueryParams] = useState<QueryParams>({});

  useEffect(() => {
    /*
      This pattern gives us a more stable reference for queryParams to reduce
      re-renders. We only update our state when searchParams changes.
    */

    const params: QueryParams = {};

    searchParams.forEach((value, key) => {
      params[key] = value;
    });

    setQueryParams(params);
  }, [searchParams]);

  return {
    queryParams,
  };
}

'''
'''--- apps/web/src/stores/component-sources.ts ---
import { create } from 'zustand';

interface SourcesState {
  sources: Record<string, string>;
  addSource: (path: string, source: string) => void;
  clearSources: () => void;
}

export const useComponentSourcesStore = create<SourcesState>((set) => ({
  sources: {},
  addSource: (path, source) =>
    set((state) => ({ sources: { ...state.sources, [path]: source } })),
  clearSources: () => set({ sources: {} }),
}));

'''
'''--- apps/web/src/stores/container-messages.ts ---
import type { BWEMessage } from '@bos-web-engine/application';
import { create } from 'zustand';

interface ContainerMessagesState {
  messages: BWEMessage[];
  addMessage: (message: BWEMessage) => void;
  clearMessages: () => void;
}

export const useContainerMessagesStore = create<ContainerMessagesState>(
  (set) => ({
    messages: [],
    addMessage: (message) =>
      set((state) => ({ messages: [...state.messages, message] })),
    clearMessages: () => set({ messages: [] }),
  })
);

'''
'''--- apps/web/src/stores/dev-tools.ts ---
import type {
  UseWebEngineSandboxParams,
  WebEngineFlags,
} from '@bos-web-engine/application';
import { create } from 'zustand';

interface SourcesState {
  flags: WebEngineFlags;
  updateFlags: (newFlags: WebEngineFlags) => void;

  devToolsLoaded: boolean;
  markDevToolsLoaded: () => void;

  localComponents: UseWebEngineSandboxParams['localComponents'] | null;
  localFetchStatus: LocalFetchStatus;
  setLocalFetchStatus: (status: LocalFetchStatus) => void;
}

export const useDevToolsStore = create<SourcesState>((set) => ({
  flags: {},
  updateFlags: (newFlags) =>
    set((state) => {
      // clear local components when switching to a different local loader
      let additional = {};
      if (
        Object.hasOwn(newFlags, 'bosLoaderUrl') &&
        newFlags.bosLoaderUrl !== state.flags.bosLoaderUrl
      ) {
        additional = {
          localComponents: null,
          localFetchStatus: LocalFetchStatus.NONE,
        };
      }

      const updated = { ...state.flags, ...newFlags };
      localStorage.setItem('flags', JSON.stringify(updated));
      return { flags: updated, ...additional };
    }),

  devToolsLoaded: false,
  markDevToolsLoaded: () => {
    set({ devToolsLoaded: true });
  },

  localComponents: null,
  localFetchStatus: LocalFetchStatus.NONE,
  setLocalFetchStatus: (status) => {
    set({ localFetchStatus: status });
  },
}));

export enum LocalFetchStatus {
  NONE,
  LOADING,
  SUCCESS,
  ERROR,
}

'''
'''--- apps/web/src/stores/portal.ts ---
import { create } from 'zustand';

interface PortalState {
  portal: HTMLDivElement | undefined;
  setPortal: (element: HTMLDivElement | undefined) => void;
}

export const usePortalStore = create<PortalState>((set) => ({
  portal: undefined,
  setPortal: (portal) => set({ portal }),
}));

'''
'''--- apps/web/src/styles/app.module.css ---
.wrapper {
  --gateway-header-height: 3rem;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  width: 100%;
}

.header {
  display: flex;
  align-items: center;
  gap: 1rem;
  position: sticky;
  top: 0;
  height: var(--gateway-header-height);
  flex-shrink: 0;
  padding: 0 1rem;
  z-index: 2000;
  box-shadow: 0 1px 0 var(--black-a2);
  background: var(--color-surface-1);

  [aria-haspopup='menu'] {
    margin-right: -0.6rem;
  }
}

.logo {
  display: inline-flex;
  gap: 1rem;
  align-items: center;
  color: var(--color-text-2);
  transition: all 200ms;
  text-decoration: none;
  outline: none;

  &:hover,
  &:focus {
    color: var(--color-text-1);
  }

  svg {
    display: block;
    height: 1rem;
    flex-shrink: 0;
  }

  h1 {
    font-family: sans-serif;
    font-size: 1.1rem;
    text-transform: uppercase;
    font-weight: 300;
    margin: 0;
  }
}

.loaderIcon {
  margin-right: auto;
  svg {
    fill: hsl(115, 42.6%, 46.5%);
  }
  svg[data-status='error'] {
    fill: hsl(0, 64%, 42%);
  }
}

.tooltip {
  --color-surface-1: black;
  --color-border-1: black;
  --color-text-1: white;
  font-size: 0.875rem;
  width: fit-content;
  code {
    color: hsl(115, 42.6%, 60%);
  }
}

.main {
  display: flex;
  flex-grow: 1;
  width: 100%;

  > * {
    width: 100%;
  }
}

'''
'''--- apps/web/src/styles/flags.module.css ---
.container {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 2rem 1rem;
}

.form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.inputGrid {
  display: grid;
  grid-template-columns: max-content 1fr;
  align-items: center;
  gap: 1rem;

  @media (max-width: 600px) {
    grid-template-columns: 1fr;
  }
}

'''
'''--- apps/web/src/styles/globals.css ---
html,
body,
#next {
  min-height: 100vh;
}

.nws-modal-wrapper {
  z-index: 5000 !important;
}

.nws-modal {
  box-shadow: 0 0 30px rgba(0, 0, 0, 0.5);
}

/* TODO: The following was copied over from ../styles.css (should probably be refactored into CSS Modules when we have time) */

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

#init-component {
  padding: 24px;
}

.debug-option {
  padding: 8px 16px;
}

.debug-option > input {
  margin-right: 8px;
}

.debug-option > span {
  font-size: 18px;
}

#component-monitor {
  display: flex;
  flex-direction: column;
  font-family: 'Roboto Mono for Powerline';
  height: 200px;
}

.metrics-dashboard-row {
  flex: 1;
  display: flex;
  font-size: 0.7em;
}

.metrics-dashboard-data {
  overflow: scroll;
  flex: 7;
  justify-content: space-around;
  padding: 2px;
}

.metric-section-header {
  font-size: 1.6em;
  font-weight: bold;
  position: relative;
  top: 8px;
  left: 8px;
  text-decoration: underline;
}

.metrics {
  flex: 1;
}

.components {
  flex: 2;
}

.messages {
  flex: 5;
}

.metrics-data {
  display: flex;
  padding: 8px;
  flex-direction: column;
}

.components-data {
  padding: 8px;
  overflow-y: scroll;
}

.messages-data {
  padding: 8px;
  overflow: scroll;
  white-space: nowrap;
}

.message {
  float: left;
  display: inline;
}

.message-type-badge {
  width: 6em;
  margin-right: 4px;
}

.message-source {
  font-size: 0.9em;
  font-weight: 600;
  border-radius: 4px;
  padding: 2px 6px;
}

.message-source-application {
  background-color: rgba(187, 0, 187, 0.6);
  color: white;
}

.message-source-component {
  background-color: rgba(0, 255, 17, 0.4);
}

.message-index {
  font-size: 9px;
  padding-right: 4px;
  padding-top: 4px;
}

.metrics-data-point {
  display: flex;
  font-size: 1em;
}

.data-point-header {
  flex: 5;
}

.data-point-value {
  flex: 1;
  text-align: right;
  font-weight: 700;
}

.bwe-debug .container-child {
  border: 1px solid blue;
  padding: 0.5em;
  margin-bottom: 1em;
}

.dom-label {
  font-size: 0.7em;
  font-family: 'Roboto Mono for Powerline';
  text-align: center;
}

'''
'''--- apps/web/tsconfig.json ---
{
  "extends": "tsconfig/nextjs.json",
  "include": ["next-env.d.ts", "src"],
  "exclude": ["node_modules"],
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

'''
'''--- package.json ---
{
  "name": "@bos-web-engine/monorepo",
  "version": "0.0.0",
  "private": true,
  "workspaces": [
    "apps/*",
    "packages/*"
  ],
  "scripts": {
    "build": "turbo run build",
    "dev": "turbo run dev --concurrency=30",
    "dev:components": "turbo run dev:components --concurrency=30",
    "lint": "turbo run lint",
    "lint:fix": "turbo run lint:fix",
    "format": "prettier --write \"**/*.{ts,tsx,md}\"",
    "autoclave": "rimraf rimraf apps/**/.next && rimraf apps/**/node_modules && rimraf apps/**/.turbo && rimraf packages/**/lib && rimraf packages/**/node_modules && rimraf packages/**/.turbo && rm -rf node_modules",
    "prepare": "husky install"
  },
  "devDependencies": {
    "eslint-config-custom": "workspace:*",
    "husky": "^8.0.0",
    "next": "^13.5.6",
    "prettier": "latest",
    "rimraf": "^5.0.1",
    "turbo": "^1.13.2"
  },
  "engines": {
    "node": ">=18.17.0"
  },
  "packageManager": "pnpm@8.14.0",
  "pnpm": {
    "overrides": {
      "@babel/traverse": "7.23.2"
    }
  }
}

'''
'''--- packages/application/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ['custom'],
};

'''
'''--- packages/application/package.json ---
{
  "name": "@bos-web-engine/application",
  "version": "1.0.0",
  "description": "",
  "main": "lib/index.js",
  "scripts": {
    "build": "tsc -p ./tsconfig.json",
    "dev": "tsc -w -p ./tsconfig.json",
    "lint": "eslint ./src/**/*.ts*",
    "lint:fix": "eslint . --fix"
  },
  "dependencies": {
    "@bos-web-engine/compiler": "workspace:*",
    "@bos-web-engine/container": "workspace:*",
    "@bos-web-engine/social-db": "workspace:*",
    "@bos-web-engine/wallet-selector-control": "workspace:*"
  },
  "devDependencies": {
    "@bos-web-engine/common": "workspace:*",
    "@near-js/transactions": "^0.2.1",
    "@near-wallet-selector/core": "^8.9.2",
    "@types/node": "^17.0.12",
    "@types/react": "^18.2.34",
    "@types/react-dom": "^18.0.6",
    "eslint": "^7.32.0",
    "eslint-config-custom": "workspace:*",
    "react": "^18.2.0",
    "tsconfig": "workspace:*",
    "typescript": "^4.5.2"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

'''
'''--- packages/application/src/components/index.ts ---
import ComponentTree from './ComponentTree';

export { ComponentTree };

'''
'''--- packages/application/src/container.ts ---
import type {
  DeserializePropsParams,
  IframePostMessageParams,
  SendMessageParams,
} from './types';

export function getAppDomId(id: string) {
  return `dom-${id}`;
}

export function getIframeId(id: string) {
  return `iframe-${id}`;
}

function postMessageToIframe({
  id,
  message,
  targetOrigin,
}: IframePostMessageParams): void {
  const iframe = document.getElementById(id) as HTMLIFrameElement;
  if (!iframe) {
    console.error(`failed to send message to invalid iframe ${id}`, message);
    return;
  }

  iframe.contentWindow?.postMessage(message, targetOrigin);
}

export function sendMessage({
  componentId,
  message,
  onMessageSent,
}: SendMessageParams): void {
  onMessageSent({ toComponent: componentId, message });
  postMessageToIframe({
    id: getIframeId(componentId),
    message,
    targetOrigin: '*',
  });
}

function translatePropsKey(key: string) {
  if (key === 'oninput') {
    return 'onInput';
  }

  return key;
}

export function deserializeProps({
  id,
  props,
  onMessageSent,
}: DeserializePropsParams): any {
  if (!props) {
    return props;
  }

  delete props.bwe;

  return Object.fromEntries(
    Object.entries(props).map(([k, v]) => {
      const callbackMeta = v as { callbackIdentifier: string } | any;
      if (!callbackMeta?.callbackIdentifier) {
        return [k, v];
      }

      const { callbackIdentifier } = callbackMeta;
      return [
        translatePropsKey(k),
        (...args: any[]) => {
          let serializedArgs: any = args;
          const event = args[0] || {};

          // TODO make this opt-in/out?
          event.preventDefault?.();

          const { target } = event; // is this a DOM event?
          if (target && typeof target === 'object') {
            const { checked, name, type, value } = target;
            serializedArgs = {
              event: {
                target: {
                  checked,
                  name,
                  type,
                  value,
                },
              },
            };
          }

          sendMessage({
            componentId: id,
            message: {
              args: serializedArgs,
              method: callbackIdentifier,
              type: 'component.domCallback',
            },
            onMessageSent,
          });
        },
      ];
    })
  );
}

'''
'''--- packages/application/src/handlers.ts ---
import type { ComponentTrust } from '@bos-web-engine/common';
import React from 'react';

import { sendMessage } from './container';
import ContainerStoragePlugin from './plugins/container-storage';
import WalletSelectorPlugin from './plugins/wallet-selector';
import { createChildElements, createElement } from './react';
import type {
  ApplicationMethodInvocationParams,
  CallbackInvocationHandlerParams,
  CallbackResponseHandlerParams,
  RenderHandlerParams,
} from './types';

export async function onApplicationMethodInvocation({
  args,
  method,
  componentId,
  onMessageSent,
  requestId,
  social,
  wallet,
}: ApplicationMethodInvocationParams) {
  const sendResponse = (value: any, error?: Error) =>
    sendMessage({
      componentId,
      message: {
        containerId: componentId,
        result: JSON.stringify({ error, value }),
        requestId,
        targetId: componentId,
        type: 'component.callbackResponse',
      },
      onMessageSent,
    });

  try {
    switch (method) {
      /*
        NOTE: Social DB doesn't require extra serialization steps (as of now) so we can pass 
        through directly. The get() method doesn't require a user to be signed in with a wallet. 
        The set() method handles throwing a proper error when the user is not signed in with a 
        wallet. The social db instance passed in is already attached to the current wallet 
        selector instance.
      */

      case 'socialDb.get': {
        return sendResponse(await social.get(args[0] as any));
      }
      case 'socialDb.set': {
        return sendResponse(await social.set(args[0] as any));
      }

      /*
        NOTE: Wallet selector plugin requires more advanced serialization due to use of Buffer. 
        All of the methods also require the user to be signed in with a wallet.
      */

      case 'walletSelector.getAccounts': {
        // Instead of throwing an error, we return an empty array when the user hasn't signed in yet
        if (!wallet) return sendResponse([]);
        return sendResponse(await wallet.getAccounts());
      }
      case 'walletSelector.signAndSendTransaction': {
        if (!wallet)
          throw new Error('Wallet not initialized (user not signed in)');
        return sendResponse(
          await WalletSelectorPlugin.signAndSendTransaction({ args, wallet })
        );
      }
      case 'walletSelector.signMessage':
        if (!wallet)
          throw new Error('Wallet not initialized (user not signed in)');
        return sendResponse(
          await WalletSelectorPlugin.signMessage({ args, wallet })
        );

      case 'containerStorage.getItem': {
        return sendResponse(
          await ContainerStoragePlugin.getItem(componentId, args[0] as string)
        );
      }

      case 'containerStorage.removeItem': {
        return sendResponse(
          await ContainerStoragePlugin.removeItem(
            componentId,
            args[0] as string
          )
        );
      }

      case 'containerStorage.setItem': {
        const [key, value] = args;
        return sendResponse(
          await ContainerStoragePlugin.setItem(
            componentId,
            key as string,
            value
          )
        );
      }

      default:
        throw new Error(`Unrecognized method ${method}`);
    }
  } catch (error: any) {
    return sendResponse(undefined, error.toString());
  }
}

export function onCallbackInvocation({
  data,
  onMessageSent,
}: CallbackInvocationHandlerParams) {
  /*
    a component has invoked a callback passed to it as props by its parent component
    post a component callback message to the parent iframe
  */
  const { args, containerId, method, requestId, targetId } = data;
  sendMessage({
    componentId: targetId!,
    message: {
      args,
      method,
      containerId,
      requestId,
      targetId,
      type: 'component.callbackInvocation',
    },
    onMessageSent,
  });
}

export function onCallbackResponse({
  data,
  onMessageSent,
}: CallbackResponseHandlerParams) {
  /*
    a component has executed a callback invoked from another component
    return the value of the callback execution to the calling component
  */
  const { requestId, result, targetId, containerId } = data;
  sendMessage({
    componentId: targetId,
    message: {
      containerId,
      result,
      requestId,
      targetId,
      type: 'component.callbackResponse',
    },
    onMessageSent,
  });
}

interface ChildComponent {
  componentId: string;
  props: any;
  source: string;
  trust: ComponentTrust;
}

/**
 * A component has been rendered, update it in the outer window
 * TODO make a distinction between container-level renders and Component (e.g. trusted) renders
 *  currently containerId may refer to a Component, trusted or internally-defined, within a container
 * @param containerId originating container
 * @param childComponents set of child Components to be loaded dynamically
 * @param debug debug configuration
 * @param mountElement callback to mount the rendered element
 * @param isComponentLoaded callback to determine whether a child Component is available or needs to be loaded
 * @param loadComponent callback to fetch and compile child Component source
 * @param getContainerRenderCount callback to get the number of times this Component has been rendered
 * @param node serialized React node of the updated Component
 * @param onMessageSent callback to be invoked when this Component's DOM posts a message to its container
 */
export function onRender({
  containerId,
  childComponents,
  debug,
  mountElement,
  isComponentLoaded,
  loadComponent,
  getContainerRenderCount,
  node,
  onMessageSent,
}: RenderHandlerParams) {
  const { children, ...props } = node?.props || { children: [] };

  const componentChildren = createChildElements({
    children,
    depth: 0,
    parentId: containerId,
    onMessageSent,
  });
  const element = createElement({
    children: [
      ...(debug?.showContainerBoundaries
        ? [
            React.createElement('div', { className: 'dom-label' }, [
              `[${
                containerId.split('##')[0].split('/')[1]
              } (${getContainerRenderCount(containerId)})]`,
            ]),
          ]
        : []),
      ...[componentChildren].flat(),
    ],
    id: containerId,
    props,
    type: node.type,
    onMessageSent,
  });
  mountElement({ componentId: containerId, element });

  childComponents.forEach(
    ({
      componentId: childComponentId,
      props: componentProps,
      source,
      trust,
    }: ChildComponent) => {
      /*
      a new Component is being rendered by a parent Component, either:
      - this Component is being loaded for the first time
      - the parent Component has updated and is re-rendering this Component
    */
      if (!isComponentLoaded(childComponentId)) {
        /* component code has not yet been loaded, add to cache and load */
        loadComponent({
          componentId: childComponentId,
          componentPath: source,
          trust,
          parentId: containerId,
          props: componentProps,
          renderCount: 0,
        });
      } else {
        /* component iframe is already loaded, post update message to iframe */
        sendMessage({
          componentId: childComponentId,
          onMessageSent,
          message: {
            props: componentProps,
            componentId: childComponentId,
            type: 'component.update',
          },
        });
      }
    }
  );
}

'''
'''--- packages/application/src/hooks/index.ts ---
export { useWebEngine } from './useWebEngine';
export { useWebEngineSandbox } from './useWebEngineSandbox';

'''
'''--- packages/application/src/hooks/useCompiler.ts ---
import { BOSModule } from '@bos-web-engine/common';
import { useEffect, useState } from 'react';

import type { CompilerWorker, WebEngineConfiguration } from '../types';

/**
 * Provides an interface for managing containers
 * @param config parameters to be applied to the entire Component tree
 * @param rootComponentPath Component path for the root Component
 */
export function useCompiler({
  config,
  localComponents,
}: {
  config?: WebEngineConfiguration;
  localComponents?: { [path: string]: BOSModule };
}) {
  const [compiler, setCompiler] = useState<CompilerWorker | null>(null);

  useEffect(() => {
    if (!compiler) {
      setCompiler(
        new Worker(new URL('../workers/compiler.js', import.meta.url))
      );
    }
  }, [compiler]);

  useEffect(() => {
    if (!compiler) {
      return;
    }

    compiler.postMessage({
      action: 'init',
      localComponents,
      features: {
        enableBlockHeightVersioning: config?.flags?.enableBlockHeightVersioning,
        enablePersistentComponentCache:
          config?.flags?.enablePersistentComponentCache,
      },
    });
  }, [
    compiler,
    localComponents,
    config?.flags?.bosLoaderUrl,
    config?.flags?.enableBlockHeightVersioning,
    config?.flags?.enablePersistentComponentCache,
  ]);

  return compiler;
}

'''
'''--- packages/application/src/hooks/useComponentTree.ts ---
import type { ContainerPayload } from '@bos-web-engine/common';
import type { ComponentCompilerRequest } from '@bos-web-engine/compiler';
import { useSocial } from '@bos-web-engine/social-db';
import { useWallet } from '@bos-web-engine/wallet-selector-control';
import React, { MutableRefObject, useCallback, useEffect, useRef } from 'react';
import ReactDOM from 'react-dom/client';

import { getAppDomId } from '../container';
import {
  onApplicationMethodInvocation,
  onCallbackInvocation,
  onCallbackResponse,
  onRender,
} from '../handlers';
import type {
  BWEMessage,
  ComponentDOMElement,
  WebEngineDebug,
  WebEngineHooks,
} from '../types';

interface CompilerWorker extends Omit<Worker, 'postMessage'> {
  postMessage(compilerRequest: ComponentCompilerRequest): void;
}

interface UseComponentTreeParams {
  addComponent: (componentId: string, component: any) => void;
  compiler: CompilerWorker | null;
  components: { [p: string]: any };
  debug?: WebEngineDebug;
  getComponentRenderCount: (componentId: string) => number;
  hooks?: WebEngineHooks;
}

/**
 * Manage the Component tree DOM for a set of containers
 * @param compiler Compiler web worker responsible for fetching and parsing Components
 * @param debug debugging options
 * @param hooks callbacks to be invoked upon specific actions
 * @param components set of active iframe containers
 * @param addComponent callback to add a new iframe container (i.e. rendering a sandboxed child)
 * @param getComponentRenderCount callback to get the number of renders for a given container
 */
export function useComponentTree({
  compiler,
  debug,
  hooks,
  components,
  addComponent,
  getComponentRenderCount,
}: UseComponentTreeParams) {
  const { wallet } = useWallet();
  const { social } = useSocial();
  const domRoots: MutableRefObject<{ [key: string]: ReactDOM.Root }> = useRef(
    {}
  );

  const loadComponent = useCallback(
    (componentId: string, component: any) => {
      if (componentId in components) {
        return;
      }

      addComponent(componentId, component);
      compiler?.postMessage({
        action: 'execute',
        componentId,
      });
    },
    [compiler, components, addComponent]
  );

  const mountElement = useCallback(
    ({
      componentId,
      element,
      id,
    }: {
      componentId: string;
      element: ComponentDOMElement;
      id?: string;
    }) => {
      const domId = id || getAppDomId(componentId);

      if (!domRoots.current[domId]) {
        const domElement = document.getElementById(domId);
        if (!domElement) {
          console.error(`Node not found: #${domId}`);
          return;
        }

        domRoots.current[domId] = ReactDOM.createRoot(domElement);
      }

      domRoots.current[domId].render(
        React.createElement(React.Fragment, null, element.props.children)
      );
    },
    [domRoots]
  );

  const processMessage = useCallback(
    (event: MessageEvent<ContainerPayload>) => {
      try {
        if (
          typeof event.data !== 'object' ||
          !event.data?.type?.startsWith('component.')
        ) {
          return;
        }

        const { data } = event;
        hooks?.messageReceived?.({
          fromComponent: data.containerId,
          message: data,
        });

        const sourceIframe = document.getElementById(
          `iframe-${data.containerId}`
        ) as HTMLIFrameElement;

        if (sourceIframe?.contentWindow !== event.source) {
          // this message came from a different iframe than the one specified in the message payload
          return;
        }

        const onMessageSent = ({ toComponent, message }: BWEMessage) =>
          hooks?.messageReceived?.({ toComponent, message });

        switch (data.type) {
          case 'component.callbackInvocation': {
            // invocations with null container targets are invoking methods exposed by the outer application
            if (data.targetId === null) {
              return onApplicationMethodInvocation({
                args: data.args,
                componentId: data.containerId,
                method: data.method,
                onMessageSent,
                requestId: data.requestId,
                social,
                wallet,
              });
            }

            onCallbackInvocation({ data, onMessageSent });
            break;
          }
          case 'component.callbackResponse': {
            onCallbackResponse({ data, onMessageSent });
            break;
          }
          case 'component.domMethodInvocation': {
            // look up the element for this ref ID
            const selector = `[data-roc-ref-id="${data.id}"]`;
            const element = document.querySelector(selector);
            if (!element) {
              console.error(`no element found for ref id ${data.id}`);
              return;
            }

            // invoke the DOM method
            const method = element[data.method as keyof Element] as Function;
            if (typeof method === 'function') {
              method.call(element, ...data.args);
            }

            break;
          }
          case 'component.render': {
            const { childComponents, containerId, node } = data;

            onRender({
              childComponents,
              containerId,
              debug,
              getContainerRenderCount: getComponentRenderCount,
              isComponentLoaded: (c: string) => !!components[c],
              loadComponent: (component) =>
                loadComponent(component.componentId, component),
              mountElement: ({ componentId, element }) => {
                hooks?.componentRendered?.(componentId);
                mountElement({ componentId, element, id: data.node.props?.id });
              },
              node,
              onMessageSent,
            });
            break;
          }
          default:
            break;
        }
      } catch (e) {
        console.error({ event }, e);
      }
    },
    [
      components,
      loadComponent,
      mountElement,
      hooks,
      debug,
      getComponentRenderCount,
      social,
      wallet,
    ]
  );

  useEffect(() => {
    window.addEventListener('message', processMessage);
    return () => window.removeEventListener('message', processMessage);
  }, [processMessage]);

  return {
    domRoots,
  };
}

'''
'''--- packages/application/src/hooks/useComponents.ts ---
import type { ComponentCompilerResponse } from '@bos-web-engine/compiler';
import { useCallback, useEffect, useMemo, useState } from 'react';

import { UseComponentsParams } from '../types';

/**
 * Provides an interface for managing containers
 * @param appendStylesheet callback to add container stylesheets to the Component tree CSS
 * @param compiler Web Engine compiler instance
 * @param config parameters to be applied to the entire Component tree
 * @param rootComponentPath Component path for the root Component
 */
export function useComponents({
  appendStylesheet,
  compiler,
  config,
  rootComponentPath,
  queryParams,
}: UseComponentsParams) {
  const [components, setComponents] = useState<{ [key: string]: any }>({});
  const [isValidRootComponentPath, setIsValidRootComponentPath] =
    useState(false);
  const [error, setError] = useState<string | null>(null);
  const [rootComponentSource, setRootComponentSource] = useState<string | null>(
    null
  );

  const addComponent = useCallback((componentId: string, component: any) => {
    setComponents((currentComponents) => ({
      ...currentComponents,
      [componentId]: {
        ...currentComponents[componentId],
        ...component,
        renderCount: 1,
      },
    }));
  }, []);

  const getComponentRenderCount = useCallback(
    (componentId: string) => {
      return components?.[componentId]?.renderCount;
    },
    [components]
  );

  useEffect(() => {
    setIsValidRootComponentPath(
      !!rootComponentPath &&
        /^((([a-z\d]+[\-_])*[a-z\d]+\.)*([a-z\d]+[\-_])*[a-z\d]+)\/[\w.-]+$/gi.test(
          rootComponentPath
        )
    );
  }, [rootComponentPath]);

  const hooks = useMemo(() => {
    const result = { ...config?.hooks } || {};

    result.componentRendered = (componentId: string) => {
      config?.hooks?.componentRendered?.(componentId);
      setComponents((currentComponents) => ({
        ...currentComponents,
        [componentId]: {
          ...currentComponents[componentId],
          renderCount: currentComponents?.[componentId]?.renderCount + 1 || 0,
        },
      }));
    };

    return result;
  }, [config?.hooks]);

  useEffect(() => {
    if (!rootComponentPath || !isValidRootComponentPath || !compiler) {
      return;
    }

    compiler.onmessage = ({
      data,
    }: MessageEvent<ComponentCompilerResponse>) => {
      const {
        componentId,
        componentSource,
        containerStyles,
        error: loadError,
        importedModules,
        queryParams,
      } = data;

      if (loadError) {
        setError(loadError.message);
        return;
      }

      if (containerStyles) {
        appendStylesheet(containerStyles);
      }

      hooks?.containerSourceCompiled?.(data);

      const component = {
        ...components[componentId],
        componentId,
        componentSource,
        moduleImports: importedModules,
        queryParams,
      };

      if (!rootComponentSource && componentId === rootComponentPath) {
        setRootComponentSource(componentId);
      }

      addComponent(componentId, component);
    };

    compiler.postMessage({
      action: 'execute',
      componentId: rootComponentPath,
      queryParams,
    });
  }, [
    addComponent,
    appendStylesheet,
    components,
    hooks,
    compiler,
    rootComponentPath,
    rootComponentSource,
    error,
    isValidRootComponentPath,
    config?.flags?.bosLoaderUrl,
    queryParams,
  ]);

  return {
    addComponent,
    components,
    error,
    hooks,
    getComponentRenderCount,
    setComponents,
  };
}

'''
'''--- packages/application/src/hooks/useCss.ts ---
import { useCallback, useEffect, useRef } from 'react';

/**
 * Manage CSS across stylesheets in the Component tree
 */
export function useCss() {
  const containerStylesheet = useRef<CSSStyleSheet | null>(null);

  useEffect(() => {
    const style = document.createElement('style');
    style.id = `bwe-styles-${Date.now()}`;
    style.appendChild(document.createTextNode(''));
    document.head.appendChild(style);

    // @ts-expect-error StyleSheetList can be inlined despite TS complaints about [Symbol.iterator]()
    containerStylesheet.current = [...document.styleSheets].find(
      ({ ownerNode }) => ownerNode === style
    );
  }, []);

  const appendStylesheet = useCallback((containerStyles: string) => {
    const css = new CSSStyleSheet();
    css.replaceSync(containerStyles);

    // @ts-expect-error StyleSheetList can be inlined despite TS complaints about [Symbol.iterator]()
    for (let { cssText } of css.cssRules) {
      containerStylesheet.current!.insertRule(cssText);
    }
  }, []);

  const resetContainerStylesheet = useCallback(() => {
    const rulesCount = containerStylesheet.current!.cssRules.length;
    for (let i = rulesCount - 1; i >= 0; i--) {
      containerStylesheet.current!.deleteRule(i);
    }
  }, [containerStylesheet]);

  return {
    appendStylesheet,
    resetContainerStylesheet,
  };
}

'''
'''--- packages/application/src/hooks/useWebEngine.ts ---
import { useCompiler } from './useCompiler';
import { useComponents } from './useComponents';
import { useComponentTree } from './useComponentTree';
import { useCss } from './useCss';
import type { UseWebEngineParams } from '../types';

export function useWebEngine({
  config,
  rootComponentPath,
  queryParams,
}: UseWebEngineParams) {
  const { appendStylesheet } = useCss();
  const compiler = useCompiler({ config });
  const { addComponent, components, error, getComponentRenderCount, hooks } =
    useComponents({
      appendStylesheet,
      compiler,
      config,
      rootComponentPath,
      queryParams,
    });

  useComponentTree({
    addComponent,
    compiler,
    components,
    debug: config?.debug,
    getComponentRenderCount,
    hooks,
  });

  return {
    components,
    error,
  };
}

'''
'''--- packages/application/src/hooks/useWebEngineSandbox.ts ---
import { useEffect, useState } from 'react';

import { useCompiler } from './useCompiler';
import { useComponents } from './useComponents';
import { useComponentTree } from './useComponentTree';
import { useCss } from './useCss';
import type { UseWebEngineSandboxParams } from '../types';

export function useWebEngineSandbox({
  localComponents,
  config,
  rootComponentPath,
  queryParams,
}: UseWebEngineSandboxParams) {
  const [nonce, setNonce] = useState('');

  const { appendStylesheet, resetContainerStylesheet } = useCss();
  const compiler = useCompiler({ config, localComponents });
  const {
    addComponent,
    components,
    error,
    getComponentRenderCount,
    hooks,
    setComponents,
  } = useComponents({
    appendStylesheet,
    compiler,
    config,
    rootComponentPath,
    queryParams,
  });

  const { domRoots } = useComponentTree({
    addComponent,
    compiler,
    components,
    getComponentRenderCount,
    hooks,
  });

  useEffect(() => {
    if (!localComponents || !rootComponentPath) return;

    domRoots.current = {};
    setComponents({});
    resetContainerStylesheet();
    setNonce(`${rootComponentPath}:${Date.now().toString()}`);

    compiler?.postMessage({
      action: 'execute',
      componentId: rootComponentPath,
    });
  }, [compiler, domRoots, localComponents, rootComponentPath, setComponents]);

  return {
    components,
    error,
    nonce,
  };
}

'''
'''--- packages/application/src/index.ts ---
export { ComponentTree } from './components';
export { useWebEngine, useWebEngineSandbox } from './hooks';
export { createChildElements, createElement } from './react';
export * from './types';

'''
'''--- packages/application/src/plugins/container-storage.ts ---
type ContainerStorageEntry = string | number | object | null;

function buildStorageKey(componentId: string, key: string) {
  return `component_storage/${componentId}/${key}`;
}

async function getItem(componentId: string, key: string) {
  const storageKey = buildStorageKey(componentId, key);
  const valueFromStorage = localStorage.getItem(storageKey);
  if (!valueFromStorage) {
    return null;
  }

  return JSON.parse(valueFromStorage)?.value;
}

async function removeItem(componentId: string, key: string) {
  const storageKey = buildStorageKey(componentId, key);

  return localStorage.removeItem(storageKey);
}

async function setItem(
  componentId: string,
  key: string,
  value: ContainerStorageEntry
) {
  const storageKey = buildStorageKey(componentId, key);

  return localStorage.setItem(storageKey, JSON.stringify({ value }));
}

const ContainerStorage = {
  getItem,
  removeItem,
  setItem,
};

export default ContainerStorage;

'''
'''--- packages/application/src/plugins/wallet-selector.ts ---
/* eslint-disable import/order */
import type { SerializedArgs } from '@bos-web-engine/common';
import type { Action } from '@near-js/transactions';
import type { SignMessageParams, Wallet } from '@near-wallet-selector/core';
import { Buffer } from 'buffer'; // NPM package for browser compatibility
/* eslint-disable import/order */

interface SignComponentMessageParams {
  args: SerializedArgs;
  wallet: Wallet;
}

/**
 * Convert serialized Uint8Array into Buffer and return result of wallet method invocation
 * @param args Raw serialized arguments sent from the calling iframe container
 * @param wallet Wallet instance
 */
function signMessage({ args, wallet }: SignComponentMessageParams) {
  if (!wallet.signMessage) {
    throw new Error('Wallet does not support signMessage()');
  }

  const params = args[0] as SignMessageParams & { nonce: object };
  return wallet.signMessage({
    ...params,
    nonce: Buffer.from(Object.values(params.nonce)),
  });
}

/**
 * Convert serialized Uint8Array into Buffer and return result of wallet method invocation
 * @param args Raw serialized arguments sent from the calling iframe container
 * @param wallet Wallet instance
 */
function signAndSendTransaction({ args, wallet }: SignComponentMessageParams) {
  if (!wallet.signAndSendTransaction) {
    throw new Error('Wallet does not support signAndSendTransaction()');
  }

  const params = args[0] as { receiverId: string; actions: Action[] };
  // @ts-expect-error FIXME incompatible @near-js versions?
  return wallet.signAndSendTransaction(params);
}

const WalletSelector = {
  signMessage,
  signAndSendTransaction,
};

export default WalletSelector;

'''
'''--- packages/application/src/react.ts ---
import React, { type FunctionComponent } from 'react';

import { deserializeProps } from './container';
import type {
  CreateChildElementParams,
  CreateElementParams,
  ComponentDOMElement,
} from './types';

const secureCreateElement = (
  type: string | FunctionComponent,
  props: object,
  ...children: any
): ComponentDOMElement | null => {
  if (type === 'script') {
    return null;
  }

  const sanitizedProps = Object.fromEntries(
    Object.entries(props).filter(([, value]) => {
      if (typeof value === 'string') {
        if (value.trim().startsWith('javascript:')) {
          return false;
        }
      }

      return true;
    })
  );

  return React.createElement(type, sanitizedProps, ...children);
};

function isChildrenAllowed(elementType: string) {
  return !(elementType in ['img']);
}

export function createElement({
  children,
  id,
  props,
  type,
  onMessageSent,
}: CreateElementParams): ComponentDOMElement | null {
  return secureCreateElement(
    type,
    deserializeProps({ id, props, onMessageSent }),
    isChildrenAllowed(type) ? children : undefined
  );
}

export function createChildElements({
  children,
  depth,
  index,
  parentId,
  onMessageSent,
}: CreateChildElementParams): any {
  // `children` is a literal
  if (typeof children === 'string' || typeof children === 'number') {
    return children;
  }

  // `children` is (non-zero) falsy or an empty object
  if (
    !children ||
    (typeof children === 'object' && Object.keys(children).length === 0)
  ) {
    return '';
  }

  // `children` is a single component
  if (children.type) {
    const {
      type,
      props: { children: subChildren, ...props },
    } = children;
    const childProps = {
      ...deserializeProps({ id: parentId, props, onMessageSent }),
      key: `${parentId}-${depth}-${index}`,
    };

    if (
      !subChildren ||
      !subChildren.filter((c: any) => c !== undefined).length
    ) {
      return secureCreateElement(type, childProps);
    }

    return secureCreateElement(
      type,
      childProps,
      createChildElements({
        children: subChildren,
        depth: depth + 1,
        index,
        parentId,
        onMessageSent,
      })
    );
  }

  // `children` is an array of components and/or primitives
  return children.map((child: any, i: number) =>
    createChildElements({
      children: child,
      depth: depth + 1,
      index: i,
      parentId,
      onMessageSent,
    })
  );
}

'''
'''--- packages/application/src/types.ts ---
import type {
  BOSModule,
  ComponentCallbackInvocation,
  ComponentCallbackResponse,
  ComponentChildMetadata,
  ComponentTrust,
  MessagePayload,
  QueryParams,
  SerializedArgs,
  SerializedNode,
} from '@bos-web-engine/common';
import type {
  ComponentCompilerRequest,
  ComponentCompilerResponse,
} from '@bos-web-engine/compiler';
import type { SocialDb } from '@bos-web-engine/social-db';
import type { Wallet } from '@near-wallet-selector/core';
import type { ReactElement } from 'react';

export interface ApplicationMethodInvocationParams {
  args: SerializedArgs;
  componentId: string;
  method: string;
  onMessageSent: OnMessageSentCallback;
  requestId: string;
  social: SocialDb;
  wallet: Wallet | null;
}

export interface CallbackInvocationHandlerParams {
  data: ComponentCallbackInvocation;
  onMessageSent: OnMessageSentCallback;
}

export interface CallbackResponseHandlerParams {
  data: Omit<ComponentCallbackResponse, 'type'>;
  onMessageSent: OnMessageSentCallback;
}

export interface ComponentInstance {
  componentId: string;
  componentPath: string;
  parentId: string;
  props: any;
  renderCount: number;
  trust: ComponentTrust;
}

export interface ComponentMetrics {
  componentsLoaded: string[];
  messages: SendMessageParams[];
}

export interface RenderHandlerParams {
  childComponents: ComponentChildMetadata[];
  containerId: string;
  debug?: WebEngineDebug;
  mountElement: ({
    componentId,
    element,
  }: {
    componentId: string;
    element: any;
  }) => void;
  isComponentLoaded(componentId: string): boolean;
  loadComponent(component: ComponentInstance): void;
  getContainerRenderCount(containerId: string): number;
  node: SerializedNode;
  onMessageSent: OnMessageSentCallback;
}

export interface IframePostMessageParams {
  id: string;
  message: MessagePayload;
  targetOrigin: string;
}

export interface BWEMessage {
  toComponent?: string;
  fromComponent?: string;
  message: MessagePayload;
}

type OnMessageSentCallback = (params: BWEMessage) => void;

export interface SendMessageParams {
  componentId: string;
  message: MessagePayload;
  onMessageSent: OnMessageSentCallback;
}

export interface DeserializePropsParams {
  id: string;
  onMessageSent: OnMessageSentCallback;
  props: any;
}

export interface ComponentDOMElement extends ReactElement<any, any> {}

export interface CreateElementParams {
  children?: any;
  id: string;
  onMessageSent: OnMessageSentCallback;
  props: object;
  type: string;
}

export interface CreateChildElementParams {
  children?: any;
  depth: number;
  index?: number;
  onMessageSent: OnMessageSentCallback;
  parentId: string;
}

export interface CompilerWorker extends Omit<Worker, 'postMessage'> {
  postMessage(compilerRequest: ComponentCompilerRequest): void;
}

export interface UseWebEngineParams {
  config?: WebEngineConfiguration;
  rootComponentPath?: string;
  queryParams?: QueryParams;
}

export interface UseComponentsParams extends UseWebEngineParams {
  appendStylesheet: (stylesheet: string) => void;
  compiler: CompilerWorker | null;
}

export interface UseWebEngineSandboxParams extends UseWebEngineParams {
  localComponents?: { [path: string]: BOSModule };
}

export interface WebEngineDebug {
  showContainerBoundaries?: boolean;
}

export interface WebEngineHooks {
  componentRendered?: (componentId: string) => void;
  containerSourceCompiled?: (response: ComponentCompilerResponse) => void;
  messageReceived?: (message: BWEMessage) => void;
}

export interface WebEngineConfiguration {
  debug?: WebEngineDebug;
  flags?: WebEngineFlags;
  hooks?: WebEngineHooks;
}

export interface WebEngineFlags {
  bosLoaderUrl?: string;
  hotReloadWebsocketUrl?: string;
  showContainerBoundaries?: boolean;
  enableBlockHeightVersioning?: boolean;
  enablePersistentComponentCache?: boolean;
}

'''
'''--- packages/application/src/workers/compiler.ts ---
import {
  ComponentCompiler,
  ComponentCompilerRequest,
} from '@bos-web-engine/compiler';

const compiler = new ComponentCompiler({
  sendMessage: (message: any) => self.postMessage(message),
});

self.onmessage = ({
  data: compileRequest,
}: MessageEvent<ComponentCompilerRequest>) => {
  switch (compileRequest.action) {
    case 'init':
      compiler.init(compileRequest);
      break;
    case 'execute':
      compiler.compileComponent(compileRequest).catch((e) => {
        console.error(
          `Failed to compile component ${compileRequest.componentId}`,
          e
        );
        self.postMessage({ error: e });
      });
      break;
    default:
      break;
  }
};

export {};

'''
'''--- packages/application/tsconfig.json ---
{
  "extends": "tsconfig/react-library.json",
  "include": ["src"],
  "exclude": ["lib", "node_modules"],
  "compilerOptions": {
    "outDir": "lib"
  }
}

'''
'''--- packages/common/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ['custom'],
};

'''
'''--- packages/common/package.json ---
{
  "name": "@bos-web-engine/common",
  "version": "1.0.0",
  "description": "",
  "main": "lib/index.js",
  "scripts": {
    "build": "tsc -p ./tsconfig.json",
    "dev": "tsc -w -p ./tsconfig.json",
    "lint": "eslint ./src/**/*.ts*",
    "lint:fix": "eslint . --fix"
  },
  "devDependencies": {
    "@types/node": "^17.0.12",
    "@types/react": "^18.2.34",
    "eslint": "^7.32.0",
    "eslint-config-custom": "workspace:*",
    "react": "^18.2.0",
    "tsconfig": "workspace:*",
    "typescript": "^4.5.2"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

'''
'''--- packages/common/src/index.ts ---
export * from './types';

'''
'''--- packages/common/src/types/compilation.ts ---
export interface BOSModule {
  component: string;
  css?: string;
  blockHeight?: number;
}

'''
'''--- packages/common/src/types/helpers.ts ---
export type DeepPartial<T> = T extends object
  ? {
      [P in keyof T]?: DeepPartial<T[P]>;
    }
  : T;

'''
'''--- packages/common/src/types/index.ts ---
export * from './compilation';
export * from './helpers';
export * from './invocation';
export * from './messaging';
export * from './plugins';
export * from './render';
export * from './serialization';
export * from './trust';
export * from './url';

'''
'''--- packages/common/src/types/invocation.ts ---
import type { SerializedArgs } from './serialization';

export interface InvokeApplicationCallbackParams {
  args: SerializedArgs;
  method: string;
}

export interface ExternalCallbackInvocation<T> {
  invocationId: string;
  invocation: Promise<T>;
}

'''
'''--- packages/common/src/types/messaging.ts ---
import type {
  ComponentChildMetadata,
  SerializedArgs,
  SerializedNode,
} from './serialization';
import type { ComponentTrust } from './trust';

type ComponentCallbackInvocationType = 'component.callbackInvocation';
type ComponentCallbackResponseType = 'component.callbackResponse';
type ComponentDomCallbackType = 'component.domCallback';
type ComponentDomMethodInvocationType = 'component.domMethodInvocation';
type ComponentRenderType = 'component.render';
type ComponentUpdateType = 'component.update';
export type EventType =
  | ComponentCallbackInvocationType
  | ComponentCallbackResponseType
  | ComponentDomCallbackType
  | ComponentDomMethodInvocationType
  | ComponentRenderType
  | ComponentUpdateType;

export interface PostMessageEvent {
  data: MessagePayload;
}

export interface PostMessageParams {
  type: EventType;
}
export interface ComponentCallbackInvocation extends PostMessageParams {
  args: SerializedArgs;
  method: string;
  containerId: string;
  requestId: string;
  targetId: string | null;
  type: ComponentCallbackInvocationType;
}

export interface ComponentCallbackResponse extends PostMessageParams {
  containerId: string;
  requestId: string;
  result: string; // stringified JSON in the form of { result: any, error: string }
  targetId: string;
  type: ComponentCallbackResponseType;
}

export interface ComponentRender extends PostMessageParams {
  childComponents: ComponentChildMetadata[];
  containerId: string;
  node: SerializedNode;
  trust: ComponentTrust;
  type: ComponentRenderType;
}

export interface ComponentUpdate extends PostMessageParams {
  props: any;
  type: ComponentUpdateType;
  componentId: string;
}

export interface DomCallback {
  args: SerializedArgs;
  componentId?: string;
  method: string;
  type: ComponentDomCallbackType;
}

export interface DomMethodInvocation {
  args: SerializedArgs;
  containerId: string;
  id: string;
  method: string;
  type: ComponentDomMethodInvocationType;
}

// payloads sent by the application to a container
export type ApplicationPayload = ComponentUpdate | DomCallback;

// payloads sent by a container to the application
export type ContainerPayload =
  | ComponentCallbackInvocation
  | ComponentCallbackResponse
  | ComponentRender
  | DomMethodInvocation;

export type MessagePayload = ApplicationPayload | ContainerPayload;

'''
'''--- packages/common/src/types/plugins.ts ---
import type { InvokeApplicationCallbackParams } from './invocation';

export interface WebEngineContext {
  callApplicationMethod<T>(params: InvokeApplicationCallbackParams): Promise<T>;
}

export type InitPluginCallback<T> = (context: WebEngineContext) => T;

export interface WebEngine {
  initPlugin<T>(init: InitPluginCallback<T>): T;
}

'''
'''--- packages/common/src/types/render.ts ---
import type { ComponentTrust } from './trust';

export interface WebEngineMeta {
  componentId?: string; // TODO remove this field and only compute from src + key + parentMeta*
  key?: string;
  parentMeta?: WebEngineMeta;
  src?: string;
  trust?: ComponentTrust;
}

export interface KeyValuePair {
  [key: string]: any;
}

export interface Props extends KeyValuePair {
  bwe?: WebEngineMeta;
  children?: any[];
  className?: string;
  id?: string;
  'data-component-src'?: string;
}

'''
'''--- packages/common/src/types/serialization.ts ---
import type { Props, WebEngineMeta } from './render';
import type { ComponentTrust } from './trust';

export type BOSComponentProps = Props & {
  bwe: WebEngineMeta;
};

export interface ComponentChildMetadata {
  componentId: string;
  props: Props;
  source: string;
  trust: ComponentTrust;
}

export type SerializedArgs = Array<
  string | number | object | any[] | { callbackIdentifier: string }
>;

export interface SerializedNode {
  childComponents?: ComponentChildMetadata[];
  type: string;
  props: Props;
}

'''
'''--- packages/common/src/types/trust.ts ---
export enum TrustMode {
  Sandboxed = 'sandboxed',
  Trusted = 'trusted',
  TrustAuthor = 'trusted-author',
}

export interface ComponentTrust {
  mode: TrustMode;
}

'''
'''--- packages/common/src/types/url.ts ---
export type QueryParams = Record<string, string | undefined>;

'''
'''--- packages/common/tsconfig.json ---
{
  "extends": "tsconfig/react-library.json",
  "include": ["src"],
  "exclude": ["lib", "node_modules"],
  "compilerOptions": {
    "outDir": "lib"
  }
}

'''
'''--- packages/compiler/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ['custom'],
};

'''
'''--- packages/compiler/package.json ---
{
  "name": "@bos-web-engine/compiler",
  "version": "1.0.0",
  "description": "",
  "main": "lib/index.js",
  "scripts": {
    "build": "tsc -p tsconfig.json",
    "dev": "tsc -w -p tsconfig.json",
    "lint": "eslint src/**/*.ts*",
    "lint:fix": "eslint . --fix"
  },
  "dependencies": {
    "@babel/standalone": "^7.22.14",
    "@bos-web-engine/common": "workspace:*",
    "@bos-web-engine/container-storage-plugin": "workspace:*",
    "@bos-web-engine/social-db": "workspace:*",
    "@bos-web-engine/social-db-plugin": "workspace:*",
    "@bos-web-engine/wallet-selector-plugin": "workspace:*",
    "browserslist": "^4.23.0",
    "idb": "^8.0.0",
    "lightningcss-wasm": "^1.24.1"
  },
  "devDependencies": {
    "@babel/types": "^7.24.0",
    "@near-js/types": "^0.0.4",
    "@types/babel__standalone": "^7.1.6",
    "@types/node": "^17.0.12",
    "eslint": "^7.32.0",
    "eslint-config-custom": "workspace:*",
    "tsconfig": "workspace:*",
    "typescript": "^4.5.2"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

'''
'''--- packages/compiler/src/cache.ts ---
import { DBSchema, IDBPDatabase, openDB } from 'idb';

import { ComponentCacheRecord } from './types';

export const ROC_INDEX_DB = 'rocIndexedDB';
const ROC_INDEX_DB_VERSION = 1;
const COMPONENT_TREES_CACHE_STORE_NAME = 'componentTreesCache';

interface ROCIndexDB extends DBSchema {
  [COMPONENT_TREES_CACHE_STORE_NAME]: {
    key: string;
    value: ComponentCacheRecord;
    indexes: { by_key: string };
  };
}

export async function initializeDB(): Promise<IDBPDatabase<ROCIndexDB>> {
  const db = await openDB<ROCIndexDB>(ROC_INDEX_DB, ROC_INDEX_DB_VERSION, {
    upgrade(db) {
      const store = db.createObjectStore(COMPONENT_TREES_CACHE_STORE_NAME, {
        keyPath: 'key',
      });
      store.createIndex('by_key', 'key', { unique: true });
    },
  });

  return db;
}

export async function cacheComponentTreeDetails(
  data: ComponentCacheRecord
): Promise<void> {
  const db = await initializeDB();
  await db.put(COMPONENT_TREES_CACHE_STORE_NAME, data);
}

export async function retrieveComponentTreeDetailFromCache(
  componentPath: string
): Promise<ComponentCacheRecord | undefined> {
  const db = await initializeDB();
  return db.get(COMPONENT_TREES_CACHE_STORE_NAME, componentPath);
}

'''
'''--- packages/compiler/src/compiler.ts ---
import { BOSModule, TrustMode } from '@bos-web-engine/common';
import { SocialDb } from '@bos-web-engine/social-db';

import {
  cacheComponentTreeDetails,
  retrieveComponentTreeDetailFromCache,
} from './cache';
import { buildComponentSource } from './component';
import { CssParser } from './css';
import {
  buildContainerModuleImports,
  buildModuleImportStatements,
} from './import';
import { fetchComponentSources } from './source';
import { transpileSource } from './transpile';
import type {
  CompilerExecuteAction,
  CompilerInitAction,
  ComponentCompilerParams,
  ComponentTreeNode,
  ModuleExport,
  ModuleImport,
  ParseComponentTreeParams,
  SendMessageCallback,
  TranspiledComponentLookupParams,
  TrustedRoot,
} from './types';

interface TranspiledCacheEntry {
  children: { isTrusted: boolean; path: string; trustMode: string }[];
  exports: ModuleExport;
  imports: ModuleImport[];
  source: string;
}

export class ComponentCompiler {
  private bosSourceCache: Map<string, Promise<BOSModule | null>>;
  private localComponents: Map<string, boolean>;
  private compiledSourceCache: Map<string, TranspiledCacheEntry | null>;
  private readonly sendWorkerMessage: SendMessageCallback;
  private enableBlockHeightVersioning?: boolean;
  private enablePersistentComponentCache?: boolean;
  private social: SocialDb;
  private readonly cssParser: CssParser;

  constructor({ sendMessage }: ComponentCompilerParams) {
    this.bosSourceCache = new Map<string, Promise<BOSModule>>();
    this.localComponents = new Map<string, boolean>();
    this.compiledSourceCache = new Map<string, TranspiledCacheEntry>();
    this.cssParser = new CssParser();
    this.sendWorkerMessage = sendMessage;
    this.social = new SocialDb({
      debug: true, // TODO: Conditionally enable "debug" option
      networkId: 'mainnet', // TODO: Handle dynamically pass testnet vs mainnet
    });
  }

  init({
    localComponents,
    features: { enableBlockHeightVersioning, enablePersistentComponentCache },
  }: CompilerInitAction) {
    this.enableBlockHeightVersioning = enableBlockHeightVersioning;
    this.enablePersistentComponentCache = enablePersistentComponentCache;

    this.bosSourceCache.clear();
    this.localComponents.clear();
    this.compiledSourceCache.clear();

    Object.entries(localComponents || {}).forEach(([path, component]) => {
      this.bosSourceCache.set(path, Promise.resolve(component));
      this.localComponents.set(path, true);
    });
  }

  /**
   * Fetch and cache sources for an array of Component paths
   * If a requested path has not been cached, initialize a Promise to resolve the source
   * @param componentPaths set of Component paths to fetch source for
   */
  getComponentSources(
    componentPaths: string[]
  ): Map<string, Promise<BOSModule | null>> {
    const unfetchedPaths = componentPaths.filter(
      (componentPath) => !this.bosSourceCache.has(componentPath)
    );
    if (unfetchedPaths.length > 0) {
      const pathsFetch = fetchComponentSources({
        social: this.social,
        componentPaths: unfetchedPaths,
        features: {
          enableBlockHeightVersioning: this.enableBlockHeightVersioning,
          enablePersistentComponentCache: this.enablePersistentComponentCache,
        },
      });
      unfetchedPaths.forEach((componentPath) => {
        this.bosSourceCache.set(
          componentPath,
          pathsFetch
            .then((paths) => paths[componentPath])
            .catch((e) => {
              console.error(e, { componentPath });
              return null;
            })
        );
      });
    }

    const componentSources = new Map<string, Promise<BOSModule | null>>();
    componentPaths.forEach((componentPath) => {
      const componentSource = this.bosSourceCache.get(componentPath);
      if (componentSource) {
        componentSources.set(componentPath, componentSource);
      }
    });
    return componentSources;
  }

  /**
   * Transpile the component and cache for future lookups
   * @param componentPath path to the BOS Component
   * @param componentSource source code of the BOS Component
   * @param isComponentPathTrusted function to determine whether a child Component is rendered in a trusted context
   * @param isRoot flag indicating whether this is the root Component of a container
   */
  getTranspiledComponentSource({
    componentPath,
    componentSource,
    isComponentPathTrusted,
    isRoot,
  }: TranspiledComponentLookupParams) {
    const cacheKey = JSON.stringify({ componentPath, isRoot });
    if (!this.compiledSourceCache.has(cacheKey)) {
      try {
        const { children, code, exports, imports } = transpileSource({
          componentPath,
          source: componentSource,
          isComponentPathTrusted,
        });
        this.compiledSourceCache.set(
          cacheKey,
          code ? { children, exports, imports, source: code } : null
        );
      } catch (e) {
        console.error(`Failed to transpile ${componentPath}`, e);
        this.compiledSourceCache.set(cacheKey, null);
      }
    }

    return this.compiledSourceCache.get(cacheKey)!;
  }

  /**
   * Traverse the Component tree, building the set of Components to be included within the container
   * @param componentPath the path to the root Component of the current tree
   * @param transpiledComponent transpiled JSX source code
   * @param components set of Components accumulated while traversing the Component tree
   * @param isComponentPathTrusted callback to determine whether the current Component is to be trusted in the container
   * @param isRoot flag indicating whether the current Component is the container root
   * @param trustedRoot the trust mode inherited by the current Component from an ancestor Component (e.g. that extends trust to all child Components of the same author)
   */
  async parseComponentTree({
    componentPath,
    componentSource,
    componentStyles,
    components,
    isComponentPathTrusted,
    isRoot,
    trustedRoot,
  }: ParseComponentTreeParams) {
    // transpile and cache the Component
    const {
      children,
      exports,
      imports,
      source: transpiledComponentSource,
    } = this.getTranspiledComponentSource({
      componentPath,
      componentSource,
      isComponentPathTrusted: isComponentPathTrusted || (() => false),
      isRoot,
    });

    const packageImports = imports.filter(({ isPackage }) => isPackage);
    const { css: componentCss, source: componentFunctionSource } =
      buildComponentSource({
        componentPath,
        componentStyles,
        cssParser: this.cssParser,
        exports,
        imports,
        isRoot,
        transpiledComponentSource,
      });

    // get the set of trusted child Components to be inlined in the container
    const trustedChildComponents = children.filter(
      ({ isTrusted }) => isTrusted
    );

    const trustedRoots = children.reduce((trusted, { path, trustMode }) => {
      // trust Components with the same author as the trusted root Component
      if (trustMode === TrustMode.TrustAuthor) {
        const rootComponentAuthor = componentPath.split('/')[0];
        trusted.set(path, {
          rootPath: componentPath,
          trustMode,
          matchesRootAuthor: (path: string) =>
            path.split('/')[0] === rootComponentAuthor,
        });
      }

      return trusted;
    }, new Map<string, TrustedRoot>());

    // add the transformed source to the returned Component tree
    components.set(componentPath, {
      css: componentCss,
      imports: packageImports,
      transpiled: componentFunctionSource,
    });

    // fetch the set of child Component sources not already added to the tree
    const childComponentSources = this.getComponentSources(
      trustedChildComponents
        .map(({ path }) => path)
        .filter((path) => !(path in components))
    );

    // transpile the set of new child Components and recursively parse their Component subtrees
    await Promise.all(
      trustedChildComponents.map(async (childComponent) => {
        const { path } = childComponent;
        const componentModule = (await childComponentSources.get(path))!;
        if (!componentModule) {
          return null;
        }

        const childTrustedRoot =
          trustedRoots.get(childComponent.path) || trustedRoot;

        await this.parseComponentTree({
          componentPath: path,
          componentSource: componentModule.component,
          componentStyles: componentModule.css,
          components,
          trustedRoot: childTrustedRoot,
          isRoot: false,
          isComponentPathTrusted:
            trustedRoot?.trustMode === TrustMode.Sandboxed
              ? undefined
              : () => {
                  if (childTrustedRoot?.trustMode === TrustMode.TrustAuthor) {
                    return !!childTrustedRoot?.matchesRootAuthor(path);
                  }
                  return false;
                },
        });
      })
    );

    return components;
  }

  /**
   * Build the source for a container rooted at the target Component
   * @param componentId ID for the new container's root Component
   */
  async compileComponent({ componentId, queryParams }: CompilerExecuteAction) {
    // wait on CSS initialization
    await this.cssParser.init();

    let [componentPath] = componentId.split('##');
    const [componentPathWithoutBlockHeight, blockHeight] =
      componentPath.split('@');
    if (blockHeight && !this.enableBlockHeightVersioning) {
      console.warn(
        `${componentPath} has a block height specified, but the "enableBlockHeightVersioning" flag is disabled. The latest version of Component will be used.`
      );
      componentPath = componentPathWithoutBlockHeight;
    }
    const moduleEntry = await this.getComponentSources([componentPath]).get(
      componentPath
    );

    if (!moduleEntry) {
      throw new Error(`Component not found at ${componentPath}`);
    }

    const isLocalComponent = this.localComponents.get(componentPath);
    const componentCacheKey = `${componentPathWithoutBlockHeight}@${moduleEntry?.blockHeight}`;
    if (this.enablePersistentComponentCache && !isLocalComponent) {
      const retrievedData =
        await retrieveComponentTreeDetailFromCache(componentCacheKey);
      if (retrievedData) {
        this.sendWorkerMessage({
          componentId,
          componentSource: retrievedData.componentSource,
          containerStyles: retrievedData.containerStyles,
          rawSource: moduleEntry.component,
          componentPath,
          importedModules: retrievedData.importedModules,
          queryParams,
        });

        return;
      }
    }

    // recursively parse the Component tree for child Components
    const transformedComponents = await this.parseComponentTree({
      componentPath,
      componentSource: moduleEntry.component,
      componentStyles: moduleEntry.css,
      components: new Map<string, ComponentTreeNode>(),
      isRoot: true,
    });

    const containerModuleImports = [...transformedComponents.values()]
      .map(({ imports }) => imports)
      .flat();

    // build the import map used by the container
    const importedModules = buildContainerModuleImports(containerModuleImports);

    const componentSource = [
      ...buildModuleImportStatements(containerModuleImports),
      ...[...transformedComponents.values()].map(
        ({ transpiled }) => transpiled
      ),
    ].join('\n\n');

    // escape "</script>" literals to prevent interpolation issues
    const sanitizedSource = componentSource.replaceAll(
      /<\/script\s*>/g,
      '<\\/script>'
    );

    const containerStyles = [...transformedComponents.values()]
      .map(({ css }) => css)
      .join('\n');

    if (this.enablePersistentComponentCache && !isLocalComponent) {
      await cacheComponentTreeDetails({
        key: componentCacheKey,
        componentSource,
        containerStyles,
        importedModules,
      });
    }

    this.sendWorkerMessage({
      componentId,
      componentSource: sanitizedSource,
      containerStyles,
      rawSource: moduleEntry.component,
      componentPath,
      importedModules,
      queryParams,
    });
  }
}

'''
'''--- packages/compiler/src/component.ts ---
import type { CssParser } from './css';
import { buildComponentImportStatements } from './import';
import type { ModuleExport, ModuleImport } from './types';

/**
 * Returns the name to be used for the Component function
 * @param componentPath
 */
export function buildComponentFunctionName(componentPath?: string) {
  const name = 'BWEComponent';
  if (!componentPath) {
    return name;
  }

  return name + '_' + componentPath.replace(/[.\/-]/g, '');
}

interface BuildComponentFunctionParams {
  componentPath: string;
  componentSource: string;
  cssModuleAssignment?: string;
  exports: ModuleExport;
  importAssignments: string[];
  isRoot: boolean;
}

interface BuildComponentSourceParams {
  componentPath: string;
  componentStyles?: string;
  cssParser: CssParser;
  exports: ModuleExport;
  imports: ModuleImport[];
  isRoot: boolean;
  transpiledComponentSource: string;
}

/**
 * Build the transpiled source of a BOS Component along with its imports
 * @param componentPath path to the BOS Component
 * @param componentStyles CSS module for the BOS Component
 * @param exports identifiers exported from this BOS Component
 * @param imports structured import metadata for dependencies of the BOS Component
 * @param transpiledComponentSource transpiled source code of the BOS Component
 * @param isRoot flag indicating whether this is the root Component of a container
 */
export function buildComponentSource({
  componentPath,
  componentStyles,
  cssParser,
  exports,
  imports,
  isRoot,
  transpiledComponentSource,
}: BuildComponentSourceParams): {
  css?: string;
  cssModule?: string;
  source: string;
} {
  // assignment statements to bind imported identifiers to local aliases
  const importAssignments = imports
    .filter((moduleImport) => moduleImport.isPackage || moduleImport.isPlugin)
    .map((moduleImport) => buildComponentImportStatements(moduleImport))
    .flat()
    .filter((statement) => !!statement) as string[];

  // parse CSS and build assignment for the imported alias
  const parsedCss = componentStyles
    ? cssParser.parseCssModule(componentPath, componentStyles)
    : null;
  let cssModuleAssignment: string | undefined;
  if (parsedCss) {
    const cssModuleReference = imports.find(({ isCssModule }) => isCssModule)
      ?.imports[0].reference;

    if (cssModuleReference) {
      cssModuleAssignment = `const ${cssModuleReference} = ${JSON.stringify(
        Object.fromEntries([...parsedCss.classMap.entries()])
      )};`;
    }
  }

  // assign a known alias to the exported Component
  const source = buildComponentFunction({
    componentPath,
    componentSource: transpiledComponentSource,
    cssModuleAssignment,
    exports,
    importAssignments,
    isRoot,
  });

  return {
    css: parsedCss?.stylesheet,
    source,
  };
}

function buildComponentFunction({
  componentPath,
  componentSource,
  cssModuleAssignment,
  exports,
  importAssignments,
  isRoot,
}: BuildComponentFunctionParams) {
  const functionName = buildComponentFunctionName(isRoot ? '' : componentPath);
  const commentHeader = `${componentPath} ${isRoot ? '(root)' : ''}`;
  const rootComponentFlagSet = `${exports.default}.isRootContainerComponent = ${isRoot};`;

  return `
    /************************* ${commentHeader} *************************/
    const { default: ${functionName} } = (() => {
      ${[
        ...importAssignments,
        cssModuleAssignment,
        componentSource,
        rootComponentFlagSet,
      ]
        .filter((s) => !!s)
        .join('\n')}
      return {
        default: ${exports.default},
        ${exports.named.join(',\n')}
      };
    })();
  `;
}

'''
'''--- packages/compiler/src/css.ts ---
import browserslist from 'browserslist';
import initCssWasm, {
  browserslistToTargets,
  Targets,
  transform as transformCss,
  TransformOptions,
  TransformResult,
} from 'lightningcss-wasm';

import type { ParsedCssModule } from './types';

export class CssParser {

  private browserTargets: Targets = browserslistToTargets(browserslist('> 0.5%, last 2 versions, Firefox ESR, not dead'));

  private lightningCssTransform:
    | ((options: TransformOptions<any>) => TransformResult)
    | undefined;

  async init() {
    if (!this.lightningCssTransform) {
      await initCssWasm();
      this.lightningCssTransform = transformCss;
    }
  }

  parseCssModule(componentPath: string, css: string): ParsedCssModule {
    const { code, exports } = this.lightningCssTransform!({
      code: new TextEncoder().encode(css),
      cssModules: true,
      filename: componentPath,
      targets: this.browserTargets
    });

    return {
      classMap: new Map(
        Object.entries(exports || {}).map(([className, { name }]) => [
          className,
          name,
        ])
      ),
      stylesheet: new TextDecoder().decode(code),
    };
  }
}

'''
'''--- packages/compiler/src/import.ts ---
import initializeContainerStoragePlugin from '@bos-web-engine/container-storage-plugin';
import initializeSocialDbPlugin from '@bos-web-engine/social-db-plugin';
import initializeWalletSelectorPlugin from '@bos-web-engine/wallet-selector-plugin';

import type { ImportExpression, ModuleImport } from './types';

const PREACT_VERSION = '10.20.1';
const BWE_MODULE_URL_PREFIX = 'near://';
const PLUGIN_MODULES = new Map<string, string>([
  ['@bos-web-engine/social-db-plugin', initializeSocialDbPlugin.toString()],
  [
    '@bos-web-engine/wallet-selector-plugin',
    initializeWalletSelectorPlugin.toString(),
  ],
  [
    '@bos-web-engine/container-storage-plugin',
    initializeContainerStoragePlugin.toString(),
  ],
]);

const isBweModuleImportPath = (moduleImportPath: string) => {
  return moduleImportPath.startsWith(BWE_MODULE_URL_PREFIX);
};

/**
 * Parse import statement metadata
 * @param modulePath the import path from `import X from "X"`, where "X" can be relative ("./BWEComponent") or absolute ("react")
 * @param imports structured metadata on individual imported references, e.g. destructured, default, etc.
 */
export function parseModuleImport(
  modulePath: string,
  imports: ImportExpression[]
): ModuleImport {
  let moduleName = extractModuleName(modulePath);
  const isRelative = !!modulePath?.match(/^\.?\.\/(\.\.\/)*[a-z_$][\w\/]*$/gi);

  // TODO check against Component name
  const isCssModule =
    modulePath.startsWith('./') && modulePath.endsWith('.module.css');

  const isComponentImport = isBweModuleImportPath(modulePath);
  if (isComponentImport) {
    moduleName = moduleName.replace(BWE_MODULE_URL_PREFIX, '');
    modulePath = modulePath.replace(BWE_MODULE_URL_PREFIX, '');
  }

  const isPlugin = PLUGIN_MODULES.has(moduleName);
  const isBweModule = (isRelative && !isCssModule) || isComponentImport;

  return {
    imports,
    isBweModule,
    isCssModule,
    isPackage: !isPlugin && !isBweModule && !isCssModule,
    isPlugin,
    isRelative,
    moduleName,
    modulePath,
  } as ModuleImport;
}

const extractModuleName = (modulePath: string) => {
  let path = modulePath;
  if (modulePath.startsWith('https://')) {
    path = modulePath.split('/').slice(3).join('/');
    const terminatingIndex = ['&', '?'].reduce(
      (min, c) => Math.min(path.indexOf(c), min),
      path.length
    );

    if (terminatingIndex > 1) {
      path = path.slice(0, terminatingIndex);
    }
  }

  if (path.startsWith('@')) {
    return `@${path.split('@')[1]}`;
  }

  return path;
};

/**
 * Build container-level imports based on module imports across all Components
 * @param moduleImports set of module imports across Components within a container
 */
export const buildModuleImportStatements = (
  moduleImports: ModuleImport[]
): string[] => {
  if (!moduleImports.length) {
    return [];
  }

  const sideEffectImports = moduleImports
    .filter(({ isSideEffect }) => isSideEffect)
    .map(({ moduleName }) => `import "${moduleName}";`);

  const importsByModule = moduleImports.reduce(
    (byModule, { imports, isSideEffect, moduleName }) => {
      if (isSideEffect) {
        return byModule;
      }

      if (!byModule.has(moduleName)) {
        byModule.set(moduleName, []);
      }

      const currentImports = byModule.get(moduleName)!;
      byModule.set(moduleName, currentImports.concat(imports));

      return byModule;
    },
    new Map<string, ImportExpression[]>()
  );

  const importStatements: string[] = [...importsByModule.entries()]
    .map(([moduleName, imports]) => {
      const { defaultAlias, namespaceAlias } = buildModuleAliases(moduleName);
      const { defaultImport, destructuredImports, namespaceImport } =
        aggregateModuleImports(imports);

      const destructuredReferences = [
        ...new Set(
          destructuredImports.map(({ alias, reference }) =>
            alias ? `${reference} as ${alias}` : reference
          )
        ),
      ].join(', ');

      // only destructured references, cannot assume the module has a default import
      if (!defaultImport && !namespaceImport) {
        return `import { ${destructuredReferences} } from "${moduleName}";`;
      }

      if (defaultImport) {
        if (namespaceImport) {
          return `import ${defaultAlias}, * as ${namespaceAlias} from "${moduleName}";`;
        } else if (destructuredReferences) {
          return `import ${defaultAlias}, { ${destructuredReferences} } from "${moduleName}";`;
        } else {
          return `import ${defaultAlias} from "${moduleName}";`;
        }
      }

      if (namespaceImport) {
        return `import * as ${namespaceAlias} from "${moduleName}";`;
      }

      return '';
    })
    .filter((statement) => !!statement);

  return [...importStatements, ...sideEffectImports];
};

/**
 * Build container-level module aliases to be referenced by individual Components
 * @param moduleName name of the imported module
 */
const buildModuleAliases = (moduleName: string) => {
  // replace invalid JS identifier chars with _
  const moduleAlias = moduleName.replace(/[:?&/@.-]/g, '_');

  return {
    defaultAlias: `__BWEModule__${moduleAlias}`,
    namespaceAlias: `__BWEModuleNS__${moduleAlias}`,
  };
};

interface ImportsByType {
  defaultImport: ImportExpression;
  destructuredImports: ImportExpression[];
  namespaceImport: ImportExpression;
}

/**
 * Build the set of assignment statements for a Component to reference an imported module
 * @param moduleImport all imported references for a specific module imported by a Component
 */
export const buildComponentImportStatements = (
  moduleImport: ModuleImport
): string[] => {
  const { imports, isPlugin, isSideEffect, moduleName } = moduleImport;
  if (isSideEffect) {
    return [];
  }

  const { defaultAlias, namespaceAlias } = buildModuleAliases(moduleName);
  const { defaultImport, destructuredImports, namespaceImport } =
    aggregateModuleImports(imports);

  const statements: string[] = [];
  const destructuredStatements = destructuredImports
    .map(({ alias, reference }: ImportExpression) => {
      // import { X as x } from 'x'
      if (alias) {
        return `${reference}: ${alias}`;
      }

      // import { X } from 'x'
      return reference;
    })
    .join(', ');

  if (isPlugin) {
    statements.push(
      `const ${defaultAlias} = (${PLUGIN_MODULES.get(moduleName)})();`
    );
    statements.push(`const ${namespaceAlias} = ${defaultAlias};`);
  }

  if (defaultImport) {
    // import X from 'x'
    statements.push(`const ${defaultImport.reference} = ${defaultAlias};`);
    if (destructuredStatements) {
      // import X, { x, y } from 'x'
      statements.push(`const { ${destructuredStatements} } = ${defaultAlias};`);
    } else if (namespaceImport) {
      // import X, * as XStar from 'x'
      statements.push(`const ${namespaceImport.alias} = ${namespaceAlias};`);
    }
  } else if (namespaceImport) {
    statements.push(`const ${namespaceImport.alias} = ${namespaceAlias};`);
  } else if (destructuredStatements) {
    // import { x, y } from 'x'
    // if the import only uses destructured references, it's possible that the module
    // does not expose a default, causing a default-style import to break - therefore
    // assume that all imports with only destructuring behave in this way
    // this means references for destructuring imports are always at container scope

    // plugins are expanded inline, the destructuring "import" here is an object destructure
    if (isPlugin) {
      statements.push(`const { ${destructuredStatements} } = ${defaultAlias};`);
    }
  } else {
    throw new Error(`Invalid import for module ${moduleName}`);
  }

  return statements;
};

/**
 * Break down a set of imports for a particular module based on how it's imported
 * @param imports set of imports for this module (i.e. across a single Component or container)
 */
const aggregateModuleImports = (imports: ImportExpression[]): ImportsByType => {
  return imports.reduce(
    (importsByType, expression) => {
      if (expression.isDefault) {
        importsByType.defaultImport = expression;
      } else if (expression.isNamespace) {
        importsByType.namespaceImport = expression;
      } else if (expression.isDestructured) {
        importsByType.destructuredImports.push(expression);
      }
      return importsByType;
    },
    {
      defaultImport: '',
      destructuredImports: [],
      namespaceImport: '',
    } as ImportsByType
  );
};

/**
 * Build the importmap URL based on package name/URL
 * @param moduleName module name specified in the import statement
 * @param modulePath module import path
 */
export const buildModulePackageUrl = (
  moduleName: string,
  modulePath: string
) => {
  if (modulePath.startsWith('https://')) {
    return {
      moduleName,
      url: modulePath,
    };
  }

  return {
    moduleName,
    url: `https://esm.sh/${moduleName}?alias=react:preact/compat&external=preact`,
  };
};

/**
 * Given a set of module imports, construct the importmap with references to esm.sh modules
 * @param containerModuleImports set of module imports across the container
 */
export const buildContainerModuleImports = (
  containerModuleImports: ModuleImport[]
) => {
  const importedModules = containerModuleImports.reduce(
    (importMap, { moduleName, modulePath }) => {
      const importMapEntries = buildModulePackageUrl(moduleName, modulePath);

      if (!importMapEntries) {
        return importMap;
      }

      const moduleEntry = importMap.get(moduleName);
      if (moduleEntry) {
        return importMap;
      }

      importMap.set(importMapEntries.moduleName, importMapEntries.url);
      return importMap;
    },
    new Map<string, string>()
  );

  // set the Preact import maps
  const preactImportPath = `https://esm.sh/stable/preact@${PREACT_VERSION}`;
  const preactCompatPath = `https://esm.sh/preact@${PREACT_VERSION}/compat`;
  importedModules.set('preact', preactImportPath);
  importedModules.set('react', preactCompatPath);
  importedModules.set('react-dom', preactCompatPath);

  // remove conflicting imports from source
  for (const moduleName of importedModules.keys()) {
    const [lib, subpath] = moduleName.split('/');
    if (subpath && ['preact', 'react-dom'].includes(lib)) {
      importedModules.delete(moduleName);
    }
  }

  importedModules.set('preact/compat', preactCompatPath);
  importedModules.set('preact/compat/', `${preactCompatPath}/`);

  return importedModules;
};

'''
'''--- packages/compiler/src/index.ts ---
export type {
  ComponentCompilerRequest,
  ComponentCompilerResponse,
} from './types';

export { ComponentCompiler } from './compiler';

export { ROC_INDEX_DB } from './cache';

'''
'''--- packages/compiler/src/source.ts ---
import {
  BLOCK_HEIGHT_KEY,
  SOCIAL_COMPONENT_NAMESPACE,
} from '@bos-web-engine/social-db';

import {
  ComponentSourcesResponse,
  FetchComponentSourcesParams,
  SocialComponentsByAuthor,
} from './types';

function prepareSourceWithBlockHeight(
  response: SocialComponentsByAuthor
): ComponentSourcesResponse {
  return Object.entries(response).reduce((sources, [entryKey, entryValue]) => {
    const { [SOCIAL_COMPONENT_NAMESPACE]: component } = entryValue;

    Object.entries(component).forEach(([componentKey, componentValue]) => {
      const sourceKey = `${entryKey}/${componentKey}`;
      sources[sourceKey] = {
        component: componentValue[''][''],
        css: componentValue.css?.[''],
        blockHeight: componentValue[BLOCK_HEIGHT_KEY],
      };
    });

    return sources;
  }, {} as ComponentSourcesResponse);
}

function parseComponentResponse(
  response: SocialComponentsByAuthor
): SocialComponentsByAuthor {
  return Object.fromEntries(
    Object.entries(response)
      .filter(([entryKey]) => entryKey !== BLOCK_HEIGHT_KEY)
      .map(([author, { [SOCIAL_COMPONENT_NAMESPACE]: componentEntry }]) => [
        author,
        {
          [SOCIAL_COMPONENT_NAMESPACE]: Object.fromEntries(
            Object.entries(componentEntry).filter(
              ([entryKey]) => entryKey !== BLOCK_HEIGHT_KEY
            )
          ),
        },
      ])
  );
}

export async function fetchComponentSources({
  social,
  componentPaths,
  features,
}: FetchComponentSourcesParams) {
  if (!features.enableBlockHeightVersioning) {
    const keys = componentPaths.map(
      (p) => p.split('/').join(`/${SOCIAL_COMPONENT_NAMESPACE}/`) + '/*'
    );

    const response = (await social.get({
      keys,
      options: {
        with_block_height: true,
      },
    })) as SocialComponentsByAuthor;

    return prepareSourceWithBlockHeight(parseComponentResponse(response));
  }

  /**
   * Requested components mapped by the block heights to reduce the amount of social requests
   * If no block height specified - the "" key is used
   */
  const componentsByBlockHeight = componentPaths.reduce(
    (pathsByBlockHeight, componentPath) => {
      const [path, blockHeight] = componentPath.split('@');
      const blockHeightKey = blockHeight || '';

      if (!pathsByBlockHeight[blockHeightKey]) {
        pathsByBlockHeight[blockHeightKey] = [];
      }

      pathsByBlockHeight[blockHeightKey].push(
        path.split('/').join(`/${SOCIAL_COMPONENT_NAMESPACE}/`) + '/*'
      );

      return pathsByBlockHeight;
    },
    {} as Record<string, string[]>
  );

  const componentsByBlockHeightArr = Object.entries(componentsByBlockHeight);

  const responsesWithBlockHeight = await Promise.all(
    componentsByBlockHeightArr.map(async ([blockId, keys]) => {
      const response = (await social.get({
        keys,
        options: { with_block_height: true },
        blockId: Number(blockId),
      })) as SocialComponentsByAuthor;

      if (!blockId) {
        return parseComponentResponse(response);
      }

      return Object.fromEntries(
        Object.entries(response)
          .filter(([entryKey]) => entryKey !== BLOCK_HEIGHT_KEY)
          .map(([author, { [SOCIAL_COMPONENT_NAMESPACE]: componentEntry }]) => [
            author,
            {
              [SOCIAL_COMPONENT_NAMESPACE]: Object.fromEntries(
                Object.entries(componentEntry)
                  .filter(([entryKey]) => entryKey !== BLOCK_HEIGHT_KEY)
                  .map(([componentPath, componentSource]) => [
                    `${componentPath}@${blockId}`,
                    componentSource,
                  ])
              ),
            },
          ])
      );
    })
  );

  const aggregatedResponses = responsesWithBlockHeight.reduce(
    (accumulator, response) => {
      Object.entries(response).forEach(
        ([author, { [SOCIAL_COMPONENT_NAMESPACE]: componentEntry }]) => {
          if (accumulator[author]?.[SOCIAL_COMPONENT_NAMESPACE]) {
            accumulator[author][SOCIAL_COMPONENT_NAMESPACE] = {
              ...accumulator[author][SOCIAL_COMPONENT_NAMESPACE],
              ...componentEntry,
            };
          } else {
            accumulator[author] = {
              [SOCIAL_COMPONENT_NAMESPACE]: componentEntry,
            };
          }
        }
      );

      return accumulator;
    },
    {}
  );

  return prepareSourceWithBlockHeight(aggregatedResponses);
}

'''
'''--- packages/compiler/src/transpile.ts ---
import Babel from '@babel/standalone';
import type {
  CallExpression,
  ExportDefaultDeclaration,
  ExportNamedDeclaration,
  Expression,
  FunctionDeclaration,
  Identifier,
  ImportDeclaration,
  ImportSpecifier,
  NullLiteral,
  ObjectExpression,
  ObjectMethod,
  ObjectProperty,
  SpreadElement,
  StringLiteral,
  TSAsExpression,
  VariableDeclaration,
} from '@babel/types';
import { TrustMode } from '@bos-web-engine/common';

import { buildComponentFunctionName } from './component';
import { parseModuleImport } from './import';
import type { ImportExpression, ModuleExport, ModuleImport } from './types';

/**
 * Derive a BOS Component path from a relative import
 * @param componentPath path of the Component importing another BOS Component via relative path
 * @param componentImport import metadata for the relative import
 */
export function deriveComponentPath(
  componentPath: string,
  componentImport: ModuleImport
) {
  const [author, component] = componentPath.split('/');
  const { modulePath } = componentImport;
  const importPathComponents = modulePath.split('/');
  const pathComponents = component.split('.');

  const parentCount = modulePath.startsWith('..')
    ? modulePath.split('..').length - 1
    : 0;

  return `${author}/${[
    ...pathComponents.slice(
      parentCount,
      pathComponents.length -
        importPathComponents.filter((p) => p.startsWith('.')).length
    ),
    ...importPathComponents.slice(1),
  ].join('.')}`;
}

/**
 * Determine whether a child Component is trusted and can be inlined within the current container
 * @param trustMode explicit trust mode provided for this child render
 * @param path child Component's path
 * @param isComponentPathTrusted flag indicating whether the child is implicitly trusted by virtue of being under a trusted root
 */
function isChildComponentTrusted(
  { trustMode, path }: { trustMode: string | undefined; path: string },
  isComponentPathTrusted?: (p: string) => boolean
) {
  // child is explicitly trusted by parent or constitutes a new trusted root
  if (trustMode === TrustMode.Trusted || trustMode === TrustMode.TrustAuthor) {
    return true;
  }

  // child is explicitly sandboxed
  if (trustMode === TrustMode.Sandboxed) {
    return false;
  }

  // if the Component is not explicitly trusted or sandboxed, use the parent's
  // predicate to determine whether the Component should be trusted
  if (isComponentPathTrusted) {
    return isComponentPathTrusted(path);
  }

  return false;
}

interface TranspileSourceParams {
  componentPath: string;
  source: string;
  isComponentPathTrusted?: (path: string) => boolean;
}

export function transpileSource({
  componentPath,
  source,
  isComponentPathTrusted,
}: TranspileSourceParams) {
  const exports: ModuleExport = { default: '', named: [] };
  const imports: ModuleImport[] = [];
  const componentReferences: { [component: string]: ModuleImport } = {};
  const children: {
    isTrusted: boolean;
    path: string;
    trustMode: string;
  }[] = [];

  const transformComponents = ({ types: t }: any) => ({
    visitor: {
      CallExpression(path: {
        node: {
          arguments: [
            Identifier | StringLiteral,
            ObjectExpression | CallExpression | undefined,
          ];
          callee: { object: Identifier; property: Identifier };
        };
        remove: () => void;
      }) {
        const {
          arguments: args,
          callee: { object, property },
        } = path.node;

        const isCreateElement =
          object?.name === '__Preact' && property?.name === 'createElement';
        const isElement = t.isStringLiteral(args[0]);
        if (!isCreateElement || isElement) {
          if (isElement && (args[0] as StringLiteral).value === 'script') {
            path.remove();
          }
          return;
        }

        let [Component, props] = args as [
          Identifier,
          ObjectExpression | CallExpression | NullLiteral,
        ];

        if (t.isNullLiteral(props)) {
          // if props were not provided, initialize to an empty object
          props = t.objectExpression([]);
          path.node.arguments[1] = props as ObjectExpression;
        } else if (
          t.isCallExpression(props) &&
          ((props as CallExpression).callee as Identifier)?.name === '_extends'
        ) {
          // if props is a CallExpression from Babel's _extends() function,
          // modify the explicitly-specified props and leave the spread
          props = (props as CallExpression).arguments[0] as ObjectExpression;
        }
        props = props as ObjectExpression;

        /**
         * FIXME referencing `arguments` only works when the Component rendering takes place within
         *  in a scope in which the correct props is bound to arguments[0], i.e. the Component's root
         *  scope - in the directly-returned JSX or an arrow function in the Component's root scope.
         *
         *  TODO the correct solution is for the parser to inject the `bwe` reference into the Component
         *   props argument, but it would also need to be made accessible to the render site
         *
         *   TL; DR
         *   this preserves ancestry:
         *   import Y from './Y';
         *   export default function X() { return <Y />; }
         *
         *   this doesn't:
         *   import Y from './Y';
         *   const renderY = () => <Y />;
         *   export default function X() { return <>{renderY()}</> }
         */
        const propsAccessor = t.memberExpression(
          t.identifier('arguments'),
          t.numericLiteral(0),
          true
        );

        const keyProp = (props.properties as ObjectProperty[]).find(
          ({ key }) => t.isIdentifier(key) && (key as Identifier).name === 'key'
        ) as ObjectProperty;

        const bweMeta = t.objectExpression([
          t.objectProperty(
            t.identifier('parentMeta'),
            t.logicalExpression(
              '&&',
              propsAccessor,
              t.memberExpression(propsAccessor, t.identifier('bwe'))
            )
          ),
          ...(keyProp
            ? [t.objectProperty(t.identifier('key'), keyProp.value)]
            : []),
        ]);

        const propsExpressions = props.properties.reduce(
          (
            expressions,
            property: ObjectMethod | ObjectProperty | SpreadElement
          ) => {
            const { key, value } = property as ObjectProperty;
            const name = (key as Identifier)?.name;
            if (!name) {
              if (!t.isSpreadElement(property)) {
                console.error(`Unexpected props type "${property.type}"`);
              }

              return expressions;
            }
            expressions[name] = value;
            return expressions;
          },
          {} as any
        ) as {
          bwe?: ObjectExpression;
          key?: string;
          src?: StringLiteral | Identifier;
        };

        const componentImport = componentReferences[Component.name];
        if (componentImport) {
          const src = componentImport.isRelative
            ? deriveComponentPath(componentPath, componentImport)
            : componentImport.modulePath;

          const trustValue = (
            (
              propsExpressions.bwe?.properties.find((p) => {
                if (!t.isObjectProperty(p)) {
                  return;
                }

                const { key } = p as ObjectProperty;
                if (t.isStringLiteral(key)) {
                  return (key as StringLiteral).value === 'trust';
                }

                if (t.isIdentifier(key)) {
                  return (key as Identifier).name === 'trust';
                }

                return;
              }) as ObjectProperty
            )?.value as ObjectExpression
          )?.properties[0] as ObjectProperty;

          const trustMode = (trustValue?.value as StringLiteral)?.value;
          const isTrusted = isChildComponentTrusted(
            {
              trustMode,
              path: src,
            },
            isComponentPathTrusted
          );

          children.push({
            isTrusted,
            path: src,
            trustMode,
          });

          // replace imported reference depending on the render mode
          // - sandboxed: dynamic <Component /> to be initialized when the current container's Component tree is rendered
          // - trusted: static Component references, derived from Component path, rendered within the current container's Component tree
          Component.name = isTrusted
            ? buildComponentFunctionName(src)
            : 'Component';

          // no value for `props.bwe`, create new object for metadata
          if (!propsExpressions.bwe) {
            const createdBweProp = t.objectExpression([]);
            props.properties.push(
              t.objectProperty(t.identifier('bwe'), createdBweProp)
            );
            propsExpressions.bwe = createdBweProp;
          }

          // inject the src prop
          const srcProperty = t.objectProperty(
            t.identifier('src'),
            t.stringLiteral(src)
          );

          propsExpressions.bwe!.properties = [
            ...propsExpressions.bwe!.properties,
            srcProperty,
            ...bweMeta.properties,
          ];
        }
      },
      ExportDeclaration(path: {
        node: ExportDefaultDeclaration | ExportNamedDeclaration;
        remove(): void;
        replaceWith(
          declaration: FunctionDeclaration | VariableDeclaration
        ): void;
        replaceWithMultiple(expressions: Expression[]): void;
      }) {
        if (t.isExportDefaultDeclaration(path.node)) {
          let component: Identifier | undefined;
          const declaration = (path.node as ExportDefaultDeclaration)
            .declaration as TSAsExpression | FunctionDeclaration | Identifier;

          if (t.isTSAsExpression(declaration)) {
            // export default X;
            component = (declaration as TSAsExpression)
              .expression as Identifier;

            path.remove();
          } else if (t.isFunctionDeclaration(declaration)) {
            // export default function X()
            component = (declaration as FunctionDeclaration).id as Identifier;
            if (!component) {
              // export default function ()
              component = t.identifier('BWEPlaceholderComponent');
              (declaration as FunctionDeclaration).id = component as Identifier;
            }

            path.replaceWith(declaration as FunctionDeclaration);
          } else if (t.isIdentifier(declaration)) {
            component = declaration as Identifier;
            path.remove();
          } else {
            console.error(`unsupported declaration type ${declaration?.type}`);
          }

          exports.default = component!.name;
        } else if (t.isExportNamedDeclaration(path.node)) {
          const { declaration } = path.node as ExportNamedDeclaration;
          if (t.isVariableDeclaration(declaration)) {
            const [exported] = (declaration as VariableDeclaration)
              .declarations;
            const exportedName = (exported.id as Identifier).name;
            exports.named.push(exportedName);
            if (exportedName === 'BWEComponent' && !exports.default) {
              exports.default = exportedName;
              console.warn(
                `Component ${componentPath} relies on a named export for "BWEComponent". In future versions, the module Component must be a default export.`
              );
            }

            path.replaceWith(declaration as VariableDeclaration);
          } else if (declaration === null) {
            path.remove();
          } else {
            console.error(`unsupported export type ${path.node.type}`);
          }
        }
      },
      ImportDeclaration(path: { node: ImportDeclaration; remove(): void }) {
        const {
          node: { source, specifiers },
        } = path;

        const importExpressions = specifiers.map((specifier) => {
          if (t.isImportSpecifier(specifier)) {
            const { imported, local } = specifier as ImportSpecifier;
            return {
              alias: local.name,
              isDestructured: true,
              reference: t.isIdentifier(imported)
                ? (imported as Identifier).name
                : (imported as StringLiteral).value,
            };
          } else if (t.isImportDefaultSpecifier(specifier)) {
            return {
              isDefault: true,
              reference: specifier.local.name,
            };
          } else if (t.isImportNamespaceSpecifier(specifier)) {
            return {
              isNamespace: true,
              alias: specifier.local.name,
            };
          }
        }) as ImportExpression[];

        const moduleImport = parseModuleImport(source.value, importExpressions);
        if (moduleImport.isBweModule) {
          const { reference } = moduleImport.imports.find(
            ({ isDefault }) => isDefault
          )!;
          componentReferences[reference!] = moduleImport;
        }

        imports.push(moduleImport);
        path.remove();
        return;
      },
    },
  });

  const { code } = Babel.transform(source, {
    presets: [Babel.availablePresets['typescript']],
    plugins: [
      [
        Babel.availablePlugins['transform-react-jsx'],
        { pragma: '__Preact.createElement' },
      ],
      transformComponents,
    ],
    filename: 'component.tsx', // name is not important, just the extension
  });

  if (!exports.default) {
    throw new Error(`${componentPath} missing default-exported Component`);
  }

  return { children, code, exports, imports };
}

'''
'''--- packages/compiler/src/types.ts ---
import type { BOSModule, QueryParams } from '@bos-web-engine/common';
import type {
  BLOCK_HEIGHT_KEY,
  SOCIAL_COMPONENT_NAMESPACE,
  SocialDb,
} from '@bos-web-engine/social-db';

export type ComponentCompilerRequest =
  | CompilerExecuteAction
  | CompilerInitAction;

export interface CompilerExecuteAction {
  action: 'execute';
  componentId: string;
  queryParams?: QueryParams;
}

export type LocalComponentMap = { [path: string]: BOSModule };

export interface FeatureFlags {
  enableBlockHeightVersioning?: boolean;
  enablePersistentComponentCache?: boolean;
}

export interface CompilerInitAction {
  action: 'init';
  localComponents?: LocalComponentMap;
  features: FeatureFlags;
}

export interface ComponentCompilerResponse {
  componentId: string;
  componentSource: string;
  containerStyles: string;
  rawSource: string;
  componentPath: string;
  error?: Error;
  importedModules: Map<string, string>;
  queryParams?: QueryParams;
}

export type SendMessageCallback = (res: ComponentCompilerResponse) => void;

export interface ComponentCompilerParams {
  sendMessage: SendMessageCallback;
}

export interface TranspiledComponentLookupParams {
  componentPath: string;
  componentSource: string;
  isComponentPathTrusted: (path: string) => boolean;
  isRoot: boolean;
}

export type ComponentMap = Map<string, ComponentTreeNode>;

export interface ParsedCssModule {
  classMap: Map<string, string>;
  stylesheet: string;
}

export interface ComponentTreeNode {
  css?: string;
  imports: ModuleImport[];
  transpiled: string;
}

export interface ParseComponentTreeParams {
  components: ComponentMap;
  componentSource: string;
  componentStyles?: string;
  componentPath: string;
  isComponentPathTrusted?: (path: string) => boolean;
  isRoot: boolean;
  trustedRoot?: TrustedRoot;
}

export interface TrustedRoot {
  rootPath: string;
  trustMode: string;
  /* predicates for determining trust under a trusted root */
  matchesRootAuthor: (path: string) => boolean;
}

// structured representation of import statement
export interface ModuleImport {
  imports: ImportExpression[];
  isBweModule?: boolean;
  isCssModule: boolean;
  isPackage: boolean;
  isPlugin: boolean;
  isRelative?: boolean;
  isSideEffect?: boolean;
  moduleName: string;
  modulePath: string;
}

// structured representation of individual imported reference statement
export interface ImportExpression {
  alias?: string;
  isDefault?: boolean;
  isDestructured?: boolean;
  isNamespace?: boolean;
  reference?: string;
}

export interface ComponentEntry {
  '': string;
  css: string;
  blockId?: number;
}

export interface ModuleExport {
  default: string;
  named: string[];
}

interface WithBlockHeight {
  [BLOCK_HEIGHT_KEY]: number;
}

interface SourceWithBlockHeight extends WithBlockHeight {
  '': string;
}

export interface ComponentEntryWithBlockHeight extends WithBlockHeight {
  '': SourceWithBlockHeight;
  css: SourceWithBlockHeight;
}

export interface SocialWidget {
  [name: string]: ComponentEntryWithBlockHeight;
}

export interface SocialComponent {
  [SOCIAL_COMPONENT_NAMESPACE]: SocialWidget;
}

export interface SocialComponentsByAuthor {
  [author: string]: SocialComponent;
}

export type ComponentSourcesResponse = { [key: string]: BOSModule };

export interface ComponentCacheRecord {
  key: string;
  componentSource: string;
  containerStyles: string;
  importedModules: Map<string, string>;
}

export interface FetchComponentSourcesParams {
  social: SocialDb;
  componentPaths: string[];
  features: FeatureFlags;
}

'''
'''--- packages/compiler/tsconfig.json ---
{
  "extends": "tsconfig/react-library.json",
  "include": ["src"],
  "exclude": ["lib", "node_modules"],
  "compilerOptions": {
    "outDir": "lib"
  }
}

'''
'''--- packages/container-storage-plugin/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ['custom'],
};

'''
'''--- packages/container-storage-plugin/package.json ---
{
    "name": "@bos-web-engine/container-storage-plugin",
    "version": "1.0.0",
    "description": "",
    "main": "lib/index.js",
    "scripts": {
        "build": "tsc -p ./tsconfig.json",
        "dev": "tsc -w -p ./tsconfig.json",
        "lint": "eslint ./src/**/*.ts*",
        "lint:fix": "eslint . --fix"
    },
    "keywords": [],
    "author": "",
    "license": "ISC",
    "devDependencies": {
        "@bos-web-engine/common": "workspace:*",
        "@types/node": "^17.0.12",
        "eslint": "^7.32.0",
        "eslint-config-custom": "workspace:*",
        "tsconfig": "workspace:*",
        "typescript": "^4.5.2"
    }
}

'''
'''--- packages/container-storage-plugin/src/index.ts ---
import type { WebEngine, WebEngineContext } from '@bos-web-engine/common';

declare global {
  interface Window {
    webEngine: WebEngine;
  }
}

export interface ContainerStoragePlugin {
  getItem: (key: string) => Promise<string>;
  removeItem: (key: string) => void;
  setItem: (key: string, value: string) => void;
}

export default function initializeContainerStoragePlugin() {
  function initContainerStoragePlugin({
    callApplicationMethod,
  }: WebEngineContext): ContainerStoragePlugin {
    const getItem: ContainerStoragePlugin['getItem'] = (...args) =>
      callApplicationMethod({
        args,
        method: 'containerStorage.getItem',
      });

    const removeItem: ContainerStoragePlugin['removeItem'] = (...args) =>
      callApplicationMethod({
        args,
        method: 'containerStorage.removeItem',
      });

    const setItem: ContainerStoragePlugin['setItem'] = (...args) =>
      callApplicationMethod({
        args,
        method: 'containerStorage.setItem',
      });

    return {
      getItem,
      removeItem,
      setItem,
    };
  }

  return window.webEngine.initPlugin(initContainerStoragePlugin);
}

'''
'''--- packages/container-storage-plugin/tsconfig.json ---
{
  "extends": "tsconfig/react-library.json",
  "include": ["src"],
  "exclude": ["lib", "node_modules"],
  "compilerOptions": {
    "outDir": "lib"
  }
}

'''
'''--- packages/container/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ['custom'],
};

'''
'''--- packages/container/package.json ---
{
  "name": "@bos-web-engine/container",
  "version": "1.0.0",
  "description": "",
  "main": "lib/index.js",
  "scripts": {
    "build": "tsc -p ./tsconfig.json",
    "dev": "tsc -w -p ./tsconfig.json",
    "lint": "eslint ./src/**/*.ts*",
    "lint:fix": "eslint . --fix"
  },
  "devDependencies": {
    "@bos-web-engine/common": "workspace:*",
    "@types/node": "^17.0.12",
    "eslint": "^7.32.0",
    "eslint-config-custom": "workspace:*",
    "preact": "^10.18.1",
    "tsconfig": "workspace:*",
    "typescript": "^4.5.2"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

'''
'''--- packages/container/src/callbacks.ts ---
import type {
  InvokeExternalCallbackParams,
  InvokeInternalCallbackParams,
} from './types';

/**
 * Execute the callback and return the value
 * @param args The arguments to the invoked callback
 * @param callback The function to execute
 */
export function invokeInternalCallback({
  args,
  callback,
}: InvokeInternalCallbackParams): any {
  if (args === undefined) {
    return callback();
  }

  // TODO real implementation for event passing
  // @ts-expect-error
  if (args?.event) {
    // @ts-expect-error
    return callback(args.event);
  }

  // @ts-expect-error
  return callback(...args);
}

/**
 * Invoke a callback declared within a Component
 * @param args The arguments to the invoked callback
 * @param callbacks The set of callbacks defined on the target Component
 * @param containerId ID of the container invoking the method
 * @param initExternalCallbackInvocation Function to initialize a callback invocation request
 * @param invokeInternalCallback Function to execute the specified function in the current Component's context
 * @param method The name of the callback to be invoked
 * @param postCallbackInvocationMessage Request invocation on external Component via window.postMessage
 * @param serializeArgs Function to serialize arguments passed to window.postMessage
 */
export function invokeExternalContainerCallback({
  args,
  callbacks,
  containerId,
  initExternalCallbackInvocation,
  invokeInternalCallback,
  method,
  postCallbackInvocationMessage,
  serializeArgs,
}: InvokeExternalCallbackParams): any {
  // unknown method
  if (!callbacks[method]) {
    console.error(`No method ${method} on container ${containerId}`);
    return null;
  }

  // some arguments to this callback are methods on other Components
  // these must be replaced with wrappers invoking Component methods
  if (
    typeof args?.some === 'function' &&
    args.some((arg: any) => arg?.callbackIdentifier)
  ) {
    args = args.map((arg: any) => {
      const { callbackIdentifier } = arg;
      if (!callbackIdentifier) {
        return arg;
      }

      return (...childArgs: any[]) => {
        const { invocationId } = initExternalCallbackInvocation();

        postCallbackInvocationMessage({
          args: childArgs,
          containerId,
          method: callbackIdentifier,
          requestId: invocationId,
          serializeArgs,
          targetId: callbackIdentifier.split('::').slice(1).join('::'),
        });
      };
    });
  }

  return invokeInternalCallback({ args, callback: callbacks[method] });
}

/**
 * Invoke a method on the outer window application
 * @param args The arguments to the invoked callback
 * @param callbacks The set of callbacks defined on the target Component
 * @param containerId ID of the container invoking the method
 * @param initExternalCallbackInvocation Function to initialize a callback invocation request
 * @param method The name of the callback to be invoked
 * @param postCallbackInvocationMessage Request invocation on external Component via window.postMessage
 * @param serializeArgs Function to serialize arguments passed to window.postMessage
 */
export function invokeApplicationCallback<T>({
  args,
  containerId,
  initExternalCallbackInvocation,
  method,
  postCallbackInvocationMessage,
  serializeArgs,
}: InvokeExternalCallbackParams): Promise<T> {
  const { invocation, invocationId } = initExternalCallbackInvocation<T>();
  postCallbackInvocationMessage({
    args,
    containerId,
    method,
    requestId: invocationId,
    serializeArgs,
    targetId: null,
  });

  return invocation;
}

'''
'''--- packages/container/src/container.ts ---
import type {
  InvokeApplicationCallbackParams,
  Props,
} from '@bos-web-engine/common';

import type { CallbackRequest, InitContainerParams } from './types';

export function initContainer({
  containerMethods: {
    buildEventHandler,
    buildRequest,
    composeMessagingMethods,
    composeRenderMethods,
    composeSerializationMethods,
    invokeApplicationCallback,
    invokeExternalContainerCallback,
    invokeInternalCallback,
  },
  context: {
    Component,
    componentPropsJson,
    containerId,
    Fragment,
    parentContainerId,
    trust,
    updateContainerProps,
  },
}: InitContainerParams) {
  const callbacks: { [key: string]: Function } = {};
  const requests: { [key: string]: CallbackRequest } = {};

  const initExternalCallbackInvocation = () => {
    const invocationId = window.crypto.randomUUID();
    requests[invocationId] = buildRequest();
    return { invocationId, invocation: requests[invocationId].promise };
  };

  const {
    postCallbackInvocationMessage,
    postCallbackResponseMessage,
    postComponentRenderMessage,
    postDomMethodInvocationMessage,
  } = composeMessagingMethods();

  const { deserializeArgs, deserializeProps, serializeArgs, serializeNode } =
    composeSerializationMethods({
      callbacks,
      initExternalCallbackInvocation,
      isComponent: (c) => c === Component,
      parentContainerId,
      postCallbackInvocationMessage,
    });

  const { commit } = composeRenderMethods({
    containerId,
    isComponent: (c) => c === Component,
    isExternalComponent: (c) => !('isRootContainerComponent' in c),
    isFragment: (c) => c === Fragment,
    isRootComponent: (c) => !!c?.isRootContainerComponent,
    postComponentRenderMessage,
    postDomMethodInvocationMessage,
    serializeArgs,
    serializeNode,
    trust,
  });

  const isMatchingProps = (props: Props, compareProps: Props) => {
    const getComparable = (p: Props) =>
      Object.entries(p)
        .sort(([aKey], [bKey]) => (aKey === bKey ? 0 : aKey > bKey ? 1 : -1))
        .filter(([k]) => k !== 'bwe')
        .map(([key, value]) => `${key}::${value?.toString()}`)
        .join(',');

    return getComparable(props) === getComparable(compareProps);
  };

  const processEvent = buildEventHandler({
    callbacks,
    containerId,
    deserializeArgs,
    deserializeProps,
    initExternalCallbackInvocation,
    invokeExternalContainerCallback,
    invokeInternalCallback,
    postCallbackInvocationMessage,
    postCallbackResponseMessage,
    requests,
    serializeArgs,
    serializeNode,
    updateProps: (newProps) =>
      updateContainerProps((props: Props) => {
        /* `props` is actually a proxy */
        if (isMatchingProps({ ...props }, newProps)) {
          return props;
        }

        const updatedProps = { ...props, ...newProps };
        if (!updatedProps.bwe) {
          updatedProps.bwe = {};
        }
        updatedProps.bwe.componentId = containerId;

        return updatedProps;
      }),
  });

  const deserializedProps = deserializeProps({
    containerId,
    props: componentPropsJson,
  });

  const props = {
    ...deserializedProps,
    bwe: {
      ...deserializedProps,
      componentId: containerId,
    },
  };

  return {
    callApplicationMethod({ args, method }: InvokeApplicationCallbackParams) {
      return invokeApplicationCallback({
        args,
        callbacks,
        containerId,
        initExternalCallbackInvocation,
        invokeInternalCallback,
        method,
        postCallbackInvocationMessage,
        serializeArgs,
      });
    },
    commit,
    processEvent,
    props,
  };
}

'''
'''--- packages/container/src/events.ts ---
import type { PostMessageEvent, SerializedArgs } from '@bos-web-engine/common';

import type { ProcessEventParams } from './types';

/**
 * Return an event handler function to be registered under `window.addEventHandler('message', fn(event))`
 * @param buildRequest Function to build an inter-Component asynchronous callback request
 * @param callbacks The set of callbacks defined on the target Component
 * @param containerId ID of the container handling messages
 * @param deserializeProps Function to deserialize props passed on the event
 * @param invokeExternalContainerCallback Function to execute the specified function, either in the current context or another Component's
 * @param invokeInternalCallback Function to execute the specified function in the current context
 * @param postCallbackInvocationMessage Request invocation on external Component via window.postMessage
 * @param postCallbackResponseMessage Send callback execution result to calling Component via window.postMessage
 * @param requests The set of inter-Component callback requests being tracked by the Component
 * @param serializeArgs Function to serialize arguments passed to window.postMessage
 * @param serializeNode Function to serialize Preact DOM trees passed to window.postMessage
 * @param updateProps Callback for setting the Component's props
 */
export function buildEventHandler({
  callbacks,
  containerId,
  deserializeArgs,
  deserializeProps,
  initExternalCallbackInvocation,
  invokeExternalContainerCallback,
  invokeInternalCallback,
  postCallbackInvocationMessage,
  postCallbackResponseMessage,
  requests,
  serializeArgs,
  serializeNode,
  updateProps,
}: ProcessEventParams): Function {
  return function processEvent(event: PostMessageEvent) {
    let error: any = null;
    let result: any;

    function invokeCallbackFromEvent({
      args,
      method,
    }: {
      args: SerializedArgs;
      method: string;
    }) {
      const deserializedArgs = deserializeArgs({ args, containerId });
      return invokeExternalContainerCallback({
        args: deserializedArgs,
        callbacks,
        containerId,
        initExternalCallbackInvocation,
        invokeInternalCallback,
        method,
        postCallbackInvocationMessage,
        serializeArgs,
      });
    }

    function applyRecursivelyToComponents(
      target: any,
      cb: (n: any) => any
    ): any {
      const isComponent = (c: any) =>
        !!c && typeof c === 'object' && '__k' in c && '__' in c;

      if (isComponent(target)) {
        return cb(target);
      }

      if (Array.isArray(target)) {
        return target.map((i) => {
          if (!isComponent(i)) {
            return i;
          }

          return applyRecursivelyToComponents(i, cb);
        });
      }

      if (target && typeof target === 'object') {
        return Object.fromEntries(
          Object.entries(target).map(([k, v]) => [
            k,
            applyRecursivelyToComponents(v, cb),
          ])
        );
      }

      return target;
    }

    switch (event.data.type) {
      case 'component.callbackInvocation': {
        let { args, containerId, method, requestId } = event.data;
        try {
          result = invokeCallbackFromEvent({ args, method });
        } catch (e: any) {
          error = e;
        }

        result = applyRecursivelyToComponents(result, (n: any) =>
          serializeNode({
            node: n,
            parentId: method.split('::')[0],
            childComponents: [],
          })
        );

        const postCallbackResponse = (value: any, error: any) => {
          if (requestId) {
            postCallbackResponseMessage({
              error,
              containerId,
              requestId,
              result: value,
              targetId: containerId,
            });
          }
        };

        if (result?.then) {
          result
            .then((v: any) => postCallbackResponse(v, error))
            .catch((e: any) => postCallbackResponse(undefined, e));
        } else {
          postCallbackResponse(result, error);
        }
        break;
      }
      case 'component.callbackResponse': {
        const { requestId, result } = event.data;
        if (!(requestId in requests)) {
          console.error(`No request found for request ${requestId}`);
          return;
        }

        if (!result) {
          console.error(`No response for request ${requestId}`);
          return;
        }

        const { rejecter, resolver } = requests[requestId];
        if (!rejecter || !resolver) {
          console.error(`No resolver set for request ${requestId}`);
          return;
        }

        let error: any;
        let value: any;
        try {
          ({ error, value } = JSON.parse(result));
        } catch (e) {
          console.error('Could not parse returned JSON', { error: e, result });
          return;
        }

        if (error) {
          console.error('External Component callback failed', { error });
          // TODO reject w/ Error instance
          rejecter(error);
          return;
        }

        resolver(value);
        break;
      }
      case 'component.domCallback': {
        let { args, method } = event.data;
        try {
          result = invokeCallbackFromEvent({ args, method });
          if (typeof result?.then === 'function') {
            result.catch((e: Error) =>
              console.error('DOM event handler async callback failed', e)
            );
          }
        } catch (e: any) {
          error = e as Error;
        }
        break;
      }
      case 'component.update': {
        updateProps(
          deserializeProps({
            containerId,
            props: event.data.props,
          })
        );
        break;
      }
      default: {
        return;
      }
    }

    if (error) {
      console.error(error);
    }
  };
}

'''
'''--- packages/container/src/index.ts ---
export {
  invokeApplicationCallback,
  invokeExternalContainerCallback,
  invokeInternalCallback,
} from './callbacks';
export { initContainer } from './container';
export { buildEventHandler } from './events';
export { buildRequest, composeMessagingMethods } from './messaging';
export { composeRenderMethods } from './render';
export { composeSerializationMethods } from './serialize';
export * from './types';

'''
'''--- packages/container/src/messaging.ts ---
import type {
  ComponentCallbackInvocation,
  ComponentCallbackResponse,
  ComponentRender,
  DomMethodInvocation,
  PostMessageParams,
} from '@bos-web-engine/common';

import type {
  CallbackRequest,
  ComposeMessagingMethodsCallback,
  PostMessageComponentCallbackInvocationParams,
  PostMessageComponentCallbackResponseParams,
  PostMessageComponentRenderParams,
  PostMessageDomMethodInvocationParams,
} from './types';

export function buildRequest(): CallbackRequest {
  let resolver;
  let rejecter;
  const promise = new Promise((res, rej) => {
    resolver = res;
    rejecter = rej;
  });

  return {
    promise,
    rejecter,
    resolver,
  };
}

export const composeMessagingMethods: ComposeMessagingMethodsCallback = () => {
  function postMessage<T extends PostMessageParams>(message: T) {
    window.parent.postMessage(message, '*');
  }

  function postCallbackInvocationMessage({
    args,
    containerId,
    method,
    requestId,
    serializeArgs,
    targetId,
  }: PostMessageComponentCallbackInvocationParams): void {
    postMessage<ComponentCallbackInvocation>({
      args: serializeArgs({ args, containerId }),
      method,
      containerId,
      requestId,
      targetId,
      type: 'component.callbackInvocation',
    });
  }

  function postCallbackResponseMessage({
    error,
    containerId,
    requestId,
    result,
    targetId,
  }: PostMessageComponentCallbackResponseParams): void {
    const serializedError =
      error && JSON.stringify(error, Object.getOwnPropertyNames(error));

    postMessage<ComponentCallbackResponse>({
      requestId,
      containerId,
      result: JSON.stringify({
        value: result,
        error: serializedError,
      }),
      targetId,
      type: 'component.callbackResponse',
    });
  }

  function postComponentRenderMessage({
    childComponents,
    containerId,
    node,
    trust,
  }: PostMessageComponentRenderParams): void {
    postMessage<ComponentRender>({
      childComponents,
      containerId,
      node,
      trust,
      type: 'component.render',
    });
  }

  function postDomMethodInvocationMessage({
    args,
    containerId,
    id,
    method,
  }: PostMessageDomMethodInvocationParams): void {
    postMessage<DomMethodInvocation>({
      args,
      containerId,
      id,
      method,
      type: 'component.domMethodInvocation',
    });
  }

  return {
    postCallbackInvocationMessage,
    postCallbackResponseMessage,
    postComponentRenderMessage,
    postDomMethodInvocationMessage,
  };
};

'''
'''--- packages/container/src/render.ts ---
import { WebEngineMeta } from '@bos-web-engine/common';
import type { ComponentChildren, ComponentType, VNode } from 'preact';

import type {
  BWEComponentNode,
  ComposeRenderMethodsCallback,
  ContainerComponent,
  ElementRef,
  Node,
  PlaceholderNode,
} from './types';

interface RenderedVNode extends VNode<any> {
  __k?: RenderedVNode[];
}

type DispatchRenderCallback = (vnode: VNode) => void;

export const composeRenderMethods: ComposeRenderMethodsCallback = ({
  containerId,
  isExternalComponent,
  isRootComponent,
  isComponent,
  isFragment,
  postComponentRenderMessage,
  postDomMethodInvocationMessage,
  serializeArgs,
  serializeNode,
  trust,
}) => {
  const elementRefs = new Map<HTMLElement, any>();

  const dispatchRender: DispatchRenderCallback = (node) => {
    const serializedNode = serializeNode({
      node: node as Node,
      childComponents: [],
      parentId: containerId,
    });

    if (!serializedNode?.type) {
      return;
    }

    const { childComponents } = serializedNode;
    delete serializedNode.childComponents;

    try {
      postComponentRenderMessage({
        childComponents: childComponents || [],
        containerId,
        node: serializedNode,
        trust,
      });
    } catch (error) {
      console.warn(`failed to dispatch render for ${containerId}`, {
        error,
        serializedNode,
      });
    }
  };

  const buildComponentId = (meta?: WebEngineMeta): string => {
    if (!meta) {
      return '';
    }

    return `${meta.src}##${meta.key || ''}##${buildComponentId(
      meta.parentMeta
    )}`;
  };

  const buildBWEComponentNode = (
    node: BWEComponentNode,
    children: ComponentChildren
  ): PlaceholderNode => {
    const {
      key,
      props: { bwe },
    } = node;
    const childComponentId = buildComponentId(bwe);

    return {
      type: 'div',
      key,
      props: {
        id: 'dom-' + childComponentId,
        className: 'bwe-component-container',
        children,
        'data-component-src': bwe.src!,
      },
    };
  };

  /**
   * Construct a record for tracking element refs
   * @param element HTML element bound to a Component via `ref`
   */
  function buildElementRef(element: HTMLElement): ElementRef {
    const id = window.crypto.randomUUID();
    return {
      id,
      proxy: new Proxy(element, {
        get(target: HTMLElement, p: string | symbol): any {
          const prop = target[p as keyof typeof target];
          if (typeof prop !== 'function') {
            return prop;
          }

          // replace methods with a wrapper function bound to the element that
          // posts a DOM method invocation message to the outer application
          function intercepted(...args: any[]) {
            postDomMethodInvocationMessage({
              args: serializeArgs({ args, containerId }),
              containerId,
              id,
              method: p as string,
            });
            return (prop as Function).call(target, ...args);
          }

          return intercepted.bind(target);
        },
      }),
      ref: element,
    };
  }

  function parseRenderedTree(
    node: RenderedVNode | null,
    renderedChildren?: Array<RenderedVNode | null>
  ): VNode | null | Array<VNode | null> {
    if (!node || !renderedChildren) {
      return node;
    }

    /*
      for elements bound to `ref` instances, create a proxy object to forward
      DOM method invocations in the iframe to the outer application
     */
    if (node.ref) {
      // @ts-expect-error
      const element: HTMLElement = node.ref.current;
      if (!(element instanceof HTMLElement)) {
        console.error('unexpected ref type', element);
      }

      if (!elementRefs.has(element)) {
        elementRefs.set(element, buildElementRef(element));
      }

      const { id, proxy } = elementRefs.get(element)!;
      // @ts-expect-error
      node.ref.current = proxy;
      node.props['data-roc-ref-id'] = id;
    }

    const component = node.type as ContainerComponent;
    let rootComponentChildren = isRootComponent(component)
      ? renderedChildren
      : [];

    if (isFragment(node.type as ComponentType)) {
      const fragmentChildren = renderedChildren || [];
      if (
        fragmentChildren.length === 1 &&
        isRootComponent(fragmentChildren[0]?.type as ContainerComponent)
      ) {
        // this is the initial render of the container's root Component
        // set the Fragment's children as the root Component's children
        rootComponentChildren = fragmentChildren[0]!.__k as RenderedVNode[];
      } else {
        // Handling for nested or non-root fragments. This will flatten non-root fragments

        return fragmentChildren.map((child) => {
          // Return the text content directly if it's a text node
          if (typeof child?.props === 'string') {
            return child.props;
          }

          // For non-text nodes, parse the tree recursively
          return parseRenderedTree(child, child?.__k);
        }) as VNode[];
      }
    }

    if (rootComponentChildren.length) {
      return parseRenderedTree(
        {
          type: 'div',
          key: 'bwe-container-component',
          props: null,
        },
        rootComponentChildren
      );
    }

    const props =
      node.props && typeof node.props === 'object'
        ? Object.fromEntries(
            Object.entries(node.props).filter(([k]) => k !== 'children')
          )
        : node.props;

    // no need to wrap element types and <Component /> references
    if (typeof node.type !== 'function' || isComponent(node.type)) {
      return {
        type: node.type,
        key: node.key,
        props: {
          ...props,
          children: [renderedChildren]
            .flat()
            .filter((c) => !!c)
            .map((child) => {
              if (child?.type) {
                return parseRenderedTree(child, child?.__k);
              }

              return child?.props;
            }),
        },
      };
    }

    // wrap external (e.g. imported from NPM package) Components
    if (isExternalComponent(component)) {
      return parseRenderedTree(
        {
          type: 'div',
          props: {
            ...props,
            children: [],
            'data-component-name': node.type.name,
          },
          key: `external-component-${node.type.name}`,
        },
        renderedChildren
      );
    }

    // compose and render the trusted Component
    const componentNode = buildBWEComponentNode(
      node as BWEComponentNode,
      renderedChildren
    );

    return parseRenderedTree(componentNode, renderedChildren);
  }

  const commit = (vnode: RenderedVNode) => {
    dispatchRender(
      parseRenderedTree(
        { type: vnode.type, props: vnode.props, key: 'root-component' },
        vnode.__k
      ) as VNode
    );
  };

  return {
    commit,
  };
};

'''
'''--- packages/container/src/serialize.ts ---
import type {
  BOSComponentProps,
  ComponentChildMetadata,
  ComponentTrust,
  Props,
  SerializedNode,
} from '@bos-web-engine/common';

import type {
  BWEComponentNode,
  ComposeSerializationMethodsCallback,
  DeserializeArgsCallback,
  DeserializePropsCallback,
  Node,
  SerializeArgsCallback,
  SerializeNodeCallback,
  SerializePropsCallback,
} from './types';

export interface BuildComponentIdParams {
  instanceId: string | undefined;
  componentPath: string;
  parentComponentId: string;
}

interface SerializeChildComponentParams {
  parentId: string;
  node: BWEComponentNode;
}

interface SerializedPropsCallback {
  containerId: string;
  callbackIdentifier: string;
}

interface DeepTransformParams {
  value: any;
  onString?: (s: string) => string;
  onFunction?: (f: Function, path: string) => any;
  onNode?: (n: Node) => SerializedNode;
  onSerializedCallback?: (cb: SerializedPropsCallback) => Function;
}

interface BuildContainerMethodIdentifierParams {
  callback: Function;
  callbackName: string;
  componentId?: string;
  containerId: string;
}

/**
 * Compose the set of serialization methods for the given container context
 * @param buildRequest Method for building callback requests
 * @param callbacks Component container's callbacks
 * @param initExternalCallbackInvocation Initialize callback invocation request
 * @param postCallbackInvocationMessage Request invocation on external Component via window.postMessage
 */
export const composeSerializationMethods: ComposeSerializationMethodsCallback =
  ({
    callbacks,
    initExternalCallbackInvocation,
    isComponent,
    postCallbackInvocationMessage,
  }) => {
    const isSerializedCallback = (o: any) =>
      !!o &&
      typeof o === 'object' &&
      Object.keys(o).length === 2 &&
      'callbackIdentifier' in o &&
      'containerId' in o;

    // TODO better preact component check
    const isPreactNode = (value: any) =>
      !!value?.props &&
      typeof value === 'object' &&
      '__' in value &&
      '__k' in value;

    const deepTransform = ({
      value,
      onString,
      onFunction,
      onNode,
      onSerializedCallback,
    }: DeepTransformParams) => {
      const transform = (v: any, path: string): any => {
        if (!v) {
          return v;
        }

        if (
          isSerializedCallback(v) &&
          typeof onSerializedCallback === 'function'
        ) {
          return onSerializedCallback(v);
        }

        const isCollection = Array.isArray(v); // TODO handle other collections
        if (isCollection) {
          return v.map((i: any, idx: number) =>
            transform(i, `${path}[${idx}]`)
          );
        }

        if (isPreactNode(v)) {
          if (typeof onNode !== 'function') {
            // Preact nodes have self-referencing properties, return here to stop traversing
            return v;
          }

          return onNode(v);
        }

        if (typeof v === 'object') {
          return Object.fromEntries(
            Object.entries(v).map(([k, w]) => [k, transform(w, `${path}.${k}`)])
          );
        }

        if (typeof v === 'string' && typeof onString === 'function') {
          return onString(v);
        }

        if (typeof v === 'function' && typeof onFunction === 'function') {
          return onFunction(v, path);
        }

        return v;
      };

      return transform(value, '');
    };

    const buildContainerMethodIdentifier = ({
      callback,
      callbackName,
      componentId,
      containerId,
    }: BuildContainerMethodIdentifierParams) =>
      [
        containerId,
        callback.toString().replace(/\s+/g, ''),
        callbackName,
        componentId,
      ].join('::');

    /**
     * Mark kebab keys as duplicates when they exist as camel cased on props
     * TODO find where do these come from
     * @param key props key
     * @param props Component props
     */
    const isDuplicateKey = (key: string, props: any) => {
      if (!key.includes('-')) {
        return false;
      }

      return (
        key
          .split('-')
          .reduce(
            (propKey, word, i) =>
              `${propKey}${
                i ? `${word[0].toUpperCase()}${word.slice(1)}` : word
              }`,
            ''
          ) in props
      );
    };

    /**
     * Serialize props of a child Component to be rendered in the outer application
     * @param containerId Component's parent container
     * @param props The props for this container's Component
     */
    const serializeProps: SerializePropsCallback = ({
      componentId,
      containerId,
      props,
    }) => {
      return Object.entries(props).reduce(
        (newProps, [key, value]: [string, any]) => {
          if (key === 'class' || isDuplicateKey(key, props)) {
            return newProps;
          }

          const serializeCallback = (
            callbackName: string,
            callback: Function
          ) => {
            const fnKey = buildContainerMethodIdentifier({
              callback,
              callbackName,
              componentId,
              containerId,
            });

            callbacks[fnKey] = callback;

            return {
              callbackIdentifier: fnKey,
              containerId,
            };
          };

          if (typeof value === 'function') {
            newProps[key] = serializeCallback(key, value);
          } else {
            if (isPreactNode(value)) {
              newProps[key] = serializeNode({
                childComponents: [],
                node: value,
                parentId: containerId,
              });
            } else {
              newProps[key] = deepTransform({
                value,
                onFunction: (fn: Function, path: string) =>
                  serializeCallback(`${key}${path}`, fn),
                onNode: (node) =>
                  serializeNode({
                    node,
                    childComponents: [],
                    parentId: containerId,
                  }),
              });
            }
          }

          return newProps;
        },
        {} as Props
      );
    };

    const deserializeArgs: DeserializeArgsCallback = ({
      args,
      containerId,
    }) => {
      return deepTransform({
        value: args,
        onSerializedCallback: (cb) => {
          return deserializePropsCallback({
            containerId,
            callbackIdentifier: cb.callbackIdentifier,
          });
        },
      });
    };

    const serializeArgs: SerializeArgsCallback = ({ args, containerId }) => {
      return (args || []).map((arg) => {
        if (!arg) {
          return arg;
        }

        if (Array.isArray(arg)) {
          return serializeArgs({ args: arg, containerId });
        }

        if (typeof arg === 'object') {
          const argKeys = Object.keys(arg);
          return Object.fromEntries(
            serializeArgs({
              args: Object.values(arg),
              containerId,
            }).map((value, i) => [argKeys[i], value])
          );
        }

        if (typeof arg !== 'function') {
          return arg;
        }

        const fnKey = buildContainerMethodIdentifier({
          callback: arg,
          callbackName: arg?.name, // FIXME
          containerId,
        });

        callbacks[fnKey] = arg;
        return {
          callbackIdentifier: fnKey,
          containerId,
        };
      });
    };

    const deserializePropsCallback = ({
      containerId,
      callbackIdentifier,
    }: SerializedPropsCallback) => {
      return (...args: any) => {
        const { invocationId, invocation } = initExternalCallbackInvocation();

        // any function arguments are closures in this child component scope
        // and must be cached in the component iframe
        postCallbackInvocationMessage({
          args,
          containerId,
          method: callbackIdentifier,
          requestId: invocationId,
          serializeArgs,
          targetId: callbackIdentifier.split('::')[0],
        });

        return invocation;
      };
    };

    const deserializeProps: DeserializePropsCallback = ({
      containerId,
      props,
    }) => {
      if (!props || Array.isArray(props) || typeof props !== 'object') {
        return props;
      }

      return deepTransform({
        value: props,
        onSerializedCallback: (cb) => {
          return deserializePropsCallback({
            containerId,
            callbackIdentifier: cb.callbackIdentifier,
          });
        },
      });
    };

    function buildComponentId({
      instanceId,
      componentPath,
      parentComponentId,
    }: BuildComponentIdParams) {
      // TODO warn on missing instanceId (<Component>'s key prop) here?
      return [componentPath, instanceId?.toString(), parentComponentId].join(
        '##'
      );
    }

    /**
     * Serialize a sandboxed <Component /> component
     * @param parentId ID of the parent Component
     * @param props Props passed to the <Component /> component
     */
    const serializeChildComponent = ({
      parentId,
      node,
    }: SerializeChildComponentParams): {
      child: ComponentChildMetadata;
      placeholder: SerializedNode;
    } => {
      const {
        key: instanceId,
        props: { bwe, ...componentProps },
      } = node;
      const { src, trust } = bwe;

      const componentId = buildComponentId({
        instanceId,
        componentPath: src!,
        parentComponentId: parentId,
      });

      return {
        child: {
          trust: trust || ({ mode: 'sandboxed' } as ComponentTrust),
          props: componentProps
            ? serializeProps({
                componentId,
                containerId: parentId,
                props: componentProps,
              })
            : {},
          source: src!,
          componentId,
        },
        placeholder: {
          type: 'div',
          props: {
            id: 'dom-' + componentId,
            bwe: {
              componentId,
            },
            className: 'container-child',
            'data-component-src': src!,
          },
        },
      };
    };

    /**
     * Given a Preact node, build its Component tree and serialize for transmission
     * @param childComponents Set of descendant Components accumulated across recursive invocations
     * @param node The Preact Component to serialize
     * @param parentId Component's parent container
     */
    const serializeNode: SerializeNodeCallback = ({
      node,
      childComponents,
      parentId,
    }) => {
      if (!node || typeof node !== 'object') {
        return node;
      }

      const { type } = node;
      let serializedElementType = typeof type === 'string' ? type : '';
      const children = node?.props?.children || [];
      const props = { ...node.props } as BOSComponentProps;
      delete props.children;

      let unifiedChildren = Array.isArray(children) ? children : [children];

      unifiedChildren
        .filter(
          (child) =>
            child && typeof child === 'object' && 'childComponents' in child
        )
        .forEach((child) => {
          child.childComponents.forEach((childComponent: any) =>
            childComponents.push(childComponent)
          );
        });

      if (typeof type === 'function') {
        if (!isComponent(type)) {
          throw new Error(`unrecognized Component function ${type.name}`);
        }

        const componentNode = { ...node, props } as BWEComponentNode;
        const { child, placeholder } = serializeChildComponent({
          parentId,
          node: componentNode,
        });

        if (child) {
          childComponents.push(child);
        }

        return placeholder;
      }

      return {
        type: serializedElementType,
        props: {
          ...serializeProps({
            containerId: parentId,
            props,
          }),
          children: unifiedChildren.flat().map((c) =>
            c?.props
              ? serializeNode({
                  node: c,
                  childComponents,
                  parentId,
                })
              : c
          ),
        },
        childComponents,
      };
    };

    return {
      deserializeArgs,
      deserializeProps,
      serializeArgs,
      serializeNode,
    };
  };

'''
'''--- packages/container/src/types.ts ---
import type {
  BOSComponentProps,
  ComponentChildMetadata,
  ComponentTrust,
  ExternalCallbackInvocation,
  Props,
  SerializedArgs,
  SerializedNode,
} from '@bos-web-engine/common';
import type { ComponentChildren, FunctionComponent, VNode } from 'preact';

export type BuildRequestCallback = () => CallbackRequest;

export interface CallbackRequest {
  promise: Promise<any>;
  rejecter?: (reason: any) => void;
  resolver?: (value: any) => void;
}

export type RequestMap = { [key: string]: CallbackRequest };
export type CallbackMap = { [key: string]: Function };

export type DeserializeArgsCallback = (params: DeserializeArgsParams) => any;
export interface DeserializeArgsParams {
  args: any;
  containerId: string;
}

export type DeserializePropsCallback = (params: DeserializePropsParams) => any;
export interface DeserializePropsParams {
  containerId: string;
  props: Props;
}

export type EventArgs = { event: any };

export interface InvokeInternalCallbackParams {
  args: SerializedArgs | EventArgs;
  callback: Function;
}

export interface InvokeExternalCallbackParams {
  args: SerializedArgs;
  callbacks: CallbackMap;
  containerId: string;
  initExternalCallbackInvocation<T>(): ExternalCallbackInvocation<T>;
  invokeInternalCallback: (args: InvokeInternalCallbackParams) => any;
  method: string;
  postCallbackInvocationMessage: PostMessageComponentInvocationCallback;
  serializeArgs: SerializeArgsCallback;
}

export type PostMessageComponentInvocationCallback = (
  message: PostMessageComponentCallbackInvocationParams
) => void;

export interface PostMessageComponentCallbackInvocationParams {
  args: any[];
  containerId: string;
  method: string;
  requestId: string;
  serializeArgs: SerializeArgsCallback;
  targetId: string | null;
}

export type PostMessageComponentResponseCallback = (
  message: PostMessageComponentCallbackResponseParams
) => void;
export interface PostMessageComponentCallbackResponseParams {
  containerId: string;
  error: Error | null;
  requestId: string;
  result: any;
  targetId: string;
}

export type PostMessageComponentRenderCallback = (
  message: PostMessageComponentRenderParams
) => void;
export interface PostMessageComponentRenderParams {
  childComponents: ComponentChildMetadata[];
  containerId: string;
  node: SerializedNode;
  trust: ComponentTrust;
}

export type PostDomMethodInvocationCallback = (
  message: PostMessageDomMethodInvocationParams
) => void;
export interface PostMessageDomMethodInvocationParams {
  args: any[];
  containerId: string;
  id: string;
  method: string;
}

export interface ContainerComponent extends FunctionComponent {
  isRootContainerComponent: boolean;
}

export interface ElementRef {
  id: string;
  proxy: HTMLElement;
  ref: HTMLElement;
}

interface ComposeRenderMethodsParams {
  containerId: string;
  isComponent: (component: Function) => boolean;
  isExternalComponent: (component: ContainerComponent) => boolean;
  isFragment: (component: Function) => boolean;
  isRootComponent: (component: ContainerComponent) => boolean;
  postComponentRenderMessage: PostMessageComponentRenderCallback;
  postDomMethodInvocationMessage: PostDomMethodInvocationCallback;
  serializeArgs: SerializeArgsCallback;
  serializeNode: SerializeNodeCallback;
  trust: ComponentTrust;
}

export type ComposeRenderMethodsCallback = (
  params: ComposeRenderMethodsParams
) => {
  commit: (vnode: VNode) => void;
};

export interface ComposeSerializationMethodsParams {
  callbacks: CallbackMap;
  initExternalCallbackInvocation<T>(): ExternalCallbackInvocation<T>;
  isComponent: (component: Function) => boolean;
  parentContainerId: string | null;
  postCallbackInvocationMessage: PostMessageComponentInvocationCallback;
}

export type ComposeSerializationMethodsCallback = (
  params: ComposeSerializationMethodsParams
) => {
  deserializeArgs: DeserializeArgsCallback;
  deserializeProps: DeserializePropsCallback;
  serializeArgs: SerializeArgsCallback;
  serializeNode: SerializeNodeCallback;
};

export type ComposeMessagingMethodsCallback = () => {
  postCallbackInvocationMessage: PostMessageComponentInvocationCallback;
  postCallbackResponseMessage: PostMessageComponentResponseCallback;
  postComponentRenderMessage: PostMessageComponentRenderCallback;
  postDomMethodInvocationMessage: PostDomMethodInvocationCallback;
};

export type UpdateContainerPropsCallback = (props: Props) => void;

export interface ProcessEventParams {
  callbacks: CallbackMap;
  containerId: string;
  deserializeArgs: DeserializeArgsCallback;
  deserializeProps: DeserializePropsCallback;
  initExternalCallbackInvocation<T>(): ExternalCallbackInvocation<T>;
  invokeInternalCallback: (args: InvokeInternalCallbackParams) => any;
  invokeExternalContainerCallback: (args: InvokeExternalCallbackParams) => any;
  postCallbackInvocationMessage: PostMessageComponentInvocationCallback;
  postCallbackResponseMessage: PostMessageComponentResponseCallback;
  requests: RequestMap;
  serializeArgs: SerializeArgsCallback;
  serializeNode: SerializeNodeCallback;
  updateProps: (props: Props) => void;
}

export interface InitContainerParams {
  containerMethods: {
    buildEventHandler: (params: ProcessEventParams) => Function;
    buildRequest: BuildRequestCallback;
    composeMessagingMethods: ComposeMessagingMethodsCallback;
    composeRenderMethods: ComposeRenderMethodsCallback;
    composeSerializationMethods: ComposeSerializationMethodsCallback;
    dispatchRenderEvent: DispatchRenderEventCallback;
    invokeApplicationCallback: (args: InvokeExternalCallbackParams) => any;
    invokeInternalCallback: (args: InvokeInternalCallbackParams) => any;
    invokeExternalContainerCallback: (
      args: InvokeExternalCallbackParams
    ) => any;
    postCallbackInvocationMessage: PostMessageComponentInvocationCallback;
    postCallbackResponseMessage: PostMessageComponentResponseCallback;
    postComponentRenderMessage: (p: any) => void;
  };
  context: {
    BWEComponent: FunctionComponent;
    Component: Function;
    componentPropsJson: object;
    containerId: string;
    createElement: PreactCreateElement;
    Fragment: FunctionComponent;
    parentContainerId: string | null;
    props: any;
    trust: ComponentTrust;
    updateContainerProps: UpdateContainerPropsCallback;
  };
}

export type SerializeArgsCallback = (
  args: SerializeArgsParams
) => SerializedArgs;
export interface SerializeArgsParams {
  args: any[];
  containerId: string;
}

export interface PreactElement {
  type: string;
  props: any;
}

export type PreactCreateElement = (
  type: string | Function,
  props: any,
  children: any
) => PreactElement;

export interface Node {
  type: string | Function;
  props?: Props;
  key?: string;
}

export interface SerializeNodeParams {
  node: Node;
  childComponents: ComponentChildMetadata[];
  parentId: string;
}
export type SerializeNodeCallback = (
  args: SerializeNodeParams
) => SerializedNode;

export interface SerializePropsParams {
  componentId?: string;
  containerId: string;
  props: any;
}

export type SerializePropsCallback = (params: SerializePropsParams) => Props;

export interface DispatchRenderEventParams {
  callbacks: CallbackMap;
  componentId: string;
  node: Node;
  postComponentRenderMessage: PostMessageComponentRenderCallback;
  serializeNode: (p: SerializeNodeParams) => SerializedNode;
  serializeProps: SerializePropsCallback;
  trust: ComponentTrust;
}
export type DispatchRenderEventCallback = (
  params: DispatchRenderEventParams
) => void;

export type BWEComponentNode = VNode<BOSComponentProps>;

export interface PlaceholderNode {
  type: string;
  key: string;
  props: {
    id: string;
    className: string;
    children: ComponentChildren;
    'data-component-src': string;
  };
}

'''
'''--- packages/container/tsconfig.json ---
{
  "extends": "tsconfig/react-library.json",
  "include": ["src"],
  "exclude": ["lib", "node_modules"],
  "compilerOptions": {
    "outDir": "lib"
  }
}

'''
'''--- packages/eslint-config-custom/index.js ---
module.exports = {
  extends: ['next', 'turbo'],
  rules: {
    '@next/next/no-html-link-for-pages': 'off',
    'import/order': [
      'error',
      {
        alphabetize: {
          order: 'asc',
          caseInsensitive: true,
        },
        'newlines-between': 'always',
        groups: [
          'builtin',
          ['external', 'internal'],
          ['sibling', 'parent', 'index'],
          'object',
        ],
      },
    ],
    'no-console': ['error', { allow: ['warn', 'error'] }],
    'no-debugger': 'error',
  },
};

'''
'''--- packages/eslint-config-custom/package.json ---
{
  "name": "eslint-config-custom",
  "version": "0.0.0",
  "main": "index.js",
  "license": "MIT",
  "dependencies": {
    "eslint": "^7.23.0",
    "eslint-config-next": "13.0.0",
    "eslint-config-turbo": "latest",
    "eslint-plugin-import": "^2.27.5",
    "eslint-plugin-react": "7.31.8"
  },
  "devDependencies": {
    "typescript": "^4.7.4"
  },
  "publishConfig": {
    "access": "public"
  }
}

'''
'''--- packages/hot-reload-client/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ['custom'],
};

'''
'''--- packages/hot-reload-client/README.md ---
# Hot Reload

Please refer to the README for the [Hot Reload Server](../hot-reload-server/README.md) package.
'''
'''--- packages/hot-reload-client/package.json ---
{
  "name": "@bos-web-engine/hot-reload-client",
  "version": "0.1.0",
  "main": "lib/index.js",
  "scripts": {
    "build": "tsc -p tsconfig.json",
    "dev": "tsc -w -p tsconfig.json",
    "lint": "eslint src/**/*.ts*",
    "lint:fix": "eslint . --fix"
  },
  "license": "ISC",
  "peerDependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.34",
    "@types/react-dom": "^18.0.6",
    "tsconfig": "workspace:*",
    "typescript": "^5.4.5"
  }
}

'''
'''--- packages/hot-reload-client/src/index.ts ---
export { useHotReload } from './useHotReload';

'''
'''--- packages/hot-reload-client/src/useHotReload.ts ---
import { useEffect } from 'react';

export function useHotReload(
  hotReloadWebsocketUrl: string | null | undefined,
  onHotReloadRequested: () => void
) {
  useEffect(() => {
    if (!hotReloadWebsocketUrl) return;

    const socket = new WebSocket(hotReloadWebsocketUrl);

    socket.onmessage = (event) => {
      if (event.data === 'HOT_RELOAD') {
        onHotReloadRequested();
      }
    };

    return () => {
      if (socket.readyState !== 3) {
        socket.close();
      }
    };

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [hotReloadWebsocketUrl]);

  return null;
}

'''
'''--- packages/hot-reload-client/tsconfig.json ---
{
  "extends": "tsconfig/react-library.json",
  "include": ["src"],
  "exclude": ["lib", "node_modules"],
  "compilerOptions": {
    "outDir": "lib"
  }
}

'''
'''--- packages/hot-reload-server/README.md ---
# Hot Reload Server

This is an experimental feature to improve DX when authoring RoC components in a local IDE - such as VS Code. Whenever a file is changed, this package will emit a websocket event to the `web` gateway, which will then trigger a refresh of all local components served by `bos-loader`.

It could make sense to move this feature into the `bos-loader` package itself once we feel confident in this hot reloading flow.

## Usage

First, navigate to the root of the repository in your CLI. Make sure the `apps/web` Next JS app isn't already running (if it is, quit that process). Then you'll run:

```bash
SOURCE_PATH=bos-web-engine/apps/demos/src pnpm dev:components
```

You should see the following output:

```
@bos-web-engine/hot-reload-server:dev:components: Hot reload websocket server is running on: ws://localhost:4000
@bos-web-engine/hot-reload-server:dev:components: Resolved path for hot reload watch: /Users/.../bos-web-engine/apps/demos/src
```

The `SOURCE_PATH` is relative to the parent directory of `bos-web-engine` to make it a bit easier to reference a path that lives outside of the monorepo. If you've cloned the [RoC Components](https://github.com/near/near-roc-components) repository next to the `bos-web-engine` repo, you'd use this path instead:

```bash
SOURCE_PATH=near-roc-components/src
```

The `pnpm dev:components` command does two things:

1. Starts up the hot reload websocket server
2. Starts up the `apps/web` gateway

Now you'll need to open up the gateway in your browser - which should be `localhost:3000`. Open up the `Dev Tools` drawer in the bottom right of your screen and navigate to the `Flags` tab. Enter the following:

1. Enter a value for `bos-loader URL`. This should be `http://localhost:3030`
2. Enter a value for `Hot Reload URL`. This should be `ws://localhost:4000`
3. Save the URL's

Now, open up one of your components in your local gateway. EG: `http://localhost:3000/bwe-demos.near/LandingPage`. Then make a visual change to `LandingPage.tsx` and you should see your changes instantly appear in your browser without having to reload it!

If you run into conflicts with the default `port` values, you can pass a custom port for the hot reload server (don't forget to update your `Flags` in the `Dev Tools`!):

```bash
HOT_RELOAD_PORT=1234 SOURCE_PATH=apps/demos/src pnpm dev:components
```

## Troubleshooting

### SOURCE_PATH

If the hot reload flow isn't working, double check the log output value of `Resolved path for hot reload watch: ...` when you start up the `pnpm dev:components` script. This shows the fully resolved path for where the hot reload server is watching for changes. If the logged path isn't correct, try adjusting the passed `SOURCE_PATH` value.

### Console Warning

You might see the following warning in your console when viewing the local gateway:

```
HotReload.tsx:25 WebSocket connection to 'ws://localhost:4000/' failed: WebSocket is closed before the connection is established.
```

You can safely ignore this warning. This happens due to React 18's strict mode calling all `useEffect()` hooks twice. The websocket connection logic ends up running twice due to this and instantly closes the first connection in the `useEffect()` cleanup - which generates the warning. This warning comes directly from the browser and apparently can't be suppressed.

'''
'''--- packages/hot-reload-server/package.json ---
{
  "name": "@bos-web-engine/hot-reload-server",
  "version": "0.1.0",
  "scripts": {
    "build": "tsc -p tsconfig.json",
    "dev": "pnpm build && SOURCE_PATH=react-on-chain/apps/demos/src node ./build/index.js",
    "dev:components": "node ./build/index.js"
  },
  "license": "ISC",
  "devDependencies": {
    "@types/node": "^20.12.7",
    "@types/ws": "^8.5.10",
    "chokidar": "^3.6.0",
    "tsconfig": "workspace:*",
    "typescript": "^5.4.5",
    "ws": "^8.16.0"
  }
}

'''
'''--- packages/hot-reload-server/src/index.ts ---
import chokidar from 'chokidar';
import path from 'path';
import WebSocket, { WebSocketServer } from 'ws';

const SOURCE_PATH = (process.env.SOURCE_PATH ?? '').replace(/^(\/)(.\/)/, ''); // Make sure we remove any beginning "/" or "./"

if (!SOURCE_PATH) {
  throw new Error(
    'Unable to start hot reload server. Missing required "SOURCE_PATH" env value.'
  );
}

const sourcePath = `../../../${SOURCE_PATH}`;
const resolvedSourcePath = path.resolve(sourcePath);
const port = process.env.HOT_RELOAD_PORT
  ? parseInt(process.env.HOT_RELOAD_PORT)
  : 4000;
const wss = new WebSocketServer({ port });
const emitHotReloadEventDebounced = debounce(emitHotReloadEvent, 50);

console.log(
  `Hot reload websocket server is running on: ws://localhost:${port}`
);
console.log(`Resolved path for hot reload watch: ${resolvedSourcePath}`);

chokidar.watch(resolvedSourcePath).on('all', () => {
  /* 
    The debounce is mainly needed for when this script first starts up. 
    An "add" event is fired off for every existing file and we don't want 
    to emit a reload event for every single file on start up.
  */

  emitHotReloadEventDebounced();
});

function debounce(method: () => any, timeout: number) {
  let timer: NodeJS.Timeout | undefined;

  return () => {
    clearTimeout(timer);

    timer = setTimeout(() => {
      method();
    }, timeout);
  };
}

function emitHotReloadEvent() {
  wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.send('HOT_RELOAD');
    }
  });
}

wss.on('connection', (ws) => {
  ws.on('error', console.error);
});

'''
'''--- packages/hot-reload-server/tsconfig.json ---
{
  "extends": "tsconfig/base.json",
  "compilerOptions": {
    "baseUrl": ".",
    "declaration": true,
    "esModuleInterop": true,
    "lib": ["es2023", "dom"],
    "module": "node16",
    "moduleResolution": "node16",
    "outDir": "build",
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strict": true,
    "target": "es2022"
  },
  "include": ["src", "test"],
  "exclude": ["build", "bundle", "node_modules"]
}

'''
'''--- packages/sandbox/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ['custom'],
};

'''
'''--- packages/sandbox/README.md ---
# BWE Sandbox Component

An interactive sandbox for the web that allows you to experiment with writing BOS components and preview them in real time. Can be imported into a React or Next JS application.

## Usage

First, include the package's styles inside the root of your application. For Next JS, this would be your `_app.tsx` file:

```tsx
import '@bos-web-engine/ui/reset.css';
import '@bos-web-engine/ui/styles.css';
import '@bos-web-engine/sandbox/styles.css';
```

Then import the `<Sandbox />` component anywhere in your app:

```tsx
import { Sandbox } from '@bos-web-engine/sandbox';

export default function MyPage() {
  return (
    <div>
      <Sandbox />
    </div>
  );
}
```

To provide access to the current wallet selector context (for things like publishing components), you'll need to set up the `<WalletSelectorProvider />` to wrap `<Sandbox />`:

```tsx
import { WalletSelectorProvider } from '@bos-web-engine/wallet-selector-control';

export default function App({ Component, pageProps }: AppProps) {
  return (
    <WalletSelectorProvider
      contractId="social.near"
      params={{
        network: 'mainnet',
        modules: [...],
      }}
    >
      <Component {...pageProps} />
    </WalletSelectorProvider>
  );
}
```

'''
'''--- packages/sandbox/dts-bundle-generator.config.js ---
// @ts-check

// https://github.com/timocov/dts-bundle-generator/blob/master/src/config-file/README.md

/** @type import('dts-bundle-generator/config-schema').BundlerConfig */
const config = {
  compilationOptions: {
    preferredConfigPath: './tsconfig.json',
  },

  entries: [
    {
      filePath: './src/plugins.ts',
      outFile: './artifacts/plugins.d.ts',

      libraries: {
        importedLibraries: [],
        inlinedLibraries: [
          'bn.js',
          'rxjs',
          'near-api-js',
          '@near-js/crypto',
          '@near-js/types',
          '@near-wallet-selector/core',
        ],
      },

      output: {
        noBanner: true,
        inlineDeclareGlobals: false,
        exportReferencedTypes: false,
      },
    },
  ],
};

module.exports = config;

'''
'''--- packages/sandbox/package.json ---
{
  "name": "@bos-web-engine/sandbox",
  "version": "0.1.0",
  "description": "",
  "files": [
    "lib"
  ],
  "main": "lib/index.cjs.js",
  "module": "lib/index.esm.js",
  "types": "lib/index.d.ts",
  "exports": {
    ".": {
      "import": {
        "types": "./lib/index.d.ts",
        "default": "./lib/index.esm.js"
      },
      "require": {
        "types": "./lib/cjs/index.d.ts",
        "default": "./lib/cjs/index.cjs.js"
      }
    },
    "./*.css": {
      "import": "./lib/*.css",
      "require": "./lib/*.css"
    }
  },
  "scripts": {
    "dev": "rollup -c -w",
    "build": "pnpm build:artifacts && rollup -c",
    "build:artifacts": "dts-bundle-generator --config=./dts-bundle-generator.config.js && pnpm build:artifacts:move",
    "build:artifacts:move": "mv ./artifacts/plugins.d.ts ./artifacts/plugins.d.ts.txt",
    "lint": "eslint ./src/**/*.ts*",
    "lint:fix": "eslint . --fix"
  },
  "peerDependencies": {
    "@bos-web-engine/application": "workspace:*",
    "@bos-web-engine/social-db": "workspace:*",
    "@bos-web-engine/ui": "workspace:*",
    "@bos-web-engine/wallet-selector-control": "workspace:*",
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  },
  "dependencies": {
    "@bos-web-engine/container-storage-plugin": "workspace:*",
    "@bos-web-engine/social-db-plugin": "workspace:*",
    "@bos-web-engine/wallet-selector-plugin": "workspace:*",
    "@monaco-editor/react": "^4.6.0",
    "@phosphor-icons/react": "^2.0.15",
    "emmet-monaco-es": "^5.3.0",
    "lodash.debounce": "^4.0.8",
    "zustand": "^4.4.3"
  },
  "devDependencies": {
    "@bos-web-engine/common": "workspace:*",
    "@rollup/plugin-commonjs": "^22.0.1",
    "@rollup/plugin-node-resolve": "^13.3.0",
    "@rollup/plugin-typescript": "^8.3.4",
    "@types/bn.js": "^5.1.5",
    "@types/lodash.debounce": "^4.0.9",
    "@types/node": "^20.11.24",
    "@types/react": "^18.2.34",
    "@types/react-dom": "^18.0.6",
    "dts-bundle-generator": "^9.3.1",
    "eslint": "^7.32.0",
    "eslint-config-custom": "workspace:*",
    "postcss": "^8.4.14",
    "postcss-preset-env": "^7.6.0",
    "rollup": "^2.77.2",
    "rollup-plugin-peer-deps-external": "^2.2.4",
    "rollup-plugin-postcss": "^4.0.2",
    "rollup-plugin-string": "^3.0.0",
    "rxjs": "^7.8.1",
    "tsconfig": "workspace:*",
    "tslib": "^2.6.2",
    "typescript": "^4.7.4"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

'''
'''--- packages/sandbox/rollup.config.js ---
import commonjs from '@rollup/plugin-commonjs';
import nodeResolve from '@rollup/plugin-node-resolve';
import typescript from '@rollup/plugin-typescript';
import postcssPresetEnv from 'postcss-preset-env';
import peerDepsExternal from 'rollup-plugin-peer-deps-external';
import postcss from 'rollup-plugin-postcss';
import { string } from 'rollup-plugin-string';

const extensions = ['.js', '.jsx', '.ts', '.tsx'];
const globals = {
  react: 'React',
  'react-dom': 'ReactDOM',
};

/** @type {import('rollup').RollupOptions} */
const options = {
  input: ['./src/index.ts'],
  output: [
    {
      file: './lib/index.esm.js',
      format: 'esm',
      globals,
    },
    {
      file: './lib/index.cjs.js',
      format: 'cjs',
      globals,
    },
  ],
  plugins: [
    string({
      include: '**/*.txt',
    }),
    peerDepsExternal(),
    nodeResolve({ extensions, browser: true }),
    commonjs(),
    typescript(),
    postcss({
      extract: 'styles.css',
      modules: true,
      plugins: [
        postcssPresetEnv({
          stage: 3,
          features: {
            'nesting-rules': true,
          },
        }),
      ],
    }),
  ],
};

export default options;

'''
'''--- packages/sandbox/src/components/FileExplorer.module.css ---
.wrapper {
  position: relative;
  z-index: 10;
  height: 100%;
  background: var(--color-surface-1);
  border-right: 1px solid var(--color-border-1);
}

.scroll {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  height: 100%;
  overflow: auto;
  scroll-behavior: smooth;
}

.fileList {
  all: unset;
  display: block;
  padding-top: 1px;
}

.fileListItem {
  all: unset;
  display: block;
  transition: background 200ms;

  &:hover {
    .fileDropdownButton {
      display: flex;
    }
  }

  &:hover,
  &:has([data-active='true']) {
    background: var(--color-surface-2);
  }

  &:has([data-state='open']) {
    background: var(--color-surface-3);
  }
}

.fileRow {
  all: unset;
  display: flex;
  min-width: 0;
  align-items: stretch;
  border-bottom: 1px solid var(--color-surface-1);
  box-shadow: inset 0 0 0 0px var(--color-focus-outline);
  transition:
    background 200ms,
    box-shadow 200ms;

  &:hover {
    background: var(--color-surface-3);
  }

  &[data-active='true'] {
    background: var(--color-surface-4);
  }

  &:has(span:focus),
  &:has(button:focus) {
    box-shadow: inset 0 0 0 2px var(--color-focus-outline);
  }

  &:has([contenteditable]) {
    background: var(--color-surface-4);
  }

  &[data-child='true'] {
    .fileButton {
      padding-left: 2.5rem;

      &::before {
        content: '';
        display: block;
        width: 1px;
        border-left: 1px solid var(--sand-7);
        position: absolute;
        top: 0.5rem;
        bottom: 0.5rem;
        left: 2rem;
      }
    }
  }

  &:has(input[type='checkbox']) {
    padding-left: 0.4rem;

    .fileButton {
      padding-left: 0.25rem;
      padding-right: 0.25rem;
    }
  }
}

.fileDropdownButton {
  all: unset;
  display: none;
  align-items: center;
  justify-content: center;
  width: 1.5rem;
  flex-shrink: 0;
  color: var(--color-text-1);
  opacity: 0.5;
  cursor: pointer;
  background: none;
  transition: all 200ms;

  svg {
    fill: currentColor;
  }

  &:hover {
    opacity: 1;
  }

  &[data-state='open'] {
    display: flex !important;
  }
}

.fileButton {
  all: unset;
  width: 100%;
  position: relative;
  display: flex;
  align-items: center;
  gap: 0.25rem;
  font-family: var(--font-primary);
  font-size: 0.8rem;
  line-height: 1.3;
  font-weight: 400;
  color: var(--color-text-1);
  padding: 0.2rem 0.75rem;
  box-sizing: border-box;
  cursor: pointer;
  min-width: 0;
  background: none;

  svg {
    flex-shrink: 0;
  }
}

.fileName {
  display: block;
  overflow: hidden;
  white-space: nowrap;
  width: 100%;
  text-overflow: ellipsis;
  padding: 0.25rem;
  box-sizing: border-box;
  min-width: 0;
  outline: none;

  &[contenteditable] {
    text-overflow: clip;
  }
}

.fileIcon {
  fill: var(--color-text-2);

  [data-modified='true'] & {
    fill: var(--color-affirm);
  }
}

.footer {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 0 1rem;
  align-items: stretch;

  svg {
    margin: 0 auto;
  }
}

'''
'''--- packages/sandbox/src/components/FileOpener.module.css ---
.wrapper {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin: -1rem;
}

.fileList {
  all: unset;
  display: block;
}

.fileListItem {
  all: unset;
  position: relative;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  width: 100%;
  min-width: 0;
  box-sizing: border-box;
  padding: 0.3rem 0.75rem;
  font-family: var(--font-primary);
  font-size: 0.8rem;
  line-height: 1.4;
  font-weight: 400;
  color: var(--color-text-1);
  border-radius: 0.2rem;
  user-select: none;
  outline: none;
  cursor: pointer;
  transition: all 200ms;

  &:hover {
    background: var(--color-surface-2);
  }

  &[aria-selected='true'],
  &:focus {
    background: var(--color-surface-4);
  }

  svg {
    flex-shrink: 0;
  }
}

.fileName {
  display: block;
  overflow: hidden;
  white-space: nowrap;
  width: 100%;
  text-overflow: ellipsis;
  padding: 0.25rem;
  box-sizing: border-box;
  min-width: 0;
  outline: none;
}

.examplesList {
  margin: 0;
}

'''
'''--- packages/sandbox/src/components/Layout.module.css ---
.wrapper {
  display: grid;
  grid-template-columns: min-content 14rem 1fr 1fr;
  width: 100%;
  height: 100%;

  > * {
    overflow: hidden;
  }

  &[data-expanded-panel='PREVIEW'] {
    grid-template-columns: min-content 0px 0px 1fr;
  }

  &[data-expanded-panel='SOURCE'],
  &[data-mode='PUBLISH'] {
    grid-template-columns: min-content 14rem 1fr 0px;
  }

  &[data-mode='EDIT'] {
    [data-monaco='diff'] {
      display: none;
    }
  }
  &[data-mode='PUBLISH'] {
    [data-monaco='editor'] {
      display: none;
    }
  }
}

'''
'''--- packages/sandbox/src/components/Loading.module.css ---
.wrapper {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;

  p {
    font-size: 1rem;
    line-height: 1.5;
    color: currentColor;
  }
}

.spinner {
  display: inline-flex;
  width: 3rem;
  height: 3rem;
  animation: spin 1.2s linear infinite;
  border-radius: 50%;
  border: 4px solid currentColor;
  border-color: currentColor transparent currentColor transparent;
  flex-shrink: 0;
  flex-grow: 0;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

'''
'''--- packages/sandbox/src/components/MonacoDiff.module.css ---
.wrapper {
  flex: 1 0 auto;
  min-width: 0;
  box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);
  background: var(--color-surface-2);
}

.header {
  display: grid;
  grid-template-columns: 1fr 1fr;
  height: 1.5rem;
  background: var(--color-surface-2);
}

.headerSection {
  display: flex;
  align-items: center;
  padding: 0 0.5rem;
}

'''
'''--- packages/sandbox/src/components/MonacoEditor.module.css ---
.wrapper {
  flex: 1 0 auto;
  min-width: 0;
  box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);
  background: var(--color-surface-2);

  &[data-loading='true'] {
    .monaco {
      position: absolute;
      opacity: 0;
    }
  }
}

'''
'''--- packages/sandbox/src/components/Preview.module.css ---
.wrapper {
  height: 100%;
  position: relative;
  background: linear-gradient(-45deg, #7d66d9, #4ccce6);
  box-sizing: border-box;
}

.header {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 2.5rem;
  box-sizing: border-box;
  padding: 1rem 1rem 0;
}

.pinnedComponentSelector {
  all: unset;
  display: flex;
  height: 100%;
  width: 100%;
  min-width: 0;
  align-items: center;
  justify-content: center;
  gap: 0.75rem;
  font-family: var(--font-primary);
  font-size: 0.8rem;
  font-weight: 400;
  color: var(--white-a12);
  background: var(--black-a6);
  padding: 0 0.75rem;
  box-sizing: border-box;
  cursor: pointer;
  transition: all 200ms;
  mix-blend-mode: overlay;

  span {
    min-width: 0;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  svg {
    flex-shrink: 0;
  }

  &:hover,
  &:focus {
    background: var(--black-a7);
  }
}

.scroll {
  position: absolute;
  inset: 2.5rem 1rem 1rem;
  overflow: auto;
  scroll-behavior: smooth;
}

'''
'''--- packages/sandbox/src/components/PublishButton.module.css ---
.wrapper {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

'''
'''--- packages/sandbox/src/components/Sandbox.module.css ---
.wrapper {
  width: 100%;
  overflow: hidden;
  font-family: var(--font-primary);
  color: var(--color-text-1);

  > div {
    height: 100%;
    width: 100%;
  }
}

'''
'''--- packages/sandbox/src/components/SidebarActions.module.css ---
.wrapper {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  align-items: center;
  position: relative;
  z-index: 20;
  width: 3rem;
  flex-shrink: 0;
  box-sizing: border-box;
  padding: 0.5rem 0;
  border-right: 1px solid var(--color-border-1);
  background: var(--color-surface-1);
}

.action {
  all: unset;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 2rem;
  height: 2rem;
  border-radius: 0.25rem;
  color: var(--color-text-2);
  cursor: pointer;
  box-shadow: 0 0 0 0px var(--color-focus-outline);
  transition: all 200ms;

  svg {
    width: 1.25rem;
    height: 1.25rem;
    fill: currentColor;
  }

  &:hover {
    color: var(--white-a12);
    background: var(--color-primary-action);
  }

  &:focus {
    box-shadow: 0 0 0 2px var(--color-focus-outline);
  }
}

.actionBadge {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 0.75rem;
  height: 0.75rem;
  font-size: 0.5rem;
  font-weight: 700;
  background: var(--color-affirm);
  color: var(--green-1);
  position: absolute;
  top: -0.325rem;
  right: -0.325rem;
  border-radius: 100%;
}

.localDeleteConfirmation {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

'''
'''--- packages/sandbox/src/constants.ts ---
import { SandboxFile, SandboxFiles } from './hooks/useSandboxStore';
import { MonacoExternalLibrary } from './types';
import pluginsDefinitionSource from '../artifacts/plugins.d.ts.txt';

export const FILE_EXTENSIONS = ['tsx', 'module.css'] as const;
export type FileExtension = (typeof FILE_EXTENSIONS)[number];

export const DEFAULT_SANDBOX_ACCOUNT_ID = 'bwe-web.near';
export const FILE_EXTENSION_REGEX = new RegExp(
  `\\.(${FILE_EXTENSIONS.join('|')})$`
);
export const PREVIEW_UPDATE_DEBOUNCE_DELAY = 750;

export const MONACO_EXTERNAL_LIBRARIES: MonacoExternalLibrary[] = [
  {
    // Include the DOM types manually due to TS Config `lib: ["dom"]` not working in Monaco:
    resolutionPath: 'file:///dom.d.ts',
    url: 'https://www.unpkg.com/typescript@5.3.3/lib/lib.dom.d.ts',
  },
  {
    // Include the ES types manually due to TS Config `lib: ["ESNext"]` not working in Monaco:
    resolutionPath: 'file:///es.d.ts',
    url: 'https://www.unpkg.com/typescript@5.3.3/lib/lib.esnext.d.ts',
  },
  {
    resolutionPath: 'file:///node_modules/@types/react/index.d.ts',
    url: 'https://unpkg.com/@types/react@18.2.47/index.d.ts',
  },
  {
    resolutionPath: 'file:///node_modules/@types/react-dom/index.d.ts',
    url: 'https://unpkg.com/@types/react-dom@18.2.18/index.d.ts',
  },
  {
    resolutionPath: 'file:///node_modules/@types/react/jsx-runtime.d.ts',
    url: 'https://unpkg.com/@types/react@18.2.47/jsx-runtime.d.ts',
  },
  {
    resolutionPath: 'file:///plugins.d.ts',
    source: `
      declare namespace Plugins {
        ${pluginsDefinitionSource}
      }

      declare module "@bos-web-engine/social-db-plugin" {
        const plugin: Plugins.SocialDbPlugin;
        export type SocialGetResponse<T> = Plugins.SocialGetResponse<T>;
        export = plugin;
      }

      declare module "@bos-web-engine/wallet-selector-plugin" {
        const plugin: Plugins.WalletSelectorPlugin;
        export = plugin;
      }

      declare module "@bos-web-engine/container-storage-plugin" {
        const plugin: Plugins.ContainerStoragePlugin;
        export = plugin;
      }
    `,
  },
  {
    resolutionPath: 'file:///globals.d.ts',
    source: `import { JSX } from 'react';
    
    declare global {
      declare module '*.module.css' {
        const classes: { [key: string]: string };
        export default classes;
      }

      interface BWEComponentConfig {
        id?: string;
        trust?: { mode: string };
      }

      interface BWEComponentProps {
        bwe?: BWEComponentConfig;
      }

      type BWEComponent<TProps = {}> = (props: TProps & BWEComponentProps) => JSX.Element;

      function Component(props: { bwe: { src: string; } & BWEComponentConfig } & Record<any, any>): JSX.Element
    }`,
  },
];

export const DEFAULT_FILES: SandboxFiles = {
  'HelloWorld.tsx': {
    css: `.wrapper {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 1rem;
  background-color: #f1f0ef;
  min-height: calc(100vh - var(--gateway-header-height))
}    

.examples {
  display: flex;
  flex-direction: row;
  column-gap: 1rem;
  flex-wrap: wrap;
  row-gap: 1.5rem;
}
  
.card {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 2rem;
  padding: 2rem;
  max-width: 500px;
  background: var(--color-surface-1);
  border-radius: 1rem;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.05), 0 5px 5px rgba(0, 0, 0, 0.05), 0 0 30px rgba(0, 0, 0, 0.05);
  min-width: 25rem;
}

.icon {
  width: 1.5rem;
  height: 1.5rem;
}
  `,
    source: `/*
  Welcome to the BOS Web Engine Sandbox!

  This environment has TypeScript support. All changes in this IDE 
  are automatically persisted in local storage. Feel free to add, 
  remove, and rename files.
  
  The following code example demonstrates multi file component editing 
  capabilities. Try opening up Message.tsx from the file explorer, 
  make a visible code change, and then come back to HelloWorld.tsx
  to see your changes reflected in the imported component.
*/

import { useState } from 'react';
import Message from './Message';
import s from './styles.module.css';

// expect error underlines on npm import lines, the editor is not able to resolve them
import reverse from 'lodash/reverse';

function HelloWorld() {
  const [count, setCount] = useState(0);

  return (
    <div className={s.wrapper}>
      <h1>Welcome to the BOS Web Engine Sandbox!</h1>
      <div style={{ display: 'flex', columnGap: '0.5rem' }}>
        <p>If you are new to BWE development, check out the docs in the sidebar 👀</p>
      </div>
      <p>You can hit the + button in the sidebar to create a new component with recommended boilerplate</p>

      <h2>Here are a few examples</h2>
      <div className={s.examples}>
        <div className={s.card}>
          <h3>Embedding another BWE component</h3>
          <Message message="Hello world!" />
        </div>
        <div className={s.card}>
          <h3>React <code>useState</code></h3>
          <button type="button" onClick={() => setCount((value) => value + 1)}>
            Increase Count: {count}
          </button>
        </div>
        <div className={s.card}>
          <h3>Using an imported library</h3>
          <p>Lodash <code>_.reverse([1, 2, 3])</code></p>
          {JSON.stringify(reverse([1, 2, 3]))}
        </div>
      </div>
    </div>
  );
}

export default HelloWorld as BWEComponent;
`,
  },
  'Message.tsx': {
    css: `.wrapper {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  padding: 1rem;
  background: var(--green-4);
  color: var(--green-1);
  border-radius: 0.5rem;

  --green-1: #fbfefc;
  --green-4: #d6f1df;
  --green-10: #2b9a66;
}

.title {
  color: var(--green-10);
}

.message {
  color: var(--green-10);
}
`,
    source: `import s from './styles.module.css';

type Props = {
  message?: string;
};

function Message({ message = 'Default message...' }: Props) {
  return (
    <div className={s.wrapper}>
      <h2 className={s.title}>Message:</h2>
      <p className={s.message}>{message}</p>
    </div>
  );
}

export default Message as BWEComponent<Props>;
`,
  },
};

export const NEW_COMPONENT_TEMPLATE: SandboxFile = {
  css: `.wrapper {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}
`,
  source: `import s from './styles.module.css';

type Props = {
  message?: string;
};

function MyComponent({ message = "Hello!" }: Props) {
  return (
    <div className={s.wrapper}>
      <p>{message}</p>
    </div>
  );
}

export default MyComponent as BWEComponent<Props>;
`,
};

'''
'''--- packages/sandbox/src/global.d.ts ---
declare module '*.css' {
  const classes: { [key: string]: string };
  export default classes;
}

declare module '*.txt' {
  const source: string;
  export default source;
}

'''
'''--- packages/sandbox/src/helpers/fetch-published-files.ts ---
import {
  SOCIAL_COMPONENT_NAMESPACE,
  type SocialDb,
} from '@bos-web-engine/social-db';

import { type SandboxFiles } from '../hooks/useSandboxStore';
import { convertComponentNameToFilePath } from '../utils';

export async function fetchPublishedFiles(social: SocialDb, accountId: string) {
  const response = await social.get<{
    [SOCIAL_COMPONENT_NAMESPACE]: {
      [componentName: string]: {
        '': string;
        css: string;
      };
    };
  }>({
    key: `${accountId}/${SOCIAL_COMPONENT_NAMESPACE}/**`,
  });

  const publishedFiles: SandboxFiles = {};
  const accountData = response[accountId];
  const componentsData = (accountData ?? {})[SOCIAL_COMPONENT_NAMESPACE] ?? {};

  Object.entries(componentsData).forEach(([componentName, component]) => {
    if (component) {
      const filePathTsx = convertComponentNameToFilePath(componentName, 'tsx');

      publishedFiles[filePathTsx] = {
        css: component.css ?? '',
        source: component[''] ?? '',
      };
    }
  });

  return publishedFiles;
}

'''
'''--- packages/sandbox/src/hooks/useDebounced.ts ---
// https://www.developerway.com/posts/debouncing-in-react

import debounce from 'lodash.debounce';
import { useEffect, useMemo, useRef, useState } from 'react';

export function useDebouncedFunction(
  callback: () => void,
  delay: number
): ReturnType<typeof debounce> {
  const ref = useRef<() => void>();

  useEffect(() => {
    ref.current = callback;
  }, [callback]);

  const debouncedCallback = useMemo(() => {
    const func = () => {
      ref.current?.();
    };

    return debounce(func, delay);
  }, [delay]);

  return debouncedCallback;
}

export function useDebouncedValue<T>(value: T, delay: number) {
  const [internalValue, setInternalValue] = useState<T>(value);

  const updateValue = useDebouncedFunction(() => {
    setInternalValue(value);
  }, delay);

  useEffect(() => {
    updateValue();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [value]);

  return internalValue;
}

'''
'''--- packages/sandbox/src/hooks/useFileWithMonaco.ts ---
import {
  SandboxFile,
  SandboxFileChildSourceType,
  useSandboxStore,
} from './useSandboxStore';

function useFileWithMonaco(
  filePath: string | undefined,
  file: SandboxFile | undefined,
  childSourceType?: SandboxFileChildSourceType
) {
  let language = 'typescript';
  let path = filePath ?? 'undefined.tsx';
  let value = file?.source;

  if (childSourceType === 'CSS') {
    language = 'scss';
    path += '.scss';
    value = file?.css;
  }

  return {
    path,
    language,
    value,
  };
}

export function useModifiedFileWithMonaco(
  filePath: string | undefined,
  childSourceType?: SandboxFileChildSourceType
) {
  const files = useSandboxStore((store) => store.files);
  const file = files[filePath ?? ''];
  const result = useFileWithMonaco(filePath, file, childSourceType);

  return result;
}

export function useOriginalFileWithMonaco(
  filePath: string | undefined,
  childSourceType?: SandboxFileChildSourceType
) {
  const publishedFiles = useSandboxStore((store) => store.publishedFiles);
  const file = publishedFiles[filePath ?? ''];
  const result = useFileWithMonaco(filePath, file, childSourceType);

  return result;
}

'''
'''--- packages/sandbox/src/hooks/useModifiedFiles.ts ---
import { useMemo } from 'react';

import { useSandboxStore } from './useSandboxStore';

export function useModifiedFiles() {
  const files = useSandboxStore((store) => store.files);
  const isInitializingPublishedFiles = useSandboxStore(
    (store) => store.isInitializingPublishedFiles
  );
  const publishedFiles = useSandboxStore((store) => store.publishedFiles);

  const modifiedFilePaths = useMemo(() => {
    const result: string[] = [];

    if (isInitializingPublishedFiles) return result;

    Object.entries(files).forEach(([path, file]) => {
      if (!file) return;

      const publishedFile = publishedFiles[path];

      if (
        !publishedFile ||
        publishedFile.source !== file.source ||
        publishedFile.css !== file.css
      ) {
        result.push(path);
      }
    });

    return result;
  }, [files, isInitializingPublishedFiles, publishedFiles]);

  return {
    modifiedFilePaths,
  };
}

'''
'''--- packages/sandbox/src/hooks/useMonaco.ts ---
/*
  This is a simple re-implementation of: https://github.com/suren-atoyan/monaco-react/blob/master/src/hooks/useMonaco/index.ts
  Due to this open issue: https://github.com/suren-atoyan/monaco-react/issues/440
*/

import { Monaco, loader } from '@monaco-editor/react';
import { useEffect, useState } from 'react';

export function useMonaco(): Monaco | null {
  const [monaco, setMonaco] = useState<Monaco | null>(
    loader.__getMonacoInstance()
  );

  useEffect(() => {
    let cancelable: ReturnType<typeof loader.init>;

    if (!monaco) {
      cancelable = loader.init();

      cancelable
        .then((monaco) => {
          setMonaco(monaco);
        })
        .catch((error) => {
          // Swallow harmless error
          if ((error as any).msg !== 'operation is manually canceled') {
            console.error(error);
          }
        });
    }

    return () => cancelable?.cancel();

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return monaco;
}

'''
'''--- packages/sandbox/src/hooks/useMonacoTheme.ts ---
import { useTheme } from '@bos-web-engine/ui';

export function useMonacoTheme() {
  const { theme } = useTheme();
  const monacoTheme = theme === 'dark' ? 'vs-dark' : 'vs-light';
  return monacoTheme;
}

'''
'''--- packages/sandbox/src/hooks/usePublishedFilesSync.ts ---
import { useSocial } from '@bos-web-engine/social-db';
import { useWallet } from '@bos-web-engine/wallet-selector-control';
import { useEffect } from 'react';

import { useSandboxStore } from './useSandboxStore';
import { fetchPublishedFiles } from '../helpers/fetch-published-files';

export function usePublishedFilesSync() {
  const { account, hasResolved } = useWallet();
  const { social } = useSocial();
  const mode = useSandboxStore((store) => store.mode);
  const setPublishedFiles = useSandboxStore((store) => store.setPublishedFiles);

  useEffect(() => {
    if (!account) {
      if (hasResolved) setPublishedFiles({});
      return;
    }

    const fetchFilesForCurrentAccount = async () => {
      try {
        const files = await fetchPublishedFiles(social, account.accountId);
        setPublishedFiles(files);
      } catch (error) {
        console.error(
          'Failed to fetch published components for current account',
          error
        );
      }
    };

    fetchFilesForCurrentAccount();
  }, [account, hasResolved, mode, setPublishedFiles, social]);
}

'''
'''--- packages/sandbox/src/hooks/useSandboxStore.ts ---
import { QueryParams } from '@bos-web-engine/common';
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';

import { DEFAULT_FILES, NEW_COMPONENT_TEMPLATE } from '../constants';
import { returnUniqueFilePath, sortFiles } from '../utils';

export type SandboxFile = {
  css?: string;
  source: string;
};

export type SandboxFiles = {
  [path: string]: SandboxFile | undefined;
};

type SandboxMode = 'EDIT' | 'PUBLISH';
type SandboxModeEditPanelType = 'SOURCE' | 'PREVIEW';
export type SandboxFileChildSourceType = 'CSS';

type SandboxStore = {
  activeFileChildSourceType: SandboxFileChildSourceType | undefined;
  activeFilePath: string | undefined;
  containerElement: HTMLDivElement | undefined;
  editingFileNamePath: string | undefined;
  expandedEditPanel: SandboxModeEditPanelType | undefined;
  files: SandboxFiles;
  isInitializingPublishedFiles: boolean;
  mode: SandboxMode;
  pinnedPreviewFilePath: string | undefined;
  publishedFiles: SandboxFiles;
  queryParams: QueryParams | undefined;

  addNewFile: (
    options?: Partial<{
      file: Partial<SandboxFile>;
      shouldFocusRenameInput: boolean;
    }>
  ) => void;
  removeFile: (path: string) => void;
  resetAllFiles: () => void;
  setActiveFile: (
    path: string,
    childSourceType?: SandboxFileChildSourceType
  ) => void;
  setContainerElement: (element: HTMLDivElement | undefined) => void;
  setEditingFileName: (path: string | undefined) => void;
  setExpandedEditPanel: (panel: SandboxModeEditPanelType | undefined) => void;
  setFile: (path: string, partialFile: Partial<SandboxFile>) => void;
  setFiles: (files: SandboxFiles) => void;
  setMode: (mode: SandboxMode) => void;
  setPinnedPreviewFile: (path: string | undefined) => void;
  setPublishedFiles: (files: SandboxFiles) => void;
  setQueryParams: (params: QueryParams | undefined) => void;
  updateFilePath: (currentPath: string, newPath: string) => void;
};

export const useSandboxStore = create<SandboxStore>()(
  persist(
    (set, get) => ({
      activeFileChildSourceType: undefined,
      activeFilePath: undefined,
      containerElement: undefined,
      editingFileNamePath: undefined,
      expandedEditPanel: undefined,
      isInitializingPublishedFiles: true,
      files: DEFAULT_FILES,
      mode: 'EDIT',
      pinnedPreviewFilePath: undefined,
      publishedFiles: {},
      queryParams: undefined,

      addNewFile: ({ file, shouldFocusRenameInput = true } = {}) => {
        const state = get();
        const path = returnUniqueFilePath(state.files, 'Untitled', 'tsx');
        state.setFile(path, { ...NEW_COMPONENT_TEMPLATE, ...file });
        state.setActiveFile(path);

        if (shouldFocusRenameInput) {
          state.setEditingFileName(path);
        }
      },

      removeFile: (path) =>
        set((state) => {
          const files = { ...state.files };
          delete files[path];

          const activeFilePath =
            state.activeFilePath === path ? undefined : state.activeFilePath;

          const pinnedPreviewFilePath =
            state.pinnedPreviewFilePath === path
              ? undefined
              : state.pinnedPreviewFilePath;

          return {
            activeFilePath,
            files,
            pinnedPreviewFilePath,
          };
        }),

      resetAllFiles: () =>
        set({
          activeFilePath: Object.keys(DEFAULT_FILES).shift(),
          activeFileChildSourceType: undefined,
          editingFileNamePath: undefined,
          files: DEFAULT_FILES,
          pinnedPreviewFilePath: undefined,
        }),

      setActiveFile: (activeFilePath, activeFileChildSourceType) =>
        set({ activeFilePath, activeFileChildSourceType }),

      setContainerElement: (containerElement) => set({ containerElement }),

      setEditingFileName: (editingFileNamePath) => set({ editingFileNamePath }),

      setExpandedEditPanel: (expandedEditPanel) => set({ expandedEditPanel }),

      setFile: (path, partialFile) =>
        set((state) => {
          const existingFile = state.files[path];
          const updatedFile = {
            ...existingFile,
            ...partialFile,
          };

          if (JSON.stringify(existingFile) === JSON.stringify(updatedFile)) {
            // If the file hasn't changed, don't update the files object
            return {};
          }

          const files = {
            ...state.files,
            [path]: {
              css: updatedFile.css,
              source: updatedFile.source ?? '',
            },
          };

          return {
            files: sortFiles(files),
          };
        }),

      setFiles: (files) => set(() => ({ files: sortFiles(files) })),

      setMode: (mode) => set({ mode }),

      setPinnedPreviewFile: (pinnedPreviewFilePath) =>
        set({ pinnedPreviewFilePath }),

      setPublishedFiles: (publishedFiles) =>
        set(() => ({ isInitializingPublishedFiles: false, publishedFiles })),

      setQueryParams: (queryParams) => set(() => ({ queryParams })),

      updateFilePath: (currentPath, newPath) =>
        set((state) => {
          const currentFile = state.files[currentPath];
          const files = { ...state.files };

          if (currentFile) {
            delete files[currentPath];
            files[newPath] = { ...currentFile };
          }

          return {
            files: sortFiles(files),
          };
        }),
    }),
    {
      name: 'bwe-sandbox-ide-store',
      storage: createJSONStorage(() => localStorage),
      partialize({
        activeFilePath,
        activeFileChildSourceType,
        expandedEditPanel,
        files,
        mode,
        pinnedPreviewFilePath,
      }) {
        return {
          activeFilePath,
          activeFileChildSourceType,
          expandedEditPanel,
          files,
          mode,
          pinnedPreviewFilePath,
        };
      },
    }
  )
);

'''
'''--- packages/sandbox/src/hooks/useSourceAccountReplace.ts ---
import { useWallet } from '@bos-web-engine/wallet-selector-control';
import { useEffect } from 'react';

import { useSandboxStore } from './useSandboxStore';
import { DEFAULT_SANDBOX_ACCOUNT_ID } from '../constants';

/*
  This hook is a temporary work around until proper syntax is supported 
  to reference local components. It swaps all default account references 
  in the source code to your current account.
*/

export function useSourceAccountReplace() {
  const { account } = useWallet();
  const files = useSandboxStore((store) => store.files);
  const setFiles = useSandboxStore((store) => store.setFiles);

  useEffect(() => {
    if (!account) return;

    Object.values(files).forEach((file) => {
      if (file) {
        const regex = new RegExp(`src="${DEFAULT_SANDBOX_ACCOUNT_ID}/`, 'g');
        file.source = file.source.replace(regex, `src="${account.accountId}/`);
      }
    });

    setFiles(files);

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [account]);
}

'''
'''--- packages/sandbox/src/index.ts ---
export { Sandbox } from './components/Sandbox';

'''
'''--- packages/sandbox/src/monaco/auto-close-html-tags.ts ---
/*
  The following code was copied from this issue thread due to Monaco not natively supporting this feature:
  https://github.com/microsoft/monaco-editor/issues/221#issuecomment-1625456462
*/

import { OnMount } from '@monaco-editor/react';

export function autoCloseHtmlTags(
  editor: Parameters<OnMount>[0],
  monaco: Parameters<OnMount>[1]
) {
  editor.onKeyDown((event) => {
    // select enabled languages
    const enabledLanguages = ['html', 'markdown', 'javascript', 'typescript']; // enable js & ts for jsx & tsx

    const model = editor.getModel();
    if (!model || !enabledLanguages.includes(model.getLanguageId())) {
      return;
    }

    const isSelfClosing = (tag: string) =>
      [
        'area',
        'base',
        'br',
        'col',
        'command',
        'embed',
        'hr',
        'img',
        'input',
        'keygen',
        'link',
        'meta',
        'param',
        'source',
        'track',
        'wbr',
        'circle',
        'ellipse',
        'line',
        'path',
        'polygon',
        'polyline',
        'rect',
        'stop',
        'use',
      ].includes(tag);

    // when the user enters '>'
    if (event.browserEvent.key === '>') {
      const currentSelections = editor.getSelections() ?? [];

      type Edits = Parameters<typeof editor.executeEdits>[1];
      type Selections = Parameters<typeof editor.executeEdits>[2];
      const edits: Edits = [];
      const newSelections: Selections = [];

      // potentially insert the ending tag at each of the selections
      for (const selection of currentSelections) {
        // shift the selection over by one to account for the new character
        newSelections.push(
          new monaco.Selection(
            selection.selectionStartLineNumber,
            selection.selectionStartColumn + 1,
            selection.endLineNumber,
            selection.endColumn + 1
          )
        );
        // grab the content before the cursor
        const contentBeforeChange = model.getValueInRange({
          startLineNumber: 1,
          startColumn: 1,
          endLineNumber: selection.endLineNumber,
          endColumn: selection.endColumn,
        });

        // if ends with a HTML tag we are currently closing
        const match = contentBeforeChange.match(/<([\w-]+)(?![^>]*\/>)[^>]*$/);
        if (!match) {
          continue;
        }

        const [fullMatch, tag] = match;

        // skip self-closing tags like <br> or <img>
        if (isSelfClosing(tag) || fullMatch.trim().endsWith('/')) {
          continue;
        }

        // add in the closing tag
        edits.push({
          range: {
            startLineNumber: selection.endLineNumber,
            startColumn: selection.endColumn + 1, // add 1 to offset for the inserting '>' character
            endLineNumber: selection.endLineNumber,
            endColumn: selection.endColumn + 1,
          },
          text: `</${tag}>`,
        });
      }

      // wait for next tick to avoid it being an invalid operation
      setTimeout(() => {
        editor.executeEdits(model.getValue(), edits, newSelections);
      }, 0);
    }
  });
}

'''
'''--- packages/sandbox/src/plugins.ts ---
/*
  This file re-exports the plugin type definitions that will be provided to Monaco in 
  the "file:///plugins.d.ts" in "constants.ts".
  
  This file is processed by the "build:artifacts" script setup in "package.json" (which uses 
  dts-bundle-generator) and outputs a file at "./artifacts/plugins.d.ts.txt". The "string" 
  rollup plugin will resolve any "*.txt" imports as strings.

  If a new plugin is added (or removed/renamed), you'll need to:

  1. Update this file with an export below

  2. Update the contents of the "file:///plugins.d.ts" entry of "MONACO_EXTERNAL_LIBRARIES" in 
  "constants.ts" to export the module

  If an existing plugin is modified (maybe a new method is added), no updates are necessary. 
  You'll just need to make sure that the "build:artifacts" command is re-run to pull in the 
  updated type definitions. This happens automatically if you quit and restart "pnpm dev" 
  or simply run "pnpm build" for the entire monorepo.
*/

export type {
  SocialDbPlugin,
  SocialGetResponse,
} from '@bos-web-engine/social-db-plugin';
export type { WalletSelectorPlugin } from '@bos-web-engine/wallet-selector-plugin';
export type { ContainerStoragePlugin } from '@bos-web-engine/container-storage-plugin';

'''
'''--- packages/sandbox/src/types.ts ---
export type MonacoExternalLibrary = {
  resolutionPath: string;
  source?: string;
  url?: string;
};

'''
'''--- packages/sandbox/src/utils.ts ---
import {
  FileExtension,
  FILE_EXTENSION_REGEX,
  FILE_EXTENSIONS,
} from './constants';
import { SandboxFiles } from './hooks/useSandboxStore';

export function convertComponentNameToFilePath(
  componentName: string,
  fileExtension: FileExtension
) {
  // Input: "MyNamespace.MyFile"
  // Output: "MyNamespace/MyFile.tsx"

  const filePath = componentName.replace(/\./g, '/');

  return `${filePath}.${fileExtension}`;
}

export function convertFilePathToComponentName(filePath: string) {
  // Input: "MyFolder/MyFile.tsx"
  // Output: "MyFolder.MyFile"

  // Input: "MyFolder/MyFile.module.css"
  // Output: "MyFolder.MyFile"

  const componentName = filePath
    .replace(FILE_EXTENSION_REGEX, '')
    .replace(/\//g, '.');

  return componentName;
}

export function filePathIsComponent(filePath: string) {
  const fileExtension = filePath.split('.').pop() ?? '';
  return ['tsx'].includes(fileExtension);
}

export function normalizeFilePathAndExtension(filePath: string) {
  let filePathWithoutExtension = filePath.replace(FILE_EXTENSION_REGEX, '');
  let fileExtension = filePath.replace(
    filePathWithoutExtension,
    ''
  ) as FileExtension;

  if (!FILE_EXTENSIONS.includes(fileExtension)) {
    fileExtension = 'tsx';
  }

  // Convert all remaining "." to "/":
  filePathWithoutExtension = filePathWithoutExtension.replace(/\./g, '/');

  return {
    fileExtension,
    filePathWithoutExtension,
  };
}

export function returnUniqueFilePath(
  files: SandboxFiles,
  filePathWithoutExtension: string,
  fileExtension: string,
  _index = 0
): string {
  const uniquePath =
    _index > 0
      ? `${filePathWithoutExtension}${_index + 1}`
      : filePathWithoutExtension;
  const paths = Object.keys(files);
  const isUnique = !paths.includes(`${uniquePath}.${fileExtension}`);

  if (isUnique) return `${uniquePath}.${fileExtension}`;

  return returnUniqueFilePath(
    files,
    filePathWithoutExtension,
    fileExtension,
    _index + 1
  );
}

export function sortFiles(files: SandboxFiles) {
  const sorted: SandboxFiles = {};
  const paths = Object.keys(files).sort();

  paths.forEach((path) => {
    sorted[path] = files[path];
  });

  return sorted;
}

'''
'''--- packages/sandbox/tsconfig.json ---
{
  "extends": "tsconfig/react-library.json",
  "include": ["src"],
  "exclude": ["lib", "node_modules"],
  "compilerOptions": {
    "outDir": "lib"
  }
}

'''
'''--- packages/social-db-plugin/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ['custom'],
};

'''
'''--- packages/social-db-plugin/package.json ---
{
  "name": "@bos-web-engine/social-db-plugin",
  "version": "1.0.0",
  "description": "",
  "main": "lib/index.js",
  "scripts": {
    "build": "tsc -p ./tsconfig.json",
    "dev": "tsc -w -p ./tsconfig.json",
    "lint": "eslint ./src/**/*.ts*",
    "lint:fix": "eslint . --fix"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@bos-web-engine/common": "workspace:*",
    "@bos-web-engine/social-db": "workspace:*",
    "@types/node": "^17.0.12",
    "eslint": "^7.32.0",
    "eslint-config-custom": "workspace:*",
    "tsconfig": "workspace:*",
    "typescript": "^4.5.2"
  }
}

'''
'''--- packages/social-db-plugin/src/index.ts ---
import type { WebEngine, WebEngineContext } from '@bos-web-engine/common';
import type { SocialDb } from '@bos-web-engine/social-db';
export type { SocialGetResponse } from '@bos-web-engine/social-db';

declare global {
  interface Window {
    webEngine: WebEngine;
  }
}

export type SocialDbPlugin = {
  socialDb: Pick<SocialDb, 'get' | 'set'>;
};

export default function initializeSocialDbPlugin() {
  function initSocialDbPlugin({
    callApplicationMethod,
  }: WebEngineContext): SocialDbPlugin {
    const get: SocialDb['get'] = (args) =>
      callApplicationMethod({
        args: [args],
        method: 'socialDb.get',
      });

    const set: SocialDb['set'] = (args) =>
      callApplicationMethod({
        args: [args],
        method: 'socialDb.set',
      });

    /*
      NOTE: The definition/type syntax used above gives us the benefit of pulling in 
      the correct TS Doc information when hovering over or interacting with any of 
      the plugin methods when exported. EG: `const set: SocialDb['set'] = ...`
    */

    return {
      socialDb: {
        get,
        set,
      },
    };
  }

  return window.webEngine.initPlugin<SocialDbPlugin>(initSocialDbPlugin);
}

'''
'''--- packages/social-db-plugin/tsconfig.json ---
{
  "extends": "tsconfig/react-library.json",
  "include": ["src"],
  "exclude": ["lib", "node_modules"],
  "compilerOptions": {
    "outDir": "lib"
  }
}

'''
'''--- packages/social-db/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ['custom'],
};

'''
'''--- packages/social-db/README.md ---
# BWE Social DB API

This package allows you to easily interact with the `social.near` contract (Social DB).

## Standard Usage (Providers and Hooks)

The most convenient way to implement this package is through our hooks and providers. An example of using `<WalletSelectorProvider />`, `<SocialProvider />`, and `<WalletSelectorControl />` inside your Next JS `_app.tsx` file:

```tsx
import '@bos-web-engine/ui/reset.css';
import '@bos-web-engine/ui/styles.css';
import '@bos-web-engine/wallet-selector-control/styles.css';
import '@near-wallet-selector/modal-ui/styles.css';
import '@/styles/globals.css';

import {
  MAINNET_SOCIAL_CONTRACT_ID,
  SocialProvider,
  SocialDb,
} from '@bos-web-engine/social-db';
import { ThemeProvider } from '@bos-web-engine/ui';
import {
  WalletSelectorControl,
  WalletSelectorProvider,
} from '@bos-web-engine/wallet-selector-control';
import type { WalletSelector } from '@near-wallet-selector/core';
import type { AppProps } from 'next/app';
import { useState } from 'react';

export default function App({ Component, pageProps }: AppProps) {
  const [walletSelector, setWalletSelector] = useState<WalletSelector | null>(
    null
  );
  const [social, setSocial] = useState<SocialDb | null>(null);

  console.log('Access these APIs in your root!', walletSelector, social);

  return (
    <WalletSelectorProvider
      contractId={MAINNET_SOCIAL_CONTRACT_ID}
      onProvision={(selector) => setWalletSelector(selector)}
      params={{
        network: 'mainnet',
        modules: [...],
      }}
    >
      <SocialProvider
        networkId='mainnet'
        onProvision={(db) => setSocial(db)}
        walletSelector={walletSelector}
      >
        <ThemeProvider defaultTheme="light">
          <header>
            <WalletSelectorControl />
          </header>

          <main>
            <Component {...pageProps} />
          </main>
        </ThemeProvider>
      </SocialProvider>
    </WalletSelectorProvider>
  );
}
```

### Debug Logs

To enable detailed debug logs related to RPC interaction, you can pass the `debug` prop:

```tsx
<SocialProvider debug ... />
```

### Hooks

This package also includes the following hooks for convenience:

- `useSocial()` for easily accessing the Social SDK instance shared by the provider.
- `useSocialProfile()` for easily accessing any account ID's social profile.

*NOTE: These hooks aren't accessible in the root of your application due to being outside the context of the providers (they would throw an error). Consider using the `onProvision` prop as shown above or move the consumers of these hooks into a child component of the providers.*

## Advanced Usage

In some cases you might need to initialize and manage an SDK instance yourself:

```ts
import { SocialDb } from '@bos-web-engine/social-db';
const db = new SocialDb({ ... });
```
'''
'''--- packages/social-db/package.json ---
{
  "name": "@bos-web-engine/social-db",
  "version": "0.1.0",
  "description": "",
  "main": "lib/index.js",
  "scripts": {
    "build": "tsc -p ./tsconfig.json",
    "dev": "tsc -w -p ./tsconfig.json",
    "lint": "eslint ./src/**/*.ts*",
    "lint:fix": "eslint . --fix"
  },
  "peerDependencies": {
    "@near-wallet-selector/core": "^8.9.2",
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  },
  "dependencies": {
    "@near-js/providers": "^0.0.7",
    "big.js": "^6.2.1"
  },
  "devDependencies": {
    "@bos-web-engine/common": "workspace:*",
    "@near-js/types": "^0.0.4",
    "@types/big.js": "^6.2.2",
    "@types/node": "^17.0.12",
    "@types/react": "^18.2.34",
    "@types/react-dom": "^18.0.6",
    "eslint": "^7.32.0",
    "eslint-config-custom": "workspace:*",
    "preact": "^10.18.1",
    "tsconfig": "workspace:*",
    "typescript": "^4.5.2"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

'''
'''--- packages/social-db/src/constants.ts ---
import { Big } from 'big.js';

export const TESTNET_SOCIAL_CONTRACT_ID = 'v1.social08.testnet';
export const MAINNET_SOCIAL_CONTRACT_ID = 'social.near';

export const TESTNET_RPC_URL = 'https://rpc.testnet.near.org';
export const MAINNET_RPC_URL = 'https://rpc.mainnet.near.org';
export const ARCHIVAL_MAINNET_RPC_URL = 'https://archival-rpc.mainnet.near.org';
export const ARCHIVAL_TESTNET_RPC_URL = 'https://archival-rpc.testnet.near.org';

export const SOCIAL_COMPONENT_NAMESPACE = 'component_alpha';
export const SOCIAL_IPFS_BASE_URL = 'https://ipfs.near.social/ipfs';
export const BLOCK_HEIGHT_KEY = ':block';

// The following gas, storage, and size values were copied from NearSocial/VM:
export const ONE_TGAS = Big(10).pow(12);
export const MAX_GAS_PER_TRANSACTION = ONE_TGAS.mul(250);
export const STORAGE_COST_PER_BYTE = Big(10).pow(19);
export const MIN_STORAGE_BALANCE = STORAGE_COST_PER_BYTE.mul(2000);
export const INITIAL_ACCOUNT_STORAGE_BALANCE = STORAGE_COST_PER_BYTE.mul(500);
export const WRITE_PERMISSION_STORAGE_BALANCE = STORAGE_COST_PER_BYTE.mul(500);
export const EXTRA_STORAGE_BALANCE = STORAGE_COST_PER_BYTE.mul(500);
export const ESTIMATED_KEY_VALUE_SIZE = 40 * 3 + 8 + 12;
export const ESTIMATED_NODE_SIZE = 40 * 2 + 8 + 10;

'''
'''--- packages/social-db/src/debug-log.ts ---
export type DebugLogParams = {
  source: 'RPC Fetch' | 'RPC Signed Transaction';
  identifier?: string;
  messages: DebugLogMessage[];
};

export type DebugLogMessage = {
  data: any;
  description?: string;
  type: 'ERROR' | 'INFO' | 'REQUEST' | 'RESPONSE';
};

const sourceIcons: Record<DebugLogParams['source'], string> = {
  'RPC Fetch': '📖',
  'RPC Signed Transaction': '📝',
};

const messageTypeIcons: Record<DebugLogMessage['type'], string> = {
  ERROR: '❌',
  INFO: '💡',
  REQUEST: '💬',
  RESPONSE: '✅',
};

export function debugLog({ source, identifier, messages }: DebugLogParams) {
  const date = new Date();

  console.groupCollapsed(
    `${sourceIcons[source]} ${source} @ ${date.toLocaleString()} ${
      identifier ? `| ${identifier} ` : ''
    }`
  );

  messages.forEach((message) => {
    console.log(
      ...[
        `${messageTypeIcons[message.type]} ${message.type}`,
        message.description,
        message.data,
      ].filter((messageChunk) => messageChunk)
    );
  });

  console.groupEnd();
}

'''
'''--- packages/social-db/src/hooks/useSocial.ts ---
import { useContext } from 'react';

import { SocialContext } from '../components/SocialProvider';

export const useSocial = () => {
  const context = useContext(SocialContext);

  if (!context) {
    throw new Error(
      'useSocial() must be used inside the context provided by <SocialProvider>'
    );
  }

  let { social } = context;

  return {
    social,
  };
};

'''
'''--- packages/social-db/src/hooks/useSocialProfile.ts ---
import { useEffect, useState } from 'react';

import { useSocial } from './useSocial';
import { SOCIAL_IPFS_BASE_URL } from '../constants';
import { SocialProfile } from '../types';

export function useSocialProfile(accountId: string | null | undefined) {
  const { social } = useSocial();
  const [profile, setProfile] = useState<SocialProfile>();
  const profileImageUrl =
    profile?.image?.url ?? profile?.image?.ipfs_cid
      ? `${SOCIAL_IPFS_BASE_URL}/${profile?.image?.ipfs_cid}`
      : undefined;

  useEffect(() => {
    if (!accountId || !social) return;

    const fetchProfile = async () => {
      try {
        const response = await social.get<{
          profile: SocialProfile;
        }>({
          key: `${accountId}/profile/**`,
        });

        setProfile(response[accountId]?.profile ?? {});
      } catch (error) {
        console.error(error);
      }
    };

    fetchProfile();
  }, [accountId, social]);

  return {
    profile,
    profileImageUrl,
  };
}

'''
'''--- packages/social-db/src/index.ts ---
export {
  MAINNET_SOCIAL_CONTRACT_ID,
  TESTNET_SOCIAL_CONTRACT_ID,
  SOCIAL_COMPONENT_NAMESPACE,
  SOCIAL_IPFS_BASE_URL,
  BLOCK_HEIGHT_KEY,
} from './constants';
export { useSocial } from './hooks/useSocial';
export { useSocialProfile } from './hooks/useSocialProfile';
export { SocialContext, SocialProvider } from './components/SocialProvider';
export { SocialDb } from './social-db';
export type {
  SocialGetParams,
  SocialGetResponse,
  SocialSetParams,
  SocialProfile,
  RpcFetchParams,
} from './types';

'''
'''--- packages/social-db/src/social-db.ts ---
import { JsonRpcProvider } from '@near-js/providers';
import { CodeResult, FinalExecutionStatusBasic } from '@near-js/types';
import type {
  AccountState,
  FinalExecutionOutcome,
  FunctionCallAction,
  NetworkId,
  WalletSelector,
} from '@near-wallet-selector/core';
import { Big } from 'big.js';

import {
  ARCHIVAL_MAINNET_RPC_URL,
  ARCHIVAL_TESTNET_RPC_URL,
  EXTRA_STORAGE_BALANCE,
  INITIAL_ACCOUNT_STORAGE_BALANCE,
  MAINNET_RPC_URL,
  MAINNET_SOCIAL_CONTRACT_ID,
  MIN_STORAGE_BALANCE,
  ONE_TGAS,
  STORAGE_COST_PER_BYTE,
  TESTNET_RPC_URL,
  TESTNET_SOCIAL_CONTRACT_ID,
  WRITE_PERMISSION_STORAGE_BALANCE,
} from './constants';
import {
  type DebugLogMessage,
  type DebugLogParams,
  debugLog,
} from './debug-log';
import type {
  RpcFetchParams,
  SocialGetParams,
  SocialGetResponse,
  SocialSdkConstructorParams,
  SocialSetParams,
} from './types';
import {
  bigMax,
  convertToStringLeaves,
  encodeJsonRpcArgs,
  estimateRequiredBytesForStorage,
  extractKeys,
  parseJsonRpcResponse,
  removeDuplicateData,
} from './utils';

export class SocialDb {
  debug;
  networkId: NetworkId;
  walletSelector: WalletSelector | null;

  private testnetProvider: JsonRpcProvider;
  private mainnetProvider: JsonRpcProvider;
  private archivalMainnetProvider: JsonRpcProvider;
  private archivalTestnetProvider: JsonRpcProvider;

  /**
   * Interact with the `social.near` contract (Social DB).
   * @param debug - Optionally pass as `true` to enable logging. Defaults to `false`. Logs will come through after each RPC request succeeds or fails.
   * @param networkId - Used to determine which RPC provider will be used internally.
   * @param walletSelector - Optionally pass a `walletSelector` instance. This is only needed if you plan on setting data - eg: `set()`. Defaults to `null`.
   */
  constructor({
    debug = false,
    networkId,
    walletSelector,
  }: SocialSdkConstructorParams) {
    if (!networkId) {
      throw new Error('Must pass `networkId`.');
    }

    this.debug = debug;
    this.networkId = networkId;
    this.walletSelector = walletSelector ?? null;

    this.testnetProvider = new JsonRpcProvider({
      url: TESTNET_RPC_URL,
    });

    this.mainnetProvider = new JsonRpcProvider({
      url: MAINNET_RPC_URL,
    });

    this.archivalMainnetProvider = new JsonRpcProvider({
      url: ARCHIVAL_MAINNET_RPC_URL,
    });

    this.archivalTestnetProvider = new JsonRpcProvider({
      url: ARCHIVAL_TESTNET_RPC_URL,
    });
  }

  private get contractId() {
    return this.networkId === 'mainnet'
      ? MAINNET_SOCIAL_CONTRACT_ID
      : TESTNET_SOCIAL_CONTRACT_ID;
  }

  private get accountState() {
    return this.walletSelectorState?.accounts[0] ?? null;
  }

  private get provider() {
    if (this.networkId === 'mainnet') return this.mainnetProvider;
    return this.testnetProvider;
  }

  private get archivalProvider() {
    if (this.networkId === 'mainnet') return this.archivalMainnetProvider;
    return this.archivalTestnetProvider;
  }

  private get walletSelectorState() {
    return this.walletSelector?.store.getState() ?? null;
  }

  /**
   * Fetch data for the specified `key` or `keys`.
   *
   * @example
   * ```
   * const response = await get<T>({
   *  key: 'foobar.near/profile/*',
   * });
   * ```
   *
   * @param blockId - Optionally specify a specific block height (number) or block hash (string). {@link https://docs.near.org/api/rpc/block-chunk}
   * @param key - Return data from a single key.
   * @param keys - Return data from multiple keys. This param is ignored if a value is passed for `key`.
   * @param finality - Optionally specify a finality. Defaults to `optimistic`. This param is ignored if a value is passed for `blockId`. {@link https://docs.near.org/api/rpc/block-chunk}
   *
   * @throws Promise rejects with an `Error`. Will only throw if RPC fetch fails.
   * @returns A promise that resolves with `SocialGetResponse<T>`, which returns a recursive `Partial` value of T. If matching data is not found, an empty object will be returned.
   */
  async get<T = Record<string, any>>({
    blockId,
    key,
    keys,
    finality = 'optimistic',
    options,
  }: SocialGetParams): Promise<SocialGetResponse<T>> {
    const normalizedKeys = ((key ? [key] : keys) ?? []).filter(
      (value) => value
    );

    if (normalizedKeys.length === 0) {
      throw new Error(
        'Must pass a valid `key` or `keys` parameter with non empty string(s).'
      );
    }

    if (!blockId && !finality) {
      throw new Error('Must pass either `blockId` or `finality`');
    }

    const response = await this.rpcFetch<SocialGetResponse<T>>({
      data: {
        keys: normalizedKeys,
        options,
      },
      methodName: 'get',
      ...(blockId ? { blockId } : { finality }),
    });

    return response;
  }

  /**
   * Sets data in the current user's namespace.
   *
   * @example
   * ```
   * await set({
   *  data: {
   *    profile: {
   *      name: 'Foo Bar'
   *    }
   *  }
   * });
   * ```
   *
   * @param data - Data to commit to the current user's namespace. Can contain multiple keys and each key can contain multiple values. All keys are merged with existing data.
   * @param strategy - Determines how data is set when compared with existing data. Defaults to `DIFF`.
   * - `DIFF` The most efficient option for storage cost. Will ignore saving keys that are equal to the value already stored.
   * - `FORCE` Will save all keys that are passed without checking the currently stored value. All keys are still merged with existing data.
   *
   * @throws Promise rejects with an `Error`. If the error is caused by a failed transaction, a `FinalExecutionOutcome` object will be attached to the `cause`.
   * @returns A promise that resolves with `FinalExecutionOutcome` if transaction succeeds or `null` if transaction is skipped (due to passed `data` being empty or in sync with what's already stored on chain).
   */
  async set({
    data,
    strategy = 'DIFF',
  }: SocialSetParams): Promise<FinalExecutionOutcome | null> {
    const wallet = await this.wallet();

    if (!wallet || !this.accountState?.publicKey) {
      throw new Error(
        'User needs to be signed in with wallet before setting data.'
      );
    }

    const { availableBytes, hasInitializedStorageBalance, hasWritePermission } =
      await this.fetchStorageAndPermissions(
        this.accountState,
        this.accountState.publicKey
      );

    let currentData: Record<string, any> = {};
    let dataToWrite = {
      [this.accountState.accountId]: convertToStringLeaves(data),
    };

    if (strategy === 'DIFF') {
      currentData = await this.get({
        keys: extractKeys(dataToWrite),
      });

      dataToWrite = removeDuplicateData(dataToWrite, currentData);
    }

    const noDataToWrite = Object.keys(dataToWrite).length === 0;
    if (noDataToWrite) {
      this.log({
        source: 'RPC Signed Transaction',
        messages: [
          {
            data: {},
            description:
              'Transaction skipped. Data passed to `set()` matches data already stored on chain.',
            type: 'INFO',
          },
        ],
      });
      return null;
    }

    const bytes = estimateRequiredBytesForStorage(dataToWrite, currentData);

    const expectedStorageBalance = STORAGE_COST_PER_BYTE.mul(bytes)
      .add(
        hasInitializedStorageBalance ? Big(0) : INITIAL_ACCOUNT_STORAGE_BALANCE
      )
      .add(hasWritePermission ? Big(0) : WRITE_PERMISSION_STORAGE_BALANCE)
      .add(EXTRA_STORAGE_BALANCE);

    let deposit = bigMax(
      expectedStorageBalance.sub(
        Big(availableBytes).mul(STORAGE_COST_PER_BYTE)
      ),
      hasInitializedStorageBalance ? Big(1) : MIN_STORAGE_BALANCE
    );

    const actions: FunctionCallAction[] = [
      {
        params: {
          methodName: 'set',
          args: {
            data: dataToWrite,
          },
          gas: ONE_TGAS.mul(100).toFixed(0),
          deposit: '0',
        },
        type: 'FunctionCall',
      },
    ];

    if (!hasWritePermission) {
      actions.unshift({
        params: {
          methodName: 'grant_write_permission',
          args: {
            public_key: this.accountState.publicKey,
            keys: [this.accountState.accountId],
          },
          gas: ONE_TGAS.mul(100).toFixed(0),
          deposit: '0',
        },
        type: 'FunctionCall',
      });
    }

    // Attach a single deposit to the first action to cover all combined storage costs:
    actions[0].params.deposit = deposit.toFixed(0);

    const request = {
      receiverId: this.contractId,
      actions,
    };

    const debugLogRequestMessage: DebugLogMessage = {
      data: request,
      type: 'REQUEST',
    };

    try {
      const response = await wallet.signAndSendTransaction(request);

      if (!response) {
        throw new Error('Transaction failed to return any response.');
      }

      if (
        response?.status === FinalExecutionStatusBasic.Failure ||
        (typeof response?.status === 'object' && response.status.Failure)
      ) {
        throw new Error('Transaction failed to execute.', {
          cause: response,
        });
      }

      this.log({
        source: 'RPC Signed Transaction',
        messages: [
          debugLogRequestMessage,
          {
            data: response,
            type: 'RESPONSE',
          },
        ],
      });

      return response;
    } catch (error) {
      this.log({
        source: 'RPC Signed Transaction',
        messages: [
          debugLogRequestMessage,
          {
            data: {
              error,
            },
            type: 'ERROR',
          },
        ],
      });

      if (
        (error as any)?.message ===
        'Invalid message. Only transactions can be signed'
      ) {
        // This provides a more DX friendly message when cancelling a transaction
        throw new Error('Transaction cancelled by user.');
      }
      throw error;
    }
  }

  private async fetchStorageAndPermissions(
    accountState: AccountState,
    publicKey: string
  ) {
    const [accountStorage, hasWritePermission] = await Promise.all([
      this.rpcFetch<
        | {
            available_bytes: number;
            used_bytes: number;
          }
        | undefined
      >({
        data: {
          account_id: accountState.accountId,
        },
        methodName: 'get_account_storage',
      }),

      this.rpcFetch<boolean>({
        data: {
          public_key: publicKey,
          key: accountState.accountId,
        },
        methodName: 'is_write_permission_granted',
      }),
    ]);

    return {
      availableBytes: accountStorage?.available_bytes ?? 0,
      hasInitializedStorageBalance: !!accountStorage,
      hasWritePermission,
      usedBytes: accountStorage?.used_bytes ?? 0,
    };
  }

  private log(params: DebugLogParams) {
    if (this.debug) {
      debugLog(params);
    }
  }

  private async rpcFetch<T>({
    blockId,
    contractId,
    data,
    finality = 'optimistic',
    methodName,
  }: RpcFetchParams) {
    // TODO: Should we make this a public method? Would allow end users to easily fetch data from any contract.

    const request = {
      account_id: contractId ?? this.contractId,
      args_base64: encodeJsonRpcArgs(data),
      block_id: blockId,
      finality: blockId ? undefined : finality,
      method_name: methodName,
      request_type: 'call_function',
    };

    const debugLogRequestMessage: DebugLogMessage = {
      data: { data, ...request },
      type: 'REQUEST',
    };
    let debugLogIdentifier = methodName;

    if ('keys' in data && Array.isArray(data.keys)) {
      debugLogIdentifier += ` ${JSON.stringify(data.keys)}`;
    }

    try {
      const response = await (blockId
        ? this.archivalProvider
        : this.provider
      ).query<CodeResult>(request);
      const responseData = parseJsonRpcResponse(response.result) as T;

      this.log({
        source: 'RPC Fetch',
        identifier: debugLogIdentifier,
        messages: [
          debugLogRequestMessage,
          {
            data: responseData,
            type: 'RESPONSE',
          },
        ],
      });

      return responseData;
    } catch (error) {
      this.log({
        source: 'RPC Fetch',
        identifier: debugLogIdentifier,
        messages: [
          debugLogRequestMessage,
          {
            data: {
              error,
            },
            type: 'ERROR',
          },
        ],
      });

      throw new Error('Failed to fetch data from RPC.', {
        cause: error,
      });
    }
  }

  private async wallet() {
    if (!this.walletSelector) {
      throw new Error(
        'Social SDK must be configured with `walletSelector` instance to support setting data.'
      );
    }

    try {
      if (
        this.walletSelector &&
        this.walletSelectorState &&
        this.walletSelectorState.accounts.length > 0 &&
        this.walletSelectorState.selectedWalletId
      ) {
        return await this.walletSelector.wallet();
      }
    } catch (error) {
      console.error(error);
    }

    return null;
  }
}

'''
'''--- packages/social-db/src/types.ts ---
import type { DeepPartial } from '@bos-web-engine/common';
import type { BlockId, Finality } from '@near-js/types';
import type { NetworkId, WalletSelector } from '@near-wallet-selector/core';

export type RpcFetchParams = {
  contractId?: string;
  data: Record<any, any>;
  methodName: string;
} & (
  | {
      blockId?: never;
      finality?: Finality;
    }
  | {
      blockId: BlockId;
      finality?: never;
    }
);

export type SocialSdkConstructorParams = {
  debug?: boolean;
  networkId: NetworkId;
  walletSelector?: WalletSelector | null;
};

interface SocialGetOptions {
  with_block_height?: boolean;
  with_node_id?: boolean;
  return_deleted?: boolean;
}

export type SocialGetParams = {
  options?: SocialGetOptions;
} & (
  | {
      key: string;
      keys?: never;
    }
  | {
      key?: never;
      keys: string[];
    }
) &
  (
    | {
        blockId?: never;
        finality?: Finality;
      }
    | {
        blockId: BlockId;
        finality?: never;
      }
  );

export type SocialSetParams = {
  data: Record<string, any>;
  strategy?: 'DIFF' | 'FORCE';
};

export type SocialGetResponse<T> = {
  [accountId: string]: DeepPartial<T> | undefined;
};

export type SocialProfile = DeepPartial<{
  backgroundImage: {
    ipfs_cid: string;
    url: string;
  };
  description: string;
  linktree: {
    github: string;
    twitter: string;
    website: string;
  };
  name: string;
  image: {
    ipfs_cid: string;
    url: string;
  };
  tags: Record<string, ''>;
}>;

'''
'''--- packages/social-db/src/utils.ts ---
import { Big } from 'big.js';

import { ESTIMATED_KEY_VALUE_SIZE, ESTIMATED_NODE_SIZE } from './constants';

/*
  TODO: Most of these utils have been copied over from NearSocial/VM and could 
  probably be refactored as we have time.
*/

export const encodeJsonRpcArgs = (args: Record<any, any>) => {
  const bytes = new TextEncoder().encode(JSON.stringify(args));
  return btoa(Array.from(bytes, (b) => String.fromCodePoint(b)).join(''));
};

export const parseJsonRpcResponse = (bytes: number[]): Record<any, any> => {
  const decodedResult = new TextDecoder().decode(Uint8Array.from(bytes));
  return JSON.parse(decodedResult);
};

export function bigMax(a: Big, b: Big) {
  return a.gt(b) ? a : b;
}

export function convertToStringLeaves(data: any) {
  return isObject(data)
    ? Object.entries(data).reduce(
        (obj, [key, value]) => {
          obj[key] = convertToStringLeaves(value);
          return obj;
        },
        {} as Record<string, any>
      )
    : stringify(data);
}

export function estimateRequiredBytesForStorage(
  newData: Record<string, any>,
  currentData: any
): number {
  return isObject(newData)
    ? Object.entries(newData).reduce(
        (s, [key, value]) => {
          const prevValue = isObject(currentData)
            ? currentData[key]
            : undefined;
          return (
            s +
            (prevValue !== undefined
              ? estimateRequiredBytesForStorage(value, prevValue)
              : key.length * 2 +
                estimateRequiredBytesForStorage(value, undefined) +
                ESTIMATED_KEY_VALUE_SIZE)
          );
        },
        isObject(currentData) ? 0 : ESTIMATED_NODE_SIZE
      )
    : (newData?.length || 8) -
        (typeof currentData === 'string' ? currentData.length : 0);
}

export function extractKeys(data: Record<string, any>, prefix = ''): string[] {
  return Object.entries(data)
    .map(([key, value]) =>
      isObject(value)
        ? extractKeys(value, `${prefix}${key}/`)
        : `${prefix}${key}`
    )
    .flat();
}

function isObject(value: any) {
  return (
    value === Object(value) &&
    !Array.isArray(value) &&
    typeof value !== 'function'
  );
}

/**
 * Returns an empty object if both objects are perfect matches. Otherwise,
 * an object is returned containing only the keys and values from `data`
 * that differ from `prevData`.
 */
export function removeDuplicateData(
  newData: Record<string, any>,
  currentData: Record<string, any>
): Record<string, any> {
  const obj = Object.entries(newData).reduce(
    (obj, [key, value]) => {
      const prevValue = isObject(currentData) ? currentData[key] : undefined;

      if (isObject(value)) {
        const newValue = isObject(prevValue)
          ? removeDuplicateData(value, prevValue)
          : value;

        if (newValue !== undefined) {
          obj[key] = newValue;
        }
      } else if (value !== prevValue) {
        obj[key] = value;
      }

      return obj;
    },
    {} as Record<string, any>
  );

  return obj;
}

function stringify(value: any) {
  if (value === null) return null;
  if (typeof value === 'string') return value;
  return JSON.stringify(value);
}

'''
'''--- packages/social-db/tsconfig.json ---
{
  "extends": "tsconfig/react-library.json",
  "include": ["src"],
  "exclude": ["lib", "node_modules"],
  "compilerOptions": {
    "outDir": "lib"
  }
}

'''
'''--- packages/tsconfig/README.md ---
# `tsconfig`

These are base shared `tsconfig.json`s from which all other `tsconfig.json`'s inherit from.

'''
'''--- packages/tsconfig/base.json ---
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "composite": false,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "node",
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": ["node_modules"]
}

'''
'''--- packages/tsconfig/nextjs.json ---
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "esnext",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  }
}

'''
'''--- packages/tsconfig/package.json ---
{
  "name": "tsconfig",
  "version": "0.0.0",
  "private": true,
  "files": [
    "base.json",
    "nextjs.json",
    "react-library.json"
  ]
}

'''
'''--- packages/tsconfig/react-library.json ---
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "React Library",
  "extends": "./base.json",
  "compilerOptions": {
    "jsx": "react-jsx",
    "lib": ["DOM", "ES2022"],
    "module": "ESNext",
    "target": "ES2022"
  },
  "watchOptions": {
    "watchFile": "useFsEvents",
    "watchDirectory": "useFsEvents",
    "fallbackPolling": "dynamicPriority",
    "synchronousWatchDirectory": true,
    "excludeDirectories": ["**/node_modules"]
  }
}

'''
'''--- packages/ui/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ['custom'],
};

'''
'''--- packages/ui/README.md ---
# BWE UI

This package provides basic UI components to provide a consistent look and feel when developing within BWE.

## Usage

When using any of the UI components provided by this library (or rendering BOS components as a gateway), make sure they are wrapped by the `<ThemeProvider>` component. If they aren't wrapped, they won't have access to the correct CSS theme variables to render correctly.

First, include the package's styles and `<ThemeProvider />` wrapper inside the root of your application. For Next JS, this would be your `_app.tsx` file:

```tsx
import '@bos-web-engine/ui/reset.css';
import '@bos-web-engine/ui/styles.css';

import type { AppProps } from 'next/app';
import { ThemeProvider } from '@bos-web-engine/ui';

export default function App({ Component, pageProps }: AppProps) {
  return (
    <ThemeProvider defaultTheme="light">
      <header>...</header>

      <main>
        <Component {...pageProps} />
      </main>
    </ThemeProvider>
  );
}
```

The global `reset.css` import makes sure we have a consistent baseline for all of our styles. For example, the reset makes sure all elements use `box-sizing: border-box;` and removes all default margins.

Now that we have `<ThemeProvider>` wrapping our entire app, you can feel free to use any of the components provided by this package:

```tsx
import { Button, Dropdown, Tooltip } from '@bos-web-engine/ui';

export function MyComponent() {
  return (
    <>
      <Dropdown.Root>
        <Dropdown.Trigger asChild>
          <Tooltip content="This is a cool button">
            <Button>Open Menu</Button>
          </Tooltip>
        </Dropdown.Trigger>

        <Dropdown.Content sideOffset={8}>
          <Dropdown.Item>Option 1</Dropdown.Item>
          <Dropdown.Item>Option 2</Dropdown.Item>
          <Dropdown.Item>Option 3</Dropdown.Item>
        </Dropdown.Content>
      </Dropdown.Root>
    </>
  );
}
```

## Other Components

- The `<Dialog>` component is an abstraction built with this Radix UI primitive: https://www.radix-ui.com/primitives/docs/components/dialog
- The `<Dropdown>` component styles and re-exports this Radix UI primitive: https://www.radix-ui.com/primitives/docs/components/dropdown-menu
- The `<Tooltip>` component is an abstraction built with this Radix UI primitive: https://www.radix-ui.com/primitives/docs/components/tooltip
- The `Tabs` export offers https://www.radix-ui.com/primitives/docs/components/tabs 

## Hooks

- `useTheme()` for reading and setting the current theme value (`light` or `dark`)

## SSR Theme Color Flash

To avoid flashing when rendering light vs dark mode, include the following in your Next JS `_document.tsx`:

```tsx
import { initializeSsrTheme } from '@bos-web-engine/ui';
import { Html, Head, Main, NextScript } from 'next/document';

export default function Document() {
  return (
    <Html lang="en">
      <Head>...</Head>
      <body>
        <script
          dangerouslySetInnerHTML={{ __html: initializeSsrTheme() }}
        />
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}
```

If you choose `dark` as your default theme choice, you should initialize with: `initializeSsrTheme('dark')`.
'''
'''--- packages/ui/package.json ---
{
  "name": "@bos-web-engine/ui",
  "version": "0.1.0",
  "description": "",
  "files": [
    "lib"
  ],
  "main": "lib/index.cjs.js",
  "module": "lib/index.esm.js",
  "types": "lib/index.d.ts",
  "exports": {
    ".": {
      "import": {
        "types": "./lib/index.d.ts",
        "default": "./lib/index.esm.js"
      },
      "require": {
        "types": "./lib/cjs/index.d.ts",
        "default": "./lib/cjs/index.cjs.js"
      }
    },
    "./*.css": {
      "import": "./lib/*.css",
      "require": "./lib/*.css"
    }
  },
  "scripts": {
    "dev": "rollup -c -w",
    "build": "rollup -c",
    "lint": "eslint ./src/**/*.ts*",
    "lint:fix": "eslint . --fix"
  },
  "peerDependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  },
  "dependencies": {
    "@phosphor-icons/react": "^2.0.15",
    "@radix-ui/colors": "^3.0.0",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-radio-group": "^1.1.3",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-tooltip": "^1.0.7"
  },
  "devDependencies": {
    "@rollup/plugin-commonjs": "^22.0.1",
    "@rollup/plugin-node-resolve": "^13.3.0",
    "@rollup/plugin-typescript": "^8.3.4",
    "@types/react": "^18.2.34",
    "@types/react-dom": "^18.0.6",
    "eslint": "^7.32.0",
    "eslint-config-custom": "workspace:*",
    "postcss": "^8.4.14",
    "postcss-preset-env": "^7.6.0",
    "rollup": "^2.77.2",
    "rollup-plugin-peer-deps-external": "^2.2.4",
    "rollup-plugin-postcss": "^4.0.2",
    "tsconfig": "workspace:*",
    "tslib": "^2.6.2",
    "typescript": "^4.7.4"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

'''
'''--- packages/ui/reset.css ---
/*
  Josh's Custom CSS Reset
  https://www.joshwcomeau.com/css/custom-css-reset/
*/

*,
*::before,
*::after {
  box-sizing: border-box;
}

* {
  margin: 0;
}

body {
  font-size: 100%;
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
}

img,
picture,
video,
canvas,
svg {
  display: block;
  max-width: 100%;
}

input,
button,
textarea,
select {
  font: inherit;
}

#root,
#next {
  isolation: isolate;
}

p,
h1,
h2,
h3,
h4,
h5,
h6 {
  overflow-wrap: break-word;
}

h1 {
  font: var(--text-2xl);
}
h2 {
  font: var(--text-xl);
}
h3 {
  font: var(--text-l);
}
h4 {
  font: var(--text-base);
}
h5 {
  font: var(--text-s);
}
h6 {
  font: var(--text-xs);
}
p {
  font: var(--text-base);
}

'''
'''--- packages/ui/rollup.config.js ---
import commonjs from '@rollup/plugin-commonjs';
import nodeResolve from '@rollup/plugin-node-resolve';
import typescript from '@rollup/plugin-typescript';
import postcssPresetEnv from 'postcss-preset-env';
import copy from 'rollup-plugin-copy';
import peerDepsExternal from 'rollup-plugin-peer-deps-external';
import postcss from 'rollup-plugin-postcss';

const extensions = ['.js', '.jsx', '.ts', '.tsx'];
const globals = {
  react: 'React',
  'react-dom': 'ReactDOM',
};

/** @type {import('rollup').RollupOptions} */
const options = {
  input: ['./src/index.ts'],
  output: [
    {
      file: './lib/index.esm.js',
      format: 'esm',
      globals,
    },
    {
      file: './lib/index.cjs.js',
      format: 'cjs',
      globals,
    },
  ],
  plugins: [
    peerDepsExternal(),
    nodeResolve({ extensions, browser: true }),
    commonjs(),
    typescript(),
    copy({
      targets: [{ src: 'reset.css', dest: 'lib' }],
    }),
    postcss({
      extract: 'styles.css',
      modules: true,
      plugins: [
        postcssPresetEnv({
          stage: 3,
          features: {
            'nesting-rules': true,
          },
        }),
      ],
    }),
  ],
};

export default options;

'''
'''--- packages/ui/src/components/Button.module.css ---
.button {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  text-align: center;
  text-decoration: none;
  height: 2rem;
  padding: 0 1rem;
  font-size: 0.8rem;
  font-weight: 700;
  gap: 0.75rem;
  line-height: 1;
  cursor: pointer;
  border-radius: 10rem;
  color: var(--color-affirm);
  background: var(--color-surface-1);
  border: 1px solid var(--color-border-1);
  box-shadow: 0 0 0 0px var(--color-focus-outline);
  outline: none;
  transition: all 200ms;

  svg {
    fill: currentColor;
  }

  &:hover {
    border-color: var(--color-action-primary);
  }

  &:focus {
    border-color: var(--violet-12);
    box-shadow: 0 0 0 3px var(--color-focus-outline);
  }

  &:active {
    transition: none;
    border-color: var(--violet-7);
    background-color: var(--violet-2);
  }

  &:disabled {
    opacity: 0.35;
    pointer-events: none;
  }

  &[aria-busy='true'] {
    pointer-events: none;

    .content {
      opacity: 0;
    }

    &::before {
      content: '';
      display: block;
      height: 1rem;
      width: 1rem;
      position: absolute;
      inset: 0;
      margin: auto;
      border-radius: 100%;
      border: 2px solid currentColor;
      border-color: currentColor transparent currentColor transparent;
      animation: spin 1.2s linear infinite;
    }
  }
}

.content {
  display: flex;
  gap: 0.5rem;
  align-items: center;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

'''
'''--- packages/ui/src/components/Checkbox.module.css ---
.checkbox {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  position: relative;
  width: 1.15rem;
  height: 1.15rem;
  background: var(--color-surface-1);
  border-radius: 0.3rem;
  margin: auto 0;
  border: 1px solid var(--color-border-1);
  box-shadow: 0 0 0 0px var(--color-focus-outline);
  overflow: hidden;
  transition: all 200ms;

  &:focus-within {
    border-color: var(--color-primary-action);
    box-shadow: 0 0 0 2px var(--color-focus-outline);
  }

  &:hover {
    background: var(--color-surface-2);
  }

  &:has(input:checked) {
    background: var(--color-primary-action);
    border-color: var(--violet-11);

    &:hover {
      background: var(--violet-10);
    }
  }

  &:has([type='radio']) {
    border-radius: 100%;
  }

  input {
    position: absolute;
    opacity: 0;
    inset: 0;
    cursor: pointer;

    &:checked ~ svg {
      display: block;
    }
  }

  svg {
    display: none;
    fill: var(--white-a12);
    width: 0.8rem;
    height: 0.8rem;
  }
}

'''
'''--- packages/ui/src/components/Dialog.module.css ---
.overlay {
  position: fixed;
  inset: 0;
  z-index: 10000;
  padding: 1rem;
  display: flex;
  animation: contentShow 200ms;
  background: rgba(118, 118, 118, 0.5);
}

.content {
  --dialog-content-padding: 2rem;
  position: relative;
  background: var(--color-surface-1);
  box-shadow: 0 0 2rem 0.2rem rgba(0, 0, 0, 0.3);
  width: 100%;
  max-height: 100%;
  overflow: auto;
  scroll-behavior: smooth;
  padding: var(--dialog-content-padding);
  border-radius: 0.5rem;
  outline: none;

  &[data-anchor='center'] {
    margin: auto;
  }
  &[data-anchor='top'] {
    margin: 0 auto auto;
  }

  &[data-size='xs'] {
    max-width: var(--size-max-container-width-xs);
  }
  &[data-size='s'] {
    max-width: var(--size-max-container-width-s);
  }
  &[data-size='m'] {
    max-width: var(--size-max-container-width-m);
  }
  &[data-size='l'] {
    max-width: var(--size-max-container-width-l);
  }
}

.closeButton {
  all: unset;
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 1.75rem;
  height: 1.75rem;
  border-radius: 100%;
  background: var(--color-surface-3);
  color: var(--color-text-2);
  cursor: pointer;
  box-shadow: 0 0 0 0px var(--color-focus-outline);
  outline: none;
  transition: all 200ms;

  &:hover {
    background: var(--color-surface-4);
  }

  &:focus {
    box-shadow: 0 0 0 3px var(--color-focus-outline);
  }

  &[data-absolute='true'] {
    position: absolute;
    top: 1rem;
    right: 1rem;
  }
}

@keyframes overlayShow {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes contentShow {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.stickyHeader {
  display: flex;
  align-items: center;
  gap: 1rem;
  position: sticky;
  top: calc(var(--dialog-content-padding) * -1);
  z-index: 10;
  background: var(--color-surface-2);
  margin: calc(var(--dialog-content-padding) * -1);
  margin-bottom: var(--dialog-content-padding);
  padding: 1rem;
  box-shadow:
    0 1px 0 var(--color-border-1),
    0px 4px 8px 0px rgba(0, 0, 0, 0.06),
    0px 0px 0px 1px rgba(0, 0, 0, 0.06);
}

'''
'''--- packages/ui/src/components/Dropdown.module.css ---
.content {
  z-index: 1000;
  min-width: 0;
  max-width: min(25rem, 100vw);
  max-height: 80vh;
  background: var(--color-surface-1);
  border-radius: 0.3rem;
  padding: 0.25rem;
  box-shadow:
    0 0 0 1px var(--color-border-1),
    0px 4px 8px 0px rgba(0, 0, 0, 0.06),
    0px 0px 0px 1px rgba(0, 0, 0, 0.06);
  overflow: auto;
  scroll-behavior: smooth;

  hr {
    margin: 0.5rem 0.5rem;
    border: none;
    border-top: 1px solid var(--color-border-1);
  }
}

.arrowBorder {
  fill: var(--color-border-1);
  stroke: var(--color-border-1);
  stroke-width: 2px;
  margin-top: 1px;
  margin-right: 1px;

  [data-side='bottom'] &,
  [data-side='left'] & {
    margin-right: -1px;
  }
}

.arrowFill {
  fill: var(--color-surface-1);
}

.item {
  all: unset;
  color: var(--color-text-1);
  border-radius: 0.2rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  min-width: 0;
  box-sizing: border-box;
  padding: 0.3rem 0.75rem;
  font-family: var(--font-primary);
  font-size: 0.8rem;
  line-height: 1.4;
  font-weight: 400;
  position: relative;
  user-select: none;
  outline: none;
  cursor: pointer;
  overflow-wrap: anywhere;
  transition: all 200ms;

  &[data-highlighted] {
    background-color: var(--color-surface-3);
  }

  svg {
    transition: fill 200ms;
  }

  svg[fill='currentColor'] {
    fill: var(--sand-10);
  }

  &:hover {
    svg[fill='currentColor'] {
      fill: var(--color-primary-action);
    }
  }
}

.label {
  padding: 0.3rem 0.75rem;
  font: var(--text-s);
  font-weight: 700;
  font-size: 0.8rem;
  line-height: 1.4;
  color: var(--color-text-2);
}

.checkboxIndicator {
  display: flex;
  width: 1rem;
  height: 1rem;
  flex-shrink: 0;
  align-items: center;
  justify-content: center;

  svg {
    display: none;
    fill: currentColor;
  }

  [data-indicator='unchecked'] {
    display: block;
  }

  [data-indicator='checked'] {
    fill: var(--color-affirm) !important;
  }

  [data-state='checked'] & {
    [data-indicator='checked'] {
      display: block;
    }
    [data-indicator='unchecked'] {
      display: none;
    }
  }
}

'''
'''--- packages/ui/src/components/HR.module.css ---
.hr {
  border: none;
  height: 1px;
  background: var(--color-border-1);
  width: 100%;
}

'''
'''--- packages/ui/src/components/Input.module.css ---
.wrapper {
  width: 100%;
  position: relative;

  &[data-loading='true'] {
    .spinner {
      display: block;
    }

    .input {
      padding-right: 2.5rem;
    }
  }
}

.input {
  width: 100%;
  height: 2.5rem;
  padding: 0 0.75rem;
  background: var(--color-surface-2);
  border: 1px solid var(--color-border-1);
  border-radius: 0.3rem;
  box-shadow: 0 0 0 0px var(--color-focus-outline);
  outline: none;
  transition: all 200ms;

  &:focus {
    background: var(--color-surface-1);
    border-color: var(--violet-12);
    box-shadow: 0 0 0 3px var(--color-focus-outline);
  }

  &[aria-invalid='true'] {
    border-color: var(--color-danger);
  }

  &::placeholder {
    opacity: 1;
    color: var(--sand-10);
    font-size: 14px;
  }
}

.spinner {
  display: none;
  position: absolute;
  top: 0.625rem;
  right: 0.75rem;
}

'''
'''--- packages/ui/src/components/RadioGroup.module.css ---
.checkboxIndicator {
  display: flex;
  width: 1rem;
  height: 1rem;
  flex-shrink: 0;
  align-items: center;
  justify-content: center;

  svg {
    display: none;
    fill: currentColor;
  }

  [data-indicator='unchecked'] {
    display: block;
  }

  [data-indicator='checked'] {
    fill: var(--color-affirm) !important;
  }

  [data-state='checked'] & {
    [data-indicator='checked'] {
      display: block;
    }
    [data-indicator='unchecked'] {
      display: none;
    }
  }
}
.item {
  all: unset;
  color: var(--color-text-1);
  border-radius: 0.2rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  min-width: 0;
  box-sizing: border-box;
  padding: 0.3rem 0.75rem;
  font-family: var(--font-primary);
  font-size: 1rem;
  line-height: 1.4;
  font-weight: 400;
  position: relative;
  user-select: none;
  outline: none;
  cursor: pointer;
  overflow-wrap: anywhere;
  transition: all 200ms;

  &[data-highlighted] {
    background-color: var(--color-surface-3);
  }

  svg {
    transition: fill 200ms;
  }

  svg[fill='currentColor'] {
    fill: var(--sand-10);
  }

  &:hover {
    svg[fill='currentColor'] {
      fill: var(--color-primary-action);
    }
  }
}

.root {
  gap: 1rem;
  display: flex;
  flex-direction: column;
}

'''
'''--- packages/ui/src/components/Spinner.module.css ---
.spinner {
  display: inline-flex;
  width: 3rem;
  height: 3rem;
  animation: spin 1.2s linear infinite;
  border-radius: 50%;
  border: 2px solid currentColor;
  border-color: currentColor transparent currentColor transparent;
  flex-shrink: 0;
  flex-grow: 0;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

'''
'''--- packages/ui/src/components/Tabs.README.md ---
# Tabs

Implemented via Radix primitives: https://www.radix-ui.com/docs/primitives/components/tabs

## Example

```tsx
import { Tabs } from '@bos-web-engine/ui';

...

<Tabs.Root defaultValue="alerts">
  <Tabs.List>
    <Tabs.Trigger value="alerts">Alerts</Tabs.Trigger>
    <Tabs.Trigger value="history">History</Tabs.Trigger>
  </Tabs.List>

  <Tabs.Content value="alerts">
    ...
  </Tabs.Content>

  <Tabs.Content value="history">
    ...
  </Tabs.Content>
</Tabs.Root>
```

<!-- ! not yet supported
## Inline

You can use this alternative tab styling via the `inline` prop on the `Tabs.List` component:

```tsx
<Tabs.Root>
  <Tabs.List inline>...</Tabs.List>
  ...
</Tabs.Root>
```

## Routing

Sometimes it will make sense to sync the selected tab with the URL - each trigger acting as a link. This can be accomplished by using `useRouterParam()` and the `href` prop on each trigger:

```tsx
import { useRouteParam } from '@/hooks/route';

...

const activeTab = useRouteParam('tab', '?tab=section-1', true);

...

<Tabs.Root value={activeTab || ''}>
  <Tabs.List>
    <Tabs.Trigger value="section-1" href="?tab=section-1">Section 1</Tabs.Trigger>
    <Tabs.Trigger value="section-2" href="?tab=section-2">Section 2</Tabs.Trigger>
  </Tabs.List>

  <Tabs.Content value="section-1">...</Tabs.Content>
  <Tabs.Content value="section-2">...</Tabs.Content>
</Tabs.Root>;
```
-->
'''
'''--- packages/ui/src/components/Tabs.module.css ---
.tabRoot {
  display: flex;
  flex-direction: column;
  width: 100%;

  /* variables normally provided by theme */
  --border-radius-m: 12px;
  --color-cta-primary: var(--color-primary);
  --color-primary: #87bb81;
  --focus-outline-color: #8793a6;
  --font-action: 'IBM Plex Mono', monospace;
  --font-size-h6: 1rem;
  --line-height-h6: 1.5;
  --space-l: 2rem;
  --space-m: 1rem;
  --space-s: 0.6rem;
  --space-xs: 0.25rem;
  --transition-speed: 150ms;
  --transitions: color var(--transition-speed),
    border-color var(--transition-speed),
    background-color var(--transition-speed), box-shadow var(--transition-speed),
    opacity var(--transition-speed);
}

.tabTrigger {
  display: flex;
  align-items: center;
  gap: var(--space-s);
  color: var(--color-text-1);
  cursor: pointer;
  font-family: var(--font-action);
  font-size: var(--font-size-h6);
  line-height: var(--line-height-h6);
  font-weight: 500;
  justify-content: center;
  padding: var(--trigger-padding);
  transition: var(--transitions);
  user-select: none;
  white-space: nowrap;
  border: 1px solid transparent;
  border-bottom: none;
  flex-shrink: 0;
  background-color: transparent;

  &:hover {
    box-shadow: inset 0 var(--border-size) 0 var(--color-text-1);
  }

  &:focus {
    border-color: var(--focus-outline-color) !important;
  }

  &[data-state='active'] {
    --color-active: var(--violet-11);
    color: var(--color-active) !important;
    box-shadow: inset 0 var(--border-size) 0 var(--color-active) !important;
    position: relative;
    z-index: 5;
  }

  &:disabled {
    pointer-events: none;
    color: var(--color-text-3);
  }
}

.tabList {
  --border-radius: var(--border-radius-m);
  --border-size: -1px;
  --trigger-padding: var(--space-m);
  display: flex;
  width: 100%;
  box-shadow: inset 0 var(--border-size) 0 var(--color-surface-5);
  overflow: auto;
  -ms-overflow-style: none;
  scrollbar-width: none;
  scroll-behavior: smooth;

  &::-webkit-scrollbar {
    display: none;
  }

  /* ! not supported but may be useful reference in future */
  /* variants: {
    inline: {
      true: {
        --border-radius: 0;
        --trigger-padding: var(--space-xs) 0;
        box-shadow: none;
        width: auto;
        gap: var(--space-l);

        [`${Trigger}`]: {
          border: 1px solid transparent;
        }
      }
    }
  } */
}

.tabContent {
  padding-top: var(--space-m);
  overflow: auto;
}

'''
'''--- packages/ui/src/components/Text.module.css ---
.text {
  &[data-uppercase='true'] {
    text-transform: uppercase;
  }

  &[data-color='text-1'] {
    color: var(--color-text-1);
  }
  &[data-color='text-2'] {
    color: var(--color-text-2);
  }
  &[data-color='danger'] {
    color: var(--color-danger);
  }
  &[data-color='affirm'] {
    color: var(--color-affirm);
  }

  &[data-size='xs'] {
    font: var(--text-xs);
  }
  &[data-size='s'] {
    font: var(--text-s);
  }
  &[data-size='base'] {
    font: var(--text-base);
  }
  &[data-size='l'] {
    font: var(--text-l);
  }
  &[data-size='xl'] {
    font: var(--text-xl);
  }
  &[data-size='2xl'] {
    font: var(--text-2xl);
  }
  &[data-size='3xl'] {
    font: var(--text-3xl);
  }
  &[data-size='hero'] {
    font: var(--text-hero);
  }

  &[data-weight='regular'] {
    font-weight: 400;
  }
  &[data-weight='bold'] {
    font-weight: 700;
  }
}

'''
'''--- packages/ui/src/components/ThemeProvider.module.css ---
@import '@radix-ui/colors/black-alpha.css';
@import '@radix-ui/colors/white-alpha.css';
@import '@radix-ui/colors/cyan.css';
@import '@radix-ui/colors/cyan-dark.css';
@import '@radix-ui/colors/amber.css';
@import '@radix-ui/colors/amber-dark.css';
@import '@radix-ui/colors/green.css';
@import '@radix-ui/colors/green-dark.css';
@import '@radix-ui/colors/mauve.css';
@import '@radix-ui/colors/mauve-dark.css';
@import '@radix-ui/colors/red.css';
@import '@radix-ui/colors/red-dark.css';
@import '@radix-ui/colors/sand.css';
@import '@radix-ui/colors/sand-dark.css';
@import '@radix-ui/colors/violet.css';
@import '@radix-ui/colors/violet-dark.css';

.theme {
  --font-primary: 'Inter', sans-serif;

  --text-xs: 400 12px/1.4 var(--font-primary);
  --text-s: 400 14px/1.5 var(--font-primary);
  --text-base: 400 16px/1.5 var(--font-primary);
  --text-l: 400 20px/1.3 var(--font-primary);
  --text-xl: 700 24px/1.3 var(--font-primary);
  --text-2xl: 700 30px/1.3 var(--font-primary);
  --text-3xl: 700 42px/1.3 var(--font-primary);
  --text-hero: 700 72px/1 var(--font-primary);

  --size-max-container-width-xs: 20rem;
  --size-max-container-width-s: 30rem;
  --size-max-container-width-m: 50rem;
  --size-max-container-width-l: 80rem;

  font-family: var(--font-primary);
  line-height: 1.5;
  background: var(--color-surface-1);
  color: var(--color-text-1);
  color-scheme: light;
  -webkit-font-smoothing: antialiased;

  --color-border-1: var(--sand-5);
  --color-text-1: var(--sand-12);
  --color-text-2: var(--sand-11);
  --color-surface-1: #fff;
  --color-surface-2: var(--sand-2);
  --color-surface-3: var(--sand-3);
  --color-surface-4: var(--sand-4);
  --color-focus-outline: var(--violet-6);
  --color-primary-action: var(--violet-9);
  --color-affirm: var(--green-8);
  --color-danger: var(--red-8);

  :global(body.dark) &[data-allow-theme-change='true'],
  :global(&.dark) {
    --color-surface-1: var(--sand-1);
    --color-primary-action: var(--violet-10);
    --color-focus-outline: var(--violet-11);
    --color-affirm: var(--green-11);
    --color-danger: var(--red-11);

    color-scheme: dark;
  }
}

'''
'''--- packages/ui/src/components/Tooltip.module.css ---
.content {
  border-radius: 0.25rem;
  padding: 0.3rem 0.5rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: var(--color-text-1);
  background-color: var(--color-surface-1);
  z-index: 1000;
  max-width: 30rem;
  font-size: 0.8rem;
  line-height: 1.5;
  word-break: break-word;
  font-family: sans-serif;
  box-shadow:
    0 0 0 1px var(--color-border-1),
    0 1px 2px 0 rgba(0, 0, 0, 0.06);
}

.arrowBorder {
  fill: var(--color-border-1);
  stroke: var(--color-border-1);
  stroke-width: 2px;
  margin-top: 1px;
  margin-right: 1px;

  [data-side='bottom'] &,
  [data-side='left'] & {
    margin-right: -1px;
  }
}

.arrowFill {
  fill: var(--color-surface-1);
}

'''
'''--- packages/ui/src/global.d.ts ---
declare module '*.css' {
  const classes: { [key: string]: string };
  export default classes;
}

'''
'''--- packages/ui/src/hooks/useTheme.ts ---
import { useContext } from 'react';

import { ThemeContext } from '../components/ThemeProvider';

export const useTheme = () => {
  const context = useContext(ThemeContext);

  if (!context) {
    throw new Error(
      'useTheme() must be used inside the context provided by <ThemeProvider>'
    );
  }

  let { theme, setTheme } = context;

  return {
    theme,
    setTheme,
  };
};

'''
'''--- packages/ui/src/index.ts ---
export { Button, ButtonLink } from './components/Button';
export { Checkbox } from './components/Checkbox';
export * as Dialog from './components/Dialog';
export * as Dropdown from './components/Dropdown';
export { HR } from './components/HR';
export { Input } from './components/Input';
export { Spinner } from './components/Spinner';
export { ThemeProvider, initializeSsrTheme } from './components/ThemeProvider';
export { Text } from './components/Text';
export { Tooltip } from './components/Tooltip';
export { NearIconSvg } from './components/NearIconSvg';
export { useTheme } from './hooks/useTheme';
export * as Tabs from './components/Tabs';
export * as RadioGroup from './components/RadioGroup';

'''
'''--- packages/ui/src/utils/merge-refs.ts ---
// https://github.com/gregberge/react-merge-refs

import type * as React from 'react';

export function mergeRefs<T = any>(
  refs: Array<React.MutableRefObject<T> | React.LegacyRef<T>>
): React.RefCallback<T> {
  return (value) => {
    refs.forEach((ref) => {
      if (typeof ref === 'function') {
        ref(value);
      } else if (ref != null) {
        (ref as React.MutableRefObject<T | null>).current = value;
      }
    });
  };
}

'''
'''--- packages/ui/tsconfig.json ---
{
  "extends": "tsconfig/react-library.json",
  "include": ["src"],
  "exclude": ["lib", "node_modules"],
  "compilerOptions": {
    "outDir": "lib"
  }
}

'''
'''--- packages/wallet-selector-control/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ['custom'],
};

'''
'''--- packages/wallet-selector-control/README.md ---
# BWE Wallet Selector Control

This package provides a convenient UI to show the currently signed in wallet (or allow a user to sign in). It also provides a convenient way to initialize the wallet selector and access that instance via a provider and hook.

## Usage

Please check out the [Standard Usage](../social-db/README.md) section for the Social SDK to see a detailed example.

## Hooks

This package also includes the following hooks for convenience:

- `useWallet()` for easily accessing the Wallet Selector instance (and state) shared by the provider.

*NOTE: These hooks aren't accessible in the root of your application due to being outside the context of the providers (they would throw an error). Consider using the `onProvision` prop as shown above or move the consumers of these hooks into a child component of the providers.*

'''
'''--- packages/wallet-selector-control/package.json ---
{
  "name": "@bos-web-engine/wallet-selector-control",
  "version": "0.1.0",
  "description": "",
  "files": [
    "lib"
  ],
  "main": "lib/index.cjs.js",
  "module": "lib/index.esm.js",
  "types": "lib/index.d.ts",
  "exports": {
    ".": {
      "import": {
        "types": "./lib/index.d.ts",
        "default": "./lib/index.esm.js"
      },
      "require": {
        "types": "./lib/cjs/index.d.ts",
        "default": "./lib/cjs/index.cjs.js"
      }
    },
    "./*.css": {
      "import": "./lib/*.css",
      "require": "./lib/*.css"
    }
  },
  "scripts": {
    "dev": "rollup -c -w",
    "build": "rollup -c",
    "lint": "eslint ./src/**/*.ts*",
    "lint:fix": "eslint . --fix"
  },
  "peerDependencies": {
    "@bos-web-engine/social-db": "workspace:*",
    "@bos-web-engine/ui": "workspace:*",
    "@near-wallet-selector/core": "^8.9.2",
    "@near-wallet-selector/modal-ui": "^8.9.2",
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  },
  "dependencies": {
    "@phosphor-icons/react": "^2.0.15"
  },
  "devDependencies": {
    "@rollup/plugin-commonjs": "^22.0.1",
    "@rollup/plugin-node-resolve": "^13.3.0",
    "@rollup/plugin-typescript": "^8.3.4",
    "@types/lodash.debounce": "^4.0.9",
    "@types/node": "^17.0.12",
    "@types/react": "^18.2.34",
    "@types/react-dom": "^18.0.6",
    "eslint": "^7.32.0",
    "eslint-config-custom": "workspace:*",
    "postcss": "^8.4.14",
    "postcss-preset-env": "^7.6.0",
    "rollup": "^2.77.2",
    "rollup-plugin-peer-deps-external": "^2.2.4",
    "rollup-plugin-postcss": "^4.0.2",
    "tsconfig": "workspace:*",
    "tslib": "^2.6.2",
    "typescript": "^4.7.4"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

'''
'''--- packages/wallet-selector-control/rollup.config.js ---
import commonjs from '@rollup/plugin-commonjs';
import nodeResolve from '@rollup/plugin-node-resolve';
import typescript from '@rollup/plugin-typescript';
import postcssPresetEnv from 'postcss-preset-env';
import peerDepsExternal from 'rollup-plugin-peer-deps-external';
import postcss from 'rollup-plugin-postcss';

const extensions = ['.js', '.jsx', '.ts', '.tsx'];
const globals = {
  react: 'React',
  'react-dom': 'ReactDOM',
};

/** @type {import('rollup').RollupOptions} */
const options = {
  input: ['./src/index.ts'],
  output: [
    {
      file: './lib/index.esm.js',
      format: 'esm',
      globals,
    },
    {
      file: './lib/index.cjs.js',
      format: 'cjs',
      globals,
    },
  ],
  plugins: [
    peerDepsExternal(),
    nodeResolve({ extensions, browser: true }),
    commonjs(),
    typescript(),
    postcss({
      extract: 'styles.css',
      modules: true,
      plugins: [
        postcssPresetEnv({
          stage: 3,
          features: {
            'nesting-rules': true,
          },
        }),
      ],
    }),
  ],
};

export default options;

'''
'''--- packages/wallet-selector-control/src/components/WalletSelectorControl.module.css ---
.accountDropdownButton {
  display: flex;
  align-items: center;
  max-width: 15rem;
  height: 2.25rem;
  padding: 0 0.75rem;
  font-size: 0.8rem;
  gap: 0.75rem;
  line-height: 1.15;
  cursor: pointer;
  border: none;
  border-radius: 10rem;
  color: var(--color-text-1);
  background: var(--color-surface-1);
  box-shadow: 0 0 0 0px var(--color-focus-outline);
  text-align: left;
  outline: none;
  transition: all 200ms;

  &:hover,
  &[data-state='open'] {
    background: var(--color-surface-3);
  }

  &:focus {
    box-shadow: 0 0 0 2px var(--color-focus-outline);
  }
}

.accountName {
  display: flex;
  flex-direction: column;
  min-width: 0;
  gap: 0.15rem;

  span:nth-child(2) {
    color: var(--color-text-2);
    font-size: 0.7rem;
  }

  &:first-child {
    padding-left: 0.25rem;
  }
}

.avatar {
  width: 1.75rem;
  height: 1.75rem;
  margin-left: -0.4rem;
  border-radius: 100%;
  overflow: hidden;
  flex-shrink: 0;
}
.avatarImage {
  display: block;
  object-fit: cover;
}

.ellipsisOverflow {
  min-width: 0;
  flex-grow: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.icon {
  flex-shrink: 0;
}

'''
'''--- packages/wallet-selector-control/src/global.d.ts ---
declare module '*.css' {
  const classes: { [key: string]: string };
  export default classes;
}

'''
'''--- packages/wallet-selector-control/src/hooks/useWallet.ts ---
import type { Wallet, WalletSelectorState } from '@near-wallet-selector/core';
import type { SignMessageMethod } from '@near-wallet-selector/core/src/lib/wallet';
import { useContext, useEffect, useState } from 'react';

import { WalletSelectorContext } from '../components/WalletSelectorProvider';

export const useWallet = () => {
  const context = useContext(WalletSelectorContext);

  if (!context) {
    throw new Error(
      'useWallet() must be used inside the context provided by <WalletSelectorProvider>'
    );
  }

  let { walletSelector, walletSelectorModal } = context;
  const [wallet, setWallet] = useState<(Wallet & SignMessageMethod) | null>(
    null
  );
  const [walletSelectorState, setWalletSelectorState] =
    useState<WalletSelectorState | null>(null);
  const account = walletSelectorState?.accounts[0] ?? null;

  useEffect(() => {
    if (!walletSelector) return;

    setWalletSelectorState(walletSelector.store.getState());

    const subscription = walletSelector.store.observable.subscribe(
      async (value) => {
        setWalletSelectorState(value);

        if (
          value.accounts.length > 0 &&
          value.selectedWalletId &&
          walletSelector
        ) {
          const wallet = await walletSelector.wallet();
          setWallet(wallet);
        } else {
          setWallet(null);
        }
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, [walletSelector]);

  return {
    account,
    hasResolved: !!walletSelectorState,
    wallet,
    walletSelector,
    walletSelectorModal,
    walletSelectorState,
  };
};

'''
'''--- packages/wallet-selector-control/src/index.ts ---
export { WalletSelectorControl } from './components/WalletSelectorControl';
export {
  WalletSelectorContext,
  WalletSelectorProvider,
} from './components/WalletSelectorProvider';
export { useWallet } from './hooks/useWallet';

'''
'''--- packages/wallet-selector-control/tsconfig.json ---
{
  "extends": "tsconfig/react-library.json",
  "include": ["src", "../social-db/src/hooks/useSocialProfile.ts"],
  "exclude": ["lib", "node_modules"],
  "compilerOptions": {
    "outDir": "lib"
  }
}

'''
'''--- packages/wallet-selector-plugin/.eslintrc.js ---
module.exports = {
  root: true,
  extends: ['custom'],
};

'''
'''--- packages/wallet-selector-plugin/package.json ---
{
  "name": "@bos-web-engine/wallet-selector-plugin",
  "version": "1.0.0",
  "description": "",
  "main": "lib/index.js",
  "scripts": {
    "build": "tsc -p ./tsconfig.json",
    "dev": "tsc -w -p ./tsconfig.json",
    "lint": "eslint ./src/**/*.ts*",
    "lint:fix": "eslint . --fix"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@bos-web-engine/common": "workspace:*",
    "@near-js/transactions": "0.2.1",
    "@near-wallet-selector/core": "^8.9.2",
    "@types/node": "^17.0.12",
    "eslint": "^7.32.0",
    "eslint-config-custom": "workspace:*",
    "tsconfig": "workspace:*",
    "typescript": "^4.5.2"
  }
}

'''
'''--- packages/wallet-selector-plugin/src/index.ts ---
import type { WebEngine, WebEngineContext } from '@bos-web-engine/common';
import type { BrowserWalletBehaviour } from '@near-wallet-selector/core';

declare global {
  interface Window {
    webEngine: WebEngine;
  }
}

/*
  The Required<...> wrapper is needed due to BrowserWalletBehaviour["signMessage"] being 
  optional. Our plugin ensures signMessage is always defined and callable - it just 
  throws an error if you aren't signed in
*/
export type WalletSelectorPlugin = Required<
  Pick<
    BrowserWalletBehaviour,
    'getAccounts' | 'signMessage' | 'signAndSendTransaction'
  >
>;

export default function initializeWalletSelectorPlugin() {
  function initWalletSelectorPlugin({
    callApplicationMethod,
  }: WebEngineContext): WalletSelectorPlugin {
    const getAccounts: BrowserWalletBehaviour['getAccounts'] = () =>
      callApplicationMethod({
        args: [],
        method: 'walletSelector.getAccounts',
      });

    const signMessage: BrowserWalletBehaviour['signMessage'] = (args) =>
      callApplicationMethod({
        args: [args],
        method: 'walletSelector.signMessage',
      });

    const signAndSendTransaction: BrowserWalletBehaviour['signAndSendTransaction'] =
      (args) =>
        callApplicationMethod({
          args: [args],
          method: 'walletSelector.signAndSendTransaction',
        });

    return {
      getAccounts,
      signMessage,
      signAndSendTransaction,
    };
  }

  return window.webEngine.initPlugin(initWalletSelectorPlugin);
}

'''
'''--- packages/wallet-selector-plugin/tsconfig.json ---
{
  "extends": "tsconfig/react-library.json",
  "include": ["src"],
  "exclude": ["lib", "node_modules"],
  "compilerOptions": {
    "outDir": "lib"
  }
}

'''
'''--- press-release-faq.md ---
# Vision PR/FAQ

> ⚠️ This is a WIP press release / FAQ for the eventual launch of BOS Web Engine. Its primary purpose is to communicate the project's vision and maintain alignment on the criteria for success. It does not necessarily represent the project's current state, as the contents here may change during implementation.

## Press Release

Pagoda makes major enhancements to BOS decentralized front-end development with the release of BOS Web Engine (BWE).

BWE is a new execution environment for BOS components featuring:

- Increased security guarantees
- Modern web development features such as `npm` dependencies, TypeScript, and hooks
- Advanced features for performance optimizations

Until now, BOS components required compatibility with [near-social's VM](https://github.com/nearsocial/vm). This VM operates on a stringent security protocol that meticulously scrutinizes components line-by-line, and only executes statements when they are recognized, understood, and confirmed to be secure. Unfortunately, this model leads to a persistent balancing act between enhancing the functionality of BOS components and ensuring their security. As a result, importing code that expects to execute in a typical browser environment is impossible.

BWE takes an alternative approach by leveraging the sandboxing feature of iframes in web browsers to isolate the execution of each component.
	
Here's how it works:
	
  - Code for each component is sent to a hidden iframe, accompanied by an instance of [Preact](https://preactjs.com/), a "fast 3kB alternative to React with the same modern API"
  - Within this iframe, Preact executes the component's code. Once rendered, the resulting UI is transferred out of the iframe.
  - The outputs from all iframes are then assembled onto the page.
	
Imagine each component operating as a self-contained mini-application with access to a communication system to synchronize with other components. This architecture allows for significantly fewer restrictions on the code that components can execute since the execution takes place in an isolated sandbox and cannot reach the main web application. Additionally, a wide set of javascript libraries and third-party React components can be imported and used seamlessly in BWE components.

## F.A.Q

### General

#### When will the previous VM stop being supported?

The transition will occur in a few stages.

There will be a beta period where both the VM and BWE are supported while we ensure BWE is stable and performant. During this period, we will encourage developers to build on BWE but breaking changes are more likely to occur as improvements to the engine are identified.

Once we are confident in the production readiness of BWE, we will start a grace period during which the VM will continue to be supported while the community works to migrate existing BOS components to BWE. We will assist in this with ample guidance and hopefully some tooling to make the process easier.

After the grace period, the VM will be deprecated and removed from the BOS runtime, since the security guarantees it provides are not sufficient for the future of BOS.

### Building BOS Components with BWE

#### What language and framework are BOS components written in?

BOS components are written in TypeScript or JavaScript and use Preact as the rendering engine with the React compatibility layer enabled. One of the main goals of BWE is to have syntax that is minimally different from vanilla (p)react, and only stray from it where necessary to accommodate the architecture of the engine and sandbox communication patterns.

See [components.md](components.md) for a detailed overview of the syntax required to build BOS components.

#### What non-BOS code can I import?

You can import npm packages via a CDN like https://esm.sh/

You can expect for packages which are not dependent on direct access to the DOM or `window` object to work out of the box. Many packages which export custom React components are also supported due to our inclusion of preact/compat in the sandboxed environment.

Packages which may not work:
- animation libraries
- canvas libraries
- packages which tie into the render process by usage of `useLayoutEffect`

#### How do I convert an existing (p)react application?

See [migrating.md](migrating.md)(placeholder) for guidance on migrating an existing (p)react application to BOS.

#### What are the performance limits? How many sandboxed components can reasonably be rendered on a page?

> TBD

#### Are browser APIs like Canvas supported?

Yes, but there may be some caveats since access to browser APIs must be proxied— with isolation in mind— from sandbox code to the outer window. See [components.md](components.md#browser-apis) for more details.

#### Can I use other frontend frameworks?

No, BWE is implemented by tying directly into the render pipeline of Preact. Discussions have occurred about the feasibility of supporting other frameworks, but it would be a sizeable engineering effort.

You may be able to import component built in other frameworks if they can be bundled as Web Components

#### Can I use web components?

Yes, Preact supports embedding Web Components. See [components.md](components.md#web-components)(placeholder) for more details.

#### What about Shadow Realms?

Shadow Realms are a proposed browser standard which would offer some of the same benefits as BWE. Implementation of Shadow Realms is still in the early stages and it is unclear when it will be available in all major browsers, and whether it would be possible to use it in a way which is compatible with the BOS architecture. We will continue to monitor the progress of Shadow Realms.

#### How do I optimize performance?

##### Trust Mode

The default trust model of BOS is to encourage risk-free composability by sandboxing all embedded BOS components by default. There are cases where this might not be necessary, such as:
- embedding your own components
- embedding components from other developers you trust
- embedding components you have audited for malicious behavior and are locked to a specific version

If a component does not need to be sandboxed, you can change the `trust` mode on the embed and the component will be directly executed in the same container instead of having a sandboxed iframe created for it. This can yield significant performance improvements for pages which render many components (e.g. social feeds).

See [performance.md](performance.md#trust)(placeholder) for the syntax to change the trust mode of an embedded component

##### Best Practices

See [performance.md](performance.md#best-practices)(placeholder) for a general list of best practices for optimizing performance of BOS components.

#### How do I interact with the external services?

You can directly call out to external services with the browser-native [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) or any other request library, but keep in mind that external service integrations can diminish the decentralization benefits of BOS if they are not decentralized themselves.

#### Can my code editor handle component syntax?

> TBD (we might provide a typescript definition package to help with this)

#### What happens when I set an `onClick` function and it gets called?

When a DOM event handler (e.g. `onClick`, `onChange`) is fired, the outer application sends a message to the container to which the DOM element belongs. This is related to how container callbacks are invoked, but DOM callbacks are unique in that:
- the invocation originates in the outer application rather than from another container
- the callback is always invoked with the `event` object, for which only a subset of the fields are sent since `event` is not serializable

### Architecture

#### Why is isolation important? What are the attack vectors?

To achieve the high level of composability that is a central goal of BOS, developers must be able to embed components from other authors without the burden of personally auditing the code for malicious behavior. This is especially true if components are embedded dynamically and it is impossible for the dapp developer to know in advance which components will be loaded (e.g. a social post feed which can render components inline).

**Example attack**
Bob develops a defi dapp which has a button to initiate a transaction to transfer some value (e.g. fungible tokens). He then embeds a seemingly innocent BOS component from another author in his dapp— perhaps it is a UI component to render a nice accordion element. In that accordion element is code which directly modifies the DOM of the previously mentioned button, and causes it to present users with a transaction to transfer value to the malicious component author instead of wherever it was supposed to go. A user goes to Bob's defi dapp and clicks the transfer button, but doesn't realize the transaction they are confirming has been tampered with.

#### How are off-chain dependencies decentralized?

Packages are loaded via CDNs, and most CDNs have decentralization architecture built in. That being said, it is possible for a CDN to go offline or be blocked in a particular region. In this case, the dependency will fail to load which may cause the component to fail to render.

In the spirit of progressive decentralization, BWE will launch with dependencies being powered directly by CDN URLs. In the future, we will explore the following:
- a package registry hosted on an inherently decentralized network (e.g. IPFS)
- creating CDN-agnostic import syntax where developers can specify the package and version they require then leave resolution up to the gateway at runtime

#### Why is SocialDB integration not built in?

In keeping with our goal to be minimally different from vanilla (p)react, we have opted to have SocialDB integration be provided as an external library instead of built into the engine.

#### How do cross-components function calls work?

Containers maintain a set of callbacks, defined within the container, which are available to be "invoked" across container boundaries. This includes functions passed via `props` and function arguments passed to `props` functions. When an external container needs to invoke one of these callbacks, the external container requests the outer application to send a message to the target container identifying the method and arguments.

See [architecture.md](architecture.md#component-callbacks) for more details.

#### What are the downsides of using iframes?

> @andy

'''
'''--- turbo.json ---
{
  "$schema": "https://turbo.build/schema.json",
  "globalDependencies": ["**/.env.*local"],
  "pipeline": {
    "build": {
      "dependsOn": ["^build"],
      "env": ["NEXT_PUBLIC_DEFAULT_ROOT_COMPONENT"],
      "outputs": ["dist/**", ".next/**", "!.next/cache/**", "lib/**"]
    },
    "lint": {
      "outputs": []
    },
    "lint:fix": {
      "outputs": []
    },
    "dev": {
      "dependsOn": ["build"],
      "cache": false
    },
    "dev:components": {
      "dependsOn": ["build"],
      "outputs": ["dist/**", ".next/**", "!.next/cache/**", "lib/**"]
    },
    "lint:check": {
      "outputs": []
    },
    "format:check": {
      "outputs": []
    }
  }
}

'''