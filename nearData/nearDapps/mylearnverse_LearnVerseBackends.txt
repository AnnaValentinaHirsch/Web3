*GitHub Repository "mylearnverse/LearnVerseBackends"*

'''--- README.md ---
# LearnVerseBackends
Backend code repo and microservices for LearnVerse.

## REST API
Interact with NEAR blockchain and smart contracts via http requests

For deployment and usage view:

`near-api-rest-server/README.md`

Smart Contracts are stored in:

`/contracts`

'''
'''--- near-api-rest-server/README.md ---
# NEAR REST API SERVER

> Interact with the NEAR blockchain using a simple REST API.

###### Live Demo:
* [REST API Endpoint for NEAR Testnet](https://rest.nearapi.org) 
* [Web Console for `view`/`call` requests](https://web.nearapi.org) 

---

## Overview

_Click on a route for more information and examples_

| Route                                      | Method | Description                                                                                                                 |
| ------------------------------------------ | ------ | --------------------------------------------------------------------------------------------------------------------------- |
| **CONTRACTS**                              |        |                                                                                                                             |
| [`/deploy`](#deploy)                       | POST   | Deploys a smart contract on NEAR.                                                                                           |
| [`/view`](#view)                           | POST   | Performs a smart contract **view** call with no gas burnt.                                                                  |
| [`/call`](#call)                           | POST   | Performs a smart contract **change** call that burns gas.                                                                   |
|                                            |        |                                                                                                                             |
| **UTILS**                                  |        |                                                                                                                             |
| [`/init`](#init)                           | POST   | Initializes the master account and updates `near-api-server-config.json`                                                    |
| [`/create_user`](#create_user)             | POST   | Creates a NEAR [sub-account](https://docs.near.org/docs/concepts/account#subaccounts) and stores credentials in `/storage`. |
| [`/parse_seed_phrase`](#parse_seed_phrase) | POST   | Displays public and private key pair from a given seed phrase.                                                              |
| [`/balance`](#balance)                     | GET    | Displays account balance.                                                                                                   |
| [`/keypair`](#keypair)                     | GET    | Generates Ed25519 key pair.                                                                                                 |
| [`/explorer`](#explorer)                   | POST   | Run SELECT query in NEAR explorer database.                                                                                 |
|                                            |        |                                                                                                                             |
| **NFT EXAMPLE**                            |        |                                                                                                                             |
| [`/mint_nft`](#mint_nft)                   | POST   | Mints an NFT for a given contract.                                                                                          |
| [`/transfer_nft`](#transfer_nft)           | POST   | Transfers NFT ownership to a specified account.                                                                             |
| [`/view_nft`](#view_nft)                   | POST   | Returns owner, metadata, and approved account IDs for a given token ID.                                                     |

---

## Requirements

- [NEAR Account](https://docs.near.org/docs/develop/basics/create-account) _(with access to private key or seed phrase)_
- [Node.js](https://nodejs.org/en/download/package-manager/)
- [npm](https://www.npmjs.com/get-npm) or [Yarn](https://yarnpkg.com/getting-started/install)
- API request tool such as [Postman](https://www.postman.com/downloads/)

---

## Setup

1. Clone repository

```bash
git clone git@github.com:near-examples/near-api-server.git
```

2. Install dependencies

```bash
npm install
```

3. Configure `near-api-server.config.json`

Default settings:

```json
{
  "server_host": "localhost",
  "server_port": 3000,
  "rpc_node": "https://rpc.testnet.near.org",
  "init_disabled": true
}
```

_**Note:** `init_disabled` determines if params can be changed via `/init` route._

4. Start server

```bash
node app
```

---

# Contracts

## `/deploy`

> _Deploys a smart contract to the NEAR blockchain based on the wasm file located in `/contracts` folder._

**Method:** **`POST`**

| Param                            | Description                                                                          |
| -------------------------------- | ------------------------------------------------------------------------------------ |
| `account_id`                     | _Account id that you will be deploying the contract to._                             |
| `seed_phrase` _OR_ `private_key` | _Seed phrase OR private key of the account id above._                                |
| `contract`                       | _wasm file of compiled contract located in the `/contracts` folder of this project._ |

_**Note:** Use [`near login`](https://docs.near.org/docs/tools/near-cli#near-login) to save your key pair to your local machine._

Example:

```json
{
  "account_id": "example.testnet",
  "seed_phrase": "witch collapse practice feed shame open despair creek road again ice least",
  "contract": "nft_simple.wasm"
}
```

<details>
<summary><strong>Example Response:</strong> </summary>
<p>

```json
{
  "status": {
    "SuccessValue": ""
  },
  "transaction": {
    "signer_id": "example.testnet",
    "public_key": "ed25519:Cgg4i7ciid8uG4K5Vnjzy5N4PXLst5aeH9ApRAUA3y8U",
    "nonce": 5,
    "receiver_id": "example.testnet",
    "actions": [
      {
        "DeployContract": {
          "code": "hT9saWV3aok50F8JundSIWAW+lxOcBOns1zenB2fB4E="
        }
      }
    ],
    "signature": "ed25519:3VrppDV8zMMRXErdBJVU9MMbbKZ4SK1pBZqXoyw3oSSiXTeyR2W7upNhhZPdFJ1tNBr9h9SnsTVeBm5W9Bhaemis",
    "hash": "HbokHoCGcjGQZrz8yU8QDqBeAm5BN8iPjaSMXu7Yp2KY"
  },
  "transaction_outcome": {
    "proof": [
      {
        "hash": "Dfjn2ro1dXrPqgzd5zU7eJpCMKnATm295ceocX73Qiqn",
        "direction": "Right"
      },
      {
        "hash": "9raAgMrEmLpL6uiynMAi9rykJrXPEZN4WSxLJUJXbipY",
        "direction": "Right"
      }
    ],
    "block_hash": "B64cQPDNkwiCcN3SGXU2U5Jz5M9EKF1hC6uDi4S15Fb3",
    "id": "HbokHoCGcjGQZrz8yU8QDqBeAm5BN8iPjaSMXu7Yp2KY",
    "outcome": {
      "logs": [],
      "receipt_ids": ["D94GcZVXE2WgPGuaJPJq8MdeEUidrN1FPkuU75NXWm7X"],
      "gas_burnt": 1733951676474,
      "tokens_burnt": "173395167647400000000",
      "executor_id": "example.testnet",
      "status": {
        "SuccessReceiptId": "D94GcZVXE2WgPGuaJPJq8MdeEUidrN1FPkuU75NXWm7X"
      }
    }
  },
  "receipts_outcome": [
    {
      "proof": [
        {
          "hash": "3HLkv7KrQ9LPptX658QiwkFagv8NwjcxF6ti15Een4uh",
          "direction": "Left"
        },
        {
          "hash": "9raAgMrEmLpL6uiynMAi9rykJrXPEZN4WSxLJUJXbipY",
          "direction": "Right"
        }
      ],
      "block_hash": "B64cQPDNkwiCcN3SGXU2U5Jz5M9EKF1hC6uDi4S15Fb3",
      "id": "D94GcZVXE2WgPGuaJPJq8MdeEUidrN1FPkuU75NXWm7X",
      "outcome": {
        "logs": [],
        "receipt_ids": [],
        "gas_burnt": 1733951676474,
        "tokens_burnt": "173395167647400000000",
        "executor_id": "example.testnet",
        "status": {
          "SuccessValue": ""
        }
      }
    }
  ]
}
```

</p>
</details>

---

## `/view`

> _Performs a smart contract view call that is free of charge (no gas burnt)._

**Method:** **`POST`**

| Param      | Description                                                                               |
| ---------- | ----------------------------------------------------------------------------------------- |
| `contract` | _Account id of the smart contract you are calling._                                       |
| `method`   | _Name of the public method on the contract you are calling._                              |
| `params`   | _Arguments the method of the contract takes. Pass an empty object if no args are needed._ |

Example:

```json
{
  "contract": "inotel.pool.f863973.m0",
  "method": "get_accounts",
  "params": { "from_index": 0, "limit": 5 }
}
```

<details>
<summary><strong>Example Response:</strong> </summary>
<p>

```json
[
  {
    "account_id": "ino.lockup.m0",
    "unstaked_balance": "0",
    "staked_balance": "2719843984800963837328608365424",
    "can_withdraw": true
  },
  {
    "account_id": "ino.testnet",
    "unstaked_balance": "2",
    "staked_balance": "3044983795632859169857527919579",
    "can_withdraw": true
  },
  {
    "account_id": "ino.stakewars.testnet",
    "unstaked_balance": "2",
    "staked_balance": "21704174266817478470830456026",
    "can_withdraw": true
  },
  {
    "account_id": "ds4.testnet",
    "unstaked_balance": "3",
    "staked_balance": "10891355794195012441764921",
    "can_withdraw": true
  },
  {
    "account_id": "32oijafsiodjfas.testnet",
    "unstaked_balance": "3",
    "staked_balance": "383757424103247547511904666",
    "can_withdraw": true
  }
]
```

</p>
</details>

---

## `/call`

> _Performs a smart contract call that changes state and burns gas._

**Method:** **`POST`**

| Param                            | Description                                                                                                           |
| -------------------------------- | --------------------------------------------------------------------------------------------------------------------- |
| `account_id`                     | _Account id that will be performing the call and will be charged for gas and attached tokens / deposit._              |
| `seed_phrase` _OR_ `private_key` | _Seed phrase OR private key of the account id above._                                                                 |
| `contract`                       | _Account id of the smart contract you will be calling._                                                               |
| `method`                         | _Public method on the smart contract that you will be calling._                                                       |
| `params`                         | _Arguments the method of the contract takes. Pass an empty object if no args are needed._                             |
| `attached_gas`                   | _Amount of gas you will be attaching to the call in [TGas](https://docs.near.org/docs/concepts/gas#thinking-in-gas)._ |
| `attached_tokens`                | _Amount of tokens to be sent to the contract you are calling in yoctoNEAR (10^-24 NEAR)._                             |

_**Note:** Use [`near login`](https://docs.near.org/docs/tools/near-cli#near-login) to save your key pair to your local machine._

Example:

```json
{
  "account_id": "example.testnet",
  "private_key": "2Kh6PJjxH5PTTsVnYqtgnnwXHeafvVGczDXoCb33ws8reyq8J4oBYix1KP2ugRQ7q9NQUyPcVFTtbSG3ARVKETfK",
  "contract": "guest-book.testnet",
  "method": "addMessage",
  "params": { "text": "Hello World" },
  "attached_gas": "100000000000000",
  "attached_tokens": "0"
}
```

<details>
<summary><strong>Example Response:</strong> </summary>
<p>

```json
{
  "status": {
    "SuccessValue": ""
  },
  "transaction": {
    "signer_id": "example.testnet",
    "public_key": "ed25519:ASZEids5Qa8XMHX2S7LRL4bQRczi4YuMWXSM7S1HE5b",
    "nonce": 4,
    "receiver_id": "guest-book.testnet",
    "actions": [
      {
        "FunctionCall": {
          "method_name": "addMessage",
          "args": "eyJ0ZXh0IjoiSGVsbG8gV29ybGQifQ==",
          "gas": 100000000000000,
          "deposit": "0"
        }
      }
    ],
    "signature": "ed25519:4T9FqsjYBxcitjd5GgHrv3i3hcdcJSNcwwG3jBUgs7zZCZ3uShAK44Hi3oYFefhr8e5UW3LLD49ofRpGXKwGqqot",
    "hash": "CniHtfQVzcyVWJaUrQibJyGdhLi5axsjsoSRvvFbJ1jv"
  },
  "transaction_outcome": {
    "proof": [
      {
        "hash": "EkzDGbbBHSAuJcCPmhKSqbnBKyLrMgXkrTEZZZQudHeH",
        "direction": "Right"
      },
      {
        "hash": "36j4PK6fsLChiVTBQnXS1ywVSgJgHo7FtWzd5y5jkK1B",
        "direction": "Right"
      }
    ],
    "block_hash": "CUAu2deED8UX4vkerCbsTMR7YkeKt8RQXknYMNrVvM7C",
    "id": "CniHtfQVzcyVWJaUrQibJyGdhLi5axsjsoSRvvFbJ1jv",
    "outcome": {
      "logs": [],
      "receipt_ids": ["B7xAYoga5vrKERK7wY7EHa2Z74LaRJwqPsh4esLrKeQF"],
      "gas_burnt": 2427992549888,
      "tokens_burnt": "242799254988800000000",
      "executor_id": "example.testnet",
      "status": {
        "SuccessReceiptId": "B7xAYoga5vrKERK7wY7EHa2Z74LaRJwqPsh4esLrKeQF"
      }
    }
  },
  "receipts_outcome": [
    {
      "proof": [
        {
          "hash": "6Uo6BajpAxiraJEv69RwhjYnC86u56cw29vRDB1SV4dv",
          "direction": "Right"
        }
      ],
      "block_hash": "Ecq6pK74uiJFKxPTaasYuQcsEznnQjdzMAfsyrBpDo2u",
      "id": "B7xAYoga5vrKERK7wY7EHa2Z74LaRJwqPsh4esLrKeQF",
      "outcome": {
        "logs": [],
        "receipt_ids": ["6S6m1TYuVPYovLu9FHGV5oLRnDXeNQ8NhXxYjcr91xAN"],
        "gas_burnt": 3766420707221,
        "tokens_burnt": "376642070722100000000",
        "executor_id": "guest-book.testnet",
        "status": {
          "SuccessValue": ""
        }
      }
    },
    {
      "proof": [
        {
          "hash": "2za2YKUhyMfWbeEL7UKZxZcQbAqEmSPgPoYh9QDdeJQi",
          "direction": "Left"
        },
        {
          "hash": "61aHEiTBBbPU8UEXgSQh42TujFkHXQQMSuTh13PLPwbG",
          "direction": "Right"
        }
      ],
      "block_hash": "6LfpzvCBkqq7h5uG9VjAHMwSpC3HMMBSAGNGhbrAJzKP",
      "id": "6S6m1TYuVPYovLu9FHGV5oLRnDXeNQ8NhXxYjcr91xAN",
      "outcome": {
        "logs": [],
        "receipt_ids": [],
        "gas_burnt": 0,
        "tokens_burnt": "0",
        "executor_id": "example.testnet",
        "status": {
          "SuccessValue": ""
        }
      }
    }
  ]
}
```

</p>
</details>

---

# Utils

---

## `/init`

> _Configures `near-api-server.config.json` and creates a master account that stores credentials in this file. This allows for "simple methods" to be called where you won't have to pass as many parameters, primarily the master account id and private key or seed phrase._

**ATTN: SERVER MUST BE RESTARTED AFTER CALLING THIS ENDPOINT**

**Method:** **`POST`**

| Param                            | Description                                                                                                             |
| -------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |
| `master_account_id`              | _Master account that has full access to the NFT contract below_                                                         |
| `seed_phrase` _OR_ `private_key` | _Seed phrase OR private key of the account id above._                                                                   |
| `nft_contract`                   | _Contract account that has NFT contract deployed to it_                                                                 |
| `server_host`                    | _Public IP address for your API server (localhost is default)_                                                          |
| `server_port`                    | _(Port your API server will listen on)_                                                                                 |
| `rpc_node`                       | _[Network](https://docs.near.org/docs/concepts/networks) your server will be running on (testnet, mainnet, or betanet)_ |

_**Note:** Use [`near login`](https://docs.near.org/docs/tools/near-cli#near-login) to save your key pair to your local machine._

Example:

```json
{
  "master_account_id": "example.testnet",
  "seed_phrase": "seed phrase for master_account_id goes here",
  "nft_contract": "nft-contract.example.testnet",
  "server_host": "localhost",
  "server_port": 3000,
  "rpc_node": "https://rpc.testnet.near.org"
}
```

Example Response:

```json
{
  "text": "Settings updated."
}
```

---

## `/sign_url`

> _Generates a link to NEAR Wallet with provided transaction details. May be used to redirect user to the wallet and perform a transaction without generation application-specific keys and granting access._

**Method:** **`POST`**

| Param                            | Description                                                                                                             |
| -------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |
| `account_id`                     | _Signer Account_                                                                                                        |
| `receiver_id`                    | _Recipient contract account, may be dApp contract or personal account_                                                  |
| `method`                         | _Contract method to call. Use `!transfer` to transfer NEAR tokens_                                                      |
| `params`                         | _Transaction arguments_                                                                                                 |
| `deposit`                        | _Attached deposit in NEAR_                                                                                              |
| `gas`                            | _Attached gas in yoctoNEAR_                                                                                             |
| `meta`                           | _Transaction meta. May be empty_                                                                                        |
| `callback_url`                   | _URL to redirect user after the transaction. May be empty_                                                              |
| `network`                        | _Your network: mainnet/testnet_                                                                                         |

Example:

```
{
	"account_id": "zavodil.testnet",
	"receiver_id": "inotel.pool.f863973.m0",
	"method": "ping",
	"params": {},
	"deposit": 0,
	"gas": 30000000000000,	
	"meta": "",
	"callback_url": "",
	"network": "testnet"
}
```

Example Response:

```
    https://wallet.testnet.near.org/sign?transactions=DwAAAHphdm9kaWwudGVzdG5ldADKei8CC%2BlhIM9GNPitr87eHXpqdnQsCdLD%2B0ADdTJbqwEAAAAAAAAAFgAAAGlub3RlbC5wb29sLmY4NjM5NzMubTCfZPsioMcZCQRg4Uy7rOu4ERg10QV9c415FuXE0VDRRAEAAAACBAAAAHBpbmcCAAAAe30A4FfrSBsAAAAAAAAAAAAAAAAAAAAAAAA%3D&callbackUrl=
```

Approving this url performed a transaction [143c9MNaqXFXuiobjUaQ8FPSBR2ukYbCMzGdPe6HqXEq](https://explorer.testnet.near.org/transactions/143c9MNaqXFXuiobjUaQ8FPSBR2ukYbCMzGdPe6HqXEq)

## `/create_user`

> _Creates a NEAR [sub-account](https://docs.near.org/docs/concepts/account#subaccounts) using initialized master account and saves credentials to `/storage` directory. Requires [`/init`](#init) configuration with master account._

**Note:** _Only letters, digits, and - or \_ separators are allowed._

**Method:** **`POST`**

Example:

```
{
    "name" : "satoshi"
}
```

Example Response:

```json
{
  "text": "Account satoshi.example.testnet created. Public key: ed25519:HW4koiHqLi5WdVHWy9fqBWHbLRrzfmvCiRAUVhMa14T2"
}
```

---

## `/parse_seed_phrase`

> _Converts seed phrase into public / private key pair._

**Method:** **`POST`**

Example:

```
{
    "seed_phrase" : "witch collapse practice feed shame open despair creek road again ice least"
}
```

Example Response:

```
{
    "seedPhrase": "witch collapse practice feed shame open despair creek road again ice least",
    "secretKey": "ed25519:41oHMLtYygTsgwDzaMdjWRq48Sy9xJsitJGmMxgA9A7nvd65aT8vQwAvRdHi1nruPP47B6pNhW5T5TK8SsqCZmjn",
    "publicKey": "ed25519:Cgg4i7ciid8uG4K5Vnjzy5N4PXLst5aeH9ApRAUA3y8U"
}
```

---

## `/balance`

> _Displays account balance in yoctoNEAR (10^-24 NEAR)._

**Method:** **`GET`**

Example:

```
http://localhost:3000/balance/name.testnet
```

Example Response:

```
199999959035075000000000000
```

---

## `/keypair`

> _Generates Ed25519 key pair._

**Method:** **`GET`**

Example:

```
http://localhost:3000/keypair
```

Example Response:

```
{
  "public_key": "ed25519:3pNJK3fwP14UEbPjQqgDASwWR4XmbAEQBeNsyThhtNKY",
  "private_key": "3s9nVrCU4MER3w9cxXcJM58RGRzFNJnLzo9vgQiNrkuGW3Xp7Up6cYnY4JKQZ7Qp3GhmXckrApRyDPAfzo2oCm8a"
}
```

## `/explorer`

> _Run SELECT query in NEAR explorer database._

**Method:** **`POST`**

| Param                            | Description                                                 |
| -------------------------------- | ----------------------------------------------------------- |
| `user`                           | _Public account, `public_readonly`_                         |
| `host`                           | _NEAR indexer host, `testnet.db.explorer.indexer.near.dev`_ |
| `database`                       | _Name of the database, `testnet_explorer`_                  |
| `password`                       | _Password, `nearprotocol`_                                  |
| `port`                           | _Port, `5432`_                                              |
| `parameters`                     | _Array of query parameters, `[]`_                           |
| `query`                          | _Query without tabs, linebreaks and special characters_     |     

Check indexer server credentials on a [github](https://github.com/near/near-indexer-for-explorer/#shared-public-access). 

Example:

```json
{
  "user": "public_readonly",
  "host": "35.184.214.98",
  "database": "testnet_explorer",
  "password": "nearprotocol",
  "port": 5432,
  "parameters": ["testnet", 1],
  "query": "SELECT * FROM action_receipt_actions WHERE receipt_receiver_account_id = $1 LIMIT $2"
}
```

<details>
<summary><strong>Example Response:</strong> </summary>
<p>

```json
[
  {
    "receipt_id": "GZMyzjDWPJLjrCuQG82uHj3xRVHwdDnWHH1gCnSBejkR",
    "index_in_action_receipt": 0,
    "action_kind": "TRANSFER",
    "args": {
      "deposit": "1273665187500000000"
    },
    "receipt_predecessor_account_id": "system",
    "receipt_receiver_account_id": "testnet",
    "receipt_included_in_block_timestamp": "1619207391172257749"
  }
]
```

</p>
</details>

---

# NFTs

---

## `/mint_nft`

> _Mints a new NFT on a specified contract._

**Method:** **`POST`**

### Standard NFT Minting

| Param                            | Description                                            |
| -------------------------------- | ------------------------------------------------------ |
| `token_id`                       | _ID for new token you are minting_                     |
| `metadata`                       | _Metadata for the new token as a string._              |
| `account_id`                     | _Account ID for the new token owner._                  |
| `seed_phrase` _OR_ `private_key` | _Seed phrase OR private key for the NFT contract._     |
| `nft_contract`                   | _Account ID for the NFT contract your are minting on._ |

_**Note:** Use [`near login`](https://docs.near.org/docs/tools/near-cli#near-login) to save your key pair to your local machine._

Example:

```
{
    "token_id": "EXAMPLE-TOKEN",
    "metadata": "https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu",
    "account_id": "example.testnet",
    "private_key": "41oHMLtYygTsgwDzaMdjWRq48Sy9xJsitJGmMxgA9A7nvd65aT8vQwAvRdHi1nruPP47B6pNhW5T5TK8SsqCZmjn",
    "contract": "nft.example.near",
}
```

### Simple NFT Minting

_Requires [`/init`](#init) configuration with master account._

Example:

```json
{
  "token_id": "EXAMPLE_TOKEN",
  "metadata": "https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu"
}
```

<details>
<summary><strong>Example Response:</strong> </summary>
<p>

```json
[
  {
    "token": {
      "owner_id": "example.testnet",
      "metadata": "https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu",
      "approved_account_ids": [],
      "token_id": "EXAMPLE_TOKEN"
    },
    "tx": "Be7tV1h2dvhg53S2rartojeSUbNfQTB7ypuprmb6xRhw"
  }
]
```

</p>
</details>

_(`tx` is the transaction hash that can be queried in [NEAR Explorer](http://explorer.testnet.near.org))_

---

### Batch NFT minting (simple)

_Requires [`/init`](#init) configuration with master account._

Example:

```json
{
  "token_id": "EXAMPLE_TOKEN_{inc}",
  "metadata": "https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu",
  "min": 31,
  "max": 33
}
```

_(This creates `EXAMPLE_TOKEN_31`, `EXAMPLE_TOKEN_32`, & `EXAMPLE_TOKEN_33`)_

<details>
<summary><strong>Example Response:</strong> </summary>
<p>

```json
[
  {
    "tx": "mAL92gb6g6hhubZBRewJk5vSwmmzm2SXmwdAfYqfWcG"
  },
  {
    "tx": "Dv9h8nWJLujkKpmw58ZR4QwAgPVprb4j5QarDUumoGEX"
  },
  {
    "tx": "J48F3vALJBbbUguKXp6e16g5vKVwzC2LtVBpsfEVFpYa"
  }
]
```

</p>
</details>

_(Above response are transaction hashes that can be queried in [NEAR Explorer](http://explorer.testnet.near.org))_

---

## `/transfer_nft`

> _Transfers ownership of NFT from specified contract on behalf of provided `enforce_owner_id` signed with `owner_private_key`._

**Method:** **`POST`**

### Standard Transfer NFT

| Param               | Description                                               |
| ------------------- | --------------------------------------------------------- |
| `token_id`          | _Token ID of the token being transferred_                 |
| `receiver_id`       | _Account ID taking ownership of the NFT_                  |
| `enforce_owner_id`  | _Account ID for the account that currently owns the NFT._ |
| `memo`              | _Optional message to the new token holder._               |
| `owner_private_key` | _Private key of the `enforce_owner_id`._                  |
| `nft_contract`      | _NFT contract that the token being transferred is on._    |

_**Note:** Use [`near login`](https://docs.near.org/docs/tools/near-cli#near-login) to save your key pair to your local machine._

Example:

```json
{
  "token_id": "EXAMPLE-TOKEN",
  "receiver_id": "receiver.testnet",
  "enforce_owner_id": "example.testnet",
  "memo": "Here's a token I thought you might like! :)",
  "owner_private_key": "YOUR_PRIVATE_KEY",
  "contract": "nft.example.near"
}
```

Example Response:

```json
{
  "owner_id": "receiver.testnet",
  "metadata": "https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu",
  "approved_account_ids": [],
  "tx": "5WdNgmNeA5UNpSMDRXemwJc95MB6J22LcvAaimuN5YzF"
}
```

_(`tx` is the transaction hash that can be queried in [NEAR Explorer](http://explorer.testnet.near.org))_

---

### Simple Transfer NFTs

> _Requires [`/init`](#init) configuration with master account._

| Param              | Description                                               |
| ------------------ | --------------------------------------------------------- |
| `token_id`         | _Token ID of the token being transferred_                 |
| `receiver_id`      | _Account ID taking ownership of the NFT_                  |
| `enforce_owner_id` | _Account ID for the account that currently owns the NFT._ |
| `memo`             | _Optional message to new token holder._                   |

Example:

```json
{
  "token_id": "EXAMPLE-TOKEN",
  "receiver_id": "receiver.testnet",
  "enforce_owner_id": "example.testnet",
  "memo": "Here's a token I thought you might like! :)"
}
```

Example Response:

```json
{
  "owner_id": "receiver.testnet",
  "metadata": "https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu",
  "approved_account_ids": [],
  "tx": "5WdNgmNeA5UNpSMDRXemwJc95MB6J22LcvAaimuN5YzF"
}
```

_(`tx` is the transaction hash that can be queried in [NEAR Explorer](http://explorer.testnet.near.org))_

---

## `view_nft`

### Standard View NFT

> _Returns owner, metadata, and approved account IDs for a given token ID._

**Method:** **`POST`**

Example:

```json
{
  "token_id": "EXAMPLE-TOKEN",
  "contract": "nft.example.testnet"
}
```

Example response:

```json
{
  "owner_id": "example.testnet",
  "metadata": "https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu",
  "approved_account_ids": []
}
```

---

### Simple View NFT

> _Receive detailed information about NFT using URL params. Requires [`/init`](#init) configuration with master account._

**Method:** **`GET`**

Example:

`http://localhost:3000/view_nft/EXAMPLE-TOKEN`

Example Response:

```json
{
  "owner_id": "example.testnet",
  "metadata": "https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu",
  "approved_account_ids": []
}
```

---

## Faker data

> Use the following tags below to use random data for testing purposes.

- `{username}`
- `{number}`
- `{word}`
- `{words}`
- `{image}`
- `{color}`

## Video Presentation

[![Live App Review 15 - NFT Server Side API](https://img.youtube.com/vi/d71OscmH4cA/0.jpg)](https://youtu.be/d71OscmH4cA)

'''
'''--- near-api-rest-server/api.js ---
const CONFIG_PATH = './near-api-server.config.json';

module.exports = {
    CONFIG_PATH,

    reject: (err) => {
        return {error: typeof err === "string" ? err : JSON.stringify(err)};
    },
    notify: (message) => {
        return {text: message};
    },
    getNetworkFromRpcNode(rpc_node){
        return rpc_node.replace("https://rpc.", "").replace(".near.org", "");
    }
}

'''
'''--- near-api-rest-server/app.js ---
#!/usr/bin/env node

'use strict';
const user = require('./user');
const token = require('./token');
const blockchain = require('./blockchain');
const api = require('./api');
const faker = require('faker');
const crypto = require('crypto');
const CatboxMemory = require('@hapi/catbox-memory');
const Hapi = require('@hapi/hapi');
const fs = require('fs');
const {Client} = require('pg');
Client.poolSize = 100;

const settings = JSON.parse(fs.readFileSync(api.CONFIG_PATH, 'utf8'));
const ViewCacheExpirationInSeconds = 10;
const ViewGenerateTimeoutInSeconds = 30;

const init = async () => {
    const server = Hapi.server({
        port: settings.server_port,
        host: settings.server_host,
        cache: [
            {
                name: 'near-api-cache',
                provider: {
                    constructor: CatboxMemory
                }
            }
        ]
    });

    function processRequest(request) {
        Object.keys(request.payload).map((key) => {
            switch (request.payload[key]) {
                case '{username}':
                    request.payload[key] = faker.internet
                        .userName()
                        .replace(/[^0-9a-z]/gi, '');
                    break;
                case '{color}':
                    request.payload[key] = faker.internet.color();
                    break;
                case '{number}':
                    request.payload[key] = faker.random.number();
                    break;
                case '{word}':
                    request.payload[key] = faker.random.word();
                    break;
                case '{words}':
                    request.payload[key] = faker.random.words();
                    break;
                case '{image}':
                    request.payload[key] = faker.random.image();
                    break;
            }
        });

        return request;
    }

    server.route({
        method: 'GET',
        path: '/',
        handler: () => {
            return api.notify(
                'Welcome to NEAR REST API SERVER (https://github.com/near-examples/near-api-rest-server)! ' +
                (!settings.master_account_id
                    ? 'Please initialize your NEAR account in order to use simple nft mint/transfer methods'
                    : `Master Account: ${settings.master_account_id}`)
            );
        },
    });

    server.route({
        method: 'POST',
        path: '/view',
        handler: async (request, h) => {
            request = processRequest(request);

            if (request.payload.disabled_cache) {
                return blockchain.View(
                    request.payload.contract,
                    request.payload.method,
                    request.payload.params,
                    request.payload.rpc_node,
                    request.payload.headers
                );
            } else {
                request.payload.request_name = "view";
                return replyCachedValue(h, await server.methods.view(request.payload));
            }
        }
    });

    server.method(
        'view',
        async (params) => blockchain.View(
            params.contract,
            params.method,
            params.params,
            params.rpc_node,
            params.headers
        ),
        getServerMethodParams());

    server.route({
        method: 'POST',
        path: '/call',
        handler: async (request) => {
            request = processRequest(request);
            let {
                account_id,
                private_key,
                attached_tokens,
                attached_gas,
                contract,
                method,
                params,
                network,
                rpc_node,
                headers
            } = request.payload;
            return await blockchain.Call(
                account_id,
                private_key,
                attached_tokens,
                attached_gas,
                contract,
                method,
                params,
                network,
                rpc_node,
                headers
            );
        },
    });

    server.route({
        method: 'POST',
        path: '/init',
        handler: async (request) => {
            if (settings.init_disabled) {
                return api.reject('Method now allowed');
            }

            request = processRequest(request);
            let {
                master_account_id,
                seed_phrase,
                private_key,
                nft_contract,
                server_host,
                server_port,
                rpc_node,
            } = request.payload;

            if (seed_phrase)
                private_key = (await user.GetKeysFromSeedPhrase(seed_phrase)).secretKey;

            let response = await blockchain.Init(
                master_account_id,
                private_key,
                nft_contract,
                server_host,
                server_port,
                rpc_node
            );
            if (!response.error) {
                process.on('SIGINT', function () {
                    console.log('Stopping server...');
                    server.stop({timeout: 1000}).then(async function () {
                        await server.start();
                    });
                });
            }

            return response;
        },
    });

    server.route({
        method: 'POST',
        path: '/deploy',
        handler: async (request) => {
            request = processRequest(request);
            let {account_id, private_key, seed_phrase, contract} = request.payload;

            if (seed_phrase)
                private_key = (await user.GetKeysFromSeedPhrase(seed_phrase)).secretKey;

            return await blockchain.DeployContract(account_id, private_key, contract);
        },
    });

    server.route({
        method: 'GET',
        path: '/view_nft/{token_id}',
        handler: async (request, h) => {
            request.params.request_name = "view_nft";
            return replyCachedValue(h, await server.methods.viewNFT(request.params));
        },
    });

    server.method(
        'viewNFT',
        async (params) => await token.ViewNFT(params.token_id),
        getServerMethodParams());

    server.route({
        method: 'POST',
        path: '/view_nft',
        handler: async (request) => {
            return await token.ViewNFT(
                request.payload.token_id,
                request.payload.contract
            );
        },
    });

    server.route({
        method: 'POST',
        path: '/create_user',
        handler: async (request) => {
            request = processRequest(request);

            const name = (
                request.payload.name +
                '.' +
                settings.master_account_id
            ).toLowerCase();
            let account = await user.CreateKeyPair(name);

            let status = await user.CreateAccount(account);

            if (status)
                return {
                    text: `Account ${name} created. Public key: ${account.public_key}`,
                };
            else return {text: 'Error'};
        },
    });

    server.route({
        method: 'POST',
        path: '/parse_seed_phrase',
        handler: async (request) => {
            request = processRequest(request);

            return await user.GetKeysFromSeedPhrase(request.payload.seed_phrase);
        },
    });

    server.route({
        method: 'GET',
        path: '/balance/{account_id}',
        handler: async (request) => {
            return await blockchain.GetBalance(request.params.account_id);
        }
    });

    server.route({
        method: 'GET',
        path: '/keypair',
        handler: async () => {
            return await user.GenerateKeyPair();
        }
    });

    server.route({
        method: 'POST',
        path: '/mint_nft',
        handler: async (request) => {
            let {min, max} = request.payload;

            if (!min || !max) min = max = 0;
            let response = [];

            request = processRequest(request);
            for (let i = min; i <= max; i++) {
                const tokenId = request.payload.token_id.replace('{inc}', i);

                let {account_id, private_key, metadata, contract} = request.payload;

                const tx = await token.MintNFT(
                    tokenId,
                    metadata,
                    contract,
                    account_id,
                    private_key
                );

                if (tx) {
                    if (min === max) {
                        let create_token = await token.ViewNFT(tokenId, contract);
                        create_token.token_id = tokenId;
                        response.push({token: create_token, tx: tx});
                    } else {
                        response.push({tx: tx});
                    }
                } else {
                    response.push({text: 'Error. Check backend logs.'});
                }
            }

            return response;
        },
    });

    server.route({
        method: 'POST',
        path: '/transfer_nft',
        handler: async (request) => {
            request = processRequest(request);

            let {
                token_id,
                receiver_id,
                enforce_owner_id,
                memo,
                contract,
                owner_private_key,
            } = request.payload;

            const txStatus = await token.TransferNFT(
                token_id,
                receiver_id,
                enforce_owner_id,
                memo,
                contract,
                owner_private_key
            );

            if (txStatus.error) {
                return txStatus;
            } else if (txStatus.status.Failure) {
                return {
                    error:
                        'Because of some reason transaction was not applied as expected',
                };
            } else {
                const new_token = await token.ViewNFT(token_id, contract);
                if (!new_token) return api.reject('Token not found');

                new_token.tx = txStatus.transaction.hash;
                return new_token;
            }
        },
    });

    server.route({
        method: 'GET',
        path: '/about',
        handler: async () => {
            const json = require('./package.json');
            return "NEAR REST API SERVER Ver. " + json.version;
        }
    });

    server.route({
        method: 'POST',
        path: '/explorer',
        handler: async (request) => {
            let {
                user,
                host,
                database,
                password,
                port,
                query,
                parameters
            } = request.payload;

            const client = new Client({
                user,
                host,
                database,
                password,
                port,
            });

            if (["104.199.89.51", "35.184.214.98"].includes(host)) {
                return api.reject('Please run explorer function only on your own NEAR REST API SERVER instance, https://github.com/near-examples/near-api-rest-server');
            }

            try {
                client.connect();
                let response = await client.query(query, parameters);
                return response.rows;
            } catch (ex) {
                return api.reject('Error. ' + ex.message);
            }
        },
    });

    server.route({
        method: 'POST',
        path: '/sign_url',
        handler: async (request) => {
            let {
                account_id,
                method,
                params,
                deposit,
                gas,
                receiver_id,
                meta,
                callback_url,
                network
            } = request.payload;

            return blockchain.GetSignUrl(
                account_id,
                method,
                params,
                deposit,
                gas,
                receiver_id,
                meta,
                callback_url,
                network
            );
        },
    });

    await server.start();
    console.log('Server running on %s', server.info.uri);
};

process.on('unhandledRejection', (err) => {
    console.log(err);
    process.exit(1);
});

const getServerMethodParams = () => {
    return {
        generateKey: (params) => {
            let hash = crypto.createHash('sha1');
            hash.update(JSON.stringify(params));
            return hash.digest('base64');
        },
        cache: {
            cache: 'near-api-cache',
            expiresIn: ViewCacheExpirationInSeconds * 1000,
            generateTimeout: ViewGenerateTimeoutInSeconds * 1000,
            getDecoratedValue: true
        }
    }
};

const replyCachedValue = (h, {value, cached}) => {
    const lastModified = cached ? new Date(cached.stored) : new Date();
    return h.response(value).header('Last-Modified', lastModified.toUTCString());
};

init();

'''
'''--- near-api-rest-server/blockchain.js ---
const nearApi = require('near-api-js');
const api = require('./api');
const fs = require('fs');
const fetch = require('node-fetch');
const {getNetworkFromRpcNode} = require("./api");

const settings = JSON.parse(fs.readFileSync(api.CONFIG_PATH, 'utf8'));

module.exports = {
    /**
     * @return {string}
     */
    GetSignUrl: async function (account_id, method, params, deposit, gas, receiver_id, meta, callback_url, network) {
        try {
            if(!network)
                network = "mainnet";
            const deposit_value = typeof deposit == 'string' ? deposit : nearApi.utils.format.parseNearAmount('' + deposit);
            const actions = [method === '!transfer' ? nearApi.transactions.transfer(deposit_value) : nearApi.transactions.functionCall(method, Buffer.from(JSON.stringify(params)), gas, deposit_value)];
            const keypair = nearApi.utils.KeyPair.fromRandom('ed25519');
            const provider = new nearApi.providers.JsonRpcProvider({url: 'https://rpc.' + network + '.near.org'});
            const block = await provider.block({finality: 'final'});
            const txs = [nearApi.transactions.createTransaction(account_id, keypair.publicKey, receiver_id, 1, actions, nearApi.utils.serialize.base_decode(block.header.hash))];
            const newUrl = new URL('sign', 'https://wallet.' + network + '.near.org/');
            newUrl.searchParams.set('transactions', txs.map(transaction => nearApi.utils.serialize.serialize(nearApi.transactions.SCHEMA, transaction)).map(serialized => Buffer.from(serialized).toString('base64')).join(','));
            newUrl.searchParams.set('callbackUrl', callback_url);
            if (meta)
                newUrl.searchParams.set('meta', meta);
            return newUrl.href;
        } catch (e) {
            return api.reject(e);
        }
    },

    /**
     * @return {string}
     */
    View: async function (recipient, method, params, rpc_node, headers) {
        try {
            let rpc = rpc_node || settings.rpc_node;
            const nearRpc = new nearApi.providers.JsonRpcProvider({url: rpc});

            const account = new nearApi.Account({
                    provider: nearRpc,
                    networkId: getNetworkFromRpcNode(rpc),
                    signer: recipient,
                    headers: (typeof headers !== undefined) ? headers : {}
                },
                recipient);
            return await account.viewFunction(
                recipient,
                method,
                params
            );
        } catch (e) {
            return api.reject(e);
        }
    },

    Init: async function (master_account_id, master_key, nft_contract, server_host, server_port, rpc_node) {
        try {
            const new_settings = settings;
            if (master_account_id) new_settings.master_account_id = master_account_id;
            if (master_key) new_settings.master_key = master_key;
            if (nft_contract) new_settings.nft_contract = nft_contract;
            if (server_host) new_settings.server_host = server_host;
            if (server_port) new_settings.server_port = server_port;
            if (rpc_node) new_settings.rpc_node = rpc_node;

            await fs.promises.writeFile(api.CONFIG_PATH, JSON.stringify({
                ...new_settings
            }));

            return api.notify("Settings updated.");
        } catch (e) {
            return api.reject(e);
        }
    },

    GetBalance: async function (account_id) {
        try {
            const body = {
                jsonrpc: '2.0',
                id: "dontcare",
                method: "query",
                params: {
                    request_type: "view_account",
                    finality: "final",
                    account_id: account_id
                }
            };

            return fetch(settings.rpc_node, {
                method: 'post',
                body: JSON.stringify(body),
                headers: {'Content-Type': 'application/json'}
            })
                .then(res => res.json())
                .then(json => {
                    if (json.error)
                        return api.reject(json.error.data);

                    return json.result.amount
                });
        } catch (e) {
            return api.reject(e);
        }
    },

    DeployContract: async function (account_id, private_key, contract_file) {
        try {
            const path = `contracts/${contract_file}`;
            if (!fs.existsSync(path))
                return api.reject("Contract not found");

            const account = await this.GetAccountByKey(account_id, private_key);

            const data = [...fs.readFileSync(path)];
            const txs = [nearApi.transactions.deployContract(data)];

            let res = await account.signAndSendTransaction(account_id, txs);

            if (contract_file === "nft_simple.wasm")
                await this.Call(account_id, private_key, 0, "100000000000000",
                    account_id, "new", {"owner_id": account_id});

            return res;
        } catch (e) {
            return api.reject(e);
        }
    },

    Call: async function (account_id, private_key, attached_tokens, attached_gas, recipient, method, params, network, rpc_node, headers) {
        try {
            const account = await this.GetAccountByKey(account_id, private_key, network, rpc_node, headers);

            return await account.functionCall({
                contractId: recipient,
                methodName: method,
                args: params,
                gas: attached_gas,
                attachedDeposit: attached_tokens
            });
        } catch (e) {
            return api.reject(e);
        }
    },

    GetMasterAccount: async function () {
        try {
            const keyPair = nearApi.utils.KeyPair.fromString(settings.master_key);
            const keyStore = new nearApi.keyStores.InMemoryKeyStore();
            keyStore.setKey("testnet", settings.master_account_id, keyPair);

            const near = await nearApi.connect({
                networkId: "testnet",
                deps: {keyStore},
                masterAccount: settings.master_account_id,
                nodeUrl: settings.rpc_node
            });

            return await near.account(settings.master_account_id);
        } catch (e) {
            return api.reject(e);
        }
    },

    GetUserAccount: async function (accountId) {
        try {
            const user = require('./user');

            const account_raw = await user.GetAccount(accountId);
            const account = JSON.parse(account_raw);

            const keyPair = nearApi.utils.KeyPair.fromString(account.private_key);
            const keyStore = new nearApi.keyStores.InMemoryKeyStore();
            keyStore.setKey("testnet", account.account_id, keyPair);

            const near = await nearApi.connect({
                networkId: "testnet",
                deps: {keyStore},
                masterAccount: account.account_id,
                nodeUrl: settings.rpc_node
            });

            return await near.account(account.account_id);
        } catch (e) {
            return api.reject(e);
        }
    },

    GetAccountByKey: async function (account_id, private_key, network, rpc_node, headers) {
        try {
            network = network || "testnet";
            rpc_node = rpc_node || settings.rpc_node;

            private_key = private_key.replace('"', '');

            const keyPair = nearApi.utils.KeyPair.fromString(private_key);
            const keyStore = new nearApi.keyStores.InMemoryKeyStore();
            keyStore.setKey(network, account_id, keyPair);

            const near = await nearApi.connect({
                networkId: network,
                deps: {keyStore},
                masterAccount: account_id,
                nodeUrl: rpc_node,
                headers: (typeof headers !== undefined) ? headers : {}
            });

            return await near.account(account_id);
        } catch (e) {
            return api.reject(e);
        }
    }
};

'''
'''--- near-api-rest-server/examples/nft_deploy/deploy_tokens.js ---
const {data} = require('./token_types.js');
const homedir = require("os").homedir();
const path = require("path");
const fs = require("fs");
const fetch = require("node-fetch");

const API_SERVER_URL = "https://rest.nearapi.org";
const CONTRACT_ID = "dev-1621541447792-38210652756946";
const ACCOUNT_ID = "zavodil.testnet";
const CREDENTIALS_DIR = ".near-credentials/testnet/";

const run = async () => {
    const tokens = data.map(({token_type, metadata}, i) => {
        return {
            token_type,
            token_id: token_type + '_1',
            metadata: {
                ...metadata,
                issued_at: Date.now().toString(),
            },
            perpetual_royalties: {
                ['escrow-' + (i + 1) + '.nft.near']: 1000, //10%
                "account-2.near": 500, // 5%
                "account-3.near": 100 // 1%
            }
        }
    });
    
    // initial add_token_types: 100 tokens of each type
    const supply_cap_by_type = tokens.map(({token_type}) => ({
        [token_type]: '100'
    })).reduce((a, c) => ({...a, ...c}), {});

    let tx = await init(CONTRACT_ID, supply_cap_by_type);
    console.log(tx);

    // initial mint 1 token of every type
    for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];
        tx = await mint(CONTRACT_ID, token);
        console.log(tx)
    }
    return "Finish"
};

const init = async function (contract, supply_cap_by_type) {
    const body = {
        method: 'new',
        contract: contract,

        params: {
            owner_id: ACCOUNT_ID,
            metadata: {
                "spec": "nft-1",
                "name": "NAME",
                "symbol": "NFT"
            },
            unlocked: true,
            supply_cap_by_type: supply_cap_by_type,
        },

        account_id: ACCOUNT_ID,
        private_key: await getPrivateKey(ACCOUNT_ID),
        attached_gas: "300000000000000",
        attached_tokens: ""
    };

    return await PostResponse("call", body);
};

const mint = async function (contract, token) {
    const body = {
        method: 'nft_mint',
        contract: contract,

        params: {
            token_id: token.token_id,
            metadata: token.metadata,
            perpetual_royalties: token.perpetual_royalties,
            token_type: token.token_type,
        },

        account_id: ACCOUNT_ID,
        private_key: await getPrivateKey(ACCOUNT_ID),
        attached_gas: "100000000000000",
        attached_tokens: "20000000000000000000000"
    };

    return await PostResponse("call", body);
};

const PostResponse = async (operation, body, options) => {
    const response = fetch(`${API_SERVER_URL}/${operation}`, {
        method: 'POST',
        body: JSON.stringify(body),
        headers: {
            'Content-type': 'application/json; charset=UTF-8'
        }
    })
        .then(res => {
            return res.text().then(response => {
                if (options && options.convertToNear) {
                    return module.exports.RoundFloat(module.exports.ConvertYoctoNear(response, config.FRACTION_DIGITS));
                } else {
                    try {
                        const json = JSON.parse(response);
                        try {
                            if (json.error)
                                return (JSON.parse(json.error));
                            else {
                                return (json);
                            }
                        } catch (e) {
                            throw new Error("PostResponse error for " + operation + " request " + JSON.stringify(body) + ". Error: " + e.message);
                        }
                    } catch {
                        return response;
                    }
                }
            });

        });
    return response;
};

const getPrivateKey = async (accountId) => {
    const credentialsPath = path.join(homedir, CREDENTIALS_DIR);
    const keyPath = credentialsPath + accountId + '.json';
    try {
        const credentials = JSON.parse(fs.readFileSync(keyPath));
        return (credentials.private_key);
    } catch (e) {
        throw new Error("Key not found for account " + keyPath + ". Error: " + e.message);
    }
};

run().then(r => console.log(r));
'''
'''--- near-api-rest-server/examples/nft_deploy/token_types.js ---
const prefix = "test";
module.exports = {
    data: [
        {
            token_type: prefix + '_name_1',
            metadata: {media: 'hash_1'}
        },
        {
            token_type: prefix + '_name_2',
            metadata: {media: 'hash_2'}
        },
        {
            token_type: prefix + '_name_3',
            metadata: {media: 'hash_3'}
        },
    ]
};
'''
'''--- near-api-rest-server/near-api-ui/README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `yarn start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `yarn test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `yarn build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `yarn eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `yarn build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- near-api-rest-server/near-api-ui/package.json ---
{
  "name": "near-api-ui",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "export NODE_ENV=mainnet && rm -r mainnet && parcel build src/index.html --public-url ./ && mv dist mainnet",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "export PORT=39106 && echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "export PORT=39106 && nodemon --watch contract/src -e rs --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand",
    "build:web:testnet": "export NODE_ENV=testnet && rm -rf testnet && parcel build src/index.html --public-url ./ && mv dist testnet",
    "build:contract:testnet": "export NODE_ENV=testnet && node contract/compile.js",
    "deploy:contract:testnet": "export NODE_ENV=testnet && near deploy",
    "build:web:all": "export NODE_ENV=mainnet && rm -r mainnet && parcel build src/index.html --public-url ./ && mv dist mainnet && export NODE_ENV=testnet && rm -r testnet && parcel build src/index.html --public-url ./ && mv dist testnet",
    "dev:clear": "rm -r neardev"
  },
  "devDependencies": {
    "@babel/core": "~7.12.3",
    "@babel/preset-env": "~7.12.1",
    "@babel/preset-react": "~7.12.5",
    "babel-jest": "~26.6.2",
    "bn.js": "^5.1.1",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-api-js": "~0.36.2",
    "near-cli": "~2.0.0",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "react-file-reader": "~1.1.4",
    "react-test-renderer": "~17.0.1",
    "react-tooltip": "~4.2.11",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "json-url": "^3.0.0",
    "query-string": "^4.3.4",
    "react": "~17.0.1",
    "react-dom": "~17.0.1",
    "react-json-view": "~1.21.3",
    "regenerator-runtime": "~0.13.5"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- near-api-rest-server/near-api-ui/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- near-api-rest-server/near-api-ui/public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- near-api-rest-server/near-api-ui/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- near-api-rest-server/near-api-ui/src/App.css ---
body {
  margin: 0;
  padding: 0;
  font-family: BwSeidoRound, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
  'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
  sans-serif;
}

.App {

}

.hidden{
  display: none;
}

.option-buttons{
  padding-top: 10px;
}

.option-buttons input{
  margin: 0 5px;
}

.error{
  color: red;
}

.error, .processed{
  padding-bottom: 10px;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.input-query{
  width: 700px;
  font-size: larger;
}

.query-options{
  display: block;
  width: 700px
}

.button-query{
  font-size: larger;
}

h1{
  margin: 5px 0;
}

h1 a, h1 a:hover, h1 a:visited{
  text-decoration: none;
  color: #000;
}

.github-hint{
  padding: 10px 0 0 20px;
  color: rgba(0, 0, 0, 0.8);
}

.json-response{
  display: inline-block;
  padding-left: 20px;
}

@font-face {
  font-family: BwSeidoRound;
  src: url(./fonts/389947_6_0.eot);
  src: url(./fonts/389947_6_0.eot?#iefix) format("embedded-opentype"), url(./fonts/389947_6_0.woff2) format("woff2"), url(./fonts/389947_6_0.woff) format("woff"), url(./fonts/389947_6_0.ttf) format("truetype");
  font-weight: 500;
  font-style: normal
}

'''
'''--- near-api-rest-server/near-api-ui/src/App.js ---
import 'regenerator-runtime/runtime'
import React, {useState} from 'react';
import {login, logout} from './utils'
import './App.css';
import * as nearAPI from 'near-api-js'
import ReactJson from 'react-json-view'

const codec = require('json-url')('lzw');
const queryString = require('query-string');

import {API_SERVER_URL, MAINNET_RPC} from './config'

function App() {
    const [processing, setProcessing] = useState(false);
    const [processedTime, setProcessedTime] = useState(0);
    const [errorFlag, setErrorFlag] = useState(false);
    const [signedIn, setSignedIn] = useState(false);
    const [gasAttached, setGasAttached] = useState("100000000000000");
    const [tokensAttached, setTokensAttached] = useState("1000000000000000000000000");
    const [showCallOptions, setShowCallOptions] = useState(false);
    const [request, setRequest] = useState("near view lunanova.pool.f863973.m0 get_accounts '{\"from_index\": 0, \"limit\": 100}'");
    const [response, setResponse] = useState({});
    const [viewNetworkTestnet, setViewNetworkTestnet] = useState(true);
    const [viewNetworkDisabled, setViewNetworkDisabled] = useState(false);

    let firstLoad = true;

    const _handleKeyDown = function (e) {
        if (e.key === 'Enter') {
            _sendForm()
        }
    }

    const _sendForm = async () => {
        try {

            const call = request.toLowerCase().split(/('.*?'|".*?"|\S+)/g);

            if (
                !(call[1] || call[3] || call[5]) ||
                call[1] !== 'near' ||
                !['view', 'call'].includes(call[3])) {
                setResponse({error: "Illegal command"});
            } else if (call[3] === 'call' && !signedIn) {
                setResponse({error: "Sign In to send call requests"});
            } else {
                if (!call[9])
                    call[9] = "{}";

                let params;
                try {
                    params = JSON.parse(call[9].replaceAll("'", ""));
                } catch (e) {
                    console.error("Invalid Params");
                    params = "{}";
                }

                let body = {
                    contract: call[5],
                    method: call[7],
                    params: params
                };

                if (call[3] === 'call') {
                    const private_key = window.walletConnection._keyStore.localStorage[`near-api-js:keystore:${window.accountId}:testnet`];
                    if (!private_key) {
                        setResponse({error: "Key wasn't found to sign call request"});
                        return;
                    }

                    body = {
                        ...body,
                        account_id: window.accountId,
                        private_key: private_key,
                        attached_gas: gasAttached,
                        attached_tokens: tokensAttached,
                    }
                } else {
                    if (!viewNetworkTestnet)
                        body = {
                            ...body,
                            rpc_node: MAINNET_RPC
                        }

                    SetViewQueryUrl(body);
                }

                await GetResponseFromNear(call[3], body);

            }
        } catch (err) {
            setResponse({error: "Illegal query"});
            console.log(err);
        }
    }

    const GetResponseFromNear = async (method, body) => {
        console.log("GetResponseFromNear")
        const t0 = performance.now();
        setProcessing(true);

        return await fetch(`${API_SERVER_URL}/${method}`, {
            method: 'POST',
            body: JSON.stringify(body),
            headers: {
                'Content-type': 'application/json; charset=UTF-8'
            }
        })
            .then(res => res.json())
            .then(res => {
                if (res.error)
                    setResponse(JSON.parse(res.error));
                else
                    setResponse(res);

                setProcessing(false)
                setErrorFlag(!!res.error);
                setProcessedTime(Math.round((performance.now() - t0) / 10) / 100);
            })
    };

    React.useEffect(
        async () => {
            if (window.walletConnection.isSignedIn()) {
                setSignedIn(true)
            }

            if (firstLoad && location.search) {
                const query = JSON.parse(JSON.stringify(queryString.parse(location.search)));
                if (query && query.hasOwnProperty("q")) {
                    codec.decompress(query.q).then(async (json) => {
                        console.log("Loading url query...");
                        console.log(json);
                        console.log(`near view ${json.contract} ${json.method} '${JSON.stringify(json.params)}'`);
                        setRequest(`near view ${json.contract} ${json.method} '${JSON.stringify(json.params)}'`);
                        setViewNetworkTestnet(json.rpc_node !== MAINNET_RPC);
                        await GetResponseFromNear("view", json);
                    });
                }
            }

            firstLoad = false;
        },
        []
    );

    React.useEffect(() => {
        const timeOutId = setTimeout(() => UpdateQuery(request), 500);
        return () => clearTimeout(timeOutId);
    }, [request]);

    const SetViewQueryUrl = (request) => {
        codec.compress(request).then(compressed_string => {
            const url = location.protocol + '//' + location.host + location.pathname + '?q=' + compressed_string;
            window.history.replaceState({}, document.title, url);
            console.log(url)
        });
    }

    const SignButton = () => {
        return (signedIn ?
                <div>{window.accountId}&nbsp;
                    <button onClick={logout}>Sign out</button>
                </div>
                : <button onClick={login}>Sign in</button>

        )
    }

    const JsonOutput = () => {
        if(!response || (IsObject(response) && !Object.keys(response).length))
            return  null;

        return IsObject(response)
            ? <ReactJson src={response}/>
            : <pre>{response}</pre>;
    };

    const IsObject = (obj) => {
        return obj !== undefined && obj !== null && typeof obj == 'object';
    }

    const UpdateQuery = (query) => {
        query = query.toLowerCase();
        const isCall = query.startsWith("near call");
        setShowCallOptions(isCall);
        setViewNetworkDisabled(isCall);
        if (isCall)
            setViewNetworkTestnet(true);
    };

    return (
        <div className="App">

            <div style={{position: "absolute", top: 10, right: 10}}>
                <SignButton/>
            </div>

            <div style={{padding: "20px 0 10px 20px"}}>
                <div>
                    <div>
                        <h1><a href="//web.nearapi.org">NEAR REST API Web</a></h1>
                    </div>
                    <div className="query-options">
                        <div style={{display: "inline-block"}}>Query</div>
                        <div style={{float: "right", display: "inline-block"}}>Network:

                            <input type="checkbox" disabled={viewNetworkDisabled}
                                   checked={viewNetworkTestnet}
                                   onChange={(e) => {
                                       setViewNetworkTestnet(e.target.checked)
                                   }}/>
                            Testnet
                        </div>
                    </div>

                    <div>
                        <input spellCheck="false" type="text" name="query"
                               className="input-query" onKeyDown={_handleKeyDown}
                               value={request} onChange={e => setRequest(e.target.value)}
                        />
                        <button onClick={_sendForm} disabled={processing} className="button-query">
                            {processing ? "Processing" : "Send"}
                        </button>
                    </div>
                </div>

                <div className={showCallOptions ? "option-buttons" : "hidden"}>
                    Gas Attached
                    <input spellCheck="false" style={{width: "150px"}} type="text" name="gas"
                           defaultValue={gasAttached} onChange={e => setGasAttached(e.target.value)}
                    />

                    Tokens Attached
                    <input spellCheck="false" style={{width: "200px"}} type="text" name="tokens"
                           defaultValue={tokensAttached} onChange={e => setTokensAttached(e.target.value)}
                    />
                </div>
            </div>

            <div className="json-response">
                {errorFlag
                    ? <div className="error">ERROR!</div>
                    : (processedTime
                        ? <div className="processed">Process time: {processedTime} seconds</div>
                        : null)
                }
                <JsonOutput/>
            </div>
            <div className="github-hint">
                <span>Interact with the NEAR blockchain using a simple REST API. </span>
                <a href="https://github.com/near-examples/near-rest-api-server">Github</a>
            </div>

        </div>
    );
}

export default App;

'''
'''--- near-api-rest-server/near-api-ui/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- near-api-rest-server/near-api-ui/src/assets/explorer-bg.svg ---
<svg width="504" height="324" viewBox="0 0 504 324" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M180 0H216V36H180V0Z" fill="#F2F2F2"/>
<path d="M288 0H324V36H288V0Z" fill="#F2F2F2"/>
<path d="M252 0H288V36H252V0Z" fill="#F2F2F2"/>
<path d="M216 0H252V36H216V0Z" fill="#F2F2F2"/>
<path d="M180 36H216V72H180V36Z" fill="#F2F2F2"/>
<path d="M144 72H180V108H144V72Z" fill="#F2F2F2"/>
<path d="M252 72H288V108H252V72Z" fill="#F2F2F2"/>
<path d="M252 36H288V72H252V36Z" fill="#F2F2F2"/>
<path d="M216 72H252V108H216V72Z" fill="#F2F2F2"/>
<path d="M180 108H216V144H180V108Z" fill="#F2F2F2"/>
<path d="M144 144H180V180H144V144Z" fill="#F2F2F2"/>
<path d="M144 36H180V72H144V36Z" fill="#F2F2F2"/>
<path d="M252 144H288V180H252V144Z" fill="#F2F2F2"/>
<path d="M252 108H288V144H252V108Z" fill="#F2F2F2"/>
<path d="M216 144H252V180H216V144Z" fill="#F2F2F2"/>
<path d="M180 180H216V216H180V180Z" fill="#F2F2F2"/>
<path d="M144 216H180V252H144V216Z" fill="#F2F2F2"/>
<path d="M144 108H180V144H144V108Z" fill="#F2F2F2"/>
<path d="M468 72H504V108H468V72Z" fill="#F2F2F2"/>
<path d="M432 0H468V36H432V0Z" fill="#F2F2F2"/>
<path opacity="0.25" d="M432 180H468V216H432V180Z" fill="#F2F2F2"/>
<path d="M288 216H324V252H288V216Z" fill="#F2F2F2"/>
<path d="M216 288H252V324H216V288Z" fill="#F2F2F2"/>
<path d="M216 180H252V216H216V180Z" fill="#F2F2F2"/>
<path d="M468 0H504V36H468V0Z" fill="#999999"/>
<path d="M432 36H468V72H432V36Z" fill="#E6E6E6"/>
<path d="M396 72H432V108H396V72Z" fill="#F2F2F2"/>
<path opacity="0.25" d="M360 108H396V144H360V108Z" fill="#E6E6E6"/>
<path d="M432 72H504V108H432V72Z" fill="#E6E6E6"/>
<path d="M360 0H396V72H360V0Z" fill="#E6E6E6"/>
<path d="M324 36H360V72H324V36Z" fill="#E6E6E6"/>
<path d="M288 72H324V108H288V72Z" fill="#F2F2F2"/>
<path d="M252 108H288V144H252V108Z" fill="#F2F2F2"/>
<path d="M216 144H252V180H216V144Z" fill="#F2F2F2"/>
<path d="M216 36H252V72H216V36Z" fill="#F2F2F2"/>
<path opacity="0.25" d="M324 144H360V180H324V144Z" fill="#F2F2F2"/>
<path opacity="0.25" d="M396 144H432V180H396V144Z" fill="#F2F2F2"/>
<path opacity="0.25" d="M360 180H396V216H360V180Z" fill="#F2F2F2"/>
<path d="M288 144H324V180H288V144Z" fill="#F2F2F2"/>
<path d="M252 180H288V216H252V180Z" fill="#F2F2F2"/>
<path d="M216 216H252V252H216V216Z" fill="#F2F2F2"/>
<path d="M180 252H216V288H180V252Z" fill="#F2F2F2"/>
<path d="M180 144H216V180H180V144Z" fill="#F2F2F2"/>
<path d="M432 0H468V36H432V0Z" fill="#CCCCCC"/>
<path d="M396 36H432V72H396V36Z" fill="#CCCCCC"/>
<path d="M0 0H36V36H0V0Z" fill="#F2F2F2"/>
<path d="M108 0H144V36H108V0Z" fill="#F2F2F2"/>
<path d="M108 0H144V36H108V0Z" fill="#F2F2F2"/>
<path d="M72 36H108V72H72V36Z" fill="#F2F2F2"/>
<path d="M36 72H72V108H36V72Z" fill="#F2F2F2"/>
<path d="M144 36H180V108H144V36Z" fill="#F2F2F2"/>
<path d="M180 36H216V72H180V36Z" fill="#F2F2F2"/>
<path d="M144 72H180V108H144V72Z" fill="#F2F2F2"/>
<path d="M108 108H144V144H108V108Z" fill="#F2F2F2"/>
<path d="M72 144H108V180H72V144Z" fill="#F2F2F2"/>
<path d="M180 108H216V180H180V108Z" fill="#F2F2F2"/>
<path d="M108 72H144V108H108V72Z" fill="#F2F2F2"/>
<path d="M72 108H108V144H72V108Z" fill="#F2F2F2"/>
<path d="M36 144H72V180H36V144Z" fill="#F2F2F2"/>
<path d="M0 180H36V216H0V180Z" fill="#F2F2F2"/>
<path d="M108 180H144V216H108V180Z" fill="#F2F2F2"/>
<path d="M144 144H180V180H144V144Z" fill="#F2F2F2"/>
<path d="M108 180H144V216H108V180Z" fill="#F2F2F2"/>
<path d="M72 216H108V252H72V216Z" fill="#F2F2F2"/>
<path d="M36 252H72V288H36V252Z" fill="#F2F2F2"/>
<path d="M144 216H180V288H144V216Z" fill="#F2F2F2"/>
<path d="M36 144H72V216H36V144Z" fill="#F2F2F2"/>
<path d="M324 0H360V36H324V0Z" fill="#F2F2F2"/>
<path d="M288 36H324V72H288V36Z" fill="#F2F2F2"/>
<path d="M252 72H288V108H252V72Z" fill="#F2F2F2"/>
<path d="M360 72H396V108H360V72Z" fill="#F2F2F2"/>
</svg>
'''
'''--- near-api-rest-server/near-api-ui/src/assets/icon-network-right.svg ---
<svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0)">
<path d="M3 6C4.26343 4.70768 5.85571 4 7.5 4C9.14429 4 10.7366 4.70768 12 6" stroke="#A5A5A5" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M0.887573 3.74993C2.71409 2.13991 5.06526 1.25159 7.50007 1.25159C9.93489 1.25159 12.2861 2.13991 14.1126 3.74993" stroke="#A5A5A5" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M8.91421 7.08579C9.69526 7.86683 9.69526 9.13316 8.91421 9.91421C8.13316 10.6953 6.86683 10.6953 6.08579 9.91421C5.30474 9.13316 5.30474 7.86683 6.08579 7.08579C6.86683 6.30474 8.13316 6.30474 8.91421 7.08579Z" stroke="#A5A5A5" stroke-linecap="round" stroke-linejoin="round"/>
<line x1="7.5" y1="10.5" x2="7.5" y2="14.5" stroke="#A5A5A5" stroke-linecap="round"/>
</g>
<defs>
<clipPath id="clip0">
<rect width="15" height="15" fill="white"/>
</clipPath>
</defs>
</svg>
'''
'''--- near-api-rest-server/near-api-ui/src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- near-api-rest-server/near-api-ui/src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- near-api-rest-server/near-api-ui/src/assets/logo.svg ---
<svg enable-background="new 0 0 342 90" viewBox="0 0 342 90" xmlns="http://www.w3.org/2000/svg"><path d="m171.2 18.8v52.5c0 .4-.3.8-.8.8h-5.5c-2.5 0-4.9-1.3-6.3-3.4l-24.8-38.3.8 19.1v21.9c0 .4-.3.8-.8.8h-7.2c-.4 0-.8-.3-.8-.8v-52.6c0-.4.3-.8.8-.8h5.4c2.5 0 4.9 1.3 6.3 3.4l24.8 38.2-.8-19.1v-21.7c0-.4.3-.8.8-.8h7.2c.6 0 .9.3.9.8z"/><path d="m245 72h-7.6c-.5 0-.9-.5-.7-1l20.2-52.3c.2-.4.6-.7 1-.7h9.6c.5 0 .9.3 1 .7l20.3 52.3c.2.5-.2 1-.7 1h-7.6c-.3 0-.6-.2-.7-.5l-16.3-43c-.2-.6-1.2-.6-1.4 0l-16.3 43c-.2.3-.5.5-.8.5z"/><path d="m341.8 70.8-15.2-19.4c8.6-1.6 13.6-7.4 13.6-16.3 0-10.2-6.6-17.1-18.4-17.1h-21.2c-.6 0-1.1.5-1.1 1.1 0 4 3.2 7.2 7.2 7.2h14.3c7.1 0 10.5 3.6 10.5 8.9s-3.3 8.9-10.5 8.9h-20.2c-.6 0-1.1.5-1.1 1.1v26c0 .4.3.8.8.8h7.2c.4 0 .8-.3.8-.8v-19.3h8.3l13.2 17.2c1.4 1.9 3.6 2.9 6 2.9h5.5c.4 0 .7-.7.3-1.2z"/><path d="m222.2 18h-33.5c-.6 0-1 .4-1 1 0 4 3.3 7.3 7.3 7.3h27.2c.4 0 .8-.3.8-.8v-6.8c-.1-.4-.4-.7-.8-.7zm0 45.7h-25c-.4 0-.8-.3-.8-.8v-13.5c0-.4.3-.8.8-.8h23.1c.4 0 .8-.3.8-.8v-6.8c0-.4-.3-.8-.8-.8h-31.5c-.6 0-1.1.5-1.1 1.1v29.5c0 .6.5 1.1 1.1 1.1h33.4c.4 0 .8-.3.8-.8v-6.8c-.1-.3-.4-.6-.8-.6z"/><path d="m72.2 4.6-18.8 27.9c-1.3 1.9 1.2 4.2 3 2.6l18.5-16.1c.5-.4 1.2-.1 1.2.6v50.3c0 .7-.9 1-1.3.5l-56-67c-1.8-2.2-4.4-3.4-7.3-3.4h-2c-5.2 0-9.5 4.3-9.5 9.6v70.8c0 5.3 4.3 9.6 9.6 9.6 3.3 0 6.4-1.7 8.2-4.6l18.8-27.9c1.3-1.9-1.2-4.2-3-2.6l-18.5 16c-.5.4-1.2.1-1.2-.6v-50.2c0-.7.9-1 1.3-.5l56 67c1.8 2.2 4.5 3.4 7.3 3.4h2c5.3 0 9.6-4.3 9.6-9.6v-70.8c-.1-5.3-4.4-9.6-9.7-9.6-3.3 0-6.4 1.7-8.2 4.6z"/></svg>
'''
'''--- near-api-rest-server/near-api-ui/src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "null_address.testnet";

module.exports = {
    API_SERVER_URL: "https://rest.nearapi.org",
    MAINNET_RPC: "https://rpc.mainnet.near.org",
    getConfig: (env) => {
        switch (env) {

            case 'production':
            case 'mainnet':
                return {
                    networkId: 'mainnet',
                    nodeUrl: 'https://rpc.mainnet.near.org',
                    contractName: CONTRACT_NAME || "null_address.near",
                    walletUrl: 'https://wallet.near.org',
                    helperUrl: 'https://helper.mainnet.near.org',
                    explorerUrl: 'https://explorer.mainnet.near.org',
                }
            case 'development':
            case 'testnet':
                return {
                    networkId: 'testnet',
                    nodeUrl: 'https://rpc.testnet.near.org',
                    contractName: CONTRACT_NAME || "null_address.testnet",
                    walletUrl: 'https://wallet.testnet.near.org',
                    helperUrl: 'https://helper.testnet.near.org',
                    explorerUrl: 'https://explorer.testnet.near.org',
                }
            case 'betanet':
                return {
                    networkId: 'betanet',
                    nodeUrl: 'https://rpc.betanet.near.org',
                    contractName: CONTRACT_NAME,
                    walletUrl: 'https://wallet.betanet.near.org',
                    helperUrl: 'https://helper.betanet.near.org',
                    explorerUrl: 'https://explorer.betanet.near.org',
                }
            case 'local':
                return {
                    networkId: 'local',
                    nodeUrl: 'http://localhost:3030',
                    keyPath: `${process.env.HOME}/.near/validator_key.json`,
                    walletUrl: 'http://localhost:4000/wallet',
                    contractName: CONTRACT_NAME,
                }
            case 'test':
            case 'ci':
                return {
                    networkId: 'shared-test',
                    nodeUrl: 'https://rpc.ci-testnet.near.org',
                    contractName: CONTRACT_NAME,
                    masterAccount: 'test.near',
                }
            case 'ci-betanet':
                return {
                    networkId: 'shared-test-staging',
                    nodeUrl: 'https://rpc.ci-betanet.near.org',
                    contractName: CONTRACT_NAME,
                    masterAccount: 'test.near',
                }
            default:
                throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
        }
    }
}

'''
'''--- near-api-rest-server/near-api-ui/src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- near-api-rest-server/near-api-ui/src/index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="apple-touch-icon" sizes="180x180" href="./assets/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="./assets/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="./assets/favicon-16x16.png">
    <link rel="manifest" href="./assets/site.webmanifest">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">
    <title>NEAR REST API</title>
</head>
<body>
<noscript>You need to enable JavaScript to run this app.</noscript>
<div id="root"></div>
<!--
  This HTML file is a template.
  If you open it directly in the browser, you will see an empty page.

  You can add webfonts, meta tags, or analytics to this file.
  The build step will place the bundled scripts into the <body> tag.

  To begin the development, run `npm start` or `yarn start`.
  To create a production bundle, use `npm run build` or `yarn build`.
-->
<script src="./index.js"></script>
</body>
</html>

'''
'''--- near-api-rest-server/near-api-ui/src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
    .then(() => {
        ReactDOM.render(
            <App />,
            document.querySelector('#root')
        )
    })
    .catch(console.error)

'''
'''--- near-api-rest-server/near-api-ui/src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- near-api-rest-server/near-api-ui/src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- near-api-rest-server/near-api-ui/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- near-api-rest-server/near-api-ui/src/utils.js ---
import {connect, Contract, keyStores, WalletConnection} from 'near-api-js'
import {getConfig} from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
    // Initialize connection to the NEAR testnet
    const near = await connect(Object.assign({deps: {keyStore: new keyStores.BrowserLocalStorageKeyStore()}}, nearConfig))

    // Initializing Wallet based Account. It can work with NEAR testnet wallet that
    // is hosted at https://wallet.testnet.near.org
    window.walletConnection = new WalletConnection(near)

    // Getting the Account ID. If still unauthorized, it's just empty string
    window.accountId = window.walletConnection.getAccountId()

    // Initializing our contract APIs by contract name and configuration
    window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
        // View methods are read only. They don't modify the state, but usually return some value.
        viewMethods: ['get_deposit'],
        // Change methods can modify the state. But you don't receive the returned value when called.
        changeMethods: ['deposit', 'multisend_from_balance', 'multisend_attached_tokens'],
    })
}

export function logout() {
    window.walletConnection.signOut()
    // reload page
    window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
    // Allow the current app to make calls to the specified contract on the
    // user's behalf.
    // This works by creating a new access key for the user's account and storing
    // the private key in localStorage.
    window.walletConnection.requestSignIn("", "NEAR REST API")
}

'''
'''--- near-api-rest-server/package.json ---
{
  "name": "near-api-server",
  "version": "1.1.0",
  "description": "",
  "main": "app.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Vadim Ilin",
  "license": "ISC",
  "dependencies": {
    "@hapi/catbox-memory": "^5.0.1",
    "@hapi/hapi": "^18.1.0",
    "body-parser": "~1.19.0",
    "faker": "~5.4.0",
    "fs": "*",
    "near-api-js": "~0.44.1",
    "near-cli": "^2.2.0",
    "near-seed-phrase": "^0.1.0",
    "node-fetch": "^2.6.1",
    "path": "^0.12.7",
    "pg": "^8.6.0"
  },
  "bin": {
    "near-api-server": "./app.js"
  }
}

'''
'''--- near-api-rest-server/token.js ---
const blockchain = require('./blockchain');
const api = require('./api');

const fs = require('fs');
const settings = JSON.parse(fs.readFileSync(api.CONFIG_PATH, 'utf8'));

module.exports = {

    /**
     * @return {string}
     */
    ViewNFT: async function (tokenId, contract) {
        try {
            const nftContract = contract ? contract : settings.nft_contract;
            return await blockchain.View(
                nftContract,
                "nft_token",
                {token_id: tokenId}
            );
        } catch (e) {
            return api.reject(e);
        }
    },

    /**
     * @return {string}
     */
    MintNFT: async function (tokenId, metadata, contractAccountId, account_id, private_key) {
        const nftContract = contractAccountId ? contractAccountId : settings.nft_contract;

        let account = !(account_id && private_key)
            ? await blockchain.GetMasterAccount()
            : await blockchain.GetAccountByKey(account_id, private_key);

        try {
            const tx = await account.functionCall(
                nftContract,
                "nft_mint",
                {
                    "token_id": tokenId,
                    "metadata": metadata
                },
                '100000000000000',
                '10000000000000000000000');

            if (!tx.status.Failure)
                return tx.transaction.hash
        } catch (e) {
            return api.reject(e);
        }
    },

    TransferNFT: async function (tokenId, receiverId, enforceOwnerId, memo, contractAccountId, owner_private_key) {
        try {
            const nftContract = contractAccountId ? contractAccountId : settings.nft_contract;
            let account;

            account = !(enforceOwnerId && owner_private_key)
                ? ((enforceOwnerId === settings.master_account_id)
                    ? await blockchain.GetMasterAccount()
                    : await blockchain.GetUserAccount(enforceOwnerId))
                : await blockchain.GetAccountByKey(enforceOwnerId, owner_private_key);

            return await account.functionCall(
                nftContract,
                "nft_transfer",
                {
                    "token_id": tokenId,
                    "receiver_id": receiverId,
                    "enforce_owner_id": enforceOwnerId,
                    "memo": memo
                },
                '100000000000000',
                '1');
        } catch (e) {
            return api.reject(e);
        }
    }
};

'''
'''--- near-api-rest-server/user.js ---
const nearApi = require('near-api-js');
const blockchain = require('./blockchain');
const nearSeedPhrase = require('near-seed-phrase');
const fs = require('fs');

const storageFolder = "storage";

module.exports = {
    GenerateKeyPair: async function () {
        const keypair = nearApi.utils.KeyPair.fromRandom('ed25519');

        return {
            public_key: keypair.publicKey.toString(),
            private_key: keypair.secretKey
        };
    },

    CreateKeyPair: async function (name) {
        const keypair = nearApi.utils.KeyPair.fromRandom('ed25519');

        const account =
            {
                account_id: name,
                public_key: keypair.publicKey.toString(),
                private_key: keypair.secretKey
            };

        return account;
    },

    /**
     * @return {string}
     */
    GetFileName: function (account_id) {
        return `${storageFolder}/${account_id}.json`;
    },

    SaveKeyPair: async function (account) {
        if (!fs.existsSync(storageFolder))
            fs.mkdirSync(storageFolder);

        const filename = this.GetFileName(account.account_id);
        account.private_key = "ed25519:" + account.private_key;

        await fs.promises.writeFile(filename, JSON.stringify(account));
    },

    /**
     * @return {boolean}
     */
    CreateAccount: async function (new_account) {
        const account = await blockchain.GetMasterAccount();

        const res = await account.createAccount(new_account.account_id, new_account.public_key, '200000000000000000000000');

        try {
            if (res['status'].hasOwnProperty('SuccessValue')) {
                await this.SaveKeyPair(new_account);
                return true
            }
        } catch (e) {
            console.log(e);
        }
        return false;
    },

    GetAccount: async function (account_id) {
        const filename = this.GetFileName(account_id);
        return await fs.promises.readFile(filename, 'utf8');
    },

    GetKeysFromSeedPhrase: async function (seedPhrase) {
        return nearSeedPhrase.parseSeedPhrase(seedPhrase);
    }
};

'''