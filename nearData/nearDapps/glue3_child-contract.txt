*GitHub Repository "glue3/child-contract"*

'''--- Cargo.toml ---
[package]
name = "fungible-token"
version = "1.0.0"
authors = ["Near Inc <hello@nearprotocol.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.0.0"
near-contract-standards = "4.0.0"
serde = "1.0.136"
serde_json = "1.0.79" 

'''
'''--- README.md ---
# child-contract

'''
'''--- build.sh ---
#!/bin/bash
set -e
cargo build --all --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/*.wasm ./res/
cp ./res/*.wasm ~/Downloads/

'''
'''--- neardev/dev-account.env ---
CONTRACT_NAME=dev-1663067975549-81399117722265
'''
'''--- src/lib.rs ---
/*!
Fungible Token implementation with JSON serialization.
NOTES:
  - The maximum balance value is limited by U128 (2**128 - 1).
  - JSON calls should pass U128 as a base-10 string. E.g. "100".
  - The contract optimizes the inner trie structure by hashing account IDs. It will prevent some
    abuse of deep tries. Shouldn't be an issue, once NEAR clients implement full hashing of keys.
  - The contract tracks the change in storage before and after the call. If the storage increases,
    the contract requires the caller of the contract to attach enough deposit to the function call
    to cover the storage cost.
    This is done to prevent a denial of service attack on the contract by taking all available storage.
    If the storage decreases, the contract will issue a refund for the cost of the released storage.
    The unused tokens from the attached deposit are also refunded, so it's safe to
    attach more deposit than required.
  - To prevent the deployed contract from being modified or deleted, it should not have any access
    keys on its account.
*/
use near_contract_standards::fungible_token::metadata::{
    FungibleTokenMetadata, FungibleTokenMetadataProvider,
};
// use near_contract_standards::fungible_token::FungibleToken;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{LazyOption, UnorderedMap};
use near_sdk::json_types::U128;
use near_sdk::{env, near_bindgen, AccountId, Balance, PanicOnDefault};

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    metadata: LazyOption<FungibleTokenMetadata>,
    fundAccounts: UnorderedMap<String, Balance>,
    accounts: UnorderedMap<AccountId, Balance>,
    canMint: bool,
    canBurn: bool,
    ownerId: AccountId,
    glueId: AccountId,
}

const DATA_IMAGE_SVG_NEAR_ICON: &str = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 288 288'%3E%3Cg id='l' data-name='l'%3E%3Cpath d='M187.58,79.81l-30.1,44.69a3.2,3.2,0,0,0,4.75,4.2L191.86,103a1.2,1.2,0,0,1,2,.91v80.46a1.2,1.2,0,0,1-2.12.77L102.18,77.93A15.35,15.35,0,0,0,90.47,72.5H87.34A15.34,15.34,0,0,0,72,87.84V201.16A15.34,15.34,0,0,0,87.34,216.5h0a15.35,15.35,0,0,0,13.08-7.31l30.1-44.69a3.2,3.2,0,0,0-4.75-4.2L96.14,186a1.2,1.2,0,0,1-2-.91V104.61a1.2,1.2,0,0,1,2.12-.77l89.55,107.23a15.35,15.35,0,0,0,11.71,5.43h3.13A15.34,15.34,0,0,0,216,201.16V87.84A15.34,15.34,0,0,0,200.66,72.5h0A15.35,15.35,0,0,0,187.58,79.81Z'/%3E%3C/g%3E%3C/svg%3E";

#[near_bindgen]
impl Contract {
    /// Initializes the contract with the given total supply owned by the given `owner_id` with
    /// default metadata (for example purposes only).

    /// Initializes the contract with the given total supply owned by the given `owner_id` with
    /// the given fungible token metadata.
    #[init]
    pub fn new(
        total_supply: U128,
        metadata: FungibleTokenMetadata,
        can_mint: bool,
        can_burn: bool,
        glue_id: AccountId,
    ) -> Self {
        let owner_id = env::signer_account_id();
        assert!(!env::state_exists(), "Already initialized");
        metadata.assert_valid();
        let mut this = Self {
            metadata: LazyOption::new(b"m".to_vec(), Some(&metadata)),
            accounts: UnorderedMap::new(b"a".to_vec()),
            fundAccounts: UnorderedMap::new(b"f".to_vec()),
            canBurn: can_burn,
            canMint: can_mint,
            ownerId: owner_id.clone(),
            glueId: glue_id,
        };
        this.accounts.insert(&owner_id, &u128::from(total_supply));
        FtMint {
            owner_id: &owner_id,
            amount: &total_supply,
            memo: Some("Initial tokens supply is minted"),
        }
        .emit();
        this
    }

    fn internal_deposit(&mut self, account: &AccountId, amount: u128) {
        let balance = self.accounts.get(account).unwrap_or(0);
        self.accounts.insert(&account, &(balance + amount));
        
    }
    fn internal_withdraw(&mut self, account: &AccountId, amount: u128) {
        let balance = self.accounts.get(account).unwrap_or(0);
        assert!(balance >= amount);
        self.accounts.insert(&account, &(balance - amount));
    }

    pub fn burnToken(&mut self, amount: U128) {
        assert!(self.canBurn);
        assert!(env::signer_account_id() == self.ownerId);
        self.internal_withdraw(&self.ownerId.clone(), amount.into());
    }
    pub fn mintToken(&mut self, amount: U128) {
        assert!(self.canMint);
        assert!(env::signer_account_id() == self.ownerId);
        self.internal_deposit(&self.ownerId.clone(), amount.into());
    }

    // pub fn sendToken()
    // // @call({})
    // // sendToken({ walletAddress, amount }) {
    // //     assert(near.signerAccountId() == this.owner, "Only owner can call")
    // //     this.internalTransfer(this.owner, walletAddress, amount, "")
    // // }

    pub fn ft_transfer(&mut self, receiver_id: AccountId, amount: U128) {
        let sender = env::signer_account_id();
        self.internal_withdraw(&sender, amount.into());
        self.internal_deposit(&receiver_id, amount.into());
        FtTransfer {
            old_owner_id: &sender,
            new_owner_id: &receiver_id,
            amount: &amount,
            memo: Some("transfered"),
        }
        .emit();
    }

    // add to users tokens to fund map
    pub fn sendToFund(&mut self, id: String, amount: U128) {
        let signer = env::signer_account_id();
        assert!(signer == self.ownerId || signer == self.glueId);
        self.internal_withdraw(&self.ownerId.clone(), amount.into());
        let balance: u128 = self.fundAccounts.get(&id).unwrap_or(0);
        let new_balance: u128 = balance + u128::from(amount);
        self.fundAccounts.insert(&id, &new_balance);
    }

    // claims tokens from fund to users web3 account
    pub fn sendFromFund(&mut self, id: String, walletAddress: AccountId, amount: U128) {
        let signer = env::signer_account_id();
        assert!(signer == self.ownerId || signer == self.glueId);
        let balance = self.fundAccounts.get(&id).unwrap_or(0);
        let amountInt = u128::from(amount);
        assert!(balance >= amountInt);
        self.fundAccounts.insert(&id, &(balance - amountInt));
        self.internal_deposit(&walletAddress, amountInt);
        FtTransfer {
            old_owner_id: &self.ownerId,
            new_owner_id: &walletAddress,
            amount: &amount,
            memo: Some("transfered"),
        }
        .emit();
    }

    pub fn changeOwner(&mut self, address: AccountId) {
        assert!(env::signer_account_id() == self.ownerId);
        self.ownerId = address;
    }

    pub fn ft_balance_of(&self, account_id: AccountId) -> U128 {
        let balance = self.accounts.get(&account_id).unwrap_or(0);
        U128::from(balance)
    }

    pub fn ft_fund_balance_of(&self, account_id: String) -> U128 {
        let balance = self.fundAccounts.get(&account_id).unwrap_or(0);
        U128::from(balance)
    }

    pub fn total_users(&self) -> u64 {
        self.accounts.len()
    }

    pub fn total_fund_users(&self) -> u64 {
        self.fundAccounts.len()
    }

    pub fn list_balances(&self, start_index: usize, limit: usize) -> Vec<(AccountId, U128)>{
        self.accounts
            .iter()
            .skip(start_index)
            .take(limit)
            .map(|(account_id, balance)| (account_id, U128::from(balance)))
            .collect()
    }

    pub fn list_fund_balances(&self, start_index: usize, limit: usize) -> Vec<(String, U128)>{
        self.fundAccounts
            .iter()
            .skip(start_index)
            .take(limit)
            .map(|(account_id, balance)| (account_id, U128::from(balance)))
            .collect()
    }
}

#[near_bindgen]
impl FungibleTokenMetadataProvider for Contract {
    fn ft_metadata(&self) -> FungibleTokenMetadata {
        self.metadata.get().unwrap()
    }
}

//ß Standard for nep141 (Fungible Token) events.
//ß
//ß These events will be picked up by the NEAR indexer.
//ß
//ß <https://github.com/near/NEPs/blob/master/specs/Standards/FungibleToken/Event.md>
//ß
//ß This is an extension of the events format (nep-297):
//ß <https://github.com/near/NEPs/blob/master/specs/Standards/EventsFormat.md>
//ß
//ß The three events in this standard are [`FtMint`], [`FtTransfer`], and [`FtBurn`].
//ß
//ß These events can be logged by calling `.emit()` on them if a single event, or calling
//ß [`FtMint::emit_many`], [`FtTransfer::emit_many`],
//ß or [`FtBurn::emit_many`] respectively.

use near_sdk::serde::Serialize;

#[derive(Serialize, Debug)]
#[serde(tag = "standard")]
#[must_use = "don't forget to `.emit()` this event"]
#[serde(rename_all = "snake_case")]
pub(crate) enum NearEvent<'a> {
    Nep141(Nep141Event<'a>),
}

impl<'a> NearEvent<'a> {
    fn to_json_string(&self) -> String {
        // Events cannot fail to serialize so fine to panic on error
        #[allow(clippy::redundant_closure)]
        serde_json::to_string(self).ok().unwrap_or_else(|| env::abort())
    }

    fn to_json_event_string(&self) -> String {
        format!("EVENT_JSON:{}", self.to_json_string())
    }

    /// Logs the event to the host. This is required to ensure that the event is triggered
    /// and to consume the event.
    pub(crate) fn emit(self) {
        near_sdk::env::log_str(&self.to_json_event_string());
    }
}

/// Data to log for an FT mint event. To log this event, call [`.emit()`](FtMint::emit).
#[must_use]
#[derive(Serialize, Debug, Clone)]
pub struct FtMint<'a> {
    pub owner_id: &'a AccountId,
    pub amount: &'a U128,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<&'a str>,
}

impl FtMint<'_> {
    /// Logs the event to the host. This is required to ensure that the event is triggered
    /// and to consume the event.
    pub fn emit(self) {
        Self::emit_many(&[self])
    }

    /// Emits an FT mint event, through [`env::log_str`](near_sdk::env::log_str),
    /// where each [`FtMint`] represents the data of each mint.
    pub fn emit_many(data: &[FtMint<'_>]) {
        new_141_v1(Nep141EventKind::FtMint(data)).emit()
    }
}

/// Data to log for an FT transfer event. To log this event,
/// call [`.emit()`](FtTransfer::emit).
#[must_use]
#[derive(Serialize, Debug, Clone)]
pub struct FtTransfer<'a> {
    pub old_owner_id: &'a AccountId,
    pub new_owner_id: &'a AccountId,
    pub amount: &'a U128,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<&'a str>,
}

impl FtTransfer<'_> {
    /// Logs the event to the host. This is required to ensure that the event is triggered
    /// and to consume the event.
    pub fn emit(self) {
        Self::emit_many(&[self])
    }

    /// Emits an FT transfer event, through [`env::log_str`](near_sdk::env::log_str),
    /// where each [`FtTransfer`] represents the data of each transfer.
    pub fn emit_many(data: &[FtTransfer<'_>]) {
        new_141_v1(Nep141EventKind::FtTransfer(data)).emit()
    }
}

#[derive(Serialize, Debug)]
pub(crate) struct Nep141Event<'a> {
    version: &'static str,
    #[serde(flatten)]
    event_kind: Nep141EventKind<'a>,
}

#[derive(Serialize, Debug)]
#[serde(tag = "event", content = "data")]
#[serde(rename_all = "snake_case")]
#[allow(clippy::enum_variant_names)]
enum Nep141EventKind<'a> {
    FtMint(&'a [FtMint<'a>]),
    FtTransfer(&'a [FtTransfer<'a>]),
}

fn new_141<'a>(version: &'static str, event_kind: Nep141EventKind<'a>) -> NearEvent<'a> {
    NearEvent::Nep141(Nep141Event { version, event_kind })
}

fn new_141_v1(event_kind: Nep141EventKind) -> NearEvent {
    new_141("1.0.0", event_kind)
}

'''
'''--- target/.rustc_info.json ---
{"rustc_fingerprint":1779760195353151617,"outputs":{"16190320590097772098":{"success":true,"status":"","code":0,"stdout":"___.wasm\nlib___.rlib\n___.wasm\nlib___.a\n/Users/tyoma/.rustup/toolchains/stable-x86_64-apple-darwin\ndebug_assertions\npanic=\"abort\"\nproc_macro\ntarget_arch=\"wasm32\"\ntarget_endian=\"little\"\ntarget_env=\"\"\ntarget_family=\"wasm\"\ntarget_has_atomic=\"16\"\ntarget_has_atomic=\"32\"\ntarget_has_atomic=\"64\"\ntarget_has_atomic=\"8\"\ntarget_has_atomic=\"ptr\"\ntarget_os=\"unknown\"\ntarget_pointer_width=\"32\"\ntarget_vendor=\"unknown\"\n","stderr":"warning: dropping unsupported crate type `dylib` for target `wasm32-unknown-unknown`\n\nwarning: dropping unsupported crate type `proc-macro` for target `wasm32-unknown-unknown`\n\nwarning: 2 warnings emitted\n\n"},"4614504638168534921":{"success":true,"status":"","code":0,"stdout":"rustc 1.63.0 (4b91a6ea7 2022-08-08)\nbinary: rustc\ncommit-hash: 4b91a6ea7258a947e59c6522cd5898e7c0a6a88f\ncommit-date: 2022-08-08\nhost: x86_64-apple-darwin\nrelease: 1.63.0\nLLVM version: 14.0.5\n","stderr":""},"10376369925670944939":{"success":true,"status":"","code":0,"stdout":"___\nlib___.rlib\nlib___.dylib\nlib___.dylib\nlib___.a\nlib___.dylib\n/Users/tyoma/.rustup/toolchains/stable-x86_64-apple-darwin\ndebug_assertions\npanic=\"unwind\"\nproc_macro\ntarget_arch=\"x86_64\"\ntarget_endian=\"little\"\ntarget_env=\"\"\ntarget_family=\"unix\"\ntarget_feature=\"fxsr\"\ntarget_feature=\"sse\"\ntarget_feature=\"sse2\"\ntarget_feature=\"sse3\"\ntarget_feature=\"ssse3\"\ntarget_has_atomic=\"128\"\ntarget_has_atomic=\"16\"\ntarget_has_atomic=\"32\"\ntarget_has_atomic=\"64\"\ntarget_has_atomic=\"8\"\ntarget_has_atomic=\"ptr\"\ntarget_os=\"macos\"\ntarget_pointer_width=\"64\"\ntarget_vendor=\"apple\"\nunix\n","stderr":""},"3041318571841102788":{"success":false,"status":"exit status: 1","code":1,"stdout":"","stderr":"error: `-Csplit-debuginfo` is unstable on this platform\n\n"},"11308901369924159398":{"success":true,"status":"","code":0,"stdout":"___.wasm\nlib___.rlib\n___.wasm\nlib___.a\n/Users/tyoma/.rustup/toolchains/stable-x86_64-apple-darwin\ndebug_assertions\npanic=\"abort\"\nproc_macro\ntarget_arch=\"wasm32\"\ntarget_endian=\"little\"\ntarget_env=\"\"\ntarget_family=\"wasm\"\ntarget_has_atomic=\"16\"\ntarget_has_atomic=\"32\"\ntarget_has_atomic=\"64\"\ntarget_has_atomic=\"8\"\ntarget_has_atomic=\"ptr\"\ntarget_os=\"unknown\"\ntarget_pointer_width=\"32\"\ntarget_vendor=\"unknown\"\n","stderr":"warning: dropping unsupported crate type `dylib` for target `wasm32-unknown-unknown`\n\nwarning: dropping unsupported crate type `proc-macro` for target `wasm32-unknown-unknown`\n\nwarning: 2 warnings emitted\n\n"},"15697416045686424142":{"success":true,"status":"","code":0,"stdout":"___\nlib___.rlib\nlib___.dylib\nlib___.dylib\nlib___.a\nlib___.dylib\n","stderr":""},"865783370946673908":{"success":false,"status":"exit status: 1","code":1,"stdout":"","stderr":"error: `-Csplit-debuginfo` is unstable on this platform\n\n"}},"successes":{}}
'''
'''--- target/release/.fingerprint/Inflector-26035879ca96f7d2/lib-inflector.json ---
{"rustc":9788803232347239455,"features":"[]","target":15157828903313475237,"profile":17504242664759948721,"path":1728871304304453389,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/Inflector-26035879ca96f7d2/dep-lib-inflector"}}],"rustflags":[],"metadata":6849597462678386541,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/ahash-27aaa02ecba3f8be/build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"[]","target":13294766831966498538,"profile":17504242664759948721,"path":17759722822903930022,"deps":[[16079472387499994964,"version_check",false,17652464437759000775]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/ahash-27aaa02ecba3f8be/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":6548036084630991988,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/borsh-derive-45fa5d004a5ec1f8/lib-borsh-derive.json ---
{"rustc":9788803232347239455,"features":"[]","target":4089840889381527766,"profile":17504242664759948721,"path":16219054569502930137,"deps":[[2303534799027988957,"proc_macro2",false,14165729428273223423],[2345288959107110519,"borsh_schema_derive_internal",false,15055570425233484332],[3971538142687143787,"proc_macro_crate",false,821634842157427070],[4114176108478934945,"syn",false,3472918124173990351],[8324001644593655249,"borsh_derive_internal",false,2210066082749361684]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/borsh-derive-45fa5d004a5ec1f8/dep-lib-borsh-derive"}}],"rustflags":[],"metadata":6341613096556135379,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/borsh-derive-internal-3ac3e8279c78ee2a/lib-borsh-derive-internal.json ---
{"rustc":9788803232347239455,"features":"[]","target":1036412639898795334,"profile":17504242664759948721,"path":2856985089737246532,"deps":[[2303534799027988957,"proc_macro2",false,14165729428273223423],[4114176108478934945,"syn",false,3472918124173990351],[4658667968557883043,"quote",false,1730457231076716695]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/borsh-derive-internal-3ac3e8279c78ee2a/dep-lib-borsh-derive-internal"}}],"rustflags":[],"metadata":6341613096556135379,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/borsh-schema-derive-internal-7fa126f9aa36fd41/lib-borsh-schema-derive-internal.json ---
{"rustc":9788803232347239455,"features":"[]","target":5421563452239655410,"profile":17504242664759948721,"path":18362701714949850098,"deps":[[2303534799027988957,"proc_macro2",false,14165729428273223423],[4114176108478934945,"syn",false,3472918124173990351],[4658667968557883043,"quote",false,1730457231076716695]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/borsh-schema-derive-internal-7fa126f9aa36fd41/dep-lib-borsh-schema-derive-internal"}}],"rustflags":[],"metadata":7685215035480038221,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/near-sdk-macros-ddc21b476b059395/lib-near-sdk-macros.json ---
{"rustc":9788803232347239455,"features":"[]","target":2024342235666230958,"profile":17504242664759948721,"path":1232918217964372625,"deps":[[2303534799027988957,"proc_macro2",false,14165729428273223423],[4114176108478934945,"syn",false,3472918124173990351],[4658667968557883043,"quote",false,1730457231076716695],[7454270075138479745,"inflector",false,17017460645141278485]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/near-sdk-macros-ddc21b476b059395/dep-lib-near-sdk-macros"}}],"rustflags":[],"metadata":9520434766592551999,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/proc-macro-crate-6029989a0cbd7090/lib-proc-macro-crate.json ---
{"rustc":9788803232347239455,"features":"[]","target":10488202467561598967,"profile":17504242664759948721,"path":10405610527201808230,"deps":[[12643607882224615841,"toml",false,3699562961534151813]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/proc-macro-crate-6029989a0cbd7090/dep-lib-proc-macro-crate"}}],"rustflags":[],"metadata":4875023412952309093,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/proc-macro2-0fe559e1762e1ee2/run-build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"","target":0,"profile":0,"path":0,"deps":[[2303534799027988957,"build_script_build",false,17380672677053066962]],"local":[{"RerunIfChanged":{"output":"release/build/proc-macro2-0fe559e1762e1ee2/output","paths":["build.rs"]}}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/release/.fingerprint/proc-macro2-7f4c886728cc183f/build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"[\"default\", \"proc-macro\"]","target":13294766831966498538,"profile":17504242664759948721,"path":15411449615446763927,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/proc-macro2-7f4c886728cc183f/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":7635439851376710101,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/proc-macro2-e25c0dfb00ca31dc/lib-proc-macro2.json ---
{"rustc":9788803232347239455,"features":"[\"default\", \"proc-macro\"]","target":14344298002436322672,"profile":17504242664759948721,"path":18375391596461307251,"deps":[[2303534799027988957,"build_script_build",false,12656735766280449542],[9294524838761079687,"unicode_ident",false,1340719518583072190]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/proc-macro2-e25c0dfb00ca31dc/dep-lib-proc-macro2"}}],"rustflags":[],"metadata":7635439851376710101,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/quote-261af119deeae240/run-build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"","target":0,"profile":0,"path":0,"deps":[[4658667968557883043,"build_script_build",false,9725639953334619238]],"local":[{"RerunIfChanged":{"output":"release/build/quote-261af119deeae240/output","paths":["build.rs"]}}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/release/.fingerprint/quote-d08dee48f89ab2c4/lib-quote.json ---
{"rustc":9788803232347239455,"features":"[\"default\", \"proc-macro\"]","target":4606197195311606630,"profile":17504242664759948721,"path":14646536941438103746,"deps":[[2303534799027988957,"proc_macro2",false,14165729428273223423],[4658667968557883043,"build_script_build",false,14486935770401212062]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/quote-d08dee48f89ab2c4/dep-lib-quote"}}],"rustflags":[],"metadata":2717943770976187624,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/quote-fcb542550d8e7618/build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"[\"default\", \"proc-macro\"]","target":13294766831966498538,"profile":17504242664759948721,"path":1823742871764802597,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/quote-fcb542550d8e7618/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":2717943770976187624,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde-31dac17ee49f610a/build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"[\"default\", \"derive\", \"rc\", \"serde_derive\", \"std\"]","target":2709041430195671023,"profile":17504242664759948721,"path":2284690013561995952,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/serde-31dac17ee49f610a/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":3767376778934503013,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde-ad271417e889980d/lib-serde.json ---
{"rustc":9788803232347239455,"features":"[\"default\", \"derive\", \"rc\", \"serde_derive\", \"std\"]","target":15771919462364234457,"profile":17504242664759948721,"path":14803241670525957030,"deps":[[6690271868290899511,"serde_derive",false,18312531415678118194],[6950364819706936765,"build_script_build",false,6588232410395159659]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/serde-ad271417e889980d/dep-lib-serde"}}],"rustflags":[],"metadata":3767376778934503013,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde-c46e85d6e57e3309/run-build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"","target":0,"profile":0,"path":0,"deps":[[6950364819706936765,"build_script_build",false,13536423178405949854]],"local":[{"Precalculated":"1.0.144"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde_derive-6350d5fcd8459d5b/build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"[\"default\"]","target":2709041430195671023,"profile":17504242664759948721,"path":10460937812708501750,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/serde_derive-6350d5fcd8459d5b/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":14452199383429553764,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde_derive-ad87e2580a70349f/lib-serde_derive.json ---
{"rustc":9788803232347239455,"features":"[\"default\"]","target":17963269895377715704,"profile":17504242664759948721,"path":11702125336696613697,"deps":[[2303534799027988957,"proc_macro2",false,14165729428273223423],[4114176108478934945,"syn",false,3472918124173990351],[4658667968557883043,"quote",false,1730457231076716695],[6690271868290899511,"build_script_build",false,18394729754287379373]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/serde_derive-ad87e2580a70349f/dep-lib-serde_derive"}}],"rustflags":[],"metadata":14452199383429553764,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde_derive-b9910fb2cabe3f8e/run-build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"","target":0,"profile":0,"path":0,"deps":[[6690271868290899511,"build_script_build",false,11620031341013064526]],"local":[{"Precalculated":"1.0.144"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde_json-52cf717c90fad2d2/build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"[\"default\", \"std\"]","target":13294766831966498538,"profile":17504242664759948721,"path":11675309258180096468,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/serde_json-52cf717c90fad2d2/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":16261601059619201932,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/syn-21ce6915bf0e1d40/build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"[\"clone-impls\", \"default\", \"derive\", \"extra-traits\", \"fold\", \"full\", \"parsing\", \"printing\", \"proc-macro\", \"quote\", \"visit\"]","target":13294766831966498538,"profile":17504242664759948721,"path":3480686455025146774,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/syn-21ce6915bf0e1d40/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":6886477143387768027,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/syn-8f69960e9c51190b/run-build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"","target":0,"profile":0,"path":0,"deps":[[4114176108478934945,"build_script_build",false,5382846069723287263]],"local":[{"Precalculated":"1.0.99"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/release/.fingerprint/syn-b7b63072f2011a5e/lib-syn.json ---
{"rustc":9788803232347239455,"features":"[\"clone-impls\", \"default\", \"derive\", \"extra-traits\", \"fold\", \"full\", \"parsing\", \"printing\", \"proc-macro\", \"quote\", \"visit\"]","target":12020202395954228905,"profile":17504242664759948721,"path":11467586033779292186,"deps":[[2303534799027988957,"proc_macro2",false,14165729428273223423],[4114176108478934945,"build_script_build",false,15005093319276555702],[4658667968557883043,"quote",false,1730457231076716695],[9294524838761079687,"unicode_ident",false,1340719518583072190]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/syn-b7b63072f2011a5e/dep-lib-syn"}}],"rustflags":[],"metadata":6886477143387768027,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/toml-3d4b97bc74d33f9e/lib-toml.json ---
{"rustc":9788803232347239455,"features":"[\"default\"]","target":13462643144348829615,"profile":17504242664759948721,"path":3827672960084925856,"deps":[[6950364819706936765,"serde",false,11060993199622115112]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/toml-3d4b97bc74d33f9e/dep-lib-toml"}}],"rustflags":[],"metadata":15823223228428447826,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/unicode-ident-36be27f40c2e1445/lib-unicode-ident.json ---
{"rustc":9788803232347239455,"features":"[]","target":796776536126189422,"profile":17504242664759948721,"path":11372673995804666232,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/unicode-ident-36be27f40c2e1445/dep-lib-unicode-ident"}}],"rustflags":[],"metadata":1159190378059262574,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/version_check-69fa327f9d16246f/lib-version_check.json ---
{"rustc":9788803232347239455,"features":"[]","target":2726911228026723764,"profile":17504242664759948721,"path":17018512580111356830,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/version_check-69fa327f9d16246f/dep-lib-version_check"}}],"rustflags":[],"metadata":14847206692933921638,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/wee_alloc-747f3cd3dc4ad9da/build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"[]","target":2709041430195671023,"profile":17504242664759948721,"path":11374802781924031832,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/wee_alloc-747f3cd3dc4ad9da/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":11837593470300214873,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/ahash-99e84e2e85c1bed8/run-build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"","target":0,"profile":0,"path":0,"deps":[[6564554279330852038,"build_script_build",false,10977451349598137945]],"local":[{"RerunIfChanged":{"output":"wasm32-unknown-unknown/release/build/ahash-99e84e2e85c1bed8/output","paths":["build.rs"]}}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/ahash-adf048a4299ab22a/lib-ahash.json ---
{"rustc":9788803232347239455,"features":"[]","target":17564961922320999190,"profile":6269190295429226618,"path":3848027154747764415,"deps":[[6564554279330852038,"build_script_build",false,13371698341249243457],[16189983876286536992,"once_cell",false,8274484288350439869]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/ahash-adf048a4299ab22a/dep-lib-ahash"}}],"rustflags":[],"metadata":6548036084630991988,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/base64-238f5fd2c27fbd00/lib-base64.json ---
{"rustc":9788803232347239455,"features":"[\"default\", \"std\"]","target":9667411782827515189,"profile":6269190295429226618,"path":9854510323810243393,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/base64-238f5fd2c27fbd00/dep-lib-base64"}}],"rustflags":[],"metadata":13936919950537592407,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/borsh-05c6c52bb466d299/lib-borsh.json ---
{"rustc":9788803232347239455,"features":"[\"default\", \"rc\", \"std\"]","target":3730488758921852561,"profile":6269190295429226618,"path":17881044914628723259,"deps":[[1759060122986695407,"borsh_derive",false,18414633670980510402],[16284710795702459458,"hashbrown",false,5089736422244904860]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/borsh-05c6c52bb466d299/dep-lib-borsh"}}],"rustflags":[],"metadata":7032358266178414993,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/bs58-530340d8395b5b47/lib-bs58.json ---
{"rustc":9788803232347239455,"features":"[\"alloc\", \"default\", \"std\"]","target":4860711247261189145,"profile":6269190295429226618,"path":2646861712149694379,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/bs58-530340d8395b5b47/dep-lib-bs58"}}],"rustflags":[],"metadata":13637435404263704389,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/cfg-if-40081b31e776a114/lib-cfg-if.json ---
{"rustc":9788803232347239455,"features":"[]","target":10094334937643343087,"profile":6269190295429226618,"path":3339199163085517490,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/cfg-if-40081b31e776a114/dep-lib-cfg-if"}}],"rustflags":[],"metadata":8462187951337715540,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/fungible-token-67938bd45c47034b/lib-fungible-token.json ---
{"rustc":9788803232347239455,"features":"[]","target":3324296144920832835,"profile":6269190295429226618,"path":17523903030608720598,"deps":[[6950364819706936765,"serde",false,7307314490412198150],[8635627559799444112,"near_contract_standards",false,17785356423033017885],[9294366231115296361,"near_sdk",false,7515561076546517843],[14401457305169548751,"serde_json",false,16206211847665479003]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/fungible-token-67938bd45c47034b/dep-lib-fungible-token"}}],"rustflags":[],"metadata":11367392754617449973,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/hashbrown-116a667e53ccdb4e/lib-hashbrown.json ---
{"rustc":9788803232347239455,"features":"[\"ahash\", \"default\", \"inline-more\"]","target":7861740280460442625,"profile":6269190295429226618,"path":1535397298526308855,"deps":[[6564554279330852038,"ahash",false,6578110622208256637]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/hashbrown-116a667e53ccdb4e/dep-lib-hashbrown"}}],"rustflags":[],"metadata":6228333144549390726,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/itoa-8d8c35def3c08e51/lib-itoa.json ---
{"rustc":9788803232347239455,"features":"[]","target":16990797089513230490,"profile":6269190295429226618,"path":7650489687070123087,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/itoa-8d8c35def3c08e51/dep-lib-itoa"}}],"rustflags":[],"metadata":851671291587502216,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/memory_units-3e207525ed38eeb9/lib-memory_units.json ---
{"rustc":9788803232347239455,"features":"[]","target":12813906616754239599,"profile":6269190295429226618,"path":9884107939651172692,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/memory_units-3e207525ed38eeb9/dep-lib-memory_units"}}],"rustflags":[],"metadata":16366510313631463741,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/near-contract-standards-2ad4cf68a42f08d3/lib-near-contract-standards.json ---
{"rustc":9788803232347239455,"features":"[]","target":13038358099306503497,"profile":6269190295429226618,"path":5703444679366353575,"deps":[[6950364819706936765,"serde",false,7307314490412198150],[9294366231115296361,"near_sdk",false,7515561076546517843],[14401457305169548751,"serde_json",false,16206211847665479003]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/near-contract-standards-2ad4cf68a42f08d3/dep-lib-near-contract-standards"}}],"rustflags":[],"metadata":6989672360402117742,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/near-sdk-ded2bc2d710a670a/lib-near-sdk.json ---
{"rustc":9788803232347239455,"features":"[\"default\", \"wee_alloc\"]","target":1044266279087180184,"profile":6269190295429226618,"path":7183604701456968687,"deps":[[2711478123133662383,"bs58",false,6309335788250095510],[3178493835647231921,"wee_alloc",false,18092394072596622322],[6950364819706936765,"serde",false,7307314490412198150],[9180754061452322375,"base64",false,15774030115093717241],[9608617076544306583,"near_sys",false,14317872692447745730],[13434381959712907675,"borsh",false,6749821191747915267],[14401457305169548751,"serde_json",false,16206211847665479003],[15959244235299360742,"near_sdk_macros",false,16556006810917784313]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/near-sdk-ded2bc2d710a670a/dep-lib-near-sdk"}}],"rustflags":[],"metadata":9215943102709044213,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/near-sys-e995f6d22e7a6b85/lib-near-sys.json ---
{"rustc":9788803232347239455,"features":"[]","target":11005017848159897718,"profile":6269190295429226618,"path":5763327670771795210,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/near-sys-e995f6d22e7a6b85/dep-lib-near-sys"}}],"rustflags":[],"metadata":14904885344401450229,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/once_cell-f18be5eb0cdc154c/lib-once_cell.json ---
{"rustc":9788803232347239455,"features":"[\"alloc\", \"default\", \"race\", \"std\"]","target":15818772897122422038,"profile":6269190295429226618,"path":271543552878594228,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/once_cell-f18be5eb0cdc154c/dep-lib-once_cell"}}],"rustflags":[],"metadata":14177539708254521827,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/ryu-a8203a6561daa27b/lib-ryu.json ---
{"rustc":9788803232347239455,"features":"[]","target":8261881835615490997,"profile":6269190295429226618,"path":6626491818978905266,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/ryu-a8203a6561daa27b/dep-lib-ryu"}}],"rustflags":[],"metadata":10387617312689919117,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/serde-0b94c19cd8c798ab/run-build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"","target":0,"profile":0,"path":0,"deps":[[6950364819706936765,"build_script_build",false,13536423178405949854]],"local":[{"Precalculated":"1.0.144"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/serde-29b4d32ef9a9c225/lib-serde.json ---
{"rustc":9788803232347239455,"features":"[\"default\", \"derive\", \"rc\", \"serde_derive\", \"std\"]","target":15771919462364234457,"profile":6269190295429226618,"path":14803241670525957030,"deps":[[6690271868290899511,"serde_derive",false,18312531415678118194],[6950364819706936765,"build_script_build",false,6588232410395159659]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/serde-29b4d32ef9a9c225/dep-lib-serde"}}],"rustflags":[],"metadata":3767376778934503013,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/serde_json-20f4a7d8f93bb58a/run-build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"","target":0,"profile":0,"path":0,"deps":[[14401457305169548751,"build_script_build",false,5780340235111029969]],"local":[{"Precalculated":"1.0.85"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/serde_json-9ed13714f3ec33d7/lib-serde_json.json ---
{"rustc":9788803232347239455,"features":"[\"default\", \"std\"]","target":2475719121998694108,"profile":6269190295429226618,"path":14307328214842370299,"deps":[[575073654967937391,"ryu",false,9013347010011110711],[5877561965226442608,"itoa",false,11445101512372518931],[6950364819706936765,"serde",false,7307314490412198150],[14401457305169548751,"build_script_build",false,1385717795881504693]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/serde_json-9ed13714f3ec33d7/dep-lib-serde_json"}}],"rustflags":[],"metadata":16261601059619201932,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/wee_alloc-004b12b376e0e97d/run-build-script-build-script-build.json ---
{"rustc":9788803232347239455,"features":"","target":0,"profile":0,"path":0,"deps":[[3178493835647231921,"build_script_build",false,10244301490102664323]],"local":[{"RerunIfChanged":{"output":"wasm32-unknown-unknown/release/build/wee_alloc-004b12b376e0e97d/output","paths":["./Cargo.toml","./build.rs","./src/lib.rs","./src/imp_static_array.rs"]}},{"RerunIfEnvChanged":{"var":"WEE_ALLOC_STATIC_ARRAY_BACKEND_BYTES","val":null}}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/wee_alloc-1bdacc57f5bb9a71/lib-wee_alloc.json ---
{"rustc":9788803232347239455,"features":"[]","target":7410670272435617587,"profile":6269190295429226618,"path":11555416871187898738,"deps":[[1429323848562539564,"memory_units",false,13092134736402818328],[3178493835647231921,"build_script_build",false,9668523103129741964],[11311719388751911026,"cfg_if",false,8483133151274106210]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/wee_alloc-1bdacc57f5bb9a71/dep-lib-wee_alloc"}}],"rustflags":[],"metadata":11837593470300214873,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/build/wee_alloc-004b12b376e0e97d/out/wee_alloc_static_array_backend_size_bytes.txt ---
33554432
'''