*GitHub Repository "omarr45/near-101-contract"*

'''--- README.md ---
# üë®üèª‚Äçüíª near-101-contract
## The smart contract code for my near-101 project "The Quotes Archive"

You can find the frontend code [here](https://github.com/omarr45/quotes-archive)
<br>
You can also find the deployed version demo [here](https://omarr45.github.io/quotes-archive/)

## Folder Structure
```
my-document/          # Root directory.
|- assembly/          # Folder used to store .ts files.
|--|- index.ts            # Main contract
|--|- model.ts            # Object(s) used in the contract
|--|- as_types.d.ts       # Config files
|--|- tsconfig.json       # Config files
|- build/             # Contains the final .wasm file.
```

## 1Ô∏è‚É£ Model.ts
**`Quote`** -> the main object of the contract

**`listedQuotes : {id : Quote}`** -> Contains all quotes stored on the contract  

**`likedQuotes : {id : [Quotes]}`** -> Contains all quotes liked by each user

## 2Ô∏è‚É£ Index.ts
**`addQuote(quote)`** -> Adds a new quote to the contract after making sure no quote exists with the same id

**`likeQuote(id)`** -> Increments the likes counter and transfers the requires NEAR ammount to the quote owner

**`getQuote(id)`** -> Gets a quote by its unique ID

**`getQuotes()`** -> Gets all quotes stored on the contract

**`getUserQuotes()`** -> Gets all the liked quotes by the current user based on *`context.sender`*

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/index.ts ---
import { ContractPromiseBatch, context } from 'near-sdk-as';
import { Quote, likedQuotes, listedQuotes } from './model';

// add a new quote to the contract
export function addQuote(quote: Quote): string {
  // check if the quote already exists
  let storedQuote = listedQuotes.get(quote.id);
  if (storedQuote !== null) {
    throw new Error(`a quote with ${quote.id} already exists`);
  }

  // add the quote to the contract
  listedQuotes.set(quote.id, Quote.fromPayload(quote));

  // confirm the quote was added
  return `quote ${quote.text} with id ${quote.id} was added successfully`;
}

// Get a quote by its ID
export function getQuote(id: string): Quote | null {
  return listedQuotes.get(id);
}

// Get all quotes
export function getQuotes(): Quote[] {
  return listedQuotes.values();
}

// Like a quote
export function likeQuote(quoteId: string): string {
  // check if the quote exists
  const quote = getQuote(quoteId);
  if (quote == null) {
    throw new Error('quote not found');
  }

  // check if attached deposit is enough to like the quote
  if (quote.price.toString() != context.attachedDeposit.toString()) {
    throw new Error("attached deposit should equal to the quote's price");
  }

  // Send the deposit to the quote owner
  ContractPromiseBatch.create(quote.owner).transfer(context.attachedDeposit);

  // increase the quote likes counter
  quote.incrementLikes();

  // update the quote in the contract (to update likes counter)
  listedQuotes.set(quote.id, quote);

  // Get the old list of liked quotes
  let userQuotes = likedQuotes.get(context.sender);

  // Create a new list if it doesn't exist
  if (!userQuotes) {
    userQuotes = new Array<string>();
  }

  // Add the quote to the list
  userQuotes.push(quoteId);

  // Update the list in storage
  likedQuotes.set(context.sender, userQuotes);

  return `${context.sender} liked "${quote.text}" with id ${quote.id} successfully`;
}

// Get all liked quotes by a user
export function getUserQuotes(): Quote[] {
  let quotes: Quote[] = [];

  const values = likedQuotes.get(context.sender);
  if (values) {
    for (let i = 0; i < values.length; i++) {
      const quote = getQuote(values[i]);
      if (quote) {
        quotes.push(quote);
      }
    }
  }
  return quotes;
}

'''
'''--- assembly/model.ts ---
import { PersistentUnorderedMap, context, u128 } from 'near-sdk-as';

@nearBindgen
export class Quote {
  id: string; // unique ID for the quote
  text: string; // the text of the quote
  character: string; // the person who said the quote
  price: u128; // the price to like the quote
  owner: string; // the owner of the quote
  likes: u32; // the number of likes the quote has

  public static fromPayload(payload: Quote): Quote {
    const quote = new Quote();
    quote.id = payload.id;
    quote.text = payload.text;
    quote.character = payload.character;
    quote.price = payload.price;
    quote.owner = context.sender;
    return quote;
  }

  // increase likes counter
  public incrementLikes(): void {
    this.likes = this.likes + 1;
  }
}

// container for all listed quotes on the contract {quote ID : Quote}
export const listedQuotes = new PersistentUnorderedMap<string, Quote>('lq');

// container for all liked quotes on the contract {user ID : Array of Quotes}
export const likedQuotes = new PersistentUnorderedMap<string, Array<string>>(
  'ulq'
);

'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- package.json ---
{
  "name": "contract",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "devDependencies": {
    "near-sdk-as": "^3.2.3"
  },
  "scripts": {
    "build": "yarn asb",
    "deploy": "near deploy --accountId=near101.omar45.testnet --wasmFile=build/release/contract.wasm",
    "b-deploy": "yarn asb && near deploy --accountId=near101.omar45.testnet --wasmFile=build/release/contract.wasm"
  }
}

'''