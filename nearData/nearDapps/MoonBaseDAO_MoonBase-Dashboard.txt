*GitHub Repository "MoonBaseDAO/MoonBase-Dashboard"*

'''--- .commitlintrc.json ---
{
  "extends": ["@commitlint/config-conventional"]
}

'''
'''--- .env ---
AWS_BUCKET=sputnik-dao
AWS_REGION=eu-central-1
AWS_IDENTITY_POOL_ID=eu-central-1:5887fd21-7b40-4871-a6cb-21097fe079a2
GOOGLE_ANALYTICS_KEY=G-2SWGMFRYJ8
#LOG_ROCKET_APP_ID=mp/astrodao
RELEASE_NOTES=https://astrodao.canny.io/changelog
I18_RELOAD_ON_PRERENDER=false
STATS_API_URL=https://mainnet.api.daostats.io
TOASTS_NOTIFICATIONS_TIMEOUT=20000
APP_DOMAIN=.astrodao.com
#NEXT_PUBLIC_LAUNCHDARKLY_ID=620ac654be1f0913f65d9ca4
NEXT_PUBLIC_LAUNCHDARKLY_SDK_KEY=sdk-6cd2b5bb-ab56-4b34-96d8-b0a7c8af8f1c
NEAR_CONTRACT_NAME=sputnikv2.testnet
ROKETO_CONTRACT_NAME=streaming-r-v2.dcversus.testnet
ROKETO_MULTICALL_NAME=multicall.lebedev.testnet
TOKEN_FACTORY_CONTRACT_NAME=tokens.testnet
DRAFTS_API_URL=https://draft.dev.app.astrodao.com
SEARCH_API_URL=https://search.testnet.app.astrodao.com
GENERIC_FACTORY_CONTRACT_NAME=generic.testnet
STAKING_CONTRACT_BINARY_HASH=FL4gBAJtvfz2GuGE3vdkvyss7ZhXVUF32Q7F7sRCaFmx
API_URL=https://api.testnet.app.astrodao.com
'''
'''--- .github/workflows/node.js.yml ---
# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI - DAO Dashboard

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.13.0]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm i --force
    - run: npm run build --if-present

'''
'''--- .huskyrc.json ---
{
  "hooks": {
    "pre-commit": "",
    "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
  }
}

'''
'''--- CODE_OF_CONDUCT.md ---
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

- Demonstrating empathy and kindness toward other people
- Being respectful of differing opinions, viewpoints, and experiences
- Giving and gracefully accepting constructive feedback
- Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
- Focusing on what is best not just for us as individuals, but for the
  overall community

Examples of unacceptable behavior include:

- The use of sexualized language or imagery, and sexual attention or
  advances of any kind
- Trolling, insulting or derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or email
  address, without their explicit permission
- Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series
of actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior, harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within
the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.0, available at
https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.

Community Impact Guidelines were inspired by [Mozilla's code of conduct
enforcement ladder](https://github.com/mozilla/diversity).

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see the FAQ at
https://www.contributor-covenant.org/faq. Translations are available at
https://www.contributor-covenant.org/translations.

'''
'''--- CONTRIBUTING.md ---
#### Getting involved

All change requests commits should follow the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) specification.
Proposed changes should be small and isolated.

'''
'''--- README.md ---

###### Install dependencies

```bash
yarn install
```

###### Run development server

```bash
yarn dev
```

Open [http://localhost:8080](http://localhost:8080) with your browser to see the result.

##### Known issues

The application can fail loading icons when running locally, in this case just build an application locally before starting development server using this command:

```
yarn build
```

#### Getting involved

All change requests commits should follow the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) specification.
Proposed changes should be small and isolated.

#### Release planning schedule

We are trying to stick to two weeks schedule, the list of issues that are planning for next release can be checked in [Milestones](https://github.com/near-daos/astro-ui/milestones) section

'''
'''--- assets/icons/aAllDaos.colors.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke-width="1" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_6333:45916)">
<path d="M4.1801 4.37431L9.49991 2.68354L9.50014 5.65718L9.50017 6.04006L8.16831 6.46336L7.81976 6.57414V6.93987V7.68873L2.5 9.37948V6.02287L3.83155 5.59967L4.1801 5.48889V5.12316V4.37431ZM10.4999 6.4059V6.02296L11.8317 5.59967L12.1802 5.48889V5.12316V4.37431L17.5 2.68356V6.04016L16.1685 6.46336L15.8199 6.57414V6.93987V7.68873L10.4999 9.37957V6.4059ZM12.1802 13.0601V12.3113L17.5 10.6205V13.9771L16.1685 14.4003L15.8199 14.5111V14.8768V15.6257L10.5001 17.3165L10.4999 14.3428L10.4998 13.9599L11.8317 13.5366L12.1802 13.4259V13.0601ZM9.50014 13.5941V13.977L8.16831 14.4003L7.81976 14.5111V14.8768V15.6257L2.5 17.3164V13.9598L3.83155 13.5366L4.1801 13.4259V13.0601V12.3113L9.50014 10.6204V13.5941Z" stroke="#6038D0"/>
<rect x="-1292" y="-824" width="13972" height="25758" stroke="#13A36E" stroke-width="40"/>
</g>
<defs>
<clipPath id="clip0_6333:45916">
<rect width="20" height="20" fill="white"/>
</clipPath>
</defs>
</svg>

'''
'''--- assets/icons/aAllDaosHover.colors.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.1801 4.37431L9.49991 2.68354L9.50014 5.65718L9.50017 6.04006L8.16831 6.46336L7.81976 6.57414V6.93987V7.68873L2.5 9.37948V6.02287L3.83155 5.59967L4.1801 5.48889V5.12316V4.37431ZM10.4999 6.4059V6.02296L11.8317 5.59967L12.1802 5.48889V5.12316V4.37431L17.5 2.68356V6.04016L16.1685 6.46336L15.8199 6.57414V6.93987V7.68873L10.4999 9.37957V6.4059ZM12.1802 13.0601V12.3113L17.5 10.6205V13.9771L16.1685 14.4003L15.8199 14.5111V14.8768V15.6257L10.5001 17.3165L10.4999 14.3428L10.4998 13.9599L11.8317 13.5366L12.1802 13.4259V13.0601ZM9.50014 13.5941V13.977L8.16831 14.4003L7.81976 14.5111V14.8768V15.6257L2.5 17.3164V13.9598L3.83155 13.5366L4.1801 13.4259V13.0601V12.3113L9.50014 10.6204V13.5941Z" fill="#4B28AB" stroke="#4B28AB"/>
</svg>

'''
'''--- assets/icons/aAstroFeed.colors.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" stroke-width="2">
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.22266 3.45343C2.22266 3.22867 2.27148 3.01803 2.35645 2.83669C2.43164 2.67773 2.53418 2.54132 2.65723 2.43765C2.81836 2.30198 3.0127 2.22266 3.22266 2.22266H17.2227C17.7754 2.22266 18.2227 2.77374 18.2227 3.45343V16.9919C18.2227 17.6716 17.7754 18.2227 17.2227 18.2227H3.22266C2.66992 18.2227 2.22266 17.6716 2.22266 16.9919V3.45343ZM3.22266 4.68419C3.22266 4.00451 3.66992 3.45343 4.22266 3.45343H16.2227C16.7754 3.45343 17.2227 4.00451 17.2227 4.68419V10.838C17.2227 11.5177 16.7754 12.0688 16.2227 12.0688H4.22266C3.66992 12.0688 3.22266 11.5177 3.22266 10.838V4.68419ZM7.72266 15.7611C7.44629 15.7611 7.22266 16.0367 7.22266 16.3765C7.22266 16.7163 7.44629 16.9919 7.72266 16.9919H16.7227C16.999 16.9919 17.2227 16.7163 17.2227 16.3765C17.2227 16.0367 16.999 15.7611 16.7227 15.7611H7.72266ZM7.22266 13.915C7.22266 13.5751 7.44629 13.2996 7.72266 13.2996H16.7227C16.999 13.2996 17.2227 13.5751 17.2227 13.915C17.2227 14.2548 16.999 14.5303 16.7227 14.5303H7.72266C7.44629 14.5303 7.22266 14.2548 7.22266 13.915ZM6.22266 15.1457C6.22266 16.1653 5.55078 16.9919 4.72266 16.9919C3.89453 16.9919 3.22266 16.1653 3.22266 15.1457C3.22266 14.1262 3.89453 13.2996 4.72266 13.2996C5.55078 13.2996 6.22266 14.1262 6.22266 15.1457Z" fill="#4B28AB"/>
</svg>

'''
'''--- assets/icons/aAstroFeedHover.colors.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="2" y="2" width="16" height="16" rx="2" fill="#C1B0F1"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2 3.23077C2 3.00601 2.04883 2.79537 2.13379 2.61403C2.20898 2.45508 2.31152 2.31866 2.43457 2.21499C2.5957 2.07933 2.79004 2 3 2H17C17.5527 2 18 2.55108 18 3.23077V16.7692C18 17.4489 17.5527 18 17 18H3C2.44727 18 2 17.4489 2 16.7692V3.23077ZM3 4.46154C3 3.78185 3.44727 3.23077 4 3.23077H16C16.5527 3.23077 17 3.78185 17 4.46154V10.6154C17 11.2951 16.5527 11.8462 16 11.8462H4C3.44727 11.8462 3 11.2951 3 10.6154V4.46154ZM7.5 15.5385C7.22363 15.5385 7 15.814 7 16.1538C7 16.4937 7.22363 16.7692 7.5 16.7692H16.5C16.7764 16.7692 17 16.4937 17 16.1538C17 15.814 16.7764 15.5385 16.5 15.5385H7.5ZM7 13.6923C7 13.3525 7.22363 13.0769 7.5 13.0769H16.5C16.7764 13.0769 17 13.3525 17 13.6923C17 14.0322 16.7764 14.3077 16.5 14.3077H7.5C7.22363 14.3077 7 14.0322 7 13.6923ZM6 14.9231C6 15.9426 5.32812 16.7692 4.5 16.7692C3.67188 16.7692 3 15.9426 3 14.9231C3 13.9035 3.67188 13.0769 4.5 13.0769C5.32812 13.0769 6 13.9035 6 14.9231Z" fill="#4B28AB"/>
</svg>

'''
'''--- assets/icons/aCreateDao.colors.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="20" height="20" fill="white"/>
<mask id="path-1-inside-1_6165:46282" fill="white">
<path fill-rule="evenodd" clip-rule="evenodd" d="M5.2481 6.20835L16.6243 2.22266V9.48573C16.3615 9.45351 16.0938 9.43691 15.822 9.43691C12.2913 9.43691 9.4283 12.2397 9.42189 15.6995L2.22266 18.2218V9.47897L5.2481 8.419V6.20835Z"/>
</mask>
<path d="M16.6243 2.22266H17.6243V0.812707L16.2937 1.2789L16.6243 2.22266ZM5.2481 6.20835L4.91746 5.26459L4.2481 5.4991V6.20835H5.2481ZM16.6243 9.48573L16.5026 10.4783L17.6243 10.6158V9.48573H16.6243ZM9.42189 15.6995L9.75253 16.6433L10.4206 16.4092L10.4219 15.7014L9.42189 15.6995ZM2.22266 18.2218H1.22266V19.6317L2.5533 19.1655L2.22266 18.2218ZM2.22266 9.47897L1.89201 8.53521L1.22266 8.76972V9.47897H2.22266ZM5.2481 8.419L5.57875 9.36275L6.2481 9.12824V8.419H5.2481ZM16.2937 1.2789L4.91746 5.26459L5.57875 7.1521L16.955 3.16641L16.2937 1.2789ZM17.6243 9.48573V2.22266H15.6243V9.48573H17.6243ZM15.822 10.4369C16.053 10.4369 16.2801 10.451 16.5026 10.4783L16.746 8.49316C16.4429 8.456 16.1345 8.43691 15.822 8.43691V10.4369ZM10.4219 15.7014C10.4272 12.8116 12.8242 10.4369 15.822 10.4369V8.43691C11.7584 8.43691 8.42936 11.6678 8.42189 15.6977L10.4219 15.7014ZM2.5533 19.1655L9.75253 16.6433L9.09124 14.7558L1.89201 17.278L2.5533 19.1655ZM1.22266 9.47897V18.2218H3.22266V9.47897H1.22266ZM4.91746 7.47524L1.89201 8.53521L2.5533 10.4227L5.57875 9.36275L4.91746 7.47524ZM4.2481 6.20835V8.419H6.2481V6.20835H4.2481Z" fill="#4B28AB" mask="url(#path-1-inside-1_6165:46282)"/>
<path d="M15.8223 13.3594V18.0651" stroke="#4B28AB" stroke-linecap="square" stroke-linejoin="round"/>
<path d="M18.222 15.7129H13.4219" stroke="#4B28AB" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/aCreateDaoHover.colors.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.02469 5.98624L16.4028 2V9.26498C16.1403 9.23284 15.8728 9.21628 15.6014 9.21628C12.0702 9.21628 9.20681 12.0193 9.20023 15.4794L2 18.002V9.25797L5.02469 8.19829V5.98624Z" fill="#4B28AB"/>
<path d="M15.6011 13.1367V17.8431M17.9999 15.4906H13.199M16.4028 2L5.02469 5.98624V8.19829L2 9.25797V18.002L9.20023 15.4794C9.20681 12.0193 12.0702 9.21628 15.6014 9.21628C15.8728 9.21628 16.1403 9.23284 16.4028 9.26498V2Z" stroke="#4B28AB" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/aDiscover.colors.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
    <mask id="path-1-inside-1_8306_51754" fill="white">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M4.64648 5.48739L14.6007 2V8.35506C14.3711 8.32697 14.1373 8.3125 13.8999 8.3125C10.8105 8.3125 8.3053 10.765 8.29981 13.7924L6.97711 14.2558L2 15.9994V8.34969L4.64648 7.42252V5.48739Z"/>
    </mask>
    <path d="M14.6007 2H15.6007V0.590063L14.2701 1.05624L14.6007 2ZM4.64648 5.48739L4.31585 4.54363L3.64648 4.77814V5.48739H4.64648ZM14.6007 8.35506L14.4792 9.34766L15.6007 9.4849V8.35506H14.6007ZM8.29981 13.7924L8.63045 14.7361L9.29853 14.5021L9.29981 13.7942L8.29981 13.7924ZM6.97711 14.2558L6.64647 13.312H6.64647L6.97711 14.2558ZM2 15.9994H1V17.4094L2.33064 16.9432L2 15.9994ZM2 8.34969L1.66936 7.40593L1 7.64044V8.34969H2ZM4.64648 7.42252L4.97712 8.36627L5.64648 8.13177V7.42252H4.64648ZM14.2701 1.05624L4.31585 4.54363L4.97712 6.43115L14.9313 2.94376L14.2701 1.05624ZM15.6007 8.35506V2H13.6007V8.35506H15.6007ZM13.8999 9.3125C14.0966 9.3125 14.2899 9.32449 14.4792 9.34766L14.7222 7.36247C14.4524 7.32946 14.178 7.3125 13.8999 7.3125V9.3125ZM9.29981 13.7942C9.30427 11.3369 11.3433 9.3125 13.8999 9.3125V7.3125C10.2776 7.3125 7.30634 10.1931 7.29982 13.7905L9.29981 13.7942ZM7.30774 15.1995L8.63045 14.7361L7.96918 12.8486L6.64647 13.312L7.30774 15.1995ZM2.33064 16.9432L7.30775 15.1995L6.64647 13.312L1.66936 15.0557L2.33064 16.9432ZM1 8.34969V15.9994H3V8.34969H1ZM4.31585 6.47876L1.66936 7.40593L2.33064 9.29345L4.97712 8.36627L4.31585 6.47876ZM3.64648 5.48739V7.42252H5.64648V5.48739H3.64648Z" fill="#4B28AB" mask="url(#path-1-inside-1_8306_51754)"/>
    <path d="M14.8462 12.9615C14.8462 12.4427 14.6618 11.9989 14.293 11.6301C13.9242 11.2613 13.4804 11.0769 12.9615 11.0769C12.4427 11.0769 11.9989 11.2613 11.6301 11.6301C11.2613 11.9989 11.0769 12.4427 11.0769 12.9615C11.0769 13.4804 11.2613 13.9242 11.6301 14.293C11.9989 14.6618 12.4427 14.8462 12.9615 14.8462C13.4804 14.8462 13.9242 14.6618 14.293 14.293C14.6618 13.9242 14.8462 13.4804 14.8462 12.9615ZM17 16.4615C17 16.6074 16.9467 16.7336 16.8401 16.8401C16.7336 16.9467 16.6074 17 16.4615 17C16.3101 17 16.1839 16.9467 16.0829 16.8401L14.64 15.4014C14.138 15.7492 13.5785 15.9231 12.9615 15.9231C12.5605 15.9231 12.177 15.8453 11.811 15.6896C11.445 15.534 11.1295 15.3236 10.8645 15.0586C10.5995 14.7936 10.3891 14.4781 10.2335 14.1121C10.0778 13.7461 10 13.3626 10 12.9615C10 12.5605 10.0778 12.177 10.2335 11.811C10.3891 11.445 10.5995 11.1295 10.8645 10.8645C11.1295 10.5995 11.445 10.3891 11.811 10.2335C12.177 10.0778 12.5605 10 12.9615 10C13.3626 10 13.7461 10.0778 14.1121 10.2335C14.4781 10.3891 14.7936 10.5995 15.0586 10.8645C15.3236 11.1295 15.534 11.445 15.6896 11.811C15.8453 12.177 15.9231 12.5605 15.9231 12.9615C15.9231 13.5785 15.7492 14.138 15.4014 14.64L16.8444 16.0829C16.9481 16.1867 17 16.3129 17 16.4615Z" fill="#4B28AB"/>
</svg>

'''
'''--- assets/icons/aMyDaos.colors.svg ---
<svg width="20" height="20" stroke-width="1" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="path-1-inside-1_6165:46292" fill="white">
<path fill-rule="evenodd" stroke-width="1" clip-rule="evenodd" d="M15.0223 2.22266L4.9107 6.0572V8.1835L2.22266 9.20287V17.6141L12.3343 13.7796V11.6533L15.0223 10.6339V2.22266Z"/>
</mask>
<path stroke-width="1" d="M4.9107 6.0572L4.55612 5.12218L3.9107 5.36693V6.0572H4.9107ZM15.0223 2.22266H16.0223V0.773945L14.6678 1.28763L15.0223 2.22266ZM4.9107 8.1835L5.26528 9.11853L5.9107 8.87377V8.1835H4.9107ZM2.22266 9.20287L1.86807 8.26784L1.22266 8.5126V9.20287H2.22266ZM2.22266 17.6141H1.22266V19.0628L2.57724 18.5491L2.22266 17.6141ZM12.3343 13.7796L12.6889 14.7146L13.3343 14.4698V13.7796H12.3343ZM12.3343 11.6533L11.9797 10.7183L11.3343 10.963V11.6533H12.3343ZM15.0223 10.6339L15.3769 11.5689L16.0223 11.3242V10.6339H15.0223ZM5.26528 6.99223L15.3769 3.15768L14.6678 1.28763L4.55612 5.12218L5.26528 6.99223ZM5.9107 8.1835V6.0572H3.9107V8.1835H5.9107ZM2.57724 10.1379L5.26528 9.11853L4.55612 7.24848L1.86807 8.26784L2.57724 10.1379ZM3.22266 17.6141V9.20287H1.22266V17.6141H3.22266ZM11.9797 12.8446L1.86807 16.6791L2.57724 18.5491L12.6889 14.7146L11.9797 12.8446ZM11.3343 11.6533V13.7796H13.3343V11.6533H11.3343ZM14.6678 9.69889L11.9797 10.7183L12.6889 12.5883L15.3769 11.5689L14.6678 9.69889ZM14.0223 2.22266V10.6339H16.0223V2.22266H14.0223Z" fill="#4B28AB" mask="url(#path-1-inside-1_6165:46292)"/>
<path stroke-width="1" d="M18.2238 17.9801V16.27C18.2238 15.3628 17.9148 14.4929 17.3646 13.8514C16.8145 13.21 16.0684 12.8496 15.2904 12.8496H9.42363C8.64564 12.8496 7.89952 13.21 7.34941 13.8514C6.79929 14.4929 6.49023 15.3628 6.49023 16.27V17.9801" fill="white"/>
<path stroke-width="1" d="M12.5108 13.9587C14.5727 13.9587 16.2442 12.2881 16.2442 10.2274C16.2442 8.16665 14.5727 6.49609 12.5108 6.49609C10.4488 6.49609 8.77734 8.16665 8.77734 10.2274C8.77734 12.2881 10.4488 13.9587 12.5108 13.9587Z" fill="white"/>
<path stroke-width="1" d="M17.4895 18.2218V16.756C17.4895 15.9784 17.2191 15.2327 16.7378 14.6829C16.2564 14.1331 15.6036 13.8242 14.9228 13.8242H9.78938C9.10864 13.8242 8.45578 14.1331 7.97443 14.6829C7.49308 15.2327 7.22266 15.9784 7.22266 16.756V18.2218" fill="#4B28AB"/>
<path stroke-width="1" d="M12.5124 12.8929C13.9852 12.8929 15.1791 11.6997 15.1791 10.2277C15.1791 8.75576 13.9852 7.5625 12.5124 7.5625C11.0396 7.5625 9.8457 8.75576 9.8457 10.2277C9.8457 11.6997 11.0396 12.8929 12.5124 12.8929Z" fill="#4B28AB"/>
</svg>

'''
'''--- assets/icons/aMyDaosHover.colors.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M14.803 2L4.69029 5.83462V7.96239L2 8.98251V17.3939L12.1127 13.5593V11.4315L14.803 10.4114V2Z" fill="#4B28AB"/>
<path d="M17.9985 17.7537V16.0435C17.9985 15.1363 17.6894 14.2663 17.1392 13.6249C16.589 12.9834 15.8428 12.623 15.0648 12.623H9.19737C8.41931 12.623 7.67311 12.9834 7.12293 13.6249C6.57276 14.2663 6.26367 15.1363 6.26367 16.0435V17.7537" fill="white"/>
<path d="M12.2865 13.7342C14.3487 13.7342 16.0203 12.0636 16.0203 10.0029C16.0203 7.94208 14.3487 6.27148 12.2865 6.27148C10.2244 6.27148 8.55273 7.94208 8.55273 10.0029C8.55273 12.0636 10.2244 13.7342 12.2865 13.7342Z" fill="white"/>
<path d="M17.2641 18.0012V16.5353C17.2641 15.7577 16.9936 15.012 16.5122 14.4622C16.0308 13.9124 15.3779 13.6035 14.6971 13.6035H9.56308C8.88228 13.6035 8.22935 13.9124 7.74795 14.4622C7.26654 15.012 6.99609 15.7577 6.99609 16.5353V18.0012" fill="#4B28AB"/>
<path d="M12.2861 12.6704C13.7591 12.6704 14.9531 11.4771 14.9531 10.0051C14.9531 8.53312 13.7591 7.33984 12.2861 7.33984C10.8132 7.33984 9.61914 8.53312 9.61914 10.0051C9.61914 11.4771 10.8132 12.6704 12.2861 12.6704Z" fill="#4B28AB"/>
</svg>

'''
'''--- assets/icons/aMyFeed.colors.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.22266 3.45331C2.22266 3.22857 2.27112 3.01795 2.35546 2.83663C2.4301 2.67769 2.53188 2.54129 2.65402 2.43763C2.81396 2.30198 3.00686 2.22266 3.21527 2.22266H17.1119C17.6606 2.22266 18.1045 2.77369 18.1045 3.45331V16.9905C18.1045 17.6701 17.6606 18.2211 17.1119 18.2211H3.21527C2.66662 18.2211 2.22266 17.6701 2.22266 16.9905V3.45331ZM3.21527 4.68396C3.21527 4.00434 3.65924 3.45331 4.20789 3.45331H16.1193C16.668 3.45331 17.1119 4.00434 17.1119 4.68396V10.8372C17.1119 11.5168 16.668 12.0679 16.1193 12.0679H4.20789C3.65924 12.0679 3.21527 11.5168 3.21527 10.8372V4.68396ZM7.68206 15.7598C7.40773 15.7598 7.18575 16.0353 7.18575 16.3752C7.18575 16.715 7.40773 16.9905 7.68206 16.9905H16.6156C16.8899 16.9905 17.1119 16.715 17.1119 16.3752C17.1119 16.0353 16.8899 15.7598 16.6156 15.7598H7.68206ZM7.18575 13.9139C7.18575 13.574 7.40773 13.2985 7.68206 13.2985H16.6156C16.8899 13.2985 17.1119 13.574 17.1119 13.9139C17.1119 14.2537 16.8899 14.5292 16.6156 14.5292H7.68206C7.40773 14.5292 7.18575 14.2537 7.18575 13.9139ZM6.19313 15.1445C6.19313 16.1639 5.52621 16.9905 4.7042 16.9905C3.88219 16.9905 3.21527 16.1639 3.21527 15.1445C3.21527 14.1251 3.88219 13.2985 4.7042 13.2985C5.52621 13.2985 6.19313 14.1251 6.19313 15.1445Z" fill="#4B28AB"/>
<path d="M19.2236 18.2211V16.5198C19.2236 15.6174 18.9347 14.7519 18.4205 14.1138C17.9063 13.4757 17.2089 13.1172 16.4817 13.1172H10.9978C10.2706 13.1172 9.57317 13.4757 9.05895 14.1138C8.54474 14.7519 8.25586 15.6174 8.25586 16.5198V18.2211" fill="white"/>
<path d="M13.8823 14.2188C15.8096 14.2188 17.3721 12.5569 17.3721 10.5068C17.3721 8.45681 15.8096 6.79492 13.8823 6.79492C11.955 6.79492 10.3926 8.45681 10.3926 10.5068C10.3926 12.5569 11.955 14.2188 13.8823 14.2188Z" fill="white"/>
<path d="M18.5362 18.2231V16.7945C18.5362 16.0368 18.2835 15.3101 17.8335 14.7743C17.3836 14.2385 16.7733 13.9375 16.137 13.9375H11.3386C10.7023 13.9375 10.0921 14.2385 9.64216 14.7743C9.19222 15.3101 8.93945 16.0368 8.93945 16.7945V18.2231" fill="#4B28AB"/>
<path d="M13.8852 13.0306C15.2619 13.0306 16.3779 11.8677 16.3779 10.4332C16.3779 8.99879 15.2619 7.83594 13.8852 7.83594C12.5086 7.83594 11.3926 8.99879 11.3926 10.4332C11.3926 11.8677 12.5086 13.0306 13.8852 13.0306Z" fill="#4B28AB"/>
</svg>

'''
'''--- assets/icons/aMyFeedHover.colors.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="2" y="2" width="15.3542" height="14.8571" rx="2" fill="#C1B0F1"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2 3.23076C2 3.006 2.04847 2.79537 2.1328 2.61403C2.20743 2.45508 2.30921 2.31866 2.43134 2.21499C2.59128 2.07933 2.78417 2 2.99258 2H16.8887C17.4373 2 17.8812 2.55108 17.8812 3.23076V16.7692C17.8812 17.4488 17.4373 17.9999 16.8887 17.9999H2.99258C2.44395 17.9999 2 17.4488 2 16.7692V3.23076ZM2.99258 4.46153C2.99258 3.78184 3.43652 3.23076 3.98515 3.23076H15.8961C16.4447 3.23076 16.8887 3.78184 16.8887 4.46153V10.6153C16.8887 11.295 16.4447 11.8461 15.8961 11.8461H3.98515C3.43652 11.8461 2.99258 11.295 2.99258 10.6153V4.46153ZM7.45918 15.5384C7.18486 15.5384 6.96289 15.8139 6.96289 16.1538C6.96289 16.4936 7.18486 16.7692 7.45918 16.7692H16.3924C16.6667 16.7692 16.8887 16.4936 16.8887 16.1538C16.8887 15.8139 16.6667 15.5384 16.3924 15.5384H7.45918ZM6.96289 13.6923C6.96289 13.3524 7.18486 13.0769 7.45918 13.0769H16.3924C16.6667 13.0769 16.8887 13.3524 16.8887 13.6923C16.8887 14.0321 16.6667 14.3076 16.3924 14.3076H7.45918C7.18486 14.3076 6.96289 14.0321 6.96289 13.6923ZM5.97031 14.923C5.97031 15.9425 5.30342 16.7692 4.48144 16.7692C3.65947 16.7692 2.99258 15.9425 2.99258 14.923C2.99258 13.9035 3.65947 13.0769 4.48144 13.0769C5.30342 13.0769 5.97031 13.9035 5.97031 14.923Z" fill="#4B28AB"/>
<path d="M20 17.9969V16.2955C20 15.393 19.6848 14.5274 19.1238 13.8893C18.5627 13.2511 17.8017 12.8926 17.0083 12.8926H11.0249C10.2315 12.8926 9.4705 13.2511 8.90945 13.8893C8.3484 14.5274 8.0332 15.393 8.0332 16.2955V17.9969" fill="white"/>
<path d="M14.1729 13.9948C16.2757 13.9948 17.9805 12.3328 17.9805 10.2826C17.9805 8.23235 16.2757 6.57031 14.1729 6.57031C12.07 6.57031 10.3652 8.23235 10.3652 10.2826C10.3652 12.3328 12.07 13.9948 14.1729 13.9948Z" fill="white"/>
<path d="M19.2522 17.9988V16.5702C19.2522 15.8124 18.9764 15.0856 18.4855 14.5498C17.9946 14.0139 17.3287 13.7129 16.6345 13.7129H11.399C10.7047 13.7129 10.0389 14.0139 9.54797 14.5498C9.05705 15.0856 8.78125 15.8124 8.78125 16.5702V17.9988" fill="#4B28AB"/>
<path d="M14.1768 12.8064C15.6788 12.8064 16.8965 11.6435 16.8965 10.2089C16.8965 8.77429 15.6788 7.61133 14.1768 7.61133C12.6747 7.61133 11.457 8.77429 11.457 10.2089C11.457 11.6435 12.6747 12.8064 14.1768 12.8064Z" fill="#4B28AB"/>
</svg>

'''
'''--- assets/icons/account.svg ---
<svg width="38" height="38" viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="19" cy="19" r="18.5" fill="white" stroke="#201F1F"/>
  <path d="M19 11C20.0609 11 21.0783 11.4214 21.8284 12.1716C22.5786 12.9217 23 13.9391 23 15C23 16.0609 22.5786 17.0783 21.8284 17.8284C21.0783 18.5786 20.0609 19 19 19C17.9391 19 16.9217 18.5786 16.1716 17.8284C15.4214 17.0783 15 16.0609 15 15C15 13.9391 15.4214 12.9217 16.1716 12.1716C16.9217 11.4214 17.9391 11 19 11V11ZM19 21C23.42 21 27 22.79 27 25V27H11V25C11 22.79 14.58 21 19 21Z" fill="#434343"/>
</svg>

'''
'''--- assets/icons/alertTriangle.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M9.75 10.5H8.25V6.75H9.75V10.5ZM9.75 13.5H8.25V12H9.75V13.5ZM0.75 15.75H17.25L9 1.5L0.75 15.75Z" fill="#FF8743"/>
</svg>

'''
'''--- assets/icons/allCommunity.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M12.4999 11.3796V9.08946C12.4999 8.41279 11.8418 7.93147 11.197 8.13643L10.5169 8.35258C10.1017 8.48452 9.81976 8.87001 9.81976 9.30561V9.68873L4.5 11.3795L4.5 8.02287L5.48299 7.71045C5.89813 7.57851 6.1801 7.19302 6.1801 6.75743V6.37431L11.4999 4.68354L11.5001 6.97367C11.5001 7.65031 12.1581 8.13157 12.803 7.92662L13.4831 7.71045C13.8983 7.57851 14.1802 7.19302 14.1802 6.75743V6.3743L19.5 4.68356L19.5 8.04016L18.517 8.35258C18.1019 8.48452 17.8199 8.87001 17.8199 9.30561V9.68873L12.4999 11.3796ZM11.5001 12.6204V15.5941V15.977L10.5169 16.2895C10.1017 16.4215 9.81976 16.807 9.81976 17.2426V17.6257L4.5 19.3164L4.5 15.9598L4.34855 15.4833L4.5 15.9598L5.48299 15.6474C5.89813 15.5155 6.1801 15.13 6.1801 14.6944L6.1801 14.3113L11.5001 12.6204ZM12.4999 16.3428L12.4998 15.9599L13.4831 15.6474C13.8983 15.5155 14.1802 15.13 14.1802 14.6944L14.1802 14.3113L19.5 12.6205V15.9771L18.517 16.2895C18.1019 16.4215 17.8199 16.807 17.8199 17.2426V17.6257L12.5001 19.3165L12.4999 16.3428Z" fill="#19D992" stroke="#19D992"/>
</svg>

'''
'''--- assets/icons/allcommunities.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M4 6C4 5.81738 4.04883 5.64624 4.13379 5.4989C4.20898 5.36975 4.31152 5.25891 4.43457 5.17468C4.5957 5.06445 4.79004 5 5 5H19C19.5527 5 20 5.44775 20 6V17C20 17.5522 19.5527 18 19 18H5C4.44727 18 4 17.5522 4 17V6ZM5 7C5 6.44775 5.44727 6 6 6H18C18.5527 6 19 6.44775 19 7V12C19 12.5522 18.5527 13 18 13H6C5.44727 13 5 12.5522 5 12V7ZM9.5 16C9.22363 16 9 16.2239 9 16.5C9 16.7761 9.22363 17 9.5 17H18.5C18.7764 17 19 16.7761 19 16.5C19 16.2239 18.7764 16 18.5 16H9.5ZM9 14.5C9 14.2239 9.22363 14 9.5 14H18.5C18.7764 14 19 14.2239 19 14.5C19 14.7761 18.7764 15 18.5 15H9.5C9.22363 15 9 14.7761 9 14.5ZM8 15.5C8 16.3284 7.32812 17 6.5 17C5.67188 17 5 16.3284 5 15.5C5 14.6716 5.67188 14 6.5 14C7.32812 14 8 14.6716 8 15.5Z" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/app-logo.svg ---
<svg width="151" height="33" viewBox="0 0 151 33" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M108.74 19.5416C112.317 17.9583 114.357 14.968 114.357 10.4841C114.357 6.15037 112.046 3.05899 108.469 1.83399C106.657 1.20127 103.846 0.929688 100.862 0.929688H90.7323C90.6556 0.929688 90.5822 0.960126 90.528 1.01431C90.4738 1.06849 90.4434 1.14198 90.4434 1.2186V9.94382C90.4434 9.94382 90.4434 15.1038 95.6034 15.1038C95.6034 15.1038 90.4434 15.1038 90.4434 20.2638V31.8435C90.4434 31.9202 90.4738 31.9937 90.528 32.0478C90.5822 32.102 90.6556 32.1325 90.7323 32.1325H97.2213C97.2979 32.1325 97.3714 32.102 97.4256 32.0478C97.4798 31.9937 97.5102 31.9202 97.5102 31.8435V20.9024H101.985L108.379 31.988C108.404 32.0317 108.441 32.068 108.484 32.0933C108.528 32.1187 108.577 32.1322 108.628 32.1325H115.746C115.797 32.1322 115.847 32.1186 115.89 32.0931C115.934 32.0676 115.97 32.0311 115.995 31.9872C116.021 31.9434 116.034 31.8937 116.034 31.8431C116.034 31.7925 116.02 31.7429 115.995 31.6991L108.74 19.5416ZM105.207 14.5087C104.213 14.9623 102.673 15.0865 100.584 15.0865H97.5102V6.99689H100.454C102.13 6.99689 103.759 7.17891 104.846 7.54294C106.386 8.0861 107.2 9.21865 107.2 10.9377C107.2 12.7492 106.608 13.8355 105.207 14.5087Z" fill="#201F1F"/>
<path d="M59.9023 1.2186V6.93911C59.9023 7.01574 59.9328 7.08922 59.987 7.1434C60.0412 7.19759 60.1146 7.22802 60.1913 7.22802H74.0303C68.8702 7.22802 68.8703 12.388 68.8703 12.388V31.8435C68.8703 31.9202 68.9007 31.9937 68.9549 32.0478C69.0091 32.102 69.0825 32.1325 69.1592 32.1325H75.6049C75.6815 32.1325 75.755 32.102 75.8091 32.0478C75.8633 31.9937 75.8938 31.9202 75.8938 31.8435V7.22514H84.8501C84.9267 7.22514 85.0002 7.1947 85.0544 7.14051C85.1086 7.08633 85.139 7.01285 85.139 6.93622V1.2186C85.139 1.14198 85.1086 1.06849 85.0544 1.01431C85.0002 0.960126 84.9267 0.929688 84.8501 0.929688H60.1913C60.1146 0.929688 60.0412 0.960126 59.987 1.01431C59.9328 1.06849 59.9023 1.14198 59.9023 1.2186Z" fill="#201F1F"/>
<path d="M48.1332 13.5559L43.9816 12.2789C40.9219 11.3659 40.3297 10.4963 40.3297 9.17304C40.3297 7.52911 41.2426 6.20588 44.9523 6.20588C48.1044 6.20588 52.3947 7.43955 54.813 9.67286H54.995V2.68979C54.9954 2.64758 54.9866 2.60578 54.9691 2.56735C54.9516 2.52891 54.9259 2.49477 54.8939 2.46733C53.1344 1.02276 48.7718 0 45.6833 0C37.3307 0 33.1328 4.19793 33.1328 9.62952C33.1328 14.1944 35.5048 17.3435 40.9335 18.895L44.8599 20.0362C48.009 20.903 49.4247 21.6801 49.4247 23.4136C49.4247 25.7885 47.5988 26.427 44.4929 26.427C41.5113 26.427 37.2845 25.436 34.1065 23.064C34.0562 23.0281 33.9957 23.0091 33.9339 23.0101C33.872 23.011 33.8122 23.0318 33.763 23.0693C33.7139 23.1068 33.678 23.1591 33.6608 23.2185C33.6436 23.2779 33.6459 23.3412 33.6673 23.3992L36.7962 31.4426C36.8116 31.4825 36.8357 31.5185 36.8667 31.5479C36.8976 31.5774 36.9348 31.5996 36.9754 31.613C39.2836 32.375 41.6982 32.7651 44.1289 32.7687C53.2586 32.7687 56.636 27.9294 56.636 22.8647C56.6245 18.349 54.6165 15.5638 48.1332 13.5559Z" fill="#201F1F"/>
<path d="M30.8252 31.7425L18.9133 1.11756C18.8919 1.06381 18.8548 1.01772 18.8069 0.985264C18.759 0.952811 18.7025 0.935491 18.6446 0.935547H12.1989C12.141 0.935491 12.0845 0.952811 12.0366 0.985264C11.9887 1.01772 11.9516 1.06381 11.9302 1.11756L0.0182762 31.7425C0.00200368 31.786 -0.00351903 31.8329 0.00217638 31.879C0.00787179 31.9252 0.0246176 31.9692 0.0509915 32.0075C0.0773655 32.0458 0.112588 32.0772 0.15367 32.0989C0.194751 32.1207 0.240478 32.1322 0.286967 32.1325H7.09957C7.15728 32.1318 7.21343 32.1138 7.26081 32.0808C7.30818 32.0479 7.3446 32.0015 7.36537 31.9476L9.92227 25.2477V25.2304L15.2614 9.94101L18.7024 19.2267C12.1556 19.2267 10.0552 24.8606 9.92227 25.2304V25.2477H20.7017L23.2586 31.9476C23.2793 32.0015 23.3157 32.0479 23.3631 32.0808C23.4105 32.1138 23.4667 32.1318 23.5244 32.1325H30.5623C30.6083 32.1313 30.6534 32.1191 30.6937 32.097C30.734 32.0748 30.7685 32.0434 30.7942 32.0052C30.8199 31.9671 30.8362 31.9233 30.8415 31.8776C30.8469 31.8319 30.8413 31.7856 30.8252 31.7425Z" fill="#201F1F"/>
<path d="M134.343 0.0644531C131.086 0.0644531 127.902 1.03029 125.194 2.83983C122.486 4.64937 120.375 7.22134 119.129 10.2305C117.882 13.2397 117.556 16.5508 118.191 19.7453C118.827 22.9399 120.395 25.8742 122.698 28.1773C125.002 30.4804 127.936 32.0488 131.13 32.6843C134.325 33.3197 137.636 32.9936 140.645 31.7471C143.654 30.5007 146.226 28.3899 148.036 25.6818C149.845 22.9736 150.811 19.7897 150.811 16.5326C150.811 12.165 149.076 7.97623 145.988 4.88786C142.899 1.79948 138.711 0.0644531 134.343 0.0644531ZM134.343 30.2531C134.343 26.6142 132.898 23.1243 130.324 20.5512C127.751 17.9781 124.262 16.5326 120.623 16.5326C124.262 16.5326 127.751 15.087 130.324 12.5139C132.898 9.94082 134.343 6.45095 134.343 2.81203C134.343 6.45095 135.789 9.94082 138.362 12.5139C140.935 15.087 144.425 16.5326 148.064 16.5326C144.425 16.5326 140.935 17.9781 138.362 20.5512C135.789 23.1243 134.343 26.6142 134.343 30.2531Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/arrow.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M12.667 8L3.33366 8" stroke="#434343" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M8 12.6666L3.33333 7.99996L8 3.33329" stroke="#434343" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/astro.svg ---
<svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M11.0803 0.0427246C8.92062 0.0427246 6.80942 0.683153 5.01368 1.88302C3.21795 3.08289 1.81834 4.78831 0.99186 6.78362C0.165375 8.77893 -0.0508699 10.9745 0.370468 13.0927C0.791807 15.2109 1.8318 17.1566 3.35894 18.6838C4.88609 20.2109 6.83179 21.2509 8.95 21.6723C11.0682 22.0936 13.2638 21.8774 15.2591 21.0509C17.2544 20.2244 18.9598 18.8248 20.1597 17.0291C21.3596 15.2333 22 13.1221 22 10.9624C22 8.06633 20.8496 5.28886 18.8017 3.24103C16.7539 1.19319 13.9764 0.0427246 11.0803 0.0427246ZM11.0803 20.0602C11.0803 17.6473 10.1218 15.3333 8.41564 13.6271C6.70947 11.9209 4.3954 10.9624 1.98251 10.9624C4.3954 10.9624 6.70947 10.0039 8.41564 8.29772C10.1218 6.59154 11.0803 4.27748 11.0803 1.86459C11.0803 4.27748 12.0388 6.59154 13.745 8.29772C15.4512 10.0039 17.7653 10.9624 20.1781 10.9624C17.7653 10.9624 15.4512 11.9209 13.745 13.6271C12.0388 15.3333 11.0803 17.6473 11.0803 20.0602Z" fill="#FFF"/>
</svg>

'''
'''--- assets/icons/aurora.svg ---
<svg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 288 288' style='enable-background:new 0 0 288 288;' xml:space='preserve'> <style type='text/css'> .st0{fill:#70D44B;} .st1{fill:#FFFFFF;} </style> <path class='st0' d='M144,0L144,0c79.5,0,144,64.5,144,144v0c0,79.5-64.5,144-144,144h0C64.5,288,0,223.5,0,144v0 C0,64.5,64.5,0,144,0z'/> <path class='st1' d='M144,58.8c7.6,0,14.5,4.3,17.9,11.1l56.2,112.5c4.9,9.9,0.9,21.9-9,26.8c-2.8,1.4-5.8,2.1-8.9,2.1H87.8 c-11,0-20-9-20-20c0-3.1,0.7-6.2,2.1-8.9l56.2-112.5C129.5,63,136.4,58.7,144,58.8 M144,45c-12.8,0-24.5,7.2-30.2,18.7L57.6,176.2 c-8.3,16.7-1.6,36.9,15.1,45.3c4.7,2.3,9.9,3.6,15.1,3.6h112.5c18.6,0,33.8-15.1,33.8-33.7c0-5.2-1.2-10.4-3.6-15.1L174.2,63.7 C168.5,52.2,156.8,45,144,45z'/> </svg>
'''
'''--- assets/icons/back-link.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M15 18L9 12L15 6" stroke="#201F1F" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/bookmark.svg ---
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M8.25 19.9869V5.13818H17.5V19.9869L13.1184 15.3619L8.25 19.9869Z" fill="white"/>
</svg>

'''
'''--- assets/icons/bountyApprovedClaim.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="8" cy="8" r="8" fill="#434343"/>
    <g clip-path="url(#clip0_9720_16217)">
        <path d="M11.7033 7.65924V7.99998C11.7029 8.79866 11.4442 9.57579 10.966 10.2155C10.4878 10.8552 9.81563 11.3231 9.04973 11.5496C8.28384 11.776 7.46525 11.7488 6.71607 11.4721C5.96689 11.1953 5.32725 10.6837 4.89255 10.0137C4.45785 9.3437 4.25138 8.55112 4.30393 7.75417C4.35648 6.95723 4.66523 6.19862 5.18415 5.59149C5.70307 4.98436 6.40434 4.56124 7.18338 4.38522C7.96241 4.20921 8.77748 4.28974 9.50701 4.6148" stroke="white" stroke-width="0.888889" stroke-linejoin="round"/>
        <path d="M11.7035 5.03711L7.99978 8.74452L6.88867 7.63341" stroke="white" stroke-width="0.888889" stroke-linejoin="round"/>
    </g>
    <defs>
        <clipPath id="clip0_9720_16217">
            <rect width="8.88889" height="8.88889" fill="white" transform="translate(3.55566 3.55554)"/>
        </clipPath>
    </defs>
</svg>

'''
'''--- assets/icons/bountyCompleteBounty.colors.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect x="-0.799805" y="8" width="12.4451" height="12.4451" rx="2.34667" transform="rotate(-45 -0.799805 8)" fill="#434343"/>
    <g clip-path="url(#clip0_9720_16194)">
        <path d="M11.3337 7.59324V7.89991C11.3333 8.61872 11.1005 9.31813 10.6701 9.89385C10.2397 10.4696 9.63475 10.8907 8.94545 11.0945C8.25614 11.2983 7.51941 11.2739 6.84515 11.0248C6.17089 10.7757 5.59521 10.3153 5.20398 9.71226C4.81275 9.10925 4.62692 8.39593 4.67422 7.67868C4.72151 6.96143 4.99939 6.27868 5.46642 5.73227C5.93344 5.18585 6.56459 4.80504 7.26572 4.64662C7.96686 4.48821 8.70042 4.56069 9.35699 4.85324" stroke="#19D992" stroke-width="0.839974" stroke-linejoin="round"/>
        <path d="M11.3333 5.23337L8 8.57004L7 7.57004" stroke="#19D992" stroke-width="0.839974" stroke-linejoin="round"/>
    </g>
    <defs>
        <clipPath id="clip0_9720_16194">
            <rect width="8" height="8" fill="white" transform="translate(4 3.89999)"/>
        </clipPath>
    </defs>
</svg>

'''
'''--- assets/icons/bountyCreateClaim.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="8" cy="8" r="8" fill="#434343"/>
    <path d="M5.03711 8H10.9625" stroke="white" stroke-width="1.03704" stroke-linecap="round"/>
    <path d="M8 5.03732V10.9627" stroke="white" stroke-width="0.888889" stroke-linecap="round"/>
</svg>

'''
'''--- assets/icons/bountyCreated.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect x="-1.2002" y="12" width="18.6676" height="18.6676" rx="3.52" transform="rotate(-45 -1.2002 12)" fill="#434343"/>
    <path d="M15.3047 7.11865H13.4687C13.4687 6.30854 12.8101 5.6499 12 5.6499C11.1899 5.6499 10.5312 6.30854 10.5312 7.11865H8.69531C8.08716 7.11865 7.59375 7.61206 7.59375 8.22021V16.2983C7.59375 16.9065 8.08716 17.3999 8.69531 17.3999H15.3047C15.9128 17.3999 16.4062 16.9065 16.4062 16.2983V8.22021C16.4062 7.61206 15.9128 7.11865 15.3047 7.11865ZM9.79687 15.3803C9.49165 15.3803 9.24609 15.1348 9.24609 14.8296C9.24609 14.5243 9.49165 14.2788 9.79687 14.2788C10.1021 14.2788 10.3476 14.5243 10.3476 14.8296C10.3476 15.1348 10.1021 15.3803 9.79687 15.3803ZM9.79687 13.1772C9.49165 13.1772 9.24609 12.9317 9.24609 12.6264C9.24609 12.3212 9.49165 12.0757 9.79687 12.0757C10.1021 12.0757 10.3476 12.3212 10.3476 12.6264C10.3476 12.9317 10.1021 13.1772 9.79687 13.1772ZM9.79687 10.9741C9.49165 10.9741 9.24609 10.7286 9.24609 10.4233C9.24609 10.1181 9.49165 9.87255 9.79687 9.87255C10.1021 9.87255 10.3476 10.1181 10.3476 10.4233C10.3476 10.7286 10.1021 10.9741 9.79687 10.9741ZM12 6.56787C12.3052 6.56787 12.5508 6.81342 12.5508 7.11865C12.5508 7.42387 12.3052 7.66943 12 7.66943C11.6948 7.66943 11.4492 7.42387 11.4492 7.11865C11.4492 6.81342 11.6948 6.56787 12 6.56787ZM14.9375 15.0132C14.9375 15.1141 14.8549 15.1968 14.7539 15.1968H11.4492C11.3482 15.1968 11.2656 15.1141 11.2656 15.0132V14.646C11.2656 14.545 11.3482 14.4624 11.4492 14.4624H14.7539C14.8549 14.4624 14.9375 14.545 14.9375 14.646V15.0132ZM14.9375 12.81C14.9375 12.911 14.8549 12.9936 14.7539 12.9936H11.4492C11.3482 12.9936 11.2656 12.911 11.2656 12.81V12.4429C11.2656 12.3419 11.3482 12.2593 11.4492 12.2593H14.7539C14.8549 12.2593 14.9375 12.3419 14.9375 12.4429V12.81ZM14.9375 10.6069C14.9375 10.7079 14.8549 10.7905 14.7539 10.7905H11.4492C11.3482 10.7905 11.2656 10.7079 11.2656 10.6069V10.2397C11.2656 10.1388 11.3482 10.0561 11.4492 10.0561H14.7539C14.8549 10.0561 14.9375 10.1388 14.9375 10.2397V10.6069Z" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/bountyDeadlineClaim.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="18" height="18" transform="translate(1 1)" fill="white"/>
    <rect x="0.806716" y="10" width="13.0007" height="13.0007" rx="1.5" transform="rotate(-45 0.806716 10)" stroke="#6038D0"/>
    <g clip-path="url(#clip0_10052_108126)">
        <path d="M14.1663 9.46669V9.85002C14.1658 10.7485 13.8749 11.6228 13.3369 12.3424C12.7989 13.0621 12.0427 13.5886 11.1811 13.8433C10.3194 14.0981 9.39853 14.0675 8.5557 13.7561C7.71288 13.4447 6.99328 12.8692 6.50424 12.1155C6.0152 11.3617 5.78292 10.47 5.84204 9.57349C5.90116 8.67692 6.24851 7.82349 6.83229 7.14047C7.41607 6.45745 8.205 5.98143 9.08142 5.78341C9.95784 5.5854 10.8748 5.67599 11.6955 6.04169" stroke="#6038D0" stroke-width="1.25996" stroke-linejoin="round"/>
        <path d="M14.1667 6.51672L10 10.6876L8.75 9.43756" stroke="#6038D0" stroke-width="1.25996" stroke-linejoin="round"/>
    </g>
    <defs>
        <clipPath id="clip0_10052_108126">
            <rect width="10" height="10" fill="white" transform="translate(5 4.84998)"/>
        </clipPath>
    </defs>
</svg>

'''
'''--- assets/icons/bountyPendingApproval.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="9" cy="9" r="9" fill="#E43AE3"/>
    <path d="M12.667 9.04169C12.667 8.08735 12.3361 7.16254 11.7307 6.42482C11.1252 5.68711 10.2827 5.18214 9.34674 4.99595C8.41074 4.80977 7.43914 4.9539 6.59748 5.40377C5.75583 5.85364 5.0962 6.58143 4.73099 7.46312C4.36578 8.34482 4.31758 9.32587 4.59461 10.2391C4.87164 11.1524 5.45676 11.9413 6.25027 12.4715C7.04377 13.0017 7.99657 13.2404 8.94631 13.1468C9.89606 13.0533 10.784 12.6333 11.4588 11.9585M12.667 9.04169L13.5837 6.75002M12.667 9.04169L10.8337 7.66669" stroke="white"/>
    <path d="M6.91699 10.25L8.7271 9.3241V6.08337" stroke="white"/>
</svg>

'''
'''--- assets/icons/bountyProposalCreated.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect x="-1" y="12.2" width="18.6676" height="18.6676" rx="3.52" transform="rotate(-45 -1 12.2)" fill="#434343"/>
    <path d="M10.5951 9.175C9.57513 10.32 8.87513 11.965 8.81013 12.12L7.68013 11.635C7.35513 11.495 7.27513 11.07 7.52513 10.82L9.03013 9.315C9.26513 9.08 9.60513 8.975 9.93513 9.04L10.5951 9.175ZM11.3401 14.255C11.4901 14.405 11.7101 14.445 11.9001 14.355C12.4801 14.085 13.7251 13.45 14.5301 12.645C16.8251 10.35 16.8451 8.48 16.7101 7.68C16.6924 7.58173 16.6451 7.49123 16.5745 7.42063C16.5039 7.35002 16.4134 7.3027 16.3151 7.285C15.5151 7.15 13.6451 7.17 11.3501 9.465C10.5451 10.27 9.91513 11.515 9.64013 12.095C9.55013 12.285 9.59513 12.51 9.74013 12.655L11.3401 14.255ZM14.8251 13.405C13.6801 14.425 12.0351 15.125 11.8801 15.19L12.3651 16.32C12.5051 16.645 12.9301 16.725 13.1801 16.475L14.6851 14.97C14.9201 14.735 15.0251 14.395 14.9601 14.065L14.8251 13.405ZM10.4701 14.705C10.5186 14.9472 10.5066 15.1975 10.435 15.4339C10.3635 15.6703 10.2347 15.8854 10.0601 16.06C9.67513 16.445 8.48013 16.73 7.70513 16.88C7.36013 16.945 7.05513 16.64 7.12013 16.295C7.27013 15.52 7.55013 14.325 7.94013 13.94C8.11478 13.7654 8.32984 13.6366 8.56622 13.5651C8.8026 13.4936 9.05298 13.4815 9.29513 13.53C9.88013 13.64 10.3601 14.12 10.4701 14.705ZM12.5001 10.5C12.5001 9.95 12.9501 9.5 13.5001 9.5C14.0501 9.5 14.5001 9.95 14.5001 10.5C14.5001 11.05 14.0501 11.5 13.5001 11.5C12.9501 11.5 12.5001 11.05 12.5001 10.5Z" fill="white"/>
</svg>

'''
'''--- assets/icons/briefcase-filled.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<svg width="700pt" height="700pt" version="1.1" viewBox="0 0 700 700" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
 <g>
  <path d="m437.5 113.75v-8.75c-0.011719-11.598-4.625-22.719-12.828-30.922s-19.324-12.816-30.922-12.828h-87.5c-11.598 0.011719-22.719 4.625-30.922 12.828s-12.816 19.324-12.828 30.922v8.75h17.5v-8.75c0.007812-6.9609 2.7773-13.633 7.6992-18.551 4.918-4.9219 11.59-7.6914 18.551-7.6992h87.5c6.9609 0.007812 13.633 2.7773 18.551 7.6992 4.9219 4.918 7.6914 11.59 7.6992 18.551v8.75z"/>
  <path d="m358.75 297.5h26.25v35h-26.25z"/>
  <path d="m201.25 323.75c-2.8438 0-5.5078-1.3828-7.1484-3.7031l-54.102-76.645v220.35h420v-220.35l-54.102 76.645c-1.6406 2.3203-4.3047 3.7031-7.1484 3.7031h-96.25v17.5c0 2.3203-0.92188 4.5469-2.5625 6.1875s-3.8672 2.5625-6.1875 2.5625h-87.5c-4.832 0-8.75-3.918-8.75-8.75v-17.5z"/>
  <path d="m315 297.5h26.25v35h-26.25z"/>
  <path d="m595 131.25h-490v32.223l100.79 142.78h91.715v-17.5c0-4.832 3.918-8.75 8.75-8.75h87.5c2.3203 0 4.5469 0.92188 6.1875 2.5625s2.5625 3.8672 2.5625 6.1875v17.5h91.715l100.79-142.78z"/>
  <path d="m595 193.82-17.5 24.793v253.89c0 2.3203-0.92188 4.5469-2.5625 6.1875s-3.8672 2.5625-6.1875 2.5625h-437.5c-4.832 0-8.75-3.918-8.75-8.75v-253.89l-17.5-24.793v278.68c0.007812 6.9609 2.7773 13.633 7.6992 18.551 4.918 4.9219 11.59 7.6914 18.551 7.6992h437.5c6.9609-0.007812 13.633-2.7773 18.551-7.6992 4.9219-4.918 7.6914-11.59 7.6992-18.551z"/>
 </g>
</svg>

'''
'''--- assets/icons/briefcase.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<svg width="700pt" height="700pt" version="1.1" viewBox="0 0 700 700" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <g>
        <path d="m612.5 122.5c0-2.3203-0.92188-4.5469-2.5625-6.1875s-3.8672-2.5625-6.1875-2.5625h-148.75v-8.75c-0.019531-16.238-6.4766-31.809-17.961-43.289-11.48-11.484-27.051-17.941-43.289-17.961h-87.5c-16.238 0.019531-31.809 6.4766-43.289 17.961-11.484 11.48-17.941 27.051-17.961 43.289v8.75h-148.75c-4.832 0-8.75 3.918-8.75 8.75v350c0.011719 11.598 4.625 22.719 12.828 30.922s19.324 12.816 30.922 12.828h437.5c11.598-0.011719 22.719-4.625 30.922-12.828s12.816-19.324 12.828-30.922zm-350-17.5c0.011719-11.598 4.625-22.719 12.828-30.922s19.324-12.816 30.922-12.828h87.5c11.598 0.011719 22.719 4.625 30.922 12.828s12.816 19.324 12.828 30.922v8.75h-17.5v-8.75c-0.007812-6.9609-2.7773-13.633-7.6992-18.551-4.918-4.9219-11.59-7.6914-18.551-7.6992h-87.5c-6.9609 0.007812-13.633 2.7773-18.551 7.6992-4.9219 4.918-7.6914 11.59-7.6992 18.551v8.75h-17.5zm140 8.75h-105v-8.75c0.003906-4.832 3.918-8.7461 8.75-8.75h87.5c4.832 0.003906 8.7461 3.918 8.75 8.75zm192.5 17.5v32.223l-100.79 142.78h-91.715v-17.5c0-2.3203-0.92188-4.5469-2.5625-6.1875s-3.8672-2.5625-6.1875-2.5625h-87.5c-4.832 0-8.75 3.918-8.75 8.75v17.5h-91.715l-100.79-142.78v-32.223zm-455 112.15 54.102 76.645c1.6406 2.3203 4.3047 3.7031 7.1484 3.7031h96.25v17.5c0 2.3203 0.92188 4.5469 2.5625 6.1875s3.8672 2.5625 6.1875 2.5625h87.5c2.3203 0 4.5469-0.92188 6.1875-2.5625s2.5625-3.8672 2.5625-6.1875v-17.5h96.25c2.8438 0 5.5078-1.3828 7.1484-3.7031l54.102-76.645v220.35h-420zm245 54.098v35h-26.25v-35zm-43.75 35h-26.25v-35h26.25zm227.5 166.25h-437.5c-6.9609-0.007812-13.633-2.7773-18.551-7.6992-4.9219-4.918-7.6914-11.59-7.6992-18.551v-278.68l17.5 24.793v253.89c0 2.3203 0.92188 4.5469 2.5625 6.1875s3.8672 2.5625 6.1875 2.5625h437.5c2.3203 0 4.5469-0.92188 6.1875-2.5625s2.5625-3.8672 2.5625-6.1875v-253.89l17.5-24.793v278.68c-0.007812 6.9609-2.7773 13.633-7.6992 18.551-4.918 4.9219-11.59 7.6914-18.551 7.6992z"/>
    </g>
</svg>

'''
'''--- assets/icons/burgerMenu.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M3 18H21V16H3V18ZM3 13H21V11H3V13ZM3 6V8H21V6H3Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/button-add-group.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.00001 10.76H7.42001C6.62851 10.7314 5.83958 10.8657 5.10218 11.1547C4.36478 11.4437 3.69463 11.8812 3.13334 12.44L2.97334 12.6266V18.1466H5.69334V15.0133L6.06001 14.6L6.22668 14.4066C7.09463 13.515 8.1752 12.8588 9.36668 12.5C8.77014 12.0461 8.29967 11.4471 8.00001 10.76Z" fill="black"/>
<path d="M20.8934 12.42C20.3322 11.8613 19.662 11.4238 18.9246 11.1348C18.1872 10.8458 17.3983 10.7114 16.6068 10.7401C16.364 10.7407 16.1215 10.7541 15.8801 10.78C15.5748 11.4247 15.1172 11.9852 14.5468 12.4134C15.8188 12.7653 16.971 13.4566 17.8801 14.4134L18.0468 14.6L18.4068 15.0134V17C18.4999 15 20.8934 15.0134 21.0334 17V12.6067L20.8934 12.42Z" fill="black"/>
<path d="M7.40001 9.45997H7.60668C7.51066 8.63546 7.65533 7.80079 8.02323 7.0567C8.39114 6.3126 8.96655 5.6909 9.68002 5.26664C9.42139 4.87154 9.06459 4.55037 8.64455 4.3346C8.22451 4.11883 7.75564 4.01584 7.28384 4.03572C6.81204 4.0556 6.35349 4.19767 5.95309 4.44802C5.5527 4.69837 5.22418 5.04841 4.99972 5.46387C4.77525 5.87933 4.66253 6.34596 4.67259 6.81807C4.68266 7.29018 4.81516 7.75159 5.05712 8.1571C5.29908 8.56262 5.64221 8.89835 6.05291 9.13141C6.46361 9.36447 6.9278 9.48687 7.40001 9.48663V9.45997Z" fill="black"/>
<path d="M16.2866 8.95999C16.2947 9.11321 16.2947 9.26676 16.2866 9.41999C16.4145 9.44027 16.5438 9.45141 16.6733 9.45332H16.7999C17.2701 9.42825 17.7257 9.28188 18.1225 9.02844C18.5193 8.77501 18.8437 8.42315 19.0641 8.00713C19.2845 7.59111 19.3935 7.1251 19.3804 6.65448C19.3672 6.18385 19.2325 5.72464 18.9892 5.32156C18.7459 4.91848 18.4024 4.58526 17.9921 4.35434C17.5818 4.12342 17.1187 4.00268 16.6479 4.00387C16.1771 4.00505 15.7146 4.12812 15.3055 4.3611C14.8964 4.59408 14.5545 4.92902 14.3133 5.33332C14.9167 5.72728 15.4128 6.26486 15.7572 6.89783C16.1017 7.53081 16.2836 8.23938 16.2866 8.95999Z" fill="black"/>
<path d="M11.9132 11.9467C13.559 11.9467 14.8932 10.6125 14.8932 8.96667C14.8932 7.32086 13.559 5.98667 11.9132 5.98667C10.2674 5.98667 8.9332 7.32086 8.9332 8.96667C8.9332 10.6125 10.2674 11.9467 11.9132 11.9467Z" fill="black"/>
<path d="M9.51929 13.9488C10.3339 13.6395 11.2026 13.4981 12.0733 13.5333C12.9422 13.4957 13.8096 13.6359 14.6224 13.9455C15.4352 14.255 16.1762 14.7272 16.7999 15.3333L16.9599 15.5333L17.0001 18.5C15.5001 18.5 15.0001 20 16.4149 20.7666C16.2869 20.8168 16.0307 20.7693 15.8933 20.7666H8.23327C8.09581 20.7693 7.95918 20.7448 7.83118 20.6947C7.70317 20.6445 7.58631 20.5696 7.48725 20.4743C7.3882 20.3789 7.3089 20.265 7.25388 20.139C7.19886 20.013 7.1692 19.8774 7.1666 19.74V15.52L7.33327 15.3333C7.96112 14.7291 8.70471 14.2582 9.51929 13.9488Z" fill="black"/>
<path d="M19.668 17V22.2941" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M17 19.6474H22.3333" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/button-add.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <line x1="12" y1="6" x2="12" y2="18" stroke="#6038D0" stroke-width="2"/>
  <line x1="18" y1="12" x2="6" y2="12" stroke="#6038D0" stroke-width="2"/>
</svg>

'''
'''--- assets/icons/button-alert.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M7.86 2H16.14L22 7.86V16.14L16.14 22H7.86L2 16.14V7.86L7.86 2Z" stroke="#812F00" stroke-width="2"
        stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M12 8V12" stroke="#812F00" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M12 16H12.01" stroke="#812F00" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/button-arrow-down.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M6 9L12 15L18 9" stroke="#6038D0" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/button-arrow-left.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M15 18L9 12L15 6" stroke="#6038D0" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/button-arrow-right.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M9 18L15 12L9 6" stroke="#6038D0" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/button-arrow-up.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M18 15L12 9L6 15" stroke="#6038D0" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/button-bookmark-selected.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.0002 12.0326C21.9798 12.0325 21.9593 12.0324 21.9388 12.0324C16.4802 12.0324 12.0434 16.4777 11.9431 22L11.9391 22C11.8392 16.4968 7.43266 12.0633 2.00006 12.0326C7.45412 12.0019 11.874 7.53334 11.9401 2L11.9412 2C12.008 7.55208 16.4581 12.0319 21.9379 12.0319C21.9587 12.0319 21.9795 12.0319 22.0002 12.0317L22.0002 12.0326Z" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/button-bookmark.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd"
        d="M20.0002 10.0326C19.9798 10.0325 19.9593 10.0324 19.9388 10.0324C14.4802 10.0324 10.0434 14.4777 9.94306 20L9.93913 20C9.83917 14.4968 5.43266 10.0633 6.08025e-05 10.0326C5.45412 10.0019 9.87396 5.53334 9.94012 -8.28998e-07L9.94121 -8.28909e-07C10.008 5.55208 14.4581 10.0319 19.9379 10.0319C19.9587 10.0319 19.9795 10.0319 20.0002 10.0317L20.0002 10.0326Z"
        fill="#D9D9D9"/>
</svg>

'''
'''--- assets/icons/button-check.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M22 11.0801V12.0001C21.9988 14.1565 21.3005 16.2548 20.0093 17.9819C18.7182 19.7091 16.9033 20.9726 14.8354 21.584C12.7674 22.1954 10.5573 22.122 8.53447 21.3747C6.51168 20.6274 4.78465 19.2462 3.61096 17.4372C2.43727 15.6281 1.87979 13.4882 2.02168 11.3364C2.16356 9.18467 2.99721 7.13643 4.39828 5.49718C5.79935 3.85793 7.69279 2.71549 9.79619 2.24025C11.8996 1.76502 14.1003 1.98245 16.07 2.86011"
    stroke="#381E80" stroke-width="2" stroke-linejoin="round"/>
  <path d="M22 4L12 14.01L9 11.01" stroke="#381E80" stroke-width="2" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/button-copy.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M14 7V7C14 6.06812 14 5.60218 13.8478 5.23463C13.6448 4.74458 13.2554 4.35523 12.7654 4.15224C12.3978 4 11.9319 4 11 4H8C6.11438 4 5.17157 4 4.58579 4.58579C4 5.17157 4 6.11438 4 8V11C4 11.9319 4 12.3978 4.15224 12.7654C4.35523 13.2554 4.74458 13.6448 5.23463 13.8478C5.60218 14 6.06812 14 7 14V14"
    stroke="#6038D0" stroke-width="2"/>
  <rect x="10" y="10" width="10" height="10" rx="2" stroke="#6038D0" stroke-width="2"/>
</svg>

'''
'''--- assets/icons/button-delete-pressed.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M3 6H5H21" stroke="#381E80" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
<path d="M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6H19Z" stroke="#381E80" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/button-delete.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M3 6H5H21" stroke="#6038D0" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
  <path
    d="M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6H19Z"
    stroke="#6038D0" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/button-edit.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g clip-path="url(#clip0_7425_40821)">
    <path d="M14.946 0C14.5455 0.000969674 14.1492 0.0812203 13.7799 0.236122C13.4107 0.391024 13.0757 0.617511 12.7944 0.902517L1.08687 12.6093L1.04097 12.8411L0.230997 16.9131L0 18L1.08761 17.769L5.15967 16.959L5.39067 16.9124L17.0982 5.20558C17.384 4.92477 17.6109 4.58986 17.7659 4.2204C17.9208 3.85093 18.0006 3.45431 18.0006 3.05368C18.0006 2.65304 17.9208 2.25642 17.7659 1.88696C17.6109 1.51749 17.384 1.18258 17.0982 0.901777C16.8168 0.616816 16.4817 0.390414 16.1123 0.235638C15.7429 0.0808617 15.3465 0.000775151 14.946 0ZM14.946 1.41115C15.3191 1.41115 15.6952 1.58144 16.0565 1.94348C16.7769 2.66313 16.7769 3.44423 16.0565 4.16461L15.5249 4.67325L13.326 2.47507L13.8354 1.94348C14.1974 1.58144 14.5728 1.41115 14.946 1.41115ZM12.2858 3.51678L14.4832 5.71496L5.52986 14.6676C5.04651 13.7219 4.27698 12.9529 3.33095 12.4701L12.2858 3.51678ZM2.38327 13.674C2.82145 13.8503 3.21948 14.1133 3.55346 14.4473C3.88744 14.7813 4.15047 15.1793 4.32675 15.6175L1.89684 16.1032L2.38327 13.674Z" fill="#201F1F"/>
  </g>
  <defs>
    <clipPath id="clip0_7425_40821">
      <rect width="18" height="18" fill="white"/>
    </clipPath>
  </defs>
</svg>

'''
'''--- assets/icons/button-external.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd"
        d="M5 7C4.73478 7 4.48043 7.10536 4.29289 7.29289C4.10536 7.48043 4 7.73478 4 8V19C4 19.2652 4.10536 19.5196 4.29289 19.7071C4.48043 19.8946 4.73478 20 5 20H16C16.2652 20 16.5196 19.8946 16.7071 19.7071C16.8946 19.5196 17 19.2652 17 19V13C17 12.4477 17.4477 12 18 12C18.5523 12 19 12.4477 19 13V19C19 19.7957 18.6839 20.5587 18.1213 21.1213C17.5587 21.6839 16.7957 22 16 22H5C4.20435 22 3.44129 21.6839 2.87868 21.1213C2.31607 20.5587 2 19.7957 2 19V8C2 7.20435 2.31607 6.44129 2.87868 5.87868C3.44129 5.31607 4.20435 5 5 5H11C11.5523 5 12 5.44772 12 6C12 6.55229 11.5523 7 11 7H5Z"
        fill="#6038D0"/>
  <path fill-rule="evenodd" clip-rule="evenodd"
        d="M14 3C14 2.44772 14.4477 2 15 2H21C21.5523 2 22 2.44772 22 3V9C22 9.55229 21.5523 10 21 10C20.4477 10 20 9.55229 20 9V4H15C14.4477 4 14 3.55228 14 3Z"
        fill="#6038D0"/>
  <path fill-rule="evenodd" clip-rule="evenodd"
        d="M21.7071 2.29289C22.0976 2.68342 22.0976 3.31658 21.7071 3.70711L10.7071 14.7071C10.3166 15.0976 9.68342 15.0976 9.29289 14.7071C8.90237 14.3166 8.90237 13.6834 9.29289 13.2929L20.2929 2.29289C20.6834 1.90237 21.3166 1.90237 21.7071 2.29289Z"
        fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/button-more.svg ---
<svg width="34" height="34" viewBox="0 0 34 34" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M17 19C18.1046 19 19 18.1046 19 17C19 15.8954 18.1046 15 17 15C15.8954 15 15 15.8954 15 17C15 18.1046 15.8954 19 17 19Z" fill="#6038D0"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M17 11C18.1046 11 19 10.1046 19 9C19 7.89543 18.1046 7 17 7C15.8954 7 15 7.89543 15 9C15 10.1046 15.8954 11 17 11Z" fill="#6038D0"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M17 27C18.1046 27 19 26.1046 19 25C19 23.8954 18.1046 23 17 23C15.8954 23 15 23.8954 15 25C15 26.1046 15.8954 27 17 27Z" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/button-refresh-pressed.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10 19L9.29289 18.2929L8.58579 19L9.29289 19.7071L10 19ZM13.2929 14.2929L9.29289 18.2929L10.7071 19.7071L14.7071 15.7071L13.2929 14.2929ZM9.29289 19.7071L13.2929 23.7071L14.7071 22.2929L10.7071 18.2929L9.29289 19.7071Z" fill="#381E80"/>
<path d="M18.0622 8.5C18.6766 9.56413 19 10.7712 19 12C19 13.2288 18.6766 14.4359 18.0622 15.5C17.4478 16.5641 16.5641 17.4478 15.5 18.0622C14.4359 18.6766 13.2288 19 12 19" stroke="#381E80" stroke-width="2" stroke-linecap="round"/>
<path d="M14 5L14.7071 5.70711L15.4142 5L14.7071 4.29289L14 5ZM10.7071 9.70711L14.7071 5.70711L13.2929 4.29289L9.29289 8.29289L10.7071 9.70711ZM14.7071 4.29289L10.7071 0.292893L9.29289 1.70711L13.2929 5.70711L14.7071 4.29289Z" fill="#381E80"/>
<path d="M5.93782 15.5C5.32344 14.4359 5 13.2288 5 12C5 10.7712 5.32344 9.56413 5.93782 8.5C6.5522 7.43587 7.43587 6.5522 8.5 5.93782C9.56413 5.32344 10.7712 5 12 5" stroke="#381E80" stroke-width="2" stroke-linecap="round"/>
</svg>

'''
'''--- assets/icons/button-refresh.svg ---
<svg width="24" height="24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M10 19l-.707-.707-.707.707.707.707L10 19zm3.293-4.707l-4 4 1.414 1.414 4-4-1.414-1.414zm-4 5.414l4 4 1.414-1.414-4-4-1.414 1.414z"
    fill="#6038D0"/>
  <path d="M18.062 8.5A7 7 0 0112 19" stroke="#6038D0" stroke-width="2" stroke-linecap="round"/>
  <path
    d="M14 5l.707.707.707-.707-.707-.707L14 5zm-3.293 4.707l4-4-1.414-1.414-4 4 1.414 1.414zm4-5.414l-4-4-1.414 1.414 4 4 1.414-1.414z"
    fill="#6038D0"/>
  <path d="M5.938 15.5A7 7 0 0112 5" stroke="#6038D0" stroke-width="2" stroke-linecap="round"/>
</svg>

'''
'''--- assets/icons/button-report.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M4 15C4 15 5 14 8 14C11 14 13 16 16 16C19 16 20 15 20 15V3C20 3 19 4 16 4C13 4 11 2 8 2C5 2 4 3 4 3V15Z" stroke="#BFBFBF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M4 22V15" stroke="#BFBFBF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/button-reset-scroll.svg ---
<svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M0 4C0 1.79086 1.79086 0 4 0H36C38.2091 0 40 1.79086 40 4V36C40 38.2091 38.2091 40 36 40H4C1.79086 40 0 38.2091 0 36V4Z" fill="#201F1F"/>
  <g clip-path="url(#clip0)">
    <path d="M20 27L20 13" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M13 20L20 13L27 20" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    <rect x="-648.5" y="-787.5" width="1839" height="2627" stroke="white"/>
    <rect x="-669.5" y="-825.5" width="1839" height="2627" stroke="white"/>
  </g>
  <defs>
    <clipPath id="clip0">
      <rect width="24" height="24" fill="white" transform="translate(8 8)"/>
    </clipPath>
  </defs>
</svg>

'''
'''--- assets/icons/button-return-pressed.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4 10L3.29289 10.7071L2.58579 10L3.29289 9.29289L4 10ZM21 18C21 18.5523 20.5523 19 20 19C19.4477 19 19 18.5523 19 18L21 18ZM8.29289 15.7071L3.29289 10.7071L4.70711 9.29289L9.70711 14.2929L8.29289 15.7071ZM3.29289 9.29289L8.29289 4.29289L9.70711 5.70711L4.70711 10.7071L3.29289 9.29289ZM4 9L14 9L14 11L4 11L4 9ZM21 16L21 18L19 18L19 16L21 16ZM14 9C17.866 9 21 12.134 21 16L19 16C19 13.2386 16.7614 11 14 11L14 9Z" fill="#381E80"/>
</svg>

'''
'''--- assets/icons/button-return.svg ---
<svg width="19" height="15" viewBox="0 0 19 15" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M2 6L1.29289 6.70711L0.585786 6L1.29289 5.29289L2 6ZM19 14C19 14.5523 18.5523 15 18 15C17.4477 15 17 14.5523 17 14L19 14ZM6.29289 11.7071L1.29289 6.70711L2.70711 5.29289L7.70711 10.2929L6.29289 11.7071ZM1.29289 5.29289L6.29289 0.292893L7.70711 1.70711L2.70711 6.70711L1.29289 5.29289ZM2 5L12 5L12 7L2 7L2 5ZM19 12L19 14L17 14L17 12L19 12ZM12 5C15.866 5 19 8.13401 19 12L17 12C17 9.23858 14.7614 7 12 7L12 5Z"
    fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/button-search.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="11" cy="11" r="6" stroke="#6038D0" stroke-width="2"/>
  <path d="M20 20L15 15" stroke="#6038D0" stroke-width="2"/>
</svg>

'''
'''--- assets/icons/button-send-transaction.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M5 12H19" stroke="#201F1F" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M12 5L19 12L12 19" stroke="#201F1F" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/button-share-pressed.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M18 8C19.6569 8 21 6.65685 21 5C21 3.34315 19.6569 2 18 2C16.3431 2 15 3.34315 15 5C15 6.65685 16.3431 8 18 8Z" stroke="#381E80" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M6 15C7.65685 15 9 13.6569 9 12C9 10.3431 7.65685 9 6 9C4.34315 9 3 10.3431 3 12C3 13.6569 4.34315 15 6 15Z" stroke="#381E80" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M18 22C19.6569 22 21 20.6569 21 19C21 17.3431 19.6569 16 18 16C16.3431 16 15 17.3431 15 19C15 20.6569 16.3431 22 18 22Z" stroke="#381E80" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M8.59009 13.51L15.4201 17.49" stroke="#381E80" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M15.4101 6.51001L8.59009 10.49" stroke="#381E80" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/button-share.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M18 8C19.6569 8 21 6.65685 21 5C21 3.34315 19.6569 2 18 2C16.3431 2 15 3.34315 15 5C15 6.65685 16.3431 8 18 8Z"
    stroke="#D9D9D9" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M6 15C7.65685 15 9 13.6569 9 12C9 10.3431 7.65685 9 6 9C4.34315 9 3 10.3431 3 12C3 13.6569 4.34315 15 6 15Z"
        stroke="#D9D9D9" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path
    d="M18 22C19.6569 22 21 20.6569 21 19C21 17.3431 19.6569 16 18 16C16.3431 16 15 17.3431 15 19C15 20.6569 16.3431 22 18 22Z"
    stroke="#D9D9D9" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M8.59009 13.51L15.4201 17.49" stroke="#D9D9D9" stroke-width="2" stroke-linecap="round"
        stroke-linejoin="round"/>
  <path d="M15.4101 6.51001L8.59009 10.49" stroke="#D9D9D9" stroke-width="2" stroke-linecap="round"
        stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/buttonAddUser.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M4.5 16.9844C4.57166 16.9766 4.64446 16.9726 4.71819 16.9726H12.2709C12.2358 16.8706 12.2168 16.7612 12.2168 16.6474C12.2168 16.0951 12.6645 15.6474 13.2168 15.6474H14.8848V14C14.8848 13.6234 15.093 13.2954 15.4006 13.1248C14.2601 11.8224 12.585 11 10.7178 11C7.36097 11 4.62502 13.6582 4.5 16.9844Z" fill="#201F1F"/>
    <path d="M4.5 16.9844L4.00035 16.9656C3.9949 17.1108 4.05285 17.2511 4.15913 17.3502C4.26541 17.4492 4.40951 17.4971 4.55393 17.4814L4.5 16.9844ZM12.2709 16.9726V17.4726C12.4324 17.4726 12.584 17.3945 12.6779 17.2631C12.7717 17.1316 12.7962 16.9628 12.7437 16.8101L12.2709 16.9726ZM14.8848 15.6474V16.1474C15.1609 16.1474 15.3848 15.9235 15.3848 15.6474H14.8848ZM15.4006 13.1248L15.643 13.5621C15.7752 13.4888 15.8672 13.3597 15.8931 13.2107C15.9191 13.0618 15.8763 12.9092 15.7767 12.7954L15.4006 13.1248ZM4.71819 16.4726C4.62641 16.4726 4.5356 16.4776 4.44607 16.4873L4.55393 17.4814C4.60772 17.4756 4.66252 17.4726 4.71819 17.4726V16.4726ZM12.2709 16.4726H4.71819V17.4726H12.2709V16.4726ZM12.7437 16.8101C12.7264 16.7597 12.7168 16.7052 12.7168 16.6474H11.7168C11.7168 16.8173 11.7452 16.9816 11.798 17.1351L12.7437 16.8101ZM12.7168 16.6474C12.7168 16.3712 12.9407 16.1474 13.2168 16.1474V15.1474C12.3884 15.1474 11.7168 15.8189 11.7168 16.6474H12.7168ZM13.2168 16.1474H14.8848V15.1474H13.2168V16.1474ZM14.3848 14V15.6474H15.3848V14H14.3848ZM15.1581 12.6876C14.698 12.9427 14.3848 13.4344 14.3848 14H15.3848C15.3848 13.8124 15.4879 13.6481 15.643 13.5621L15.1581 12.6876ZM10.7178 11.5C12.4348 11.5 13.9748 12.2557 15.0244 13.4542L15.7767 12.7954C14.5453 11.3892 12.7351 10.5 10.7178 10.5V11.5ZM4.99965 17.0031C5.11461 13.9446 7.63082 11.5 10.7178 11.5V10.5C7.09111 10.5 4.13543 13.3717 4.00035 16.9656L4.99965 17.0031Z" fill="#201F1F"/>
    <path d="M16.8848 15V20.2941" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M14.2168 17.6473H19.5501" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <circle cx="10.7168" cy="6.5" r="3.5" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/buttonDeposit.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M5 12L13 4M5 12H10.0909M5 12V6.90909" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M2 16H17" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/buttonFollow.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M4 11.4121C4 10.3075 4.89543 9.41211 6 9.41211H18C19.1046 9.41211 20 10.3075 20 11.4121V18.0002C20 19.1048 19.1046 20.0002 18 20.0002H6C4.89543 20.0002 4 19.1048 4 18.0002V11.4121ZM12.5039 12.0588C12.5039 11.7827 12.28 11.5588 12.0039 11.5588C11.7278 11.5588 11.5039 11.7827 11.5039 12.0588V14.2062H9.33594C9.05979 14.2062 8.83594 14.43 8.83594 14.7062C8.83594 14.9823 9.05979 15.2062 9.33594 15.2062H11.5039V17.3529C11.5039 17.629 11.7278 17.8529 12.0039 17.8529C12.28 17.8529 12.5039 17.629 12.5039 17.3529V15.2062H14.6693C14.9454 15.2062 15.1693 14.9823 15.1693 14.7062C15.1693 14.43 14.9454 14.2062 14.6693 14.2062H12.5039V12.0588Z" fill="#201F1F"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M7.7793 5C6.67473 5 5.7793 5.89543 5.7793 7V7.65961C5.8524 7.65151 5.92669 7.64735 6.00195 7.64735H18.002C18.0769 7.64735 18.1509 7.65148 18.2237 7.65951V7C18.2237 5.89543 17.3283 5 16.2237 5H7.7793Z" fill="#201F1F"/>
    <path d="M5.7793 7.65961H5.2793C5.2793 7.8018 5.33984 7.93727 5.44577 8.03211C5.55171 8.12696 5.69301 8.17222 5.83434 8.15657L5.7793 7.65961ZM18.2237 7.65951L18.1689 8.1565C18.3102 8.17209 18.4515 8.12679 18.5573 8.03195C18.6632 7.9371 18.7237 7.80167 18.7237 7.65951H18.2237ZM6.2793 7C6.2793 6.17157 6.95087 5.5 7.7793 5.5V4.5C6.39859 4.5 5.2793 5.61928 5.2793 7H6.2793ZM6.2793 7.65961V7H5.2793V7.65961H6.2793ZM5.83434 8.15657C5.8892 8.15049 5.94512 8.14735 6.00195 8.14735V7.14735C5.90826 7.14735 5.8156 7.15253 5.72425 7.16265L5.83434 8.15657ZM6.00195 8.14735H18.002V7.14735H6.00195V8.14735ZM18.002 8.14735C18.0586 8.14735 18.1143 8.15047 18.1689 8.1565L18.2786 7.16253C18.1876 7.15249 18.0953 7.14735 18.002 7.14735V8.14735ZM17.7237 7V7.65951H18.7237V7H17.7237ZM16.2237 5.5C17.0522 5.5 17.7237 6.17157 17.7237 7H18.7237C18.7237 5.61929 17.6045 4.5 16.2237 4.5V5.5ZM7.7793 5.5H16.2237V4.5H7.7793V5.5Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/buttonLink.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M13.5443 10.456C12.7252 9.63723 11.6144 9.17728 10.4563 9.17728C9.29815 9.17728 8.18741 9.63723 7.3683 10.456L4.2793 13.544C3.46018 14.3631 3 15.4741 3 16.6325C3 17.7909 3.46018 18.9019 4.2793 19.721C5.09842 20.5401 6.20939 21.0003 7.3678 21.0003C8.52621 21.0003 9.63718 20.5401 10.4563 19.721L12.0003 18.177" stroke="#201F1F" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M10.457 13.544C11.2761 14.3628 12.3869 14.8227 13.545 14.8227C14.7032 14.8227 15.8139 14.3628 16.633 13.544L19.722 10.456C20.5412 9.63687 21.0013 8.52591 21.0013 7.36749C21.0013 6.20908 20.5412 5.09811 19.722 4.27899C18.9029 3.45987 17.7919 2.99969 16.6335 2.99969C15.4751 2.99969 14.3642 3.45987 13.545 4.27899L12.001 5.82299" stroke="#201F1F" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/buttonWithdraw.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M1 1L17 1" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M8.65822 4.00001L8.65814 17.0001M8.65822 4.00001L5.0584 7.59983M8.65822 4.00001L12.258 7.59983" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/camera.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M12 15.2C13.7674 15.2 15.2 13.7674 15.2 12C15.2 10.2327 13.7674 8.80005 12 8.80005C10.2327 8.80005 8.80005 10.2327 8.80005 12C8.80005 13.7674 10.2327 15.2 12 15.2Z" fill="white"/>
    <path d="M9 2L7.17 4H4C2.9 4 2 4.9 2 6V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6C22 4.9 21.1 4 20 4H16.83L15 2H9ZM12 17C9.24 17 7 14.76 7 12C7 9.24 9.24 7 12 7C14.76 7 17 9.24 17 12C17 14.76 14.76 17 12 17Z" fill="white"/>
</svg>

'''
'''--- assets/icons/captcha-flag.colors.svg ---
<svg width="61" height="68" viewBox="0 0 61 68" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0_9908_115609" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="61" height="68">
<path fill-rule="evenodd" clip-rule="evenodd" d="M60.0024 0L12.6025 16.9188V26.3047L0 30.8031V67.9153L47.3999 50.9965V41.6106L60.0024 37.1122V0Z" fill="#ADD5E5"/>
</mask>
<g mask="url(#mask0_9908_115609)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M60.0024 0L12.6025 16.9188V26.3047L0 30.8031V67.9153L47.3999 50.9965V41.6106L60.0024 37.1122V0Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M29.1562 44.4692C29.2973 46.6356 31.0148 48.3742 33.1777 48.5584L33.1428 48.9845C30.9013 49.1933 29.1469 51.0722 29.1469 53.3593C29.1469 54.797 29.8402 56.0735 30.912 56.8751L26.2084 58.5551C25.6418 58.2913 25.0096 58.144 24.3428 58.144C22.5874 58.144 21.0714 59.1652 20.361 60.6436L19.2729 61.0322C18.6558 59.3471 17.0325 58.144 15.127 58.144C12.6905 58.144 10.7152 60.1113 10.7152 62.538C10.7152 63.0504 10.8033 63.5423 10.9652 63.9996L9.92135 64.3724C10.1792 63.8141 10.323 63.1928 10.323 62.538C10.323 60.1113 8.34778 58.144 5.91122 58.144C3.47465 58.144 1.49943 60.1113 1.49943 62.538C1.49943 64.2772 2.51387 65.7803 3.98555 66.4925L-0.000523668 67.9162L0.00407696 65.4447C0.690597 64.67 1.10717 63.6525 1.10717 62.538C1.10717 61.4295 0.694965 60.4167 0.0148766 59.6437L0.0212015 56.2465C0.697528 55.4743 1.10718 54.4645 1.10718 53.3593C1.10718 52.26 0.701854 51.255 0.0319249 50.4844L0.0383223 47.0481C0.704426 46.2785 1.10717 45.2764 1.10717 44.1806C1.10717 44.0579 1.10213 43.9365 1.09224 43.8164L1.51357 43.8262C1.5042 43.9431 1.49943 44.0613 1.49943 44.1806C1.49943 46.6073 3.47465 48.5746 5.91122 48.5746C8.34778 48.5746 10.323 46.6073 10.323 44.1806C10.323 44.1305 10.3222 44.0807 10.3205 44.0311L10.7174 44.0403C10.716 44.0869 10.7152 44.1336 10.7152 44.1806C10.7152 46.6073 12.6905 48.5746 15.127 48.5746C17.5418 48.5746 19.5035 46.6423 19.5383 44.2455L19.9317 44.2546C19.9714 46.6472 21.9311 48.5746 24.3428 48.5746C26.6853 48.5746 28.6013 46.7564 28.7459 44.4597L29.1562 44.4692ZM24.3429 57.7533C21.9063 57.7533 19.9311 55.786 19.9311 53.3593C19.9311 50.9325 21.9063 48.9653 24.3429 48.9653C26.7794 48.9653 28.7546 50.9325 28.7546 53.3593C28.7546 55.786 26.7794 57.7533 24.3429 57.7533ZM1.49943 53.3593C1.49943 55.786 3.47465 57.7533 5.91122 57.7533C8.34778 57.7533 10.323 55.786 10.323 53.3593C10.323 50.9325 8.34778 48.9653 5.91122 48.9653C3.47465 48.9653 1.49943 50.9325 1.49943 53.3593ZM15.127 57.7533C12.6905 57.7533 10.7152 55.786 10.7152 53.3593C10.7152 50.9325 12.6905 48.9653 15.127 48.9653C17.5636 48.9653 19.5388 50.9325 19.5388 53.3593C19.5388 55.786 17.5636 57.7533 15.127 57.7533Z" fill="#FF8743"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M17.5295 19.9588C17.9145 19.8485 18.3211 19.7895 18.7415 19.7895C21.1382 19.7895 23.0873 21.7089 23.1399 24.0967L23.5326 24.0967C23.5852 21.7089 25.5343 19.7895 27.931 19.7895C30.3277 19.7895 32.2768 21.7089 32.3294 24.0967L32.7226 24.0967C32.7751 21.7089 34.7242 19.7895 37.121 19.7895C39.5177 19.7895 41.4668 21.7089 41.5193 24.0967L41.913 24.0967C41.9656 21.7089 43.9146 19.7895 46.3114 19.7895C48.7081 19.7895 50.6572 21.7089 50.7098 24.0967L51.1029 24.0967C51.1555 21.7089 53.1046 19.7895 55.5013 19.7895C57.898 19.7895 59.8471 21.7089 59.8997 24.0967L59.9586 24.0967L59.9585 0.0133018L56.0367 1.41305C58.2139 1.67759 59.9008 3.53502 59.9008 5.78706C59.9008 8.22059 57.9311 10.1934 55.5013 10.1934C53.0716 10.1934 51.1018 8.22059 51.1018 5.78706C51.1018 4.60363 51.5677 3.52917 52.3257 2.73756L50.0932 3.53434C50.4855 4.19351 50.7108 4.9639 50.7108 5.78701C50.7108 8.22054 48.7411 10.1933 46.3114 10.1933C44.1022 10.1933 42.2734 8.56254 41.9595 6.4374L41.442 6.62209C41.0524 8.6563 39.2661 10.1933 37.1214 10.1933C36.0489 10.1933 35.066 9.80894 34.3026 9.17023L29.5146 10.8792C31.1619 11.5159 32.3305 13.117 32.3305 14.9914C32.3305 17.4249 30.3608 19.3977 27.931 19.3977C25.5012 19.3977 23.5315 17.4249 23.5315 14.9914C23.5315 14.1972 23.7413 13.4522 24.1084 12.8087L22.7957 13.2772C23.018 13.8041 23.141 14.3834 23.141 14.9915C23.141 17.425 21.1713 19.3978 18.7415 19.3978C18.2992 19.3978 17.8721 19.3324 17.4694 19.2108L17.5295 19.9588ZM51.1018 14.9914C51.1018 12.5579 53.0716 10.5851 55.5013 10.5851C57.9311 10.5851 59.9008 12.5579 59.9008 14.9914C59.9008 17.4249 57.9311 19.3977 55.5013 19.3977C53.0716 19.3977 51.1018 17.4249 51.1018 14.9914ZM41.9119 14.9915C41.9119 12.5579 43.8816 10.5852 46.3114 10.5852C48.7411 10.5852 50.7108 12.5579 50.7108 14.9915C50.7108 17.425 48.7411 19.3978 46.3114 19.3978C43.8816 19.3978 41.9119 17.425 41.9119 14.9915ZM32.7219 14.9915C32.7219 12.5579 34.6916 10.5852 37.1214 10.5852C39.5512 10.5852 41.5209 12.5579 41.5209 14.9915C41.5209 17.425 39.5512 19.3978 37.1214 19.3978C34.6916 19.3978 32.7219 17.425 32.7219 14.9915Z" fill="#E8E0FF"/>
</g>
</svg>

'''
'''--- assets/icons/captcha-hole-reg.svg ---
<svg width="61" height="68" viewBox="0 0 61 68" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g>
        <path d="M12.6025 16.9188L12.2664 15.977L11.6025 16.214V16.9188H12.6025ZM60.0024 0H61.0024V-1.41873L59.6662 -0.941803L60.0024 0ZM12.6025 26.3046L12.9387 27.2464L13.6025 27.0094V26.3046H12.6025ZM0 30.8029L-0.336165 29.8611L-1 30.098V30.8029H0ZM0 67.9151H-1V69.3339L0.336165 68.8569L0 67.9151ZM47.3999 50.9963L47.736 51.9381L48.3999 51.7012V50.9963H47.3999ZM47.3999 41.6106L47.0637 40.6688L46.3999 40.9057V41.6106H47.3999ZM60.0024 37.1122L60.3385 38.054L61.0024 37.8171V37.1122H60.0024ZM12.9387 17.8606L60.3385 0.941803L59.6662 -0.941803L12.2664 15.977L12.9387 17.8606ZM13.6025 26.3046V16.9188H11.6025V26.3046H13.6025ZM0.336165 31.7447L12.9387 27.2464L12.2664 25.3628L-0.336165 29.8611L0.336165 31.7447ZM1 67.9151V30.8029H-1V67.9151H1ZM47.0637 50.0545L-0.336165 66.9733L0.336165 68.8569L47.736 51.9381L47.0637 50.0545ZM46.3999 41.6106V50.9963H48.3999V41.6106H46.3999ZM59.6662 36.1704L47.0637 40.6688L47.736 42.5524L60.3385 38.054L59.6662 36.1704ZM59.0024 0V37.1122H61.0024V0H59.0024Z" fill="white" />
    </g>
</svg>

'''
'''--- assets/icons/captcha-hole.colors.svg ---
<svg width="61" height="68" viewBox="0 0 61 68" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_i_9908_107441)">
<mask id="mask0_9908_107441" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="61" height="68">
<mask id="path-1-inside-1_9908_107441" fill="white">
<path fill-rule="evenodd" clip-rule="evenodd" d="M60.0024 0L12.6025 16.9188V26.3046L0 30.8029V67.9151L47.3999 50.9963V41.6106L60.0024 37.1122V0Z"/>
</mask>
<path fill-rule="evenodd" clip-rule="evenodd" d="M60.0024 0L12.6025 16.9188V26.3046L0 30.8029V67.9151L47.3999 50.9963V41.6106L60.0024 37.1122V0Z" fill="#ADD5E5"/>
<path d="M12.6025 16.9188L12.2664 15.977L11.6025 16.214V16.9188H12.6025ZM60.0024 0H61.0024V-1.41873L59.6662 -0.941803L60.0024 0ZM12.6025 26.3046L12.9387 27.2464L13.6025 27.0094V26.3046H12.6025ZM0 30.8029L-0.336165 29.8611L-1 30.098V30.8029H0ZM0 67.9151H-1V69.3339L0.336165 68.8569L0 67.9151ZM47.3999 50.9963L47.736 51.9381L48.3999 51.7012V50.9963H47.3999ZM47.3999 41.6106L47.0637 40.6688L46.3999 40.9057V41.6106H47.3999ZM60.0024 37.1122L60.3385 38.054L61.0024 37.8171V37.1122H60.0024ZM12.9387 17.8606L60.3385 0.941803L59.6662 -0.941803L12.2664 15.977L12.9387 17.8606ZM13.6025 26.3046V16.9188H11.6025V26.3046H13.6025ZM0.336165 31.7447L12.9387 27.2464L12.2664 25.3628L-0.336165 29.8611L0.336165 31.7447ZM1 67.9151V30.8029H-1V67.9151H1ZM47.0637 50.0545L-0.336165 66.9733L0.336165 68.8569L47.736 51.9381L47.0637 50.0545ZM46.3999 41.6106V50.9963H48.3999V41.6106H46.3999ZM59.6662 36.1704L47.0637 40.6688L47.736 42.5524L60.3385 38.054L59.6662 36.1704ZM59.0024 0V37.1122H61.0024V0H59.0024Z" fill="white" mask="url(#path-1-inside-1_9908_107441)"/>
</mask>
<g mask="url(#mask0_9908_107441)">
<mask id="path-3-inside-2_9908_107441" fill="white">
<path fill-rule="evenodd" clip-rule="evenodd" d="M60.0024 0L12.6025 16.9188V26.3046L0 30.8029V67.9151L47.3999 50.9963V41.6106L60.0024 37.1122V0Z"/>
</mask>
<path fill-rule="evenodd" clip-rule="evenodd" d="M60.0024 0L12.6025 16.9188V26.3046L0 30.8029V67.9151L47.3999 50.9963V41.6106L60.0024 37.1122V0Z" fill="#201F1F"/>
<path d="M12.6025 16.9188L12.2664 15.977L11.6025 16.214V16.9188H12.6025ZM60.0024 0H61.0024V-1.41873L59.6662 -0.941803L60.0024 0ZM12.6025 26.3046L12.9387 27.2464L13.6025 27.0094V26.3046H12.6025ZM0 30.8029L-0.336165 29.8611L-1 30.098V30.8029H0ZM0 67.9151H-1V69.3339L0.336165 68.8569L0 67.9151ZM47.3999 50.9963L47.736 51.9381L48.3999 51.7012V50.9963H47.3999ZM47.3999 41.6106L47.0637 40.6688L46.3999 40.9057V41.6106H47.3999ZM60.0024 37.1122L60.3385 38.054L61.0024 37.8171V37.1122H60.0024ZM12.9387 17.8606L60.3385 0.941803L59.6662 -0.941803L12.2664 15.977L12.9387 17.8606ZM13.6025 26.3046V16.9188H11.6025V26.3046H13.6025ZM0.336165 31.7447L12.9387 27.2464L12.2664 25.3628L-0.336165 29.8611L0.336165 31.7447ZM1 67.9151V30.8029H-1V67.9151H1ZM47.0637 50.0545L-0.336165 66.9733L0.336165 68.8569L47.736 51.9381L47.0637 50.0545ZM46.3999 41.6106V50.9963H48.3999V41.6106H46.3999ZM59.6662 36.1704L47.0637 40.6688L47.736 42.5524L60.3385 38.054L59.6662 36.1704ZM59.0024 0V37.1122H61.0024V0H59.0024Z" fill="#D9D9D9" mask="url(#path-3-inside-2_9908_107441)"/>
</g>
</g>
<defs>
<filter id="filter0_i_9908_107441" x="0" y="0" width="64.0024" height="71.915" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dx="5" dy="4"/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1"/>
<feColorMatrix type="matrix" values="0 0 0 0 1 0 0 0 0 0.991667 0 0 0 0 0.991667 0 0 0 0.1 0"/>
<feBlend mode="normal" in2="shape" result="effect1_innerShadow_9908_107441"/>
</filter>
</defs>
</svg>

'''
'''--- assets/icons/captcha-reset.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10 19L9.29289 18.2929L8.58579 19L9.29289 19.7071L10 19ZM13.2929 14.2929L9.29289 18.2929L10.7071 19.7071L14.7071 15.7071L13.2929 14.2929ZM9.29289 19.7071L13.2929 23.7071L14.7071 22.2929L10.7071 18.2929L9.29289 19.7071Z" fill="#6038D0"/>
<path d="M18.0622 8.5C18.6766 9.56413 19 10.7712 19 12C19 13.2288 18.6766 14.4359 18.0622 15.5C17.4478 16.5641 16.5641 17.4478 15.5 18.0622C14.4359 18.6766 13.2288 19 12 19" stroke="#6038D0" stroke-width="2" stroke-linecap="round"/>
<path d="M14 5L14.7071 5.70711L15.4142 5L14.7071 4.29289L14 5ZM10.7071 9.70711L14.7071 5.70711L13.2929 4.29289L9.29289 8.29289L10.7071 9.70711ZM14.7071 4.29289L10.7071 0.292893L9.29289 1.70711L13.2929 5.70711L14.7071 4.29289Z" fill="#6038D0"/>
<path d="M5.93782 15.5C5.32344 14.4359 5 13.2288 5 12C5 10.7712 5.32344 9.56413 5.93782 8.5C6.5522 7.43587 7.43587 6.5522 8.5 5.93782C9.56413 5.32344 10.7712 5 12 5" stroke="#6038D0" stroke-width="2" stroke-linecap="round"/>
</svg>

'''
'''--- assets/icons/carbon-email.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M14 3H2C1.73478 3 1.48043 3.10536 1.29289 3.29289C1.10536 3.48043 1 3.73478 1 4V12C1 12.2652 1.10536 12.5196 1.29289 12.7071C1.48043 12.8946 1.73478 13 2 13H14C14.2652 13 14.5196 12.8946 14.7071 12.7071C14.8946 12.5196 15 12.2652 15 12V4C15 3.73478 14.8946 3.48043 14.7071 3.29289C14.5196 3.10536 14.2652 3 14 3ZM12.9 4L8 7.39L3.1 4H12.9ZM2 12V4.455L7.715 8.41C7.7987 8.46806 7.89813 8.49918 8 8.49918C8.10187 8.49918 8.2013 8.46806 8.285 8.41L14 4.455V12H2Z" fill="#434343"/>
</svg>

'''
'''--- assets/icons/carbon-phone.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M13.0009 14.5H12.9159C3.09086 13.935 1.69586 5.645 1.50086 3.115C1.48514 2.91829 1.5084 2.72041 1.56929 2.53271C1.63019 2.345 1.72752 2.17115 1.85571 2.02113C1.98391 1.8711 2.14045 1.74784 2.31636 1.65842C2.49227 1.569 2.6841 1.51516 2.88086 1.5H5.63586C5.83614 1.49981 6.03186 1.55976 6.19767 1.67208C6.36349 1.78441 6.49175 1.94394 6.56586 2.13L7.32586 4C7.39903 4.18177 7.41719 4.38104 7.37808 4.57305C7.33897 4.76505 7.24431 4.94134 7.10586 5.08L6.04086 6.155C6.20722 7.10037 6.65995 7.97183 7.3378 8.65148C8.01566 9.33112 8.88592 9.78615 9.83086 9.955L10.9159 8.88C11.0566 8.74308 11.2346 8.65063 11.4275 8.61417C11.6204 8.57771 11.8199 8.59887 12.0009 8.675L13.8859 9.43C14.0691 9.50644 14.2255 9.63571 14.335 9.80134C14.4445 9.96696 14.5023 10.1614 14.5009 10.36V13C14.5009 13.3978 14.3428 13.7794 14.0615 14.0607C13.7802 14.342 13.3987 14.5 13.0009 14.5ZM3.00086 2.5C2.86825 2.5 2.74107 2.55268 2.6473 2.64645C2.55353 2.74022 2.50086 2.86739 2.50086 3V3.04C2.73086 6 4.20586 13 12.9709 13.5C13.0365 13.5041 13.1024 13.4951 13.1646 13.4737C13.2268 13.4522 13.2842 13.4187 13.3334 13.375C13.3827 13.3314 13.4228 13.2784 13.4515 13.2192C13.4803 13.16 13.497 13.0957 13.5009 13.03V10.36L11.6159 9.605L10.1809 11.03L9.94086 11C5.59086 10.455 5.00086 6.105 5.00086 6.06L4.97086 5.82L6.39086 4.385L5.64086 2.5H3.00086Z" fill="#434343"/>
</svg>

'''
'''--- assets/icons/chartTrend.colors.svg ---
<svg width="44" height="44" viewBox="0 0 44 44" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M2.0625 33.6885L11.6875 23.376L20.625 33.6885L38.3103 12.5182" stroke="black" stroke-width="2.27586"/>
    <path d="M42.5523 8.21205L40.6585 19.7711L31.106 10.6982L42.5523 8.21205Z" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/chat.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M4.03303 19.1602C4.00296 19.1597 3.98855 19.1521 3.97982 19.1462C3.96803 19.1383 3.95442 19.124 3.94449 19.103C3.93457 19.082 3.93217 19.0624 3.93349 19.0483C3.93447 19.0378 3.93779 19.0219 3.95644 18.9983L3.25031 18.4402L3.95644 18.9983L5.08528 17.5698C5.57067 16.9556 5.60574 16.1463 5.2976 15.5017C4.72526 14.3045 4.40101 12.9501 4.40101 11.5112C4.40101 9.06771 5.33173 7.19173 6.80049 5.91534C8.28342 4.62663 10.3744 3.9 12.7505 3.9C15.1266 3.9 17.2176 4.62663 18.7005 5.91534C20.1693 7.19173 21.1 9.06771 21.1 11.5112C21.1 13.9509 20.1783 15.7631 18.716 17.0092C17.2324 18.2735 15.1271 19.0076 12.7075 19.1234C11.2394 19.1937 10.6365 19.2227 10.0333 19.2346C9.60837 19.2429 9.18328 19.2429 8.4555 19.2429L4.03303 19.1602Z" stroke="#6038D0" stroke-width="1.8"/>
</svg>

'''
'''--- assets/icons/check.svg ---
<svg width="10" height="8" viewBox="0 0 10 8" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M3.52863 5.10885L1.73662 3.34056L0.541748 4.51952L2.33361 6.2878L3.52863 7.46675L5.18977 5.82108L9.87508 1.1791L8.68065 0L3.52863 5.10885Z" fill="currentColor"/>
</svg>

'''
'''--- assets/icons/checkList.svg ---
<svg width="28" height="30" viewBox="0 0 28 30" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M24.4275 15.9523V5.47615C24.4275 4.4658 24.0261 3.49683 23.3117 2.78241C22.5972 2.06799 21.6283 1.66663 20.6179 1.66663H5.37984C4.36949 1.66663 3.40052 2.06799 2.6861 2.78241C1.97167 3.49683 1.57031 4.4658 1.57031 5.47615V24.5238C1.57031 25.5341 1.97167 26.5031 2.6861 27.2175C3.40052 27.9319 4.36949 28.3333 5.37984 28.3333H16.8084" stroke="#6038D0" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M26.0241 19.7619L19.6684 26.124L17.7617 24.2173" stroke="#6038D0" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M7.28516 9.19043H16.809" stroke="#6038D0" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M7.28516 13.9999H18.7137" stroke="#6038D0" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M7.28516 18.8095H12.9994" stroke="#6038D0" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/checkbox-checked.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect x="1" y="1" width="14" height="14" rx="1" fill="#201F1F" stroke="#201F1F" stroke-width="2"/>
  <path d="M4 8.00012L7 11.0001L12.0002 6" stroke="white" stroke-width="2"/>
</svg>

'''
'''--- assets/icons/checkbox-unchecked.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="0.75" y="0.75" width="14.5" height="14.5" rx="1.25" stroke="#201F1F" stroke-width="1.5"/>
</svg>

'''
'''--- assets/icons/checkmark.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M8.86792 14.3039L6.01533 11.489L4.11328 13.3657L6.96564 16.1806L8.86792 18.0573L11.5122 15.4376L18.9705 8.04833L17.0691 6.17139L8.86792 14.3039Z" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/claimsLink.svg ---
<svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="3" cy="3" r="2.5" stroke="#434343"/>
    <circle cx="11" cy="11" r="2.5" stroke="#434343"/>
    <path d="M2.5 5.5V9H3.5V5.5H2.5ZM5 11.5H8.5V10.5H5V11.5ZM2.5 9C2.5 10.3807 3.61929 11.5 5 11.5V10.5C4.17157 10.5 3.5 9.82843 3.5 9H2.5Z" fill="#434343"/>
</svg>

'''
'''--- assets/icons/clock.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M7.99967 14.6666C11.6816 14.6666 14.6663 11.6819 14.6663 7.99998C14.6663 4.31808 11.6816 1.33331 7.99967 1.33331C4.31778 1.33331 1.33301 4.31808 1.33301 7.99998C1.33301 11.6819 4.31778 14.6666 7.99967 14.6666Z" stroke="white" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M10 10.6667L8.39067 9.05739C8.1406 8.8074 8.00008 8.46832 8 8.11473V4.00006" stroke="white" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/close-circle.svg ---
<svg width="17" height="17" viewBox="0 0 17 17" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="8.5" cy="8.5" r="8.5" fill="#BFBFBF"/>
<path d="M5 5L12 12M12 5L5 12" stroke="white" stroke-linecap="round"/>
</svg>

'''
'''--- assets/icons/close.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M1 1L17 17" stroke="currentColor" stroke-width="2"/>
<path d="M17 1L0.999999 17" stroke="currentColor" stroke-width="2"/>
</svg>

'''
'''--- assets/icons/comment-block.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M8.00065 14.6667C11.6825 14.6667 14.6673 11.6819 14.6673 8.00004C14.6673 4.31814 11.6825 1.33337 8.00065 1.33337C4.31875 1.33337 1.33398 4.31814 1.33398 8.00004C1.33398 11.6819 4.31875 14.6667 8.00065 14.6667Z" stroke="#6038D0" stroke-width="2"/>
    <path d="M3.33398 12.6667L12.6673 3.33337" stroke="#6038D0" stroke-width="2"/>
</svg>

'''
'''--- assets/icons/connection.svg ---
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M25.951 15.7492H34.798C34.9048 15.7492 35.0095 15.7797 35.0997 15.8371C35.1899 15.8945 35.2618 15.9764 35.3072 16.0731C35.3525 16.1699 35.3693 16.2776 35.3556 16.3837C35.342 16.4897 35.2984 16.5896 35.23 16.6717L30.8065 21.9817C30.7537 22.045 30.6876 22.0959 30.613 22.1309C30.5383 22.1658 30.4569 22.1839 30.3745 22.1839C30.292 22.1839 30.2106 22.1658 30.136 22.1309C30.0613 22.0959 29.9953 22.045 29.9425 21.9817L25.519 16.6717C25.4506 16.5896 25.407 16.4897 25.3933 16.3837C25.3796 16.2776 25.3964 16.1699 25.4418 16.0731C25.4871 15.9764 25.5591 15.8945 25.6492 15.8371C25.7394 15.7797 25.8441 15.7492 25.951 15.7492ZM1.20096 20.2492H10.048C10.1548 20.2492 10.2595 20.2187 10.3497 20.1613C10.4399 20.1039 10.5118 20.022 10.5572 19.9253C10.6025 19.8285 10.6193 19.7208 10.6056 19.6147C10.592 19.5087 10.5484 19.4088 10.48 19.3267L6.05646 14.0167C6.00367 13.9534 5.93761 13.9025 5.86296 13.8675C5.78831 13.8326 5.70689 13.8145 5.62446 13.8145C5.54203 13.8145 5.46061 13.8326 5.38596 13.8675C5.31131 13.9025 5.24525 13.9534 5.19246 14.0167L0.768961 19.3267C0.700556 19.4088 0.656965 19.5087 0.643293 19.6147C0.629621 19.7208 0.646434 19.8285 0.691762 19.9253C0.73709 20.022 0.809059 20.1039 0.899239 20.1613C0.989419 20.2187 1.09408 20.2492 1.20096 20.2492Z" fill="#6038D0"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M17.9988 6.74967C14.5068 6.74967 11.3838 8.34042 9.32055 10.8402C9.22842 10.9596 9.11321 11.0593 8.98179 11.1333C8.85037 11.2073 8.7054 11.2541 8.55552 11.2709C8.40564 11.2878 8.25391 11.2743 8.10933 11.2313C7.96476 11.1884 7.8303 11.1168 7.71395 11.0208C7.5976 10.9248 7.50174 10.8064 7.43207 10.6727C7.36239 10.5389 7.32033 10.3925 7.30837 10.2421C7.29642 10.0918 7.31481 9.94057 7.36247 9.79747C7.41013 9.65438 7.48608 9.52233 7.5858 9.40917C9.23322 7.41461 11.4189 5.93519 13.8828 5.14689C16.3467 4.35859 18.9852 4.29458 21.4844 4.96247C23.9837 5.63036 26.2385 7.00204 27.9807 8.91436C29.7229 10.8267 30.8792 13.1992 31.312 15.7497H29.0238C28.5043 13.209 27.1234 10.9257 25.1145 9.28574C23.1056 7.64584 20.592 6.74999 17.9988 6.74967ZM6.9738 20.2497C7.39974 22.3301 8.40559 24.2475 9.87512 25.7805C11.3447 27.3134 13.2179 28.3994 15.2785 28.9128C17.339 29.4262 19.5028 29.3462 21.5198 28.682C23.5368 28.0178 25.3247 26.7965 26.677 25.1592C26.7692 25.0398 26.8844 24.9401 27.0158 24.8661C27.1472 24.7921 27.2922 24.7453 27.4421 24.7284C27.5919 24.7116 27.7437 24.725 27.8883 24.768C28.0328 24.811 28.1673 24.8826 28.2836 24.9785C28.4 25.0745 28.4958 25.1929 28.5655 25.3267C28.6352 25.4604 28.6773 25.6068 28.6892 25.7572C28.7012 25.9075 28.6828 26.0588 28.6351 26.2019C28.5875 26.345 28.5115 26.477 28.4118 26.5902C26.7644 28.5847 24.5787 30.0641 22.1148 30.8524C19.6509 31.6407 17.0124 31.7048 14.5132 31.0369C12.0139 30.369 9.75908 28.9973 8.01687 27.085C6.27466 25.1726 5.11838 22.8002 4.68555 20.2497H6.9738Z" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/copy.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M9.33325 5.33325H2.66659C1.93125 5.33325 1.33325 5.93125 1.33325 6.66659V13.3333C1.33325 14.0686 1.93125 14.6666 2.66659 14.6666H9.33325C10.0686 14.6666 10.6666 14.0686 10.6666 13.3333V6.66659C10.6666 5.93125 10.0686 5.33325 9.33325 5.33325Z" fill="#595959"/>
    <path d="M13.3333 1.33325H6.66659C6.31296 1.33325 5.97382 1.47373 5.72378 1.72378C5.47373 1.97382 5.33325 2.31296 5.33325 2.66659V3.99992H10.6666C11.0202 3.99992 11.3593 4.14039 11.6094 4.39044C11.8594 4.64049 11.9999 4.97963 11.9999 5.33325V10.6666H13.3333C13.6869 10.6666 14.026 10.5261 14.2761 10.2761C14.5261 10.026 14.6666 9.68687 14.6666 9.33325V2.66659C14.6666 2.31296 14.5261 1.97382 14.2761 1.72378C14.026 1.47373 13.6869 1.33325 13.3333 1.33325Z" fill="#595959"/>
</svg>

'''
'''--- assets/icons/createNewDao.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M7.0366 7.99023L18.4595 4V11.2723C18.196 11.2401 17.9274 11.2235 17.655 11.2235C14.1099 11.2235 11.2352 14.0293 11.2286 17.4929L4 20.018V11.2652L7.0366 10.2045V7.99023Z" fill="#19D992"/>
    <path d="M17.6546 15.1479V19.8589M20.0629 17.5041H15.2431M18.4595 4L7.0366 7.99023V10.2045L4 11.2652V20.018L11.2286 17.4929C11.2352 14.0293 14.1099 11.2235 17.655 11.2235C17.9274 11.2235 18.196 11.2401 18.4595 11.2723V4Z" stroke="#19D992" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/createToken.colors.svg ---
<svg width="150" height="97" viewBox="0 0 150 97" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="58.4414" y="81.3818" width="34.9715" height="6.73762" fill="#6038D0"/>
<rect x="58.4414" y="63.415" width="34.9715" height="6.73762" fill="#6038D0"/>
<rect x="32.7734" y="83.3076" width="25.6671" height="4.81259" fill="#6038D0"/>
<rect x="58.4414" y="72.3984" width="34.9715" height="6.73762" fill="#6038D0"/>
<rect x="32.7734" y="76.5703" width="25.6671" height="4.81259" fill="#6038D0"/>
<rect x="32.7734" y="69.8321" width="25.6671" height="5.13343" fill="#6038D0"/>
<rect x="58.4414" y="54.4316" width="34.9715" height="6.73762" fill="#6038D0"/>
<rect x="32.7734" y="63.415" width="25.6671" height="4.81259" fill="#6038D0"/>
<rect x="93.4121" y="83.3067" width="25.6671" height="4.81259" fill="#6038D0"/>
<rect x="93.4121" y="76.5704" width="25.6671" height="4.81259" fill="#6038D0"/>
<rect x="93.4121" y="69.8321" width="25.6671" height="5.13343" fill="#6038D0"/>
<ellipse cx="75.4968" cy="40.0173" rx="7.06626" ry="8.2115" transform="rotate(-25.0397 75.4968 40.0173)" fill="#FF8743"/>
<ellipse cx="77.1804" cy="39.1745" rx="7.06626" ry="8.2115" transform="rotate(-25.0397 77.1804 39.1745)" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M77.0283 15.6339C73.2768 15.6793 70.2498 18.6777 70.2498 22.3699C70.2498 22.384 70.2498 22.3981 70.2499 22.4121L70.2489 22.4121C70.249 22.3981 70.249 22.384 70.249 22.3699C70.249 18.6917 67.245 15.702 63.5132 15.6345L63.5132 15.6316C67.2448 15.5642 70.2487 12.5748 70.249 8.89694L70.2498 8.89694C70.2502 12.5888 73.277 15.5869 77.0283 15.6323L77.0283 15.6339Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M65.6592 26.6022C62.8461 26.6355 60.5753 28.8803 60.5683 31.6471C60.5614 28.8915 58.309 26.6537 55.5116 26.6027L55.5116 26.6007C58.289 26.5501 60.5293 24.3437 60.5679 21.6151C60.6065 24.3552 62.8656 26.5686 65.6592 26.6012L65.6592 26.6022ZM60.5683 31.6914L60.5684 31.6914C60.5684 31.6851 60.5684 31.6788 60.5683 31.6725C60.5683 31.6788 60.5683 31.6851 60.5683 31.6914Z" fill="#E8E0FF"/>
</svg>

'''
'''--- assets/icons/default-dao-logo.colors.svg ---
<svg width="50" height="50" viewBox="0 0 50 50" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M25 0C20.0555 0 15.222 1.46622 11.1108 4.21326C6.99953 6.96029 3.79521 10.8648 1.90302 15.4329C0.0108303 20.0011 -0.484251 25.0277 0.48038 29.8773C1.44501 34.7268 3.82601 39.1813 7.32233 42.6777C10.8186 46.174 15.2732 48.555 20.1227 49.5196C24.9723 50.4842 29.9989 49.9892 34.5671 48.097C39.1352 46.2048 43.0397 43.0005 45.7867 38.8892C48.5338 34.778 50 29.9445 50 25C50 18.3696 47.3661 12.0107 42.6777 7.32233C37.9893 2.63392 31.6304 0 25 0ZM25 45.8289C25 40.3048 22.8055 35.0068 18.8994 31.1007C14.9932 27.1945 9.69524 25 4.17107 25C9.69524 25 14.9932 22.8055 18.8994 18.8993C22.8055 14.9932 25 9.69523 25 4.17105C25 9.69523 27.1945 14.9932 31.1007 18.8993C35.0068 22.8055 40.3048 25 45.8289 25C40.3048 25 35.0068 27.1945 31.1007 31.1007C27.1945 35.0068 25 40.3048 25 45.8289Z" fill="#BFBFBF"/>
</svg>

'''
'''--- assets/icons/defaultAvatar.svg ---
<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M24.0008 18.2858C24.9101 18.2858 25.7822 18.647 26.4252 19.29C27.0682 19.933 27.4294 20.805 27.4294 21.7143V22.5315C27.4294 26.6195 22.618 29.7143 16.0008 29.7143C9.38369 29.7143 4.57227 26.7806 4.57227 22.5315V21.7143C4.57227 20.805 4.93349 19.933 5.57647 19.29C6.21945 18.647 7.09152 18.2858 8.00084 18.2858H24.0008ZM24.0008 20.0001H8.00084C7.57486 20 7.16415 20.1586 6.84871 20.4449C6.53328 20.7312 6.33573 21.1246 6.29455 21.5486L6.28655 21.7143V22.5315C6.28655 25.5875 10.1597 28.0001 16.0008 28.0001C21.6306 28.0001 25.5494 25.5943 25.7094 22.7155L25.7151 22.5315V21.7143C25.7151 21.2884 25.5565 20.8776 25.2703 20.5622C24.984 20.2468 24.5905 20.0492 24.1666 20.0081L24.0008 20.0001ZM16.0008 2.28577C16.9013 2.28577 17.793 2.46313 18.625 2.80774C19.4569 3.15234 20.2128 3.65743 20.8496 4.29418C21.4863 4.93092 21.9914 5.68685 22.336 6.51879C22.6806 7.35074 22.858 8.24242 22.858 9.14291C22.858 10.0434 22.6806 10.9351 22.336 11.767C21.9914 12.599 21.4863 13.3549 20.8496 13.9916C20.2128 14.6284 19.4569 15.1335 18.625 15.4781C17.793 15.8227 16.9013 16.0001 16.0008 16.0001C14.1822 16.0001 12.4381 15.2776 11.1521 13.9916C9.86614 12.7057 9.14369 10.9615 9.14369 9.14291C9.14369 7.32428 9.86614 5.58014 11.1521 4.29418C12.4381 3.00821 14.1822 2.28577 16.0008 2.28577ZM16.0008 4.00005C14.6369 4.00005 13.3288 4.54189 12.3643 5.50636C11.3998 6.47083 10.858 7.77894 10.858 9.14291C10.858 10.5069 11.3998 11.815 12.3643 12.7795C13.3288 13.7439 14.6369 14.2858 16.0008 14.2858C17.3648 14.2858 18.6729 13.7439 19.6374 12.7795C20.6019 11.815 21.1437 10.5069 21.1437 9.14291C21.1437 7.77894 20.6019 6.47083 19.6374 5.50636C18.6729 4.54189 17.3648 4.00005 16.0008 4.00005Z" fill="#8C8C8C"/>
</svg>

'''
'''--- assets/icons/delegate.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M9.81818 5.625C9.81818 5.21079 9.4824 4.875 9.06818 4.875C8.65397 4.875 8.31818 5.21079 8.31818 5.625H9.81818ZM2.25 8.49V7.74C1.83579 7.74 1.5 8.07579 1.5 8.49H2.25ZM1.5 11.16C1.5 11.5742 1.83579 11.91 2.25 11.91C2.66421 11.91 3 11.5742 3 11.16H1.5ZM15.75 8.49H16.5C16.5 8.07579 16.1642 7.74 15.75 7.74V8.49ZM15 11.16C15 11.5742 15.3358 11.91 15.75 11.91C16.1642 11.91 16.5 11.5742 16.5 11.16H15ZM8.31818 11.25C8.31818 11.6642 8.65397 12 9.06818 12C9.4824 12 9.81818 11.6642 9.81818 11.25H8.31818ZM8.31818 5.625V8.49H9.81818V5.625H8.31818ZM9.06818 7.74H2.25V9.24H9.06818V7.74ZM1.5 8.49V11.16H3V8.49H1.5ZM15 8.49V11.16H16.5V8.49H15ZM15.75 7.74H9.06818V9.24H15.75V7.74ZM9.81818 11.25V8.49H8.31818V11.25H9.81818ZM2.25 9.24H9V7.74H2.25V9.24ZM9 9.24H15.75V7.74H9V9.24Z" fill="#201F1F"/>
    <circle cx="9" cy="15.75" r="1.5" stroke="#201F1F" stroke-width="1.5"/>
    <circle cx="15.75" cy="15.75" r="1.5" stroke="#201F1F" stroke-width="1.5"/>
    <circle cx="2.25" cy="15.75" r="1.5" stroke="#201F1F" stroke-width="1.5"/>
    <circle cx="9" cy="2.25" r="1.5" stroke="#201F1F" stroke-width="1.5"/>
</svg>

'''
'''--- assets/icons/discover.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M17.8462 15.9615C17.8462 15.4427 17.6618 14.9989 17.293 14.6301C16.9242 14.2613 16.4804 14.0769 15.9615 14.0769C15.4427 14.0769 14.9989 14.2613 14.6301 14.6301C14.2613 14.9989 14.0769 15.4427 14.0769 15.9615C14.0769 16.4804 14.2613 16.9242 14.6301 17.293C14.9989 17.6618 15.4427 17.8462 15.9615 17.8462C16.4804 17.8462 16.9242 17.6618 17.293 17.293C17.6618 16.9242 17.8462 16.4804 17.8462 15.9615ZM20 19.4615C20 19.6074 19.9467 19.7336 19.8401 19.8401C19.7336 19.9467 19.6074 20 19.4615 20C19.3101 20 19.1839 19.9467 19.0829 19.8401L17.64 18.4014C17.138 18.7492 16.5785 18.9231 15.9615 18.9231C15.5605 18.9231 15.177 18.8453 14.811 18.6896C14.445 18.534 14.1295 18.3236 13.8645 18.0586C13.5995 17.7936 13.3891 17.4781 13.2335 17.1121C13.0778 16.7461 13 16.3626 13 15.9615C13 15.5605 13.0778 15.177 13.2335 14.811C13.3891 14.445 13.5995 14.1295 13.8645 13.8645C14.1295 13.5995 14.445 13.3891 14.811 13.2335C15.177 13.0778 15.5605 13 15.9615 13C16.3626 13 16.7461 13.0778 17.1121 13.2335C17.4781 13.3891 17.7936 13.5995 18.0586 13.8645C18.3236 14.1295 18.534 14.445 18.6896 14.811C18.8453 15.177 18.9231 15.5605 18.9231 15.9615C18.9231 16.5785 18.7492 17.138 18.4014 17.64L19.8444 19.0829C19.9481 19.1867 20 19.3129 20 19.4615Z" fill="#19D992"/>
    <path d="M7.0366 7.99023L18.4595 4V12.2138C14 10.2045 10.5 14 12 17.5L4 20.018V11.2652L7.0366 10.2045V7.99023Z" fill="#19D992" stroke="#19D992" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/draft-bookmark-fulfill.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M5.5 18.812V4.43182C5.5 4.05526 5.80526 3.75 6.18182 3.75H17.3182C17.6947 3.75 18 4.05526 18 4.43182V12.25V18.6421C18 19.2282 17.3094 19.5412 16.8687 19.1548L13.1742 15.9157C12.5645 15.3811 11.6602 15.3577 11.0237 15.86L6.60417 19.3473C6.15702 19.7001 5.5 19.3816 5.5 18.812Z" fill="currentColor" stroke="currentColor"/>
</svg>

'''
'''--- assets/icons/draft-bookmark.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M5.5 18.812V4.43182C5.5 4.05526 5.80526 3.75 6.18182 3.75H17.3182C17.6947 3.75 18 4.05526 18 4.43182V12.25V18.6421C18 19.2282 17.3094 19.5412 16.8687 19.1548L13.1742 15.9157C12.5645 15.3811 11.6602 15.3577 11.0237 15.86L6.60417 19.3473C6.15702 19.7001 5.5 19.3816 5.5 18.812Z" stroke="currentColor"/>
</svg>

'''
'''--- assets/icons/draft-chat.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M5.64065 17.1458L6.21043 16.4248C6.59282 15.9409 6.62126 15.3002 6.38433 14.7823C5.94577 13.8238 5.69886 12.7481 5.69886 11.609C5.69886 9.59328 6.46899 8.03094 7.69413 6.96626C8.92714 5.89474 10.654 5.30005 12.5985 5.30005C14.5429 5.30005 16.2698 5.89474 17.5028 6.96626C18.7279 8.03094 19.498 9.59328 19.498 11.609C19.498 13.6226 18.7344 15.1345 17.5135 16.1749C16.2809 17.2253 14.546 17.8242 12.5745 17.9186C11.3995 17.9748 10.9152 17.998 10.4307 18.0076C10.0885 18.0144 9.74623 18.0143 9.16034 18.0143L6.0236 17.9557C5.61014 17.948 5.38425 17.4703 5.64065 17.1458Z" stroke="currentColor"/>
</svg>

'''
'''--- assets/icons/draft-comments.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M4.03303 19.1602C4.00296 19.1597 3.98855 19.1521 3.97982 19.1462C3.96803 19.1383 3.95442 19.124 3.94449 19.103C3.93457 19.082 3.93217 19.0624 3.93349 19.0483C3.93447 19.0378 3.93779 19.0219 3.95644 18.9983L3.25031 18.4402L3.95644 18.9983L5.08528 17.5698C5.57067 16.9556 5.60574 16.1463 5.2976 15.5017C4.72526 14.3045 4.40101 12.9501 4.40101 11.5112C4.40101 9.06771 5.33173 7.19173 6.80049 5.91534C8.28342 4.62663 10.3744 3.9 12.7505 3.9C15.1266 3.9 17.2176 4.62663 18.7005 5.91534C20.1693 7.19173 21.1 9.06771 21.1 11.5112C21.1 13.9509 20.1783 15.7631 18.716 17.0092C17.2324 18.2735 15.1271 19.0076 12.7075 19.1234C11.2394 19.1937 10.6365 19.2227 10.0333 19.2346C9.60837 19.2429 9.18328 19.2429 8.4555 19.2429L4.03303 19.1602Z" stroke="#8C8C8C" stroke-width="1.8"/>
</svg>

'''
'''--- assets/icons/draft-eye.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M19.9691 11.6858C19.3417 10.0631 18.2527 8.65975 16.8364 7.64925C15.4202 6.63875 13.739 6.06538 12.0004 6C10.2619 6.06538 8.58062 6.63875 7.16441 7.64925C5.74819 8.65975 4.65911 10.0631 4.03178 11.6858C3.98941 11.803 3.98941 11.9313 4.03178 12.0485C4.65911 13.6712 5.74819 15.0745 7.16441 16.085C8.58062 17.0955 10.2619 17.6689 12.0004 17.7343C13.739 17.6689 15.4202 17.0955 16.8364 16.085C18.2527 15.0745 19.3417 13.6712 19.9691 12.0485C20.0114 11.9313 20.0114 11.803 19.9691 11.6858V11.6858ZM12.0004 16.6675C9.17353 16.6675 6.18662 14.5714 5.10386 11.8671C6.18662 9.16292 9.17353 7.06675 12.0004 7.06675C14.8273 7.06675 17.8142 9.16292 18.897 11.8671C17.8142 14.5714 14.8273 16.6675 12.0004 16.6675Z" fill="currentColor"/>
  <path d="M11.9971 8.66687C11.3642 8.66687 10.7454 8.85456 10.2192 9.20621C9.69289 9.55786 9.2827 10.0577 9.04048 10.6424C8.79826 11.2272 8.73489 11.8707 8.85837 12.4915C8.98185 13.1123 9.28665 13.6825 9.73421 14.1301C10.1818 14.5776 10.752 14.8824 11.3728 15.0059C11.9936 15.1294 12.6371 15.066 13.2218 14.8238C13.8066 14.5816 14.3064 14.1714 14.6581 13.6451C15.0097 13.1188 15.1974 12.5001 15.1974 11.8671C15.1974 11.0184 14.8602 10.2044 14.2601 9.6042C13.6599 9.00404 12.8459 8.66687 11.9971 8.66687ZM11.9971 14.0006C11.5752 14.0006 11.1627 13.8755 10.8118 13.6411C10.461 13.4066 10.1875 13.0734 10.026 12.6836C9.86455 12.2937 9.8223 11.8648 9.90462 11.4509C9.98695 11.037 10.1901 10.6569 10.4885 10.3585C10.7869 10.0601 11.1671 9.85694 11.5809 9.77462C11.9948 9.6923 12.4237 9.73455 12.8136 9.89603C13.2034 10.0575 13.5367 10.331 13.7711 10.6818C14.0055 11.0327 14.1306 11.4452 14.1306 11.8671C14.1306 12.433 13.9059 12.9756 13.5058 13.3757C13.1056 13.7759 12.563 14.0006 11.9971 14.0006Z" fill="currentColor"/>
</svg>

'''
'''--- assets/icons/eyeClose.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M2 10C2 10 5.5 14 12 14C18.5 14 22 10 22 10M4 11.645L2 14M22 14L20.004 11.648M8.914 13.68L8 16.5M15.063 13.688L16 16.5" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/eyeOpen.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M21.2565 10.962C21.7305 11.582 21.7305 12.419 21.2565 13.038C19.7635 14.987 16.1815 19 11.9995 19C7.81752 19 4.23552 14.987 2.74252 13.038C2.51191 12.7411 2.38672 12.3759 2.38672 12C2.38672 11.6241 2.51191 11.2589 2.74252 10.962C4.23552 9.013 7.81752 5 11.9995 5C16.1815 5 19.7635 9.013 21.2565 10.962V10.962Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/feed.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect x="3" y="3" width="15" height="9" rx="1" fill="#6038D0"/>
    <rect x="3" y="13" width="15" height="4" rx="1" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/filter.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0)">
        <path d="M15.2492 0H0.750872C0.0846841 0 -0.251472 0.808313 0.220559 1.28034L6 7.06066V13.5C6 13.7447 6.1194 13.9741 6.3199 14.1144L8.8199 15.8638C9.31312 16.2091 10 15.8592 10 15.2494V7.06066L15.7796 1.28034C16.2507 0.80925 15.9168 0 15.2492 0Z" fill="#19D992"/>
    </g>
    <defs>
        <clipPath id="clip0">
            <rect width="16" height="16" fill="white"/>
        </clipPath>
    </defs>
</svg>

'''
'''--- assets/icons/filterBounty.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M10.3665 12.6157C10.4619 12.5199 10.5157 12.3898 10.5157 12.2539L10.5161 9.08149L13.1649 6.43265C14.676 4.92224 14.6689 1.96512 14.6682 1.8401C14.6658 1.56111 14.4403 1.33595 14.1616 1.33356C14.0363 1.33254 11.0792 1.32539 9.56807 2.83546L6.91855 5.48532H3.74648C3.61124 5.48532 3.48112 5.53914 3.38506 5.63452L1.48325 7.53633C1.35448 7.6651 1.30407 7.85211 1.3504 8.02788C1.37356 8.11679 1.42023 8.19616 1.48325 8.25918C1.5449 8.32049 1.62155 8.36614 1.70841 8.38998L4.22815 9.08762L6.91242 11.7719L7.61073 14.2923C7.63458 14.3788 7.68057 14.4555 7.74222 14.5168C7.8049 14.5798 7.88461 14.6261 7.97352 14.65C8.14929 14.6963 8.3363 14.6456 8.46473 14.5168L10.3665 12.6157ZM4.34431 8.05956L2.82606 7.63955L3.95836 6.50725H5.89662L4.34431 8.05956ZM7.36956 10.7833L5.21806 8.6315L5.69053 8.15971L7.84169 10.3112L7.36956 10.7833ZM8.56385 9.58871L6.41269 7.4372L10.2909 3.5583C11.1647 2.68523 12.7844 2.44542 13.6221 2.37968C13.5563 3.21732 13.3165 4.83674 12.4428 5.7098L8.56385 9.58871ZM7.9415 11.6564L8.92289 10.675C8.92357 10.674 8.92493 10.6733 8.92562 10.6726C8.9263 10.672 8.92698 10.6709 8.92766 10.6699L9.49449 10.1034V12.042L8.36253 13.1743L7.9415 11.6564ZM5.53758 11.5239C5.25553 11.5157 5.02048 11.7378 5.01265 12.0202C5.0055 12.2529 4.85391 12.5687 4.65089 12.7717C4.28538 13.1375 3.45761 13.1239 2.94018 13.0599C2.87546 12.5431 2.86149 11.7187 3.22938 11.3509C3.43275 11.1475 3.74886 10.9956 3.98118 10.9891C4.26289 10.9819 4.48533 10.7466 4.47784 10.4645C4.47035 10.1828 4.2353 9.96035 3.95325 9.96784C3.46272 9.98113 2.89487 10.2404 2.50688 10.628C1.56534 11.5695 1.95265 13.4097 2 13.6165C2.0218 13.7118 2.07018 13.797 2.13694 13.8638C2.20337 13.9305 2.28853 13.9789 2.38459 14.0007C2.59102 14.0481 4.43185 14.4357 5.37373 13.4938C5.76104 13.1065 6.02027 12.5394 6.0339 12.0485C6.04207 11.7664 5.81963 11.5314 5.53758 11.5239Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/filterCheck.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M8.00016 1.3335C4.3335 1.3335 1.3335 4.3335 1.3335 8.00016C1.3335 11.6668 4.3335 14.6668 8.00016 14.6668C11.6668 14.6668 14.6668 11.6668 14.6668 8.00016C14.6668 4.3335 11.6668 1.3335 8.00016 1.3335ZM8.00016 13.3335C5.06016 13.3335 2.66683 10.9402 2.66683 8.00016C2.66683 5.06016 5.06016 2.66683 8.00016 2.66683C10.9402 2.66683 13.3335 5.06016 13.3335 8.00016C13.3335 10.9402 10.9402 13.3335 8.00016 13.3335ZM11.0602 5.0535L6.66683 9.44683L4.94016 7.72683L4.00016 8.66683L6.66683 11.3335L12.0002 6.00016L11.0602 5.0535Z" fill="black"/>
</svg>

'''
'''--- assets/icons/filterClock.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M8.00016 13.3335C10.9335 13.3335 13.3335 10.9335 13.3335 8.00016C13.3335 5.06683 10.9335 2.66683 8.00016 2.66683C5.06683 2.66683 2.66683 5.06683 2.66683 8.00016C2.66683 10.9335 5.06683 13.3335 8.00016 13.3335ZM8.00016 1.3335C11.6668 1.3335 14.6668 4.3335 14.6668 8.00016C14.6668 11.6668 11.6668 14.6668 8.00016 14.6668C4.3335 14.6668 1.3335 11.6668 1.3335 8.00016C1.3335 4.3335 4.3335 1.3335 8.00016 1.3335ZM8.3335 8.5335L5.1335 10.4002L4.66683 9.46683L7.3335 7.9335V4.66683H8.3335V8.5335Z" fill="black"/>
</svg>

'''
'''--- assets/icons/filterClose.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M8.00016 13.3335C5.06016 13.3335 2.66683 10.9402 2.66683 8.00016C2.66683 5.06016 5.06016 2.66683 8.00016 2.66683C10.9402 2.66683 13.3335 5.06016 13.3335 8.00016C13.3335 10.9402 10.9402 13.3335 8.00016 13.3335ZM8.00016 1.3335C4.3135 1.3335 1.3335 4.3135 1.3335 8.00016C1.3335 11.6868 4.3135 14.6668 8.00016 14.6668C11.6868 14.6668 14.6668 11.6868 14.6668 8.00016C14.6668 4.3135 11.6868 1.3335 8.00016 1.3335ZM9.72683 5.3335L8.00016 7.06016L6.2735 5.3335L5.3335 6.2735L7.06016 8.00016L5.3335 9.72683L6.2735 10.6668L8.00016 8.94016L9.72683 10.6668L10.6668 9.72683L8.94016 8.00016L10.6668 6.2735L9.72683 5.3335Z" fill="black"/>
</svg>

'''
'''--- assets/icons/filterFunction.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M10.6665 12L14.6665 8L10.6665 4" stroke="#201F1F" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M5.3335 4L1.3335 8L5.3335 12" stroke="#201F1F" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/filterGovernance.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M2 14.166V8.16602V7.66602L4.5 6.66602V4.66602L13 1.66602V7.66602L10.5 8.66602V10.666L2 14.166Z" stroke="black" stroke-width="1.33"/>
</svg>

'''
'''--- assets/icons/filterMembers.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M11.3332 14V12.6667C11.3332 11.9594 11.0522 11.2811 10.5521 10.781C10.052 10.281 9.37375 10 8.6665 10H3.33317C2.62593 10 1.94765 10.281 1.44755 10.781C0.947456 11.2811 0.666504 11.9594 0.666504 12.6667V14" stroke="#201F1F" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M6.00016 7.33333C7.47292 7.33333 8.66683 6.13943 8.66683 4.66667C8.66683 3.19391 7.47292 2 6.00016 2C4.5274 2 3.3335 3.19391 3.3335 4.66667C3.3335 6.13943 4.5274 7.33333 6.00016 7.33333Z" stroke="#201F1F" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M15.3335 14.0002V12.6669C15.3331 12.0761 15.1364 11.5021 14.7744 11.0351C14.4124 10.5682 13.9056 10.2346 13.3335 10.0869" stroke="#201F1F" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M10.6665 2.08691C11.2401 2.23378 11.7485 2.56738 12.1116 3.03512C12.4747 3.50286 12.6717 4.07813 12.6717 4.67025C12.6717 5.26236 12.4747 5.83763 12.1116 6.30537C11.7485 6.77311 11.2401 7.10671 10.6665 7.25358" stroke="#201F1F" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/filterTransfer.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M3.49218 9.87416C3.75807 10.8665 4.34394 11.7433 5.15895 12.3687C5.97396 12.994 6.97254 13.333 7.99984 13.333C9.02713 13.333 10.0257 12.994 10.8407 12.3687C11.6557 11.7433 12.2416 10.8665 12.5075 9.87416" stroke="#201F1F" stroke-width="1.33333"/>
    <path d="M10.917 5.85375L11.4376 6.27021L12.2705 5.22905L11.75 4.81259L10.917 5.85375ZM8.00016 2.6665L8.41663 2.14592L8.00016 1.81275L7.5837 2.14592L8.00016 2.6665ZM4.25037 4.81259L3.72979 5.22905L4.56271 6.27021L5.08329 5.85375L4.25037 4.81259ZM7.3335 8.6665L7.3335 9.33317L8.66683 9.33317L8.66683 8.6665L7.3335 8.6665ZM11.75 4.81259L8.41663 2.14592L7.5837 3.18708L10.917 5.85375L11.75 4.81259ZM7.5837 2.14592L4.25037 4.81259L5.08329 5.85375L8.41663 3.18708L7.5837 2.14592ZM7.3335 2.6665L7.3335 8.6665L8.66683 8.6665L8.66683 2.6665L7.3335 2.6665Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/filtersMenu.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M21 6.21658L21 4.92995L13.5 4.92995L13.5 6.21658L21 6.21658ZM13.5 14.065L13.5 9.94782L14.325 9.43317L15.825 9.43317L16.5 9.94782L16.5 14.065L15.75 14.5797L14.25 14.5797L13.5 14.065ZM9 7.63188L9 3.51465L9.75 3L11.25 3L12 3.51465L12 7.63188L11.25 8.14653L9.75 8.14653L9 7.63188ZM21 12.6498L21 11.3631L18 11.3631L18 12.6498L21 12.6498ZM12 11.3631L12 12.6498L3 12.6497L3 11.3631L12 11.3631ZM7.5 6.21658L7.5 4.92995L3 4.92995L3 6.21658L7.5 6.21658ZM7.5 16.381L7.5 20.4853L8.25 21L9.675 21L10.425 20.4853L10.425 16.381L9.675 15.8663L8.25 15.8663L7.5 16.381ZM21 19.0829L21 17.7963L12 17.7963L12 19.0829L21 19.0829ZM6 17.7963L6 19.0829L3 19.0829L3 17.7963L6 17.7963Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/flag.svg ---
<svg width="41" height="46" viewBox="0 0 41 46" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd"
        d="M40.4772 0L8.50199 11.4593V17.8165L0 20.8634V46L31.9752 34.5407V28.1835L40.4772 25.1366V0Z" fill="white"/>
</svg>

'''
'''--- assets/icons/funds.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M9 1C7.34176 1 5.82843 1.24933 4.61871 1.69854C4.51949 1.73512 4.42853 1.7907 4.35099 1.86211C4.27346 1.93352 4.21089 2.01936 4.16685 2.11474C4.1228 2.21011 4.09815 2.31315 4.0943 2.41796C4.09045 2.52277 4.10747 2.62731 4.1444 2.7256C4.18132 2.8239 4.23743 2.91402 4.30952 2.99083C4.3816 3.06764 4.46825 3.12963 4.56451 3.17325C4.66077 3.21688 4.76477 3.24129 4.87056 3.2451C4.97634 3.2489 5.08185 3.23202 5.18106 3.19543C6.15686 2.83307 7.51149 2.59667 9 2.59667C10.6187 2.59667 12.0851 2.88127 13.0707 3.29522C13.5636 3.50219 13.9268 3.74381 14.1367 3.95218C14.3465 4.16055 14.3885 4.29646 14.3885 4.40125C14.3885 4.50606 14.3465 4.64194 14.1367 4.85031C13.9268 5.05868 13.5636 5.30031 13.0707 5.50728C12.0851 5.92121 10.6187 6.20582 9 6.20582C7.38132 6.20582 5.92317 5.92143 4.93765 5.50728C4.44489 5.3002 4.07317 5.05891 3.86331 4.85031C3.65345 4.64171 3.61151 4.49876 3.61151 4.39293C3.60852 4.18315 3.52231 3.98297 3.37152 3.83568C3.22074 3.68838 3.0175 3.6058 2.80576 3.6058C2.59401 3.6058 2.39077 3.68838 2.23999 3.83568C2.0892 3.98297 2.00299 4.18315 2 4.39293V14.0229C2 14.6277 2.34667 15.1313 2.77218 15.4865C3.1977 15.8417 3.72811 16.1094 4.35012 16.3264C5.59415 16.7604 7.21369 17 9 17C10.7863 17 12.4058 16.7604 13.6499 16.3264C14.2719 16.1094 14.8023 15.8417 15.2278 15.4865C15.6533 15.1313 16 14.6277 16 14.0229V8.03534C15.997 7.82557 15.9108 7.62539 15.76 7.47809C15.6092 7.33079 15.406 7.24822 15.1942 7.24822C14.9825 7.24822 14.7793 7.33079 14.6285 7.47809C14.4777 7.62539 14.3915 7.82557 14.3885 8.03534C14.3885 8.04439 14.397 8.11653 14.1954 8.28482C13.9939 8.45311 13.6119 8.65951 13.1127 8.83368C12.1143 9.18205 10.6356 9.4158 9 9.4158C7.5091 9.4158 6.15335 9.22131 5.16427 8.92515C4.17518 8.62902 3.637 8.1542 3.61151 8.09355V6.62162C3.83132 6.74712 4.05774 6.86567 4.30815 6.97089C5.56509 7.4991 7.19674 7.80249 9 7.80249C10.8032 7.80249 12.4434 7.49873 13.7002 6.97089C14.3287 6.70699 14.861 6.38723 15.2782 5.97297C15.6954 5.55872 16 5.01499 16 4.40125C16 3.7875 15.6954 3.23545 15.2782 2.82121C14.861 2.40696 14.3287 2.0872 13.7002 1.82328C12.4434 1.29546 10.8033 1 9 1ZM3.61151 10.0146C3.95463 10.1727 4.28608 10.3331 4.69424 10.4553C5.8834 10.8114 7.37175 11.0125 9 11.0125C10.7863 11.0125 12.4058 10.773 13.6499 10.3389C13.916 10.246 14.1566 10.1359 14.3885 10.0229V11.3035C14.3901 11.295 14.3529 11.411 14.1199 11.578C13.8869 11.7449 13.4945 11.9324 12.9952 12.0936C11.9966 12.4159 10.5714 12.6341 9 12.6341C7.42859 12.6341 6.00341 12.4159 5.0048 12.0936C4.50549 11.9324 4.11312 11.7449 3.8801 11.578C3.64707 11.411 3.60992 11.295 3.61151 11.3035V10.0146ZM3.61151 13.2661C3.88407 13.3967 4.17843 13.5112 4.5012 13.6154C5.72077 14.0091 7.28382 14.2308 9 14.2308C10.7162 14.2308 12.2792 14.0091 13.4988 13.6154C13.8212 13.5113 14.1139 13.3966 14.3885 13.2661V14.0229C14.3885 14.0316 14.397 14.0958 14.1954 14.264C13.9939 14.4323 13.6119 14.6387 13.1127 14.8129C12.1143 15.1612 10.6356 15.4033 9 15.4033C7.36437 15.4033 5.88572 15.1612 4.88729 14.8129C4.38808 14.6387 4.01448 14.4323 3.81295 14.264C3.61141 14.0958 3.61151 14.0317 3.61151 14.0229V13.2661Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/globalFeed.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M6.00784 5.23199C5.45293 5.23199 5.00391 5.78363 5.00391 6.46399V12.624C5.00391 13.3043 5.45293 13.856 6.00784 13.856H18.0551C18.61 13.856 19.059 13.3043 19.059 12.624V6.46399C19.059 5.78363 18.61 5.23199 18.0551 5.23199H6.00784ZM9.01965 18.1679C9.01965 17.8278 9.24417 17.5519 9.52162 17.5519H18.5571C18.8345 17.5519 19.059 17.8278 19.059 18.1679C19.059 18.5081 18.8345 18.7839 18.5571 18.7839H9.52162C9.24417 18.7839 9.01965 18.5081 9.01965 18.1679ZM9.52162 15.088C9.24417 15.088 9.01965 15.3638 9.01965 15.7039C9.01965 16.0441 9.24417 16.3199 9.52162 16.3199H18.5571C18.8345 16.3199 19.059 16.0441 19.059 15.7039C19.059 15.3638 18.8345 15.088 18.5571 15.088H9.52162ZM6.50981 18.7839C7.3412 18.7839 8.01572 17.9565 8.01572 16.9359C8.01572 15.9154 7.3412 15.088 6.50981 15.088C5.67843 15.088 5.00391 15.9154 5.00391 16.9359C5.00391 17.9565 5.67843 18.7839 6.50981 18.7839Z" fill="#13A36E"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M4 5.23199C4 5.00701 4.04902 4.79616 4.13432 4.61464C4.20981 4.45553 4.31275 4.31898 4.43628 4.21521C4.59805 4.07941 4.79315 4 5.00394 4H19.0591C19.614 4 20.063 4.55163 20.063 5.23199V18.7839C20.063 19.4643 19.614 20.0159 19.0591 20.0159H5.00394C4.44903 20.0159 4 19.4643 4 18.7839V5.23199ZM5.00394 6.46399C5.00394 5.78363 5.45296 5.23199 6.00787 5.23199H18.0551C18.61 5.23199 19.0591 5.78363 19.0591 6.46399V12.624C19.0591 13.3043 18.61 13.856 18.0551 13.856H6.00787C5.45296 13.856 5.00394 13.3043 5.00394 12.624V6.46399ZM9.52165 17.5519C9.2442 17.5519 9.01968 17.8278 9.01968 18.1679C9.01968 18.5081 9.2442 18.7839 9.52165 18.7839H18.5571C18.8345 18.7839 19.0591 18.5081 19.0591 18.1679C19.0591 17.8278 18.8345 17.5519 18.5571 17.5519H9.52165ZM9.01968 15.7039C9.01968 15.3638 9.2442 15.088 9.52165 15.088H18.5571C18.8345 15.088 19.0591 15.3638 19.0591 15.7039C19.0591 16.0441 18.8345 16.3199 18.5571 16.3199H9.52165C9.2442 16.3199 9.01968 16.0441 9.01968 15.7039ZM8.01575 16.9359C8.01575 17.9565 7.34123 18.7839 6.50984 18.7839C5.67846 18.7839 5.00394 17.9565 5.00394 16.9359C5.00394 15.9154 5.67846 15.088 6.50984 15.088C7.34123 15.088 8.01575 15.9154 8.01575 16.9359Z" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/goal.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M8.47345 2.01401C7.19199 2.13672 6.11168 2.50761 5.13404 3.16051C4.07982 3.86454 3.26517 4.79201 2.70877 5.92164C2.3615 6.62673 2.15096 7.31842 2.03435 8.13745C1.98855 8.45918 1.98855 9.53913 2.03435 9.86086C2.14907 10.6666 2.36221 11.3725 2.69522 12.0493C3.07198 12.8151 3.44102 13.3296 4.05028 13.9384C4.65289 14.5404 5.17582 14.9164 5.91354 15.278C6.42829 15.5303 6.76064 15.6531 7.28248 15.7839C8.6518 16.1271 10.0251 16.0613 11.363 15.5884C11.7685 15.4451 12.4764 15.0906 12.8404 14.8486C13.6586 14.3046 14.4097 13.5353 14.9457 12.6922C15.1429 12.382 15.4598 11.7276 15.5891 11.3636C16.0906 9.95152 16.1338 8.45751 15.7146 7.01586C15.6487 6.78936 15.4141 6.15886 15.3848 6.12959C15.3779 6.12267 15.1475 6.33876 14.8729 6.60977C14.5983 6.88078 14.3333 7.12583 14.284 7.15431C14.2284 7.18651 14.2002 7.22076 14.2094 7.2448C14.2664 7.39332 14.3681 7.80666 14.4155 8.08274C14.828 10.4844 13.5832 12.8828 11.3698 13.9509C9.85797 14.6804 8.10242 14.676 6.59801 13.9391C5.45796 13.3806 4.58562 12.5067 4.03867 11.3751C3.31146 9.8706 3.31146 8.12771 4.03867 6.6232C4.99386 4.64705 7.0195 3.42477 9.19899 3.50949C9.64491 3.52681 10.1968 3.61634 10.5668 3.73143C10.6867 3.76869 10.786 3.79664 10.7876 3.79352C10.8343 3.69865 11.0822 3.42162 11.4287 3.07697C11.6706 2.8364 11.8684 2.63195 11.8684 2.62262C11.8684 2.61329 11.7668 2.56536 11.6425 2.51609C10.737 2.1571 9.85885 1.98966 8.93889 2.00049C8.73561 2.00287 8.52616 2.00897 8.47345 2.01401ZM13.4984 2.24385C13.3798 2.27925 11.5198 4.14154 11.4876 4.25715C11.4719 4.3135 11.4854 4.5983 11.5265 5.07782L11.5895 5.81221L10.1299 7.27574C9.32718 8.08069 8.6507 8.77867 8.62667 8.82681C8.45987 9.16099 8.83168 9.53248 9.16614 9.36583C9.21432 9.34181 9.91289 8.66596 10.7185 7.86392L12.1833 6.40567L12.9072 6.46733C13.3438 6.50453 13.6691 6.52045 13.7267 6.50749C13.8039 6.49009 14.0043 6.30415 14.7761 5.53359C15.8105 4.50075 15.817 4.49235 15.7569 4.2691C15.724 4.14701 15.581 4.00682 15.4639 3.98176C15.4214 3.97265 15.1116 3.9419 14.7755 3.91342C14.4394 3.88495 14.1581 3.85527 14.1503 3.84747C14.1425 3.83967 14.1128 3.56456 14.0843 3.23612C14.0558 2.90766 14.0255 2.59868 14.0169 2.54947C13.9956 2.42754 13.857 2.277 13.7348 2.24311C13.6194 2.21108 13.6081 2.21113 13.4984 2.24385ZM8.47345 4.34975C7.06583 4.52217 5.82916 5.28753 5.07159 6.45507C4.06175 8.01145 4.06164 9.9841 5.07131 11.5432C5.41856 12.0795 5.90763 12.568 6.44743 12.9178C8.35115 14.1516 10.8589 13.8462 12.4017 12.1927C13.5702 10.9404 13.9672 9.19874 13.4523 7.5835C13.408 7.44431 13.3569 7.32994 13.3387 7.32933C13.3206 7.3287 13.121 7.31133 12.8951 7.29073L12.4844 7.25331L12.157 7.57813L11.8296 7.90293L11.8881 8.08859C11.9929 8.42178 12.0175 8.59456 12.0175 8.99915C12.0175 9.41523 11.9929 9.58063 11.8771 9.94293C11.591 10.8384 10.8387 11.5898 9.93822 11.8796C9.57764 11.9956 9.41109 12.0205 8.99365 12.0205C8.57689 12.0205 8.41103 11.9958 8.04908 11.88C7.15248 11.5932 6.40044 10.8416 6.11078 9.94293C5.99466 9.58265 5.9698 9.41625 5.9698 8.99915C5.9698 8.58203 5.99466 8.4156 6.1108 8.05538C6.34681 7.32334 6.89586 6.67258 7.57817 6.31621C8.2979 5.94029 9.14774 5.86353 9.90498 6.10607L10.0908 6.16557L10.4159 5.83845L10.741 5.5113L10.7035 5.10096C10.6829 4.87528 10.6655 4.67583 10.6649 4.65772C10.6634 4.61346 10.2272 4.47643 9.85608 4.40364C9.5119 4.33612 8.80852 4.30869 8.47345 4.34975ZM8.67879 6.80112C8.3071 6.86046 7.87175 7.05485 7.59276 7.28606C7.34126 7.49448 7.15032 7.73704 7.00864 8.02803C6.83007 8.39476 6.79223 8.56455 6.79223 8.99915C6.79223 9.43332 6.82996 9.60289 7.00823 9.97028C7.22515 10.4173 7.57173 10.7629 8.0265 10.9859C9.11965 11.5217 10.4514 11.0635 10.9783 9.97028C11.1523 9.60924 11.1965 9.40938 11.1971 8.98091C11.1974 8.7828 11.1881 8.61122 11.1765 8.59962C11.1649 8.58802 10.8261 8.90527 10.4236 9.30458C9.62019 10.1016 9.56247 10.1438 9.18768 10.2081C8.80121 10.2743 8.4176 10.1489 8.12925 9.86206C7.84218 9.57655 7.71706 9.19384 7.78373 8.80528C7.84801 8.43081 7.89023 8.37315 8.68797 7.57039C9.08761 7.16824 9.40658 6.83119 9.39677 6.82139C9.37484 6.79948 8.79217 6.78304 8.67879 6.80112Z" fill="#8C8C8C"/>
</svg>

'''
'''--- assets/icons/groups.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M12.6364 15.0907V13.6361C12.6364 12.8646 12.3299 12.1247 11.7843 11.5791C11.2388 11.0335 10.4988 10.7271 9.72727 10.7271H3.90909C3.13755 10.7271 2.39761 11.0335 1.85205 11.5791C1.30649 12.1247 1 12.8646 1 13.6361V15.0907" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M6.81815 7.81818C8.4248 7.81818 9.72724 6.51574 9.72724 4.90909C9.72724 3.30244 8.4248 2 6.81815 2C5.2115 2 3.90906 3.30244 3.90906 4.90909C3.90906 6.51574 5.2115 7.81818 6.81815 7.81818Z" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M17.0001 15.0909V13.6363C16.9996 12.9918 16.785 12.3656 16.3901 11.8562C15.9952 11.3468 15.4423 10.9829 14.8182 10.8218" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M11.9091 2.09473C12.5348 2.25495 13.0894 2.61887 13.4855 3.12913C13.8816 3.6394 14.0966 4.26697 14.0966 4.91291C14.0966 5.55885 13.8816 6.18642 13.4855 6.69668C13.0894 7.20694 12.5348 7.57087 11.9091 7.73109" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/hamburger.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <line x1="4" y1="6" x2="20" y2="6" stroke="currentColor" stroke-width="2"/>
  <line x1="4" y1="12" x2="20" y2="12" stroke="currentColor" stroke-width="2"/>
  <line x1="4" y1="18" x2="20" y2="18" stroke="currentColor" stroke-width="2"/>
</svg>

'''
'''--- assets/icons/heart.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M7.5 4C4.4625 4 2 6.4625 2 9.5C2 15 8.5 20 12 21.163C15.5 20 22 15 22 9.5C22 6.4625 19.5375 4 16.5 4C14.64 4 12.995 4.9235 12 6.337C11.4928 5.6146 10.8191 5.02505 10.0358 4.61824C9.25245 4.21144 8.38265 3.99938 7.5 4Z" stroke="#8C8C8C" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/heartFilled.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="#000" xmlns="http://www.w3.org/2000/svg">
    <path d="M7.5 4C4.4625 4 2 6.4625 2 9.5C2 15 8.5 20 12 21.163C15.5 20 22 15 22 9.5C22 6.4625 19.5375 4 16.5 4C14.64 4 12.995 4.9235 12 6.337C11.4928 5.6146 10.8191 5.02505 10.0358 4.61824C9.25245 4.21144 8.38265 3.99938 7.5 4Z" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/icon-near.svg ---
<svg
  width="32"
  height="32"
  viewBox="0 0 32 32"
  fill="none"
  xmlns="http://www.w3.org/2000/svg"
>
  <circle cx="16" cy="16" r="16" fill="#201F1F" />
  <path
    d="M20.0056 10.25L17.2947 14.2222C17.2508 14.2795 17.2305 14.3512 17.2379 14.4227C17.2453 14.4942 17.2798 14.5603 17.3346 14.6077C17.3893 14.6551 17.4602 14.6803 17.533 14.6781C17.6058 14.676 17.6751 14.6468 17.7269 14.5963L20.3945 12.3207C20.4099 12.3068 20.4291 12.2976 20.4497 12.2944C20.4703 12.2911 20.4914 12.2939 20.5104 12.3024C20.5294 12.3108 20.5455 12.3246 20.5567 12.3421C20.5678 12.3595 20.5735 12.3798 20.5731 12.4004V19.5527C20.5729 19.5744 20.566 19.5955 20.5533 19.6133C20.5406 19.631 20.5227 19.6445 20.502 19.6519C20.4813 19.6593 20.4589 19.6603 20.4376 19.6548C20.4163 19.6493 20.3973 19.6375 20.383 19.621L12.3167 10.0921C12.1879 9.93911 12.0268 9.8158 11.8447 9.73079C11.6626 9.64579 11.4638 9.60115 11.2623 9.6H10.9814C10.6151 9.6 10.2637 9.7437 10.0047 9.99948C9.74563 10.2553 9.6001 10.6022 9.6001 10.9639V21.0361C9.6001 21.3978 9.74563 21.7447 10.0047 22.0005C10.2637 22.2563 10.6151 22.4 10.9814 22.4C11.2175 22.3999 11.4496 22.3402 11.6556 22.2264C11.8616 22.1126 12.0347 21.9486 12.1583 21.75L14.8691 17.7778C14.913 17.7204 14.9333 17.6488 14.9259 17.5773C14.9186 17.5058 14.884 17.4397 14.8293 17.3923C14.7745 17.3449 14.7036 17.3197 14.6308 17.3218C14.5581 17.324 14.4888 17.3532 14.437 17.4037L11.7693 19.6793C11.754 19.6932 11.7348 19.7024 11.7142 19.7056C11.6936 19.7089 11.6725 19.7061 11.6534 19.6976C11.6344 19.6891 11.6183 19.6753 11.6072 19.6579C11.596 19.6405 11.5903 19.6202 11.5907 19.5996V12.4544C11.591 12.4327 11.5979 12.4115 11.6106 12.3938C11.6233 12.3761 11.6412 12.3626 11.6618 12.3552C11.6825 12.3478 11.705 12.3468 11.7263 12.3523C11.7475 12.3578 11.7666 12.3696 11.7809 12.3861L19.8471 21.915C19.9769 22.0666 20.1386 22.1884 20.321 22.2719C20.5033 22.3554 20.7019 22.3987 20.903 22.3986H21.191C21.3724 22.3986 21.5521 22.3633 21.7197 22.2947C21.8873 22.2262 22.0395 22.1257 22.1678 21.9991C22.2961 21.8724 22.3978 21.7221 22.4672 21.5566C22.5367 21.3911 22.5724 21.2138 22.5724 21.0346V10.9639C22.5724 10.7841 22.5364 10.606 22.4664 10.44C22.3965 10.274 22.2939 10.1232 22.1648 9.99645C22.0356 9.86969 21.8823 9.7694 21.7137 9.70136C21.5451 9.63333 21.3645 9.59888 21.1824 9.6C20.9463 9.60003 20.7142 9.65979 20.5082 9.77357C20.3022 9.88735 20.1292 10.0514 20.0056 10.25Z"
    fill="white"
  />
</svg>

'''
'''--- assets/icons/illustration-flat-organization.colors.svg ---
<svg width="56" height="56" viewBox="0 0 56 56" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="20" r="8" fill="#E1FC31"/>
<path d="M17 20.5C17 23.2614 14.7614 25.5 12 25.5C9.23858 25.5 7 23.2614 7 20.5" stroke="#201F1F"/>
<circle cx="28" cy="28" r="8" fill="#E1FC31"/>
<path d="M33 28.5C33 31.2614 30.7614 33.5 28 33.5C25.2386 33.5 23 31.2614 23 28.5" stroke="#201F1F"/>
<circle cx="44" cy="20" r="8" fill="#E1FC31"/>
<path d="M49 20.5C49 23.2614 46.7614 25.5 44 25.5C41.2386 25.5 39 23.2614 39 20.5" stroke="#201F1F"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M36 44C36 39.5817 32.4183 36 28 36C23.5817 36 20 39.5817 20 44H36Z" fill="#201F1F"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M20 36C20 31.5817 16.4183 28 12 28C7.58172 28 4 31.5817 4 36H20Z" fill="#201F1F"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M52 36C52 31.5817 48.4183 28 44 28C39.5817 28 36 31.5817 36 36H52Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/illustration-groups-and-committtees.colors.svg ---
<svg width="56" height="56" viewBox="0 0 56 56" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="12" cy="20" r="8" fill="#FF8743"/>
  <path d="M17 20.5C17 23.2614 14.7614 25.5 12 25.5C9.23858 25.5 7 23.2614 7 20.5" stroke="#201F1F"/>
  <circle cx="28" cy="28" r="8" fill="#E1FC31"/>
  <path d="M33 28.5C33 31.2614 30.7614 33.5 28 33.5C25.2386 33.5 23 31.2614 23 28.5" stroke="#201F1F"/>
  <circle cx="44" cy="20" r="8" fill="#E8E0FF"/>
  <path d="M49 20.5C49 23.2614 46.7614 25.5 44 25.5C41.2386 25.5 39 23.2614 39 20.5" stroke="#201F1F"/>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M36 44C36 39.5817 32.4183 36 28 36C23.5817 36 20 39.5817 20 44H36Z"
        fill="#201F1F"/>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M20 36C20 31.5817 16.4183 28 12 28C7.58172 28 4 31.5817 4 36H20Z"
        fill="#201F1F"/>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M52 36C52 31.5817 48.4183 28 44 28C39.5817 28 36 31.5817 36 36H52Z"
        fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/illustration-members-only.svg ---
<svg width="56" height="56" viewBox="0 0 56 56" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M50.7759 28.6867C50.8921 29.4559 50.5835 30.3932 49.6142 31.4838C48.7976 32.4026 47.5799 33.3476 45.9999 34.2671V35.4167C49.8914 33.2638 52.1084 30.8137 51.7647 28.5375C51.0529 23.8225 39.6241 21.6386 26.2378 23.6596C12.8516 25.6806 2.57692 31.1412 3.28877 35.8562C4.00062 40.5711 15.4294 42.755 28.8157 40.734C29.8988 40.5705 30.9616 40.3844 31.9999 40.1781V39.1582C30.9159 39.377 29.8031 39.5736 28.6664 39.7452C22.0547 40.7434 15.9686 40.6952 11.487 39.8389C9.24147 39.4098 7.45479 38.7882 6.21325 38.0363C4.96525 37.2805 4.39368 36.476 4.27757 35.7069C4.16145 34.9378 4.47004 34.0004 5.43927 32.9098C6.4035 31.8249 7.92704 30.7036 9.94581 29.6307C13.9749 27.4894 19.7754 25.6466 26.3871 24.6484C32.9988 23.6502 39.0849 23.6984 43.5665 24.5548C45.812 24.9839 47.5987 25.6054 48.8403 26.3573C50.0883 27.1132 50.6598 27.9176 50.7759 28.6867Z" fill="#6038D0"/>
<path d="M17 20.8853L33.6828 14.9065V28.0213L17 34.0001V20.8853Z" fill="#201F1F"/>
<path d="M21.436 15.9788L38.1188 10V23.1148L21.436 29.0936V15.9788Z" fill="#201F1F"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M39 31C35.6863 31 33 33.6863 33 37V44H45V37C45 33.6863 42.3137 31 39 31ZM41.0199 36.0067C41.0199 36.6035 40.7589 37.1395 40.3447 37.5071C40.7589 37.8753 41.0199 38.4121 41.0199 39.01V41.4147H37V39.01C37 38.4121 37.261 37.8753 37.6753 37.5071C37.261 37.1395 37 36.6035 37 36.0067C37 34.8984 37.8999 34 39.01 34C40.12 34 41.0199 34.8984 41.0199 36.0067Z" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/illustration-open-organization.colors.svg ---
<svg width="56" height="56" viewBox="0 0 56 56" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="39" y="34" width="2" height="10" fill="#6038D0"/>
<rect x="45" y="38" width="2" height="10" transform="rotate(90 45 38)" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M50.7759 28.6867C50.8921 29.4559 50.5835 30.3932 49.6142 31.4838C48.7976 32.4026 47.5799 33.3476 45.9999 34.2671V35.4167C49.8914 33.2638 52.1084 30.8137 51.7647 28.5375C51.0529 23.8225 39.6241 21.6386 26.2378 23.6596C12.8516 25.6806 2.57692 31.1412 3.28877 35.8562C4.00062 40.5711 15.4294 42.755 28.8157 40.734C29.8988 40.5705 30.9616 40.3844 31.9999 40.1781V39.1582C30.9159 39.377 29.8031 39.5736 28.6664 39.7452C22.0547 40.7434 15.9686 40.6952 11.487 39.8389C9.24147 39.4098 7.45479 38.7882 6.21325 38.0363C4.96525 37.2805 4.39368 36.476 4.27757 35.7069C4.16145 34.9378 4.47004 34.0004 5.43927 32.9098C6.4035 31.8249 7.92704 30.7036 9.94581 29.6307C13.9749 27.4894 19.7754 25.6466 26.3871 24.6484C32.9988 23.6502 39.0849 23.6984 43.5665 24.5548C45.812 24.9839 47.5987 25.6054 48.8403 26.3573C50.0883 27.1132 50.6598 27.9176 50.7759 28.6867Z" fill="#E8E0FF"/>
<path d="M17 20.885L33.6828 14.9062V28.021L17 33.9998V20.885Z" fill="#201F1F"/>
<path d="M21.436 15.9788L38.1188 10V23.1148L21.436 29.0936V15.9788Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/illustration-token-weighted.colors.svg ---
<svg width="56" height="56" viewBox="0 0 56 56" fill="none" xmlns="http://www.w3.org/2000/svg">
<ellipse cx="19" cy="17" rx="8" ry="4" fill="#E1FC31"/>
<ellipse cx="19" cy="38" rx="8" ry="4" fill="#E1FC31"/>
<rect x="11" y="17" width="16" height="21" fill="#E1FC31"/>
<path d="M26 17C26 18.6569 22.866 20 19 20C15.134 20 12 18.6569 12 17" stroke="#201F1F"/>
<path d="M26 21C26 22.6569 22.866 24 19 24C15.134 24 12 22.6569 12 21" stroke="#201F1F"/>
<path d="M26 25C26 26.6569 22.866 28 19 28C15.134 28 12 26.6569 12 25" stroke="#201F1F"/>
<path d="M26 29C26 30.6569 22.866 32 19 32C15.134 32 12 30.6569 12 29" stroke="#201F1F"/>
<path d="M26 33C26 34.6569 22.866 36 19 36C15.134 36 12 34.6569 12 33" stroke="#201F1F"/>
<path d="M26 37C26 38.6569 22.866 40 19 40C15.134 40 12 38.6569 12 37" stroke="#201F1F"/>
<circle cx="37.3562" cy="24.3562" r="8" transform="rotate(-2.61158 37.3562 24.3562)" fill="#FFF3EC"/>
<path d="M33.887 27.3173L40.4781 27.0167L42.0596 22.1396L35.2943 22.4481C35.1598 22.4543 33.887 27.3173 33.887 27.3173Z" fill="#401700"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M39.2502 27.0722L38.7056 28.946C38.5719 29.4061 38.0134 29.5823 37.6399 29.2822C37.0782 28.8308 36.7367 28.1605 36.7017 27.4408L36.6895 27.189L32.6879 27.3715C32.6879 27.3715 34.1532 22.4997 34.0952 22.5023L40.8605 22.1937L39.279 27.0709L39.2502 27.0722Z" fill="#FF8743"/>
<circle cx="31.3562" cy="37.3562" r="8" transform="rotate(-2.61158 31.3562 37.3562)" fill="#CFF9EA"/>
<path d="M35.2746 35.4781L28.6835 35.7787L27.102 40.6559L33.8673 40.3473C34.0018 40.3411 35.2746 35.4781 35.2746 35.4781Z" fill="#0C422A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M29.9423 35.7213L30.576 33.5408C30.7097 33.0807 31.2682 32.9045 31.6417 33.2046C32.2034 33.656 32.5449 34.3263 32.5798 35.0461L32.6067 35.5998L36.4738 35.4234C36.4738 35.4234 35.0085 40.2952 35.0665 40.2926L28.3013 40.6012L29.8828 35.724L29.9423 35.7213Z" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/illustration-vote-per-member.colors.svg ---
<svg width="56" height="56" viewBox="0 0 56 56" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="19" cy="21" r="8" fill="#E1FC31"/>
<path d="M24 21.5C24 24.2614 21.7614 26.5 19 26.5C16.2386 26.5 14 24.2614 14 21.5" stroke="#201F1F"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M27 37C27 32.5817 23.4183 29 19 29C14.5817 29 11 32.5817 11 37H27Z" fill="#251455"/>
<circle cx="37.3562" cy="24.3562" r="8" transform="rotate(-2.61158 37.3562 24.3562)" fill="#FFF3EC"/>
<path d="M33.887 27.3173L40.4781 27.0167L42.0596 22.1396L35.2943 22.4481C35.1598 22.4543 33.887 27.3173 33.887 27.3173Z" fill="#401700"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M39.2502 27.0722L38.7056 28.946C38.5719 29.4061 38.0134 29.5823 37.6399 29.2822C37.0782 28.8308 36.7367 28.1605 36.7017 27.4408L36.6895 27.189L32.6879 27.3715C32.6879 27.3715 34.1532 22.4997 34.0952 22.5023L40.8605 22.1937L39.279 27.0709L39.2502 27.0722Z" fill="#FF8743"/>
<circle cx="31.3562" cy="37.3562" r="8" transform="rotate(-2.61158 31.3562 37.3562)" fill="#CFF9EA"/>
<path d="M35.2746 35.4781L28.6835 35.7787L27.102 40.6559L33.8673 40.3473C34.0018 40.3411 35.2746 35.4781 35.2746 35.4781Z" fill="#0C422A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M29.9423 35.7213L30.576 33.5408C30.7097 33.0807 31.2682 32.9045 31.6417 33.2046C32.2034 33.656 32.5449 34.3263 32.5798 35.0461L32.6067 35.5998L36.4738 35.4234C36.4738 35.4234 35.0085 40.2952 35.0665 40.2926L28.3013 40.6012L29.8828 35.724L29.9423 35.7213Z" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/image-not-found.svg ---
<svg width="58" height="58" viewBox="0 0 58 58" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.25 9.25C6.25 7.59314 7.59315 6.25 9.25 6.25H48.75C50.4069 6.25 51.75 7.59315 51.75 9.25V48.75C51.75 50.4069 50.4069 51.75 48.75 51.75H9.25C7.59314 51.75 6.25 50.4069 6.25 48.75V9.25ZM9.25 8.25C8.69771 8.25 8.25 8.69772 8.25 9.25V48.75C8.25 49.3023 8.69772 49.75 9.25 49.75H48.75C49.3023 49.75 49.75 49.3023 49.75 48.75V9.25C49.75 8.69771 49.3023 8.25 48.75 8.25H9.25Z" fill="#DBDBFF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M15.917 20.5417C15.917 17.9874 17.9877 15.9167 20.542 15.9167C23.0963 15.9167 25.167 17.9874 25.167 20.5417C25.167 23.0961 23.0963 25.1667 20.542 25.1667C17.9877 25.1667 15.917 23.0961 15.917 20.5417ZM20.542 17.9167C19.0922 17.9167 17.917 19.092 17.917 20.5417C17.917 21.9915 19.0922 23.1667 20.542 23.1667C21.9917 23.1667 23.167 21.9915 23.167 20.5417C23.167 19.092 21.9917 17.9167 20.542 17.9167Z" fill="#DBDBFF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M37.9592 23.4596C38.3498 23.0691 38.9829 23.0691 39.3734 23.4596L51.4568 35.543C51.8473 35.9335 51.8473 36.5667 51.4568 36.9572C51.0663 37.3477 50.4331 37.3477 50.0426 36.9572L38.6663 25.581L12.7901 51.4572C12.3996 51.8477 11.7664 51.8477 11.3759 51.4572C10.9854 51.0667 10.9854 50.4335 11.3759 50.043L37.9592 23.4596Z" fill="#DBDBFF"/>
</svg>

'''
'''--- assets/icons/info.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="8" cy="8" r="7.25" stroke="#0C5C6E" stroke-width="1.5"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M8.00977 12.5C7.45748 12.5 7.00977 12.0523 7.00977 11.5L7.00977 7.5C7.00977 6.94772 7.45748 6.5 8.00977 6.5C8.56205 6.5 9.00977 6.94772 9.00977 7.5L9.00977 11.5C9.00977 12.0523 8.56205 12.5 8.00977 12.5Z" fill="#0C5C6E"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M9.00977 4.5C9.00977 5.05228 8.56205 5.5 8.00977 5.5L7.99977 5.5C7.44748 5.5 6.99977 5.05228 6.99977 4.5C6.99977 3.94772 7.44748 3.5 7.99977 3.5L8.00977 3.5C8.56205 3.5 9.00977 3.94772 9.00977 4.5Z" fill="#0C5C6E"/>
</svg>

'''
'''--- assets/icons/kebab-vertical.svg ---
<svg width="16px" height="16px" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor"><path fill-rule="evenodd" clip-rule="evenodd" d="M7.444 13.832a1 1 0 1 0 1.111-1.663 1 1 0 0 0-1.11 1.662zM8 9a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm0-5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/></svg>
'''
'''--- assets/icons/like-filled.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M20.7633 12.509C21.157 11.9887 21.375 11.3512 21.375 10.6879C21.375 9.63556 20.7867 8.63947 19.8398 8.084C19.5961 7.94102 19.3185 7.86577 19.0359 7.86603H13.4156L13.5563 4.98556C13.5891 4.28947 13.343 3.62853 12.8648 3.12463C12.6302 2.87626 12.3471 2.67864 12.0331 2.544C11.7191 2.40936 11.3807 2.34054 11.0391 2.34181C9.82031 2.34181 8.74219 3.16213 8.41875 4.33635L6.40547 11.6254H6.39844V21.6567H17.468C17.6836 21.6567 17.8945 21.6145 18.0891 21.5301C19.2047 21.0543 19.9242 19.9645 19.9242 18.7551C19.9242 18.4598 19.882 18.1692 19.7977 17.8879C20.1914 17.3676 20.4094 16.7301 20.4094 16.0668C20.4094 15.7715 20.3672 15.4809 20.2828 15.1996C20.6766 14.6793 20.8945 14.0418 20.8945 13.3785C20.8898 13.0832 20.8477 12.7903 20.7633 12.509V12.509ZM2.625 12.3754V20.9067C2.625 21.3215 2.96016 21.6567 3.375 21.6567H4.89844V11.6254H3.375C2.96016 11.6254 2.625 11.9606 2.625 12.3754Z" fill="currentColor"/>
</svg>

'''
'''--- assets/icons/like.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M20.7633 12.5085C21.157 11.9882 21.375 11.3507 21.375 10.6874C21.375 9.63508 20.7867 8.63898 19.8398 8.08351C19.5961 7.94053 19.3185 7.86528 19.0359 7.86555H13.4156L13.5563 4.98508C13.5891 4.28898 13.343 3.62804 12.8648 3.12414C12.6302 2.87577 12.3471 2.67815 12.0331 2.54351C11.7191 2.40887 11.3807 2.34005 11.0391 2.34133C9.82031 2.34133 8.74219 3.16164 8.41875 4.33586L6.40547 11.6249H3.375C2.96016 11.6249 2.625 11.9601 2.625 12.3749V20.9062C2.625 21.321 2.96016 21.6562 3.375 21.6562H17.468C17.6836 21.6562 17.8945 21.614 18.0891 21.5296C19.2047 21.0538 19.9242 19.964 19.9242 18.7546C19.9242 18.4593 19.882 18.1687 19.7977 17.8874C20.1914 17.3671 20.4094 16.7296 20.4094 16.0663C20.4094 15.771 20.3672 15.4804 20.2828 15.1991C20.6766 14.6788 20.8945 14.0413 20.8945 13.378C20.8898 13.0827 20.8477 12.7898 20.7633 12.5085ZM4.3125 19.9687V13.3124H6.21094V19.9687H4.3125ZM19.2281 11.6952L18.7148 12.1405L19.0406 12.7359C19.148 12.932 19.2036 13.1522 19.2023 13.3757C19.2023 13.7624 19.0336 14.1304 18.743 14.3835L18.2297 14.8288L18.5555 15.4241C18.6628 15.6202 18.7185 15.8404 18.7172 16.064C18.7172 16.4507 18.5484 16.8187 18.2578 17.0718L17.7445 17.5171L18.0703 18.1124C18.1776 18.3085 18.2333 18.5287 18.232 18.7523C18.232 19.2773 17.9227 19.7507 17.4445 19.9663H7.71094V13.2374L10.043 4.7882C10.1031 4.57164 10.2322 4.38058 10.4107 4.24397C10.5891 4.10737 10.8073 4.03266 11.032 4.03117C11.2102 4.03117 11.3859 4.08273 11.5266 4.1882C11.7586 4.36164 11.8828 4.62414 11.8687 4.90304L11.6437 9.55305H19.0125C19.4297 9.80851 19.6875 10.2398 19.6875 10.6874C19.6875 11.0741 19.5188 11.4398 19.2281 11.6952Z" fill="currentColor"/>
</svg>

'''
'''--- assets/icons/list-filter.svg ---
<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10 18H14V16H10V18ZM3 6V8H21V6H3ZM6 13H18V11H6V13Z" fill="currentColor"/>
</svg>

'''
'''--- assets/icons/list.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M6.24999 8.46875V11.2812C6.24999 11.7472 5.87223 12.125 5.40624 12.125H1.84375C1.37775 12.125 1 11.7472 1 11.2812V8.46875C1 8.00275 1.37775 7.625 1.84375 7.625H5.40624C5.87223 7.625 6.24999 8.00275 6.24999 8.46875ZM1 14.0938V16.9062C1 17.3722 1.37775 17.75 1.84375 17.75H5.40624C5.87223 17.75 6.24999 17.3722 6.24999 16.9062V14.0938C6.24999 13.6278 5.87223 13.25 5.40624 13.25H1.84375C1.37775 13.25 1 13.6278 1 14.0938ZM5.40624 2H1.84375C1.37775 2 1 2.37775 1 2.84375V5.65625C1 6.12225 1.37775 6.5 1.84375 6.5H5.40624C5.87223 6.5 6.24999 6.12225 6.24999 5.65625V2.84375C6.24999 2.37775 5.87223 2 5.40624 2ZM8.21874 17.75H18.1562C18.6222 17.75 19 17.3722 19 16.9062V14.0938C19 13.6278 18.6222 13.25 18.1562 13.25H8.21874C7.75274 13.25 7.37499 13.6278 7.37499 14.0938V16.9062C7.37499 17.3722 7.75274 17.75 8.21874 17.75ZM7.37499 2.84375V5.65625C7.37499 6.12225 7.75274 6.5 8.21874 6.5H18.1562C18.6222 6.5 19 6.12225 19 5.65625V2.84375C19 2.37775 18.6222 2 18.1562 2H8.21874C7.75274 2 7.37499 2.37775 7.37499 2.84375ZM8.21874 12.125H18.1562C18.6222 12.125 19 11.7472 19 11.2812V8.46875C19 8.00275 18.6222 7.625 18.1562 7.625H8.21874C7.75274 7.625 7.37499 8.00275 7.37499 8.46875V11.2812C7.37499 11.7472 7.75274 12.125 8.21874 12.125Z" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/loading.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M10 1.66602V4.99935" stroke="#595959" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M10 15V18.3333" stroke="#595959" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M4.10742 4.10742L6.46575 6.46575" stroke="#595959" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M13.5332 13.5332L15.8915 15.8915" stroke="#595959" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M1.66602 10H4.99935" stroke="#595959" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M15 10H18.3333" stroke="#595959" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M4.10742 15.8915L6.46575 13.5332" stroke="#595959" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M13.5332 6.46575L15.8915 4.10742" stroke="#595959" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/logo-near-full.svg ---
<svg width="135" height="36" viewBox="0 0 135 36" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M67.394 8.23324V28.5935C67.3929 28.6704 67.3616 28.7438 67.3065 28.7981C67.2515 28.8524 67.1772 28.8834 67.0994 28.8844H64.9548C64.4626 28.8848 63.9781 28.7632 63.5458 28.5308C63.1135 28.2984 62.7472 27.9626 62.4803 27.5542L52.7474 12.7009L53.0812 20.1198V28.5935C53.0802 28.6704 53.0489 28.7438 52.9938 28.7981C52.9388 28.8524 52.8645 28.8834 52.7867 28.8844H49.9508C49.873 28.8834 49.7987 28.8524 49.7437 28.7981C49.6886 28.7438 49.6573 28.6704 49.6562 28.5935V8.23324C49.6573 8.15642 49.6886 8.08302 49.7437 8.02868C49.7987 7.97435 49.873 7.94339 49.9508 7.94238H52.0836C52.5753 7.94264 53.0591 8.06408 53.4912 8.29569C53.9233 8.5273 54.29 8.86175 54.5581 9.26871L64.291 24.0988L63.9886 16.707V8.23324C63.9886 8.1561 64.0196 8.08212 64.0749 8.02757C64.1301 7.97303 64.205 7.94238 64.2832 7.94238H67.119C67.1933 7.94819 67.2628 7.98127 67.3137 8.0351C67.3646 8.08893 67.3932 8.15961 67.394 8.23324Z" fill="currentColor"/>
<path d="M96.3727 28.8837H93.3719C93.325 28.8833 93.2789 28.8718 93.2374 28.8502C93.1959 28.8286 93.1602 28.7976 93.1333 28.7597C93.1064 28.7217 93.0891 28.678 93.0828 28.6321C93.0764 28.5862 93.0813 28.5395 93.0969 28.4959L101.047 8.2209C101.081 8.13601 101.14 8.0636 101.218 8.0136C101.295 7.96361 101.386 7.93848 101.479 7.94168H105.238C105.327 7.94244 105.413 7.96941 105.487 8.01915C105.56 8.06889 105.617 8.13914 105.65 8.2209L113.576 28.4959C113.592 28.5395 113.597 28.5862 113.59 28.6321C113.584 28.678 113.567 28.7217 113.54 28.7597C113.513 28.7976 113.477 28.8286 113.436 28.8502C113.394 28.8718 113.348 28.8833 113.301 28.8837H110.3C110.24 28.884 110.182 28.8664 110.132 28.8331C110.082 28.7999 110.044 28.7527 110.022 28.6976L103.615 12.0215C103.595 11.9653 103.557 11.9168 103.508 11.8825C103.458 11.8483 103.399 11.8299 103.339 11.8299C103.278 11.8299 103.219 11.8483 103.169 11.8825C103.12 11.9168 103.082 11.9653 103.062 12.0215L96.6555 28.6976C96.6331 28.7533 96.5941 28.801 96.5435 28.8342C96.493 28.8675 96.4334 28.8848 96.3727 28.8837Z" fill="currentColor"/>
<path d="M134.404 28.4152L128.442 20.8954C131.808 20.2672 133.776 18.0256 133.776 14.5857C133.776 10.6338 131.172 7.94238 126.565 7.94238H118.249C118.133 7.94238 118.021 7.98815 117.938 8.0696C117.856 8.15106 117.81 8.26154 117.81 8.37674C117.81 8.74342 117.883 9.10652 118.025 9.44529C118.167 9.78407 118.375 10.0919 118.638 10.3512C118.9 10.6105 119.212 10.8161 119.555 10.9565C119.898 11.0968 120.266 11.169 120.638 11.169H126.219C129.004 11.169 130.339 12.5768 130.339 14.6089C130.339 16.6411 129.035 18.0993 126.219 18.0993H118.249C118.132 18.1003 118.021 18.1469 117.938 18.229C117.856 18.3111 117.81 18.4219 117.81 18.5375V28.6207C117.81 28.6978 117.841 28.7718 117.896 28.8264C117.951 28.8809 118.026 28.9116 118.104 28.9116H120.94C121.018 28.9106 121.092 28.8796 121.147 28.8253C121.202 28.7709 121.234 28.6975 121.235 28.6207V21.0777H124.506L129.679 27.7442C129.956 28.101 130.313 28.3895 130.722 28.5874C131.131 28.7852 131.581 28.8868 132.036 28.8844H134.188C134.242 28.8815 134.294 28.8641 134.338 28.8341C134.383 28.8041 134.418 28.7627 134.44 28.7144C134.462 28.666 134.471 28.6126 134.465 28.5598C134.458 28.5071 134.437 28.457 134.404 28.4152Z" fill="currentColor"/>
<path d="M87.4023 7.94238H74.2443C74.1402 7.94238 74.0403 7.98324 73.9666 8.05597C73.8929 8.1287 73.8516 8.22734 73.8516 8.3302C73.8516 9.08413 74.1549 9.80717 74.6948 10.3403C75.2347 10.8734 75.967 11.1729 76.7306 11.1729H87.4023C87.4411 11.1734 87.4797 11.1662 87.5157 11.1518C87.5516 11.1374 87.5843 11.116 87.6118 11.0889C87.6393 11.0617 87.6609 11.0295 87.6755 10.9939C87.6902 10.9584 87.6974 10.9204 87.6969 10.882V8.23324C87.6969 8.1561 87.6658 8.08212 87.6106 8.02757C87.5554 7.97303 87.4804 7.94238 87.4023 7.94238ZM87.4023 25.6539H77.5829C77.5051 25.6529 77.4308 25.6219 77.3758 25.5676C77.3207 25.5133 77.2894 25.4399 77.2883 25.3631V20.112C77.2883 20.0349 77.3194 19.9609 77.3746 19.9064C77.4299 19.8518 77.5048 19.8212 77.5829 19.8212H86.66C86.7381 19.8212 86.813 19.7905 86.8683 19.736C86.9235 19.6814 86.9545 19.6074 86.9545 19.5303V16.8621C86.9545 16.785 86.9235 16.711 86.8683 16.6565C86.813 16.6019 86.7381 16.5713 86.66 16.5713H74.2915C74.1744 16.5723 74.0626 16.6189 73.9802 16.701C73.8978 16.7831 73.8516 16.8939 73.8516 17.0095V28.4345C73.8516 28.5497 73.8979 28.6602 73.9804 28.7417C74.0629 28.8231 74.1748 28.8689 74.2915 28.8689H87.4023C87.4804 28.8689 87.5554 28.8383 87.6106 28.7837C87.6658 28.7292 87.6969 28.6552 87.6969 28.578V25.9293C87.6938 25.8545 87.6613 25.7839 87.6063 25.7325C87.5513 25.681 87.4781 25.6528 87.4023 25.6539Z" fill="currentColor"/>
<path d="M28.5147 2.73381L21.1227 13.5655C21.0029 13.7218 20.9475 13.9172 20.9676 14.1122C20.9878 14.3072 21.082 14.4875 21.2313 14.6167C21.3806 14.7459 21.5739 14.8145 21.7724 14.8087C21.9708 14.8029 22.1597 14.7232 22.301 14.5855L29.5752 8.38041C29.6171 8.34243 29.6694 8.31745 29.7256 8.30855C29.7818 8.29966 29.8394 8.30725 29.8912 8.33037C29.9431 8.3535 29.9869 8.39114 30.0173 8.43864C30.0477 8.48614 30.0633 8.54141 30.0622 8.59758V28.1008C30.0616 28.16 30.0427 28.2177 30.0081 28.266C29.9734 28.3143 29.9247 28.3511 29.8683 28.3713C29.8119 28.3915 29.7507 28.3943 29.6927 28.3792C29.6347 28.3642 29.5827 28.332 29.5437 28.287L7.54836 2.30334C7.19722 1.8862 6.75791 1.54994 6.26125 1.31814C5.76459 1.08634 5.22259 0.964619 4.67325 0.961499H3.90733C2.90834 0.961499 1.95026 1.35334 1.24387 2.05081C0.537473 2.74829 0.140625 3.69427 0.140625 4.68065V32.1457C0.140625 33.1321 0.537473 34.0781 1.24387 34.7756C1.95026 35.473 2.90834 35.8649 3.90733 35.8649C4.55102 35.8648 5.18395 35.7019 5.74572 35.3916C6.30749 35.0813 6.77936 34.6341 7.1163 34.0926L14.5083 23.2609C14.6281 23.1045 14.6835 22.9092 14.6633 22.7142C14.6432 22.5192 14.549 22.3389 14.3997 22.2097C14.2504 22.0805 14.0571 22.0119 13.8586 22.0176C13.6602 22.0234 13.4713 22.1032 13.33 22.2409L6.05581 28.446C6.01387 28.484 5.96157 28.5089 5.90538 28.5178C5.84919 28.5267 5.7916 28.5191 5.73974 28.496C5.68788 28.4729 5.64403 28.4352 5.61364 28.3877C5.58325 28.3402 5.56765 28.285 5.56877 28.2288V8.74495C5.56936 8.68574 5.58825 8.62812 5.62289 8.57978C5.65754 8.53145 5.70631 8.49471 5.76267 8.47447C5.81903 8.45424 5.8803 8.45147 5.9383 8.46654C5.9963 8.48161 6.04826 8.5138 6.08723 8.5588L28.0826 34.5424C28.4364 34.9558 28.8774 35.288 29.3746 35.5157C29.8719 35.7435 30.4135 35.8613 30.9617 35.861H31.7472C32.2419 35.861 32.7317 35.7648 33.1887 35.5779C33.6457 35.391 34.0609 35.1171 34.4107 34.7717C34.7604 34.4263 35.0379 34.0163 35.2272 33.5651C35.4165 33.1139 35.5139 32.6303 35.5139 32.1419V4.68065C35.5139 4.19028 35.4157 3.70475 35.225 3.252C35.0342 2.79925 34.7546 2.38821 34.4024 2.04255C34.0501 1.69689 33.6321 1.42343 33.1723 1.2379C32.7126 1.05237 32.2203 0.958431 31.7236 0.961499C31.08 0.961575 30.447 1.12452 29.8853 1.43479C29.3235 1.74505 28.8516 2.19229 28.5147 2.73381Z" fill="currentColor"/>
</svg>

'''
'''--- assets/icons/logo-near.svg ---
<svg viewBox="0 0 43 10" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M8.88889 0.138889V9.86111C8.88838 9.8978 8.87266 9.93285 8.84509 9.95879C8.81751 9.98473 8.78026 9.99952 8.74127 10H7.66657C7.4199 10.0002 7.17712 9.94213 6.96047 9.83115C6.74383 9.72018 6.56024 9.55984 6.42653 9.36481L1.54906 2.27222L1.71637 5.81482V9.86111C1.71586 9.8978 1.70014 9.93285 1.67257 9.95879C1.64499 9.98473 1.60774 9.99952 1.56874 10H0.147623C0.10863 9.99952 0.0713766 9.98473 0.0438016 9.95879C0.0162266 9.93285 0.000509785 9.8978 0 9.86111V0.138889C0.000509785 0.102202 0.0162266 0.0671535 0.0438016 0.04121C0.0713766 0.0152666 0.10863 0.000479623 0.147623 0H1.21641C1.4628 0.000123286 1.70527 0.0581124 1.92181 0.168708C2.13835 0.279303 2.32212 0.439006 2.45645 0.633333L7.33392 7.71482L7.18236 4.18518V0.138889C7.18236 0.102053 7.19792 0.0667262 7.2256 0.0406795C7.25329 0.0146328 7.29083 0 7.32999 0H8.75111C8.78836 0.00277407 8.82316 0.0185679 8.84867 0.0442724C8.87416 0.0699768 8.88851 0.10373 8.88889 0.138889Z"
    fill="currentColor"/>
  <path
    d="M22.7162 9.99998H21.2533C21.2305 9.99977 21.208 9.99428 21.1878 9.98398C21.1675 9.97368 21.1502 9.95886 21.137 9.94074C21.1239 9.92263 21.1155 9.90175 21.1124 9.87985C21.1093 9.85794 21.1117 9.83564 21.1193 9.8148L24.9948 0.133461C25.0114 0.0929254 25.0405 0.0583471 25.0782 0.0344739C25.1159 0.0106008 25.1604 -0.00139668 25.2054 0.000129468H27.0378C27.0813 0.000491539 27.1236 0.0133719 27.1594 0.037123C27.1952 0.0608741 27.2229 0.0944166 27.2389 0.133461L31.1029 9.8148C31.1105 9.83564 31.1129 9.85794 31.1098 9.87985C31.1067 9.90175 31.0982 9.92263 31.0851 9.94074C31.072 9.95886 31.0546 9.97368 31.0344 9.98398C31.0142 9.99428 30.9917 9.99977 30.9688 9.99998H29.506C29.4767 10.0001 29.448 9.99169 29.4238 9.97583C29.3995 9.95998 29.3808 9.93741 29.37 9.91109L26.247 1.94825C26.237 1.92144 26.2186 1.89827 26.1945 1.8819C26.1703 1.86553 26.1415 1.85675 26.112 1.85675C26.0825 1.85675 26.0538 1.86553 26.0296 1.8819C26.0055 1.89827 25.9871 1.92144 25.9771 1.94825L22.8541 9.91109C22.8432 9.93771 22.8241 9.96048 22.7995 9.97636C22.7749 9.99224 22.7458 10.0005 22.7162 9.99998Z"
    fill="currentColor"/>
  <path
    d="M42.189 9.76327L39.0073 6.17718C40.8036 5.87757 41.8537 4.80858 41.8537 3.16812C41.8537 1.28352 40.464 0 38.0054 0H33.5681C33.5059 0 33.4462 0.0218236 33.4021 0.0606697C33.3581 0.0995158 33.3334 0.152202 33.3334 0.207139C33.3334 0.382008 33.3724 0.555165 33.4482 0.716723C33.5241 0.878281 33.6353 1.02508 33.7754 1.14873C33.9155 1.27238 34.0819 1.37046 34.265 1.43738C34.4481 1.5043 34.6443 1.53875 34.8425 1.53875H37.8209C39.307 1.53875 40.0197 2.2101 40.0197 3.17921C40.0197 4.14833 39.3238 4.84372 37.8209 4.84372H33.5681C33.5057 4.84421 33.446 4.86644 33.402 4.90558C33.358 4.94472 33.3334 4.9976 33.3334 5.05271V9.86129C33.3334 9.89808 33.3499 9.93336 33.3794 9.95937C33.4089 9.98539 33.4489 10 33.4906 10H35.0039C35.0454 9.99952 35.0851 9.98475 35.1145 9.95884C35.1438 9.93293 35.1606 9.89793 35.1611 9.86129V6.2641H36.9071L39.6675 9.44331C39.8154 9.61344 40.0058 9.75106 40.224 9.84539C40.4422 9.93972 40.6822 9.98821 40.9251 9.98705H42.0738C42.1024 9.98565 42.1301 9.97736 42.1538 9.96306C42.1775 9.94876 42.1963 9.92901 42.2082 9.90596C42.2201 9.8829 42.2245 9.85741 42.2212 9.83226C42.2178 9.8071 42.2067 9.78325 42.189 9.76327Z"
    fill="currentColor"/>
  <path
    d="M18.747 0H12.4113C12.3611 0 12.313 0.0195248 12.2776 0.0542796C12.2421 0.0890343 12.2222 0.136172 12.2222 0.185322C12.2222 0.545596 12.3682 0.891114 12.6282 1.14587C12.8882 1.40062 13.2408 1.54374 13.6085 1.54374H18.747C18.7657 1.54399 18.7842 1.54056 18.8016 1.53366C18.8189 1.52677 18.8346 1.51654 18.8478 1.50358C18.8611 1.49063 18.8715 1.4752 18.8785 1.45823C18.8856 1.44125 18.8891 1.42307 18.8888 1.40474V0.138992C18.8888 0.102129 18.8739 0.0667757 18.8473 0.0407097C18.8207 0.0146436 18.7846 0 18.747 0ZM18.747 8.46368H14.0189C13.9814 8.4632 13.9456 8.4484 13.9191 8.42244C13.8926 8.39647 13.8775 8.3614 13.877 8.32469V5.81542C13.877 5.77856 13.892 5.7432 13.9186 5.71714C13.9452 5.69107 13.9812 5.67643 14.0189 5.67643H18.3895C18.4271 5.67643 18.4632 5.66178 18.4898 5.63572C18.5164 5.60965 18.5314 5.5743 18.5314 5.53743V4.26242C18.5314 4.22555 18.5164 4.1902 18.4898 4.16413C18.4632 4.13807 18.4271 4.12343 18.3895 4.12343H12.434C12.3776 4.12391 12.3238 4.14619 12.2841 4.18541C12.2444 4.22463 12.2222 4.27762 12.2222 4.33284V9.79244C12.2222 9.84749 12.2445 9.90028 12.2842 9.93921C12.3239 9.97813 12.3778 10 12.434 10H18.747C18.7846 10 18.8207 9.98536 18.8473 9.95929C18.8739 9.93322 18.8888 9.89787 18.8888 9.86101V8.59525C18.8873 8.55953 18.8717 8.52579 18.8452 8.50121C18.8187 8.47663 18.7835 8.46316 18.747 8.46368Z"
    fill="currentColor"/>
</svg>

'''
'''--- assets/icons/logoUsn.svg ---
<svg width="300" height="301" viewBox="0 0 300 301" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="150" cy="150.5" r="150" fill="black"/>
<path d="M91.5841 216.837V191.094H65.3465C62.6124 191.094 60.396 188.878 60.396 186.144V169.312C60.396 166.578 62.6124 164.361 65.3465 164.361H91.5841V148.52H65.3465C62.6124 148.52 60.396 146.303 60.396 143.569V125.748C60.396 123.013 62.6124 120.797 65.3465 120.797H91.5841V98.63C91.5841 88.1796 100.056 79.7079 110.506 79.7079C116.647 79.7079 122.405 82.6876 125.952 87.7002L173.005 154.196C175.235 157.348 180.198 155.77 180.198 151.908V87.6287C180.198 84.8946 182.414 82.6782 185.148 82.6782H202.475C205.209 82.6782 207.426 84.8946 207.426 87.6287V120.797H235.148C237.883 120.797 240.099 123.013 240.099 125.748V143.569C240.099 146.303 237.883 148.52 235.148 148.52H207.426V164.361H235.148C237.883 164.361 240.099 166.578 240.099 169.312V188.124C240.099 190.858 237.883 193.074 235.148 193.074H207.426V205.933C207.426 214.689 200.328 221.787 191.572 221.787C186.592 221.787 181.902 219.447 178.906 215.469L127.421 147.091C125.134 144.053 120.297 145.671 120.297 149.473V216.837C120.297 219.571 118.081 221.787 115.346 221.787H96.5346C93.8005 221.787 91.5841 219.571 91.5841 216.837Z" fill="white"/>
</svg>

'''
'''--- assets/icons/logout.svg ---
<svg width="38" height="38" viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="19" cy="19" r="18.5" fill="white" stroke="#FF8743"/>
  <path d="M23.5 19C23.5 19.1989 23.421 19.3897 23.2803 19.5303C23.1397 19.671 22.9489 19.75 22.75 19.75L16 19.75L16 24.625C16 26.125 17.5839 27.25 19 27.25L26.125 27.25C26.821 27.2493 27.4882 26.9725 27.9803 26.4803C28.4725 25.9882 28.7493 25.321 28.75 24.625L28.75 13.375C28.7493 12.679 28.4725 12.0118 27.9803 11.5197C27.4882 11.0275 26.821 10.7507 26.125 10.75L18.625 10.75C17.929 10.7507 17.2618 11.0275 16.7697 11.5197C16.2775 12.0118 16.0007 12.679 16 13.375L16 18.25L22.75 18.25C22.9489 18.25 23.1397 18.329 23.2803 18.4697C23.421 18.6103 23.5 18.8011 23.5 19ZM9.46985 19.5302L13.2198 23.2802C13.3616 23.4149 13.5505 23.4889 13.746 23.4864C13.9416 23.4839 14.1285 23.4051 14.2668 23.2668C14.4051 23.1285 14.4839 22.9416 14.4864 22.746C14.4889 22.5505 14.4149 22.3616 14.2802 22.2198L11.8108 19.75L16 19.75L16 18.25L11.8108 18.25L14.2802 15.7802C14.3527 15.7112 14.4108 15.6284 14.4508 15.5367C14.4909 15.445 14.5122 15.3461 14.5135 15.246C14.5148 15.1459 14.496 15.0466 14.4583 14.9539C14.4206 14.8611 14.3647 14.7769 14.2939 14.7061C14.2231 14.6353 14.1389 14.5794 14.0462 14.5417C13.9534 14.504 13.8541 14.4852 13.754 14.4865C13.6539 14.4878 13.555 14.5091 13.4633 14.5492C13.3716 14.5892 13.2888 14.6473 13.2198 14.7198L9.46985 18.4698C9.3293 18.6105 9.25035 18.8012 9.25035 19C9.25035 19.1988 9.3293 19.3895 9.46985 19.5302Z" fill="#FF8743"/>
</svg>

'''
'''--- assets/icons/minus.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <line x1="18" y1="12" x2="6" y2="12" stroke="#434343" stroke-width="2"/>
</svg>

'''
'''--- assets/icons/multiselect.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M13.3333 1.33337H5.33333C4.97971 1.33337 4.64057 1.47385 4.39052 1.7239C4.14048 1.97395 4 2.31309 4 2.66671V10.6667C4 11.0203 4.14048 11.3595 4.39052 11.6095C4.64057 11.8596 4.97971 12 5.33333 12H13.3333C13.687 12 14.0261 11.8596 14.2761 11.6095C14.5262 11.3595 14.6667 11.0203 14.6667 10.6667V2.66671C14.6667 2.31309 14.5262 1.97395 14.2761 1.7239C14.0261 1.47385 13.687 1.33337 13.3333 1.33337ZM8.71133 9.65404L6.52867 7.47137L7.47133 6.52871L8.622 7.67937L11.488 4.24004L12.5127 5.09404L8.71133 9.65404Z" fill="#595959"/>
    <path d="M2.66665 14.6666H9.99998V13.3333H2.66665V5.33325H1.33331V13.3333C1.33331 14.0686 1.93131 14.6666 2.66665 14.6666Z" fill="#595959"/>
</svg>

'''
'''--- assets/icons/myDaos.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M18.413 4.02338C18.7351 3.92208 19.063 4.16266 19.063 4.50035V11.3265C19.063 9.39156 17.4898 7.82299 15.5492 7.82299C13.6086 7.82299 12.0354 9.39156 12.0354 11.3265C12.0354 13.2614 13.6086 14.83 15.5492 14.83H12.7884C12.0562 14.83 11.354 15.1815 10.8362 15.8073C10.4277 16.301 10.1604 16.9336 10.0658 17.6132L3.64998 19.6306C3.32784 19.7319 3 19.4913 3 19.1536V11.4506C3 11.2322 3.14171 11.0391 3.35002 10.9736L6.0253 10.1324C6.23361 10.0669 6.37532 9.8738 6.37532 9.65541V8.17548C6.37532 7.95712 6.51702 7.76401 6.72533 7.69851L18.413 4.02338ZM15.6877 14.83H15.5492C15.5956 14.83 15.6417 14.8291 15.6877 14.8273V14.83Z" fill="#19D992"/>
    <path d="M20.1505 19.8351V18.5004C20.1505 17.7924 19.9081 17.1135 19.4766 16.6129C19.0452 16.1123 18.46 15.831 17.8498 15.831H13.2484C12.6383 15.831 12.0531 16.1123 11.6216 16.6129C11.1901 17.1135 10.9478 17.7924 10.9478 18.5004V19.8351" fill="#19D992"/>
    <path d="M15.549 13.829C16.9351 13.829 18.0588 12.7086 18.0588 11.3265C18.0588 9.9444 16.9351 8.82401 15.549 8.82401C14.1628 8.82401 13.0391 9.9444 13.0391 11.3265C13.0391 12.7086 14.1628 13.829 15.549 13.829Z" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/myFeed.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M4.80031 5.02535C4.34342 5.14307 4 5.65685 4 6.27274V12.6364C4 13.3392 4.44726 13.9092 5 13.9092H12.8612C12.3977 13.2953 12.1215 12.5228 12.1215 11.6836C12.1215 9.68471 13.6885 8.06428 15.6216 8.06428C16.5399 8.06428 17.3757 8.4017 18 9V6.27275C18 5.74561 17.7484 5.29327 17.3894 5.10003C17.2698 5.03562 17.1382 5 17 5L4.99996 5.00001C4.98269 5.00001 4.96554 5.00056 4.94849 5.00166C4.89802 5.00492 4.84853 5.01292 4.80031 5.02535ZM13.1055 15.0664L8.35938 15C8.05859 15 8 15.172 8 15.5C8 15.8514 7.92286 16.4545 8.19922 16.4545H10.7109C10.7454 16.4061 11.01 16.0501 11.0469 16.0039C11.5625 15.3574 12.3761 15.0664 13.1055 15.0664ZM8.00001 18.3636C8.00001 18.1001 8 17.5 8 17.5C8.05981 17.4679 8.43092 17.5 8.5 17.5L10.2406 17.5276C10.1592 17.8558 10.1216 18.4 10.1216 18.75V19H8.5C8.22364 19 8.00001 18.7151 8.00001 18.3636ZM5.48061 15.1821L5.49996 15.1819C6.32809 15.1819 6.99996 16.0367 6.99996 17.0909C6.99996 17.8037 6.69287 18.4253 6.23801 18.7532C6.02008 18.9103 5.76823 19 5.5 19C4.67188 19 4 18.1452 4 17.0909C4 16.1685 4.51441 15.3987 5.19778 15.2207C5.28931 15.1969 5.38385 15.1837 5.48061 15.1821Z" fill="#13A36E"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M3 5.23077C3 5.00601 3.04883 4.79537 3.13379 4.61403C3.20899 4.45508 3.31152 4.31866 3.43457 4.215C3.5957 4.07933 3.79004 4 4 4H18C18.5528 4 19 4.55108 19 5.23077V10.7765C18.8261 10.1344 18.5 9.5 18 9V6.46154C18 5.78186 17.5527 5.23077 17 5.23077H5C4.44726 5.23077 4 5.78186 4 6.46154V12.6154C4 13.2951 4.44726 13.8462 5 13.8462H12.8613C13.3238 14.4387 13.973 14.8784 14.7205 15.077H8.49999C8.22363 15.077 8 15.3525 8 15.6923C8 16.0321 8.22363 16.3077 8.49999 16.3077H10.82C10.5563 16.6656 10.3614 17.086 10.2454 17.5384H8.49999C8.22363 17.5384 8 17.8141 8 18.1538C8 18.4937 8.22363 18.7692 8.49999 18.7692H10.1217V20H4C3.44727 20 3 19.4489 3 18.7692V5.23077ZM16.5227 15.077C17.7259 14.7573 18.6746 13.8125 19 12.6115V15.077C18.8033 15.077 18.6349 15.077 18.4217 15.077H17.48C17.48 15.077 17.6097 15.077 17.5 15.077H16.5227ZM7 17C7 18.0196 6.32813 18.7692 5.5 18.7692C4.67188 18.7692 4 18.0196 4 17C4 15.9805 4.67188 15.1941 5.5 15.1941C6.32813 15.1941 7 15.9805 7 17Z" fill="#19D992"/>
    <path d="M20.2028 20.011V18.6764C20.2028 17.9684 19.9604 17.2894 19.5289 16.7889C19.0975 16.2883 18.5123 16.007 17.9021 16.007H13.3007C12.6905 16.007 12.1053 16.2883 11.6739 16.7889C11.2424 17.2894 11 17.9684 11 18.6764V20.011" fill="#19D992"/>
    <path d="M15.6016 14.005C16.9878 14.005 18.1115 12.8846 18.1115 11.5025C18.1115 10.1204 16.9878 9 15.6016 9C14.2155 9 13.0918 10.1204 13.0918 11.5025C13.0918 12.8846 14.2155 14.005 15.6016 14.005Z" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/nav-back.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4 10L3.29289 10.7071L2.58579 10L3.29289 9.29289L4 10ZM21 18C21 18.5523 20.5523 19 20 19C19.4477 19 19 18.5523 19 18L21 18ZM8.29289 15.7071L3.29289 10.7071L4.70711 9.29289L9.70711 14.2929L8.29289 15.7071ZM3.29289 9.29289L8.29289 4.29289L9.70711 5.70711L4.70711 10.7071L3.29289 9.29289ZM4 9L14 9L14 11L4 11L4 9ZM21 16L21 18L19 18L19 16L21 16ZM14 9C17.866 9 21 12.134 21 16L19 16C19 13.2386 16.7614 11 14 11L14 9Z" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/nav-forward.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M20 10L20.7071 10.7071L21.4142 10L20.7071 9.29289L20 10ZM3 18C3 18.5523 3.44772 19 4 19C4.55229 19 5 18.5523 5 18L3 18ZM15.7071 15.7071L20.7071 10.7071L19.2929 9.29289L14.2929 14.2929L15.7071 15.7071ZM20.7071 9.29289L15.7071 4.29289L14.2929 5.70711L19.2929 10.7071L20.7071 9.29289ZM20 9L10 9L10 11L20 11L20 9ZM3 16L3 18L5 18L5 16L3 16ZM10 9C6.13401 9 3 12.134 3 16L5 16C5 13.2386 7.23858 11 10 11L10 9Z"
    fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/nav-refresh.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10 19L9.29289 18.2929L8.58579 19L9.29289 19.7071L10 19ZM13.2929 14.2929L9.29289 18.2929L10.7071 19.7071L14.7071 15.7071L13.2929 14.2929ZM9.29289 19.7071L13.2929 23.7071L14.7071 22.2929L10.7071 18.2929L9.29289 19.7071Z" fill="#6038D0"/>
<path d="M18.0622 8.5C18.6766 9.56413 19 10.7712 19 12C19 13.2288 18.6766 14.4359 18.0622 15.5C17.4478 16.5641 16.5641 17.4478 15.5 18.0622C14.4359 18.6766 13.2288 19 12 19" stroke="#6038D0" stroke-width="2" stroke-linecap="round"/>
<path d="M14 5L14.7071 5.70711L15.4142 5L14.7071 4.29289L14 5ZM10.7071 9.70711L14.7071 5.70711L13.2929 4.29289L9.29289 8.29289L10.7071 9.70711ZM14.7071 4.29289L10.7071 0.292893L9.29289 1.70711L13.2929 5.70711L14.7071 4.29289Z" fill="#6038D0"/>
<path d="M5.93782 15.5C5.32344 14.4359 5 13.2288 5 12C5 10.7712 5.32344 9.56413 5.93782 8.5C6.5522 7.43587 7.43587 6.5522 8.5 5.93782C9.56413 5.32344 10.7712 5 12 5" stroke="#6038D0" stroke-width="2" stroke-linecap="round"/>
</svg>

'''
'''--- assets/icons/navSettingsConfig.colors.svg ---
<svg width="244" height="100" viewBox="0 0 244 100" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M122.812 21.4585L142.827 14.2855V30.0197L122.812 37.1927V21.4585Z" fill="#201F1F"/>
  <path d="M128.135 15.5721L148.15 8.39917V24.1334L128.135 31.3064V15.5721Z" fill="#201F1F"/>
  <line x1="123.452" y1="21.5481" x2="123.452" y2="44.871" stroke="#201F1F" stroke-width="1.27972"/>
  <path
    d="M123.396 42.5557C117.452 49.7187 105.651 69.2394 84.2734 86.1189H166.598C144.75 69.4991 130.047 50.2649 123.396 42.5557Z"
    fill="#19D992"/>
  <path opacity="0.5"
        d="M118.184 48.6333C108.632 48.3439 95.421 51.2708 95.2809 54.8811C95.1409 58.4914 107.304 61.8945 122.448 62.4819C137.592 63.0694 149.982 60.6189 150.122 57.0085C150.217 54.568 140.183 49.7912 129.473 49.2122"
        stroke="#201F1F" stroke-width="0.479895"/>
  <path opacity="0.5"
        d="M193.01 75.2368C193.613 73.1197 192.4 70.5165 189.498 67.5833C186.61 64.6659 182.118 61.4917 176.35 58.2548C164.817 51.783 148.233 45.0871 129.332 39.7062C110.431 34.3254 92.8073 31.2827 79.5952 30.71C72.9872 30.4235 67.4965 30.7557 63.5058 31.715C59.4933 32.6795 57.0914 34.2537 56.4886 36.3708C55.8859 38.4879 57.0986 41.0912 60.0014 44.0244C62.8886 46.9418 67.381 50.116 73.149 53.3529C84.6817 59.8247 101.266 66.5206 120.167 71.9015C139.068 77.2823 156.692 80.325 169.904 80.8977C176.512 81.1841 182.002 80.852 185.993 79.8927C190.006 78.9282 192.408 77.3539 193.01 75.2368Z"
        stroke="#201F1F" stroke-width="0.479895"/>
  <path opacity="0.5"
        d="M228.782 42.855C228.618 41.2292 227.741 39.6952 226.184 38.2627C224.626 36.8289 222.397 35.508 219.558 34.3145C213.881 31.9278 205.811 30.0707 195.926 28.8235C176.158 26.3296 149.182 26.2808 119.686 29.2724C90.1901 32.2641 63.7734 37.7282 44.9093 44.1403C35.4754 47.347 27.9433 50.7865 22.8607 54.2645C20.3193 56.0036 18.401 57.7452 17.1623 59.4627C15.9247 61.1786 15.374 62.8574 15.5389 64.4832C15.7038 66.109 16.5803 67.6431 18.1372 69.0755C19.6956 70.5093 21.9246 71.8303 24.7634 73.0237C30.4408 75.4104 38.5101 77.2676 48.3957 78.5148C68.1631 81.0087 95.1389 81.0574 124.635 78.0658C154.131 75.0742 180.548 69.6101 199.412 63.198C208.846 59.9913 216.378 56.5518 221.461 53.0737C224.002 51.3346 225.92 49.593 227.159 47.8756C228.397 46.1597 228.947 44.4809 228.782 42.855Z"
        stroke="#201F1F" stroke-width="0.479895"/>
  <circle cx="35.1273" cy="75.4322" r="3.41259" transform="rotate(-5.95875 35.1273 75.4322)" fill="#FF8743"/>
  <circle cx="198.077" cy="29.3624" r="3.41259" transform="rotate(-5.95875 198.077 29.3624)" fill="#FF8743"/>
  <circle cx="61.5746" cy="31.9217" r="3.41259" transform="rotate(-5.95875 61.5746 31.9217)" fill="#FF8743"/>
  <circle cx="123.852" cy="61.7818" r="3.41259" transform="rotate(-5.95875 123.852 61.7818)" fill="#FF8743"/>
  <circle cx="180.161" cy="80.5511" r="3.41259" transform="rotate(-5.95875 180.161 80.5511)" fill="#FF8743"/>
</svg>

'''
'''--- assets/icons/navSettingsPolicy.colors.svg ---
<svg width="244" height="100" viewBox="0 0 244 100" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path opacity="0.5"
        d="M227.55 69.0001C227.55 69.7728 226.897 70.6022 225.45 71.4587C224.021 72.3041 221.898 73.1278 219.143 73.9168C213.635 75.4936 205.653 76.9166 195.777 78.1126C176.027 80.5041 148.737 81.984 118.588 81.984C88.4386 81.984 61.1479 80.5041 41.3984 78.1126C31.5219 76.9166 23.5404 75.4936 18.0325 73.9168C15.2767 73.1278 13.1542 72.3041 11.7256 71.4587C10.2783 70.6022 9.62471 69.7728 9.62471 69.0001C9.62471 68.2274 10.2783 67.398 11.7256 66.5416C13.1542 65.6962 15.2767 64.8725 18.0325 64.0835C23.5404 62.5066 31.5219 61.0837 41.3984 59.8877C61.1479 57.4962 88.4386 56.0163 118.588 56.0163C148.737 56.0163 176.027 57.4962 195.777 59.8877C205.653 61.0837 213.635 62.5066 219.143 64.0835C221.898 64.8725 224.021 65.6962 225.45 66.5416C226.897 67.398 227.55 68.2274 227.55 69.0001Z"
        stroke="#201F1F" stroke-width="0.479895"/>
  <path
    d="M107.192 18.7113C111.415 17.563 115.903 16.5315 118.589 16.5315C121.275 16.5315 125.763 17.563 129.986 18.7113C134.307 19.879 138.663 21.2609 141.224 22.0977C142.295 22.4514 143.244 23.0999 143.963 23.9689C144.682 24.8378 145.141 25.8919 145.288 27.0101C147.608 44.4367 142.224 57.352 135.693 65.896C132.923 69.5509 129.62 72.7695 125.895 75.4442C124.607 76.3698 123.243 77.1837 121.816 77.877C120.726 78.3908 119.555 78.8112 118.589 78.8112C117.624 78.8112 116.456 78.3908 115.362 77.877C113.936 77.1837 112.571 76.3698 111.283 75.4442C107.558 72.7694 104.255 69.5508 101.486 65.896C94.954 57.352 89.5707 44.4367 91.8907 27.0101C92.0374 25.8919 92.4965 24.8378 93.2153 23.9689C93.9342 23.0999 94.8836 22.4514 95.9544 22.0977C99.6725 20.8787 103.419 19.7495 107.192 18.7113Z"
    fill="#19D992"/>
  <path
    d="M104.631 55.8704L117.599 42.9025L115.708 40.9844L114.736 41.9434C114.611 42.0687 114.462 42.168 114.299 42.2358C114.135 42.3036 113.96 42.3385 113.783 42.3385C113.606 42.3385 113.431 42.3036 113.268 42.2358C113.104 42.168 112.956 42.0687 112.831 41.9434L111.872 40.9844C111.747 40.8594 111.647 40.711 111.579 40.5475C111.512 40.3841 111.477 40.209 111.477 40.032C111.477 39.8551 111.512 39.68 111.579 39.5165C111.647 39.3531 111.747 39.2047 111.872 39.0797L119.517 31.4341C119.642 31.3089 119.791 31.2095 119.954 31.1417C120.118 31.074 120.293 31.0391 120.47 31.0391C120.647 31.0391 120.822 31.074 120.985 31.1417C121.149 31.2095 121.297 31.3089 121.422 31.4341L122.381 32.3932C122.908 32.92 122.908 33.771 122.381 34.2978L121.422 35.2299L123.34 37.1616C123.465 37.0363 123.614 36.937 123.777 36.8692C123.94 36.8014 124.116 36.7665 124.293 36.7665C124.469 36.7665 124.645 36.8014 124.808 36.8692C124.971 36.937 125.12 37.0363 125.245 37.1616C125.772 37.6884 125.772 38.5529 125.245 39.0797L127.15 40.9844L128.109 40.0253C128.635 39.4985 129.5 39.4985 130.027 40.0253L130.972 40.9844C131.499 41.5112 131.499 42.3757 130.972 42.9025L123.34 50.5346C122.813 51.0615 121.949 51.0615 121.422 50.5346L120.477 49.5891C120.348 49.4644 120.246 49.3153 120.177 49.1506C120.107 48.9859 120.071 48.8088 120.071 48.63C120.071 48.4511 120.107 48.2741 120.177 48.1094C120.246 47.9446 120.348 47.7955 120.477 47.6709L121.422 46.7118L119.517 44.8072L106.536 57.7885C106.411 57.9137 106.263 58.0131 106.099 58.0809C105.936 58.1487 105.761 58.1836 105.584 58.1836C105.407 58.1836 105.232 58.1487 105.068 58.0809C104.905 58.0131 104.756 57.9137 104.631 57.7885C104.105 57.2617 104.105 56.3972 104.631 55.8704ZM128.541 54.1413C129.257 54.1413 129.945 54.426 130.451 54.9326C130.958 55.4393 131.243 56.1264 131.243 56.8429V58.1938H117.734V56.8429C117.734 56.1264 118.019 55.4393 118.526 54.9326C119.032 54.426 119.719 54.1413 120.436 54.1413H128.541Z"
    fill="black"/>
  <circle cx="66.9721" cy="80.0912" r="8.10489" fill="#CFF9EA"/>
  <g clip-path="url(#clip0_13137_120236)">
    <path
      d="M68.5358 83.6102V82.8281C68.5358 82.4133 68.371 82.0155 68.0777 81.7222C67.7844 81.4288 67.3865 81.264 66.9717 81.264H64.2345C63.8197 81.264 63.4219 81.4288 63.1285 81.7222C62.8352 82.0155 62.6704 82.4133 62.6704 82.8281V83.6102"
      stroke="#19D992" stroke-width="0.853147" stroke-linecap="square" stroke-linejoin="round"/>
    <path
      d="M65.6029 79.7C66.4668 79.7 67.167 78.9997 67.167 78.1359C67.167 77.2721 66.4668 76.5718 65.6029 76.5718C64.7391 76.5718 64.0388 77.2721 64.0388 78.1359C64.0388 78.9997 64.7391 79.7 65.6029 79.7Z"
      stroke="#19D992" stroke-width="0.853147" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M70.0999 78.5269V80.8731" stroke="#19D992" stroke-width="0.853147" stroke-linecap="square"
          stroke-linejoin="round"/>
    <path d="M71.2729 79.6999H68.9268" stroke="#19D992" stroke-width="0.853147" stroke-linecap="square"
          stroke-linejoin="round"/>
  </g>
  <circle cx="164.232" cy="56.2033" r="8.10489" fill="#CFF9EA"/>
  <path
    d="M161.587 57.3025C161.743 57.8845 162.087 58.3988 162.565 58.7656C163.043 59.1324 163.629 59.3312 164.231 59.3312C164.834 59.3312 165.42 59.1324 165.898 58.7656C166.376 58.3988 166.719 57.8845 166.875 57.3025"
    stroke="#19D992" stroke-width="0.853147"/>
  <path
    d="M165.92 54.9721L166.253 55.2385L166.786 54.5723L166.453 54.3059L165.92 54.9721ZM164.231 53.0749L164.498 52.7418L164.231 52.5286L163.965 52.7418L164.231 53.0749ZM162.01 54.3059L161.677 54.5723L162.21 55.2385L162.543 54.9721L162.01 54.3059ZM163.805 56.5941L163.805 57.0207L164.658 57.0207L164.658 56.5941L163.805 56.5941ZM166.453 54.3059L164.498 52.7418L163.965 53.4079L165.92 54.9721L166.453 54.3059ZM163.965 52.7418L162.01 54.3059L162.543 54.9721L164.498 53.4079L163.965 52.7418ZM163.805 53.0749L163.805 56.5941L164.658 56.5941L164.658 53.0749L163.805 53.0749Z"
    fill="#19D992"/>
  <circle cx="138.636" cy="82.6506" r="8.10489" fill="#FFF3EC"/>
  <path
    d="M140.024 85.3575C140.08 85.3014 140.111 85.225 140.111 85.1453L140.111 83.2846L141.665 81.7309C142.551 80.845 142.547 79.1106 142.547 79.0372C142.545 78.8736 142.413 78.7415 142.25 78.7401C142.176 78.7395 140.442 78.7353 139.555 79.621L138.001 81.1753H136.141C136.061 81.1753 135.985 81.2069 135.929 81.2628L134.813 82.3783C134.738 82.4538 134.708 82.5635 134.735 82.6666C134.749 82.7187 134.776 82.7653 134.813 82.8023C134.849 82.8382 134.894 82.865 134.945 82.879L136.423 83.2882L137.998 84.8626L138.407 86.3409C138.421 86.3917 138.448 86.4366 138.484 86.4726C138.521 86.5096 138.568 86.5367 138.62 86.5507C138.723 86.5779 138.833 86.5481 138.908 86.4726L140.024 85.3575ZM136.491 82.6852L135.601 82.4388L136.265 81.7747H137.402L136.491 82.6852ZM138.266 84.2828L137.004 83.0206L137.281 82.7439L138.543 84.0059L138.266 84.2828ZM138.966 83.5821L137.704 82.3201L139.979 80.045C140.492 79.5329 141.442 79.3923 141.933 79.3537C141.894 79.845 141.754 80.7949 141.241 81.307L138.966 83.5821ZM138.601 84.7949L139.177 84.2192C139.177 84.2186 139.178 84.2182 139.178 84.2178C139.179 84.2174 139.179 84.2168 139.18 84.2162L139.512 83.884V85.021L138.848 85.6852L138.601 84.7949ZM137.191 84.7171C137.026 84.7123 136.888 84.8426 136.883 85.0083C136.879 85.1447 136.79 85.3299 136.671 85.449C136.457 85.6636 135.971 85.6556 135.668 85.618C135.63 85.3149 135.622 84.8314 135.837 84.6156C135.957 84.4964 136.142 84.4073 136.278 84.4035C136.444 84.3993 136.574 84.2612 136.57 84.0958C136.565 83.9305 136.427 83.8001 136.262 83.8045C135.974 83.8123 135.641 83.9643 135.414 84.1917C134.861 84.7439 135.089 85.8232 135.116 85.9445C135.129 86.0005 135.157 86.0504 135.197 86.0896C135.236 86.1287 135.286 86.1571 135.342 86.1699C135.463 86.1977 136.543 86.425 137.095 85.8726C137.322 85.6454 137.474 85.3127 137.482 85.0248C137.487 84.8594 137.357 84.7215 137.191 84.7171Z"
    fill="#FF8743"/>
  <circle cx="37.9662" cy="59.6156" r="8.10489" fill="#FFF3EC"/>
  <g clip-path="url(#clip1_13137_120236)">
    <path
      d="M37.9657 63.5257C40.1253 63.5257 41.8759 61.775 41.8759 59.6154C41.8759 57.4559 40.1253 55.7052 37.9657 55.7052C35.8061 55.7052 34.0554 57.4559 34.0554 59.6154C34.0554 61.775 35.8061 63.5257 37.9657 63.5257Z"
      stroke="#FF8743" stroke-width="0.782051" stroke-linecap="round" stroke-linejoin="round"/>
    <path
      d="M36.8276 58.4423C36.9196 58.181 37.101 57.9606 37.3399 57.8203C37.5787 57.6799 37.8595 57.6286 38.1326 57.6754C38.4056 57.7223 38.6533 57.8642 38.8317 58.0761C39.0101 58.2881 39.1077 58.5563 39.1073 58.8334C39.1073 59.6154 37.9342 60.0064 37.9342 60.0064"
      stroke="#FF8743" stroke-width="0.782051" stroke-linejoin="round"/>
    <path d="M37.9658 61.5706H37.9697" stroke="#FF8743" stroke-width="0.782051" stroke-linecap="round"
          stroke-linejoin="round"/>
  </g>
  <circle cx="223.953" cy="68.1471" r="8.10489" fill="#FFF3EC"/>
  <path d="M228.253 67.7558H225.907" stroke="#FF8743" stroke-width="0.853147" stroke-linecap="square"
        stroke-linejoin="round"/>
  <path
    d="M222.583 67.7559C223.447 67.7559 224.147 67.0556 224.147 66.1918C224.147 65.3279 223.447 64.6277 222.583 64.6277C221.72 64.6277 221.019 65.3279 221.019 66.1918C221.019 67.0556 221.72 67.7559 222.583 67.7559Z"
    stroke="#FF8743" stroke-width="0.853147" stroke-linecap="round" stroke-linejoin="round"/>
  <path
    d="M225.516 71.6661V70.8841C225.516 70.4693 225.351 70.0714 225.058 69.7781C224.765 69.4848 224.367 69.32 223.952 69.32H221.215C220.8 69.32 220.402 69.4848 220.109 69.7781C219.815 70.0714 219.651 70.4693 219.651 70.8841V71.6661"
    stroke="#FF8743" stroke-width="0.853147" stroke-linecap="square" stroke-linejoin="round"/>
  <defs>
    <clipPath id="clip0_13137_120236">
      <rect width="9.38462" height="9.38462" fill="white" transform="translate(62.2793 75.3987)"/>
    </clipPath>
    <clipPath id="clip1_13137_120236">
      <rect width="9.38461" height="9.38461" fill="white" transform="translate(33.2734 54.9231)"/>
    </clipPath>
  </defs>
</svg>

'''
'''--- assets/icons/navSettingsVersion.colors.svg ---
<svg width="244" height="100" viewBox="0 0 244 100" fill="none" xmlns="http://www.w3.org/2000/svg">
<path opacity="0.5" d="M186.716 29.5483C187.456 32.1477 186.339 35.1975 183.56 38.5178C180.787 41.8304 176.399 45.3619 170.719 48.8995C159.362 55.973 142.888 63.0416 123.989 68.4216C105.091 73.8017 87.3645 76.4697 73.9846 76.4386C67.293 76.423 61.7028 75.7323 57.6009 74.3767C53.4897 73.0181 50.9342 71.0137 50.1942 68.4143C49.4542 65.8148 50.5708 62.765 53.35 59.4448C56.1229 56.1321 60.511 52.6006 66.1911 49.063C77.5484 41.9895 94.0224 34.921 112.921 29.5409C131.819 24.1608 149.546 21.4928 162.925 21.5239C169.617 21.5395 175.207 22.2303 179.309 23.5858C183.42 24.9444 185.976 26.9488 186.716 29.5483Z" stroke="#201F1F" stroke-width="0.479895"/>
<circle r="3.41259" transform="matrix(0.994597 0.103812 0.103812 -0.994597 53.2308 71.5736)" fill="#FF8743"/>
<circle r="3.41259" transform="matrix(0.994597 0.103812 0.103812 -0.994597 170.112 22.0912)" fill="#FF8743"/>
<path d="M31.9546 41.2891C31.8854 41.2043 31.8303 41.135 31.7898 41.0835C31.8303 41.032 31.8854 40.9628 31.9546 40.878C32.1178 40.6781 32.3589 40.392 32.6696 40.0483C33.2914 39.3607 34.191 38.444 35.3021 37.5277C37.5293 35.6911 40.5822 33.8759 43.937 33.8759C47.2919 33.8759 50.3448 35.6911 52.572 37.5277C53.6831 38.444 54.5827 39.3607 55.2044 40.0483C55.5152 40.392 55.7563 40.6781 55.9194 40.878C55.9886 40.9628 56.0438 41.032 56.0843 41.0835C56.0438 41.135 55.9886 41.2043 55.9194 41.2891C55.7563 41.489 55.5152 41.7751 55.2044 42.1188C54.5827 42.8064 53.6831 43.7231 52.572 44.6393C50.3448 46.476 47.2919 48.2911 43.937 48.2911C40.5822 48.2911 37.5293 46.476 35.3021 44.6393C34.191 43.7231 33.2914 42.8064 32.6696 42.1188C32.3589 41.7751 32.1178 41.489 31.9546 41.2891Z" fill="white" stroke="#201F1F" stroke-width="0.353447"/>
<ellipse cx="47.1182" cy="41.2591" rx="4.94825" ry="4.92288" fill="#19D992"/>
<ellipse cx="47.1187" cy="41.26" rx="2.47413" ry="2.46144" fill="#201F1F"/>
<path d="M86.3085 9.14649C86.2835 9.11579 86.2635 9.09071 86.2489 9.07207C86.2635 9.05342 86.2835 9.02835 86.3085 8.99764C86.3676 8.92528 86.4549 8.82167 86.5674 8.69723C86.7925 8.44827 87.1183 8.11637 87.5206 7.78462C88.3269 7.11963 89.4323 6.46242 90.647 6.46242C91.8617 6.46242 92.967 7.11963 93.7734 7.78462C94.1757 8.11637 94.5014 8.44827 94.7266 8.69723C94.8391 8.82167 94.9264 8.92528 94.9854 8.99764C95.0105 9.02835 95.0305 9.05343 95.0451 9.07207C95.0305 9.09072 95.0105 9.11579 94.9854 9.14649C94.9264 9.21886 94.8391 9.32247 94.7266 9.44691C94.5014 9.69587 94.1757 10.0278 93.7734 10.3595C92.967 11.0245 91.8617 11.6817 90.647 11.6817C89.4323 11.6817 88.3269 11.0245 87.5206 10.3595C87.1183 10.0278 86.7925 9.69587 86.5674 9.44691C86.4549 9.32247 86.3676 9.21886 86.3085 9.14649Z" fill="white" stroke="#201F1F" stroke-width="0.127972"/>
<ellipse cx="91.7994" cy="9.13569" rx="1.79161" ry="1.78242" fill="#19D992"/>
<ellipse cx="91.8001" cy="9.13608" rx="0.895804" ry="0.89121" fill="#201F1F"/>
<path d="M209.247 18.5261C209.207 18.4764 209.174 18.4358 209.15 18.4056C209.174 18.3754 209.207 18.3349 209.247 18.2851C209.343 18.168 209.484 18.0002 209.666 17.7988C210.031 17.3957 210.558 16.8583 211.209 16.3212C212.515 15.2446 214.305 14.1805 216.271 14.1805C218.238 14.1805 220.028 15.2446 221.333 16.3212C221.984 16.8583 222.512 17.3957 222.876 17.7988C223.058 18.0002 223.2 18.168 223.295 18.2851C223.336 18.3349 223.368 18.3754 223.392 18.4056C223.368 18.4358 223.336 18.4764 223.295 18.5261C223.2 18.6433 223.058 18.811 222.876 19.0125C222.512 19.4156 221.984 19.953 221.333 20.4901C220.028 21.5667 218.238 22.6308 216.271 22.6308C214.305 22.6308 212.515 21.5667 211.209 20.4901C210.558 19.953 210.031 19.4156 209.666 19.0125C209.484 18.811 209.343 18.6433 209.247 18.5261Z" fill="white" stroke="#201F1F" stroke-width="0.207193"/>
<ellipse cx="213.991" cy="18.5086" rx="2.9007" ry="2.88582" fill="#19D992"/>
<ellipse cx="213.993" cy="18.5088" rx="1.45035" ry="1.44291" fill="#201F1F"/>
<path d="M164.111 73.8448C164.056 73.7775 164.012 73.7226 163.98 73.6817C164.012 73.6409 164.056 73.586 164.111 73.5187C164.24 73.3602 164.431 73.1332 164.678 72.8607C165.171 72.3153 165.884 71.5883 166.766 70.8616C168.532 69.405 170.953 67.9654 173.614 67.9654C176.275 67.9654 178.696 69.405 180.462 70.8616C181.344 71.5883 182.057 72.3153 182.55 72.8607C182.797 73.1332 182.988 73.3602 183.117 73.5187C183.172 73.586 183.216 73.6409 183.248 73.6817C183.216 73.7226 183.172 73.7775 183.117 73.8448C182.988 74.0033 182.797 74.2302 182.55 74.5028C182.057 75.0481 181.344 75.7752 180.462 76.5019C178.696 77.9585 176.275 79.3981 173.614 79.3981C170.953 79.3981 168.532 77.9585 166.766 76.5019C165.884 75.7752 165.171 75.0481 164.678 74.5028C164.431 74.2302 164.24 74.0033 164.111 73.8448Z" fill="white" stroke="#201F1F" stroke-width="0.28032"/>
<ellipse cx="170.53" cy="73.8209" rx="3.92447" ry="3.90435" fill="#19D992"/>
<ellipse cx="170.533" cy="73.8216" rx="1.96224" ry="1.95218" fill="#201F1F"/>
<g clip-path="url(#clip0_13137_120312)">
<path d="M144.263 41.4404L139.341 39.9711C139.148 39.3118 138.917 38.6642 138.65 38.0316C136.391 37.6495 134.308 36.5722 132.691 34.9497C131.074 33.3272 130.003 31.2406 129.628 28.9806C128.992 28.7068 128.339 28.4712 127.674 28.2754L126.205 23.412C126.153 23.2218 126.04 23.0539 125.884 22.9344C125.727 22.8149 125.535 22.7503 125.338 22.7508H120.372C120.181 22.7517 119.995 22.8134 119.842 22.927C119.689 23.0407 119.576 23.2003 119.52 23.3826L118.05 28.2313C116.834 28.5898 115.661 29.0826 114.553 29.7006L110.145 27.3203C109.975 27.2299 109.78 27.1968 109.59 27.2259C109.399 27.255 109.223 27.3448 109.088 27.4819L105.517 30.9642C105.38 31.0997 105.29 31.2758 105.261 31.4664C105.232 31.657 105.265 31.8518 105.355 32.0221L107.736 36.43C107.119 37.5329 106.626 38.7008 106.266 39.9123L101.403 41.3816C101.221 41.4379 101.061 41.5509 100.948 41.7042C100.834 41.8575 100.772 42.043 100.771 42.2338V47.2001C100.772 47.3909 100.834 47.5764 100.948 47.7297C101.061 47.8829 101.221 47.996 101.403 48.0523L106.296 49.5216C106.659 50.7129 107.152 51.8609 107.765 52.9451L105.355 57.5587C105.265 57.7289 105.232 57.9238 105.261 58.1144C105.29 58.305 105.38 58.4811 105.517 58.6166L109.029 62.1282C109.164 62.2654 109.34 62.3551 109.531 62.3843C109.722 62.4134 109.916 62.3803 110.087 62.2899L114.627 59.8655C115.701 60.445 116.834 60.908 118.006 61.2466L119.476 66.1982C119.532 66.3805 119.645 66.5401 119.798 66.6537C119.951 66.7674 120.137 66.8291 120.328 66.83H125.294C125.485 66.8291 125.67 66.7674 125.824 66.6537C125.977 66.5401 126.09 66.3805 126.146 66.1982L127.616 61.232C128.778 60.8916 129.901 60.4286 130.966 59.8508L135.535 62.2899C135.705 62.3803 135.9 62.4134 136.091 62.3843C136.281 62.3551 136.457 62.2654 136.593 62.1282L140.105 58.6166C140.242 58.4811 140.332 58.305 140.361 58.1144C140.39 57.9238 140.357 57.7289 140.266 57.5587L137.827 53.0038C138.411 51.9352 138.879 50.8072 139.223 49.6391L144.175 48.1698C144.357 48.1135 144.516 48.0005 144.63 47.8472C144.744 47.6939 144.806 47.5084 144.806 47.3176V42.3073C144.815 42.1246 144.768 41.9436 144.67 41.7886C144.573 41.6336 144.431 41.5121 144.263 41.4404ZM122.855 52.8716C121.257 52.8716 119.694 52.3976 118.365 51.5097C117.036 50.6217 116.001 49.3596 115.389 47.8829C114.777 46.4063 114.617 44.7814 114.929 43.2138C115.241 41.6462 116.01 40.2063 117.141 39.0761C118.271 37.9459 119.711 37.1763 121.278 36.8645C122.846 36.5527 124.471 36.7127 125.947 37.3243C127.424 37.936 128.686 38.9718 129.574 40.3007C130.462 41.6297 130.936 43.1921 130.936 44.7904C130.936 46.9337 130.085 48.9891 128.569 50.5047C127.054 52.0202 124.998 52.8716 122.855 52.8716Z" fill="#201F1F"/>
<path d="M139.16 21.2813C142.525 21.2813 145.29 23.7694 145.757 27.0011H147.74L144.403 30.8143L141.067 27.0011H143.278C143.065 26.0679 142.542 25.2346 141.794 24.6373C141.046 24.0399 140.117 23.7138 139.16 23.7122C137.778 23.7122 136.558 24.3891 135.786 25.4091L134.155 23.5502C134.779 22.8367 135.549 22.265 136.412 21.8737C137.275 21.4823 138.212 21.2804 139.16 21.2813ZM138.779 34.0936C135.423 34.0936 132.649 31.6055 132.182 28.3738H130.199L133.536 24.5607C134.651 25.8285 135.757 27.106 136.872 28.3738H134.661C134.874 29.307 135.397 30.1403 136.145 30.7377C136.893 31.335 137.822 31.6611 138.779 31.6627C140.161 31.6627 141.381 30.9859 142.154 29.9658L143.784 31.8248C143.16 32.539 142.391 33.1111 141.528 33.5025C140.664 33.8939 139.727 34.0955 138.779 34.0936Z" fill="#19D992"/>
</g>
<defs>
<clipPath id="clip0_13137_120312">
<rect width="52.8951" height="52.8951" fill="white" transform="translate(96.4062 18.3428)"/>
</clipPath>
</defs>
</svg>

'''
'''--- assets/icons/nfts.svg ---
<svg width="16" height="19" viewBox="0 0 16 19" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M16 13.8616V10.3259V3.9375C16 3.71652 15.8154 3.53571 15.5897 3.53571H11.0154V1.8683C11.0154 1.64732 10.8308 1.46652 10.6051 1.46652H8.41026V0.401786C8.41026 0.180804 8.22564 0 8 0C7.77436 0 7.58974 0.180804 7.58974 0.401786V1.46652H5.39487C5.16923 1.46652 4.98462 1.64732 4.98462 1.8683V3.53571H0.410256C0.184615 3.53571 0 3.71652 0 3.9375V13.8616C0 14.0826 0.184615 14.2634 0.410256 14.2634H3.17949L1.29231 17.3973C1.16923 17.5982 1.31538 17.8996 1.5 18C1.56154 18.0402 2.43846 18 2.5 18L4.76647 14.2634H7.3641V17.5C7.3641 17.8644 7.77436 18 8 18C8.22564 18 8.73846 17.9023 8.73846 17.5V14.2634H11.3035L13.5 18C13.5 18 14.5026 17.9799 14.5641 17.9397C14.7692 17.8192 14.8308 17.5781 14.7077 17.3973L12.8205 14.2634H15.5897C15.8154 14.2634 16 14.0826 16 13.8616ZM6 2.5H8H10V3.53571L6 3.5V2.5ZM5.39487 5H10.6051H14.7077V9.5H11.1179L9.2718 8.39732C9.10769 8.27678 8.88205 8.29687 8.73846 8.4375L7.3641 9.24107L4.53333 6.77009C4.38974 6.60938 4.12308 6.60937 3.95897 6.75L1.29231 8.77838V5H5.39487ZM1.29231 13V10.3259L4.12308 8L7.07692 10.5871C7.15897 10.6674 7.26154 10.7076 7.3641 10.7076C7.46667 10.7076 7.58974 10.6674 7.65128 10.5871L9 9.5L10.8718 10.6272C10.9333 10.6875 11.0359 10.7076 11.1179 10.7076H14.7077V13H1.29231Z" fill="#201F1F"/>
    <path d="M12.3077 8.47803C13.1077 8.47803 13.7436 7.85526 13.7436 7.07178C13.7436 6.2883 13.1077 5.66553 12.3077 5.66553C11.5077 5.66553 10.8718 6.2883 10.8718 7.07178C10.8718 7.85526 11.5077 8.47803 12.3077 8.47803ZM12.3077 6.4691C12.6564 6.4691 12.9231 6.73026 12.9231 7.07178C12.9231 7.4133 12.6564 7.67446 12.3077 7.67446C11.959 7.67446 11.6923 7.4133 11.6923 7.07178C11.6923 6.73026 11.959 6.4691 12.3077 6.4691Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/no-notifications.colors.svg ---
<svg width="107" height="121" viewBox="0 0 107 121" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M18.9079 57V83.6667C18.9079 85.0812 18.3524 86.4377 17.3635 87.4379L12.7964 92.0572C12.2816 92.5779 12.2816 93.4221 12.7964 93.9428C13.0437 94.1929 13.379 94.3333 13.7286 94.3333H66.2714C66.9995 94.3333 67.5897 93.7364 67.5897 93C67.5897 92.6464 67.4508 92.3072 67.2036 92.0572L62.6365 87.4379C61.6476 86.4377 61.0921 85.0812 61.0921 83.6667V57C61.0921 45.2179 51.6488 35.6667 40 35.6667C28.3512 35.6667 18.9079 45.2179 18.9079 57ZM60.4276 105C58.0861 114.201 49.8281 121 40 121C30.1719 121 21.9139 114.201 19.5724 105H10.546C4.72162 105 0 100.224 0 94.3333C0 91.5044 1.1111 88.7913 3.08886 86.7909L8.36188 81.4575V57C8.36188 39.3269 22.5268 25 40 25C57.4733 25 71.6381 39.3269 71.6381 57V81.4575L76.9111 86.7909C81.0296 90.9565 81.0296 97.7102 76.9111 101.876C74.9334 103.876 72.251 105 69.454 105H60.4276ZM30.8648 105C32.6883 108.188 36.0965 110.333 40 110.333C43.9035 110.333 47.3117 108.188 49.1352 105H30.8648Z" fill="#F0F0F0"/>
<path d="M45.2125 47.2733L42.227 48.917L45.2125 47.2733C42.6181 42.5612 41.1288 37.1088 41.1288 31.2787C41.1288 22.3777 44.5843 15.543 50.0573 10.882C55.5909 6.16932 63.4109 3.5 72.3144 3.5C81.2179 3.5 89.0379 6.16932 94.5715 10.882C100.044 15.543 103.5 22.3777 103.5 31.2787C103.5 40.1645 100.079 46.7644 94.6304 51.315C89.0933 55.9392 81.2187 58.6357 72.1503 59.0612C66.6454 59.3196 64.3851 59.4258 62.1235 59.4695C60.5305 59.5003 58.9369 59.5 56.2084 59.5L39.2125 59.1888L44.7771 52.288L42.0947 50.125L44.7771 52.288C45.9514 50.8317 46.0783 48.846 45.2125 47.2733Z" fill="#F0F0F0" stroke="#FAFAFA" stroke-width="7"/>
<circle cx="63.4286" cy="31.4286" r="3.42857" fill="#E8E0FF"/>
<circle cx="72.0001" cy="31.4286" r="3.42857" fill="#C1B0F1"/>
<circle cx="80.5714" cy="31.4286" r="3.42857" fill="#8060D9"/>
</svg>

'''
'''--- assets/icons/notVoted.colors.svg ---
<svg width="32" height="24" viewBox="0 0 32 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M4.13379 24V21.1729H32.0002V24H4.13379Z" fill="#6038D0"/>
    <path d="M4.13379 21.173L7.75706 14.3877H28.0996L32.0002 21.173H4.13379Z" fill="#C1B0F1"/>
    <path d="M10.6826 17.7803H25.0338" stroke="black" stroke-width="0.831122" stroke-linecap="round"/>
    <path d="M6.55001 1.66749L3.85466 0.673096L1.34668 6.18612L5.52664 8.02379L9.28861 8.58923L15.5586 5.62068L13.6698 3.20017C13.1869 2.58135 12.4642 2.19641 11.6813 2.14099L7.31331 1.83181C7.0524 1.81335 6.79541 1.75802 6.55001 1.66749Z" fill="#C1B0F1"/>
    <path d="M12.3545 6.7317V17.7805H23.5011V6.7317C23.5011 6.11968 23.0049 5.62354 22.3929 5.62354H13.4627C12.8506 5.62354 12.3545 6.11968 12.3545 6.7317Z" fill="#6038D0"/>
    <path d="M12.4927 10.2857L9.28809 8.58939L12.2141 6.61035L14.304 8.30667C15.4187 9.5789 13.6921 10.6748 12.4927 10.2857Z" fill="#C1B0F1"/>
    <rect width="1.67637" height="6.13609" transform="matrix(0.903765 0.428029 -0.417995 0.908449 2.56445 0)" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/note-archive.color.svg ---
<svg width="16" height="14" viewBox="0 0 16 14" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M12.643 14C13.979 14 15 12.845 15 11.5V4H1V11.5C1 12.845 2.021 14 3.357 14H12.643ZM5.5 6H10.5C10.6326 6 10.7598 6.05268 10.8536 6.14645C10.9473 6.24021 11 6.36739 11 6.5C11 6.63261 10.9473 6.75979 10.8536 6.85355C10.7598 6.94732 10.6326 7 10.5 7H5.5C5.36739 7 5.24021 6.94732 5.14645 6.85355C5.05268 6.75979 5 6.63261 5 6.5C5 6.36739 5.05268 6.24021 5.14645 6.14645C5.24021 6.05268 5.36739 6 5.5 6ZM0.8 0C0.587827 0 0.384344 0.0842855 0.234315 0.234315C0.0842855 0.384344 0 0.587827 0 0.8L0 2C0 2.21217 0.0842855 2.41566 0.234315 2.56569C0.384344 2.71571 0.587827 2.8 0.8 2.8H15.2C15.4122 2.8 15.6157 2.71571 15.7657 2.56569C15.9157 2.41566 16 2.21217 16 2V0.8C16 0.587827 15.9157 0.384344 15.7657 0.234315C15.6157 0.0842855 15.4122 0 15.2 0H0.8Z" fill="#FF9F69"/>
</svg>

'''
'''--- assets/icons/note-bell-active-hover.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M5.30942 12.5454C5.30942 13.1169 5.08635 13.6623 4.68977 14.0259L4.07012 14.5974C3.25219 15.3766 3.2274 16.7013 3.99576 17.5064C4.36755 17.8961 4.83848 18.1038 5.35899 18.1038H19.016C19.5365 18.1038 20.0075 17.8961 20.3792 17.5064C21.1476 16.7013 21.1228 15.3766 20.3049 14.5974L19.6852 14.0259C19.2886 13.6364 19.0656 13.1169 19.0656 12.5454V9.37661C19.0656 5.99999 16.587 2 12.3734 2H12.0016C7.788 2 5.30942 5.97402 5.30942 9.37661V12.5454ZM19.2989 15.6823L18.6737 15.1057L18.657 15.0894C17.9799 14.4241 17.5925 13.5227 17.5925 12.5454V9.37661C17.5925 6.51724 15.5024 3.48493 12.3734 3.48493H12.1875H12.0016C8.8698 3.48493 6.78254 6.49471 6.78254 9.37661V12.5444C6.78254 13.4905 6.41517 14.4501 5.68296 15.1226L5.68103 15.1244L5.07613 15.6823C4.85942 15.8952 4.85797 16.268 5.05745 16.4771C5.16396 16.5886 5.25672 16.6189 5.35899 16.6189H19.016C19.1182 16.6189 19.211 16.5886 19.3175 16.4771C19.517 16.268 19.5156 15.8952 19.2989 15.6823ZM14.7777 19.2727H9.57268C9.57268 19.8204 9.72668 20.3305 9.99178 20.7577C10.4558 21.5055 11.2603 22 12.1752 22C13.0901 22 13.8946 21.5055 14.3586 20.7577C14.6238 20.3305 14.7777 19.8204 14.7777 19.2727Z" fill="#201F1F"/>
<circle cx="19" cy="5" r="4" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/note-bell-active.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M5.30942 12.5454C5.30942 13.1169 5.08635 13.6623 4.68977 14.0259L4.07012 14.5974C3.25219 15.3766 3.2274 16.7013 3.99576 17.5064C4.36755 17.8961 4.83848 18.1038 5.35899 18.1038H19.016C19.5365 18.1038 20.0075 17.8961 20.3792 17.5064C21.1476 16.7013 21.1228 15.3766 20.3049 14.5974L19.6852 14.0259C19.2886 13.6364 19.0656 13.1169 19.0656 12.5454V9.37661C19.0656 5.99999 16.587 2 12.3734 2H12.0016C7.788 2 5.30942 5.97402 5.30942 9.37661V12.5454ZM19.2989 15.6823L18.6737 15.1057L18.657 15.0894C17.9799 14.4241 17.5925 13.5227 17.5925 12.5454V9.37661C17.5925 6.51724 15.5024 3.48493 12.3734 3.48493H12.1875H12.0016C8.8698 3.48493 6.78254 6.49471 6.78254 9.37661V12.5444C6.78254 13.4905 6.41517 14.4501 5.68296 15.1226L5.68103 15.1244L5.07613 15.6823C4.85942 15.8952 4.85797 16.268 5.05745 16.4771C5.16396 16.5886 5.25672 16.6189 5.35899 16.6189H19.016C19.1182 16.6189 19.211 16.5886 19.3175 16.4771C19.517 16.268 19.5156 15.8952 19.2989 15.6823ZM14.7777 19.2727H9.57268C9.57268 19.8204 9.72668 20.3305 9.99178 20.7577C10.4558 21.5055 11.2603 22 12.1752 22C13.0901 22 13.8946 21.5055 14.3586 20.7577C14.6238 20.3305 14.7777 19.8204 14.7777 19.2727Z" fill="#8C8C8C"/>
<circle cx="19" cy="5" r="4" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/note-bell.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M5.30942 12.5454C5.30942 13.1169 5.08635 13.6623 4.68977 14.0259L4.07012 14.5974C3.25219 15.3766 3.2274 16.7013 3.99576 17.5064C4.36755 17.8961 4.83848 18.1038 5.35899 18.1038H19.016C19.5365 18.1038 20.0075 17.8961 20.3792 17.5064C21.1476 16.7013 21.1228 15.3766 20.3049 14.5974L19.6852 14.0259C19.2886 13.6364 19.0656 13.1169 19.0656 12.5454V9.37661C19.0656 5.99999 16.587 2 12.3734 2H12.0016C7.788 2 5.30942 5.97402 5.30942 9.37661V12.5454ZM19.2989 15.6823L18.6737 15.1057L18.657 15.0894C17.9799 14.4241 17.5925 13.5227 17.5925 12.5454V9.37661C17.5925 6.51724 15.5024 3.48493 12.3734 3.48493H12.1875H12.0016C8.8698 3.48493 6.78254 6.49471 6.78254 9.37661V12.5444C6.78254 13.4905 6.41517 14.4501 5.68296 15.1226L5.68103 15.1244L5.07613 15.6823C4.85942 15.8952 4.85797 16.268 5.05745 16.4771C5.16396 16.5886 5.25672 16.6189 5.35899 16.6189H19.016C19.1182 16.6189 19.211 16.5886 19.3175 16.4771C19.517 16.268 19.5156 15.8952 19.2989 15.6823ZM14.7777 19.2727H9.57268C9.57268 19.8204 9.72668 20.3305 9.99178 20.7577C10.4558 21.5055 11.2603 22 12.1752 22C13.0901 22 13.8946 21.5055 14.3586 20.7577C14.6238 20.3305 14.7777 19.8204 14.7777 19.2727Z" fill="#8C8C8C"/>
</svg>

'''
'''--- assets/icons/note-check-double.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M10.8682 4.1396C10.6925 3.95347 10.4076 3.95347 10.2318 4.1396L4.84052 9.84951L2.76821 7.65474C2.59248 7.46861 2.30757 7.46862 2.13181 7.65474C1.95606 7.84085 1.95606 8.14259 2.13181 8.32872L4.52233 10.8605C4.698 11.0466 4.98312 11.0464 5.15872 10.8605L10.8682 4.8136C11.0439 4.62749 11.0439 4.32573 10.8682 4.1396Z" fill="#8C8C8C"/>
    <path d="M13.8682 4.1396C13.6925 3.95347 13.4076 3.95347 13.2318 4.1396L7.84052 9.84951L5.76821 7.65474C5.59248 7.46861 5.30757 7.46862 5.13181 7.65474C4.95606 7.84085 4.95606 8.14259 5.13181 8.32872L7.52233 10.8605C7.698 11.0466 7.98312 11.0464 8.15872 10.8605L13.8682 4.8136C14.0439 4.62749 14.0439 4.32573 13.8682 4.1396Z" fill="#8C8C8C"/>
</svg>

'''
'''--- assets/icons/note-check.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.8682 4.1396C12.6925 3.95347 12.4076 3.95347 12.2318 4.1396L6.84052 9.84951L4.76821 7.65474C4.59248 7.46861 4.30757 7.46863 4.13181 7.65474C3.95606 7.84085 3.95606 8.14259 4.13181 8.32872L6.52233 10.8605C6.698 11.0466 6.98312 11.0464 7.15872 10.8605L12.8682 4.8136C13.0439 4.62749 13.0439 4.32573 12.8682 4.1396Z" fill="#8C8C8C"/>
</svg>

'''
'''--- assets/icons/note-delete-default.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="8.7" fill="#FF9F69" stroke="white" stroke-width="1.4"/>
<path d="M8.67656 10.1305C8.66235 9.5685 9.11406 9.10522 9.67624 9.10522H14.1184C14.6831 9.10522 15.1358 9.5725 15.1179 10.1369L14.9309 16.0317C14.9138 16.5713 14.4714 17 13.9314 17H9.82528C9.28284 17 8.83931 16.5675 8.8256 16.0252L8.67656 10.1305Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M15.7778 7.83593C15.7778 7.68108 15.6561 7.55555 15.4992 7.55555H13.4025C13.3643 7.55555 13.3094 7.53168 13.286 7.50819L12.9752 7.19743C12.8662 7.08839 12.6512 7 12.5013 7H11.2765C11.1238 7 10.9132 7.08681 10.8026 7.19743L10.4918 7.50819C10.4656 7.53435 10.4107 7.55555 10.3752 7.55555H8.27859C8.12473 7.55555 8 7.67871 8 7.83593V7.98947C8 8.14432 8.12217 8.28421 8.27681 8.28421H15.5009C15.6538 8.28421 15.7778 8.1467 15.7778 7.98947C15.7778 7.98947 15.7778 7.99078 15.7778 7.83593Z" fill="white"/>
</svg>

'''
'''--- assets/icons/note-delete-disabled.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="8.7" fill="#D9D9D9" stroke="white" stroke-width="1.4"/>
<path d="M8.67656 10.1305C8.66235 9.5685 9.11406 9.10522 9.67624 9.10522H14.1184C14.6831 9.10522 15.1358 9.5725 15.1179 10.1369L14.9309 16.0317C14.9138 16.5713 14.4714 17 13.9314 17H9.82528C9.28284 17 8.83931 16.5675 8.8256 16.0252L8.67656 10.1305Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M15.7778 7.83593C15.7778 7.68108 15.6561 7.55555 15.4992 7.55555H13.4025C13.3643 7.55555 13.3094 7.53168 13.286 7.50819L12.9752 7.19743C12.8662 7.08839 12.6512 7 12.5013 7H11.2765C11.1238 7 10.9132 7.08681 10.8026 7.19743L10.4918 7.50819C10.4656 7.53435 10.4107 7.55555 10.3752 7.55555H8.27859C8.12473 7.55555 8 7.67871 8 7.83593V7.98947C8 8.14432 8.12217 8.28421 8.27681 8.28421H15.5009C15.6538 8.28421 15.7778 8.1467 15.7778 7.98947C15.7778 7.98947 15.7778 7.99078 15.7778 7.83593Z" fill="white"/>
</svg>

'''
'''--- assets/icons/note-delete-hover.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="8.7" fill="#FF5E03" stroke="white" stroke-width="1.4"/>
<path d="M8.67656 10.1305C8.66235 9.5685 9.11406 9.10522 9.67624 9.10522H14.1184C14.6831 9.10522 15.1358 9.5725 15.1179 10.1369L14.9309 16.0317C14.9138 16.5713 14.4714 17 13.9314 17H9.82528C9.28284 17 8.83931 16.5675 8.8256 16.0252L8.67656 10.1305Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M15.7778 7.83593C15.7778 7.68108 15.6561 7.55555 15.4992 7.55555H13.4025C13.3643 7.55555 13.3094 7.53168 13.286 7.50819L12.9752 7.19743C12.8662 7.08839 12.6512 7 12.5013 7H11.2765C11.1238 7 10.9132 7.08681 10.8026 7.19743L10.4918 7.50819C10.4656 7.53435 10.4107 7.55555 10.3752 7.55555H8.27859C8.12473 7.55555 8 7.67871 8 7.83593V7.98947C8 8.14432 8.12217 8.28421 8.27681 8.28421H15.5009C15.6538 8.28421 15.7778 8.1467 15.7778 7.98947C15.7778 7.98947 15.7778 7.99078 15.7778 7.83593Z" fill="white"/>
</svg>

'''
'''--- assets/icons/note-message-active-hover.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.02836 19.4102C3.73893 19.4048 3.58081 19.0704 3.76029 18.8433L3.25031 18.4402L3.76029 18.8433L4.88913 17.4148C5.30961 16.8827 5.34323 16.1768 5.07205 15.6095C4.48385 14.3791 4.15101 12.988 4.15101 11.5112C4.15101 8.99846 5.11078 7.05253 6.63651 5.72663C8.17247 4.39185 10.3249 3.65 12.7505 3.65C15.1761 3.65 17.3285 4.39185 18.8645 5.72663C20.3902 7.05253 21.35 8.99846 21.35 11.5112C21.35 14.0212 20.3984 15.904 18.8781 17.1995C17.3425 18.5081 15.1797 19.2554 12.7194 19.3732C11.2507 19.4435 10.6456 19.4725 10.0402 19.4845C9.6127 19.4929 9.18508 19.4929 8.45318 19.4929L4.02836 19.4102Z" stroke="#201F1F" stroke-width="1.3"/>
<circle cx="19" cy="5" r="4" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/note-message-active.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.02836 19.4102C3.73893 19.4048 3.58081 19.0704 3.76029 18.8433L3.25031 18.4402L3.76029 18.8433L4.88913 17.4148C5.30961 16.8827 5.34323 16.1768 5.07205 15.6095C4.48385 14.3791 4.15101 12.988 4.15101 11.5112C4.15101 8.99846 5.11078 7.05253 6.63651 5.72663C8.17247 4.39185 10.3249 3.65 12.7505 3.65C15.1761 3.65 17.3285 4.39185 18.8645 5.72663C20.3902 7.05253 21.35 8.99846 21.35 11.5112C21.35 14.0212 20.3984 15.904 18.8781 17.1995C17.3425 18.5081 15.1797 19.2554 12.7194 19.3732C11.2507 19.4435 10.6456 19.4725 10.0402 19.4845C9.6127 19.4929 9.18508 19.4929 8.45318 19.4929L4.02836 19.4102Z" stroke="#8C8C8C" stroke-width="1.3"/>
<circle cx="19" cy="5" r="4" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/note-message.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.02836 19.4102C3.73893 19.4048 3.58081 19.0704 3.76029 18.8433L3.25031 18.4402L3.76029 18.8433L4.88913 17.4148C5.30961 16.8827 5.34323 16.1768 5.07205 15.6095C4.48385 14.3791 4.15101 12.988 4.15101 11.5112C4.15101 8.99846 5.11078 7.05253 6.63651 5.72663C8.17247 4.39185 10.3249 3.65 12.7505 3.65C15.1761 3.65 17.3285 4.39185 18.8645 5.72663C20.3902 7.05253 21.35 8.99846 21.35 11.5112C21.35 14.0212 20.3984 15.904 18.8781 17.1995C17.3425 18.5081 15.1797 19.2554 12.7194 19.3732C11.2507 19.4435 10.6456 19.4725 10.0402 19.4845C9.6127 19.4929 9.18508 19.4929 8.45318 19.4929L4.02836 19.4102Z" stroke="#8C8C8C" stroke-width="1.3"/>
</svg>

'''
'''--- assets/icons/note-restore.color.svg ---
<svg width="21" height="18" viewBox="0 0 21 18" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M14 9C14 7.9 13.1 7 12 7C10.9 7 10 7.9 10 9C10 10.1 10.9 11 12 11C13.1 11 14 10.1 14 9ZM12 0C9.61305 0 7.32387 0.948211 5.63604 2.63604C3.94821 4.32387 3 6.61305 3 9H0L4 13L8 9H5C5 5.13 8.13 2 12 2C15.87 2 19 5.13 19 9C19.0014 10.2858 18.6483 11.5471 17.9796 12.6453C17.3109 13.7435 16.3524 14.6362 15.2095 15.2252C14.0666 15.8142 12.7834 16.0769 11.5009 15.9842C10.2185 15.8916 8.98639 15.4472 7.94 14.7L6.52 16.14C7.65464 17.0107 8.98046 17.5985 10.3876 17.8545C11.7947 18.1106 13.2426 18.0277 14.6112 17.6126C15.9799 17.1975 17.2299 16.4622 18.2577 15.4676C19.2855 14.473 20.0614 13.2478 20.5213 11.8935C20.9811 10.5392 21.1115 9.09486 20.9018 7.6801C20.692 6.26534 20.1481 4.92094 19.3151 3.75832C18.4822 2.59569 17.3841 1.64833 16.112 0.994737C14.8398 0.341144 13.4302 0.000145016 12 0Z" fill="#FF9F69"/>
</svg>

'''
'''--- assets/icons/note-sound-disabled.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.39488 9.23252H4.68503C4.3067 9.23252 4 9.53922 4 9.91755V14.0828C4 14.4608 4.3067 14.7675 4.68503 14.7675H7.39488C7.51698 14.7675 7.63679 14.8 7.74228 14.8619L12.0843 18.9044C12.5408 19.173 13.1164 18.8438 13.1164 18.3141V5.68591C13.1164 5.15618 12.5408 4.82702 12.0843 5.09562L7.74228 9.1381C7.63679 9.19996 7.51698 9.23252 7.39488 9.23252Z" fill="#BFBFBF"/>
</svg>

'''
'''--- assets/icons/note-sound-mute.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.39488 9.23252H4.68503C4.3067 9.23252 4 9.53922 4 9.91755V14.0828C4 14.4608 4.3067 14.7675 4.68503 14.7675H7.39488C7.51698 14.7675 7.63679 14.8 7.74228 14.8619L12.0843 18.9044C12.5408 19.173 13.1164 18.8438 13.1164 18.3141V5.68591C13.1164 5.15618 12.5408 4.82702 12.0843 5.09562L7.74228 9.1381C7.63679 9.19996 7.51698 9.23252 7.39488 9.23252Z" fill="#8C8C8C"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M16.8333 12.5782L15.0782 14.3333L14.5 13.7551L16.2551 12L14.5 10.2448L15.0782 9.66664L16.8333 11.4218L18.5885 9.66664L19.1667 10.2448L17.4115 12L19.1667 13.7551L18.5885 14.3333L16.8333 12.5782Z" fill="#8C8C8C"/>
</svg>

'''
'''--- assets/icons/note-sound-unmute.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.39488 9.23252H4.68503C4.3067 9.23252 4 9.53922 4 9.91755V14.0828C4 14.4608 4.3067 14.7675 4.68503 14.7675H7.39488C7.51698 14.7675 7.63679 14.8 7.74228 14.8619L12.0843 18.9044C12.5408 19.173 13.1164 18.8438 13.1164 18.3141V5.68591C13.1164 5.15618 12.5408 4.82702 12.0843 5.09562L7.74228 9.1381C7.63679 9.19996 7.51698 9.23252 7.39488 9.23252Z" fill="#251455"/>
<path d="M15.8829 15.9461C15.6509 16.0767 15.3725 15.9619 15.2611 15.6898C15.1498 15.4177 15.2476 15.0912 15.4797 14.9607C16.4425 14.4189 17.0679 13.2769 17.0679 12.0024C17.0679 10.7245 16.439 9.57996 15.4722 9.04004C15.2398 8.91027 15.1411 8.58416 15.2518 8.31166C15.3625 8.03915 15.6406 7.92345 15.8729 8.05322C17.1614 8.77274 18 10.299 18 12.0024C18 13.7013 17.166 15.2241 15.8829 15.9461ZM15.864 13.1395C15.73 13.3972 15.4432 13.4787 15.2234 13.3215C15.0037 13.1644 14.9342 12.8281 15.0682 12.5704C15.1565 12.4008 15.2037 12.2063 15.2037 12.0024C15.2037 11.8052 15.1595 11.6169 15.0767 11.4511C14.9466 11.1907 15.0212 10.8559 15.2432 10.7033C15.4653 10.5508 15.7508 10.6382 15.8809 10.8986C16.0469 11.2308 16.1358 11.6097 16.1358 12.0024C16.1358 12.4086 16.0408 12.7997 15.864 13.1395Z" fill="#251455"/>
</svg>

'''
'''--- assets/icons/note-status-alert.colors.svg ---
<svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M3.93 1H8.07L11 3.93V8.07L8.07 11H3.93L1 8.07V3.93L3.93 1V1Z" fill="#FF5E03" stroke="white" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M6 4V6" stroke="#201F1F" stroke-width="1.1" stroke-linecap="round" stroke-linejoin="round"/>
<circle cx="6" cy="8" r="0.5" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/note-status-approved.colors.svg ---
<svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="6" cy="6" r="5.5" fill="#CFF9EA" stroke="#19D992"/>
<path d="M8.6999 4.95361H3.75146L2.3999 8.55361H7.47914C7.58011 8.55361 8.6999 4.95361 8.6999 4.95361Z" fill="#0C422A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M4.69591 4.95352L5.24515 3.34161C5.36104 3.00149 5.78555 2.88858 6.0551 3.12617C6.46053 3.48353 6.69349 3.99742 6.69505 4.53786L6.69626 4.95352H9.59976C9.59976 4.95352 8.3354 8.55352 8.37899 8.55352H3.29976L4.65131 4.95352H4.69591Z" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/note-status-ending-soon.colors.svg ---
<svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M6 11C8.76142 11 11 8.76142 11 6C11 3.23858 8.76142 1 6 1C3.23858 1 1 3.23858 1 6C1 8.76142 3.23858 11 6 11Z" fill="#F8EE00" stroke="white" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M6 3V6L7.5 7.5" stroke="#201F1F" stroke-width="1.1" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/note-status-rejected.colors.svg ---
<svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="6" cy="6" r="5.5" fill="#FFF3EC" stroke="#FF8743"/>
<path d="M3.3001 7.27319L8.24854 7.27319L9.6001 3.67319L4.52086 3.67319C4.4199 3.67319 3.3001 7.27319 3.3001 7.27319Z" fill="#401700"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M7.32702 7.27324L6.85504 8.65839C6.73915 8.99851 6.31464 9.11142 6.04509 8.87383C5.63967 8.51647 5.40671 8.00258 5.40514 7.46214L5.40459 7.27324L2.40024 7.27324C2.40024 7.27324 3.6646 3.67324 3.62101 3.67324L8.70024 3.67324L7.34869 7.27324L7.32702 7.27324Z" fill="#FF8743"/>
</svg>

'''
'''--- assets/icons/note-status-success.colors.svg ---
<svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M6 11C8.76142 11 11 8.76142 11 6C11 3.23858 8.76142 1 6 1C3.23858 1 1 3.23858 1 6C1 8.76142 3.23858 11 6 11Z" fill="#19D992" stroke="white" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M8.5 4.5L5.40625 7.5L4 6.13636" stroke="#201F1F" stroke-width="1.1" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/note-type-add-member-default.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10.5" fill="white" stroke="#201F1F"/>
<path d="M14.8637 17.0455V15.8636C14.8637 15.2368 14.6146 14.6356 14.1714 14.1923C13.7281 13.749 13.1269 13.5 12.5 13.5H8.36364C7.73676 13.5 7.13556 13.749 6.69229 14.1923C6.24903 14.6356 6 15.2368 6 15.8636V17.0455" stroke="#201F1F" stroke-width="1.4" stroke-linecap="square" stroke-linejoin="round"/>
<path d="M10.4318 11.1363C11.7372 11.1363 12.7954 10.0781 12.7954 8.7727C12.7954 7.4673 11.7372 6.40906 10.4318 6.40906C9.12635 6.40906 8.06812 7.4673 8.06812 8.7727C8.06812 10.0781 9.12635 11.1363 10.4318 11.1363Z" stroke="#201F1F" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M17.2273 9.36353V12.909" stroke="#201F1F" stroke-width="1.4" stroke-linecap="square" stroke-linejoin="round"/>
<path d="M19.0001 11.1364H15.4546" stroke="#201F1F" stroke-width="1.4" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/note-type-add-member.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10" fill="white"/>
<path d="M14.8637 17.0455V15.8636C14.8637 15.2368 14.6146 14.6356 14.1714 14.1923C13.7281 13.749 13.1269 13.5 12.5 13.5H8.36364C7.73676 13.5 7.13556 13.749 6.69229 14.1923C6.24903 14.6356 6 15.2368 6 15.8636V17.0455" stroke="#201F1F" stroke-width="1.4" stroke-linecap="square" stroke-linejoin="round"/>
<path d="M10.4318 11.1363C11.7372 11.1363 12.7954 10.0781 12.7954 8.7727C12.7954 7.4673 11.7372 6.40906 10.4318 6.40906C9.12635 6.40906 8.06812 7.4673 8.06812 8.7727C8.06812 10.0781 9.12635 11.1363 10.4318 11.1363Z" stroke="#201F1F" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M17.2273 9.36353V12.909" stroke="#201F1F" stroke-width="1.4" stroke-linecap="square" stroke-linejoin="round"/>
<path d="M19.0001 11.1364H15.4546" stroke="#201F1F" stroke-width="1.4" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/note-type-bounty-default.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10.5" fill="white" stroke="#201F1F"/>
<path d="M13.8063 16.1539C13.8993 16.0678 13.9518 15.9507 13.9518 15.8284L13.9521 12.9732L16.5344 10.5892C18.0076 9.22987 18.0006 6.56846 18 6.45594C17.9976 6.20486 17.7778 6.00221 17.5061 6.00006C17.3839 5.99914 14.501 5.9927 13.0279 7.35177L10.4449 9.73664H7.35241C7.22057 9.73664 7.09371 9.78508 7.00006 9.87092L5.14599 11.5826C5.02046 11.6984 4.97131 11.8668 5.01648 12.0249C5.03906 12.105 5.08455 12.1764 5.14599 12.2331C5.2061 12.2883 5.28082 12.3294 5.36551 12.3508L7.82199 12.9787L10.4389 15.3946L11.1197 17.6629C11.1429 17.7408 11.1878 17.8098 11.2479 17.865C11.309 17.9217 11.3867 17.9634 11.4733 17.9848C11.6447 18.0265 11.827 17.9808 11.9522 17.865L13.8063 16.1539ZM7.93524 12.0535L6.4551 11.6754L7.55898 10.6564H9.44858L7.93524 12.0535ZM10.8845 14.5049L8.78705 12.5682L9.24767 12.1436L11.3448 14.0799L10.8845 14.5049ZM12.0489 13.4297L9.9517 11.4933L13.7326 8.00233C14.5844 7.21656 16.1635 7.00073 16.9801 6.94156C16.916 7.69544 16.6822 9.15292 15.8304 9.93868L12.0489 13.4297ZM11.4421 15.2906L12.3989 14.4074C12.3996 14.4064 12.4009 14.4058 12.4015 14.4052C12.4022 14.4046 12.4029 14.4037 12.4035 14.4028L12.9561 13.8929V15.6377L11.8526 16.6567L11.4421 15.2906ZM9.09856 15.1714C8.82358 15.164 8.59444 15.3639 8.5868 15.618C8.57983 15.8274 8.43205 16.1116 8.23412 16.2944C7.87778 16.6236 7.0708 16.6114 6.56635 16.5537C6.50325 16.0886 6.48964 15.3467 6.8483 15.0156C7.04656 14.8326 7.35474 14.6959 7.58123 14.69C7.85587 14.6836 8.07272 14.4718 8.06542 14.2179C8.05811 13.9644 7.82897 13.7642 7.55399 13.7709C7.07578 13.7829 6.52218 14.0162 6.14393 14.3651C5.22603 15.2124 5.60362 16.8686 5.64978 17.0547C5.67103 17.1405 5.71819 17.2172 5.78328 17.2773C5.84804 17.3373 5.93106 17.3809 6.02471 17.4005C6.22596 17.4431 8.02058 17.792 8.93882 16.9443C9.31641 16.5957 9.56913 16.0853 9.58241 15.6435C9.59038 15.3896 9.37353 15.1781 9.09856 15.1714Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/note-type-bounty.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10" fill="white"/>
<path d="M13.8063 16.1539C13.8993 16.0678 13.9518 15.9507 13.9518 15.8284L13.9521 12.9732L16.5344 10.5892C18.0076 9.22987 18.0006 6.56846 18 6.45594C17.9976 6.20486 17.7778 6.00221 17.5061 6.00006C17.3839 5.99914 14.501 5.9927 13.0279 7.35177L10.4449 9.73664H7.35241C7.22057 9.73664 7.09371 9.78508 7.00006 9.87092L5.14599 11.5826C5.02046 11.6984 4.97131 11.8668 5.01648 12.0249C5.03906 12.105 5.08455 12.1764 5.14599 12.2331C5.2061 12.2883 5.28082 12.3294 5.36551 12.3508L7.82199 12.9787L10.4389 15.3946L11.1197 17.6629C11.1429 17.7408 11.1878 17.8098 11.2479 17.865C11.309 17.9217 11.3867 17.9634 11.4733 17.9848C11.6447 18.0265 11.827 17.9808 11.9522 17.865L13.8063 16.1539ZM7.93524 12.0535L6.4551 11.6754L7.55898 10.6564H9.44858L7.93524 12.0535ZM10.8845 14.5049L8.78705 12.5682L9.24767 12.1436L11.3448 14.0799L10.8845 14.5049ZM12.0489 13.4297L9.9517 11.4933L13.7326 8.00233C14.5844 7.21656 16.1635 7.00073 16.9801 6.94156C16.916 7.69544 16.6822 9.15292 15.8304 9.93868L12.0489 13.4297ZM11.4421 15.2906L12.3989 14.4074C12.3996 14.4064 12.4009 14.4058 12.4015 14.4052C12.4022 14.4046 12.4029 14.4037 12.4035 14.4028L12.9561 13.8929V15.6377L11.8526 16.6567L11.4421 15.2906ZM9.09856 15.1714C8.82358 15.164 8.59444 15.3639 8.5868 15.618C8.57983 15.8274 8.43205 16.1116 8.23412 16.2944C7.87778 16.6236 7.0708 16.6114 6.56635 16.5537C6.50325 16.0886 6.48964 15.3467 6.8483 15.0156C7.04656 14.8326 7.35474 14.6959 7.58123 14.69C7.85587 14.6836 8.07272 14.4718 8.06542 14.2179C8.05811 13.9644 7.82897 13.7642 7.55399 13.7709C7.07578 13.7829 6.52218 14.0162 6.14393 14.3651C5.22603 15.2124 5.60362 16.8686 5.64978 17.0547C5.67103 17.1405 5.71819 17.2172 5.78328 17.2773C5.84804 17.3373 5.93106 17.3809 6.02471 17.4005C6.22596 17.4431 8.02058 17.792 8.93882 16.9443C9.31641 16.5957 9.56913 16.0853 9.58241 15.6435C9.59038 15.3896 9.37353 15.1781 9.09856 15.1714Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/note-type-comment-like.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="12" cy="12" r="10.5" fill="white" stroke="#201F1F"/>
    <path d="M17.8286 8.90812C17.6386 8.46803 17.3645 8.06922 17.0218 7.73402C16.6788 7.39783 16.2745 7.13066 15.8307 6.94704C15.3705 6.75589 14.877 6.65804 14.3787 6.65919C13.6796 6.65919 12.9975 6.85062 12.4048 7.2122C12.263 7.2987 12.1283 7.39371 12.0007 7.49722C11.8731 7.39371 11.7384 7.2987 11.5966 7.2122C11.0039 6.85062 10.3218 6.65919 9.62274 6.65919C9.11935 6.65919 8.63157 6.75561 8.17072 6.94704C7.72547 7.13138 7.32418 7.39654 6.97961 7.73402C6.63645 8.06884 6.36233 8.46774 6.17278 8.90812C5.97568 9.36613 5.875 9.8525 5.875 10.353C5.875 10.8252 5.97142 11.3173 6.16285 11.8178C6.32308 12.2361 6.5528 12.67 6.84632 13.1082C7.31142 13.8016 7.95093 14.5248 8.745 15.2579C10.0609 16.4731 11.364 17.3125 11.4193 17.3466L11.7554 17.5621C11.9043 17.6571 12.0957 17.6571 12.2446 17.5621L12.5807 17.3466C12.636 17.3111 13.9377 16.4731 15.255 15.2579C16.0491 14.5248 16.6886 13.8016 17.1537 13.1082C17.4472 12.67 17.6783 12.2361 17.8371 11.8178C18.0286 11.3173 18.125 10.8252 18.125 10.353C18.1264 9.8525 18.0257 9.36613 17.8286 8.90812Z" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/note-type-dao-config-default.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10.5" fill="white" stroke="#201F1F"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M18 5.43335L8.52046 8.82118V10.7005L6 11.6013V19.0327L15.4796 15.6449V13.7655L18 12.8647V5.43335Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/note-type-dao-config.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M18 5.43338L8.52046 8.82121V10.7006L6 11.6013V19.0327L15.4796 15.6449V13.7655L18 12.8648V5.43338Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/note-type-governance-default.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10.5" fill="white" stroke="#201F1F"/>
<path d="M14.7273 16.8183V15.7274C14.7273 15.1487 14.4974 14.5937 14.0882 14.1846C13.6791 13.7754 13.1241 13.5455 12.5455 13.5455H8.18182C7.60316 13.5455 7.04821 13.7754 6.63904 14.1846C6.22987 14.5937 6 15.1487 6 15.7274V16.8183" stroke="#201F1F" stroke-width="1.4" stroke-linecap="square"/>
<path d="M10.3637 11.3636C11.5687 11.3636 12.5455 10.3868 12.5455 9.18182C12.5455 7.97683 11.5687 7 10.3637 7C9.15872 7 8.18188 7.97683 8.18188 9.18182C8.18188 10.3868 9.15872 11.3636 10.3637 11.3636Z" stroke="#201F1F" stroke-width="1.4" stroke-linecap="square"/>
<path d="M18.0001 16.8182V15.7272C17.9998 15.2438 17.8389 14.7742 17.5427 14.3921C17.2465 14.0101 16.8318 13.7372 16.3638 13.6163" stroke="#201F1F" stroke-width="1.4" stroke-linecap="round"/>
<path d="M14.1819 7.07092C14.6512 7.19109 15.0672 7.46403 15.3642 7.84673C15.6613 8.22942 15.8225 8.7001 15.8225 9.18456C15.8225 9.66902 15.6613 10.1397 15.3642 10.5224C15.0672 10.9051 14.6512 11.178 14.1819 11.2982" stroke="#201F1F" stroke-width="1.4" stroke-linecap="round"/>
</svg>

'''
'''--- assets/icons/note-type-governance.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10" fill="white"/>
<path d="M14.7273 16.8183V15.7274C14.7273 15.1487 14.4974 14.5937 14.0882 14.1846C13.6791 13.7754 13.1241 13.5455 12.5455 13.5455H8.18182C7.60316 13.5455 7.04821 13.7754 6.63904 14.1846C6.22987 14.5937 6 15.1487 6 15.7274V16.8183" stroke="#201F1F" stroke-width="1.4" stroke-linecap="square"/>
<path d="M10.3637 11.3636C11.5687 11.3636 12.5455 10.3868 12.5455 9.18182C12.5455 7.97683 11.5687 7 10.3637 7C9.15872 7 8.18188 7.97683 8.18188 9.18182C8.18188 10.3868 9.15872 11.3636 10.3637 11.3636Z" stroke="#201F1F" stroke-width="1.4" stroke-linecap="square"/>
<path d="M18.0001 16.8182V15.7272C17.9998 15.2438 17.8389 14.7742 17.5427 14.3921C17.2465 14.0101 16.8318 13.7372 16.3638 13.6163" stroke="#201F1F" stroke-width="1.4" stroke-linecap="round"/>
<path d="M14.1819 7.07092C14.6512 7.19109 15.0672 7.46403 15.3642 7.84673C15.6613 8.22942 15.8225 8.7001 15.8225 9.18456C15.8225 9.66902 15.6613 10.1397 15.3642 10.5224C15.0672 10.9051 14.6512 11.178 14.1819 11.2982" stroke="#201F1F" stroke-width="1.4" stroke-linecap="round"/>
</svg>

'''
'''--- assets/icons/note-type-polls-default.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10.5" fill="white" stroke="#201F1F"/>
<path d="M12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20Z" stroke="#201F1F" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M9 9.66915C9.20163 9.11262 9.59962 8.64334 10.1235 8.34442C10.6473 8.0455 11.2632 7.93623 11.8621 8.03596C12.4609 8.1357 13.0041 8.43801 13.3954 8.88934C13.7867 9.34067 14.0009 9.91191 14 10.5019C14 12.1673 11.4271 13 11.4271 13" stroke="#201F1F" stroke-width="2" stroke-linejoin="round"/>
<path d="M12 16H12.01" stroke="#201F1F" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/note-type-polls.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10" fill="white"/>
<path d="M12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20Z" stroke="#201F1F" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M9 9.66915C9.20163 9.11262 9.59962 8.64334 10.1235 8.34442C10.6473 8.0455 11.2632 7.93623 11.8621 8.03596C12.4609 8.1357 13.0041 8.43801 13.3954 8.88934C13.7867 9.34067 14.0009 9.91191 14 10.5019C14 12.1673 11.4271 13 11.4271 13" stroke="#201F1F" stroke-width="2" stroke-linejoin="round"/>
<path d="M12 16H12.01" stroke="#201F1F" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/note-type-remove-member-default.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10.5" fill="white" stroke="#201F1F"/>
<path d="M19 11.7273H15.4546" stroke="#201F1F" stroke-width="1.4" stroke-linecap="square" stroke-linejoin="round"/>
<path d="M10.4318 11.7273C11.7372 11.7273 12.7954 10.669 12.7954 9.36364C12.7954 8.05824 11.7372 7 10.4318 7C9.12635 7 8.06812 8.05824 8.06812 9.36364C8.06812 10.669 9.12635 11.7273 10.4318 11.7273Z" stroke="#201F1F" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M14.8636 17.6364V16.4546C14.8636 15.8277 14.6146 15.2265 14.1713 14.7832C13.7281 14.34 13.1269 14.0909 12.5 14.0909H8.36364C7.73676 14.0909 7.13556 14.34 6.69229 14.7832C6.24903 15.2265 6 15.8277 6 16.4546V17.6364" stroke="#201F1F" stroke-width="1.4" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/note-type-remove-member.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10" fill="white"/>
<path d="M19 11.7273H15.4546" stroke="#201F1F" stroke-width="1.4" stroke-linecap="square" stroke-linejoin="round"/>
<path d="M10.4318 11.7273C11.7372 11.7273 12.7954 10.669 12.7954 9.36364C12.7954 8.05824 11.7372 7 10.4318 7C9.12635 7 8.06812 8.05824 8.06812 9.36364C8.06812 10.669 9.12635 11.7273 10.4318 11.7273Z" stroke="#201F1F" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M14.8636 17.6364V16.4546C14.8636 15.8277 14.6146 15.2265 14.1713 14.7832C13.7281 14.34 13.1269 14.0909 12.5 14.0909H8.36364C7.73676 14.0909 7.13556 14.34 6.69229 14.7832C6.24903 15.2265 6 15.8277 6 16.4546V17.6364" stroke="#201F1F" stroke-width="1.4" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/note-type-transfer-default.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10.5" fill="white" stroke="#201F1F"/>
<path d="M6.20444 13.5529C6.54629 14.8287 7.29957 15.9561 8.34743 16.7601C9.3953 17.5642 10.6792 18 12 18C13.3208 18 14.6047 17.5642 15.6526 16.7601C16.7004 15.9561 17.4537 14.8287 17.7956 13.5529" stroke="#201F1F" stroke-width="1.4"/>
<path d="M15.5702 9.66366L16.1228 10.0934L16.9823 8.98832L16.4298 8.55856L15.5702 9.66366ZM12 6L12.4298 5.44745L12 5.1132L11.5702 5.44745L12 6ZM7.57024 8.55856L7.0177 8.98832L7.87721 10.0934L8.42976 9.66366L7.57024 8.55856ZM11.3 13L11.3 13.7L12.7 13.7L12.7 13L11.3 13ZM16.4298 8.55856L12.4298 5.44745L11.5702 6.55255L15.5702 9.66366L16.4298 8.55856ZM11.5702 5.44745L7.57024 8.55856L8.42976 9.66366L12.4298 6.55255L11.5702 5.44745ZM11.3 6L11.3 13L12.7 13L12.7 6L11.3 6Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/note-type-transfer.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="12" cy="12" r="10" fill="white"/>
<path d="M6.20444 13.5529C6.54629 14.8287 7.29957 15.9561 8.34743 16.7601C9.3953 17.5642 10.6792 18 12 18C13.3208 18 14.6047 17.5642 15.6526 16.7601C16.7004 15.9561 17.4537 14.8287 17.7956 13.5529" stroke="#201F1F" stroke-width="1.4"/>
<path d="M15.5702 9.66366L16.1228 10.0934L16.9823 8.98832L16.4298 8.55856L15.5702 9.66366ZM12 6L12.4298 5.44745L12 5.1132L11.5702 5.44745L12 6ZM7.57024 8.55856L7.0177 8.98832L7.87721 10.0934L8.42976 9.66366L7.57024 8.55856ZM11.3 13L11.3 13.7L12.7 13.7L12.7 13L11.3 13ZM16.4298 8.55856L12.4298 5.44745L11.5702 6.55255L15.5702 9.66366L16.4298 8.55856ZM11.5702 5.44745L7.57024 8.55856L8.42976 9.66366L12.4298 6.55255L11.5702 5.44745ZM11.3 6L11.3 13L12.7 13L12.7 6L11.3 6Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/organization.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M4 6C4 5.81738 4.04883 5.64624 4.13379 5.4989C4.20898 5.36975 4.31152 5.25891 4.43457 5.17468C4.5957 5.06445 4.79004 5 5 5H19C19.5527 5 20 5.44775 20 6V17C20 17.5522 19.5527 18 19 18H5C4.44727 18 4 17.5522 4 17V6ZM5 7C5 6.44775 5.44727 6 6 6H18C18.5527 6 19 6.44775 19 7V12C19 12.5522 18.5527 13 18 13H6C5.44727 13 5 12.5522 5 12V7ZM9.5 16C9.22363 16 9 16.2239 9 16.5C9 16.7761 9.22363 17 9.5 17H18.5C18.7764 17 19 16.7761 19 16.5C19 16.2239 18.7764 16 18.5 16H9.5ZM9 14.5C9 14.2239 9.22363 14 9.5 14H18.5C18.7764 14 19 14.2239 19 14.5C19 14.7761 18.7764 15 18.5 15H9.5C9.22363 15 9 14.7761 9 14.5ZM8 15.5C8 16.3284 7.32812 17 6.5 17C5.67188 17 5 16.3284 5 15.5C5 14.6716 5.67188 14 6.5 14C7.32812 14 8 14.6716 8 15.5Z" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/paperAirplane.svg ---
<svg width="16" height="14" viewBox="0 0 16 14" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M1.5918 1.71245L2.38095 6.25004H7.25013C7.66434 6.25004 8.00013 6.58582 8.00013 7.00004C8.00013 7.41425 7.66434 7.75004 7.25013 7.75004H2.38095L1.5918 12.2876L13.9295 7.00004L1.5918 1.71245ZM0.988869 7.00004L0.0637969 1.68087C-0.0109877 1.25086 0.128154 0.811352 0.436783 0.502722C0.824568 0.114942 1.40938 0.00231168 1.91345 0.218342L15.3158 5.9622C15.7309 6.14013 16.0001 6.54835 16.0001 7.00004C16.0001 7.45172 15.7309 7.85995 15.3158 8.03788L1.91345 13.7817C1.40938 13.9978 0.824568 13.8851 0.436783 13.4974C0.128154 13.1887 -0.0109879 12.7492 0.0637969 12.3192L0.988869 7.00004Z" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/pencil.svg ---
<svg width="19" height="18" viewBox="0 0 19 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M14.7614 1.00098C14.4023 1.00185 14.047 1.0738 13.7159 1.21269C13.3848 1.35157 13.0845 1.55464 12.8323 1.81018L2.33521 12.3066L2.29406 12.5144L1.56783 16.1654L1.36072 17.1399L2.33588 16.9328L5.98692 16.2066L6.19404 16.1648L16.6911 5.66834C16.9473 5.41657 17.1508 5.11628 17.2897 4.78502C17.4287 4.45375 17.5002 4.09814 17.5002 3.73893C17.5002 3.37972 17.4287 3.0241 17.2897 2.69284C17.1508 2.36157 16.9473 2.06129 16.6911 1.80952C16.4388 1.55402 16.1383 1.35103 15.8071 1.21225C15.4759 1.07348 15.1205 1.00167 14.7614 1.00098ZM14.7614 2.26623C15.096 2.26623 15.4332 2.41891 15.7571 2.74352C16.403 3.38876 16.403 4.0891 15.7571 4.735L15.2805 5.19105L13.3089 3.22015L13.7656 2.74352C14.0903 2.41891 14.4268 2.26623 14.7614 2.26623ZM12.3763 4.15415L14.3465 6.12505L6.31884 14.152C5.88546 13.3041 5.19549 12.6146 4.34727 12.1818L12.3763 4.15415ZM3.49758 13.2612C3.89045 13.4192 4.24733 13.6551 4.54678 13.9545C4.84623 14.254 5.08206 14.6109 5.24012 15.0037L3.06144 15.4392L3.49758 13.2612Z" fill="#8C8C8C"/>
</svg>

'''
'''--- assets/icons/plus.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <line x1="12" y1="6" x2="12" y2="18" stroke="#434343" stroke-width="2"/>
    <line x1="18" y1="12" x2="6" y2="12" stroke="#434343" stroke-width="2"/>
</svg>

'''
'''--- assets/icons/polls.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M4.80031 5.02535C4.34342 5.14307 4 5.65685 4 6.27274V12.6364C4 13.3392 4.44726 13.9092 5 13.9092H12.8612C12.3977 13.2953 12.1215 12.5228 12.1215 11.6836C12.1215 9.68471 13.6885 8.06428 15.6216 8.06428C16.5399 8.06428 17.3757 8.4017 18 9V6.27275C18 5.74561 17.7484 5.29327 17.3894 5.10003C17.2698 5.03562 17.1382 5 17 5L4.99996 5.00001C4.98269 5.00001 4.96554 5.00056 4.94849 5.00166C4.89802 5.00492 4.84853 5.01292 4.80031 5.02535ZM13.1055 15.0664L8.35938 15C8.05859 15 8 15.172 8 15.5C8 15.8514 7.92286 16.4545 8.19922 16.4545H10.7109C10.7454 16.4061 11.01 16.0501 11.0469 16.0039C11.5625 15.3574 12.3761 15.0664 13.1055 15.0664ZM8.00001 18.3636C8.00001 18.1001 8 17.5 8 17.5C8.05981 17.4679 8.43092 17.5 8.5 17.5L10.2406 17.5276C10.1592 17.8558 10.1216 18.4 10.1216 18.75V19H8.5C8.22364 19 8.00001 18.7151 8.00001 18.3636ZM5.48061 15.1821L5.49996 15.1819C6.32809 15.1819 6.99996 16.0367 6.99996 17.0909C6.99996 17.8037 6.69287 18.4253 6.23801 18.7532C6.02008 18.9103 5.76823 19 5.5 19C4.67188 19 4 18.1452 4 17.0909C4 16.1685 4.51441 15.3987 5.19778 15.2207C5.28931 15.1969 5.38385 15.1837 5.48061 15.1821Z" fill="#13A36E"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M3 5.23077C3 5.00601 3.04883 4.79537 3.13379 4.61403C3.20899 4.45508 3.31152 4.31866 3.43457 4.215C3.5957 4.07933 3.79004 4 4 4H18C18.5528 4 19 4.55108 19 5.23077V10.7765C18.8261 10.1344 18.5 9.5 18 9V6.46154C18 5.78186 17.5527 5.23077 17 5.23077H5C4.44726 5.23077 4 5.78186 4 6.46154V12.6154C4 13.2951 4.44726 13.8462 5 13.8462H12.8613C13.3238 14.4387 13.973 14.8784 14.7205 15.077H8.49999C8.22363 15.077 8 15.3525 8 15.6923C8 16.0321 8.22363 16.3077 8.49999 16.3077H10.82C10.5563 16.6656 10.3614 17.086 10.2454 17.5384H8.49999C8.22363 17.5384 8 17.8141 8 18.1538C8 18.4937 8.22363 18.7692 8.49999 18.7692H10.1217V20H4C3.44727 20 3 19.4489 3 18.7692V5.23077ZM16.5227 15.077C17.7259 14.7573 18.6746 13.8125 19 12.6115V15.077C18.8033 15.077 18.6349 15.077 18.4217 15.077H17.48C17.48 15.077 17.6097 15.077 17.5 15.077H16.5227ZM7 17C7 18.0196 6.32813 18.7692 5.5 18.7692C4.67188 18.7692 4 18.0196 4 17C4 15.9805 4.67188 15.1941 5.5 15.1941C6.32813 15.1941 7 15.9805 7 17Z" fill="#19D992"/>
    <path d="M20.2028 20.011V18.6764C20.2028 17.9684 19.9604 17.2894 19.5289 16.7889C19.0975 16.2883 18.5123 16.007 17.9021 16.007H13.3007C12.6905 16.007 12.1053 16.2883 11.6739 16.7889C11.2424 17.2894 11 17.9684 11 18.6764V20.011" fill="#19D992"/>
    <path d="M15.6016 14.005C16.9878 14.005 18.1115 12.8846 18.1115 11.5025C18.1115 10.1204 16.9878 9 15.6016 9C14.2155 9 13.0918 10.1204 13.0918 11.5025C13.0918 12.8846 14.2155 14.005 15.6016 14.005Z" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/proposal-add-member.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M16 21V19C16 17.9391 15.5786 16.9217 14.8284 16.1716C14.0783 15.4214 13.0609 15 12 15H5C3.93913 15 2.92172 15.4214 2.17157 16.1716C1.42143 16.9217 1 17.9391 1 19V21"
    stroke="#381E80" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
  <path
    d="M8.5 11C10.7091 11 12.5 9.20914 12.5 7C12.5 4.79086 10.7091 3 8.5 3C6.29086 3 4.5 4.79086 4.5 7C4.5 9.20914 6.29086 11 8.5 11Z"
    stroke="#381E80" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M20 8V14" stroke="#381E80" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
  <path d="M23 11H17" stroke="#381E80" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/proposal-bounty.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<svg width="700pt" height="700pt" version="1.1" viewBox="0 0 700 700" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <g>
    <path d="m612.5 122.5c0-2.3203-0.92188-4.5469-2.5625-6.1875s-3.8672-2.5625-6.1875-2.5625h-148.75v-8.75c-0.019531-16.238-6.4766-31.809-17.961-43.289-11.48-11.484-27.051-17.941-43.289-17.961h-87.5c-16.238 0.019531-31.809 6.4766-43.289 17.961-11.484 11.48-17.941 27.051-17.961 43.289v8.75h-148.75c-4.832 0-8.75 3.918-8.75 8.75v350c0.011719 11.598 4.625 22.719 12.828 30.922s19.324 12.816 30.922 12.828h437.5c11.598-0.011719 22.719-4.625 30.922-12.828s12.816-19.324 12.828-30.922zm-350-17.5c0.011719-11.598 4.625-22.719 12.828-30.922s19.324-12.816 30.922-12.828h87.5c11.598 0.011719 22.719 4.625 30.922 12.828s12.816 19.324 12.828 30.922v8.75h-17.5v-8.75c-0.007812-6.9609-2.7773-13.633-7.6992-18.551-4.918-4.9219-11.59-7.6914-18.551-7.6992h-87.5c-6.9609 0.007812-13.633 2.7773-18.551 7.6992-4.9219 4.918-7.6914 11.59-7.6992 18.551v8.75h-17.5zm140 8.75h-105v-8.75c0.003906-4.832 3.918-8.7461 8.75-8.75h87.5c4.832 0.003906 8.7461 3.918 8.75 8.75zm192.5 17.5v32.223l-100.79 142.78h-91.715v-17.5c0-2.3203-0.92188-4.5469-2.5625-6.1875s-3.8672-2.5625-6.1875-2.5625h-87.5c-4.832 0-8.75 3.918-8.75 8.75v17.5h-91.715l-100.79-142.78v-32.223zm-455 112.15 54.102 76.645c1.6406 2.3203 4.3047 3.7031 7.1484 3.7031h96.25v17.5c0 2.3203 0.92188 4.5469 2.5625 6.1875s3.8672 2.5625 6.1875 2.5625h87.5c2.3203 0 4.5469-0.92188 6.1875-2.5625s2.5625-3.8672 2.5625-6.1875v-17.5h96.25c2.8438 0 5.5078-1.3828 7.1484-3.7031l54.102-76.645v220.35h-420zm245 54.098v35h-26.25v-35zm-43.75 35h-26.25v-35h26.25zm227.5 166.25h-437.5c-6.9609-0.007812-13.633-2.7773-18.551-7.6992-4.9219-4.918-7.6914-11.59-7.6992-18.551v-278.68l17.5 24.793v253.89c0 2.3203 0.92188 4.5469 2.5625 6.1875s3.8672 2.5625 6.1875 2.5625h437.5c2.3203 0 4.5469-0.92188 6.1875-2.5625s2.5625-3.8672 2.5625-6.1875v-253.89l17.5-24.793v278.68c-0.007812 6.9609-2.7773 13.633-7.6992 18.551-4.918 4.9219-11.59 7.6914-18.551 7.6992z"/>
  </g>
</svg>

'''
'''--- assets/icons/proposal-create-group.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M17 21V19C17 17.9391 16.5786 16.9217 15.8284 16.1716C15.0783 15.4214 14.0609 15 13 15H5C3.93913 15 2.92172 15.4214 2.17157 16.1716C1.42143 16.9217 1 17.9391 1 19V21"
    stroke="#381E80" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M9 11C11.2091 11 13 9.20914 13 7C13 4.79086 11.2091 3 9 3C6.79086 3 5 4.79086 5 7C5 9.20914 6.79086 11 9 11Z"
        stroke="#381E80" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path
    d="M23 20.9999V18.9999C22.9993 18.1136 22.7044 17.2527 22.1614 16.5522C21.6184 15.8517 20.8581 15.3515 20 15.1299"
    stroke="#381E80" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path
    d="M16 3.12988C16.8604 3.35018 17.623 3.85058 18.1676 4.55219C18.7122 5.2538 19.0078 6.11671 19.0078 7.00488C19.0078 7.89305 18.7122 8.75596 18.1676 9.45757C17.623 10.1592 16.8604 10.6596 16 10.8799"
    stroke="#381E80" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/proposal-function-call.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M16 18L22 12L16 6" stroke="#381E80" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M8 6L2 12L8 18" stroke="#381E80" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/proposal-governance.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd"
        d="M21.0007 1.80005L6.78076 6.88201V9.7013L3 11.0525V22.2L17.22 17.1181V14.2988L21.0007 12.9476V1.80005Z"
        fill="#381E80"/>
</svg>

'''
'''--- assets/icons/proposal-near-function-call.colors.svg ---
<svg width="244" height="100" viewBox="0 0 244 100" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_13137_120278)">
<rect x="40.248" y="29.1091" width="154.67" height="35.392" rx="3.96015" transform="rotate(-2.61159 40.248 29.1091)" fill="#201F1F"/>
<line y1="-2.97011" x2="130.745" y2="-2.97011" transform="matrix(0.999414 -0.034231 0.0656687 0.997841 51.8027 49.1899)" stroke="white" stroke-width="5.94023"/>
<line y1="-2.97011" x2="83.9521" y2="-2.97011" transform="matrix(0.999414 -0.0342311 0.0656686 0.997841 52.3516 55.7083)" stroke="white" stroke-width="5.94023"/>
<path d="M54.8983 28.3395C68.3312 21.5868 97.9235 21.1754 130.868 28.3329C173.938 37.6904 206.428 56.4415 203.435 70.2146C200.443 83.9878 145.104 85.4218 86.2144 70.9087L77.3752 68.2144" stroke="#201F1F" stroke-width="0.214062"/>
<ellipse cx="110.175" cy="74.7937" rx="6.81107" ry="6.81107" transform="rotate(-2.61158 110.175 74.7937)" fill="#CFF9EA"/>
<path d="M108.028 71.7628C108.055 71.6504 108.125 71.5531 108.224 71.4925C108.322 71.4318 108.44 71.4127 108.553 71.4394L113.64 72.6459C113.753 72.6725 113.85 72.7428 113.911 72.8411C113.971 72.9395 113.99 73.0579 113.964 73.1703L113.763 74.0183C113.736 74.1307 113.666 74.2279 113.567 74.2886C113.469 74.3492 113.351 74.3683 113.238 74.3417L108.151 73.1352C108.038 73.1085 107.941 73.0383 107.88 72.9399C107.82 72.8416 107.801 72.7232 107.827 72.6107L108.028 71.7628ZM107.425 74.3065C107.452 74.1941 107.522 74.0969 107.62 74.0362C107.719 73.9755 107.837 73.9565 107.95 73.9831L110.493 74.5863C110.606 74.613 110.703 74.6832 110.764 74.7816C110.824 74.88 110.843 74.9984 110.817 75.1108L110.214 77.6545C110.187 77.767 110.117 77.8642 110.018 77.9249C109.92 77.9855 109.801 78.0046 109.689 77.978L107.145 77.3747C107.033 77.3481 106.936 77.2778 106.875 77.1795C106.814 77.0811 106.795 76.9627 106.822 76.8502L107.425 74.3065ZM112.189 74.9885C112.077 74.9618 111.958 74.9809 111.86 75.0416C111.762 75.1022 111.691 75.1995 111.665 75.3119L111.061 77.8556C111.035 77.9681 111.054 78.0865 111.115 78.1848C111.175 78.2832 111.272 78.3534 111.385 78.3801L112.233 78.5812C112.345 78.6079 112.464 78.5888 112.562 78.5281C112.66 78.4675 112.731 78.3702 112.757 78.2578L113.36 75.7141C113.387 75.6016 113.368 75.4832 113.307 75.3848C113.247 75.2865 113.149 75.2162 113.037 75.1896L112.189 74.9885Z" fill="#19D992"/>
<circle cx="85.1992" cy="22.3772" r="7.49218" fill="#FFF3EC"/>
<g clip-path="url(#clip1_13137_120278)">
<path d="M85.8527 25.9447H84.5541C84.4727 25.9447 84.3937 25.9169 84.3303 25.8659C84.2669 25.8149 84.2228 25.7438 84.2054 25.6643L84.0598 24.9922C83.8661 24.9073 83.6823 24.8011 83.512 24.6757L82.8567 24.8844C82.7792 24.9092 82.6955 24.9066 82.6195 24.8772C82.5436 24.8478 82.48 24.7933 82.4392 24.7228L81.7879 23.5986C81.7476 23.528 81.7325 23.4459 81.7449 23.3656C81.7574 23.2853 81.7968 23.2116 81.8566 23.1566L82.3647 22.6928C82.3415 22.4827 82.3414 22.2707 82.3644 22.0606L81.8558 21.5978C81.7959 21.5428 81.7564 21.4691 81.7438 21.3887C81.7313 21.3083 81.7464 21.2261 81.7867 21.1554L82.4355 20.0306C82.4761 19.96 82.5397 19.9055 82.6156 19.8761C82.6915 19.8467 82.7752 19.8442 82.8528 19.8689L83.5083 20.0776C83.5953 20.0134 83.6859 19.9535 83.7794 19.8993C83.8696 19.8486 83.9624 19.8026 84.0572 19.7615L84.2025 19.0901C84.2198 19.0106 84.2637 18.9394 84.327 18.8884C84.3903 18.8373 84.4692 18.8094 84.5505 18.8093H85.8492C85.9305 18.8094 86.0094 18.8373 86.0728 18.8884C86.1361 18.9394 86.1802 19.0106 86.1975 19.0901L86.3448 19.7619C86.5383 19.8473 86.722 19.9534 86.8926 20.0784L87.5483 19.8696C87.6258 19.845 87.7094 19.8476 87.7853 19.877C87.8612 19.9064 87.9247 19.9608 87.9654 20.0313L88.6153 21.1562C88.6982 21.3014 88.6697 21.4851 88.5467 21.5982L88.0385 22.062C88.0617 22.2721 88.0618 22.4841 88.0388 22.6942L88.5474 23.158C88.6706 23.2715 88.6992 23.4548 88.6165 23.6L87.9678 24.7249C87.9271 24.7955 87.8635 24.85 87.7876 24.8794C87.7117 24.9088 87.628 24.9113 87.5504 24.8866L86.8949 24.6778C86.7248 24.8032 86.5413 24.9092 86.3478 24.9939L86.2008 25.6643C86.1834 25.7437 86.1394 25.8148 86.0761 25.8658C86.0128 25.9168 85.934 25.9447 85.8527 25.9447ZM85.1995 20.9499C84.821 20.9499 84.4581 21.1003 84.1906 21.3679C83.9231 21.6356 83.7729 21.9985 83.7731 22.377C83.7733 22.7555 83.9238 23.1185 84.1916 23.3861C84.4594 23.6538 84.8224 23.8041 85.2009 23.8041C85.5794 23.8041 85.9423 23.6538 86.2098 23.3861C86.4773 23.1185 86.6275 22.7555 86.6273 22.377C86.6271 21.9985 86.4766 21.6356 86.2088 21.3679C85.941 21.1003 85.578 20.9499 85.1995 20.9499Z" fill="#FF8743"/>
</g>
<path d="M41.6012 57.8897C37.2341 62.5671 35.3408 66.5518 36.5776 69.3515C40.541 78.3233 75.1466 71.7285 113.872 54.6216C152.596 37.5146 180.776 16.3736 176.813 7.40176C173.165 -0.856189 138.375 6.64224 103.489 20.8188L96.7457 23.4587" stroke="#201F1F" stroke-width="0.214062"/>
<ellipse cx="114.821" cy="16.2915" rx="4.08665" ry="4.08664" transform="rotate(-2.61159 114.821 16.2915)" fill="#CFF9EA"/>
<path d="M112.289 15.081C112.269 15.0026 112.28 14.9191 112.32 14.849C112.361 14.7788 112.428 14.7277 112.506 14.7069L116.053 13.765C116.132 13.7441 116.215 13.7553 116.285 13.796C116.355 13.8367 116.406 13.9036 116.427 13.982L116.584 14.5731C116.605 14.6515 116.594 14.735 116.553 14.8051C116.512 14.8753 116.446 14.9264 116.367 14.9472L112.82 15.8891C112.742 15.91 112.659 15.8988 112.588 15.8581C112.518 15.8174 112.467 15.7505 112.446 15.6721L112.289 15.081ZM112.76 16.8543C112.74 16.7759 112.751 16.6925 112.791 16.6223C112.832 16.5522 112.899 16.5011 112.977 16.4803L114.751 16.0093C114.829 15.9885 114.913 15.9996 114.983 16.0403C115.053 16.0811 115.104 16.148 115.125 16.2263L115.596 17.9997C115.617 18.0781 115.605 18.1615 115.565 18.2317C115.524 18.3018 115.457 18.3529 115.379 18.3737L113.605 18.8447C113.527 18.8655 113.444 18.8544 113.373 18.8136C113.303 18.7729 113.252 18.706 113.231 18.6276L112.76 16.8543ZM115.933 15.6953C115.855 15.7161 115.788 15.7672 115.747 15.8374C115.706 15.9075 115.695 15.991 115.716 16.0694L116.187 17.8427C116.208 17.9211 116.259 17.988 116.329 18.0287C116.399 18.0694 116.483 18.0806 116.561 18.0598L117.152 17.9028C117.23 17.882 117.297 17.8308 117.338 17.7607C117.379 17.6906 117.39 17.6071 117.369 17.5287L116.898 15.7554C116.877 15.677 116.826 15.6101 116.756 15.5694C116.686 15.5287 116.603 15.5175 116.524 15.5383L115.933 15.6953Z" fill="#19D992"/>
<ellipse cx="59.1651" cy="71.9477" rx="4.08665" ry="4.08664" transform="rotate(-2.61159 59.1651 71.9477)" fill="#FFF3EC"/>
<g clip-path="url(#clip2_13137_120278)">
<path d="M59.5064 73.7442H58.8571C58.8164 73.7442 58.777 73.7303 58.7452 73.7048C58.7135 73.6793 58.6915 73.6437 58.6828 73.604L58.61 73.2679C58.5131 73.2255 58.4213 73.1724 58.3361 73.1097L58.0084 73.2141C57.9697 73.2264 57.9278 73.2252 57.8898 73.2105C57.8519 73.1958 57.8201 73.1685 57.7997 73.1332L57.474 72.5712C57.4539 72.5359 57.4463 72.4948 57.4526 72.4546C57.4588 72.4145 57.4785 72.3776 57.5084 72.3501L57.7624 72.1182C57.7508 72.0132 57.7508 71.9072 57.7623 71.8021L57.508 71.5708C57.478 71.5433 57.4583 71.5064 57.452 71.4662C57.4457 71.426 57.4533 71.3849 57.4734 71.3496L57.7978 70.7871C57.8181 70.7519 57.8499 70.7246 57.8879 70.7099C57.9258 70.6952 57.9677 70.6939 58.0065 70.7063L58.3342 70.8107C58.3777 70.7786 58.423 70.7486 58.4698 70.7215C58.5149 70.6961 58.5613 70.6731 58.6087 70.6526L58.6813 70.3169C58.69 70.2772 58.7119 70.2416 58.7436 70.216C58.7752 70.1905 58.8147 70.1766 58.8553 70.1765H59.5047C59.5453 70.1766 59.5848 70.1905 59.6165 70.216C59.6482 70.2416 59.6702 70.2772 59.6788 70.3169L59.7525 70.6528C59.8493 70.6955 59.9411 70.7485 60.0264 70.811L60.3542 70.7067C60.393 70.6944 60.4348 70.6956 60.4727 70.7103C60.5107 70.725 60.5424 70.7523 60.5628 70.7875L60.8877 71.3499C60.9292 71.4225 60.9149 71.5144 60.8534 71.571L60.5993 71.8029C60.6109 71.9079 60.611 72.0139 60.5995 72.119L60.8538 72.3509C60.9154 72.4076 60.9297 72.4993 60.8883 72.5719L60.564 73.1343C60.5436 73.1696 60.5118 73.1968 60.4739 73.2115C60.4359 73.2262 60.3941 73.2275 60.3553 73.2151L60.0275 73.1108C59.9425 73.1734 59.8507 73.2265 59.754 73.2688L59.6805 73.604C59.6718 73.6437 59.6498 73.6793 59.6181 73.7048C59.5865 73.7303 59.5471 73.7442 59.5064 73.7442ZM59.1798 71.2468C58.9906 71.2468 58.8091 71.322 58.6754 71.4558C58.5416 71.5896 58.4665 71.7711 58.4666 71.9604C58.4667 72.1496 58.542 72.3311 58.6759 72.4649C58.8098 72.5987 58.9913 72.6739 59.1805 72.6739C59.3698 72.6739 59.5512 72.5987 59.685 72.4649C59.8187 72.3311 59.8938 72.1496 59.8937 71.9604C59.8936 71.7711 59.8184 71.5896 59.6845 71.4558C59.5506 71.322 59.3691 71.2468 59.1798 71.2468Z" fill="#FF8743"/>
</g>
<ellipse cx="136.227" cy="9.8696" rx="4.08665" ry="4.08664" fill="#FFF3EC"/>
<g clip-path="url(#clip3_13137_120278)">
<path d="M136.565 11.6668H135.916C135.875 11.6668 135.836 11.6529 135.804 11.6274C135.772 11.6019 135.75 11.5664 135.741 11.5266L135.669 11.1905C135.572 11.1481 135.48 11.095 135.395 11.0323L135.067 11.1367C135.028 11.149 134.986 11.1478 134.948 11.1331C134.91 11.1184 134.879 11.0911 134.858 11.0559L134.533 10.4938C134.512 10.4585 134.505 10.4174 134.511 10.3772C134.517 10.3371 134.537 10.3002 134.567 10.2727L134.821 10.0408C134.809 9.93579 134.809 9.82979 134.821 9.72475L134.567 9.49338C134.537 9.46587 134.517 9.429 134.511 9.38881C134.504 9.34862 134.512 9.3075 134.532 9.27218L134.856 8.70973C134.877 8.67447 134.909 8.64723 134.946 8.63253C134.984 8.61783 135.026 8.61656 135.065 8.62893L135.393 8.73328C135.436 8.70117 135.482 8.6712 135.528 8.64409C135.573 8.61876 135.62 8.59575 135.667 8.57523L135.74 8.23951C135.749 8.19977 135.771 8.16418 135.802 8.13864C135.834 8.11311 135.873 8.09916 135.914 8.09912H136.563C136.604 8.09916 136.643 8.11311 136.675 8.13864C136.707 8.16418 136.729 8.19977 136.737 8.23951L136.811 8.57541C136.908 8.61809 137 8.67114 137.085 8.73364L137.413 8.62928C137.452 8.61696 137.493 8.61825 137.531 8.63295C137.569 8.64765 137.601 8.67486 137.621 8.71009L137.946 9.27254C137.988 9.34514 137.974 9.43701 137.912 9.49356L137.658 9.72546C137.67 9.83051 137.67 9.93651 137.658 10.0416L137.912 10.2735C137.974 10.3302 137.988 10.4219 137.947 10.4945L137.623 11.0569C137.602 11.0922 137.57 11.1194 137.532 11.1341C137.495 11.1488 137.453 11.1501 137.414 11.1377L137.086 11.0334C137.001 11.0961 136.909 11.1491 136.813 11.1914L136.739 11.5266C136.73 11.5663 136.708 11.6019 136.677 11.6274C136.645 11.6529 136.606 11.6668 136.565 11.6668ZM136.238 9.16943C136.049 9.16943 135.868 9.24461 135.734 9.37842C135.6 9.51224 135.525 9.69373 135.525 9.88297C135.525 10.0722 135.601 10.2537 135.734 10.3875C135.868 10.5213 136.05 10.5965 136.239 10.5965C136.428 10.5965 136.61 10.5213 136.744 10.3875C136.877 10.2537 136.952 10.0722 136.952 9.88297C136.952 9.69373 136.877 9.51224 136.743 9.37842C136.609 9.24461 136.428 9.16943 136.238 9.16943Z" fill="#FF8743"/>
</g>
<mask id="mask0_13137_120278" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="50" y="34" width="7" height="8">
<path fill-rule="evenodd" clip-rule="evenodd" d="M56.1 34.6233L51.3412 36.5727L51.3849 37.5318L50.1196 38.0501L50.2924 41.8425L55.0513 39.8931L55.0075 38.9341L56.2729 38.4157L56.1 34.6233Z" fill="#ADD5E5"/>
</mask>
<g mask="url(#mask0_13137_120278)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M56.1 34.6233L51.3412 36.5727L51.3849 37.5318L50.1196 38.0501L50.2924 41.8425L55.0513 39.8931L55.0075 38.9341L56.2729 38.4157L56.1 34.6233Z" fill="white"/>
</g>
<ellipse cx="129.805" cy="46.2605" rx="4.08665" ry="4.08664" fill="#CFF9EA"/>
<path d="M127.072 45.6299C127.035 45.5579 127.028 45.4741 127.052 45.3967C127.077 45.3194 127.131 45.255 127.203 45.2177L130.461 43.5286C130.533 43.4913 130.617 43.4841 130.694 43.5086C130.771 43.5331 130.836 43.5873 130.873 43.6594L131.155 44.2023C131.192 44.2743 131.199 44.3582 131.175 44.4355C131.15 44.5128 131.096 44.5772 131.024 44.6146L127.766 46.3036C127.694 46.341 127.61 46.3482 127.533 46.3237C127.456 46.2991 127.391 46.2449 127.354 46.1729L127.072 45.6299ZM127.917 47.2588C127.88 47.1868 127.872 47.103 127.897 47.0256C127.921 46.9483 127.976 46.8839 128.048 46.8466L129.677 46.0021C129.749 45.9647 129.832 45.9575 129.91 45.9821C129.987 46.0066 130.051 46.0608 130.089 46.1328L130.933 47.7617C130.971 47.8337 130.978 47.9176 130.953 47.9949C130.929 48.0722 130.875 48.1366 130.803 48.1739L129.174 49.0185C129.102 49.0558 129.018 49.063 128.941 49.0385C128.863 49.014 128.799 48.9597 128.761 48.8877L127.917 47.2588ZM130.762 45.439C130.69 45.4764 130.636 45.5408 130.612 45.6181C130.587 45.6954 130.594 45.7793 130.632 45.8513L131.476 47.4802C131.514 47.5522 131.578 47.6064 131.655 47.6309C131.733 47.6554 131.817 47.6482 131.889 47.6109L132.432 47.3294C132.504 47.2921 132.558 47.2277 132.582 47.1503C132.607 47.073 132.6 46.9892 132.562 46.9172L131.718 45.2883C131.68 45.2163 131.616 45.162 131.539 45.1375C131.461 45.113 131.377 45.1202 131.305 45.1575L130.762 45.439Z" fill="#19D992"/>
</g>
<defs>
<clipPath id="clip0_13137_120278">
<rect width="244" height="100" fill="white"/>
</clipPath>
<clipPath id="clip1_13137_120278">
<rect width="8.56249" height="8.56249" fill="white" transform="matrix(1 0 0.000494375 1 80.916 18.0957)"/>
</clipPath>
<clipPath id="clip2_13137_120278">
<rect width="4.28125" height="4.28125" fill="white" transform="matrix(1 0 0.000494377 1 57.0391 69.8196)"/>
</clipPath>
<clipPath id="clip3_13137_120278">
<rect width="4.28125" height="4.28125" fill="white" transform="matrix(1 0 0.000494377 1 134.1 7.74243)"/>
</clipPath>
</defs>
</svg>

'''
'''--- assets/icons/proposal-poll.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M9 16.5C13.1421 16.5 16.5 13.1421 16.5 9C16.5 4.85786 13.1421 1.5 9 1.5C4.85786 1.5 1.5 4.85786 1.5 9C1.5 13.1421 4.85786 16.5 9 16.5Z" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M6.8175 6.74994C6.99383 6.24869 7.34187 5.82602 7.79997 5.55679C8.25807 5.28756 8.79668 5.18914 9.32039 5.27897C9.8441 5.3688 10.3191 5.64108 10.6613 6.04758C11.0035 6.45409 11.1908 6.96858 11.19 7.49994C11.19 8.99994 8.94 9.74994 8.94 9.74994" stroke="#201F1F" stroke-width="1.5" stroke-linejoin="round"/>
  <path d="M9 12.75H9.00667" stroke="#201F1F" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/proposal-received-funds.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M5.23852 14.8117C5.63734 16.3002 6.51616 17.6154 7.73867 18.5535C8.96118 19.4915 10.4591 20 12 20C13.5409 20 15.0388 19.4915 16.2613 18.5535C17.4838 17.6154 18.3627 16.3002 18.7615 14.8117"
    stroke="#381E80" stroke-width="2"/>
  <path
    d="M7.6247 8.21913L6.84383 7.59444L5.59444 9.15617L6.3753 9.78087L7.6247 8.21913ZM12 13L11.3753 13.7809L12 14.2806L12.6247 13.7809L12 13ZM17.6247 9.78087L18.4056 9.15617L17.1562 7.59444L16.3753 8.21913L17.6247 9.78087ZM13 4L13 3L11 3L11 4L13 4ZM6.3753 9.78087L11.3753 13.7809L12.6247 12.2191L7.6247 8.21913L6.3753 9.78087ZM12.6247 13.7809L17.6247 9.78087L16.3753 8.21913L11.3753 12.2191L12.6247 13.7809ZM13 13L13 4L11 4L11 13L13 13Z"
    fill="#381E80"/>
</svg>

'''
'''--- assets/icons/proposal-remove-member.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M16 21V19C16 17.9391 15.5786 16.9217 14.8284 16.1716C14.0783 15.4214 13.0609 15 12 15H5C3.93913 15 2.92172 15.4214 2.17157 16.1716C1.42143 16.9217 1 17.9391 1 19V21"
    stroke="#381E80" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
  <path
    d="M8.5 11C10.7091 11 12.5 9.20914 12.5 7C12.5 4.79086 10.7091 3 8.5 3C6.29086 3 4.5 4.79086 4.5 7C4.5 9.20914 6.29086 11 8.5 11Z"
    stroke="#381E80" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M23 11H17" stroke="#381E80" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/proposal-send-funds.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M5.23852 14.8117C5.63734 16.3002 6.51616 17.6154 7.73867 18.5535C8.96118 19.4915 10.4591 20 12 20C13.5409 20 15.0388 19.4915 16.2613 18.5535C17.4838 17.6154 18.3627 16.3002 18.7615 14.8117"
    stroke="#381E80" stroke-width="2"/>
  <path
    d="M16.3753 8.78087L17.1562 9.40556L18.4056 7.84383L17.6247 7.21913L16.3753 8.78087ZM12 4L12.6247 3.21913L12 2.71937L11.3753 3.21913L12 4ZM6.37531 7.21913L5.59444 7.84383L6.84383 9.40556L7.62469 8.78087L6.37531 7.21913ZM11 13L11 14L13 14L13 13L11 13ZM17.6247 7.21913L12.6247 3.21913L11.3753 4.78087L16.3753 8.78087L17.6247 7.21913ZM11.3753 3.21913L6.37531 7.21913L7.62469 8.78087L12.6247 4.78087L11.3753 3.21913ZM11 4L11 13L13 13L13 4L11 4Z"
    fill="#381E80"/>
</svg>

'''
'''--- assets/icons/refresh.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M18 14.5C19.1 14.5 20.1 14.9 20.8 15.7L22 14.5V18.5H18L19.8 16.7C19.3 16.3 18.7 16 18 16C16.6 16 15.5 17.1 15.5 18.5C15.5 19.9 16.6 21 18 21C18.8 21 19.5 20.6 20 20H21.7C21.1 21.5 19.7 22.5 18 22.5C15.8 22.5 14 20.7 14 18.5C14 16.3 15.8 14.5 18 14.5ZM11.5 18.5C11.5 17.4 11.8 16.4 12.2 15.5H12C10.1 15.5 8.49997 13.9 8.49997 12C8.49997 10.1 10.1 8.5 12 8.5C13.9 8.5 15.5 10.1 15.5 12C15.5 12.2 15.5 12.4 15.4 12.5C16.2 12.2 17 12 18 12C18.5 12 19 12.1 19.5 12.2V12C19.5 11.7 19.5 11.3 19.4 11L21.5 9.4C21.7 9.2 21.7 9 21.6 8.8L19.6 5.3C19.5 5 19.3 5 19 5L16.5 6C16 5.6 15.4 5.3 14.8 5L14.4 2.3C14.5 2.2 14.2 2 14 2H9.99997C9.79997 2 9.49997 2.2 9.49997 2.4L9.09997 5.1C8.49997 5.3 7.99997 5.7 7.39997 6L4.99997 5C4.69997 5 4.49997 5 4.29997 5.3L2.29997 8.8C2.19997 9 2.29997 9.2 2.49997 9.4L4.59997 11C4.59997 11.3 4.49997 11.7 4.49997 12C4.49997 12.3 4.49997 12.7 4.59997 13L2.49997 14.7C2.29997 14.9 2.29997 15.1 2.39997 15.3L4.39997 18.8C4.49997 19 4.69997 19 4.99997 19L7.49997 18C7.99997 18.4 8.59997 18.7 9.19997 19L9.59997 21.7C9.59997 21.9 9.79997 22.1 10.1 22.1H12.6C11.9 21 11.5 19.8 11.5 18.5Z" fill="#FF5E03"/>
</svg>

'''
'''--- assets/icons/reply.svg ---
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M11.0973 9.013C11.1194 9.00327 11.1436 8.99926 11.1676 9.00132C11.1916 9.00338 11.2148 9.01145 11.2349 9.0248C11.255 9.03814 11.2715 9.05632 11.2827 9.07767C11.294 9.09903 11.2997 9.12287 11.2993 9.147V10.3C11.2993 10.4326 11.352 10.5598 11.4457 10.6536C11.5395 10.7473 11.6667 10.8 11.7993 10.8C12.4663 10.8 13.8123 10.805 15.0993 11.622C16.0833 12.246 17.0893 13.382 17.6943 15.498C16.6743 14.515 15.5093 13.982 14.4893 13.699C13.8623 13.5258 13.218 13.4232 12.5683 13.393C12.3023 13.3813 12.0359 13.384 11.7703 13.401H11.7573L11.7523 13.402H11.7513L11.7993 13.9L11.7493 13.402C11.6259 13.4144 11.5115 13.4722 11.4283 13.5643C11.3451 13.6563 11.2992 13.776 11.2993 13.9V15.053C11.2993 15.161 11.1893 15.229 11.0973 15.187L7.11328 12.254C7.09976 12.244 7.08574 12.2346 7.07128 12.226C7.04954 12.2129 7.03155 12.1945 7.01906 12.1724C7.00656 12.1503 7 12.1254 7 12.1C7 12.0746 7.00656 12.0497 7.01906 12.0276C7.03155 12.0055 7.04954 11.9871 7.07128 11.974C7.08575 11.9654 7.09976 11.956 7.11328 11.946L11.0973 9.013Z" fill="#8C8C8C"/>
  <path d="M12.3006 14.386C12.3686 14.386 12.4436 14.389 12.5236 14.392C12.9576 14.412 13.5576 14.478 14.2236 14.663C15.5496 15.031 17.1196 15.865 18.1636 17.743C18.2201 17.8444 18.3101 17.923 18.4181 17.9653C18.5261 18.0076 18.6455 18.011 18.7558 17.975C18.8661 17.9389 18.9604 17.8656 19.0226 17.7677C19.0848 17.6697 19.111 17.5532 19.0966 17.438C18.6326 13.728 17.2106 11.776 15.6366 10.778C14.3916 9.98802 13.1096 9.83602 12.3006 9.80702V9.14702C12.3007 8.94109 12.2452 8.73895 12.14 8.56193C12.0348 8.38492 11.8837 8.23959 11.7028 8.14128C11.5218 8.04297 11.3177 7.99533 11.1119 8.00338C10.9061 8.01143 10.7064 8.07487 10.5336 8.18702L6.53965 11.127C6.37453 11.2301 6.23835 11.3735 6.14394 11.5437C6.04954 11.7139 6 11.9054 6 12.1C6 12.2947 6.04954 12.4861 6.14394 12.6563C6.23835 12.8266 6.37453 12.97 6.53965 13.073L10.5336 16.013C10.7064 16.1252 10.9061 16.1886 11.1119 16.1967C11.3177 16.2047 11.5218 16.1571 11.7028 16.0588C11.8837 15.9605 12.0348 15.8151 12.14 15.6381C12.2452 15.4611 12.3007 15.259 12.3006 15.053V14.386Z" fill="#8C8C8C"/>
</svg>

'''
'''--- assets/icons/seal-approved.colors.svg ---
<svg width="164" height="164" viewBox="0 0 164 164" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g opacity="0.15" clip-path="url(#clip0_5597:33965)">
    <path d="M116.617 50.0889C105.206 37.7115 87.6074 31.9097 70.2018 36.3578C52.7961 40.8059 40.2253 54.537 36.3574 70.7823L116.617 50.0889Z" fill="#434343"/>
    <path d="M46.2217 112.556C57.6321 125.707 75.8113 132.089 93.7971 127.447C111.783 122.806 124.547 108.301 128.028 91.2822L46.2217 112.556Z" fill="#434343"/>
    <path d="M158.778 68.4623L161.873 63.434L156.844 60.3396L159.359 55.1179L153.943 52.6038L155.877 46.9953L150.269 45.0613L151.623 39.2594L145.821 37.9057L146.594 32.1038L140.792 31.3302L140.986 25.5283L134.991 25.3349L134.604 19.533L128.802 20.1132L127.642 14.3113L121.84 15.4717L120.873 9.66981L115.264 11.4104L112.943 5.99528L107.528 8.31604L104.627 3.09434L99.4057 5.99528L96.1179 1.16038L91.283 4.64151L87.4151 0.193396L82.967 4.06132L78.7123 0L74.6509 4.44811L70.0094 0.966981L66.5283 5.80189L61.5 2.70755L58.4057 7.73585L52.9906 5.2217L50.6698 10.6368L45.0613 8.70283L43.3208 14.3113L37.5189 12.9575L36.3585 18.7594L30.5566 18.1792L29.9764 23.9811H23.9811V29.9764L18.1792 30.5566L18.7594 36.3585L12.9575 37.5189L14.3113 43.3208L8.70283 45.0613L10.6368 50.6698L5.2217 52.9906L7.73585 58.4057L2.70755 61.3066L5.80189 66.3349L0.966981 69.816L4.44811 74.4575L0 78.7123L4.06132 83.1604L0.193396 87.6085L4.64151 91.4764L1.16038 96.3113L5.99528 99.599L3.09434 104.821L8.31604 107.722L5.99528 113.137L11.4104 115.458L9.66981 120.873L15.2783 122.613L14.1179 128.415L19.9198 129.382L19.3396 135.184L25.1415 135.571L25.3349 141.566L31.1368 141.373L31.9104 147.175L37.7123 146.401L39.066 152.203L44.8679 150.849L46.8019 156.458L52.4104 154.33L54.9245 159.745L60.1462 157.231L63.2406 162.259L68.2689 159.165L71.9434 163.807L76.5849 160.132L80.6462 164.387L84.9009 160.325L89.3491 164.193L93.0236 159.552L97.8585 162.84L101.146 157.811L106.368 160.519L109.075 155.297L114.491 157.425L116.618 152.009L122.226 153.557L123.774 147.948L129.575 148.915L130.542 143.113L136.344 143.5L136.538 137.698L142.34 137.505L141.953 131.703L147.755 130.736L146.788 124.934L152.396 123.387L150.849 117.778L156.264 115.651L154.137 110.236L159.359 107.528L156.651 102.307L161.679 99.0189L158.392 94.184L163.033 90.5094L159.165 86.0613L163.226 81.8066L158.972 77.7453L162.646 73.1038L158.778 68.4623ZM99.9859 151.429C61.6934 161.292 22.6274 138.278 12.5708 99.9858C2.70755 61.6934 25.7217 22.6274 64.0142 12.5708C102.307 2.70755 141.373 25.7217 151.429 64.0141C161.486 102.307 138.278 141.373 99.9859 151.429Z" fill="#434343"/>
    <path d="M29.3906 101.418L29.5287 98.288L34.5432 97.0166L36.1558 99.7025L40.6066 98.5741L31.7404 84.6534L26.1027 86.0827L24.9398 102.546L29.3906 101.418ZM29.681 94.9651L29.9229 89.5669L30.0416 89.5368L32.8262 94.1677L29.681 94.9651ZM42.0698 98.2032L46.1942 97.1575L45.0507 92.6473L47.3355 92.0681C50.7997 91.1898 52.6043 88.5612 51.775 85.2899C50.955 82.0556 48.1508 80.4928 44.7757 81.3486L38.2181 83.0111L42.0698 98.2032ZM44.2383 89.4428L43.1776 85.259L44.6315 84.8904C46.078 84.5237 47.1415 85.0751 47.4725 86.3807C47.8016 87.6788 47.1387 88.7074 45.6922 89.0742L44.2383 89.4428ZM55.7783 94.7276L59.9027 93.682L58.7592 89.1718L61.044 88.5926C64.5082 87.7143 66.3128 85.0857 65.4834 81.8143C64.6634 78.5801 61.8593 77.0173 58.4841 77.873L51.9266 79.5356L55.7783 94.7276ZM57.9468 85.9672L56.886 81.7835L58.34 81.4149C59.7865 81.0481 60.85 81.5996 61.181 82.9051C61.5101 84.2033 60.8472 85.2319 59.4007 85.5986L57.9468 85.9672ZM69.4867 91.2521L73.6112 90.2064L72.3398 85.1919L73.7641 84.8308L77.7059 89.1683L82.1864 88.0324L77.6636 83.1474C79.0833 81.9585 79.6734 80.2378 79.1392 78.1311C78.3193 74.8969 75.5678 73.5418 72.1926 74.3975L65.6351 76.06L69.4867 91.2521ZM71.5273 81.9873L70.5945 78.308L72.0484 77.9393C73.495 77.5726 74.5058 77.9163 74.8368 79.2219C75.1659 80.5201 74.4278 81.2519 72.9813 81.6187L71.5273 81.9873ZM96.2315 76.3872C94.9451 71.3133 90.9891 69.4109 86.8647 70.4566C82.7106 71.5098 80.1684 75.0596 81.4548 80.1335C82.7337 85.1778 86.6676 87.1173 90.8217 86.0641C94.9461 85.0184 97.5179 81.4611 96.2315 76.3872ZM91.9884 77.4629C92.6805 80.1928 91.9588 81.9547 89.9114 82.4738C87.864 82.9929 86.39 81.7876 85.6979 79.0578C85.0058 76.3279 85.7276 74.566 87.7749 74.0469C89.8223 73.5279 91.2963 74.7331 91.9884 77.4629ZM99.4092 67.4972L94.7507 68.6783L103.617 82.599L109.255 81.1697L110.418 64.7063L105.759 65.8874L105.359 77.3888L105.241 77.4189L99.4092 67.4972ZM115.732 79.5274L126.652 76.759L125.809 73.4357L119.014 75.1584L118.352 72.5473L124.613 70.96L123.771 67.6367L117.51 69.224L116.848 66.6129L123.672 64.8827L122.83 61.5594L111.881 64.3353L115.732 79.5274ZM134.572 74.7509C139.201 73.5773 141.416 69.9841 140.213 65.2365C139.009 60.489 135.349 58.3853 130.661 59.5739L124.875 61.0408L128.727 76.2329L134.572 74.7509ZM131.964 71.6859L129.887 63.4964L131.341 63.1278C133.715 62.526 135.254 63.1148 136.059 66.2897C136.864 69.4646 135.791 70.7155 133.536 71.2872L131.964 71.6859Z" fill="#13A36E"/>
  </g>
  <defs>
    <clipPath id="clip0_5597:33965">
      <rect width="164" height="164" fill="white"/>
    </clipPath>
  </defs>
</svg>

'''
'''--- assets/icons/seal-closed.colors.svg ---
<svg width="164" height="164" viewBox="0 0 164 164" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g opacity="0.15" clip-path="url(#clip0_16001_156690)">
    <path d="M116.619 50.0891C105.208 37.7118 87.6094 31.9099 70.2037 36.358C52.7981 40.8061 40.2273 54.5373 36.3594 70.7825L116.619 50.0891Z" fill="#434343"/>
    <path d="M46.2188 112.555C57.6291 125.706 75.8084 132.088 93.7942 127.447C111.78 122.805 124.544 108.301 128.025 91.2817L46.2188 112.555Z" fill="#434343"/>
    <path d="M158.778 68.4623L161.873 63.434L156.844 60.3396L159.359 55.1179L153.943 52.6038L155.877 46.9953L150.269 45.0613L151.623 39.2594L145.821 37.9057L146.594 32.1038L140.792 31.3302L140.986 25.5283L134.991 25.3349L134.604 19.533L128.802 20.1132L127.642 14.3113L121.84 15.4717L120.873 9.66981L115.264 11.4104L112.943 5.99528L107.528 8.31604L104.627 3.09434L99.4057 5.99528L96.1179 1.16038L91.283 4.64151L87.4151 0.193396L82.967 4.06132L78.7123 0L74.6509 4.44811L70.0094 0.966981L66.5283 5.80189L61.5 2.70755L58.4057 7.73585L52.9906 5.2217L50.6698 10.6368L45.0613 8.70283L43.3208 14.3113L37.5189 12.9575L36.3585 18.7594L30.5566 18.1792L29.9764 23.9811H23.9811V29.9764L18.1792 30.5566L18.7594 36.3585L12.9575 37.5189L14.3113 43.3208L8.70283 45.0613L10.6368 50.6698L5.2217 52.9906L7.73585 58.4057L2.70755 61.3066L5.80189 66.3349L0.966981 69.816L4.44811 74.4575L0 78.7123L4.06132 83.1604L0.193396 87.6085L4.64151 91.4764L1.16038 96.3113L5.99528 99.599L3.09434 104.821L8.31604 107.722L5.99528 113.137L11.4104 115.458L9.66981 120.873L15.2783 122.613L14.1179 128.415L19.9198 129.382L19.3396 135.184L25.1415 135.571L25.3349 141.566L31.1368 141.373L31.9104 147.175L37.7123 146.401L39.066 152.203L44.8679 150.849L46.8019 156.458L52.4104 154.33L54.9245 159.745L60.1462 157.231L63.2406 162.259L68.2689 159.165L71.9434 163.807L76.5849 160.132L80.6462 164.387L84.9009 160.325L89.3491 164.193L93.0236 159.552L97.8585 162.84L101.146 157.811L106.368 160.519L109.075 155.297L114.491 157.425L116.618 152.009L122.226 153.557L123.774 147.948L129.575 148.915L130.542 143.113L136.344 143.5L136.538 137.698L142.34 137.505L141.953 131.703L147.755 130.736L146.788 124.934L152.396 123.387L150.849 117.778L156.264 115.651L154.137 110.236L159.359 107.528L156.651 102.307L161.679 99.0189L158.392 94.184L163.033 90.5094L159.165 86.0613L163.226 81.8066L158.972 77.7453L162.646 73.1038L158.778 68.4623ZM99.9859 151.429C61.6934 161.292 22.6274 138.278 12.5708 99.9858C2.70755 61.6934 25.7217 22.6274 64.0142 12.5708C102.307 2.70755 141.373 25.7217 151.429 64.0141C161.486 102.307 138.278 141.373 99.9859 151.429Z" fill="#434343"/>
    <path d="M28.0652 93.9399L23.8095 95.0821C23.6848 94.738 23.5186 94.4402 23.3109 94.1886C23.1082 93.9356 22.866 93.7364 22.5842 93.5909C22.3062 93.439 21.9939 93.3503 21.6473 93.3247C21.2993 93.294 20.9241 93.3327 20.5217 93.4407C19.8174 93.6297 19.2672 93.9607 18.8711 94.4337C18.48 94.9054 18.2444 95.4944 18.1644 96.2008C18.0893 96.9058 18.172 97.706 18.4123 98.6014C18.6661 99.5471 19.0045 100.306 19.4275 100.877C19.8541 101.442 20.3521 101.821 20.9214 102.013C21.4894 102.2 22.1129 102.203 22.792 102.02C23.1793 101.917 23.5136 101.776 23.7948 101.598C24.0746 101.415 24.3028 101.2 24.4792 100.953C24.6556 100.706 24.7791 100.433 24.8498 100.134C24.9241 99.8278 24.9419 99.5021 24.9031 99.1566L29.1668 98.0447C29.292 98.7121 29.2873 99.4279 29.1526 100.192C29.0166 100.951 28.7338 101.696 28.3042 102.426C27.8783 103.149 27.2843 103.8 26.5223 104.376C25.7603 104.953 24.8134 105.393 23.6816 105.697C22.263 106.077 20.9087 106.115 19.6185 105.808C18.3334 105.501 17.2053 104.844 16.234 103.837C15.2679 102.829 14.5553 101.47 14.0963 99.7597C13.6345 98.0393 13.5777 96.5015 13.9258 95.1462C14.2726 93.7859 14.9283 92.6527 15.8931 91.7466C16.8565 90.8355 18.0325 90.1937 19.4208 89.8211C20.3967 89.5592 21.3304 89.4515 22.2219 89.498C23.1134 89.5446 23.9373 89.7414 24.6938 90.0884C25.4489 90.4304 26.1149 90.9231 26.692 91.5663C27.2691 92.2095 27.7268 93.0007 28.0652 93.9399ZM45.4572 91.343C45.9189 93.0634 45.9738 94.6044 45.6221 95.9661C45.269 97.3227 44.6056 98.4579 43.6322 99.3717C42.6573 100.28 41.4707 100.922 40.0722 101.298C38.6637 101.676 37.3094 101.713 36.0092 101.409C34.7127 101.1 33.5719 100.446 32.587 99.4483C31.6057 98.4444 30.8856 97.0872 30.4266 95.3769C29.9648 93.6566 29.908 92.1187 30.2561 90.7634C30.6079 89.4018 31.2687 88.2672 32.2385 87.3598C33.212 86.446 34.403 85.8001 35.8115 85.4221C37.2099 85.0468 38.5592 85.0109 39.8594 85.3145C41.1583 85.613 42.3009 86.2636 43.2872 87.2661C44.2721 88.2637 44.9954 89.6226 45.4572 91.343ZM41.1411 92.5013C40.8927 91.5758 40.5602 90.8291 40.1436 90.2615C39.7307 89.6874 39.2415 89.301 38.6758 89.1023C38.1139 88.8972 37.4858 88.8878 36.7916 89.0741C36.0974 89.2604 35.556 89.5837 35.1672 90.044C34.7821 90.4979 34.552 91.0773 34.477 91.7823C34.4056 92.4809 34.4942 93.293 34.7426 94.2186C34.991 95.1442 35.3216 95.894 35.7346 96.468C36.1512 97.0357 36.6404 97.4221 37.2024 97.6272C37.768 97.8259 38.3979 97.8321 39.0921 97.6458C39.7863 97.4595 40.3259 97.1394 40.711 96.6855C41.0998 96.2253 41.3299 95.6458 41.4012 94.9472C41.4762 94.2422 41.3896 93.4269 41.1411 92.5013ZM58.6951 79.507L62.8425 94.9602L59.3414 95.8998L51.5788 89.2794L51.4882 89.3037L53.6672 97.4227L49.4719 98.5486L45.3246 83.0955L48.886 82.1396L56.55 88.7541L56.6707 88.7217L54.4999 80.633L58.6951 79.507ZM64.9051 77.8404L70.9984 87.8855L71.1191 87.8531L71.364 76.1069L76.1026 74.8352L75.1492 91.6573L69.4146 93.1963L60.1665 79.1122L64.9051 77.8404ZM81.7383 89.8889L77.5909 74.4358L88.728 71.4467L89.6353 74.8271L82.6934 76.6902L83.4062 79.3462L89.7746 77.637L90.6819 81.0174L84.3135 82.7266L85.0263 85.3826L91.938 83.5276L92.8452 86.908L81.7383 89.8889ZM94.956 86.3415L90.8087 70.8883L97.4789 69.0982C98.6258 68.7904 99.6854 68.7298 100.658 68.9164C101.63 69.1031 102.46 69.5247 103.149 70.1811C103.837 70.8376 104.329 71.7142 104.623 72.8108C104.92 73.9174 104.924 74.9167 104.635 75.8086C104.351 76.6991 103.818 77.4569 103.037 78.0818C102.26 78.7054 101.283 79.1752 100.106 79.4911L96.1224 80.5603L95.2475 77.3007L98.3865 76.4582C98.8794 76.3259 99.2833 76.1528 99.598 75.9389C99.9163 75.7187 100.132 75.4478 100.245 75.1262C100.364 74.8032 100.364 74.4229 100.247 73.9853C100.128 73.5426 99.9356 73.2086 99.6702 72.9833C99.4085 72.7515 99.084 72.6175 98.6968 72.5812C98.3133 72.5385 97.875 72.5834 97.382 72.7157L95.9031 73.1126L99.1513 85.2155L94.956 86.3415ZM102.107 76.8186L107.874 82.8745L103.316 84.0977L97.6401 78.0175L102.107 76.8186ZM105.486 70.5729L104.579 67.1926L118.01 63.5879L118.917 66.9683L114.269 68.2158L117.509 80.2885L113.375 81.3983L110.134 69.3255L105.486 70.5729ZM123.736 78.6173L119.589 63.1642L130.726 60.1752L131.633 63.5556L124.692 65.4186L125.404 68.0746L131.773 66.3655L132.68 69.7458L126.312 71.455L127.024 74.111L133.936 72.2561L134.843 75.6364L123.736 78.6173ZM142.9 73.4742L136.954 75.0699L132.807 59.6168L138.692 58.0372C140.282 57.6106 141.738 57.5514 143.061 57.8596C144.388 58.1615 145.521 58.8065 146.46 59.7947C147.403 60.7765 148.091 62.0723 148.523 63.682C148.955 65.2917 149.012 66.7594 148.693 68.0852C148.374 69.4059 147.721 70.5302 146.735 71.458C145.748 72.3809 144.469 73.0529 142.9 73.4742ZM140.194 70.3825L141.793 69.9532C142.558 69.748 143.176 69.4499 143.648 69.059C144.125 68.6667 144.424 68.1309 144.544 67.4517C144.668 66.7711 144.586 65.8925 144.297 64.8161C144.008 63.7396 143.637 62.9387 143.183 62.4133C142.735 61.8866 142.198 61.575 141.573 61.4783C140.954 61.3804 140.242 61.4394 139.437 61.6554L137.958 62.0523L140.194 70.3825Z" fill="#13A36E"/>
  </g>
  <defs>
    <clipPath id="clip0_16001_156690">
      <rect width="164" height="164" fill="white"/>
    </clipPath>
  </defs>
</svg>

'''
'''--- assets/icons/seal-failed.colors.svg ---
<svg width="164" height="164" viewBox="0 0 164 164" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g opacity="0.15" clip-path="url(#clip0_5644:33366)">
    <path d="M116.617 50.0889C105.206 37.7115 87.6074 31.9097 70.2018 36.3578C52.7961 40.8059 40.2253 54.537 36.3574 70.7823L116.617 50.0889Z" fill="#434343"/>
    <path d="M46.2207 112.556C57.6311 125.707 75.8103 132.089 93.7962 127.447C111.782 122.806 124.546 108.301 128.027 91.2822L46.2207 112.556Z" fill="#434343"/>
    <path d="M158.778 68.4623L161.873 63.434L156.844 60.3396L159.359 55.1179L153.943 52.6038L155.877 46.9953L150.269 45.0613L151.623 39.2594L145.821 37.9057L146.594 32.1038L140.792 31.3302L140.986 25.5283L134.991 25.3349L134.604 19.533L128.802 20.1132L127.642 14.3113L121.84 15.4717L120.873 9.66981L115.264 11.4104L112.943 5.99528L107.528 8.31604L104.627 3.09434L99.4057 5.99528L96.1179 1.16038L91.283 4.64151L87.4151 0.193396L82.967 4.06132L78.7123 0L74.6509 4.44811L70.0094 0.966981L66.5283 5.80189L61.5 2.70755L58.4057 7.73585L52.9906 5.2217L50.6698 10.6368L45.0613 8.70283L43.3208 14.3113L37.5189 12.9575L36.3585 18.7594L30.5566 18.1792L29.9764 23.9811H23.9811V29.9764L18.1792 30.5566L18.7594 36.3585L12.9575 37.5189L14.3113 43.3208L8.70283 45.0613L10.6368 50.6698L5.2217 52.9906L7.73585 58.4057L2.70755 61.3066L5.80189 66.3349L0.966981 69.816L4.44811 74.4575L0 78.7123L4.06132 83.1604L0.193396 87.6085L4.64151 91.4764L1.16038 96.3113L5.99528 99.599L3.09434 104.821L8.31604 107.722L5.99528 113.137L11.4104 115.458L9.66981 120.873L15.2783 122.613L14.1179 128.415L19.9198 129.382L19.3396 135.184L25.1415 135.571L25.3349 141.566L31.1368 141.373L31.9104 147.175L37.7123 146.401L39.066 152.203L44.8679 150.849L46.8019 156.458L52.4104 154.33L54.9245 159.745L60.1462 157.231L63.2406 162.259L68.2689 159.165L71.9434 163.807L76.5849 160.132L80.6462 164.387L84.9009 160.325L89.3491 164.193L93.0236 159.552L97.8585 162.84L101.146 157.811L106.368 160.519L109.075 155.297L114.491 157.425L116.618 152.009L122.226 153.557L123.774 147.948L129.575 148.915L130.542 143.113L136.344 143.5L136.538 137.698L142.34 137.505L141.953 131.703L147.755 130.736L146.788 124.934L152.396 123.387L150.849 117.778L156.264 115.651L154.137 110.236L159.359 107.528L156.651 102.307L161.679 99.0189L158.392 94.184L163.033 90.5094L159.165 86.0613L163.226 81.8066L158.972 77.7453L162.646 73.1038L158.778 68.4623ZM99.9859 151.429C61.6934 161.292 22.6274 138.278 12.5708 99.9858C2.70755 61.6934 25.7217 22.6274 64.0142 12.5708C102.307 2.70755 141.373 25.7217 151.429 64.0141C161.486 102.307 138.278 141.373 99.9859 151.429Z" fill="#434343"/>
    <path d="M31.5434 104.998L37.9636 103.371L35.6215 94.1328L44.813 91.8025L43.5015 86.6294L34.31 88.9597L33.2795 84.8951L43.4872 82.3072L42.1756 77.1341L25.5478 81.3497L31.5434 104.998ZM53.7225 99.3751L53.9375 94.5032L61.7433 92.5242L64.2535 96.7052L71.1818 94.9487L57.3803 73.2792L48.6045 75.5042L46.7942 101.132L53.7225 99.3751ZM54.1745 89.3307L54.5511 80.9277L54.7359 80.8808L59.0705 88.0895L54.1745 89.3307ZM73.884 69.095L67.4638 70.7227L73.4594 94.3712L79.8796 92.7435L73.884 69.095ZM82.9223 91.9721L98.9035 87.9204L97.5919 82.7472L88.0309 85.1713L83.3468 66.6959L76.9266 68.3236L82.9223 91.9721ZM101.499 87.2624L118.496 82.953L117.185 77.7799L106.607 80.4616L105.577 76.397L115.323 73.9261L114.011 68.753L104.265 71.2239L103.235 67.1593L113.858 64.4659L112.547 59.2928L95.5031 63.6139L101.499 87.2624ZM130.825 79.8271C138.031 78.0003 141.479 72.4069 139.606 65.0168C137.732 57.6266 132.035 54.3518 124.737 56.2021L115.731 58.4855L121.726 82.134L130.825 79.8271ZM126.765 75.0561L123.533 62.3081L125.796 61.7343C129.491 60.7974 131.886 61.714 133.139 66.6562C134.392 71.5984 132.723 73.5455 129.213 74.4354L126.765 75.0561Z" fill="#FF5E03"/>
  </g>
  <defs>
    <clipPath id="clip0_5644:33366">
      <rect width="164" height="164" fill="white"/>
    </clipPath>
  </defs>
</svg>

'''
'''--- assets/icons/selectToken.colors.svg ---
<svg width="150" height="98" viewBox="0 0 150 98" fill="none" xmlns="http://www.w3.org/2000/svg">
<path opacity="0.5" d="M120.436 58.4126C120.481 57.0709 119.372 55.6656 117.093 54.2846C114.836 52.9174 111.529 51.6341 107.402 50.5075C99.1534 48.2554 87.6921 46.646 74.9765 46.2184C62.2609 45.7908 50.7165 46.6266 42.3335 48.3193C38.1397 49.1662 34.7529 50.2244 32.4088 51.4368C30.0411 52.6616 28.8388 53.9892 28.7932 55.3309C28.7476 56.6725 29.8571 58.0779 32.1363 59.4589C34.3927 60.8261 37.7 62.1094 41.8267 63.236C50.0757 65.488 61.537 67.0975 74.2526 67.5251C86.9682 67.9527 98.5126 67.1168 106.896 65.4241C111.089 64.5773 114.476 63.5191 116.82 62.3066C119.188 61.0819 120.39 59.7543 120.436 58.4126Z" stroke="#201F1F" stroke-width="0.5625"/>
<path opacity="0.5" d="M130.115 34.1211C129.764 33.2986 129.043 32.6295 127.944 32.123C126.843 31.6155 125.38 31.2803 123.587 31.1203C120.002 30.8002 115.155 31.1854 109.381 32.2249C97.8368 34.3031 82.6459 38.9845 66.5492 45.78C50.4524 52.5756 36.5134 60.1919 26.99 67.0077C22.2265 70.417 18.5806 73.617 16.3207 76.4048C15.1906 77.7989 14.4169 79.0781 14.0185 80.2186C13.6209 81.3571 13.6033 82.3381 13.9542 83.1607C14.305 83.9832 15.0264 84.6523 16.1257 85.1588C17.2269 85.6663 18.6893 86.0015 20.4823 86.1616C24.0677 86.4816 28.9142 86.0964 34.6886 85.0569C46.2327 82.9787 61.4236 78.2973 77.5203 71.5018C93.6171 64.7063 107.556 57.09 117.079 50.2741C121.843 46.8648 125.489 43.6648 127.749 40.8771C128.879 39.483 129.653 38.2037 130.051 37.0632C130.449 35.9247 130.466 34.9437 130.115 34.1211Z" stroke="#201F1F" stroke-width="0.5625"/>
<ellipse rx="1.49911" ry="1.4932" transform="matrix(0.940765 -0.33906 0.342157 0.939643 33.8724 50.7708)" fill="#FF8743"/>
<ellipse rx="1.49911" ry="1.4932" transform="matrix(0.940765 -0.33906 0.342157 0.939643 107.546 50.4114)" fill="#FF8743"/>
<ellipse rx="1.49911" ry="1.4932" transform="matrix(0.940765 -0.33906 0.342157 0.939643 64.4212 76.5266)" fill="#FF8743"/>
<ellipse rx="1.49911" ry="1.4932" transform="matrix(0.940764 -0.339061 0.342156 0.939643 86.9212 67.5725)" fill="#FF8743"/>
<path d="M19.9148 30.0824C19.8854 30.0464 19.862 30.017 19.8448 29.9952C19.862 29.9733 19.8854 29.9439 19.9148 29.9079C19.984 29.8231 20.0863 29.7017 20.2182 29.5558C20.4821 29.264 20.8639 28.875 21.3354 28.4861C22.2806 27.7067 23.5762 26.9363 25 26.9363C26.4238 26.9363 27.7194 27.7067 28.6646 28.4861C29.1361 28.875 29.5179 29.264 29.7818 29.5558C29.9137 29.7017 30.016 29.8231 30.0852 29.9079C30.1146 29.9439 30.138 29.9733 30.1552 29.9952C30.138 30.017 30.1146 30.0464 30.0852 30.0824C30.016 30.1672 29.9137 30.2887 29.7818 30.4345C29.5179 30.7263 29.1361 31.1154 28.6646 31.5042C27.7194 32.2837 26.4238 33.054 25 33.054C23.5762 33.054 22.2806 32.2837 21.3354 31.5042C20.8639 31.1154 20.4821 30.7263 20.2182 30.4345C20.0863 30.2887 19.984 30.1672 19.9148 30.0824Z" fill="white" stroke="black" stroke-width="0.15"/>
<ellipse cx="26.35" cy="30.0698" rx="2.1" ry="2.08923" fill="#6038D0"/>
<ellipse cx="26.3508" cy="30.07" rx="1.05" ry="1.04462" fill="#201F1F"/>
<path d="M49.5398 9.18983C49.5104 9.15384 49.487 9.12445 49.4698 9.1026C49.487 9.08074 49.5104 9.05135 49.5398 9.01536C49.609 8.93054 49.7113 8.80909 49.8432 8.66324C50.1071 8.37142 50.4889 7.98239 50.9604 7.59354C51.9056 6.81408 53.2012 6.04375 54.625 6.04375C56.0488 6.04375 57.3444 6.81408 58.2896 7.59354C58.7611 7.98239 59.1429 8.37142 59.4068 8.66324C59.5387 8.80909 59.641 8.93054 59.7102 9.01536C59.7396 9.05135 59.763 9.08074 59.7802 9.1026C59.763 9.12445 59.7396 9.15384 59.7102 9.18983C59.641 9.27465 59.5387 9.3961 59.4068 9.54196C59.1429 9.83377 58.7611 10.2228 58.2896 10.6117C57.3444 11.3911 56.0488 12.1614 54.625 12.1614C53.2012 12.1614 51.9056 11.3911 50.9604 10.6117C50.4889 10.2228 50.1071 9.83377 49.8432 9.54196C49.7113 9.3961 49.609 9.27465 49.5398 9.18983Z" fill="white" stroke="black" stroke-width="0.15"/>
<ellipse cx="55.975" cy="9.17721" rx="2.1" ry="2.08923" fill="#6038D0"/>
<ellipse cx="55.9758" cy="9.17743" rx="1.05" ry="1.04462" fill="#201F1F"/>
<path d="M121.915 79.7015C121.885 79.6656 121.862 79.6362 121.845 79.6143C121.862 79.5925 121.885 79.5631 121.915 79.5271C121.984 79.4423 122.086 79.3208 122.218 79.175C122.482 78.8831 122.864 78.4941 123.335 78.1053C124.281 77.3258 125.576 76.5555 127 76.5555C128.424 76.5555 129.719 77.3258 130.665 78.1053C131.136 78.4941 131.518 78.8831 131.782 79.175C131.914 79.3208 132.016 79.4423 132.085 79.5271C132.115 79.5631 132.138 79.5925 132.155 79.6143C132.138 79.6362 132.115 79.6656 132.085 79.7015C132.016 79.7864 131.914 79.9078 131.782 80.0537C131.518 80.3455 131.136 80.7345 130.665 81.1234C129.719 81.9028 128.424 82.6732 127 82.6732C125.576 82.6732 124.281 81.9028 123.335 81.1234C122.864 80.7345 122.482 80.3455 122.218 80.0537C122.086 79.9078 121.984 79.7864 121.915 79.7015Z" fill="white" stroke="black" stroke-width="0.15"/>
<ellipse cx="125.35" cy="79.6889" rx="2.1" ry="2.08923" fill="#6038D0"/>
<ellipse cx="125.351" cy="79.6891" rx="1.05" ry="1.04461" fill="#201F1F"/>
<path d="M83.6648 94.2523C83.6354 94.2163 83.612 94.187 83.5948 94.1651C83.612 94.1432 83.6354 94.1139 83.6648 94.0779C83.734 93.993 83.8363 93.8716 83.9682 93.7257C84.2321 93.4339 84.6139 93.0449 85.0854 92.656C86.0306 91.8766 87.3262 91.1063 88.75 91.1063C90.1738 91.1063 91.4694 91.8766 92.4146 92.656C92.8861 93.0449 93.2679 93.4339 93.5318 93.7257C93.6637 93.8716 93.766 93.993 93.8352 94.0779C93.8646 94.1139 93.888 94.1432 93.9052 94.1651C93.888 94.187 93.8646 94.2163 93.8352 94.2523C93.766 94.3372 93.6637 94.4586 93.5318 94.6045C93.2679 94.8963 92.8861 95.2853 92.4146 95.6742C91.4694 96.4536 90.1738 97.224 88.75 97.224C87.3262 97.224 86.0306 96.4536 85.0854 95.6742C84.6139 95.2853 84.2321 94.8963 83.9682 94.6045C83.8363 94.4586 83.734 94.3372 83.6648 94.2523Z" fill="white" stroke="black" stroke-width="0.15"/>
<ellipse cx="87.1" cy="94.2397" rx="2.1" ry="2.08923" fill="#6038D0"/>
<ellipse cx="87.1008" cy="94.2399" rx="1.05" ry="1.04462" fill="#201F1F"/>
<ellipse rx="4.49995" ry="4.47697" transform="matrix(0.998972 -0.0453318 0.0457993 0.998951 120.075 30.7917)" fill="#FFF3EC"/>
<path d="M118.125 32.4486L121.832 32.2803L122.722 29.551L118.916 29.7237C118.841 29.7271 118.125 32.4486 118.125 32.4486Z" fill="#401700"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M121.14 32.3114L120.833 33.3608C120.758 33.6183 120.446 33.7169 120.236 33.5494C119.919 33.2959 119.726 32.9186 119.706 32.5133L119.7 32.3767L117.449 32.4788C117.449 32.4788 118.274 29.7525 118.241 29.754L122.046 29.5813L121.157 32.3106L121.14 32.3114Z" fill="#FF8743"/>
<ellipse rx="10.6195" ry="12.2999" transform="matrix(0.906846 -0.421463 0.425035 0.905177 67.6082 46.6511)" fill="#FF8743"/>
<ellipse rx="10.6195" ry="12.3" transform="matrix(0.906846 -0.421463 0.425035 0.905177 70.1414 45.3903)" fill="#E1FC31"/>
<ellipse cx="79" cy="54.469" rx="3.75" ry="3.73077" fill="#19D992"/>
<path d="M81.25 52.9766L78.25 55.9612L76.75 54.4689" stroke="white" stroke-width="1.125" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/selectorEnabled.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M1 8C1 4.13401 4.13401 1 8 1C11.866 1 15 4.13401 15 8C15 11.866 11.866 15 8 15C4.13401 15 1 11.866 1 8Z" fill="#6038D0" stroke="#6038D0" stroke-width="2"/>
    <circle cx="8" cy="8" r="4" fill="white"/>
</svg>

'''
'''--- assets/icons/senderWallet.svg ---
<svg width="38" height="38" viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="19" cy="19" r="18.5" fill="white" stroke="#201F1F"/>
  <path d="M17.2017 32.7132L16.8645 32.4883L21.3615 25.4055C22.4858 23.4943 22.0361 21.0209 20.1248 19.8966L17.7639 18.3227C15.7402 16.9736 15.0657 14.3878 16.3023 12.2517L20.3497 5.28125L20.687 5.5061L16.6396 12.4765C15.5154 14.3878 16.0775 16.7487 17.9887 17.873L20.3497 19.4469C22.3733 20.796 23.0479 23.4943 21.6988 25.6304L17.2017 32.7132Z" fill="black"/>
  <path d="M17.9879 33.0527C17.6506 33.0527 17.3134 32.9402 16.9761 32.7154C16.0767 32.1532 15.7394 30.9166 16.414 30.0172L20.0116 24.3959C20.6862 23.384 20.3489 21.9225 19.337 21.2479L16.9761 19.674C14.1654 17.8751 13.266 14.1651 14.9524 11.242L18.1004 5.84556C18.3252 5.39585 18.7749 5.05857 19.337 4.94615C19.8992 4.83372 20.3489 4.83372 20.7986 5.171C21.2483 5.39585 21.5856 5.84556 21.698 6.40769C21.8104 6.96982 21.698 7.41952 21.4731 7.86922L18.3252 13.2657C17.6507 14.3899 17.9879 15.739 19.1122 16.4136L21.4731 17.9876C24.2838 19.7864 25.1832 23.6089 23.3844 26.5319L19.7867 32.1532C19.2246 32.7154 18.6625 33.0527 17.9879 33.0527ZM19.6743 5.39585C19.5619 5.39585 19.4495 5.39585 19.337 5.39585C18.9998 5.50828 18.6625 5.73313 18.4376 6.07041L15.2897 11.4669C13.7157 14.1651 14.5027 17.5379 17.0885 19.2242L19.4495 20.7982C20.6862 21.5852 21.1359 23.2716 20.2364 24.6207L16.6388 30.242C16.1891 30.9166 16.414 31.9284 17.0885 32.3781C17.7631 32.8278 18.7749 32.6029 19.2246 31.9284L22.7098 26.3071C24.3962 23.6089 23.6092 20.1237 20.911 18.3248L18.5501 16.7509C17.3134 15.9639 16.8637 14.2775 17.6506 13.0408L20.7986 7.64437C21.2483 6.96982 21.0234 5.95798 20.2364 5.6207C20.2364 5.50827 19.8992 5.39585 19.6743 5.39585Z" fill="black"/>
</svg>

'''
'''--- assets/icons/settings.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M9 11.25C10.2426 11.25 11.25 10.2426 11.25 9C11.25 7.75736 10.2426 6.75 9 6.75C7.75736 6.75 6.75 7.75736 6.75 9C6.75 10.2426 7.75736 11.25 9 11.25Z" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M14.2977 11.1477C14.2024 11.3637 14.174 11.6032 14.2161 11.8354C14.2582 12.0677 14.3689 12.282 14.534 12.4507L14.5769 12.4936C14.7101 12.6266 14.8157 12.7845 14.8877 12.9583C14.9598 13.1322 14.9969 13.3185 14.9969 13.5066C14.9969 13.6948 14.9598 13.8811 14.8877 14.0549C14.8157 14.2288 14.7101 14.3867 14.5769 14.5197C14.444 14.6528 14.286 14.7584 14.1122 14.8304C13.9384 14.9025 13.7521 14.9396 13.5639 14.9396C13.3758 14.9396 13.1894 14.9025 13.0156 14.8304C12.8418 14.7584 12.6839 14.6528 12.5509 14.5197L12.508 14.4767C12.3392 14.3117 12.1249 14.2009 11.8927 14.1588C11.6605 14.1167 11.4209 14.1452 11.205 14.2405C10.9933 14.3312 10.8127 14.4819 10.6855 14.674C10.5583 14.866 10.49 15.0911 10.4891 15.3215V15.4432C10.4891 15.8229 10.3382 16.1871 10.0697 16.4556C9.8012 16.7241 9.43701 16.875 9.05727 16.875C8.67753 16.875 8.31334 16.7241 8.04482 16.4556C7.77631 16.1871 7.62545 15.8229 7.62545 15.4432V15.3787C7.61991 15.1418 7.54321 14.912 7.40532 14.7192C7.26743 14.5264 7.07473 14.3795 6.85227 14.2977C6.63634 14.2024 6.39682 14.174 6.16458 14.2161C5.93234 14.2582 5.71804 14.3689 5.54932 14.534L5.50636 14.5769C5.37339 14.7101 5.21547 14.8157 5.04165 14.8877C4.86783 14.9598 4.68152 14.9969 4.49335 14.9969C4.30519 14.9969 4.11887 14.9598 3.94505 14.8877C3.77123 14.8157 3.61332 14.7101 3.48034 14.5769C3.34722 14.444 3.24161 14.286 3.16955 14.1122C3.0975 13.9384 3.06041 13.7521 3.06041 13.5639C3.06041 13.3758 3.0975 13.1894 3.16955 13.0156C3.24161 12.8418 3.34722 12.6839 3.48034 12.5509L3.5233 12.508C3.68834 12.3392 3.79905 12.1249 3.84116 11.8927C3.88327 11.6605 3.85484 11.4209 3.75955 11.205C3.66879 10.9933 3.51811 10.8127 3.32604 10.6855C3.13397 10.5583 2.90889 10.49 2.67852 10.4891H2.55682C2.17708 10.4891 1.81289 10.3382 1.54437 10.0697C1.27585 9.8012 1.125 9.43701 1.125 9.05727C1.125 8.67753 1.27585 8.31334 1.54437 8.04482C1.81289 7.77631 2.17708 7.62545 2.55682 7.62545H2.62125C2.85821 7.61991 3.08803 7.54321 3.28082 7.40532C3.47361 7.26743 3.62046 7.07473 3.70227 6.85227C3.79757 6.63634 3.826 6.39682 3.78389 6.16458C3.74178 5.93234 3.63107 5.71804 3.46602 5.54932L3.42307 5.50636C3.28994 5.37339 3.18433 5.21547 3.11228 5.04165C3.04022 4.86783 3.00313 4.68152 3.00313 4.49335C3.00313 4.30519 3.04022 4.11887 3.11228 3.94505C3.18433 3.77123 3.28994 3.61332 3.42307 3.48034C3.55605 3.34722 3.71396 3.24161 3.88778 3.16955C4.0616 3.0975 4.24792 3.06041 4.43608 3.06041C4.62424 3.06041 4.81056 3.0975 4.98438 3.16955C5.1582 3.24161 5.31611 3.34722 5.44909 3.48034L5.49204 3.5233C5.66077 3.68834 5.87507 3.79905 6.10731 3.84116C6.33954 3.88327 6.57907 3.85484 6.795 3.75955H6.85227C7.06402 3.66879 7.2446 3.51811 7.3718 3.32604C7.499 3.13397 7.56726 2.90889 7.56818 2.67852V2.55682C7.56818 2.17708 7.71903 1.81289 7.98755 1.54437C8.25607 1.27585 8.62026 1.125 9 1.125C9.37974 1.125 9.74393 1.27585 10.0124 1.54437C10.281 1.81289 10.4318 2.17708 10.4318 2.55682V2.62125C10.4327 2.85162 10.501 3.07669 10.6282 3.26876C10.7554 3.46084 10.936 3.61152 11.1477 3.70227C11.3637 3.79757 11.6032 3.826 11.8354 3.78389C12.0677 3.74178 12.282 3.63107 12.4507 3.46602L12.4936 3.42307C12.6266 3.28994 12.7845 3.18433 12.9583 3.11228C13.1322 3.04022 13.3185 3.00313 13.5066 3.00313C13.6948 3.00313 13.8811 3.04022 14.0549 3.11228C14.2288 3.18433 14.3867 3.28994 14.5197 3.42307C14.6528 3.55605 14.7584 3.71396 14.8304 3.88778C14.9025 4.0616 14.9396 4.24792 14.9396 4.43608C14.9396 4.62424 14.9025 4.81056 14.8304 4.98438C14.7584 5.1582 14.6528 5.31611 14.5197 5.44909L14.4767 5.49204C14.3117 5.66077 14.2009 5.87507 14.1588 6.10731C14.1167 6.33954 14.1452 6.57907 14.2405 6.795V6.85227C14.3312 7.06402 14.4819 7.2446 14.674 7.3718C14.866 7.499 15.0911 7.56726 15.3215 7.56818H15.4432C15.8229 7.56818 16.1871 7.71903 16.4556 7.98755C16.7241 8.25607 16.875 8.62026 16.875 9C16.875 9.37974 16.7241 9.74393 16.4556 10.0124C16.1871 10.281 15.8229 10.4318 15.4432 10.4318H15.3787C15.1484 10.4327 14.9233 10.501 14.7312 10.6282C14.5392 10.7554 14.3885 10.936 14.2977 11.1477Z" stroke="#201F1F" stroke-width="1.5" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/sheet.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M3 3V15C3 15.3978 3.15804 15.7794 3.43934 16.0607C3.72064 16.342 4.10218 16.5 4.5 16.5H13.5C13.8978 16.5 14.2794 16.342 14.5607 16.0607C14.842 15.7794 15 15.3978 15 15V6.2565C15 6.05667 14.96 5.85886 14.8825 5.67468C14.805 5.49051 14.6914 5.32368 14.5485 5.184L11.2185 1.9275C10.9383 1.65349 10.5619 1.50005 10.17 1.5H4.5C4.10218 1.5 3.72064 1.65804 3.43934 1.93934C3.15804 2.22064 3 2.60218 3 3V3Z" stroke="#201F1F" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M10.5 1.5V4.5C10.5 4.89782 10.658 5.27936 10.9393 5.56066C11.2206 5.84196 11.6022 6 12 6H15" stroke="#201F1F" stroke-width="1.5" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/sidebarActionsLibrary.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="12" cy="12" r="10.285" stroke="#595959" stroke-width="1.43"/>
    <path d="M8.59151 17.6796C8.43765 18.0433 8.60773 18.4628 8.97141 18.6167C9.33508 18.7705 9.75463 18.6004 9.90849 18.2368L8.59151 17.6796ZM14.9502 6.3201C15.104 5.95642 14.9339 5.53687 14.5703 5.38301C14.2066 5.22915 13.787 5.39924 13.6332 5.76291L14.9502 6.3201ZM9.90849 18.2368L14.9502 6.3201L13.6332 5.76291L8.59151 17.6796L9.90849 18.2368Z" fill="#595959"/>
    <path d="M7.92242 9.75558C8.20165 9.47636 8.20165 9.02364 7.92242 8.74442C7.6432 8.46519 7.19048 8.46519 6.91126 8.74442L7.92242 9.75558ZM4.66684 12L4.16126 11.4944L3.65568 12L4.16126 12.5056L4.66684 12ZM6.91126 15.2556C7.19048 15.5348 7.6432 15.5348 7.92242 15.2556C8.20165 14.9764 8.20165 14.5236 7.92242 14.2444L6.91126 15.2556ZM6.91126 8.74442L4.16126 11.4944L5.17242 12.5056L7.92242 9.75558L6.91126 8.74442ZM4.16126 12.5056L6.91126 15.2556L7.92242 14.2444L5.17242 11.4944L4.16126 12.5056Z" fill="#595959"/>
    <path d="M15.1613 9.75558C14.882 9.47636 14.882 9.02364 15.1613 8.74442C15.4405 8.46519 15.8932 8.46519 16.1724 8.74442L15.1613 9.75558ZM18.4168 12L18.9224 11.4944L19.428 12L18.9224 12.5056L18.4168 12ZM16.1724 15.2556C15.8932 15.5348 15.4405 15.5348 15.1613 15.2556C14.882 14.9764 14.882 14.5236 15.1613 14.2444L16.1724 15.2556ZM16.1724 8.74442L18.9224 11.4944L17.9113 12.5056L15.1613 9.75558L16.1724 8.74442ZM18.9224 12.5056L16.1724 15.2556L15.1613 14.2444L17.9113 11.4944L18.9224 12.5056Z" fill="#595959"/>
</svg>

'''
'''--- assets/icons/sidebarActionsLibraryFilled.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="12" cy="12" r="10.25" fill="#6038D0" stroke="#6038D0" stroke-width="1.5"/>
    <path d="M8.89228 17.6662C8.73089 18.0477 8.9093 18.4877 9.29078 18.6491C9.67225 18.8105 10.1123 18.6321 10.2737 18.2506L8.89228 17.6662ZM15.3154 6.33398C15.4768 5.9525 15.2984 5.51242 14.9169 5.35102C14.5354 5.18963 14.0953 5.36804 13.9339 5.74952L15.3154 6.33398ZM10.2737 18.2506L15.3154 6.33398L13.9339 5.74952L8.89228 17.6662L10.2737 18.2506Z" fill="white"/>
    <path d="M8.28033 9.78033C8.57322 9.48744 8.57322 9.01256 8.28033 8.71967C7.98744 8.42678 7.51256 8.42678 7.21967 8.71967L8.28033 9.78033ZM5 12L4.46967 11.4697C4.17678 11.7626 4.17678 12.2374 4.46967 12.5303L5 12ZM7.21967 15.2803C7.51256 15.5732 7.98744 15.5732 8.28033 15.2803C8.57322 14.9874 8.57322 14.5126 8.28033 14.2197L7.21967 15.2803ZM7.21967 8.71967L4.46967 11.4697L5.53033 12.5303L8.28033 9.78033L7.21967 8.71967ZM4.46967 12.5303L7.21967 15.2803L8.28033 14.2197L5.53033 11.4697L4.46967 12.5303Z" fill="white"/>
    <path d="M15.4697 9.78033C15.1768 9.48744 15.1768 9.01256 15.4697 8.71967C15.7626 8.42678 16.2374 8.42678 16.5303 8.71967L15.4697 9.78033ZM18.75 12L19.2803 11.4697C19.5732 11.7626 19.5732 12.2374 19.2803 12.5303L18.75 12ZM16.5303 15.2803C16.2374 15.5732 15.7626 15.5732 15.4697 15.2803C15.1768 14.9874 15.1768 14.5126 15.4697 14.2197L16.5303 15.2803ZM16.5303 8.71967L19.2803 11.4697L18.2197 12.5303L15.4697 9.78033L16.5303 8.71967ZM19.2803 12.5303L16.5303 15.2803L15.4697 14.2197L18.2197 11.4697L19.2803 12.5303Z" fill="white"/>
</svg>

'''
'''--- assets/icons/sidebarBounties.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M6 12.5L2.85673 11.7142C2.47968 11.6199 2.34963 11.1504 2.62444 10.8756L4.85355 8.64645C4.94732 8.55268 5.0745 8.5 5.20711 8.5H10M6 12.5L8 10.5M6 12.5L10 17M10 8.5L15.3222 3.66161C15.4391 3.55538 15.5794 3.47834 15.7318 3.43679L20.1558 2.23023C20.5291 2.12843 20.8716 2.47092 20.7698 2.84417L19.5699 7.24379C19.5241 7.41169 19.4353 7.56473 19.3122 7.68778L14 13M10 8.5L8 10.5M14 13L14.4764 17.7642C14.4913 17.9135 14.4385 18.0615 14.3325 18.1675L12.0491 20.4509C11.7919 20.7081 11.355 20.6134 11.2274 20.2729L10 17M14 13L12.25 14.75M10 17L12.25 14.75M12.25 14.75L8 10.5" stroke="#595959" stroke-width="1.3"/>
    <path d="M5.49982 15C3.61488 15.5548 2.75097 16.1901 2.97109 19.6107C2.98579 19.8392 3.15926 20.0276 3.38594 20.0597C6.09714 20.4435 7.14513 19.7935 7.99982 17.5" stroke="#595959" stroke-width="1.3" stroke-linecap="round"/>
</svg>

'''
'''--- assets/icons/sidebarBountiesFilled.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M6.5 13L3.35673 12.2142C2.97968 12.1199 2.84963 11.6504 3.12444 11.3756L5.35355 9.14645C5.44732 9.05268 5.5745 9 5.70711 9H10.5L15.8222 4.16161C15.9391 4.05538 16.0794 3.97834 16.2318 3.93679L20.6558 2.73023C21.0291 2.62843 21.3716 2.97092 21.2698 3.34417L20.0699 7.74379C20.0241 7.91169 19.9353 8.06473 19.8122 8.18778L14.5 13.5L14.9764 18.2642C14.9913 18.4135 14.9385 18.5615 14.8325 18.6675L12.5491 20.9509C12.2919 21.2081 11.855 21.1134 11.7274 20.7729L10.5 17.5L6.5 13Z" fill="#6038D0"/>
    <path d="M3.47109 20.1107C3.27433 17.0531 3.94374 16.221 5.43434 15.6826C5.77859 15.5582 6.16086 15.661 6.41968 15.9199L8.04553 17.5457C8.32229 17.8225 8.4178 18.2385 8.25636 18.5951C7.43689 20.405 6.3462 20.908 3.88594 20.5597C3.65926 20.5276 3.48579 20.3392 3.47109 20.1107Z" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/sidebarDaosAndUsers.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect x="2.65" y="2.65" width="7.03333" height="7.03333" rx="1.01667" stroke="#595959" stroke-width="1.3"/>
    <rect x="2.65" y="14.317" width="7.03333" height="7.03333" rx="1.01667" stroke="#595959" stroke-width="1.3"/>
    <rect x="14.316" y="2.65" width="7.03333" height="7.03333" rx="1.01667" stroke="#595959" stroke-width="1.3"/>
    <rect x="14.316" y="14.317" width="7.03333" height="7.03333" rx="1.01667" stroke="#595959" stroke-width="1.3"/>
</svg>

'''
'''--- assets/icons/sidebarDaosAndUsersFilled.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect x="3.5" y="3.5" width="7" height="7" fill="#6038D0" stroke="#6038D0" stroke-width="1.5" stroke-linejoin="round"/>
    <rect x="3.5" y="13.5" width="7" height="7" fill="#6038D0" stroke="#6038D0" stroke-width="1.5" stroke-linejoin="round"/>
    <rect x="13.5" y="3.5" width="7" height="7" fill="#6038D0" stroke="#6038D0" stroke-width="1.5" stroke-linejoin="round"/>
    <rect x="13.5" y="13.5" width="7" height="7" fill="#6038D0" stroke="#6038D0" stroke-width="1.5" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/sidebarDaosStats.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M5.8577 12.65C6.051 12.65 6.2077 12.8067 6.2077 13V20.35H2.36484V13C2.36484 12.8067 2.52154 12.65 2.71484 12.65H5.8577ZM13.572 3.65C13.7653 3.65 13.922 3.8067 13.922 4V20.35H10.0791V4C10.0791 3.8067 10.2358 3.65 10.4291 3.65H13.572ZM21.2863 7.50714C21.4796 7.50714 21.6363 7.66384 21.6363 7.85714V20.35H17.7934V7.85714C17.7934 7.66384 17.9501 7.50714 18.1434 7.50714H21.2863Z" stroke="#595959" stroke-width="1.3"/>
</svg>

'''
'''--- assets/icons/sidebarFeedback.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M7 18V17.35H6.70811L6.51418 17.5682L7 18ZM3.65 19.8698V5H2.35V19.8698H3.65ZM4 4.65H21V3.35H4V4.65ZM21.35 5V17H22.65V5H21.35ZM21 17.35H7V18.65H21V17.35ZM6.51418 17.5682L4.26159 20.1023L5.23323 20.966L7.48582 18.4318L6.51418 17.5682ZM21.35 17C21.35 17.1933 21.1933 17.35 21 17.35V18.65C21.9113 18.65 22.65 17.9113 22.65 17H21.35ZM21 4.65C21.1933 4.65 21.35 4.8067 21.35 5H22.65C22.65 4.08873 21.9113 3.35 21 3.35V4.65ZM3.65 5C3.65 4.8067 3.8067 4.65 4 4.65V3.35C3.08873 3.35 2.35 4.08873 2.35 5H3.65ZM2.35 19.8698C2.35 21.387 4.22525 22.1 5.23323 20.966L4.26159 20.1023C4.04778 20.3429 3.65 20.1916 3.65 19.8698H2.35Z" fill="#595959"/>
    <circle cx="12.5" cy="11" r="1" fill="#595959"/>
    <circle cx="7.5" cy="11" r="1" fill="#595959"/>
    <circle cx="17.5" cy="11" r="1" fill="#595959"/>
</svg>

'''
'''--- assets/icons/sidebarHome.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M19.6522 9.58312L12.6521 3.56105C12.2772 3.23849 11.7227 3.23849 11.3478 3.56106L4.34783 9.58312C4.12701 9.77309 4 10.0499 4 10.3412V20C4 20.5523 4.44772 21 5 21H8.33338C8.88566 21 9.33338 20.5523 9.33338 20V14.5882C9.33338 14.036 9.78109 13.5882 10.3334 13.5882H11.9999H13.6668C14.219 13.5882 14.6668 14.036 14.6668 14.5882V20C14.6668 20.5523 15.1145 21 15.6668 21H19C19.5523 21 20 20.5523 20 20V10.3412C20 10.0499 19.873 9.77309 19.6522 9.58312Z" stroke="#201F1F" stroke-width="1.5" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/sidebarHomeFilled.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M20 9.88235L11.9999 3L4 9.88235V21H9.33338V13.5882H11.9999H14.6668V21H20V9.88235Z" fill="#6038D0" stroke="#6038D0" stroke-width="1.5" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/sidebarReleaseNotes.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M4.79922 3.9C4.79922 3.66131 4.89405 3.43239 5.06283 3.2636C5.23161 3.09482 5.46053 3 5.69922 3H14.6992L19.1992 7.5V20.1C19.1992 20.3387 19.1044 20.5676 18.9356 20.7364C18.7668 20.9052 18.5379 21 18.2992 21H5.69922C5.46053 21 5.23161 20.9052 5.06283 20.7364C4.89405 20.5676 4.79922 20.3387 4.79922 20.1V3.9Z" stroke="#595959" stroke-width="1.3" stroke-linejoin="round"/>
    <path d="M8.39923 10.2002H15.5992M8.39923 13.8002H15.5992" stroke="#595959" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/social-any-url.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z"
    stroke="#6038D0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M2 12H22" stroke="#6038D0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path
    d="M12 2C14.5013 4.73835 15.9228 8.29203 16 12C15.9228 15.708 14.5013 19.2616 12 22C9.49872 19.2616 8.07725 15.708 8 12C8.07725 8.29203 9.49872 4.73835 12 2V2Z"
    stroke="#6038D0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/social-discord.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M18.7818 6.26C17.4797 5.66229 16.1045 5.23865 14.6918 5C14.4985 5.3432 14.3249 5.6971 14.1718 6.06C12.6698 5.84002 11.1438 5.84002 9.64178 6.06C9.50178 5.73 9.29178 5.31 9.12178 5C7.70153 5.23404 6.31917 5.65783 5.01178 6.26C2.70839 9.52517 1.6706 13.5164 2.09178 17.49C3.60515 18.6024 5.29561 19.451 7.09178 20C7.49955 19.4566 7.85766 18.8776 8.16178 18.27C7.57777 18.0529 7.01532 17.7817 6.48178 17.46L6.89178 17.14C8.45505 17.8789 10.1627 18.2622 11.8918 18.2622C13.6209 18.2622 15.3285 17.8789 16.8918 17.14C17.0318 17.25 17.1618 17.36 17.3118 17.46C16.7703 17.7799 16.2014 18.051 15.6118 18.27C15.9257 18.8785 16.2939 19.4575 16.7118 20C18.5079 19.451 20.1984 18.6024 21.7118 17.49C22.1291 13.5152 21.0879 9.52421 18.7818 6.26ZM8.62178 15.26C8.37344 15.246 8.13031 15.1831 7.90633 15.0749C7.68236 14.9667 7.48194 14.8153 7.31657 14.6295C7.15121 14.4437 7.02414 14.2271 6.94267 13.9921C6.86119 13.7571 6.82691 13.5083 6.84178 13.26C6.82555 13.0114 6.85889 12.7621 6.93986 12.5265C7.02083 12.2909 7.14782 12.0738 7.31343 11.8877C7.47905 11.7016 7.68 11.5503 7.90461 11.4425C8.12921 11.3348 8.37299 11.2727 8.62178 11.26C8.87102 11.2714 9.11546 11.3325 9.34071 11.4398C9.56596 11.5472 9.76745 11.6984 9.93333 11.8848C10.0992 12.0712 10.2261 12.2889 10.3066 12.5251C10.387 12.7612 10.4194 13.0111 10.4018 13.26C10.4209 13.7547 10.2452 14.2372 9.91233 14.6038C9.57947 14.9703 9.11607 15.1916 8.62178 15.22V15.26ZM15.1918 15.26C14.6912 15.2291 14.2231 15.0015 13.8897 14.6268C13.5562 14.2521 13.3844 13.7608 13.4118 13.26C13.3969 13.0117 13.4312 12.7629 13.5127 12.5279C13.5941 12.2929 13.7212 12.0763 13.8866 11.8905C14.0519 11.7047 14.2524 11.5533 14.4763 11.4451C14.7003 11.3369 14.9434 11.274 15.1918 11.26C15.441 11.2714 15.6855 11.3325 15.9107 11.4398C16.136 11.5472 16.3375 11.6984 16.5033 11.8848C16.6692 12.0712 16.7961 12.2889 16.8766 12.5251C16.957 12.7612 16.9894 13.0111 16.9718 13.26C16.9936 13.7554 16.8187 14.2394 16.4853 14.6065C16.1519 14.9736 15.687 15.1941 15.1918 15.22V15.26Z"
    fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/social-facebook.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M18.2817 1.87354H15.2817C13.9557 1.87354 12.6839 2.40032 11.7462 3.338C10.8085 4.27568 10.2817 5.54745 10.2817 6.87354V9.87354H7.28174V13.8735H10.2817V21.8735H14.2817V13.8735H17.2817L18.2817 9.87354H14.2817V6.87354C14.2817 6.60832 14.3871 6.35396 14.5746 6.16643C14.7622 5.97889 15.0165 5.87354 15.2817 5.87354H18.2817V1.87354Z"
    fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/social-github.svg ---
<svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M16 23.0268V19.1568C16.0375 18.68 15.9731 18.2006 15.811 17.7506C15.6489 17.3006 15.3929 16.8902 15.06 16.5468C18.2 16.1968 21.5 15.0068 21.5 9.54679C21.4997 8.15062 20.9627 6.80799 20 5.79679C20.4559 4.5753 20.4236 3.22514 19.91 2.02679C19.91 2.02679 18.73 1.67679 16 3.50679C13.708 2.88561 11.292 2.88561 9 3.50679C6.27 1.67679 5.09 2.02679 5.09 2.02679C4.57638 3.22514 4.54414 4.5753 5 5.79679C4.03013 6.81549 3.49252 8.17026 3.5 9.57679C3.5 14.9968 6.8 16.1868 9.94 16.5768C9.611 16.9168 9.35726 17.3222 9.19531 17.7667C9.03335 18.2112 8.96681 18.6849 9 19.1568V23.0268M9 20.0268C4 21.5268 4 17.5268 2 17.0268L9 20.0268Z"
    stroke="#6038D0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/social-instagram.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M17 2H7C4.23858 2 2 4.23858 2 7V17C2 19.7614 4.23858 22 7 22H17C19.7614 22 22 19.7614 22 17V7C22 4.23858 19.7614 2 17 2Z"
    stroke="#6038D0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path
    d="M16.0002 11.3698C16.1236 12.2021 15.9815 13.052 15.594 13.7988C15.2065 14.5456 14.5933 15.1512 13.8418 15.5295C13.0903 15.9077 12.2386 16.0394 11.408 15.9057C10.5773 15.7721 9.80996 15.3799 9.21503 14.785C8.62011 14.1901 8.22793 13.4227 8.09426 12.592C7.9606 11.7614 8.09226 10.9097 8.47052 10.1582C8.84878 9.40667 9.45438 8.79355 10.2012 8.40605C10.948 8.01856 11.7979 7.8764 12.6302 7.99981C13.4791 8.1257 14.265 8.52128 14.8719 9.12812C15.4787 9.73496 15.8743 10.5209 16.0002 11.3698Z"
    stroke="#6038D0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M17.5 6.5H17.51" stroke="#6038D0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/social-placeholder.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M23.9635 12.9424L22.468 12.8263C22.4892 12.5539 22.5 12.2784 22.5 12C22.5 11.7216 22.4892 11.4461 22.468 11.1737L23.9635 11.0576C23.9877 11.3685 24 11.6828 24 12C24 12.3172 23.9877 12.6315 23.9635 12.9424ZM23.671 9.19744C23.5234 8.5806 23.3282 7.98227 23.0894 7.40655L21.7038 7.98113C21.9125 8.48438 22.0832 9.00733 22.2121 9.54647L23.671 9.19744ZM22.2332 5.72928L20.955 6.51423C20.6665 6.04434 20.3418 5.59871 19.9849 5.18123L21.1251 4.20653C21.5326 4.68326 21.9035 5.1923 22.2332 5.72928ZM19.7935 2.87491L18.8188 4.01506C18.4013 3.65817 17.9557 3.33355 17.4858 3.045L18.2707 1.76677C18.8077 2.09653 19.3167 2.46736 19.7935 2.87491ZM16.5935 0.910566L16.0189 2.29615C15.5156 2.08746 14.9927 1.91685 14.4535 1.78785L14.8026 0.329027C15.4194 0.476608 16.0177 0.671823 16.5935 0.910566ZM12.9424 0.0364636L12.8263 1.53196C12.5539 1.5108 12.2784 1.5 12 1.5C11.7216 1.5 11.4461 1.5108 11.1737 1.53196L11.0576 0.0364637C11.3685 0.012305 11.6828 0 12 0C12.3172 0 12.6315 0.012305 12.9424 0.0364636ZM9.19744 0.329027L9.54647 1.78785C9.00733 1.91685 8.48438 2.08746 7.98113 2.29616L7.40655 0.910566C7.98227 0.671824 8.5806 0.476609 9.19744 0.329027ZM5.72928 1.76677L6.51423 3.045C6.04434 3.33355 5.59871 3.65817 5.18123 4.01506L4.20653 2.87491C4.68326 2.46736 5.1923 2.09653 5.72928 1.76677ZM2.87491 4.20654L4.01506 5.18124C3.65817 5.59871 3.33355 6.04434 3.045 6.51423L1.76677 5.72929C2.09653 5.1923 2.46736 4.68326 2.87491 4.20654ZM0.910566 7.40655L2.29615 7.98113C2.08746 8.48438 1.91685 9.00733 1.78785 9.54648L0.329027 9.19745C0.476608 8.58061 0.671823 7.98227 0.910566 7.40655ZM0.0364636 11.0576C0.012305 11.3685 0 11.6828 0 12C0 12.3172 0.012305 12.6315 0.0364637 12.9424L1.53196 12.8263C1.5108 12.5539 1.5 12.2784 1.5 12C1.5 11.7216 1.5108 11.4461 1.53196 11.1737L0.0364636 11.0576ZM0.329027 14.8026L1.78785 14.4535C1.91685 14.9927 2.08746 15.5156 2.29616 16.0189L0.910567 16.5935C0.671824 16.0177 0.476609 15.4194 0.329027 14.8026ZM1.76677 18.2707L3.045 17.4858C3.33355 17.9557 3.65817 18.4013 4.01506 18.8188L2.87491 19.7935C2.46736 19.3167 2.09653 18.8077 1.76677 18.2707ZM4.20654 21.1251L5.18124 19.9849C5.59871 20.3418 6.04434 20.6665 6.51423 20.955L5.72929 22.2332C5.1923 21.9035 4.68326 21.5326 4.20654 21.1251ZM7.40655 23.0894L7.98113 21.7038C8.48438 21.9125 9.00733 22.0832 9.54648 22.2121L9.19745 23.671C8.58061 23.5234 7.98227 23.3282 7.40655 23.0894ZM11.0576 23.9635L11.1737 22.468C11.4461 22.4892 11.7216 22.5 12 22.5C12.2784 22.5 12.5539 22.4892 12.8263 22.468L12.9424 23.9635C12.6315 23.9877 12.3172 24 12 24C11.6828 24 11.3685 23.9877 11.0576 23.9635ZM14.8026 23.671C15.4194 23.5234 16.0177 23.3282 16.5935 23.0894L16.0189 21.7038C15.5156 21.9125 14.9927 22.0832 14.4535 22.2121L14.8026 23.671ZM18.2707 22.2332L17.4858 20.955C17.9557 20.6665 18.4013 20.3418 18.8188 19.9849L19.7935 21.1251C19.3167 21.5326 18.8077 21.9035 18.2707 22.2332ZM21.1251 19.7935L19.9849 18.8188C20.3418 18.4013 20.6665 17.9557 20.955 17.4858L22.2332 18.2707C21.9035 18.8077 21.5326 19.3167 21.1251 19.7935ZM23.0894 16.5935L21.7038 16.0189C21.9125 15.5156 22.0832 14.9927 22.2121 14.4535L23.671 14.8026C23.5234 15.4194 23.3282 16.0177 23.0894 16.5935Z" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/social-slack.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path
    d="M14.5 10C13.67 10 13 9.33 13 8.5V3.5C13 2.67 13.67 2 14.5 2C15.33 2 16 2.67 16 3.5V8.5C16 9.33 15.33 10 14.5 10Z"
    fill="#6038D0" stroke="#6038D0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M20.5 10H19V8.5C19 7.67 19.67 7 20.5 7C21.33 7 22 7.67 22 8.5C22 9.33 21.33 10 20.5 10Z" fill="#6038D0"
        stroke="#6038D0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path
    d="M9.5 14C10.33 14 11 14.67 11 15.5V20.5C11 21.33 10.33 22 9.5 22C8.67 22 8 21.33 8 20.5V15.5C8 14.67 8.67 14 9.5 14Z"
    fill="#6038D0" stroke="#6038D0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M3.5 14H5V15.5C5 16.33 4.33 17 3.5 17C2.67 17 2 16.33 2 15.5C2 14.67 2.67 14 3.5 14Z" fill="#6038D0"
        stroke="#6038D0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path
    d="M14 14.5C14 13.67 14.67 13 15.5 13H20.5C21.33 13 22 13.67 22 14.5C22 15.33 21.33 16 20.5 16H15.5C14.67 16 14 15.33 14 14.5Z"
    fill="#6038D0" stroke="#6038D0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M15.5 19H14V20.5C14 21.33 14.67 22 15.5 22C16.33 22 17 21.33 17 20.5C17 19.67 16.33 19 15.5 19Z"
        fill="#6038D0" stroke="#6038D0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M10 9.5C10 8.67 9.33 8 8.5 8H3.5C2.67 8 2 8.67 2 9.5C2 10.33 2.67 11 3.5 11H8.5C9.33 11 10 10.33 10 9.5Z"
        fill="#6038D0" stroke="#6038D0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2C7.67 2 7 2.67 7 3.5C7 4.33 7.67 5 8.5 5Z" fill="#6038D0" stroke="#6038D0"
        stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/social-telegram.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd"
        d="M17.1074 19.8233C17.365 20.0057 17.697 20.0513 17.993 19.9393C18.289 19.8265 18.5066 19.5737 18.5722 19.2673C19.2674 16.0001 20.9538 7.73052 21.5866 4.75852C21.6346 4.53452 21.5546 4.30172 21.3786 4.15212C21.2026 4.00252 20.9586 3.95932 20.741 4.04012C17.3866 5.28172 7.05623 9.15772 2.83382 10.7201C2.56582 10.8193 2.39142 11.0769 2.40022 11.3593C2.40982 11.6425 2.60022 11.8881 2.87462 11.9705C4.76822 12.5369 7.25383 13.3249 7.25383 13.3249C7.25383 13.3249 8.41543 16.8329 9.02103 18.6169C9.09703 18.8409 9.27223 19.0169 9.50343 19.0777C9.73383 19.1377 9.98023 19.0745 10.1522 18.9121C11.125 17.9937 12.629 16.5737 12.629 16.5737C12.629 16.5737 15.4866 18.6689 17.1074 19.8233ZM8.29943 12.8817L9.64263 17.3121L9.94103 14.5065C9.94103 14.5065 15.1306 9.82573 18.089 7.15772C18.1754 7.07932 18.1874 6.94812 18.1154 6.85612C18.0442 6.76412 17.913 6.74252 17.8146 6.80492C14.3858 8.99452 8.29943 12.8817 8.29943 12.8817Z"
        fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/social-twitter-alt.svg ---
<svg width="24" height="22" viewBox="0 0 24 22" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M21.2693 5.00629C21.3807 4.99265 21.4915 4.97728 21.6018 4.96022C21.4287 5.10973 21.2502 5.25265 21.0668 5.38853C20.8531 5.54679 20.7321 5.80085 20.7438 6.06646C21.0405 12.8197 16.1337 20.2498 7.548 20.2498C5.99907 20.2498 4.51305 19.9744 3.13208 19.4695C4.81645 19.1506 6.41472 18.4199 7.79127 17.3131C8.0536 17.1022 8.15585 16.7497 8.04707 16.4311C7.93829 16.1126 7.64176 15.8962 7.30522 15.8898C5.93831 15.8638 4.72406 15.1513 3.98987 14.0623C4.38144 14.0364 4.76291 13.97 5.12841 13.8683C5.48434 13.7693 5.72618 13.4394 5.71353 13.0702C5.70089 12.701 5.43705 12.3884 5.07518 12.314C3.52416 11.995 2.33679 10.7908 1.92279 9.33231C2.3228 9.43779 2.73962 9.50031 3.16755 9.51446C3.52284 9.52621 3.84327 9.30211 3.95411 8.96435C4.06496 8.62659 3.93963 8.2562 3.64646 8.05514C2.14841 7.02777 1.51738 5.17353 1.92546 3.48368C4.44878 6.1362 7.91608 7.84904 11.7779 8.04748C12.0282 8.06034 12.27 7.95521 12.4313 7.76346C12.5925 7.5717 12.6546 7.31546 12.5991 7.07113C11.9888 4.3873 13.9779 1.8498 16.616 1.8498C17.7957 1.8498 18.866 2.35977 19.6195 3.18409C19.8089 3.39134 20.0932 3.4841 20.3684 3.42851C20.6425 3.37316 20.9127 3.30713 21.1788 3.23089C21.0434 3.33953 20.9013 3.43966 20.7534 3.5305C20.4328 3.72738 20.2927 4.12106 20.4168 4.47623C20.541 4.83139 20.8958 5.05205 21.2693 5.00629Z" stroke="#000000" stroke-width="1.6" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/social-twitter.svg ---
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M21.5566 6.77579C20.8944 7.07727 20.1826 7.2803 19.4356 7.37182C20.1984 6.90346 20.7841 6.1613 21.0594 5.27687C20.3461 5.71062 19.5556 6.02594 18.7141 6.19591C18.0414 5.45991 17.0806 5 16.0186 5C13.6344 5 11.8824 7.28107 12.4209 9.64905C9.35264 9.49139 6.63164 7.984 4.80989 5.69293C3.84239 7.39489 4.30814 9.62136 5.95214 10.7488C5.34764 10.7288 4.77764 10.5589 4.28039 10.2751C4.23989 12.0293 5.46614 13.6705 7.24214 14.0358C6.72239 14.1804 6.15314 14.2143 5.57414 14.1004C6.04364 15.6047 7.40714 16.6991 9.02414 16.7299C7.47164 17.9781 5.51564 18.5357 3.55664 18.2988C5.19089 19.3732 7.13264 20 9.21764 20C16.0741 20 19.9479 14.062 19.7139 8.73616C20.4354 8.20165 21.0616 7.53486 21.5566 6.77579Z" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/sort.svg ---
<svg width="12" height="14" viewBox="0 0 12 14" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M3.33329 9.66683H0.666626L4.66663 13.6668V0.333496H3.33329V9.66683ZM7.33329 2.3335V13.6668H8.66663V4.3335H11.3333L7.33329 0.333496V2.3335Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/state-add.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g opacity="0.8">
    <path opacity="0.8" d="M6.80177 14H9.18935V9.18935H14V6.80178H9.18935V2H6.80177V6.80178H2V9.18935H6.80177V14Z"
          fill="white"/>
  </g>
</svg>

'''
'''--- assets/icons/state-communities.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g>
    <path
      d="M3.26005 3.42318L7.99979 1.90479L8 4.66942L9.26005 4.26576V3.42318L13.9998 1.90479V5.23545L12.7397 5.63911V6.4817L8 8.00009L8 10.6694L9.26005 10.2658L9.26005 9.42318L13.9998 7.90479V11.2355L12.7397 11.6391V12.4817L8 14.0001L7.99979 11.2355L6.73974 11.6391V12.4817L2 14.0001L2 10.6694L3.26005 10.2658L3.26005 9.42318L7.99979 7.90479V5.23545L6.73974 5.63911V6.4817L2 8.00009L2 4.66942L3.26005 4.26576L3.26005 3.42318Z"
      fill="currentValue"/>
  </g>
</svg>

'''
'''--- assets/icons/state-create-dao.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g opacity="0.8">
    <path d="M8 1.3335V4.00016" stroke="currentColor" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
    <path d="M8 12V14.6667" stroke="currentColor" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
    <path d="M3.28662 3.28662L5.17329 5.17329" stroke="currentColor" stroke-width="2" stroke-linecap="square"
          stroke-linejoin="round"/>
    <path d="M10.8267 10.8267L12.7133 12.7133" stroke="currentColor" stroke-width="2" stroke-linecap="square"
          stroke-linejoin="round"/>
    <path d="M1.3335 8H4.00016" stroke="currentColor" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
    <path d="M12 8H14.6667" stroke="currentColor" stroke-width="2" stroke-linecap="square" stroke-linejoin="round"/>
    <path d="M3.28662 12.7133L5.17329 10.8267" stroke="currentColor" stroke-width="2" stroke-linecap="square"
          stroke-linejoin="round"/>
    <path d="M10.8267 5.17329L12.7133 3.28662" stroke="currentColor" stroke-width="2" stroke-linecap="square"
          stroke-linejoin="round"/>
  </g>
</svg>

'''
'''--- assets/icons/state-gear.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g opacity="0.8">
    <path
      d="M8 10C9.10457 10 10 9.10457 10 8C10 6.89543 9.10457 6 8 6C6.89543 6 6 6.89543 6 8C6 9.10457 6.89543 10 8 10Z"
      stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path
      d="M12.7091 9.90909C12.6244 10.101 12.5991 10.3139 12.6365 10.5204C12.674 10.7268 12.7724 10.9173 12.9191 11.0673L12.9573 11.1055C13.0756 11.2237 13.1695 11.364 13.2335 11.5185C13.2976 11.673 13.3305 11.8387 13.3305 12.0059C13.3305 12.1732 13.2976 12.3388 13.2335 12.4933C13.1695 12.6478 13.0756 12.7882 12.9573 12.9064C12.8391 13.0247 12.6987 13.1186 12.5442 13.1826C12.3897 13.2467 12.2241 13.2796 12.0568 13.2796C11.8896 13.2796 11.7239 13.2467 11.5694 13.1826C11.4149 13.1186 11.2746 13.0247 11.1564 12.9064L11.1182 12.8682C10.9682 12.7215 10.7777 12.6231 10.5713 12.5856C10.3649 12.5482 10.1519 12.5735 9.96 12.6582C9.77178 12.7388 9.61126 12.8728 9.4982 13.0435C9.38513 13.2143 9.32445 13.4143 9.32364 13.6191V13.7273C9.32364 14.0648 9.18954 14.3885 8.95086 14.6272C8.71218 14.8659 8.38846 15 8.05091 15C7.71336 15 7.38964 14.8659 7.15096 14.6272C6.91227 14.3885 6.77818 14.0648 6.77818 13.7273V13.67C6.77325 13.4594 6.70508 13.2551 6.58251 13.0837C6.45994 12.9123 6.28865 12.7818 6.09091 12.7091C5.89897 12.6244 5.68606 12.5991 5.47963 12.6365C5.27319 12.674 5.0827 12.7724 4.93273 12.9191L4.89455 12.9573C4.77634 13.0756 4.63598 13.1695 4.48147 13.2335C4.32696 13.2976 4.16135 13.3305 3.99409 13.3305C3.82683 13.3305 3.66122 13.2976 3.50671 13.2335C3.35221 13.1695 3.21184 13.0756 3.09364 12.9573C2.9753 12.8391 2.88143 12.6987 2.81738 12.5442C2.75333 12.3897 2.72036 12.2241 2.72036 12.0568C2.72036 11.8896 2.75333 11.7239 2.81738 11.5694C2.88143 11.4149 2.9753 11.2746 3.09364 11.1564L3.13182 11.1182C3.27852 10.9682 3.37694 10.7777 3.41437 10.5713C3.4518 10.3649 3.42653 10.1519 3.34182 9.96C3.26115 9.77178 3.12721 9.61126 2.95648 9.4982C2.78575 9.38513 2.58568 9.32445 2.38091 9.32364H2.27273C1.93518 9.32364 1.61146 9.18954 1.37277 8.95086C1.13409 8.71218 1 8.38846 1 8.05091C1 7.71336 1.13409 7.38964 1.37277 7.15096C1.61146 6.91227 1.93518 6.77818 2.27273 6.77818H2.33C2.54063 6.77325 2.74491 6.70508 2.91628 6.58251C3.08765 6.45994 3.21818 6.28865 3.29091 6.09091C3.37562 5.89897 3.40089 5.68606 3.36346 5.47963C3.32603 5.27319 3.22761 5.0827 3.08091 4.93273L3.04273 4.89455C2.92439 4.77634 2.83052 4.63598 2.76647 4.48147C2.70242 4.32696 2.66945 4.16135 2.66945 3.99409C2.66945 3.82683 2.70242 3.66122 2.76647 3.50671C2.83052 3.35221 2.92439 3.21184 3.04273 3.09364C3.16093 2.9753 3.3013 2.88143 3.4558 2.81738C3.61031 2.75333 3.77593 2.72036 3.94318 2.72036C4.11044 2.72036 4.27605 2.75333 4.43056 2.81738C4.58507 2.88143 4.72543 2.9753 4.84364 3.09364L4.88182 3.13182C5.0318 3.27852 5.22228 3.37694 5.42872 3.41437C5.63515 3.4518 5.84806 3.42653 6.04 3.34182H6.09091C6.27913 3.26115 6.43965 3.12721 6.55271 2.95648C6.66578 2.78575 6.72646 2.58568 6.72727 2.38091V2.27273C6.72727 1.93518 6.86136 1.61146 7.10005 1.37277C7.33873 1.13409 7.66245 1 8 1C8.33755 1 8.66127 1.13409 8.89995 1.37277C9.13864 1.61146 9.27273 1.93518 9.27273 2.27273V2.33C9.27354 2.53477 9.33422 2.73484 9.44729 2.90557C9.56035 3.0763 9.72087 3.21024 9.90909 3.29091C10.101 3.37562 10.3139 3.40089 10.5204 3.36346C10.7268 3.32603 10.9173 3.22761 11.0673 3.08091L11.1055 3.04273C11.2237 2.92439 11.364 2.83052 11.5185 2.76647C11.673 2.70242 11.8387 2.66945 12.0059 2.66945C12.1732 2.66945 12.3388 2.70242 12.4933 2.76647C12.6478 2.83052 12.7882 2.92439 12.9064 3.04273C13.0247 3.16093 13.1186 3.3013 13.1826 3.4558C13.2467 3.61031 13.2796 3.77593 13.2796 3.94318C13.2796 4.11044 13.2467 4.27605 13.1826 4.43056C13.1186 4.58507 13.0247 4.72543 12.9064 4.84364L12.8682 4.88182C12.7215 5.0318 12.6231 5.22228 12.5856 5.42872C12.5482 5.63515 12.5735 5.84806 12.6582 6.04V6.09091C12.7388 6.27913 12.8728 6.43965 13.0435 6.55271C13.2143 6.66578 13.4143 6.72646 13.6191 6.72727H13.7273C14.0648 6.72727 14.3885 6.86136 14.6272 7.10005C14.8659 7.33873 15 7.66245 15 8C15 8.33755 14.8659 8.66127 14.6272 8.89995C14.3885 9.13864 14.0648 9.27273 13.7273 9.27273H13.67C13.4652 9.27354 13.2652 9.33422 13.0944 9.44729C12.9237 9.56035 12.7898 9.72087 12.7091 9.90909Z"
      stroke="currentColor" stroke-width="1.5" stroke-linejoin="round"/>
  </g>
</svg>

'''
'''--- assets/icons/state-governance.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g opacity="0.8">
    <path opacity="0.8"
          d="M8 8C10.2094 8 12 6.20937 12 4C12 1.79063 10.2094 0 8 0C5.79063 0 4 1.79063 4 4C4 6.20937 5.79063 8 8 8ZM10.9937 9.01875L9.5 15L8.5 10.75L9.5 9L6.5 9L7.5 10.75L6.5 15L5.00625 9.01875C2.77812 9.125 1 10.9469 1 13.2L1 14.5C1 15.3281 1.67187 16 2.5 16L13.5 16C14.3281 16 15 15.3281 15 14.5V13.2C15 10.9469 13.2219 9.125 10.9937 9.01875Z"
          fill="currentColor"/>
  </g>
</svg>

'''
'''--- assets/icons/state-home.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g clip-path="url(#clip0)">
    <path fill-rule="evenodd" clip-rule="evenodd"
          d="M0.571429 15.9998H5.14286C5.45886 15.9998 5.71429 15.7437 5.71429 15.4283L5.71429 11.9996C5.71429 10.739 6.73943 9.71382 8 9.71382C9.26057 9.71382 10.2857 10.739 10.2857 11.9996V15.4283C10.2857 15.7437 10.5411 15.9998 10.8571 15.9998L15.4286 15.9998C15.7446 15.9998 16 15.7437 16 15.4283V6.28512C16 6.1074 15.9171 5.93997 15.7766 5.83254L8.348 0.118046C8.14286 -0.0396741 7.85714 -0.0396741 7.65143 0.118046L0.222857 5.83254C0.0828572 5.93997 0 6.1074 0 6.28512L0 15.4283C0 15.7437 0.255429 15.9998 0.571429 15.9998Z"
          fill="currentColor"/>
  </g>
  <defs>
    <clipPath id="clip0">
      <rect width="16" height="16" fill="white"/>
    </clipPath>
  </defs>
</svg>

'''
'''--- assets/icons/state-membersgroups.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g opacity="0.8">
    <g opacity="0.8">
      <path
        d="M2.4 7.1999C3.2825 7.1999 4 6.4824 4 5.5999C4 4.7174 3.2825 3.9999 2.4 3.9999C1.5175 3.9999 0.8 4.7174 0.8 5.5999C0.8 6.4824 1.5175 7.1999 2.4 7.1999ZM13.6 7.1999C14.4825 7.1999 15.2 6.4824 15.2 5.5999C15.2 4.7174 14.4825 3.9999 13.6 3.9999C12.7175 3.9999 12 4.7174 12 5.5999C12 6.4824 12.7175 7.1999 13.6 7.1999ZM14.4 7.9999L12.8 7.9999C12.36 7.9999 11.9625 8.1774 11.6725 8.4649C12.68 9.0174 13.395 10.0149 13.55 11.1999H15.2C15.6425 11.1999 16 10.8424 16 10.3999V9.5999C16 8.7174 15.2825 7.9999 14.4 7.9999ZM8 7.9999C9.5475 7.9999 10.8 6.7474 10.8 5.1999C10.8 3.6524 9.5475 2.3999 8 2.3999C6.4525 2.3999 5.2 3.6524 5.2 5.1999C5.2 6.7474 6.4525 7.9999 8 7.9999ZM9.92 8.7999H9.7125C9.1925 9.0499 8.615 9.1999 8 9.1999C7.385 9.1999 6.81 9.0499 6.2875 8.7999H6.08C4.49 8.7999 3.2 10.0899 3.2 11.6799L3.2 12.3999C3.2 13.0624 3.7375 13.5999 4.4 13.5999L11.6 13.5999C12.2625 13.5999 12.8 13.0624 12.8 12.3999V11.6799C12.8 10.0899 11.51 8.7999 9.92 8.7999ZM4.3275 8.4649C4.0375 8.1774 3.64 7.9999 3.2 7.9999L1.6 7.9999C0.7175 7.9999 0 8.7174 0 9.5999L0 10.3999C0 10.8424 0.3575 11.1999 0.8 11.1999H2.4475C2.605 10.0149 3.32 9.0174 4.3275 8.4649Z"
        fill="currentColor"/>
    </g>
  </g>
</svg>

'''
'''--- assets/icons/state-overview.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g opacity="0.8">
    <path
      d="M14.5828 9.41163L8.47614 9.41163L12.5431 13.4786C12.6985 13.634 12.9543 13.6466 13.1141 13.4961C14.1101 12.5577 14.7952 11.2929 14.9962 9.871C15.0306 9.62754 14.8286 9.41163 14.5828 9.41163ZM14.1755 7.74399C13.9634 4.66967 11.5067 2.21299 8.43238 2.00093C8.19768 1.98472 8.00003 2.18262 8.00003 2.41784V8.17634L13.7588 8.17634C13.994 8.17634 14.1917 7.97869 14.1755 7.74399ZM6.76474 9.41163L6.76474 3.30493C6.76474 3.05916 6.54882 2.85714 6.30563 2.89162C3.23876 3.325 0.894542 6.00429 1.00366 9.21527C1.11586 12.513 3.95523 15.2172 7.25448 15.1758C8.55154 15.1596 9.75003 14.7416 10.7354 14.0427C10.9387 13.8986 10.9521 13.5993 10.7758 13.423L6.76474 9.41163Z"
      fill="currentColor"/>
  </g>
</svg>

'''
'''--- assets/icons/state-sign-out.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g opacity="0.8">
    <path
      d="M9.00073 1H11.6674C12.021 1 12.3602 1.14048 12.6102 1.39052C12.8603 1.64057 13.0007 1.97971 13.0007 2.33333V11.6667C13.0007 12.0203 12.8603 12.3594 12.6102 12.6095C12.3602 12.8595 12.021 13 11.6674 13H9.00073"
      stroke="white" stroke-width="2" stroke-linejoin="round"/>
    <path d="M5.66675 10.3337L9.00008 7.00033L5.66675 3.66699" stroke="white" stroke-width="2" stroke-linejoin="round"/>
    <path d="M9 7H1" stroke="white" stroke-width="2" stroke-linejoin="round"/>
  </g>
</svg>

'''
'''--- assets/icons/state-tasks.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g opacity="0.8">
    <path fill-rule="evenodd" clip-rule="evenodd"
          d="M16 9.33366C15.2636 9.33366 14.6667 8.73671 14.6667 8.00033C14.6667 7.26394 15.2636 6.66699 16 6.66699V4.00033C16 3.26394 15.4031 2.66699 14.6667 2.66699L1.33333 2.66699C0.596944 2.66699 0 3.26394 0 4.00033L0 6.66699C0.736389 6.66699 1.33333 7.26394 1.33333 8.00033C1.33333 8.73671 0.736389 9.33366 0 9.33366L0 12.0003C0 12.7367 0.596944 13.3337 1.33333 13.3337L14.6667 13.3337C15.4031 13.3337 16 12.7367 16 12.0003V9.33366ZM3 5L13 5V7L3 7L3 5ZM8 8H3L3 10H8V8Z"
          fill="currentColor"/>
  </g>
</svg>

'''
'''--- assets/icons/state-treasury.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g opacity="0.8">
    <path opacity="0.8"
          d="M8 0C6.34176 0 4.82843 0.249329 3.61871 0.698545C3.51949 0.735121 3.42853 0.790701 3.351 0.862112C3.27346 0.933523 3.21089 1.01937 3.16685 1.11474C3.1228 1.21011 3.09815 1.31315 3.0943 1.41796C3.09045 1.52277 3.10747 1.62731 3.1444 1.7256C3.18132 1.8239 3.23743 1.91402 3.30952 1.99083C3.3816 2.06764 3.46825 2.12963 3.56451 2.17325C3.66078 2.21688 3.76477 2.24129 3.87056 2.2451C3.97634 2.2489 4.08185 2.23202 4.18106 2.19543C5.15686 1.83307 6.51149 1.59667 8 1.59667C9.61867 1.59667 11.0851 1.88128 12.0707 2.29522C12.5636 2.50219 12.9268 2.74381 13.1367 2.95218C13.3465 3.16055 13.3885 3.29646 13.3885 3.40125C13.3885 3.50606 13.3465 3.64194 13.1367 3.85031C12.9268 4.05868 12.5636 4.30031 12.0707 4.50728C11.0851 4.92121 9.61868 5.20582 8 5.20582C6.38132 5.20582 4.92317 4.92143 3.93765 4.50728C3.44489 4.3002 3.07317 4.05891 2.86331 3.85031C2.65345 3.64171 2.61151 3.49876 2.61151 3.39293C2.60852 3.18315 2.52231 2.98298 2.37152 2.83568C2.22074 2.68838 2.0175 2.6058 1.80576 2.6058C1.59401 2.6058 1.39077 2.68838 1.23999 2.83568C1.0892 2.98298 1.00299 3.18315 1 3.39293L1 13.0229C1 13.6277 1.34667 14.1313 1.77218 14.4865C2.1977 14.8417 2.72811 15.1094 3.35012 15.3264C4.59415 15.7604 6.21369 16 8 16C9.7863 16 11.4058 15.7604 12.6499 15.3264C13.2719 15.1094 13.8023 14.8417 14.2278 14.4865C14.6533 14.1313 15 13.6277 15 13.0229V7.03534C14.997 6.82557 14.9108 6.62539 14.76 6.47809C14.6092 6.33079 14.406 6.24822 14.1942 6.24822C13.9825 6.24822 13.7793 6.33079 13.6285 6.47809C13.4777 6.62539 13.3915 6.82557 13.3885 7.03534C13.3885 7.04439 13.397 7.11653 13.1954 7.28482C12.9939 7.45311 12.6119 7.65951 12.1127 7.83368C11.1143 8.18205 9.63562 8.4158 8 8.4158C6.5091 8.4158 5.15335 8.22131 4.16427 7.92516C3.17518 7.62903 2.637 7.1542 2.61151 7.09355V5.62162C2.83132 5.74712 3.05774 5.86567 3.30815 5.97089C4.56509 6.4991 6.19674 6.8025 8 6.8025C9.80325 6.8025 11.4434 6.49873 12.7002 5.97089C13.3287 5.70699 13.861 5.38723 14.2782 4.97297C14.6954 4.55872 15 4.01499 15 3.40125C15 2.7875 14.6954 2.23545 14.2782 1.82121C13.861 1.40696 13.3287 1.0872 12.7002 0.823285C11.4434 0.295459 9.80325 0 8 0ZM2.61151 9.01455C2.95463 9.17268 3.28608 9.3331 3.69424 9.4553C4.8834 9.81136 6.37175 10.0125 8 10.0125C9.7863 10.0125 11.4058 9.77296 12.6499 9.33888C12.916 9.246 13.1566 9.13591 13.3885 9.02287V10.3035C13.3901 10.295 13.3529 10.411 13.1199 10.578C12.8869 10.7449 12.4945 10.9324 11.9952 11.0936C10.9966 11.416 9.57141 11.6341 8 11.6341C6.42859 11.6341 5.00341 11.416 4.0048 11.0936C3.50549 10.9324 3.11312 10.7449 2.8801 10.578C2.64707 10.411 2.60992 10.295 2.61151 10.3035V9.01455ZM2.61151 12.2661C2.88407 12.3968 3.17843 12.5112 3.5012 12.6154C4.72077 13.0091 6.28382 13.2308 8 13.2308C9.71618 13.2308 11.2792 13.0091 12.4988 12.6154C12.8212 12.5113 13.1139 12.3966 13.3885 12.2661V13.0229C13.3885 13.0317 13.397 13.0958 13.1954 13.264C12.9939 13.4323 12.6119 13.6387 12.1127 13.8129C11.1143 14.1612 9.63562 14.4033 8 14.4033C6.36437 14.4033 4.88572 14.1612 3.88729 13.8129C3.38808 13.6387 3.01448 13.4323 2.81295 13.264C2.61142 13.0958 2.61151 13.0317 2.61151 13.0229V12.2661Z"
          fill="currentColor"/>
  </g>
</svg>

'''
'''--- assets/icons/stateAlert.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M9.75 10.5H8.25V6.75H9.75V10.5ZM9.75 13.5H8.25V12H9.75V13.5ZM0.75 15.75H17.25L9 1.5L0.75 15.75Z" fill="#FF8743"/>
</svg>

'''
'''--- assets/icons/statusSuccess.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M14.6673 7.38674V8.00007C14.6665 9.43769 14.201 10.8365 13.3402 11.988C12.4794 13.1394 11.2695 13.9817 9.89089 14.3893C8.51227 14.797 7.03882 14.748 5.6903 14.2498C4.34177 13.7516 3.19042 12.8308 2.40796 11.6248C1.6255 10.4188 1.25385 8.99212 1.34844 7.55762C1.44303 6.12312 1.99879 4.75762 2.93284 3.66479C3.86689 2.57195 5.12917 1.81033 6.53144 1.4935C7.93371 1.17668 9.40083 1.32163 10.714 1.90674" stroke="#201F1F" stroke-width="1.5" stroke-linejoin="round"/>
    <path d="M14.6667 2.66669L8 9.34002L6 7.34002" stroke="#201F1F" stroke-width="1.5" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/telegram.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M11.5466 13.6549C11.7255 13.7816 11.956 13.8132 12.1616 13.7355C12.3671 13.6571 12.5182 13.4816 12.5638 13.2688C13.0465 11 14.2176 5.25733 14.6571 3.19349C14.6904 3.03793 14.6348 2.87627 14.5126 2.77238C14.3904 2.6685 14.221 2.6385 14.0699 2.69461C11.7405 3.55681 4.56673 6.24842 1.63458 7.33339C1.44847 7.40228 1.32736 7.58116 1.33347 7.77727C1.34014 7.97393 1.47236 8.14448 1.66291 8.2017C2.97788 8.59503 4.70395 9.14224 4.70395 9.14224C4.70395 9.14224 5.5106 11.5783 5.93115 12.8172C5.98392 12.9727 6.10559 13.0949 6.26614 13.1371C6.42614 13.1788 6.59724 13.1349 6.71668 13.0222C7.39222 12.3844 8.43665 11.3983 8.43665 11.3983C8.43665 11.3983 10.421 12.8533 11.5466 13.6549ZM5.43005 8.83447L6.3628 11.9111L6.57002 9.96278C6.57002 9.96278 10.1738 6.71229 12.2282 4.85956C12.2882 4.80512 12.2966 4.71401 12.2466 4.65012C12.1971 4.58623 12.106 4.57123 12.0377 4.61456C9.65662 6.13509 5.43005 8.83447 5.43005 8.83447Z" fill="#595959"/>
</svg>

'''
'''--- assets/icons/timeline.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M3 16.5C3 16.8978 3.15804 17.2794 3.43934 17.5607C3.72064 17.842 4.10218 18 4.5 18L8.5 18C8.89782 18 9.27936 17.842 9.56066 17.5607C9.84196 17.2794 10 16.8978 10 16.5L10 7.5C10 7.10218 9.84196 6.72064 9.56066 6.43934C9.27936 6.15804 8.89782 6 8.5 6L4.5 6C4.10217 6 3.72064 6.15804 3.43934 6.43934C3.15803 6.72064 3 7.10218 3 7.5L3 16.5ZM11 16.5C11 16.8978 11.158 17.2794 11.4393 17.5607C11.7206 17.842 12.1022 18 12.5 18L16.5 18C16.8978 18 17.2794 17.842 17.5607 17.5607C17.842 17.2794 18 16.8978 18 16.5L18 7.5C18 7.10218 17.842 6.72064 17.5607 6.43934C17.2794 6.15803 16.8978 6 16.5 6L12.5 6C12.1022 6 11.7206 6.15803 11.4393 6.43934C11.158 6.72064 11 7.10218 11 7.5L11 16.5ZM12.437 3C12.5127 3.29554 12.5199 3.60447 12.458 3.90321C12.3961 4.20196 12.2668 4.48262 12.08 4.72379C11.8931 4.96495 11.6537 5.16025 11.3798 5.29477C11.106 5.42929 10.8051 5.49949 10.5 5.5C10.0565 5.50011 9.62558 5.35282 9.27495 5.08129C8.92431 4.80976 8.67387 4.4294 8.563 4C8.47854 3.67202 8.47854 3.32798 8.563 3C8.6735 2.57024 8.92378 2.18943 9.27445 1.91751C9.62512 1.6456 10.0563 1.49803 10.5 1.49803C10.9437 1.49803 11.3749 1.6456 11.7255 1.91751C12.0762 2.18943 12.3265 2.57024 12.437 3ZM3 3.5C3 3.36739 3.05268 3.24021 3.14645 3.14645C3.24021 3.05268 3.36739 3 3.5 3L7.541 3C7.48543 3.33102 7.48543 3.66898 7.541 4L3.5 4C3.36739 4 3.24021 3.94732 3.14645 3.85355C3.05268 3.75979 3 3.63261 3 3.5ZM13.5 3.5C13.5 3.67 13.486 3.837 13.459 4L17.5 4C17.6326 4 17.7598 3.94732 17.8536 3.85355C17.9473 3.75978 18 3.63261 18 3.5C18 3.36739 17.9473 3.24021 17.8536 3.14645C17.7598 3.05268 17.6326 3 17.5 3L13.459 3C13.486 3.163 13.5 3.33 13.5 3.5Z" fill="#C1B0F1"/>
</svg>

'''
'''--- assets/icons/token-near-big.svg ---
<svg width="34" height="34" viewBox="0 0 34 34" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="17" cy="17" r="17" fill="#201F1F"/>
    <path d="M22.8699 8.27076L18.8099 14.3001C18.7441 14.3871 18.7137 14.4958 18.7248 14.6044C18.7358 14.7129 18.7876 14.8133 18.8696 14.8852C18.9516 14.9571 19.0577 14.9953 19.1667 14.9921C19.2757 14.9889 19.3795 14.9445 19.4571 14.8678L23.4524 11.4139C23.4754 11.3927 23.5042 11.3788 23.535 11.3739C23.5659 11.3689 23.5975 11.3731 23.626 11.386C23.6545 11.3989 23.6786 11.4198 23.6952 11.4463C23.7119 11.4727 23.7205 11.5035 23.7199 11.5348V22.391C23.7196 22.4239 23.7092 22.456 23.6902 22.4829C23.6711 22.5098 23.6444 22.5303 23.6134 22.5415C23.5824 22.5528 23.5488 22.5543 23.5169 22.546C23.4851 22.5376 23.4565 22.5197 23.4351 22.4946L11.3543 8.03114C11.1614 7.79894 10.9202 7.61177 10.6474 7.48274C10.3746 7.35371 10.0769 7.28596 9.77516 7.28422H9.35449C8.8058 7.28422 8.27958 7.50233 7.89159 7.89057C7.50361 8.27881 7.28564 8.80538 7.28564 9.35444V24.6425C7.28564 25.1916 7.50361 25.7182 7.89159 26.1064C8.27958 26.4946 8.8058 26.7128 9.35449 26.7128C9.70803 26.7127 10.0557 26.622 10.3642 26.4493C10.6728 26.2766 10.9319 26.0276 11.117 25.7262L15.177 19.6969C15.2428 19.6099 15.2732 19.5011 15.2622 19.3926C15.2511 19.284 15.1993 19.1837 15.1174 19.1118C15.0354 19.0398 14.9292 19.0016 14.8202 19.0049C14.7112 19.0081 14.6074 19.0525 14.5298 19.1291L10.5345 22.5831C10.5115 22.6042 10.4828 22.6182 10.4519 22.6231C10.421 22.6281 10.3894 22.6238 10.3609 22.611C10.3324 22.5981 10.3084 22.5771 10.2917 22.5507C10.275 22.5243 10.2664 22.4935 10.267 22.4622V11.6168C10.2673 11.5838 10.2777 11.5517 10.2967 11.5248C10.3158 11.4979 10.3426 11.4775 10.3735 11.4662C10.4045 11.455 10.4381 11.4534 10.47 11.4618C10.5018 11.4702 10.5304 11.4881 10.5518 11.5132L22.6326 25.9766C22.827 26.2067 23.0691 26.3916 23.3422 26.5184C23.6154 26.6452 23.9128 26.7108 24.2139 26.7106H24.6454C24.9171 26.7106 25.1861 26.657 25.4371 26.553C25.6881 26.449 25.9162 26.2965 26.1083 26.1042C26.3004 25.912 26.4528 25.6838 26.5567 25.4326C26.6607 25.1814 26.7142 24.9122 26.7142 24.6404V9.35444C26.7142 9.08148 26.6603 8.81122 26.5555 8.5592C26.4507 8.30718 26.2972 8.07838 26.1037 7.88597C25.9102 7.69357 25.6806 7.54135 25.4281 7.43807C25.1756 7.3348 24.9052 7.28251 24.6324 7.28422C24.2789 7.28426 23.9313 7.37496 23.6227 7.54767C23.3142 7.72038 23.055 7.96932 22.8699 8.27076Z" fill="white"/>
</svg>

'''
'''--- assets/icons/token-near.svg ---
<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M25.6682 1.62495L18.9811 11.5556C18.8728 11.6989 18.8227 11.878 18.8409 12.0568C18.8591 12.2356 18.9443 12.4009 19.0794 12.5193C19.2145 12.6378 19.3893 12.7007 19.5689 12.6954C19.7484 12.6901 19.9193 12.617 20.0471 12.4907L26.6276 6.80183C26.6655 6.76701 26.7128 6.74411 26.7637 6.73595C26.8145 6.7278 26.8666 6.73475 26.9135 6.75596C26.9604 6.77716 27.0001 6.81167 27.0276 6.85522C27.0551 6.89877 27.0692 6.94944 27.0682 7.00094V24.8818C27.0676 24.9361 27.0506 24.9889 27.0192 25.0332C26.9879 25.0775 26.9438 25.1112 26.8928 25.1298C26.8418 25.1483 26.7864 25.1509 26.7339 25.137C26.6814 25.1232 26.6344 25.0937 26.5992 25.0525L6.70131 1.23029C6.38366 0.847843 5.98625 0.539557 5.53695 0.327042C5.08765 0.114527 4.59733 0.00292765 4.10038 6.6742e-05H3.40751C2.50378 6.6742e-05 1.63707 0.359309 0.998035 0.998765C0.359004 1.63822 0 2.50551 0 3.40984V28.5902C0 29.4946 0.359004 30.3618 0.998035 31.0013C1.63707 31.6408 2.50378 32 3.40751 32C3.98981 31.9999 4.56238 31.8505 5.07058 31.5661C5.57877 31.2816 6.00565 30.8716 6.31046 30.3751L12.9976 20.4445C13.1059 20.3011 13.156 20.1221 13.1378 19.9433C13.1196 19.7645 13.0343 19.5992 12.8993 19.4807C12.7642 19.3622 12.5893 19.2993 12.4098 19.3046C12.2303 19.31 12.0594 19.3831 11.9316 19.5094L5.3511 25.1982C5.31316 25.2331 5.26584 25.256 5.21501 25.2641C5.16419 25.2723 5.11208 25.2653 5.06517 25.2441C5.01825 25.2229 4.97859 25.1884 4.9511 25.1448C4.9236 25.1013 4.90949 25.0506 4.9105 24.9991V7.13605C4.91104 7.08176 4.92812 7.02893 4.95947 6.98462C4.99081 6.94031 5.03492 6.90662 5.08591 6.88807C5.1369 6.86952 5.19233 6.86698 5.2448 6.88079C5.29726 6.89461 5.34427 6.92412 5.37952 6.96538L25.2774 30.7876C25.5974 31.1666 25.9963 31.4711 26.4462 31.6799C26.896 31.8887 27.386 31.9967 27.8819 31.9964H28.5925C29.04 31.9964 29.4831 31.9082 29.8965 31.7369C30.3099 31.5655 30.6855 31.3144 31.002 30.9977C31.3184 30.6811 31.5694 30.3052 31.7406 29.8915C31.9119 29.4778 32 29.0345 32 28.5867V3.40984C32 2.96026 31.9112 2.51512 31.7386 2.10003C31.566 1.68494 31.3131 1.3081 30.9944 0.991191C30.6758 0.674285 30.2976 0.423569 29.8817 0.253472C29.4658 0.0833747 29.0204 -0.00274605 28.5712 6.6742e-05C27.9889 0.000136647 27.4163 0.149528 26.9081 0.433985C26.3999 0.718442 25.973 1.12847 25.6682 1.62495Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/token-wizard.svg ---
<svg width="700pt" height="700pt" version="1.1" viewBox="0 0 700 700" xmlns="http://www.w3.org/2000/svg">
    <g>
        <path d="m302.75 147.58-21 113.75h105.58c19.25 0 33.832 17.5 30.332 36.75l-28 144.08c-2.918 15.75-16.332 26.832-32.668 26.832l-115.5 0.003906c-9.918 0-19.25-5.25-25.082-13.418-5.25-8.168-14-12.832-23.918-12.832h-32.082v-170.33c0-14.582 8.168-28.582 21-35.582l1.75-1.168c29.75-16.918 53.082-42.582 66.5-74.082l9.918-23.332c4.082-9.332 12.832-15.168 22.75-15.168h0.58203c13.414-0.003907 22.75 12.246 19.832 24.496z"/>
        <path d="m117.25 238.58h-41.418v230.42h41.418c9.918 0 18.668-8.168 18.668-18.668v-193.66c0-9.918-8.168-18.086-18.668-18.086z"/>
        <path d="m582.75 304.5h41.418v-190.17h-41.418c-9.918 0-18.668 8.168-18.668 18.668v152.83c0 10.5 8.168 18.668 18.668 18.668z"/>
        <path d="m517.42 135.92c-7 0-14-1.75-18.082-6.418-5.25-6.418-12.832-10.5-21-10.5h-103.83c-12.832 0-24.5 7.582-26.832 19.832l-18.082 91c-1.168 5.25 2.918 9.918 8.168 9.918h63.582c27.418 0 47.832 25.082 42.582 51.918l-5.832 29.168-11.082 61.25c-2.918 9.918 5.25 22.168 15.168 22.168h0.58203c8.168 0 15.75-7 18.668-14.582l8.168-20.418c18.668-39.668 53.082-63 53.082-63 10.5-5.832 14-17.5 14-29.75v-140l-19.258-0.003906z"/>
    </g>
</svg>

'''
'''--- assets/icons/tokenDefaultIcon.svg ---
<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="16" cy="16" r="16" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/toolbar-editor-bold.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M10.125 12.625H7.5V10.375H10.125C10.4234 10.375 10.7095 10.4935 10.9205 10.7045C11.1315 10.9155 11.25 11.2016 11.25 11.5C11.25 11.7984 11.1315 12.0845 10.9205 12.2955C10.7095 12.5065 10.4234 12.625 10.125 12.625ZM7.5 5.875H9.75C10.0484 5.875 10.3345 5.99353 10.5455 6.2045C10.7565 6.41548 10.875 6.70163 10.875 7C10.875 7.29837 10.7565 7.58452 10.5455 7.7955C10.3345 8.00647 10.0484 8.125 9.75 8.125H7.5V5.875ZM11.7 9.0925C12.4275 8.5825 12.9375 7.75 12.9375 7C12.9375 5.305 11.625 4 9.9375 4H5.25V14.5H10.53C12.105 14.5 13.3125 13.225 13.3125 11.6575C13.3125 10.5175 12.6675 9.5425 11.7 9.0925Z" fill="black"/>
</svg>

'''
'''--- assets/icons/toolbar-editor-image.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M2 4.8C2 4.05739 2.295 3.3452 2.8201 2.8201C3.3452 2.295 4.05739 2 4.8 2H13.2C13.9426 2 14.6548 2.295 15.1799 2.8201C15.705 3.3452 16 4.05739 16 4.8V13.2C16 13.9426 15.705 14.6548 15.1799 15.1799C14.6548 15.705 13.9426 16 13.2 16H4.8C4.05739 16 3.3452 15.705 2.8201 15.1799C2.295 14.6548 2 13.9426 2 13.2V4.8Z" stroke="black" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M6.54688 8.30005C7.51337 8.30005 8.29688 7.51655 8.29688 6.55005C8.29688 5.58355 7.51337 4.80005 6.54688 4.80005C5.58038 4.80005 4.79688 5.58355 4.79688 6.55005C4.79688 7.51655 5.58038 8.30005 6.54688 8.30005Z" stroke="black" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M10.7651 9.43471L4.79688 16H13.29C14.0079 16 14.6964 15.7148 15.204 15.2072C15.7117 14.6995 15.9969 14.011 15.9969 13.2931V13.2C15.9969 12.8738 15.8744 12.7485 15.6539 12.507L12.8329 9.43051C12.7014 9.28709 12.5415 9.17265 12.3633 9.09449C12.1851 9.01633 11.9926 8.97617 11.798 8.97657C11.6035 8.97696 11.4111 9.01791 11.2333 9.09679C11.0554 9.17567 10.896 9.29076 10.7651 9.43471V9.43471Z" stroke="black" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/toolbar-editor-italic.svg ---
<svg width="19" height="18" viewBox="0 0 19 18" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M7.70312 4V6.25H9.36063L6.79562 12.25H4.70312V14.5H10.7031V12.25H9.04562L11.6106 6.25H13.7031V4H7.70312Z" fill="black"/>
</svg>

'''
'''--- assets/icons/toolbar-editor-list.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M4.5 3.59998H17.1" stroke="black" stroke-width="1.8" stroke-linecap="round"/>
  <path d="M4.5 9H17.1" stroke="black" stroke-width="1.8" stroke-linecap="round"/>
  <path d="M4.5 14.4H17.1" stroke="black" stroke-width="1.8" stroke-linecap="round"/>
  <circle cx="0.9" cy="14.4" r="0.9" fill="#6038D0"/>
  <circle cx="0.9" cy="8.99998" r="0.9" fill="#6038D0"/>
  <circle cx="0.9" cy="3.59995" r="0.9" fill="#6038D0"/>
</svg>

'''
'''--- assets/icons/transfer.svg ---
<svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5 12.5H19" stroke="#201F1F" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M12 5.5L19 12.5L12 19.5" stroke="#201F1F" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/treasury-one.colors.svg ---
<svg width="165" height="85" viewBox="0 0 165 85" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="81.6587" cy="45.1156" r="30.6587" fill="#19D992"/>
    <path d="M130.597 45.7944C130.697 45.6948 130.697 45.5334 130.597 45.4338L128.975 43.811C128.875 43.7114 128.714 43.7114 128.614 43.811C128.514 43.9106 128.514 44.072 128.614 44.1716L130.057 45.6141L128.614 47.0566C128.514 47.1562 128.514 47.3176 128.614 47.4172C128.714 47.5168 128.875 47.5168 128.975 47.4172L130.597 45.7944ZM110.477 45.8691H130.417V45.3591H110.477V45.8691Z" fill="#201F1F"/>
    <path d="M32.3 45.7944C32.2004 45.6948 32.2004 45.5334 32.3 45.4338L33.9228 43.811C34.0224 43.7114 34.1838 43.7114 34.2834 43.811C34.383 43.9106 34.383 44.072 34.2834 44.1716L32.8409 45.6141L34.2834 47.0566C34.383 47.1562 34.383 47.3176 34.2834 47.4172C34.1838 47.5168 34.0224 47.5168 33.9228 47.4172L32.3 45.7944ZM52.4209 45.8691H32.4803V45.3591H52.4209V45.8691Z" fill="#201F1F"/>
    <path d="M27.0071 8.38095C26.871 8.4174 26.7903 8.55723 26.8268 8.69326L27.4207 10.9101C27.4572 11.0461 27.597 11.1268 27.7331 11.0904C27.8691 11.0539 27.9498 10.9141 27.9134 10.7781L27.3854 8.80758L29.3559 8.27959C29.4919 8.24314 29.5726 8.10331 29.5362 7.96728C29.4997 7.83124 29.3599 7.75051 29.2239 7.78696L27.0071 8.38095ZM58.7974 26.6489L27.2006 8.40643L26.9456 8.8481L58.5424 27.0906L58.7974 26.6489Z" fill="#201F1F"/>
    <path d="M24.9338 79.3559C24.7978 79.3194 24.7171 79.1796 24.7535 79.0436L25.3475 76.8268C25.384 76.6907 25.5238 76.61 25.6598 76.6465C25.7958 76.6829 25.8766 76.8227 25.8401 76.9588L25.3121 78.9293L27.2826 79.4573C27.4187 79.4937 27.4994 79.6335 27.4629 79.7696C27.4265 79.9056 27.2867 79.9863 27.1506 79.9499L24.9338 79.3559ZM56.7242 61.088L25.1273 79.3304L24.8723 78.8887L56.4692 60.6463L56.7242 61.088Z" fill="#201F1F"/>
    <path d="M136.915 79.8726C136.952 80.0087 136.871 80.1485 136.735 80.1849L134.518 80.7789C134.382 80.8154 134.242 80.7346 134.206 80.5986C134.17 80.4626 134.25 80.3227 134.386 80.2863L136.357 79.7583L135.829 77.7878C135.792 77.6518 135.873 77.512 136.009 77.4755C136.145 77.4391 136.285 77.5198 136.321 77.6558L136.915 79.8726ZM105.2 61.4753L136.797 79.7178L136.542 80.1595L104.945 61.917L105.2 61.4753Z" fill="#201F1F"/>
    <path d="M134.843 7.8642C134.88 7.72816 134.799 7.58834 134.663 7.55189L132.446 6.9579C132.31 6.92145 132.17 7.00217 132.134 7.13821C132.097 7.27424 132.178 7.41407 132.314 7.45052L134.285 7.97851L133.757 9.949C133.72 10.085 133.801 10.2249 133.937 10.2613C134.073 10.2978 134.213 10.217 134.249 10.081L134.843 7.8642ZM103.127 26.2615L134.724 8.01903L134.469 7.57736L102.873 25.8198L103.127 26.2615Z" fill="#201F1F"/>
    <path d="M80.8197 84.1803C80.9193 84.2799 81.0807 84.2799 81.1803 84.1803L82.8031 82.5575C82.9027 82.4579 82.9027 82.2965 82.8031 82.1969C82.7035 82.0973 82.5421 82.0973 82.4425 82.1969L81 83.6394L79.5575 82.1969C79.4579 82.0973 79.2965 82.0973 79.1969 82.1969C79.0973 82.2965 79.0973 82.4579 79.1969 82.5575L80.8197 84.1803ZM80.745 75.7745L80.745 84L81.255 84L81.255 75.7745L80.745 75.7745Z" fill="#201F1F"/>
    <rect x="51" y="45.6141" width="61.3174" height="30.1602" fill="#19D992"/>
    <path d="M71.6719 43.2706L86.0058 38.1336V49.4019L71.6719 54.5389V43.2706Z" fill="#201F1F"/>
    <path d="M75.4834 39.0549L89.8173 33.9179V45.1862L75.4834 50.3232V39.0549Z" fill="#201F1F"/>
    <line x1="72.4219" y1="43.3349" x2="72.4219" y2="60.0379" stroke="#201F1F" stroke-width="1.5"/>
    <path d="M82.2812 25.9228L70.9483 6.48072L93.614 6.48072L82.2812 25.9228Z" fill="#19D992"/>
    <path d="M14.2019 44.4927C14.2019 48.417 11.0757 51.5908 7.22847 51.5908C3.38122 51.5908 0.255 48.417 0.255 44.4927C0.255 40.5684 3.38122 37.3946 7.22847 37.3946C11.0757 37.3946 14.2019 40.5684 14.2019 44.4927Z" fill="#E1FC31" stroke="#201F1F" stroke-width="0.51"/>
    <circle cx="154.361" cy="71.8159" r="6.97347" fill="#E1FC31" stroke="#201F1F" stroke-width="0.51"/>
    <circle cx="7.22847" cy="36.1424" r="6.97347" fill="#E1FC31" stroke="#201F1F" stroke-width="0.51"/>
    <circle cx="154.361" cy="63.5905" r="6.97347" fill="#E1FC31" stroke="#201F1F" stroke-width="0.51"/>
    <circle cx="7.22847" cy="28.6646" r="6.97347" fill="#E1FC31" stroke="#201F1F" stroke-width="0.51"/>
    <circle cx="154.361" cy="56.1127" r="6.97347" fill="#E1FC31" stroke="#201F1F" stroke-width="0.51"/>
</svg>
'''
'''--- assets/icons/treasury-three.colors.svg ---
<svg width="165" height="84" viewBox="0 0 165 84" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_9711_118108)">
<rect x="7.31738" y="26.9637" width="144.509" height="33.067" rx="3.7" transform="rotate(-2.61159 7.31738 26.9637)" fill="#201F1F"/>
<line y1="-2.775" x2="122.156" y2="-2.775" transform="matrix(0.999414 -0.034231 0.0656687 0.997841 18.1143 45.7254)" stroke="white" stroke-width="5.55"/>
<line y1="-2.775" x2="78.4371" y2="-2.775" transform="matrix(0.999414 -0.0342311 0.0656686 0.997841 18.627 51.8156)" stroke="white" stroke-width="5.55"/>
<path d="M20.9996 26.2445C33.5501 19.9355 61.1984 19.551 91.9784 26.2383C132.219 34.9812 162.575 52.5005 159.779 65.3688C156.983 78.2371 105.28 79.577 50.2586 66.0173L42 63.5" stroke="#201F1F" stroke-width="0.2"/>
<ellipse cx="72.647" cy="69.647" rx="6.36363" ry="6.36364" transform="rotate(-2.61158 72.647 69.647)" fill="#CFF9EA"/>
<path d="M75.7637 68.153L70.5208 68.3922L69.2628 72.2717L74.6443 72.0262C74.7513 72.0214 75.7637 68.153 75.7637 68.153Z" fill="#0C422A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M71.5211 68.3465L72.0251 66.612C72.1315 66.246 72.5758 66.1059 72.8729 66.3446C73.3197 66.7036 73.5914 67.2369 73.6191 67.8094L73.6405 68.2498L76.7175 68.1095C76.7175 68.1095 75.5519 71.9848 75.5981 71.9827L70.2166 72.2281L71.4746 68.3486L71.5211 68.3465Z" fill="#19D992"/>
<ellipse cx="48.647" cy="19.647" rx="6.36363" ry="6.36364" transform="rotate(-2.61158 48.647 19.647)" fill="#FFF3EC"/>
<path d="M45.8876 22.0024L51.1305 21.7633L52.3885 17.8837L47.0071 18.1292C46.9001 18.1341 45.8876 22.0024 45.8876 22.0024Z" fill="#401700"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M50.1533 21.8077L49.7202 23.2982C49.6138 23.6642 49.1695 23.8043 48.8725 23.5656C48.4256 23.2066 48.154 22.6734 48.1262 22.1009L48.1165 21.9006L44.9341 22.0458C44.9341 22.0458 46.0997 18.1705 46.0535 18.1726L51.435 17.9271L50.177 21.8066L50.1533 21.8077Z" fill="#FF8743"/>
<path d="M8.57951 53.8536C4.49934 58.2238 2.73042 61.9468 3.88596 64.5626C7.58895 72.945 39.9213 66.7834 76.1023 50.8002C112.283 34.8171 138.612 15.0649 134.909 6.68243C131.5 -1.03303 98.9958 5.97281 66.4018 19.2181L60.1014 21.6846" stroke="#201F1F" stroke-width="0.2"/>
<ellipse cx="76.9882" cy="14.9882" rx="3.81818" ry="3.81818" transform="rotate(-2.61159 76.9882 14.9882)" fill="#CFF9EA"/>
<path d="M78.8575 14.0918L75.7117 14.2353L74.9569 16.563L78.1858 16.4158C78.25 16.4128 78.8575 14.0918 78.8575 14.0918Z" fill="#0C422A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M76.3123 14.2079L76.6147 13.1672C76.6785 12.9477 76.9451 12.8636 77.1233 13.0068C77.3914 13.2222 77.5544 13.5421 77.5711 13.8857L77.5839 14.1499L79.4297 14.0657C79.4297 14.0657 78.7304 16.3909 78.7581 16.3896L75.5292 16.5369L76.284 14.2092L76.3123 14.2079Z" fill="#19D992"/>
<ellipse cx="24.9882" cy="66.9882" rx="3.81818" ry="3.81818" transform="rotate(-2.61159 24.9882 66.9882)" fill="#FFF3EC"/>
<path d="M23.332 68.4014L26.4777 68.2579L27.2325 65.9302L24.0036 66.0775C23.9395 66.0804 23.332 68.4014 23.332 68.4014Z" fill="#401700"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M25.891 68.2846L25.6311 69.1789C25.5673 69.3985 25.3007 69.4825 25.1225 69.3393C24.8544 69.1239 24.6914 68.804 24.6747 68.4605L24.6689 68.3403L22.7595 68.4274C22.7595 68.4274 23.4588 66.1022 23.4311 66.1035L26.66 65.9562L25.9052 68.2839L25.891 68.2846Z" fill="#FF8743"/>
<ellipse cx="96.9882" cy="8.9882" rx="3.81818" ry="3.81818" transform="rotate(-2.61159 96.9882 8.9882)" fill="#FFF3EC"/>
<path d="M95.332 10.4015L98.4777 10.258L99.2325 7.93025L96.0036 8.07753C95.9395 8.08046 95.332 10.4015 95.332 10.4015Z" fill="#401700"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M97.891 10.2846L97.6311 11.1789C97.5673 11.3984 97.3007 11.4825 97.1225 11.3393C96.8544 11.1239 96.6914 10.8039 96.6747 10.4604L96.6689 10.3403L94.7595 10.4274C94.7595 10.4274 95.4588 8.10221 95.4311 8.10348L98.66 7.9562L97.9052 10.2839L97.891 10.2846Z" fill="#FF8743"/>
<mask id="mask0_9711_118108" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="16" y="32" width="7" height="7">
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.123 32.1156L17.6768 33.9369L17.7176 34.833L16.5354 35.3173L16.6969 38.8605L21.1432 37.0392L21.1023 36.1431L22.2845 35.6588L22.123 32.1156Z" fill="#ADD5E5"/>
</mask>
<g mask="url(#mask0_9711_118108)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.123 32.1156L17.6768 33.9369L17.7176 34.833L16.5354 35.3173L16.6969 38.8605L21.1432 37.0392L21.1023 36.1431L22.2845 35.6588L22.123 32.1156Z" fill="white"/>
</g>
<ellipse cx="90.9882" cy="42.9882" rx="3.81818" ry="3.81818" transform="rotate(-2.61159 90.9882 42.9882)" fill="#CFF9EA"/>
<path d="M92.8575 42.0918L89.7117 42.2353L88.9569 44.563L92.1858 44.4157C92.25 44.4128 92.8575 42.0918 92.8575 42.0918Z" fill="#0C422A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M90.3123 42.2079L90.6147 41.1672C90.6785 40.9477 90.9451 40.8636 91.1233 41.0068C91.3914 41.2222 91.5544 41.5421 91.5711 41.8857L91.5839 42.1499L93.4297 42.0657C93.4297 42.0657 92.7304 44.3909 92.7581 44.3896L89.5292 44.5369L90.284 42.2092L90.3123 42.2079Z" fill="#19D992"/>
</g>
<defs>
<clipPath id="clip0_9711_118108">
<rect width="165" height="84" fill="white"/>
</clipPath>
</defs>
</svg>

'''
'''--- assets/icons/treasury-two.colors.svg ---
<svg width="166" height="84" viewBox="0 0 166 84" fill="none" xmlns="http://www.w3.org/2000/svg">
    <mask id="path-1-inside-1_9711_117823" fill="white">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M119.173 -6.10352e-05L74.4239 16.0372V24.9338L62.5254 29.198V64.3764L107.274 48.3392V39.4426L119.173 35.1784V-6.10352e-05Z"/>
    </mask>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M119.173 -6.10352e-05L74.4239 16.0372V24.9338L62.5254 29.198V64.3764L107.274 48.3392V39.4426L119.173 35.1784V-6.10352e-05Z" fill="#201F1F"/>
    <path d="M74.4239 16.0372L74.3306 15.7769L74.1474 15.8426V16.0372H74.4239ZM119.173 -6.10352e-05H119.449V-0.392858L119.08 -0.26034L119.173 -6.10352e-05ZM74.4239 24.9338L74.5172 25.1941L74.7004 25.1284V24.9338H74.4239ZM62.5254 29.198L62.4321 28.9377L62.2489 29.0034V29.198H62.5254ZM62.5254 64.3764H62.2489V64.7692L62.6187 64.6367L62.5254 64.3764ZM107.274 48.3392L107.368 48.5995L107.551 48.5338V48.3392H107.274ZM107.274 39.4426L107.181 39.1823L106.998 39.248V39.4426H107.274ZM119.173 35.1784L119.266 35.4387L119.449 35.373V35.1784H119.173ZM74.5172 16.2975L119.266 0.260218L119.08 -0.26034L74.3306 15.7769L74.5172 16.2975ZM74.7004 24.9338V16.0372H74.1474V24.9338H74.7004ZM62.6187 29.4583L74.5172 25.1941L74.3306 24.6735L62.4321 28.9377L62.6187 29.4583ZM62.8019 64.3764V29.198H62.2489V64.3764H62.8019ZM107.181 48.0789L62.4321 64.1162L62.6187 64.6367L107.368 48.5995L107.181 48.0789ZM106.998 39.4426V48.3392H107.551V39.4426H106.998ZM119.08 34.9181L107.181 39.1823L107.368 39.7029L119.266 35.4387L119.08 34.9181ZM118.896 -6.10352e-05V35.1784H119.449V-6.10352e-05H118.896Z" fill="#201F1F" mask="url(#path-1-inside-1_9711_117823)"/>
    <path d="M96.2733 24.9873C131.278 22.9007 158.266 28.9168 159.609 40.1233C161.174 53.1808 127.332 68.3404 84.0191 73.9832C40.7065 79.626 4.32571 73.6152 2.76029 60.5576C1.54788 50.4446 21.575 39.0706 50.7913 31.8336C57.7563 30.0837 59.8273 29.6819 65 28.5" stroke="#201F1F" stroke-width="0.414734"/>
    <circle cx="24.801" cy="72.0564" r="6.7847" fill="#E1FC31" stroke="#201F1F" stroke-width="0.505177"/>
    <path d="M29.1999 72.0565C29.1999 74.4857 27.2307 76.4549 24.8016 76.4549C22.3725 76.4549 20.4033 74.4857 20.4033 72.0565" stroke="#201F1F" stroke-width="0.414734"/>
    <circle cx="137.037" cy="27.0373" r="6.7847" fill="#E1FC31" stroke="#201F1F" stroke-width="0.505177"/>
    <path d="M141.435 27.0375C141.435 29.4666 139.466 31.4358 137.037 31.4358C134.608 31.4358 132.639 29.4666 132.639 27.0375" stroke="#201F1F" stroke-width="0.414734"/>
    <circle cx="158.037" cy="46.0373" r="6.7847" fill="#E1FC31" stroke="#201F1F" stroke-width="0.505177"/>
    <path d="M162.435 46.0375C162.435 48.4666 160.466 50.4358 158.037 50.4358C155.608 50.4358 153.639 48.4666 153.639 46.0375" stroke="#201F1F" stroke-width="0.414734"/>
    <circle cx="99.9523" cy="71.7219" r="6.7847" fill="#E1FC31" stroke="#201F1F" stroke-width="0.505177"/>
    <path d="M104.35 71.722C104.35 74.1512 102.381 76.1204 99.952 76.1204C97.5229 76.1204 95.5537 74.1512 95.5537 71.722" stroke="#201F1F" stroke-width="0.414734"/>
    <circle cx="129.037" cy="64.0373" r="6.7847" fill="#E1FC31" stroke="#201F1F" stroke-width="0.505177"/>
    <path d="M133.436 64.0375C133.436 66.4666 131.467 68.4358 129.038 68.4358C126.609 68.4358 124.64 66.4666 124.64 64.0375" stroke="#201F1F" stroke-width="0.414734"/>
    <circle cx="31.7228" cy="36.7825" r="6.7847" fill="#E1FC31" stroke="#201F1F" stroke-width="0.505177"/>
    <path d="M36.1199 36.7826C36.1199 39.2117 34.1507 41.1809 31.7215 41.1809C29.2924 41.1809 27.3232 39.2117 27.3232 36.7826" stroke="#201F1F" stroke-width="0.414734"/>
    <circle cx="41.9035" cy="74.198" r="6.7847" fill="#E1FC31" stroke="#201F1F" stroke-width="0.505177"/>
    <path d="M46.3015 74.1982C46.3015 76.6273 44.3323 78.5965 41.9032 78.5965C39.4741 78.5965 37.5049 76.6273 37.5049 74.1982" stroke="#201F1F" stroke-width="0.414734"/>
</svg>

'''
'''--- assets/icons/tweet.svg ---
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M15.0667 3.42063C14.5369 3.66181 13.9675 3.82424 13.3699 3.89746C13.9801 3.52276 14.4487 2.92904 14.6689 2.22149C14.0983 2.5685 13.4659 2.82075 12.7927 2.95673C12.2545 2.36792 11.4859 2 10.6363 2C8.72895 2 7.32735 3.82486 7.75815 5.71924C5.30355 5.59311 3.12675 4.3872 1.66935 2.55435C0.895348 3.91591 1.26795 5.69709 2.58315 6.59906C2.09955 6.58306 1.64355 6.44709 1.24575 6.22006C1.21335 7.62346 2.19435 8.93642 3.61515 9.22867C3.19935 9.34434 2.74395 9.37141 2.28075 9.28035C2.65635 10.4838 3.74715 11.3593 5.04075 11.3839C3.79875 12.3825 2.23395 12.8285 0.666748 12.639C1.97415 13.4986 3.52755 14 5.19555 14C10.6807 14 13.7797 9.24959 13.5925 4.98892C14.1697 4.56132 14.6707 4.02789 15.0667 3.42063Z" fill="#595959"/>
</svg>

'''
'''--- assets/icons/upgrade.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M12.2409 3.936C16.4769 3.936 19.9569 7.068 20.5449 11.136H23.0409L18.8409 15.936L14.6409 11.136H17.4249C17.1565 9.96133 16.4977 8.91238 15.5561 8.16044C14.6146 7.40851 13.4459 6.99802 12.2409 6.996C10.5009 6.996 8.96494 7.848 7.99294 9.132L5.94094 6.792C6.72635 5.89387 7.69495 5.1743 8.78162 4.68168C9.86829 4.18906 11.0478 3.9348 12.2409 3.936ZM11.7609 20.064C7.53694 20.064 4.04494 16.932 3.45694 12.864H0.960938L5.16094 8.064C6.56494 9.66 7.95694 11.268 9.36094 12.864H6.57694C6.8454 14.0387 7.5042 15.0876 8.44575 15.8396C9.3873 16.5915 10.556 17.002 11.7609 17.004C13.5009 17.004 15.0369 16.152 16.0089 14.868L18.0609 17.208C17.2763 18.107 16.3078 18.8272 15.221 19.3199C14.1342 19.8126 12.9542 20.0664 11.7609 20.064Z" fill="#201F1F"/>
</svg>

'''
'''--- assets/icons/upload.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7 9L12 13M12 13L17 9M12 13L12 4" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M2.6665 16.666V19.9993H21.3332V16.666" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- assets/icons/uploadFile.svg ---
<svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M53.8845 23.1111V22.5422C53.7632 17.7262 51.7416 13.1537 48.261 9.82299C44.7804 6.49223 40.1234 4.67373 35.3067 4.76447C31.7194 4.7352 28.2002 5.74317 25.1723 7.6671C22.1445 9.59102 19.7372 12.3489 18.24 15.6089C14.0245 16.0792 10.1283 18.0803 7.29046 21.2328C4.45261 24.3852 2.87056 28.4696 2.84445 32.7111C2.84911 34.9585 3.29668 37.183 4.16157 39.2573C5.02647 41.3316 6.29172 43.2151 7.88499 44.8001C9.47827 46.3852 11.3683 47.6406 13.4471 48.4947C15.5259 49.3488 17.7526 49.7848 20 49.7778H26.6667V46.2222H20C16.5638 46.0363 13.3259 44.5546 10.9388 42.0759C8.5518 39.5971 7.19317 36.3057 7.1368 32.8649C7.08043 29.4241 8.33051 26.0899 10.6351 23.5343C12.9396 20.9787 16.1273 19.3918 19.5556 19.0934H20.7467L21.1556 17.9734C22.2582 15.1096 24.2133 12.6533 26.7568 10.9365C29.3003 9.21963 32.3095 8.32496 35.3778 8.37336C39.2516 8.28234 43.0045 9.72618 45.8184 12.3902C48.6323 15.0543 50.2791 18.7225 50.4 22.5956C50.4245 23.0693 50.4245 23.544 50.4 24.0178L50.2578 25.2978L51.4133 25.8311C53.6483 26.838 55.4683 28.584 56.567 30.7752C57.6658 32.9665 57.9763 35.4693 57.4463 37.8627C56.9163 40.256 55.5782 42.3937 53.657 43.9162C51.7358 45.4387 49.3489 46.2531 46.8978 46.2222H37.3333V49.7778H46.8978C50.0595 49.8005 53.1387 48.7689 55.6486 46.8462C58.1586 44.9234 59.9563 42.2191 60.7577 39.1605C61.559 36.1019 61.3183 32.8635 60.0736 29.957C58.8289 27.0505 56.6511 24.6417 53.8845 23.1111V23.1111Z" fill="#C1B0F1"/>
    <path d="M39.6089 38.8442C39.9635 38.8498 40.3117 38.7493 40.6088 38.5554C40.9058 38.3616 41.1381 38.0834 41.2757 37.7565C41.4133 37.4296 41.45 37.069 41.3811 36.7211C41.3122 36.3732 41.1408 36.0539 40.8889 35.8042L32 26.9153L23.1111 35.8042C22.8199 36.1443 22.6677 36.5817 22.685 37.0292C22.7023 37.4766 22.8877 37.901 23.2044 38.2176C23.521 38.5342 23.9454 38.7197 24.3928 38.737C24.8402 38.7543 25.2777 38.6021 25.6178 38.3108L30.2222 33.7775V55.5553C30.2222 56.0268 30.4095 56.479 30.7429 56.8124C31.0763 57.1458 31.5285 57.3331 32 57.3331C32.4715 57.3331 32.9237 57.1458 33.2571 56.8124C33.5905 56.479 33.7778 56.0268 33.7778 55.5553V33.7775L38.3467 38.3464C38.6851 38.6727 39.1389 38.8516 39.6089 38.8442Z" fill="#C1B0F1"/>
</svg>

'''
'''--- assets/icons/userAccount.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M12 4C13.0609 4 14.0783 4.42143 14.8284 5.17157C15.5786 5.92172 16 6.93913 16 8C16 9.06087 15.5786 10.0783 14.8284 10.8284C14.0783 11.5786 13.0609 12 12 12C10.9391 12 9.92172 11.5786 9.17157 10.8284C8.42143 10.0783 8 9.06087 8 8C8 6.93913 8.42143 5.92172 9.17157 5.17157C9.92172 4.42143 10.9391 4 12 4ZM12 14C16.42 14 20 15.79 20 18V20H4V18C4 15.79 7.58 14 12 14Z" fill="#C1B0F1"/>
</svg>

'''
'''--- assets/icons/voting-dismiss-alt.colors.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M20.25 6H17.25V4.125C17.25 3.29766 16.5773 2.625 15.75 2.625H8.25C7.42266 2.625 6.75 3.29766 6.75 4.125V6H3.75C3.33516 6 3 6.33516 3 6.75V7.5C3 7.60313 3.08437 7.6875 3.1875 7.6875H4.60312L5.18203 19.9453C5.21953 20.7445 5.88047 21.375 6.67969 21.375H17.3203C18.1219 21.375 18.7805 20.7469 18.818 19.9453L19.3969 7.6875H20.8125C20.9156 7.6875 21 7.60313 21 7.5V6.75C21 6.33516 20.6648 6 20.25 6ZM15.5625 6H8.4375V4.3125H15.5625V6Z" fill="#C14600"/>
</svg>

'''
'''--- assets/icons/voting-dismiss-checked.colors.svg ---
<svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="20" cy="20" r="19.25" fill="#F0F0F0" stroke="#BFBFBF" stroke-width="1.5"/>
<path d="M13 16H27L25 28H15L13 16Z" fill="#BFBFBF"/>
<rect x="13" y="13" width="14" height="2" fill="#8C8C8C"/>
<rect x="19" y="11" width="2" height="2" fill="#8C8C8C"/>
</svg>

'''
'''--- assets/icons/voting-dismiss-disabled.colors.svg ---
<svg width="40" height="41" viewBox="0 0 40 41" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="20" cy="20.5" r="20" fill="#F5F5F5"/>
<path d="M13 16.5H27L25 28.5H15L13 16.5Z" fill="#D9D9D9"/>
<rect x="13" y="13.5" width="14" height="2" fill="#D9D9D9"/>
<rect x="19" y="11.5" width="2" height="2" fill="#D9D9D9"/>
</svg>

'''
'''--- assets/icons/voting-dismiss.colors.svg ---
<svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="20" cy="20" r="20" fill="#F0F0F0"/>
<path d="M13 16H27L25 28H15L13 16Z" fill="#BFBFBF"/>
<rect x="13" y="13" width="14" height="2" fill="#8C8C8C"/>
<rect x="19" y="11" width="2" height="2" fill="#8C8C8C"/>
</svg>

'''
'''--- assets/icons/voting-no-checked.colors.svg ---
<svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="20" cy="20" r="19.25" fill="#FFF3EC" stroke="#FF8743" stroke-width="1.5"/>
<path d="M11 26.9998L27.4948 26.9998L32 14.9998L15.0692 14.9998C14.7327 14.9998 11 26.9998 11 26.9998Z" fill="#401700"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M24.4227 26.9999L22.8493 31.6175C22.463 32.7512 21.048 33.1276 20.1495 32.3356C18.7981 31.1444 18.0215 29.4314 18.0163 27.63L18.0145 26.9999L8 26.9999C8 26.9999 12.2145 14.9999 12.0692 14.9999L29 14.9999L24.4948 26.9999L24.4227 26.9999Z" fill="#FF8743"/>
</svg>

'''
'''--- assets/icons/voting-no-disabled.colors.svg ---
<svg width="40" height="41" viewBox="0 0 40 41" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="20" cy="20.5" r="20" fill="#F5F5F5"/>
<path d="M11 27.5L27.4948 27.5L32 15.5L15.0692 15.5C14.7327 15.5 11 27.5 11 27.5Z" fill="#BFBFBF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M24.4227 27.4999L22.8493 32.1175C22.463 33.2512 21.048 33.6276 20.1495 32.8356C18.7981 31.6444 18.0215 29.9314 18.0163 28.13L18.0145 27.4999L8 27.4999C8 27.4999 12.2145 15.4999 12.0692 15.4999L29 15.4999L24.4948 27.4999L24.4227 27.4999Z" fill="#D9D9D9"/>
</svg>

'''
'''--- assets/icons/voting-no.colors.svg ---
<svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="20" cy="20" r="20" fill="#FFF3EC"/>
<path d="M11 26.9998L27.4948 26.9998L32 14.9998L15.0692 14.9998C14.7327 14.9998 11 26.9998 11 26.9998Z" fill="#401700"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M24.4227 26.9999L22.8493 31.6175C22.463 32.7512 21.048 33.1276 20.1495 32.3356C18.7981 31.1444 18.0215 29.4314 18.0163 27.63L18.0145 26.9999L8 26.9999C8 26.9999 12.2145 14.9999 12.0692 14.9999L29 14.9999L24.4948 26.9999L24.4227 26.9999Z" fill="#FF8743"/>
</svg>

'''
'''--- assets/icons/voting-yes-checked.colors.svg ---
<svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="20" cy="20" r="19.25" fill="#CFF9EA" stroke="#19D992" stroke-width="1.5"/>
<path d="M30 15.7559H13.5052L9 27.7559H25.9308C26.2673 27.7559 30 15.7559 30 15.7559Z" fill="#0C422A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M16.6537 15.7558L18.4847 10.3823C18.871 9.24856 20.286 8.87219 21.1845 9.66417C22.5359 10.8554 23.3124 12.5683 23.3177 14.3698L23.3217 15.7558H33C33 15.7558 28.7855 27.7558 28.9308 27.7558H12L16.5052 15.7558H16.6537Z" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/voting-yes-disabled.colors.svg ---
<svg width="40" height="41" viewBox="0 0 40 41" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="20" cy="20.5" r="20" fill="#F5F5F5"/>
<path d="M30 16.2563H13.5052L9 28.2563H25.9308C26.2673 28.2563 30 16.2563 30 16.2563Z" fill="#BFBFBF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M16.6537 16.256L18.4847 10.8825C18.871 9.7488 20.286 9.37243 21.1845 10.1644C22.5359 11.3556 23.3124 13.0686 23.3177 14.87L23.3217 16.256H33C33 16.256 28.7855 28.256 28.9308 28.256H12L16.5052 16.256H16.6537Z" fill="#D9D9D9"/>
</svg>

'''
'''--- assets/icons/voting-yes.colors.svg ---
<svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="20" cy="20" r="20" fill="#CFF9EA"/>
<path d="M30 15.7559H13.5052L9 27.7559H25.9308C26.2673 27.7559 30 15.7559 30 15.7559Z" fill="#0C422A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M16.6537 15.7558L18.4847 10.3823C18.871 9.24856 20.286 8.87219 21.1845 9.66417C22.5359 10.8554 23.3124 12.5683 23.3177 14.3698L23.3217 15.7558H33C33 15.7558 28.7855 27.7558 28.9308 27.7558H12L16.5052 15.7558H16.6537Z" fill="#19D992"/>
</svg>

'''
'''--- assets/icons/votingPolicy.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.53476 10.3503C8.63667 10.3503 8.73221 10.3343 8.82138 10.3022C8.91055 10.2706 8.99336 10.2166 9.06979 10.1401L11.7832 7.42675C11.9233 7.28662 11.9934 7.10828 11.9934 6.89172C11.9934 6.67516 11.9233 6.49045 11.7832 6.33758C11.6303 6.19745 11.4456 6.12739 11.229 6.12739C11.0125 6.12739 10.8341 6.19745 10.694 6.33758L8.53476 8.49682L7.99973 7.96178C7.8596 7.82166 7.68126 7.75159 7.46469 7.75159C7.24813 7.75159 7.06979 7.82166 6.92966 7.96178C6.7768 8.11465 6.70036 8.29936 6.70036 8.51592C6.70036 8.73248 6.7768 8.91083 6.92966 9.05096L7.99973 10.1401C8.07616 10.2166 8.15896 10.2706 8.24813 10.3022C8.33731 10.3343 8.43285 10.3503 8.53476 10.3503ZM9.33731 15.2611C10.8914 13.8344 12.0443 12.5381 12.7959 11.3722C13.5475 10.2069 13.9233 9.17197 13.9233 8.26752C13.9233 6.87898 13.4805 5.74191 12.5949 4.85631C11.7098 3.97121 10.6239 3.52866 9.33731 3.52866C8.05068 3.52866 6.96457 3.97121 6.07896 4.85631C5.19387 5.74191 4.75132 6.87898 4.75132 8.26752C4.75132 9.17197 5.12711 10.2069 5.87871 11.3722C6.6303 12.5381 7.78317 13.8344 9.33731 15.2611ZM9.33731 17C9.23539 17 9.13348 16.9809 9.03157 16.9427C8.92966 16.9045 8.84049 16.8535 8.76406 16.7898C6.90418 15.1465 5.51565 13.6211 4.59845 12.2138C3.68126 10.8059 3.22266 9.49045 3.22266 8.26752C3.22266 6.35669 3.83743 4.83439 5.06699 3.70064C6.29603 2.56688 7.71947 2 9.33731 2C10.9551 2 12.3786 2.56688 13.6076 3.70064C14.8372 4.83439 15.452 6.35669 15.452 8.26752C15.452 9.49045 14.9934 10.8059 14.0762 12.2138C13.159 13.6211 11.7704 15.1465 9.91055 16.7898C9.83412 16.8535 9.74495 16.9045 9.64304 16.9427C9.54113 16.9809 9.43922 17 9.33731 17Z" fill="#8C8C8C"/>
</svg>

'''
'''--- assets/icons/white-logo.svg ---
<svg width="301" height="48" viewBox="0 0 301 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0" mask-type="alpha" maskUnits="userSpaceOnUse" x="199" y="10" width="25" height="28">
<path fill-rule="evenodd" clip-rule="evenodd" d="M223.011 10.3999L204.052 17.1759V20.9349L199.01 22.7365V37.5999L217.97 30.8239V27.0649L223.011 25.2633V10.3999Z" fill="#ADD5E5"/>
</mask>
<g mask="url(#mask0)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M223.011 10.3999L204.052 17.1759V20.9349L199.01 22.7365V37.5999L217.97 30.8239V27.0649L223.011 25.2633V10.3999Z" fill="white"/>
</g>
<path d="M238.411 30.5455L239.274 27.7969H243.793L244.656 30.5455H248.057L243.64 17.4546H239.427L235.01 30.5455H238.411ZM240.028 25.3935L241.479 20.7529H241.582L243.039 25.3935H240.028Z" fill="white"/>
<path d="M257.038 21.3793H260.068C260.042 18.9312 258.092 17.2756 255.05 17.2756C252.058 17.2756 249.904 18.9056 249.923 21.341C249.917 23.3289 251.311 24.4475 253.573 24.9653L254.941 25.2849C256.379 25.6173 257.025 26.0072 257.038 26.7423C257.025 27.5413 256.277 28.0974 255.005 28.0974C253.605 28.0974 252.685 27.4454 252.615 26.1861H249.585C249.623 29.2479 251.752 30.7117 255.043 30.7117C258.303 30.7117 260.234 29.2352 260.247 26.7486C260.234 24.6584 258.821 23.38 256.239 22.8111L255.114 22.5555C253.925 22.2998 253.171 21.9035 253.196 21.1236C253.203 20.4077 253.816 19.89 255.043 19.89C256.277 19.89 256.955 20.4461 257.038 21.3793Z" fill="white"/>
<path d="M262.316 20.0242H266.292V30.5455H269.412V20.0242H273.381V17.4546H262.316V20.0242Z" fill="white"/>
<path d="M275.826 30.5455H278.99V26.0647H280.614L283.005 30.5455H286.456L283.74 25.5597C285.178 24.9077 286.009 23.6229 286.009 21.814C286.009 19.1229 284.174 17.4546 281.234 17.4546H275.826V30.5455ZM278.99 23.5718V20.005H280.55C281.969 20.005 282.73 20.5995 282.73 21.814C282.73 23.0285 281.969 23.5718 280.55 23.5718H278.99Z" fill="white"/>
<path d="M301 24.0001C301 19.6727 298.264 17.2756 294.749 17.2756C291.22 17.2756 288.504 19.6727 288.504 24.0001C288.504 28.3083 291.22 30.7245 294.749 30.7245C298.264 30.7245 301 28.3275 301 24.0001ZM297.766 24.0001C297.766 26.5633 296.641 27.9504 294.749 27.9504C292.863 27.9504 291.732 26.5633 291.732 24.0001C291.732 21.4369 292.863 20.0498 294.749 20.0498C296.641 20.0498 297.766 21.4369 297.766 24.0001Z" fill="white"/>
</svg>

'''
'''--- assets/index.ts ---
export * from './icons';

'''
'''--- assets/sidebarMarker.svg ---
<svg width="14" height="56" viewBox="0 0 14 56" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g filter="url(#filter0_d_579_16313)">
        <path d="M0.539212 48C0.241413 48 0 47.7586 0 47.4608L0 8.54401C0 8.24356 0.243564 8 0.544014 8C0.758394 8 0.954718 8.12993 1.04177 8.32584C7.71336 23.3405 7.59342 32.075 1.03704 47.6667C0.953111 47.8663 0.75572 48 0.539212 48Z" fill="#6038D0"/>
    </g>
    <defs>
        <filter id="filter0_d_579_16313" x="-8" y="0" width="22" height="56" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
            <feFlood flood-opacity="0" result="BackgroundImageFix"/>
            <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
            <feMorphology radius="2" operator="dilate" in="SourceAlpha" result="effect1_dropShadow_579_16313"/>
            <feOffset/>
            <feGaussianBlur stdDeviation="3"/>
            <feComposite in2="hardAlpha" operator="out"/>
            <feColorMatrix type="matrix" values="0 0 0 0 0.376471 0 0 0 0 0.219608 0 0 0 0 0.815686 0 0 0 0.3 0"/>
            <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_579_16313"/>
            <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_579_16313" result="shape"/>
        </filter>
    </defs>
</svg>

'''
'''--- astro_2.0/components/Accordion/index.ts ---
export * from './Accordion';

'''
'''--- astro_2.0/components/ActionButton/index.ts ---
export * from './ActionButton';

'''
'''--- astro_2.0/components/AppFooter/index.ts ---
export * from './AppFooter';

'''
'''--- astro_2.0/components/AppHeader/components/AccountDropdown/components/AccountPopupItem/index.ts ---
export * from 'astro_2.0/components/AppHeader/components/AccountDropdown/components/AccountPopupItem/AccountPopupItem';

'''
'''--- astro_2.0/components/AppHeader/components/AccountDropdown/components/ConnectedAccountButton/index.ts ---
export * from './ConnectedAccountButton';

'''
'''--- astro_2.0/components/AppHeader/components/AccountDropdown/components/DisconnectButton/index.ts ---
export * from 'astro_2.0/components/AppHeader/components/AccountDropdown/components/DisconnectButton/DisconnectButton';

'''
'''--- astro_2.0/components/AppHeader/components/AccountDropdown/components/LoginButton/index.ts ---
export * from './LoginButton';

'''
'''--- astro_2.0/components/AppHeader/components/AccountDropdown/components/MyAccountButton/index.ts ---
export * from './MyAccountButton';

'''
'''--- astro_2.0/components/AppHeader/components/AccountDropdown/components/WalletAccount/index.ts ---
export * from 'astro_2.0/components/AppHeader/components/AccountDropdown/components/WalletAccount/WalletAccount';

'''
'''--- astro_2.0/components/AppHeader/components/AccountDropdown/components/WalletButton/index.ts ---
export * from 'astro_2.0/components/AppHeader/components/AccountDropdown/components/WalletButton/WalletButton';

'''
'''--- astro_2.0/components/AppHeader/components/AccountDropdown/components/WalletDescription/index.ts ---
export * from 'astro_2.0/components/AppHeader/components/AccountDropdown/components/WalletDescription/WalletDescription';

'''
'''--- astro_2.0/components/AppHeader/components/AccountDropdown/components/WalletIcon/index.ts ---
export * from 'astro_2.0/components/AppHeader/components/AccountDropdown/components/WalletIcon/WalletIcon';

'''
'''--- astro_2.0/components/AppHeader/components/AccountDropdown/components/WalletSelectionModal/index.ts ---
export * from 'astro_2.0/components/AppHeader/components/AccountDropdown/components/WalletSelectionModal/WalletSelectionModal';

'''
'''--- astro_2.0/components/AppHeader/components/AccountDropdown/components/WalletWithAccounts/index.ts ---
export * from 'astro_2.0/components/AppHeader/components/AccountDropdown/components/WalletWithAccounts/WalletWithAccounts';

'''
'''--- astro_2.0/components/AppHeader/components/AccountDropdown/components/WalletsList/index.ts ---
export * from 'astro_2.0/components/AppHeader/components/AccountDropdown/components/WalletsList/WalletsList';

'''
'''--- astro_2.0/components/AppHeader/components/AccountDropdown/index.ts ---
export * from './AccountDropdown';

'''
'''--- astro_2.0/components/AppHeader/components/NotificationsBell/components/NotificationsToastsContainer/AnimatedNotification/index.ts ---
export * from './AnimatedNotification';

'''
'''--- astro_2.0/components/AppHeader/components/NotificationsBell/components/NotificationsToastsContainer/index.ts ---
export * from './NotificationsToastsContainer';

'''
'''--- astro_2.0/components/AppHeader/components/NotificationsBell/index.ts ---
export * from './NotificationsBell';

'''
'''--- astro_2.0/components/AppHeader/components/SearchBar/components/DropdownResults/components/ResultSection/components/SearchResultCommentLine/index.ts ---
export * from './SearchResultCommentLine';

'''
'''--- astro_2.0/components/AppHeader/components/SearchBar/components/DropdownResults/components/ResultSection/components/SearchResultDaoCard/index.ts ---
export * from './SearchResultDaoCard';

'''
'''--- astro_2.0/components/AppHeader/components/SearchBar/components/DropdownResults/components/ResultSection/components/SearchResultDraftProposalLine/index.ts ---
export * from './SearchResultDraftProposalLine';

'''
'''--- astro_2.0/components/AppHeader/components/SearchBar/components/DropdownResults/components/ResultSection/components/SearchResultPeopleCard/index.ts ---
export * from './SearchResultPeopleCard';

'''
'''--- astro_2.0/components/AppHeader/components/SearchBar/components/DropdownResults/components/ResultSection/components/SearchResultProposalLine/index.ts ---
export * from './SearchResultProposalLine';

'''
'''--- astro_2.0/components/AppHeader/components/SearchBar/components/DropdownResults/components/ResultSection/components/index.ts ---
export * from './SearchResultDaoCard';
export * from './SearchResultPeopleCard';
export * from './SearchResultProposalLine';

'''
'''--- astro_2.0/components/AppHeader/components/SearchBar/components/DropdownResults/components/ResultSection/index.ts ---
export * from './components';
export * from './ResultSection';

'''
'''--- astro_2.0/components/AppHeader/components/SearchBar/components/DropdownResults/index.ts ---
export * from './DropdownResults';

'''
'''--- astro_2.0/components/AppHeader/components/SearchBar/components/SearchHints/index.ts ---
export * from './SearchHints';

'''
'''--- astro_2.0/components/AppHeader/components/SearchBar/index.ts ---
export * from './SearchBar';

'''
'''--- astro_2.0/components/AppHeader/index.ts ---
export * from './AppHeader';

'''
'''--- astro_2.0/components/BreadCrumbs/index.ts ---
export * from './BreadCrumbs';

'''
'''--- astro_2.0/components/Chip/index.ts ---
export * from './Chip';

'''
'''--- astro_2.0/components/ConfirmActionModal/index.ts ---
export * from './ConfirmActionModal';

'''
'''--- astro_2.0/components/CopyButton/index.ts ---
export * from './CopyButton';

'''
'''--- astro_2.0/components/CreationProgress/index.ts ---
export * from './CreationProgress';

'''
'''--- astro_2.0/components/DaoDetails/DaoDetailsGrid/components/DaoDetailsSkeleton/index.ts ---
export * from './DaoDetailsSkeleton';

'''
'''--- astro_2.0/components/DaoDetails/DaoDetailsGrid/components/DaoInfoCard/index.ts ---
export * from './DaoInfoCard';

'''
'''--- astro_2.0/components/DaoDetails/DaoDetailsGrid/index.ts ---
export * from './DaoDetailsGrid';

'''
'''--- astro_2.0/components/DaoDetails/DaoDetailsGrid/tests/mock.ts ---
import { DaoFeedItem } from 'types/dao';

export const daoMock = {
  id: 'default-flag-test.sputnikv2.testnet',
  txHash: 'A5HkEoiEuiyPPAR69DH7MFnWfui4mUqnZGjKyGpFjK4h',
  name: 'default-flag-test',
  description: '',
  members: 1,
  daoMembersList: ['alexeysputnik.testnet'],
  proposals: 0,
  activeProposalsCount: 0,
  totalProposalsCount: 0,
  totalProposals: 0,
  logo: 'https://sputnik-dao.s3.eu-central-1.amazonaws.com/default.png',
  flagCover:
    'https://sputnik-dao.s3.eu-central-1.amazonaws.com/U1KVTf5ctss2feAebXooI',
  flagLogo: '',
  funds: '97.30',
  totalDaoFunds: 97.30000000000001,
  createdAt: '2021-12-26T20:30:46.036Z',
  groups: [
    {
      members: ['alexeysputnik.testnet'],
      name: 'Everyone',
      permissions: [
        '*:VoteReject',
        '*:VoteRemove',
        '*:VoteApprove',
        '*:AddProposal',
        '*:Finalize',
      ],
      votePolicy: {},
      slug: 'Everyone',
    },
  ],
  policy: {
    isArchived: false,
    createdAt: '2021-12-26T20:30:46.036Z',
    updatedAt: '2021-12-26T20:30:46.036Z',
    daoId: 'default-flag-test.sputnikv2.testnet',
    proposalBond: '100000000000000000000000',
    bountyBond: '100000000000000000000000',
    proposalPeriod: '604800000000000',
    bountyForgivenessPeriod: '604800000000000',
    defaultVotePolicy: {
      weightKind: 'RoleWeight',
      quorum: '0',
      kind: 'Ratio',
      ratio: [1, 2],
    },
    roles: [
      {
        isArchived: false,
        createdAt: '2021-12-26T20:30:46.036Z',
        updatedAt: '2022-01-13T22:39:52.173Z',
        id: 'default-flag-test.sputnikv2.testnet-all',
        name: 'all',
        kind: 'Everyone',
        balance: null,
        accountIds: null,
        permissions: ['*:AddProposal'],
        votePolicy: {},
      },
      {
        isArchived: false,
        createdAt: '2021-12-26T20:30:46.036Z',
        updatedAt: '2022-01-13T22:39:52.173Z',
        id: 'default-flag-test.sputnikv2.testnet-Everyone',
        name: 'Everyone',
        kind: 'Group',
        balance: null,
        accountIds: ['alexeysputnik.testnet'],
        permissions: [
          '*:VoteReject',
          '*:VoteRemove',
          '*:VoteApprove',
          '*:AddProposal',
          '*:Finalize',
        ],
        votePolicy: {},
      },
    ],
  },
  links: [],
  displayName: 'Default Flag Test',
  lastProposalId: 0,
  legal: {
    legalStatus: '',
    legalLink: '',
  },
} as unknown as DaoFeedItem;

'''
'''--- astro_2.0/components/DaoDetails/DaoDetailsMinimized/components/DaoAction/index.ts ---
export * from './DaoAction';

'''
'''--- astro_2.0/components/DaoDetails/DaoDetailsMinimized/index.ts ---
export * from './DaoDetailsMinimized';

'''
'''--- astro_2.0/components/DaoDetails/DaoDetailsMinimized/tests/mock.ts ---
import { DAO } from 'types/dao';

export const daoMock = {
  id: 'default-flag-test.sputnikv2.testnet',
  txHash: 'A5HkEoiEuiyPPAR69DH7MFnWfui4mUqnZGjKyGpFjK4h',
  name: 'default-flag-test',
  description: '',
  members: 1,
  daoMembersList: ['alexeysputnik.testnet'],
  proposals: 0,
  activeProposalsCount: 0,
  totalProposalsCount: 0,
  totalProposals: 0,
  logo: 'https://sputnik-dao.s3.eu-central-1.amazonaws.com/default.png',
  flagCover:
    'https://sputnik-dao.s3.eu-central-1.amazonaws.com/U1KVTf5ctss2feAebXooI',
  flagLogo: '',
  funds: '97.30',
  totalDaoFunds: 97.30000000000001,
  createdAt: '2021-12-26T20:30:46.036Z',
  groups: [
    {
      members: ['alexeysputnik.testnet'],
      name: 'Everyone',
      permissions: [
        '*:VoteReject',
        '*:VoteRemove',
        '*:VoteApprove',
        '*:AddProposal',
        '*:Finalize',
      ],
      votePolicy: {},
      slug: 'Everyone',
    },
  ],
  policy: {
    isArchived: false,
    createdAt: '2021-12-26T20:30:46.036Z',
    updatedAt: '2021-12-26T20:30:46.036Z',
    daoId: 'default-flag-test.sputnikv2.testnet',
    proposalBond: '100000000000000000000000',
    bountyBond: '100000000000000000000000',
    proposalPeriod: '604800000000000',
    bountyForgivenessPeriod: '604800000000000',
    defaultVotePolicy: {
      weightKind: 'RoleWeight',
      quorum: '0',
      kind: 'Ratio',
      ratio: [1, 2],
    },
    roles: [
      {
        isArchived: false,
        createdAt: '2021-12-26T20:30:46.036Z',
        updatedAt: '2022-01-13T22:39:52.173Z',
        id: 'default-flag-test.sputnikv2.testnet-all',
        name: 'all',
        kind: 'Everyone',
        balance: null,
        accountIds: null,
        permissions: ['*:AddProposal'],
        votePolicy: {},
      },
      {
        isArchived: false,
        createdAt: '2021-12-26T20:30:46.036Z',
        updatedAt: '2022-01-13T22:39:52.173Z',
        id: 'default-flag-test.sputnikv2.testnet-Everyone',
        name: 'Everyone',
        kind: 'Group',
        balance: null,
        accountIds: ['alexeysputnik.testnet'],
        permissions: [
          '*:VoteReject',
          '*:VoteRemove',
          '*:VoteApprove',
          '*:AddProposal',
          '*:Finalize',
        ],
        votePolicy: {},
      },
    ],
  },
  links: [],
  displayName: 'Default Flag Test',
  lastProposalId: 0,
  legal: {
    legalStatus: '',
    legalLink: '',
  },
} as unknown as DAO;

'''
'''--- astro_2.0/components/DaoDetails/index.ts ---
export * from './DaoDetailsMinimized';
export * from './DaoDetailsGrid';

'''
'''--- astro_2.0/components/DaoFlagWidget/index.ts ---
export * from 'astro_2.0/components/DaoFlagWidget/DaoFlagWidget';

'''
'''--- astro_2.0/components/DaoWarning/index.ts ---
export * from './DaoWarning';

'''
'''--- astro_2.0/components/DaosList/index.ts ---
export * from './DaosList';

'''
'''--- astro_2.0/components/DefaultVotingPolicy/index.ts ---
export * from './DefaultVotingPolicy';

'''
'''--- astro_2.0/components/DefaultVotingPolicy/tests/mocks.ts ---
import { DaoVotePolicy } from 'types/dao';

export const policyMock = {
  weightKind: 'RoleWeight',
  quorum: '0',
  kind: 'Ratio',
  ratio: [1, 2],
} as DaoVotePolicy;

export const groupsMock = [
  {
    members: ['alexeysputnik.testnet'],
    name: 'Everyone',
    permissions: [
      '*:VoteReject',
      '*:VoteRemove',
      '*:VoteApprove',
      '*:AddProposal',
      '*:Finalize',
    ],
    votePolicy: {},
    slug: 'Everyone',
  },
];

'''
'''--- astro_2.0/components/DotsLoader/index.ts ---
export * from './DotsLoader';

'''
'''--- astro_2.0/components/EditableContent/index.ts ---
export * from './EditableContent';

'''
'''--- astro_2.0/components/ErrorBoundary/index.ts ---
import ErrorBoundary from './ErrorBoundary';

export default ErrorBoundary;

'''
'''--- astro_2.0/components/ExpandableDetails/index.ts ---
export * from './ExpandableDetails';

'''
'''--- astro_2.0/components/Feed/components/FeedFilter/index.ts ---
export * from './FeedFilter';

'''
'''--- astro_2.0/components/Feed/hooks.ts ---
import { useAsyncFn, useList, useLocalStorage, useLocation } from 'react-use';
import { useCallback } from 'react';
import { VoteAction } from 'types/proposal';
import { useWalletContext } from 'context/WalletContext';
import { useRouter } from 'next/router';
import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';
import { VOTE_ACTION_SOURCE_PAGE } from 'constants/votingConstants';

export function useMultiVoteActions(): {
  loading: boolean;
  handleVote: (vote: VoteAction) => Promise<void>;
  handleSelect: (id: string) => void;
  handleDismiss: () => void;
  list: string[];
} {
  const { nearService } = useWalletContext();
  const router = useRouter();
  const [, setVoteActionSource] = useLocalStorage(VOTE_ACTION_SOURCE_PAGE);
  const { pathname } = useLocation();
  const [list, { push, removeAt, clear }] = useList<string>([]);

  const handleSelect = useCallback(
    id => {
      const itemIndex = list.findIndex(item => item === id);

      if (itemIndex !== -1) {
        removeAt(itemIndex);
      } else {
        push(id);
      }
    },
    [list, push, removeAt]
  );

  const handleDismiss = useCallback(() => {
    clear();
  }, [clear]);

  const [{ loading }, handleVote] = useAsyncFn(
    async (vote: VoteAction) => {
      try {
        const paramsArr = list.map(item => {
          const separatorIndex = item.lastIndexOf('-');
          const daoId = item.substring(0, separatorIndex);
          const proposalId = item.substring(separatorIndex + 1);

          return { daoId, proposalId };
        });

        setVoteActionSource(pathname);

        await nearService?.multiVote(vote, paramsArr);

        await router.reload();
      } catch (e) {
        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          description: e.message,
          lifetime: 20000,
        });

        await router.reload();
      }
    },
    [router, nearService, list]
  );

  return {
    loading,
    list,
    handleVote,
    handleSelect,
    handleDismiss,
  };
}

'''
'''--- astro_2.0/components/Feed/index.ts ---
export * from './Feed';
export * from './components/FeedFilter';

'''
'''--- astro_2.0/components/FiltersPanel/index.ts ---
export * from './FiltersPanel';

'''
'''--- astro_2.0/components/Flag/index.ts ---
export * from './FlagMinimized';
export * from './FlagRenderer';

'''
'''--- astro_2.0/components/GenericDropdown/index.ts ---
export * from './GenericDropdown';
export * from './types';

'''
'''--- astro_2.0/components/GenericDropdown/types.ts ---
import { ReactElement } from 'react';

export interface BaseDropdownProps {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  options?: any;
  isOpen?: boolean;
  parent: ReactElement;
}

'''
'''--- astro_2.0/components/InfoBlockWidget/components/InfoValue/index.ts ---
export * from './InfoValue';

'''
'''--- astro_2.0/components/InfoBlockWidget/index.ts ---
export * from 'astro_2.0/components/InfoBlockWidget/InfoBlockWidget';

'''
'''--- astro_2.0/components/InfoBlockWidget/types.ts ---
export enum TooltipMessageSeverity {
  'Info',
  'Positive',
  'Warning',
}

'''
'''--- astro_2.0/components/LinkToTop/index.ts ---
export * from './LinkToTop';

'''
'''--- astro_2.0/components/LoadingIndicator/index.ts ---
export * from './LoadingIndicator';

'''
'''--- astro_2.0/components/LocaleSelector/components/Locales/index.ts ---
export * from './Locales';

'''
'''--- astro_2.0/components/LocaleSelector/index.ts ---
export * from './LocaleSelector';

'''
'''--- astro_2.0/components/MaintenanceWarning/components/Persona/index.ts ---
export * from './Persona';

'''
'''--- astro_2.0/components/MaintenanceWarning/components/Star/index.ts ---
export * from './Star';

'''
'''--- astro_2.0/components/MaintenanceWarning/index.ts ---
export * from './MaintenanceWarning';

'''
'''--- astro_2.0/components/NavLink/index.ts ---
export * from './NavLink';

'''
'''--- astro_2.0/components/NearIcon/index.ts ---
export * from './NearIcon';

'''
'''--- astro_2.0/components/NoResultsView/index.ts ---
export * from './NoResultsView';

'''
'''--- astro_2.0/components/NotificationCard/index.ts ---
export * from './NotificationCard';

'''
'''--- astro_2.0/components/NotificationCard/types.ts ---
import { NotificationType, NotificationStatus } from 'types/notification';

export interface NotificationCardContent {
  id: string;
  type: NotificationType;
  status: NotificationStatus;
  text: string;
  time: string;
  flagCover?: string;
  logo?: string;
  url?: string;
}

'''
'''--- astro_2.0/components/NotificationsDisableModal/index.ts ---
export * from './NotificationsDisableModal';

'''
'''--- astro_2.0/components/PageLayout/index.ts ---
export * from './PageLayout';

'''
'''--- astro_2.0/components/PolicyAffectedWarning/index.ts ---
export * from './PolicyAffectedWarning';

'''
'''--- astro_2.0/components/ProposalCardRenderer/components/CreateBountyProposalContent/index.ts ---
export * from './CreateBountyProposalContent';

'''
'''--- astro_2.0/components/ProposalCardRenderer/components/DraftDescription/index.ts ---
export * from './DraftDescription';

'''
'''--- astro_2.0/components/ProposalCardRenderer/components/DraftInfo/DraftInfoItem/index.ts ---
export * from './DraftInfoItem';

'''
'''--- astro_2.0/components/ProposalCardRenderer/components/DraftInfo/index.ts ---
export * from './DraftInfo';

'''
'''--- astro_2.0/components/ProposalCardRenderer/components/DraftManagement/index.ts ---
export * from './DraftManagement';

'''
'''--- astro_2.0/components/ProposalCardRenderer/components/InfoPanel/index.ts ---
export * from './InfoPanel';

'''
'''--- astro_2.0/components/ProposalCardRenderer/components/LetterHeadWidget/index.ts ---
export * from './LetterHeadWidget';

'''
'''--- astro_2.0/components/ProposalCardRenderer/components/ProposalCard/components/DeleteDraftButton/index.ts ---
export * from './DeleteDraftButton';

'''
'''--- astro_2.0/components/ProposalCardRenderer/components/ProposalCard/components/ProposalControlPanel/components/ProposalControlButton/index.ts ---
export * from './ProposalControlButton';

'''
'''--- astro_2.0/components/ProposalCardRenderer/components/ProposalCard/components/ProposalControlPanel/index.ts ---
export * from './ProposalControlPanel';

'''
'''--- astro_2.0/components/ProposalCardRenderer/components/ProposalCard/index.ts ---
export * from './ProposalCard';

'''
'''--- astro_2.0/components/ProposalCardRenderer/index.ts ---
export * from 'astro_2.0/components/ProposalCardRenderer/PropocalCardRenderer';

export * from './components/LetterHeadWidget';
export * from './components/ProposalCard';

'''
'''--- astro_2.0/components/PuzzleCaptcha/index.ts ---
export * from './PuzzleCaptcha';

'''
'''--- astro_2.0/components/ReplyButton/index.ts ---
export * from './ReplyButton';

'''
'''--- astro_2.0/components/ScrollList/index.ts ---
export * from './ScrollList';

'''
'''--- astro_2.0/components/SearchInput/index.ts ---
export * from './SearchInput';

'''
'''--- astro_2.0/components/SelectorIcons/SelectorNearIcon/index.ts ---
export * from './SelectorNearIcon';

'''
'''--- astro_2.0/components/SelectorIcons/index.ts ---
export * from './SelectorNearIcon';

'''
'''--- astro_2.0/components/SenderIcon/index.ts ---
export * from './SenderIcon';

'''
'''--- astro_2.0/components/SideFilter/index.ts ---
export * from './SideFilter';

'''
'''--- astro_2.0/components/TgasInput/index.ts ---
export * from './TgasInput';

'''
'''--- astro_2.0/components/TokenIcon/index.ts ---
export * from './TokenIcon';

'''
'''--- astro_2.0/components/TokenWidget/index.ts ---
export * from './TokenWidget';

'''
'''--- astro_2.0/components/Tooltip/index.ts ---
export * from './Tooltip';

'''
'''--- astro_2.0/components/TransactionDetailsWidget/index.ts ---
export * from 'astro_2.0/components/TransactionDetailsWidget/TransactionDetailsWidget';

'''
'''--- astro_2.0/components/WarningMessage/index.ts ---
export * from './WarningMessage';

'''
'''--- astro_2.0/components/inputs/radio/Radio/index.ts ---
export * from './Radio';

'''
'''--- astro_2.0/components/inputs/radio/RadioGroup/index.ts ---
export * from './RadioGroup';

'''
'''--- astro_2.0/components/navigation/MobileNav/index.ts ---
export * from './MobileNav';

'''
'''--- astro_2.0/components/navigation/NavButton/index.ts ---
export * from './NavButton';

'''
'''--- astro_2.0/components/navigation/navConfig.ts ---
import {
  SPACE_RANCH_URL,
  NFTS_URL,
  MEMBERS_URL,
  BOUNTIES_URL,
  PROPOSALS_URL,
  POLLS_URL,
  TREASUREY_URL,
  ORGANIZATION_URL,
} from 'constants/routing';

import { NavItemProps } from './types';

export const HOME_CONFIG: NavItemProps = {
  icon: 'sidebarHome',
  hoverIcon: 'sidebarHome',
  href: SPACE_RANCH_URL,
  label: 'Home',
  authRequired: true,
};

export const NFT_CONFIG: NavItemProps = {
  icon: 'nfts',
  hoverIcon: 'nfts',
  href: NFTS_URL,
  label: 'Digital Assets',
  authRequired: true,
};

export const MEMBERS_CONFIG: NavItemProps = {
  icon: 'filterMembers',
  hoverIcon: 'filterMembers',
  href: MEMBERS_URL,
  label: 'Members',
  authRequired: true,
};

export const BOUNTIES_CONFIG: NavItemProps = {
  icon: 'sidebarBounties',
  hoverIcon: 'sidebarBounties',
  href: BOUNTIES_URL,
  label: 'Bounties',
  authRequired: true,
};

export const PROPOSALS_CONFIG: NavItemProps = {
  icon: 'pencil',
  hoverIcon: 'pencil',
  href: PROPOSALS_URL,
  label: 'Proposals',
  authRequired: true,
};

export const POLLS_CONFIG: NavItemProps = {
  icon: 'proposalPoll',
  hoverIcon: 'proposalPoll',
  href: POLLS_URL,
  label: 'Polls',
  authRequired: true,
};

export const TREASURY_CONFIG: NavItemProps = {
  icon: 'stateTreasury',
  hoverIcon: 'stateTreasury',
  href: TREASUREY_URL,
  label: 'Treasury',
  authRequired: true,
};

export const ORGANIZATION_CONFIG: NavItemProps = {
  icon: 'delegate',
  hoverIcon: 'delegate',
  href: ORGANIZATION_URL,
  label: 'Organization',
  authRequired: true,
};

'''
'''--- astro_2.0/components/navigation/types.ts ---
import { IconName } from 'components/Icon';

export interface NavItemProps {
  icon: IconName;
  hoverIcon: IconName;
  href: string;
  label: string;
  authRequired?: boolean;
}

'''
'''--- astro_2.0/features/App404/index.ts ---
export * from './App404';

'''
'''--- astro_2.0/features/AppHealth/index.ts ---
export * from './AppHealth';

'''
'''--- astro_2.0/features/AppMonitoring/index.ts ---
export * from './AppMonitoring';

'''
'''--- astro_2.0/features/Auth/components/ConnectingWalletModal/index.ts ---
export * from './ConnectingWalletModal';

'''
'''--- astro_2.0/features/Auth/hooks/useAuthCheck.ts ---
/* eslint-disable @typescript-eslint/no-explicit-any */
import { DependencyList, useCallback } from 'react';
import { useWalletContext } from 'context/WalletContext';
import { WalletType } from 'types/config';

export const useAuthCheck = <T extends (...args: any[]) => any>(
  callback: T,
  deps: DependencyList
): T => {
  const { accountId, login } = useWalletContext();

  return useCallback(
    (...args: Parameters<T>) => {
      if (accountId) {
        callback(...args);

        return;
      }

      login(WalletType.NEAR);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [accountId, login, ...deps]
  ) as T;
};

'''
'''--- astro_2.0/features/Auth/index.ts ---
export * from './hooks/useAuthCheck';

'''
'''--- astro_2.0/features/Bounties/components/BountiesFeed/index.ts ---
export * from './BountiesFeed';

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/components/AmountContent/index.ts ---
export * from './AmountContent';

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/components/AmountContent/tests/mock.ts ---
import { Token } from 'types/token';

export const tokens = {
  NEAR: {
    createdAt: '2021-12-07T19:15:52.793Z',
    transactionHash: null,
    updateTransactionHash: null,
    createTimestamp: null,
    updateTimestamp: '1639053338980000000',
    id: 'NEAR',
    ownerId: '',
    totalSupply: '',
    decimals: 24,
    icon: 'customIcon',
    name: null,
    reference: null,
    referenceHash: null,
    spec: null,
    symbol: 'NEAR',
    price: '10.68',
    balance: '5.1002',
    tokenId: '',
  },
} as unknown as Record<string, Token>;

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/components/ClaimRow/index.ts ---
export * from './ClaimRow';

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/components/ClaimRow/tests/mock.ts ---
import { DAO } from 'types/dao';

export const daoMock = {
  id: 'default-flag-test.sputnikv2.testnet',
  txHash: 'A5HkEoiEuiyPPAR69DH7MFnWfui4mUqnZGjKyGpFjK4h',
  name: 'default-flag-test',
  description: '',
  members: 1,
  daoMembersList: ['alexeysputnik.testnet'],
  proposals: 0,
  activeProposalsCount: 0,
  totalProposalsCount: 0,
  totalProposals: 0,
  logo: 'https://sputnik-dao.s3.eu-central-1.amazonaws.com/default.png',
  flagCover:
    'https://sputnik-dao.s3.eu-central-1.amazonaws.com/U1KVTf5ctss2feAebXooI',
  flagLogo: '',
  funds: '97.30',
  totalDaoFunds: 97.30000000000001,
  createdAt: '2021-12-26T20:30:46.036Z',
  groups: [
    {
      members: ['alexeysputnik.testnet'],
      name: 'Everyone',
      permissions: [
        '*:VoteReject',
        '*:VoteRemove',
        '*:VoteApprove',
        '*:AddProposal',
        '*:Finalize',
      ],
      votePolicy: {},
      slug: 'Everyone',
    },
  ],
  policy: {
    isArchived: false,
    createdAt: '2021-12-26T20:30:46.036Z',
    updatedAt: '2021-12-26T20:30:46.036Z',
    daoId: 'default-flag-test.sputnikv2.testnet',
    proposalBond: '100000000000000000000000',
    bountyBond: '100000000000000000000000',
    proposalPeriod: '604800000000000',
    bountyForgivenessPeriod: '604800000000000',
    defaultVotePolicy: {
      weightKind: 'RoleWeight',
      quorum: '0',
      kind: 'Ratio',
      ratio: [1, 2],
    },
    roles: [
      {
        isArchived: false,
        createdAt: '2021-12-26T20:30:46.036Z',
        updatedAt: '2022-01-13T22:39:52.173Z',
        id: 'default-flag-test.sputnikv2.testnet-all',
        name: 'all',
        kind: 'Everyone',
        balance: null,
        accountIds: null,
        permissions: ['*:AddProposal'],
        votePolicy: {},
      },
      {
        isArchived: false,
        createdAt: '2021-12-26T20:30:46.036Z',
        updatedAt: '2022-01-13T22:39:52.173Z',
        id: 'default-flag-test.sputnikv2.testnet-Everyone',
        name: 'Everyone',
        kind: 'Group',
        balance: null,
        accountIds: ['alexeysputnik.testnet'],
        permissions: [
          '*:VoteReject',
          '*:VoteRemove',
          '*:VoteApprove',
          '*:AddProposal',
          '*:Finalize',
        ],
        votePolicy: {},
      },
    ],
  },
  links: [],
  displayName: 'Default Flag Test',
  lastProposalId: 0,
  legal: {
    legalStatus: '',
    legalLink: '',
  },
} as unknown as DAO;

export const bounty = {
  isArchived: false,
  createdAt: '2021-12-20T07:36:34.769Z',
  updatedAt: '2022-01-26T12:06:11.351Z',
  transactionHash: 'BHUpuv1Ucm3WkCRj4QPTLAa2jt8VKLPJ14oL7fCYgSHi',
  updateTransactionHash: 'BHUpuv1Ucm3WkCRj4QPTLAa2jt8VKLPJ14oL7fCYgSHi',
  createTimestamp: '1639985788634799051',
  updateTimestamp: '1639985788634799051',
  id: 'testdao3-near-cli-example.sputnikv2.testnet-7',
  bountyId: 7,
  proposalId: 'testdao3-near-cli-example.sputnikv2.testnet-1114',
  daoId: 'testdao3-near-cli-example.sputnikv2.testnet',
  description: 'Google for YouTube trends in 2021 Q41639985778397',
  token: '',
  amount: '1500000000000000000000000',
  times: '3',
  maxDeadline: '259200000000000',
  numberOfClaims: 0,
  bountyClaims: [],
  bountyDoneProposals: [],
};

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/components/ClaimsContent/index.ts ---
export * from './ClaimsContent';

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/components/CollapsableSection/index.ts ---
export * from './CollapsableSection';

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/components/CompleteProposalRow/index.ts ---
export * from './CompleteProposalRow';

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/components/CompletedContent/index.ts ---
export * from './CompletedContent';

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/components/MobileListView/index.ts ---
export * from './MobileListView';

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/components/SectionRow/index.ts ---
export * from './SectionRow';

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/components/UnclaimCompleteContent/index.ts ---
export * from './UnclaimCompleteContent';

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/components/VotingContent/index.ts ---
export * from './VotingContent';

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/index.ts ---
export * from './BountiesListView';

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/tests/mock.ts ---
export const bounty = {
  id: 'testdao3-near-cli-example.sputnikv2.testnet-1114',
  proposalId: 'testdao3-near-cli-example.sputnikv2.testnet-1114',
  proposer: 'testdao2.testnet',
  title: 'Google for YouTube trends in 2021 Q41639985778397',
  link: {
    pathname: '/dao/[dao]/tasks/bounties/[bountyContext]',
    query: {
      dao: 'testdao3-near-cli-example.sputnikv2.testnet',
      bountyContext: 'testdao3-near-cli-example.sputnikv2.testnet-1114',
    },
  },
  bounty: {
    isArchived: false,
    createdAt: '2021-12-20T07:36:34.769Z',
    updatedAt: '2022-01-26T12:06:11.351Z',
    transactionHash: 'BHUpuv1Ucm3WkCRj4QPTLAa2jt8VKLPJ14oL7fCYgSHi',
    updateTransactionHash: 'BHUpuv1Ucm3WkCRj4QPTLAa2jt8VKLPJ14oL7fCYgSHi',
    createTimestamp: '1639985788634799051',
    updateTimestamp: '1639985788634799051',
    id: 'testdao3-near-cli-example.sputnikv2.testnet-7',
    bountyId: 7,
    proposalId: 'testdao3-near-cli-example.sputnikv2.testnet-1114',
    daoId: 'testdao3-near-cli-example.sputnikv2.testnet',
    description: 'Google for YouTube trends in 2021 Q41639985778397',
    token: '',
    amount: '1500000000000000000000000',
    times: '3',
    maxDeadline: '259200000000000',
    numberOfClaims: 0,
    bountyClaims: [],
    bountyDoneProposals: [],
  },
};

'''
'''--- astro_2.0/features/Bounties/components/BountiesListView/types.ts ---
import { Bounty } from 'types/bounties';
import { ReactNode } from 'react';
import { ProposalVariant } from 'types/proposal';

export type SectionItem = {
  id: string;
  title: string;
  proposer: string;
  proposalId: string;
  bounty?: Bounty;
  link: {
    pathname: string;
    query: {
      dao: string;
      bounty?: string;
      proposal?: string;
    };
  };
  completeHandler?: (
    id: number,
    variant: ProposalVariant.ProposeDoneBounty
  ) => void;
  content: ReactNode;
};

'''
'''--- astro_2.0/features/Bounties/components/BountiesTimeline/components/DataRow/index.ts ---
export * from './DataRow';

'''
'''--- astro_2.0/features/Bounties/components/BountiesTimeline/components/Milestone/index.ts ---
export * from './Milestone';

'''
'''--- astro_2.0/features/Bounties/components/BountiesTimeline/components/StackedMilestones/index.ts ---
export * from './StackedMilestones';

'''
'''--- astro_2.0/features/Bounties/components/BountiesTimeline/components/TimelineGroups/index.ts ---
export * from './TimelineGroups';

'''
'''--- astro_2.0/features/Bounties/components/BountiesTimeline/components/TimelineHeader/index.ts ---
export * from './TimelineHeader';

'''
'''--- astro_2.0/features/Bounties/components/BountiesTimeline/components/TimelineLegend/index.ts ---
export * from './TimelineLegend';

'''
'''--- astro_2.0/features/Bounties/components/BountiesTimeline/components/TimelineRangeToggle/index.ts ---
export * from './TimelineRangeToggle';

'''
'''--- astro_2.0/features/Bounties/components/BountiesTimeline/helpers.ts ---
import { BountyClaim, BountyContext, BountyProposal } from 'types/bounties';
import {
  TimelineClaim,
  TimelineGranularity,
  TimelineGroup,
  TimelineMilestone,
} from 'astro_2.0/features/Bounties/components/BountiesTimeline/types';
import { DATA_SEPARATOR } from 'constants/common';
import {
  addDays,
  eachDayOfInterval,
  eachHourOfInterval,
  eachMinuteOfInterval,
  eachMonthOfInterval,
  endOfDay,
  endOfHour,
  endOfMonth,
  format,
  getDaysInMonth,
  isLastDayOfMonth,
  isSameDay,
  isSameHour,
  startOfDay,
  startOfHour,
  startOfMinute,
  startOfMonth,
} from 'date-fns';
import { toMillis } from 'utils/format';

const TOOLTIP_DATE_FORMAT = 'dd MMM, yyyy';

const COLORS = [
  '#DC88F5',
  '#89B1F9',
  '#51BAD1',
  '#EF7F31',
  '#E43AE3',
  '#57B99D',
  '#D32C1F',
  '#89B1F9',
  '#A87F3D',
  '#76140C',
  '#D65B26',
  '#B6BCC1',
  '#EC5281',
  '#EF87AA',
  '#925EB1',
  '#8060D9',
  '#0038DF',
  '#4581B2',
  '#46A8EE',
  '#65C978',
  '#697683',
];

function getColor(index: number) {
  return COLORS[index % COLORS.length];
}

function getClaimMilestones(
  claim: BountyClaim,
  color: string,
  proposal?: BountyProposal
) {
  const { accountId, startTime } = claim;
  const milestones: TimelineMilestone[] = [];
  const claimStartTime = toMillis(startTime);
  const claimStart = new Date(claimStartTime);

  if (claimStart) {
    milestones.push({
      type: 'Claim',
      date: claimStart,
      tooltip: `Claimed by ${accountId}`,
      color,
    });
  }

  if (proposal) {
    const proposalStatus = proposal.status;

    if (proposalStatus === 'InProgress') {
      milestones.push({
        type: 'Pending Approval',
        date: new Date(proposal.createdAt),
        tooltip: 'Pending Approval',
        color,
      });
    } else if (proposalStatus === 'Approved') {
      milestones.push({
        type: 'Complete Claim',
        date: new Date(proposal.createdAt),
        tooltip: `Claim completed by ${proposal.proposer}`,
        color,
      });
    }
    // todo - how cna we handle rejected/not approved claims?
  }

  if (claimStart && claim.deadline) {
    const hasApprovedProposal = !!milestones.find(
      prp => prp.type === 'Complete Claim'
    );

    if (!hasApprovedProposal) {
      const deadline = toMillis(claim.deadline);
      const claimEnd = new Date(claimStartTime + deadline);

      milestones.push({
        type: 'Claim Deadline',
        date: claimEnd,
        tooltip: `Deadline to complete ${accountId} claim ${format(
          claimEnd,
          TOOLTIP_DATE_FORMAT
        )}`,
        color,
      });
    }
  }

  return milestones;
}

function prepareClaims(context: BountyContext) {
  const claims: TimelineClaim[] = [];

  // Bounty claims
  if (context.bounty?.bountyClaims?.length > 0) {
    context.bounty.bountyClaims.forEach((claim, i) => {
      const { id } = claim;
      const proposal = context.bounty.bountyDoneProposals.find(
        _proposal => _proposal.bountyClaimId === id
      );

      const milestones = getClaimMilestones(claim, getColor(i), proposal);

      const sortedMilestones = milestones.slice().sort((a, b) => {
        if (a.date > b.date) {
          return 1;
        }

        if (a.date < b.date) {
          return -1;
        }

        return 0;
      });

      const minDate = sortedMilestones[0]?.date;
      const maxDate = sortedMilestones[sortedMilestones.length - 1]?.date;

      claims.push({
        id: claim.id,
        milestones,
        title: claim.accountId,
        color: getColor(i),
        minDate,
        maxDate,
      });
    });
  }

  return claims;
}

function accumulateClaimsMilestones(
  milestones: TimelineMilestone[],
  claims: TimelineClaim[]
) {
  return claims.reduce(
    (res, item) => {
      res.push(...item.milestones);

      return res;
    },
    [...milestones]
  );
}

export function prepareTimelineDataset(data: BountyContext[]): TimelineGroup[] {
  return data.map(context => {
    const item = context.bounty || context.proposal;
    let milestones: TimelineMilestone[] = [];
    const [description] = item.description.split(DATA_SEPARATOR);

    if (context.proposal) {
      // Create proposal milestone
      const proposalCreated = new Date(context.proposal.createdAt);

      milestones.push({
        type: 'Proposal Created',
        date: proposalCreated,
        tooltip: `Proposal Created ${format(
          proposalCreated,
          TOOLTIP_DATE_FORMAT
        )}`,
      });
    }

    if (context.bounty) {
      // Create bounty milestone
      const bountyCreated = new Date(context.bounty.createdAt);

      milestones.push({
        type: 'Bounty Created',
        date: bountyCreated,
        tooltip: `Bounty Created ${format(bountyCreated, TOOLTIP_DATE_FORMAT)}`,
      });
    }

    if (Number(context.bounty?.times) === 0) {
      // Complete bounty milestone
      let latestDate: Date | null = null;

      context.bounty.bountyDoneProposals
        .filter(_proposal => _proposal.status === 'Approved')
        .forEach(_proposal => {
          const updatedAt = new Date(_proposal.updatedAt);

          if (!latestDate || latestDate < updatedAt) {
            latestDate = updatedAt;
          }
        });

      if (latestDate) {
        milestones.push({
          type: 'Complete Bounty',
          date: latestDate,
          tooltip: `Bounty Completed ${format(
            latestDate,
            TOOLTIP_DATE_FORMAT
          )}`,
        });
      }
    }

    const claims = prepareClaims(context);

    milestones = accumulateClaimsMilestones(milestones, claims);

    const sortedMilestones = milestones.slice().sort((a, b) => {
      if (a.date > b.date) {
        return 1;
      }

      if (a.date < b.date) {
        return -1;
      }

      return 0;
    });

    const groupMinDate = sortedMilestones[0]?.date;
    const groupMaxDate = sortedMilestones[sortedMilestones.length - 1]?.date;

    return {
      id: context.id,
      isOpen: false,
      name: description || '',
      milestones,
      claims,
      minDate: groupMinDate,
      maxDate: groupMaxDate,
    };
  });
}

export function getTimelineRange(dataset: TimelineGroup[]): [Date, Date] {
  let min: Date | null = null; // new Date();
  let max: Date | null = null; // addMonths(min, 1);

  dataset.forEach(group => {
    group.milestones.forEach(milestone => {
      if (!min || min > milestone.date) {
        min = milestone.date;
      }

      if (!max || max < milestone.date) {
        max = milestone.date;
      }
    });
  });

  if (!min) {
    min = new Date();
  }

  if (!max) {
    max = addDays(min, 2);
  }

  return [min, max];
}

export function getTopColumns(
  start: Date,
  end: Date,
  granularity: TimelineGranularity
): Date[] {
  switch (granularity) {
    case 'hour': {
      return eachHourOfInterval({ start, end });
    }
    case 'day': {
      return eachDayOfInterval({ start, end });
    }
    default: {
      return eachMonthOfInterval({ start, end });
    }
  }
}

export function getColumns(
  start: Date,
  end: Date,
  granularity: TimelineGranularity
): Date[] {
  switch (granularity) {
    case 'hour': {
      return eachMinuteOfInterval({ start, end });
    }
    case 'day': {
      return eachHourOfInterval({ start, end });
    }
    default: {
      return eachDayOfInterval({ start, end });
    }
  }
}

export function formatColumnLabel(
  date: Date,
  granularity: TimelineGranularity
): string {
  switch (granularity) {
    case 'hour': {
      return format(date, 'mm');
    }
    case 'day': {
      return format(date, 'H');
    }
    default: {
      return format(date, 'd');
    }
  }
}

export function getTopColumnsWidth(
  date: Date,
  granularity: TimelineGranularity
): number {
  switch (granularity) {
    case 'hour': {
      return 60 * 32;
    }
    case 'day': {
      return 24 * 32;
    }
    default: {
      return getDaysInMonth(date) * 32;
    }
  }
}

export function getRangeColumns(
  date: Date,
  granularity: TimelineGranularity
): Date[] {
  switch (granularity) {
    case 'hour': {
      return eachMinuteOfInterval({
        start: startOfHour(date),
        end: endOfHour(date),
      });
    }
    case 'day': {
      return eachHourOfInterval({
        start: startOfDay(date),
        end: endOfDay(date),
      });
    }
    default: {
      return eachDayOfInterval({
        start: startOfMonth(date),
        end: endOfMonth(date),
      });
    }
  }
}

export function getMilestonesForDate(
  milestones: TimelineMilestone[],
  date: Date,
  granularity: TimelineGranularity
): TimelineMilestone[] {
  let compareFn = isSameDay;

  switch (granularity) {
    case 'day': {
      compareFn = isSameHour;

      break;
    }
    default: {
      compareFn = isSameDay;

      break;
    }
  }

  return (
    milestones?.filter(item => {
      return compareFn(date, item.date);
    }) ?? []
  );
}

export function getGroupDateStart(
  date: Date | undefined,
  granularity: TimelineGranularity
): Date | null {
  if (!date) {
    return null;
  }

  switch (granularity) {
    case 'hour': {
      return startOfMinute(date);
    }
    case 'day': {
      return startOfHour(date);
    }
    default: {
      return startOfDay(date);
    }
  }
}

export function isEndOfGranularityPeriod(
  date: Date,
  granularity: TimelineGranularity
): boolean {
  switch (granularity) {
    case 'hour': {
      return date.getMinutes() === 59;
    }
    case 'day': {
      return date.getHours() === 23;
    }
    default: {
      return isLastDayOfMonth(date);
    }
  }
}

'''
'''--- astro_2.0/features/Bounties/components/BountiesTimeline/index.ts ---
export * from './BountiesTimeline';

'''
'''--- astro_2.0/features/Bounties/components/BountiesTimeline/types.ts ---
export type TimelineMilestoneType =
  | 'Proposal Created'
  | 'Bounty Created'
  | 'Claim'
  | 'Pending Approval'
  | 'Complete Claim'
  | 'Claim Deadline'
  | 'Complete Bounty';

export type TimelineMilestone = {
  type: TimelineMilestoneType;
  date: Date;
  tooltip: string;
  color?: string;
};

export type TimelineClaim = {
  id: string;
  milestones: TimelineMilestone[];
  title: string;
  color: string;
  minDate?: Date;
  maxDate?: Date;
};

export type TimelineGroup = {
  id: string;
  name: string;
  isOpen: boolean;
  milestones: TimelineMilestone[];
  claims: TimelineClaim[];
  minDate?: Date;
  maxDate?: Date;
};

export type TimelineGranularity = 'month' | 'day' | 'hour';

'''
'''--- astro_2.0/features/Bounties/components/BountiesTimeline/utils.ts ---
function hslToHex(hue: number, sat: number, lig: number) {
  const l = lig / 100;

  const a = (sat * Math.min(l, 1 - l)) / 100;
  const f = (n: number) => {
    const k = (n + hue / 30) % 12;
    const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);

    return Math.round(255 * color)
      .toString(16)
      .padStart(2, '0');
  };

  return `#${f(0)}${f(8)}${f(4)}`;
}

export function generateHslaColors(
  saturation: number,
  lightness: number,
  alpha: number,
  amount: number
): string[] {
  const colors: string[] = [];
  const huedelta = Math.trunc(360 / amount);

  for (let i = 0; i < amount; i += 1) {
    const hue = i * huedelta;

    colors.push(hslToHex(hue, saturation, lightness));
  }

  return colors;
}

'''
'''--- astro_2.0/features/Bounties/components/HideBountyContext/index.ts ---
export * from './HideBountyContext';

'''
'''--- astro_2.0/features/Bounties/components/ViewToggle/index.ts ---
export * from './ViewToggle';

'''
'''--- astro_2.0/features/Bounties/components/hooks.ts ---
import { useCallback, useRef, useState } from 'react';
import { useRouter } from 'next/router';
import { useAsyncFn, useLocalStorage, useLocation } from 'react-use';
import axios, { CancelTokenSource } from 'axios';

import { SputnikHttpService } from 'services/sputnik';
import { useModal } from 'components/modal';
import { ConfirmActionModal } from 'astro_2.0/components/ConfirmActionModal';

import { Bounty, BountyContext, BountyProposal } from 'types/bounties';
import { VoteAction } from 'types/proposal';

import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';

import { useWalletContext } from 'context/WalletContext';
import { PaginationResponse } from 'types/api';
import { VOTE_ACTION_SOURCE_PAGE } from 'constants/votingConstants';

export function useBountyControls(
  daoId: string,
  bounty?: Bounty
): {
  handleClaim: () => void;
  handleUnclaim: () => void;
  loading: boolean;
} {
  const router = useRouter();
  const { nearService } = useWalletContext();
  const [, setVoteActionSource] = useLocalStorage(VOTE_ACTION_SOURCE_PAGE);
  const { pathname } = useLocation();
  const [loading, setLoading] = useState(false);

  const [showModal] = useModal(ConfirmActionModal);

  const onSuccessHandler = useCallback(async () => {
    router.reload();
  }, [router]);

  const handleClaim = useCallback(async () => {
    const res = await showModal({
      title: 'Confirm Your Claim',
    });

    if (res?.length && bounty) {
      setLoading(true);

      const dao = await SputnikHttpService.getDaoById(daoId);

      if (!dao) {
        return;
      }

      try {
        setVoteActionSource(pathname);

        await nearService?.claimBounty(daoId, {
          bountyId: bounty?.bountyId,
          deadline: bounty?.maxDeadline,
          bountyBond: dao.policy.bountyBond,
          gas: res[0],
          tokenId: bounty?.token,
        });

        await onSuccessHandler();
      } catch (err) {
        setLoading(false);
        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 5000,
          description: err.message,
        });
      }
    }
  }, [
    showModal,
    bounty,
    daoId,
    setVoteActionSource,
    pathname,
    nearService,
    onSuccessHandler,
  ]);

  const handleUnclaim = useCallback(async () => {
    const res = await showModal({
      title: 'Confirm Your Unclaim',
    });

    if (res?.length && bounty) {
      try {
        setLoading(true);
        setVoteActionSource(pathname);
        await nearService?.unclaimBounty(daoId, bounty?.bountyId);

        await onSuccessHandler();
      } catch (err) {
        setLoading(false);
        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 5000,
          description: err.message,
        });
      }
    }
  }, [
    showModal,
    bounty,
    setVoteActionSource,
    pathname,
    nearService,
    daoId,
    onSuccessHandler,
  ]);

  return {
    handleClaim,
    handleUnclaim,
    loading,
  };
}

export function useBountyVoting(
  daoId: string,
  proposal: BountyProposal
): {
  handleVote: (vote: VoteAction) => void;
  loading: boolean;
} {
  const router = useRouter();
  const [showModal] = useModal(ConfirmActionModal);
  const { nearService } = useWalletContext();
  const [, setVoteActionSource] = useLocalStorage(VOTE_ACTION_SOURCE_PAGE);
  const { pathname } = useLocation();

  const [{ loading }, handleVote] = useAsyncFn(
    async (vote: VoteAction) => {
      const res = await showModal({
        title: 'Confirm Your Vote',
      });

      if (res?.length) {
        setVoteActionSource(pathname);
        await nearService?.vote(daoId, proposal.proposalId, vote, res[0]);
        await router.reload();
      }
    },
    [daoId, proposal, router, nearService, pathname, setVoteActionSource]
  );

  return {
    handleVote,
    loading,
  };
}

export function useBountySearch(): {
  handleSearch: (
    val: string
  ) => Promise<PaginationResponse<BountyContext[]> | null>;
  loading: boolean;
} {
  const router = useRouter();
  const daoId = router.query.dao as string;
  const { accountId } = useWalletContext();
  const cancelTokenRef = useRef<CancelTokenSource | null>(null);

  const [{ loading }, handleSearch] = useAsyncFn(async query => {
    if (cancelTokenRef.current) {
      cancelTokenRef.current?.cancel('Cancelled by new req');
    }

    const { CancelToken } = axios;
    const source = CancelToken.source();

    cancelTokenRef.current = source;

    return SputnikHttpService.findBountyContext({
      daoId: daoId || '',
      accountId,
      query,
      cancelToken: source.token,
    });
  }, []);

  return {
    handleSearch,
    loading,
  };
}

export function useHideBounty(): {
  handleSubmit: () => void;
  handleSelect: (id: string) => void;
  selected: string[];
  loading: boolean;
} {
  const router = useRouter();
  const showHidden = router.query?.bountyFilter === 'hidden';
  const daoId = router.query.dao as string;
  const { accountId, nearService, pkAndSignature } = useWalletContext();
  const [selected, setSelected] = useState<string[]>([]);

  const [{ loading }, handleSubmit] = useAsyncFn(async () => {
    if (!pkAndSignature) {
      return;
    }

    try {
      const { publicKey, signature } = pkAndSignature;

      if (publicKey && signature) {
        await SputnikHttpService.toggleBountyContexts({
          accountId,
          publicKey,
          signature,
          daoId,
          ids: selected,
          isArchived: !showHidden,
        });

        await router.replace(router.asPath, undefined, {
          shallow: false,
        });

        setSelected([]);
      }
    } catch (err) {
      showNotification({
        type: NOTIFICATION_TYPES.ERROR,
        lifetime: 20000,
        description: err.message,
      });
    }
  }, [
    selected,
    daoId,
    showHidden,
    accountId,
    router,
    nearService,
    pkAndSignature,
  ]);

  const handleSelect = useCallback(
    (id: string) => {
      if (selected.includes(id)) {
        setSelected(selected.filter(item => item !== id));
      } else {
        setSelected([...selected, id]);
      }
    },
    [selected]
  );

  return {
    handleSubmit,
    handleSelect,
    selected,
    loading,
  };
}

'''
'''--- astro_2.0/features/Comments/components/Comment/LikeButton/index.ts ---
export * from './LikeButton';

'''
'''--- astro_2.0/features/Comments/components/Comment/index.ts ---
export * from './Comment';

'''
'''--- astro_2.0/features/Comments/components/CommentActions/CommentAction/index.ts ---
export * from './CommentAction';

'''
'''--- astro_2.0/features/Comments/components/CommentActions/index.ts ---
export * from './CommentActions';

'''
'''--- astro_2.0/features/Comments/components/CommentContent/index.ts ---
export * from './CommentContent';

'''
'''--- astro_2.0/features/Comments/hooks.ts ---
import { useCallback, useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import uniqBy from 'lodash/uniqBy';
import { useAsyncFn, useMount, useMountedState } from 'react-use';
import { useDraftsContext } from 'astro_2.0/features/Drafts/components/DraftsProvider';
import { DraftComment } from 'services/DraftsService/types';
import { useWalletContext } from 'context/WalletContext';
import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';
import { configService } from 'services/ConfigService';
import io, { Socket as TSocket } from 'socket.io-client';
import { fetcher as getDraftProposalComments } from 'services/ApiService/hooks/useDraftComments';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { DraftCommentIndex } from 'services/SearchService/types';
import { mapDraftCommentIndexToDraftComment } from 'services/SearchService/mappers/draftComment';

type Socket = typeof TSocket;

function prepareData(data: DraftComment[]) {
  const groups = data.reduce<Record<string, DraftComment[]>>((res, item) => {
    const key = item.replyTo ?? '';

    if (res[key]) {
      res[key].push(item);
    } else {
      res[key] = [item];
    }

    return res;
  }, {});

  if (!groups['']) {
    return data;
  }

  return groups[''].map(item => {
    return {
      ...item,
      replies: groups[item.id] ?? [],
    };
  });
}

export function useDraftComments(): {
  loading: boolean;
  countComments: number;
  data: DraftComment[];
  addComment: (val: string) => Promise<void>;
  editComment: (val: string, id: string) => Promise<void>;
  deleteComment: (id: string) => Promise<void>;
  likeComment: (id: string, isLiked: boolean) => Promise<void>;
  dislikeComment: (id: string, idDislike: boolean) => Promise<void>;
} {
  const isMounted = useMountedState();
  const router = useRouter();
  const { draft, dao } = router.query;
  const contextId = draft as string;
  const daoId = dao as string;
  const contextType = 'DraftProposal';

  const { useOpenSearchDataApi } = useFlags();
  const { draftsService, setAmountComments } = useDraftsContext();
  const { accountId, pkAndSignature } = useWalletContext();

  const [value, setValue] = useState<{
    data: DraftComment[];
    countComments: number;
  }>({
    data: [],
    countComments: 0,
  });

  const [{ loading }, getAllComments] = useAsyncFn(async () => {
    if (useOpenSearchDataApi === undefined) {
      return;
    }

    try {
      const data = useOpenSearchDataApi
        ? await getDraftProposalComments(
            'draftProposalComment',
            daoId,
            contextId
          )
        : await draftsService.getDraftComments({
            contextId,
            contextType,
            offset: 0,
            limit: 1000,
          });

      setValue({
        data,
        countComments: data.length,
      });
    } catch (e) {
      showNotification({
        type: NOTIFICATION_TYPES.ERROR,
        lifetime: 20000,
        description: e?.message,
      });
    }
  }, [contextId, useOpenSearchDataApi]);

  useMount(() => getAllComments());

  const addComment = useCallback(
    async (msg: string, replyTo?: string) => {
      const { publicKey, signature } = pkAndSignature || {};

      if (!publicKey || !signature) {
        return;
      }

      try {
        await draftsService.createDraftComment({
          contextId,
          daoId,
          contextType,
          message: msg,
          replyTo,
          accountId,
          publicKey,
          signature,
        });
      } catch (e) {
        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 20000,
          description: e?.message,
        });
      }
    },
    [accountId, contextId, daoId, draftsService, pkAndSignature]
  );

  const editComment = useCallback(
    async (msg: string, id: string) => {
      const { publicKey, signature } = pkAndSignature || {};

      if (!publicKey || !signature) {
        return;
      }

      try {
        await draftsService.editDraftComment({
          id,
          daoId,
          draftId: contextId,
          message: msg,
          accountId,
          publicKey,
          signature,
        });

        await getAllComments();
      } catch (e) {
        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 20000,
          description: e?.message,
        });
      }
    },
    [pkAndSignature, draftsService, daoId, contextId, accountId, getAllComments]
  );

  const likeComment = useCallback(
    async (id: string, isLiked: boolean) => {
      const { publicKey, signature } = pkAndSignature || {};

      if (!publicKey || !signature) {
        return;
      }

      const params = {
        id,
        daoId,
        draftId: contextId,
        accountId,
        publicKey,
        signature,
      };

      try {
        if (isLiked) {
          await draftsService.removeLikeDraftComment(params);
        } else {
          await draftsService.removeDislikeDraftComment(params);
          await draftsService.likeDraftComment(params);
        }
      } catch (e) {
        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 20000,
          description: e?.message,
        });
      }
    },
    [accountId, contextId, daoId, draftsService, pkAndSignature]
  );

  const dislikeComment = useCallback(
    async (id: string, isDislike: boolean) => {
      const { publicKey, signature } = pkAndSignature || {};

      if (!publicKey || !signature) {
        return;
      }

      const params = {
        id,
        daoId,
        draftId: contextId,
        accountId,
        publicKey,
        signature,
      };

      try {
        if (isDislike) {
          await draftsService.removeDislikeDraftComment(params);
        } else {
          await draftsService.removeLikeDraftComment(params);
          await draftsService.dislikeDraftComment(params);
        }
      } catch (e) {
        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 20000,
          description: e?.message,
        });
      }
    },
    [accountId, contextId, daoId, draftsService, pkAndSignature]
  );

  const deleteComment = useCallback(
    async (id: string) => {
      const { publicKey, signature } = pkAndSignature || {};

      if (!publicKey || !signature) {
        return;
      }

      try {
        await draftsService.deleteDraftComment({
          id,
          daoId,
          draftId: contextId,
          accountId,
          publicKey,
          signature,
        });
      } catch (e) {
        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 20000,
          description: e?.message,
        });
      }
    },
    [accountId, contextId, daoId, draftsService, pkAndSignature]
  );

  useEffect(() => {
    setAmountComments(value?.countComments || 0);
  }, [value?.countComments, setAmountComments]);

  useEffect(() => {
    let socket: Socket;
    const { appConfig } = configService.get();

    const { publicKey, signature } = pkAndSignature || {};

    if (accountId && publicKey && isMounted() && appConfig) {
      socket = io(appConfig.DRAFTS_API_URL, {
        query: {
          accountId,
          publicKey,
          signature,
        },
        transports: ['websocket'],
      });

      if (socket) {
        socket.on(
          'draft-comment',
          (comment: DraftComment | DraftCommentIndex) => {
            if (isMounted()) {
              setValue(prev => {
                const newValue = mapDraftCommentIndexToDraftComment(
                  comment as DraftCommentIndex
                ) as DraftComment;

                return {
                  data: uniqBy([newValue, ...prev.data], item => item.id),
                  countComments: prev.countComments + 1,
                };
              });
            }
          }
        );
        socket.on(
          'draft-comment-updated',
          (comment: DraftComment | DraftCommentIndex) => {
            if (isMounted()) {
              setValue(prev => {
                const newValue = mapDraftCommentIndexToDraftComment(
                  comment as DraftCommentIndex
                ) as DraftComment;

                const newData = prev.data.map(item => {
                  if (item.id !== newValue.id) {
                    return item;
                  }

                  return newValue;
                });

                return {
                  data: newData,
                  countComments: newData.length,
                };
              });
            }
          }
        );
        socket.on(
          'draft-comment-removed',
          (comment: DraftComment | DraftCommentIndex) => {
            if (isMounted()) {
              const newValue = mapDraftCommentIndexToDraftComment(
                comment as DraftCommentIndex
              ) as DraftComment;

              setValue(prev => {
                const newData = prev.data.filter(
                  item => item.id !== newValue.id
                );

                return {
                  data: newData,
                  countComments: newData.length,
                };
              });
            }
          }
        );
      }
    }
  }, [accountId, isMounted, pkAndSignature, useOpenSearchDataApi]);

  const preparedData = prepareData(value.data);

  return {
    loading,
    countComments: preparedData?.length || 0,
    data: preparedData ?? [],
    addComment,
    editComment,
    deleteComment,
    likeComment,
    dislikeComment,
  };
}

'''
'''--- astro_2.0/features/Comments/index.ts ---
export * from './Comments';

'''
'''--- astro_2.0/features/CreateDao/components/CustomEdit/index.ts ---
import CustomEdit from './CustomEdit';

export default CustomEdit;

'''
'''--- astro_2.0/features/CreateDao/components/DaoAssetsForm/index.ts ---
export * from './DaoAssetsForm';

'''
'''--- astro_2.0/features/CreateDao/components/DaoFlagForm/index.ts ---
export * from './DaoFlagForm';

'''
'''--- astro_2.0/features/CreateDao/components/DaoGroupsForm/components/DaoGroupLine/index.ts ---
export * from './DaoGroupLine';

'''
'''--- astro_2.0/features/CreateDao/components/DaoGroupsForm/index.ts ---
export * from './DaoGroupsForm';

'''
'''--- astro_2.0/features/CreateDao/components/DaoLegalStatus/index.ts ---
export * from './DaoLegalStatus';

'''
'''--- astro_2.0/features/CreateDao/components/DaoLinksForm/components/DaoLinkLine/index.ts ---
export * from './DaoLinkLine';

'''
'''--- astro_2.0/features/CreateDao/components/DaoLinksForm/index.ts ---
export * from './DaoLinksForm';

'''
'''--- astro_2.0/features/CreateDao/components/DaoMembersForm/components/DaoMemberLine/index.ts ---
export * from './DaoMemberLine';

'''
'''--- astro_2.0/features/CreateDao/components/DaoMembersForm/index.ts ---
export * from './DaoMembersForm';

'''
'''--- astro_2.0/features/CreateDao/components/DaoNameForm/components/DaoAddress/index.ts ---
export * from './DaoAddress';

'''
'''--- astro_2.0/features/CreateDao/components/DaoNameForm/components/DaoNameInputSection/index.ts ---
export * from './DaoNameInputSection';

'''
'''--- astro_2.0/features/CreateDao/components/DaoNameForm/helpers.ts ---
export function formatDaoAddress(address = ''): string {
  return address.toLowerCase().trim().replace(/ +/g, ' ').replace(/ /g, '-');
}

'''
'''--- astro_2.0/features/CreateDao/components/DaoNameForm/index.ts ---
export * from './DaoNameForm';

'''
'''--- astro_2.0/features/CreateDao/components/DaoProposalCreationForm/index.ts ---
export * from './DaoProposalCreationForm';

'''
'''--- astro_2.0/features/CreateDao/components/DaoRulesForm/index.ts ---
export * from './DaoRulesForm';

'''
'''--- astro_2.0/features/CreateDao/components/DaoSubmitForm/helpers.ts ---
import { RolesRequest, VotePolicyRequest } from 'types/dao';
import { DAOFormValues } from 'astro_2.0/features/CreateDao/components/types';
import { ProposalsStep, VotingStep } from 'astro_2.0/features/CreateDao/types';
import { updateRoleWithNewPermissions } from 'astro_2.0/features/CreateProposal/helpers/permissionsHelpers';
import { DaoPermission, DaoRole } from 'types/role';

const EveryoneCanDoEverything = (accountIds: string[]) => ({
  name: 'Everyone',
  kind: { Group: accountIds },
  permissions: [
    '*:Finalize',
    '*:AddProposal',
    '*:VoteApprove',
    '*:VoteReject',
    '*:VoteRemove',
  ],
  vote_policy: {},
});

const EveryoneCanSubmitProposal = {
  name: 'all',
  kind: 'Everyone',
  permissions: ['*:AddProposal'],
  vote_policy: {},
};

const GroupMembersCanActOnProposals = (
  groupName: string,
  accountIds: string[],
  votePolicy?: Record<string, VotePolicyRequest>
) => ({
  name: groupName,
  kind: { Group: accountIds },
  permissions: [
    '*:Finalize',
    '*:AddProposal',
    '*:VoteApprove',
    '*:VoteReject',
    '*:VoteRemove',
  ],
  vote_policy: votePolicy || {},
});

const DemocraticVoting = {
  weight_kind: 'RoleWeight',
  quorum: '0',
  threshold: [1, 2],
};

const TokenBasedVoting = {
  weight_kind: 'TokenWeight',
  quorum: '0',
  threshold: '5',
};

export function getRolesVotingPolicy(
  data: Partial<DAOFormValues>,
  accountIds: string[]
): {
  roles: RolesRequest[];
  defaultVotePolicy: VotePolicyRequest;
} {
  const roles: RolesRequest[] = [];

  if (data.structure === 'flat') {
    roles.push(EveryoneCanDoEverything(accountIds), EveryoneCanSubmitProposal);
  } else if (data.structure === 'groups') {
    roles.push(GroupMembersCanActOnProposals('Council', accountIds));

    if (data.proposals === 'open') {
      roles.push(EveryoneCanSubmitProposal);
    }

    if (data.voting === 'weighted') {
      roles.push(
        GroupMembersCanActOnProposals('Committee', accountIds, {
          '*.*': TokenBasedVoting,
        })
      );
    }
  }

  return {
    roles,
    defaultVotePolicy: DemocraticVoting,
  };
}

export function getDetailedRolesVotingPolicy(
  proposals: ProposalsStep,
  voting: VotingStep,
  accountIds: { name: string; role: string }[],
  groups: { name: string; slug?: string }[]
): {
  roles: RolesRequest[];
  defaultVotePolicy: VotePolicyRequest;
} {
  // todo - use groups here
  // const oldGroups = ((proposals.data ?? []) as unknown) as { label: string }[];

  const roles: DaoRole[] = [...groups]
    .map(item => {
      if (item.slug === 'all') {
        return {
          name: item.name,
          slug: item.slug,
          kind: 'Everyone',
          permissions: ['*:AddProposal'] as DaoPermission[],
          vote_policy: {},
        };
      }

      return {
        name: item.name,
        slug: item.slug,
        kind: {
          Group: accountIds
            .filter(account => account.role === item.name)
            .map(account => account.name.trim()),
        },
        permissions: [
          '*:Finalize',
          '*:AddProposal',
          '*:VoteApprove',
          '*:VoteReject',
          '*:VoteRemove',
        ] as DaoPermission[],
        vote_policy: {},
      };
    })
    .map(role => {
      return updateRoleWithNewPermissions(proposals.data ?? [], role, [
        'AddProposal',
      ]);
    })
    .map(role => {
      return updateRoleWithNewPermissions(voting.data ?? [], role, [
        'VoteApprove',
        'VoteReject',
        'VoteRemove',
      ]);
    });

  return {
    roles: roles as unknown as RolesRequest[],
    defaultVotePolicy: DemocraticVoting,
  };
}

'''
'''--- astro_2.0/features/CreateDao/components/DaoSubmitForm/index.ts ---
export * from './DaoSubmitForm';

'''
'''--- astro_2.0/features/CreateDao/components/DaoVotingPermissionsForm/index.ts ---
export * from './DaoVotingPermissionsForm';

'''
'''--- astro_2.0/features/CreateDao/components/ImageUpload/helpers.ts ---
import * as yup from 'yup';
import { getImgValidationError, validateImgSize } from 'utils/imageValidators';

const schema = yup.object().shape({
  value: yup.mixed().test('fileSize', getImgValidationError, validateImgSize),
});

export async function validateAsset(data: { value: FileList }): Promise<{
  values: Record<string, unknown> | null;
  errors: Record<string, { type: string; message: string }> | null;
}> {
  try {
    await schema.validate(data, {
      abortEarly: false,
    });

    return {
      values: { value: data.value },
      errors: null,
    };
  } catch (e) {
    return {
      values: null,
      errors: e.inner.reduce(
        (
          allErrors: Record<string, string>,
          currentError: { path: string; type?: string; message: string }
        ) => {
          return {
            ...allErrors,
            value: {
              type: currentError.type ?? 'validation',
              message: currentError.message,
            },
          };
        },
        {}
      ),
    };
  }
}

'''
'''--- astro_2.0/features/CreateDao/components/ImageUpload/index.ts ---
export * from './ImageUpload';

'''
'''--- astro_2.0/features/CreateDao/components/PreviewModal/index.ts ---
export * from './PreviewModal';

'''
'''--- astro_2.0/features/CreateDao/components/StepCounter/index.ts ---
export * from './StepCounter';

'''
'''--- astro_2.0/features/CreateDao/components/StepWrapper/index.ts ---
export * from './StepWrapper';

'''
'''--- astro_2.0/features/CreateDao/components/SubjectRule/components/DaoOptionCard/index.ts ---
export * from './DaoOptionCard';

'''
'''--- astro_2.0/features/CreateDao/components/SubjectRule/index.ts ---
export * from './SubjectRule';

'''
'''--- astro_2.0/features/CreateDao/components/SubmitButton/index.ts ---
export * from './SubmitButton';

'''
'''--- astro_2.0/features/CreateDao/components/TemplateRules/components/TemplateLink/index.ts ---
export * from './TemplateLink';

'''
'''--- astro_2.0/features/CreateDao/components/TemplateRules/constants.ts ---
import {
  DAOProposalsType,
  DAOStructureType,
  DAOTemplate,
  DAOVotingPowerType,
} from 'astro_2.0/features/CreateDao/components/types';

interface Template {
  proposals: DAOProposalsType;
  structure: DAOStructureType;
  voting: DAOVotingPowerType;
}

export const CUSTOM_TEMPLATE = 'custom';

export const CLUB_TEMPLATE: Template = {
  proposals: 'closed',
  structure: 'flat',
  voting: 'democratic',
};

export const FOUNDATION_TEMPLATE: Template = {
  proposals: 'open',
  structure: 'groups',
  voting: 'democratic',
};

export const CORP_TEMPLATE: Template = {
  proposals: 'closed',
  structure: 'groups',
  voting: 'weighted',
};

export const COOP_TEMPLATE: Template = {
  proposals: 'closed',
  structure: 'groups',
  voting: 'democratic',
};

export const DAO_TEMPLATE_CLUB: DAOTemplate = {
  variant: 'club',
  title: 'Club',
  description: `A small circle of friends
A group of fans
A social club`,
  ...CLUB_TEMPLATE,
};

export const DAO_TEMPLATE_FOUNDATION: DAOTemplate = {
  variant: 'foundation',
  title: 'Foundation',
  description: `A group giving donations
An organization funding community projects
A fund for open-source projects`,
  ...FOUNDATION_TEMPLATE,
};

export const DAO_TEMPLATE_CORP: DAOTemplate = {
  variant: 'corporation',
  title: 'Corporation',
  description: `A business with shareholders
A startup or company`,
  ...CORP_TEMPLATE,
};

export const DAO_TEMPLATE_COOP: DAOTemplate = {
  variant: 'cooperative',
  title: 'Cooperative',
  description: `A business with members
A creative collective`,
  ...COOP_TEMPLATE,
};

export const DAO_TEMPLATES: DAOTemplate[] = [
  DAO_TEMPLATE_CLUB,
  DAO_TEMPLATE_FOUNDATION,
  DAO_TEMPLATE_CORP,
  DAO_TEMPLATE_COOP,
];

'''
'''--- astro_2.0/features/CreateDao/components/TemplateRules/index.ts ---
export * from './TemplateRules';

'''
'''--- astro_2.0/features/CreateDao/components/UnitSeparator/index.ts ---
export * from './UnitSeparator';

'''
'''--- astro_2.0/features/CreateDao/components/helpers.ts ---
import { GlobalState } from 'little-state-machine';
import {
  AssetsStep,
  GroupsStep,
  InfoStep,
  LegalStep,
  LinksStep,
  MembersStep,
  ProposalsStep,
  SubmitStep,
  VotingStep,
} from 'astro_2.0/features/CreateDao/types';
import { AnySchema } from 'yup';
import { ResolverError, ResolverResult } from 'react-hook-form';
import { DEFAULT_CREATE_DAO_GAS } from 'services/sputnik/constants';

export function getInitialValues(
  accountId: string,
  defaultFlag: string
): GlobalState {
  return {
    info: {
      displayName: '',
      address: '',
      purpose: '',
      isValid: false,
    },
    kyc: {
      legalStatus: '',
      legalLink: '',
      isValid: false,
    },
    links: {
      websites: [],
      isValid: false,
    },
    groups: {
      items: [{ name: 'council', slug: 'council' }],
      isValid: false,
    },
    members: {
      accounts: [],
      isValid: false,
    },
    assets: {
      flagCover: '',
      flagLogo: '',
      defaultFlag,
      isValid: false,
    },
    voting: {
      data: null,
      isValid: false,
    },
    proposals: {
      data: null,
      isValid: false,
    },
    submit: {
      isValid: true,
      gas: DEFAULT_CREATE_DAO_GAS,
    },
  };
}

export function updateAction(
  state: GlobalState,
  payload: Record<
    string,
    | InfoStep
    | LegalStep
    | LinksStep
    | MembersStep
    | GroupsStep
    | AssetsStep
    | VotingStep
    | ProposalsStep
    | SubmitStep
  >
): GlobalState {
  return {
    ...state,
    ...payload,
  };
}

export async function handleValidate<T>(
  schema: AnySchema,
  data: T,
  onUpdateCb: (valid: boolean, data?: T, errors?: ResolverError<T>) => void
): Promise<ResolverResult<T>> {
  try {
    const values = await schema.validate(data, {
      abortEarly: false,
    });

    onUpdateCb(true);

    return {
      values,
      errors: {},
    };
  } catch (e) {
    onUpdateCb(false);

    return {
      values: {},
      errors: e.inner.reduce(
        (
          allErrors: Record<string, string>,
          currentError: { path: string; type?: string; message: string }
        ) => {
          return {
            ...allErrors,
            [currentError.path]: {
              type: currentError.type ?? 'validation',
              message: currentError.message,
            },
          };
        },
        {}
      ),
    };
  }
}

'''
'''--- astro_2.0/features/CreateDao/components/hooks.ts ---
import {
  useFormContext,
  UseFormGetValues,
  UseFormSetValue,
} from 'react-hook-form';
import {
  DAOFormValues,
  DAOProposalsType,
  DaoSettingOption,
  DAOStructureType,
  DAOVotingPowerType,
} from 'astro_2.0/features/CreateDao/components/types';
import { useCallback, useEffect, useState } from 'react';
import {
  DAO_PROPOSALS_OPTIONS,
  DAO_STRUCTURE_OPTIONS,
  DAO_VOTING_POWER_OPTIONS,
} from 'astro_2.0/features/CreateDao/components/data';
import { httpService } from 'services/HttpService';
import { CreateDaoCustomInput, CreateDaoInput } from 'types/dao';
import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';
import { configService } from 'services/ConfigService';
import { SputnikWalletError } from 'errors/SputnikWalletError';
import { useRouter } from 'next/router';
import { useTranslation } from 'next-i18next';
import {
  getInitialValues,
  updateAction,
} from 'astro_2.0/features/CreateDao/components/helpers';
import { useStateMachine } from 'little-state-machine';
import { useWalletContext } from 'context/WalletContext';
import { GA_EVENTS, sendGAEvent } from 'utils/ga';

type DaoFormStateReturn = {
  options: DaoSettingOption<
    DAOStructureType | DAOVotingPowerType | DAOProposalsType
  >[];
  getValues: UseFormGetValues<DAOFormValues>;
  setValue: UseFormSetValue<DAOFormValues>;
};

export const useDaoFormState = (): DaoFormStateReturn => {
  const { getValues, watch, setValue } = useFormContext<DAOFormValues>();

  const [structure, voting, proposals] = watch([
    'structure',
    'voting',
    'proposals',
  ]);

  const [options, setOptions] = useState<
    DaoSettingOption<DAOStructureType | DAOVotingPowerType | DAOProposalsType>[]
  >([]);

  useEffect(() => {
    setOptions([
      DAO_STRUCTURE_OPTIONS[structure],
      DAO_VOTING_POWER_OPTIONS[voting],
      DAO_PROPOSALS_OPTIONS[proposals],
    ]);
  }, [structure, voting, proposals, setValue]);

  return { options, getValues, setValue };
};

export function useImageUpload(): {
  uploadImage: (file: File) => Promise<string>;
} {
  const uploadImage = useCallback(async (img: File) => {
    try {
      if (img) {
        const { data } = await httpService.post('/api/upload-to-s3', img, {
          baseURL: '',
        });

        return data;
      }
    } catch (e) {
      return '';
    }

    return '';
  }, []);

  return { uploadImage };
}

export function useCreateDao(): {
  uploadAssets: (defaultFlag: string) => Promise<string>;
  createDao: (
    daoName: string,
    data: CreateDaoInput | CreateDaoCustomInput
  ) => Promise<void>;
} {
  const router = useRouter();
  const { t } = useTranslation();
  const { accountId, nearService } = useWalletContext();
  const { actions, state } = useStateMachine({ updateAction });

  const uploadImg = useCallback(async (img: File) => {
    if (img) {
      const { data } = await httpService.post('/api/upload-to-s3', img, {
        baseURL: '',
      });

      return data;
    }

    return '';
  }, []);

  async function loadImage(defaultFlag: string) {
    const response = await fetch(defaultFlag);
    const blob = await response.blob();

    return new File([blob], 'image.png', { type: 'image/png' });
  }

  const uploadAssets = useCallback(
    async (defaultFlag: string) => {
      try {
        const defaultFlagFile = await loadImage(defaultFlag);

        return uploadImg(defaultFlagFile);
      } catch (e) {
        return '';
      }
    },
    [uploadImg]
  );

  const createDao = useCallback(
    async (daoName: string, data: CreateDaoInput | CreateDaoCustomInput) => {
      try {
        await nearService?.createDao(data);

        const { nearConfig } = configService.get();
        const daoId = `${daoName}.${nearConfig?.contractName ?? ''}`;

        sendGAEvent({
          name: GA_EVENTS.CREATE_DAO,
          daoId,
          accountId,
        });

        showNotification({
          type: NOTIFICATION_TYPES.INFO,
          description: t('notifications.transactionDelay'),
          lifetime: 20000,
        });

        sessionStorage.removeItem('__LSM__');
        actions.updateAction(
          getInitialValues(accountId, state.assets.defaultFlag)
        );

        await router.push(`/dao/${daoId}`);
      } catch (error) {
        console.warn(error);

        if (error instanceof SputnikWalletError) {
          showNotification({
            type: NOTIFICATION_TYPES.ERROR,
            description: error.message,
            lifetime: 20000,
          });
        }
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [router, uploadImg, nearService]
  );

  return {
    createDao,
    uploadAssets,
  };
}

'''
'''--- astro_2.0/features/CreateDao/constants.ts ---
export const STEPS = {
  INFO: 'info',
  KYC: 'kyc',
  LINKS: 'links',
  GROUPS: 'groups',
  MEMBERS: 'members',
  PROPOSALS: 'proposals',
  VOTING: 'voting',
  ASSETS: 'assets',
};

'''
'''--- astro_2.0/features/CreateDao/helpers.ts ---
import { configService } from 'services/ConfigService';
import { CreateDaoInput } from 'types/dao';
import { getDetailedRolesVotingPolicy } from 'astro_2.0/features/CreateDao/components/DaoSubmitForm/helpers';
import { DEFAULT_CREATE_DAO_GAS } from 'services/sputnik/constants';
import { GlobalState } from 'little-state-machine';
import { SputnikNearService } from 'services/sputnik';

export async function validateDaoAddress(
  value: string | undefined,
  nearService: SputnikNearService | undefined
): Promise<boolean> {
  if (!nearService) {
    return false;
  }

  if (!value) {
    return true;
  }

  const { nearConfig } = configService.get();

  return nearService?.nearAccountExist(
    `${value}.${nearConfig?.contractName ?? ''}`
  );
}

export function getNewDaoParams(
  data: GlobalState,
  accountId: string,
  cover?: string
): CreateDaoInput {
  return {
    name: data.info.address,
    purpose: data.info.purpose,
    links: data.links.websites as CreateDaoInput['links'],
    flagCover: data.assets.flagCover || cover || '',
    flagLogo: data.assets.flagLogo,
    bond: '0.1',
    votePeriod: '168',
    gracePeriod: '24',
    amountToTransfer: '6',
    displayName: data.info.displayName,
    policy: {
      ...getDetailedRolesVotingPolicy(
        data.proposals,
        data.voting,
        data.members.accounts,
        data.groups.items
      ),
      proposalBond: '0.1',
      proposalPeriod: '168',
      bountyBond: '0.1',
      bountyForgivenessPeriod: '168',
    },
    legal: {
      legalStatus: data.kyc.legalStatus,
      legalLink: data.kyc.legalLink,
    },
    gas: data.submit.gas || DEFAULT_CREATE_DAO_GAS,
  };
}

'''
'''--- astro_2.0/features/CreateDao/types.ts ---
import { SelectorRow } from 'astro_2.0/features/pages/nestedDaoPagesContent/DaoPolicyPageContent/helpers';

export type InfoStep = {
  displayName: string;
  address: string;
  purpose: string;
  isValid: boolean;
};

export type LegalStep = {
  legalStatus: string;
  legalLink: string;
  isValid: boolean;
};

export type ProposalsStep = {
  data: SelectorRow[] | null;
  isValid: boolean;
};

export type VotingStep = {
  data: SelectorRow[] | null;
  isValid: boolean;
};

export type SubmitStep = {
  gas: number | string;
  isValid: boolean;
};

export type LinksStep = {
  websites: string[];
  isValid: boolean;
};

export type MembersStep = {
  accounts: { name: string; role: string }[];
  isValid: boolean;
};

export type GroupsStep = {
  items: { name: string; slug?: string }[];
  isValid: boolean;
};

export type AssetsStep = {
  flagCover: string;
  flagLogo: string;
  defaultFlag: string;
  isValid: boolean;
};

declare module 'little-state-machine' {
  interface GlobalState
    extends Record<
      string,
      | InfoStep
      | LegalStep
      | LinksStep
      | GroupsStep
      | MembersStep
      | AssetsStep
      | ProposalsStep
      | VotingStep
      | SubmitStep
    > {
    info: InfoStep;
    kyc: LegalStep;
    links: LinksStep;
    members: MembersStep;
    groups: GroupsStep;
    assets: AssetsStep;
    submit: SubmitStep;
    proposals: ProposalsStep;
    voting: VotingStep;
  }
}

'''
'''--- astro_2.0/features/CreateExternalProposal/hooks.ts ---
import { ProposalVariant } from 'types/proposal';
import { useCallback, useEffect, useState } from 'react';
import { useWalletContext } from 'context/WalletContext';
import { useMountedState } from 'react-use';
import { useRouter } from 'next/router';
import omit from 'lodash/omit';

const CREATE_PROPOSAL = 'create_proposal';

// example:
// https://dev.app.astrodao.com/dao/aviarium.sputnikv2.testnet/proposals?action=create_proposal&variant=ProposeCustomFunctionCall&params={"details":"Proposal description here", "methodName": "create", "smartContractAddress": "sputnikv2.testnet", "json":{ "key": "some value" }}

export function isActionValid(action: string | undefined): boolean {
  return action === CREATE_PROPOSAL;
}

export function isVariantValid(proposalVariant: string | undefined): boolean {
  return Object.values(ProposalVariant).includes(
    proposalVariant as ProposalVariant
  );
}

export function useCreateProposalFromExternal(
  onCreateProposal: (
    initialProposalVariant?: ProposalVariant,
    initialValues?: Record<string, unknown>
  ) => void
): {
  error: string;
  handleDismiss: () => void;
} {
  const router = useRouter();
  const isMounted = useMountedState();
  const { accountId } = useWalletContext();
  const { action, variant, params } = router.query;

  const [error, setError] = useState<string>('');

  const handleDismiss = useCallback(() => {
    setError('');
    router.replace(
      {
        pathname: router.pathname,
        query: omit(router.query, ['action', 'variant', 'params']),
      },
      undefined,
      {
        shallow: true,
      }
    );
  }, [router]);

  useEffect(() => {
    (async () => {
      try {
        if (!action && !variant) {
          return;
        }

        if (!isActionValid(action as string)) {
          setError('Unsupported action');

          return;
        }

        if (!isVariantValid(variant as string)) {
          setError('Unsupported proposal variant');

          return;
        }

        if (!accountId) {
          setError(
            'Cannot create proposal by unauthorized user. Please sign in first'
          );

          return;
        }

        // http://localhost:8080/dao/aviarium.sputnikv2.testnet/proposals?action=create_proposal&variant=ProposeCustomFunctionCall&params={"details":"Proposal description here", "methodName": "create", "smartContractAddress": "sputnikv2.testnet", "json":{ "msg": "{\"draft_group_id\":1}" }}
        // http://localhost:8080/dao/aviarium.sputnikv2.testnet/proposals?action=create_proposal&variant=ProposeCustomFunctionCall&params={"details":"Proposal description here", "methodName": "create", "smartContractAddress": "sputnikv2.testnet", "json":{ "msg": {"draft_group_id":1} }}

        const parsedParams = params
          ? JSON.parse(decodeURIComponent(params as string).trim())
          : {};

        setError('');

        setTimeout(() => {
          if (!isMounted()) {
            return;
          }

          onCreateProposal(variant as ProposalVariant, {
            ...parsedParams,
            json: JSON.stringify(parsedParams.json),
          });
        }, 1500);
      } catch (e) {
        // probably invalid params
        setError('Invalid proposal parameters');
      }
    })();
  }, [onCreateProposal, accountId, isMounted, action, variant, params]);

  return {
    error,
    handleDismiss,
  };
}

'''
'''--- astro_2.0/features/CreateExternalProposal/index.ts ---
export * from './CreateExternalProposal';

'''
'''--- astro_2.0/features/CreateExternalProposal/tests/hooks.spec.ts ---
import {
  isActionValid,
  isVariantValid,
} from 'astro_2.0/features/CreateExternalProposal/hooks';
import { ProposalVariant } from 'types/proposal';

describe('create external proposal', () => {
  it('Should return false if provided action is invalid', () => {
    const action = 'some_action';

    expect(isActionValid(action)).toBeFalsy();
  });

  it('Should return true if provided action is valid', () => {
    const action = 'create_proposal';

    expect(isActionValid(action)).toBeTruthy();
  });

  it('Should accept only known Proposal Variants', () => {
    expect(isVariantValid(ProposalVariant.ProposeChangeDaoName)).toBeTruthy();
    expect(isVariantValid(ProposalVariant.ProposeAddMember)).toBeTruthy();
    expect(isVariantValid('some_variant')).toBeFalsy();
  });
});

'''
'''--- astro_2.0/features/CreateProposal/components/AcceptStakingContractContent/index.ts ---
export * from './AcceptStakingContractContent';

'''
'''--- astro_2.0/features/CreateProposal/components/AddBountyContent/index.ts ---
export * from './AddBountyContent';

'''
'''--- astro_2.0/features/CreateProposal/components/AddBountyContent/tests/mock.ts ---
import { Token } from 'types/token';

export const tokens = {
  NEAR: {
    createdAt: '2021-12-07T19:15:52.793Z',
    transactionHash: null,
    updateTransactionHash: null,
    createTimestamp: null,
    updateTimestamp: '1639053338980000000',
    id: 'NEAR',
    ownerId: '',
    totalSupply: '',
    decimals: 24,
    icon: 'customIcon',
    name: null,
    reference: null,
    referenceHash: null,
    spec: null,
    symbol: 'NEAR',
    price: '10.68',
    balance: '5.1002',
    tokenId: '',
  },
  BIBA: {
    createdAt: '2021-12-07T19:15:52.793Z',
    transactionHash: null,
    updateTransactionHash: null,
    createTimestamp: null,
    updateTimestamp: '1639053338980000000',
    id: 'BIBA',
    ownerId: '',
    totalSupply: '',
    decimals: 24,
    icon: 'customIcon',
    name: null,
    reference: null,
    referenceHash: null,
    spec: null,
    symbol: 'BIBA',
    price: '10.68',
    balance: '5.1002',
    tokenId: '',
  },
} as unknown as Record<string, Token>;

'''
'''--- astro_2.0/features/CreateProposal/components/AddBountyContent/tests/utils.test.ts ---
import times from 'lodash/times';
import { getAmountFieldWidth } from 'astro_2.0/features/CreateProposal/components/AddBountyContent/utils';

describe('AddBountyContent utils', () => {
  it('Should properly calculate width', () => {
    expect(getAmountFieldWidth(times(2, i => i))).toEqual(7);
    expect(getAmountFieldWidth(times(20, i => i))).toEqual(15);
    expect(getAmountFieldWidth(times(10, i => i))).toEqual(10);
    expect(getAmountFieldWidth()).toEqual(7);
  });
});

'''
'''--- astro_2.0/features/CreateProposal/components/AddBountyContent/utils.ts ---
export function getAmountFieldWidth(amount?: unknown[]): number {
  if (amount?.length && amount.length <= 6) {
    return 7;
  }

  if (amount?.length && amount.length >= 15) {
    return 15;
  }

  return amount?.length || 7;
}

'''
'''--- astro_2.0/features/CreateProposal/components/AddMemberToGroupContent/index.ts ---
export * from './AddMemberToGroupContent';

'''
'''--- astro_2.0/features/CreateProposal/components/CaptchaModal/index.ts ---
export * from './CaptchaModal';

'''
'''--- astro_2.0/features/CreateProposal/components/ChangeBondsContent/index.ts ---
export * from './ChangeBondsContent';

'''
'''--- astro_2.0/features/CreateProposal/components/ChangeDaoFlagContent/index.ts ---
export * from './ChangeDaoFlagContent';

'''
'''--- astro_2.0/features/CreateProposal/components/ChangeDaoLegalInfoContent/index.ts ---
export * from './ChangeDaoLegalInfoContent';

'''
'''--- astro_2.0/features/CreateProposal/components/ChangeDaoNameContent/index.ts ---
export * from './ChangeDaoNameContent';

'''
'''--- astro_2.0/features/CreateProposal/components/ChangeDaoPurposeContent/index.ts ---
export * from './ChangeDaoPurposeContent';

'''
'''--- astro_2.0/features/CreateProposal/components/ChangeLinksContent/index.ts ---
export * from './ChangeLinksContent';

'''
'''--- astro_2.0/features/CreateProposal/components/ChangePolicyContent/index.ts ---
export * from './ChangePolicyContent';

'''
'''--- astro_2.0/features/CreateProposal/components/ChangeVotingPermissionsContent/index.ts ---
export * from './ChangeVotingPermissionsContent';

'''
'''--- astro_2.0/features/CreateProposal/components/CreateDaoContent/index.ts ---
export * from './CreateDaoContent';

'''
'''--- astro_2.0/features/CreateProposal/components/CreateGroupContent/index.ts ---
export * from './CreateGroupContent';

'''
'''--- astro_2.0/features/CreateProposal/components/CreateProposalCard/helpers.ts ---
import {
  DEFAULT_PROPOSAL_GAS,
  DEFAULT_UPGRADE_DAO_PROPOSALS_GAS,
} from 'services/sputnik/constants';
import { formatYoktoValue } from 'utils/format';
import { ProposalTemplate } from 'types/proposalTemplate';
import { Tokens } from 'types/token';
import { FunctionCallType } from 'astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/types';
import { getFormInitialValues } from 'astro_2.0/features/CreateProposal/helpers/initialValues';
import { ProposalVariant } from 'types/proposal';
import { Settings } from 'types/settings';
import { TFunction } from 'i18next';

export function getCustomTemplatesInitialValues(
  templates: ProposalTemplate[],
  tokens: Tokens,
  templateId: string
): Record<string, unknown> {
  let initialValues = {};
  const template = templates.find(item => item.id === templateId);

  if (template) {
    const { config } = template;

    const parsedJson = config.json
      ? decodeURIComponent(config.json as string)
          .trim()
          .replace(/\\/g, '')
      : '';

    const tokenData = config.token ? tokens[config.token] : tokens.NEAR;

    initialValues = {
      smartContractAddress: config.smartContractAddress,
      methodName: config.methodName,
      actionsGas: config.actionsGas
        ? Number(config.actionsGas) / 10 ** 12
        : DEFAULT_PROPOSAL_GAS,
      deposit: tokenData
        ? formatYoktoValue(config.deposit, tokenData.decimals)
        : config.deposit,
      token: config.token ?? 'NEAR',
      json: parsedJson,
      isActive: template.isEnabled,
      name: template.name,
    };
  }

  return initialValues;
}

export function getCustomTemplatesDefaults(
  fcType: FunctionCallType,
  templates: ProposalTemplate[],
  tokens: Tokens,
  settings: Settings | null | undefined,
  t: TFunction,
  accountId: string,
  templateId: string,
  isDraft?: boolean,
  draftValues?: Record<string, unknown>
): Record<string, unknown> {
  let initialValues = {};
  const predefinedTypes = Object.values(FunctionCallType) as string[];

  if (!predefinedTypes.includes(fcType)) {
    const customTemplatesInitialValues = getCustomTemplatesInitialValues(
      templates,
      tokens,
      templateId
    );

    initialValues = isDraft
      ? { ...customTemplatesInitialValues, ...draftValues }
      : customTemplatesInitialValues;
  }

  if (fcType === FunctionCallType.RemoveUpgradeCode) {
    const hash = settings?.daoUpgrade?.versionHash;

    if (hash) {
      initialValues = {
        details: `This proposal is to delete the upgrade code which you retrieved from the factory. Deleting that code saves NEAR for your DAO. It's safe to delete that code because smart contracts always store a copy of the code they're running.`,
        externalUrl: '',
        gas: DEFAULT_UPGRADE_DAO_PROPOSALS_GAS,
        versionHash: hash,
      };
    }
  }

  return getFormInitialValues(
    t,
    ProposalVariant.ProposeCustomFunctionCall,
    accountId,
    initialValues,
    undefined,
    isDraft
  );
}

'''
'''--- astro_2.0/features/CreateProposal/components/CreateProposalCard/hooks.ts ---
import { useTranslation } from 'next-i18next';
import { useProposalTemplates } from 'astro_2.0/features/pages/nestedDaoPagesContent/CustomFunctionCallTemplatesPageContent/hooks';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { UserPermissions } from 'types/context';
import { ProposalType, ProposalVariant } from 'types/proposal';
import { Option } from 'astro_2.0/features/CreateProposal/components/GroupedSelect';
import { useCallback, useMemo } from 'react';
import { FunctionCallType } from 'astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/types';
import { useDaoSettings } from 'context/DaoSettingsContext';

type DropdownOption = {
  title: string;
  options: Option[];
  disabled: boolean;
};

export function useProposalTypeOptions(
  daoId: string,
  userPermissions: UserPermissions,
  canCreateTokenProposal: boolean
): DropdownOption[] {
  const { t } = useTranslation();

  const { isCanCreatePolicyProposals, allowedProposalsToCreate } =
    userPermissions;

  const getTitle = (key: string) => t(`createProposal.header.${key}`);
  const getLabel = useCallback(
    (key: string) => t(`proposalCard.proposalTypes.${key}`),
    [t]
  );

  const changeConfigTitle = getLabel('groupChangeConfig');
  const fcLabel = getLabel('groupFunctionCall');

  const { templates } = useProposalTemplates(daoId);
  const { settings } = useDaoSettings();

  const { roketoStreaming } = useFlags();

  const customFunctionCallsOptions = useMemo<DropdownOption[]>(() => {
    const templateOptions = [
      {
        label: 'Buy NFT from Mintbase',
        value: ProposalVariant.ProposeCustomFunctionCall.toString(),
        group: fcLabel,
        opt: FunctionCallType.BuyNFTfromMintbase.toString(),
      },
      {
        label: 'Transfer NFT from DAO',
        value: ProposalVariant.ProposeCustomFunctionCall,
        group: fcLabel,
        opt: FunctionCallType.TransferNFTfromMintbase,
      },
      {
        label: 'Buy NFT from Paras',
        value: ProposalVariant.ProposeCustomFunctionCall,
        group: fcLabel,
        opt: FunctionCallType.BuyNFTfromParas,
      },
    ];

    if (roketoStreaming) {
      templateOptions.push({
        label: 'Create Roketo Stream',
        value: ProposalVariant.ProposeCustomFunctionCall,
        group: fcLabel,
        opt: FunctionCallType.CreateRoketoStream,
      });
    }

    if (settings?.daoUpgrade?.versionHash) {
      templateOptions.push({
        label: 'Remove upgrade code',
        value: ProposalVariant.ProposeCustomFunctionCall,
        group: fcLabel,
        opt: FunctionCallType.RemoveUpgradeCode,
      });
    }

    templateOptions.push({
      label: 'Vote in Another DAO',
      value: ProposalVariant.ProposeCustomFunctionCall,
      group: fcLabel,
      opt: FunctionCallType.VoteInAnotherDao,
    });

    const result = [
      {
        title: fcLabel,
        disabled: !allowedProposalsToCreate[ProposalType.FunctionCall],
        options: [
          {
            label: fcLabel,
            value: ProposalVariant.ProposeCustomFunctionCall,
            group: fcLabel,
          },
          ...templateOptions,
        ],
      },
    ];

    if (templates) {
      const filteredTemplates = templates.filter(item => item.isEnabled);

      if (filteredTemplates.length) {
        result.push({
          title: 'Custom Templates',
          disabled: !allowedProposalsToCreate[ProposalType.FunctionCall],
          options: filteredTemplates.map(item => ({
            label: item.name,
            value: item.id ?? '',
            group: 'Custom Templates',
            opt: '',
          })),
        });
      }
    }

    return result;
  }, [
    fcLabel,
    roketoStreaming,
    settings?.daoUpgrade?.versionHash,
    allowedProposalsToCreate,
    templates,
  ]);

  const config = useMemo<DropdownOption[]>(() => {
    return [
      {
        title: getLabel('groupTransferAddBounty'),
        disabled:
          !allowedProposalsToCreate[ProposalType.Transfer] &&
          !allowedProposalsToCreate[ProposalType.AddBounty],
        options: [
          {
            label: getLabel('proposeTransfer'),
            value: ProposalVariant.ProposeTransfer,
            group: getLabel('groupTransferAddBounty'),
            disabled: !allowedProposalsToCreate[ProposalType.Transfer],
          },
          {
            label: getLabel('proposeBounty'),
            value: ProposalVariant.ProposeCreateBounty,
            group: getLabel('groupTransferAddBounty'),
            disabled: !allowedProposalsToCreate[ProposalType.AddBounty],
          },
        ],
      },
      {
        title: changeConfigTitle,
        disabled:
          !isCanCreatePolicyProposals ||
          !allowedProposalsToCreate[ProposalType.ChangeConfig],
        options: [
          {
            label: getLabel('proposeDAOName'),
            value: ProposalVariant.ProposeChangeDaoName,
            group: getLabel('groupChangeConfig'),
          },
          {
            label: getLabel('proposeDAOPurpose'),
            value: ProposalVariant.ProposeChangeDaoPurpose,
            group: getLabel('groupChangeConfig'),
          },
          {
            label: getLabel('proposeDAOLinks'),
            value: ProposalVariant.ProposeChangeDaoLinks,
            group: getLabel('groupChangeConfig'),
          },
          {
            label: getLabel('proposeDAOFlagAndLogo'),
            value: ProposalVariant.ProposeChangeDaoFlag,
            group: getLabel('groupChangeConfig'),
          },
          {
            label: getLabel('proposeLegalStatusAndDoc'),
            value: ProposalVariant.ProposeChangeDaoLegalInfo,
            group: getLabel('groupChangeConfig'),
          },
        ],
      },
      {
        title: getLabel('groupChangePolicy'),
        disabled:
          !allowedProposalsToCreate[ProposalType.ChangePolicy] ||
          !isCanCreatePolicyProposals,
        options: [
          /*  {
            label: getLabel('proposeChangePolicy'),
            value: ProposalVariant.ProposeChangeVotingPolicy,
            group: getLabel('groupChangePolicy'),
          }, */
          {
            label: getLabel('proposeBondsAndDeadlines'),
            value: ProposalVariant.ProposeChangeBonds,
            group: getLabel('groupChangePolicy'),
          },
          {
            label: getLabel('proposeGroup'),
            value: ProposalVariant.ProposeCreateGroup,
            group: getLabel('groupChangePolicy'),
          },
        ],
      },
      {
        title: getLabel('groupChangeMembers'),
        disabled:
          !allowedProposalsToCreate[ProposalType.AddMemberToRole] &&
          !allowedProposalsToCreate[ProposalType.RemoveMemberFromRole],
        options: [
          {
            label: getLabel('proposeAddMember'),
            value: ProposalVariant.ProposeAddMember,
            group: getLabel('groupChangeMembers'),
            disabled: !allowedProposalsToCreate[ProposalType.AddMemberToRole],
          },
          {
            label: getLabel('proposeRemoveMember'),
            value: ProposalVariant.ProposeRemoveMember,
            group: getLabel('groupChangeMembers'),
            disabled:
              !allowedProposalsToCreate[ProposalType.RemoveMemberFromRole],
          },
        ],
      },
      {
        title: getLabel('groupVote'),
        disabled: !allowedProposalsToCreate[ProposalType.Vote],
        options: [
          {
            label: getLabel('proposePoll'),
            value: ProposalVariant.ProposePoll,
            group: getLabel('groupVote'),
            disabled: !allowedProposalsToCreate[ProposalType.Vote],
          },
        ],
      },
      ...customFunctionCallsOptions,
    ];
  }, [
    allowedProposalsToCreate,
    changeConfigTitle,
    customFunctionCallsOptions,
    getLabel,
    isCanCreatePolicyProposals,
  ]);

  if (canCreateTokenProposal) {
    const changeConfigGroup = config.find(
      ({ title }) => title === changeConfigTitle
    );

    changeConfigGroup?.options.push({
      label: getLabel('createToken'),
      value: ProposalVariant.ProposeCreateToken,
      group: getLabel('groupChangeConfig'),
      disabled: false,
    });

    config.push({
      title: getTitle('customFunction'),
      disabled: false,
      options: [
        {
          label: getTitle('distributionOfTokens'),
          value: ProposalVariant.ProposeTokenDistribution,
          group: getTitle('customFunction'),
        } as Option,
      ],
    });
  }

  return useMemo(() => {
    return config.reduce<DropdownOption[]>((res, item) => {
      if (!item.disabled) {
        res.push({
          ...item,
          options: item.options.filter(option => !option.disabled),
        });
      }

      return res;
    }, []);
  }, [config]);
}

'''
'''--- astro_2.0/features/CreateProposal/components/CreateProposalCard/index.ts ---
export * from './CreateProposalCard';

'''
'''--- astro_2.0/features/CreateProposal/components/CreateTokenContent/index.ts ---
export * from './CreateTokenContent';

'''
'''--- astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/components/BuyNftFromMintbaseContent/index.ts ---
export * from './BuyNftFromMintbaseContent';

'''
'''--- astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/components/BuyNftFromMintbaseContent/tests/mock.ts ---
import { Token } from 'types/token';

export const tokens = {
  NEAR: {
    createdAt: '2021-12-07T19:15:52.793Z',
    transactionHash: null,
    updateTransactionHash: null,
    createTimestamp: null,
    updateTimestamp: '1639053338980000000',
    id: 'NEAR',
    ownerId: '',
    totalSupply: '',
    decimals: 24,
    icon: 'customIcon',
    name: null,
    reference: null,
    referenceHash: null,
    spec: null,
    symbol: 'NEAR',
    price: '10.68',
    balance: '5.1002',
    tokenId: '',
  },
  BIBA: {
    createdAt: '2021-12-07T19:15:52.793Z',
    transactionHash: null,
    updateTransactionHash: null,
    createTimestamp: null,
    updateTimestamp: '1639053338980000000',
    id: 'BIBA',
    ownerId: '',
    totalSupply: '',
    decimals: 24,
    icon: 'customIcon',
    name: null,
    reference: null,
    referenceHash: null,
    spec: null,
    symbol: 'BIBA',
    price: '10.68',
    balance: '5.1002',
    tokenId: '',
  },
} as unknown as Record<string, Token>;

'''
'''--- astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/components/BuyNftFromParasContent/index.ts ---
export * from './BuyNftFromParasContent';

'''
'''--- astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/components/CreateRoketoStream/hooks.ts ---
import { useCallback, useEffect, useState } from 'react';
import Decimal from 'decimal.js';

import { useWalletContext } from 'context/WalletContext';
import { configService } from 'services/ConfigService';
import { formatGasValue } from 'utils/format';

/* eslint-disable camelcase */
interface RoketoToken {
  account_id: string;
  is_payment: boolean;
  commission_on_create: string;
  commission_on_transfer: string;
  gas_for_ft_transfer: string;
  gas_for_storage_deposit: string;
}

type RoketoTokens = Record<string, RoketoToken>;

interface RoketoDao {
  tokens: RoketoTokens;
  commission_non_payment_ft: string;
}

interface RoketoContract {
  get_dao: () => Promise<RoketoDao>;
}

/* eslint-enable camelcase */

export function useRoketo(): {
  loading: boolean;
  roketo: RoketoContract | null;
} {
  const { nearService } = useWalletContext();
  const [roketo, setRoketo] = useState<RoketoContract | null>(null);
  const [loading, setLoading] = useState(true);
  const { appConfig } = configService.get();

  const getRoketo = useCallback(async () => {
    try {
      const accountId = nearService?.getAccountId();

      if (!appConfig || !accountId || !nearService) {
        return;
      }

      const contract = {
        get_dao: async () =>
          nearService.callContract<RoketoDao>(
            appConfig.ROKETO_CONTRACT_NAME,
            'get_dao',
            ''
          ),
      };

      setRoketo(contract);
    } finally {
      setLoading(false);
    }
  }, [appConfig, nearService]);

  useEffect(() => {
    (async () => {
      await getRoketo();
    })();
  }, [getRoketo]);

  return { loading, roketo };
}

function useRoketoDao(): { loading: boolean; roketoDao: RoketoDao } {
  const { loading: roketoLoading, roketo } = useRoketo();
  const [loading, setLoading] = useState(true);
  const [roketoDao, setRoketoDao] = useState<RoketoDao>({
    tokens: {},
    commission_non_payment_ft: '0',
  });

  const getDaoInfo = useCallback(async () => {
    try {
      const daoInfo = await roketo?.get_dao();

      if (daoInfo) {
        setRoketoDao(daoInfo);
      }
    } finally {
      setLoading(false);
    }
  }, [roketo]);

  useEffect(() => {
    (async () => {
      await getDaoInfo();
    })();
  }, [getDaoInfo]);

  if (loading || roketoLoading) {
    return { loading: true, roketoDao };
  }

  return { loading: false, roketoDao };
}

interface ReceiptPosition {
  token: 'NEAR' | string;
  amount: string;
  description: string;
}

type TokenId = string;
type Amount = string;
type TotalAmount = Record<TokenId, Amount>;

interface RoketoReceipt {
  positions: ReceiptPosition[];
  total: TotalAmount;
  actions: MulticallAction[];
}

/* eslint-disable camelcase */
interface MulticallAction {
  contract: string;
  method: string;
  args: Record<string, unknown>;
  deposit?: string;
  gas?: string;
}

/* eslint-enable camelcase */

function createStreamTransferCall({
  amountToStream,
  createCommission,
  daoId,
  receiverId,
  speedTokensPerSec,
  streamComment,
  tokenAccountId,
}: {
  amountToStream: string;
  createCommission: string;
  daoId: string;
  receiverId: string;
  speedTokensPerSec: string;
  streamComment: string;
  tokenAccountId: string;
}): MulticallAction {
  const config = configService.get();
  const streamingContract = config.appConfig.ROKETO_CONTRACT_NAME;

  const CreateStreamMessage = {
    Create: {
      request: {
        owner_id: daoId,
        receiver_id: receiverId,
        tokens_per_sec: speedTokensPerSec,
        description: streamComment,
        is_expirable: true,
        is_auto_start_enabled: true,
      },
    },
  };

  return {
    contract: tokenAccountId,
    method: 'ft_transfer_call',
    deposit: '1',
    gas: formatGasValue(150).toString(),
    args: {
      receiver_id: streamingContract,
      amount: new Decimal(amountToStream).plus(createCommission).toFixed(),
      memo: streamComment,
      msg: JSON.stringify(CreateStreamMessage),
    },
  };
}

export function useRoketoReceipt({
  amountToStream,
  daoId,
  tokenId,
  tokenDecimals,
  speedTokensPerSec,
  receiverId,
  streamComment,
  storageDeposit,
}: {
  amountToStream: string;
  daoId: string;
  tokenId: 'NEAR' | string;
  tokenDecimals: number;
  receiverId: string;
  streamComment: string;
  speedTokensPerSec: string;
  storageDeposit: {
    forSender: boolean;
    forRecipient: boolean;
  };
}): RoketoReceipt {
  const { roketoDao, loading } = useRoketoDao();
  const [positionsList, setPositionsList] = useState<ReceiptPosition[]>([]);
  const [actionsList, setActionsList] = useState<MulticallAction[]>([]);

  useEffect(() => {
    const positions: ReceiptPosition[] = [];
    const actions: MulticallAction[] = [];

    const wrap =
      roketoDao.tokens['wrap.near'] ?? roketoDao.tokens['wrap.testnet'];

    if (!wrap) {
      return;
    }

    if (tokenId === 'NEAR') {
      positions.push(
        {
          token: 'NEAR',
          amount: amountToStream,
          description: 'Amount to be streamed',
        },
        {
          token: 'NEAR',
          amount: wrap.commission_on_create,
          description: 'Stream creation fee',
        }
      );
      actions.push(
        // TODO: reenable when support contract will be available for RoketoStreaming
        // {
        //   contract: wrap.account_id,
        //   method: 'near_deposit',
        //   args: {},
        //   deposit: new Decimal(amountToStream)
        //     .plus(wrap.commission_on_create)
        //     .toFixed(),
        // },
        createStreamTransferCall({
          amountToStream,
          createCommission: wrap.commission_on_create,
          daoId,
          receiverId,
          speedTokensPerSec,
          streamComment,
          tokenAccountId: wrap.account_id,
        })
      );
    } else if (
      roketoDao.tokens[tokenId] &&
      roketoDao.tokens[tokenId].is_payment
    ) {
      const token = roketoDao.tokens[tokenId];

      positions.push(
        {
          token: tokenId,
          amount: amountToStream,
          description: 'Amount to be streamed',
        },
        {
          token: tokenId,
          amount: token.commission_on_create,
          description: 'Stream creation fee',
        }
      );
      actions.push(
        createStreamTransferCall({
          amountToStream,
          createCommission: token.commission_on_create,
          daoId,
          receiverId,
          speedTokensPerSec,
          streamComment,
          tokenAccountId: token.account_id,
        })
      );
    } else {
      positions.push(
        {
          token: tokenId,
          amount: amountToStream,
          description: 'Amount to be streamed',
        },
        {
          token: 'NEAR',
          amount: roketoDao.commission_non_payment_ft,
          description: 'Stream creation fee',
        }
      );

      const config = configService.get();
      const streamingContract = config.appConfig.ROKETO_CONTRACT_NAME;

      actions.push(
        {
          contract: streamingContract,
          method: 'account_deposit_near',
          args: {},
          deposit: roketoDao.commission_non_payment_ft,
        },
        createStreamTransferCall({
          amountToStream,
          createCommission: '0',
          daoId,
          receiverId,
          speedTokensPerSec,
          streamComment,
          tokenAccountId: tokenId,
        })
      );
    }

    const storageDepositFee = new Decimal('0.00125').mul(10 ** 24).toFixed();

    if (storageDeposit.forRecipient) {
      positions.push({
        token: 'NEAR',
        amount: storageDepositFee,
        description: 'Storage deposit fee for the recipient',
      });
      actions.unshift({
        contract: tokenId === 'NEAR' ? wrap.account_id : tokenId,
        method: 'storage_deposit',
        args: { account_id: receiverId },
        deposit: storageDepositFee,
      });
    }

    if (storageDeposit.forSender) {
      positions.push({
        token: 'NEAR',
        amount: storageDepositFee,
        description: 'Storage deposit fee for the sender',
      });
      actions.unshift({
        contract: tokenId === 'NEAR' ? wrap.account_id : tokenId,
        method: 'storage_deposit',
        args: { account_id: daoId },
        deposit: storageDepositFee,
      });
    }

    setPositionsList(positions);
    setActionsList(actions);
  }, [
    daoId,
    amountToStream,
    roketoDao,
    storageDeposit.forRecipient,
    storageDeposit.forSender,
    receiverId,
    streamComment,
    speedTokensPerSec,
    tokenDecimals,
    tokenId,
  ]);

  const [totalCharges, setTotalCharges] = useState<Record<TokenId, Amount>>({});

  useEffect(() => {
    const totalPerToken: Record<string, Decimal> = {};

    positionsList.forEach(position => {
      if (!totalPerToken[position.token]) {
        totalPerToken[position.token] = new Decimal('0');
      }

      totalPerToken[position.token] = totalPerToken[position.token].plus(
        position.amount
      );
    });

    const total: TotalAmount = Object.fromEntries(
      Object.entries(totalPerToken).map(([token, decimal]) => [
        token,
        decimal.toFixed(),
      ])
    );

    setTotalCharges(total);
  }, [positionsList]);

  if (loading || amountToStream === '0') {
    return { positions: [], total: {}, actions: [] };
  }

  return {
    positions: positionsList,
    total: totalCharges,
    actions: actionsList,
  };
}

function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}

export function useRoketoStorageDeposit(
  account: string,
  tokenAccount: string
): { loading: boolean; hasStorage: boolean } {
  const { nearService } = useWalletContext();
  const [loading, setLoading] = useState(false);
  const [hasStorage, setHasStorage] = useState(false);
  const accountToCheck = useDebounce(account, 500);

  const getIsRegistered = useCallback(
    async (accountId: string, tokenAccountId: string) => {
      try {
        if (!accountId || accountId.trim().length < 5 || !tokenAccountId) {
          return;
        }

        if (tokenAccountId === 'NEAR') {
          setHasStorage(true);

          return;
        }

        setLoading(true);

        const balance = await nearService?.callContract<{
          total: string;
          available: string;
        }>(tokenAccountId, 'storage_balance_of', '');

        setHasStorage(Boolean(balance && balance.total !== '0'));
      } catch (error) {
        console.warn(error);
      } finally {
        setLoading(false);
      }
    },
    [nearService]
  );

  useEffect(() => {
    (async () => {
      await getIsRegistered(accountToCheck, tokenAccount);
    })();
  }, [getIsRegistered, accountToCheck, tokenAccount]);

  return { loading, hasStorage };
}

'''
'''--- astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/components/CreateRoketoStream/index.ts ---
export * from './CreateRoketoStream';

'''
'''--- astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/components/CustomContent/index.ts ---
export * from './CustomContent';

'''
'''--- astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/components/SwapsOnRefContent/index.ts ---
export * from './SwapsOnRefContent';

'''
'''--- astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/components/TransferNftFromMintbaseContent/index.ts ---
export * from './TransferNftFromMintbaseContent';

'''
'''--- astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/components/VoteInOtherDao/index.ts ---
export * from './VoteInOtherDao';

'''
'''--- astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/index.ts ---
import CustomFunctionCallContent from './CustomFunctionCallContent';

export default CustomFunctionCallContent;

'''
'''--- astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/types.ts ---
export enum FunctionCallType {
  Custom = 'Custom',
  BuyNFTfromMintbase = 'BuyNFTfromMintbase',
  TransferNFTfromMintbase = 'TransferNFTfromMintbase',
  MintNFTsfromMintbase = 'MintNFTsfromMintbase',
  BuyNFTfromParas = 'BuyNFTfromParas',
  SwapsOnRef = 'SwapsOnRef',
  VoteInAnotherDao = 'VoteInAnotherDao',
  RemoveUpgradeCode = 'RemoveUpgradeCode',
  CreateRoketoStream = 'CreateRoketoStream',
}

'''
'''--- astro_2.0/features/CreateProposal/components/DeployStakingContractContent/index.ts ---
export * from './DeployStakingContractContent';

'''
'''--- astro_2.0/features/CreateProposal/components/DoneBountyContent/index.ts ---
export * from './BountyDoneContent';

'''
'''--- astro_2.0/features/CreateProposal/components/ErrorIndicator/index.ts ---
export * from './ErrorIndicator';

'''
'''--- astro_2.0/features/CreateProposal/components/GroupedSelect/index.ts ---
export * from './GroupedSelect';

'''
'''--- astro_2.0/features/CreateProposal/components/InputWrapper/index.ts ---
export * from './InputWrapper';

'''
'''--- astro_2.0/features/CreateProposal/components/RemoveMemberFromGroupContent/index.ts ---
export * from './RemoveMemberFromGroupContent';

'''
'''--- astro_2.0/features/CreateProposal/components/TokenDistributionContent/GroupRow/index.ts ---
export * from './GroupRow';

'''
'''--- astro_2.0/features/CreateProposal/components/TokenDistributionContent/MemberRow/index.ts ---
export * from './MemberRow';

'''
'''--- astro_2.0/features/CreateProposal/components/TokenDistributionContent/helpers.ts ---
import { DAO } from 'types/dao';
import { TokenDistributionInput } from 'astro_2.0/features/CreateProposal/types';
import { CreateProposalParams } from 'types/proposal';

export function getInputWidth(
  currentValue?: string,
  maxWidth?: number,
  minWidth?: number
): string {
  const max = maxWidth || 8;
  const min = minWidth || 4;

  if (!currentValue) {
    return `${min}ch`;
  }

  if (currentValue?.length > min && currentValue?.length <= max) {
    return `${currentValue?.length}ch`;
  }

  if (currentValue?.length > max) {
    return `${max}ch`;
  }

  return `${min}ch`;
}

export function getTokenDistributionProposal(
  dao: DAO,
  data: TokenDistributionInput
): CreateProposalParams {
  return {
    daoId: dao.id,
    description: `token distribution ${data.groups.length}`,
    kind: 'Vote',
    bond: dao.policy.proposalBond,
  };
}

'''
'''--- astro_2.0/features/CreateProposal/components/TokenDistributionContent/index.ts ---
export * from './TokenDistributionContent';

'''
'''--- astro_2.0/features/CreateProposal/components/TransferContent/index.ts ---
export * from './TransferContent';

'''
'''--- astro_2.0/features/CreateProposal/components/TransferContent/tests/mock.ts ---
import { Token } from 'types/token';

export const tokens = {
  NEAR: {
    createdAt: '2021-12-07T19:15:52.793Z',
    transactionHash: null,
    updateTransactionHash: null,
    createTimestamp: null,
    updateTimestamp: '1639053338980000000',
    id: 'NEAR',
    ownerId: '',
    totalSupply: '',
    decimals: 24,
    icon: 'customIcon',
    name: null,
    reference: null,
    referenceHash: null,
    spec: null,
    symbol: 'NEAR',
    price: '10.68',
    balance: '5.1002',
    tokenId: '',
  },
  BIBA: {
    createdAt: '2021-12-07T19:15:52.793Z',
    transactionHash: null,
    updateTransactionHash: null,
    createTimestamp: null,
    updateTimestamp: '1639053338980000000',
    id: 'BIBA',
    ownerId: '',
    totalSupply: '',
    decimals: 24,
    icon: 'customIcon',
    name: null,
    reference: null,
    referenceHash: null,
    spec: null,
    symbol: 'BIBA',
    price: '10.68',
    balance: '5.1002',
    tokenId: '',
  },
} as unknown as Record<string, Token>;

'''
'''--- astro_2.0/features/CreateProposal/components/TransferContent/tests/utils.spec.ts ---
import { getProposalAmountWidth } from 'astro_2.0/features/CreateProposal/components/TransferContent/utils';

describe('TransferContent utils', () => {
  describe('getProposalAmountWidth', () => {
    it('Should return proper value', () => {
      expect(getProposalAmountWidth('12345')).toEqual(7);
      expect(getProposalAmountWidth('12345678')).toEqual(8);
      expect(getProposalAmountWidth('123456789012345')).toEqual(15);
    });
  });
});

'''
'''--- astro_2.0/features/CreateProposal/components/TransferContent/utils.ts ---
export function getProposalAmountWidth(value = ''): number {
  if (value.length <= 6) {
    return 7;
  }

  if (value.length >= 15) {
    return 15;
  }

  return value.length;
}

'''
'''--- astro_2.0/features/CreateProposal/components/TransferFundsContent/index.ts ---
export * from './TransferFundsContent';

'''
'''--- astro_2.0/features/CreateProposal/components/UpdateGroupContent/index.ts ---
export * from './UpdateGroupContent';

'''
'''--- astro_2.0/features/CreateProposal/components/UpdateVotePolicyToWeightVoting/index.ts ---
export * from './UpdateVotePolicyToWeightVoting';

'''
'''--- astro_2.0/features/CreateProposal/components/types.ts ---
export type CreateTransferInput = {
  token: string;
  amount: number;
  details: string;
  externalUrl: string;
  target: string;
  gas: number;
};

'''
'''--- astro_2.0/features/CreateProposal/createProposalHelpers.ts ---
import { DAO } from 'types/dao';
import { ProposalType, ProposalActions, ProposalVariant } from 'types/proposal';
import { APP_TO_CONTRACT_PROPOSAL_TYPE } from 'utils/dataConverter';
import { ProposalPermissions } from 'types/context';
import { PolicyType } from 'types/policy';

export function isUserPermittedToCreateProposal(
  accountId: string | null | undefined,
  dao: DAO | null
): boolean {
  if (!accountId || !dao) {
    return false;
  }

  const daoRoles = dao.policy?.roles;

  if (!daoRoles) {
    return false;
  }

  let matched = false;

  daoRoles.forEach(role => {
    if (!role.accountIds && role.kind === 'Everyone') {
      if (
        role.permissions.includes('*:*') ||
        role.permissions.includes('*:AddProposal')
      ) {
        matched = true;
      }
    } else if (
      role.accountIds?.includes(accountId) &&
      (role.permissions.includes('*:*') ||
        role.permissions.includes('*:AddProposal'))
    ) {
      matched = true;
    }
  });

  return matched;
}

// check if user can perform some action on some proposal kind
export function checkUserPermission(
  accountId: string,
  policy: PolicyType,
  userHasDelegatedTokens: boolean,
  givenAction: ProposalActions,
  givenProposalType: ProposalType
): boolean {
  // get all the user's permissions on the chosen proposal kind
  const proposalKindPermissions: string[] = policy.roles
    ?.filter(
      role =>
        role.kind === 'Everyone' ||
        role.accountIds?.includes(accountId) ||
        (role.kind === 'Member' && userHasDelegatedTokens)
    )
    .map(role => role.permissions)
    .flat()
    .filter(permission => {
      const [proposalKind] = permission.split(':');

      return (
        proposalKind === '*' ||
        proposalKind === APP_TO_CONTRACT_PROPOSAL_TYPE[givenProposalType]
      );
    });

  // check if the user can perform the action on the proposal kind
  return proposalKindPermissions?.some(permission => {
    const [, action] = permission.split(':');

    return action === '*' || action === givenAction;
  });
}

export function getAllowedProposalsToCreate(
  accountId: string | null | undefined,
  dao: DAO | null,
  userHasDelegatedTokens: boolean
): ProposalPermissions {
  // Restrict create by default
  const result: getAllowedProposalsResultType = {
    [ProposalType.ChangeConfig]: false,
    [ProposalType.ChangePolicy]: false,
    [ProposalType.AddBounty]: false,
    [ProposalType.FunctionCall]: false,
    [ProposalType.Transfer]: false,
    [ProposalType.Vote]: false,
    [ProposalType.RemoveMemberFromRole]: false,
    [ProposalType.AddMemberToRole]: false,
    [ProposalType.UpgradeRemote]: false,
    [ProposalType.UpgradeSelf]: false,
    [ProposalType.SetStakingContract]: false,
    [ProposalType.BountyDone]: false,
  };

  // If no user account - restrict create
  if (!accountId) {
    return result;
  }

  if (dao?.policy) {
    // Iterate through roles and try to find relevant permissions in user's roles
    Object.keys(result).forEach(propType => {
      result[<getAllowedProposalsResultKeyType>propType] = checkUserPermission(
        accountId,
        dao.policy,
        userHasDelegatedTokens,
        ProposalActions.AddProposal,
        <getAllowedProposalsResultKeyType>propType
      );
    });
  }

  return result;
}

export function getAllowedProposalsToVote(
  accountId: string | null | undefined,
  dao: Pick<DAO, 'policy'> | null
): ProposalPermissions {
  // Restrict create by default
  const result: getAllowedProposalsResultType = {
    [ProposalType.ChangeConfig]: false,
    [ProposalType.ChangePolicy]: false,
    [ProposalType.AddBounty]: false,
    [ProposalType.FunctionCall]: false,
    [ProposalType.Transfer]: false,
    [ProposalType.Vote]: false,
    [ProposalType.RemoveMemberFromRole]: false,
    [ProposalType.AddMemberToRole]: false,
    [ProposalType.UpgradeRemote]: false,
    [ProposalType.UpgradeSelf]: false,
    [ProposalType.SetStakingContract]: false,
    [ProposalType.BountyDone]: false,
  };

  // If no user account - restrict vote
  if (!accountId) {
    return result;
  }

  // Iterate through roles and try to find relevant permissions in user's roles
  if (dao?.policy) {
    // Iterate through roles and try to find relevant permissions in user's roles
    Object.keys(result).forEach(propType => {
      // Can user VoteAppove or VoteRemove or VoteReject?
      result[<getAllowedProposalsResultKeyType>propType] =
        // check VoteApprove permission
        checkUserPermission(
          accountId,
          dao.policy,
          false,
          ProposalActions.VoteApprove,
          <getAllowedProposalsResultKeyType>propType
        ) ||
        // alternatively, check VoteReject permission
        checkUserPermission(
          accountId,
          dao.policy,
          false,
          ProposalActions.VoteReject,
          <getAllowedProposalsResultKeyType>propType
        ) ||
        // alternatively, check VoteRemove permission
        checkUserPermission(
          accountId,
          dao.policy,
          false,
          ProposalActions.VoteRemove,
          <getAllowedProposalsResultKeyType>propType
        );
    });
  }

  return result;
}

const policyAffectsProposalVariants = [
  ProposalVariant.ProposeChangeDaoLinks,
  ProposalVariant.ProposeChangeBonds,
  ProposalVariant.ProposeChangeDaoFlag,
  ProposalVariant.ProposeChangeDaoLegalInfo,
  ProposalVariant.ProposeChangeDaoName,
  ProposalVariant.ProposeChangeDaoPurpose,
  ProposalVariant.ProposeChangeVotingPolicy,
  ProposalVariant.ProposeCreateGroup,
  ProposalVariant.ProposeUpdateGroup,
];

export function getDefaultProposalVariantByType(
  type: ProposalType
): ProposalVariant {
  switch (type) {
    case ProposalType.ChangeConfig: {
      return ProposalVariant.ProposeChangeDaoName;
    }
    case ProposalType.ChangePolicy: {
      return ProposalVariant.ProposeChangeVotingPolicy;
    }
    case ProposalType.FunctionCall: {
      return ProposalVariant.ProposeCustomFunctionCall;
    }
    case ProposalType.Vote: {
      return ProposalVariant.ProposePoll;
    }
    case ProposalType.Transfer: {
      return ProposalVariant.ProposeTransfer;
    }
    case ProposalType.RemoveMemberFromRole: {
      return ProposalVariant.ProposeRemoveMember;
    }
    case ProposalType.AddMemberToRole: {
      return ProposalVariant.ProposeAddMember;
    }
    case ProposalType.AddBounty: {
      return ProposalVariant.ProposeCreateBounty;
    }
    default: {
      return ProposalVariant.ProposeDefault;
    }
  }
}

export function getProposalTypeByVariant(
  variant: ProposalVariant
): ProposalType | null {
  switch (variant) {
    case ProposalVariant.ProposeAddMember: {
      return ProposalType.AddMemberToRole;
    }
    case ProposalVariant.ProposeCreateBounty: {
      return ProposalType.AddBounty;
    }
    case ProposalVariant.ProposeDoneBounty: {
      return ProposalType.BountyDone;
    }
    case ProposalVariant.ProposeRemoveMember: {
      return ProposalType.RemoveMemberFromRole;
    }
    case ProposalVariant.ProposeTransfer: {
      return ProposalType.Transfer;
    }
    case ProposalVariant.ProposeChangeDaoLegalInfo:
    case ProposalVariant.ProposeChangeDaoName:
    case ProposalVariant.ProposeChangeDaoFlag:
    case ProposalVariant.ProposeChangeDaoLinks:
    case ProposalVariant.ProposeChangeDaoPurpose: {
      return ProposalType.ChangeConfig;
    }
    case ProposalVariant.ProposeCustomFunctionCall: {
      return ProposalType.FunctionCall;
    }
    case ProposalVariant.ProposePoll: {
      return ProposalType.Vote;
    }
    case ProposalVariant.ProposeChangeProposalCreationPermissions:
    case ProposalVariant.ProposeChangeProposalVotingPermissions:
    case ProposalVariant.ProposeChangeVotingPolicy:
    case ProposalVariant.ProposeChangeBonds:
    case ProposalVariant.ProposeUpdateGroup:
    case ProposalVariant.ProposeCreateGroup: {
      return ProposalType.ChangePolicy;
    }
    case ProposalVariant.ProposeTokenDistribution:
    case ProposalVariant.ProposeAcceptStakingContract:
    case ProposalVariant.ProposeStakingContractDeployment:
    case ProposalVariant.ProposeUpdateVotePolicyToWeightVoting:
    case ProposalVariant.ProposeCreateToken: {
      return ProposalType.SetStakingContract;
    }
    // these 2 proposals are for migrate dao
    case ProposalVariant.ProposeCreateDao:
    case ProposalVariant.ProposeTransferFunds:
    case ProposalVariant.ProposeRemoveUpgradeCode:
    case ProposalVariant.ProposeGetUpgradeCode:
    case ProposalVariant.ProposeUpgradeSelf: {
      return ProposalType.UpgradeSelf;
    }
    default: {
      return null;
    }
  }
}

export function getInitialProposalVariant(
  defaultProposalVariant: ProposalVariant,
  isCanCreatePolicyProposals: boolean,
  allowedProposalsToCreate: ProposalPermissions
): ProposalVariant {
  // Before we return initial proposal variant we have to check if user allowed to create corresponding proposals
  // So we first build an array of allowed proposal types as configured per user's groups
  const allowedProposals = Object.keys(allowedProposalsToCreate).reduce<
    ProposalType[]
  >((res, key) => {
    const value = (allowedProposalsToCreate as Record<string, boolean>)[key];

    if (value) {
      res.push(key as ProposalType);
    }

    return res;
  }, []);

  if (
    !isCanCreatePolicyProposals &&
    policyAffectsProposalVariants.includes(defaultProposalVariant)
  ) {
    if (allowedProposals.includes(ProposalType.Transfer)) {
      return ProposalVariant.ProposeTransfer;
    }

    // If user cannot create transfer proposals we return first available
    return getDefaultProposalVariantByType(allowedProposals[0]);
  }

  // Translate selected proposal variant to type as we know only permissions by type
  const defaultType = getProposalTypeByVariant(defaultProposalVariant);

  if (defaultType !== null && allowedProposals.includes(defaultType)) {
    return defaultProposalVariant;
  }

  // If user cannot create required proposals we return first available
  return getDefaultProposalVariantByType(allowedProposals[0]);
}

type getAllowedProposalsResultType = {
  [ProposalType.ChangeConfig]: boolean;
  [ProposalType.ChangePolicy]: boolean;
  [ProposalType.AddBounty]: boolean;
  [ProposalType.BountyDone]: boolean;
  [ProposalType.FunctionCall]: boolean;
  [ProposalType.Transfer]: boolean;
  [ProposalType.Vote]: boolean;
  [ProposalType.RemoveMemberFromRole]: boolean;
  [ProposalType.AddMemberToRole]: boolean;
  [ProposalType.UpgradeRemote]: boolean;
  [ProposalType.UpgradeSelf]: boolean;
  [ProposalType.SetStakingContract]: boolean;
};
type getAllowedProposalsResultKeyType = keyof getAllowedProposalsResultType;

'''
'''--- astro_2.0/features/CreateProposal/helpers/bountiesHelpers.ts ---
import Decimal from 'decimal.js';

// Types
import {
  CreateBountyInput,
  BondsAndDeadlinesData,
} from 'astro_2.0/features/CreateProposal/types';
import { DAO } from 'types/dao';
import { CreateProposalParams } from 'types/proposal';
import { Tokens } from 'types/token';

import { DATA_SEPARATOR } from 'constants/common';

// Helpers & Utils
import { keysToSnakeCase } from 'utils/keysToSnakeCase';
import { dataRoleToContractRole } from 'features/groups/helpers';

import { YOKTO_NEAR } from 'services/sputnik/constants';
import { DeadlineUnit } from 'types/bounties';

export function getCompleteBountyProposal(
  daoId: string,
  details: string,
  externalUrl: string,
  target: string,
  bond: string,
  bountyId?: number
): CreateProposalParams {
  const proposalDescription = `${details}${DATA_SEPARATOR}${externalUrl}`;

  return {
    daoId,
    description: proposalDescription,
    kind: 'BountyDone',
    data: {
      receiver_id: target,
      bounty_id: Number(bountyId),
    },
    bond,
  };
}

export function getDeadline(timeAmount: number, unit: DeadlineUnit): string {
  const nanosecondsInDay = new Decimal('8.64e+13');
  let multiplier = timeAmount;

  if (unit === 'week') {
    multiplier *= 7;
  } else if (unit === 'month') {
    multiplier *= 30;
  }

  return nanosecondsInDay.mul(multiplier).toString();
}

export function getAddBountyProposal(
  dao: DAO,
  data: CreateBountyInput,
  tokens: Tokens
): CreateProposalParams {
  const {
    slots,
    amount,
    details,
    deadlineUnit,
    deadlineThreshold,
    externalUrl,
    token,
  } = data;
  let tokenData = Object.values(tokens).find(item => item.tokenId === token);

  if (!tokenData) {
    tokenData = Object.values(tokens).find(item => item.symbol === token);
  }

  if (!tokenData) {
    throw new Error('No tokens data found');
  }

  const proposalDescription = `${details}${DATA_SEPARATOR}${externalUrl}`;
  const { tokenId, decimals } = tokenData;
  const tokenDecimal = 10 ** decimals;

  return {
    daoId: dao.id,
    description: proposalDescription,
    kind: 'AddBounty',
    data: {
      bounty: {
        description: proposalDescription,
        token: tokenId,
        amount: new Decimal(amount).mul(tokenDecimal).toFixed(),
        times: slots,
        max_deadline: getDeadline(deadlineThreshold, deadlineUnit),
      },
    },
    bond: dao.policy.proposalBond,
  };
}

export function getChangeBondDeadlinesProposal(
  dao: DAO,
  {
    createProposalBond,
    proposalExpireTime,
    claimBountyBond,
    unclaimBountyTime,
  }: BondsAndDeadlinesData,
  initialValues: {
    accountName: string;
    createProposalBond: number;
    proposalExpireTime: number;
    claimBountyBond: number;
    unclaimBountyTime: number;
  },
  proposalBond: string,
  description: string
): CreateProposalParams {
  const { id, policy } = dao;

  const { defaultVotePolicy } = policy;

  const { ratio, quorum, weightKind } = defaultVotePolicy;

  return {
    daoId: id,
    description,
    kind: 'ChangePolicy',
    data: {
      policy: {
        roles: dao.policy.roles.map(daoRole => dataRoleToContractRole(daoRole)),
        default_vote_policy: keysToSnakeCase({
          quorum,
          threshold: ratio,
          weightKind,
        }),
        proposal_bond: new Decimal(createProposalBond)
          .mul(YOKTO_NEAR)
          .toFixed(),
        proposal_period: new Decimal(proposalExpireTime)
          .mul('3.6e12')
          .toFixed(),
        bounty_bond: new Decimal(claimBountyBond).mul(YOKTO_NEAR).toFixed(),
        bounty_forgiveness_period: new Decimal(unclaimBountyTime)
          .mul('3.6e12')
          .toFixed(),
      },
    },
    bond: proposalBond,
  };
}

'''
'''--- astro_2.0/features/CreateProposal/helpers/index.ts ---
export * from './rootHelper';

'''
'''--- astro_2.0/features/CreateProposal/helpers/initialValues.ts ---
/* istanbul ignore file */

import { TFunction } from 'react-i18next';
import { ProposalVariant } from 'types/proposal';
import {
  DEFAULT_CREATE_DAO_GAS,
  DEFAULT_PROPOSAL_GAS,
  DEFAULT_UPGRADE_DAO_PROPOSALS_GAS,
} from 'services/sputnik/constants';
import { Token } from 'types/token';
import { DAO } from 'types/dao';

export function getFormInitialValues(
  t: TFunction,
  selectedProposalType: ProposalVariant,
  accountId: string,
  initialValues: Record<string, unknown> = {},
  daoTokens?: Record<string, Token>,
  isDraft?: boolean,
  dao?: DAO
): Record<string, unknown> {
  let result: Record<string, unknown>;

  const getDescr = (key: string) =>
    t(`proposalCard.functionCalls.${key}.description`);

  switch (selectedProposalType) {
    case ProposalVariant.ProposeGetUpgradeCode: {
      result = {
        details: getDescr('proposeGetUpgradeCode'),
        externalUrl: '',
        gas: DEFAULT_UPGRADE_DAO_PROPOSALS_GAS,
        versionHash: initialValues?.versionHash,
      };
      break;
    }
    case ProposalVariant.ProposeUpdateGroup: {
      result = {
        externalUrl: '',
        gas: DEFAULT_UPGRADE_DAO_PROPOSALS_GAS,
        groups: initialValues.groups,
      };
      break;
    }
    case ProposalVariant.ProposeUpgradeSelf: {
      result = {
        details: getDescr('proposeUpgradeSelf'),
        externalUrl: '',
        gas: DEFAULT_UPGRADE_DAO_PROPOSALS_GAS,
        versionHash: initialValues?.versionHash,
      };
      break;
    }
    case ProposalVariant.ProposeRemoveUpgradeCode: {
      result = {
        details: getDescr('proposeRemoveUpgradeCode'),
        externalUrl: '',
        gas: DEFAULT_UPGRADE_DAO_PROPOSALS_GAS,
        versionHash: initialValues?.versionHash,
      };
      break;
    }
    case ProposalVariant.ProposeCreateDao: {
      result = {
        details: getDescr('proposeCreateDao'),
        externalUrl: '',
        gas: DEFAULT_CREATE_DAO_GAS,
        displayName: initialValues.displayName,
      };
      break;
    }
    case ProposalVariant.ProposeTransferFunds: {
      const tokens = (daoTokens as Record<string, Token>) ?? {};
      const tokensIds = Object.values(tokens).map(item => item.symbol);

      const tokensFields = tokensIds.reduce<Record<string, string | null>>(
        (res, item) => {
          res[`${item}_amount`] = null;

          res[`${item}_target`] = initialValues.target as string;

          return res;
        },
        {}
      );

      result = {
        details: getDescr('proposeTransferFunds'),
        externalUrl: '',
        gas: DEFAULT_CREATE_DAO_GAS,
        daoTokens,
        ...tokensFields,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeCreateBounty: {
      result = {
        details: '',
        externalUrl: '',
        token: 'NEAR',
        amount: '',
        slots: '',
        deadlineThreshold: '',
        deadlineUnits: 'days',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeDoneBounty: {
      result = {
        details: '',
        externalUrl: '',
        target: accountId,
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeTransfer: {
      result = {
        details: '',
        externalUrl: '',
        token: 'NEAR',
        amount: '',
        target: '',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeChangeDaoName: {
      result = {
        details: '',
        externalUrl: '',
        displayName: '',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeChangeDaoPurpose: {
      result = {
        details: '',
        externalUrl: '',
        purpose: '',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeChangeDaoLinks: {
      const initial = initialValues as { links?: string[] };

      let links = initial
        ? initial?.links?.map(item => ({ url: item, id: item }))
        : null;

      if (!links || links.length === 0) {
        links = dao?.links?.map(item => ({ url: item, id: item })) || [];
      }

      result = {
        details: '',
        externalUrl: '',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
        links,
      };
      break;
    }
    case ProposalVariant.ProposeCreateToken: {
      result = {
        details: '',
        externalUrl: '',
        tokenName: '',
        totalSupply: '',
        tokenImage: '',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeUpdateVotePolicyToWeightVoting: {
      result = {
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeStakingContractDeployment: {
      result = {
        details: '',
        externalUrl: '',
        unstakingPeriod: '345',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeAcceptStakingContract: {
      result = {
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeTokenDistribution: {
      result = {
        details: '',
        externalUrl: '',
        groups: [],
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeChangeDaoLegalInfo: {
      result = {
        details: '',
        externalUrl: '',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposePoll: {
      result = {
        details: '',
        externalUrl: '',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeAddMember: {
      result = {
        details: '',
        externalUrl: '',
        group: '',
        memberName: '',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeCreateGroup:
    case ProposalVariant.ProposeRemoveMember: {
      result = {
        details: '',
        externalUrl: '',
        group: '',
        memberName: '',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeChangeVotingPolicy: {
      result = {
        details: '',
        externalUrl: '',
        amount: '',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeChangeBonds: {
      result = {
        details: '',
        externalUrl: '',
        createProposalBond: '',
        claimBountyBond: '',
        proposalExpireTime: '',
        unclaimBountyTime: '',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeChangeDaoFlag: {
      result = {
        details: '',
        externalUrl: '',
        flagCover: '',
        flagLogo: '',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeCustomFunctionCall: {
      result = {
        details: '',
        externalUrl: '',
        smartContractAddress: '',
        methodName: '',
        json: '{\n  \n}',
        deposit: '0',
        token: 'NEAR',
        actionsGas: DEFAULT_PROPOSAL_GAS,
        gas: DEFAULT_PROPOSAL_GAS,

        functionCallType: 'Custom',
        timeout: 24,
        timeoutGranularity: 'Hours',
        ...initialValues,
      };
      break;
    }
    case ProposalVariant.ProposeChangeProposalVotingPermissions:
    case ProposalVariant.ProposeChangeProposalCreationPermissions: {
      result = {
        details: '',
        externalUrl: '',
        amount: '',
        gas: DEFAULT_PROPOSAL_GAS,
        ...initialValues,
      };
      break;
    }
    default: {
      result = {};
      break;
    }
  }

  if (isDraft) {
    result.title = initialValues.title || '';
    result.details = initialValues.description || '';
    result.description = initialValues.description || '';
    result.gas = DEFAULT_PROPOSAL_GAS;
  }

  return result;
}

'''
'''--- astro_2.0/features/CreateProposal/helpers/newProposalObject.ts ---
import { DAO, TGroup } from 'types/dao';
import {
  CreateProposalParams,
  DaoConfig,
  ProposalVariant,
} from 'types/proposal';
import { Tokens } from 'types/token';
import {
  getAddBountyProposal,
  getChangeBondDeadlinesProposal,
  getCompleteBountyProposal,
} from 'astro_2.0/features/CreateProposal/helpers/bountiesHelpers';
import {
  BondsAndDeadlinesData,
  CreateBountyInput,
  CreateTokenInput,
  LinksFormData,
  TokenDistributionInput,
} from 'astro_2.0/features/CreateProposal/types';
import { CreateTransferInput } from 'astro_2.0/features/CreateProposal/components/types';
import { jsonToBase64Str } from 'utils/jsonToBase64Str';
import { DATA_SEPARATOR } from 'constants/common';
import {
  getAddMemberProposal,
  getChangePolicyProposal,
  getRemoveMemberProposal,
  getUpdateGroupProposal,
} from 'features/groups/helpers';
import { IGroupForm } from 'features/groups/types';
import {
  getInitialData,
  getNewProposalObject as getNewVotingPolicyProposalObject,
  VotingPolicyPageInitialData,
} from 'features/vote-policy/helpers';
import Decimal from 'decimal.js';
import { YOKTO_NEAR } from 'services/sputnik/constants';
import { httpService } from 'services/HttpService';
import get from 'lodash/get';
import {
  BuyNftFromMintbaseInput,
  BuyNftFromParasInput,
  CreateRoketoStreamInput,
  CustomFunctionCallInput,
  getAcceptStakingContractProposal,
  getBuyNftFromMintbaseProposal,
  getBuyNftFromParasProposal,
  getChangeConfigProposal,
  getCreateRoketoStreamProposal,
  getChangeVotingPolicyToWeightVoting,
  getCreateTokenProposal,
  getCustomFunctionCallProposal,
  getDeployStakingContractProposal,
  getNewDaoProposal,
  getRemoveUpgradeCodeProposal,
  getSwapsOnRefProposal,
  getTransferDaoFundsProposal,
  getTransferMintbaseNFTProposal,
  getTransferProposal,
  getUpgradeCodeProposal,
  getUpgradeSelfProposal,
  getVoteInOtherDaoProposal,
  SwapsOnRefInput,
  TransferMintbaseNFTInput,
} from 'astro_2.0/features/CreateProposal/helpers/proposalObjectHelpers';
import { getTokenDistributionProposal } from 'astro_2.0/features/CreateProposal/components/TokenDistributionContent/helpers';
import last from 'lodash/last';
import { FunctionCallType } from 'astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/types';
import { getNewPermissionsProposalObject } from 'astro_2.0/features/CreateProposal/helpers/permissionsHelpers';
import { SelectorRow } from 'astro_2.0/features/pages/nestedDaoPagesContent/DaoPolicyPageContent/helpers';

function getFlagsParamsForMetadata(dao: DAO): {
  flag?: string;
  flagCover?: string;
  flagLogo?: string;
} {
  const flagUrl = dao?.logo?.split('/');
  const flagFileName = last(flagUrl);

  const coverUrl = dao?.flagCover?.split('/');
  const coverFileName = last(coverUrl);

  const logoUrl = dao?.flagLogo?.split('/');
  const logoFileName = last(logoUrl);

  return {
    flag: flagFileName,
    flagCover: coverFileName,
    flagLogo: logoFileName,
  };
}

export async function getNewProposalObject(
  dao: DAO,
  proposalType: ProposalVariant,
  data: Record<string, unknown>,
  tokens: Tokens,
  accountId: string,
  bountyId?: number
): Promise<CreateProposalParams | null> {
  switch (proposalType) {
    case ProposalVariant.ProposeCreateDao: {
      return getNewDaoProposal(dao, data as Record<string, string>);
    }
    case ProposalVariant.ProposeTransferFunds: {
      return getTransferDaoFundsProposal(
        dao,
        data as Record<string, string>,
        tokens
      );
    }
    case ProposalVariant.ProposeGetUpgradeCode: {
      return getUpgradeCodeProposal(dao, data as Record<string, string>);
    }
    case ProposalVariant.ProposeRemoveUpgradeCode: {
      return getRemoveUpgradeCodeProposal(dao, data as Record<string, string>);
    }
    case ProposalVariant.ProposeUpgradeSelf: {
      return getUpgradeSelfProposal(dao, data as Record<string, string>);
    }
    case ProposalVariant.ProposeCreateBounty: {
      return Promise.resolve(
        getAddBountyProposal(dao, data as CreateBountyInput, tokens)
      );
    }
    case ProposalVariant.ProposeTransfer: {
      return getTransferProposal(dao, data as CreateTransferInput, tokens);
    }
    case ProposalVariant.ProposeDoneBounty: {
      const { externalUrl, details } = data;

      return getCompleteBountyProposal(
        dao.id,
        details as string,
        externalUrl as string,
        accountId,
        dao.policy.proposalBond,
        bountyId
      );
    }
    case ProposalVariant.ProposeChangeDaoLinks: {
      const newDaoConfig: DaoConfig = {
        name: dao.name,
        purpose: dao.description,
        metadata: jsonToBase64Str({
          ...getFlagsParamsForMetadata(dao),
          links: (data as unknown as LinksFormData).links
            .map(item => item.url)
            .filter(item => item.length > 0),
          displayName: dao.displayName,
        }),
      };

      return getChangeConfigProposal(
        dao.id,
        newDaoConfig,
        `${data.details}${DATA_SEPARATOR}${data.externalUrl}`,
        dao.policy.proposalBond
      );
    }
    case ProposalVariant.ProposeChangeDaoName: {
      const newDaoConfig: DaoConfig = {
        name: dao.name,
        purpose: dao.description,
        metadata: jsonToBase64Str({
          ...getFlagsParamsForMetadata(dao),
          links: dao.links,
          displayName: data.displayName as string,
        }),
      };

      return getChangeConfigProposal(
        dao.id,
        newDaoConfig,
        `${data.details}${DATA_SEPARATOR}${data.externalUrl}`,
        dao.policy.proposalBond
      );
    }
    case ProposalVariant.ProposeChangeDaoPurpose: {
      const newDaoConfig: DaoConfig = {
        name: dao.name,
        purpose: data.purpose as string,
        metadata: jsonToBase64Str({
          ...getFlagsParamsForMetadata(dao),
          links: dao.links,
          displayName: dao.displayName,
        }),
      };

      return getChangeConfigProposal(
        dao.id,
        newDaoConfig,
        `${data.details}${DATA_SEPARATOR}${data.externalUrl}`,
        dao.policy.proposalBond
      );
    }
    case ProposalVariant.ProposePoll: {
      return {
        daoId: dao.id,
        description: `${data.details}${DATA_SEPARATOR}${data.externalUrl}`,
        kind: 'Vote',
        bond: dao.policy.proposalBond,
      };
    }
    case ProposalVariant.ProposeRemoveMember: {
      return getRemoveMemberProposal(data as unknown as IGroupForm, dao);
    }
    case ProposalVariant.ProposeAddMember: {
      return getAddMemberProposal(data as unknown as IGroupForm, dao);
    }
    case ProposalVariant.ProposeCreateGroup: {
      return getChangePolicyProposal(data as unknown as IGroupForm, dao);
    }
    case ProposalVariant.ProposeUpdateGroup: {
      return getUpdateGroupProposal(
        data.groups as TGroup[],
        data as unknown as IGroupForm,
        dao
      );
    }
    case ProposalVariant.ProposeChangeVotingPolicy: {
      const initialData = getInitialData(dao);

      const newData = {
        daoSettings: {
          details: data.details,
          externalLink: data.externalUrl,
        },
        policy: {
          ...initialData?.policy,
          amount: data.amount,
        },
      };

      return getNewVotingPolicyProposalObject(
        dao,
        newData as VotingPolicyPageInitialData
      );
    }
    case ProposalVariant.ProposeChangeBonds: {
      return getChangeBondDeadlinesProposal(
        dao,
        data as unknown as BondsAndDeadlinesData,
        {
          accountName: '',
          createProposalBond: new Decimal(dao.policy.proposalBond)
            .div(YOKTO_NEAR)
            .toNumber(),
          claimBountyBond: new Decimal(dao.policy.bountyBond)
            .div(YOKTO_NEAR)
            .toNumber(),
          proposalExpireTime: new Decimal(dao.policy.proposalPeriod)
            .div('3.6e12')
            .toNumber(),
          unclaimBountyTime: new Decimal(dao.policy.bountyForgivenessPeriod)
            .div('3.6e12')
            .toNumber(),
        },
        dao.policy.proposalBond,
        `${data.details}${DATA_SEPARATOR}${data.externalUrl}`
      );
    }
    case ProposalVariant.ProposeChangeDaoFlag: {
      const uploadImg = async (img: File) => {
        if (img) {
          const { data: key } = await httpService.post(
            '/api/upload-to-s3',
            img,
            {
              baseURL: '',
            }
          );

          return key;
        }

        return '';
      };

      const flagCover = get(data.flagCover, '0');
      const flagLogo = get(data.flagLogo, '0');

      const [flagCoverFileName, flagLogoFileName] = await Promise.all([
        uploadImg(flagCover),
        uploadImg(flagLogo),
      ]);

      const newDaoConfig: DaoConfig = {
        name: dao.name,
        purpose: dao.description,
        metadata: jsonToBase64Str({
          ...getFlagsParamsForMetadata(dao),
          links: dao.links,
          displayName: dao.displayName,
          flagCover: flagCoverFileName,
          flagLogo: flagLogoFileName,
        }),
      };

      return getChangeConfigProposal(
        dao.id,
        newDaoConfig,
        `${data.details}${DATA_SEPARATOR}${data.externalUrl}`,
        dao.policy.proposalBond
      );
    }
    case ProposalVariant.ProposeChangeDaoLegalInfo: {
      const newDaoConfig: DaoConfig = {
        name: dao.name,
        purpose: dao.description,
        metadata: jsonToBase64Str({
          ...getFlagsParamsForMetadata(dao),
          links: dao.links,
          displayName: dao.displayName,
          legal: {
            legalStatus: data.legalStatus as string,
            legalLink: data.legalLink as string,
          },
        }),
      };

      return getChangeConfigProposal(
        dao.id,
        newDaoConfig,
        `${data.details}${DATA_SEPARATOR}${data.externalUrl}`,
        dao.policy.proposalBond
      );
    }
    case ProposalVariant.ProposeCustomFunctionCall: {
      switch (data.functionCallType) {
        case FunctionCallType.RemoveUpgradeCode: {
          return getRemoveUpgradeCodeProposal(
            dao,
            data as Record<string, string>
          );
        }
        case FunctionCallType.SwapsOnRef: {
          return getSwapsOnRefProposal(dao, data as SwapsOnRefInput);
        }
        case FunctionCallType.VoteInAnotherDao: {
          return getVoteInOtherDaoProposal(dao, data as Record<string, string>);
        }
        case FunctionCallType.BuyNFTfromParas: {
          return getBuyNftFromParasProposal(
            dao,
            data as BuyNftFromParasInput,
            tokens
          );
        }
        case FunctionCallType.BuyNFTfromMintbase: {
          return getBuyNftFromMintbaseProposal(
            dao,
            data as BuyNftFromMintbaseInput,
            tokens
          );
        }
        case FunctionCallType.TransferNFTfromMintbase: {
          return getTransferMintbaseNFTProposal(
            dao,
            data as TransferMintbaseNFTInput
          );
        }
        case FunctionCallType.CreateRoketoStream: {
          return getCreateRoketoStreamProposal(
            dao,
            data as CreateRoketoStreamInput,
            tokens
          );
        }
        default: {
          return getCustomFunctionCallProposal(
            dao,
            data as CustomFunctionCallInput,
            tokens
          );
        }
      }
    }
    case ProposalVariant.ProposeCreateToken: {
      return getCreateTokenProposal(dao, data as unknown as CreateTokenInput);
    }
    case ProposalVariant.ProposeTokenDistribution: {
      return getTokenDistributionProposal(
        dao,
        data as unknown as TokenDistributionInput
      );
    }
    case ProposalVariant.ProposeStakingContractDeployment: {
      return getDeployStakingContractProposal(dao, data);
    }
    case ProposalVariant.ProposeAcceptStakingContract: {
      return getAcceptStakingContractProposal(dao);
    }
    case ProposalVariant.ProposeUpdateVotePolicyToWeightVoting: {
      return getChangeVotingPolicyToWeightVoting(dao, data);
    }
    case ProposalVariant.ProposeChangeProposalVotingPermissions: {
      const initialData = getInitialData(dao);
      const proposedChanges = data.policy as SelectorRow[];

      const newData = {
        daoSettings: {
          details: data.details,
          externalLink: data.externalUrl,
        },
        policy: {
          ...initialData?.policy,
        },
      };

      return getNewPermissionsProposalObject(
        dao,
        newData as VotingPolicyPageInitialData,
        proposedChanges,
        ['VoteApprove', 'VoteReject', 'VoteRemove']
      );
    }
    case ProposalVariant.ProposeChangeProposalCreationPermissions: {
      const initialData = getInitialData(dao);
      const proposedChanges = data.policy as SelectorRow[];

      const newData = {
        daoSettings: {
          details: data.details,
          externalLink: data.externalUrl,
        },
        policy: {
          ...initialData?.policy,
        },
      };

      return getNewPermissionsProposalObject(
        dao,
        newData as VotingPolicyPageInitialData,
        proposedChanges,
        'AddProposal'
      );
    }
    default: {
      return null;
    }
  }
}

'''
'''--- astro_2.0/features/CreateProposal/helpers/permissionsHelpers.ts ---
import { VotingPolicyPageInitialData } from 'features/vote-policy/helpers';
import { DATA_SEPARATOR } from 'constants/common';
import { dataRoleToContractRole, getThreshold } from 'features/groups/helpers';
import { DAO } from 'types/dao';
import { CreateProposalParams, ProposalType } from 'types/proposal';
import { SelectorRow } from 'astro_2.0/features/pages/nestedDaoPagesContent/DaoPolicyPageContent/helpers';
import { DaoPermission, DaoRole, DaoRoleKind } from 'types/role';
import { APP_TO_CONTRACT_PROPOSAL_TYPE } from 'utils/dataConverter';

type PermissionField =
  | 'AddProposal'
  | 'VoteApprove'
  | 'VoteReject'
  | 'VoteRemove';

export function updateRoleWithNewPermissions(
  proposedChanges: SelectorRow[],
  role: Pick<DaoRole, 'permissions' | 'name'>,
  fields: PermissionField[]
): DaoRole {
  const updatedRole = proposedChanges.find(item => item.label === role.name);

  if (!updatedRole) {
    return role as DaoRole;
  }

  let newPermissions = role.permissions;

  if (newPermissions.includes('*:*')) {
    newPermissions = [
      ...newPermissions,
      '*:Finalize',
      '*:AddProposal',
      '*:VoteApprove',
      '*:VoteReject',
      '*:VoteRemove',
    ];
  }

  newPermissions = newPermissions.filter(item => {
    let res = true;

    fields.forEach(field => {
      if (item.includes(field) || item === '*:*') {
        res = false;
      }
    });

    return res; // !item.includes('AddProposal');
  });

  Object.keys(updatedRole).forEach(key => {
    switch (key) {
      case 'config': {
        if (updatedRole[key]) {
          fields.forEach(field => {
            newPermissions.push(
              `${
                APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.ChangeConfig]
              }:${field}` as DaoPermission
            );
          });
        }

        break;
      }
      case 'policy': {
        if (updatedRole[key]) {
          fields.forEach(field => {
            newPermissions.push(
              `${
                APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.ChangePolicy]
              }:${field}` as DaoPermission
            );
          });
        }

        break;
      }
      case 'bounty': {
        if (updatedRole[key]) {
          fields.forEach(field => {
            newPermissions.push(
              `${
                APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.AddBounty]
              }:${field}` as DaoPermission
            );
          });
        }

        break;
      }
      case 'bountyDone': {
        if (updatedRole[key]) {
          fields.forEach(field => {
            newPermissions.push(
              `${
                APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.BountyDone]
              }:${field}` as DaoPermission
            );
          });
        }

        break;
      }
      case 'transfer': {
        if (updatedRole[key]) {
          fields.forEach(field => {
            newPermissions.push(
              `${
                APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.Transfer]
              }:${field}` as DaoPermission
            );
          });
        }

        break;
      }
      case 'poll': {
        if (updatedRole[key]) {
          fields.forEach(field => {
            newPermissions.push(
              `${
                APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.Vote]
              }:${field}` as DaoPermission
            );
          });
        }

        break;
      }
      case 'removeMember': {
        if (updatedRole[key]) {
          fields.forEach(field => {
            newPermissions.push(
              `${
                APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.RemoveMemberFromRole]
              }:${field}` as DaoPermission
            );
          });
        }

        break;
      }
      case 'addMember': {
        if (updatedRole[key]) {
          fields.forEach(field => {
            newPermissions.push(
              `${
                APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.AddMemberToRole]
              }:${field}` as DaoPermission
            );
          });
        }

        break;
      }
      case 'call': {
        if (updatedRole[key]) {
          fields.forEach(field => {
            newPermissions.push(
              `${
                APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.FunctionCall]
              }:${field}` as DaoPermission
            );
          });
        }

        break;
      }
      case 'upgradeSelf': {
        if (updatedRole[key]) {
          fields.forEach(field => {
            newPermissions.push(
              `${
                APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.UpgradeSelf]
              }:${field}` as DaoPermission
            );
          });
        }

        break;
      }
      case 'upgradeRemote': {
        if (updatedRole[key]) {
          fields.forEach(field => {
            newPermissions.push(
              `${
                APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.UpgradeRemote]
              }:${field}` as DaoPermission
            );
          });
        }

        break;
      }
      case 'setStakingContract': {
        if (updatedRole[key]) {
          fields.forEach(field => {
            newPermissions.push(
              `${
                APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.SetStakingContract]
              }:${field}` as DaoPermission
            );
          });
        }

        break;
      }
      default: {
        break;
      }
    }
  });

  return {
    ...role,
    permissions: newPermissions,
  } as DaoRole;
}

export function getNewPermissionsProposalObject(
  dao: DAO,
  data: VotingPolicyPageInitialData,
  proposedChanges: SelectorRow[],
  permissionsFields: PermissionField | PermissionField[]
): CreateProposalParams {
  const fields = Array.isArray(permissionsFields)
    ? permissionsFields
    : [permissionsFields];

  const hasAll = dao.policy.roles.find(
    // TODO: check is there are only one role with kind Everyone
    // role => role.kind === 'Everyone' && role.slug === 'all'
    role => role.kind === 'Everyone'
  );

  let roles = hasAll
    ? dao.policy.roles
    : [
        {
          createdAt: new Date().toISOString(),
          id: `${dao.id}-all`,
          name: 'all',
          kind: 'Everyone' as DaoRoleKind,
          balance: null,
          accountIds: null,
          permissions: [],
          votePolicy: {},
        },
        ...dao.policy.roles,
      ];

  roles = roles.map(role => {
    return updateRoleWithNewPermissions(proposedChanges, role, fields);
  }) as DaoRole[];

  return {
    daoId: dao.id,
    description: `${data.daoSettings.details}${DATA_SEPARATOR}${data.daoSettings.externalLink}`,
    kind: 'ChangePolicy',
    data: {
      policy: {
        roles: [...roles.map(dataRoleToContractRole)],
        default_vote_policy: {
          quorum: '0',
          threshold: getThreshold(data.policy.amount as number),
          weight_kind: 'RoleWeight',
        },
        proposal_bond: dao.policy.proposalBond,
        proposal_period: dao.policy.proposalPeriod,
        bounty_bond: dao.policy.bountyBond,
        bounty_forgiveness_period: dao.policy.bountyForgivenessPeriod,
      },
    },
    bond: dao.policy.proposalBond,
  };
}

'''
'''--- astro_2.0/features/CreateProposal/helpers/proposalObjectHelpers.ts ---
/* eslint-disable max-classes-per-file */
import Decimal from 'decimal.js';

import { DATA_SEPARATOR } from 'constants/common';
import { STAKING_CONTRACT_PREFIX } from 'constants/proposals';
import { DEFAULT_PROPOSAL_GAS } from 'services/sputnik/constants';

import { DAO } from 'types/dao';
import {
  CreateProposalParams,
  DaoConfig,
  FunctionCallAction,
  ProposalVariant,
} from 'types/proposal';
import { CreateTokenInput } from 'astro_2.0/features/CreateProposal/types';
import { Tokens } from 'types/token';
import { CreateTransferInput } from 'astro_2.0/features/CreateProposal/components/types';

import { formatGasValue, formatValueToYokto } from 'utils/format';
import { jsonToBase64Str } from 'utils/jsonToBase64Str';
import { dataRoleToContractRole } from 'features/groups/helpers';

import { configService } from 'services/ConfigService';

export type CustomFunctionCallInput = {
  smartContractAddress: string;
  methodName: string;
  json: string;
  deposit: string;
  details: string;
  externalUrl: string;
  token: string;
  actionsGas: number;
};

function getToken(tokens: Tokens, tokenInput: string) {
  let token = Object.values(tokens).find(item => item.tokenId === tokenInput);

  if (!token) {
    token = Object.values(tokens).find(item => item.symbol === tokenInput);
  }

  return token;
}

export function getUpgradeCodeProposal(
  dao: DAO,
  data: Record<string, string>
): CreateProposalParams {
  const { versionHash, details, externalUrl } = data;
  const { appConfig } = configService.get();

  const proposalDescription = `${details}${DATA_SEPARATOR}${externalUrl}`;

  const args = jsonToBase64Str({
    code_hash: versionHash,
  });

  return {
    daoId: dao.id,
    description: proposalDescription,
    kind: 'FunctionCall',
    data: {
      receiver_id: appConfig.NEAR_CONTRACT_NAME,
      actions: [
        {
          method_name: 'store_contract_self',
          args,
          deposit: new Decimal(6000000000000000000000000).toFixed(),
          gas: '220000000000000',
        },
      ],
    },
    bond: dao.policy.proposalBond,
  };
}

export function getRemoveUpgradeCodeProposal(
  dao: DAO,
  data: Record<string, string>
): CreateProposalParams {
  const { versionHash, details, externalUrl } = data;
  const { appConfig } = configService.get();

  const proposalDescription = `${details}${DATA_SEPARATOR}${externalUrl}`;

  const args = jsonToBase64Str({
    code_hash: versionHash,
  });

  return {
    variant: ProposalVariant.ProposeRemoveUpgradeCode,
    daoId: dao.id,
    description: proposalDescription,
    kind: 'FunctionCall',
    data: {
      receiver_id: appConfig.NEAR_CONTRACT_NAME,
      actions: [
        {
          method_name: 'remove_contract_self',
          args,
          deposit: '0',
          gas: '220000000000000',
        },
      ],
    },
    bond: dao.policy.proposalBond,
  };
}

export function getUpgradeSelfProposal(
  dao: DAO,
  data: Record<string, string>
): CreateProposalParams {
  const { versionHash, details, externalUrl } = data;

  const proposalDescription = `${details}${DATA_SEPARATOR}${externalUrl}`;

  return {
    daoId: dao.id,
    description: proposalDescription,
    kind: 'UpgradeSelf',
    data: {
      hash: versionHash,
    },
    bond: dao.policy.proposalBond,
  };
}

export async function getCustomFunctionCallProposal(
  dao: DAO,
  data: CustomFunctionCallInput,
  tokens: Tokens
): Promise<CreateProposalParams> {
  const {
    smartContractAddress,
    methodName,
    json,
    deposit,
    details,
    externalUrl,
    actionsGas,
  } = data;
  const token = getToken(tokens, data.token);

  if (!token) {
    throw new Error('No tokens data found');
  }

  const proposalDescription = `${details}${DATA_SEPARATOR}${externalUrl}`;
  const args = Buffer.from(json).toString('base64');

  return {
    daoId: dao.id,
    description: proposalDescription,
    kind: 'FunctionCall',
    data: {
      receiver_id: smartContractAddress,
      actions: [
        {
          method_name: methodName,
          args,
          deposit: new Decimal(deposit).mul(10 ** token.decimals).toFixed(),
          gas: formatGasValue(actionsGas ?? DEFAULT_PROPOSAL_GAS).toString(),
        },
      ],
    },
    bond: dao.policy.proposalBond,
  };
}

export type BuyNftFromMintbaseInput = {
  tokenKey: string;
  price: number;
  timeout: string;
  timeoutGranularity: 'days' | 'minutes' | 'hours';
  actionsGas: number;
  deposit: string;
  details: string;
  externalUrl: string;
  token: string;
  target: string;
};

export async function getBuyNftFromMintbaseProposal(
  dao: DAO,
  data: BuyNftFromMintbaseInput,
  tokens: Tokens
): Promise<CreateProposalParams> {
  const {
    tokenKey,
    timeout,
    timeoutGranularity,
    deposit,
    details,
    externalUrl,
    actionsGas,
  } = data;

  const token = getToken(tokens, data.token);

  if (!token) {
    throw new Error('No tokens data found');
  }

  const proposalDescription = `${details}${DATA_SEPARATOR}${externalUrl}`;

  const json = JSON.stringify({
    token_key: [tokenKey],
    price: [new Decimal(deposit).mul(10 ** token.decimals).toFixed()],
    timeout: [
      {
        [timeoutGranularity]: timeout,
      },
    ],
  });
  const args = Buffer.from(json).toString('base64');

  return {
    daoId: dao.id,
    description: proposalDescription,
    kind: 'FunctionCall',
    data: {
      receiver_id: 'market.mintbase1.near',
      actions: [
        {
          method_name: 'make_offer',
          args,
          deposit: new Decimal(deposit).mul(10 ** token.decimals).toFixed(),
          gas: formatGasValue(actionsGas ?? DEFAULT_PROPOSAL_GAS).toString(),
        },
      ],
    },
    bond: dao.policy.proposalBond,
  };
}

export type TransferMintbaseNFTInput = {
  smartContractAddress: string;
  tokenKey: string;
  actionsGas: number;
  details: string;
  externalUrl: string;
  target: string;
};

export async function getTransferMintbaseNFTProposal(
  dao: DAO,
  data: TransferMintbaseNFTInput
): Promise<CreateProposalParams> {
  const { tokenKey, target, details, externalUrl, actionsGas } = data;

  const proposalDescription = `${details}${DATA_SEPARATOR}${externalUrl}`;

  const [key, store] = tokenKey.split(':');

  const json = JSON.stringify({
    token_ids: [[key, target.trim()]],
  });
  const args = Buffer.from(json).toString('base64');

  return {
    daoId: dao.id,
    description: proposalDescription,
    kind: 'FunctionCall',
    data: {
      receiver_id: store,
      actions: [
        {
          method_name: 'nft_batch_transfer',
          args,
          deposit: '1',
          gas: formatGasValue(actionsGas ?? DEFAULT_PROPOSAL_GAS).toString(),
        },
      ],
    },
    bond: dao.policy.proposalBond,
  };
}

export type BuyNftFromParasInput = {
  tokenKey: string;
  price: number;
  timeout: string;
  actionsGas: number;
  deposit: string;
  details: string;
  externalUrl: string;
  token: string;
  target: string;
  smartContractAddress: string;
  methodName: string;
};

export async function getBuyNftFromParasProposal(
  dao: DAO,
  data: BuyNftFromParasInput,
  tokens: Tokens
): Promise<CreateProposalParams> {
  const { tokenKey, target, details, externalUrl, actionsGas, deposit } = data;

  const token = getToken(tokens, data.token);

  if (!token) {
    throw new Error('No tokens data found');
  }

  const proposalDescription = `${details}${DATA_SEPARATOR}${externalUrl}`;

  const json = JSON.stringify({
    token_series_id: tokenKey,
    receiver_id: target.trim(),
  });
  const args = Buffer.from(json).toString('base64');

  return {
    daoId: dao.id,
    description: proposalDescription,
    kind: 'FunctionCall',
    data: {
      receiver_id: 'x.paras.near',
      actions: [
        {
          method_name: 'nft_buy',
          args,
          deposit: new Decimal(deposit).mul(10 ** token.decimals).toFixed(),
          gas: formatGasValue(actionsGas ?? DEFAULT_PROPOSAL_GAS).toString(),
        },
      ],
    },
    bond: dao.policy.proposalBond,
  };
}

interface ReceiptPosition {
  token: string;
  amount: string;
  description: string;
}

export type CreateRoketoStreamInput = {
  tokenId: string;
  shouldDepositForDao: boolean;
  shouldDepositForReceiver: boolean;
  amount: string;
  duration: string;
  speed: string;
  receiverId: string;
  comment?: string;
  actions?: MulticallAction[];
  receipt: {
    total: Record<string, string>;
    positions: ReceiptPosition[];
  };
  details: string;
  externalUrl?: string;
};

interface MulticallAction {
  contract: string;
  method: string;
  args: Record<string, unknown>;
  deposit?: string;
  gas?: string;
}

interface Action {
  func: string;
  args: Record<string, unknown>;
  gas: string;
  depo: string;
}

class Call {
  private actions: Action[];

  constructor(private address: string) {
    this.actions = [];
  }

  addAction(
    func: string,
    args: Record<string, unknown>,
    gas = '10000000000000',
    depo = '0'
  ) {
    this.actions.push({
      func,
      args,
      gas,
      depo,
    });
  }

  serialize(): unknown {
    return {
      address: this.address,
      actions: this.actions.map(action => ({
        func: action.func,
        args: Buffer.from(JSON.stringify(action.args)).toString('base64'),
        gas: action.gas,
        depo: action.depo,
      })),
    };
  }
}

/**
 * Calls in the batch called sequentially
 */
class Batch {
  private calls: Call[] = [];

  createCall(contractAddress: string): Call {
    const call = new Call(contractAddress);

    this.calls.push(call);

    return call;
  }

  serialize(): unknown {
    return this.calls.map(call => call.serialize());
  }
}

/**
 * Multiple batches called in parallel
 */
class Multicall {
  private batches: Batch[] = [];

  createBatch(): Batch {
    const batch = new Batch();

    this.batches.push(batch);

    return batch;
  }

  serialize(): unknown {
    return {
      calls: this.batches.map(batch => batch.serialize()),
    };
  }
}

export async function getCreateRoketoStreamProposal(
  dao: DAO,
  data: CreateRoketoStreamInput,
  tokens: Tokens
): Promise<CreateProposalParams> {
  const { externalUrl, details, actions, receipt } = data;
  const proposalDescription = `${details}${DATA_SEPARATOR}${externalUrl}`;
  const config = configService.get();
  const multicallContract = config.appConfig.ROKETO_MULTICALL_NAME;

  const token = Object.values(tokens).find(item => item.id === data.tokenId);

  if (!token) {
    throw new Error('No tokens data found');
  }

  let proposalData: {
    // eslint-disable-next-line camelcase
    receiver_id: string;
    actions: FunctionCallAction[];
  } = { receiver_id: '', actions: [] };

  // eslint-disable-next-line no-constant-condition
  if (false) {
    const multicall = new Multicall();
    const serialCalls = multicall.createBatch();

    actions?.forEach(action => {
      serialCalls
        .createCall(action.contract)
        .addAction(action.method, action.args, action.gas, action.deposit);
    });

    proposalData = {
      receiver_id: multicallContract,
      actions: [
        {
          method_name: 'multicall',
          args: Buffer.from(JSON.stringify(multicall.serialize())).toString(
            'base64'
          ),
          deposit: receipt?.total.NEAR ?? '0',
          gas: formatGasValue(270).toString(),
        },
      ],
    };
  } else {
    actions?.forEach(action => {
      proposalData = {
        receiver_id: action.contract,
        actions: [
          {
            method_name: action.method,
            args: Buffer.from(JSON.stringify(action.args)).toString('base64'),
            deposit: action.deposit ?? '1',
            gas: action.gas ?? formatGasValue('270').toString(),
          },
        ],
      };
    });
  }

  return {
    daoId: dao.id,
    description: proposalDescription,
    kind: 'FunctionCall',
    data: proposalData,
    bond: dao.policy.proposalBond,
  };
}

export type SwapsOnRefInput = {
  poolId: string;
  tokenIn: string;
  tokenOut: string;
  amountIn: number;
  amountOut: number;
  amountInToken: string;
  amountOutToken: string;
  actionsGas: number;
  details: string;
  externalUrl: string;
  target: string;
};

export async function getSwapsOnRefProposal(
  dao: DAO,
  data: SwapsOnRefInput
): Promise<CreateProposalParams> {
  const {
    poolId,
    tokenIn,
    tokenOut,
    amountIn,
    amountOut,
    actionsGas,
    details,
    externalUrl,
  } = data;

  const proposalDescription = `${details}${DATA_SEPARATOR}${externalUrl}`;

  const json = JSON.stringify({
    actions: [
      {
        pool_id: poolId,
        token_in: tokenIn,
        token_out: tokenOut,
        amount_in: amountIn,
        min_amount_out: amountOut,
      },
    ],
  });
  const args = Buffer.from(json).toString('base64');

  return {
    daoId: dao.id,
    description: proposalDescription,
    kind: 'FunctionCall',
    data: {
      receiver_id: 'v2.ref-finance.near',
      actions: [
        {
          method_name: 'ft_transfer_call',
          args,
          deposit: '1000000000000000000000000',
          gas: formatGasValue(actionsGas ?? DEFAULT_PROPOSAL_GAS).toString(),
        },
      ],
    },
    bond: dao.policy.proposalBond,
  };
}

export async function getCreateTokenProposal(
  dao: DAO,
  data: CreateTokenInput
): Promise<CreateProposalParams> {
  const { details, externalUrl } = data;

  const proposalDescription = `${details}${DATA_SEPARATOR}${externalUrl}`;

  const args = jsonToBase64Str({});

  return {
    daoId: dao.id,
    description: proposalDescription,
    kind: 'FunctionCall',
    data: {
      receiver_id: dao.id,
      actions: [
        {
          method_name: 'store_contract_self',
          args,
          deposit: new Decimal(6000000000000000000000000).toFixed(),
          gas: '220000000000000',
        },
      ],
    },
    bond: dao.policy.proposalBond,
  };
}

export async function getTransferProposal(
  dao: DAO,
  data: CreateTransferInput,
  tokens: Tokens
): Promise<CreateProposalParams> {
  const { token: dToken, details, externalUrl, target, amount } = data;

  const token = getToken(tokens, dToken);

  if (!token) {
    throw new Error('No tokens data found');
  }

  return {
    daoId: dao.id,
    description: `${details}${DATA_SEPARATOR}${externalUrl}`,
    kind: 'Transfer',
    bond: dao.policy.proposalBond,
    data: {
      token_id: token?.tokenId,
      receiver_id: target.trim(),
      amount: new Decimal(amount).mul(10 ** token.decimals).toFixed(),
    },
  };
}

export function getChangeConfigProposal(
  daoId: string,
  { name, purpose, metadata }: DaoConfig,
  reason: string,
  proposalBond: string
): CreateProposalParams {
  return {
    kind: 'ChangeConfig',
    daoId,
    data: {
      config: {
        metadata,
        name,
        purpose,
      },
    },
    description: reason,
    bond: proposalBond,
  };
}

export async function getVoteInOtherDaoProposal(
  dao: DAO,
  data: Record<string, string>
): Promise<CreateProposalParams> {
  const { gas, vote, details, proposal, targetDao, externalUrl } = data;

  const proposalDescription = `${details}${DATA_SEPARATOR}${externalUrl}`;

  const proposalObj = {
    variant: ProposalVariant.VoteInAnotherDao,
    daoId: dao.id,
    description: proposalDescription,
    kind: 'FunctionCall' as const,
    data: {
      receiver_id: targetDao,
      actions: [
        {
          method_name: 'act_proposal',
          args: jsonToBase64Str({
            id: parseInt(proposal, 10),
            action: vote,
          }),
          deposit: '0',
          gas: formatGasValue(gas).toString(),
        },
      ],
    },
    bond: dao?.policy.proposalBond,
  };

  return proposalObj;
}

export function getNewDaoProposal(
  dao: DAO,
  data: Record<string, string>
): CreateProposalParams {
  const { nearConfig } = configService.get();
  const { details, externalUrl, displayName, address } = data;

  const proposalDescription = `${details}${DATA_SEPARATOR}${externalUrl}`;

  const daoArgs = JSON.stringify({
    name: address,
    args: jsonToBase64Str({
      purpose: dao.description,
      bond: dao.policy.proposalBond,
      vote_period: dao.policy.proposalPeriod,
      grace_period: dao.policy.bountyForgivenessPeriod,
      policy: {
        roles: dao.policy.roles.map(role => ({
          name: role.name,
          kind: role.kind === 'Group' ? { Group: role.accountIds } : role.kind,
          permissions: role.permissions,
          vote_policy: role.votePolicy
            ? Object.keys(role.votePolicy).reduce<Record<string, unknown>>(
                (res, key) => {
                  const value = role.votePolicy[key];

                  res[key] = {
                    weight_kind: value.weightKind,
                    quorum: value.quorum,
                    threshold: value.ratio ?? value.weight,
                  };

                  return res;
                },
                {}
              )
            : {},
        })),
        default_vote_policy: {
          weight_kind: dao.policy.defaultVotePolicy.weightKind,
          quorum: dao.policy.defaultVotePolicy.quorum,
          threshold: dao.policy.defaultVotePolicy.ratio,
        },
        proposal_bond: dao.policy.proposalBond,
        proposal_period: dao.policy.proposalPeriod,
        bounty_bond: dao.policy.bountyBond,
        bounty_forgiveness_period: dao.policy.bountyForgivenessPeriod,
      },
      config: {
        name: address,
        purpose: dao.description,
        metadata: jsonToBase64Str({
          links: dao.links,
          flagCover: dao.flagCover,
          flagLogo: dao.flagLogo,
          displayName,
          legal: dao.legal,
        }),
      },
    }),
  });

  const args = Buffer.from(daoArgs).toString('base64');

  return {
    daoId: dao.id,
    description: proposalDescription,
    kind: 'FunctionCall',
    data: {
      receiver_id: nearConfig.contractName,
      actions: [
        {
          method_name: 'create',
          args,
          deposit: new Decimal(6).mul(10 ** 24).toFixed(),
          gas: '220000000000000',
        },
      ],
    },
    bond: dao.policy.proposalBond,
  };
}

export function getTransferDaoFundsProposal(
  dao: DAO,
  data: Record<string, string>,
  tokens: Tokens
): CreateProposalParams {
  const { token: dToken, details, externalUrl, target, amount } = data;

  const token = getToken(tokens, dToken);

  if (!token) {
    throw new Error('No tokens data found');
  }

  return {
    daoId: dao.id,
    description: `${details}${DATA_SEPARATOR}${externalUrl}`,
    kind: 'Transfer',
    bond: dao.policy.proposalBond,
    data: {
      token_id: token?.tokenId,
      receiver_id: target.trim(),
      amount: new Decimal(amount).mul(10 ** token.decimals).toFixed(),
    },
  };
}

export async function getDeployStakingContractProposal(
  dao: DAO,
  data: Record<string, unknown>
): Promise<CreateProposalParams> {
  const { id, name, policy } = dao;
  const { unstakingPeriod, token } = data;

  return {
    description: 'Deploy staking contract via factory',
    stakingContractName: `${name}${STAKING_CONTRACT_PREFIX}`,
    daoId: id,
    tokenId: token,
    daoBond: policy.proposalBond,
    unstakingPeriodInHours: unstakingPeriod,
  } as unknown as CreateProposalParams;
}

export async function getAcceptStakingContractProposal(
  dao: DAO
): Promise<CreateProposalParams> {
  const { id, name, policy } = dao;

  const stakingContractName = `${name}${STAKING_CONTRACT_PREFIX}`;

  return {
    daoId: id,
    daoBond: policy.proposalBond,
    description: `Adopt staking contract ${stakingContractName}`,
    stakingContractName,
  } as unknown as CreateProposalParams;
}

export async function getChangeVotingPolicyToWeightVoting(
  dao: DAO,
  data: Record<string, unknown>
): Promise<CreateProposalParams> {
  const { id, policy } = dao;
  const {
    roles,
    bountyBond,
    proposalBond,
    proposalPeriod,
    defaultVotePolicy,
    bountyForgivenessPeriod,
  } = policy;

  const { ratio, weightKind, quorum: defaultQuorum } = defaultVotePolicy;

  const {
    threshold: rawThreshold,
    balance: rawBalance,
    quorum: rawQuorum,
    decimals,
    details,
  } = data as {
    threshold: number;
    symbol: string;
    balance: number;
    quorum: number;
    decimals: number;
    details: string;
  };

  const balance = formatValueToYokto(rawBalance, decimals);
  const threshold = formatValueToYokto(rawThreshold, decimals);
  const quorum = formatValueToYokto(rawQuorum, decimals);

  // TODO: add selector or use wildcard instead(should be changed on a smart contract side)
  const proposalKindPolicyLabels = [
    'config',
    'policy',
    'add_member_to_role',
    'remove_member_from_role',
    'call',
    'upgrade_self',
    'upgrade_remote',
    'transfer',
    'set_vote_token',
    'add_bounty',
    'bounty_done',
    'vote',
    'factory_info_update',
    'policy_add_or_update_role',
    'policy_remove_role',
    'policy_update_default_vote_policy',
    'policy_update_parameters',
  ];

  const tokenWeightDefaultPolicy = {
    weight_kind: 'TokenWeight',
    quorum: quorum.toString(),
    threshold: threshold.toString(),
  };

  const holdersRole = roles.find(
    role => role.kind === 'Member' && role.name === 'TokenHolders'
  );

  return {
    daoId: id,
    description: details,
    kind: 'ChangePolicy',
    data: {
      policy: {
        roles: [
          ...roles
            .filter(role => role.kind !== 'Member')
            .map(dataRoleToContractRole),
          {
            name: 'TokenHolders',
            kind: {
              Member: balance?.toString() ?? '1',
            },
            permissions: holdersRole?.permissions ?? ['*:*'],
            vote_policy: proposalKindPolicyLabels.reduce(
              (acc, value) => ({
                ...acc,
                [value]: { ...tokenWeightDefaultPolicy },
              }),
              {}
            ),
          },
        ],
        default_vote_policy: {
          weight_kind: weightKind,
          quorum: defaultQuorum,
          threshold: ratio,
        },
        proposal_bond: proposalBond,
        proposal_period: proposalPeriod,
        bounty_bond: bountyBond,
        bounty_forgiveness_period: bountyForgivenessPeriod,
      },
    },
    bond: dao.policy.proposalBond,
  };
}

'''
'''--- astro_2.0/features/CreateProposal/helpers/proposalVariantsHelpers.ts ---
import { ProposalVariant } from 'types/proposal';

export function getNonEditableGasValue(
  variant: ProposalVariant,
  values: Record<string, unknown>
): { label: string; value: string } | undefined {
  switch (variant) {
    case ProposalVariant.ProposeUpgradeSelf:
    case ProposalVariant.ProposeGetUpgradeCode:
    case ProposalVariant.ProposeRemoveUpgradeCode: {
      return {
        label: 'Gas',
        value: values.gas as string,
      };
    }
    default: {
      return undefined;
    }
  }
}

'''
'''--- astro_2.0/features/CreateProposal/helpers/tests/bountiesHelpers.spec.ts ---
import { DAO } from 'types/dao';

import {
  getDeadline,
  getAddBountyProposal,
  getCompleteBountyProposal,
  getChangeBondDeadlinesProposal,
} from 'astro_2.0/features/CreateProposal/helpers/bountiesHelpers';

import {
  CreateBountyInput,
  BondsAndDeadlinesData,
} from 'astro_2.0/features/CreateProposal/types';
import { Tokens } from 'types/token';

describe('bountiesHelpers', () => {
  describe('getCompleteBountyProposal', () => {
    it('Should create proper object', () => {
      const daoId = 'daoId';
      const details = 'details';
      const externalUrl = 'externalUrl';
      const target = 'target';
      const bond = 'bond';
      const bountyId = 1;

      expect(
        getCompleteBountyProposal(
          daoId,
          details,
          externalUrl,
          target,
          bond,
          bountyId
        )
      ).toEqual({
        bond,
        daoId,
        data: {
          bounty_id: 1,
          receiver_id: target,
        },
        description: `${details}$$$$${externalUrl}`,
        kind: 'BountyDone',
      });
    });
  });

  describe('getDeadline', () => {
    it('Should get proper number', () => {
      expect(getDeadline(10, 'day')).toEqual('864000000000000');
      expect(getDeadline(10, 'week')).toEqual('6048000000000000');
      expect(getDeadline(10, 'month')).toEqual('25920000000000000');
    });
  });

  describe('getAddBountyProposal', () => {
    const dao = {
      id: 'daoId',
      policy: {
        proposalBond: 'proposalBond',
      },
    } as unknown as DAO;

    const data = {
      slots: 1,
      amount: 1,
      details: 'proposal details',
      deadlineUnit: 'day',
      deadlineThreshold: 10,
      externalUrl: 'some url',
      token: 'NEAR',
    } as unknown as CreateBountyInput;

    const tokens = {
      NEAR: {
        tokenId: 'NEAR',
        decimals: 10,
        symbol: 'NEAR',
      },
    } as unknown as Tokens;

    it('Should throw error if no tokens data', () => {
      expect(() => getAddBountyProposal(dao, data, {})).toThrow();
    });

    it('Should provide proposal', () => {
      expect(getAddBountyProposal(dao, data, tokens)).toEqual({
        bond: 'proposalBond',
        daoId: 'daoId',
        data: {
          bounty: {
            amount: '10000000000',
            description: 'proposal details$$$$some url',
            max_deadline: '864000000000000',
            times: 1,
            token: 'NEAR',
          },
        },
        description: 'proposal details$$$$some url',
        kind: 'AddBounty',
      });
    });
  });

  describe('getChangeBondDeadlinesProposal', () => {
    it('Should provide proper object', () => {
      const dao = {
        id: 'daoId',
        policy: {
          defaultVotePolicy: {
            weightKind: 'RoleWeight',
            quorum: '0',
            ratio: [1, 2],
          },
          roles: [
            {
              isArchived: false,
              createdAt: '2021-12-02T22:13:53.346Z',
              updatedAt: '2022-03-30T20:00:33.563Z',
              id: 'legaldao.sputnikv2.testnet-Everyone',
              name: 'Everyone',
              kind: 'Group',
              balance: null,
              accountIds: ['alexeysputnik.testnet'],
              permissions: [
                '*:VoteReject',
                '*:VoteRemove',
                '*:VoteApprove',
                '*:AddProposal',
                '*:Finalize',
              ],
              votePolicy: {},
            },
          ],
        },
      } as unknown as DAO;

      const bondsAndDeadlines = {
        createProposalBond: 123,
        proposalExpireTime: 1,
        claimBountyBond: 1,
        unclaimBountyTime: 1,
      } as unknown as BondsAndDeadlinesData;

      const initialValues = {
        accountName: 'accountName',
        createProposalBond: 1,
        proposalExpireTime: 2,
        claimBountyBond: 3,
        unclaimBountyTime: 4,
      };

      expect(
        getChangeBondDeadlinesProposal(
          dao,
          bondsAndDeadlines,
          initialValues,
          'proposalBond',
          'some description'
        )
      ).toEqual({
        bond: 'proposalBond',
        daoId: 'daoId',
        data: {
          policy: {
            bounty_bond: '1000000000000000000000000',
            bounty_forgiveness_period: '3600000000000',
            default_vote_policy: {
              quorum: '0',
              threshold: [1, 2],
              weight_kind: 'RoleWeight',
            },
            proposal_bond: '123000000000000000000000000',
            proposal_period: '3600000000000',
            roles: [
              {
                kind: {
                  Group: ['alexeysputnik.testnet'],
                },
                name: 'Everyone',
                permissions: [
                  '*:VoteReject',
                  '*:VoteRemove',
                  '*:VoteApprove',
                  '*:AddProposal',
                  '*:Finalize',
                ],
                vote_policy: {},
              },
            ],
          },
        },
        description: 'some description',
        kind: 'ChangePolicy',
      });
    });
  });
});

'''
'''--- astro_2.0/features/CreateProposal/helpers/tests/mock.ts ---
import { DAO } from 'types/dao';
import { Token } from 'types/token';

import { BuyNftFromMintbaseInput } from 'astro_2.0/features/CreateProposal/helpers/proposalObjectHelpers';

export const dao = {
  id: 'legaldao.sputnikv2.testnet',
  name: 'legaldao',
  policy: {
    bountyBond: '100000000000000000000000',
    proposalBond: '100000000000000000000000',
    proposalPeriod: '100000000000000000000000',
    bountyForgivenessPeriod: '100000000000000000000000',
  },
} as unknown as DAO;

export const customFunctionCallData = {
  gas: 150,
  actionsGas: 0.15,
  externalUrl: '',
  details: 'asdfg',
  json: '{}',
  deposit: '0',
  methodName: 'nft_buy',
  smartContractAddress: 'some.testnet',
  token: 'NEAR',
};

export const nftFromMintbaseData = {
  tokenKey: 'tokenKey',
  price: 10,
  timeout: '100',
  timeoutGranularity: 'hours',
  actionsGas: 5,
  deposit: '2',
  details: 'some details',
  externalUrl: 'external url',
  token: 'NEAR',
  target: 'target',
} as BuyNftFromMintbaseInput;

export const transferMintbaseNFTInputData = {
  smartContractAddress: 'sc-address',
  tokenKey: '123:mint.near',
  actionsGas: 5,
  details: 'some details',
  externalUrl: 'external url',
  target: 'target',
};

export const buyNftFromParasInputData = {
  tokenKey: 'NEAR',
  price: 10,
  timeout: '100',
  actionsGas: 5,
  deposit: '10',
  details: 'some details',
  externalUrl: 'external url',
  token: 'NEAR',
  target: 'target',
  smartContractAddress: 'sc-address',
  methodName: 'some method',
};

export const swapsOnRefInputData = {
  poolId: 'poolId',
  tokenIn: 'T1',
  tokenOut: 'T2',
  amountIn: 10,
  amountOut: 100,
  amountInToken: '20',
  amountOutToken: '200',
  actionsGas: 5,
  details: 'some details',
  externalUrl: 'external url',
  target: 'target',
};

export const tokens = {
  NEAR: {
    createdAt: '2021-12-07T19:15:52.793Z',
    transactionHash: null,
    updateTransactionHash: null,
    createTimestamp: null,
    updateTimestamp: '1639053338980000000',
    id: 'NEAR',
    ownerId: '',
    totalSupply: '',
    decimals: 24,
    icon: null,
    name: null,
    reference: null,
    referenceHash: null,
    spec: null,
    symbol: 'NEAR',
    price: '10.68',
    balance: '5.1002',
    tokenId: '',
  },
} as unknown as Record<string, Token>;

'''
'''--- astro_2.0/features/CreateProposal/helpers/tests/newProposalObject.spec.ts ---
import { ProposalVariant } from 'types/proposal';
import { FunctionCallType } from 'astro_2.0/features/CreateProposal/components/CustomFunctionCallContent/types';

import { getNewProposalObject } from 'astro_2.0/features/CreateProposal/helpers/newProposalObject';

import { dao, tokens } from './mock';

jest.mock(
  'astro_2.0/features/CreateProposal/helpers/proposalObjectHelpers',
  () => {
    return {
      ...jest.requireActual(
        'astro_2.0/features/CreateProposal/helpers/proposalObjectHelpers'
      ),
      getAddBountyProposal: () => 'getAddBountyProposal',
      getUpgradeCodeProposal: () => 'getUpgradeCodeProposal',
      getUpgradeSelfProposal: () => 'getUpgradeSelfProposal',
      getRemoveUpgradeCodeProposal: () => 'getRemoveUpgradeCodeProposal',
      getTransferProposal: () => 'getTransferProposal',
      getChangeConfigProposal: () => 'getChangeConfigProposal',
      getCreateTokenProposal: () => 'getCreateTokenProposal',
      getSwapsOnRefProposal: () => 'getSwapsOnRefProposal',
      getBuyNftFromParasProposal: () => 'getBuyNftFromParasProposal',
      getBuyNftFromMintbaseProposal: () => 'getBuyNftFromMintbaseProposal',
      getTransferMintbaseNFTProposal: () => 'getTransferMintbaseNFTProposal',
      getCustomFunctionCallProposal: () => 'getCustomFunctionCallProposal',
    };
  }
);

jest.mock('astro_2.0/features/CreateProposal/helpers/bountiesHelpers', () => {
  return {
    getAddBountyProposal: () => 'getAddBountyProposal',
    getCompleteBountyProposal: () => 'getCompleteBountyProposal',
    getChangeBondDeadlinesProposal: () => 'getChangeBondDeadlinesProposal',
  };
});

jest.mock('features/groups/helpers', () => {
  return {
    getAddMemberProposal: () => 'getAddMemberProposal',
    getRemoveMemberProposal: () => 'getRemoveMemberProposal',
    getChangePolicyProposal: () => 'getChangePolicyProposal',
  };
});

jest.mock('features/vote-policy/helpers', () => {
  return {
    getInitialData: () => ({}),
    getNewProposalObject: () => 'getNewVotingPolicyProposalObject',
  };
});

jest.mock(
  'astro_2.0/features/CreateProposal/components/TokenDistributionContent/helpers',
  () => {
    return {
      getTokenDistributionProposal: () => 'getTokenDistributionProposal',
    };
  }
);

jest.mock(
  'astro_2.0/features/CreateProposal/helpers/permissionsHelpers',
  () => {
    return {
      getNewPermissionsProposalObject: () => 'getNewPermissionsProposalObject',
    };
  }
);

describe('newProposalObject', () => {
  const data = {
    details: 'details',
    externalUrl: 'externalUrl',
    versionHash: 'versionHash',
    unstakingPeriod: 'unstakingPeriod',
    links: [
      {
        id: 'someId',
        url: 'someUrl',
      },
    ],
  };

  it.each`
    type                                                        | expectedResult
    ${ProposalVariant.ProposeGetUpgradeCode}                    | ${'getUpgradeCodeProposal'}
    ${ProposalVariant.ProposeRemoveUpgradeCode}                 | ${'getRemoveUpgradeCodeProposal'}
    ${ProposalVariant.ProposeUpgradeSelf}                       | ${'getUpgradeSelfProposal'}
    ${ProposalVariant.ProposeCreateBounty}                      | ${'getAddBountyProposal'}
    ${ProposalVariant.ProposeDoneBounty}                        | ${'getCompleteBountyProposal'}
    ${ProposalVariant.ProposeTransfer}                          | ${'getTransferProposal'}
    ${ProposalVariant.ProposeChangeDaoLinks}                    | ${'getChangeConfigProposal'}
    ${ProposalVariant.ProposeChangeDaoName}                     | ${'getChangeConfigProposal'}
    ${ProposalVariant.ProposeChangeDaoPurpose}                  | ${'getChangeConfigProposal'}
    ${ProposalVariant.ProposeRemoveMember}                      | ${'getRemoveMemberProposal'}
    ${ProposalVariant.ProposeAddMember}                         | ${'getAddMemberProposal'}
    ${ProposalVariant.ProposeCreateGroup}                       | ${'getChangePolicyProposal'}
    ${ProposalVariant.ProposeChangeVotingPolicy}                | ${'getNewVotingPolicyProposalObject'}
    ${ProposalVariant.ProposeChangeBonds}                       | ${'getChangeBondDeadlinesProposal'}
    ${ProposalVariant.ProposeChangeDaoFlag}                     | ${'getChangeConfigProposal'}
    ${ProposalVariant.ProposeChangeDaoLegalInfo}                | ${'getChangeConfigProposal'}
    ${ProposalVariant.ProposeCreateToken}                       | ${'getCreateTokenProposal'}
    ${ProposalVariant.ProposeTokenDistribution}                 | ${'getTokenDistributionProposal'}
    ${ProposalVariant.ProposeChangeProposalVotingPermissions}   | ${'getNewPermissionsProposalObject'}
    ${ProposalVariant.ProposeChangeProposalCreationPermissions} | ${'getNewPermissionsProposalObject'}
  `(
    'Should return proposal for $type proposal',
    async ({ type, expectedResult }) => {
      const result = await getNewProposalObject(
        dao,
        type,
        data,
        tokens,
        'MyAccount'
      );

      expect(result).toEqual(expectedResult);
    }
  );

  it('Should return proposal for ProposePoll proposal', async () => {
    const result = await getNewProposalObject(
      dao,
      ProposalVariant.ProposePoll,
      data,
      tokens,
      'MyAccount'
    );

    expect(result).toEqual({
      daoId: 'legaldao.sputnikv2.testnet',
      description: 'details$$$$externalUrl',
      kind: 'Vote',
      bond: '100000000000000000000000',
    });
  });

  it('Should return proposal for ProposeContractAcceptance proposal', async () => {
    const result = await getNewProposalObject(
      dao,
      ProposalVariant.ProposeStakingContractDeployment,
      data,
      tokens,
      'MyAccount'
    );

    expect(result).toEqual({
      stakingContractName: 'legaldao-staking',
      daoId: 'legaldao.sputnikv2.testnet',
      tokenId: undefined,
      daoBond: '100000000000000000000000',
      unstakingPeriodInHours: 'unstakingPeriod',
      description: 'Deploy staking contract via factory',
    });
  });

  it('Should return null if no proper proposal type', async () => {
    const result = await getNewProposalObject(
      dao,
      'Biba&Boba' as ProposalVariant,
      data,
      tokens,
      'MyAccount'
    );

    expect(result).toBeNull();
  });

  it.each`
    type                                        | expectedResult
    ${FunctionCallType.SwapsOnRef}              | ${'getSwapsOnRefProposal'}
    ${FunctionCallType.BuyNFTfromParas}         | ${'getBuyNftFromParasProposal'}
    ${FunctionCallType.BuyNFTfromMintbase}      | ${'getBuyNftFromMintbaseProposal'}
    ${FunctionCallType.TransferNFTfromMintbase} | ${'getTransferMintbaseNFTProposal'}
    ${'Unkown type'}                            | ${'getCustomFunctionCallProposal'}
  `(
    'Should return proper "custom function call proposal" for $type function call type',
    async ({ type, expectedResult }) => {
      const result = await getNewProposalObject(
        dao,
        ProposalVariant.ProposeCustomFunctionCall,
        {
          ...data,
          functionCallType: type,
        },
        tokens,
        'MyAccount'
      );

      expect(result).toEqual(expectedResult);
    }
  );
});

'''
'''--- astro_2.0/features/CreateProposal/helpers/tests/proposalObjectHelpers.spec.ts ---
import { DAO } from 'types/dao';

import { CreateTokenInput } from 'astro_2.0/features/CreateProposal/types';
import { CreateTransferInput } from 'astro_2.0/features/CreateProposal/components/types';

import {
  BuyNftFromParasInput,
  BuyNftFromMintbaseInput,
  CustomFunctionCallInput,
  getTransferProposal,
  getSwapsOnRefProposal,
  getUpgradeSelfProposal,
  getUpgradeCodeProposal,
  getCreateTokenProposal,
  getChangeConfigProposal,
  getBuyNftFromParasProposal,
  getRemoveUpgradeCodeProposal,
  getBuyNftFromMintbaseProposal,
  getCustomFunctionCallProposal,
  getTransferMintbaseNFTProposal,
} from 'astro_2.0/features/CreateProposal/helpers/proposalObjectHelpers';

import {
  dao,
  tokens,
  nftFromMintbaseData,
  swapsOnRefInputData,
  customFunctionCallData,
  buyNftFromParasInputData,
  transferMintbaseNFTInputData,
} from './mock';

describe('proposalObjectHelpers', () => {
  describe('getCustomFunctionCallProposal', () => {
    it('Should throw error if no token info provided', async () => {
      await expect(
        getCustomFunctionCallProposal(
          {} as unknown as DAO,
          {} as unknown as CustomFunctionCallInput,
          {}
        )
      ).rejects.toThrow();
    });

    it('Should return custom function call proposal', async () => {
      const result = await getCustomFunctionCallProposal(
        dao,
        customFunctionCallData,
        tokens
      );

      expect(result).toEqual({
        daoId: 'legaldao.sputnikv2.testnet',
        description: 'asdfg$$$$',
        kind: 'FunctionCall',
        data: {
          receiver_id: 'some.testnet',
          actions: [
            {
              method_name: 'nft_buy',
              args: 'e30=',
              deposit: '0',
              gas: '150000000000',
            },
          ],
        },
        bond: '100000000000000000000000',
      });
    });
  });

  describe('getBuyNftFromMintbaseProposal', () => {
    it('Should throw error if no token info', async () => {
      await expect(
        getBuyNftFromMintbaseProposal(
          {} as unknown as DAO,
          {} as unknown as BuyNftFromMintbaseInput,
          {}
        )
      ).rejects.toThrow();
    });

    it('Should return proposal', async () => {
      const result = await getBuyNftFromMintbaseProposal(
        dao,
        nftFromMintbaseData,
        tokens
      );

      expect(result).toEqual({
        bond: '100000000000000000000000',
        daoId: 'legaldao.sputnikv2.testnet',
        data: {
          actions: [
            {
              args: 'eyJ0b2tlbl9rZXkiOlsidG9rZW5LZXkiXSwicHJpY2UiOlsiMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCJdLCJ0aW1lb3V0IjpbeyJob3VycyI6IjEwMCJ9XX0=',
              deposit: '2000000000000000000000000',
              gas: '5000000000000',
              method_name: 'make_offer',
            },
          ],
          receiver_id: 'market.mintbase1.near',
        },
        description: 'some details$$$$external url',
        kind: 'FunctionCall',
      });
    });
  });

  describe('getTransferMintbaseNFTProposal', () => {
    it('Should return proposal', async () => {
      const result = await getTransferMintbaseNFTProposal(
        dao,
        transferMintbaseNFTInputData
      );

      expect(result).toEqual({
        bond: '100000000000000000000000',
        daoId: 'legaldao.sputnikv2.testnet',
        data: {
          actions: [
            {
              args: 'eyJ0b2tlbl9pZHMiOltbIjEyMyIsInRhcmdldCJdXX0=',
              deposit: '1',
              gas: '5000000000000',
              method_name: 'nft_batch_transfer',
            },
          ],
          receiver_id: 'mint.near',
        },
        description: 'some details$$$$external url',
        kind: 'FunctionCall',
      });
    });
  });

  describe('getBuyNftFromParasProposal', () => {
    it('Should throw error if no token info', async () => {
      await expect(
        getBuyNftFromParasProposal(
          {} as unknown as DAO,
          {} as unknown as BuyNftFromParasInput,
          {}
        )
      ).rejects.toThrow();
    });

    it('Should return proposal', async () => {
      const result = await getBuyNftFromParasProposal(
        dao,
        buyNftFromParasInputData,
        tokens
      );

      expect(result).toEqual({
        bond: '100000000000000000000000',
        daoId: 'legaldao.sputnikv2.testnet',
        data: {
          actions: [
            {
              args: 'eyJ0b2tlbl9zZXJpZXNfaWQiOiJORUFSIiwicmVjZWl2ZXJfaWQiOiJ0YXJnZXQifQ==',
              deposit: '10000000000000000000000000',
              gas: '5000000000000',
              method_name: 'nft_buy',
            },
          ],
          receiver_id: 'x.paras.near',
        },
        description: 'some details$$$$external url',
        kind: 'FunctionCall',
      });
    });
  });

  describe('getSwapsOnRefProposal', () => {
    it('Should return proposal', async () => {
      const result = await getSwapsOnRefProposal(dao, swapsOnRefInputData);

      expect(result).toEqual({
        bond: '100000000000000000000000',
        daoId: 'legaldao.sputnikv2.testnet',
        data: {
          actions: [
            {
              args: 'eyJhY3Rpb25zIjpbeyJwb29sX2lkIjoicG9vbElkIiwidG9rZW5faW4iOiJUMSIsInRva2VuX291dCI6IlQyIiwiYW1vdW50X2luIjoxMCwibWluX2Ftb3VudF9vdXQiOjEwMH1dfQ==',
              deposit: '1000000000000000000000000',
              gas: '5000000000000',
              method_name: 'ft_transfer_call',
            },
          ],
          receiver_id: 'v2.ref-finance.near',
        },
        description: 'some details$$$$external url',
        kind: 'FunctionCall',
      });
    });
  });

  describe('getUpgradeCodeProposal', () => {
    it('Should return proposal', () => {
      const data = {
        versionHash: 'versionHash',
        details: 'details',
        externalUrl: 'externalUrl',
      };

      const result = getUpgradeCodeProposal(dao, data);

      expect(result).toEqual({
        daoId: 'legaldao.sputnikv2.testnet',
        description: 'details$$$$externalUrl',
        kind: 'FunctionCall',
        data: {
          receiver_id: 'sputnikv2.testnet',
          actions: [
            {
              method_name: 'store_contract_self',
              args: 'eyJjb2RlX2hhc2giOiJ2ZXJzaW9uSGFzaCJ9',
              deposit: '6000000000000000000000000',
              gas: '220000000000000',
            },
          ],
        },
        bond: '100000000000000000000000',
      });
    });
  });

  describe('getRemoveUpgradeCodeProposal', () => {
    it('Should return proposal', () => {
      const data = {
        versionHash: 'versionHash',
        details: 'details',
        externalUrl: 'externalUrl',
      };

      const result = getRemoveUpgradeCodeProposal(dao, data);

      expect(result).toEqual({
        variant: 'ProposeRemoveUpgradeCode',
        daoId: 'legaldao.sputnikv2.testnet',
        description: 'details$$$$externalUrl',
        kind: 'FunctionCall',
        data: {
          receiver_id: 'sputnikv2.testnet',
          actions: [
            {
              method_name: 'remove_contract_self',
              args: 'eyJjb2RlX2hhc2giOiJ2ZXJzaW9uSGFzaCJ9',
              deposit: '0',
              gas: '220000000000000',
            },
          ],
        },
        bond: '100000000000000000000000',
      });
    });
  });

  describe('getUpgradeSelfProposal', () => {
    it('Should return proposal', () => {
      const data = {
        versionHash: 'versionHash',
        details: 'details',
        externalUrl: 'externalUrl',
      };

      const result = getUpgradeSelfProposal(dao, data);

      expect(result).toEqual({
        daoId: 'legaldao.sputnikv2.testnet',
        description: 'details$$$$externalUrl',
        kind: 'UpgradeSelf',
        data: { hash: 'versionHash' },
        bond: '100000000000000000000000',
      });
    });
  });

  describe('getCreateTokenProposal', () => {
    it('Should return proposal', async () => {
      const data = {
        details: 'details',
        externalUrl: 'externalUrl',
      } as CreateTokenInput;

      const result = await getCreateTokenProposal(dao, data);

      expect(result).toEqual({
        daoId: 'legaldao.sputnikv2.testnet',
        description: 'details$$$$externalUrl',
        kind: 'FunctionCall',
        data: {
          receiver_id: 'legaldao.sputnikv2.testnet',
          actions: [
            {
              args: 'e30=',
              deposit: '6000000000000000000000000',
              gas: '220000000000000',
              method_name: 'store_contract_self',
            },
          ],
        },
        bond: '100000000000000000000000',
      });
    });
  });

  describe('getTransferProposal', () => {
    it('Should throw error if no token info provided', async () => {
      await expect(
        getTransferProposal(
          {} as unknown as DAO,
          {} as unknown as CreateTransferInput,
          {}
        )
      ).rejects.toThrow();
    });

    it('Should return proposal', async () => {
      const data = {
        token: 'NEAR',
        details: 'details',
        externalUrl: 'externalUrl',
        target: 'target',
        amount: 10,
      } as CreateTransferInput;

      const result = await getTransferProposal(dao, data, tokens);

      expect(result).toEqual({
        daoId: 'legaldao.sputnikv2.testnet',
        description: 'details$$$$externalUrl',
        kind: 'Transfer',
        bond: '100000000000000000000000',
        data: {
          token_id: '',
          receiver_id: 'target',
          amount: '10000000000000000000000000',
        },
      });
    });
  });

  describe('getChangeConfigProposal', () => {
    it('Should return proposal', () => {
      const config = {
        name: 'MyName',
        purpose: 'MyPurpose',
        metadata: 'SomeMeta',
      };

      const result = getChangeConfigProposal(
        'daoId',
        config,
        'Some reason to live',
        'Bond'
      );

      expect(result).toEqual({
        kind: 'ChangeConfig',
        daoId: 'daoId',
        data: {
          config: {
            metadata: 'SomeMeta',
            name: 'MyName',
            purpose: 'MyPurpose',
          },
        },
        description: 'Some reason to live',
        bond: 'Bond',
      });
    });
  });
});

'''
'''--- astro_2.0/features/CreateProposal/helpers/validation.ts ---
import { getValidationSchema } from 'astro_2.0/features/CreateProposal/helpers/rootHelper';
import { ProposalVariant } from 'types/proposal';
import { DAO } from 'types/dao';
import { SputnikNearService } from 'services/sputnik';
import { TFunction } from 'next-i18next';

export const resolver =
  (
    dao: DAO,
    nearService: SputnikNearService | null,
    t: TFunction,
    isDraft?: boolean
  ) =>
  async (
    data: Record<string, unknown>,
    context: { selectedProposalVariant: ProposalVariant } | undefined
  ): Promise<{
    values: Record<string, unknown>;
    errors: Record<string, unknown>;
  }> => {
    const schema = getValidationSchema(
      t,
      context?.selectedProposalVariant,
      dao,
      data,
      nearService ?? undefined,
      isDraft
    );

    try {
      let values = await schema.validate(data, {
        abortEarly: false,
      });

      if (
        context?.selectedProposalVariant ===
        ProposalVariant.ProposeChangeDaoFlag
      ) {
        values = {
          ...values,
          flagCover: data.flagCover,
          flagLogo: data.flagLogo,
        };
      }

      return {
        values,
        errors: {},
      };
    } catch (errors) {
      return {
        values: {},
        errors: errors.inner.reduce(
          (
            allErrors: Record<string, string>,
            currentError: { path: string; type?: string; message: string }
          ) => ({
            ...allErrors,
            [currentError.path]: {
              type: currentError.type ?? 'validation',
              message: currentError.message,
            },
          }),
          {}
        ),
      };
    }
  };

'''
'''--- astro_2.0/features/CreateProposal/hooks/index.ts ---
export * from './useCreateProposal';

'''
'''--- astro_2.0/features/CreateProposal/index.ts ---
export * from './CreateProposal';

'''
'''--- astro_2.0/features/CreateProposal/tests/createProposalHelpers.spec.ts ---
/* eslint-disable @typescript-eslint/ban-ts-comment */

import { DAO } from 'types/dao';
import { ProposalType, ProposalVariant } from 'types/proposal';

import {
  getProposalTypeByVariant,
  getInitialProposalVariant,
  getAllowedProposalsToVote,
  getAllowedProposalsToCreate,
  isUserPermittedToCreateProposal,
  getDefaultProposalVariantByType,
} from 'astro_2.0/features/CreateProposal/createProposalHelpers';

const allowedProposalsToCreate = {
  [ProposalType.ChangePolicy]: true,
  [ProposalType.ChangeConfig]: true,
  [ProposalType.AddBounty]: true,
  [ProposalType.Transfer]: true,
  [ProposalType.Vote]: true,
  [ProposalType.RemoveMemberFromRole]: true,
  [ProposalType.AddMemberToRole]: true,
  [ProposalType.AddMemberToRole]: true,
  [ProposalType.FunctionCall]: true,
  [ProposalType.UpgradeRemote]: true,
  [ProposalType.UpgradeSelf]: true,
  [ProposalType.SetStakingContract]: true,
  [ProposalType.BountyDone]: true,
};

function getDao(permission: string, accountId?: string): DAO {
  return {
    policy: {
      roles: [
        {
          accountIds: accountId ? [accountId] : accountId,
          kind: accountId ? '' : 'Everyone',
          permissions: [permission],
        },
      ],
    },
  } as DAO;
}

describe('createProposalHelpers', () => {
  describe('getInitialProposalVariant', () => {
    it('Should return default proposal variant', () => {
      const result = getInitialProposalVariant(
        ProposalVariant.ProposeCreateToken,
        true,
        allowedProposalsToCreate
      );

      expect(result).toEqual(ProposalVariant.ProposeCreateToken);
    });

    it('Should return ProposeRemoveMember proposal variant', () => {
      const result = getInitialProposalVariant(
        ProposalVariant.ProposeRemoveMember,
        false,
        allowedProposalsToCreate
      );

      expect(result).toEqual(ProposalVariant.ProposeRemoveMember);
    });
  });

  describe('isUserPermittedToCreateProposal', () => {
    it('Should return false if no account or dao', () => {
      expect(isUserPermittedToCreateProposal(undefined, null)).toBeFalsy();
    });

    it('Should return false if no dao roles', () => {
      const dao = {
        policy: {},
      } as unknown as DAO;

      expect(isUserPermittedToCreateProposal('123', dao)).toBeFalsy();
    });

    it.each`
      permission         | result
      ${'*:*'}           | ${true}
      ${'*:AddProposal'} | ${true}
      ${'SomeOther'}     | ${false}
    `(
      'Should properly handle permissions for role kind "Everyone" and with permission $permissions',
      ({ permission, result }) => {
        const dao = {
          policy: {
            roles: [
              {
                kind: 'Everyone',
                permissions: [permission],
              },
            ],
          },
        } as unknown as DAO;

        expect(isUserPermittedToCreateProposal('123', dao)).toEqual(result);
      }
    );

    it.each`
      permission         | result
      ${'*:*'}           | ${true}
      ${'*:AddProposal'} | ${true}
      ${'SomeOther'}     | ${false}
    `(
      'Should return "true" for permissions for specific user',
      ({ permission, result }) => {
        const accountId = '123';

        const dao = {
          policy: {
            roles: [
              {
                accountIds: [accountId],
                permissions: [permission],
              },
            ],
          },
        } as unknown as DAO;

        expect(isUserPermittedToCreateProposal(accountId, dao)).toEqual(result);
      }
    );
  });

  describe('getAllowedProposalsToCreate', () => {
    const result = Object.keys(allowedProposalsToCreate).reduce(
      (acc: Record<string, boolean>, key) => {
        acc[key] = false;

        return acc;
      },
      {}
    );

    it('Should return default result', () => {
      expect(getAllowedProposalsToCreate(null, null, false)).toEqual(result);
      expect(getAllowedProposalsToCreate('123', null, false)).toEqual(result);
      expect(getAllowedProposalsToCreate('123', getDao('abcd'), false)).toEqual(
        result
      );
    });

    it.each`
      permission
      ${'*:*'}
      ${'*:AddProposal'}
    `(
      'Should allow everything for $permission permission',
      ({ permission }) => {
        expect(
          getAllowedProposalsToCreate('123', getDao(permission, '123'), false)
        ).toEqual(allowedProposalsToCreate);
      }
    );

    it.each`
      permission                               | proposalType
      ${'config:AddProposal'}                  | ${ProposalType.ChangeConfig}
      ${'call:AddProposal'}                    | ${ProposalType.FunctionCall}
      ${'bounty_done:AddProposal'}             | ${ProposalType.BountyDone}
      ${'policy:AddProposal'}                  | ${ProposalType.ChangePolicy}
      ${'add_bounty:AddProposal'}              | ${ProposalType.AddBounty}
      ${'transfer:AddProposal'}                | ${ProposalType.Transfer}
      ${'vote:AddProposal'}                    | ${ProposalType.Vote}
      ${'remove_member_from_role:AddProposal'} | ${ProposalType.RemoveMemberFromRole}
      ${'add_member_to_role:AddProposal'}      | ${ProposalType.AddMemberToRole}
      ${'upgrade_self:AddProposal'}            | ${ProposalType.UpgradeSelf}
      ${'upgrade_remote:AddProposal'}          | ${ProposalType.UpgradeRemote}
      ${'set_vote_token:AddProposal'}          | ${ProposalType.SetStakingContract}
    `(
      'Should allow $proposalType for $permission $permission',
      ({ permission, proposalType }) => {
        expect(
          getAllowedProposalsToCreate('123', getDao(permission), false)
        ).toEqual({
          ...result,
          [proposalType]: true,
        });
      }
    );
  });

  describe('getAllowedProposalsToVote', () => {
    const result = Object.keys(allowedProposalsToCreate).reduce(
      (acc: Record<string, boolean>, key) => {
        acc[key] = false;

        return acc;
      },
      {}
    );

    it('Should return default result', () => {
      expect(getAllowedProposalsToVote(null, null)).toEqual(result);
      expect(getAllowedProposalsToVote('123', null)).toEqual(result);
      expect(getAllowedProposalsToVote('123', getDao('abcd'))).toEqual(result);
    });

    it.each`
      permission
      ${'*:*'}
      ${'*:VoteApprove'}
      ${'*:VoteReject'}
      ${'*:VoteRemove'}
    `('Should properly process $permission permission', ({ permission }) => {
      expect(
        getAllowedProposalsToVote('123', getDao(permission, '123'))
      ).toEqual({
        [ProposalType.ChangePolicy]: true,
        [ProposalType.ChangeConfig]: true,
        [ProposalType.AddBounty]: true,
        [ProposalType.Transfer]: true,
        [ProposalType.Vote]: true,
        [ProposalType.RemoveMemberFromRole]: true,
        [ProposalType.AddMemberToRole]: true,
        [ProposalType.AddMemberToRole]: true,
        [ProposalType.FunctionCall]: true,
        [ProposalType.UpgradeRemote]: true,
        [ProposalType.UpgradeSelf]: true,
        [ProposalType.SetStakingContract]: true,
        [ProposalType.BountyDone]: true,
      });
    });

    it.each`
      permission                               | proposalType
      ${'policy:VoteApprove'}                  | ${ProposalType.ChangePolicy}
      ${'policy:VoteReject'}                   | ${ProposalType.ChangePolicy}
      ${'policy:VoteRemove'}                   | ${ProposalType.ChangePolicy}
      ${'add_bounty:VoteApprove'}              | ${ProposalType.AddBounty}
      ${'add_bounty:VoteReject'}               | ${ProposalType.AddBounty}
      ${'add_bounty:VoteRemove'}               | ${ProposalType.AddBounty}
      ${'transfer:VoteApprove'}                | ${ProposalType.Transfer}
      ${'transfer:VoteReject'}                 | ${ProposalType.Transfer}
      ${'transfer:VoteRemove'}                 | ${ProposalType.Transfer}
      ${'vote:VoteApprove'}                    | ${ProposalType.Vote}
      ${'vote:VoteReject'}                     | ${ProposalType.Vote}
      ${'vote:VoteRemove'}                     | ${ProposalType.Vote}
      ${'remove_member_from_role:VoteApprove'} | ${ProposalType.RemoveMemberFromRole}
      ${'remove_member_from_role:VoteReject'}  | ${ProposalType.RemoveMemberFromRole}
      ${'remove_member_from_role:VoteRemove'}  | ${ProposalType.RemoveMemberFromRole}
      ${'add_member_to_role:VoteApprove'}      | ${ProposalType.AddMemberToRole}
      ${'add_member_to_role:VoteReject'}       | ${ProposalType.AddMemberToRole}
      ${'add_member_to_role:VoteRemove'}       | ${ProposalType.AddMemberToRole}
    `(
      'Should allow $proposalType for $permission $permission',
      ({ permission, proposalType }) => {
        expect(getAllowedProposalsToVote('123', getDao(permission))).toEqual({
          ...result,
          [proposalType]: true,
        });
      }
    );
  });

  describe('getDefaultProposalVariantByType', () => {
    it.each`
      proposalType                         | proposalVariant
      ${ProposalType.ChangeConfig}         | ${ProposalVariant.ProposeChangeDaoName}
      ${ProposalType.ChangePolicy}         | ${ProposalVariant.ProposeChangeVotingPolicy}
      ${ProposalType.FunctionCall}         | ${ProposalVariant.ProposeCustomFunctionCall}
      ${ProposalType.Vote}                 | ${ProposalVariant.ProposePoll}
      ${ProposalType.Transfer}             | ${ProposalVariant.ProposeTransfer}
      ${ProposalType.RemoveMemberFromRole} | ${ProposalVariant.ProposeRemoveMember}
      ${ProposalType.AddMemberToRole}      | ${ProposalVariant.ProposeAddMember}
      ${ProposalType.AddBounty}            | ${ProposalVariant.ProposeCreateBounty}
      ${'Default'}                         | ${ProposalVariant.ProposeDefault}
    `(
      'Should return proper proposal variant for proposal type',
      ({ proposalType, proposalVariant }) => {
        expect(getDefaultProposalVariantByType(proposalType)).toEqual(
          proposalVariant
        );
      }
    );
  });

  describe('getProposalTypeByVariant', () => {
    it.each`
      proposalVariant                                             | proposalType
      ${ProposalVariant.ProposeAddMember}                         | ${ProposalType.AddMemberToRole}
      ${ProposalVariant.ProposeCreateBounty}                      | ${ProposalType.AddBounty}
      ${ProposalVariant.ProposeDoneBounty}                        | ${ProposalType.BountyDone}
      ${ProposalVariant.ProposeRemoveMember}                      | ${ProposalType.RemoveMemberFromRole}
      ${ProposalVariant.ProposeTransfer}                          | ${ProposalType.Transfer}
      ${ProposalVariant.ProposeChangeDaoLegalInfo}                | ${ProposalType.ChangeConfig}
      ${ProposalVariant.ProposeChangeDaoName}                     | ${ProposalType.ChangeConfig}
      ${ProposalVariant.ProposeChangeDaoFlag}                     | ${ProposalType.ChangeConfig}
      ${ProposalVariant.ProposeChangeDaoLinks}                    | ${ProposalType.ChangeConfig}
      ${ProposalVariant.ProposeChangeDaoPurpose}                  | ${ProposalType.ChangeConfig}
      ${ProposalVariant.ProposeCustomFunctionCall}                | ${ProposalType.FunctionCall}
      ${ProposalVariant.ProposePoll}                              | ${ProposalType.Vote}
      ${ProposalVariant.ProposeChangeProposalCreationPermissions} | ${ProposalType.ChangePolicy}
      ${ProposalVariant.ProposeChangeProposalVotingPermissions}   | ${ProposalType.ChangePolicy}
      ${ProposalVariant.ProposeChangeVotingPolicy}                | ${ProposalType.ChangePolicy}
      ${ProposalVariant.ProposeChangeBonds}                       | ${ProposalType.ChangePolicy}
      ${ProposalVariant.ProposeCreateGroup}                       | ${ProposalType.ChangePolicy}
      ${ProposalVariant.ProposeTokenDistribution}                 | ${ProposalType.SetStakingContract}
      ${ProposalVariant.ProposeStakingContractDeployment}         | ${ProposalType.SetStakingContract}
      ${ProposalVariant.ProposeCreateToken}                       | ${ProposalType.SetStakingContract}
      ${ProposalVariant.ProposeRemoveUpgradeCode}                 | ${ProposalType.UpgradeSelf}
      ${ProposalVariant.ProposeGetUpgradeCode}                    | ${ProposalType.UpgradeSelf}
      ${ProposalVariant.ProposeUpgradeSelf}                       | ${ProposalType.UpgradeSelf}
      ${'Default'}                                                | ${null}
    `(
      'Should return proper proposal type for proposal variant',
      ({ proposalVariant, proposalType }) => {
        expect(getProposalTypeByVariant(proposalVariant)).toEqual(proposalType);
      }
    );
  });
});

'''
'''--- astro_2.0/features/CreateProposal/tests/mocks.ts ---
import { DAO } from 'types/dao';
import { Token } from 'types/token';
import { ProposalType } from 'types/proposal';

export const daoMock = {
  id: 'default-flag-test.sputnikv2.testnet',
  txHash: 'A5HkEoiEuiyPPAR69DH7MFnWfui4mUqnZGjKyGpFjK4h',
  name: 'default-flag-test',
  description: '',
  members: 1,
  daoMembersList: ['alexeysputnik.testnet'],
  proposals: 0,
  activeProposalsCount: 0,
  totalProposalsCount: 0,
  totalProposals: 0,
  logo: 'https://sputnik-dao.s3.eu-central-1.amazonaws.com/default.png',
  flagCover:
    'https://sputnik-dao.s3.eu-central-1.amazonaws.com/U1KVTf5ctss2feAebXooI',
  flagLogo: '',
  funds: '97.30',
  totalDaoFunds: 97.30000000000001,
  createdAt: '2021-12-26T20:30:46.036Z',
  groups: [
    {
      members: ['alexeysputnik.testnet'],
      name: 'Everyone',
      permissions: [
        '*:VoteReject',
        '*:VoteRemove',
        '*:VoteApprove',
        '*:AddProposal',
        '*:Finalize',
      ],
      votePolicy: {},
      slug: 'Everyone',
    },
  ],
  policy: {
    isArchived: false,
    createdAt: '2021-12-26T20:30:46.036Z',
    updatedAt: '2021-12-26T20:30:46.036Z',
    daoId: 'default-flag-test.sputnikv2.testnet',
    proposalBond: '100000000000000000000000',
    bountyBond: '100000000000000000000000',
    proposalPeriod: '604800000000000',
    bountyForgivenessPeriod: '604800000000000',
    defaultVotePolicy: {
      weightKind: 'RoleWeight',
      quorum: '0',
      kind: 'Ratio',
      ratio: [1, 2],
    },
    roles: [
      {
        isArchived: false,
        createdAt: '2021-12-26T20:30:46.036Z',
        updatedAt: '2022-01-13T22:39:52.173Z',
        id: 'default-flag-test.sputnikv2.testnet-all',
        name: 'all',
        kind: 'Everyone',
        balance: null,
        accountIds: null,
        permissions: ['*:AddProposal'],
        votePolicy: {},
      },
      {
        isArchived: false,
        createdAt: '2021-12-26T20:30:46.036Z',
        updatedAt: '2022-01-13T22:39:52.173Z',
        id: 'default-flag-test.sputnikv2.testnet-Everyone',
        name: 'Everyone',
        kind: 'Group',
        balance: null,
        accountIds: ['alexeysputnik.testnet'],
        permissions: [
          '*:VoteReject',
          '*:VoteRemove',
          '*:VoteApprove',
          '*:AddProposal',
          '*:Finalize',
        ],
        votePolicy: {},
      },
    ],
  },
  links: [],
  displayName: 'Default Flag Test',
  lastProposalId: 0,
  legal: {
    legalStatus: '',
    legalLink: '',
  },
} as unknown as DAO;

export const tokens = {
  NEAR: {
    createdAt: '2021-12-07T19:15:52.793Z',
    transactionHash: null,
    updateTransactionHash: null,
    createTimestamp: null,
    updateTimestamp: '1639053338980000000',
    id: 'NEAR',
    ownerId: '',
    totalSupply: '',
    decimals: 24,
    icon: 'customIcon',
    name: null,
    reference: null,
    referenceHash: null,
    spec: null,
    symbol: 'NEAR',
    price: '10.68',
    balance: '5.1002',
    tokenId: '',
  },
  BIBA: {
    createdAt: '2021-12-07T19:15:52.793Z',
    transactionHash: null,
    updateTransactionHash: null,
    createTimestamp: null,
    updateTimestamp: '1639053338980000000',
    id: 'BIBA',
    ownerId: '',
    totalSupply: '',
    decimals: 24,
    icon: 'customIcon',
    name: null,
    reference: null,
    referenceHash: null,
    spec: null,
    symbol: 'BIBA',
    price: '10.68',
    balance: '5.1002',
    tokenId: '',
  },
} as unknown as Record<string, Token>;

const propPerms = {
  [ProposalType.ChangePolicy]: true,
  [ProposalType.ChangeConfig]: true,
  [ProposalType.AddBounty]: true,
  [ProposalType.Transfer]: true,
  [ProposalType.Vote]: true,
  [ProposalType.RemoveMemberFromRole]: true,
  [ProposalType.AddMemberToRole]: true,
  [ProposalType.AddMemberToRole]: true,
  [ProposalType.FunctionCall]: true,
  [ProposalType.UpgradeRemote]: true,
  [ProposalType.UpgradeSelf]: true,
  [ProposalType.SetStakingContract]: true,
  [ProposalType.BountyDone]: true,
};

export const permissions = {
  isCanCreateProposals: true,
  isCanCreatePolicyProposals: true,
  allowedProposalsToCreate: {
    ...propPerms,
  },
  allowedProposalsToVote: {
    ...propPerms,
  },
};

'''
'''--- astro_2.0/features/CreateProposal/types.ts ---
import { DeadlineUnit } from 'types/bounties';

type ExternalLink = {
  id: string;
  url: string;
};

export interface LinksFormData {
  links: ExternalLink[];
  details: '';
  externalUrl: '';
}

export interface BondsAndDeadlinesData {
  createProposalBond: number;
  proposalExpireTime: number;
  claimBountyBond: number;
  unclaimBountyTime: number;
  details: string;
  externalUrl: string;
}

export type CreateBountyInput = {
  token: string;
  amount: number;
  details: string;
  externalUrl: string;
  slots: number;
  deadlineThreshold: number;
  deadlineUnit: DeadlineUnit;
};

export type Member = {
  name: string;
  value: number;
};

export type TokenDistributionGroup = {
  name: string;
  isCustom: boolean;
  groupTotal: string;
  members?: Member[];
};

export interface TokenDistributionInput {
  groups: TokenDistributionGroup[];
}

export interface CreateTokenInput {
  details: string;
  externalUrl: string;
  tokenName: string;
  totalSupply: string;
  tokenImage: '';
}

export type CreateProposalAction = 'createGovernanceToken';

'''
'''--- astro_2.0/features/DaoDashboard/DaoPurpose/index.ts ---
export * from './DaoPurpose';

'''
'''--- astro_2.0/features/DaoDashboard/components/DashboardChart/components/ChartLegend/index.ts ---
export * from './ChartLegend';

'''
'''--- astro_2.0/features/DaoDashboard/components/DashboardChart/helpers.ts ---
import { TFunction } from 'next-i18next';
import {
  FlowTabs,
  GeneralInfoTabs,
  GovernanceTabs,
  TokensTabs,
  TvlTabs,
  UsersAndActivityTabs,
} from 'astro_2.0/features/Discover/constants';

export function getChartTitles(
  activeView: string | undefined,
  t: TFunction
): string[] {
  switch (activeView) {
    case 'BOUNTIES': {
      return [t('daoDashboard.bounties')];
    }
    case 'DAO_FUNDS': {
      return [t('daoDashboard.daoFunds')];
    }
    case 'NFTS': {
      return [t('daoDashboard.nfts')];
    }
    case 'PROPOSALS': {
      return [
        t('daoDashboard.activeProposals'),
        t('daoDashboard.proposalsInTotal'),
      ];
    }
    case GeneralInfoTabs.ACTIVE_DAOS: {
      return [t('discover.activeDaos')];
    }
    case UsersAndActivityTabs.NUMBER_OF_INTERACTIONS: {
      return [t('discover.numberOfInteractions')];
    }
    case UsersAndActivityTabs.USERS_MEMBERS_OF_DAO: {
      return [t('discover.usersMembersOfDao')];
    }
    case UsersAndActivityTabs.ALL_USERS_ON_PLATFORM: {
      return [t('discover.allUsersOnAPlatform')];
    }
    case UsersAndActivityTabs.ALL_USERS_PER_DAO: {
      return [t('discover.allUsersPerDao')];
    }
    case UsersAndActivityTabs.AVERAGE_NUMBER_OF_USERS_PER_DAO: {
      return [t('discover.averageNumberOfUsersPerDao')];
    }
    case UsersAndActivityTabs.AVERAGE_NUMBER_OF_INTERACTIONS_PER_DAO: {
      return [t('discover.averageNumberOfInteractionsPerDao')];
    }
    case GovernanceTabs.VOTE_THROUGH_RATE: {
      return [t('discover.voteThroughRate')];
    }
    case GovernanceTabs.NUMBER_OF_PROPOSALS: {
      return [t('discover.numberOfProposals')];
    }
    case FlowTabs.TOTAL_IN: {
      return [t('discover.totalIn')];
    }
    case FlowTabs.TOTAL_OUT: {
      return [t('discover.totalOut')];
    }
    case FlowTabs.INCOMING_TRANSACTIONS: {
      return [t('discover.incomingTransactions')];
    }
    case FlowTabs.OUTGOING_TRANSACTIONS: {
      return [t('discover.outgoingTransactions')];
    }
    case TvlTabs.PLATFORM_TVL: {
      return [t('discover.platformTvl')];
    }
    case TvlTabs.VL_IN_BOUNTIES: {
      return [t('discover.vlInBounties')];
    }
    case TvlTabs.VL_OF_BOUNTIES: {
      return [t('discover.vlOfBounties')];
    }
    case TvlTabs.NUMBER_OF_BOUNTIES: {
      return [t('discover.numberOfBounties')];
    }
    case TvlTabs.TVL: {
      return [t('discover.tvl')];
    }
    case TokensTabs.NUMBER_OF_FTS: {
      return [t('discover.numberOfFts')];
    }
    case TokensTabs.VL_OF_FTS: {
      return [t('discover.vlOfFts')];
    }
    case TokensTabs.NUMBER_OF_NFTS: {
      return [t('discover.numberOfNfts')];
    }
    default: {
      return [t('activity')];
    }
  }
}

'''
'''--- astro_2.0/features/DaoDashboard/components/DashboardChart/index.ts ---
export * from './DashboardChart';

'''
'''--- astro_2.0/features/DaoDashboard/components/StatCard/index.ts ---
export * from './StatCard';

'''
'''--- astro_2.0/features/DaoDashboard/components/StatChart/index.ts ---
export * from './StatChart';

'''
'''--- astro_2.0/features/DaoDashboard/components/StatPanel/index.ts ---
export * from './StatPanel';

'''
'''--- astro_2.0/features/DaoDashboard/hooks.ts ---
import { useCallback, useEffect, useState } from 'react';
import { useRouter } from 'next/router';

import { ChartDataElement } from 'components/AreaChartRenderer/types';
import {
  DaoDashboardData,
  DashboardView,
} from 'astro_2.0/features/DaoDashboard/types';

import { SputnikHttpService } from 'services/sputnik';

type DaoDasboardFilteredData = {
  chartData: ChartDataElement[] | null;
  dashboardData: DaoDashboardData;
  toggleView: (val: DashboardView) => void;
  activeView: DashboardView;
  loading: boolean;
};

export function useDaoDashboardData(): DaoDasboardFilteredData {
  const router = useRouter();
  const daoId = router.query.dao as string;
  const [activeView, setActiveView] = useState<DashboardView>('DAO_FUNDS');
  const [chartData, setChartData] = useState<ChartDataElement[] | null>(null);
  const [dashboardData, setDashboardData] = useState<DaoDashboardData>({});
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    setLoading(true);
    Promise.allSettled([
      SputnikHttpService.getDaoStatsState(daoId),
      SputnikHttpService.getDaoStatsFunds(daoId),
    ])
      .then(res => {
        const [state, funds] = res;
        const newDashboardData: DaoDashboardData = {};

        if (state && state.status === 'fulfilled') {
          newDashboardData.state = state.value || undefined;
        }

        if (funds.status === 'fulfilled') {
          const newChartData = funds.value;

          newDashboardData.funds = funds.value;
          setChartData(newChartData);
        }

        setDashboardData(newDashboardData);
        setLoading(false);
      })
      .catch(() => {
        setLoading(false);
      });
  }, [daoId]);

  const toggleView = useCallback(
    async view => {
      setLoading(true);

      let data;

      switch (view) {
        case 'PROPOSALS': {
          data = await SputnikHttpService.getDaoStatsProposals(daoId);
          break;
        }
        case 'NFTS': {
          data = await SputnikHttpService.getDaoStatsNfts(daoId);
          break;
        }
        case 'BOUNTIES': {
          data = await SputnikHttpService.getDaoStatsBounties(daoId);
          break;
        }
        case 'DAO_FUNDS':
        default: {
          data = await SputnikHttpService.getDaoStatsFunds(daoId);
        }
      }

      if (data) {
        setChartData(data);
        setActiveView(view);
      }

      setLoading(false);
    },
    [daoId]
  );

  return {
    chartData,
    dashboardData,
    toggleView,
    activeView,
    loading,
  };
}

'''
'''--- astro_2.0/features/DaoDashboard/index.ts ---
export * from './DaoDashboard';

'''
'''--- astro_2.0/features/DaoDashboard/tests/mock.ts ---
export const chartData = [
  {
    x: '2022-01-11T23:55:03.310Z',
    y: 87.85,
  },
  {
    x: '2022-01-12T23:55:04.677Z',
    y: 97.75,
  },
  {
    x: '2022-01-13T23:55:05.705Z',
    y: 101.44999999999999,
  },
  {
    x: '2022-01-14T23:55:05.175Z',
    y: 96.95,
  },
  {
    x: '2022-01-15T23:55:04.963Z',
    y: 100.1,
  },
];

export const dashboardData = {
  state: {
    daoId: 'legaldao.sputnikv2.testnet',
    timestamp: 1648757081869,
    totalDaoFunds: {
      value: 66.10000000000001,
      growth: -6.43,
    },
    totalProposalCount: {
      value: 2,
      growth: 0,
    },
    activeProposalCount: {
      value: 0,
      growth: 0,
    },
    bountyCount: {
      value: 0,
      growth: 0,
    },
    nftCount: {
      value: 0,
      growth: 0,
    },
  },
  funds: chartData,
};

'''
'''--- astro_2.0/features/DaoDashboard/types.ts ---
import { ChartDataElement } from 'components/AreaChartRenderer/types';
import { DaoStatsState } from 'types/daoStats';

export type StatData = {
  count: number;
  growth: number;
};

export type DaoDashboardData = {
  state?: DaoStatsState;
  funds?: ChartDataElement[];
  bounties?: ChartDataElement[];
  nfts?: ChartDataElement[];
  proposals?: ChartDataElement[];
};

export type DashboardView = 'DAO_FUNDS' | 'BOUNTIES' | 'NFTS' | 'PROPOSALS';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/CloneDaoWarning/components/ConfirmDismissModal/index.ts ---
export * from './ConfirmDismissModal';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/CloneDaoWarning/components/WarningRenderer/index.ts ---
export * from './WarningRenderer';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/CloneDaoWarning/helpers.ts ---
import { ProposalFeedItem, ProposalType } from 'types/proposal';
import { DAO } from 'types/dao';
import { Token } from 'types/token';

export function extractNewDaoName(proposal: ProposalFeedItem): string {
  if (proposal.kind.type === ProposalType.FunctionCall) {
    try {
      const { kind } = proposal;
      const data = kind.actions[0];

      const json = JSON.parse(
        Buffer.from(data.args, 'base64').toString('utf-8')
      );

      return json?.name ?? '';
    } catch (e) {
      return '';
    }
  }

  return '';
}

export function isActiveUserCouncil(dao: DAO, acoountId: string): boolean {
  if (!dao || !acoountId) {
    return false;
  }

  const { roles } = dao.policy;

  const councilRole = roles.find(role => role.name.toLowerCase() === 'council');

  if (councilRole && councilRole.accountIds?.includes(acoountId)) {
    return true;
  }

  return false;
}

export function hasAvailableFunds(tokens: Record<string, Token>): boolean {
  const tokensOptions = Object.values(tokens);

  let hasFunds = false;

  tokensOptions.forEach(token => {
    const balance = Number(token.balance);

    if (token.symbol === 'NEAR' && balance > 7) {
      hasFunds = true;
    } else if (token.symbol !== 'NEAR' && balance > 0) {
      hasFunds = true;
    }
  });

  return hasFunds;
}

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/CloneDaoWarning/hooks.ts ---
import { useWalletContext } from 'context/WalletContext';
import { useState } from 'react';
import { useAsyncFn, useMount } from 'react-use';
import { YOKTO_NEAR } from 'services/sputnik/constants';

const STORAGE_PRICE_PER_BYTE = 10_000_000_000_000_000_000;

export function useAccountState(): number | null {
  const { nearService } = useWalletContext();
  const [storagePrice, setStoragePrice] = useState<number | null>(null);

  const [, getState] = useAsyncFn(async () => {
    const accountId = await nearService?.getAccountId();

    if (accountId && nearService) {
      const state = await nearService.viewAccount(accountId);
      const { storage_usage: storageUsage } = state;

      const nearPrice = (STORAGE_PRICE_PER_BYTE * storageUsage) / YOKTO_NEAR;

      setStoragePrice(nearPrice);
    }
  }, []);

  useMount(() => getState());

  return storagePrice;
}

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/CloneDaoWarning/index.ts ---
export * from './CloneDaoWarning';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/DaoHeaderContent/index.ts ---
export * from './DaoHeaderContent';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/DaoLetterHeadSection/index.ts ---
export * from './DaoLetterHeadSection';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/DaoLinks/components/DaoLink/index.ts ---
export * from './DaoLink';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/DaoLinks/components/MoreLinksModal/index.ts ---
export * from './MoreLinksModal';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/DaoLinks/components/ShowMoreLinks/index.ts ---
export * from './ShowMoreLinks';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/DaoLinks/index.ts ---
export * from './DaoLinks';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/DaoLogo/index.ts ---
export * from './DaoLogo';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/DaoSocialLinks/index.ts ---
export * from './DaoSocialLinks';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/DepositToDaoForm/components/DepositButton/index.ts ---
export * from './DepositButton';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/DepositToDaoForm/components/DepositInput/index.ts ---
export * from './DepositInput';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/DepositToDaoForm/index.ts ---
export * from './DepositToDaoForm';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/FollowButton/index.ts ---
export * from './FollowButton';

'''
'''--- astro_2.0/features/DaoDashboardHeader/components/JoinDaoButton/index.ts ---
export * from './JoinDaoButton';

'''
'''--- astro_2.0/features/DaoDashboardHeader/hooks.ts ---
import {
  useCheckDaoUpgrade,
  useUpgradeStatus,
} from 'astro_2.0/features/pages/nestedDaoPagesContent/DaoVersionPageContent/hooks';
import { ProposalType } from 'types/proposal';
import { UserPermissions } from 'types/context';
import { DAO } from 'types/dao';

export function useDaoUpgradeStatus(
  dao: DAO,
  userPermissions: UserPermissions
): {
  isUpgradeAvailable: boolean;
  isUpgradeInProgress: boolean;
} {
  const { version } = useCheckDaoUpgrade(dao);
  const { upgradeStatus } = useUpgradeStatus(dao.id);
  const isUpgradeAvailable =
    !!version &&
    userPermissions.isCanCreateProposals &&
    userPermissions.allowedProposalsToCreate[ProposalType.UpgradeSelf];

  const isUpgradeInProgress =
    upgradeStatus?.upgradeStep !== null &&
    upgradeStatus?.upgradeStep !== undefined;

  return {
    isUpgradeAvailable,
    isUpgradeInProgress,
  };
}

'''
'''--- astro_2.0/features/DaoDashboardHeader/hooks/tests/useJoinDao.spec.ts ---
/* eslint-disable @typescript-eslint/ban-ts-comment */

import { renderHook } from '@testing-library/react-hooks/dom';

import { UserPermissions } from 'types/context';

import { SputnikHttpService } from 'services/sputnik';

import { useWalletContext } from 'context/WalletContext';
import { useJoinDao } from 'astro_2.0/features/DaoDashboardHeader/hooks/useJoinDao';

jest.mock('next/router', () => {
  return {
    useRouter: jest.fn().mockReturnValue({ query: { dao: 'dao' } }),
  };
});

jest.mock('context/WalletContext', () => {
  return {
    useWalletContext: jest.fn(() => ({
      accountId: 'account',
    })),
  };
});

describe('useJoinDao', () => {
  it.skip('Should not show neither button, nor warning', () => {
    // @ts-ignore
    useWalletContext.mockImplementationOnce(() => ({}));

    const { result } = renderHook(() =>
      useJoinDao('', { allowedProposalsToCreate: {} } as UserPermissions, [])
    );

    expect(result.current).toEqual({ showButton: false, showWarning: false });
  });

  it.skip('Should show warning', async () => {
    SputnikHttpService.getJoiningDaoProposal = () => Promise.resolve(true);

    const { result } = await renderHook(() =>
      useJoinDao(
        '',
        {
          isCanCreateProposals: true,
          allowedProposalsToCreate: {},
        } as UserPermissions,
        []
      )
    );

    expect(result.current).toEqual({ showButton: false, showWarning: true });
  });

  it.skip('Should show button', async () => {
    SputnikHttpService.getJoiningDaoProposal = () => Promise.resolve(false);

    const { result } = await renderHook(() =>
      useJoinDao(
        '',
        {
          isCanCreateProposals: true,
          allowedProposalsToCreate: {},
        } as UserPermissions,
        []
      )
    );

    expect(result.current).toEqual({ showButton: true, showWarning: false });
  });
});

'''
'''--- astro_2.0/features/DaoDashboardHeader/hooks/useJoinDao.ts ---
import { useMemo } from 'react';
import { SputnikHttpService } from 'services/sputnik';
import { UserPermissions } from 'types/context';
import { useWalletContext } from 'context/WalletContext';
import { useJoiningDaoProposals } from 'services/ApiService/hooks/useJoiningDaoProposals';
import { ProposalType } from 'types/proposal';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { useAsync } from 'react-use';

type JoinDaoState = {
  showButton: boolean;
  showWarning: boolean;
};

function skipApiDataFetch(
  useOpenSearchDataApi: boolean | undefined,
  userPermissions: UserPermissions,
  daoMembers: string[],
  accountId: string
) {
  const isDataFetchedFromOpenSeacrh =
    useOpenSearchDataApi || useOpenSearchDataApi === undefined;
  const isUserNotAllowedToCreateProposal =
    !userPermissions.allowedProposalsToCreate[ProposalType.AddMemberToRole] ||
    !userPermissions.isCanCreateProposals;
  const isAlreadyADaoMember = daoMembers.includes(accountId);

  return (
    isDataFetchedFromOpenSeacrh ||
    isUserNotAllowedToCreateProposal ||
    isAlreadyADaoMember ||
    !accountId
  );
}

export function useJoinDao(
  daoId: string,
  userPermissions: UserPermissions,
  daoMembers: string[]
): JoinDaoState {
  const { useOpenSearchDataApi } = useFlags();
  const { accountId } = useWalletContext();
  const hasPendingApprovalProposals = useJoiningDaoProposals();

  const { value } = useAsync(async () => {
    if (
      skipApiDataFetch(
        useOpenSearchDataApi,
        userPermissions,
        daoMembers,
        accountId
      )
    ) {
      return false;
    }

    return SputnikHttpService.getJoiningDaoProposal({
      daoId,
      accountId,
    });
  }, [
    accountId,
    daoId,
    daoMembers,
    userPermissions.allowedProposalsToCreate,
    userPermissions.isCanCreateProposals,
  ]);

  const hasPending = value || hasPendingApprovalProposals;

  return useMemo(() => {
    if (hasPending) {
      return {
        showButton: false,
        showWarning: true,
      };
    }

    const isUserAllowedToCreateProposal =
      userPermissions.allowedProposalsToCreate[ProposalType.AddMemberToRole] &&
      userPermissions.isCanCreateProposals;

    if (
      isUserAllowedToCreateProposal &&
      !daoMembers.includes(accountId) &&
      accountId
    ) {
      return {
        showButton: true,
        showWarning: false,
      };
    }

    return {
      showButton: false,
      showWarning: false,
    };
  }, [
    accountId,
    daoMembers,
    hasPending,
    userPermissions.allowedProposalsToCreate,
    userPermissions.isCanCreateProposals,
  ]);
}

'''
'''--- astro_2.0/features/DaoDashboardHeader/index.ts ---
export * from './DaoDashboardHeader';

'''
'''--- astro_2.0/features/DaoDashboardHeader/tests/mocks.ts ---
import { DAO } from 'types/dao';

export const daoDescription = 'DAO description';

export const dao = {
  id: 'daoId',
  displayName: 'displayName',
  daoMembersList: ['DM1', 'DM2'],
  flagCover: 'flagCover',
  flagLogo: 'flagLogo',
  members: 2,
  description: daoDescription,
  links: ['DL1', 'DL2'],
  daoVersion: {
    version: [2, 0],
    hash: 'qwerty',
  },
  policy: {
    roles: [],
  },
} as unknown as DAO;

'''
'''--- astro_2.0/features/DaoFeatureInfo/index.ts ---
export * from './DaoFeatureInfo';

'''
'''--- astro_2.0/features/DaoGovernance/components/DaoSetting/index.ts ---
export * from './DaoSetting';

'''
'''--- astro_2.0/features/DaoGovernance/components/DaoSettingFlowButton/index.ts ---
export * from './DaoSettingFlowButton';

'''
'''--- astro_2.0/features/DaoGovernance/components/SettingsCard/index.ts ---
export * from './SettingsCard';

'''
'''--- astro_2.0/features/DaoGovernance/components/SettingsFilterToggle/index.ts ---
export * from './SettingsFilterToggle';

'''
'''--- astro_2.0/features/DaoGovernance/helper.ts ---
import { formatDistance } from 'date-fns';

export const nanosToDays = (nanos: string): string[] => {
  const millis = Math.round(Number(nanos) / 1000000);

  return formatDistance(millis, 0, { addSuffix: false }).split(' ');
};

'''
'''--- astro_2.0/features/DaoGovernance/index.ts ---
export * from './components/DaoSetting';
export * from './components/SettingsCard';

'''
'''--- astro_2.0/features/DaoGovernance/tests/helper.spec.ts ---
import { nanosToDays } from 'astro_2.0/features/DaoGovernance/helper';

describe('DaoGovernance helpers', () => {
  it('Should convert nanoseconds to days', () => {
    const secondsInDay = '86400';

    expect(nanosToDays(`${secondsInDay}000000000`)).toEqual(['1', 'day']);
  });
});

'''
'''--- astro_2.0/features/Daos/index.ts ---
export * from './Daos';

'''
'''--- astro_2.0/features/Discover/components/ChartInterval/index.ts ---
export * from './ChartInterval';

'''
'''--- astro_2.0/features/Discover/components/ChartRenderer/index.ts ---
export * from './ChartRenderer';

'''
'''--- astro_2.0/features/Discover/components/ContentPanel/index.ts ---
export * from './ContentPanel';

'''
'''--- astro_2.0/features/Discover/components/ControlTabs/index.ts ---
export * from './ControlTabs';

'''
'''--- astro_2.0/features/Discover/components/DaosTopList/components/TopListItem/index.ts ---
export * from './TopListItem';

'''
'''--- astro_2.0/features/Discover/components/DaosTopList/index.ts ---
export * from './DaosTopList';

'''
'''--- astro_2.0/features/Discover/components/Flow/index.ts ---
export * from './Flow';

'''
'''--- astro_2.0/features/Discover/components/GeneralInfo/index.ts ---
export * from './GeneralInfo';

'''
'''--- astro_2.0/features/Discover/components/Governance/index.ts ---
export * from './Governance';

'''
'''--- astro_2.0/features/Discover/components/SelectedDaoDetails/index.ts ---
export * from './SelectedDaoDetails';

'''
'''--- astro_2.0/features/Discover/components/SelectedDaoDetails/tests/mock.ts ---
import { DAO } from 'types/dao';

export const daoMock = {
  id: 'default-flag-test.sputnikv2.testnet',
  txHash: 'A5HkEoiEuiyPPAR69DH7MFnWfui4mUqnZGjKyGpFjK4h',
  name: 'default-flag-test',
  description: '',
  members: 1,
  daoMembersList: ['alexeysputnik.testnet'],
  proposals: 0,
  activeProposalsCount: 0,
  totalProposalsCount: 0,
  totalProposals: 0,
  logo: 'https://sputnik-dao.s3.eu-central-1.amazonaws.com/default.png',
  flagCover:
    'https://sputnik-dao.s3.eu-central-1.amazonaws.com/U1KVTf5ctss2feAebXooI',
  flagLogo: '',
  funds: '97.30',
  totalDaoFunds: 97.30000000000001,
  createdAt: '2021-12-26T20:30:46.036Z',
  groups: [
    {
      members: ['alexeysputnik.testnet'],
      name: 'Everyone',
      permissions: [
        '*:VoteReject',
        '*:VoteRemove',
        '*:VoteApprove',
        '*:AddProposal',
        '*:Finalize',
      ],
      votePolicy: {},
      slug: 'Everyone',
    },
  ],
  policy: {
    isArchived: false,
    createdAt: '2021-12-26T20:30:46.036Z',
    updatedAt: '2021-12-26T20:30:46.036Z',
    daoId: 'default-flag-test.sputnikv2.testnet',
    proposalBond: '100000000000000000000000',
    bountyBond: '100000000000000000000000',
    proposalPeriod: '604800000000000',
    bountyForgivenessPeriod: '604800000000000',
    defaultVotePolicy: {
      weightKind: 'RoleWeight',
      quorum: '0',
      kind: 'Ratio',
      ratio: [1, 2],
    },
    roles: [
      {
        isArchived: false,
        createdAt: '2021-12-26T20:30:46.036Z',
        updatedAt: '2022-01-13T22:39:52.173Z',
        id: 'default-flag-test.sputnikv2.testnet-all',
        name: 'all',
        kind: 'Everyone',
        balance: null,
        accountIds: null,
        permissions: ['*:AddProposal'],
        votePolicy: {},
      },
      {
        isArchived: false,
        createdAt: '2021-12-26T20:30:46.036Z',
        updatedAt: '2022-01-13T22:39:52.173Z',
        id: 'default-flag-test.sputnikv2.testnet-Everyone',
        name: 'Everyone',
        kind: 'Group',
        balance: null,
        accountIds: ['alexeysputnik.testnet'],
        permissions: [
          '*:VoteReject',
          '*:VoteRemove',
          '*:VoteApprove',
          '*:AddProposal',
          '*:Finalize',
        ],
        votePolicy: {},
      },
    ],
  },
  links: [],
  displayName: 'Default Flag Test',
  lastProposalId: 0,
  legal: {
    legalStatus: '',
    legalLink: '',
  },
} as unknown as DAO;

'''
'''--- astro_2.0/features/Discover/components/Tokens/index.ts ---
export * from './Tokens';

'''
'''--- astro_2.0/features/Discover/components/TopicsFilter/index.ts ---
export * from './TopicsFilter';

'''
'''--- astro_2.0/features/Discover/components/Tvl/index.ts ---
export * from './Tvl';

'''
'''--- astro_2.0/features/Discover/components/UsersAndActivity/index.ts ---
export * from './UsersAndActivity';

'''
'''--- astro_2.0/features/Discover/constants.ts ---
import { Interval } from 'services/DaoStatsService/types';

export const CONTRACT = { contract: 'astro' };

export enum DaoStatsTopics {
  GENERAL_INFO = 'generalInfo',
  USERS_AND_ACTIVITY = 'usersAndActivity',
  GOVERNANCE = 'governance',
  FLOW = 'flow',
  TVL = 'tvl',
  TOKENS = 'tokens',
}

export enum GeneralInfoTabs {
  ACTIVITY = 'activity',
  ACTIVE_DAOS = 'activeDaos',
}

export enum UsersAndActivityTabs {
  ACTIVE_USERS = 'activeUsers',
  ALL_USERS_ON_PLATFORM = 'allUsersOnPlatform',
  USERS_MEMBERS_OF_DAO = 'usersMembersOfDao',
  AVERAGE_NUMBER_OF_USERS_PER_DAO = 'averageNumberOfUsersPerDao',
  NUMBER_OF_INTERACTIONS = 'numberOfInteractions',
  AVERAGE_NUMBER_OF_INTERACTIONS_PER_DAO = 'averageNumberOfInteractionsPerDao',
  ALL_USERS_PER_DAO = 'allUsersPerDao',
}

export enum GovernanceTabs {
  NUMBER_OF_PROPOSALS = 'numberOfProposals',
  VOTE_THROUGH_RATE = 'voteThroughRate',
  ACTIVE_PROPOSALS = 'activeProposals',
  ACTIVE_VOTES = 'activeVotes',
}

export enum FlowTabs {
  TOTAL_IN = 'totalIn',
  TOTAL_OUT = 'totalOut',
  INCOMING_TRANSACTIONS = 'incomingTransactions',
  OUTGOING_TRANSACTIONS = 'outgoingTransactions',
}

export enum TvlTabs {
  PLATFORM_TVL = 'platformTvl',
  VL_IN_BOUNTIES = 'vlInBounties',
  NUMBER_OF_BOUNTIES = 'numberOfBounties',
  VL_OF_BOUNTIES = 'vlOfBounties',
  TVL = 'tvl',
}

export enum TokensTabs {
  NUMBER_OF_FTS = 'numberOfFts',
  VL_OF_FTS = 'vlOfFts',
  NUMBER_OF_NFTS = 'numberOfNfts',
}

export const intervalOptions = [
  { label: 'daily', value: Interval.DAY },
  { label: 'weekly', value: Interval.WEEK },
  { label: 'monthly', value: Interval.MONTH },
];

'''
'''--- astro_2.0/features/Discover/helpers.ts ---
/* istanbul ignore file */

import {
  DaoStatsTopics,
  FlowTabs,
  GeneralInfoTabs,
  GovernanceTabs,
  TokensTabs,
  TvlTabs,
  UsersAndActivityTabs,
} from 'astro_2.0/features/Discover/constants';

export function getValueLabel(topic: string, view: string): string {
  switch (topic) {
    case DaoStatsTopics.GENERAL_INFO: {
      switch (view) {
        case GeneralInfoTabs.ACTIVE_DAOS: {
          return 'numberOfProposals';
        }
        default: {
          return '-';
        }
      }
    }
    case DaoStatsTopics.USERS_AND_ACTIVITY: {
      switch (view) {
        case UsersAndActivityTabs.ALL_USERS_ON_PLATFORM: {
          return 'users';
        }
        case UsersAndActivityTabs.USERS_MEMBERS_OF_DAO: {
          return 'members';
        }
        case UsersAndActivityTabs.NUMBER_OF_INTERACTIONS: {
          return 'numberOfInteractions';
        }
        default: {
          return '-';
        }
      }
    }
    case DaoStatsTopics.GOVERNANCE: {
      switch (view) {
        case GovernanceTabs.NUMBER_OF_PROPOSALS: {
          return 'numberOfProposals';
        }
        case GovernanceTabs.VOTE_THROUGH_RATE: {
          return 'voteThroughRate';
        }
        default: {
          return '-';
        }
      }
    }
    case DaoStatsTopics.FLOW: {
      switch (view) {
        case FlowTabs.TOTAL_IN: {
          return 'totalIn';
        }
        case FlowTabs.TOTAL_OUT: {
          return 'totalOut';
        }
        case FlowTabs.INCOMING_TRANSACTIONS: {
          return 'incomingTransactions';
        }
        case FlowTabs.OUTGOING_TRANSACTIONS: {
          return 'outgoingTransactions';
        }
        default: {
          return '-';
        }
      }
    }
    case DaoStatsTopics.TVL: {
      switch (view) {
        case TvlTabs.PLATFORM_TVL: {
          return 'platformTvl';
        }
        case TvlTabs.VL_IN_BOUNTIES: {
          return 'vlInBountiesGrants';
        }
        default: {
          return '-';
        }
      }
    }
    case DaoStatsTopics.TOKENS: {
      switch (view) {
        case TokensTabs.NUMBER_OF_FTS: {
          return 'numberOfFts';
        }
        case TokensTabs.VL_OF_FTS: {
          return 'vlOfFts';
        }
        case TokensTabs.NUMBER_OF_NFTS: {
          return 'numberOfNfts';
        }
        default: {
          return '-';
        }
      }
    }
    default: {
      return '-';
    }
  }
}

'''
'''--- astro_2.0/features/Discover/hooks.ts ---
import { PaginationResponse } from 'types/api';
import {
  Dispatch,
  SetStateAction,
  useCallback,
  useEffect,
  useRef,
  useState,
} from 'react';
import axios, { CancelTokenSource } from 'axios';
import { useAsyncFn } from 'react-use';
import { SputnikHttpService } from 'services/sputnik';
import { DaoFeedItem } from 'types/dao';
import useQuery from 'hooks/useQuery';
import { ChartDataElement } from 'components/AreaChartRenderer/types';

import { LeaderboardData, TControlTab } from './types';

export function useDaoSearch(): {
  handleSearch: (
    val: string
  ) => Promise<PaginationResponse<DaoFeedItem[]> | null>;
  loading: boolean;
} {
  const cancelTokenRef = useRef<CancelTokenSource | null>(null);

  const [{ loading }, handleSearch] = useAsyncFn(async query => {
    if (cancelTokenRef.current) {
      cancelTokenRef.current?.cancel('Cancelled by new req');
    }

    const { CancelToken } = axios;
    const source = CancelToken.source();

    cancelTokenRef.current = source;

    return SputnikHttpService.findDaoByName({
      query,
      cancelToken: source.token,
    });
  }, []);

  return {
    handleSearch,
    loading,
  };
}

type DiscoveryState = {
  resetData: (id: string) => void;
  offset: number;
  setOffset: Dispatch<SetStateAction<number>>;
  total: number;
  setTotal: Dispatch<SetStateAction<number>>;
  leaderboardData: LeaderboardData[] | null;
  setLeaderboardData: Dispatch<SetStateAction<LeaderboardData[] | null>>;
  chartData: ChartDataElement[] | null;
  setChartData: Dispatch<SetStateAction<ChartDataElement[] | null>>;
  activeView: string;
  setActiveView: Dispatch<SetStateAction<string>>;
};

export const useDiscoveryState = (items: TControlTab[]): DiscoveryState => {
  const { query } = useQuery<{ dao: string }>();
  const [offset, setOffset] = useState(0);
  const [total, setTotal] = useState(0);
  const [leaderboardData, setLeaderboardData] = useState<
    LeaderboardData[] | null
  >(null);
  const [chartData, setChartData] = useState<ChartDataElement[] | null>(null);
  const [activeView, setActiveView] = useState(items[0].id);

  const resetData = useCallback(() => {
    setOffset(0);
    setTotal(0);
    setLeaderboardData(null);
    setChartData(null);
  }, []);

  useEffect(() => {
    resetData();
  }, [query.dao, resetData]);

  return {
    resetData,
    offset,
    setOffset,
    total,
    setTotal,
    leaderboardData,
    setLeaderboardData,
    chartData,
    setChartData,
    activeView,
    setActiveView,
  };
};

'''
'''--- astro_2.0/features/Discover/types.ts ---
import { ReactNode } from 'react';
import { ChartDataElement } from 'components/AreaChartRenderer/types';

export type TControlTab = {
  id: string;
  label: string;
  value: string;
  trend: number;
  icon?: ReactNode;
};

export type TopicValue = {
  count: number;
  growth: number;
};

export type LeaderboardData = {
  activity?: TopicValue;
  dao: string;
  overview: ChartDataElement[];
};

'''
'''--- astro_2.0/features/DraftComments/components/NewComment/index.ts ---
export * from './NewComment';

'''
'''--- astro_2.0/features/DraftComments/helpers.ts ---
import { DAO } from 'types/dao';

export function isCouncilUser(dao: DAO, accountId: string): boolean {
  return (
    dao.groups
      .find(group => group.slug.trim().toLowerCase() === 'council')
      ?.members.includes(accountId) ?? false
  );
}

'''
'''--- astro_2.0/features/DraftComments/index.ts ---
export * from './DraftComments';

'''
'''--- astro_2.0/features/Drafts/components/DraftWrapper/index.ts ---
export * from './DraftWrapper';

'''
'''--- astro_2.0/features/Drafts/components/DraftsProvider/index.ts ---
export * from './DraftsProvider';

'''
'''--- astro_2.0/features/FeatureFlagsProvider/index.ts ---
export * from './FeatureFlagsProvider';

'''
'''--- astro_2.0/features/Feed/index.ts ---
export * from './Feed';

'''
'''--- astro_2.0/features/FeedProposals/index.ts ---
export * from './FeedProposals';

'''
'''--- astro_2.0/features/Groups/components/GroupsList/index.ts ---
export * from './GroupsList';

'''
'''--- astro_2.0/features/Groups/components/index.ts ---
export * from './GroupsList';

'''
'''--- astro_2.0/features/Groups/hooks/tests/useSortMembers.spec.ts ---
/* eslint-disable @typescript-eslint/no-shadow */

import { renderHook } from '@testing-library/react-hooks/dom';

import { Member } from 'types/dao';

import { useSortMembers } from 'astro_2.0/features/Groups/hooks/useSortMembers';

describe('useSortMembers', () => {
  const m1 = {
    id: '1',
    name: 'm1',
    groups: ['gr1', 'gr2'],
    tokens: {
      value: 5,
    },
    votes: 4,
  } as Member;

  const m2 = {
    id: '2',
    name: 'm2',
    groups: ['gr2', 'gr3'],
    tokens: {
      value: 10,
    },
    votes: 2,
  } as Member;

  const m3 = {
    id: '3',
    name: 'm3',
    groups: ['gr2'],
    tokens: {
      value: 12,
    },
    votes: 2,
  } as Member;

  const members = [m1, m2, m3];

  function renderUseSortMembers(
    members: Member[],
    group: string,
    activeSort: string
  ) {
    return renderHook(() =>
      useSortMembers({
        members,
        group,
        activeSort,
      })
    );
  }

  it('Should filter out members that are not in the group', () => {
    const { result } = renderUseSortMembers(members, 'gr1', 'Most active');

    expect(result.current).toEqual([m1]);
  });

  it('Should let all users if group is "all" and sort them by token', () => {
    const { result } = renderUseSortMembers(members, 'all', '# of tokens');

    expect(result.current).toEqual([m3, m2, m1]);
  });

  it('Should properly filter members by group and sort them by votes', () => {
    const { result } = renderUseSortMembers(members, 'gr2', 'Most active');

    expect(result.current).toEqual([m1, m2, m3]);
  });

  it('Should not fail if active sort is not defined', () => {
    const { result } = renderUseSortMembers(members, 'gr2', '');

    expect(result.current).toEqual([m1, m2, m3]);
  });
});

'''
'''--- astro_2.0/features/Groups/hooks/useSortMembers.ts ---
import get from 'lodash/get';
import { useMemo } from 'react';
import { Member } from 'types/dao';

type UseSortMembersParams = {
  members: Member[];
  group: string;
  activeSort: string;
};

export const useSortMembers = ({
  members,
  group,
  activeSort,
}: UseSortMembersParams): Member[] => {
  return useMemo(() => {
    return members
      .filter(
        item =>
          !group ||
          group === 'all' ||
          item.groups
            .map(grp => grp.toLowerCase())
            .includes((group as string).toLowerCase())
      )
      .sort((a, b) => {
        let sortField = '';

        if (activeSort === 'Most active') {
          sortField = 'votes';
        } else if (activeSort === '# of tokens') {
          sortField = 'tokens.value';
        }

        if (get(a, sortField) > get(b, sortField)) {
          return -1;
        }

        if (get(a, sortField) < get(b, sortField)) {
          return 1;
        }

        return 0;
      });
  }, [activeSort, group, members]);
};

'''
'''--- astro_2.0/features/MainLayout/index.ts ---
export * from './MainLayout';

'''
'''--- astro_2.0/features/Notifications/components/NotificationCollapsableSettings/index.ts ---
export * from './NotificationCollapsableSettings';

'''
'''--- astro_2.0/features/Notifications/components/NotificationText/index.ts ---
export * from './NotificationText';

'''
'''--- astro_2.0/features/Notifications/components/Notifications/index.ts ---
export * from './Notifications';

'''
'''--- astro_2.0/features/Notifications/components/PlatformNotificationSettings/index.ts ---
export * from './PlatformNotificationSettings';

'''
'''--- astro_2.0/features/Notifications/hooks.ts ---
import { useCallback, useEffect, useState } from 'react';
import get from 'lodash/get';
import isNil from 'lodash/isNil';
import omitBy from 'lodash/omitBy';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { NotificationsService } from 'services/NotificationsService';
import { useAccountDaos } from 'services/ApiService/hooks/useAccountDaos';
import { useSubscribedDaos } from 'services/ApiService/hooks/useSubscribedDaos';
import { useWalletContext } from 'context/WalletContext';
import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';
import { PaginationResponse } from 'types/api';
import { DaoFeedItem } from 'types/dao';
import { Notification, NotificationDTO } from 'types/notification';
import {
  useAsyncFn,
  useMount,
  useMountedState,
  useUpdateEffect,
} from 'react-use';
import { LIST_LIMIT_DEFAULT } from 'services/sputnik/constants';
import { useSocket } from 'context/SocketContext';
import { useRouter } from 'next/router';
import { SputnikHttpService } from 'services/sputnik';
import { mapNotificationDtoToNotification } from 'services/NotificationsService/mappers/notification';

import { dispatchCustomEvent } from 'utils/dispatchCustomEvent';
import { NOTIFICATIONS_UPDATED } from 'features/notifications/notificationConstants';

import { DAO_RELATED_SETTINGS, PLATFORM_RELATED_SETTINGS } from './helpers';

type UpdateSettingsConfig = {
  daoId?: string | null;
  types?: string[];
  isAllMuted?: boolean;
  mutedUntilTimestamp?: string;
  enableSms?: boolean;
  enableEmail?: boolean;
};

export function useNotificationsSettings(): {
  updateSettings: (config: UpdateSettingsConfig) => void;
} {
  const { accountId, pkAndSignature } = useWalletContext();

  async function getPrevConfig(
    accId: string,
    daoId: string | null | undefined
  ) {
    const daoToGet = daoId ? [daoId] : undefined;
    const prevConfigDTO = await NotificationsService.getNotificationsSettings(
      accId,
      daoToGet
    );

    const { types, isAllMuted, mutedUntilTimestamp, enableSms, enableEmail } =
      get(prevConfigDTO, '0') || {};

    return omitBy(
      {
        types,
        isAllMuted,
        mutedUntilTimestamp,
        enableSms,
        enableEmail,
      },
      isNil
    );
  }

  const updateSettings = useCallback(
    async (config: UpdateSettingsConfig) => {
      try {
        if (!pkAndSignature) {
          return;
        }

        const { publicKey, signature } = pkAndSignature;
        const prevConfig = await getPrevConfig(accountId, config.daoId);

        if (publicKey && signature) {
          await NotificationsService.updateNotificationSettings({
            publicKey,
            signature,
            accountId,
            daoId: null,
            types: [...DAO_RELATED_SETTINGS, ...PLATFORM_RELATED_SETTINGS],
            mutedUntilTimestamp: '0',
            isAllMuted: false,
            enableSms: false,
            enableEmail: false,
            ...prevConfig,
            ...config,
          });
        }
      } catch (err) {
        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          description: err.message,
          lifetime: 20000,
        });
      }
    },
    [accountId, pkAndSignature]
  );

  return {
    updateSettings,
  };
}

export function useNotificationsList(reactOnUpdates?: boolean): {
  notifications: PaginationResponse<Notification[]> | null;
  loadMore: () => void;
  loading: boolean;
  handleRemove: (
    id: string,
    {
      isMuted,
      isRead,
      isArchived,
    }: {
      isMuted: boolean;
      isRead: boolean;
      isArchived: boolean;
    }
  ) => void;
  handleUpdate: (
    id: string,
    {
      isMuted,
      isRead,
      isArchived,
    }: {
      isMuted: boolean;
      isRead: boolean;
      isArchived: boolean;
    }
  ) => void;
  handleUpdateAll: (action: 'READ' | 'ARCHIVE') => void;
} {
  const router = useRouter();
  const { useOpenSearchDataApi } = useFlags();
  const { socket } = useSocket();
  const { accountId, pkAndSignature } = useWalletContext();
  const [notifications, setNotifications] = useState<PaginationResponse<
    Notification[]
  > | null>(null);
  const [accountDaosIds, setAccountDaosIds] = useState<string[]>([]);
  const [subscribedDaosIds, setSubscribedDaosIds] = useState<string[]>([]);
  const [daoIdsLoaded, setDaoIdsLoaded] = useState<boolean>(false);
  const { data: accountDaos } = useAccountDaos();
  const { data: subscribedDaos } = useSubscribedDaos();

  const isMounted = useMountedState();

  const getDaosIds = async () => {
    const showSubscribed = router.query.notyType === 'subscribed';
    const showYourDaos = router.query.notyType === 'yourDaos';

    if (!daoIdsLoaded) {
      if (accountId && useOpenSearchDataApi !== undefined) {
        const [accountDaosResponse, subscribedDaosResponse] =
          await Promise.allSettled([
            useOpenSearchDataApi
              ? Promise.resolve([] as DaoFeedItem[])
              : SputnikHttpService.getAccountDaos(accountId),
            useOpenSearchDataApi
              ? Promise.resolve([] as DaoFeedItem[])
              : SputnikHttpService.getAccountDaoSubscriptions(accountId),
          ]);

        let tmpAccountDaoIds: string[];
        let tmpSubscribedDaoIds: string[];

        if (useOpenSearchDataApi) {
          tmpAccountDaoIds = accountDaos?.map(item => item.id) ?? [];
        } else if (accountDaosResponse.status === 'fulfilled') {
          tmpAccountDaoIds = accountDaosResponse.value.map(item => item.id);
        } else {
          tmpAccountDaoIds = [];
        }

        if (useOpenSearchDataApi) {
          tmpSubscribedDaoIds = subscribedDaos?.map(item => item.id) ?? [];
        } else if (subscribedDaosResponse.status === 'fulfilled') {
          tmpSubscribedDaoIds = subscribedDaosResponse.value.map(
            item => item.id
          );
        } else {
          tmpSubscribedDaoIds = [];
        }

        setAccountDaosIds(tmpAccountDaoIds);
        setSubscribedDaosIds(tmpSubscribedDaoIds);

        setDaoIdsLoaded(true);

        if (showYourDaos && accountDaosIds) {
          return tmpAccountDaoIds;
        }

        if (showSubscribed && subscribedDaosIds) {
          return tmpSubscribedDaoIds;
        }

        return [...tmpAccountDaoIds, ...tmpSubscribedDaoIds];
      }
    }

    if (showYourDaos && accountDaosIds) {
      return accountDaosIds;
    }

    if (showSubscribed && subscribedDaosIds) {
      return subscribedDaosIds;
    }

    return null;
  };

  const [{ loading }, fetchData] = useAsyncFn(
    async (offset?: number) => {
      let accumulatedListData = null;

      const showArchived = router.query.notyType === 'archived';

      const res = await NotificationsService.getNotifications(
        showArchived ?? false,
        accountId,
        {
          offset:
            offset !== undefined ? offset : notifications?.data.length || 0,
          limit: LIST_LIMIT_DEFAULT,
          sort: 'createdAt,DESC',
          daoIds: await getDaosIds(),
        }
      );

      accumulatedListData = {
        ...res,
        data:
          offset !== undefined
            ? res.data
            : [...(notifications?.data || []), ...res.data],
      };

      return accumulatedListData;
    },
    [notifications?.data?.length, router.query, accountId]
  );

  const loadMore = useCallback(
    async (offset?: number) => {
      if (loading) {
        return;
      }

      const newNotificationsData = await fetchData(offset);

      if (isMounted()) {
        setNotifications(newNotificationsData);
      }
    },
    [fetchData, isMounted, loading]
  );

  useMount(() => {
    (() => loadMore())();
  });

  useEffect(() => {
    if (accountId && isMounted() && !daoIdsLoaded) {
      loadMore();
    }
  }, [accountId, daoIdsLoaded, fetchData, isMounted, loadMore]);

  useUpdateEffect(() => {
    loadMore(0);
  }, [router.query.notyType]);

  useEffect(() => {
    if (socket) {
      socket.on('account-notification', (noty: NotificationDTO) => {
        const newNoty = mapNotificationDtoToNotification([noty])[0];

        if (isMounted()) {
          const newData = {
            total: notifications?.total || 0,
            data: notifications?.data ? [newNoty, ...notifications?.data] : [],
          };

          setNotifications(newData);
        }
      });
    }
  }, [fetchData, isMounted, notifications?.data, notifications?.total, socket]);

  const triggerUpdate = useCallback(() => {
    dispatchCustomEvent(NOTIFICATIONS_UPDATED, true);
  }, []);

  const handleUpdates = useCallback(async () => {
    const newNotificationsData = await fetchData(0);

    if (isMounted()) {
      setNotifications(newNotificationsData);
    }
  }, [fetchData, isMounted]);

  useEffect(() => {
    if (reactOnUpdates) {
      document.addEventListener(
        NOTIFICATIONS_UPDATED,
        handleUpdates as EventListener
      );
    }

    return () =>
      document.removeEventListener(
        NOTIFICATIONS_UPDATED,
        handleUpdates as EventListener
      );
  }, [handleUpdates, reactOnUpdates]);

  const handleUpdate = useCallback(
    async (id, { isRead, isMuted, isArchived }) => {
      if (!pkAndSignature) {
        return;
      }

      const { publicKey, signature } = pkAndSignature;

      if (accountId && publicKey && signature && isMounted() && notifications) {
        setNotifications({
          ...notifications,
          data: notifications?.data?.map(item => {
            if (item.id === id) {
              return {
                ...item,
                isRead,
                isMuted,
                isArchived,
              };
            }

            return item;
          }),
        });

        const res = await NotificationsService.updateNotification(id, {
          accountId,
          publicKey,
          signature,
          isRead,
          isMuted,
          isArchived,
        });

        setNotifications({
          ...notifications,
          data: notifications?.data?.map(item => {
            if (item.id === res.id) {
              return res;
            }

            return item;
          }),
        });

        triggerUpdate();
      }
    },
    [accountId, isMounted, notifications, triggerUpdate, pkAndSignature]
  );

  const handleUpdateAll = useCallback(
    async (action: 'READ' | 'ARCHIVE') => {
      if (!pkAndSignature) {
        return;
      }

      const { publicKey, signature } = pkAndSignature;

      if (accountId && publicKey && signature && isMounted()) {
        if (action === 'READ') {
          await NotificationsService.readAllNotifications({
            accountId,
            publicKey,
            signature,
          });
          triggerUpdate();
        } else if (action === 'ARCHIVE') {
          await NotificationsService.archiveAllNotifications({
            accountId,
            publicKey,
            signature,
          });
        }

        await loadMore(0);
      }
    },
    [accountId, isMounted, loadMore, triggerUpdate, pkAndSignature]
  );

  const handleRemove = useCallback(
    async (id: string, { isRead, isMuted, isArchived }) => {
      if (!pkAndSignature) {
        return;
      }

      const { publicKey, signature } = pkAndSignature;

      if (accountId && publicKey && signature && isMounted() && notifications) {
        const newData = notifications?.data.filter(item => item.id !== id);

        setNotifications({
          total: notifications?.total || 0,
          data: newData ?? [],
        });

        await NotificationsService.updateNotification(id, {
          accountId,
          publicKey,
          signature,
          isRead,
          isMuted,
          isArchived,
        });

        triggerUpdate();
      }
    },
    [pkAndSignature, accountId, isMounted, notifications, triggerUpdate]
  );

  return {
    notifications,
    loadMore,
    handleRemove,
    handleUpdate,
    handleUpdateAll,
    loading: !daoIdsLoaded,
  };
}

export function useNotificationsCount(): number | null {
  const isMounted = useMountedState();
  const { accountId } = useWalletContext();
  const [counter, setCounter] = useState<number | null>(null);

  const [, fetchData] = useAsyncFn(async () => {
    try {
      const count = await NotificationsService.getNotificationsCount(accountId);

      if (isMounted()) {
        setCounter(count);
      }
    } catch (e) {
      console.error(e);
    }
  }, [accountId, isMounted]);

  const handleUpdates = useCallback(async () => {
    await fetchData();
  }, [fetchData]);

  useMount(async () => {
    await fetchData();
  });

  useEffect(() => {
    document.addEventListener(
      NOTIFICATIONS_UPDATED,
      handleUpdates as EventListener
    );

    return () =>
      document.removeEventListener(
        NOTIFICATIONS_UPDATED,
        handleUpdates as EventListener
      );
  }, [handleUpdates]);

  return counter;
}

'''
'''--- astro_2.0/features/Notifications/index.ts ---
export * from './helpers';
export * from './components/NotificationText';

'''
'''--- astro_2.0/features/Notifications/types.ts ---
import { DAO } from 'types/dao';
import { NotificationSettingDTO } from 'services/NotificationsService/types';

export type DaoCreateNotificationMetadata = {
  args: {
    name: string;
    args: string;
  };
  methodName: string;
};

export type DaoSettings = {
  dao: DAO;
  settings: NotificationSettingDTO;
};

export type NotificationAction = (
  id: string,
  {
    isMuted,
    isRead,
    isArchived,
  }: {
    isMuted: boolean;
    isRead: boolean;
    isArchived: boolean;
  }
) => void;

'''
'''--- astro_2.0/features/Proposals/components/ProposalFilter/index.ts ---
export * from './ProposalFilter';

'''
'''--- astro_2.0/features/Proposals/components/index.ts ---
export * from './ProposalFilter';

'''
'''--- astro_2.0/features/Proposals/helpers/getStatusFilterOptions.ts ---
import { ProposalsFeedStatuses } from 'types/proposal';
import styles from 'astro_2.0/features/Feed/Feed.module.scss';
import { TFunction } from 'next-i18next';
import React from 'react';

export function getStatusFilterOptions(
  showVoteNeeded: boolean,
  t: TFunction
): {
  label: React.ReactNode;
  value: string;
  className?: string;
}[] {
  const initialList = [
    {
      value: ProposalsFeedStatuses.All,
      label: t('feed.filters.all'),
    },
    {
      value: ProposalsFeedStatuses.Active,
      label: t('feed.filters.active'),
    },
  ];

  if (showVoteNeeded) {
    initialList.push({
      value: ProposalsFeedStatuses.VoteNeeded,
      label: t('feed.filters.voteNeeded'),
    });
  }

  return [
    ...initialList,
    {
      value: ProposalsFeedStatuses.Approved,
      label: t('feed.filters.approved'),
      className: styles.categoriesListApprovedInputWrapperChecked,
    },
    {
      value: ProposalsFeedStatuses.Failed,
      label: t('feed.filters.failed'),
      className: styles.categoriesListFailedInputWrapperChecked,
    },
  ];
}

'''
'''--- astro_2.0/features/Proposals/helpers/tests/getStatusFilterOptions.spec.ts ---
import { ProposalsFeedStatuses } from 'types/proposal';

import { getStatusFilterOptions } from 'astro_2.0/features/Proposals/helpers/getStatusFilterOptions';

describe('getStatusFilterOptions', () => {
  const t = (label: string) => label;

  it('Should not add "Vote Needed" status', () => {
    const result = getStatusFilterOptions(false, t);

    expect(result).toEqual([
      { value: 'all', label: 'feed.filters.all' },
      { value: 'active', label: 'feed.filters.active' },
      {
        value: 'approved',
        label: 'feed.filters.approved',
        className: 'categoriesListApprovedInputWrapperChecked',
      },
      {
        value: 'failed',
        label: 'feed.filters.failed',
        className: 'categoriesListFailedInputWrapperChecked',
      },
    ]);
  });

  it('Should add "Vote Needed" status', () => {
    const result = getStatusFilterOptions(true, t);

    expect(result).toEqual([
      { value: 'all', label: 'feed.filters.all' },
      { value: 'active', label: 'feed.filters.active' },
      {
        value: ProposalsFeedStatuses.VoteNeeded,
        label: t('feed.filters.voteNeeded'),
      },
      {
        value: 'approved',
        label: 'feed.filters.approved',
        className: 'categoriesListApprovedInputWrapperChecked',
      },
      {
        value: 'failed',
        label: 'feed.filters.failed',
        className: 'categoriesListFailedInputWrapperChecked',
      },
    ]);
  });
});

'''
'''--- astro_2.0/features/TermsAndConditions/config.ts ---
/* istanbul ignore file */

export const TERMS_CONDITIONS = [
  {
    title: 'Acceptance',
    body:
      'By connecting your NEAR wallet and using the ASTRO DAO, you confirm that you understand and agree to these terms and conditions, together with any documents that may be expressly referred to and are incorporated by reference (“Terms”).\n' +
      'These Terms constitute a legal agreement between you and Company and govern your access to and use of the ASTRO DAO, including any content, functionality, and services offered on or through the website https://astrodao.com  ( the “Site”).\n' +
      'Company reserves the right to change or modify these terms at any time and at our sole discretion. You agree and understand that by accessing or using the ASTRO DAO and the Site following any change to these Terms, you are regarded as having agreed to the revised Terms.',
  },
  {
    title: 'Definitions',
    body:
      'In these Terms:\n' +
      '“DAO” / Decentralized Autonomous Organization” (DAO) refers to smart contracts (i.e. blockchain-based software) deployed on a public Permissionless Blockchain, which implements specific decision-making or governance rules enabling a multiplicity of actors to coordinate themselves in a decentralized fashion. These governance rules must be technically, although not necessarily operationally, decentralized.\n' +
      '“Applicable Law”: any law, rule, statute, subordinate legislation, regulation, by-law order, ordinance, protocol, code, guideline, treaty, policy, notice, direction or judicial, arbitral, administrative, ministerial or departmental judgment, award, decree, treaty, directive, or other requirement or guideline published or in force at any time which applies to or is otherwise intended to govern or regulate any person (including all parties to this Terms), property, transaction, activity, event or other matter, including any rule, order, judgment, directive or other requirement or guideline issued by any governmental or regulatory authority;',
  },
  {
    title: 'Eligibility',
    body:
      'By agreeing to these Terms, you represent and warrant that:\n' +
      '(i) You are at least 18 years of age;\n' +
      '(ii) You have the full right, power, and authority to agree to these Terms;\n' +
      '(iii) You are not subject to any financial sanctions, embargoes or other restrictive measures imposed by the United Nations, European Union, any EU country, UK Treasury or US Office of Foreign Assets Control (OFAC), or any governmental authority in any jurisdiction in which the ASTRO DAO is available;\n' +
      '(iv) You are not a citizen or resident of any of the following countries: Belarus, Central African Republic, Cote d’Ivoire (Ivory Coast), Cuba, Democratic Republic of the Congo, Iran, Iraq, Lebanon, Liberia, Libya, Myanmar (Burma), North Korea, Somalia, Sudan, Syria, Zimbabwe.\n' +
      '(v) You are not impersonating any other person;\n' +
      '(vi) You will not use the ASTRO DAO if any Applicable Laws in your country prohibit you from doing so in accordance with these Terms;\n' +
      '(vii) You are compliant with all Applicable Laws to which you are subject;\n' +
      '(viii) You have read, understood and agreed to our Privacy Notice and Cookie Policy.',
  },
  {
    title: 'ASTRO DAO Account',
    body: 'You must connect your NEAR wallet to use the ASTRO DAO. To create an account, we will require you to provide certain information about yourself and we may, in our sole discretion, require you to provide further information and/or documents at any stage during your use of the Platform. Through the User community organised content flagging procedure we may , in our sole discretion, refuse, decline, suspend or disable your access or use of the ASTRO DAO. Regardless of disabling the access through the ASTRO DAO, all direct interactions with the NEAR protocol interfaces are out of control of the Company. ',
  },
  {
    title: 'No Control of the NEAR protocol',
    body: 'You shall at all times note that no party (neither we or you), including but not limited to any party involved in, or having contributed to the development of, the NEAR Protocol  and any of the affiliates, directors, employees, contractors, service providers or agents of such parties owns or control the NEAR Protocol or any accessory, upgrade, related software or any other modification to it (including, but not limited to, NEAR Protocol user interface) and you are solely and in full responsible for your use of each and any of them. there is no central oversight over the NEAR Protocol. it is built by the participants and participants of their networks themselves. for the avoidance of doubt, Near Inc. assumes no responsibility or liability for (1) availability and operability of the NEAR Protocol and its underlying software, (2) interoperability of your network with other third party networks (this largely depends on external factors beyond of Near Inc. reasonable control such as, in particular the infrastructure and operability of third party networks and their internet-connectivity measures) or 3) suitability of the NEAR Protocol for your own business purposes. You are using the NEAR Protocol for your own business purposes at your sole and own risk.',
  },
  {
    title: 'Changes to the ASTRO DAO',
    body: 'We may in our absolute and sole discretion change, update, amend, remove, or discontinue any part of the Site, the services and the Content at any time without prior notice to you.',
  },
  {
    title: 'Your Use of the ASTRO DAO and Conduct',
    body:
      'We hereby grant you a limited, non-exclusive, non-transferable, revocable license to access and use the Site and Content. Our grant of such license is subject to the following conditions. You undertake not to (and shall not, knowingly or otherwise, authorize, allow or assist any other party to):' +
      '(i) Use the ASTRO DAO, Site, or your Account to conduct electronic spamming or otherwise distribute any unsolicited or unauthorized advertising, promotional or marketing material, junk or chain messages;\n' +
      '(ii) Use the ASTRO DAO, Site, or your Account to perform unlawful activities that violates any Applicable Laws (including but not limited to money laundering, terrorism financing and/or fraudulent activities) or immoral activities;\n' +
      '(iii) Use the ASTRO DAO, Site, or your Account to engage in any activity which operates to defraud Company, other users, or any other person, or to provide any false, inaccurate, or misleading information to Company;\n' +
      '(iv) Use the ASTRO DAO, Site, or your Account to upload content that contains or is infected with viruses, malicious codes, Trojan horses, is immoral or illegal or contains any other harmful or deleterious program;\n' +
      '(v) Use the ASTRO DAO, Site, or your Account in any manner that would lead to infringement of our, our Affiliates’ or any third party’s intellectual property rights, including without limitation any copyright, patent or trademark. You undertake not to take or attempt to take any action or claim ownership of any property that infringes or would infringe upon our intellectual property interests;\n' +
      '(vi) Use the ASTRO DAO, Site, or your Account in a way that could damage, disable, impair or compromise the Site or the provision of the ASTRO DAO or interfere with other users or affect the reputation of Company;\n' +
      '(vii) To take any action to gain or attempt to gain unauthorized access to the account or wallets of other users;\n' +
      '(viii) Take any action that imposes an unreasonable or disproportionately large burden or load on the Company infrastructure (including, but without limitation to our servers, networks, data centres and related or like equipment) and detrimentally interfere with, intercept or expropriate any system, data or information belonging to other users of the ASTRO DAO;\n' +
      '(ix) Engage in any other activities deemed inappropriate by us or which is in contravention of these Terms or any Applicable Laws;\n' +
      '(x) Provide false, inaccurate, incomplete or misleading information to Company or any of its Affiliates or third-party services providers; and/or',
  },
  {
    title: 'User Content',
    body:
      'The ASTRO DAO allows (i) users to create a DAO and post information about DAO activities, activity or funding proposals, and/or voting activities of DAO (together the “User Content”).\n' +
      'Any information you post on the Site as a Creator will be considered non-confidential. By providing any User Content on the Site, you grant us and our affiliates and our respective licensees, successors, and assigns the right to use, reproduce, modify, perform, display, distribute, retransmit, publish, broadcast, and otherwise disclose to third parties any such material for any purpose. You represent and warrant that (1) you own and control all rights in and to your User Content and have the right to grant such licenses to us and our affiliates and our respective licensees, successors, and assigns; and \n' +
      '(2) all of your User Content do and will comply with these Terms.\n' +
      'You understand and agree that you are responsible for any User Content you submit or contribute, and you, and not Company, have full responsibility for such content, including its legality, reliability, accuracy, and appropriateness. We are not responsible or liable to any third party for the content, accuracy, or appropriateness of any User Content posted by you or any other user on the Site.\n' +
      'If you are a Creator, you hereby grant Company the right to use your name and image for marketing or promotional purposes and agree that we may use content that you create for marketing or promotional purposes. \n' +
      'We are not required to monitor any User Content, but based on a consensual and voluntary activities, Users of ASTRO DAO may form and organise a content flagging procedure. If reported by Users, we may in our sole discretion, remove any User Content at any time and for any reason without notice. All Users of ASTRO DAO may monitor and report the User Content to detect and prevent fraudulent activity or violation of these Terms by other Users. Regardless of disabling the access through the ASTRO DAO, all direct interactions with the NEAR protocol interfaces are out of control of the Company. ',
  },
  {
    title: 'Intellectual Property',
    body:
      'Unless otherwise indicated by us, and except to the extent of the User Content, the Site, all content, and other materials contained therein, including, without limitation, the Company logo, and all designs, text graphics, pictures, information, data, software, and files relating to the ASTRO DAO (the “Content”) are the proprietary property of Company or our affiliates, licensors, or users, as applicable.\n' +
      'The Company logo and any ASTRO DAO product or service names, logos, or slogans that may appear on the Site or elsewhere are the proprietary property of Company and may not be copied, imitated or used, in whole or in part, without our prior written permission.\n' +
      'Unless otherwise stated, you may not use any Content without our express written permission.\n' +
      'We reserve the right to suspend or terminate any Account that has actually or allegedly infringed upon any person’s intellectual property rights.',
  },
  {
    title: 'Data Protection / Privacy',
    body:
      'By using the ASTRO DAO, you confirm that you have read and understood our Privacy Notice and understand how we collect, use, disclose and share amongst ourselves your Personal Data and disclose such Personal Data to our authorised service providers and relevant third parties. We will only share your Personal Data in order to facilitate and administer your use of the ASTRO DAO or otherwise if required by law. Such a data controller will manage and protect your personal data in accordance with all applicable data protection laws. For full and comprehensive information about when and why we collect personal information about you, how we use it, the conditions under which we may disclose it and how we keep it secure, please refer to our Privacy Notice.' +
      'We reserve the right at any time to satisfy our internal requirement as to your Personal Data (for example, by requesting relevant original documents) including for the purposes of preventing fraud and/or anti-money laundering and counter-terrorist financing purposes.',
  },
  {
    title:
      'Limitation of Services / Account Closure / Termination upon report of Users',
    body:
      'We reserve the right, without notice and in our sole discretion, to terminate or suspend your access to or use of the Site and any Content and/or close your Account, at any time for any reason but in particular, if we suspect in our sole discretion that\n' +
      '- your Account is being used for illegal activity;\n' +
      '- you have concealed or provided false information; \n' +
      '- you have engaged in fraudulent activity; and/or (iv) you have engaged in activity in violation of these Terms.',
  },
  {
    title: 'Risks',
    body:
      'You understand and agree that your access and use of the ASTRO DAO is subject to certain risks including without limitation:\n' +
      '(i) Legislative and regulatory changes or actions may adversely affect the use of the DAOs;\n' +
      '(ii) DAOs are not legal subjects and are not backed by any government;\n' +
      '(iii) Transactions involving DAOs may be irreversible, and losses due to fraudulent or accidental transactions may not be recoverable.\n' +
      '(iv) DAOs are subject to the risk of fraud, counterfeiting, cyber-attacks and other technological difficulties which may prevent access to or use of your DAOs.\n' +
      'You understand and agree that you are solely responsible for determining the nature, potential value, suitability, and appropriateness of these risks for yourself. Company does not give any advice or recommendations regarding the DAOs. You understand and agree that you access and use the ASTRO DAO at your own risk. You understand and agree that the Company will not be responsible for any communication failures, disruptions, errors, or distortions you may experience when using the DAOs or the ASTRO DAO.',
  },
  {
    title: 'Taxes',
    body: 'You agree that you are solely responsible for determining what, if any, taxes apply to your DAO transactions on the Astro DAO. Neither Company nor any other Party is responsible for determining the taxes that may apply to your DAO transactions.',
  },
  {
    title: 'Disclaimers',
    body:
      'Creators may engage in promotion of their respective User Content, including without limitation their DAOs, through various communications channels such as their social media accounts. Company is not responsible for any such communications and/or promotional activities carried out by the Creators and will not be liable to you in relation to any such communications and/or promotional activities.\n' +
      'You bear full responsibility for verifying the identity, legitimacy, and authenticity of assets you use on ASTRO DAO. Notwithstanding indicators and messages that suggest verification, Company makes no claims about the identity, legitimacy, or authenticity of assets on the ASTRO DAO.\n' +
      'Except as expressly provided to the contrary in writing by Company, the Site, content contained therein, and the DAOs listed therein are provided on an “as is” and “as available” basis without warranties or conditions of any kind, either express or implied. Company (and its suppliers) make no warranty that the Site will (1) meet your requirements; (2) be available on an uninterrupted, timely, secure, or error-free basis; or (3) be accurate, reliable, complete, legal, or safe.\n' +
      'Company will not be liable for any loss of any kind from any action taken or taken in reliance on material or information contained on the Site. Company does not represent or warrant that any content on the Site is accurate, complete, reliable, current or error-free.\n' +
      'While Company attempts to make your access to and use of the Site and content safe, Company does not represent or warrant that the Site, content, any DAOs listed on the Site or any other part of the Site or ASTRO DAO are free of viruses or other harmful components. We cannot guarantee the security of any data that you disclose online. You acknowledge and accept the inherent security risks of providing information and dealing online over the Internet. We will not be responsible for any breach of security unless it is due to our gross negligence.\n' +
      'We will not be responsible or liable to you for any loss and take no responsibility for, and will not be liable to you for, any use of the DAOs including but not limited to, any losses, damages, or claims arising from: (1) user error such as if you forget your password(s), incorrect transactions, or mistyped addresses; (2) server failure or data loss; (3) corrupted wallet files; (4) loss of DAO funds.\n' +
      'TO THE FULLEST EXTENT PROVIDED BY LAW, COMPANY HEREBY DISCLAIMS ALL WARRANTIES OF ANY KIND, WHETHER EXPRESS OR IMPLIED, STATUTORY, OR OTHERWISE, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT AS TO THE SITE AND CONTENT CONTAINED THEREIN. THE FOREGOING DOES NOT AFFECT ANY WARRANTIES THAT CANNOT BE EXCLUDED OR LIMITED UNDER APPLICABLE LAW.',
  },
  {
    title: 'Limitation of Liability',
    body: 'TO THE FULLEST EXTENT PERMITTED BY LAW, IN NO EVENT WILL COMPANY BE LIABLE TO YOU OR ANY THIRD PARTY FOR ANY LOST PROFIT OR ANY INDIRECT, CONSEQUENTIAL, EXEMPLARY, INCIDENTAL, SPECIAL OR PUNITIVE DAMAGES ARISING FROM THESE TERMS, THE SITE, PRODUCTS OR THIRD PARTY SITES AND PRODUCTS, OR FOR ANY DAMAGES RELATED TO LOSS OF REVENUE, LOSS OF PROFITS, LOSS OF BUSINESS OR ANTICIPATED SAVINGS, LOSS OF USE, LOSS OF GOODWILL, OR LOSS OF DATA, AND WHETHER CAUSED BY TORT (INCLUDING NEGLIGENCE), BREACH OF CONTRACT, OR OTHERWISE, EVEN IF FORESEEABLE AND EVEN IF COMPANY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. ACCESS TO, AND USE OF THE SITE, PRODUCTS OR THIRD-PARTY SITES AND PRODUCTS ARE AT YOUR OWN DISCRETION AND RISK, AND YOU WILL BE SOLELY RESPONSIBLE FOR ANY DAMAGE TO YOUR COMPUTER SYSTEM OR LOSS OF DATA RESULTING THEREFROM. NOTWITHSTANDING ANYTHING TO THE CONTRARY CONTAINED HEREIN, IN NO EVENT SHALL THE MAXIMUM AGGREGATE LIABILITY OF COMPANY ARISING OUT OF OR IN ANY WAY RELATED TO THESE TERMS, THE ACCESS AND USE OF THE SITE, CONTENT NFTS OR ANY PRODUCT OR SERVICES PURCHASES ON THE SITE EXCEED US$100. THE FOREGOING LIMITATIONS OF LIABILITY SHALL NOT APPLY TO LIABILITY OF COMPANY FOR PERSONAL INJURY CAUSED BY COMPANY’S NEGLIGENCE OR ANY INJURY CAUSED BY COMPANY’S FRAUD OR FRAUDULENT MISREPRESENTATION.',
  },
  {
    title: 'Indemnification',
    body:
      'To the fullest extent permitted by Applicable Law, you agree to indemnify, defend and hold harmless Company and our past, present and future employees, officers, directors, contractors, consultants, equity holders, suppliers, vendors, service providers, parent companies, subsidiaries, affiliates, agents, representatives, predecessors, successors and assigns (individually and collectively the “Company Parties”), from and against all actual or alleged third party claims, damages, awards, judgments, losses, liabilities, obligations, penalties, interest, fees, expenses (including, without limitation, court costs, costs of settlement and costs of pursuing indemnification and insurance), of every kind and nature whatsoever, whether known or unknown, foreseen or unforeseen, matured or unmatured, or suspected or unsuspected, in law or equity, whether in tort, contract or otherwise (collectively, “Claims”), including, but not limited to, damages to property or personal injury, that are caused by, arise out of or are related to (a) your use or misuse of the Site, Content or DAOs, (b) your breach of these Terms, and (c) your breach or violation of the rights of a third party, including another user or third party service provider. You agree to promptly notify Company of any third party Claims and cooperate with the Company Parties in defending such Claims. You further agree that the Company Parties shall have control of the defense or settlement of any third party Claims.\n' +
      'THIS INDEMNITY IS IN ADDITION TO, AND NOT IN LIEU OF, ANY OTHER INDEMNITIES THAT MAY BE SET FORTH IN A WRITTEN AGREEMENT BETWEEN YOU AND COMPANY.',
  },
  {
    title: 'Amendment and Variation',
    body: 'These Terms may from time to time be updated or amended. We will post any such updates on the Site. Such updated Terms as posted will take effect immediately unless otherwise indicated. You should regularly check the Site to inform yourself of any such changes. In addition, we may at any time change, add or remove any feature or functionality of the Site without prior notice. By continuing to use the ASTRO DAO and/or the Site after any such changes have taken effect, you are indicating your acceptance of the updated or amended Terms as well as your acceptance of the updated Site. If you do not wish to be bound by any changes or amendments to these Terms then you should stop using the ASTRO DAO and Site immediately.',
  },
  {
    title: 'Transfer, Assignment or Delegation',
    body: 'Unless otherwise stated herein, these Terms, and any rights and obligations and licenses granted hereunder, are limited, revocable, non-exclusive and personal to you and therefore may not be transferred, assigned or delegated by you to any third-party without our written consent, but may be transferred, assigned or delegated by us without notice and restriction, including without limitation to any of the entities within the Company group, or to any successor in interest of any business associated with the Company or ASTRO DAO. Any attempted transfer or assignment in violation hereof shall be null and void.',
  },
  {
    title: 'Severability',
    body: 'If any provision of these Terms shall be found by any court or administrative body of competent jurisdiction to be invalid or unenforceable, the invalidity or unenforceability of such provision shall not affect the other provisions of these Terms and all provisions not affected by such invalidity or unenforceability shall remain in full force and effect. Such provision will be changed and interpreted to accomplish the objectives of the provision to the greatest extent possible under any Applicable Laws.',
  },
  {
    title: 'Entire Agreement / Translation',
    body:
      'These Terms constitute the entire agreement between the parties regarding its subject matter and supersedes and invalidates all other prior representations, arrangements, understandings, and agreements relating to the same subject matter, (whether oral or in writing, express or implied). Each party acknowledges that in agreeing to these Terms it does not rely on any statement, representation, warranty, or understanding other than those expressly set out in these Terms.' +
      '\n' +
      '\n' +
      'These Terms are concluded in the English language and all communications including any notices or information being transmitted shall be in English. In the event that these Terms or any part of it is translated (for any proceedings, for your convenience or otherwise) into any other language, the English language text of these Terms shall prevail.',
  },
  {
    title: 'Waiver',
    body:
      'These Terms shall not be waived in whole or in part except where agreed by the parties in writing.' +
      '\n' +
      'The delay of enforcement or the non-enforcement of any of the terms of these Terms by any party shall not be construed as a waiver of any of the other rights of that party arising out of the breach or any subsequent breach of any of these Terms and no right, power or remedy conferred upon or reserved for any party in these Terms is exclusive of any other right, power or remedy available to that party and each such right, power or remedy shall be cumulative.',
  },
  {
    title: 'Notices and Communications',
    body:
      'By using the ASTRO DAO, you agree that we may provide you with notices or other communications, including marketing, relating to your use of the ASTRO DAO electronically: (a) via email (in each case to the address that you provide), SMS message, or telephone call (in each case to the phone number that you provide), or (b) by posting to the Site. For notices made by email, the date of receipt will be deemed the date on which such notice is transmitted. You will always be given the option to unsubscribe from receiving any marketing material from us.\n' +
      'Notices to us should be sent electronically to Company Email.',
  },
  {
    title: 'Third Party Rights',
    body: 'Other than the entities within the Company group, a person who is not a party to these Terms has no right to enforce any of these Terms.',
  },
  {
    title: 'Governing Law and Jurisdiction',
    body:
      "These Terms are governed by and shall be construed in accordance with the laws of _____ without regard to any choice or conflict of laws rules. Any dispute, controversy, or claim, whether contractual or non-contractual, arising out of or in connection with these Terms, or the breach, termination or invalidity thereof, or any other issue which shall arise in virtue of these Terms, shall be referred to and finally settled by the Swiss Rules of International Arbitration of the Swiss Chambers' Arbitration Institution in force on the date on which the Notice of Arbitration is submitted in accordance with these Rules.\n" +
      'The law of this arbitration clause shall be Swiss law. The seat of arbitration shall be in Zug. The number of arbitrators shall be one. The arbitration proceedings shall be conducted in the English language.',
  },
];

'''
'''--- astro_2.0/features/TermsAndConditions/index.ts ---
export * from './config';
export * from './types';

'''
'''--- astro_2.0/features/TermsAndConditions/types.ts ---
export type Paragraph = {
  title: string;
  body: string;
};

'''
'''--- astro_2.0/features/ViewBounty/components/BountyActions/index.ts ---
export * from './BountyActions';

'''
'''--- astro_2.0/features/ViewBounty/components/BountyCard/index.ts ---
export * from './BountyCard';

'''
'''--- astro_2.0/features/ViewBounty/components/BountyProgress/index.ts ---
export * from './BountyProgress';

'''
'''--- astro_2.0/features/ViewBounty/components/CardContent/index.ts ---
export * from './CardContent';

'''
'''--- astro_2.0/features/ViewBounty/components/ClaimCard/index.ts ---
export * from './ClaimCard';

'''
'''--- astro_2.0/features/ViewBounty/components/ClaimsDonutChart/index.ts ---
export * from './ClaimsDonutChart';

'''
'''--- astro_2.0/features/ViewBounty/components/ClaimsInfo/index.ts ---
export * from './ClaimsInfo';

'''
'''--- astro_2.0/features/ViewBounty/components/ClaimsStatistic/index.ts ---
export * from './ClaimsStatistic';

'''
'''--- astro_2.0/features/ViewBounty/components/CompleteProposalCard/index.ts ---
export * from './CompleteProposalCard';

'''
'''--- astro_2.0/features/ViewBounty/components/InfoPanel/index.ts ---
export * from './InfoPanel';

'''
'''--- astro_2.0/features/ViewBounty/index.ts ---
export * from './ViewBounty';

'''
'''--- astro_2.0/features/ViewProposal/components/AddBountyContent/index.ts ---
export * from './AddBountyContent';

'''
'''--- astro_2.0/features/ViewProposal/components/AddMemberToGroupContent/index.ts ---
export * from './AddMemberToGroupContent';

'''
'''--- astro_2.0/features/ViewProposal/components/BackButton/index.ts ---
export * from './BackButton';

'''
'''--- astro_2.0/features/ViewProposal/components/ChangeBondsContent/index.ts ---
export * from './ChangeBondsContent';

'''
'''--- astro_2.0/features/ViewProposal/components/ChangeDaoFlagContent/index.ts ---
export * from './ChangeDaoFlagContent';

'''
'''--- astro_2.0/features/ViewProposal/components/ChangeDaoLegalInfoContent/index.ts ---
export * from './ChangeDaoLegalInfoContent';

'''
'''--- astro_2.0/features/ViewProposal/components/ChangeDaoNameContent/index.ts ---
export * from './ChangeDaoNameContent';

'''
'''--- astro_2.0/features/ViewProposal/components/ChangeDaoPurposeContent/index.ts ---
export * from './ChangeDaoPurposeContent';

'''
'''--- astro_2.0/features/ViewProposal/components/ChangeLinksContent/index.ts ---
export * from './ChangeLinksContent';

'''
'''--- astro_2.0/features/ViewProposal/components/ChangePermissionsContent/index.ts ---
export * from './ChangePermissionsContent';

'''
'''--- astro_2.0/features/ViewProposal/components/ChangePolicyContent/index.ts ---
export * from './ChangePolicyContent';

'''
'''--- astro_2.0/features/ViewProposal/components/ContractAcceptanceContent/index.ts ---
export * from './ContractAcceptanceContent';

'''
'''--- astro_2.0/features/ViewProposal/components/CreateDaoContent/index.ts ---
export * from './CreateDaoContent';

'''
'''--- astro_2.0/features/ViewProposal/components/CreateGroupContent/index.ts ---
export * from './CreateGroupContent';

'''
'''--- astro_2.0/features/ViewProposal/components/CustomFunctionCallContent/components/CommonContent/index.ts ---
export * from './CommonContent';

'''
'''--- astro_2.0/features/ViewProposal/components/CustomFunctionCallContent/components/ViewVoteInOtherDao/index.ts ---
export * from './ViewVoteInOtherDao';

'''
'''--- astro_2.0/features/ViewProposal/components/CustomFunctionCallContent/index.ts ---
export * from './CustomFunctionCallContent';

'''
'''--- astro_2.0/features/ViewProposal/components/FieldWrapper/index.ts ---
export * from './FieldWrapper';

'''
'''--- astro_2.0/features/ViewProposal/components/HistorySelector/components/CompareProposal/index.ts ---
export * from './CompareProposal';

'''
'''--- astro_2.0/features/ViewProposal/components/HistorySelector/components/CompareProposalContext/index.ts ---
export * from './CompareProposalContrext';

'''
'''--- astro_2.0/features/ViewProposal/components/HistorySelector/components/CompareVersionsModal/index.ts ---
export * from './CompareVersionsModal';

'''
'''--- astro_2.0/features/ViewProposal/components/HistorySelector/index.ts ---
export * from './HistorySelector';

'''
'''--- astro_2.0/features/ViewProposal/components/ProposalComments/components/Comment/helpers.ts ---
export async function getImagesFromLinks(links: NodeList): Promise<string[]> {
  if (!links) {
    return [];
  }

  const urls = Array.from(links).map(item => (item as HTMLAnchorElement).href);

  return Promise.allSettled(
    urls.map(url => {
      return new Promise((resolve, reject) => {
        const img = new Image();

        img.onload = () => {
          resolve(url);
        };

        img.onerror = () => {
          reject();
        };

        img.src = url;
      });
    })
  )
    .then(result => {
      return result
        .filter(item => item.status === 'fulfilled')
        .map(item => (item as PromiseFulfilledResult<string>).value);
    })
    .catch(() => {
      return [];
    });
}

'''
'''--- astro_2.0/features/ViewProposal/components/ProposalComments/components/Comment/index.ts ---
export * from './Comment';

'''
'''--- astro_2.0/features/ViewProposal/components/ProposalComments/components/ConfirmCommentActionModal/index.ts ---
export * from './ConfirmCommentActionModal';

'''
'''--- astro_2.0/features/ViewProposal/components/ProposalComments/hooks.ts ---
import uniqBy from 'lodash/uniqBy';
import {
  CommentContextType,
  ProposalComment,
  ReportCommentsInput,
  SendCommentsInput,
} from 'types/proposal';
import { useEffect, useState } from 'react';
import { SputnikHttpService } from 'services/sputnik';
import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';
import { useAsyncFn, useMountedState } from 'react-use';
import { useSocket } from 'context/SocketContext';
import { useWalletContext } from 'context/WalletContext';

export function useProposalComments(
  proposalId: string,
  contextType: CommentContextType
): {
  comments: ProposalComment[] | null;
  loading: boolean;
  sendComment: (params: SendCommentsInput) => void;
  reportComment: (params: ReportCommentsInput) => void;
  deleteComment: (commentId: number, reason: string) => void;
} {
  const { accountId, nearService, pkAndSignature } = useWalletContext();
  const { socket } = useSocket();
  const isMounted = useMountedState();
  const [comments, setComments] = useState<ProposalComment[] | null>(null);

  const [{ loading }, getComments] = useAsyncFn(async () => {
    try {
      const data = await SputnikHttpService.getProposalComments(proposalId);

      if (isMounted()) {
        setComments(data);
      }
    } catch (err) {
      showNotification({
        type: NOTIFICATION_TYPES.ERROR,
        lifetime: 20000,
        description: err.message,
      });
    }
  }, [proposalId]);

  const [{ loading: uploading }, sendComment] = useAsyncFn(
    async params => {
      if (!pkAndSignature) {
        return;
      }

      const { publicKey, signature } = pkAndSignature;

      if (publicKey && signature && accountId) {
        await SputnikHttpService.sendProposalComment({
          ...params,
          accountId,
          publicKey,
          signature,
        });
      }
    },
    [proposalId, pkAndSignature]
  );

  const [, reportComment] = useAsyncFn(
    async params => {
      try {
        if (!pkAndSignature) {
          return;
        }

        const { publicKey, signature } = pkAndSignature;

        if (publicKey && signature && accountId) {
          await SputnikHttpService.reportProposalComment({
            ...params,
            accountId,
            publicKey,
            signature,
          });
          await getComments();
        }
      } catch (err) {
        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 20000,
          description: err.message,
        });
      }
    },
    [proposalId, nearService, pkAndSignature]
  );

  const [, deleteComment] = useAsyncFn(
    async (commentId, reason) => {
      try {
        if (!pkAndSignature) {
          return;
        }

        const { publicKey, signature } = pkAndSignature;

        if (publicKey && signature && accountId) {
          await SputnikHttpService.deleteProposalComment(commentId, {
            accountId,
            publicKey,
            signature,
            reason,
          });
        }
      } catch (err) {
        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 20000,
          description: err.message,
        });
      }
    },
    [proposalId, nearService, pkAndSignature]
  );

  useEffect(() => {
    if (socket) {
      socket.on('comment', (newComment: ProposalComment) => {
        if (
          newComment.contextId === proposalId &&
          newComment.contextType === contextType
        ) {
          if (isMounted()) {
            setComments(prev => {
              if (prev) {
                return uniqBy([...prev, newComment], val => val.id);
              }

              return [newComment];
            });
          }
        }
      });

      socket.on('comment-removed', (removedComment: ProposalComment) => {
        if (
          removedComment.contextId === proposalId &&
          removedComment.contextType === contextType
        ) {
          if (isMounted()) {
            setComments(prev => {
              if (prev) {
                return prev.filter(item => item.id !== removedComment.id);
              }

              return [];
            });
          }
        }
      });
    }

    getComments();
  }, [contextType, getComments, isMounted, proposalId, socket]);

  return {
    comments,
    loading: loading || uploading,
    sendComment,
    reportComment,
    deleteComment,
  };
}

'''
'''--- astro_2.0/features/ViewProposal/components/ProposalComments/index.ts ---
export * from './ProposalComments';

'''
'''--- astro_2.0/features/ViewProposal/components/RemoveMemberFromGroupContent/index.ts ---
export * from './RemoveMemberFromGroupContent';

'''
'''--- astro_2.0/features/ViewProposal/components/SaveFcTemplate/components/SaveFcTemplateModal/helpers.ts ---
import {
  CustomFcTemplatePayload,
  ProposalFeedItem,
  ProposalType,
} from 'types/proposal';

export function getFcTemplateFromProposal(
  proposal: ProposalFeedItem
): CustomFcTemplatePayload | null {
  if (proposal.kind.type !== ProposalType.FunctionCall) {
    return null;
  }

  try {
    const { kind } = proposal;
    const data = kind.actions[0];
    const jsonPayload = JSON.parse(
      Buffer.from(data.args, 'base64').toString('utf-8')
    );
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const { methodName, deposit, token, gas } = data;
    const smartContractAddress = kind.receiverId;
    const json = JSON.stringify(jsonPayload, null, 2);

    return {
      methodName,
      deposit,
      smartContractAddress,
      json,
      token,
      actionsGas: gas,
    };
  } catch (e) {
    console.error(e);

    return null;
  }
}

'''
'''--- astro_2.0/features/ViewProposal/components/SaveFcTemplate/components/SaveFcTemplateModal/index.ts ---
export * from './SaveFcTemplateModal';

'''
'''--- astro_2.0/features/ViewProposal/components/SaveFcTemplate/index.ts ---
export * from './SaveFcTemplate';

'''
'''--- astro_2.0/features/ViewProposal/components/TokenDistributionContent/GroupRow/index.ts ---
export * from './GroupRow';

'''
'''--- astro_2.0/features/ViewProposal/components/TokenDistributionContent/MemberRow/index.ts ---
export * from './MemberRow';

'''
'''--- astro_2.0/features/ViewProposal/components/TokenDistributionContent/index.ts ---
export * from './TokenDistributionContent';

'''
'''--- astro_2.0/features/ViewProposal/components/TransferContent/index.ts ---
export * from './TransferContent';

'''
'''--- astro_2.0/features/ViewProposal/components/UpdateVotePolicyToWeightVoting/index.ts ---
export * from './UpdateVotePolicyToWeightVoting';

'''
'''--- astro_2.0/features/ViewProposal/index.ts ---
export * from './ViewProposal';

'''
'''--- astro_2.0/features/ViewProposal/tests/helpers.spec.ts ---
import { ProposalFeedItem } from 'types/proposal';
import { getProposalUpdatedDate } from 'astro_2.0/features/ViewProposal/helpers';

describe('ViewProposal helpers', () => {
  it('Extract updated at date from last available action', () => {
    const proposal = {
      updatedAt: '2022-07-27T22:39:52.173Z',
      actions: [
        {
          accountId: 'jasonborn.near',
          action: 'AddProposal',
          id: 'spy-dao-1-jasonborn.near-AddProposal',
          proposalId: 'spy-dao.sputnik-dao.near-1',
          timestamp: '1655214410034830814',
          transactionHash: 'some hash here',
        },
      ],
    } as ProposalFeedItem;

    expect(getProposalUpdatedDate(proposal)).toEqual(
      '2022-06-14T13:46:50.034Z'
    );
  });

  it('Uses updatedAt if no actions available', () => {
    const proposal = {
      updatedAt: '2022-07-27T22:39:52.173Z',
    } as ProposalFeedItem;

    expect(getProposalUpdatedDate(proposal)).toEqual(
      '2022-07-27T22:39:52.173Z'
    );
  });

  it('Uses updatedAt if actions are empty', () => {
    const proposal = {
      updatedAt: '2022-07-27T22:39:52.173Z',
      actions: [],
    } as unknown as ProposalFeedItem;

    expect(getProposalUpdatedDate(proposal)).toEqual(
      '2022-07-27T22:39:52.173Z'
    );
  });

  it('Sort provided actions', () => {
    const proposal = {
      updatedAt: '2022-07-27T22:39:52.173Z',
      actions: [
        {
          accountId: 'jasonborn.near',
          action: 'AddProposal',
          id: 'spy-dao-1-jasonborn.near-AddProposal',
          proposalId: 'spy-dao.sputnik-dao.near-1',
          timestamp: '1655214410034830814',
          transactionHash: 'some hash here',
        },
        {
          accountId: 'jasonborn.near',
          action: 'VoteApprove',
          id: 'spy-dao-1-jasonborn.near-AddProposal',
          proposalId: 'spy-dao.sputnik-dao.near-1',
          timestamp: '1655214410024830814',
          transactionHash: 'some hash here',
        },
        {
          accountId: 'jasonborn.near',
          action: 'VoteReject',
          id: 'spy-dao-1-jasonborn.near-AddProposal',
          proposalId: 'spy-dao.sputnik-dao.near-1',
          timestamp: '1655214410084830814',
          transactionHash: 'some hash here',
        },
      ],
    } as ProposalFeedItem;

    expect(getProposalUpdatedDate(proposal)).toEqual(
      '2022-06-14T13:46:50.084Z'
    );
  });
});

'''
'''--- astro_2.0/features/dao/HeaderWithFilter/index.ts ---
export * from './HeaderWithFilter';

'''
'''--- astro_2.0/features/pages/cfcLibrary/components/ListModal/index.ts ---
export * from './ListModal';

'''
'''--- astro_2.0/features/pages/cfcLibrary/components/OptionsList/index.ts ---
export * from './OptionsList';

'''
'''--- astro_2.0/features/pages/cfcLibrary/components/TemplatesList/components/TemplatesListItem/index.ts ---
export * from './TemplatesListItem';

'''
'''--- astro_2.0/features/pages/cfcLibrary/components/TemplatesList/index.ts ---
export * from './TemplatesList';

'''
'''--- astro_2.0/features/pages/cfcLibrary/context.ts ---
import { createContext, useContext } from 'react';
import { DaoFeedItem } from 'types/dao';

interface Props {
  accountDaos: DaoFeedItem[];
  accountId: string;
  onUpdate: (templateId: string, daosCount: number) => void;
}

export const CfcLibraryContext = createContext<Props>({
  accountDaos: [],
  accountId: '',
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  onUpdate: () => {},
});

export const useCfcValues = (): Props => useContext<Props>(CfcLibraryContext);

'''
'''--- astro_2.0/features/pages/cfcLibrary/hooks.ts ---
import { useCallback, useEffect, useState } from 'react';
import { useAsyncFn, useMount, useMountedState } from 'react-use';
import { SputnikHttpService } from 'services/sputnik';
import { LIST_LIMIT_DEFAULT } from 'services/sputnik/constants';
import { PaginationResponse } from 'types/api';
import { SharedProposalTemplate } from 'types/proposalTemplate';
import { useRouter } from 'next/router';
import { useDebounceEffect } from 'hooks/useDebounceUpdateEffect';
import { useWalletContext } from 'context/WalletContext';

export type PageData = PaginationResponse<SharedProposalTemplate[]>;

export function useCfcLibraryData(): {
  loading: boolean;
  loadMore: () => void;
  data: PageData | null;
  handleSearch: (val: string) => Promise<void>;
  handleReset: () => void;
  onUpdate: (templateId: string, daosCount: number) => void;
} {
  const router = useRouter();
  const isMounted = useMountedState();
  const { query } = router;
  const [data, setData] = useState<PageData | null>(null);

  const [{ loading }, fetchData] = useAsyncFn(
    async (_initialData?: PageData | null) => {
      let accumulatedListData = _initialData || null;

      const res = await SputnikHttpService.getSharedProposalTemplates({
        offset: accumulatedListData?.data.length || 0,
        limit: LIST_LIMIT_DEFAULT,
        sort: query.sort as string,
        searchInput: (query.search as string) ?? '',
      });

      if (!res) {
        return null;
      }

      accumulatedListData = {
        ...res,
        data: [...(accumulatedListData?.data || []), ...(res.data || [])],
      };

      return accumulatedListData;
    },
    [query.sort, query.search]
  );

  const handleSearch = useCallback(
    async value => {
      const nextQuery = {
        ...query,
        search: value,
      };

      await router.replace(
        {
          query: nextQuery,
        },
        undefined,
        { shallow: true, scroll: false }
      );
    },
    [query, router]
  );

  const handleReset = useCallback(async () => {
    const nextQuery = {
      ...query,
      search: '',
    };

    await router.replace(
      {
        query: nextQuery,
      },
      undefined,
      { shallow: true, scroll: false }
    );
  }, [query, router]);

  useDebounceEffect(
    async ({ isInitialCall, depsHaveChanged }) => {
      if (isInitialCall || !depsHaveChanged) {
        return;
      }

      const newData = await fetchData();

      if (isMounted()) {
        setData(newData);
      }

      window.scroll(0, 0);
    },
    1000,
    [query.sort, query.search]
  );

  const loadMore = async () => {
    if (loading) {
      return;
    }

    const newData = await fetchData(data);

    if (isMounted()) {
      setData(newData);
    }
  };

  useMount(() => loadMore());

  const onUpdate = useCallback(
    (templateId, daosCount) => {
      if (!data) {
        return;
      }

      const newData = data.data.map(item => {
        if (templateId === item.id) {
          return {
            ...item,
            daoCount: item.daoCount + daosCount,
          };
        }

        return item;
      });

      setData({
        ...data,
        data: newData,
      });
    },
    [data]
  );

  return {
    loading,
    loadMore,
    data,
    handleSearch,
    handleReset,
    onUpdate,
  };
}

type CloneDaoParams = { templateId: string; targetDao: string };

export function useCloneCfcTemplate(): {
  cloning: boolean;
  cloneToDao: (
    params: CloneDaoParams[]
  ) => Promise<({ proposalTemplateId: string; daoId: string } | null)[]>;
} {
  const { accountId, pkAndSignature } = useWalletContext();

  const [{ loading: cloning }, cloneToDao] = useAsyncFn(
    async (params: CloneDaoParams[]) => {
      if (pkAndSignature?.publicKey && pkAndSignature?.signature) {
        return Promise.all(
          params.map(({ templateId, targetDao }) =>
            SputnikHttpService.cloneTemplateToDao({
              templateId,
              targetDao,
              accountId,
              publicKey: pkAndSignature.publicKey ?? '',
              signature: pkAndSignature.signature ?? '',
            })
          )
        );
      }

      return Promise.resolve([]);
    },
    [accountId, pkAndSignature]
  );

  return {
    cloning,
    cloneToDao,
  };
}

export function useSharedTemplatePageData(): {
  data: SharedProposalTemplate | null;
  loading: boolean;
  templateId: string;
  loadingSmartContractData: boolean;
  templatesBySmartContract: SharedProposalTemplate[] | null | undefined;
} {
  const router = useRouter();
  const isMounted = useMountedState();
  const {
    query: { template },
  } = router;

  const templateId = template as string;

  const [data, setData] = useState<SharedProposalTemplate | null>(null);

  const [{ loading }, fetchData] = useAsyncFn(async () => {
    const res = await SputnikHttpService.getSharedProposalTemplate(templateId);

    if (res && isMounted()) {
      setData(res);
    }
  }, [templateId, isMounted]);

  const [
    { loading: loadingSmartContractData, value: templatesBySmartContract },
    fetchSmartContractData,
  ] = useAsyncFn(async () => {
    if (!data) {
      return null;
    }

    return SputnikHttpService.getTemplatesBySmartContract(
      data.config.smartContractAddress,
      templateId
    );
  }, [data, templateId]);

  useEffect(() => {
    fetchSmartContractData();
  }, [fetchSmartContractData]);

  useEffect(() => {
    (async () => {
      await fetchData();
    })();
  }, [fetchData]);

  return {
    data,
    loading,
    templateId,
    loadingSmartContractData,
    templatesBySmartContract,
  };
}

'''
'''--- astro_2.0/features/pages/cfcLibrary/index.ts ---
export * from './context';
export * from './hooks';

'''
'''--- astro_2.0/features/pages/myAccount/AccountBadge/index.ts ---
export * from './AccountBadge';

'''
'''--- astro_2.0/features/pages/myAccount/cards/AllowanceKeysCard/components/AllowanceKeyModal/index.ts ---
export * from 'astro_2.0/features/pages/myAccount/cards/AllowanceKeysCard/components/AllowanceKeyModal/AllowanceKeyModal';

'''
'''--- astro_2.0/features/pages/myAccount/cards/AllowanceKeysCard/components/AllowanceKeysRow/index.ts ---
export * from 'astro_2.0/features/pages/myAccount/cards/AllowanceKeysCard/components/AllowanceKeysRow/AllowanceKeyRow';

'''
'''--- astro_2.0/features/pages/myAccount/cards/AllowanceKeysCard/index.ts ---
export * from 'astro_2.0/features/pages/myAccount/cards/AllowanceKeysCard/AllowanceKeysCard';

'''
'''--- astro_2.0/features/pages/myAccount/cards/AllowanceKeysCard/types.ts ---
import { AllowanceKey } from 'services/sputnik/SputnikNearService/types';

export type DaoWithAllowanceKey = {
  daoId: string;
  allowanceKey: AllowanceKey | undefined;
  daoName: string;
};

'''
'''--- astro_2.0/features/pages/myAccount/cards/CardLine/index.ts ---
export * from './CardLine';

'''
'''--- astro_2.0/features/pages/myAccount/cards/CardTitle/index.ts ---
export * from './CardTitle';

'''
'''--- astro_2.0/features/pages/myAccount/cards/ConfigCard/index.ts ---
export * from './ConfigCard';

'''
'''--- astro_2.0/features/pages/myAccount/cards/ContactInfo/index.ts ---
export * from './ContactInfo';

'''
'''--- astro_2.0/features/pages/myAccount/cards/NotificationCard/index.ts ---
export * from './NotificationCard';

'''
'''--- astro_2.0/features/pages/myAccount/cards/WalletIdCard/components/AddUserInfoModal/components/SaveButton/index.ts ---
export * from './SaveButton';

'''
'''--- astro_2.0/features/pages/myAccount/cards/WalletIdCard/components/AddUserInfoModal/components/SendEmail/index.ts ---
export * from './SendEmail';

'''
'''--- astro_2.0/features/pages/myAccount/cards/WalletIdCard/components/AddUserInfoModal/index.ts ---
export * from './AddUserInfoModal';

'''
'''--- astro_2.0/features/pages/myAccount/cards/WalletIdCard/components/AddUserInfoModal/types.ts ---
export type ContactForm = {
  contact: string;
  verificationCode: string;
};

'''
'''--- astro_2.0/features/pages/myAccount/cards/WalletIdCard/components/AddUserInfoModal/useValidationSchema.ts ---
import * as yup from 'yup';
import { useMemo } from 'react';
import { AnyObjectSchema } from 'yup';
import { useTranslation } from 'next-i18next';

export function useValidationSchema(
  isEmail: boolean,
  tBase: string
): AnyObjectSchema {
  const { t } = useTranslation('common');

  const schema = useMemo(() => {
    const valBase = isEmail ? `${tBase}.email` : `${tBase}.phone`;

    const validation = isEmail
      ? yup
          .string()
          .required(t(`${valBase}.required`))
          .email(t(`${valBase}.error`))
      : yup
          .string()
          .required(t(`${valBase}.required`))
          .matches(/^(\+[0-9]*)$/, t(`${valBase}.error`));

    return yup.object().shape({
      contact: validation,
    });
  }, [t, tBase, isEmail]);

  return schema;
}

'''
'''--- astro_2.0/features/pages/myAccount/cards/WalletIdCard/components/ContactLine/index.ts ---
export * from './ContactLine';

'''
'''--- astro_2.0/features/pages/myAccount/cards/WalletIdCard/components/UsaOnly/index.ts ---
export * from './UsaOnly';

'''
'''--- astro_2.0/features/pages/myAccount/cards/WalletIdCard/index.ts ---
export * from './WalletIdCard';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/BountiesPageContent/index.ts ---
export * from './BountiesPageContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateDraftPageContent/index.ts ---
export * from './CreateDraftPageContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/AmountBalanceCard/index.ts ---
export * from './AmountBalanceCard';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/ChooseExistingToken/index.ts ---
export * from './ChooseExistingToken';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/CreateGovernanceTokenWizard/index.ts ---
export * from './CreateGovernanceTokenWizard';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/SubHeader/index.ts ---
export * from './SubHeader';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/TokenBalance/index.ts ---
export * from './TokenBalance';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/WarningPanel/index.ts ---
export * from './WarningPanel';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/steps/ChangeVotingPolicy/index.ts ---
export * from './ChangeVotingPolicy';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/steps/ContractAcceptance/index.ts ---
export * from './ContractAcceptance';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/steps/CreateToken/components/CreationProgress/index.ts ---
export * from './CreationProgress';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/steps/CreateToken/index.ts ---
export * from './CreateToken';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/steps/DelegateVoting/index.ts ---
export * from './DelegateVoting';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/steps/Intro/components/AdvantageDescription/index.ts ---
export * from './AdvantageDescription';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/steps/Intro/index.ts ---
export * from './Intro';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/steps/SelectToken/components/TokenOption/index.ts ---
export * from './TokenOption';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/steps/SelectToken/constants.ts ---
export const TOKEN_OPTIONS = {
  NEW: 'NEW',
  EXISTING: 'EXISTING',
};

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/steps/SelectToken/index.ts ---
export * from './SelectToken';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/steps/StakeTokens/index.ts ---
export * from './StakeTokens';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/components/steps/TokenDistribution/index.ts ---
export * from './TokenDistribution';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/constants.ts ---
export const STEPS = {
  INTRO: 'intro',
  SELECT_TOKEN: 'select-token',
  CREATE_TOKEN: 'create-token',
  WIZARD: 'wizard',
  CONTRACT_ACCEPTANCE: 'contract-acceptance',
  TOKEN_DISTRIBUTION: 'token-distribution',
  CHANGE_VOTING_POLICY: 'change-voting-policy',
};

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/helpers.ts ---
import {
  CreateGovernanceTokenFlow,
  CreateGovernanceTokenSteps,
  ProgressStatus,
} from 'types/settings';
import { TFunction } from 'next-i18next';
import { ProposalFeedItem, ProposalVariant } from 'types/proposal';

type Step = {
  label: string;
  value: string;
  isCurrent: boolean;
  isHidden?: boolean;
};

const T_BASE = 'createGovernanceTokenPage.createToken.progress';

function getSteps(t: TFunction) {
  const steps: Step[] = [
    {
      label: t(`${T_BASE}.createToken`),
      value: 'createToken',
      isCurrent: false,
    },
    {
      label: t(`${T_BASE}.deployStakingContract`),
      value: 'deployStakingContract',
      isCurrent: false,
    },
    {
      label: t(`${T_BASE}.acceptStakingContract`),
      value: 'acceptStakingContract',
      isCurrent: false,
    },
    {
      label: t(`${T_BASE}.changeDaoPolicy`),
      value: 'changeDaoPolicy',
      isCurrent: false,
    },
    {
      label: t(`${T_BASE}.proposalCreation`),
      value: 'changeDaoPolicy',
      isCurrent: false,
    },
    {
      label: t(`${T_BASE}.votingPermissions`),
      value: 'changeDaoPolicy',
      isCurrent: false,
    },
    {
      label: t(`${T_BASE}.stakeTokens`),
      value: 'stakeTokens',
      isCurrent: false,
    },
    {
      label: t(`${T_BASE}.delegateVoting`),
      value: 'delegateVoting',
      isCurrent: false,
    },
  ];

  return steps;
}

export function getCreateGovernanceTokenSteps(
  status: ProgressStatus,
  proposal: ProposalFeedItem | null,
  t: TFunction
): Step[] | null {
  if (!status) {
    return null;
  }

  const { step, flow } = status;

  const steps = getSteps(t);

  return steps
    ?.map((currentStep, ind) => {
      const index = ind + 1;

      const isComplete =
        index < step || (index <= step && proposal?.status === 'Approved');

      let stepContent = currentStep;

      if (
        currentStep.value === 'createToken' &&
        flow === CreateGovernanceTokenFlow.SelectToken
      ) {
        stepContent = {
          ...stepContent,
          label: t(`${T_BASE}.selectToken`),
        };
      }

      return index === step
        ? { ...stepContent, isCurrent: true, isComplete }
        : { ...stepContent, isCurrent: false, isComplete };
    })
    .filter(st => !st.isHidden);
}

export function getCreateGovernanceTokenStepProposalVariant(
  status: ProgressStatus
): ProposalVariant | null {
  if (!status) {
    return null;
  }

  const { step, flow } = status;

  switch (step) {
    case CreateGovernanceTokenSteps.CreateToken: {
      return flow !== CreateGovernanceTokenFlow.SelectToken
        ? ProposalVariant.ProposeCreateToken
        : null;
    }
    case CreateGovernanceTokenSteps.ContractAcceptance: {
      return ProposalVariant.ProposeStakingContractDeployment;
    }
    case CreateGovernanceTokenSteps.AcceptStakingContract: {
      return ProposalVariant.ProposeAcceptStakingContract;
    }
    case CreateGovernanceTokenSteps.ChangeDaoPolicy: {
      return ProposalVariant.ProposeUpdateVotePolicyToWeightVoting;
    }
    case CreateGovernanceTokenSteps.ProposalCreationPolicy: {
      return ProposalVariant.ProposeChangeProposalCreationPermissions;
    }
    case CreateGovernanceTokenSteps.ProposalVotingPolicy: {
      return ProposalVariant.ProposeChangeProposalVotingPermissions;
    }
    case CreateGovernanceTokenSteps.StakeTokens: {
      return ProposalVariant.ProposeStakeTokens;
    }
    case CreateGovernanceTokenSteps.DelegateVoting: {
      return ProposalVariant.ProposeDelegateVoting;
    }
    default: {
      return null;
    }
  }
}

export function getNextCreateGovernanceTokenWizardStep(
  currentStep: CreateGovernanceTokenSteps
): CreateGovernanceTokenSteps | null {
  switch (currentStep) {
    case CreateGovernanceTokenSteps.ChooseFlow: {
      return CreateGovernanceTokenSteps.CreateToken;
    }
    case CreateGovernanceTokenSteps.CreateToken: {
      return CreateGovernanceTokenSteps.ContractAcceptance;
    }
    case CreateGovernanceTokenSteps.ContractAcceptance: {
      return CreateGovernanceTokenSteps.AcceptStakingContract;
    }
    case CreateGovernanceTokenSteps.AcceptStakingContract: {
      return CreateGovernanceTokenSteps.ChangeDaoPolicy;
    }
    case CreateGovernanceTokenSteps.ChangeDaoPolicy: {
      return CreateGovernanceTokenSteps.ProposalCreationPolicy;
    }
    case CreateGovernanceTokenSteps.ProposalCreationPolicy: {
      return CreateGovernanceTokenSteps.ProposalVotingPolicy;
    }
    case CreateGovernanceTokenSteps.ProposalVotingPolicy: {
      return CreateGovernanceTokenSteps.StakeTokens;
    }
    case CreateGovernanceTokenSteps.StakeTokens: {
      return CreateGovernanceTokenSteps.DelegateVoting;
    }
    case CreateGovernanceTokenSteps.DelegateVoting: {
      return null;
    }
    default: {
      return null;
    }
  }
}

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/hooks.ts ---
import { useEffect, useState } from 'react';
import { useAsyncFn } from 'react-use';
import {
  CreateGovernanceTokenSteps,
  ProgressStatus,
  Settings,
} from 'types/settings';
import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';
import { ProposalType } from 'types/proposal';
import { useDaoCustomTokens } from 'context/DaoTokensContext';
import { UserPermissions } from 'types/context';
import { useDaoSettings } from 'context/DaoSettingsContext';
import { SputnikHttpService } from 'services/sputnik';
import { CREATE_GOV_TOKEN_PAGE_URL } from 'constants/routing';
import { useRouter } from 'next/router';
import { useWalletContext } from 'context/WalletContext';

export function useCreateGovernanceTokenStatus(): {
  loading: boolean;
  status: ProgressStatus | null;
  update: ({
    step,
    proposalId,
  }: {
    step: CreateGovernanceTokenSteps | null;
    proposalId: number | null;
  }) => Promise<void>;
} {
  const [status, setStatus] = useState<ProgressStatus | null>(null);

  const { loading, settings, update: updateSettings } = useDaoSettings();

  const [{ loading: updatingStatus }, update] = useAsyncFn(
    async ({ step, proposalId, flow, ...rest }) => {
      try {
        const newSettings = {
          createGovernanceToken: {
            step,
            proposalId,
            flow,
            ...rest,
          },
        };

        await updateSettings(newSettings);
      } catch (err) {
        const { message } = err;

        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 20000,
          description: message,
        });
      }
    },
    [updateSettings]
  );

  useEffect(() => {
    if (!settings) {
      return;
    }

    if (settings?.createGovernanceToken) {
      setStatus(settings.createGovernanceToken);
    }
  }, [settings]);

  return {
    loading: loading || updatingStatus,
    status,
    update,
  };
}

export function useLowBalanceWarning(
  userPermissions: UserPermissions,
  step?: CreateGovernanceTokenSteps
): boolean {
  const { tokens } = useDaoCustomTokens();

  const isPermitted =
    userPermissions.isCanCreateProposals &&
    userPermissions.allowedProposalsToCreate[ProposalType.SetStakingContract];

  if (!isPermitted || !tokens?.NEAR?.balance) {
    return false;
  }

  return (
    (!step || step < CreateGovernanceTokenSteps.ContractAcceptance) &&
    Number(tokens.NEAR.balance) < 11
  );
}

export function useUpdateGovernanceTokenWizardProgress(): {
  update: (
    daoId: string,
    updates: Record<string, string | boolean | null | number>
  ) => Promise<void>;
} {
  const router = useRouter();
  const { accountId, nearService, pkAndSignature } = useWalletContext();

  const [, update] = useAsyncFn(
    async (daoId, updates) => {
      if (!pkAndSignature) {
        return;
      }

      try {
        const latestSettings =
          (await SputnikHttpService.getDaoSettings(daoId)) ?? ({} as Settings);

        const newSettings: Settings = {
          ...latestSettings,
          createGovernanceToken: {
            ...(latestSettings.createGovernanceToken ?? {}),
            ...updates,
          },
        };

        const { publicKey, signature } = pkAndSignature;

        if (publicKey && signature && accountId) {
          await SputnikHttpService.updateDaoSettings(daoId, {
            accountId,
            publicKey,
            signature,
            settings: newSettings,
          });

          // redirect to wizard
          router.push({
            pathname: CREATE_GOV_TOKEN_PAGE_URL,
            query: {
              dao: daoId,
            },
          });
        }
      } catch (err) {
        const { message } = err;

        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 20000,
          description: message,
        });
      }
    },
    [nearService, pkAndSignature, router]
  );

  return { update };
}

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/index.ts ---
export * from './CreateGovernanceTokenPageContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/types.ts ---
import { Contract } from 'near-api-js';

export interface CustomContract extends Contract {
  // eslint-disable-next-line camelcase
  ft_balance_of: (params: { account_id: string }) => Promise<string>;
  // eslint-disable-next-line camelcase
  ft_metadata: () => Promise<{ symbol: string; decimals: number }>;
}

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CustomFunctionCallTemplatesPageContent/components/CustomFcTemplateCard/components/ApplyToDaos/index.ts ---
export * from './ApplyToDaos';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CustomFunctionCallTemplatesPageContent/components/CustomFcTemplateCard/index.ts ---
import { CustomFcTemplateCard } from 'astro_2.0/features/pages/nestedDaoPagesContent/CustomFunctionCallTemplatesPageContent/components/CustomFcTemplateCard/CustomFcTemplateCard';

export default CustomFcTemplateCard;

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CustomFunctionCallTemplatesPageContent/hooks.ts ---
import { useState } from 'react';
import { useAsyncFn, useMount, useMountedState } from 'react-use';

import { SputnikHttpService } from 'services/sputnik';

import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';

import { useWalletContext } from 'context/WalletContext';

import {
  ProposalTemplate,
  TemplateUpdatePayload,
} from 'types/proposalTemplate';
import { GA_EVENTS, sendGAEvent } from 'utils/ga';

export function useProposalTemplates(daoId: string): {
  deleteTemplate: (id: string) => void;
  updateTemplate: (id: string, data: TemplateUpdatePayload) => void;
  templates: ProposalTemplate[];
  loading: boolean;
} {
  const { accountId, pkAndSignature } = useWalletContext();
  const isMounted = useMountedState();
  const [templates, setTemplates] = useState<ProposalTemplate[]>([]);

  const [{ loading }, getTemplates] = useAsyncFn(async () => {
    const res = await SputnikHttpService.getProposalTemplates(daoId);

    if (isMounted()) {
      setTemplates(res);
    }
  }, [accountId, isMounted]);

  useMount(async () => {
    await getTemplates();
  });

  const [, updateTemplate] = useAsyncFn(
    async (id, data) => {
      if (!pkAndSignature) {
        return;
      }

      const { publicKey, signature } = pkAndSignature;
      const { name, isEnabled, config, description } = data;

      if (publicKey && signature) {
        try {
          const updatedTemplate =
            await SputnikHttpService.updateProposalTemplate(daoId, id, {
              accountId,
              publicKey,
              signature,
              name,
              description,
              isEnabled,
              config,
            });

          showNotification({
            type: NOTIFICATION_TYPES.SUCCESS,
            lifetime: 10000,
            description: 'Successfully updated proposal template',
          });

          setTemplates(
            templates.map(item => {
              if (item.id === updatedTemplate.id) {
                return updatedTemplate;
              }

              return item;
            })
          );
        } catch (e) {
          showNotification({
            type: NOTIFICATION_TYPES.ERROR,
            lifetime: 20000,
            description: e.message,
          });
        }
      }
    },
    [accountId, pkAndSignature, templates]
  );

  const [, deleteTemplate] = useAsyncFn(
    async id => {
      if (!pkAndSignature) {
        return;
      }

      const { publicKey, signature } = pkAndSignature;

      if (publicKey && signature) {
        try {
          await SputnikHttpService.deleteProposalTemplate(daoId, id, {
            accountId,
            publicKey,
            signature,
          });

          showNotification({
            type: NOTIFICATION_TYPES.SUCCESS,
            lifetime: 10000,
            description: 'Successfully deleted proposal template',
          });

          setTemplates(templates.filter(item => item.id !== id));
        } catch (e) {
          showNotification({
            type: NOTIFICATION_TYPES.ERROR,
            lifetime: 20000,
            description: e.message,
          });
        }
      }
    },
    [accountId, pkAndSignature, templates]
  );

  return {
    deleteTemplate,
    updateTemplate,
    templates,
    loading,
  };
}

export function useSaveTemplates(): {
  saveTemplates: (data: TemplateUpdatePayload[]) => Promise<void>;
} {
  const { accountId, pkAndSignature } = useWalletContext();

  const [, saveTemplates] = useAsyncFn(
    async data => {
      if (!pkAndSignature) {
        return;
      }

      const { publicKey, signature } = pkAndSignature;

      if (publicKey && signature) {
        try {
          await Promise.all(
            data.map(
              ({
                daoId,
                name,
                description = '',
                isEnabled,
                config,
              }: TemplateUpdatePayload) => {
                return SputnikHttpService.saveProposalTemplate(daoId, {
                  accountId,
                  publicKey,
                  signature,
                  name,
                  isEnabled,
                  description,
                  config,
                });
              }
            )
          );

          sendGAEvent({
            name: GA_EVENTS.SAVE_FC_TEMPLATE,
            accountId,
            params: {
              templateName: data[0].name,
              daoIds: data
                .map((item: TemplateUpdatePayload) => item.daoId)
                .join(','),
            },
          });

          showNotification({
            type: NOTIFICATION_TYPES.SUCCESS,
            lifetime: 10000,
            description: 'Successfully saved proposal template',
          });
        } catch (e) {
          showNotification({
            type: NOTIFICATION_TYPES.ERROR,
            lifetime: 20000,
            description: e.message,
          });
        }
      }
    },
    [accountId, pkAndSignature]
  );

  return {
    saveTemplates,
  };
}

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/CustomFunctionCallTemplatesPageContent/index.ts ---
export * from './CustomFunctionCallTemplatesPageContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DaoConfigPageContent/index.ts ---
export * from './DaoConfigPageContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DaoPolicyPageContent/components/DraftSettings/index.ts ---
export * from './DraftSettings';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DaoPolicyPageContent/components/ManageGroups/components/EditGroup/hooks/useProcessMembersPaste.ts ---
import map from 'lodash/map';
import split from 'lodash/split';
import reduce from 'lodash/reduce';
import flatten from 'lodash/flatten';
import compact from 'lodash/compact';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { useState, useCallback, ClipboardEvent } from 'react';

import { useWalletContext } from 'context/WalletContext';

import { validateUserAccount } from 'astro_2.0/features/CreateProposal/helpers';

type Input = {
  setAddMemberName: (name: string) => void;
  addGroupMembers: (members: string[]) => void;
};

type PasteProcessOutput = {
  processing: boolean;
  onPasteMembers: (e: ClipboardEvent) => void;
};

export function useProcessMembersPaste(input: Input): PasteProcessOutput {
  const { addGroupMembers, setAddMemberName } = input;

  const { groupUploadOfGroupMembers } = useFlags();
  const [processing, setProcessing] = useState(false);

  const { nearService } = useWalletContext();

  const onPasteMembers = useCallback(
    async e => {
      if (groupUploadOfGroupMembers) {
        setProcessing(true);

        const pastedString = e.clipboardData.getData('text');

        const membersByLineBreak = split(pastedString, /\r?\n/);
        const membersBySpaces = flatten(
          map(membersByLineBreak, m => split(m, ' '))
        );
        const nonEmptyMembers = compact(membersBySpaces);
        const uniqueMembers = [...new Set(nonEmptyMembers)];

        const validationPromises = uniqueMembers.map(member =>
          validateUserAccount(member, nearService)
        );

        const validationResult = await Promise.allSettled(validationPromises);

        const membersToAdd = reduce(
          validationResult,
          (acc, res, index) => {
            if (res.status === 'fulfilled' && res.value) {
              acc.push(uniqueMembers[index].trim());
            }

            return acc;
          },
          [] as string[]
        );

        addGroupMembers(membersToAdd);

        setTimeout(() => {
          setAddMemberName('');
          setProcessing(false);
        }, 500);
      }
    },
    [nearService, addGroupMembers, setAddMemberName, groupUploadOfGroupMembers]
  );

  return {
    processing,
    onPasteMembers,
  };
}

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DaoPolicyPageContent/components/PermissionsSelector/index.ts ---
export * from './PermissionsSelector';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DaoPolicyPageContent/helpers.ts ---
import { ProposalType } from 'types/proposal';
import { APP_TO_CONTRACT_PROPOSAL_TYPE } from 'utils/dataConverter';

export type SelectorRow = {
  label: string;
  config: boolean;
  policy: boolean;
  call: boolean;
  upgradeSelf: boolean;
  upgradeRemote: boolean;
  setStakingContract: boolean;
  bounty: boolean;
  bountyDone: boolean;
  transfer: boolean;
  poll: boolean;
  removeMember: boolean;
  addMember: boolean;
};

export function getInitialCreationPermissions(dao: {
  policy: {
    roles: {
      kind: 'Everyone' | 'Group' | 'Member';
      name: string;
      slug?: string;
      permissions: string[];
    }[];
  };
}): SelectorRow[] {
  // TODO: check is there are only one role with kind Everyone
  // role => role.kind === 'Everyone' && role.slug === 'all'

  const { roles } = dao.policy;

  return roles.map(group => {
    const allowAll =
      group.permissions.indexOf('*:*') !== -1 ||
      group.permissions.indexOf('*:AddProposal') !== -1;

    const config =
      allowAll ||
      group.permissions.indexOf(
        `${
          APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.ChangeConfig]
        }:AddProposal`
      ) !== -1;

    const policy =
      allowAll ||
      group.permissions.indexOf(
        `${
          APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.ChangePolicy]
        }:AddProposal`
      ) !== -1;

    const bounty =
      allowAll ||
      group.permissions.indexOf(
        `${APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.AddBounty]}:AddProposal`
      ) !== -1;

    const bountyDone =
      allowAll ||
      group.permissions.indexOf(
        `${APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.BountyDone]}:AddProposal`
      ) !== -1;

    const transfer =
      allowAll ||
      group.permissions.indexOf(
        `${APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.Transfer]}:AddProposal`
      ) !== -1;

    const call =
      allowAll ||
      group.permissions.indexOf(
        `${
          APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.FunctionCall]
        }:AddProposal`
      ) !== -1;

    const poll =
      allowAll ||
      group.permissions.indexOf(
        `${APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.Vote]}:AddProposal`
      ) !== -1;

    const removeMember =
      allowAll ||
      group.permissions.indexOf(
        `${
          APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.RemoveMemberFromRole]
        }:AddProposal`
      ) !== -1;

    const addMember =
      allowAll ||
      group.permissions.indexOf(
        `${
          APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.AddMemberToRole]
        }:AddProposal`
      ) !== -1;

    const upgradeSelf =
      allowAll ||
      group.permissions.indexOf(
        `${APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.UpgradeSelf]}:AddProposal`
      ) !== -1;

    const upgradeRemote =
      allowAll ||
      group.permissions.indexOf(
        `${
          APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.UpgradeRemote]
        }:AddProposal`
      ) !== -1;

    const setStakingContract =
      allowAll ||
      group.permissions.indexOf(
        `${
          APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.SetStakingContract]
        }:AddProposal`
      ) !== -1;

    return {
      label: group.name,
      policy,
      bounty,
      bountyDone,
      transfer,
      poll,
      removeMember,
      addMember,
      config,
      call,
      upgradeRemote,
      upgradeSelf,
      setStakingContract,
    };
  });
}

export function getInitialVotingPermissions(dao: {
  policy: {
    roles: {
      kind: 'Everyone' | 'Group' | 'Member';
      name: string;
      permissions: string[];
    }[];
  };
}): SelectorRow[] {
  return dao.policy.roles.map(group => {
    const allowAll =
      group.permissions.indexOf('*:*') !== -1 ||
      group.permissions.indexOf('*:VoteApprove') !== -1;

    const config =
      allowAll ||
      group.permissions.indexOf(
        `${
          APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.ChangeConfig]
        }:VoteApprove`
      ) !== -1;

    const policy =
      allowAll ||
      group.permissions.indexOf(
        `${
          APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.ChangePolicy]
        }:VoteApprove`
      ) !== -1;

    const bounty =
      allowAll ||
      group.permissions.indexOf(
        `${APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.AddBounty]}:VoteApprove`
      ) !== -1;

    const bountyDone =
      allowAll ||
      group.permissions.indexOf(
        `${APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.BountyDone]}:VoteApprove`
      ) !== -1;

    const transfer =
      allowAll ||
      group.permissions.indexOf(
        `${APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.Transfer]}:VoteApprove`
      ) !== -1;

    const call =
      allowAll ||
      group.permissions.indexOf(
        `${
          APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.FunctionCall]
        }:VoteApprove`
      ) !== -1;

    const poll =
      allowAll ||
      group.permissions.indexOf(
        `${APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.Vote]}:VoteApprove`
      ) !== -1;

    const removeMember =
      allowAll ||
      group.permissions.indexOf(
        `${
          APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.RemoveMemberFromRole]
        }:VoteApprove`
      ) !== -1;

    const addMember =
      allowAll ||
      group.permissions.indexOf(
        `${
          APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.AddMemberToRole]
        }:VoteApprove`
      ) !== -1;

    const upgradeSelf =
      allowAll ||
      group.permissions.indexOf(
        `${APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.UpgradeSelf]}:VoteApprove`
      ) !== -1;

    const upgradeRemote =
      allowAll ||
      group.permissions.indexOf(
        `${
          APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.UpgradeRemote]
        }:VoteApprove`
      ) !== -1;

    const setStakingContract =
      allowAll ||
      group.permissions.indexOf(
        `${
          APP_TO_CONTRACT_PROPOSAL_TYPE[ProposalType.SetStakingContract]
        }:VoteApprove`
      ) !== -1;

    return {
      label: group.name,
      policy,
      bounty,
      bountyDone,
      transfer,
      poll,
      removeMember,
      addMember,
      call,
      config,
      setStakingContract,
      upgradeSelf,
      upgradeRemote,
    };
  });
}

export function isOptionDisabled(
  dataField: string,
  groupName: string,
  value: boolean
): boolean {
  if (groupName.toLowerCase() !== 'council') {
    return false;
  }

  switch (dataField) {
    case 'config':
    case 'policy':
    case 'addMember':
    case 'removeMember': {
      return value;
    }
    default: {
      return false;
    }
  }
}

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DaoPolicyPageContent/index.ts ---
export * from './DaoPolicyPageContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DaoVersionPageContent/components/UpgradeVersionWizard/components/ViewStepProposal/index.ts ---
export * from './ViewStepProposal';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DaoVersionPageContent/components/UpgradeVersionWizard/helpers.ts ---
import { UpgradeStatus, UpgradeSteps } from 'types/settings';
import { ProposalFeedItem, ProposalVariant } from 'types/proposal';

type Step = {
  label: string;
  value: string;
  isCurrent: boolean;
};

const upgradeSteps: Step[] = [
  {
    label: 'Get Code From Factory',
    value: 'getLatestCode',
    isCurrent: true,
  },
  {
    label: 'Upgrade DAO',
    value: 'upgradeSelf',
    isCurrent: false,
  },
  {
    label: 'Recover Storage Costs',
    value: 'removeUpgradeCodeBlob',
    isCurrent: false,
  },
];

export function getVersionUpgradeSteps(
  upgradeStatus: UpgradeStatus,
  proposal: ProposalFeedItem | null
): Step[] | null {
  if (!upgradeStatus) {
    return null;
  }

  const { upgradeStep } = upgradeStatus;

  return upgradeSteps?.map((value, index) => {
    const isComplete =
      index < upgradeStep ||
      (index <= upgradeStep && proposal?.status === 'Approved');

    return index === upgradeStep
      ? { ...value, isCurrent: true, isComplete }
      : { ...value, isCurrent: false, isComplete };
  });
}

export function getStepProposalVariant(
  upgradeStatus: UpgradeStatus
): ProposalVariant | null {
  if (!upgradeStatus) {
    return null;
  }

  const { upgradeStep } = upgradeStatus;

  switch (upgradeStep) {
    case UpgradeSteps.UpgradeSelf: {
      return ProposalVariant.ProposeUpgradeSelf;
    }
    case UpgradeSteps.RemoveUpgradeCode: {
      return ProposalVariant.ProposeRemoveUpgradeCode;
    }
    default:
    case UpgradeSteps.GetUpgradeCode: {
      return ProposalVariant.ProposeGetUpgradeCode;
    }
  }
}

export function getNextUpgradeStep(
  currentStep: UpgradeSteps
): UpgradeSteps | null {
  switch (currentStep) {
    case UpgradeSteps.UpgradeSelf: {
      return UpgradeSteps.RemoveUpgradeCode;
    }
    case UpgradeSteps.RemoveUpgradeCode: {
      return null;
    }
    default:
    case UpgradeSteps.GetUpgradeCode: {
      return UpgradeSteps.UpgradeSelf;
    }
  }
}

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DaoVersionPageContent/components/UpgradeVersionWizard/index.ts ---
export * from './UpgradeVersionWizard';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DaoVersionPageContent/components/VersionCheck/index.ts ---
export * from './VersionCheck';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DaoVersionPageContent/hooks.ts ---
import { useCallback, useEffect, useState } from 'react';
import { DAO } from 'types/dao';
import { useAsyncFn } from 'react-use';
import { SputnikHttpService } from 'services/sputnik';
import { Settings, UpgradeStatus, UpgradeSteps } from 'types/settings';
import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';
import { configService } from 'services/ConfigService';
import { useWalletContext } from 'context/WalletContext';
import { useDaoSettings } from 'context/DaoSettingsContext';

type Version = [string, { version: number[] }];

export function useCheckDaoUpgrade(dao: DAO): {
  version: Version | null;
  loading: boolean;
} {
  const { nearService } = useWalletContext();
  const [loading, setLoading] = useState(true);
  const { appConfig } = configService.get();

  const [version, setVersion] = useState<Version | null>(null);

  const getUpgradeInfo = useCallback(async () => {
    try {
      if (!nearService) {
        return;
      }

      const accountId = nearService.getAccountId();

      if (!appConfig || !accountId || dao.daoVersion?.version[0] === 2) {
        return;
      }

      const metadata = await nearService.getContractsMetadata();

      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const sortedMeta = metadata.sort((v1, v2) => {
        if (v1[1].version > v2[1].version) {
          return 1;
        }

        if (v1[1].version < v2[1].version) {
          return -1;
        }

        return 0;
      });

      const currentVersionMeta = sortedMeta.find(
        meta => meta[0] === dao.daoVersion?.hash
      );

      const nextVersion = currentVersionMeta
        ? sortedMeta.find(
            meta => meta[1].version[0] > currentVersionMeta[1].version[0]
          )
        : null;

      if (!nextVersion) {
        setLoading(false);

        return;
      }

      const hash = nextVersion[0];

      if (hash === dao.daoVersion?.hash) {
        setLoading(false);

        return;
      }

      setVersion(nextVersion);
      setLoading(false);
    } catch (e) {
      setLoading(false);
    }
  }, [appConfig, dao.daoVersion, nearService]);

  useEffect(() => {
    (async () => {
      await getUpgradeInfo();
    })();
  }, [getUpgradeInfo]);

  return {
    version,
    loading,
  };
}

export function useUpgradeStatus(daoId: string): {
  loading: boolean;
  upgradeStatus: UpgradeStatus | null;
  update: ({
    upgradeStep,
    proposalId,
    versionHash,
  }: {
    upgradeStep: UpgradeSteps | null;
    proposalId: number | null;
    versionHash: string;
  }) => Promise<void>;
} {
  const { accountId, nearService, pkAndSignature } = useWalletContext();
  const [upgradeStatus, setUpgradeStatus] = useState<UpgradeStatus | null>(
    null
  );
  const { loading, settings } = useDaoSettings();

  useEffect(() => {
    if (!settings) {
      return;
    }

    if (settings?.daoUpgrade) {
      setUpgradeStatus(settings.daoUpgrade);
    }
  }, [settings]);

  const [{ loading: updatingStatus }, update] = useAsyncFn(
    async ({ upgradeStep, proposalId, versionHash }) => {
      if (!settings || !pkAndSignature) {
        return;
      }

      try {
        const newSettings: Settings = {
          ...settings,
          daoUpgrade: {
            upgradeStep,
            proposalId,
            versionHash,
          },
        };

        const { publicKey, signature } = pkAndSignature;

        if (publicKey && signature && accountId) {
          const resp = await SputnikHttpService.updateDaoSettings(daoId, {
            accountId,
            publicKey,
            signature,
            settings: newSettings,
          });

          if (resp.daoUpgrade) {
            setUpgradeStatus(resp.daoUpgrade);
          }
        }
      } catch (err) {
        const { message } = err;

        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 20000,
          description: message,
        });
      }
    },
    [daoId, nearService, pkAndSignature]
  );

  return {
    loading: loading || updatingStatus,
    upgradeStatus,
    update,
  };
}

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DaoVersionPageContent/index.ts ---
export * from './DaoVersionPageContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/components/ControlledInput/index.ts ---
export * from './ControlledInput';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/components/DelegateGroupTable/index.ts ---
export * from './DelegateGroupTable';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/components/DelegatePageContext/index.ts ---
export * from './DelegatePageContext';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/components/DelegatePageWidget/index.ts ---
export * from './DelegatePageWidget';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/components/GoalChart/index.ts ---
export * from './GoalChart';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/components/MyBalanceWidget/index.ts ---
export * from './MyBalanceWidget';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/components/MyVotingPowerWidget/index.ts ---
export * from './MyVotingPowerWidget';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/components/QuorumErrorWarning/index.ts ---
export * from './QuorumErrorWarning';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/components/VotingPower/index.ts ---
export * from './VotingPower';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/components/VotingThresholdWidget/index.ts ---
export * from './VotingThresholdWidget';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/helpers.ts ---
import { TFunction } from 'next-i18next';
import min from 'lodash/min';
import max from 'lodash/max';
import { DAO, DaoDelegation } from 'types/dao';

export function getSortOptions(
  t: TFunction
): { label: string; value: string }[] {
  return [
    {
      label: t('ascending'),
      value: 'ASC',
    },
    {
      label: t('descending'),
      value: 'DESC',
    },
  ];
}

export function getVotingGoal(
  votingThreshold: number,
  totalSupply: number,
  quorum: number
): number {
  const target = min([votingThreshold, totalSupply]);

  const goal = max([target, quorum]);

  return goal ?? 0;
}

export function getActiveTokenHolders(
  delegations: DaoDelegation[],
  balance: string
): DaoDelegation[] {
  return delegations.filter(
    item => Number(item.balance ?? 0) >= Number(balance)
  );
}

export function getTokensVotingPolicyDetails(dao?: DAO): {
  balance: string;
  threshold: string;
  quorum: string;
} {
  const holdersRole = dao?.policy.roles.find(
    role => role.kind === 'Member' && role.name === 'TokenHolders'
  );

  if (!holdersRole) {
    return {
      balance: '0',
      threshold: '0',
      quorum: '0',
    };
  }

  return {
    threshold: holdersRole.votePolicy.vote.weight ?? '0',
    balance: holdersRole.balance ?? '0',
    quorum: holdersRole.votePolicy.vote.quorum ?? '0',
  };
}

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/hooks.ts ---
import { useAsync, useAsyncFn } from 'react-use';
import { useWalletContext } from 'context/WalletContext';
import { SputnikHttpService } from 'services/sputnik';
import { useRouter } from 'next/router';
import { DAO, DaoDelegation } from 'types/dao';
import { formatYoktoValue } from 'utils/format';
import { useCallback, useEffect, useState } from 'react';
import {
  DelegateTokenDetails,
  UserDelegateDetails,
} from 'astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/types';
import { objectKeys } from 'utils/objects';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { useDaoSettings } from 'context/DaoSettingsContext';

export function useDelegatePageData(dao: DAO): {
  loadingTotalSupply: boolean;
  totalSupply: string | undefined;
  loadingTokenDetails: boolean;
  tokenDetails:
    | (DelegateTokenDetails & { contractAddress: string })
    | undefined;
  loadingDelegateByUser: boolean;
  delegateByUser:
    | (UserDelegateDetails & {
        nextActionTime: Date;
      })
    | undefined;
  handleSearch: (val: string) => Promise<void>;
  handleReset: () => void;
  data: DaoDelegation[];
} {
  const { governanceToken, useOpenSearchDataApi } = useFlags();
  const router = useRouter();
  const { nearService, accountId } = useWalletContext();
  const { settings } = useDaoSettings();

  const daoId = router.query.dao as string;
  const ts = router.query.ts as string;

  const [data, setData] = useState<DaoDelegation[]>([]);
  const [searchFilter, setSearchFilter] = useState('');

  const { loading: loadingTokenDetails, value: tokenDetails } =
    useAsync(async () => {
      if (!nearService) {
        return undefined;
      }

      const contractAddress = settings?.createGovernanceToken?.contractAddress;

      if (!contractAddress) {
        return undefined;
      }

      const [meta, balance] = await Promise.allSettled([
        nearService.getFtMetadata(contractAddress),
        nearService.getFtBalance(
          nearService.getStackingContract(dao.name),
          accountId
        ),
      ]);

      return {
        balance:
          balance.status === 'fulfilled' && meta.status === 'fulfilled'
            ? Number(formatYoktoValue(balance.value, meta.value.decimals))
            : 0,
        symbol: meta.status === 'fulfilled' ? meta.value.symbol : 'n/a',
        decimals: meta.status === 'fulfilled' ? meta.value.decimals : 0,
        contractAddress,
      };
    }, [nearService, ts, settings]);

  const { loading: loadingTotalSupply, value: totalSupply } =
    useAsync(async () => {
      if (!nearService) {
        return undefined;
      }

      return nearService.getDelegationTotalSupply(daoId);
    }, [daoId, nearService, ts]);

  const { loading: loadingDelegateByUser, value: delegateByUser } =
    useAsync(async () => {
      if (
        !nearService ||
        !accountId ||
        !settings?.createGovernanceToken?.wizardCompleted
      ) {
        return undefined;
      }

      try {
        const stackingContract = nearService.getStackingContract(dao.name);

        if (!stackingContract) {
          return undefined;
        }

        const userData = await nearService.getUserDelegation(
          stackingContract,
          accountId
        );

        if (!userData) {
          return undefined;
        }

        const { delegatedTotal, delegatedToUser } =
          userData.delegated_amounts.reduce<{
            delegatedTotal: number;
            delegatedToUser: Record<string, string>;
          }>(
            (res, item) => {
              const [acc, balance] = item;

              res.delegatedTotal += +balance;

              res.delegatedToUser[acc] = formatYoktoValue(
                balance,
                tokenDetails?.decimals
              );

              return res;
            },
            { delegatedTotal: 0, delegatedToUser: {} }
          );

        return {
          accountId,
          delegatedBalance: Number(
            formatYoktoValue(delegatedTotal.toString(), tokenDetails?.decimals)
          ),
          stakedBalance: formatYoktoValue(
            userData.vote_amount,
            tokenDetails?.decimals
          ),
          nextActionTime: new Date(
            Number(userData.next_action_timestamp) / 1000000
          ),
          delegatedToUser,
        };
      } catch (e) {
        return undefined;
      }
    }, [dao, nearService, accountId, ts, tokenDetails, settings]);

  const [, fetchData] = useAsyncFn(async () => {
    const res = useOpenSearchDataApi
      ? dao.delegations ?? []
      : await SputnikHttpService.getDelegations(daoId, governanceToken);

    setData(res);
  }, [daoId, ts, governanceToken]);

  const handleSearch = useCallback(async searchInput => {
    setSearchFilter(searchInput);
  }, []);

  const handleReset = useCallback(() => {
    setSearchFilter('');
  }, []);

  useEffect(() => {
    (async () => {
      await fetchData();
    })();
  }, [fetchData]);

  const filteredData = data
    .filter(item => item.accountId.startsWith(searchFilter))
    .map(item => ({
      ...item,
      balance: formatYoktoValue(item.balance, tokenDetails?.decimals),
      delegators: item.delegators
        ? objectKeys(item.delegators).reduce<Record<string, string>>(
            (acc, key) => {
              acc[key] = formatYoktoValue(
                item.delegators[key],
                tokenDetails?.decimals
              );

              return acc;
            },
            {}
          )
        : {},
    }));

  return {
    loadingTotalSupply,
    totalSupply: formatYoktoValue(
      totalSupply ?? '0',
      tokenDetails?.decimals ?? 0
    ),
    loadingTokenDetails,
    tokenDetails,
    loadingDelegateByUser,
    delegateByUser,
    handleSearch,
    handleReset,
    data: filteredData,
  };
}

export function useVotingPolicyDetails(dao: DAO): {
  balance: string;
  threshold: string;
  quorum: string;
} {
  const { nearService, accountId } = useWalletContext();
  const { settings } = useDaoSettings();
  const { value: tokenDetails } = useAsync(async () => {
    if (!nearService) {
      return undefined;
    }

    try {
      const contractAddress = settings?.createGovernanceToken?.contractAddress;

      if (!contractAddress) {
        return undefined;
      }

      const [meta] = await Promise.allSettled([
        nearService.getFtMetadata(contractAddress),
      ]);

      return {
        symbol: meta.status === 'fulfilled' ? meta.value.symbol : 'n/a',
        decimals: meta.status === 'fulfilled' ? meta.value.decimals : 0,
        contractAddress,
      };
    } catch (e) {
      return undefined;
    }
  }, [nearService, settings, accountId]);

  const holdersRole = dao.policy.roles.find(
    role => role.kind === 'Member' && role.name === 'TokenHolders'
  );

  if (!holdersRole) {
    return {
      balance: '0',
      threshold: '0',
      quorum: '0',
    };
  }

  const policy = holdersRole.votePolicy?.vote || holdersRole.votePolicy['*.*'];

  return {
    threshold: formatYoktoValue(policy?.weight ?? '0', tokenDetails?.decimals),
    balance: formatYoktoValue(
      holdersRole.balance ?? '0',
      tokenDetails?.decimals
    ),
    quorum: formatYoktoValue(policy?.quorum ?? '0', tokenDetails?.decimals),
  };
}

export function useTriggerUpdate(): {
  triggerUpdate: () => Promise<void>;
} {
  const router = useRouter();

  const triggerUpdate = useCallback(async () => {
    await router.replace(
      {
        pathname: router.pathname,
        query: {
          ...router.query,
          ts: new Date().getTime(),
        },
      },
      undefined,
      {
        scroll: true,
        shallow: true,
      }
    );
  }, [router]);

  return {
    triggerUpdate,
  };
}

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/index.ts ---
export * from './DelegatePageContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/types.ts ---
import { Contract } from 'near-api-js';

export type UserDelegateDetails = {
  accountId: string;
  delegatedBalance: number;
  stakedBalance: string;
};

export type DelegateTokenDetails = {
  balance: number;
  symbol: string;
  decimals: number;
};

/* eslint-disable camelcase */
export interface CustomContract extends Contract {
  ft_balance_of: (params: { account_id: string }) => Promise<string>;
  get_user: (params: { account_id: string }) => Promise<{
    delegated_amounts: [string, string][];
    vote_amount: string;
    next_action_timestamp: string;
  }>;
  ft_metadata: () => Promise<{ symbol: string; decimals: number }>;
  delegation_total_supply: () => Promise<string>;
}

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DraftsPageContent/components/DraftCard/index.ts ---
export * from './DraftCard';
export * from './DraftCardContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DraftsPageContent/components/DraftsFilters/index.ts ---
export * from './DraftsFilters';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DraftsPageContent/components/DraftsFiltersContainer/index.ts ---
export * from './DraftsFiltersContainer';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DraftsPageContent/components/DraftsFiltersModal/Filter/index.ts ---
export * from './Filter';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DraftsPageContent/components/DraftsFiltersModal/index.ts ---
export * from './DraftsFiltersModal';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DraftsPageContent/components/DraftsMobileFilters/index.ts ---
export * from './DraftsMobileFilters';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DraftsPageContent/components/DraftsPageHeader/hooks.ts ---
import { useRef } from 'react';
import { useAsyncFn } from 'react-use';
import axios, { CancelTokenSource } from 'axios';

import { PaginationResponse } from 'types/api';

export function useDraftsSearch(): {
  handleSearch: (val: string) => Promise<PaginationResponse<unknown[]> | null>;
  loading: boolean;
  value: PaginationResponse<unknown[]> | undefined;
} {
  const cancelTokenRef = useRef<CancelTokenSource | null>(null);

  const [{ loading, value }, handleSearch] = useAsyncFn(async () => {
    if (cancelTokenRef.current) {
      cancelTokenRef.current?.cancel('Cancelled by new req');
    }

    const { CancelToken } = axios;
    const source = CancelToken.source();

    cancelTokenRef.current = source;

    return Promise.resolve({
      count: 0,
      total: 0,
      page: 1,
      pageCount: 0,
      data: [] as unknown[],
    });
  }, []);

  return {
    handleSearch,
    loading,
    value,
  };
}

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DraftsPageContent/components/DraftsPageHeader/index.ts ---
export * from './DraftsPageHeader';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DraftsPageContent/components/DraftsStatusFilter/index.ts ---
export * from './DraftsStatusFilter';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DraftsPageContent/helpers.ts ---
import { ProposalCategories, ProposalType } from 'types/proposal';
import { DraftState } from 'services/DraftsService/types';

export function getDraftProposalTypeByCategory(
  category: ProposalCategories
): string | undefined {
  switch (category) {
    case ProposalCategories.Governance: {
      return `${ProposalType.ChangePolicy},${ProposalType.ChangeConfig}`;
    }
    case ProposalCategories.Financial: {
      return `${ProposalType.Transfer}`;
    }
    case ProposalCategories.Bounties: {
      return `${ProposalType.AddBounty},${ProposalType.BountyDone}`;
    }
    case ProposalCategories.Members: {
      return `${ProposalType.AddMemberToRole},${ProposalType.RemoveMemberFromRole}`;
    }
    case ProposalCategories.Polls: {
      return `${ProposalType.Vote}`;
    }
    case ProposalCategories.FunctionCalls: {
      return `${ProposalType.FunctionCall}`;
    }
    default: {
      return undefined;
    }
  }
}

export function getDraftStateQuery(state?: string): DraftState | undefined {
  if (state === undefined) {
    return 'open';
  }

  if (state === 'all') {
    return undefined;
  }

  return state as DraftState;
}

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DraftsPageContent/hooks.ts ---
import { PaginationResponse } from 'types/api';
import { DraftProposalFeedItem } from 'types/draftProposal';
import { useRouter } from 'next/router';
import { useAsyncFn, useList, useMount, useMountedState } from 'react-use';
import { useCallback, useState } from 'react';
import { useWalletContext } from 'context/WalletContext';
import { useDebounceEffect } from 'hooks/useDebounceUpdateEffect';
import { useDraftsContext } from 'astro_2.0/features/Drafts/components/DraftsProvider';
import {
  getDraftProposalTypeByCategory,
  getDraftStateQuery,
} from 'astro_2.0/features/pages/nestedDaoPagesContent/DraftsPageContent/helpers';
import { ProposalCategories } from 'types/proposal';
import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';

type PageData = PaginationResponse<DraftProposalFeedItem[]>;

const defaultData: PageData = {
  data: [],
  total: 0,
};

export function useDraftsPageData(daoId: string): {
  loading: boolean;
  loadMore: () => void;
  data: PageData | null;
  handleSearch: (val: string) => Promise<PageData | null>;
  handleReset: () => void;
} {
  const router = useRouter();
  const isMounted = useMountedState();
  const { accountId } = useWalletContext();
  const { draftsService } = useDraftsContext();

  const { query } = router;
  const { sort, category, state, view } = query;

  const [data, setData] = useState<PageData | null>(defaultData);

  const [{ loading }, fetchData] = useAsyncFn(
    async (_initialData?: PageData | null, search?: string) => {
      let accumulatedListData = _initialData || null;

      const [orderBy, order] = (sort as string).split(',');

      const res = await draftsService.getDrafts({
        offset: accumulatedListData?.data.length || 0,
        limit: 1000,
        orderBy,
        order: order === 'ASC' || order === 'DESC' ? order : undefined,
        daoId,
        type: getDraftProposalTypeByCategory(category as ProposalCategories),
        accountId,
        search,
        state: getDraftStateQuery(state as string),
        isSaved: view === 'saved' ? 'true' : undefined,
      });

      if (!res) {
        return defaultData;
      }

      accumulatedListData = {
        ...res,
        data: [...(accumulatedListData?.data || []), ...(res.data || [])],
      };

      return accumulatedListData;
    },
    [sort, category, accountId, daoId, state, view]
  );

  const handleSearch = useCallback(
    async searchInput => {
      const newData = await fetchData(null, searchInput);

      if (isMounted() && newData?.data) {
        setData(newData);
      }

      window.scroll(0, 0);

      return Promise.resolve(null);
    },
    [fetchData, isMounted]
  );

  const handleReset = useCallback(async () => {
    const newData = await fetchData();

    if (isMounted() && newData?.data) {
      setData(newData);
    }
  }, [fetchData, isMounted]);

  useDebounceEffect(
    async ({ isInitialCall, depsHaveChanged }) => {
      if (isInitialCall || !depsHaveChanged) {
        return;
      }

      const newData = await fetchData();

      if (isMounted() && newData?.data) {
        setData(newData);
      }

      window.scroll(0, 0);
    },
    1000,
    [fetchData]
  );

  const loadMore = async () => {
    if (loading) {
      return;
    }

    const newData = await fetchData(data);

    if (isMounted() && newData?.data) {
      setData(newData);
    }
  };

  useMount(() => {
    if (!sort) {
      router.replace(
        {
          pathname: router.pathname,
          query: {
            ...query,
            sort: 'updatedAt,DESC',
          },
        },
        undefined,
        {
          shallow: true,
        }
      );
    }
  });

  return {
    data,
    handleSearch,
    loading,
    loadMore,
    handleReset,
  };
}

export function useDraftsPageActions(): {
  handleView: (id: string) => void;
} {
  const router = useRouter();
  const daoId = router.query.dao as string;
  const { accountId, pkAndSignature } = useWalletContext();
  const { draftsService } = useDraftsContext();

  const handleView = useCallback(
    async (id: string) => {
      try {
        if (!pkAndSignature) {
          return;
        }

        const { publicKey, signature } = pkAndSignature;

        if (!publicKey || !signature) {
          return;
        }

        await draftsService.updateDraftView({
          id,
          daoId,
          accountId,
          publicKey,
          signature,
        });
      } catch (e) {
        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 20000,
          description: e?.message,
        });
      }
    },
    [accountId, daoId, draftsService, pkAndSignature]
  );

  return {
    handleView,
  };
}

export function useMultiDraftActions(): {
  loading: boolean;
  handleDelete: () => Promise<void>;
  handleSelect: (id: string) => void;
  handleDismiss: () => void;
  list: string[];
} {
  const { draftsService } = useDraftsContext();
  const { nearService, accountId, pkAndSignature } = useWalletContext();
  const router = useRouter();
  const daoId = router.query.dao as string;
  const [list, { push, removeAt, clear }] = useList<string>([]);

  const handleSelect = useCallback(
    id => {
      const itemIndex = list.findIndex(item => item === id);

      if (itemIndex !== -1) {
        removeAt(itemIndex);
      } else {
        push(id);
      }
    },
    [list, push, removeAt]
  );

  const handleDismiss = useCallback(() => {
    clear();
  }, [clear]);

  const [{ loading }, handleDelete] = useAsyncFn(async () => {
    if (!draftsService || !pkAndSignature) {
      return;
    }

    const { publicKey, signature } = pkAndSignature;

    if (!publicKey || !signature) {
      return;
    }

    try {
      await Promise.all(
        list.map(item => {
          return draftsService.deleteDraft({
            id: item,
            daoId,
            accountId,
            publicKey,
            signature,
          });
        })
      );

      await router.reload();
    } catch (e) {
      showNotification({
        type: NOTIFICATION_TYPES.ERROR,
        description: e.message,
        lifetime: 20000,
      });

      await router.reload();
    }
  }, [router, nearService, list, daoId]);

  return {
    loading,
    list,
    handleDelete,
    handleSelect,
    handleDismiss,
  };
}

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/DraftsPageContent/index.ts ---
export * from './DraftsPageContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/EditDraftPageContent/index.ts ---
export * from './EditDraftPageContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/GovernanceTokenInfoPageContent/components/InfoPanel/index.ts ---
export * from './InfoPanel';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/GovernanceTokenInfoPageContent/components/StakingContract/index.ts ---
export * from './StakingContract';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/GovernanceTokenInfoPageContent/index.ts ---
export * from './components/InfoPanel';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/GroupsPageContent/index.ts ---
export * from './GroupsPageContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/NFTsPageContent/index.ts ---
export * from './NFTsPageContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/NestedDaoPageWrapper/components/DaoCreateProposal/index.ts ---
export * from './DaoCreateProposal';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/NestedDaoPageWrapper/components/DaoLowBalanceWarning/index.ts ---
export * from './DaoLowBalanceWarning';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/NestedDaoPageWrapper/index.ts ---
export * from './NestedDaoPageWrapper';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/ProposalPageContent/index.ts ---
export * from './ProposalPageContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/SettingsPageContent/index.ts ---
export * from './SettingsPageContent';

'''
'''--- astro_2.0/features/pages/nestedDaoPagesContent/TokensPageContent/index.ts ---
export * from './TokensPageContent';

'''
'''--- astro_2.0/features/pages/nft/NtfCard/index.ts ---
export * from './NFTCard';

'''
'''--- astro_2.0/features/pages/plugins/PluginCard/components/ProposalStatusPanel/index.ts ---
export * from './ProposalStatusPanel';

'''
'''--- astro_2.0/features/pages/plugins/PluginCard/index.ts ---
export * from './PluginCard';

'''
'''--- astro_2.0/features/pages/plugins/UsePluginPopup/components/UsePluginWizard/components/CreateTokenView/index.ts ---
export * from './CreateTokenView';

'''
'''--- astro_2.0/features/pages/plugins/UsePluginPopup/components/UsePluginWizard/components/NewFunctionView/index.ts ---
export * from './NewFunctionView';

'''
'''--- astro_2.0/features/pages/plugins/UsePluginPopup/components/UsePluginWizard/components/PeviousFunctionsView/index.ts ---
export * from './PreviousFunctionsView';

'''
'''--- astro_2.0/features/pages/plugins/UsePluginPopup/components/UsePluginWizard/helpers.ts ---
/* eslint-disable */
import React, { useContext } from 'react';
import {
  IWizardInitialData,
  NearFunction,
} from 'astro_2.0/features/pages/plugins/UsePluginPopup/types';

type TData = {
  tokenName?: string;
  amountToMint?: string;
  recipient?: string;
  nearFunction?: NearFunction;
};

type TWizardContext = {
  data?: TData;
  setData: (d: unknown) => void;
  onClose: () => void;
  initialData: IWizardInitialData;
};

type TNearFunctionDetails = {
  contract: string;
  method: string;
};

export const WizardContext = React.createContext<TWizardContext>({
  // DAO_TEMPLATES: undefined,
  setData: () => null,
  onClose: () => null,
  initialData: {
    functions: [],
  },
});

export const useWizardContext = () => useContext<TWizardContext>(WizardContext);

export function getNearFunctionDetails(
  data: NearFunction | undefined
): TNearFunctionDetails {
  const defaultResponse = { contract: '', method: '' };

  if (!data) return defaultResponse;

  try {
    const obj = JSON.parse(data.code);

    return { contract: obj.contract, method: obj.method };
  } catch (e) {
    return defaultResponse;
  }
}

'''
'''--- astro_2.0/features/pages/plugins/UsePluginPopup/components/UsePluginWizard/index.ts ---
export * from './UsePluginWizard';

'''
'''--- astro_2.0/features/pages/plugins/UsePluginPopup/index.ts ---
export * from './UsePluginPopup';

'''
'''--- astro_2.0/features/pages/plugins/UsePluginPopup/types.ts ---
export type NearFunction = {
  id: string;
  functionName: string;
  code: string;
};

export interface IWizardInitialData {
  functions: NearFunction[];
}

export interface IWizardResult {
  nearFunction: NearFunction;
  tokenName: string;
  amountToMint: string;
  recipient: string;
}

'''
'''--- astro_3.0/components/AnimatedLayout/index.ts ---
export * from './AnimatedLayout';

'''
'''--- astro_3.0/components/AppLogoSelector/index.ts ---
export * from './AppLogoSelector';

'''
'''--- astro_3.0/components/ContextPopup/index.ts ---
export * from './ContextPopup';

'''
'''--- astro_3.0/components/CreateProposalSelector/components/DummyProposalCard/index.ts ---
export * from './DummyProposalCard';

'''
'''--- astro_3.0/components/CreateProposalSelector/index.ts ---
export * from './CreateProposalSelector';

'''
'''--- astro_3.0/components/DaoAssetsSelect/index.ts ---
export * from './DaoAssetsSelect';

'''
'''--- astro_3.0/components/DaoDashboardLogo/index.ts ---
export * from './DaoDashboardLogo';

'''
'''--- astro_3.0/components/FeedSort/index.ts ---
export * from './FeedSort';

'''
'''--- astro_3.0/components/MobileFullscreenPopup/index.ts ---
export * from './MobileFullscreenPopup';

'''
'''--- astro_3.0/components/SortMenu/index.ts ---
export * from './SortMenu';

'''
'''--- astro_3.0/features/AppHeader/components/AppLogo/index.ts ---
export * from './AppLogo';

'''
'''--- astro_3.0/features/AppHeader/components/MobileDaosMenu/index.ts ---
export * from './MobileDaosMenu';

'''
'''--- astro_3.0/features/AppHeader/index.ts ---
export * from './AppHeader';

'''
'''--- astro_3.0/features/AppVersion/index.ts ---
export * from './AppVersion';

'''
'''--- astro_3.0/features/Bounties/components/BountiesFeed/index.ts ---
export * from './BountiesFeed';

'''
'''--- astro_3.0/features/Bounties/components/BountiesFeedFilters/index.ts ---
export * from './BountiesFeedFilters';

'''
'''--- astro_3.0/features/Bounties/components/BountiesFeedNext/hooks.ts ---
import { BountyContext } from 'types/bounties';
import { useBountiesInfinite } from 'services/ApiService/hooks/useBounties';
import { useCallback, useMemo } from 'react';
import { LIST_LIMIT_DEFAULT } from 'services/sputnik/constants';

export function useBountiesFeed(): {
  handleFilterChange: () => void;
  handleLoadMore: () => void;
  bountiesData: {
    data: BountyContext[];
    total: number;
  };
  isValidating: boolean;
  hasMore: boolean;
  dataLength: number;
} {
  const { size, setSize, data, isValidating } = useBountiesInfinite();

  const handleFilterChange = useCallback(() => {
    window.scroll(0, 0);
  }, []);

  const handleLoadMore = useCallback(() => setSize(size + 1), [setSize, size]);

  const bountiesData = useMemo(() => {
    return {
      data:
        data?.reduce<BountyContext[]>((acc, item) => {
          acc.push(...item.data);

          return acc;
        }, []) ?? [],
      total: 0,
    };
  }, [data]);

  const hasMore = data
    ? data[data?.length - 1].data.length === LIST_LIMIT_DEFAULT
    : false;

  const dataLength = data?.length ?? 0;

  return {
    handleFilterChange,
    handleLoadMore,
    bountiesData,
    isValidating,
    hasMore,
    dataLength,
  };
}

'''
'''--- astro_3.0/features/Bounties/components/BountiesFeedNext/index.ts ---
export * from './BountiesFeedNext';

'''
'''--- astro_3.0/features/Bounties/components/BountiesFeedSort/index.ts ---
export * from './BountiesFeedSort';

'''
'''--- astro_3.0/features/Bounties/components/DaoBounties/index.ts ---
export * from './DaoBounties';
export * from './DaoBountiesList';

'''
'''--- astro_3.0/features/Bounties/index.ts ---
export * from './Bounties';

'''
'''--- astro_3.0/features/DaoProposalsFeed/index.ts ---
export * from './DaoProposalsFeed';

'''
'''--- astro_3.0/features/DaosNext/components/AdditionalDaosFilters/index.ts ---
export * from './AdditionalDaosFilters';

'''
'''--- astro_3.0/features/DaosNext/helpers.ts ---
import { TFunction } from 'next-i18next';

export function getSortOptions(t: TFunction): {
  label: string;
  value: string;
}[] {
  return [
    {
      label: t('allDAOsFilter.mostActive'),
      value: 'totalProposalCount,DESC',
    },
    {
      label: t('allDAOsFilter.newest'),
      value: 'createTimestamp,DESC',
    },
    {
      label: t('allDAOsFilter.oldest'),
      value: 'createTimestamp,ASC',
    },
    {
      label: t('allDAOsFilter.biggestFunds'),
      value: 'totalDaoFunds,DESC',
    },
    {
      label: t('allDAOsFilter.numberOfMembers'),
      value: 'numberOfMembers,DESC',
    },
  ];
}

'''
'''--- astro_3.0/features/DaosNext/index.ts ---
export * from './DaosNext';

'''
'''--- astro_3.0/features/DraftProposalView/index.ts ---
export * from './DraftProposalView';

'''
'''--- astro_3.0/features/DraftsFeedNext/components/DraftsFeedFilters/index.ts ---
export * from './DraftsFeedFilters';

'''
'''--- astro_3.0/features/DraftsFeedNext/hooks.ts ---
import { useCallback, useMemo } from 'react';
import { LIST_LIMIT_DEFAULT } from 'services/sputnik/constants';
import { DraftProposalFeedItem } from 'types/draftProposal';
import { useDraftProposalsInfinite } from 'services/ApiService/hooks/useDraftProposals';
import { PaginationResponse } from 'types/api';

export function useDraftsFeed(): {
  handleFilterChange: () => void;
  handleLoadMore: () => void;
  draftsData: {
    data: DraftProposalFeedItem[];
    total: number;
  };
  isValidating: boolean;
  hasMore: boolean;
  dataLength: number;
  handleSearch: (val: string) => Promise<PaginationResponse<unknown[]>>;
  handleReset: () => void;
} {
  const { size, setSize, data, isValidating } = useDraftProposalsInfinite();

  const handleFilterChange = useCallback(() => {
    window.scroll(0, 0);
  }, []);

  const handleLoadMore = useCallback(() => setSize(size + 1), [setSize, size]);

  const handleSearch = useCallback(() => {
    return Promise.resolve({ total: 0, data: [] });
  }, []);

  const handleReset = useCallback(() => {
    // todo - reset search
  }, []);

  const draftsData = useMemo(() => {
    return {
      data:
        data?.reduce<DraftProposalFeedItem[]>((acc, item) => {
          acc.push(...item.data);

          return acc;
        }, []) ?? [],
      total: 0,
    };
  }, [data]);

  const hasMore = data
    ? data[data?.length - 1].data.length === LIST_LIMIT_DEFAULT
    : false;

  const dataLength = data?.length ?? 0;

  return {
    handleFilterChange,
    handleLoadMore,
    draftsData,
    isValidating,
    hasMore,
    dataLength,
    handleSearch,
    handleReset,
  };
}

'''
'''--- astro_3.0/features/FeedLayout/components/FeedControlsLayout/index.ts ---
export * from './FeedControlsLayout';

'''
'''--- astro_3.0/features/FeedLayout/components/FeedTabs/index.ts ---
export * from './FeedTabs';

'''
'''--- astro_3.0/features/FeedLayout/index.ts ---
export * from './FeedLayout';
export * from './components/FeedControlsLayout';

'''
'''--- astro_3.0/features/MainLayout/index.ts ---
export * from './MainLayout';

'''
'''--- astro_3.0/features/MobileAppNavigation/components/MobileNavItem/index.ts ---
export * from './MobileNavItem';

'''
'''--- astro_3.0/features/MobileAppNavigation/components/MoreInfo/index.ts ---
export * from './MoreInfo';

'''
'''--- astro_3.0/features/MobileAppNavigation/index.ts ---
export * from './MobileAppNavigation';

'''
'''--- astro_3.0/features/PollsProposalsFeed/index.ts ---
export * from './PollsProposalsFeed';

'''
'''--- astro_3.0/features/ProposalsFeed/components/CategoriesFeedFilter/index.ts ---
export * from './CategoriesFeedFilter';

'''
'''--- astro_3.0/features/ProposalsFeed/components/MobileFilters/constants.ts ---
import { FEED_CATEGORIES } from 'constants/proposals';

export const CATEGORIES = [
  {
    value: 'All',
    label: 'All',
  },
  ...FEED_CATEGORIES,
];

export const TYPES = [
  {
    value: 'All',
    label: 'All',
  },
  {
    value: 'Unread',
    label: 'Unread',
  },
  {
    value: 'Saved',
    label: 'Saved',
  },
];

export const SORT = [
  {
    label: 'Newest',
    value: 'createdAt,DESC',
  },
  {
    label: 'Oldest',
    value: 'createdAt,ASC',
  },
];

'''
'''--- astro_3.0/features/ProposalsFeed/components/MobileFilters/index.ts ---
export * from './MobileFilters';

'''
'''--- astro_3.0/features/ProposalsFeed/components/ProposalsFeedFilters/index.ts ---
export * from './ProposalsFeedFilters';

'''
'''--- astro_3.0/features/ProposalsFeed/components/RadioListFilter/index.ts ---
export * from './RadioListFilter';

'''
'''--- astro_3.0/features/ProposalsFeed/components/StatusFeedFilter/index.ts ---
export * from './StatusFeedFilter';

'''
'''--- astro_3.0/features/ProposalsFeed/index.ts ---
export * from './ProposalsFeed';

'''
'''--- astro_3.0/features/ProposalsFeedNext/components/AdditionalFilters/index.ts ---
export * from './AdditionalFilters';

'''
'''--- astro_3.0/features/ProposalsFeedNext/components/CategoriesFeedFilter/helpers.ts ---
import { ListItem } from './types';

export function getSelectedItems(
  list: ListItem[] | undefined,
  query: Record<string, string>
): ListItem[] {
  if (!list) {
    return [];
  }

  const values = list.reduce<Set<ListItem>>((res, item) => {
    const selected =
      Array.from(Object.entries(query)).filter(
        p => p[0] === item.queryName && p[1] === item.value
      ).length > 0;

    if (selected && item.queryName) {
      res.add(item);
    }

    return res;
  }, new Set());

  return Array.from(values);
}

'''
'''--- astro_3.0/features/ProposalsFeedNext/components/CategoriesFeedFilter/index.ts ---
export * from './CategoriesFeedFilter';

'''
'''--- astro_3.0/features/ProposalsFeedNext/components/CategoriesFeedFilter/types.ts ---
import { IconName } from 'components/Icon';

export type ListItem = {
  value: string;
  label: string;
  disabled?: boolean;
  icon?: IconName;
  queryName?: string;
  children?: ListItem[];
};

'''
'''--- astro_3.0/features/ProposalsFeedNext/components/ProposalsFeedFilters/index.ts ---
export * from './ProposalsFeedFilters';

'''
'''--- astro_3.0/features/ProposalsFeedNext/hooks.ts ---
import { useProposalsInfinite } from 'services/ApiService/hooks/useProposals';
import { ProposalCategories, ProposalFeedItem } from 'types/proposal';
import { useCallback, useMemo } from 'react';
import { LIST_LIMIT_DEFAULT } from 'services/sputnik/constants';

type FeedOptions = {
  isMyFeed?: boolean;
  category?: ProposalCategories;
};

export function useProposalsFeed(options?: FeedOptions): {
  handleFilterChange: () => void;
  handleLoadMore: () => void;
  proposalsData: {
    data: ProposalFeedItem[];
    total: number;
  };
  isValidating: boolean;
  hasMore: boolean;
  dataLength: number;
} {
  const { size, setSize, data, isValidating } = useProposalsInfinite(options);

  const handleFilterChange = useCallback(() => {
    window.scroll(0, 0);
  }, []);

  const handleLoadMore = useCallback(() => setSize(size + 1), [setSize, size]);

  const proposalsData = useMemo(() => {
    return {
      data:
        data?.reduce<ProposalFeedItem[]>((acc, item) => {
          acc.push(...item.data);

          return acc;
        }, []) ?? [],
      total: 0,
    };
  }, [data]);

  const hasMore = data
    ? data[data?.length - 1].data.length === LIST_LIMIT_DEFAULT
    : false;

  const dataLength = data?.length ?? 0;

  return {
    handleFilterChange,
    handleLoadMore,
    proposalsData,
    isValidating,
    hasMore,
    dataLength,
  };
}

'''
'''--- astro_3.0/features/ProposalsFeedNext/index.ts ---
export * from './ProposalsFeedNext';

'''
'''--- astro_3.0/features/SearchBar/components/DropdownResults/components/ResultSection/components/SearchResultDaoCard/index.ts ---
export * from './SearchResultDaoCard';

'''
'''--- astro_3.0/features/SearchBar/components/DropdownResults/components/ResultSection/components/SearchResultPeopleCard/index.ts ---
export * from './SearchResultPeopleCard';

'''
'''--- astro_3.0/features/SearchBar/components/DropdownResults/components/ResultSection/components/SearchResultProposalLine/index.ts ---
export * from './SearchResultProposalLine';

'''
'''--- astro_3.0/features/SearchBar/components/DropdownResults/components/ResultSection/components/index.ts ---
export * from './SearchResultDaoCard';
export * from './SearchResultPeopleCard';
export * from './SearchResultProposalLine';

'''
'''--- astro_3.0/features/SearchBar/components/DropdownResults/components/ResultSection/index.ts ---
export * from './components';
export * from './ResultSection';

'''
'''--- astro_3.0/features/SearchBar/components/DropdownResults/index.ts ---
export * from './DropdownResults';

'''
'''--- astro_3.0/features/SearchBar/index.ts ---
export * from './SearchBar';

'''
'''--- astro_3.0/features/Sidebar/components/SidebarActionItem/index.ts ---
export * from './SidebarActionItem';

'''
'''--- astro_3.0/features/Sidebar/components/SidebarDaos/index.ts ---
export * from './SidebarDaos';

'''
'''--- astro_3.0/features/Sidebar/components/SidebarMarker/index.ts ---
export * from './SidebarMarker';

'''
'''--- astro_3.0/features/Sidebar/components/SidebarMore/index.ts ---
export * from './SidebarMore';

'''
'''--- astro_3.0/features/Sidebar/components/SidebarNavItem/index.ts ---
export * from './SidebarNavItem';

'''
'''--- astro_3.0/features/Sidebar/helpers.ts ---
import { DaoFeedItem } from 'types/dao';

const DEFAULT_DAO_AVATAR = '/avatars/defaultDaoAvatar.png';

export function getDaoAvatar(dao: DaoFeedItem): string {
  if (!dao.flagLogo && !dao.logo) {
    return DEFAULT_DAO_AVATAR;
  }

  const daoLogo = dao.flagLogo || dao.logo;

  if (daoLogo?.indexOf('defaultDaoFlag') !== -1) {
    return DEFAULT_DAO_AVATAR;
  }

  return daoLogo;
}

'''
'''--- astro_3.0/features/Sidebar/index.ts ---
export * from './Sidebar';

'''
'''--- astro_3.0/features/TransactionResult/hooks.ts ---
import { useEffect } from 'react';
import { useRouter } from 'next/router';

import { TransactionResult, TransactionResultType } from 'types/transaction';
import { WalletType } from 'types/config';
import { CreateGovernanceTokenSteps } from 'types/settings';

import {
  ALL_BOUNTIES_PAGE_URL,
  MY_DAOS_URL,
  MY_FEED_URL,
  SINGLE_DAO_PAGE,
  SINGLE_PROPOSAL_PAGE_URL,
} from 'constants/routing';
import { VOTE_ACTION_SOURCE_PAGE } from 'constants/votingConstants';
import {
  CREATE_GOVERNANCE_TOKEN_PROPOSAL,
  CREATE_PROPOSAL_ACTION_TYPE,
} from 'constants/proposals';
import { DELEGATE_VOTING_KEY, STAKE_TOKENS_KEY } from 'constants/localStorage';

import { useWalletContext } from 'context/WalletContext';
import { SputnikWalletErrorCodes } from 'errors/SputnikWalletError';

import { useUpdateGovernanceTokenWizardProgress } from 'astro_2.0/features/pages/nestedDaoPagesContent/CreateGovernanceTokenPageContent/hooks';

export function useSelectorWalletTransactionResult(): void {
  const router = useRouter();
  const { currentWallet } = useWalletContext();
  const { update } = useUpdateGovernanceTokenWizardProgress();

  useEffect(() => {
    if (
      currentWallet !== WalletType.SELECTOR_NEAR &&
      currentWallet !== WalletType.SELECTOR_SENDER
    ) {
      return;
    }

    try {
      const { searchParams } = new URL(window.location.toString());
      const rawResults = searchParams.get('results');

      // On votes, accessing delegate page in governance token wizard etc. we save current location in LS
      // so we can return to same page after wallet redirect
      const voteActionSource = localStorage.getItem(VOTE_ACTION_SOURCE_PAGE);
      const delegateVotingAction = localStorage.getItem(DELEGATE_VOTING_KEY);
      const createProposalAction = localStorage.getItem(
        CREATE_PROPOSAL_ACTION_TYPE
      );
      const stakeTokensAction = localStorage.getItem(STAKE_TOKENS_KEY);

      if (delegateVotingAction) {
        // We were on last wizard step so we complete wizard and get back to wizard initial page
        update(delegateVotingAction.replaceAll('"', ''), {
          step: null,
          wizardCompleted: true,
        });

        return;
      }

      // No rawResults from BE - this means this was unhandled action and we dont know its type, so we
      // redirect user to default location
      if (!rawResults) {
        if (voteActionSource) {
          const redirectUrl = voteActionSource as string;

          localStorage.setItem(VOTE_ACTION_SOURCE_PAGE, '');

          router.push(redirectUrl.replaceAll('"', ''));
        } else {
          router.push(MY_DAOS_URL);
        }

        return;
      }

      const results: TransactionResult[] = JSON.parse(rawResults);

      for (let i = 0; i < results.length; i += 1) {
        const result = results[i];

        switch (result.type) {
          case TransactionResultType.PROPOSAL_CREATE: {
            if (createProposalAction === CREATE_GOVERNANCE_TOKEN_PROPOSAL) {
              // we created new proposal in governance token wiard - update dao settings with proposal Id
              update(result.metadata.daoId, {
                proposalId: result.metadata.proposalId,
              });
            } else {
              router.push({
                pathname: SINGLE_PROPOSAL_PAGE_URL,
                query: {
                  dao: result.metadata.daoId,
                  proposal: result.metadata.proposalId,
                },
              });
            }

            break;
          }
          case TransactionResultType.DAO_CREATE: {
            router.push({
              pathname: SINGLE_DAO_PAGE,
              query: {
                dao: result.metadata.daoId,
              },
            });

            break;
          }
          case TransactionResultType.FINALIZE:
          case TransactionResultType.PROPOSAL_VOTE: {
            if (voteActionSource) {
              router.push((voteActionSource as string).replaceAll('"', ''));
            } else {
              router.push({
                pathname: SINGLE_PROPOSAL_PAGE_URL,
                query: {
                  dao: result.metadata.daoId,
                  proposal: result.metadata.proposalId,
                },
              });
            }

            break;
          }
          case TransactionResultType.BOUNTY_CLAIM: {
            if (voteActionSource) {
              localStorage.setItem(VOTE_ACTION_SOURCE_PAGE, '');

              router.push((voteActionSource as string).replaceAll('"', ''));
            } else {
              router.push({
                pathname: ALL_BOUNTIES_PAGE_URL,
                query: {
                  dao: result.metadata.daoId,
                },
              });
            }

            break;
          }
          default: {
            if (stakeTokensAction) {
              update(stakeTokensAction.replaceAll('"', ''), {
                step: CreateGovernanceTokenSteps.DelegateVoting,
              });
            } else if (delegateVotingAction) {
              update(delegateVotingAction.replaceAll('"', ''), {
                step: null,
              });
            } else if (result?.metadata?.daoId) {
              router.push({
                pathname: SINGLE_DAO_PAGE,
                query: {
                  dao: result.metadata.daoId,
                },
              });
            } else if (i === results.length - 1) {
              router.push(MY_FEED_URL);
            }

            break;
          }
        }
      }
    } catch (e) {
      console.error(e);
      router.push(MY_FEED_URL);
    }
  }, [currentWallet, router, update]);
}

export function useWalletTransactionResult(): void {
  const { currentWallet } = useWalletContext();

  useEffect(() => {
    if (
      currentWallet === WalletType.SELECTOR_NEAR ||
      currentWallet === WalletType.SELECTOR_SENDER
    ) {
      return;
    }

    const { searchParams } = new URL(window.location.toString());

    const callback = window.opener?.sputnikRequestSignTransactionCompleted;

    if (typeof callback === 'function') {
      const transactionHashes =
        searchParams.get('transactionHashes') || undefined;
      const errorCode = (searchParams.get('errorCode') ||
        undefined) as SputnikWalletErrorCodes;

      callback?.({ transactionHashes, errorCode });

      setTimeout(() => {
        window.close();
      }, 1000);
    } else {
      window.close();
    }
  }, [currentWallet]);
}

'''
'''--- bitbucket-pipelines.yml ---
image: node:14.16.0

options:
  size: 2x

definitions:
  caches:
    docker-cache: docker-cache

  services:
    docker:
      memory: 7128

  steps:
    - step: &set-environment
        name: Set Environment
        artifacts:
          - environment.sh

    - step: &build
        name: Installing & Build artifact
        caches:
          - node
        script:
          - source environment.sh
          - yarn install
          - yarn generate-assets
          - yarn lint
          - yarn typecheck
          - yarn test
          - yarn build
        artifacts:
          - .next/**

    - step: &docker-build-publish
        name: Docker - Build and Publish
        services:
          - docker
        caches:
          - docker-cache
        script:
          - source environment.sh
          - >-
            if [[ -f "docker-cache/cache.tar" ]]; then
              docker load < docker-cache/cache.tar;
            fi
          - >-
            docker build
            -f Dockerfile_pipelines
            -t $APP_NAME:latest
            -t $APP_NAME:develop-latest
            -t $APP_NAME:$DOCKER_ENV_TAG
            .
          - >-
            docker save $(docker images -qa) > docker-cache/cache.tar;

          - pipe: atlassian/aws-ecr-push-image:1.4.2
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              IMAGE_NAME: $APP_NAME
              TAGS: >-
                latest
                develop-latest
                $DOCKER_ENV_TAG

    - step: &helm-build-deploy
        name: Helm - Build and Deploy
        image: alpine/helm:3.6.3
        script:
          - source environment.sh
          - export CHART_FOLDER=deployment/app-chart
          - helm lint $CHART_FOLDER
          - >-
            helm template $APP_NAME $CHART_FOLDER
            --set image.tag=$DOCKER_ENV_TAG
            --set environment.near_env=$NEAR_ENV
            --set environment.near_contract_name=$NEAR_CONTRACT_NAME
            --set environment.roketo_contract_name=$ROKETO_CONTRACT_NAME
            --set environment.roketo_multicall_name=$ROKETO_MULTICALL_NAME
            --set environment.api_url=$API_URL
            --set environment.google_analytics_key=$GOOGLE_ANALYTICS_KEY
            --set environment.log_rocket_app_id=$LOG_ROCKET_APP_ID
            --set environment.dd_application_id=$DD_APPLICATION_ID
            --set environment.dd_client_token=$DD_CLIENT_TOKEN
            --set environment.dd_service=$DD_SERVICE
            --set ingress.host=$K8S_INGRESS_HOST
            > $APP_NAME-manifest.yml

          - pipe: atlassian/aws-eks-kubectl-run:1.4.2
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              CLUSTER_NAME: $EKS_CLUSTER_NAME
              KUBECTL_COMMAND: 'apply'
              RESOURCE_PATH: '$APP_NAME-manifest.yml'
              KUBECTL_ARGS:
                - '--namespace=$DEPLOYMENT_NAMESPACE'

    - step: &build-storybook
        name: Build Storybook
        caches:
          - node
        script:
          - source environment.sh
          - yarn install
          - yarn lint
          - yarn typecheck
          - yarn build-storybook
        artifacts:
          - storybook-static/**

    - step: &deploy-to-s3
        name: Deploy to S3
        deployment: development
        script:
          - source environment.sh
          - pipe: atlassian/aws-s3-deploy:0.3.8
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: 'us-east-2'
              S3_BUCKET: 'astro-storybook'
              LOCAL_PATH: 'storybook-static'
              ACL: 'public-read'

pipelines:
  pull-requests:
    '**':
      - step:
          <<: *set-environment

          script:
            - >-
              echo export DOCKER_ENV_TAG=qa-$BITBUCKET_COMMIT >> environment.sh

      - step: *build

  custom:
    qa:
      - step:
          <<: *set-environment

          script:
            - >-
              echo export DOCKER_ENV_TAG=qa-$BITBUCKET_COMMIT >> environment.sh

      - step: *build

      - step: *docker-build-publish

      - step:
          <<: *helm-build-deploy
          deployment: qa

    test:
      - step:
          <<: *set-environment

          script:
            - >-
              echo export DOCKER_ENV_TAG=test-$BITBUCKET_COMMIT >> environment.sh

      - step: *build

      - step: *docker-build-publish

      - step:
          <<: *helm-build-deploy
          deployment: test

  branches:
    develop:
      - step:
          <<: *set-environment

          script:
            - >-
              echo export DOCKER_ENV_TAG=develop-$BITBUCKET_COMMIT >> environment.sh

      - step: *build

      - step: *docker-build-publish

      - step:
          <<: *helm-build-deploy
          deployment: development

      - step: *build-storybook

      - step:
          <<: *deploy-to-s3
          deployment: storybook

    staging:
      - step:
          <<: *set-environment

          script:
            - >-
              echo export DOCKER_ENV_TAG=staging-$BITBUCKET_COMMIT >> environment.sh
            - echo export NEAR_ENV=$NEAR_ENV_STAGING >> environment.sh
            - echo export API_URL=$API_URL_STAGING >> environment.sh
            - echo export GOOGLE_ANALYTICS_KEY=$GOOGLE_ANALYTICS_KEY_STAGING >> environment.sh
            - echo export LOG_ROCKET_APP_ID=$LOG_ROCKET_APP_ID_STAGING >> environment.sh
            - echo export DD_APPLICATION_ID=$DD_APPLICATION_ID_STAGING >> environment.sh
            - echo export DD_CLIENT_TOKEN=$DD_CLIENT_TOKEN_STAGING >> environment.sh
            - echo export DD_SERVICE=$DD_SERVICE_STAGING >> environment.sh

      - step: *build

      - step: *docker-build-publish

      - step:
          <<: *helm-build-deploy
          deployment: Staging

  tags:
    '*':
      - step:
          <<: *set-environment

          script:
            - >-
              echo export DOCKER_ENV_TAG=$BITBUCKET_TAG >> environment.sh
            - echo export NEAR_ENV=$NEAR_ENV_PROD >> environment.sh
            - echo export API_URL=$API_URL_PROD >> environment.sh
            - echo export GOOGLE_ANALYTICS_KEY=$GOOGLE_ANALYTICS_KEY_PROD >> environment.sh
            - echo export LOG_ROCKET_APP_ID=$LOG_ROCKET_APP_ID_PROD >> environment.sh
            - echo export DD_APPLICATION_ID=$DD_APPLICATION_ID_PROD >> environment.sh
            - echo export DD_CLIENT_TOKEN=$DD_CLIENT_TOKEN_PROD >> environment.sh
            - echo export DD_SERVICE=$DD_SERVICE_PROD >> environment.sh

      - step: *build

      - step: *docker-build-publish

      - step:
          <<: *helm-build-deploy
          deployment: Production

'''
'''--- components/AreaChartRenderer/components/Chart/index.ts ---
export * from './Chart';

'''
'''--- components/AreaChartRenderer/components/ChartTooltip/index.ts ---
export * from './ChartTooltip';

'''
'''--- components/AreaChartRenderer/components/chart-caption/index.ts ---
export * from './ChartCaption';

'''
'''--- components/AreaChartRenderer/components/range-toggle/index.ts ---
export * as RangeToggle from './RangeToggle';

'''
'''--- components/AreaChartRenderer/helpers.ts ---
import { subDays, format, subHours } from 'date-fns';
import { LineDataPoint, Range } from './types';

export const DOMAIN_RANGES: Record<string, Range> = {
  DAY: 'DAY',
  WEEK: 'WEEK',
  MONTH: 'MONTH',
  THREE_MONTHS: 'THREE_MONTHS',
  SIX_MONTHS: 'SIX_MONTHS',
  YEAR: 'YEAR',
  ALL: 'ALL',
};

function buildDataMap(data: LineDataPoint[], keyFormat: string) {
  return data.reduce<Record<string, LineDataPoint>>((res, item) => {
    const d = format(item.x, keyFormat);

    if (!res[d]) {
      res[d] = item;
    }

    return res;
  }, {});
}

export function prepareDataByRange(
  range: Range,
  rawData: LineDataPoint[]
): LineDataPoint[] {
  if (!rawData || !rawData.length) {
    return [];
  }

  // first data point
  const start = rawData[0];

  // reverse data - we would like to build curve from now
  const data = rawData.slice().reverse();

  // Number of points on X axis
  let numberOfElements;

  // dataMap key format
  let keyFormat: string;

  // datetime function
  let func: (date: Date | number, amount: number) => Date;

  switch (range) {
    case DOMAIN_RANGES.DAY: {
      numberOfElements = 24;
      keyFormat = 'dd_LLL_yyyy_HH';
      func = subHours;
      break;
    }
    case DOMAIN_RANGES.WEEK: {
      numberOfElements = 7;
      keyFormat = 'dd_LLL_yyyy';
      func = subDays;
      break;
    }
    case DOMAIN_RANGES.MONTH: {
      numberOfElements = 30;
      keyFormat = 'dd_LLL_yyyy';
      func = subDays;
      break;
    }
    case DOMAIN_RANGES.THREE_MONTHS: {
      numberOfElements = 90;
      keyFormat = 'dd_LLL_yyyy';
      func = subDays;
      break;
    }
    case DOMAIN_RANGES.SIX_MONTHS: {
      numberOfElements = 180;
      keyFormat = 'dd_LLL_yyyy';
      func = subDays;
      break;
    }
    case DOMAIN_RANGES.YEAR: {
      numberOfElements = 365;
      keyFormat = 'dd_LLL_yyyy';
      func = subDays;
      break;
    }
    default: {
      numberOfElements = rawData.length > 365 ? rawData.length : 365;
      keyFormat = 'dd_LLL_yyyy';
      func = subDays;
    }
  }

  // Reference map that accumulates known data points
  const dataMap = buildDataMap(data, keyFormat);

  // Current datetime
  const now = new Date();

  // Pre-populate result data array
  const result = new Array(numberOfElements).fill(null);

  // Temp variable to keep last known value
  let prev = rawData[rawData.length - 1].y;
  let prev2 = rawData[rawData.length - 1].y2;

  return result
    .map((item, i) => {
      const date = func(now, i);
      const key = format(date, keyFormat);

      if (dataMap[key]) {
        prev = dataMap[key].y;
        prev2 = dataMap[key].y2;

        return {
          x: date,
          y: dataMap[key].y,
          y2: dataMap[key].y2,
        };
      }

      return {
        x: date,
        y: prev,
        y2: prev2,
      };
    })
    .reverse()
    .filter(item => item.x >= start.x);
}

export const valueFormatter = (value: number): string => {
  if (value === 0) {
    return '0';
  }

  if (value >= 1000) {
    return `${value % 1000}M`;
  }

  return `${value}K`;
};

export const getXInterval = (
  data: LineDataPoint[],
  period: Range,
  isMobile: boolean
): number | undefined => {
  if (isMobile) {
    return undefined;
  }

  const timestamps = data.map(item => item.x);

  switch (period) {
    case DOMAIN_RANGES.ALL:
      return Math.floor(timestamps.length / 6);
    case DOMAIN_RANGES.YEAR:
      return Math.floor(timestamps.length / 12);
    case DOMAIN_RANGES.MONTH:
    case DOMAIN_RANGES.THREE_MONTHS:
    case DOMAIN_RANGES.SIX_MONTHS:
      return Math.floor(timestamps.length / 10);
    case DOMAIN_RANGES.WEEK:
      return 1;
    default:
      return 1;
  }
};

export const tickXFormatter = (
  value: number | string,
  period: Range
): string => {
  if (value === 'auto') {
    return 'auto';
  }

  switch (period) {
    case DOMAIN_RANGES.ALL:
    case DOMAIN_RANGES.YEAR:
    case DOMAIN_RANGES.MONTH:
    case DOMAIN_RANGES.THREE_MONTHS:
    case DOMAIN_RANGES.SIX_MONTHS:
    case DOMAIN_RANGES.WEEK:
      return format(new Date(value), 'd LLL');
    case DOMAIN_RANGES.DAY:
    default:
      return format(new Date(value), 'HH:mm');
  }
};

'''
'''--- components/AreaChartRenderer/hooks.ts ---
import {
  ChartDataElement,
  DomainControl,
  Range,
} from 'components/AreaChartRenderer/types';
import { useCallback, useState } from 'react';
import {
  DOMAIN_RANGES,
  prepareDataByRange,
} from 'components/AreaChartRenderer/helpers';

export const useDomainControl = (
  data: ChartDataElement[],
  initialRange?: Range
): DomainControl => {
  const [dataByRange, setDataByRange] = useState(() => {
    return prepareDataByRange(initialRange || DOMAIN_RANGES.DAY, data);
  });

  const [activeRange, setActiveRange] = useState<Range>(
    initialRange || DOMAIN_RANGES.DAY
  );

  const toggleDomain = useCallback(
    (range: Range) => {
      if (!data.length || data.length === 1) {
        return;
      }

      const newData = prepareDataByRange(range, data);

      setActiveRange(range);
      setDataByRange(newData);
    },
    [data]
  );

  return {
    activeRange,
    toggleDomain,
    data: dataByRange,
  };
};

'''
'''--- components/AreaChartRenderer/index.ts ---
import {
  AreaChartRenderer,
  AreaChartProps,
} from 'components/AreaChartRenderer/AreaChartRenderer';

export default AreaChartRenderer;
export type { AreaChartProps };

'''
'''--- components/AreaChartRenderer/types.ts ---
export type ChartDataElement = {
  x: Date;
  y: number;
  y2?: number;
};

export type Range =
  | 'DAY'
  | 'WEEK'
  | 'MONTH'
  | 'THREE_MONTHS'
  | 'SIX_MONTHS'
  | 'YEAR'
  | 'ALL';

export type LineDataPoint = {
  x: Date;
  y: number;
  y2?: number;
};

export type DomainControl = {
  data: LineDataPoint[];
  toggleDomain: (range: Range) => void;
  activeRange: Range;
};

export interface ChartCaptionInterface {
  label: string;
  value: string;
  currency: string;
}

export type Payload = {
  dataKey: string;
  color: string;
  value: number;
};

'''
'''--- components/Badge/index.ts ---
export * from './Badge';

'''
'''--- components/BadgeList/index.ts ---
export * from './BadgeList';

'''
'''--- components/DaoAddressLink/index.ts ---
export * from './DaoAddressLink';

'''
'''--- components/Dropdown/index.ts ---
export * from './Dropdown';

'''
'''--- components/ExplorerLink/index.ts ---
export * from './ExplorerLink';

'''
'''--- components/ExplorerLink/types.ts ---
export type ExplorerLinkType = 'transaction' | 'member';

'''
'''--- components/ExternalLink/index.ts ---
export * from './ExternalLink';

'''
'''--- components/Logo/index.ts ---
export * from './Logo';

'''
'''--- components/Pagination/components/NavLabel/index.ts ---
export * from './NavLabel';

'''
'''--- components/Pagination/index.ts ---
export * from './Pagination';

'''
'''--- components/Popup/index.ts ---
export * from './Popup';

'''
'''--- components/Sidebar/components/NavItem/index.ts ---
export * from './NavItem';

'''
'''--- components/Sidebar/index.ts ---
export * from './Sidebar';

'''
'''--- components/Tabs/index.ts ---
export * from './Tabs';

'''
'''--- components/Tabs/types.ts ---
import { ReactNode } from 'react';

export interface TabItem<T = string> {
  id: number | string;
  label: T;
  content?: ReactNode;
  onClick?: (tab: TabItem) => void;
  className?: string;
  activeClassName?: string;
}

'''
'''--- components/cards/TokenCard/components/FormattedNumericValue/index.ts ---
export * from './FormattedNumericValue';

'''
'''--- components/cards/TokenCard/index.ts ---
export * from './TokenCard';

'''
'''--- components/cards/TransactionCard/index.ts ---
export * from './TransactionCard';

'''
'''--- components/cards/member-card/GroupsRenderer/index.ts ---
export * from './GroupsRenderer';
export { default } from './GroupsRenderer';

'''
'''--- components/cards/member-card/MemberCard/components/SmileSvg/index.ts ---
export * from './SmileSvg';

'''
'''--- components/cards/member-card/MemberCard/components/Tokens/index.ts ---
export * from './Tokens';

'''
'''--- components/cards/member-card/MemberCard/index.ts ---
export * from './MemberCard';
export { default } from './MemberCard';

'''
'''--- components/cards/member-card/MemberCardPopup/index.ts ---
export * from './MemberCardPopup';

'''
'''--- components/cards/member-card/types.ts ---
export type Token = {
  value: number;
  symbol: string;
};

'''
'''--- components/inputs/Checkbox/index.ts ---
export * from './Checkbox';

'''
'''--- components/inputs/Input/index.ts ---
export * from './Input';
export * from './DebouncedInput';

'''
'''--- components/inputs/Input/types.ts ---
import React, { CSSProperties, ReactNode } from 'react';
import { Property } from 'csstype';

export interface InputProps
  extends Omit<React.HTMLProps<HTMLInputElement>, 'size' | 'label'> {
  label?: string | ReactNode;
  description?: string | undefined;
  isValid?: boolean | undefined;
  inputSize?: number | undefined;
  inputStyles?: CSSProperties;
  size?: 'small' | 'medium' | 'large' | 'block' | 'content' | 'auto';
  isBorderless?: boolean;
  textAlign?: Property.TextAlign;
  inputClassName?: string;
  rightContent?: ReactNode;
}

'''
'''--- components/inputs/InputFormWrapper/index.ts ---
export * from './InputFormWrapper';

'''
'''--- components/inputs/TextArea/index.ts ---
export * from './TextArea';

'''
'''--- components/inputs/Toggle/components/ToggleDisplay/index.ts ---
export * from './ToggleDisplay';

'''
'''--- components/inputs/Toggle/index.ts ---
export * from './Toggle';

'''
'''--- components/inputs/selects/Select/index.ts ---
export * from './Select';

'''
'''--- components/loader/index.ts ---
export * from './Loader';

'''
'''--- components/modal/ModalContext.ts ---
import React from 'react';

export interface IModal {
  isOpen: boolean;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  onClose: (...args: any[]) => void;
}

export type ModalType = React.FunctionComponentElement<IModal>;

export interface ModalContextType {
  showModal(id: string, component: ModalType): void;
  hideModal(id: string): void;
}

const outsideOfProvider = (): Error => {
  throw new Error('Please make sure your app is wrapped with ModalProvider.');
};

/**
 * Modal Context Object
 */
export const ModalContext = React.createContext<ModalContextType>({
  showModal: outsideOfProvider,
  hideModal: outsideOfProvider,
});

'''
'''--- components/modal/index.ts ---
import { useModal } from './hooks';
import { ModalProvider } from './ModalProvider';

export * from './Modal';
export { useModal, ModalProvider };

'''
'''--- config/aws.ts ---
export const awsConfig = {
  endpoint: process.env.AWS_ENDPOINT || '',
  s3ForcePathStyle: Boolean(process.env.AWS_S3_FORCE_PATH_STYLE) || false,
  apiVersion: process.env.AWS_API_VERSION || '',
  bucket: process.env.AWS_BUCKET || '',
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: process.env.AWS_REGION || '',
  identityPoolId: process.env.AWS_IDENTITY_POOL_ID || '',
};

'''
'''--- config/fetchConfig.ts ---
export const APP_CONFIG = `(function () {
  fetch('/api/config')
    .then(res => res.json())
    .then(data => {
      window.APP_CONFIG = data;
        const event = new CustomEvent('appConfigReady');
        document.dispatchEvent(event);
    })
    .catch(e => {
      console.error('Failed to fetch application config', e);
    });
})()`;

'''
'''--- config/index.ts ---
export { awsConfig } from './aws';

function getApiUrl() {
  if (!process.browser) {
    return `${process.env.API_URL}/api/v1/`;
  }

  if (window?.APP_CONFIG?.API_URL) {
    return `${window.APP_CONFIG.API_URL}/api/v1/`;
  }

  return '/api/server/v1/';
}

export const appConfig = {
  API_URL: getApiUrl(),
  LOCAL_WALLET_REDIRECT: process.env.LOCAL_WALLET_REDIRECT,
  STATS_API_URL: process.env.STATS_API_URL,
  DRAFTS_API_URL: process.env.DRAFTS_API_URL,
  SEARCH_API_URL: process.env.SEARCH_API_URL,
  OPEN_SEARCH_USERNAME: process.env.OPEN_SEARCH_USERNAME,
  OPEN_SEARCH_PASSWORD: process.env.OPEN_SEARCH_PASSWORD,
  APP_DOMAIN: process.env.APP_DOMAIN,
  LAUNCHDARKLY_ID: process.env.NEXT_PUBLIC_LAUNCHDARKLY_ID,
  LAUNCHDARKLY_SDK_KEY: process.env.NEXT_PUBLIC_LAUNCHDARKLY_SDK_KEY,
  NEAR_ENV: process.env.NEAR_ENV,
  AWS_BUCKET: '',
  AWS_REGION: '',
  GOOGLE_ANALYTICS_KEY: process.env.GOOGLE_ANALYTICS_KEY,
  LOG_ROCKET_APP_ID: process.env.LOG_ROCKET_APP_ID,
  DD_APPLICATION_ID: process.env.DD_APPLICATION_ID,
  DD_CLIENT_TOKEN: process.env.DD_CLIENT_TOKEN,
  DD_SERVICE: process.env.DD_SERVICE,
  RELEASE_NOTES: process.env.RELEASE_NOTES,
  I18_RELOAD_ON_PRERENDER: false,
  TOASTS_NOTIFICATIONS_TIMEOUT: 0,
  NEAR_CONTRACT_NAME: process.env.NEAR_CONTRACT_NAME,
  ROKETO_CONTRACT_NAME: process.env.ROKETO_CONTRACT_NAME,
  ROKETO_MULTICALL_NAME: process.env.ROKETO_MULTICALL_NAME,
  TOKEN_FACTORY_CONTRACT_NAME: process.env.TOKEN_FACTORY_CONTRACT_NAME,
  GENERIC_FACTORY_CONTRACT_NAME: process.env.GENERIC_FACTORY_CONTRACT_NAME,
  STAKING_CONTRACT_BINARY_HASH: process.env.STAKING_CONTRACT_BINARY_HASH,
};

'''
'''--- config/near.ts ---
import { Config } from 'types/config';

export type NEAR_ENV =
  | 'production'
  | 'development'
  | 'local'
  | 'test'
  | 'mainnet'
  | 'betanet'
  | 'testnet'
  | 'ci'
  | 'ci-betanet';

export type NearConfig = {
  walletFormat?: string;
  networkId: string;
  nodeUrl: string;
  contractName: string;
  tokenFactoryContractName: string;
  masterAccount?: string;
  walletUrl?: string;
  helperUrl?: string;
  explorerUrl?: string;
  keyPath?: string;
  headers: { [key: string]: string | number };
};

export const getNearConfig = (config: Config): NearConfig => {
  // const CONTRACT_NAME = config?.NEAR_CONTRACT_NAME ?? 'sputnikv2.testnet';
  // const TOKEN_FACTORY_CONTRACT_NAME =
  //   config?.TOKEN_FACTORY_CONTRACT_NAME ?? 'tokens.testnet';
  const env = config?.NEAR_ENV ?? 'development';

  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        walletFormat: '.near',
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: 'sputnik-dao.near',
        tokenFactoryContractName: config.TOKEN_FACTORY_CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
        headers: {},
      };
    case 'testnet':
    case 'development':
      return {
        walletFormat: '.testnet',
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: config.NEAR_CONTRACT_NAME,
        tokenFactoryContractName: config.TOKEN_FACTORY_CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
        headers: {},
      };
    case 'betanet':
      return {
        walletFormat: '.betanet',
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        tokenFactoryContractName: '',
        contractName: config.NEAR_CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org',
        explorerUrl: 'https://explorer.betanet.near.org',
        headers: {},
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        tokenFactoryContractName: config.TOKEN_FACTORY_CONTRACT_NAME,
        contractName: config.NEAR_CONTRACT_NAME,
        headers: {},
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        tokenFactoryContractName: config.TOKEN_FACTORY_CONTRACT_NAME,
        contractName: config.NEAR_CONTRACT_NAME,
        masterAccount: 'test.near',
        headers: {},
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        tokenFactoryContractName: config.TOKEN_FACTORY_CONTRACT_NAME,
        contractName: config.NEAR_CONTRACT_NAME,
        masterAccount: 'test.near',
        headers: {},
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.ts.`
      );
  }
};

'''
'''--- constants/common.ts ---
export const PAGE_LAYOUT_ID = 'PAGE_LAYOUT_ID';

export const CREATE_PROPOSAL_FORM = 'ASTRO_CREATE_PROPOSAL_FORM';

export const SHOW_PROPOSAL_SELECTOR = 'SHOW_PROPOSAL_SELECTOR';

export const DATA_SEPARATOR = '$$$$';

export const SHOW_NOTIFICATION_EVENT = 'SHOW_NOTIFICATION_EVENT';
export const HIDE_NOTIFICATION_EVENT = 'HIDE_NOTIFICATION_EVENT';
export const HIDE_NOTIFICATION_EVENT_BY_TAG = 'HIDE_NOTIFICATION_EVENT_BY_TAG';

export const LOREN_IPSUM =
  'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sagittis eleifend habitant laoreet ornare vitae consequat. Potenti ut urna, ultricies elit nam. Feugiat porta elit ultricies eu mollis.';

export const ONE_HUNDRED = 100;
export const USD = '$';
export const PERCENT = '%';

'''
'''--- constants/cookies.ts ---
export const DAO_COOKIE = 'selectedDao';
export const ACCOUNT_COOKIE = 'account';
export const FEED_STATUS_COOKIE = 'feedStatus';
export const DEFAULT_OPTIONS = {
  maxAge: Number.MAX_SAFE_INTEGER,
  path: '/',
};

'''
'''--- constants/countryPhoneCodes.ts ---
export const COUNTRY_PHONE_CODES = [
  { dialCode: '+1', flag: '🇨🇦', code: 'CA', name: 'Canada' },
  {
    dialCode: '+1',
    flag: '🇺🇸',
    code: 'US',
    name: 'United States',
  },
  { dialCode: '+1242', flag: '🇧🇸', code: 'BS', name: 'Bahamas' },
  {
    dialCode: '+1246',
    flag: '🇧🇧',
    code: 'BB',
    name: 'Barbados',
  },
  { dialCode: '+1264', flag: '🇦🇮', code: 'AI', name: 'Anguilla' },
  {
    dialCode: '+1268',
    flag: '🇦🇬',
    code: 'AG',
    name: 'Antigua and Barbuda',
  },
  {
    dialCode: '+1284',
    flag: '🇻🇬',
    code: 'VG',
    name: 'Virgin Islands, British',
  },
  {
    dialCode: '+1340',
    flag: '🇻🇮',
    code: 'VI',
    name: 'Virgin Islands, U.S.',
  },
  { dialCode: '+1441', flag: '🇧🇲', code: 'BM', name: 'Bermuda' },
  {
    dialCode: '+1473',
    flag: '🇬🇩',
    code: 'GD',
    name: 'Grenada',
  },
  {
    dialCode: '+1649',
    flag: '🇹🇨',
    code: 'TC',
    name: 'Turks and Caicos Islands',
  },
  {
    dialCode: '+1664',
    flag: '🇲🇸',
    code: 'MS',
    name: 'Montserrat',
  },
  {
    dialCode: '+1670',
    flag: '🇲🇵',
    code: 'MP',
    name: 'Northern Mariana Islands',
  },
  {
    dialCode: '+1671',
    flag: '🇬🇺',
    code: 'GU',
    name: 'Guam',
  },
  { dialCode: '+1684', flag: '🇦🇸', code: 'AS', name: 'American Samoa' },
  {
    dialCode: '+1758',
    flag: '🇱🇨',
    code: 'LC',
    name: 'Saint Lucia',
  },
  { dialCode: '+1767', flag: '🇩🇲', code: 'DM', name: 'Dominica' },
  {
    dialCode: '+1784',
    flag: '🇻🇨',
    code: 'VC',
    name: 'Saint Vincent and the Grenadines',
  },
  { dialCode: '+1849', flag: '🇩🇴', code: 'DO', name: 'Dominican Republic' },
  {
    dialCode: '+1868',
    flag: '🇹🇹',
    code: 'TT',
    name: 'Trinidad and Tobago',
  },
  { dialCode: '+1869', flag: '🇰🇳', code: 'KN', name: 'Saint Kitts and Nevis' },
  {
    dialCode: '+1876',
    flag: '🇯🇲',
    code: 'JM',
    name: 'Jamaica',
  },
  { dialCode: '+1939', flag: '🇵🇷', code: 'PR', name: 'Puerto Rico' },
  {
    dialCode: '+20',
    flag: '🇪🇬',
    code: 'EG',
    name: 'Egypt',
  },
  { dialCode: '+211', flag: '🇸🇸', code: 'SS', name: 'South Sudan' },
  {
    dialCode: '+212',
    flag: '🇲🇦',
    code: 'MA',
    name: 'Morocco',
  },
  { dialCode: '+213', flag: '🇩🇿', code: 'DZ', name: 'Algeria' },
  {
    dialCode: '+216',
    flag: '🇹🇳',
    code: 'TN',
    name: 'Tunisia',
  },
  { dialCode: '+218', flag: '🇱🇾', code: 'LY', name: 'Libyan Arab Jamahiriya' },
  {
    dialCode: '+220',
    flag: '🇬🇲',
    code: 'GM',
    name: 'Gambia',
  },
  { dialCode: '+221', flag: '🇸🇳', code: 'SN', name: 'Senegal' },
  {
    dialCode: '+222',
    flag: '🇲🇷',
    code: 'MR',
    name: 'Mauritania',
  },
  { dialCode: '+223', flag: '🇲🇱', code: 'ML', name: 'Mali' },
  {
    dialCode: '+224',
    flag: '🇬🇳',
    code: 'GN',
    name: 'Guinea',
  },
  { dialCode: '+225', flag: '🇨🇮', code: 'CI', name: "Cote d'Ivoire" },
  {
    dialCode: '+226',
    flag: '🇧🇫',
    code: 'BF',
    name: 'Burkina Faso',
  },
  { dialCode: '+227', flag: '🇳🇪', code: 'NE', name: 'Niger' },
  {
    dialCode: '+228',
    flag: '🇹🇬',
    code: 'TG',
    name: 'Togo',
  },
  { dialCode: '+229', flag: '🇧🇯', code: 'BJ', name: 'Benin' },
  {
    dialCode: '+230',
    flag: '🇲🇺',
    code: 'MU',
    name: 'Mauritius',
  },
  { dialCode: '+231', flag: '🇱🇷', code: 'LR', name: 'Liberia' },
  {
    dialCode: '+232',
    flag: '🇸🇱',
    code: 'SL',
    name: 'Sierra Leone',
  },
  { dialCode: '+233', flag: '🇬🇭', code: 'GH', name: 'Ghana' },
  {
    dialCode: '+234',
    flag: '🇳🇬',
    code: 'NG',
    name: 'Nigeria',
  },
  { dialCode: '+235', flag: '🇹🇩', code: 'TD', name: 'Chad' },
  {
    dialCode: '+236',
    flag: '🇨🇫',
    code: 'CF',
    name: 'Central African Republic',
  },
  { dialCode: '+237', flag: '🇨🇲', code: 'CM', name: 'Cameroon' },
  {
    dialCode: '+238',
    flag: '🇨🇻',
    code: 'CV',
    name: 'Cape Verde',
  },
  { dialCode: '+239', flag: '🇸🇹', code: 'ST', name: 'Sao Tome and Principe' },
  {
    dialCode: '+240',
    flag: '🇬🇶',
    code: 'GQ',
    name: 'Equatorial Guinea',
  },
  { dialCode: '+241', flag: '🇬🇦', code: 'GA', name: 'Gabon' },
  {
    dialCode: '+242',
    flag: '🇨🇬',
    code: 'CG',
    name: 'Congo',
  },
  {
    dialCode: '+243',
    flag: '🇨🇩',
    code: 'CD',
    name: 'Congo, The Democratic Republic of the Congo',
  },
  { dialCode: '+244', flag: '🇦🇴', code: 'AO', name: 'Angola' },
  {
    dialCode: '+245',
    flag: '🇬🇼',
    code: 'GW',
    name: 'Guinea-Bissau',
  },
  {
    dialCode: '+246',
    flag: '🇮🇴',
    code: 'IO',
    name: 'British Indian Ocean Territory',
  },
  {
    dialCode: '+248',
    flag: '🇸🇨',
    code: 'SC',
    name: 'Seychelles',
  },
  { dialCode: '+249', flag: '🇸🇩', code: 'SD', name: 'Sudan' },
  {
    dialCode: '+250',
    flag: '🇷🇼',
    code: 'RW',
    name: 'Rwanda',
  },
  { dialCode: '+251', flag: '🇪🇹', code: 'ET', name: 'Ethiopia' },
  {
    dialCode: '+252',
    flag: '🇸🇴',
    code: 'SO',
    name: 'Somalia',
  },
  { dialCode: '+253', flag: '🇩🇯', code: 'DJ', name: 'Djibouti' },
  {
    dialCode: '+254',
    flag: '🇰🇪',
    code: 'KE',
    name: 'Kenya',
  },
  {
    dialCode: '+255',
    flag: '🇹🇿',
    code: 'TZ',
    name: 'Tanzania, United Republic of Tanzania',
  },
  { dialCode: '+256', flag: '🇺🇬', code: 'UG', name: 'Uganda' },
  {
    dialCode: '+257',
    flag: '🇧🇮',
    code: 'BI',
    name: 'Burundi',
  },
  { dialCode: '+258', flag: '🇲🇿', code: 'MZ', name: 'Mozambique' },
  {
    dialCode: '+260',
    flag: '🇿🇲',
    code: 'ZM',
    name: 'Zambia',
  },
  { dialCode: '+261', flag: '🇲🇬', code: 'MG', name: 'Madagascar' },
  {
    dialCode: '+262',
    flag: '🇹🇫',
    code: 'TF',
    name: 'French Southern Territories',
  },
  { dialCode: '+262', flag: '🇾🇹', code: 'YT', name: 'Mayotte' },
  {
    dialCode: '+262',
    flag: '🇷🇪',
    code: 'RE',
    name: 'Reunion',
  },
  { dialCode: '+263', flag: '🇿🇼', code: 'ZW', name: 'Zimbabwe' },
  {
    dialCode: '+264',
    flag: '🇳🇦',
    code: 'NA',
    name: 'Namibia',
  },
  { dialCode: '+265', flag: '🇲🇼', code: 'MW', name: 'Malawi' },
  {
    dialCode: '+266',
    flag: '🇱🇸',
    code: 'LS',
    name: 'Lesotho',
  },
  { dialCode: '+267', flag: '🇧🇼', code: 'BW', name: 'Botswana' },
  {
    dialCode: '+268',
    flag: '🇸🇿',
    code: 'SZ',
    name: 'Swaziland',
  },
  { dialCode: '+269', flag: '🇰🇲', code: 'KM', name: 'Comoros' },
  {
    dialCode: '+27',
    flag: '🇿🇦',
    code: 'ZA',
    name: 'South Africa',
  },
  {
    dialCode: '+290',
    flag: '🇸🇭',
    code: 'SH',
    name: 'Saint Helena, Ascension and Tristan Da Cunha',
  },
  { dialCode: '+291', flag: '🇪🇷', code: 'ER', name: 'Eritrea' },
  {
    dialCode: '+297',
    flag: '🇦🇼',
    code: 'AW',
    name: 'Aruba',
  },
  { dialCode: '+298', flag: '🇫🇴', code: 'FO', name: 'Faroe Islands' },
  {
    dialCode: '+299',
    flag: '🇬🇱',
    code: 'GL',
    name: 'Greenland',
  },
  { dialCode: '+30', flag: '🇬🇷', code: 'GR', name: 'Greece' },
  {
    dialCode: '+31',
    flag: '🇳🇱',
    code: 'NL',
    name: 'Netherlands',
  },
  { dialCode: '+32', flag: '🇧🇪', code: 'BE', name: 'Belgium' },
  {
    dialCode: '+33',
    flag: '🇫🇷',
    code: 'FR',
    name: 'France',
  },
  { dialCode: '+34', flag: '🇪🇸', code: 'ES', name: 'Spain' },
  {
    dialCode: '+345',
    flag: '🇰🇾',
    code: 'KY',
    name: 'Cayman Islands',
  },
  { dialCode: '+350', flag: '🇬🇮', code: 'GI', name: 'Gibraltar' },
  {
    dialCode: '+351',
    flag: '🇵🇹',
    code: 'PT',
    name: 'Portugal',
  },
  { dialCode: '+352', flag: '🇱🇺', code: 'LU', name: 'Luxembourg' },
  {
    dialCode: '+353',
    flag: '🇮🇪',
    code: 'IE',
    name: 'Ireland',
  },
  { dialCode: '+354', flag: '🇮🇸', code: 'IS', name: 'Iceland' },
  {
    dialCode: '+355',
    flag: '🇦🇱',
    code: 'AL',
    name: 'Albania',
  },
  { dialCode: '+356', flag: '🇲🇹', code: 'MT', name: 'Malta' },
  {
    dialCode: '+357',
    flag: '🇨🇾',
    code: 'CY',
    name: 'Cyprus',
  },
  { dialCode: '+358', flag: '🇦🇽', code: 'AX', name: 'Åland Islands' },
  {
    dialCode: '+358',
    flag: '🇫🇮',
    code: 'FI',
    name: 'Finland',
  },
  { dialCode: '+359', flag: '🇧🇬', code: 'BG', name: 'Bulgaria' },
  {
    dialCode: '+36',
    flag: '🇭🇺',
    code: 'HU',
    name: 'Hungary',
  },
  { dialCode: '+370', flag: '🇱🇹', code: 'LT', name: 'Lithuania' },
  {
    dialCode: '+371',
    flag: '🇱🇻',
    code: 'LV',
    name: 'Latvia',
  },
  { dialCode: '+372', flag: '🇪🇪', code: 'EE', name: 'Estonia' },
  {
    dialCode: '+373',
    flag: '🇲🇩',
    code: 'MD',
    name: 'Moldova',
  },
  { dialCode: '+374', flag: '🇦🇲', code: 'AM', name: 'Armenia' },
  {
    dialCode: '+375',
    flag: '🇧🇾',
    code: 'BY',
    name: 'Belarus',
  },
  { dialCode: '+376', flag: '🇦🇩', code: 'AD', name: 'Andorra' },
  {
    dialCode: '+377',
    flag: '🇲🇨',
    code: 'MC',
    name: 'Monaco',
  },
  { dialCode: '+378', flag: '🇸🇲', code: 'SM', name: 'San Marino' },
  {
    dialCode: '+379',
    flag: '🇻🇦',
    code: 'VA',
    name: 'Holy See (Vatican City State)',
  },
  { dialCode: '+380', flag: '🇺🇦', code: 'UA', name: 'Ukraine' },
  {
    dialCode: '+381',
    flag: '🇷🇸',
    code: 'RS',
    name: 'Serbia',
  },
  { dialCode: '+382', flag: '🇲🇪', code: 'ME', name: 'Montenegro' },
  {
    dialCode: '+383',
    flag: '🇽🇰',
    code: 'XK',
    name: 'Kosovo',
  },
  { dialCode: '+385', flag: '🇭🇷', code: 'HR', name: 'Croatia' },
  {
    dialCode: '+386',
    flag: '🇸🇮',
    code: 'SI',
    name: 'Slovenia',
  },
  { dialCode: '+387', flag: '🇧🇦', code: 'BA', name: 'Bosnia and Herzegovina' },
  {
    dialCode: '+389',
    flag: '🇲🇰',
    code: 'MK',
    name: 'Macedonia',
  },
  { dialCode: '+39', flag: '🇮🇹', code: 'IT', name: 'Italy' },
  {
    dialCode: '+40',
    flag: '🇷🇴',
    code: 'RO',
    name: 'Romania',
  },
  { dialCode: '+41', flag: '🇨🇭', code: 'CH', name: 'Switzerland' },
  {
    dialCode: '+420',
    flag: '🇨🇿',
    code: 'CZ',
    name: 'Czech Republic',
  },
  { dialCode: '+421', flag: '🇸🇰', code: 'SK', name: 'Slovakia' },
  {
    dialCode: '+423',
    flag: '🇱🇮',
    code: 'LI',
    name: 'Liechtenstein',
  },
  { dialCode: '+43', flag: '🇦🇹', code: 'AT', name: 'Austria' },
  {
    dialCode: '+44',
    flag: '🇬🇬',
    code: 'GG',
    name: 'Guernsey',
  },
  { dialCode: '+44', flag: '🇮🇲', code: 'IM', name: 'Isle of Man' },
  {
    dialCode: '+44',
    flag: '🇯🇪',
    code: 'JE',
    name: 'Jersey',
  },
  { dialCode: '+44', flag: '🇬🇧', code: 'GB', name: 'United Kingdom' },
  {
    dialCode: '+45',
    flag: '🇩🇰',
    code: 'DK',
    name: 'Denmark',
  },
  { dialCode: '+46', flag: '🇸🇪', code: 'SE', name: 'Sweden' },
  {
    dialCode: '+47',
    flag: '🇧🇻',
    code: 'BV',
    name: 'Bouvet Island',
  },
  { dialCode: '+47', flag: '🇳🇴', code: 'NO', name: 'Norway' },
  {
    dialCode: '+47',
    flag: '🇸🇯',
    code: 'SJ',
    name: 'Svalbard and Jan Mayen',
  },
  { dialCode: '+48', flag: '🇵🇱', code: 'PL', name: 'Poland' },
  {
    dialCode: '+49',
    flag: '🇩🇪',
    code: 'DE',
    name: 'Germany',
  },
  {
    dialCode: '+500',
    flag: '🇫🇰',
    code: 'FK',
    name: 'Falkland Islands (Malvinas)',
  },
  {
    dialCode: '+500',
    flag: '🇬🇸',
    code: 'GS',
    name: 'South Georgia and the South Sandwich Islands',
  },
  { dialCode: '+501', flag: '🇧🇿', code: 'BZ', name: 'Belize' },
  {
    dialCode: '+502',
    flag: '🇬🇹',
    code: 'GT',
    name: 'Guatemala',
  },
  { dialCode: '+503', flag: '🇸🇻', code: 'SV', name: 'El Salvador' },
  {
    dialCode: '+504',
    flag: '🇭🇳',
    code: 'HN',
    name: 'Honduras',
  },
  { dialCode: '+505', flag: '🇳🇮', code: 'NI', name: 'Nicaragua' },
  {
    dialCode: '+506',
    flag: '🇨🇷',
    code: 'CR',
    name: 'Costa Rica',
  },
  { dialCode: '+507', flag: '🇵🇦', code: 'PA', name: 'Panama' },
  {
    dialCode: '+508',
    flag: '🇵🇲',
    code: 'PM',
    name: 'Saint Pierre and Miquelon',
  },
  { dialCode: '+509', flag: '🇭🇹', code: 'HT', name: 'Haiti' },
  {
    dialCode: '+51',
    flag: '🇵🇪',
    code: 'PE',
    name: 'Peru',
  },
  { dialCode: '+52', flag: '🇲🇽', code: 'MX', name: 'Mexico' },
  {
    dialCode: '+53',
    flag: '🇨🇺',
    code: 'CU',
    name: 'Cuba',
  },
  { dialCode: '+54', flag: '🇦🇷', code: 'AR', name: 'Argentina' },
  {
    dialCode: '+55',
    flag: '🇧🇷',
    code: 'BR',
    name: 'Brazil',
  },
  { dialCode: '+56', flag: '🇨🇱', code: 'CL', name: 'Chile' },
  {
    dialCode: '+57',
    flag: '🇨🇴',
    code: 'CO',
    name: 'Colombia',
  },
  {
    dialCode: '+58',
    flag: '🇻🇪',
    code: 'VE',
    name: 'Venezuela, Bolivarian Republic of Venezuela',
  },
  { dialCode: '+590', flag: '🇬🇵', code: 'GP', name: 'Guadeloupe' },
  {
    dialCode: '+590',
    flag: '🇧🇱',
    code: 'BL',
    name: 'Saint Barthelemy',
  },
  { dialCode: '+590', flag: '🇲🇫', code: 'MF', name: 'Saint Martin' },
  {
    dialCode: '+591',
    flag: '🇧🇴',
    code: 'BO',
    name: 'Bolivia, Plurinational State of bolivia',
  },
  { dialCode: '+592', flag: '🇬🇾', code: 'GY', name: 'Guyana' },
  {
    dialCode: '+593',
    flag: '🇪🇨',
    code: 'EC',
    name: 'Ecuador',
  },
  { dialCode: '+594', flag: '🇬🇫', code: 'GF', name: 'French Guiana' },
  {
    dialCode: '+595',
    flag: '🇵🇾',
    code: 'PY',
    name: 'Paraguay',
  },
  { dialCode: '+596', flag: '🇲🇶', code: 'MQ', name: 'Martinique' },
  {
    dialCode: '+597',
    flag: '🇸🇷',
    code: 'SR',
    name: 'Suriname',
  },
  { dialCode: '+598', flag: '🇺🇾', code: 'UY', name: 'Uruguay' },
  {
    dialCode: '+599',
    flag: '',
    code: 'AN',
    name: 'Netherlands Antilles',
  },
  { dialCode: '+60', flag: '🇲🇾', code: 'MY', name: 'Malaysia' },
  {
    dialCode: '+61',
    flag: '🇦🇺',
    code: 'AU',
    name: 'Australia',
  },
  { dialCode: '+61', flag: '🇨🇽', code: 'CX', name: 'Christmas Island' },
  {
    dialCode: '+61',
    flag: '🇨🇨',
    code: 'CC',
    name: 'Cocos (Keeling) Islands',
  },
  { dialCode: '+62', flag: '🇮🇩', code: 'ID', name: 'Indonesia' },
  {
    dialCode: '+63',
    flag: '🇵🇭',
    code: 'PH',
    name: 'Philippines',
  },
  { dialCode: '+64', flag: '🇳🇿', code: 'NZ', name: 'New Zealand' },
  {
    dialCode: '+64',
    flag: '🇵🇳',
    code: 'PN',
    name: 'Pitcairn',
  },
  { dialCode: '+65', flag: '🇸🇬', code: 'SG', name: 'Singapore' },
  {
    dialCode: '+66',
    flag: '🇹🇭',
    code: 'TH',
    name: 'Thailand',
  },
  { dialCode: '+670', flag: '🇹🇱', code: 'TL', name: 'Timor-Leste' },
  {
    dialCode: '+672',
    flag: '🇦🇶',
    code: 'AQ',
    name: 'Antarctica',
  },
  {
    dialCode: '+672',
    flag: '🇭🇲',
    code: 'HM',
    name: 'Heard Island and Mcdonald Islands',
  },
  { dialCode: '+672', flag: '🇳🇫', code: 'NF', name: 'Norfolk Island' },
  {
    dialCode: '+673',
    flag: '🇧🇳',
    code: 'BN',
    name: 'Brunei Darussalam',
  },
  { dialCode: '+674', flag: '🇳🇷', code: 'NR', name: 'Nauru' },
  {
    dialCode: '+675',
    flag: '🇵🇬',
    code: 'PG',
    name: 'Papua New Guinea',
  },
  { dialCode: '+676', flag: '🇹🇴', code: 'TO', name: 'Tonga' },
  {
    dialCode: '+677',
    flag: '🇸🇧',
    code: 'SB',
    name: 'Solomon Islands',
  },
  { dialCode: '+678', flag: '🇻🇺', code: 'VU', name: 'Vanuatu' },
  {
    dialCode: '+679',
    flag: '🇫🇯',
    code: 'FJ',
    name: 'Fiji',
  },
  { dialCode: '+680', flag: '🇵🇼', code: 'PW', name: 'Palau' },
  {
    dialCode: '+681',
    flag: '🇼🇫',
    code: 'WF',
    name: 'Wallis and Futuna',
  },
  { dialCode: '+682', flag: '🇨🇰', code: 'CK', name: 'Cook Islands' },
  {
    dialCode: '+683',
    flag: '🇳🇺',
    code: 'NU',
    name: 'Niue',
  },
  { dialCode: '+685', flag: '🇼🇸', code: 'WS', name: 'Samoa' },
  {
    dialCode: '+686',
    flag: '🇰🇮',
    code: 'KI',
    name: 'Kiribati',
  },
  { dialCode: '+687', flag: '🇳🇨', code: 'NC', name: 'New Caledonia' },
  {
    dialCode: '+688',
    flag: '🇹🇻',
    code: 'TV',
    name: 'Tuvalu',
  },
  { dialCode: '+689', flag: '🇵🇫', code: 'PF', name: 'French Polynesia' },
  {
    dialCode: '+690',
    flag: '🇹🇰',
    code: 'TK',
    name: 'Tokelau',
  },
  {
    dialCode: '+691',
    flag: '🇫🇲',
    code: 'FM',
    name: 'Micronesia, Federated States of Micronesia',
  },
  { dialCode: '+692', flag: '🇲🇭', code: 'MH', name: 'Marshall Islands' },
  {
    dialCode: '+7',
    flag: '🇰🇿',
    code: 'KZ',
    name: 'Kazakhstan',
  },
  { dialCode: '+7', flag: '🇷🇺', code: 'RU', name: 'Russia' },
  {
    dialCode: '+81',
    flag: '🇯🇵',
    code: 'JP',
    name: 'Japan',
  },
  {
    dialCode: '+82',
    flag: '🇰🇷',
    code: 'KR',
    name: 'Korea, Republic of South Korea',
  },
  {
    dialCode: '+84',
    flag: '🇻🇳',
    code: 'VN',
    name: 'Vietnam',
  },
  {
    dialCode: '+850',
    flag: '🇰🇵',
    code: 'KP',
    name: "Korea, Democratic People's Republic of Korea",
  },
  { dialCode: '+852', flag: '🇭🇰', code: 'HK', name: 'Hong Kong' },
  {
    dialCode: '+853',
    flag: '🇲🇴',
    code: 'MO',
    name: 'Macao',
  },
  { dialCode: '+855', flag: '🇰🇭', code: 'KH', name: 'Cambodia' },
  {
    dialCode: '+856',
    flag: '🇱🇦',
    code: 'LA',
    name: 'Laos',
  },
  { dialCode: '+86', flag: '🇨🇳', code: 'CN', name: 'China' },
  {
    dialCode: '+880',
    flag: '🇧🇩',
    code: 'BD',
    name: 'Bangladesh',
  },
  { dialCode: '+886', flag: '🇹🇼', code: 'TW', name: 'Taiwan' },
  {
    dialCode: '+90',
    flag: '🇹🇷',
    code: 'TR',
    name: 'Turkey',
  },
  { dialCode: '+91', flag: '🇮🇳', code: 'IN', name: 'India' },
  {
    dialCode: '+92',
    flag: '🇵🇰',
    code: 'PK',
    name: 'Pakistan',
  },
  { dialCode: '+93', flag: '🇦🇫', code: 'AF', name: 'Afghanistan' },
  {
    dialCode: '+94',
    flag: '🇱🇰',
    code: 'LK',
    name: 'Sri Lanka',
  },
  { dialCode: '+95', flag: '🇲🇲', code: 'MM', name: 'Myanmar' },
  {
    dialCode: '+960',
    flag: '🇲🇻',
    code: 'MV',
    name: 'Maldives',
  },
  { dialCode: '+961', flag: '🇱🇧', code: 'LB', name: 'Lebanon' },
  {
    dialCode: '+962',
    flag: '🇯🇴',
    code: 'JO',
    name: 'Jordan',
  },
  { dialCode: '+963', flag: '🇸🇾', code: 'SY', name: 'Syrian Arab Republic' },
  {
    dialCode: '+964',
    flag: '🇮🇶',
    code: 'IQ',
    name: 'Iraq',
  },
  { dialCode: '+965', flag: '🇰🇼', code: 'KW', name: 'Kuwait' },
  {
    dialCode: '+966',
    flag: '🇸🇦',
    code: 'SA',
    name: 'Saudi Arabia',
  },
  { dialCode: '+967', flag: '🇾🇪', code: 'YE', name: 'Yemen' },
  {
    dialCode: '+968',
    flag: '🇴🇲',
    code: 'OM',
    name: 'Oman',
  },
  {
    dialCode: '+970',
    flag: '🇵🇸',
    code: 'PS',
    name: 'Palestinian Territory, Occupied',
  },
  { dialCode: '+971', flag: '🇦🇪', code: 'AE', name: 'United Arab Emirates' },
  {
    dialCode: '+972',
    flag: '🇮🇱',
    code: 'IL',
    name: 'Israel',
  },
  { dialCode: '+973', flag: '🇧🇭', code: 'BH', name: 'Bahrain' },
  {
    dialCode: '+974',
    flag: '🇶🇦',
    code: 'QA',
    name: 'Qatar',
  },
  { dialCode: '+975', flag: '🇧🇹', code: 'BT', name: 'Bhutan' },
  {
    dialCode: '+976',
    flag: '🇲🇳',
    code: 'MN',
    name: 'Mongolia',
  },
  { dialCode: '+977', flag: '🇳🇵', code: 'NP', name: 'Nepal' },
  {
    dialCode: '+98',
    flag: '🇮🇷',
    code: 'IR',
    name: 'Iran, Islamic Republic of Persian Gulf',
  },
  { dialCode: '+992', flag: '🇹🇯', code: 'TJ', name: 'Tajikistan' },
  {
    dialCode: '+993',
    flag: '🇹🇲',
    code: 'TM',
    name: 'Turkmenistan',
  },
  { dialCode: '+994', flag: '🇦🇿', code: 'AZ', name: 'Azerbaijan' },
  {
    dialCode: '+995',
    flag: '🇬🇪',
    code: 'GE',
    name: 'Georgia',
  },
  { dialCode: '+996', flag: '🇰🇬', code: 'KG', name: 'Kyrgyzstan' },
  {
    dialCode: '+998',
    flag: '🇺🇿',
    code: 'UZ',
    name: 'Uzbekistan',
  },
];

'''
'''--- constants/featureFlags.ts ---
export const FEATURE_FLAGS = {
  // NOTIFICATIONS: process.env.NEXT_PUBLIC_NOTIFICATIONS === 'true',
  NOTIFICATIONS: true,
  GOV_TOKEN: false,
};

'''
'''--- constants/googleTagManager.ts ---
export const gtag = (key: string): string => {
  return `https://www.googletagmanager.com/gtag/js?id=${key}`;
};

export const gtagScript = (key: string, accountId: string): string => {
  return `
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', '${key}', {
      page_path: window.location.pathname,
      user_id: '${accountId}',
    });

    gtag('set', 'user_properties', {
      account_id: '${accountId}',
    });
`;
};

'''
'''--- constants/integrations.ts ---
export const TYPE_FORM_FEEDBACK = `<div data-tf-sidetab="KTsmCeqB" data-tf-width="320" data-tf-height="400" data-tf-button-color="#19D992" data-tf-button-text="Feedback" data-tf-iframe-props="title=Astro" data-tf-medium="snippet" style="all:unset;"></div><script src="//embed.typeform.com/next/embed.js"></script>`;

'''
'''--- constants/localStorage.ts ---
export const TRANSACTIONS_KEY = 'transactions';
export const STAKE_TOKENS_KEY = 'astro_stake-tokens';
export const DELEGATE_VOTING_KEY = 'astro_delegate-voting';

'''
'''--- constants/proposals.ts ---
import { ProposalCategories } from 'types/proposal';
import { ListItem } from 'astro_3.0/features/ProposalsFeed/components/CategoriesFeedFilter';

export const FEED_CATEGORIES = [
  {
    value: ProposalCategories.FunctionCalls,
    label: 'Function Calls',
    icon: 'filterFunction',
  },
  {
    value: ProposalCategories.Governance,
    label: 'Governance',
    icon: 'filterGovernance',
  },
  {
    value: ProposalCategories.Financial,
    label: 'Transfers',
    icon: 'filterTransfer',
  },
  {
    value: ProposalCategories.Bounties,
    label: 'Bounties',
    icon: 'filterBounty',
  },
  {
    value: ProposalCategories.Members,
    label: 'Members',
    icon: 'filterMembers',
  },
  {
    value: ProposalCategories.Polls,
    label: 'Polls',
    icon: 'proposalPoll',
  },
] as unknown as ListItem[];

export const STAKING_CONTRACT_PREFIX = '-staking';

export const MAX_MULTI_VOTES = 20;

export const CREATE_PROPOSAL_ACTION_TYPE = 'astro_create-proposal-action-type';
export const CREATE_GOVERNANCE_TOKEN_PROPOSAL = 'createGovernanceToken';

'''
'''--- constants/regexp.ts ---
// eslint-disable-next-line no-useless-escape
export const VALID_URL_REGEXP =
  /^(?:(?:https?|ftp):\/\/)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?$/;
export const VALID_WEBSITE_NAME_REGEXP =
  /^[a-zA-Z0-9][a-zA-Z0-9- ]+[a-zA-Z0-9]$/g;
export const VALID_METHOD_NAME_REGEXP = /^\S*$/g;

'''
'''--- constants/routing.ts ---
export const MAIN_PAGE_URL = '/';
export const SPACE_RANCH_URL = '/dao/spaceranch.sputnikv2.testnet';

export const NFTS_URL = `${SPACE_RANCH_URL}/treasury/nfts`;
export const MEMBERS_URL = `${SPACE_RANCH_URL}/groups/all`;
export const BOUNTIES_URL = `https://app.dework.xyz/spaceranch`;
export const PROPOSALS_URL = `${SPACE_RANCH_URL}/proposals`;
export const POLLS_URL = `${SPACE_RANCH_URL}/tasks/polls`;
export const TREASUREY_URL = `${SPACE_RANCH_URL}/treasury/tokens`;
export const ORGANIZATION_URL = `${SPACE_RANCH_URL}/governance/settings`;

export const MY_DAOS_URL = '/my/daos';
export const MY_FEED_URL = '/my/feed';

export const ALL_DAOS_URL = '/all/daos';
export const ALL_FEED_URL = '/all/feed';

export const DISCOVER = '/discover';

export const CFC_LIBRARY = '/cfc-library';
export const CFC_LIBRARY_TEMPLATE_VIEW = `${CFC_LIBRARY}/[template]`;

export const CREATE_DAO_URL = '/create-dao-new';

export const SINGLE_DAO_PAGE = '/dao/[dao]';

export const SEARCH_PAGE_URL = '/search-results';

export const TERMS_AND_CONDITIONS = '/terms-conditions';

export const NOTIFICATIONS_PAGE_URL = '/notifications';
export const NOTIFICATIONS_SETTINGS_PAGE_URL = `${NOTIFICATIONS_PAGE_URL}/settings`;

export const ALL_PROPOSALS_PAGE_URL = '/dao/[dao]/proposals';
export const SINGLE_PROPOSAL_PAGE_URL = `${ALL_PROPOSALS_PAGE_URL}/[proposal]`;

export const GROUPS_PAGE_URL = '/dao/[dao]/groups/[group]';

const TREASURY_URL = '/dao/[dao]/treasury';
export const TREASURY_PAGE_URL = `${TREASURY_URL}/tokens`;
export const GOVERNANCE_TOKEN_INFO_URL = `${TREASURY_URL}/governance-token-info`;
export const CREATE_GOV_TOKEN_PAGE_URL = `${TREASURY_URL}/create-governance-token`;
export const CREATE_GOV_TOKEN_UNDER_CONSTRUCTION = `${TREASURY_URL}/under-construction`;

export const ALL_BOUNTIES_PAGE_URL = '/dao/[dao]/tasks/bounties/list';
export const SINGLE_BOUNTY_PAGE_URL =
  '/dao/[dao]/tasks/bounties/[bountyContext]';

export const DAO_SETTINGS_PAGE_URL = `${SINGLE_DAO_PAGE}/governance/settings`;
export const DAO_CONFIG_PAGE_URL = `${DAO_SETTINGS_PAGE_URL}/config`;
export const DAO_POLICY_PAGE_URL = `${DAO_SETTINGS_PAGE_URL}/policy`;
export const DAO_VERSION_PAGE_URL = `${DAO_SETTINGS_PAGE_URL}/version`;
export const DAO_CUSTOM_FC_TEMPLATES_PAGE_URL = `${DAO_SETTINGS_PAGE_URL}/custom-templates`;
export const MY_ACCOUNT_PAGE_URL = '/my-account';

export const DELEGATE_PAGE_URL = `${SINGLE_DAO_PAGE}/delegate`;

export const DRAFTS_PAGE_URL = `${SINGLE_DAO_PAGE}/drafts`;
export const DRAFT_PAGE_URL = `${SINGLE_DAO_PAGE}/drafts/[draft]`;
export const CREATE_DRAFT_PAGE_URL = `${SINGLE_DAO_PAGE}/create-draft`;
export const EDIT_DRAFT_PAGE_URL = `${DRAFT_PAGE_URL}/edit-draft`;

export const SELECTOR_TRANSACTION_PAGE_URL = '/callback/selectorTransaction';

'''
'''--- constants/timeConstants.ts ---
export const ONE_HOUR = 1;
export const HOURS_IN_DAY = 24;
export const HOURS_IN_WEEK = 168;

export const DATE_TIME_FORMAT = 'dd LLL yyyy HH:mm:ss';
export const DATE_FORMAT = 'dd LLL yyyy';
export const TIME_FORMAT = 'HH:mm:ss';

'''
'''--- constants/votingConstants.ts ---
import { HOURS_IN_DAY, HOURS_IN_WEEK, ONE_HOUR } from './timeConstants';

export const VOTE_ACTION_SOURCE_PAGE = 'astro-vote-action-source';

export type VotePeriodKey =
  | 'lessThanHourProposals'
  | 'lessThanDayProposals'
  | 'lessThanWeekProposals'
  | 'moreThanWeekProposals'
  | 'otherProposals';

export interface VoteByPeriodInterface {
  title: string;
  key: VotePeriodKey;
  subHours: number;
}

export const VOTE_BY_PERIOD: VoteByPeriodInterface[] = [
  {
    title: 'less than 1 hour',
    key: 'lessThanHourProposals',
    subHours: ONE_HOUR,
  },
  {
    title: 'less than a day',
    key: 'lessThanDayProposals',
    subHours: HOURS_IN_DAY,
  },
  {
    title: 'less than a week',
    key: 'lessThanWeekProposals',
    subHours: HOURS_IN_WEEK,
  },
  {
    title: 'more than a week',
    key: 'moreThanWeekProposals',
    subHours: HOURS_IN_WEEK,
  },
  {
    title: 'other proposals',
    key: 'otherProposals',
    subHours: 0,
  },
];

'''
'''--- context/AllTokensContext/index.ts ---
export * from './AllTokensContext';

'''
'''--- context/DaoSettingsContext/hooks.ts ---
import { Settings } from 'types/settings';
import { useAsyncFn, useMountedState } from 'react-use';
import { useWalletContext } from 'context/WalletContext';
import { useEffect, useRef, useState } from 'react';
import { SputnikHttpService } from 'services/sputnik';
import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';

export function useDaoSettingsData(daoId: string | undefined): {
  loading: boolean;
  update: (updates: Record<string, unknown>) => Promise<void>;
  settings: Settings | null | undefined;
} {
  const isMounted = useMountedState();
  const { accountId, nearService, pkAndSignature } = useWalletContext();
  const [settings, setSettings] = useState<Settings | null>(null);
  const daoRef = useRef(daoId);

  const [{ loading }, getSettings] = useAsyncFn(async () => {
    if (!daoId) {
      return;
    }

    const res = await SputnikHttpService.getDaoSettings(daoId);

    if (res && isMounted()) {
      setSettings(res);
      daoRef.current = daoId;
    }
  }, [daoId, isMounted]);

  const [{ loading: updatingStatus }, update] = useAsyncFn(
    async updates => {
      if (!daoId) {
        return;
      }

      if (!pkAndSignature) {
        return;
      }

      try {
        const latestSettings =
          (await SputnikHttpService.getDaoSettings(daoId)) ?? ({} as Settings);

        const newSettings: Settings = {
          ...latestSettings,
          ...updates,
        };

        const { publicKey, signature } = pkAndSignature;

        if (publicKey && signature && accountId) {
          const res = await SputnikHttpService.updateDaoSettings(daoId, {
            accountId,
            publicKey,
            signature,
            settings: newSettings,
          });

          if (res && isMounted()) {
            setSettings(res);
          }
        }
      } catch (err) {
        const { message } = err;

        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 20000,
          description: message,
        });
      }
    },
    [daoId, nearService, isMounted]
  );

  useEffect(() => {
    (async () => {
      await getSettings();
    })();
  }, [getSettings]);

  return {
    loading: loading || updatingStatus,
    update,
    settings: daoRef.current === daoId ? settings : null,
  };
}

'''
'''--- context/DaoSettingsContext/index.ts ---
export * from './DaoSettingsContext';
export * from './hooks';

'''
'''--- context/DaoTokensContext/index.ts ---
export * from './DaoTokensContext';

'''
'''--- context/WalletContext/hooks/useAvailableAccounts.ts ---
import { useEffect, useState } from 'react';

import { WalletService } from 'services/sputnik/SputnikNearService/walletServices/types';

export const useAvailableAccounts = (
  currentWallet: WalletService | null
): string[] => {
  const [availableAccounts, setAvailableAccounts] = useState<string[]>([]);

  useEffect(() => {
    if (!currentWallet) {
      return;
    }

    const getAccounts = async () => {
      const accounts = await currentWallet.getAvailableAccounts();

      setAvailableAccounts(accounts);
    };

    getAccounts().catch(console.error);
  }, [currentWallet]);

  return availableAccounts;
};

'''
'''--- context/WalletContext/hooks/usePkAndSignature.ts ---
import { useEffect, useState } from 'react';

import { WalletService } from 'services/sputnik/SputnikNearService/walletServices/types';

import { PkAndSignature } from 'context/WalletContext/types';

export const usePkAndSignature = (
  currentWallet: WalletService | null
): PkAndSignature | null => {
  const [pkAndSignature, setPkAndSignature] = useState<PkAndSignature | null>(
    null
  );

  useEffect(() => {
    if (!currentWallet) {
      return;
    }

    const getPkAndSignature = async () => {
      const res = await currentWallet.getPkAndSignature();

      setPkAndSignature(res);
    };

    getPkAndSignature().catch(console.error);
  }, [currentWallet]);

  return pkAndSignature;
};

'''
'''--- context/WalletContext/hooks/useWallet.ts ---
import isNil from 'lodash/isNil';
import { useRouter } from 'next/router';
import { useLocalStorage } from 'react-use';
import { useCallback, useEffect, useState } from 'react';

import { ACCOUNT_COOKIE } from 'constants/cookies';

import { WalletType } from 'types/config';
import { WalletService } from 'services/sputnik/SputnikNearService/walletServices/types';

import { CookieService } from 'services/CookieService';
import { initNearWallet } from 'context/WalletContext/utils/initNearWallet';
import { initSenderWallet } from 'context/WalletContext/utils/initSenderWallet';

// import { useSelector } from './walletSelector/useSelector';
import { initWalletSelector } from 'context/WalletContext/utils/initWalletSelector';
import { configService } from 'services/ConfigService';

type ReturnVal = {
  removePersistedWallet: () => void;
  currentWallet: WalletService | null;
  setWallet: (walletService: WalletService) => void;
  getWallet: (walletType: WalletType) => Promise<WalletService | undefined>;
};

export const useWallet = (): ReturnVal => {
  const router = useRouter();

  const [persistedWallet, setPersistedWallet, removePersistedWallet] =
    useLocalStorage('selectedWallet');

  const [currentWallet, setCurrentWallet] = useState<WalletService | null>(
    null
  );

  const getWallet = useCallback(
    (walletType: WalletType) => {
      switch (walletType) {
        case WalletType.NEAR:
          return initNearWallet();
        case WalletType.SENDER:
          return initSenderWallet(router.reload);
        case WalletType.SELECTOR_NEAR:
        case WalletType.SELECTOR_SENDER: {
          return initWalletSelector(walletType);
        }
        default:
          return Promise.resolve(undefined);
      }
    },
    [router]
  );

  const setWallet = useCallback(
    async (wallet: WalletService) => {
      setPersistedWallet(wallet.getWalletType());
      setCurrentWallet(wallet);

      const accountId = await wallet.getAccountId();

      CookieService.set(ACCOUNT_COOKIE, accountId, {
        path: '/',
      });
    },
    [setPersistedWallet]
  );

  // const { initiateSignInSelectorWallets } = useSelector({
  //   setWallet,
  // });

  useEffect(() => {
    async function initWallet() {
      if (isNil(persistedWallet)) {
        CookieService.remove(ACCOUNT_COOKIE);
      } else {
        const wallet = await getWallet(persistedWallet as WalletType);

        if (!wallet) {
          return;
        }

        const isSignedIn = await wallet.isSignedIn();

        if (!isSignedIn) {
          const { nearConfig } = configService.get();

          await wallet.signIn(nearConfig.contractName);

          return;
        }

        const accountId = await wallet.getAccountId();

        CookieService.set(ACCOUNT_COOKIE, accountId, {
          path: '/',
        });

        setCurrentWallet(wallet);
      }
    }

    initWallet();
  }, [getWallet, persistedWallet]);

  return {
    getWallet,
    setWallet,
    currentWallet,
    removePersistedWallet,
  };
};

'''
'''--- context/WalletContext/hooks/walletSelector/useSelectorLsAccount.ts ---
import { useLocalStorage } from 'react-use';
import { Dispatch, SetStateAction } from 'react';

type ReturnType = [
  string | undefined,
  Dispatch<SetStateAction<string | undefined>>,
  () => void
];

export function useSelectorLsAccount(): ReturnType {
  return useLocalStorage<string>('selectorAccountId');
}

'''
'''--- context/WalletContext/hooks/walletSelector/useTrackSelectorAccount.ts ---
/* eslint-disable  @typescript-eslint/ban-ts-comment */

import first from 'lodash/first';
import { useCallback, useEffect } from 'react';
import { distinctUntilChanged, map } from 'rxjs';
import { AccountState, WalletSelector } from '@near-wallet-selector/core';

import { ACCOUNT_COOKIE } from 'constants/cookies';

import { CookieService } from 'services/CookieService';

import { useSelectorLsAccount } from './useSelectorLsAccount';

type ReturnType = {
  accountId: string;
  removeAccountId: () => void;
};

export function useTrackSelectorAccount(selector?: WalletSelector): ReturnType {
  const [accountId = '', setSelectorAccountId, removeSelectorAccountId] =
    useSelectorLsAccount();

  const syncAccountState = useCallback(
    (accounts: AccountState[]) => {
      const { accountId: acc } = first(accounts) || {};

      if (acc) {
        setSelectorAccountId(acc);
      } else {
        removeSelectorAccountId();
      }

      CookieService.set(ACCOUNT_COOKIE, acc || '', {
        path: '/',
      });
    },
    [setSelectorAccountId, removeSelectorAccountId]
  );

  useEffect(() => {
    const accountSubscription = selector?.store.observable
      .pipe(
        // @ts-ignore
        map(state => state.accounts),
        distinctUntilChanged()
      )
      .subscribe(nextAccounts => {
        syncAccountState(nextAccounts);
      });

    return () => accountSubscription?.unsubscribe();
  }, [selector, syncAccountState]);

  return {
    accountId,
    removeAccountId: removeSelectorAccountId,
  };
}

'''
'''--- context/WalletContext/index.ts ---
export * from './WalletContext';

'''
'''--- context/WalletContext/types.ts ---
export type PkAndSignature =
  | { publicKey: string | null; signature: string | null }
  | Record<string, never>;

'''
'''--- context/WalletContext/utils/initNearWallet.ts ---
import { WalletService } from 'services/sputnik/SputnikNearService/walletServices/types';

import { configService } from 'services/ConfigService';
import { SputnikWalletService } from 'services/sputnik/SputnikNearService/walletServices/SputnikWalletService';

export function initNearWallet(): Promise<WalletService> {
  const { nearConfig } = configService.get();

  return Promise.resolve(new SputnikWalletService(nearConfig));
}

'''
'''--- context/WalletContext/utils/initSenderWallet.ts ---
import {
  WalletService,
  SenderWalletInstance,
} from 'services/sputnik/SputnikNearService/walletServices/types';
import { SenderWalletService } from 'services/sputnik/SputnikNearService/walletServices/SenderWalletService';
import { configService } from 'services/ConfigService';

export function initSenderWallet(reload: () => void): Promise<WalletService> {
  return new Promise((resolve, reject) => {
    let counter = 0;

    const intervalId = setInterval(() => {
      if (counter === 10) {
        clearInterval(intervalId);
        reject();
      }

      if (counter !== undefined) {
        counter += 1;
      }

      if (typeof window.near !== 'undefined' && window.near.isSender) {
        window.near.on('accountChanged', () => {
          reload();
        });

        clearInterval(intervalId);

        const { nearConfig } = configService.get();

        resolve(
          new SenderWalletService(
            (window.near as unknown) as SenderWalletInstance,
            nearConfig
          )
        );
      }
    }, 500);
  });
}

'''
'''--- context/WalletContext/utils/initWalletSelector.ts ---
import { NetworkId, setupWalletSelector } from '@near-wallet-selector/core';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';
import { setupSender } from '@near-wallet-selector/sender';
import { configService } from 'services/ConfigService';
import { WalletService } from 'services/sputnik/SputnikNearService/walletServices/types';
import { WalletSelectorService } from 'services/sputnik/SputnikNearService/walletServices/WalletSelectorService';
import { WalletType } from 'types/config';

export async function initWalletSelector(
  walletType: WalletType
): Promise<WalletService> {
  const { nearConfig } = configService.get();

  const s = await setupWalletSelector({
    network: nearConfig.networkId as NetworkId,
    modules: [setupMyNearWallet(), setupSender()],
  });

  const wallet = await s.wallet(walletType as string);

  // In case we are logged in using Sender wallet - listen for an updates and reload
  // the app so wallet will be reinitialized
  if (window.near) {
    window.near.on('accountChanged', async () => {
      window.location.reload();
    });
  }

  return new WalletSelectorService(wallet, s);
}

'''
'''--- context/types.ts ---
import { Token } from 'types/token';

export type Tokens = Record<string, Token>;

export interface TokensContext {
  tokens: Tokens;
}

'''
'''--- deployment/app-chart/templates/NOTES.txt ---
Astro UI
'''
'''--- deployment/app-chart/templates/ingress.yml ---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "astro-ui.fullname" . }}-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - {{ .Values.ingress.host }}
    secretName: {{ include "astro-ui.fullname" . }}-tls-secret
  rules:
  - host: {{ .Values.ingress.host }}
    http:
      paths:
        - path: /
          backend:
            service:
              name: {{ include "astro-ui.fullname" . }}
              port:
                number: 80
          pathType: ImplementationSpecific

'''
'''--- diff.d.ts ---
declare module 'htmldiff-js';

'''
'''--- env.d.ts ---
/** https://stackoverflow.com/a/53981706 */
declare global {
  namespace NodeJS {
    interface ProcessEnv {
      AWS_BUCKET: string;
      AWS_REGION: string;
      AWS_IDENTITY_POOL_ID: string;
      GOOGLE_ANALYTICS_KEY: string;
      LOG_ROCKET_APP_ID: string;
      DD_APPLICATION_ID: string;
      DD_CLIENT_TOKEN: string;
      DD_SERVICE: string;

      APP_VERSION: string;
      CHANGELOG_URL: string;
      DEV_PROGRESS_URL: string;

      API_URL: string;
      STATS_API_URL;
      DRAFTS_API_URL: string;
      SEARCH_API_URL: string;
      APP_DOMAIN: string;
      LOCAL_WALLET_REDIRECT: boolean;

      NEAR_CONTRACT_NAME: string;
      ROKETO_CONTRACT_NAME: string;
      ROKETO_MULTICALL_NAME: string;
      TOKEN_FACTORY_CONTRACT_NAME: string;

      RELEASE_NOTES: string;
      TOASTS_NOTIFICATIONS_TIMEOUT: number;
      I18_RELOAD_ON_PRERENDER: boolean;

      NEXT_PUBLIC_LAUNCHDARKLY_ID: string;
      NEXT_PUBLIC_LAUNCHDARKLY_SDK_KEY: string;

      OPEN_SEARCH_USERNAME: string;
      OPEN_SEARCH_PASSWORD: string;

      GENERIC_FACTORY_CONTRACT_NAME: string;
      STAKING_CONTRACT_BINARY_HASH: string;

      NEAR_ENV: string;
    }
  }
}

// If this file has no import/export statements (i.e. is a script)
// convert it into a module by adding an empty export statement.
export {};

'''
'''--- errors/SputnikWalletError.ts ---
export enum SputnikWalletErrorCodes {
  userRejected = 'userRejected',
  unknownError = 'unknownError',
}

const getErrorMessageByCode = (code?: SputnikWalletErrorCodes) => {
  if (code === SputnikWalletErrorCodes.userRejected) {
    return 'Wallet action was denied.';
  }

  return 'Something went wrong!';
};

export class SputnikWalletError extends Error {
  errorCode?: SputnikWalletErrorCodes;

  constructor(params: {
    errorCode?: SputnikWalletErrorCodes;
    message?: string;
  }) {
    super(params.message || getErrorMessageByCode(params.errorCode));

    this.name = 'SputnikWalletError';
    this.errorCode = params.errorCode;
  }
}

'''
'''--- features/daos/helpers.ts ---
import { SputnikHttpService } from 'services/sputnik';
import { DaoFeedItem } from 'types/dao';
import { DaoContext, UserPermissions } from 'types/context';
import {
  getAllowedProposalsToCreate,
  getAllowedProposalsToVote,
} from 'astro_2.0/features/CreateProposal/createProposalHelpers';
import { ProposalType } from 'types/proposal';
import { getClient } from 'utils/launchdarkly-server-client';
import { fetcher as fetchDaoContextData } from 'services/ApiService/hooks/useDaoContext';

interface GetDaoListProps {
  sort?: string;
  offset?: number;
  limit?: number;
  filter?: string;
  createdBy?: string;
}

export async function getDaosList({
  sort,
  offset,
  limit,
  filter,
}: GetDaoListProps): Promise<{
  daos: DaoFeedItem[];
  total: number;
}> {
  const dao = await SputnikHttpService.getDaoList({
    sort,
    offset,
    limit,
    filter,
  });

  if (!dao) {
    return {
      daos: [],
      total: 0,
    };
  }

  return {
    daos: dao.data.map(rec => ({
      ...rec,
      council: rec.council || null,
      isCouncil: rec.isCouncil || false,
    })),
    total: dao.total,
  };
}

export function getMockPermissions(): UserPermissions {
  return {
    isCanCreateProposals: true,
    allowedProposalsToCreate: {
      [ProposalType.ChangeConfig]: true,
      [ProposalType.ChangePolicy]: true,
      [ProposalType.AddBounty]: true,
      [ProposalType.BountyDone]: true,
      [ProposalType.FunctionCall]: true,
      [ProposalType.Transfer]: true,
      [ProposalType.Vote]: true,
      [ProposalType.RemoveMemberFromRole]: true,
      [ProposalType.AddMemberToRole]: true,
      [ProposalType.UpgradeRemote]: true,
      [ProposalType.UpgradeSelf]: true,
      [ProposalType.SetStakingContract]: true,
    },
    allowedProposalsToVote: {
      [ProposalType.ChangeConfig]: false,
      [ProposalType.ChangePolicy]: false,
      [ProposalType.AddBounty]: false,
      [ProposalType.BountyDone]: false,
      [ProposalType.FunctionCall]: false,
      [ProposalType.Transfer]: false,
      [ProposalType.Vote]: false,
      [ProposalType.RemoveMemberFromRole]: false,
      [ProposalType.AddMemberToRole]: false,
      [ProposalType.UpgradeRemote]: false,
      [ProposalType.UpgradeSelf]: false,
      [ProposalType.SetStakingContract]: false,
    },
    isCanCreatePolicyProposals: true,
  };
}

export async function getDaoContext(
  accountId: string | undefined,
  daoId: string
): Promise<DaoContext | undefined> {
  const client = await getClient();
  const flags = await client.allFlagsState({
    key: accountId ?? '',
  });
  const useOpenSearchDataApi = flags.getFlagValue('use-open-search-data-api');

  const [dao, policyAffectsProposals, delegations] = useOpenSearchDataApi
    ? await fetchDaoContextData(daoId)
    : await Promise.all([
        SputnikHttpService.getDaoById(daoId),
        SputnikHttpService.findPolicyAffectsProposals(daoId),
        SputnikHttpService.getDelegations(
          daoId,
          flags.getFlagValue('governance-token')
        ),
      ]);

  if (!dao) {
    return undefined;
  }

  let userHasDelegatedTokens = false;
  const userDelegation = delegations.find(item => item.accountId === accountId);
  const holdersRole = dao.policy?.roles.find(
    role => role.kind === 'Member' && role.name === 'TokenHolders'
  );

  if (
    userDelegation &&
    holdersRole &&
    Number(userDelegation.balance) > Number(holdersRole.balance)
  ) {
    userHasDelegatedTokens = true;
  }

  const allowedProposalsToCreate = getAllowedProposalsToCreate(
    accountId,
    dao,
    userHasDelegatedTokens
  );
  const isCanCreateProposals = !!Object.values(allowedProposalsToCreate).find(
    value => value
  );

  return {
    dao,
    userPermissions: {
      isCanCreateProposals,
      allowedProposalsToCreate,
      allowedProposalsToVote: getAllowedProposalsToVote(accountId, dao),
      isCanCreatePolicyProposals:
        allowedProposalsToCreate[ProposalType.ChangePolicy] &&
        !policyAffectsProposals.length,
    },
    policyAffectsProposals,
  };
}

export function getFilterValue(
  useOpenSearch: boolean,
  daosView: string
): string {
  if (useOpenSearch) {
    return daosView === 'active' ? 'Active' : 'Active Inactive';
  }

  return daosView === 'active' ? 'status||$eq||Active' : '';
}

'''
'''--- features/groups/helpers.ts ---
import values from 'lodash/values';
import isEmpty from 'lodash/isEmpty';
import { DAO, DaoVotePolicy, TGroup, VotePolicyRequest } from 'types/dao';
import { DaoRole, DefaultVotePolicy } from 'types/role';
import { CreateProposalParams, ProposalType } from 'types/proposal';
import { DATA_SEPARATOR } from 'constants/common';
import { APP_TO_CONTRACT_PROPOSAL_TYPE } from 'utils/dataConverter';

import { keysToSnakeCase } from 'utils/keysToSnakeCase';

import { IGroupForm } from './types';

function getAddRemoveMemberProposal(
  formData: IGroupForm,
  dao: DAO,
  isRemove?: boolean
): CreateProposalParams {
  const { id } = dao;
  const { details, group, memberName, externalUrl } = formData;

  return {
    daoId: id,
    description: `${details}${DATA_SEPARATOR}${externalUrl}`,
    kind: isRemove ? 'RemoveMemberFromRole' : 'AddMemberToRole',
    data: {
      member_id: memberName.trim(),
      role: group,
    },
    bond: dao.policy.proposalBond,
  };
}

export function getAddMemberProposal(
  formData: IGroupForm,
  dao: DAO
): CreateProposalParams {
  return getAddRemoveMemberProposal(formData, dao);
}

export function getRemoveMemberProposal(
  formData: IGroupForm,
  dao: DAO
): CreateProposalParams {
  return getAddRemoveMemberProposal(formData, dao, true);
}

type ContractRole = {
  name: string;
  kind: 'Everyone' | { Group: string[] | null } | { Member: string };
  permissions: string[];
  // eslint-disable-next-line camelcase,@typescript-eslint/ban-types
  vote_policy: Record<string, VotePolicyRequest> | {};
};

function formatVotePolicy(value: DefaultVotePolicy) {
  return {
    weight_kind: value.weightKind,
    quorum: value.quorum,
    threshold: value.ratio ?? value.weight,
  };
}

function formatVotePolicies(
  data: Record<string, DefaultVotePolicy>
): Record<string, VotePolicyRequest> {
  return Object.keys(data).reduce((res, key) => {
    const value = data[key];

    res[key] = formatVotePolicy(value);

    return res;
  }, {} as Record<string, VotePolicyRequest>);
}

export function dataRoleToContractRole(role: DaoRole): ContractRole {
  const { name, kind, permissions, votePolicy, accountIds, balance } = role;

  let newKind;

  switch (kind) {
    case 'Group': {
      newKind = {
        Group: accountIds,
      };

      break;
    }
    case 'Member': {
      newKind = {
        Member: balance ?? '1',
      };

      break;
    }
    default: {
      newKind = kind;
    }
  }

  return {
    name,
    kind: newKind,
    permissions: values(permissions),
    vote_policy:
      votePolicy && !isEmpty(votePolicy)
        ? formatVotePolicies(votePolicy)
        : ({} as Record<string, VotePolicyRequest>),
  };
}

export function getChangePolicyProposal(
  formData: IGroupForm,
  dao: DAO
): CreateProposalParams {
  const { id, policy } = dao;
  const { details, group, memberName, externalUrl } = formData;

  const members = memberName.split(', ');

  const {
    bountyBond,
    proposalBond,
    proposalPeriod,
    defaultVotePolicy,
    bountyForgivenessPeriod,
  } = policy;

  const { ratio, quorum, weightKind } = defaultVotePolicy;

  return {
    daoId: id,
    description: `${details}${DATA_SEPARATOR}${externalUrl}`,
    kind: 'ChangePolicy',
    data: {
      policy: {
        roles: [
          ...policy.roles.map(dataRoleToContractRole),
          {
            name: group.toLowerCase() === 'council' ? 'council' : group,
            kind: {
              Group: members,
            },
            permissions: [
              '*:Finalize',
              '*:AddProposal',
              '*:VoteApprove',
              '*:VoteReject',
              '*:VoteRemove',
            ],
            vote_policy: {},
          },
        ],
        default_vote_policy: keysToSnakeCase({
          quorum,
          threshold: ratio,
          weightKind,
        }),
        proposal_bond: proposalBond,
        proposal_period: proposalPeriod,
        bounty_bond: bountyBond,
        bounty_forgiveness_period: bountyForgivenessPeriod,
      },
    },
    bond: dao.policy.proposalBond,
  };
}

export function getThreshold(value: number): [number, number] {
  const fraction = value / 100;
  const gcd = (a: number, b: number): number => {
    if (b < 0.0000001) {
      return a;
    } // Since there is a limited precision we need to limit the value.

    return gcd(b, Math.floor(a % b)); // Discard any fractions due to limitations in precision.
  };

  const len = fraction.toString().length - 2;

  let denominator = 10 ** len;
  let numerator = fraction * denominator;

  const divisor = gcd(numerator, denominator); // Should be 5

  numerator /= divisor; // Should be 687
  denominator /= divisor; // Should be 2000

  return [numerator, denominator];
}

export function generateVotePolicyForEachProposalType(
  quorum: string
): Record<string, DaoVotePolicy> {
  const policy: Record<string, DaoVotePolicy> = {};

  Object.values(ProposalType).forEach(type => {
    const proposalLabel = APP_TO_CONTRACT_PROPOSAL_TYPE[type];

    policy[proposalLabel] = keysToSnakeCase({
      quorum: '0',
      threshold: getThreshold(parseInt(quorum, 10)),
      weightKind: 'RoleWeight',
    });
  });

  return policy;
}

export function getUpdateGroupProposal(
  groups: TGroup[],
  formData: IGroupForm,
  dao: DAO
): CreateProposalParams {
  const { id } = dao;
  const { details, externalUrl } = formData;

  const {
    bountyBond,
    proposalBond,
    proposalPeriod,
    defaultVotePolicy,
    bountyForgivenessPeriod,
  } = dao.policy;

  const { ratio, quorum, weightKind } = defaultVotePolicy;

  return {
    daoId: id,
    description: `${details}${DATA_SEPARATOR}${externalUrl}`,
    kind: 'ChangePolicy',
    data: {
      policy: {
        roles: [
          ...dao.policy.roles
            .filter(role => role.kind !== 'Group')
            .map(dataRoleToContractRole),
          ...(groups.map(group => {
            const role = {
              name: group.name,
              kind: {
                Group: group.members,
              },
              permissions: group.permissions,
              vote_policy: generateVotePolicyForEachProposalType(
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                group.votePolicy.quorum
              ),
            };

            return role;
          }) as ContractRole[]),
        ],
        default_vote_policy: keysToSnakeCase({
          quorum,
          threshold: ratio,
          weightKind,
        }),
        proposal_bond: proposalBond,
        proposal_period: proposalPeriod,
        bounty_bond: bountyBond,
        bounty_forgiveness_period: bountyForgivenessPeriod,
      },
    },

    bond: dao.policy.proposalBond,
  };
}

'''
'''--- features/groups/types.ts ---
export enum GroupFormType {
  CREATE_GROUP,
  ADD_TO_GROUP,
  REMOVE_FROM_GROUP,
}

export interface GroupFormInput {
  groupType: GroupFormType;
  selectedGroup?: string;
  groups: string[];
  name?: string;
  detail?: string;
  externalUrl?: string;
}

export interface IGroupForm {
  group: string;
  memberName: string;
  details: string;
  externalUrl: string;
  voteDetails: string;
}

'''
'''--- features/notifications/Notification/index.ts ---
export * from './Notification';

'''
'''--- features/notifications/NotificationContainer/index.ts ---
export * from './NotificationContainer';

'''
'''--- features/notifications/index.ts ---
export * from './NotificationContainer';
export * from './notificationUtils';
export * from './types';

'''
'''--- features/notifications/mock.ts ---
import { NOTIFICATION_TYPES, NotificationRawData } from './types';

export const notifications: NotificationRawData[] = [
  {
    type: NOTIFICATION_TYPES.INFO,
    tag: 'Yeild aggregator',
    description: 'Additional description and information about copywriting.',
    lifetime: 3000,
  },
  {
    type: NOTIFICATION_TYPES.SUCCESS,
    tag: 'DAO',
    description: 'Detailed link and advice about successful copywriting.',
  },
  {
    type: NOTIFICATION_TYPES.ERROR,
    tag: 'Yeild aggregator',
    description: 'Detailed link and advice about successful copywriting.',
  },
  {
    type: NOTIFICATION_TYPES.WARNING,
    tag: 'DAO',
    description: 'Detailed link and advice about successful copywriting.',
  },
];

'''
'''--- features/notifications/notificationConstants.ts ---
export const SHOW_NOTIFICATION_EVENT = 'SHOW_NOTIFICATION_EVENT';
export const HIDE_NOTIFICATION_EVENT = 'HIDE_NOTIFICATION_EVENT';
export const HIDE_NOTIFICATION_EVENT_BY_TAG = 'HIDE_NOTIFICATION_EVENT_BY_TAG';
export const NOTIFICATIONS_UPDATED = 'NOTIFICATIONS_UPDATED';

'''
'''--- features/notifications/notificationUtils.ts ---
import { dispatchCustomEvent } from 'utils/dispatchCustomEvent';

import {
  SHOW_NOTIFICATION_EVENT,
  HIDE_NOTIFICATION_EVENT,
  HIDE_NOTIFICATION_EVENT_BY_TAG,
} from './notificationConstants';

import { NotificationRawData } from './types';

export function showNotification(noty: NotificationRawData): void {
  dispatchCustomEvent(SHOW_NOTIFICATION_EVENT, noty);
}

export function hideNotificationId(id: string): void {
  dispatchCustomEvent(HIDE_NOTIFICATION_EVENT, { id });
}

export function hideNotificationByTag(tag: string): void {
  dispatchCustomEvent(HIDE_NOTIFICATION_EVENT_BY_TAG, { tag });
}

'''
'''--- features/notifications/types.ts ---
export enum NOTIFICATION_TYPES {
  SUCCESS = 'Success',
  ERROR = 'Error',
  WARNING = 'Warning',
  INFO = 'Info',
}

export interface NotificationRawData {
  type: NOTIFICATION_TYPES;
  description: string;
  tag?: string;
  // in ms
  lifetime?: number;
}

export interface NotificationProps extends NotificationRawData {
  id: string;
  flat?: boolean;
  timestamp: number;
}

export interface ShowNotificationEvent extends CustomEvent {
  detail: NotificationRawData;
}

export interface HideNotificationEvent extends CustomEvent {
  detail: { id: string };
}

export interface HideNotificationByTagEvent extends CustomEvent {
  detail: { tag: string };
}

'''
'''--- features/proposal/components/ProposalActions/components/BehaviorActions/index.ts ---
export * from './BehaviorActions';

'''
'''--- features/proposal/components/ProposalActions/components/NFTActions/index.ts ---
export * from './NFTActions';

'''
'''--- features/proposal/components/ProposalActions/components/SocialActions/index.ts ---
export * from './SocialActions';

'''
'''--- features/proposal/components/ProposalActions/index.ts ---
export * from './ProposalActions';

'''
'''--- features/proposal/components/VoicesProgressBar/index.ts ---
export * from './VotesProgressBar';

'''
'''--- features/proposal/components/VoteCollapsableHeader/index.ts ---
export * from './VoteCollapsableHeader';

'''
'''--- features/proposal/components/VoteCollapsableList/index.ts ---
export * from './VoteCollapsableList';

'''
'''--- features/proposal/components/VoteTimeline/ExtraActions/index.ts ---
export * from './ExtraActions';

'''
'''--- features/proposal/components/VoteTimeline/FinishProposal/index.ts ---
export * from './FinishProposal';

'''
'''--- features/proposal/components/VoteTimeline/VoteAction/index.ts ---
export * from './VoteAction';

'''
'''--- features/proposal/components/VoteTimeline/constants.ts ---
export const TOTAL = 27;
export const POINT = 32;

'''
'''--- features/proposal/components/VoteTimeline/hooks.ts ---
import { useMemo } from 'react';
import findLastIndex from 'lodash/findLastIndex';
import findLast from 'lodash/findLast';

import { ProposalActionData, ProposalFeedItem } from 'types/proposal';
import { toMillis } from 'utils/format';
import { POINT } from 'features/proposal/components/VoteTimeline/constants';

type VoteActionItem = {
  action: ProposalActionData | null;
  left: number;
};

const DEFAULT_ACTION_ITEM = {
  action: null,
  left: 0,
};

export const useTimelineData = (
  proposal: ProposalFeedItem | undefined,
  total: number
): {
  extraActions: ProposalActionData[];
  lastVote: VoteActionItem;
  voteActions: VoteActionItem[];
} => {
  return useMemo(() => {
    if (total === 0 || !proposal) {
      return {
        extraActions: [],
        lastVote: DEFAULT_ACTION_ITEM,
        voteActions: [],
      };
    }

    const voteActions: VoteActionItem[] = Array.from(new Array(total)).map(
      () => DEFAULT_ACTION_ITEM
    );
    const extraActions: ProposalActionData[] = [];
    const actions: ProposalActionData[] = proposal.actions
      .sort((a, b) => {
        if (a.timestamp > b.timestamp) {
          return 1;
        }

        if (a.timestamp < b.timestamp) {
          return -1;
        }

        return 0;
      })
      .slice(1);

    const startTimestamp = new Date(proposal.createdAt).getTime();
    const diff = new Date(proposal.votePeriodEnd).getTime() - startTimestamp;
    const step = Math.floor(diff / total);

    voteActions.forEach((_, voteActionsIndex) => {
      const from = startTimestamp + step * voteActionsIndex;
      const to = startTimestamp + step * (voteActionsIndex + 1);

      actions.forEach(action => {
        const timestamp = toMillis(action.timestamp);

        if (!(timestamp >= from && timestamp <= to)) {
          return;
        }

        for (let i = voteActionsIndex; i < voteActions.length; i += 1) {
          if (total - 1 === i) {
            const lastFreeCell = findLastIndex(
              voteActions,
              voteAction => !voteAction.action
            );

            if (lastFreeCell === -1) {
              if (voteActions[0].action) {
                extraActions.push(voteActions[0].action);
              }

              voteActions.shift();
            } else {
              voteActions.splice(lastFreeCell, 1);
            }

            voteActions.push({ action, left: 0 });
            break;
          }

          if (!voteActions[i].action) {
            voteActions[i] = { action, left: 0 };
            break;
          }
        }
      });
    });

    if (extraActions.length > 0 && voteActions[0].action) {
      extraActions.push(voteActions[0].action);
    }

    if (proposal.status === 'Rejected' || proposal.status === 'Approved') {
      const lastIndex = findLastIndex(voteActions, voteAction =>
        Boolean(voteAction.action)
      );

      if (lastIndex !== -1) {
        const { action } = voteActions[lastIndex];

        voteActions[lastIndex] = { action: null, left: 0 };
        voteActions[voteActions.length - 1] = { action, left: 0 };
      }
    }

    const result = voteActions.map((voteAction, index) => ({
      ...voteAction,
      left: index * POINT,
    }));

    const lastVote = findLast(result, voteAction => Boolean(voteAction.action));

    return {
      extraActions,
      lastVote: lastVote || DEFAULT_ACTION_ITEM,
      voteActions: result,
    };
  }, [total, proposal]);
};

'''
'''--- features/proposal/components/VoteTimeline/index.ts ---
export * from './VoteTimeline';

'''
'''--- features/proposal/components/VoterDetailsCard/index.ts ---
export * from './VoterDetailsCard';

'''
'''--- features/proposal/components/VotersList/index.ts ---
export * from './VotersList';

'''
'''--- features/proposal/helpers.ts ---
import { LIST_LIMIT_DEFAULT } from 'services/sputnik/constants';
import { SputnikHttpService } from 'services/sputnik';
import {
  ProposalCategories,
  ProposalFeedItem,
  ProposalsFeedStatuses,
} from 'types/proposal';
import { PaginationResponse } from 'types/api';

export async function getProposalsList(
  initialData: PaginationResponse<ProposalFeedItem[]> | null,
  status: ProposalsFeedStatuses,
  category: ProposalCategories | undefined,
  accountId: string,
  daoId: string,
  isMyFeed: boolean,
  proposers?: string
): Promise<PaginationResponse<ProposalFeedItem[]> | null> {
  const params = {
    offset: initialData?.data.length || 0,
    limit: LIST_LIMIT_DEFAULT,
    daoId: '',
    category,
    status,
    accountId,
    proposers,
  };

  let res;

  if (daoId) {
    params.daoId = daoId;

    res = await SputnikHttpService.getProposalsList(params);
  } else if (isMyFeed && accountId) {
    res = await SputnikHttpService.getProposalsListByAccountId(
      params,
      accountId
    );
  } else {
    res = await SputnikHttpService.getProposalsList(params);
  }

  return res;
}

'''
'''--- features/proposal/hooks.ts ---
import { useMemo } from 'react';

import {
  useDelegatePageData,
  useVotingPolicyDetails,
} from 'astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/hooks';

import { getVotingGoal } from 'astro_2.0/features/pages/nestedDaoPagesContent/DelegatePageContent/helpers';
import {
  formatPolicyRatio,
  getVoteDetails,
} from 'features/vote-policy/helpers';

import { GroupPolicyDetails, VoterDetail } from 'features/types';
import { ProposalFeedItem } from 'types/proposal';
import { DaoContext } from 'types/context';
import { Member } from 'types/dao';

export function useProposalVotingDetails(
  proposal: ProposalFeedItem | undefined,
  daoContext: DaoContext,
  members: Member[]
): {
  votesDetails: VoterDetail[];
  votingPolicyByGroup: Record<string, GroupPolicyDetails>;
} {
  const { dao } = daoContext;
  const { tokenDetails, totalSupply } = useDelegatePageData(daoContext.dao);
  const { threshold: votingThreshold, quorum } = useVotingPolicyDetails(
    daoContext.dao
  );

  const tokensVotingGoal = getVotingGoal(
    Number(votingThreshold),
    Number(totalSupply ?? 0),
    Number(quorum ?? 0)
  );

  const votesDetails = useMemo(() => {
    if (!proposal) {
      return [];
    }

    const { votersList } = getVoteDetails(
      proposal.dao.numberOfMembers,
      proposal.dao.policy.defaultVotePolicy,
      proposal
    );

    const voteActions = proposal?.actions
      .filter(
        item =>
          item.action === 'VoteApprove' ||
          item.action === 'VoteReject' ||
          item.action === 'VoteRemove'
      )
      .reduce((res, item) => {
        res[item.accountId] = item.transactionHash;

        return res;
      }, {} as Record<string, string>);

    const notVotedList = members.reduce((res, item) => {
      const voted = votersList.find(voter => voter.name === item.name);

      if (!voted) {
        res.push({
          id: item.id,
          name: item.name,
          groups: item.groups,
          vote: null,
          tokens: item.tokens
            ? { ...item.tokens, symbol: tokenDetails?.symbol ?? '' }
            : undefined,
        });
      }

      return res;
    }, [] as VoterDetail[]);

    return [
      ...votersList.map(item => {
        const member = members.find(m => m.name === item.name);

        return {
          ...item,
          groups: member?.groups ?? [],
          transactionHash: voteActions[item.name],
          tokens: member?.tokens
            ? { ...member.tokens, symbol: tokenDetails?.symbol ?? '' }
            : undefined,
        };
      }),
      ...notVotedList,
    ];
  }, [proposal, members, tokenDetails?.symbol]);

  const votingPolicyByGroup = useMemo(() => {
    const result: Record<string, GroupPolicyDetails> = {
      TokenHolders: {
        value: tokensVotingGoal,
        suffix: tokenDetails?.symbol ?? '',
        tooltip: `${tokensVotingGoal} ${tokenDetails?.symbol ?? ''} to pass`,
      },
    };

    dao.policy.roles.forEach(role => {
      if (role.kind === 'Group') {
        const val = role.votePolicy.policy
          ? formatPolicyRatio(role.votePolicy.policy)
          : formatPolicyRatio(dao.policy.defaultVotePolicy);

        const totalGroupMembers = role.accountIds?.length ?? 0;
        const votesToPass = Math.ceil((totalGroupMembers * val) / 100);

        result[role.name] = {
          value: val,
          suffix: '%',
          tooltip: `${val}%  - ${votesToPass} vote${
            votesToPass > 1 ? 's' : ''
          } from ${totalGroupMembers} group member${
            totalGroupMembers > 1 ? 's' : ''
          } to pass.`,
        };
      }
    });

    return result;
  }, [
    dao.policy.defaultVotePolicy,
    dao.policy.roles,
    tokenDetails?.symbol,
    tokensVotingGoal,
  ]);

  return {
    votesDetails,
    votingPolicyByGroup,
  };
}

'''
'''--- features/search/search-results/components/CommentsTabView/index.ts ---
export * from './CommentsTabView';

'''
'''--- features/search/search-results/components/DraftsTabView/index.ts ---
export * from './DraftsTabView';

'''
'''--- features/search/search-results/components/MembersTabView/constants.ts ---
export const GROUP_COLOR = {
  'MEW holders': 'violet',
  'NEAR holders': 'turqoise',
  Ombudspeople: 'orange',
} as { [key: string]: string };

'''
'''--- features/search/search-results/components/MembersTabView/index.ts ---
export * from './MembersTabView';

'''
'''--- features/search/search-results/components/NoSearchResultsView/index.ts ---
export * from './NoSearchResultsView';

'''
'''--- features/search/search-results/components/daos-tab-view/index.ts ---
export * from './DaosTabView';

'''
'''--- features/search/search-results/components/highlighter/index.ts ---
export * from './Highlighter';

'''
'''--- features/search/search-results/components/proposals-tab-view/ProposalDetailsCard/index.ts ---
export * from './ProposalDetailsCard';
export * from './ProposalDetailsCardContent';

'''
'''--- features/search/search-results/components/proposals-tab-view/constants.ts ---
import { Option } from './types';

export const allStatusFilterOption: Option = {
  label: 'All',
  value: 'All',
};

export const activeProposalsStatusFilterOption: Option = {
  label: 'Active',
  value: 'Active',
};

export const acceptedProposalsStatusFilterOption: Option = {
  label: 'Approved',
  value: 'Approved',
};

export const inactiveProposalsStatusFilterOption: Option = {
  label: 'Failed',
  value: 'Failed',
};

export const statusFilterOptions: Option[] = [
  allStatusFilterOption,
  activeProposalsStatusFilterOption,
  acceptedProposalsStatusFilterOption,
  inactiveProposalsStatusFilterOption,
];

export const daoFilterOptions = [
  {
    label: 'In this DAO',
    value: 'In this DAO',
  },
  {
    label: 'In all DAOs',
    value: 'In all DAOs',
  },
];

'''
'''--- features/search/search-results/components/proposals-tab-view/helpers.ts ---
import { useRouter } from 'next/router';
import { useCallback, useState } from 'react';

import { ProposalFeedItem } from 'types/proposal';

import { Indexed, ProposalByDao } from 'types/memberHome';

import {
  isGovernanceProposal,
  isGroupProposal,
  isTaskProposal,
  isTreasuryProposal,
} from 'utils/proposalFilters';

import { FilterName } from './types';

export interface FilteredData extends Indexed {
  lessThanHourProposals: ProposalByDao;
  lessThanDayProposals: ProposalByDao;
  lessThanWeekProposals: ProposalByDao;
  moreThanWeekProposals: ProposalByDao;
  otherProposals: ProposalByDao;
}

type ShowFilterOption = 'All' | 'Active' | 'Approved' | 'Failed';

type SearchFilterOption = 'In this DAO' | 'In all DAOs';

interface SearchFilter {
  show: ShowFilterOption;
  search: SearchFilterOption;
  tasks: boolean;
  groups: boolean;
  treasury: boolean;
  governance: boolean;
}

export interface FilteredProposalsData {
  filteredProposalsData: FilteredData;
  filteredProposals: ProposalFeedItem[];
  filter: SearchFilter;
  onFilterChange: (
    name: FilterName,
    value: string | boolean | undefined
  ) => void;
  setFilter: (value: SearchFilter) => void;
}

export const useFilteredProposalsData = (
  proposals: ProposalFeedItem[],
  initialFilter?: SearchFilter
): FilteredProposalsData => {
  const router = useRouter();
  const daoId = router.query.dao;

  const [filter, setFilter] = useState(
    initialFilter || {
      show: 'All' as ShowFilterOption,
      search: 'In all DAOs' as SearchFilterOption,
      tasks: true,
      groups: true,
      treasury: true,
      governance: true,
    }
  );

  const onFilterChange = useCallback(
    (name, value) => {
      setFilter({
        ...filter,
        [name]: value,
      });
    },
    [filter]
  );

  const filteredProposals = proposals.filter(item => {
    let matched = true;

    // Filter 'show'
    switch (filter.show) {
      case 'Approved': {
        if (item.status !== 'Approved') {
          matched = false;
        }

        break;
      }
      case 'Active': {
        if (item.status !== 'InProgress') {
          matched = false;
        }

        break;
      }
      case 'Failed': {
        if (
          item.status !== 'Removed' &&
          item.status !== 'Rejected' &&
          item.status !== 'Expired'
        ) {
          matched = false;
        }

        break;
      }
      case 'All':
      default: {
        break;
      }
    }

    // Filter 'search'
    switch (filter.search) {
      case 'In this DAO': {
        if (item.daoId !== daoId) {
          matched = false;
        }

        break;
      }
      case 'In all DAOs':
      default: {
        break;
      }
    }

    // Filter flags here
    if (!filter.tasks) {
      if (isTaskProposal(item)) {
        matched = false;
      }
    }

    if (!filter.governance) {
      if (isGovernanceProposal(item)) {
        matched = false;
      }
    }

    if (!filter.groups) {
      if (isGroupProposal(item)) {
        matched = false;
      }
    }

    if (!filter.treasury) {
      if (isTreasuryProposal(item)) {
        matched = false;
      }
    }

    return matched;
  });

  // const {
  //   lessThanHourProposals,
  //   lessThanDayProposals,
  //   lessThanWeekProposals,
  //   moreThanWeekProposals,
  //   otherProposals,
  // } = splitProposalsByVotingPeriod(filteredProposals);

  return {
    // filteredProposalsData: {
    //   lessThanHourProposals: arrangeByDao(lessThanHourProposals),
    //   lessThanDayProposals: arrangeByDao(lessThanDayProposals),
    //   lessThanWeekProposals: arrangeByDao(lessThanWeekProposals),
    //   moreThanWeekProposals: arrangeByDao(moreThanWeekProposals),
    //   otherProposals: arrangeByDao(otherProposals),
    // },
    filteredProposalsData: {
      lessThanHourProposals: {},
      lessThanDayProposals: {},
      lessThanWeekProposals: {},
      moreThanWeekProposals: {},
      otherProposals: {},
    },
    filteredProposals,
    filter,
    onFilterChange,
    setFilter,
  };
};

'''
'''--- features/search/search-results/components/proposals-tab-view/index.ts ---
export * from './ProposalsTabView';

'''
'''--- features/search/search-results/components/proposals-tab-view/types.ts ---
export type FilterName =
  | 'show'
  | 'search'
  | 'tasks'
  | 'groups'
  | 'treasury'
  | 'governance';

export type Option = {
  label: string;
  value: string;
};

'''
'''--- features/search/search-results/components/search-results-renderer/index.ts ---
export * from './SearchResultsRenderer';

'''
'''--- features/search/search-results/components/search-results-renderer/tests/mock.ts ---
export const SEARCH_RESULTS_MOCK = '';

'''
'''--- features/search/search-results/index.ts ---
export * from './SearchResults';
export * from 'features/search/search-results/components/search-results-renderer';

'''
'''--- features/treasury/helpers.ts ---
import { Receipt } from 'types/transaction';
import { ChartData } from 'types/chart';
import { formatYoktoValue } from 'utils/format';
import { Token } from 'types/token';
import { SputnikHttpService } from 'services/sputnik';
import { useRouter } from 'next/router';
import { useAsyncFn } from 'react-use';
import { useEffect } from 'react';

export function getChartData(receipts: Receipt[], token: Token): ChartData[] {
  const result: ChartData[] = [];

  if (!receipts || !token) {
    return result;
  }

  const { balance: currentBalance, decimals, id } = token;

  result.push({
    balance: Number(currentBalance),
    timestamp: new Date().getTime(),
    tooltip: 'Now',
  });

  if (id === 'NEAR') {
    let value = 0;

    receipts
      // sort ASC so we will start from today
      .sort((a, b) => {
        if (a.timestamp > b.timestamp) {
          return 1;
        }

        if (a.timestamp < b.timestamp) {
          return -1;
        }

        return 0;
      })
      .forEach((item: Receipt) => {
        const income = item.type === 'Deposit';
        let balance;

        const deposit = Number(formatYoktoValue(item.deposit, decimals));

        if (income) {
          balance = value + deposit;
        } else {
          balance = value - deposit;
        }

        value = balance;

        result.push({
          balance,
          timestamp: item.timestamp,
        });
      });
  } else {
    let value = Number(currentBalance);

    receipts
      // sort DESC so we will start from today
      .sort((a, b) => {
        if (a.timestamp > b.timestamp) {
          return -1;
        }

        if (a.timestamp < b.timestamp) {
          return 1;
        }

        return 0;
      })
      .forEach((item: Receipt, i) => {
        const income = item.type === 'Deposit';
        let balance;

        const deposit = Number(formatYoktoValue(item.deposit, decimals));

        if (i === 0) {
          balance = value;
        } else if (income) {
          balance = value - deposit;
        } else {
          balance = value + deposit;
        }

        value = balance;

        result.push({
          balance,
          timestamp: item.timestamp,
        });
      });
  }

  return result.sort((a, b) => {
    if (a.timestamp > b.timestamp) {
      return 1;
    }

    if (a.timestamp < b.timestamp) {
      return -1;
    }

    return 0;
  });
}

export function useTokenFilteredData(tokens: Record<string, Token>): {
  loading: boolean;
  error: boolean;
  chartData: ChartData[];
  transactionsData: Receipt[];
  onFilterChange: (val: string) => void;
  viewToken: string;
} {
  const { query } = useRouter();
  const daoId = query.dao as string;

  const [{ loading, error, value }, fetchData] = useAsyncFn(
    async viewToken => {
      let data;

      if (viewToken === 'NEAR') {
        data = await SputnikHttpService.getAccountReceipts(daoId);
      } else {
        data = await SputnikHttpService.getAccountReceiptsByTokens(
          daoId,
          viewToken
        );
      }

      if (data) {
        const chartData = getChartData(data, tokens[viewToken]);

        return {
          transactions: data,
          chartData,
          viewToken,
        };
      }

      return {
        transactions: [],
        chartData: [],
        viewToken,
      };
    },
    [tokens]
  );

  useEffect(() => {
    fetchData('NEAR');
  }, [fetchData, tokens]);

  return {
    loading,
    error: !!error,
    chartData: value?.chartData ?? [],
    transactionsData: value?.transactions ?? [],
    onFilterChange: fetchData,
    viewToken: value?.viewToken,
  };
}

export const sorter = (a: Token, b: Token): number => {
  if (b.symbol === 'NEAR') {
    return 1;
  }

  if (a.symbol > b.symbol) {
    return 1;
  }

  if (a.symbol < b.symbol) {
    return -1;
  }

  return 0;
};

export const getAccumulatedTokenValue = (
  tokens: Record<string, Token>
): number => {
  return Object.values(tokens).reduce((res, token) => {
    if (token.price && token.balance) {
      const tokenValue = parseFloat(token.balance) * parseFloat(token.price);

      return res + tokenValue;
    }

    return res;
  }, 0);
};

'''
'''--- features/types.ts ---
import { Token as TokenDetails } from 'components/cards/member-card/types';

export const NEAR_TOKEN = 'NEAR';
export const FUNGIBLE_TOKEN = 'Fungible Token';

export type Token = typeof NEAR_TOKEN | typeof FUNGIBLE_TOKEN;

export type Vote = 'Yes' | 'No' | 'Dismiss';

export type VoteDetail = {
  limit: string;
  label: string;
  data?: VoteValue[];
};

export type VoteValue = {
  vote: Vote | null;
  percent: number;
};

export type VoteStat = {
  vote: Vote | null;
  value: number;
  percent: number;
};

export type VoterDetail = {
  id: string;
  name: string;
  vote: Vote | null;
  groups?: string[];
  timestamp?: string | null;
  transactionHash?: string | undefined;
  tokens?: TokenDetails;
};

export type GroupPolicyDetails = {
  value: string | number;
  suffix: string;
  tooltip: string;
};

export type BondDetail = {
  value: number;
  token: Token;
};

'''
'''--- features/vote-policy/components/Group/index.ts ---
export * from './Group';

'''
'''--- features/vote-policy/helpers.ts ---
import { DAO, DaoVotePolicy, TGroup } from 'types/dao';
import { CreateProposalParams, Proposal } from 'types/proposal';
import snakeCase from 'lodash/snakeCase';
import { Vote, VoteDetail, VoterDetail } from 'features/types';
import difference from 'lodash/difference';
import isEmpty from 'lodash/isEmpty';
import { DefaultVotePolicy, ProposalAction } from 'types/role';
import { DATA_SEPARATOR } from 'constants/common';
import { dataRoleToContractRole, getThreshold } from 'features/groups/helpers';

export interface VotePolicy {
  whoCanVote?: string;
  voteBy?: 'Person' | 'Token';
  amount?: number;
  threshold?: string;
}

export type Scope =
  | 'addBounty'
  | 'config'
  | 'policy'
  | 'addMemberToRole'
  | 'removeMemberFromRole'
  | 'call'
  | 'upgradeSelf'
  | 'upgradeRemote'
  | 'transfer'
  | 'setVoteToken'
  | 'bountyDone'
  | 'vote';

export const getProposersList = (
  groups: TGroup[],
  scope: Scope,
  action: ProposalAction
): string[] => {
  return groups.reduce((res, item) => {
    const { permissions } = item;
    const isPermitted = permissions.find((permission: string) => {
      const [_scope, _action] = permission.split(':');

      return (
        (_scope === '*' || _scope === snakeCase(scope)) &&
        (_action === action || _action === '*')
      );
    });

    if (isPermitted) {
      res.push(item.name);
    }

    return res;
  }, [] as string[]);
};

export const getVotePolicyData = (
  name: string,
  votePolicy: DaoVotePolicy | null,
  defaultVotePolicy: DaoVotePolicy
): VotePolicy => {
  const policy =
    votePolicy && !isEmpty(votePolicy) ? votePolicy : defaultVotePolicy;

  return {
    // whoCanVote: name,
    voteBy: policy.weightKind === 'RoleWeight' ? 'Person' : 'Token',
    amount: (policy.ratio[0] / policy.ratio[1]) * 100,
    threshold: policy.kind === 'Ratio' ? '% of group' : 'persons',
  };
};

export type DaoSettingsProps = {
  externalLink: string;
  details: string;
  isDirty?: boolean;
};

export type Indexed = {
  [key: string]: VotePolicy | DaoSettingsProps;
};

export type VotingPolicyPageInitialData = {
  daoSettings: DaoSettingsProps;
  policy: VotePolicy;
} & Indexed;

export function formatPolicyRatio(defaultPolicy: DefaultVotePolicy): number {
  if (!(defaultPolicy?.ratio && defaultPolicy.ratio.length)) {
    return 0;
  }

  const ratio = (defaultPolicy.ratio[0] / defaultPolicy.ratio[1]) * 100;

  return Number(ratio.toFixed(2));
}

export const getInitialData = (
  dao?: DAO
): VotingPolicyPageInitialData | null => {
  if (!dao) {
    return null;
  }

  const defaultPolicy = dao.policy.defaultVotePolicy;

  return {
    policy: {
      voteBy: defaultPolicy.weightKind === 'RoleWeight' ? 'Person' : 'Token',
      amount: formatPolicyRatio(defaultPolicy),
      threshold: defaultPolicy.kind === 'Ratio' ? '% of group' : 'persons',
    },
    daoSettings: {
      externalLink: '',
      details: '',
    },
  };
};

export function getVoteDetails(
  numberOfMembers: number,
  defaultVotePolicy: {
    weightKind: string;
    kind: string;
    ratio: number[];
    quorum: string;
  },
  proposal?: Pick<
    Proposal,
    'voteYes' | 'voteNo' | 'voteRemove' | 'votes' | 'actions'
  > | null
): { details: VoteDetail; votersList: VoterDetail[] } {
  if (!defaultVotePolicy) {
    return {
      details: {
        limit: '',
        label: '',
      },
      votersList: [],
    };
  }

  const votesData = !proposal
    ? []
    : [
        {
          vote: 'Yes' as Vote,
          percent: (proposal.voteYes * 100) / numberOfMembers,
        },
        {
          vote: 'No' as Vote,
          percent: (proposal.voteNo * 100) / numberOfMembers,
        },
        {
          vote: 'Dismiss' as Vote,
          percent: (proposal.voteRemove * 100) / numberOfMembers,
        },
      ];

  const amount =
    (defaultVotePolicy.ratio[0] / defaultVotePolicy.ratio[1]) * 100;

  const details = {
    label: '',
    limit: `${amount}%`,
    data: votesData,
  };

  const list =
    proposal?.actions?.reduce<Record<string, VoterDetail>>((res, item) => {
      const vote = proposal.votes[item.accountId];

      if (res[item.accountId] && vote) {
        res[item.accountId] = {
          name: item.accountId,
          vote,
          timestamp: item.timestamp,
          id: item.id,
        };
      } else if (vote) {
        res[item.accountId] = {
          name: item.accountId,
          vote,
          timestamp: item.timestamp,
          id: item.id,
        };
      } else {
        res[item.accountId] = {
          name: item.accountId,
          vote: null,
          timestamp: null,
          id: item.id,
        };
      }

      return res;
    }, {}) ?? {};

  return { details, votersList: Object.values(list) };
}

export const getNewProposalObject = (
  dao: DAO,
  data: VotingPolicyPageInitialData
): CreateProposalParams => {
  return {
    daoId: dao.id,
    description: `${data.daoSettings.details}${DATA_SEPARATOR}${data.daoSettings.externalLink}`,
    kind: 'ChangePolicy',
    data: {
      policy: {
        roles: [...dao.policy.roles.map(dataRoleToContractRole)],
        default_vote_policy: {
          quorum: '0',
          threshold: getThreshold(data.policy.amount as number),
          weight_kind: 'RoleWeight',
        },
        proposal_bond: dao.policy.proposalBond,
        proposal_period: dao.policy.proposalPeriod,
        bounty_bond: dao.policy.bountyBond,
        bounty_forgiveness_period: dao.policy.bountyForgivenessPeriod,
      },
    },
    bond: dao.policy.proposalBond,
  };
};

export function getNextGroup(
  allGroups: string[],
  selectedGroups: string[]
): string {
  const availableGroups = difference(allGroups, selectedGroups);

  return availableGroups[0] ?? '';
}

'''
'''--- features/vote-policy/tests/helpers.spec.ts ---
import { formatPolicyRatio } from 'features/vote-policy/helpers';

describe('VotePolicy', () => {
  describe('VotePolicy helpers', () => {
    describe('formatPolicyRatio', () => {
      it('handles invalid input data', () => {
        const res = formatPolicyRatio({
          ratio: [],
          weightKind: 'RoleWeight',
          weight: '30',
          kind: '',
          quorum: '',
        });

        expect(res).toEqual(0);
      });

      it('format ratio as expected', () => {
        const res1 = formatPolicyRatio({
          ratio: [30, 100],
          weightKind: 'RoleWeight',
          weight: '30',
          kind: '',
          quorum: '',
        });
        const res2 = formatPolicyRatio({
          ratio: [39, 10000],
          weightKind: 'RoleWeight',
          weight: '30',
          kind: '',
          quorum: '',
        });

        expect(res1).toEqual(30);
        expect(res2).toEqual(0.39);
      });
    });
  });
});

'''
'''--- global.d.ts ---
import React from 'react';
import { SputnikWalletErrorCodes } from 'errors/SputnikWalletError';
import { Config } from 'types/config';

type SputnikRequestSignInCompleted = (result: {
  accountId?: string;
  errorCode?: SputnikWalletErrorCodes;
  allKeys?: string;
  publicKey?: string;
}) => Promise<void>;

export type TransactionCompleted = {
  transactionHashes?: string;
  errorCode?: SputnikWalletErrorCodes;
};

export type SelectorTransactionCompleted = TransactionCompleted & {
  accountId: string;
};

type SputnikRequestSignTransactionCompleted = (
  result: TransactionCompleted
) => void;

declare global {
  interface Window {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    fabric: any;
    onLogin?: () => Promise<unknown>;
    onTransaction?: (data: SelectorTransactionCompleted) => Promise<void>;
    sputnikRequestSignInCompleted?: SputnikRequestSignInCompleted;
    sputnikRequestSignTransactionCompleted?: SputnikRequestSignTransactionCompleted;
    opener: {
      sputnikRequestSignInCompleted?: SputnikRequestSignInCompleted;
      sputnikRequestSignTransactionCompleted?: SputnikRequestSignTransactionCompleted;
    };
    near: SenderWalletInstance;
    APP_CONFIG: Config;
    gtag: (
      type: 'event',
      name: string,
      params: Record<string, string | number | string[]>
    ) => void;
  }
}

declare module 'react' {
  interface StyleHTMLAttributes<T> extends React.HTMLAttributes<T> {
    jsx?: boolean;
    global?: boolean;
  }
}

declare module 'yup' {
  interface ArraySchema<T> {
    unique(
      message: string,
      mapper?: (value: T, index?: number, list?: T[]) => T[]
    ): ArraySchema<T>;
  }
}

'''
'''--- hooks/useAppInitialize.ts ---
import { useCallback, useEffect, useState } from 'react';

// We can safely ignore this as it is expected behavior for some scenarios
// see https://github.com/WICG/resize-observer/issues/38
const SAFELY_IGNORE_ERRORS = ['ResizeObserver loop limit exceeded'];

export function useAppInitialize(): boolean {
  const [initialized, setInitialized] = useState(false);

  const handleAppConfigReady = useCallback(() => {
    setInitialized(true);
  }, []);

  const handleError = useCallback(e => {
    if (SAFELY_IGNORE_ERRORS.includes(e?.message)) {
      return false;
    }

    console.error(
      `Global error: ${e.message}, ${e.source}, ${e.lineno}, ${e.colno}`
    );
    // eslint-disable-next-line
    console.trace(e);

    return true;
  }, []);

  useEffect(() => {
    window.addEventListener('error', handleError);

    return () => {
      window.removeEventListener('error', handleError);
    };
  }, [handleError]);

  useEffect(() => {
    if (window.APP_CONFIG) {
      setInitialized(true);
    }

    document.addEventListener('appConfigReady', handleAppConfigReady);

    return () =>
      document.removeEventListener('appConfigReady', handleAppConfigReady);
  }, [handleAppConfigReady]);

  return initialized;
}

'''
'''--- hooks/useAppVersion.ts ---
import { useFlags } from 'launchdarkly-react-client-sdk';
import { useCookie } from 'react-use';
import { useCallback } from 'react';
import { CookieService } from 'services/CookieService';

export function getAppVersion(): number {
  try {
    const appVersion = CookieService.get('astroAppVersion');

    return appVersion ? Number(appVersion) : 2;
  } catch (e) {
    return 2;
  }
}

export function useAppVersion(): {
  appVersionEnabled: boolean;
  appVersion: number | null;
  updateAppVersion: (val: string) => void;
} {
  const { applicationVersionSelect, defaultApplicationUiVersion } = useFlags();
  const [value, updateCookie] = useCookie('astroAppVersion');

  const updateAppVersion = useCallback(
    (val: string) => {
      updateCookie(val, { path: '/' });
    },
    [updateCookie]
  );

  return {
    appVersionEnabled: applicationVersionSelect,
    appVersion:
      (value ? Number(value) : null) || defaultApplicationUiVersion || null,
    updateAppVersion,
  };
}

'''
'''--- hooks/useAvailableActionsCounters.ts ---
import { useFlags } from 'launchdarkly-react-client-sdk';
import { useAsync } from 'react-use';
import { SputnikHttpService } from 'services/sputnik';
import { useWalletContext } from 'context/WalletContext';
import { ProposalsFeedStatuses } from 'types/proposal';
import { useAvailableActionsProposals } from 'services/ApiService/hooks/useAvailableActionsProposals';

export function useAvailableActionsCounters(): {
  proposalActionsCount: number | undefined;
} {
  const { accountId } = useWalletContext();
  const { useOpenSearchDataApi } = useFlags();

  const count = useAvailableActionsProposals();

  const { value: proposalActionsCount } = useAsync(async () => {
    if (
      !accountId ||
      useOpenSearchDataApi ||
      useOpenSearchDataApi === undefined
    ) {
      return 0;
    }

    const res = await SputnikHttpService.getProposalsListByAccountId(
      {
        offset: 0,
        limit: 1000,
        status: ProposalsFeedStatuses.VoteNeeded,
        accountId,
      },
      accountId || undefined
    );

    if (res) {
      return res.data.length;
    }

    return 0;
  }, [accountId, useOpenSearchDataApi]);

  return {
    proposalActionsCount: (proposalActionsCount || count) ?? 0,
  };
}

'''
'''--- hooks/useBlockchainWarning.ts ---
import { useRouter } from 'next/router';
import { useCallback, useEffect } from 'react';
import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';
import { useTranslation } from 'next-i18next';
import omit from 'lodash/omit';

export function useBlockchainWarning(): void {
  const { t } = useTranslation();
  const { query, replace } = useRouter();
  const isRedirectFromCreate = query.fromCreate;

  const updateQuery = useCallback(async () => {
    await replace(
      {
        query: omit(query, 'fromCreate'),
      },
      undefined,
      { shallow: true }
    );
  }, [query, replace]);

  useEffect(() => {
    if (isRedirectFromCreate) {
      updateQuery();

      showNotification({
        type: NOTIFICATION_TYPES.INFO,
        description: t('successProposalNotification'),
        lifetime: 20000,
      });
    }
  }, [isRedirectFromCreate, t, updateQuery]);
}

'''
'''--- hooks/useCountdown.ts ---
import { useEffect, useState } from 'react';
import useCountDown from 'react-countdown-hook';
import { differenceInMilliseconds, parseISO } from 'date-fns';
import { useMountedState } from 'react-use';

function formatCountdown(seconds: number) {
  const d = Math.floor(seconds / (24 * 3600));
  const h = Math.floor((seconds - d * 24 * 3600) / 3600);
  const m = Math.floor((seconds - d * 24 * 3600 - h * 3600) / 60);
  const s = Math.floor(seconds - d * 24 * 3600 - h * 3600 - m * 60);

  let res = '';

  if (d > 0) {
    res += `${d}d `;
  }

  if (h > 0) {
    res += `${h}h `;
  }

  if (m > 0) {
    res += `${m}m `;
  }

  if (!res && s > 0 && s < 60) {
    res = 'less than a minute';
  }

  return res;
}

export function useCountdown(endsAt: string): string | null | undefined {
  const start = new Date();
  const end = parseISO(endsAt);
  const [started, setStarted] = useState(false);
  const isMounted = useMountedState();

  const diff = differenceInMilliseconds(end, start);

  const [timeLeft, actions] = useCountDown(diff, 1000 * 15);

  useEffect(() => {
    if (isMounted()) {
      actions.start();
      setStarted(true);
    }

    return () => {
      actions.pause();
    };
  }, [actions, isMounted]);

  if (!started) {
    return undefined;
  }

  return timeLeft > 0 ? formatCountdown(timeLeft / 1000) : null;
}

'''
'''--- hooks/useCreateDraftPermissions.ts ---
import { useDaoSettings } from 'context/DaoSettingsContext';
import { DAO } from 'types/dao';
import { useWalletContext } from 'context/WalletContext';

export function useCreateDraftPermissions(dao: Pick<DAO, 'daoMembersList'>): {
  canCreateDrafts: boolean;
} {
  const { accountId } = useWalletContext();
  const { settings } = useDaoSettings();

  const isMember = dao.daoMembersList.includes(accountId);

  return {
    canCreateDrafts:
      isMember || settings?.drafts?.allowCreateDraftByAnyUser || false,
  };
}

'''
'''--- hooks/useCustomTokens.ts ---
import { useEffect, useMemo, useState } from 'react';
import { SputnikHttpService } from 'services/sputnik';
import { useRouter } from 'next/router';
import { Token } from 'types/token';
import reduce from 'lodash/reduce';
import { Tokens } from 'context/types';
import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';
import { useTokens } from 'services/ApiService/hooks/useTokens';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { useDao } from 'services/ApiService/hooks/useDao';

function normalizeTokens(tkns: Token[]): Tokens {
  const hasNear = tkns.find(item => !item.tokenId);

  const input = hasNear
    ? tkns
    : [
        ...tkns,
        {
          symbol: 'NEAR',
          balance: '',
          decimals: 24,
          tokenId: '',
          icon: '',
          id: 'NEAR',
          price: null,
        },
      ];

  return reduce(
    input,
    (acc, token) => {
      const { tokenId, symbol } = token;

      acc[tokenId || symbol] = token;

      return acc;
    },
    {} as Tokens
  );
}

export function useDaoCustomTokens(daoId?: string): {
  tokens: Record<string, Token>;
} {
  const router = useRouter();
  const [tokensData, setTokensData] = useState<Token[]>();
  const { useOpenSearchDataApi } = useFlags();
  const { dao } = useDao();

  useEffect(() => {
    if (
      (!daoId && !router.query.dao) ||
      useOpenSearchDataApi ||
      useOpenSearchDataApi === undefined
    ) {
      return;
    }

    SputnikHttpService.getAccountTokens(daoId ?? (router.query.dao as string))
      .then(d => {
        setTokensData(d);
      })
      .catch(err => {
        showNotification({
          type: NOTIFICATION_TYPES.ERROR,
          lifetime: 20000,
          description: err.message,
        });
      });
  }, [daoId, router.query.dao, useOpenSearchDataApi]);

  const tokens = useMemo(() => {
    const values = tokensData || dao?.tokens;

    return values ? normalizeTokens(values) : {};
  }, [dao?.tokens, tokensData]);

  return { tokens };
}

export function useAllCustomTokens(): { tokens: Record<string, Token> } {
  const [tokensData, setTokensData] = useState<Token[]>();
  const { useOpenSearchDataApi } = useFlags();
  const { data } = useTokens();

  useEffect(() => {
    if (useOpenSearchDataApi || useOpenSearchDataApi === undefined) {
      return;
    }

    SputnikHttpService.getTokens({
      limit: 1000,
    }).then(d => {
      setTokensData(d);
    });
  }, [useOpenSearchDataApi]);

  const tokens = useMemo(() => {
    const values = tokensData || data;

    return values ? normalizeTokens(values) : {};
  }, [data, tokensData]);

  return { tokens };
}

'''
'''--- hooks/useDaoContext.ts ---
import { DaoContext } from 'types/context';
import { SputnikHttpService } from 'services/sputnik';
import {
  getAllowedProposalsToCreate,
  getAllowedProposalsToVote,
} from 'astro_2.0/features/CreateProposal/createProposalHelpers';
import { ProposalType } from 'types/proposal';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { useAsync } from 'react-use';

export function useDaoContext(
  accountId: string | undefined,
  daoId: string | undefined
): DaoContext | undefined {
  const { governanceToken, useOpenSearchDataApi } = useFlags();

  const { value } = useAsync(async () => {
    if (!daoId || useOpenSearchDataApi || useOpenSearchDataApi === undefined) {
      return undefined;
    }

    const [dao, policyAffectsProposals, delegations] = await Promise.all([
      SputnikHttpService.getDaoById(daoId),
      SputnikHttpService.findPolicyAffectsProposals(daoId),
      SputnikHttpService.getDelegations(daoId, governanceToken),
    ]);

    return {
      dao,
      policyAffectsProposals,
      delegations,
    };
  }, [daoId]);

  if (!value || !value?.dao) {
    return undefined;
  }

  const { dao, policyAffectsProposals, delegations } = value;

  let userHasDelegatedTokens = false;
  const userDelegation = delegations.find(item => item.accountId === accountId);
  const holdersRole = dao.policy.roles.find(
    role => role.kind === 'Member' && role.name === 'TokenHolders'
  );

  if (
    userDelegation &&
    holdersRole &&
    Number(userDelegation.balance) > Number(holdersRole.balance)
  ) {
    userHasDelegatedTokens = true;
  }

  const allowedProposalsToCreate = getAllowedProposalsToCreate(
    accountId,
    dao,
    userHasDelegatedTokens
  );
  const isCanCreateProposals = !!Object.values(allowedProposalsToCreate).find(
    v => v
  );

  return {
    dao,
    userPermissions: {
      isCanCreateProposals,
      allowedProposalsToCreate,
      allowedProposalsToVote: getAllowedProposalsToVote(accountId, dao),
      isCanCreatePolicyProposals:
        allowedProposalsToCreate[ProposalType.ChangePolicy] &&
        !policyAffectsProposals.length,
    },
    policyAffectsProposals,
  };
}

'''
'''--- hooks/useDaoIds.ts ---
import { useEffect, useState } from 'react';
import { SputnikHttpService } from 'services/sputnik';
import { useMountedState } from 'react-use';

export const useDaoIds = (accountId: string | undefined): string[] => {
  const isMounted = useMountedState();
  const [daoIds, setDaoIds] = useState<string[]>([]);

  useEffect(() => {
    if (accountId) {
      SputnikHttpService.getAccountDaos(accountId).then(daos => {
        if (isMounted()) {
          setDaoIds(daos.map(dao => dao.id));
        }
      });
    }
  }, [accountId, isMounted]);

  return daoIds;
};

'''
'''--- hooks/useDaoSubscriptions.ts ---
import { useCallback, useEffect, useState } from 'react';
import { useAsyncFn } from 'react-use';
import { SputnikHttpService } from 'services/sputnik';
import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';
import { DAO, DaoSubscription } from 'types/dao';
import { useWalletContext } from 'context/WalletContext';
import { useRouter } from 'next/router';
import { useAccountDaos } from 'services/ApiService/hooks/useAccountDaos';

function normalizeSubscriptions(
  data: DaoSubscription[]
): Record<string, { subscriptionId: string; dao: DAO }> {
  return data.reduce<Record<string, { subscriptionId: string; dao: DAO }>>(
    (res, item) => {
      res[item.dao.id] = {
        subscriptionId: item.id,
        dao: item.dao,
      };

      return res;
    },
    {}
  );
}

export function useDaoSubscriptions(): {
  subscriptions: Record<string, { subscriptionId: string; dao: DAO }> | null;
  handleFollow: (daoId: string) => void;
  handleUnfollow: (id: string) => void;
  isLoading: boolean;
} {
  const { query } = useRouter();
  const dao = query.dao as string;
  const { accountId, nearService, pkAndSignature } = useWalletContext();
  const [subscriptions, setSubscriptions] = useState<Record<
    string,
    { subscriptionId: string; dao: DAO }
  > | null>(null);
  const { mutate: refreshAccountDaos } = useAccountDaos(true);

  const getSubscriptions = useCallback(async () => {
    try {
      if (accountId) {
        const data = await SputnikHttpService.getAccountDaoSubscriptions(
          accountId
        );

        await refreshAccountDaos();
        setSubscriptions(normalizeSubscriptions(data));
      }
    } catch (err) {
      showNotification({
        type: NOTIFICATION_TYPES.ERROR,
        lifetime: 20000,
        description: err.message,
      });
    }
  }, [accountId, refreshAccountDaos]);

  const [{ loading }, handleFollow] = useAsyncFn(
    async daoId => {
      if (!pkAndSignature) {
        return;
      }

      const { publicKey, signature } = pkAndSignature;

      if (publicKey && signature && accountId) {
        const result = await SputnikHttpService.updateAccountSubscription({
          accountId,
          daoId,
          publicKey,
          signature,
        });

        if (result) {
          await getSubscriptions();
        }
      }
    },
    [nearService, pkAndSignature]
  );

  const [{ loading: loadingUnfollow }, handleUnfollow] = useAsyncFn(
    async subscriptionId => {
      if (!pkAndSignature) {
        return;
      }

      const { publicKey, signature } = pkAndSignature;

      if (publicKey && signature && accountId) {
        await SputnikHttpService.deleteAccountSubscription(
          dao,
          accountId,
          subscriptionId,
          {
            accountId,
            publicKey,
            signature,
          }
        );

        await getSubscriptions();
      }
    },
    [accountId, getSubscriptions, nearService, pkAndSignature, dao]
  );

  useEffect(() => {
    if (accountId) {
      getSubscriptions();
    }
  }, [accountId, getSubscriptions]);

  return {
    subscriptions,
    handleFollow,
    handleUnfollow,
    isLoading: loading || loadingUnfollow,
  };
}

'''
'''--- hooks/useDebounceUpdateEffect.ts ---
import { useRef, DependencyList } from 'react';
import { useDebounce } from 'react-use';
import { UseDebounceReturn } from 'react-use/lib/useDebounce';

export const useDebounceEffect = <L = DependencyList>(
  fn: (p: {
    isInitialCall: boolean;
    lastCallDeps: L | undefined;
    depsHaveChanged?: boolean;
  }) => void,
  ms?: number,
  deps?: DependencyList
): UseDebounceReturn => {
  const isInitialCall = useRef(true);
  const lastCallDeps = useRef(deps);

  return useDebounce(
    () => {
      const depsHaveChanged = deps?.some(
        (d, i) => lastCallDeps.current?.[i] !== d
      );

      lastCallDeps.current = deps;

      fn?.({
        isInitialCall: isInitialCall.current,
        lastCallDeps: lastCallDeps.current as unknown as L | undefined,
        depsHaveChanged,
      });

      if (isInitialCall.current) {
        isInitialCall.current = false;
      }
    },
    ms,
    deps
  );
};

'''
'''--- hooks/useDeviceType.ts ---
import { useMedia } from 'react-use';

export function useDeviceType(): {
  isMobile: boolean;
  isTablet: boolean;
  isDesktop: boolean;
} {
  const isMobile = useMedia('(max-width: 640px) and (orientation: portrait)');
  const isTablet = useMedia('(max-width: 768px) and (orientation: portrait)');
  const isDesktop = useMedia('(min-width: 769px)');

  return {
    isMobile,
    isDesktop,
    isTablet,
  };
}

'''
'''--- hooks/useDraft.ts ---
import { useWalletContext } from 'context/WalletContext';
import { useAsync } from 'react-use';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { useDraftService } from './useDraftService';

export function useUnreadDraftCount(daoId: string): number | null {
  const { accountId } = useWalletContext();
  const { useOpenSearchDataApi } = useFlags();
  const draftsService = useDraftService();

  const { value } = useAsync(async () => {
    if (useOpenSearchDataApi || useOpenSearchDataApi === undefined) {
      return 0;
    }

    if (draftsService) {
      const res = await draftsService.getDrafts({
        offset: 0,
        limit: 1000,
        daoId,
        accountId,
        isRead: 'false',
      });

      if (!res) {
        return 0;
      }

      return res.total;
    }

    return 0;
  }, [accountId, daoId, draftsService]);

  return value ?? 0;
}

'''
'''--- hooks/useDraftService.ts ---
import { useEffect, useState } from 'react';
import { HttpService } from 'services/HttpService';
import { appConfig } from 'config';
import { DraftsService } from 'services/DraftsService';
import { useFlags } from 'launchdarkly-react-client-sdk';

export const useDraftService = (): DraftsService | undefined => {
  const [draftsService, setDraftsService] = useState<
    DraftsService | undefined
  >();

  const flags = useFlags();

  useEffect(() => {
    setTimeout(() => {
      if (flags === undefined) {
        return;
      }

      const { useDraftsApiRelatedToDao, useDraftCommentsApiRelatedToDao } =
        flags;

      const httpService = new HttpService({
        baseURL: `${
          process.browser
            ? window.APP_CONFIG.DRAFTS_API_URL
            : appConfig.DRAFTS_API_URL
        }/api/v1/`,
      });

      setDraftsService(
        new DraftsService(
          httpService,
          useDraftsApiRelatedToDao,
          useDraftCommentsApiRelatedToDao
        )
      );
    }, 500);
  }, [flags]);

  return draftsService;
};

'''
'''--- hooks/useGetBreadcrumbsConfig.ts ---
import { useMemo } from 'react';
import { useTranslation } from 'next-i18next';

import {
  ALL_DAOS_URL,
  SINGLE_DAO_PAGE,
  GROUPS_PAGE_URL,
  ALL_PROPOSALS_PAGE_URL,
  SINGLE_PROPOSAL_PAGE_URL,
  TREASURY_PAGE_URL,
  SINGLE_BOUNTY_PAGE_URL,
  ALL_BOUNTIES_PAGE_URL,
  GOVERNANCE_TOKEN_INFO_URL,
  DAO_SETTINGS_PAGE_URL,
  DAO_CONFIG_PAGE_URL,
  DAO_CUSTOM_FC_TEMPLATES_PAGE_URL,
  DRAFTS_PAGE_URL,
  DRAFT_PAGE_URL,
  CREATE_DRAFT_PAGE_URL,
  EDIT_DRAFT_PAGE_URL,
  DELEGATE_PAGE_URL,
} from 'constants/routing';
import { UrlObject } from 'url';
import { Proposal } from 'types/proposal';
import { DraftProposal } from 'types/draftProposal';

type GroupConfig = {
  id: string;
  label: string;
};

type Breadcrumbs = Record<
  string,
  {
    href?: string | UrlObject;
    label: string;
  }
>;

export function useGetBreadcrumbsConfig(
  daoId: string,
  daoDisplayName: string,
  group?: GroupConfig,
  proposal?: Pick<Proposal, 'id'>,
  bountyContextId?: string,
  draft?: Pick<DraftProposal, 'id'>
): Breadcrumbs {
  const { t } = useTranslation();

  const breadcrumbs = useMemo(() => {
    return {
      ALL_DAOS_URL: {
        href: ALL_DAOS_URL,
        label: t('allDaos'),
      },
      SINGLE_DAO_PAGE: {
        href: {
          pathname: SINGLE_DAO_PAGE,
          query: {
            dao: daoId,
          },
        },
        label: daoDisplayName || daoId,
      },
      ALL_PROPOSALS_PAGE_URL: {
        href: {
          pathname: ALL_PROPOSALS_PAGE_URL,
          query: {
            dao: daoId,
          },
        },
        label: t('daoDetailsMinimized.proposals'),
      },
      SINGLE_PROPOSAL_PAGE_URL: {
        href: {
          pathname: SINGLE_PROPOSAL_PAGE_URL,
          query: {
            dao: daoId,
            proposal: proposal?.id,
          },
        },
        label: proposal?.id ?? '',
      },
      TREASURY: {
        label: t('daoDetailsMinimized.treasury'),
        href: {
          pathname: TREASURY_PAGE_URL,
          query: {
            dao: daoId,
          },
        },
      },
      GOVERNANCE_TOKEN_INFO: {
        label: 'Governance Token',
        href: {
          pathname: GOVERNANCE_TOKEN_INFO_URL,
          query: {
            dao: daoId,
          },
        },
      },
      BOUNTIES: {
        label: 'Bounties',
      },
      ALL_BOUNTIES_PAGE_URL: {
        href: {
          pathname: ALL_BOUNTIES_PAGE_URL,
          query: {
            dao: daoId,
          },
        },
        label: t('bounties'),
      },
      SINGLE_BOUNTY_PAGE_URL: {
        href: {
          pathname: SINGLE_BOUNTY_PAGE_URL,
          query: {
            dao: daoId,
            bountyContext: bountyContextId,
          },
        },
        label: bountyContextId ?? '',
      },
      GROUPS: {
        href: {
          pathname: GROUPS_PAGE_URL,
          query: {
            dao: daoId,
            group: 'all',
          },
        },
        label: t('groups'),
      },
      SINGLE_GROUP: {
        href: {
          pathname: GROUPS_PAGE_URL,
          query: {
            dao: daoId,
            group: group?.id,
          },
        },
        label: group?.label || '',
      },
      CREATE_GOVERNANCE_TOKEN: {
        label: t('daoDetailsMinimized.createGovernanceToken'),
      },
      POLLS: {
        label: t('polls'),
      },
      NFTS: {
        label: 'NFTs',
      },
      SETTINGS: {
        label: t('daoSettings'),
        href: {
          pathname: DAO_SETTINGS_PAGE_URL,
          query: {
            dao: daoId,
          },
        },
      },
      DAO_CONFIG: {
        label: t('daoConfig'),
        href: {
          pathname: DAO_CONFIG_PAGE_URL,
          query: {
            dao: daoId,
          },
        },
      },
      CUSTOM_FC_TEMPLATES: {
        label: t('customFunctionCallTemplates'),
        href: {
          pathname: DAO_CUSTOM_FC_TEMPLATES_PAGE_URL,
          query: {
            dao: daoId,
          },
        },
      },
      DELEGATE: {
        label: 'Delegate',
        href: {
          pathname: DELEGATE_PAGE_URL,
          query: {
            dao: daoId,
          },
        },
      },
      DRAFTS: {
        label: t('daoDetailsMinimized.drafts'),
        href: {
          pathname: DRAFTS_PAGE_URL,
          query: {
            dao: daoId,
          },
        },
      },
      SINGLE_DRAFT_PAGE_URL: {
        label: draft?.id ?? '',
        href: {
          pathname: DRAFT_PAGE_URL,
          query: {
            dao: daoId,
            draft: draft?.id ?? '',
          },
        },
      },
      CREATE_DRAFT_PAGE_URL: {
        label: t('drafts.breadcrumbs.createDraft'),
        href: {
          pathname: CREATE_DRAFT_PAGE_URL,
          query: {
            dao: daoId,
          },
        },
      },
      EDIT_DRAFT_PAGE_URL: {
        label: t('drafts.breadcrumbs.editDraft'),
        href: {
          pathname: EDIT_DRAFT_PAGE_URL,
          query: {
            dao: daoId,
            draft: draft?.id ?? '',
          },
        },
      },
    };
  }, [
    t,
    daoId,
    daoDisplayName,
    proposal?.id,
    bountyContextId,
    group?.id,
    group?.label,
    draft?.id,
  ]);

  return breadcrumbs;
}

'''
'''--- hooks/useIntercomAdjust.ts ---
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';

export function useIntercomAdjust(): void {
  const router = useRouter();
  const [adjusted, setAdjusted] = useState(false);

  useEffect(() => {
    // workaround to align intercom button
    if (!adjusted) {
      const intercom: HTMLElement | null =
        document.querySelector('.intercom-launcher');

      if (intercom) {
        intercom.style.bottom = '75px';

        setAdjusted(true);
      }
    }
  }, [adjusted, router.pathname]);
}

'''
'''--- hooks/useIsHrefActive.ts ---
import reduce from 'lodash/reduce';
import { useRouter } from 'next/router';

export const useIsHrefActive = (
  href?: string,
  subHrefs?: string[]
): boolean => {
  const router = useRouter();
  const { pathname, query } = router;

  const filledPathname = reduce(
    query as Record<string, string>,
    (acc, val, key) => {
      return acc.replace(`[${key}]`, val);
    },
    pathname
  );

  return (
    href === pathname ||
    !!subHrefs?.some(h => h === pathname) ||
    href === filledPathname
  );
};

'''
'''--- hooks/useIsValidImage.ts ---
import { useMountedState } from 'react-use';
import { useEffect, useState } from 'react';

export function useIsValidImage(image: string): boolean {
  const [valid, setValid] = useState(false);
  const isMounted = useMountedState();

  useEffect(() => {
    if (!image) {
      return;
    }

    const img = new Image();

    img.onload = () => {
      if (isMounted()) {
        setValid(true);
      }
    };

    img.src = image;
  }, [image, isMounted]);

  return valid;
}

'''
'''--- hooks/useLoadDateLocale.ts ---
import { useEffect, useState } from 'react';
import en from 'date-fns/locale/en-US/index.js';

export const useLoadDateLocale = (selectedLocale: string): Locale => {
  const [locale, setLocale] = useState<Locale>(en);

  let findLocale = selectedLocale;

  if (selectedLocale === 'en') {
    findLocale += '-US';
  }

  useEffect(() => {
    const importLocaleFile = async () => {
      try {
        const localeToSet = await import(
          `date-fns/locale/${findLocale}/index.js`
        );

        setLocale(localeToSet);
      } catch (error) {
        console.error(error);
      }
    };

    importLocaleFile();
  }, [findLocale]);

  return locale;
};

'''
'''--- hooks/useNearPrice.ts ---
import axios from 'axios';
import get from 'lodash/get';
import { useEffect, useState } from 'react';

export function useNearPrice(): number {
  const [nearPrice, setNearPrice] = useState(0);

  useEffect(() => {
    const { CancelToken } = axios;
    const source = CancelToken.source();

    axios
      .get('/api/nearPrice', { cancelToken: source.token })
      .then(nearPriceData => {
        const price = get(nearPriceData, 'data.near.usd');

        setNearPrice(price);
      })
      .catch(thrown => {
        if (axios.isCancel(thrown)) {
          // do nothing - we cancel request on mount
        }
      });

    return () => {
      source.cancel('Cancelled on unmount');
    };
  }, []);

  return nearPrice;
}

'''
'''--- hooks/useOnClickOutside.ts ---
import React from 'react';

type AnyEvent = MouseEvent | TouchEvent;

export function useOnClickOutside<T extends HTMLElement = HTMLElement>(
  refs: React.RefObject<T>[],
  handler: (event: AnyEvent, isClickOutside: boolean) => void
): void {
  React.useEffect(() => {
    const listener = (event: AnyEvent) => {
      for (let i = 0; i < refs.length; i += 1) {
        const el = refs[i]?.current;

        // Do nothing if clicking ref's element or descendent elements
        if (!el || el.contains(event.target as Node)) {
          return;
        }
      }

      handler(event, true);
    };

    document.addEventListener(`mousedown`, listener);
    document.addEventListener(`touchstart`, listener);

    return () => {
      document.removeEventListener(`mousedown`, listener);
      document.removeEventListener(`touchstart`, listener);
    };
  }, [refs, handler]);
}

'''
'''--- hooks/useOnRouterChange.ts ---
import { useEffect } from 'react';
import { Router } from 'next/router';

export function useOnRouterChange(callback: () => void): void {
  useEffect(() => {
    Router.events.on('routeChangeComplete', callback);

    return () => Router.events.off('routeChangeComplete', callback);
  }, [callback]);
}

'''
'''--- hooks/useProposal.ts ---
import { useEffect, useState } from 'react';
import { SputnikHttpService } from 'services/sputnik';
import { Proposal } from 'types/proposal';

export function useProposal(
  daoId?: string,
  proposalId?: number
): Proposal | null {
  const [data, setData] = useState<Proposal | null>(null);

  useEffect(() => {
    if (daoId && proposalId !== undefined) {
      SputnikHttpService.getProposal(daoId, proposalId).then(res =>
        setData(res)
      );
    }
  }, [daoId, proposalId]);

  return data;
}

'''
'''--- hooks/useQuery.ts ---
import { useRouter } from 'next/router';
import { useCallback } from 'react';

const useQuery = <T>(opt?: {
  shallow: boolean;
  scroll?: boolean;
}): {
  query: T;
  updateQuery: <K extends keyof T>(key: K, value: T[K]) => void;
} => {
  const { query, replace } = useRouter();

  const updateQuery = useCallback(
    <K extends keyof T>(key: K, value: T[K]) => {
      const nextQuery = {
        ...query,
        [key]: String(value),
      };

      if (!value) {
        delete nextQuery[key as string];
      }

      const options = opt || {};

      replace({ query: nextQuery }, undefined, {
        shallow: true,
        scroll: false,
        ...options,
      });
    },
    [opt, query, replace]
  );

  return { query: query as unknown as T, updateQuery };
};

export default useQuery;

'''
'''--- hooks/useRouterLoading.ts ---
import Router from 'next/router';
import { useState, useEffect } from 'react';

export const useRouterLoading = (): boolean => {
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const start = () => setLoading(true);
    const end = () => setLoading(false);

    Router.events.on('routeChangeStart', start);
    Router.events.on('routeChangeComplete', end);
    Router.events.on('routeChangeError', end);

    return () => {
      Router.events.off('routeChangeStart', start);
      Router.events.off('routeChangeComplete', end);
      Router.events.off('routeChangeError', end);
    };
  }, []);

  return loading;
};

'''
'''--- hooks/useSyncRefs.ts ---
import React from 'react';

export function useSyncRefs<TType>(
  ...refs: (
    | React.MutableRefObject<TType | null>
    | ((instance: TType) => void)
    | null
  )[]
): (val: TType) => void {
  const cache = React.useRef(refs);

  React.useEffect(() => {
    cache.current = refs;
  }, [refs]);

  return React.useCallback(
    (value: TType) => {
      // eslint-disable-next-line no-restricted-syntax
      for (const ref of cache.current) {
        if (ref == null) {
          // eslint-disable-next-line no-continue
          continue;
        }

        if (typeof ref === 'function') {
          ref(value);
        } else {
          ref.current = value;
        }
      }
    },
    [cache]
  );
}

'''
'''--- hooks/useWindowResize.ts ---
import { useEffect } from 'react';

export function useWindowResize(callback: () => void, callOnInit = true): void {
  useEffect(() => {
    if (callOnInit) {
      callback();
    }

    window.addEventListener('resize', callback);

    return () => window.removeEventListener('resize', callback);
  }, [callback, callOnInit]);
}

'''
'''--- jest.config.js ---
const nextJest = require('next/jest');

// Providing the path to your Next.js app which will enable loading next.config.js and .env files
const createJestConfig = nextJest({ dir: '' });

// Any custom config you want to pass to Jest
const customJestConfig = {
  setupFiles: ['dotenv/config'],
  setupFilesAfterEnv: ['./setupTests.ts'],
  moduleNameMapper: {
    '\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':
      '<rootDir>/jest/__mocks__/fileMock.js',
    '\\.(css|scss)$': '<rootDir>/jest/__mocks__/styleMock.js',
    '^react(.*)$': '<rootDir>/node_modules/react$1',
  },
  testEnvironment: 'jsdom',
  moduleDirectories: ['node_modules', '.'],
  collectCoverageFrom: [
    'astro_2.0/**/*.{ts,tsx}',
    'components/**/*.{ts,tsx}',
    'context/**/*.{ts,tsx}',
    'errors/**/*.{ts,tsx}',
    'features/**/*.{ts,tsx}',
    'helpers/**/*.{ts,tsx}',
    'hooks/**/*.{ts,tsx}',
    'pages/**/*.{ts,tsx}',
    'services/**/*.{ts,tsx}',
    'utils/**/*.{ts,tsx}',
    '!**/index.ts',
    '!**/types/*.ts',
    '!**/tests/*.{ts,tsx}',
  ],
};

// createJestConfig is exported in this way to ensure that next/jest can load the Next.js configuration, which is async
module.exports = createJestConfig(customJestConfig);

'''
'''--- jest/__mocks__/fileMock.js ---
module.exports = 'test-file-stub';

'''
'''--- jest/__mocks__/styleMock.js ---
module.exports = {};

'''
'''--- mocks/bountyContextData.ts ---
export const BOUNTY_CONTEXT = {
  isArchived: false,
  createdAt: '2022-01-21T16:01:38.042Z',
  updatedAt: '2022-01-21T16:01:38.042Z',
  id: 'bmwclub.sputnikv2.testnet-30',
  daoId: 'bmwclub.sputnikv2.testnet',
  proposal: {
    isArchived: false,
    createdAt: '2021-11-15T22:10:18.198Z',
    updatedAt: '2022-01-04T17:09:13.943Z',
    transactionHash: 'BhbTir1tXgzTsBT3BgwXDDXsScCwTF6rdtrXt6J4bFTe',
    updateTransactionHash: '5JwayMEoC6GzRkrmRVoZzjcYCLwGdMWdTmefoon4rRRe',
    createTimestamp: '1637014215437156565',
    updateTimestamp: '1637080436080000000',
    id: 'bmwclub.sputnikv2.testnet-30',
    proposalId: 30,
    daoId: 'bmwclub.sputnikv2.testnet',
    proposer: 'br.testnet',
    description: 'hello$$$$$$$$ProposeCreateBounty',
    status: 'Approved',
    voteStatus: 'Active',
    kind: {
      type: 'AddBounty',
      bounty: {
        description: 'hello$$$$',
        token: 'kaleinik.tokenfactory.testnet',
        amount: '1200',
        times: 1,
        maxDeadline: '172800000000000',
      },
    },
    type: 'AddBounty',
    submissionTime: '1637014216005323545',
    voteCounts: {
      council: [2, 0, 0],
    },
    votes: {
      'illia3.testnet': 'Approve',
      'illia2.testnet': 'Approve',
    },
    votePeriodEnd: '1637014936005323500',
    bountyDoneId: null,
    commentsCount: 0,
  },
  bounty: {
    isArchived: false,
    createdAt: '2021-11-16T16:33:56.171Z',
    updatedAt: '2022-01-21T16:01:45.406Z',
    transactionHash: '5JwayMEoC6GzRkrmRVoZzjcYCLwGdMWdTmefoon4rRRe',
    updateTransactionHash: '7bMJuaS78mpmKCGVTskxRvmWgH1onXub1xBvNc9TBUyX',
    createTimestamp: '1637080436080000000',
    updateTimestamp: '1638287404217915861',
    id: 'bmwclub.sputnikv2.testnet-1',
    bountyId: 1,
    proposalId: 'bmwclub.sputnikv2.testnet-30',
    daoId: 'bmwclub.sputnikv2.testnet',
    description: 'hello$$$$',
    token: 'kaleinik.tokenfactory.testnet',
    amount: '1200',
    times: '0',
    maxDeadline: '172800000000000',
    numberOfClaims: 0,
    bountyClaims: [
      {
        isArchived: false,
        createdAt: '2021-11-25T15:25:59.159Z',
        updatedAt: '2021-12-08T15:36:32.152Z',
        transactionHash: null,
        updateTransactionHash: null,
        createTimestamp: null,
        updateTimestamp: null,
        id: 'bmwclub.sputnikv2.testnet-1-1637853955628542504',
        accountId: 'illia2.testnet',
        startTime: '1637853955628542504',
        deadline: '172800000000000',
        completed: false,
        endTime: '1638026755628542504',
      },
    ],
    bountyDoneProposals: [
      {
        isArchived: false,
        createdAt: '2021-11-25T15:30:37.989Z',
        updatedAt: '2022-01-21T16:01:39.430Z',
        transactionHash: '7jkh6ybNB7DqeLauRBDr55ikceN63CBww75MaCbR5gNq',
        updateTransactionHash: 'AeXwnrNutBUGYxGpBPMnhRpAwPKqQBWZ923hMWwNTHsk',
        createTimestamp: '1637854237930000000',
        updateTimestamp: '1642434351422230460',
        id: 'bmwclub.sputnikv2.testnet-57',
        proposalId: 57,
        daoId: 'bmwclub.sputnikv2.testnet',
        proposer: 'mobiletestillia.testnet',
        description: 'Finish$$$$$$$$ProposeDoneBounty',
        status: 'InProgress',
        voteStatus: 'Expired',
        kind: {
          type: 'BountyDone',
          bountyId: 1,
          receiverId: 'mobiletestillia.testnet',
        },
        type: 'BountyDone',
        submissionTime: '1637854235979307101',
        voteCounts: {},
        votes: {},
        votePeriodEnd: '1637854955979307000',
        bountyDoneId: 'bmwclub.sputnikv2.testnet-1',
        commentsCount: 0,
      },
      {
        isArchived: false,
        createdAt: '2021-11-25T15:26:54.507Z',
        updatedAt: '2022-01-21T16:01:39.430Z',
        transactionHash: 'tEhJmt9DsdvpUyUikip9TM2gfHuiVfK3xSHf3vQ4yYU',
        updateTransactionHash: 'ECr5R14YEp6UdK53pX7QE7G32NM2a5DejZLxQBKC3Mz8',
        createTimestamp: '1637854014475000000',
        updateTimestamp: '1637854047735884266',
        id: 'bmwclub.sputnikv2.testnet-56',
        proposalId: 56,
        daoId: 'bmwclub.sputnikv2.testnet',
        proposer: 'mobiletestillia.testnet',
        description: 'done hello$$$$$$$$ProposeDoneBounty',
        status: 'Approved',
        voteStatus: 'Active',
        kind: {
          type: 'BountyDone',
          bountyId: 1,
          receiverId: 'mobiletestillia.testnet',
        },
        type: 'BountyDone',
        submissionTime: '1637854012742106523',
        voteCounts: {
          council: [1, 0, 0],
        },
        votes: {
          'illia2.testnet': 'Approve',
        },
        votePeriodEnd: '1637854732742106600',
        bountyDoneId: 'bmwclub.sputnikv2.testnet-1',
        commentsCount: 0,
      },
    ],
  },
};

'''
'''--- mocks/notificationsData.ts ---
import {
  NotificationsGroupStatus,
  NotificationSettingsType,
} from 'types/notification';

export const NOTIFICATION_SETTINGS_TYPES: NotificationSettingsType[] = [
  {
    typeId: 'root',
  },
  {
    typeId: 'bounty',
    typeName: 'Transfer/Add Bounty',
  },
  {
    typeId: 'config',
    typeName: 'Change Config',
  },
  {
    typeId: 'policy',
    typeName: 'Change Policy',
  },
  {
    typeId: 'member',
    typeName: 'Add/Remove member to Role',
  },
  {
    typeId: 'vote',
    typeName: 'Vote',
  },
];

export const NOTIFICATION_SETTINGS_DISABLE_OPTIONS = [
  {
    value: 'OneHour',
    label: NotificationsGroupStatus.OneHour,
  },
  {
    value: 'EightHours',
    label: NotificationsGroupStatus.EightHours,
  },
  {
    value: 'OneDay',
    label: NotificationsGroupStatus.OneDay,
  },
  {
    value: 'Disable',
    label: NotificationsGroupStatus.Disable,
  },
];

'''
'''--- mocks/pluginsPageData.ts ---
import { PluginCardProps } from 'astro_2.0/features/pages/plugins/PluginCard/PluginCard';
import { IWizardInitialData } from 'astro_2.0/features/pages/plugins/UsePluginPopup/types';

const generatePlugin = (tokenName: string, created: string) => ({
  tokenName,
  created,
  functionName: 'FunctionName',
});

const generatePlugins = () => {
  const plugins: PluginCardProps[] = [];
  const names = ['tkn', 'gatorade', 'farm'];

  for (let i = 1; i < 51; i += 1) {
    const month = `0${Math.floor((Math.random() * 100) % 8) + 1}`.slice(-2);
    const day = `0${Math.floor((Math.random() * 1000) % 28) + 1}`.slice(-2);
    const date = `2021-${month}-${day}`;
    const name = `${names[Math.floor((Math.random() * 100) % 3)]}.near`;
    const pluginsItem: PluginCardProps = generatePlugin(name, date);

    plugins.push(pluginsItem);
  }

  return plugins;
};

export const PLUGINS_DATA = generatePlugins();

export const PLUGIN_INITIAL_DATA: IWizardInitialData = {
  functions: [
    {
      id: '1',
      functionName: 'Token Farm: Create new token',
      code: '{"contract":"app.tokenfarm.near","method":"createToken","description":"Create a new token on token farm","args":[]}',
    },
  ],
};

'''
'''--- next-i18next.config.js ---
module.exports = {
  i18n: {
    defaultLocale: 'en',
    locales: ['en', 'ru'],
    reloadOnPrerender: process.env.I18_RELOAD_ON_PRERENDER,
  },
  serializeConfig: false,
};

'''
'''--- next.config.js ---
const path = require('path');
const svgSprite = require('./plugins/next-svg-sprites');
const cssLoaderConfig = require('./plugins/css-loader-config');
const { i18n } = require('./next-i18next.config');

module.exports = (phase, { defaultConfig }) => {
  const plugins = [svgSprite, cssLoaderConfig];

  const transformers = [];

  const nextConfig = plugins.reduce(
    (acc, next) => {
      const nextConfig = next(acc);
      if (typeof nextConfig.webpack === 'function') {
        transformers.push(nextConfig.webpack);
      }

      return nextConfig;
    },
    {
      ...defaultConfig,
      swcMinify: true,
      reactStrictMode: true,
      images: {
        domains: [
          'i.imgur.com',
          'sputnik-dao.s3.eu-central-1.amazonaws.com',
          'ipfs.io',
          'ipfs.fleek.co',
          'cloudflare-ipfs.com',
        ],
      },
      sassOptions: {
        includePaths: [path.join(__dirname, 'styles')],
      },
      async rewrites() {
        return [
          {
            source: '/create-dao',
            destination: '/create-dao/foundation',
          },
        ];
      },
      /* experimental: {
        outputStandalone: true,
      },*/
      i18n,
      publicRuntimeConfig: {
        shouldUseExternalAssetUrl: process.env.NODE_ENV === 'production',
        assetUrl: '/_next/static/sprite.svg',
      },
      api: {
        responseLimit: false,
      },
      typescript: {
        // !! WARN !!
        // Dangerously allow production builds to successfully complete even if
        // your project has type errors.
        // !! WARN !!
        ignoreBuildErrors: true,
      },
      eslint: {
        // Warning: This allows production builds to successfully complete even if
        // your project has ESLint errors.
        ignoreDuringBuilds: true,
      },
    }
  );

  nextConfig.webpack = (config, options) => {
    config.externals = [...config.externals, 'bufferutil', 'utf-8-validate'];

    config.resolve.fallback = {
      fs: false,
      tls: false,
      net: false,
      https: false,
      http: false,
      crypto: false,
      os: false,
    };

    return transformers.reduce((acc, next) => next(acc, options), config);
  };

  return nextConfig;
};

'''
'''--- package.json ---
{
  "name": "astro",
  "jest": {},
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev -p 8080",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "commit": "cz",
    "prettier": "prettier --write \"./**/*.{ts,tsx,js,jsx,css,scss,html}\"",
    "stylelint": "stylelint \"**/*.{css,scss}\" --quiet --fix",
    "prepare": "husky install",
    "storybook": "yarn generate-assets-index && start-storybook -s public -p 6006",
    "build-storybook": "build-storybook -s public",
    "stylelint-check": "stylelint-config-prettier-check",
    "test": "jest --silent",
    "test:loud": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "generate-assets": "yarn generate-assets-index",
    "prebuild": "yarn generate-assets",
    "postinstall": "yarn generate-assets",
    "generate-assets-index": "node scripts/generateAssetsIndex.js",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@datadog/browser-rum": "^4.17.1",
    "@hookform/resolvers": "^2.7.1",
    "@near-wallet-selector/core": "^7.0.2",
    "@near-wallet-selector/my-near-wallet": "^7.0.2",
    "@near-wallet-selector/sender": "^7.0.2",
    "@nestjsx/crud-request": "^5.0.0-alpha.3",
    "@popperjs/core": "^2.9.2",
    "@reach/auto-id": "^0.15.3",
    "@roketo/sdk": "^0.1.1",
    "@supercharge/promise-pool": "^1.7.0",
    "ace-builds": "^1.4.12",
    "aws-sdk": "^2.975.0",
    "axios": "^0.21.1",
    "big.js": "^6.0.3",
    "bn.js": "^5.2.0",
    "borsh": "^0.6.0",
    "bufferutil": "^4.0.5",
    "camelcase-keys": "^7.0.0",
    "classnames": "^2.3.1",
    "cookies": "^0.8.0",
    "cropperjs": "^1.5.12",
    "date-fns": "^2.23.0",
    "decimal.js": "^10.3.1",
    "dompurify": "^2.3.8",
    "downshift": "^6.1.3",
    "extract-domain": "^2.4.1",
    "firebase": "^8.10.0",
    "form-data": "^4.0.0",
    "framer-motion": "^5.5.3",
    "htmldiff-js": "^1.0.5",
    "i18next": "^21.6.5",
    "imagemin-svgo": "^9.0.0",
    "launchdarkly-node-server-sdk": "^6.4.2",
    "launchdarkly-react-client-sdk": "^2.25.0",
    "little-state-machine": "^4.2.3",
    "lodash": "^4.17.21",
    "logrocket": "^3.0.0",
    "logrocket-react": "^5.0.1",
    "mark.js": "^8.11.1",
    "nanoid": "^3.1.23",
    "near-api-js": "^0.44.2",
    "near-contract-parser": "^0.1.4",
    "next": "^12.1.0",
    "next-i18next": "11.3.0",
    "next-optimized-images": "^2.6.2",
    "next-plugin-svgr": "^1.0.0",
    "next-router-mock": "^0.6.7",
    "nookies": "^2.5.2",
    "parse-duration": "^1.0.2",
    "pretty-ms": "^7.0.1",
    "react": "17.0.2",
    "react-ace": "^9.4.3",
    "react-animate-height": "^2.0.23",
    "react-circle-flags": "^0.0.14",
    "react-content-loader": "^6.2.0",
    "react-countdown-hook": "^1.1.0",
    "react-cropper": "^2.1.8",
    "react-dom": "17.0.2",
    "react-hook-form": "^7.12.2",
    "react-i18next": "11.8.8",
    "react-infinite-scroll-component": "^6.1.0",
    "react-linkify": "^1.0.0-alpha",
    "react-measure": "^2.5.2",
    "react-modal": "^3.14.3",
    "react-paginate": "^7.1.3",
    "react-popper": "^2.2.5",
    "react-popper-tooltip": "^4.3.0",
    "react-quill": "^1.3.5",
    "react-range": "^1.8.12",
    "react-swipeable": "^6.2.0",
    "react-swr-infinite-scroll": "^1.0.1",
    "react-tabs": "^3.2.2",
    "react-text-truncate": "^0.17.0",
    "react-textarea-autosize": "^8.3.3",
    "react-tooltip": "^4.2.21",
    "react-use": "^17.2.4",
    "react-window": "^1.8.6",
    "react-window-infinite-loader": "^1.0.7",
    "recharts": "^2.1.6",
    "rxjs": "^7.5.6",
    "sanitize.css": "^12.0.1",
    "socket.io-client": "4.2.0",
    "svg-sprite-loader": "^6.0.9",
    "svgo": "^2.8.0",
    "svgo-loader": "^3.0.1",
    "swr": "^1.3.0",
    "ts-async-decorators": "^0.3.0",
    "ts-mixer": "^6.0.1",
    "uniqid": "^5.4.0",
    "utf-8-validate": "^5.0.7",
    "victory": "^35.9.0",
    "victory-area": "^35.10.0",
    "yup": "^0.32.9"
  },
  "repository": {
    "type": "git",
    "url": "bitbucket:magicpowered/astro"
  },
  "lint-staged": {
    "*.{ts,tsx}": [
      "eslint --color --max-warnings 0 --no-ignore"
    ],
    "**/*.{ts,tsx}": "tsc-files --noEmit",
    "*.{js,jsx,ts,tsx,json,md}": [
      "prettier --write"
    ],
    "*.{css,scss}": [
      "stylelint --quiet --syntax=scss --fix",
      "prettier --write"
    ]
  },
  "resolutions": {
    "@types/react": "17.0.2",
    "@types/react-dom": "17.0.2"
  },
  "devDependencies": {
    "@babel/core": "^7.14.6",
    "@babel/preset-env": "^7.14.7",
    "@commitlint/cli": "^12.1.4",
    "@commitlint/config-conventional": "^12.1.4",
    "@storybook/addon-actions": "^6.4.0-alpha.26",
    "@storybook/addon-essentials": "^6.4.0-alpha.26",
    "@storybook/addon-links": "^6.4.0-alpha.26",
    "@storybook/api": "^6.4.0-alpha.26",
    "@storybook/builder-webpack5": "6.3.4",
    "@storybook/manager-webpack5": "6.3.4",
    "@storybook/react": "^6.4.0-alpha.26",
    "@testing-library/dom": "^8.11.1",
    "@testing-library/jest-dom": "^5.14.1",
    "@testing-library/react": "^12.0.0",
    "@testing-library/react-hooks": "^8.0.1",
    "@types/big.js": "^6.1.2",
    "@types/bn.js": "^5.1.0",
    "@types/cookie": "^0.4.1",
    "@types/dompurify": "^2.3.3",
    "@types/extract-domain": "^2.3.1",
    "@types/jest": "^26.0.24",
    "@types/lodash": "^4.14.172",
    "@types/logrocket-react": "^3.0.0",
    "@types/mark.js": "^8.11.6",
    "@types/react": "17.0.14",
    "@types/react-dom": "^17.0.9",
    "@types/react-linkify": "^1.0.1",
    "@types/react-measure": "^2.0.7",
    "@types/react-modal": "^3.12.1",
    "@types/react-paginate": "^7.1.1",
    "@types/react-redux": "^7.1.18",
    "@types/react-tabs": "^2.3.3",
    "@types/react-text-truncate": "^0.14.1",
    "@types/react-window": "^1.8.3",
    "@types/react-window-infinite-loader": "^1.0.4",
    "@types/socket.io-client": "1.4.36",
    "@types/svg-sprite-loader": "^3.9.4",
    "@types/uniqid": "^5.3.1",
    "babel-jest": "^27.0.6",
    "babel-loader": "^8.2.2",
    "camelcase": "^6.2.0",
    "commitizen": "^4.2.4",
    "csstype": "^3.0.8",
    "cz-conventional-changelog": "^3.3.0",
    "eslint": "^7.30.0",
    "eslint-config-airbnb-typescript-prettier": "4.2.0",
    "eslint-config-next": "^11.0.1",
    "husky": "^7.0.1",
    "jest": "^27.0.6",
    "lint-staged": "^11.0.0",
    "pascal-case": "^3.1.2",
    "patch-package": "^6.4.7",
    "postinstall-postinstall": "^2.1.0",
    "prettier": "^2.7.1",
    "sass": "^1.35.1",
    "sass-loader": "^12.1.0",
    "semantic-release": "^17.4.4",
    "storybook-addon-next-router": "3.1.1",
    "stylelint": "^13.13.1",
    "stylelint-config-prettier": "^8.0.2",
    "stylelint-config-sass-guidelines": "^8.0.0",
    "stylelint-config-standard": "^22.0.0",
    "stylelint-order": "^4.1.0",
    "stylelint-prettier": "^1.2.0",
    "stylelint-scss": "^3.19.0",
    "tsc-files": "^1.1.2",
    "typescript": "^4.3.5",
    "webpack": "5"
  }
}

'''
'''--- pages/all/daos/index.ts ---
import { DaoFeedItem } from 'types/dao';
import { getDaosList, getFilterValue } from 'features/daos/helpers';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import AllDaosPage from './AllDaosPage';

interface GetDaoListQuery {
  sort?: string;
  offset?: number;
  limit?: number;
  daosView?: string;
}

export async function getServerSideProps({
  query,
  locale = 'en',
}: {
  query: GetDaoListQuery;
  locale: string;
}): Promise<{
  props: { data: DaoFeedItem[]; total: number };
}> {
  const daosView = query.daosView ? (query.daosView as string) : 'active';

  const { daos: data, total } = await getDaosList({
    offset: 0,
    limit: 20,
    sort: query.sort as string,
    filter: getFilterValue(false, daosView),
  });

  return {
    props: {
      ...(await getTranslations(locale)),
      ...(await getDefaultAppVersion()),
      data,
      total,
    },
  };
}

export default AllDaosPage;

'''
'''--- pages/api/config.ts ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next';
import { Config } from 'types/config';

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Config>
): void {
  const config: Config = {
    TOKEN_FACTORY_CONTRACT_NAME: process.env.TOKEN_FACTORY_CONTRACT_NAME,
    AWS_BUCKET: process.env.AWS_BUCKET,
    AWS_REGION: process.env.AWS_REGION,
    GOOGLE_ANALYTICS_KEY: process.env.GOOGLE_ANALYTICS_KEY,
    LOG_ROCKET_APP_ID: process.env.LOG_ROCKET_APP_ID,
    DD_APPLICATION_ID: process.env.DD_APPLICATION_ID,
    DD_CLIENT_TOKEN: process.env.DD_CLIENT_TOKEN,
    DD_SERVICE: process.env.DD_SERVICE,
    RELEASE_NOTES: process.env.RELEASE_NOTES,
    I18_RELOAD_ON_PRERENDER: process.env.I18_RELOAD_ON_PRERENDER,
    LOCAL_WALLET_REDIRECT: process.env.LOCAL_WALLET_REDIRECT,
    API_URL: process.env.API_URL,
    STATS_API_URL: process.env.STATS_API_URL,
    TOASTS_NOTIFICATIONS_TIMEOUT: process.env.TOASTS_NOTIFICATIONS_TIMEOUT,
    APP_DOMAIN: process.env.APP_DOMAIN,
    NEAR_ENV: process.env.NEAR_ENV,
    NEAR_CONTRACT_NAME: process.env.NEAR_CONTRACT_NAME,
    LAUNCHDARKLY_ID: process.env.NEXT_PUBLIC_LAUNCHDARKLY_ID,
    LAUNCHDARKLY_SDK_KEY: process.env.NEXT_PUBLIC_LAUNCHDARKLY_SDK_KEY,
    ROKETO_CONTRACT_NAME: process.env.ROKETO_CONTRACT_NAME,
    ROKETO_MULTICALL_NAME: process.env.ROKETO_MULTICALL_NAME,
    DRAFTS_API_URL: process.env.DRAFTS_API_URL,
    SEARCH_API_URL: process.env.SEARCH_API_URL,
    OPEN_SEARCH_USERNAME: process.env.OPEN_SEARCH_USERNAME,
    OPEN_SEARCH_PASSWORD: process.env.OPEN_SEARCH_PASSWORD,
    GENERIC_FACTORY_CONTRACT_NAME: process.env.GENERIC_FACTORY_CONTRACT_NAME,
    STAKING_CONTRACT_BINARY_HASH: process.env.STAKING_CONTRACT_BINARY_HASH,
  };

  res.status(200).json(config);
}

'''
'''--- pages/api/createProposal.ts ---
import type { NextApiRequest, NextApiResponse } from 'next';

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse
): void {
  const data = {
    url_format:
      'http://app.astrodao.com/dao/<dao_id>/proposals?action=create_proposal&variant=<selected_proposal_variant>&params=<initial_params_object>',
    example:
      'https://dev.app.astrodao.com/dao/aviarium.sputnikv2.testnet/proposals?action=create_proposal&variant=ProposeCustomFunctionCall&params={"details":"Proposal description here", "methodName": "create", "smartContractAddress": "sputnikv2.testnet", "json":{ "key": "{\\"somevalue\\":1}" }}',
    action: 'create_proposal',
    variant: {
      ProposeChangeDaoLegalInfo: {
        details: '',
        externalUrl: '',
        legalStatus: '',
        legalLink: '',
        gas: '',
      },
      ProposeAddMember: {
        details: '',
        externalUrl: '',
        group: '',
        memberName: '',
        gas: '',
      },
      ProposeCreateBounty: {
        details: '',
        externalUrl: '',
        token: 'NEAR',
        amount: '',
        slots: '',
        deadlineThreshold: '',
        gas: '',
      },
      ProposeTransfer: {
        details: '',
        externalUrl: '',
        token: 'NEAR',
        amount: '',
        target: '',
        gas: '',
      },
      ProposeChangeDaoName: {
        details: '',
        externalUrl: '',
        displayName: '',
        gas: '',
      },
      ProposeChangeDaoPurpose: {
        details: '',
        externalUrl: '',
        purpose: '',
        gas: '',
      },
      ProposeChangeDaoLinks: {
        details: '',
        externalUrl: '',
        links: [],
        gas: '',
      },
      ProposePoll: {
        details: '',
        externalUrl: '',
        gas: '',
      },
      ProposeCreateGroup: {
        details: '',
        externalUrl: '',
        group: '',
        memberName: '',
        gas: '',
      },
      ProposeRemoveMember: {
        details: '',
        externalUrl: '',
        group: '',
        memberName: '',
        gas: '',
      },
      ProposeChangeVotingPolicy: {
        details: '',
        externalUrl: '',
        amount: '',
        gas: '',
      },
      ProposeChangeBonds: {
        details: '',
        externalUrl: '',
        createProposalBond: '',
        claimBountyBond: '',
        proposalExpireTime: '',
        unclaimBountyTime: '',
        gas: '',
      },
      ProposeCustomFunctionCall: {
        details: '',
        externalUrl: '',
        smartContractAddress: '',
        methodName: '',
        json: '',
        deposit: '',
        token: 'NEAR',
        actionsGas: '',
        gas: '',
      },
    },
  };

  // http://localhost:8080/dao/voyager.sputnikv2.testnet/proposals/voyager.sputnikv2.testnet-38?action=create_proposal&variant=ProposeCustomFunctionCall&params={"smartContractAddress": "v1_02.multicall.testnet", "methodName": "create", "json":"{"multicall_init_args":{"admin_accounts":["voyager.sputnikv2.testnet"],"croncat_manager":"manager_v1.croncat.testnet","job_bond":"1000000000000000000000000"}}", "deposit": "1"}

  res.status(200).send(data);
}

'''
'''--- pages/api/health.ts ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next';

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<string>
): void {
  res.status(200).send('Astro UI');
}

'''
'''--- pages/api/nearPrice.ts ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import https from 'https';
import type { NextApiRequest, NextApiResponse } from 'next';

type Data = {
  name: string;
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
): Promise<NextApiResponse<Data>> {
  return new Promise((resolve, reject) => {
    https.get(
      'https://api.coingecko.com/api/v3/simple/price?ids=near&vs_currencies=usd',
      resp => {
        resp.on('data', d => {
          res.status(200).json(d);
          resolve(d);
        });
        resp.on('error', err => {
          reject(err);
        });
      }
    );
  });
}

'''
'''--- pages/api/server/[...path].ts ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next';

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<string>
): void {
  const { query } = req;

  const params = { ...query };

  delete params.path;

  res.redirect(
    307,
    `${process.env.API_URL}/api/${
      query?.path instanceof Array ? query.path.join('/') : query.path
    }${
      Object.keys(params).length
        ? `?${Object.keys(params)
            .map(key => `${key}=${params[key]}`)
            .join('&')}`
        : ''
    }`
  );
}

'''
'''--- pages/api/upload-to-s3.ts ---
import extractDomain from 'extract-domain';
import { AwsUploader } from 'services/AwsUploader';

// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next';
import { ManagedUpload } from 'aws-sdk/clients/s3';

import { appConfig } from 'config';

export const config = {
  api: {
    bodyParser: false,
  },
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<string>
): Promise<ManagedUpload.SendData | void> {
  if (req?.method !== 'POST') {
    return res.status(405).send('Method Not Allowed');
  }

  try {
    const { APP_DOMAIN } = appConfig;
    const reqDomain = extractDomain(req.headers.host ?? '');

    // don't forget to add APP_DOMAIN=localhost to your .env.local for localhost development
    if (!APP_DOMAIN.endsWith(reqDomain)) {
      return res.status(403).send('Forbidden');
    }

    const { Key } = await AwsUploader.uploadToBucket(req);

    return res.status(200).json(Key);
  } catch (err) {
    return res
      .status(500)
      .send('An error occurred while uploading image to S3!');
  }
}

'''
'''--- pages/bounties/index.ts ---
import { GetServerSideProps } from 'next';

import { getTranslations } from 'utils/getTranslations';

import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import { BountiesPageProps } from './BountiesPage';

export const getServerSideProps: GetServerSideProps<
  BountiesPageProps
> = async ({ locale = 'en' }) => {
  return {
    props: {
      ...(await getTranslations(locale)),
      ...(await getDefaultAppVersion()),
      bountiesContext: null,
    },
  };
};

export { default } from './BountiesPage';

'''
'''--- pages/cfc-library/[template]/index.ts ---
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';

import { SputnikHttpService } from 'services/sputnik';
import { ACCOUNT_COOKIE } from 'constants/cookies';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import SharedlTemplatePage from './SharedlTemplatePage';

export const getServerSideProps: GetServerSideProps = async ({
  req,
  locale = 'en',
}) => {
  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const accountDaos = account
    ? await SputnikHttpService.getAccountDaos(account)
    : [];

  return {
    props: {
      ...(await getTranslations(locale)),
      accountDaos,
      ...(await getDefaultAppVersion()),
    },
  };
};

export default SharedlTemplatePage;

'''
'''--- pages/cfc-library/index.ts ---
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { SputnikHttpService } from 'services/sputnik';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import CfcLibraryPage from './CfcLibraryPage';

export const getServerSideProps: GetServerSideProps = async ({
  req,
  locale = 'en',
}) => {
  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const accountDaos = account
    ? await SputnikHttpService.getAccountDaos(account)
    : [];

  return {
    props: {
      ...(await getTranslations(locale)),
      accountDaos,
      ...(await getDefaultAppVersion()),
    },
  };
};

export default CfcLibraryPage;

'''
'''--- pages/dao/[dao]/create-draft/index.ts ---
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';
import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

export const getServerSideProps: GetServerSideProps = async ({
  req,
  query,
  locale = 'en',
}) => {
  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const accountId = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const daoId = query.dao as string;

  const daoContext = await getDaoContext(accountId, daoId as string);

  if (!daoContext || !accountId) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      ...(await getDefaultAppVersion()),
    },
  };
};

export { default } from './CreateDraftPage';

'''
'''--- pages/dao/[dao]/dao/index.ts ---
import { GetServerSideProps } from 'next';

import { getDaoContext } from 'features/daos/helpers';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import DaoPage from './DaoPage';

export const getServerSideProps: GetServerSideProps = async ({
  req,
  query,
  locale = 'en',
}) => {
  try {
    const { dao: daoId } = query;

    CookieService.initServerSideCookies(req?.headers.cookie || null);

    const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

    const daoContext = await getDaoContext(account, daoId as string);

    if (!daoContext) {
      return {
        notFound: true,
      };
    }

    return {
      props: {
        ...(await getTranslations(locale)),
        daoContext,
        ...(await getDefaultAppVersion()),
      },
    };
  } catch (e) {
    return {
      notFound: true,
    };
  }
};

export default DaoPage;

'''
'''--- pages/dao/[dao]/delegate/index.ts ---
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';
import { DaoContext } from 'types/context';
import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

export const getServerSideProps: GetServerSideProps<{
  daoContext: DaoContext;
}> = async ({ req, query, locale = 'en' }) => {
  const { dao: daoId } = query;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const daoContext = await getDaoContext(account, daoId as string);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      ...(await getDefaultAppVersion()),
    },
  };
};

export { default } from './DelegatePage';

'''
'''--- pages/dao/[dao]/drafts/[draft]/edit-draft/index.ts ---
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';
import { DraftsService } from 'services/DraftsService';
import { isCouncilUser } from 'astro_2.0/features/DraftComments/helpers';
import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

export const getServerSideProps: GetServerSideProps = async ({
  req,
  query,
  locale = 'en',
}) => {
  const draftService = new DraftsService();

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const accountId = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const daoId = query.dao as string;
  const draftId = query.draft as string;

  const daoContext = await getDaoContext(accountId, daoId as string);

  if (!daoContext || !accountId) {
    return {
      notFound: true,
    };
  }

  const dao = daoContext?.dao;

  const draft = await draftService.getDraft(draftId, dao, accountId);

  const isCouncil = isCouncilUser(dao, accountId || '');

  if (!draft || !daoContext || (draft.proposer !== accountId && !isCouncil)) {
    return {
      props: {
        ...(await getTranslations(locale)),
      },
      redirect: {
        permanent: true,
        destination: `/dao/${daoId}/drafts`,
      },
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      dao,
      daoContext,
      draft,
      ...(await getDefaultAppVersion()),
    },
  };
};

export { default } from './EditDraftPage';

'''
'''--- pages/dao/[dao]/drafts/[draft]/index.ts ---
import { GetServerSideProps } from 'next';
// eslint-disable-next-line camelcase
import { unstable_serialize } from 'swr';

import { CookieService } from 'services/CookieService';
import { DraftsService } from 'services/DraftsService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';
import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';
import { getClient } from 'utils/launchdarkly-server-client';
import { fetcher as getDraft } from 'services/ApiService/hooks/useDraft';

export const getServerSideProps: GetServerSideProps = async ({
  req,
  query,
  locale = 'en',
}) => {
  const draftService = new DraftsService();

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const accountId = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const client = await getClient();
  const flags = await client.allFlagsState({
    key: accountId ?? '',
  });
  const useOpenSearchDataApi = flags.getFlagValue('use-open-search-data-api');

  const daoId = query.dao as string;
  const draftId = query.draft as string;

  const daoContext = await getDaoContext(accountId, daoId as string);

  const dao = daoContext?.dao;

  const draft = useOpenSearchDataApi
    ? await getDraft('draft', daoId, draftId, accountId)
    : await draftService.getDraft(draftId, dao, accountId);

  if (!draft || !daoContext) {
    return {
      props: {
        ...(await getTranslations(locale)),
      },
      redirect: {
        permanent: true,
        destination: `/dao/${daoId}/drafts`,
      },
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      ...(await getDefaultAppVersion()),
      dao,
      draft,
      daoContext,
      fallback: {
        [unstable_serialize(['draft', daoId, draftId, accountId])]: draft,
      },
    },
  };
};

export { default } from './DraftPage';

'''
'''--- pages/dao/[dao]/drafts/index.ts ---
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import { DraftsPageProps } from './DraftsPage';

export const getServerSideProps: GetServerSideProps<DraftsPageProps> = async ({
  req,
  query,
  locale = 'en',
}) => {
  const { dao: daoId } = query;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const daoContext = await getDaoContext(account, daoId as string);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      ...(await getDefaultAppVersion()),
    },
  };
};

export { default } from './DraftsPage';

'''
'''--- pages/dao/[dao]/governance/settings/config/index.ts ---
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import { DaoConfigPageProps } from './DaoConfigPage';

export const getServerSideProps: GetServerSideProps<
  DaoConfigPageProps
> = async ({ req, query, locale = 'en' }) => {
  const { dao: daoId } = query;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const daoContext = await getDaoContext(account, daoId as string);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      ...(await getDefaultAppVersion()),
    },
  };
};

export { default } from './DaoConfigPage';

'''
'''--- pages/dao/[dao]/governance/settings/custom-templates/index.ts ---
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';
import { DaoContext } from 'types/context';
import { SputnikHttpService } from 'services/sputnik';
import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

export const getServerSideProps: GetServerSideProps<{
  daoContext: DaoContext;
}> = async ({ req, query, locale = 'en' }) => {
  const { dao: daoId } = query;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const daoContext = await getDaoContext(account, daoId as string);

  const accountDaos = account
    ? await SputnikHttpService.getAccountDaos(account)
    : [];

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      accountDaos,
      ...(await getDefaultAppVersion()),
    },
  };
};

export { default } from './CustomTemplatesPage';

'''
'''--- pages/dao/[dao]/governance/settings/index.ts ---
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import { SettingsPageProps } from './SettingsPage';

export const getServerSideProps: GetServerSideProps<
  SettingsPageProps
> = async ({ req, query, locale = 'en' }) => {
  const { dao: daoId } = query;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const daoContext = await getDaoContext(account, daoId as string);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      ...(await getDefaultAppVersion()),
    },
  };
};

export { default } from './SettingsPage';

'''
'''--- pages/dao/[dao]/governance/settings/policy/index.ts ---
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';
import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import { DaoPolicyPageProps } from './DaoPolicyPage';

export const getServerSideProps: GetServerSideProps<
  DaoPolicyPageProps
> = async ({ req, query, locale = 'en' }) => {
  const { dao: daoId } = query;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const daoContext = await getDaoContext(account, daoId as string);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      ...(await getDefaultAppVersion()),
    },
  };
};

export { default } from './DaoPolicyPage';

'''
'''--- pages/dao/[dao]/governance/settings/version/index.ts ---
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import { DaoVersionUpdatePageProps } from './DaoVersionUpdatePage';

export const getServerSideProps: GetServerSideProps<
  DaoVersionUpdatePageProps
> = async ({ req, query, locale = 'en' }) => {
  const { dao: daoId } = query;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const daoContext = await getDaoContext(account, daoId as string);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      ...(await getDefaultAppVersion()),
    },
  };
};

export { default } from './DaoVersionUpdatePage';

'''
'''--- pages/dao/[dao]/groups/[group]/index.ts ---
import { GetServerSideProps } from 'next';

import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';

import { CookieService } from 'services/CookieService';
import { SputnikHttpService } from 'services/sputnik';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import { GroupPageProps } from './GroupPage';

export const getServerSideProps: GetServerSideProps<GroupPageProps> = async ({
  req,
  query,
  locale = 'en',
}) => {
  const daoId = query.dao as string;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const [daoContext, membersStats] = await Promise.all([
    getDaoContext(account, daoId),
    SputnikHttpService.getDaoMembersStats(daoId),
  ]);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      membersStats,
      ...(await getDefaultAppVersion()),
    },
  };
};

export { default } from './GroupPage';

'''
'''--- pages/dao/[dao]/proposals/[proposal]/index.ts ---
import { GetServerSideProps } from 'next';
// eslint-disable-next-line camelcase
import { unstable_serialize } from 'swr';

import { SputnikHttpService } from 'services/sputnik';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';
import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';
import { fetcher as getProposal } from 'services/ApiService/hooks/useProposal';
import { getClient } from 'utils/launchdarkly-server-client';

export const getServerSideProps: GetServerSideProps = async ({
  req,
  query,
  locale = 'en',
}) => {
  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const client = await getClient();
  const flags = await client.allFlagsState({
    key: account ?? '',
  });
  const useOpenSearchDataApi = flags.getFlagValue('use-open-search-data-api');

  const daoId = query.dao as string;
  const proposalId = query.proposal as string;

  const [proposal, membersStats, daoContext] = await Promise.all([
    useOpenSearchDataApi
      ? getProposal('proposal', daoId, proposalId)
      : SputnikHttpService.getProposalById(proposalId, account),
    SputnikHttpService.getDaoMembersStats(daoId),
    getDaoContext(account, daoId as string),
  ]);

  const dao = daoContext?.dao;

  if (!daoContext || !proposal) {
    return {
      props: {
        ...(await getTranslations(locale)),
      },
      redirect: {
        permanent: true,
        destination: `/dao/${daoId}/proposals`,
      },
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      dao,
      membersStats,
      daoContext,
      ...(await getDefaultAppVersion()),
      fallback: {
        [unstable_serialize(['proposal', daoId, proposalId])]: proposal,
      },
    },
  };
};

export { default } from './ProposalPage';

'''
'''--- pages/dao/[dao]/proposals/index.ts ---
import { GetServerSideProps } from 'next';
import { getClient } from 'utils/launchdarkly-server-client';
// eslint-disable-next-line camelcase
import { unstable_serialize } from 'swr';

import {
  ProposalCategories,
  ProposalsFeedStatuses,
  ProposalStatuses,
} from 'types/proposal';

import { ACCOUNT_COOKIE } from 'constants/cookies';

import { SputnikHttpService } from 'services/sputnik';
import { CookieService } from 'services/CookieService';
import { LIST_LIMIT_DEFAULT } from 'services/sputnik/constants';
import { getDaoContext } from 'features/daos/helpers';
import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import { fetcher as getProposals } from 'services/ApiService/hooks/useProposals';

export const getServerSideProps: GetServerSideProps = async ({
  req,
  query,
  locale = 'en',
}) => {
  const { status = ProposalStatuses.All, category, dao: daoId } = query;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const client = await getClient();
  const flags = await client.allFlagsState({
    key: account ?? '',
  });
  const useOpenSearchDataApi = flags.getFlagValue('use-open-search-data-api');

  const params = {
    offset: 0,
    limit: LIST_LIMIT_DEFAULT,
    daoId: daoId as string,
    category: category as ProposalCategories,
    status: status as ProposalsFeedStatuses,
    accountId: account,
  };

  const [daoContext, initialProposalsData] = await Promise.all([
    getDaoContext(account, daoId as string),
    useOpenSearchDataApi
      ? getProposals(
          'proposals',
          params.daoId,
          params.status,
          params.category,
          0,
          LIST_LIMIT_DEFAULT,
          params.accountId
        )
      : SputnikHttpService.getProposalsList(params),
  ]);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      initialProposalsData,
      initialProposalsStatusFilterValue: status,
      ...(await getDefaultAppVersion()),
      fallback: {
        [unstable_serialize([
          'proposals',
          params.daoId,
          params.status,
          params.category,
          0,
          LIST_LIMIT_DEFAULT,
          params.accountId,
        ])]: initialProposalsData,
      },
    },
  };
};

export { default } from './ProposalsPage';

'''
'''--- pages/dao/[dao]/tasks/bounties/[bounty]/index.ts ---
import { GetServerSideProps } from 'next';

import { SputnikHttpService } from 'services/sputnik';
import { CookieService } from 'services/CookieService';
import { fetcher as getBountyContext } from 'services/ApiService/hooks/useBounty';

import { ACCOUNT_COOKIE } from 'constants/cookies';

import { getDaoContext } from 'features/daos/helpers';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';
import { getClient } from 'utils/launchdarkly-server-client';

export const getServerSideProps: GetServerSideProps = async ({
  req,
  query,
  locale = 'en',
}) => {
  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const client = await getClient();
  const flags = await client.allFlagsState({
    key: account ?? '',
  });
  const useOpenSearchDataApi = flags.getFlagValue('use-open-search-data-api');

  const daoId = query.dao as string;
  const bountyId = query.bounty as string;

  const [bountyContext, daoContext] = await Promise.all([
    useOpenSearchDataApi
      ? getBountyContext('bounty', bountyId)
      : SputnikHttpService.getBountyContextById(bountyId, account),
    getDaoContext(account, daoId as string),
  ]);

  const dao = daoContext?.dao;

  if (!daoContext || !bountyContext || !dao) {
    return {
      notFound: true,
    };
  }

  const userBountyDoneProposal = bountyContext.bounty?.bountyDoneProposals.find(
    item => item.proposer === account && item.status === 'InProgress'
  );

  let bountyDoneProposal = null;

  if (userBountyDoneProposal) {
    bountyDoneProposal = await SputnikHttpService.getProposalById(
      userBountyDoneProposal.id,
      account
    );
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      dao,
      bountyContext,
      proposal: bountyContext.proposal,
      daoContext,
      bountyDoneProposal,
      ...(await getDefaultAppVersion()),
    },
  };
};

export { default } from './BountyPage';

'''
'''--- pages/dao/[dao]/tasks/bounties/feed/index.ts ---
import { GetServerSideProps } from 'next';
import { SputnikHttpService } from 'services/sputnik';

import { getDaoContext } from 'features/daos/helpers';
import { CookieService } from 'services/CookieService';
import { LIST_LIMIT_DEFAULT } from 'services/sputnik/constants';
import { ACCOUNT_COOKIE } from 'constants/cookies';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import { BountiesFeedPageProps } from './BountiesFeedPage';

export const getServerSideProps: GetServerSideProps<
  BountiesFeedPageProps
> = async ({ req, query, locale = 'en' }) => {
  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const { bountySort, bountyFilter, bountyPhase, dao: daoId } = query;

  const [daoContext, bountiesContext] = await Promise.all([
    getDaoContext(account, daoId as string),
    SputnikHttpService.getBountiesContext(daoId as string, account, {
      bountySort: bountySort ? (bountySort as string) : null,
      bountyFilter: bountyFilter ? (bountyFilter as string) : null,
      bountyPhase: bountyPhase ? (bountyPhase as string) : null,
      offset: 0,
      limit: LIST_LIMIT_DEFAULT,
    }),
  ]);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      bountiesContext,
      ...(await getDefaultAppVersion()),
    },
  };
};

export { default } from './BountiesFeedPage';

'''
'''--- pages/dao/[dao]/tasks/bounties/list/index.ts ---
import { GetServerSideProps } from 'next';
import { SputnikHttpService } from 'services/sputnik';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import { BountiesListPageProps } from './BountiesListPage';

export const getServerSideProps: GetServerSideProps<
  BountiesListPageProps
> = async ({ req, query, locale = 'en' }) => {
  const daoId = query.dao as string;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const [daoContext, bountiesContext] = await Promise.all([
    getDaoContext(account, daoId),
    SputnikHttpService.getBountiesContext(daoId, account, {
      bountySort: query.bountySort ? (query.bountySort as string) : null,
      bountyFilter: query.bountyFilter ? (query.bountyFilter as string) : null,
      bountyPhase: null,
      limit: 1000 + Number((Math.random() * 100).toFixed(0)),
    }),
  ]);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      bountiesContext: bountiesContext?.data || [],
      ...(await getDefaultAppVersion()),
    },
  };
};

export { default } from './BountiesListPage';

'''
'''--- pages/dao/[dao]/tasks/plugins/index.ts ---
import Plugins from 'pages/dao/[dao]/tasks/plugins/PluginsPage';

export default Plugins;

'''
'''--- pages/dao/[dao]/tasks/polls/index.ts ---
import Polls, { PollsPageProps } from 'pages/dao/[dao]/tasks/polls/PollsPage';
// eslint-disable-next-line camelcase
import { unstable_serialize } from 'swr';
import { GetServerSideProps } from 'next';
import { SputnikHttpService } from 'services/sputnik';
import { LIST_LIMIT_DEFAULT } from 'services/sputnik/constants';
import { ProposalCategories, ProposalsFeedStatuses } from 'types/proposal';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';
import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';
import { getClient } from 'utils/launchdarkly-server-client';
import { fetcher as getPolls } from 'services/ApiService/hooks/useProposals';

export default Polls;

export const getServerSideProps: GetServerSideProps<PollsPageProps> = async ({
  query,
  req,
  locale = 'en',
}) => {
  const daoId = query.dao as string;
  const status =
    (query.status as ProposalsFeedStatuses) || ProposalsFeedStatuses.All;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const client = await getClient();
  const flags = await client.allFlagsState({
    key: account ?? '',
  });
  const useOpenSearchDataApi = flags.getFlagValue(
    'default-application-ui-version'
  );

  const [daoContext, initialPollsData] = await Promise.all([
    getDaoContext(account, daoId),
    useOpenSearchDataApi
      ? getPolls(
          'proposals',
          daoId,
          status,
          ProposalCategories.Polls,
          0,
          LIST_LIMIT_DEFAULT,
          account
        )
      : SputnikHttpService.getProposalsList({
          category: ProposalCategories.Polls,
          daoId,
          status,
          offset: 0,
          limit: LIST_LIMIT_DEFAULT,
          accountId: account,
        }),
  ]);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      initialPollsData,
      initialProposalsStatusFilterValue: status,
      ...(await getDefaultAppVersion()),
      fallback: {
        [unstable_serialize([
          'proposals',
          daoId,
          status,
          ProposalCategories.Polls,
          0,
          LIST_LIMIT_DEFAULT,
          account,
        ])]: initialPollsData,
      },
    },
  };
};

'''
'''--- pages/dao/[dao]/treasury/create-governance-token/index.ts ---
import { GetServerSideProps } from 'next';
import { getDaoContext } from 'features/daos/helpers';

import { ACCOUNT_COOKIE } from 'constants/cookies';

import { CookieService } from 'services/CookieService';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import CreateGovernanceToken, {
  GovernanceTokenProps,
} from './CreateGovernanceToken';

export default CreateGovernanceToken;

export const getServerSideProps: GetServerSideProps<
  GovernanceTokenProps
> = async ({ req, query, locale = 'en' }) => {
  const daoId = query.dao as string;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const daoContext = await getDaoContext(account, daoId);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      ...(await getDefaultAppVersion()),
    },
  };
};

'''
'''--- pages/dao/[dao]/treasury/governance-token-info/index.ts ---
import GovernanceTokenInfoPage, {
  GovernanceTokenInfoPageProps,
} from 'pages/dao/[dao]/treasury/governance-token-info/GovernanceTokenInfoPage';
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';
import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

export const getServerSideProps: GetServerSideProps<
  GovernanceTokenInfoPageProps
> = async ({ req, query, locale = 'en' }) => {
  const daoId = query.dao as string;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const daoContext = await getDaoContext(account, daoId);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      ...(await getDefaultAppVersion()),
    },
  };
};

export default GovernanceTokenInfoPage;

'''
'''--- pages/dao/[dao]/treasury/nfts/index.ts ---
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';
import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import { NFTsPageProps } from './NFTs';

export { default } from 'pages/dao/[dao]/treasury/nfts/NFTs';

export const getServerSideProps: GetServerSideProps<NFTsPageProps> = async ({
  req,
  query,
  locale = 'en',
}) => {
  const daoId = query.dao as string;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const daoContext = await getDaoContext(account, daoId);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      ...(await getDefaultAppVersion()),
    },
  };
};

'''
'''--- pages/dao/[dao]/treasury/tokens/index.ts ---
import Tokens, {
  TokensPageProps,
} from 'pages/dao/[dao]/treasury/tokens/TokensPage';
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getDaoContext } from 'features/daos/helpers';
import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

export const getServerSideProps: GetServerSideProps<TokensPageProps> = async ({
  req,
  query,
  locale = 'en',
}) => {
  const daoId = query.dao as string;

  CookieService.initServerSideCookies(req?.headers.cookie || null);

  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const daoContext = await getDaoContext(account, daoId);

  if (!daoContext) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      ...(await getTranslations(locale)),
      daoContext,
      ...(await getDefaultAppVersion()),
    },
  };
};

export default Tokens;

'''
'''--- pages/dao/[dao]/treasury/under-construction/index.ts ---
import { GetServerSideProps } from 'next';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import UnderConstruction from './UnderConstruction';

export const getServerSideProps: GetServerSideProps = async ({
  locale = 'en',
}) => {
  return {
    props: {
      ...(await getTranslations(locale)),
      ...(await getDefaultAppVersion()),
    },
  };
};

export default UnderConstruction;

'''
'''--- pages/discover/index.ts ---
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';

import DiscoverPage from 'pages/discover/DiscoverPage';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

export const getServerSideProps: GetServerSideProps = async ({
  req,
  locale = 'en',
}) => {
  CookieService.initServerSideCookies(req?.headers.cookie || null);

  return {
    props: {
      ...(await getTranslations(locale)),
      ...(await getDefaultAppVersion()),
    },
  };
};

export default DiscoverPage;

'''
'''--- pages/my-account/index.ts ---
import { GetServerSideProps } from 'next';
import nextI18NextConfig from 'next-i18next.config';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';

import { ACCOUNT_COOKIE } from 'constants/cookies';
import { ALL_FEED_URL } from 'constants/routing';

import { CookieService } from 'services/CookieService';
import { NotificationsService } from 'services/NotificationsService';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import MyAccountPage, { MyAccountPageProps } from './MyAccountPage';

export const getServerSideProps: GetServerSideProps<
  MyAccountPageProps
> = async ({ locale = 'en' }) => {
  const accountId = CookieService.get<string>(ACCOUNT_COOKIE);

  if (!accountId) {
    return {
      redirect: {
        permanent: true,
        destination: ALL_FEED_URL,
      },
    };
  }

  const contactsConfig = await NotificationsService.getUserContactConfig(
    accountId
  );

  const notyConfig = await NotificationsService.getNotificationsSettings(
    accountId
  );

  return {
    props: {
      notyConfig: notyConfig[0] || {},
      contactsConfig,
      ...(await serverSideTranslations(locale, ['common'], nextI18NextConfig)),
      ...(await getDefaultAppVersion()),
    },
  };
};

export default MyAccountPage;

'''
'''--- pages/notifications/index.ts ---
import { GetServerSideProps } from 'next';

import { ACCOUNT_COOKIE } from 'constants/cookies';

import { CookieService } from 'services/CookieService';
import { NotificationsService } from 'services/NotificationsService';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

export const getServerSideProps: GetServerSideProps = async ({
  locale = 'en',
}) => {
  try {
    const accountId = CookieService.get<string>(ACCOUNT_COOKIE);

    let config = {};

    if (accountId) {
      config = await NotificationsService.getUserContactConfig(accountId);
    }

    return {
      props: {
        config,
        ...(await getTranslations(locale)),
        ...(await getDefaultAppVersion()),
      },
    };
  } catch (e) {
    return {
      notFound: true,
    };
  }
};

export { default } from './NotificationsPage';

'''
'''--- pages/notifications/settings/index.ts ---
import { GetServerSideProps } from 'next';
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { SputnikHttpService } from 'services/sputnik';
import { ALL_FEED_URL } from 'constants/routing';
import { NotificationsService } from 'services/NotificationsService';
import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';
import { getClient } from 'utils/launchdarkly-server-client';
import { fetcher as getAccountDaos } from 'services/ApiService/hooks/useAccountDaos';

export const getServerSideProps: GetServerSideProps = async ({
  locale = 'en',
}) => {
  const accountId = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  if (!accountId) {
    return {
      redirect: {
        permanent: true,
        destination: ALL_FEED_URL,
      },
    };
  }

  const client = await getClient();
  const flags = await client.allFlagsState({
    key: accountId ?? '',
  });
  const useOpenSearchDataApi = flags.getFlagValue('use-open-search-data-api');

  const [accountDaosResponse, subscribedDaosResponse] =
    await Promise.allSettled([
      useOpenSearchDataApi
        ? getAccountDaos('accountDaos', accountId)
        : SputnikHttpService.getAccountDaos(accountId),
      SputnikHttpService.getAccountDaoSubscriptions(accountId),
    ]);

  const accountDaos =
    accountDaosResponse.status === 'fulfilled' ? accountDaosResponse.value : [];
  const subscriptions =
    subscribedDaosResponse.status === 'fulfilled'
      ? subscribedDaosResponse.value
      : [];

  const accountDaosIds = accountDaos?.map(item => item.id) ?? [];

  const [daosSettings, platformSettings] = await Promise.all([
    NotificationsService.getNotificationsSettings(accountId, accountDaosIds),
    NotificationsService.getNotificationsSettings(accountId),
  ]);

  return {
    props: {
      ...(await getTranslations(locale)),
      ...(await getDefaultAppVersion()),
      myDaos:
        accountDaos?.map(item => {
          return {
            dao: item,
            settings:
              daosSettings.find(daoSetting => daoSetting.daoId === item.id) ??
              null,
          };
        }) ?? [],
      subscribedDaos: subscriptions.map(item => {
        return {
          dao: item.dao,
          settings:
            daosSettings.find(daoSetting => daoSetting.daoId === item.dao.id) ??
            null,
        };
      }),
      platformSettings,
    },
  };
};

export { default } from './NotificationSettings';

'''
'''--- pages/search-results/index.ts ---
import { GetServerSideProps } from 'next';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import SearchResults from './SearchResults';

export default SearchResults;

export const getServerSideProps: GetServerSideProps = async ({
  locale = 'en',
}) => {
  return {
    props: {
      ...(await getTranslations(locale)),
      ...(await getDefaultAppVersion()),
    },
  };
};

'''
'''--- pages/terms-conditions/index.ts ---
import { GetServerSideProps } from 'next';

import { getTranslations } from 'utils/getTranslations';
import { getDefaultAppVersion } from 'utils/getDefaultAppVersion';

import TermsAndConditions from './TermsAndConditions';

export default TermsAndConditions;

export const getServerSideProps: GetServerSideProps = async ({
  locale = 'en',
}) => {
  return {
    props: {
      ...(await getTranslations(locale)),
      ...(await getDefaultAppVersion()),
    },
  };
};

'''
'''--- plugins/css-loader-config.js ---
module.exports = (nextConfig = {}) => {
  return Object.assign({}, nextConfig, {
    webpack: config => {
      const { rules } = config.module;
      // Find the array of "style rules" in the webpack config.
      // This is the array of webpack rules that:
      // - is inside a 'oneOf' block
      // - contains a rule that matches 'file.css'
      const styleRules = (
        rules.find(
          m => m.oneOf && m.oneOf.find(({ test: reg }) => reg.test('file.css'))
        ) || {}
      ).oneOf;
      if (!styleRules) return config;
      // Find all the webpack rules that handle CSS modules
      // Look for rules that match '.module.css' and '.module.scss' but aren't being used to generate
      // error messages.
      const cssModuleRules = [
        styleRules.find(
          ({ test: reg, use }) =>
            reg.test('file.module.css') && use.loader !== 'error-loader'
        ),
        styleRules.find(
          ({ test: reg, use }) =>
            reg.test('file.module.scss') && use.loader !== 'error-loader'
        ),
      ].filter(n => n); // remove 'undefined' values
      // Add the 'localsConvention' config option to the CSS loader config in each of these rules.
      cssModuleRules.forEach(cmr => {
        // Find the item inside the 'use' list that defines css-loader
        const cssLoaderConfig = cmr.use.find(({ loader }) =>
          loader.includes('css-loader')
        );
        if (cssLoaderConfig && cssLoaderConfig.options) {
          // Patch it with the new config
          cssLoaderConfig.options.modules.exportLocalsConvention = 'camelCase';
        }
      });
      return config;
    },
  });
};

'''
'''--- plugins/next-svg-sprites.js ---
const SpriteLoaderPlugin = require('svg-sprite-loader/plugin');
const path = require('path');

module.exports = (nextConfig = {}) => {
  return Object.assign({}, nextConfig, {
    // target: 'serverless',
    reactStrictMode: true,
    webpack: (config, options) => {
      config.module.rules.push({
        test: /\.svg$/,
        include: path.join(process.cwd(), 'assets', 'icons'),

        use: [
          {
            loader: 'svg-sprite-loader',
            options: {
              extract: true,
              publicPath: 'static/',
              outputPath: 'static/',
            },
          },
        ],
      });
      config.module.rules.push({
        test: /\.svg$/,
        include: path.join(process.cwd(), 'assets', 'icons'),
        exclude: /\.colors\.svg$/,

        use: [
          {
            loader: 'svgo-loader',
            options: {
              plugins: [
                {
                  name: 'preset-default',
                  params: {
                    overrides: {
                      // customize default plugin options
                      convertColors: {
                        currentColor: /^((?!(none|white|#fff|#ffffff)).)*$/,
                      },
                    },
                  },
                },
              ],
            },
          },
        ],
      });

      config.module.rules.push({
        test: /\.colors\.svg$/,
        include: path.join(process.cwd(), 'assets', 'icons'),
        use: [
          {
            loader: 'svgo-loader',
          },
        ],
      });

      config.plugins.push(new SpriteLoaderPlugin());

      return config;
    },
  });
};

'''
'''--- public/assets/captcha/bg/F1.svg ---
<svg width="402" height="219" viewBox="0 0 402 219" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_9908_109322)">
<rect width="402" height="219" rx="2.92364" fill="#201F1F"/>
<g opacity="0.1">
<path fill-rule="evenodd" clip-rule="evenodd" d="M196.116 132.478C196.15 135.268 198.379 137.519 201.123 137.519C201.134 137.519 201.144 137.519 201.155 137.519L201.155 137.519C201.144 137.519 201.134 137.519 201.124 137.519C198.39 137.519 196.168 139.753 196.117 142.528L196.116 142.528C196.066 139.762 193.858 137.534 191.137 137.519C193.869 137.504 196.083 135.258 196.116 132.478L196.116 132.478Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M191.109 127.468C191.109 127.468 191.109 127.468 191.109 127.468C193.854 127.468 196.083 125.217 196.116 122.427L196.117 122.427C196.15 125.217 198.379 127.468 201.124 127.468C201.134 127.468 201.144 127.468 201.155 127.468L201.155 127.468C201.144 127.468 201.134 127.468 201.124 127.468C198.39 127.468 196.167 129.702 196.117 132.477L196.116 132.477C196.066 129.702 193.844 127.468 191.109 127.468C191.109 127.468 191.109 127.468 191.109 127.468L191.109 127.468Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M196.135 112.377C196.168 115.153 198.375 117.395 201.101 117.418C198.385 117.44 196.184 119.666 196.135 122.427L196.134 122.427C196.084 119.652 193.861 117.418 191.127 117.418C191.127 117.418 191.127 117.418 191.127 117.418L191.127 117.418C191.127 117.418 191.127 117.418 191.127 117.418C193.872 117.418 196.1 115.167 196.134 112.377L196.135 112.377Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M191.125 107.369C191.125 107.369 191.126 107.369 191.126 107.369C193.87 107.369 196.099 105.117 196.132 102.328L196.133 102.328C196.167 105.117 198.395 107.369 201.14 107.369C201.15 107.369 201.161 107.369 201.171 107.368L201.171 107.369C201.161 107.369 201.15 107.369 201.14 107.369C198.406 107.369 196.184 109.603 196.133 112.377L196.132 112.377C196.082 109.603 193.86 107.369 191.126 107.369C191.126 107.369 191.125 107.369 191.125 107.369L191.125 107.369Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M176.041 142.528C175.991 139.757 173.775 137.526 171.047 137.519C173.786 137.512 176.008 135.264 176.042 132.478L176.042 132.478C176.076 135.268 178.304 137.519 181.049 137.519C181.059 137.519 181.07 137.519 181.08 137.519L181.08 137.519C181.07 137.519 181.059 137.519 181.049 137.519C178.315 137.519 176.093 139.753 176.043 142.528L176.041 142.528Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M186.069 112.473C186.019 109.703 183.804 107.471 181.076 107.464C183.814 107.458 186.036 105.209 186.07 102.424L186.071 102.424C186.104 105.213 188.333 107.464 191.077 107.464C191.088 107.464 191.098 107.464 191.108 107.464L191.108 107.464C191.098 107.464 191.088 107.464 191.077 107.464C188.343 107.464 186.121 109.698 186.071 112.473L186.069 112.473Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M165.979 142.528C165.928 139.757 163.713 137.526 160.985 137.519C163.724 137.512 165.946 135.264 165.979 132.478L165.98 132.478C166.013 135.268 168.242 137.519 170.986 137.519C170.997 137.519 171.007 137.519 171.018 137.519L171.018 137.519C171.007 137.519 170.997 137.519 170.986 137.519C168.253 137.519 166.03 139.753 165.98 142.528L165.979 142.528Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M155.932 142.528C155.882 139.762 153.675 137.534 150.954 137.519C153.686 137.504 155.9 135.258 155.933 132.478L155.933 132.478C155.967 135.268 158.196 137.519 160.94 137.519C160.951 137.519 160.961 137.519 160.972 137.519L160.972 137.519C160.961 137.519 160.951 137.519 160.94 137.519C158.206 137.519 155.984 139.753 155.934 142.528L155.932 142.528Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M160.971 127.468C160.971 127.468 160.971 127.468 160.971 127.468C163.716 127.468 165.944 125.217 165.978 122.427L165.979 122.427C166.012 125.217 168.241 127.468 170.986 127.468C170.996 127.468 171.006 127.468 171.017 127.468L171.017 127.468C171.006 127.468 170.996 127.468 170.986 127.468C168.251 127.468 166.029 129.702 165.979 132.477L165.978 132.477C165.928 129.702 163.705 127.468 160.971 127.468C160.971 127.468 160.971 127.468 160.971 127.468L160.971 127.468Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M181.08 127.468C181.08 127.468 181.081 127.468 181.081 127.468C183.825 127.468 186.054 125.217 186.088 122.427L186.088 122.427C186.122 125.217 188.35 127.468 191.095 127.468C191.105 127.468 191.116 127.468 191.126 127.468L191.126 127.468C191.116 127.468 191.105 127.468 191.095 127.468C188.361 127.468 186.139 129.702 186.089 132.477L186.087 132.477C186.037 129.702 183.815 127.468 181.081 127.468C181.081 127.468 181.08 127.468 181.08 127.468L181.08 127.468Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M155.951 112.377C155.985 115.153 158.191 117.395 160.917 117.418C158.201 117.44 156.001 119.666 155.952 122.427L155.95 122.427C155.9 119.652 153.678 117.418 150.944 117.418C150.944 117.418 150.943 117.418 150.943 117.418L150.943 117.418C150.943 117.418 150.944 117.418 150.944 117.418C153.688 117.418 155.917 115.167 155.95 112.377L155.951 112.377Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M150.943 107.369C153.687 107.368 155.916 105.117 155.949 102.328L155.95 102.328C155.983 105.117 158.212 107.369 160.957 107.369C160.967 107.369 160.978 107.369 160.988 107.368L160.988 107.369C160.978 107.369 160.967 107.369 160.957 107.369C158.223 107.369 156.001 109.603 155.95 112.377L155.949 112.377C155.899 109.603 153.676 107.369 150.943 107.369L150.943 107.369Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M160.988 107.369C160.988 107.369 160.988 107.369 160.988 107.369C163.733 107.369 165.962 105.117 165.995 102.328L165.996 102.328C166.029 105.117 168.258 107.369 171.003 107.369C171.013 107.369 171.023 107.369 171.034 107.368L171.034 107.369C171.023 107.369 171.013 107.369 171.003 107.369C168.269 107.369 166.047 109.603 165.996 112.377L165.995 112.377C165.944 109.603 163.722 107.369 160.988 107.369C160.988 107.369 160.988 107.369 160.988 107.369L160.988 107.369Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M176.042 112.377C176.076 115.153 178.283 117.395 181.008 117.418C178.293 117.44 176.092 119.666 176.043 122.427L176.041 122.427C175.992 119.652 173.769 117.418 171.035 117.418C171.035 117.418 171.035 117.418 171.035 117.418L171.035 117.418C171.035 117.418 171.035 117.418 171.035 117.418C173.779 117.418 176.008 115.167 176.042 112.377L176.042 112.377Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M165.978 112.377C166.012 115.153 168.219 117.395 170.944 117.418C168.229 117.44 166.028 119.666 165.979 122.427L165.977 122.427C165.928 119.652 163.705 117.418 160.971 117.418C160.971 117.418 160.971 117.418 160.971 117.418L160.971 117.418C160.971 117.418 160.971 117.418 160.971 117.418C163.715 117.418 165.944 115.167 165.978 112.377L165.978 112.377Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M186.087 112.377C186.12 115.152 188.325 117.393 191.049 117.418C188.335 117.442 186.136 119.667 186.087 122.427L186.086 122.427C186.036 119.652 183.814 117.418 181.08 117.418L181.08 117.418C183.824 117.417 186.052 115.167 186.086 112.377L186.087 112.377Z" fill="#E8E0FF"/>
<mask id="mask0_9908_109322" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="261" y="162" width="162" height="82">
<path fill-rule="evenodd" clip-rule="evenodd" d="M392.286 202.828C392.353 208.389 396.781 212.879 402.247 212.91C396.802 212.941 392.386 217.397 392.287 222.928L392.283 222.928C392.183 217.392 387.759 212.932 382.308 212.91C387.78 212.887 392.217 208.394 392.284 202.828L392.286 202.828ZM402.366 212.91L402.366 212.91C402.364 212.91 402.363 212.91 402.361 212.91C402.363 212.91 402.364 212.91 402.366 212.91Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M382.231 212.91L382.231 212.91C382.229 212.91 382.227 212.91 382.225 212.91C382.227 212.91 382.229 212.91 382.231 212.91ZM372.151 202.828C372.217 208.389 376.646 212.879 382.111 212.91C376.667 212.941 372.251 217.397 372.151 222.928L372.148 222.928C372.048 217.392 367.624 212.932 362.172 212.91C367.644 212.887 372.082 208.394 372.149 202.828L372.151 202.828Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M362.131 212.91L362.131 212.91C362.129 212.91 362.127 212.91 362.125 212.91C362.127 212.91 362.129 212.91 362.131 212.91ZM352.05 202.828C352.117 208.389 356.546 212.879 362.011 212.91C356.567 212.941 352.151 217.397 352.051 222.928L352.047 222.928C351.948 217.392 347.524 212.932 342.072 212.91C347.544 212.887 351.981 208.394 352.048 202.828L352.05 202.828Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M331.951 162.82C332.018 168.4 336.477 172.902 341.969 172.902C341.99 172.902 342.01 172.902 342.031 172.902L342.031 172.903C342.01 172.902 341.99 172.902 341.969 172.902C336.498 172.902 332.052 177.37 331.952 182.92L331.948 182.92C331.848 177.381 327.419 172.921 321.965 172.902C327.441 172.884 331.882 168.389 331.949 162.82L331.951 162.82Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M321.966 212.91L321.966 212.91C321.964 212.91 321.963 212.91 321.961 212.91C321.963 212.91 321.964 212.91 321.966 212.91ZM311.886 202.828C311.953 208.389 316.381 212.879 321.847 212.91C316.402 212.941 311.987 217.397 311.887 222.928L311.883 222.928C311.783 217.392 307.359 212.932 301.908 212.91C307.38 212.887 311.817 208.394 311.884 202.828L311.886 202.828Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M291.751 202.828C291.817 208.389 296.246 212.879 301.711 212.91C296.267 212.941 291.851 217.397 291.752 222.928L291.748 222.928C291.648 217.392 287.224 212.932 281.772 212.91C287.245 212.887 291.682 208.394 291.749 202.828L291.751 202.828ZM301.831 212.91L301.831 212.91C301.829 212.91 301.827 212.91 301.826 212.91C301.827 212.91 301.829 212.91 301.831 212.91Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.651 202.828C271.717 208.389 276.146 212.879 281.611 212.91C276.167 212.941 271.751 217.397 271.651 222.928L271.648 222.928C271.548 217.392 267.124 212.932 261.672 212.91C267.145 212.887 271.582 208.394 271.649 202.828L271.651 202.828ZM281.731 212.91L281.731 212.91C281.729 212.91 281.727 212.91 281.725 212.91C281.727 212.91 281.729 212.91 281.731 212.91Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M331.985 202.828C332.052 208.393 336.487 212.885 341.958 212.91C336.508 212.934 332.086 217.393 331.986 222.928L331.982 222.928C331.882 217.392 327.458 212.932 322.007 212.91C327.479 212.887 331.916 208.394 331.983 202.828L331.985 202.828ZM342.066 212.91L342.066 212.91C342.06 212.91 342.054 212.91 342.048 212.91C342.054 212.91 342.06 212.91 342.066 212.91Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M352.086 182.727C352.153 188.286 356.58 192.776 362.044 192.808C356.601 192.84 352.186 197.296 352.087 202.827L352.083 202.827C351.984 197.291 347.559 192.831 342.108 192.808C347.579 192.785 352.016 188.292 352.084 182.727L352.086 182.727ZM362.166 192.808L362.166 192.808C362.165 192.808 362.164 192.808 362.163 192.808C362.164 192.808 362.165 192.808 362.166 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M352.085 162.627C352.152 168.207 356.611 172.709 362.102 172.709C362.123 172.709 362.144 172.709 362.165 172.709L362.165 172.709C362.144 172.709 362.123 172.709 362.102 172.709C356.632 172.709 352.186 177.177 352.085 182.727L352.082 182.727C351.981 177.177 347.535 172.709 342.065 172.709L342.065 172.709C347.556 172.709 352.016 168.207 352.083 162.627L352.085 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M372.184 162.627C372.251 168.207 376.71 172.709 382.202 172.709C382.223 172.709 382.244 172.709 382.265 172.708L382.265 172.709C382.244 172.709 382.223 172.709 382.202 172.709C376.731 172.709 372.285 177.177 372.185 182.727L372.181 182.727C372.081 177.177 367.635 172.709 362.165 172.709L362.165 172.709C367.656 172.708 372.115 168.206 372.182 162.627L372.184 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.686 182.727C271.753 188.286 276.18 192.776 281.644 192.808C276.201 192.84 271.786 197.296 271.687 202.827L271.683 202.827C271.584 197.291 267.159 192.831 261.708 192.808C267.18 192.785 271.616 188.292 271.684 182.727L271.686 182.727ZM281.766 192.808L281.766 192.808C281.765 192.808 281.764 192.808 281.763 192.808C281.764 192.808 281.765 192.808 281.766 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.685 162.627C271.752 168.207 276.211 172.709 281.703 172.709C281.723 172.709 281.744 172.709 281.765 172.709L281.765 172.709C281.744 172.709 281.723 172.709 281.702 172.709C276.232 172.709 271.786 177.177 271.686 182.727L271.682 182.727C271.582 177.177 267.135 172.709 261.665 172.709L261.665 172.709C267.156 172.709 271.616 168.207 271.683 162.627L271.685 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M291.784 162.627C291.851 168.207 296.31 172.709 301.802 172.709C301.823 172.709 301.844 172.709 301.865 172.708L301.865 172.709C301.844 172.709 301.823 172.709 301.802 172.709C296.331 172.709 291.885 177.177 291.785 182.727L291.781 182.727C291.681 177.177 287.235 172.709 281.765 172.709L281.765 172.709C287.256 172.708 291.715 168.206 291.782 162.627L291.784 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392.287 182.727C392.354 188.286 396.782 192.776 402.245 192.808C396.802 192.84 392.387 197.296 392.288 202.827L392.284 202.827C392.185 197.29 387.76 192.831 382.309 192.808C387.781 192.785 392.217 188.292 392.285 182.727L392.287 182.727ZM402.367 192.808L402.367 192.808C402.366 192.808 402.365 192.808 402.364 192.808C402.365 192.808 402.366 192.808 402.367 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M372.152 182.727C372.219 188.286 376.647 192.776 382.111 192.808C376.667 192.84 372.252 197.296 372.153 202.827L372.149 202.827C372.05 197.29 367.626 192.831 362.174 192.808C367.646 192.785 372.083 188.292 372.15 182.727L372.152 182.727ZM382.232 192.808L382.232 192.808C382.231 192.808 382.23 192.808 382.229 192.808C382.23 192.808 382.231 192.808 382.232 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392.286 162.627C392.353 168.207 396.813 172.709 402.304 172.709C402.325 172.709 402.346 172.709 402.366 172.708L402.366 172.709C402.346 172.709 402.325 172.709 402.304 172.709C396.834 172.709 392.388 177.177 392.287 182.727L392.284 182.727C392.183 177.177 387.737 172.709 382.267 172.709C382.267 172.709 382.266 172.709 382.266 172.709L382.266 172.709C382.266 172.709 382.267 172.709 382.267 172.709C387.758 172.709 392.217 168.207 392.284 162.627L392.286 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M311.885 182.727C311.953 188.286 316.38 192.776 321.844 192.808C316.4 192.84 311.986 197.296 311.886 202.827L311.883 202.827C311.783 197.29 307.359 192.831 301.907 192.808C307.379 192.785 311.816 188.292 311.884 182.727L311.885 182.727ZM321.965 192.808L321.965 192.808C321.964 192.808 321.963 192.808 321.963 192.808C321.963 192.808 321.964 192.808 321.965 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M291.751 182.727C291.818 188.286 296.245 192.776 301.709 192.808C296.266 192.84 291.851 197.296 291.752 202.827L291.748 202.827C291.649 197.29 287.224 192.831 281.773 192.808C287.244 192.785 291.681 188.292 291.749 182.727L291.751 182.727ZM301.831 192.808L301.831 192.808C301.83 192.808 301.829 192.808 301.828 192.808C301.829 192.808 301.83 192.808 301.831 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M342.065 192.808L342.065 192.808C342.064 192.808 342.062 192.808 342.061 192.808C342.062 192.808 342.064 192.808 342.065 192.808ZM331.984 182.727C332.051 188.287 336.478 192.776 341.942 192.808C336.499 192.84 332.084 197.296 331.985 202.827L331.981 202.827C331.882 197.29 327.457 192.831 322.005 192.808C327.477 192.785 331.914 188.292 331.982 182.727L331.984 182.727Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M311.885 162.627C311.952 168.207 316.411 172.709 321.903 172.709C321.923 172.709 321.944 172.709 321.965 172.709L321.965 172.709C321.944 172.709 321.923 172.709 321.903 172.709C316.432 172.709 311.986 177.177 311.886 182.727L311.882 182.727C311.782 177.177 307.335 172.709 301.865 172.709C301.865 172.709 301.865 172.709 301.865 172.709L301.865 172.709C301.865 172.709 301.865 172.709 301.865 172.709C307.356 172.709 311.816 168.207 311.883 162.627L311.885 162.627Z" fill="#6038D0"/>
</mask>
<g mask="url(#mask0_9908_109322)">
<path d="M324.158 137.959L422.466 162.627L405.106 229.323L261.666 243.027L324.158 137.959Z" fill="#0C422A"/>
</g>
<path fill-rule="evenodd" clip-rule="evenodd" d="M226.7 81.8621C226.767 87.4419 231.226 91.9442 236.718 91.9442C236.739 91.9442 236.759 91.9441 236.78 91.944L236.78 91.9447C236.759 91.9446 236.739 91.9445 236.718 91.9445C231.248 91.9445 226.801 96.412 226.701 101.962L226.697 101.962C226.597 96.4121 222.15 91.9447 216.68 91.9445L216.68 91.9444C222.172 91.9442 226.631 87.4419 226.698 81.8621L226.7 81.8621Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M186.5 81.8621C186.567 87.4419 191.026 91.9442 196.517 91.9442C196.538 91.9442 196.559 91.9441 196.58 91.944L196.58 91.9447C196.559 91.9446 196.538 91.9445 196.517 91.9445C191.047 91.9445 186.601 96.412 186.501 101.962L186.497 101.962C186.396 96.4121 181.95 91.9447 176.48 91.9445L176.48 91.9444C181.972 91.9442 186.431 87.4419 186.498 81.8621L186.5 81.8621Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M166.4 81.8621C166.466 87.4419 170.926 91.9442 176.417 91.9442C176.438 91.9442 176.459 91.9441 176.48 91.944L176.48 91.9447C176.459 91.9446 176.438 91.9445 176.417 91.9445C170.947 91.9445 166.501 96.412 166.401 101.962L166.397 101.962C166.296 96.4121 161.85 91.9447 156.38 91.9445L156.38 91.9444C161.871 91.9442 166.331 87.4419 166.398 81.8621L166.4 81.8621Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M206.635 61.7627C206.702 67.3204 211.126 71.8091 216.588 71.8445C211.147 71.8798 206.736 76.3343 206.636 81.8625L206.632 81.8625C206.532 76.3263 202.108 71.8669 196.657 71.8443C202.129 71.8217 206.566 67.3283 206.633 61.7627L206.635 61.7627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M186.5 61.7627C186.567 67.3204 190.991 71.8091 196.453 71.8444C191.012 71.8797 186.6 76.3342 186.501 81.8625L186.497 81.8625C186.397 76.3264 181.973 71.867 176.522 71.8443C181.994 71.8215 186.431 67.3282 186.498 61.7627L186.5 61.7627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M166.4 61.7627C166.466 67.3204 170.891 71.8091 176.353 71.8445C170.912 71.8798 166.5 76.3343 166.401 81.8625L166.397 81.8625C166.297 76.3263 161.873 71.8669 156.422 71.8443C161.894 71.8217 166.331 67.3283 166.398 61.7627L166.4 61.7627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M226.734 61.7627C226.8 67.3261 231.234 71.8181 236.703 71.8444C231.255 71.8704 226.834 76.3285 226.734 81.8625L226.731 81.8625C226.631 76.3263 222.207 71.8669 216.755 71.8443C222.228 71.8217 226.665 67.3283 226.732 61.7627L226.734 61.7627ZM236.814 71.8444L236.814 71.8443C236.809 71.8443 236.804 71.8443 236.8 71.8444C236.804 71.8444 236.809 71.8444 236.814 71.8444Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M186.5 41.6621C186.567 47.2213 190.994 51.7107 196.458 51.7429C191.015 51.7751 186.6 56.2313 186.501 61.7619L186.497 61.7619C186.398 56.2253 181.973 51.7654 176.522 51.7428C181.993 51.7202 186.43 47.2273 186.498 41.6621L186.5 41.6621ZM196.58 51.7429L196.58 51.7429C196.579 51.7429 196.578 51.7429 196.577 51.7429C196.578 51.7429 196.579 51.7429 196.58 51.7429Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.652 11.6951C271.719 17.2751 276.179 21.7775 281.67 21.7775C281.691 21.7775 281.712 21.7774 281.733 21.7773L281.733 21.7778C281.712 21.7776 281.691 21.7776 281.67 21.7776C276.2 21.7776 271.754 26.245 271.653 31.7949L271.65 31.7949C271.549 26.2563 267.121 21.7958 261.666 21.7776C267.142 21.7593 271.584 17.2638 271.65 11.6951L271.652 11.6951Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M231.452 11.6951C231.519 17.2751 235.979 21.7775 241.47 21.7775C241.491 21.7775 241.512 21.7774 241.533 21.7773L241.533 21.7778C241.512 21.7776 241.491 21.7776 241.47 21.7776C236 21.7776 231.554 26.245 231.453 31.7949L231.449 31.7949C231.349 26.2563 226.921 21.7958 221.466 21.7776C226.942 21.7593 231.384 17.2638 231.45 11.6951L231.452 11.6951Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M211.352 11.6951C211.419 17.2751 215.879 21.7775 221.37 21.7775C221.391 21.7775 221.412 21.7774 221.433 21.7773L221.433 21.7778C221.412 21.7776 221.391 21.7776 221.37 21.7776C215.9 21.7776 211.454 26.245 211.353 31.7949L211.349 31.7949C211.249 26.2563 206.821 21.7958 201.366 21.7776C206.842 21.7593 211.284 17.2638 211.35 11.6951L211.352 11.6951Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M251.588 -8.40503C251.654 -2.84595 256.081 1.64357 261.544 1.67689C256.102 1.71009 251.688 6.16531 251.589 11.6948L251.585 11.6948C251.485 6.15865 247.061 1.69938 241.609 1.6768C247.082 1.65413 251.519 -2.83938 251.586 -8.40503L251.588 -8.40503ZM261.668 1.6769L261.668 1.67689C261.668 1.67689 261.667 1.67689 261.667 1.67689C261.667 1.6769 261.668 1.6769 261.668 1.6769Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M231.452 -8.40503C231.519 -2.84595 235.946 1.64357 241.409 1.67689C235.967 1.71009 231.553 6.16531 231.453 11.6948L231.449 11.6948C231.349 6.15865 226.925 1.69938 221.474 1.6768C226.946 1.65413 231.383 -2.83938 231.45 -8.40503L231.452 -8.40503ZM241.533 1.6769L241.533 1.67689C241.532 1.67689 241.532 1.67689 241.531 1.67689C241.532 1.6769 241.532 1.6769 241.533 1.6769Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M211.352 -8.40503C211.419 -2.84595 215.845 1.64357 221.309 1.67689C215.866 1.71009 211.453 6.16531 211.353 11.6948L211.349 11.6948C211.249 6.15865 206.825 1.69938 201.374 1.6768C206.846 1.65413 211.283 -2.83938 211.35 -8.40503L211.352 -8.40503ZM221.433 1.6769L221.433 1.67689C221.432 1.67689 221.432 1.67689 221.431 1.67689C221.432 1.6769 221.432 1.6769 221.433 1.6769Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.686 -8.40503C271.753 -2.83935 276.19 1.65418 281.662 1.67685C276.211 1.69943 271.787 6.15868 271.687 11.6948L271.683 11.6948C271.584 6.15868 267.159 1.69943 261.708 1.67685C267.18 1.65418 271.618 -2.83935 271.684 -8.40503L271.686 -8.40503ZM281.767 1.67696L281.767 1.67674C281.76 1.67678 281.753 1.67682 281.746 1.67685C281.753 1.67688 281.76 1.67692 281.767 1.67696Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M70.2853 197.711C70.3522 203.291 74.8117 207.793 80.3031 207.793C80.324 207.793 80.3449 207.793 80.3657 207.793L80.3657 207.794C80.3449 207.793 80.324 207.793 80.3031 207.793C74.8329 207.793 70.3866 212.261 70.2863 217.811L70.2824 217.811C70.1823 212.272 65.7538 207.811 60.2988 207.793C65.775 207.775 70.2166 203.28 70.2833 197.711L70.2853 197.711Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M30.0851 197.711C30.152 203.291 34.6115 207.793 40.1029 207.793C40.1238 207.793 40.1447 207.793 40.1655 207.793L40.1655 207.794C40.1447 207.793 40.1238 207.793 40.1029 207.793C34.6327 207.793 30.1864 212.261 30.0861 217.811L30.0822 217.811C29.9821 212.275 25.5582 207.816 20.1072 207.793C25.5795 207.771 30.0166 203.277 30.0832 197.711L30.0851 197.711Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M9.985 197.711C10.0519 203.291 14.5114 207.793 20.0028 207.793C20.0237 207.793 20.0446 207.793 20.0654 207.793L20.0654 207.794C20.0446 207.793 20.0237 207.793 20.0028 207.793C14.5326 207.793 10.0863 212.261 9.98597 217.811L9.98212 217.811C9.88199 212.272 5.45349 207.811 -0.00154539 207.793C5.47466 207.775 9.91633 203.28 9.98302 197.711L9.985 197.711Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M50.2204 177.612C50.2872 183.174 54.7187 187.665 60.1861 187.694C54.7396 187.722 50.3211 192.179 50.2213 197.712L50.2174 197.712C50.1176 192.175 45.6935 187.716 40.2421 187.693C45.7143 187.671 50.1514 183.177 50.2184 177.612L50.2204 177.612ZM60.3008 187.694L60.3008 187.694C60.2973 187.694 60.2938 187.694 60.2903 187.694C60.2938 187.694 60.2973 187.694 60.3008 187.694Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M40.1655 187.694L40.1655 187.693C40.162 187.693 40.1585 187.694 40.1551 187.694C40.1585 187.694 40.162 187.694 40.1655 187.694ZM30.0851 177.612C30.1519 183.174 34.5834 187.665 40.0508 187.694C34.6043 187.722 30.1858 192.179 30.0861 197.712L30.0822 197.712C29.9825 192.176 25.5584 187.716 20.1072 187.693C25.5793 187.671 30.0163 183.177 30.0832 177.612L30.0851 177.612Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M9.985 177.612C10.0518 183.174 14.4833 187.665 19.9507 187.694C14.5042 187.722 10.0857 192.179 9.98595 197.712L9.98206 197.712C9.88228 192.175 5.45814 187.716 0.00676492 187.693C5.47897 187.671 9.91607 183.177 9.98301 177.612L9.985 177.612ZM20.0654 187.694L20.0654 187.694C20.0619 187.694 20.0585 187.694 20.055 187.694C20.0585 187.694 20.0619 187.694 20.0654 187.694Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M70.319 177.612C70.3859 183.174 74.818 187.666 80.286 187.693C74.8388 187.721 70.4196 192.179 70.3199 197.712L70.3162 197.712C70.2164 192.175 65.7923 187.716 60.3409 187.693C65.8131 187.671 70.2502 183.177 70.3171 177.612L70.319 177.612ZM80.3999 187.694L80.3999 187.693C80.3958 187.693 80.3918 187.693 80.3877 187.693C80.3918 187.694 80.3958 187.694 80.3999 187.694Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M30.0851 157.511C30.1522 163.071 34.5796 167.56 40.0435 167.592C34.6002 167.625 30.1855 172.081 30.0861 177.611L30.0823 177.611C29.9828 172.075 25.5586 167.615 20.107 167.592C25.5791 167.57 30.0161 163.077 30.0833 157.511L30.0851 157.511ZM40.165 167.592L40.165 167.592C40.1642 167.592 40.1633 167.592 40.1624 167.592C40.1633 167.592 40.1642 167.592 40.165 167.592Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M228.928 212.695C228.995 218.255 233.422 222.744 238.886 222.777C233.443 222.809 229.028 227.265 228.929 232.795L228.925 232.795C228.825 227.259 224.401 222.799 218.95 222.777C224.422 222.754 228.859 218.261 228.926 212.695L228.928 212.695ZM239.008 222.777L239.008 222.777C239.007 222.777 239.006 222.777 239.005 222.777C239.006 222.777 239.007 222.777 239.008 222.777Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M208.793 212.695C208.859 218.255 213.287 222.744 218.751 222.777C213.308 222.809 208.893 227.265 208.794 232.795L208.79 232.795C208.69 227.259 204.266 222.799 198.814 222.777C204.287 222.754 208.724 218.261 208.791 212.695L208.793 212.695ZM218.873 222.777L218.873 222.777C218.872 222.777 218.871 222.777 218.87 222.777C218.871 222.777 218.872 222.777 218.873 222.777Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M188.693 212.695C188.76 218.255 193.187 222.744 198.651 222.777C193.208 222.809 188.794 227.265 188.694 232.795L188.69 232.795C188.59 227.259 184.166 222.799 178.715 222.777C184.187 222.754 188.624 218.261 188.691 212.695L188.693 212.695ZM198.773 222.777L198.773 222.777C198.772 222.777 198.771 222.777 198.77 222.777C198.771 222.777 198.772 222.777 198.773 222.777Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M188.728 192.594C188.795 198.154 193.223 202.643 198.687 202.675C193.243 202.708 188.828 207.164 188.729 212.694L188.725 212.694C188.626 207.158 184.202 202.698 178.75 202.675C184.222 202.653 188.659 198.16 188.726 192.594L188.728 192.594ZM198.808 202.675L198.808 202.675C198.807 202.675 198.806 202.675 198.805 202.675C198.806 202.675 198.807 202.675 198.808 202.675Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M208.826 172.495C208.893 178.074 213.352 182.576 218.844 182.576C218.865 182.576 218.886 182.576 218.907 182.576L218.907 182.577C218.886 182.577 218.865 182.577 218.844 182.577C213.373 182.577 208.927 187.044 208.827 192.594L208.823 192.594C208.723 187.045 204.277 182.577 198.807 182.577L198.807 182.576C204.298 182.576 208.757 178.074 208.824 172.495L208.826 172.495Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M228.927 192.594C228.995 198.154 233.422 202.643 238.886 202.675C233.442 202.708 229.028 207.164 228.928 212.694L228.925 212.694C228.825 207.158 224.401 202.698 218.949 202.675C224.421 202.653 228.858 198.16 228.926 192.594L228.927 192.594ZM239.007 202.675L239.007 202.675C239.006 202.675 239.006 202.675 239.005 202.675C239.006 202.675 239.006 202.675 239.007 202.675Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M208.793 192.594C208.86 198.154 213.287 202.643 218.751 202.676C213.308 202.708 208.893 207.164 208.794 212.694L208.79 212.694C208.69 207.158 204.266 202.698 198.815 202.676C204.287 202.653 208.724 198.16 208.791 192.594L208.793 192.594ZM218.873 202.676L218.873 202.676C218.872 202.676 218.871 202.676 218.87 202.676C218.871 202.676 218.872 202.676 218.873 202.676Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M259.107 202.676L259.107 202.676C259.106 202.676 259.105 202.676 259.103 202.676C259.105 202.676 259.106 202.676 259.107 202.676ZM249.026 192.594C249.093 198.154 253.521 202.643 258.984 202.676C253.541 202.708 249.126 207.164 249.027 212.694L249.023 212.694C248.924 207.158 244.5 202.698 239.048 202.676C244.52 202.653 248.957 198.16 249.024 192.594L249.026 192.594Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392 132.843C392.034 135.632 394.262 137.883 397.007 137.883C397.017 137.883 397.028 137.883 397.038 137.883L397.038 137.884C397.028 137.884 397.017 137.884 397.007 137.884C394.273 137.884 392.051 140.117 392.001 142.892L391.999 142.892C391.949 140.127 389.742 137.899 387.021 137.884C389.752 137.869 391.966 135.623 392 132.843L392 132.843Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392 122.792C392.034 125.578 394.256 127.826 396.994 127.833C394.266 127.84 392.05 130.071 392.001 132.842L391.999 132.842C391.949 130.071 389.733 127.84 387.005 127.833C389.744 127.826 391.966 125.578 392 122.792L392 122.792ZM397.038 127.833C397.032 127.833 397.026 127.833 397.019 127.833C397.026 127.833 397.032 127.833 397.038 127.833L397.038 127.833Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392.018 122.793L392.02 122.793C392.069 120.031 394.27 117.805 396.985 117.783C394.26 117.761 392.053 115.519 392.019 112.743L392.019 112.743C391.985 115.523 389.771 117.768 387.039 117.783C389.761 117.798 391.968 120.026 392.018 122.793Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M387.009 107.733C387.009 107.733 387.009 107.733 387.009 107.733C389.753 107.733 391.982 105.482 392.016 102.692L392.016 102.692C392.05 105.482 394.279 107.733 397.023 107.733C397.033 107.733 397.044 107.733 397.054 107.733L397.054 107.734C397.044 107.733 397.033 107.733 397.023 107.733C394.289 107.733 392.067 109.967 392.017 112.742L392.015 112.742C391.965 109.967 389.743 107.733 387.009 107.733C387.009 107.733 387.009 107.733 387.009 107.733L387.009 107.733Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M371.925 142.892C371.875 140.127 369.667 137.899 366.946 137.884C369.678 137.869 371.892 135.623 371.925 132.843L371.926 132.843C371.959 135.632 374.188 137.883 376.933 137.883C376.943 137.883 376.954 137.883 376.964 137.883L376.964 137.884C376.953 137.884 376.943 137.884 376.933 137.884C374.199 137.884 371.977 140.117 371.926 142.892L371.925 142.892Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M381.953 112.839C381.903 110.068 379.687 107.837 376.959 107.83C379.698 107.823 381.92 105.575 381.953 102.789L381.954 102.789C381.987 105.579 384.216 107.83 386.961 107.83C386.971 107.83 386.981 107.83 386.992 107.83L386.992 107.83C386.981 107.83 386.971 107.83 386.961 107.83C384.227 107.83 382.004 110.064 381.954 112.839L381.953 112.839Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M361.862 142.892C361.812 140.127 359.604 137.899 356.883 137.884C359.615 137.869 361.829 135.623 361.862 132.843L361.863 132.843C361.897 135.632 364.125 137.883 366.87 137.883C366.88 137.883 366.891 137.883 366.901 137.883L366.901 137.884C366.89 137.884 366.88 137.884 366.87 137.884C364.136 137.884 361.914 140.117 361.863 142.892L361.862 142.892Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M351.816 142.892C351.766 140.127 349.559 137.899 346.837 137.884C349.569 137.869 351.783 135.623 351.817 132.843L351.817 132.843C351.851 135.632 354.079 137.883 356.824 137.883C356.834 137.883 356.845 137.883 356.855 137.883L356.855 137.884C356.845 137.884 356.834 137.884 356.824 137.884C354.09 137.884 351.868 140.117 351.818 142.892L351.816 142.892Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M361.862 122.792C361.896 125.578 364.118 127.826 366.856 127.833C364.128 127.84 361.912 130.071 361.862 132.842L361.861 132.842C361.811 130.071 359.595 127.84 356.867 127.833C359.606 127.826 361.828 125.578 361.861 122.792L361.862 122.792ZM366.9 127.833C366.894 127.833 366.887 127.833 366.881 127.833C366.887 127.833 366.894 127.833 366.9 127.833L366.9 127.833Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M381.97 132.842C381.92 130.071 379.705 127.84 376.976 127.833C379.715 127.826 381.937 125.578 381.971 122.792L381.971 122.792C382.005 125.582 384.234 127.833 386.978 127.833C386.989 127.833 386.999 127.833 387.009 127.833L387.009 127.833C386.999 127.833 386.989 127.833 386.978 127.833C384.244 127.833 382.022 130.067 381.972 132.842L381.97 132.842Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M351.834 122.793L351.836 122.793C351.886 120.031 354.086 117.805 356.802 117.783C354.076 117.761 351.869 115.519 351.836 112.743L351.835 112.743C351.801 115.523 349.587 117.768 346.856 117.783C349.577 117.798 351.785 120.027 351.834 122.793Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M346.826 107.733C349.57 107.733 351.799 105.482 351.833 102.692L351.833 102.692C351.867 105.482 354.096 107.733 356.84 107.733C356.851 107.733 356.861 107.733 356.872 107.733L356.872 107.733C356.861 107.733 356.851 107.733 356.84 107.733C354.106 107.733 351.884 109.967 351.834 112.742L351.832 112.742C351.782 109.967 349.56 107.733 346.826 107.733L346.826 107.733Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M356.872 107.733C356.872 107.733 356.872 107.733 356.872 107.733C359.617 107.733 361.845 105.482 361.879 102.692L361.88 102.692C361.913 105.482 364.142 107.733 366.886 107.733C366.897 107.733 366.907 107.733 366.917 107.733L366.917 107.733C366.907 107.733 366.897 107.733 366.886 107.733C364.152 107.733 361.93 109.967 361.88 112.742L361.878 112.742C361.828 109.967 359.606 107.733 356.872 107.733C356.872 107.733 356.872 107.733 356.872 107.733L356.872 107.733Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M371.926 122.793L371.927 122.793C371.977 120.031 374.177 117.805 376.893 117.783C374.167 117.761 371.96 115.519 371.927 112.743L371.926 112.743C371.893 115.523 369.679 117.768 366.947 117.783C369.668 117.798 371.876 120.026 371.926 122.793Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M361.863 112.743C361.897 115.519 364.104 117.761 366.83 117.783C364.114 117.805 361.913 120.031 361.864 122.793L361.862 122.793C361.813 120.026 359.605 117.798 356.883 117.783C359.615 117.768 361.829 115.523 361.863 112.743L361.863 112.743Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M381.97 112.743C382.003 115.517 384.208 117.759 386.932 117.783C384.218 117.807 382.02 120.032 381.97 122.793L381.969 122.793C381.919 120.026 379.712 117.798 376.99 117.783C379.722 117.768 381.936 115.523 381.969 112.743L381.97 112.743Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M256.448 119.503C256.398 116.732 254.183 114.501 251.454 114.494C254.193 114.487 256.415 112.239 256.449 109.453L256.449 109.453C256.483 112.243 258.712 114.494 261.456 114.494C261.467 114.494 261.477 114.494 261.487 114.494L261.487 114.494C261.477 114.494 261.467 114.494 261.456 114.494C258.722 114.494 256.5 116.728 256.45 119.503L256.448 119.503Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M236.339 119.503C236.289 116.737 234.082 114.509 231.36 114.494C234.092 114.479 236.306 112.234 236.339 109.453L236.34 109.453C236.374 112.243 238.602 114.494 241.347 114.494C241.357 114.494 241.368 114.494 241.378 114.494L241.378 114.494C241.368 114.494 241.357 114.494 241.347 114.494C238.613 114.494 236.391 116.728 236.341 119.503L236.339 119.503Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M256.451 99.4033C256.484 102.181 258.694 104.425 261.423 104.444C258.705 104.463 256.501 106.69 256.451 109.453L256.45 109.453C256.4 106.678 254.177 104.444 251.443 104.444C251.443 104.444 251.443 104.444 251.443 104.444L251.443 104.444C251.443 104.444 251.443 104.444 251.443 104.444C254.188 104.444 256.417 102.193 256.45 99.4033L256.451 99.4033Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M246.388 99.4033C246.421 102.181 248.631 104.425 251.36 104.444C248.642 104.463 246.438 106.69 246.388 109.453L246.387 109.453C246.337 106.678 244.114 104.444 241.38 104.444C241.38 104.444 241.38 104.444 241.38 104.444L241.38 104.444C241.38 104.444 241.38 104.444 241.38 104.444C244.125 104.444 246.354 102.193 246.387 99.4033L246.388 99.4033Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M236.341 99.4033C236.375 102.181 238.585 104.425 241.313 104.444C238.595 104.463 236.392 106.69 236.342 109.453L236.34 109.453C236.29 106.678 234.068 104.444 231.334 104.444L231.334 104.444C234.079 104.444 236.307 102.193 236.341 99.4033L236.341 99.4033Z" fill="white"/>
<path d="M372.968 144.737C374.149 136.269 370.248 127.466 362.106 118.787C353.965 110.11 341.609 101.585 325.953 93.6853C294.643 77.887 250.182 64.6125 199.992 57.6149C149.803 50.6173 103.406 51.224 68.9693 57.8556C51.7496 61.1717 37.533 65.9917 27.3291 72.1111C17.1231 78.2319 10.9632 85.6319 9.78254 94.1002C8.60185 102.569 12.5026 111.371 20.6453 120.05C28.7861 128.727 41.1422 137.252 56.7981 145.152C88.108 160.95 132.569 174.225 182.759 181.222C232.948 188.22 279.345 187.613 313.782 180.982C331.001 177.666 345.218 172.846 355.422 166.726C365.628 160.605 371.788 153.205 372.968 144.737Z" stroke="white" stroke-width="0.452752"/>
<path opacity="0.5" d="M382.789 60.2398C380.568 51.9505 373.34 45.385 362.087 40.6324C350.837 35.8812 335.603 32.9596 317.452 31.9375C281.15 29.8935 233.231 35.449 182.302 49.0953C131.374 62.7416 87.0964 81.89 56.6806 101.811C41.4716 111.772 29.7396 121.919 22.3726 131.659C15.0035 141.401 12.0264 150.701 14.2476 158.99C16.4687 167.28 23.6969 173.845 34.95 178.598C46.1996 183.349 61.4335 186.271 79.5854 187.293C115.887 189.337 163.806 183.781 214.735 170.135C265.663 156.489 309.94 137.34 340.356 117.419C355.565 107.458 367.297 97.3111 374.664 87.5716C382.033 77.8292 385.01 68.5292 382.789 60.2398Z" stroke="white" stroke-width="0.452752"/>
<path opacity="0.3" d="M428.452 95.4672C427.229 64.8461 398.712 38.1439 353.42 19.7658C308.149 1.39636 246.204 -8.61602 178.321 -5.90554C110.437 -3.19506 49.4881 11.7242 5.82558 33.6446C-37.8573 55.5753 -64.1548 84.4662 -62.9321 115.087C-61.7095 145.708 -33.1923 172.411 12.1001 190.789C57.3713 209.158 119.315 219.171 187.199 216.46C255.083 213.75 316.032 198.83 359.694 176.91C403.377 154.979 429.675 126.088 428.452 95.4672Z" stroke="white" stroke-width="0.452752"/>
<circle cx="77.0202" cy="153.728" r="3.62201" transform="rotate(-18.2805 77.0202 153.728)" fill="#FF8743"/>
<circle cx="-0.233638" cy="185.431" r="4.82935" fill="#6038D0"/>
<circle cx="278.931" cy="149.486" r="2.41467" transform="rotate(-18.2805 278.931 149.486)" fill="#19D992"/>
<circle cx="195.625" cy="57.125" r="2.41467" transform="rotate(-18.2805 195.625 57.125)" fill="#19D992"/>
<circle cx="140.389" cy="184.499" r="2.41467" transform="rotate(-18.2805 140.389 184.499)" fill="#19D992"/>
<circle cx="377.361" cy="82.511" r="4.82935" transform="rotate(-18.2805 377.361 82.511)" fill="#6038D0"/>
<circle cx="58.0204" cy="97.6028" r="4.82935" transform="rotate(-18.2805 58.0204 97.6028)" fill="#6038D0"/>
<circle cx="110.524" cy="52.9154" r="3.62201" transform="rotate(-18.2805 110.524 52.9154)" fill="#FF8743"/>
<circle cx="315.771" cy="180.893" r="3.62201" transform="rotate(-18.2805 315.771 180.893)" fill="#FF8743"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M315.315 57.093C315.343 59.3834 317.162 61.2341 319.41 61.2561C317.17 61.2779 315.357 63.1148 315.316 65.3933L315.314 65.3933C315.273 63.1044 313.443 61.2612 311.189 61.256C313.451 61.2507 315.287 59.3937 315.314 57.093L315.315 57.093Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M348.819 131.948C348.847 134.239 350.666 136.089 352.914 136.111C350.674 136.133 348.861 137.97 348.82 140.249L348.818 140.249C348.777 137.96 346.947 136.116 344.693 136.111C346.955 136.106 348.791 134.249 348.818 131.948L348.819 131.948Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M72.3388 32.0408C72.3664 34.3312 74.1855 36.1819 76.4336 36.2038C74.1939 36.2257 72.3801 38.0626 72.3392 40.3411L72.3375 40.3411C72.2965 38.0521 70.466 36.2088 68.2121 36.2037C70.4744 36.1986 72.3101 34.3416 72.3379 32.0408L72.3388 32.0408Z" fill="white"/>
<mask id="mask1_9908_109322" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="-89" y="-9" width="162" height="81">
<path fill-rule="evenodd" clip-rule="evenodd" d="M42.546 51.8943C42.613 57.4741 47.0725 61.9764 52.5639 61.9764C52.5848 61.9764 52.6056 61.9763 52.6265 61.9762L52.6265 61.9769C52.6056 61.9768 52.5848 61.9767 52.5639 61.9767C47.0937 61.9767 42.6475 66.4442 42.547 71.9941L42.5431 71.9941C42.4426 66.4443 37.9966 61.9769 32.5266 61.9766C38.0179 61.9764 42.4772 57.4741 42.544 51.8943L42.546 51.8943Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M62.611 51.8943C62.6779 57.4741 67.1374 61.9764 72.6288 61.9764C72.6497 61.9764 72.6706 61.9763 72.6914 61.9762L72.6914 61.9769C72.6706 61.9768 72.6497 61.9767 72.6288 61.9767C67.1587 61.9767 62.7124 66.4442 62.612 71.9941L62.608 71.9941C62.5076 66.4443 58.0616 61.9769 52.5916 61.9766C58.0829 61.9764 62.5422 57.4741 62.609 51.8943L62.611 51.8943Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M62.611 -8.21314C62.678 -2.63337 67.1375 1.8688 72.6288 1.8688C72.6497 1.8688 72.6706 1.86874 72.6914 1.86861L72.6914 1.86906C72.6706 1.86893 72.6497 1.86887 72.6288 1.86887C67.1585 1.86887 62.7122 6.3366 62.6119 11.8867L62.6081 11.8867C62.5081 6.34792 58.0797 1.8871 52.6247 1.86893C58.1007 1.85064 62.5422 -2.64466 62.609 -8.21314L62.611 -8.21314Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.4108 51.8943C22.4777 57.4741 26.9372 61.9764 32.4286 61.9764C32.4495 61.9764 32.4704 61.9763 32.4912 61.9762L32.4912 61.9769C32.4704 61.9768 32.4495 61.9767 32.4286 61.9767C26.9585 61.9767 22.5122 66.4442 22.4118 71.9941L22.4078 71.9941C22.3074 66.4443 17.8614 61.9768 12.3914 61.9766C17.8827 61.9764 22.342 57.4741 22.4088 51.8943L22.4108 51.8943Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.31069 51.8943C2.3776 57.4741 6.83711 61.9764 12.3285 61.9764C12.3494 61.9764 12.3703 61.9763 12.3911 61.9762L12.3911 61.9769C12.3703 61.9768 12.3494 61.9767 12.3285 61.9767C6.85836 61.9767 2.41212 66.4442 2.31166 71.9941L2.30772 71.9941C2.2073 66.4443 -2.23872 61.9769 -7.70872 61.9766C-2.21743 61.9764 2.24189 57.4741 2.30869 51.8943L2.31069 51.8943Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M42.5462 31.7947C42.6129 37.3524 47.0375 41.8411 52.499 41.8765C47.0584 41.9117 42.6468 46.3662 42.5472 51.8945L42.5433 51.8945C42.4435 46.3583 38.0194 41.8989 32.568 41.8763C38.0402 41.8536 42.4773 37.3602 42.5442 31.7947L42.5462 31.7947Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.411 31.7947C22.4777 37.3524 26.9023 41.8411 32.3638 41.8765C26.9232 41.9117 22.5116 46.3662 22.4119 51.8945L22.408 51.8945C22.3083 46.3583 17.8841 41.8989 12.4327 41.8763C17.9049 41.8536 22.342 37.3602 22.409 31.7947L22.411 31.7947Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.31087 31.7947C2.37758 37.3524 6.80216 41.8411 12.2637 41.8765C6.82306 41.9117 2.41146 46.3662 2.31183 51.8945L2.30795 51.8945C2.2082 46.3583 -2.21595 41.8989 -7.66734 41.8763C-2.19515 41.8536 2.24195 37.3602 2.3089 31.7947L2.31087 31.7947Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M62.6452 31.7947C62.7121 37.3585 67.1464 41.8508 72.6162 41.8763C67.1672 41.9017 62.7458 46.36 62.6461 51.8945L62.6424 51.8945C62.5426 46.3583 58.1185 41.8989 52.6671 41.8763C58.1393 41.8536 62.5764 37.3602 62.6433 31.7947L62.6452 31.7947ZM72.7261 41.8764L72.7261 41.8762C72.7207 41.8763 72.7152 41.8763 72.7098 41.8763C72.7152 41.8764 72.7207 41.8764 72.7261 41.8764Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.34589 11.6941C2.41318 17.2532 6.84054 21.7425 12.3043 21.7748C6.86076 21.8071 2.44595 26.2633 2.34681 31.7939L2.34302 31.7939C2.24377 26.2573 -2.18045 21.7975 -7.63205 21.7747C-2.16029 21.752 2.27649 17.2591 2.34395 11.6941L2.34589 11.6941ZM12.4263 21.7749L12.4263 21.7748C12.4252 21.7748 12.4242 21.7748 12.4232 21.7748C12.4242 21.7748 12.4252 21.7748 12.4263 21.7749Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.3449 -8.40625C2.41202 -2.82659 6.87145 1.67547 12.3627 1.67547C12.3836 1.67547 12.4045 1.67541 12.4253 1.67528L12.4253 1.67602C12.4044 1.67589 12.3836 1.67583 12.3627 1.67583C6.89241 1.67583 2.4461 6.14352 2.34582 11.6936L2.34205 11.6936C2.24177 6.14362 -2.20438 1.67599 -7.67454 1.67583L-7.67454 1.67547C-2.18338 1.67531 2.27589 -2.82669 2.34301 -8.40625L2.3449 -8.40625Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.444 -8.40625C22.5111 -2.82659 26.9706 1.67547 32.4619 1.67547C32.4829 1.67547 32.5039 1.6754 32.5249 1.67527L32.5249 1.67603C32.5039 1.67589 32.4829 1.67583 32.4619 1.67583C26.9916 1.67583 22.5453 6.14352 22.445 11.6936L22.4412 11.6936C22.3409 6.14377 17.895 1.67623 12.4251 1.67583L12.4251 1.67547C17.916 1.67507 22.3751 -2.82684 22.4422 -8.40625L22.444 -8.40625Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M42.5455 11.6941C42.6127 17.2533 47.0401 21.7426 52.5039 21.7749C47.0604 21.8072 42.6456 26.2633 42.5464 31.7939L42.5427 31.7939C42.4434 26.2574 38.0192 21.7975 32.5676 21.7748C38.0394 21.752 42.4762 17.2592 42.5436 11.6941L42.5455 11.6941ZM52.6255 21.7749L52.6255 21.7749C52.6246 21.7749 52.6237 21.7749 52.6228 21.7749C52.6237 21.7749 52.6246 21.7749 52.6255 21.7749Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.4107 11.6941C22.478 17.2533 26.9054 21.7426 32.3691 21.7749C26.9256 21.8072 22.5109 26.2633 22.4117 31.7939L22.408 31.7939C22.3087 26.2574 17.8845 21.7975 12.4329 21.7748C17.9047 21.752 22.3415 17.2592 22.4089 11.6941L22.4107 11.6941ZM32.4907 21.7749L32.4907 21.7749C32.4898 21.7749 32.4889 21.7749 32.488 21.7749C32.4889 21.7749 32.4898 21.7749 32.4907 21.7749Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M72.7256 21.7749L72.7256 21.7749C72.7242 21.7749 72.7228 21.7749 72.7215 21.7749C72.7228 21.7749 72.7242 21.7749 72.7256 21.7749ZM62.6442 11.6941C62.7114 17.2533 67.1388 21.7426 72.6026 21.7749C67.1591 21.8072 62.7443 26.2633 62.6451 31.7939L62.6414 31.7939C62.5421 26.2574 58.1179 21.7975 52.6663 21.7748C58.1381 21.752 62.5749 17.2592 62.6423 11.6941L62.6442 11.6941Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M42.5455 -8.40625C42.6126 -2.82658 47.072 1.67548 52.5633 1.67548C52.5841 1.67548 52.6048 1.67542 52.6255 1.67529L52.6255 1.67603C52.6048 1.67591 52.5841 1.67584 52.5633 1.67584C47.093 1.67584 42.6467 6.14352 42.5465 11.6936L42.5427 11.6936C42.4424 6.14353 37.9961 1.67584 32.5258 1.67584C32.5258 1.67584 32.5257 1.67584 32.5257 1.67584L32.5257 1.67548C32.5257 1.67548 32.5258 1.67548 32.5258 1.67548C38.0171 1.67548 42.4765 -2.82658 42.5436 -8.40625L42.5455 -8.40625Z" fill="#6038D0"/>
</mask>
<g mask="url(#mask1_9908_109322)">
<path d="M-111 -46L52.1755 -14.5709L34.8164 52.1245L-40.8327 69.6664L-111 -46Z" fill="#6038D0"/>
</g>
</g>
</g>
<defs>
<clipPath id="clip0_9908_109322">
<rect width="402" height="219" rx="2.92364" fill="white"/>
</clipPath>
</defs>
</svg>

'''
'''--- public/assets/captcha/bg/F2.svg ---
<svg width="402" height="219" viewBox="0 0 402 219" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_9908_109322)">
<rect width="402" height="219" rx="2.92364" fill="#201F1F"/>
<g opacity="0.1">
<path fill-rule="evenodd" clip-rule="evenodd" d="M196.116 132.478C196.15 135.268 198.379 137.519 201.123 137.519C201.134 137.519 201.144 137.519 201.155 137.519L201.155 137.519C201.144 137.519 201.134 137.519 201.124 137.519C198.39 137.519 196.168 139.753 196.117 142.528L196.116 142.528C196.066 139.762 193.858 137.534 191.137 137.519C193.869 137.504 196.083 135.258 196.116 132.478L196.116 132.478Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M191.109 127.468C191.109 127.468 191.109 127.468 191.109 127.468C193.854 127.468 196.083 125.217 196.116 122.427L196.117 122.427C196.15 125.217 198.379 127.468 201.124 127.468C201.134 127.468 201.144 127.468 201.155 127.468L201.155 127.468C201.144 127.468 201.134 127.468 201.124 127.468C198.39 127.468 196.167 129.702 196.117 132.477L196.116 132.477C196.066 129.702 193.844 127.468 191.109 127.468C191.109 127.468 191.109 127.468 191.109 127.468L191.109 127.468Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M196.135 112.377C196.168 115.153 198.375 117.395 201.101 117.418C198.385 117.44 196.184 119.666 196.135 122.427L196.134 122.427C196.084 119.652 193.861 117.418 191.127 117.418C191.127 117.418 191.127 117.418 191.127 117.418L191.127 117.418C191.127 117.418 191.127 117.418 191.127 117.418C193.872 117.418 196.1 115.167 196.134 112.377L196.135 112.377Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M191.125 107.369C191.125 107.369 191.126 107.369 191.126 107.369C193.87 107.369 196.099 105.117 196.132 102.328L196.133 102.328C196.167 105.117 198.395 107.369 201.14 107.369C201.15 107.369 201.161 107.369 201.171 107.368L201.171 107.369C201.161 107.369 201.15 107.369 201.14 107.369C198.406 107.369 196.184 109.603 196.133 112.377L196.132 112.377C196.082 109.603 193.86 107.369 191.126 107.369C191.126 107.369 191.125 107.369 191.125 107.369L191.125 107.369Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M176.041 142.528C175.991 139.757 173.775 137.526 171.047 137.519C173.786 137.512 176.008 135.264 176.042 132.478L176.042 132.478C176.076 135.268 178.304 137.519 181.049 137.519C181.059 137.519 181.07 137.519 181.08 137.519L181.08 137.519C181.07 137.519 181.059 137.519 181.049 137.519C178.315 137.519 176.093 139.753 176.043 142.528L176.041 142.528Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M186.069 112.473C186.019 109.703 183.804 107.471 181.076 107.464C183.814 107.458 186.036 105.209 186.07 102.424L186.071 102.424C186.104 105.213 188.333 107.464 191.077 107.464C191.088 107.464 191.098 107.464 191.108 107.464L191.108 107.464C191.098 107.464 191.088 107.464 191.077 107.464C188.343 107.464 186.121 109.698 186.071 112.473L186.069 112.473Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M165.979 142.528C165.928 139.757 163.713 137.526 160.985 137.519C163.724 137.512 165.946 135.264 165.979 132.478L165.98 132.478C166.013 135.268 168.242 137.519 170.986 137.519C170.997 137.519 171.007 137.519 171.018 137.519L171.018 137.519C171.007 137.519 170.997 137.519 170.986 137.519C168.253 137.519 166.03 139.753 165.98 142.528L165.979 142.528Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M155.932 142.528C155.882 139.762 153.675 137.534 150.954 137.519C153.686 137.504 155.9 135.258 155.933 132.478L155.933 132.478C155.967 135.268 158.196 137.519 160.94 137.519C160.951 137.519 160.961 137.519 160.972 137.519L160.972 137.519C160.961 137.519 160.951 137.519 160.94 137.519C158.206 137.519 155.984 139.753 155.934 142.528L155.932 142.528Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M160.971 127.468C160.971 127.468 160.971 127.468 160.971 127.468C163.716 127.468 165.944 125.217 165.978 122.427L165.979 122.427C166.012 125.217 168.241 127.468 170.986 127.468C170.996 127.468 171.006 127.468 171.017 127.468L171.017 127.468C171.006 127.468 170.996 127.468 170.986 127.468C168.251 127.468 166.029 129.702 165.979 132.477L165.978 132.477C165.928 129.702 163.705 127.468 160.971 127.468C160.971 127.468 160.971 127.468 160.971 127.468L160.971 127.468Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M181.08 127.468C181.08 127.468 181.081 127.468 181.081 127.468C183.825 127.468 186.054 125.217 186.088 122.427L186.088 122.427C186.122 125.217 188.35 127.468 191.095 127.468C191.105 127.468 191.116 127.468 191.126 127.468L191.126 127.468C191.116 127.468 191.105 127.468 191.095 127.468C188.361 127.468 186.139 129.702 186.089 132.477L186.087 132.477C186.037 129.702 183.815 127.468 181.081 127.468C181.081 127.468 181.08 127.468 181.08 127.468L181.08 127.468Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M155.951 112.377C155.985 115.153 158.191 117.395 160.917 117.418C158.201 117.44 156.001 119.666 155.952 122.427L155.95 122.427C155.9 119.652 153.678 117.418 150.944 117.418C150.944 117.418 150.943 117.418 150.943 117.418L150.943 117.418C150.943 117.418 150.944 117.418 150.944 117.418C153.688 117.418 155.917 115.167 155.95 112.377L155.951 112.377Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M150.943 107.369C153.687 107.368 155.916 105.117 155.949 102.328L155.95 102.328C155.983 105.117 158.212 107.369 160.957 107.369C160.967 107.369 160.978 107.369 160.988 107.368L160.988 107.369C160.978 107.369 160.967 107.369 160.957 107.369C158.223 107.369 156.001 109.603 155.95 112.377L155.949 112.377C155.899 109.603 153.676 107.369 150.943 107.369L150.943 107.369Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M160.988 107.369C160.988 107.369 160.988 107.369 160.988 107.369C163.733 107.369 165.962 105.117 165.995 102.328L165.996 102.328C166.029 105.117 168.258 107.369 171.003 107.369C171.013 107.369 171.023 107.369 171.034 107.368L171.034 107.369C171.023 107.369 171.013 107.369 171.003 107.369C168.269 107.369 166.047 109.603 165.996 112.377L165.995 112.377C165.944 109.603 163.722 107.369 160.988 107.369C160.988 107.369 160.988 107.369 160.988 107.369L160.988 107.369Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M176.042 112.377C176.076 115.153 178.283 117.395 181.008 117.418C178.293 117.44 176.092 119.666 176.043 122.427L176.041 122.427C175.992 119.652 173.769 117.418 171.035 117.418C171.035 117.418 171.035 117.418 171.035 117.418L171.035 117.418C171.035 117.418 171.035 117.418 171.035 117.418C173.779 117.418 176.008 115.167 176.042 112.377L176.042 112.377Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M165.978 112.377C166.012 115.153 168.219 117.395 170.944 117.418C168.229 117.44 166.028 119.666 165.979 122.427L165.977 122.427C165.928 119.652 163.705 117.418 160.971 117.418C160.971 117.418 160.971 117.418 160.971 117.418L160.971 117.418C160.971 117.418 160.971 117.418 160.971 117.418C163.715 117.418 165.944 115.167 165.978 112.377L165.978 112.377Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M186.087 112.377C186.12 115.152 188.325 117.393 191.049 117.418C188.335 117.442 186.136 119.667 186.087 122.427L186.086 122.427C186.036 119.652 183.814 117.418 181.08 117.418L181.08 117.418C183.824 117.417 186.052 115.167 186.086 112.377L186.087 112.377Z" fill="#E8E0FF"/>
<mask id="mask0_9908_109322" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="261" y="162" width="162" height="82">
<path fill-rule="evenodd" clip-rule="evenodd" d="M392.286 202.828C392.353 208.389 396.781 212.879 402.247 212.91C396.802 212.941 392.386 217.397 392.287 222.928L392.283 222.928C392.183 217.392 387.759 212.932 382.308 212.91C387.78 212.887 392.217 208.394 392.284 202.828L392.286 202.828ZM402.366 212.91L402.366 212.91C402.364 212.91 402.363 212.91 402.361 212.91C402.363 212.91 402.364 212.91 402.366 212.91Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M382.231 212.91L382.231 212.91C382.229 212.91 382.227 212.91 382.225 212.91C382.227 212.91 382.229 212.91 382.231 212.91ZM372.151 202.828C372.217 208.389 376.646 212.879 382.111 212.91C376.667 212.941 372.251 217.397 372.151 222.928L372.148 222.928C372.048 217.392 367.624 212.932 362.172 212.91C367.644 212.887 372.082 208.394 372.149 202.828L372.151 202.828Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M362.131 212.91L362.131 212.91C362.129 212.91 362.127 212.91 362.125 212.91C362.127 212.91 362.129 212.91 362.131 212.91ZM352.05 202.828C352.117 208.389 356.546 212.879 362.011 212.91C356.567 212.941 352.151 217.397 352.051 222.928L352.047 222.928C351.948 217.392 347.524 212.932 342.072 212.91C347.544 212.887 351.981 208.394 352.048 202.828L352.05 202.828Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M331.951 162.82C332.018 168.4 336.477 172.902 341.969 172.902C341.99 172.902 342.01 172.902 342.031 172.902L342.031 172.903C342.01 172.902 341.99 172.902 341.969 172.902C336.498 172.902 332.052 177.37 331.952 182.92L331.948 182.92C331.848 177.381 327.419 172.921 321.965 172.902C327.441 172.884 331.882 168.389 331.949 162.82L331.951 162.82Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M321.966 212.91L321.966 212.91C321.964 212.91 321.963 212.91 321.961 212.91C321.963 212.91 321.964 212.91 321.966 212.91ZM311.886 202.828C311.953 208.389 316.381 212.879 321.847 212.91C316.402 212.941 311.987 217.397 311.887 222.928L311.883 222.928C311.783 217.392 307.359 212.932 301.908 212.91C307.38 212.887 311.817 208.394 311.884 202.828L311.886 202.828Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M291.751 202.828C291.817 208.389 296.246 212.879 301.711 212.91C296.267 212.941 291.851 217.397 291.752 222.928L291.748 222.928C291.648 217.392 287.224 212.932 281.772 212.91C287.245 212.887 291.682 208.394 291.749 202.828L291.751 202.828ZM301.831 212.91L301.831 212.91C301.829 212.91 301.827 212.91 301.826 212.91C301.827 212.91 301.829 212.91 301.831 212.91Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.651 202.828C271.717 208.389 276.146 212.879 281.611 212.91C276.167 212.941 271.751 217.397 271.651 222.928L271.648 222.928C271.548 217.392 267.124 212.932 261.672 212.91C267.145 212.887 271.582 208.394 271.649 202.828L271.651 202.828ZM281.731 212.91L281.731 212.91C281.729 212.91 281.727 212.91 281.725 212.91C281.727 212.91 281.729 212.91 281.731 212.91Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M331.985 202.828C332.052 208.393 336.487 212.885 341.958 212.91C336.508 212.934 332.086 217.393 331.986 222.928L331.982 222.928C331.882 217.392 327.458 212.932 322.007 212.91C327.479 212.887 331.916 208.394 331.983 202.828L331.985 202.828ZM342.066 212.91L342.066 212.91C342.06 212.91 342.054 212.91 342.048 212.91C342.054 212.91 342.06 212.91 342.066 212.91Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M352.086 182.727C352.153 188.286 356.58 192.776 362.044 192.808C356.601 192.84 352.186 197.296 352.087 202.827L352.083 202.827C351.984 197.291 347.559 192.831 342.108 192.808C347.579 192.785 352.016 188.292 352.084 182.727L352.086 182.727ZM362.166 192.808L362.166 192.808C362.165 192.808 362.164 192.808 362.163 192.808C362.164 192.808 362.165 192.808 362.166 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M352.085 162.627C352.152 168.207 356.611 172.709 362.102 172.709C362.123 172.709 362.144 172.709 362.165 172.709L362.165 172.709C362.144 172.709 362.123 172.709 362.102 172.709C356.632 172.709 352.186 177.177 352.085 182.727L352.082 182.727C351.981 177.177 347.535 172.709 342.065 172.709L342.065 172.709C347.556 172.709 352.016 168.207 352.083 162.627L352.085 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M372.184 162.627C372.251 168.207 376.71 172.709 382.202 172.709C382.223 172.709 382.244 172.709 382.265 172.708L382.265 172.709C382.244 172.709 382.223 172.709 382.202 172.709C376.731 172.709 372.285 177.177 372.185 182.727L372.181 182.727C372.081 177.177 367.635 172.709 362.165 172.709L362.165 172.709C367.656 172.708 372.115 168.206 372.182 162.627L372.184 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.686 182.727C271.753 188.286 276.18 192.776 281.644 192.808C276.201 192.84 271.786 197.296 271.687 202.827L271.683 202.827C271.584 197.291 267.159 192.831 261.708 192.808C267.18 192.785 271.616 188.292 271.684 182.727L271.686 182.727ZM281.766 192.808L281.766 192.808C281.765 192.808 281.764 192.808 281.763 192.808C281.764 192.808 281.765 192.808 281.766 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.685 162.627C271.752 168.207 276.211 172.709 281.703 172.709C281.723 172.709 281.744 172.709 281.765 172.709L281.765 172.709C281.744 172.709 281.723 172.709 281.702 172.709C276.232 172.709 271.786 177.177 271.686 182.727L271.682 182.727C271.582 177.177 267.135 172.709 261.665 172.709L261.665 172.709C267.156 172.709 271.616 168.207 271.683 162.627L271.685 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M291.784 162.627C291.851 168.207 296.31 172.709 301.802 172.709C301.823 172.709 301.844 172.709 301.865 172.708L301.865 172.709C301.844 172.709 301.823 172.709 301.802 172.709C296.331 172.709 291.885 177.177 291.785 182.727L291.781 182.727C291.681 177.177 287.235 172.709 281.765 172.709L281.765 172.709C287.256 172.708 291.715 168.206 291.782 162.627L291.784 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392.287 182.727C392.354 188.286 396.782 192.776 402.245 192.808C396.802 192.84 392.387 197.296 392.288 202.827L392.284 202.827C392.185 197.29 387.76 192.831 382.309 192.808C387.781 192.785 392.217 188.292 392.285 182.727L392.287 182.727ZM402.367 192.808L402.367 192.808C402.366 192.808 402.365 192.808 402.364 192.808C402.365 192.808 402.366 192.808 402.367 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M372.152 182.727C372.219 188.286 376.647 192.776 382.111 192.808C376.667 192.84 372.252 197.296 372.153 202.827L372.149 202.827C372.05 197.29 367.626 192.831 362.174 192.808C367.646 192.785 372.083 188.292 372.15 182.727L372.152 182.727ZM382.232 192.808L382.232 192.808C382.231 192.808 382.23 192.808 382.229 192.808C382.23 192.808 382.231 192.808 382.232 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392.286 162.627C392.353 168.207 396.813 172.709 402.304 172.709C402.325 172.709 402.346 172.709 402.366 172.708L402.366 172.709C402.346 172.709 402.325 172.709 402.304 172.709C396.834 172.709 392.388 177.177 392.287 182.727L392.284 182.727C392.183 177.177 387.737 172.709 382.267 172.709C382.267 172.709 382.266 172.709 382.266 172.709L382.266 172.709C382.266 172.709 382.267 172.709 382.267 172.709C387.758 172.709 392.217 168.207 392.284 162.627L392.286 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M311.885 182.727C311.953 188.286 316.38 192.776 321.844 192.808C316.4 192.84 311.986 197.296 311.886 202.827L311.883 202.827C311.783 197.29 307.359 192.831 301.907 192.808C307.379 192.785 311.816 188.292 311.884 182.727L311.885 182.727ZM321.965 192.808L321.965 192.808C321.964 192.808 321.963 192.808 321.963 192.808C321.963 192.808 321.964 192.808 321.965 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M291.751 182.727C291.818 188.286 296.245 192.776 301.709 192.808C296.266 192.84 291.851 197.296 291.752 202.827L291.748 202.827C291.649 197.29 287.224 192.831 281.773 192.808C287.244 192.785 291.681 188.292 291.749 182.727L291.751 182.727ZM301.831 192.808L301.831 192.808C301.83 192.808 301.829 192.808 301.828 192.808C301.829 192.808 301.83 192.808 301.831 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M342.065 192.808L342.065 192.808C342.064 192.808 342.062 192.808 342.061 192.808C342.062 192.808 342.064 192.808 342.065 192.808ZM331.984 182.727C332.051 188.287 336.478 192.776 341.942 192.808C336.499 192.84 332.084 197.296 331.985 202.827L331.981 202.827C331.882 197.29 327.457 192.831 322.005 192.808C327.477 192.785 331.914 188.292 331.982 182.727L331.984 182.727Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M311.885 162.627C311.952 168.207 316.411 172.709 321.903 172.709C321.923 172.709 321.944 172.709 321.965 172.709L321.965 172.709C321.944 172.709 321.923 172.709 321.903 172.709C316.432 172.709 311.986 177.177 311.886 182.727L311.882 182.727C311.782 177.177 307.335 172.709 301.865 172.709C301.865 172.709 301.865 172.709 301.865 172.709L301.865 172.709C301.865 172.709 301.865 172.709 301.865 172.709C307.356 172.709 311.816 168.207 311.883 162.627L311.885 162.627Z" fill="#6038D0"/>
</mask>
<g mask="url(#mask0_9908_109322)">
<path d="M324.158 137.959L422.466 162.627L405.106 229.323L261.666 243.027L324.158 137.959Z" fill="#0C422A"/>
</g>
<path fill-rule="evenodd" clip-rule="evenodd" d="M226.7 81.8621C226.767 87.4419 231.226 91.9442 236.718 91.9442C236.739 91.9442 236.759 91.9441 236.78 91.944L236.78 91.9447C236.759 91.9446 236.739 91.9445 236.718 91.9445C231.248 91.9445 226.801 96.412 226.701 101.962L226.697 101.962C226.597 96.4121 222.15 91.9447 216.68 91.9445L216.68 91.9444C222.172 91.9442 226.631 87.4419 226.698 81.8621L226.7 81.8621Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M186.5 81.8621C186.567 87.4419 191.026 91.9442 196.517 91.9442C196.538 91.9442 196.559 91.9441 196.58 91.944L196.58 91.9447C196.559 91.9446 196.538 91.9445 196.517 91.9445C191.047 91.9445 186.601 96.412 186.501 101.962L186.497 101.962C186.396 96.4121 181.95 91.9447 176.48 91.9445L176.48 91.9444C181.972 91.9442 186.431 87.4419 186.498 81.8621L186.5 81.8621Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M166.4 81.8621C166.466 87.4419 170.926 91.9442 176.417 91.9442C176.438 91.9442 176.459 91.9441 176.48 91.944L176.48 91.9447C176.459 91.9446 176.438 91.9445 176.417 91.9445C170.947 91.9445 166.501 96.412 166.401 101.962L166.397 101.962C166.296 96.4121 161.85 91.9447 156.38 91.9445L156.38 91.9444C161.871 91.9442 166.331 87.4419 166.398 81.8621L166.4 81.8621Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M206.635 61.7627C206.702 67.3204 211.126 71.8091 216.588 71.8445C211.147 71.8798 206.736 76.3343 206.636 81.8625L206.632 81.8625C206.532 76.3263 202.108 71.8669 196.657 71.8443C202.129 71.8217 206.566 67.3283 206.633 61.7627L206.635 61.7627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M186.5 61.7627C186.567 67.3204 190.991 71.8091 196.453 71.8444C191.012 71.8797 186.6 76.3342 186.501 81.8625L186.497 81.8625C186.397 76.3264 181.973 71.867 176.522 71.8443C181.994 71.8215 186.431 67.3282 186.498 61.7627L186.5 61.7627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M166.4 61.7627C166.466 67.3204 170.891 71.8091 176.353 71.8445C170.912 71.8798 166.5 76.3343 166.401 81.8625L166.397 81.8625C166.297 76.3263 161.873 71.8669 156.422 71.8443C161.894 71.8217 166.331 67.3283 166.398 61.7627L166.4 61.7627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M226.734 61.7627C226.8 67.3261 231.234 71.8181 236.703 71.8444C231.255 71.8704 226.834 76.3285 226.734 81.8625L226.731 81.8625C226.631 76.3263 222.207 71.8669 216.755 71.8443C222.228 71.8217 226.665 67.3283 226.732 61.7627L226.734 61.7627ZM236.814 71.8444L236.814 71.8443C236.809 71.8443 236.804 71.8443 236.8 71.8444C236.804 71.8444 236.809 71.8444 236.814 71.8444Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M186.5 41.6621C186.567 47.2213 190.994 51.7107 196.458 51.7429C191.015 51.7751 186.6 56.2313 186.501 61.7619L186.497 61.7619C186.398 56.2253 181.973 51.7654 176.522 51.7428C181.993 51.7202 186.43 47.2273 186.498 41.6621L186.5 41.6621ZM196.58 51.7429L196.58 51.7429C196.579 51.7429 196.578 51.7429 196.577 51.7429C196.578 51.7429 196.579 51.7429 196.58 51.7429Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.652 11.6951C271.719 17.2751 276.179 21.7775 281.67 21.7775C281.691 21.7775 281.712 21.7774 281.733 21.7773L281.733 21.7778C281.712 21.7776 281.691 21.7776 281.67 21.7776C276.2 21.7776 271.754 26.245 271.653 31.7949L271.65 31.7949C271.549 26.2563 267.121 21.7958 261.666 21.7776C267.142 21.7593 271.584 17.2638 271.65 11.6951L271.652 11.6951Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M231.452 11.6951C231.519 17.2751 235.979 21.7775 241.47 21.7775C241.491 21.7775 241.512 21.7774 241.533 21.7773L241.533 21.7778C241.512 21.7776 241.491 21.7776 241.47 21.7776C236 21.7776 231.554 26.245 231.453 31.7949L231.449 31.7949C231.349 26.2563 226.921 21.7958 221.466 21.7776C226.942 21.7593 231.384 17.2638 231.45 11.6951L231.452 11.6951Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M211.352 11.6951C211.419 17.2751 215.879 21.7775 221.37 21.7775C221.391 21.7775 221.412 21.7774 221.433 21.7773L221.433 21.7778C221.412 21.7776 221.391 21.7776 221.37 21.7776C215.9 21.7776 211.454 26.245 211.353 31.7949L211.349 31.7949C211.249 26.2563 206.821 21.7958 201.366 21.7776C206.842 21.7593 211.284 17.2638 211.35 11.6951L211.352 11.6951Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M251.588 -8.40503C251.654 -2.84595 256.081 1.64357 261.544 1.67689C256.102 1.71009 251.688 6.16531 251.589 11.6948L251.585 11.6948C251.485 6.15865 247.061 1.69938 241.609 1.6768C247.082 1.65413 251.519 -2.83938 251.586 -8.40503L251.588 -8.40503ZM261.668 1.6769L261.668 1.67689C261.668 1.67689 261.667 1.67689 261.667 1.67689C261.667 1.6769 261.668 1.6769 261.668 1.6769Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M231.452 -8.40503C231.519 -2.84595 235.946 1.64357 241.409 1.67689C235.967 1.71009 231.553 6.16531 231.453 11.6948L231.449 11.6948C231.349 6.15865 226.925 1.69938 221.474 1.6768C226.946 1.65413 231.383 -2.83938 231.45 -8.40503L231.452 -8.40503ZM241.533 1.6769L241.533 1.67689C241.532 1.67689 241.532 1.67689 241.531 1.67689C241.532 1.6769 241.532 1.6769 241.533 1.6769Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M211.352 -8.40503C211.419 -2.84595 215.845 1.64357 221.309 1.67689C215.866 1.71009 211.453 6.16531 211.353 11.6948L211.349 11.6948C211.249 6.15865 206.825 1.69938 201.374 1.6768C206.846 1.65413 211.283 -2.83938 211.35 -8.40503L211.352 -8.40503ZM221.433 1.6769L221.433 1.67689C221.432 1.67689 221.432 1.67689 221.431 1.67689C221.432 1.6769 221.432 1.6769 221.433 1.6769Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.686 -8.40503C271.753 -2.83935 276.19 1.65418 281.662 1.67685C276.211 1.69943 271.787 6.15868 271.687 11.6948L271.683 11.6948C271.584 6.15868 267.159 1.69943 261.708 1.67685C267.18 1.65418 271.618 -2.83935 271.684 -8.40503L271.686 -8.40503ZM281.767 1.67696L281.767 1.67674C281.76 1.67678 281.753 1.67682 281.746 1.67685C281.753 1.67688 281.76 1.67692 281.767 1.67696Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M70.2853 197.711C70.3522 203.291 74.8117 207.793 80.3031 207.793C80.324 207.793 80.3449 207.793 80.3657 207.793L80.3657 207.794C80.3449 207.793 80.324 207.793 80.3031 207.793C74.8329 207.793 70.3866 212.261 70.2863 217.811L70.2824 217.811C70.1823 212.272 65.7538 207.811 60.2988 207.793C65.775 207.775 70.2166 203.28 70.2833 197.711L70.2853 197.711Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M30.0851 197.711C30.152 203.291 34.6115 207.793 40.1029 207.793C40.1238 207.793 40.1447 207.793 40.1655 207.793L40.1655 207.794C40.1447 207.793 40.1238 207.793 40.1029 207.793C34.6327 207.793 30.1864 212.261 30.0861 217.811L30.0822 217.811C29.9821 212.275 25.5582 207.816 20.1072 207.793C25.5795 207.771 30.0166 203.277 30.0832 197.711L30.0851 197.711Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M9.985 197.711C10.0519 203.291 14.5114 207.793 20.0028 207.793C20.0237 207.793 20.0446 207.793 20.0654 207.793L20.0654 207.794C20.0446 207.793 20.0237 207.793 20.0028 207.793C14.5326 207.793 10.0863 212.261 9.98597 217.811L9.98212 217.811C9.88199 212.272 5.45349 207.811 -0.00154539 207.793C5.47466 207.775 9.91633 203.28 9.98302 197.711L9.985 197.711Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M50.2204 177.612C50.2872 183.174 54.7187 187.665 60.1861 187.694C54.7396 187.722 50.3211 192.179 50.2213 197.712L50.2174 197.712C50.1176 192.175 45.6935 187.716 40.2421 187.693C45.7143 187.671 50.1514 183.177 50.2184 177.612L50.2204 177.612ZM60.3008 187.694L60.3008 187.694C60.2973 187.694 60.2938 187.694 60.2903 187.694C60.2938 187.694 60.2973 187.694 60.3008 187.694Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M40.1655 187.694L40.1655 187.693C40.162 187.693 40.1585 187.694 40.1551 187.694C40.1585 187.694 40.162 187.694 40.1655 187.694ZM30.0851 177.612C30.1519 183.174 34.5834 187.665 40.0508 187.694C34.6043 187.722 30.1858 192.179 30.0861 197.712L30.0822 197.712C29.9825 192.176 25.5584 187.716 20.1072 187.693C25.5793 187.671 30.0163 183.177 30.0832 177.612L30.0851 177.612Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M9.985 177.612C10.0518 183.174 14.4833 187.665 19.9507 187.694C14.5042 187.722 10.0857 192.179 9.98595 197.712L9.98206 197.712C9.88228 192.175 5.45814 187.716 0.00676492 187.693C5.47897 187.671 9.91607 183.177 9.98301 177.612L9.985 177.612ZM20.0654 187.694L20.0654 187.694C20.0619 187.694 20.0585 187.694 20.055 187.694C20.0585 187.694 20.0619 187.694 20.0654 187.694Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M70.319 177.612C70.3859 183.174 74.818 187.666 80.286 187.693C74.8388 187.721 70.4196 192.179 70.3199 197.712L70.3162 197.712C70.2164 192.175 65.7923 187.716 60.3409 187.693C65.8131 187.671 70.2502 183.177 70.3171 177.612L70.319 177.612ZM80.3999 187.694L80.3999 187.693C80.3958 187.693 80.3918 187.693 80.3877 187.693C80.3918 187.694 80.3958 187.694 80.3999 187.694Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M30.0851 157.511C30.1522 163.071 34.5796 167.56 40.0435 167.592C34.6002 167.625 30.1855 172.081 30.0861 177.611L30.0823 177.611C29.9828 172.075 25.5586 167.615 20.107 167.592C25.5791 167.57 30.0161 163.077 30.0833 157.511L30.0851 157.511ZM40.165 167.592L40.165 167.592C40.1642 167.592 40.1633 167.592 40.1624 167.592C40.1633 167.592 40.1642 167.592 40.165 167.592Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M228.928 212.695C228.995 218.255 233.422 222.744 238.886 222.777C233.443 222.809 229.028 227.265 228.929 232.795L228.925 232.795C228.825 227.259 224.401 222.799 218.95 222.777C224.422 222.754 228.859 218.261 228.926 212.695L228.928 212.695ZM239.008 222.777L239.008 222.777C239.007 222.777 239.006 222.777 239.005 222.777C239.006 222.777 239.007 222.777 239.008 222.777Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M208.793 212.695C208.859 218.255 213.287 222.744 218.751 222.777C213.308 222.809 208.893 227.265 208.794 232.795L208.79 232.795C208.69 227.259 204.266 222.799 198.814 222.777C204.287 222.754 208.724 218.261 208.791 212.695L208.793 212.695ZM218.873 222.777L218.873 222.777C218.872 222.777 218.871 222.777 218.87 222.777C218.871 222.777 218.872 222.777 218.873 222.777Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M188.693 212.695C188.76 218.255 193.187 222.744 198.651 222.777C193.208 222.809 188.794 227.265 188.694 232.795L188.69 232.795C188.59 227.259 184.166 222.799 178.715 222.777C184.187 222.754 188.624 218.261 188.691 212.695L188.693 212.695ZM198.773 222.777L198.773 222.777C198.772 222.777 198.771 222.777 198.77 222.777C198.771 222.777 198.772 222.777 198.773 222.777Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M188.728 192.594C188.795 198.154 193.223 202.643 198.687 202.675C193.243 202.708 188.828 207.164 188.729 212.694L188.725 212.694C188.626 207.158 184.202 202.698 178.75 202.675C184.222 202.653 188.659 198.16 188.726 192.594L188.728 192.594ZM198.808 202.675L198.808 202.675C198.807 202.675 198.806 202.675 198.805 202.675C198.806 202.675 198.807 202.675 198.808 202.675Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M208.826 172.495C208.893 178.074 213.352 182.576 218.844 182.576C218.865 182.576 218.886 182.576 218.907 182.576L218.907 182.577C218.886 182.577 218.865 182.577 218.844 182.577C213.373 182.577 208.927 187.044 208.827 192.594L208.823 192.594C208.723 187.045 204.277 182.577 198.807 182.577L198.807 182.576C204.298 182.576 208.757 178.074 208.824 172.495L208.826 172.495Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M228.927 192.594C228.995 198.154 233.422 202.643 238.886 202.675C233.442 202.708 229.028 207.164 228.928 212.694L228.925 212.694C228.825 207.158 224.401 202.698 218.949 202.675C224.421 202.653 228.858 198.16 228.926 192.594L228.927 192.594ZM239.007 202.675L239.007 202.675C239.006 202.675 239.006 202.675 239.005 202.675C239.006 202.675 239.006 202.675 239.007 202.675Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M208.793 192.594C208.86 198.154 213.287 202.643 218.751 202.676C213.308 202.708 208.893 207.164 208.794 212.694L208.79 212.694C208.69 207.158 204.266 202.698 198.815 202.676C204.287 202.653 208.724 198.16 208.791 192.594L208.793 192.594ZM218.873 202.676L218.873 202.676C218.872 202.676 218.871 202.676 218.87 202.676C218.871 202.676 218.872 202.676 218.873 202.676Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M259.107 202.676L259.107 202.676C259.106 202.676 259.105 202.676 259.103 202.676C259.105 202.676 259.106 202.676 259.107 202.676ZM249.026 192.594C249.093 198.154 253.521 202.643 258.984 202.676C253.541 202.708 249.126 207.164 249.027 212.694L249.023 212.694C248.924 207.158 244.5 202.698 239.048 202.676C244.52 202.653 248.957 198.16 249.024 192.594L249.026 192.594Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392 132.843C392.034 135.632 394.262 137.883 397.007 137.883C397.017 137.883 397.028 137.883 397.038 137.883L397.038 137.884C397.028 137.884 397.017 137.884 397.007 137.884C394.273 137.884 392.051 140.117 392.001 142.892L391.999 142.892C391.949 140.127 389.742 137.899 387.021 137.884C389.752 137.869 391.966 135.623 392 132.843L392 132.843Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392 122.792C392.034 125.578 394.256 127.826 396.994 127.833C394.266 127.84 392.05 130.071 392.001 132.842L391.999 132.842C391.949 130.071 389.733 127.84 387.005 127.833C389.744 127.826 391.966 125.578 392 122.792L392 122.792ZM397.038 127.833C397.032 127.833 397.026 127.833 397.019 127.833C397.026 127.833 397.032 127.833 397.038 127.833L397.038 127.833Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392.018 122.793L392.02 122.793C392.069 120.031 394.27 117.805 396.985 117.783C394.26 117.761 392.053 115.519 392.019 112.743L392.019 112.743C391.985 115.523 389.771 117.768 387.039 117.783C389.761 117.798 391.968 120.026 392.018 122.793Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M387.009 107.733C387.009 107.733 387.009 107.733 387.009 107.733C389.753 107.733 391.982 105.482 392.016 102.692L392.016 102.692C392.05 105.482 394.279 107.733 397.023 107.733C397.033 107.733 397.044 107.733 397.054 107.733L397.054 107.734C397.044 107.733 397.033 107.733 397.023 107.733C394.289 107.733 392.067 109.967 392.017 112.742L392.015 112.742C391.965 109.967 389.743 107.733 387.009 107.733C387.009 107.733 387.009 107.733 387.009 107.733L387.009 107.733Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M371.925 142.892C371.875 140.127 369.667 137.899 366.946 137.884C369.678 137.869 371.892 135.623 371.925 132.843L371.926 132.843C371.959 135.632 374.188 137.883 376.933 137.883C376.943 137.883 376.954 137.883 376.964 137.883L376.964 137.884C376.953 137.884 376.943 137.884 376.933 137.884C374.199 137.884 371.977 140.117 371.926 142.892L371.925 142.892Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M381.953 112.839C381.903 110.068 379.687 107.837 376.959 107.83C379.698 107.823 381.92 105.575 381.953 102.789L381.954 102.789C381.987 105.579 384.216 107.83 386.961 107.83C386.971 107.83 386.981 107.83 386.992 107.83L386.992 107.83C386.981 107.83 386.971 107.83 386.961 107.83C384.227 107.83 382.004 110.064 381.954 112.839L381.953 112.839Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M361.862 142.892C361.812 140.127 359.604 137.899 356.883 137.884C359.615 137.869 361.829 135.623 361.862 132.843L361.863 132.843C361.897 135.632 364.125 137.883 366.87 137.883C366.88 137.883 366.891 137.883 366.901 137.883L366.901 137.884C366.89 137.884 366.88 137.884 366.87 137.884C364.136 137.884 361.914 140.117 361.863 142.892L361.862 142.892Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M351.816 142.892C351.766 140.127 349.559 137.899 346.837 137.884C349.569 137.869 351.783 135.623 351.817 132.843L351.817 132.843C351.851 135.632 354.079 137.883 356.824 137.883C356.834 137.883 356.845 137.883 356.855 137.883L356.855 137.884C356.845 137.884 356.834 137.884 356.824 137.884C354.09 137.884 351.868 140.117 351.818 142.892L351.816 142.892Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M361.862 122.792C361.896 125.578 364.118 127.826 366.856 127.833C364.128 127.84 361.912 130.071 361.862 132.842L361.861 132.842C361.811 130.071 359.595 127.84 356.867 127.833C359.606 127.826 361.828 125.578 361.861 122.792L361.862 122.792ZM366.9 127.833C366.894 127.833 366.887 127.833 366.881 127.833C366.887 127.833 366.894 127.833 366.9 127.833L366.9 127.833Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M381.97 132.842C381.92 130.071 379.705 127.84 376.976 127.833C379.715 127.826 381.937 125.578 381.971 122.792L381.971 122.792C382.005 125.582 384.234 127.833 386.978 127.833C386.989 127.833 386.999 127.833 387.009 127.833L387.009 127.833C386.999 127.833 386.989 127.833 386.978 127.833C384.244 127.833 382.022 130.067 381.972 132.842L381.97 132.842Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M351.834 122.793L351.836 122.793C351.886 120.031 354.086 117.805 356.802 117.783C354.076 117.761 351.869 115.519 351.836 112.743L351.835 112.743C351.801 115.523 349.587 117.768 346.856 117.783C349.577 117.798 351.785 120.027 351.834 122.793Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M346.826 107.733C349.57 107.733 351.799 105.482 351.833 102.692L351.833 102.692C351.867 105.482 354.096 107.733 356.84 107.733C356.851 107.733 356.861 107.733 356.872 107.733L356.872 107.733C356.861 107.733 356.851 107.733 356.84 107.733C354.106 107.733 351.884 109.967 351.834 112.742L351.832 112.742C351.782 109.967 349.56 107.733 346.826 107.733L346.826 107.733Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M356.872 107.733C356.872 107.733 356.872 107.733 356.872 107.733C359.617 107.733 361.845 105.482 361.879 102.692L361.88 102.692C361.913 105.482 364.142 107.733 366.886 107.733C366.897 107.733 366.907 107.733 366.917 107.733L366.917 107.733C366.907 107.733 366.897 107.733 366.886 107.733C364.152 107.733 361.93 109.967 361.88 112.742L361.878 112.742C361.828 109.967 359.606 107.733 356.872 107.733C356.872 107.733 356.872 107.733 356.872 107.733L356.872 107.733Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M371.926 122.793L371.927 122.793C371.977 120.031 374.177 117.805 376.893 117.783C374.167 117.761 371.96 115.519 371.927 112.743L371.926 112.743C371.893 115.523 369.679 117.768 366.947 117.783C369.668 117.798 371.876 120.026 371.926 122.793Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M361.863 112.743C361.897 115.519 364.104 117.761 366.83 117.783C364.114 117.805 361.913 120.031 361.864 122.793L361.862 122.793C361.813 120.026 359.605 117.798 356.883 117.783C359.615 117.768 361.829 115.523 361.863 112.743L361.863 112.743Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M381.97 112.743C382.003 115.517 384.208 117.759 386.932 117.783C384.218 117.807 382.02 120.032 381.97 122.793L381.969 122.793C381.919 120.026 379.712 117.798 376.99 117.783C379.722 117.768 381.936 115.523 381.969 112.743L381.97 112.743Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M256.448 119.503C256.398 116.732 254.183 114.501 251.454 114.494C254.193 114.487 256.415 112.239 256.449 109.453L256.449 109.453C256.483 112.243 258.712 114.494 261.456 114.494C261.467 114.494 261.477 114.494 261.487 114.494L261.487 114.494C261.477 114.494 261.467 114.494 261.456 114.494C258.722 114.494 256.5 116.728 256.45 119.503L256.448 119.503Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M236.339 119.503C236.289 116.737 234.082 114.509 231.36 114.494C234.092 114.479 236.306 112.234 236.339 109.453L236.34 109.453C236.374 112.243 238.602 114.494 241.347 114.494C241.357 114.494 241.368 114.494 241.378 114.494L241.378 114.494C241.368 114.494 241.357 114.494 241.347 114.494C238.613 114.494 236.391 116.728 236.341 119.503L236.339 119.503Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M256.451 99.4033C256.484 102.181 258.694 104.425 261.423 104.444C258.705 104.463 256.501 106.69 256.451 109.453L256.45 109.453C256.4 106.678 254.177 104.444 251.443 104.444C251.443 104.444 251.443 104.444 251.443 104.444L251.443 104.444C251.443 104.444 251.443 104.444 251.443 104.444C254.188 104.444 256.417 102.193 256.45 99.4033L256.451 99.4033Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M246.388 99.4033C246.421 102.181 248.631 104.425 251.36 104.444C248.642 104.463 246.438 106.69 246.388 109.453L246.387 109.453C246.337 106.678 244.114 104.444 241.38 104.444C241.38 104.444 241.38 104.444 241.38 104.444L241.38 104.444C241.38 104.444 241.38 104.444 241.38 104.444C244.125 104.444 246.354 102.193 246.387 99.4033L246.388 99.4033Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M236.341 99.4033C236.375 102.181 238.585 104.425 241.313 104.444C238.595 104.463 236.392 106.69 236.342 109.453L236.34 109.453C236.29 106.678 234.068 104.444 231.334 104.444L231.334 104.444C234.079 104.444 236.307 102.193 236.341 99.4033L236.341 99.4033Z" fill="white"/>
<path d="M372.968 144.737C374.149 136.269 370.248 127.466 362.106 118.787C353.965 110.11 341.609 101.585 325.953 93.6853C294.643 77.887 250.182 64.6125 199.992 57.6149C149.803 50.6173 103.406 51.224 68.9693 57.8556C51.7496 61.1717 37.533 65.9917 27.3291 72.1111C17.1231 78.2319 10.9632 85.6319 9.78254 94.1002C8.60185 102.569 12.5026 111.371 20.6453 120.05C28.7861 128.727 41.1422 137.252 56.7981 145.152C88.108 160.95 132.569 174.225 182.759 181.222C232.948 188.22 279.345 187.613 313.782 180.982C331.001 177.666 345.218 172.846 355.422 166.726C365.628 160.605 371.788 153.205 372.968 144.737Z" stroke="white" stroke-width="0.452752"/>
<path opacity="0.5" d="M382.789 60.2398C380.568 51.9505 373.34 45.385 362.087 40.6324C350.837 35.8812 335.603 32.9596 317.452 31.9375C281.15 29.8935 233.231 35.449 182.302 49.0953C131.374 62.7416 87.0964 81.89 56.6806 101.811C41.4716 111.772 29.7396 121.919 22.3726 131.659C15.0035 141.401 12.0264 150.701 14.2476 158.99C16.4687 167.28 23.6969 173.845 34.95 178.598C46.1996 183.349 61.4335 186.271 79.5854 187.293C115.887 189.337 163.806 183.781 214.735 170.135C265.663 156.489 309.94 137.34 340.356 117.419C355.565 107.458 367.297 97.3111 374.664 87.5716C382.033 77.8292 385.01 68.5292 382.789 60.2398Z" stroke="white" stroke-width="0.452752"/>
<path opacity="0.3" d="M428.452 95.4672C427.229 64.8461 398.712 38.1439 353.42 19.7658C308.149 1.39636 246.204 -8.61602 178.321 -5.90554C110.437 -3.19506 49.4881 11.7242 5.82558 33.6446C-37.8573 55.5753 -64.1548 84.4662 -62.9321 115.087C-61.7095 145.708 -33.1923 172.411 12.1001 190.789C57.3713 209.158 119.315 219.171 187.199 216.46C255.083 213.75 316.032 198.83 359.694 176.91C403.377 154.979 429.675 126.088 428.452 95.4672Z" stroke="white" stroke-width="0.452752"/>
<circle cx="77.0202" cy="153.728" r="3.62201" transform="rotate(-18.2805 77.0202 153.728)" fill="#FF8743"/>
<circle cx="-0.233638" cy="185.431" r="4.82935" fill="#6038D0"/>
<circle cx="278.931" cy="149.486" r="2.41467" transform="rotate(-18.2805 278.931 149.486)" fill="#19D992"/>
<circle cx="195.625" cy="57.125" r="2.41467" transform="rotate(-18.2805 195.625 57.125)" fill="#19D992"/>
<circle cx="140.389" cy="184.499" r="2.41467" transform="rotate(-18.2805 140.389 184.499)" fill="#19D992"/>
<circle cx="377.361" cy="82.511" r="4.82935" transform="rotate(-18.2805 377.361 82.511)" fill="#6038D0"/>
<circle cx="58.0204" cy="97.6028" r="4.82935" transform="rotate(-18.2805 58.0204 97.6028)" fill="#6038D0"/>
<circle cx="110.524" cy="52.9154" r="3.62201" transform="rotate(-18.2805 110.524 52.9154)" fill="#FF8743"/>
<circle cx="315.771" cy="180.893" r="3.62201" transform="rotate(-18.2805 315.771 180.893)" fill="#FF8743"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M315.315 57.093C315.343 59.3834 317.162 61.2341 319.41 61.2561C317.17 61.2779 315.357 63.1148 315.316 65.3933L315.314 65.3933C315.273 63.1044 313.443 61.2612 311.189 61.256C313.451 61.2507 315.287 59.3937 315.314 57.093L315.315 57.093Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M348.819 131.948C348.847 134.239 350.666 136.089 352.914 136.111C350.674 136.133 348.861 137.97 348.82 140.249L348.818 140.249C348.777 137.96 346.947 136.116 344.693 136.111C346.955 136.106 348.791 134.249 348.818 131.948L348.819 131.948Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M72.3388 32.0408C72.3664 34.3312 74.1855 36.1819 76.4336 36.2038C74.1939 36.2257 72.3801 38.0626 72.3392 40.3411L72.3375 40.3411C72.2965 38.0521 70.466 36.2088 68.2121 36.2037C70.4744 36.1986 72.3101 34.3416 72.3379 32.0408L72.3388 32.0408Z" fill="white"/>
<mask id="mask1_9908_109322" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="-89" y="-9" width="162" height="81">
<path fill-rule="evenodd" clip-rule="evenodd" d="M42.546 51.8943C42.613 57.4741 47.0725 61.9764 52.5639 61.9764C52.5848 61.9764 52.6056 61.9763 52.6265 61.9762L52.6265 61.9769C52.6056 61.9768 52.5848 61.9767 52.5639 61.9767C47.0937 61.9767 42.6475 66.4442 42.547 71.9941L42.5431 71.9941C42.4426 66.4443 37.9966 61.9769 32.5266 61.9766C38.0179 61.9764 42.4772 57.4741 42.544 51.8943L42.546 51.8943Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M62.611 51.8943C62.6779 57.4741 67.1374 61.9764 72.6288 61.9764C72.6497 61.9764 72.6706 61.9763 72.6914 61.9762L72.6914 61.9769C72.6706 61.9768 72.6497 61.9767 72.6288 61.9767C67.1587 61.9767 62.7124 66.4442 62.612 71.9941L62.608 71.9941C62.5076 66.4443 58.0616 61.9769 52.5916 61.9766C58.0829 61.9764 62.5422 57.4741 62.609 51.8943L62.611 51.8943Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M62.611 -8.21314C62.678 -2.63337 67.1375 1.8688 72.6288 1.8688C72.6497 1.8688 72.6706 1.86874 72.6914 1.86861L72.6914 1.86906C72.6706 1.86893 72.6497 1.86887 72.6288 1.86887C67.1585 1.86887 62.7122 6.3366 62.6119 11.8867L62.6081 11.8867C62.5081 6.34792 58.0797 1.8871 52.6247 1.86893C58.1007 1.85064 62.5422 -2.64466 62.609 -8.21314L62.611 -8.21314Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.4108 51.8943C22.4777 57.4741 26.9372 61.9764 32.4286 61.9764C32.4495 61.9764 32.4704 61.9763 32.4912 61.9762L32.4912 61.9769C32.4704 61.9768 32.4495 61.9767 32.4286 61.9767C26.9585 61.9767 22.5122 66.4442 22.4118 71.9941L22.4078 71.9941C22.3074 66.4443 17.8614 61.9768 12.3914 61.9766C17.8827 61.9764 22.342 57.4741 22.4088 51.8943L22.4108 51.8943Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.31069 51.8943C2.3776 57.4741 6.83711 61.9764 12.3285 61.9764C12.3494 61.9764 12.3703 61.9763 12.3911 61.9762L12.3911 61.9769C12.3703 61.9768 12.3494 61.9767 12.3285 61.9767C6.85836 61.9767 2.41212 66.4442 2.31166 71.9941L2.30772 71.9941C2.2073 66.4443 -2.23872 61.9769 -7.70872 61.9766C-2.21743 61.9764 2.24189 57.4741 2.30869 51.8943L2.31069 51.8943Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M42.5462 31.7947C42.6129 37.3524 47.0375 41.8411 52.499 41.8765C47.0584 41.9117 42.6468 46.3662 42.5472 51.8945L42.5433 51.8945C42.4435 46.3583 38.0194 41.8989 32.568 41.8763C38.0402 41.8536 42.4773 37.3602 42.5442 31.7947L42.5462 31.7947Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.411 31.7947C22.4777 37.3524 26.9023 41.8411 32.3638 41.8765C26.9232 41.9117 22.5116 46.3662 22.4119 51.8945L22.408 51.8945C22.3083 46.3583 17.8841 41.8989 12.4327 41.8763C17.9049 41.8536 22.342 37.3602 22.409 31.7947L22.411 31.7947Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.31087 31.7947C2.37758 37.3524 6.80216 41.8411 12.2637 41.8765C6.82306 41.9117 2.41146 46.3662 2.31183 51.8945L2.30795 51.8945C2.2082 46.3583 -2.21595 41.8989 -7.66734 41.8763C-2.19515 41.8536 2.24195 37.3602 2.3089 31.7947L2.31087 31.7947Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M62.6452 31.7947C62.7121 37.3585 67.1464 41.8508 72.6162 41.8763C67.1672 41.9017 62.7458 46.36 62.6461 51.8945L62.6424 51.8945C62.5426 46.3583 58.1185 41.8989 52.6671 41.8763C58.1393 41.8536 62.5764 37.3602 62.6433 31.7947L62.6452 31.7947ZM72.7261 41.8764L72.7261 41.8762C72.7207 41.8763 72.7152 41.8763 72.7098 41.8763C72.7152 41.8764 72.7207 41.8764 72.7261 41.8764Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.34589 11.6941C2.41318 17.2532 6.84054 21.7425 12.3043 21.7748C6.86076 21.8071 2.44595 26.2633 2.34681 31.7939L2.34302 31.7939C2.24377 26.2573 -2.18045 21.7975 -7.63205 21.7747C-2.16029 21.752 2.27649 17.2591 2.34395 11.6941L2.34589 11.6941ZM12.4263 21.7749L12.4263 21.7748C12.4252 21.7748 12.4242 21.7748 12.4232 21.7748C12.4242 21.7748 12.4252 21.7748 12.4263 21.7749Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.3449 -8.40625C2.41202 -2.82659 6.87145 1.67547 12.3627 1.67547C12.3836 1.67547 12.4045 1.67541 12.4253 1.67528L12.4253 1.67602C12.4044 1.67589 12.3836 1.67583 12.3627 1.67583C6.89241 1.67583 2.4461 6.14352 2.34582 11.6936L2.34205 11.6936C2.24177 6.14362 -2.20438 1.67599 -7.67454 1.67583L-7.67454 1.67547C-2.18338 1.67531 2.27589 -2.82669 2.34301 -8.40625L2.3449 -8.40625Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.444 -8.40625C22.5111 -2.82659 26.9706 1.67547 32.4619 1.67547C32.4829 1.67547 32.5039 1.6754 32.5249 1.67527L32.5249 1.67603C32.5039 1.67589 32.4829 1.67583 32.4619 1.67583C26.9916 1.67583 22.5453 6.14352 22.445 11.6936L22.4412 11.6936C22.3409 6.14377 17.895 1.67623 12.4251 1.67583L12.4251 1.67547C17.916 1.67507 22.3751 -2.82684 22.4422 -8.40625L22.444 -8.40625Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M42.5455 11.6941C42.6127 17.2533 47.0401 21.7426 52.5039 21.7749C47.0604 21.8072 42.6456 26.2633 42.5464 31.7939L42.5427 31.7939C42.4434 26.2574 38.0192 21.7975 32.5676 21.7748C38.0394 21.752 42.4762 17.2592 42.5436 11.6941L42.5455 11.6941ZM52.6255 21.7749L52.6255 21.7749C52.6246 21.7749 52.6237 21.7749 52.6228 21.7749C52.6237 21.7749 52.6246 21.7749 52.6255 21.7749Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.4107 11.6941C22.478 17.2533 26.9054 21.7426 32.3691 21.7749C26.9256 21.8072 22.5109 26.2633 22.4117 31.7939L22.408 31.7939C22.3087 26.2574 17.8845 21.7975 12.4329 21.7748C17.9047 21.752 22.3415 17.2592 22.4089 11.6941L22.4107 11.6941ZM32.4907 21.7749L32.4907 21.7749C32.4898 21.7749 32.4889 21.7749 32.488 21.7749C32.4889 21.7749 32.4898 21.7749 32.4907 21.7749Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M72.7256 21.7749L72.7256 21.7749C72.7242 21.7749 72.7228 21.7749 72.7215 21.7749C72.7228 21.7749 72.7242 21.7749 72.7256 21.7749ZM62.6442 11.6941C62.7114 17.2533 67.1388 21.7426 72.6026 21.7749C67.1591 21.8072 62.7443 26.2633 62.6451 31.7939L62.6414 31.7939C62.5421 26.2574 58.1179 21.7975 52.6663 21.7748C58.1381 21.752 62.5749 17.2592 62.6423 11.6941L62.6442 11.6941Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M42.5455 -8.40625C42.6126 -2.82658 47.072 1.67548 52.5633 1.67548C52.5841 1.67548 52.6048 1.67542 52.6255 1.67529L52.6255 1.67603C52.6048 1.67591 52.5841 1.67584 52.5633 1.67584C47.093 1.67584 42.6467 6.14352 42.5465 11.6936L42.5427 11.6936C42.4424 6.14353 37.9961 1.67584 32.5258 1.67584C32.5258 1.67584 32.5257 1.67584 32.5257 1.67584L32.5257 1.67548C32.5257 1.67548 32.5258 1.67548 32.5258 1.67548C38.0171 1.67548 42.4765 -2.82658 42.5436 -8.40625L42.5455 -8.40625Z" fill="#6038D0"/>
</mask>
<g mask="url(#mask1_9908_109322)">
<path d="M-111 -46L52.1755 -14.5709L34.8164 52.1245L-40.8327 69.6664L-111 -46Z" fill="#6038D0"/>
</g>
</g>
</g>
<defs>
<clipPath id="clip0_9908_109322">
<rect width="402" height="219" rx="2.92364" fill="white"/>
</clipPath>
</defs>
</svg>

'''
'''--- public/assets/captcha/bg/F3.svg ---
<svg width="402" height="219" viewBox="0 0 402 219" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_9908_107572)">
<rect width="402" height="219" rx="2.92364" fill="#201F1F"/>
<g opacity="0.1">
<path fill-rule="evenodd" clip-rule="evenodd" d="M196.116 132.478C196.15 135.268 198.379 137.519 201.123 137.519C201.134 137.519 201.144 137.519 201.155 137.519L201.155 137.519C201.144 137.519 201.134 137.519 201.124 137.519C198.39 137.519 196.168 139.753 196.117 142.528L196.116 142.528C196.066 139.762 193.858 137.534 191.137 137.519C193.869 137.504 196.083 135.258 196.116 132.478L196.116 132.478Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M191.109 127.468C191.109 127.468 191.109 127.468 191.109 127.468C193.854 127.468 196.083 125.217 196.116 122.427L196.117 122.427C196.15 125.217 198.379 127.468 201.124 127.468C201.134 127.468 201.144 127.468 201.155 127.468L201.155 127.468C201.144 127.468 201.134 127.468 201.124 127.468C198.39 127.468 196.167 129.702 196.117 132.477L196.116 132.477C196.066 129.702 193.844 127.468 191.109 127.468C191.109 127.468 191.109 127.468 191.109 127.468L191.109 127.468Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M196.135 112.377C196.168 115.153 198.375 117.395 201.101 117.418C198.385 117.44 196.184 119.666 196.135 122.427L196.134 122.427C196.084 119.652 193.861 117.418 191.127 117.418C191.127 117.418 191.127 117.418 191.127 117.418L191.127 117.418C191.127 117.418 191.127 117.418 191.127 117.418C193.872 117.418 196.1 115.167 196.134 112.377L196.135 112.377Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M191.125 107.369C191.125 107.369 191.126 107.369 191.126 107.369C193.87 107.369 196.099 105.117 196.132 102.328L196.133 102.328C196.167 105.117 198.395 107.369 201.14 107.369C201.15 107.369 201.161 107.369 201.171 107.368L201.171 107.369C201.161 107.369 201.15 107.369 201.14 107.369C198.406 107.369 196.184 109.603 196.133 112.377L196.132 112.377C196.082 109.603 193.86 107.369 191.126 107.369C191.126 107.369 191.125 107.369 191.125 107.369L191.125 107.369Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M176.041 142.528C175.991 139.757 173.775 137.526 171.047 137.519C173.786 137.512 176.008 135.264 176.042 132.478L176.042 132.478C176.076 135.268 178.304 137.519 181.049 137.519C181.059 137.519 181.07 137.519 181.08 137.519L181.08 137.519C181.07 137.519 181.059 137.519 181.049 137.519C178.315 137.519 176.093 139.753 176.043 142.528L176.041 142.528Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M186.069 112.473C186.019 109.703 183.804 107.471 181.076 107.464C183.814 107.458 186.036 105.209 186.07 102.424L186.071 102.424C186.104 105.213 188.333 107.464 191.077 107.464C191.088 107.464 191.098 107.464 191.108 107.464L191.108 107.464C191.098 107.464 191.088 107.464 191.077 107.464C188.343 107.464 186.121 109.698 186.071 112.473L186.069 112.473Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M165.979 142.528C165.928 139.757 163.713 137.526 160.985 137.519C163.724 137.512 165.946 135.264 165.979 132.478L165.98 132.478C166.013 135.268 168.242 137.519 170.986 137.519C170.997 137.519 171.007 137.519 171.018 137.519L171.018 137.519C171.007 137.519 170.997 137.519 170.986 137.519C168.253 137.519 166.03 139.753 165.98 142.528L165.979 142.528Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M155.932 142.528C155.882 139.762 153.675 137.534 150.954 137.519C153.686 137.504 155.9 135.258 155.933 132.478L155.933 132.478C155.967 135.268 158.196 137.519 160.94 137.519C160.951 137.519 160.961 137.519 160.972 137.519L160.972 137.519C160.961 137.519 160.951 137.519 160.94 137.519C158.206 137.519 155.984 139.753 155.934 142.528L155.932 142.528Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M160.971 127.468C160.971 127.468 160.971 127.468 160.971 127.468C163.716 127.468 165.944 125.217 165.978 122.427L165.979 122.427C166.012 125.217 168.241 127.468 170.986 127.468C170.996 127.468 171.006 127.468 171.017 127.468L171.017 127.468C171.006 127.468 170.996 127.468 170.986 127.468C168.251 127.468 166.029 129.702 165.979 132.477L165.978 132.477C165.928 129.702 163.705 127.468 160.971 127.468C160.971 127.468 160.971 127.468 160.971 127.468L160.971 127.468Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M181.08 127.468C181.08 127.468 181.081 127.468 181.081 127.468C183.825 127.468 186.054 125.217 186.088 122.427L186.088 122.427C186.122 125.217 188.35 127.468 191.095 127.468C191.105 127.468 191.116 127.468 191.126 127.468L191.126 127.468C191.116 127.468 191.105 127.468 191.095 127.468C188.361 127.468 186.139 129.702 186.089 132.477L186.087 132.477C186.037 129.702 183.815 127.468 181.081 127.468C181.081 127.468 181.08 127.468 181.08 127.468L181.08 127.468Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M155.951 112.377C155.985 115.153 158.191 117.395 160.917 117.418C158.201 117.44 156.001 119.666 155.952 122.427L155.95 122.427C155.9 119.652 153.678 117.418 150.944 117.418C150.944 117.418 150.943 117.418 150.943 117.418L150.943 117.418C150.943 117.418 150.944 117.418 150.944 117.418C153.688 117.418 155.917 115.167 155.95 112.377L155.951 112.377Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M150.943 107.369C153.687 107.368 155.916 105.117 155.949 102.328L155.95 102.328C155.983 105.117 158.212 107.369 160.957 107.369C160.967 107.369 160.978 107.369 160.988 107.368L160.988 107.369C160.978 107.369 160.967 107.369 160.957 107.369C158.223 107.369 156.001 109.603 155.95 112.377L155.949 112.377C155.899 109.603 153.676 107.369 150.943 107.369L150.943 107.369Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M160.988 107.369C160.988 107.369 160.988 107.369 160.988 107.369C163.733 107.369 165.962 105.117 165.995 102.328L165.996 102.328C166.029 105.117 168.258 107.369 171.003 107.369C171.013 107.369 171.023 107.369 171.034 107.368L171.034 107.369C171.023 107.369 171.013 107.369 171.003 107.369C168.269 107.369 166.047 109.603 165.996 112.377L165.995 112.377C165.944 109.603 163.722 107.369 160.988 107.369C160.988 107.369 160.988 107.369 160.988 107.369L160.988 107.369Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M176.042 112.377C176.076 115.153 178.283 117.395 181.008 117.418C178.293 117.44 176.092 119.666 176.043 122.427L176.041 122.427C175.992 119.652 173.769 117.418 171.035 117.418C171.035 117.418 171.035 117.418 171.035 117.418L171.035 117.418C171.035 117.418 171.035 117.418 171.035 117.418C173.779 117.418 176.008 115.167 176.042 112.377L176.042 112.377Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M165.978 112.377C166.012 115.153 168.219 117.395 170.944 117.418C168.229 117.44 166.028 119.666 165.979 122.427L165.977 122.427C165.928 119.652 163.705 117.418 160.971 117.418C160.971 117.418 160.971 117.418 160.971 117.418L160.971 117.418C160.971 117.418 160.971 117.418 160.971 117.418C163.715 117.418 165.944 115.167 165.978 112.377L165.978 112.377Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M186.087 112.377C186.12 115.152 188.325 117.393 191.049 117.418C188.335 117.442 186.136 119.667 186.087 122.427L186.086 122.427C186.036 119.652 183.814 117.418 181.08 117.418L181.08 117.418C183.824 117.417 186.052 115.167 186.086 112.377L186.087 112.377Z" fill="#E8E0FF"/>
<mask id="mask0_9908_107572" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="86" y="102" width="242" height="121">
<path fill-rule="evenodd" clip-rule="evenodd" d="M161.381 192.45C161.481 200.819 168.171 207.573 176.408 207.573C176.439 207.573 176.47 207.573 176.501 207.573L176.501 207.573C176.47 207.573 176.439 207.573 176.407 207.573C168.202 207.573 161.533 214.274 161.382 222.599L161.377 222.599C161.226 214.275 154.557 207.573 146.352 207.573L146.352 207.573C154.589 207.573 161.278 200.819 161.378 192.45L161.381 192.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M282.032 192.45C282.132 200.819 288.821 207.573 297.059 207.573C297.09 207.573 297.121 207.573 297.152 207.573L297.152 207.573C297.121 207.573 297.09 207.573 297.058 207.573C288.853 207.573 282.183 214.274 282.033 222.599L282.028 222.599C281.877 214.275 275.208 207.573 267.003 207.573L267.003 207.573C275.24 207.573 281.929 200.819 282.029 192.45L282.032 192.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M191.479 192.45C191.579 200.819 198.268 207.573 206.505 207.573C206.537 207.573 206.568 207.573 206.599 207.572L206.599 207.573C206.568 207.573 206.536 207.573 206.505 207.573C198.3 207.573 191.63 214.274 191.48 222.599L191.474 222.599C191.324 214.274 184.655 207.573 176.45 207.573L176.45 207.573C184.687 207.573 191.376 200.819 191.476 192.45L191.479 192.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M312.13 192.45C312.23 200.819 318.919 207.573 327.156 207.573C327.188 207.573 327.219 207.573 327.25 207.572L327.25 207.573C327.219 207.573 327.187 207.573 327.156 207.573C318.95 207.573 312.281 214.274 312.131 222.599L312.125 222.599C311.975 214.274 305.306 207.573 297.1 207.573L297.1 207.573C305.337 207.573 312.027 200.819 312.127 192.45L312.13 192.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M191.479 102.289C191.579 110.658 198.268 117.412 206.505 117.412C206.537 117.412 206.568 117.412 206.599 117.412L206.599 117.412C206.568 117.412 206.536 117.412 206.505 117.412C198.3 117.412 191.63 124.113 191.48 132.438L191.474 132.438C191.324 124.113 184.655 117.412 176.45 117.412L176.45 117.412C184.687 117.412 191.376 110.658 191.476 102.289L191.479 102.289Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M312.13 102.289C312.23 110.658 318.919 117.412 327.156 117.412C327.188 117.412 327.219 117.412 327.25 117.412L327.25 117.412C327.219 117.412 327.187 117.412 327.156 117.412C318.951 117.412 312.281 124.113 312.131 132.438L312.125 132.438C311.975 124.113 305.305 117.412 297.1 117.412L297.1 117.412C305.337 117.412 312.027 110.658 312.127 102.289L312.13 102.289Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M131.179 192.45C131.279 200.819 137.968 207.573 146.206 207.573C146.237 207.573 146.268 207.573 146.299 207.573L146.299 207.573C146.268 207.573 146.236 207.573 146.205 207.573C138 207.573 131.33 214.274 131.18 222.599L131.175 222.599C131.024 214.275 124.355 207.573 116.15 207.573L116.15 207.573C124.387 207.573 131.076 200.819 131.176 192.45L131.179 192.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M251.83 192.45C251.931 200.819 258.62 207.573 266.857 207.573C266.888 207.573 266.919 207.573 266.951 207.573L266.951 207.573C266.919 207.573 266.888 207.573 266.856 207.573C258.651 207.573 251.982 214.274 251.831 222.599L251.826 222.599C251.675 214.275 245.006 207.573 236.801 207.573L236.801 207.573C245.038 207.573 251.727 200.819 251.827 192.45L251.83 192.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M101.029 192.45C101.129 200.819 107.819 207.573 116.056 207.573C116.087 207.573 116.118 207.573 116.149 207.573L116.149 207.573C116.118 207.573 116.087 207.573 116.055 207.573C107.85 207.573 101.18 214.274 101.03 222.599L101.025 222.599C100.874 214.275 94.2049 207.573 85.9998 207.573L85.9998 207.573C94.2368 207.573 100.926 200.819 101.026 192.45L101.029 192.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M221.68 192.45C221.78 200.819 228.469 207.573 236.706 207.573C236.738 207.573 236.769 207.573 236.8 207.573L236.8 207.573C236.769 207.573 236.737 207.573 236.706 207.573C228.501 207.573 221.831 214.274 221.681 222.599L221.676 222.599C221.525 214.275 214.856 207.573 206.651 207.573L206.651 207.573C214.888 207.573 221.577 200.819 221.677 192.45L221.68 192.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M161.381 162.3C161.481 170.644 168.129 177.381 176.33 177.423C168.16 177.464 161.531 184.15 161.382 192.45L161.377 192.45C161.227 184.144 154.588 177.454 146.409 177.423C154.619 177.391 161.278 170.65 161.378 162.3L161.381 162.3ZM176.501 177.423L176.501 177.423C176.496 177.423 176.49 177.423 176.485 177.423C176.49 177.423 176.496 177.423 176.501 177.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M282.032 162.3C282.132 170.644 288.78 177.381 296.981 177.423C288.811 177.464 282.182 184.15 282.033 192.45L282.028 192.45C281.878 184.144 275.239 177.454 267.06 177.423C275.27 177.391 281.929 170.65 282.029 162.3L282.032 162.3ZM297.152 177.423L297.152 177.423C297.147 177.423 297.141 177.423 297.136 177.423C297.141 177.423 297.147 177.423 297.152 177.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M131.179 162.3C131.279 170.644 137.927 177.381 146.128 177.423C137.958 177.465 131.33 184.151 131.18 192.45L131.175 192.45C131.025 184.146 124.39 177.457 116.213 177.423C124.421 177.388 131.076 170.648 131.176 162.3L131.179 162.3ZM146.299 177.423L146.299 177.423C146.294 177.423 146.288 177.423 146.283 177.423C146.288 177.423 146.294 177.423 146.299 177.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M251.83 162.3C251.93 170.644 258.578 177.381 266.779 177.423C258.609 177.465 251.981 184.151 251.831 192.45L251.825 192.45C251.676 184.146 245.04 177.457 236.864 177.423C245.072 177.388 251.726 170.648 251.827 162.3L251.83 162.3ZM266.95 177.423L266.95 177.423C266.945 177.423 266.939 177.423 266.934 177.423C266.939 177.423 266.945 177.423 266.95 177.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M101.029 162.3C101.129 170.644 107.777 177.381 115.978 177.423C107.808 177.465 101.18 184.151 101.03 192.45L101.025 192.45C100.875 184.144 94.2362 177.454 86.0569 177.423C94.2674 177.391 100.926 170.65 101.026 162.3L101.029 162.3ZM116.149 177.423L116.149 177.423C116.144 177.423 116.138 177.423 116.133 177.423C116.138 177.423 116.144 177.423 116.149 177.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M221.68 162.3C221.78 170.644 228.428 177.381 236.629 177.423C228.459 177.464 221.83 184.15 221.681 192.45L221.676 192.45C221.526 184.144 214.887 177.454 206.708 177.423C214.918 177.391 221.577 170.65 221.677 162.3L221.68 162.3ZM236.8 177.423L236.8 177.423C236.795 177.423 236.789 177.423 236.783 177.423C236.789 177.423 236.795 177.423 236.8 177.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M191.53 162.3C191.63 170.648 198.285 177.388 206.492 177.423C198.316 177.457 191.681 184.146 191.531 192.45L191.526 192.45C191.376 184.146 184.741 177.457 176.565 177.423C184.772 177.388 191.427 170.648 191.527 162.3L191.53 162.3ZM206.651 177.423L206.651 177.422C206.641 177.423 206.631 177.423 206.621 177.423C206.631 177.423 206.641 177.423 206.651 177.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M312.181 162.3C312.281 170.648 318.936 177.388 327.143 177.423C318.967 177.457 312.332 184.146 312.182 192.45L312.177 192.45C312.027 184.146 305.392 177.457 297.216 177.423C305.423 177.388 312.078 170.648 312.178 162.3L312.181 162.3ZM327.302 177.423L327.302 177.422C327.292 177.423 327.282 177.423 327.272 177.423C327.282 177.423 327.292 177.423 327.302 177.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M101.082 132.15C101.183 140.492 107.83 147.229 116.031 147.271C107.86 147.313 101.232 153.999 101.083 162.299L101.077 162.299C100.928 153.993 94.2888 147.302 86.1091 147.271C94.3193 147.24 100.977 140.499 101.078 132.15L101.082 132.15ZM116.202 147.271L116.202 147.271C116.196 147.271 116.191 147.271 116.185 147.271C116.191 147.271 116.196 147.271 116.202 147.271Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M101.08 102C101.18 110.37 107.869 117.123 116.106 117.123C116.138 117.123 116.169 117.123 116.2 117.123L116.2 117.124C116.169 117.124 116.138 117.124 116.106 117.124C107.901 117.124 101.232 123.825 101.081 132.15L101.076 132.15C100.925 123.825 94.2557 117.124 86.0506 117.124L86.0506 117.123C94.2875 117.123 100.977 110.37 101.077 102L101.08 102Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M146.35 117.124C146.318 117.124 146.287 117.123 146.255 117.123C138.05 117.123 131.381 123.825 131.23 132.15L131.224 132.15C131.074 123.825 124.405 117.124 116.2 117.123L116.2 117.123C124.437 117.122 131.125 110.369 131.226 102L131.229 102C131.329 110.37 138.018 117.123 146.255 117.123C146.287 117.123 146.318 117.123 146.35 117.123L146.35 117.124Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M221.733 132.15C221.834 140.492 228.481 147.229 236.682 147.271C228.511 147.313 221.882 153.999 221.734 162.299L221.728 162.299C221.579 153.993 214.94 147.302 206.76 147.271C214.97 147.24 221.628 140.499 221.729 132.15L221.733 132.15ZM236.853 147.271L236.853 147.271C236.847 147.271 236.842 147.271 236.836 147.271C236.842 147.271 236.847 147.271 236.853 147.271Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M221.731 102C221.831 110.37 228.52 117.123 236.757 117.123C236.789 117.123 236.82 117.123 236.851 117.123L236.851 117.124C236.82 117.124 236.789 117.124 236.757 117.124C228.552 117.124 221.883 123.825 221.732 132.15L221.726 132.15C221.576 123.825 214.907 117.124 206.701 117.124L206.701 117.123C214.938 117.123 221.627 110.37 221.728 102L221.731 102Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M267 117.124C266.969 117.124 266.938 117.123 266.906 117.123C258.701 117.123 252.032 123.825 251.881 132.15L251.875 132.15C251.725 123.825 245.056 117.124 236.851 117.123L236.851 117.123C245.088 117.122 251.776 110.369 251.877 102L251.879 102C251.98 110.37 258.669 117.123 266.906 117.123C266.938 117.123 266.969 117.123 267 117.123L267 117.124Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M161.382 132.15C161.482 140.491 168.127 147.226 176.326 147.271C168.158 147.316 161.532 154.001 161.383 162.299L161.377 162.299C161.228 153.995 154.593 147.306 146.416 147.271C154.623 147.236 161.278 140.497 161.379 132.15L161.382 132.15ZM176.501 147.271L176.501 147.271C176.498 147.271 176.494 147.271 176.491 147.271C176.494 147.271 176.498 147.271 176.501 147.271Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M131.18 132.15C131.281 140.491 137.925 147.226 146.124 147.271C137.956 147.316 131.33 154.001 131.181 162.299L131.176 162.299C131.027 153.995 124.391 147.306 116.214 147.271C124.422 147.236 131.076 140.497 131.177 132.15L131.18 132.15ZM146.3 147.271L146.3 147.271C146.296 147.271 146.293 147.271 146.289 147.271C146.293 147.271 146.296 147.271 146.3 147.271Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M191.529 132.15C191.63 140.489 198.271 147.223 206.467 147.271C198.302 147.319 191.679 154.003 191.53 162.299L191.525 162.299C191.376 153.995 184.74 147.306 176.564 147.271C184.771 147.236 191.425 140.497 191.526 132.15L191.529 132.15ZM206.651 147.271L206.651 147.271C206.649 147.271 206.646 147.271 206.644 147.271C206.646 147.271 206.649 147.271 206.651 147.271Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M161.382 102C161.482 110.37 168.171 117.123 176.408 117.123C176.439 117.123 176.47 117.123 176.501 117.123L176.501 117.124C176.47 117.124 176.439 117.124 176.408 117.124C168.203 117.124 161.534 123.825 161.383 132.15L161.377 132.15C161.227 123.825 154.557 117.124 146.352 117.124C146.352 117.124 146.352 117.124 146.352 117.124L146.352 117.123C146.352 117.123 146.352 117.123 146.352 117.123C154.589 117.123 161.278 110.37 161.379 102L161.382 102Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M282.031 132.15C282.132 140.491 288.776 147.226 296.975 147.271C288.807 147.316 282.181 154.001 282.032 162.299L282.027 162.299C281.878 153.995 275.242 147.306 267.065 147.271C275.273 147.236 281.927 140.497 282.028 132.15L282.031 132.15ZM297.151 147.271L297.151 147.271C297.147 147.271 297.144 147.271 297.14 147.271C297.144 147.271 297.147 147.271 297.151 147.271Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M251.829 132.15C251.93 140.491 258.575 147.226 266.774 147.271C258.605 147.316 251.98 154.001 251.831 162.299L251.825 162.299C251.676 153.995 245.041 147.306 236.864 147.271C245.071 147.236 251.725 140.497 251.827 132.15L251.829 132.15ZM266.949 147.271L266.949 147.271C266.946 147.271 266.942 147.271 266.938 147.271C266.942 147.271 266.946 147.271 266.949 147.271Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M312.178 132.15C312.279 140.489 318.921 147.223 327.117 147.271C318.951 147.319 312.329 154.003 312.18 162.299L312.174 162.299C312.025 153.995 305.39 147.306 297.213 147.271C305.42 147.236 312.075 140.497 312.176 132.15L312.178 132.15ZM327.301 147.271L327.301 147.271C327.298 147.271 327.296 147.271 327.293 147.271C327.296 147.271 327.298 147.271 327.301 147.271Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M282.031 102C282.131 110.37 288.821 117.123 297.058 117.123C297.089 117.123 297.12 117.123 297.151 117.123L297.151 117.124C297.12 117.124 297.089 117.124 297.058 117.124C288.852 117.124 282.183 123.825 282.032 132.15L282.027 132.15C281.876 123.825 275.207 117.124 267.001 117.124C267.001 117.124 267.001 117.124 267.001 117.124L267.001 117.123C267.001 117.123 267.001 117.123 267.001 117.123C275.238 117.123 281.928 110.37 282.028 102L282.031 102Z" fill="#6038D0"/>
</mask>
<g mask="url(#mask0_9908_107572)">
<path d="M58.0425 86.1025L221.583 95.9698L195.819 230.457L85.9998 222.965L58.0425 86.1025Z" fill="#19D992"/>
</g>
<mask id="mask1_9908_107572" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="-51" y="-17" width="242" height="121">
<path fill-rule="evenodd" clip-rule="evenodd" d="M24.381 73.4495C24.4813 81.8193 31.1705 88.5728 39.4077 88.5728C39.439 88.5728 39.4702 88.5727 39.5015 88.5725L39.5015 88.5733C39.4701 88.5731 39.4386 88.573 39.4072 88.573C31.202 88.573 24.5327 95.2742 24.382 103.599L24.3768 103.599C24.2261 95.2744 17.5569 88.5732 9.35188 88.573L9.35188 88.573C17.589 88.5728 24.2781 81.8193 24.3782 73.4495L24.381 73.4495Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M145.032 73.4495C145.132 81.8193 151.821 88.5728 160.059 88.5728C160.09 88.5728 160.121 88.5727 160.152 88.5725L160.152 88.5733C160.121 88.5731 160.09 88.573 160.058 88.573C151.853 88.573 145.184 95.2742 145.033 103.599L145.028 103.599C144.877 95.2744 138.208 88.5732 130.003 88.573L130.003 88.573C138.24 88.5728 144.929 81.8193 145.029 73.4495L145.032 73.4495Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M54.4787 73.4495C54.579 81.8193 61.2682 88.5727 69.5054 88.5727C69.5366 88.5727 69.5679 88.5726 69.5991 88.5724L69.5991 88.5733C69.5677 88.5731 69.5363 88.573 69.5049 88.573C61.2997 88.573 54.6303 95.2742 54.4797 103.599L54.4744 103.599C54.3238 95.2743 47.6546 88.5732 39.4495 88.573L39.4495 88.573C47.6866 88.5728 54.3758 81.8193 54.4759 73.4495L54.4787 73.4495Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M175.13 73.4495C175.23 81.8193 181.919 88.5727 190.156 88.5727C190.188 88.5727 190.219 88.5726 190.25 88.5724L190.25 88.5733C190.219 88.5731 190.187 88.573 190.156 88.573C181.951 88.573 175.281 95.2742 175.131 103.599L175.125 103.599C174.975 95.2743 168.305 88.5732 160.1 88.573L160.1 88.573C168.337 88.5728 175.027 81.8193 175.127 73.4495L175.13 73.4495Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M54.4787 -16.7114C54.579 -8.34162 61.2682 -1.58816 69.5054 -1.58816C69.5366 -1.58816 69.5679 -1.58826 69.5991 -1.58845L69.5991 -1.5876C69.5679 -1.58779 69.5366 -1.58789 69.5054 -1.58789C61.3002 -1.58789 54.6308 5.11334 54.4801 13.4382L54.4743 13.4382C54.3239 5.12609 47.6748 -1.56738 39.4869 -1.58793C47.7068 -1.60856 54.3758 -8.3543 54.4758 -16.7114L54.4787 -16.7114Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M175.13 -16.7114C175.23 -8.34162 181.919 -1.58816 190.156 -1.58816C190.188 -1.58816 190.219 -1.58826 190.25 -1.58845L190.25 -1.5876C190.219 -1.58779 190.187 -1.58789 190.156 -1.58789C181.951 -1.58789 175.281 5.11334 175.131 13.4382L175.125 13.4382C174.975 5.11345 168.305 -1.58772 160.1 -1.58789L160.1 -1.58792C168.337 -1.58809 175.027 -8.34162 175.127 -16.7114L175.13 -16.7114Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M-5.82117 73.4495C-5.7209 81.8193 0.968371 88.5728 9.20552 88.5728C9.23681 88.5728 9.26807 88.5727 9.29932 88.5725L9.29932 88.5733C9.26791 88.5731 9.23648 88.573 9.20503 88.573C0.999821 88.573 -5.66949 95.2742 -5.82019 103.599L-5.82541 103.599C-5.97611 95.2744 -12.6452 88.5732 -20.8503 88.573L-20.8503 88.573C-12.6132 88.5728 -5.92408 81.8193 -5.82394 73.4495L-5.82117 73.4495Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M114.83 73.4495C114.93 81.8193 121.62 88.5728 129.857 88.5728C129.888 88.5728 129.919 88.5727 129.951 88.5725L129.951 88.5733C129.919 88.5731 129.888 88.573 129.856 88.573C121.651 88.573 114.982 95.2742 114.831 103.599L114.826 103.599C114.675 95.2744 108.006 88.5732 99.8011 88.573L99.8011 88.573C108.038 88.5728 114.727 81.8193 114.827 73.4495L114.83 73.4495Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M84.6798 73.4495C84.78 81.8193 91.4693 88.5728 99.7065 88.5728C99.7378 88.5728 99.769 88.5727 99.8003 88.5725L99.8003 88.5733C99.7689 88.5731 99.7374 88.573 99.706 88.573C91.5008 88.573 84.8315 95.2742 84.6807 103.599L84.6755 103.599C84.5248 95.2744 77.8557 88.5732 69.6507 88.573L69.6507 88.573C77.8878 88.5728 84.5769 81.8193 84.677 73.4495L84.6798 73.4495Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M24.381 43.2998C24.4811 51.641 31.1252 58.3769 39.3237 58.4226C31.1565 58.4679 24.5317 65.1524 24.382 73.4494L24.3768 73.4494C24.227 65.1434 17.588 58.4535 9.40861 58.4225C17.6194 58.3913 24.2778 51.65 24.3781 43.2998L24.381 43.2998ZM39.5015 58.4227L39.5015 58.4225C39.498 58.4226 39.4946 58.4226 39.4912 58.4226C39.4946 58.4226 39.498 58.4226 39.5015 58.4227Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M145.032 43.2998C145.132 51.641 151.776 58.3769 159.975 58.4226C151.807 58.4679 145.183 65.1524 145.033 73.4494L145.028 73.4494C144.878 65.1435 138.239 58.4536 130.06 58.4225C138.27 58.3912 144.929 51.6499 145.029 43.2998L145.032 43.2998ZM160.152 58.4227L160.152 58.4225C160.149 58.4226 160.145 58.4226 160.142 58.4226C160.145 58.4226 160.149 58.4226 160.152 58.4227Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M-5.82161 43.2998C-5.72153 51.6411 0.922762 58.377 9.12139 58.4226C0.954238 58.468 -5.67049 65.1524 -5.82016 73.4494L-5.8259 73.4494C-5.97566 65.1458 -12.6108 58.4573 -20.7869 58.4224C-12.5794 58.3875 -5.92474 51.6476 -5.82446 43.2998L-5.82161 43.2998ZM9.29883 58.4227L9.29883 58.4225C9.29547 58.4226 9.29212 58.4226 9.28876 58.4226C9.29212 58.4226 9.29547 58.4226 9.29883 58.4227Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M114.83 43.2998C114.93 51.6411 121.574 58.377 129.773 58.4226C121.606 58.468 114.981 65.1524 114.831 73.4494L114.825 73.4494C114.676 65.1458 108.041 58.4573 99.8644 58.4224C108.072 58.3875 114.727 51.6476 114.827 43.2998L114.83 43.2998ZM129.95 58.4227L129.95 58.4225C129.947 58.4226 129.943 58.4226 129.94 58.4226C129.943 58.4226 129.947 58.4226 129.95 58.4227Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M84.6799 43.2998C84.7799 51.6411 91.4242 58.377 99.6229 58.4226C91.4557 58.468 84.831 65.1524 84.6813 73.4494L84.6756 73.4494C84.5258 65.1435 77.887 58.4536 69.7077 58.4225C77.9184 58.3912 84.5768 51.6499 84.6771 43.2998L84.6799 43.2998ZM99.8003 58.4227L99.8003 58.4225C99.7969 58.4226 99.7936 58.4226 99.7902 58.4226C99.7936 58.4226 99.7969 58.4226 99.8003 58.4227Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M54.53 43.2998C54.6302 51.6477 61.285 58.3876 69.4927 58.4224C61.3164 58.4572 54.6812 65.1457 54.5314 73.4494L54.5257 73.4494C54.376 65.1458 47.7408 58.4573 39.5647 58.4224C47.7722 58.3875 54.4269 51.6476 54.5272 43.2998L54.53 43.2998ZM69.6509 58.4226L69.6509 58.4223C69.6408 58.4223 69.6307 58.4224 69.6206 58.4224C69.6307 58.4225 69.6408 58.4225 69.6509 58.4226Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M175.181 43.2998C175.281 51.6477 181.936 58.3876 190.144 58.4224C181.967 58.4572 175.332 65.1457 175.182 73.4494L175.177 73.4494C175.027 65.1458 168.392 58.4573 160.216 58.4224C168.423 58.3875 175.078 51.6476 175.178 43.2998L175.181 43.2998ZM190.302 58.4226L190.302 58.4223C190.292 58.4223 190.282 58.4224 190.272 58.4224C190.282 58.4225 190.292 58.4225 190.302 58.4226Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M9.34961 -1.8764C9.31822 -1.8766 9.28682 -1.8767 9.25539 -1.8767C1.05009 -1.8767 -5.61928 4.82466 -5.76984 13.1496L-5.77554 13.1496C-5.9261 4.82493 -12.595 -1.87626 -20.8 -1.8767L-20.8 -1.87732C-12.5634 -1.87775 -5.87468 -8.63074 -5.77409 -17L-5.7714 -17C-5.67081 -8.63047 1.01833 -1.87732 9.25528 -1.87732C9.28674 -1.87732 9.31819 -1.87742 9.34961 -1.87761L9.34961 -1.8764Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M84.7326 13.1497C84.8333 21.4911 91.4785 28.2268 99.6777 28.2712C91.509 28.3152 84.8826 35.0009 84.7336 43.2992L84.7279 43.2992C84.5787 34.9928 77.9397 28.3022 69.76 28.2711C77.9703 28.2398 84.6284 21.4992 84.7293 13.1497L84.7326 13.1497ZM99.8525 28.2713L99.8525 28.2711C99.8485 28.2712 99.8445 28.2712 99.8404 28.2712C99.8445 28.2712 99.8485 28.2713 99.8525 28.2713Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M84.7306 -17C84.8311 -8.63038 91.5203 -1.87713 99.7573 -1.87713C99.7886 -1.87713 99.8198 -1.87723 99.8511 -1.87742L99.8511 -1.87633C99.8198 -1.87652 99.7886 -1.87662 99.7573 -1.87662C91.5521 -1.87662 84.8827 4.82469 84.7321 13.1496L84.7264 13.1496C84.5758 4.8248 77.9066 -1.87644 69.7015 -1.87661L69.7015 -1.87722C77.9383 -1.87739 84.6273 -8.63053 84.7279 -17L84.7306 -17Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M114.88 -17C114.98 -8.63043 121.669 -1.87722 129.906 -1.87722C129.938 -1.87722 129.969 -1.87732 130 -1.87752L130 -1.8764C129.969 -1.8766 129.938 -1.8767 129.906 -1.8767C121.701 -1.8767 115.032 4.82466 114.881 13.1496L114.875 13.1496C114.725 4.82494 108.056 -1.87624 99.8509 -1.8767L99.8509 -1.87732C108.087 -1.87778 114.776 -8.63075 114.877 -17L114.88 -17Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M24.3801 13.1497C24.4808 21.4908 31.1255 28.2263 39.3243 28.2712C31.1561 28.3159 24.5305 35.0013 24.3814 43.2992L24.3758 43.2992C24.2267 34.9951 17.5913 28.3059 9.41475 28.2711C17.6219 28.2361 24.2763 21.4969 24.3772 13.1497L24.3801 13.1497ZM39.5 28.2712L39.5 28.2711C39.4964 28.2711 39.4928 28.2711 39.4892 28.2712C39.4928 28.2712 39.4964 28.2712 39.5 28.2712Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M9.29785 28.2712L9.29785 28.271C9.29427 28.2711 9.29068 28.2711 9.2871 28.2711C9.29068 28.2711 9.29427 28.2711 9.29785 28.2712ZM-5.82202 13.1497C-5.72124 21.4908 0.923448 28.2262 9.12221 28.2711C0.95404 28.3158 -5.67163 35.0013 -5.82062 43.2992L-5.82624 43.2992C-5.97534 34.9951 -12.6108 28.3059 -20.7873 28.271C-12.5802 28.236 -5.92579 21.4969 -5.82484 13.1497L-5.82202 13.1497Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M54.5277 13.1497C54.6283 21.4858 61.265 28.2183 69.457 28.2713C61.2958 28.324 54.6781 35.0063 54.5292 43.2992L54.5235 43.2992C54.3744 34.9951 47.739 28.3059 39.5625 28.2711C47.7696 28.2361 54.424 21.4969 54.5249 13.1497L54.5277 13.1497Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M24.3796 -17C24.4801 -8.63038 31.1692 -1.87713 39.4062 -1.87713C39.4374 -1.87713 39.4684 -1.87723 39.4995 -1.87742L39.4995 -1.87632C39.4684 -1.87651 39.4373 -1.87661 39.4062 -1.87661C31.201 -1.87661 24.5316 4.8247 24.381 13.1496L24.3753 13.1496C24.2247 4.8247 17.5553 -1.87661 9.35007 -1.87661C9.35002 -1.87661 9.34998 -1.87661 9.34993 -1.87661L9.34993 -1.87722C9.34997 -1.87722 9.35002 -1.87722 9.35007 -1.87722C17.587 -1.87722 24.2762 -8.63043 24.3768 -17L24.3796 -17Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M145.031 13.1499C145.132 21.491 151.776 28.2265 159.975 28.2714C151.807 28.3161 145.181 35.0015 145.032 43.2995L145.027 43.2995C144.878 34.9953 138.242 28.3062 130.066 28.2713C138.273 28.2363 144.927 21.4972 145.028 13.1499L145.031 13.1499ZM160.151 28.2715L160.151 28.2713C160.147 28.2714 160.144 28.2714 160.14 28.2714C160.144 28.2714 160.147 28.2715 160.151 28.2715Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M114.829 13.1499C114.93 21.491 121.574 28.2265 129.773 28.2713C121.605 28.3161 114.979 35.0015 114.83 43.2995L114.825 43.2995C114.676 34.9953 108.04 28.3061 99.8636 28.2713C108.071 28.2363 114.725 21.4971 114.826 13.1499L114.829 13.1499ZM129.949 28.2714L129.949 28.2713C129.945 28.2713 129.942 28.2713 129.938 28.2713C129.942 28.2714 129.945 28.2714 129.949 28.2714Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M175.179 13.1499C175.279 21.4861 181.916 28.2186 190.108 28.2715C181.947 28.3243 175.329 35.0066 175.18 43.2995L175.174 43.2995C175.025 34.9953 168.39 28.3062 160.213 28.2713C168.42 28.2363 175.075 21.4972 175.176 13.1499L175.179 13.1499Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M145.03 -16.9998C145.131 -8.63014 151.82 -1.87689 160.057 -1.87689C160.088 -1.87689 160.119 -1.87698 160.15 -1.87718L160.15 -1.87607C160.119 -1.87627 160.088 -1.87636 160.057 -1.87636C151.852 -1.87636 145.182 4.82494 145.032 13.1498L145.026 13.1498C144.876 4.82494 138.206 -1.87636 130.001 -1.87636C130.001 -1.87636 130.001 -1.87636 130.001 -1.87636L130.001 -1.87698C130.001 -1.87698 130.001 -1.87698 130.001 -1.87698C138.238 -1.87698 144.927 -8.63018 145.028 -16.9998L145.03 -16.9998Z" fill="#6038D0"/>
</mask>
<g mask="url(#mask1_9908_107572)">
<path d="M69.2342 1.27275L190.2 -16.6345L160.05 89.4402H-62.3657L69.2342 1.27275Z" fill="#E1FC31"/>
</g>
<mask id="mask2_9908_107572" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="206" y="78" width="242" height="121">
<path fill-rule="evenodd" clip-rule="evenodd" d="M281.381 168.45C281.482 176.819 288.171 183.573 296.408 183.573C296.439 183.573 296.47 183.572 296.501 183.572L296.501 183.573C296.47 183.573 296.439 183.573 296.407 183.573C288.202 183.573 281.532 190.274 281.382 198.599L281.377 198.599C281.226 190.274 274.557 183.573 266.352 183.573L266.352 183.573C274.589 183.573 281.278 176.819 281.378 168.45L281.381 168.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M402.032 168.45C402.133 176.819 408.822 183.573 417.059 183.573C417.09 183.573 417.122 183.572 417.153 183.572L417.153 183.573C417.121 183.573 417.09 183.573 417.059 183.573C408.853 183.573 402.184 190.274 402.033 198.599L402.028 198.599C401.878 190.274 395.208 183.573 387.003 183.573L387.003 183.573C395.24 183.573 401.929 176.819 402.03 168.45L402.032 168.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M311.479 168.45C311.579 176.819 318.268 183.572 326.505 183.572C326.537 183.572 326.568 183.572 326.599 183.572L326.599 183.573C326.568 183.573 326.536 183.573 326.505 183.573C318.3 183.573 311.63 190.274 311.48 198.599L311.474 198.599C311.324 190.274 304.655 183.573 296.45 183.573L296.45 183.573C304.686 183.573 311.375 176.819 311.476 168.45L311.479 168.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M311.479 78.2888C311.579 86.6585 318.268 93.4118 326.505 93.4118C326.537 93.4118 326.568 93.4117 326.599 93.4115L326.599 93.4124C326.568 93.4122 326.536 93.4121 326.505 93.4121C318.3 93.4121 311.63 100.113 311.48 108.438L311.474 108.438C311.324 100.114 304.655 93.4123 296.45 93.4121L296.45 93.4121C304.687 93.4119 311.376 86.6585 311.476 78.2888L311.479 78.2888Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M251.179 168.45C251.279 176.819 257.969 183.573 266.206 183.573C266.237 183.573 266.268 183.572 266.299 183.572L266.299 183.573C266.268 183.573 266.236 183.573 266.205 183.573C258 183.573 251.33 190.274 251.18 198.599L251.175 198.599C251.024 190.274 244.355 183.573 236.15 183.573L236.15 183.573C244.387 183.573 251.076 176.819 251.176 168.45L251.179 168.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M371.83 168.45C371.931 176.819 378.62 183.573 386.857 183.573C386.888 183.573 386.919 183.572 386.951 183.572L386.951 183.573C386.919 183.573 386.888 183.573 386.856 183.573C378.651 183.573 371.982 190.274 371.831 198.599L371.826 198.599C371.676 190.274 365.006 183.573 356.801 183.573L356.801 183.573C365.038 183.573 371.727 176.819 371.827 168.45L371.83 168.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M221.029 168.45C221.129 176.819 227.819 183.573 236.056 183.573C236.087 183.573 236.118 183.572 236.149 183.572L236.149 183.573C236.118 183.573 236.087 183.573 236.055 183.573C227.85 183.573 221.18 190.274 221.03 198.599L221.025 198.599C220.874 190.274 214.205 183.573 206 183.573L206 183.573C214.237 183.573 220.926 176.819 221.026 168.45L221.029 168.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M341.68 168.45C341.78 176.819 348.47 183.573 356.707 183.573C356.738 183.573 356.769 183.572 356.8 183.572L356.8 183.573C356.769 183.573 356.737 183.573 356.706 183.573C348.501 183.573 341.831 190.274 341.681 198.599L341.676 198.599C341.525 190.274 334.856 183.573 326.651 183.573L326.651 183.573C334.888 183.573 341.577 176.819 341.677 168.45L341.68 168.45Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M281.381 138.3C281.481 146.643 288.128 153.38 296.329 153.423C288.159 153.465 281.532 160.151 281.382 168.45L281.377 168.45C281.227 160.144 274.588 153.454 266.409 153.423C274.62 153.391 281.278 146.65 281.378 138.3L281.381 138.3ZM296.501 153.423L296.501 153.423C296.496 153.423 296.491 153.423 296.486 153.423C296.491 153.423 296.496 153.423 296.501 153.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M402.032 138.3C402.132 146.643 408.78 153.38 416.98 153.423C408.811 153.465 402.183 160.151 402.033 168.45L402.028 168.45C401.878 160.144 395.239 153.454 387.06 153.423C395.271 153.391 401.929 146.65 402.03 138.3L402.032 138.3ZM417.153 153.423L417.153 153.423C417.148 153.423 417.142 153.423 417.137 153.423C417.142 153.423 417.148 153.423 417.153 153.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M251.179 138.3C251.279 146.643 257.926 153.38 266.127 153.423C257.958 153.465 251.33 160.151 251.18 168.45L251.175 168.45C251.025 160.144 244.386 153.454 236.207 153.423C244.417 153.391 251.076 146.65 251.176 138.3L251.179 138.3ZM266.299 153.423L266.299 153.423C266.294 153.423 266.289 153.423 266.284 153.423C266.289 153.423 266.294 153.423 266.299 153.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M371.83 138.3C371.93 146.643 378.577 153.38 386.778 153.423C378.608 153.465 371.981 160.151 371.831 168.45L371.825 168.45C371.676 160.144 365.037 153.454 356.858 153.423C365.068 153.391 371.727 146.65 371.827 138.3L371.83 138.3ZM386.95 153.423L386.95 153.423C386.945 153.423 386.94 153.423 386.935 153.423C386.94 153.423 386.945 153.423 386.95 153.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M221.029 138.3C221.129 146.643 227.776 153.38 235.977 153.423C227.807 153.465 221.18 160.151 221.03 168.45L221.025 168.45C220.875 160.144 214.236 153.454 206.057 153.423C214.268 153.391 220.926 146.65 221.026 138.3L221.029 138.3ZM236.149 153.423L236.149 153.423C236.144 153.423 236.139 153.423 236.134 153.423C236.139 153.423 236.144 153.423 236.149 153.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M341.68 138.3C341.78 146.643 348.427 153.38 356.628 153.423C348.458 153.465 341.831 160.151 341.681 168.45L341.676 168.45C341.526 160.144 334.887 153.454 326.708 153.423C334.918 153.391 341.577 146.65 341.677 138.3L341.68 138.3ZM356.8 153.423L356.8 153.423C356.795 153.423 356.79 153.423 356.785 153.423C356.79 153.423 356.795 153.423 356.8 153.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M311.53 138.3C311.63 146.648 318.285 153.388 326.493 153.423C318.316 153.457 311.681 160.146 311.531 168.45L311.526 168.45C311.376 160.146 304.741 153.457 296.564 153.423C304.772 153.388 311.427 146.648 311.527 138.3L311.53 138.3ZM326.651 153.423L326.651 153.422C326.641 153.423 326.631 153.423 326.621 153.423C326.631 153.423 326.641 153.423 326.651 153.423Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M221.082 108.15C221.183 116.49 227.825 123.224 236.022 123.271C227.855 123.318 221.232 130.003 221.083 138.299L221.077 138.299C220.928 129.993 214.289 123.302 206.109 123.271C214.319 123.24 220.977 116.499 221.078 108.15L221.082 108.15ZM236.202 123.271L236.202 123.271C236.199 123.271 236.197 123.271 236.195 123.271C236.197 123.271 236.199 123.271 236.202 123.271Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M221.08 78C221.18 86.3696 227.869 93.1228 236.106 93.1228C236.138 93.1228 236.169 93.1227 236.2 93.1225L236.2 93.1236C236.169 93.1234 236.138 93.1233 236.106 93.1233C227.901 93.1233 221.232 99.8247 221.081 108.15L221.076 108.15C220.925 99.8248 214.256 93.1236 206.051 93.1234L206.051 93.1228C214.287 93.1226 220.976 86.3695 221.077 78L221.08 78Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M251.229 78C251.329 86.3696 258.018 93.1228 266.255 93.1228C266.287 93.1228 266.318 93.1227 266.35 93.1225L266.35 93.1237C266.318 93.1235 266.287 93.1234 266.255 93.1234C258.05 93.1234 251.381 99.8247 251.23 108.15L251.224 108.15C251.074 99.825 244.405 93.1238 236.2 93.1234L236.2 93.1227C244.437 93.1223 251.125 86.3693 251.226 78L251.229 78Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M341.733 108.15C341.833 116.49 348.476 123.224 356.673 123.271C348.506 123.318 341.882 130.003 341.734 138.299L341.728 138.299C341.579 129.993 334.94 123.302 326.76 123.271C334.97 123.24 341.628 116.499 341.729 108.15L341.733 108.15ZM356.853 123.271L356.853 123.271C356.85 123.271 356.848 123.271 356.845 123.271C356.848 123.271 356.85 123.271 356.853 123.271Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M341.731 78C341.831 86.3696 348.52 93.1228 356.757 93.1228C356.789 93.1228 356.82 93.1227 356.851 93.1225L356.851 93.1236C356.82 93.1234 356.789 93.1233 356.757 93.1233C348.552 93.1233 341.883 99.8247 341.732 108.15L341.726 108.15C341.576 99.8248 334.907 93.1236 326.701 93.1234L326.701 93.1228C334.938 93.1226 341.627 86.3695 341.728 78L341.731 78Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M387 93.1237C386.969 93.1235 386.938 93.1234 386.906 93.1234C378.701 93.1234 372.032 99.8247 371.881 108.15L371.875 108.15C371.725 99.825 365.056 93.1238 356.851 93.1234L356.851 93.1227C365.087 93.1223 371.776 86.3693 371.877 78L371.879 78C371.98 86.3696 378.669 93.1227 386.906 93.1227C386.938 93.1227 386.969 93.1226 387 93.1224L387 93.1237Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M281.38 108.15C281.481 116.491 288.126 123.226 296.324 123.271C288.156 123.316 281.53 130.001 281.381 138.299L281.376 138.299C281.227 129.995 274.591 123.306 266.415 123.271C274.622 123.236 281.276 116.497 281.377 108.15L281.38 108.15ZM296.5 123.271L296.5 123.271C296.496 123.271 296.493 123.271 296.489 123.271C296.493 123.271 296.496 123.271 296.5 123.271Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M266.298 123.271L266.298 123.271C266.295 123.271 266.291 123.271 266.288 123.271C266.291 123.271 266.295 123.271 266.298 123.271ZM251.178 108.15C251.279 116.491 257.924 123.226 266.123 123.271C257.954 123.316 251.329 130.001 251.18 138.299L251.174 138.299C251.025 129.995 244.39 123.306 236.213 123.271C244.42 123.236 251.075 116.497 251.176 108.15L251.178 108.15Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M311.528 108.15C311.629 116.486 318.265 123.218 326.457 123.271C318.296 123.324 311.678 130.007 311.529 138.299L311.524 138.299C311.375 129.995 304.739 123.306 296.562 123.271C304.77 123.236 311.424 116.497 311.525 108.15L311.528 108.15Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M281.38 78.0002C281.481 86.3698 288.17 93.1231 296.407 93.1231C296.438 93.1231 296.469 93.123 296.5 93.1228L296.5 93.1239C296.469 93.1237 296.438 93.1236 296.407 93.1236C288.201 93.1236 281.532 99.8249 281.381 108.15L281.376 108.15C281.225 99.8249 274.556 93.1236 266.351 93.1236C266.35 93.1236 266.35 93.1236 266.35 93.1236L266.35 93.123C266.35 93.123 266.35 93.123 266.351 93.123C274.587 93.123 281.277 86.3698 281.377 78.0002L281.38 78.0002Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M402.031 108.15C402.132 116.491 408.776 123.226 416.975 123.271C408.807 123.316 402.181 130.001 402.032 138.299L402.027 138.299C401.878 129.995 395.242 123.306 387.065 123.271C395.273 123.236 401.927 116.497 402.028 108.15L402.031 108.15ZM417.151 123.271L417.151 123.271C417.147 123.271 417.144 123.271 417.14 123.271C417.144 123.271 417.147 123.271 417.151 123.271Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M386.949 123.271L386.949 123.271C386.946 123.271 386.942 123.271 386.938 123.271C386.942 123.271 386.946 123.271 386.949 123.271ZM371.829 108.15C371.93 116.491 378.575 123.226 386.774 123.271C378.605 123.316 371.98 130.001 371.831 138.299L371.825 138.299C371.676 129.995 365.04 123.306 356.864 123.271C365.071 123.236 371.726 116.497 371.827 108.15L371.829 108.15Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M402.031 78.0002C402.131 86.3698 408.821 93.1231 417.058 93.1231C417.089 93.1231 417.12 93.123 417.151 93.1228L417.151 93.1239C417.12 93.1237 417.089 93.1236 417.058 93.1236C408.852 93.1236 402.183 99.8249 402.032 108.15L402.027 108.15C401.876 99.8249 395.207 93.1236 387.001 93.1236C387.001 93.1236 387.001 93.1236 387.001 93.1236L387.001 93.123C387.001 93.123 387.001 93.123 387.001 93.123C395.238 93.123 401.928 86.3698 402.028 78.0002L402.031 78.0002Z" fill="#6038D0"/>
</mask>
<g mask="url(#mask2_9908_107572)">
<path d="M267.396 102.851L341.584 71.97L457.541 306.5H196.79L267.396 102.851Z" fill="#E8E0FF"/>
</g>
<mask id="mask3_9908_107572" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="261" y="162" width="162" height="82">
<path fill-rule="evenodd" clip-rule="evenodd" d="M392.286 202.828C392.353 208.389 396.781 212.879 402.247 212.91C396.802 212.941 392.386 217.397 392.287 222.928L392.283 222.928C392.183 217.392 387.759 212.932 382.308 212.91C387.78 212.887 392.217 208.394 392.284 202.828L392.286 202.828ZM402.366 212.91L402.366 212.91C402.364 212.91 402.363 212.91 402.361 212.91C402.363 212.91 402.364 212.91 402.366 212.91Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M382.231 212.91L382.231 212.91C382.229 212.91 382.227 212.91 382.225 212.91C382.227 212.91 382.229 212.91 382.231 212.91ZM372.151 202.828C372.217 208.389 376.646 212.879 382.111 212.91C376.667 212.941 372.251 217.397 372.151 222.928L372.148 222.928C372.048 217.392 367.624 212.932 362.172 212.91C367.644 212.887 372.082 208.394 372.149 202.828L372.151 202.828Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M362.131 212.91L362.131 212.91C362.129 212.91 362.127 212.91 362.125 212.91C362.127 212.91 362.129 212.91 362.131 212.91ZM352.05 202.828C352.117 208.389 356.546 212.879 362.011 212.91C356.567 212.941 352.151 217.397 352.051 222.928L352.047 222.928C351.948 217.392 347.524 212.932 342.072 212.91C347.544 212.887 351.981 208.394 352.048 202.828L352.05 202.828Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M331.951 162.82C332.018 168.4 336.477 172.902 341.969 172.902C341.99 172.902 342.01 172.902 342.031 172.902L342.031 172.903C342.01 172.902 341.99 172.902 341.969 172.902C336.498 172.902 332.052 177.37 331.952 182.92L331.948 182.92C331.848 177.381 327.419 172.921 321.965 172.902C327.441 172.884 331.882 168.389 331.949 162.82L331.951 162.82Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M321.966 212.91L321.966 212.91C321.964 212.91 321.963 212.91 321.961 212.91C321.963 212.91 321.964 212.91 321.966 212.91ZM311.886 202.828C311.953 208.389 316.381 212.879 321.847 212.91C316.402 212.941 311.987 217.397 311.887 222.928L311.883 222.928C311.783 217.392 307.359 212.932 301.908 212.91C307.38 212.887 311.817 208.394 311.884 202.828L311.886 202.828Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M291.751 202.828C291.817 208.389 296.246 212.879 301.711 212.91C296.267 212.941 291.851 217.397 291.752 222.928L291.748 222.928C291.648 217.392 287.224 212.932 281.772 212.91C287.245 212.887 291.682 208.394 291.749 202.828L291.751 202.828ZM301.831 212.91L301.831 212.91C301.829 212.91 301.827 212.91 301.826 212.91C301.827 212.91 301.829 212.91 301.831 212.91Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.651 202.828C271.717 208.389 276.146 212.879 281.611 212.91C276.167 212.941 271.751 217.397 271.651 222.928L271.648 222.928C271.548 217.392 267.124 212.932 261.672 212.91C267.145 212.887 271.582 208.394 271.649 202.828L271.651 202.828ZM281.731 212.91L281.731 212.91C281.729 212.91 281.727 212.91 281.725 212.91C281.727 212.91 281.729 212.91 281.731 212.91Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M331.985 202.828C332.052 208.393 336.487 212.885 341.958 212.91C336.508 212.934 332.086 217.393 331.986 222.928L331.982 222.928C331.882 217.392 327.458 212.932 322.007 212.91C327.479 212.887 331.916 208.394 331.983 202.828L331.985 202.828ZM342.066 212.91L342.066 212.91C342.06 212.91 342.054 212.91 342.048 212.91C342.054 212.91 342.06 212.91 342.066 212.91Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M352.086 182.727C352.153 188.286 356.58 192.776 362.044 192.808C356.601 192.84 352.186 197.296 352.087 202.827L352.083 202.827C351.984 197.291 347.559 192.831 342.108 192.808C347.579 192.785 352.016 188.292 352.084 182.727L352.086 182.727ZM362.166 192.808L362.166 192.808C362.165 192.808 362.164 192.808 362.163 192.808C362.164 192.808 362.165 192.808 362.166 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M352.085 162.627C352.152 168.207 356.611 172.709 362.102 172.709C362.123 172.709 362.144 172.709 362.165 172.709L362.165 172.709C362.144 172.709 362.123 172.709 362.102 172.709C356.632 172.709 352.186 177.177 352.085 182.727L352.082 182.727C351.981 177.177 347.535 172.709 342.065 172.709L342.065 172.709C347.556 172.709 352.016 168.207 352.083 162.627L352.085 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M372.184 162.627C372.251 168.207 376.71 172.709 382.202 172.709C382.223 172.709 382.244 172.709 382.265 172.708L382.265 172.709C382.244 172.709 382.223 172.709 382.202 172.709C376.731 172.709 372.285 177.177 372.185 182.727L372.181 182.727C372.081 177.177 367.635 172.709 362.165 172.709L362.165 172.709C367.656 172.708 372.115 168.206 372.182 162.627L372.184 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.686 182.727C271.753 188.286 276.18 192.776 281.644 192.808C276.201 192.84 271.786 197.296 271.687 202.827L271.683 202.827C271.584 197.291 267.159 192.831 261.708 192.808C267.18 192.785 271.616 188.292 271.684 182.727L271.686 182.727ZM281.766 192.808L281.766 192.808C281.765 192.808 281.764 192.808 281.763 192.808C281.764 192.808 281.765 192.808 281.766 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.685 162.627C271.752 168.207 276.211 172.709 281.703 172.709C281.723 172.709 281.744 172.709 281.765 172.709L281.765 172.709C281.744 172.709 281.723 172.709 281.702 172.709C276.232 172.709 271.786 177.177 271.686 182.727L271.682 182.727C271.582 177.177 267.135 172.709 261.665 172.709L261.665 172.709C267.156 172.709 271.616 168.207 271.683 162.627L271.685 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M291.784 162.627C291.851 168.207 296.31 172.709 301.802 172.709C301.823 172.709 301.844 172.709 301.865 172.708L301.865 172.709C301.844 172.709 301.823 172.709 301.802 172.709C296.331 172.709 291.885 177.177 291.785 182.727L291.781 182.727C291.681 177.177 287.235 172.709 281.765 172.709L281.765 172.709C287.256 172.708 291.715 168.206 291.782 162.627L291.784 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392.287 182.727C392.354 188.286 396.782 192.776 402.245 192.808C396.802 192.84 392.387 197.296 392.288 202.827L392.284 202.827C392.185 197.29 387.76 192.831 382.309 192.808C387.781 192.785 392.217 188.292 392.285 182.727L392.287 182.727ZM402.367 192.808L402.367 192.808C402.366 192.808 402.365 192.808 402.364 192.808C402.365 192.808 402.366 192.808 402.367 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M372.152 182.727C372.219 188.286 376.647 192.776 382.111 192.808C376.667 192.84 372.252 197.296 372.153 202.827L372.149 202.827C372.05 197.29 367.626 192.831 362.174 192.808C367.646 192.785 372.083 188.292 372.15 182.727L372.152 182.727ZM382.232 192.808L382.232 192.808C382.231 192.808 382.23 192.808 382.229 192.808C382.23 192.808 382.231 192.808 382.232 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392.286 162.627C392.353 168.207 396.813 172.709 402.304 172.709C402.325 172.709 402.346 172.709 402.366 172.708L402.366 172.709C402.346 172.709 402.325 172.709 402.304 172.709C396.834 172.709 392.388 177.177 392.287 182.727L392.284 182.727C392.183 177.177 387.737 172.709 382.267 172.709C382.267 172.709 382.266 172.709 382.266 172.709L382.266 172.709C382.266 172.709 382.267 172.709 382.267 172.709C387.758 172.709 392.217 168.207 392.284 162.627L392.286 162.627Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M311.885 182.727C311.953 188.286 316.38 192.776 321.844 192.808C316.4 192.84 311.986 197.296 311.886 202.827L311.883 202.827C311.783 197.29 307.359 192.831 301.907 192.808C307.379 192.785 311.816 188.292 311.884 182.727L311.885 182.727ZM321.965 192.808L321.965 192.808C321.964 192.808 321.963 192.808 321.963 192.808C321.963 192.808 321.964 192.808 321.965 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M291.751 182.727C291.818 188.286 296.245 192.776 301.709 192.808C296.266 192.84 291.851 197.296 291.752 202.827L291.748 202.827C291.649 197.29 287.224 192.831 281.773 192.808C287.244 192.785 291.681 188.292 291.749 182.727L291.751 182.727ZM301.831 192.808L301.831 192.808C301.83 192.808 301.829 192.808 301.828 192.808C301.829 192.808 301.83 192.808 301.831 192.808Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M342.065 192.808L342.065 192.808C342.064 192.808 342.062 192.808 342.061 192.808C342.062 192.808 342.064 192.808 342.065 192.808ZM331.984 182.727C332.051 188.287 336.478 192.776 341.942 192.808C336.499 192.84 332.084 197.296 331.985 202.827L331.981 202.827C331.882 197.29 327.457 192.831 322.005 192.808C327.477 192.785 331.914 188.292 331.982 182.727L331.984 182.727Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M311.885 162.627C311.952 168.207 316.411 172.709 321.903 172.709C321.923 172.709 321.944 172.709 321.965 172.709L321.965 172.709C321.944 172.709 321.923 172.709 321.903 172.709C316.432 172.709 311.986 177.177 311.886 182.727L311.882 182.727C311.782 177.177 307.335 172.709 301.865 172.709C301.865 172.709 301.865 172.709 301.865 172.709L301.865 172.709C301.865 172.709 301.865 172.709 301.865 172.709C307.356 172.709 311.816 168.207 311.883 162.627L311.885 162.627Z" fill="#6038D0"/>
</mask>
<g mask="url(#mask3_9908_107572)">
<path d="M324.158 137.959L422.466 162.627L405.106 229.323L261.666 243.027L324.158 137.959Z" fill="#0C422A"/>
</g>
<path fill-rule="evenodd" clip-rule="evenodd" d="M377.319 38.2C377.386 43.7798 381.846 48.2821 387.337 48.2821C387.358 48.2821 387.379 48.282 387.4 48.2819L387.4 48.2826C387.379 48.2824 387.358 48.2824 387.337 48.2824C381.867 48.2824 377.421 52.7499 377.32 58.2998L377.317 58.2998C377.216 52.75 372.77 48.2826 367.3 48.2824L367.3 48.2823C372.791 48.2821 377.251 43.7798 377.318 38.2L377.319 38.2Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M337.119 38.2C337.186 43.7798 341.646 48.2821 347.137 48.2821C347.158 48.2821 347.179 48.282 347.2 48.2819L347.2 48.2826C347.179 48.2824 347.158 48.2824 347.137 48.2824C341.667 48.2824 337.221 52.7499 337.12 58.2998L337.116 58.2998C337.016 52.75 332.57 48.2826 327.1 48.2824L327.1 48.2823C332.591 48.2821 337.051 43.7798 337.117 38.2L337.119 38.2Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M317.019 38.2C317.086 43.7798 321.546 48.2821 327.037 48.2821C327.058 48.2821 327.079 48.282 327.1 48.2819L327.1 48.2826C327.079 48.2824 327.058 48.2824 327.037 48.2824C321.567 48.2824 317.121 52.7499 317.02 58.2998L317.016 58.2998C316.916 52.75 312.47 48.2826 307 48.2824L307 48.2823C312.491 48.282 316.95 43.7797 317.017 38.2L317.019 38.2Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M357.255 18.1006C357.321 23.6583 361.746 28.147 367.208 28.1824C361.767 28.2176 357.355 32.6721 357.256 38.2004L357.252 38.2004C357.152 32.6642 352.728 28.2048 347.276 28.1822C352.749 28.1596 357.186 23.6662 357.253 18.1006L357.255 18.1006Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M337.119 18.1006C337.186 23.6583 341.611 28.147 347.072 28.1823C341.632 28.2176 337.22 32.6721 337.12 38.2004L337.117 38.2004C337.017 32.6643 332.593 28.2049 327.142 28.1822C332.614 28.1594 337.051 23.6661 337.118 18.1006L337.119 18.1006Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M317.019 18.1006C317.086 23.6583 321.511 28.147 326.972 28.1824C321.532 28.2176 317.12 32.6721 317.02 38.2004L317.016 38.2004C316.917 32.6642 312.493 28.2048 307.041 28.1822C312.513 28.1596 316.95 23.6662 317.017 18.1006L317.019 18.1006Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M377.353 18.1006C377.42 23.664 381.854 28.156 387.323 28.1822C381.875 28.2083 377.454 32.6664 377.354 38.2004L377.35 38.2004C377.251 32.6642 372.826 28.2048 367.375 28.1822C372.847 28.1596 377.284 23.6662 377.351 18.1006L377.353 18.1006ZM387.434 28.1823L387.434 28.1822C387.429 28.1822 387.424 28.1822 387.419 28.1822C387.424 28.1823 387.429 28.1823 387.434 28.1823Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M337.119 -2C337.186 3.55923 341.614 8.04856 347.078 8.08082C341.634 8.11296 337.219 12.5692 337.12 18.0998L337.116 18.0998C337.017 12.5632 332.593 8.10331 327.141 8.08073C332.613 8.05806 337.05 3.56515 337.117 -2L337.119 -2ZM347.199 8.08084L347.199 8.0808C347.198 8.08081 347.197 8.08081 347.196 8.08082C347.197 8.08082 347.198 8.08083 347.199 8.08084Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.652 11.6951C271.719 17.2751 276.179 21.7775 281.67 21.7775C281.691 21.7775 281.712 21.7774 281.733 21.7773L281.733 21.7778C281.712 21.7776 281.691 21.7776 281.67 21.7776C276.2 21.7776 271.754 26.245 271.653 31.7949L271.65 31.7949C271.549 26.2563 267.121 21.7958 261.666 21.7776C267.142 21.7593 271.584 17.2638 271.65 11.6951L271.652 11.6951Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M231.452 11.6951C231.519 17.2751 235.979 21.7775 241.47 21.7775C241.491 21.7775 241.512 21.7774 241.533 21.7773L241.533 21.7778C241.512 21.7776 241.491 21.7776 241.47 21.7776C236 21.7776 231.554 26.245 231.453 31.7949L231.449 31.7949C231.349 26.2563 226.921 21.7958 221.466 21.7776C226.942 21.7593 231.384 17.2638 231.45 11.6951L231.452 11.6951Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M211.352 11.6951C211.419 17.2751 215.879 21.7775 221.37 21.7775C221.391 21.7775 221.412 21.7774 221.433 21.7773L221.433 21.7778C221.412 21.7776 221.391 21.7776 221.37 21.7776C215.9 21.7776 211.454 26.245 211.353 31.7949L211.349 31.7949C211.249 26.2563 206.821 21.7958 201.366 21.7776C206.842 21.7593 211.284 17.2638 211.35 11.6951L211.352 11.6951Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M251.588 -8.40503C251.654 -2.84595 256.081 1.64357 261.544 1.67689C256.102 1.71009 251.688 6.16531 251.589 11.6948L251.585 11.6948C251.485 6.15865 247.061 1.69938 241.609 1.6768C247.082 1.65413 251.519 -2.83938 251.586 -8.40503L251.588 -8.40503ZM261.668 1.6769L261.668 1.67689C261.668 1.67689 261.667 1.67689 261.667 1.67689C261.667 1.6769 261.668 1.6769 261.668 1.6769Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M231.452 -8.40503C231.519 -2.84595 235.946 1.64357 241.409 1.67689C235.967 1.71009 231.553 6.16531 231.453 11.6948L231.449 11.6948C231.349 6.15865 226.925 1.69938 221.474 1.6768C226.946 1.65413 231.383 -2.83938 231.45 -8.40503L231.452 -8.40503ZM241.533 1.6769L241.533 1.67689C241.532 1.67689 241.532 1.67689 241.531 1.67689C241.532 1.6769 241.532 1.6769 241.533 1.6769Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M211.352 -8.40503C211.419 -2.84595 215.845 1.64357 221.309 1.67689C215.866 1.71009 211.453 6.16531 211.353 11.6948L211.349 11.6948C211.249 6.15865 206.825 1.69938 201.374 1.6768C206.846 1.65413 211.283 -2.83938 211.35 -8.40503L211.352 -8.40503ZM221.433 1.6769L221.433 1.67689C221.432 1.67689 221.432 1.67689 221.431 1.67689C221.432 1.6769 221.432 1.6769 221.433 1.6769Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M271.686 -8.40503C271.753 -2.83935 276.19 1.65418 281.662 1.67685C276.211 1.69943 271.787 6.15868 271.687 11.6948L271.683 11.6948C271.584 6.15868 267.159 1.69943 261.708 1.67685C267.18 1.65418 271.618 -2.83935 271.684 -8.40503L271.686 -8.40503ZM281.767 1.67696L281.767 1.67674C281.76 1.67678 281.753 1.67682 281.746 1.67685C281.753 1.67688 281.76 1.67692 281.767 1.67696Z" fill="#E1FC31"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M70.2853 197.711C70.3522 203.291 74.8117 207.793 80.3031 207.793C80.324 207.793 80.3449 207.793 80.3657 207.793L80.3657 207.794C80.3449 207.793 80.324 207.793 80.3031 207.793C74.8329 207.793 70.3866 212.261 70.2863 217.811L70.2824 217.811C70.1823 212.272 65.7538 207.811 60.2988 207.793C65.775 207.775 70.2166 203.28 70.2833 197.711L70.2853 197.711Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M30.0851 197.711C30.152 203.291 34.6115 207.793 40.1029 207.793C40.1238 207.793 40.1447 207.793 40.1655 207.793L40.1655 207.794C40.1447 207.793 40.1238 207.793 40.1029 207.793C34.6327 207.793 30.1864 212.261 30.0861 217.811L30.0822 217.811C29.9821 212.275 25.5582 207.816 20.1072 207.793C25.5795 207.771 30.0166 203.277 30.0832 197.711L30.0851 197.711Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M9.985 197.711C10.0519 203.291 14.5114 207.793 20.0028 207.793C20.0237 207.793 20.0446 207.793 20.0654 207.793L20.0654 207.794C20.0446 207.793 20.0237 207.793 20.0028 207.793C14.5326 207.793 10.0863 212.261 9.98597 217.811L9.98212 217.811C9.88199 212.272 5.45349 207.811 -0.00154539 207.793C5.47466 207.775 9.91633 203.28 9.98302 197.711L9.985 197.711Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M50.2204 177.612C50.2872 183.174 54.7187 187.665 60.1861 187.694C54.7396 187.722 50.3211 192.179 50.2213 197.712L50.2174 197.712C50.1176 192.175 45.6935 187.716 40.2421 187.693C45.7143 187.671 50.1514 183.177 50.2184 177.612L50.2204 177.612ZM60.3008 187.694L60.3008 187.694C60.2973 187.694 60.2938 187.694 60.2903 187.694C60.2938 187.694 60.2973 187.694 60.3008 187.694Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M40.1655 187.694L40.1655 187.693C40.162 187.693 40.1585 187.694 40.1551 187.694C40.1585 187.694 40.162 187.694 40.1655 187.694ZM30.0851 177.612C30.1519 183.174 34.5834 187.665 40.0508 187.694C34.6043 187.722 30.1858 192.179 30.0861 197.712L30.0822 197.712C29.9825 192.176 25.5584 187.716 20.1072 187.693C25.5793 187.671 30.0163 183.177 30.0832 177.612L30.0851 177.612Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M9.985 177.612C10.0518 183.174 14.4833 187.665 19.9507 187.694C14.5042 187.722 10.0857 192.179 9.98595 197.712L9.98206 197.712C9.88228 192.175 5.45814 187.716 0.00676492 187.693C5.47897 187.671 9.91607 183.177 9.98301 177.612L9.985 177.612ZM20.0654 187.694L20.0654 187.694C20.0619 187.694 20.0585 187.694 20.055 187.694C20.0585 187.694 20.0619 187.694 20.0654 187.694Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M70.319 177.612C70.3859 183.174 74.818 187.666 80.286 187.693C74.8388 187.721 70.4196 192.179 70.3199 197.712L70.3162 197.712C70.2164 192.175 65.7923 187.716 60.3409 187.693C65.8131 187.671 70.2502 183.177 70.3171 177.612L70.319 177.612ZM80.3999 187.694L80.3999 187.693C80.3958 187.693 80.3918 187.693 80.3877 187.693C80.3918 187.694 80.3958 187.694 80.3999 187.694Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M30.0851 157.511C30.1522 163.071 34.5796 167.56 40.0435 167.592C34.6002 167.625 30.1855 172.081 30.0861 177.611L30.0823 177.611C29.9828 172.075 25.5586 167.615 20.107 167.592C25.5791 167.57 30.0161 163.077 30.0833 157.511L30.0851 157.511ZM40.165 167.592L40.165 167.592C40.1642 167.592 40.1633 167.592 40.1624 167.592C40.1633 167.592 40.1642 167.592 40.165 167.592Z" fill="#F6E3DD"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M286.222 83.3C286.289 88.8799 290.748 93.3823 296.24 93.3823C296.261 93.3823 296.281 93.3822 296.302 93.3821L296.302 93.3825C296.281 93.3824 296.261 93.3823 296.24 93.3823C290.769 93.3823 286.323 97.8499 286.223 103.4L286.219 103.4C286.119 97.8612 281.69 93.4006 276.236 93.3824C281.712 93.3641 286.153 88.8687 286.22 83.3L286.222 83.3Z" fill="#19D992"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M266.087 83.3C266.153 88.8799 270.613 93.3823 276.104 93.3823C276.125 93.3823 276.146 93.3822 276.167 93.3821L276.167 93.3825C276.146 93.3824 276.125 93.3823 276.104 93.3823C270.634 93.3823 266.188 97.8499 266.088 103.4L266.084 103.4C265.984 97.8612 261.555 93.4006 256.1 93.3824C261.576 93.3641 266.018 88.8687 266.085 83.3L266.087 83.3Z" fill="#19D992"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M245.986 83.3C246.053 88.8799 250.513 93.3823 256.004 93.3823C256.025 93.3823 256.046 93.3822 256.067 93.3821L256.067 93.3825C256.046 93.3824 256.025 93.3823 256.004 93.3823C250.534 93.3823 246.088 97.8499 245.987 103.4L245.984 103.4C245.883 97.8612 241.455 93.4006 236 93.3824C241.476 93.3641 245.918 88.8687 245.985 83.3L245.986 83.3Z" fill="#19D992"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M286.22 63.2C286.287 68.7576 290.711 73.2462 296.173 73.2816C290.732 73.3169 286.321 77.7714 286.221 83.2998L286.217 83.2998C286.117 77.7635 281.693 73.3042 276.242 73.2816C281.714 73.2589 286.151 68.7655 286.218 63.2L286.22 63.2Z" fill="#19D992"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M266.085 63.2C266.152 68.7576 270.577 73.2462 276.038 73.2816C270.597 73.3169 266.186 77.7714 266.086 83.2998L266.082 83.2998C265.983 77.7635 261.558 73.3042 256.107 73.2816C261.579 73.2589 266.016 68.7655 266.083 63.2L266.085 63.2Z" fill="#19D992"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M245.985 63.2C246.052 68.7576 250.477 73.2462 255.938 73.2816C250.497 73.3169 246.086 77.7714 245.986 83.2998L245.982 83.2998C245.882 77.7635 241.458 73.3042 236.007 73.2816C241.479 73.2589 245.916 68.7655 245.983 63.2L245.985 63.2Z" fill="#19D992"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M246.022 43.0999C246.089 48.6566 250.513 53.1445 255.973 53.1809C250.533 53.2171 246.122 57.6717 246.023 63.1997L246.019 63.1997C245.92 57.6632 241.496 53.2035 236.044 53.1808C241.516 53.158 245.953 48.665 246.02 43.0999L246.022 43.0999Z" fill="#19D992"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M266.12 23C266.187 28.5798 270.646 33.082 276.138 33.082C276.159 33.082 276.18 33.0819 276.201 33.0818L276.201 33.0825C276.18 33.0824 276.159 33.0823 276.138 33.0823C270.667 33.0823 266.221 37.5499 266.121 43.0998L266.117 43.0998C266.017 37.5501 261.571 33.0827 256.101 33.0823L256.101 33.082C261.592 33.0816 266.051 28.5795 266.118 23L266.12 23Z" fill="#19D992"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M296.301 53.1809L296.301 53.1808C296.3 53.1808 296.3 53.1808 296.299 53.1808C296.3 53.1808 296.3 53.1809 296.301 53.1809ZM286.221 43.0999C286.289 48.6591 290.716 53.1485 296.18 53.1808C290.736 53.2131 286.322 57.6692 286.222 63.1997L286.219 63.1997C286.119 57.6668 281.701 53.2092 276.254 53.1807C281.721 53.1522 286.152 48.6614 286.22 43.0999L286.221 43.0999Z" fill="#19D992"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M276.167 53.1807L276.167 53.1806C276.166 53.1806 276.165 53.1806 276.164 53.1807C276.165 53.1807 276.166 53.1807 276.167 53.1807ZM266.087 43.0996C266.154 48.6589 270.581 53.1484 276.045 53.1807C270.602 53.2128 266.187 57.6689 266.087 63.1994L266.084 63.1994C265.984 57.6629 261.56 53.2031 256.108 53.1806C261.58 53.1579 266.017 48.6649 266.085 43.0996L266.087 43.0996Z" fill="#19D992"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M316.401 53.1807L316.401 53.1806C316.4 53.1806 316.399 53.1806 316.397 53.1807C316.399 53.1807 316.4 53.1807 316.401 53.1807ZM306.32 43.0996C306.387 48.659 310.815 53.1484 316.279 53.1807C310.835 53.2128 306.42 57.6689 306.321 63.1994L306.317 63.1994C306.218 57.6629 301.794 53.2032 296.342 53.1806C301.814 53.1579 306.251 48.6649 306.318 43.0996L306.32 43.0996Z" fill="#19D992"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M228.928 212.695C228.995 218.255 233.422 222.744 238.886 222.777C233.443 222.809 229.028 227.265 228.929 232.795L228.925 232.795C228.825 227.259 224.401 222.799 218.95 222.777C224.422 222.754 228.859 218.261 228.926 212.695L228.928 212.695ZM239.008 222.777L239.008 222.777C239.007 222.777 239.006 222.777 239.005 222.777C239.006 222.777 239.007 222.777 239.008 222.777Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M208.793 212.695C208.859 218.255 213.287 222.744 218.751 222.777C213.308 222.809 208.893 227.265 208.794 232.795L208.79 232.795C208.69 227.259 204.266 222.799 198.814 222.777C204.287 222.754 208.724 218.261 208.791 212.695L208.793 212.695ZM218.873 222.777L218.873 222.777C218.872 222.777 218.871 222.777 218.87 222.777C218.871 222.777 218.872 222.777 218.873 222.777Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M188.693 212.695C188.76 218.255 193.187 222.744 198.651 222.777C193.208 222.809 188.794 227.265 188.694 232.795L188.69 232.795C188.59 227.259 184.166 222.799 178.715 222.777C184.187 222.754 188.624 218.261 188.691 212.695L188.693 212.695ZM198.773 222.777L198.773 222.777C198.772 222.777 198.771 222.777 198.77 222.777C198.771 222.777 198.772 222.777 198.773 222.777Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M188.728 192.594C188.795 198.154 193.223 202.643 198.687 202.675C193.243 202.708 188.828 207.164 188.729 212.694L188.725 212.694C188.626 207.158 184.202 202.698 178.75 202.675C184.222 202.653 188.659 198.16 188.726 192.594L188.728 192.594ZM198.808 202.675L198.808 202.675C198.807 202.675 198.806 202.675 198.805 202.675C198.806 202.675 198.807 202.675 198.808 202.675Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M208.826 172.495C208.893 178.074 213.352 182.576 218.844 182.576C218.865 182.576 218.886 182.576 218.907 182.576L218.907 182.577C218.886 182.577 218.865 182.577 218.844 182.577C213.373 182.577 208.927 187.044 208.827 192.594L208.823 192.594C208.723 187.045 204.277 182.577 198.807 182.577L198.807 182.576C204.298 182.576 208.757 178.074 208.824 172.495L208.826 172.495Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M228.927 192.594C228.995 198.154 233.422 202.643 238.886 202.675C233.442 202.708 229.028 207.164 228.928 212.694L228.925 212.694C228.825 207.158 224.401 202.698 218.949 202.675C224.421 202.653 228.858 198.16 228.926 192.594L228.927 192.594ZM239.007 202.675L239.007 202.675C239.006 202.675 239.006 202.675 239.005 202.675C239.006 202.675 239.006 202.675 239.007 202.675Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M208.793 192.594C208.86 198.154 213.287 202.643 218.751 202.676C213.308 202.708 208.893 207.164 208.794 212.694L208.79 212.694C208.69 207.158 204.266 202.698 198.815 202.676C204.287 202.653 208.724 198.16 208.791 192.594L208.793 192.594ZM218.873 202.676L218.873 202.676C218.872 202.676 218.871 202.676 218.87 202.676C218.871 202.676 218.872 202.676 218.873 202.676Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M259.107 202.676L259.107 202.676C259.106 202.676 259.105 202.676 259.103 202.676C259.105 202.676 259.106 202.676 259.107 202.676ZM249.026 192.594C249.093 198.154 253.521 202.643 258.984 202.676C253.541 202.708 249.126 207.164 249.027 212.694L249.023 212.694C248.924 207.158 244.5 202.698 239.048 202.676C244.52 202.653 248.957 198.16 249.024 192.594L249.026 192.594Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392 132.843C392.034 135.632 394.262 137.883 397.007 137.883C397.017 137.883 397.028 137.883 397.038 137.883L397.038 137.884C397.028 137.884 397.017 137.884 397.007 137.884C394.273 137.884 392.051 140.117 392.001 142.892L391.999 142.892C391.949 140.127 389.742 137.899 387.021 137.884C389.752 137.869 391.966 135.623 392 132.843L392 132.843Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392 122.792C392.034 125.578 394.256 127.826 396.994 127.833C394.266 127.84 392.05 130.071 392.001 132.842L391.999 132.842C391.949 130.071 389.733 127.84 387.005 127.833C389.744 127.826 391.966 125.578 392 122.792L392 122.792ZM397.038 127.833C397.032 127.833 397.026 127.833 397.019 127.833C397.026 127.833 397.032 127.833 397.038 127.833L397.038 127.833Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M392.018 122.793L392.02 122.793C392.069 120.031 394.27 117.805 396.985 117.783C394.26 117.761 392.053 115.519 392.019 112.743L392.019 112.743C391.985 115.523 389.771 117.768 387.039 117.783C389.761 117.798 391.968 120.026 392.018 122.793Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M387.009 107.733C387.009 107.733 387.009 107.733 387.009 107.733C389.753 107.733 391.982 105.482 392.016 102.692L392.016 102.692C392.05 105.482 394.279 107.733 397.023 107.733C397.033 107.733 397.044 107.733 397.054 107.733L397.054 107.734C397.044 107.733 397.033 107.733 397.023 107.733C394.289 107.733 392.067 109.967 392.017 112.742L392.015 112.742C391.965 109.967 389.743 107.733 387.009 107.733C387.009 107.733 387.009 107.733 387.009 107.733L387.009 107.733Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M371.925 142.892C371.875 140.127 369.667 137.899 366.946 137.884C369.678 137.869 371.892 135.623 371.925 132.843L371.926 132.843C371.959 135.632 374.188 137.883 376.933 137.883C376.943 137.883 376.954 137.883 376.964 137.883L376.964 137.884C376.953 137.884 376.943 137.884 376.933 137.884C374.199 137.884 371.977 140.117 371.926 142.892L371.925 142.892Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M381.953 112.839C381.903 110.068 379.687 107.837 376.959 107.83C379.698 107.823 381.92 105.575 381.953 102.789L381.954 102.789C381.987 105.579 384.216 107.83 386.961 107.83C386.971 107.83 386.981 107.83 386.992 107.83L386.992 107.83C386.981 107.83 386.971 107.83 386.961 107.83C384.227 107.83 382.004 110.064 381.954 112.839L381.953 112.839Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M361.862 142.892C361.812 140.127 359.604 137.899 356.883 137.884C359.615 137.869 361.829 135.623 361.862 132.843L361.863 132.843C361.897 135.632 364.125 137.883 366.87 137.883C366.88 137.883 366.891 137.883 366.901 137.883L366.901 137.884C366.89 137.884 366.88 137.884 366.87 137.884C364.136 137.884 361.914 140.117 361.863 142.892L361.862 142.892Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M351.816 142.892C351.766 140.127 349.559 137.899 346.837 137.884C349.569 137.869 351.783 135.623 351.817 132.843L351.817 132.843C351.851 135.632 354.079 137.883 356.824 137.883C356.834 137.883 356.845 137.883 356.855 137.883L356.855 137.884C356.845 137.884 356.834 137.884 356.824 137.884C354.09 137.884 351.868 140.117 351.818 142.892L351.816 142.892Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M361.862 122.792C361.896 125.578 364.118 127.826 366.856 127.833C364.128 127.84 361.912 130.071 361.862 132.842L361.861 132.842C361.811 130.071 359.595 127.84 356.867 127.833C359.606 127.826 361.828 125.578 361.861 122.792L361.862 122.792ZM366.9 127.833C366.894 127.833 366.887 127.833 366.881 127.833C366.887 127.833 366.894 127.833 366.9 127.833L366.9 127.833Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M381.97 132.842C381.92 130.071 379.705 127.84 376.976 127.833C379.715 127.826 381.937 125.578 381.971 122.792L381.971 122.792C382.005 125.582 384.234 127.833 386.978 127.833C386.989 127.833 386.999 127.833 387.009 127.833L387.009 127.833C386.999 127.833 386.989 127.833 386.978 127.833C384.244 127.833 382.022 130.067 381.972 132.842L381.97 132.842Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M351.834 122.793L351.836 122.793C351.886 120.031 354.086 117.805 356.802 117.783C354.076 117.761 351.869 115.519 351.836 112.743L351.835 112.743C351.801 115.523 349.587 117.768 346.856 117.783C349.577 117.798 351.785 120.027 351.834 122.793Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M346.826 107.733C349.57 107.733 351.799 105.482 351.833 102.692L351.833 102.692C351.867 105.482 354.096 107.733 356.84 107.733C356.851 107.733 356.861 107.733 356.872 107.733L356.872 107.733C356.861 107.733 356.851 107.733 356.84 107.733C354.106 107.733 351.884 109.967 351.834 112.742L351.832 112.742C351.782 109.967 349.56 107.733 346.826 107.733L346.826 107.733Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M356.872 107.733C356.872 107.733 356.872 107.733 356.872 107.733C359.617 107.733 361.845 105.482 361.879 102.692L361.88 102.692C361.913 105.482 364.142 107.733 366.886 107.733C366.897 107.733 366.907 107.733 366.917 107.733L366.917 107.733C366.907 107.733 366.897 107.733 366.886 107.733C364.152 107.733 361.93 109.967 361.88 112.742L361.878 112.742C361.828 109.967 359.606 107.733 356.872 107.733C356.872 107.733 356.872 107.733 356.872 107.733L356.872 107.733Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M371.926 122.793L371.927 122.793C371.977 120.031 374.177 117.805 376.893 117.783C374.167 117.761 371.96 115.519 371.927 112.743L371.926 112.743C371.893 115.523 369.679 117.768 366.947 117.783C369.668 117.798 371.876 120.026 371.926 122.793Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M361.863 112.743C361.897 115.519 364.104 117.761 366.83 117.783C364.114 117.805 361.913 120.031 361.864 122.793L361.862 122.793C361.813 120.026 359.605 117.798 356.883 117.783C359.615 117.768 361.829 115.523 361.863 112.743L361.863 112.743Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M381.97 112.743C382.003 115.517 384.208 117.759 386.932 117.783C384.218 117.807 382.02 120.032 381.97 122.793L381.969 122.793C381.919 120.026 379.712 117.798 376.99 117.783C379.722 117.768 381.936 115.523 381.969 112.743L381.97 112.743Z" fill="#E8E0FF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M256.448 119.503C256.398 116.732 254.183 114.501 251.454 114.494C254.193 114.487 256.415 112.239 256.449 109.453L256.449 109.453C256.483 112.243 258.712 114.494 261.456 114.494C261.467 114.494 261.477 114.494 261.487 114.494L261.487 114.494C261.477 114.494 261.467 114.494 261.456 114.494C258.722 114.494 256.5 116.728 256.45 119.503L256.448 119.503Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M236.339 119.503C236.289 116.737 234.082 114.509 231.36 114.494C234.092 114.479 236.306 112.234 236.339 109.453L236.34 109.453C236.374 112.243 238.602 114.494 241.347 114.494C241.357 114.494 241.368 114.494 241.378 114.494L241.378 114.494C241.368 114.494 241.357 114.494 241.347 114.494C238.613 114.494 236.391 116.728 236.341 119.503L236.339 119.503Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M256.451 99.4033C256.484 102.181 258.694 104.425 261.423 104.444C258.705 104.463 256.501 106.69 256.451 109.453L256.45 109.453C256.4 106.678 254.177 104.444 251.443 104.444C251.443 104.444 251.443 104.444 251.443 104.444L251.443 104.444C251.443 104.444 251.443 104.444 251.443 104.444C254.188 104.444 256.417 102.193 256.45 99.4033L256.451 99.4033Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M246.388 99.4033C246.421 102.181 248.631 104.425 251.36 104.444C248.642 104.463 246.438 106.69 246.388 109.453L246.387 109.453C246.337 106.678 244.114 104.444 241.38 104.444C241.38 104.444 241.38 104.444 241.38 104.444L241.38 104.444C241.38 104.444 241.38 104.444 241.38 104.444C244.125 104.444 246.354 102.193 246.387 99.4033L246.388 99.4033Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M236.341 99.4033C236.375 102.181 238.585 104.425 241.313 104.444C238.595 104.463 236.392 106.69 236.342 109.453L236.34 109.453C236.29 106.678 234.068 104.444 231.334 104.444L231.334 104.444C234.079 104.444 236.307 102.193 236.341 99.4033L236.341 99.4033Z" fill="white"/>
<mask id="mask4_9908_107572" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="-89" y="-9" width="162" height="81">
<path fill-rule="evenodd" clip-rule="evenodd" d="M42.546 51.8943C42.613 57.4741 47.0725 61.9764 52.5639 61.9764C52.5848 61.9764 52.6056 61.9763 52.6265 61.9762L52.6265 61.9769C52.6056 61.9768 52.5848 61.9767 52.5639 61.9767C47.0937 61.9767 42.6475 66.4442 42.547 71.9941L42.5431 71.9941C42.4426 66.4443 37.9966 61.9769 32.5266 61.9766C38.0179 61.9764 42.4772 57.4741 42.544 51.8943L42.546 51.8943Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M62.611 51.8943C62.6779 57.4741 67.1374 61.9764 72.6288 61.9764C72.6497 61.9764 72.6706 61.9763 72.6914 61.9762L72.6914 61.9769C72.6706 61.9768 72.6497 61.9767 72.6288 61.9767C67.1587 61.9767 62.7124 66.4442 62.612 71.9941L62.608 71.9941C62.5076 66.4443 58.0616 61.9769 52.5916 61.9766C58.0829 61.9764 62.5422 57.4741 62.609 51.8943L62.611 51.8943Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M62.611 -8.21314C62.678 -2.63337 67.1375 1.8688 72.6288 1.8688C72.6497 1.8688 72.6706 1.86874 72.6914 1.86861L72.6914 1.86906C72.6706 1.86893 72.6497 1.86887 72.6288 1.86887C67.1585 1.86887 62.7122 6.3366 62.6119 11.8867L62.6081 11.8867C62.5081 6.34792 58.0797 1.8871 52.6247 1.86893C58.1007 1.85064 62.5422 -2.64466 62.609 -8.21314L62.611 -8.21314Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.4108 51.8943C22.4777 57.4741 26.9372 61.9764 32.4286 61.9764C32.4495 61.9764 32.4704 61.9763 32.4912 61.9762L32.4912 61.9769C32.4704 61.9768 32.4495 61.9767 32.4286 61.9767C26.9585 61.9767 22.5122 66.4442 22.4118 71.9941L22.4078 71.9941C22.3074 66.4443 17.8614 61.9768 12.3914 61.9766C17.8827 61.9764 22.342 57.4741 22.4088 51.8943L22.4108 51.8943Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.31069 51.8943C2.3776 57.4741 6.83711 61.9764 12.3285 61.9764C12.3494 61.9764 12.3703 61.9763 12.3911 61.9762L12.3911 61.9769C12.3703 61.9768 12.3494 61.9767 12.3285 61.9767C6.85836 61.9767 2.41212 66.4442 2.31166 71.9941L2.30772 71.9941C2.2073 66.4443 -2.23872 61.9769 -7.70872 61.9766C-2.21743 61.9764 2.24189 57.4741 2.30869 51.8943L2.31069 51.8943Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M42.5462 31.7947C42.6129 37.3524 47.0375 41.8411 52.499 41.8765C47.0584 41.9117 42.6468 46.3662 42.5472 51.8945L42.5433 51.8945C42.4435 46.3583 38.0194 41.8989 32.568 41.8763C38.0402 41.8536 42.4773 37.3602 42.5442 31.7947L42.5462 31.7947Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.411 31.7947C22.4777 37.3524 26.9023 41.8411 32.3638 41.8765C26.9232 41.9117 22.5116 46.3662 22.4119 51.8945L22.408 51.8945C22.3083 46.3583 17.8841 41.8989 12.4327 41.8763C17.9049 41.8536 22.342 37.3602 22.409 31.7947L22.411 31.7947Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.31087 31.7947C2.37758 37.3524 6.80216 41.8411 12.2637 41.8765C6.82306 41.9117 2.41146 46.3662 2.31183 51.8945L2.30795 51.8945C2.2082 46.3583 -2.21595 41.8989 -7.66734 41.8763C-2.19515 41.8536 2.24195 37.3602 2.3089 31.7947L2.31087 31.7947Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M62.6452 31.7947C62.7121 37.3585 67.1464 41.8508 72.6162 41.8763C67.1672 41.9017 62.7458 46.36 62.6461 51.8945L62.6424 51.8945C62.5426 46.3583 58.1185 41.8989 52.6671 41.8763C58.1393 41.8536 62.5764 37.3602 62.6433 31.7947L62.6452 31.7947ZM72.7261 41.8764L72.7261 41.8762C72.7207 41.8763 72.7152 41.8763 72.7098 41.8763C72.7152 41.8764 72.7207 41.8764 72.7261 41.8764Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.34589 11.6941C2.41318 17.2532 6.84054 21.7425 12.3043 21.7748C6.86076 21.8071 2.44595 26.2633 2.34681 31.7939L2.34302 31.7939C2.24377 26.2573 -2.18045 21.7975 -7.63205 21.7747C-2.16029 21.752 2.27649 17.2591 2.34395 11.6941L2.34589 11.6941ZM12.4263 21.7749L12.4263 21.7748C12.4252 21.7748 12.4242 21.7748 12.4232 21.7748C12.4242 21.7748 12.4252 21.7748 12.4263 21.7749Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.3449 -8.40625C2.41202 -2.82659 6.87145 1.67547 12.3627 1.67547C12.3836 1.67547 12.4045 1.67541 12.4253 1.67528L12.4253 1.67602C12.4044 1.67589 12.3836 1.67583 12.3627 1.67583C6.89241 1.67583 2.4461 6.14352 2.34582 11.6936L2.34205 11.6936C2.24177 6.14362 -2.20438 1.67599 -7.67454 1.67583L-7.67454 1.67547C-2.18338 1.67531 2.27589 -2.82669 2.34301 -8.40625L2.3449 -8.40625Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.444 -8.40625C22.5111 -2.82659 26.9706 1.67547 32.4619 1.67547C32.4829 1.67547 32.5039 1.6754 32.5249 1.67527L32.5249 1.67603C32.5039 1.67589 32.4829 1.67583 32.4619 1.67583C26.9916 1.67583 22.5453 6.14352 22.445 11.6936L22.4412 11.6936C22.3409 6.14377 17.895 1.67623 12.4251 1.67583L12.4251 1.67547C17.916 1.67507 22.3751 -2.82684 22.4422 -8.40625L22.444 -8.40625Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M42.5455 11.6941C42.6127 17.2533 47.0401 21.7426 52.5039 21.7749C47.0604 21.8072 42.6456 26.2633 42.5464 31.7939L42.5427 31.7939C42.4434 26.2574 38.0192 21.7975 32.5676 21.7748C38.0394 21.752 42.4762 17.2592 42.5436 11.6941L42.5455 11.6941ZM52.6255 21.7749L52.6255 21.7749C52.6246 21.7749 52.6237 21.7749 52.6228 21.7749C52.6237 21.7749 52.6246 21.7749 52.6255 21.7749Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.4107 11.6941C22.478 17.2533 26.9054 21.7426 32.3691 21.7749C26.9256 21.8072 22.5109 26.2633 22.4117 31.7939L22.408 31.7939C22.3087 26.2574 17.8845 21.7975 12.4329 21.7748C17.9047 21.752 22.3415 17.2592 22.4089 11.6941L22.4107 11.6941ZM32.4907 21.7749L32.4907 21.7749C32.4898 21.7749 32.4889 21.7749 32.488 21.7749C32.4889 21.7749 32.4898 21.7749 32.4907 21.7749Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M72.7256 21.7749L72.7256 21.7749C72.7242 21.7749 72.7228 21.7749 72.7215 21.7749C72.7228 21.7749 72.7242 21.7749 72.7256 21.7749ZM62.6442 11.6941C62.7114 17.2533 67.1388 21.7426 72.6026 21.7749C67.1591 21.8072 62.7443 26.2633 62.6451 31.7939L62.6414 31.7939C62.5421 26.2574 58.1179 21.7975 52.6663 21.7748C58.1381 21.752 62.5749 17.2592 62.6423 11.6941L62.6442 11.6941Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M42.5455 -8.40625C42.6126 -2.82658 47.072 1.67548 52.5633 1.67548C52.5841 1.67548 52.6048 1.67542 52.6255 1.67529L52.6255 1.67603C52.6048 1.67591 52.5841 1.67584 52.5633 1.67584C47.093 1.67584 42.6467 6.14352 42.5465 11.6936L42.5427 11.6936C42.4424 6.14353 37.9961 1.67584 32.5258 1.67584C32.5258 1.67584 32.5257 1.67584 32.5257 1.67584L32.5257 1.67548C32.5257 1.67548 32.5258 1.67548 32.5258 1.67548C38.0171 1.67548 42.4765 -2.82658 42.5436 -8.40625L42.5455 -8.40625Z" fill="#6038D0"/>
</mask>
<g mask="url(#mask4_9908_107572)">
<path d="M-111 -46L52.1755 -14.5709L34.8164 52.1245L-40.8327 69.6664L-111 -46Z" fill="#6038D0"/>
</g>
</g>
</g>
<defs>
<clipPath id="clip0_9908_107572">
<rect width="402" height="219" rx="2.92364" fill="white"/>
</clipPath>
</defs>
</svg>

'''
'''--- public/assets/captcha/slider/failure.svg ---
<svg width="49" height="48" viewBox="0 0 49 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="0.370117" width="48" height="48" fill="#FF5E03"/>
<path d="M17 17L31 31" stroke="white" stroke-width="2" stroke-linecap="round"/>
<path d="M31 17L17 31" stroke="white" stroke-width="2" stroke-linecap="round"/>
</svg>

'''
'''--- public/assets/captcha/slider/regular.svg ---
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="48" height="48" fill="#6038D0"/>
<path d="M17 24H31" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M24 17L31 24L24 31" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- public/assets/captcha/slider/success.svg ---
<svg width="49" height="48" viewBox="0 0 49 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="0.359863" width="48" height="48" fill="#19D992"/>
<path d="M34 23.0799V23.9999C33.9988 26.1563 33.3005 28.2545 32.0093 29.9817C30.7182 31.7088 28.9033 32.9723 26.8354 33.5838C24.7674 34.1952 22.5573 34.1218 20.5345 33.3744C18.5117 32.6271 16.7847 31.246 15.611 29.4369C14.4373 27.6279 13.8798 25.4879 14.0217 23.3362C14.1636 21.1844 14.9972 19.1362 16.3983 17.4969C17.7994 15.8577 19.6928 14.7152 21.7962 14.24C23.8996 13.7648 26.1003 13.9822 28.07 14.8599" stroke="white" stroke-width="2" stroke-linejoin="round"/>
<path d="M34 16L24 26.01L21 23.01" stroke="white" stroke-width="2" stroke-linejoin="round"/>
</svg>

'''
'''--- public/assets/illustrations/bg-stars.svg ---
<svg width="1125" height="2334" viewBox="0 0 1125 2334" fill="none" xmlns="http://www.w3.org/2000/svg">
<ellipse cx="656.187" cy="40.0088" rx="2.11838" ry="2.87753" fill="#C4C4C4"/>
<ellipse cx="770.579" cy="74.5389" rx="2.11841" ry="2.87753" fill="#C4C4C4"/>
<ellipse cx="940.05" cy="316.253" rx="2.11841" ry="2.87752" fill="#C4C4C4"/>
<ellipse cx="838.368" cy="373.804" rx="2.11841" ry="2.8775" fill="#C4C4C4"/>
<ellipse cx="562.977" cy="137.845" rx="2.11838" ry="2.87753" fill="#C4C4C4"/>
<ellipse cx="507.235" cy="144.758" rx="1.2243" ry="1.71852" transform="rotate(-180 507.235 144.758)" fill="#C4C4C4"/>
<ellipse cx="384.805" cy="113.825" rx="1.2243" ry="1.71852" transform="rotate(-180 384.805 113.825)" fill="#C4C4C4"/>
<ellipse cx="279.517" cy="7.2744" rx="1.22427" ry="1.71852" transform="rotate(-180 279.517 7.2744)" fill="#C4C4C4"/>
<ellipse cx="943.63" cy="517.666" rx="1.2243" ry="1.71857" transform="rotate(-180 943.63 517.666)" fill="#C4C4C4"/>
<ellipse cx="821.201" cy="486.733" rx="1.22424" ry="1.71851" transform="rotate(-180 821.201 486.733)" fill="#C4C4C4"/>
<ellipse cx="884.864" cy="332.065" rx="1.2243" ry="1.71852" transform="rotate(-180 884.864 332.065)" fill="#C4C4C4"/>
<ellipse cx="706.119" cy="290.82" rx="1.2243" ry="1.71851" transform="rotate(-180 706.119 290.82)" fill="#C4C4C4"/>
<ellipse cx="737.95" cy="335.502" rx="1.2243" ry="1.71851" transform="rotate(-180 737.95 335.502)" fill="#C4C4C4"/>
<ellipse cx="715.912" cy="380.182" rx="1.22424" ry="1.71854" transform="rotate(-180 715.912 380.182)" fill="#C4C4C4"/>
<ellipse cx="603.279" cy="225.515" rx="1.22427" ry="1.71852" transform="rotate(-180 603.279 225.515)" fill="#C4C4C4"/>
<ellipse cx="581.242" cy="259.887" rx="1.2243" ry="1.71851" transform="rotate(-180 581.242 259.887)" fill="#C4C4C4"/>
<ellipse cx="537.167" cy="204.897" rx="1.22427" ry="1.71853" transform="rotate(-180 537.167 204.897)" fill="#C4C4C4"/>
<ellipse cx="439.224" cy="60.5379" rx="1.22427" ry="1.71853" transform="rotate(-180 439.224 60.5379)" fill="#C4C4C4"/>
<ellipse cx="497.99" cy="26.1692" rx="1.22427" ry="1.71852" transform="rotate(-180 497.99 26.1692)" fill="#C4C4C4"/>
<ellipse cx="657.148" cy="167.085" rx="1.2243" ry="1.71851" transform="rotate(-180 657.148 167.085)" fill="#C4C4C4"/>
<ellipse cx="750.193" cy="311.444" rx="1.2243" ry="1.71851" transform="rotate(-180 750.193 311.444)" fill="#C4C4C4"/>
<ellipse cx="1007.29" cy="308.005" rx="1.2243" ry="1.71852" transform="rotate(-180 1007.29 308.005)" fill="#C4C4C4"/>
<ellipse cx="680.942" cy="133.249" rx="1.22427" ry="1.71853" transform="rotate(-180 680.942 133.249)" fill="#C4C4C4"/>
<ellipse cx="558.512" cy="102.316" rx="1.22427" ry="1.71852" transform="rotate(-180 558.512 102.316)" fill="#C4C4C4"/>
<ellipse cx="733.667" cy="149.651" rx="0.736389" ry="1.03374" transform="rotate(-180 733.667 149.651)" fill="#C4C4C4"/>
<ellipse cx="660.023" cy="131.042" rx="0.73645" ry="1.03373" transform="rotate(-180 660.023 131.042)" fill="#C4C4C4"/>
<ellipse cx="698.319" cy="38.0079" rx="0.73642" ry="1.03373" transform="rotate(-180 698.319 38.0079)" fill="#C4C4C4"/>
<ellipse cx="590.801" cy="13.1954" rx="0.73645" ry="1.03373" transform="rotate(-180 590.801 13.1954)" fill="#C4C4C4"/>
<ellipse cx="609.946" cy="40.0754" rx="0.73642" ry="1.03374" transform="rotate(-180 609.946 40.0754)" fill="#C4C4C4"/>
<ellipse cx="596.691" cy="66.9536" rx="0.73642" ry="1.03373" transform="rotate(-180 596.691 66.9536)" fill="#C4C4C4"/>
<ellipse cx="617.31" cy="25.6065" rx="0.73642" ry="1.03373" transform="rotate(-180 617.31 25.6065)" fill="#C4C4C4"/>
<ellipse cx="771.963" cy="23.5355" rx="0.73645" ry="1.03373" transform="rotate(-180 771.963 23.5355)" fill="#C4C4C4"/>
<ellipse cx="860.77" cy="46.0559" rx="0.73645" ry="1.03374" transform="rotate(-180 860.77 46.0559)" fill="#C4C4C4"/>
<ellipse cx="787.127" cy="27.4476" rx="0.736389" ry="1.03373" transform="rotate(-180 787.127 27.4476)" fill="#C4C4C4"/>
<ellipse cx="932.796" cy="224.462" rx="0.73645" ry="1.03374" transform="rotate(-180 932.796 224.462)" fill="#C4C4C4"/>
<ellipse cx="859.152" cy="205.854" rx="0.73645" ry="1.03374" transform="rotate(-180 859.152 205.854)" fill="#C4C4C4"/>
<ellipse cx="897.447" cy="112.82" rx="0.73645" ry="1.03374" transform="rotate(-180 897.447 112.82)" fill="#C4C4C4"/>
<ellipse cx="789.928" cy="88.007" rx="0.73645" ry="1.03373" transform="rotate(-180 789.928 88.007)" fill="#C4C4C4"/>
<ellipse cx="809.074" cy="114.888" rx="0.73645" ry="1.03374" transform="rotate(-180 809.074 114.888)" fill="#C4C4C4"/>
<ellipse cx="795.82" cy="141.765" rx="0.736389" ry="1.03373" transform="rotate(-180 795.82 141.765)" fill="#C4C4C4"/>
<ellipse cx="728.066" cy="48.7247" rx="0.73645" ry="1.03374" transform="rotate(-180 728.066 48.7247)" fill="#C4C4C4"/>
<ellipse cx="714.811" cy="69.4013" rx="0.736389" ry="1.03374" transform="rotate(-180 714.811 69.4013)" fill="#C4C4C4"/>
<ellipse cx="688.299" cy="36.3198" rx="0.73645" ry="1.03374" transform="rotate(-180 688.299 36.3198)" fill="#C4C4C4"/>
<ellipse cx="760.47" cy="13.5782" rx="0.73645" ry="1.03373" transform="rotate(-180 760.47 13.5782)" fill="#C4C4C4"/>
<ellipse cx="816.439" cy="100.415" rx="0.73645" ry="1.03373" transform="rotate(-180 816.439 100.415)" fill="#C4C4C4"/>
<ellipse cx="971.09" cy="98.3436" rx="0.73645" ry="1.03373" transform="rotate(-180 971.09 98.3436)" fill="#C4C4C4"/>
<ellipse cx="521.828" cy="17.2817" rx="0.73645" ry="1.03373" transform="rotate(-180 521.828 17.2817)" fill="#C4C4C4"/>
<ellipse cx="420.146" cy="195.688" rx="0.73645" ry="1.03373" transform="rotate(-180 420.146 195.688)" fill="#C4C4C4"/>
<ellipse cx="346.502" cy="177.079" rx="0.73642" ry="1.03373" transform="rotate(-180 346.502 177.079)" fill="#C4C4C4"/>
<ellipse cx="384.797" cy="84.045" rx="0.73645" ry="1.03374" transform="rotate(-180 384.797 84.045)" fill="#C4C4C4"/>
<ellipse cx="277.277" cy="59.2325" rx="0.73645" ry="1.03374" transform="rotate(-180 277.277 59.2325)" fill="#C4C4C4"/>
<ellipse cx="296.424" cy="86.1134" rx="0.73642" ry="1.03373" transform="rotate(-180 296.424 86.1134)" fill="#C4C4C4"/>
<ellipse cx="283.168" cy="112.991" rx="0.73645" ry="1.03373" transform="rotate(-180 283.168 112.991)" fill="#C4C4C4"/>
<ellipse cx="215.416" cy="19.9502" rx="0.73645" ry="1.03373" transform="rotate(-180 215.416 19.9502)" fill="#C4C4C4"/>
<ellipse cx="202.16" cy="40.6268" rx="0.73642" ry="1.03373" transform="rotate(-180 202.16 40.6268)" fill="#C4C4C4"/>
<ellipse cx="175.648" cy="7.54525" rx="0.736435" ry="1.03373" transform="rotate(-180 175.648 7.54525)" fill="#C4C4C4"/>
<ellipse cx="303.788" cy="71.6401" rx="0.73642" ry="1.03374" transform="rotate(-180 303.788 71.6401)" fill="#C4C4C4"/>
<ellipse cx="458.44" cy="69.569" rx="0.73645" ry="1.03373" transform="rotate(-180 458.44 69.569)" fill="#C4C4C4"/>
<ellipse cx="674.352" cy="328.052" rx="0.73642" ry="1.03372" transform="rotate(-180 674.352 328.052)" fill="#C4C4C4"/>
<ellipse cx="600.71" cy="309.443" rx="0.73645" ry="1.03374" transform="rotate(-180 600.71 309.443)" fill="#C4C4C4"/>
<ellipse cx="639.004" cy="216.409" rx="0.73645" ry="1.03374" transform="rotate(-180 639.004 216.409)" fill="#C4C4C4"/>
<ellipse cx="672.373" cy="381.626" rx="0.73645" ry="1.03372" transform="rotate(-180 672.373 381.626)" fill="#C4C4C4"/>
<ellipse cx="531.485" cy="191.597" rx="0.73642" ry="1.03374" transform="rotate(-180 531.485 191.597)" fill="#C4C4C4"/>
<ellipse cx="564.854" cy="356.813" rx="0.73645" ry="1.03374" transform="rotate(-180 564.854 356.813)" fill="#C4C4C4"/>
<ellipse cx="550.631" cy="218.477" rx="0.73645" ry="1.03374" transform="rotate(-180 550.631 218.477)" fill="#C4C4C4"/>
<ellipse cx="584" cy="383.693" rx="0.73645" ry="1.03374" transform="rotate(-180 584 383.693)" fill="#C4C4C4"/>
<ellipse cx="537.375" cy="245.351" rx="0.73645" ry="1.03374" transform="rotate(-180 537.375 245.351)" fill="#C4C4C4"/>
<ellipse cx="570.745" cy="410.568" rx="0.73645" ry="1.03374" transform="rotate(-180 570.745 410.568)" fill="#C4C4C4"/>
<ellipse cx="469.624" cy="152.314" rx="0.73645" ry="1.03374" transform="rotate(-180 469.624 152.314)" fill="#C4C4C4"/>
<ellipse cx="456.367" cy="172.991" rx="0.73642" ry="1.03374" transform="rotate(-180 456.367 172.991)" fill="#C4C4C4"/>
<ellipse cx="429.855" cy="139.909" rx="0.73645" ry="1.03374" transform="rotate(-180 429.855 139.909)" fill="#C4C4C4"/>
<ellipse cx="370.941" cy="53.0791" rx="0.73645" ry="1.03374" transform="rotate(-180 370.941 53.0791)" fill="#C4C4C4"/>
<ellipse cx="406.29" cy="32.406" rx="0.73645" ry="1.03373" transform="rotate(-180 406.29 32.406)" fill="#C4C4C4"/>
<ellipse cx="502.027" cy="117.168" rx="0.73645" ry="1.03373" transform="rotate(-180 502.027 117.168)" fill="#C4C4C4"/>
<ellipse cx="557.995" cy="204.004" rx="0.73645" ry="1.03374" transform="rotate(-180 557.995 204.004)" fill="#C4C4C4"/>
<ellipse cx="712.647" cy="201.933" rx="0.73645" ry="1.03374" transform="rotate(-180 712.647 201.933)" fill="#C4C4C4"/>
<ellipse cx="915.849" cy="230.221" rx="0.73645" ry="1.03374" transform="rotate(-180 915.849 230.221)" fill="#C4C4C4"/>
<ellipse cx="842.205" cy="211.612" rx="0.736389" ry="1.03374" transform="rotate(-180 842.205 211.612)" fill="#C4C4C4"/>
<ellipse cx="880.5" cy="118.578" rx="0.73645" ry="1.03374" transform="rotate(-180 880.5 118.578)" fill="#C4C4C4"/>
<ellipse cx="772.981" cy="93.7657" rx="0.73645" ry="1.03374" transform="rotate(-180 772.981 93.7657)" fill="#C4C4C4"/>
<ellipse cx="792.127" cy="120.646" rx="0.736389" ry="1.03374" transform="rotate(-180 792.127 120.646)" fill="#C4C4C4"/>
<ellipse cx="778.871" cy="147.523" rx="0.73645" ry="1.03374" transform="rotate(-180 778.871 147.523)" fill="#C4C4C4"/>
<ellipse cx="711.12" cy="54.4834" rx="0.73645" ry="1.03374" transform="rotate(-180 711.12 54.4834)" fill="#C4C4C4"/>
<ellipse cx="697.864" cy="75.16" rx="0.73645" ry="1.03373" transform="rotate(-180 697.864 75.16)" fill="#C4C4C4"/>
<ellipse cx="671.352" cy="42.0785" rx="0.73645" ry="1.03373" transform="rotate(-180 671.352 42.0785)" fill="#C4C4C4"/>
<ellipse cx="743.523" cy="19.3369" rx="0.73645" ry="1.03373" transform="rotate(-180 743.523 19.3369)" fill="#C4C4C4"/>
<ellipse cx="799.491" cy="106.173" rx="0.73645" ry="1.03374" transform="rotate(-180 799.491 106.173)" fill="#C4C4C4"/>
<ellipse cx="954.143" cy="104.102" rx="0.73645" ry="1.03373" transform="rotate(-180 954.143 104.102)" fill="#C4C4C4"/>
<ellipse cx="1026" cy="569.769" rx="0.73645" ry="1.03372" transform="rotate(-180 1026 569.769)" fill="#C4C4C4"/>
<ellipse cx="952.361" cy="551.16" rx="0.73645" ry="1.03375" transform="rotate(-180 952.361 551.16)" fill="#C4C4C4"/>
<ellipse cx="990.657" cy="458.126" rx="0.73645" ry="1.03375" transform="rotate(-180 990.657 458.126)" fill="#C4C4C4"/>
<ellipse cx="883.136" cy="433.313" rx="0.73645" ry="1.03378" transform="rotate(-180 883.136 433.313)" fill="#C4C4C4"/>
<ellipse cx="902.283" cy="460.194" rx="0.736389" ry="1.03374" transform="rotate(-180 902.283 460.194)" fill="#C4C4C4"/>
<ellipse cx="889.028" cy="487.072" rx="0.73645" ry="1.03375" transform="rotate(-180 889.028 487.072)" fill="#C4C4C4"/>
<ellipse cx="821.276" cy="394.031" rx="0.73645" ry="1.03375" transform="rotate(-180 821.276 394.031)" fill="#C4C4C4"/>
<ellipse cx="808.02" cy="414.708" rx="0.73645" ry="1.03374" transform="rotate(-180 808.02 414.708)" fill="#C4C4C4"/>
<ellipse cx="781.508" cy="381.626" rx="0.73645" ry="1.03374" transform="rotate(-180 781.508 381.626)" fill="#C4C4C4"/>
<ellipse cx="722.594" cy="294.796" rx="0.73645" ry="1.03374" transform="rotate(-180 722.594 294.796)" fill="#C4C4C4"/>
<ellipse cx="757.942" cy="274.123" rx="0.73645" ry="1.03375" transform="rotate(-180 757.942 274.123)" fill="#C4C4C4"/>
<ellipse cx="853.68" cy="358.888" rx="0.73645" ry="1.03375" transform="rotate(-180 853.68 358.888)" fill="#C4C4C4"/>
<ellipse cx="909.647" cy="445.724" rx="0.73645" ry="1.03371" transform="rotate(-180 909.647 445.724)" fill="#C4C4C4"/>
<ellipse cx="1064.3" cy="443.654" rx="0.73645" ry="1.03371" transform="rotate(-180 1064.3 443.654)" fill="#C4C4C4"/>
<ellipse cx="716.721" cy="322.298" rx="0.736389" ry="1.03374" transform="rotate(-180 716.721 322.298)" fill="white"/>
<ellipse cx="643.077" cy="303.689" rx="0.73642" ry="1.03375" transform="rotate(-180 643.077 303.689)" fill="white"/>
<ellipse cx="681.372" cy="210.656" rx="0.73645" ry="1.03374" transform="rotate(-180 681.372 210.656)" fill="white"/>
<ellipse cx="573.852" cy="185.843" rx="0.73642" ry="1.03374" transform="rotate(-180 573.852 185.843)" fill="white"/>
<ellipse cx="592.999" cy="212.723" rx="0.73645" ry="1.03374" transform="rotate(-180 592.999 212.723)" fill="white"/>
<ellipse cx="579.743" cy="239.6" rx="0.73645" ry="1.03374" transform="rotate(-180 579.743 239.6)" fill="white"/>
<ellipse cx="511.99" cy="146.561" rx="0.73645" ry="1.03373" transform="rotate(-180 511.99 146.561)" fill="white"/>
<ellipse cx="498.735" cy="167.237" rx="0.73642" ry="1.03374" transform="rotate(-180 498.735 167.237)" fill="white"/>
<ellipse cx="472.224" cy="134.159" rx="0.73645" ry="1.03374" transform="rotate(-180 472.224 134.159)" fill="white"/>
<ellipse cx="413.309" cy="47.3256" rx="0.73642" ry="1.03374" transform="rotate(-180 413.309 47.3256)" fill="white"/>
<ellipse cx="448.658" cy="26.6516" rx="0.73645" ry="1.03373" transform="rotate(-180 448.658 26.6516)" fill="white"/>
<ellipse cx="544.393" cy="111.417" rx="0.73642" ry="1.03373" transform="rotate(-180 544.393 111.417)" fill="white"/>
<ellipse cx="600.362" cy="198.251" rx="0.73645" ry="1.03374" transform="rotate(-180 600.362 198.251)" fill="white"/>
<ellipse cx="755.015" cy="196.182" rx="0.73645" ry="1.03372" transform="rotate(-180 755.015 196.182)" fill="white"/>
<ellipse cx="945.506" cy="115.117" rx="0.73645" ry="1.03373" transform="rotate(-180 945.506 115.117)" fill="#C4C4C4"/>
<ellipse cx="871.862" cy="96.5086" rx="0.73645" ry="1.03374" transform="rotate(-180 871.862 96.5086)" fill="#C4C4C4"/>
<ellipse cx="910.158" cy="3.4742" rx="0.73645" ry="1.03373" transform="rotate(-180 910.158 3.4742)" fill="#C4C4C4"/>
<ellipse cx="821.784" cy="5.54171" rx="0.736389" ry="1.03373" transform="rotate(-180 821.784 5.54171)" fill="#C4C4C4"/>
<ellipse cx="808.528" cy="32.42" rx="0.73645" ry="1.03374" transform="rotate(-180 808.528 32.42)" fill="#C4C4C4"/>
<ellipse cx="326.936" cy="224.462" rx="0.73642" ry="1.03374" transform="rotate(-180 326.936 224.462)" fill="white"/>
<ellipse cx="383.736" cy="256.405" rx="0.73645" ry="1.03373" transform="rotate(-180 383.736 256.405)" fill="white"/>
<ellipse cx="253.293" cy="205.854" rx="0.73645" ry="1.03374" transform="rotate(-180 253.293 205.854)" fill="white"/>
<ellipse cx="291.588" cy="112.82" rx="0.73642" ry="1.03374" transform="rotate(-180 291.588 112.82)" fill="white"/>
<ellipse cx="184.069" cy="88.007" rx="0.736435" ry="1.03373" transform="rotate(-180 184.069 88.007)" fill="white"/>
<ellipse cx="203.215" cy="114.888" rx="0.73645" ry="1.03374" transform="rotate(-180 203.215 114.888)" fill="white"/>
<ellipse cx="189.959" cy="141.765" rx="0.736435" ry="1.03374" transform="rotate(-180 189.959 141.765)" fill="white"/>
<ellipse cx="122.208" cy="48.7247" rx="0.736435" ry="1.03374" transform="rotate(-180 122.208 48.7247)" fill="white"/>
<ellipse cx="108.952" cy="69.4013" rx="0.736435" ry="1.03374" transform="rotate(-180 108.952 69.4013)" fill="white"/>
<ellipse cx="82.4403" cy="36.3198" rx="0.736435" ry="1.03373" transform="rotate(-180 82.4403 36.3198)" fill="white"/>
<ellipse cx="154.611" cy="13.5782" rx="0.736435" ry="1.03373" transform="rotate(-180 154.611 13.5782)" fill="white"/>
<ellipse cx="210.58" cy="100.415" rx="0.73645" ry="1.03373" transform="rotate(-180 210.58 100.415)" fill="white"/>
<ellipse cx="365.231" cy="98.3436" rx="0.73645" ry="1.03374" transform="rotate(-180 365.231 98.3436)" fill="white"/>
<ellipse cx="346.502" cy="366.998" rx="0.73645" ry="1.03372" transform="rotate(-180 346.502 366.998)" fill="#C4C4C4"/>
<ellipse cx="277.277" cy="249.151" rx="0.73645" ry="1.03374" transform="rotate(-180 277.277 249.151)" fill="#C4C4C4"/>
<ellipse cx="283.168" cy="302.91" rx="0.73645" ry="1.03374" transform="rotate(-180 283.168 302.91)" fill="#C4C4C4"/>
<ellipse cx="215.416" cy="209.869" rx="0.73645" ry="1.03372" transform="rotate(-180 215.416 209.869)" fill="#C4C4C4"/>
<ellipse cx="202.16" cy="230.548" rx="0.73642" ry="1.03373" transform="rotate(-180 202.16 230.548)" fill="#C4C4C4"/>
<ellipse cx="175.648" cy="197.468" rx="0.736435" ry="1.03372" transform="rotate(-180 175.648 197.468)" fill="#C4C4C4"/>
<ellipse cx="116.734" cy="110.634" rx="0.736435" ry="1.03373" transform="rotate(-180 116.734 110.634)" fill="#C4C4C4"/>
<ellipse cx="152.082" cy="89.9608" rx="0.736435" ry="1.03373" transform="rotate(-180 152.082 89.9608)" fill="#C4C4C4"/>
<ellipse cx="247.818" cy="174.726" rx="0.73642" ry="1.03374" transform="rotate(-180 247.818 174.726)" fill="#C4C4C4"/>
<ellipse cx="458.44" cy="259.491" rx="0.73645" ry="1.03372" transform="rotate(-180 458.44 259.491)" fill="#C4C4C4"/>
<ellipse cx="188.274" cy="1377.82" rx="2.11838" ry="2.87756" fill="#C4C4C4"/>
<ellipse cx="400.114" cy="1429.61" rx="2.11838" ry="2.87756" fill="#C4C4C4"/>
<ellipse cx="289.957" cy="1688.59" rx="2.11838" ry="2.87744" fill="#C4C4C4"/>
<ellipse cx="599.242" cy="1757.65" rx="2.11838" ry="2.87756" fill="#C4C4C4"/>
<ellipse cx="544.164" cy="1682.84" rx="2.11835" ry="2.87756" fill="#C4C4C4"/>
<ellipse cx="582.295" cy="1608.02" rx="2.11841" ry="2.87744" fill="#C4C4C4"/>
<ellipse cx="777.187" cy="1867" rx="2.11841" ry="2.87769" fill="#C4C4C4"/>
<ellipse cx="815.318" cy="1809.45" rx="2.11835" ry="2.87756" fill="#C4C4C4"/>
<ellipse cx="891.579" cy="1901.53" rx="2.11841" ry="2.87744" fill="#C4C4C4"/>
<ellipse cx="1061.05" cy="2143.24" rx="2.11841" ry="2.87744" fill="#C4C4C4"/>
<ellipse cx="959.368" cy="2200.79" rx="2.11841" ry="2.87732" fill="#C4C4C4"/>
<ellipse cx="683.977" cy="1964.83" rx="2.11838" ry="2.87769" fill="#C4C4C4"/>
<ellipse cx="522.98" cy="1723.12" rx="2.11835" ry="2.87756" fill="#C4C4C4"/>
<ellipse cx="78.1184" cy="1728.88" rx="2.11839" ry="2.87756" fill="#C4C4C4"/>
<ellipse cx="628.235" cy="1971.75" rx="1.2243" ry="1.71838" transform="rotate(-180 628.235 1971.75)" fill="#C4C4C4"/>
<ellipse cx="505.805" cy="1940.82" rx="1.2243" ry="1.71863" transform="rotate(-180 505.805 1940.82)" fill="#C4C4C4"/>
<ellipse cx="569.47" cy="1786.15" rx="1.2243" ry="1.71851" transform="rotate(-180 569.47 1786.15)" fill="#C4C4C4"/>
<ellipse cx="390.723" cy="1744.9" rx="1.22427" ry="1.71838" transform="rotate(-180 390.723 1744.9)" fill="#C4C4C4"/>
<ellipse cx="422.554" cy="1789.58" rx="1.22427" ry="1.71851" transform="rotate(-180 422.554 1789.58)" fill="#C4C4C4"/>
<ellipse cx="400.517" cy="1834.26" rx="1.22427" ry="1.71838" transform="rotate(-180 400.517 1834.26)" fill="#C4C4C4"/>
<ellipse cx="287.883" cy="1679.6" rx="1.22427" ry="1.71863" transform="rotate(-180 287.883 1679.6)" fill="#C4C4C4"/>
<ellipse cx="265.847" cy="1713.97" rx="1.22427" ry="1.71851" transform="rotate(-180 265.847 1713.97)" fill="#C4C4C4"/>
<ellipse cx="221.772" cy="1658.98" rx="1.22427" ry="1.71851" transform="rotate(-180 221.772 1658.98)" fill="#C4C4C4"/>
<ellipse cx="123.829" cy="1514.62" rx="1.22429" ry="1.71851" transform="rotate(-180 123.829 1514.62)" fill="#C4C4C4"/>
<ellipse cx="182.595" cy="1480.25" rx="1.22429" ry="1.71838" transform="rotate(-180 182.595 1480.25)" fill="#C4C4C4"/>
<ellipse cx="341.753" cy="1621.17" rx="1.22427" ry="1.71851" transform="rotate(-180 341.753 1621.17)" fill="#C4C4C4"/>
<ellipse cx="434.796" cy="1765.53" rx="1.22427" ry="1.71863" transform="rotate(-180 434.796 1765.53)" fill="#C4C4C4"/>
<ellipse cx="691.897" cy="1762.09" rx="1.22427" ry="1.71851" transform="rotate(-180 691.897 1762.09)" fill="#C4C4C4"/>
<ellipse cx="942.2" cy="2313.72" rx="1.22424" ry="1.71863" transform="rotate(-180 942.2 2313.72)" fill="#C4C4C4"/>
<ellipse cx="1005.86" cy="2159.05" rx="1.2243" ry="1.71875" transform="rotate(-180 1005.86 2159.05)" fill="#C4C4C4"/>
<ellipse cx="827.119" cy="2117.81" rx="1.2243" ry="1.71863" transform="rotate(-180 827.119 2117.81)" fill="#C4C4C4"/>
<ellipse cx="858.95" cy="2162.49" rx="1.2243" ry="1.71838" transform="rotate(-180 858.95 2162.49)" fill="#C4C4C4"/>
<ellipse cx="836.912" cy="2207.17" rx="1.22424" ry="1.71851" transform="rotate(-180 836.912 2207.17)" fill="#C4C4C4"/>
<ellipse cx="724.279" cy="2052.5" rx="1.2243" ry="1.71851" transform="rotate(-180 724.279 2052.5)" fill="#C4C4C4"/>
<ellipse cx="702.242" cy="2086.88" rx="1.2243" ry="1.71875" transform="rotate(-180 702.242 2086.88)" fill="#C4C4C4"/>
<ellipse cx="658.167" cy="2031.89" rx="1.22427" ry="1.71851" transform="rotate(-180 658.167 2031.89)" fill="#C4C4C4"/>
<ellipse cx="560.224" cy="1887.53" rx="1.22427" ry="1.71863" transform="rotate(-180 560.224 1887.53)" fill="#C4C4C4"/>
<ellipse cx="618.99" cy="1853.16" rx="1.22427" ry="1.71851" transform="rotate(-180 618.99 1853.16)" fill="#C4C4C4"/>
<ellipse cx="778.148" cy="1994.07" rx="1.2243" ry="1.71838" transform="rotate(-180 778.148 1994.07)" fill="#C4C4C4"/>
<ellipse cx="871.193" cy="2138.43" rx="1.2243" ry="1.71863" transform="rotate(-180 871.193 2138.43)" fill="#C4C4C4"/>
<ellipse cx="801.942" cy="1960.24" rx="1.2243" ry="1.71851" transform="rotate(-180 801.942 1960.24)" fill="#C4C4C4"/>
<ellipse cx="679.512" cy="1929.31" rx="1.22427" ry="1.71838" transform="rotate(-180 679.512 1929.31)" fill="#C4C4C4"/>
<ellipse cx="743.176" cy="1774.64" rx="1.22424" ry="1.71851" transform="rotate(-180 743.176 1774.64)" fill="#C4C4C4"/>
<ellipse cx="564.43" cy="1733.39" rx="1.2243" ry="1.71875" transform="rotate(-180 564.43 1733.39)" fill="#C4C4C4"/>
<ellipse cx="596.261" cy="1778.07" rx="1.22427" ry="1.71863" transform="rotate(-180 596.261 1778.07)" fill="#C4C4C4"/>
<ellipse cx="574.225" cy="1822.76" rx="1.2243" ry="1.71851" transform="rotate(-180 574.225 1822.76)" fill="#C4C4C4"/>
<ellipse cx="461.592" cy="1668.09" rx="1.2243" ry="1.71851" transform="rotate(-180 461.592 1668.09)" fill="#C4C4C4"/>
<ellipse cx="439.554" cy="1702.46" rx="1.22427" ry="1.71851" transform="rotate(-180 439.554 1702.46)" fill="#C4C4C4"/>
<ellipse cx="395.479" cy="1647.47" rx="1.22427" ry="1.71838" transform="rotate(-180 395.479 1647.47)" fill="#C4C4C4"/>
<ellipse cx="297.537" cy="1503.11" rx="1.22427" ry="1.71838" transform="rotate(-180 297.537 1503.11)" fill="#C4C4C4"/>
<ellipse cx="356.302" cy="1468.74" rx="1.22427" ry="1.71851" transform="rotate(-180 356.302 1468.74)" fill="#C4C4C4"/>
<ellipse cx="515.46" cy="1609.66" rx="1.22427" ry="1.71851" transform="rotate(-180 515.46 1609.66)" fill="#C4C4C4"/>
<ellipse cx="608.504" cy="1754.02" rx="1.22427" ry="1.71851" transform="rotate(-180 608.504 1754.02)" fill="#C4C4C4"/>
<ellipse cx="865.604" cy="1750.58" rx="1.22424" ry="1.71851" transform="rotate(-180 865.604 1750.58)" fill="#C4C4C4"/>
<ellipse cx="861.257" cy="1741.55" rx="1.22424" ry="1.71838" transform="rotate(-180 861.257 1741.55)" fill="#C4C4C4"/>
<ellipse cx="738.828" cy="1710.61" rx="1.2243" ry="1.71851" transform="rotate(-180 738.828 1710.61)" fill="#C4C4C4"/>
<ellipse cx="802.492" cy="1555.95" rx="1.22424" ry="1.71863" transform="rotate(-180 802.492 1555.95)" fill="#C4C4C4"/>
<ellipse cx="623.746" cy="1514.7" rx="1.22427" ry="1.71851" transform="rotate(-180 623.746 1514.7)" fill="#C4C4C4"/>
<ellipse cx="655.576" cy="1559.38" rx="1.2243" ry="1.71863" transform="rotate(-180 655.576 1559.38)" fill="#C4C4C4"/>
<ellipse cx="633.539" cy="1604.06" rx="1.22427" ry="1.71851" transform="rotate(-180 633.539 1604.06)" fill="#C4C4C4"/>
<ellipse cx="520.906" cy="1449.4" rx="1.22427" ry="1.71851" transform="rotate(-180 520.906 1449.4)" fill="#C4C4C4"/>
<ellipse cx="498.869" cy="1483.77" rx="1.22427" ry="1.71851" transform="rotate(-180 498.869 1483.77)" fill="#C4C4C4"/>
<ellipse cx="454.794" cy="1428.78" rx="1.22427" ry="1.71851" transform="rotate(-180 454.794 1428.78)" fill="#C4C4C4"/>
<ellipse cx="356.851" cy="1284.42" rx="1.22427" ry="1.71838" transform="rotate(-180 356.851 1284.42)" fill="#C4C4C4"/>
<ellipse cx="415.617" cy="1250.05" rx="1.2243" ry="1.71851" transform="rotate(-180 415.617 1250.05)" fill="#C4C4C4"/>
<ellipse cx="574.775" cy="1390.97" rx="1.22427" ry="1.71838" transform="rotate(-180 574.775 1390.97)" fill="#C4C4C4"/>
<ellipse cx="667.82" cy="1535.33" rx="1.22427" ry="1.71863" transform="rotate(-180 667.82 1535.33)" fill="#C4C4C4"/>
<ellipse cx="924.919" cy="1531.89" rx="1.2243" ry="1.71851" transform="rotate(-180 924.919 1531.89)" fill="#C4C4C4"/>
<ellipse cx="1005.74" cy="1779.67" rx="1.2243" ry="1.71838" transform="rotate(-180 1005.74 1779.67)" fill="white"/>
<ellipse cx="1069.41" cy="1625.01" rx="1.2243" ry="1.71863" transform="rotate(-180 1069.41 1625.01)" fill="white"/>
<ellipse cx="890.662" cy="1583.76" rx="1.2243" ry="1.71863" transform="rotate(-180 890.662 1583.76)" fill="white"/>
<ellipse cx="922.494" cy="1628.44" rx="1.2243" ry="1.71838" transform="rotate(-180 922.494 1628.44)" fill="white"/>
<ellipse cx="900.457" cy="1673.12" rx="1.2243" ry="1.71863" transform="rotate(-180 900.457 1673.12)" fill="white"/>
<ellipse cx="787.822" cy="1518.46" rx="1.2243" ry="1.71851" transform="rotate(-180 787.822 1518.46)" fill="white"/>
<ellipse cx="765.786" cy="1552.83" rx="1.22424" ry="1.71851" transform="rotate(-180 765.786 1552.83)" fill="white"/>
<ellipse cx="721.712" cy="1497.83" rx="1.2243" ry="1.71838" transform="rotate(-180 721.712 1497.83)" fill="white"/>
<ellipse cx="623.769" cy="1353.48" rx="1.22427" ry="1.71851" transform="rotate(-180 623.769 1353.48)" fill="white"/>
<ellipse cx="682.534" cy="1319.11" rx="1.22427" ry="1.71851" transform="rotate(-180 682.534 1319.11)" fill="white"/>
<ellipse cx="841.693" cy="1460.03" rx="1.22424" ry="1.71838" transform="rotate(-180 841.693 1460.03)" fill="white"/>
<ellipse cx="934.736" cy="1604.38" rx="1.2243" ry="1.71838" transform="rotate(-180 934.736 1604.38)" fill="white"/>
<ellipse cx="435.227" cy="1752.97" rx="0.73642" ry="1.03369" transform="rotate(-180 435.227 1752.97)" fill="#C4C4C4"/>
<ellipse cx="361.582" cy="1734.36" rx="0.73645" ry="1.03381" transform="rotate(-180 361.582 1734.36)" fill="#C4C4C4"/>
<ellipse cx="399.879" cy="1641.32" rx="0.73645" ry="1.03369" transform="rotate(-180 399.879 1641.32)" fill="#C4C4C4"/>
<ellipse cx="292.359" cy="1616.51" rx="0.73645" ry="1.03381" transform="rotate(-180 292.359 1616.51)" fill="#C4C4C4"/>
<ellipse cx="311.505" cy="1643.39" rx="0.73642" ry="1.03369" transform="rotate(-180 311.505 1643.39)" fill="#C4C4C4"/>
<ellipse cx="298.25" cy="1670.27" rx="0.73645" ry="1.03381" transform="rotate(-180 298.25 1670.27)" fill="#C4C4C4"/>
<ellipse cx="230.497" cy="1577.23" rx="0.73645" ry="1.03381" transform="rotate(-180 230.497 1577.23)" fill="#C4C4C4"/>
<ellipse cx="217.242" cy="1597.91" rx="0.73645" ry="1.03381" transform="rotate(-180 217.242 1597.91)" fill="#C4C4C4"/>
<ellipse cx="190.73" cy="1564.83" rx="0.736435" ry="1.03345" transform="rotate(-180 190.73 1564.83)" fill="#C4C4C4"/>
<ellipse cx="131.815" cy="1477.99" rx="0.736435" ry="1.03369" transform="rotate(-180 131.815 1477.99)" fill="#C4C4C4"/>
<ellipse cx="167.164" cy="1457.32" rx="0.736435" ry="1.03381" transform="rotate(-180 167.164 1457.32)" fill="#C4C4C4"/>
<ellipse cx="262.901" cy="1542.08" rx="0.73645" ry="1.03381" transform="rotate(-180 262.901 1542.08)" fill="#C4C4C4"/>
<ellipse cx="318.87" cy="1628.92" rx="0.73642" ry="1.03381" transform="rotate(-180 318.87 1628.92)" fill="#C4C4C4"/>
<ellipse cx="473.521" cy="1626.85" rx="0.73645" ry="1.03369" transform="rotate(-180 473.521 1626.85)" fill="#C4C4C4"/>
<ellipse cx="642.828" cy="1671.62" rx="0.73645" ry="1.03381" transform="rotate(-180 642.828 1671.62)" fill="#C4C4C4"/>
<ellipse cx="569.186" cy="1653.01" rx="0.73645" ry="1.03381" transform="rotate(-180 569.186 1653.01)" fill="#C4C4C4"/>
<ellipse cx="607.481" cy="1559.98" rx="0.73642" ry="1.03369" transform="rotate(-180 607.481 1559.98)" fill="#C4C4C4"/>
<ellipse cx="499.962" cy="1535.17" rx="0.73642" ry="1.03369" transform="rotate(-180 499.962 1535.17)" fill="#C4C4C4"/>
<ellipse cx="519.107" cy="1562.05" rx="0.73645" ry="1.03381" transform="rotate(-180 519.107 1562.05)" fill="#C4C4C4"/>
<ellipse cx="505.852" cy="1588.92" rx="0.73645" ry="1.03381" transform="rotate(-180 505.852 1588.92)" fill="#C4C4C4"/>
<ellipse cx="438.1" cy="1495.88" rx="0.73645" ry="1.03381" transform="rotate(-180 438.1 1495.88)" fill="#C4C4C4"/>
<ellipse cx="424.844" cy="1516.56" rx="0.73642" ry="1.03369" transform="rotate(-180 424.844 1516.56)" fill="#C4C4C4"/>
<ellipse cx="398.332" cy="1483.48" rx="0.73645" ry="1.03369" transform="rotate(-180 398.332 1483.48)" fill="#C4C4C4"/>
<ellipse cx="339.418" cy="1396.65" rx="0.73645" ry="1.03369" transform="rotate(-180 339.418 1396.65)" fill="#C4C4C4"/>
<ellipse cx="374.766" cy="1375.97" rx="0.73642" ry="1.03369" transform="rotate(-180 374.766 1375.97)" fill="#C4C4C4"/>
<ellipse cx="470.504" cy="1460.74" rx="0.73642" ry="1.03369" transform="rotate(-180 470.504 1460.74)" fill="#C4C4C4"/>
<ellipse cx="526.472" cy="1547.57" rx="0.73645" ry="1.03369" transform="rotate(-180 526.472 1547.57)" fill="#C4C4C4"/>
<ellipse cx="681.124" cy="1545.51" rx="0.73645" ry="1.03394" transform="rotate(-180 681.124 1545.51)" fill="#C4C4C4"/>
<ellipse cx="854.667" cy="1976.64" rx="0.736389" ry="1.03369" transform="rotate(-180 854.667 1976.64)" fill="#C4C4C4"/>
<ellipse cx="781.023" cy="1958.03" rx="0.73645" ry="1.03381" transform="rotate(-180 781.023 1958.03)" fill="#C4C4C4"/>
<ellipse cx="819.319" cy="1865" rx="0.73645" ry="1.03357" transform="rotate(-180 819.319 1865)" fill="#C4C4C4"/>
<ellipse cx="711.801" cy="1840.19" rx="0.73645" ry="1.03381" transform="rotate(-180 711.801 1840.19)" fill="#C4C4C4"/>
<ellipse cx="730.946" cy="1867.06" rx="0.73645" ry="1.03381" transform="rotate(-180 730.946 1867.06)" fill="#C4C4C4"/>
<ellipse cx="717.691" cy="1893.94" rx="0.73645" ry="1.03381" transform="rotate(-180 717.691 1893.94)" fill="#C4C4C4"/>
<ellipse cx="649.938" cy="1800.9" rx="0.73645" ry="1.03369" transform="rotate(-180 649.938 1800.9)" fill="#C4C4C4"/>
<ellipse cx="636.682" cy="1821.58" rx="0.73645" ry="1.03369" transform="rotate(-180 636.682 1821.58)" fill="#C4C4C4"/>
<ellipse cx="610.171" cy="1788.5" rx="0.73642" ry="1.03369" transform="rotate(-180 610.171 1788.5)" fill="#C4C4C4"/>
<ellipse cx="551.256" cy="1701.67" rx="0.73645" ry="1.03369" transform="rotate(-180 551.256 1701.67)" fill="#C4C4C4"/>
<ellipse cx="586.605" cy="1680.99" rx="0.73645" ry="1.03369" transform="rotate(-180 586.605 1680.99)" fill="#C4C4C4"/>
<ellipse cx="682.342" cy="1765.76" rx="0.73642" ry="1.03369" transform="rotate(-180 682.342 1765.76)" fill="#C4C4C4"/>
<ellipse cx="738.31" cy="1852.6" rx="0.73645" ry="1.03369" transform="rotate(-180 738.31 1852.6)" fill="#C4C4C4"/>
<ellipse cx="892.963" cy="1850.53" rx="0.73645" ry="1.03369" transform="rotate(-180 892.963 1850.53)" fill="#C4C4C4"/>
<ellipse cx="981.77" cy="1873.05" rx="0.73645" ry="1.03369" transform="rotate(-180 981.77 1873.05)" fill="#C4C4C4"/>
<ellipse cx="908.127" cy="1854.44" rx="0.736389" ry="1.03369" transform="rotate(-180 908.127 1854.44)" fill="#C4C4C4"/>
<ellipse cx="946.422" cy="1761.4" rx="0.736389" ry="1.03381" transform="rotate(-180 946.422 1761.4)" fill="#C4C4C4"/>
<ellipse cx="838.902" cy="1736.59" rx="0.73645" ry="1.03369" transform="rotate(-180 838.902 1736.59)" fill="#C4C4C4"/>
<ellipse cx="858.049" cy="1763.47" rx="0.73645" ry="1.03369" transform="rotate(-180 858.049 1763.47)" fill="#C4C4C4"/>
<ellipse cx="844.793" cy="1790.35" rx="0.73645" ry="1.03381" transform="rotate(-180 844.793 1790.35)" fill="#C4C4C4"/>
<ellipse cx="777.041" cy="1697.31" rx="0.73645" ry="1.03381" transform="rotate(-180 777.041 1697.31)" fill="#C4C4C4"/>
<ellipse cx="763.785" cy="1717.99" rx="0.73645" ry="1.03369" transform="rotate(-180 763.785 1717.99)" fill="#C4C4C4"/>
<ellipse cx="737.274" cy="1684.9" rx="0.73645" ry="1.03381" transform="rotate(-180 737.274 1684.9)" fill="#C4C4C4"/>
<ellipse cx="678.359" cy="1598.07" rx="0.73645" ry="1.03381" transform="rotate(-180 678.359 1598.07)" fill="#C4C4C4"/>
<ellipse cx="713.707" cy="1577.4" rx="0.73645" ry="1.03381" transform="rotate(-180 713.707 1577.4)" fill="#C4C4C4"/>
<ellipse cx="809.444" cy="1662.16" rx="0.73645" ry="1.03369" transform="rotate(-180 809.444 1662.16)" fill="#C4C4C4"/>
<ellipse cx="865.414" cy="1749" rx="0.73645" ry="1.03369" transform="rotate(-180 865.414 1749)" fill="#C4C4C4"/>
<ellipse cx="1020.06" cy="1746.93" rx="0.73645" ry="1.03369" transform="rotate(-180 1020.06 1746.93)" fill="#C4C4C4"/>
<ellipse cx="1053.8" cy="2051.45" rx="0.73645" ry="1.03394" transform="rotate(-180 1053.8 2051.45)" fill="#C4C4C4"/>
<ellipse cx="980.152" cy="2032.84" rx="0.73645" ry="1.03381" transform="rotate(-180 980.152 2032.84)" fill="#C4C4C4"/>
<ellipse cx="1018.45" cy="1939.81" rx="0.73645" ry="1.03357" transform="rotate(-180 1018.45 1939.81)" fill="#C4C4C4"/>
<ellipse cx="910.928" cy="1915" rx="0.73645" ry="1.03369" transform="rotate(-180 910.928 1915)" fill="#C4C4C4"/>
<ellipse cx="930.074" cy="1941.88" rx="0.73645" ry="1.03381" transform="rotate(-180 930.074 1941.88)" fill="#C4C4C4"/>
<ellipse cx="916.82" cy="1968.76" rx="0.736389" ry="1.03381" transform="rotate(-180 916.82 1968.76)" fill="#C4C4C4"/>
<ellipse cx="849.066" cy="1875.71" rx="0.73645" ry="1.03381" transform="rotate(-180 849.066 1875.71)" fill="#C4C4C4"/>
<ellipse cx="835.811" cy="1896.39" rx="0.736389" ry="1.03369" transform="rotate(-180 835.811 1896.39)" fill="#C4C4C4"/>
<ellipse cx="809.299" cy="1863.31" rx="0.736389" ry="1.03381" transform="rotate(-180 809.299 1863.31)" fill="#C4C4C4"/>
<ellipse cx="750.384" cy="1776.48" rx="0.73645" ry="1.03369" transform="rotate(-180 750.384 1776.48)" fill="#C4C4C4"/>
<ellipse cx="785.733" cy="1755.81" rx="0.73645" ry="1.03369" transform="rotate(-180 785.733 1755.81)" fill="#C4C4C4"/>
<ellipse cx="881.47" cy="1840.57" rx="0.73645" ry="1.03381" transform="rotate(-180 881.47 1840.57)" fill="#C4C4C4"/>
<ellipse cx="937.439" cy="1927.4" rx="0.73645" ry="1.03369" transform="rotate(-180 937.439 1927.4)" fill="#C4C4C4"/>
<ellipse cx="1092.09" cy="1925.33" rx="0.73645" ry="1.03369" transform="rotate(-180 1092.09 1925.33)" fill="#C4C4C4"/>
<ellipse cx="642.828" cy="1844.27" rx="0.73645" ry="1.03369" transform="rotate(-180 642.828 1844.27)" fill="#C4C4C4"/>
<ellipse cx="569.184" cy="1825.66" rx="0.73642" ry="1.03381" transform="rotate(-180 569.184 1825.66)" fill="#C4C4C4"/>
<ellipse cx="607.481" cy="1732.63" rx="0.73642" ry="1.03381" transform="rotate(-180 607.481 1732.63)" fill="#C4C4C4"/>
<ellipse cx="499.96" cy="1707.82" rx="0.73645" ry="1.03381" transform="rotate(-180 499.96 1707.82)" fill="#C4C4C4"/>
<ellipse cx="519.107" cy="1734.7" rx="0.73645" ry="1.03369" transform="rotate(-180 519.107 1734.7)" fill="#C4C4C4"/>
<ellipse cx="505.852" cy="1761.57" rx="0.73645" ry="1.03369" transform="rotate(-180 505.852 1761.57)" fill="#C4C4C4"/>
<ellipse cx="438.099" cy="1668.53" rx="0.73642" ry="1.03381" transform="rotate(-180 438.099 1668.53)" fill="#C4C4C4"/>
<ellipse cx="424.844" cy="1689.21" rx="0.73642" ry="1.03369" transform="rotate(-180 424.844 1689.21)" fill="#C4C4C4"/>
<ellipse cx="398.332" cy="1656.13" rx="0.73645" ry="1.03394" transform="rotate(-180 398.332 1656.13)" fill="#C4C4C4"/>
<ellipse cx="339.418" cy="1569.3" rx="0.73645" ry="1.03381" transform="rotate(-180 339.418 1569.3)" fill="#C4C4C4"/>
<ellipse cx="374.766" cy="1548.63" rx="0.73642" ry="1.03369" transform="rotate(-180 374.766 1548.63)" fill="#C4C4C4"/>
<ellipse cx="470.503" cy="1633.39" rx="0.73645" ry="1.03369" transform="rotate(-180 470.503 1633.39)" fill="#C4C4C4"/>
<ellipse cx="526.472" cy="1720.23" rx="0.73645" ry="1.03381" transform="rotate(-180 526.472 1720.23)" fill="#C4C4C4"/>
<ellipse cx="681.124" cy="1718.16" rx="0.73645" ry="1.03369" transform="rotate(-180 681.124 1718.16)" fill="#C4C4C4"/>
<ellipse cx="473.357" cy="1706.15" rx="0.73645" ry="1.03381" transform="rotate(-180 473.357 1706.15)" fill="white"/>
<ellipse cx="399.714" cy="1687.54" rx="0.73645" ry="1.03381" transform="rotate(-180 399.714 1687.54)" fill="white"/>
<ellipse cx="438.009" cy="1594.51" rx="0.73645" ry="1.03381" transform="rotate(-180 438.009 1594.51)" fill="white"/>
<ellipse cx="330.489" cy="1569.7" rx="0.73645" ry="1.03369" transform="rotate(-180 330.489 1569.7)" fill="white"/>
<ellipse cx="349.636" cy="1596.58" rx="0.73645" ry="1.03369" transform="rotate(-180 349.636 1596.58)" fill="white"/>
<ellipse cx="336.38" cy="1623.45" rx="0.73645" ry="1.03369" transform="rotate(-180 336.38 1623.45)" fill="white"/>
<ellipse cx="268.627" cy="1530.41" rx="0.73642" ry="1.03369" transform="rotate(-180 268.627 1530.41)" fill="white"/>
<ellipse cx="255.372" cy="1551.09" rx="0.73645" ry="1.03369" transform="rotate(-180 255.372 1551.09)" fill="white"/>
<ellipse cx="228.86" cy="1518.01" rx="0.73645" ry="1.03381" transform="rotate(-180 228.86 1518.01)" fill="white"/>
<ellipse cx="169.946" cy="1431.18" rx="0.736435" ry="1.03381" transform="rotate(-180 169.946 1431.18)" fill="white"/>
<ellipse cx="205.295" cy="1410.5" rx="0.73645" ry="1.03381" transform="rotate(-180 205.295 1410.5)" fill="white"/>
<ellipse cx="301.031" cy="1495.27" rx="0.73645" ry="1.03369" transform="rotate(-180 301.031 1495.27)" fill="white"/>
<ellipse cx="357.001" cy="1582.1" rx="0.73645" ry="1.03369" transform="rotate(-180 357.001 1582.1)" fill="white"/>
<ellipse cx="511.652" cy="1580.04" rx="0.736404" ry="1.03381" transform="rotate(-180 511.652 1580.04)" fill="white"/>
<ellipse cx="541.145" cy="2022.68" rx="0.73645" ry="1.03369" transform="rotate(-180 541.145 2022.68)" fill="#C4C4C4"/>
<ellipse cx="467.501" cy="2004.07" rx="0.73642" ry="1.03381" transform="rotate(-180 467.501 2004.07)" fill="#C4C4C4"/>
<ellipse cx="505.797" cy="1911.04" rx="0.73645" ry="1.03369" transform="rotate(-180 505.797 1911.04)" fill="#C4C4C4"/>
<ellipse cx="398.277" cy="1886.22" rx="0.73645" ry="1.03357" transform="rotate(-180 398.277 1886.22)" fill="#C4C4C4"/>
<ellipse cx="417.424" cy="1913.1" rx="0.73642" ry="1.03369" transform="rotate(-180 417.424 1913.1)" fill="#C4C4C4"/>
<ellipse cx="404.168" cy="1939.98" rx="0.73645" ry="1.03381" transform="rotate(-180 404.168 1939.98)" fill="#C4C4C4"/>
<ellipse cx="336.416" cy="1846.94" rx="0.73645" ry="1.03369" transform="rotate(-180 336.416 1846.94)" fill="#C4C4C4"/>
<ellipse cx="323.16" cy="1867.62" rx="0.73642" ry="1.03369" transform="rotate(-180 323.16 1867.62)" fill="#C4C4C4"/>
<ellipse cx="296.647" cy="1834.54" rx="0.73642" ry="1.03369" transform="rotate(-180 296.647 1834.54)" fill="#C4C4C4"/>
<ellipse cx="237.734" cy="1747.7" rx="0.73642" ry="1.03369" transform="rotate(-180 237.734 1747.7)" fill="#C4C4C4"/>
<ellipse cx="273.082" cy="1727.03" rx="0.73645" ry="1.03369" transform="rotate(-180 273.082 1727.03)" fill="#C4C4C4"/>
<ellipse cx="368.818" cy="1811.79" rx="0.73642" ry="1.03381" transform="rotate(-180 368.818 1811.79)" fill="#C4C4C4"/>
<ellipse cx="424.788" cy="1898.63" rx="0.73642" ry="1.03381" transform="rotate(-180 424.788 1898.63)" fill="#C4C4C4"/>
<ellipse cx="579.44" cy="1896.56" rx="0.73645" ry="1.03357" transform="rotate(-180 579.44 1896.56)" fill="#C4C4C4"/>
<ellipse cx="795.352" cy="2155.04" rx="0.73645" ry="1.03369" transform="rotate(-180 795.352 2155.04)" fill="#C4C4C4"/>
<ellipse cx="721.71" cy="2136.43" rx="0.73645" ry="1.03357" transform="rotate(-180 721.71 2136.43)" fill="#C4C4C4"/>
<ellipse cx="760.004" cy="2043.4" rx="0.73645" ry="1.03381" transform="rotate(-180 760.004 2043.4)" fill="#C4C4C4"/>
<ellipse cx="793.373" cy="2208.62" rx="0.736389" ry="1.03357" transform="rotate(-180 793.373 2208.62)" fill="#C4C4C4"/>
<ellipse cx="652.485" cy="2018.59" rx="0.73642" ry="1.03369" transform="rotate(-180 652.485 2018.59)" fill="#C4C4C4"/>
<ellipse cx="685.854" cy="2183.8" rx="0.73645" ry="1.03381" transform="rotate(-180 685.854 2183.8)" fill="#C4C4C4"/>
<ellipse cx="671.631" cy="2045.47" rx="0.73645" ry="1.03381" transform="rotate(-180 671.631 2045.47)" fill="#C4C4C4"/>
<ellipse cx="705" cy="2210.68" rx="0.736389" ry="1.03381" transform="rotate(-180 705 2210.68)" fill="#C4C4C4"/>
<ellipse cx="658.375" cy="2072.34" rx="0.73645" ry="1.03369" transform="rotate(-180 658.375 2072.34)" fill="#C4C4C4"/>
<ellipse cx="691.745" cy="2237.56" rx="0.73645" ry="1.03381" transform="rotate(-180 691.745 2237.56)" fill="#C4C4C4"/>
<ellipse cx="590.624" cy="1979.3" rx="0.73645" ry="1.03381" transform="rotate(-180 590.624 1979.3)" fill="#C4C4C4"/>
<ellipse cx="577.367" cy="1999.98" rx="0.73642" ry="1.03369" transform="rotate(-180 577.367 1999.98)" fill="#C4C4C4"/>
<ellipse cx="550.855" cy="1966.9" rx="0.73645" ry="1.03357" transform="rotate(-180 550.855 1966.9)" fill="#C4C4C4"/>
<ellipse cx="491.941" cy="1880.07" rx="0.73645" ry="1.03369" transform="rotate(-180 491.941 1880.07)" fill="#C4C4C4"/>
<ellipse cx="527.29" cy="1859.4" rx="0.73645" ry="1.03369" transform="rotate(-180 527.29 1859.4)" fill="#C4C4C4"/>
<ellipse cx="623.027" cy="1944.16" rx="0.73645" ry="1.03369" transform="rotate(-180 623.027 1944.16)" fill="#C4C4C4"/>
<ellipse cx="678.995" cy="2030.99" rx="0.73645" ry="1.03369" transform="rotate(-180 678.995 2030.99)" fill="#C4C4C4"/>
<ellipse cx="833.647" cy="2028.92" rx="0.73645" ry="1.03369" transform="rotate(-180 833.647 2028.92)" fill="#C4C4C4"/>
<ellipse cx="1036.85" cy="2057.21" rx="0.73645" ry="1.03369" transform="rotate(-180 1036.85 2057.21)" fill="#C4C4C4"/>
<ellipse cx="963.205" cy="2038.6" rx="0.736389" ry="1.03394" transform="rotate(-180 963.205 2038.6)" fill="#C4C4C4"/>
<ellipse cx="1001.5" cy="1945.57" rx="0.73645" ry="1.03369" transform="rotate(-180 1001.5 1945.57)" fill="#C4C4C4"/>
<ellipse cx="893.981" cy="1920.76" rx="0.73645" ry="1.03381" transform="rotate(-180 893.981 1920.76)" fill="#C4C4C4"/>
<ellipse cx="913.127" cy="1947.64" rx="0.736389" ry="1.03369" transform="rotate(-180 913.127 1947.64)" fill="#C4C4C4"/>
<ellipse cx="899.871" cy="1974.51" rx="0.73645" ry="1.03369" transform="rotate(-180 899.871 1974.51)" fill="#C4C4C4"/>
<ellipse cx="832.12" cy="1881.47" rx="0.73645" ry="1.03369" transform="rotate(-180 832.12 1881.47)" fill="#C4C4C4"/>
<ellipse cx="818.864" cy="1902.15" rx="0.73645" ry="1.03369" transform="rotate(-180 818.864 1902.15)" fill="#C4C4C4"/>
<ellipse cx="792.352" cy="1869.07" rx="0.73645" ry="1.03357" transform="rotate(-180 792.352 1869.07)" fill="#C4C4C4"/>
<ellipse cx="733.437" cy="1782.24" rx="0.73645" ry="1.03369" transform="rotate(-180 733.437 1782.24)" fill="#C4C4C4"/>
<ellipse cx="768.786" cy="1761.56" rx="0.73645" ry="1.03369" transform="rotate(-180 768.786 1761.56)" fill="#C4C4C4"/>
<ellipse cx="864.523" cy="1846.33" rx="0.73645" ry="1.03369" transform="rotate(-180 864.523 1846.33)" fill="#C4C4C4"/>
<ellipse cx="920.491" cy="1933.16" rx="0.73645" ry="1.03369" transform="rotate(-180 920.491 1933.16)" fill="#C4C4C4"/>
<ellipse cx="1075.14" cy="1931.09" rx="0.73645" ry="1.03381" transform="rotate(-180 1075.14 1931.09)" fill="#C4C4C4"/>
<ellipse cx="1111.66" cy="2285.12" rx="0.73645" ry="1.03394" transform="rotate(-180 1111.66 2285.12)" fill="#C4C4C4"/>
<ellipse cx="1004.14" cy="2260.3" rx="0.73645" ry="1.03394" transform="rotate(-180 1004.14 2260.3)" fill="#C4C4C4"/>
<ellipse cx="1023.28" cy="2287.18" rx="0.736389" ry="1.03381" transform="rotate(-180 1023.28 2287.18)" fill="#C4C4C4"/>
<ellipse cx="1010.03" cy="2314.06" rx="0.73645" ry="1.03369" transform="rotate(-180 1010.03 2314.06)" fill="#C4C4C4"/>
<ellipse cx="942.276" cy="2221.02" rx="0.73645" ry="1.03357" transform="rotate(-180 942.276 2221.02)" fill="#C4C4C4"/>
<ellipse cx="929.02" cy="2241.7" rx="0.73645" ry="1.03369" transform="rotate(-180 929.02 2241.7)" fill="#C4C4C4"/>
<ellipse cx="902.508" cy="2208.62" rx="0.73645" ry="1.03369" transform="rotate(-180 902.508 2208.62)" fill="#C4C4C4"/>
<ellipse cx="843.594" cy="2121.79" rx="0.73645" ry="1.03369" transform="rotate(-180 843.594 2121.79)" fill="#C4C4C4"/>
<ellipse cx="878.942" cy="2101.11" rx="0.73645" ry="1.03394" transform="rotate(-180 878.942 2101.11)" fill="#C4C4C4"/>
<ellipse cx="974.68" cy="2185.88" rx="0.73645" ry="1.03369" transform="rotate(-180 974.68 2185.88)" fill="#C4C4C4"/>
<ellipse cx="1030.65" cy="2272.71" rx="0.73645" ry="1.03369" transform="rotate(-180 1030.65 2272.71)" fill="#C4C4C4"/>
<ellipse cx="837.721" cy="2149.29" rx="0.736389" ry="1.03369" transform="rotate(-180 837.721 2149.29)" fill="white"/>
<ellipse cx="764.077" cy="2130.68" rx="0.73645" ry="1.03369" transform="rotate(-180 764.077 2130.68)" fill="white"/>
<ellipse cx="802.372" cy="2037.65" rx="0.73645" ry="1.03381" transform="rotate(-180 802.372 2037.65)" fill="white"/>
<ellipse cx="694.852" cy="2012.83" rx="0.73642" ry="1.03357" transform="rotate(-180 694.852 2012.83)" fill="white"/>
<ellipse cx="713.999" cy="2039.71" rx="0.736389" ry="1.03369" transform="rotate(-180 713.999 2039.71)" fill="white"/>
<ellipse cx="700.743" cy="2066.59" rx="0.73645" ry="1.03394" transform="rotate(-180 700.743 2066.59)" fill="white"/>
<ellipse cx="632.99" cy="1973.55" rx="0.73645" ry="1.03381" transform="rotate(-180 632.99 1973.55)" fill="white"/>
<ellipse cx="619.735" cy="1994.23" rx="0.73642" ry="1.03381" transform="rotate(-180 619.735 1994.23)" fill="white"/>
<ellipse cx="593.224" cy="1961.15" rx="0.73645" ry="1.03369" transform="rotate(-180 593.224 1961.15)" fill="white"/>
<ellipse cx="534.309" cy="1874.32" rx="0.73642" ry="1.03369" transform="rotate(-180 534.309 1874.32)" fill="white"/>
<ellipse cx="569.658" cy="1853.64" rx="0.73645" ry="1.03369" transform="rotate(-180 569.658 1853.64)" fill="white"/>
<ellipse cx="665.393" cy="1938.41" rx="0.73642" ry="1.03357" transform="rotate(-180 665.393 1938.41)" fill="white"/>
<ellipse cx="721.362" cy="2025.24" rx="0.736389" ry="1.03369" transform="rotate(-180 721.362 2025.24)" fill="white"/>
<ellipse cx="876.015" cy="2023.17" rx="0.73645" ry="1.03369" transform="rotate(-180 876.015 2023.17)" fill="white"/>
<ellipse cx="384.385" cy="1671.62" rx="0.73645" ry="1.03381" transform="rotate(-180 384.385 1671.62)" fill="#C4C4C4"/>
<ellipse cx="310.741" cy="1653.01" rx="0.73645" ry="1.03381" transform="rotate(-180 310.741 1653.01)" fill="#C4C4C4"/>
<ellipse cx="349.037" cy="1559.98" rx="0.73645" ry="1.03369" transform="rotate(-180 349.037 1559.98)" fill="#C4C4C4"/>
<ellipse cx="241.517" cy="1535.17" rx="0.73642" ry="1.03369" transform="rotate(-180 241.517 1535.17)" fill="#C4C4C4"/>
<ellipse cx="260.664" cy="1562.05" rx="0.73642" ry="1.03381" transform="rotate(-180 260.664 1562.05)" fill="#C4C4C4"/>
<ellipse cx="247.408" cy="1588.92" rx="0.73645" ry="1.03381" transform="rotate(-180 247.408 1588.92)" fill="#C4C4C4"/>
<ellipse cx="179.655" cy="1495.88" rx="0.736435" ry="1.03381" transform="rotate(-180 179.655 1495.88)" fill="#C4C4C4"/>
<ellipse cx="166.4" cy="1516.56" rx="0.736435" ry="1.03369" transform="rotate(-180 166.4 1516.56)" fill="#C4C4C4"/>
<ellipse cx="139.889" cy="1483.48" rx="0.736435" ry="1.03369" transform="rotate(-180 139.889 1483.48)" fill="#C4C4C4"/>
<ellipse cx="80.9743" cy="1396.65" rx="0.736435" ry="1.03369" transform="rotate(-180 80.9743 1396.65)" fill="#C4C4C4"/>
<ellipse cx="116.323" cy="1375.97" rx="0.736435" ry="1.03369" transform="rotate(-180 116.323 1375.97)" fill="#C4C4C4"/>
<ellipse cx="212.06" cy="1460.74" rx="0.73645" ry="1.03381" transform="rotate(-180 212.06 1460.74)" fill="#C4C4C4"/>
<ellipse cx="268.027" cy="1547.57" rx="0.73645" ry="1.03369" transform="rotate(-180 268.027 1547.57)" fill="#C4C4C4"/>
<ellipse cx="422.68" cy="1545.51" rx="0.73645" ry="1.03394" transform="rotate(-180 422.68 1545.51)" fill="#C4C4C4"/>
<ellipse cx="524.198" cy="1786.72" rx="0.73645" ry="1.03381" transform="rotate(-180 524.198 1786.72)" fill="#C4C4C4"/>
<ellipse cx="450.555" cy="1768.11" rx="0.73645" ry="1.03381" transform="rotate(-180 450.555 1768.11)" fill="#C4C4C4"/>
<ellipse cx="488.85" cy="1675.08" rx="0.73642" ry="1.03394" transform="rotate(-180 488.85 1675.08)" fill="#C4C4C4"/>
<ellipse cx="381.33" cy="1650.27" rx="0.73645" ry="1.03369" transform="rotate(-180 381.33 1650.27)" fill="#C4C4C4"/>
<ellipse cx="400.477" cy="1677.15" rx="0.73645" ry="1.03369" transform="rotate(-180 400.477 1677.15)" fill="#C4C4C4"/>
<ellipse cx="387.221" cy="1704.02" rx="0.73645" ry="1.03369" transform="rotate(-180 387.221 1704.02)" fill="#C4C4C4"/>
<ellipse cx="319.468" cy="1610.98" rx="0.73642" ry="1.03381" transform="rotate(-180 319.468 1610.98)" fill="#C4C4C4"/>
<ellipse cx="306.213" cy="1631.66" rx="0.73645" ry="1.03369" transform="rotate(-180 306.213 1631.66)" fill="#C4C4C4"/>
<ellipse cx="279.701" cy="1598.58" rx="0.73645" ry="1.03381" transform="rotate(-180 279.701 1598.58)" fill="#C4C4C4"/>
<ellipse cx="220.787" cy="1511.75" rx="0.73645" ry="1.03369" transform="rotate(-180 220.787 1511.75)" fill="#C4C4C4"/>
<ellipse cx="256.136" cy="1491.07" rx="0.73645" ry="1.03369" transform="rotate(-180 256.136 1491.07)" fill="#C4C4C4"/>
<ellipse cx="351.873" cy="1575.84" rx="0.73645" ry="1.03369" transform="rotate(-180 351.873 1575.84)" fill="#C4C4C4"/>
<ellipse cx="407.841" cy="1662.67" rx="0.73642" ry="1.03369" transform="rotate(-180 407.841 1662.67)" fill="#C4C4C4"/>
<ellipse cx="562.493" cy="1660.6" rx="0.736389" ry="1.03369" transform="rotate(-180 562.493 1660.6)" fill="#C4C4C4"/>
<ellipse cx="757.222" cy="1550.76" rx="0.73645" ry="1.03381" transform="rotate(-180 757.222 1550.76)" fill="#C4C4C4"/>
<ellipse cx="683.578" cy="1532.16" rx="0.73642" ry="1.03369" transform="rotate(-180 683.578 1532.16)" fill="#C4C4C4"/>
<ellipse cx="721.873" cy="1439.12" rx="0.73645" ry="1.03381" transform="rotate(-180 721.873 1439.12)" fill="#C4C4C4"/>
<ellipse cx="614.353" cy="1414.31" rx="0.73642" ry="1.03381" transform="rotate(-180 614.353 1414.31)" fill="#C4C4C4"/>
<ellipse cx="633.499" cy="1441.19" rx="0.73645" ry="1.03357" transform="rotate(-180 633.499 1441.19)" fill="#C4C4C4"/>
<ellipse cx="620.245" cy="1468.07" rx="0.73642" ry="1.03369" transform="rotate(-180 620.245 1468.07)" fill="#C4C4C4"/>
<ellipse cx="552.493" cy="1375.03" rx="0.73642" ry="1.03369" transform="rotate(-180 552.493 1375.03)" fill="#C4C4C4"/>
<ellipse cx="539.237" cy="1395.7" rx="0.73645" ry="1.03381" transform="rotate(-180 539.237 1395.7)" fill="#C4C4C4"/>
<ellipse cx="512.724" cy="1362.62" rx="0.73645" ry="1.03369" transform="rotate(-180 512.724 1362.62)" fill="#C4C4C4"/>
<ellipse cx="453.809" cy="1275.79" rx="0.73645" ry="1.03369" transform="rotate(-180 453.809 1275.79)" fill="#C4C4C4"/>
<ellipse cx="489.159" cy="1255.12" rx="0.73645" ry="1.03369" transform="rotate(-180 489.159 1255.12)" fill="#C4C4C4"/>
<ellipse cx="584.895" cy="1339.88" rx="0.73645" ry="1.03381" transform="rotate(-180 584.895 1339.88)" fill="#C4C4C4"/>
<ellipse cx="640.864" cy="1426.72" rx="0.73645" ry="1.03381" transform="rotate(-180 640.864 1426.72)" fill="#C4C4C4"/>
<ellipse cx="795.517" cy="1424.65" rx="0.73645" ry="1.03369" transform="rotate(-180 795.517 1424.65)" fill="#C4C4C4"/>
<ellipse cx="1087.69" cy="1654.36" rx="0.73645" ry="1.03369" transform="rotate(-180 1087.69 1654.36)" fill="#C4C4C4"/>
<ellipse cx="1014.05" cy="1635.75" rx="0.736389" ry="1.03369" transform="rotate(-180 1014.05 1635.75)" fill="#C4C4C4"/>
<ellipse cx="1052.34" cy="1542.71" rx="0.736389" ry="1.03369" transform="rotate(-180 1052.34 1542.71)" fill="#C4C4C4"/>
<ellipse cx="944.822" cy="1517.9" rx="0.736389" ry="1.03357" transform="rotate(-180 944.822 1517.9)" fill="#C4C4C4"/>
<ellipse cx="963.969" cy="1544.78" rx="0.73645" ry="1.03381" transform="rotate(-180 963.969 1544.78)" fill="#C4C4C4"/>
<ellipse cx="950.714" cy="1571.66" rx="0.73645" ry="1.03369" transform="rotate(-180 950.714 1571.66)" fill="#C4C4C4"/>
<ellipse cx="882.961" cy="1478.62" rx="0.73645" ry="1.03381" transform="rotate(-180 882.961 1478.62)" fill="#C4C4C4"/>
<ellipse cx="869.705" cy="1499.3" rx="0.73645" ry="1.03381" transform="rotate(-180 869.705 1499.3)" fill="#C4C4C4"/>
<ellipse cx="843.193" cy="1466.21" rx="0.73645" ry="1.03381" transform="rotate(-180 843.193 1466.21)" fill="#C4C4C4"/>
<ellipse cx="784.279" cy="1379.38" rx="0.73645" ry="1.03369" transform="rotate(-180 784.279 1379.38)" fill="#C4C4C4"/>
<ellipse cx="819.628" cy="1358.71" rx="0.73645" ry="1.03381" transform="rotate(-180 819.628 1358.71)" fill="#C4C4C4"/>
<ellipse cx="915.364" cy="1443.47" rx="0.736389" ry="1.03369" transform="rotate(-180 915.364 1443.47)" fill="#C4C4C4"/>
<ellipse cx="971.333" cy="1530.31" rx="0.73645" ry="1.03369" transform="rotate(-180 971.333 1530.31)" fill="#C4C4C4"/>
<ellipse cx="1066.51" cy="1942.11" rx="0.73645" ry="1.03357" transform="rotate(-180 1066.51 1942.11)" fill="#C4C4C4"/>
<ellipse cx="992.862" cy="1923.5" rx="0.73645" ry="1.03381" transform="rotate(-180 992.862 1923.5)" fill="#C4C4C4"/>
<ellipse cx="1031.16" cy="1830.46" rx="0.73645" ry="1.03369" transform="rotate(-180 1031.16 1830.46)" fill="#C4C4C4"/>
<ellipse cx="923.638" cy="1805.65" rx="0.73645" ry="1.03369" transform="rotate(-180 923.638 1805.65)" fill="#C4C4C4"/>
<ellipse cx="942.784" cy="1832.53" rx="0.736389" ry="1.03381" transform="rotate(-180 942.784 1832.53)" fill="#C4C4C4"/>
<ellipse cx="929.528" cy="1859.41" rx="0.73645" ry="1.03381" transform="rotate(-180 929.528 1859.41)" fill="#C4C4C4"/>
<ellipse cx="861.776" cy="1766.37" rx="0.73645" ry="1.03381" transform="rotate(-180 861.776 1766.37)" fill="#C4C4C4"/>
<ellipse cx="848.521" cy="1787.05" rx="0.73645" ry="1.03369" transform="rotate(-180 848.521 1787.05)" fill="#C4C4C4"/>
<ellipse cx="822.009" cy="1753.97" rx="0.73645" ry="1.03369" transform="rotate(-180 822.009 1753.97)" fill="#C4C4C4"/>
<ellipse cx="763.094" cy="1667.13" rx="0.736389" ry="1.03369" transform="rotate(-180 763.094 1667.13)" fill="#C4C4C4"/>
<ellipse cx="798.443" cy="1646.46" rx="0.73645" ry="1.03381" transform="rotate(-180 798.443 1646.46)" fill="#C4C4C4"/>
<ellipse cx="894.18" cy="1731.22" rx="0.73645" ry="1.03369" transform="rotate(-180 894.18 1731.22)" fill="#C4C4C4"/>
<ellipse cx="950.149" cy="1818.06" rx="0.73645" ry="1.03369" transform="rotate(-180 950.149 1818.06)" fill="#C4C4C4"/>
<ellipse cx="1104.8" cy="1815.99" rx="0.73645" ry="1.03381" transform="rotate(-180 1104.8 1815.99)" fill="#C4C4C4"/>
<ellipse cx="447.936" cy="2051.45" rx="0.73642" ry="1.03394" transform="rotate(-180 447.936 2051.45)" fill="white"/>
<ellipse cx="504.736" cy="2083.39" rx="0.73645" ry="1.03381" transform="rotate(-180 504.736 2083.39)" fill="white"/>
<ellipse cx="374.293" cy="2032.84" rx="0.73645" ry="1.03381" transform="rotate(-180 374.293 2032.84)" fill="white"/>
<ellipse cx="412.588" cy="1939.81" rx="0.73642" ry="1.03357" transform="rotate(-180 412.588 1939.81)" fill="white"/>
<ellipse cx="305.069" cy="1915" rx="0.73645" ry="1.03369" transform="rotate(-180 305.069 1915)" fill="white"/>
<ellipse cx="324.215" cy="1941.88" rx="0.73645" ry="1.03381" transform="rotate(-180 324.215 1941.88)" fill="white"/>
<ellipse cx="310.959" cy="1968.76" rx="0.73642" ry="1.03381" transform="rotate(-180 310.959 1968.76)" fill="white"/>
<ellipse cx="243.208" cy="1875.71" rx="0.73642" ry="1.03381" transform="rotate(-180 243.208 1875.71)" fill="white"/>
<ellipse cx="229.952" cy="1896.39" rx="0.73645" ry="1.03369" transform="rotate(-180 229.952 1896.39)" fill="white"/>
<ellipse cx="203.44" cy="1863.31" rx="0.73645" ry="1.03381" transform="rotate(-180 203.44 1863.31)" fill="white"/>
<ellipse cx="144.525" cy="1776.48" rx="0.736435" ry="1.03369" transform="rotate(-180 144.525 1776.48)" fill="white"/>
<ellipse cx="179.874" cy="1755.81" rx="0.736435" ry="1.03369" transform="rotate(-180 179.874 1755.81)" fill="white"/>
<ellipse cx="275.611" cy="1840.57" rx="0.73645" ry="1.03381" transform="rotate(-180 275.611 1840.57)" fill="white"/>
<ellipse cx="331.58" cy="1927.4" rx="0.73645" ry="1.03369" transform="rotate(-180 331.58 1927.4)" fill="white"/>
<ellipse cx="486.231" cy="1925.33" rx="0.73645" ry="1.03369" transform="rotate(-180 486.231 1925.33)" fill="white"/>
<ellipse cx="467.501" cy="2193.99" rx="0.73645" ry="1.03394" transform="rotate(-180 467.501 2193.99)" fill="#C4C4C4"/>
<ellipse cx="398.277" cy="2076.14" rx="0.73645" ry="1.03357" transform="rotate(-180 398.277 2076.14)" fill="#C4C4C4"/>
<ellipse cx="404.168" cy="2129.9" rx="0.73645" ry="1.03369" transform="rotate(-180 404.168 2129.9)" fill="#C4C4C4"/>
<ellipse cx="336.416" cy="2036.86" rx="0.73645" ry="1.03369" transform="rotate(-180 336.416 2036.86)" fill="#C4C4C4"/>
<ellipse cx="323.16" cy="2057.54" rx="0.73642" ry="1.03369" transform="rotate(-180 323.16 2057.54)" fill="#C4C4C4"/>
<ellipse cx="296.647" cy="2024.46" rx="0.73642" ry="1.03369" transform="rotate(-180 296.647 2024.46)" fill="#C4C4C4"/>
<ellipse cx="237.734" cy="1937.62" rx="0.73642" ry="1.03381" transform="rotate(-180 237.734 1937.62)" fill="#C4C4C4"/>
<ellipse cx="273.082" cy="1916.95" rx="0.73645" ry="1.03369" transform="rotate(-180 273.082 1916.95)" fill="#C4C4C4"/>
<ellipse cx="368.818" cy="2001.72" rx="0.73642" ry="1.03369" transform="rotate(-180 368.818 2001.72)" fill="#C4C4C4"/>
<ellipse cx="579.44" cy="2086.48" rx="0.73645" ry="1.03394" transform="rotate(-180 579.44 2086.48)" fill="#C4C4C4"/>
<ellipse cx="140.318" cy="2290.31" rx="2.11839" ry="2.87732" fill="#C4C4C4"/>
<ellipse cx="16.8966" cy="2242.95" rx="1.22429" ry="1.71838" transform="rotate(-180 16.8966 2242.95)" fill="#C4C4C4"/>
<ellipse cx="68.1766" cy="2255.5" rx="1.22429" ry="1.71838" transform="rotate(-180 68.1766 2255.5)" fill="#C4C4C4"/>
<ellipse cx="190.604" cy="2231.44" rx="1.22429" ry="1.71863" transform="rotate(-180 190.604 2231.44)" fill="#C4C4C4"/>
<ellipse cx="186.257" cy="2222.41" rx="1.22427" ry="1.71863" transform="rotate(-180 186.257 2222.41)" fill="#C4C4C4"/>
<ellipse cx="63.828" cy="2191.47" rx="1.22427" ry="1.71851" transform="rotate(-180 63.828 2191.47)" fill="#C4C4C4"/>
<ellipse cx="127.492" cy="2036.8" rx="1.22429" ry="1.71851" transform="rotate(-180 127.492 2036.8)" fill="#C4C4C4"/>
<ellipse cx="249.919" cy="2012.75" rx="1.22427" ry="1.71851" transform="rotate(-180 249.919 2012.75)" fill="#C4C4C4"/>
<ellipse cx="453.173" cy="2291.46" rx="1.22427" ry="1.71851" transform="rotate(-180 453.173 2291.46)" fill="white"/>
<ellipse cx="330.745" cy="2260.53" rx="1.22427" ry="1.71838" transform="rotate(-180 330.745 2260.53)" fill="white"/>
<ellipse cx="394.408" cy="2105.86" rx="1.22427" ry="1.71851" transform="rotate(-180 394.408 2105.86)" fill="white"/>
<ellipse cx="215.662" cy="2064.62" rx="1.2243" ry="1.71851" transform="rotate(-180 215.662 2064.62)" fill="white"/>
<ellipse cx="247.494" cy="2109.3" rx="1.22427" ry="1.71851" transform="rotate(-180 247.494 2109.3)" fill="white"/>
<ellipse cx="225.457" cy="2153.98" rx="1.2243" ry="1.71863" transform="rotate(-180 225.457 2153.98)" fill="white"/>
<ellipse cx="112.822" cy="1999.31" rx="1.22429" ry="1.71838" transform="rotate(-180 112.822 1999.31)" fill="white"/>
<ellipse cx="90.7862" cy="2033.68" rx="1.22429" ry="1.71851" transform="rotate(-180 90.7862 2033.68)" fill="white"/>
<ellipse cx="46.7117" cy="1978.69" rx="1.22429" ry="1.71851" transform="rotate(-180 46.7117 1978.69)" fill="white"/>
<ellipse cx="7.53426" cy="1799.97" rx="1.22429" ry="1.71851" transform="rotate(-180 7.53426 1799.97)" fill="white"/>
<ellipse cx="166.693" cy="1940.88" rx="1.22429" ry="1.71851" transform="rotate(-180 166.693 1940.88)" fill="white"/>
<ellipse cx="259.736" cy="2085.24" rx="1.22427" ry="1.71851" transform="rotate(-180 259.736 2085.24)" fill="white"/>
<ellipse cx="516.836" cy="2081.81" rx="1.2243" ry="1.71838" transform="rotate(-180 516.836 2081.81)" fill="white"/>
<ellipse cx="6.12367" cy="2026.36" rx="0.736435" ry="1.03369" transform="rotate(-180 6.12367 2026.36)" fill="#C4C4C4"/>
<ellipse cx="36.8007" cy="2321.04" rx="0.736435" ry="1.03394" transform="rotate(-180 36.8007 2321.04)" fill="#C4C4C4"/>
<ellipse cx="7.34218" cy="2246.62" rx="0.736435" ry="1.03381" transform="rotate(-180 7.34218 2246.62)" fill="#C4C4C4"/>
<ellipse cx="63.3104" cy="2333.45" rx="0.736435" ry="1.03394" transform="rotate(-180 63.3104 2333.45)" fill="#C4C4C4"/>
<ellipse cx="217.963" cy="2331.38" rx="0.73642" ry="1.03381" transform="rotate(-180 217.963 2331.38)" fill="#C4C4C4"/>
<ellipse cx="271.422" cy="2242.26" rx="0.73645" ry="1.03381" transform="rotate(-180 271.422 2242.26)" fill="#C4C4C4"/>
<ellipse cx="163.902" cy="2217.45" rx="0.736435" ry="1.03369" transform="rotate(-180 163.902 2217.45)" fill="#C4C4C4"/>
<ellipse cx="183.049" cy="2244.33" rx="0.736435" ry="1.03381" transform="rotate(-180 183.049 2244.33)" fill="#C4C4C4"/>
<ellipse cx="169.793" cy="2271.21" rx="0.736435" ry="1.03369" transform="rotate(-180 169.793 2271.21)" fill="#C4C4C4"/>
<ellipse cx="102.041" cy="2178.17" rx="0.736435" ry="1.03369" transform="rotate(-180 102.041 2178.17)" fill="#C4C4C4"/>
<ellipse cx="88.7848" cy="2198.85" rx="0.736435" ry="1.03369" transform="rotate(-180 88.7848 2198.85)" fill="#C4C4C4"/>
<ellipse cx="62.2738" cy="2165.76" rx="0.736435" ry="1.03357" transform="rotate(-180 62.2738 2165.76)" fill="#C4C4C4"/>
<ellipse cx="3.35878" cy="2078.93" rx="0.736435" ry="1.03369" transform="rotate(-180 3.35878 2078.93)" fill="#C4C4C4"/>
<ellipse cx="38.7072" cy="2058.26" rx="0.736435" ry="1.03369" transform="rotate(-180 38.7072 2058.26)" fill="#C4C4C4"/>
<ellipse cx="134.444" cy="2143.02" rx="0.736435" ry="1.03369" transform="rotate(-180 134.444 2143.02)" fill="#C4C4C4"/>
<ellipse cx="190.414" cy="2229.86" rx="0.736435" ry="1.03369" transform="rotate(-180 190.414 2229.86)" fill="#C4C4C4"/>
<ellipse cx="345.065" cy="2227.79" rx="0.73645" ry="1.03381" transform="rotate(-180 345.065 2227.79)" fill="#C4C4C4"/>
<ellipse cx="75.3842" cy="2257.34" rx="0.736435" ry="1.03369" transform="rotate(-180 75.3842 2257.34)" fill="#C4C4C4"/>
<ellipse cx="110.733" cy="2236.66" rx="0.736435" ry="1.03381" transform="rotate(-180 110.733 2236.66)" fill="#C4C4C4"/>
<ellipse cx="206.47" cy="2321.43" rx="0.73645" ry="1.03381" transform="rotate(-180 206.47 2321.43)" fill="#C4C4C4"/>
<ellipse cx="6.12367" cy="2199.01" rx="0.736435" ry="1.03394" transform="rotate(-180 6.12367 2199.01)" fill="#C4C4C4"/>
<ellipse cx="58.4376" cy="2263.1" rx="0.736435" ry="1.03381" transform="rotate(-180 58.4376 2263.1)" fill="#C4C4C4"/>
<ellipse cx="93.7865" cy="2242.42" rx="0.736435" ry="1.03345" transform="rotate(-180 93.7865 2242.42)" fill="#C4C4C4"/>
<ellipse cx="189.523" cy="2327.19" rx="0.736435" ry="1.03357" transform="rotate(-180 189.523 2327.19)" fill="#C4C4C4"/>
<ellipse cx="82.2218" cy="2031.62" rx="0.736435" ry="1.03357" transform="rotate(-180 82.2218 2031.62)" fill="#C4C4C4"/>
<ellipse cx="8.57826" cy="2013.02" rx="0.736435" ry="1.03369" transform="rotate(-180 8.57826 2013.02)" fill="#C4C4C4"/>
<ellipse cx="46.8734" cy="1919.98" rx="0.736435" ry="1.03381" transform="rotate(-180 46.8734 1919.98)" fill="#C4C4C4"/>
<ellipse cx="120.517" cy="1905.51" rx="0.736435" ry="1.03369" transform="rotate(-180 120.517 1905.51)" fill="#C4C4C4"/>
<ellipse cx="412.691" cy="2135.21" rx="0.73645" ry="1.03369" transform="rotate(-180 412.691 2135.21)" fill="#C4C4C4"/>
<ellipse cx="339.047" cy="2116.61" rx="0.73645" ry="1.03381" transform="rotate(-180 339.047 2116.61)" fill="#C4C4C4"/>
<ellipse cx="377.342" cy="2023.57" rx="0.73645" ry="1.03381" transform="rotate(-180 377.342 2023.57)" fill="#C4C4C4"/>
<ellipse cx="269.822" cy="1998.76" rx="0.73645" ry="1.03357" transform="rotate(-180 269.822 1998.76)" fill="#C4C4C4"/>
<ellipse cx="288.969" cy="2025.64" rx="0.73645" ry="1.03381" transform="rotate(-180 288.969 2025.64)" fill="#C4C4C4"/>
<ellipse cx="275.714" cy="2052.52" rx="0.73645" ry="1.03357" transform="rotate(-180 275.714 2052.52)" fill="#C4C4C4"/>
<ellipse cx="207.961" cy="1959.48" rx="0.73645" ry="1.03381" transform="rotate(-180 207.961 1959.48)" fill="#C4C4C4"/>
<ellipse cx="194.705" cy="1980.15" rx="0.73645" ry="1.03369" transform="rotate(-180 194.705 1980.15)" fill="#C4C4C4"/>
<ellipse cx="168.193" cy="1947.07" rx="0.736435" ry="1.03381" transform="rotate(-180 168.193 1947.07)" fill="#C4C4C4"/>
<ellipse cx="109.279" cy="1860.24" rx="0.736435" ry="1.03369" transform="rotate(-180 109.279 1860.24)" fill="#C4C4C4"/>
<ellipse cx="144.628" cy="1839.57" rx="0.736435" ry="1.03369" transform="rotate(-180 144.628 1839.57)" fill="#C4C4C4"/>
<ellipse cx="240.365" cy="1924.33" rx="0.73645" ry="1.03369" transform="rotate(-180 240.365 1924.33)" fill="#C4C4C4"/>
<ellipse cx="296.333" cy="2011.17" rx="0.73642" ry="1.03381" transform="rotate(-180 296.333 2011.17)" fill="#C4C4C4"/>
<ellipse cx="450.984" cy="2009.1" rx="0.73645" ry="1.03369" transform="rotate(-180 450.984 2009.1)" fill="#C4C4C4"/>
<ellipse cx="356.158" cy="2311.32" rx="0.73642" ry="1.03369" transform="rotate(-180 356.158 2311.32)" fill="#C4C4C4"/>
<ellipse cx="248.638" cy="2286.51" rx="0.73642" ry="1.03381" transform="rotate(-180 248.638 2286.51)" fill="#C4C4C4"/>
<ellipse cx="267.784" cy="2313.39" rx="0.73645" ry="1.03381" transform="rotate(-180 267.784 2313.39)" fill="#C4C4C4"/>
<ellipse cx="186.776" cy="2247.23" rx="0.736435" ry="1.03369" transform="rotate(-180 186.776 2247.23)" fill="#C4C4C4"/>
<ellipse cx="173.521" cy="2267.9" rx="0.736435" ry="1.03345" transform="rotate(-180 173.521 2267.9)" fill="#C4C4C4"/>
<ellipse cx="147.009" cy="2234.83" rx="0.736435" ry="1.03357" transform="rotate(-180 147.009 2234.83)" fill="#C4C4C4"/>
<ellipse cx="88.0941" cy="2147.99" rx="0.736435" ry="1.03381" transform="rotate(-180 88.0941 2147.99)" fill="#C4C4C4"/>
<ellipse cx="123.443" cy="2127.32" rx="0.736435" ry="1.03369" transform="rotate(-180 123.443 2127.32)" fill="#C4C4C4"/>
<ellipse cx="219.18" cy="2212.08" rx="0.73645" ry="1.03381" transform="rotate(-180 219.18 2212.08)" fill="#C4C4C4"/>
<ellipse cx="275.149" cy="2298.92" rx="0.73642" ry="1.03369" transform="rotate(-180 275.149 2298.92)" fill="#C4C4C4"/>
<ellipse cx="429.8" cy="2296.85" rx="0.73645" ry="1.03394" transform="rotate(-180 429.8 2296.85)" fill="#C4C4C4"/>
<ellipse cx="24.5793" cy="1470.93" rx="2.11839" ry="2.87756" fill="#C4C4C4"/>
<ellipse cx="194.05" cy="1712.64" rx="2.11838" ry="2.87756" fill="#C4C4C4"/>
<ellipse cx="92.3679" cy="1770.19" rx="2.11839" ry="2.8775" fill="#C4C4C4"/>
<ellipse cx="197.63" cy="1914.06" rx="1.22427" ry="1.71851" transform="rotate(-180 197.63 1914.06)" fill="#C4C4C4"/>
<ellipse cx="75.2005" cy="1883.12" rx="1.22429" ry="1.71851" transform="rotate(-180 75.2005 1883.12)" fill="#C4C4C4"/>
<ellipse cx="138.863" cy="1728.46" rx="1.22427" ry="1.71851" transform="rotate(-180 138.863 1728.46)" fill="#C4C4C4"/>
<ellipse cx="4.19295" cy="1707.83" rx="1.22429" ry="1.71863" transform="rotate(-180 4.19295 1707.83)" fill="#C4C4C4"/>
<ellipse cx="261.292" cy="1704.4" rx="1.22427" ry="1.71851" transform="rotate(-180 261.292 1704.4)" fill="#C4C4C4"/>
<ellipse cx="57.9188" cy="1101.29" rx="1.22429" ry="1.71857" transform="rotate(-180 57.9188 1101.29)" fill="#C4C4C4"/>
<ellipse cx="261.173" cy="1380.01" rx="1.22427" ry="1.71851" transform="rotate(-180 261.173 1380.01)" fill="white"/>
<ellipse cx="138.745" cy="1349.07" rx="1.22427" ry="1.71844" transform="rotate(-180 138.745 1349.07)" fill="white"/>
<ellipse cx="202.408" cy="1194.41" rx="1.22427" ry="1.71844" transform="rotate(-180 202.408 1194.41)" fill="white"/>
<ellipse cx="23.6622" cy="1153.16" rx="1.22429" ry="1.71857" transform="rotate(-180 23.6622 1153.16)" fill="white"/>
<ellipse cx="55.494" cy="1197.84" rx="1.22429" ry="1.71844" transform="rotate(-180 55.494 1197.84)" fill="white"/>
<ellipse cx="33.4569" cy="1242.52" rx="1.22429" ry="1.71857" transform="rotate(-180 33.4569 1242.52)" fill="white"/>
<ellipse cx="67.7362" cy="1173.79" rx="1.22429" ry="1.71857" transform="rotate(-180 67.7362 1173.79)" fill="white"/>
<ellipse cx="324.836" cy="1170.35" rx="1.2243" ry="1.71851" transform="rotate(-180 324.836 1170.35)" fill="white"/>
<ellipse cx="25.9625" cy="1419.93" rx="0.73645" ry="1.03369" transform="rotate(-180 25.9625 1419.93)" fill="#C4C4C4"/>
<ellipse cx="114.77" cy="1442.45" rx="0.736435" ry="1.03363" transform="rotate(-180 114.77 1442.45)" fill="#C4C4C4"/>
<ellipse cx="41.1271" cy="1423.84" rx="0.736435" ry="1.03363" transform="rotate(-180 41.1271 1423.84)" fill="#C4C4C4"/>
<ellipse cx="79.422" cy="1330.8" rx="0.736435" ry="1.03375" transform="rotate(-180 79.422 1330.8)" fill="#C4C4C4"/>
<ellipse cx="153.065" cy="1316.33" rx="0.736435" ry="1.03375" transform="rotate(-180 153.065 1316.33)" fill="#C4C4C4"/>
<ellipse cx="186.796" cy="1620.85" rx="0.736435" ry="1.03375" transform="rotate(-180 186.796 1620.85)" fill="#C4C4C4"/>
<ellipse cx="113.152" cy="1602.24" rx="0.736435" ry="1.03375" transform="rotate(-180 113.152 1602.24)" fill="#C4C4C4"/>
<ellipse cx="151.447" cy="1509.21" rx="0.736435" ry="1.03363" transform="rotate(-180 151.447 1509.21)" fill="#C4C4C4"/>
<ellipse cx="43.9283" cy="1484.4" rx="0.73645" ry="1.03381" transform="rotate(-180 43.9283 1484.4)" fill="#C4C4C4"/>
<ellipse cx="63.0741" cy="1511.28" rx="0.736435" ry="1.03369" transform="rotate(-180 63.0741 1511.28)" fill="#C4C4C4"/>
<ellipse cx="49.8197" cy="1538.16" rx="0.73645" ry="1.03394" transform="rotate(-180 49.8197 1538.16)" fill="#C4C4C4"/>
<ellipse cx="14.4699" cy="1409.97" rx="0.736435" ry="1.03375" transform="rotate(-180 14.4699 1409.97)" fill="#C4C4C4"/>
<ellipse cx="70.4393" cy="1496.81" rx="0.736435" ry="1.03369" transform="rotate(-180 70.4393 1496.81)" fill="#C4C4C4"/>
<ellipse cx="225.09" cy="1494.73" rx="0.73645" ry="1.03375" transform="rotate(-180 225.09 1494.73)" fill="#C4C4C4"/>
<ellipse cx="169.849" cy="1626.61" rx="0.736435" ry="1.03381" transform="rotate(-180 169.849 1626.61)" fill="#C4C4C4"/>
<ellipse cx="96.205" cy="1608" rx="0.73645" ry="1.03363" transform="rotate(-180 96.205 1608)" fill="#C4C4C4"/>
<ellipse cx="134.5" cy="1514.97" rx="0.736435" ry="1.03369" transform="rotate(-180 134.5 1514.97)" fill="#C4C4C4"/>
<ellipse cx="26.9809" cy="1490.16" rx="0.736435" ry="1.03369" transform="rotate(-180 26.9809 1490.16)" fill="#C4C4C4"/>
<ellipse cx="46.1273" cy="1517.04" rx="0.736435" ry="1.03375" transform="rotate(-180 46.1273 1517.04)" fill="#C4C4C4"/>
<ellipse cx="32.871" cy="1543.91" rx="0.73645" ry="1.03357" transform="rotate(-180 32.871 1543.91)" fill="#C4C4C4"/>
<ellipse cx="53.4909" cy="1502.56" rx="0.736435" ry="1.03363" transform="rotate(-180 53.4909 1502.56)" fill="#C4C4C4"/>
<ellipse cx="208.143" cy="1500.49" rx="0.73645" ry="1.03363" transform="rotate(-180 208.143 1500.49)" fill="#C4C4C4"/>
<ellipse cx="280.005" cy="1966.16" rx="0.73642" ry="1.03381" transform="rotate(-180 280.005 1966.16)" fill="#C4C4C4"/>
<ellipse cx="206.361" cy="1947.55" rx="0.73642" ry="1.03381" transform="rotate(-180 206.361 1947.55)" fill="#C4C4C4"/>
<ellipse cx="244.657" cy="1854.52" rx="0.73642" ry="1.03369" transform="rotate(-180 244.657 1854.52)" fill="#C4C4C4"/>
<ellipse cx="137.136" cy="1829.7" rx="0.736435" ry="1.03369" transform="rotate(-180 137.136 1829.7)" fill="#C4C4C4"/>
<ellipse cx="156.283" cy="1856.59" rx="0.73645" ry="1.03369" transform="rotate(-180 156.283 1856.59)" fill="#C4C4C4"/>
<ellipse cx="143.028" cy="1883.46" rx="0.736435" ry="1.03381" transform="rotate(-180 143.028 1883.46)" fill="#C4C4C4"/>
<ellipse cx="75.2763" cy="1790.42" rx="0.736435" ry="1.03381" transform="rotate(-180 75.2763 1790.42)" fill="#C4C4C4"/>
<ellipse cx="62.0197" cy="1811.1" rx="0.736435" ry="1.03369" transform="rotate(-180 62.0197 1811.1)" fill="#C4C4C4"/>
<ellipse cx="35.5077" cy="1778.02" rx="0.736435" ry="1.03369" transform="rotate(-180 35.5077 1778.02)" fill="#C4C4C4"/>
<ellipse cx="11.942" cy="1670.51" rx="0.736435" ry="1.03369" transform="rotate(-180 11.942 1670.51)" fill="#C4C4C4"/>
<ellipse cx="107.68" cy="1755.28" rx="0.736435" ry="1.03381" transform="rotate(-180 107.68 1755.28)" fill="#C4C4C4"/>
<ellipse cx="163.648" cy="1842.12" rx="0.736435" ry="1.03381" transform="rotate(-180 163.648 1842.12)" fill="#C4C4C4"/>
<ellipse cx="318.3" cy="1840.04" rx="0.73645" ry="1.03381" transform="rotate(-180 318.3 1840.04)" fill="#C4C4C4"/>
<ellipse cx="9.01527" cy="1592.57" rx="0.736435" ry="1.03369" transform="rotate(-180 9.01527 1592.57)" fill="white"/>
<ellipse cx="220.691" cy="1223.76" rx="0.73645" ry="1.03375" transform="rotate(-180 220.691 1223.76)" fill="#C4C4C4"/>
<ellipse cx="147.047" cy="1205.15" rx="0.736435" ry="1.03363" transform="rotate(-180 147.047 1205.15)" fill="#C4C4C4"/>
<ellipse cx="185.342" cy="1112.11" rx="0.736435" ry="1.03369" transform="rotate(-180 185.342 1112.11)" fill="#C4C4C4"/>
<ellipse cx="77.8224" cy="1087.3" rx="0.73645" ry="1.03369" transform="rotate(-180 77.8224 1087.3)" fill="#C4C4C4"/>
<ellipse cx="96.9689" cy="1114.18" rx="0.736435" ry="1.03375" transform="rotate(-180 96.9689 1114.18)" fill="#C4C4C4"/>
<ellipse cx="83.7137" cy="1141.06" rx="0.73645" ry="1.03369" transform="rotate(-180 83.7137 1141.06)" fill="#C4C4C4"/>
<ellipse cx="15.9608" cy="1048.02" rx="0.736435" ry="1.03375" transform="rotate(-180 15.9608 1048.02)" fill="#C4C4C4"/>
<ellipse cx="2.70546" cy="1068.7" rx="0.736435" ry="1.03375" transform="rotate(-180 2.70546 1068.7)" fill="#C4C4C4"/>
<ellipse cx="48.3646" cy="1012.87" rx="0.73645" ry="1.03375" transform="rotate(-180 48.3646 1012.87)" fill="#C4C4C4"/>
<ellipse cx="104.333" cy="1099.71" rx="0.736435" ry="1.03369" transform="rotate(-180 104.333 1099.71)" fill="#C4C4C4"/>
<ellipse cx="258.984" cy="1097.64" rx="0.73645" ry="1.03375" transform="rotate(-180 258.984 1097.64)" fill="#C4C4C4"/>
<ellipse cx="199.506" cy="1511.51" rx="0.73642" ry="1.03369" transform="rotate(-180 199.506 1511.51)" fill="#C4C4C4"/>
<ellipse cx="125.862" cy="1492.9" rx="0.736435" ry="1.03375" transform="rotate(-180 125.862 1492.9)" fill="#C4C4C4"/>
<ellipse cx="164.158" cy="1399.86" rx="0.736435" ry="1.03363" transform="rotate(-180 164.158 1399.86)" fill="#C4C4C4"/>
<ellipse cx="56.6383" cy="1375.05" rx="0.736435" ry="1.03381" transform="rotate(-180 56.6383 1375.05)" fill="#C4C4C4"/>
<ellipse cx="75.7841" cy="1401.93" rx="0.73645" ry="1.03381" transform="rotate(-180 75.7841 1401.93)" fill="#C4C4C4"/>
<ellipse cx="62.5282" cy="1428.81" rx="0.736435" ry="1.03369" transform="rotate(-180 62.5282 1428.81)" fill="#C4C4C4"/>
<ellipse cx="27.1798" cy="1300.62" rx="0.736435" ry="1.03381" transform="rotate(-180 27.1798 1300.62)" fill="#C4C4C4"/>
<ellipse cx="83.1488" cy="1387.46" rx="0.736435" ry="1.03375" transform="rotate(-180 83.1488 1387.46)" fill="#C4C4C4"/>
<ellipse cx="237.8" cy="1385.39" rx="0.73645" ry="1.03369" transform="rotate(-180 237.8 1385.39)" fill="#C4C4C4"/>
<ellipse cx="279.274" cy="2146.65" rx="2.11838" ry="2.87744" fill="#C4C4C4"/>
<ellipse cx="491.114" cy="2198.44" rx="2.11838" ry="2.87756" fill="#C4C4C4"/>
<ellipse cx="214.829" cy="2283.45" rx="1.22427" ry="1.71838" transform="rotate(-180 214.829 2283.45)" fill="#C4C4C4"/>
<ellipse cx="273.595" cy="2249.08" rx="1.22427" ry="1.71851" transform="rotate(-180 273.595 2249.08)" fill="#C4C4C4"/>
<ellipse cx="388.537" cy="2271.94" rx="1.22427" ry="1.71863" transform="rotate(-180 388.537 2271.94)" fill="#C4C4C4"/>
<ellipse cx="447.302" cy="2237.57" rx="1.22427" ry="1.71838" transform="rotate(-180 447.302 2237.57)" fill="#C4C4C4"/>
<ellipse cx="893.492" cy="2324.78" rx="1.22424" ry="1.71875" transform="rotate(-180 893.492 2324.78)" fill="#C4C4C4"/>
<ellipse cx="714.746" cy="2283.53" rx="1.2243" ry="1.71851" transform="rotate(-180 714.746 2283.53)" fill="#C4C4C4"/>
<ellipse cx="746.576" cy="2328.21" rx="1.2243" ry="1.71851" transform="rotate(-180 746.576 2328.21)" fill="#C4C4C4"/>
<ellipse cx="611.906" cy="2218.23" rx="1.22427" ry="1.71863" transform="rotate(-180 611.906 2218.23)" fill="#C4C4C4"/>
<ellipse cx="589.869" cy="2252.6" rx="1.22427" ry="1.71838" transform="rotate(-180 589.869 2252.6)" fill="#C4C4C4"/>
<ellipse cx="545.794" cy="2197.61" rx="1.22427" ry="1.71863" transform="rotate(-180 545.794 2197.61)" fill="#C4C4C4"/>
<ellipse cx="447.851" cy="2053.25" rx="1.22427" ry="1.71838" transform="rotate(-180 447.851 2053.25)" fill="#C4C4C4"/>
<ellipse cx="506.617" cy="2018.88" rx="1.2243" ry="1.71863" transform="rotate(-180 506.617 2018.88)" fill="#C4C4C4"/>
<ellipse cx="665.775" cy="2159.8" rx="1.22427" ry="1.71838" transform="rotate(-180 665.775 2159.8)" fill="#C4C4C4"/>
<ellipse cx="758.82" cy="2304.16" rx="1.22424" ry="1.71863" transform="rotate(-180 758.82 2304.16)" fill="#C4C4C4"/>
<ellipse cx="1015.92" cy="2300.72" rx="1.2243" ry="1.71863" transform="rotate(-180 1015.92 2300.72)" fill="#C4C4C4"/>
<ellipse cx="878.822" cy="2287.29" rx="1.2243" ry="1.71863" transform="rotate(-180 878.822 2287.29)" fill="white"/>
<ellipse cx="856.786" cy="2321.66" rx="1.22424" ry="1.71838" transform="rotate(-180 856.786 2321.66)" fill="white"/>
<ellipse cx="812.712" cy="2266.66" rx="1.2243" ry="1.71875" transform="rotate(-180 812.712 2266.66)" fill="white"/>
<ellipse cx="714.769" cy="2122.31" rx="1.2243" ry="1.71851" transform="rotate(-180 714.769 2122.31)" fill="white"/>
<ellipse cx="773.534" cy="2087.94" rx="1.2243" ry="1.71851" transform="rotate(-180 773.534 2087.94)" fill="white"/>
<ellipse cx="932.693" cy="2228.86" rx="1.22424" ry="1.71863" transform="rotate(-180 932.693 2228.86)" fill="white"/>
<ellipse cx="281.73" cy="2333.66" rx="0.73645" ry="1.03369" transform="rotate(-180 281.73 2333.66)" fill="#C4C4C4"/>
<ellipse cx="222.815" cy="2246.82" rx="0.73642" ry="1.03369" transform="rotate(-180 222.815 2246.82)" fill="#C4C4C4"/>
<ellipse cx="258.165" cy="2226.15" rx="0.73645" ry="1.03369" transform="rotate(-180 258.165 2226.15)" fill="#C4C4C4"/>
<ellipse cx="353.901" cy="2310.91" rx="0.73645" ry="1.03357" transform="rotate(-180 353.901 2310.91)" fill="#C4C4C4"/>
<ellipse cx="698.481" cy="2328.81" rx="0.73642" ry="1.03369" transform="rotate(-180 698.481 2328.81)" fill="#C4C4C4"/>
<ellipse cx="590.962" cy="2304" rx="0.73642" ry="1.03381" transform="rotate(-180 590.962 2304)" fill="#C4C4C4"/>
<ellipse cx="610.107" cy="2330.88" rx="0.73645" ry="1.03357" transform="rotate(-180 610.107 2330.88)" fill="#C4C4C4"/>
<ellipse cx="529.1" cy="2264.71" rx="0.73645" ry="1.03369" transform="rotate(-180 529.1 2264.71)" fill="#C4C4C4"/>
<ellipse cx="515.844" cy="2285.39" rx="0.73642" ry="1.03369" transform="rotate(-180 515.844 2285.39)" fill="#C4C4C4"/>
<ellipse cx="489.332" cy="2252.31" rx="0.73645" ry="1.03394" transform="rotate(-180 489.332 2252.31)" fill="#C4C4C4"/>
<ellipse cx="430.418" cy="2165.48" rx="0.73645" ry="1.03369" transform="rotate(-180 430.418 2165.48)" fill="#C4C4C4"/>
<ellipse cx="465.766" cy="2144.8" rx="0.73642" ry="1.03381" transform="rotate(-180 465.766 2144.8)" fill="#C4C4C4"/>
<ellipse cx="561.504" cy="2229.57" rx="0.73642" ry="1.03369" transform="rotate(-180 561.504 2229.57)" fill="#C4C4C4"/>
<ellipse cx="617.472" cy="2316.4" rx="0.73645" ry="1.03369" transform="rotate(-180 617.472 2316.4)" fill="#C4C4C4"/>
<ellipse cx="772.124" cy="2314.33" rx="0.73645" ry="1.03394" transform="rotate(-180 772.124 2314.33)" fill="#C4C4C4"/>
<ellipse cx="465.766" cy="2317.46" rx="0.73642" ry="1.03394" transform="rotate(-180 465.766 2317.46)" fill="#C4C4C4"/>
<ellipse cx="359.627" cy="2299.24" rx="0.73642" ry="1.03369" transform="rotate(-180 359.627 2299.24)" fill="white"/>
<ellipse cx="346.372" cy="2319.92" rx="0.73645" ry="1.03381" transform="rotate(-180 346.372 2319.92)" fill="white"/>
<ellipse cx="319.86" cy="2286.84" rx="0.73645" ry="1.03369" transform="rotate(-180 319.86 2286.84)" fill="white"/>
<ellipse cx="260.946" cy="2200.01" rx="0.73645" ry="1.03369" transform="rotate(-180 260.946 2200.01)" fill="white"/>
<ellipse cx="296.295" cy="2179.33" rx="0.73645" ry="1.03381" transform="rotate(-180 296.295 2179.33)" fill="white"/>
<ellipse cx="392.031" cy="2264.1" rx="0.73645" ry="1.03369" transform="rotate(-180 392.031 2264.1)" fill="white"/>
<ellipse cx="440.037" cy="2328.81" rx="0.73645" ry="1.03369" transform="rotate(-180 440.037 2328.81)" fill="#C4C4C4"/>
<ellipse cx="332.517" cy="2304" rx="0.73642" ry="1.03381" transform="rotate(-180 332.517 2304)" fill="#C4C4C4"/>
<ellipse cx="351.664" cy="2330.88" rx="0.73642" ry="1.03357" transform="rotate(-180 351.664 2330.88)" fill="#C4C4C4"/>
<ellipse cx="270.655" cy="2264.71" rx="0.73645" ry="1.03369" transform="rotate(-180 270.655 2264.71)" fill="#C4C4C4"/>
<ellipse cx="257.4" cy="2285.39" rx="0.73645" ry="1.03369" transform="rotate(-180 257.4 2285.39)" fill="#C4C4C4"/>
<ellipse cx="230.889" cy="2252.31" rx="0.73645" ry="1.03394" transform="rotate(-180 230.889 2252.31)" fill="#C4C4C4"/>
<ellipse cx="171.974" cy="2165.48" rx="0.736435" ry="1.03369" transform="rotate(-180 171.974 2165.48)" fill="#C4C4C4"/>
<ellipse cx="207.323" cy="2144.8" rx="0.73642" ry="1.03381" transform="rotate(-180 207.323 2144.8)" fill="#C4C4C4"/>
<ellipse cx="303.06" cy="2229.57" rx="0.73645" ry="1.03381" transform="rotate(-180 303.06 2229.57)" fill="#C4C4C4"/>
<ellipse cx="359.027" cy="2316.4" rx="0.73645" ry="1.03369" transform="rotate(-180 359.027 2316.4)" fill="#C4C4C4"/>
<ellipse cx="513.68" cy="2314.33" rx="0.73645" ry="1.03394" transform="rotate(-180 513.68 2314.33)" fill="#C4C4C4"/>
<ellipse cx="311.787" cy="2280.58" rx="0.73645" ry="1.03381" transform="rotate(-180 311.787 2280.58)" fill="#C4C4C4"/>
<ellipse cx="347.136" cy="2259.9" rx="0.73645" ry="1.03381" transform="rotate(-180 347.136 2259.9)" fill="#C4C4C4"/>
<ellipse cx="848.222" cy="2319.59" rx="0.73645" ry="1.03369" transform="rotate(-180 848.222 2319.59)" fill="#C4C4C4"/>
<ellipse cx="774.578" cy="2300.99" rx="0.73645" ry="1.03357" transform="rotate(-180 774.578 2300.99)" fill="#C4C4C4"/>
<ellipse cx="812.873" cy="2207.95" rx="0.73645" ry="1.03369" transform="rotate(-180 812.873 2207.95)" fill="#C4C4C4"/>
<ellipse cx="705.353" cy="2183.14" rx="0.73645" ry="1.03406" transform="rotate(-180 705.353 2183.14)" fill="#C4C4C4"/>
<ellipse cx="724.499" cy="2210.02" rx="0.73645" ry="1.03369" transform="rotate(-180 724.499 2210.02)" fill="#C4C4C4"/>
<ellipse cx="711.245" cy="2236.9" rx="0.73645" ry="1.03357" transform="rotate(-180 711.245 2236.9)" fill="#C4C4C4"/>
<ellipse cx="643.493" cy="2143.86" rx="0.73642" ry="1.03369" transform="rotate(-180 643.493 2143.86)" fill="#C4C4C4"/>
<ellipse cx="630.237" cy="2164.53" rx="0.73645" ry="1.03369" transform="rotate(-180 630.237 2164.53)" fill="#C4C4C4"/>
<ellipse cx="603.724" cy="2131.45" rx="0.73645" ry="1.03369" transform="rotate(-180 603.724 2131.45)" fill="#C4C4C4"/>
<ellipse cx="544.809" cy="2044.62" rx="0.73645" ry="1.03357" transform="rotate(-180 544.809 2044.62)" fill="#C4C4C4"/>
<ellipse cx="580.159" cy="2023.95" rx="0.73645" ry="1.03369" transform="rotate(-180 580.159 2023.95)" fill="#C4C4C4"/>
<ellipse cx="675.895" cy="2108.71" rx="0.73645" ry="1.03394" transform="rotate(-180 675.895 2108.71)" fill="#C4C4C4"/>
<ellipse cx="731.864" cy="2195.55" rx="0.736389" ry="1.03357" transform="rotate(-180 731.864 2195.55)" fill="#C4C4C4"/>
<ellipse cx="886.517" cy="2193.48" rx="0.73645" ry="1.03381" transform="rotate(-180 886.517 2193.48)" fill="#C4C4C4"/>
<ellipse cx="1035.82" cy="2286.73" rx="0.736389" ry="1.03394" transform="rotate(-180 1035.82 2286.73)" fill="#C4C4C4"/>
<ellipse cx="1054.97" cy="2313.61" rx="0.73645" ry="1.03381" transform="rotate(-180 1054.97 2313.61)" fill="#C4C4C4"/>
<ellipse cx="973.961" cy="2247.45" rx="0.73645" ry="1.03369" transform="rotate(-180 973.961 2247.45)" fill="#C4C4C4"/>
<ellipse cx="960.705" cy="2268.13" rx="0.73645" ry="1.03357" transform="rotate(-180 960.705 2268.13)" fill="#C4C4C4"/>
<ellipse cx="934.193" cy="2235.04" rx="0.73645" ry="1.03381" transform="rotate(-180 934.193 2235.04)" fill="#C4C4C4"/>
<ellipse cx="875.279" cy="2148.21" rx="0.73645" ry="1.03369" transform="rotate(-180 875.279 2148.21)" fill="#C4C4C4"/>
<ellipse cx="910.628" cy="2127.54" rx="0.73645" ry="1.03394" transform="rotate(-180 910.628 2127.54)" fill="#C4C4C4"/>
<ellipse cx="1006.36" cy="2212.3" rx="0.736389" ry="1.03345" transform="rotate(-180 1006.36 2212.3)" fill="#C4C4C4"/>
<ellipse cx="1062.33" cy="2299.14" rx="0.73645" ry="1.03369" transform="rotate(-180 1062.33 2299.14)" fill="#C4C4C4"/>
<ellipse rx="2.11841" ry="2.87762" transform="matrix(-1 0 0 1 1050.79 585.895)" fill="#C4C4C4"/>
<ellipse rx="2.11841" ry="2.87744" transform="matrix(-1 0 0 1 838.952 637.691)" fill="#C4C4C4"/>
<ellipse rx="2.11841" ry="2.8775" transform="matrix(-1 0 0 1 949.108 896.667)" fill="#C4C4C4"/>
<ellipse rx="2.11841" ry="2.8775" transform="matrix(-1 0 0 1 639.821 965.73)" fill="#C4C4C4"/>
<ellipse rx="2.11838" ry="2.8775" transform="matrix(-1 0 0 1 694.901 890.912)" fill="#C4C4C4"/>
<ellipse rx="2.11841" ry="2.87762" transform="matrix(-1 0 0 1 656.77 816.097)" fill="#C4C4C4"/>
<ellipse rx="2.11841" ry="2.87744" transform="matrix(-1 0 0 1 461.874 1075.07)" fill="#C4C4C4"/>
<ellipse rx="2.11841" ry="2.87762" transform="matrix(-1 0 0 1 423.744 1017.53)" fill="#C4C4C4"/>
<ellipse rx="2.11841" ry="2.87762" transform="matrix(-1 0 0 1 347.481 1109.6)" fill="#C4C4C4"/>
<ellipse rx="2.11841" ry="2.8775" transform="matrix(-1 0 0 1 178.01 1351.32)" fill="#C4C4C4"/>
<ellipse rx="2.11841" ry="2.8775" transform="matrix(-1 0 0 1 279.692 1408.87)" fill="#C4C4C4"/>
<ellipse rx="2.11841" ry="2.87744" transform="matrix(-1 0 0 1 555.087 1172.91)" fill="#C4C4C4"/>
<ellipse rx="2.11841" ry="2.87756" transform="matrix(-1 0 0 1 716.084 931.198)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 610.829 1179.82)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 733.261 1148.89)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71848" transform="matrix(1 0 0 -1 669.596 994.222)" fill="#C4C4C4"/>
<ellipse rx="1.22424" ry="1.71854" transform="matrix(1 0 0 -1 848.342 952.973)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71848" transform="matrix(1 0 0 -1 816.511 997.661)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 838.549 1042.34)" fill="#C4C4C4"/>
<ellipse rx="1.22424" ry="1.7186" transform="matrix(1 0 0 -1 951.184 887.668)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 973.222 922.044)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71854" transform="matrix(1 0 0 -1 1017.3 867.047)" fill="#C4C4C4"/>
<ellipse rx="1.22424" ry="1.71848" transform="matrix(1 0 0 -1 1115.24 722.694)" fill="#C4C4C4"/>
<ellipse rx="1.22424" ry="1.71851" transform="matrix(1 0 0 -1 1056.47 688.328)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 897.315 829.242)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 804.269 973.601)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71857" transform="matrix(1 0 0 -1 547.168 970.161)" fill="#C4C4C4"/>
<ellipse rx="1.22429" ry="1.71851" transform="matrix(1 0 0 -1 182.913 1559.66)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71851" transform="matrix(1 0 0 -1 305.343 1528.72)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71863" transform="matrix(1 0 0 -1 241.68 1374.06)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71851" transform="matrix(1 0 0 -1 420.424 1332.81)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 388.594 1377.5)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 410.631 1422.18)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71851" transform="matrix(1 0 0 -1 523.267 1267.5)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 545.304 1301.88)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71863" transform="matrix(1 0 0 -1 589.379 1246.88)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 687.321 1102.53)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 628.555 1068.16)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71838" transform="matrix(1 0 0 -1 469.398 1209.08)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71863" transform="matrix(1 0 0 -1 376.352 1353.44)" fill="#C4C4C4"/>
<ellipse rx="1.22429" ry="1.71851" transform="matrix(1 0 0 -1 119.25 1350)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71863" transform="matrix(1 0 0 -1 437.12 1168.31)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71851" transform="matrix(1 0 0 -1 559.55 1137.38)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71854" transform="matrix(1 0 0 -1 495.885 982.711)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 674.633 941.466)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71854" transform="matrix(1 0 0 -1 642.802 986.15)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 664.839 1030.83)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 777.474 876.158)" fill="#C4C4C4"/>
<ellipse rx="1.22424" ry="1.71857" transform="matrix(1 0 0 -1 799.511 910.533)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71857" transform="matrix(1 0 0 -1 843.587 855.54)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 941.529 711.184)" fill="#C4C4C4"/>
<ellipse rx="1.22424" ry="1.71857" transform="matrix(1 0 0 -1 882.762 676.815)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71848" transform="matrix(1 0 0 -1 723.603 817.731)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71848" transform="matrix(1 0 0 -1 630.559 962.09)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71854" transform="matrix(1 0 0 -1 373.457 958.651)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71848" transform="matrix(1 0 0 -1 376.887 1018.9)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71854" transform="matrix(1 0 0 -1 499.317 987.964)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71857" transform="matrix(1 0 0 -1 435.654 833.296)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71851" transform="matrix(1 0 0 -1 614.4 792.048)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 582.57 836.735)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71857" transform="matrix(1 0 0 -1 604.608 881.417)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 717.241 726.743)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71854" transform="matrix(1 0 0 -1 739.279 761.118)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71857" transform="matrix(1 0 0 -1 783.354 706.122)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71854" transform="matrix(1 0 0 -1 881.298 561.769)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71854" transform="matrix(1 0 0 -1 822.531 527.403)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 663.372 668.316)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71854" transform="matrix(1 0 0 -1 570.327 812.675)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71857" transform="matrix(1 0 0 -1 313.224 809.236)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71863" transform="matrix(1 0 0 -1 136.887 1112.62)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 259.317 1081.69)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.7186" transform="matrix(1 0 0 -1 195.653 927.009)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71851" transform="matrix(1 0 0 -1 374.4 885.764)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71854" transform="matrix(1 0 0 -1 342.569 930.448)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71857" transform="matrix(1 0 0 -1 364.606 975.144)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71844" transform="matrix(1 0 0 -1 477.241 820.456)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71857" transform="matrix(1 0 0 -1 499.278 854.831)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71848" transform="matrix(1 0 0 -1 641.296 655.496)" fill="#C4C4C4"/>
<ellipse rx="1.22427" ry="1.71854" transform="matrix(1 0 0 -1 423.372 762.043)" fill="#C4C4C4"/>
<ellipse rx="1.2243" ry="1.71854" transform="matrix(1 0 0 -1 330.326 906.388)" fill="#C4C4C4"/>
<ellipse rx="1.22429" ry="1.71848" transform="matrix(1 0 0 -1 73.2243 902.949)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 803.839 961.042)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 877.482 942.433)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03375" transform="matrix(1 0 0 -1 839.188 849.396)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 946.707 824.59)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 927.562 851.464)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 940.818 878.347)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 1008.57 785.304)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03381" transform="matrix(1 0 0 -1 1021.82 805.981)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 1048.34 772.899)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 1107.25 686.069)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 1071.9 665.399)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 976.166 750.161)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 920.197 836.994)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03363" transform="matrix(1 0 0 -1 765.544 834.927)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 596.237 879.695)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03381" transform="matrix(1 0 0 -1 669.879 861.087)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03375" transform="matrix(1 0 0 -1 631.585 768.049)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03363" transform="matrix(1 0 0 -1 739.105 743.242)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03375" transform="matrix(1 0 0 -1 719.959 770.117)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 733.215 797.001)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 800.967 703.957)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 814.221 724.634)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 840.734 691.552)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 899.649 604.722)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 864.301 584.052)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 768.563 668.814)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 712.594 755.647)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 384.396 1184.71)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 458.041 1166.1)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 419.744 1073.07)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 527.265 1048.26)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 508.117 1075.13)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 521.375 1102.02)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03372" transform="matrix(1 0 0 -1 589.127 1008.97)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03381" transform="matrix(1 0 0 -1 602.383 1029.65)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 628.894 996.569)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03375" transform="matrix(1 0 0 -1 687.809 909.739)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03372" transform="matrix(1 0 0 -1 652.46 889.068)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03378" transform="matrix(1 0 0 -1 556.723 973.831)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 500.754 1060.66)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03394" transform="matrix(1 0 0 -1 346.101 1058.6)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 257.293 1091.99)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 330.936 1073.38)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03372" transform="matrix(1 0 0 -1 292.641 980.342)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03378" transform="matrix(1 0 0 -1 400.16 955.536)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03372" transform="matrix(1 0 0 -1 381.014 982.41)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03372" transform="matrix(1 0 0 -1 394.27 1009.29)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03378" transform="matrix(1 0 0 -1 462.023 916.251)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 475.277 936.927)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 501.79 903.846)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 560.705 817.016)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03378" transform="matrix(1 0 0 -1 429.619 881.108)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03375" transform="matrix(1 0 0 -1 373.649 967.941)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03375" transform="matrix(1 0 0 -1 218.997 965.87)" fill="#C4C4C4"/>
<ellipse rx="0.736435" ry="1.03369" transform="matrix(1 0 0 -1 185.265 1259.53)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 258.908 1240.92)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 220.613 1147.88)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03381" transform="matrix(1 0 0 -1 328.134 1123.07)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 308.987 1149.95)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 322.244 1176.83)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 389.995 1083.79)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03381" transform="matrix(1 0 0 -1 403.252 1104.47)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 429.762 1071.38)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 488.677 984.554)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 453.329 963.881)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03381" transform="matrix(1 0 0 -1 357.591 1048.65)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 301.622 1135.48)" fill="#C4C4C4"/>
<ellipse rx="0.736435" ry="1.03369" transform="matrix(1 0 0 -1 146.969 1133.41)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 596.237 1052.35)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03381" transform="matrix(1 0 0 -1 669.879 1033.74)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03372" transform="matrix(1 0 0 -1 631.585 940.699)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03372" transform="matrix(1 0 0 -1 739.104 915.893)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03372" transform="matrix(1 0 0 -1 719.958 942.77)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 733.215 969.651)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03378" transform="matrix(1 0 0 -1 800.967 876.608)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03375" transform="matrix(1 0 0 -1 814.221 897.287)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 840.734 864.206)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03372" transform="matrix(1 0 0 -1 899.649 777.373)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 864.3 756.702)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 768.563 841.465)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03372" transform="matrix(1 0 0 -1 712.593 928.298)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03372" transform="matrix(1 0 0 -1 557.941 926.23)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 765.708 914.225)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03369" transform="matrix(1 0 0 -1 839.352 895.616)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 801.056 802.579)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03375" transform="matrix(1 0 0 -1 908.578 777.772)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 889.431 804.647)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 902.685 831.527)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 970.439 738.487)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 983.694 759.164)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 1010.21 726.085)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 1069.12 639.252)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 1033.77 618.582)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03381" transform="matrix(1 0 0 -1 938.035 703.344)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 882.067 790.177)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03381" transform="matrix(1 0 0 -1 727.413 788.109)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03381" transform="matrix(1 0 0 -1 697.921 1230.75)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 771.564 1212.14)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 733.269 1119.11)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03394" transform="matrix(1 0 0 -1 840.788 1094.3)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 821.644 1121.18)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 834.898 1148.06)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 902.652 1055.02)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 915.906 1075.69)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03394" transform="matrix(1 0 0 -1 942.419 1042.61)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 1001.33 955.781)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03378" transform="matrix(1 0 0 -1 965.986 935.11)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03375" transform="matrix(1 0 0 -1 870.246 1019.87)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03381" transform="matrix(1 0 0 -1 814.278 1106.71)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 659.626 1104.64)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 443.71 1363.12)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 517.356 1344.51)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 479.059 1251.47)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 586.58 1226.66)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 567.433 1253.54)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 580.691 1280.42)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03381" transform="matrix(1 0 0 -1 648.442 1187.38)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 661.698 1208.05)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 688.209 1174.97)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 747.124 1088.14)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 711.775 1067.47)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 616.038 1152.24)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 560.069 1239.07)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 405.416 1237)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 202.213 1265.28)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 275.858 1246.67)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 237.563 1153.64)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03381" transform="matrix(1 0 0 -1 345.082 1128.83)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 325.936 1155.7)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 339.192 1182.58)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 406.944 1089.54)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 420.2 1110.22)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 446.713 1077.14)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03372" transform="matrix(1 0 0 -1 505.628 990.31)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03378" transform="matrix(1 0 0 -1 470.278 969.639)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 374.541 1054.4)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 318.57 1141.23)" fill="#C4C4C4"/>
<ellipse rx="0.736435" ry="1.03369" transform="matrix(1 0 0 -1 163.918 1139.17)" fill="#C4C4C4"/>
<ellipse rx="0.736435" ry="1.03381" transform="matrix(1 0 0 -1 92.0543 1604.83)" fill="#C4C4C4"/>
<ellipse rx="0.736435" ry="1.03369" transform="matrix(1 0 0 -1 165.699 1586.22)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 127.403 1493.19)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 234.924 1468.38)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 215.776 1495.25)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 229.033 1522.14)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 296.785 1429.09)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 310.04 1449.77)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 336.552 1416.69)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 395.467 1329.86)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 360.119 1309.19)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 264.382 1393.95)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 208.411 1480.79)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 53.7594 1478.72)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 401.342 1357.36)" fill="white"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 474.987 1338.75)" fill="white"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 436.691 1245.72)" fill="white"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 544.213 1220.91)" fill="white"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 525.066 1247.79)" fill="white"/>
<ellipse rx="0.73642" ry="1.03381" transform="matrix(1 0 0 -1 538.321 1274.66)" fill="white"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 606.073 1181.62)" fill="white"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 619.33 1202.3)" fill="white"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 645.842 1169.22)" fill="white"/>
<ellipse rx="0.736389" ry="1.03381" transform="matrix(1 0 0 -1 704.757 1082.39)" fill="white"/>
<ellipse rx="0.73642" ry="1.03381" transform="matrix(1 0 0 -1 669.408 1061.72)" fill="white"/>
<ellipse rx="0.73642" ry="1.03381" transform="matrix(1 0 0 -1 573.669 1146.48)" fill="white"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 517.7 1233.31)" fill="white"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 363.048 1231.24)" fill="white"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 854.68 879.695)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 928.324 861.086)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 890.03 768.049)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03363" transform="matrix(1 0 0 -1 997.549 743.242)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 978.403 770.117)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 991.66 797.001)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 1059.41 703.957)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 1072.67 724.634)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 1099.18 691.552)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03375" transform="matrix(1 0 0 -1 1122.75 584.052)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 1027.01 668.814)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03369" transform="matrix(1 0 0 -1 971.038 755.647)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03375" transform="matrix(1 0 0 -1 816.386 753.579)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 714.864 994.795)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 788.509 976.187)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 750.214 883.149)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 857.734 858.343)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03369" transform="matrix(1 0 0 -1 838.588 885.217)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 851.844 912.101)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 919.597 819.058)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 932.851 839.734)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 959.364 806.653)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 1018.28 719.823)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03375" transform="matrix(1 0 0 -1 982.93 699.152)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 887.193 783.915)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03375" transform="matrix(1 0 0 -1 831.223 870.748)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 676.571 868.68)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03375" transform="matrix(1 0 0 -1 597.677 783.377)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 559.379 690.34)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 666.901 665.534)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03381" transform="matrix(1 0 0 -1 647.753 692.408)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 661.009 719.291)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 728.762 626.248)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03375" transform="matrix(1 0 0 -1 742.018 646.925)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 768.529 613.847)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03375" transform="matrix(1 0 0 -1 827.446 527.013)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 792.096 506.342)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 696.359 591.105)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 640.39 677.938)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 485.736 675.871)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 172.554 1150.18)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 246.2 1131.57)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 207.902 1038.54)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03372" transform="matrix(1 0 0 -1 315.424 1013.73)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 296.277 1040.61)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 309.532 1067.49)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03372" transform="matrix(1 0 0 -1 377.285 974.443)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03378" transform="matrix(1 0 0 -1 390.541 995.12)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 417.054 962.039)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03372" transform="matrix(1 0 0 -1 475.969 875.208)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 440.618 854.538)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03372" transform="matrix(1 0 0 -1 344.882 939.3)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03381" transform="matrix(1 0 0 -1 288.913 1026.13)" fill="#C4C4C4"/>
<ellipse rx="0.736435" ry="1.03369" transform="matrix(1 0 0 -1 134.259 1024.07)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 791.129 1259.53)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 864.774 1240.92)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 826.477 1147.88)" fill="#C4C4C4"/>
<ellipse rx="0.736389" ry="1.03381" transform="matrix(1 0 0 -1 934 1123.07)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 914.85 1149.95)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 928.108 1176.83)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 995.859 1083.79)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 1009.12 1104.47)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 1035.63 1071.38)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03375" transform="matrix(1 0 0 -1 1094.54 984.554)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 1059.19 963.884)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 963.456 1048.65)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 907.488 1135.48)" fill="#C4C4C4"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 752.834 1133.41)" fill="#C4C4C4"/>
<ellipse rx="0.73642" ry="1.03369" transform="matrix(1 0 0 -1 697.92 1420.67)" fill="white"/>
<ellipse rx="0.736389" ry="1.03369" transform="matrix(1 0 0 -1 771.564 1402.06)" fill="white"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 733.268 1309.03)" fill="white"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 840.788 1284.22)" fill="white"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 821.643 1311.09)" fill="white"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 834.898 1337.97)" fill="white"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 902.651 1244.93)" fill="white"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 915.906 1265.61)" fill="white"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 942.418 1232.53)" fill="white"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 1001.33 1145.7)" fill="white"/>
<ellipse rx="0.73645" ry="1.03369" transform="matrix(1 0 0 -1 965.985 1125.03)" fill="white"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 870.246 1209.79)" fill="white"/>
<ellipse rx="0.736389" ry="1.03369" transform="matrix(1 0 0 -1 814.277 1296.62)" fill="white"/>
<ellipse rx="0.73645" ry="1.03381" transform="matrix(1 0 0 -1 659.625 1294.55)" fill="white"/>
<ellipse cx="48.5793" cy="636.899" rx="2.11839" ry="2.87753" fill="#C4C4C4"/>
<ellipse cx="218.05" cy="878.613" rx="2.11838" ry="2.8775" fill="#C4C4C4"/>
<ellipse cx="116.368" cy="936.164" rx="2.11839" ry="2.8775" fill="#C4C4C4"/>
<ellipse cx="213.148" cy="1086.95" rx="1.22427" ry="1.71851" transform="rotate(-180 213.148 1086.95)" fill="#C4C4C4"/>
<ellipse cx="90.7186" cy="1056.02" rx="1.22429" ry="1.71851" transform="rotate(-180 90.7186 1056.02)" fill="#C4C4C4"/>
<ellipse cx="154.381" cy="901.353" rx="1.22427" ry="1.71851" transform="rotate(-180 154.381 901.353)" fill="#C4C4C4"/>
<ellipse cx="7.46761" cy="904.789" rx="1.22429" ry="1.71857" transform="rotate(-180 7.46761 904.789)" fill="#C4C4C4"/>
<ellipse cx="19.711" cy="880.731" rx="1.22429" ry="1.71851" transform="rotate(-180 19.711 880.731)" fill="#C4C4C4"/>
<ellipse cx="276.81" cy="877.292" rx="1.22427" ry="1.71857" transform="rotate(-180 276.81 877.292)" fill="#C4C4C4"/>
<ellipse cx="22.6043" cy="485.95" rx="1.22429" ry="1.71852" transform="rotate(-180 22.6043 485.95)" fill="#C4C4C4"/>
<ellipse cx="18.2572" cy="476.917" rx="1.22427" ry="1.71854" transform="rotate(-180 18.2572 476.917)" fill="#C4C4C4"/>
<ellipse cx="81.9188" cy="267.257" rx="1.22429" ry="1.71854" transform="rotate(-180 81.9188 267.257)" fill="#C4C4C4"/>
<ellipse cx="202.118" cy="309.835" rx="1.22427" ry="1.71852" transform="rotate(-180 202.118 309.835)" fill="white"/>
<ellipse cx="211.912" cy="399.2" rx="1.22427" ry="1.71852" transform="rotate(-180 211.912 399.2)" fill="white"/>
<ellipse cx="99.2777" cy="244.532" rx="1.22429" ry="1.71853" transform="rotate(-180 99.2777 244.532)" fill="white"/>
<ellipse cx="77.2418" cy="278.902" rx="1.22429" ry="1.71852" transform="rotate(-180 77.2418 278.902)" fill="white"/>
<ellipse cx="33.1673" cy="223.911" rx="1.22429" ry="1.71854" transform="rotate(-180 33.1673 223.911)" fill="white"/>
<ellipse cx="153.148" cy="186.102" rx="1.22429" ry="1.71854" transform="rotate(-180 153.148 186.102)" fill="white"/>
<ellipse cx="11.6674" cy="712.01" rx="0.736435" ry="1.03372" transform="rotate(-180 11.6674 712.01)" fill="#C4C4C4"/>
<ellipse cx="49.9625" cy="585.895" rx="0.73645" ry="1.03372" transform="rotate(-180 49.9625 585.895)" fill="#C4C4C4"/>
<ellipse cx="138.77" cy="608.415" rx="0.736435" ry="1.03372" transform="rotate(-180 138.77 608.415)" fill="#C4C4C4"/>
<ellipse cx="65.1271" cy="589.807" rx="0.736435" ry="1.03372" transform="rotate(-180 65.1271 589.807)" fill="#C4C4C4"/>
<ellipse cx="103.422" cy="496.773" rx="0.736435" ry="1.03377" transform="rotate(-180 103.422 496.773)" fill="#C4C4C4"/>
<ellipse cx="15.0487" cy="498.844" rx="0.736435" ry="1.03375" transform="rotate(-180 15.0487 498.844)" fill="#C4C4C4"/>
<ellipse cx="1.79286" cy="525.719" rx="0.736435" ry="1.03372" transform="rotate(-180 1.79286 525.719)" fill="#C4C4C4"/>
<ellipse cx="22.414" cy="484.368" rx="0.736435" ry="1.03372" transform="rotate(-180 22.414 484.368)" fill="#C4C4C4"/>
<ellipse cx="177.065" cy="482.3" rx="0.736435" ry="1.03374" transform="rotate(-180 177.065 482.3)" fill="#C4C4C4"/>
<ellipse cx="210.796" cy="786.822" rx="0.73642" ry="1.03375" transform="rotate(-180 210.796 786.822)" fill="#C4C4C4"/>
<ellipse cx="137.152" cy="768.214" rx="0.736435" ry="1.03372" transform="rotate(-180 137.152 768.214)" fill="#C4C4C4"/>
<ellipse cx="175.447" cy="675.179" rx="0.736435" ry="1.03375" transform="rotate(-180 175.447 675.179)" fill="#C4C4C4"/>
<ellipse cx="67.9283" cy="650.367" rx="0.73645" ry="1.03372" transform="rotate(-180 67.9283 650.367)" fill="#C4C4C4"/>
<ellipse cx="87.0741" cy="677.248" rx="0.736435" ry="1.03375" transform="rotate(-180 87.0741 677.248)" fill="#C4C4C4"/>
<ellipse cx="73.8197" cy="704.125" rx="0.73645" ry="1.03372" transform="rotate(-180 73.8197 704.125)" fill="#C4C4C4"/>
<ellipse cx="6.06606" cy="611.084" rx="0.736435" ry="1.03372" transform="rotate(-180 6.06606 611.084)" fill="#C4C4C4"/>
<ellipse cx="38.4699" cy="575.938" rx="0.736435" ry="1.03369" transform="rotate(-180 38.4699 575.938)" fill="#C4C4C4"/>
<ellipse cx="94.4393" cy="662.774" rx="0.736435" ry="1.03375" transform="rotate(-180 94.4393 662.774)" fill="#C4C4C4"/>
<ellipse cx="249.09" cy="660.703" rx="0.73645" ry="1.03375" transform="rotate(-180 249.09 660.703)" fill="#C4C4C4"/>
<ellipse cx="193.849" cy="792.581" rx="0.73642" ry="1.03375" transform="rotate(-180 193.849 792.581)" fill="#C4C4C4"/>
<ellipse cx="120.205" cy="773.971" rx="0.73645" ry="1.03369" transform="rotate(-180 120.205 773.971)" fill="#C4C4C4"/>
<ellipse cx="158.5" cy="680.938" rx="0.736435" ry="1.03369" transform="rotate(-180 158.5 680.938)" fill="#C4C4C4"/>
<ellipse cx="50.9809" cy="656.125" rx="0.736435" ry="1.03375" transform="rotate(-180 50.9809 656.125)" fill="#C4C4C4"/>
<ellipse cx="70.1273" cy="683.005" rx="0.736435" ry="1.03375" transform="rotate(-180 70.1273 683.005)" fill="#C4C4C4"/>
<ellipse cx="56.871" cy="709.883" rx="0.73645" ry="1.03372" transform="rotate(-180 56.871 709.883)" fill="#C4C4C4"/>
<ellipse cx="21.5231" cy="581.697" rx="0.736435" ry="1.03369" transform="rotate(-180 21.5231 581.697)" fill="#C4C4C4"/>
<ellipse cx="77.4909" cy="668.533" rx="0.736435" ry="1.03369" transform="rotate(-180 77.4909 668.533)" fill="#C4C4C4"/>
<ellipse cx="232.143" cy="666.462" rx="0.73645" ry="1.03375" transform="rotate(-180 232.143 666.462)" fill="#C4C4C4"/>
<ellipse cx="304.005" cy="1132.13" rx="0.73642" ry="1.03369" transform="rotate(-180 304.005 1132.13)" fill="#C4C4C4"/>
<ellipse cx="230.361" cy="1113.52" rx="0.73642" ry="1.03369" transform="rotate(-180 230.361 1113.52)" fill="#C4C4C4"/>
<ellipse cx="268.657" cy="1020.49" rx="0.73642" ry="1.03366" transform="rotate(-180 268.657 1020.49)" fill="#C4C4C4"/>
<ellipse cx="161.136" cy="995.673" rx="0.736435" ry="1.03372" transform="rotate(-180 161.136 995.673)" fill="#C4C4C4"/>
<ellipse cx="180.283" cy="1022.55" rx="0.73645" ry="1.03372" transform="rotate(-180 180.283 1022.55)" fill="#C4C4C4"/>
<ellipse cx="167.028" cy="1049.43" rx="0.736435" ry="1.03369" transform="rotate(-180 167.028 1049.43)" fill="#C4C4C4"/>
<ellipse cx="99.2763" cy="956.391" rx="0.736435" ry="1.03375" transform="rotate(-180 99.2763 956.391)" fill="#C4C4C4"/>
<ellipse cx="86.0197" cy="977.067" rx="0.736435" ry="1.03372" transform="rotate(-180 86.0197 977.067)" fill="#C4C4C4"/>
<ellipse cx="59.5077" cy="943.986" rx="0.736435" ry="1.03375" transform="rotate(-180 59.5077 943.986)" fill="#C4C4C4"/>
<ellipse cx="0.594131" cy="857.156" rx="0.736435" ry="1.03375" transform="rotate(-180 0.594131 857.156)" fill="#C4C4C4"/>
<ellipse cx="35.942" cy="836.483" rx="0.736435" ry="1.03375" transform="rotate(-180 35.942 836.483)" fill="#C4C4C4"/>
<ellipse cx="131.68" cy="921.248" rx="0.736435" ry="1.03375" transform="rotate(-180 131.68 921.248)" fill="#C4C4C4"/>
<ellipse cx="187.648" cy="1008.08" rx="0.736435" ry="1.03378" transform="rotate(-180 187.648 1008.08)" fill="#C4C4C4"/>
<ellipse cx="342.3" cy="1006.01" rx="0.73645" ry="1.03375" transform="rotate(-180 342.3 1006.01)" fill="#C4C4C4"/>
<ellipse cx="33.0153" cy="758.542" rx="0.736435" ry="1.03375" transform="rotate(-180 33.0153 758.542)" fill="white"/>
<ellipse cx="171.047" cy="371.119" rx="0.736435" ry="1.03375" transform="rotate(-180 171.047 371.119)" fill="#C4C4C4"/>
<ellipse cx="209.342" cy="278.084" rx="0.73645" ry="1.03374" transform="rotate(-180 209.342 278.084)" fill="#C4C4C4"/>
<ellipse cx="101.822" cy="253.272" rx="0.736435" ry="1.03373" transform="rotate(-180 101.822 253.272)" fill="#C4C4C4"/>
<ellipse cx="120.969" cy="280.153" rx="0.736435" ry="1.03374" transform="rotate(-180 120.969 280.153)" fill="#C4C4C4"/>
<ellipse cx="107.714" cy="307.028" rx="0.736435" ry="1.03374" transform="rotate(-180 107.714 307.028)" fill="#C4C4C4"/>
<ellipse cx="39.9608" cy="213.99" rx="0.736435" ry="1.03372" transform="rotate(-180 39.9608 213.99)" fill="#C4C4C4"/>
<ellipse cx="26.7055" cy="234.665" rx="0.736435" ry="1.03374" transform="rotate(-180 26.7055 234.665)" fill="#C4C4C4"/>
<ellipse cx="0.193253" cy="201.585" rx="0.736435" ry="1.03373" transform="rotate(-180 0.193253 201.585)" fill="#C4C4C4"/>
<ellipse cx="72.3646" cy="178.843" rx="0.736435" ry="1.03374" transform="rotate(-180 72.3646 178.843)" fill="#C4C4C4"/>
<ellipse cx="128.333" cy="265.68" rx="0.736435" ry="1.03375" transform="rotate(-180 128.333 265.68)" fill="#C4C4C4"/>
<ellipse cx="223.506" cy="677.476" rx="0.73642" ry="1.03375" transform="rotate(-180 223.506 677.476)" fill="#C4C4C4"/>
<ellipse cx="149.862" cy="658.868" rx="0.736435" ry="1.03378" transform="rotate(-180 149.862 658.868)" fill="#C4C4C4"/>
<ellipse cx="188.158" cy="565.834" rx="0.736435" ry="1.03372" transform="rotate(-180 188.158 565.834)" fill="#C4C4C4"/>
<ellipse cx="231.736" cy="498.192" rx="0.73645" ry="1.03374" transform="rotate(-180 231.736 498.192)" fill="#C4C4C4"/>
<ellipse cx="80.6383" cy="541.021" rx="0.736435" ry="1.03372" transform="rotate(-180 80.6383 541.021)" fill="#C4C4C4"/>
<ellipse cx="99.7841" cy="567.901" rx="0.736435" ry="1.03375" transform="rotate(-180 99.7841 567.901)" fill="#C4C4C4"/>
<ellipse cx="86.5282" cy="594.78" rx="0.736435" ry="1.03372" transform="rotate(-180 86.5282 594.78)" fill="#C4C4C4"/>
<ellipse cx="18.776" cy="501.739" rx="0.736435" ry="1.03372" transform="rotate(-180 18.776 501.739)" fill="#C4C4C4"/>
<ellipse cx="5.52138" cy="522.416" rx="0.736435" ry="1.03372" transform="rotate(-180 5.52138 522.416)" fill="#C4C4C4"/>
<ellipse cx="51.1798" cy="466.592" rx="0.736435" ry="1.03374" transform="rotate(-180 51.1798 466.592)" fill="#C4C4C4"/>
<ellipse cx="107.149" cy="553.432" rx="0.736435" ry="1.03375" transform="rotate(-180 107.149 553.432)" fill="#C4C4C4"/>
<ellipse cx="468.736" cy="386.807" rx="0.73645" ry="1.03375" transform="rotate(-180 468.736 386.807)" fill="#C4C4C4"/>
<ellipse cx="421.736" cy="409.899" rx="0.73645" ry="1.03374" transform="rotate(-180 421.736 409.899)" fill="#C4C4C4"/>
</svg>

'''
'''--- public/assets/illustrations/club.svg ---
<svg width="360" height="140" viewBox="0 0 360 140" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="360" height="140" fill="#FF8743"/>
<path d="M176 37.3071L199.46 28.8994V47.342L176 55.7497V37.3071Z" fill="#201F1F"/>
<path d="M182.238 30.4077L205.698 22V40.4426L182.238 48.8503V30.4077Z" fill="#201F1F"/>
<line x1="176.75" y1="38" x2="176.75" y2="72" stroke="#201F1F" stroke-width="1.5"/>
<path d="M259.29 98.644C259.92 96.4309 258.679 93.5557 255.29 90.1311C251.95 86.7562 246.727 83.0606 239.983 79.276C226.505 71.7128 207.103 63.8767 184.973 57.5766C162.843 51.2766 142.223 47.7186 126.783 47.0493C119.057 46.7144 112.67 47.105 108.054 48.2148C103.369 49.3409 100.8 51.1315 100.17 53.3446C99.5399 55.5578 100.781 58.433 104.17 61.8576C107.51 65.2325 112.733 68.9281 119.477 72.7127C132.954 80.2759 152.357 88.1119 174.487 94.412C196.616 100.712 217.237 104.27 232.677 104.939C240.403 105.274 246.789 104.884 251.406 103.774C256.091 102.648 258.66 100.857 259.29 98.644Z" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="138" cy="46" r="16" fill="#E1FC31"/>
<path d="M148 46C148 51.5228 143.523 56 138 56C132.477 56 128 51.5228 128 46" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="230" cy="72" r="16" fill="#E1FC31"/>
<path d="M240 72C240 77.5228 235.523 82 230 82C224.477 82 220 77.5228 220 72" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="176" cy="98" r="16" fill="#E1FC31"/>
<path d="M186 98C186 103.523 181.523 108 176 108C170.477 108 166 103.523 166 98" stroke="#201F1F" stroke-width="1.5"/>
</svg>

'''
'''--- public/assets/illustrations/cooperative.svg ---
<svg width="360" height="140" viewBox="0 0 360 140" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="360" height="140" fill="#6038D0"/>
<line x1="59.5303" y1="29.4697" x2="140.53" y2="110.47" stroke="white" stroke-width="1.5"/>
<line x1="219.53" y1="28.4697" x2="300.53" y2="109.47" stroke="white" stroke-width="1.5"/>
<line x1="158.53" y1="91.5303" x2="139.53" y2="110.53" stroke="#201F1F" stroke-width="1.5"/>
<line y1="-0.75" x2="26.8701" y2="-0.75" transform="matrix(0.707107 0.707107 0.707107 -0.707107 202 90)" stroke="#201F1F" stroke-width="1.5"/>
<line x1="219.53" y1="30.5303" x2="200.53" y2="49.5303" stroke="#201F1F" stroke-width="1.5"/>
<line y1="-0.75" x2="26.8701" y2="-0.75" transform="matrix(0.707107 0.707107 0.707107 -0.707107 141 29)" stroke="#201F1F" stroke-width="1.5"/>
<line y1="-0.75" x2="114.551" y2="-0.75" transform="matrix(-0.707107 0.707107 0.707107 0.707107 141 29)" stroke="white" stroke-width="1.5"/>
<line y1="-0.75" x2="114.551" y2="-0.75" transform="matrix(-0.707107 0.707107 0.707107 0.707107 301 29)" stroke="white" stroke-width="1.5"/>
<circle cx="60" cy="30" r="16" fill="#E1FC31"/>
<path d="M70 30C70 35.5228 65.5228 40 60 40C54.4772 40 50 35.5228 50 30" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="100" cy="70" r="16" fill="#E1FC31"/>
<path d="M110 70C110 75.5228 105.523 80 100 80C94.4772 80 90 75.5228 90 70" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="140" cy="110" r="16" fill="#E1FC31"/>
<path d="M150 110C150 115.523 145.523 120 140 120C134.477 120 130 115.523 130 110" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="300" cy="110" r="16" fill="#E1FC31"/>
<path d="M310 110C310 115.523 305.523 120 300 120C294.477 120 290 115.523 290 110" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="220" cy="30" r="16" fill="#E1FC31"/>
<path d="M230 30C230 35.5228 225.523 40 220 40C214.477 40 210 35.5228 210 30" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="260" cy="70" r="16" fill="#E1FC31"/>
<path d="M270 70C270 75.5228 265.523 80 260 80C254.477 80 250 75.5228 250 70" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="300" cy="30" r="16" fill="#E1FC31"/>
<path d="M310 30C310 35.5228 305.523 40 300 40C294.477 40 290 35.5228 290 30" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="220" cy="110" r="16" fill="#E1FC31"/>
<path d="M230 110C230 115.523 225.523 120 220 120C214.477 120 210 115.523 210 110" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="60" cy="110" r="16" fill="#E1FC31"/>
<path d="M70 110C70 115.523 65.5228 120 60 120C54.4772 120 50 115.523 50 110" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="140" cy="30" r="16" fill="#E1FC31"/>
<path d="M150 30C150 35.5228 145.523 40 140 40C134.477 40 130 35.5228 130 30" stroke="#201F1F" stroke-width="1.5"/>
<path d="M165 68.3071L188.46 59.8994V78.342L165 86.7497V68.3071Z" fill="#201F1F"/>
<path d="M171.238 61.4077L194.698 53V71.4426L171.238 79.8503V61.4077Z" fill="#201F1F"/>
</svg>

'''
'''--- public/assets/illustrations/corporation.svg ---
<svg width="360" height="141" viewBox="0 0 360 141" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="360" height="140" fill="#F6E3DD"/>
<path d="M181.179 31.3071L204.639 22.8994V41.342L181.179 49.7497V31.3071Z" fill="#201F1F"/>
<path d="M187.417 24.4077L210.877 16V34.4426L187.417 42.8503V24.4077Z" fill="#201F1F"/>
<line x1="181.929" y1="31.4126" x2="181.929" y2="58.7501" stroke="#201F1F" stroke-width="1.5"/>
<path d="M181.857 56.0361C168.625 71.9826 130.625 140.179 38 140.179H323C246.321 140.179 196.786 73.3397 181.857 56.0361Z" fill="#19D992"/>
<path d="M175.75 63.1599C164.553 62.8207 149.068 66.2514 148.904 70.4832C148.74 74.715 162.997 78.7037 180.748 79.3923C198.498 80.0809 213.021 77.2086 213.186 72.9768C213.297 70.1162 201.536 64.5171 188.982 63.8385" stroke="#201F1F" stroke-width="1.5"/>
<path d="M263.004 94.2143C263.634 92.0012 262.393 89.126 259.004 85.7014C255.664 82.3265 250.441 78.6309 243.697 74.8463C230.22 67.2831 210.817 59.447 188.687 53.1469C166.558 46.8469 145.937 43.2889 130.497 42.6196C122.771 42.2847 116.385 42.6753 111.768 43.7851C107.083 44.9112 104.514 46.7018 103.884 48.915C103.254 51.1281 104.495 54.0033 107.884 57.4279C111.224 60.8028 116.447 64.4984 123.191 68.283C136.669 75.8462 156.071 83.6823 178.201 89.9823C200.331 96.2824 220.951 99.8404 236.391 100.51C244.117 100.845 250.504 100.454 255.12 99.3442C259.805 98.2181 262.374 96.4275 263.004 94.2143Z" stroke="#201F1F" stroke-width="1.5"/>
<path d="M304.916 56.4345C304.737 54.6751 303.787 52.9759 302.019 51.3494C300.247 49.7187 297.688 48.1958 294.388 46.8088C287.79 44.035 278.38 41.865 266.811 40.4055C243.685 37.4879 212.103 37.4289 177.554 40.933C143.005 44.4371 112.078 50.8361 90.0095 58.3375C78.9693 62.0902 70.1862 66.1054 64.2795 70.1475C61.3257 72.1687 59.1245 74.1744 57.7156 76.1278C56.3103 78.0761 55.7205 79.9316 55.899 81.691C56.0774 83.4504 57.0278 85.1497 58.7956 86.7761C60.568 88.4068 63.1271 89.9297 66.4266 91.3167C73.0246 94.0905 82.435 96.2605 94.0038 97.72C117.129 100.638 148.711 100.697 183.26 97.1925C217.809 93.6884 248.737 87.2894 270.805 79.788C281.845 76.0353 290.628 72.0201 296.535 67.978C299.489 65.9568 301.69 63.9511 303.099 61.9977C304.504 60.0494 305.094 58.1939 304.916 56.4345Z" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="78.3936" cy="94.5719" r="4" transform="rotate(-5.95874 78.3936 94.5719)" fill="#E1FC31"/>
<circle cx="269.394" cy="40.5719" r="4" transform="rotate(-5.95874 269.394 40.5719)" fill="#E1FC31"/>
<circle cx="109.394" cy="43.5719" r="4" transform="rotate(-5.95874 109.394 43.5719)" fill="#E1FC31"/>
<circle cx="182.394" cy="78.5719" r="4" transform="rotate(-5.95874 182.394 78.5719)" fill="#E1FC31"/>
<circle cx="248.394" cy="100.572" r="4" transform="rotate(-5.95874 248.394 100.572)" fill="#E1FC31"/>
</svg>

'''
'''--- public/assets/illustrations/dashed-line.svg ---
<svg width="2" height="193" viewBox="0 0 2 193" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M1 1L0.999992 192" stroke="#8C8C8C" stroke-linecap="round" stroke-dasharray="8 8"/>
</svg>

'''
'''--- public/assets/illustrations/foundation.svg ---
<svg width="360" height="140" viewBox="0 0 360 140" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="360" height="140" fill="#19D992"/>
<path d="M178 46.3073L201.46 37.8997V56.3423L178 64.7499V46.3073Z" fill="#201F1F"/>
<path d="M184.238 39.4079L207.698 31.0002V49.4429L184.238 57.8505V39.4079Z" fill="#201F1F"/>
<line x1="178.75" y1="47.0002" x2="178.75" y2="81.0002" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="58" cy="104" r="16" fill="#E1FC31"/>
<path d="M68 104C68 109.523 63.5228 114 58 114C52.4772 114 48 109.523 48 104" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="73" cy="42.0002" r="16" fill="#E1FC31"/>
<path d="M83 42.0002C83 47.5231 78.5228 52.0002 73 52.0002C67.4772 52.0002 63 47.5231 63 42.0002" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="302" cy="104" r="16" fill="#E1FC31"/>
<path d="M312 104C312 109.523 307.523 114 302 114C296.477 114 292 109.523 292 104" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="287" cy="42.0002" r="16" fill="#E1FC31"/>
<path d="M297 42.0002C297 47.5231 292.523 52.0002 287 52.0002C281.477 52.0002 277 47.5231 277 42.0002" stroke="#201F1F" stroke-width="1.5"/>
<rect x="161.556" y="112.933" width="37.5441" height="7.23326" fill="white"/>
<rect x="161.556" y="93.6445" width="37.5441" height="7.23326" fill="white"/>
<rect x="134" y="115" width="27.5553" height="5.16662" fill="white"/>
<rect x="161.556" y="103.289" width="37.5441" height="7.23326" fill="white"/>
<rect x="134" y="107.767" width="27.5553" height="5.16662" fill="white"/>
<rect x="134" y="100.533" width="27.5553" height="5.51106" fill="white"/>
<rect x="161.556" y="84.0002" width="37.5441" height="7.23326" fill="white"/>
<rect x="134" y="93.6445" width="27.5553" height="5.16662" fill="white"/>
<rect x="199.1" y="115" width="27.5553" height="5.16662" fill="white"/>
<rect x="199.1" y="107.766" width="27.5553" height="5.16662" fill="white"/>
<rect x="199.1" y="100.533" width="27.5553" height="5.51106" fill="white"/>
<path d="M106.806 49.2762C106.406 49.3834 106.168 49.7947 106.275 50.1948L108.023 56.7148C108.13 57.1149 108.541 57.3523 108.941 57.2451C109.341 57.1379 109.579 56.7266 109.471 56.3265L107.919 50.531L113.714 48.9781C114.114 48.8709 114.352 48.4596 114.244 48.0595C114.137 47.6594 113.726 47.422 113.326 47.5292L106.806 49.2762ZM146.668 72.0372L107.375 49.3511L106.625 50.6502L145.918 73.3363L146.668 72.0372Z" fill="#201F1F"/>
<path d="M253.018 50.1948C253.125 49.7947 252.888 49.3834 252.488 49.2762L245.968 47.5292C245.568 47.422 245.156 47.6594 245.049 48.0595C244.942 48.4596 245.179 48.8709 245.579 48.9781L251.375 50.531L249.822 56.3265C249.715 56.7266 249.952 57.1379 250.352 57.2451C250.752 57.3523 251.164 57.1149 251.271 56.7148L253.018 50.1948ZM213.375 73.3363L252.669 50.6502L251.919 49.3511L212.625 72.0372L213.375 73.3363Z" fill="#201F1F"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M181.032 30.3951C175.193 30.465 170.482 35.1313 170.482 40.8774C170.482 40.8991 170.482 40.9209 170.482 40.9426L170.481 40.9426C170.482 40.9209 170.482 40.8992 170.482 40.8775C170.482 35.1538 165.807 30.5014 160 30.3962L160 30.3929C165.777 30.2882 170.433 25.6831 170.481 19.9999C170.529 25.7058 175.223 30.325 181.032 30.394L181.032 30.3951Z" fill="#6038D0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M167.791 47.4629C163.407 47.5151 159.869 51.0188 159.869 55.3333C159.869 55.3499 159.87 55.3665 159.87 55.3831L159.869 55.3831C159.869 55.3667 159.869 55.3504 159.869 55.3341C159.869 51.0366 156.36 47.5436 152 47.4644L152 47.4617C156.341 47.3829 159.839 43.9196 159.869 39.6476C159.899 43.9367 163.426 47.4107 167.791 47.4625L167.791 47.4629Z" fill="#6038D0"/>
<path d="M270.882 108.531C271.175 108.238 271.175 107.763 270.882 107.47L266.11 102.697C265.817 102.404 265.342 102.404 265.049 102.697C264.756 102.99 264.756 103.465 265.049 103.758L269.292 108L265.049 112.243C264.756 112.536 264.756 113.011 265.049 113.304C265.342 113.596 265.817 113.596 266.11 113.304L270.882 108.531ZM246.106 108.75H270.352V107.25H246.106V108.75Z" fill="#201F1F"/>
<path d="M89.6136 108.531C89.3207 108.238 89.3207 107.763 89.6136 107.47L94.3865 102.697C94.6794 102.404 95.1543 102.404 95.4472 102.697C95.7401 102.99 95.7401 103.465 95.4472 103.758L91.2046 108L95.4472 112.243C95.7401 112.536 95.7401 113.011 95.4472 113.304C95.1543 113.596 94.6794 113.596 94.3865 113.304L89.6136 108.531ZM115.045 108.75H90.1439V107.25H115.045V108.75Z" fill="#201F1F"/>
</svg>

'''
'''--- public/assets/illustrations/no-results.svg ---
<svg width="360" height="224" viewBox="0 0 360 224" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_6494_46912)">
<rect x="56.8034" y="94.3342" width="227.284" height="77.6599" rx="7.5" transform="rotate(-6.76016 56.8034 94.3342)" stroke="#201F1F" stroke-dasharray="4 4"/>
<path d="M98.792 107.688L264.362 88.9448" stroke="#E8E0FF" stroke-width="5"/>
<path d="M101.292 123.303L266.862 104.559" stroke="#E8E0FF" stroke-width="5"/>
<path d="M102.292 139.303L195.008 129.195" stroke="#E8E0FF" stroke-width="5"/>
<path d="M155.792 81.1885L205.292 62.6885C274.409 37.8945 328.979 29.3426 335.959 45.7906C344.2 65.2122 281.229 110.513 195.309 146.973C109.389 183.433 33.0557 197.245 24.8142 177.823C21.2921 171.724 23.4479 154.325 60.2479 133.525" stroke="#201F1F" stroke-width="1.5"/>
<path d="M288.748 144.524C302.667 156.524 304.074 164.024 302.667 171.01C298.882 189.81 231.888 192.179 153.031 176.301C74.1743 160.424 15.4628 126.324 19.248 107.524C20.8562 99.5359 29.748 87.5244 74.748 91.0246" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="333.782" cy="48.5589" r="12" transform="rotate(-2.61158 333.782 48.5589)" fill="#FFF3EC"/>
<path d="M328.579 53.0009L338.466 52.5499L340.838 45.2342L330.69 45.6971C330.488 45.7063 328.579 53.0009 328.579 53.0009Z" fill="#401700"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M336.624 52.6332L335.807 55.4438C335.606 56.1339 334.768 56.3982 334.208 55.9481C333.366 55.271 332.853 54.2656 332.801 53.1859L332.783 52.8084L326.78 53.0822C326.78 53.0822 328.978 45.7745 328.891 45.7784L339.039 45.3156L336.667 52.6312L336.624 52.6332Z" fill="#FF8743"/>
<circle cx="53.7824" cy="184.559" r="12" transform="rotate(-2.61158 53.7824 184.559)" fill="#CFF9EA"/>
<path d="M59.6598 181.742L49.7732 182.193L47.4009 189.509L57.5489 189.046C57.7506 189.037 59.6598 181.742 59.6598 181.742Z" fill="#0C422A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M51.6611 182.107L52.6116 178.836C52.8122 178.146 53.65 177.882 54.2102 178.332C55.0528 179.009 55.565 180.014 55.6174 181.094L55.6577 181.925L61.4583 181.66C61.4583 181.66 59.2603 188.968 59.3474 188.964L49.1995 189.427L51.5717 182.111L51.6611 182.107Z" fill="#19D992"/>
<circle cx="27.041" cy="98.8174" r="8.79296" fill="#E1FC31"/>
<path d="M32.5366 98.8174C32.5366 101.853 30.0761 104.313 27.041 104.313C24.0059 104.313 21.5454 101.853 21.5454 98.8174" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="282.14" cy="183.917" r="6.08114" transform="rotate(68.4018 282.14 183.917)" fill="#E1FC31"/>
<path d="M283.54 187.451C281.588 188.223 279.379 187.267 278.607 185.316C277.834 183.364 278.79 181.155 280.742 180.383" stroke="#201F1F" stroke-width="1.5"/>
<circle cx="239.371" cy="51.1474" r="4" transform="rotate(-19.9138 239.371 51.1474)" fill="#19D992"/>
<circle cx="87.4152" cy="157.811" r="4" transform="rotate(-19.9138 87.4152 157.811)" fill="#FF8743"/>
<circle cx="189.371" cy="182.147" r="4" transform="rotate(-19.9138 189.371 182.147)" fill="#19D992"/>
<mask id="mask0_6494_46912" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="71" y="104" width="18" height="22">
<path fill-rule="evenodd" clip-rule="evenodd" d="M87.7556 104.995L75.0461 111.235L75.3447 113.862L71.9656 115.521L73.1463 125.907L85.8558 119.666L85.5572 117.039L88.9363 115.38L87.7556 104.995Z" fill="#ADD5E5"/>
</mask>
<g mask="url(#mask0_6494_46912)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M87.7556 104.995L75.0461 111.235L75.3447 113.862L71.9656 115.521L73.1463 125.907L85.8558 119.666L85.5572 117.039L88.9363 115.38L87.7556 104.995Z" fill="#201F1F"/>
</g>
</g>
<defs>
<clipPath id="clip0_6494_46912">
<rect width="360" height="224" fill="white"/>
</clipPath>
</defs>
</svg>

'''
'''--- public/assets/illustrations/search.svg ---
<svg width="400" height="205" viewBox="0 0 400 205" fill="none" xmlns="http://www.w3.org/2000/svg">
    <ellipse rx="123.01" ry="29.3256" transform="matrix(0.999429 0.033782 0.033782 -0.999429 204.875 98.04)" stroke="#8C8C8C" stroke-width="1.5" stroke-dasharray="4 4"/>
    <ellipse rx="169" ry="38.2011" transform="matrix(0.920548 -0.390629 -0.390629 -0.920548 197.996 102.783)" stroke="#8C8C8C" stroke-width="1.5" stroke-dasharray="4 4"/>
    <path d="M228 69.9543C285.242 74.3786 328.301 87.8116 327.815 102.196C327.268 118.382 271.782 129.644 203.885 127.349C135.987 125.054 81.3884 110.071 81.9355 93.8845C82.3193 82.5306 109.733 73.6 149.5 70.0713" stroke="#201F1F" stroke-width="1.5"/>
    <path d="M221.655 52.5005C290.772 27.7065 346.589 20.3184 353.569 36.7664C361.81 56.188 298.839 101.489 212.919 137.949C126.998 174.408 50.6652 188.221 42.4237 168.799C35.3001 152.011 81.3816 115.889 149.5 82.8533" stroke="#201F1F" stroke-width="1.5"/>
    <ellipse rx="6.39122" ry="5.83233" transform="matrix(0.384338 0.916886 -0.932084 0.348504 253.153 72.1836)" fill="#E1FC31"/>
    <path d="M254.553 75.8658C252.716 76.5569 250.554 75.5019 249.724 73.5094C248.894 71.517 249.71 69.3415 251.547 68.6504" stroke="#201F1F" stroke-width="1.5"/>
    <ellipse cx="96.2273" cy="81.6855" rx="4" ry="4" transform="rotate(-19.9138 96.2273 81.6855)" fill="#FF8743"/>
    <circle cx="292.693" cy="80.7226" r="4" transform="rotate(-19.9138 292.693 80.7226)" fill="#FF8743"/>
    <ellipse cx="177.693" cy="150.723" rx="4" ry="4" transform="rotate(-19.9138 177.693 150.723)" fill="#FF8743"/>
    <circle cx="125.104" cy="166.134" r="12" transform="rotate(-2.61158 125.104 166.134)" fill="#CFF9EA"/>
    <path d="M130.981 163.317L121.094 163.767L118.722 171.083L128.87 170.62C129.072 170.611 130.981 163.317 130.981 163.317Z" fill="#0C422A"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M122.982 163.682L123.933 160.411C124.133 159.721 124.971 159.457 125.531 159.907C126.374 160.584 126.886 161.59 126.939 162.669L126.979 163.5L132.78 163.235C132.78 163.235 130.582 170.543 130.669 170.539L120.521 171.002L122.893 163.686L122.982 163.682Z" fill="#19D992"/>
    <circle cx="326.104" cy="28.1341" r="12" transform="rotate(-2.61158 326.104 28.1341)" fill="#FFF3EC"/>
    <path d="M320.9 32.5761L330.787 32.1251L333.159 24.8094L323.011 25.2723C322.81 25.2815 320.9 32.5761 320.9 32.5761Z" fill="#401700"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M328.945 32.2084L328.128 35.019C327.928 35.7091 327.09 35.9734 326.53 35.5233C325.687 34.8462 325.175 33.8408 325.123 32.7611L325.104 32.3836L319.102 32.6574C319.102 32.6574 321.3 25.3496 321.213 25.3536L331.361 24.8907L328.989 32.2064L328.945 32.2084Z" fill="#FF8743"/>
    <circle cx="56.7705" cy="141.93" r="8.79296" fill="#E1FC31"/>
    <path d="M62.2661 141.93C62.2661 144.965 59.8056 147.425 56.7705 147.425C53.7354 147.425 51.2749 144.965 51.2749 141.93" stroke="#201F1F" stroke-width="1.5"/>
    <g clip-path="url(#clip0)">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M221.39 98.6461C227.44 90.3886 230.149 80.1515 228.977 69.9823C227.804 59.8114 222.834 50.4585 215.061 43.7947C207.288 37.1309 197.286 33.6477 187.055 34.0419C176.824 34.4361 167.12 38.6787 159.883 45.9208C152.646 53.163 148.41 62.8706 148.023 73.1016C147.636 83.3326 151.127 93.3324 157.796 101.1C164.465 108.868 173.822 113.832 183.994 114.998C194.164 116.163 204.399 113.446 212.652 107.391C212.839 107.64 213.038 107.876 213.262 108.106L237.325 132.169C238.497 133.342 240.086 134.001 241.744 134.001C243.402 134.002 244.993 133.344 246.165 132.172C247.338 131 247.997 129.41 247.998 127.752C247.998 126.094 247.34 124.504 246.168 123.331L222.106 99.2689C221.883 99.0436 221.644 98.8354 221.39 98.6461ZM224.371 89.3909C226.32 84.6875 227.322 79.6464 227.322 74.5555C227.322 64.2739 223.238 54.4135 215.968 47.1433C208.698 39.8731 198.837 35.7888 188.556 35.7888C178.274 35.7888 168.414 39.8731 161.143 47.1433C153.873 54.4135 149.789 64.2739 149.789 74.5555C149.789 79.6464 150.792 84.6875 152.74 89.3909C154.688 94.0943 157.544 98.3679 161.143 101.968C164.743 105.568 169.017 108.423 173.72 110.371C178.424 112.319 183.465 113.322 188.556 113.322C193.646 113.322 198.688 112.319 203.391 110.371C208.094 108.423 212.368 105.568 215.968 101.968C219.568 98.3679 222.423 94.0943 224.371 89.3909Z" fill="#201F1F"/>
    </g>
    <defs>
        <clipPath id="clip0">
            <rect width="100" height="100" fill="white" transform="translate(148 34)"/>
        </clipPath>
    </defs>
</svg>

'''
'''--- public/flag-mask.svg ---
<svg width="300" height="300" viewBox="0 0 300 300" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd"
        d="M300 0H0V300H300V0ZM97.8076 98.8197L240.007 48V159.475L202.2 172.987V201.181L60 252V140.525L97.8076 127.013V98.8197Z"
        fill="#201F1F"/>
  <path
    d="M275.347 266.373L271 262L266.653 266.373L267.72 267.467L270.227 264.96V270.533H271.773V264.96L274.28 267.467L275.347 266.373Z"
    fill="white"/>
  <path
    d="M266.653 281.627L271 286L275.347 281.627L274.28 280.533L271.773 283.04V277.467H270.227V283.04L267.72 280.533L266.653 281.627Z"
    fill="white"/>
  <path
    d="M263.373 269.653L259 274L263.373 278.347L264.467 277.28L261.96 274.773H267.533V273.227H261.96L264.467 270.72L263.373 269.653Z"
    fill="white"/>
  <path
    d="M278.627 278.348L283 274.001L278.627 269.654L277.533 270.721L280.04 273.228H274.467V274.774H280.04L277.533 277.281L278.627 278.348Z"
    fill="white"/>
</svg>

'''
'''--- public/flag.svg ---
<svg width="41" height="46" viewBox="0 0 41 46" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd"
        d="M40.4772 0L8.50199 11.4593V17.8165L0 20.8634V46L31.9752 34.5407V28.1835L40.4772 25.1366V0Z" fill="white"/>
</svg>

'''
'''--- public/locales/en/common.json ---
{
  "allCommunities": "All Communities",
  "home": "Home",
  "allDaos": "All DAOs",
  "myDaos": "My DAOs",
  "myFeed": "My Feed",
  "myProposalsFeed": "My Proposals Feed",
  "globalFeed": "Global Feed",
  "actionsLibrary": "Actions Library",
  "daosAndUsers": "DAOs and Users",
  "daoFunds": "DAO funds",
  "createNewDao": "Create new DAO",
  "loading": "Loading",
  "youHaveSeenItAll": "You have seen it all",
  "daoMembers": "DAO Members",
  "membersGroups": "Members/Groups",
  "settings": "Settings",
  "nfts": "NFTs",
  "bounties": "Bounties",
  "transfers": "Transfers",
  "polls": "Polls",
  "proposals": "Proposals",
  "treasury": "Treasury",
  "organization": "Organization",
  "groups": "Groups",
  "activeProposals": "active proposals",
  "function calls": "Function Calls",
  "customFunctionCallTemplates": "Custom Function Calls Templates",
  "cfcLibrary": "Function Call Library",
  "proposalsInTotal": "proposals in total",
  "propose": "Propose",
  "viewProposal": "View Proposal",
  "daoSettings": "DAO Settings",
  "popupsInfoWarning": "Please make sure pop-ups and redirects are allowed on this page, otherwise proposal may fail to be created.",
  "successProposalNotification": "The blockchain transactions might take some time to perform, please visit DAO details page in few seconds",
  "daoConfig": "DAO Config",
  "votingPolicy": "Voting Policy",
  "policyAffectedProposalsTitle": "Change {{title}} Snapshot",
  "policyAffectedProposalsText": "The proposed changes in {{title}} will affect the other proposals. Further updates might get rewritten if the current proposal won't get resolved before.",
  "allMembers": "All Members",
  "noProposalsHere": "No proposals here",
  "noMoreResults": "No more results",
  "governance": "Governance",
  "financial": "Financial",
  "members": "Members",
  "reportAnIssue": "Report an issue",
  "leaveFeedback": "Leave feedback",
  "termsAndConditions": "Terms and Conditions",
  "releaseNotes": "Release notes",
  "testnetEnv": "Testnet env",
  "filterByStatus": "Filter by status",
  "filterByProposalStatus": "Filter by proposal status",
  "numberOfVotes": "Number of votes",
  "numberOfTransactions": "Number of transactions",
  "activity": "Activity",
  "noResultsFound": "No results found",
  "users": "Users",
  "archived": "Archived",
  "youFollowed": "You Followed",
  "followed": "Followed",
  "confirmUnsubscribe": "Are you sure you want to unsubscribe from",
  "confirmDeposit": "Enter the deposit amount",
  "depositToDao": "Deposit to DAO",
  "deposit": "Deposit",
  "joinDao": "Join DAO",
  "continue": "Continue",
  "threshold": "Threshold",
  "amount": "Amount",
  "minimumSearchCharacters": "Please enter at least 3 characters to search",
  "searchBountyPlaceholder": "Search Bounty Name",
  "all": "All",
  "cancel": "Cancel",
  "save": "Save",
  "delete": "Delete",
  "selectedProposals": "Selected {{length}} proposal{{plural}}",
  "filterByProposer": "Filter by proposer",
  "ascending": "Ascending",
  "descending": "Descending",
  "noDataFound": "No data found",
  "copyPageUrl": "Copy page URL",
  "copiedSuccessfully": "Copied successfully",
  "view": "View",
  "edit": "Edit",
  "bountiesPage": {
    "successClaimBountyNotification": "The blockchain transactions might take some time to perform, please visit the page in few seconds",
    "comingSoon": "Coming Soon",
    "bounty": "Bounty",
    "completed": "Completed"
  },
  "common": {
    "clickToUploadImage": "Click here to upload image",
    "clickToChangeImage": "Click here to change image"
  },
  "chart": {
    "month": "1M",
    "threeMonths": "3M",
    "sixMonths": "6M",
    "year": "1Y",
    "all": "All",
    "daily": "Daily",
    "weekly": "Weekly",
    "monthly": "Monthly"
  },
  "notifications": {
    "transactionDelay": "The blockchain transactions might take some time to perform, please visit DAO details page in few seconds.",
    "noArchivedNotifications": "There are no archived notifications yet"
  },
  "components": {
    "appFooter": {
      "askQuestion": "Ask a question",
      "reportAnIssue": "Report an issue",
      "githubRepo": " Github repo",
      "opensourceAsIs": "SputnikDAO 2021-2022. The software is an open source and provided “as is”, without warranty of any kind.",
      "communityDeveloped": "Community developed. Not audited. Use at your own risk.",
      "stats": "Stats",
      "swaggerApi": "Swagger API"
    },
    "daoDetails": {
      "proposalTrackerCard": {
        "active": "active",
        "activePlural": "active",
        "proposal": "proposal",
        "proposals": "Proposals",
        "proposalsInTotal": "proposals in total",
        "createProposal": "Create proposal"
      }
    },
    "daoDetailsPreview": {
      "daoFunds": "DAO Funds",
      "daoMembersAndGroups": "Members/Groups"
    },
    "transactionDetailsWidget": {
      "warning": "Warning",
      "gas": "Gas",
      "tGas": "TGas",
      "bond": "Bond"
    }
  },
  "comments": {
    "sendButton": "Send",
    "noComments": "No comments yet",
    "startTyping": "Start typing...",
    "youReportedThisMessage": "You have reported this message",
    "thisMessageWasReported": "This message was reported",
    "commentsSpamProtection": "Due to spam protection no more than 5 messages per minute are allowed."
  },
  "manageGroups": {
    "groupIncorrectCharactersError": "Incorrect Group name - you can use letters and numbers only with hyphens and spaces in the middle.",
    "preventDeleteLastGroupWithMembers": "You can't delete last group with members"
  },
  "createDAO": {
    "createNewDAO": "Create new DAO",
    "createNewDAOWay": "A DAO is a new way for people to organize and work together",
    "daoIncorrectLengthError": "Incorrect DAO name - at least 3 characters expected.",
    "daoIncorrectCharactersError": "Incorrect DAO name - you can use letters and numbers only with hyphens and spaces in the middle.",
    "daoAlreadyExist": "Dao with such address already exists.",
    "daoIncorrectURLError": "Enter correct URL!",
    "daoNameForm": {
      "daoNameAndPurpose": "DAO name and purpose",
      "daoFieldsDescription": "All fields bellow, unless otherwise noted are required.",
      "daoName": "DAO Name",
      "daoSampleName": "Sample DAO Name",
      "daoPurpose": "Purpose",
      "daoSampleText": "Sample text. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient."
    },
    "daoLegalStatus": {
      "daoKYC": "KYC",
      "daoKYCDescription": "Please explain your DAO`s Legal Status and Jurisdiction (if known).",
      "daoKYCDescriptionPlaceholder": "Legal Status",
      "daoKYCLink": "Please attach a link to the relevant document as proof of legal status.",
      "daoKYCLinkPlaceholder": "https://Legal_Document"
    },
    "proposals": {
      "proposalsCreation": "Proposal creation",
      "description": "Choose what creation rights you give DAO groups. This can be changed in settings later."
    },
    "voting": {
      "votingPermissions": "Voting permissions",
      "description": "Choose what voting rights you give DAO groups."
    },
    "daoLinksForm": {
      "daoLinks": "Links and socials",
      "daoLinksDescription": "Looking to grow the DAO members? Add links to allow people to learn more about your DAO."
    },
    "daoRulesForm": {
      "daoSetRules": "Set rules for your DAO",
      "daoSetRulesDescription": "All fields bellow, unless otherwise noted are required.",
      "daoSetRulesChooseATemplate": "Choose a template",
      "daoRulesTemplate": {
        "daoRulesTemplateCustom": "Custom",
        "daoRulesTemplateClub": "Club",
        "daoRulesTemplateClubDescription": "A small circle of friends\nA group of fans\nA social club",
        "daoRulesTemplateFoundation": "Foundation",
        "daoRulesTemplateFoundationDescription": "A group giving donations\nAn organization funding community projects\nA fund for open-source projects",
        "daoRulesTemplateCorporation": "Corporation",
        "daoRulesTemplateCorporationDescription": "A business with shareholders\nA startup or company",
        "daoRulesTemplateCooperative": "Cooperative",
        "daoRulesTemplateCooperativeDescription": "A business with members\nA creative collective"
      },
      "daoRules": {
        "daoRulesAll": "All",
        "daoRulesAllDescription": "Anyone with a NEAR wallet.",
        "daoRulesMembers": "Members",
        "daoRulesMembersDescription": "Only members of your DAO",
        "daoRulesDemocratic": "Democratic",
        "daoRulesDemocraticDescription": "Every member gets 1 vote.",
        "daoRulesTokenWeighted": "Token weighted",
        "daoRulesTokenWeightedDescription": "More tokens more voting power!",
        "daoRulesFlat": "Flat",
        "daoRulesFlatDescription": "No groups; all members have equal access.",
        "daoRulesGroups": "Groups and Committees",
        "daoRulesGroupsDescription": "Specific groups can vote on specific proposals."
      },
      "daoRulesSections": {
        "daoRulesProposals": "Proposals",
        "daoRulesProposalsDescription": "Who can submit proposals to your DAO? (submit is vote)",
        "daoRulesVoting": "Voting Power",
        "daoRulesVotingDescription": "Carefully pick to not let people who own the token but not part of the DAO overtake you!",
        "daoRulesStructure": "Structure",
        "daoRulesStructureDescription": "Select level of access to vote on proposals."
      }
    },
    "daoFlagForm": {
      "daoFlagCreate": "Lets create your flag!",
      "daoFlagCreateDescription": "Both fields are optional. If you skip, default image will be used instead. An image and a logo together form a flag of your DAO!",
      "daoFlagCoverUpload": "Upload your “Cover”",
      "daoFlagCoverUploadDescription": "Cover will be used as a branded letterhead of your proposals, also small icon of your flag won’t include logo on it.",
      "daoFlagCoverUploadRequirements": "Rectangular image 3x4 proportions",
      "daoFlagLogoUpload": "Upload your “Logo”",
      "daoFlagLogoUploadDescription": "Logo will be placed on top of your flag and will be visible on your full view DAO details.",
      "daoFlagLogoUploadRequirements": "Square image, 400x400 pixels"
    },
    "daoPreviewForm": {
      "daoPreviewHeader": "Preview of your custom DAO assets",
      "daoPreviewFlagAndIcon": "Flag and Icon",
      "daoPreviewLetterhead": "Letterhead"
    },
    "daoPreviewFutureForm": {
      "daoPreviewFuture": "Preview of your future DAO",
      "daoMakeSureDescription": "Make sure everything right and clear, this is how users will see your DAO on the platform!"
    },
    "daoGroupsForm": {
      "addGroups": "Add groups",
      "addGroupsDescription": "Looking to grow the DAO members? Add links to allow people to learn more about your DAO.",
      "defaultGroup": "Default groups",
      "defaultGroupDescription": "You can’t delete them",
      "customGroup": "Custom groups",
      "deleteModalTitle": "Are you sure you want to delete the group",
      "deleteModalSubtitle": "Proposal will be created to delete this group After confirmation",
      "deleteModalAction": "Delete group",
      "resetModalTitle": "Are you sure you want to Reset edits?",
      "resetModalSubtitle": "The action cannot be undone. All data entered will be reset.",
      "resetModalAction": "Reset edits"
    },
    "daoMembersForm": {
      "addMembers": "Add Members",
      "addMembersDescription": "Add members to your DAO.",
      "newMemberNamePlaceholder": "NEAR name",
      "newMemberRolePlaceholder": "Select group"
    },
    "daoAssets": {
      "createDaoAssets": "Create DAO assets",
      "createDaoAssetsDescription": "Both fields are optional. If you skip, default image will be used instead. An image and a logo together form a flag of your DAO!"
    },
    "daoSubmitForm": {
      "daoSubmitError": "There are errors in your form. Please, check validation messages on the page.",
      "daoSubmitLiability": "Creating a DAO is a liability ",
      "daoTermsAndConditionsLink": "Terms and Conditions",
      "daoCannotBeDeleted": "DAOs can not be deleted!",
      "daoCreateButton": "Create DAO"
    },
    "daoExists": "This DAO is already exists",
    "optional": "Optional"
  },
  "myDAOsPage": {
    "noDAOs": "You have no DAOs, but you can",
    "createDAOLink": "create",
    "noDAOsEnd": "one",
    "myDAOs": "My DAOs",
    "createNewDAO": "Create new DAO"
  },
  "daoDashboard": {
    "daoFunds": "DAO funds",
    "bounties": "Bounties",
    "nfts": "NFTs",
    "proposals": "Proposals",
    "activeProposals": "active proposals",
    "proposalsInTotal": "proposals in total"
  },
  "delegateVoting": {
    "delegate": "Delegate",
    "retract": "Retract",
    "voteActions": "Vote Actions",
    "delegatedToken": "Delegated {{token}}",
    "policyDescription": "A DAO member can only cast a vote if they hold an amount of tokens equal or greater to the minimum balance. When a vote is cast the total token weight in that direction compares against the threshold. If that token weight is greater than the threshold, the proposal finalizes with a pass or fail."
  },
  "daoDetailsCreateButton": {
    "draft": {
      "label": "Draft a Proposal",
      "description": "for preliminary discussion"
    },
    "proposal": {
      "label": "Proposal",
      "description": "for a general vote for a decision"
    }
  },
  "daoDetailsMinimized": {
    "delegates": "Delegate",
    "drafts": "Drafts",
    "proposals": "Proposals",
    "funds": "Funds",
    "members": "Members",
    "settings": "Settings",
    "nfts": "NFTs",
    "bounties": "Bounties",
    "polls": "Polls",
    "createProposal": "Create Proposal",
    "treasury": "Treasury",
    "createGovernanceToken": "Create Governance Token",
    "createDraft": "Create Draft"
  },
  "feed": {
    "filters": {
      "chooseAFilter": "Choose a filter",
      "all": "All",
      "active": "Active",
      "approved": "Approved",
      "failed": "Failed",
      "voteNeeded": "Vote Needed",
      "vote": "Vote",
      "transfers": "Transfers"
    }
  },
  "allDAOsFilter": {
    "mostActive": "Most Active",
    "newest": "Newest",
    "oldest": "Oldest",
    "biggestFunds": "Biggest funds",
    "numberOfMembers": "Number of members"
  },
  "loader": {
    "title": "Receiving data from the contract",
    "waitSomeTime": "This may take some time"
  },
  "proposalCard": {
    "signingTransaction": "Signing transaction",
    "finalize": "Finalize",
    "draft": "Draft",
    "created": "Created",
    "timeLeft": "left",
    "votingEnded": "Voting ended",
    "voteInDao": {
      "targetDao": {
        "label": "DAO",
        "placeholder": "Select DAO",
        "required": "DAO is a required field"
      },
      "proposal": {
        "label": "Related Proposal",
        "placeholder": "Select Proposal",
        "required": "Proposal is a required field"
      },
      "vote": {
        "label": "Vote",
        "placeholder": "Vote",
        "required": "Vote is a required field"
      },
      "noProposalsToVote": "No proposals to vote"
    },
    "proposalID": "Proposal ID:",
    "proposalType": "Proposal type: ",
    "proposalOwner": "Proposer",
    "proposalDescription": "Description",
    "proposalAmount": "Amount",
    "proposalTarget": "Target",
    "proposalTargetPlaceholder": "Specify target account",
    "bountyAvailableClaims": "Available Claims",
    "bountyDaysToComplete": "Days to Complete",
    "bountyTimeToComplete": "Time to Complete",
    "newDAOName": "New DAO name",
    "newDAOPurpose": "New Purpose",
    "newDAOLinks": "New DAO links",
    "newDAOCover": "New Cover",
    "newDAOLogo": "New Logo",
    "newDAOLegalStatus": "DAO’s Legal Status",
    "newDAOLegalDoc": "Legal Document",
    "newDAOLegalStatusHint": "Public Limited Company",
    "newDAOLegalDocHint": "Link",
    "daoGroup": "Group",
    "whoVotes": "Who votes",
    "consensus": "Consensus",
    "person": "Person",
    "proposals": "Proposals",
    "proposalBonds": "Bonds to create proposals",
    "proposalBondExpirationTime": "Time before proposals expire",
    "proposalBounties": "Bounties",
    "proposalClaimBounty": "Bonds to claim bounty",
    "proposalBountyUnclaimTime": "Time to unclaim a bounty without penalty",
    "newGroupName": "New Group Name",
    "initialMemberName": "Initial Member Name",
    "group": "Group",
    "chooseGroup": "Choose Group",
    "smartContractAddress": "Smart Contract Address",
    "methodName": "Method Name",
    "json": "JSON",
    "deposit": "Deposit",
    "preview": "Preview",
    "timeExpired": "Time expired",
    "proposalTypes": {
      "groupTransferAddBounty": "Transfer/Add bounty",
      "proposeTransfer": "Propose a Transfer",
      "proposeBounty": "Propose to Create a Bounty",
      "groupChangeConfig": "Change Config",
      "proposeDAOName": "Propose to Change DAO Name",
      "proposeDAOPurpose": "Propose to Change DAO Purpose",
      "proposeDAOLinks": "Propose to Change DAO Links",
      "proposeDAOFlagAndLogo": "Propose to Change DAO Flag and Logo",
      "proposeLegalStatusAndDoc": "Propose to change DAO Legal Status and Doc",
      "groupChangePolicy": "Change Policy",
      "proposeChangePolicy": "Propose to Change Voting Policy",
      "proposeBondsAndDeadlines": "Propose to Change Bonds and Deadlines",
      "proposeGroup": "Propose to Create a Group",
      "groupChangeMembers": "Change Members of DAO",
      "proposeAddMember": "Propose to Add Member to Group",
      "proposeRemoveMember": "Propose to Remove Member from Group",
      "groupVote": "Vote",
      "proposePoll": "Propose a Poll",
      "groupFunctionCall": "Function Call",
      "proposeCustomCall": "Custom Function Call",
      "createToken": "Create Token"
    },
    "upgradeContent": {
      "groups": "Groups",
      "groupName": "Group name",
      "groupQuorum": "Group quorum is",
      "quorumDescr": "What is the quorum required\nfor the decision of this group",
      "members": "Members"
    },
    "acceptStakingContract": {
      "stakingContract": "Staking Contract"
    },
    "deployStakingContract": {
      "tokenId": "Token ID",
      "hours": "hours",
      "unstakingPeriod": "Unstaking Period"
    },
    "functionCalls": {
      "proposeGetUpgradeCode": {
        "description": "Upgrading your DAO requires you to retrieve the new code you want your DAO to run. This proposal is to get a copy of the upgrade code. The code comes from the Sputnik DAO Factory, the same place your DAO came from when you created it."
      },
      "proposeUpgradeSelf": {
        "description": "Now that your DAO has a copy of the code it wants to run, it's time to propose that the DAO \"Upgrades Itself.\" This proposal will switch the DAO from running its old code to the code you retrieved in step 1."
      },
      "proposeRemoveUpgradeCode": {
        "description": "Your DAO is now running the latest code! This proposal is to delete the upgrade code which you retrieved from the factory. Deleting that code saves NEAR for your DAO. It's safe to delete that code because smart contracts always store a copy of the code they're running."
      },
      "proposeCreateDao": {
        "description": "Because V2 DAOs can not be upgraded we will create a new DAO running the V3 smart contract. After this step we will transfer all assets to the V3 DAO."
      },
      "proposeTransferFunds": {
        "description": "To manage our assets with our new V3 DAO we will transfer them from our old V2 DAO. We're creating the proposals all at once but each proposal needs separate approval."
      }
    }
  },
  "createProposal": {
    "header": {
      "governanceTokenSetup": "Governance Token Setup",
      "changePolicy": "Proposal type: Change Policy",
      "proposalCreation": "Proposal Creation",
      "votingPermissions": "Voting Permissions",
      "migrate": "Migrate",
      "createDao": "Create DAO",
      "transferDaoFunds": "Transfer DAO funds",
      "upgrade": "Upgrade",
      "getCodeFromFactory": "Get Code From Factory",
      "upgradeDao": "Upgrade DAO",
      "recoverStorageCosts": "Recover Storage Costs",
      "transferBountyDone": "Proposal type: Transfer/Bounty Done",
      "completeBounty": "Complete Bounty",
      "customFunction": "Custom Function",
      "distributionOfTokens": "Distribution of tokens",
      "createGovernanceToken": "Create Governance Token",
      "deployStakingContract": "Deploy Staking Contract",
      "changeConfig": "Change Config",
      "createToken": "Create Token",
      "group": "Group",
      "createGovToken": "Create Governance Token",
      "acceptStakingContract": "Adopt Staking Contract",
      "changeVotingPolicy": "Change Voting Policy"
    },
    "countdown": "Countdown will be here"
  },
  "viewProposalCard": {
    "proposalVariant": {
      "voteInAnotherDao": "Vote in Another DAO",
      "createBounty": "Create a Bounty",
      "bountyDone": "Bounty Done",
      "transfer": "Transfer",
      "changeDaoName": "Change DAO name",
      "changeDaoPurpose": "Change DAO purpose",
      "changeDaoLinks": "Change DAO links",
      "poll": "Poll",
      "createGroup": "Create group",
      "addMember": "Add member to Role",
      "removeMember": "Remove member from Role",
      "changeVotingPolicy": "Change Voting Policy",
      "changeBonds": "Change Bonds and Deadlines",
      "changeDaoFlag": "Change DAO flag",
      "tokenDistribution": "Distribution of tokens",
      "changeProposalCreationPermissions": "Proposal creation",
      "changeProposalVotingPermissions": "Voting permissions",
      "getCodeFromFactory": "Get Code From Factory",
      "upgradeDao": "Upgrade DAO",
      "recoverStorageCosts": "Recover Storage Costs",
      "createDao": "Create DAO",
      "deployStakingContract": "Deploy Staking Contract",
      "contractAcceptance": "Adopt Staking Contract"
    },
    "proposalType": {
      "addBounty": "Add Bounty",
      "changePolicy": "Change Policy",
      "changeConfig": "Change Config",
      "functionCall": "Function Call"
    }
  },
  "settingsPage": {
    "drafts": "Drafts",
    "daoPolicy": "DAO Policy",
    "nameAndPurpose": "Name and Purpose",
    "legalStatusAndDoc": "Legal Status and doc",
    "links": "Links",
    "flagAndLogo": "Flag and Logo",
    "groupNames": "Group names",
    "proposalCreation": "Proposal Creation",
    "votingPolicy": "Voting Policy",
    "votingPermissions": "Voting Permissions",
    "bondAndDeadlines": "Bond and Deadlines",
    "groups": "Groups",
    "members": "Members",
    "daoRules": "DAO Rules"
  },
  "tokensPage": {
    "createGovernanceToken": "Create Governance Token",
    "setupGovernanceToken": "Setup Governance Token"
  },
  "createGovernanceTokenPage": {
    "tokenWeightedVoting": "Token weighted voting",
    "createGovernanceToken": "Create Governance Token",
    "underConstruction": "The feature is under construction",
    "governanceTokenSetup": "Governance Token Setup",
    "intro": {
      "setupGovernanceToken": "Setup Governance Token",
      "description": "In this wizard we'll set up your DAO for token holder participation. If\n        you haven't created your own NEP-141 fungible token then right now is a\n        good time to hit up <0>tkn.farm</0>. Then you will deploy a staking contract,\n        distribute tokens, and configure voting for holders.",
      "warningTitle": "Setting up a governance token is a permanent change to your DAO.",
      "warningDetails": "If you are unsure about taking this step it would be wise to research more and <0>experiment on testnet.</0> \n",
      "advOne": "Creating your own governance token costs less than 3 NEAR at tkn.farm. Your NEP-141 fungible token isn't limited to governance. It's there for anything you and your community dream up.",
      "advTwo": "Be mindful when distributing your tokens. By default, anyone who controls more than 50% of the token supply can attack your DAO. \n",
      "advThree": "Owning your community token will be the smoothest route for people to vote in your DAO. Configure your groups and quorums so you never have to manually add or remove members in the future.",
      "startToCreate": "Start to create",
      "faq": "FAQ",
      "accordions": {
        "first": {
          "title": "What are the problems with tokens?",
          "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas in ultricies nibh dui sed. Semper tortor ultricies sit consequat semper. Massa ultrices ultricies gravida placerat etiam. Donec faucibus at risus morbi ac libero gravida netus. Viverra mi, urna at tempor. Sollicitudin aenean habitant sollicitudin odio. Diam tellus ut justo, odio. Tristique tellus sollicitudin habitant mauris. Velit tortor quam habitant purus tincidunt tempor viverra. Lacinia suspendisse sapien viverra mi arcu pharetra tincidunt neque. Molestie volutpat tempor massa sed amet cras risus."
        },
        "second": {
          "title": "What are the problems with tokens?",
          "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas in ultricies nibh dui sed. Semper tortor ultricies sit consequat semper. Massa ultrices ultricies gravida placerat etiam. Donec faucibus at risus morbi ac libero gravida netus. Viverra mi, urna at tempor. Sollicitudin aenean habitant sollicitudin odio. Diam tellus ut justo, odio. Tristique tellus sollicitudin habitant mauris. Velit tortor quam habitant purus tincidunt tempor viverra. Lacinia suspendisse sapien viverra mi arcu pharetra tincidunt neque. Molestie volutpat tempor massa sed amet cras risus."
        },
        "third": {
          "title": "What are the problems with tokens?",
          "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas in ultricies nibh dui sed. Semper tortor ultricies sit consequat semper. Massa ultrices ultricies gravida placerat etiam. Donec faucibus at risus morbi ac libero gravida netus. Viverra mi, urna at tempor. Sollicitudin aenean habitant sollicitudin odio. Diam tellus ut justo, odio. Tristique tellus sollicitudin habitant mauris. Velit tortor quam habitant purus tincidunt tempor viverra. Lacinia suspendisse sapien viverra mi arcu pharetra tincidunt neque. Molestie volutpat tempor massa sed amet cras risus."
        }
      }
    },
    "selectToken": {
      "header": "Let`s start! Select Token",
      "createToken": "Create Token",
      "chooseExisting": "Choose existing",
      "nextStep": "Next Step"
    },
    "createToken": {
      "progress": {
        "createToken": "Create Token",
        "contractAcceptance": "Contract Acceptance",
        "tokenDistribution": "Token Distribution",
        "changeDaoPolicy": "Change DAO Policy",
        "selectToken": "Select Token",
        "deployStakingContract": "Deploy Staking Contract",
        "acceptStakingContract": "Adopt Staking Contract",
        "proposalCreation": "Proposal Creation",
        "votingPermissions": "Voting Permissions",
        "stakeTokens": "Stake tokens",
        "delegateVoting": "Delegate Voting"
      }
    }
  },
  "captcha": {
    "dragSliderRight": "Drag the slider to the right"
  },
  "discover": {
    "title": "Discovery",
    "searchDaoName": "Search DAO name",
    "daoActivity": "DAO Activity",
    "financial": "Financial",
    "generalInfo": "General Info",
    "usersAndActivity": "Users and Activity",
    "governance": "Governance",
    "flow": "Flow",
    "tvl": "TVL",
    "tokens": "Tokens",
    "activeDaos": "Active DAOs",
    "daoName": "DAO Name",
    "numberOfProposals": "Number of Proposals",
    "lastMonth": "Last Month",
    "allUsersPerDao": "All users per DAO",
    "activeUsers": "Active Users",
    "allUsersOnAPlatform": "All users on a platform",
    "usersMembersOfDao": "Users that are members of a DAO",
    "averageNumberOfUsersPerDao": "Average number of users per DAO",
    "numberOfInteractions": "Number of interactions",
    "averageNumberOfInteractionsPerDao": "Average number of interactions per DAO",
    "users": "Users",
    "members": "Members",
    "voteThroughRate": "Vote through rate",
    "totalIn": "Total In",
    "totalOut": "Total Out",
    "incomingTransactions": "Incoming transactions",
    "outgoingTransactions": "Outgoing transactions",
    "platformTvl": "Platform TVL",
    "vlInBountiesGrants": "VL in Bounties/Grants",
    "numberOfFts": "Number of FTs",
    "vlOfFts": "VL of FTs",
    "numberOfNfts": "Number of NFTs",
    "numberOfBounties": "Number of Bounties",
    "vlOfBounties": "VL of Bounties",
    "activity": "Activity",
    "avgGroupsDao": "Avg. Groups/DAO",
    "activeProposals": "Active Proposals",
    "activeVotes": "Active Votes"
  },
  "header": {
    "search": {
      "placeholder": "Search",
      "seeAll": "See all",
      "minimalChars": "Please enter at least 3 characters to search",
      "daos": "DAOS",
      "proposals": "Proposals",
      "people": "People",
      "comments": "Comments",
      "drafts": "Drafts"
    },
    "myAccount": "My Account",
    "disconnect": "Disconnect",
    "chooseWallet": "Choose wallet",
    "wallets": {
      "near": {
        "type": "web"
      },
      "sender": {
        "beta": "beta",
        "type": "extension"
      }
    }
  },
  "myAccountPage": {
    "header": "My account",
    "walletId": "Wallet ID",
    "email": "Email",
    "phone": "Phone number",
    "add": "Add",
    "edit": "Edit",
    "notification": "Notification",
    "settings": "Settings",
    "usaOnly": "only USA",
    "requestKey": "Request key",
    "allowanceVotingKeys": "Allowance voting keys",
    "popup": {
      "send": "Send",
      "save": "Save",
      "seconds": "sec",
      "codeIsIncorrect": "Validation code is incorrect",
      "email": {
        "addTitle": "Add email",
        "editTitle": "Edit email",
        "message": "We will send you an email to confirm your new mail.",
        "inputLabel": "Email",
        "codeFrom": "Code from email",
        "required": "Email is a required field",
        "error": "Must be a valid email"
      },
      "phone": {
        "addTitle": "Add phone number",
        "editTitle": "Edit phone number",
        "message": "We will send you a sms to confirm your new phone number.",
        "inputLabel": "Phone number",
        "codeFrom": "Code from sms",
        "required": "Phone number is a required field",
        "error": "Must be a valid phone number"
      }
    },
    "notifications": {
      "email": "Please, verify your email to enable notifications.",
      "phone": "Please, verify your phone number to enable notifications."
    }
  },
  "proposalVotes": {
    "noGroup": "Non DAO members",
    "title": "Votes",
    "voices": "voices"
  },
  "daoPolicy": {
    "title": "DAO Settings",
    "backToSettingsOverview": "Back to settings overview",
    "bondAndDeadlines": "Bond and deadlines",
    "tabs": {
      "proposalCreation": {
        "title": "Proposal creation",
        "description": "Choose what creation rights you give DAO groups. This can be changed in settings later."
      },
      "votingPermissions": {
        "title": "Voting permissions",
        "description": "Choose what voting rights you give DAO groups."
      }
    },
    "settings": {
      "proposals": {
        "title": "Proposals",
        "bondToCreateProposal": "Bond to create a proposal",
        "timeBeforeProposalExpires": "Time before proposal expires"
      },
      "bounties": {
        "title": "Bounties",
        "bondToClaimABounty": "Bond to claim a bounty",
        "timeToUnclaimBounty": "Time to unclaim a bounty without penalty"
      },
      "daoSettings": {
        "title": "Voting policy"
      },
      "drafts": {
        "title": "Draft proposals",
        "allowNonDaoMembersToCreateDrafts": "Allow non DAO members to create draft proposals in DAO"
      }
    }
  },
  "validation": {
    "mustBeAValidNumber": "Must be a valid number.",
    "required": "Required",
    "onlyFiveOptDecimals": "Only numbers with five optional decimal place please.",
    "onlyValidNearAccounts": "Only valid near accounts are allowed.",
    "groupAlreadyExists": "Group already exists",
    "validUrl": "Must be a valid URL",
    "canNotBeEmpty": "Cannot be empty",
    "daoCanNotBeSpecifiedInThisField": "Current DAO can not be specified in this field",
    "enterCorrectUrl": "Enter correct url!",
    "tokenFormat": "It must be as Token ID:Token store format",
    "methodNameInvalid": "Provided method name is not valid",
    "jsonNotValid": "Provided JSON is not valid",
    "atLeastThreeChars": "At least 3 characters expected.",
    "lettersNumbersHyphensSpaces": "Only letters and numbers with hyphens and spaces in the middle"
  },
  "actions": {
    "libraryDesc": "Add new functionality and power up your workflow with these templates",
    "searchByTemplate": "Search by template name",
    "sorting": "Sorting by",
    "name": "Name",
    "smartContractAddress": "Smart Contract address",
    "usedNumberDaos": "Used in # DAOs",
    "useInDao": "Use in DAO",
    "copyToDao": "Copy to DAO",
    "backToActionsLibrary": "Back to Actions Library",
    "by": "by",
    "usedInDaos": "Used in DAOs",
    "templateName": "Template Name",
    "methodName": "Method Name",
    "deposit": "Deposit",
    "tGas": "TGas",
    "saveTemplate": "Save template",
    "chooseDao": "Choose DAO",
    "templateSavedSuccessfully": "Successfully saved proposal template",
    "saveWarning": "Only councils can save templates to their DAOs",
    "addTemplateName": "Add Name",
    "templateNamePlaceholder": "Template Name",
    "addTemplateDescription": "Add Description",
    "templateDescriptionPlaceholder": "Template description"
  },
  "drafts": {
    "breadcrumbs": {
      "createDraft": "Create Draft",
      "editDraft": "Edit Draft"
    },
    "feed": {
      "headTitle": "Drafts",
      "title": "Drafts",
      "unreadDrafts": "Unread drafts",
      "allDrafts": "All drafts",
      "noDrafts": {
        "title": "No drafts",
        "createDraftButton": "Create Draft"
      },
      "filters": {
        "title": "Filters",
        "sort": {
          "title": "Sort"
        },
        "category": {
          "title": "Category",
          "all": "All"
        },
        "view": {
          "title": "Type",
          "all": "All",
          "unread": "Unread",
          "saved": "Saved"
        },
        "state": {
          "title": "State",
          "all": "All",
          "onDiscussionStatus": "On discussion",
          "convertedToProposalStatus": "Converted to proposal"
        }
      },
      "card": {
        "lastActivity": "Last activity",
        "justNow": "just now",
        "minutesAgo": "ago",
        "onDiscussionStatus": "On discussion",
        "convertedToProposalStatus": "Converted to proposal",
        "linkToConvertedProposal": "Link to converted proposal"
      }
    },
    "editDraftPage": {
      "title": "Edit Draft",
      "comment": "Comment",
      "saveDraftTooltip": "Save Draft",
      "convertToProposalButton": "Convert to proposal",
      "editButton": "Edit",
      "deleteButton": "Delete",
      "modalDeleteTitle": "Delete draft",
      "modalDeleteMessage": "Are you sure you want to delete selected draft?"
    },
    "draftPage": {
      "title": "DAO Draft"
    },
    "createDraftPage": {
      "title": "Creating Draft",
      "headTitle": "Create Draft",
      "saveButton": "Save",
      "placeholder": "Describe your draft...",
      "titlePlaceholder": "Add draft name"
    },
    "comments": {
      "placeholder": "Write a comment...",
      "writeCommentButton": "Write a comment...",
      "oneReply": "Reply",
      "replies": "Replies",
      "comments": "comments",
      "comment": "comment",
      "reply": "Reply",
      "replyPlaceholder": "Reply...",
      "edited": "Edited",
      "editButton": "Edit",
      "deleteButton": "Delete",
      "modalDeleteTitle": "Delete comment",
      "modalDeleteMessage": "Are you sure you want to delete selected comment?"
    },
    "backToFeed": "Back to Draft Feed",
    "editableContent": {
      "sendButton": "Send",
      "cancelButton": "Cancel"
    }
  },
  "logoSelector": {
    "dropOrBrowse": "Drag & drop logo or browse",
    "supportedFormat": "Supported format: IMG, PNG",
    "maxSize": "MAX Size",
    "selectFromTemplate": "or select from templates",
    "proposeNewLogo": "Propose new logo"
  }
}

'''
'''--- public/locales/en/notificationsPage.json ---
{
  "settings": "Settings",
  "notificationsHub": "Notifications Hub",
  "chooseAType": "Choose a type",
  "noNotifications": "No notifications",
  "noNotificationsYet": "No notifications yet",
  "noArchivedNotificationsYet": "No archived notifications yet",
  "newNotifications": "New",
  "oldNotifications": "Old",
  "all": "All",
  "yourDaos": "Your DAOs",
  "platform": "Platform",
  "subscribed": "Subscribed",
  "muted": "Muted",
  "noMoreResults": "No more results",
  "yourNewDaoCreated": "Your New DAO <b>\"{{newDaoName}}\"</b> has been successfully created.",
  "newDaoCreated": "New DAO <b>\"{{newDaoName}}\"</b> has been successfully created by <b>{{accountId}}</b>",
  "platformWideNotifications": "Platform-wide notifications",
  "howLongDisable": "Choose for how long you would like to disable notifications from your DAOs and DAOs you are a member.",

  "submittedNewProposal": "submitted new \"{{type}}\" proposal in the <b>{{dao}}</b> DAO",
  "proposalWasRejected": "proposal was rejected in the <b>{{dao}}</b> DAO",
  "proposalWasApproved": "proposal was approved in the <b>{{dao}}</b> DAO",

  "addMemberToGroup": "Add member to group",
  "removeMemberFromGroup": "Remove member from group",
  "createBounty": "Create a bounty",
  "bountyDone": "Bounty done",
  "changeConfig": "Change Config",
  "changePolicy": "Change Policy",
  "transfer": "Transfer",
  "functionCall": "Function call",
  "poll": "Poll",
  "description": "Description",
  "commentLike": "Like",

  "you": "You",
  "your": "Your",
  "notificationsSettings": "Notifications settings",
  "platformWide": "Platform-wide notifications",

  "votedToApprove": "<b>{{actioner}}</b> voted to approve <b>{{proposalAuthor}}'s</b> \"{{type}}\" proposal in the <b>{{dao}}</b> DAO",
  "votedToReject": "<b>{{actioner}}</b> voted to reject <b>{{proposalAuthor}}'s</b> \"{{type}}\" proposal in the <b>{{dao}}</b> DAO",
  "votedToRemove": "<b>{{actioner}}</b> voted to remove <b>{{proposalAuthor}}'s</b> \"{{type}}\" proposal in the <b>{{dao}}</b> DAO",

  "liked": "<b>{{actioner}}</b> liked <b>{{proposalAuthor}}'s</b> comment to draft proposal",

  "proposalChangeNameSuccess": "proposal Change DAO Name has been approved",
  "createdNewPoll": "created a new poll for <b>{{dao}}</b>. Check out now to cast your vote.",
  "archived": "Archived",
  "markReadAll": "Mark read all",
  "archiveAll": "Archive all",

  "customDaoCreate": "Notify me about the creation of a DAO with a Custom structure",
  "clubDaoCreate": "Notify me about the creation of a DAO with a Club structure",
  "foundationDaoCreate": "Notify me about the creation of a DAO with a Foundation structure",
  "corporationDaoCreate": "Notify me about the creation of a DAO with a Corporation structure",
  "cooperativeDaoCreate": "Notify me about the creation of a DAO with a Cooperative structure",

  "markAsUnread": "Mark as unread",
  "markAsRead": "Mark as read",
  "restore": "Restore",
  "archive": "Archive"
}

'''
'''--- public/locales/ru/common.json ---
{
  "allCommunities": "Все сообщества",
  "home": "дом",
  "allDaos": "Все ДАО",
  "myDaos": "Мои ДАО",
  "myFeed": "Моя лента",
  "myProposalsFeed": "Моя лента",
  "globalFeed": "Глобальная лента",
  "actionsLibrary": "Библиотека действий",
  "daosAndUsers": "ДАО и пользователи",
  "daoFunds": "Фонд ДАО",
  "createNewDao": "Создать новое ДАО",
  "loading": "Загрузка",
  "youHaveSeenItAll": "Ничего нового",
  "daoMembers": "Участники ДАО",
  "membersGroups": "Участники/Группы",
  "settings": "Настройки",
  "nfts": "NFT-токены",
  "bounties": "Работа",
  "transfers": "Трансферы",
  "polls": "Опросы",
  "treasury": "казна",
  "organization": "организация",
  "groups": "Группы",
  "activeProposals": "активные предложения",
  "function calls": "Вызов функций",
  "proposalsInTotal": "предложений всего",
  "propose": "Предложить",
  "viewProposal": "Просмотреть предложение",
  "daoSettings": "Настройки ДАО",
  "popupsInfoWarning": "Пожалуйста, убедтесь в том, что всплывающие окна и перенаправления разрешены на этой странице, в противном случае создание предложения может не сработать.",
  "successProposalNotification": "Транзакции в блокчейне могут занимать некоторе время, пожалуйста, обновите страницу ДАО через несколько секунд.",
  "daoConfig": "Конфигурация ДАО",
  "votingPolicy": "Првила голосования",
  "policyAffectedProposalsTitle": "Изменить {{title}} снепшот",
  "policyAffectedProposalsText": "Предложенные изменения в {{title}} могут повлиять на другие предложения. Последующие обновления могут быть утеряны, если текущее предложение не будет принято раньше других.",
  "allMembers": "Все участники",
  "noProposalsHere": "Предложения отсутствуют",
  "noMoreResults": "Данные отсутсвтуют",
  "governance": "Управление",
  "financial": "Финансы",
  "members": "Участники",
  "reportAnIssue": "Сообщить о проблеме",
  "leaveFeedback": "Оставить отзыв",
  "termsAndConditions": "Пользовательское соглашение",
  "releaseNotes": "Заметки о релизе",
  "testnetEnv": "Тестовое окружение",
  "filterByStatus": "Отфильтровать по статусу",
  "filterByProposalStatus": "Отфильтровать по статусу предложения",
  "numberOfVotes": "Number of votes",
  "numberOfTransactions": "Number of transactions",
  "activity": "Activity",
  "noResultsFound": "No results found",
  "users": "Users",
  "archived": "Archived",
  "youFollowed": "You Followed",
  "confirmUnsubscribe": "Are you sure you want to unsubscribe from",
  "minimumSearchCharacters": "Please enter at least 3 characters to search",
  "searchBountyPlaceholder": "Search Bounty Name",
  "all": "All",
  "cancel": "Отмена",
  "save": "Сохранить",
  "delete": "Удалить",
  "selectedProposals": "Selected {{length}} proposals{{plural}}",
  "filterByProposer": "Filter by proposer",
  "noDataFound": "Ничего не найдено",
  "copyPageUrl": "Копировать URL страницы",
  "copiedSuccessfully": "Скопировано успешно",
  "view": "Показать",
  "edit": "Редактировать",
  "bountiesPage": {
    "successClaimBountyNotification": "Транзакции в блокчейне могут занимать некоторе время, пожалуйста, обновите страницу ДАО через несколько секунд."
  },

  "common": {
    "clickToUploadImage": "Нажмите сюда чтобы загрузить изображение",
    "clickToChangeImage": "Нажмите сюда чтобы изменить изображение"
  },

  "chart": {
    "month": "1М",
    "threeMonths": "3М",
    "sixMonths": "6М",
    "year": "1Г",
    "all": "Всё",
    "daily": "По дням",
    "weekly": "Понедельно",
    "monthly": "Помесячно"
  },

  "notifications": {
    "transactionDelay": "Транзакции в блокчейне могут занимать некоторе время, пожалуйста, обновите страницу ДАО через несколько секунд."
  },

  "components": {
    "appFooter": {
      "askQuestion": "Задайте вопрос",
      "reportAnIssue": "Сообщить о проблеме",
      "githubRepo": " Github репозиторий",
      "opensourceAsIs": "SputnikDAO 2021. Данное ПО с открытым исходным кодом предоставляется “как есть”, без каких-либо гарантий.",
      "communityDeveloped": "Разработано свободным сообществом. Аудит не проводился. Используйсте это ПО на свой собственный страх и риск."
    },

    "daoDetails": {
      "proposalTrackerCard": {
        "active": "активное",
        "activePlural": "активных",
        "proposal": "предложение",
        "proposals": "предложений",
        "proposalsInTotal": "предложений всего",
        "createProposal": "Создать предложение"
      }
    },

    "daoDetailsPreview": {
      "daoFunds": "Фонд ДАО",
      "daoMembersAndGroups": "Участники/Группы"
    },

    "transactionDetailsWidget": {
      "warning": "Внимание",
      "gas": "Газ",
      "bond": "Залог"
    }
  },

  "comments": {
    "sendButton": "Послать",
    "noComments": "Комментариев еще нет",
    "startTyping": "Напишите что-то...",

    "youReportedThisMessage": "You have reported this message",
    "thisMessageWasReported": "This message was reported",
    "commentsSpamProtection": "Due to spam protection no more than 5 messages per minute are allowed."
  },
  "manageGroups": {
    "groupIncorrectCharactersError": "Некорректное название группы - вы можете использовать английские буквы и цифры вместе с тире и пробелами внутри.",
    "preventDeleteLastGroupWithMembers": "Нельзя удалить единственную группу с учасниками"
  },
  "createDAO": {
    "createNewDAO": "Создать новое ДАО",
    "createNewDAOWay": "ДАО - это новый способ организации людей и их работы",

    "daoIncorrectLengthError": "Некорректное название ДАО - не менее 3-х символов.",
    "daoIncorrectCharactersError": "Некорректное название ДАО - вы можете использовать английские буквы и цифры вместе с тире и пробелами внутри.",
    "daoIncorrectURLError": "Введите корректный URL!",

    "daoNameForm": {
      "daoNameAndPurpose": "Название и назначение ДАО",
      "daoFieldsDescription": "Все нижепреведенные поля обязательны для заполнения, если не указанно иное.",
      "daoName": "Название ДАО",
      "daoSampleName": "Sample DAO Name",
      "daoPurpose": "Назначение",
      "daoSampleText": "Образец текста. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient."
    },

    "daoLegalStatus": {
      "daoKYC": "Правовой статус",
      "daoKYCDescription": "Пожалуйста, опишите правовой статус и юрисдикцию вашего ДАО (если известно).",
      "daoKYCDescriptionPlaceholder": "Правовой статус",
      "daoKYCLink": "Пожалуйста, прикрепите ссылку на актуальный документ подтверждающий правовой статус.",
      "daoKYCLinkPlaceholder": "https://Legal_Document"
    },

    "daoLinksForm": {
      "daoLinks": "Ссылки и соцсети",
      "daoLinksDescription": "Хотите привлечь новых участников в ваш ДАО? Добавьте ресурсы, чтобы люди могли узнать больше о вашем ДАО."
    },

    "daoRulesForm": {
      "daoSetRules": "Установите правила для вашего ДАО",
      "daoSetRulesDescription": "Все нижепреведенные поля обязательны для заполнения, если не указанно иное.",
      "daoSetRulesChooseATemplate": "Выберите шаблон",

      "daoRulesTemplate": {
        "daoRulesTemplateCustom": "Индивидуальный",
        "daoRulesTemplateClub": "Клуб",
        "daoRulesTemplateClubDescription": "Узкий круг друзей\nГруппа поклонников\nСоциальный кружок",
        "daoRulesTemplateFoundation": "Учреждение",
        "daoRulesTemplateFoundationDescription": "Группа распределяющая дотации\nОрганизация, финансирующая общественные проекты\nФонд проектов с открытым исходным кодом",
        "daoRulesTemplateCorporation": "Corporation",
        "daoRulesTemplateCorporationDescription": "Акционерное общество\nСтартап или компания",
        "daoRulesTemplateCooperative": "Кооператив",
        "daoRulesTemplateCooperativeDescription": "Совладельческая компания\nКоллективное предприятие"
      },

      "daoRules": {
        "daoRulesAll": "Все",
        "daoRulesAllDescription": "Любой владелец NEAR-кошелька.",
        "daoRulesMembers": "Участники",
        "daoRulesMembersDescription": "Только члены вашего ДАО",
        "daoRulesDemocratic": "Демократический",
        "daoRulesDemocraticDescription": "Каждый член имеет 1 голос.",
        "daoRulesTokenWeighted": "Токен зависимое",
        "daoRulesTokenWeightedDescription": "Чем больше токенов, тем больше вес голоса!",
        "daoRulesFlat": "Горизонтальная",
        "daoRulesFlatDescription": "Никакой иерархии; Все участники имеют равный доступ.",
        "daoRulesGroups": "Группы и комитеты",
        "daoRulesGroupsDescription": "Определенные группы могут голосовать по специфическим предложениям."
      },

      "daoRulesSections": {
        "daoRulesProposals": "Предложения",
        "daoRulesProposalsDescription": "Кто может делать заявки на предложения в вашем ДАО (заявка не есть голос)?",
        "daoRulesVoting": "Право голоса",
        "daoRulesVotingDescription": "Выбирайте с осторожностью, чтобы не дать людям у кого больше токенов перехватить контроль над вашим ДАО!",
        "daoRulesStructure": "Структура",
        "daoRulesStructureDescription": "Выберите уровень доступа к голосованиям по предложениям."
      }
    },

    "daoFlagForm": {
      "daoFlagCreate": "Давайте создадим ваш флаг!",
      "daoFlagCreateDescription": "Оба поля необязательны. Изображение по умолчанию будет использовано если вы пропустите этот шаг. Комбинация изображения и логотипа будет флагом вашего ДАО!",
      "daoFlagCoverUpload": "Загрузите вашу “Обложку”",
      "daoFlagCoverUploadDescription": "Обложка будет использоваться как фирменный бланк в ваших предложениях, также, в маленькой иконке вашего флага не будет логотипа.",
      "daoFlagCoverUploadRequirements": "Прямоугольное изображение с пропорциями 3x4",
      "daoFlagLogoUpload": "Загрузите ваш “Логотип”",
      "daoFlagLogoUploadDescription": "Логотип будет изображен вверху вашего флага и будет отображаться на странице вашего ДАО.",
      "daoFlagLogoUploadRequirements": "Квадратное изображение, 400x400 пикселей"
    },

    "daoPreviewForm": {
      "daoPreviewHeader": "Предварительный просмотр вашего ДАО",
      "daoPreviewFlagAndIcon": "Флаг и иконка",
      "daoPreviewLetterhead": "Фирменный бланк"
    },

    "daoPreviewFutureForm": {
      "daoPreviewFuture": "Предпросмотр вашего будущего ДАО",
      "daoMakeSureDescription": "Убедитесь, что все правильно и понятно, это то как пользователи будут воспринимать ваше ДАО на платформе!"
    },

    "daoSubmitForm": {
      "daoSubmitError": "Некорректно введенные данные. Пожалуйста, проверьте сообщения об ошибках на странице.",
      "daoSubmitLiability": "Создание вашего ДАО регулируется ",
      "daoTermsAndConditionsLink": "пользовательским соглашением",
      "daoCannotBeDeleted": "ДАО удалить невозможно!",
      "daoCreateButton": "Создать ДАО"
    }
  },

  "myDAOsPage": {
    "noDAOs": "У вас нет ДАО, но вы можете",
    "createDAOLink": "создать",
    "noDAOsEnd": "её",
    "myDAOs": "Мои ДАО",
    "createNewDAO": "Создать новое ДАО"
  },

  "daoDashboard": {
    "daoFunds": "Средства ДАО",
    "bounties": "Работа",
    "nfts": "NFT-токены",
    "activeProposals": "активных предложений",
    "proposalsInTotal": "предложений всего"
  },
  "daoDetailsCreateButton": {
    "draft": {
      "label": "Создать черновик предложения",
      "description": "для предварительного обсуждения"
    },
    "proposal": {
      "label": "Предложение",
      "description": "для общего голосования за решение"
    }
  },
  "daoDetailsMinimized": {
    "proposals": "Предложения",
    "funds": "Фонд",
    "members": "Участники",
    "settings": "Настройки",
    "nfts": "NFT-токены",
    "bounties": "Работа",
    "polls": "Опросы",
    "createProposal": "Создать предложение",
    "drafts": "Черновики"
  },

  "feed": {
    "filters": {
      "chooseAFilter": "Выберите фильтр",
      "all": "Все",
      "active": "Активные",
      "approved": "Согласовано",
      "failed": "Отклонено",
      "voteNeeded": "Непроголосованные"
    }
  },

  "allDAOsFilter": {
    "mostActive": "Самые активные",
    "newest": "Самые новые",
    "oldest": "Самые старые",
    "biggestFunds": "Наибольший фонд",
    "numberOfMembers": "Количество участников"
  },

  "loader": {
    "title": "Получение данных из контракта",
    "waitSomeTime": "Это может занять некоторое время"
  },

  "proposalCard": {
    "proposalID": "ID предложения:",
    "proposalType": "Тип предложения: ",
    "proposalOwner": "Инициатор",
    "proposalDescription": "Описание",

    "proposalAmount": "Количество",
    "proposalTarget": "Назначение",
    "proposalTargetPlaceholder": "Укажите целевой кошелёк",
    "bountyAvailableClaims": "Доступно заявок",
    "bountyDaysToComplete": "Дней до завершения",
    "newDAOName": "Новое имя ДАО",
    "newDAOPurpose": "Новое назначение",
    "newDAOLinks": "Новые ссылки ДАО",
    "newDAOCover": "Новая обложка",
    "newDAOLogo": "Новый логотип",
    "newDAOLegalStatus": "Правовой статус ДАО",
    "newDAOLegalDoc": "Юридический документ",
    "newDAOLegalStatusHint": "ОАО",
    "newDAOLegalDocHint": "Ссылка",
    "daoGroup": "Группа",
    "whoVotes": "Кто голосует",
    "consensus": "Консенсус",
    "person": "Участник",

    "proposals": "Предложения",
    "proposalBonds": "Залог для создания предложения",
    "proposalBondExpirationTime": "Время до истечения срока",
    "proposalBounties": "Работа",
    "proposalClaimBounty": "Залог для истребования работы",
    "proposalBountyUnclaimTime": "Время для возврата залога при отказе от работы",

    "newGroupName": "Имя новой группы",
    "initialMemberName": "Имя первого участника",
    "group": "Группа",
    "chooseGroup": "Выберите группу",

    "smartContractAddress": "Адрес смарт-контракта",
    "methodName": "Имя метода",
    "json": "JSON",
    "deposit": "Депозит",

    "preview": "Предпросмотр",

    "proposalTypes": {
      "groupTransferAddBounty": "Трансфер/Работа",
      "proposeTransfer": "Предложить трансфер",
      "proposeBounty": "Предложить работу по найму",

      "groupChangeConfig": "Изменение конфигурации",
      "proposeDAOName": "Предложить изменение имени ДАО",
      "proposeDAOPurpose": "Предложить изменение назначения ДАО",
      "proposeDAOLinks": "Предложить изменение ссылок ДАО",
      "proposeDAOFlagAndLogo": "Предложить изменение флага и лого ДАО",
      "proposeLegalStatusAndDoc": "Предложить изменение правового статуса и документов ДАО",

      "groupChangePolicy": "Изменение политики",
      "proposeChangePolicy": "Предложить изменение политики голосования",
      "proposeBondsAndDeadlines": "Предложить изменение залога и сроков исполнения",
      "proposeGroup": "Предложить создание группы",

      "groupChangeMembers": "Изменение участников ДАО",
      "proposeAddMember": "Предложить добавление участника к группе",
      "proposeRemoveMember": "Предложить удаление участника из группы",

      "groupVote": "Голосование",
      "proposePoll": "Предложить опрос",

      "groupFunctionCall": "Вызов функций",
      "proposeCustomCall": "Вызов собственной функции"
    }
  },

  "settingsPage": {
    "daoPolicy": "Политика ДАО",
    "nameAndPurpose": "Название и назначение",
    "legalStatusAndDoc": "Правовой статус и документы",
    "links": "Ссылки",
    "flagAndLogo": "Флаг и логотип",
    "groupNames": "Имена групп",
    "proposalCreation": "Создание предложения",
    "votingPolicy": "Политика голосования",
    "votingPermissions": "Право голоса",
    "bondAndDeadlines": "Залог и дедлайн",
    "groups": "Группы",
    "members": "Участники",
    "daoRules": "Правила ДАО"
  },
  "discover": {
    "searchDaoName": "Поиск по названию ДАО",
    "daoActivity": "ДАО активность",
    "financial": "Финансы",
    "generalInfo": "Общая информация",
    "usersAndActivity": "Пользователи и активность",
    "governance": "Управление",
    "flow": "Поток",
    "tvl": "TVL",
    "tokens": "Токены",
    "activeDaos": "Активные ДАО",
    "daoName": "Название ДАО",
    "numberOfProposals": "Количество предложений",
    "lastMonth": "Последний месяц",
    "allUsersPerDao": "Всех пользователей по DAO",
    "activeUsers": "Активных пользователей",
    "allUsersOnAPlatform": "Всех пользователей на платформе",
    "usersMembersOfDao": "Пользователей - участников ДАО",
    "averageNumberOfUsersPerDao": "Среднее кол-во пользователей в ДАО",
    "numberOfInteractions": "Количество взаимодействий",
    "averageNumberOfInteractionsPerDao": "Среднее кол-во взаимодействий в ДАО",
    "users": "Пользователи",
    "members": "Участники",
    "voteThroughRate": "Рейтинговые голосования",
    "totalIn": "Суммарный доход",
    "totalOut": "Суммарный расход",
    "incomingTransactions": "Входящие транзакции",
    "outgoingTransactions": "Исходящие транзакции",
    "platformTvl": "TVL платформы",
    "vlInBountiesGrants": "VL в работах/грантах",
    "numberOfFts": "Количество FT",
    "vlOfFts": "VL в FT",
    "numberOfNfts": "Количество NFT",
    "numberOfBounties": "Количество работ",
    "vlOfBounties": "VL работ",
    "activity": "Активность",
    "avgGroupsDao": "Avg. Groups/DAO",
    "activeProposals": "Активные предложения",
    "activeVotes": "Активные голосования"
  },
  "proposalVotes": {
    "noGroup": "No longer in any group",
    "title": "Votes",
    "voices": "voices"
  },
  "validation": {
    "mustBeAValidNumber": "Должно быть корректным числом.",
    "required": "Необходимо заполнить",
    "methodNameInvalid": "Указано некорректное имя метода",
    "jsonNotValid": "Введенный JSON не является валидным"
  },
  "actions": {
    "libraryDesc": "Добавьте новый функционал и усильте свой рабочий процесс с помощью этих шаблонов",
    "searchByTemplate": "Поиск по названию шаблона",
    "sorting": "Сортировка",
    "name": "Название",
    "smartContractAddress": "Адрес смарт-контракта",
    "usedNumberDaos": "Использований в ДАО",
    "useInDao": "Использовать в ДАО",
    "copyToDao": "Копировать в DAO",
    "backToActionsLibrary": "Назад в библиотеку действий",
    "by": "автор:",
    "usedInDaos": "Использован в ДАО",
    "templateName": "Название шаблона",
    "methodName": "Название метода",
    "deposit": "Депозит",
    "tGas": "ТГаз",
    "saveTemplate": "Сохранить шаблон",
    "chooseDao": "Выберите ДАО",
    "templateSavedSuccessfully": "Шаблон предложения успешно сохранён",
    "saveWarning": "Только councils могут сохранять шаблоны в свои ДАО",
    "addTemplateName": "Укажите имя",
    "templateNamePlaceholder": "Имя шаблона",
    "addTemplateDescription": "Добавьте описание",
    "templateDescriptionPlaceholder": "Описание шаблона"
  },
  "drafts": {
    "breadcrumbs": {
      "createDraft": "Создать черновик",
      "editDraft": "Редактировать черновик"
    },
    "feed": {
      "headTitle": "Черновики",
      "title": "Черновики",
      "unreadDrafts": "Непрочитанные черновики",
      "allDrafts": "Все черновики",
      "noDrafts": {
        "title": "Нет черновиков",
        "createDraftButton": "Создать черновик"
      },
      "filters": {
        "title": "Фильтры",
        "sort": {
          "title": "Сортивка"
        },
        "category": {
          "title": "Категории",
          "all": "Все"
        },
        "view": {
          "title": "Тип",
          "all": "Все",
          "unread": "Прочитанные",
          "saved": "Сохраненные"
        },
        "state": {
          "title": "Состояние",
          "all": "Все",
          "onDiscussionStatus": "В обсуждении",
          "convertedToProposalStatus": "Преобразованые в предложение"
        }
      },
      "card": {
        "lastActivity": "Последняя активность",
        "justNow": "только что",
        "minutesAgo": "назад",
        "onDiscussionStatus": "В обсуждении",
        "convertedToProposalStatus": "Преобразовано в предложение",
        "linkToConvertedProposal": "Ссылка на преобразованное предложение"
      }
    },
    "editDraftPage": {
      "title": "Редактировать черновик",
      "comment": "Комментировать",
      "saveDraftTooltip": "Сохранить черновик",
      "convertToProposalButton": "Преобразовать в предложение",
      "editButton": "Редактировать",
      "deleteButton": "Удалить",
      "modalDeleteTitle": "Удалить черновик",
      "modalDeleteMessage": "Вы уверены, что хотите удалить выбранный черновик?"
    },
    "draftPage": {
      "title": "DAO черновик"
    },
    "createDraftPage": {
      "title": "Создание черновика",
      "headTitle": "Создать черновик",
      "saveButton": "Сохранить",
      "placeholder": "Опишите свой черновик...",
      "titlePlaceholder": "Добавить название черновика"
    },
    "comments": {
      "placeholder": "Написать комментарий...",
      "writeCommentButton": "Написать комментарий...",
      "oneReply": "Ответ",
      "replies": "Ответа",
      "comments": "комментария",
      "comment": "комментарий",
      "reply": "Ответить",
      "replyPlaceholder": "Ответ...",
      "edited": "Отредактировано",
      "editButton": "Редактировать",
      "deleteButton": "Удалить",
      "modalDeleteTitle": "Удалить комментарий",
      "modalDeleteMessage": "Вы уверены, что хотите удалить выбранный комментарий?"
    },
    "backToFeed": "Назад к списку черновиков",
    "editableContent": {
      "sendButton": "Отправить",
      "cancelButton": "Отмена"
    }
  }
}

'''
'''--- public/locales/ru/notificationsPage.json ---
{
  "settings": "Настройки",
  "notificationsHub": "Нотификации",
  "chooseAType": "Выберите тип",
  "noNotifications": "Нет нотификаций",
  "noNotificationsYet": "Пока нет нотификаций",
  "newNotifications": "Новые",
  "oldNotifications": "Старые",
  "all": "Все",
  "yourDaos": "Ваши ДАО",
  "platform": "Платформа",
  "muted": "Отключенные"
}

'''
'''--- public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none"
     xmlns="http://www.w3.org/2000/svg">
  <path
    d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z"
    fill="#000"/>
</svg>

'''
'''--- scripts/generateAssetsIndex.js ---
const path = require('path');
const fs = require('fs');
const camelCase = require('camelcase');
const iconsPath = path.resolve(__dirname, '..', 'assets', 'icons');

const getCamelCaseName = name => camelCase(name.split('.')[0]);

const getExportLine = fileName =>
  `export { default as ${getCamelCaseName(fileName)} } from './${fileName}';`;

const data = fs
  .readdirSync(iconsPath)
  .filter(file => file.endsWith('svg'))
  .map(getExportLine);

data.unshift('// This file wes generated by script');
data.push('');

fs.writeFileSync(path.resolve(iconsPath, 'index.ts'), data.join('\n'), {
  encoding: 'utf-8',
});

'''
'''--- services/ApiService/hooks/useAccountDaos.ts ---
import useSWR, { KeyedMutator } from 'swr';
import axios from 'axios';

import { appConfig } from 'config';
import { DaoIndex, OpenSearchResponse } from 'services/SearchService/types';
import { DaoFeedItem } from 'types/dao';
import { useWalletContext } from 'context/WalletContext';
import { mapDaoIndexToDaoFeedItem } from 'services/SearchService/mappers/search';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { buildAccountDaosQuery } from 'services/SearchService/builders/daos';

/* eslint-disable no-underscore-dangle */
export async function fetcher(
  url: string,
  accountId: string,
  includeSubscribed?: boolean
): Promise<DaoFeedItem[] | undefined> {
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post<unknown, { data: OpenSearchResponse }>(
    `${baseUrl}/dao/_search?size=200&from=0`,
    {
      query: buildAccountDaosQuery(accountId, includeSubscribed),
      sort: [
        {
          createTimestamp: {
            order: 'DESC',
          },
        },
      ],
    }
  );

  return response?.data?.hits?.hits?.map(item => {
    return mapDaoIndexToDaoFeedItem(item._source as DaoIndex, accountId);
  });
}

export function useAccountDaos(includeSubscribed?: boolean): {
  data: DaoFeedItem[] | undefined;
  isLoading: boolean;
  isError: boolean;
  mutate: KeyedMutator<DaoFeedItem[] | undefined>;
} {
  const { useOpenSearchDataApi } = useFlags();
  const { accountId } = useWalletContext();

  const { data, error, mutate, isValidating } = useSWR(
    useOpenSearchDataApi
      ? ['accountDaos', accountId, includeSubscribed ?? false]
      : undefined,
    fetcher,
    {
      revalidateOnFocus: false,
      dedupingInterval: 15000,
    }
  );

  return {
    data,
    mutate,
    isLoading: !data && isValidating,
    isError: !!error,
  };
}

'''
'''--- services/ApiService/hooks/useAvailableActionsProposals.ts ---
import axios from 'axios';
import useSWR from 'swr';
import { appConfig } from 'config';
import { ProposalsFeedStatuses } from 'types/proposal';
import { buildProposalsQuery } from 'services/SearchService/builders/proposals';
import { useWalletContext } from 'context/WalletContext';
import { useFlags } from 'launchdarkly-react-client-sdk';

const PROPOSALS_DEDUPING_INTERVAL = 10000;

/* eslint-disable no-underscore-dangle */
export async function fetcher(url: string, accountId: string): Promise<number> {
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post(`${baseUrl}/proposal/_search`, {
    query: buildProposalsQuery(
      {
        status: ProposalsFeedStatuses.VoteNeeded,
      },
      accountId
    ),
    size: 0,
    track_total_hits: true,
  });

  return response?.data?.hits?.total?.value ?? 0;
}

export function useAvailableActionsProposals(): number {
  const { useOpenSearchDataApi } = useFlags();
  const { accountId } = useWalletContext();

  const { data } = useSWR(
    useOpenSearchDataApi ? ['availableActionsProposals', accountId] : undefined,
    fetcher,
    {
      revalidateOnFocus: false,
      refreshInterval: 30000,
      dedupingInterval: PROPOSALS_DEDUPING_INTERVAL,
    }
  );

  return data ?? 0;
}

'''
'''--- services/ApiService/hooks/useBounties.ts ---
import useSWRInfinite, { SWRInfiniteResponse } from 'swr/infinite';
import useSWR, { SWRResponse } from 'swr';
import axios from 'axios';
import { useRouter } from 'next/router';

import { mapOpenSearchResponseToSearchResult } from 'services/SearchService/mappers/search';
import { SearchResponseIndex } from 'services/SearchService/types';
import { buildBountiesQuery } from 'services/SearchService/builders/bounties';
import { LIST_LIMIT_DEFAULT } from 'services/sputnik/constants';

import { appConfig } from 'config';

import { useWalletContext } from 'context/WalletContext';

import { PaginationResponse } from 'types/api';
import { BountyContext } from 'types/bounties';

const DEDUPING_INTERVAL = 10000;

export async function fetcher(
  url: string,
  daoId: string,
  bountySort: string,
  bountyFilter: string,
  bountyPhase: string,
  accountId: string,
  limit: number,
  offset: number
): Promise<PaginationResponse<BountyContext[]>> {
  const sort = bountySort ?? 'createTimestamp,DESC';
  const sortOptions = sort.split(',');
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post(
    `${baseUrl}/bounty/_search?size=${limit}&from=${offset}`,
    {
      query: buildBountiesQuery({
        daoId,
        account: accountId,
        bountyFilter,
        bountyPhase,
      }),
      sort: [
        {
          [sortOptions[0]]: {
            order: sortOptions[1].toLowerCase(),
          },
        },
      ],
    }
  );

  const mappedData = mapOpenSearchResponseToSearchResult(
    'bounties',
    SearchResponseIndex.BOUNTY,
    response.data
  );

  return {
    data: mappedData.data as BountyContext[],
    total: mappedData.total,
  };
}

export function useBountiesInfinite(): SWRInfiniteResponse<
  PaginationResponse<BountyContext[]>
> {
  const { accountId } = useWalletContext();
  const { query } = useRouter();
  const { dao, bountySort, bountyFilter, bountyPhase } = query;

  const limit = LIST_LIMIT_DEFAULT;

  return useSWRInfinite(
    index => {
      const offset = index * limit;

      return [
        'bounties',
        dao,
        bountySort,
        bountyFilter,
        bountyPhase,
        accountId,
        limit,
        offset,
      ];
    },
    fetcher,
    {
      revalidateOnFocus: false,
      dedupingInterval: DEDUPING_INTERVAL,
    }
  );
}

export function useBounties(
  page: number
): SWRResponse<PaginationResponse<BountyContext[]>> {
  const { accountId } = useWalletContext();
  const { query } = useRouter();
  const { dao, bountySort, bountyFilter, bountyPhase } = query;

  const limit = LIST_LIMIT_DEFAULT;

  return useSWR(
    [
      'bounties',
      dao,
      bountySort,
      bountyFilter,
      bountyPhase,
      accountId,
      limit,
      page * limit,
    ],
    fetcher,
    {
      revalidateOnFocus: false,
      dedupingInterval: DEDUPING_INTERVAL,
    }
  );
}

'''
'''--- services/ApiService/hooks/useBounty.ts ---
import { useRouter } from 'next/router';
import useSWR from 'swr';
import axios from 'axios';

import { appConfig } from 'config';
import { BountyIndex, OpenSearchResponse } from 'services/SearchService/types';
import { BountyContext } from 'types/bounties';
import { mapBountyIndexToBountyContext } from 'services/SearchService/mappers/bounty';

/* eslint-disable no-underscore-dangle */
export async function fetcher(
  url: string,
  bountyId: string
): Promise<BountyContext | undefined> {
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post<unknown, { data: OpenSearchResponse }>(
    `${baseUrl}/bounty/_search?size=1&from=0`,
    {
      query: {
        bool: {
          must: [
            {
              simple_query_string: {
                query: `"${bountyId}"`,
                fields: ['id'],
              },
            },
          ] as Record<string, unknown>[],
        },
      },
    }
  );

  const rawData = response?.data?.hits?.hits[0]?._source;

  return rawData
    ? mapBountyIndexToBountyContext(rawData as BountyIndex)
    : undefined;
}

export function useBounty(): {
  data: BountyContext | undefined;
  isLoading: boolean;
  isError: boolean;
} {
  const router = useRouter();
  const { query } = router;

  const bountyId = query.bounty ?? '';

  const { data, error } = useSWR(['bounty', bountyId], fetcher, {
    revalidateOnFocus: false,
    dedupingInterval: 5000,
  });

  return {
    data,
    isLoading: !data,
    isError: !!error,
  };
}

'''
'''--- services/ApiService/hooks/useDao.ts ---
import { useRouter } from 'next/router';
import useSWR, { KeyedMutator } from 'swr';
import axios from 'axios';

import { appConfig } from 'config';
import { DaoIndex, OpenSearchResponse } from 'services/SearchService/types';
import { DAO } from 'types/dao';
import { buildDaoQuery } from 'services/SearchService/builders/dao';
import { mapDaoIndexToDao } from 'services/SearchService/mappers/dao';
import { useFlags } from 'launchdarkly-react-client-sdk';

/* eslint-disable no-underscore-dangle */
export async function fetcher(
  url: string,
  daoId: string
): Promise<DAO | undefined> {
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post<unknown, { data: OpenSearchResponse }>(
    `${baseUrl}/dao/_search?size=1&from=0`,
    {
      query: buildDaoQuery(daoId),
    }
  );

  const rawData = response?.data?.hits?.hits[0]?._source;

  return rawData ? mapDaoIndexToDao(rawData as DaoIndex) : undefined;
}

export function useDao(daoId?: string): {
  dao: DAO | undefined;
  isLoading: boolean;
  isError: boolean;
  mutate: KeyedMutator<DAO | undefined>;
} {
  const { useOpenSearchDataApi } = useFlags();
  const router = useRouter();
  const { query } = router;

  const dao = daoId ?? query.dao ?? '';

  const { data, error, mutate } = useSWR(
    useOpenSearchDataApi ? ['dao', dao] : undefined,
    fetcher,
    {
      revalidateOnFocus: false,
      // revalidateOnMount: false,
      dedupingInterval: 5000,
    }
  );

  return {
    dao: data,
    isLoading: !data,
    isError: !!error,
    mutate,
  };
}

'''
'''--- services/ApiService/hooks/useDaoContext.ts ---
import { DAO, DaoDelegation } from 'types/dao';
import {
  fetcher as getPolicyAffectsProposals,
  usePolicyAffectsProposals,
} from 'services/ApiService/hooks/usePolicyAffectsProposals';
import {
  getAllowedProposalsToCreate,
  getAllowedProposalsToVote,
} from 'astro_2.0/features/CreateProposal/createProposalHelpers';
import { ProposalFeedItem, ProposalType } from 'types/proposal';
import { useWalletContext } from 'context/WalletContext';
import { DaoContext } from 'types/context';

import { fetcher as getDao, useDao } from './useDao';

export async function fetcher(
  daoId: string
): Promise<
  [
    dao: DAO | undefined,
    policyAffectsProposals: ProposalFeedItem[],
    delegations: DaoDelegation[]
  ]
> {
  const [dao, policyAffectsProposals] = await Promise.all([
    getDao('dao', daoId),
    getPolicyAffectsProposals('proposals', daoId),
  ]);

  return [dao, policyAffectsProposals, dao?.delegations ?? []];
}

export function useDaoContext(daoId?: string): DaoContext | undefined {
  const { accountId } = useWalletContext();
  const { dao } = useDao(daoId);
  const { data: policyAffectsProposals } = usePolicyAffectsProposals();
  const delegations = dao?.delegations as DaoDelegation[];

  if (!dao) {
    return undefined;
  }

  let userHasDelegatedTokens = false;
  const userDelegation = delegations.find(item => item.accountId === accountId);
  const holdersRole = dao.policy.roles.find(
    role => role.kind === 'Member' && role.name === 'TokenHolders'
  );

  if (
    userDelegation &&
    holdersRole &&
    Number(userDelegation.balance) > Number(holdersRole.balance)
  ) {
    userHasDelegatedTokens = true;
  }

  const allowedProposalsToCreate = getAllowedProposalsToCreate(
    accountId,
    dao,
    userHasDelegatedTokens
  );
  const isCanCreateProposals = !!Object.values(allowedProposalsToCreate).find(
    value => value
  );

  return {
    dao,
    userPermissions: {
      isCanCreateProposals,
      allowedProposalsToCreate,
      allowedProposalsToVote: getAllowedProposalsToVote(accountId, dao),
      isCanCreatePolicyProposals:
        allowedProposalsToCreate[ProposalType.ChangePolicy] &&
        !policyAffectsProposals?.length,
    },
    policyAffectsProposals: policyAffectsProposals || [],
  };
}

'''
'''--- services/ApiService/hooks/useDaoNfts.ts ---
import useSWRInfinite, { SWRInfiniteResponse } from 'swr/infinite';
import useSWR from 'swr';
import axios from 'axios';
import { mapOpenSearchResponseToSearchResult } from 'services/SearchService/mappers/search';
import { SearchResponseIndex } from 'services/SearchService/types';
import { useRouter } from 'next/router';
import { appConfig } from 'config';
import { LIST_LIMIT_DEFAULT } from 'services/sputnik/constants';
import { PaginationResponse } from 'types/api';
import { NftToken } from 'types/token';
import { buildNftsQuery } from 'services/SearchService/builders/nfts';
import { useFlags } from 'launchdarkly-react-client-sdk';

export async function fetcher(
  url: string,
  daoId: string,
  offset: number,
  limit: number
): Promise<PaginationResponse<NftToken[]>> {
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post(
    `${baseUrl}/nft/_search?size=${limit}&from=${offset}`,
    {
      query: buildNftsQuery(daoId),
    }
  );

  const mappedData = mapOpenSearchResponseToSearchResult(
    'nfts',
    SearchResponseIndex.NFT,
    response.data
  );

  return {
    data: mappedData.data as NftToken[],
    total: mappedData.total,
  };
}

export function useDaoNfts(): { data: NftToken[] | undefined } {
  const { useOpenSearchDataApi } = useFlags();
  const router = useRouter();
  const { query } = router;

  const daoId = query.dao ?? '';

  const { data } = useSWR(
    useOpenSearchDataApi ? ['nfts', daoId, 0, 300] : undefined,
    fetcher,
    {
      revalidateOnFocus: false,
      dedupingInterval: 60000,
    }
  );

  return { data: data?.data };
}

export function useDaoNftsInfinite(): SWRInfiniteResponse<{
  data: NftToken[];
  total: number;
}> {
  const router = useRouter();
  const { query } = router;

  const limit = LIST_LIMIT_DEFAULT;
  const daoId = query.dao ?? '';

  return useSWRInfinite(
    index => {
      const offset = index * limit;

      return ['nfts', daoId, offset, limit];
    },
    fetcher,
    {
      revalidateOnFocus: false,
      dedupingInterval: 60000,
    }
  );
}

'''
'''--- services/ApiService/hooks/useDaos.ts ---
import useSWRInfinite, { SWRInfiniteResponse } from 'swr/infinite';
import { useRouter } from 'next/router';
import axios from 'axios';

import { appConfig } from 'config';
import { SearchResponseIndex } from 'services/SearchService/types';

import { DaoFeedItem } from 'types/dao';
import { PaginationResponse } from 'types/api';

import { mapOpenSearchResponseToSearchResult } from 'services/SearchService/mappers/search';

import { LIST_LIMIT_DEFAULT } from 'services/sputnik/constants';

/* eslint-disable no-underscore-dangle */
export async function fetcher(
  url: string,
  daosView = 'active',
  limit: number,
  offset: number,
  sort = 'createTimestamp,DESC'
): Promise<PaginationResponse<DaoFeedItem[]>> {
  const sortOptions = sort.split(',');
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post(
    `${baseUrl}/dao/_search?size=${limit}&from=${offset}`,
    {
      query:
        daosView === 'active'
          ? {
              simple_query_string: {
                query: 'Active',
                fields: ['status'],
              },
            }
          : { match_all: {} },
      sort: [
        {
          [sortOptions[0]]: {
            order: sortOptions[1].toLowerCase(),
          },
        },
      ],
    }
  );

  const mappedData = mapOpenSearchResponseToSearchResult(
    'daos',
    SearchResponseIndex.DAO,
    response.data
  );

  return {
    data: mappedData.data as DaoFeedItem[],
    total: mappedData.total,
  };
}

export function useDaosInfinite(): SWRInfiniteResponse<
  PaginationResponse<DaoFeedItem[]>
> {
  const { query } = useRouter();
  const limit = LIST_LIMIT_DEFAULT;
  const daosView = query.daosView ?? '';

  return useSWRInfinite(
    index => {
      const offset = index * limit;

      return ['daos', daosView, limit, offset, query.sort];
    },
    fetcher,
    {
      revalidateOnFocus: false,
      dedupingInterval: 15000,
    }
  );
}

'''
'''--- services/ApiService/hooks/useDraft.ts ---
import useSWR, { KeyedMutator } from 'swr';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { useRouter } from 'next/router';

import { DraftProposal } from 'types/draftProposal';
import { appConfig } from 'config';
import axios from 'axios';
import {
  DraftProposalIndex,
  OpenSearchResponse,
} from 'services/SearchService/types';
import { buildDraftQuery } from 'services/SearchService/builders/draft';
import { mapDraftProposalIndexToDraftProposal } from 'services/SearchService/mappers/draft';
import { useWalletContext } from 'context/WalletContext';

/* eslint-disable no-underscore-dangle */
export async function fetcher(
  url: string,
  daoId: string,
  draftId: string,
  accountId?: string
): Promise<DraftProposal | undefined> {
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post<unknown, { data: OpenSearchResponse }>(
    `${baseUrl}/draftproposal/_search?size=1&from=0`,
    {
      query: buildDraftQuery({
        daoId,
        draftId,
      }),
    }
  );

  const rawData = response?.data?.hits?.hits[0]?._source;

  return mapDraftProposalIndexToDraftProposal(
    rawData as DraftProposalIndex,
    accountId
  );
}

export function useDraft(): {
  data: DraftProposal | undefined;
  isLoading: boolean;
  isError: boolean;
  mutate: KeyedMutator<DraftProposal | undefined>;
} {
  const { accountId } = useWalletContext();
  const { useOpenSearchDataApi } = useFlags();
  const router = useRouter();
  const { query } = router;

  const daoId = query.dao ?? '';
  const draftId = query.draft ?? '';

  const { data, error, mutate } = useSWR(
    useOpenSearchDataApi ? ['draft', daoId, draftId, accountId] : undefined,
    fetcher,
    {
      revalidateOnFocus: false,
      dedupingInterval: 5000,
    }
  );

  return {
    data,
    isLoading: !data,
    isError: !!error,
    mutate,
  };
}

'''
'''--- services/ApiService/hooks/useDraftComments.ts ---
import useSWR from 'swr';
import axios from 'axios';
import { useRouter } from 'next/router';
import { appConfig } from 'config';

import { DraftComment } from 'services/DraftsService/types';
import { SearchResponseIndex } from 'services/SearchService/types';

import { mapOpenSearchResponseToSearchResult } from 'services/SearchService/mappers/search';

import { buildDraftProposalCommentsQuery } from 'services/SearchService/builders/draftProposalComments';

export async function fetcher(
  url: string,
  daoId: string,
  draftId: string
): Promise<DraftComment[]> {
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post(
    `${baseUrl}/draftproposalcomment/_search?size=1000&from=0`,
    {
      query: buildDraftProposalCommentsQuery({
        daoId,
        draftId,
      }),
      sort: [
        {
          createTimestamp: {
            order: 'desc',
          },
        },
      ],
    }
  );

  const mappedData = mapOpenSearchResponseToSearchResult(
    'draftProposalComment',
    SearchResponseIndex.DRAFT_PROPOSAL_COMMENT,
    response.data
  );

  return mappedData.data as DraftComment[];
}

export function useDraftProposalComments(): {
  data: DraftComment[];
} {
  const router = useRouter();
  const { query } = router;

  const daoId = query.dao ?? '';
  const draftId = query.draft ?? '';

  const { data } = useSWR(['draftProposalComment', daoId, draftId], fetcher, {
    revalidateOnFocus: false,
  });

  return { data: data ?? [] };
}

'''
'''--- services/ApiService/hooks/useDraftProposals.ts ---
import useSWRInfinite, { SWRInfiniteResponse } from 'swr/infinite';
import axios from 'axios';
import { useRouter } from 'next/router';
import { appConfig } from 'config';

import { ProposalCategories } from 'types/proposal';
import { PaginationResponse } from 'types/api';
import { DraftProposalFeedItem } from 'types/draftProposal';
import { DraftState } from 'services/DraftsService/types';

import { buildDraftProposalsQuery } from 'services/SearchService/builders/draftProposals';
import { mapOpenSearchResponseToSearchResult } from 'services/SearchService/mappers/search';
import { SearchResponseIndex } from 'services/SearchService/types';
import { LIST_LIMIT_DEFAULT } from 'services/sputnik/constants';

const PROPOSALS_DEDUPING_INTERVAL = 10000;

export async function fetcher(
  url: string,
  daoId: string,
  state: string,
  category: string,
  offset: string,
  limit: string,
  accountId: string,
  sort: string,
  view: string,
  search: string
): Promise<PaginationResponse<DraftProposalFeedItem[]>> {
  const sortOptions = sort.split(',');
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post(
    `${baseUrl}/draftproposal/_search?size=${limit}&from=${offset}`,
    {
      query: buildDraftProposalsQuery(
        {
          category: category as ProposalCategories,
          daoId,
          state: state as DraftState,
          view,
          search,
        },
        accountId
      ),
      // todo - waiting until this will be implemented in lambda
      sort: [
        {
          [sortOptions[0]]: {
            order: sortOptions[1].toLowerCase(),
          },
        },
      ],
    }
  );

  const mappedData = mapOpenSearchResponseToSearchResult(
    'draftProposal',
    SearchResponseIndex.DRAFT_PROPOSAL,
    response.data
  );

  return {
    data: mappedData.data as DraftProposalFeedItem[],
    total: mappedData.total,
  };
}

export function useDraftProposalsInfinite(): SWRInfiniteResponse<{
  data: DraftProposalFeedItem[];
  total: number;
}> {
  const router = useRouter();
  const { query } = router;

  const accountId = '';

  const limit = LIST_LIMIT_DEFAULT;
  const state = query.state ?? '';
  const category = query.category ?? '';
  const daoId = query.dao ?? '';
  const sort = query.sort ?? 'createTimestamp,DESC';
  const search = query.search ?? '';
  const view = query.view ?? '';

  return useSWRInfinite(
    index => {
      const offset = index * limit;

      return [
        'draftProposals',
        daoId,
        state,
        category,
        offset,
        limit,
        accountId,
        sort,
        view,
        search,
      ];
    },
    fetcher,
    {
      revalidateOnFocus: false,
      dedupingInterval: PROPOSALS_DEDUPING_INTERVAL,
    }
  );
}

'''
'''--- services/ApiService/hooks/useJoiningDaoProposals.ts ---
import axios from 'axios';
import { ProposalCategories, ProposalsFeedStatuses } from 'types/proposal';
import { buildProposalsQuery } from 'services/SearchService/builders/proposals';
import { useRouter } from 'next/router';
import { appConfig } from 'config';
import useSWR from 'swr';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { useWalletContext } from 'context/WalletContext';

const PROPOSALS_DEDUPING_INTERVAL = 10000;

export async function fetcher(
  url: string,
  daoId: string,
  accountId: string
): Promise<number> {
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post(`${baseUrl}/proposal/_search`, {
    query: buildProposalsQuery({
      category: ProposalCategories.Members,
      daoId,
      status: ProposalsFeedStatuses.Active,
      proposers: accountId,
    }),
    size: 0,
    track_total_hits: true,
  });

  return response?.data?.hits?.total?.value ?? 0;
}

export function useJoiningDaoProposals(): boolean {
  const { useOpenSearchDataApi } = useFlags();
  const { accountId } = useWalletContext();
  const router = useRouter();
  const { query } = router;

  const daoId = query.dao ?? '';

  const { data } = useSWR(
    useOpenSearchDataApi
      ? ['joiningDaoProposals', daoId, accountId]
      : undefined,
    fetcher,
    {
      revalidateOnFocus: false,
      dedupingInterval: PROPOSALS_DEDUPING_INTERVAL,
    }
  );

  return data !== undefined ? data > 0 : false;
}

'''
'''--- services/ApiService/hooks/usePolicyAffectsProposals.ts ---
import axios from 'axios';
import {
  ProposalFeedItem,
  ProposalCategories,
  ProposalsFeedStatuses,
} from 'types/proposal';
import { buildProposalsQuery } from 'services/SearchService/builders/proposals';
import { mapOpenSearchResponseToSearchResult } from 'services/SearchService/mappers/search';
import { SearchResponseIndex } from 'services/SearchService/types';
import { useRouter } from 'next/router';
import { appConfig } from 'config';
import useSWR from 'swr';
import { useFlags } from 'launchdarkly-react-client-sdk';

const PROPOSALS_DEDUPING_INTERVAL = 10000;

export async function fetcher(
  url: string,
  daoId: string
): Promise<ProposalFeedItem[]> {
  const sort = 'createTimestamp,DESC';
  const sortOptions = sort.split(',');
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post(
    `${baseUrl}/proposal/_search?size=${50}&from=${0}`,
    {
      query: buildProposalsQuery({
        category: ProposalCategories.Governance,
        daoId,
        status: ProposalsFeedStatuses.Active,
      }),
      sort: [
        {
          [sortOptions[0]]: {
            order: sortOptions[1].toLowerCase(),
          },
        },
      ],
    }
  );

  const mappedData = mapOpenSearchResponseToSearchResult(
    'proposal',
    SearchResponseIndex.PROPOSAL,
    response.data
  );

  return mappedData.data as ProposalFeedItem[];
}

export function usePolicyAffectsProposals(): {
  data: ProposalFeedItem[] | undefined;
} {
  const { useOpenSearchDataApi } = useFlags();
  const router = useRouter();
  const { query } = router;

  const daoId = query.dao ?? '';

  const { data } = useSWR(
    useOpenSearchDataApi ? ['policyAffectsProposals', daoId] : undefined,
    fetcher,
    {
      revalidateOnFocus: false,
      dedupingInterval: PROPOSALS_DEDUPING_INTERVAL,
    }
  );

  return { data };
}

'''
'''--- services/ApiService/hooks/useProposal.ts ---
import { useRouter } from 'next/router';
import useSWR, { KeyedMutator } from 'swr';
import axios from 'axios';

import { buildProposalQuery } from 'services/SearchService/builders/proposal';

import { ProposalFeedItem } from 'types/proposal';

import { appConfig } from 'config';
import {
  OpenSearchResponse,
  ProposalIndex,
} from 'services/SearchService/types';
import { mapProposalIndexToProposalFeedItem } from 'services/SearchService/mappers/search';
import { useFlags } from 'launchdarkly-react-client-sdk';

/* eslint-disable no-underscore-dangle */
export async function fetcher(
  url: string,
  daoId: string,
  proposalId: string
): Promise<ProposalFeedItem | undefined> {
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post<unknown, { data: OpenSearchResponse }>(
    `${baseUrl}/proposal/_search?size=1&from=0`,
    {
      query: buildProposalQuery({
        daoId,
        proposalId,
      }),
    }
  );

  const rawData = response?.data?.hits?.hits[0]?._source;

  return rawData
    ? mapProposalIndexToProposalFeedItem(rawData as ProposalIndex)
    : undefined;
}

export function useProposal(): {
  proposal: ProposalFeedItem | undefined;
  isLoading: boolean;
  isError: boolean;
  mutate: KeyedMutator<ProposalFeedItem | undefined>;
} {
  const { useOpenSearchDataApi } = useFlags();
  const router = useRouter();
  const { query } = router;

  const daoId = query.dao ?? '';
  const proposalId = query.proposal ?? '';

  const { data, error, mutate } = useSWR(
    useOpenSearchDataApi ? ['proposal', daoId, proposalId] : undefined,
    fetcher,
    {
      revalidateOnFocus: false,
      revalidateOnMount: false,
      dedupingInterval: 5000,
    }
  );

  return {
    proposal: data,
    isLoading: !data,
    isError: !!error,
    mutate,
  };
}

'''
'''--- services/ApiService/hooks/useProposals.ts ---
import useSWRInfinite, { SWRInfiniteResponse } from 'swr/infinite';
import axios from 'axios';
import {
  ProposalFeedItem,
  ProposalCategories,
  ProposalsFeedStatuses,
} from 'types/proposal';
import { buildProposalsQuery } from 'services/SearchService/builders/proposals';
import { mapOpenSearchResponseToSearchResult } from 'services/SearchService/mappers/search';
import { SearchResponseIndex } from 'services/SearchService/types';
import { useRouter } from 'next/router';
import { appConfig } from 'config';
import { LIST_LIMIT_DEFAULT } from 'services/sputnik/constants';
import { useWalletContext } from 'context/WalletContext';
import { PaginationResponse } from 'types/api';

const PROPOSALS_DEDUPING_INTERVAL = 10000;

export async function fetcher(
  url: string,
  daoId: string,
  status: string,
  category: string,
  offset: number,
  limit: number,
  accountId?: string,
  proposer?: string
): Promise<PaginationResponse<ProposalFeedItem[]>> {
  const sort = 'createTimestamp,DESC';
  const sortOptions = sort.split(',');
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post(
    `${baseUrl}/proposal/_search?size=${limit}&from=${offset}`,
    {
      query: buildProposalsQuery(
        {
          category: category as ProposalCategories,
          daoId,
          status: status as ProposalsFeedStatuses,
          proposers: proposer as string,
        },
        accountId
      ),
      sort: [
        {
          [sortOptions[0]]: {
            order: sortOptions[1].toLowerCase(),
          },
        },
      ],
    }
  );

  const mappedData = mapOpenSearchResponseToSearchResult(
    'proposal',
    SearchResponseIndex.PROPOSAL,
    response.data
  );

  return {
    data: mappedData.data as ProposalFeedItem[],
    total: mappedData.total,
  };
}

type Props = {
  isMyFeed?: boolean;
  category?: ProposalCategories;
};

export function useProposalsInfinite(props?: Props): SWRInfiniteResponse<{
  data: ProposalFeedItem[];
  total: number;
}> {
  const { isMyFeed, category: initialCategory } = props ?? {};

  const router = useRouter();
  const { query } = router;

  const { accountId } = useWalletContext();

  const limit = LIST_LIMIT_DEFAULT;
  const status = query.status ?? '';
  const category = initialCategory ?? query.category ?? '';
  const daoId = query.dao ?? '';
  const proposer = query.proposer ?? '';

  return useSWRInfinite(
    index => {
      const offset = index * limit;

      return [
        'proposals',
        daoId,
        status,
        category,
        offset,
        limit,
        isMyFeed ? accountId : undefined,
        proposer,
      ];
    },
    fetcher,
    {
      revalidateOnFocus: false,
      dedupingInterval: PROPOSALS_DEDUPING_INTERVAL,
      // revalidateFirstPage: false,
    }
  );
}

'''
'''--- services/ApiService/hooks/useSubscribedDaos.ts ---
import useSWR, { KeyedMutator } from 'swr';
import axios from 'axios';

import { appConfig } from 'config';
import { DaoIndex, OpenSearchResponse } from 'services/SearchService/types';
import { DaoFeedItem } from 'types/dao';
import { useWalletContext } from 'context/WalletContext';
import { mapDaoIndexToDaoFeedItem } from 'services/SearchService/mappers/search';
import { useFlags } from 'launchdarkly-react-client-sdk';

/* eslint-disable no-underscore-dangle */
export async function fetcher(
  url: string,
  accountId: string
): Promise<DaoFeedItem[] | undefined> {
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post<unknown, { data: OpenSearchResponse }>(
    `${baseUrl}/dao/_search?size=200&from=0`,
    {
      query: {
        bool: {
          should: [
            {
              terms: {
                followers: [accountId],
              },
            },
          ],
        },
      },
      sort: [
        {
          createTimestamp: {
            order: 'DESC',
          },
        },
      ],
    }
  );

  return response?.data?.hits?.hits?.map(item => {
    return mapDaoIndexToDaoFeedItem(item._source as DaoIndex, accountId);
  });
}

export function useSubscribedDaos(): {
  data: DaoFeedItem[] | undefined;
  isLoading: boolean;
  isError: boolean;
  mutate: KeyedMutator<DaoFeedItem[] | undefined>;
} {
  const { useOpenSearchDataApi } = useFlags();
  const { accountId } = useWalletContext();

  const { data, error, mutate } = useSWR(
    useOpenSearchDataApi ? ['subscribedDaos', accountId] : undefined,
    fetcher,
    {
      revalidateOnFocus: false,
      dedupingInterval: 5000,
    }
  );

  return {
    data,
    mutate,
    isLoading: !data,
    isError: !!error,
  };
}

'''
'''--- services/ApiService/hooks/useTokens.ts ---
import useSWR from 'swr';
import axios from 'axios';

import { appConfig } from 'config';
import { OpenSearchResponse, TokenIndex } from 'services/SearchService/types';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { Token } from 'types/token';
import { buildTokensQuery } from 'services/SearchService/builders/tokens';
import { mapTokenIndexToToken } from 'services/SearchService/mappers/tokens';

/* eslint-disable no-underscore-dangle */
export async function fetcher(
  url: string,
  accountId?: string
): Promise<Token[] | undefined> {
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post<unknown, { data: OpenSearchResponse }>(
    `${baseUrl}/tokenbalance/_search?size=300&from=0`,
    {
      query: buildTokensQuery(accountId),
    }
  );

  return response?.data?.hits?.hits?.map(item => {
    return mapTokenIndexToToken(item._source as TokenIndex);
  });
}

export function useTokens(accountId?: string): {
  data: Token[] | undefined;
  isLoading: boolean;
  isError: boolean;
} {
  const { useOpenSearchDataApi } = useFlags();

  const { data, error } = useSWR(
    useOpenSearchDataApi ? ['tokenbalance', accountId] : undefined,
    fetcher,
    {
      revalidateOnFocus: false,
      dedupingInterval: 60000,
    }
  );

  return {
    data,
    isLoading: !data,
    isError: !!error,
  };
}

'''
'''--- services/ApiService/hooks/useUnreadDraftProposalsCount.ts ---
import axios from 'axios';
import useSWR from 'swr';
import { appConfig } from 'config';
import { useFlags } from 'launchdarkly-react-client-sdk';
import { buildDraftProposalsQuery } from 'services/SearchService/builders/draftProposals';
import { useWalletContext } from 'context/WalletContext';

const PROPOSALS_DEDUPING_INTERVAL = 10000;

/* eslint-disable no-underscore-dangle */
export async function fetcher(
  url: string,
  daoId: string,
  accountId: string
): Promise<number> {
  const baseUrl = process.browser
    ? window.APP_CONFIG.SEARCH_API_URL
    : appConfig.SEARCH_API_URL;

  const response = await axios.post(`${baseUrl}/draftproposal/_search`, {
    query: buildDraftProposalsQuery(
      {
        daoId,
        state: 'all',
        view: 'unread',
      },
      accountId
    ),
    size: 0,
    track_total_hits: true,
  });

  return response?.data?.hits?.total?.value ?? 0;
}

export function useUnreadDraftProposalsCount(daoId: string): number {
  const { useOpenSearchDataApi } = useFlags();
  const { accountId } = useWalletContext();

  const { data } = useSWR(
    useOpenSearchDataApi
      ? ['unreadDraftProposalsCount', daoId, accountId]
      : undefined,
    fetcher,
    {
      revalidateOnFocus: false,
      refreshInterval: 30000,
      dedupingInterval: PROPOSALS_DEDUPING_INTERVAL,
    }
  );

  return data ?? 0;
}

'''
'''--- services/AwsUploader/AwsUploader.ts ---
import AWS from 'aws-sdk';
import { ManagedUpload } from 'aws-sdk/clients/s3';
import { awsConfig } from 'config';
import { nanoid } from 'nanoid';
import { Readable } from 'form-data';

const SECOND = 1000;

const getGlobalAWSConfig = () => {
  let baseConfig: AWS.ConfigurationOptions = {
    httpOptions: {
      timeout: SECOND * 30,
    },
  };

  baseConfig = {
    ...baseConfig,
    region: awsConfig.region,
  };

  return baseConfig;
};

const getInstanceConfig = () => {
  return {
    apiVersion: awsConfig.apiVersion,
    params: { Bucket: awsConfig.bucket },
  };
};

AWS.config.update(getGlobalAWSConfig());

export const awsS3 = new AWS.S3(getInstanceConfig());

export class AwsUploader {
  awsS3Instance: AWS.S3;

  bucketName: string;

  constructor(awsS3Instance: AWS.S3, bucketName: string) {
    this.awsS3Instance = awsS3Instance;
    this.bucketName = bucketName;
  }

  uploadToBucket = async (
    file: File | Readable
  ): Promise<ManagedUpload.SendData> => {
    return this.awsS3Instance
      .upload({
        Bucket: this.bucketName,
        Key: nanoid(),
        Body: file,
        ACL: 'public-read',
        ContentType: 'image/png',
      })
      .promise();
  };
}

const awsUploader = new AwsUploader(awsS3, awsConfig.bucket);

export default awsUploader;

'''
'''--- services/AwsUploader/index.ts ---
export { default as AwsUploader } from './AwsUploader';

'''
'''--- services/AwsUploader/tests/AwsUploader.failure.spec.ts ---
import { AwsUploader } from 'services/AwsUploader';

jest.mock('aws-sdk', () => {
  class mockS3 {
    // eslint-disable-next-line class-methods-use-this
    upload() {
      return {
        promise: () => Promise.reject(),
      };
    }
  }

  return {
    ...jest.requireActual('aws-sdk'),
    S3: mockS3,
  };
});

describe('AWS uploader', () => {
  it('Should return rejected promise if could not upload file', async () => {
    const file = new File(['foo'], 'foo.txt', {
      type: 'text/plain',
    });

    expect(AwsUploader.uploadToBucket(file)).rejects.toBeUndefined();
  });
});

'''
'''--- services/AwsUploader/tests/AwsUploader.success.spec.ts ---
import { AwsUploader } from 'services/AwsUploader';

jest.mock('aws-sdk', () => {
  class mockS3 {
    // eslint-disable-next-line class-methods-use-this
    upload() {
      return {
        promise: () => Promise.resolve('HelloWorld'),
      };
    }
  }

  return {
    ...jest.requireActual('aws-sdk'),
    S3: mockS3,
  };
});

describe('AWS uploader', () => {
  it('Should return response when upload is successful', async () => {
    const response = await AwsUploader.uploadToBucket(
      new File(['foo'], 'foo.txt', {
        type: 'text/plain',
      })
    );

    expect(response).toStrictEqual('HelloWorld');
  });
});

'''
'''--- services/ConfigService/ConfigService.ts ---
import { Config } from 'types/config';
import { getNearConfig, NearConfig } from 'config/near';
import { appConfig as APP_CONFIG } from 'config';

export class ConfigService {
  // eslint-disable-next-line class-methods-use-this
  public get(): { appConfig: Config; nearConfig: NearConfig } {
    const appConfig = process.browser ? window.APP_CONFIG : APP_CONFIG;

    const nearConfig = getNearConfig(appConfig);

    return {
      appConfig,
      nearConfig,
    };
  }
}

export const configService = new ConfigService();

'''
'''--- services/ConfigService/index.ts ---
export * from './ConfigService';

'''
'''--- services/CookieService/index.ts ---
export { cookieService as CookieService } from './CookieService';

'''
'''--- services/CookieService/tests/utils.spec.ts ---
/* eslint-disable @typescript-eslint/ban-ts-comment */
import { hasDocumentCookie } from 'services/CookieService/utils';

describe('cookies utils', () => {
  describe('hasDocumentCookie', () => {
    it('Should return true if cookies object available', () => {
      expect(hasDocumentCookie()).toBeTruthy();
    });

    it('Should return false if cookies are not available', () => {
      Object.defineProperty(document, 'cookie', {});

      expect(hasDocumentCookie()).toBeFalsy();
    });
  });
});

/* eslint-enable @typescript-eslint/ban-ts-comment */

'''
'''--- services/CookieService/types.ts ---
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type Cookie = any;

// eslint-disable-next-line @typescript-eslint/ban-types
export type Cookies = string | object | null;

export interface CookieGetOptions {
  doNotParse?: boolean;
}

export interface CookieSetOptions {
  path?: string;
  expires?: Date;
  maxAge?: number;
  domain?: string;
  secure?: boolean;
  httpOnly?: boolean;
  sameSite?: boolean | 'none' | 'lax' | 'strict';
  encode?: (value: string) => string;
}
export interface CookieChangeOptions {
  name: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  value?: any;
  options?: CookieSetOptions;
}

export interface CookieParseOptions {
  decode: (value: string) => string;
}

export type CookieChangeListener = (options: CookieChangeOptions) => void;

'''
'''--- services/CookieService/utils.ts ---
import * as cookie from 'cookie';
import { Cookie, Cookies, CookieGetOptions, CookieParseOptions } from './types';

export function hasDocumentCookie(): boolean {
  // Can we get/set cookies on document.cookie?
  return typeof document === 'object' && typeof document.cookie === 'string';
}

export function cleanCookies(): void {
  document.cookie.split(';').forEach(c => {
    document.cookie = c
      .replace(/^ +/, '')
      .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);
  });
}

export function parseCookies(
  cookies?: Cookies,
  options?: CookieParseOptions
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
): any {
  if (typeof cookies === 'string') {
    return cookie.parse(cookies, options);
  }

  if (typeof cookies === 'object' && cookies !== null) {
    return cookies;
  }

  return {};
}

export function isParsingCookie(value: Cookie, doNotParse?: boolean): boolean {
  let isParsing = doNotParse;

  if (typeof isParsing === 'undefined') {
    // We guess if the cookie start with { or [, it has been serialized
    isParsing =
      !value || (value[0] !== '{' && value[0] !== '[' && value[0] !== '"');
  }

  return !isParsing;
}

function cleanupCookieValue(value: Cookie): Cookie {
  // express prepend j: before serializing a cookie
  if (value && value[0] === 'j' && value[1] === ':') {
    return value.substr(2);
  }

  return value;
}

export function readCookie(
  value: Cookie,
  options: CookieGetOptions = {}
): Cookie {
  const cleanValue = cleanupCookieValue(value);

  if (isParsingCookie(cleanValue, options.doNotParse)) {
    try {
      return JSON.parse(cleanValue);
    } catch (e) {
      // At least we tried
    }
  }

  // Ignore clean value if we failed the deserialization
  // It is not relevant anymore to trim those values
  return value;
}

'''
'''--- services/DaoStatsService/DaoStatsService.ts ---
import { AxiosResponse } from 'axios';
import { HttpService } from 'services/HttpService';
import { appConfig } from 'config';
import {
  DaoParams,
  Dao,
  Params,
  HistoryParams,
  Flow,
  Metrics,
  Leaderboard,
  DaoHistoryParams,
  FlowMetrics,
  General,
  Governance,
  Tokens,
  Tvl,
  TvlDao,
  ProposalMetrics,
  DaoIntervalHistoryParams,
  IntervalHistoryParams,
  Users,
  LimitParams,
} from './types';
import { LIMIT, OFFSET } from './constants';

export class DaoStatsService {
  private httpService = new HttpService({
    baseURL: `${
      process.browser
        ? window.APP_CONFIG.STATS_API_URL
        : appConfig.STATS_API_URL
    }/api/v1/`,
  });

  constructor(httpService: HttpService) {
    this.httpService = httpService;
  }

  // Dao
  public async getDao(params: DaoParams): Promise<AxiosResponse<Dao>> {
    return this.httpService.get(`${params.contract}/daos/${params.dao}`);
  }

  // Flow
  public async getFlow(params: Params): Promise<AxiosResponse<Flow>> {
    return this.httpService.get(`${params.contract}/flow`);
  }

  async getFlowHistory(
    params: HistoryParams
  ): Promise<AxiosResponse<FlowMetrics>> {
    return this.httpService.get(`${params.contract}/flow/funds`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  public async getFlowLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(`${params.contract}/flow/funds/leaderboard`, {
      params: {
        offset: params.offset || OFFSET,
        limit: params.limit || LIMIT,
      },
    });
  }

  public async getFlowTransactionsHistory(
    params: HistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/flow/transactions`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  public async getFlowTransactionsLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(
      `${params.contract}/flow/transactions/leaderboard`,
      {
        params: {
          offset: params.offset || OFFSET,
          limit: params.limit || LIMIT,
        },
      }
    );
  }

  public async getFlowDao(params: DaoParams): Promise<AxiosResponse<Flow>> {
    return this.httpService.get(`${params.contract}/flow/${params.dao}`);
  }

  public async getFlowDaoFunds(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<FlowMetrics>> {
    return this.httpService.get(`${params.contract}/flow/${params.dao}/funds`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  public async getFlowDaoTransactions(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<FlowMetrics>> {
    return this.httpService.get(
      `${params.contract}/flow/${params.dao}/transactions`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  public async getGeneral(params: Params): Promise<AxiosResponse<General>> {
    return this.httpService.get(`${params.contract}/general`);
  }

  public async getGeneralActive(
    params: IntervalHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/general/active`, {
      params: {
        from: params.from,
        to: params.to,
        interval: params.interval,
      },
    });
  }

  public async getGeneralActiveLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(
      `${params.contract}/general/active/leaderboard`,
      {
        params: {
          offset: params.offset || OFFSET,
          limit: params.limit || LIMIT,
        },
      }
    );
  }

  async getGeneralGroups(
    params: HistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/general/groups`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getGeneralGroupsLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(
      `${params.contract}/general/groups/leaderboard`,
      {
        params: {
          offset: params.offset || OFFSET,
          limit: params.limit || LIMIT,
        },
      }
    );
  }

  async getGeneralAverageGroups(
    params: Params
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/general/average-groups`);
  }

  async getGeneralDao(params: DaoParams): Promise<AxiosResponse<General>> {
    return this.httpService.get(`${params.contract}/general/${params.dao}`);
  }

  async getGeneralDaos(params: HistoryParams): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/general/daos`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getGeneralDaoGroups(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/general/${params.dao}/groups`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getGeneralDaoActivity(
    params: DaoIntervalHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/general/${params.dao}/activity`,
      {
        params: {
          from: params.from,
          to: params.to,
          interval: params.interval,
        },
      }
    );
  }

  async getGovernance(params: Params): Promise<AxiosResponse<Governance>> {
    return this.httpService.get(`${params.contract}/governance`);
  }

  async getGovernanceProposals(
    params: HistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/governance/proposals`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getGovernanceProposalsLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(
      `${params.contract}/governance/proposals/leaderboard`,
      {
        params: {
          offset: params.offset || OFFSET,
          limit: params.limit || LIMIT,
        },
      }
    );
  }

  async getGovernanceProposalsTypes(
    params: HistoryParams
  ): Promise<AxiosResponse<ProposalMetrics>> {
    return this.httpService.get(
      `${params.contract}/governance/proposals-types`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getGovernanceProposalsTypesLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(
      `${params.contract}/governance/proposals-types/leaderboard`,
      {
        params: {
          offset: params.offset || OFFSET,
          limit: params.limit || LIMIT,
        },
      }
    );
  }

  async getGovernanceVoteRate(
    params: HistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/governance/vote-rate`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getGovernanceVoteRateLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(
      `${params.contract}/governance/vote-rate/leaderboard`,
      {
        params: {
          offset: params.offset || OFFSET,
          limit: params.limit || LIMIT,
        },
      }
    );
  }

  async getGovernanceActiveProposals(
    params: HistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/governance/active-proposals`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getGovernanceActiveProposalsLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(
      `${params.contract}/governance/active-proposals/leaderboard`,
      {
        params: {
          offset: params.offset || OFFSET,
          limit: params.limit || LIMIT,
        },
      }
    );
  }

  async getGovernanceActiveVotes(
    params: HistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/governance/active-votes`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getGovernanceActiveVotesLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(
      `${params.contract}/governance/active-votes/leaderboard`,
      {
        params: {
          offset: params.offset || OFFSET,
          limit: params.limit || LIMIT,
        },
      }
    );
  }

  async getGovernanceDao(
    params: DaoParams
  ): Promise<AxiosResponse<Governance>> {
    return this.httpService.get(`${params.contract}/governance/${params.dao}`);
  }

  async getGovernanceDaoProposals(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/governance/${params.dao}/proposals`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getGovernanceDaoProposalsTypes(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<ProposalMetrics>> {
    return this.httpService.get(
      `${params.contract}/governance/${params.dao}/proposals-types`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getGovernanceDaoVoteRate(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/governance/${params.dao}/vote-rate`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getGovernanceDaoActiveProposals(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/governance/${params.dao}/active-proposals`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getGovernanceDaoActiveVotes(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/governance/${params.dao}/active-votes`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getTokens(params: Params): Promise<AxiosResponse<Tokens>> {
    return this.httpService.get(`${params.contract}/tokens`);
  }

  async getTokensFts(params: HistoryParams): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/tokens/fts`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getTokensFtsLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(`${params.contract}/tokens/fts/leaderboard`, {
      params: {
        offset: params.offset || OFFSET,
        limit: params.limit || LIMIT,
      },
    });
  }

  async getTokensFtsVl(params: HistoryParams): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/tokens/fts-vl`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getTokensFtsVlLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(
      `${params.contract}/tokens/fts-vl/leaderboard`,
      {
        params: {
          offset: params.offset || OFFSET,
          limit: params.limit || LIMIT,
        },
      }
    );
  }

  async getTokensNfts(params: HistoryParams): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/tokens/nfts`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getTokensNftsLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(`${params.contract}/tokens/nfts/leaderboard`, {
      params: {
        offset: params.offset || OFFSET,
        limit: params.limit || LIMIT,
      },
    });
  }

  async getTokensDao(params: DaoParams): Promise<AxiosResponse<Tokens>> {
    return this.httpService.get(`${params.contract}/tokens/${params.dao}`);
  }

  async getTokensDaoFts(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/tokens/${params.dao}/fts`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getTokensDaoFtsVl(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/tokens/${params.dao}/fts-vl`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getTokensDaoNfts(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/tokens/${params.dao}/nfts`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getTvl(params: Params): Promise<AxiosResponse<Tvl>> {
    return this.httpService.get(`${params.contract}/tvl`);
  }

  async getTvlHistory(params: HistoryParams): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/tvl/tvl`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getTvlLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(`${params.contract}/tvl/tvl/leaderboard`, {
      params: {
        offset: params.offset || OFFSET,
        limit: params.limit || LIMIT,
      },
    });
  }

  async getTvlBountiesAndGrantsVl(
    params: HistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/tvl/bounties-and-grants-vl`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getTvlBountiesAndGrantsVlLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(
      `${params.contract}/tvl/bounties-and-grants-vl/leaderboard`,
      {
        params: {
          offset: params.offset || OFFSET,
          limit: params.limit || LIMIT,
        },
      }
    );
  }

  async getTvlDao(params: DaoParams): Promise<AxiosResponse<TvlDao>> {
    return this.httpService.get(`${params.contract}/tvl/${params.dao}`);
  }

  async getTvlDaoBountiesNumber(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/tvl/${params.dao}/bounties/number`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getTvlDaoBountiesVl(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/tvl/${params.dao}/bounties/vl`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getTvlDaoTvl(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/tvl/${params.dao}/tvl`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getUsers(params: Params): Promise<AxiosResponse<Users>> {
    return this.httpService.get(`${params.contract}/users`);
  }

  async getUsersActiveUsers(
    params: IntervalHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/users/active-users`, {
      params: {
        from: params.from,
        to: params.to,
        interval: params.interval,
      },
    });
  }

  async getUsersActiveUsersLeaderboard(
    params: IntervalHistoryParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(
      `${params.contract}/users/active-users/leaderboard`,
      {
        params: {
          from: params.from,
          to: params.to,
          interval: params.interval,
        },
      }
    );
  }

  async getUsersUsers(params: HistoryParams): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/users/users`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getUsersLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(`${params.contract}/users/users/leaderboard`, {
      params: {
        offset: params.offset || OFFSET,
        limit: params.limit || LIMIT,
      },
    });
  }

  async getUsersMembers(
    params: HistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/users/members`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getUsersMembersLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(
      `${params.contract}/users/members/leaderboard`,
      {
        params: {
          offset: params.offset || OFFSET,
          limit: params.limit || LIMIT,
        },
      }
    );
  }

  async getUsersAverageUsers(
    params: HistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/users/average-users`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getUsersInteractions(
    params: HistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(`${params.contract}/users/interactions`, {
      params: {
        from: params.from,
        to: params.to,
      },
    });
  }

  async getUsersInteractionsLeaderboard(
    params: LimitParams
  ): Promise<AxiosResponse<Leaderboard>> {
    return this.httpService.get(
      `${params.contract}/users/interactions/leaderboard`,
      {
        params: {
          offset: params.offset || OFFSET,
          limit: params.limit || LIMIT,
        },
      }
    );
  }

  async getUsersAverageInteractions(
    params: HistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/users/average-interactions`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getUsersDao(params: DaoParams): Promise<AxiosResponse<Users>> {
    return this.httpService.get(`${params.contract}/users/${params.dao}`);
  }

  async getUsersDaoActiveUsers(
    params: DaoIntervalHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/users/${params.dao}/active-users`,
      {
        params: {
          from: params.from,
          to: params.to,
          interval: params.interval,
        },
      }
    );
  }

  async getUsersDaoUsers(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/users/${params.dao}/users`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getUsersDaoMembers(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/users/${params.dao}/members`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }

  async getUsersDaoInteractions(
    params: DaoHistoryParams
  ): Promise<AxiosResponse<Metrics>> {
    return this.httpService.get(
      `${params.contract}/users/${params.dao}/interactions`,
      {
        params: {
          from: params.from,
          to: params.to,
        },
      }
    );
  }
}

'''
'''--- services/DaoStatsService/constants.ts ---
export const LIMIT = 10;
export const OFFSET = 0;

'''
'''--- services/DaoStatsService/index.ts ---
export * from './DaoStatsService';
export * from './constants';

'''
'''--- services/DaoStatsService/types.ts ---
export type History = {
  from?: string;
  to?: string;
};

export type Params = {
  contract: string;
};

export type LimitParams = Params & {
  limit?: number;
  offset?: number;
};

export type IntervalParams = {
  interval: Interval;
};

export type HistoryParams = Params & History;
export type IntervalHistoryParams = Params & History & IntervalParams;

export type DaoParams = Params & {
  dao: string;
};

export type ProposalMetrics = {
  metrics: {
    financial: MetricItem[];
    governance: MetricItem[];
    bounties: MetricItem[];
    members: MetricItem[];
  };
};

export type Proposals = {
  bounties: number;
  financial: number;
  governance: number;
  members: number;
};

export type LeaderboardItem = {
  dao: string;
  proposalsByType?: Proposals;
  proposals?: TotalMetrics;
  voteRate?: TotalMetrics;
  activity?: TotalMetrics;
  overview?: MetricItem[];
};

export type Leaderboard = {
  leaderboard?: LeaderboardItem[];
  metrics?: LeaderboardItem[];
  incoming?: LeaderboardItem[];
  outgoing?: LeaderboardItem[];
  total: number;
  outgoingTotal: number;
  incomingTotal: number;
};

export type DaoHistoryParams = DaoParams & History;
export type DaoIntervalHistoryParams = DaoParams & History & IntervalParams;

export type Legal = {
  legalStatus?: string;
  legalLink?: string;
};

export type Metadata = {
  displayName?: string;
  flagCover?: string;
  flagLogo?: string;
  legal?: Legal;
  links?: string[];
};

export type Dao = {
  createdAt: string;
  dao: string;
  contractId: string;
  description: string;
  metadata: Metadata;
};

export type TvlTotalMetrics = {
  number: TotalMetrics;
  vl: TotalMetrics;
};

export type FlowTotalMetrics = {
  number: TotalMetrics;
};

export type TotalMetrics = {
  count: number;
  growth: number;
  countNear?: number;
};

export type MetricItem = {
  timestamp: number;
  count: number;
};

export type Metrics = {
  metrics: MetricItem[];
};

export type FlowMetricsItem = {
  timestamp: number;
  incoming: number;
  outgoing: number;
};

export type FlowMetrics = {
  metrics: FlowMetricsItem[];
};

export enum Currency {
  USD = 'USD',
}

export enum Coin {
  NEAR = 'NEAR',
}

export type PriceParams = { currency: Currency; coin: Coin };

export type PriceParamsHistory = PriceParams & History;

export enum Interval {
  MONTH = 'month',
  WEEK = 'week',
  DAY = 'day',
}

export type Flow = {
  totalIn: TotalMetrics;
  totalOut: TotalMetrics;
  transactionsIn: TotalMetrics;
  transactionsOut: TotalMetrics;
};

export type General = {
  dao: TotalMetrics;
  activity: TotalMetrics;
  groups: TotalMetrics;
  averageGroups: TotalMetrics;
};

export type Governance = {
  proposals: TotalMetrics;
  proposalsByType: Proposals;
  voteRate: TotalMetrics;
  activeProposals: TotalMetrics;
  activeVotes: TotalMetrics;
};

export type Tokens = {
  fts: TotalMetrics;
  nfts: TotalMetrics;
  ftsVl: TotalMetrics;
};

export type Tvl = {
  tvl: TotalMetrics;
  avgTvl: TotalMetrics;
  bountiesAndGrantsVl: TotalMetrics;
  ftsVl: TotalMetrics;
};

export type TvlDao = {
  grants: TvlTotalMetrics;
  bounties: TvlTotalMetrics;
  tvl: TotalMetrics;
};

export type Users = {
  users: TotalMetrics;
  members: TotalMetrics;
  averageUsers: TotalMetrics;
  interactions: TotalMetrics;
  averageInteractions: TotalMetrics;
  activeUsers: TotalMetrics;
};

'''
'''--- services/DraftsService/DraftsService.ts ---
import { AxiosResponse } from 'axios';

import { HttpService } from 'services/HttpService';
import { appConfig } from 'config';
import { DraftProposal, DraftProposalFeedItem } from 'types/draftProposal';
import { PaginationResponse } from 'types/api';

import { API_MAPPERS, API_QUERIES } from 'services/sputnik/constants';
import { Authorization } from 'types/auth';
import { DAO } from 'types/dao';

import {
  DraftParams,
  DraftCommentParams,
  DraftComment,
  CreateDraftCommentData,
  EditDraftCommentData,
  CreateDraftParams,
} from './types';

export class DraftsService {
  private httpService = new HttpService({
    baseURL: `${
      process.browser
        ? window.APP_CONFIG.DRAFTS_API_URL
        : appConfig.DRAFTS_API_URL
    }/api/v1/`,
  });

  private useDraftsApiRelatedToDao = false;

  private useDraftCommentsApiRelatedToDao = false;

  constructor(
    httpService?: HttpService,
    useDraftsApiRelatedToDao?: boolean,
    useDraftCommentsApiRelatedToDao?: boolean
  ) {
    if (httpService) {
      this.httpService = httpService;
    }

    if (useDraftsApiRelatedToDao) {
      this.useDraftsApiRelatedToDao = true;
    }

    if (useDraftCommentsApiRelatedToDao) {
      this.useDraftCommentsApiRelatedToDao = true;
    }
  }

  // Draft
  public async getDrafts(
    params: DraftParams
  ): Promise<PaginationResponse<DraftProposalFeedItem[]>> {
    const { data } = await this.httpService.get<
      PaginationResponse<DraftProposalFeedItem[]>
    >('/draft-proposals', { params });

    return data;
  }

  public async createDraft(
    params: CreateDraftParams
  ): Promise<AxiosResponse<string>> {
    return this.httpService.post('/draft-proposals', params, {
      queryRequest: {
        name: API_QUERIES.ADD_AUTHORIZATION,
      },
    });
  }

  public async getDraft(
    id: string,
    dao?: DAO,
    accountIdParams?: string
  ): Promise<DraftProposal | null> {
    try {
      const { data } = await this.httpService.get(`/draft-proposals/${id}`, {
        responseMapper: {
          name: API_MAPPERS.MAP_DRAFT_TO_PROPOSAL_DRAFT,
          params: {
            dao,
          },
        },
        params: {
          accountId: accountIdParams,
        },
      });

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async patchDraft(
    params: { id: string } & CreateDraftParams
  ): Promise<AxiosResponse<string>> {
    return this.httpService.patch(
      this.useDraftsApiRelatedToDao
        ? `/draft-proposals/${params.daoId}/${params.id}`
        : `/draft-proposals/${params.id}`,
      params,
      {
        queryRequest: {
          name: API_QUERIES.ADD_AUTHORIZATION,
        },
      }
    );
  }

  public async deleteDraft(
    params: {
      id: string;
      daoId: string;
    } & Authorization
  ): Promise<AxiosResponse<boolean>> {
    return this.httpService.delete(
      this.useDraftsApiRelatedToDao
        ? `/draft-proposals/${params.daoId}/${params.id}`
        : `/draft-proposals/${params.id}`,
      params,
      {
        queryRequest: {
          name: API_QUERIES.ADD_AUTHORIZATION,
        },
      }
    );
  }

  public async updateDraftView(
    params: { id: string; daoId: string } & Authorization
  ): Promise<AxiosResponse<boolean>> {
    return this.httpService.post(
      this.useDraftsApiRelatedToDao
        ? `/draft-proposals/${params.daoId}/${params.id}/view`
        : `/draft-proposals/${params.id}/view`,
      params,
      {
        queryRequest: {
          name: API_QUERIES.ADD_AUTHORIZATION,
        },
      }
    );
  }

  public async updateDraftSave(
    params: {
      id: string;
      daoId: string;
      accountId: string;
    } & Authorization
  ): Promise<AxiosResponse<boolean>> {
    return this.httpService.post(
      this.useDraftsApiRelatedToDao
        ? `/draft-proposals/${params.daoId}/${params.id}/save`
        : `/draft-proposals/${params.id}/save`,
      params,
      {
        queryRequest: {
          name: API_QUERIES.ADD_AUTHORIZATION,
        },
      }
    );
  }

  public async deleteDraftSave(
    params: {
      id: string;
      daoId: string;
      accountId: string;
    } & Authorization
  ): Promise<AxiosResponse<boolean>> {
    return this.httpService.delete(
      this.useDraftsApiRelatedToDao
        ? `/draft-proposals/${params.daoId}/${params.id}/save`
        : `/draft-proposals/${params.id}/save`,
      params,
      {
        queryRequest: {
          name: API_QUERIES.ADD_AUTHORIZATION,
        },
      }
    );
  }

  public async updateDraftClose(
    params: {
      id: string;
      daoId: string;
      proposalId: string;
    } & Authorization
  ): Promise<AxiosResponse<boolean>> {
    return this.httpService.post(
      this.useDraftsApiRelatedToDao
        ? `/draft-proposals/${params.daoId}/${params.id}/close`
        : `/draft-proposals/${params.id}/close`,
      params,
      {
        queryRequest: {
          name: API_QUERIES.ADD_AUTHORIZATION,
        },
      }
    );
  }

  // Draft comment
  public async getDraftComments(
    params: DraftCommentParams
  ): Promise<DraftComment[]> {
    const { data } = await this.httpService.get<AxiosResponse<DraftComment[]>>(
      '/draft-comments',
      { params }
    );

    return data.data;
  }

  public async createDraftComment(
    data: CreateDraftCommentData & { daoId: string } & Authorization
  ): Promise<AxiosResponse<DraftComment>> {
    return this.httpService.post('/draft-comments', data, {
      queryRequest: {
        name: API_QUERIES.ADD_AUTHORIZATION,
      },
    });
  }

  public async editDraftComment(
    data: EditDraftCommentData & {
      daoId: string;
      draftId: string;
    } & Authorization
  ): Promise<AxiosResponse<DraftComment>> {
    return this.httpService.patch(
      this.useDraftCommentsApiRelatedToDao
        ? `/draft-comments/${data.daoId}/${data.draftId}/${data.id}`
        : `/draft-comments/${data.id}`,
      data,
      {
        queryRequest: {
          name: API_QUERIES.ADD_AUTHORIZATION,
        },
      }
    );
  }

  public async deleteDraftComment(
    params: { id: string; daoId: string; draftId: string } & Authorization
  ): Promise<AxiosResponse<boolean>> {
    return this.httpService.delete(
      this.useDraftCommentsApiRelatedToDao
        ? `/draft-comments/${params.daoId}/${params.draftId}/${params.id}`
        : `/draft-comments/${params.id}`,
      params,
      {
        queryRequest: {
          name: API_QUERIES.ADD_AUTHORIZATION,
        },
      }
    );
  }

  public async likeDraftComment(
    params: { id: string; daoId: string; draftId: string } & Authorization
  ): Promise<AxiosResponse<boolean>> {
    return this.httpService.post(
      this.useDraftCommentsApiRelatedToDao
        ? `/draft-comments/${params.daoId}/${params.draftId}/${params.id}/like`
        : `/draft-comments/${params.id}/like`,
      params,
      {
        queryRequest: {
          name: API_QUERIES.ADD_AUTHORIZATION,
        },
      }
    );
  }

  public async removeLikeDraftComment(
    params: { id: string; daoId: string; draftId: string } & Authorization
  ): Promise<AxiosResponse<boolean>> {
    return this.httpService.post(
      this.useDraftCommentsApiRelatedToDao
        ? `/draft-comments/${params.daoId}/${params.draftId}/${params.id}/remove-like`
        : `/draft-comments/${params.id}/remove-like`,
      params,
      {
        queryRequest: {
          name: API_QUERIES.ADD_AUTHORIZATION,
        },
      }
    );
  }

  public async dislikeDraftComment(
    params: { id: string; daoId: string; draftId: string } & Authorization
  ): Promise<AxiosResponse<boolean>> {
    return this.httpService.post(
      this.useDraftCommentsApiRelatedToDao
        ? `/draft-comments/${params.daoId}/${params.draftId}/${params.id}/dislike`
        : `/draft-comments/${params.id}/dislike`,
      params,
      {
        queryRequest: {
          name: API_QUERIES.ADD_AUTHORIZATION,
        },
      }
    );
  }

  public async removeDislikeDraftComment(
    params: { id: string; daoId: string; draftId: string } & Authorization
  ): Promise<AxiosResponse<boolean>> {
    return this.httpService.post(
      this.useDraftCommentsApiRelatedToDao
        ? `/draft-comments/${params.daoId}/${params.draftId}/${params.id}/remove-dislike`
        : `/draft-comments/${params.id}/remove-dislike`,
      params,
      {
        queryRequest: {
          name: API_QUERIES.ADD_AUTHORIZATION,
        },
      }
    );
  }
}

'''
'''--- services/DraftsService/index.ts ---
export * from './DraftsService';

'''
'''--- services/DraftsService/mappers.ts ---
import { DAO } from 'types/dao';

export const mapDraftToProposalDraft = (
  data: Record<string, unknown>,
  dao?: DAO
): Record<string, unknown> => {
  return {
    ...data,
    dao: dao || {},
    permissions: {},
    votes: {},
    proposalVariant: (data?.kind as Record<string, unknown>).proposalVariant,
  };
};

'''
'''--- services/DraftsService/types.ts ---
import { ProposalKind, ProposalType, ProposalVariant } from 'types/proposal';
import { Authorization } from 'types/auth';

export type DraftBaseParams = {
  limit?: number;
  offset?: number;
  search?: string;
  orderBy?: string;
  order?: 'ASC' | 'DESC';
};

export type DraftState = 'open' | 'closed' | 'all';

export type DraftParams = {
  type?: string;
  state?: DraftState;
  daoId: string;
  searchInput?: string;
  accountId: string;
  isRead?: 'true' | 'false';
  isSaved?: 'true' | 'false';
} & DraftBaseParams;

export type DraftCommentParams = {
  contextId?: string;
  contextType?: 'DraftProposal';
  isReply?: 'true' | 'false';
} & DraftBaseParams;

export type DraftComment = {
  id: string;
  contextId: string;
  contextType: 'DraftProposal';
  author: string;
  message: string;
  replyTo: string | undefined;
  replies: DraftComment[];
  likeAccounts: string[];
  dislikeAccounts: string[];
  createdAt: string;
  updatedAt: string;
};

export type EditDraftCommentData = Omit<
  DraftComment,
  | 'contextId'
  | 'contextType'
  | 'author'
  | 'createdAt'
  | 'updatedAt'
  | 'likeAccounts'
  | 'dislikeAccounts'
  | 'replies'
  | 'replyTo'
>;

export type CreateDraftCommentData = Omit<
  DraftComment,
  | 'id'
  | 'author'
  | 'createdAt'
  | 'updatedAt'
  | 'likeAccounts'
  | 'dislikeAccounts'
  | 'replies'
>;

export type DraftKind = { proposalVariant: ProposalVariant } & Record<
  string,
  unknown
>;

export type CreateDraftParams = {
  daoId: string;
  title: string;
  description: string;
  type: ProposalType;
  kind?: DraftKind | ProposalKind;
} & Authorization;

export type DraftIdParams = {
  id: string;
} & Authorization;

'''
'''--- services/HttpService/HttpService.ts ---
/* eslint-disable @typescript-eslint/no-explicit-any */
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
import {
  RequestQueryBuilder,
  SConditionAND,
  SFields,
} from '@nestjsx/crud-request';
import omit from 'lodash/omit';

// Mappers
import {
  mapDaoDTOtoDao,
  mapDaoFeedItemResponseToDaoFeedItemList,
  mapProposalDTOToProposal,
  mapProposalFeedItemResponseToProposalFeedItem,
  mapReceiptsByTokenResponse,
  mapReceiptsResponse,
  mapSearchResultsDTOToDataObject,
  mapSubscriptionsDTOsToDaoSubscriptions,
  mapTokensDTOToTokens,
  mapOvertimeToChartData,
  mapProposalsOvertimeToChartData,
  mapProposalToProposers,
} from 'services/sputnik/mappers';
import { mapNftTokenResponseToNftToken } from 'services/sputnik/mappers/nfts';

import {
  API_MAPPERS,
  ApiMappers,
  API_QUERIES,
  ApiQueries,
  LIST_LIMIT_DEFAULT,
} from 'services/sputnik/constants';
import { mapDraftToProposalDraft } from 'services/DraftsService/mappers';
import { appConfig } from 'config';
import {
  ProposalCategories,
  ProposalsFeedStatuses,
  ProposalType,
  // ProposalVariant,
} from 'types/proposal';
import { DaoFeedItem } from 'types/dao';
import { mapOpenSearchResponseToSearchResult } from 'services/SearchService/mappers/search';
import { SearchResponseIndex } from 'services/SearchService/types';

interface Mapper {
  name: ApiMappers | string;
  params?: { [key: string]: any };
}

interface Query {
  name: ApiQueries | string;
  params?: { [key: string]: any };
}

export interface CustomAxiosRequestConfig extends AxiosRequestConfig {
  responseMapper?: Mapper;
  queryRequest?: Query;
}

export class HttpService {
  private readonly client: AxiosInstance;

  constructor(config?: AxiosRequestConfig) {
    this.client = axios.create({
      baseURL: appConfig.API_URL,
      ...config,
    });

    this.client.interceptors.request.use(request => {
      const requestCustom: CustomAxiosRequestConfig = request;

      switch (requestCustom.queryRequest?.name) {
        case API_QUERIES.GET_BOUNTIES_CONTEXT:
          {
            const { query, accountId, daoId } =
              requestCustom.queryRequest?.params || {};
            const queryBuilder = RequestQueryBuilder.create();

            if (daoId) {
              queryBuilder.setFilter({
                field: 'daoId',
                operator: '$eq',
                value: daoId,
              });
            }

            queryBuilder.setFilter({
              field: 'proposal.status',
              operator: '$notin',
              value: ['Rejected', 'Removed', 'Expired'],
            });
            queryBuilder.setFilter({
              field: 'proposal.voteStatus',
              operator: 'ne',
              value: 'Expired',
            });

            if (query?.bountyFilter) {
              if (query.bountyFilter === 'proposer') {
                queryBuilder.setFilter({
                  field: 'proposal.proposer',
                  operator: '$eq',
                  value: accountId,
                });
              }

              if (query.bountyFilter === 'numberOfClaims') {
                queryBuilder.setFilter({
                  field: 'bounty.numberOfClaims',
                  operator: '$eq',
                  value: 0,
                });
              }

              if (query.bountyFilter === 'hidden') {
                queryBuilder.setFilter({
                  field: 'isArchived',
                  operator: '$eq',
                  value: true,
                });
              } else {
                queryBuilder.setFilter({
                  field: 'isArchived',
                  operator: '$eq',
                  value: false,
                });
              }
            } else {
              queryBuilder.setFilter({
                field: 'isArchived',
                operator: '$eq',
                value: false,
              });
            }

            if (query?.bountyPhase) {
              // Proposal Phase
              if (query.bountyPhase === 'proposalPhase') {
                queryBuilder.setFilter({
                  field: 'proposal.status',
                  operator: '$eq',
                  value: 'InProgress',
                });
              }

              // In progress
              if (query.bountyPhase === 'inProgress') {
                queryBuilder.setFilter({
                  field: 'bounty.numberOfClaims',
                  operator: '$ne',
                  value: 0,
                });
              }

              // Available bounty
              if (query.bountyPhase === 'availableBounty') {
                queryBuilder.setFilter({
                  field: 'bounty.times',
                  operator: '$gte',
                  value: 0,
                });
                queryBuilder.setFilter({
                  field: 'bounty.numberOfClaims',
                  operator: '$eq',
                  value: 0,
                });
                queryBuilder.setFilter({
                  field: 'bounty.times',
                  operator: '$ne',
                  value: 0,
                });
              }

              // Completed
              if (query.bountyPhase === 'completed') {
                queryBuilder.setFilter({
                  field: 'bounty.times',
                  operator: '$eq',
                  value: 0,
                });
              }
            }

            const queryString = queryBuilder
              .setLimit(query?.limit ?? LIST_LIMIT_DEFAULT)
              .setOffset(query?.offset ?? 0)
              .query();

            let sort = 'createdAt,DESC';

            if (query?.bountySort) {
              sort = query.bountySort;
            }

            request.url = `/bounty-contexts?${queryString}${
              accountId ? `&accountId=${accountId}` : ''
            }`;
            request.params = { sort };
          }
          break;
        case API_QUERIES.GET_ACTIVE_PROPOSALS:
          {
            const { daoIds, limit, offset } =
              requestCustom.queryRequest?.params || {};

            const queryString = new URLSearchParams();

            queryString.append('dao', daoIds.join(','));
            queryString.append('active', 'true');

            queryString.append('limit', limit || `${LIST_LIMIT_DEFAULT}`);
            queryString.append('offset', offset || `${0}`);
            queryString.append('orderBy', 'createdAt');
            queryString.append('order', 'DESC');

            request.url = `/proposals?${queryString}`;
          }
          break;
        case API_QUERIES.GET_USER_PROPOSALS:
          {
            const { accountId } = requestCustom.queryRequest?.params || {};

            const queryString = new URLSearchParams();

            queryString.append('proposer', accountId);

            queryString.append('limit', `${LIST_LIMIT_DEFAULT}`);
            queryString.append('offset', `${0}`);
            queryString.append('orderBy', 'createdAt');
            queryString.append('order', 'DESC');

            request.url = `/proposals?${queryString}`;
          }
          break;
        case API_QUERIES.GET_USER_PROPOSALS_BY_PROPOSER: {
          const { proposers, accountId, daoId } =
            requestCustom.queryRequest?.params || {};

          const queryString = new URLSearchParams();

          queryString.append('dao', daoId);
          queryString.append('proposer', `${proposers}`);

          queryString.append('limit', `${LIST_LIMIT_DEFAULT}`);
          queryString.append('offset', `${0}`);
          queryString.append('orderBy', 'createdAt');
          queryString.append('order', 'DESC');

          request.url = `/proposals?${queryString}${
            accountId ? `&accountId=${accountId}` : ''
          }`;
          break;
        }
        case API_QUERIES.GET_PROPOSAL_BY_ID:
          {
            const { proposalId, accountId } =
              requestCustom.queryRequest?.params || {};

            const queryString = new URLSearchParams();

            queryString.append('id', proposalId);

            request.url = `/proposals/${proposalId}${
              accountId ? `?accountId=${accountId}` : ''
            }`;
          }
          break;
        case API_QUERIES.FIND_POLICY_AFFECTS_PROPOSALS:
          {
            const { daoId } = requestCustom.queryRequest?.params || {};

            const queryString = new URLSearchParams();

            queryString.append('dao', daoId);

            queryString.append('active', 'true');

            queryString.append(
              'type',
              `${ProposalType.ChangeConfig},${ProposalType.ChangePolicy}`
            );

            queryString.append('limit', `${LIST_LIMIT_DEFAULT}`);
            queryString.append('offset', `${0}`);
            queryString.append('orderBy', 'createdAt');
            queryString.append('order', 'DESC');

            request.url = `/proposals?${queryString}`;
          }
          break;
        case API_QUERIES.GET_JOINING_DAO_PROPOSALS:
          {
            const { daoId, accountId } =
              requestCustom.queryRequest?.params || {};

            const queryString = RequestQueryBuilder.create();

            const search: SFields | SConditionAND = {
              $and: [
                {
                  daoId: {
                    $eq: daoId,
                  },
                },
              ],
            };

            search.$and?.push({
              status: {
                $eq: 'InProgress',
              },
              votePeriodEnd: {
                $gt: 'now',
              },
            });

            search.$and?.push({
              kind: {
                $cont: ProposalType.AddMemberToRole,
              },
            });

            search.$and?.push({
              kind: {
                $cont: ProposalType.AddMemberToRole,
              },
            });
            search.$and?.push({
              kind: {
                $cont: accountId,
              },
            });

            queryString.search(search);

            queryString
              .setLimit(1000)
              .setOffset(0)
              .sortBy({
                field: 'createdAt',
                order: 'DESC',
              })
              .query();

            request.url = `/proposals/account-proposals/${accountId}?${queryString.queryString}`;
          }
          break;
        case API_QUERIES.GET_FILTERED_PROPOSALS:
          {
            const { filter, accountDaos } =
              requestCustom.queryRequest?.params || {};

            const queryString = RequestQueryBuilder.create();

            const search: SFields | SConditionAND = {
              $and: [],
            };

            // specific DAO
            if (filter.daoId) {
              search.$and?.push({
                daoId: {
                  $eq: filter.daoId,
                },
              });
            } else if (filter.daoFilter === 'My DAOs') {
              if (accountDaos.length) {
                search.$and?.push({
                  daoId: {
                    $in: accountDaos.map((item: DaoFeedItem) => item.id),
                  },
                });
              }
            }

            // Statuses
            if (filter.status && filter.status === 'Active proposals') {
              // Fetch all InProgress items and then do additional filtering for Expired
              search.$and?.push({
                status: {
                  $eq: 'InProgress',
                },
              });
            } else if (filter.status && filter.status === 'Approved') {
              search.$and?.push({
                status: {
                  $eq: 'Approved',
                },
              });
            } else if (filter.status && filter.status === 'Failed') {
              // Fetch failed including InProgress items and then do additional filtering for Expired
              search.$and?.push({
                status: {
                  $in: ['Rejected', 'Expired', 'Moved', 'InProgress'],
                },
              });
            }

            // Kinds
            if (filter.proposalFilter === 'Polls') {
              search.$and?.push({
                kind: {
                  $cont: ProposalType.Vote,
                  $excl: ProposalType.ChangePolicy,
                },
              });
            }

            if (filter.proposalFilter === 'Governance') {
              search.$and?.push({
                $or: [
                  {
                    kind: {
                      $cont: ProposalType.ChangeConfig,
                    },
                  },
                  {
                    kind: {
                      $cont: ProposalType.ChangePolicy,
                    },
                  },
                ],
              });
            }

            if (filter.proposalFilter === 'Financial') {
              search.$and?.push({
                kind: {
                  $cont: ProposalType.Transfer,
                },
              });
            }

            if (filter.proposalFilter === 'Groups') {
              search.$and?.push({
                $or: [
                  {
                    kind: {
                      $cont: ProposalType.AddMemberToRole,
                    },
                  },
                  {
                    kind: {
                      $cont: ProposalType.RemoveMemberFromRole,
                    },
                  },
                ],
              });
            }

            queryString.search(search);

            // DaosIds
            if (filter.daosIdsFilter) {
              queryString.setFilter({
                field: 'daoId',
                operator: '$in',
                value: filter.daosIdsFilter,
              });
            }

            queryString
              .setLimit(1000)
              .setOffset(0)
              .sortBy({
                field: 'createdAt',
                order: 'DESC',
              })
              .query();

            request.url = `/proposals?${queryString.queryString}`;
          }
          break;
        case API_QUERIES.GET_POLLS:
          {
            const { limit, daoId, offset } =
              requestCustom.queryRequest?.params || {};
            const queryString = new URLSearchParams();

            queryString.append('dao', daoId);
            queryString.append('type', ProposalType.Vote);

            queryString.append('limit', limit ?? LIST_LIMIT_DEFAULT);
            queryString.append('offset', offset ?? 0);
            queryString.append('orderBy', 'createdAt');
            queryString.append('order', 'DESC');

            request.url = `/proposals?${queryString}`;
          }
          break;
        case API_QUERIES.GET_BOUNTY_CONTEXT_BY_ID:
          {
            const { bountyId, accountId } =
              requestCustom.queryRequest?.params || {};

            const queryString = RequestQueryBuilder.create()
              .setFilter({
                field: 'id',
                operator: '$eq',
                value: bountyId,
              })
              .query();

            request.url = `/bounty-contexts?${queryString}${
              accountId ? `&accountId=${accountId}` : ''
            }`;
          }
          break;
        case API_QUERIES.FIND_BOUNTY_CONTEXT:
          {
            const { daoId, query, accountId } =
              requestCustom.queryRequest?.params || {};

            const queryBuilder = RequestQueryBuilder.create();

            if (daoId) {
              queryBuilder.setFilter({
                field: 'daoId',
                operator: '$eq',
                value: daoId,
              });
            }

            queryBuilder.setFilter({
              field: 'proposal.description',
              operator: '$contL',
              value: query,
            });

            const queryString = queryBuilder
              .setLimit(2000)
              .setOffset(0)
              .query();

            request.url = `/bounty-contexts?${queryString}${
              accountId ? `&accountId=${accountId}` : ''
            }`;
            request.params = { sort: 'createdAt,DESC' };
          }
          break;
        case API_QUERIES.FIND_DAO_BY_NAME:
          {
            const { query } = requestCustom.queryRequest?.params || {};

            const queryBuilder = RequestQueryBuilder.create();

            queryBuilder.setFilter({
              field: 'id',
              operator: '$contL',
              value: query,
            });
            // queryBuilder.setOr({
            //   field: 'id',
            //   operator: '$contL',
            //   value: query,
            // });

            // todo - use pagination to limit results
            const queryString = queryBuilder
              .setLimit(2000)
              .setOffset(0)
              .query();

            request.url = `/daos?${queryString}`;
            request.params = { sort: 'createdAt,DESC' };
          }
          break;
        case API_QUERIES.GET_TEMPLATES_BY_SMART_CONTRACT: {
          const { query, smartContractAddress, templateId } =
            requestCustom.queryRequest?.params || {};

          const queryString = RequestQueryBuilder.create();

          queryString.setFilter({
            field: 'config',
            operator: '$contL',
            value: smartContractAddress,
          });

          queryString.setFilter({
            field: 'id',
            operator: '$ne',
            value: templateId,
          });

          queryString
            .setLimit(query?.limit ?? 1000)
            .setOffset(query?.offset ?? 0)
            .query();

          request.url = `/proposals/templates?${queryString.queryString}`;

          break;
        }
        case API_QUERIES.GET_SHARED_PROPOSAL_TEMPLATES: {
          const { query, templateId } =
            requestCustom.queryRequest?.params || {};

          const queryString = RequestQueryBuilder.create();

          const search: SFields | SConditionAND = {
            $and: [],
          };

          // search
          if (query?.searchInput) {
            search.$and?.push({
              name: {
                $contL: query.searchInput,
              },
            });
          }

          if (search.$and?.length) {
            queryString.search(search);
          }

          if (templateId) {
            queryString.setFilter({
              field: 'id',
              operator: '$eq',
              value: templateId,
            });
          }

          queryString
            .setLimit(query?.limit ?? 1000)
            .setOffset(query?.offset ?? 0)
            .query();

          request.url = `/proposals/templates?${queryString.queryString}&join=daos||id`;
          request.params = { sort: query?.sort };

          break;
        }
        case API_QUERIES.GET_PROPOSALS_LIST_BY_ACCOUNT_ID: {
          const { query, accountId } = requestCustom.queryRequest?.params || {};

          const queryString = RequestQueryBuilder.create();

          const search: SFields | SConditionAND = {
            $and: [],
          };

          // ids in the list
          if (query.ids) {
            search.$and?.push({
              id: {
                $inL: query.ids,
              },
            });
          }

          // specific DAO
          if (query.daoId) {
            search.$and?.push({
              daoId: {
                $eq: query.daoId,
              },
            });
          }

          // Proposers
          if (query?.proposers) {
            search.$and?.push({
              proposer: {
                $in: query.proposers.split(','),
              },
            });
          }

          // Statuses
          if (
            query?.status === ProposalsFeedStatuses.Active ||
            query?.status === ProposalsFeedStatuses.VoteNeeded
          ) {
            search.$and?.push({
              status: {
                $eq: 'InProgress',
              },
              votePeriodEnd: {
                $gt: 'now',
              },
              voteStatus: {
                $eq: 'Active',
              },
            });
          }

          if (query?.status === ProposalsFeedStatuses.Approved) {
            search.$and?.push({
              status: {
                $eq: 'Approved',
              },
            });
          }

          if (query?.status === ProposalsFeedStatuses.Failed) {
            search.$and?.push({
              $or: [
                {
                  status: {
                    $in: ['Rejected', 'Expired', 'Moved', 'Removed'],
                  },
                },
                {
                  status: {
                    $ne: 'Approved',
                  },
                  votePeriodEnd: {
                    $lt: 'now',
                  },
                },
              ],
            });
          }

          // Categories
          if (query.category === ProposalCategories.Polls) {
            search.$and?.push({
              kind: {
                $cont: ProposalType.Vote,
                $excl: ProposalType.ChangePolicy,
              },
            });
          }

          if (query.category === ProposalCategories.Governance) {
            search.$and?.push({
              $or: [
                {
                  kind: {
                    $cont: ProposalType.ChangeConfig,
                  },
                },
                {
                  kind: {
                    $cont: ProposalType.ChangePolicy,
                  },
                },
              ],
            });
          }

          if (query.category === ProposalCategories.Bounties) {
            search.$and?.push({
              $or: [
                {
                  kind: {
                    $cont: ProposalType.AddBounty,
                  },
                },
                {
                  kind: {
                    $cont: ProposalType.BountyDone,
                  },
                },
              ],
            });
          }

          if (query.category === ProposalCategories.Financial) {
            search.$and?.push({
              kind: {
                $cont: ProposalType.Transfer,
              },
            });
          }

          if (query.category === ProposalCategories.FunctionCalls) {
            search.$and?.push({
              kind: {
                $cont: ProposalType.FunctionCall,
              },
            });
          }

          if (query.category === ProposalCategories.Members) {
            search.$and?.push({
              $or: [
                {
                  kind: {
                    $cont: ProposalType.AddMemberToRole,
                  },
                },
                {
                  kind: {
                    $cont: ProposalType.RemoveMemberFromRole,
                  },
                },
              ],
            });
          }

          if (search.$and?.length) {
            queryString.search(search);
          }

          // DaosIds
          if (query.daosIdsFilter) {
            queryString.setFilter({
              field: 'daoId',
              operator: '$in',
              value: query.daosIdsFilter,
            });
          }

          queryString
            .setLimit(query.limit ?? LIST_LIMIT_DEFAULT)
            .setOffset(query.offset ?? 0)
            .sortBy({
              field: 'createdAt',
              order: 'DESC',
            })
            .query();

          if (accountId) {
            request.url = `/proposals/account-proposals/${accountId}?${
              queryString.queryString
            }${query.accountId ? `&accountId=${query.accountId}` : ''}${
              query?.status === ProposalsFeedStatuses.VoteNeeded
                ? '&filter=permissions.canApprove||$eq||true&filter=permissions.canReject||$eq||true&voted=false'
                : ''
            }`;
          } else {
            request.url = `/proposals?${queryString.queryString}${
              query.accountId ? `&accountId=${query.accountId}` : ''
            }${
              query?.status === ProposalsFeedStatuses.VoteNeeded
                ? '&filter=permissions.canApprove||$eq||true&filter=permissions.canReject||$eq||true&voted=false'
                : ''
            }`;
          }

          break;
        }
        case API_QUERIES.GET_PROPOSALS_LIST: {
          const { query } = requestCustom.queryRequest?.params || {};

          const queryString = new URLSearchParams();

          // ids in the list
          if (query.ids) {
            queryString.append('id', query.ids.join(','));
          }

          // specific DAO
          if (query.daoId) {
            queryString.append('dao', query.daoId);
          }

          // Proposers
          if (query?.proposers) {
            queryString.append('proposer', query.proposers);
          }

          // Statuses
          if (query?.status === ProposalsFeedStatuses.VoteNeeded) {
            queryString.append('active', 'true');
            queryString.append('voted', 'false');
          }

          if (query?.status === ProposalsFeedStatuses.Active) {
            queryString.append('active', 'true');
          }

          if (query?.status === ProposalsFeedStatuses.Approved) {
            queryString.append('status', 'Approved');
          }

          if (query?.status === ProposalsFeedStatuses.Failed) {
            queryString.append('failed', 'true');
          }

          // Categories
          if (query.category === ProposalCategories.Polls) {
            queryString.append('type', ProposalType.Vote);
          }

          if (query.category === ProposalCategories.Governance) {
            queryString.append(
              'type',
              `${ProposalType.ChangeConfig},${ProposalType.ChangePolicy}`
            );
          }

          if (query.category === ProposalCategories.Bounties) {
            queryString.append(
              'type',
              `${ProposalType.AddBounty},${ProposalType.BountyDone}`
            );
          }

          if (query.category === ProposalCategories.Financial) {
            queryString.append('type', `${ProposalType.Transfer}`);
          }

          if (query.category === ProposalCategories.FunctionCalls) {
            queryString.append('type', `${ProposalType.FunctionCall}`);
          }

          if (query.category === ProposalCategories.Members) {
            queryString.append(
              'type',
              `${ProposalType.AddMemberToRole},${ProposalType.RemoveMemberFromRole}`
            );
          }

          // DaosIds
          if (query.daosIdsFilter) {
            queryString.append('dao', query.daosIdsFilter.join(','));
          }

          queryString.append('limit', query.limit ?? LIST_LIMIT_DEFAULT);
          queryString.append('offset', query.offset ?? 0);
          queryString.append('orderBy', 'createdAt');
          queryString.append('order', 'DESC');

          request.url = `/proposals?${queryString}${
            query.accountId ? `&accountId=${query.accountId}` : ''
          }${
            query?.status === ProposalsFeedStatuses.VoteNeeded
              ? '&filter=permissions.canApprove||$eq||true&filter=permissions.canReject||$eq||true&voted=false'
              : ''
          }`;

          break;
        }
        case API_QUERIES.FIND_TRANSFER_PROPOSALS: {
          const { daoId, targetDaoId } =
            requestCustom.queryRequest?.params || {};

          const queryString = RequestQueryBuilder.create();

          const search: SFields | SConditionAND = {
            $and: [
              {
                daoId: {
                  $eq: daoId,
                },
              },
              {
                kind: {
                  $cont: targetDaoId,
                },
              },
              {
                kind: {
                  $cont: ProposalType.Transfer,
                },
              },
              {
                status: {
                  $eq: 'InProgress',
                },
              },
            ],
          };

          queryString.search(search);

          queryString
            .setLimit(200)
            .setOffset(0)
            .sortBy({
              field: 'createdAt',
              order: 'DESC',
            })
            .query();

          request.url = `/proposals?${queryString.queryString}`;

          break;
        }

        case API_QUERIES.UPDATE_NOTIFICATION:
        case API_QUERIES.READ_ALL_NOTIFICATIONS:
        case API_QUERIES.ARCHIVE_ALL_NOTIFICATIONS:
        case API_QUERIES.UPDATE_NOTIFICATION_SETTINGS:
        case API_QUERIES.SEND_CONTACT:
        case API_QUERIES.SEND_VERIFICATION:
        case API_QUERIES.VERIFY:
        case API_QUERIES.TOGGLE_BOUNTY_CONTEXTS:
        case API_QUERIES.SHOW_BOUNTIES:
        case API_QUERIES.UPDATE_DAO_SETTINGS:
        case API_QUERIES.SAVE_PROPOSAL_TEMPLATE:
        case API_QUERIES.CLONE_PROPOSAL_TEMPLATE:
        case API_QUERIES.UPDATE_PROPOSAL_TEMPLATE:
        case API_QUERIES.DELETE_PROPOSAL_TEMPLATE:
        case API_QUERIES.UPDATE_ACCOUNT_SUBSCRIPTION:
        case API_QUERIES.DELETE_ACCOUNT_SUBSCRIPTION:
        case API_QUERIES.DELETE_COMMENT:
        case API_QUERIES.REPORT_COMMENT:
        case API_QUERIES.SEND_COMMENT:
        case API_QUERIES.ADD_AUTHORIZATION: {
          const { accountId, publicKey, signature } = request.data;

          const buff = Buffer.from(`${accountId}|${publicKey}|${signature}`);

          request.data = omit(request.data, [
            'accountId',
            'publicKey',
            'signature',
          ]);

          request.headers = {
            'X-Authorization': `Bearer ${buff.toString('base64')}`,
          };
          break;
        }
        case API_QUERIES.OPEN_SEARCH_AUTHORIZATION: {
          const { username, password } = requestCustom.queryRequest.params as {
            username: string;
            password: string;
          };

          const buff = Buffer.from(`${username}:${password}`);

          request.headers = {
            Authorization: `Basic ${buff.toString('base64')}`,
          };
          break;
        }
        default:
          break;
      }

      return request;
    });

    this.client.interceptors.response.use(response => {
      const responseConfig: CustomAxiosRequestConfig = response.config;

      if (!responseConfig.responseMapper) {
        return response;
      }

      switch (responseConfig.responseMapper.name) {
        case API_MAPPERS.MAP_DAO_DTO_TO_DAO:
          response.data = mapDaoDTOtoDao(response.data);
          break;
        case API_MAPPERS.MAP_DAO_FEED_ITEM_RESPONSE_TO_DAO_FEEDS:
          response.data = {
            ...response.data,
            data: mapDaoFeedItemResponseToDaoFeedItemList(response.data.data),
          };
          break;
        case API_MAPPERS.MAP_DAO_FEED_ITEM_RESPONSE_TO_DAO_FEED:
          response.data = mapDaoFeedItemResponseToDaoFeedItemList(
            response.data
          );
          break;
        case API_MAPPERS.MAP_PROPOSAL_DTO_TO_PROPOSALS:
          response.data = response.data.data.map(mapProposalDTOToProposal);
          break;
        case API_MAPPERS.MAP_PROPOSAL_DTO_TO_PROPOSAL:
          response.data = mapProposalDTOToProposal(response.data);
          break;
        case API_MAPPERS.MAP_PROPOSAL_TO_PROPOSER:
          response.data = mapProposalToProposers(response.data);
          break;
        case API_MAPPERS.MAP_SEARCH_RESULTS_DTO_TO_DATA_OBJECT:
          response.data = mapSearchResultsDTOToDataObject(
            responseConfig.params.query,
            {
              daos: response.data?.daos?.data,
              proposals: response.data?.proposals?.data,
              members: response.data?.members?.data,
            }
          );
          break;
        case API_MAPPERS.MAP_PROPOSAL_FEED_ITEM_RESPONSE_TO_PROPOSAL_FEED_ITEM:
          response.data = response.data.data
            ? {
                ...response.data,
                data: response.data.data.map(
                  mapProposalFeedItemResponseToProposalFeedItem
                ),
              }
            : mapProposalFeedItemResponseToProposalFeedItem(response.data);
          break;
        case API_MAPPERS.MAP_SUBSCRIPTIONS_DTOS_TO_DAO_SUBSCRIPTIONS:
          response.data = mapSubscriptionsDTOsToDaoSubscriptions(response.data);
          break;
        case API_MAPPERS.MAP_TOKENS_DTO_TO_TOKENS:
          response.data = mapTokensDTOToTokens(response.data.data);
          break;
        case API_MAPPERS.MAP_TOKENS_DTO_TO_TOKEN:
          response.data = mapTokensDTOToTokens(response.data);
          break;
        case API_MAPPERS.MAP_NFT_TOKEN_RESPONSE_TO_NFT_TOKEN:
          response.data = mapNftTokenResponseToNftToken(response.data.data);
          break;
        case API_MAPPERS.MAP_RECEIPTS_BY_TOKEN_RESPONSE:
          response.data = mapReceiptsByTokenResponse(
            responseConfig?.responseMapper?.params?.accountId || '',
            responseConfig?.responseMapper?.params?.tokenId || '',
            response.data
          );
          break;
        case API_MAPPERS.MAP_RECEIPTS_RESPONSE:
          response.data = mapReceiptsResponse(
            responseConfig?.responseMapper?.params?.accountId || '',
            response.data
          );
          break;
        case API_MAPPERS.MAP_PROPOSALS_OVERTIME_TO_CHART_DATA:
          response.data = mapProposalsOvertimeToChartData(response.data);
          break;
        case API_MAPPERS.MAP_OVERTIME_TO_CHART_DATA:
          response.data = mapOvertimeToChartData(response.data);
          break;
        case API_MAPPERS.MAP_DRAFT_TO_PROPOSAL_DRAFT:
          response.data = mapDraftToProposalDraft(
            response.data,
            responseConfig?.responseMapper?.params?.dao
          );
          break;
        case API_MAPPERS.MAP_OPEN_SEARCH_RESPONSE_TO_DAOS: {
          response.data = mapOpenSearchResponseToSearchResult(
            'daos',
            SearchResponseIndex.DAO,
            response.data
          );
          break;
        }
        case API_MAPPERS.MAP_OPEN_SEARCH_RESPONSE_TO_BOUNTIES: {
          response.data = mapOpenSearchResponseToSearchResult(
            'bounty',
            SearchResponseIndex.BOUNTY,
            response.data
          );
          break;
        }
        case API_MAPPERS.MAP_OPEN_SEARCH_RESPONSE_TO_PROPOSALS: {
          response.data = mapOpenSearchResponseToSearchResult(
            'proposal',
            SearchResponseIndex.PROPOSAL,
            response.data
          );
          break;
        }
        default:
          break;
      }

      return response;
    });
  }

  get<T = any, R = AxiosResponse<T>>(
    url: string,
    config?: CustomAxiosRequestConfig
  ): Promise<R> {
    return this.client.get<T, R>(url, config);
  }

  post<T, R>(
    url: string,
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    data?: any,
    config?: CustomAxiosRequestConfig
  ): Promise<R> {
    return this.client.post<T, R>(url, data, config);
  }

  patch<T, R>(
    url: string,
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    data?: any,
    config?: CustomAxiosRequestConfig
  ): Promise<R> {
    return this.client.patch<T, R>(url, data, config);
  }

  delete<T, R>(
    url: string,
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    data?: any,
    config?: CustomAxiosRequestConfig
  ): Promise<R> {
    return this.client.delete<T, R>(url, {
      ...config,
      data,
    });
  }
}

export const httpService = new HttpService();

'''
'''--- services/HttpService/index.ts ---
export * from './HttpService';

'''
'''--- services/NotificationsService/NotificationsService.ts ---
import { AxiosResponse } from 'axios';
import { RequestQueryBuilder } from '@nestjsx/crud-request';

import {
  Notification,
  NotificationDTO,
  UpdateNotificationParams,
  UpdateNotificationSettingsParams,
  UpdateNotificationsParams,
} from 'types/notification';
import { PaginationResponse } from 'types/api';

import { httpService } from 'services/HttpService';
import { mapNotificationDtoToNotification } from 'services/NotificationsService/mappers/notification';
import {
  UserContacts,
  NotificationSettingDTO,
} from 'services/NotificationsService/types';

import { logger } from 'utils/logger';
import { PkAndSignature } from 'context/WalletContext/types';
import { API_QUERIES } from 'services/sputnik/constants';

class NotificationsServiceClass {
  private readonly httpService = httpService;

  public async getUserContactConfig(accountId?: string): Promise<UserContacts> {
    if (accountId) {
      const result = await this.httpService.get<UserContacts>(
        `account/${accountId}`
      );

      return result.data;
    }

    return Promise.resolve({
      accountId: '',
      email: '',
      isEmailVerified: false,
      phoneNumber: '',
      isPhoneVerified: false,
    });
  }

  public async sendContact(
    accountId: string,
    contact: string,
    pkAndSignature: PkAndSignature | null,
    isEmail: boolean
  ): Promise<boolean> {
    if (!pkAndSignature) {
      return false;
    }

    const { publicKey, signature } = pkAndSignature;

    try {
      const urlPart = isEmail ? 'email' : 'phone';

      await this.httpService.post(
        `account/${urlPart}`,
        {
          [isEmail ? 'email' : 'phoneNumber']: contact,
          accountId,
          publicKey,
          signature,
        },
        {
          queryRequest: {
            name: API_QUERIES.SEND_CONTACT,
          },
        }
      );

      await this.httpService.post(
        `account/${urlPart}/send-verification`,
        {
          accountId,
          publicKey,
          signature,
        },
        {
          queryRequest: {
            name: API_QUERIES.SEND_VERIFICATION,
          },
        }
      );
    } catch (e) {
      logger.error(e);

      return false;
    }

    return true;
  }

  public async verifyContact(
    accountId: string,
    code: string,
    pkAndSignature: PkAndSignature | null,
    isEmail: boolean
  ) {
    if (!pkAndSignature) {
      return false;
    }

    const { publicKey, signature } = pkAndSignature;

    try {
      const urlPart = isEmail ? 'email' : 'phone';

      await this.httpService.post(
        `account/${urlPart}/verify`,
        {
          code,
          accountId,
          publicKey,
          signature,
        },
        {
          queryRequest: {
            name: API_QUERIES.VERIFY,
          },
        }
      );

      return true;
    } catch (e) {
      logger.error(e);

      return false;
    }
  }

  public async getNotifications(
    showArchived: boolean,
    accountId: string | undefined,
    {
      offset = 0,
      limit = 3000,
      sort = 'createdAt,DESC',
      daoIds,
    }: {
      offset: number;
      limit: number;
      sort: string;
      daoIds: string[] | null;
    }
  ): Promise<PaginationResponse<Notification[]>> {
    if (!accountId) {
      return Promise.resolve({
        data: [],
        page: 0,
        count: 0,
        pageCount: 0,
        total: 0,
      });
    }

    const queryBuilder = RequestQueryBuilder.create();

    queryBuilder
      .setFilter({
        field: 'accountId',
        operator: '$eq',
        value: accountId,
      })
      .setFilter({
        field: 'isArchived',
        operator: '$eq',
        value: showArchived,
      });

    if (daoIds) {
      queryBuilder.setFilter({
        field: 'notification.daoId',
        operator: '$in',
        value: daoIds,
      });
    }

    const queryString = queryBuilder.query();

    const response = await this.httpService.get<
      PaginationResponse<NotificationDTO[]>
    >(`/account-notifications?${queryString}`, {
      params: {
        offset,
        limit,
        sort,
      },
    });

    return {
      total: response.data.total,
      data: mapNotificationDtoToNotification(response.data.data),
    };
  }

  public async getNotificationsCount(
    accountId: string | undefined
  ): Promise<number> {
    const response = await this.httpService.get<{
      accountId: string;
      unreadCount: number;
    }>(`/account-notification-status/${accountId}`);

    return response.data.unreadCount;
  }

  public async updateNotification(
    id: string,
    params: UpdateNotificationParams
  ): Promise<Notification> {
    const response = await this.httpService.patch<
      UpdateNotificationParams,
      AxiosResponse<NotificationDTO>
    >(`/account-notifications/${id}`, params, {
      queryRequest: {
        name: API_QUERIES.UPDATE_NOTIFICATION,
      },
    });

    return mapNotificationDtoToNotification([response.data])[0];
  }

  public async readAllNotifications(
    params: UpdateNotificationsParams
  ): Promise<string> {
    return this.httpService.patch<UpdateNotificationsParams, string>(
      '/account-notifications/read-all',
      params,
      {
        queryRequest: {
          name: API_QUERIES.READ_ALL_NOTIFICATIONS,
        },
      }
    );
  }

  public async archiveAllNotifications(
    params: UpdateNotificationsParams
  ): Promise<string> {
    return this.httpService.patch<UpdateNotificationsParams, string>(
      '/account-notifications/archive-all',
      params,
      {
        queryRequest: {
          name: API_QUERIES.ARCHIVE_ALL_NOTIFICATIONS,
        },
      }
    );
  }

  public async getNotificationsSettings(
    accountId: string,
    daosIds?: string[]
  ): Promise<NotificationSettingDTO[]> {
    if (daosIds && daosIds.length === 0) {
      return [];
    }

    const offset = 0;
    const limit = 1000;
    const sort = 'createdAt,DESC';

    const query = RequestQueryBuilder.create().setFilter({
      field: 'accountId',
      operator: '$eq',
      value: accountId,
    });

    if (!daosIds) {
      query.setFilter({
        field: 'daoId',
        operator: '$isnull',
      });
    }

    const queryString = query.query();

    const response = await this.httpService.get<
      PaginationResponse<NotificationSettingDTO[]>
    >(`/notification-settings?${queryString}`, {
      params: {
        offset,
        limit,
        sort,
      },
    });

    return response.data.data;
  }

  public async updateNotificationSettings(
    params: UpdateNotificationSettingsParams
  ): Promise<NotificationSettingDTO> {
    return this.httpService.post<
      UpdateNotificationSettingsParams,
      NotificationSettingDTO
    >(`/notification-settings`, params, {
      queryRequest: {
        name: API_QUERIES.UPDATE_NOTIFICATION_SETTINGS,
      },
    });
  }
}

export const NotificationsService = new NotificationsServiceClass();

'''
'''--- services/NotificationsService/index.ts ---
export * from './NotificationsService';

'''
'''--- services/NotificationsService/mappers/notification.ts ---
import { NotificationDTO, Notification } from 'types/notification';
import { mapDaoDTOtoDao } from 'services/sputnik/mappers';
import { isToday } from 'date-fns';

export function mapNotificationDtoToNotification(
  notifications: NotificationDTO[]
): Notification[] {
  return notifications.map(
    ({
      accountId,
      isRead,
      isMuted,
      isArchived,
      createdAt,
      notification,
      id,
    }) => {
      const { type, signerId, metadata, targetId, dao, daoId, status } =
        notification;
      const date = new Date(createdAt);

      return {
        id,
        accountId,
        isNew: isToday(date),
        isRead,
        isMuted,
        isArchived,
        dao: mapDaoDTOtoDao(dao),
        status,
        daoId,
        signerId,
        targetId,
        type,
        metadata,
        createdAt:
          createdAt && date && date.toISOString ? date.toISOString() : '',
        isMuteAvailable: false,
        isMarkReadAvailable: true,
        isDeleteAvailable: false,
      };
    }
  );
}

'''
'''--- services/NotificationsService/types.ts ---
import { NotifiedActionType } from 'types/notification';

export type UserContacts = {
  accountId: string;
  email: string;
  isEmailVerified: boolean;
  phoneNumber: string;
  isPhoneVerified: boolean;
};

export type NotificationSettingDTO = {
  isArchived: false;
  createdAt: string;
  updatedAt: string;
  id: string;
  accountId: string;
  daoId: string | null;
  types: NotifiedActionType[];
  mutedUntilTimestamp: string;
  isAllMuted: boolean;
  enableEmail: boolean;
  enableSms: boolean;
};

export type NotificationSettingsResponse = {
  count: number;
  total: number;
  page: number;
  pageCount: number;
  data: NotificationSettingDTO[];
};

'''
'''--- services/SearchService/OpenSearchApiService.ts ---
import { HttpService } from 'services/HttpService';
import { DaoFeedItem } from 'types/dao';
import { appConfig } from 'config';
import { API_MAPPERS } from 'services/sputnik/constants';
import { buildAccountDaosQuery } from 'services/SearchService/builders/daos';

export class OpenSearchApiService {
  private readonly httpService;

  constructor() {
    this.httpService = new HttpService({
      baseURL: process.browser
        ? window.APP_CONFIG.SEARCH_API_URL
        : appConfig.SEARCH_API_URL,
    });
  }

  async getAccountDaos(account: string): Promise<DaoFeedItem[]> {
    const { data } = await this.httpService.post<
      unknown,
      { data: { data: DaoFeedItem[]; total: number } }
    >(
      `/dao/_search`,
      {
        query: buildAccountDaosQuery(account),
      },
      {
        responseMapper: {
          name: API_MAPPERS.MAP_OPEN_SEARCH_RESPONSE_TO_DAOS,
        },
      }
    );

    return data.data;
  }
}

'''
'''--- services/SearchService/SearchService.ts ---
import { HttpService } from 'services/HttpService';
import {
  OpenSearchResponse,
  SearchParams,
  SearchResponseIndex,
} from 'services/SearchService/types';
import { SearchResultsData } from 'types/search';
import { configService } from 'services/ConfigService';
import { AxiosResponse, CancelToken } from 'axios';
import { mapOpenSearchResponseToSearchResult } from 'services/SearchService/mappers/search';
import { DaoFeedItem } from 'types/dao';
import { ProposalComment, ProposalFeedItem } from 'types/proposal';
import { DraftProposalFeedItem } from 'types/draftProposal';
import { mapIndexToResultKey } from 'services/SearchService/helpers';

export class SearchService {
  private readonly httpService;

  constructor() {
    const { appConfig } = configService.get();

    this.httpService = new HttpService({
      baseURL: appConfig.SEARCH_API_URL,
    });
  }

  async fetchResultsByIndex(
    query: string,
    index: SearchResponseIndex,
    size: number | undefined,
    field: string | undefined,
    cancelToken: CancelToken | undefined,
    from = 0
  ): Promise<AxiosResponse<OpenSearchResponse | null>> {
    return this.httpService.post<
      unknown,
      AxiosResponse<OpenSearchResponse | null>
    >(
      `/${index}/_search`,
      {
        query: {
          simple_query_string: {
            query,
            fields: field ? [field] : [],
          },
        },
        size,
        from,
      },
      {
        cancelToken,
      }
    );
  }

  public async search(params: SearchParams): Promise<SearchResultsData | null> {
    if (!this.httpService) {
      return null;
    }

    try {
      if (params.index) {
        const resRaw = await this.fetchResultsByIndex(
          params.query,
          params.index as SearchResponseIndex,
          params.size,
          params.field,
          params.cancelToken
        );

        const res = mapOpenSearchResponseToSearchResult(
          params.query,
          params.index as SearchResponseIndex,
          resRaw.data
        );

        const resultKey = mapIndexToResultKey(
          params.index as SearchResponseIndex
        );

        return {
          query: params.query,
          daos: [],
          proposals: [],
          drafts: [],
          comments: [],
          members: [],
          bounties: [],
          nfts: [],
          draftProposalComments: [],
          [resultKey]: res.data,
          totals: {
            daos: 0,
            proposals: 0,
            drafts: 0,
            comments: 0,
            nfts: 0,
            draftProposalComments: 0,
            [resultKey]: res.total,
          },
          opts: {
            query: params.query,
            field: params.field,
            index: params.index,
          },
        };
      }

      const [daos, proposals, drafts, comments] = await Promise.all([
        this.fetchResultsByIndex(
          params.query,
          SearchResponseIndex.DAO,
          params.size,
          params.field,
          params.cancelToken
        ),
        this.fetchResultsByIndex(
          params.query,
          SearchResponseIndex.PROPOSAL,
          params.size,
          params.field,
          params.cancelToken
        ),
        this.fetchResultsByIndex(
          params.query,
          SearchResponseIndex.DRAFT_PROPOSAL,
          params.size,
          params.field,
          params.cancelToken
        ),
        this.fetchResultsByIndex(
          params.query,
          SearchResponseIndex.COMMENT,
          params.size,
          params.field,
          params.cancelToken
        ),
      ]);

      const daosRes = mapOpenSearchResponseToSearchResult(
        params.query,
        SearchResponseIndex.DAO,
        daos.data
      );

      const proposalsRes = mapOpenSearchResponseToSearchResult(
        params.query,
        SearchResponseIndex.PROPOSAL,
        proposals.data
      );

      const draftsRes = mapOpenSearchResponseToSearchResult(
        params.query,
        SearchResponseIndex.DRAFT_PROPOSAL,
        drafts.data
      );

      const commentsRes = mapOpenSearchResponseToSearchResult(
        params.query,
        SearchResponseIndex.COMMENT,
        comments.data
      );

      return {
        query: params.query,
        daos: daosRes.data as DaoFeedItem[],
        proposals: proposalsRes.data as ProposalFeedItem[],
        drafts: draftsRes.data as DraftProposalFeedItem[],
        comments: commentsRes.data as ProposalComment[],
        bounties: [],
        members: [],
        nfts: [],
        draftProposalComments: [],
        totals: {
          daos: daosRes.total,
          proposals: proposalsRes.total,
          drafts: draftsRes.total,
          comments: commentsRes.total,
          nfts: 0,
          draftProposalComments: 0,
        },
        opts: {
          query: params.query,
          field: params.field,
          index: params.index,
        },
      };
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async searchPaginated(
    params: SearchParams & { from: number }
  ): Promise<AxiosResponse<OpenSearchResponse | null> | null> {
    if (!this.httpService) {
      return null;
    }

    try {
      return await this.fetchResultsByIndex(
        params.query,
        params.index as SearchResponseIndex,
        params.size,
        params.field,
        params.cancelToken,
        params.from
      );
    } catch (error) {
      console.error(error);

      return null;
    }
  }
}

'''
'''--- services/SearchService/builders/bounties.ts ---
import { OpenSearchQuery } from 'services/SearchService/types';

export function buildBountiesQuery(params: {
  daoId?: string;
  account?: string;
  bountyFilter: string | null;
  bountyPhase: string | null;
}): OpenSearchQuery {
  const q: OpenSearchQuery = {
    bool: {
      must: [] as Record<string, unknown>[],
      must_not: [] as Record<string, unknown>[],
      should: [] as Record<string, unknown>[],
    },
  };

  // specific DAO
  if (params.daoId) {
    q.bool?.must?.push({
      simple_query_string: {
        query: `"${params.daoId}"`,
        fields: ['daoId'],
      },
    });
  }

  switch (params.bountyFilter) {
    case 'proposer': {
      q.bool?.must?.push({
        simple_query_string: {
          query: params.account
            ? params.account.substring(0, params.account.indexOf('.'))
            : '',
          fields: ['accounts'],
        },
      });

      break;
    }
    case 'numberOfClaims': {
      q.bool?.must?.push({
        simple_query_string: {
          query: 0,
          fields: ['numberOfClaims'],
        },
      });

      break;
    }
    default: {
      // do nothing
    }
  }

  switch (params.bountyPhase) {
    case 'proposalPhase': {
      const condition = {
        simple_query_string: {
          query: 'InProgress',
          fields: ['status'],
        },
      };
      const conditionBounty = {
        simple_query_string: {
          query: 'null',
          fields: ['bountyId'],
        },
      };

      q.bool?.must?.push(condition);
      q.bool?.must?.push(conditionBounty);

      break;
    }
    case 'inProgress': {
      const condition = {
        simple_query_string: {
          query: 0,
          fields: ['numberOfClaims'],
        },
      };

      q.bool?.must_not?.push(condition);

      break;
    }

    case 'availableBounty': {
      const mnCondition = {
        simple_query_string: {
          query: 0,
          fields: ['times'],
        },
      };

      const condition = {
        simple_query_string: {
          query: 0,
          fields: ['numberOfClaims'],
        },
      };

      q.bool?.must_not?.push(mnCondition);
      q.bool?.must?.push(condition);

      break;
    }
    case 'completed': {
      const condition = {
        simple_query_string: {
          query: 0,
          fields: ['times'],
        },
      };

      q.bool?.must?.push(condition);

      break;
    }

    default: {
      break;
    }
  }

  return q;
}

'''
'''--- services/SearchService/builders/dao.ts ---
import { OpenSearchQuery } from 'services/SearchService/types';

export function buildDaoQuery(daoId: string): OpenSearchQuery {
  return {
    bool: {
      must: [
        {
          simple_query_string: {
            query: `"${daoId}"`,
            fields: ['id'],
          },
        },
      ],
    },
  };
}

'''
'''--- services/SearchService/builders/daos.ts ---
import { OpenSearchQuery } from 'services/SearchService/types';

export function buildAccountDaosQuery(
  account: string,
  includeSubscribed?: boolean
): OpenSearchQuery {
  if (includeSubscribed) {
    return {
      bool: {
        should: [
          {
            simple_query_string: {
              query: account.substring(0, account.indexOf('.')),
              fields: ['accounts'],
            },
          },
          {
            terms: {
              followers: [account],
            },
          },
        ],
      },
    };
  }

  return {
    bool: {
      must: [
        {
          simple_query_string: {
            query: account.substring(0, account.indexOf('.')),
            fields: ['accounts'],
          },
        },
      ],
    },
  };
}

export function buildDaosListQuery(
  filter: string | undefined
): OpenSearchQuery {
  if (!filter) {
    return {
      match_all: {},
    };
  }

  return {
    bool: {
      must: [
        {
          simple_query_string: {
            query: filter,
            fields: ['status'],
          },
        },
      ],
    },
  };
}

'''
'''--- services/SearchService/builders/draft.ts ---
import { OpenSearchQuery } from 'services/SearchService/types';

export function buildDraftQuery(query: {
  daoId: string;
  draftId: string;
}): OpenSearchQuery {
  let q: OpenSearchQuery = {
    bool: {
      must: [] as Record<string, unknown>[],
    },
  };

  // specific DAO
  if (query.daoId) {
    q.bool?.must?.push({
      simple_query_string: {
        query: `"${query.daoId}"`,
        fields: ['daoId'],
      },
    });
  }

  // specific draft
  if (query.draftId) {
    q.bool?.must?.push({
      simple_query_string: {
        query: `"${query.draftId}"`,
        fields: ['id'],
      },
    });
  }

  if (
    !q.bool?.must?.length &&
    !q.bool?.must_not?.length &&
    !q.bool?.should?.length
  ) {
    q = { match_all: {} };
  }

  return q;
}

'''
'''--- services/SearchService/builders/draftProposalComments.ts ---
import { OpenSearchQuery } from 'services/SearchService/types';

export function buildDraftProposalCommentsQuery(params: {
  daoId?: string;
  draftId?: string;
}): OpenSearchQuery {
  const { daoId, draftId } = params;

  let q: OpenSearchQuery = {
    bool: {
      must: [
        {
          match: {
            isArchived: false,
          },
        },
      ] as Record<string, unknown>[],
      must_not: [] as Record<string, unknown>[],
      should: [] as Record<string, unknown>[],
    },
  };

  if (daoId) {
    q.bool?.must?.push({
      simple_query_string: {
        query: `"${daoId}"`,
        fields: ['daoId'],
      },
    });
  }

  if (draftId) {
    q.bool?.must?.push({
      simple_query_string: {
        query: `"${draftId}"`,
        fields: ['contextId'],
      },
    });
  }

  if (
    !q.bool?.must?.length &&
    !q.bool?.must_not?.length &&
    !q.bool?.should?.length
  ) {
    q = { match_all: {} };
  }

  return q;
}

'''
'''--- services/SearchService/builders/draftProposals.ts ---
import { OpenSearchQuery } from 'services/SearchService/types';
import { ProposalCategories, ProposalType } from 'types/proposal';
import { DraftState } from 'services/DraftsService/types';

export function buildDraftProposalsQuery(
  params: {
    category?: ProposalCategories;
    daoId: string;
    state: DraftState;
    view: string;
    search?: string;
  },
  accountId: string
): OpenSearchQuery {
  const { category, daoId, state, view } = params;

  let q: OpenSearchQuery = {
    bool: {
      must: [] as Record<string, unknown>[],
      must_not: [] as Record<string, unknown>[],
      should: [] as Record<string, unknown>[],
    },
  };

  if (daoId) {
    q.bool?.must?.push({
      simple_query_string: {
        query: `"${daoId}"`,
        fields: ['daoId'],
      },
    });
  }

  // State
  if (state && state !== 'all') {
    q.bool?.must?.push({
      simple_query_string: {
        query: state,
        fields: ['state'],
      },
    });
  }

  // View
  if (view === 'unread') {
    q.bool?.must_not?.push({
      terms: {
        viewAccounts: [accountId],
      },
    });
  }

  // Categories
  if (category === ProposalCategories.Polls) {
    q.bool?.must?.push({
      simple_query_string: {
        query: ProposalType.Vote,
        fields: ['type'],
      },
    });
  }

  if (category === ProposalCategories.Governance) {
    q.bool?.must?.push({
      bool: {
        should: [ProposalType.ChangeConfig, ProposalType.ChangePolicy].map(
          item => ({
            simple_query_string: {
              query: item,
              fields: ['type'],
            },
          })
        ),
      },
    });
  }

  if (category === ProposalCategories.Bounties) {
    q.bool?.must?.push({
      bool: {
        should: [ProposalType.AddBounty, ProposalType.BountyDone].map(item => ({
          simple_query_string: {
            query: item,
            fields: ['type'],
          },
        })),
      },
    });
  }

  if (category === ProposalCategories.Financial) {
    q.bool?.must?.push({
      simple_query_string: {
        query: ProposalType.Transfer,
        fields: ['type'],
      },
    });
  }

  if (category === ProposalCategories.FunctionCalls) {
    q.bool?.must?.push({
      simple_query_string: {
        query: ProposalType.FunctionCall,
        fields: ['type'],
      },
    });
  }

  if (category === ProposalCategories.Members) {
    q.bool?.must?.push({
      bool: {
        should: [
          ProposalType.AddMemberToRole,
          ProposalType.RemoveMemberFromRole,
        ].map(item => ({
          simple_query_string: {
            query: item,
            fields: ['type'],
          },
        })),
      },
    });
  }

  // account
  if (accountId) {
    q.bool?.must?.push({
      simple_query_string: {
        query: accountId.substring(0, accountId.indexOf('.')),
        fields: ['accounts'],
      },
    });
  }

  if (
    !q.bool?.must?.length &&
    !q.bool?.must_not?.length &&
    !q.bool?.should?.length
  ) {
    q = { match_all: {} };
  }

  return q;
}

'''
'''--- services/SearchService/builders/nfts.ts ---
import { OpenSearchQuery } from 'services/SearchService/types';

export function buildNftsQuery(daoId: string): OpenSearchQuery {
  return {
    bool: {
      must: [
        {
          simple_query_string: {
            query: `"${daoId}"`,
            fields: ['daoId'],
          },
        },
      ],
    },
  };
}

'''
'''--- services/SearchService/builders/proposal.ts ---
import { OpenSearchQuery } from 'services/SearchService/types';

export function buildProposalQuery(query: {
  daoId: string;
  proposalId: string;
}): OpenSearchQuery {
  let q: OpenSearchQuery = {
    bool: {
      must: [] as Record<string, unknown>[],
    },
  };

  // specific DAO
  if (query.daoId) {
    q.bool?.must?.push({
      simple_query_string: {
        query: `"${query.daoId}"`,
        fields: ['daoId'],
      },
    });
  }

  // specific proposal
  if (query.proposalId) {
    q.bool?.must?.push({
      simple_query_string: {
        query: `"${query.proposalId}"`,
        fields: ['id'],
      },
    });
  }

  if (
    !q.bool?.must?.length &&
    !q.bool?.must_not?.length &&
    !q.bool?.should?.length
  ) {
    q = { match_all: {} };
  }

  return q;
}

'''
'''--- services/SearchService/builders/proposals.ts ---
import { ProposalsListParams } from 'services/sputnik/types';
import { OpenSearchQuery } from 'services/SearchService/types';
import {
  ProposalCategories,
  ProposalsFeedStatuses,
  ProposalType,
} from 'types/proposal';

export function buildProposalsQuery(
  query: ProposalsListParams,
  accountId?: string
): OpenSearchQuery {
  let q: OpenSearchQuery = {
    bool: {
      must: [] as Record<string, unknown>[],
      must_not: [] as Record<string, unknown>[],
      should: [] as Record<string, unknown>[],
    },
  };

  // ids in the list
  if (query.ids) {
    q.bool?.must?.push({
      bool: {
        should: query.ids.map(item => ({
          simple_query_string: {
            query: item,
            fields: ['id'],
          },
        })),
      },
    });
  }

  // specific DAO
  if (query.daoId) {
    q.bool?.must?.push({
      simple_query_string: {
        query: `"${query.daoId}"`,
        fields: ['daoId'],
      },
    });
  }

  // Proposers
  if (query?.proposers) {
    q.bool?.must?.push({
      bool: {
        should: query?.proposers.split(',').map(item => ({
          simple_query_string: {
            query: `"${item}"`,
            fields: ['proposer'],
          },
        })),
      },
    });
  }

  // Statuses
  if (
    query?.status === ProposalsFeedStatuses.Active ||
    query?.status === ProposalsFeedStatuses.VoteNeeded
  ) {
    q.bool?.must?.push({
      simple_query_string: {
        query: 'InProgress',
        fields: ['status'],
      },
    });
    q.bool?.must?.push({
      simple_query_string: {
        query: 'Active',
        fields: ['voteStatus'],
      },
    });
  }

  if (query?.status === ProposalsFeedStatuses.Approved) {
    q.bool?.must?.push({
      simple_query_string: {
        query: 'Approved',
        fields: ['status'],
      },
    });
  }

  if (query?.status === ProposalsFeedStatuses.Failed) {
    q.bool?.must?.push({
      bool: {
        should: ['Rejected', 'Expired', 'Moved', 'Removed'].map(item => ({
          simple_query_string: {
            query: item,
            fields: ['status'],
          },
        })),
      },
    });
  }

  // Categories
  if (query.category === ProposalCategories.Polls) {
    q.bool?.must?.push({
      simple_query_string: {
        query: ProposalType.Vote,
        fields: ['type'],
      },
    });
  }

  if (query.category === ProposalCategories.Governance) {
    q.bool?.must?.push({
      bool: {
        should: [ProposalType.ChangeConfig, ProposalType.ChangePolicy].map(
          item => ({
            simple_query_string: {
              query: item,
              fields: ['type'],
            },
          })
        ),
      },
    });
  }

  if (query.category === ProposalCategories.Bounties) {
    q.bool?.must?.push({
      bool: {
        should: [ProposalType.AddBounty, ProposalType.BountyDone].map(item => ({
          simple_query_string: {
            query: item,
            fields: ['type'],
          },
        })),
      },
    });
  }

  if (query.category === ProposalCategories.Financial) {
    q.bool?.must?.push({
      simple_query_string: {
        query: ProposalType.Transfer,
        fields: ['type'],
      },
    });
  }

  if (query.category === ProposalCategories.FunctionCalls) {
    q.bool?.must?.push({
      simple_query_string: {
        query: ProposalType.FunctionCall,
        fields: ['type'],
      },
    });
  }

  if (query.category === ProposalCategories.Members) {
    q.bool?.must?.push({
      bool: {
        should: [
          ProposalType.AddMemberToRole,
          ProposalType.RemoveMemberFromRole,
        ].map(item => ({
          simple_query_string: {
            query: item,
            fields: ['type'],
          },
        })),
      },
    });
  }

  // account
  if (accountId) {
    q.bool?.must?.push({
      simple_query_string: {
        query: accountId.substring(0, accountId.indexOf('.')),
        fields: ['accounts'],
      },
    });
  }

  if (
    !q.bool?.must?.length &&
    !q.bool?.must_not?.length &&
    !q.bool?.should?.length
  ) {
    q = { match_all: {} };
  }

  return q;
}

'''
'''--- services/SearchService/builders/tokens.ts ---
import { OpenSearchQuery } from 'services/SearchService/types';

export function buildTokensQuery(account?: string): OpenSearchQuery {
  if (!account) {
    return {
      match_all: {},
    };
  }

  return {
    bool: {
      must: [
        {
          simple_query_string: {
            query: account,
            fields: ['accountId'],
          },
        },
      ],
    },
  };
}

'''
'''--- services/SearchService/constants.ts ---
export const OPEN_SEARCH_INDEX = {
  dao: ['id', 'description', 'accounts'],
  proposal: ['proposer', 'description', 'type', 'votes', 'status', 'daoId'],
  draftproposal: ['title', 'proposer', 'description', 'daoId'],
  // comment: ['message', 'accounts'],
};

'''
'''--- services/SearchService/helpers.ts ---
import {
  OpenSearchResponse,
  SearchResponseIndex,
} from 'services/SearchService/types';
import { SearchResultsData } from 'types/search';
import { AxiosResponse } from 'axios';

export function mapIndexToResultKey(index: SearchResponseIndex): string {
  switch (index) {
    case SearchResponseIndex.DAO: {
      return 'daos';
    }
    case SearchResponseIndex.PROPOSAL: {
      return 'proposals';
    }
    case SearchResponseIndex.DRAFT_PROPOSAL: {
      return 'drafts';
    }

    case SearchResponseIndex.COMMENT:
    default: {
      return 'comments';
    }
  }
}

export function isOpenSearchResponse(
  params: SearchResultsData | AxiosResponse<OpenSearchResponse | null> | null
): params is AxiosResponse<OpenSearchResponse | null> {
  return (
    // eslint-disable-next-line no-underscore-dangle
    (params as AxiosResponse<OpenSearchResponse | null>)?.data?._shards !==
    undefined
  );
}

'''
'''--- services/SearchService/index.ts ---
export * from './SearchService';
export * from './OpenSearchApiService';

'''
'''--- services/SearchService/mappers/bounty.ts ---
import { BountyIndex } from 'services/SearchService/types';
import { BountyContext } from 'types/bounties';
import { toMillis } from 'utils/format';
import { getAwsImageUrl } from 'services/sputnik/mappers/utils/getAwsImageUrl';
import get from 'lodash/get';
import { fromBase64ToMetadata } from 'services/sputnik/mappers';

export function mapBountyIndexToBountyContext(
  item: BountyIndex
): BountyContext {
  const { proposal } = item;

  const config = get(proposal, 'dao.config');
  const meta = config?.metadata ? fromBase64ToMetadata(config.metadata) : null;

  return {
    id: item.id,
    daoId: item.daoId,
    proposal: proposal
      ? {
          id: proposal.id,
          daoId: proposal.daoId,
          bountyClaimId: proposal.bountyClaimId ?? '',
          proposalId: proposal.proposalId,
          createdAt: new Date(toMillis(item.createTimestamp)).toISOString(),
          updatedAt: '',
          description: proposal.description,
          transactionHash: proposal.transactionHash,
          voteYes: 0,
          voteNo: 0,
          voteRemove: 0,
          proposer: proposal.proposer,
          status: proposal.status,
          voteStatus: proposal.voteStatus,
          kind: proposal.kind ?? {
            type: 'AddBounty',
            bounty: { times: item.times },
          },
          dao: {
            id: proposal.dao?.id,
            name: proposal.dao?.config.name ?? '',
            logo: meta?.flag
              ? getAwsImageUrl(meta.flag)
              : '/flags/defaultDaoFlag.png',
            flagCover: getAwsImageUrl(meta?.flagCover),
            flagLogo: getAwsImageUrl(meta?.flagLogo),
            legal: meta?.legal || {},
            numberOfMembers: proposal.dao?.numberOfMembers,
            policy: proposal.dao?.policy,
          },
          votePeriodEnd: new Date(
            toMillis(proposal.votePeriodEnd)
          ).toISOString(),
          votes: JSON.parse(proposal.votes),
          permissions: {
            canApprove: false,
            canReject: false,
            canDelete: false,
            isCouncil: false,
          },
        }
      : null,
    bounty: {
      bountyId: item.bountyId,
      bountyClaims: JSON.parse(item.bountyClaims),
      daoId: item.daoId,
      id: item.id,
      amount: item.amount,
      bountyDoneProposals: JSON.parse(item.bountyDoneProposals),
      createdAt: new Date(toMillis(item.createTimestamp)).toISOString(),
      description: item.description,
      maxDeadline: item.maxDeadline,
      proposalId: item.proposalId,
      times: item.times,
      token: item.token,
      numberOfClaims: item.numberOfClaims,
    },
    commentsCount: item.commentsCount,
  };
}

'''
'''--- services/SearchService/mappers/dao.ts ---
import get from 'lodash/get';

import { DaoIndex } from 'services/SearchService/types';
import { DAO } from 'types/dao';
import { DaoRole } from 'types/role';

import { toMillis } from 'utils/format';
import { getAwsImageUrl } from 'services/sputnik/mappers/utils/getAwsImageUrl';
import { fromBase64ToMetadata } from 'services/sputnik/mappers';
import { getParsedPolicy } from 'services/SearchService/mappers/helpers';
import { mapTokenIndexToToken } from 'services/SearchService/mappers/tokens';

export function mapDaoIndexToDao(daoIndex: DaoIndex): DAO {
  const config = get(daoIndex, 'config');

  let meta;

  try {
    meta = config?.metadata ? fromBase64ToMetadata(config.metadata) : null;
  } catch (err) {
    console.error(`Failed to parse DAO metadata, daoId: ${daoIndex.id}`);

    meta = null;
  }

  const policy =
    typeof daoIndex.policy === 'string'
      ? getParsedPolicy(daoIndex.policy)
      : daoIndex.policy;

  // Get DAO groups
  const daoGroups =
    policy?.roles
      ?.filter((item: DaoRole) => item.kind === 'Group')
      .map((item: DaoRole) => {
        return {
          members: item.accountIds || [],
          name: item.name,
          permissions: item.permissions,
          votePolicy: item.votePolicy,
          slug: item.name,
        };
      }) ?? [];

  const daoMembersList = daoGroups
    .map(({ members }: { members: string[] }) => members)
    .flat()
    .reduce((acc: string[], member: string) => {
      if (!acc.includes(member)) {
        acc.push(member);
      }

      return acc;
    }, []);
  const numberOfMembers = daoMembersList.length;

  return {
    createdAt: new Date(toMillis(daoIndex.createTimestamp)).toISOString(),
    id: daoIndex.id,
    members: numberOfMembers,
    groups: daoGroups,
    activeProposalsCount: daoIndex.activeProposalCount ?? 0,
    totalProposalsCount: daoIndex.totalProposalCount ?? 0,
    totalDaoFunds: daoIndex.totalDaoFunds ?? 0,

    txHash: daoIndex.transactionHash ?? '',
    name: config?.name ?? '',
    description: config?.purpose ?? '',
    displayName: meta?.displayName ?? '',

    tokens: daoIndex.tokens.map(mapTokenIndexToToken),

    links: meta?.links || [],
    logo: meta?.flag ? getAwsImageUrl(meta?.flag) : '/flags/defaultDaoFlag.png',
    flagCover: getAwsImageUrl(meta?.flagCover),
    flagLogo: getAwsImageUrl(meta?.flagLogo),
    legal: meta?.legal || {},
    policy,
    daoMembersList,
    daoVersion: daoIndex.daoVersion ?? null,
    daoVersionHash: '',
    funds: '',
    lastProposalId: daoIndex.lastProposalId,
    totalProposals: daoIndex.totalProposalCount ?? 0,
    delegations: daoIndex.delegations ?? [],
  };
}

'''
'''--- services/SearchService/mappers/draft.ts ---
import { DraftProposalIndex } from 'services/SearchService/types';
import { DraftProposal } from 'types/draftProposal';
import { ProposalVariant } from 'types/proposal';

export function mapDraftProposalIndexToDraftProposal(
  index: DraftProposalIndex | undefined,
  accountId?: string
): DraftProposal | undefined {
  if (!index) {
    return undefined;
  }

  return {
    ...index,
    proposalVariant:
      index.kind?.proposalVariant ?? ProposalVariant.ProposeDefault,
    kind: index.kind,
    type: index.type,
    title: index.title,
    description: index.description,
    text: '',
    views: index.viewAccounts?.length ?? 0,
    replies: index.replies,
    saves: index.saveAccounts?.length ?? 0,
    createdAt: index.createTimestamp
      ? new Date(index.createTimestamp).toISOString()
      : null,
    updatedAt: index.updateTimestamp
      ? new Date(index.updateTimestamp).toISOString()
      : null,
    isRead: accountId ? index.viewAccounts?.includes(accountId) : false,
    isSaved: accountId ? index.saveAccounts?.includes(accountId) : false,
    state: index.state,
    history: index.history
      ? index.history
          .sort((a, b) => a.timestamp - b.timestamp)
          .map(item => {
            return {
              ...item,
              dao: index.dao
                ? (index.dao as unknown as DraftProposal['dao'])
                : null,
              proposalVariant: index.kind.proposalVariant,
              updatedAt: new Date(item.timestamp).toISOString(),
            };
          })
      : [],
    dao: index.dao ? (index.dao as unknown as DraftProposal['dao']) : null,
    votes: {},
    proposer: index.proposer,
    commentsCount: index.replies,
  } as unknown as DraftProposal;
}

'''
'''--- services/SearchService/mappers/draftComment.ts ---
import { DraftComment } from 'services/DraftsService/types';
import { DraftCommentIndex } from 'services/SearchService/types';

export function mapDraftCommentIndexToDraftComment(
  index: DraftCommentIndex
): DraftComment {
  return {
    id: index.id,
    contextId: index.contextId,
    contextType: index.contextType,
    author: index.author,
    message: index.message,
    replyTo: index.replyTo,
    replies:
      index.replies?.map(item => mapDraftCommentIndexToDraftComment(item)) ??
      [],
    likeAccounts: index.likeAccounts ?? [],
    dislikeAccounts: index.dislikeAccounts ?? [],
    createdAt: index.createTimestamp
      ? new Date(index.createTimestamp).toISOString()
      : '',
    updatedAt: index.processingTimeStamp
      ? new Date(index.processingTimeStamp).toISOString()
      : '',
  };
}

'''
'''--- services/SearchService/mappers/helpers.ts ---
import { DaoPolicy } from 'services/sputnik/types/policy';

export function getParsedVotes(
  votes: string
): Record<string, 'Approve' | 'Reject' | 'Remove'> {
  try {
    return JSON.parse(votes);
  } catch (e) {
    return {};
  }
}

export function getParsedPolicy(policy: string): DaoPolicy {
  try {
    return JSON.parse(policy);
  } catch (e) {
    return {} as DaoPolicy;
  }
}

'''
'''--- services/SearchService/mappers/nft.ts ---
import { NftToken } from 'types/token';
import { NftIndex } from 'services/SearchService/types';

export function mapNftIndexToNftToken(item: NftIndex): NftToken {
  const { id, contractId, baseUri, metadata, contract, tokenId } = item;

  const { media, reference } = metadata;

  const isMediaContainsUrl = media?.indexOf('http') === 0;

  const uri = [];
  const isExternalReference = false;

  if (baseUri && media && !isMediaContainsUrl) {
    uri.push({ uri: `${baseUri}/${media}`, isExternalReference: false });
  }

  if (isMediaContainsUrl) {
    uri.push({ uri: media, isExternalReference: false });
  }

  if (contract?.baseUri && !media && reference) {
    uri.push({
      uri: `${contract?.baseUri}/${reference}`,
      isExternalReference: true,
    });
  }

  if (contract.baseUri && media && !isMediaContainsUrl) {
    uri.push({
      uri: `${contract?.baseUri}/${media}`,
      isExternalReference: false,
    });
  }

  if (media) {
    uri.push({
      uri: `https://cloudflare-ipfs.com/ipfs/${media}`,
      isExternalReference: false,
    });
  }

  return {
    id,
    uri,
    description: metadata.description ?? null,
    isExternalReference,
    contractId,
    contractName: contract.name,
    tokenId,
  };
}

'''
'''--- services/SearchService/mappers/search.ts ---
import {
  BountyIndex,
  DaoIndex,
  DraftCommentIndex,
  DraftProposalIndex,
  NftIndex,
  OpenSearchResponse,
  ProposalIndex,
  SearchResponseIndex,
  SearchResult,
} from 'services/SearchService/types';
import { DaoFeedItem } from 'types/dao';
import {
  ProposalComment,
  ProposalFeedItem,
  ProposalVariant,
} from 'types/proposal';
import {
  fromBase64ToMetadata,
  getVotesStatistic,
} from 'services/sputnik/mappers';
import { DraftProposalFeedItem } from 'types/draftProposal';
import get from 'lodash/get';
import { getAwsImageUrl } from 'services/sputnik/mappers/utils/getAwsImageUrl';
import { DATA_SEPARATOR } from 'constants/common';
import { toMillis } from 'utils/format';
import { BountyContext } from 'types/bounties';
import { getParsedVotes } from 'services/SearchService/mappers/helpers';
import { NftToken } from 'types/token';
import { mapNftIndexToNftToken } from 'services/SearchService/mappers/nft';
import { mapDraftCommentIndexToDraftComment } from 'services/SearchService/mappers/draftComment';
import { mapDraftProposalIndexToDraftProposal } from 'services/SearchService/mappers/draft';
import { mapBountyIndexToBountyContext } from './bounty';

export function mapDaoIndexToDaoFeedItem(
  daoIndex: DaoIndex,
  accountId?: string
): DaoFeedItem {
  const config = get(daoIndex, 'config');

  let meta;

  try {
    meta = config?.metadata ? fromBase64ToMetadata(config.metadata) : null;
  } catch (err) {
    console.error(`Failed to parse DAO metadata, daoId: ${daoIndex.id}`);

    meta = null;
  }

  return {
    createdAt: new Date(toMillis(daoIndex.createTimestamp)).toISOString(),
    id: daoIndex.id,
    numberOfMembers: daoIndex.numberOfMembers,
    numberOfGroups: daoIndex.numberOfGroups,
    accountIds: daoIndex.accountIds,
    activeProposalCount: daoIndex.activeProposalCount,
    totalProposalCount: daoIndex.totalProposalCount,
    totalDaoFunds: daoIndex.totalDaoFunds,

    txHash: daoIndex.transactionHash ?? '',
    name: config?.name ?? '',
    description: config?.purpose ?? '',
    displayName: meta?.displayName ?? '',

    links: meta?.links || [],
    logo: meta?.flag ? getAwsImageUrl(meta?.flag) : '/flags/defaultDaoFlag.png',
    flagCover: getAwsImageUrl(meta?.flagCover),
    flagLogo: getAwsImageUrl(meta?.flagLogo),
    legal: meta?.legal || {},
    policy: {
      daoId: daoIndex.id,
      roles: [], // ???
    },

    council: daoIndex.council ?? null,
    isCouncil: accountId ? daoIndex.council?.includes(accountId) : false,
  };
}

export function mapProposalIndexToProposalFeedItem(
  item: ProposalIndex
): ProposalFeedItem {
  const [description, link, proposalVariant = ProposalVariant.ProposeDefault] =
    item.description.split(DATA_SEPARATOR);

  const config = get(item.dao, 'config');
  const meta = config?.metadata ? fromBase64ToMetadata(config.metadata) : null;
  const votePeriodEnd = item.votePeriodEnd
    ? new Date(toMillis(item.votePeriodEnd)).toISOString()
    : '';

  const { policy } = item.dao;

  return {
    ...getVotesStatistic({ votes: getParsedVotes(item.votes) }),
    id: item.id,
    proposalId: item.proposalId ?? 0,
    daoId: item.daoId,
    proposer: item.proposer,
    commentsCount: item.commentsCount ?? 0,
    description,
    link: link ?? '',
    status: item.status,
    kind: item.kind,
    votePeriodEnd,
    votePeriodEndDate: votePeriodEnd,
    voteStatus: item.voteStatus ?? null,
    isFinalized: item.status === 'Expired',
    txHash: item.transactionHash ?? '',
    createdAt: item.createTimestamp
      ? new Date(toMillis(item.createTimestamp)).toISOString()
      : '',
    dao: {
      id: item.dao?.id,
      name: item.dao?.config?.name ?? '',
      logo: meta?.flag
        ? getAwsImageUrl(meta.flag)
        : '/flags/defaultDaoFlag.png',
      flagCover: getAwsImageUrl(meta?.flagCover),
      flagLogo: getAwsImageUrl(meta?.flagLogo),
      legal: meta?.legal || {},
      numberOfMembers: item.dao?.numberOfMembers,
      policy,
    },
    daoDetails: {
      name: item.dao?.config?.name ?? '',
      displayName: meta?.displayName || '',
      logo: meta?.flag
        ? getAwsImageUrl(meta.flag)
        : '/flags/defaultDaoFlag.png',
    },
    proposalVariant: proposalVariant as ProposalVariant,
    updatedAt: '',
    actions: item.actions ?? [],
    permissions: null,
  };
}

/* eslint-disable no-underscore-dangle */
export function mapOpenSearchResponseToSearchResult(
  query: string,
  index: SearchResponseIndex,
  data: OpenSearchResponse | null
): SearchResult {
  if (query === '' || !data) {
    return {
      total: 0,
      data: [],
    };
  }

  switch (index) {
    case SearchResponseIndex.DAO: {
      return {
        total: data.hits.total.value,
        data: data.hits.hits
          .filter(item => item._index === index)
          .map(item => {
            return mapDaoIndexToDaoFeedItem(item._source as DaoIndex);
          }),
      };
    }
    case SearchResponseIndex.PROPOSAL: {
      return {
        total: data.hits.total.value,
        data: data.hits.hits
          .filter(item => item._index === index)
          .map(item => {
            return mapProposalIndexToProposalFeedItem(
              item._source as ProposalIndex
            );
          }),
      };
    }

    case SearchResponseIndex.DRAFT_PROPOSAL: {
      return {
        total: data.hits.total.value,
        data: data.hits.hits
          .filter(item => item._index === index)
          .map(item => {
            return mapDraftProposalIndexToDraftProposal(
              item._source as DraftProposalIndex
            ) as DraftProposalFeedItem;
          }),
      };
    }

    case SearchResponseIndex.DRAFT_PROPOSAL_COMMENT: {
      return {
        total: data.hits.total.value,
        data: data.hits.hits
          .filter(item => item._index === index)
          .map(item => {
            return mapDraftCommentIndexToDraftComment(
              item._source as DraftCommentIndex
            );
          }),
      };
    }

    case SearchResponseIndex.COMMENT: {
      return {
        total: data.hits.total.value,
        data: data.hits.hits
          .filter(item => item._index === index)
          .map(item => {
            return item._source as ProposalComment;
          }),
      };
    }

    case SearchResponseIndex.BOUNTY: {
      return {
        total: data.hits.total.value,
        data: data.hits.hits
          .filter(item => item._index === index)
          .reduce<BountyContext[]>((res, item) => {
            const source = item._source as BountyIndex;

            if (!source.daoId) {
              return res;
            }

            res.push(mapBountyIndexToBountyContext(source));

            return res;
          }, []),
      };
    }

    case SearchResponseIndex.NFT: {
      return {
        total: data.hits.total.value,
        data: data.hits.hits
          .filter(item => item._index === index)
          .reduce<NftToken[]>((res, item) => {
            const source = item._source as NftIndex;

            if (!source.daoId || !source.metadata) {
              return res;
            }

            res.push(mapNftIndexToNftToken(source));

            return res;
          }, []),
      };
    }

    default: {
      return {
        total: 0,
        data: [],
      };
    }
  }
}

'''
'''--- services/SearchService/mappers/tokens.ts ---
import { TokenIndex } from 'services/SearchService/types';
import { Token } from 'types/token';
import { formatYoktoValue } from 'utils/format';

export function mapTokenIndexToToken(index: TokenIndex): Token {
  return {
    id: index.token.id,
    tokenId: index.tokenId,
    decimals: index.token.decimals,
    symbol: index.token.symbol,
    icon: index.token.icon,
    totalSupply: index.token.totalSupply,
    balance: formatYoktoValue(index.balance, index.token.decimals),
    price: index.token.price,
  };
}

'''
'''--- services/SearchService/types.ts ---
import { CancelToken } from 'axios';
import {
  ProposalActionData,
  ProposalComment,
  ProposalKind,
  ProposalType,
  ProposalVariant,
} from 'types/proposal';
import { DraftProposal, DraftProposalFeedItem } from 'types/draftProposal';
import { SearchResultsData } from 'types/search';
import { DaoPolicy } from 'services/sputnik/types/policy';
import { DAO as TDAO, DaoDelegation, DaoVersion } from 'types/dao';

export type BaseParams = {
  id?: string;
  offset?: number;
  limit?: number;
  sort?: string;
  filter?: string;
  createdBy?: string;
  query?: string;
};

export type SearchParams = {
  query: string;
  cancelToken?: CancelToken;
  accountId?: string;
  size?: number;
  field?: string;
  index?: string;
} & BaseParams;

export enum SearchResponseIndex {
  DAO = 'dao',
  PROPOSAL = 'proposal',
  COMMENT = 'comment',
  DRAFT_PROPOSAL = 'draftproposal',
  BOUNTY = 'bounty',
  NFT = 'nft',
  TOKEN = 'token',
  DRAFT_PROPOSAL_COMMENT = 'draftproposalcomment',
}

export interface DaoIndex {
  accountIds: string[];
  accounts: string;
  activeProposalCount: number;
  amount: string;
  config: { name: string; purpose: string; metadata: string };
  council: string[];
  councilSeats: number;
  createTimestamp: string;
  createdBy: string;
  daoVersionHash: string;
  delegations?: DaoDelegation[];
  description: string;
  id: string;
  lastBountyId: number;
  lastProposalId: number;
  link: string;
  metadata: string;
  name: string;
  numberOfAssociates: number;
  numberOfGroups: number;
  numberOfMembers: number;
  stakingContract: string;
  status: 'Inactive';
  totalDaoFunds: number;
  totalProposalCount: number;
  totalSupply: string;
  transactionHash: string;
  policy: DaoPolicy;
  daoVersion: DaoVersion;
  tokens: TokenIndex[];
}

export interface ProposalIndex {
  accounts: string;
  amount: string;
  bountyClaimId: null;
  bountyDoneId: null;
  commentsCount: number;
  createTimestamp: string;
  dao: DaoIndex;
  daoId: string;
  description: string;
  failure: null;
  id: string;
  msg: string;
  name: string;

  proposalId: number;
  proposer: string;
  receiverId: string;
  status: 'Approved' | 'InProgress' | 'Expired';
  submissionTime: string;
  tokenId: string;
  transactionHash: string;
  type: ProposalType;
  updateTimestamp: string | null;
  voteCounts: Record<string, string>;
  votePeriodEnd: string;
  voteStatus: 'Active';
  votes: string;

  kind: ProposalKind;
  actions: ProposalActionData[];
}

export interface BountyIndex {
  accounts: string;
  amount: string;
  bountyClaims: string;
  bountyDoneProposals: string;
  bountyId: number;
  commentsCount: number;
  createTimestamp: string;
  daoId: string;
  description: string;
  id: string;
  maxDeadline: string;
  name: string;
  numberOfClaims: number;
  proposal: ProposalIndex;
  proposalId: string;
  times: string;
  token: string;
  transactionHash: string;
}

export interface NftIndex {
  accounts: string;
  daoId: string;
  description: string;
  id: string;
  index: string;
  indexedBy: string;
  symbol: string;
  baseUri: string;
  tokenId: string;
  ownerId: string;
  contractId: string;
  metadata: {
    copies: 0;
    description: string;
    expiresAt: string;
    extra: string;
    issuedAt: string;
    media: string;
    mediaHash: string;
    reference: string;
    referenceHash: string;
    startsAt: string;
    title: string;
    updatedAt: string;
    approvedAccountIds: [string];
  };
  contract: {
    id: string;
    spec: string;
    name: string;
    symbol: string;
    icon: string;
    baseUri: string;
    reference: string;
    referenceHash: string;
  };
}

/* eslint-disable camelcase */
export type OpenSearchResponse = {
  hits: {
    hits: {
      _id: string;
      _index: SearchResponseIndex;
      _score: null;
      _type: '_doc';
      sort: string[];
      _source:
        | DaoIndex
        | ProposalComment
        | ProposalIndex
        | DraftProposalFeedItem
        | BountyIndex
        | TokenIndex
        | NftIndex
        | DraftProposalIndex
        | DraftCommentIndex;
    }[];
    max_score: null;
    total: {
      value: number;
      relation: 'eq';
    };
  };
  timed_out: boolean;
  took: number;
  _shards: {
    failed: number;
    skipped: number;
    successful: number;
    total: number;
  };
};

export type SearchResult = {
  total: number;
  data:
    | SearchResultsData['daos']
    | SearchResultsData['proposals']
    | SearchResultsData['drafts']
    | SearchResultsData['comments']
    | SearchResultsData['bounties']
    | SearchResultsData['nfts']
    | SearchResultsData['draftProposalComments'];
};

export interface OpenSearchQuery {
  bool?: {
    must?: Record<string, unknown>[];
    must_not?: Record<string, unknown>[];
    should?: Record<string, unknown>[];
  };
  match_all?: Record<string, unknown>;
}

export interface TokenIndex {
  accountId: string;
  balance: string;
  tokenId: string;
  partitionId: string;
  isArchived: boolean;
  token: {
    reference: null;
    symbol: string;
    totalSupply: string;
    price: null;
    decimals: number;
    icon: string;
    name: string;
    id: string;
    ownerId: string;
    spec: string;
    referenceHash: null;
  };
}

export interface DraftProposalIndex {
  saveAccounts: string[];
  kind: ProposalKind & { proposalVariant: ProposalVariant };
  proposer: string;
  description: string;
  history: {
    daoId: string;
    proposer: string;
    kind: ProposalKind;
    description: string;
    id: string;
    title: string;
    type: ProposalType;
    timestamp: number;
  }[];
  title: string;
  type: ProposalType;
  updateTimestamp: number;
  createTimestamp: number;
  replies: number;
  id: string;
  state: DraftProposal['state'];
  viewAccounts: string[];
  dao: TDAO;
  daoId: string;
  accounts: string;
}

export type DraftCommentIndex = {
  author: string;
  isArchived: boolean;
  contextId: string;
  message: string;
  createTimestamp: number;
  likeAccounts: string[];
  contextType: 'DraftProposal';
  dislikeAccounts: string[];
  id: string;
  accounts: string;
  description: string;
  index: string;
  daoId: string;
  replyTo: string | undefined;
  replies: DraftCommentIndex[];
  processingTimeStamp: number | null;
};

'''
'''--- services/sputnik/SputnikHttpService/SputnikHttpService.ts ---
import omit from 'lodash/omit';
import { CancelToken } from 'axios';

import { PaginationResponse } from 'types/api';
import { NftToken, Token } from 'types/token';
import {
  DAO,
  DaoDelegation,
  DaoFeedItem,
  DaoSubscription,
  DaoSubscriptionInput,
  UpdateDaoSubscription,
} from 'types/dao';
import { Receipt } from 'types/transaction';
import { SearchResultsData } from 'types/search';
import {
  BountiesContextResponse,
  BountiesResponse,
  BountyContext,
} from 'types/bounties';
import {
  Proposal,
  ProposalComment,
  SendProposalComment,
  ReportProposalComment,
  DeleteProposalComment,
  ProposalFeedItem,
} from 'types/proposal';
import { DaoStatsState } from 'types/daoStats';

import {
  GetProposalsResponse,
  MemberStats,
  ProposalDTO,
} from 'services/sputnik/mappers';
import { API_MAPPERS, API_QUERIES } from 'services/sputnik/constants';
import {
  BaseParams,
  ActiveProposalsParams,
  ProposalsListParams,
  FilteredProposalsParams,
  DaoParams,
  SearchParams,
} from 'services/sputnik/types';
import { HttpService, httpService } from 'services/HttpService';
import { ChartDataElement } from 'components/AreaChartRenderer/types';
import { Settings } from 'types/settings';
import {
  ProposalTemplate,
  ProposalTemplateInput,
  SharedProposalTemplate,
} from 'types/proposalTemplate';
import { NOTIFICATION_TYPES, showNotification } from 'features/notifications';

class SputnikHttpServiceClass {
  private readonly httpService: HttpService = httpService;

  /* Daos API */
  public async getDaoList({
    offset = 0,
    limit = 500,
    sort = 'createdAt,DESC',
    filter,
    createdBy,
  }: BaseParams): Promise<PaginationResponse<DaoFeedItem[]> | null> {
    try {
      const { data } = await this.httpService.get<
        PaginationResponse<DaoFeedItem[]>
      >('/daos', {
        responseMapper: {
          name: API_MAPPERS.MAP_DAO_FEED_ITEM_RESPONSE_TO_DAO_FEEDS,
        },
        params: {
          filter,
          offset,
          limit,
          sort,
          createdBy,
        },
      });

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async getAccountDaos(accountId: string): Promise<DaoFeedItem[]> {
    try {
      const { data } = await this.httpService.get<DaoFeedItem[]>(
        `/daos/account-daos/${accountId}`,
        {
          responseMapper: {
            name: API_MAPPERS.MAP_DAO_FEED_ITEM_RESPONSE_TO_DAO_FEED,
          },
        }
      );

      return data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  public async getDaoById(id: string): Promise<DAO | null> {
    try {
      const { data } = await this.httpService.get<DAO | null>(`/daos/${id}`, {
        responseMapper: { name: API_MAPPERS.MAP_DAO_DTO_TO_DAO },
      });

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async getDaoMembersStats(daoId: string): Promise<MemberStats[]> {
    try {
      const { data } = await this.httpService.get<MemberStats[]>(
        `/daos/${daoId}/members`
      );

      return data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  /* Search API */
  public async search(params: SearchParams): Promise<SearchResultsData | null> {
    try {
      const { data } = await this.httpService.get<SearchResultsData | null>(
        '/search',
        {
          responseMapper: {
            name: API_MAPPERS.MAP_SEARCH_RESULTS_DTO_TO_DATA_OBJECT,
          },
          params: {
            query: params.query,
            accountId: params.accountId,
            limit: 300,
          },
          cancelToken: params.cancelToken,
        }
      );

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async searchPaginated(
    params: SearchParams
  ): Promise<SearchResultsData | null> {
    return this.search(params);
  }

  /* Proposals API */
  // Deprecated
  public async getActiveProposals({
    daoIds,
    offset = 0,
    limit = 50,
  }: ActiveProposalsParams): Promise<Proposal[]> {
    try {
      const { data } = await this.httpService.get<Proposal[]>('/proposals', {
        responseMapper: {
          name: API_MAPPERS.MAP_PROPOSAL_DTO_TO_PROPOSALS,
        },
        queryRequest: {
          name: API_QUERIES.GET_ACTIVE_PROPOSALS,
          params: {
            daoIds,
            offset,
            limit,
          },
        },
      });

      return data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  public async getProposalsByProposer(
    params: ProposalsListParams
  ): Promise<PaginationResponse<string[]> | null> {
    try {
      const { data } = await this.httpService.get<
        Promise<PaginationResponse<string[]> | null>
      >('/proposals', {
        responseMapper: {
          name: API_MAPPERS.MAP_PROPOSAL_TO_PROPOSER,
        },
        queryRequest: {
          name: API_QUERIES.GET_USER_PROPOSALS_BY_PROPOSER,
          params,
        },
      });

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async getUserProposals(accountId: string): Promise<ProposalDTO[]> {
    try {
      const response = await this.httpService.get<GetProposalsResponse>(
        '/proposals',
        {
          queryRequest: {
            name: API_QUERIES.GET_USER_PROPOSALS,
            params: {
              accountId,
            },
          },
        }
      );

      return response.data.data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  public async getProposalsListByAccountId(
    query: ProposalsListParams,
    accountId?: string
  ): Promise<PaginationResponse<ProposalFeedItem[]> | null> {
    try {
      const { data } = await this.httpService.get<
        PaginationResponse<ProposalFeedItem[]>
      >('/proposals/account-proposals', {
        responseMapper: {
          name: API_MAPPERS.MAP_PROPOSAL_FEED_ITEM_RESPONSE_TO_PROPOSAL_FEED_ITEM,
        },
        queryRequest: {
          name: API_QUERIES.GET_PROPOSALS_LIST_BY_ACCOUNT_ID,
          params: {
            query,
            accountId,
          },
        },
      });

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async getProposalsList(
    query: ProposalsListParams
  ): Promise<PaginationResponse<ProposalFeedItem[]> | null> {
    try {
      const { data } = await this.httpService.get<
        PaginationResponse<ProposalFeedItem[]>
      >('/proposals', {
        responseMapper: {
          name: API_MAPPERS.MAP_PROPOSAL_FEED_ITEM_RESPONSE_TO_PROPOSAL_FEED_ITEM,
        },
        queryRequest: {
          name: API_QUERIES.GET_PROPOSALS_LIST,
          params: {
            query,
          },
        },
      });

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async getProposalById(
    proposalId: string,
    accountId?: string
  ): Promise<ProposalFeedItem | null> {
    try {
      const { data } = await this.httpService.get<ProposalFeedItem>(
        '/proposals',
        {
          responseMapper: {
            name: API_MAPPERS.MAP_PROPOSAL_FEED_ITEM_RESPONSE_TO_PROPOSAL_FEED_ITEM,
          },
          queryRequest: {
            name: API_QUERIES.GET_PROPOSAL_BY_ID,
            params: {
              proposalId,
              accountId,
            },
          },
        }
      );

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async findPolicyAffectsProposals(
    daoId: string
  ): Promise<ProposalFeedItem[]> {
    try {
      const { data } = await this.httpService.get<
        PaginationResponse<ProposalFeedItem[]>
      >('/proposals', {
        responseMapper: {
          name: API_MAPPERS.MAP_PROPOSAL_FEED_ITEM_RESPONSE_TO_PROPOSAL_FEED_ITEM,
        },
        queryRequest: {
          name: API_QUERIES.FIND_POLICY_AFFECTS_PROPOSALS,
          params: {
            daoId,
          },
        },
      });

      return data.data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  // Deprecated
  public async getFilteredProposals(
    filter: FilteredProposalsParams,
    accountDaos?: DaoFeedItem[]
  ): Promise<Proposal[]> {
    try {
      const { data: proposals } = await this.httpService.get<Proposal[]>(
        '/proposals',
        {
          responseMapper: {
            name: API_MAPPERS.MAP_PROPOSAL_DTO_TO_PROPOSALS,
          },
          queryRequest: {
            name: API_QUERIES.GET_FILTERED_PROPOSALS,
            params: {
              filter,
              accountDaos,
            },
          },
        }
      );

      return proposals;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  // Deprecated
  public async getProposals({
    daoId,
    offset = 0,
    limit = 50,
    filter,
    accountId,
  }: {
    filter?: string;
    accountId?: string;
  } & DaoParams): Promise<PaginationResponse<ProposalFeedItem[]> | null> {
    const params = {
      filter: filter || `daoId||$eq||${daoId}`,
      offset,
      limit,
      accountId,
    };

    try {
      const { data } = await this.httpService.get<
        PaginationResponse<ProposalFeedItem[]>
      >('/proposals', {
        responseMapper: {
          name: API_MAPPERS.MAP_PROPOSAL_FEED_ITEM_RESPONSE_TO_PROPOSAL_FEED_ITEM,
        },
        params: daoId ? params : omit(params, 'filter'),
      });

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async getAccountReceiptsByTokens(
    accountId: string,
    tokenId: string
  ): Promise<Receipt[]> {
    try {
      const { data } = await this.httpService.get<Receipt[]>(
        `/transactions/receipts/account-receipts/${accountId}/tokens/${tokenId}`,
        {
          responseMapper: {
            name: API_MAPPERS.MAP_RECEIPTS_BY_TOKEN_RESPONSE,
            params: {
              accountId,
              tokenId,
            },
          },
        }
      );

      return data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  public async getAccountReceipts(accountId: string): Promise<Receipt[]> {
    try {
      const { data } = await this.httpService.get<Receipt[]>(
        `/transactions/receipts/account-receipts/${accountId}`,
        {
          responseMapper: {
            name: API_MAPPERS.MAP_RECEIPTS_RESPONSE,
            params: {
              accountId,
            },
          },
        }
      );

      return data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  // Deprecated
  public async getPolls({
    daoId,
    offset = 0,
    limit = 50,
  }: DaoParams): Promise<Proposal[]> {
    try {
      const { data: proposals } = await this.httpService.get<Proposal[]>(
        '/proposals',
        {
          responseMapper: {
            name: API_MAPPERS.MAP_PROPOSAL_DTO_TO_PROPOSALS,
          },
          queryRequest: {
            name: API_QUERIES.GET_POLLS,
            params: {
              daoId,
              offset,
              limit,
            },
          },
        }
      );

      return proposals;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  public async getProposal(
    contractId: string,
    index: number
  ): Promise<Proposal | null> {
    try {
      const { data: proposal } = await this.httpService.get<Proposal | null>(
        `/proposals/${contractId}-${index}`,
        {
          responseMapper: {
            name: API_MAPPERS.MAP_PROPOSAL_DTO_TO_PROPOSAL,
          },
        }
      );

      return proposal;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async getBounties({
    sort = 'createdAt,DESC',
    offset = 0,
    limit = 50,
  }: BaseParams): Promise<PaginationResponse<BountiesResponse['data']> | null> {
    try {
      const { data } = await this.httpService.get<
        PaginationResponse<BountiesResponse['data']>
      >('/bounties', {
        params: {
          offset,
          limit,
          sort,
        },
      });

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async getBountyContextById(
    bountyId: string,
    accountId?: string
  ): Promise<BountyContext | null> {
    try {
      const { data } = await this.httpService.get<BountiesContextResponse>(
        '/bounty-contexts',
        {
          queryRequest: {
            name: API_QUERIES.GET_BOUNTY_CONTEXT_BY_ID,
            params: {
              bountyId,
              accountId,
            },
          },
        }
      );

      return data.data[0];
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async getBountiesContext(
    daoId: string,
    accountId?: string,
    query?: {
      bountyFilter: string | null;
      bountySort: string | null;
      bountyPhase: string | null;
      limit?: number;
      offset?: number;
    }
  ): Promise<PaginationResponse<BountyContext[]> | null> {
    try {
      const { data } = await this.httpService.get<
        PaginationResponse<BountyContext[]>
      >(`/bounty-contexts`, {
        queryRequest: {
          name: API_QUERIES.GET_BOUNTIES_CONTEXT,
          params: {
            accountId: accountId || '',
            daoId,
            query,
          },
        },
      });

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async findBountyContext(params: {
    offset?: number;
    limit?: number;
    sort?: string;
    daoId: string;
    query: string;
    cancelToken: CancelToken;
    accountId: string;
  }): Promise<PaginationResponse<BountyContext[]> | null> {
    const { accountId, daoId, query } = params;

    try {
      const { data } = await this.httpService.get<
        PaginationResponse<BountyContext[]>
      >('/bounty-contexts', {
        cancelToken: params.cancelToken,
        queryRequest: {
          name: API_QUERIES.FIND_BOUNTY_CONTEXT,
          params: {
            accountId,
            daoId,
            query,
          },
        },
      });

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async toggleBountyContexts(params: {
    accountId: string;
    publicKey: string;
    signature: string;
    ids: string[];
    daoId: string;
    isArchived: boolean;
  }): Promise<string> {
    const response = await this.httpService.patch<
      {
        accountId: string;
        publicKey: string;
        signature: string;
        ids: string[];
        daoId: string;
        isArchived: boolean;
      },
      { data: string }
    >(`/bounty-contexts`, params, {
      queryRequest: {
        name: API_QUERIES.TOGGLE_BOUNTY_CONTEXTS,
      },
    });

    return response.data;
  }

  public async showBounties(
    selected: string[],
    params: {
      accountId: string;
      publicKey: string;
      signature: string;
      daoId: string;
    }
  ): Promise<boolean> {
    // todo - add service action
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const response = await this.httpService.patch<any, boolean>(
      `/bounties-contexts`,
      params,
      {
        queryRequest: {
          name: API_QUERIES.SHOW_BOUNTIES,
        },
      }
    );

    return response;
  }

  public async findDaoByName(params: {
    offset?: number;
    limit?: number;
    sort?: string;
    query: string;
    cancelToken: CancelToken;
  }): Promise<PaginationResponse<DaoFeedItem[]> | null> {
    const { query } = params;

    try {
      const { data } = await this.httpService.get<
        PaginationResponse<DaoFeedItem[]>
      >('/daos', {
        cancelToken: params.cancelToken,
        queryRequest: {
          name: API_QUERIES.FIND_DAO_BY_NAME,
          params: {
            query,
          },
        },
      });

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  /* Tokens API */
  public async getAccountNFTs(accountId: string): Promise<NftToken[]> {
    try {
      const { data } = await this.httpService.get<NftToken[]>(`/tokens/nfts`, {
        responseMapper: {
          name: API_MAPPERS.MAP_NFT_TOKEN_RESPONSE_TO_NFT_TOKEN,
        },
        params: {
          filter: `ownerId||$eq||${accountId}`,
          sort: 'createdAt,DESC',
          offset: 0,
          limit: 1000,
        },
      });

      return data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  public async getTokens({
    offset = 0,
    limit = 50,
    sort = 'createdAt,DESC',
    filter = '',
  }: DaoParams): Promise<Token[]> {
    try {
      const { data } = await this.httpService.get<Token[]>('/tokens', {
        responseMapper: {
          name: API_MAPPERS.MAP_TOKENS_DTO_TO_TOKENS,
        },
        params: {
          offset,
          limit,
          sort,
          filter,
        },
      });

      return data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  public async getAccountTokens(accountId: string): Promise<Token[]> {
    try {
      const { data } = await this.httpService.get<Token[]>(
        `/tokens/account-tokens/${accountId}`,
        {
          responseMapper: {
            name: API_MAPPERS.MAP_TOKENS_DTO_TO_TOKEN,
          },
        }
      );

      return data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  /* Subscriptions API */
  public async getAccountDaoSubscriptions(
    accountId: string
  ): Promise<DaoSubscription[]> {
    try {
      const { data } = await this.httpService.get<DaoSubscription[]>(
        `/subscriptions/account-subscriptions/${accountId}`,
        {
          responseMapper: {
            name: API_MAPPERS.MAP_SUBSCRIPTIONS_DTOS_TO_DAO_SUBSCRIPTIONS,
          },
        }
      );

      return data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  public async updateAccountSubscription(
    params: UpdateDaoSubscription
  ): Promise<string> {
    try {
      const response = await this.httpService.post<
        UpdateDaoSubscription,
        { data: { accountId: string } }
      >(`/subscriptions`, params, {
        queryRequest: {
          name: API_QUERIES.UPDATE_ACCOUNT_SUBSCRIPTION,
        },
      });

      return response.data.accountId;
    } catch (error) {
      console.error(error);

      return '';
    }
  }

  public async deleteAccountSubscription(
    daoId: string,
    accountId: string,
    subscriptionId: string,
    params: DaoSubscriptionInput
  ): Promise<string> {
    try {
      const response = await this.httpService.delete<
        DaoSubscriptionInput,
        { data: { accountId: string } }
      >(`/subscriptions/${daoId}/${accountId}/${subscriptionId}`, params, {
        queryRequest: {
          name: API_QUERIES.DELETE_ACCOUNT_SUBSCRIPTION,
        },
      });

      return response.data.accountId;
    } catch (error) {
      console.error(error);

      return '';
    }
  }

  /* Comments API */
  public async getProposalComments(
    proposalId: string
  ): Promise<ProposalComment[]> {
    const offset = 0;
    const limit = 3000;
    const sort = 'createdAt,DESC';

    const { data } = await this.httpService.get<
      PaginationResponse<ProposalComment[]>
    >(`/comments`, {
      params: {
        offset,
        limit,
        sort,
        filter: `contextId||$eq||${proposalId}`,
      },
    });

    return data.data;
  }

  public async sendProposalComment(
    params: SendProposalComment
  ): Promise<string> {
    try {
      const response = await this.httpService.post<
        SendProposalComment,
        { data: { accountId: string } }
      >(`/comments`, params, {
        queryRequest: {
          name: API_QUERIES.SEND_COMMENT,
        },
      });

      return response.data.accountId;
    } catch (error) {
      const { response } = error;
      let { message } = error;

      if (response?.status === 429) {
        message =
          'Due to spam protection no more than 5 messages per minute are allowed.';
      }

      showNotification({
        type: NOTIFICATION_TYPES.ERROR,
        lifetime: 20000,
        description: message,
      });

      return '';
    }
  }

  public async reportProposalComment(
    params: ReportProposalComment
  ): Promise<string> {
    try {
      const response = await this.httpService.post<
        ReportProposalComment,
        { data: { accountId: string } }
      >(`/comments/report`, params, {
        queryRequest: {
          name: API_QUERIES.REPORT_COMMENT,
        },
      });

      return response.data.accountId;
    } catch (error) {
      console.error(error);

      return '';
    }
  }

  public async deleteProposalComment(
    commentId: number,
    params: DeleteProposalComment
  ): Promise<string> {
    try {
      const response = await this.httpService.delete<
        DeleteProposalComment,
        { data: { accountId: string } }
      >(`/comments/${commentId}`, params, {
        queryRequest: {
          name: API_QUERIES.DELETE_COMMENT,
        },
      });

      return response.data.accountId;
    } catch (error) {
      console.error(error);

      return '';
    }
  }

  /* Dao Stats API */
  public async getDaoStatsState(daoId: string): Promise<DaoStatsState | null> {
    try {
      const { data } = await this.httpService.get<DaoStatsState | null>(
        `/stats/dao/${daoId}/state`
      );

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async getDaoStatsFunds(daoId: string): Promise<ChartDataElement[]> {
    try {
      const { data } = await this.httpService.get<ChartDataElement[]>(
        `/stats/dao/${daoId}/funds`,
        {
          responseMapper: {
            name: API_MAPPERS.MAP_OVERTIME_TO_CHART_DATA,
          },
        }
      );

      return data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  public async getDaoStatsBounties(daoId: string): Promise<ChartDataElement[]> {
    try {
      const { data } = await this.httpService.get<ChartDataElement[]>(
        `/stats/dao/${daoId}/bounties`,
        {
          responseMapper: {
            name: API_MAPPERS.MAP_OVERTIME_TO_CHART_DATA,
          },
        }
      );

      return data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  public async getDaoStatsNfts(daoId: string): Promise<ChartDataElement[]> {
    try {
      const { data } = await this.httpService.get<ChartDataElement[]>(
        `/stats/dao/${daoId}/nfts`,
        {
          responseMapper: {
            name: API_MAPPERS.MAP_OVERTIME_TO_CHART_DATA,
          },
        }
      );

      return data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  public async getDaoStatsProposals(
    daoId: string
  ): Promise<ChartDataElement[]> {
    try {
      const { data } = await this.httpService.get<ChartDataElement[]>(
        `/stats/dao/${daoId}/proposals`,
        {
          responseMapper: {
            name: API_MAPPERS.MAP_PROPOSALS_OVERTIME_TO_CHART_DATA,
          },
        }
      );

      return data;
    } catch (error) {
      console.error(error);

      return [];
    }
  }

  public async getJoiningDaoProposal(params: {
    daoId: string;
    accountId: string;
  }): Promise<boolean> {
    const { daoId, accountId } = params;

    try {
      const { data } = await this.httpService.get<
        PaginationResponse<ProposalFeedItem[]>
      >(`/proposals/account-proposals/${accountId}`, {
        queryRequest: {
          name: API_QUERIES.GET_JOINING_DAO_PROPOSALS,
          params: {
            daoId,
            accountId,
          },
        },
      });

      return data.data.length > 0;
    } catch (error) {
      console.error(error);

      return false;
    }
  }

  public async getDaoSettings(daoId: string): Promise<Settings | null> {
    try {
      const { data } = await this.httpService.get<Settings | null>(
        `/daos/${daoId}/settings`
      );

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async updateDaoSettings(
    daoId: string,
    params: {
      accountId: string;
      publicKey: string;
      signature: string;
      settings: Settings;
    }
  ): Promise<Settings> {
    const response = await this.httpService.patch<
      {
        accountId: string;
        publicKey: string;
        signature: string;
        settings: Settings;
      },
      { data: Settings }
    >(`/daos/${daoId}/settings`, params, {
      queryRequest: {
        name: API_QUERIES.UPDATE_DAO_SETTINGS,
      },
    });

    return response.data;
  }

  public async saveProposalTemplate(
    daoId: string,
    params: ProposalTemplateInput
  ): Promise<ProposalTemplate> {
    const response = await this.httpService.post<
      ProposalTemplateInput,
      { data: ProposalTemplate }
    >(`/daos/${daoId}/proposal-templates`, params, {
      queryRequest: {
        name: API_QUERIES.SAVE_PROPOSAL_TEMPLATE,
      },
    });

    return response.data;
  }

  public async updateProposalTemplate(
    daoId: string,
    id: string,
    params: ProposalTemplateInput
  ): Promise<ProposalTemplate> {
    const response = await this.httpService.patch<
      ProposalTemplateInput,
      { data: ProposalTemplate }
    >(`/daos/${daoId}/proposal-templates/${id}`, params, {
      queryRequest: {
        name: API_QUERIES.UPDATE_PROPOSAL_TEMPLATE,
      },
    });

    return response.data;
  }

  public async deleteProposalTemplate(
    daoId: string,
    id: string,
    params: Pick<ProposalTemplateInput, 'accountId' | 'publicKey' | 'signature'>
  ): Promise<ProposalTemplate> {
    const response = await this.httpService.delete<
      ProposalTemplateInput,
      { data: ProposalTemplate }
    >(`/daos/${daoId}/proposal-templates/${id}`, params, {
      queryRequest: {
        name: API_QUERIES.DELETE_PROPOSAL_TEMPLATE,
      },
    });

    return response.data;
  }

  public async getProposalTemplates(
    daoId: string
  ): Promise<ProposalTemplate[]> {
    const response = await this.httpService.get<ProposalTemplate[]>(
      `/daos/${daoId}/proposal-templates`
    );

    return response.data;
  }

  public async findTransferProposals(
    dao: DAO,
    target: string
  ): Promise<PaginationResponse<ProposalFeedItem[]> | null> {
    try {
      const { data } = await this.httpService.get<
        PaginationResponse<ProposalFeedItem[]>
      >('/proposals', {
        responseMapper: {
          name: API_MAPPERS.MAP_PROPOSAL_FEED_ITEM_RESPONSE_TO_PROPOSAL_FEED_ITEM,
        },
        queryRequest: {
          name: API_QUERIES.FIND_TRANSFER_PROPOSALS,
          params: {
            daoId: dao.id,
            targetDaoId: target,
          },
        },
      });

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async getSharedProposalTemplates(query: {
    offset: number;
    limit: number;
    sort: string;
    searchInput?: string;
  }): Promise<PaginationResponse<SharedProposalTemplate[]> | null> {
    try {
      const { data } = await this.httpService.get<
        PaginationResponse<SharedProposalTemplate[]>
      >('/proposals/templates', {
        queryRequest: {
          name: API_QUERIES.GET_SHARED_PROPOSAL_TEMPLATES,
          params: {
            query,
          },
        },
      });

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async getSharedProposalTemplate(
    templateId: string
  ): Promise<SharedProposalTemplate | null> {
    try {
      const { data } = await this.httpService.get<
        PaginationResponse<SharedProposalTemplate[]>
      >('/proposals/templates', {
        queryRequest: {
          name: API_QUERIES.GET_SHARED_PROPOSAL_TEMPLATES,
          params: {
            templateId,
          },
        },
      });

      return data.data[0];
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async getTemplatesBySmartContract(
    smartContractAddress: string,
    templateId: string
  ): Promise<SharedProposalTemplate[] | null> {
    try {
      const { data } = await this.httpService.get<
        PaginationResponse<SharedProposalTemplate[]>
      >('/proposals/templates', {
        queryRequest: {
          name: API_QUERIES.GET_TEMPLATES_BY_SMART_CONTRACT,
          params: {
            smartContractAddress,
            templateId,
          },
        },
      });

      return data.data.filter(
        item => item.config.smartContractAddress === smartContractAddress
      );
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async cloneTemplateToDao(params: {
    templateId: string;
    targetDao: string;
    accountId: string;
    publicKey: string;
    signature: string;
  }): Promise<{ proposalTemplateId: string; daoId: string } | null> {
    try {
      const { data } = await this.httpService.post<
        {
          templateId: string;
          targetDao: string;
          accountId: string;
          publicKey: string;
          signature: string;
        },
        {
          data: {
            proposalTemplateId: string;
            daoId: string;
          };
        }
      >(
        `/proposals/templates/${params.templateId}/clone/${params.targetDao}`,
        params,
        {
          queryRequest: {
            name: API_QUERIES.SAVE_PROPOSAL_TEMPLATE,
          },
        }
      );

      return data;
    } catch (error) {
      console.error(error);

      return null;
    }
  }

  public async getDelegations(
    daoId: string,
    governanceToken: boolean
  ): Promise<DaoDelegation[]> {
    if (!governanceToken) {
      return [];
    }

    const response = await this.httpService.get<DaoDelegation[]>(
      `/daos/${daoId}/delegations`
    );

    return response.data;
  }
}

export const SputnikHttpService = new SputnikHttpServiceClass();

'''
'''--- services/sputnik/SputnikHttpService/index.ts ---
export * from './SputnikHttpService';

'''
'''--- services/sputnik/SputnikNearService/SputnikNearService.ts ---
import { Mixin } from 'ts-mixer';

import { NearService } from './services/NearService';
import { GovernanceTokenService } from './services/GovernanceTokenService';

export class SputnikNearService extends Mixin(
  NearService,
  GovernanceTokenService
) {}

'''
'''--- services/sputnik/SputnikNearService/index.ts ---
export * from './SputnikNearService';

'''
'''--- services/sputnik/SputnikNearService/overrides/SputnikConnectedWalletAccount.ts ---
import * as borsh from 'borsh';
import {
  ConnectedWalletAccount,
  transactions as Transactions,
} from 'near-api-js';
import { PublicKey } from 'near-api-js/lib/utils';
import { FinalExecutionOutcome } from 'near-api-js/lib/providers';
import { Action, Transaction } from 'near-api-js/lib/transaction';
import { SignAndSendTransactionOptions } from 'near-api-js/lib/account';

import { configService } from 'services/ConfigService';

import {
  SputnikWalletError,
  SputnikWalletErrorCodes,
} from 'errors/SputnikWalletError';

import { SputnikWalletConnection } from './types';

export class SputnikConnectedWalletAccount extends ConnectedWalletAccount {
  protected async signAndSendTransaction(
    receiverIdOrTxOptions: string | SignAndSendTransactionOptions,
    txActions: Action[]
  ): Promise<FinalExecutionOutcome> {
    const options: SignAndSendTransactionOptions =
      typeof receiverIdOrTxOptions === 'string'
        ? {
            receiverId: receiverIdOrTxOptions,
            actions: txActions,
          }
        : receiverIdOrTxOptions;

    const { receiverId, actions, walletMeta, walletCallbackUrl } = options;

    if (!walletCallbackUrl) {
      throw new Error(
        'SputnikConnectedWalletAccount: walletCallbackUrl is not defined!'
      );
    }

    const walletConnection = this.walletConnection as SputnikWalletConnection;

    const win = window.open(`${window.origin}/callback/pending`, '_blank');

    const localKey = await this.connection.signer.getPublicKey(
      this.accountId,
      this.connection.networkId
    );

    const accessKeys = await this.getAccessKeys();

    const accessKey = accessKeys.find(
      key => key.public_key === localKey.toString()
    );

    if (!accessKey) {
      throw new Error(
        `Cannot find matching key for transaction sent to ${receiverId}`
      );
    }

    const block = await this.connection.provider.block({
      finality: 'final',
    });

    const blockHash = borsh.baseDecode(block.header.hash);
    const publicKey = PublicKey.from(accessKey.public_key);
    // TODO: Cache & listen for nonce updates for given access key
    const nonce = accessKey.access_key.nonce + 1;

    const transaction = Transactions.createTransaction(
      this.accountId,
      publicKey,
      receiverId,
      nonce,
      actions,
      blockHash
    );

    await walletConnection.sputnikRequestSignTransactions({
      transactions: [transaction],
      meta: walletMeta,
      callbackUrl: walletCallbackUrl,
    });

    if (win?.location && walletConnection.signTransactionUrl) {
      win.location.href = walletConnection.signTransactionUrl;
    }

    return new Promise((resolve, reject) => {
      window.sputnikRequestSignTransactionCompleted = async ({
        transactionHashes,
        errorCode,
      }) => {
        if (typeof transactionHashes !== 'undefined') {
          const result = await this.connection.provider.txStatus(
            transactionHashes,
            this.accountId
          );

          resolve(result);
        }

        reject(
          new SputnikWalletError({
            errorCode: errorCode || SputnikWalletErrorCodes.unknownError,
          })
        );
      };
    });
  }

  public async sendTransactions(
    transactions: Transaction[]
  ): Promise<FinalExecutionOutcome[]> {
    const win = window.open(`${window.origin}/callback/pending`, '_blank');

    const walletConnection = this.walletConnection as SputnikWalletConnection;

    const { appConfig } = configService.get();

    const walletCallbackUrl = appConfig?.LOCAL_WALLET_REDIRECT
      ? `${window.origin}/callback/transaction`
      : `${window.origin}/api/server/v1/transactions/wallet/callback/${this.accountId}`;

    await walletConnection.sputnikRequestSignTransactions({
      transactions,
      callbackUrl: walletCallbackUrl,
    });

    await new Promise(resolve => {
      setTimeout(resolve, 2000);
    });

    if (win?.location && walletConnection.signTransactionUrl) {
      win.location.href = walletConnection.signTransactionUrl;
    }

    return new Promise((resolve, reject) => {
      window.sputnikRequestSignTransactionCompleted = async ({
        transactionHashes,
        errorCode,
      }) => {
        if (typeof transactionHashes !== 'undefined') {
          const hashes = transactionHashes.split(',');

          const result = await Promise.all(
            hashes.map(hash =>
              this.connection.provider.txStatus(hash, this.accountId)
            )
          );

          resolve(result);
        }

        reject(
          new SputnikWalletError({
            errorCode: errorCode || SputnikWalletErrorCodes.unknownError,
          })
        );
      };
    });
  }
}

'''
'''--- services/sputnik/SputnikNearService/overrides/SputnikWalletConnection.ts ---
/* eslint-disable no-underscore-dangle */
import * as borsh from 'borsh';
import { ConnectedWalletAccount, KeyPair, WalletConnection } from 'near-api-js';
import { SCHEMA, Transaction } from 'near-api-js/lib/transaction';

import {
  SputnikWalletError,
  SputnikWalletErrorCodes,
} from 'errors/SputnikWalletError';

import { SputnikConnectedWalletAccount } from './SputnikConnectedWalletAccount';

const LOGIN_WALLET_URL_SUFFIX = '/login/';
const PENDING_ACCESS_KEY_PREFIX = 'pending_key';

type SputnikRequestSignTransactionsOptions = {
  transactions: Transaction[];
  callbackUrl: string;
  meta?: string;
};

export class SputnikWalletConnection extends WalletConnection {
  public signTransactionUrl: string | null = null;

  async sputnikRequestSignIn(
    contractId: string,
    successUrl: string,
    failureUrl: string
  ): Promise<string | undefined> {
    const accessKey = KeyPair.fromRandom('ed25519');

    const newUrl = new URL(this._walletBaseUrl + LOGIN_WALLET_URL_SUFFIX);

    newUrl.searchParams.set('success_url', successUrl);
    newUrl.searchParams.set('failure_url', failureUrl);
    newUrl.searchParams.set('contract_id', contractId);
    newUrl.searchParams.set('public_key', accessKey.getPublicKey().toString());

    const win = window.open(`${window.origin}/callback/pending`, '_blank');

    await this._keyStore.setKey(
      this._networkId,
      PENDING_ACCESS_KEY_PREFIX + accessKey.getPublicKey(),
      accessKey
    );

    // eslint-disable-next-line @typescript-eslint/no-this-alias
    const self = this;

    return new Promise<string | undefined>((resolve, reject) => {
      if (win?.location) {
        win.location.href = newUrl.toString();
      }

      window.sputnikRequestSignInCompleted = async ({
        accountId,
        errorCode,
        allKeys,
        publicKey,
      }) => {
        if (accountId) {
          this._authData = {
            accountId,
            allKeys,
          };

          window.localStorage.setItem(
            this._authDataKey,
            JSON.stringify(this._authData)
          );

          if (publicKey) {
            await self._moveKeyFromTempToPermanent(accountId, publicKey);
          }

          resolve(accountId);

          return;
        }

        reject(
          new SputnikWalletError({
            errorCode: errorCode || SputnikWalletErrorCodes.userRejected,
          })
        );
      };
    });
  }

  async sputnikRequestSignTransactions({
    transactions,
    callbackUrl,
    meta,
  }: SputnikRequestSignTransactionsOptions): Promise<void> {
    const newUrl = new URL('sign', this._walletBaseUrl);

    const transactionsString = transactions
      .map(transaction => borsh.serialize(SCHEMA, transaction))
      .map(serialized => Buffer.from(serialized).toString('base64'))
      .join(',');

    newUrl.searchParams.set('transactions', transactionsString);
    newUrl.searchParams.set('callbackUrl', callbackUrl);

    if (meta) {
      newUrl.searchParams.set('meta', meta);
    }

    this.signTransactionUrl = newUrl.toString();
  }

  account(): ConnectedWalletAccount {
    if (!this._connectedAccount) {
      this._connectedAccount = new SputnikConnectedWalletAccount(
        this,
        this._near.connection,
        this._authData.accountId
      );
    }

    return this._connectedAccount;
  }
}

'''
'''--- services/sputnik/SputnikNearService/overrides/types.ts ---
// eslint-disable-next-line import/no-cycle
export type { SputnikWalletConnection } from './SputnikWalletConnection';

'''
'''--- services/sputnik/SputnikNearService/services/BaseService.ts ---
import { configService } from 'services/ConfigService';
import { WalletService } from 'services/sputnik/SputnikNearService/walletServices/types';

export class BaseService {
  protected readonly walletService;

  protected readonly nearConfig;

  protected readonly appConfig;

  constructor(walletService: WalletService) {
    this.walletService = walletService;

    const { nearConfig, appConfig } = configService.get();

    this.nearConfig = nearConfig;
    this.appConfig = appConfig;
  }
}

'''
'''--- services/sputnik/SputnikNearService/services/GovernanceTokenService.ts ---
import BN from 'bn.js';
import Decimal from 'decimal.js';
import { FinalExecutionOutcome } from 'near-api-js/lib/providers';
import { transactions } from 'near-api-js';

import { jsonToBase64Str } from 'utils/jsonToBase64Str';
import { formatGasValue } from 'utils/format';

import { WalletType } from 'types/config';

import { GAS_VALUE } from 'services/sputnik/SputnikNearService/services/constants';
import { STAKING_CONTRACT_PREFIX } from 'constants/proposals';

import { getWalletSelectorStorageDepositTransaction } from 'services/sputnik/SputnikNearService/services/utils/getWalletSelectorStorageDepositTransaction';
import { getPlainFunctionCallTransaction } from 'services/sputnik/SputnikNearService/services/utils/getPlainFunctionCallTransaction';

import { BaseService } from './BaseService';

export const ONE_NEAR = new BN(`1${'0'.repeat(24)}`);
export const FIVE_NEAR = ONE_NEAR.mul(new BN(5));

export type MintTokenParams = {
  ownerId: string;
  totalSupply: string;
  name: string;
  symbol: string;
  decimals: number;
  icon: File | null;
};

export type DistributeVotingTokenParams = {
  receiverId: string;
  amount: string;
  tokenId: string;
};

export type DeployStakingContractParams = {
  description: string;
  stakingContractName: string;
  tokenId: string;
  daoId: string;
  daoBond: string;
  unstakingPeriodInHours: number;
};

export type AcceptStakingContractParams = {
  stakingContractName: string;
  daoId: string;
  daoBond: string;
  description: string;
};

export type UpdateVotePolicyToWeightVoting = {
  threshold: string;
};

export type StakeTokensParams = {
  tokenContract: string;
  stakingContract: string;
  amount: string;
};

export type DelegateVotingParams = {
  name: string;
  amount: string;
};

export class GovernanceTokenService extends BaseService {
  getStackingContract(daoId: string): string {
    return `${daoId}${STAKING_CONTRACT_PREFIX}.${this.appConfig.GENERIC_FACTORY_CONTRACT_NAME}`;
  }

  async acceptStakingContract({
    stakingContractName,
    daoId,
    daoBond,
    description,
  }: AcceptStakingContractParams): Promise<FinalExecutionOutcome[]> {
    const contract = `${stakingContractName}.${this.appConfig.GENERIC_FACTORY_CONTRACT_NAME}`;

    return this.walletService.functionCall({
      methodName: 'add_proposal',
      contractId: daoId,
      args: {
        proposal: {
          description,
          kind: {
            SetStakingContract: {
              staking_id: contract,
            },
          },
        },
      },
      gas: formatGasValue(150),
      attachedDeposit: new BN(daoBond),
    });
  }

  async deployStakingContract({
    description,
    stakingContractName,
    tokenId,
    daoId,
    daoBond,
    unstakingPeriodInHours,
  }: DeployStakingContractParams): Promise<FinalExecutionOutcome[]> {
    const { GENERIC_FACTORY_CONTRACT_NAME, STAKING_CONTRACT_BINARY_HASH } =
      this.appConfig;

    const pkAndSignature = await this.walletService.getPkAndSignature();
    const accountId = await this.walletService.getAccountId();

    if (!pkAndSignature) {
      console.error('no public key found for account', accountId);

      return [];
    }

    const { publicKey } = pkAndSignature;

    if (!publicKey) {
      console.error('no public key found for account', accountId);

      return [];
    }

    const encodedStakingContractArgs = jsonToBase64Str({
      token_id: tokenId,
      owner_id: daoId,
      unstake_period: new Decimal(unstakingPeriodInHours)
        .mul('3.6e12')
        .toFixed(),
    });

    const encodedFactoryContractArgs = jsonToBase64Str({
      name: stakingContractName,
      hash: STAKING_CONTRACT_BINARY_HASH,
      access_keys: [publicKey],
      method_name: 'new',
      args: encodedStakingContractArgs,
    });

    return this.walletService.functionCall({
      methodName: 'add_proposal',
      contractId: daoId,
      args: {
        proposal: {
          description,
          kind: {
            FunctionCall: {
              receiver_id: GENERIC_FACTORY_CONTRACT_NAME,
              actions: [
                {
                  method_name: 'create',
                  args: encodedFactoryContractArgs,
                  deposit: FIVE_NEAR.toString(),
                  gas: '150000000000000',
                },
              ],
            },
          },
        },
      },
      gas: formatGasValue(150),
      attachedDeposit: new BN(daoBond),
    });
  }

  async distributeToken(
    daoId: string,
    daoBond: string,
    params: DistributeVotingTokenParams
  ): Promise<FinalExecutionOutcome[]> {
    const { receiverId, amount, tokenId } = params;

    const encodedArgs = jsonToBase64Str({ receiver_id: receiverId, amount });

    return this.walletService.functionCall({
      methodName: 'add_proposal',
      contractId: daoId,
      args: {
        proposal: {
          description: `Sending ${amount} tokens to ${receiverId}`,
          kind: {
            FunctionCall: {
              receiver_id: tokenId,
              actions: [
                {
                  method_name: 'ft_transfer',
                  args: encodedArgs,
                  deposit: '1',
                  gas: '150000000000000',
                },
              ],
            },
          },
        },
      },
      gas: formatGasValue(150),
      attachedDeposit: new BN(daoBond),
    });
  }

  // eslint-disable-next-line class-methods-use-this
  private async iconAsBase64(file: File | null): Promise<string> {
    if (!file) {
      return '';
    }

    const UploadResizeWidth = 96;
    const UploadResizeHeight = 96;

    const sourceImage = new Image();
    const reader = new FileReader();

    reader.readAsDataURL(file);

    return new Promise(resolve => {
      sourceImage.onload = () => {
        // Create a canvas with the desired dimensions
        const canvas = document.createElement('canvas');
        const aspect = sourceImage.naturalWidth / sourceImage.naturalHeight;
        const width = Math.round(UploadResizeWidth * Math.max(1, aspect));
        const height = Math.round(UploadResizeHeight * Math.max(1, 1 / aspect));

        canvas.width = UploadResizeWidth;
        canvas.height = UploadResizeHeight;

        const ctx = canvas.getContext('2d');

        if (!ctx) {
          return;
        }

        // Scale and draw the source image to the canvas
        ctx.imageSmoothingQuality = 'high';
        ctx.fillStyle = '#fff';
        ctx.fillRect(0, 0, UploadResizeWidth, UploadResizeHeight);
        ctx.drawImage(
          sourceImage,
          (UploadResizeWidth - width) / 2,
          (UploadResizeHeight - height) / 2,
          width,
          height
        );

        // Convert the canvas to a data URL in PNG format
        const options = [
          canvas.toDataURL('image/jpeg', 0.92),
          // Disabling webp because it doesn't work on iOS.
          // canvas.toDataURL('image/webp', 0.92),
          canvas.toDataURL('image/png'),
        ];

        options.sort((a, b) => a.length - b.length);

        resolve(options[0]);
      };

      reader.onload = event => {
        sourceImage.src = event.target?.result as string;
      };
    });
  }

  async createMintTokenProposal(
    daoId: string,
    bond: string,
    { ownerId, totalSupply, name, symbol, decimals, icon }: MintTokenParams
  ): Promise<FinalExecutionOutcome> {
    const encodedIcon = await this.iconAsBase64(icon);

    const args = {
      args: {
        owner_id: ownerId,
        total_supply: totalSupply,
        metadata: {
          spec: 'ft-1.0.0',
          name,
          symbol,
          icon: encodedIcon,
          decimals,
        },
      },
    };

    const encodedArgs = jsonToBase64Str(args);

    const result = await this.walletService.functionCall({
      methodName: 'add_proposal',
      contractId: daoId,
      args: {
        proposal: {
          description: `Farming ${totalSupply} units of a new token: ${name} to ${ownerId}`,
          kind: {
            FunctionCall: {
              receiver_id: this.nearConfig.tokenFactoryContractName,
              actions: [
                {
                  method_name: 'create_token',
                  args: encodedArgs,
                  deposit: '5000000000000000000000000',
                  gas: '150000000000000',
                },
              ],
            },
          },
        },
      },
      gas: formatGasValue(150),
      attachedDeposit: new BN(bond),
    });

    return result[0];
  }

  async stakeTokens({
    tokenContract,
    stakingContract,
    amount,
  }: StakeTokensParams): Promise<FinalExecutionOutcome[] | void> {
    const isSignedIn = await this.walletService.isSignedIn();

    if (!isSignedIn) {
      await this.walletService.signIn(this.nearConfig.contractName);
    }

    let userStorageDepositTransactionAction;
    let storageDepositTransactionAction;
    let transferTransaction;

    const accountId = await this.walletService.getAccountId();

    switch (this.walletService.getWalletType()) {
      case WalletType.SENDER: {
        userStorageDepositTransactionAction = {
          receiverId: stakingContract,
          actions: [
            {
              methodName: 'storage_deposit',
              args: {
                account_id: accountId,
              },
              gas: GAS_VALUE.toString(),
              deposit: new Decimal(0.003).mul(10 ** 24).toFixed(),
            },
          ],
        };

        storageDepositTransactionAction = {
          receiverId: tokenContract,
          actions: [
            {
              methodName: 'storage_deposit',
              args: {
                account_id: stakingContract,
              },
              gas: GAS_VALUE.toString(),
              deposit: '100000000000000000000000',
            },
          ],
        };

        transferTransaction = {
          receiverId: tokenContract,
          actions: [
            {
              methodName: 'ft_transfer_call',
              args: {
                receiver_id: stakingContract,
                amount,
                msg: '',
              },
              gas: GAS_VALUE.toString(),
              deposit: '1',
            },
          ],
        };

        break;
      }
      case WalletType.SELECTOR_NEAR: {
        userStorageDepositTransactionAction =
          getWalletSelectorStorageDepositTransaction(
            stakingContract ?? '',
            accountId
          );
        storageDepositTransactionAction =
          getWalletSelectorStorageDepositTransaction(
            tokenContract ?? '',
            stakingContract
          );

        transferTransaction = getPlainFunctionCallTransaction({
          receiverId: tokenContract,
          methodName: 'ft_transfer_call',
          args: {
            receiver_id: stakingContract,
            amount,
            msg: '',
          },
          gas: GAS_VALUE.toString(),
          deposit: '1',
        });

        break;
      }
      case WalletType.NEAR:
      default: {
        userStorageDepositTransactionAction = {
          receiverId: stakingContract,
          actions: [
            transactions.functionCall(
              'storage_deposit',
              {
                account_id: accountId,
              },
              GAS_VALUE,
              new BN(new Decimal(0.003).mul(10 ** 24).toFixed())
            ),
          ],
        };

        storageDepositTransactionAction = {
          receiverId: tokenContract,
          actions: [
            transactions.functionCall(
              'storage_deposit',
              {
                account_id: stakingContract,
              },
              GAS_VALUE,
              new BN('100000000000000000000000')
            ),
          ],
        };

        transferTransaction = {
          receiverId: tokenContract,
          actions: [
            transactions.functionCall(
              'ft_transfer_call',
              {
                receiver_id: stakingContract,
                amount,
                msg: '',
              },
              GAS_VALUE,
              new BN('1')
            ),
          ],
        };
      }
    }

    return this.walletService.sendTransactions([
      storageDepositTransactionAction,
      userStorageDepositTransactionAction,
      transferTransaction,
    ]);
  }

  async unstakeTokens({
    tokenContract,
    stakingContract,
    amount,
  }: StakeTokensParams): Promise<FinalExecutionOutcome[] | void> {
    const isSignedIn = await this.walletService.isSignedIn();

    if (!isSignedIn) {
      await this.walletService.signIn(this.nearConfig.contractName);
    }

    let transferTransaction;

    switch (this.walletService.getWalletType()) {
      case WalletType.SENDER: {
        transferTransaction = {
          receiverId: stakingContract,
          actions: [
            {
              methodName: 'withdraw',
              args: {
                receiver_id: tokenContract,
                amount,
                msg: '',
              },
              gas: GAS_VALUE.toString(),
              // deposit: '1',
            },
          ],
        };

        break;
      }
      case WalletType.NEAR:
      default: {
        transferTransaction = {
          receiverId: stakingContract,
          actions: [
            transactions.functionCall(
              'withdraw',
              {
                receiver_id: tokenContract,
                amount,
                msg: '',
              },
              GAS_VALUE,
              new BN('0')
            ),
          ],
        };
      }
    }

    return this.walletService.sendTransactions([transferTransaction]);
  }

  private mapDelegateVoting(
    stakingContract: string,
    accountId: string,
    amount: string,
    methodName = 'delegate'
  ) {
    let transaction;

    switch (this.walletService.getWalletType()) {
      case WalletType.SENDER: {
        transaction = [
          {
            receiverId: stakingContract,
            actions: [
              {
                methodName: 'storage_deposit',
                args: {
                  account_id: accountId,
                },
                gas: GAS_VALUE.toString(),
                deposit: new Decimal(0.003).mul(10 ** 24).toFixed(),
              },
            ],
          },
          {
            receiverId: stakingContract,
            actions: [
              {
                methodName,
                args: {
                  account_id: accountId,
                  amount,
                },
                gas: GAS_VALUE.toString(),
                deposit: '0',
              },
            ],
          },
        ];

        break;
      }
      case WalletType.SELECTOR_NEAR: {
        transaction = [
          getWalletSelectorStorageDepositTransaction(
            stakingContract ?? '',
            accountId,
            false
          ),
          getPlainFunctionCallTransaction({
            receiverId: stakingContract,
            methodName,
            args: {
              account_id: accountId,
              amount,
            },
            gas: GAS_VALUE.toString(),
            deposit: '0',
          }),
        ];

        break;
      }
      case WalletType.NEAR:
      default: {
        transaction = [
          {
            receiverId: stakingContract,
            actions: [
              transactions.functionCall(
                'storage_deposit',
                {
                  account_id: accountId,
                },
                GAS_VALUE,
                new BN(new Decimal(0.003).mul(10 ** 24).toFixed())
              ),
            ],
          },
          {
            receiverId: stakingContract,
            actions: [
              transactions.functionCall(
                methodName,
                {
                  account_id: accountId,
                  amount,
                },
                GAS_VALUE,
                new BN(0)
              ),
            ],
          },
        ];
      }
    }

    return transaction;
  }

  async delegateVoting(
    stakingContract: string,
    params: DelegateVotingParams[]
  ): Promise<FinalExecutionOutcome[] | void> {
    const isSignedIn = await this.walletService.isSignedIn();

    if (!isSignedIn) {
      await this.walletService.signIn(this.nearConfig.contractName);
    }

    const trx = params.flatMap(({ name, amount }) => [
      ...this.mapDelegateVoting(stakingContract, name, amount),
    ]);

    return this.walletService.sendTransactions(trx);
  }

  async undelegateVoting(
    stakingContract: string,
    params: DelegateVotingParams[]
  ): Promise<FinalExecutionOutcome[] | void> {
    const isSignedIn = await this.walletService.isSignedIn();

    if (!isSignedIn) {
      await this.walletService.signIn(this.nearConfig.contractName);
    }

    const trx = params.flatMap(({ name, amount }) => [
      ...this.mapDelegateVoting(stakingContract, name, amount, 'undelegate'),
    ]);

    return this.walletService.sendTransactions(trx);
  }
}

'''
'''--- services/sputnik/SputnikNearService/services/NearService.ts ---
import BN from 'bn.js';
import { FinalExecutionOutcome } from 'near-api-js/lib/providers';
import {
  KeyPair,
  keyStores,
  Near,
  providers,
  transactions,
  utils,
} from 'near-api-js';
// import { parseContract } from 'near-contract-parser';

import { CreateDaoCustomInput, CreateDaoInput } from 'types/dao';

import { CreateProposalParams, Transfer, VoteAction } from 'types/proposal';

import { formatGasValue } from 'utils/format';

import { FunctionCallOptions } from 'near-api-js/lib/account';
import { mapCreateDaoParamsToContractArgs } from 'services/sputnik/mappers';
import { DEFAULT_PROPOSAL_GAS } from 'services/sputnik/constants';
import { WalletType } from 'types/config';
import { Transaction } from 'services/sputnik/SputnikNearService/walletServices/types';

import { CreateDaoParams, RawMeta } from 'services/sputnik/types';
import { PublicKey } from 'near-api-js/lib/utils';
import { parseNearAmount } from 'near-api-js/lib/utils/format';
import {
  AccessKeyList,
  AccountView,
  FunctionCallPermissionView,
} from 'near-api-js/lib/providers/provider';
import { AllowanceKey } from 'services/sputnik/SputnikNearService/types';

import { jsonToBase64Str } from 'utils/jsonToBase64Str';
import { FINALIZE_PROPOSAL_GAS_VALUE, GAS_VALUE } from './constants';
import { getPlainFunctionCallTransaction } from './utils/getPlainFunctionCallTransaction';
import { getWalletSelectorStorageDepositTransaction } from './utils/getWalletSelectorStorageDepositTransaction';

import { BaseService } from './BaseService';

const USN_TOKEN_CONTRACTS = ['usn', 'usdn.testnet'];

export class NearService extends BaseService {
  sendMoney(
    receiverId: string,
    amount: number
  ): Promise<FinalExecutionOutcome[]> {
    return this.walletService.sendMoney(receiverId, amount);
  }

  getWalletType(): WalletType {
    return this.walletService.getWalletType();
  }

  isSignedIn(): Promise<boolean> {
    return this.walletService.isSignedIn();
  }

  functionCall(props: FunctionCallOptions): Promise<FinalExecutionOutcome[]> {
    return this.walletService.functionCall(props);
  }

  sendTransactions(
    txs: Transaction[]
  ): Promise<FinalExecutionOutcome[] | void> {
    return this.walletService.sendTransactions(txs);
  }

  public async signIn(contractId: string): Promise<boolean> {
    return this.walletService.signIn(contractId);
  }

  public getAccountId(): Promise<string> {
    return this.walletService.getAccountId();
  }

  public async createDao(
    params: CreateDaoInput | CreateDaoCustomInput
  ): Promise<void> {
    const isSignedIn = await this.isSignedIn();

    if (!isSignedIn) {
      await this.walletService.signIn(this.nearConfig.contractName);
    }

    function isCreateDaoParams(
      _params: CreateDaoParams | CreateDaoCustomInput
    ): _params is CreateDaoParams {
      return (_params as CreateDaoParams).policy !== undefined;
    }

    const args = isCreateDaoParams(params)
      ? mapCreateDaoParamsToContractArgs(params)
      : params.args;

    const amount = new BN(
      utils.format.parseNearAmount(params.amountToTransfer) || '0'
    );

    await this.functionCall({
      contractId: this.nearConfig.contractName,
      methodName: 'create',
      args: {
        name: params.name,
        args,
      },
      gas: formatGasValue(params.gas),
      attachedDeposit: amount,
    });
  }

  public async addProposal(
    params: CreateProposalParams,
    opts: Record<string, string> = {}
  ): Promise<FinalExecutionOutcome[]> {
    const isSignedIn = await this.isSignedIn();

    if (!isSignedIn) {
      await this.walletService.signIn(this.nearConfig.contractName);
    }

    const { daoId, description, kind, data, bond, gas } = params;

    const kindData = data
      ? {
          [kind]: data,
        }
      : kind;

    return this.walletService.functionCall({
      methodName: 'add_proposal',
      contractId: daoId,
      args: {
        proposal: {
          description,
          kind: kindData,
        },
        ...opts,
      },
      gas: formatGasValue(gas ?? DEFAULT_PROPOSAL_GAS),
      attachedDeposit: new BN(bond),
    });
  }

  public async claimBounty(
    daoId: string,
    args: {
      bountyId: number;
      deadline: string;
      bountyBond: string;
      gas?: string | number;
      tokenId?: string;
    }
  ): Promise<FinalExecutionOutcome[] | void> {
    const isSignedIn = await this.isSignedIn();

    if (!isSignedIn) {
      await this.walletService.signIn(this.nearConfig.contractName);
    }

    const accountId = await this.getAccountId();
    const { bountyId: id, deadline, bountyBond, gas, tokenId } = args;

    let storageDepositTransactionAction;
    let claimAction;

    switch (this.getWalletType()) {
      case WalletType.SENDER: {
        storageDepositTransactionAction = {
          receiverId: tokenId ?? '',
          actions: [
            {
              methodName: 'storage_deposit',
              args: {
                account_id: accountId,
                registration_only: true,
              },
              gas: GAS_VALUE.toString(),
              deposit: '100000000000000000000000',
            },
          ],
        };

        claimAction = {
          receiverId: daoId,
          actions: [
            {
              methodName: 'bounty_claim',
              args: {
                id,
                deadline,
              },
              gas: (gas ? formatGasValue(gas) : GAS_VALUE).toString(),
              deposit: bountyBond,
            },
          ],
        };
        break;
      }
      case WalletType.SELECTOR_NEAR:
      case WalletType.SELECTOR_SENDER: {
        storageDepositTransactionAction =
          getWalletSelectorStorageDepositTransaction(tokenId ?? '', accountId);

        claimAction = getPlainFunctionCallTransaction({
          receiverId: daoId,
          methodName: 'bounty_claim',
          args: {
            id,
            deadline,
          },
          gas: (gas ? formatGasValue(gas) : GAS_VALUE).toString(),
          deposit: bountyBond,
        });

        break;
      }
      case WalletType.NEAR:
      default: {
        storageDepositTransactionAction = {
          receiverId: tokenId ?? '',
          actions: [
            transactions.functionCall(
              'storage_deposit',
              {
                account_id: accountId,
                registration_only: true,
              },
              GAS_VALUE,
              // 0.1 NEAR, minimal value
              new BN('100000000000000000000000')
            ),
          ],
        };

        claimAction = {
          receiverId: daoId,
          actions: [
            transactions.functionCall(
              'bounty_claim',
              {
                id,
                deadline,
              },
              gas ? formatGasValue(gas) : GAS_VALUE,
              new BN(bountyBond)
            ),
          ],
        };
      }
    }

    const trx =
      tokenId && !USN_TOKEN_CONTRACTS.includes(tokenId)
        ? [storageDepositTransactionAction, claimAction]
        : [claimAction];

    return this.walletService.sendTransactions(trx);
  }

  public async unclaimBounty(
    daoId: string,
    bountyId: number,
    gas?: string | number
  ): Promise<FinalExecutionOutcome[]> {
    const isSignedIn = await this.isSignedIn();

    if (!isSignedIn) {
      await this.walletService.signIn(this.nearConfig.contractName);
    }

    return this.walletService.functionCall({
      methodName: 'bounty_giveup',
      contractId: daoId,
      args: {
        id: bountyId,
      },
      gas: gas ? formatGasValue(gas) : GAS_VALUE,
    });
  }

  public async finalize(
    contractId: string,
    proposalId: number
  ): Promise<FinalExecutionOutcome[]> {
    const isSignedIn = await this.isSignedIn();

    if (!isSignedIn) {
      await this.walletService.signIn(this.nearConfig.contractName);
    }

    return this.walletService.functionCall({
      methodName: 'act_proposal',
      contractId,
      args: {
        id: proposalId,
        action: 'Finalize',
      },
      gas: FINALIZE_PROPOSAL_GAS_VALUE,
    });
  }

  public async getAllowanceKeys(): Promise<AllowanceKey[]> {
    const provider = new providers.JsonRpcProvider(this.nearConfig.nodeUrl);
    const accountId = await this.getAccountId();

    const accessKeys = await provider
      .query<AccessKeyList>({
        request_type: 'view_access_key_list',
        account_id: accountId,
        finality: 'final',
      })
      .then(list => list.keys);

    const permissionPredicate = (permission: FunctionCallPermissionView) => {
      return (
        permission.FunctionCall.receiver_id.endsWith(
          this.nearConfig.contractName
        ) &&
        permission.FunctionCall.allowance !== null &&
        permission.FunctionCall.method_names.includes('act_proposal')
      );
    };

    return accessKeys.reduce<AllowanceKey[]>((acc, accessKey) => {
      if (accessKey.access_key.permission === 'FullAccess') {
        return acc;
      }

      const permission = accessKey.access_key
        .permission as FunctionCallPermissionView;

      if (!permissionPredicate(permission)) {
        return acc;
      }

      acc.push({
        allowance: permission.FunctionCall.allowance,
        daoId: permission.FunctionCall.receiver_id,
        methodNames: permission.FunctionCall.method_names,
      });

      return acc;
    }, []);
  }

  public async requestDaoAllowanceKey(
    daoId: string,
    allowance: string
  ): Promise<FinalExecutionOutcome[] | void> {
    const accessKey = KeyPair.fromRandom('ed25519');

    const accessKeyTransaction = transactions.functionCallAccessKey(
      daoId,
      ['act_proposal'],
      new BN(parseNearAmount(allowance) ?? 0)
    );

    const receiverId = await this.getAccountId();

    const result = await this.sendTransactions([
      {
        receiverId,
        actions: [
          transactions.addKey(
            PublicKey.from(accessKey.getPublicKey()),
            accessKeyTransaction
          ),
        ],
      },
    ]);

    if (
      this.walletService.getWalletType() !== WalletType.SELECTOR_NEAR ||
      this.walletService.getWalletType() !== WalletType.SELECTOR_SENDER
    ) {
      await this.walletService
        .getKeyStore()
        .setKey(this.nearConfig.networkId, receiverId, accessKey);
    }

    return result;
  }

  public async vote(
    daoId: string,
    proposalId: number,
    action: VoteAction,
    gas?: string | number
  ): Promise<FinalExecutionOutcome[]> {
    const isSignedIn = await this.isSignedIn();

    if (!isSignedIn) {
      await this.walletService.signIn(this.nearConfig.contractName);
    }

    return this.walletService.functionCall({
      methodName: 'act_proposal',
      contractId: daoId,
      args: {
        id: proposalId,
        action,
      },
      gas: gas ? formatGasValue(gas) : GAS_VALUE,
    });
  }

  private mapVoteProposalAction(
    daoId: string,
    proposalId: string,
    action: string
  ) {
    let transaction;

    switch (this.getWalletType()) {
      case WalletType.SENDER: {
        transaction = {
          receiverId: daoId,
          actions: [
            {
              methodName: 'act_proposal',
              args: {
                id: Number(proposalId),
                action,
              },
              gas: GAS_VALUE.toString(),
              deposit: '0',
            },
          ],
        };

        break;
      }
      case WalletType.SELECTOR_NEAR:
      case WalletType.SELECTOR_SENDER: {
        transaction = getPlainFunctionCallTransaction({
          receiverId: daoId,
          methodName: 'act_proposal',
          args: {
            id: Number(proposalId),
            action,
          },
        });

        break;
      }
      case WalletType.NEAR:
      default: {
        transaction = {
          receiverId: daoId,
          actions: [
            transactions.functionCall(
              'act_proposal',
              {
                id: Number(proposalId),
                action,
              },
              GAS_VALUE,
              new BN(0)
            ),
          ],
        };
      }
    }

    return transaction;
  }

  public async multiVote(
    action: VoteAction,
    params: { daoId: string; proposalId: string }[]
  ): Promise<FinalExecutionOutcome[]> {
    const isSignedIn = await this.isSignedIn();

    if (!isSignedIn) {
      await this.walletService.signIn(this.nearConfig.contractName);
    }

    const trx = params.map(({ daoId, proposalId }) =>
      this.mapVoteProposalAction(daoId, proposalId, action)
    );

    return this.walletService.sendTransactions(trx);
  }

  private mapTokenTransferProposal(
    proposal: CreateProposalParams,
    opts: Record<string, string> = {}
  ) {
    const { bond, daoId, description, kind, data } = proposal;

    const { token_id: tokenContract, receiver_id: recipient } =
      data as Transfer;

    let storageDepositTransactionAction;
    let transferTransaction;

    switch (this.getWalletType()) {
      case WalletType.SENDER: {
        storageDepositTransactionAction = {
          receiverId: tokenContract,
          actions: [
            {
              methodName: 'storage_deposit',
              args: {
                account_id: recipient,
                registration_only: true,
              },
              gas: GAS_VALUE.toString(),
              deposit: '100000000000000000000000',
            },
          ],
        };

        transferTransaction = {
          receiverId: daoId,
          actions: [
            {
              methodName: 'add_proposal',
              args: {
                proposal: {
                  description,
                  kind: {
                    [kind]: data,
                  },
                },
                ...opts,
              },
              gas: GAS_VALUE.toString(),
              deposit: bond,
            },
          ],
        };
        break;
      }
      case WalletType.SELECTOR_NEAR:
      case WalletType.SELECTOR_SENDER: {
        storageDepositTransactionAction =
          getWalletSelectorStorageDepositTransaction(tokenContract, recipient);

        transferTransaction = getPlainFunctionCallTransaction({
          receiverId: daoId,
          methodName: 'add_proposal',
          args: {
            proposal: {
              description,
              kind: {
                [kind]: data,
              },
            },
            ...opts,
          },
          deposit: bond,
        });

        break;
      }
      case WalletType.NEAR:
      default: {
        storageDepositTransactionAction = {
          receiverId: tokenContract,
          actions: [
            transactions.functionCall(
              'storage_deposit',
              {
                account_id: recipient,
                registration_only: true,
              },
              GAS_VALUE,
              // 0.1 NEAR, minimal value
              new BN('100000000000000000000000')
            ),
          ],
        };

        transferTransaction = {
          receiverId: daoId,
          actions: [
            transactions.functionCall(
              'add_proposal',
              {
                proposal: {
                  description,
                  kind: {
                    [kind]: data,
                  },
                },
                ...opts,
              },
              GAS_VALUE,
              new BN(bond)
            ),
          ],
        };
      }
    }

    return tokenContract && !USN_TOKEN_CONTRACTS.includes(tokenContract)
      ? [storageDepositTransactionAction, transferTransaction]
      : [transferTransaction];
  }

  public async createTokensTransferProposal(
    proposalsData: CreateProposalParams[]
  ): Promise<FinalExecutionOutcome[] | void> {
    const isSignedIn = await this.isSignedIn();

    if (!isSignedIn) {
      await this.walletService.signIn(this.nearConfig.contractName);
    }

    const trx = proposalsData.flatMap(proposal =>
      this.mapTokenTransferProposal(proposal)
    );

    return this.walletService.sendTransactions(trx);
  }

  public async createTokenTransferProposal(
    proposal: CreateProposalParams,
    opts: Record<string, string> = {}
  ): Promise<FinalExecutionOutcome[]> {
    const isSignedIn = await this.isSignedIn();

    if (!isSignedIn) {
      await this.walletService.signIn(this.nearConfig.contractName);
    }

    const trx = this.mapTokenTransferProposal(proposal, opts);

    return this.walletService.sendTransactions(trx);
  }

  async nearAccountExist(accountId: string): Promise<boolean> {
    const keyStore = new keyStores.BrowserLocalStorageKeyStore();

    const near = new Near({
      ...this.nearConfig,
      keyStore,
    });

    const account = await near.account(accountId);

    try {
      await account.state();

      return true;
    } catch (e) {
      return false;
    }
  }

  async getSmartContractMethods(accountId: string): Promise<string[] | null> {
    try {
      if (!accountId) {
        return null;
      }

      const isValid = await this.nearAccountExist(accountId);

      if (!isValid) {
        return null;
      }

      // const keyStore = new keyStores.BrowserLocalStorageKeyStore();

      // const near = new Near({
      //   ...this.nearConfig,
      //   keyStore,
      // });

      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      
      // const { code_base64: codeBase64 } = await near.connection.provider.query({
      //   account_id: accountId,
      //   finality: 'final',
      //   request_type: 'view_code',
      // });

      // const parsed = parseContract(codeBase64);

      const methods = null; // parsed?.methodNames;

      return methods || null;
    } catch (e) {
      console.error(e);

      return null;
    }
  }

  public async getContractsMetadata(): Promise<RawMeta[]> {
    return this.callContract<RawMeta[]>(
      this.appConfig.NEAR_CONTRACT_NAME,
      'get_contracts_metadata',
      ''
    );
  }

  public async viewAccount(accountId: string): Promise<AccountView> {
    return this.walletService.viewAccount(accountId);
  }

  public async getFactoryDefaultHash(): Promise<string> {
    return this.callContract<string>(
      this.appConfig.NEAR_CONTRACT_NAME,
      'get_default_code_hash',
      ''
    );
  }

  public async getFtMetadata(accountId: string): Promise<{
    symbol: string;
    decimals: number;
  }> {
    return this.callContract<{
      symbol: string;
      decimals: number;
    }>(accountId, 'ft_metadata', '');
  }

  public async getDelegationTotalSupply(
    stakingContract: string
  ): Promise<string> {
    return this.callContract<string>(
      stakingContract,
      'delegation_total_supply',
      ''
    );
  }

  public async getUserDelegation(
    stakingContract: string,
    accountId: string
  ): Promise<{
    // eslint-disable-next-line camelcase
    delegated_amounts: [string, string][];
    // eslint-disable-next-line camelcase
    vote_amount: string;
    // eslint-disable-next-line camelcase
    next_action_timestamp: string;
  }> {
    return this.callContract<{
      // eslint-disable-next-line camelcase
      delegated_amounts: [string, string][];
      // eslint-disable-next-line camelcase
      vote_amount: string;
      // eslint-disable-next-line camelcase
      next_action_timestamp: string;
    }>(stakingContract, 'get_user', jsonToBase64Str({ account_id: accountId }));
  }

  public async getFtBalance(
    tokenContract: string,
    accountId: string
  ): Promise<string> {
    return this.callContract<string>(
      tokenContract,
      'ft_balance_of',
      jsonToBase64Str({ account_id: accountId })
    );
  }

  public callContract<T>(
    accountId: string,
    viewMethod: string,
    argsAsBase64: string
  ): Promise<T> {
    return this.walletService.contractCall<T>(
      accountId,
      viewMethod,
      argsAsBase64
    );
  }
}

'''
'''--- services/sputnik/SputnikNearService/services/constants.ts ---
import BN from 'bn.js';

export const GAS_VALUE = new BN('300000000000000');
export const FINALIZE_PROPOSAL_GAS_VALUE = new BN('150000000000000');

'''
'''--- services/sputnik/SputnikNearService/services/utils/getPlainFunctionCallTransaction.ts ---
import { GAS_VALUE } from 'services/sputnik/SputnikNearService/services/constants';

import { Transaction } from 'services/sputnik/SputnikNearService/walletServices/types';

type FcInput = {
  receiverId: string;
  methodName: string;
  args: Record<string, unknown>;
  gas?: string | number;
  deposit?: string;
};

export function getPlainFunctionCallTransaction(input: FcInput): Transaction {
  const { receiverId, methodName, args, gas, deposit } = input;

  return {
    receiverId,
    actions: [
      {
        type: 'FunctionCall',
        params: {
          methodName,
          args,
          gas: (gas || GAS_VALUE)?.toString(),
          deposit: deposit || '0',
        },
      },
    ],
  } as Transaction;
}

'''
'''--- services/sputnik/SputnikNearService/services/utils/getWalletSelectorStorageDepositTransaction.ts ---
import { Transaction } from 'services/sputnik/SputnikNearService/walletServices/types';

import { GAS_VALUE } from 'services/sputnik/SputnikNearService/services/constants';

import { getPlainFunctionCallTransaction } from './getPlainFunctionCallTransaction';

export function getWalletSelectorStorageDepositTransaction(
  receiverId: string,
  accountId: string,
  registrationOnly = true
): Transaction {
  return getPlainFunctionCallTransaction({
    receiverId,
    methodName: 'storage_deposit',
    args: {
      account_id: accountId,
      registration_only: registrationOnly,
    },
    gas: GAS_VALUE?.toString(),
    deposit: '100000000000000000000000',
  });
}

'''
'''--- services/sputnik/SputnikNearService/types.ts ---
export interface AllowanceKey {
  daoId: string;
  allowance: string;
  methodNames: string[];
}

'''
'''--- services/sputnik/SputnikNearService/walletServices/RpcService.ts ---
import { AccountView } from 'near-api-js/lib/providers/provider';
import { Provider } from 'near-api-js/lib/providers';
import { RpcCallResult } from 'services/sputnik/SputnikNearService/walletServices/types';

export class RpcService {
  private provider: Provider;

  constructor(provider: Provider) {
    this.provider = provider;
  }

  viewAccount(accountId: string): Promise<AccountView> {
    return this.provider.query<AccountView>({
      request_type: 'view_account',
      account_id: accountId,
      finality: 'final',
    });
  }

  async contractCall<T>(
    accountId: string,
    methodName: string,
    argsAsBase64: string
  ): Promise<T> {
    try {
      const { result } = await this.provider.query<RpcCallResult>({
        request_type: 'call_function',
        account_id: accountId,
        method_name: methodName,
        args_base64: argsAsBase64,
        finality: 'final',
      });

      return JSON.parse(Buffer.from(result).toString()) as T;
    } catch (e) {
      return Promise.reject();
    }
  }
}

'''
'''--- services/sputnik/SputnikNearService/walletServices/SenderWalletService.ts ---
import { ConnectedWalletAccount, providers, Signer } from 'near-api-js';
import { FunctionCallOptions } from 'near-api-js/lib/account';
import {
  getSignature,
  isError,
  isExtensionError,
} from 'services/sputnik/SputnikNearService/walletServices/helpers';
import { FinalExecutionOutcome } from 'near-api-js/lib/providers';
import {
  SenderWalletInstance,
  Transaction,
  WalletMeta,
  WalletService,
} from 'services/sputnik/SputnikNearService/walletServices/types';
import { WalletType } from 'types/config';
import { parseNearAmount } from 'near-api-js/lib/utils/format';
import { httpService } from 'services/HttpService';
import { KeyStore } from 'near-api-js/lib/key_stores';

import { RpcService } from 'services/sputnik/SputnikNearService/walletServices/RpcService';
import { NearConfig } from 'config/near';
import { AccountView } from 'near-api-js/lib/providers/provider';
import { PkAndSignature } from 'context/WalletContext/types';
import { configService } from 'services/ConfigService';

import { SENDER_WALLET_METADATA } from './constants';

export class SenderWalletService implements WalletService {
  private readonly walletInstance: SenderWalletInstance;

  private readonly walletType = WalletType.SENDER;

  private readonly rpcService: RpcService;

  constructor(walletInstance: SenderWalletInstance, nearConfig: NearConfig) {
    this.walletInstance = walletInstance;
    this.rpcService = new RpcService(
      new providers.JsonRpcProvider(nearConfig.nodeUrl)
    );
  }

  viewAccount(accountId: string): Promise<AccountView> {
    return this.rpcService.viewAccount(accountId);
  }

  contractCall<T>(
    accountId: string,
    methodName: string,
    argsAsBase64: string
  ): Promise<T> {
    return this.rpcService.contractCall(accountId, methodName, argsAsBase64);
  }

  isSignedIn(): Promise<boolean> {
    const wallet = this.walletInstance;
    const isSigned = wallet.isSignedIn() && !!wallet.authData.accessKey;

    return Promise.resolve(isSigned);
  }

  logout(): Promise<void> {
    return Promise.resolve(this.walletInstance.signOut());
  }

  async signIn(contractId: string): Promise<boolean> {
    const result = await this.walletInstance.requestSignIn({
      contractId,
    });

    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    if (result.error) {
      return Promise.reject(new Error('sigh on rejected'));
    }

    return Promise.resolve(true);
  }

  getAccount(): ConnectedWalletAccount {
    return this.walletInstance.account();
  }

  getAccountId(): Promise<string> {
    return Promise.resolve(this.walletInstance.accountId);
  }

  async sendTransactions(
    transactions: Transaction[]
  ): Promise<FinalExecutionOutcome[]> {
    const result = await this.walletInstance.requestSignTransactions({
      transactions,
    });

    if (isExtensionError(result)) {
      throw new Error(result.error);
    }

    if (isError(result.response)) {
      throw new Error(result.response.error.kind.ExecutionError);
    }

    const transactionHashes = result.response[0].transaction.hash;
    const signerId = result.response[0].transaction.signer_id;

    try {
      await httpService.get(
        `/transactions/wallet/callback/${signerId}?transactionHashes=${transactionHashes}&noRedirect=true`
      );
    } catch (e) {
      console.error(e);
    }

    return result.response;
  }

  async functionCall(
    props: FunctionCallOptions
  ): Promise<FinalExecutionOutcome[]> {
    const tx = {
      receiverId: props.contractId,
      actions: [
        {
          methodName: props.methodName,
          args: { ...props.args },
          gas: props.gas?.toString(),
          deposit: props.attachedDeposit
            ? props.attachedDeposit?.toString()
            : '0',
        },
      ],
    };
    const result = await this.walletInstance.signAndSendTransaction(tx);

    if (isExtensionError(result)) {
      throw new Error(result.error);
    }

    if (isError(result.response)) {
      throw new Error(result.response.error.kind.ExecutionError);
    }

    const transactionHashes = result.response[0].transaction.hash;
    const signerId = result.response[0].transaction.signer_id;

    try {
      await httpService.get(
        `/transactions/wallet/callback/${signerId}?transactionHashes=${transactionHashes}&noRedirect=true`
      );
    } catch (e) {
      // eslint-disable-next-line no-console
      console.log(e);
    }

    return result.response;
  }

  getWalletType(): WalletType {
    return this.walletType;
  }

  async sendMoney(
    receiverId: string,
    amount: number
  ): Promise<FinalExecutionOutcome[]> {
    const parsedAmount = parseNearAmount(amount.toString());

    const result = await this.walletInstance.sendMoney({
      receiverId,
      amount: parsedAmount ?? '',
    });

    if (isError(result.response)) {
      throw new Error(result.response.error.kind.ExecutionError);
    }

    return result.response;
  }

  // eslint-disable-next-line class-methods-use-this
  getAvailableAccounts(): Promise<string[]> {
    return Promise.resolve([this.walletInstance.accountId]);
  }

  // eslint-disable-next-line class-methods-use-this
  walletMeta(): WalletMeta {
    return SENDER_WALLET_METADATA;
  }

  getKeyStore(): KeyStore {
    // eslint-disable-next-line no-underscore-dangle
    return this.getAccount().walletConnection._keyStore;
  }

  async getPkAndSignatureFromLocalKeyStore(): Promise<PkAndSignature | null> {
    const accountId = await this.getAccountId();

    const { nearConfig } = configService.get();

    const signer = window.near?.account()?.connection?.signer;

    if (!signer) {
      return null;
    }

    const { keyStore } = signer as { keyStore: KeyStore } & Signer;

    const keyPair = await keyStore.getKey(nearConfig.networkId, accountId);

    const publicKey = keyPair.getPublicKey();

    if (!publicKey) {
      return null;
    }

    return {
      publicKey: publicKey.toString(),
      signature: await getSignature(keyPair),
    };
  }

  getPkAndSignature(): Promise<PkAndSignature | null> {
    return this.getPkAndSignatureFromLocalKeyStore();
  }
}

'''
'''--- services/sputnik/SputnikNearService/walletServices/SputnikWalletService.ts ---
import {
  ConnectedWalletAccount,
  InMemorySigner,
  keyStores,
  Near,
  providers,
  transactions,
  utils,
} from 'near-api-js';
import { SputnikWalletConnection } from 'services/sputnik/SputnikNearService/overrides/SputnikWalletConnection';
import {
  BrowserLocalStorageKeyStore,
  KeyStore,
} from 'near-api-js/lib/key_stores';
import {
  AccessKey,
  Action,
  functionCall,
  transfer,
} from 'near-api-js/lib/transaction';
import { SputnikConnectedWalletAccount } from 'services/sputnik/SputnikNearService/overrides/SputnikConnectedWalletAccount';
import compact from 'lodash/compact';
import { WalletType } from 'types/config';
import { FinalExecutionOutcome } from 'near-api-js/lib/providers';
import { FunctionCallOptions } from 'near-api-js/lib/account';
import { getSignature } from 'services/sputnik/SputnikNearService/walletServices/helpers';
import {
  Transaction,
  WalletMeta,
  WalletService,
} from 'services/sputnik/SputnikNearService/walletServices/types';
import BN from 'bn.js';
import { NearConfig } from 'config/near';
import { parseNearAmount } from 'near-api-js/lib/utils/format';
import {
  AccessKeyInfoView,
  AccountView,
  FunctionCallPermissionView,
} from 'near-api-js/lib/providers/provider';
import { httpService } from 'services/HttpService';

import { RpcService } from 'services/sputnik/SputnikNearService/walletServices/RpcService';
import { PkAndSignature } from 'context/WalletContext/types';
import { configService } from 'services/ConfigService';

import { NEAR_WALLET_METADATA } from './constants';

export class SputnikWalletService implements WalletService {
  private readonly near: Near;

  private readonly walletType = WalletType.NEAR;

  private walletConnection!: SputnikWalletConnection;

  private readonly config: NearConfig;

  private keyStore: BrowserLocalStorageKeyStore;

  public readonly successUrl: string = `${window.origin}/callback/auth`;

  public readonly failureUrl: string = `${window.origin}/callback/auth`;

  private accessKeys: AccessKeyInfoView[] = [];

  private rpcService: RpcService;

  constructor(nearConfig: NearConfig) {
    const keyStore = new keyStores.BrowserLocalStorageKeyStore(
      window.localStorage
    );

    this.config = nearConfig;

    this.keyStore = keyStore;
    this.near = new Near({
      ...nearConfig,
      keyStore,
    });

    this.walletConnection = new SputnikWalletConnection(this.near, 'sputnik');

    this.rpcService = new RpcService(
      new providers.JsonRpcProvider(nearConfig.nodeUrl)
    );
  }

  async getPkAndSignatureFromLocalKeyStore(): Promise<PkAndSignature | null> {
    const accountId = await this.getAccountId();

    const { nearConfig } = configService.get();

    const keyPair = await this.keyStore.getKey(nearConfig.networkId, accountId);

    const publicKey = keyPair.getPublicKey();

    if (!publicKey) {
      return null;
    }

    return {
      publicKey: publicKey.toString(),
      signature: await getSignature(keyPair),
    };
  }

  getPkAndSignature(): Promise<PkAndSignature | null> {
    return this.getPkAndSignatureFromLocalKeyStore();
  }

  viewAccount(accountId: string): Promise<AccountView> {
    return this.rpcService.viewAccount(accountId);
  }

  contractCall<T>(
    accountId: string,
    methodName: string,
    argsAsBase64: string
  ): Promise<T> {
    return this.rpcService.contractCall<T>(accountId, methodName, argsAsBase64);
  }

  getKeyStore(): KeyStore {
    return this.keyStore;
  }

  // eslint-disable-next-line class-methods-use-this
  walletMeta(): WalletMeta {
    return NEAR_WALLET_METADATA;
  }

  async getAvailableAccounts(): Promise<string[]> {
    return this.keyStore.getAccounts(this.config.networkId);
  }

  async isSignedIn(): Promise<boolean> {
    const accountId = await this.getAccountId();

    return !!this.walletConnection && accountId !== '';
  }

  async functionCall(
    props: FunctionCallOptions
  ): Promise<FinalExecutionOutcome[]> {
    const directCallsList = ['act_proposal'];
    const accountId = await this.getAccountId();
    const { accessKeys } = this;

    const accessKeyForDao = accessKeys
      .filter(accessKey => accessKey.access_key.permission !== 'FullAccess')
      .find(accessKey => {
        const functionCallPermission = accessKey.access_key
          .permission as FunctionCallPermissionView;

        return (
          functionCallPermission.FunctionCall.receiver_id === props.contractId
        );
      });

    if (directCallsList.includes(props.methodName) && accessKeyForDao) {
      const transaction = await this.buildTransaction(
        props.contractId,
        accessKeyForDao.access_key.nonce + 1,
        [
          functionCall(
            props.methodName,
            props.args,
            props.gas ?? new BN(0),
            new BN(0)
          ),
        ]
      );

      const signer = new InMemorySigner(this.keyStore);

      const [, signedTransaction] = await transactions.signTransaction(
        transaction,
        signer,
        accountId,
        this.walletConnection.account().connection.networkId
      );

      try {
        const result = await this.near.connection.provider.sendTransaction(
          signedTransaction
        );

        const transactionHashes = result.transaction.hash;
        const signerId = result.transaction.signer_id;

        await httpService.get(
          `/transactions/wallet/callback/${signerId}?transactionHashes=${transactionHashes}&noRedirect=true`
        );

        return [result];
      } catch (e) {
        console.error(e);
      }
    }

    const result = await this.getAccount().functionCall({
      ...props,
      walletCallbackUrl: `${window.origin}/api/server/v1/transactions/wallet/callback/${accountId}`,
    });

    return [result];
  }

  public async signIn(contractId: string): Promise<boolean> {
    await this.walletConnection.sputnikRequestSignIn(
      contractId,
      this.successUrl,
      this.failureUrl
    );

    const keys = await this.getAccount().getAccessKeys();

    if (keys) {
      this.accessKeys = keys;
    }

    return Promise.resolve(true);
  }

  public logout(): Promise<void> {
    return Promise.resolve(this.walletConnection.signOut());
  }

  public getAccount(): ConnectedWalletAccount {
    return this.walletConnection.account();
  }

  public getAccountId(): Promise<string> {
    const accountId = this.walletConnection.getAccountId();

    return Promise.resolve(accountId);
  }

  public async getPublicKey(): Promise<string | null> {
    const accountId = await this.getAccountId();

    const keyPair = this.config
      ? await this.keyStore?.getKey(this.config.networkId, accountId)
      : null;

    const publicKey = keyPair?.getPublicKey();

    if (!publicKey) {
      return null;
    }

    return publicKey.toString();
  }

  async getSignature(): Promise<string | null> {
    try {
      const accountId = await this.getAccountId();

      const keyPair = this.config
        ? await this.keyStore?.getKey(this.config.networkId, accountId)
        : null;

      if (!keyPair) {
        // eslint-disable-next-line no-console
        console.log('Failed to get keyPair');

        return null;
      }

      return getSignature(keyPair);
    } catch (err) {
      // eslint-disable-next-line no-console
      console.log('Failed to generate signature', err);

      return null;
    }
  }

  public async sendTransactions(
    transactionsConf: Transaction[]
  ): Promise<FinalExecutionOutcome[]> {
    const accountId = await this.getAccountId();
    const publicKey = await this.getPublicKey();

    const accessKey = (await this.near.connection.provider.query(
      `access_key/${accountId}/${publicKey}`,
      ''
    )) as unknown as AccessKey;

    if (!accessKey) {
      throw new Error(`Cannot find matching key for transaction`);
    }

    const account =
      this.getAccount() as unknown as SputnikConnectedWalletAccount;

    const trx = await Promise.all(
      transactionsConf.map(({ receiverId, actions }, i) =>
        this.buildTransaction(
          receiverId,
          accessKey.nonce + i + 1,
          actions.map(action => action as unknown as Action)
        )
      )
    );

    return account.sendTransactions(compact(trx));
  }

  private async buildTransaction(
    contractId: string,
    nonce: number,
    actions: transactions.Action[]
  ) {
    const accountId = await this.getAccountId();
    const block = await this.near.connection.provider.block({
      finality: 'final',
    });
    const blockHash = utils.serialize.base_decode(block.header.hash);

    const keyPair = await this.keyStore.getKey(
      this.config.networkId,
      accountId
    );

    const publicKey = keyPair.getPublicKey();

    return transactions.createTransaction(
      accountId,
      publicKey,
      contractId,
      nonce,
      actions,
      blockHash
    );
  }

  getWalletType(): WalletType {
    return this.walletType;
  }

  async sendMoney(
    receiverId: string,
    amount: number
  ): Promise<FinalExecutionOutcome[]> {
    const parsedNear = parseNearAmount(amount.toString());

    const nearAsBn = new BN(parsedNear ?? 0);

    return this.sendTransactions([
      { receiverId, actions: [transfer(nearAsBn)] },
    ]);
  }
}

'''
'''--- services/sputnik/SputnikNearService/walletServices/WalletSelectorService.ts ---
/* eslint-disable @typescript-eslint/ban-ts-comment, class-methods-use-this */

import BN from 'bn.js';
import map from 'lodash/map';
import first from 'lodash/first';
import { FunctionCallOptions } from 'near-api-js/lib/account';
import { parseNearAmount } from 'near-api-js/lib/utils/format';
import { keyStores, providers, Signer } from 'near-api-js';
import { BrowserWallet, WalletSelector } from '@near-wallet-selector/core';
import { FinalExecutionOutcome } from 'near-api-js/lib/providers';
import { Wallet } from '@near-wallet-selector/core/lib/wallet/wallet.types';
import {
  FunctionCallAction,
  Transaction as SelectorTransaction,
} from '@near-wallet-selector/core/lib/wallet';

import { WalletType } from 'types/config';
import { TransactionCompleted } from 'global';

import {
  SputnikWalletError,
  SputnikWalletErrorCodes,
} from 'errors/SputnikWalletError';

import { configService } from 'services/ConfigService';

import { PkAndSignature } from 'context/WalletContext/types';
import { AccountView } from 'near-api-js/lib/providers/provider';
import { RpcService } from 'services/sputnik/SputnikNearService/walletServices/RpcService';
import { KeyStore } from 'near-api-js/lib/key_stores';
import { Transaction, WalletMeta, WalletService } from './types';
import {
  getSignature,
  isFinalExecutionOutcome,
  isFinalExecutionOutcomeResponse,
  triggerTransactionCallback,
} from './helpers';

export class WalletSelectorService implements WalletService {
  private wallet: Wallet;

  private selector: WalletSelector;

  private rpcService: RpcService;

  private walletInfo: WalletMeta;

  constructor(wallet: Wallet, selector: WalletSelector) {
    const { nearConfig } = configService.get();

    this.rpcService = new RpcService(
      new providers.JsonRpcProvider(nearConfig.nodeUrl)
    );

    this.selector = selector;
    this.wallet = wallet;

    this.walletInfo =
      wallet.id === WalletType.SELECTOR_NEAR
        ? {
            name: 'NEAR',
            type: 'web',
            url: 'wallet.near.org',
            id: WalletType.SELECTOR_NEAR,
          }
        : {
            name: 'Sender (beta)',
            type: 'extension',
            url: 'senderwallet.io',
            id: WalletType.SELECTOR_SENDER,
          };
  }

  getKeyStore(): KeyStore {
    if (this.walletInfo.id === WalletType.SELECTOR_NEAR) {
      return new keyStores.BrowserLocalStorageKeyStore(window.localStorage);
    }

    const connectionObj = window.near?.account()?.connection;

    if (connectionObj) {
      const { signer } = connectionObj;

      const { keyStore } = signer as { keyStore: KeyStore } & Signer;

      return keyStore;
    }

    return new keyStores.BrowserLocalStorageKeyStore(window.localStorage);
  }

  async contractCall<T>(
    accountId: string,
    methodName: string,
    argsAsBase64: string
  ): Promise<T> {
    return this.rpcService.contractCall(accountId, methodName, argsAsBase64);
  }

  viewAccount(accountId: string): Promise<AccountView> {
    return this.rpcService.viewAccount(accountId);
  }

  private getOnTransactionsCompleteHandler(
    resolve: (data: FinalExecutionOutcome[]) => void,
    reject: (error: unknown) => void
  ) {
    async function handler(
      result: TransactionCompleted & { accountId: string }
    ) {
      const { accountId, transactionHashes, errorCode } = result;

      if (transactionHashes || errorCode) {
        if (errorCode) {
          reject(
            new SputnikWalletError({
              errorCode: errorCode || SputnikWalletErrorCodes.unknownError,
            })
          );
        }

        const hashes = transactionHashes?.split(',') || [];

        const statuses = await Promise.all<FinalExecutionOutcome>(
          // @ts-ignore
          hashes.map(hash => this.provider.txStatus(hash, accountId))
        );

        resolve(statuses);
      }
    }

    return handler.bind(this);
  }

  async functionCall(
    props: FunctionCallOptions
  ): Promise<FinalExecutionOutcome[]> {
    const { args, contractId, gas, methodName, attachedDeposit } = props;

    const accountId = await this.getAccountId();

    const res = await this.wallet.signAndSendTransaction({
      callbackUrl: `${window.origin}/api/server/v1/transactions/wallet/callback/${accountId}`,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName,
            args,
            gas: gas?.toString() ?? '0',
            deposit: attachedDeposit?.toString() || '0',
          },
        },
      ],
    });

    // In case of Selector sender wallet we have to manually notify BE about transaction results
    if (
      this.walletInfo.id === WalletType.SELECTOR_SENDER &&
      isFinalExecutionOutcome(res)
    ) {
      await triggerTransactionCallback(res);
    }

    return [res as FinalExecutionOutcome];
  }

  async getAccountId(): Promise<string> {
    const accounts = await this.wallet.getAccounts();
    const { accountId = '' } = first(accounts) || {};

    return accountId;
  }

  async getAvailableAccounts(): Promise<string[]> {
    const accounts = await this.wallet.getAccounts();
    const accountIds = map(accounts, 'accountId');

    return Promise.resolve(accountIds);
  }

  async getPkAndSignatureFromLocalKeyStore(): Promise<PkAndSignature | null> {
    const accountId = await this.getAccountId();

    const { nearConfig } = configService.get();

    const keyStore = this.getKeyStore();

    const keyPair = await keyStore.getKey(nearConfig.networkId, accountId);

    if (!keyPair) {
      return null;
    }

    const publicKey = keyPair.getPublicKey();

    if (!publicKey) {
      return null;
    }

    return {
      publicKey: publicKey.toString(),
      signature: await getSignature(keyPair),
    };
  }

  getWalletType(): WalletType {
    return this.wallet.id as WalletType;
  }

  isSignedIn(): Promise<boolean> {
    return Promise.resolve(this.selector.isSignedIn());
  }

  logout(): Promise<void> {
    return this.wallet.signOut();
  }

  // TODO works only for NEAR wallet. Has to be updated for Sender wallet
  async sendMoney(
    receiverId: string,
    amount: number
  ): Promise<FinalExecutionOutcome[]> {
    const parsedNear = parseNearAmount(amount.toString());

    const nearAsBn = new BN(parsedNear ?? 0);

    const accountId = await this.getAccountId();

    const res = await this.wallet.signAndSendTransaction({
      callbackUrl: `${window.origin}/api/server/v1/transactions/wallet/callback/${accountId}`,
      receiverId,
      actions: [
        {
          type: 'Transfer',
          params: {
            deposit: nearAsBn.toString(),
          },
        },
      ],
    });

    // In case of Selector sender wallet we have to manually notify BE about transaction results
    if (
      this.walletInfo.id === WalletType.SELECTOR_SENDER &&
      isFinalExecutionOutcome(res)
    ) {
      await triggerTransactionCallback(res);
    }

    return [res as FinalExecutionOutcome];
  }

  async sendTransactions(
    transactions: Transaction[]
  ): Promise<FinalExecutionOutcome[]> {
    const accountId = await this.getAccountId();

    const trx: SelectorTransaction[] = transactions.map(item => ({
      ...item,
      signerId: accountId,
      actions: item.actions.map(action => action as FunctionCallAction),
    }));

    return new Promise((resolve, reject) => {
      this.wallet
        .signAndSendTransactions({
          callbackUrl: `${window.origin}/api/server/v1/transactions/wallet/callback/${accountId}`,
          transactions: trx,
        })
        .then(async resp => {
          // In case of Selector sender wallet we have to manually notify BE about transaction results
          if (isFinalExecutionOutcomeResponse(resp)) {
            await triggerTransactionCallback(resp[0]);

            resolve(resp);
          }
        })
        .catch(err => {
          reject(err);
        });
    });
  }

  async signIn(contractId: string): Promise<boolean> {
    const wallet = this.wallet as BrowserWallet;

    await wallet.signIn({ contractId });

    return Promise.resolve(true);
  }

  walletMeta(): WalletMeta {
    return this.walletInfo;
  }

  getPkAndSignature(): Promise<PkAndSignature | null> {
    return this.getPkAndSignatureFromLocalKeyStore();
  }
}

'''
'''--- services/sputnik/SputnikNearService/walletServices/constants.ts ---
import { WalletType } from 'types/config';
import { WalletMeta } from './types';

export const NEAR_WALLET_METADATA: WalletMeta = {
  name: 'NEAR',
  type: 'web',
  url: 'wallet.near.org',
  id: WalletType.NEAR,
};

export const SENDER_WALLET_METADATA: WalletMeta = {
  name: 'Sender',
  type: 'extension',
  url: 'senderwallet.io',
  id: WalletType.SENDER,
};

'''
'''--- services/sputnik/SputnikNearService/walletServices/helpers.ts ---
import { KeyPair } from 'near-api-js';
import { FinalExecutionOutcome } from 'near-api-js/lib/providers';
import {
  FinalExecutionError,
  SenderWalletExtensionResult,
  SenderWalletTransactionResult,
} from 'services/sputnik/SputnikNearService/walletServices/types';
import { httpService } from 'services/HttpService';

export const getSignature = async (
  keyPair: KeyPair
): Promise<string | null> => {
  const publicKey = keyPair.getPublicKey();
  const msg = Buffer.from(publicKey.toString());

  const { signature } = keyPair.sign(msg);
  const signatureBase64 = Buffer.from(signature).toString('base64');

  const isValid = keyPair.verify(msg, signature);

  if (!isValid) {
    // eslint-disable-next-line no-console
    console.log('Failed to create valid signature');

    return null;
  }

  return signatureBase64;
};

export async function triggerTransactionCallback(
  resp: FinalExecutionOutcome
): Promise<void> {
  const transactionHashes = resp.transaction.hash;
  const signerId = resp.transaction.signer_id;

  await httpService.get(
    `/transactions/wallet/callback/${signerId}?transactionHashes=${transactionHashes}&noRedirect=true`
  );
}

export function isFinalExecutionOutcomeResponse(
  _params: FinalExecutionOutcome[] | void
): _params is FinalExecutionOutcome[] {
  const resp = _params as FinalExecutionOutcome[];

  return resp?.length > 0 && !!resp[0]?.transaction;
}

export function isFinalExecutionOutcome(
  _params: FinalExecutionOutcome | void
): _params is FinalExecutionOutcome {
  return (_params as FinalExecutionOutcome)?.transaction !== undefined;
}

export function isExtensionError(
  _params: SenderWalletTransactionResult | SenderWalletExtensionResult
): _params is SenderWalletExtensionResult {
  return (_params as SenderWalletExtensionResult)?.error !== undefined;
}

export function isError(
  _params: FinalExecutionOutcome[] | FinalExecutionError
): _params is FinalExecutionError {
  return (_params as FinalExecutionError)?.error?.kind !== undefined;
}

'''
'''--- services/sputnik/SputnikNearService/walletServices/types.ts ---
import { FinalExecutionOutcome } from 'near-api-js/lib/providers';
import { ConnectedWalletAccount, transactions } from 'near-api-js';
import { FunctionCallOptions } from 'near-api-js/lib/account';
import { WalletType } from 'types/config';
import { KeyStore } from 'near-api-js/lib/key_stores';
import { Action } from '@near-wallet-selector/core/lib/wallet/transactions.types';
import {
  AccountView,
  QueryResponseKind,
} from 'near-api-js/lib/providers/provider';
import { PkAndSignature } from 'context/WalletContext/types';

export interface RpcCallResult extends QueryResponseKind {
  result: Uint8Array;
}

export interface WalletService {
  signIn(contractId: string, signInOptions?: SignInOptions): Promise<boolean>;
  sendMoney(
    receiverId: string,
    amount: number
  ): Promise<FinalExecutionOutcome[]>;
  viewAccount(accountId: string): Promise<AccountView>;
  contractCall<T>(
    accountId: string,
    methodName: string,
    argsAsBase64: string
  ): Promise<T>;
  getWalletType(): WalletType;
  getKeyStore(): KeyStore;
  logout(): Promise<void>;
  isSignedIn(): Promise<boolean>;
  getAccountId(): Promise<string>;
  getAvailableAccounts(): Promise<string[]>;
  functionCall(props: FunctionCallOptions): Promise<FinalExecutionOutcome[]>;
  getPkAndSignature(): Promise<PkAndSignature | null>;
  sendTransactions(
    transactions: Transaction[]
  ): Promise<FinalExecutionOutcome[]>;
  walletMeta(): WalletMeta;
}

export type WalletMeta = {
  id: WalletType;
  name: string;
  type: string;
  url: string;
};

export type SignInOptions = {
  contractId: string;
  methodNames?: string[];
};

export type Transaction = {
  receiverId: string;
  actions: transactions.Action[] | SenderAction[] | Action[];
};

export type FinalExecutionError = {
  error: {
    kind: {
      ExecutionError: string;
    };
  };
};

export type SenderWalletExtensionResult = {
  actionType: string;
  error: string;
  notificationId: number;
  type: string;
};

export type SenderWalletTransactionResult = {
  actionType: string;
  method: string;
  notificationId: number;
  type: string;
  response: FinalExecutionOutcome[] | FinalExecutionError;
};

export type SenderAction = {
  methodName: string;
  args: Record<string, unknown>;
  gas?: string;
  deposit?: string;
  amount?: string;
};

export type SenderWalletInstance = {
  isSender: boolean;
  accountId: string;
  isSignedIn: () => boolean;
  sendMoney: (params: {
    receiverId: string;
    amount: string;
  }) => Promise<SenderWalletTransactionResult>;
  signAndSendTransaction: (transaction: {
    receiverId: string;
    actions: SenderAction[];
  }) => Promise<SenderWalletTransactionResult>;
  requestSignTransactions: (transactions: {
    transactions: Transaction[];
  }) => Promise<SenderWalletTransactionResult | SenderWalletExtensionResult>;
  signOut: () => void;
  authData: {
    accountId: string;
    accessKey: {
      publicKey: string;
      secretKey: string;
    };
  };
  on: () => void;
  requestSignIn: (signInOptions: SignInOptions) => Promise<unknown>;
  account: () => ConnectedWalletAccount;
};

'''
'''--- services/sputnik/constants.ts ---
export const YOKTO_NEAR = 1000000000000000000000000;

export const LIST_LIMIT_DEFAULT = 20;

export const DEFAULT_UPGRADE_DAO_PROPOSALS_GAS = 230;
export const DEFAULT_UPGRADE_DAO_VOTE_GAS = 300;
export const DEFAULT_PROPOSAL_GAS = 150;
export const DEFAULT_CREATE_DAO_GAS = 300;
export const DEFAULT_VOTE_GAS = 150;

export const MIN_GAS = 10;
export const MAX_GAS = 300;

export const API_MAPPERS = {
  MAP_DAO_DTO_TO_DAO: 'mapDaoDTOtoDao',
  MAP_DAO_FEED_ITEM_RESPONSE_TO_DAO_FEED: 'mapDaoFeedItemResponseToDaoFeed',
  MAP_DAO_FEED_ITEM_RESPONSE_TO_DAO_FEEDS: 'mapDaoFeedItemResponseToDaoFeeds',
  MAP_PROPOSAL_DTO_TO_PROPOSAL: 'mapProposalDTOToProposal',
  MAP_PROPOSAL_DTO_TO_PROPOSALS: 'mapProposalDTOToProposals',
  MAP_PROPOSAL_TO_PROPOSER: 'mapProposalToProposer',
  MAP_TOKENS_DTO_TO_TOKEN: 'mapTokensDTOToToken',
  MAP_TOKENS_DTO_TO_TOKENS: 'mapTokensDTOToTokens',
  MAP_SEARCH_RESULTS_DTO_TO_DATA_OBJECT: 'mapSearchResultsDTOToDataObject',
  MAP_PROPOSAL_FEED_ITEM_RESPONSE_TO_PROPOSAL_FEED_ITEM:
    'mapProposalFeedItemResponseToProposalFeedItem',
  MAP_SUBSCRIPTIONS_DTOS_TO_DAO_SUBSCRIPTIONS:
    'mapSubscriptionsDTOsToDaoSubscriptions',
  MAP_NFT_TOKEN_RESPONSE_TO_NFT_TOKEN: 'mapNftTokenResponseToNftToken',
  MAP_RECEIPTS_BY_TOKEN_RESPONSE: 'mapReceiptsByTokenResponse',
  MAP_RECEIPTS_RESPONSE: 'mapReceiptsResponse',
  MAP_PROPOSALS_OVERTIME_TO_CHART_DATA: 'mapProposalsOvertimeToChartData',
  MAP_OVERTIME_TO_CHART_DATA: 'mapOvertimeToChartData',
  MAP_DRAFT_TO_PROPOSAL_DRAFT: 'mapDraftToProposalDraft',
  MAP_OPEN_SEARCH_RESULTS: 'mapOpenSearchResults',
  MAP_OPEN_SEARCH_RESPONSE_TO_DAOS: 'mapOpenSearchResponseToDaos',
  MAP_OPEN_SEARCH_RESPONSE_TO_BOUNTIES: 'mapOpenSearchResponseToBounties',
  MAP_OPEN_SEARCH_RESPONSE_TO_PROPOSALS: 'mapOpenSearchResponseToProposals',
};

export type ApiMappers = keyof typeof API_MAPPERS;

export const API_QUERIES = {
  GET_BOUNTIES_CONTEXT: 'getBountiesContext',
  GET_ACTIVE_PROPOSALS: 'getActiveProposals',
  GET_USER_PROPOSALS: 'getUserProposals',
  GET_USER_PROPOSALS_BY_PROPOSER: 'getUserProposalsByProposer',
  GET_PROPOSAL_BY_ID: 'getProposalById',
  FIND_POLICY_AFFECTS_PROPOSALS: 'findPolicyAffectsProposals',
  GET_FILTERED_PROPOSALS: 'getFilteredProposals',
  GET_POLLS: 'getPolls',
  GET_BOUNTY_CONTEXT_BY_ID: 'getBountyContextById',
  FIND_BOUNTY_CONTEXT: 'findBountyContext',
  GET_PROPOSALS_LIST: 'getProposalsList',
  GET_SHARED_PROPOSAL_TEMPLATES: 'getSharedProposalTemplates',
  GET_TEMPLATES_BY_SMART_CONTRACT: 'getTemplatesBySmartContract',
  GET_PROPOSALS_LIST_BY_ACCOUNT_ID: 'getProposalsListByAccountId',
  FIND_DAO_BY_NAME: 'findDaoByName',
  GET_JOINING_DAO_PROPOSALS: 'getJoiningDaoProposals',
  SEND_COMMENT: 'sendComment',
  DELETE_COMMENT: 'deleteComment',
  REPORT_COMMENT: 'reportComment',
  SEND_CONTACT: 'sendContact',
  SEND_VERIFICATION: 'sendVerification',
  VERIFY: 'verify',
  TOGGLE_BOUNTY_CONTEXTS: 'toggleBountyContexts',
  SHOW_BOUNTIES: 'showBounties',
  UPDATE_DAO_SETTINGS: 'updateDaoSettings',
  SAVE_PROPOSAL_TEMPLATE: 'saveProposalTemplate',
  CLONE_PROPOSAL_TEMPLATE: 'cloneProposalTemplate',
  UPDATE_PROPOSAL_TEMPLATE: 'updateProposalTemplate',
  DELETE_PROPOSAL_TEMPLATE: 'deleteProposalTemplate',
  UPDATE_ACCOUNT_SUBSCRIPTION: 'updateAccountSubscription',
  DELETE_ACCOUNT_SUBSCRIPTION: 'deleteAccountSubscription',
  UPDATE_NOTIFICATION: 'updateNotification',
  READ_ALL_NOTIFICATIONS: 'readAllNotifications',
  ARCHIVE_ALL_NOTIFICATIONS: 'archiveAllNotifications',
  UPDATE_NOTIFICATION_SETTINGS: 'updateNotificationsSettings',
  FIND_TRANSFER_PROPOSALS: 'findTransferProposals',
  ADD_AUTHORIZATION: 'addAuthorization',
  OPEN_SEARCH_AUTHORIZATION: 'openSearchAuthorization',
};

export type ApiQueries = keyof typeof API_QUERIES;

'''
'''--- services/sputnik/index.ts ---
export * from './SputnikHttpService';
export * from './SputnikNearService';

'''
'''--- services/sputnik/mappers/dao.ts ---
import get from 'lodash/get';
import Decimal from 'decimal.js';

import {
  DAO,
  DaoFeedItem,
  DaoSubscription,
  RolesRequest,
  VotePolicyRequest,
} from 'types/dao';
import { DaoRole } from 'types/role';
import { CreateDaoParams } from 'services/sputnik/types';
import { YOKTO_NEAR } from 'services/sputnik/constants';

import { jsonToBase64Str } from 'utils/jsonToBase64Str';
import { fromBase64ToObj } from 'utils/fromBase64ToObj';

import { DaoPolicy } from 'services/sputnik/types/policy';

import { getAwsImageUrl } from './utils/getAwsImageUrl';

type DaoConfig = {
  name: string;
  purpose: string;
  metadata: string;
};

export interface GetDAOsResponse {
  data: DaoFeedItemResponse[];
  total: number;
}

export type DaoFeedItemResponse = {
  createdAt: string;
  id: string;
  config: DaoConfig;
  numberOfMembers: number;
  numberOfGroups: number;
  accountIds: string[];
  activeProposalCount: number;
  totalProposalCount: number;
  totalDaoFunds: number;
  transactionHash: string;
  council: string[];
  isCouncil: boolean;
  policy: {
    daoId: string;
    roles: {
      name: string;
      accountIds: string[];
    }[];
  };
};

export type DaoDTO = {
  createdAt: string;
  daoVersionHash: string;
  daoVersion: {
    createdAt: string;
    hash: string;
    version: number[];
    commitId: string;
    changelogUrl: string;
  };
  transactionHash: string;
  updateTimestamp: string;
  id: string;
  config: DaoConfig;
  lastProposalId: number;
  policy: DaoPolicy;
  activeProposalCount: number;
  totalProposalCount: number;
  totalDaoFunds: number;
  stakingContract: string;
};

export type DaoMetadata = {
  links: string[];
  flagCover?: string;
  flagLogo?: string;
  flag?: string;
  displayName: string;
  legal?: {
    legalStatus?: string;
    legalLink?: string;
  };
};

export type MemberStats = {
  accountId: string;
  voteCount: number;
};

export type DaoSubscriptionDTO = { id: string; dao: DaoDTO };

export const fromBase64ToMetadata = (metaAsBase64: string): DaoMetadata => {
  return fromBase64ToObj(metaAsBase64);
};

export const mapDaoDTOtoDao = (daoDTO: DaoDTO): DAO | null => {
  if (!daoDTO.id) {
    return null;
  }

  const roles = get(daoDTO, 'policy.roles', []);
  const numberOfProposals = get(daoDTO, 'totalProposalCount', 0);

  // Get DAO groups
  const daoGroups = roles
    .filter((item: DaoRole) => item.kind === 'Group')
    .map((item: DaoRole) => {
      return {
        members: item.accountIds,
        name: item.name,
        permissions: item.permissions,
        votePolicy: item.votePolicy,
        slug: item.name,
      };
    });

  const config = get(daoDTO, 'config');

  const meta = config?.metadata ? fromBase64ToMetadata(config.metadata) : null;

  const daoMembersList = daoGroups
    .map(({ members }: { members: string[] }) => members)
    .flat()
    .reduce((acc: string[], member: string) => {
      if (!acc.includes(member)) {
        acc.push(member);
      }

      return acc;
    }, []);
  const numberOfMembers = daoMembersList.length;

  return {
    id: daoDTO.id,
    txHash: daoDTO.transactionHash ?? '',
    daoVersionHash: daoDTO.daoVersionHash,
    daoVersion: daoDTO.daoVersion,
    name: config?.name ?? '',
    description: config?.purpose ?? '',
    members: numberOfMembers,
    daoMembersList,
    activeProposalsCount: daoDTO.activeProposalCount ?? 0,
    totalProposalsCount: daoDTO.totalProposalCount ?? 0,
    totalProposals: numberOfProposals,
    logo: meta?.flag ? getAwsImageUrl(meta.flag) : '/flags/defaultDaoFlag.png',
    flagCover: getAwsImageUrl(meta?.flagCover),
    flagLogo: getAwsImageUrl(meta?.flagLogo),
    funds: (daoDTO.totalDaoFunds ?? 0).toFixed(2),
    totalDaoFunds: daoDTO.totalDaoFunds ?? 0,
    createdAt: daoDTO.createdAt,
    groups: daoGroups,
    policy: daoDTO.policy,
    links: meta?.links || [],
    displayName: meta?.displayName || '',
    lastProposalId: daoDTO.lastProposalId,
    legal: meta?.legal || {},
    stakingContract: daoDTO.stakingContract,
  };
};

export const mapDaoDTOListToDaoList = (daoList: DaoDTO[]): DAO[] => {
  return daoList.reduce<DAO[]>((res, daoItem) => {
    const dao = mapDaoDTOtoDao(daoItem);

    if (dao) {
      res.push(dao);
    }

    return res;
  }, []);
};

/* eslint-disable camelcase */
type ContractParams = {
  purpose: string;
  bond: string;
  vote_period: string;
  grace_period: string;
  policy: {
    roles: RolesRequest[];
    default_vote_policy: VotePolicyRequest;
    proposal_bond: string;
    proposal_period: string;
    bounty_bond: string;
    bounty_forgiveness_period: string;
  };
  config: {
    name: string;
    purpose: string;
    metadata: string;
  };
};
/* eslint-enable camelcase */

export const mapCreateDaoParamsToContractParams = (
  params: CreateDaoParams
): ContractParams => {
  return {
    purpose: params.purpose,
    bond: new Decimal(params.bond).mul(YOKTO_NEAR).toFixed(),
    vote_period: new Decimal(params.votePeriod).mul('3.6e12').toFixed(),
    grace_period: new Decimal(params.gracePeriod).mul('3.6e12').toFixed(),
    policy: {
      roles: params.policy.roles,
      default_vote_policy: params.policy.defaultVotePolicy,
      proposal_bond: new Decimal(params.policy.proposalBond)
        .mul(YOKTO_NEAR)
        .toFixed(),
      proposal_period: new Decimal(params.policy.proposalPeriod)
        .mul('3.6e12')
        .toFixed(),
      bounty_bond: new Decimal(params.policy.bountyBond)
        .mul(YOKTO_NEAR)
        .toFixed(),
      bounty_forgiveness_period: new Decimal(
        params.policy.bountyForgivenessPeriod
      )
        .mul('3.6e12')
        .toFixed(),
    },
    config: {
      name: params.name,
      purpose: params.purpose,
      metadata: jsonToBase64Str({
        links: params.links,
        flagCover: params.flagCover,
        flagLogo: params.flagLogo,
        displayName: params.displayName,
        legal: params.legal,
      }),
    },
  };
};

export const mapCreateDaoParamsToContractArgs = (
  params: CreateDaoParams
): string => {
  const argsList = mapCreateDaoParamsToContractParams(params);

  return jsonToBase64Str(argsList);
};

export function mapSubscriptionsDTOsToDaoSubscriptions(
  data: DaoSubscriptionDTO[]
): DaoSubscription[] {
  return data.reduce<DaoSubscription[]>((res, item) => {
    const daoObj = mapDaoDTOtoDao(item.dao);

    if (daoObj) {
      res.push({
        ...item,
        dao: daoObj,
      });
    }

    return res;
  }, []);
}

export function mapDaoFeedItemResponseToDaoFeedItem(
  item: DaoFeedItemResponse
): DaoFeedItem {
  const config = get(item, 'config');
  const meta = config?.metadata ? fromBase64ToMetadata(config.metadata) : null;

  return {
    createdAt: item.createdAt ?? '',
    id: item.id,
    numberOfMembers: item.numberOfMembers,
    numberOfGroups: item.numberOfGroups,
    accountIds: item.accountIds,
    activeProposalCount: item.activeProposalCount,
    totalProposalCount: item.totalProposalCount,
    totalDaoFunds: item.totalDaoFunds,

    txHash: item.transactionHash ?? '',
    name: config?.name ?? '',
    description: config?.purpose ?? '',
    displayName: meta?.displayName ?? '',

    links: meta?.links || [],
    logo: meta?.flag ? getAwsImageUrl(meta.flag) : '/flags/defaultDaoFlag.png',
    flagCover: getAwsImageUrl(meta?.flagCover),
    flagLogo: getAwsImageUrl(meta?.flagLogo),
    legal: meta?.legal || {},
    policy: item.policy ?? {},

    council: item.council ?? null,
    isCouncil: item.isCouncil ?? null,
  };
}

export function mapDaoFeedItemResponseToDaoFeedItemList(
  data: DaoFeedItemResponse[]
): DaoFeedItem[] {
  return data.map(mapDaoFeedItemResponseToDaoFeedItem);
}

'''
'''--- services/sputnik/mappers/index.ts ---
export * from './dao';
export * from './proposal';
export * from './search-results';
export * from './token';
export * from './transaction';

'''
'''--- services/sputnik/mappers/nfts.ts ---
import { NftToken, NftTokenResponse } from 'types/token';

export function mapNftTokenResponseToNftToken(
  data: NftTokenResponse[]
): NftToken[] {
  return data
    .reduce<NftToken[]>((res, item) => {
      const { id, contractId, baseUri, metadata, contract, tokenId } = item;

      if (!metadata) {
        return res;
      }

      const { media, reference } = metadata;

      const isMediaContainsUrl = media?.indexOf('http') === 0;

      const uri = [];
      const isExternalReference = false;

      if (baseUri && media && !isMediaContainsUrl) {
        uri.push({ uri: `${baseUri}/${media}`, isExternalReference: false });
      }

      if (isMediaContainsUrl) {
        uri.push({ uri: media, isExternalReference: false });
      }

      if (contract?.baseUri && !media && reference) {
        uri.push({
          uri: `${contract?.baseUri}/${reference}`,
          isExternalReference: true,
        });
      }

      if (contract.baseUri && media && !isMediaContainsUrl) {
        uri.push({
          uri: `${contract?.baseUri}/${media}`,
          isExternalReference: false,
        });
      }

      if (media) {
        uri.push({
          uri: `https://cloudflare-ipfs.com/ipfs/${media}`,
          isExternalReference: false,
        });
      }

      if (uri) {
        res.push({
          id,
          uri,
          description: metadata.description ?? null,
          isExternalReference,
          contractId,
          contractName: contract.name,
          tokenId,
        });
      }

      return res;
    }, [])
    .sort((a, b) => {
      if (a.uri > b.uri) {
        return 1;
      }

      if (a.uri < b.uri) {
        return -1;
      }

      return 0;
    });
}

'''
'''--- services/sputnik/mappers/proposal.ts ---
import get from 'lodash/get';

import {
  CreateProposalParams,
  Proposal,
  ProposalKind,
  ProposalStatus,
  ProposalType,
  ProposalVariant,
  ProposalActionData,
  DaoConfig,
  ProposalFeedItem,
  ProposalDetails,
} from 'types/proposal';
import {
  DaoDTO,
  fromBase64ToMetadata,
  mapDaoDTOtoDao,
} from 'services/sputnik/mappers/dao';
import { DATA_SEPARATOR } from 'constants/common';
import { toMillis } from 'utils/format';
import { DaoStatsOvertime, DaoStatsProposalsOvertime } from 'types/daoStats';
import { ChartDataElement } from 'components/AreaChartRenderer/types';
import { CommonOverTime } from 'types/stats';
import { PaginationResponse } from 'types/api';

import { DaoPolicy } from 'services/sputnik/types/policy';

import { getAwsImageUrl } from './utils/getAwsImageUrl';

export type ProposalDTO = {
  createTimestamp: string;
  createdAt: string;
  daoId: string;
  commentsCount: number;
  description: string;
  id: string;
  isArchived: boolean;
  kind: ProposalKind;
  proposalId: number;
  proposer: string;
  status: ProposalStatus;
  voteStatus: string;
  submissionTime: string;
  transactionHash: string;
  updateTimestamp: string;
  updateTransactionHash: string;
  updatedAt: string;
  voteCounts: Record<string, number[]>;
  votes: Record<string, 'Approve' | 'Reject' | 'Remove'>;
  dao: DaoDTO;
  votePeriodEnd: string;
  actions: ProposalActionData[];
};

type VoteState = 'Yes' | 'No' | 'Dismiss';

export interface GetProposalsResponse {
  data: ProposalDTO[];
}

export function getVotesStatistic(proposal: Pick<ProposalDTO, 'votes'>): {
  voteYes: number;
  voteNo: number;
  voteRemove: number;
  votes: Record<string, VoteState>;
} {
  const result = {
    voteYes: 0,
    voteNo: 0,
    voteRemove: 0,
    votes: {} as Record<string, VoteState>,
  };

  Object.keys(proposal.votes).forEach(key => {
    let value: VoteState;

    if (proposal.votes[key] === 'Approve') {
      result.voteYes += 1;
      value = 'Yes';
    } else if (proposal.votes[key] === 'Reject') {
      result.voteNo += 1;
      value = 'No';
    } else {
      result.voteRemove += 1;
      value = 'Dismiss';
    }

    result.votes[key] = value;
  });

  return result;
}

export const mapProposalToProposers = (
  proposals: PaginationResponse<ProposalDTO[]>
): PaginationResponse<unknown[]> => {
  const proposers = new Set();

  proposals.data.forEach(proposal => {
    proposers.add(proposal.proposer);
  });

  return {
    ...proposals,
    data: Array.from(proposers),
  };
};

export const mapProposalDTOToProposal = (
  proposalDTO: ProposalDTO
): Proposal => {
  const [description, link, proposalVariant = ProposalVariant.ProposeDefault] =
    proposalDTO.description.split(DATA_SEPARATOR);

  const config = get(proposalDTO.dao, 'config');
  const meta = config?.metadata ? fromBase64ToMetadata(config.metadata) : null;

  const votePeriodEnd = new Date(
    toMillis(proposalDTO.votePeriodEnd)
  ).toISOString();

  return {
    ...getVotesStatistic(proposalDTO),
    id: proposalDTO.id,
    proposalId: proposalDTO.proposalId ?? 0,
    daoId: proposalDTO.daoId,
    proposer: proposalDTO.proposer,
    commentsCount: proposalDTO.commentsCount ?? 0,
    description,
    link: link ?? '',
    status: proposalDTO.status,
    kind: proposalDTO.kind,
    votePeriodEnd,
    votePeriodEndDate: votePeriodEnd,
    voteStatus: proposalDTO.voteStatus,
    isFinalized: proposalDTO.status === 'Expired',
    txHash: proposalDTO.transactionHash ?? '',
    createdAt: proposalDTO.createdAt,
    dao: mapDaoDTOtoDao(proposalDTO.dao),
    daoDetails: {
      name: proposalDTO.dao.config.name,
      displayName: meta?.displayName || '',
      logo: meta?.flag
        ? getAwsImageUrl(meta.flag)
        : '/flags/defaultDaoFlag.png',
    },
    proposalVariant: proposalVariant as ProposalVariant,
    updatedAt: proposalDTO.updateTimestamp
      ? new Date(Number(proposalDTO.updateTimestamp) / 1000000).toISOString()
      : null,
    actions: proposalDTO.actions,
  };
};

export const mapProposalFeedItemResponseToProposalDetails = (
  item: ProposalFeedItemResponse
): ProposalDetails => {
  const [description, , proposalVariant = ProposalVariant.ProposeDefault] =
    item.description.split(DATA_SEPARATOR);

  const config = get(item.dao, 'config');
  const meta = config?.metadata ? fromBase64ToMetadata(config.metadata) : null;

  return {
    daoId: item.daoId,
    id: item.id,
    description,
    proposalVariant: proposalVariant as ProposalVariant,
    type: item.type as ProposalType,
    status: item.status,
    kind: {
      type: item.type as ProposalType,
    },
    flag: meta ? getAwsImageUrl(meta.flagCover) : '',
  };
};

export const mapProposalFeedItemResponseToProposalFeedItem = (
  proposalDTO: ProposalFeedItemResponse
): ProposalFeedItem => {
  const [description, link, proposalVariant = ProposalVariant.ProposeDefault] =
    proposalDTO.description.split(DATA_SEPARATOR);

  const config = get(proposalDTO.dao, 'config');
  const meta = config?.metadata ? fromBase64ToMetadata(config.metadata) : null;

  const votePeriodEnd = new Date(
    toMillis(proposalDTO.votePeriodEnd)
  ).toISOString();

  return {
    ...getVotesStatistic(proposalDTO),
    id: proposalDTO.id,
    proposalId: proposalDTO.proposalId ?? 0,
    daoId: proposalDTO.daoId,
    proposer: proposalDTO.proposer,
    commentsCount: proposalDTO.commentsCount ?? 0,
    description,
    link: link ?? '',
    status: proposalDTO.status,
    kind: proposalDTO.kind,
    votePeriodEnd,
    votePeriodEndDate: votePeriodEnd,
    voteStatus: proposalDTO.voteStatus,
    isFinalized: proposalDTO.status === 'Expired',
    txHash: proposalDTO.transactionHash ?? '',
    createdAt: proposalDTO.createdAt,
    dao: {
      id: proposalDTO.dao?.id,
      name: proposalDTO.dao?.config.name ?? '',
      logo: meta?.flag
        ? getAwsImageUrl(meta.flag)
        : '/flags/defaultDaoFlag.png',
      flagCover: getAwsImageUrl(meta?.flagCover),
      flagLogo: getAwsImageUrl(meta?.flagLogo),
      legal: meta?.legal || {},
      numberOfMembers: proposalDTO.dao?.numberOfMembers,
      policy: proposalDTO.dao?.policy,
    },
    daoDetails: {
      name: proposalDTO.dao?.config.name ?? '',
      displayName: meta?.displayName || '',
      logo: meta?.flag
        ? getAwsImageUrl(meta.flag)
        : '/flags/defaultDaoFlag.png',
    },
    proposalVariant: proposalVariant as ProposalVariant,
    updatedAt: proposalDTO.updatedAt,
    actions: proposalDTO.actions,
    permissions: proposalDTO.permissions ?? {
      canApprove: false,
      canReject: false,
      canDelete: false,
      isCouncil: false,
    },
  };
};

export const mapProposalDTOToProposalExt = (
  proposalDTO: ProposalDTO
): Proposal => {
  return {
    ...mapProposalDTOToProposal(proposalDTO),
    status: proposalDTO.status,
    votePeriodEnd: proposalDTO.votePeriodEnd,
  };
};

export const mapProposalDTOListToProposalList = (
  proposalList: ProposalDTO[]
): Proposal[] => {
  return proposalList.map(proposalItem => {
    return mapProposalDTOToProposalExt(proposalItem);
  });
};

export const mapCreateParamsToPropsalKind = (
  params: CreateProposalParams
): ProposalKind => {
  switch (params.kind) {
    case 'AddBounty':
      return {
        type: ProposalType.AddBounty,
        bounty: {
          description: 'string',
          token: 'string',
          amount: 'string',
          times: 0,
          max_deadline: 'string',
        },
      };
    case 'AddMemberToRole':
      return {
        type: ProposalType.AddMemberToRole,
        memberId: 'string',
        role: 'string',
      };
    case 'BountyDone':
      return {
        type: ProposalType.BountyDone,
        receiverId: 'string;',
        bountyId: 'string;',
        completedDate: 'string',
      };
    case 'ChangeConfig':
      return {
        type: ProposalType.ChangeConfig,
        config: { metadata: 'string', name: 'string', purpose: 'string' },
      };
    case 'ChangePolicy':
      return {
        type: ProposalType.ChangePolicy,
        policy: {
          roles: [], // DaoRole
          bountyBond: 'string',
          proposalBond: 'string',
          proposalPeriod: 'string',
          defaultVotePolicy: {
            weightKind: 'string',
            kind: 'string',
            ratio: [], // number
            quorum: 'string',
            weight: 'string',
          },
          bountyForgivenessPeriod: 'string',
        },
      };
    case 'RemoveMemberFromRole':
      return {
        type: ProposalType.RemoveMemberFromRole,
        memberId: 'string',
        role: 'string',
      };
    case 'Transfer':
      return {
        type: ProposalType.Transfer,
        tokenId: 'string',
        receiverId: 'string',
        amount: 'string',
        msg: 'string',
      };
    case 'UpgradeRemote':
      return {
        type: ProposalType.UpgradeRemote,
        receiverId: 'string',
        hash: 'string',
        methodName: 'string',
      };
    case 'UpgradeSelf':
      return {
        type: ProposalType.UpgradeSelf,
        hash: 'string',
      };
    case 'Vote':
      return { type: ProposalType.Vote };
    default:
      throw new Error();
  }
};

export type ProposalFeedItemResponse = {
  createdAt: string;
  updatedAt: string;
  id: string;
  proposalId: number;
  updateTimestamp: number;
  transactionHash: string;
  daoId: string;
  proposer: string;
  description: string;
  status: 'Approved' | 'InProgress' | 'Rejected' | 'Expired';
  voteStatus: 'Active';
  kind: ProposalKind;
  type: string;
  votes: Record<string, 'Approve' | 'Reject' | 'Remove'>;
  votePeriodEnd: string;
  dao: {
    id: string;
    config: DaoConfig;
    numberOfMembers: number;
    policy: DaoPolicy;
  };
  actions: ProposalActionData[];
  commentsCount: number;
  permissions: {
    canApprove: boolean;
    canReject: boolean;
    canDelete: boolean;
    isCouncil: boolean;
  };
};

export function mapOvertimeToChartData(
  data: DaoStatsOvertime[]
): ChartDataElement[] {
  return (
    data.map(item => {
      const x = new Date(item.timestamp);
      const utcDay = x.getUTCDate();

      x.setDate(utcDay);

      const y = item.value;

      return {
        x,
        y,
      };
    }) ?? []
  );
}

export function mapProposalsOvertimeToChartData(
  data: DaoStatsProposalsOvertime[]
): ChartDataElement[] {
  return (
    data.reduce<ChartDataElement[]>((res, item) => {
      const x = new Date(item.timestamp);
      const utcDay = x.getUTCDate();

      x.setDate(utcDay);

      const { active, total } = item;

      res.push({
        x,
        y: active,
        y2: total,
      });

      return res;
    }, []) ?? []
  );
}

export function mapMetricsToChartData(
  data: CommonOverTime
): ChartDataElement[] {
  return (
    data?.metrics?.map(item => {
      const x = new Date(item.timestamp);
      const count = Number(item.count);

      return {
        x,
        y: count,
      };
    }) ?? []
  );
}

'''
'''--- services/sputnik/mappers/search-results.ts ---
import { nanoid } from 'nanoid';

import { DAO, DaoFeedItem, Member } from 'types/dao';
import { ProposalFeedItem } from 'types/proposal';
import { SearchResultsData } from 'types/search';
import { DaoPermission } from 'types/role';

import {
  DaoFeedItemResponse,
  mapDaoFeedItemResponseToDaoFeedItemList,
  MemberStats,
} from './dao';
import {
  mapProposalFeedItemResponseToProposalFeedItem,
  ProposalFeedItemResponse,
} from './proposal';

type MemberDTO = {
  accountId: string;
  roles: {
    daoId: string;
    kind: 'Everyone' | 'Group';
    name: string;
    permissions: DaoPermission[];
  }[];
  voteCount: number;
};

export interface SearchResultsDTO {
  daos: DaoFeedItemResponse[];
  proposals: ProposalFeedItemResponse[];
  members: MemberDTO[];
}

export interface SearchResponse {
  daos: {
    data: DaoFeedItemResponse[];
  };
  proposals: {
    data: ProposalFeedItemResponse[];
  };
}

export const extractMembersFromDaosList = (
  daos: DaoFeedItem[],
  proposals: ProposalFeedItem[],
  query: string
): Member[] => {
  const members = {} as Record<string, Member>;

  const votesPerProposer = proposals.reduce((acc, currentProposal) => {
    const vote = currentProposal.votes[currentProposal.proposer];

    if (vote) {
      if (acc[currentProposal.proposer]) {
        acc[currentProposal.proposer] += 1;
      } else {
        acc[currentProposal.proposer] = 1;
      }
    }

    return acc;
  }, {} as Record<string, number>);

  daos.forEach(dao => {
    dao.policy.roles.forEach(grp => {
      const users = grp.accountIds;

      if (!users) {
        return;
      }

      users.forEach(user => {
        if (!members[user]) {
          members[user] = {
            id: nanoid(),
            name: user,
            groups: [grp.name],
            tokens: {
              symbol: 'NEAR',
              value: 18,
            },
            votes: votesPerProposer[user],
          };
        } else {
          members[user] = {
            ...members[user],
            groups: [...members[user].groups, grp.name],
          };
        }
      });
    });
  });

  return Object.values(members)
    .map(item => {
      return {
        ...item,
        groups: Array.from(new Set(item.groups)),
      };
    })
    .filter(item => {
      return item.name && item.name.includes(query);
    });
};

export const extractMembersFromDao = (
  dao: DAO,
  membersStats: MemberStats[]
): Member[] => {
  const votesPerProposer = membersStats.reduce<Record<string, number>>(
    (res, item) => {
      res[item.accountId] = item.voteCount;

      return res;
    },
    {}
  );

  const members = {} as Record<string, Member>;

  dao.groups.forEach(grp => {
    const users = grp.members;

    users.forEach(user => {
      if (!members[user]) {
        members[user] = {
          id: nanoid(),
          name: user,
          groups: [grp.name],
          // TODO - tokens are now hidden in UI
          tokens: {
            symbol: 'NEAR',
            value: 18,
          },
          votes: votesPerProposer[user] ?? null,
        };
      } else {
        members[user] = {
          ...members[user],
          groups: [...members[user].groups, grp.name],
        };
      }
    });
  });

  return Object.values(members).map(item => {
    return {
      ...item,
      groups: Array.from(new Set(item.groups)),
    };
  });
};

function mapMemberDTOToMember(item: MemberDTO): Member {
  return {
    id: item.accountId,
    name: item.accountId,
    votes: item.voteCount,
    groups: item.roles.map(role => role.name),
  };
}

export const mapSearchResultsDTOToDataObject = (
  query: string,
  data: SearchResultsDTO
): SearchResultsData | null => {
  if (query === '') {
    return null;
  }

  const daosResults = data.daos ?? [];
  const proposalsResults = data.proposals ?? [];
  const membersResults = data.members ?? [];

  const daos = mapDaoFeedItemResponseToDaoFeedItemList(daosResults);
  const proposals = proposalsResults.map(
    mapProposalFeedItemResponseToProposalFeedItem
  );
  const members = membersResults.map(mapMemberDTOToMember);

  return {
    query,
    daos,
    proposals,
    members,
    bounties: [],
    comments: [],
    drafts: [],
    nfts: [],
    draftProposalComments: [],
    totals: {
      daos: daos.length,
      proposals: proposals.length,
      comments: 0,
      drafts: 0,
      nfts: 0,
      draftProposalComments: 0,
    },
    opts: {
      query,
    },
  };
};

'''
'''--- services/sputnik/mappers/tests/utils/getAwsImageUrl.spec.ts ---
import { getAwsImageUrl } from 'services/sputnik/mappers/utils/getAwsImageUrl';

jest.mock('config/aws', () => {
  return {
    awsConfig: {
      bucket: 'bucket',
      region: 'region',
    },
  };
});

describe('getAwsImageUrl', () => {
  it('Should return empty string if flag not provided', () => {
    expect(getAwsImageUrl()).toStrictEqual('');
  });

  it('Should return flag url', () => {
    expect(getAwsImageUrl('flag')).toStrictEqual(
      'https://bucket.s3.region.amazonaws.com/flag'
    );
  });
});

'''
'''--- services/sputnik/mappers/token.ts ---
import { formatYoktoValue } from 'utils/format';
import { Token, TokenResponse } from 'types/token';

export function mapTokensDTOToTokens(data: TokenResponse[]): Token[] {
  return data.map(item => {
    return {
      ...item,
      balance: formatYoktoValue(item.balance, item.decimals),
    };
  });
}

'''
'''--- services/sputnik/mappers/transaction.ts ---
import { Receipt, TransactionType } from 'types/transaction';

/* eslint-disable camelcase */
type ReceiptAction = {
  receiptId: string;
  receiptPredecessorAccountId: string;
  receiptReceiverAccountId: string;
  actionKind: 'TRANSFER';
  args: {
    deposit: string;
    method_name?: string;
    args_json?: {
      memo: string;
      amount: string;
      receiver_id: string;
    };
  };
};
/* eslint-enable camelcase */

export type ReceiptDTO = {
  receiptId: string;
  predecessorAccountId: string;
  receiverAccountId: string;
  originatedFromTransactionHash: string;
  includedInBlockTimestamp: string;
  receiptActions: ReceiptAction[];
};

export type TransactionDTO = {
  blockTimestamp: string;
  convertedIntoReceiptId: string;
  includedInBlockHash: string;
  includedInChunkHash: string;
  indexInChunk: number;
  nonce: string;
  receiptConversionGasBurnt: string;
  receiptConversionTokensBurnt: string;
  receiverAccountId: string;
  signature: string;
  signerAccountId: string;
  signerPublicKey: string;
  status: string;
  transactionAction: {
    actionKind: 'TRANSFER' | 'FUNCTION_CALL';
    args: {
      deposit: string;
      // eslint-disable-next-line camelcase
      method_name: string;
    };
    deposit: string;
    indexInTransaction: number;
  };
  transactionHash: string;
  receipts: ReceiptDTO[];
};

export type GetTransactionsResponse = {
  data: TransactionDTO[];
};

export type GetAccountReceiptsResponse = {
  data: ReceiptDTO[];
};

export type FTTokenReceipts = {
  tokenId: string;
  data: Receipt[];
};

const EXCLUDE_METHODS = [
  'act_proposal',
  'ft_transfer',
  'storage_deposit',
  'new',
];

export const mapReceiptsResponse = (
  accountId: string,
  data: ReceiptDTO[]
): Receipt[] => {
  const nearReceipts = data.reduce((res, item) => {
    let deposit = '';
    let type = 'Deposit' as TransactionType;

    if (item) {
      if (!item.receiptActions || !item.receiptActions.length) {
        return res;
      }

      const timestamp = Number(item.includedInBlockTimestamp) / 1000000;
      const date = new Date(
        Number(item.includedInBlockTimestamp) / 1000000
      ).toISOString();

      const actions = item.receiptActions.reduce((acc, k) => {
        if (
          !k ||
          !k.args ||
          !k.args.deposit ||
          k.receiptPredecessorAccountId === 'system' ||
          EXCLUDE_METHODS.includes(k.args.method_name ?? '')
        ) {
          return acc;
        }

        if (k.args.method_name === 'add_proposal') {
          type = 'Deposit';
          deposit = k.args.deposit;
        } else if (item.predecessorAccountId === accountId && k.args.deposit) {
          type = 'Withdraw';
          deposit = k.args.deposit;
        } else if (item.receiverAccountId === accountId && k.args?.deposit) {
          type = 'Deposit';
          deposit = k.args.deposit;
        }

        if (deposit) {
          acc.push({
            receiptId: item.receiptId,
            timestamp,
            receiverAccountId: item.receiverAccountId,
            predecessorAccountId: item.predecessorAccountId,
            deposit,
            type,
            txHash: item.originatedFromTransactionHash,
            date,
            token: 'NEAR',
          });
        }

        return acc;
      }, [] as Receipt[]);

      res.push(...actions);
    }

    return res;
  }, [] as Receipt[]);

  return nearReceipts;
};

export const mapReceiptsByTokenResponse = (
  accountId: string,
  tokenId: string,
  data: ReceiptDTO[]
): Receipt[] => {
  const receipts = data.reduce((res, item) => {
    let deposit = '';
    let type = 'Deposit' as TransactionType;

    if (item) {
      if (!item.receiptActions || !item.receiptActions.length) {
        return res;
      }

      const timestamp = Number(item.includedInBlockTimestamp) / 1000000;
      const date = new Date(
        Number(item.includedInBlockTimestamp) / 1000000
      ).toISOString();

      const actions = item.receiptActions.reduce((acc, k) => {
        if (
          !k ||
          !k.args ||
          !k.args.deposit ||
          k.receiptPredecessorAccountId === 'system' ||
          k.args.method_name !== 'ft_transfer'
        ) {
          return acc;
        }

        if (k.args.args_json?.receiver_id === accountId) {
          type = 'Deposit';
          deposit = k.args.args_json?.amount ?? '';
        } else if (k.args.args_json?.receiver_id) {
          type = 'Withdraw';
          deposit = k.args.args_json?.amount ?? '';
        }

        if (deposit) {
          acc.push({
            date,
            timestamp,
            type,
            deposit,
            receiptId: item.receiptId,
            receiverAccountId: item.receiverAccountId,
            predecessorAccountId: item.predecessorAccountId,
            txHash: item.originatedFromTransactionHash,
            token: item.receiverAccountId,
          });
        }

        return acc;
      }, [] as Receipt[]);

      res.push(...actions);
    }

    return res;
  }, [] as Receipt[]);

  return receipts;
};

'''
'''--- services/sputnik/mappers/utils/getAwsImageUrl.ts ---
import { configService } from 'services/ConfigService';
import { awsConfig } from 'config';

export function getAwsImageUrl(flag?: string): string {
  let bucket;
  let region;

  if (flag?.startsWith('http')) {
    return flag;
  }

  if (process.browser) {
    const { appConfig } = configService.get();

    if (appConfig) {
      bucket = appConfig.AWS_BUCKET;
      region = appConfig.AWS_REGION;
    }
  } else {
    const config = awsConfig;

    if (config) {
      bucket = config.bucket;
      region = config.region;
    }
  }

  if (bucket && region) {
    return flag ? `https://${bucket}.s3.${region}.amazonaws.com/${flag}` : '';
  }

  return '';
}

'''
'''--- services/sputnik/types/api.ts ---
export type BaseParams = {
  id?: string;
  offset?: number;
  limit?: number;
  sort?: string;
  filter?: string;
  createdBy?: string;
  query?: string;
};

'''
'''--- services/sputnik/types/bounty.ts ---
import { BountyContext } from 'types/bounties';

export interface BountiesContextResponse {
  data: BountyContext[];
}

'''
'''--- services/sputnik/types/dao.ts ---
import { DaoVersion, PolicyTypeRequest } from 'types/dao';
import { BaseParams } from './api';

export type RawMeta = [string, DaoVersion];

export interface CreateDaoParams {
  name: string;
  purpose: string;
  bond: string;
  votePeriod: string;
  gracePeriod: string;
  links: [];
  flagCover: string;
  flagLogo: string;
  amountToTransfer: string;
  displayName: string;
  policy: PolicyTypeRequest;
  legal?: {
    legalStatus?: string;
    legalLink?: string;
  };
  gas: string | number;
}

export interface ClaimBountyParams {
  daoId: string;
  bountyId: number;
  deadline: string;
  bountyBond: string;
  gas?: string | number;
}

export type DaosParams = {
  daoId?: string | null;
  daosIdsFilter?: string[];
};

export type DaoParams = BaseParams & {
  daoId?: string;
};

'''
'''--- services/sputnik/types/index.ts ---
export * from './api';
export * from './bounty';
export * from './dao';
export * from './proposals';
export * from './search';
export * from './version';

'''
'''--- services/sputnik/types/policy.ts ---
import { DaoVotePolicy } from 'types/dao';
import { DaoRole } from 'types/role';

export type DaoPolicy = {
  createdAt: string;
  daoId: string;
  proposalBond: string;
  bountyBond: string;
  proposalPeriod: string;
  bountyForgivenessPeriod: string;
  defaultVotePolicy: DaoVotePolicy;
  roles: DaoRole[];
};

'''
'''--- services/sputnik/types/proposals.ts ---
import { ProposalCategories, ProposalsFeedStatuses } from 'types/proposal';
import {
  ProposalFilterOptions,
  ProposalFilterStatusOptions,
} from 'types/memberHome';
import { BaseParams } from './api';
import { DaosParams } from './dao';

export type ProposalsQueries = {
  status?: ProposalsFeedStatuses;
  category?: ProposalCategories;
  proposers?: string;
};

export type ActiveProposalsParams = {
  daoIds: string[];
} & BaseParams;

export type FilteredProposalsParams = {
  proposalFilter?: ProposalFilterOptions;
  status?: ProposalFilterStatusOptions;
} & DaosParams;

export type ProposalsListParams = {
  accountId?: string;
  ids?: string[];
} & ProposalsQueries &
  DaosParams &
  BaseParams;

'''
'''--- services/sputnik/types/search.ts ---
import { CancelToken } from 'axios';
import { BaseParams } from './api';

export type SearchParams = {
  query: string;
  cancelToken: CancelToken;
  accountId: string;
} & BaseParams;

'''
'''--- services/sputnik/types/version.ts ---
export type Version = {
  date?: string;
  number: string;
  hash: string;
};

'''
'''--- setupTests.ts ---
import '@testing-library/jest-dom';

jest.mock('config/near', () => ({
  ...jest.requireActual('config/near'),
  getNearConfig: jest.fn().mockReturnValue({
    networkId: 'shared-test',
    nodeUrl: 'https://rpc.ci-testnet.near.org',
    tokenContractName: '',
    contractName: 'sputnikv2.testnet',
    masterAccount: 'test.near',
    headers: {},
    explorerUrl: 'https://explorer.testnet.near.org',
  }),
}));

'''
'''--- svg.d.ts ---
declare module '*.svg' {
  const svg: {
    id: string;
    viewBox: string;
    url: string;
  };
  export default svg;
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es6",
    "baseUrl": ".",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "experimentalDecorators": true,
    "incremental": true
  },
  "include": [
    "next-env.d.ts",
    "svg.d.ts",
    "**/*.ts",
    "**/*.tsx",
    "./setupTests.ts"
  ],
  "exclude": ["node_modules"]
}

'''
'''--- types/api.ts ---
export type PaginationResponse<T> = {
  total: number;
  data: T;
};

'''
'''--- types/auth.ts ---
export type Authorization = {
  accountId: string;
  publicKey: string;
  signature: string;
};

'''
'''--- types/bounties.ts ---
import { ProposalKind } from 'types/proposal';
import { DaoPolicy } from 'services/sputnik/types/policy';

export interface BountyResponse {
  bountyId: string;
  description: string;
  times: string;
  dao: {
    id: string;
    policy: {
      bountyBond: string;
      bountyForgivenessPeriod: string;
    };
  };
  bountyClaims: BountyClaimResponse[];
  proposalId: string;
  token: string;
  amount: string;
  maxDeadline: string;
  numberOfClaims: number;
}

export interface BountiesContextResponse {
  data: BountyContext[];
}

export interface BountyClaimResponse {
  accountId: string;
  startTime: string;
  deadline: string;
  completed: boolean;
  endTime: string;
}

export interface BountiesResponse {
  data: BountyResponse[];
}

export enum BountyStatus {
  Proposed,
  Available,
  InProgress,
  Expired,
  PendingApproval,
  Completed,
  Unknown,
}

export type ClaimedBy = {
  accountId: string;
  deadline: string;
  startTime: string;
  endTime: string;
};

export type BountyType = 'Passed' | 'Expired';
export type DeadlineUnit = 'day' | 'week' | 'month';

export type Bounty = {
  bountyId: number;
  createdAt: string;
  proposalId: string;
  daoId: string;
  token: string;
  times: string;
  maxDeadline: string;
  numberOfClaims: number;
  bountyClaims: BountyClaim[];
  bountyDoneProposals: BountyProposal[];
  id: string;
  amount: string;
  description: string;
};

export type BountyClaim = {
  id: string;
  accountId: string;
  startTime: string;
  deadline: string;
  completed: boolean;
  endTime: string;
};

export type BountyContext = {
  id: string;
  daoId: string;
  proposal: BountyProposal | null;
  bounty: Bounty;
  commentsCount: number;
};

export type BountyProposal = {
  id: string;
  daoId: string;
  bountyClaimId?: string;
  proposalId: number;
  createdAt: string;
  updatedAt: string;
  description: string;
  transactionHash: string;
  votes: {
    [key: string]: 'Approve' | 'Reject' | 'Remove';
  };
  voteYes: number;
  voteNo: number;
  voteRemove: number;
  proposer: string;
  status: string;
  voteStatus: string;
  kind: ProposalKind;
  votePeriodEnd: string;
  permissions: {
    canApprove: boolean;
    canReject: boolean;
    canDelete: boolean;
    isCouncil: boolean;
  };
  dao?: {
    id: string;
    name: string;
    logo: string;
    flagCover: string;
    flagLogo: string;
    legal: {
      legalStatus?: string;
      legalLink?: string;
    };
    numberOfMembers: number;
    policy: DaoPolicy;
  };
};

'''
'''--- types/chart.ts ---
export interface ChartData {
  balance: number;
  timestamp: number;
  tooltip?: string;
}

'''
'''--- types/config.ts ---
export type Config = {
  AWS_BUCKET: string;
  AWS_REGION: string;
  GOOGLE_ANALYTICS_KEY: string;
  LOG_ROCKET_APP_ID: string;
  DD_APPLICATION_ID: string;
  DD_CLIENT_TOKEN: string;
  DD_SERVICE: string;
  RELEASE_NOTES: string;
  I18_RELOAD_ON_PRERENDER: boolean;
  API_URL: string;
  STATS_API_URL: string;
  TOASTS_NOTIFICATIONS_TIMEOUT: number;
  APP_DOMAIN: string;
  NEAR_ENV: string;
  LOCAL_WALLET_REDIRECT: boolean;
  NEAR_CONTRACT_NAME: string;
  ROKETO_CONTRACT_NAME: string;
  ROKETO_MULTICALL_NAME: string;
  TOKEN_FACTORY_CONTRACT_NAME: string;
  LAUNCHDARKLY_ID: string;
  LAUNCHDARKLY_SDK_KEY: string;
  DRAFTS_API_URL: string;
  SEARCH_API_URL: string;
  OPEN_SEARCH_USERNAME: string;
  OPEN_SEARCH_PASSWORD: string;
  GENERIC_FACTORY_CONTRACT_NAME: string;
  STAKING_CONTRACT_BINARY_HASH: string;
};

export enum WalletType {
  NEAR,
  SENDER,
  SELECTOR_NEAR = 'my-near-wallet',
  SELECTOR_SENDER = 'sender',
}

'''
'''--- types/context.ts ---
import { ProposalFeedItem, ProposalType } from 'types/proposal';
import { DAO } from 'types/dao';

export type UserPermissions = {
  isCanCreateProposals: boolean;
  isCanCreatePolicyProposals: boolean;
  allowedProposalsToCreate: ProposalPermissions;
  allowedProposalsToVote: ProposalPermissions;
};

export type ProposalPermissions = {
  [ProposalType.ChangeConfig]: boolean;
  [ProposalType.ChangePolicy]: boolean;
  [ProposalType.AddBounty]: boolean;
  [ProposalType.BountyDone]: boolean;
  [ProposalType.Transfer]: boolean;
  [ProposalType.Vote]: boolean;
  [ProposalType.RemoveMemberFromRole]: boolean;
  [ProposalType.AddMemberToRole]: boolean;
  [ProposalType.AddMemberToRole]: boolean;
  [ProposalType.SetStakingContract]: boolean;
  [ProposalType.UpgradeSelf]: boolean;
  [ProposalType.UpgradeRemote]: boolean;
  [ProposalType.FunctionCall]: boolean;
};

export type DaoContext = {
  userPermissions: UserPermissions;
  dao: DAO;
  policyAffectsProposals: ProposalFeedItem[];
};

'''
'''--- types/dao.ts ---
import { Token } from 'components/cards/member-card/types';
import { PolicyType } from 'types/policy';
import { Token as DaoToken } from 'types/token';

export type DaoVotePolicy = {
  weightKind: string;
  quorum: string;
  kind: string;
  ratio: number[];
  threshold?: number[];
  weight?: string;
};

export type TGroup = {
  members: string[];
  name: string;
  permissions: string[];
  votePolicy: Record<string, DaoVotePolicy>;
  slug: string;
};

export type Member = {
  id: string;
  name: string;
  groups: string[];
  tokens?: Token;
  votes: number;
} & { [key: string]: string | string[] | Token | number };

export type DaoVersion = {
  createdAt: string;
  hash: string;
  version: number[];
  commitId: string;
  changelogUrl: string;
};

type DaoProperties = {
  id: string;
  name: string;
  description: string;
  flagCover?: string;
  flagLogo?: string;
  links: string[];
  displayName: string;
  legal?: {
    legalStatus?: string;
    legalLink?: string;
  };
};

export type DAO = {
  txHash: string;
  members: number;
  daoVersionHash: string;
  daoVersion: DaoVersion;
  daoMembersList: string[];
  funds: string;
  totalProposals: number;
  activeProposalsCount: number;
  totalProposalsCount: number;
  totalDaoFunds: number;
  createdAt: string;
  groups: TGroup[];
  policy: PolicyType;
  votes?: number;
  logo?: string;
  lastProposalId: number;
  stakingContract?: string;
  delegations?: DaoDelegation[];
  tokens?: DaoToken[];
  followers?: string[];
} & DaoProperties;

export type DAOPreview = {
  funds: string;
} & DaoProperties;

export type VotePolicyRequest = {
  // eslint-disable-next-line camelcase
  weight_kind: string;
  quorum: string;
  threshold: number[] | string;
};

export type RolesRequest = {
  name: string;
  kind: string | { Group: string[] };
  permissions: string[];
  // eslint-disable-next-line camelcase
  vote_policy: Record<string, VotePolicyRequest>;
};

export type PolicyTypeRequest = {
  roles: RolesRequest[];
  defaultVotePolicy: VotePolicyRequest;
  proposalBond: string;
  proposalPeriod: string;
  bountyBond: string;
  bountyForgivenessPeriod: string;
};

export interface CreateDaoInput {
  name: string;
  purpose: string;
  bond: string;
  votePeriod: string;
  gracePeriod: string;
  links: [];
  flagCover: string;
  flagLogo: string;
  amountToTransfer: string;
  displayName: string;
  policy: PolicyTypeRequest;
  legal?: {
    legalStatus?: string;
    legalLink?: string;
  };
  gas: string | number;
}

export interface CreateDaoCustomInput {
  name: string;
  amountToTransfer: string;
  gas: string | number;
  args: string;
}

export type DaoSubscription = {
  id: string;
  dao: DAO;
};

export type DaoSubscriptionInput = {
  accountId: string;
  publicKey: string;
  signature: string;
};

export type UpdateDaoSubscription = {
  daoId: string;
} & DaoSubscriptionInput;

export type DaoFeedItem = {
  createdAt: string;
  numberOfMembers: number;
  numberOfGroups: number;
  accountIds: string[];
  activeProposalCount: number;
  totalProposalCount: number;
  totalDaoFunds: number;
  txHash: string;
  logo?: string;
  policy: {
    daoId: string;
    roles: {
      name: string;
      accountIds: string[];
    }[];
  };
  council: string[];
  isCouncil: boolean;
} & DaoProperties;

export type DaoDelegation = {
  id: string;
  daoId: string;
  balance: string;
  accountId: string;
  delegators: Record<string, string>;
};

'''
'''--- types/daoStats.ts ---
export type StatsState = {
  value: number;
  growth: number;
};

export type DaoStatsState = {
  daoId: string;
  timestamp: number;
  totalDaoFunds: StatsState;
  transactionsCount: StatsState;
  bountyCount: StatsState;
  nftCount: StatsState;
  activeProposalCount: StatsState;
  totalProposalCount: StatsState;
};

export type DaoStatsOvertime = {
  value: number;
  timestamp: number;
};

export type DaoStatsProposalsOvertime = {
  active: number;
  total: number;
  timestamp: number;
};

'''
'''--- types/draftProposal.ts ---
import { ProposalFeedItem, ProposalType } from 'types/proposal';

export enum DraftStatus {
  Open = 'open',
  Closed = 'closed',
}

export type DraftComment = {
  id: string;
  likes: number;
  author: string;
  createdAt: string;
  updatedAt: string;
  description: string;
  comments?: DraftComment[];
};

export interface DraftProposal extends ProposalFeedItem {
  type: ProposalType;
  title: string;
  description: string;
  text: string;
  views: number;
  replies: number;
  saves: number;
  createdAt: string;
  updatedAt: string;
  isRead: boolean;
  isSaved: boolean;
  state: 'open' | 'closed';
  history: ProposalFeedItem[];
}

export interface DraftProposalFeedItem {
  id: string;
  daoId: string;
  proposer: string;
  title: string;
  type: ProposalType;
  state: 'open' | 'closed';
  proposalId?: number;
  replies: number;
  views: number;
  updatedAt: string;
  createdAt: string;
  isRead: boolean;
  isSaved: boolean;
  viewAccounts?: string[];
}

'''
'''--- types/memberHome.ts ---
import { Proposal } from 'types/proposal';

export type DaoFilterValues = 'All DAOs' | 'My DAOs' | 'Following DAOs';
export type ProposalFilterValues =
  | 'Active proposals'
  | 'Recent proposals'
  | 'My proposals';

export type ProposalFilterOptions =
  | 'Polls'
  | 'Governance'
  | 'Financial'
  | 'Bounties'
  | 'Groups'
  | null;

export type ProposalFilterStatusOptions =
  | 'All'
  | 'Active proposals'
  | 'Approved'
  | 'Failed'
  | null;

export type DaoProposal = {
  dao: {
    id: string;
    name: string;
    displayName: string;
    logo: string;
  };
  proposals: Proposal[];
};

export interface ProposalByDao {
  [key: string]: DaoProposal;
}

export interface Indexed {
  [key: string]: ProposalByDao;
}

export interface DaoFilter {
  daoFilter: DaoFilterValues;
}

export interface ProposalFilter {
  proposalFilter: ProposalFilterValues;
}

export interface DaoViewFilter {
  daoViewFilter: string | null;
}

export interface FilteredData extends Indexed {
  lessThanHourProposals: ProposalByDao;
  lessThanDayProposals: ProposalByDao;
  lessThanWeekProposals: ProposalByDao;
  moreThanWeekProposals: ProposalByDao;
  otherProposals: ProposalByDao;
}

export type ProposalsFilter = DaoFilter & ProposalFilter & DaoViewFilter;

export type FilteredProposalsData = {
  filteredProposalsData: FilteredData;
  filter: ProposalsFilter;
  onFilterChange: (filter: DaoFilter | ProposalFilter | DaoViewFilter) => void;
  selectedDaoFlag?: string;
};

'''
'''--- types/notification.ts ---
import { DAO } from 'types/dao';
import { DaoDTO, ProposalDTO } from 'services/sputnik/mappers';

export enum NotificationType {
  DaoConfig = 'DaoConfig',
  Bounty = 'Bounty',
  Polls = 'Polls',
  Transfer = 'Transfer',
  AddMember = 'AddMember',
  RemoveMember = 'RemoveMember',
  Governance = 'Governance',
  CommentLike = 'CommentLike',
}

export enum NotificationStatus {
  Created = 'Created',
  Approved = 'Approved',
  Rejected = 'Rejected',
  Removed = 'Removed',
  VoteApprove = 'VoteApprove',
  VoteReject = 'VoteReject',
  VoteRemove = 'VoteRemove',
  CommentLike = 'CommentLike',
}

export enum NotificationsGroupStatus {
  Enabled = 'Enabled',
  OneHour = '1 hour',
  EightHours = '8 hours',
  OneDay = '24 hours',
  Disable = 'Disable',
}

export interface NotificationSettingsType {
  typeId: string;
  typeName?: string;
}

export interface NotificationSettingsItem {
  id: string;
  title: string;
  checked: boolean;
  type?: string;
  notificationType: NotifiedActionType;
}

export interface NotificationSettingsDao {
  daoId: string;
  daoName: string;
  daoAddress: string;
  flagCover?: string;
  flagBack?: string;
  settings: NotificationSettingsItem[];
}

export interface NotificationSettingsGroup {
  groupId: string;
  groupName: string;
  text: string;
  status: NotificationsGroupStatus;
  daos?: NotificationSettingsDao[];
}

export interface NotificationSettingsPlatform {
  id: string;
  name: string;
  text: string;
  status: NotificationsGroupStatus;
  settings: NotificationSettingsItem[];
}

export interface NotificationDisableOption {
  value: string;
  label: NotificationsGroupStatus;
}

export enum NotifiedActionType {
  CustomDao = 'CustomDao',
  ClubDao = 'ClubDao',
  FoundationDao = 'FoundationDao',
  CorporationDao = 'CorporationDao',
  CooperativeDao = 'CooperativeDao',

  AddMemberToRole = 'AddMemberToRole',
  RemoveMemberFromRole = 'RemoveMemberFromRole',
  FunctionCall = 'FunctionCall',
  Transfer = 'Transfer',
  ChangePolicy = 'ChangePolicy',
  ChangeConfig = 'ChangeConfig',
  AddBounty = 'AddBounty',
  BountyDone = 'BountyDone',
  Vote = 'Vote',

  CommentLike = 'CommentLike',

  // TransferProposalCreation = 'TransferProposalCreation',
  // BountyProposalCreation = 'BountyProposalCreation',
  // BountyDoneProposalCreation = 'BountyDoneProposalCreation',
  // PollProposalCreation = 'PollProposalCreation',
  // DaoNameUpdated = 'DaoNameUpdated',
  // DaoPurposeUpdated = 'DaoPurposeUpdated',
  // DaoLegalUpdated = 'DaoLegalUpdated',
  // DaoLinksUpdated = 'DaoLinksUpdated',
  // DaoFlagUpdated = 'DaoFlagUpdated',
  // DaoDeadlinesUpdated = 'DaoDeadlinesUpdated',
  // DaoRulesUpdated = 'DaoRulesUpdated',
  // DaoGroupAdded = 'DaoGroupAdded',
  // DaoGroupUpdated = 'DaoGroupUpdated',
  // DaoGroupRemoved = 'DaoGroupRemoved',
  // DaoMembersAdded = 'DaoMembersAdded',
  // DaoMemberRemoved = 'DaoMemberRemoved',
}

export type NotificationMetadata = {
  methodName: 'act_proposal' | 'add_proposal';
  args: unknown;
  proposal: Pick<
    ProposalDTO,
    'id' | 'proposer' | 'description' | 'kind' | 'votes'
  >;
};

export type NotificationDTO = {
  isArchived: boolean;
  createdAt: string;
  updatedAt: string;
  id: string;
  notificationId: string;
  accountId: string;
  isMuted: boolean;
  isRead: boolean;
  notification: {
    proposerId: string;
    isArchived: boolean;
    createdAt: string;
    updatedAt: string;
    signerId: string | null;
    dao: DaoDTO;
    id: string;
    daoId: string;
    targetId: string;
    type: NotifiedActionType;
    metadata: NotificationMetadata;
    timestamp: string;
    status: NotificationStatus;
  };
};

export type Notification = {
  id: string;
  accountId: string;
  isNew: boolean;
  isRead: boolean;
  isMuted: boolean;
  isArchived: boolean;
  dao: DAO | null;
  daoId: string;
  signerId: string | null;
  targetId: string;
  type: NotifiedActionType;
  metadata: NotificationMetadata;
  createdAt: string;
  isMuteAvailable: boolean;
  isMarkReadAvailable: boolean;
  isDeleteAvailable: boolean;
  status: NotificationStatus;
};

export type UpdateNotificationsParams = {
  accountId: string;
  publicKey: string;
  signature: string;
};

export type UpdateNotificationParams = {
  isMuted: boolean;
  isRead: boolean;
  isArchived: boolean;
} & UpdateNotificationsParams;

export type UpdateNotificationSettingsParams = {
  daoId: string | null;
  types: string[];
  mutedUntilTimestamp: string;
  isAllMuted: boolean;
  enableSms: boolean;
  enableEmail: boolean;
} & UpdateNotificationsParams;

'''
'''--- types/policy.ts ---
// TODO describe proposal type properly
// eslint-disable-next-line
import { DaoRole, DefaultVotePolicy } from 'types/role';

export type PolicyType = Record<string, unknown> & {
  roles: DaoRole[];
  bountyBond: string;
  proposalBond: string;
  proposalPeriod: string;
  defaultVotePolicy: DefaultVotePolicy;
  bountyForgivenessPeriod: string;
};

'''
'''--- types/proposal.ts ---
/* eslint-disable camelcase */
import { DAO } from 'types/dao';
import { PolicyType } from 'types/policy';
import { ProposalAction } from 'types/role';
import { Authorization } from 'types/auth';
import { DaoPolicy } from 'services/sputnik/types/policy';

export type DaoDetails = {
  name: string;
  displayName: string | undefined;
  logo: string;
};

export type FunctionCallAction = {
  method_name: string;
  args: string;
  deposit: string;
  gas: string;
};

export interface ProposalVotingPermissions {
  canApprove: boolean;
  canReject: boolean;
  canDelete: boolean;
}

export enum ProposalType {
  AddMemberToRole = 'AddMemberToRole',
  RemoveMemberFromRole = 'RemoveMemberFromRole',
  FunctionCall = 'FunctionCall',
  Transfer = 'Transfer',
  SetStakingContract = 'SetStakingContract',
  ChangePolicy = 'ChangePolicy',
  ChangeConfig = 'ChangeConfig',
  UpgradeSelf = 'UpgradeSelf',
  UpgradeRemote = 'UpgradeRemote',
  AddBounty = 'AddBounty',
  BountyDone = 'BountyDone',
  Vote = 'Vote',
}

export enum ProposalActions {
  /// Action to add proposal. Used internally.
  AddProposal = 'AddProposal',
  /// Action to remove given proposal. Used for immediate deletion in special cases.
  RemoveProposal = 'RemoveProposal',
  /// Vote to approve given proposal or bounty.
  VoteApprove = 'VoteApprove',
  /// Vote to reject given proposal or bounty.
  VoteReject = 'VoteReject',
  /// Vote to remove given proposal or bounty (because it's spam).
  VoteRemove = 'VoteRemove',
  /// Finalize proposal, called when it's expired to return the funds
  /// (or in the future can be used for early proposal closure).
  Finalize = 'Finalize',
  /// Move a proposal to the hub to shift into another DAO.
  MoveToHub = 'MoveToHub',
}

export enum ProposalVariant {
  ProposeTransfer = 'ProposeTransfer',
  ProposeCreateBounty = 'ProposeCreateBounty',
  ProposeDoneBounty = 'ProposeDoneBounty',
  ProposeChangeDaoName = 'ProposeChangeDaoName',
  ProposeChangeDaoPurpose = 'ProposeChangeDaoPurpose',
  ProposeChangeDaoLinks = 'ProposeChangeDaoLinks',
  ProposeChangeDaoFlag = 'ProposeChangeDaoFlag',
  ProposeChangeDaoLegalInfo = 'ProposeChangeDaoLegalInfo',
  ProposeChangeDaoGetLastCode = 'ProposeChangeDaoGetLastCode',
  ProposeChangeDaoUpgradeSelf = 'ProposeChangeDaoUpgradeSelf',
  ProposeChangeDaoRemoveCodeBlob = 'ProposeChangeDaoRemoveCodeBlob',
  ProposeChangeVotingPolicy = 'ProposeChangeVotingPolicy',
  ProposeChangeBonds = 'ProposeChangeBonds',
  ProposeCreateGroup = 'ProposeCreateGroup',
  ProposeAddMember = 'ProposeAddMember',
  ProposeRemoveMember = 'ProposeRemoveMember',
  ProposePoll = 'ProposePoll',
  ProposeDefault = 'ProposeDefault',
  ProposeCustomFunctionCall = 'ProposeCustomFunctionCall',
  ProposeCreateToken = 'ProposeCreateToken',
  ProposeTokenDistribution = 'ProposeTokenDistribution',
  ProposeStakingContractDeployment = 'ProposeStakingContractDeployment',
  ProposeChangeProposalCreationPermissions = 'ProposeChangeProposalCreationPermissions',
  ProposeChangeProposalVotingPermissions = 'ProposeChangeProposalVotingPermissions',
  ProposeGetUpgradeCode = 'ProposeGetUpgradeCode',
  ProposeUpgradeSelf = 'ProposeUpgradeSelf',
  ProposeRemoveUpgradeCode = 'ProposeRemoveUpgradeCode',
  ProposeUpdateGroup = 'ProposeUpdateGroup',
  ProposeCreateDao = 'ProposeCreateDao',
  ProposeTransferFunds = 'ProposeTransferFunds',
  ProposeAcceptStakingContract = 'ProposeAcceptStakingContract',
  ProposeUpdateVotePolicyToWeightVoting = 'ProposeUpdateVotePolicyToWeightVoting',
  VoteInAnotherDao = 'VoteInAnotherDao',
  ProposeStakeTokens = 'ProposeStakeTokens',
  ProposeDelegateVoting = 'ProposeDelegateVoting',
}

export type VoteAction = 'VoteApprove' | 'VoteRemove' | 'VoteReject';

export type AddBountyRequest = {
  description: string;
  token: string;
  amount: string;
  times: number;
  max_deadline: string;
};

export type BountyDoneProposalType = {
  type: ProposalType.BountyDone;
  receiverId: string;
  bountyId: string;
  completedDate?: string;
};

export type BountyAddProposalType = {
  type: ProposalType.AddBounty;
  status: 'InProgress' | 'Approved';
  bountyId?: string;
};

export type FunctionCallProposalType = {
  type: ProposalType.FunctionCall;
  receiverId: string;
  actions: FunctionCallAction[];
};

export type ProposalKind =
  | {
      type: ProposalType.AddMemberToRole;
      memberId: string;
      role: string;
    }
  | {
      type: ProposalType.RemoveMemberFromRole;
      memberId: string;
      role: string;
    }
  | FunctionCallProposalType
  | {
      type: ProposalType.UpgradeRemote;
      receiverId: string;
      hash: string;
      methodName: string;
    }
  | {
      type: ProposalType.UpgradeSelf;
      hash: string;
    }
  | BountyDoneProposalType
  | {
      type: ProposalType.AddBounty;
      bounty: AddBountyRequest;
    }
  | {
      type: ProposalType.Transfer;
      tokenId: string;
      receiverId: string;
      amount: string;
      msg: string | null;
    }
  | { type: ProposalType.SetStakingContract; stakingId: string }
  | { type: ProposalType.ChangePolicy; policy: PolicyType }
  | {
      type: ProposalType.ChangeConfig;
      config: { metadata: string; name: string; purpose: string };
    }
  | { type: ProposalType.Vote };

export type ProposalStatus =
  | 'Approved'
  | 'InProgress'
  | 'Rejected'
  | 'Removed'
  | 'Expired'
  | 'Moved'
  | 'Failed';

type ProposalProperties = {
  id: string;
  proposalId: number;
  daoId: string;
  proposer: string;
  commentsCount: number;
  description: string;
  status: ProposalStatus;
  kind: ProposalKind;
  votePeriodEnd: string;
  votePeriodEndDate: string;
  updatedAt: string | null;
  voteYes: number;
  voteNo: number;
  voteRemove: number;
  voteStatus: string;
  isFinalized: boolean;
  txHash: string;
  votes: {
    [key: string]: 'Yes' | 'No' | 'Dismiss';
  };
  createdAt: string;
  daoDetails: DaoDetails;
  link: string;
  proposalVariant: ProposalVariant;
  actions: ProposalActionData[];
  permissions?: {
    canApprove: boolean;
    canReject: boolean;
    canDelete: boolean;
    isCouncil: boolean;
  } | null;
};

export type Proposal = {
  dao: DAO | null;
} & ProposalProperties;

export interface CreateProposalParams {
  daoId: string;
  description: string;
  kind:
    | 'ChangeConfig'
    | 'ChangePolicy'
    | 'AddMemberToRole'
    | 'RemoveMemberFromRole'
    | 'UpgradeSelf'
    | 'UpgradeRemote'
    | 'Transfer'
    | 'AddBounty'
    | 'BountyDone'
    | 'Vote'
    | 'FunctionCall';
  data?:
    | ChangeConfig
    | ChangePolicy
    | AddRemoveMemberRole
    | UpgradeSelf
    | UpgradeRemote
    | Transfer
    | AddBounty
    | BountyDone
    | Vote
    | FunctionCall;
  bond: string;
  gas?: number;
  variant?: ProposalVariant;
}

interface AddBounty {
  bounty: AddBountyRequest;
}

interface UpgradeRemote {
  // valid account id
  receiver_id: string;
  method_name: string;
  hash: string;
}

interface UpgradeSelf {
  hash: string;
}

interface ChangePolicy {
  policy: unknown;
}

interface AddRemoveMemberRole {
  // valid account id
  member_id: string;
  role: string;
}

interface FunctionCall {
  receiver_id: string;
  actions: FunctionCallAction[];
}

export interface Transfer {
  token_id: string;
  // valid account id
  receiver_id: string;
  amount: string;
}

interface BountyDone {
  bounty_id: number;
  // valid account id
  receiver_id: string;
}

interface ChangeConfig {
  config: DaoConfig;
}

export interface DaoConfig {
  name: string;
  purpose: string;
  metadata: string | undefined;
}

export type ConfigChangeReason =
  | 'Changing name/purpose'
  | 'Changing links'
  | 'Changing flag';

enum Vote {
  Approve = 0x0,
  Reject = 0x1,
  Remove = 0x2,
}

export enum ProposalStatuses {
  All = 'all',
  Active = 'active',
  Approved = 'approved',
  Failed = 'failed',
}

export enum ProposalsFeedStatuses {
  All = 'all',
  Active = 'active',
  VoteNeeded = 'voteNeeded',
  Approved = 'approved',
  Failed = 'failed',
}

export enum ProposalCategories {
  All = 'All',
  Governance = 'Governance',
  Financial = 'Transfers',
  Bounties = 'Bounties',
  Members = 'Groups',
  Polls = 'Polls',
  FunctionCalls = 'FunctionCalls',
}

export interface Indexed {
  [key: string]: Proposal[];
}

export interface ProposalsByEndTime extends Indexed {
  lessThanHourProposals: Proposal[];
  lessThanDayProposals: Proposal[];
  lessThanWeekProposals: Proposal[];
  moreThanWeekProposals: Proposal[];
  otherProposals: Proposal[];
}

export interface ProposalActionData {
  id: string;
  proposalId: string;
  accountId: string;
  action: ProposalAction;
  transactionHash: string;
  timestamp: string;
}

export type ProposalCommentReport = {
  isArchived: boolean;
  createdAt: string;
  updatedAt: string;
  id: string;
  commentId: number;
  accountId: string;
  reason: string;
};

export type CommentContextType = 'Proposal' | 'BountyContext';

export interface ProposalComment {
  isArchived: boolean;
  createdAt: string;
  updatedAt: string;
  id: number;
  daoId: string;
  contextId: string;
  contextType: CommentContextType;
  accountId: string;
  message: string;
  reports: ProposalCommentReport[];
}

export type SendCommentsInput = {
  contextId: string;
  contextType: CommentContextType;
  message: string;
};

export type ReportCommentsInput = {
  commentId: number;
  reason: string;
};

export type DeleteCommentsInput = {
  reason: string;
};

export type SendProposalComment = Authorization & SendCommentsInput;
export type ReportProposalComment = Authorization & ReportCommentsInput;
export type DeleteProposalComment = Authorization & DeleteCommentsInput;

export type ProposalFeedItem = {
  dao: {
    id: string;
    name: string;
    logo: string;
    flagCover: string;
    flagLogo: string;
    legal: {
      legalStatus?: string;
      legalLink?: string;
    };
    numberOfMembers: number;
    policy: DaoPolicy;
  };
  permissions: {
    canApprove: boolean;
    canReject: boolean;
    canDelete: boolean;
    isCouncil: boolean;
  } | null;
} & ProposalProperties;

export interface CustomFcTemplatePayload {
  methodName: string;
  deposit: string;
  smartContractAddress: string;
  json: string;
  actionsGas: string | number;
  token: string;
}

export interface ProposalDetails {
  id: string;
  daoId: string;
  description: string;
  proposalVariant: ProposalVariant;
  type: ProposalType;
  status: ProposalStatus;
  kind: {
    type: ProposalType;
  };
  flag: string;
}

'''
'''--- types/proposalTemplate.ts ---
import { DAO } from 'types/dao';
import { CustomFcTemplatePayload } from 'types/proposal';

export type ProposalTemplateInput = {
  accountId: string;
  publicKey: string;
  signature: string;
  name: string;
  description: string;
  isEnabled: boolean;
  config: CustomFcTemplatePayload;
};

export type TemplateUpdatePayload = Pick<
  ProposalTemplate,
  'daoId' | 'config' | 'isEnabled' | 'name' | 'description'
>;

export type ProposalTemplate = {
  id?: string;
  daoId: string;
  dao: DAO;
  name: string;
  description?: string;
  isEnabled: boolean;
  config: CustomFcTemplatePayload;
  updatedAt?: string;
};

export type SharedProposalTemplate = {
  id: string;
  name: string;
  description: string;
  createdBy: string;
  config: CustomFcTemplatePayload;
  createdAt: string;
  updatedAt: string;
  daoCount: number;
  daos?: { id: string }[];
};

'''
'''--- types/role.ts ---
export type ProposalAction =
  | 'Finalize'
  | 'AddProposal'
  | 'RemoveProposal'
  | 'VoteApprove'
  | 'VoteReject'
  | 'VoteRemove'
  | 'MoveToHub';

export type ContractProposalType =
  | 'config'
  | 'policy'
  | 'add_member_to_role'
  | 'remove_member_from_role'
  | 'call'
  | 'upgrade_self'
  | 'upgrade_remote'
  | 'transfer'
  | 'set_vote_token'
  | 'add_bounty'
  | 'bounty_done'
  | 'vote'
  | 'factory_info_update'
  | 'policy_add_or_update_role'
  | 'policy_remove_role'
  | 'policy_update_default_vote_policy'
  | 'policy_update_parameters';

export interface DefaultVotePolicy {
  weightKind: string;
  kind: string;
  ratio: number[];
  quorum: string;
  weight?: string;
}

export type DaoPermission = `${'*' | ContractProposalType}:${
  | '*'
  | ProposalAction}`;

export type DaoRoleKind = 'Everyone' | 'Group' | 'Member';

export type DaoRole = {
  createdAt: string;
  id: string;
  name: string;
  kind: DaoRoleKind;
  balance: null;
  accountIds: string[] | null;
  permissions: DaoPermission[];
  votePolicy: Record<string, DefaultVotePolicy>;
};

'''
'''--- types/search.ts ---
import { DaoFeedItem, Member } from 'types/dao';
import { ProposalComment, ProposalFeedItem } from 'types/proposal';
import { DraftProposalFeedItem } from 'types/draftProposal';
import { BountyContext } from 'types/bounties';
import { NftToken } from 'types/token';
import { DraftComment } from 'services/DraftsService/types';

export interface SearchResultsData {
  query: string;
  daos: DaoFeedItem[];
  proposals: ProposalFeedItem[];
  members: Member[];
  comments: ProposalComment[];
  drafts: DraftProposalFeedItem[];
  bounties: BountyContext[];
  nfts: NftToken[];
  draftProposalComments: DraftComment[];
  totals: {
    daos: number;
    proposals: number;
    drafts: number;
    comments: number;
    nfts: number;
    draftProposalComments: number;
  };
  opts: {
    query: string;
    field?: string;
    index?: string;
  };
}

'''
'''--- types/settings.ts ---
export enum UpgradeSteps {
  GetUpgradeCode,
  UpgradeSelf,
  RemoveUpgradeCode,
}

export type UpgradeStatus = {
  upgradeStep: UpgradeSteps;
  proposalId?: string;
  versionHash: string;
};

export enum CreateGovernanceTokenFlow {
  CreateToken,
  SelectToken,
}

export enum CreateGovernanceTokenSteps {
  ChooseFlow,
  CreateToken,
  ContractAcceptance,
  AcceptStakingContract,
  ChangeDaoPolicy,
  ProposalCreationPolicy,
  ProposalVotingPolicy,
  StakeTokens,
  DelegateVoting,
}

export type ProgressStatus = {
  step: CreateGovernanceTokenSteps;
  proposalId?: string | null;
  flow: CreateGovernanceTokenFlow;
  selectedToken?: string;
  contractAddress?: string;
  wizardCompleted?: boolean;
};

export type Settings = {
  daoUpgrade?: UpgradeStatus;
  cloneState?: {
    proposalId?: number | null;
    isFlowCompleted: boolean;
    target?: string;
    transferDone?: boolean;
  };
  createGovernanceToken?: ProgressStatus;
  features: Record<string, boolean>;
  drafts?: {
    allowCreateDraftByAnyUser: boolean;
  };
};

'''
'''--- types/stats.ts ---
export type Metric = {
  timestamp: number;
  count: string;
};

export type FundMetric = {
  timestamp: number;
  incoming: string;
  outgoing: string;
};

export type Stats = {
  count: number;
  growth: number;
};

export type DaoTvlMetric = {
  number: Stats;
  v1: Stats;
};

export type DaoTvl = {
  grants: DaoTvlMetric;
  bounties: DaoTvlMetric;
  tvl: Stats;
};

export type DaoTokensStat = {
  fts: Stats;
  nfts: Stats;
};

export type CommonOverTime = {
  metrics: Metric[];
};

export type FundsOverTime = {
  metrics: FundMetric[];
};

export type UnitPosition = 'left' | 'right';

'''
'''--- types/token.ts ---
export type CreateTokenParams = {
  name: string;
  symbol: string;
  icon: string;
};

export enum TokenDeprecated {
  NEAR = 'NEAR',
}

export type NftTokenResponse = {
  id: string;
  tokenId: string;
  ownerId: string;
  contractId: string;
  minter: string;
  baseUri: string;
  symbol: string;
  icon: string;
  reference: string;
  referenceHash: string;
  metadata: {
    copies: 0;
    description: string;
    expiresAt: string;
    extra: string;
    issuedAt: string;
    media: string;
    mediaHash: string;
    reference: string;
    referenceHash: string;
    startsAt: string;
    title: string;
    updatedAt: string;
    approvedAccountIds: [string];
  };
  contract: {
    id: string;
    spec: string;
    name: string;
    symbol: string;
    icon: string;
    baseUri: string;
    reference: string;
    referenceHash: string;
  };
};

export type GetNFTTokensResponse = {
  data: NftTokenResponse[];
};

export type NFTUri = {
  uri: string;
  isExternalReference: boolean;
};

export type NftToken = {
  id: string;
  uri: NFTUri[];
  description: string;
  isExternalReference: boolean;
  contractId: string;
  contractName: string;
  tokenId: string;
};

export type TokenResponse = {
  transactionHash: string;
  id: string;
  ownerId: string;
  tokenId: string;
  totalSupply: string;
  decimals: number;
  icon: string;
  name: string;
  spec: string;
  symbol: string;
  balance: string;
  price: string | null;
};

export type Token = {
  id: string;
  tokenId: string;
  decimals: number;
  symbol: string;
  icon: string;
  totalSupply?: string;
  balance: string;
  price: string | null;
};

export type Tokens = Record<string, Token>;

export type GetTokensResponse = {
  data: TokenResponse[];
};

export type GovernanceToken = {
  name: string;
  value: number;
};

'''
'''--- types/transaction.ts ---
export type TransactionType = 'Deposit' | 'Withdraw';

export type Transaction = {
  transactionId: string;
  timestamp: number;
  date: string;
  receiverAccountId: string;
  signerAccountId: string;
  deposit: string;
  type: TransactionType;
};

export type Receipt = {
  receiptId: string;
  timestamp: number;
  receiverAccountId: string;
  predecessorAccountId: string;
  deposit: string;
  type: TransactionType;
  txHash: string;
  date: string;
  token: string;
};

export enum TransactionResultType {
  PROPOSAL_CREATE = 'ProposalCreate',
  DAO_CREATE = 'DaoCreate',
  PROPOSAL_VOTE = 'ProposalVote',
  BOUNTY_CLAIM = 'BountyClaim',
  FINALIZE = 'Finalize',
}

export type TransactionResult = {
  type: TransactionResultType;
  metadata: Record<string, string>;
};

'''
'''--- utils/composeProperLinkUrl.ts ---
export const composeProperLinkUrl = (link: string): string => {
  const protocolPattern = /^((http|https):\/\/)/;

  return protocolPattern.test(link) ? link : `http://${link}`;
};

'''
'''--- utils/copyToClipboard.ts ---
export function copyToClipboard(textToCopy: string): Promise<void> {
  // navigator clipboard api requires secured context
  if (
    navigator.clipboard &&
    navigator.clipboard.writeText &&
    window.isSecureContext
  ) {
    return navigator.clipboard.writeText(textToCopy);
  }

  // fallback method
  const textArea = document.createElement('textarea');

  textArea.value = textToCopy;
  // make the textarea out of viewport
  textArea.style.position = 'fixed';
  textArea.style.width = '0px';
  textArea.style.height = '0px';
  textArea.style.left = '-999999px';
  textArea.style.top = '-999999px';
  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();

  return new Promise((res, rej) => {
    // eslint-disable-next-line no-unused-expressions
    document.execCommand('copy') ? res() : rej();
    textArea.remove();
  });
}

'''
'''--- utils/dataConverter.ts ---
import { ProposalType } from 'types/proposal';

export const APP_TO_CONTRACT_PROPOSAL_TYPE = {
  [ProposalType.ChangeConfig]: 'config',
  [ProposalType.ChangePolicy]: 'policy',
  [ProposalType.AddMemberToRole]: 'add_member_to_role',
  [ProposalType.RemoveMemberFromRole]: 'remove_member_from_role',
  [ProposalType.FunctionCall]: 'call',
  [ProposalType.UpgradeSelf]: 'upgrade_self',
  [ProposalType.UpgradeRemote]: 'upgrade_remote',
  [ProposalType.Transfer]: 'transfer',
  [ProposalType.SetStakingContract]: 'set_vote_token',
  [ProposalType.AddBounty]: 'add_bounty',
  [ProposalType.BountyDone]: 'bounty_done',
  [ProposalType.Vote]: 'vote',
};

'''
'''--- utils/dispatchCustomEvent.ts ---
export function dispatchCustomEvent(name: string, payload: unknown): void {
  const event = new CustomEvent(name, { detail: payload });

  document.dispatchEvent(event);
}

'''
'''--- utils/format.ts ---
import Decimal from 'decimal.js';
import { format, formatDistance, parseISO } from 'date-fns';

import { YOKTO_NEAR } from 'services/sputnik/constants';
import { DATE_TIME_FORMAT } from 'constants/timeConstants';
import BN from 'bn.js';

export const toMillis = (timePeriod: string): number =>
  Math.round(Number(timePeriod) / 1000000);

export const getDistanceFromNow = (timePeriod: string): string => {
  return formatDistance(new Date(toMillis(timePeriod)), 0, {
    addSuffix: false,
  });
};

export function formatYoktoValue(value: string, divider?: number): string {
  if (!value) {
    return '0';
  }

  const dividerValue = divider !== undefined ? 10 ** divider : YOKTO_NEAR;

  const amountYokto = new Decimal(value);

  return Number(amountYokto.div(dividerValue).toFixed(4)).toString();
}

export const formatTimestampAsDate = (time: string): string => {
  const date = new Date(Number(time) / 1000000);

  return format(date, DATE_TIME_FORMAT);
};

export function formatISODate(
  date: string | null | undefined,
  expectedFormatPattern?: string
): string {
  if (!date) {
    return 'n/a';
  }

  try {
    const parsed = parseISO(date);

    return format(parsed, expectedFormatPattern ?? 'h:mm aaa');
  } catch (e) {
    return 'n/a';
  }
}

export function dFormatter(n: number, toFixed = 0): string {
  return n % 1 !== 0 ? `${n.toFixed(toFixed)}` : n.toFixed();
}

export function kFormatter(
  n: number,
  toFixed = 0,
  skip?: ('k' | 'm')[]
): string {
  if (n === undefined) {
    return '0';
  }

  if (n >= 1000000000) {
    return `${(n / 1000000000).toFixed(1).replace(/\.0$/, '')}B`;
  }

  if (n >= 1000000 && !skip?.includes('m')) {
    return `${(n / 1000000).toFixed(1).replace(/\.0$/, '')}M`;
  }

  if (n >= 1000 && !skip?.includes('k')) {
    return `${(n / 1000).toFixed(1).replace(/\.0$/, '')}K`;
  }

  return dFormatter(n, toFixed);
}

export function shortenString(value: string, maxLength: number): string {
  if (!value) {
    return '';
  }

  if (value.length <= maxLength || value.length < 20) {
    return value;
  }

  const suffix = value.substring(value.length - 5, value.length);

  const prefix = value.substring(0, maxLength - 4);

  return `${prefix}...${suffix}`;
}

export function formatGasValue(gas: string | number): BN {
  return new BN(Number(gas) * 10 ** 12);
}

export function formatValueToYokto(
  amount: string | number | Decimal,
  decimals: number
): string {
  return new Decimal(amount).mul(10 ** decimals).toFixed();
}

'''
'''--- utils/formatCurrency.ts ---
export function formatCurrency(amount: number): string {
  const formatter = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  });

  return formatter.formatToParts(amount).reduce((acc, part) => {
    let res = acc;

    const { type } = part;

    if (type !== 'currency' && type !== 'literal') {
      res += part.value;
    }

    return res;
  }, '');
}

'''
'''--- utils/fromBase64ToObj.ts ---
export function fromBase64ToObj<T>(str: string): T {
  return JSON.parse(Buffer.from(str, 'base64').toString('utf-8'));
}

'''
'''--- utils/ga.ts ---
export enum GA_EVENTS {
  CREATE_DRAFT_PROPOSAL = 'create_draft_proposal',
  CREATE_PROPOSAL = 'create_proposal',
  ACT_PROPOSAL = 'act_proposal',
  CREATE_DAO = 'create_dao',
  DAO_UPGRADE_STARTED = 'dao_upgrade_started',
  DAO_UPGRADE_FINISHED = 'dao_upgrade_finished',
  SWITCH_ACCOUNT = 'switch_account',
  SWITCH_WALLET = 'switch_wallet',
  SIGN_IN = 'sign_in',
  SIGN_OUT = 'sign_out',
  REQUEST_ALLOWANCE_KEY = 'request_allowance_key',
  SAVE_FC_TEMPLATE = 'save_fc_template',
  GROUP_BULK_UPDATE = 'group_bulk_update',
  GROUP_BULK_UPDATE_INVALID_WALLET = 'group_bulk_update_invalid_wallet',
  GOVERNANCE_TOKEN_CREATE_FLOW = 'governance_token_create_flow',
}

type CustomGaEvent = {
  name: GA_EVENTS;
  accountId?: string;
  daoId?: string;
  params?: Record<string, string | number | string[]>;
};

export function sendGAEvent({
  name,
  accountId,
  daoId,
  params = {},
}: CustomGaEvent): void {
  if (!window || !window.gtag) {
    return;
  }

  window.gtag('event', name, {
    ...params,
    accountId: accountId ?? 'Not authorized',
    daoId: daoId ?? 'n/a',
  });
}

'''
'''--- utils/getDefaultAppVersion.ts ---
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getClient } from 'utils/launchdarkly-server-client';

export async function getDefaultAppVersion(): Promise<{
  defaultApplicationUiVersion: number;
}> {
  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const client = await getClient();

  const defaultApplicationUiVersion = await client.variation(
    'default-application-ui-version',
    {
      key: account ?? '',
    },
    false
  );

  return {
    defaultApplicationUiVersion,
  };
}

'''
'''--- utils/getElementSize.ts ---
type ElSize = {
  height: number;
  width: number;
  clientHeight: number;
  clientWidth: number;
  offsetHeight: number;
  offsetWidth: number;
  heightWithMargin: number;
  widthWithMargin: number;
};

export function getElementSize(element: HTMLElement): ElSize {
  const styles = window.getComputedStyle(element);
  const {
    paddingTop,
    paddingBottom,
    paddingLeft,
    paddingRight,
    marginTop,
    marginBottom,
    marginLeft,
    marginRight,
  } = styles;

  // size include padding
  const { clientHeight, clientWidth } = element;

  // size include padding and border
  const { offsetHeight, offsetWidth } = element;

  // size without padding and border
  const height =
    clientHeight - parseFloat(paddingTop) - parseFloat(paddingBottom);
  const width =
    clientWidth - parseFloat(paddingLeft) - parseFloat(paddingRight);

  // size include padding, border and margin
  const heightWithMargin =
    offsetHeight + parseFloat(marginTop) + parseFloat(marginBottom);
  const widthWithMargin =
    offsetWidth + parseFloat(marginLeft) + parseFloat(marginRight);

  return {
    height,
    width,
    clientHeight,
    clientWidth,
    offsetHeight,
    offsetWidth,
    heightWithMargin,
    widthWithMargin,
  };
}

'''
'''--- utils/getFeatureFlags.ts ---
import { CookieService } from 'services/CookieService';
import { ACCOUNT_COOKIE } from 'constants/cookies';
import { getClient } from 'utils/launchdarkly-server-client';

export async function getFeatureFlags(): Promise<{
  useOpenSearchDataApi: boolean;
}> {
  const account = CookieService.get<string | undefined>(ACCOUNT_COOKIE);

  const client = await getClient();

  const useOpenSearchDataApi = await client.variation(
    'use-open-search-data-api',
    {
      key: account ?? '',
    },
    false
  );

  return {
    useOpenSearchDataApi,
  };
}

'''
'''--- utils/getImageFromImageFileList.ts ---
import get from 'lodash/get';

export function getImageFromImageFileList(
  imgFileList: FileList | string
): string {
  if (typeof imgFileList === 'string') {
    return imgFileList;
  }

  if (imgFileList?.length) {
    const img = get(imgFileList, '0');

    return URL.createObjectURL(img);
  }

  return '';
}

'''
'''--- utils/getProposalScope.ts ---
import { ProposalType } from 'types/proposal';
import { Scope } from 'features/vote-policy/helpers';

export function getProposalScope(proposalType: ProposalType): Scope {
  switch (proposalType) {
    case ProposalType.ChangePolicy:
      return 'policy';
    case ProposalType.AddBounty:
      return 'addBounty';
    case ProposalType.BountyDone:
      return 'bountyDone';
    case ProposalType.AddMemberToRole:
      return 'addMemberToRole';
    case ProposalType.RemoveMemberFromRole:
      return 'removeMemberFromRole';
    case ProposalType.FunctionCall:
      return 'call';
    case ProposalType.Transfer:
      return 'transfer';
    case ProposalType.UpgradeRemote:
      return 'upgradeRemote';
    case ProposalType.UpgradeSelf:
      return 'upgradeSelf';
    case ProposalType.Vote:
      return 'vote';
    case ProposalType.SetStakingContract:
    case ProposalType.ChangeConfig:
    default:
      return 'config';
  }
}

'''
'''--- utils/getRandomInt.ts ---
export function getRandomInt(minNum: number, maxNum: number): number {
  const min = Math.ceil(minNum);
  const max = Math.floor(maxNum);

  return Math.floor(Math.random() * (max - min + 1)) + min;
}

'''
'''--- utils/getSocialLinkIcon.ts ---
import { IconName } from 'components/Icon';

const dict: Partial<Record<IconName, string[]>> = {
  socialFacebook: ['facebook', 'fb'],
  socialTwitter: ['twitter', 't.co'],
  socialDiscord: ['discord'],
  socialGithub: ['github'],
  socialInstagram: ['instagram'],
  socialSlack: ['slack'],
  socialTelegram: ['telegram', 't.me'],
};

export function getSocialLinkIcon(link?: string): IconName {
  if (link == null || link?.length === 0) {
    return 'socialAnyUrl';
  }

  const entries = Object.entries(dict) as [IconName, string[]][];

  // eslint-disable-next-line no-restricted-syntax
  for (const [icon, urls] of entries) {
    if (urls.some(url => link.indexOf(url) !== -1)) {
      return icon;
    }
  }

  return 'socialAnyUrl';
}

'''
'''--- utils/getTranslations.ts ---
import { SSRConfig } from 'next-i18next';
import nextI18NextConfig from 'next-i18next.config';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';

export async function getTranslations(locale: string): Promise<SSRConfig> {
  return serverSideTranslations(
    locale,
    ['common', 'notificationsPage'],
    nextI18NextConfig
  );
}

'''
'''--- utils/handlePressEnterBtn.ts ---
import React from 'react';

export function onPressEnterBtn(
  e: React.KeyboardEvent,
  callback: () => void
): void {
  if (e.key === 'Enter') {
    callback();
  }
}

'''
'''--- utils/imageValidators.ts ---
import get from 'lodash/get';
import { MessageParams } from 'yup/es/types';

function getImageSize(fileList?: FileList) {
  const size = get(fileList, '0.size') || 0;

  return size;
}

export function requiredImg(fileList?: FileList): boolean {
  return !!fileList?.length;
}

export function validateImgSize(fileList?: FileList): boolean {
  const BYTES_IN_KB = 1024;
  const MAX_IMG_SIZE_IN_KB = 200;

  const size = getImageSize(fileList);

  return size / BYTES_IN_KB <= MAX_IMG_SIZE_IN_KB;
}

export function getImgValidationError(params: MessageParams): string {
  const size = getImageSize(params?.value);

  return `Image size can not exceed 200kb. Current size is ${size} bytes.`;
}

'''
'''--- utils/isSelectorWalletType.ts ---
import { WalletType } from 'types/config';

export function isSelectorWalletType(walletType: WalletType): boolean {
  return (
    walletType === WalletType.SELECTOR_NEAR ||
    walletType === WalletType.SELECTOR_SENDER
  );
}

'''
'''--- utils/jsonToBase64Str.ts ---
export function jsonToBase64Str(data: Record<string, unknown>): string {
  return Buffer.from(JSON.stringify(data)).toString('base64');
}

'''
'''--- utils/keysToCamelCase.ts ---
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
import get from 'lodash/get';
import isArray from 'lodash/isArray';
import camelCase from 'lodash/camelCase';
import isPlainObject from 'lodash/isPlainObject';

export function keysToCamelCase(obj: any): any {
  if (isPlainObject(obj)) {
    const newObj = {} as any;

    Object.keys(obj).forEach(key => {
      newObj[camelCase(key)] = keysToCamelCase(get(obj, key));
    });

    return newObj;
  }

  if (isArray(obj)) {
    return obj.map(index => {
      return keysToCamelCase(index);
    });
  }

  return obj;
}

'''
'''--- utils/keysToSnakeCase.ts ---
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
import get from 'lodash/get';
import isArray from 'lodash/isArray';
import snakeCase from 'lodash/snakeCase';
import isPlainObject from 'lodash/isPlainObject';

export function keysToSnakeCase(obj: any): any {
  if (isPlainObject(obj)) {
    const newObj = {} as any;

    Object.keys(obj).forEach(key => {
      newObj[snakeCase(key)] = keysToSnakeCase(get(obj, key));
    });

    return newObj;
  }

  if (isArray(obj)) {
    return obj.map(index => {
      return keysToSnakeCase(index);
    });
  }

  return obj;
}

'''
'''--- utils/launchdarkly-server-client.ts ---
import LaunchDarkly, { LDClient } from 'launchdarkly-node-server-sdk';
import { configService } from 'services/ConfigService';

let launchDarklyClient: LDClient;

async function initialize() {
  const { appConfig } = configService.get();

  const client = LaunchDarkly.init(appConfig.LAUNCHDARKLY_SDK_KEY);

  await client.waitForInitialization();

  return client;
}

export async function getClient(): Promise<LDClient> {
  if (launchDarklyClient) {
    return launchDarklyClient;
  }

  launchDarklyClient = await initialize();

  return launchDarklyClient;
}

'''
'''--- utils/logger.ts ---
export const logger = console;

'''
'''--- utils/objects.ts ---
export const objectKeys = <Obj>(obj: Obj): (keyof Obj)[] => {
  return Object.keys(obj) as (keyof Obj)[];
};

'''
'''--- utils/proposalFilters.ts ---
import { ProposalDetails, ProposalType } from 'types/proposal';

export function isTaskProposal(
  proposal: Pick<ProposalDetails, 'kind'>
): boolean {
  const { type } = proposal.kind;

  return (
    type === ProposalType.AddBounty ||
    type === ProposalType.BountyDone ||
    type === ProposalType.Vote ||
    type === ProposalType.FunctionCall
  );
}

export function isGovernanceProposal(
  proposal: Pick<ProposalDetails, 'kind'>
): boolean {
  const { type } = proposal.kind;

  return (
    type === ProposalType.ChangePolicy ||
    type === ProposalType.UpgradeRemote ||
    type === ProposalType.UpgradeSelf ||
    type === ProposalType.ChangeConfig
  );
}

export function isGroupProposal(
  proposal: Pick<ProposalDetails, 'kind'>
): boolean {
  const { type } = proposal.kind;

  return (
    type === ProposalType.AddMemberToRole ||
    type === ProposalType.RemoveMemberFromRole
  );
}

export function isTreasuryProposal(
  proposal: Pick<ProposalDetails, 'kind'>
): boolean {
  const { type } = proposal.kind;

  return (
    type === ProposalType.SetStakingContract || type === ProposalType.Transfer
  );
}

'''
'''--- utils/tests/composeProperLinkUrl.spec.ts ---
import { composeProperLinkUrl } from 'utils/composeProperLinkUrl';

describe('compose proper link url', () => {
  it('Should not add http if http/https is presented in url', () => {
    const urlOne = 'http://helloworld.com';
    const urlTwo = 'http://helloworld.com';

    expect(composeProperLinkUrl(urlOne)).toStrictEqual(urlOne);
    expect(composeProperLinkUrl(urlTwo)).toStrictEqual(urlTwo);
  });

  it('Should add http if not presented in url', () => {
    const url = 'helloworld.com';

    expect(composeProperLinkUrl(url)).toStrictEqual(`http://${url}`);
  });
});

'''
'''--- utils/tests/dispatchCustomEvent.spec.ts ---
import get from 'lodash/get';

import { dispatchCustomEvent } from 'utils/dispatchCustomEvent';

describe('dispatch custom event', () => {
  beforeAll(() => {
    document.dispatchEvent = jest.fn();
  });

  afterAll(() => {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    document.dispatchEvent.mockRestore();
  });

  it('Should dispatch event', () => {
    const name = 'CUSTOM_NAME';
    const payload = { hello: 'world' };

    dispatchCustomEvent(name, payload);

    const { type, detail } = get(document.dispatchEvent, 'mock.calls.0.0');

    expect(type).toStrictEqual(name);
    expect(detail).toStrictEqual(payload);
  });
});

'''
'''--- utils/tests/format.spec.ts ---
import {
  formatISODate,
  formatTimestampAsDate,
  formatYoktoValue,
  kFormatter,
  shortenString,
} from 'utils/format';

describe('format', () => {
  describe('formatYoktoValue', () => {
    it('Should return 0 if no value provided', () => {
      expect(formatYoktoValue('')).toStrictEqual('0');
    });

    it('Should use custom divider if provided', () => {
      expect(formatYoktoValue('100', 2)).toStrictEqual('1');
      expect(formatYoktoValue('1', 2)).toStrictEqual('0.01');
    });

    it('Should turn value in yokto near', () => {
      expect(formatYoktoValue('1000000000000000000000')).toStrictEqual('0.001');
    });
  });

  describe('formatTimestampAsDate', () => {
    it('Should properly format timestamp in kiloseconds to "dd LLL yyyy HH:mm:ss"', () => {
      const date = formatTimestampAsDate('1641680883161000000');

      expect(date).toMatch(
        /^0[0-9] Jan 2022 [0-9][0-9]:[0-9][0-9]:[0-9][0-9]$/
      );
    });
  });

  describe('kFormatter', () => {
    it('Should return 0 if argument is not defined', () => {
      expect(kFormatter(undefined as unknown as number)).toStrictEqual('0');
    });

    it('Should properly format number', () => {
      expect(kFormatter(80000000000)).toStrictEqual('80B');
      expect(kFormatter(7000000000)).toStrictEqual('7B');
      expect(kFormatter(20000000)).toStrictEqual('20M');
      expect(kFormatter(3000)).toStrictEqual('3K');

      // TODO check if it's an expected behaviour
      expect(kFormatter(3999)).toStrictEqual('4K');
    });

    it('Should not shorten numbers that are less than 1000', () => {
      expect(kFormatter(999)).toStrictEqual('999');
      expect(kFormatter(1)).toStrictEqual('1');
      expect(kFormatter(777.777)).toStrictEqual('778');
    });

    it('Should format numbers as defined in params', () => {
      expect(kFormatter(777.777, 1)).toStrictEqual('777.8');
    });
  });

  describe('shortenString', () => {
    it('Should return empty string if value is empty', () => {
      expect(shortenString('', 0)).toStrictEqual('');
    });

    it('Should not change string if value length is less than defined maxLength or is less than 20', () => {
      const stringThatIsMoreThan20CharsInLength =
        'eat some more of these soft French rolls and have some tea';

      expect(shortenString('hello world', 1)).toStrictEqual('hello world');

      expect(
        shortenString(stringThatIsMoreThan20CharsInLength, 100)
      ).toStrictEqual(stringThatIsMoreThan20CharsInLength);
    });

    // TODO check that method works properly. Looks like result is wrong
    it('Should properly truncate string', () => {
      const stringThatIsMoreThan20CharsInLength =
        'eat some more of these soft French rolls and have some tea';

      expect(
        shortenString(stringThatIsMoreThan20CharsInLength, 10)
      ).toStrictEqual('eat so...e tea');
    });
  });

  describe('formatISODate', () => {
    it('returns formatted date using provided format pattern', () => {
      const date = '2021-11-25T15:25:59.159Z';

      expect(formatISODate(date, 'yyyy-MM-dd')).toBe('2021-11-25');
    });

    it('returns n/a in case invalid ISO string', () => {
      const date = '2021-11-25T_invalid:25:59.159Z';

      expect(formatISODate(date, 'yyyy-MM-dd')).toBe('n/a');
    });
  });
});

'''
'''--- utils/tests/formatCurrency.spec.ts ---
import { formatCurrency } from 'utils/formatCurrency';

describe('format currency', () => {
  it('Should properly format amount to USD', () => {
    expect(formatCurrency(123)).toStrictEqual('123.00');
    expect(formatCurrency(123.12)).toStrictEqual('123.12');
    expect(formatCurrency(0.12)).toStrictEqual('0.12');
    expect(formatCurrency(-1230.12345678)).toStrictEqual('-1,230.12');
  });
});

'''
'''--- utils/tests/getElementSize.spec.ts ---
import { getElementSize } from 'utils/getElementSize';

describe('get element size', () => {
  beforeAll(() => {
    window.getComputedStyle = jest.fn().mockImplementation(() => ({
      paddingTop: 1,
      paddingBottom: 2,
      paddingLeft: 3,
      paddingRight: 4,
      marginTop: 5,
      marginBottom: 6,
      marginLeft: 7,
      marginRight: 8,
    }));
  });

  afterAll(() => {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    window.getComputedStyle.mockRestore();
  });

  it('Should properly calculate sizes', () => {
    const element = {
      clientHeight: 11,
      clientWidth: 12,
      offsetHeight: 13,
      offsetWidth: 14,
    };

    const sizes = getElementSize(element as unknown as HTMLElement);

    expect(sizes).toStrictEqual({
      height: 8,
      width: 5,
      clientHeight: 11,
      clientWidth: 12,
      offsetHeight: 13,
      offsetWidth: 14,
      heightWithMargin: 24,
      widthWithMargin: 29,
    });
  });
});

'''
'''--- utils/tests/getImageFromImageFileList.spec.ts ---
import { getImageFromImageFileList } from 'utils/getImageFromImageFileList';

describe('get image from image file list', () => {
  beforeAll(() => {
    window.URL.createObjectURL = jest.fn().mockImplementation((file: File) => {
      return new Promise(resolve => {
        const reader = new FileReader();

        reader.addEventListener(
          'load',
          () => {
            resolve(reader.result);
          },
          false
        );

        reader.readAsText(file);
      });
    });
  });

  afterAll(() => {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    window.URL.createObjectURL.mockRestore();
  });

  it('Should return empty string if file list is empty', () => {
    expect(getImageFromImageFileList([] as unknown as FileList)).toStrictEqual(
      ''
    );
  });

  it('Should get content if file provided', () => {
    const content = 'Hello World!';

    const blob = new Blob([content]);
    const file = new File([blob], 'data.txt', { type: 'text/plain' });

    expect(
      getImageFromImageFileList([file] as unknown as FileList)
    ).resolves.toStrictEqual(content);
  });
});

'''
'''--- utils/tests/getProposalScope.spec.ts ---
import { ProposalType } from 'types/proposal';

import { getProposalScope } from 'utils/getProposalScope';

describe('get proposal scope', () => {
  it.each`
    type                                 | expected
    ${ProposalType.ChangePolicy}         | ${'policy'}
    ${ProposalType.AddBounty}            | ${'addBounty'}
    ${ProposalType.BountyDone}           | ${'bountyDone'}
    ${ProposalType.AddMemberToRole}      | ${'addMemberToRole'}
    ${ProposalType.RemoveMemberFromRole} | ${'removeMemberFromRole'}
    ${ProposalType.FunctionCall}         | ${'call'}
    ${ProposalType.Transfer}             | ${'transfer'}
    ${ProposalType.UpgradeRemote}        | ${'upgradeRemote'}
    ${ProposalType.UpgradeSelf}          | ${'upgradeSelf'}
    ${ProposalType.Vote}                 | ${'vote'}
    ${ProposalType.ChangeConfig}         | ${'config'}
    ${ProposalType.SetStakingContract}   | ${'config'}
  `(
    'Should return propoer scope for $type proposal type',
    ({ type, expected }) => {
      expect(getProposalScope(type)).toBe(expected);
    }
  );
});

'''
'''--- utils/tests/getRandomInt.spec.ts ---
import { getRandomInt } from 'utils/getRandomInt';

describe('get random int', () => {
  it('Should return number from specified range', () => {
    const min = 10;
    const max = 20;
    const number = getRandomInt(10, 20);

    expect(number).toBeGreaterThanOrEqual(min);
    expect(number).toBeLessThanOrEqual(max);
  });
});

'''
'''--- utils/tests/getSocialLinkIcon.spec.ts ---
import { getSocialLinkIcon } from 'utils/getSocialLinkIcon';

describe('get social link icon', () => {
  it('Should return socialAnyUrl if link is empty or not in dictionary', () => {
    expect(getSocialLinkIcon('')).toStrictEqual('socialAnyUrl');
    expect(getSocialLinkIcon('helloWorld')).toStrictEqual('socialAnyUrl');
  });

  it.each`
    link                | icon
    ${'facebook'}       | ${'socialFacebook'}
    ${'fb'}             | ${'socialFacebook'}
    ${'asdfacebookasd'} | ${'socialFacebook'}
    ${'twitter'}        | ${'socialTwitter'}
    ${'t.com'}          | ${'socialTwitter'}
    ${'discord'}        | ${'socialDiscord'}
    ${'github'}         | ${'socialGithub'}
    ${'instagram'}      | ${'socialInstagram'}
    ${'slack'}          | ${'socialSlack'}
    ${'telegram'}       | ${'socialTelegram'}
    ${'t.me'}           | ${'socialTelegram'}
  `('Should return proper icon for link', ({ link, icon }) => {
    expect(getSocialLinkIcon(link)).toBe(icon);
  });
});

'''
'''--- utils/tests/imageValidators.spec.ts ---
import { MessageParams } from 'yup/es/types';

import {
  requiredImg,
  validateImgSize,
  getImgValidationError,
} from 'utils/imageValidators';

describe('image validators', () => {
  describe('requiredImg', () => {
    it('Should return false if FileList is empty', () => {
      const result = requiredImg([] as unknown as FileList);

      expect(result).toBeFalsy();
    });

    it('Should return true if FileList is not empty', () => {
      const result = requiredImg([1] as unknown as FileList);

      expect(result).toBeTruthy();
    });
  });

  describe('validateImgSize', () => {
    it('Should return true for files that are smaller than 204800 kB', () => {
      const fileList = [{ size: 20000 }];

      const result = validateImgSize(fileList as unknown as FileList);

      expect(result).toBeTruthy();
    });

    it('Should not return error if no file provided', () => {
      const result = validateImgSize([] as unknown as FileList);

      expect(result).toBeTruthy();
    });

    it('Should return false for files that are bigger than 204800 kB', () => {
      const fileList = [{ size: 2048000 }];

      const result = validateImgSize(fileList as unknown as FileList);

      expect(result).toBeFalsy();
    });
  });

  describe('getImgValidationError', () => {
    it('Should produce proper validation error', () => {
      const params = {
        value: [{ size: 2048000 }],
      };

      const message = getImgValidationError(params as MessageParams);

      expect(message).toBe(
        'Image size can not exceed 200kb. Current size is 2048000 bytes.'
      );
    });
  });
});

'''
'''--- utils/tests/jsonToBase64Str.spec.ts ---
import { jsonToBase64Str } from 'utils/jsonToBase64Str';

describe('json to base 64 str', () => {
  it('Should turn object into base 64 string', () => {
    const data = {
      hello: 'world',
    };

    expect(jsonToBase64Str(data)).toStrictEqual('eyJoZWxsbyI6IndvcmxkIn0=');
  });
});

'''
'''--- utils/tests/keysToSnakeCase.spec.ts ---
import { keysToSnakeCase } from 'utils/keysToSnakeCase';

describe('Keys to snake case', () => {
  it('Should properly process object', () => {
    const data = {
      dataOne: 'dataOne',
      DataTwo: 'dataTwo',
      dataThree: {
        DataFour: 'dataFour',
      },
    };

    expect(keysToSnakeCase(data)).toStrictEqual({
      data_one: 'dataOne',
      data_two: 'dataTwo',
      data_three: { data_four: 'dataFour' },
    });
  });

  it('Should properly process array', () => {
    const data = [{ dataOne: 'dataOne' }, { DataTwo: 'dataTwo' }];

    expect(keysToSnakeCase(data)).toStrictEqual([
      { data_one: 'dataOne' },
      { data_two: 'dataTwo' },
    ]);
  });
});

'''
'''--- utils/tests/proposalFilters.spec.ts ---
import { Proposal, ProposalType } from 'types/proposal';

import {
  isTaskProposal,
  isGroupProposal,
  isTreasuryProposal,
  isGovernanceProposal,
} from 'utils/proposalFilters';

describe('proposal filters', () => {
  describe('isTaskProposal', () => {
    it.each`
      type                                 | expected
      ${ProposalType.AddBounty}            | ${true}
      ${ProposalType.BountyDone}           | ${true}
      ${ProposalType.Vote}                 | ${true}
      ${ProposalType.FunctionCall}         | ${true}
      ${ProposalType.AddMemberToRole}      | ${false}
      ${ProposalType.Transfer}             | ${false}
      ${ProposalType.RemoveMemberFromRole} | ${false}
      ${ProposalType.ChangePolicy}         | ${false}
      ${ProposalType.UpgradeRemote}        | ${false}
      ${ProposalType.UpgradeSelf}          | ${false}
      ${ProposalType.ChangeConfig}         | ${false}
      ${ProposalType.SetStakingContract}   | ${false}
    `('Should properly handle $type proposal type', ({ type, expected }) => {
      const proposal = {
        kind: {
          type,
        },
      } as Proposal;

      expect(isTaskProposal(proposal)).toBe(expected);
    });
  });

  describe('isGovernanceProposal', () => {
    it.each`
      type                                 | expected
      ${ProposalType.AddBounty}            | ${false}
      ${ProposalType.BountyDone}           | ${false}
      ${ProposalType.Vote}                 | ${false}
      ${ProposalType.FunctionCall}         | ${false}
      ${ProposalType.AddMemberToRole}      | ${false}
      ${ProposalType.Transfer}             | ${false}
      ${ProposalType.RemoveMemberFromRole} | ${false}
      ${ProposalType.ChangePolicy}         | ${true}
      ${ProposalType.UpgradeRemote}        | ${true}
      ${ProposalType.UpgradeSelf}          | ${true}
      ${ProposalType.ChangeConfig}         | ${true}
      ${ProposalType.SetStakingContract}   | ${false}
    `('Should properly handle $type proposal type', ({ type, expected }) => {
      const proposal = {
        kind: {
          type,
        },
      } as Proposal;

      expect(isGovernanceProposal(proposal)).toBe(expected);
    });
  });

  describe('isGroupProposal', () => {
    it.each`
      type                                 | expected
      ${ProposalType.AddBounty}            | ${false}
      ${ProposalType.BountyDone}           | ${false}
      ${ProposalType.Vote}                 | ${false}
      ${ProposalType.FunctionCall}         | ${false}
      ${ProposalType.AddMemberToRole}      | ${true}
      ${ProposalType.Transfer}             | ${false}
      ${ProposalType.RemoveMemberFromRole} | ${true}
      ${ProposalType.ChangePolicy}         | ${false}
      ${ProposalType.UpgradeRemote}        | ${false}
      ${ProposalType.UpgradeSelf}          | ${false}
      ${ProposalType.ChangeConfig}         | ${false}
      ${ProposalType.SetStakingContract}   | ${false}
    `('Should properly handle $type proposal type', ({ type, expected }) => {
      const proposal = {
        kind: {
          type,
        },
      } as Proposal;

      expect(isGroupProposal(proposal)).toBe(expected);
    });
  });

  describe('isTreasuryProposal', () => {
    it.each`
      type                                 | expected
      ${ProposalType.AddBounty}            | ${false}
      ${ProposalType.BountyDone}           | ${false}
      ${ProposalType.Vote}                 | ${false}
      ${ProposalType.FunctionCall}         | ${false}
      ${ProposalType.AddMemberToRole}      | ${false}
      ${ProposalType.Transfer}             | ${true}
      ${ProposalType.RemoveMemberFromRole} | ${false}
      ${ProposalType.ChangePolicy}         | ${false}
      ${ProposalType.UpgradeRemote}        | ${false}
      ${ProposalType.UpgradeSelf}          | ${false}
      ${ProposalType.ChangeConfig}         | ${false}
      ${ProposalType.SetStakingContract}   | ${true}
    `('Should properly handle $type proposal type', ({ type, expected }) => {
      const proposal = {
        kind: {
          type,
        },
      } as Proposal;

      expect(isTreasuryProposal(proposal)).toBe(expected);
    });
  });
});

'''