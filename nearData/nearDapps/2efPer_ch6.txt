*GitHub Repository "2efPer/ch6"*

'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Rock Paper Scissor,and Coin</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime';
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import Big from 'big.js';
import Claim from './components/Claim';
import SignIn from './components/SignIn';
import Game from './components/Game';

const SUGGESTED_DONATION = '0';
const BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();

const App = ({ contract, currentUser, nearConfig, wallet }) => {
  const [messages, setMessages] = useState([]);

  // useEffect(() => {
  //   // TODO: don't just fetch once; subscribe!
  //   contract.getMessages().then(setMessages);
  // }, []);

  const onSubmit = (e) => {
    // e.preventDefault();

    // const { fieldset, message, donation } = e.target.elements;

    // fieldset.disabled = true;

    // // TODO: optimistically update page with new message,
    // // update blockchain data in background
    // // add uuid to each message, so we know which one is already known
    // contract.addMessage(
    //   { text: message.value },
    //   BOATLOAD_OF_GAS,
    //   Big(donation.value || '0').times(10 ** 24).toFixed()
    // ).then(() => {
    //   contract.getMessages().then(messages => {
    //     setMessages(messages);
    //     message.value = '';
    //     donation.value = SUGGESTED_DONATION;
    //     fieldset.disabled = false;
    //     message.focus();
    //   });
    // });
  };

  const signIn = () => {
    wallet.requestSignIn(
      nearConfig.contractName,
      'NEAR Guest Book'
    );
  };

  const signOut = () => {
    wallet.signOut();
    window.location.replace(window.location.origin + window.location.pathname);
  };

  return (
    <main>
      <header>
        { currentUser
          ? <div><button onClick={signOut}>Sign out</button></div>
          : <button onClick={signIn}>Sign in</button>
        }
      </header>
      { currentUser
        ? <Claim contract={contract} accountId={currentUser.accountId} onSubmit={onSubmit} currentUser={currentUser} />
        : <SignIn/>
      }
      { !!currentUser && <Game accountId={currentUser.accountId} contract={contract}/> }
    </main>
  );
};

App.propTypes = {
  contract: PropTypes.shape({
    get_paid: PropTypes.func.isRequired,
    storage_deposit: PropTypes.func.isRequired,
    get_ranks: PropTypes.func.isRequired,
    ft_balance_of: PropTypes.func.isRequired,
    storage_balance_of: PropTypes.func.isRequired,
    ft_transfer: PropTypes.func.isRequired
  }).isRequired,
  currentUser: PropTypes.shape({
    accountId: PropTypes.string.isRequired,
    balance: PropTypes.string.isRequired
  }),
  nearConfig: PropTypes.shape({
    contractName: PropTypes.string.isRequired
  }).isRequired,
  wallet: PropTypes.shape({
    requestSignIn: PropTypes.func.isRequired,
    signOut: PropTypes.func.isRequired
  }).isRequired
};

export default App;

'''
'''--- src/components/Header.js ---
import React from "react";
import Scorebox from "./Scorebox";

function Header({score,accountId, contract }) {
    return (
        <header>
            <h1 className="header__title">
                <span>Rock</span>
                <span>Paper</span>
                <span>Scissors</span>
            </h1>
            <Scorebox score_num={score} accountId={accountId} contract={contract}/>
        </header>
    )
}

export default Header;
'''
'''--- src/components/Home.js ---
import React, { useState } from "react";
import { Link } from "react-router-dom";
import bgTriangle from '../images/bg-triangle.svg';
import paperIcon from "../images/icon-paper.svg";
import scissorsIcon from "../images/icon-scissors.svg";
import rockIcon from "../images/icon-rock.svg";

function Home(props) {

    function playGame(e) {
        props.setPick(e.target.dataset.id);
    }

    return (
        <div className="home">
            <img className="triangle" src={bgTriangle}/>
            <Link to="/play">
                <div data-id="paper" className="home__item home__paper" style={{backgroundImage: `url(${paperIcon})`}} onClick={playGame} />
            </Link>
            <Link to="/play">
                <div data-id="scissors" className="home__item home__scissors" style={{backgroundImage: `url(${scissorsIcon})`}} onClick={playGame}/>
            </Link>
            <Link to="/play">
                <div data-id="rock" className="home__item home__rock" style={{backgroundImage: `url(${rockIcon})`}} onClick={playGame}/>
            </Link>
        </div>
    )
}

export default Home;
'''
'''--- src/components/Play.js ---
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import paperIcon from "../images/icon-paper.svg";
import scissorsIcon from "../images/icon-scissors.svg";
import rockIcon from "../images/icon-rock.svg";

function Play(props) {

    const myPick = props.mine;
    const housePick = props.house;
    const [countDown, setCountDown] = useState("3");
    const [playerPickElement, setPlayerElement] = useState("");
    const [housePickElement, setHouseElement] = useState("");
    const [resultMessage, setResultMessage] = useState("");

    const [playerWins, setPlayerWins] = useState(false);
    const [houseWins, setHouseWins] = useState(false);

    function chooseWinner() {
        if (myPick === "rock" && housePick === "scissors") {
            setPlayerWins(true);
            setHouseWins(false);
        } else if (myPick === "rock" && housePick === "paper") {
            setHouseWins(true);
            setPlayerWins(false);
        } else if (myPick === "scissors" && housePick === "paper") {
            setPlayerWins(true);
            setHouseWins(false);
        } else if (myPick === "scissors" && housePick === "rock") {
            setHouseWins(true);
            setPlayerWins(false);
        } else if (myPick === "paper" && housePick === "rock") {
            setPlayerWins(true);
            setHouseWins(false);
        } else if (myPick === "paper" && housePick === "scissors") {
            setHouseWins(true);
            setPlayerWins(false);
        } else {
            setHouseWins(false);
            setPlayerWins(false);
        }
    }

    function showWinner() {

        const currentScore = props.score;

        if (playerWins) {
            props.setScore(currentScore + 1);
            setResultMessage("You Win");
        } else if (houseWins) {
            props.setScore(currentScore - 1);
            setResultMessage("You Lose");
        } else {
            setResultMessage("Draw");
        }
    }

    function setMyPickIcon(pick) {
        if (pick === "rock") {
            return rockIcon;
        } else if (pick === "paper") {
            return paperIcon;
        } else if (pick === "scissors") {
            return scissorsIcon;
        }
    }

    function setMyPickClass(pick) {
        if (pick === "rock") {
            return "pick__rock";
        } else if (pick === "paper") {
            return "pick__paper";
        } else if (pick === "scissors") {
            return "pick__scissors";
        }
    }

    function wait(ms = 0) {
        return new Promise (function(resolve) {
            setTimeout(resolve, ms);
        })
    }

    useEffect(() => {

        chooseWinner();

        wait(500).then(() => {
            setCountDown("2");
            return wait(500);
        }).then(() => {
            setCountDown("1");
            return wait(500);
        }).then(() => {
            setHouseElement(
                <div className="pick">
                    <div className="result__desktop pick__title">The House Picked {housePick}</div>
                    <div className={"pick__item " + (houseWins? "winner " : "") + setMyPickClass(housePick)} style={{backgroundImage: `url(${setMyPickIcon(housePick)}`}}></div>
                    <div className="result__mobile pick__title">The House Picked {housePick}</div>
                </div>
            );
            setPlayerElement(
                <div className="pick">
                    <div className="result__desktop pick__title">You Picked {myPick}</div> 
                    <div className={"pick__item " + (playerWins? "winner " : "") + setMyPickClass(myPick)} style={{backgroundImage: `url(${setMyPickIcon(myPick)}`}}></div>   
                    <div className="result__mobile pick__title">You Picked {myPick}</div> 
                </div>
            )
            showWinner();
        })

    }, [setHouseElement, setCountDown, houseWins, playerWins])

    return (
        <div className="play-wrapper">
            {playerPickElement? playerPickElement : 
                <div className="pick">
                    <div className="result__desktop pick__title">You Picked {myPick}</div> 
                    <div className={"pick__item " + setMyPickClass(myPick)} style={{backgroundImage: `url(${setMyPickIcon(myPick)}`}}></div>   
                    <div className="result__mobile pick__title">You Picked {myPick}</div> 
                </div>
            }
            <div className={"result__desktop game__result " + (resultMessage.length? "" : "invisible")}>
                <h3>{resultMessage}</h3>
                <Link className="play-again__button " to="/" onClick={()=>(props.setHousePick())}>Play Again</Link>
            </div>
            {housePickElement? housePickElement : 
                <div className="pick">
                    <div className="pick__title result__desktop">The House Picked:</div>
                    <div className="pick__item" ><span>{countDown}</span></div>
                    <div className="pick__title result__mobile">The House Picked:</div>
                </div>
            }
            <div className={"result__mobile game__result " + (resultMessage.length? "" : "invisible")}>
                <h3>{resultMessage}</h3>
                <Link className="play-again__button " to="/" onClick={()=>(props.setHousePick())}>Play Again</Link>
            </div>
        </div>
    )
}

export default Play;
'''
'''--- src/components/Scorebox.js ---
import React from "react";
import Big from "big.js";

export const ONE_YOCTO_NEAR = "1";
export const BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();
export const ONE_NEAR = Big(1).times(10 ** 24).toFixed();

function Scorebox({score_num,accountId, contract }) {

    async function getEarn(e) {
        const score = e.currentTarget.textContent
        if (score<=0) {
            alert("You don't have enough score!")
        }else{
            alert("you can refresh your page later to check your Scissor coin.")
            await contract.get_paid(
                {
                  account_id: accountId,
                  amount: parseInt(score),
                },
                BOATLOAD_OF_GAS
              );
        }

      }

    return (
        <div className="scorebox">
            <div className="scorebox__title">Score</div>
            <div className="scorebox__score"><button onClick={getEarn}>{score_num}</button></div>
        </div>
    )
}

export default Scorebox;
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'ft.lagosss.testnet';

function getConfig(env) {
  switch(env) {
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case 'production':
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="./favicon.ico" />
    <link rel="stylesheet" href="global.scss">
    <title>Rock Paper Scissor,and Coin.</title>
    <meta property="og:title" content="Rock Paper Scissor,and Coin">
    <meta property="og:description" content="Rock Paper Scissor,and Coin">
    <!-- <meta property="og:image" content=""> -->
    <!-- <meta property="og:url" content=""> -->
    <!-- <meta name="twitter:card" content="summary_large_image"> -->
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `yarn dev`.
      To create a production bundle, use `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import getConfig from './config.js';
import * as nearAPI from 'near-api-js';

async function initContract() {

  const nearConfig = getConfig(process.env.NODE_ENV || 'testnet');

  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();

  const near = await nearAPI.connect({ keyStore, ...nearConfig });

  const walletConnection = new nearAPI.WalletConnection(near);

  let currentUser;
  if (walletConnection.getAccountId()) {
    currentUser = {
      accountId: walletConnection.getAccountId(),
      balance: (await walletConnection.account().state()).amount,
    };
  }
  const contract = await new nearAPI.Contract(
    walletConnection.account(),
    nearConfig.contractName,
    {
      viewMethods: ['get_ranks','ft_balance_of', 'storage_balance_of'],
      changeMethods: ['get_paid','storage_deposit','ft_transfer'],
      sender: walletConnection.getAccountId(),
    }
  );

  return { contract, currentUser, nearConfig, walletConnection };
}

window.nearInitPromise = initContract().then(
  ({ contract, currentUser, nearConfig, walletConnection }) => {
    ReactDOM.render(
      <App
        contract={contract}
        currentUser={currentUser}
        nearConfig={nearConfig}
        wallet={walletConnection}
      />,
      document.getElementById('root')
    );
  }
);

'''
'''--- src/tests/integration/App-integration.test.js ---
// these are made available by near-cli/test_environment
// note: do not remove the line below as it is needed for these tests
/* global nearlib, nearConfig */

import 'regenerator-runtime/runtime';

let near;
let contract;
let accountId;

beforeAll(async function() {
  near = await nearlib.connect(nearConfig);
  accountId = nearConfig.contractName;
  contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['getMessages'],
    changeMethods: ['addMessage'],
    sender: accountId
  });
});

it('send one message and retrieve it', async() => {
  await contract.addMessage({ text: 'aloha' });
  const msgs = await contract.getMessages();
  const expectedMessagesResult = [{
    premium: false,
    sender: accountId,
    text: 'aloha'
  }];
  expect(msgs).toEqual(expectedMessagesResult);
});

it('send two more messages and expect three total', async() => {
  await contract.addMessage({ text: 'foo' });
  await contract.addMessage({ text: 'bar' });
  const msgs = await contract.getMessages();
  expect(msgs.length).toEqual(3);
});

'''
'''--- src/tests/ui/App-ui.test.js ---
import 'regenerator-runtime/runtime';
import React from 'react';
import TestRenderer from 'react-test-renderer';
import App from '../../App';
const { act } = TestRenderer;

// Declare stubs for contract, walletConnection, and nearConfig
const contract = {
  account: {
    connection: {},
    accountId: 'test.near'
  },
  contractId: 'test.near',
  getMessages: () => new Promise(() => {}),
  addMessage: () => ''
};
const walletConnection = {
  account: () => ({ _state: { amount: '1' + '0'.repeat(25) } }),
  requestSignIn: () => null,
  signOut: () => null,
  isSignedIn: () => false,
  getAccountId: () => 'test.near'
};
const nearConfig = {
  networkId: 'testnet',
  nodeUrl: 'https://rpc.nearprotocol.com',
  contractName: 'test.near',
  walletUrl: 'https://wallet.nearprotocol.com',
  helperUrl: 'https://near-contract-helper.onrender.com'
};

// For UI tests, use pattern from: https://reactjs.org/docs/test-renderer.html
let container;

beforeEach(() => {
  container = document.createElement('div');
  document.body.appendChild(container);
});

afterEach(() => {
  document.body.removeChild(container);
  container = null;
});

it('renders with proper title', () => {
  let testRenderer;

  act(() => {
    testRenderer = TestRenderer.create(
      <App contract={contract} wallet={walletConnection} nearConfig={nearConfig} />
    );
  });

  const testInstance = testRenderer.root;

  expect(testInstance.findByType('h1').children).toEqual(['NEAR Guest Book']);
});

'''