*GitHub Repository "3ugen/guest-book"*

'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder â€“
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import React from 'react'
import {login, logout} from './utils'
// import './global.css'
import {Stack} from '@fluentui/react/lib/Stack';
import {DefaultPalette} from '@fluentui/react/lib/Styling';
import getConfig from './config'
import {Persona, PersonaSize, PrimaryButton, Spinner, Text, TextField, Toggle} from "@fluentui/react";
import {TestImages} from "@fluentui/example-data";
import Big from 'big.js';

const {networkId} = getConfig(process.env.NODE_ENV || 'development')
// Styles definition
const stackStyles = {
  root: {
    background: DefaultPalette.blue,
  },
};
const stackItemStyles = {
  root: {
    background: DefaultPalette.themePrimary,
    color: DefaultPalette.white,
    padding: 5,
  },
};
// Tokens definition
const containerStackTokens = {childrenGap: 25};
const verticalGapStackTokens = {
  childrenGap: 10,
  padding: 10,
};
const itemAlignmentsStackTokens = {
  childrenGap: 5,
  padding: 10,
};
const clickableStackTokens = {
  padding: 10,
};

const tokens = {
  sectionStack: {
    childrenGap: 10,
  },
  headingStack: {
    childrenGap: 5,
  },
};

const SUGGESTED_DONATION = '0';
const BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();

export default function App() {
  // use React Hooks to store greeting in component state
  const [greeting, set_greeting] = React.useState(null)
  const [likeMs, toggleLikeMs] = React.useState(true)
  const [message, setMessage] = React.useState("")
  const [deposit, setDeposit] = React.useState(0)
  const [isSending, setSending] = React.useState(false)

  // when the user has not yet interacted with the form, disable the button
  const [buttonDisabled, setButtonDisabled] = React.useState(true)

  // after submitting the form, we want to show Notification
  const [showNotification, setShowNotification] = React.useState(false)

  // The useEffect hook can be used to fire side-effects during render
  // Learn more: https://reactjs.org/docs/hooks-intro.html
  React.useEffect(
    () => {
      // in this case, we only care to query the contract when signed in
      if (window.walletConnection.isSignedIn()) {

        // window.contract is set by initContract in index.js
        console.log(`get greeting start`)
        window.contract.get_greeting()
          .then(greetingFromContract => {
            console.log(`greeting from contract`)
            if (greetingFromContract && greetingFromContract.length > 0) {
              console.log(`greeting from contract ${greetingFromContract.length}`)
              set_greeting(greetingFromContract)
            }
          }).catch(err => {
          console.log(`get greeting error: ${err}`)
        })
      }
    },

    // The second argument to useEffect tells React when to re-run the effect
    // Use an empty array to specify "only run on first render"
    // This works because signing into NEAR Wallet reloads the page
    []
  )

  // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) {
    return (
      <main>
        <Stack tokens={containerStackTokens}>
          <Stack.Item align="center">
            <Text variant={'xxLarge'} block>
              Welcome to Near Guest book!
            </Text>
          </Stack.Item>
          <Stack.Item align="center">
            <Text variant={'large'} block>
              Go ahead and sign in to vote up Microsoft Fluent UI!
            </Text>
          </Stack.Item>
          <Stack.Item align="center" styles={stackItemStyles}>
            <PrimaryButton text="Sign in" onClick={login} allowDisabledFocus/>
          </Stack.Item>
        </Stack>

      </main>
    )
  }

  const listItems = () => {
    greeting.map((number) => <li>{number}</li>)
  }

  const toggleMs = () => toggleLikeMs(!likeMs)
  const handleMsgChange = (msg) => {
    console.log(`new message: ${msg.target.value}`)
    let newMsg = msg.target.value;
    if (newMsg.length > 0) {
      setButtonDisabled(false)
    } else {
      setButtonDisabled(true)
    }
    setMessage(newMsg)
  }
  const handleDonationChange = (msg) => {
    console.log(`new donation: ${msg.target.value}`)
    let newDepo = msg.target.value;
    if (newDepo.length > 0) {
      if (!isNaN(newDepo)) {
        setDeposit(parseInt(msg.target.value, 10));
      } else {
        setDeposit(0)
      }
    } else {
      setDeposit(0)
    }
  }
  const onSubmit = (e) => {
    e.preventDefault();

    setButtonDisabled(true)
    setDeposit(0)
    setMessage("")
    setSending(true)
    // TODO: optimistically update page with new message,
    // update blockchain data in background
    // add uuid to each message, so we know which one is already known
    console.log("send message to contract")
    window.contract.set_greeting(
      {message: message, vote: likeMs},
      BOATLOAD_OF_GAS,
      Big(deposit || '0').times(10 ** 24).toFixed()
    ).then(() => {
      window.contract.get_greeting().then(messages => {
        console.log(`greeting from set_greeting`)
        if (messages && messages.length > 0) {
          set_greeting(messages)
        }
        setSending(false)
        setButtonDisabled(false)
      });
    }).catch(() => {
      alert(
        'Something went wrong! ' +
        'Maybe you need to sign out and back in? ' +
        'Check your browser console for more info.'
      )
      throw e
    });
  };

  return (
    // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
    <>
      <main>
        <h1>
          <label
            htmlFor="greeting"
            style={{
              color: 'var(--secondary)',
              borderBottom: '2px solid var(--secondary)'
            }}
          >
          </label>
          {' '/* React trims whitespace around tags; insert literal space character when needed */}
          {/*{window.accountId}!*/}
        </h1>
        <form onSubmit={async event => {

          try {
            // make an update call to the smart contract
            await window.contract.set_greeting({
              // pass the value that the user entered in the greeting field
              message: newGreeting
            })
          } catch (e) {
            alert(
              'Something went wrong! ' +
              'Maybe you need to sign out and back in? ' +
              'Check your browser console for more info.'
            )
            throw e
          } finally {
            // re-enable the form, whether the call succeeded or failed
            fieldset.disabled = false
          }

          // update local `greeting` variable to match persisted value
          set_greeting(newGreeting)

          // show Notification
          setShowNotification(true)

          // remove Notification again after css animation completes
          // this allows it to be shown again next time the form is submitted
          setTimeout(() => {
            setShowNotification(false)
          }, 11000)
        }}>
        </form>
        <Stack tokens={{childrenGap: 20}}>
          <Stack.Item align="center" styles={stackItemStyles}>
            <PrimaryButton text="Sign out" onClick={logout} allowDisabledFocus/>
          </Stack.Item>
          <Stack.Item align="center">
            <Toggle label="I like minimalistic Microsoft Fluent UI" defaultChecked onText="On" offText="Off"
                    onChange={toggleMs}/>
          </Stack.Item>
          <Stack.Item align="center">
            <TextField label={"Sign the guest book: " + window.accountId}
                       prefix={"message"} value={message} onChange={(msg) => handleMsgChange(msg)}/>
          </Stack.Item>
          <Stack.Item align="center">
            <TextField label={"Donation optional"}
                       value={deposit}
                       prefix={"Near: "} onChange={(msg) => {
              handleDonationChange(msg)
            }}/>
          </Stack.Item>
          {!isSending && <Stack.Item align="center" styles={stackItemStyles}>
            <PrimaryButton text="Sign" disabled={buttonDisabled} onClick={onSubmit} allowDisabledFocus/>
          </Stack.Item>}
          {isSending && <Stack.Item align="center">
            <Spinner label="Transaction sending ..." ariaLive="assertive" labelPosition="right"/>
          </Stack.Item>}
          <Stack.Item align="center">
            <Text variant={'xxLarge'} block>
              Messages
            </Text>
          </Stack.Item>
          {greeting && greeting.length > 0 && greeting.map((value, index) => <Stack.Item key={index} align="start"
                                                                                         tokens={{childrenGap: 20}}>
            <Persona text={value.account_id}
                     imageUrl={value.is_premium && TestImages.iconOne}
                     imageInitial='MS'
                     secondaryText={value.like_ms
                       ? `${value.message} like MS Fluen UI`
                       : `${value.message} don't like MS Fluen UI`
                     }
                     size={PersonaSize.size48}/>
          </Stack.Item>)}
        </Stack>

      </main>
      {showNotification && <Notification/>}
    </>
  )
}

// this component gets rendered by App after the form is submitted
function Notification() {
  const urlPrefix = `https://explorer.${networkId}.near.org/accounts`
  return (
    <aside>
      <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.accountId}`}>
        {window.accountId}
      </a>
      {' '/* React trims whitespace around tags; insert literal space character when needed */}
      called method: 'set_greeting' in contract:
      {' '}
      <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.contract.contractId}`}>
        {window.contract.contractId}
      </a>
      <footer>
        <div>âœ” Succeeded</div>
        <div>Just now</div>
      </footer>
    </aside>
  )
}

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/config.js ---
// const CONTRACT_NAME = process.env.CONTRACT_NAME ||'guest-book'
const CONTRACT_NAME = 'guest-book.3ugen.testnet'

function getConfig(env) {
  console.log(`getConfig env: ${env}`)
  env = 'testnet'
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
    <script src="App.js"></script>
    <script src="index.js"></script>
    <script src="utils.js"></script>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_greeting'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['set_greeting'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''