*GitHub Repository "nativeanish/cloth-market"*

'''--- README.md ---
# cloth-market
cloth-market
This Project is cloth marketplace dapp built upon near blockchain for buying and selling clothes.
https://near-cloth.netlify.app/

'''
'''--- package.json ---
{
  "name": "cloth-market",
  "version": "1.0.0",
  "license": "MIT",
  "devDependencies": {
    "@types/big.js": "^6.1.3",
    "@types/node": "^17.0.31",
    "@types/react": "^18.0.9",
    "@types/react-dom": "^18.0.3",
    "buffer": "^6.0.3",
    "parcel": "^2.5.0",
    "process": "^0.11.10",
    "typescript": "^4.6.4"
  },
  "dependencies": {
    "big.js": "^6.1.1",
    "near-api-js": "^0.44.2",
    "react": "^18.1.0",
    "react-bootstrap": "^2.3.1",
    "react-dom": "^18.1.0",
    "react-toastify": "^9.0.1"
  },
  "scripts": {
    "start": "npx parcel public/index.html",
    "build": "npx parcel build public/index.html"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Cloth Shop" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
      crossorigin="anonymous"
    ></script>

    <title>Cloth Shop</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="mountNode"></div>
    <script src="./index.tsx" type="module"></script>
  </body>
</html>

'''
'''--- smartcontract/Cargo.toml ---
[package]
name = "cloth_market"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
near-sdk = "3.1.0"

[lib]
crate-type = ["cdylib"]

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

'''
'''--- smartcontract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};

#[derive(BorshDeserialize, BorshSerialize)]
struct Clothe {
    name: String,
    image: String,
    price: u8,
    quantity: u8,
    vendor: AccountId,
}

impl Clothe {
    pub fn new(name: String, image: String, price: u8, quantity: u8, vendor: AccountId) -> Self {
        Self {
            name,
            image,
            price,
            quantity,
            vendor,
        }
    }
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Marketplace {
    item: UnorderedMap<u64, Clothe>,
    buyer: UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl Marketplace {
    pub fn addclothe(&mut self, name: String, image: String, price: String, quantity: String) {
        let index: u64 = self.item.len() + 1;
        self.item.insert(
            &index,
            &Clothe::new(
                name,
                image,
                price.parse::<u8>().unwrap(),
                quantity.parse::<u8>().unwrap(),
                env::signer_account_id(),
            ),
        );
    }

    pub fn getclothe(&self, id: String) -> (String, String, String, String, String, Vec<String>) {
        let index: u64 = id.parse::<u64>().unwrap();

        let clothe: Clothe = self.item.get(&index).unwrap();
        (
            clothe.name,
            clothe.image,
            clothe.price.to_string(),
            clothe.quantity.to_string(),
            clothe.vendor,
            self.buyer_list(id.parse::<u64>().unwrap()),
        )
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut k: Vec<String> = vec![];
            for g in i.iter() {
                k.push(g);
            }
            return k;
        }
        return Vec::<String>::new();
    }

    pub fn getclothes(&self) -> Vec<(String, String, String, String, String, Vec<String>)> {
        let mut dec: Vec<(String, String, String, String, String, Vec<String>)> = vec![];
        for g in 1..=self.item.len() {
            dec.push(self.getclothe(g.to_string()));
        }
        dec
    }

    #[payable]
    pub fn buy(&mut self, id: String) {
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let dec = self.item.get(&id.parse::<u64>().unwrap()).unwrap();
        if (dec.price as u128) * amount <= (env::attached_deposit()) {
            let buyer_l = self.buyer_list(id.parse::<u64>().unwrap());
            if (buyer_l.len() + 1) as u8 > dec.quantity {
                env::panic(b"Stock is cleared Now");
            } else {
                Promise::new(dec.vendor).transfer(env::attached_deposit());
                let mut de: Vector<AccountId> = Vector::new(b'o');
                for g in buyer_l {
                    de.push(&g);
                }
                de.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &de);
            }
        } else {
            env::panic(b"Amount was less");
        }
    }
}

impl Default for Marketplace {
    fn default() -> Self {
        Self {
            item: UnorderedMap::<u64, Clothe>::new(b'i'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'o'),
        }
    }
}

//Test
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};
    fn get_context(predecessor_account_id: String, storage_usage: u64) -> VMContext {
        VMContext {
            current_account_id: "marketplace.near".to_string(),
            signer_account_id: "anish.testnet".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id,
            input: vec![],
            block_index: 0,
            block_timestamp: 0,
            account_balance: 200,
            account_locked_balance: 0,
            storage_usage,
            attached_deposit: 10,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view: false,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    #[test]
    fn addingcloth() {
        let context = get_context("anish.testnet".to_string(), 0);
        testing_env!(context);
        let mut contract = Marketplace::default();
        contract.addclothe(
            "socks".to_string(),
            "image of socks".to_string(),
            "2".to_string(),
            "2".to_string(),
        );
        assert_eq!(
            contract.getclothe("1".to_string()),
            (
                "socks".to_string(),
                "image of socks".to_string(),
                "2".to_string(),
                "2".to_string(),
                "anish.testnet".to_string(),
                Vec::<String>::new()
            )
        )
    }
    #[test]
    fn gettingallcloth() {
        let context = get_context("anish.testnet".to_string(), 0);
        testing_env!(context);
        let mut contract = Marketplace::default();
        contract.addclothe(
            "socks".to_string(),
            "image of socks".to_string(),
            "2".to_string(),
            "2".to_string(),
        );
        contract.addclothe(
            "jeans".to_string(),
            "image of jeans".to_string(),
            "6".to_string(),
            "3".to_string(),
        );
        assert_eq!(
            contract.getclothes(),
            [
                (
                    "socks".to_string(),
                    "image of socks".to_string(),
                    "2".to_string(),
                    "2".to_string(),
                    "anish.testnet".to_string(),
                    Vec::<String>::new()
                ),
                (
                    "jeans".to_string(),
                    "image of jeans".to_string(),
                    "6".to_string(),
                    "3".to_string(),
                    "anish.testnet".to_string(),
                    Vec::<String>::new()
                )
            ]
        )
    }
}

'''
'''--- src/util/config.ts ---
const CONTRACT_NAME = "cloth-market.testnet";

export const env = {
  networkId: "testnet",
  nodeUrl: "https://rpc.testnet.near.org",
  contractName: CONTRACT_NAME,
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
};

'''
'''--- src/util/marketplace.ts ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { Big } from "big.js";
const GAS = Big(3)
  .times(10 ** 13)
  .toFixed();
export function addclothe(product: {
  name: string;
  image: string;
  price: number;
  quantity: number;
}) {
  //@ts-ignore
  return window.contract.addclothe({
    name: product.name.toString(),
    image: product.image.toString(),
    price: product.price.toString(),
    quantity: product.quantity.toString(),
  });
}

export function getclothes() {
  //@ts-ignore
  return window.contract.getclothes();
}

export async function buy_clothe({ id, price }: { id: number; price: number }) {
  //@ts-ignore
  price = parseNearAmount(price.toString() + "");
  //@ts-ignore
  await window.contract.buy({ id: id.toString() }, GAS, price);
}

'''
'''--- src/util/near.ts ---
import { env } from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = env;

export async function initializeContract() {
  const near = await connect(
    //@ts-ignore
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearEnv
    )
  );

  //@ts-ignore
  window.walletConnection = new WalletConnection(near);
  //@ts-ignore
  window.walletConnection = new WalletConnection(near);
  //@ts-ignore
  window.accountId = window.walletConnection.getAccountId();
  //@ts-ignore
  window.contract = new Contract(
    //@ts-ignore
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      // List here all view methods
      viewMethods: ["getclothes", "getclothe"],
      // List call methods that change state
      changeMethods: ["buy", "addclothe"],
    }
  );
}

export async function accountBalance() {
  return formatNearAmount(
    //@ts-ignore
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  //@ts-ignore
  return window.walletConnection.getAccountId();
}

export function login() {
  //@ts-ignore
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  //@ts-ignore
  window.walletConnection.signOut();
  window.location.reload();
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"]
}

'''