*GitHub Repository "mahmudsudo/react_for_near"*

'''--- .idea/modules.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/fungible_frontend_react.iml" filepath="$PROJECT_DIR$/.idea/fungible_frontend_react.iml" />
    </modules>
  </component>
</project>
'''
'''--- .idea/vcs.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="" vcs="Git" />
  </component>
</project>
'''
'''--- README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- package.json ---
{
  "name": "chinedu_two",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "CI= react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="https://cdn.jsdelivr.net/npm/near-api-js@0.44.2/dist/near-api-js.min.js"></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
*{
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

#container{
  background-color: antiquewhite;
  padding: 40px;
  display: flex;
  align-items: center;
  width: 100vw;
  justify-content: center;
  height: 100vh;
  flex-direction: column;
}

.def{
  display: flex;
  align-items: center;
  margin-bottom: 5px;
  margin-top: 5px;
}

.def h3 {
  background-color: aliceblue;
  padding: 5px;
  text-transform: capitalize;
}

.def p{
  background-color: #fff;
  margin-left: 10px;
  padding: 5px;
}

.mint{
  margin-bottom: 10px;
  margin-top: 10px;
}

.mint input{
  padding: 5px;

}

.mint button {
  padding: 5px;
  text-transform: capitalize;
  margin-left: 10px;
}

.out button{
  padding: 5px;
  font-size: 25px;
}

.transfr{
  margin-top: 40px;
}

.transfr input{
  padding: 5px;
  margin-bottom: 4px;
}

.transfr button{
  padding: 4px;
  font-size: 20px;
}
'''
'''--- src/App.js ---
import { React, useState, useEffect } from 'react';

import { login, logout, balances, isLogging, getAccount, total_supply, your_token_bal, mint_token, burn_token, tranfer_token} from "./utils";

import './App.css';

function App() {

  let [myAcc, setMyAcc] = useState('');

  let [myNearBal, setMyNearBal] = useState('');

  let [tokenTotalsupply, setTokenTotalSupply] = useState('');

  let [yuortokenbal, setYourTokenBal] = useState('');

  let [mintInput, setMintInput] = useState('');

  let [burnInput, setBurnInput] = useState('');

  let [transferamout, setTransferamount] = useState('');

  let [transferusername, setTramsferusername] = useState('');

  

  // for logout ::::::::::::::::
  let out = () => {
    logout();
    window.location.reload();
  }

  // for signing :::::::::::::::
  
  let inside = () => {
    login()
  }
  
  

  // for get balance :::::::::::::::::
  let getbalance = async() => {
  
    let res = await balances();

    let available = res.available / (10**24);

    let realAvi = available.toFixed(5);
  
    //console.log(realAvi);

    setMyNearBal(realAvi);
  
  }

  // for get account or user namr ::::::::::

  let getusername = () => {

    let resAcc= getAccount();

    setMyAcc(resAcc);

  }

  // for get total supply token ::::::::::

  let get_total_supply = async () => {

    let ress = await total_supply();

    //console.log(ress);

    setTokenTotalSupply(ress)
  }

  // for your token balanc
  let get_your_token_bal = async() => {

    let tokenbal = await your_token_bal();

    //console.log(tokenbal);

    setYourTokenBal(tokenbal);
  }

  // for minting of token

  let minting_token = async () => {
    let mintvalue = parseInt(mintInput);

    let mintedToken = await mint_token(mintvalue);

    let result = `${mintedToken}WAL was minted`;
    
    alert(result);
    window.location.reload();
  }

  // for burning of token 

  let burning_token = async () => {

    let burnvale = parseInt(burnInput);

    let burned = await burn_token(burnvale);

    let result = `${burned}WAL was burned`;

    alert(result);
    window.location.reload();
  }

  // for transfer of money 

  let transfering_token = async () => {

    let transvalue = transferamout;

    let transuser = transferusername.toString();

    let transfered = await tranfer_token(transuser, transvalue);
    
    //console.log(transfered);

    let result = `${transfered}WAL was transfered to ${transuser}`;

    alert(result);
    window.location.reload();
  }

  

  useEffect(() => {

    getusername();
    getbalance();
    get_total_supply();
    get_your_token_bal();

  }, [inside])

  if (!isLogging()) {
    
    return(
      <>
        <section id='container'>

          <div className='out'>
            <button onClick={() => inside() }>login</button>
          </div>

        </section>
      
      </>
    )
  }
  return (
    <>
      <section id='container'>

        <h1>
          {"welcome".toUpperCase()} {myAcc}
        </h1>

        <div className='account'>
           <div className='def'>
              <h3>account:</h3>
              <p>{myAcc}</p>
           </div>

           <div className='def'>
              <h3>balance:</h3>
              <p>{myNearBal} NEAR</p>
           </div>
        </div>

        <div className='token'>
          
          <div className='def'>
              <h3>token total supply:</h3>
              <p>{tokenTotalsupply} MHT</p>
           </div>

           <div className='def'>
              <h3> your token balance:</h3>
              <p>{yuortokenbal} MHT</p>
           </div>

        </div>

        <div className='mint'>
            <input type="number" name="mint" id="mint"  value={mintInput} onChange={(e) => setMintInput(e.target.value)} placeholder="enter amount"/>
            <button onClick={() => minting_token() }>mint token</button>
        </div>

        <div className='mint'>
          <input type="number" name="burn" id="burn" value={burnInput} onChange={(e) => setBurnInput(e.target.value)} placeholder="enter amount"/>
          <button onClick={()=> burning_token()}>burn</button>
        </div>

        <div className='transfr'>
          <h3>transfer token</h3>
          <div>
            <input type="text" placeholder='user name' value={transferusername} onChange={(e) => setTramsferusername(e.target.value)}/>
          </div>

          <div>
            <input type="number" name="" id="" placeholder='enter amount' value={transferamout} onChange={(e) => setTransferamount(e.target.value)}/>
          </div>

          <button onClick={() => transfering_token()}>transfer</button>
        </div>

      </section>
      <div className='out'>
          <button onClick={() => out()}>logout</button>
        </div>
    </>
  );
}

export default App;

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/config.js ---
// Once you deploy the contract to its final account, make sure to specify it here

const keyStore = new window.nearApi.keyStores.BrowserLocalStorageKeyStore()

export const CONTRACT_NAME = 'fungibletoken.mahmudnear.testnet';

export function getConfig (env) {
  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        keyStore,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org'
      }
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        keyStore,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org'
      }
    
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

import { initContract } from "./utils";

const root = ReactDOM.createRoot(document.getElementById('root'));

window.nearInitPromise = initContract()
  .then(() => {
    
    root.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>
    )
    
  })
  .catch(console.error)

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/utils.js ---

import { CONTRACT_NAME, getConfig } from "./config";

const nearConfig = getConfig('development');

// Initialize contract & set global variables
export async function initContract () {
  // Initialize connection to the NEAR testnet
  window.walletConnection = new window.nearApi.WalletConnection(await window.nearApi.connect(nearConfig));
  window.contract =  new window.nearApi.Contract(
    await window.walletConnection.account(), 
    CONTRACT_NAME, {
    viewMethods: ['ft_total_supply', 'ft_balance_of'],
    changeMethods: ['burn', 'tranfer_money', 'mint'],
  })
}; 

export const isLogging = () => {
    return window.walletConnection.isSignedIn();
}

export const getAccount = () => {
    return window.walletConnection.getAccountId();
    
}
 
 export function logout() {

    if (isLogging()) {

        window.walletConnection.signOut();
        window.location.reload();
        // reload page
        //window.location.replace(window.location.origin + window.location.pathname)
        
    } else {

        alert('already logout');
        
    }
 
}

export async function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.

  if (!isLogging()) {
    window.walletConnection.requestSignIn(CONTRACT_NAME);
  } else {
    
    alert(`already login please as ${getAccount()}`);
  }

 
  
  
}

 export async function balances () {
    if (isLogging()) {

        //let nearConnection = await window.connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig));

        let nearConnection =await window.nearApi.connect(nearConfig);
        const account = await nearConnection.account(getAccount());
        let acc = await account.getAccountBalance();

        return acc;
        
    }
        
        return false;
  
    
  }

 export async function total_supply () {

    if (isLogging()) {

        const ress = await window.contract.ft_total_supply() ;

        return ress; 
        
    }else{

        return 0;
    }
  }

  export async function your_token_bal () {

    if (isLogging()) {

        let accc = await getAccount();

        const ress = await window.contract.ft_balance_of({
            account_id: accc
        }) ;

        return ress; 
        
    }else{

        return 0;
    }
  }

  export async function mint_token (amount) {
    if (isLogging()) {

        let mint_funct = await window.contract.mint({
            
            args:{amount}
        }) ;

        return mint_funct;

        
    } 
        
        return 0;
  
  }

  export async function burn_token (amount){

    if (isLogging()) {

        let burn_funct = await window.contract.burn({
            args:{amount}
        });

        return burn_funct;
        
    } 
        return 0;
    
  }

  export async function tranfer_token (user, amount) {

    if (isLogging()) {

      let transfer_func = await window.contract.tranfer_money(
        
        {
          reciever: user, 
          amount: amount
        
        },
        "300000000000000", // attached GAS (optional)
        "1"
      );

      return transfer_func;
      
    } 
      return 0;

  }

 

'''