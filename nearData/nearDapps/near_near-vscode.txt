*GitHub Repository "near/near-vscode"*

'''--- .eslintrc.json ---
{
    "root": true,
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module"
    },
    "plugins": [
        "@typescript-eslint"
    ],
    "rules": {
        "@typescript-eslint/naming-convention": "warn",
        "@typescript-eslint/semi": "warn",
        "curly": "warn",
        "eqeqeq": "warn",
        "no-throw-literal": "warn",
        "semi": "off"
    },
    "ignorePatterns": [
        "out",
        "dist",
        "**/*.d.ts"
    ]
}

'''
'''--- .github/ISSUE_TEMPLATE/BOUNTY.yml ---
name: "Simple Bounty"
description: "Use this template to create a HEROES Simple Bounty via Github bot"
title: "Bounty: "
labels: ["bounty"]
assignees: heroes-bot-test
body:
  - type: markdown
    attributes:
      value: |
        Hi! Let's set up your bounty! Please don't change the template - @heroes-bot-test won't be able to help you.

  - type: dropdown
    id: type
    attributes:
      label: What talent are you looking for?
      options:
        - Marketing
        - Development
        - Design
        - Other
        - Content
        - Research
        - Audit

  - type: textarea
    id: description
    attributes:
      label: What you need to be done?

  - type: dropdown
    id: tags
    attributes:
      label: Tags
      description: Add tags that match the topic of the work
      multiple: true
      options:
        - API
        - Blockchain
        - Community
        - CSS
        - DAO
        - dApp
        - DeFi
        - Design
        - Documentation
        - HTML
        - Javascript
        - NFT
        - React
        - Rust
        - Smart contract
        - Typescript
        - UI/UX
        - web3
        - Translation
        - Illustration
        - Branding
        - Copywriting
        - Blogging
        - Editing
        - Video Creation
        - Social Media
        - Graphic Design
        - Transcription
        - Product Design
        - Artificial Intelligence
        - Quality Assurance
        - Risk Assessment
        - Security Audit
        - Bug Bounty
        - Code Review
        - Blockchain Security
        - Smart Contract Testing
        - Penetration Testing
        - Vulnerability Assessment
        - BOS
        - News
        - Hackathon
        - NEARCON2023
        - NEARWEEK

  - type: input
    id: deadline
    attributes:
      label: Deadline
      description: "Set a deadline for your bounty. Please enter the date in format: DD.MM.YYYY"
      placeholder: "19.05.2027"

  - type: dropdown
    id: currencyType
    attributes:
      label: Currency
      description: What is the currency you want to pay?
      options:
        - USDC.e
        - USDT.e
        - DAI
        - wNEAR
        - USDt
        - XP
        - marmaj
        - NEKO
        - JUMP
        - USDC
        - NEARVIDIA
      default: 0
    validations:
      required: true

  - type: input
    id: currencyAmount
    attributes:
      label: Amount
      description: How much it will be cost?

  - type: markdown
    attributes:
      value: "## Advanced settings"

  - type: checkboxes
    id: kyc
    attributes:
      label: KYC
      description: "Use HEROES' KYC Verification, only applicants who passed HEROES' KYC can apply and work on this bounty!"
      options:
        - label: Use KYC Verification

  - type: markdown
    attributes:
      value: |
        ### This cannot be changed once the bounty is live!

'''
'''--- .idea/codeStyles/Project.xml ---
<component name="ProjectCodeStyleConfiguration">
  <code_scheme name="Project" version="173">
    <option name="OTHER_INDENT_OPTIONS">
      <value>
        <option name="INDENT_SIZE" value="2" />
        <option name="TAB_SIZE" value="2" />
      </value>
    </option>
    <DBN-PSQL>
      <case-options enabled="true">
        <option name="KEYWORD_CASE" value="lower" />
        <option name="FUNCTION_CASE" value="lower" />
        <option name="PARAMETER_CASE" value="lower" />
        <option name="DATATYPE_CASE" value="lower" />
        <option name="OBJECT_CASE" value="preserve" />
      </case-options>
      <formatting-settings enabled="false" />
    </DBN-PSQL>
    <DBN-SQL>
      <case-options enabled="true">
        <option name="KEYWORD_CASE" value="lower" />
        <option name="FUNCTION_CASE" value="lower" />
        <option name="PARAMETER_CASE" value="lower" />
        <option name="DATATYPE_CASE" value="lower" />
        <option name="OBJECT_CASE" value="preserve" />
      </case-options>
      <formatting-settings enabled="false">
        <option name="STATEMENT_SPACING" value="one_line" />
        <option name="CLAUSE_CHOP_DOWN" value="chop_down_if_statement_long" />
        <option name="ITERATION_ELEMENTS_WRAPPING" value="chop_down_if_not_single" />
      </formatting-settings>
    </DBN-SQL>
    <JSCodeStyleSettings version="0">
      <option name="USE_DOUBLE_QUOTES" value="false" />
      <option name="SPACES_WITHIN_OBJECT_LITERAL_BRACES" value="true" />
    </JSCodeStyleSettings>
    <ScalaCodeStyleSettings>
      <option name="MULTILINE_STRING_CLOSING_QUOTES_ON_NEW_LINE" value="true" />
    </ScalaCodeStyleSettings>
    <TypeScriptCodeStyleSettings version="0">
      <option name="USE_DOUBLE_QUOTES" value="false" />
    </TypeScriptCodeStyleSettings>
    <editorconfig>
      <option name="ENABLED" value="false" />
    </editorconfig>
    <codeStyleSettings language="JavaScript">
      <option name="SPACE_AROUND_UNARY_OPERATOR" value="true" />
      <option name="SPACE_BEFORE_METHOD_PARENTHESES" value="true" />
      <option name="IF_BRACE_FORCE" value="3" />
      <option name="DOWHILE_BRACE_FORCE" value="3" />
      <option name="WHILE_BRACE_FORCE" value="3" />
      <option name="FOR_BRACE_FORCE" value="3" />
      <indentOptions>
        <option name="INDENT_SIZE" value="2" />
        <option name="CONTINUATION_INDENT_SIZE" value="2" />
        <option name="TAB_SIZE" value="2" />
      </indentOptions>
    </codeStyleSettings>
    <codeStyleSettings language="PHP">
      <indentOptions>
        <option name="KEEP_INDENTS_ON_EMPTY_LINES" value="true" />
      </indentOptions>
    </codeStyleSettings>
    <codeStyleSettings language="TypeScript">
      <option name="IF_BRACE_FORCE" value="3" />
      <option name="DOWHILE_BRACE_FORCE" value="3" />
      <option name="WHILE_BRACE_FORCE" value="3" />
      <option name="FOR_BRACE_FORCE" value="3" />
      <indentOptions>
        <option name="INDENT_SIZE" value="2" />
        <option name="CONTINUATION_INDENT_SIZE" value="2" />
        <option name="TAB_SIZE" value="2" />
      </indentOptions>
    </codeStyleSettings>
    <codeStyleSettings language="XML">
      <indentOptions>
        <option name="INDENT_SIZE" value="2" />
        <option name="CONTINUATION_INDENT_SIZE" value="4" />
        <option name="TAB_SIZE" value="2" />
      </indentOptions>
    </codeStyleSettings>
  </code_scheme>
</component>
'''
'''--- .idea/codeStyles/codeStyleConfig.xml ---
<component name="ProjectCodeStyleConfiguration">
  <state>
    <option name="USE_PER_PROJECT_SETTINGS" value="true" />
  </state>
</component>
'''
'''--- .idea/inspectionProfiles/Project_Default.xml ---
<component name="InspectionProjectProfileManager">
  <profile version="1.0">
    <option name="myName" value="Project Default" />
    <inspection_tool class="Eslint" enabled="true" level="WARNING" enabled_by_default="true" />
  </profile>
</component>
'''
'''--- .idea/misc.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ComposerSettings">
    <execution />
  </component>
  <component name="KubernetesApiPersistence">
    <option name="context" value="minikube" />
    <option name="namespace" value="telepresence" />
  </component>
  <component name="ProjectRootManager">
    <output url="file://$PROJECT_DIR$/out" />
  </component>
</project>
'''
'''--- .idea/modules.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/vsnear1.iml" filepath="$PROJECT_DIR$/.idea/vsnear1.iml" />
    </modules>
  </component>
</project>
'''
'''--- .idea/vcs.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="" vcs="Git" />
  </component>
</project>
'''
'''--- .vscode/extensions.json ---
{
	// See http://go.microsoft.com/fwlink/?LinkId=827846
	// for the documentation about the extensions.json format
	"recommendations": [
		"dbaeumer.vscode-eslint"
	]
}

'''
'''--- .vscode/launch.json ---
// A launch configuration that compiles the extension and then opens it inside a new window
// Use IntelliSense to learn about possible attributes.
// Hover to view descriptions of existing attributes.
// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Run Extension",
      "type": "extensionHost",
      "request": "launch",
      "args": ["--extensionDevelopmentPath=${workspaceFolder}"],
      "outFiles": ["${workspaceFolder}/out/**/*.js"],
      "preLaunchTask": "${defaultBuildTask}",
      "resolveSourceMapLocations": [
        "${workspaceFolder}/**",
        "!**/node_modules/**"
      ]
    },
    {
      "name": "Extension Tests",
      "type": "extensionHost",
      "request": "launch",
      "args": [
        "--extensionDevelopmentPath=${workspaceFolder}",
        "--extensionTestsPath=${workspaceFolder}/out/test/suite/index"
      ],
      "outFiles": ["${workspaceFolder}/out/test/**/*.js"],
      "preLaunchTask": "${defaultBuildTask}"
    }
  ]
}

'''
'''--- .vscode/settings.json ---
// Place your settings in this file to overwrite default and user settings.
{
    "files.exclude": {
        "out": false // set this to true to hide the "out" folder with the compiled JS files
    },
    "search.exclude": {
        "out": true // set this to false to include "out" folder in search results
    },
    // Turn off tsc task auto detection since we have the necessary tasks as npm scripts
    "typescript.tsc.autoDetect": "off"
}
'''
'''--- .vscode/tasks.json ---
// See https://go.microsoft.com/fwlink/?LinkId=733558
// for the documentation about the tasks.json format
{
	"version": "2.0.0",
	"tasks": [
		{
			"type": "npm",
			"script": "watch",
			"problemMatcher": "$tsc-watch",
			"isBackground": true,
			"presentation": {
				"reveal": "never"
			},
			"group": {
				"kind": "build",
				"isDefault": true
			}
		}
	]
}

'''
'''--- DESIGN.md ---
# Extension Design

We have created this file to help navigate the extension's code for those that want to contribute. VSCODE extensions are compose by multiple files, some defining UI, some defining logic. While we have made our best to use clear code patterns, it is understandable if a newcomer has a hard time navigating all the moving parts of this project (specially one not familiarized with writing vscode extension). 

We hope this file helps you find your way in helping us, and please feel free to contribute in any way to this particular guidelines, or any aspect of the project.

---

## Overview

The Discovery VSCODE extension is composed by 4 main actors, 5 commands and 1 callback handler.

![img](./readme/design.png)

#### Components
- `vscode` itself, composed by an editor, panels, and a UI.
- `socialdb`, the contract deployed at `social.near` storing widgets.
- A `local folder`, were the extension saves local work.
- A `webview`, a panel were the widget's code can be previewed.

#### Commands
- `initFs`: Asks the user to select a folder in their computer to use as local storage.
- `Load`: Given an `accountId`, populates the workspace with the account's widgets.
- `Login`: Redirects the user's to the NEAR Wallet to retrieve their username (no key is created).
- `Preview`: Renders the local code of the widget in the `webview`. 
- `Publish`: Takes the editor code and creates a transaction to call the `set` method in `social.near`  

#### Callback Handler
The commands `Login` and `Publish` open the web browser to interact with the NEAR wallet. After the interaction is done, the NEAR wallet calls back the vscode extension. The callback handler takes the response and acts upon it.

---

## General Knowledge

Writing an extension involves learning how `vscode` components are created and communicate with each other. Lets first review some general knowledge necessary to understand this extension.  

### Buttons to Commands
`vscode` makes you define the UI of your extension in the root's `package.json`. For example, this is how we configure a `Choose your folder` button on the welcome view, that triggers the `near.chooseLocalPath` command:

```json
{
  "contributes": {
    "commands": [
      {
        "command": "near.chooseLocalPath",
        "title": "Choose Widget Folder",
        "category": "NEAR.discovery"
      },
    ],
    "viewsWelcome": [
      {
        "view": "near-discovery",
        "contents": "[Choose your working folder](command:near.chooseLocalPath)",
        "when": "resourceScheme != near"
      },
    ]
  }
}
```

Then, in `./src/extension.ts` we register what happens when such command is triggered:

```js
  import { chooseLocalPath } from "./commands/init-fs";

  export function activate(context: vscode.ExtensionContext) {
    // ...
    context.subscriptions.push(
      vscode.commands.registerCommand("near.chooseLocalPath", async () => {
      chooseLocalPath(context, socialFS);
    })
    // ...
  );
```

---

## Our Filesystem

`vscode` allows you to create a customized `FileSystemProvider`, which basically serves to define:
- How a file should be read from the filesystem.
- How to write a file to the filesystem.
- How the files are organized.

In this extension, we deal solely with the problem of creating widgets, which could be found either locally (in the HDD) or remote (stored at social.near). Because of this, we decided to implement the filesystem in the following way.

#### Filesystem Structure
All files have an `uri` with the form: `near:://accountId/widgetName`. The files have a flag which indicates if the files are stored locally or remotely.

#### Start the Filesystem
When the user selects executes the [`initFs`](#init-fs) command, choosing a local folder, we first check if the folder has any widget and load it. We assume that the folders represent an `accountId` and the widgets are stored as `.jsx` files.

We then populate our FS, marking all the files as local. Notice that we do not read the files, since it is not necessary.

#### Load an AccountId
When an accountId is loaded through the [`load command`](#openaccountwidgets), we simply query `near.social` asking for the user's widgets, create a folder in our filesystem for the `accountId`, and create files for each `widgetName` marking them as `remote`.

Notice we fetch **only the widget names**, and not their content, since it is not necessary.

#### Read Files
If the file is present locally, we load its content from the HDD. If the file is remote, we make a `view` call to `near.social` to read its content.

#### Write Files
We take the content from the editor and write it locally. We mark the file as local in our FS. (TODO: Delete the file once it is published).

---

## Extension Commands

Here we provide a high level explanation of how each command works.

### Init-FS
The first thing a user needs to do is press the `Choose a folder` button in the Welcome Page. This will in turn execute `chooseLocalPath`, which will prompt the user to select a local folder in their computer.

Once the user selected a folder, the extension will store it in the `localStoragePath` variable, available globally across the extension. Then, we overwrite the `vscode.workspaceFolder`, setting it to our filesystem's root. This way, any interaction with the editor will invoke our filesystem.

**VERY Important**: Since this command changes the root `workspaceFolder`, when the user runs this command `vscode` resets. This is done automatically by `vscode`, since it needs to propagate the new root to all extensions.

---

## Preview
`vscode` enables to use a `webview` panel, in which web-applications can be displayed. Furthermore, `vscode` exposes methods to exchange messages with such `webview`.

In this extension, the web-app we use can be found in `./webview/app`, and it is a modified version of the [`Social Viewer`](https://github.com/NearSocial/viewer/tree/master). 

Before using it, you need to enter in `./webview/app` and run `yarn && yarn build`, this will in turn create the `./webview/dist` folder, which is a compiled React Application, that the `vscode.webview` can directly load.
'''
'''--- LICENSE.md ---
MIT License

Copyright (c) 2023 devreal-ops

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

'''
'''--- README.md ---
# NEAR BOS IDE

Extension to help you develop [components](https://discovery.near-docs.io) in [NEAR BOS](https://near.org).

## Features
- Retrieve any component from BOS
- Change the code and preview the changes locally
- Publish directly to the NEAR Blockchain
- See the widget logs in the Debug Console

![Extension Overview](./readme/extension.jpeg)

## How to Use
After installing the widget, a new section named **`Near BOS`** will be added to the explorer. Choose a folder to start using it.

### Retrieve Widgets, Preview and Publish

![Preview](./readme/features.png)

Use the `Login & Fetch Widgets` to login into your NEAR account and fetch your widgets, or use the `Fetch Account Widgets` the widgets of any account in NEAR Social.

Use the explorer to open any file, and the `preview` button to preview your changes.

> The preview is not automatically reloaded, you will need to press the `preview` button again.

> The `console.log` can be found within the `OUTPUT` tab, in the `Widget` Channel.

Use the `publish` buttons to store the widget in Discovery.
'''
'''--- package.json ---
{
  "name": "near-discovery-ide",
  "displayName": "NEAR BOS IDE",
  "description": "Build a decentralized frontend in minutes. Known before as NEAR Social / Discovery",
  "version": "2.2.1",
  "publisher": "near-protocol",
  "icon": "readme/near-protocol-near-logo.png",
  "homepage": "https://github.com/near/near-vscode",
  "repository": {
    "type": "git",
    "url": "https://github.com/near/near-vscode"
  },
  "bugs": {
    "url": "https://github.com/near/near-vscode/issues",
    "email": "devrel-ops@near.org"
  },
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onFileSystem:near",
    "onWebviewPanel:viewType"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "near.login",
        "title": "Login",
        "category": "NEAR.discovery",
        "enablement": "BOS.enabled"
      },
      {
        "command": "near.openWidgetsFromAccount",
        "title": "View account in workspace",
        "enablement": "BOS.enabled",
        "category": "NEAR.discovery"
      },
      {
        "command": "near.publishWidget",
        "title": "Publish Widget",
        "category": "NEAR.discovery",
        "enablement": "BOS.enabled",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "near.showWidgetPreview",
        "title": "Show Widget Preview",
        "category": "NEAR.discovery",
        "enablement": "BOS.enabled",
        "icon": "$(preview)"
      }
    ],
    "resourceLabelFormatters": [
      {
        "scheme": "near",
        "formatting": {
          "label": "${path}",
          "separator": " / ",
          "workspaceSuffix": "NEAR",
          "workspaceTooltip": "Widget on mainnet"
        }
      }
    ],
    "viewsWelcome": [
      {
        "view": "near-discovery",
        "contents": "[Start BOS IDE](command:near.startIDE)",
        "when": "!BOS.enabled && BOS.canStart"
      },
      {
        "view": "near-discovery",
        "contents": "Please open a folder to start",
        "when": "!BOS.enabled && !BOS.canStart"
      },
      {
        "view": "near-discovery",
        "contents": "[Login & Fetch Widgets](command:near.login)",
        "when": "BOS.enabled"
      },
      {
        "view": "near-discovery",
        "contents": "[Fetch Account Widgets](command:near.openWidgetsFromAccount)",
        "when": "BOS.enabled"
      },
      {
        "view": "near-discovery",
        "contents": "[Add Access Key](command:near.addKey)",
        "when": "BOS.enabled"
      }
    ],
    "views": {
      "explorer": [
        {
          "id": "near-discovery",
          "name": "Near BOS"
        }
      ]
    },
    "menus": {
      "editor/title": [
        {
          "when": "BOS.enabled",
          "command": "near.showWidgetPreview",
          "group": "navigation"
        },
        {
          "when": "BOS.enabled",
          "command": "near.publishWidget",
          "group": "navigation"
        }
      ],
      "commandPalette": [
        {
          "command": "near.openWidgetsFromAccount"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run -S esbuild-base -- --minify",
    "esbuild-base": "rimraf out && esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
    "build": "npm run -S esbuild-base -- --sourcemap",
    "build:webview": "cd webview/app && npm run build",
    "watch": "tsc -watch -p ./",
    "fmt": "prettier --write \"src/**/*.ts\"&& npm run test -- --fix",
    "test": "eslint src --ext ts && tsc --noEmit"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.1",
    "@types/glob": "^8.0.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@types/react-dom": "^18.0.11",
    "@types/vscode": "^1.74.0",
    "@typescript-eslint/eslint-plugin": "^5.45.0",
    "@typescript-eslint/parser": "^5.45.0",
    "@vscode/test-electron": "^2.2.0",
    "esbuild": "^0.17.10",
    "eslint": "^8.28.0",
    "glob": "^8.0.3",
    "mocha": "^10.1.0",
    "react-dom": "^18.2.0",
    "typescript": "^4.9.3",
    "rewire": "^6.0.0",
    "react-scripts": "^5.0.1"
  },
  "dependencies": {
    "@types/lodash": "^4.14.191",
    "lodash": "^4.17.21",
    "near-api-js": "^1.1.0",
    "react": "^18.2.0"
  }
}

'''
'''--- src/commands/add-key.ts ---
import * as vscode from 'vscode';
import { APP_NAME } from '../config';
import { KeyPair } from 'near-api-js';
import { addToContext, getFromContext } from '../extension';

export const addKeyForContract = async (context: vscode.ExtensionContext, localWorkspace: string) => {
  const contractId = await vscode.window.showInputBox({ placeHolder: 'Which contract do you want to call?' });
  const accountId = getFromContext(localWorkspace, "accountId");
  
  if(!accountId){
    return vscode.window.showErrorMessage('Please login first');
  }

  if (contractId) {
    const publisher = context.extension.packageJSON.publisher;
    const name = context.extension.packageJSON.name;
    const callback = `${vscode.env.uriScheme}://${publisher}.${name}`;

    // Create a private key to interact with the social contract
    const keyPair = KeyPair.fromRandom("ED25519");
    const publicKey = keyPair.getPublicKey().toString();

    // Save the private access key in context.json 
    await addToContext(localWorkspace, 'accessKey', keyPair.toString());

    context.globalState.update('addKeyForContract', true);

    // Create the login URL and redirect the user to login
    const networkId = await getFromContext(localWorkspace, 'networkId') || "mainnet";

    const prefixUrl = networkId === 'testnet' ? 'testnet' : 'app';
    let url = `https://${prefixUrl}.mynearapp.com/login/?title=${APP_NAME}&success_url=${callback}&contract_id=${contractId}&public_key=${publicKey}&account_id=${accountId}`;
    vscode.env.openExternal(vscode.Uri.parse(url));
  } else {
    vscode.window.showErrorMessage('Invalid Contract ID');
  }
};
'''
'''--- src/commands/callbacks.ts ---
import * as vscode from 'vscode';
import { getTransactionStatus } from '../modules/social';
import { addToContext, getFromContext } from '../extension';

export const handleTransactionCallback = async (uri: vscode.Uri, context: vscode.ExtensionContext, localWorkspace: string | undefined) => {
  const queryParams = new URLSearchParams(uri.query);
  const networkId = await getFromContext(localWorkspace, 'networkId') || "mainnet";

  // Transaction callback
  if (queryParams.has('transactionHashes')) {
    const tHash = queryParams.get('transactionHashes') as string;

    const result = await getTransactionStatus(tHash, networkId);
    const explorerURL = `https://nearblocks.io/txns/${tHash}`;
    const action = (selection?: string) => { selection ? vscode.env.openExternal(vscode.Uri.parse(explorerURL)) : ""; };

    if (result.succeeded) {
      vscode.window.showInformationMessage("Successfully Published", "View in Explorer")
        .then(action);
    } else {
      vscode.window.showErrorMessage(`Error: ${result.error}`, "View in Explorer")
        .then(action);
    }

    return;
  }

  // Passing an AccountID
  if (queryParams.has('account_id')) {
    const accountId = queryParams.get('account_id') as string;

    await addToContext(localWorkspace, 'accountId', accountId);

    if(context.globalState.get('addKeyForContract') === true){
      context.globalState.update('addKeyForContract', false);
      vscode.window.showInformationMessage(`Successfully added key for account ${accountId}`);
      return;
    }

    if (localWorkspace) {
      vscode.commands.executeCommand("near.openWidgetsFromAccount", accountId);
    }
  }
};
'''
'''--- src/commands/load.ts ---
import path from 'path';
import * as vscode from 'vscode';

import * as social from '../modules/social';
import { getFromContext } from '../extension';

export const openAccountWidgets = async (localWorkspace:string, accountId?: string) => {
  accountId = accountId || await vscode.window.showInputBox({ placeHolder: 'Mainnet AccountId [e.g. alice.near]' });

  const networkId = await getFromContext(localWorkspace, 'networkId') || "mainnet";

  if (accountId) {
    vscode.window.showInformationMessage(`Loading widgets for: ${accountId}`);

    const widgetNames = await social.getWidgetsNames(accountId, networkId);

    if (!widgetNames.length) {
      return vscode.window.showErrorMessage('No widgets found');
    }

    vscode.workspace.fs.createDirectory(vscode.Uri.parse(path.join(localWorkspace, accountId)));

    for (const name of widgetNames) {
      let dir = path.join(localWorkspace, accountId);
      let file = name.split('.');

      // separate `a.widget.name` into `/a/widget/name.jsx`
      while (file.length > 1) {
        dir = path.join(dir, file[0]);
        file = file.slice(1);
        vscode.workspace.fs.createDirectory(vscode.Uri.parse(dir));
      }

      const widgetCode = await social.getWidgetCode(accountId, name, networkId);
      vscode.workspace.fs.writeFile(vscode.Uri.parse(path.join(dir, `${file[0]}.jsx`)), Buffer.from(widgetCode));
    }
  } else {
    vscode.window.showErrorMessage('Invalid Account ID');
  }
};

'''
'''--- src/commands/login.ts ---
import * as vscode from 'vscode';
import { APP_NAME, contractAccountForNetwork } from '../config';
import { KeyPair } from 'near-api-js';
import { addToContext, getFromContext } from '../extension';

export const loginAccount = async (context: vscode.ExtensionContext, localWorkspace: string) => {
  const publisher = context.extension.packageJSON.publisher;
  const name = context.extension.packageJSON.name;
  const callback = `${vscode.env.uriScheme}://${publisher}.${name}`;

  // Create a private key to interact with the social contract
  const keyPair = KeyPair.fromRandom("ED25519");
  const publicKey = keyPair.getPublicKey().toString();

  // Save the private access key in context.json 
  await addToContext(localWorkspace, 'accessKey', keyPair.toString());

  const networkId = await getFromContext(localWorkspace, 'networkId') || "mainnet";
  const contractId = contractAccountForNetwork(networkId);

  // Create the login URL and redirect the user to login
  const prefixUrl = networkId === 'testnet' ? 'testnet' : 'app';
  let url = `https://${prefixUrl}.mynearwallet.com/login/?title=${APP_NAME}&success_url=${callback}&contract_id=${contractId}&public_key=${publicKey}&methodNames=set`;
  vscode.env.openExternal(vscode.Uri.parse(url));
};
'''
'''--- src/commands/preview.ts ---
import * as vscode from "vscode";
import { WidgetPreviewPanel } from "../modules/preview-panel";

export function preview(previewPanel: WidgetPreviewPanel, log: vscode.OutputChannel) {
  previewPanel.createAndShowPanel(log);
  previewPanel.showActiveCode();
}
'''
'''--- src/commands/publish.ts ---
import * as vscode from 'vscode';
import { WIDGET_EXT } from '../config';
import { transactionForPublishingCode } from '../modules/social';
import path from 'path';
import { getFromContext } from '../extension';

export const publishCode = async (context: vscode.ExtensionContext, localWorkspace: string) => {
  // This will be called from an active panel
  const code: string = vscode.window.activeTextEditor?.document?.getText() || "";
  const uri: string = vscode.window.activeTextEditor?.document?.uri.path.toString() || "";
  const networkId = await getFromContext(localWorkspace, 'networkId') || "mainnet";

  const [accountId, ...widgetName] = path.relative(localWorkspace, uri).split('/');
  let transaction = await transactionForPublishingCode(accountId, widgetName.join('.').replace(WIDGET_EXT, ''), code, networkId);

  const publisher = context.extension.packageJSON.publisher;
  const name = context.extension.packageJSON.name;
  const callback = `${vscode.env.uriScheme}://${publisher}.${name}`;

  const prefixUrl = networkId === 'testnet' ? 'testnet' : 'app';
  const publishUrl = new URL('sign', `https://${prefixUrl}.mynearwallet.com/`);
  publishUrl.searchParams.set('transactions', transaction);
  publishUrl.searchParams.set('callbackUrl', callback);
  
  // @ts-ignore
  vscode.env.openExternal(publishUrl.href);
};
'''
'''--- src/commands/start-ide.ts ---
import * as vscode from "vscode";
import { defaultContext } from "../config";
import path from "path";
import * as fs from "fs";

export const startIDE = async (localWorkspace: string) => {
  vscode.commands.executeCommand('setContext', 'BOS.enabled', true);

  const files = ["props.json", "context.json", "flags.json"];
  const defaultValues = ["{}", JSON.stringify(defaultContext), `{"components":{}}`];

  for (let i = 0; i < files.length; i++) {
    const file = path.join(localWorkspace, files[i]);
    
    if (!fs.existsSync(file)) {
        fs.writeFileSync(file, defaultValues[i]);
    }
  }
};
'''
'''--- src/config.ts ---
import BN from "bn.js";

export const SOCIAL_FS_SCHEME = 'near';
export const SOCIAL_CONTRACT_ACCOUNT = 'social.near';
export const WIDGET_EXT = `.jsx`;
export const APP_NAME = 'vscode social';
export const COST_PER_BYTE = new BN("10000000000000000000");
export const DATA_OVERHEAD = 840; // 6 x https://github.com/NearSocial/VM/blob/d8eb1674cca9aa3350583d40b8a46a74dbbc4ac6/src/lib/data/utils.js#L182C31-L182C46
export const TGAS30 = new BN("30" + "0".repeat(12));

export function contractAccountForNetwork(network: string) {
    return network === "mainnet" ? "social.near" : "v1.social08.testnet";
}

export function networkRPC(network: string) {
    return network === "mainnet" ? "https://rpc.near.org" : "https://rpc.testnet.near.org";
}

export const defaultContext = {
    wrapperSrc: "near/widget/DIG.Theme",
    wrapperProps: {},
    networkId: "mainnet"
};
'''
'''--- src/extension.ts ---
import * as vscode from "vscode";
import * as path from "path";
import * as fs from "fs";
import { openAccountWidgets } from "./commands/load";
import { loginAccount } from "./commands/login";
import { publishCode } from "./commands/publish";
import { handleTransactionCallback } from "./commands/callbacks";
import { WidgetPreviewPanel } from "./modules/preview-panel";
import { preview } from "./commands/preview";
import { startIDE } from "./commands/start-ide";
import { updateAllFlags, updateFlags } from "./flags";
import { addKeyForContract } from "./commands/add-key";

let localWorkspace: string = "";
const FS = vscode.workspace.fs;

export function activate(context: vscode.ExtensionContext) {
  vscode.commands.executeCommand('setContext', 'BOS.enabled', false);
  vscode.commands.executeCommand('setContext', 'BOS.canStart', false);

  // auto start if the folder is already configured
  if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 0) {
    localWorkspace = vscode.workspace.workspaceFolders[0].uri.path;
    vscode.commands.executeCommand('setContext', 'BOS.canStart', true);

    const files = ["props.json", "context.json", "flags.json"];
    let allExist = true;
    for (const file of files) {
      allExist &&= fs.existsSync(path.join(localWorkspace, file));
    }

    allExist && updateAllFlags(localWorkspace);

    vscode.commands.executeCommand('setContext', 'BOS.enabled', allExist);
  }

  // Button to start BOS IDE
  context.subscriptions.push(
    vscode.commands.registerCommand("near.startIDE", () => startIDE(localWorkspace))
  );

  // Fetch Widgets by Account ID
  context.subscriptions.push(
    vscode.commands.registerCommand("near.openWidgetsFromAccount", (accountId?) => {
      openAccountWidgets(localWorkspace, accountId);
    })
  );

  // Login Account
  context.subscriptions.push(
    vscode.commands.registerCommand("near.login", () =>
      loginAccount(context, localWorkspace)
    )
  );

  // Login Account
  context.subscriptions.push(
    vscode.commands.registerCommand("near.addKey", () =>
      addKeyForContract(context, localWorkspace)
    )
  );

  // Preview Widget
  const previewPanel = new WidgetPreviewPanel(context, localWorkspace);
  const log = vscode.window.createOutputChannel("Widget");

  context.subscriptions.push(
    vscode.commands.registerCommand("near.showWidgetPreview", () => { preview(previewPanel, log); })
  );

  // Publish Code
  context.subscriptions.push(
    vscode.commands.registerCommand("near.publishWidget", () =>
      publishCode(context, localWorkspace)
    )
  );

  // Handle Callbacks (login, publish)
  context.subscriptions.push(
    vscode.window.registerUriHandler({
      handleUri: (uri) => handleTransactionCallback(uri, context, localWorkspace)
    })
  );

  // Watch for changes in the workspace and update flags
  const watcher = vscode.workspace.createFileSystemWatcher('**/*.jsx');

  watcher.onDidChange(async (document: vscode.Uri) => {
    updateFlags(localWorkspace, document);

    if(previewPanel.panel && previewPanel.panel.visible){
      preview(previewPanel, log);
    }
  });

  watcher.onDidDelete(async (document: vscode.Uri) => {
    updateFlags(localWorkspace, document, true);
  });
}

// This method is called when your extension is deactivated
export function deactivate() {
  vscode.commands.executeCommand('setContext', 'loadedStoragePath', false);
}

// aux
export async function addToContext(localWorkspace: string | undefined, key: string, value: string) {
  if (!localWorkspace) { return; }

  const contextUri = vscode.Uri.parse(path.join(localWorkspace, `context.json`));
  let data = await FS.readFile(contextUri);
  let contextData = JSON.parse(data?.toString() || "{}");
  contextData[key] = value;
  await FS.writeFile(contextUri, Buffer.from(JSON.stringify(contextData, null, 2)));
}

export async function getFromContext(localWorkspace: string | undefined, key: string): Promise<string | undefined> {
  if (!localWorkspace) { return; }

  const contextUri = vscode.Uri.parse(path.join(localWorkspace, `context.json`));
  let data = await FS.readFile(contextUri);
  let contextData = JSON.parse(data?.toString() || "{}");
  return key in contextData? contextData[key] : undefined;
}
'''
'''--- src/flags.ts ---
import * as vscode from "vscode";
import * as path from "path";
import { WIDGET_EXT } from "./config";

const FS = vscode.workspace.fs;

export async function updateAllFlags(localWorkspace: string) {
  let flagsData: { components: any } = { components: {} };

  const widgetUris = await vscode.workspace.findFiles(`**/*${WIDGET_EXT}`);

  for (const uri of widgetUris) {
    const [accountId, ...widgetName] = path.relative(localWorkspace, uri.path).split('/');
    const socialPath = uriToSocialPath(accountId, widgetName);

    const code = (await FS.readFile(uri)).toString();
    flagsData.components[socialPath] = { code };
  }

  const flagsUri = vscode.Uri.parse(path.join(localWorkspace, `flags.json`));
  await FS.writeFile(flagsUri, Buffer.from(JSON.stringify(flagsData, null, 2)));
}

export async function updateFlags(localWorkspace: string, uri: vscode.Uri, del: boolean = false) {
  if (!uri.path.endsWith(WIDGET_EXT)) { return; }

  const flagsUri = vscode.Uri.parse(path.join(localWorkspace, `flags.json`));
  let data = await FS.readFile(flagsUri);
  let flagsData = JSON.parse(data?.toString() || `{"components": {}}`);

  if (!("components" in flagsData)) { flagsData["components"] = {}; }

  const [accountId, ...widgetName] = path.relative(localWorkspace, uri.path).split('/');

  const socialPath = uriToSocialPath(accountId, widgetName);

  if (del) {
    if (socialPath in flagsData.components) {
      delete flagsData.components[socialPath];
    }
  } else {
    const code = (await FS.readFile(uri)).toString();
    flagsData.components[socialPath] = { code };
  }

  await FS.writeFile(flagsUri, Buffer.from(JSON.stringify(flagsData, null, 2)));
}

function uriToSocialPath(accountId: string, widgetName: string[]): string {
  return `${accountId}/widget/${widgetName.join('.').replace(WIDGET_EXT, '')}`;
}

'''
'''--- src/modules/preview-panel.ts ---
import * as fs from "fs";
import * as path from "path";
import * as vscode from "vscode";

const FS = vscode.workspace.fs;

export class WidgetPreviewPanel {
  panel: vscode.WebviewPanel | undefined;
  visible: boolean;
  localWorkspace: string;
  readonly context: vscode.ExtensionContext;

  constructor(context: vscode.ExtensionContext, localWorkspace: string) {
    this.context = context;
    this.visible = false;
    this.localWorkspace = localWorkspace;
  }

  private createNewPanel(log: vscode.OutputChannel) {
    this.panel = vscode.window.createWebviewPanel(
      "WidgetPreview",
      "Widget Preview",
      {
        viewColumn: vscode.ViewColumn.Beside,
        preserveFocus: true,
      },
      {
        enableScripts: true,   // Enable javascript in the webview
        localResourceRoots: [  // restrict which content the webview can load
          vscode.Uri.joinPath(this.context.extensionUri, "webview/dist")
        ],
      }
    );

    this.panel!.onDidDispose((e) => { this.visible = false; });

    this.panel.webview.onDidReceiveMessage(
      message => {
        switch (message.command) {
          case 'console.log':
            const msgs = message.data.map((arg: any) => JSON.stringify(arg));
            // drop first message
            msgs.shift();
            log.appendLine(`> ${msgs.join(' ')}`);
            return;
        }
      },
    );
  }

  public createAndShowPanel(log: vscode.OutputChannel) {
    if (!this.visible) { this.createNewPanel(log); }
    this.visible = true;

    // Get index.html and replace relative resource paths with the vscode relative ones
    const filePath: vscode.Uri = vscode.Uri.file(
      path.join(this.context.extensionPath, "webview/dist", "index.html")
    );
    let html = fs.readFileSync(filePath.fsPath, "utf8");

    const manifest = require(vscode.Uri.joinPath(this.context.extensionUri, 'webview/dist', 'manifest.json').path);

    // manifest is a dictionary {filename: hash-filename}
    for (const key in manifest) {
      const webviewPath = vscode.Uri.joinPath(this.context.extensionUri, "webview/dist", manifest[key]);
      html = html.replace(
        manifest[key],
        this.panel!.webview.asWebviewUri(webviewPath).toString()
      );
    }
    this.panel!.webview.html = html;
  };

  public async showActiveCode(forceUpdate = false) {
    let code = vscode.window.activeTextEditor?.document?.getText() || "";

    let localProps: { [key: string]: string } = {};
    for (const resource of ['props', 'context', 'flags']) {
      const uri = vscode.Uri.parse(path.join(this.localWorkspace, `${resource}.json`));
      const data = await FS.readFile(uri);
      let prop = JSON.parse(data.toString() || "{}");

      if ('components' in prop) { prop = prop['components']; };
      localProps[resource] = prop;
    }

    // // Get local widgets code
    // let redirectMap: { [key: string]: { [key: string]: string }; } = {};

    // const allLocalFiles = glob.sync(`**/*.jsx`, { cwd: this.localWorkspace });

    // for (const fPath of allLocalFiles) {
    //   const uri = vscode.Uri.parse(path.join(this.localWorkspace, fPath));
    //   const fcode = await FS.readFile(uri);
    //   const socialPath = uriToSocialPath(uri);
    //   redirectMap[socialPath] = { "code": fcode.toString() };
    // };

    this.panel?.webview.postMessage({
      command: "update-code",
      code: code,
      forceUpdate,
      widgetUri: "",
      ...localProps,
    });
  }
}
'''
'''--- src/modules/social.ts ---
import { providers, transactions } from "near-api-js";
import { window } from "vscode";
import { COST_PER_BYTE, DATA_OVERHEAD, SOCIAL_CONTRACT_ACCOUNT, TGAS30, contractAccountForNetwork, networkRPC } from "../config";
import BN from "bn.js";
import * as naj from "near-api-js";

export const getWidgetsNames = async (accountId: AccountId, networkId: string): Promise<string[]> => {
  const args = { keys: [`${accountId}/widget/*`] };
  let result = await socialViewMethod('keys', args, networkId);
  let retObj = JSON.parse(Buffer.from(result.result).toString());
  try {
    return Object.keys(retObj[accountId]["widget"]);
  } catch (e) {
    window.showErrorMessage(`Error loading widgets for ${accountId}`);
    return [];
  };
};

export const getWidgetCode = async (accountId: AccountId, widgetName: string, networkId: string): Promise<string> => {
  const args = { keys: [`${accountId}/widget/${widgetName}`] };
  let result = await socialViewMethod('get', args, networkId);
  let retObj = JSON.parse(Buffer.from(result.result).toString());

  try {
    return retObj[accountId]["widget"][widgetName];
  } catch (e) {
    window.showErrorMessage(`Error loading the code for ${accountId}/widget/${widgetName}`);
    return "";
  };
};

export const transactionForPublishingCode = async (accountId: AccountId, widgetName: string, code: string, networkId: string): Promise<string> => {
  // Data to store
  const update = `{"${accountId}": {"widget": {"${widgetName}": {"": ${JSON.stringify(code)}}}}}`;
  const data = { data: JSON.parse(update) };
  const contractId = contractAccountForNetwork(networkId);

  // To create a transaction, we need to fill the `publicKey` field, but that field is not used later
  const keyPair = naj.utils.KeyPairEd25519.fromRandom();
  const publicKey = keyPair.getPublicKey();

  // To create a transaction we need a recent block
  const provider = new providers.JsonRpcProvider({ url: networkRPC(networkId) });
  const block = await provider.block({ finality: 'final' });
  const blockHash = naj.utils.serialize.base_decode(block.header.hash);

  // Amount to pay, based on the size of the data we are storing
  const widgetCode = await getWidgetCode(accountId, widgetName, networkId);

  let amount;

  if (widgetCode.length > 0) {
    const diff = JSON.stringify(code).length - JSON.stringify(widgetCode).length;
    amount = diff > 0 ? new BN(diff).mul(COST_PER_BYTE) : new BN(0);
  } else {
    amount = new BN(JSON.stringify(data).length + DATA_OVERHEAD).mul(COST_PER_BYTE);
  }

  // Create the transaction
  const actions = [transactions.functionCall('set', data, TGAS30, amount)];
  const transaction = transactions.createTransaction(accountId, publicKey, contractId, 0, actions, blockHash);

  //@ts-ignore
  return transaction.encode().toString('base64');
};

// RPC Call
export const socialViewMethod = async (methodName: String, args: any, networkId: string): Promise<any> => {

  const contractId = contractAccountForNetwork(networkId);
  const provider = new providers.JsonRpcProvider({ url: networkRPC(networkId) });

  const promise = provider.query({
    request_type: 'call_function',
    account_id: contractId,
    method_name: methodName,
    args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
    finality: 'optimistic',
  });

  promise.catch(e => {
    window.showErrorMessage(`Error Querying NEAR Social: ${methodName}, ${args}`);
    return {};
  });
  return promise;
};

export const getTransactionStatus = async (txhash: string, networkId: string): Promise<TxStatus> => {

  // Retrieve transaction result from the network
  const provider = new providers.JsonRpcProvider({ url: networkRPC(networkId) });
  const transaction = await provider.txStatus(txhash, 'unnused');

  let status = new TxStatus();
  status.succeeded = Object.hasOwn(transaction.status as object, "SuccessValue");

  if (!status.succeeded) {
    //@ts-ignore
    const { Failure: { ActionError: { kind: { FunctionCallError: { ExecutionError: errorMessage } } } } } = transaction.status;
    status.error = errorMessage;
  }
  return status;
};

class TxStatus {
  succeeded: boolean = false;
  error: string = "";
}
'''
'''--- src/test/runTest.ts ---
import * as path from 'path';

import { runTests } from '@vscode/test-electron';

async function main() {
	try {
		// The folder containing the Extension Manifest package.json
		// Passed to `--extensionDevelopmentPath`
		const extensionDevelopmentPath = path.resolve(__dirname, '../../');

		// The path to test runner
		// Passed to --extensionTestsPath
		const extensionTestsPath = path.resolve(__dirname, './suite/index');

		// Download VS Code, unzip it and run the integration test
		await runTests({ extensionDevelopmentPath, extensionTestsPath });
	} catch (err) {
		console.error('Failed to run tests');
		process.exit(1);
	}
}

main();

'''
'''--- src/test/suite/extension.test.ts ---
import * as assert from 'assert';

// You can import and use all API from the 'vscode' module
// as well as import your extension to test it
import * as vscode from 'vscode';
// import * as myExtension from '../../extension';

suite('Extension Test Suite', () => {
	vscode.window.showInformationMessage('Start all tests.');

	test('Sample test', () => {
		assert.strictEqual(-1, [1, 2, 3].indexOf(5));
		assert.strictEqual(-1, [1, 2, 3].indexOf(0));
	});
});
'''
'''--- src/types.d.ts ---
declare type AccountId = string;
declare type WidgetName = string;
declare type WidgetFSName = string;
declare type WidgetUri = `${AccountId}/${WidgetName}`;
'''
'''--- tsconfig.json ---
{
	"compilerOptions": {
		"module": "commonjs",
		"target": "ES2020",
		"outDir": "out",
		"lib": [
			"ES2022"
		],
		"esModuleInterop": true,
		"sourceMap": true,
		"rootDir": "src",
		"strict": true   /* enable all strict type-checking options */
		/* Additional Checks */
		// "noImplicitReturns": true, /* Report error when not all code paths in function return a value. */
		// "noFallthroughCasesInSwitch": true, /* Report errors for fallthrough cases in switch statement. */
		// "noUnusedParameters": true,  /* Report errors on unused parameters. */
	},
	"include": ["src", "webview/dist"],
	"exclude": ["webview/app", "node_modules"]
}

'''
'''--- webview/app/README.md ---
# Browser

A framework for reusable components to render and modify SocialDB by Near Social.

## Setup & Development

Initialize repo:
```
yarn
```

Start development version:
```
yarn start
```

## Widget example

Profile view 

```jsx
let accountId = props.accountId || "eugenethedream";
let profile = socialGetr(`${accountId}/profile`);

(
  <div>
    <img src={profile.image.url}/>
    <span>{profile.name}</span> <span>(@{accountId})</span>
  </div>
);
```

Profile editor 

```jsx
let accountId = context.accountId;

if (!accountId) {
  return "Please sign in with NEAR wallet";
}

const profile = socialGetr(`${accountId}/profile`);

if (profile === null) {
  return "Loading";
}

initState({
  name: profile.name,
  url: profile.image.url,
});

const data = {
  profile: {
    name: state.name,
    image: {
      url: state.url,
    },
  },
};

return (
  <div>
    <div>account = {accountId}</div>
    <div>
      Name:
      <input type="text" value={state.name} />
    </div>
    <div>
      Image URL:
      <input type="text" value={state.url} />
    </div>
    <div>Preview</div>
    <div>
      <img src={state.url} alt="profile image" /> {state.name}
    </div>
    <div>
      <CommitButton data={data}>Save profile</CommitButton>
    </div>
  </div>
);

```

'''
'''--- webview/app/config/paths.js ---
const path = require("path");

const srcPath = path.resolve(__dirname, "../src");
const distPath = path.resolve(__dirname, "../dist");
const publicPath = path.resolve(__dirname, "../public");
const nodeModulesPath = path.resolve(__dirname, "../node_modules");

module.exports = {
  srcPath,
  distPath,
  publicPath,
  nodeModulesPath,
};

'''
'''--- webview/app/config/presets/loadPreset.js ---
const { merge } = require("webpack-merge");

const loadPresets = (env = { presets: [] }) => {
  const presets = env.presets || [];
  /** @type {string[]} */
  const mergedPresets = [].concat(...[presets]);
  const mergedConfigs = mergedPresets.map((presetName) =>
    require(`./webpack.${presetName}.js`)(env)
  );

  return merge({}, ...mergedConfigs);
};
module.exports = loadPresets;

'''
'''--- webview/app/config/presets/webpack.analyze.js ---
const WebpackBundleAnalyzer =
  require("webpack-bundle-analyzer").BundleAnalyzerPlugin;

module.exports = () => ({
  plugins: [new WebpackBundleAnalyzer()],
});

'''
'''--- webview/app/config/webpack.development.js ---
const path = require("path");
const { HotModuleReplacementPlugin } = require("webpack");

module.exports = () => ({
  devtool: false,
  module: {
    rules: [
      {
        test: /\.(scss|css)$/,
        use: [
          {
            // inject CSS to page
            loader: "style-loader",
          },
          {
            // translates CSS into CommonJS modules
            loader: "css-loader",
          },
          {
            // Run postcss actions
            loader: "postcss-loader",
            options: {
              // `postcssOptions` is needed for postcss 8.x;
              // if you use postcss 7.x skip the key
              postcssOptions: {
                // postcss plugins, can be exported to postcss.config.js
                plugins: function () {
                  return [require("autoprefixer")];
                },
              },
            },
          },
          {
            // compiles Sass to CSS
            loader: "sass-loader",
          },
        ],
      },
    ],
  },
  devServer: {
    open: true,
    static: path.resolve(__dirname, "../dist"),
    port: 3000,
    compress: true,
  },
  plugins: [new HotModuleReplacementPlugin()],
});

'''
'''--- webview/app/config/webpack.production.js ---
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const CssMinimizerPlugin = require("css-minimizer-webpack-plugin");
const path = require("path");

module.exports = () => {
  return {
    output: {
      path: path.resolve(__dirname, "../dist"),
      publicPath: "./",
      filename: "[name].[contenthash].bundle.js",
    },
    devtool: false,
    module: {
      rules: [
        // {
        //   test: /\.(css)$/,
        //   use: [MiniCssExtractPlugin.loader, "css-loader"],
        //   //   options: {
        //   //     sourceMap: false,
        //   //   },
        // },
        {
          test: /\.(scss|css)$/,
          use: [
            {
              // inject CSS to page
              loader: "style-loader",
            },
            {
              // translates CSS into CommonJS modules
              loader: "css-loader",
            },
            {
              // Run postcss actions
              loader: "postcss-loader",
              options: {
                // `postcssOptions` is needed for postcss 8.x;
                // if you use postcss 7.x skip the key
                postcssOptions: {
                  // postcss plugins, can be exported to postcss.config.js
                  plugins: function () {
                    return [require("autoprefixer")];
                  },
                },
              },
            },
            {
              // compiles Sass to CSS
              loader: "sass-loader",
            },
          ],
        },
      ],
    },
    plugins: [
      new MiniCssExtractPlugin({
        filename: "styles/[name].[contenthash].css",
        chunkFilename: "[id].css",
      }),
    ],
    optimization: {
      minimize: true,
      minimizer: [new CssMinimizerPlugin(), "..."],
      runtimeChunk: {
        name: "runtime",
      },
    },
    performance: {
      hints: false,
      maxEntrypointSize: 512000,
      maxAssetSize: 512000,
    },
  };
};

'''
'''--- webview/app/package.json ---
{
  "name": "frontend",
  "version": "0.9.1",
  "homepage": "/",
  "private": true,
  "dependencies": {
    "big.js": "^6.1.1",
    "bn.js": "^5.1.1",
    "bootstrap": "^5.2.1",
    "bootstrap-icons": "^1.9.0",
    "collections": "^5.1.12",
    "error-polyfill": "^0.1.2",
    "https": "^1.0.0",
    "local-storage": "^2.0.0",
    "near-api-js": "^1.1.0",
    "near-social-vm": "git+https://github.com/NearSocial/VM.git#2.5.5",
    "prettier": "^2.7.1",
    "react": "^18.2.0",
    "react-bootstrap": "^2.9.1",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.18.0",
    "styled-components": "^5.3.6"
  },
  "scripts": {
    "serve": "webpack serve",
    "webpack": "webpack",
    "dev": "npm run serve -- --env mode=development",
    "prod": "npm run webpack -- --env mode=production && rm -rf ../dist && mv dist ../",
    "prod:analyze": "npm run prod -- --env presets=analyze",
    "build": "npm run prod",
    "start": "npm run dev"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/cli": "^7.15.4",
    "@babel/core": "^7.15.5",
    "@babel/preset-env": "^7.15.4",
    "@babel/preset-react": "^7.14.5",
    "@types/vscode": "^1.74.0",
    "assert": "^2.0.0",
    "babel-loader": "^8.2.2",
    "browserify-zlib": "^0.2.0",
    "buffer": "^6.0.3",
    "clean-webpack-plugin": "^4.0.0",
    "copy-webpack-plugin": "^9.0.1",
    "cross-env": "^7.0.3",
    "crypto-browserify": "^3.12.0",
    "css-loader": "^6.2.0",
    "css-minimizer-webpack-plugin": "^3.0.2",
    "html-webpack-plugin": "^5.3.2",
    "https-browserify": "^1.0.0",
    "mini-css-extract-plugin": "^2.2.2",
    "node-sass": "^7.0.3",
    "os-browserify": "^0.3.0",
    "path-browserify": "^1.0.1",
    "postcss-loader": "^7.0.1",
    "process": "^0.11.10",
    "sass-loader": "^13.1.0",
    "stream-browserify": "^3.0.0",
    "stream-http": "^3.2.0",
    "style-loader": "^3.2.1",
    "url": "^0.11.0",
    "webpack": "^5.52.0",
    "webpack-bundle-analyzer": "^4.4.2",
    "webpack-cli": "^5.0.1",
    "webpack-dev-server": "^4.1.0",
    "webpack-manifest-plugin": "^5.0.0",
    "webpack-merge": "^5.8.0"
  }
}

'''
'''--- webview/app/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="favicon.png" />

    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta
      name="description"
      content="Social data protocol built on NEAR"
    />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@NearSocial_">
    <meta name="twitter:image" content="https://near.social/assets/logo.png">
    <meta property="og:image" content="https://near.social/assets/logo.png">
    <meta property="og:type" content="website">
    <meta property="og:title" content="Near Social" />
    <meta property="og:description" content="Social data protocol built on NEAR" />
    <link rel="apple-touch-icon" href="favicon.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="manifest.json" />
    <title>Near Social</title>
    <script defer data-domain="near.social" src="https://plausible.io/js/script.hash.js"></script>
    <script>window.plausible = window.plausible || function() { (window.plausible.q = window.plausible.q || []).push(arguments) }; window.analytics = function() { window.plausible(...arguments) }</script>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- webview/app/public/manifest.json ---
{
  "short_name": "Near Social",
  "name": "Near Social",
  "icons": [
    {
      "src": "favicon.png",
      "sizes": "1024x1024",
      "type": "image/png"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#333333",
  "background_color": "#ffffff"
}

'''
'''--- webview/app/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- webview/app/src/App.js ---
import React, { useEffect, useState } from "react";
import "error-polyfill";
import "bootstrap-icons/font/bootstrap-icons.css";
import "bootstrap/dist/js/bootstrap.bundle";
import "App.scss";
import { HashRouter as Router } from "react-router-dom";
import EmbedPage from "./pages/EmbedPage";
import { useAccount, useInitNear, useNear, utils } from "near-social-vm";
import Big from "big.js";
import { create_selector } from "./data/selector";

export const refreshAllowanceObj = {};

function App({ code, wProps, flags, vsContext }) {
  const [connected, setConnected] = useState(false);
  const [signedIn, setSignedIn] = useState(false);
  const [signedAccountId, setSignedAccountId] = useState(null);
  const [availableStorage, setAvailableStorage] = useState(null);
  const [widgetSrc, setWidgetSrc] = useState(null);

  const { initNear } = useInitNear();
  const near = useNear();
  const account = useAccount(vsContext.accountId);
  const accountId = account.accountId;

  useEffect(() => {
    initNear &&
      initNear({
        networkId: vsContext.networkId,
        selector: create_selector(vsContext.networkId, vsContext.accountId, vsContext.accessKey),
      });
  }, [initNear, vsContext]);

  useEffect(() => {
    setSignedIn(!!accountId);
    setSignedAccountId(accountId);
    setConnected(true);
  }, [near, accountId]);

  useEffect(() => {
    setAvailableStorage(
      account.storageBalance
        ? Big(account.storageBalance.available).div(utils.StorageCostPerByte)
        : Big(0)
    );
  }, [account]);

  const viewerProps = {
    refreshAllowance: () => { },
    setWidgetSrc,
    signedAccountId,
    signedIn,
    connected,
    availableStorage,
    widgetSrc,
  };

  return (
    <div className="App">
      <Router basename={process.env.PUBLIC_URL}>
        <EmbedPage code={code} wProps={wProps} flags={flags} vsContext={vsContext} viewerProps={viewerProps} />
      </Router>
    </div>
  );
}

export default App;

'''
'''--- webview/app/src/components/Editor/FileTab.js ---
import { Nav } from "react-bootstrap";
import React, { useEffect, useState } from "react";
import { useAccountId, useCache, useNear } from "near-social-vm";

export const Filetype = {
  Widget: "widget",
  Module: "module",
};

export const StorageDomain = {
  page: "editor",
};

export const StorageType = {
  Code: "code",
  Files: "files",
};

export function toPath(type, nameOrPath) {
  const name =
    nameOrPath.indexOf("/") >= 0
      ? nameOrPath.split("/").slice(2).join("/")
      : nameOrPath;
  return { type, name };
}

export function FileTab(props) {
  const {
    files,
    p,
    active,
    idx,
    removeFromFiles,
    openFile,
    createFile,
    code,
    updateSaved,
  } = props;
  const cache = useCache();
  const near = useNear();
  const accountId = useAccountId();
  const [localCode, setLocalCode] = useState(null);
  const [chainCode, setChainCode] = useState(null);
  const [saved, setSaved] = useState(false);

  const jp = JSON.stringify(p);

  useEffect(() => {
    if (code !== undefined) {
      setLocalCode(code);
      return;
    }
    cache
      .asyncLocalStorageGet(StorageDomain, {
        path: p,
        type: StorageType.Code,
      })
      .then(({ code }) => {
        setLocalCode(code);
      });
  }, [code, cache, p]);

  useEffect(() => {
    const widgetSrc = `${accountId}/${p?.type}/${p?.name}`;
    const c = () => {
      const code = cache.socialGet(
        near,
        widgetSrc,
        false,
        undefined,
        undefined,
        c
      );
      setChainCode(code);
    };
    c();
  }, [cache, near, p, accountId]);

  useEffect(() => {
    const unsaved = localCode !== chainCode;
    setSaved(unsaved);
  }, [localCode, chainCode]);

  useEffect(() => {
    updateSaved && updateSaved(jp, !saved);
  }, [saved, updateSaved]);

  return (
    <Nav.Item>
      <Nav.Link className="text-decoration-none" eventKey={jp}>
        {p.name}
        {saved && (
          <sup key="unsaved">
            <i className="bi bi-asterisk text-secondary" title="Unsaved"></i>
          </sup>
        )}
        <button
          className={`btn btn-sm border-0 py-0 px-1 ms-1 rounded-circle ${
            active ? "btn-outline-light" : "btn-outline-secondary"
          }`}
          onClick={(e) => {
            e.preventDefault();
            e.stopPropagation();
            removeFromFiles(p);
            if (active) {
              if (files.length > 1) {
                openFile(files[idx - 1] || files[idx + 1]);
              } else {
                createFile(Filetype.Widget);
              }
            }
          }}
        >
          <i className="bi bi-x"></i>
        </button>
      </Nav.Link>
    </Nav.Item>
  );
}

'''
'''--- webview/app/src/components/Editor/OpenModal.js ---
import React, { useState } from "react";
import Modal from "react-bootstrap/Modal";

export default function OpenModal(props) {
  const onHide = props.onHide;
  const onOpen = props.onOpen;
  const onNew = props.onNew;
  const show = props.show;

  const [widgetSrc, setWidgetSrc] = useState("");

  return (
    <Modal centered scrollable show={show} onHide={onHide}>
      <Modal.Header closeButton>
        <Modal.Title>Open widget</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <label htmlFor="widget-src-input" className="form-label">
          Widget name <span className="text-muted">(or path)</span>
        </label>
        <input
          className="form-control"
          id="widget-src-input"
          type="text"
          value={widgetSrc}
          onChange={(e) =>
            setWidgetSrc(e.target.value.replaceAll(/[^a-zA-Z0-9_.\-\/]/g, ""))
          }
        />
      </Modal.Body>
      <Modal.Footer>
        <button
          className="btn btn-success"
          disabled={!widgetSrc}
          onClick={(e) => {
            e.preventDefault();
            onOpen(widgetSrc);
            setWidgetSrc("");
            onHide();
          }}
        >
          Open
        </button>
        <button
          className="btn btn-outline-success"
          disabled={widgetSrc && widgetSrc.indexOf("/") !== -1}
          onClick={(e) => {
            e.preventDefault();
            onNew(widgetSrc);
            setWidgetSrc("");
            onHide();
          }}
        >
          Create New
        </button>
        <button className="btn btn-secondary" onClick={onHide}>
          Close
        </button>
      </Modal.Footer>
    </Modal>
  );
}

'''
'''--- webview/app/src/components/Editor/RenameModal.js ---
import React, { useState } from "react";
import Modal from "react-bootstrap/Modal";

export default function RenameModal(props) {
  const onHide = props.onHide;
  const name = props.name;
  const onRename = props.onRename;
  const show = props.show;

  const [newName, setNewName] = useState(name);

  return (
    <Modal centered scrollable show={show} onHide={onHide}>
      <Modal.Header closeButton>
        <Modal.Title>Rename</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <label htmlFor="rename-input" className="form-label">
          New name
        </label>
        <input
          className="form-control"
          id="rename-input"
          type="text"
          value={newName}
          onChange={(e) =>
            setNewName(e.target.value.replaceAll(/[^a-zA-Z0-9_.\-]/g, ""))
          }
        />
      </Modal.Body>
      <Modal.Footer>
        <button
          className="btn btn-success"
          disabled={!newName || newName === name}
          onClick={(e) => {
            e.preventDefault();
            onRename(newName);
            onHide();
          }}
        >
          Confirm
        </button>
        <button className="btn btn-secondary" onClick={onHide}>
          Close
        </button>
      </Modal.Footer>
    </Modal>
  );
}

'''
'''--- webview/app/src/components/common/buttons/BlueButton.js ---
import React from "react";
import { Button } from "./Button";
import styled from "styled-components";

const StyledButton = styled(Button)`
  background-color: var(--blue-light-9);
  border-color: var(--blue-light-9);
  color: white;
`;

export function BlueButton(props) {
  return <StyledButton {...props}>{props.children}</StyledButton>;
}

'''
'''--- webview/app/src/components/common/buttons/Button.js ---
import React from "react";
import styled from "styled-components";

const StyledButton = styled.button`
  border-radius: 8px;
  border-style: solid;
  border-width: 1px;
  border-color: transparent;
  padding: 8px 16px;
  font-weight: var(--font-weight-bold);
  display: inline-block;
  height: 40px;
`;

export function Button(props) {
  return (
    <StyledButton
      className={props.className}
      onClick={props.onClick}
      title={props.title}
      disabled={props.disabled}
    >
      {props.children}
    </StyledButton>
  );
}

'''
'''--- webview/app/src/components/common/buttons/GrayBorderButton.js ---
import React from "react";
import { Button } from "./Button";
import styled from "styled-components";

const StyledButton = styled(Button)`
  background-color: var(--slate-dark-6);
  border-color: var(--slate-dark-8);
  color: white;
`;

export function GrayBorderButton(props) {
  return <StyledButton {...props}>{props.children}</StyledButton>;
}

'''
'''--- webview/app/src/components/icons/ArrowUpRight.js ---
import React from "react";

export function ArrowUpRight() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className="arrow-up-right"
    >
      <path
        d="M17.25 15.25V6.75H8.75"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M17 7L6.75 17.25"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}

'''
'''--- webview/app/src/components/icons/Book.js ---
import React from "react";

export function Book() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M19.25 5.75C19.25 5.19772 18.8023 4.75 18.25 4.75H14C12.8954 4.75 12 5.64543 12 6.75V19.25L12.8284 18.4216C13.5786 17.6714 14.596 17.25 15.6569 17.25H18.25C18.8023 17.25 19.25 16.8023 19.25 16.25V5.75Z"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M4.75 5.75C4.75 5.19772 5.19772 4.75 5.75 4.75H10C11.1046 4.75 12 5.64543 12 6.75V19.25L11.1716 18.4216C10.4214 17.6714 9.40401 17.25 8.34315 17.25H5.75C5.19772 17.25 4.75 16.8023 4.75 16.25V5.75Z"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}

'''
'''--- webview/app/src/components/icons/Close.js ---
import React from "react";

export function Close() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M17.25 6.75L6.75 17.25"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M6.75 6.75L17.25 17.25"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}

'''
'''--- webview/app/src/components/icons/Code.js ---
import React from "react";

export function Code() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M4.75 6.75C4.75 5.64543 5.64543 4.75 6.75 4.75H17.25C18.3546 4.75 19.25 5.64543 19.25 6.75V17.25C19.25 18.3546 18.3546 19.25 17.25 19.25H6.75C5.64543 19.25 4.75 18.3546 4.75 17.25V6.75Z"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M8.75 10.75L11.25 13L8.75 15.25"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}

'''
'''--- webview/app/src/components/icons/Diff.js ---
import React from "react";

export function Diff() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      fill="none"
      viewBox="-4 -4 24 24"
    >
      <path d="M8.515 1.019A7 7 0 0 0 8 1V0a8 8 0 0 1 .589.022l-.074.997zm2.004.45a7.003 7.003 0 0 0-.985-.299l.219-.976c.383.086.76.2 1.126.342l-.36.933zm1.37.71a7.01 7.01 0 0 0-.439-.27l.493-.87a8.025 8.025 0 0 1 .979.654l-.615.789a6.996 6.996 0 0 0-.418-.302zm1.834 1.79a6.99 6.99 0 0 0-.653-.796l.724-.69c.27.285.52.59.747.91l-.818.576zm.744 1.352a7.08 7.08 0 0 0-.214-.468l.893-.45a7.976 7.976 0 0 1 .45 1.088l-.95.313a7.023 7.023 0 0 0-.179-.483zm.53 2.507a6.991 6.991 0 0 0-.1-1.025l.985-.17c.067.386.106.778.116 1.17l-1 .025zm-.131 1.538c.033-.17.06-.339.081-.51l.993.123a7.957 7.957 0 0 1-.23 1.155l-.964-.267c.046-.165.086-.332.12-.501zm-.952 2.379c.184-.29.346-.594.486-.908l.914.405c-.16.36-.345.706-.555 1.038l-.845-.535zm-.964 1.205c.122-.122.239-.248.35-.378l.758.653a8.073 8.073 0 0 1-.401.432l-.707-.707z" />
      <path d="M8 1a7 7 0 1 0 4.95 11.95l.707.707A8.001 8.001 0 1 1 8 0v1z" />
      <path d="M7.5 3a.5.5 0 0 1 .5.5v5.21l3.248 1.856a.5.5 0 0 1-.496.868l-3.5-2A.5.5 0 0 1 7 9V3.5a.5.5 0 0 1 .5-.5z" />
    </svg>
  );
}

'''
'''--- webview/app/src/components/icons/Fork.js ---
import React from "react";

export function Fork() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M9.25 7C9.25 8.24264 8.24264 9.25 7 9.25C5.75736 9.25 4.75 8.24264 4.75 7C4.75 5.75736 5.75736 4.75 7 4.75C8.24264 4.75 9.25 5.75736 9.25 7Z"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M19.25 7C19.25 8.24264 18.2426 9.25 17 9.25C15.7574 9.25 14.75 8.24264 14.75 7C14.75 5.75736 15.7574 4.75 17 4.75C18.2426 4.75 19.25 5.75736 19.25 7Z"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M14.25 17C14.25 18.2426 13.2426 19.25 12 19.25C10.7574 19.25 9.75 18.2426 9.75 17C9.75 15.7574 10.7574 14.75 12 14.75C13.2426 14.75 14.25 15.7574 14.25 17Z"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M6.75 9.5V10.25C6.75 11.3546 7.64543 12.25 8.75 12.25H12M17.25 9.5V10.25C17.25 11.3546 16.3546 12.25 15.25 12.25H12M12 12.25V14.5"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}

'''
'''--- webview/app/src/components/icons/Home.js ---
import React from "react";

export function Home() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M6.75024 19.2502H17.2502C18.3548 19.2502 19.2502 18.3548 19.2502 17.2502V9.75025L12.0002 4.75024L4.75024 9.75025V17.2502C4.75024 18.3548 5.64568 19.2502 6.75024 19.2502Z"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M9.74963 15.7493C9.74963 14.6447 10.6451 13.7493 11.7496 13.7493H12.2496C13.3542 13.7493 14.2496 14.6447 14.2496 15.7493V19.2493H9.74963V15.7493Z"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}

'''
'''--- webview/app/src/components/icons/LogOut.js ---
import React from "react";

export function LogOut() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M15.75 8.75L19.25 12L15.75 15.25"
        stroke="#697177"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M19 12H10.75"
        stroke="#697177"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M15.25 4.75H6.75C5.64543 4.75 4.75 5.64543 4.75 6.75V17.25C4.75 18.3546 5.64543 19.25 6.75 19.25H15.25"
        stroke="#697177"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}

'''
'''--- webview/app/src/components/icons/NearSocialLogo.js ---
import React from "react";

export function NearSocialLogo() {
  return (
    <svg
      width="29"
      height="20"
      viewBox="0 0 29 20"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M9.55396 17.509L2 9.99996L9.55396 2.49097"
        stroke="#3D7FFF"
        strokeWidth="3"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M19.536 2.49097L27 9.99996L19.536 17.509"
        stroke="#3D7FFF"
        strokeWidth="3"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}

'''
'''--- webview/app/src/components/icons/Pretend.js ---
import React from "react";

export function Pretend() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="none"
      viewBox="0 0 16 16"
    >
      <path
        strokeWidth="0.3px"
        fill="#697177"
        d="M1.5 1a.5.5 0 0 0-.5.5v3a.5.5 0 0 1-1 0v-3A1.5 1.5 0 0 1 1.5 0h3a.5.5 0 0 1 0 1h-3zM11 .5a.5.5 0 0 1 .5-.5h3A1.5 1.5 0 0 1 16 1.5v3a.5.5 0 0 1-1 0v-3a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 1-.5-.5zM.5 11a.5.5 0 0 1 .5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 1 0 1h-3A1.5 1.5 0 0 1 0 14.5v-3a.5.5 0 0 1 .5-.5zm15 0a.5.5 0 0 1 .5.5v3a1.5 1.5 0 0 1-1.5 1.5h-3a.5.5 0 0 1 0-1h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 1 .5-.5z"
      />
      <path
        strokeWidth="0.3px"
        fill="#697177"
        d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm8-9a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"
      />
    </svg>
  );
}

'''
'''--- webview/app/src/components/icons/StopPretending.js ---
import React from "react";

export function StopPretending() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="none"
      viewBox="0 0 16 16"
    >
      <path
        strokeWidth="0.3px"
        fill="#697177"
        d="M13.879 10.414a2.501 2.501 0 0 0-3.465 3.465l3.465-3.465Zm.707.707-3.465 3.465a2.501 2.501 0 0 0 3.465-3.465Zm-4.56-1.096a3.5 3.5 0 1 1 4.949 4.95 3.5 3.5 0 0 1-4.95-4.95ZM11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm-9 8c0 1 1 1 1 1h5.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.544-3.393C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4Z"
      />
    </svg>
  );
}

'''
'''--- webview/app/src/components/icons/User.js ---
import React from "react";

export function User() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M15.25 8C15.25 9.79493 13.7949 11.25 12 11.25C10.2051 11.25 8.75 9.79493 8.75 8C8.75 6.20507 10.2051 4.75 12 4.75C13.7949 4.75 15.25 6.20507 15.25 8Z"
        stroke="#697177"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M6.84751 19.25H17.1525C18.2944 19.25 19.174 18.2681 18.6408 17.2584C17.8563 15.7731 16.068 14 12 14C7.93201 14 6.14367 15.7731 5.35924 17.2584C4.82597 18.2681 5.70559 19.25 6.84751 19.25Z"
        stroke="#697177"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}

'''
'''--- webview/app/src/components/icons/UserCircle.js ---
import React from "react";

export function UserCircle() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M19.25 12C19.25 16.0041 16.0041 19.25 12 19.25C7.99594 19.25 4.75 16.0041 4.75 12C4.75 7.99594 7.99594 4.75 12 4.75C16.0041 4.75 19.25 7.99594 19.25 12Z"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M14.25 10C14.25 11.2426 13.2426 12.25 12 12.25C10.7574 12.25 9.75 11.2426 9.75 10C9.75 8.75736 10.7574 7.75 12 7.75C13.2426 7.75 14.25 8.75736 14.25 10Z"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M7.19745 17C8.34392 15.625 10.0698 14.75 12 14.75C13.9302 14.75 15.6561 15.625 16.8025 17"
        stroke="#9BA1A6"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}

'''
'''--- webview/app/src/components/icons/Withdraw.js ---
import React from "react";

export function Withdraw() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        strokeWidth="0.3px"
        d="M14.9634 10.8766C15.2234 11.1366 15.2234 11.5567 14.9634 11.8167L12.4701 14.3067C12.2101 14.5701 11.79 14.5701 11.5301 14.3067L9.03676 11.8167C8.77679 11.5567 8.77679 11.1366 9.03676 10.8766C9.30016 10.6133 9.72011 10.6133 9.98008 10.8766L11.3333 12.2267V6.66667C11.3333 5.1933 12.5266 4 14 4H17.3333C18.8067 4 20 5.1933 20 6.66667V17.3333C20 18.8067 18.8067 20 17.3333 20H6.66667C5.1933 20 4 18.8067 4 17.3333V6.66667C4 5.1933 5.1933 4 6.66667 4H9.33333C9.7 4 10 4.3 10 4.66667C10 5.03333 9.7 5.33333 9.33333 5.33333H6.66667C5.93006 5.33333 5.33333 5.93006 5.33333 6.66667V17.3333C5.33333 18.0699 5.93006 18.6667 6.66667 18.6667H17.3333C18.0699 18.6667 18.6667 18.0699 18.6667 17.3333V6.66667C18.6667 5.93006 18.0699 5.33333 17.3333 5.33333H14C13.2634 5.33333 12.6667 5.93006 12.6667 6.66667V12.2267L14.0199 10.8766C14.28 10.6134 14.7 10.6134 14.9634 10.8766Z"
        fill="#697177"
      />
    </svg>
  );
}

'''
'''--- webview/app/src/components/navigation/Logotype.js ---
import React from "react";

export function Logotype({ color = "white" }) {
  return (
    <svg
      width="155"
      height="26"
      viewBox="0 0 155 26"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className="logotype"
    >
      <path
        d="M9.55396 20.518L2 13.009L9.55396 5.5"
        stroke="#3D7FFF"
        strokeWidth="3"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M19.536 5.5L27 13.009L19.536 20.518"
        stroke="#3D7FFF"
        strokeWidth="3"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M39.82 20.5V6.5H42.5L50.24 16.96H49.68C49.6267 16.5467 49.58 16.1467 49.54 15.76C49.5 15.36 49.46 14.96 49.42 14.56C49.3933 14.1467 49.3667 13.7267 49.34 13.3C49.3267 12.86 49.3133 12.4 49.3 11.92C49.2867 11.4267 49.28 10.8933 49.28 10.32V6.5H52.22V20.5H49.5L41.6 9.94L42.36 9.96C42.4267 10.6533 42.48 11.2467 42.52 11.74C42.5733 12.22 42.6133 12.64 42.64 13C42.6667 13.36 42.6867 13.6733 42.7 13.94C42.7267 14.2067 42.74 14.46 42.74 14.7C42.7533 14.94 42.76 15.1933 42.76 15.46V20.5H39.82ZM60.4752 20.7C59.3285 20.7 58.3285 20.4667 57.4752 20C56.6218 19.5333 55.9552 18.8933 55.4752 18.08C54.9952 17.2667 54.7552 16.3333 54.7552 15.28C54.7552 14.4667 54.8885 13.72 55.1552 13.04C55.4218 12.36 55.7952 11.7733 56.2752 11.28C56.7552 10.7733 57.3218 10.3867 57.9752 10.12C58.6418 9.84 59.3618 9.7 60.1352 9.7C60.8552 9.7 61.5218 9.83333 62.1352 10.1C62.7485 10.3533 63.2752 10.72 63.7152 11.2C64.1685 11.6667 64.5152 12.22 64.7552 12.86C64.9952 13.5 65.1018 14.2 65.0752 14.96L65.0552 15.84H56.5552L56.0952 14.1H62.7152L62.3952 14.46V14.02C62.3685 13.66 62.2485 13.3333 62.0352 13.04C61.8352 12.7467 61.5752 12.52 61.2552 12.36C60.9352 12.2 60.5752 12.12 60.1752 12.12C59.5885 12.12 59.0885 12.2333 58.6752 12.46C58.2752 12.6867 57.9685 13.02 57.7552 13.46C57.5418 13.9 57.4352 14.4333 57.4352 15.06C57.4352 15.7 57.5685 16.2533 57.8352 16.72C58.1152 17.1867 58.5018 17.5533 58.9952 17.82C59.5018 18.0733 60.0952 18.2 60.7752 18.2C61.2418 18.2 61.6685 18.1267 62.0552 17.98C62.4418 17.8333 62.8552 17.58 63.2952 17.22L64.6552 19.12C64.2685 19.4667 63.8418 19.76 63.3752 20C62.9085 20.2267 62.4285 20.4 61.9352 20.52C61.4418 20.64 60.9552 20.7 60.4752 20.7ZM71.1339 20.7C70.2539 20.7 69.4606 20.46 68.7539 19.98C68.0472 19.5 67.4872 18.8467 67.0739 18.02C66.6606 17.1933 66.4539 16.2467 66.4539 15.18C66.4539 14.1133 66.6606 13.1733 67.0739 12.36C67.5006 11.5333 68.0739 10.8867 68.7939 10.42C69.5139 9.94 70.3339 9.7 71.2539 9.7C71.7739 9.7 72.2472 9.78 72.6739 9.94C73.1139 10.0867 73.4939 10.2933 73.8139 10.56C74.1472 10.8267 74.4272 11.1333 74.6539 11.48C74.8806 11.8267 75.0406 12.2 75.1339 12.6L74.5339 12.5V9.92H77.3539V20.5H74.4939V17.96L75.1339 17.9C75.0272 18.2733 74.8539 18.6267 74.6139 18.96C74.3739 19.2933 74.0739 19.5933 73.7139 19.86C73.3672 20.1133 72.9739 20.32 72.5339 20.48C72.0939 20.6267 71.6272 20.7 71.1339 20.7ZM71.9139 18.24C72.4472 18.24 72.9139 18.1133 73.3139 17.86C73.7139 17.6067 74.0206 17.2533 74.2339 16.8C74.4606 16.3333 74.5739 15.7933 74.5739 15.18C74.5739 14.58 74.4606 14.0533 74.2339 13.6C74.0206 13.1467 73.7139 12.7933 73.3139 12.54C72.9139 12.2733 72.4472 12.14 71.9139 12.14C71.3939 12.14 70.9339 12.2733 70.5339 12.54C70.1472 12.7933 69.8406 13.1467 69.6139 13.6C69.3872 14.0533 69.2739 14.58 69.2739 15.18C69.2739 15.7933 69.3872 16.3333 69.6139 16.8C69.8406 17.2533 70.1472 17.6067 70.5339 17.86C70.9339 18.1133 71.3939 18.24 71.9139 18.24ZM80.2013 20.5V9.92H82.9413L83.0413 13.32L82.5613 12.62C82.7213 12.0733 82.9813 11.58 83.3413 11.14C83.7013 10.6867 84.1213 10.3333 84.6013 10.08C85.0946 9.82667 85.6079 9.7 86.1413 9.7C86.3679 9.7 86.5879 9.72 86.8013 9.76C87.0146 9.8 87.1946 9.84667 87.3413 9.9L86.5813 13.02C86.4213 12.94 86.2279 12.8733 86.0013 12.82C85.7746 12.7533 85.5413 12.72 85.3013 12.72C84.9813 12.72 84.6813 12.78 84.4013 12.9C84.1346 13.0067 83.9013 13.1667 83.7013 13.38C83.5013 13.58 83.3413 13.82 83.2213 14.1C83.1146 14.38 83.0613 14.6867 83.0613 15.02V20.5H80.2013ZM100.044 20.7C99.1769 20.7 98.3836 20.5933 97.6636 20.38C96.9569 20.1667 96.3236 19.8533 95.7636 19.44C95.2169 19.0267 94.7236 18.5267 94.2836 17.94L96.1636 15.8C96.8169 16.7067 97.4636 17.3267 98.1036 17.66C98.7569 17.98 99.4636 18.14 100.224 18.14C100.637 18.14 101.004 18.0867 101.324 17.98C101.657 17.86 101.917 17.6933 102.104 17.48C102.29 17.2667 102.384 17.0133 102.384 16.72C102.384 16.5067 102.337 16.3133 102.244 16.14C102.15 15.9533 102.017 15.7933 101.844 15.66C101.67 15.5133 101.464 15.3867 101.224 15.28C100.984 15.16 100.717 15.06 100.424 14.98C100.13 14.8867 99.8103 14.8133 99.4636 14.76C98.7169 14.5867 98.0636 14.38 97.5036 14.14C96.9436 13.8867 96.4769 13.58 96.1036 13.22C95.7303 12.8467 95.4503 12.4267 95.2636 11.96C95.0903 11.4933 95.0036 10.9667 95.0036 10.38C95.0036 9.78 95.1369 9.22667 95.4036 8.72C95.6703 8.2 96.0369 7.75333 96.5036 7.38C96.9836 7.00667 97.5303 6.72 98.1436 6.52C98.7703 6.32 99.4303 6.22 100.124 6.22C100.977 6.22 101.724 6.32 102.364 6.52C103.004 6.70667 103.557 6.98 104.024 7.34C104.504 7.7 104.904 8.14 105.224 8.66L103.324 10.5C103.044 10.1267 102.737 9.81333 102.404 9.56C102.084 9.30667 101.73 9.12 101.344 9C100.97 8.86667 100.584 8.8 100.184 8.8C99.7436 8.8 99.3636 8.86 99.0436 8.98C98.7236 9.08667 98.4703 9.24667 98.2836 9.46C98.1103 9.67333 98.0236 9.93333 98.0236 10.24C98.0236 10.48 98.0836 10.6933 98.2036 10.88C98.3236 11.0667 98.4969 11.2333 98.7236 11.38C98.9503 11.5133 99.2236 11.6333 99.5436 11.74C99.8636 11.8467 100.217 11.94 100.604 12.02C101.337 12.1667 101.997 12.36 102.584 12.6C103.17 12.84 103.67 13.1333 104.084 13.48C104.51 13.8133 104.837 14.2133 105.064 14.68C105.29 15.1333 105.404 15.6467 105.404 16.22C105.404 17.1667 105.177 17.9733 104.724 18.64C104.27 19.3067 103.644 19.82 102.844 20.18C102.044 20.5267 101.11 20.7 100.044 20.7ZM112.641 20.7C111.561 20.7 110.594 20.4667 109.741 20C108.901 19.52 108.234 18.8667 107.741 18.04C107.261 17.2133 107.021 16.2667 107.021 15.2C107.021 14.1333 107.261 13.1933 107.741 12.38C108.234 11.5533 108.901 10.9 109.741 10.42C110.594 9.94 111.561 9.7 112.641 9.7C113.707 9.7 114.661 9.94 115.501 10.42C116.354 10.9 117.021 11.5533 117.501 12.38C117.981 13.1933 118.221 14.1333 118.221 15.2C118.221 16.2667 117.981 17.2133 117.501 18.04C117.021 18.8667 116.354 19.52 115.501 20C114.661 20.4667 113.707 20.7 112.641 20.7ZM112.641 18.22C113.161 18.22 113.627 18.0933 114.041 17.84C114.454 17.5733 114.774 17.2133 115.001 16.76C115.241 16.2933 115.361 15.7733 115.361 15.2C115.361 14.6133 115.241 14.0933 115.001 13.64C114.774 13.1733 114.454 12.8133 114.041 12.56C113.627 12.2933 113.161 12.16 112.641 12.16C112.107 12.16 111.634 12.2933 111.221 12.56C110.807 12.8267 110.481 13.1867 110.241 13.64C110.001 14.0933 109.887 14.6133 109.901 15.2C109.887 15.7733 110.001 16.2933 110.241 16.76C110.481 17.2133 110.807 17.5733 111.221 17.84C111.634 18.0933 112.107 18.22 112.641 18.22ZM124.958 20.7C123.944 20.7 123.038 20.46 122.238 19.98C121.438 19.5 120.804 18.8467 120.338 18.02C119.884 17.1933 119.658 16.2533 119.658 15.2C119.658 14.16 119.884 13.2267 120.338 12.4C120.804 11.56 121.438 10.9 122.238 10.42C123.038 9.94 123.944 9.7 124.958 9.7C125.904 9.7 126.771 9.87333 127.558 10.22C128.344 10.5667 128.958 11.0467 129.398 11.66L127.838 13.54C127.651 13.2867 127.418 13.06 127.138 12.86C126.858 12.6467 126.551 12.48 126.218 12.36C125.898 12.24 125.564 12.18 125.218 12.18C124.671 12.18 124.184 12.3133 123.758 12.58C123.344 12.8333 123.018 13.1867 122.778 13.64C122.538 14.0933 122.418 14.6133 122.418 15.2C122.418 15.7733 122.538 16.2867 122.778 16.74C123.031 17.18 123.371 17.54 123.798 17.82C124.224 18.0867 124.704 18.22 125.238 18.22C125.584 18.22 125.911 18.1733 126.218 18.08C126.524 17.9733 126.811 17.82 127.078 17.62C127.358 17.42 127.611 17.18 127.838 16.9L129.378 18.78C128.924 19.3533 128.298 19.82 127.498 20.18C126.698 20.5267 125.851 20.7 124.958 20.7ZM131.437 20.5V9.92H134.277V20.5H131.437ZM132.837 7.74C132.291 7.74 131.864 7.60667 131.557 7.34C131.251 7.07333 131.097 6.69333 131.097 6.2C131.097 5.74667 131.251 5.38 131.557 5.1C131.877 4.80667 132.304 4.66 132.837 4.66C133.384 4.66 133.811 4.8 134.117 5.08C134.424 5.34667 134.577 5.72 134.577 6.2C134.577 6.66667 134.417 7.04 134.097 7.32C133.791 7.6 133.371 7.74 132.837 7.74ZM141.271 20.7C140.391 20.7 139.597 20.46 138.891 19.98C138.184 19.5 137.624 18.8467 137.211 18.02C136.797 17.1933 136.591 16.2467 136.591 15.18C136.591 14.1133 136.797 13.1733 137.211 12.36C137.637 11.5333 138.211 10.8867 138.931 10.42C139.651 9.94 140.471 9.7 141.391 9.7C141.911 9.7 142.384 9.78 142.811 9.94C143.251 10.0867 143.631 10.2933 143.951 10.56C144.284 10.8267 144.564 11.1333 144.791 11.48C145.017 11.8267 145.177 12.2 145.271 12.6L144.671 12.5V9.92H147.491V20.5H144.631V17.96L145.271 17.9C145.164 18.2733 144.991 18.6267 144.751 18.96C144.511 19.2933 144.211 19.5933 143.851 19.86C143.504 20.1133 143.111 20.32 142.671 20.48C142.231 20.6267 141.764 20.7 141.271 20.7ZM142.051 18.24C142.584 18.24 143.051 18.1133 143.451 17.86C143.851 17.6067 144.157 17.2533 144.371 16.8C144.597 16.3333 144.711 15.7933 144.711 15.18C144.711 14.58 144.597 14.0533 144.371 13.6C144.157 13.1467 143.851 12.7933 143.451 12.54C143.051 12.2733 142.584 12.14 142.051 12.14C141.531 12.14 141.071 12.2733 140.671 12.54C140.284 12.7933 139.977 13.1467 139.751 13.6C139.524 14.0533 139.411 14.58 139.411 15.18C139.411 15.7933 139.524 16.3333 139.751 16.8C139.977 17.2533 140.284 17.6067 140.671 17.86C141.071 18.1133 141.531 18.24 142.051 18.24ZM150.358 20.5V5.7H153.198V20.5H150.358Z"
        fill={color}
      />
    </svg>
  );
}

'''
'''--- webview/app/src/components/navigation/NavigationButton.js ---
import React from "react";
import styled from "styled-components";
import { NavLink } from "react-router-dom";

const StyledNavigationButton = styled.div`
  a {
    color: var(--slate-dark-11);
    font-size: 16px;
    padding: 10px;
    border-radius: 8px;
    font-weight: var(--font-weight-bold);
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;

    &:hover,
    &.active {
      color: white;
      text-decoration: none;
      background-color: var(--slate-dark-6);
    }
  }
  &.disabled {
    opacity: 0.5;
  }
`;

export function NavigationButton(props) {
  return (
    <StyledNavigationButton className={props.disabled ? "disabled" : ""}>
      {props.route ? (
        <NavLink
          onClick={(e) => {
            if (props.disabled) {
              e.preventDefault();
            }
          }}
          to={props.route}
          exact={true}
        >
          {props.children}
        </NavLink>
      ) : (
        <a href={props.href} target="_blank" rel="noopener noreferrer">
          {props.children}
        </a>
      )}
    </StyledNavigationButton>
  );
}

'''
'''--- webview/app/src/components/navigation/NotificationWidget.js ---
import React from "react";
import styled from "styled-components";
import { Widget } from "near-social-vm";

const StyledNotificationWidget = styled.div`
  margin: 0 15px;
  background-color: var(--slate-dark-5);
  height: 40px;
  width: 40px;
  border-radius: 50%;

  > div,
  a {
    width: 100%;
    height: 100%;
  }

  a {
    color: var(--slate-dark-11) !important;
    display: flex;
    align-items: center;
    justify-content: center;

    i {
      font-size: 18px !important;
    }
  }

  :hover {
    a,
    i {
      color: white;
    }
  }
`;

export function NotificationWidget({ notificationButtonSrc }) {
  return (
    <StyledNotificationWidget className="nav-notification-widget">
      <Widget src={notificationButtonSrc} />
    </StyledNotificationWidget>
  );
}

'''
'''--- webview/app/src/components/navigation/PretendModal.js ---
import React, { useState } from "react";
import Modal from "react-bootstrap/Modal";
import { Widget, useAccount } from "near-social-vm";

export default function PretendModal(props) {
  const account = useAccount();
  const onHide = props.onHide;
  const show = props.show;

  const [accountId, setAccountId] = useState("");

  return (
    <Modal centered show={show} onHide={onHide}>
      <Modal.Header closeButton>
        <Modal.Title>Pretend to be another account</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <div>
          <label htmlFor="widget-src-input" className="form-label">
            Pretend to be account ID:
          </label>
          <input
            className="form-control"
            id="widget-src-input"
            type="text"
            value={accountId}
            onChange={(e) =>
              setAccountId(
                e.target.value.toLowerCase().replaceAll(/[^a-z0-9_.\-]/g, "")
              )
            }
          />
        </div>
        <div className="mt-2">
          <Widget
            src={props.widgets.profileInlineBlock}
            props={{ accountId }}
          />
        </div>
      </Modal.Body>
      <Modal.Footer>
        <button
          className="btn btn-success"
          disabled={!accountId || !account.startPretending}
          onClick={(e) => {
            e.preventDefault();
            account.startPretending(accountId);
            setAccountId("");
            onHide();
          }}
        >
          Pretend
        </button>
        <button className="btn btn-secondary" onClick={onHide}>
          Cancel
        </button>
      </Modal.Footer>
    </Modal>
  );
}

'''
'''--- webview/app/src/components/navigation/SignInButton.js ---
import React from "react";
import { GrayBorderButton } from "../common/buttons/GrayBorderButton";

export function SignInButton(props) {
  return (
    <GrayBorderButton className="nav-sign-in-btn" onClick={props.onSignIn}>
      Sign In
    </GrayBorderButton>
  );
}

'''
'''--- webview/app/src/components/navigation/desktop/DesktopNavigation.js ---
import React from "react";
import styled from "styled-components";
import { Link } from "react-router-dom";
import { Logotype } from "../Logotype";
import { NavigationButton } from "../NavigationButton";
import { ArrowUpRight } from "../../icons/ArrowUpRight";
import { SignInButton } from "../SignInButton";
import { UserDropdown } from "./UserDropdown";
import { DevActionsDropdown } from "./DevActionsDropdown";
import { NotificationWidget } from "../NotificationWidget";

const StyledNavigation = styled.div`
  position: sticky;
  top: 0;
  left: 0;
  right: 0;
  width: 100%;
  background-color: var(--slate-dark-1);
  z-index: 1000;
  padding: 12px 0;

  .user-section {
    margin-left: auto;
    > button {
      font-size: 14px;
    }
  }

  .container {
    display: flex;
    align-items: center;

    .navigation-section {
      margin-left: 50px;
      display: flex;

      > div {
        > a {
          margin-right: 20px;
        }
      }
    }

    .user-section {
      display: flex;
      align-items: center;

      .nav-create-btn {
        margin-left: 10px;
      }

      .nav-sign-in-btn {
        margin-left: 10px;
      }
    }

    .arrow-up-right {
      margin-left: 4px;
    }
  }
`;

export function DesktopNavigation(props) {
  return (
    <StyledNavigation>
      <div className="container">
        <Link to="/" className="logo-link">
          <Logotype />
        </Link>
        <div className="navigation-section">
          <NavigationButton route="/">Home</NavigationButton>
          <NavigationButton route="/edit">Create</NavigationButton>
          <NavigationButton href={props.documentationHref}>
            Documentation
            <ArrowUpRight />
          </NavigationButton>
        </div>
        <div className="user-section">
          <DevActionsDropdown {...props} />
          {!props.signedIn && (
            <SignInButton onSignIn={() => props.requestSignIn()} />
          )}
          {props.signedIn && (
            <>
              <NotificationWidget
                notificationButtonSrc={props.widgets.notificationButton}
              />
              <UserDropdown {...props} />
            </>
          )}
        </div>
      </div>
    </StyledNavigation>
  );
}

'''
'''--- webview/app/src/components/navigation/desktop/DevActionsDropdown.js ---
import React from "react";
import styled from "styled-components";
import { Link } from "react-router-dom";
import { Fork } from "../../icons/Fork";
import { Code } from "../../icons/Code";
import { useAccount } from "near-social-vm";
import { Diff } from "../../icons/Diff";

const StyledDropdown = styled.div`
  .dropdown-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--slate-dark-5);
    border-radius: 50px;
    outline: none;
    border: 0;
    width: 40px;
    height: 40px;

    &:after {
      display none;
    }

    .menu {
      width: 18px;
      height: 24px;
      display: flex;
      flex-direction: column;
      justify-content: space-evenly;
  
      div {
        background-color: var(--slate-dark-11);;
        height: 2px;
        width: 100%;
        border-radius: 30px;
      }
    }

    :hover {
      .menu {
        div {
          background-color: white;
        }
      }
    }
  }

  ul {
    background-color: var(--slate-dark-5);
    width: 100%;

    li {
      padding: 0 6px;
    }

    button,
    a {
      color: var(--slate-dark-11);
      display: flex;
      align-items: center;
      border-radius: 8px;
      padding: 12px;

      :hover,
      :focus {
        text-decoration: none;
        background-color: var(--slate-dark-1);
        color: white;

        svg {
          path {
            stroke: white;
          }
        }
      }

      svg {
        margin-right: 7px;
        path {
          stroke: var(--slate-dark-9);
        }
      }
    }
  }
`;

export function DevActionsDropdown(props) {
  const account = useAccount();

  if (props.widgetSrc?.edit || props.widgetSrc?.view) {
    return (
      <StyledDropdown className="dropdown">
        <button
          className="dropdown-toggle"
          type="button"
          id="dropdownMenu2222"
          data-bs-toggle="dropdown"
          aria-expanded="false"
        >
          <div className="menu">
            <div />
            <div />
            <div />
          </div>
        </button>
        <ul className="dropdown-menu" aria-labelledby="dropdownMenu2222">
          {props.widgetSrc?.edit && (
            <li>
              <Link to={`/edit/${props.widgetSrc?.edit}`}>
                <Fork />
                {props.widgetSrc.edit.startsWith(`${account.accountId}/widget/`)
                  ? "Edit widget"
                  : "Fork widget"}
              </Link>
            </li>
          )}
          {props.widgetSrc?.view && (
            <li>
              <Link
                to={`/${props.widgets.viewSource}?src=${props.widgetSrc?.view}`}
              >
                <Code />
                View source
              </Link>
            </li>
          )}
          {props.widgets.viewHistory && props.widgetSrc?.view && (
            <li>
              <Link
                to={`/${props.widgets.viewHistory}?widgetPath=${props.widgetSrc?.view}`}
              >
                <Diff />
                View history
              </Link>
            </li>
          )}
        </ul>
      </StyledDropdown>
    );
  } else {
    return null;
  }
}

'''
'''--- webview/app/src/components/navigation/desktop/UserDropdown.js ---
import React, { useCallback } from "react";
import { Widget, useNear, useAccount } from "near-social-vm";
import styled from "styled-components";
import { User } from "../../icons/User";
import { LogOut } from "../../icons/LogOut";
import { Withdraw } from "../../icons/Withdraw";
import { NavLink } from "react-router-dom";
import PretendModal from "../PretendModal";
import { Pretend } from "../../icons/Pretend";
import { StopPretending } from "../../icons/StopPretending";

const StyledDropdown = styled.div`
  button,
  a {
    font-weight: var(--font-weight-medium);
  }
  .dropdown-toggle {
    display: flex;
    align-items: center;
    text-align: left;
    background-color: var(--slate-dark-5);
    border-radius: 50px;
    outline: none;
    border: 0;

    &:after {
      margin: 0 15px;
      border-top-color: var(--slate-dark-11);
    }

    img {
      border-radius: 50% !important;
    }

    .profile-info {
      margin: 5px 10px;
      line-height: normal;
      max-width: 140px;

      .profile-name,
      .profile-username {
        text-overflow: ellipsis;
        overflow: hidden;
      }

      .profile-name {
        color: var(--slate-dark-12);
      }
      .profile-username {
        color: var(--slate-dark-11);
      }
    }
  }

  ul {
    background-color: var(--slate-dark-5);
    width: 100%;

    li {
      padding: 0 6px;
    }

    button,
    a {
      color: var(--slate-dark-11);
      display: flex;
      align-items: center;
      border-radius: 8px;
      padding: 12px;

      :hover,
      :focus {
        text-decoration: none;
        background-color: var(--slate-dark-1);
        color: white;

        svg {
          path {
            stroke: white;
          }
        }
      }

      svg {
        margin-right: 7px;
        min-width: 24px;
        path {
          stroke: var(--slate-dark-9);
        }
      }
    }
  }
`;

export function UserDropdown(props) {
  const near = useNear();
  const account = useAccount();

  const withdrawStorage = useCallback(async () => {
    await near.contract.storage_withdraw({}, undefined, "1");
  }, [near]);

  const [showPretendModal, setShowPretendModal] = React.useState(false);

  return (
    <>
      <StyledDropdown className="dropdown">
        <button
          className="dropdown-toggle"
          type="button"
          id="dropdownMenu2222"
          data-bs-toggle="dropdown"
          aria-expanded="false"
        >
          <Widget
            src={props.widgets.profileImage}
            props={{
              accountId: account.accountId,
              className: "d-inline-block",
              style: { width: "40px", height: "40px" },
            }}
          />
          <div className="profile-info">
            {props.widgets.profileName && (
              <div className="profile-name">
                <Widget src={props.widgets.profileName} />
              </div>
            )}
            <div className="profile-username">{account.accountId}</div>
          </div>
        </button>
        <ul
          className="dropdown-menu"
          aria-labelledby="dropdownMenu2222"
          style={{ minWidth: "fit-content" }}
        >
          <li>
            <NavLink
              className="dropdown-item"
              type="button"
              to={`/${props.widgets.profilePage}?accountId=${account.accountId}`}
            >
              <User />
              My Profile
            </NavLink>
          </li>
          <li>
            <button
              className="dropdown-item"
              type="button"
              onClick={() => withdrawStorage()}
            >
              <Withdraw />
              Withdraw {props.availableStorage.div(1000).toFixed(2)}kb
            </button>
          </li>
          {account.pretendAccountId ? (
            <li>
              <button
                className="dropdown-item"
                type="button"
                disabled={!account.startPretending}
                onClick={() => account.startPretending(undefined)}
              >
                <StopPretending />
                Stop pretending
              </button>
            </li>
          ) : (
            <li>
              <button
                className="dropdown-item"
                type="button"
                onClick={() => setShowPretendModal(true)}
              >
                <Pretend />
                Pretend to be another account
              </button>
            </li>
          )}
          <li>
            <button
              className="dropdown-item"
              type="button"
              onClick={() => props.logOut()}
            >
              <LogOut />
              Sign Out
            </button>
          </li>
        </ul>
      </StyledDropdown>
      <PretendModal
        show={showPretendModal}
        onHide={() => setShowPretendModal(false)}
        widgets={props.widgets}
      />
    </>
  );
}

'''
'''--- webview/app/src/components/navigation/mobile/Menu.js ---
import React from "react";
import styled from "styled-components";
import { Close } from "../../icons/Close";
import { Home } from "../../icons/Home";
import { Book } from "../../icons/Book";
import { Code } from "../../icons/Code";
import { LogOut } from "../../icons/LogOut";
import { Fork } from "../../icons/Fork";
import { UserCircle } from "../../icons/UserCircle";
import { Widget } from "near-social-vm";
import { NavigationButton } from "../NavigationButton";
import { SignInButton } from "../SignInButton";
import { Link } from "react-router-dom";

const StyledMenu = styled.div`
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  display: flex;
  transition: 350ms;
  transform: translateX(-100%);

  &.show {
    transform: translateX(0);
  }

  ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }

  .left-side {
    flex: 80;
    background-color: var(--slate-dark-1);
    position: relative;
    display: flex;
    flex-direction: column;
    padding: 25px;
    overflow-x: auto;

    .nav-sign-in-btn {
      width: fit-content;
    }

    .profile-link {
      max-width: 100%;
      white-space: nowrap;

      :hover {
        text-decoration: none;
      }
    }

    img {
      border-radius: 50% !important;
    }

    .profile-name {
      color: var(--slate-dark-12);
      font-weight: var(--font-weight-bold);
      margin-top: 10px;
    }

    .profile-username {
      color: var(--slate-dark-11);
    }

    .profile-name,
    .profile-username {
      text-overflow: ellipsis;
      overflow: hidden;
    }
  }

  .top-links,
  .bottom-links {
    a,
    button {
      justify-content: flex-start;
      padding: 28px 0;
      display: flex;
      align-items: center;
      color: var(--slate-dark-11);
      font-weight: var(--font-weight-bold);

      svg {
        margin-right: 12px;
      }

      &.active,
      &:hover,
      &:focus {
        background-color: transparent;
        color: white;
        text-decoration: none;
        svg {
          path {
            stroke: white;
          }
        }
      }
    }
  }

  .top-links {
    margin-top: 40px;
  }

  .bottom-links {
    margin-top: auto;

    a,
    button {
      padding: 14px 0;
    }
  }

  .log-out-button {
    background: none;
    border: none;
    color: var(--slate-dark-11);
    font-weight: var(--font-weight-bold);
    padding: 28px 0;

    svg {
      path {
        stroke: #9ba1a6;
      }
    }
  }

  .close-button {
    background: none;
    border: none;
    position: absolute;
    right: 16px;
    top: 16px;
    padding: 10px;

    svg {
      margin: 0;
    }
  }

  .right-side {
    flex: 20;
    opacity: 0.8;
    background-color: var(--slate-dark-1);
  }
`;

export function Menu(props) {
  return (
    <StyledMenu className={props.showMenu ? "show" : ""}>
      <div className="left-side">
        {props.signedIn ? (
          <Link
            to={`/${props.widgets.profilePage}?accountId=${props.signedAccountId}`}
            className="profile-link"
          >
            <Widget
              src={props.widgets.profileImage}
              props={{
                accountId: props.signedAccountId,
                className: "d-inline-block",
                style: { width: "56px", height: "56px" },
              }}
            />
            {props.widgets.profileName && (
              <div className="profile-name">
                <Widget src={props.widgets.profileName} />
              </div>
            )}
            <div className="profile-username">{props.signedAccountId}</div>
          </Link>
        ) : (
          <SignInButton
            onSignIn={() => {
              props.onCloseMenu();
              props.requestSignIn();
            }}
          />
        )}
        <ul className="top-links">
          <li>
            <NavigationButton route="/">
              <Home />
              Home
            </NavigationButton>
          </li>
          <li>
            <NavigationButton
              disabled={!props.signedIn}
              route={`/${props.widgets.profilePage}?accountId=${props.signedAccountId}`}
            >
              <UserCircle />
              Profile
            </NavigationButton>
          </li>
          <li>
            <NavigationButton route="/edit">
              <Code />
              Create
            </NavigationButton>
          </li>
          <li>
            <NavigationButton href={props.documentationHref}>
              <Book />
              Documentation
            </NavigationButton>
          </li>
        </ul>
        <ul className="bottom-links">
          {props.widgetSrc?.edit && (
            <li>
              <Link to={`/edit/${props.widgetSrc?.edit}`}>
                <Fork />
                {props.widgetSrc.edit.startsWith(
                  `${props.signedAccountId}/widget/`
                )
                  ? "Edit widget"
                  : "Fork widget"}
              </Link>
            </li>
          )}
          {props.widgetSrc?.view && (
            <li>
              <Link
                to={`/${props.widgets.viewSource}?src=${props.widgetSrc?.view}`}
              >
                <Code />
                View source
              </Link>
            </li>
          )}
          {props.signedIn && (
            <li>
              <button onClick={() => props.logOut()} className="log-out-button">
                <LogOut />
                Sign Out
              </button>
            </li>
          )}
        </ul>
        <button className="close-button" onClick={props.onCloseMenu}>
          <Close />
        </button>
      </div>
      <div className="right-side" onClick={props.onCloseMenu} />
    </StyledMenu>
  );
}

'''
'''--- webview/app/src/components/navigation/mobile/MobileMenuButton.js ---
import React from "react";
import styled from "styled-components";

const StyledMobileMenuButton = styled.button`
  background-color: transparent;
  border: none;
  display: flex;
  align-items: center;
  color: white;
  font-weight: var(--font-weight-bold);
  padding: 0;

  .menu {
    width: 18px;
    height: 24px;
    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    margin-right: 10px;

    div {
      background-color: white;
      height: 2px;
      width: 100%;
      border-radius: 30px;
    }
  }
`;

export function MobileMenuButton(props) {
  return (
    <StyledMobileMenuButton onClick={props.onClick}>
      <div className="menu">
        <div />
        <div />
        <div />
      </div>
      {props.currentPage}
    </StyledMobileMenuButton>
  );
}

'''
'''--- webview/app/src/components/navigation/mobile/MobileNavigation.js ---
import React, { useState, useEffect } from "react";
import { Navigation } from "./Navigation";
import { Menu } from "./Menu";
import { useLocation } from "react-router-dom";
import useScrollBlock from ".././../../hooks/useScrollBlock";

export function MobileNavigation(props) {
  const [showMenu, setShowMenu] = useState(false);
  const [currentPage, setCurrentPage] = useState("");
  const location = useLocation();
  const [blockScroll, allowScroll] = useScrollBlock();

  useEffect(() => {
    setShowMenu(false);
    getCurrentPage();
    allowScroll();
  }, [location.pathname]);

  const getCurrentPage = () => {
    switch (location.pathname) {
      case "/":
        return setCurrentPage("Home");
      case `/${props.widgets.profilePage}`:
        return setCurrentPage("Profile");
      case "/edit":
        return setCurrentPage("Create");
      default:
        return setCurrentPage("");
    }
  };

  return (
    <>
      <Navigation
        {...props}
        currentPage={currentPage}
        onClickShowMenu={() => {
          setShowMenu(true);
          blockScroll();
        }}
      />
      <Menu
        {...props}
        showMenu={showMenu}
        onCloseMenu={() => {
          setShowMenu(false);
          allowScroll();
        }}
      />
    </>
  );
}

'''
'''--- webview/app/src/components/navigation/mobile/Navigation.js ---
import React from "react";
import styled from "styled-components";
import { Link } from "react-router-dom";
import { MobileMenuButton } from "./MobileMenuButton";
import { NearSocialLogo } from "../../icons/NearSocialLogo";
import { NotificationWidget } from "../NotificationWidget";
import { SignInButton } from "../SignInButton";

const StyledNavigation = styled.div`
  position: sticky;
  top: 0;
  left: 0;
  right: 0;
  width: 100%;
  background-color: var(--slate-dark-1);
  z-index: 1000;
  padding: 16px 24px;
  display: flex;
  align-items: center;
  justify-content: space-between;

  .logo-link {
    position: absolute;
    left: 0;
    right: 0;
    margin: auto;
    display: flex;
    align-items: center;
    justify-content: center;
    width: fit-content;
  }

  .nav-notification-widget {
    margin: 0;
  }

  .nav-sign-in-btn {
    background: none;
    border: none;
    padding-right: 0;
  }
`;

export function Navigation(props) {
  return (
    <StyledNavigation>
      <MobileMenuButton
        onClick={props.onClickShowMenu}
        currentPage={props.currentPage}
      />
      <Link to="/" className="logo-link">
        <NearSocialLogo />
      </Link>
      {props.signedIn ? (
        <NotificationWidget
          notificationButtonSrc={props.widgets.notificationButton}
        />
      ) : (
        <SignInButton onSignIn={() => props.requestSignIn()} />
      )}
    </StyledNavigation>
  );
}

'''
'''--- webview/app/src/data/selector.js ---
import { connect, KeyPair, keyStores } from 'near-api-js';

const keyStore = new keyStores.InMemoryKeyStore();

const contractId = (networkId) => {
    return {
        testnet: "v1.social08.testnet",
        mainnet: "social.near"
    }[networkId]
};

const connectionConfig = (keyStore, networkId) => {
    return {
        testnet: {
            networkId: "testnet",
            keyStore,
            nodeUrl: "https://rpc.testnet.near.org",
            walletUrl: "https://testnet.app.mynearwallet.com",
        },
        mainnet: {
            networkId: "mainnet",
            keyStore,
            nodeUrl: "https://rpc.near.org",
            walletUrl: "https://app.mynearwallet.com",
        }
    }[networkId]
};

class expectedAccount {
    constructor(account) { this.account = account }
    async signAndSendTransaction(tx) {
        try {
            const res = await this.account.signAndSendTransaction(tx);
            return res;
        } catch ({ name, message }) {
            console.log("tx error", `ERROR: ${message}`);
            throw Error(message)
        }
    }
    async signAndSendTransactions({ transactions }) {
        return Promise.all(
            transactions.map(tx => this.signAndSendTransaction(tx))
        );
    }
}

export async function create_selector(networkId = "mainnet", accountId, accessKey) {
    if (accessKey) {
        const keyPair = KeyPair.fromString(accessKey)
        await keyStore.setKey(networkId, accountId, keyPair)
    }

    const nearConnection = await connect(connectionConfig(keyStore, networkId));

    const account = await nearConnection.account(accountId);

    const walletState = {
        contract: { contractId: contractId(networkId) },
        accounts: [{ accountId }]
    }

    return {
        wallet: () => new expectedAccount(account),
        store: { observable: { subscribe: (f) => { f(walletState) } }, getState: () => walletState }
    }
}
'''
'''--- webview/app/src/data/widgets.js ---
const TestnetDomains = {
  "test.near.social": true,
  "127.0.0.1": true,
};

export const NetworkId =
  window.location.hostname in TestnetDomains ? "testnet" : "mainnet";
const TestnetWidgets = {
  image: "eugenethedream/widget/Image",
  default: "eugenethedream/widget/Welcome",
  viewSource: "eugenethedream/widget/WidgetSource",
  widgetMetadataEditor: "eugenethedream/widget/WidgetMetadataEditor",
  widgetMetadata: "eugenethedream/widget/WidgetMetadata",
  profileImage: "eugenethedream/widget/ProfileImage",
  profilePage: "eugenethedream/widget/Profile",
  profileName: "eugenethedream/widget/ProfileName",
  notificationButton: "eugenethedream/widget/NotificationButton",
};

const MainnetWidgets = {
  image: "mob.near/widget/Image",
  default: "mob.near/widget/Homepage",
  viewSource: "mob.near/widget/WidgetSource",
  widgetMetadataEditor: "mob.near/widget/WidgetMetadataEditor",
  widgetMetadata: "mob.near/widget/WidgetMetadata",
  profileImage: "mob.near/widget/ProfileImage",
  notificationButton: "mob.near/widget/NotificationButton",
  profilePage: "mob.near/widget/ProfilePage",
  profileName: "patrick.near/widget/ProfileName",
  editorComponentSearch: "mob.near/widget/Editor.ComponentSearch",
  profileInlineBlock: "mob.near/widget/Profile.InlineBlock",
  viewHistory: "bozon.near/widget/WidgetHistory",
};

export const Widgets =
  NetworkId === "testnet" ? TestnetWidgets : MainnetWidgets;

'''
'''--- webview/app/src/hooks/useQuery.js ---
import { useLocation } from "react-router-dom";
import React from "react";

export function useQuery() {
  const { search } = useLocation();

  return React.useMemo(() => new URLSearchParams(search), [search]);
}

'''
'''--- webview/app/src/hooks/useScrollBlock.js ---
import { useRef } from "react";

const safeDocument = typeof document !== "undefined" ? document : {};

/**
 * Usage:
 * const [blockScroll, allowScroll] = useScrollBlock();
 */
export default () => {
  const scrollBlocked = useRef();
  const html = safeDocument.documentElement;
  const { body } = safeDocument;

  const blockScroll = () => {
    if (!body || !body.style || scrollBlocked.current) return;

    const scrollBarWidth = window.innerWidth - html.clientWidth;
    const bodyPaddingRight =
      parseInt(
        window.getComputedStyle(body).getPropertyValue("padding-right")
      ) || 0;

    /**
     * 1. Fixes a bug in iOS and desktop Safari whereby setting
     *    `overflow: hidden` on the html/body does not prevent scrolling.
     * 2. Fixes a bug in desktop Safari where `overflowY` does not prevent
     *    scroll if an `overflow-x` style is also applied to the body.
     */
    html.style.position = "relative"; /* [1] */
    html.style.overflow = "hidden"; /* [2] */
    body.style.position = "relative"; /* [1] */
    body.style.overflow = "hidden"; /* [2] */
    body.style.paddingRight = `${bodyPaddingRight + scrollBarWidth}px`;

    scrollBlocked.current = true;
  };

  const allowScroll = () => {
    if (!body || !body.style || !scrollBlocked.current) return;

    html.style.position = "";
    html.style.overflow = "";
    body.style.position = "";
    body.style.overflow = "";
    body.style.paddingRight = "";

    scrollBlocked.current = false;
  };

  return [blockScroll, allowScroll];
};

'''
'''--- webview/app/src/images/near_social_combo.svg ---
<svg width="1601" height="250" viewBox="0 0 1601 250" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M452.2 200V60H479L556.4 164.6H550.8C550.267 160.467 549.8 156.467 549.4 152.6C549 148.6 548.6 144.6 548.2 140.6C547.933 136.467 547.667 132.267 547.4 128C547.267 123.6 547.133 119 547 114.2C546.867 109.267 546.8 103.933 546.8 98.2V60H576.2V200H549L470 94.4L477.6 94.6C478.267 101.533 478.8 107.467 479.2 112.4C479.733 117.2 480.133 121.4 480.4 125C480.667 128.6 480.867 131.733 481 134.4C481.267 137.067 481.4 139.6 481.4 142C481.533 144.4 481.6 146.933 481.6 149.6V200H452.2ZM658.752 202C647.285 202 637.285 199.667 628.752 195C620.218 190.333 613.552 183.933 608.752 175.8C603.952 167.667 601.552 158.333 601.552 147.8C601.552 139.667 602.885 132.2 605.552 125.4C608.218 118.6 611.952 112.733 616.752 107.8C621.552 102.733 627.218 98.8667 633.752 96.2C640.418 93.4 647.618 92 655.352 92C662.552 92 669.218 93.3333 675.352 96C681.485 98.5333 686.752 102.2 691.152 107C695.685 111.667 699.152 117.2 701.552 123.6C703.952 130 705.018 137 704.752 144.6L704.552 153.4H619.552L614.952 136H681.152L677.952 139.6V135.2C677.685 131.6 676.485 128.333 674.352 125.4C672.352 122.467 669.752 120.2 666.552 118.6C663.352 117 659.752 116.2 655.752 116.2C649.885 116.2 644.885 117.333 640.752 119.6C636.752 121.867 633.685 125.2 631.552 129.6C629.418 134 628.352 139.333 628.352 145.6C628.352 152 629.685 157.533 632.352 162.2C635.152 166.867 639.018 170.533 643.952 173.2C649.018 175.733 654.952 177 661.752 177C666.418 177 670.685 176.267 674.552 174.8C678.418 173.333 682.552 170.8 686.952 167.2L700.552 186.2C696.685 189.667 692.418 192.6 687.752 195C683.085 197.267 678.285 199 673.352 200.2C668.418 201.4 663.552 202 658.752 202ZM765.339 202C756.539 202 748.606 199.6 741.539 194.8C734.472 190 728.872 183.467 724.739 175.2C720.606 166.933 718.539 157.467 718.539 146.8C718.539 136.133 720.606 126.733 724.739 118.6C729.006 110.333 734.739 103.867 741.939 99.2C749.139 94.4 757.339 92 766.539 92C771.739 92 776.472 92.8 780.739 94.4C785.139 95.8667 788.939 97.9333 792.139 100.6C795.472 103.267 798.272 106.333 800.539 109.8C802.806 113.267 804.406 117 805.339 121L799.339 120V94.2H827.539V200H798.939V174.6L805.339 174C804.272 177.733 802.539 181.267 800.139 184.6C797.739 187.933 794.739 190.933 791.139 193.6C787.672 196.133 783.739 198.2 779.339 199.8C774.939 201.267 770.272 202 765.339 202ZM773.139 177.4C778.472 177.4 783.139 176.133 787.139 173.6C791.139 171.067 794.206 167.533 796.339 163C798.606 158.333 799.739 152.933 799.739 146.8C799.739 140.8 798.606 135.533 796.339 131C794.206 126.467 791.139 122.933 787.139 120.4C783.139 117.733 778.472 116.4 773.139 116.4C767.939 116.4 763.339 117.733 759.339 120.4C755.472 122.933 752.406 126.467 750.139 131C747.872 135.533 746.739 140.8 746.739 146.8C746.739 152.933 747.872 158.333 750.139 163C752.406 167.533 755.472 171.067 759.339 173.6C763.339 176.133 767.939 177.4 773.139 177.4ZM856.013 200V94.2H883.413L884.413 128.2L879.613 121.2C881.213 115.733 883.813 110.8 887.413 106.4C891.013 101.867 895.213 98.3333 900.013 95.8C904.946 93.2667 910.079 92 915.413 92C917.679 92 919.879 92.2 922.013 92.6C924.146 93 925.946 93.4667 927.413 94L919.813 125.2C918.213 124.4 916.279 123.733 914.013 123.2C911.746 122.533 909.413 122.2 907.013 122.2C903.813 122.2 900.813 122.8 898.013 124C895.346 125.067 893.013 126.667 891.013 128.8C889.013 130.8 887.413 133.2 886.213 136C885.146 138.8 884.613 141.867 884.613 145.2V200H856.013ZM1054.44 202C1045.77 202 1037.84 200.933 1030.64 198.8C1023.57 196.667 1017.24 193.533 1011.64 189.4C1006.17 185.267 1001.24 180.267 996.836 174.4L1015.64 153C1022.17 162.067 1028.64 168.267 1035.04 171.6C1041.57 174.8 1048.64 176.4 1056.24 176.4C1060.37 176.4 1064.04 175.867 1067.24 174.8C1070.57 173.6 1073.17 171.933 1075.04 169.8C1076.9 167.667 1077.84 165.133 1077.84 162.2C1077.84 160.067 1077.37 158.133 1076.44 156.4C1075.5 154.533 1074.17 152.933 1072.44 151.6C1070.7 150.133 1068.64 148.867 1066.24 147.8C1063.84 146.6 1061.17 145.6 1058.24 144.8C1055.3 143.867 1052.1 143.133 1048.64 142.6C1041.17 140.867 1034.64 138.8 1029.04 136.4C1023.44 133.867 1018.77 130.8 1015.04 127.2C1011.3 123.467 1008.5 119.267 1006.64 114.6C1004.9 109.933 1004.04 104.667 1004.04 98.8C1004.04 92.8 1005.37 87.2667 1008.04 82.2C1010.7 77 1014.37 72.5333 1019.04 68.8C1023.84 65.0667 1029.3 62.2 1035.44 60.2C1041.7 58.2 1048.3 57.2 1055.24 57.2C1063.77 57.2 1071.24 58.2 1077.64 60.2C1084.04 62.0667 1089.57 64.8 1094.24 68.4C1099.04 72 1103.04 76.4 1106.24 81.6L1087.24 100C1084.44 96.2667 1081.37 93.1333 1078.04 90.6C1074.84 88.0667 1071.3 86.2 1067.44 85C1063.7 83.6667 1059.84 83 1055.84 83C1051.44 83 1047.64 83.6 1044.44 84.8C1041.24 85.8667 1038.7 87.4667 1036.84 89.6C1035.1 91.7333 1034.24 94.3333 1034.24 97.4C1034.24 99.8 1034.84 101.933 1036.04 103.8C1037.24 105.667 1038.97 107.333 1041.24 108.8C1043.5 110.133 1046.24 111.333 1049.44 112.4C1052.64 113.467 1056.17 114.4 1060.04 115.2C1067.37 116.667 1073.97 118.6 1079.84 121C1085.7 123.4 1090.7 126.333 1094.84 129.8C1099.1 133.133 1102.37 137.133 1104.64 141.8C1106.9 146.333 1108.04 151.467 1108.04 157.2C1108.04 166.667 1105.77 174.733 1101.24 181.4C1096.7 188.067 1090.44 193.2 1082.44 196.8C1074.44 200.267 1065.1 202 1054.44 202ZM1180.41 202C1169.61 202 1159.94 199.667 1151.41 195C1143.01 190.2 1136.34 183.667 1131.41 175.4C1126.61 167.133 1124.21 157.667 1124.21 147C1124.21 136.333 1126.61 126.933 1131.41 118.8C1136.34 110.533 1143.01 104 1151.41 99.2C1159.94 94.4 1169.61 92 1180.41 92C1191.07 92 1200.61 94.4 1209.01 99.2C1217.54 104 1224.21 110.533 1229.01 118.8C1233.81 126.933 1236.21 136.333 1236.21 147C1236.21 157.667 1233.81 167.133 1229.01 175.4C1224.21 183.667 1217.54 190.2 1209.01 195C1200.61 199.667 1191.07 202 1180.41 202ZM1180.41 177.2C1185.61 177.2 1190.27 175.933 1194.41 173.4C1198.54 170.733 1201.74 167.133 1204.01 162.6C1206.41 157.933 1207.61 152.733 1207.61 147C1207.61 141.133 1206.41 135.933 1204.01 131.4C1201.74 126.733 1198.54 123.133 1194.41 120.6C1190.27 117.933 1185.61 116.6 1180.41 116.6C1175.07 116.6 1170.34 117.933 1166.21 120.6C1162.07 123.267 1158.81 126.867 1156.41 131.4C1154.01 135.933 1152.87 141.133 1153.01 147C1152.87 152.733 1154.01 157.933 1156.41 162.6C1158.81 167.133 1162.07 170.733 1166.21 173.4C1170.34 175.933 1175.07 177.2 1180.41 177.2ZM1303.58 202C1293.44 202 1284.38 199.6 1276.38 194.8C1268.38 190 1262.04 183.467 1257.38 175.2C1252.84 166.933 1250.58 157.533 1250.58 147C1250.58 136.6 1252.84 127.267 1257.38 119C1262.04 110.6 1268.38 104 1276.38 99.2C1284.38 94.4 1293.44 92 1303.58 92C1313.04 92 1321.71 93.7333 1329.58 97.2C1337.44 100.667 1343.58 105.467 1347.98 111.6L1332.38 130.4C1330.51 127.867 1328.18 125.6 1325.38 123.6C1322.58 121.467 1319.51 119.8 1316.18 118.6C1312.98 117.4 1309.64 116.8 1306.18 116.8C1300.71 116.8 1295.84 118.133 1291.58 120.8C1287.44 123.333 1284.18 126.867 1281.78 131.4C1279.38 135.933 1278.18 141.133 1278.18 147C1278.18 152.733 1279.38 157.867 1281.78 162.4C1284.31 166.8 1287.71 170.4 1291.98 173.2C1296.24 175.867 1301.04 177.2 1306.38 177.2C1309.84 177.2 1313.11 176.733 1316.18 175.8C1319.24 174.733 1322.11 173.2 1324.78 171.2C1327.58 169.2 1330.11 166.8 1332.38 164L1347.78 182.8C1343.24 188.533 1336.98 193.2 1328.98 196.8C1320.98 200.267 1312.51 202 1303.58 202ZM1368.37 200V94.2H1396.77V200H1368.37ZM1382.37 72.4C1376.91 72.4 1372.64 71.0667 1369.57 68.4C1366.51 65.7333 1364.97 61.9333 1364.97 57C1364.97 52.4667 1366.51 48.8 1369.57 46C1372.77 43.0667 1377.04 41.6 1382.37 41.6C1387.84 41.6 1392.11 43 1395.17 45.8C1398.24 48.4667 1399.77 52.2 1399.77 57C1399.77 61.6667 1398.17 65.4 1394.97 68.2C1391.91 71 1387.71 72.4 1382.37 72.4ZM1466.71 202C1457.91 202 1449.97 199.6 1442.91 194.8C1435.84 190 1430.24 183.467 1426.11 175.2C1421.97 166.933 1419.91 157.467 1419.91 146.8C1419.91 136.133 1421.97 126.733 1426.11 118.6C1430.37 110.333 1436.11 103.867 1443.31 99.2C1450.51 94.4 1458.71 92 1467.91 92C1473.11 92 1477.84 92.8 1482.11 94.4C1486.51 95.8667 1490.31 97.9333 1493.51 100.6C1496.84 103.267 1499.64 106.333 1501.91 109.8C1504.17 113.267 1505.77 117 1506.71 121L1500.71 120V94.2H1528.91V200H1500.31V174.6L1506.71 174C1505.64 177.733 1503.91 181.267 1501.51 184.6C1499.11 187.933 1496.11 190.933 1492.51 193.6C1489.04 196.133 1485.11 198.2 1480.71 199.8C1476.31 201.267 1471.64 202 1466.71 202ZM1474.51 177.4C1479.84 177.4 1484.51 176.133 1488.51 173.6C1492.51 171.067 1495.57 167.533 1497.71 163C1499.97 158.333 1501.11 152.933 1501.11 146.8C1501.11 140.8 1499.97 135.533 1497.71 131C1495.57 126.467 1492.51 122.933 1488.51 120.4C1484.51 117.733 1479.84 116.4 1474.51 116.4C1469.31 116.4 1464.71 117.733 1460.71 120.4C1456.84 122.933 1453.77 126.467 1451.51 131C1449.24 135.533 1448.11 140.8 1448.11 146.8C1448.11 152.933 1449.24 158.333 1451.51 163C1453.77 167.533 1456.84 171.067 1460.71 173.6C1464.71 176.133 1469.31 177.4 1474.51 177.4ZM1557.58 200V52H1585.98V200H1557.58Z" fill="black"/>
<path d="M107.137 208L18 124.5L107.137 41" stroke="#3D7FFF" stroke-width="35" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M224.924 41L313 124.5L224.924 208" stroke="#3D7FFF" stroke-width="35" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- webview/app/src/images/near_social_icon.svg ---
<svg width="331" height="203" viewBox="0 0 331 203" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M107.137 185L18 101.5L107.137 18" stroke="#3D7FFF" stroke-width="35" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M224.924 18L313 101.5L224.924 185" stroke="#3D7FFF" stroke-width="35" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- webview/app/src/index.css ---
:root {
  --slate-dark-1: #151718;
  --slate-dark-5: #2B2F31;
  --slate-dark-6: #313538;
  --slate-dark-8: #4C5155;
  --slate-dark-9: #697177;
  --slate-dark-11: #9BA1A6;
  --slate-dark-12: #ECEDEE;
  --blue-light-9: #0091FF;

  --font-weight-medium: 500;
  --font-weight-bold: 600;
}
'''
'''--- webview/app/src/index.js ---
import React from "react";
import { createRoot } from "react-dom/client";
import "./index.css";
import App from "./App";

// Overwrite logging behavior, to capture it in vscode
const classicLog = console.log
console.log = (...data) => {
    vscode.postMessage({ command: "console.log", data: JSON.parse(JSON.stringify(data)) });
    classicLog(data)
}

const classicError = console.error
console.error = (...data) => {
    vscode.postMessage({ command: "console.log", data: JSON.parse(JSON.stringify(data)) });
    classicError(data)
}

// React
const container = document.getElementById("root");
const root = createRoot(container);

// Handle messages sent from VSCode to the Webview
window.addEventListener("message", (event) => {
    const message = event.data; // The json data that the extension sent

    switch (message.command) {
        case "update-code":
            if (message.code) {
                root.render(<App code={message.code} wProps={message.props} flags={message.flags} vsContext={message.context} />);
            }
            break;
        default:
            break;
    }
});

// @ts-ignore
// eslint-disable-next-line no-undef
const vscode = acquireVsCodeApi();
'''
'''--- webview/app/src/pages/EmbedPage.js ---
import React from "react";
import { Widget } from "near-social-vm";

export default function EmbedPage({ code, wProps, flags, vsContext, viewerProps }) {
  return (
    <>
      <Widget
        src={vsContext.wrapperSrc}
        config={{ redirectMap: flags }}
        props={{
          ...vsContext.wrapperProps,
          ...viewerProps,
          children: (
            <>
              <div className="position-relative overflow-hidden mt-3">
                <Widget code={code} props={wProps} config={{ redirectMap: flags }} />
              </div>
            </>
          ),
        }}
      />
    </>
  )
}

'''
'''--- webview/app/webpack.config.js ---
const webpack = require("webpack");
const paths = require("./config/paths");
const path = require("path");
const ManifestPlugin = require("webpack-manifest-plugin");
const { CleanWebpackPlugin } = require("clean-webpack-plugin");
const HTMLWebpackPlugin = require("html-webpack-plugin");
const CopyWebpackPlugin = require("copy-webpack-plugin");
const { merge } = require("webpack-merge");
const loadPreset = require("./config/presets/loadPreset");
const { WebpackManifestPlugin } = require("webpack-manifest-plugin");
const loadConfig = (mode) => require(`./config/webpack.${mode}.js`)(mode);

module.exports = function (env) {
  const { mode = "production" } = env || {};
  return merge(
    {
      mode,
      entry: `${paths.srcPath}/index.js`,
      output: {
        path: paths.distPath,
        filename: "[file].bundle.js",
        publicPath: "/",
      },
      module: {
        rules: [
          {
            test: /\.m?js/,
            resolve: {
              fullySpecified: false,
            },
          },
          {
            test: /\.js$/,
            use: ["babel-loader"],
            exclude: path.resolve(__dirname, "node_modules"),
          },
          // Images: Copy image files to build folder
          { test: /\.(?:ico|gif|png|jpg|jpeg)$/i, type: "asset/resource" },

          // Fonts and SVGs: Inline files
          { test: /\.(woff(2)?|eot|ttf|otf|svg|)$/, type: "asset/inline" },
        ],
      },
      resolve: {
        modules: [paths.srcPath, "node_modules"],
        extensions: [".js", ".jsx", ".json"],
        fallback: {
          crypto: require.resolve("crypto-browserify"),
          stream: require.resolve("stream-browserify"),
        },
      },
      plugins: [
        new webpack.EnvironmentPlugin({
          // Configure environment variables here.
          ENVIRONMENT: "browser",
        }),
        new CleanWebpackPlugin(),
        // Copies files from target to destination folder
        new CopyWebpackPlugin({
          patterns: [
            {
              from: paths.publicPath,
              to: "assets",
              globOptions: {
                ignore: ["*.DS_Store"],
              },
              noErrorOnMissing: true,
            },
          ],
        }),
        new HTMLWebpackPlugin({
          template: `${paths.publicPath}/index.html`,
          favicon: `${paths.publicPath}/favicon.png`,
          robots: `${paths.publicPath}/robots.txt`,
        }),
        new webpack.ProgressPlugin(),
        new webpack.ProvidePlugin({
          process: "process/browser",
          Buffer: [require.resolve("buffer/"), "Buffer"],
        }),
        new ManifestPlugin.WebpackManifestPlugin(),
      ],
    },
    loadConfig(mode),
    loadPreset(env)
  );
};

'''