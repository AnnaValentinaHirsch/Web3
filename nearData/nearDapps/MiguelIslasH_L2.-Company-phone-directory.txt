*GitHub Repository "MiguelIslasH/L2.-Company-phone-directory"*

'''--- README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `yarn start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `yarn test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `yarn build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `yarn eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `yarn build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- package.json ---
{
  "name": "company-phone-dir",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "bootstrap": "^5.1.3",
    "near-api-js": "^0.43.1",
    "react": "^17.0.2",
    "react-bootstrap": "^1.6.4",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3",
    "web-vitals": "^1.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- src/App.js ---
import "./App.css";

import Login from "./components/login/login";
import Main from "./components/main/main";

function App() {
  const isLoggedIn = localStorage.getItem(
    "near-api-js:keystore:miguelislas.testnet:testnet"
  );
  return <div className="App">{isLoggedIn ? <Main /> : <Login />}</div>;
}

export default App;

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/components/login/description.js ---
function Description() {
  return (
    <p>
      Here's a phone directory where you will find contact data of top
      companies.
      <br />
      You will find the name of the company, their phone number, a contact
      email, their location, who registered it, etc.
      <br />
      <br />
      Also you can register your own company, so other users can find you
      easily.
    </p>
  );
}

export default Description;

'''
'''--- src/components/login/header.js ---
function Header() {
  return <h1>Company phone directory</h1>;
}

export default Header;

'''
'''--- src/components/login/login-button.js ---
import { useState, useEffect } from "react";

import Button from "react-bootstrap/Button";
import Login from "./login";
import Row from "react-bootstrap/Row";
import Container from "react-bootstrap/Container";

import { getWallet, getCompaniesData, CONTRACT_ID } from "../../lib/near";

function LoginButton(props) {
  const [wallet, setWallet] = useState();
  const [accountId, setAccountId] = useState("");
  const [infoMessage, setInfoMessage] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        const tempWallet = await getWallet();
        setWallet(tempWallet);
        setAccountId(tempWallet.getAccountId());
        setLoading(false);
      } catch (e) {
        console.log(e);
      }
    })();
  }, []);

  const login = async () => {
    setLoading(true);
    try {
      await wallet.requestSignIn(CONTRACT_ID, "Companies phone directory");
    } catch (e) {
      console.log(e);
    }
    setLoading(false);
    // eslint-disable-next-line no-restricted-globals
    //location.reload();
  };

  return (
    <Container className="">
      <Button
        variant="success"
        className="m-4"
        size="md"
        onClick={() => login()}
      >
        Log in
      </Button>
      <span>Log in to start viewing companies's data</span>
    </Container>
  );
}

export default LoginButton;

'''
'''--- src/components/login/login.js ---
import Header from "./header";
import Description from "./description";
import LoginButton from "./login-button";

import classes from "./login.module.css";

function Login(props) {
  return (
    <div className={classes.fondo}>
      <Header />
      <Description />
      <LoginButton setIsLoggedIn={props.setIsLoggedIn} />
    </div>
  );
}

export default Login;

'''
'''--- src/components/login/login.module.css ---
.fondo {
  background-color: #6792ab;
  min-height: 100vh;
  justify-content: center;
  align-items: center;
}

'''
'''--- src/components/main/comapnies-list.js ---
import Row from "react-bootstrap/Row";

import CompanyCard from "./company-card";

import classes from "./companies.module.css";

function CompaniesList(props) {
  return (
    <Row className="d-flex justify-content-around">
      {props.companies.map((company) => {
        return (
          <CompanyCard
            className={classes.companyCard}
            name={company.name}
            creatorId={company.creatorId}
            phone={company.phone}
            email={company.email}
            numberEmployees={company.numberEmployees}
            location={company.location}
            website={company.website}
          />
        );
      })}
    </Row>
  );
}

export default CompaniesList;

'''
'''--- src/components/main/companies.js ---
import { useState, useEffect } from "react";

import Container from "react-bootstrap/Container";

import { getCompaniesData, getWallet } from "../../lib/near";
import CompaniesList from "./comapnies-list";

function Companies(props) {
  const [wallet, setWallet] = useState();
  const [accountId, setAccountId] = useState("");
  const [loading, setLoading] = useState(true);
  const [companiesData, setCompaniesData] = useState([]);

  useEffect(() => {
    (async () => {
      try {
        const tempWallet = await getWallet();
        console.log(tempWallet);
        setWallet(tempWallet);
        setAccountId(tempWallet.getAccountId());
      } catch (e) {
        console.log(e);
      }
    })();
  }, []);

  useEffect(() => {
    setLoading(true);
    (async () => {
      try {
        const result = await getCompaniesData(wallet);
        const {
          status: { SuccessValue },
        } = result;
        const contractResponse = atob(SuccessValue).split("\\n");
        const jsonData = JSON.parse(contractResponse);
        console.log(props.companyName);
        if (props.companyName) {
          jsonData.forEach((company) => {
            if (company.name === props.companyName) {
              setCompaniesData([company]);
              setLoading(false);
            }
          });
        } else {
          setCompaniesData(jsonData);
          setLoading(false);
        }
      } catch (e) {
        console.log(e);
      }
    })();
  }, [wallet, props.companyName]);

  return (
    <Container className="m-4">
      {console.log(accountId)}
      {loading ? (
        <p>loading...</p>
      ) : (
        <CompaniesList companies={companiesData} />
      )}
    </Container>
  );
}

export default Companies;

'''
'''--- src/components/main/companies.module.css ---
.companyCard {
  margin: 2rem;
}

'''
'''--- src/components/main/company-card.js ---
import Card from "react-bootstrap/Card";

function CompanyCard(props) {
  return (
    <Card border="secondary" style={{ width: "18rem" }}>
      <Card.Header>{props.name}</Card.Header>
      <Card.Body>
        <Card.Title>{props.creatorId}</Card.Title>
        <Card.Text>
          <p>Location: {props.location}</p>
          <p>Phone: {props.phone}</p>
          <p>Number employees: {props.numberEmployees}</p>
          <p>email: {props.email}</p>
          <p>website: {props.website}</p>
        </Card.Text>
      </Card.Body>
    </Card>
  );
}

export default CompanyCard;

'''
'''--- src/components/main/main.js ---
import { useState } from "react";

import NavBar from "./navbar";

import Companies from "./companies";

function Main() {
  const [companyName, setCompanyName] = useState("");

  return (
    <div>
      <NavBar setCompanyName={setCompanyName} />
      <Companies companyName={companyName} />
    </div>
  );
}

export default Main;

'''
'''--- src/components/main/navbar.js ---
import { useState, useEffect, useRef } from "react";

import Navbar from "react-bootstrap/Navbar";
import Button from "react-bootstrap/Button";
import Form from "react-bootstrap/Form";
import FormControl from "react-bootstrap/FormControl";

import { getWallet } from "../../lib/near";
import RegisterModal from "./registerModal";

import classes from "./navbar.module.css";

function NavBar(props) {
  const [wallet, setWallet] = useState();
  const [accountId, setAccountId] = useState("");
  const [showModal, setShowModal] = useState(false);

  const searchRef = useRef();

  useEffect(() => {
    (async () => {
      try {
        const tempWallet = await getWallet();
        setWallet(tempWallet);
        setAccountId(tempWallet.getAccountId());
      } catch (e) {
        console.log(e);
      }
    })();
  }, []);

  const signOut = () => {
    try {
      wallet.signOut();
      localStorage.removeItem(
        "near-api-js:keystore:miguelislas.testnet:testnet"
      );
    } catch (e) {
      console.log(e);
    }
    // eslint-disable-next-line no-restricted-globals
    location.reload();
  };

  return (
    <>
      <Navbar bg="light" expand="lg">
        <Navbar.Brand href="#">Companies phone directory</Navbar.Brand>
        <Navbar.Toggle aria-controls="navbarScroll" />
        <Navbar.Collapse id="navbarScroll">
          <Form className="d-flex justify-content-between">
            <FormControl
              type="search"
              placeholder="Search"
              className={classes.myNavbar}
              aria-label="Search"
              ref={searchRef}
            />
            <Button
              variant="outline-info"
              onClick={() => props.setCompanyName(searchRef.current.value)}
            >
              Search
            </Button>
          </Form>
          <Navbar.Collapse className="justify-content-end">
            <Button variant="success" onClick={() => setShowModal(true)}>
              Register company
            </Button>
            <Button variant="danger" className="m-2" onClick={signOut}>
              Log out
            </Button>
          </Navbar.Collapse>
        </Navbar.Collapse>
      </Navbar>
      <RegisterModal show={showModal} handleClose={() => setShowModal(false)} />
    </>
  );
}

export default NavBar;

'''
'''--- src/components/main/navbar.module.css ---
.myNavbar {
  width: 45rem;
  margin-right: 2rem;
}

'''
'''--- src/components/main/registerModal.js ---
import { useRef, useState, useEffect } from "react";

import Modal from "react-bootstrap/Modal";
import Button from "react-bootstrap/Button";
import Form from "react-bootstrap/Form";

import { getWallet, registerCompany } from "../../lib/near";

function RegisterModal(props) {
  const nameRef = useRef();
  const phoneRef = useRef();
  const emailRef = useRef();
  const numberRef = useRef();
  const websiteRef = useRef();
  const locationRef = useRef();

  const [wallet, setWallet] = useState();
  const [accountId, setAccountId] = useState("");

  useEffect(() => {
    (async () => {
      try {
        const tempWallet = await getWallet();
        console.log(tempWallet);
        setWallet(tempWallet);
        setAccountId(tempWallet.getAccountId());
      } catch (e) {
        console.log(e);
      }
    })();
  }, []);

  const registerCompanyHandler = async () => {
    const company = {
      name: nameRef.current.value,
      phone: phoneRef.current.value,
      email: emailRef.current.value,
      numberEmployees: numberRef.current.value,
      website: websiteRef.current.value,
      location: locationRef.current.value,
    };

    console.log(company);

    try {
      console.log("Por llamar");
      const res = await registerCompany(wallet, company);
      console.log(res);
      // eslint-disable-next-line no-restricted-globals
      location.reload();
    } catch (e) {
      console.log("error");
      console.log(e);
    }
  };

  return (
    <Modal show={props.show} onHide={props.handleClose}>
      <Modal.Dialog>
        <Modal.Header>
          <Modal.Title>Register company</Modal.Title>
        </Modal.Header>
        {console.log(accountId)}
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3" controlId="exampleForm.ControlInput1">
              <Form.Label>Company's name:</Form.Label>
              <Form.Control
                type="text"
                placeholder="Name of the company"
                ref={nameRef}
              />
            </Form.Group>

            <Form.Group className="mb-3" controlId="exampleForm.ControlInput1">
              <Form.Label>Company's phone:</Form.Label>
              <Form.Control
                type="text"
                placeholder="phone of the company"
                ref={phoneRef}
              />
            </Form.Group>

            <Form.Group className="mb-3" controlId="exampleForm.ControlInput1">
              <Form.Label>Company's email:</Form.Label>
              <Form.Control
                type="email"
                placeholder="email of the company"
                ref={emailRef}
              />
            </Form.Group>

            <Form.Group className="mb-3" controlId="exampleForm.ControlInput1">
              <Form.Label>Number of employees:</Form.Label>
              <Form.Control
                type="text"
                placeholder="How many employees are working here?"
                ref={numberRef}
              />
            </Form.Group>

            <Form.Group className="mb-3" controlId="exampleForm.ControlInput1">
              <Form.Label>Company's website:</Form.Label>
              <Form.Control
                type="text"
                placeholder="website of the company"
                ref={websiteRef}
              />
            </Form.Group>

            <Form.Group className="mb-3" controlId="exampleForm.ControlInput1">
              <Form.Label>Company's location:</Form.Label>
              <Form.Control
                type="text"
                placeholder="Location of the company"
                ref={locationRef}
              />
            </Form.Group>
          </Form>
        </Modal.Body>

        <Modal.Footer>
          <Button variant="secondary" onClick={props.handleClose}>
            Close
          </Button>
          <Button variant="primary" onClick={() => registerCompanyHandler()}>
            Register company
          </Button>
        </Modal.Footer>
      </Modal.Dialog>
    </Modal>
  );
}

export default RegisterModal;

'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- src/index.js ---
import "bootstrap/dist/css/bootstrap.min.css";
import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./App";
import reportWebVitals from "./reportWebVitals";

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById("root")
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/lib/near.js ---
import { keyStores, connect, WalletConnection, utils } from "near-api-js";
import BN from "bn.js";

export const CONTRACT_ID = "dev-1634742185963-52355839606274";
export const gas = new BN("70000000000000");

export const getWallet = async () => {
  const near = await connect({
    networkId: "testnet",
    keyStore: new keyStores.BrowserLocalStorageKeyStore(),
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
  });
  const wallet = new WalletConnection(near, "miguelislas");
  return wallet;
};

export const getCompaniesData = async (wallet) => {
  const response = await wallet.account().functionCall({
    contractId: CONTRACT_ID,
    methodName: "getCompaniesData",
    gas,
  });
  return response;
};

export const registerCompany = async (wallet, company) => {
  const response = await wallet.account().functionCall({
    contractId: CONTRACT_ID,
    methodName: "registerCompany",
    args: company,
    gas,
  });
  return response;
};

'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''