*GitHub Repository "humanman/near-sample-thanks-tutorial"*

'''--- .forestry/front_matter/templates/documentation-page.yml ---
---
label: Documentation Page
hide_body: false
fields:
- type: text
  name: title
  label: title
- type: datetime
  name: date
  label: date
  config:
    date_format: MM/DD/YYYY
    export_format: YYYY-MM-DD
- type: text
  name: slug
  label: slug
pages:
- tutorials/editing-in-forestry.md

'''
'''--- .forestry/settings.yml ---
---
new_page_extension: md
auto_deploy: false
admin_path: ''
webhook_url: 
sections:
- type: heading
  label: Content
- type: directory
  path: tutorials
  label: Tutorials
  create: all
  match: "**/*"
  templates:
  - documentation-page
- type: heading
  label: Settings
- type: document
  path: data/settings.json
  label: Menu
upload_dir: static
public_path: ''
front_matter_path: ''
use_front_matter_path: false
file_template: ":filename:"
build:
  preview_output_directory: dist
  install_dependencies_command: yarn
  preview_docker_image: node:12
  mount_path: "/srv"
  working_dir: "/srv"
  instant_preview_command: yarn develop

'''
'''--- README.md ---
# ![NEAR](https://github.com/humanman/near-sample-thanks-tutorial/blob/master/src/assets/img/logo_near_bright.svg)

This is my base application for creating rich tutorials focused on blockchain development. 

Currently, I am working on a tutorial for writing Smart Contracts on the NEAR protocol. Once completed, I will start a growing list of tutorial microsites built with this theme. 

I hope to see you back!
## Local installation for development

1. `$ git clone https://github.com/humanman/near-sample-thanks-tutorial project-name`.
2. `$ cd project-name`
3. `$ yarn`
4. `$ gridsome develop`.

## Deploy to Netlify

[![Deploy to Netlify](https://www.netlify.com/img/deploy/button.svg)](https://app.netlify.com/start/deploy?repository=https://github.com/humanman/near-sample-thanks-tutorial)

This project has been pre-configured to work with [Forestry](https://forestry.io). Any changes you make in Forestry will be committed back to your repo. ✨

## Credits

* Creds to the [Samuel Horn](https://jamdocs.samuelhorn.com/) for making an awesome Gridsome template!

## License

[MIT](https://github.com/humanman/near-sample-thanks-tutorial/blob/master/LICENSE)

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "assebmly/"
  ]
}

'''
'''--- data/settings.json ---
{
  "sidebar": [
    {
      "section": "Introduction",
      "topics": [
        {
          "title": "Getting started",
          "slug": "getting-started"
        }
      ]
    },
    {
      "section": "Smart Contracts",
      "topics": [
        {
          "title": "Thanks",
          "slug": "thanks"
        }
      ]
    }
  ]
}

'''
'''--- gridsome.config.js ---
// This is where project configuration and plugin options are located. 
// Learn more: https://gridsome.org/docs/config

// Changes here require a server restart.
// To restart press CTRL + C in terminal and run `gridsome develop`
const path = require('path')

function addStyleResource (rule) {
  rule.use('style-resource')
    .loader('style-resources-loader')
    .options({
      patterns: [
        path.resolve(__dirname, './src/assets/scss/config/*.scss')
      ],
    })
}
const siteName = 'Mezze-Tech'
module.exports = {
  siteName: siteName,
  siteUrl: 'https://github.com/humnaman/near-sample-thanks-tutorial',
  titleTemplate: `${siteName} - %s`,
  plugins: [
    {
      use: '@gridsome/vue-remark',
      options: {
        baseDir: './tutorials/',
        route: '/:slug',
        typeName: 'Tutorial',
        template: './src/templates/Tutorial.vue',
        includePaths: ['~/src/components'],
        plugins: ['@gridsome/remark-prismjs'],
      }
    },
    {
      use: '@gridsome/plugin-google-analytics',
      options: {
        id: (process.env.GA_ID ? process.env.GA_ID : 'XX-999999999-9')
      }
    },
    {
      use: '@gridsome/plugin-sitemap',
      options: {
        cacheTime: 600000
      }
    }
  ],
  chainWebpack: config => {
    const types = ['vue-modules', 'vue', 'normal-modules', 'normal']
    types.forEach(type => addStyleResource(config.module.rule('scss').oneOf(type)))
  }
}

'''
'''--- gridsome.server.js ---
// Server API makes it possible to hook into various parts of Gridsome
// on server-side and add custom data to the GraphQL data layer.
// Learn more: https://gridsome.org/docs/server-api

// Changes here require a server restart.
// To restart press CTRL + C in terminal and run `gridsome develop`
const nodeExternals = require('webpack-node-externals')

module.exports = function (api) {
  
  api.chainWebpack((config, { isServer }) => {
    if (isServer) {
      config.externals([
        nodeExternals({
          allowlist: [/^vuetify/]
        })
      ])
    }
  })

  api.loadSource(store => {
    // Use the Data Store API here: https://gridsome.org/docs/data-store-api

    const data = require('./data/settings.json');

    const Menu = store.addCollection({typeName: 'Menu'})

    for(const item of data.sidebar){
    	Menu.addNode({
        section: item.section,
        topics: item.topics
	    })
    }
  })

  api.createPages(({ createPage }) => {
    // Use the Pages API here: https://gridsome.org/docs/pages-api
  })
}

'''
'''--- jsconfig.json ---
  {
    "include": [
      "./src/**/*"
    ]
  }
'''
'''--- netlify.toml ---
[build]
  command = "gridsome build"
  publish = "dist"
[build.environment]
  NODE_VERSION = "10"
'''
'''--- package.json ---
{
  "name": "sample-thanks-tutorial",
  "private": true,
  "scripts": {
    "build": "gridsome build",
    "develop": "gridsome develop",
    "explore": "gridsome explore"
  },
  "dependencies": {
    "@fortawesome/fontawesome-free": "^5.15.3",
    "@fortawesome/fontawesome-svg-core": "^1.2.35",
    "@fortawesome/free-brands-svg-icons": "^5.15.3",
    "@fortawesome/free-solid-svg-icons": "^5.15.3",
    "@fortawesome/vue-fontawesome": "^2.0.2",
    "@gridsome/plugin-google-analytics": "^0.1.0",
    "@gridsome/plugin-sitemap": "^0.2.1",
    "@gridsome/remark-prismjs": "0.0.6",
    "@gridsome/source-filesystem": "^0.6.0",
    "@gridsome/transformer-remark": "^0.6.4",
    "@gridsome/vue-remark": "^0.2.6",
    "@vssue/api-github-v3": "^1.4.7",
    "graphql-playground-html": "^1.6.22",
    "gridsome": "^0.7.0",
    "gridsome-plugin-algolia": "^2.1.1",
    "gridsome-plugin-remark-prismjs-all": "^0.4.8",
    "kind-of": "^6.0.3",
    "minimist": "^1.2.3",
    "near-api-js": "^0.41.0",
    "serialize-javascript": "^3.1.0",
    "typeface-source-sans-pro": "^0.0.54",
    "vssue": "^1.4.8",
    "vue-feather-icons": "^4.22.0",
    "vue-near": "^0.2.1",
    "vuetify": "^2.5.3",
    "vuex": "^3.1.1",
    "websocket-extensions": "^0.1.4"
  },
  "devDependencies": {
    "node-sass": "^4.13.1",
    "sass-loader": "^7.1.0",
    "style-resources-loader": "^1.2.1",
    "webpack-node-externals": "^3.0.0"
  }
}

'''
'''--- src/assets/img/logo-bright.svg ---
<svg xmlns="http://www.w3.org/2000/svg" width="225" height="52" viewBox="0 0 225 52">
  <path fill="#FFFFFF" fill-rule="nonzero" d="M74.4,14.352 L74.4,35.632 C74.4,40.432 72.16,42.352 68.16,42.352 C66.4,42.352 64.48,42.032 64,41.808 L64.32,36.592 C64.8,36.752 65.44,36.912 66.08,36.912 C66.72,36.912 67.2,36.752 67.2,35.632 L67.2,14.352 L74.4,14.352 Z M93.16,14.352 L100.84,36.432 L93,36.432 L92.136,33.328 L85.832,33.328 L85,36.432 L77.48,36.432 L85.16,14.352 L93.16,14.352 Z M87.368,27.792 L90.632,27.792 L89,21.872 L87.368,27.792 Z M128.72,14.352 L130,36.432 L122.896,36.432 L122.64,23.792 L119.76,36.432 L113.52,36.432 L110.64,23.792 L110.384,36.432 L103.28,36.432 L104.56,14.352 L113.84,14.352 L116.624,26.352 L119.44,14.352 L128.72,14.352 Z M155.16,25.392 C155.16,29.872 153.56,32.432 151.48,34.032 C149.4,35.632 146.52,36.432 142.68,36.432 L134.36,36.432 L134.36,14.352 L142.68,14.352 C146.52,14.352 149.4,15.152 151.48,16.752 C153.56,18.352 155.16,20.912 155.16,25.392 Z M147.864,25.392 C147.864,23.152 147.256,22.032 146.584,21.392 C145.944,20.752 144.824,20.272 143.224,20.272 L141.56,20.272 L141.56,30.352 L143.224,30.352 C144.824,30.352 145.944,29.872 146.584,29.232 C147.224,28.592 147.864,27.632 147.864,25.392 Z M182.24,25.424 C182.24,32.624 177.12,36.816 170.24,36.816 C163.36,36.816 158.24,32.624 158.24,25.424 C158.24,18.224 163.36,14 170.24,14 C177.12,14 182.24,18.224 182.24,25.424 Z M174.944,25.264 C174.944,22.224 173.12,20.112 170.24,20.112 C167.36,20.112 165.504,22.224 165.504,25.264 C165.504,28.304 167.36,30.416 170.24,30.416 C173.12,30.416 174.944,28.304 174.944,25.264 Z M202.92,28.272 L205,34.032 C204.2,34.832 201.96,36.816 197.16,36.816 C190.6,36.816 185.32,32.784 185.32,25.424 C185.32,18.064 190.6,14.032 197.16,14.032 C202.12,14.032 204.52,16.112 204.52,16.112 L202.6,22.192 C202.6,22.192 200.36,20.272 197.64,20.272 C194.92,20.272 192.584,21.872 192.584,25.328 C192.584,28.752 195.08,30.288 197.64,30.288 C200.2,30.288 201.96,29.232 202.92,28.272 Z M224.72,29.168 C224.72,31.472 223.6,33.552 221.84,34.928 C220.08,36.272 217.872,36.816 215.312,36.816 C212.752,36.816 209.808,36.112 206.8,33.872 L210,28.432 C212.048,30.16 214.928,30.832 215.888,30.832 C216.848,30.832 217.52,30.544 217.52,29.904 C217.52,29.264 216.72,29.008 215.92,28.752 C215.12,28.528 213.36,27.952 212.72,27.728 C212.08,27.472 210.8,27.056 209.68,26.096 C208.56,25.136 207.664,23.792 207.664,21.392 C207.664,18.992 208.912,17.136 210.224,16.048 C211.568,14.928 213.776,14.128 216.72,14.128 C219.664,14.128 222.672,15.184 224.592,16.784 L221.84,21.904 C220.176,20.432 217.744,19.792 216.592,19.792 C215.44,19.792 214.8,20.016 214.8,20.688 C214.8,21.328 215.824,21.552 216.336,21.712 C216.848,21.872 218.192,22.256 218.96,22.512 C219.728,22.768 221.52,23.408 222.64,24.368 C223.76,25.328 224.72,26.832 224.72,29.168 Z"/>
  <polygon fill="#54D28F" points="0 26 26 52 52 26 26 0 26 26"/>
  <polygon fill="#000" points="26 26 26 52 13 26" opacity=".1"/>
</svg>

'''
'''--- src/assets/img/logo-dark.svg ---
<svg xmlns="http://www.w3.org/2000/svg" width="225" height="52" viewBox="0 0 225 52">
  <path fill="#2A2C2F" fill-rule="nonzero" d="M74.4,14.352 L74.4,35.632 C74.4,40.432 72.16,42.352 68.16,42.352 C66.4,42.352 64.48,42.032 64,41.808 L64.32,36.592 C64.8,36.752 65.44,36.912 66.08,36.912 C66.72,36.912 67.2,36.752 67.2,35.632 L67.2,14.352 L74.4,14.352 Z M93.16,14.352 L100.84,36.432 L93,36.432 L92.136,33.328 L85.832,33.328 L85,36.432 L77.48,36.432 L85.16,14.352 L93.16,14.352 Z M87.368,27.792 L90.632,27.792 L89,21.872 L87.368,27.792 Z M128.72,14.352 L130,36.432 L122.896,36.432 L122.64,23.792 L119.76,36.432 L113.52,36.432 L110.64,23.792 L110.384,36.432 L103.28,36.432 L104.56,14.352 L113.84,14.352 L116.624,26.352 L119.44,14.352 L128.72,14.352 Z M155.16,25.392 C155.16,29.872 153.56,32.432 151.48,34.032 C149.4,35.632 146.52,36.432 142.68,36.432 L134.36,36.432 L134.36,14.352 L142.68,14.352 C146.52,14.352 149.4,15.152 151.48,16.752 C153.56,18.352 155.16,20.912 155.16,25.392 Z M147.864,25.392 C147.864,23.152 147.256,22.032 146.584,21.392 C145.944,20.752 144.824,20.272 143.224,20.272 L141.56,20.272 L141.56,30.352 L143.224,30.352 C144.824,30.352 145.944,29.872 146.584,29.232 C147.224,28.592 147.864,27.632 147.864,25.392 Z M182.24,25.424 C182.24,32.624 177.12,36.816 170.24,36.816 C163.36,36.816 158.24,32.624 158.24,25.424 C158.24,18.224 163.36,14 170.24,14 C177.12,14 182.24,18.224 182.24,25.424 Z M174.944,25.264 C174.944,22.224 173.12,20.112 170.24,20.112 C167.36,20.112 165.504,22.224 165.504,25.264 C165.504,28.304 167.36,30.416 170.24,30.416 C173.12,30.416 174.944,28.304 174.944,25.264 Z M202.92,28.272 L205,34.032 C204.2,34.832 201.96,36.816 197.16,36.816 C190.6,36.816 185.32,32.784 185.32,25.424 C185.32,18.064 190.6,14.032 197.16,14.032 C202.12,14.032 204.52,16.112 204.52,16.112 L202.6,22.192 C202.6,22.192 200.36,20.272 197.64,20.272 C194.92,20.272 192.584,21.872 192.584,25.328 C192.584,28.752 195.08,30.288 197.64,30.288 C200.2,30.288 201.96,29.232 202.92,28.272 Z M224.72,29.168 C224.72,31.472 223.6,33.552 221.84,34.928 C220.08,36.272 217.872,36.816 215.312,36.816 C212.752,36.816 209.808,36.112 206.8,33.872 L210,28.432 C212.048,30.16 214.928,30.832 215.888,30.832 C216.848,30.832 217.52,30.544 217.52,29.904 C217.52,29.264 216.72,29.008 215.92,28.752 C215.12,28.528 213.36,27.952 212.72,27.728 C212.08,27.472 210.8,27.056 209.68,26.096 C208.56,25.136 207.664,23.792 207.664,21.392 C207.664,18.992 208.912,17.136 210.224,16.048 C211.568,14.928 213.776,14.128 216.72,14.128 C219.664,14.128 222.672,15.184 224.592,16.784 L221.84,21.904 C220.176,20.432 217.744,19.792 216.592,19.792 C215.44,19.792 214.8,20.016 214.8,20.688 C214.8,21.328 215.824,21.552 216.336,21.712 C216.848,21.872 218.192,22.256 218.96,22.512 C219.728,22.768 221.52,23.408 222.64,24.368 C223.76,25.328 224.72,26.832 224.72,29.168 Z"/>
  <polygon fill="#54D28F" points="0 26 26 52 52 26 26 0 26 26"/>
  <polygon fill="#000" points="26 26 26 52 13 26" opacity=".1"/>
</svg>

'''
'''--- src/assets/img/logo_near_bright.svg ---
<svg enable-background="new 0 0 342 90" viewBox="0 0 342 90" xmlns="http://www.w3.org/2000/svg"><path fill="#FFFFFF" d="m171.2 18.8v52.5c0 .4-.3.8-.8.8h-5.5c-2.5 0-4.9-1.3-6.3-3.4l-24.8-38.3.8 19.1v21.9c0 .4-.3.8-.8.8h-7.2c-.4 0-.8-.3-.8-.8v-52.6c0-.4.3-.8.8-.8h5.4c2.5 0 4.9 1.3 6.3 3.4l24.8 38.2-.8-19.1v-21.7c0-.4.3-.8.8-.8h7.2c.6 0 .9.3.9.8z"/><path fill="#FFFFFF" d="m245 72h-7.6c-.5 0-.9-.5-.7-1l20.2-52.3c.2-.4.6-.7 1-.7h9.6c.5 0 .9.3 1 .7l20.3 52.3c.2.5-.2 1-.7 1h-7.6c-.3 0-.6-.2-.7-.5l-16.3-43c-.2-.6-1.2-.6-1.4 0l-16.3 43c-.2.3-.5.5-.8.5z"/><path fill="#FFFFFF" d="m341.8 70.8-15.2-19.4c8.6-1.6 13.6-7.4 13.6-16.3 0-10.2-6.6-17.1-18.4-17.1h-21.2c-.6 0-1.1.5-1.1 1.1 0 4 3.2 7.2 7.2 7.2h14.3c7.1 0 10.5 3.6 10.5 8.9s-3.3 8.9-10.5 8.9h-20.2c-.6 0-1.1.5-1.1 1.1v26c0 .4.3.8.8.8h7.2c.4 0 .8-.3.8-.8v-19.3h8.3l13.2 17.2c1.4 1.9 3.6 2.9 6 2.9h5.5c.4 0 .7-.7.3-1.2z"/><path fill="#FFFFFF" d="m222.2 18h-33.5c-.6 0-1 .4-1 1 0 4 3.3 7.3 7.3 7.3h27.2c.4 0 .8-.3.8-.8v-6.8c-.1-.4-.4-.7-.8-.7zm0 45.7h-25c-.4 0-.8-.3-.8-.8v-13.5c0-.4.3-.8.8-.8h23.1c.4 0 .8-.3.8-.8v-6.8c0-.4-.3-.8-.8-.8h-31.5c-.6 0-1.1.5-1.1 1.1v29.5c0 .6.5 1.1 1.1 1.1h33.4c.4 0 .8-.3.8-.8v-6.8c-.1-.3-.4-.6-.8-.6z"/><path fill="#FFFFFF" d="m72.2 4.6-18.8 27.9c-1.3 1.9 1.2 4.2 3 2.6l18.5-16.1c.5-.4 1.2-.1 1.2.6v50.3c0 .7-.9 1-1.3.5l-56-67c-1.8-2.2-4.4-3.4-7.3-3.4h-2c-5.2 0-9.5 4.3-9.5 9.6v70.8c0 5.3 4.3 9.6 9.6 9.6 3.3 0 6.4-1.7 8.2-4.6l18.8-27.9c1.3-1.9-1.2-4.2-3-2.6l-18.5 16c-.5.4-1.2.1-1.2-.6v-50.2c0-.7.9-1 1.3-.5l56 67c1.8 2.2 4.5 3.4 7.3 3.4h2c5.3 0 9.6-4.3 9.6-9.6v-70.8c-.1-5.3-4.4-9.6-9.7-9.6-3.3 0-6.4 1.7-8.2 4.6z"/><text style="font-family:sans-serif" fill="#FFFFFF" x="125" y="90">tutorials</text></svg>
'''
'''--- src/assets/img/logo_near_dark.svg ---
<svg enable-background="new 0 0 342 90" viewBox="0 0 342 90" xmlns="http://www.w3.org/2000/svg"><path fill="#2A2C2F" d="m171.2 18.8v52.5c0 .4-.3.8-.8.8h-5.5c-2.5 0-4.9-1.3-6.3-3.4l-24.8-38.3.8 19.1v21.9c0 .4-.3.8-.8.8h-7.2c-.4 0-.8-.3-.8-.8v-52.6c0-.4.3-.8.8-.8h5.4c2.5 0 4.9 1.3 6.3 3.4l24.8 38.2-.8-19.1v-21.7c0-.4.3-.8.8-.8h7.2c.6 0 .9.3.9.8z"/><path d="m245 72h-7.6c-.5 0-.9-.5-.7-1l20.2-52.3c.2-.4.6-.7 1-.7h9.6c.5 0 .9.3 1 .7l20.3 52.3c.2.5-.2 1-.7 1h-7.6c-.3 0-.6-.2-.7-.5l-16.3-43c-.2-.6-1.2-.6-1.4 0l-16.3 43c-.2.3-.5.5-.8.5z"/><path fill="#2A2C2F" d="m341.8 70.8-15.2-19.4c8.6-1.6 13.6-7.4 13.6-16.3 0-10.2-6.6-17.1-18.4-17.1h-21.2c-.6 0-1.1.5-1.1 1.1 0 4 3.2 7.2 7.2 7.2h14.3c7.1 0 10.5 3.6 10.5 8.9s-3.3 8.9-10.5 8.9h-20.2c-.6 0-1.1.5-1.1 1.1v26c0 .4.3.8.8.8h7.2c.4 0 .8-.3.8-.8v-19.3h8.3l13.2 17.2c1.4 1.9 3.6 2.9 6 2.9h5.5c.4 0 .7-.7.3-1.2z"/><path fill="#2A2C2F" d="m222.2 18h-33.5c-.6 0-1 .4-1 1 0 4 3.3 7.3 7.3 7.3h27.2c.4 0 .8-.3.8-.8v-6.8c-.1-.4-.4-.7-.8-.7zm0 45.7h-25c-.4 0-.8-.3-.8-.8v-13.5c0-.4.3-.8.8-.8h23.1c.4 0 .8-.3.8-.8v-6.8c0-.4-.3-.8-.8-.8h-31.5c-.6 0-1.1.5-1.1 1.1v29.5c0 .6.5 1.1 1.1 1.1h33.4c.4 0 .8-.3.8-.8v-6.8c-.1-.3-.4-.6-.8-.6z"/><path fill="#2A2C2F" d="m72.2 4.6-18.8 27.9c-1.3 1.9 1.2 4.2 3 2.6l18.5-16.1c.5-.4 1.2-.1 1.2.6v50.3c0 .7-.9 1-1.3.5l-56-67c-1.8-2.2-4.4-3.4-7.3-3.4h-2c-5.2 0-9.5 4.3-9.5 9.6v70.8c0 5.3 4.3 9.6 9.6 9.6 3.3 0 6.4-1.7 8.2-4.6l18.8-27.9c1.3-1.9-1.2-4.2-3-2.6l-18.5 16c-.5.4-1.2.1-1.2-.6v-50.2c0-.7.9-1 1.3-.5l56 67c1.8 2.2 4.5 3.4 7.3 3.4h2c5.3 0 9.6-4.3 9.6-9.6v-70.8c-.1-5.3-4.4-9.6-9.7-9.6-3.3 0-6.4 1.7-8.2 4.6z"/><text style="font-family:sans-serif" fill="#2A2C2F" x="125" y="90">tutorials</text></svg>
'''
'''--- src/components/contract-ui/near-connect.js ---
import * as nearAPI from 'near-api-js';

// Initializing contract
async function initContract() {
  const nearConfig = {
    networkId: 'testnet',
    nodeUrl: 'https://rpc.testnet.near.org',
    contractName: 'thanks.humanman.testnet',
    walletUrl: 'https://wallet.testnet.near.org',
    helperUrl: 'https://helper.testnet.near.org'
  };

  // Initializing connection to the NEAR TestNet
  const near = await nearAPI.connect({
    deps: {
      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()
    },
    ...nearConfig
  });

  // Needed to access wallet
  const walletConnection = new nearAPI.WalletConnection(near);

  // Load in account data
  let currentUser;
  if (walletConnection.getAccountId()) {
    currentUser = {
      accountId: walletConnection.getAccountId(),
      balance: (await walletConnection.account().state()).amount
    };
  }

  // Initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(walletConnection.account(), nearConfig.contractName, {
    // View methods are read-only – they don't modify the state, but usually return some value
    // viewMethods: ['getMessages'],
    // Change methods can modify the state, but you don't receive the returned value when called
    changeMethods: ['say'],
    // Sender is the account ID to initialize transactions.
    // getAccountId() will return empty string if user is still unauthorized
    sender: walletConnection.getAccountId()
  });

  return { contract, currentUser, nearConfig, walletConnection };
}

export default initContract

'''
'''--- src/contract-api.js ---
import getConfig from './config.js';
import * as nearAPI from 'near-api-js';
// Initializing contract
async function initContract() {
  const nearConfig = getConfig(process.env.NODE_ENV || 'testnet');

  // Initializing connection to the NEAR TestNet
  const near = await nearAPI.connect({
    deps: {
      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()
    },
    ...nearConfig
  });

  // Needed to access wallet
  const walletConnection = new nearAPI.WalletConnection(near);

  // Load in account data
  let currentUser;
  if (walletConnection.getAccountId()) {
    currentUser = {
      accountId: walletConnection.getAccountId(),
      balance: (await walletConnection.account().state()).amount
    };
  }

  // Initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(walletConnection.account(), nearConfig.contractName, {
    // View methods are read-only – they don't modify the state, but usually return some value
    // viewMethods: ['getMessages'],
    // Change methods can modify the state, but you don't receive the returned value when called
    changeMethods: ['say', 'list', 'summarize', 'transfer'],
    // Sender is the account ID to initialize transactions.
    // getAccountId() will return empty string if user is still unauthorized
    sender: walletConnection.getAccountId()
  });

  return { contract, currentUser, nearConfig, walletConnection };
}

'''
'''--- src/contract-config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'guess-book-tutorial.testnet';

function getConfig(env) {
  switch (env) {
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case 'production':
    case 'development':
    case 'testnet':
      return {
        networkId: 'default',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;

'''
'''--- src/main.js ---
// This is the main.js file. Import global CSS and scripts here.
// The Client API can be used here. Learn more: gridsome.org/docs/client-api

import DefaultLayout from '~/layouts/Default.vue'
import '~/assets/scss/globals.scss'
import { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'
import { config, library } from '@fortawesome/fontawesome-svg-core'
import { faGithub, faTwitter } from '@fortawesome/free-brands-svg-icons'
import { faLightbulb, faQuoteLeft, faQuoteRight } from '@fortawesome/free-solid-svg-icons'
import '@fortawesome/fontawesome-svg-core/styles.css'
import Vuetify from 'vuetify'
import "vuetify/dist/vuetify.min.css"
import Vuex from 'vuex'
import ContractForm from '~/components/contract-ui/ContractForm.vue'
import Highlightable from '~/components/Highlightable.vue'
import Vssue from 'vssue'
import GithubV3 from '@vssue/api-github-v3'
import 'vssue/dist/vssue.css'

require('typeface-source-sans-pro')

config.autoAddCss = false;
library.add(faGithub, faTwitter)

export default function (Vue, { router, head, isClient, appOptions }) {

  // Add iconography plugin
  library.add(faLightbulb, faQuoteLeft, faQuoteRight)
  Vue.component('fa-icon', FontAwesomeIcon)
  
  // out-of-the-box slick layouts plus material design classes
  Vue.use(Vuetify);

  // not actually sure if needed
  Vue.use(Vuex)

  // Set default layout as a global component
  Vue.component('Layout', DefaultLayout)

  // Add contract demo
  Vue.component('contract-form', ContractForm)
  
  // Add Medium Style Select Text to Comment Functionality
  Vue.component('highlightable', Highlightable)

  // allows users to comment via GH issues on any text they select
  Vue.use(Vssue, {
    api: GithubV3,
    owner: process.env.GRIDSOME_REPO_OWNER,
    repo: process.env.GRIDSOME_REPO_NAME,
    clientId: process.env.GRIDSOME_VSSUE_CLIENT_ID,
    clientSecret: process.env.GRIDSOME_VSSUE_CLIENT_SECRET
  })

  // // allows users to comment via GH issues on any text they select
  // Vue.use(VueNear, {
  //   // Needs the environment for the correct RPC to use
  //   env: 'development',
  //   config: {
  //     appTitle: 'Thanks',
  //     contractName: 'thanks.humanman.testnet',
  //   },
  // })

  // Add attributes to HTML tag
  head.htmlAttrs = { lang: 'en' }

  head.link.push({
    rel: 'manifest',
    href: '/manifest.json'
  })

  head.link.push({
    rel: 'stylesheet',
    href: 'https://cdn.jsdelivr.net/npm/@mdi/font@latest/css/materialdesignicons.min.css',
  })

  head.link.push({
    rel: 'stylesheet',
    href: 'https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900',
  });

  head.meta.push({
    name: 'theme-color',
    content: '#10c186'
  })

  head.meta.push({
    name: 'google-site-verification',
    content: process.env.GSV_META
  })

  head.meta.push({
    name: 'apple-mobile-web-app-status-bar-style',
    content: 'default'
  })

  // NEAR API 
  head.script.push({
    src: "https://cdn.jsdelivr.net/gh/nearprotocol/near-api-js/dist/near-api-js.js"
  })
  
  //UI
  appOptions.vuetify = new Vuetify({});
  
  // State
  appOptions.store = new Vuex.Store({
    state: {
      sidebarOpen: false
    },
    mutations: {
      toggleSidebar(state) {
        state.sidebarOpen = !state.sidebarOpen
      },
      closeSidebar(state) {
        state.sidebarOpen = false
      },
      openSidebar(state) {
        state.sidebarOpen = true
      }
    }
  })
}

'''
'''--- static/README.md ---
Add static files here. Files in this directory will be copied directly to `dist` folder during build. For example, /static/robots.txt will be located at https://yoursite.com/robots.txt.

This file should be deleted.
'''
'''--- static/manifest.json ---
{
  "name": "Mezze-Tech",
  "short_name": "Mezze",
  "icons": [
    {
      "src": "logo-192.png",
      "sizes": "192x192"
    },
    {
      "src": "logo-512.png",
      "sizes": "512x512"
    }
  ],
  "lang": "en-US",
  "start_url": "/",
  "display": "standalone",
  "theme_color": "#10c186",
  "background_color": "#FFF"
}
'''
'''--- static/sw.js ---
// Empty for now
'''
'''--- tutorials/editing-in-forestry.md ---
---
title: Forestry CMS
slug: forestry-cms

---
## Import starter

[![](https://assets.forestry.io/import-to-forestryK.svg)](https://app.forestry.io/quick-start?repo=samuelhorn/jamdocs&engine=other&preview=https://res.cloudinary.com/forestry-io/image/fetch/w_400,h_300,c_fill,f_jpg/https://forestry.io/img/starters/jamdocs.png "Import to Forestry")

This project has been pre-configured to work with Forestry, just import your repository ✨
Any changes you make will be committed back to the repo,

## Start Instant Previews

Start the preview environment if you want to be able to preview your website.

Go to **Settings / Preview** and click on the **Start** button.

It will clone your site on Forestry preview environment, install the project dependencies, and launch your npm script to launch `gridsome develop`

![](/forestry-instant-previews.png)

Once the server is started, you will be able to **click on the preview icon** when you're editing a document (even without saving your changes).

## Adding pages

Go in the **Docs** section and click **Create** to add a new page to your documentation. The default front matter template contains `title`, `date` and `slug`fields. You can add new ones by editing the front matter template.

## Front matter

You can edit the **Documention Page** front matter template by cliking on **Front Matter** in the sidebar. From here you can add new fields to enhance the current template.

![](/forestry-front-matter-template.png)

## Managing sidebar topics

Click on the **Menu** section in Forestry to add a new section or topics from the user interface. Forestry will write the changes to the JSON file. 🎉

![](/forestry-sidebar-settings.png)

See [Forestry documentation](https://forestry.io/docs) if you want to know more.

'''
'''--- tutorials/getting-started.md ---
---
title: Getting started
slug: getting-started
---

## What is NEAR?

<a target="_blank" href="https://near.org">NEAR</a> is an open source platform that accelerates the development of decentralized applications. I could go on and on. Ok, I will:

_From near.org_:
<blockquote class="mb-4">
  <fa-icon class="mr-2" icon="quote-left" size="sm"></fa-icon><em>So what is NEAR (aka “the NEAR Platform”)? NEAR is a decentralized development platform built on top of the NEAR Protocol, which is a public, sharded, developer-friendly, proof-of-stake blockchain. Put another way, NEAR is like a public community-run cloud platform.  That means it is a highly scalable, low cost platform for developers to create decentralized apps on top of. While it’s built on top of the NEAR Protocol blockchain, the NEAR Platform also contains a wide range of tooling from explorers to CLI tools to wallet apps to interoperability components which help developers build much more easily and the ecosystem to scale more widely.</em>
  <br/>
  <br/>
  <em>Whereas most other “scalable” blockchains use approaches that centralize processing on high-end hardware to provide a temporary boost in throughput, NEAR Protocol’s approach allows the platform’s capacity to scale nearly linearly up to billions of transactions in a fully decentralized way.</em>
</blockquote>

Join the [NEAR ecosystem](https://airtable.com/shrkb3VSkDRf3BKjv)!

## What are Smart Contracts?

Smart Contracts are the back-end of your application that runs code and stores data on the blockchain. All smart contracts on NEAR must be compiled to <a target="_blank" href="https://webassembly.org">_WebAssembly_</a> or simply _WASM_. Currently, NEAR supports two languages <a target="_blank" href="https://www.assemblyscript.org">_AssemblyScript_</a> and <a target="_blank" href="https://www.rust.org">_Rust_</a> with custom software development kits (SDKs) to assist in their creation.

Another aspect of Smart Contracts is that there are two types: Call Functions, and View Functions.

Call Functions mutate state. They change something in your storage regarding the contract. They basically add or remove data.

View Functions simply read the data. You may have a method that returns a list of recent transactions. That's a view function.

If you are familiar with the terms "setter" and "getter", or http GET and POST requests, or read/write access, you may assume that view/call functions share this same relationship. It's important to be aware what your functions are doing so you can use the correct syntax when writing and calling them.

<blockquote class="tip"><fa-icon class="mr-2" style="opacity: .7;" icon="lightbulb" size="sm"></fa-icon>When in doubt of whether your contract method is
a call or view function, check if gas is used when 
you call it. View functions are free, while call 
functions cost gas. <a target="_blank" href="https://docs.near.org/docs/concepts/gas">Learn more about NEAR gas fees</a>.</blockquote> 

## General Development Setup

Before diving right in, take a few moments to install a few global dependencies, so you don't have to worry about them later. 

We will be developing in _NodeJS_, and using _VSCode_ as our IDE.

NEAR CLI: _Deploys Smart Contracts to the NEAR networks_

NodeJS^v12.x: _Backend JS framework allowing NEAR programs to run (note that we require >=v12)_

Typescript: _Allows us to write AssemblyScript code_

AssemblyScript: _Allows us to write WebAssembly code (what NEAR can use to run our smart contracts) in Typescript so we don't have to learn a new language_

Rust: _Alternate language to AssemblyScript for smart contracts, but is required to write any and all simulation tests_

Vue: _This will be the front end framework we will be using to build our smart contracts a snazzy UI_

In order to deploy your smart contract, it will need to live in a repo like Github where NEAR has read/write access to it. When you use the cli command `$ near deploy...`, NEAR uses that git repo access you've configured ahead of time to push your project to it, and then publishes your project to NEAR Testnet where it can be available to interact with by you and other NEAR Testnet accounts.

Your IDE may freak out at some of the syntax so make sure you have all the plugins and extensions installed and activated so you can properly leverage it. _VSCode_ has loads of stuff to help with development in _AssemblyScript_. [Learn more about _AssemblyScript_ for _VSCode_](https://marketplace.visualstudio.com/items?itemName=saulecabrera.asls).

<blockquote class="tip" style="margin-top: 1rem;">
  <fa-icon class="mr-2" style="opacity: .7;" icon="lightbulb" size="sm"></fa-icon><strong>When you're ready to switch over from a dev contract account to a permanent one, here's how:</strong><br/>
  <hr/>
  <br/><strong>Step 1: Create an account for the contract</strong><br/>
  Visit <a href="https://wallet.nearprotocol.com" target="_blank">NEAR Wallet</a> and make a new account. You'll be deploying these smart contracts to this new account.
  Now authorize NEAR CLI for this new account, and follow the instructions it gives you:
  
  <span class="code-emphasis inline-block" style="font-size: smaller;">$ near login</span>
  
  <br/><br/><strong>Step 2: set contract name in code</strong><br/>
  Modify the line in your <span class="code-emphasis inline-block">src/config.js</span> that sets the account name of the contract. Set it to the account id you used above. If you don't have a config file set up, take a few minutes to see how the config file is wired up in this <a href="https://github.com/near-examples/guest-book/blob/master/src/config.js" target="_blank">example project</a>.

  <br/><strong>Step 3: change remote URL if you cloned the repo </strong><br/>
  Unless you forked the project repository you will need to change the remote URL to a repo that you have commit access to. This will allow auto deployment to Github Pages from the command line.
  
  <ol style="margin-left: 1rem;">
    <li>go to GitHub and create a new repository for your project</li>
    <li>open your terminal and in the root of your project enter the following:</li>
  </ol>

  <span class="code-emphasis inline-block" style="font-size: smaller;">$ git remote set-url origin https:&#47;&#47;github.com/YOUR_USERNAME/YOUR_REPOSITORY.git</span>

  <br/><strong>Step 4: deploy!</strong><br/>
  Add this to the "scripts" section of your <span class="code-emphasis inline-block">package.json</span> file:     
  <pre class="language-text">
    "deploy":"yarn build:release && near deploy && gh-pages -d build/"
  </pre>

  One command: <span class="code-emphasis inline-block">yarn deploy</span>.<br/><br/>
  As you can see in <span class="code-emphasis inline-block">package.json</span>, this does two things:

  <ol style="margin-left: 1rem;">
    <li>builds & deploys smart contracts to NEAR TestNet.</li>
    <li>builds & deploys frontend code to GitHub using <a href="https://github.com/tschaub/gh-pages" target="_blank">gh-pages</a>. This will only work if the project already has a repository set up on GitHub. Feel free to modify the <span class="code-emphasis inline-block">deploy</span> script in <span class="code-emphasis inline-block">package.json</span> to deploy elsewhere or to remove any front end commands.</li>
  </ol>

  <br/>
  <em>courtesy of <a href="https://learn.figment.io/network-documentation/near/tutorials" target="_blank">figment.io</a>.</em>
</blockquote>

'''
'''--- tutorials/thanks.md ---
---
title: Thanks
slug: thanks
---

<blockquote class="lesson mt-6">
  <strong>Build the Thanks Smart Contract</span></strong><br><br>

  - time to complete: **80 mins**
  - level of difficulty: **moderate**
  - prerequisites
    - basic Javascript
    - basic Bash
    - basic Git
    - NEAR.testnet account

</blockquote>

## Overview

No. Seriously. Thanks! 

Actually, that's the name of the Smart Contract we will be building today, [Thanks](https://github.com/Learn-NEAR/sample--thanks), which allows users to say "thanks" to other users by calling _their_ instance of this contract. 

You can optionally attach tokens to your message, or even leave your message anonymously.

Of course keep in mind that your signing account will be visible on the blockchain via NEAR Explorer even if you send an anonymous message; It just will be omitted when the receiver calls certain _other_ functions on the contract. 

This is a simple demonstration of how smart contracts work, and how to call them.

We are going to use a mixture of functions and classes, then we will refactor everything into classes. Initially, the classes you will see basically allow us to organize data as if it was wrapped in an object literal. _TypeScript_ and _AssemblyScript_ are soooo hyper aware of how you organize your data structures, and they start to turn rabid if you want to simply assign an object to a variable:

```typescript
const myObject: object = {prop: "val"}
```

That looks simple, right? We declared a variable, signed a type `object` to it, and assigned an object literal as its value. NOOOO! Instead, you have to do this number:

```typescript
@nearBindgen
export class LongWindedWayOfCreatingASimpleObject {
  prop: string
  constructor(quest: string) {
    this.prop = val
  }
}
```

Then you can _finally_ use it similarly as before:

```typescript
const myObject = new LongWindedWayOfCreatingASimpleObject({val: "Geesh! All this for an object?!"});
```

Furthermore, you will have to continue to reference that class if you have an array that you intend to push it to. So, maybe use shorter names not born out of frustration.

Instead you must create a named class and assign it as the type you are using when declaring a variable. 

Throughout this tutorial, you will have the opportunity to engage with this contract as we build it together. 

Our calls to the contract will be through a command line interface like _Bash_ or _Terminal_.

However, if you desire to add a UI layer on top of this Smart Contract, you can see how that might work by navigation to the <a href="what-next">What Next?</a> section of this tutorial. The code for the UI below can be found in this tutorial's repo in 
`components/contract-ui/`. You can find more examples of Smart Contracts with UIs at [examples.near.org](https://examples.near.org/)

By the end of this tutorial, you will have a deeper understanding of how NEAR smart contracts are built, tested, deployed, and used. With that knowledge, you will be able to build your own decentralized applications, which you can share with the NEAR community!

## Local Setup

There is a repo of this project with several branches. The first branch, `getting-started`, is the bare bones project. It will have all of the files we need, but most of them will be empty. The others you will find are:

1. `getting-started`
2. `functions/empty` & `functions/solution`
3. `refactoring/empty` & `refactoring/solution`
4. `testing/empty` & `testing/solution`
5. `scripts/empty` & `scripts/solution`

<br/>

Do you see a pattern? The idea here is that each major section in this tutorial has a corresponding branch of the `sample--thanks` repo. We will be working with the `/solution` branches, and review the code in there, but you are always encouraged to use the `/empty` branches to build some of this logic on your own. 

Both `main` and `scripts/solution` will have the complete code. 

Alternatively, you can build everything from scratch using the terminal command:

<pre class="language-bash">
$ <span class="token function">near</span> create-near-app your-awesome-project
</pre>

and just use the file tree below for reference.

Otherwise, let's get started!

<h3>Clone The Repo</h3>

Clone the repository below or run this command:

```bash
$ git clone git clone git@github.com:humanman/sample--thanks.git project-name
$ cd project-name
# run scripts in package.json with "yarn <script name>" or "npm run <script name>"
```

>  <div class="tip"> <fa-icon class="mr-2" style="opacity: .7;" icon="lightbulb" size="sm"></fa-icon>If you're like me, and need a visual for what this Contract might look like with a UI, scroll down to the <a href="#what-next">What Next?</a> section to see a demo of Thanks with a simple UI layer. Code is in the repo of this tutorial in the 
> <span class="code-emphasis inline-block">contract-ui/</span> directory.
> </div>
<br/>

Now switch to the `getting-started` branch.

<h3>File Structure</h3>

```
sample--thanks/
┣ src/
┃ ┣ thanks/
┃ ┃ ┣ __tests__/
┃ ┃ ┃ ┣ README.md
┃ ┃ ┃ ┗ index.unit.spec.ts
┃ ┃ ┣ assembly/
┃ ┃ ┃ ┣ index.ts
┃ ┃ ┃ ┗ models.ts
┃ ┃ ┗ asconfig.json
┃ ┣ as-pect.d.ts
┃ ┣ as_types.d.ts
┃ ┣ tsconfig.json
┃ ┗ utils.ts
┣ .gitignore
┣ README.md
┣ as-pect.config.js
┣ asconfig.json
┣ package.json
┗ yarn.lock
```

This is pretty much what your folder structure will look like if you used the
 <nobr><span class="code-emphasis inline-block">create-near-app</span></nobr> command.

The main folders we will be using are:

`/thanks/__tests__/`

`/thanks/assembly/`

This is where we will be writing all our contract code and tests. If you are in the <nobr><span class="code-emphasis inline-block">getting-started</span></nobr> branch, you should see that a few of the `.ts` files are empty. Don't worry. We will be filling these files back up with code in no time.

Furthermore, we will be using a few constants we will set up in `src/utils.ts`.

That's pretty much it for a bird's eye view. Many of the files you see in the tree above like `asconfig.json` are used to declare how _AssemblyScript_ will be used, how _TypeScript_ will use _AssemblyScript_, and how _As-pect_ will fit into it all for testing. These config files will allow you to run simple commands like `$ asp` to run all our unit tests without having to tell it where to look.

## Let's Start Coding!

Open your `src/assembly/index.ts` file, and paste the following at the top of the page:

```typescript
// assembly/index.ts
import { Context, ContractPromiseBatch, logging, u128, PersistentVector } from "near-sdk-core"
```

Let's review what we are importing from `near-sdk-core`:

- Context: _Provides context for contract execution, including information about transaction sender, etc._

-  ContractPromiseBatch: _Batches ContractPromise, which make asynchronous calls to other contracts and receives callbacks._

-  logging: _Logs a string message._

-  u128: _unsigned 128-bit integer type_ 

Next, let's add some constants and type declarations to `index.ts`:

```typescript
/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
type AccountId = string;

/**
 * Gas is u64
 */
type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

type Amount = u128;

type Balance = Amount;

type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 */

const ONE_NEAR = u128.from("1000000000000000000000000");
const XCC_GAS: Gas = 20_000_000_000_000;
const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));
// import { Message, ContributionTracker, Vector } from "./models"

// max 5 NEAR accepted to this contract before it forces a transfer to the owner
const CONTRIBUTION_SAFETY_LIMIT: u128 = u128.mul(ONE_NEAR, u128.from(5));
const owner: AccountId = 'YOUR_OWN_TESTNET_ACCOUNT'
const contributions: ContributionTracker = new ContributionTracker()
const messages: Vector<Message> = new Vector<Message>("m")

@nearBindgen
export class ContributionTracker {
  public count: u32 = 0;
  public total: u128 = u128.Zero;
  public average: f64;
  public received: u128 = u128.Zero
  public transferred: u128 = u128.Zero

  update(value: u128): void {
    // track money received separately
    this.received = u128.add(this.received, value);

    // update tracking data
    this.count += 1;
    this.total = u128.add(this.total, value);
    this.average = u128.div(this.total, u128.from(this.count)).toF64();
  }

  record_transfer(): void {
    this.transferred = u128.add(this.transferred, this.received)
    this.received = u128.Zero
  }
}

/**
 * A message left by someone saying thanks
 */
@nearBindgen
export class Message {
  public static max_length(): i32 { return 100 as i32 };

  public sender: AccountId

  constructor(
    public text: string,
    anonymous: bool = false,
    public contribution: u128 = u128.Zero
  ) {
    this.sender = anonymous ? '' : Context.sender
  }
}

/**
 * setup a generic subclass instead of duplicating the get_last method
 */
@nearBindgen
export class Vector<T> extends PersistentVector<T> {
  /**
   * this method isn't normally available on a PersistentVector
   * so we add it here to make our lives easier when returning the
   * last `n` items for comments, votes and donations
   * @param count
   */
  get_last(count: i32): Array<T> {
    const n = min(count, this.length);
    const startIndex = this.length - n;
    const result = new Array<T>();
    for (let i = startIndex; i < this.length; i++) {
      const entry = this[i];
      result.push(entry);
    }
    return result;
  }
}
```

Hopefully, the comments in the code above will give you some clues as to what each variable and type does. Basically, we are declaring that `AccountId` will always be a string. `Gas` will be type _u64_. `Amount` will be type _u128_, and so on. 

As for our constants, we mostly define budgetary restrictions, e.g,`CONTRIBUTION_SAFETY_LIMIT` sets the max value accepted to 5 NEAR.

You'll also notice several classes defined: `ContributionTracker`, `Message`, and `Vector`. These classes basically give some of our variables turbo power. We will dive deeper into some of them, but the important part to note for now is that each class you write in _AssemblyScript_ intended for NEAR to understand will require a decorator. That's what `@nearBindgen` (pronounced Near `Bind Gen) is. It marks the class as serializable. Serializable is a marker interface used to “mark” classes so that the objects of these classes may get a certain capability.

Let's put this code to work. Paste the following code into `index.ts`:

```typescript
// assembly/index.ts
function _assert_financial_safety_limits(deposit: u128): void {
  const new_total = u128.add(deposit, this.contributions.received)
  assert(u128.le(deposit, CONTRIBUTION_SAFETY_LIMIT), "You are trying to attach too many NEAR Tokens to this call.  There is a safe limit while in beta of 5 NEAR")
  assert(u128.le(new_total, CONTRIBUTION_SAFETY_LIMIT), "Maximum contributions reached.  Please call transfer() to continue receiving funds.")
}

export function say(message: string, anonymous: bool = false): bool {
  // guard against too much money being deposited to this account in beta
  const deposit = Context.attachedDeposit
  _assert_financial_safety_limits(deposit)

  // guard against invalid message size
  assert(message.length > 0, "Message length cannot be 0")
  assert(message.length < Message.max_length(), "Message length is too long, must be less than " + Message.max_length().toString() + " characters.")

  if (!anonymous) {
    assert(!anonymous, "Anonymous messages are not allowed by this contract")
  }

  if (deposit > u128.Zero) {
    contributions.update(deposit)
  }

  messages.pushBack(new Message(message, anonymous, deposit))
  return true
}
```

Ok! So we have a helper function, `_assert_financial_safety_limits`(love the name!), and immediately use it in our main contract function, `say`. Can you guess whether `say` is a _view_ or _call_ functions? 

Starting with the arguments, it looks like we are expecting a `message` (makes sense), and a boolean value for `anonymous`, which defaults to `false`. Cool, so this method allows you to `say` something anonymously if you want. This is most likely a _call_ function since _view_ functions don't typically require a string argument, but let's dive deeper to make sure.

Let's look at some of the property methods in there. `Context` is being used, and pretty much anytime you need to dig into `Context`, you're going to use gas. It may not be obvious at first, but the fact that it needs gas to run makes it a _call_ function. 

Next, we see property methods like `update` and `pushBack`. With `update`, we definitely know we are mutating state somehow, which means it's a _call_ function. The same goes with `pushBack`, which is a method on `Vector`, which in turn extends the class, `PersistentVector`, a _storage_ collection you will often find being used in NEAR contracts to persist data. You can read all about data storage collections in the [NEAR docs](https://docs.near.org/docs/concepts/data-storage).

## Calling Function

Notice we are exporting `say`. If we don't export our contract functions then NEAR will throw a `MethodNotFound` error when we try to call them. 

For now, let's fire this contract up and call our one and only method. 

Open terminal, navigate to your project directory, and run the following command: 

```bash
$ yarn build:release
```

If you see an error, run `$ yarn` to make sure the project's dependencies have been installed locally.

Otherwise, you should see a new folder in your root directory called `build`. This contains a `wasm` file called `thanks.wasm`, which is how _AssemblyScript_ compiles all your code into a _WebAssembly_ binary format that is run in web browsers. It's unreadable, but you can create a readable `wat` file if you want to nerd out.  Learn more about [_WebAssembly_](https://webassembly.org/) and _AssemblyScript_'s [ asbuild](https://github.com/AssemblyScript/asbuild) CLI.

Now that we have our code compiled, we can use the NEAR CLI to deploy it. 

<pre class="language-bash">
  $ <span class="token function">near</span> dev-deploy ./build/release/thanks.wasm
</pre>

Note: if you do not specify the `./build/release/thanks.wasm` path in the above command, NEAR defaults to checking for `out/main.wasm` 

You should see another newly generated folder called `neardev`. This is a really cool feature of NEAR, where you can quickly create and use a _testnet_ account for your contract.  

<pre class="language-text">
  sample--thanks $ <span class="token function">near</span> dev-deploy ./build/release/thanks.wasm
  Starting deployment. <span class="code-emphasis">Account id: dev-1622755101091-2932922</span>, 
  node: https://rpc.testnet.near.org, helper: https://helper.testnet.near.org,
  file: ./build/release/thanks.wasm
  Transaction Id EXRwdkcY8iNE1xyowRvc1xvvYYR4YbXNZTCchSFxryrN
  To see the transaction in the transaction explorer, please open this url in your browser
  https://explorer.testnet.near.org/transactions/EXRwdkcY8iNE1xyowRvc1xvvYYR4YbXNZTCchSFxryrN
  Done deploying to dev-1622755101091-2932922
</pre>

The account for the contract above is `dev-1622755101091-2932922`. It's a bit confusing at first, but your contract is seen by NEAR as just another account; no different than your own _testnet_ account, except that this account has methods you can call on it. So let's call it! 

<pre class="language-bash">
  $ <span class="token function">near</span> call dev-1622755101091-2932922 say '{"message":"Hello "}' --accountId YOUR_OWN_TESTNET_ACCOUNT.testnet
</pre>

<blockquote class="tip mb-4">

  <fa-icon class="mr-2" style="opacity: .7;" icon="lightbulb" size="sm"></fa-icon><strong>Do you have a testnet account yet?</strong>

  <hr/>

  If you haven't created a NEAR testnet account of your own, navigate to https://wallet.testnet.near.org and click on "Create Account".

  If you _do_, but NEAR CLI doesn't believe you, try typing <span class="code-emphasis inline-block">$ near login</span> in your terminal. It should open a browser window, which will allow you to connect your NEAR _testnet_ account to your local version of NEAR CLI. [Learn more about NEAR CLI](https://docs.near.org/docs/tools/near-cli).
</blockquote>

You should see something like this in your terminal:

<pre class="language-bash">
  Scheduling a call: dev-1622755101091-2932922.say({"message":"Hello"})
  Transaction Id 2ZJcMeNb9rkeJuXojAdWFU9wQFkUhy3EU7DLz4sis292
  To see the transaction in the transaction explorer, 
  please open this url in your browser
  https://explorer.testnet.near.org/transactions/2ZJcMeNb9rkeJuXojAdWFU9wQFkUhy3EU7DLz4sis292
  <span class="token function">true</span> 
</pre>

Our call function, `say`, returns true just like it's supposed to. You can follow the link your terminal generates to view the transaction in the _testnet_ explorer. However, we pretty much just called our own contract, and sent a message to ourselves. This might work for daily affirmations, but the point of this contract is to call _other_ contracts, but that is simply a case of knowing the contract name of the other person's `accountId` they gave to _their_ copy of _Thanks_. In fact, you can call _my_ copy of this contract I'm using in the demo at the end of this tutorial using  `thanks.humanman.testnet`:

<pre class="language-bash">
  $ <span class="token function">near</span> call thanks.humanman.testnet say '{"message":"You are the BEST. TAKE MY MONEY!"}' --accountId YOUR_OWN_TESTNET_ACCOUNT.testnet  --amount $SO_MUCH_$$$$NEAR
</pre>

If you ran the call command from earlier as it is (with your own testnet account as `accountId`) then I would get a lovely message, and the contract would be working as intended. 

Does that make sense? Contracts have their own accountIds. People have their own accountIds. People can call other people's contracts. _Contracts_ can call other people's contracts too! As far as NEAR is concerned, an `accountId` is and `accountId` is an `accountId`. That's what we call a _cross-contract-call_, but that's for another tutorial.

The next thing we want to do is add the rest of our methods. We have a `list` method, which allows the owner of the contract to list the messages they received. So, that lovely complimentary message will be available to see by running a nifty _view_ function. However, I need to make sure that I, and I alone, the _owner_ of the contract, am allowed to view my messages. That means we will need an owner check. 

That's where _Context_ comes to play. Paste the following method in `index.ts`:

```typescript
  export function list(): Array<Message> {
    _assert_owner()
    return messages.get_last(10)
  }

  function _assert_owner(): void {
    const caller = Context.predecessor
    assert(owner == caller, "Only the owner of this contract may call this method")
  }
```

What is going on here?? 

Well _Context_ has three major properties:

1. signer - _account that signed the initial transaction._

2. predecessor - _the last account who made the current contract call._

3. current - _the account of the contract._

So `_assert_owner()` checks that the last account to call this method is also the `owner` as defined in the `index.ts` file. 

Secondly, the `messages.get_last(10)` spits out the last 10 messages from the  `Messages` instance. Listing any more will get you into "Gas Exceeded" territory.

We can call our `list()` method like so:

<pre class="language-bash">
  $ <span class="token function">near</span> call dev-1622755101091-2932922 list '{}' --accountId ACCOUNT_THAT_MATCHES_OWNER_VARIABLE.testnet
</pre>

If you are calling `list()` and you're seeing that assertion error that `_assert_owner()` throws then check that `const owner` matches the `--acountId` you used to call it. If not, change it, rebuild the `wasm`, redeploy the contract, and try calling it again.

Remember, any function we export in `assembly/index.ts` will be interpreted as a contract function when compiled to a `wasm`, and we can call it just like we did with `say`. It is perfectly fine to write your contracts this way, but did you see how clean some of those helper classes were? The simplicity and elegance of `Message` is quite inspired. Wouldn't if be cool to have a class for our contract so we can be hip to the singleton style all the kids are doing these days?  The answer is, Yes. Yes it would.

## Refactoring

Refactoring contract functions into a singleton pattern isn't that hard, but there are a few things to keep in mind. _AssemblyScript_ requires the `@nearBindgen` decorator on every class you write. Furthermore, every _call_ function requires (or at least, used to require) its own decorator, `@mutateState()` on the line above it. 

One last thing to remember, unlike the function pattern, the singleton style requires you to initialize the contract when you _first_ deploy or call it with a simple flag, `--initFunction new --initArgs '{}'` where `{}` contains the arguments your Class' constructor requires to instantiate, if any. Just remember to remove the flag from subsequent deployments or you will get an error complaining that you already initialized it. 

Switch to the `refactoring/solution` branch, and take a few minutes to review the code. 

It should be complete with all necessary contract methods nicely put together in easy-to-read classes. Your constants have been moved to `utils.ts`. Your helper classes have been moved to `model.ts`, and other helper methods have been converted to private class methods. Pretty nifty, huh?

If you want to refactor what we've done so far yourself then go nuts! You can work in the branch, `functions/solution`, which looks like spaghetti, but will run. 

Our smart contracts are singleton and ready to mingleton!

Let's take a closer look at the refactored code:

```typescript
// index.ts
  //...
@nearBindgen
export class Contract {
  private owner: AccountId
  private allow_anonymous: bool
  // private messages: Vector<Message> = new Vector<Message>("m")
  private contributions: ContributionTracker = new ContributionTracker()

  constructor(owner: AccountId, allow_anonymous: bool = true) {
    this.owner = owner
    this.allow_anonymous = allow_anonymous
  }

  @mutateState()
  say(message: string, anonymous: bool = false): bool {
    // guard against too much money being deposited to this account in beta
    const deposit = Context.attachedDeposit
    this.assert_financial_safety_limits(deposit)

    // guard against invalid message size
    assert(message.length > 0, "Message length cannot be 0")
    assert(message.length < Message.max_length(), "Message length is too long, must be less than " + Message.max_length().toString() + " characters.")

    if (!this.allow_anonymous) {
      assert(!anonymous, "Anonymous messages are not allowed by this contract")
    }

    if (deposit > u128.Zero) {
      this.contributions.update(deposit)
    }

    messages.pushBack(new Message(message, anonymous, deposit))
    return true
  }

  //...
```
This is the first section of our `Contract` class. Our main call function, `say`, is now housed in the `Contract` class, and has its `@mutateState` decorator signifying what type of function it is.

The constructor method on `Contract` takes two arguments: `owner` and `allow_anonymous`. 

The `owner` argument allows you and only you, the person who deployed the contract to call your _view_ methods. 

The `allow_anonymous` argument sets permission on whether people sending you a message can do so anonymously.

One more interesting bit of code to look at is: 

```typescript
assert(message.length > 0, "Message length cannot be 0")
```

I love `assert`. It's so intuitive, and simply allows you to place guards with error messages wherever you want. It saves you lines of `if/else` statements to do the same job, and it seamlessly ties in to your unit tests. If you're not already using it, start today!

## Testing

Speaking of unit tests, let's write a few, and I encourage you to write some more of your own. Use the `assert` methods as clues for what to write.

Navigate to `thanks/__tests__/index.unit.spec.ts` and paste the following in there:

```typescript
import { Context} from "near-sdk-core"
import { VMContext } from "near-sdk-as"
import { Contract } from "../assembly/index"
import { AccountId } from "../../utils"

const contractAccount: AccountId = 'THE DEV ACCOUNT NEAR GENERATED FOR YOU IN NEARDEV/'
const owner = 'you'

let contract: Contract;
beforeEach(() => {
  contract = new Contract(owner);
})

describe('Send Message', () => {

  it('Throws AssertionError if string is empty', () => {
    expect(() => {
      contract.say("");
    }).toThrow();
  });

  it('Throws if message is too long', () => {
    const longMessage: string = "This is a really long message that should throw an error for being longer than 100 characters as is set by the max_length property on the Message class.";
    expect(() => {
      contract.say(longMessage);
    }).toThrow();
  });

});

describe('List Messages', () => {
  // seed messages for list() method

  it('Lists the last 10 messages', () => {
    contract.say("first message")
    contract.say("second message")
    contract.say("third message")
    contract.say("fourth message")
    contract.say("fifth message")
    contract.say("sixth message")
    contract.say("seventh message")
    contract.say("eighth message")
    contract.say("ninth message")
    contract.say("tenth message")
    contract.say("eleventh message")
    // from https://github.com/near/near-sdk-as/blob/master/near-mock-vm/assembly/context.ts
    VMContext.setPredecessor_account_id(owner)
    const last10 = contract.list()
    log(last10)
    expect(last10.length).toBe(10);
  });

});
 
```

These are really simple tests that are solely informed by various `assert` methods. 

Now run:

<pre class="language-bash">
  $ <span class="token function">yarn</span> test:unit
</pre>

If all goes well, you should see something like this:

<pre class="language-bash">
    [Describe]: Send Message
  <br/>
    <span style="color: green;">[Success]</span>: ✔ Throws AssertionError if string is empty
    <span style="color: green;">[Success]</span>: ✔ Throws if message is too long
  <br/>
    [Describe]: List Messages

    <span style="color: green;">[Success]</span>:  ✔ Lists the last 10 messages
  <br/>
  [File]: src/thanks/__tests__/index.unit.spec.ts
  [Groups]: <span style="color: green;">3 pass</span>, 3 total
  [Result]: <span style="color: green;">✔ PASS</span>
  [Snapshot]: 0 total, 0 added, 0 removed, 0 different
  [Summary]: <span style="color: green;">3 pass</span>,  0 fail, 3 total
  [Time]: 7.091ms
  <br/>
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  <br/>
  [Result]: <span style="color: green;">✔ PASS</span>
  [Files]: 1 total
  [Groups]: 3 count, 3 pass
  [Tests]: 3 pass, 0 fail, 3 total
  [Time]: 12537.468ms
  ✨  Done in 13.02s.
</pre>

Unit Tests can be a bit frustrating to work with at first, but they will quickly become very simple to set up.

There are a few things to note about testing your contracts:

1. Unit Tests do not require a build or `wasm` in order to run. Nor do you need to be connected to the NEAR testnet while testing.
<br/>

2. Unit Tests have no concern with the dev account generated by the NEAR CLI <nobr><span class="code-emphasis inline-block">dev deploy</span></nobr> command, so ignore the `neardev/` folder while testing.
<br/>

3. Unit Tests ignore logging unless using `log()`, which is a global `_as-pect_ function
<br/>

Caveats aside, Unit Tests will save you loads of debugging time, and help you handle edge cases, so make sure to use them.

Unit Tests use many of the modules provided by `near-sdk-as` package, including _VMContext_, to leverage info about your Smart Contract while testing. 

You can see it in use in the code above. You don't always need to use _VMContext_ , but if you have checks, like _Thanks_ does, on your functions, which check the owner of the contract, then _VMContext_ will be a real help. It has a bunch of methods allowing you to get the most out of your tests. <a href="https://github.com/near/near-sdk-as/blob/master/near-mock-vm/assembly/context.ts" target="_blank">Learn more about <em>VMContext</em></a>.

<blockquote class="tip">
<fa-icon class="mr-2" style="opacity: .7;" icon="lightbulb" size="sm"></fa-icon><strong>Troubleshooting Bash Errors</strong><br/>
<hr/> 

You run into some weird issues in the terminal when running tests. Make sure you haven't added any unnecessary dependencies. 

Also, you may have been tempted to run `npm audit fix` at some point during installation. Despite all the bright, red, urgent warnings your terminal may have thrown at you, "fixing" the dependencies may prevent you from properly compiling your code, which will in turn prevent pretty much anything else you want to do with your program. 

Bleeding edge technology like blockchain development is a bit of a double edge sword. It's exciting, and there's lots of opportunity to contribute, but the source code is constantly updating and improving. What was stable last week, may be outdated this week. So, stay up to date by [joining the community!](https://near.org/community/)

</blockquote>

## Adding Scripts

Let's make our lives a bit easier and gather our CLI commands.

Switch to the `scripts/solution` branch, and review the contents of the `scripts/` directory. 

Scripts like these are great organizational tools to help you and others interact with your code. 

Take a few minutes to read through `scripts/README.md`. It will lay out a cool demonstration of the contract at work using the terminal. Here is a video of that demonstration:

<div style="position: relative; padding-bottom: 56.25%; height: 0;"><iframe src="https://www.loom.com/embed/13269fbf5c8c463d9955bc5ef0051387" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"></iframe></div>

## Summary

Amazing work! Hopefully, you know a little bit more about Smart Contracts like:

- The difference between a _call_ function and a _view_ function.
- Dependencies and libraries specific to NEAR and _AssemblyScript_.
- Setting up an account Id for your contract.
- Calling a contract method from the command line.
- Writing Smart Contracts as functions and as Classes.
- Unit testing your Smart Contract.
- Using scripts to run code.
  
<br/>

You also have some new packages installed globally that you can use like NEAR CLI. Now you can write your own Smart Contracts, deploy them, and call them; all from the command line! 

## What Next?

<strong class="mt-8 mb-4 d-block">Simulation Testing</strong>

If you want to dive deeper into testing, head over to the [Near Docs](https://docs.near.org/docs/develop/contracts/rust/testing-rust-contracts#simulation-tests), and look into Simulation Tests. Although, we wrote our contract code in _AssemblyScript_, all Simulation Tests are written in _Rust_, which can be a very challenging language to learn, but well worth it if you continue developing Smart Contracts. 

<strong class="mt-8 mb-4 d-block">Adding a Front End</strong>

We've built and tested a remarkable backend. If we were building an API, the Smart Contracts methods would be how we make requests to our api. 

More specifically, Smart Contracts operate like an ORM, but instead of communicating directly with a database (ORM), Smart Contracts communicate directly with the blockchain, or rather, the blockchain's own api, called the RPC.

If that's confusing, then let's back up a bit - we're done building our backend.

But can Grandma open up her terminal and use it? No. Grandma thinks Bash is some sort of side dish with beans. 

In order for her to send us a message (and maybe a NEAR token or two!), we need to spin up a front end that calls the contract the same way we've been doing in the terminal.  

Take a moment to think about what this contract would look like. What would _any_ "thank you message" application _look_ like? We know that `say` requires a _message_, right? Maybe a form of some kind would fit the bill. Et Voil&agrave; !

Before using the form below, please make sure you have a _testnet_ account. You will be redirected to NEAR explorer for authorization.

<contract-form></contract-form>

Refer to the `contract-ui/` folder in this repo to see the code for the above form. See if you can transplant it into your local copy of `sample--thanks` using Vue.

'''
'''--- tutorials/theme-configuration.md ---
---
title: Theme configuration 
slug: theme-configuration
---

## Changing logo
Since there is a bright and a dark theme in Jamdocs, you will need two logotypes. Just replace the two svg files in `src/assets/img` where the dark on is named `logo-dark.svg` and the bright one is named `logo-bright.svg`. If you can´t provide SVG logos, you can just change the file format to for example PNG in line 5 and 10 `src/components/Logo.vue`.

## Adding icons
If you need to use icons somewhere in the theme, you can use any icon from [Feather Icons](https://feathericons.com/) as a component. All that is needed is that you import the icon in the component you want to use it like i do it in the theme switcher component:

```javascript
import { MoonIcon, SunIcon } from 'vue-feather-icons'

export default {
  components: {
    MoonIcon,
    SunIcon
  },
...
```

And then the icon can be used like this: 

```html
<sun-icon class="sun" />
```

## Changing colors
To change the theme colors you need to edit the file `src/assets/scss/config/_colors.scss`. When you open the file for the first time it will look like this:

```scss
// Dark theme
$backgroundDark: #18191a;
$sidebarDark: #2a2c2f;
$textDark: #fff;

// Bright theme
$backgroundBright: #fff;
$sidebarBright: #f3f4f5;
$textBright: #2a2c2f;

// Brand
$brandPrimary: #10c186;
```

## Changing font
Jamdocs uses Source Sans Pro by default. I chose to embed the font in the project to increase page speed. To change the font, you just install another Google Font as a dependency, lets say you want Open Sans:

```bash
yarn add typeface-open-sans
```

Then, on line 7 in `src/main.js` you change the line to:

```javascript
require('typeface-open-sans')
```

Now you can go to line 12 in `src/assets/scss/globals.scss` and change that line to:

```scss
font-family: 'Open Sans', sans-serif;
```

You're done!

## Edit the sidebar

To edit the sidebar, open the file `data/settings.json`. In this file you will find global theme settings as objects and arrays. The sidebar is edit by adding an sections. A section object looks like this:

```json
{
  "section": "Introduction",
  "topics": [
    {
      "title": "Getting started",
      "slug": "getting-started"
    }
  ]
}
```

The section contains a name, in this case "Introduction", and following the name is an array called topics. Each topic resembles a markdown file in `docs` and contains the title you want that file to have in the sidebar, as well as the slug for routing.

For each topic the markdown is scanned for h2 headings, which is added as anchor links right below the topic in the sidebar.
'''
'''--- vetur.config.js ---
// vetur.config.js
/** @type {import('vls').VeturConfig} */
module.exports = {
  // **optional** default: `{}`
  // override vscode settings
  // Notice: It only affects the settings used by Vetur.
  settings: {
    "vetur.useWorkspaceDependencies": true,
    "vetur.experimental.templateInterpolationService": true
  },
  // **optional** default: `[{ root: './' }]`
  // support monorepos
  projects: [
    './packages/repo2', // shorthand for only root.
    {
      // **required**
      // Where is your project?
      // It is relative to `vetur.config.js`.
      root: './packages/repo1',
      // **optional** default: `'package.json'`
      // Where is `package.json` in the project?
      // We use it to determine the version of vue.
      // It is relative to root property.
      package: './package.json',
      // **optional**
      // Where is TypeScript config file in the project?
      // It is relative to root property.
      // tsconfig: './tsconfig.json',
      // **optional** default: `'./.vscode/vetur/snippets'`
      // Where is vetur custom snippets folders?
      snippetFolder: './.vscode/vetur/snippets',
      // **optional** default: `[]`
      // Register globally Vue component glob.
      // If you set it, you can get completion by that components.
      // It is relative to root property.
      // Notice: It won't actually do it. You need to use `require.context` or `Vue.component`
      globalComponents: [
        './src/components/**/*.vue'
      ]
    }
  ]
}

'''