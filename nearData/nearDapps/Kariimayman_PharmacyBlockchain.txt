*GitHub Repository "Kariimayman/PharmacyBlockchain"*

'''--- README.md ---

This is my First project using NEAR and BLOCKCHAINS,This project was created as a submission for an internship program.

My idea is that pharmacies logs are non-changeable and this program simulates a demo of pharmacy that keeps all of its logs on the chain to protect doctors/consumers from fraud and drugs misuse.

The AddDrug function simulates the supplier adding new drugs to the pharmacy.

The RemoveDrung function simulates the consumer purchasing a drug from the pharmacy.

Use this account for an already tested and deployed program -> project.kareemayman.testnet.

Try using the View functions on the PowerShell terminal and any other functions on Bash terminal because sometimes it would return a random error and this is what worked for me.

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- assembly/Transaction.ts ---
@nearBindgen
export class Transaction{
  sender : string
  Type : string
  Drugname: string
  Amount : i32
  constructor(sender: string ,Type: string ,Drugname: string ,Amount: i32) {
    this.sender = sender;
    this.Type = Type;
    this.Drugname = Drugname;
    this.Amount = Amount;
  }
}
'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/index.ts ---
import { Context , PersistentVector} from "near-sdk-as"
import { Transaction } from "./Transaction"
@nearBindgen
export class Pharmacy {
  Transactions : PersistentVector<Transaction> = new PersistentVector<Transaction>("T")
  DrugsName : PersistentVector<string> = new PersistentVector<string>("D")
  Quantity : PersistentVector<i32> = new PersistentVector<i32>("Q")

  //simulates the supplier adding new drugs to the pharmacy
  @mutateState()
  AddDrug(Name : string , amount : i32): string 
  {
    let sender:string = Context.sender
    let flag : bool = true
    for(let i: i32 = 0; i < this.DrugsName.length; i++)
    {
      if(this.DrugsName[i] == Name)
      {
        this.Quantity[i] = this.Quantity[i] + amount
        
        flag = false
      }
    }
    if(flag) 
    {
      this.DrugsName.push(Name)
      this.Quantity.push(amount)
    } 
    let Move : Transaction = new Transaction(sender,"AddDrug",Name,amount)
    this.Transactions.push(Move)
    return ("Added Successfully")
  }

  //simulates the consumer purchasing a drug from the pharmacy
  @mutateState()
  RemoveDrug(Name : string , amount : i32) : string
  {
    let sender:string = Context.sender
    for(let i: i32 = 0; i < this.DrugsName.length; i++)
    {
      if(this.DrugsName[i] == Name)
      { 
        if (this.Quantity[i] < amount)
        {
          return("insufficient amount")
        }
        else
        {
          this.Quantity[i] = this.Quantity[i] - amount
          let Move : Transaction = new Transaction(sender,"ConsumeDrug",Name,amount)
          this.Transactions.push(Move)
          return("Completed Successfully")
        }
      }
    }
    return("Item not found") 
  }

  //Display all The transactions that happened
  TransactionHistory() : Array<Transaction>
  {
    let List = new Array<Transaction>(this.Transactions.length)
    for(let i = 0; i < this.Transactions.length; i++)
    {
      List[i] = this.Transactions[i]
    }
    return List
  }

  //View available drugs
  ViewInventory() : Array<string>
  {
    let counter : i32= 0
    let List = new Array<string>(0)
    for(let i = 0; i < this.DrugsName.length; i++)
    {
      if(this.Quantity[i] != 0)
      {
        List[counter] =  this.DrugsName[i]
        counter = counter + 1
      }
    }
    if (counter == 0)
    {
      List[0] = "Out Of Stock"
    }
    return List
  }

  // Search for a specific drug's quantity 
  ViewQuantity(Search : string) : i32
  {
    for(let i = 0; i < this.DrugsName.length; i++)
    {
      if(this.DrugsName[i] == Search)
      {
        return this.Quantity[i]
      }
    }
    return 0
  }
  }
'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- neardev/dev-account.env ---
CONTRACT_NAME=dev-1657220763847-25723132649440
'''
'''--- package.json ---
{
  "name": "Pharmacy",
  "version": "0.0.1",
  "description": "Start with a basic project",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test'",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "hello@world-near.org",
  "license": "ISC",
  "devDependencies": {
    "@types/jest": "^27.4.0",
    "near-sdk-as": "^3.1.0"
  }
}

'''