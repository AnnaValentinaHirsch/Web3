*GitHub Repository "NEAR-Hispano/nomicon.io"*

'''--- 0000-template.md ---
- Proposal Name: (fill me in with a unique ident, `my_awesome_feature`)
- Start Date: (fill me in with today's date, YYYY-MM-DD)
- NEP PR: [nearprotocol/neps#0000](https://github.com/nearprotocol/neps/pull/0000)
- Issue(s): link to relevant issues in relevant repos (not required).

# Summary
[summary]: #summary

One paragraph explanation of the proposal.

# Motivation
[motivation]: #motivation

Why are we doing this? What use cases does it support? What is the expected outcome?

# Guide-level explanation
[guide-level-explanation]: #guide-level-explanation

Explain the proposal as if it was already implemented and you were teaching it to another developer. That generally means:

- Introducing new named concepts.
- Explaining the feature largely in terms of examples.
- If feature introduces new abstractions, explaining how users and/or developers should *think* about it;
- If applicable, describe the differences between the existing functionality.

For user-facing NEPs this section should focus on user stories.

# Reference-level explanation
[reference-level-explanation]: #reference-level-explanation

This is the technical portion of the NEP. Explain the design in sufficient detail that:

- Its interaction with other features is clear.
- It is reasonably clear how the feature would be implemented.
- Corner cases are dissected by example.

The section should return to the examples given in the previous section, and explain more fully how the detailed proposal makes those examples work.

# Drawbacks
[drawbacks]: #drawbacks

Why should we *not* do this?

# Rationale and alternatives
[rationale-and-alternatives]: #rationale-and-alternatives

- Why is this design the best in the space of possible designs?
- What other designs have been considered and what is the rationale for not choosing them?
- What is the impact of not doing this?

# Unresolved questions
[unresolved-questions]: #unresolved-questions

- What parts of the design do you expect to resolve through the NEP process before this gets merged?
- What parts of the design do you expect to resolve through the implementation of this feature before stabilization?
- What related issues do you consider out of scope for this NEP that could be addressed in the future independently of the solution that comes out of this NEP?

# Future possibilities
[future-possibilities]: #future-possibilities

Think about what the natural extension and evolution of your proposal would
be and how it would affect the project as a whole in a holistic
way. Try to use this section as a tool to more fully consider all possible
interactions with the project in your proposal.
Also consider how the this all fits into the roadmap for the project
and of the relevant sub-team.

This is also a good place to "dump ideas", if they are out of scope for the
NEP you are writing but otherwise related.

If you have tried and cannot think of any future possibilities,
you may simply state that you cannot think of anything.

Note that having something written down in the future-possibilities section
is not a reason to accept the current or a future NEP. Such notes should be
in the section on motivation or rationale in this or subsequent NEPs.
The section merely provides additional information.

'''
'''--- README.md ---
# NEAR Protocol Specifications and Standards

This repository hosts the current NEAR Protocol specification and standards.
This includes the core protocol specification, APIs, contract standards, processes, and workflows.

Changes to the protocol specification and standards are called NEAR Enhancement Proposals (NEPs).

This repository uses [mdBook](https://rust-lang.github.io/mdBook) for the [Nomicon website](https://nomicon.io).

## Specification

NEAR Specification is under active development.
Specification defines how any NEAR client should be connecting, producing blocks, reaching consensus, processing state transitions, using runtime APIs, and implementing smart contract standards as well.

## Standards & Processes

Standards refer to various common interfaces and APIs that are used by smart contract developers on top of the NEAR Protocol.
For example, such standards include SDK for Rust, API for fungible tokens or how to manage user's social graph.

Processes include release process for spec, clients or how standards are updated.

### Contributing

#### Expectations

Ideas presented ultimately as NEPs will need to be driven by the author through the process. It's an exciting opportunity with a fair amount of responsibility from the contributor(s). Please put care into the details. NEPs that do not present convincing motivation, demonstrate understanding of the impact of the design, or are disingenuous about the drawbacks or alternatives tend to be poorly received. Again, by the time the NEP makes it to the pull request, it has a clear plan and path forward based on the discussions in the governance forum.

#### Process

Spec changes are ultimately done via pull requests to this repository. However, in an effort to keep the pull request clean and readable, please follow these instructions to flesh out an idea.

1. Sign up for the [governance site](https://gov.near.org/) and make a post to the appropriate section. For instance, during the ideation phase of a standard, one might start a new conversation in the [Development » Standards section](https://gov.near.org/c/dev/standards/29). The other suggested category in the governance forum is the [Development » Proposals section](https://gov.near.org/c/dev/proposals/68).
2. The forum has comment threading which allows the community and NEAR Collective to ideate, ask questions, wrestle with approaches, etc. If more immediate responses are desired, consider bringing the conversation [to Discord](https://near.chat).
3. When the governance conversations have reached a point where a clear plan is evident, create a pull request, using the instructions below.

Pull request (only when governance discussion has concluded)

* Clone this repository and create a branch with "my-feature".
* Update relevant content in the current specification that are affected by the proposal.
* Create PR, where information of the PR follows [0000-template.md](0000-template.md) to describe motivation and details of the change to the protocol. The file will be added to `specs/Proposals`, using the pull request number padded with zeroes. For instance, the pull request `19` might be created as `specs/Proposals/0019-short-slug-description.md`.
* Post pre-approval of the spec change, present a PR for NEAR Protocol client(s) that implements this specification change.
* Receive final approval and merge change into the `master` to be included in the next release.

Tip: build consensus and integrate feedback. NEPs that have broad support are much more likely to make progress than those that don't receive any comments. Feel free to reach out to the NEP assignee in particular to get help identify stakeholders and obstacles.

### Running mdBook

For Linux and OS X, you may run:

`./build.sh`

For Windows:

```bash
cargo install mdbook
mdbook build
```

To quickly iterate, you may also use the command:

`mdbook serve`

'''
'''--- book.toml ---
[book]
authors = ["Near Inc <hello@near.org>"]
multilingual = false
src = "specs"
title = "NEAR Protocol Specification"
description = "Specification of the NEAR Protocol"

[build]
build-dir = "docs"
use-default-preprocessors = false

[output.html]
git-repository-url = "https://github.com/NEAR-Hispano/nomicon.io/tree/master/"
edit-url-template = "https://github.com/NEAR-Hispano/nomicon.io/edit/master/{path}"
mathjax-support = true

[output.wordcount]

'''
'''--- build.sh ---
#!/bin/sh -e

cargo install mdbook
mdbook clean
mdbook build

'''
'''--- specs/Architecture.md ---
# Arquitectura

Un nodo Near consta aproximadamente de una capa de blockchain y una capa de tiempo de ejecución.
Estas capas fueron diseñadas para ser independientes entre sí: la capa de blockchain en teoría puede soportar el tiempo de ejecución que procesa transacciones de una manera diferente, tiene una máquina virtual diferente (e.g. RISC-V), tiene cuotas diferentes; por otro lado el tiempo de ejecución es ajeno al origen de la transacción. No es consciente de si la blockchain en la que se ejecuta está fragmentada, el consenso que ésta usa e incluso si corre o no corre como parte de una blockchain en sí.

La capa de blockchain y la capa de tiempo de ejecución comparten los siguientes componentes e invariantes:

## Transacciones y Recibos

Las transacciones y los recibos son un concepto fundamental dentro del Protocolo Near. Las transacciones representan acciones requeridas por el usuario de la blockchain, ej. enviar activos, crear una cuenta, ejecutar un método, etc. Los recibos, por otra parte, son una estructura interna; piensa en el recibo como un mensaje que es usado dentro de un sistema de paso de mensajes.

Las transacciones son creadas por fuera del nodo de Protocolo Near, hechas por el usuario que las envía por medio de RPC o por la red de comunicación.
Los recibos son creados por el tiempo de ejecución desde las transacciones o como resultado del procesamiento de otros recibos.

La capa de blockchain no puede crear procesos o procesar transacciones y recibos, solo puede manipularlos moviéndolos y alimentando así a un tiempo de ejecución.

## Sistema basado en cuentas

Similar a Ethereum, el Protocolo Near es un sistema basado en cuentas. Esto significa que cada usuario de blockchain es asociado aproximadamente por una o varias cuentas (aunque hay excepciones, cuando los usuarios comparten una cuenta y después son separados a través de las llaves de acceso por ejemplo).

El tiempo de ejecución esencialmente es un conjunto de reglas complejo que dictan qué hacer con las cuentas basado en la información de las transacciones y recibos. Por lo tanto, es profundamente consciente del concepto de cuenta.

Sin embargo la capa de blockchain es consciente mayormente de las cuentas que están dentro del (véase abajo) y los validadores (véase abajo).
Aparte de estos dos, esta capa no opera directamente en las cuentas.

### Asume que toda cuenta pertenece a su propio fragmento

Toda cuenta en NEAR pertenece a un fragmento.
Toda la información relacionada a la cuenta pertenece también al mismo fragmento.  La información incluye:

- Balance
- Balance bloqueado (para staking)
- Código del contrato
- Almacenamiento llave-valor del contrato
- Todas las llaves de acceso

El tiempo de ejecución asume, es la única información disponible para la ejecución del contrato.
Mientras que otras cuentas pueden pertenecer al mismo fragmento, el tiempo de ejecución nunca las usa o las provee durante la ejecución del contrato.
Entonces podemos asumir que cada cuenta pertenece a su propio fragmento. Así que no hay razón para intencionalmente tratar de colocar cuentas.

## Trie

El Protocolo Near es una blockchain de estado -- hay un estado asociado a cada cuenta y las acciones que los usuarios realizan mutan el estado de esta. El estado, entonces, es almacenado como un trie, y ambos, la capa de blockchain y la capa de tiempo de ejecución son conscientes de este detalle técnico.

La capa de blockchain manipula directamente el trie. Particiona el trie entre los fragmentos para distribuir la carga de trabajo.
Sincroniza el trie entre los nodos, y eventualmente, será responsable de mantener la consistencia del trie entre los nodos a través de su mecanismo de consenso y otros métodos de teoría de juegos.

La capa de tiempo de ejecución también es consciente de que el almacenamiento que usa para realizar operaciones es un trie. Generalmente no tiene que saber este detalle técnico y en teoría podríamos tener tener el trie abstraído como un valor “llave-valor” genérico.
Sin embargo, permitimos algunas operaciones específicas al trie las cuales están expuestas a los desarrolladores de contratos inteligentes para que así utilicen el Protocolo Near a su máxima eficiencia.

## Tokens y gas

Aunque los tokens son un concepto fundamental de la blockchain, están perfectamente encapsulados dentro de la capa de tiempo de ejecución junto con el gas, las cuotas y las recompensas.

La única forma por la cual la capa de blockchain puede estar consciente de los tokens y el gas es a través de la computación de la tasa de cambio y la inflación que están basados estrictamente en el mecanismo de producción de bloques.

## Validadores

La capa de blockchain y la capa de tiempo de ejecución tienen conciencia o están al tanto de un grupo especial de participantes los cuales son los responsables de mantener la integridad del Protocolo Near. Estos participantes tienen cuentas asociadas y son recompensadas respectivamente. La capa de tiempo de ejecución está al tanto de las recompensas, mientras que todo lo que conlleva un validador está dentro de la capa de blockchain.

## Conceptos de la capa de blockchain

Curiosamente, los siguientes conceptos sólo son para la capa de blockchain, la capa de tiempo de ejecución no sabe de ellos:

- Fragmentación -- la capa de tiempo de ejecución no sabe que está siendo usada dentro de una blockchain fragmentada, ej. no sabe que en el trie en la que está       funcionando es solo una parte del estado completo de la blockchain;
- Bloques o fragmentos -- la capa de tiempo de ejecución no sabe que los recibos que procesa constituyen un fragmento y que los recibos resultantes serán usados en   otros fragmentos. Desde la perspectiva del tiempo de ejecución, solo consume y regresa lotes de transacciones y recibos;
- Consenso -- la capa de tiempo de ejecución no sabe cómo se mantiene la consistencia del estado;
- Comunicación -- la capa de tiempo de ejecución no sabe nada de la topología de red actual. El recibo tiene un “receiver_id” (una cuenta receptora), pero no sabe nada acerca del fragmento al que llegará, así que el destino al que irá cada recibo en particular es la responsabilidad de la capa de blockchain.

## Conceptos de la capa de tiempo de ejecución

- Cuotas y recompensas -- las cuotas y recompensas están perfectamente encapsuladas dentro de la capa de tiempo de ejecución. La capa de blockchain, por el contrario, tiene un conocimiento indirecto de estas a través de la computación de la tasa token-gas y la inflación.

'''
'''--- specs/BlockchainLayer/EpochManager/Epoch.md ---
# Epoch

Todos los bloques son divididos en epochs. Dentro de un epoch, el conjunto de validadores es ajustado, y la rotación de validadores
pasa dentro de los límites del epoch.

Un bloque génesis está en su propio epoch. Después de que un bloque está en el epoch de su padre
o empieza en un epoch nuevo si se logran ciertas condiciones.

Dentro de un epoch, la asignación de validador está basada en la altura del bloque: cada altura tiene un productor de bloque asignado, y
cada altura y fragmento tiene un productor de fragmento.

### Final de un epoch
Un bloque está definido para ser el último bloque en su epoch si es el bloque génesis o si las siguientes condiciones se cumplen:
- Sea `estimated_next_epoch_start = first_block_in_epoch.height + epoch_length`
- `block.height + 1 >= estimated_next_epoch_start`
- `block.last_finalized_height + 3 >= estimated_next_epoch_start`

`epoch_length` está definido en `genesis_config` y tiene un valor de altura delta `43200` en mainnet (12 horas a un bloque por segundo).

### EpochHeight
Los epochs en una cadena puede ser identificados por la altura, que está definida en la siguiente manera:
- Un epoch especial que contiene el solo bloque génesis: undefined
- El epoch empezando del bloque que va después de génesis: `0` (NOTA: en la implementación actual es `1` debido a un bug, para que no haya epochs con altura `1`)
- Siguientes epochs: altura del epoch padre más uno

### Epoch id
Cada bloque almacena el id de su epoch - `epoch_id`.

El id del epoch está definida como
- Para el bloque especial génesis epoch es `0`
- Para el epoch con altura `0` es `0` (NOTA: los primeros dos epochs usan el mismo id de epoch)
- Para el epoch con altura `1` es el hash del bloque génesis
- Para el epoch con altura `T+2` es el hash de el último bloque en el epoch `T`

### Final de un epoch
- Después de procesar el último bloque del epoch `T`, el `EpochManager` agrega información del bloque del epoch, y calcula
el validador establecido por el epoch `T+2`. Este proceso se describe en [EpochManager](EpochManager.md).
- Después de eso, el conjunto de validadores rota a la época `T+1`, y el siguiente bloque es producido por el validador del nuevo conjunto
- Aplicando el primer bloque del epoch `T+1`, en adición a una transición normal, también aplica las transiciones de estado por epoch:
  recompensas de validador, desbloqueos de stakes y slashing.

'''
'''--- specs/BlockchainLayer/EpochManager/EpochManager.md ---
# EpochManager

## Finalizando un epoch

En el último bloque del epoch `T`, `EpochManager` calcula `EpochInfo` para el epoch `T+2`, que
es definida por `EpochInfo` para `T+1` y la información agregada de los bloques del epoch `T`.

`EpochInfo` es toda la la información que `EpochManager` almacena para el epoch, que es:
- `epoch_height`: altura del epoch (`T+2`)
- `validators`: la lista de validadores seleccionados para el epoch `T+2`
- `validator_to_index`: Mapeo desde id de la cuenta al index en `validators`
- `block_producers_settlement`: define el mapeo desde la altura hasta el productor de bloques
- `chunk_producers_settlement`: define el mapeo desde la altura y el id del fragmento hasta el productor de fragmentos
- `hidden_validators_settlement`: TODO
- `fishermen`, `fishermen_to_index`: TODO. desactivado en mainnet a través de un `fishermen_threshold` grande en configuración
- `stake_change`: TODO
- `validator_reward`: recompensa de validador para el epoch `T`
- `validator_kickout`: vea [conjunto Kickout](#kickout-set)
- `minted_amount`: tokens minteados en el epoch `T`
- `seat_price`: precio asiento del epoch
- `protocol_version`: TODO

Agregando bloques de el epoch calcula los siguientes conjuntos:
- `block_stats`/`chunk_stats`: estadísticas de actividad en forma de bloques/fragmentos `produced` y `expected` para cada validador de `T`
- `proposals`: propuestas de stake hechas en el epoch `T`. Si una cuenta hizo múltiples propuestas, la última es usada.
- `slashes`: vea [conjunto Slash](#slash-set)

### Conjunto Slash
NOTA: el slashing actualmente está desactivado. Lo que sigue a continuación es el diseño actual, que puede cambiar.

Los conjuntos Slash se mantenidas en bloques. Si un validador se slashea en un epoch `T`, los bloques subsecuentes de los epochs `T` y
`T+1` lo mantienen en sus conjuntos slash. Al final del epoch `T`, el validador slasheado también se agrega a `kickout[T+2]`.
Las propuestas de los bloques en los conjuntos slash son ignoradas.

Se queda en el conjunto slash (y conjunto kickout) por dos o tres epochs dependiendo en si iba a ser un validador en `T+1`:
- Caso común: `v` está en `validators[T]` y en `validators[T+1]`
   - las propuestas de `v` en `T`, `T+1` y `T+2` son ignorados
   - `v` se agrega a `kickout[T+2]`, `kickout[T+3]` y `kickout[T+4]` como slasheados
   - `v` puede stakear otra vez empezando con el primer bloque de `T+3`.
- Si `v` está en `validators[T]` pero no en `validators[T+1]` (e.j. si no está stakeado en `T-1`)
   - las propuestas de `v` en `T` y `T+1` es ignorado
   - `v` es agregado a `kickout[T+2]` y `kickout[T+3]` como slasheado
   - `v` puede hacer una propuesta en `T+2` para volverse un validador en `T+4`
- Si `v` está en `validators[T-1]` pero no en `validators[T]` (e.j. hizo comportamiento slashable justo antes de rotar)
    - las propuestas de `v` en `T` y `T+1` es ignorado
    - `v` es agregado a `kickout[T+2]` y `kickout[T+3]` como slasheado
    - `v` puede hacer una propuesta en `T+2` para volverse un validador en `T+4`
    
## Calculando EpochInfo

### Conjunto Kickout
`kickout[T+2]` contiene los validadores del epoch `T+1` que dejan de ser validadores en `T+2`, y también cuentas que no
son necesariamente validadores de `T+1`, pero se mantienen en los conjuntos de slashing por la regla descrita [anteriormente](#slash-set).

`kickout[T+2]` es calculado de la manera siguiente:
1. `Slashed`: cuentas en el conjunto slash del último bloque en `T`
2. `Unstaked`: cuentas que remueven su stake en el epoch `T`, si su stake es diferente de 0 para el epoxh `T+1`
3. `NotEnoughBlocks/NotEnoughChunks`: Para cada validador se calcula la relación entre los bloques producidos y los bloques esperados producidos (lo mismo con fragmentos producidos/esperados).
    - Excepción: Si todos los validadores de `T` están en `kickout[T+1]` o serán expulsados, no expulsamos el
      validador con el máximo número de bloques producidos. Si hay múltiples, escogemos el que tenga el id
      de validador mínimo en el epoch.
4. `NotEnoughStake`: calculado después de la selección de validador. Las cuentas que tienen stake en el epoch `T+1`, pero no alcanza el umbral del stake para el epoch `T+2`.
5. `DidNotGetASeat`: calculado después de la selección de validador. Las cuentas que tienen stake en el epoch `T+1`, alcanza el umbral para el epoch `T+2`, pero no obtuvo ningún asiento.

### Procesamiento de propuestas
El conjunto de propuestas es procesado por el algoritmo de selección de validador, pero antes de eso, el conjunto de propuestas es ajustado
de la siguiente manera:
1. Si una cuenta está en el conjunto slash a partir del final del `T`, o se expulsa para `NotEnoughBlocks/NotEnoughChunks` en el epoch `T`,
  su propuesta es ignorada.
2. Si un validador está en `validators[T+1]`, y no hizo una propuesta, agrega una propuesta implícita con su stake en `T+1`.
3. Si un validador está en `validators[T]` y `validators[T+1]`, e hizo una propuesta en `T` (incluyendo las implícitas),
  entonces sus recompensas por epoch `T` es automáticamente agregada a la propuesta.

El conjunto ajustado de propuestas es usado para calcular el precio asiento, y determinar `validators`,`block_producers_settlement` y 
los conjuntos `chunk_producers_settlement`. Este algoritmo está descrito en [Economía](../../Economics/README.md#validator-selection).

### Recompensa de validador
El cálculo de recompensas se describe en la sección [Economía](../../Economics/README.md#rewards-calculation).

'''
'''--- specs/BlockchainLayer/EpochManager/README.md ---
# Epochs y staking
- [Epoch](Epoch.md)
- [EpochManager](EpochManager.md)
- [Staking](Staking.md)

'''
'''--- specs/BlockchainLayer/EpochManager/Staking.md ---
# Staking y slashing

## Invariante Stake
`Account` tiene dos campos representando sus tokens: `amount` y `locked`. `amount + locked` es el número total de
tokens que una cuenta tiene: las acciones de bloqueo/desbloqueo involucra transferencia de balance entre los dos campos, y el
slashing es realizado al restar del valor `locked`.

En una acción stake el balance se bloquea inmediatamente (el balance bloqueado solo puede incrementar), y la propuesta de stake es
pasado al epoch manager. Las propuestas se acumulan durante un epoch y se procesan todas de una cuando un epoch es finalizado.
El desbloqueo solo pasa al inicio de un epoch.

El stake de la cuenta es definido por epoch y es almacenado en los `validators` `EpochInfo` y los conjuntos `fishermen`. `locked`
siempre es igual al máximo de los últimos tres stakes y la propuesta más alta en el epoch actual.

### Regresando el stake
`locked` es el número de tokens bloqueados para staking, se calcula de siguiente manera:
- inicialmente es el valor en génesis o `0` para las nuevas cuentas
- en una propuesta de staking con un valor más alto que `locked`, se incrementa a ese valor
- al inicio de cada epoch se recalcula:
    1. considera los 3 epochs más recientes
    2. para las cuentas no slasheadas, toma el máximo de sus stakes en esos epochs
    3. si una cuenta hizo una propuesta en el bloque que empieza el epoch, también toma el máximo con el valor de la propuesta
    4. cambia `locked` al valor resultante (y actualiza `amount` para que `amount + locked` se quede igual)

### Slashing
TODO.

'''
'''--- specs/BlockchainLayer/Transaction.md ---
# Transaction

'''
'''--- specs/BlockchainLayer/Transactions.md ---
# Transactions

'''
'''--- specs/ChainSpec/Consensus.md ---
# Consensus

## Definitions and notation

For the purpose of maintaining consensus, transactions are grouped into *blocks*. There is a single preconfigured block \\(G\\) called *genesis block*. Every block except \\(G\\) has a link pointing to the *previous block* \\(\\operatorname{prev}(B)\\), where \\(B\\) is the block, and \\(G\\) is reachable from every block by following those links (that is, there are no cycles).

The links between blocks give rise to a partial order: for blocks \\(A\\) and \\(B\\), \\(A < B\\) means that \\(A \\ne B\\) and \\(A\\) is reachable from \\(B\\) by following links to previous blocks, and \\(A \\le B\\) means that \\(A < B\\) or \\(A = B\\). The relations \\(>\\) and \\(\\ge\\) are defined as the reflected versions of \\(<\\) and \\(\\le\\), respectively. Finally, \\(A \\sim B\\) means that either \\(A < B\\), \\(A = B\\) or \\(A > B\\), and \\(A \\nsim B\\) means the opposite.

A *chain* \\(\\operatorname{chain}(T)\\) is a set of blocks reachable from block \\(T\\), which is called its *tip*. That is, \\(\\operatorname{chain}(T) = \\{B \\mid B \\le T\\}\\). For any blocks \\(A\\) and \\(B\\), there is a chain that both \\(A\\) and \\(B\\) belong to iff \\(A \\sim B\\). In this case, \\(A\\) and \\(B\\) are said to be *on the same chain*.

Each block has an integer *height* \\(\\operatorname{h}(B)\\). It is guaranteed that block heights are monotonic (that is, for any block \\(B \\ne G\\), \\(\\operatorname{h}(B) > \\operatorname{h}(\\operatorname{prev}(B))\\)), but they need not be consecutive. Also, \\(\\operatorname{h}(G)\\) may not be zero. Each node keeps track of a valid block with the largest height it knows about, which is called its *head*.

Blocks are grouped into *epochs*. In a chain, the set of blocks that belongs to some epoch forms a contiguous range: if blocks \\(A\\) and \\(B\\) such that \\(A < B\\) belong to the same epoch, then every block \\(X\\) such that \\(A < X < B\\) also belongs to that epoch. Epochs can be identified by sequential indices: \\(G\\) belongs to an epoch with index \\(0\\), and for every other block \\(B\\), the index of its epoch is either the same as that of \\(\\operatorname{prev}(B)\\), or one greater.

Each epoch is associated with a set of block producers that are validating blocks in that epoch, as well as an assignment of block heights to block producers that are responsible for producing a block at that height. A block producer responsible for producing a block at height \\(h\\) is called *block proposer at \\(h\\)*. This information (the set and the assignment) for an epoch with index \\(i \\ge 2\\) is determined by the last block of the epoch with index \\(i-2\\). For epochs with indices \\(0\\) and \\(1\\), this information is preconfigured. Therefore, if two chains share the last block of some epoch, they will have the same set and the same assignment for the next two epochs, but not necessarily for any epoch after that.

The consensus protocol defines a notion of *finality*. Informally, if a block \\(B\\) is final, any future final blocks may only be built on top of \\(B\\). Therefore, transactions in \\(B\\) and preceding blocks are never going to be reversed. Finality is not a function of a block itself, rather, a block may be final or not final in some chain it is a member of. Specifically, \\(\\operatorname{final}(B, T)\\), where \\(B \\le T\\), means that \\(B\\) is final in \\(\\operatorname{chain}(T)\\). A block that is final in a chain is final in all of its extensions: specifically, if \\(\\operatorname{final}(B, T)\\) is true, then \\(\\operatorname{final}(B, T')\\) is also true for all \\(T' \\ge T\\).

## Data structures

The fields in the Block header relevant to the consensus process are:

```rust
struct BlockHeader {
    ...
    prev_hash: BlockHash,
    height: BlockHeight,
    epoch_id: EpochId,
    last_final_block_hash: BlockHash,
    approvals: Vec<Option<Signature>>
    ...
}
```

Block producers in the particular epoch exchange many kinds of messages. The two kinds that are relevant to the consensus are **Blocks** and **Approvals**. The approval contains the following fields:

```rust
enum ApprovalInner {
    Endorsement(BlockHash),
    Skip(BlockHeight),
}

struct Approval {
    inner: ApprovalInner,
    target_height: BlockHeight,
    signature: Signature,
    account_id: AccountId
}
```

Where the parameter of the `Endorsement` is the hash of the approved block, the parameter of the `Skip` is the height of the approved block, `target_height` is the specific height at which the approval can be used (an approval with a particular `target_height` can be only included in the `approvals` of a block that has `height = target_height`), `account_id` is the account of the block producer who created the approval, and `signature` is their signature on the tuple `(inner, target_height)`.

## Approvals Requirements

Every block \\(B\\) except the genesis block must logically contain approvals of a form described in the next paragraph from block producers whose cumulative stake exceeds \\(^2\\!/_3\\) of the total stake in the current epoch, and in specific conditions described in section [epoch switches](#epoch-switches) also the approvals of the same form from block producers whose cumulative stake exceeds \\(^2\\!/_3\\) of the total stake in the next epoch.

The approvals logically included in the block must be an `Endorsement` with the hash of \\(\\operatorname{prev}(B)\\) if and only if \\(\\operatorname{h}(B) = \\operatorname{h}(\\operatorname{prev}(B))+1\\), otherwise it must be a `Skip` with the height of \\(\\operatorname{prev}(B)\\). See [this section](#approval-condition) below for details on why the endorsements must contain the hash of the previous block, and skips must contain the height.

Note that since each approval that is logically stored in the block is the same for each block producer (except for the `account_id` of the sender and the `signature`), it is redundant to store the full approvals. Instead physically we only store the signatures of the approvals. The specific way they are stored is the following: we first fetch the ordered set of block producers from the current epoch. If the block is on the epoch boundary and also needs to include approvals from the next epoch (see [epoch switches](#epoch-switches)), we add new accounts from the new epoch

```python
def get_accounts_for_block_ordered(h, prev_block):
    cur_epoch = get_next_block_epoch(prev_block)
    next_epoch = get_next_block_next_epoch(prev_block)

    account_ids = get_epoch_block_producers_ordered(cur_epoch)
    if next_block_needs_approvals_from_next_epoch(prev_block):
        for account_id in get_epoch_block_producers_ordered(next_epoch):
            if account_id not in account_ids:
                account_ids.append(account_id)

    return account_ids
```

The block then contains a vector of optional signatures of the same or smaller size than the resulting set of `account_ids`, with each element being `None` if the approval for such account is absent, or the signature on the approval message if it is present. It's easy to show that the actual approvals that were signed by the block producers can easily be reconstructed from the information available in the block, and thus the signatures can be verified. If the vector of signatures is shorter than the length of `account_ids`, the remaining signatures are assumed to be `None`.

## Messages

On receipt of the approval message the participant just stores it in the collection of approval messages.

```python
def on_approval(self, approval):
    self.approvals.append(approval)
```

Whenever a participant receives a block, the operations relevant to the consensus include updating the `head` and initiating a timer to start sending the approvals on the block to the block producers at the consecutive `target_height`s. The timer delays depend on the height of the last final block, so that information is also persisted.

```python
def on_block(self, block):
    header = block.header

    if header.height <= self.head_height:
        return

    last_final_block = store.get_block(header.last_final_block_hash)

    self.head_height = header.height
    self.head_hash = block.hash()
    self.largest_final_height = last_final_block.height

    self.timer_height = self.head_height + 1
    self.timer_started = time.time()

    self.endorsement_pending = True
```

The timer needs to be checked periodically, and contain the following logic:

```python
def get_delay(n):
    min(MAX_DELAY, MIN_DELAY + DELAY_STEP * (n-2))

def process_timer(self):
    now = time.time()

    skip_delay = get_delay(self.timer_height - self.largest_final_height)

    if self.endorsement_pending and now > self.timer_started + ENDORSEMENT_DELAY:

        if self.head_height >= self.largest_target_height:
            self.largest_target_height = self.head_height + 1
            self.send_approval(head_height + 1)

        self.endorsement_pending = False

    if now > self.timer_started + skip_delay:
        assert not self.endorsement_pending

        self.largest_target_height = max(self.largest_target_height, self.timer_height + 1)
        self.send_approval(self.timer_height + 1)

        self.timer_started = now
        self.timer_height += 1

def send_approval(self, target_height):
    if target_height == self.head_height + 1:
        inner = Endorsement(self.head_hash)
    else:
        inner = Skip(self.head_height)

    approval = Approval(inner, target_height)
    send(approval, to_whom = get_block_proposer(self.head_hash, target_height))
```

Where `get_block_proposer` returns the next block proposer given the previous block and the height of the next block.

It is also necessary that `ENDORSEMENT_DELAY < MIN_DELAY`. Moreover, while not necessary for correctness, we require that `ENDORSEMENT_DELAY * 2 <= MIN_DELAY`.

## Block Production

We first define a convenience function to fetch approvals that can be included in a block at particular height:

```python
def get_approvals(self, target_height):
    return [approval for approval
                     in self.approvals
                     if approval.target_height == target_height and
                        (isinstance(approval.inner, Skip) and approval.prev_height == self.head_height or
                         isinstance(approval.inner, Endorsement) and approval.prev_hash == self.head_hash)]
```

A block producer assigned for a particular height produces a block at that height whenever they have `get_approvals` return approvals from block producers whose stake collectively exceeds 2/3 of the total stake.

## Finality condition

A block \\(B\\) is final in \\(\\operatorname{chain}(T)\\), where \\(T \\ge B\\), when either \\(B = G\\) or there is a block \\(X \\le T\\) such that \\(B = \\operatorname{prev}(\\operatorname{prev}(X))\\) and \\(\\operatorname{h}(X) = \\operatorname{h}(\\operatorname{prev}(X))+1 = \\operatorname{h}(B)+2\\). That is, either \\(B\\) is the genesis block, or \\(\\operatorname{chain}(T)\\) includes at least two blocks on top of \\(B\\), and these three blocks (\\(B\\) and the two following blocks) have consecutive heights.

## Epoch switches

There's a parameter \\(epoch\\\_length \\ge 3\\) that defines the minimum length of an epoch. Suppose that a particular epoch \\(e\\\_cur\\) started at height \\(h\\), and say the next epoch will be \\(e\\\_next\\). Say \\(\\operatorname{BP}(e)\\) is a set of block producers in epoch \\(e\\). Say \\(\\operatorname{last\\\_final}(T)\\) is the highest final block in \\(\\operatorname{chain}(T)\\). The following are the rules of what blocks contain approvals from what block producers, and belong to what epoch.

- Any block \\(B\\) with \\(\\operatorname{h}(\\operatorname{prev}(B)) < h+epoch\\\_length-3\\) is in the epoch \\(e\\\_cur\\) and must have approvals from more than \\(^2\\!/_3\\) of \\(\\operatorname{BP}(e\\\_cur)\\) (stake-weighted).
- Any block \\(B\\) with \\(\\operatorname{h}(\\operatorname{prev}(B)) \\ge h+epoch\\\_length-3\\) for which \\(\\operatorname{h}(\\operatorname{last\\\_final}(\\operatorname{prev}(B))) < h+epoch\\\_length-3\\) is in the epoch \\(e\\\_cur\\) and must logically include approvals from both more than \\(^2\\!/_3\\) of \\(\\operatorname{BP}(e\\\_cur)\\) and more than \\(^2\\!/_3\\) of \\(\\operatorname{BP}(e\\\_next)\\) (both stake-weighted).
- The first block \\(B\\) with \\(\\operatorname{h}(\\operatorname{last\\\_final}(\\operatorname{prev}(B))) >= h+epoch\\\_length-3\\) is in the epoch \\(e\\\_next\\) and must logically include approvals from more than \\(^2\\!/_3\\) of \\(\\operatorname{BP}(e\\\_next)\\) (stake-weighted).

(see the definition of *logically including* approvals in [approval requirements](#approvals-requirements))

## Safety

Note that with the implementation above a honest block producer can never produce two endorsements with the same `prev_height` (call this condition *conflicting endorsements*), neither can they produce a skip message `s` and an endorsement `e` such that `s.prev_height < e.prev_height and s.target_height >= e.target_height` (call this condition *conflicting skip and endorsement*).

**Theorem** Suppose that there are blocks \\(B\_1\\), \\(B\_2\\), \\(T\_1\\) and \\(T\_2\\) such that \\(B\_1 \\nsim B\_2\\), \\(\\operatorname{final}(B\_1, T\_1)\\) and \\(\\operatorname{final}(B\_2, T\_2)\\). Then, more than \\(^1\\!/_3\\) of the block producer in some epoch must have signed either conflicting endorsements or conflicting skip and endorsement.

**Proof** Without loss of generality, we can assume that these blocks are chosen such that their heights are smallest possible. Specifically, we can assume that \\(\\operatorname{h}(T\_1) = \\operatorname{h}(B\_1)+2\\) and \\(\\operatorname{h}(T\_2) = \\operatorname{h}(B\_2)+2\\). Also, letting \\(B\_c\\) be the highest block that is an ancestor of both \\(B\_1\\) and \\(B\_2\\), we can assume that there is no block \\(X\\) such that \\(\\operatorname{final}(X, T\_1)\\) and \\(B\_c < X < B\_1\\) or \\(\\operatorname{final}(X, T\_2)\\) and \\(B\_c < X < B\_2\\).

**Lemma** There is such an epoch \\(E\\) that all blocks \\(X\\) such that \\(B\_c < X \\le T\_1\\) or \\(B\_c < X \\le T\_2\\) include approvals from more than \\(^2\\!/_3\\) of the block producers in \\(E\\).

**Proof** There are two cases.

Case 1: Blocks \\(B\_c\\), \\(T\_1\\) and \\(T\_2\\) are all in the same epoch. Because the set of blocks in a given epoch in a given chain is a contiguous range, all blocks between them (specifically, all blocks \\(X\\) such that \\(B\_c < X < T\_1\\) or \\(B\_c < X < T\_2\\)) are also in the same epoch, so all those blocks include approvals from more than \\(^2\\!/_3\\) of the block producers in that epoch.

Case 2: Blocks \\(B\_c\\), \\(T\_1\\) and \\(T\_2\\) are not all in the same epoch. Suppose that \\(B\_c\\) and \\(T\_1\\) are in different epochs. Let \\(E\\) be the epoch of \\(T\_1\\) and \\(E\_p\\) be the preceding epoch (\\(T\_1\\) cannot be in the same epoch as the genesis block). Let \\(R\\) and \\(S\\) be the first and the last block of \\(E\_p\\) in \\(\\operatorname{chain}(T\_1)\\). Then, there must exist a block \\(F\\) in epoch \\(E\_p\\) such that \\(\\operatorname{h}(F)+2 = \\operatorname{h}(S) < \\operatorname{h}(T\_1)\\). Because \\(\\operatorname{h}(F) < \\operatorname{h}(T\_1)-2\\), we have \\(F < B\_1\\), and since there are no final blocks \\(X\\) such that \\(B\_c < X < B\_1\\), we conclude that \\(F \\le B\_c\\). Because there are no epochs between \\(E\\) and \\(E\_p\\), we conclude that \\(B\_c\\) is in epoch \\(E\_p\\). Also, \\(\\operatorname{h}(B\_c) \\ge \\operatorname{h}(F) \\ge \\operatorname{h}(R)+epoch\\\_length-3\\). Thus, any block after \\(B\_c\\) and until the end of \\(E\\) must include approvals from more than \\(^2\\!/_3\\) of the block producers in \\(E\\). Applying the same argument to \\(\\operatorname{chain}(T\_2)\\), we can determine that \\(T\_2\\) is either in \\(E\\) or \\(E\_p\\), and in both cases all blocks \\(X\\) such that \\(B\_c < X \\le T\_2\\) include approvals from more than \\(^2\\!/_3\\) of block producers in \\(E\\) (the set of block producers in \\(E\\) is the same in \\(\\operatorname{chain}(T\_1)\\) and \\(\\operatorname{chain}(T\_2)\\) because the last block of the epoch preceding \\(E\_p\\), if any, is before \\(B\_c\\) and thus is shared by both chains). The case where \\(B\_c\\) and \\(T\_1\\) are in the same epoch, but \\(B\_c\\) and \\(T\_2\\) are in different epochs is handled similarly. Thus, the lemma is proven.

Now back to the theorem. Without loss of generality, assume that \\(\\operatorname{h}(B\_1) \\le \\operatorname{h}(B\_2)\\). On the one hand, if \\(\\operatorname{chain}(T\_2)\\) doesn't include a block at height \\(\\operatorname{h}(B\_1)\\), then the first block at height greater than \\(\\operatorname{h}(B\_1)\\) must include skips from more than \\(^2\\!/_3\\) of the block producers in \\(E\\) which conflict with endorsements in \\(\\operatorname{prev}(T\_1)\\), therefore, more than \\(^1\\!/_3\\) of the block producers in \\(E\\) must have signed conflicting skip and endorsement. Similarly, if \\(\\operatorname{chain}(T\_2)\\) doesn't include a block at height \\(\\operatorname{h}(B\_1)+1\\), more than \\(^1\\!/_3\\) of the block producers in \\(E\\) signed both an endorsement in \\(T\_1\\) and a skip in the first block in \\(\\operatorname{chain}(T\_2)\\) at height greater than \\(\\operatorname{h}(T\_1)\\). On the other hand, if \\(\\operatorname{chain}(T\_2)\\) includes both a block at height \\(\\operatorname{h}(B\_1)\\) and a block at height \\(\\operatorname{h}(B\_1)+1\\), the latter must include endorsements for the former, which conflict with endorsements for \\(B\_1\\). Therefore, more than \\(^1\\!/_3\\) of the block producers in \\(E\\) must have signed conflicting endorsements. Thus, the theorem is proven.

## Liveness

See the proof of liveness in [near.ai/doomslug](https://near.ai/doomslug). The consensus in this section differs in that it requires two consecutive blocks with endorsements. The proof in the linked paper trivially extends, by observing that once the delay is sufficiently long for a honest block producer to collect enough endorsements, the next block producer ought to have enough time to collect all the endorsements too.

## Approval condition

The approval condition above

> Any valid block must logically include approvals from block producers whose cumulative stake exceeds 2/3 of the total stake in the epoch. For a block `B` and its previous block `B'` each approval in `B` must be an `Endorsement` with the hash of `B'` if and only if `B.height == B'.height + 1`, otherwise it must be a `Skip` with the height of `B'`

Is more complex that desired, and it is tempting to unify the two conditions. Unfortunately, they cannot be unified.

It is critical that for endorsements each approval has the `prev_hash` equal to the hash of the previous block, because otherwise the [safety proof](#safety) above doesn't work, in the second case the endorsements in `B1` and `Bx` can be the very same approvals.

It is critical that for the skip messages we do **not** require the hashes in the approvals to match the hash of the previous block, because otherwise a malicious actor can create two blocks at the same height, and distribute them such that half of the block producers have one as their head, and the other half has the other. The two halves of the block producers will be sending skip messages with different `prev_hash` but the same `prev_height` to the future block producers, and if there's a requirement that the `prev_hash` in the skip matches exactly the `prev_hash` of the block, no block producer will be able to create their blocks.

'''
'''--- specs/ChainSpec/LightClient.md ---
# Cliente ligero

El estado del cliente ligero está definido por:

1. `BlockHeaderInnerLiteView` para la cabeza actual (que contiene `height`, `epoch_id`, `next_epoch_id`, `prev_state_root`, `outcome_root`, `timestamp`, el hash de los productores de bloque establecido por el siguiente epoch `next_bp_hash`, y la raíz merkle para todos los hashes de bloque `block_merkle_root`);
2. El conjunto de productores de bloques para los actuales y siguientes epochs.

El `epoch_id` se refiere al epoch al que pertenece el bloque que es la cabeza conocida actual, y `next_epoch_id` es el epoch que seguirá después.

Los clientes ligeros operan trayendo periódicamente instancias de `LightClientBlockView` a través de un end-point RPC descrito a [continución](#rpc-end-point).

El cliente ligero no necesita recibir `LightClientBlockView` para todos los bloques. Tener el `LightClientBlockView` para el bloque `B` es suficiente para poder verificar cualquier declaración acerca del estado o las salidas en cualquier bloque en la ascendencia de `B` (incluyendo al mismo `B`). Particularmente, tener `LightClientBlockView` en la cabeza es suficiente para verificar localmente cualquier declaración acerca del estado o las salidas en cualquier bloque en la cadena canónica.

Sin embargo, para verificar la validez de un `LightClientBlockView` particular, el cliente ligero de de haber verificado un `LightClientBlockView` para al menos un bloque en el epoch anterior, por lo tanto para sincronizar para la cabeza el cliente ligero tendrá que traer y verificar un `LightClientBlockView` por cada epoch pasado.

## Validación de vistas de bloque de clientes ligeros

```rust
pub enum ApprovalInner {
    Endorsement(CryptoHash),
    Skip(BlockHeight)
}

pub struct ValidatorStakeView {
    pub account_id: AccountId,
    pub public_key: PublicKey,
    pub stake: Balance,
}

pub struct BlockHeaderInnerLiteView {
    pub height: BlockHeight,
    pub epoch_id: CryptoHash,
    pub next_epoch_id: CryptoHash,
    pub prev_state_root: CryptoHash,
    pub outcome_root: CryptoHash,
    pub timestamp: u64,
    pub next_bp_hash: CryptoHash,
    pub block_merkle_root: CryptoHash,
}

pub struct LightClientBlockLiteView {
    pub prev_block_hash: CryptoHash,
    pub inner_rest_hash: CryptoHash,
    pub inner_lite: BlockHeaderInnerLiteView,
}

pub struct LightClientBlockView {
    pub prev_block_hash: CryptoHash,
    pub next_block_inner_hash: CryptoHash,
    pub inner_lite: BlockHeaderInnerLiteView,
    pub inner_rest_hash: CryptoHash,
    pub next_bps: Option<Vec<ValidatorStakeView>>,
    pub approvals_after_next: Vec<Option<Signature>>,
}
```

Recuerda que el hash del bloque es

```rust
sha256(concat(
    sha256(concat(
        sha256(borsh(inner_lite)),
        sha256(borsh(inner_rest))
    )),
    prev_hash
))
```

Los campos `prev_block_hash`, `next_block_inner_hash` y `inner_rest_hash` son usados para reconstruir los hashes del actual bloque y el siguiente, y las aprobaciones que serán firmadas de la manera siguiente (donde `block_view` es una instancia de `LightClientBlockView`):

```python
def reconstruct_light_client_block_view_fields(block_view):
    current_block_hash = sha256(concat(
        sha256(concat(
            sha256(borsh(block_view.inner_lite)),
            block_view.inner_rest_hash,
        )),
        block_view.prev_block_hash
    ))

    next_block_hash = sha256(concat(
        block_view.next_block_inner_hash,
        current_block_hash
    ))

    approval_message = concat(
        borsh(ApprovalInner::Endorsement(next_block_hash)),
        little_endian(block_view.inner_lite.height + 2)
    )

    return (current_block_hash, next_block_hash, approval_message)
```

El cliente liger actualiza su cabeza con la información de `LightClientBlockView` si:

1. La altura del bloque es mayor que la altura de la cabeza actual;
2. El epoch del bloque es igual al `epoch_id` o `next_epoch_id` conocido para la cabeza actual;
3. Si el epoch del bloque es igual al `next_epoch_id` de la cabeza, entonces `next_bps` no es `None`;
4. `approvals_after_next` contiene firmas válidas en `approval_message` de los productores de bloques del epoch correspondiente (vea la siguiente sección):
5. Las firmas presentes en `approvals_after_next` corresponden a más de 2/3 del stake total (vea la siguiente sección).
6. Si `next_bps` no es none, `sha256(borsh(next_bps))` corresponde al `next_bp_hash` en `inner_lite`.

```python
def validate_and_update_head(block_view):
    global head
    global epoch_block_producers_map

    current_block_hash, next_block_hash, approval_message = reconstruct_light_client_block_view_fields(block_view)

    # (1)
    if block_view.inner_lite.height <= head.inner_lite.height:
        return False

    # (2)
    if block_view.inner_lite.epoch_id not in [head.inner_lite.epoch_id, head.inner_lite.next_epoch_id]:
        return False

    # (3)
    if block_view.inner_lite.epoch_id == head.inner_lite.next_epoch_id and block_view.next_bps is None:
        return False

    # (4) and (5)
    total_stake = 0
    approved_stake = 0

    epoch_block_producers = epoch_block_producers_map[block_view.inner_lite.epoch_id]
    for maybe_signature, block_producer in zip(block_view.approvals_after_next, epoch_block_producers):
        total_stake += block_producer.stake

        if maybe_signature is None:
            continue

        approved_stake += block_producer.stake
        if not verify_signature(
            public_key: block_producer.public_key,
            signature: maybe_signature,
            message: approval_message
        ):
            return False

    threshold = total_stake * 2 // 3
    if approved_stake <= threshold:
        return False

    # (6)
    if block_view.next_bps is not None:
        if sha256(borsh(block_view.next_bps)) != block_view.inner_lite.next_bp_hash:
            return False

        epoch_block_producers_map[block_view.inner_lite.next_epoch_id] = block_view.next_bps

    head = block_view
```

## Verificación de firma

Para simplicar el protocolo requerimos que el bloque siguiente y el bloque después del siguiente están en el mismo epoch que el blque al que `LightClientBlockView` corresponde. Está garantizado que cada epoch tiene al menos un bloque final para el cual los siguientes dos bloques que se construyen encima de el están en el mismo epoch.

Por construcción en el momento en que se valida `LightClientBlockView`, se conoce el conjunto de productores de bloques para su epoch. Específicamente, cuando la primer vista de cliente ligero del epoch anterior fue procesada, debido a (3) el `next_bps` no era `None`, y debido que a (6) correspondía al `next_bp_hash` en el header del bloque.

La suma de todos los stakes de `next_bps` en el epoch anterior es `total_stake` mencionado en (5) anteriormente.

Las firmas en el `LightClientBlockView::approvals_after_next` son firmas en `approval_message`. La firma `i`-ésima en `approvals_after_next`, si está presente, debe validar contra la `i`-ésima llave pública en `next_bps` del epoch anterior. `approvals_after_next` puede contener menos elementos que `next_bps` en el epoch anterior.

`approvals_after_next` también puede contener más firmas que la longitud de `next_bps` en el epoch anterior. Esto es debido al hecho de que, por [consenso](./Consensus.md), los últimos bloques en cada epoch contienen firmas de los productores de bloques del epoch actual y del epoch siguiente. Las girmas finales pueden ser seguramente ignoradas por la implementación del cliente ligero.

## Verificación de prueba

[Prueba del resultado de la transacción]: #transaction-outcome-proofs
### Pruebas de resultados de transacciones

Para verificar que una transacción o recibo pasa en la cadena, un cliente ligero puede pedir una prueba a través de rpc proporcionando un `id`, que es de tipo
```rust
pub enum TransactionOrReceiptId {
    Transaction { hash: CryptoHash, sender: AccountId },
    Receipt { id: CryptoHash, receiver: AccountId },
}
```
y el hash del bloque de la cabeza del cliente ligero. El rpc regresará la siguiente estructura
```rust
pub struct RpcLightClientExecutionProofResponse {
    /// Prueba de la salida de la ejecución
    pub outcome_proof: ExecutionOutcomeWithIdView,
    /// Prueba de la raíz de la salida de la ejecución del fragmento
    pub outcome_root_proof: MerklePath,
    /// Una representación ligera de un bloque que contiene la raíz de la salida
    pub block_header_lite: LightClientBlockLiteView,
    /// Prueba de la existencia del bloque en el árblo de bloques merkle,
    /// que consiste de bloques hasta que se llega a la cabeza
    pub block_proof: MerklePath,
}
```
que incluye todo lo que un cliente ligero necesita para probar la salida de la ejecución de la transacción o recibo dado.
Aquí `ExecutionOutcomeWithIdView` es
```rust
pub struct ExecutionOutcomeWithIdView {
    /// Prueba de la salida de la ejecución
    pub proof: MerklePath,
    /// Hash de bloque del bloque que contiene la raíz de la salida
    pub block_hash: CryptoHash,
    /// Id de la ejecución (transacción o recibo)
    pub id: CryptoHash,
    /// La salida actual
    pub outcome: ExecutionOutcomeView,
}
```

La prueba de verificación puede ser partida en dos pasos, verificación de la raíz de la salida de ejecución y verificación de la raíz
de bloque merkle.

#### Verificación de la raíz de la salida de ejecución
Si la raíz de la salida de la transacción o recibo está incluída en el bloque `H`, entonces `outcome_proof` incluye en hash del bloque
`H`, así como la prueba merkle de la salida de la ejecución en su fragmento dado. La salida de la raíz en `H` puede ser
reconstruída por
```python
shard_outcome_root = compute_root(sha256(borsh(execution_outcome)), outcome_proof.proof)
block_outcome_root = compute_root(sha256(borsh(shard_outcome_root)), outcome_root_proof)
```

Esta raíz de salida debe empatar con la raíz de salida en `block_header_lite.inner_lite`.

#### Verificación de la raíz de bloque merkle.

Recuerda que el hash del bloque puede ser calculado desde `LightClientBlockLiteView` por
```rust
sha256(concat(
    sha256(concat(
        sha256(borsh(inner_lite)),
        sha256(borsh(inner_rest))
    )),
    prev_hash
))
```

La raíz del bloque merkle esperada puede ser caluculada por
```python
block_hash = compute_block_hash(block_header_lite)
block_merkle_root = compute_root(block_hash, block_proof)
```
que debe empatar con la raíz del bloque merkle en el bloque del cliente ligero de la cabeza del mismo cliente ligero.

## End-points RPC

### Bloque de cliente ligero

Hay un punto final único que exponen los nodos completos que los clientes ligeros pueden usar para obtener nuevos `LightClientBlockView`s:

```
http post http://127.0.0.1:3030/ jsonrpc=2.0 method=next_light_client_block params:="[<last known hash>]" id="dontcare"
```

El RPC devuelve el `LightClientBlock` para el bloque lo más lejos posible en el futuro del último hash conocido para que el cliente ligero aún lo acepte. Específicamente, regresa el último bloque final del epoch siguiente, o el último bloque final conocido. Si no hay bloques finales más nuevos que el que el cliente ligero conoce, el RPC regresa un resultado vacío.

Un cliente ligero independiente arrancaría solicitando bloques siguientes hasta que reciba un resultado vacío, y después periódicamente solicitar el siguiente bloque de cliente ligero.

Un cliente ligero basado en contratos inteligentes que permite un puente con NEAR en una blockchain diferente no puede solicitar bloques por sí mismo. En lugar de eso oracles externos consultan el bloque de cliente ligero siguiente de uno de los nodos completos, y lo envían al contrato inteligente del cliente ligero. El cliente ligero basado en contratos inteligentes realiza las mismas verificaciones mencionadas anteriornmente, por lo que no es necesario confiar en el oracle.

### Prueba de cliente ligero

El siguiente end-point rpc regresa `RpcLightClientExecutionProofResponse` que un cliente ligero necesita para verificar las salidas de ejecución.

Para la salida de ejecución de una transacción, el rpc es

```
http post http://127.0.0.1:3030/ jsonrpc=2.0 method=EXPERIMENTAL_light_client_proof params:="{"type": "transaction", "transaction_hash": <transaction_hash>, "sender_id": <sender_id>, "light_client_head": <light_client_head>}" id="dontcare"
```

Para la salida de ejecución de un recibo, el rpc es

```
http post http://127.0.0.1:3030/ jsonrpc=2.0 method=EXPERIMENTAL_light_client_proof params:="{"type": "receipt", "receipt_id": <receipt_id>, "receiver_id": <receiver_id>, "light_client_head": <light_client_head>}" id="dontcare"
```

'''
'''--- specs/ChainSpec/README.md ---
# Especificación de cadena

'''
'''--- specs/ChainSpec/Transactions.md ---
# Transacciones en la capa de Blockchain

Un cliente crea una transacción, calcula el hash de la transacción y firma este hash para obtener una transacción firmada.
Ahora esta transacción firmada puede sern enviada a un nodo.

Cuando un nodo recibe una transacción firmada nueva, valida la transacción (si el nodo monitorea el fragmento) e informa a los peers. Eventualmente, la transacción válida es agregada al pool de transacciones.

Cada nodo validador tiene su pool de transacciones. La pool de transacciones mantiene transacciones que no son aún descartadas y aún no incluídas en la cadena.

Antes de producir un fragmento, las transacciones son ordenadas y validadas otra vez. Esto se hace para producir fragmentos con solo una transacción válida.

## Ordenamiento de transacciones

El pool de transacciones agrupa por un par de `(signer_id, signer_public_key)`.
El `signer_id` es el ID de la cuenta del usuario que firmó la transacción, el `signer_public_key` es la llave pública de la llave de acceso de la cuenta que fue usada para firmar las transacciones.
Las transacciones dentro de un grupo no están ordenadas.

El orden válido de la transacción en un fragmento es el siguiente:

- las transacciones están ordenadas en lotes.
- dentro de un lote todas las llaves de las transacciones deben ser diferentes.
- un conjunto de llaves de transacción en cada lote subsecuente debe ser un subconjunto de llaves del lote anterior.
- las transacciones con la misma llave deben ser ordenadas en orden estrictamente creciente de sus nonces correspondientes.

Nota:

- el orden dentro de un conjunto es indefinido. Cada nodo debe usar una semilla secreta única para ordenar a los usuarios que encuentren las claves más bajas para aprovechar cada nodo.

El pool de transacciones proporciona una estructura de drenaje que permite jalar transacciones en el orden apropiado.

## Validación de transacción

La validación de la transacción pasa dos veces, una vez antes de agregar a la pool de transacciones, la siguiente antes de agregar al fragmento.

### Antes de agregar a la pool de transacciones

Esto se hace para filtrar rápidamente transacciones que tienen una firma inválida o son inválidas en el estado más reciente.

### Antes de agregar a un fragmento

Un productor de fragmentos tiene que crear un fragmento con transacciones válidas y ordenados hasta ciertos límites.
Un límite es el número máximo de transacciones, otro es el total de gas quemado para las transacciones.

Para ordenar y filtrar transacciones, el productor de fragmentso obtiene un interador de pool y lo pasa al adaptador del tiempo de ejecución.
El adaptador del tiempo de ejecución jala transacciones una por una.
Las transacciones válidas son añadidas al resultado, las transacciones inválidas son descartadas.
Una vez que se llega al límite, todas las transacciones restantes del iterador son regresadas a la pool de transacciones.

## Iterador de la pool

El iterador de la pool es una característica que itera sobre los grupos de transacciones hasta que todos los grupos de transacciones quedan vacíos.
El iterador de la pool regresa una referencia mutable a un grupo de transacciones que implementa un iterador de drenaje.
El iterador de drenaje es como un iterador normal, pero remueve la entidad regresada del grupo.
Extrae transacciones del grupo en orden desde el nonce más pequeño hasta el más grande.

El iterador de la pool y los iteradores de drenaje para grupos de transacciones permiten al adaptador del tiempo de ejecución crear un orden apropiado.
Para cada grupo de transacción, el adaptador del tiempo de ejecución se queda extrayendo transacciones hasta que se encuentra la transacción válida.
Si el grupo de transaccion se queda vacío, entonces se salta.

El adaptador del tiempo de ejecución implementa el código siguiente para extraer todas las transacciones válidas:

```rust
let mut valid_transactions = vec![];
let mut pool_iter = pool.pool_iterator();
while let Some(group_iter) = pool_iter.next() {
    while let Some(tx) = group_iter.next() {
        if is_valid(tx) {
            valid_transactions.push(tx);
            break;
        }
    }
}
valid_transactions
```

### Ejemplo de ordenamiento de transacción usando el iterador de pool.

Digamos que:

- los IDs de cuenta son letras mayúsculas (`"A"`, `"B"`, `"C"` ...)
- las llaves públicas son letras minúsculas (`"a"`, `"b"`, `"c"` ...)
- los nonces son números (`1`, `2`, `3` ...)

Una pool podría tener un grupo de transacciones en el hashmap:

```
transactions: {
  ("A", "a") -> [1, 3, 2, 1, 2]
  ("B", "b") -> [13, 14]
  ("C", "d") -> [7]
  ("A", "c") -> [5, 2, 3]
}
```

Hay 3 cuentas (`"A"`, `"B"`, `"C"`). La cuenta `"A"` usó 2 llaves públicas (`"a"`, `"c"`). Otras cuentas usaron 1 llave pública cada una.
Las transacciones dentro de cada grupo pueden tener nonces repetidos mientras están en la pool.
Eso se debe a que la pool no filtra transacciones con el mismo nonce, solo transacciones con el mismo hash.

Para este ejemplo, digamos que las transacciones son válidas si el nonce es par y estrictamente mayor que el nonce anterior para la misma llave.

##### Inicialización

Cuando se llama a `.pool_iterator()`, un `PoolIteratorWrapper` nuevo se crea y retiene la referencia mutable a la pool,
para que así la pool no pueda ser modificada fuera de este iterador. El envoltorio se así:

```
pool: {
    transactions: {
      ("A", "a") -> [1, 3, 2, 1, 2]
      ("B", "b") -> [13, 14]
      ("C", "d") -> [7]
      ("A", "c") -> [5, 2, 3]
    }
}
sorted_groups: [],
```

`sorted_groups` es una fila de grupos transacciones ordenadas que ya fueron ordenadas y extraídas de la pool.

##### Transacción #1

El primer grupo a ser seleccionado es para la llave `("A", "a")`, el iterador de la pool ordena las transacciones por sus nonces y regresa la referencia mutable para el grupo. Los nonces ordenados son:
`[1, 1, 2, 2, 3]`. El tiempo de ejecución extrae `1`, después a `1`, y después a `2`. Las transacciones con el nonce `1` son inválidas por el nonce impar.

La transacción con el nonce `2` se agrega a la lista de las transacciones válidas.

El grupo de la transacción se descarta y el envoltorio del iterador de la pool se convierte en el siguiente:

```
pool: {
    transactions: {
      ("B", "b") -> [13, 14]
      ("C", "d") -> [7]
      ("A", "c") -> [5, 2, 3]
    }
}
sorted_groups: [
  ("A", "a") -> [2, 3]
],
```

##### Transacción #2

El siguiente grupo es para la llave `("B", "b")`, el iterador de la pool ordena las transacciones por sus nonces y regresa la referencia mutable para el grupo. Los nonces ordenados son: `[13, 14]`. El adaptador del tiempo de ejecución extrae `13`, después `14`. La transacción con el nonce `13` es inválida por el nonce impar.

La transacción con el nonce `14` se agrega a la lista de transacciones váldas.

El grupo de la transacción se descarta, pero está vacío, por lo que el iterador de la pool lo descarta por completo:

```
pool: {
    transactions: {
      ("C", "d") -> [7]
      ("A", "c") -> [5, 2, 3]
    }
}
sorted_groups: [
  ("A", "a") -> [2, 3]
],
```

##### Transacción #3

El siguiente grupo es para la llave `("C", "d")`, el iterador de la pool ordena las transacciones por sus nonces y regresa la referencia mutable para el grupo. Los nonces ordenados son: `[7]`. El adaptador del tiempo de ejecución extrae `7`. La transacción con el nonce `7` es inválida por el nonce impar.

Ninguna transacción válida se agrega para este grupo.

El grupo de la transacción se descarta, está vacío, por lo que el iterado de la pool lo descarta por completo:

```
pool: {
    transactions: {
      ("A", "c") -> [5, 2, 3]
    }
}
sorted_groups: [
  ("A", "a") -> [2, 3]
],
```

El siguiente grupo es para la llave `("A", "c")`, el iterador de la pool ordena las transacciones por sus nonces y regresa la referencia mutable para el grupo. Los nonces ordenados son: `[2, 3, 5]`. El adaptador del tiempo de ejecución extrae `2`.

Es una transacción válida, así que se agrega a la lista de transacciones válidas.

El grupo de la transacción se descarta, para que así el iterador de la pool lo descarte por completo:

```
pool: {
    transactions: { }
}
sorted_groups: [
  ("A", "a") -> [2, 3]
  ("A", "c") -> [3, 5]
],
```

##### Transacción #4

El siguiente grupo no se extrae de la pool, sino de sorted_groups. La llave es `("A", "a")`.
Ya está ordenado, por lo que el iterador regresa la referencia mutable. Los nonces son:
`[2, 3]`. El adaptador del tiempo de ejecución extrae `2`, después extrae `3`.

La transacción con nonce `2` es inválida, porque ya extraímos la transacción #1 de este grupo y tenía un nonce `2`.
El nonce nuevo tiene que ser más largo que el nonce anterior, así que está transacción queda invalidada.

La transacción con el nonce `3` es inválida porque el nonce es impar.

Ninguna transacción válida es agregada para este grupo.

El grupo de la transacción se descarta, está vacío, por lo tanto el iterador de la pool lo descarta completamente:

```
pool: {
    transactions: { }
}
sorted_groups: [
  ("A", "c") -> [3, 5]
],
```

El siguiente grupo es para la llave `("A", "c")`, con los nonces `[3, 5]`.
El adaptador del teimpo de ejecución extrae `3`, después extrae `5`. Las dos transacciones son inválidas porque el nonce es impar.

Ninguna transacción fue agregada.

El grupo de la transacción se descarte, el envoltorio del iterador de la pool se queda vacío:

```
pool: {
    transactions: { }
}
sorted_groups: [ ],
```

Cuando el adaptador del tiempo de ejecución trata de extraer el grupo siguiente, el iterador de la pool regresa `None`, por lo que el adaptador del tiempo de ejecución descarta el iterador.

##### Descartando el iterador

Si el iterador no se vació por completo, pero aún quedan algunas transacciones. Se reinsertan de regreso a la pool.

##### Transacciones por fragmentos

Las transacciones que fueron extraídas de la pool:

```
// First batch
("A", "a", 1),
("A", "a", 1),
("A", "a", 2),
("B", "b", 13),
("B", "b", 14),
("C", "d", 7),
("A", "c", 2),

// Next batch
("A", "a", 2),
("A", "a", 3),
("A", "c", 3),
("A", "c", 5),
```

Las transacciones válidas son:

```
("A", "a", 2),
("B", "b", 14),
("A", "c", 2),
```

En total solo hubieron 3 transacciones válidas, que resultaron en un lote.

### Validación de orden

Otros validadores necesitan revisar el orden de las transacciones en el fragemto producido.
Puede hacerse en tiempo lineal, usando un algoritmo voraz.

Para seleccionar un primer lote necesitamos iterar sobre las transacciones una por una hasta que veamos una transacción
con la llave que ya incluímos en el primer lote.
Esta transacción pertenece al siguiente lote.

Ahora todas las transacciones en el lote N+1 deben tener una transacción correspondiente con la misma llave en el lote N.
Si no hay tranascciones con la misma llave en el lote N, entonces la orden es inválida.

También hacemos cumplir el orden de la secuencia de transacciones para la misma llave, sus nonces deben estar en orden estrictamente creciente.

Aquí está el algoritmo que valida el orden:

```rust
fn validate_order(txs: &Vec<Transaction>) -> bool {
    let mut nonces: HashMap<Key, Nonce> = HashMap::new();
    let mut batches: HashMap<Key, usize> = HashMap::new();
    let mut current_batch = 1;

    for tx in txs {
        let key = tx.key();

        // Verificando el nonce
        let nonce = tx.nonce();
        if let Some(last_nonce) = nonces.get(key) {
            if nonce <= last_nonce {
                // Nonce debe incrementar
                return false;
            }
        }
        nonces.insert(key, nonce);

        // Verificando el lote
        if let Some(last_batch) = batches.get(key) {
            if last_batch == current_batch {
                current_batch += 1;
            } else if last_batch < current_batch - 1 {
                // Se omitió esta clave en el lote anterior
                return false;
            }
        } else {
            if current_batch > 1 {
                // Not in first batch
                return false;
            }
        }
        batches.insert(key, batch);
    }
    true
}
```

'''
'''--- specs/ChainSpec/Upgradability.md ---
# Capacidad de actualización

Esta parte de la especificación describe los detalles de la actualización del protocolo, y toca algunas partes diferentes del sistema.

Los tres diferentes niveles para la capacidad de actualización son:
1. Actualizar sin algún cambio a las estructuras de datos subyacentes o al protocolo;
2. Actualizar cuando las estructuras de datos subyacentes cambiaron (configuración, base de datos o algo más interno al nodo y probablemente específico del cliente);
3. Actualizar con cambios en el protocolo a los cuales todos los nodos validadores deben de ajustarse.

## Versionado

Hay dos versiones importantes diferentes:
- Versión de binario que define sus estructuras de datos internas / base de datos y configuraciones. Esta versión es específica del cliente y no necesita empatar entre los nodos.
- Versión del protocolo, definiendo el "lenguaje" que los nodos están hablando.

```rust
/// Última versión del protocolo con la que este binario puede trabajar.
type ProtocolVersion = u32;
```

## Control de versiones del cliente

Los clientes deben seguir el [versionado semántico](https://semver.org/lang/es/).
Específicamente:
 - La versión PRINCIPAL define las versiones del protocolo.
 - La versión MENOR define los cambios que son específicos del cliente pero requieren migración de base de datos, cambio de configuración o algo similar. Esto incluye características específicas del cliente. El cliente debería ejecutar las migraciones al arrancar al detectar que la información en el disco fue producida por una versión anterior y automigrarla a la nueva.
  - La versión PATCH define cuándo se corrigen errores, lo que no debería requerir migraciones o cambios de protocolo.

Los clientes pueden definir que tan actual es la versión de los datos almacenados y las migraciones aplicadas.
La recomendación genera es almacenar la versión en la base de datos y al inicio del binario, revisar la versión de la base de datos y realizar las migraciones requeridas.

## Actualización del protocolo

Generalmente, manejamos la capacidad de actualización de las estructuras de datos a través de un contenedor de enumeración. Vea la estructura `BlockHeader` por ejemplo.

### Estructuras de datos versionadas

Dado que esperamos que muchas estructuras de datos cambien o sean actualizadas a la par de que el protocolo evoluciona, algunos cambios son requeridos para soportar eso.

La principal es agregar estructuras de datos `Versioned` compatibles con versiones anteriores como esta:

```rust
enum VersionedBlockHeader {
    BlockHeaderV1(BlockHeaderV1),
    /// Versión actual, donde `BlockHeader` es usado internamente para todas las operaciones.
    BlockHeaderV2(BlockHeader),
}
```

Donde `VersionedBlockHeader` será almacenado en el disco y se enviará por cable.
Esto permite codificar y decodificar versiones anteriores (hasta 256 según la especificación https://borsh.io). Si algunas estructuras de datos tienen más de 256 versiones, las versiones anteriores probablemente pueden ser retiradas y reusadas.

Internamente la versión actual es usada. Las versiones anteriores 
Internally current version is used. Las versiones anteriores tienen muchas interfaces / características que están definidas por diferentes componentes o se actualizan a la próxima versión (guardar para la validación de hash).

### Consenso

| Name | Value |
| - | - |
| `PROTOCOL_UPGRADE_BLOCK_THRESHOLD` | `80%` |
| `PROTOCOL_UPGRADE_NUM_EPOCHS` | `2` |

La manera en la que la versión será indicada por los validadores, será a través de

```rust
/// Agregar `version` al header del bloque.
struct BlockHeaderInnerRest {
    ...
    /// Última versión en la que se ejecuta el binario de nodo productor actual.
    version: ProtocolVersion,
}
```

La condición para cambiar a la siguiente versión del protocolo se basa en el % de stake `PROTOCOL_UPGRADE_NUM_EPOCHS` epochs antes indicadas sobre el cambio a la siguiente versión:

```python
def next_epoch_protocol_version(last_block):
    """Determina la siguiente versión del protocolo epoch dado el último bloque"""
    epoch_info = epoch_manager.get_epoch_info(last_block)
    # Encuentra epoch que decide si la versión debería cambiar caminando hacia atrás.
    for _ in PROTOCOL_UPGRADE_NUM_EPOCHS:
        epoch_info = epoch_manager.prev_epoch(epoch_info)
        # Stop if this is the first epoch.
        if epoch_info.prev_epoch_id == GENESIS_EPOCH_ID:
            break
    versions = collections.defaultdict(0)
    # Iterar sobre todos los bloques en el epoch anterior y recolectar la última versión para cada validador.
    authors = {}
    for block in epoch_info:
        author_id = epoch_manager.get_block_producer(block.header.height)
        if author_id not in authors:
            authors[author_id] = block.header.rest.version
    # Versiones de peso con el stake de cada validador.
    for author in authors:
        versions[authors[author] += epoch_manager.validators[author].stake
    (version, stake) = max(versions.items(), key=lambda x: x[1])
    if stake > PROTOCOL_UPGRADE_BLOCK_THRESHOLD * epoch_info.total_block_producer_stake:
        return version
    # De otra manera regresar la versión que fue usada en ese epoch decisivo.
    return epoch_info.version
```

'''
'''--- specs/CoreDataTypes.md ---

'''
'''--- specs/DataStructures/AccessKey.md ---
# Llaves de acceso

Las llaves de acceso proveen acceso para una cuenta en particular. Cada llave de acceso pertenece a una cuenta y es identificada por una llave de acceso pública única (dentro de la misma cuenta). Las llaves de acceso se almacenan como `account_id,public_key` en un estado trie. Una cuenta puede tener desde [cero](#account-without-access-keys) hasta múltiples llaves de acceso.

```rust
pub struct AccessKey {
    /// El nonce para esta llave de acceso.
    /// NOTA: en algunos casos la llave de acceso debe de ser creada nuevamente. Si la llave de acceso nueva rehúsa la
    /// misma llave pública, el nonce de la nueva llave pública debería de ser igual al nonce de la llave de
    /// acceso anterior. Es requerido para evitar recrear transacciones antiguas otra vez.
    pub nonce: Nonce,
    /// Define los permisos para esta llave de acceso.
    pub permission: AccessKeyPermission,
}
```

Hay 2 tipos de `AccessKeyPermission` (permiso de llave de acceso) en Near actualmente: `FullAccess` (acceso completo) y `FunctionCall` (llamado de función). `FunctionCall` concede el permiso para realizar cualquier acción en una cuenta como [DeployContract](Transaction#DeployContract) (implementar contrato), [Transfer](Transaction#Transfer) (transferir) tokens a otra cuenta, llamado de funciones [FunctionCall](Transaction#FunctionCall), [Stake](Transaction#Stake) e incluso borrar la cuenta [DeleteAccountAction](Transaction#DeleteAccountAction) (acción de borrado de cuenta). `FullAccess` también permite manejar las llaves de acceso. `AccessKeyPermission::FunctionCall` limita a solo hacer llamadas contractuales.

```rust
pub enum AccessKeyPermission {
    FunctionCall(FunctionCallPermission),
    FullAccess,
}
```

## AccessKeyPermission::FunctionCall

Concede permiso limitado para hacer llamadas a funciones [FunctionCall](Transaction#FunctionCall) a un `receiver_id` (id receptor) específico y a los métodos de un contrato en particular con un límite de balance permitido para gastar.

```rust
pub struct FunctionCallPermission {
    /// Allowance es el balance permitido para esta llave de acceso para pagar por llamadas de función, gas y
    /// cuotas de transacción. Cuando esta llave de acceso es usada, el balance de cuenta y el allowance se
    /// decrementan por el mismo valor.
    /// `None` significa allowance ilimitado.
    /// NOTA: Para cambiar o incrementar el allowance, la llave de acceso anterior necesita ser borrada y una llave de acceso
    /// nueva debe de ser creada.
    pub allowance: Option<Balance>,

    /// La llave de acceso sólo permite transacciones con el id de cuenta del receptor dado.
    pub receiver_id: AccountId,

    /// Una lista de métodos que puede ser usada. La llave de acceso sólo acepta transacciones con la
    /// llamada de función de solo uno de los nombres de los métodos dados.
    /// Una lista vacía significa que cualquier método puede ser usado.
    pub method_names: Vec<String>,
}
```

## Cuenta sin llaves de acceso

Si una cuenta no tiene llaves de acceso ligadas a ella significa que no tiene dueño el cual pueda ejecutar transacciones en su nombre. Sin embargo, si dicha cuenta tiene código, puede ser invocada por otras cuentas y contratos.

'''
'''--- specs/DataStructures/Account.md ---
# Cuentas

## ID de cuenta

[account_id]: #account_id

El protocolo NEAR tiene un sistema de nombres de cuenta. El ID de la cuenta es similar a un nombre de usuario. Los ID de cuenta tienen que seguir ciertas reglas.

### Reglas de los ID de las cuentas

- La cantidad mínima de caracteres es 2
- La cantidad máxima de caracteres es 64
- El **ID de la cuenta** consiste de las **partes de el ID de la cuenta** separadas por un `.`
- Una **parte del ID de la cuenta** consiste de símbolos alfanuméricos en minúscula separados por un `_` o `-`.
- El **ID de la cuenta** que tiene un largo de 64 caracteres y consiste de caracteres hexadecimales en minúscula es un **ID de cuenta implícito** específico.

Los nombres de cuenta son similares a los dominios de los sitios web.
Las cuentas de nivel superior (TLA por sus siglas en inglés) como `near`, `com`, `eth` solo pueden ser creadas al registrar una cuenta (vea la siguiente sección para más detalles).
Solo `near` puede crear `alice.near`. Y solo `alice.near` puede crear `app.alice.near` y así sucesivamente.
Ojo, `near` near NO PUEDE crear `app.alice.near` directamente.

Adicionalmente, hay un camino implícito para la creación de cuentas. Los id de cuentas, que tienen un largo de 64 caracteres, solo se pueden crear con una `llave de acceso` (AccessKey) que empata el id de la cuenta por medio de derivación `hexadecimal`. Permitiendo así la creación de un nuevo par de llaves – y al remitente de fondos para esta cuenta para realmente crear esta.

Expresión regular para un ID de cuenta completo, sin revisar el largo del mismo:

```regex
^(([a-z\d]+[\-_])*[a-z\d]+\.)*([a-z\d]+[\-_])*[a-z\d]+$
```
### Cuentas de nivel superior (TLA)

| Nombre | Valor |
| - | - |
| REGISTRAR_ACCOUNT_ID | `registrar` |
| MIN_ALLOWED_TOP_LEVEL_ACCOUNT_LENGTH | 32 |

Las cuentas de nivel superior son demasiado valiosas porque estas proveen la raíz de la confianza y el descubrimiento para las compañías, aplicaciones y usuarios.
Para permitir un acceso justo para ellas, los nombres de nivel superior que tienen un número menor de caracteres que el `MIN_ALLOWED_TOP_LEVEL_ACCOUNT_LENGTH` (largo mínimo para una cuenta de nivel superior) serán subastados.

Específicamente, solo las cuentas del tipo `REGISTRAR_ACCOUNT_ID` pueden crear cuentas de nivel superior tienen un número de caracteres menor al `MIN_ALLOWED_TOP_LEVEL_ACCOUNT_LENGTH`. `REGISTRAR_ACCOUNT_ID` implementa el estándar llamado Interfaz de Nombrado de Cuentas (link TODO) para permitir la creación de nuevas cuentas.

```python
def action_create_account(predecessor_id, account_id):
    """Llamado en la acción CreateAccount en el recibo."""
    if len(account_id) < MIN_ALLOWED_TOP_LEVEL_ACCOUNT_LENGTH and predecessor_id != REGISTRAR_ACCOUNT_ID:
        raise CreateAccountOnlyByRegistrar(account_id, REGISTRAR_ACCOUNT_ID, predecessor_id)
    # De lo contrario se crea una cuenta con el `account_id` dado.
```

*Nota: no vamos a implementar la subasta `registrar` al momento del lanzamiento, en lugar de eso se permitirá que Foundation lo implemente después del lanzamiento inicial. El link para los detalles de la subasta serán añadidos aquí en la siguiente edición del post de “next spec release” en MainNet.*

### Ejemplos

Cuentas válidas:

```
ok
bowen
ek-2
ek.near
com
google.com
bowen.google.com
near
illia.cheap-accounts.near
max_99.near
100
near2019
over.9000
a.bro
// Válido pero no puede ser creado, “a” es muy corto
bro.a
```

Cuentas no válidas:

```
not ok           // Los espacios en blanco no son permitidos
a                // Muy corto
100-             // Separador de sufijo
bo__wen          // Dos separadores seguidos
_illia           // Separador de prefijo
.near            // Punto deparador de prefijo
near.            // Punto deparador de sufijo
a..near          // Dos puntos separadores seguidos
$$$              // Los caracteres no alfanuméricos no son permitidos
WAT              // Las mayúsculas no son permitidas
me@google.com    // @ no es permitida (antes sí se permitía)
system           // No se puede usar el nombre de system, vea la sección Cuenta de sistema a continuación
// MUY LARGO:
abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz
```

## Cuenta del sistema
`system` es una cuenta especial que solo es usada para identificar recibos de reembolso. Para los recibos de reembolso, tomamos el id del predecessor (predecessor_id) como `system` para indicar que es un recibo de reembolso. Los usuarios no pueden crear o acceder la cuenta `system`. De hecho, esta cuenta no existe como parte del estado del sistema.

## ID implícitos de las cuentas

Las cuentas implícitas funcionan similar a las cuentas de Bitcoin/Ethereum.
Te permite reservar un ID de cuenta antes de ser creado al generar localmente un par de llaves de acceso ED25519.
Este par de llaves de acceso tiene una llave publica que se se asigna al ID de la cuenta. El ID de la cuenta es una representación hexadecimal en minúsculas de la llave pública.
La llave pública ED25519 es de 32 bytes y se asigna a un ID de cuenta con un largo de 64 caracteres.

Ejemplo: Una llave pública en base58 `BGCCDDHfysuuVnaNVtEhhqeT4k9Muyem3Kpgq2U1m9HX` se asignará a al ID de cuenta `98793cd91a3f870fb126f66285808c7e094afcfc4eda8a970f6648cdf0dbd6de`.

La llave de acceso secreta correspondiente te permite firmar transacciones a nombre de esta cuenta una vez que fue creada en la blockchain.

### Creación de cuentas implícitas

Una cuenta con un ID de cuenta implícito solo se puede crear al enviar una transacción/recibo con una sola acción `Transfer` para el ID de cuenta implícito que lo recibirá:
- La cuenta será cread con el ID de la cuenta.
- La cuenta tendrá una llave de acceso completo con la llave pública ED25519-curva que viene de `decode_hex(account_id)` y un nonce de `0`.
- El balance de la cuenta tendrá un saldo de transferencia depositado.

Esta cuenta no puede ser creada con la acción `CreateAccount` para así evitar el robo de la misma cuenta sin tener la llave de acceso privada correspondiente.

Una vez que una cuenta implícita es creada actúa como una cuenta regular hasta que se elimine.

## Cuenta

[account]: #account

Los datos para una sola cuenta son colocados en un solo fragmento. Los datos de la cuenta consisten en lo siguiente:

- Balance
- Balance bloqueado (para el staking)
- El código del contrato
- Almacenamiento llave-valor del contrato. Almacenados en un tipo de árbol ordenado (trie).
- [Llaves de acceso](AccessKey.md)
- [Recibos de acción pospuestos](../RuntimeSpec/Receipts.md#postponed-actionreceipt)
- [Recibos de datos recibidos](../RuntimeSpec/Receipts.md#received-datareceipt)

#### Balances

El balance total de la cuenta consiste del balance bloqueado y del balance desbloqueado.

El balance desbloqueado son tokens que la cuenta puede usar para las cuotas de transacción, transferencias staking y otras operaciones.

El balance bloqueado son los tokens que actualmente están siendo usados para staking, para ser un validador o para convertirse en un validador.
 El balance bloqueado puede convertirse en balance desbloqueado al inicio de un epoch. Vea [Staking] para más detalles.

#### Contratos

Un contrato (AKA smart contract) es un programa escrito en el lenguaje de programación WebAssembly que pertenece a una cuenta en específico.
Cuando una cuenta es creada, no tiene un contrato.
Un contrato tiene que ser implementado explícitamente, ya sea por el dueño de la cuenta o durante la creación de una.
Un contrato puede ser ejecutado por cualquiera que llame un método en tu cuenta. Un contrato tiene acceso al almacenamiento dentro de tu cuenta.

#### Almacenamiento

Toda cuenta tiene su propio almacenamiento. Es un árbol (trie) persistente con estructura llave-valor. Las llaves son ordenadas en orden lexicográfico.
El almacenamiento solo puede ser modificado por el contrato dentro de la cuenta.
La implementación actual, durante el tiempo de ejecución sólo le permite al contrato leer el almacenamiento de tu cuenta, pero esto puede cambiar en el futuro y otros contratos de otras cuentas puedan leer tu almacenamiento.

NOTA: A las cuentas se les cobra una cuota recurrente por el almacenamiento total. Esto incluye el almacenamiento de la misma, el código del contrato, el almacenamiento del contrato y todas las llaves de acceso.

#### Llaves de acceso

Una llave de acceso concede el acceso a una cuenta. Cada llave de acceso en la cuenta se identifica por una llave pública única.
Esta llave pública es usada para validar la firma de las transacciones.
Cada llave de acceso contiene un nonce único para diferenciar u ordenar las transacciones firmadas por esta llave de acceso.

Una llave de acceso tiene un permiso asociado. El permiso puede ser de dos tipos:

- Permiso completo. Concede el acceso completo a la cuenta.
- Permiso para el llamado de funciones. Concede el acceso solo para las transacciones de llamado de funciones.

Vea [Llaves de acceso] para más detalles.

'''
'''--- specs/DataStructures/MerkleProof.md ---
# Pruebas Merkle

Muchos componentes del Protocolo NEAR dependen de la raíz Merkle y las pruebas Merkle. Para un arreglo de hashes sha256, definimos su
raíz merkle como:
```python
CRYPTOHASH_DEFAULT = [0] * 32
def combine_hash(hash1, hash2):
    return sha256(hash1 + hash2)

def merkle_root(hashes):
    if len(hashes) == 0:
        return CRYPTOHASH_DEFAULT
    elif len(hashes) == 1:
        return hashes[0]
    else:
        l = hashes.len();
        subtree_len = l.next_power_of_two() // 2;
        left_root = merkle_root(hashes[0:subtree_len])
        right_root = merkle_root(hashes[subtree_len:l])
        return combine_hash(left_root, right_root)
```

Generalmente, para un arreglo de objetos serializables borsh, su root merkle es definida como
```python
def arr_merkle_root(arr):
    return merkle_root(list(map(lambda x: sha256(borsh(x)), arr)))
```

Una prueba merkle es definida por:
```rust
pub struct MerklePathItem {
    pub hash: MerkleHash,
    pub direction: Direction,
}

pub enum Direction {
    Left,
    Right,
}

pub type MerkleProof = Vec<MerklePathItem>;
```

La verificación de un hash `h` contra una raíz merkle proclamada `r` con prueba `p` se define por:
```python
def compute_root(h, p):
    res = h
    for item in p:
        if item.direction is Left:
            res = combine_hash(item.hash, res)
        else:
            res = combine_hash(res, item.hash)
    return res

assert compute_root(h, p) == r
```

'''
'''--- specs/DataStructures/README.md ---
# Primitivos

- [Cuenta](Account.md)
  - [ID de cuenta](Account.md#account-id)
  - [Cuenta](Account.md#account)
- [Llaves de acceso](AccessKey.md)
- [Transacciones](Transaction.md)
- [Pruebas Merkle](MerkleProof.md)

'''
'''--- specs/DataStructures/Transaction.md ---
# Transaction

'''
'''--- specs/DataTypes.md ---
# Data Types

## type CryptoHash = [u8; 32]

A sha256 or keccak256 hash.

## AccountId = String

Account identifier. Provides access to user's state.

## type MerkleHash = CryptoHash

Hash used by a struct implementing the Merkle tree.

## type ValidatorId = usize

Validator identifier in current group.

## type ValidatorMask = [bool]

Mask which validators participated in multi sign.

## type StorageUsage = u64

StorageUsage is used to count the amount of storage used by a contract.

## type StorageUsageChange = i64

StorageUsageChange is used to count the storage usage within a single contract call.

## type Nonce = u64

Nonce for transactions.

## type BlockIndex = u64

Index of the block.

## type ShardId = u64

Shard index, from 0 to NUM_SHARDS - 1.

## type Balance = u128

Balance is type for storing amounts of tokens.

## Gas = u64

Gas is a type for storing amount of gas.

'''
'''--- specs/Economics/README.md ---
# Economía

**Esto está bajo fuerte desarrollo.**

## Units

| Name | Value |
| - | - |
| yoctoNEAR | monto indivisible más chico de la moneda nativa *NEAR*. |
| NEAR | `10**24` yoctoNEAR |
| block | unidad de tiempo más pequeña en la cadena |
| gas | unidad para medir el uso de la blockchain |

## Parámetros generales

| Name | Value |
| - | - |
| `INITIAL_SUPPLY` | `10**33` yoctoNEAR |
| `MIN_GAS_PRICE` | `10**5` yoctoNEAR |
| `REWARD_PCT_PER_YEAR` | `0.05` |
| `EPOCH_LENGTH` | `43,200` bloques |
| `EPOCHS_A_YEAR` | `730` epochs |
| `INITIAL_MAX_STORAGE` | `10 * 2**40` bytes == `10` TB |
| `TREASURY_PCT` | `0.1` |
| `TREASURY_ACCOUNT_ID` | `treasury` |
| `CONTRACT_PCT` | `0.3` |
| `INVALID_STATE_SLASH_PCT` | `0.05` |
| `ADJ_FEE` | `0.001` |
| `TOTAL_SEATS` | `100` |
| `ONLINE_THRESHOLD_MIN` | `0.9` |
| `ONLINE_THRESHOLD_MAX` | `0.99` |
| `BLOCK_PRODUCER_KICKOUT_THRESHOLD` | `0.9` |
| `CHUNK_PRODUCER_KICKOUT_THRESHOLD` | `0.6` |

## Variables generales

| Name | Description | Initial value |
| - | - | - |
| `totalSupply[t]` | Suministro total de NEAR en un epoch[t] dado | `INITIAL_SUPPLY` |
| `gasPrice[t]` | El costo de 1 unidad de *gas* en tokens NEAR (vea la sección Tarifas de transacción a continuación) | `MIN_GAS_PRICE` |
| `storageAmountPerByte[t]` | keeping constant, `INITIAL_SUPPLY / INITIAL_MAX_STORAGE` | `~9.09 * 10**19` yoctoNEAR |

## Emisión

El protocolo establece un techo para la emisión máxima de tokens, y dinámicamente decrementa esta emisión dependiendo en el monto total de tarifas en el sistema.

| Name | Description |
| - | - |
| `reward[t]` | `totalSupply[t]` * ((`1 + REWARD_PCT_PER_YEAR`) ** (`1/EPOCHS_A_YEAR`) - `1`) |
| `epochFee[t]` | `sum([(1 - DEVELOPER_PCT_PER_YEAR) * block.txFee + block.stateFee for block in epoch[t]])` |
| `issuance[t]` | La cantidad de token emitido en un cierto epoch[t], `issuance[t] = reward[t] - epochFee[t]` |

Donde `totalSupply[t]` es el número total de tokens en el sistema en un tiempo *t* dado.
Si `epochFee[t] > reward[t]` la emisión es negativa, por lo tanto `totalSupply[t]` se decrementa en el epoch dado.

## Tarifas de transacción

Cada transacción debe comprar el gas suficiente para cubrir el costo de la banda ancha y ejecución antes de ser incluída.

El gas unifica la ejecución y los bytes del uso de la banda ancha de la blockchain. Cada instrucción WASM o función pre-compilada se le asigna una cantidad de gas basado en medidas de computadora de denominador común. Lo mismo ocurre con el peso del ancho de banda utilizado en función de los costos unificados generales. Para un mapeo específico de los números de gas vea [???]().

El gas se le asigna su precio dinámicamente en tokens `NEAR`. En cada bloque `t`, actualizamos `gasPrice[t] = gasPrice[t - 1] * (gasUsed[t - 1] / gasLimit[t - 1] - 0.5) * ADJ_FEE`.

Donde `gasUsed[t] = sum([sum([gas(tx) for tx in chunk]) for chunk in block[t]])`.
`gasLimit[t]` es definido como `gasLimit[t] = gasLimit[t - 1] + validatorGasDiff[t - 1]`, donde `validatorGasDiff` es un parámetro el que cada fragmento productor puede incrementar o decrementar el límite del gas basado en cuanto tarde en ejecutar el fragmento anterior. `validatorGasDiff[t]` solo puede estar dentro del `±0.1%` del `gasLimit[t]` y solo si `gasUsed[t - 1] > 0.9 * gasLimit[t - 1]`.

## Participación en el estado

El monto de `NEAR` en una cuenta representa el derecho de esta de tomar una porción del estado global de la blockchain. Las transacciones fallan si la cuenta no tiene el balance suficiente para cubrir el almacenamiento requerido para la cuenta dada.

```python
def check_storage_cost(account):
    # Calcula requiredAmount dado el tamaño de la cuent.
    requiredAmount = sizeOf(account) * storageAmountPerByte
    return Ok() if account.amount + account.locked >= requiredAmount else Error(requiredAmount)

# Revisa cuando una transacción es recibida y verifica que es válida.
def verify_transaction(tx, signer_account):
    # ...
    # Actualiza la cuenta que firma con el monto que tendrá después de ejecutar esta tx.
    update_post_amount(signer_account, tx)
    result = check_storage_cost(signer_account)
    # Si el balance es suficiente O si la cuenta ha sido borrada por el dueño.
    if not result.ok() or DeleteAccount(tx.signer_id) in tx.actions:
        assert LackBalanceForState(signer_id: tx.signer_id, amount: result.err())

# Después de tocar / cambiar la cuenta, verificamos si todavía tiene el balance suficienta para cubrir su almacenamiento.
def on_account_change(block_height, account):
    # ... ejecutar transacciones / cambios en recibos ...
    # Validar poscondición y revertir si falla.
    result = check_storage_cost(sender_account)
    if not result.ok():
        assert LackBalanceForState(signer_id: tx.signer_id, amount: result.err())
```

Donde `sizeOf(account)` inclute el tamaño de `account_id`, la estructura de `account` y el tamaño de todos los datos guardados bajo la cuenta.

La cuenta puede terminar sin saldo suficiente en caso de que se reduzca. La cuenta se volverá inusable dado que todas las transacciones que se puedan originar fallarán (incluyendo la eliminación de la cuenta).
La única manera de recuperarla en este caso es mandando fondos extra desde diferentes cuentas.

## Validadores

Los validadores NEAR proveen sus recursos a cambio de una recompensa `epochReward[t]`, donde [t] representa el epoch considerado

| Name | Description |
| - | - |
| `epochReward[t]` | `= coinbaseReward[t] + epochFee[t]` |
| `coinbaseReward[t]` | La inflación máxima por epoch[t], en función de `REWARD_PCT_PER_YEAR / EPOCHS_A_YEAR` |

### Selección de validador

| Name | Description |
| - | - |
| `proposals: Proposal[]` | El arreglo de todas las nuevas transacciones apiladas que han pasado durante el epoch (si una cuenta tiene varias, solo la última es usada) |
| `current_validators` | El arreglo de todos los validadores existentes durante el epoch |
| `epoch[T]` | El epoch cuando el validator[v] es seleccionado de el arreglo de subasta `proposals` |
| `seat_price` | La participación mínima necesaria para convertirse en validador en el epoch[T] |
| `stake[v]` | La cantidad en tokens NEAR stakeados por el validador[v] durante la subasta al final de epoch[T-2], menos `INCLUSION_FEE` |
| `shard[v]` | El fragmento es asignado aleatoriamente al validator[v] en el epoch[T-1], para que así su nodo puede descargar y sincronizarse con su estado |
| `num_allocated_seats[v]` | Número de asientos asignados al validator[v], calculados desde stake[v]/seatPrice |
| `validatorAssignments` | El arreglo ordenado resultante de todas las `proposals` con un stake mayor que el `seatPrice` |

```rust
struct Proposal {
    account_id: AccountId,
    stake: Balance,
    public_key: PublicKey,
}
```

Durante el epoch, la salida de stakear transacciones produce `proposals`, que son recolectadas en la forma de `Proposal`s.
Al final de cada epoch `T`, el siguiente algoritmo es ejecutado para determinar los validadores para el epoch `T + 2`:

1. Para cada validador en `current_validators` determina `num_blocks_produced`, `num_chunks_produced` basado en lo que produjeron durante el epoch.
2. Remueve validadores, para quienes `num_blocks_produced < num_blocks_expected * BLOCK_PRODUCER_KICKOUT_THRESHOLD` o `num_chunks_produced < num_chunks_expected * CHUNK_PRODUCER_KICKOUT_THRESHOLD`.
3. Agrega validadores de `proposals`, si el validador está también en `current_validators`, el stakeo considerado de la propuesta es `0 if proposal.stake == 0 else proposal.stake + reward[proposal.account_id]`.
4. Encuentra el precio asiento `seat_price = findSeatPrice(current_validators - kickedout_validators + proposals, num_seats)`, donde cada validador obtiene `floor(stake[v] / seat_price)` asientos y `seat_price` es el número entero más grande tal que el número total de asientos es al menos `num_seats`.
5. Filtra validadores y propuestas a solo esos con stake mayor o igual al precio asiento.
6. Para cada validador, los replica por número de asientos que obtienen `floor(stake[v] / seat_price)`.
7. Barajar aleatoriamente con la semilla de la aleatoriedad generada en el último bloque del epoch actual (a través de `VRF(block_producer.private_key, block_hash)`).
8. Quitar todos los asientso que están sobre el `num_seats` que se necesita.
10. Usa este conjunto para productores de bloques y cambia la ventana sobre él como productores de fragmentos

```python
def findSeatPrice(stakes, num_seats):
    """Encuentre el precio del asiento dado el conjunto de stakes y la cantidad de asientos requeridos.

    El precio asiento es el número entero más alto tal que si sumamos `floor(stakes[i] / seat_price)` sea al menos `num_seats`.
    """
    stakes = sorted(stakes)
    total_stakes = sum(stakes)
    assert total_stakes >= num_seats, "Total stakes should be above number of seats"
    left, right = 1, total_stakes + 1
    while True:
        if left == right - 1:
            return left
        mid = (left + right) // 2
        sum = 0
        for stake in stakes:
            sum += stake // mid
            if sum >= num_seats:
                left = mid
                break
        right = mid
```

### Cálculo de las recompensas del validador

Nota: todos lo cálculos son hechas con números Racionales.

La recompensa total en cada epoch `t` es igual a:
```python
total_reward[t] = floor(totalSupply * max_inflation_rate * num_blocks_per_year / epoch_length)
```

donde `max_inflation_rate`, `num_blocks_per_year`, `epoch_length` son parámetros génesis y `totalSupply` es
tomado del último bloque en el epoch.

Después de que una fracción de la recompensa va a la tesorería y el monto restante será usado para calcular las recompensas del validador:
```python
treasury_reward[t] = floor(reward[t] * protocol_reward_rate)
validator_reward[t] = total_reward[t] - treasury_reward[t]
```

Los validadores que no llegaron al umbral para los bloques o fragmentos se sacan y no obtienen ninguna recompensa, de lo contrario el tiempo de actividad
de un validador es calculado:

```python
pct_online[t][j] = (num_produced_blocks[t][j] / expected_produced_blocks[t][j] + num_produced_chunks[t][j] / expected_produced_chunks[t][j]) / 2
if pct_online > ONLINE_THRESHOLD:
    uptime[t][j] = min(1, (pct_online[t][j] - ONLINE_THRESHOLD_MIN) / (ONLINE_THRESHOLD_MAX - ONLINE_THRESHOLD_MIN))
else:
    uptime[t][j] = 0
```

Donde `expected_produced_blocks` y `expected_produced_chunks` es el número de bloques y fragmentos respectivos que se espera sean producidos por el validador `j` dado en el epoch `t`.

La recompensa específica del `validator[t][j]` para el epoch `t` es pues proporcional a la fracción de stake de este validador del stake total:

```python
validatorReward[t][j] = floor(uptime[t][j] * stake[t][j] * validator_reward[t] / total_stake[t])
```

### Slashing

#### ChunkProofs (pruebas de fragmento)

```python
# Verifica que el fragmento es inválido, porque las pruebas en el encabezado no coincide con el cuerpo.
def chunk_proofs_condition(chunk):
    # TODO

# Al final del epoch, ejecuta actualizar validadores y
# determina cuanto se recortarán los validadores.
def end_of_epoch_update_validators(validators):
    # ...
    for validator in validators:
        if validator.is_slashed:
            validator.stake -= INVALID_STATE_SLASH_PCT * validator.stake
```

#### ChunkState (estado del fragmento)

```python
# Verifica que la raíz del estado de la publicación del encabezado del fragmento sea inválida,
# porque la ejecución del fragmento anterior no lleva a eso.
def chunk_state_condition(prev_chunk, prev_state, chunk_header):
    # TODO
    
# Al final del epoch, ejecuta actualizar validadores y
# determina cuanto se recortarán los validadores.
def end_of_epoch(..., validators):
    # ...
    for validator in validators:
        if validator.is_slashed:
            validator.stake -= INVALID_STATE_SLASH_PCT * validator.stake
```

## Protocolo de tesorería

La cuenta de tesorería `TREASURY_ACCOUNT_ID` recibe una fracción de recompensa cada epoch `t`:

```python
# Al final del epoch, actualizar tesorería
def end_of_epoch(..., reward):
    # ...
    accounts[TREASURY_ACCOUNT_ID].amount = treasury_reward[t]
```

## Recompensas de contrato

La cuenta contrato es recompensada con el 30% del gas quemado durante la ejecución de sus funciones.
La recompensa se acredita a la cuenta contrato después de aplicar el recibo correspondiente con [`FunctionCallAction`](../RuntimeSpec/Actions.md#functioncallaction), el gas es convertido a tokens usando el precio del gas del bloque actual.

Puede leer más sobre:
- [ejecución de recibos](../RuntimeSpec/Receipts.md);
- [tarifas de tiempo de ejecución](../RuntimeSpec/Fees/Fees.md) con la descripción de [como se cobra el gas](../RuntimeSpec/Fees/Fees.md#gas-tracking).

'''
'''--- specs/GenesisConfig/ExtCostsConfig.md ---
# ExtCostsConfig

## base
_type: Gas_

Base cost for calling a host function.

## read_memory_base
_type: Gas_

Base cost for guest memory read

## read_memory_byte
_type: Gas_

Cost for guest memory read

## write_memory_base
_type: Gas_

Base cost for guest memory write

## write_memory_byte
_type: Gas_

Cost for guest memory write per byte

## read_register_base
_type: Gas_

Base cost for reading from register

## read_register_byte
_type: Gas_

Cost for reading byte from register

## write_register_base
_type: Gas_

Base cost for writing into register

## write_register_byte
_type: Gas_

Cost for writing byte into register

## utf8_decoding_base
_type: Gas_

Base cost of decoding utf8.

## utf8_decoding_byte
_type: Gas_

Cost per bye of decoding utf8.

## utf16_decoding_base
_type: Gas_

Base cost of decoding utf16.

## utf16_decoding_byte
_type: Gas_

Cost per bye of decoding utf16.

## sha256_base
_type: Gas_

Cost of getting sha256 base

## sha256_byte
_type: Gas_

Cost of getting sha256 per byte

## keccak256_base
_type: Gas_

Cost of getting keccak256 base

## keccak256_byte
_type: Gas_

Cost of getting keccak256 per byte

## keccak512_base
_type: Gas_

Cost of getting keccak512 base

## keccak512_byte
_type: Gas_

Cost of getting keccak512 per byte

## log_base
_type: Gas_

Cost for calling logging.

## log_byte
_type: Gas_

Cost for logging per byte

## Storage API

### storage_write_base
_type: Gas_

Storage trie write key base cost

### storage_write_key_byte
_type: Gas_

Storage trie write key per byte cost

### storage_write_value_byte
_type: Gas_

Storage trie write value per byte cost

### storage_write_evicted_byte
_type: Gas_

Storage trie write cost per byte of evicted value.

### storage_read_base
_type: Gas_

Storage trie read key base cost

### storage_read_key_byte
_type: Gas_

Storage trie read key per byte cost

### storage_read_value_byte
_type: Gas_

Storage trie read value cost per byte cost

### storage_remove_base
_type: Gas_

Remove key from trie base cost

### storage_remove_key_byte
_type: Gas_

Remove key from trie per byte cost

### storage_remove_ret_value_byte
_type: Gas_

Remove key from trie ret value byte cost

### storage_has_key_base
_type: Gas_

Storage trie check for key existence cost base

### storage_has_key_byte
_type: Gas_

Storage trie check for key existence per key byte

### storage_iter_create_prefix_base
_type: Gas_

Create trie prefix iterator cost base

### storage_iter_create_prefix_byte
_type: Gas_

Create trie prefix iterator cost per byte.

### storage_iter_create_range_base
_type: Gas_

Create trie range iterator cost base

### storage_iter_create_from_byte
_type: Gas_

Create trie range iterator cost per byte of from key.

### storage_iter_create_to_byte
_type: Gas_

Create trie range iterator cost per byte of to key.

### storage_iter_next_base
_type: Gas_

Trie iterator per key base cost

### storage_iter_next_key_byte
_type: Gas_

Trie iterator next key byte cost

### storage_iter_next_value_byte
_type: Gas_

Trie iterator next key byte cost

### touching_trie_node
_type: Gas_

Cost per touched trie node

## Promise API

### promise_and_base
_type: Gas_

Cost for calling promise_and

### promise_and_per_promise
_type: Gas_

Cost for calling promise_and for each promise

### promise_return
_type: Gas_

Cost for calling promise_return

'''
'''--- specs/GenesisConfig/GenesisConfig.md ---
# GenesisConfig

## protocol_version

_type: u32_

Protocol version that this genesis works with.

## genesis_time

_type: DateTime_

Official time of blockchain start.

## chain_id

_type: String_

ID of the blockchain. This must be unique for every blockchain.
If your testnet blockchains do not have unique chain IDs, you will have a bad time.

## num_block_producers

_type: u32_

Number of block producer seats at genesis.

## block_producers_per_shard

_type: [ValidatorId]_

Defines number of shards and number of validators per each shard at genesis.

## avg_fisherman_per_shard

_type: [ValidatorId]_

Expected number of fisherman per shard.

## dynamic_resharding

_type: bool_

Enable dynamic re-sharding.

## epoch_length

_type: BlockIndex,_

Epoch length counted in blocks.

## gas_limit

_type: Gas,_

Initial gas limit for a block

## gas_price

_type: Balance,_

Initial gas price

## block_producer_kickout_threshold

_type: u8_

Criterion for kicking out block producers (this is a number between 0 and 100)

## chunk_producer_kickout_threshold

_type: u8_

Criterion for kicking out chunk producers (this is a number between 0 and 100)

## gas_price_adjustment_rate

_type: Fraction_

Gas price adjustment rate

## runtime_config

_type: [RuntimeConfig](RuntimeConfig.md)_

Runtime configuration (mostly economics constants).

## validators

_type: [AccountInfo]_

List of initial validators.

## records

_type: Vec\<[StateRecord](StateRecord.md)\>_

Records in storage at genesis (get split into shards at genesis creation).

## transaction_validity_period

_type: u64_

Number of blocks for which a given transaction is valid

## developer_reward_percentage

_type: Fraction_

Developer reward percentage.

## protocol_reward_percentage

_type: Fraction_

Protocol treasury percentage.

## max_inflation_rate

_type: Fraction_

Maximum inflation on the total supply every epoch.

## total_supply

_type: Balance_

Total supply of tokens at genesis.

## num_blocks_per_year

_type: u64_

Expected number of blocks per year

## protocol_treasury_account

_type: AccountId_

Protocol treasury account

## protocol economics

> For the specific economic specs, refer to [Economics Section](../Economics/README.md).

'''
'''--- specs/GenesisConfig/RuntimeConfig.md ---
# RuntimeConfig

The structure that holds the parameters of the runtime, mostly economics.

## storage_cost_byte_per_block

_type: Balance_

The cost to store one byte of storage per block.

## storage_cost_byte_per_block

_type: Balance_

Costs of different actions that need to be performed when sending and processing transaction
and receipts.

## poke_threshold

_type: BlockIndex_

The minimum number of blocks of storage rent an account has to maintain to prevent forced deletion.

## transaction_costs

_type: [RuntimeFeesConfig](RuntimeFeeConfig.md)_

Costs of different actions that need to be performed when sending and processing transaction and receipts.

## wasm_config

_type: [VMConfig](VMConfig.md),_

Config of wasm operations.

## account_length_baseline_cost_per_block

_type: Balance_

The baseline cost to store account_id of short length per block.
The original formula in NEP#0006 is `1,000 / (3 ^ (account_id.length - 2))` for cost per year.
This value represents `1,000` above adjusted to use per block

'''
'''--- specs/GenesisConfig/RuntimeFeeConfig.md ---
# RuntimeFeesConfig

Economic parameters for runtime

## action_receipt_creation_config

_type: Fee_

Describes the cost of creating an action receipt, `ActionReceipt`, excluding the actual cost
of actions.

## data_receipt_creation_config

_type: [DataReceiptCreationConfig](RuntimeFeeConfig/DataReceiptCreationConfig.md)_

Describes the cost of creating a data receipt, `DataReceipt`.

## action_creation_config

_type: [ActionCreationConfig](RuntimeFeeConfig/ActionCreationConfig.md)_

Describes the cost of creating a certain action, `Action`. Includes all variants.

## storage_usage_config

_type: [StorageUsageConfig](RuntimeFeeConfig/StorageUsageConfig.md)_

Describes fees for storage rent

## burnt_gas_reward
_type: [Fraction](RuntimeFeeConfig/Fraction.md)_

Fraction of the burnt gas to reward to the contract account for execution.

'''
'''--- specs/GenesisConfig/RuntimeFeeConfig/AccessKeyCreationConfig.md ---
# AccessKeyCreationConfig

Describes the cost of creating an access key.

## full_access_cost

_type: Fee_
Base cost of creating a full access access-key.

## function_call_cost

_type: Fee_
Base cost of creating an access-key restricted to specific functions.

## function_call_cost_per_byte

_type: Fee_
Cost per byte of method_names of creating a restricted access-key.

'''
'''--- specs/GenesisConfig/RuntimeFeeConfig/ActionCreationConfig.md ---
# action_creation_config

Describes the cost of creating a specific action, `Action`. Includes all variants.

## create_account_cost

_type: Fee_

Base cost of creating an account.

## deploy_contract_cost

_type: Fee_

Base cost of deploying a contract.

## deploy_contract_cost_per_byte

_type: Fee_

Cost per byte of deploying a contract.

## function_call_cost

_type: Fee_

Base cost of calling a function.

## function_call_cost_per_byte

_type: Fee_

Cost per byte of method name and arguments of calling a function.

## transfer_cost

_type: Fee_

Base cost of making a transfer.

NOTE: If the account ID is an implicit account ID (64-length hex account ID), then the cost of the transfer fee
will be `transfer_cost + create_account_cost + add_key_cost.full_access_cost`.
This is needed to account for the implicit account creation costs.

## stake_cost

_type: Fee_

Base cost of staking.

## add_key_cost:
_type: [AccessKeyCreationConfig](AccessKeyCreationConfig.md)_
Base cost of adding a key.

## delete_key_cost

_type: Fee_

Base cost of deleting a key.

## delete_account_cost

_type: Fee_

Base cost of deleting an account.

'''
'''--- specs/GenesisConfig/RuntimeFeeConfig/DataReceiptCreationConfig.md ---
# DataReceiptCreationConfig

Describes the cost of creating a data receipt, `DataReceipt`.

## base_cost

_type: Fee_
Base cost of creating a data receipt.

## cost_per_byte

_type: Fee_
Additional cost per byte sent.

'''
'''--- specs/GenesisConfig/RuntimeFeeConfig/Fee.md ---
# Fee

Costs associated with an object that can only be sent over the network (and executed by the receiver).

## send_sir

Fee for sending an object from the sender to itself, guaranteeing that it does not leave

## send_not_sir

Fee for sending an object potentially across the shards.

## execution

Fee for executing the object.

'''
'''--- specs/GenesisConfig/RuntimeFeeConfig/Fraction.md ---
# Fraction
## numerator
_type: u64_

## denominator
_type: u64_

'''
'''--- specs/GenesisConfig/RuntimeFeeConfig/StorageUsageConfig.md ---
# StorageUsageConfig

Describes cost of storage per block

## account_cost

_type: Gas_
Base storage usage for an account

## data_record_cost

_type: Gas_
Base cost for a k/v record

## key_cost_per_byte:

_type: Gas_
Cost per byte of key

## value_cost_per_byte: Gas

_type: Gas_
Cost per byte of value

## code_cost_per_byte: Gas

_type: Gas_
Cost per byte of contract code

'''
'''--- specs/GenesisConfig/StateRecord.md ---
# StateRecord

_type: Enum_

Enum that describes one of the records in the state storage.

## Account

_type: Unnamed struct_

Record that contains account information for a given account ID.

### account_id

_type: `AccountId`_

The account ID of the account.

### account

_type: [Account](../DataStructures/Account.md)_

The account structure. Serialized to JSON. U128 types are serialized to strings.

## Data

_type: Unnamed struct_

Record that contains key-value data record for a contract at the given account ID.

### account_id

_type: `AccountId`_

The account ID of the contract that contains this data record.

### data_key

_type: `Vec<u8>`_

Data Key serialized in Base64 format.

_NOTE: Key doesn't contain the data separator._

### value

_type: `Vec<u8>`_

Value serialized in Base64 format.

## Contract

_type: Unnamed struct_

Record that contains a contract code for a given account ID.

### account_id

_type: `AccountId`_

The account ID of that has the contract.

### code

_type: `Vec<u8>`_

WASM Binary contract code serialized in Base64 format.

## AccessKey

_type: Unnamed struct_

Record that contains an access key for a given account ID.

### account_id

_type: `AccountId`_

The account ID of the access key owner.

### public_key

_type: [PublicKey]_

The public key for the access key in JSON-friendly string format. E.g. `ed25519:5JFfXMziKaotyFM1t4hfzuwh8GZMYCiKHfqw1gTEWMYT`

### access_key

_type: [AccessKey](../DataStructures/AccessKey.md)_

The access key serialized in JSON format.

## PostponedReceipt

_type: `Box<`[Receipt](../RuntimeSpec/Receipts.md)`>`_

Record that contains a receipt that was postponed on a shard (e.g. it's waiting for incoming data).
The receipt is in JSON-friendly format. The receipt can only be an `ActionReceipt`.

NOTE: Box is used to decrease fixed size of the entire enum.

## ReceivedData

_type: Unnamed struct_

Record that contains information about received data for some action receipt, that is not yet received or processed for a given account ID.
The data is received using `DataReceipt` before. See [Receipts](../RuntimeSpec/Receipts.md) for details.

### account_id

_type: `AccountId`_

The account ID of the receiver of the data.

### data_id

_type: [CryptoHash]_

Data ID of the data in base58 format.

### data

_type: `Option<Vec<u8>>`_

Optional data encoded as base64 format or null in JSON.

## DelayedReceipt

_type: `Box<`[Receipt](../RuntimeSpec/Receipts.md)`>`_

Record that contains a receipt that was delayed on a shard. It means the shard was overwhelmed with receipts and it processes receipts from backlog.
The receipt is in JSON-friendly format.  See [Delayed Receipts](../RuntimeSpec/Components/RuntimeCrate.md#delayed-receipts) for details.

NOTE: Box is used to decrease fixed size of the entire enum.

'''
'''--- specs/GenesisConfig/VMConfig.md ---
# VMConfig

Config of wasm operations.

## ext_costs:

_type: [ExtCostsConfig](ExtCostsConfig.md)_

Costs for runtime externals

## grow_mem_cost

_type: u32_

Gas cost of a growing memory by single page.

## regular_op_cost

_type: u32_

Gas cost of a regular operation.

## max_gas_burnt
_type: Gas_

Max amount of gas that can be used, excluding gas attached to promises.

## max_stack_height
_type: u32_

How tall the stack is allowed to grow?

## initial_memory_pages
_type: u32_

## max_memory_pages
_type: u32_

The initial number of memory pages.
What is the maximal memory pages amount is allowed to have for
a contract.

## registers_memory_limit
_type: u64_

Limit of memory used by registers.

## max_register_size
_type: u64_

Maximum number of bytes that can be stored in a single register.

## max_number_registers
_type: u64_

Maximum number of registers that can be used simultaneously.

## max_number_logs
_type: u64_

Maximum number of log entries.

## max_log_len
_type: u64_

Maximum length of a single log, in bytes.

'''
'''--- specs/NetworkSpec/Messages.md ---
# Mensajes

Todos los mensajes enviados en la red son del tipo `PeerMessage`. Se codifican usando [Borsh](https://borsh.io/) que permite una estructura rica, de tamaño pequeño y un codificado/decodificado rápido. Para más detalles sobre las estructuras de datos usadas como parte de un mensaje vea el [código de referencia](https://github.com/nearprotocol/nearcore).

## Codificado

Un `PeerMessage` es convertido en un arreglo de bytes (`Vec<u8>`) usando la serialización borsh. Un mensaje codificado está conformado por 4 bytes con la longitud del `PeerMessage` serializado concatenado con el `PeerMessage` serializado.

Revise los detalles de la [especificación Borsh](https://github.com/nearprotocol/borsh#specification) para que vea como maneja cada estructura de datos.

## Estructura de datos

### PeerID

El id de un peer en la red es su [PublicKey](https://github.com/nearprotocol/nearcore/blob/master/core/crypto/src/signature.rs).

```rust
struct PeerId(PublicKey);
```

### PeerInfo

```rust
struct PeerInfo {
    id: PeerId,
    addr: Option<SocketAddr>,
    account_id: Option<AccountId>,
}
```

`PeerInfo` contiene información relevante para intentar conectarse a otro peer. [`SocketAddr`](https://doc.rust-lang.org/std/net/enum.SocketAddr.html) es una tupla de la forma: `IP:port`.

### AccountID

```rust
type AccountId = String;
```

### PeerMessage

```rust
enum PeerMessage {
    Handshake(Handshake),
    HandshakeFailure(PeerInfo, HandshakeFailureReason),
    /// Cuando un nonce fallido es usado par algún peer, este mensaje se envía de regreso como evidencia.
    LastEdge(Edge),
    /// Contiene cuentas e información de borde.
    Sync(SyncData),
    RequestUpdateNonce(EdgeInfo),
    ResponseUpdateNonce(Edge),
    PeersRequest,
    PeersResponse(Vec<PeerInfo>),
    BlockHeadersRequest(Vec<CryptoHash>),
    BlockHeaders(Vec<BlockHeader>),
    BlockRequest(CryptoHash),
    Block(Block),
    Transaction(SignedTransaction),
    Routed(RoutedMessage),
    /// Desconectado de forma correcta de otro peer.
    Disconnect,
    Challenge(Challenge),
}
```

### AnnounceAccount

Cada cuenta debe anunciar su cuenta

```rust
struct AnnounceAccount {
    /// ID de cuenta a ser anunciado.
    account_id: AccountId,
    /// PeerId del dueño de la cuenta.
    peer_id: PeerId,
    /// Este anuncio es solo válido para este `epoch`.
    epoch_id: EpochId,
    /// Firma usando la llave secreta asociada con el ID de cuenta.
    signature: Signature,
}
```

### Handshake

```rust
struct Handshake {
    /// Versión del protocolo
    pub version: u32,
    /// Versión de protocolo compatible más antigua.
    pub oldest_supported_version: u32,
    /// ID del peer del que envía.
    pub peer_id: PeerId,
    /// ID del peer del que recibe.
    pub target_peer_id: PeerId,
    /// Dirección de escucha del remitente.
    pub listen_port: Option<u16>,
    /// Cadena de información del Peer.
    pub chain_info: PeerChainInfoV2,
    /// Información para el nuevo borde.
    pub edge_info: EdgeInfo,
}
```

<!-- TODO: Make diagram about handshake process, since it is very complex -->

### Edge

```rust
struct Edge {
    /// Dado que los bordes no están dirigidos, `peer0 < peer1` debería mantenerse.
    peer0: PeerId,
    peer1: PeerId,
    /// Nonce para realizar el seguimiento la última actualización de este borde.
    nonce: u64,
    /// Firma de las partes validando el borde. Estas son la firma del borde agregado.
    signature0: Signature,
    signature1: Signature,
    /// Información necesaria para declarar un borde como removido.
    /// El bool dice que parte está removiendo el borde: false para el Peer0, true para el Peer1
    /// La firma de la parte que está removiendo el borde.
    removal_info: Option<(bool, Signature)>,
}
```

### EdgeInfo

```rust
struct EdgeInfo {
    nonce: u64,
    signature: Signature,
}
```

### RoutedMessage

```rust
struct RoutedMessage {
    /// ID del peer al que este mensaje va dirigido.
    /// Si `target` es un hash, este mensaje debe ser regresado.
    target: PeerIdOrHash,
    /// El remitente original de este mensaje
    author: PeerId,
    /// Firma del autor del mensaje. Si esta firma es inválida debemos banear al último
    /// remitente de este mensaje. Si el mensaje es inválido debemos banear al autor del mensaje.
    signature: Signature,
    /// El tiempo para vivir de este mensaje. Después de pasar algunos saltos este numero debe ser
    /// decrementado por 1. Si este número es 0, descartar este mensaje.
    ttl: u8,
    /// Mensaje
    body: RoutedMessageBody,
}
```

### RoutedMessageBody

```rust
enum RoutedMessageBody {
    BlockApproval(Approval),
    ForwardTx(SignedTransaction),

    TxStatusRequest(AccountId, CryptoHash),
    TxStatusResponse(FinalExecutionOutcomeView),
    QueryRequest {
        query_id: String,
        block_id_or_finality: BlockIdOrFinality,
        request: QueryRequest,
    },
    QueryResponse {
        query_id: String,
        response: Result<QueryResponse, String>,
    },
    ReceiptOutcomeRequest(CryptoHash),
    ReceiptOutComeResponse(ExecutionOutcomeWithIdAndProof),
    StateRequestHeader(ShardId, CryptoHash),
    StateRequestPart(ShardId, CryptoHash, u64),
    StateResponse(StateResponseInfo),
    PartialEncodedChunkRequest(PartialEncodedChunkRequestMsg),
    PartialEncodedChunkResponse(PartialEncodedChunkResponseMsg),
    PartialEncodedChunk(PartialEncodedChunk),
    Ping(Ping),
    Pong(Pong),
}
```

## CryptoHash

`CryptoHash` son objetos con 256 bits de información.

```rust
pub struct Digest(pub [u8; 32]);

pub struct CryptoHash(pub Digest);
```

'''
'''--- specs/NetworkSpec/NetworkSpec.md ---
# Red

La capa de red constituye el nivel bajo del Protocolo Near y es la última instancia responsable de transportar mensajes entre pares. Para proveer un enrutamiento eficiente mantiene una tabla de enrutamiento entre todos los pares activamente conectados a la red, y manda mensajes entre ellos usando los mejores caminos. Hay un mecanismo implementado, que permite a los nuevos pares que entran a la red, descubrir a otros pares, y rebalancea las conexiones de una manera en la que la latencia sea mínima. Las firmas criptográficas son usadas para verificar identidades de los pares participantes del protocolo debido a que es un sistema que no necesita de autorización.

Este documento debe servir como referencia para que todos los clientes implementen la capa de red.

## Mensajes

Estructuras de datos usados para los mensajes entre pares están enumerados en [Mensajes](Messages.md).

## Descubriendo la red

Cuando un nodo se inicia por primera vez, trata de conectarse a una lista de nodos de arranque especificados en un archivo de configuración. La dirección de cada nodo.

Se espera que un nodo pida periócamente una lista de pares a sus nodos vecinos para aprender de los demás nodos en la red. Esto permitirá a cada nodo descubrirse entre ellos mismos, además de tener información relevante para tratar de establecer una conexión nueva con esto. Cuando un nodo recibe un mensaje de tipo [`PeersRequest`](Messages.md#peermessage) se espera que conteste con un mensaje de tipo [`PeersResponse`](Message.md#peermessage) con la información de pares sanos que este nodo conozca.

### Handshakes

Para establecer una conexión nueva entre un par de nodos, estos seguirán el siguiente protocolo. El nodo A abre una conexión con el nodo B y le envía un [Handshake](Messages.md#Handshake) (apretón de manos por su traducción al español). Si el handshake es válido (vea las razones para [declinar un handshake](#Decline-handshake)) el nodo B procederá a enviar un [Handshake](Messages.md#Handshake) al nodo A. Después de que los dos nodos acepten el handshake, marcará al otro como una conexión activa, hasta que uno de ellos pare la conexión.

El [Handshake](Messages.md#Handshake) contiene información relevante del nodo, la cadena actual y la información para crear un nuevo edge entre ambos nodos.

#### Declinar handshake

Cuando un nodo recibe un handshake de otro nodo, este declinará la conexión si una de las siguientes situaciones pasa:

1. El otro nodo tiene genésis diferente.
2. El nonce del edge es demasiado bajo.

#### Edge

Los edges son usados para hacerle saber a los demás nodos en la red que hay una conexión activa entre un par de nodos actualmente. Vea la definición de [esta estructura de datos](Messages.md#Edge).

Si el nonce del edge es impar, denota un edge `Added`, de lo contrario denota un edge `Removed`. Cada nodo debe de monitorear el nonce usado para los edges entre cada par de nodos. El par C cree que el par A y B actualmente están conectados si y solo si el edge con el nonce más alto que C conoce para ellos, tiene un nonce impar.

Cuando dos nodos se conectan exitosamente entre ellos, transmiten el edge nuevo para hacerles saber a los otros pares sobre esta conexión. Cuando un nodo es desconectado de otro nodo, debe de incrementar el nonce por 1, firmar el edge nuevo y transmitirlo para hacerle saber a los otros nodos que la conexión fue removida.

Una conexión eliminada será válida, si contiene información válida del edge agregado que está invalidando. Esto previene a los pares incrementar el nonce por más de uno cuando eliminan un edge.

Cuando el nodo A propone un edge al B con el nonce X, lo aceptará y lo firmará si:

- X = 1 y B no sabe de algún otro edge anterior entre A y B
- X es impar y X > Y donde Y es el nonce del edge con el nonce más alto entre A y B que B conoce.

<!-- TODO: What is a valid edge: pseudo code -->

## Tabla de enrutamiento

Cada nodo mantiene una tabla de enrutamiento con todas las conexiones existentes e información relevante para enrutar mensajes. El grafo explícito con todas las conexiones activas se almacena todo el tiempo.

```rust
struct RoutingTable {
    /// PeerId asociado para cada id de cuenta conocido
    account_peers: HashMap<AccountId, AnnounceAccount>,
    /// PeerId activo que son parte del camino más corto a cada PeerId.
    peer_forwarding: HashMap<PeerId, HashSet<PeerId>>,
    /// Almacenar la última actualización para los edges conocidos.
    edges_info: HashMap<(PeerId, PeerId), Edge>,
    /// Hash de los mensajes que requiere enrutamiento de regreso al salto anterior respectivo.
    route_back: HashMap<CryptoHash, PeerId>,
    /// Vista actual de la red. Los nodos son los pares y los edges son las conexiones activas.
    raw_graph: Graph,
}

```

- `account_peers` es un mapeo de cada cuenta conocida al corresponsal [anuncio](Messages.md#announceaccount). Dado que los validadores son conocidos por sus [AccountId](Messages.md#accountid), cuando un nodo necesita enviar un mensaje a un validador, encuentra el [PeerId](Messages.md#peerid) asociado con el [AccountId](Messages.md#accountid) en esta tabla.

- `peer_forwarding`: Para el nodo `S`, `peer_forwarding` constituye un mapeo de cada [PeerId](Messages.md#peerid) `T`, para el conjunto de pares que están directamente conectados a `S` y pertenecen a la ruta más corta, en términos de número de edges, entre `S` y `T`. Cuando el nodo `S` necesita de enviar un mensaje al nodo `T` y no están directamente conectados, `S` escoje un par entre el conjunto `peer_forwarding[S]` y le envía un mensaje enrutado con destino hacia `T`.

<!-- TODO: Add example. Draw a graph. Show routing table for each node. -->
<!-- TODO: Notice when two nodes are totally disconnected, and when two nodes are directly connected -->

- `edges_info` es un mapeo entre cada par desordenado de pares `A` y `B` con el edge con el nonce más alto conocido entre esos pares.

- `route_back` es usado para calvular la ruta para ciertos mensajes. Lea más acerca de esto en la sección [Enrutamiento de regreso](#routing-back).

- `raw_graph` es la representación explícita del [grafo](https://es.wikipedia.org/wiki/Grafo) de la red. Cada vértica de este grado es un par, y cada edge (borde) es una conexión activa entre un par de pares, e.j. el edge con el nonce más alto entre este par de pares es de tipo `Added`. Es usado para calcular el camino más corto entre la fuente de todos los demás pares.

### Actualizaciones

`RoutingTable` debe de ser actualizada acorde a cuando el nodo recibe actualizaciones de la red:

- Edges nuevos: el mapeo `edges_info` es actualizado con edges nuevos si su nonce es más alto. Esto es relevante para saber si una conexión nueva fue creada, o si alguna conexión fue detenida.

```python
def on_edges_received(self, edges):
    for edge in edges:
        # Verifica si el edge es válido
        if edge.is_valid():
            peer0 = edge.peer0
            peer1 = edge.peer1

            # Encuentra el nonce más alto que se conoce en este punto.
            current_edge = self.routing_table.edges_info.get((peer0, peer1))

            # Si no hay un edge conocido, o si el edge conocido tiene un nonce más chico
            if current_edge is None or current_edge.nonce < edge.nonce:
                # Actualiza con el nuevo edge
                self.routing_table.edges_info[(peer0, peer1)] = edge
```

- Cuenta anunciante: el mapeo `account_peers` es actualizado con los anuncios de los epochs más recientes.

```python
def on_announce_accounts_received(self, announcements):
    for announce_account in announcements:
        # Verifica que el anuncio es válido
        if announce_account.is_valid():
            account_id = announce_account.account_id

            # Encuentra el anuncio más reciente para el account_id que se está anunciando
            current_announce_account = self.routing_table.account_peers.get(account_id)

            # Si el epoch nuevo pasa después del epoch actual.
            if announce_account.epoch > current_announce_account.epoch:
                # Actualiza con el anuncio nuevo
                self.routing_table.account_peers[announce_id] = announce_account
```

- Mensajes de enrutamiento de regreso: Lea sobre esto en la sección [Enrutamiento de regreso](#routing-back)

### Enrutamiento

Cuando un nodo necesita enviar un mensaje a otro par, verifica en la tabla de enrutamiento si está conectado con ese par, posiblemente no lo haga directamente sino a través de saltos. Después selecciona uno de los caminos más cortos al par objetivo y envía un [`RoutedMessage`](Messages.md#routedmessage) al primer peer en el camino.

Cuando recibe un [`RoutedMessage`](Messages.md#routedmessage), verifica si es el objetivo, en ese caso consume el cuerpo del mensaje, de lo contrario encuentra una ruta al objetivo siguiendo el enfoque descrito y envía el mensaje de nuevo. Es importante que antes de enrutar un mensaje cada par verifica la firma del autor original del mensaje, pasar un mensaje con firma inválida podría resultar en un baneo del remitente. Sin embargo, no es requerido revisar el contenido del mensaje en sí.

Cada [`RoutedMessage`](Messages.md#routedmessage) está equipado con un entero "tiempo-para-vivir". Si este mensage no es para el nodo que lo está procesando, decrementa el campo por uno antes de enrutarlo; si el valor es 0, el nodo descarta el mensaje en lugar de enrutarlo.

#### Enrutamiento de regreso

Es posible que el nodo `A` sea conocido por `B` pero no al revés. En el caso de que el nodo `A` envíe una petición que requiere una respuesta de `B`, la respuesta se enruta de regreso a través del mismo camino usado para enviar el mensaje de `A` a `B`. Cuando un nodo recibe un [RoutedMessage](Messages.md#routedmessage) que requiere una respuesta, lo alamacena en el mapeo `route_back`, el hash del mensaje mapeado al [PeerId](Messages.md#peerid) del remitente. Después de que el mensaje llega al destino final y la respuesta es calculada, se enruta de regreso usando el hash del mensaje original como objetivo. Cuando un nodo recibe un Routed Message en el cual el objetivo es un hash, el nodo verifica el remitente anterior en el mapeo `route_back`, y envía el mensaje a el si existe, de otra manera descarta el mensaje.

El hash de un `RoutedMessage` que será guardado en el mapeo `route_back` calculado como:

```python
def route_back_hash(routed_message):
    return sha256(concat(
        borsh(routed_message.target),
        borsh(routed_message.author),
        borsh(routed_message.body)
    ))
```

```python
def send_routed_message(self, routed_message, sender):
    """
    sender: PeerId del nodo a través del cual el mensaje fue recibido.

    No confundir sender con el routed_message.author:
    routed_message.author es el PeerId del creador original del mensaje
    
    La única situación en la cual el sender == routed_message.author es cuando el mensaje no
    se recibió de la red, pero fue creado por el nodo y debe ser enrutado.
    """
    if routed_message.requires_response():
        crypto_hash = route_back_hash(routed_message)
        self.routing_table.route_back[crypto_hash] = sender

    next_peer = self.find_closest_peer_to(routed_message.target)
    self.send_message(next_peer, routed_message)

def on_routed_message_received(self, routed_message, sender):
    # routed_message.target is of type CryptoHash or PeerId
    if isinstance(routed_message.target, CryptoHash):
        # Esta es la respuesta para un mensaje enrutado.
        # `targer` es el PeerId que envió este mensaje.
        target = self.routing_table.route_back.get(routed_message.target)

        if target is None:
            # Descartar mensaje si no hay una ruta de regreso conocida
            return
        else:
            del self.routing_table.route_back[routed_message.target]
    else:
        target = routed_message.target

    if target == self.peer_id:
        self.handle_message(routed_message.body)
    else:
        self.send_routed_message(routed_message, sender)
```

### Sincronización

Cuando dos nodos se conectan entre sí, estos intercambian todos los edges conocidos (de `RoutingTable::edges_info`) y los anuncios de cuenta (de `RoutingTable::account_peers`).
También transmiten los edges creados recientemente a todos los nodos directamente conectados hacia ellos. Después de que un nodo se entera de un nuevo `AnnounceAccount` o un `Edge` nuevo, estos transmiten automáticamente esta información al resto de los nodos, para que así todos se mantengan actualizados.

## Seguridad

Los mensajes intercambiados entre pares (directos o enrutados) son criptográficamente firmados con la llave de acceso privado del remitente. El ID del nodo contiene la llave pública de cada nodo que permite a otros pares verificar los mensajes. Para mantener una comunicación segura la mayoría del mensaje requiere algún nonce/marca de tiempo que prohiba a un actor malicioso reutilizar un mensaje firmado fuera de contexto.

En el caso del enrutamiento de mensajes cada salto intermedio debe verificar que el hash del mensaje y las firmas son válidas antes de enrutarlas al siguiente salto.

### Comportamiento abusivo

Cuando un nodo A manda más de `MAX_PEER_MSG_PER_MIN` mensajes por minuto al nodo B, será baneado y no podrá seguir enviando mensajes hacia el. Esta es un mecanismo de protección en contra de los nodos abusivos para evitar el spameo por otros pares.

## Detalles de implementación

Hay algunos problemas que deben de ser manejados por la capa de red, pero los detalles acerca de como implementarlos no se aplican en el protocolo, sin embargo, aquí proponemos como abordarlos.

### Balanceando la red

[Github comment](https://github.com/nearprotocol/nearcore/issues/2395#issuecomment-610077017)

'''
'''--- specs/NetworkSpec/RoutingTableExchangeAlgorithm.md ---
- Nombre de la propuesta: Nuevo algoritmo de intercambio de tablas de enrutamiento
- Fecha inicial: 6/21/2021
- NEP PR: [nearprotocol/neps#0000](https://github.com/near/nearcore/pull/4112)
- Problema(s): https://github.com/near/nearcore/issues/3838.
- GitHub PR: https://github.com/near/NEPs/pull/220

# Resumen
[resumen]: #summary

Actualmente, cada nodo en la red almacens su propia copia del [Grafo de Enrutamiento](NetworkSpec.md#Routing Table).
El proceso de intercambio y verificación de bordes requiere enviar una copia completa de la tabla de enrutamiento en cada sincronización.
Enviar la compia completa de la table de enrutamiento es un desperdicio, en esta especificación proponemos una solución, que perimite hacer sincronización parcial.
Esto debería reducir tanto la banda de ancha usada y la cantidad de tiempo de CPU.

Típicamente, solo una sincronización completa sería requerida cuando un nodo se conecta a la red por primera vez.
Para dos nodos dados que realizan una sincronización, proponemos un método, que requiere un ancho de banda/tiempo de procesamiento proporcional al tamaño de los datos que deben intercambiarse para los nodos dados.

# Algoritmo
En esta especificación describimos la implementación del algoritmo `Reconciliación de gráficos de enrutamiento` usando Filtros Bloom Inversos.
Una visión general de diferentes algoritmos `Reconciliación de gráficos de enrutamiento` pueden ser encontrados en [ROUTING_GRAPH_RECONCILIATION.pdf](https://github.com/pmnoxx/docs/blob/piotr-test-markdown/near/ROUTING_GRAPH_RECONCILIATION.pdf)

El proceso de intercambio de `tablas de enrutamiento` implica intercambiar bordes entre un par de nodos.
Para los nodos `A`, `B`, que implica agregar bordes que `A` tiene, pero `B` no y viceversa.
Para cada conexión creamos una estructura de datos [IbfSet](#IbfSet).
Almacena `Filtros Bloom Inversos` [Ibf](#Ibf) de potencias de `2^k` para `k` en el rango `10..17`.
Esto nos permite recuperar `2^17 / 1.3` bordes con el `99%` de probabilidad acorde con [Reconciliación de conjuntos eficiente sin contexto previo](https://www.ics.uci.edu/~eppstein/pubs/EppGooUye-SIGCOMM-11.pdf).
De otra manera, hacemos un intercambio completo de tabla de enrutamiento.

Hemos escogido un tamaño mínimo de `Ibf` el cual es `2^10`, porque la sobrecarga de procesamiento de `IBF` es menor que insignificante, y para reducir el número de mensajes requeridos en el intercambio.
Por el otro lado, limitamos el tamaño de `Ibf` a `2^17` para reducir el uso de memoria requerido para cada estructura de datos.

# Tabla de enrutamiento
Estamos heredando [Tabla de Enrutamiento](NetworkSpec.md#Routing Table) con el campo adicional `peer_ibf_set`

```rust
pub struct RoutingTable {
   /// Otros campos
   ///    ..
   /// Estructura de datos usada para el intercambio de tablas de enrutamiento.
   pub peer_ibf_set: IbfPeerSet,
}
```
- `peer_ibf_set` - una estructura de datos auxiliar, que permite hacer sincronización parcial.

# IbfPeerSet
`IbfPeerSet` contiene un mapeo entre `PeerId` y `IbfSet`.
Se usa para almacenar metadatos para cada peero, que puede ser usado para calcular la diferencia establecida entre las tablas de enrutamiento del peer actual y el peer contenido en el mapeo.
```rust
pub struct SimpleEdge {
  pub key: (PeerId, PeerId),
  pub nonce: u64,
}

pub struct IbfPeerSet {
    peer2seed: HashMap<PeerId, u64>,
    unused_seeds: Vec<u64>,
    seed2ibf: HashMap<u64, IbfSet<SimpleEdge>>,
    slot_map: SlotMap,
    edges: u64,
}
```
- `peer2seed` - contiene un mapeo de `PeerId` a `seed` usado para generar `IbfSet`
- `unused_seeds` - lista de las semillas sin usar actualmente, que no serán usadas para conexiones entrantes nuevas
- `seed2ibf` - contiene un mapeo de `seed` a `IbfSet`
- `slot_map` - una estructura de datos auxilar, que es usada para almacenar `Edges`, esto nos permite ahorrar memoria al no almacenar
  duplicados.
- `edges` - número total de bordes en la estructura de datos

# Messages

```rust
pub struct RoutingSyncV2 {
    pub version: u64,
    pub known_edges: u64,
    pub ibf_level: u64,
    pub ibf: Vec<IbfElem>,
    pub request_all_edges: bool,
    pub seed: u64,
    pub edges: Vec<Edge>,
    pub requested_edges: Vec<u64>,
    pub done: bool,
}
```
- `version` - versión de la tabla de enrutamiento, actualmente 0. Para el uso futuro
- `known_edges` - número de bordes que el peer conoce, esto nos permite decidir cuando solicitar todos los bordes
  inmediatamente o no.
- `ibf_level` - nivel de filtros inversos bloom solicitados de `10` a `17`.
- `request_all_edges` - true si el peer decide solicitar todos los bordes de otro peer
- `seed` - similla usada para generar el ibf
- `edges` - lista de bordes enviados al otro peer
- `requested_edges` - lista de hashes de bordes que el peer quiere obtener
- `done` - true si es el último mensaje en la sincronización

# IbfSet
Estructura usada para representar el conjunto de `Filtros Bloom Inversos` para el peer dado.
```rust
pub struct IbfSet<T: Hash + Clone> {
    seed: u64,
    ibf: Vec<Ibf>,
    h2e: HashMap<u64, SlotMapId>,
    hasher: DefaultHasher,
    pd: PhantomData<T>,
}
```
- `seed` - semilla usada para generar el IbfSet
- `ibf` - lista de `Filtros Bloom Inversos` con tamaños de `10` a `17`.
- `h2e` - mapeo de hash del borde dado al id del borde. Esto es usado para ahorrar memoria, para evitar guardar múltiples
  copies del borde dado.
- `hasher` - función de hashing

# Ibf
Estructura que representa los Filtros Bloom Inversos.
```rust
pub struct Ibf {
    k: i32,
    pub data: Vec<IbfElem>,
    hasher: IbfHasher,
    pub seed: u64,
}
```
- `k` - número de elementos en el vector
- `data` - vector de elementos del filtro bloom
- `semilla` - semilla de cada filtro bloom inverso
- `hasher` - función de hashing

# IbfElem
Elemento del filtro bloom
```rust
pub struct IbfElem {
    xor_elem: u64,
    xor_hash: u64,
}
```
- `xor_element` - xor de los hashes de los bordes almacenados en la caja dada
- `xor_hash` - xor de los hashes, de los hashes de los bordes almacenados en la caja dada

# Intercambio de la tabla de enrutamiento

El proceso de intercambiar tablas de enrutamiento involucra múltiples pasos.
Puede ser reducido si es necesario agregando un estimador de cuantos bordes difieren, pero no está implementado para mantener simplicidad.

## Paso 1
Peer `A` se conecta a peer `B`.

## Paso 2
Peer `B` escoje una `seed` única, y genera `IbfPeerSet` basado en la semilla y todos los bordes conocidos en la
[Tabla de Enrutamiento](NetworkSpec.md#Routing Table).

## Paso 3 - 10
En pasos impares peer `B` le envía mensajes a peer `A`, con un Ibf de tamaño `2^(step+7)`.
En pasos pares, peer `A` lo hace.
- Caso 1 - si no podemos encontrar todos los bordes continuamos con el siguiente paso
- Caso 2 - de lo contrario, sabemos cuál es la diferencia entre conjuntos.
Calculamos el conjunto de hashes de los bordes dados los cuales el nodo conoce, y también de los que no conoce.
El peer actual envía la respuesta, y el intercambio de tabla de enrutamiento finaliza.

## Paso 11

En caso de que la sincronización no esté realizada aún, cada lado envía una lista de hashes de bordes que conoce.

## Paso 12

Cada lado envía la lista de bordes que el otro lado solicitó.

# Consideraciones de seguridad

### Evitar calculación extra si otro peer se vuelve a conectar al servidor
Para evitar la calculación extra cuando un peer se vuelve a conectar a un servidor, podemos mantener un pool de estructuras `IbfPeerSet`.
El número de dichas estructuras que necesitamos mantener va a ser igual al número máximo de conexiones entrantes, que los servidores han tenido más el número de conexiones salientes.

### Produciendo de bordes, donde hay colisión de hashes.
Usamos una estructura `IbfPeerSet` única, para cada conexión, esto previene que se adivinen las semillas.
Por lo tanto, somos resistentes a ese tipo de ataque.

# Sobrecarga de memoria
Para cada conexión necesitamos aproximadamente `(2^10 + ... 2^17) * sizeof(IbfElem) bytes = 2^18 * 16 bytes = 4 MiB`.
Asumiendo que mantenemos `40` extra de dicha estructura de datos, necesitaríamos `160 MiB` extra.

# Sobrecarga de rendimiento
En cada actualización necesitamos actualizar cada estructura `IbfSet` `3*8 = 24` veces.
Asumiento que mantenemos `40` de dichas estructuras de datos, eso requiere hasta `960` actualizaciones.

# Enfoques alternativos

### Solo usar una estructura `IbfPeerSet` para todos
Esto reduciría el número de actualizaciones que necesitamos hacer, y el uso de memoria.
Sin embargo, sería posible adivinar el hash de la función usada, que nos podría exponer a una vulnerabilidad de seguridad.
Podría ser simple producir dos bordes, de modo que haya una colisión de hash, que causaría que el intercambio de tabla de enrutamiento fallara.

### Incrementar el número de estructuras `IbfSet` por cada `IbfPeerSet`
En teoría, podríamos incrementar los tamaños de las estructuras `IBF` usadas de `2^10..2^17` a `2^10..2^20`.
Esto nos permitiría recuperar la diferencia de conjunto si llega hasta `2^20/3` en lugar de `2^17/3` a costa de aumentar la sobrecarga de memoria de `160 MiB a 640 Mib`.

### Siplificar el algoritmo para solo intercambiar la listas de hashes de hashes conocidos de cada peer
Cada borde tiene un tamaño de aproximadamente 400 bytes.
Asumamos que necesitamos enviar 1 millón de bordes.
Al enviar una lista de hashes de 4 bytes de todos los bordes conocidos en cada sincronización solo necesitaríamos enviar `4 MiB` de metadatos más el tamaño de los bordes que difieren.
Este enfoque sería más simple, pero no tan eficiente en términos de banda ancha.
Eso seguiría siendo una mejora de tener que enviar solo `4 MiB` sobre `400 MiB` con la implementación existente.

# Mejoras futuras

## Reducir uso de memoria
### Teóricamente, usando un número ajustado de estructuras `IbfPeerSet` para cada nodo, un número menor de conjuntos podría ser usado. Por ejemplo 10, esto requeriría la estimación de qué tan probable es producir bordes que puedan llegar a producir colisiones.
Todavía podría ser posible generar fuera de línea un conjunto de bordes que puede causar que la recuperación de bordes de `IBF` falle para un nodo.

'''
'''--- specs/Proposals/0005-access-keys.md ---
- Proposal Code Name: access_keys
- Start Date: 2019-07-08
- NEP PR: [nearprotocol/neps#0000](https://github.com/nearprotocol/neps/pull/0000)
- Issue(s): [nearprotocol/nearcore#687](https://github.com/nearprotocol/nearcore/issues/687)

# Summary
[summary]: #summary

Access keys provide limited access to an account.
Each access key belongs to some account and identified by a unique (within the account) public key.
One account may have large number of access keys.
Access keys will replace original account-level public keys.
Access keys allow to act on behalf of the account by restricting allowed transactions with the access key permissions.

# Motivation
[motivation]: #motivation

Access keys give an ability to use dApps in a secure way without asking the user to sign every transaction in the wallet.
By issuing the access key once for the application, the application can now act on behalf of the user in a restricted environment.
This enables seamless experience for the user.

Access keys also enable a few other use-cases that are discussed in details below.

# Guide-level explanation
[guide-level-explanation]: #guide-level-explanation

Here are proposed changes for the AccessKey and Account structs.  

```rust
/// `account_id,public_key` is a key in the state
struct AccessKey {
  /// The nonce for this access key.
  /// It makes sense for nonce to not start from 0, in case the access key is recreated
  /// with the same public key, to avoid replaying of old transactions.
  pub nonce: Nonce,  // u64 
  
  /// Defines permissions for the AccessKey 
  pub permission: AccessKeyPermission,
}

/// Defines permissions for AccessKey 
pub enum AccessKeyPermission {
  /// Restricts AccessKey to only be used for function calls.
  FunctionCall(FunctionCallPermission),

  /// Gives full access to the account.
  /// NOTE: It's used to replace account-level public keys.
  FullAccess,
}

pub struct FunctionCallPermission {
  /// `Some` amount that can be spent for transaction fees by this access key from the account balance.
  /// When used, both account balance and the allowance is decreased.
  /// To change or increase the allowance, the access key can be replaced using SwapKey.
  /// NOTE: If you reuse the public key, make sure to keep the nonce from the old AccessKey.
  /// `None` means unlimited allowance.
  pub allowance: Option<Balance>,  // u128

  /// The AccountID of the receiver of the transaction. The access key will restrict transactions to
  /// only this receiver.
  pub receiver_id: AccountId,  // String
  
  /// If `Some`, the access key would be restricted to calling only the given method name.
  /// `None` means it's restricted to calling the receiver_id contract, but any method name.   
  pub method_name: Option<String>,
}

/// NOTE: This change removes account-level nonce and public keys.
/// Key is `account_id`
struct Account {
  pub balance: Balance(u128),
  pub code_hash: Hash,
  /// Storage usage accounts for all access keys      
  pub storage_usage: StorageUsage(u64),
    /// Last block index at which the storage was paid for.
  pub storage_paid_at: BlockIndex(u64),
}
```

### Examples

#### AccessKey as account-level public key

If an AccessKey has the full access to the account and the allowance set to be the max value for u128, then
it essentially acts as an account-level public key. Which means we can remove account-level
public keys from the account struct and rely only on access keys.

An access key example from user `vasya.near` with full access:
```rust
/// vasya.near,a123bca2
AccessKey {
    nonce: 0,
    
    permission: AccessKeyPermission::FullAccess,
}
```

#### AccessKey for a dApp by a user

This is a simple example where a user wants to use some dApp. The user has to authorize this dApp within their wallet, so the dApp knows who the user is, and also can issue simple function call transactions on behalf of this user.

To create such AccessKey a dApp generates a new key pair and passes the new public key to the user's wallet in a URL.
Then the wallet asks the user to create a new AccessKey with that points to the dApp.
User has to explicitly confirm this in the wallet for AccessKey to be created.

The new access key is restricted to be only used for the app’s contract_id, but is not restricted for any method name.
The user also selects the allowance to some reasonable amount, enough for the application to issue regular transactions.
The application might also hint the user about this desired allowance in some way.

Now the app can issue function call transactions on behalf of the user’s account towards the app’s contract without requiring the user to sign each transaction.

An access key example for chess app from user `vasya.near`:
```rust
/// vasya.near,c5d312f3
AccessKey {
    nonce: 0,
    
    permission: AccessKeyPermission::FunctionCall(FunctionCallPermission {
        // Since the access key is stored on the Chess app front-end, the user has
        // limited the spending amount to some reasonable, but large enough number.
        // NOTE: It's needs to be multiplied to decimals, e.g. 10^-18 
        allowance: Some(1_000_000_000),
        
        // This access key restricts access to `chess.app` contract.
        receiver_id: "chess.app",

        // Any method name on the `chess.app` contract can be called.  
        method_name: None,
    }),
}
```

#### AccessKey issued by a dApp

This is an example where the dApp wants to pay for the user, or it doesn't want to go through the user's sign-in flow.
For whatever reason the dApp decided to issue an access key directly for their account.

For this to work there should be one account with funds (that dApp controls on the backend) which creates access keys for the users.
The difference from the example above is there is only one account (the same for all users) that creates multiple access keys (one per user) towards one other contract (app's contract).
To differentiate users the contract has to use the public key of the access key instead of sender's account ID.

If the access key wants to support user's identity from the account ID. The contract can provide a public method that links user's account ID with a given public key.
Once this is done, a user can request a new access key with the linked public key (sponsored by the app), but it is linked to the user's account ID.

There are some caveats with this approach:
- The dApp is required to have a backend and to have some sybil resistance for users. It's needed to prevent abuse by bots.
- Writing the contract is slightly more complicated, since the contract now needs to handle mapping of the public keys to the account IDs.

An access key example for chess app paid by the chess app from `chess.funds` account:
```rust
/// chess.funds,2bc2b3b
AccessKey {
    nonce: 0,
    
    permission: AccessKeyPermission::FunctionCall(FunctionCallPermission {
        // Since the access key is given to the user, the developer wants to limit the
        // the spending amount to some conservative number, since a user might try to drain it.
        allowance: Some(5_000_000),
        
        // This access key restricts access to `chess.app` contract.
        receiver_id: "chess.app",

        // Any method name on the `chess.app` contract can be called (but some methods might just ignore this key).
        method_name: None,
    }),
}
```

#### AccessKey through a proxy

This examples demonstrates how to have more granular control on top of built-in access key restrictions.

Let's say a user wants to:
- limit the number of calls the access key can make per minute
- support multiple contracts with the same access key
- select which methods name can be called and which can't
- transfer funds from the account up to a certain limit 
- stake from the account, but prevent withdrawing funds

To make it work, we need to have a custom logic at every call.
We can achieve this by running a portion of a smart contract code before any action.
A user can deploy a code on their account and restrict access key to their account and to a method name, e.g. `proxy`.
Now this access key will only be able to issue transactions on behalf of the user that goes to the user's contract code and calls method `proxy`.
The `proxy` method can find out which access key is used by comparing public keys and verify the request before executing it.

E.g. the access key should only be able to call `chess.app` at most 3 times per 20 block and can transfer at most 1M tokens to the `chess.app`.
The `proxy` function internally can validate that this access key is used, fetch its config, validate the passed arguments and proxy the transaction.
A `proxy` method might take the following arguments for a function call:
```json
{
  "action": "call",
  "contractId": "chess.app",
  "methodName": "move",
  "args": "{...serialized args...}",
  "amount": 0
}
```

In this case the `action` is `call`, so the function checks the `amount` to be within the withdrawal limit, check that the contract name is `chess.app` and if there were the last 3 calls were not in the last 20 blocks issue an async call to the `chess.app`.
The same `proxy` function in theory can handle other actions, e.g. staking or vesting.

The benefit of having a proxy function on your own account is that it doesn't require additional receipt, because the account's state and the code are available at the transaction verification time.

An example of an access key limited to `proxy` function:
```rust
/// vasya.near,3bc2b3b
AccessKey {
    nonce: 0,
    
    permission: AccessKeyPermission::FunctionCall(FunctionCallPermission {
        // Allowance can be large enough, since the user is likely trusting the app.
        allowance: Some(1_000_000_000),
        
        // This access key restricts access to user's account `vasya.near` contract.
        // Most likely, the contract code can be deployed and upgraded directly from the wallet.
        receiver_id: "vasya.near",

        // The method is restricted to proxy, which does all the security checks.
        method_name: Some("proxy"),
    }),
}
```

# Reference-level explanation
[reference-level-explanation]: #reference-level-explanation

- Access keys are stored with the `account_id,public_key` key. Where `account_id` and `public_key` are actual Account ID and public keys, and `,` is a separator.
They should be stored on the same shard as the account.
- Access keys storage rent should be accounted and paid from the account directly without affecting the allowance.
- Access keys allowance can exceed the account balance.
- To validate a transaction signed with the AccessKey, we need to first validate the signature, then fetch the Account and the AccessKey, validate that we have enough funds and verify permissions. 
- Account creation should now create a full access permission access key, instead of public keys within the account.
- SwapKey transaction should just replace the old access key with the given new access key.

### Technical changes

#### `nonce` on the AccessKey level instead of account level

Since access keys can be used by the different people or parties at the same time, we need to be able to 
have separate nonce for each key instead of a single nonce at the account level.
With a single nonce on the account level, there is a high probability that 2 apps would use the same nonce for 2 different transactions and one of this transactions would be rejected.

Previously we were ordering transactions by nonce and rejecting transactions with a duplicated or lower nonce.
With the access key nonce, we still need to order transactions by nonce, but now we need to group them by `account_id,public_key` key instead of just account_id.
To prevent one access key from having a priority on other access keys, we should order transactions by hash when determining which transactions should be added to the block.

The suggestion from @nearmax:

"
We need to spec out here how transactions from different access keys are going to be ordered with respect to each other. For example:
3 access keys (A,B,C) issue 3 transactions each:
A1, A2, A3; B1,B2,B3; C1, C2, C3;
All these transactions operate on the same state so they need to have an order. First transaction to execute is one of {A1,B1,C1} that has lowest hash, let's say it is B1. Second transaction to execute is one of {A1,B2,C1} with lowest hash, etc.
"

We should also restrict the nonce of the next transaction to be exactly the previous nonce incremented by 1.
It will help us with ordering transactions.

The transaction ordering should be a separate topic which should also include security for transactions expiration and fork selection.

#### `allowance` field

Allowance is the amount of tokens the AccessKey can spend from the account balance.
When some amount is spent, it's subtracted from both the allowance of the access key and from the account balance.
If in some case the user wants to have unlimited allowance for this key, then we have a `None` allowance option.

NOTE: In the previous iteration of access keys, we used balance instead of the allowance.
But it required to sum up all access keys balances to get the the total account balance.
It also prevented sharing of the account balance between access keys.

#### Permissions

Almost all desired use-cases of access keys can be achieved by using the old permissions model.
It restricts access keys to only issue function call with no attached tokens.
The function calls are restricted to the selected `receiver_id` and potentially restricted to a single `method_name`.
Anything non-trivial can be done by the contract that receives this call, e.g. through `proxy` function.

To remove public keys from the account, we added a new permission that full access to the account and not limited by the allowance.

#### How is `storage_usage` computed?

If we use protobuf size to compute the `storage_usage` value, then protobuf might compress `u128` value and it would affect storage usage every time the `allowance` is modified.

The best option would be is to change `storage_usage` only when the access key is created or removed.
So that changes to the `allowance` value shouldn't change the `storage_usage` value.
For this to work, we might need to update the storage computation formula for the access key, e.g. the one that ignores the compressed size of the `allowance` and instead just relies on the 16 bytes of `u128` size.
Especially, because we currently don't use the proto size for the storage_usage for the account itself.

# Drawbacks
[drawbacks]: #drawbacks

Currently the permission model is quite limited to either a function call with one or any method names, or a full access key.
But we may add more permissions in the future in order to handle this issue. 

# Rationale and alternatives
[rationale-and-alternatives]: #rationale-and-alternatives

## Alternatives

#### More permissions directly on the access key

For example we can have multiple method names, multiple contract_id/method_name pairs or different transactions types (e.g. only allow staking transactions).

This can be achieved with the contract and a dedicated function that does this control. So to keep the runtime simple and secure we should avoid doing more checks, since they are not accounted for fees.

It's also can be achieved if we refactor SignedTransaction to only use method_names instead of oneof body types.

#### Balance instead of allowance

Allowance enables sharing of a single account balance with multiple access keys. E.g. if you use 5 apps, you can give full allowance to each app instead of splitting balance into 5 parts.

It's also easier to work with, than access keys balances.

Previously we have AccessKey's balance owner, so the dApp could sponsor users. But it can be achieved by dApps creating access keys from their account, effectively paying for all transactions.
 
#### Not exposing `nonce` on each AccessKey

If you use 2 applications at the same time, e.g. a mobile app and a desktop wallet, you might run into a `nonce` collision at the account level, which would cancel one of the transaction. It would happen more frequently with more apps being used.

As for the runtime multi nonce handling per account, we need to think and verify security a little more.

#### `receiver_id` being an `Option<AccountId>`

In the previous design, the `receiver_id` was called `contract_id` and was an option field. But it didn't remove the requirement for the receiver when it was `None`. Instead it was assuming the access key is pointed to the owner's account. 
We can potentially use `None` to mean unlimited key, and require user to explicitly specify their own account_id if they want to use proxy function.

# Unresolved questions
[unresolved-questions]: #unresolved-questions

#### Transactions ordering and nonce restrictions

That question is still unresolved. Whether we should restrict TX nonce to be +1 or not restricting.
It's not a blocking change, but it would make sense to do this change with other SignedTransaction security features such as minimum hash of a block header and block expiration.

#### Permissions

Not clear whether a single pair of `receiver_id`/`method_name` is enough to cover all use-cases at the moment.
E.g. if I want to use my account that already has some code on it, e.g. vesting locked account. I can't deploy a new code on it, so I can't use a `proxy` method.

# Future possibilities
[future-possibilities]: #future-possibilities

For all use-cases to work we need to add all missing runtime methods that are currently only possible with `SignedTransaction` at the moment, e.g. staking, account creation, public/access key management and code deployment.

Next we might consider refactoring stake out of `Account` and also refactor `SignedTransaction` to support text based method names instead of enums.

We should also think about storing the same code (by hash) only once instead of storing for each account. Especially, if we adopt `proxy` model. 

'''
'''--- specs/Proposals/0006-bindings.md ---
- Proposal Name: `wasm_bindings`
- Start Date: 2019-07-22
- NEP PR: [nearprotocol/neps#0000](https://github.com/nearprotocol/neps/pull/0000)

# Summary
[summary]: #summary

Wasm bindings, a.k.a imports, are functions that the runtime (a.k.a host) exposes to the Wasm code (a.k.a guest) running on the virtual machine.
These functions are arguably the most difficult thing to change in our entire ecosystem, after we have contracts running on our blockchain,
since once the bindings change the old smart contracts will not be able to run on the new nodes.
Additionally, we need a highly detailed specification of the bindings to be able to write unit tests for our contracts,
since currently we only allow integration tests. Currently, writing unit tests is not possible since we cannot have
a precise mock of the host in the smart contract unit tests, e.g. we don't know how to mock the range iterator (what does it do
when given an empty or inverted range?).

In this proposal we give a detailed specification of the functions that we will be relying on for many months to come.

# Motivation
[motivation]: #motivation

The current imports have the following issues:
* **Trie API.** The behavior of trie API is currently unspecified. Many things are unclear: what happens when we try
iterating over an empty range, what happens if we try accessing a non-existent key, etc. Having a trie API specification
is important for being able to create a testing framework for Rust and AssemblyScript smart contracts, since in unit
tests the contracts will be running on a mocked implementation of the host;
* **Promise API.** Recently we have discussed the changes to our promise mechanics. The schema does not need to change,
but the specification now needs to be clarified;
* `data_read` currently has mixed functionality -- it can be used both for reading data from trie and to read data from
the context. In former it expects pointers to be passed as arguments, in later it expects enum to be passed. It achieves
juxtaposition by casting pointer type in enum when needed;
* **Economics API.** The functions that provide access to balance and such might need to be added or removed since we
now consider splitting attached balance into two.

# Specification

## Registers
Registers allow the host function to return the data into a buffer located inside the host oppose to the buffer
located on the client. A special operation can be used to copy the content of the buffer into the host. Memory pointers
can then be used to point either to the memory on the guest or the memory on the host, see below. Benefits:
* We can have functions that return values that are not necessarily used, e.g. inserting key-value into a trie can
also return the preempted old value, which might not be necessarily used. Previously, if we returned something we
would have to pass the blob from host into the guest, even if it is not used;
* We can pass blobs of data between host functions without going through the guest, e.g. we can remove the value
from the storage and insert it into under a different key;
* It makes API cleaner, because we don't need to pass `buffer_len` and `buffer_ptr` as arguments to other functions;
* It allows merging certain functions together, see `storage_iter_next`;
* This is consistent with other APIs that were created for high performance, e.g. allegedly Ewasm have implemented
SNARK-like computations in Wasm by exposing a bignum library through stack-like interface to the guest. The guest
can manipulate then with the stack of 256-bit numbers that is located on the host.

#### Host → host blob passing
The registers can be used to pass the blobs between host functions. For any function that
takes a pair of arguments `*_len: u64, *_ptr: u64` this pair is pointing to a region of memory either on the guest or
the host:
* If `*_len != u64::MAX` it points to the memory on the guest;
* If `*_len == u64::MAX` it points to the memory under the register `*_ptr` on the host.

For example:
`storage_write(u64::MAX, 0, u64::MAX, 1, 2)` -- insert key-value into storage, where key is read from register 0,
value is read from register 1, and result is saved to register 2.

Note, if some function takes `register_id` then it means this function can copy some data into this register. If
`register_id == u64::MAX` then the copying does not happen. This allows some micro-optimizations in the future.

Note, we allow multiple registers on the host, identified with `u64` number. The guest does not have to use them in
order and can for instance save some blob in register `5000` and another value in register `1`.

#### Specification
```rust
read_register(register_id: u64, ptr: u64)
```
Writes the entire content from the register `register_id` into the memory of the guest starting with `ptr`.
###### Panics
* If the content extends outside the memory allocated to the guest. In Wasmer, it returns `MemoryAccessViolation` error message;
* If `register_id` is pointing to unused register returns `InvalidRegisterId` error message.

###### Undefined Behavior
* If the content of register extends outside the preallocated memory on the host side, or the pointer points to a
wrong location this function will overwrite memory that it is not supposed to overwrite causing an undefined behavior.

---
```rust
register_len(register_id: u64) -> u64
```
Returns the size of the blob stored in the given register.
###### Normal operation
* If register is used, then returns the size, which can potentially be zero;
* If register is not used, returns `u64::MAX`

## Trie API

Here we provide a specification of trie API. After this NEP is merged, the cases where our current implementation does
not follow the specification are considered to be bugs that need to be fixed.

---
```rust
storage_write(key_len: u64, key_ptr: u64, value_len: u64, value_ptr: u64, register_id: u64) -> u64
```
Writes key-value into storage.
###### Normal operation
* If key is not in use it inserts the key-value pair and does not modify the register;
* If key is in use it inserts the key-value and copies the old value into the `register_id`.

###### Returns
* If key was not used returns `0`;
* If key was used returns `1`.

###### Panics
* If `key_len + key_ptr` or `value_len + value_ptr` exceeds the memory container or points to an unused register it panics
with `MemoryAccessViolation`. (When we say that something panics with the given error we mean that we use Wasmer API to
create this error and terminate the execution of VM. For mocks of the host that would only cause a non-name panic.)
* If returning the preempted value into the registers exceed the memory container it panics with `MemoryAccessViolation`;

###### Current bugs
*  `External::storage_set` trait can return an error which is then converted to a generic non-descriptive
   `StorageUpdateError`, [here](https://github.com/nearprotocol/nearcore/blob/942bd7bdbba5fb3403e5c2f1ee3c08963947d0c6/runtime/wasm/src/runtime.rs#L210)
   however the actual implementation does not return error at all, [see](https://github.com/nearprotocol/nearcore/blob/4773873b3cd680936bf206cebd56bdc3701ddca9/runtime/runtime/src/ext.rs#L95);
* Does not return into the registers.

---
```rust
storage_read(key_len: u64, key_ptr: u64, register_id: u64) -> u64
```
Reads the value stored under the given key.
###### Normal operation
* If key is used copies the content of the value into the `register_id`, even if the content is zero bytes;
* If key is not present then does not modify the register.

###### Returns
* If key was not present returns `0`;
* If key was present returns `1`.

###### Panics
* If `key_len + key_ptr` exceeds the memory container or points to an unused register it panics with `MemoryAccessViolation`;
* If returning the preempted value into the registers exceed the memory container it panics with `MemoryAccessViolation`;

###### Current bugs
* This function currently does not exist.

---
```rust
storage_remove(key_len: u64, key_ptr: u64, register_id: u64) -> u64
```
Removes the value stored under the given key.
###### Normal operation
Very similar to `storage_read`:
* If key is used, removes the key-value from the trie and copies the content of the value into the `register_id`, even if the content is zero bytes.
* If key is not present then does not modify the register.

###### Returns
* If key was not present returns `0`;
* If key was present returns `1`.

###### Panics
* If `key_len + key_ptr` exceeds the memory container or points to an unused register it panics with `MemoryAccessViolation`;
* If the registers exceed the memory limit panics with `MemoryAccessViolation`;
* If returning the preempted value into the registers exceed the memory container it panics with `MemoryAccessViolation`;

###### Current bugs
* Does not return into the registers.

---
```rust
storage_has_key(key_len: u64, key_ptr: u64) -> u64
```
Checks if there is a key-value pair.
###### Normal operation
* If key is used returns `1`, even if the value is zero bytes;
* Otherwise returns `0`.

###### Panics
* If `key_len + key_ptr` exceeds the memory container it panics with `MemoryAccessViolation`;

---
```rust
storage_iter_prefix(prefix_len: u64, prefix_ptr: u64) -> u64
```
Creates an iterator object inside the host.
Returns the identifier that uniquely differentiates the given iterator from other iterators that can be simultaneously
created.
###### Normal operation
* It iterates over the keys that have the provided prefix. The order of iteration is defined by the lexicographic
order of the bytes in the keys. If there are no keys, it creates an empty iterator, see below on empty iterators;
###### Panics
* If `prefix_len + prefix_ptr` exceeds the memory container it panics with `MemoryAccessViolation`;

---
```rust
storage_iter_range(start_len: u64, start_ptr: u64, end_len: u64, end_ptr: u64) -> u64
```
Similarly to `storage_iter_prefix`
creates an iterator object inside the host.
###### Normal operation
Unless lexicographically `start < end`, it creates an empty iterator.
Iterates over all key-values such that keys are between `start` and `end`, where `start` is inclusive and `end` is exclusive.

Note, this definition allows for `start` or `end` keys to not actually exist on the given trie.

###### Panics:
* If `start_len + start_ptr` or `end_len + end_ptr` exceeds the memory container or points to an unused register it panics with `MemoryAccessViolation`;

---
```rust
storage_iter_next(iterator_id: u64, key_register_id: u64, value_register_id: u64) -> u64
```
Advances iterator and saves the next key and value in the register.
###### Normal operation
* If iterator is not empty (after calling next it points to a key-value), copies the key into `key_register_id` and value into `value_register_id` and returns `1`;
* If iterator is empty returns `0`.

This allows us to iterate over the keys that have zero bytes stored in values.

###### Panics
* If `key_register_id == value_register_id` panics with `MemoryAccessViolation`;
* If the registers exceed the memory limit panics with `MemoryAccessViolation`;
* If `iterator_id` does not correspond to an existing iterator panics with  `InvalidIteratorId`
* If between the creation of the iterator and calling `storage_iter_next` any modification to storage was done through
  `storage_write` or `storage_remove` the iterator is invalidated and the error message is `IteratorWasInvalidated`.

###### Current bugs
* Not implemented, currently we have `storage_iter_next` and `data_read` + `DATA_TYPE_STORAGE_ITER` that together fulfill
the purpose, but have unspecified behavior.

## Context API
Context API mostly provides read-only functions that access current information about the blockchain, the accounts
(that originally initiated the chain of cross-contract calls, the immediate contract that called the current one, the account of the current contract),
other important information like storage usage.

Many of the below functions are currently implemented through `data_read` which allows to read generic context data.
However, there is no reason to have `data_read` instead of the specific functions:
* `data_read` does not solve forward compatibility. If later we want to add another context function, e.g. `executed_operations`
we can just declare it as a new function, instead of encoding it as `DATA_TYPE_EXECUTED_OPERATIONS = 42` which is passed
as the first argument to `data_read`;
* `data_read` does not help with renaming. If later we decide to rename `signer_account_id` to `originator_id` then one could
argue that contracts that rely on `data_read` would not break, while contracts relying on `signer_account_id()` would. However
the name change often means the change of the semantics, which means the contracts using this function are no longer safe to
execute anyway.

However there is one reason to not have `data_read` -- it makes `API` more human-like which is a general direction Wasm APIs, like WASI are moving towards to.

---
```rust
current_account_id(register_id: u64)
```
Saves the account id of the current contract that we execute into the register.

###### Panics
* If the registers exceed the memory limit panics with `MemoryAccessViolation`;

---
```rust
signer_account_id(register_id: u64)
```
All contract calls are a result of some transaction that was signed by some account using
some access key and submitted into a memory pool (either through the wallet using RPC or by a node itself). This function returns the id of that account.

###### Normal operation
* Saves the bytes of the signer account id into the register.

###### Panics
* If the registers exceed the memory limit panics with `MemoryAccessViolation`;

###### Current bugs
* Currently we conflate `originator_id` and `sender_id` in our code base.

---
```rust
signer_account_pk(register_id: u64)
```
Saves the public key fo the access key that was used by the signer into the register.
In rare situations smart contract might want to know the exact access key that was used to send the original transaction,
e.g. to increase the allowance or manipulate with the public key.

###### Panics
* If the registers exceed the memory limit panics with `MemoryAccessViolation`;

###### Current bugs
* Not implemented.

---
```rust
predecessor_account_id(register_id: u64)
```
All contract calls are a result of a receipt, this receipt might be created by a transaction
that does function invocation on the contract or another contract as a result of cross-contract call.

###### Normal operation
* Saves the bytes of the predecessor account id into the register.

###### Panics
* If the registers exceed the memory limit panics with `MemoryAccessViolation`;

###### Current bugs
* Not implemented.

---
```rust
input(register_id: u64)
```
Reads input to the contract call into the register. Input is expected to be in JSON-format.

###### Normal operation
* If input is provided saves the bytes (potentially zero) of input into register.
* If input is not provided does not modify the register.

###### Returns
* If input was not provided returns `0`;
* If input was provided returns `1`; If input is zero bytes returns `1`, too.

###### Panics
* If the registers exceed the memory limit panics with `MemoryAccessViolation`;

###### Current bugs
* Implemented as part of `data_read`. However there is no reason to have one unified function, like `data_read` that can
be used to read all

---
```rust
block_index() -> u64
```
Returns the current block index.

---
```rust
storage_usage() -> u64
```
Returns the number of bytes used by the contract if it was saved to the trie as of the
invocation. This includes:
* The data written with `storage_*` functions during current and previous execution;
* The bytes needed to store the account protobuf and the access keys of the given account.

## Economics API
Accounts own certain balance; and each transaction and each receipt have certain amount of balance and prepaid gas
attached to them.
During the contract execution, the contract has access to the following `u128` values:
* `account_balance` -- the balance attached to the given account. This includes the `attached_deposit` that was attached
  to the transaction;
* `attached_deposit` -- the balance that was attached to the call that will be immediately deposited before
  the contract execution starts;
* `prepaid_gas` -- the tokens attached to the call that can be used to pay for the gas;
* `used_gas` -- the gas that was already burnt during the contract execution and attached to promises (cannot exceed `prepaid_gas`);

If contract execution fails `prepaid_gas - used_gas` is refunded back to `signer_account_id` and `attached_balance`
is refunded back to `predecessor_account_id`.

The following spec is the same for all functions:
```rust
account_balance(balance_ptr: u64)
attached_deposit(balance_ptr: u64)

```
 -- writes the value into the `u128` variable pointed by `balance_ptr`.

###### Panics
* If `balance_ptr + 16` points outside the memory of the guest with `MemoryAccessViolation`;

###### Current bugs
* Use a different name;

---
```rust
prepaid_gas() -> u64
used_gas() -> u64
```

## Math

```rust
random_seed(register_id: u64)
```
Returns random seed that can be used for pseudo-random number generation in deterministic way.

###### Panics
* If the size of the registers exceed the set limit `MemoryAccessViolation`;

---
```rust
sha256(value_len: u64, value_ptr: u64, register_id: u64)
```
Hashes the random sequence of bytes using sha256 and returns it into `register_id`.
###### Panics
* If `value_len + value_ptr` points outside the memory or the registers use more memory than the limit with `MemoryAccessViolation`.

###### Current bugs
* Current name `hash` is not specific to what hash is being used.
* We have `hash32` that largely duplicates the mechanics of `hash` because it returns the first 4 bytes only.

---
```rust
check_ethash(block_number_ptr: u64,
             header_hash_ptr: u64,
             nonce: u64,
             mix_hash_ptr: u64,
             difficulty_ptr: u64) -> u64
```
-- verifies hash of the header that we created using [Ethash](https://en.wikipedia.org/wiki/Ethash). Parameters are:
* `block_number` -- `u256`/`[u64; 4]`, number of the block on Ethereum blockchain. We use the pointer to the slice of 32 bytes on guest memory;
* `header_hash` -- `h256`/`[u8; 32]`, hash of the header on Ethereum blockchain. We use the pointer to the slice of 32 bytes on guest memory;
* `nonce` -- `u64`/`h64`/`[u8; 8]`, nonce that was used to find the correct hash, passed as `u64` without pointers;
* `mix_hash` -- `h256`/`[u8; 32]`, special hash that avoid griefing attack. We use the pointer to the slice of 32 bytes on guest memory;
* `difficulty` -- `u256`/`[u64; 4]`, the difficulty of mining the block. We use the pointer to the slice of 32 bytes on guest memory;

###### Returns
* `1` if the Ethash is valid;
* `0` otherwise.

###### Panics
* If `block_number_ptr + 32` or `header_hash_ptr + 32` or `mix_hash_ptr + 32` or `difficulty_ptr + 32` point outside the memory or registers use more memory than the limit with `MemoryAccessViolation`.

###### Current bugs
* `block_number` and `difficulty` are currently exposed as `u64` which are casted to `u256` which breaks Ethereum compatibility;
* Currently, we also pass the length together with `header_hash_ptr` and `mix_hash_ptr` which is not necessary since
we know their length.

## Promises API

```rust
promise_create(account_id_len: u64,
               account_id_ptr: u64,
               method_name_len: u64,
               method_name_ptr: u64,
               arguments_len: u64,
               arguments_ptr: u64,
               amount_ptr: u64,
               gas: u64) -> u64
```
Creates a promise that will execute a method on account with given arguments and attaches the given amount.
`amount_ptr` point to slices of bytes representing `u128`.

###### Panics
* If `account_id_len + account_id_ptr` or `method_name_len + method_name_ptr` or `arguments_len + arguments_ptr`
or `amount_ptr + 16` points outside the memory of the guest or host, with `MemoryAccessViolation`.

###### Returns
* Index of the new promise that uniquely identifies it within the current execution of the method.

---

```rust
promise_then(promise_idx: u64,
             account_id_len: u64,
             account_id_ptr: u64,
             method_name_len: u64,
             method_name_ptr: u64,
             arguments_len: u64,
             arguments_ptr: u64,
             amount_ptr: u64,
             gas: u64) -> u64
```
Attaches the callback that is executed after promise pointed by `promise_idx` is complete.

###### Panics
* If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
* If `account_id_len + account_id_ptr` or `method_name_len + method_name_ptr` or `arguments_len + arguments_ptr`
or `amount_ptr + 16` points outside the memory of the guest or host, with `MemoryAccessViolation`.

###### Returns
* Index of the new promise that uniquely identifies it within the current execution of the method.

---
```rust
promise_and(promise_idx_ptr: u64, promise_idx_count: u64) -> u64
```
Creates a new promise which completes when time all promises passed as arguments complete. Cannot be used with registers.
`promise_idx_ptr` points to an array of `u64` elements, with `promise_idx_count` denoting the number of elements.
The array contains indices of promises that need to be waited on jointly.

###### Panics
* If `promise_ids_ptr + 8 * promise_idx_count` extend outside the guest memory with `MemoryAccessViolation`;
* If any of the promises in the array do not correspond to existing promises panics with `InvalidPromiseIndex`.

###### Returns
* Index of the new promise that uniquely identifies it within the current execution of the method.

---
```rust
promise_results_count() -> u64
```
If the current function is invoked by a callback we can access the execution results of the promises that
caused the callback. This function returns the number of complete and incomplete callbacks.

Note, we are only going to have incomplete callbacks once we have `promise_or` combinator.
###### Normal execution
* If there is only one callback `promise_results_count()` returns `1`;
* If there are multiple callbacks (e.g. created through `promise_and`) `promise_results_count()` returns their number.
* If the function was called not through the callback `promise_results_count()` returns `0`.

---
```rust
promise_result(result_idx: u64, register_id: u64) -> u64
```
If the current function is invoked by a callback we can access the execution results of the promises that
caused the callback. This function returns the result in blob format and places it into the register.

###### Normal execution
* If promise result is complete and successful copies its blob into the register;
* If promise result is complete and failed or incomplete keeps register unused;

###### Returns
* If promise result is not complete returns `0`;
* If promise result is complete and successful returns `1`;
* If promise result is complete and failed returns `2`.

###### Panics
* If `result_idx` does not correspond to an existing result panics with `InvalidResultIndex`.
* If copying the blob exhausts the memory limit it panics with `MemoryAccessViolation`.

###### Current bugs
* We currently have two separate functions to check for result completion and copy it.

---
```rust
promise_return(promise_idx: u64)
```
When promise `promise_idx` finishes executing its result is considered to be the result of the current function.

###### Panics
* If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.

###### Current bugs
* The current name `return_promise` is inconsistent with the naming convention of Promise API.

## Miscellaneous API
```rust
value_return(value_len: u64, value_ptr: u64)
```
Sets the blob of data as the return value of the contract.

##### Panics
* If `value_len + value_ptr` exceeds the memory container or points to an unused register it panics with `MemoryAccessViolation`;

---
```rust
panic()
```
Terminates the execution of the program with panic `GuestPanic`.

---
```rust
log_utf8(len: u64, ptr: u64)
```
Logs the UTF-8 encoded string. See https://stackoverflow.com/a/5923961 that explains
that null termination is not defined through encoding.

###### Normal behavior
If `len == u64::MAX` then treats the string as null-terminated with character `'\0'`;

###### Panics
* If string extends outside the memory of the guest with `MemoryAccessViolation`;

---
```rust
log_utf16(len: u64, ptr: u64)
```
Logs the UTF-16 encoded string. `len` is the number of bytes in the string.

###### Normal behavior
If `len == u64::MAX` then treats the string as null-terminated with two-byte sequence of `0x00 0x00`.

###### Panics
* If string extends outside the memory of the guest with `MemoryAccessViolation`;

---
```rust
abort(msg_ptr: u32, filename_ptr: u32, line: u32, col: u32)
```
Special import kept for compatibility with AssemblyScript contracts. Not called by smart contracts directly, but instead
called by the code generated by AssemblyScript.

# Future Improvements

In the future we can have some of the registers to be on the guest.
For instance a guest can tell the host that it has some pre-allocated memory that it wants to be used for the register,
e.g.

```rust
set_guest_register(register_id: u64, register_ptr: u64, max_register_size: u64)
```
will assign `register_id` to a span of memory on the guest. Host then would also know the size of that buffer on guest
and can throw a panic if there is an attempted copying that exceeds the guest register size.

'''
'''--- specs/Proposals/0008-transaction-refactoring.md ---
- Proposal Name: Batched Transactions
- Start Date: 2019-07-22
- NEP PR: [nearprotocol/neps#0008](https://github.com/nearprotocol/neps/pull/8)

# Summary
[summary]: #summary

Refactor signed transactions and receipts to support batched atomic transactions and data dependency.

# Motivation
[motivation]: #motivation

It simplifies account creation, by supporting batching of multiple transactions together instead of
creating more complicated transaction types.

For example, we want to create a new account with some account balance and one or many access keys, deploy a contract code on it and run an initialization method to restrict access keys permissions for a `proxy` function.

To be able to do this now, we need to have a `CreateAccount` transaction with all the parameters of a new account.
Then we need to handle it in one operation in a runtime code, which might have duplicated code for executing some WASM code with the rollback conditions.

Alternative to this is to execute multiple simple transactions in a batch within the same block.
It has to be done in a row without any commits to the state until the entire batch is completed.
We propose to support this type of transaction batching to simplify the runtime.

Currently callbacks are handled differently from async calls, this NEP simplifies data dependencies and callbacks by unifying them.

# Guide-level explanation
[guide-level-explanation]: #guide-level-explanation

### New transaction and receipts

Previously, in the runtime to produce a block we first executed new signed transactions and then executed received receipts. It resulted in duplicated code that might be shared across similar actions, e.g. function calls for async calls, callbacks and self-calls.
It also increased the complexity of the runtime implementation.

This NEP proposes changing it by first converting all signed transactions into receipts and then either execute them immediately before received receipts, or put them into the list of the new receipts to be routed.
To achieve this, NEP introduces a new message `Action` that represents one of atomic actions, e.g. a function call.
`TransactionBody` is now called just `Transaction`. It contains the list of actions that needs to be performed in a single batch and the information shared across these actions.

`Transaction` contains the following fields
- `signer_id` is an account ID of the transaction signer.
- `public_key` is a public key used to identify the access key and to sign the transaction.
- `nonce` is used to deduplicate and order transactions (per access key).
- `receiver_id` is the account ID of the destination of this transaction. It's where the generated receipt will be routed for execution.
- `action` is the list of actions to perform.

An `Action` can be of the following:
- `CreateAccount` creates a new account with the `receiver_id` account ID. The action fails if the account already exists. `CreateAccount` also grants permission for all subsequent batched action for the newly created account. For example, permission gto deploy code on the new account. Permission details are described in the reference section below. 
- `DeployContract` deploys given binary wasm code on the account. Either the `receiver_id` equals to the `signer_id`, or the batch of actions has started with `CreateAccount`, which granted that permission.
- `FunctionCall` executes a function call on the last deployed contract. The action fails if the account or the code doesn't exist. E.g. if the previous action was `DeployContract`, then the code to execute will be the new deployed contract. `FunctionCall` has `method_name` and `args` to identify method with arguments to call. It also has `gas` and the `deposit`. `gas` is a prepaid amount of gas for this call (the price of gas is determined when a signed transaction is converted to a receipt. `deposit` is the attached deposit balance of NEAR tokens that the contract can spend, e.g. 10 tokens to pay for a crypto-corgi.
- `Transfer` transfers the given `deposit` balance of tokens from the predecessor to the receiver.
- `Stake` stakes the new total `stake` balance with the given `public_key`. The difference in stake is taken from the account's balance (if the new stake is greater than the current one) at the moment when this action is executed, so it's not prepaid. There is no particular reason to stake on behalf of a newly created account, so we may disallow it.
- `DeleteKey` deletes an old `AccessKey` identified by the given `public_key` from the account. Fails if the access key with the given public key doesn't exist. All next batched actions will continue to execute, even if the public key that authorized that transaction was removed.
- `AddKey` adds a new given `AccessKey` identified by a new given `public_key` to the account. Fails if an access key with the given public key already exists. We removed `SwapKeyTransaction`, because it can be replaced with 2 batched actions - delete an old key and add a new key.
- `DeleteAccount` deletes `receiver_id` account if the account doesn't have enough balance to pay the rent, or the `receiver_id` is the `predecessor_id`. Sends the remaining balance to the `beneficiary_id` account.

The new `Receipt` contains the shared information and either one of the receipt actions or a list of actions:
- `predecessor_id` the account ID of the immediate previous sender (predecessor) of this receipt. It can be different from the `signer_id` in some cases, e.g. for promises.
- `receiver_id` the account ID of the current account, on which we need to perform action(s).
- `receipt_id` is a unique ID of this receipt (previously was called `nonce`). It's generated from either the signed transaction or the parent receipt.
- `receipt` can be one of 2 types:
  - `ActionReceipt` is used to perform some actions on the receiver.
  - `DataReceipt` is used when some data needs to be passed from the predecessor to the receiver, e.g. an execution result.

To support promises and callbacks we introduce a concept of cross-shard data sharing with dependencies. Each `ActionReceipt` may have a list of input `data_id`. The execution will not start until all required inputs are received. Once the execution completes and if there is `output_data_id`, it produces a `DataReceipt` that will be routed to the `output_receiver_id`.
 
`ActionReceipt` contains the following fields:
- `signer_id` the account ID of the signer, who signed the transaction.
- `signer_public_key` the public key that the signer used to sign the original signed transaction.
- `output_data_id` is the data ID to create DataReceipt. If it's absent, then the `DataReceipt` is not created.
- `output_receiver_id` is the account ID of the data receiver. It's needed to route `DataReceipt`. It's absent if the DataReceipt is not needed.
- `input_data_id` is the list of data IDs that are required for the execution of the `ActionReceipt`. If some of data IDs is not available when the receipt is received, then the `ActionReceipt` is postponed until all data is available. Once the last `DataReceipt` for the required input data arrives, the action receipt execution is triggered.
- `action` is the list of actions to execute. The execution doesn't need to validate permissions of the actions, but need to fail in some cases. E.g. when the receiver's account doesn't exist and the action acts on the account, or when the action is a function call and the code is not present.

`DataReceipt` contains the following fields:
- `data_id` is the data ID to be used as an input.
- `success` is true if the `ActionReceipt` that generated this `DataReceipt` finished the execution without any failures.
- `data` is the binary data that is returned from the last action of the `ActionReceipt`. Right now, it's empty for all actions except for function calls. For function calls the data is the result of the code execution. But in the future we might introduce non-contract state reads.

Data should be stored at the same shard as the receiver's account, even if the receiver's account doesn't exist.

### Refunds

In case an `ActionReceipt` execution fails the runtime can generate a refund.
We've removed `refund_account_id` from receipts, because the account IDs for refunds can be determined from the `signer_id` and `predecessor_id` in the `ActionReceipt`.
All unused gas and action fees (also measured in gas) are always refunded back to the `signer_id`, because fees are always prepaid by the signer. The gas is converted into tokens using the `gas_price`.
The deposit balances from `FunctionCall` and `Transfer` are refunded back to the `predecessor_id`, because they were deducted from predecessor's account balance.
It's also important to note that the account ID of predecessor for refund receipts is `system`.
It's done to prevent refund loops, e.g. when the account to receive the refund was deleted before the refund arrives. In this case the refund is burned.

If the function call action with the attached `deposit` fails in the middle of the execution, then 2 refund receipts can be generated, one for the unused gas and one for the deposits.
The runtime should combine them into one receipt if `signer_id` and `predecessor_id` is the same.

Example of a receipt for a refund of `42000` atto-tokens to `vasya.near`:
```json
{
    "predecessor_id": "system",
    "receiver_id": "vasya.near",
    "receipt_id": ...,

    "action": {
        "signer_id": "vasya.near",
        "signer_public_key": ...,
        
        "gas_price": "3",
        
        "output_data_id": null,
        "output_receiver_id": null,

        "input_data_id": [],
        
        "action": [
            {
                "transfer": {
                    "deposit": "42000"
                }
            }
        ]
    }
}
```
### Examples

#### Account Creation

To create a new account we can create a new `Transaction`:

```json
{
    "signer_id": "vasya.near",
    "public_key": ...,
    "nonce": 42,
    "receiver_id": "vitalik.vasya.near",

    "action": [
        {
            "create_account": {
            }
        },
        {
            "transfer": {
                "deposit": "19231293123"
            }
        },
        {
            "deploy_contract": {
                "code": ...
            }
        },
        {
            "add_key": {
                "public_key": ...,
                "access_key": ...
            }
        },
        {
            "function_call": {
                "method_name": "init",
                "args": ...,
                "gas": 20000,
                "deposit": "0"
            }
        }
    ]
}
```

This transaction is sent from `vasya.near` signed with a `public_key`.
The receiver is `vitalik.vasya.near`, which is a new account id.
The transaction contains a batch of actions.
First we create the account, then we transaction a few tokens on the new account, then we deploy code on the new account, add a new access key with some given public key, and as a final action initializing the deployed code by calling a method `init` with some arguments.

For this transaction to work `vasya.near` needs to have enough balance on the account cover gas and deposits for all actions at once.
Every action has some associated action gas fee with it. While `transfer` and `function_call` actions need additional balance for deposits and gas (for executions and promises).

Once we validated and subtracted the total amount from `vasya.near` account, this transaction is transformed into a `Receipt`:

```json
{
    "predecessor_id": "vasya.near",
    "receiver_id": "vitalik.vasya.near",
    "receipt_id": ...,

    "action": {
        "signer_id": "vasya.near",
        "signer_public_key": ...,
        
        "gas_price": "3",
        
        "output_data_id": null,
        "output_receiver_id": null,

        "input_data_id": [],
        
        "action": [...]
    }
}
```
In this example the gas price at the moment when the transaction was processed was 3 per gas.
This receipt will be sent to `vitalik.vasya.near`'s shard to be executed.
In case the `vitalik.vasya.near` account already exists, the execution will fail and some amount of prepaid_fees will be refunded back to `vasya.near`.
If the account creation receipt succeeds, it wouldn't create a `DataReceipt`, because `output_data_id` is `null`.
But it will generate a refund receipt for the unused portion of prepaid function call `gas`.

#### Deploy code example

Deploying code with initialization is pretty similar to creating account, except you can't deploy code on someone else account. So the transaction's `receiver_id` has to be the same as the `signer_id`.

#### Simple promise with callback

Let's say the transaction contained a single action which is a function call to `a.contract.near`.
It created a new promise `b.contract.near` and added a callback to itself.
Once the execution completes it will result in the following new receipts:

The receipt for the new promise towards `b.contract.near`
```json
{
    "predecessor_id": "a.contract.near",
    "receiver_id": "b.contract.near",
    "receipt_id": ...,

    "action": {
        "signer_id": "vasya.near",
        "signer_public_key": ...,
        
        "gas_price": "3",

        "output_data_id": "data_123_1",
        "output_receiver_id": "a.contract.near",

        "input_data_id": [],
        
        "action": [
            {
                "function_call": {
                    "method_name": "sum",
                    "args": ...,
                    "gas": 10000,
                    "deposit": "0"
                }
            }
        ]
    }
}
```
Interesting details:
- `signer_id` is still `vasya.near`, because it's the account that initialized the transaction, but not the creator of the promise.
- `output_data_id` contains some unique data ID. In this example we used `data_123_1`.
- `output_receiver_id` indicates where to route the result of the execution.

The other receipt is for the callback which will stay in the same shard.
```json
{
    "predecessor_id": "a.contract.near",
    "receiver_id": "a.contract.near",
    "receipt_id": ...,

    "action": {
        "signer_id": "vasya.near",
        "signer_public_key": ...,
        
        "gas_price": "3",

        "output_data_id": null,
        "output_receiver_id": null,

        "input_data_id": ["data_123_1"],
        
        "action": [
            {
                "function_call": {
                    "method_name": "process_sum",
                    "args": ...,
                    "gas": 10000,
                    "deposit": "0"
                }
            }
        ]
    }
}
```
It looks very similar to the new promise, but instead of `output_data_id` it has an `input_data_id`.
This action receipt will be postponed until the other receipt is routed, executed and generated a data receipt.

Once the new promise receipt is successfully executed, it will generate the following receipt:
```json
{
    "predecessor_id": "b.contract.near",
    "receiver_id": "a.contract.near",
    "receipt_id": ...,

    "data": {
        "data_id": "data_123_1",
        "success": true,
        "data": ...
    }
}
```
It contains the data ID `data_123_1` and routed to the `a.contract.near`.

Let's say the callback receipt was processed and postponed, then this data receipt will trigger execution of the callback receipt, because the all input data is now available.

#### Remote callback with 2 joined promises, with a callback on itself

Let's say `a.contract.near` wants to call `b.contract.near` and `c.contract.near`, and send the result to `d.contract.near` for joining before processing the result on itself.
It will generate 2 receipts for new promises, 1 receipt for the remote callback and 1 receipt for the callback on itself.

Part of the receipt (#1) for the promise towards `b.contract.near`:
```
...
"output_data_id": "data_123_b",
"output_receiver_id": "d.contract.near",

"input_data_id": [],
...
```

Part of the receipt (#2) for the promise towards `c.contract.near`:
```
...
"output_data_id": "data_321_c",
"output_receiver_id": "d.contract.near",

"input_data_id": [],
...
```

The receipt (#3) for the remote callback that has to be executed on `d.contract.near` with data from `b.contract.near` and `c.contract.near`:
```json
{
    "predecessor_id": "a.contract.near",
    "receiver_id": "d.contract.near",
    "receipt_id": ...,

    "action": {
        "signer_id": "vasya.near",
        "signer_public_key": ...,
        
        "gas_price": "3",

        "output_data_id": "bla_543",
        "output_receiver_id": "a.contract.near",

        "input_data_id": ["data_123_b", "data_321_c"],
        
        "action": [
            {
                "function_call": {
                    "method_name": "join_data",
                    "args": ...,
                    "gas": 10000,
                    "deposit": "0"
                }
            }
        ]
    }
}
```
It also has the `output_data_id` and `output_receiver_id` that is specified back towards `a.contract.near`.

And finally the part of the receipt (#4) for the local callback on `a.contract.near`:
```
...
"output_data_id": null,
"output_receiver_id": null,

"input_data_id": ["bla_543"],
...
```

For all of this to execute the first 3 receipts needs to go to the corresponding shards and be processed.
If for some reason the data arrived before the corresponding action receipt, then this data will be hold there until the action receipt arrives.
An example for this is if the receipt #3 is delayed for some reason, while the receipt #2 was processed and generated a data receipt towards `d.contract.near` which arrived before #3. 

Also if any of the function calls fail, the receipt still going to generate a new `DataReceipt` because it has `output_data_id` and `output_receiver_id`. Here is an example of a DataReceipt for a failed execution:
```json
{
    "predecessor_id": "b.contract.near",
    "receiver_id": "d.contract.near",
    "receipt_id": ...,

    "data": {
        "data_id": "data_123_b",
        "success": false,
        "data": null
    }
}
```

#### Swap Key example

Since there are no swap key action, we can just batch 2 actions together. One for adding a new key and one for deleting the old key. The actual order is not important if the public keys are different, but if the public key is the same then you need to first delete the old key and only after this add a new key.

# Reference-level explanation
[reference-level-explanation]: #reference-level-explanation

### Updated protobufs

**public_key.proto**
```proto
syntax = "proto3";

message PublicKey {
    enum KeyType {
        ED25519 = 0;
    }
    KeyType key_type = 1;
    bytes data = 2;
}
```

**signed_transaction.proto**
```proto
syntax = "proto3";

import "access_key.proto";
import "public_key.proto";
import "uint128.proto";

message Action {
    message CreateAccount {
        // empty
    }

    message DeployContract {
        // Binary wasm code
        bytes code = 1;
    }

    message FunctionCall {
        string method_name = 1;
        bytes args = 2;
        uint64 gas = 3;
        Uint128 deposit = 4;
    }

    message Transfer {
        Uint128 deposit = 1;
    }

    message Stake {
        // New total stake
        Uint128 stake = 1;
        PublicKey public_key = 2;
    }

    message AddKey {
        PublicKey public_key = 1;
        AccessKey access_key = 2;
    }

    message DeleteKey {
        PublicKey public_key = 1;
    }

    message DeleteAccount {
        // The account ID which would receive the remaining funds.
        string beneficiary_id = 1;
    }

    oneof action {
        CreateAccount create_account = 1;
        DeployContract deploy_contract = 2;
        FunctionCall function_call = 3;
        Transfer transfer = 4;
        Stake stake = 5;
        AddKey add_key = 6;
        DeleteKey delete_key = 7;
        DeleteAccount delete_account = 8;
    }
}

message Transaction {
    string signer_id = 1;
    PublicKey public_key = 2;
    uint64 nonce = 3;
    string receiver_id = 4;

    repeated Action actions = 5;
}

message SignedTransaction {
    bytes signature = 1;

    Transaction transaction = 2;
}

```

**receipt.proto**
```proto
syntax = "proto3";

import "public_key.proto";
import "signed_transaction.proto";
import "uint128.proto";
import "wrappers.proto";

message DataReceipt {
    bytes data_id = 1;
    google.protobuf.BytesValue data = 2;
}

message ActionReceipt {
    message DataReceiver {
        bytes data_id = 1;
        string receiver_id = 2;
    }

    string signer_id = 1;
    PublicKey signer_public_key = 2;

    // The price of gas is determined when the original SignedTransaction is
    // converted into the Receipt. It's used for refunds.
    Uint128 gas_price = 3;

    // List of data receivers where to route the output data
    // (e.g. result of execution)
    repeated DataReceiver output_data_receivers = 4;

    // Ordered list of data ID to provide as input results.
    repeated bytes input_data_ids = 5;

    repeated Action actions = 6;
}

message Receipt {
    string predecessor_id = 1;
    string receiver_id = 2;
    bytes receipt_id = 3;

    oneof receipt {
        ActionReceipt action = 4;
        DataReceipt data = 5;
    }
}

```

### Validation and Permissions

To validate `SignedTransaction` we need to do the following:
- verify transaction hash against signature and the given public key
- verify `signed_id` is a valid account ID
- verify `receiver_id` is a valid account ID
- fetch account for the given `signed_id`
- fetch access key for the given `signed_id` and `public_key`
- verify access key `nonce`
- get the current price of gas
- compute total required balance for the transaction, including action fees (in gas), deposits and prepaid gas.
- verify account balance is larger than required balance.
- verify actions are allowed by the access key permissions, e.g. if the access key only allows function call, then need to verify receiver, method name and allowance.

Before we convert a `Transaction` to a new `ActionReceipt`, we don't need to validate permissions of the actions or their order. It's checked during `ActionReceipt` execution.

`ActionReceipt` doesn't need to be validated before we start executing it.
The actions in the `ActionReceipt` are executed in given order.
Each action has to check for the validity before execution.

Since `CreateAccount` gives permissions to perform actions on the new account, like it's your account, we introduce temporary variable `actor_id`.
At the beginning of the execution `actor_id` is set to the value of `predecessor_id`. 

Validation rules for actions:
- `CreateAccount`
  - check the account `receiver_id` doesn't exist
- `DeployContract`, `Stake`, `AddKey`, `DeleteKey`
  - check the account `receiver_id` exists
  - check `actor_id` equals to `receiver_id`
- `FunctionCall`, `Transfer`
  - check the account `receiver_id` exists

When `CreateAccount` completes, the `actor_id` changes to `receiver_id`.
NOTE: When we implement `DeleteAccount` action, its completion will change `actor_id` back to `predecessor_id`.

Once validated, each action might still do some additional checks, e.g. `FunctionCall` might check that the code exists and `method_name` is valid.

### `DataReceipt` generation rules

If `ActionReceipt` doesn't have `output_data_id` and `output_receiver_id`, then `DataReceipt` is not generated.
Otherwise, `DataReceipt` depends on the last action of `ActionReceipt`. There are 4 different outcomes:

1. Last action is invalid, failed or the execution stopped on some previous action.
    - `DataReceipt` is generated
    - `data_id` is set to the value of `output_data_id` from the `ActionReceipt`
    - `success` is set to `false`
    - `data` is set to `null`
2. Last action is valid and finished successfully, but it's not a `FunctionCall`. Or a `FunctionCall`, that returned no value.
    - `DataReceipt` is generated
    - `data_id` is set to the value of `output_data_id` from the `ActionReceipt`
    - `success` is set to `true`
    - `data` is set to `null`
3. Last action is `FunctionCall`, and the result of the execution is some value.
    - `DataReceipt` is generated
    - `data_id` is set to the value of `output_data_id` from the `ActionReceipt`
    - `success` is set to `true`
    - `data` is set to the bytes of the returned value
4. Last action is `FunctionCall`, and the result of the execution is a promise ID
    - `DataReceipt` is NOT generated, because we don't have the value for the execution.
    - Instead we should modify the `ActionReceipt` generated for the returned promise ID.
    - In this receipt the `output_data_id` should be set to the `output_data_id` of the action receipt that we just finished executed.
    - `output_receiver_id` is set the same way as `output_data_id` described above.

#### Example for the case #4

A user called contract `a.app`, which called `b.app` and expect a callback to `a.app`. So `a.app` generated 2 receipts:
Towards `b.app`:
```
...
"receiver_id": "b.app",
...
"output_data_id": "data_a",
"output_receiver_id": "a.app",

"input_data_id": [],
...
```
Towards itself:
```
...
"receiver_id": "a.app",
...
"output_data_id": "null",
"output_receiver_id": "null",

"input_data_id": ["data_a"],
...
```

Now let's say `b.app` doesn't actually do the work, but it's just a middleman that charges some fees before redirecting the work to the actual contract `c.app`.
In this case `b.app` creates a new promise by calling `c.app` and returns it instead of data.
This triggers the case #4, so it doesn't generate the data receipt yet, instead it creates an action receipt which would look like that:
```
...
"receiver_id": "c.app",
...
"output_data_id": "data_a",
"output_receiver_id": "a.app",

"input_data_id": [],
...
```
Once it completes, it would send a data receipt to `a.app` (unless `c.app` is a middleman as well). 

But let's say `b.app` doesn't want to reveal it's a middleman.
In this case it would call `c.app`, but instead of returning data directly to `a.app`, `b.app` wants to wrap the result into some nice wrapper.
Then instead of returning the promise to `c.app`, `b.app` would attach a callback to itself and return the promise ID of that callback. Here is how it would look: 
Towards `c.app`:
```
...
"receiver_id": "c.app",
...
"output_data_id": "data_b",
"output_receiver_id": "b.app",

"input_data_id": [],
...
```

So when the callback receipt first generated, it looks like this:
```
...
"receiver_id": "b.app",
...
"output_data_id": "null",
"output_receiver_id": "null",

"input_data_id": ["data_b"],
...
```
But once, its promise ID is returned with `promise_return`, it is updated to return data towards `a.app`:
```
...
"receiver_id": "b.app",
...
"output_data_id": "data_a",
"output_receiver_id": "a.app",

"input_data_id": ["data_b"],
...
```

### Data storage

We should maintain the following persistent maps per account (`receiver_id`)
- Received data: `data_id -> (success, data)`
- Postponed receipts: `receipt_id -> Receipt` 
- Pending input data: `data_id -> receipt_id`

When `ActionReceipt` is received, the runtime iterates through the list of `input_data_id`.
If `input_data_id` is not present in the received data map, then a pair `(input_data_id, receipt_id)` is added to pending input data map and the receipt marked as postponed.
At the end of the iteration if the receipt is marked as postponed, then it's added to map of postponed receipts keyed by `receipt_id`.
If all `input_data_id`s are available in the received data, then `ActionReceipt` is executed.

When `DataReceipt` is received, a pair `(data_id, (success, data))` is added to the received data map.
Then the runtime checks if `data_id` is present in the pending input data.
If it's present, then `data_id` is removed from the pending input data and the corresponding `ActionReceipt` is checked again (see above).

NOTE: we can optimize by not storing `data_id` in the received data map when the pending input data is present and it was the final input data item in the receipt.

When `ActionReceipt` is executed, the runtime deletes all `input_data_id` from the received data map.
The `receipt_id` is deleted from the postponed receipts map (if present).  

### TODO Receipt execution

- input data is available to all function calls in the batched actions
- TODODO

# Future possibilities
[future-possibilities]: #future-possibilities

- We can add `or` based data selector, so data storage can be affected. 

'''
'''--- specs/Proposals/0013-system-methods.md ---
- Proposal Name: System methods in runtime API
- Start Date: 2019-09-03
- NEP PR: [nearprotocol/neps#0013](https://github.com/nearprotocol/neps/pull/0013)

# Summary
[summary]: #summary

Adds new ability for contracts to perform some system functions:
- create new accounts (with possible code deploy and initialization)
- deploy new code (or redeploying code for upgrades)
- batched function calls
- transfer money
- stake
- add key
- delete key
- delete account

# Motivation
[motivation]: #motivation

Contracts should have the ability to create new accounts, transfer money without calling code and
stake. It will enable full functionality of contract-based accounts.

# Reference
[reference]: #reference

We introduce additional promise APIs to support batched actions.

Firstly, we enable ability to create empty promises without any action. They act similarly to
traditional promises, but don't contain function call action.

Secondly, we add API to append individual actions to promises. For example we can create
a promise with a function_call first using `promise_create` and then attach a transfer action on top
of this promise. So the transfer will only deposit tokens if the function call succeeds. Another example
is how we create accounts now using batched actions. To create a new account, we create a transaction with
the following actions: `create_account`, `transfer`, `add_key`. It creates a new account, deposit some funds on it and the adds a new key.

For more examples see NEP#8: https://github.com/nearprotocol/NEPs/pull/8/files?short_path=15b6752#diff-15b6752ec7d78e7b85b8c7de4a19cbd4

**NOTE: The existing promise API is a special case of the batched promise API.**
- Calling `promise_batch_create` and then `promise_batch_action_function_call` will produce the same promise as calling `promise_create` directly.
- Calling `promise_batch_then` and then `promise_batch_action_function_call` will produce the same promise as calling `promise_then` directly.

## Promises API
[promises-api]: #promises-api

```rust
promise_batch_create(account_id_len: u64, account_id_ptr: u64) -> u64
```
Creates a new promise towards given `account_id` without any actions attached to it.

###### Panics
* If `account_id_len + account_id_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.

###### Returns
* Index of the new promise that uniquely identifies it within the current execution of the method.

---

```rust
promise_batch_then(promise_idx: u64, account_id_len: u64, account_id_ptr: u64) -> u64            
```
Attaches a new empty promise that is executed after promise pointed by `promise_idx` is complete.

###### Panics
* If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
* If `account_id_len + account_id_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.

###### Returns
* Index of the new promise that uniquely identifies it within the current execution of the method.

---

```rust
promise_batch_action_create_account(promise_idx: u64)
```
Appends `CreateAccount` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-15b6752ec7d78e7b85b8c7de4a19cbd4R48

###### Panics
* If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
* If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.

---

```rust
promise_batch_action_deploy_contract(promise_idx: u64, code_len: u64, code_ptr: u64)
```
Appends `DeployContract` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-15b6752ec7d78e7b85b8c7de4a19cbd4R49

###### Panics
* If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
* If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
* If `code_len + code_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.

---

```rust
promise_batch_action_function_call(promise_idx: u64,
                                   method_name_len: u64,
                                   method_name_ptr: u64,
                                   arguments_len: u64,
                                   arguments_ptr: u64,
                                   amount_ptr: u64,
                                   gas: u64)
```
Appends `FunctionCall` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-15b6752ec7d78e7b85b8c7de4a19cbd4R50

*NOTE: Calling `promise_batch_create` and then `promise_batch_action_function_call` will produce the same promise as calling `promise_create` directly.*

###### Panics
* If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
* If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
* If `account_id_len + account_id_ptr` or `method_name_len + method_name_ptr` or `arguments_len + arguments_ptr`
or `amount_ptr + 16` points outside the memory of the guest or host, with `MemoryAccessViolation`.

---

```rust
promise_batch_action_transfer(promise_idx: u64, amount_ptr: u64)
```
Appends `Transfer` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-15b6752ec7d78e7b85b8c7de4a19cbd4R51

###### Panics
* If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
* If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
* If `amount_ptr + 16` points outside the memory of the guest or host, with `MemoryAccessViolation`.

---

```rust
promise_batch_action_stake(promise_idx: u64,
                           amount_ptr: u64,
                           public_key_len: u64,
                           public_key_ptr: u64)
```
Appends `Stake` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-15b6752ec7d78e7b85b8c7de4a19cbd4R52

###### Panics
* If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
* If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
* If the given public key is not a valid public key (e.g. wrong length) `InvalidPublicKey`.
* If `amount_ptr + 16` or `public_key_len + public_key_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.

---

```rust
promise_batch_action_add_key_with_full_access(promise_idx: u64,
                                              public_key_len: u64,
                                              public_key_ptr: u64,
                                              nonce: u64)
```
Appends `AddKey` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-15b6752ec7d78e7b85b8c7de4a19cbd4R54
The access key will have `FullAccess` permission, details: https://github.com/nearprotocol/NEPs/blob/master/text/0005-access-keys.md#guide-level-explanation

###### Panics
* If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
* If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
* If the given public key is not a valid public key (e.g. wrong length) `InvalidPublicKey`.
* If `public_key_len + public_key_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.

---

```rust
promise_batch_action_add_key_with_function_call(promise_idx: u64,
                                                public_key_len: u64,
                                                public_key_ptr: u64,
                                                nonce: u64,
                                                allowance_ptr: u64,
                                                receiver_id_len: u64,
                                                receiver_id_ptr: u64,
                                                method_names_len: u64,
                                                method_names_ptr: u64)
```
Appends `AddKey` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-156752ec7d78e7b85b8c7de4a19cbd4R54
The access key will have `FunctionCall` permission, details: https://github.com/nearprotocol/NEPs/blob/master/text/0005-access-keys.md#guide-level-explanation

* If the `allowance` value (not the pointer) is `0`, the allowance is set to `None` (which means unlimited allowance). And positive value represents a `Some(...)` allowance.
* Given `method_names` is a `utf-8` string with `,` used as a separator. The vm will split the given string into a vector of strings.

###### Panics
* If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
* If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
* If the given public key is not a valid public key (e.g. wrong length) `InvalidPublicKey`.
* if `method_names` is not a valid `utf-8` string, fails with `BadUTF8`.
* If `public_key_len + public_key_ptr`, `allowance_ptr + 16`, `receiver_id_len + receiver_id_ptr` or 
`method_names_len + method_names_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.

---

```rust
promise_batch_action_delete_key(promise_idx: u64,
                                public_key_len: u64,
                                public_key_ptr: u64)
```
Appends `DeleteKey` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-15b6752ec7d78e7b85b8c7de4a19cbd4R55

###### Panics
* If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
* If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
* If the given public key is not a valid public key (e.g. wrong length) `InvalidPublicKey`.
* If `public_key_len + public_key_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.

---

```rust
promise_batch_action_delete_account(promise_idx: u64,
                                    beneficiary_id_len: u64,
                                    beneficiary_id_ptr: u64)
```
Appends `DeleteAccount` action to the batch of actions for the given promise pointed by `promise_idx`.
Action is used to delete an account. It can be performed on a newly created account, on your own account or an account with
insufficient funds to pay rent. Takes `beneficiary_id` to indicate where to send the remaining funds.

###### Panics
* If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
* If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
* If `beneficiary_id_len + beneficiary_id_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.

---

'''
'''--- specs/Proposals/0017-execution-outcome.md ---
- Proposal Name: Execution Outcome
- Start Date: 2019-09-23
- NEP PR: [nearprotocol/neps#0017](https://github.com/nearprotocol/neps/pull/17)
- Issue(s): https://github.com/nearprotocol/nearcore/issues/1307

# Summary
[summary]: #summary

Refactor current TransactionResult/TransactionLog/FinalTransactionResult to improve naming, deduplicate results and provide
results resolution by the front-end for async-calls.

# Motivation
[motivation]: #motivation

Right now the contract calls 2 promises and doesn't return a value, the front-end will return one of the promises results as an execution result. It's because we return the last result from final transaction result. With the current API, it's impossible to know what is the actual result of the contract execution.

# Guide-level explanation
[guide-level-explanation]: #guide-level-explanation

Here is the proposed Rust structures. Highlights:
- Rename `TransactionResult` to `ExecutionOutcome` since it's used for transactions and receipts
- Rename `TransactionStatus` and merge it with result into `ExecutionResult`.
- In case of success `ExecutionStatus` can either be a value of a receipt_id. This helps to resolve the
  actual returned value by the transaction from async calls, e.g. `A->B->A->C` should return result from `C`.
  Also in distinguish result in case of forks, e.g. `A` calls `B` and calls `C`, but returns a result from `B`.
  Currently there is no way to know.
- Rename `TransactionLog` to `ExecutionOutcomeWithId` which is `ExecutionOutcome` with receipt_id
  or transaction hash. Probably needs a better name.
- Rename `FinalTransactionResult` to `FinalExecutionOutcome`.
- Update `FinalTransactionStatus` to `FinalExecutionStatus`.
- Provide final resolved returned result directly, so the front-end doesn't need to traverse the receipt tree.
  We may also expose the error directly in the execution result.
- Split into final outcome into transaction and receipts.

### NEW

- The `FinalExecutionStatus` contains the early result even if some dependent receipts are not yet executed. Most function call
transactions contain 2 receipts. The 1st receipt is execution, the 2nd is the refund. Before this change, the transaction was
not resolved until the 2nd receipt was executed. After this change, the `FinalExecutionOutcome` will have
`FinalTransactionStatus::SuccessValue("")` after the execution of the 1st receipt, while the 2nd receipt execution outcome status is still `Pending`.
This helps to get the transaction result on the front-end faster without waiting for all refunds.

```rust
pub struct ExecutionOutcome {
    /// Execution status. Contains the result in case of successful execution.
    pub status: ExecutionStatus,
    /// Logs from this transaction or receipt.
    pub logs: Vec<LogEntry>,
    /// Receipt IDs generated by this transaction or receipt.
    pub receipt_ids: Vec<CryptoHash>,
    /// The amount of the gas burnt by the given transaction or receipt.
    pub gas_burnt: Gas,
}

/// The status of execution for a transaction or a receipt.
pub enum ExecutionStatus {
    /// The execution is pending.
    Pending,
    /// The execution has failed.
    Failure,
    /// The final action succeeded and returned some value or an empty vec.
    SuccessValue(Vec<u8>),
    /// The final action of the receipt returned a promise or the signed transaction was converted
    /// to a receipt. Contains the receipt_id of the generated receipt.
    SuccessReceiptId(CryptoHash),
}

// TODO: Need a better name
pub struct ExecutionOutcomeWithId {
    /// The transaction hash or the receipt ID.
    pub id: CryptoHash,
    pub outcome: ExecutionOutcome,
}

#[derive(Serialize, Deserialize, PartialEq, Eq, Debug, Clone)]
pub enum FinalExecutionStatus {
    /// The execution has not yet started.
    NotStarted,
    /// The execution has started and still going.
    Started,
    /// The execution has failed.
    Failure,
    /// The execution has succeeded and returned some value or an empty vec in base64.
    SuccessValue(String),
}

pub struct FinalExecutionOutcome {
    /// Execution status. Contains the result in case of successful execution.
    pub status: FinalExecutionStatus,
    /// The execution outcome of the signed transaction.
    pub transaction: ExecutionOutcomeWithId,
    /// The execution outcome of receipts.
    pub receipts: Vec<ExecutionOutcomeWithId>,
}
```

'''
'''--- specs/Proposals/0018-view-change-method.md ---
- Proposal Name: Improve view/change methods in contracts
- Start Date: 2019-09-26
- NEP PR: [nearprotocol/neps#0000](https://github.com/nearprotocol/neps/pull/18)

# Summary
[summary]: #summary

Currently the separation between view methods and change methods on the contract level is not very well defined and causes
quite a bit of confusion among developers. We propose in the NEP to elucidate the difference between view methods
and change methods and how they should be used. In short, we would like to restrict view methods from accessing certain
context variables and do not distinguish between view and change methods on the contract level. Developers have the option
to differentiate between the two in frontend or through near-shell.

# Motivation
[motivation]: #motivation

From the feedback we received it seems that developers are confused by the results they get from view calls, which are
mainly caused by the fact that some binding methods such as `signer_account_id`, `current_account_id`, `attached_deposit`
do not make sense in a view call. 
To avoid such confusion and create better developer experience, it is better if those context variables
are prohibited in view calls.

# Guide-level explanation
[guide-level-explanation]: #guide-level-explanation

Among binding methods that we expose from nearcore, some do make sense in a view call, such as `block_index`,
while the majority does not. 
Here we explicitly list the methods are not allowed in a view call and, in case they are invoked, the contract will panic with
`<method_name> is not allowed in view calls`.

The following methods are prohibited:
  * `signer_account_id`
  * `signer_account_pk`
  * `predecessor_account_id`
  * `attached_deposit`
  * `prepaid_gas`
  * `used_gas`
  * `promise_create`
  * `promise_then`
  * `promise_and`
  * `promise_batch_create`
  * `promise_batch_then`
  * `promise_batch_action_create_account`
  * `promise_batch_action_deploy_account`
  * `promise_batch_action_function_call`
  * `promise_batch_action_transfer`
  * `promise_batch_action_stake`
  * `promise_batch_action_add_key_with_full_access`
  * `promise_batch_action_add_key_with_function_call`
  * `promise_batch_action_delete_key`
  * `promise_batch_action_delete_account`
  * `promise_results_count`
  * `promise_result`
  * `promise_return`

From the developer perspective, if they want to call view functions from command line on some contract, they would just
call `near view <contractName> <methodName> [args]`. If they are building an app and want to call a view function from the
frontend, they should follow the same pattern as we have right now, specifying `viewMethods` and `changeMethods` in
`loadContract`.

# Reference-level explanation
[reference-level-explanation]: #reference-level-explanation

To implement this NEP, we need to change how binding methods are handled in runtime. More specifically, we can rename
`free_of_charge` to `is_view` and use that to indicate whether we are processing a view call. In addition we can add
 a variant `ProhibitedInView(String)` to `HostError` so that if `is_view` is true,
then all the access to the prohibited
methods will error with `HostError::ProhibitedInView(<method_name>)`.

# Drawbacks
[drawbacks]: #drawbacks

In terms of not allowing context variables, I don't see any drawback as those variables do not have a proper meaning
in view functions. For alternatives, see the section below.

# Rationale and alternatives
[rationale-and-alternatives]: #rationale-and-alternatives

This design is very simple and requires very little change to the existing infrastructure. An alternative solution is
to distinguish between view methods and change methods on the contract level. One way to do it is through decorators, as
described [here](https://github.com/nearprotocol/NEPs/pull/3). However, enforcing such distinction on the contract level
requires much more work and is not currently feasible for Rust contracts. 

# Unresolved questions
[unresolved-questions]: #unresolved-questions

# Future possibilities
[future-possibilities]: #future-possibilities

'''
'''--- specs/Proposals/0033-economics.md ---
- Proposal Name: NEAR economics specs
- Start Date: 2020-02-23
- NEP PR: [nearprotocol/neps#0000](https://github.com/nearprotocol/NEPs/pull/33)
- Issue(s): link to relevant issues in relevant repos (not required).

# Summary
[summary]: #summary

Adding economics specification for NEAR Protocol based on the economics paper - https://nearprotocol.com/papers/economics-in-sharded-blockchain/

# Motivation
[motivation]: #motivation

Currently, the specification is defined by the implementation in https://github.com/nearprotocol/nearcore. This codifies all the parameters and formulas and defines main concepts.

# Guide-level explanation
[guide-level-explanation]: #guide-level-explanation

The goal is to build a set of specs about NEAR token economics, for analysts and adopters, to simplify their understanding of the protocol and its game-theoretical dynamics.
This initial release will be oriented to validators and staking in general.

# Reference-level explanation
[reference-level-explanation]: #reference-level-explanation

This part of the documentation is self-contained. It may provide material for third-party research papers, and spreadsheet analysis.

# Drawbacks
[drawbacks]: #drawbacks

We might just put this in the NEAR docs.

# Rationale and alternatives
[rationale-and-alternatives]: #rationale-and-alternatives

# Unresolved questions
[unresolved-questions]: #unresolved-questions

# Future possibilities
[future-possibilities]: #future-possibilities

This is an open document which may be used by NEAR's community to pull request a new economic policy. Having a formal document also for non-technical aspects opens new opportunities for the governance. 

'''
'''--- specs/Proposals/README.md ---
## Proposals

This section contains the NEAR Enhancement Proposals (NEPs) that cover a fleshed out concept for NEAR. Before an idea is turned into a proposal, it will be fleshed out and discussed on the [NEAR Governance Forum](https://gov.near.org).

These subcategories are great places to start such a discussion:

- [Standards](https://gov.near.org/c/dev/standards/29) — examples might include new protocol standards, token standards, etc.
- [Proposals](https://gov.near.org/c/dev/proposals/68) — ecosystem proposals that may touch tooling, node experience, wallet usage, and so on.

Once and idea has been thoroughly discussed and vetted, a pull request should be made according to the instructions at the [NEP repository](https://github.com/near/NEPs).

The proposals shown in this section have been merged and exist to offer as much information as possible including historical motivations, drawbacks, approaches, future concerns, etc.

Once a proposal has been fully implemented it can be added as a specification, but will remain a proposal until that time.
'''
'''--- specs/README.md ---
# The NEAR Protocol Specification

Near Protocol es el protocolo escalable de blockchain.

Para una mejor comprensión, lea los siguientes documentos en orden numérico.
1. [Terminología](Terminology.md)
2. [Estructuras de datos](DataStructures/README.md)
3. [Arquitectura](Architecture.md)
4. [Especificación de cadena](ChainSpec/README.md)
5. [Especificación de tiempo de ejecución](RuntimeSpec/README.md)
6. [Especificación de red](NetworkSpec/NetworkSpec.md)  
7. [Economía](Economics/README.md)

## Estándares

Los estándares como “Fungible Token Standard” (estándar del token fungible) pueden ser encontrados en la página de [Estándares](Standards/README.md).

'''
'''--- specs/Runtime.md ---
# Runtime

'''
'''--- specs/RuntimeSpec/AccountStorage.md ---
# Account Receipt Storage

There is a definition of all the keys and values we store in the Account Storage

## Received data

*key = `receiver_id: String`,`data_id: CryptoHash`*
*value = `Option<Vec<u8>>`*

Runtime saves incoming data from [DataReceipt](Receipts.md#data) until every [input_data_ids](Receipts.md#input_data_ids) in [postponed receipt](#Postponed-receipts) [ActionReceipt](Receipts.md#ActionReceipt) for `receiver_id` account is satisfied.

## Postponed receipts

For each awaited `DataReceipt` we store

*key = `receiver_id`,`data_id`*
*value = `receipt_id`*

Runtime saves incoming [ActionReceipt](Receipts.md#ActionReceipt) until all ``

'''
'''--- specs/RuntimeSpec/Actions.md ---
# Acciones

Hay una variedad de tipos de acción en Near:

```rust
pub enum Action {
    CreateAccount(CreateAccountAction),
    DeployContract(DeployContractAction),
    FunctionCall(FunctionCallAction),
    Transfer(TransferAction),
    Stake(StakeAction),
    AddKey(AddKeyAction),
    DeleteKey(DeleteKeyAction),
    DeleteAccount(DeleteAccountAction),
}
```

Cada transacción consiste de una lista de acciones a ser realizadas en el lado del `receiver_id`. Dado que las transacciones son convertidas
a recibos primero cuando estas son procesadas, nos preocuparemos principalmente con las acciones en el contexto del procesamiento
de recibos.
 
Para las siguientes acciones, se requiere que `predecessor_id` y `receiver_id` sean iguales:
- `DeployContract`
- `Stake`
- `AddKey`
- `DeleteKey`
- `DeleteAccount`

NOTA: si la primera acción en la lista de acciones es `CreateAccount`, `predecessor_id` se vuelve `receiver_id`
para el resto de las acciones hasta llegar a `DeleteAccount`. Esto da el permiso a otra cuenta para actuar en la cuenta recién creada.

## CreateAccountAction

```rust
pub struct CreateAccountAction {}
```

Si `receiver_id` tiene una longitud de 64, este id de cuanta será considerado como `hex(public_key)`, lo que significa que la creación de la cuenta solo tiene 
éxito si esta viene seguida de la acción `AddKey(public_key)`.

**Resultados**:
- crea una cuenta con `id` = `receiver_id`
- establece el `storage_usage` de una cuenta a `account_cost` (configuración de génesis)

### Errores

**Errores de ejecución**:
- Si la acción trata de crear una cuenta de nivel alto la cual la longitud no es mayor a 32 carácteres, y `predecessor_id` no es
`registrar_account_id`, el cual es definido por el protocolo, el siguiente error será regresado
```rust
/// Un ID de cuenta de alto nivel solo puede ser creado por registrar.
CreateAccountOnlyByRegistrar {
    account_id: AccountId,
    registrar_account_id: AccountId,
    predecessor_id: AccountId,
}
```

- Si la acción trata de crear una cuenta de alto nivel o una subcuenta de `predecessor_id`,
el siguiente error será regresado
```rust
/// Una cuenta recién creada debe estar bajo un espacio de nombres de la cuenta del creador
CreateAccountNotAllowed { account_id: AccountId, predecessor_id: AccountId },
```

## DeployContractAction

```rust
pub struct DeployContractAction {
    pub code: Vec<u8>
}
```

**Salida**:
- establece el código del contrato para la cuenta

### Errores

**Error de validación**:
- si la longitud de `code` excede `max_contract_size`, el cual es un parámetro génesis, el siguiente error será regresado:
```rust
/// El tamaño del código del contrato excede el límite en una acción DeployContract.
ContractSizeExceeded { size: u64, limit: u64 },
```

**Error de ejecución**:
- Si el estado o el almacenamiento se corrompe, tal vez regrese `StorageError`.

## FunctionCallAction

```rust
pub struct FunctionCallAction {
    /// Nombre de la función Wasm exportada
    pub method_name: String,
    /// Argumentos serializados
    pub args: Vec<u8>,
    /// Gas prepagado (gas_limit) para una llamada de función
    pub gas: Gas,
    /// Cantidad de tokens a transferir a receiver_id
    pub deposit: Balance,
}
```

Llama a un método de un contrato en particular. Vea los [detalles](./FunctionCall.md).

## TransferAction

```rust
pub struct TransferAction {
    /// Cantidad de tokens a transferir a receiver_id
    pub deposit: Balance,
}
```

**Salida**:
- transfiere el monto especificado en `deposit` de `predecessor_id` a una cuenta `receiver_id`

### Errores

**Error de ejecución**:
- Si el monto del depósito más el monto existente en la cuenta receptora excede `u128::MAX`,
un error `StorageInconsistentState("Account balance integer overflow")` será regresado.

## StakeAction

```rust
pub struct StakeAction {
    // Cantidad de tokens a stakear
    pub stake: Balance,
    // Esta llave pública es una llave pública del nodo validador
    pub public_key: PublicKey,
}
```

**Salida**:
- Una propuesta del validador que contiene la llave de acceso pública del staking y el monto dirigido al staking es generado y será incluído
en el próximo bloque.

### Errores

**Errores de validación**:
- Si `public_key` no es una clave ed25519 compatible con ristretto, el siguiente error será regresado:
```rust
/// Intento de staking con una llave pública que no es convertible a ristretto.
UnsuitableStakingKey { public_key: PublicKey },
```

**Errores de ejecución**:
- Si una cuenta no ha hecho staking pero trata de hacer unstaking, el siguiente error será regresado:
```rust
/// La cuenta no ha sido stakeada, pero trata de unstakear
TriesToUnstake { account_id: AccountId },
```

- Si una cuenta trata de stakear más de la cantidad de tokens que tiene, el siguiente error será regresado:
```rust
/// La cuenta no tiene el balance suficiente para incrementar el stake.
TriesToStake {
    account_id: AccountId,
    stake: Balance,
    locked: Balance,
    balance: Balance,
}
```

- Si la cantidad stakeada está por debajo del umbral mínimo de stake, el siguiente error será regresado:
```rust
InsufficientStake {
    account_id: AccountId,
    stake: Balance,
    minimum_stake: Balance,
}
```
El stake mínimo es determinado por `last_epoch_seat_price / minimum_stake_divisor` donde `last_epoch_seat_price` es el
precio asiento determinado al final del último epoch y `minimum_stake_divisor` es un parámetro génesis de configuración
y su valor actual es 10.

## AddKeyAction

```rust
pub struct AddKeyAction {
    pub public_key: PublicKey,
    pub access_key: AccessKey,
}
```

**Salidas**:
- Agrega una [Llave de acceso](AccessKey) a la cuenta receptora y la asocia con una `public_key`proporcionada.

### Errores:

**Errores de validación**:

Si la llave de acceso es de tipo `FunctionCallPermission`, los siguientes errores pueden ocurrir
- Si `receiver_id` en la `access_key` no es un ID de cuenta válido, el siguiente error será regresado
```rust
/// ID de cuenta inválido
InvalidAccountId { account_id: AccountId },
```

- Si la longitud de algún nombre de método excede `max_length_method_name`, que es un parámetro génesis (su valor actual es 256),
el siguiente error será regresado
```rust
/// La longitud de algún nombre de método excede el límite de la acción Add Key
AddKeyMethodNameLengthExceeded { length: u64, limit: u64 },
```

- Si la suma de la longitud de los nombres de método (con un carácter extra para cada nombre de método) excede `max_number_bytes_method_names`, que es un parámetro génesis (su valor actual es 2000),
el siguiente error será regresado
```rust
/// El número total de bytes de los nombres de método excedió el límite de la acción Add Key
AddKeyMethodNamesNumberOfBytesExceeded { total_number_of_bytes: u64, limit: u64 }
```

**Errores de ejecución**:
- Si una cuenta trata de añadir una llave de acceso con una llave pública dada, pero una llave de acceso existente con esta llave pública ya existe, el siguiente error será regresado
```rust
/// La llave pública ya fue usada por una clave de acceso existente
AddKeyAlreadyExists { account_id: AccountId, public_key: PublicKey }
```
- Si el estado o el almacenamiento se corrompe, un error de tipo `StorageError` será regresado.

## DeleteKeyAction

```rust
pub struct DeleteKeyAction {
    pub public_key: PublicKey,
}
```

**Salidas**:
- Elimina la [llave de acceso](AccessKey) asociada con la `public_key`.

### Errores

**Errores de ejecución**:

- Cuando una cuenta trata de borrar una llave de acceso que no existe, el siguiente error es regresado
```rust
/// La cuenta trata de remover una llave de exceso que no existe
DeleteKeyDoesNotExist { account_id: AccountId, public_key: PublicKey }
```
- `StorageError` es regresado si el estado o el almacenamiento se corrompe.

## DeleteAccountAction

```rust
pub struct DeleteAccountAction {
    /// El balance de la cuenta restante será transferido a este AccountId
    pub beneficiary_id: AccountId,
}
```

**Salidas**:
- La cuenta, y todos los datos guardados dentro de esta misma, será borrada y los tokens serán transferidos a `beneficiary_id`.

### Errores

**Errores de validación**
- Si `beneficiary_id` no es un id de cuenta válido, el siguiente error será regresado
```rust
/// ID de cuenta inválido.
InvalidAccountId { account_id: AccountId },
```

- Si esta acción no es la última en la lista de la acciones de un recibo, el siguiente error será regresado
```rust
/// La acción eliminar debe de ser la acción final en una transacción
DeleteActionMustBeFinal
```

- Si la cuenta todavía tiene balance bloqueado debido al staking, el siguiente error será regresado
```rust
/// La cuenta se encuentra stakeando y no puede ser eliminada
DeleteAccountStaking { account_id: AccountId }
```

**Errores de ejecución**:
- Si el estado o el almacenamiento se corrompen, un error de tipo `StorageError` es regresado.

'''
'''--- specs/RuntimeSpec/ApplyingChunk.md ---
# Applying chunk

## Entradas y salidas

Runtime.apply toma las siguientes entradas:
* trie y la raíz del estado actual
* *validator_accounts_update*
* *incoming_receipts*
* *transactions*

y produce las siguientes salidas:
* raíz del estado nuevo
* *validator_proposals*
* *outgoing_receipts*
* (recibo ejecutado) *outcomes*
* *proof*

## Orden de procesamiento

* Si este es el primer bloque de un epoch, otorgue [reconpensas epoch](../Economics/README.md#validator-rewards-calculation) a los validadores (en el orden de
*validator_accounts_update.stake_info*)
* Barra de saldo bloqueada por comportamiento malicioso (en el orden de *validator_accounts_update.slashing_info*)
* Si la [cuenta tesorera](../Economics/README.md#protocol-treasury) no fue uno de los validadores y este es el primer bloque de un epoch, otorgue un recompensa de la cuenta tesorera
* Si este es el primer bloque de una nueva versión o primer bloque con fragmento de una nueva versión, aplique las migraciones correspondientes
* Si este bloque no tiene fragmento para este bloque, finalice el proceso antes de tiempo
* Procesa [transacciones](Transactions.md) (en el orden de *transacciones*)
* Procesa [recibos](Receipts.md) locales (en el orden de *transacciones* que los generaron)
* Procesa [recibos](Receipts.md) retrasados (ordenados primeramente por el bloque en donde se generaron, después los primeros recibos locales basados en el orden de generación de *transacciones*, después los recibos entrantes, ordenados por el orden que ya tiene *incoming_receipts*)
* Procesa [recibos](Receipts.md) entrantes (ordenados por *incoming_receipts*)

Cuando se procesan los recibos monitoreamos el gas usado (incluyendo el gas usado en las migraciones). Si usamos el límite del gas, imediatamente detenemos el procesamiento de los recibos retrasados, y para los locales y recibos entrantes los agregamos a los recibos retrasados.

* Si alguno de los recibos retrasados fueron procesados o si algún recibo nuevo fue retrasado, se actualizan los índices del primer y último recibo no procesado dentro del estado
* Remueve las propuestas de validador duplicadas (para cada cuenta, solo mantenemos la última en el orden de procesamiento de recibos)

Por favor tenga en cuenta que los recibos locales son recibos generados por transacciones donde el receptor es el mismo que el que firmó la transacción

## Recibos retrasados

En cada bloque tenemos una cantidad máxima de Gas que podemos usar para procesar recibos y migraciones, actualmente es de 500 TGas. Si un recibo local o entrante no es procesado por la falta de Gas, se guardan en el estado con la llave <pre>TrieKey::DelayedReceipt { id }</pre> donde `id` es un índice único para cada fragmento, asignado consecutivamente. Actual mente el emisor no tiene que stakear ningún token para guardar recibos restrasados. El estado también contiene una llave especial <pre>TrieKey::DelayedReceiptIndices</pre> donde el primer y último id de los recibos retrasados aún no procesados son guardados.

'''
'''--- specs/RuntimeSpec/Components/BindingsSpec/BindingsSpec.md ---
# Especificación de Unión

Esta es la interfaz de bajo nivel disponible para el contrato inteligente, consiste de las funciones que el host (representado por
el Wasmer dentro de near-vm-runner) expone al invitado (el contrato inteligente compilado para Wasm).

Debido a las restricciones de Wasm, los métodos operan solo con tipos primitivos, como `u64`.

También para todas las funciones en la especificación de uniones lo siguiente es verdadero:

- La ejecución de método puede resultar en el error `MemoryAccessViolation` si una de las siguientes pasa:
  - El método causa que el host rea una pieza de memoria del invitado pero apunta fuera de la memoria del invitado;
  - El invitado causa que el host lea del registro, pero el id del registro es inválido.

Ejecución de una llamada de función de uniones da como resultado la generación de un error. Este error causa la terminación de la ejecución
del contrato inteligente y el mensaje de error se escribe en los logs de la transacción que causaron la ejecución. Muchas funciones de 
unión puede lanzar mensajes de error especializados, pero hay también una lista de mensajes de error que pueden ser lanzados por casi
cualquier función:

- `IntegerOverflow` -- pasa cuando el invitado pasa alguna información al host pero cuando el host trata de aplicar una operación aritmética
  en el, causa un overflow o underflow;
- `GasExceeded` -- pasa cuando la operación realizada por el invitado causa más gas del gas prepagado restante;
- `GasLimitExceeded` -- pasa cuando la ejecución usa más gas del permitido por el límite global, el cual se impuso en la configuración
  de la economía
- `StorageError` -- pasa cuando el método falla al hacer alguna operación en el trie.

Los siguientes métodos de unión no pueden ser invocados en una llamada view:

- `signer_account_id`
- `signer_account_pk`
- `predecessor_account_id`
- `attached_deposit`
- `prepaid_gas`
- `used_gas`
- `promise_create`
- `promise_then`
- `promise_and`
- `promise_batch_create`
- `promise_batch_then`
- `promise_batch_action_create_account`
- `promise_batch_action_deploy_account`
- `promise_batch_action_function_call`
- `promise_batch_action_transfer`
- `promise_batch_action_stake`
- `promise_batch_action_add_key_with_full_access`
- `promise_batch_action_add_key_with_function_call`
- `promise_batch_action_delete_key`
- `promise_batch_action_delete_account`
- `promise_results_count`
- `promise_result`
- `promise_return`

Si se invocan la ejecución del contrato inteligente entrará en pánico con `ProhibitedInView(<method name>)`.

'''
'''--- specs/RuntimeSpec/Components/BindingsSpec/ContextAPI.md ---
# Context API

Context API mostly provides read-only functions that access current information about the blockchain, the accounts
(that originally initiated the chain of cross-contract calls, the immediate contract that called the current one, the account of the current contract),
other important information like storage usage.

Many of the below functions are currently implemented through `data_read` which allows to read generic context data.
However, there is no reason to have `data_read` instead of the specific functions:

- `data_read` does not solve forward compatibility. If later we want to add another context function, e.g. `executed_operations`
  we can just declare it as a new function, instead of encoding it as `DATA_TYPE_EXECUTED_OPERATIONS = 42` which is passed
  as the first argument to `data_read`;
- `data_read` does not help with renaming. If later we decide to rename `signer_account_id` to `originator_id` then one could
  argue that contracts that rely on `data_read` would not break, while contracts relying on `signer_account_id()` would. However
  the name change often means the change of the semantics, which means the contracts using this function are no longer safe to
  execute anyway.

However there is one reason to not have `data_read` -- it makes `API` more human-like which is a general direction Wasm APIs, like WASI are moving towards to.

---

```rust
current_account_id(register_id: u64)
```

Saves the account id of the current contract that we execute into the register.

###### Panics

- If the registers exceed the memory limit panics with `MemoryAccessViolation`;

---

```rust
signer_account_id(register_id: u64)
```

All contract calls are a result of some transaction that was signed by some account using
some access key and submitted into a memory pool (either through the wallet using RPC or by a node itself). This function returns the id of that account.

###### Normal operation

- Saves the bytes of the signer account id into the register.

###### Panics

- If the registers exceed the memory limit panics with `MemoryAccessViolation`;
- If called in a view function panics with `ProhibitedInView`.

###### Current bugs

- Currently we conflate `originator_id` and `sender_id` in our code base.

---

```rust
signer_account_pk(register_id: u64)
```

Saves the public key fo the access key that was used by the signer into the register.
In rare situations smart contract might want to know the exact access key that was used to send the original transaction,
e.g. to increase the allowance or manipulate with the public key.

###### Panics

- If the registers exceed the memory limit panics with `MemoryAccessViolation`;
- If called in a view function panics with `ProhibitedInView`.

###### Current bugs

- Not implemented.

---

```rust
predecessor_account_id(register_id: u64)
```

All contract calls are a result of a receipt, this receipt might be created by a transaction
that does function invocation on the contract or another contract as a result of cross-contract call.

###### Normal operation

- Saves the bytes of the predecessor account id into the register.

###### Panics

- If the registers exceed the memory limit panics with `MemoryAccessViolation`;
- If called in a view function panics with `ProhibitedInView`.

###### Current bugs

- Not implemented.

---

```rust
input(register_id: u64)
```

Reads input to the contract call into the register. Input is expected to be in JSON-format.

###### Normal operation

- If input is provided saves the bytes (potentially zero) of input into register.
- If input is not provided does not modify the register.

###### Returns

- If input was not provided returns `0`;
- If input was provided returns `1`; If input is zero bytes returns `1`, too.

###### Panics

- If the registers exceed the memory limit panics with `MemoryAccessViolation`;

###### Current bugs

- Implemented as part of `data_read`. However there is no reason to have one unified function, like `data_read` that can
  be used to read all

---

```rust
block_index() -> u64
```

Returns the current block height from genesis.

---

```rust
block_timestamp() -> u64
```

Returns the current block timestamp (number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC).

---

```rust
epoch_height() -> u64
```

Returns the current epoch height from genesis.

---

```rust
storage_usage() -> u64
```

Returns the number of bytes used by the contract if it was saved to the trie as of the
invocation. This includes:

- The data written with `storage_*` functions during current and previous execution;
- The bytes needed to store the account protobuf and the access keys of the given account.

'''
'''--- specs/RuntimeSpec/Components/BindingsSpec/EconomicsAPI.md ---
# Economics API

Accounts own certain balance; and each transaction and each receipt have certain amount of balance and prepaid gas
attached to them.
During the contract execution, the contract has access to the following `u128` values:

- `account_balance` -- the balance attached to the given account. This includes the `attached_deposit` that was attached
  to the transaction;
- `attached_deposit` -- the balance that was attached to the call that will be immediately deposited before
  the contract execution starts;
- `prepaid_gas` -- the tokens attached to the call that can be used to pay for the gas;
- `used_gas` -- the gas that was already burnt during the contract execution and attached to promises (cannot exceed `prepaid_gas`);

If contract execution fails `prepaid_gas - used_gas` is refunded back to `signer_account_id` and `attached_deposit`
is refunded back to `predecessor_account_id`.

The following spec is the same for all functions:

```rust
account_balance(balance_ptr: u64)
attached_deposit(balance_ptr: u64)

```

-- writes the value into the `u128` variable pointed by `balance_ptr`.

###### Panics

- If `balance_ptr + 16` points outside the memory of the guest with `MemoryAccessViolation`;
- If called in a view function panics with `ProhibitedInView`.

###### Current bugs

- Use a different name;

---

```rust
prepaid_gas() -> u64
used_gas() -> u64
```

###### Panics

- If called in a view function panics with `ProhibitedInView`.

'''
'''--- specs/RuntimeSpec/Components/BindingsSpec/MathAPI.md ---
# API Math

```rust
random_seed(register_id: u64)
```

Regresa una semilla aleatoria que puede ser usada para la generación de número pseudo-aleatorio de una manera determinista.

###### Pánicos

- Si el tamaño del registro excede el límite establecido `MemoryAccessViolation`;

---

```rust
sha256(value_len: u64, value_ptr: u64, register_id: u64)
```

Hashea la secuencia de bytes aleatoria usando sha256 y la regresa a `register_id`.

###### Pánicos

- Si `value_len + value_ptr` apunta por fuera de la memoria o los registros usan más memoria que el límite, con `MemoryAccessViolation`.

---

```rust
keccak256(value_len: u64, value_ptr: u64, register_id: u64)
```

Hashea la secuencia aleatoria de bytes usando keccak256 y la regresa a `register_id`.

###### Pánicos

- Si `value_len + value_ptr` apunta por fuera de la memoria o los registros usan más memoria que el límite, con `MemoryAccessViolation`.

---

```rust
keccak512(value_len: u64, value_ptr: u64, register_id: u64)
```

Hashea la secuencia aleatoria de bytes usando keccak512 y los regresa a `register_id`.

###### Panics

- Si `value_len + value_ptr` apunta por fuera de la memoria o los registros usan más memoria que el límite, con `MemoryAccessViolation`.

'''
'''--- specs/RuntimeSpec/Components/BindingsSpec/MiscellaneousAPI.md ---
# Miscellaneous API

```rust
value_return(value_len: u64, value_ptr: u64)
```

Sets the blob of data as the return value of the contract.

###### Panics

- If `value_len + value_ptr` exceeds the memory container or points to an unused register it panics with `MemoryAccessViolation`;

---

```rust
panic()
```

Terminates the execution of the program with panic `GuestPanic("explicit guest panic")`.

---

```rust
panic_utf8(len: u64, ptr: u64)
```

Terminates the execution of the program with panic `GuestPanic(s)`, where `s` is the given UTF-8 encoded string.

###### Normal behavior

If `len == u64::MAX` then treats the string as null-terminated with character `'\0'`;

###### Panics

- If string extends outside the memory of the guest with `MemoryAccessViolation`;
- If string is not UTF-8 returns `BadUtf8`.
- If string length without null-termination symbol is larger than `config.max_log_len` returns `BadUtf8`.

---

```rust
log_utf8(len: u64, ptr: u64)
```

Logs the UTF-8 encoded string.

###### Normal behavior

If `len == u64::MAX` then treats the string as null-terminated with character `'\0'`;

###### Panics

- If string extends outside the memory of the guest with `MemoryAccessViolation`;
- If string is not UTF-8 returns `BadUtf8`.
- If string length without null-termination symbol is larger than `config.max_log_len` returns `BadUtf8`.

---

```rust
log_utf16(len: u64, ptr: u64)
```

Logs the UTF-16 encoded string. `len` is the number of bytes in the string.
See https://stackoverflow.com/a/5923961 that explains that null termination is not defined through encoding.

###### Normal behavior

If `len == u64::MAX` then treats the string as null-terminated with two-byte sequence of `0x00 0x00`.

###### Panics

- If string extends outside the memory of the guest with `MemoryAccessViolation`;

---

```rust
abort(msg_ptr: u32, filename_ptr: u32, line: u32, col: u32)
```

Special import kept for compatibility with AssemblyScript contracts. Not called by smart contracts directly, but instead
called by the code generated by AssemblyScript.

# Future Improvements

In the future we can have some of the registers to be on the guest.
For instance a guest can tell the host that it has some pre-allocated memory that it wants to be used for the register,
e.g.

```rust
set_guest_register(register_id: u64, register_ptr: u64, max_register_size: u64)
```

will assign `register_id` to a span of memory on the guest. Host then would also know the size of that buffer on guest
and can throw a panic if there is an attempted copying that exceeds the guest register size.

'''
'''--- specs/RuntimeSpec/Components/BindingsSpec/PromisesAPI.md ---
# Promises API

```rust
promise_create(account_id_len: u64,
               account_id_ptr: u64,
               method_name_len: u64,
               method_name_ptr: u64,
               arguments_len: u64,
               arguments_ptr: u64,
               amount_ptr: u64,
               gas: u64) -> u64
```

Creates a promise that will execute a method on account with given arguments and attaches the given amount.
`amount_ptr` point to slices of bytes representing `u128`.

###### Panics

- If `account_id_len + account_id_ptr` or `method_name_len + method_name_ptr` or `arguments_len + arguments_ptr`
  or `amount_ptr + 16` points outside the memory of the guest or host, with `MemoryAccessViolation`.
- If called in a view function panics with `ProhibitedInView`.

###### Returns

- Index of the new promise that uniquely identifies it within the current execution of the method.

---

```rust
promise_then(promise_idx: u64,
             account_id_len: u64,
             account_id_ptr: u64,
             method_name_len: u64,
             method_name_ptr: u64,
             arguments_len: u64,
             arguments_ptr: u64,
             amount_ptr: u64,
             gas: u64) -> u64
```

Attaches the callback that is executed after promise pointed by `promise_idx` is complete.

###### Panics

- If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
- If `account_id_len + account_id_ptr` or `method_name_len + method_name_ptr` or `arguments_len + arguments_ptr`
  or `amount_ptr + 16` points outside the memory of the guest or host, with `MemoryAccessViolation`.
- If called in a view function panics with `ProhibitedInView`.

###### Returns

- Index of the new promise that uniquely identifies it within the current execution of the method.

---

```rust
promise_and(promise_idx_ptr: u64, promise_idx_count: u64) -> u64
```

Creates a new promise which completes when time all promises passed as arguments complete. Cannot be used with registers.
`promise_idx_ptr` points to an array of `u64` elements, with `promise_idx_count` denoting the number of elements.
The array contains indices of promises that need to be waited on jointly.

###### Panics

- If `promise_ids_ptr + 8 * promise_idx_count` extend outside the guest memory with `MemoryAccessViolation`;
- If any of the promises in the array do not correspond to existing promises panics with `InvalidPromiseIndex`.
- If called in a view function panics with `ProhibitedInView`.

###### Returns

- Index of the new promise that uniquely identifies it within the current execution of the method.

---

```rust
promise_results_count() -> u64
```

If the current function is invoked by a callback we can access the execution results of the promises that
caused the callback. This function returns the number of complete and incomplete callbacks.

Note, we are only going to have incomplete callbacks once we have `promise_or` combinator.

###### Normal execution

- If there is only one callback `promise_results_count()` returns `1`;
- If there are multiple callbacks (e.g. created through `promise_and`) `promise_results_count()` returns their number.
- If the function was called not through the callback `promise_results_count()` returns `0`.

###### Panics

- If called in a view function panics with `ProhibitedInView`.

---

```rust
promise_result(result_idx: u64, register_id: u64) -> u64
```

If the current function is invoked by a callback we can access the execution results of the promises that
caused the callback. This function returns the result in blob format and places it into the register.

###### Normal execution

- If promise result is complete and successful copies its blob into the register;
- If promise result is complete and failed or incomplete keeps register unused;

###### Returns

- If promise result is not complete returns `0`;
- If promise result is complete and successful returns `1`;
- If promise result is complete and failed returns `2`.

###### Panics

- If `result_idx` does not correspond to an existing result panics with `InvalidResultIndex`.
- If copying the blob exhausts the memory limit it panics with `MemoryAccessViolation`.
- If called in a view function panics with `ProhibitedInView`.

###### Current bugs

- We currently have two separate functions to check for result completion and copy it.

---

```rust
promise_return(promise_idx: u64)
```

When promise `promise_idx` finishes executing its result is considered to be the result of the current function.

###### Panics

- If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.

###### Current bugs

- The current name `return_promise` is inconsistent with the naming convention of Promise API.

```rust
promise_batch_create(account_id_len: u64, account_id_ptr: u64) -> u64
```

Creates a new promise towards given `account_id` without any actions attached to it.

###### Panics

- If `account_id_len + account_id_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.
- If called in a view function panics with `ProhibitedInView`.

###### Returns

- Index of the new promise that uniquely identifies it within the current execution of the method.

---

```rust
promise_batch_then(promise_idx: u64, account_id_len: u64, account_id_ptr: u64) -> u64
```

Attaches a new empty promise that is executed after promise pointed by `promise_idx` is complete.

###### Panics

- If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
- If `account_id_len + account_id_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.
- If called in a view function panics with `ProhibitedInView`.

###### Returns

- Index of the new promise that uniquely identifies it within the current execution of the method.

---

```rust
promise_batch_action_create_account(promise_idx: u64)
```

Appends `CreateAccount` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-15b6752ec7d78e7b85b8c7de4a19cbd4R48

###### Panics

- If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
- If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
- If called in a view function panics with `ProhibitedInView`.

---

```rust
promise_batch_action_deploy_contract(promise_idx: u64, code_len: u64, code_ptr: u64)
```

Appends `DeployContract` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-15b6752ec7d78e7b85b8c7de4a19cbd4R49

###### Panics

- If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
- If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
- If `code_len + code_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.
- If called in a view function panics with `ProhibitedInView`.

---

```rust
promise_batch_action_function_call(promise_idx: u64,
                                   method_name_len: u64,
                                   method_name_ptr: u64,
                                   arguments_len: u64,
                                   arguments_ptr: u64,
                                   amount_ptr: u64,
                                   gas: u64)
```

Appends `FunctionCall` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-15b6752ec7d78e7b85b8c7de4a19cbd4R50

_NOTE: Calling `promise_batch_create` and then `promise_batch_action_function_call` will produce the same promise as calling `promise_create` directly._

###### Panics

- If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
- If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
- If `account_id_len + account_id_ptr` or `method_name_len + method_name_ptr` or `arguments_len + arguments_ptr`
  or `amount_ptr + 16` points outside the memory of the guest or host, with `MemoryAccessViolation`.
- If called in a view function panics with `ProhibitedInView`.

---

```rust
promise_batch_action_transfer(promise_idx: u64, amount_ptr: u64)
```

Appends `Transfer` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-15b6752ec7d78e7b85b8c7de4a19cbd4R51

###### Panics

- If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
- If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
- If `amount_ptr + 16` points outside the memory of the guest or host, with `MemoryAccessViolation`.
- If called in a view function panics with `ProhibitedInView`.

---

```rust
promise_batch_action_stake(promise_idx: u64,
                           amount_ptr: u64,
                           bls_public_key_len: u64,
                           bls_public_key_ptr: u64)
```

Appends `Stake` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-15b6752ec7d78e7b85b8c7de4a19cbd4R52

###### Panics

- If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
- If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
- If the given BLS public key is not a valid BLS public key (e.g. wrong length) `InvalidPublicKey`.
- If `amount_ptr + 16` or `bls_public_key_len + bls_public_key_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.
- If called in a view function panics with `ProhibitedInView`.

---

```rust
promise_batch_action_add_key_with_full_access(promise_idx: u64,
                                              public_key_len: u64,
                                              public_key_ptr: u64,
                                              nonce: u64)
```

Appends `AddKey` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-15b6752ec7d78e7b85b8c7de4a19cbd4R54
The access key will have `FullAccess` permission, details: https://github.com/nearprotocol/NEPs/blob/master/text/0005-access-keys.md#guide-level-explanation

###### Panics

- If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
- If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
- If the given public key is not a valid public key (e.g. wrong length) `InvalidPublicKey`.
- If `public_key_len + public_key_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.
- If called in a view function panics with `ProhibitedInView`.

---

```rust
promise_batch_action_add_key_with_function_call(promise_idx: u64,
                                                public_key_len: u64,
                                                public_key_ptr: u64,
                                                nonce: u64,
                                                allowance_ptr: u64,
                                                receiver_id_len: u64,
                                                receiver_id_ptr: u64,
                                                method_names_len: u64,
                                                method_names_ptr: u64)
```

Appends `AddKey` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-156752ec7d78e7b85b8c7de4a19cbd4R54
The access key will have `FunctionCall` permission, details: https://github.com/nearprotocol/NEPs/blob/master/text/0005-access-keys.md#guide-level-explanation

- If the `allowance` value (not the pointer) is `0`, the allowance is set to `None` (which means unlimited allowance). And positive value represents a `Some(...)` allowance.
- Given `method_names` is a `utf-8` string with `,` used as a separator. The vm will split the given string into a vector of strings.

###### Panics

- If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
- If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
- If the given public key is not a valid public key (e.g. wrong length) `InvalidPublicKey`.
- if `method_names` is not a valid `utf-8` string, fails with `BadUTF8`.
- If `public_key_len + public_key_ptr`, `allowance_ptr + 16`, `receiver_id_len + receiver_id_ptr` or
  `method_names_len + method_names_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.
- If called in a view function panics with `ProhibitedInView`.

---

```rust
promise_batch_action_delete_key(promise_idx: u64,
                                public_key_len: u64,
                                public_key_ptr: u64)
```

Appends `DeleteKey` action to the batch of actions for the given promise pointed by `promise_idx`.
Details for the action: https://github.com/nearprotocol/NEPs/pull/8/files#diff-15b6752ec7d78e7b85b8c7de4a19cbd4R55

###### Panics

- If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
- If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
- If the given public key is not a valid public key (e.g. wrong length) `InvalidPublicKey`.
- If `public_key_len + public_key_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.
- If called in a view function panics with `ProhibitedInView`.

---

```rust
promise_batch_action_delete_account(promise_idx: u64,
                                    beneficiary_id_len: u64,
                                    beneficiary_id_ptr: u64)
```

Appends `DeleteAccount` action to the batch of actions for the given promise pointed by `promise_idx`.
Action is used to delete an account. It can be performed on a newly created account, on your own account or an account with
insufficient funds to pay rent. Takes `beneficiary_id` to indicate where to send the remaining funds.

###### Panics

- If `promise_idx` does not correspond to an existing promise panics with `InvalidPromiseIndex`.
- If the promise pointed by the `promise_idx` is an ephemeral promise created by `promise_and`.
- If `beneficiary_id_len + beneficiary_id_ptr` points outside the memory of the guest or host, with `MemoryAccessViolation`.
- If called in a view function panics with `ProhibitedInView`.

'''
'''--- specs/RuntimeSpec/Components/BindingsSpec/RegistersAPI.md ---
# API de registros

Los registros permiten a la función host retornar los datos en un búfer localizado dentro del host opuesto al búfer
localizado en el cliente. Una operación especial puede ser usada para copiar el contenido del búfer al host. Los apuntadores
de memoria entonces puede ser usados para apuntar la memoria en el invitado o la memoria en el host, vea a continuación. Beneficios:

- Podemos tener funciones que devuelven valores que no son necesariamente usados, ej. el insertar llave-valor en un trie puede
  también regresar el valor anterior reemplazado, que no será necesariamente usado. Previamente, si regresamos algo tendríamos
  que pasar el blob del host al invitado, incluso si no es usado;
- Podemos pasar blobs de datos entre funciones host sin pasar por el invitado, ej. podemos remover el valor del
  almacenamiento e insertarlo con una clave diferente;
- Hace a la API más limpia, debido a que no neceistamos pasar `buffer_len` y `buffer_ptr` como argumentos a otras funciones;
- Permite fusionar ciertas funciones juntas, vea `storage_iter_next`;
- Esto es consistente con otras APIs que fueron creadas para alto rendimiento, ej. supuestamente Ewasm implmentó cálculos
  parecidos a SNARK en Wasm al exponer una librería bignum a través de una interfaz parecida a una pila al invitado. El invitado
  pueden manipular entonces con la pila de 256-bit números que está localizada en el host.

#### Host → paso del blob del host

Los registros pueden ser usados para pasar blobls entre funciones host. Para cualquier función
que toma un par de argumentos `*_len: u64, *_ptr: u64` este par está apuntando a una región de memoria en el invitado
o el host:

- Si `*_len != u64::MAX` apunta a la memoria en el invitado;
- Si `*_len == u64::MAX` apunta a la memoria bajo el registro `*_ptr` en el host.

Por ejemplo:
`storage_write(u64::MAX, 0, u64::MAX, 1, 2)` -- inserta un key-value en el almacenamiento, donde la llave es leída del registro 0,
el valor es leído del registro 1, y el resultado es guardado en el registro 2.

Tenga en cuenta que, si una función toma `register_id` entonces significa que esta función puede copiar algunos datos a este registro. Si
`register_id == u64::MAX` entonces el copiado no sucede. Esto permite algunas micro-optimizaciones en el futuro.

Otra cosa a tener en cuenta es que tomamos múltiples registros en el host, idenfificados con un número `u64`. El invitado no tiene que usarlos en
orden y puede, por ejemplo, guardar algún blob en el registro `5000` y otro valor en el registro `1`.

#### Especificación

```rust
read_register(register_id: u64, ptr: u64)
```

Escribe el todo el contenido del registro `register_id` en la memoria del invitado empezando con `ptr`.

###### Pánicos

- Si el contenido se extiende por fuera de la memoria alojada para el invitado. En el Wasmer, regresa un mensaje de error `MemoryAccessViolation`;
- Si `register_id` apunta a un registro no usado regresa un mensaje de error de tipo `InvalidRegisterId`.

###### Comportamiento Indefinido

- Si el contenido de un registro se extiende por fuera de la memoria pre-alojada en el lado del host, o si el apuntados apunta a
  la locación equivocada, esta función sobreescribirá la memoria que no se supone que se sobreescriba causando un comportamiento indefinido.

---

```rust
register_len(register_id: u64) -> u64
```

Regresa el tamaño del blob almacenado en el registro dado.

###### Operación normal

- Si el registro es usado, entonces regresa el tamaño, que puede ser potencialmente cero;
- Si el registro no es usado, regresa `u64::MAX`

'''
'''--- specs/RuntimeSpec/Components/BindingsSpec/TrieAPI.md ---
# Trie API

Here we provide a specification of trie API. After this NEP is merged, the cases where our current implementation does
not follow the specification are considered to be bugs that need to be fixed.

---

```rust
storage_write(key_len: u64, key_ptr: u64, value_len: u64, value_ptr: u64, register_id: u64) -> u64
```

Writes key-value into storage.

###### Normal operation

- If key is not in use it inserts the key-value pair and does not modify the register;
- If key is in use it inserts the key-value and copies the old value into the `register_id`.

###### Returns

- If key was not used returns `0`;
- If key was used returns `1`.

###### Panics

- If `key_len + key_ptr` or `value_len + value_ptr` exceeds the memory container or points to an unused register it panics
  with `MemoryAccessViolation`. (When we say that something panics with the given error we mean that we use Wasmer API to
  create this error and terminate the execution of VM. For mocks of the host that would only cause a non-name panic.)
- If returning the preempted value into the registers exceed the memory container it panics with `MemoryAccessViolation`;

###### Current bugs

- `External::storage_set` trait can return an error which is then converted to a generic non-descriptive
  `StorageUpdateError`, [here](https://github.com/nearprotocol/nearcore/blob/942bd7bdbba5fb3403e5c2f1ee3c08963947d0c6/runtime/wasm/src/runtime.rs#L210)
  however the actual implementation does not return error at all, [see](https://github.com/nearprotocol/nearcore/blob/4773873b3cd680936bf206cebd56bdc3701ddca9/runtime/runtime/src/ext.rs#L95);
- Does not return into the registers.

---

```rust
storage_read(key_len: u64, key_ptr: u64, register_id: u64) -> u64
```

Reads the value stored under the given key.

###### Normal operation

- If key is used copies the content of the value into the `register_id`, even if the content is zero bytes;
- If key is not present then does not modify the register.

###### Returns

- If key was not present returns `0`;
- If key was present returns `1`.

###### Panics

- If `key_len + key_ptr` exceeds the memory container or points to an unused register it panics with `MemoryAccessViolation`;
- If returning the preempted value into the registers exceed the memory container it panics with `MemoryAccessViolation`;

###### Current bugs

- This function currently does not exist.

---

```rust
storage_remove(key_len: u64, key_ptr: u64, register_id: u64) -> u64
```

Removes the value stored under the given key.

###### Normal operation

Very similar to `storage_read`:

- If key is used, removes the key-value from the trie and copies the content of the value into the `register_id`, even if the content is zero bytes.
- If key is not present then does not modify the register.

###### Returns

- If key was not present returns `0`;
- If key was present returns `1`.

###### Panics

- If `key_len + key_ptr` exceeds the memory container or points to an unused register it panics with `MemoryAccessViolation`;
- If the registers exceed the memory limit panics with `MemoryAccessViolation`;
- If returning the preempted value into the registers exceed the memory container it panics with `MemoryAccessViolation`;

###### Current bugs

- Does not return into the registers.

---

```rust
storage_has_key(key_len: u64, key_ptr: u64) -> u64
```

Checks if there is a key-value pair.

###### Normal operation

- If key is used returns `1`, even if the value is zero bytes;
- Otherwise returns `0`.

###### Panics

- If `key_len + key_ptr` exceeds the memory container it panics with `MemoryAccessViolation`;

---

```rust
storage_iter_prefix(prefix_len: u64, prefix_ptr: u64) -> u64
```

DEPRECATED, calling it will result result in `HostError::Deprecated` error.
Creates an iterator object inside the host.
Returns the identifier that uniquely differentiates the given iterator from other iterators that can be simultaneously
created.

###### Normal operation

- It iterates over the keys that have the provided prefix. The order of iteration is defined by the lexicographic
  order of the bytes in the keys. If there are no keys, it creates an empty iterator, see below on empty iterators;

###### Panics

- If `prefix_len + prefix_ptr` exceeds the memory container it panics with `MemoryAccessViolation`;

---

```rust
storage_iter_range(start_len: u64, start_ptr: u64, end_len: u64, end_ptr: u64) -> u64
```

DEPRECATED, calling it will result result in `HostError::Deprecated` error.
Similarly to `storage_iter_prefix`
creates an iterator object inside the host.

###### Normal operation

Unless lexicographically `start < end`, it creates an empty iterator.
Iterates over all key-values such that keys are between `start` and `end`, where `start` is inclusive and `end` is exclusive.

Note, this definition allows for `start` or `end` keys to not actually exist on the given trie.

###### Panics:

- If `start_len + start_ptr` or `end_len + end_ptr` exceeds the memory container or points to an unused register it panics with `MemoryAccessViolation`;

---

```rust
storage_iter_next(iterator_id: u64, key_register_id: u64, value_register_id: u64) -> u64
```

DEPRECATED, calling it will result result in `HostError::Deprecated` error.
Advances iterator and saves the next key and value in the register.

###### Normal operation

- If iterator is not empty (after calling next it points to a key-value), copies the key into `key_register_id` and value into `value_register_id` and returns `1`;
- If iterator is empty returns `0`.

This allows us to iterate over the keys that have zero bytes stored in values.

###### Panics

- If `key_register_id == value_register_id` panics with `MemoryAccessViolation`;
- If the registers exceed the memory limit panics with `MemoryAccessViolation`;
- If `iterator_id` does not correspond to an existing iterator panics with `InvalidIteratorId`
- If between the creation of the iterator and calling `storage_iter_next` any modification to storage was done through
  `storage_write` or `storage_remove` the iterator is invalidated and the error message is `IteratorWasInvalidated`.

###### Current bugs

- Not implemented, currently we have `storage_iter_next` and `data_read` + `DATA_TYPE_STORAGE_ITER` that together fulfill
  the purpose, but have unspecified behavior.

'''
'''--- specs/RuntimeSpec/Components/Components.md ---
# Componentes

Aquí está el diagrama de alto nivel de varios componentes del tiempo de ejecución, incluyendo algunos componentes de la capa de blockchain.
<img src="../../images/runtime_architecture.svg" />

'''
'''--- specs/RuntimeSpec/Components/RuntimeCrate.md ---
# Crate Runtime

El crate Runtime encapsula la lógica de como las transacciones y recibos deberían ser manejadas. Si encuentra
una llamada de contrato inteligente dentro de una transacción o a un recibo llama a `near-vm-runner`, para todas las otras acciones, como creación
de cuenta, las procesa en el momento.

## Clase Runtime

El punto de entrada principar de `Runtime` es el método `apply`.
Aplica una nueva transacción firmada y recibos entrantes para algún fragmento además del
trie dado y la raíz del estado dado.
Si la actualización de las cuentas del validador es proporcionada, actualizar las cuentas del validador.
Todas las transacciones firmadas nuevas deberían se válidas y ya verificadas por el productor de fragmentos.
Si alguna transacción es inválida, el método regresa un `InvalidTxError`.
En caso de éxito, el método regresa `ApplyResult` que contiene el nuevo estado de raíz, cambios en el trie,
nuevos recibos salientes, estadísticas de los validadores (e.j. renta total pagada por todas las cuentas afectadas),
salidas de ejecución.

### Argumentos de Apply

Toma los siguientes argumentos:

- `trie: Arc<Trie>` - el trie que contiene el estado más reciente.
- `root: CryptoHash` - el hash de la raíz del estado en el trie.
- `validator_accounts_update: &Option<ValidatorAccountsUpdate>` - campo opcional que contiene actualizaciones para cuentas de validador.
  Se proporciona al principio de cada epoch y cuando alguien es slasheado.
- `apply_state: &ApplyState` - contiene el índice del bloque y la marca de tiempo, logitud del epoch, precio del gas y el límite de gas.
- `prev_receipts: &[Receipt]` - la lista de os recibos entrantes, del bloque anterior.
- `transactions: &[SignedTransaction]` - la lista de transacciones nuevas firmadas.

### Lógica de Apply

La ejecución consiste de las siguiente etapas:

1. Hace un snapshot del estado inicial.
1. Aplica las actualizaciones de las cuentas de validador, si están disponibles.
1. Convierte transacciones firmadas nuevas en recibos.
1. Procesa los recibos.
1. Revisa que los balances entrantes y salientes cuadren.
1. Finaliza la actualización del trie.
1. Regresa `ApplyResult`.

## Actualización de las cuentas de validador

Las cuentas de validador son cuentas que stakearon algunos tokens para convertirse en un validador.
La actualización de cuentas de validador usualmente pasa cuando el fragmento actual es el primero del epoch.
También pasa cuando hay un reto en el bloque actual con uno de los participantes que pertenece al fragmento actual. 

Esta actualización distribuye las recompensas de validador, regresa tokens bloqueados y tal vez slashee algunas cuentas fuera de su stake.

## Conversión de transacción firmada

Las transacciones de transacciones nuevas firmadas son provistas por el productor de fragmentos en el fragmento. Estas transacciones deberían estar ordenadas y ya estar validadas.
Runtime vuelve a hacer otra validación por las siguientes razones:

- para cobrar a las cuentas por tarifas de transacción, transferencia de balances, gas prepagado y rentas de cuentas;
- para cerar recibos nuevos;
- para calcular el gas quemado;
- para validar las transacciones otra vez, en caso de que el productor de fragmentos sea malicioso.

Si la transacción tiene el mismo `signer_id` y `receiver_id`, entonces el recibo nuevo es agregado a la lista de los recibos locales nuevos,
de otra manera es agregado a la lista de nuevos recibos salientes.

## Procesamiento de recibos

Los recibos son procesados uno por uno en el siguiente orden:

1. Recibos anteriormente retrasados del estado.
1. Nuevos recibos locales.
1. Nuevos recibos entrantes.

Después de cada recibo procesado, comparamos el gas quemado total (hasta ahora) con el límite del gas.
Cuando el gas quemado total alcanza o excede el límite del gas, el procesamiento se detiene.
Los recibos restantes son considerados como retrasados y almacenados en el estado.

### Recibos retrasados

Los recibos retrasados son almacenados como una cola persistente en el estado.
Inicialmente, el primer índice no procesado y el siguiente índice disponible son inicializados en 0.
Cuando un nuevo recibo retrasado es agregado, se escribe bajo el siguiente índice disponible en el estado y el siguiente índice disponible se incrementa por 1.
Cuando un nuevo recibo retrasado es procesado, es leido del estado usando el primer índice no procesado y el primer índice no procesado es incrementado.
Al final del procesamiento de recibo, todos los recibos locales y entrantes restantes son considerados como restrasados y se guardan en el estado en su orden respectivo.
Si durante el procesamiento de recibos, hemos cambiado índices, entonces los ínidices de los recibos retrasados también son guardados en el estado.

### Algoritmo de procesamiento de recibo

El algoritmo de procesamiento de recibo es el siguiente:

1. Leer los índices del estado o inicializarlos con ceros.
1. Mientras que el primer índice no procesado es menor que el próximo índice disponible hacer lo siguiente
   1. Si el gas quemado total es al menos el límite del gas, detener.
   1. Leer el recibo del primero índice no procesado.
   1. Remover el recibo del estado.
   1. Incrementar el primer índice no procesado.
   1. Procesar el recibo.
   1. Agregar el nuevo gas quemado al total de gas quemado.
   1. Recordar que los ínidices de la cola retrasada han cambiado.
1. Procesar los recibos locales nuevos y después los recibos entrantes nuevos
   - Si el total de gas quemado es menor que el límite del gas:
     1. Procesar el recibo.
     1. Agregar el nuevo gas quemado al total de gas quemado.
   - Si no:
     1. Almacenar el recibo bajo el siguiente nuevo índice disponible.
     1. Incrementar el siguiente índice disponible.
     1. Recordar que los ínidices de la cola retrasada han cambiado.
1. Si los índices de la cola retrasada han cambiado, almacena los índices nuevos en el estado.

## Comprobador de balance

El comprobador de balance calcula el total de balance entrante y el total del balance saliente.

El total de balance entrante consite de lo siguiente:

- Recompensas de validador entrantes de la actualización de cuentas de validador.
- Suma de los balances iniciales de las cuentas para todas las cuentas afectadas. Lo calculamos usando el snapshot del estado incial.
- Balances de recibo entrantes. Las tarifas prepagadas y el gas multiplicado
- Incoming receipts balances. Las tarifas de prepago y gas multiplicaron sus precios de gas con los saldos adjuntos de transferencias y llamadas de función.
  Los reembolsos son considerados libres de cargos por tarifas, pero aún así tienen depositos adjuntos.
- Los balances para los recibos retrasados procesados.
- Los balances iniciales para los recibos pospuestos. Los recibos pospuestos son recibos de bloque anteriores que fueron procesados, pero no ejecutados.
  Son recibos de acción con algunos datos entrantes esperados. Usualmente para un callback además de la promesa esperada.
  Cuando los datos esperados llegan después que el recibo de acción, entonces el recibo de acción es pospuesto.
  Nota, los recibos de datos tienen un costo de 0, porque son prepagados cuando se emiten.

El balance total saliente consiste de lo siguiente:

- Suma de el balance final de las cuentas para todas las cuentas afectadas.
- Balances de recibos salientes.
- Nuevos recibos retrasados. Los recibos locales y salientes que no fueron procesados esta vez.
- Balances finales para los recibos pospuestos.
- Renta total pagada por todas las cuentas afectadas.
- Recompensas totales de nuevos validadores. Se calcula a partir de las recompensas totales de gas quemado.
- Balance total quemado. Encaso de que el balance sea quemado por alguna razón (e.j. la cuenta fue eliminada durante un reembolso), se contabiliza ahí.
- Balance total slasheado. En caso de que un validor sea slasheado por alguna razón, el balance se cuenta aquí.

Cuando sumas los balances entrantes y salientes, deben cuadrar.
Si no cuadran, arrojamos un error.

'''
'''--- specs/RuntimeSpec/Fees/Fees.md ---
# Runtime Fees

Runtime fees are measured in Gas. Gas price will be discussed separately.

When a transaction is converted into a receipt, the signer account is charged for the full cost of the transaction.
This cost consists of extra attached gas, attached deposits and the transaction fee.

The total transaction fee is the sum of the following:
- A fee for creation of the receipt
- A fee for every action

Every [Fee](/GenesisConfig/RuntimeFeeConfig/Fee.md) consists of 3 values measured in gas:
- `send_sir` and `send_not_sir` - the gas burned when the action is being created to be sent to a receiver.
    - `send_sir` is used when `current_account_id == receiver_id` (`current_account_id` is a `signer_id` for a signed transaction).
    - `send_not_sir` is used when `current_account_id != receiver_id`
- `execution` - the gas burned when the action is being executed on the receiver's account.

## Receipt creation cost

There are 2 types of receipts:
- Action receipts [ActionReceipt](/RuntimeSpec/Receipts.md#actionreceipt)
- Data receipts [DataReceipt](/RuntimeSpec/Receipts.md#datareceipt)

A transaction is converted into an [ActionReceipt](/RuntimeSpec/Receipts.md#actionreceipt).
Data receipts are used for data dependencies and will be discussed separately.

The `Fee` for an action receipt creation is described in the config [`action_receipt_creation_config`](/GenesisConfig/RuntimeFeeConfig.md#action_receipt_creation_config).

Example: when a signed transaction is being converted into a receipt, the gas for `action_receipt_creation_config.send` is being burned immediately,
while the gas for `action_receipt_creation_config.execution` is only charged, but not burned. It'll be burned when
the newly created receipt is executed on the receiver's account.

## Fees for actions

Every [`Action`](/RuntimeSpec/Actions.md#actions) has a corresponding Fee(s) described in the config [`action_creation_config`](/GenesisConfig/RuntimeFeeConfig/ActionCreationConfig.md).
Similar to a receipt creation costs, the `send` gas is burned when an action is added to a receipt to be sent, and the `execution` gas is only charged, but not burned.

Fees are either a base fee or a fee per byte of some data within the action.

Here is the list of actions and their corresponding fees:
- [CreateAccount](/RuntimeSpec/Actions.md#createaccountaction) uses
    - the base fee [`create_account_cost`](/GenesisConfig/RuntimeFeeConfig/ActionCreationConfig.md#create_account_cost)
- [DeployContract](/RuntimeSpec/Actions.html#deploycontractaction) uses the sum of the following fees:
    - the base fee [`deploy_contract_cost`](/GenesisConfig/RuntimeFeeConfig/ActionCreationConfig.md#deploy_contract_cost)
    - the fee per byte of the contract code to be deployed with the fee [`deploy_contract_cost_per_byte`](/GenesisConfig/RuntimeFeeConfig/ActionCreationConfig.md#deploy_contract_cost_per_byte)
    To compute the number of bytes for a deploy contract action `deploy_contract_action` use `deploy_contract_action.code.len()`
- [FunctionCall](/RuntimeSpec/Actions.md#functioncallaction) uses the sum of the following fees:
    - the base fee [`function_call_cost`](/GenesisConfig/RuntimeFeeConfig/ActionCreationConfig.md#function_call_cost)
    - the fee per byte of method name string and per byte of arguments with the fee [`function_call_cost_per_byte`](/GenesisConfig/RuntimeFeeConfig/ActionCreationConfig.md#function_call_cost_per_byte).
    To compute the number of bytes for a function call action `function_call_action` use `function_call_action.method_name.as_bytes().len() + function_call_action.args.len()`
- [Transfer](/RuntimeSpec/Actions.md#transferaction) uses one of the following fees:
    - if the `receiver_id` is an [Implicit Account ID](/DataStructures/Account.md#implicit-account-ids), then a sum of base fees is used:
        - the create account base fee [`create_account_cost`](/GenesisConfig/RuntimeFeeConfig/ActionCreationConfig.md#create_account_cost)
        - the transfer base fee [`transfer_cost`](/GenesisConfig/RuntimeFeeConfig/ActionCreationConfig.md#transfer_cost)
        - the add full access key base fee [`add_key_cost.full_access_cost`](/GenesisConfig/RuntimeFeeConfig/AccessKeyCreationConfig.html#full_access_cost)
    - if the `receiver_id` is NOT an [Implicit Account ID](/DataStructures/Account.md#implicit-account-ids), then only the base fee is used:
        - the transfer base fee [`transfer_cost`](/GenesisConfig/RuntimeFeeConfig/ActionCreationConfig.md#transfer_cost)
- [Stake](/RuntimeSpec/Actions.md#stakeaction) uses
    - the base fee [`stake_cost`](/GenesisConfig/RuntimeFeeConfig/ActionCreationConfig.md#stake_cost)
- [AddKey](/RuntimeSpec/Actions.md#addkeyaction) uses one of the following fees:
    - if the access key is [`AccessKeyPermission::FullAccess`](/DataStructures/AccessKey.md#access-keys) the base fee is used
        - the add full access key base fee [`add_key_cost.full_access_cost`](/GenesisConfig/RuntimeFeeConfig/AccessKeyCreationConfig.html#full_access_cost)
    - if the access key is [`AccessKeyPermission::FunctionCall`](/DataStructures/AccessKey.md#accesskeypermissionfunctioncall) the sum of the fees is used
        - the add function call permission access key base fee [`add_key_cost.function_call_cost`](/GenesisConfig/RuntimeFeeConfig/AccessKeyCreationConfig.html#full_access_cost)
        - the fee per byte of method names with extra byte for every method with the fee [`add_key_cost.function_call_cost_per_byte`](/GenesisConfig/RuntimeFeeConfig/AccessKeyCreationConfig.html#function_call_cost_per_byte)
        To compute the number of bytes for `function_call_permission` use `function_call_permission.method_names.iter().map(|name| name.as_bytes().len() as u64 + 1).sum::<u64>()`
- [DeleteKey](/RuntimeSpec/Actions.md#deletekeyaction) uses
    - the base fee [`delete_key_cost`](/GenesisConfig/RuntimeFeeConfig/ActionCreationConfig.md#delete_key_cost)
- [DeleteAccount](/RuntimeSpec/Actions.md#deleteaccountaction) uses
    - the base fee [`delete_account_cost`](/GenesisConfig/RuntimeFeeConfig/ActionCreationConfig.md#delete_account_cost)
    - action receipt creation fee for creating Transfer to send remaining funds to `beneficiary_id`
    - full transfer fee described in the corresponding item
    
## Gas tracking

In `Runtime`, gas is tracked in the following fields of `ActionResult` struct:
- `gas_burnt` - irreversible amount of gas spent on computations.
- `gas_used` - includes burnt gas and gas attached to the new `ActionReceipt`s created during the method execution.
- `gas_burnt_for_function_call` - stores gas burnt during function call execution. Later, contract account gets 30% of it as a reward for a possibility to invoke the function.

Initially runtime charges `gas_used` from the account. Some gas may be refunded later, see [Refunds](../Refunds.md).

At first, we charge fees related to conversion from `SignedTransaction` to `ActionReceipt` and future execution of this receipt:
- costs of all `SignedTransaction`s passed to `Runtime::apply` are computed in `tx_cost` function during validation;
- `total_cost` is deducted from signer, which is a sum of:
    - `gas_to_balance(gas_burnt)` where `gas_burnt` is action receipt send fee + `total_send_fees(transaction.actions)`);
    - `gas_to_balance(gas_remaining)` where `gas_remaining` is action receipt exec fee + `total_prepaid_exec_fees(transaction.actions)` to pay all remaining fees caused by transaction;
    - `total_deposit(transaction.actions)`;
- each transaction is converted to receipt and passed to `Runtime::process_receipt`.

Then each `ActionReceipt` is passed to `Runtime::apply_action_receipt` where gas is tracked as follows:
- `ActionResult` is created with `ActionReceipt` execution fee;
- all actions inside `ActionReceipt` are passed to `Runtime::apply_action`;
- `ActionResult` with charged base execution fees is created there;
- if action execution leads to new `ActionReceipt`s creation, corresponding `action_[action_name]` function adds new fees to the `ActionResult`. E.g. `action_delete_account` also charges the following fees:
    - `gas_burnt`: **send** fee for **new** `ActionReceipt` creation + complex **send** fee for `Transfer` to beneficiary account
    - `gas_used`: `gas_burnt` + **exec** fee for created `ActionReceipt` + complex **exec** fee for `Transfer`
- all computed `ActionResult`s are merged into one, where all gas values are summed up;
- unused gas is refunded in `generate_refund_receipts`.

Inside `VMLogic`, the fees are tracked in the `GasCounter` struct. 
The VM itself is called in the `action_function_call` inside `Runtime`. When all actions are processed, the result is returned as a `VMOutcome`, which is later merged with `ActionResult`.
 
# Example

Let's say we have the following transaction:

```rust
Transaction {
    signer_id: "alice.near",
    public_key: "2onVGYTFwyaGetWckywk92ngBiZeNpBeEjuzSznEdhRE",
    nonce: 23,
    receiver_id: "lockup.alice.near",
    block_hash: "3CwEMonK6MmKgjKePiFYgydbAvxhhqCPHKuDMnUcGGTK",
    actions: [
        Action::CreateAccount(CreateAccountAction {}),
        Action::Transfer(TransferAction {
            deposit: 100000000000000000000000000,
        }),
        Action::DeployContract(DeployContractAction {
            code: vec![/*<...128000 bytes...>*/],
        }),
        Action::FunctionCall(FunctionCallAction {
            method_name: "new",
            args: b"{\"owner_id\": \"alice.near\"}".to_vec(),
            gas: 25000000000000,
            deposit: 0,
        }),
    ],
}
```

It has `signer_id != receiver_id` so it will use `send_not_sir` for send fees.

It contains 4 actions with 2 actions that requires to compute number of bytes.
We assume `code` in `DeployContractAction` contains `128000` bytes. And `FunctionCallAction` has
`method_name` with length of `3` and `args` length of `26`, so total of `29`.

First let's compute the the amount that will be burned immediately for sending a receipt.
```python
burnt_gas = \
    config.action_receipt_creation_config.send_not_sir + \
    config.action_creation_config.create_account_cost.send_not_sir + \
    config.action_creation_config.transfer_cost.send_not_sir + \
    config.action_creation_config.deploy_contract_cost.send_not_sir + \
    128000 * config.action_creation_config.deploy_contract_cost_per_byte.send_not_sir + \
    config.action_creation_config.function_call_cost.send_not_sir + \
    29 * config.action_creation_config.function_call_cost_per_byte.send_not_sir
```

Now, by using `burnt_gas`, we can calculate the total transaction fee
```python
total_transaction_fee = burnt_gas + \
    config.action_receipt_creation_config.execution + \
    config.action_creation_config.create_account_cost.execution + \
    config.action_creation_config.transfer_cost.execution + \
    config.action_creation_config.deploy_contract_cost.execution + \
    128000 * config.action_creation_config.deploy_contract_cost_per_byte.execution + \
    config.action_creation_config.function_call_cost.execution + \
    29 * config.action_creation_config.function_call_cost_per_byte.execution
```

This `total_transaction_fee` is the amount of gas required to create a new receipt from the transaction.

NOTE: There are extra amounts required to prepay for deposit in `TransferAction` and gas in `FunctionCallAction`, but this is not part of the total transaction fee.

'''
'''--- specs/RuntimeSpec/FunctionCall.md ---
# Llamadas de función
En esta sección les daremos una explicación de como la acción `FunctionCall` funciona, cuáles son las entradas y las salidas. Supongamos que el tiempo de ejecución recibió el siguiente recibo de acción (ActionReceipt):

```rust
ActionReceipt {
     id: "A1",
     signer_id: "alice",
     signer_public_key: "6934...e248",
     receiver_id: "dex",
     predecessor_id: "alice",
     input_data_ids: [],
     output_data_receivers: [],
     actions: [FunctionCall { gas: 100000, deposit: 100000u128, method_name: "exchange", args: "{arg1, arg2, ...}", ... }],
 }
```
### input_data_ids a PromiseResult

`ActionReceipt.input_data_ids` deben de ser satisfechos antes de ser ejecutados (vea [Conciliación de recibos](#receipt-matching)). Cada uno de los `ActionReceipt.input_data_ids` será convertido a `PromiseResult::Successful(Vec<u8>)` si `data_id.data` es `Some(Vec<u8>)` por el contrario si `data_id.data` es `None` la promesa será `PromiseResult::Failed`.

## Entrada
La `FunctionCall` se ejecuta en el ambiente de la cuenta del `receiver_id`.

- un vector de los [Resultados de la promesa](#promise-results) que pueden ser accesados por `promise_result` importando [PromisesAPI](Components/BindingsSpec/PromisesAPI.md)
- Los parámetros `signer_id` y `signer_public_key` de la transacción original que vienen de ActionReceipt (e.j.  `method_name`, `args`, `predecessor_id`, `deposit`, `prepaid_gas` (que es el `gas` en FunctionCall))
- datos generales de una blockchain (e.j. `block_index`, `block_timestamp`)
- leer datos del almacenamiento de la cuenta

Una lista completa de los datos dispobibles para los contratos puede ser encontrada en [Context API](Components/BindingsSpec/ContextAPI.md) y [Trie](Components/BindingsSpec/TrieAPI.md)

## Ejecución

Primero que nada, el tiempo de ejecución prepara el archivo binario Wasm para ser ejecutado:
- carga el código del contrato desde el `receiver_id` del almacenamiento de la [cuenta](../Primitives/Account.md#account)
- deserializa y valida el `código` dentro del archivo binario Wasm (vea `prepare::prepare_contract`)
- inyecta la función que cuenta el gas llamada `gas` que cobrará el gas al principio de cada bloque de código
- instancía la [Especificación de vinculación](Components/BindingsSpec/BindingsSpec.md) con el archivo binario y llama a la función exportada `FunctionCall.method_name`

Durante la ejecución, la máquina virtual hace lo siguiente:

- cuenta el gas quemado en la ejecución
- cuenta el gas usado (que es el `gas usado` + el gas agregado a los nuevos recibos creados)
- cuenta cómo el almacenamiento de la cuenta incremente debido a la llamada
- colecta los logs producidos por el contrato
- establece los datos a regresar
- crea recibos nuevos mediante la [API de promesas](Components/BindingsSpec/PromisesAPI.md)

## Salidas

La salida de `FunctionCall`:

- actualizaciones del almacenamiento - cambia al trie de almacenamiento de la cuenta que será aplicado en una llamada exitosa
- `burnt_gas`, `used_gas` - vea [Tarifas del tiempo de ejecución](Fees/Fees.md)
- `balance` - balance de la cuenta no gastado (el balance de la cuenta podría ser gastado en depositos de `FunctionCall` creados recientemente o [`Acciones de transferencia`](Actions.md#transferaction) a otros contratos)
- `storage_usage` - storage_usage después de la aplicación de ActionReceipt
- `logs` - durante la ejecución de un contrato, registros que vienen en formato de cadenas de texto del tipo utf8/16 pueden ser creados. Actualmente los logs no son persistidos.
- `new_receipts` - `ActionReceipts` nuevos creados durante la ejecución. Estos recibos serán enviados al respectivo `receiver_id` (vea [Explicación de la conciliación de recibos](#receipt-matching))
- el resultado puede ser [`ReturnData::Value(Vec<u8>)`](#value-result) o [`ReturnData::ReceiptIndex(u64)`](#receiptindex-result)`

### Valor Resultado

Si el `ActionReceipt` aplicado contiene [`output_data_receivers`](Receipts.md#output_data_receivers), el tiempo de ejecución creará un `DataReceipt` para cada `data_id` y `receiver_id` y `data` será igual al valor regresado. Eventualmente, estos `DataReceipt` serán entregados a sus receptores correspondientes.

### ReceiptIndex Resultado

Un resultado exitoso no podría regresar ningún Valor, por el contrario genera un puñado de ActionReceipts nuevos. Un ejemplo podría ser una callback. En este caso, asumimos que el Recibo nuevo enviará su Valor Resultado a [`output_data_receivers`](Receipts.md#output_data_receivers) del actual `ActionReceipt`.

### Errores

Como con las otras acciones, los errores pueden ser divididos en dos categorías: error de validación y error de ejecución.

#### Error de validación

- Si hay cero gas ligado a la llamada de función, un error
```rust
/// La cantidad de gas ligada en una acción de llamada de función tiene que ser un número positivo.
FunctionCallZeroAttachedGas,
```
será regresado.

- Si la longitud del nombre del método llamado supera a `max_length_method_name`, un parámetro génesis el cual su valor es `256`, un error
```rust
/// La longitud del nombre del método está por encima del límite en una acción FunctionCall
FunctionCallMethodNameLengthExceeded { length: u64, limit: u64 }
```
es regresado.

- Si la longitud del argumento de la llamada de función excede `max_arguments_length`, un parámetro génesis el cual su valor es `4194304` (4MB), un error
```rust
/// La longitud del argumento supera el límite en una acción FunctionCall
FunctionCallArgumentsLengthExceeded { length: u64, limit: u64 }
```
es regresado.

#### Error de ejecución

Pueden haber tres tipos de errores regresados cuando se aplican acciones de llamada de función:
`FunctionCallError`, `ExternalError`, y `StorageError`.

* `FunctionCallError` incluye todo alrededor de la ejecución del archivo binario wasm,
desde compilar el archivo wasm a uno nativo hasta las trampas ocurridas mientras se ejecutan los binarios nativos compilados. Más específicamente
incluye los errores siguientes:
```rust
pub enum FunctionCallError {
    /// Error de compilación de Wasm
    CompilationError(CompilationError),
    /// Error de enlace del entorno binario Wasm
    LinkError {
        msg: String,
    },
    /// Error de resolución de import/export
    MethodResolveError(MethodResolveError),
    /// Ocurrió una trampa durante la ejecución de un binario 
    WasmTrap(WasmTrap),
    WasmUnknownError,
    HostError(HostError),
}
```
- `CompilationError` incluye los errores que pueden ocurrir durante la compilación de un archivo binario wasm.
- `LinkError` es retornado cuando el el tiempo de ejecución del wasmer no puede enlazar el módulo wasm con los imports proporcionados.
- `MethodResolveError` ocurre cuando el método en la acción no puede ser encontrado en le código del contrato.
- `WasmTrap` pasa cuando una trampa ocurre durante la ejecución de un binario. Las trampas incluyen
```rust
pub enum WasmTrap {
    /// Un código de operación `inalcanzable` fue ejecutado.
    Unreachable,
    /// Trampa de firma incorrecta indirecta de llamada.
    IncorrectCallIndirectSignature,
    /// Trampa de memoria fuera de los límites.
    MemoryOutOfBounds,
    /// Trampa fuera de los límites de la llamada indirecta.
    CallIndirectOOB,
    /// Una excepción aritmética, e.j. dividir entre 0.
    IllegalArithmetic,
    /// Trampa de acceso atómico desalineada.
    MisalignedAtomicAccess,
    /// Trampa de punto de ruptura.
    BreakpointTrap,
    /// Desbordamiento de pila.
    StackOverflow,
    /// Trampa genérica.
    GenericTrap,
}
```
- `WasmUnknownError` ocurre cuando algo dentro del wasmer sale mal
- `HostError` incluye errores que tal vez sean retornados durante la ejecución de una función del host. Esos errores son
```rust
pub enum HostError {
    /// La codificación de la cadena es una secuencia UTF-16 incorrecta
    BadUTF16,
    /// La codificación de la cadena es una secuencia UTF-8 incorrecta
    BadUTF8,
    /// Gas prepagado excedido
    GasExceeded,
    /// Se excedió la cantidad máxima de gas permitida para quemar por contrato
    GasLimitExceeded,
    /// Se excedió el balance de la cuenta
    BalanceExceeded,
    /// Se trató de llamar un nombre de método vacío
    EmptyMethodName,
    /// El contrato inteligente entró en pánico
    GuestPanic { panic_msg: String },
    /// IntegerOverflow pasó durante la ejecución del contrato
    IntegerOverflow,
    /// `promise_idx` no corresponde a las promesas existentes
    InvalidPromiseIndex { promise_idx: u64 },
    /// Las acciones solo pueden agregarse a las promesas no conjuntas
    CannotAppendActionToJointPromise,
    /// Regresar una promesa conjunta actualmente está prohibido
    CannotReturnJointPromise,
    /// Índice resultante de la promesa inválido accesado
    InvalidPromiseResultIndex { result_idx: u64 },
    /// Id inválido de registro accesado
    InvalidRegisterId { register_id: u64 },
    /// Iterador `iterator_index` fue invalidado después de su creación a través de realizar una operación mutable en el trie
    IteratorWasInvalidated { iterator_index: u64 },
    /// Memoria fuera de los límites accesada
    MemoryAccessViolation,
    /// Lógica de la máquina virtual retornó un índice de recibo inválido
    InvalidReceiptIndex { receipt_index: u64 },
    /// El índice de iterador `iterator_index` no existe
    InvalidIteratorIndex { iterator_index: u64 },
    /// La máquina virtual retornó un id de cuenta inválido
    InvalidAccountId,
    /// La máquina virtual retornó un nombre de método inválido
    InvalidMethodName,
    /// La lógica de la máquina virtual proporcionó una llave pública inválida
    InvalidPublicKey,
    /// `method_name` no es permitido en llamadas view
    ProhibitedInView { method_name: String },
    /// El número total de logs excederá el límite.
    NumberOfLogsExceeded { limit: u64 },
    /// La longitud de la llave de almacenamiento excedió el límite.
    KeyLengthExceeded { length: u64, limit: u64 },
    /// The storage value length exceeded the limit.
    /// La longitud del valor de almacenamiento excedió el límite.
    ValueLengthExceeded { length: u64, limit: u64 },
    /// La longitud de los logs totales excedió el límite.
    TotalLogLengthExceeded { length: u64, limit: u64 },
    /// El número máximo de promesas dentro de una FunctionCall excedió el límite.
    NumberPromisesExceeded { number_of_promises: u64, limit: u64 },
    /// El número máximo de las dependencias de los datos de entrada excedió el límite.
    NumberInputDataDependenciesExceeded { number_of_input_data_dependencies: u64, limit: u64 },
    /// La longitud del valor retornado excedió el límite.
    ReturnedValueLengthExceeded { length: u64, limit: u64 },
    /// El tamaño del contrato para la acción DeployContract excedió el límite.
    ContractSizeExceeded { size: u64, limit: u64 },
    /// La función host fue deprecada
    Deprecated { method_name: String },
}
```

* `ExternalError` incluye los errores que ocurren durante la ejecución dentro de `External`, que es una interface entre el tiempo de ejecución
y el resto del sistema. Los errores posibles son:
```rust
pub enum ExternalError {
    /// Error inesperado que es típicamente relacionado con la corrupción del almacenamiento del nodo.
    /// Es posible que el estado de la entrada sea inválido o malicioso.
    StorageError(StorageError),
    /// Error cuando accesamos la información del validador. Pasa dentro del manejador de epoch.
    ValidatorError(EpochError),
}
```

* `StorageError` pasa cuando el estado o almacenamiento se corrompen.

'''
'''--- specs/RuntimeSpec/README.md ---
# Runtime Specification

Vea:
- [Tiempo de ejecución](Runtime.md)
- [ApplyingChunk](ApplyingChunk.md)
- [Llamadas de función](FunctionCall.md)
- [Transacciones](Transactions.md)
- [Acciones](Actions.md)
- [Recibos](Receipts.md)
- [Reembolso](Refunds.md)
- [Escenarios](Scenarios/Scenarios.md)
- [Componentes](Components/Components.md)

'''
'''--- specs/RuntimeSpec/Receipts.md ---
# Recibo

Toda la comunicación cross-contrato (asumimos que cada cuenta vive en su propio fragmento) en Near pasa a través de Recibos.
Los recibos tienen estado en el sentido en el que no solo sirven como mensajes entre cuentas pero también pueden ser almacenados en el almacenamiento de la cuenta 
para esperar a los DataReceipts.

Cada recibo tiene un [`predecessor_id`](#predecessor_id) (el que lo envió) y un [`receiver_id`](#receiver_id), la cuenta actual.

Los recibos son de dos tipos: recibos de acción o recibos de datos.

Los recibos de datos son recibos que contienen ciertos datas para algunos `ActionReceipt` con el mismo `receiver_id`.
Los recibos de datos tienen 2 campos: el identificador de datos único `data_id` y `data`, el resultado que se recibió.
`data` es un campo de tipo `Option` e indica si el resultado fue un éxito o un fracaso. Si es de tipo `Some`, significa
que la ejecución remota fue exitosa y representa el resultado de un vector de bytes.

Cada `ActionReceipt` también contiene campos relacionados a los datos:

- [`input_data_ids`](#input_data_ids) - un vector de una entrada de datos con los `data_id`s requeridos para la ejecución de este recibo.
- [`output_data_receivers`](#output_data_receivers) - un vector de receptores de datos de salida. Indica a donde enviar los datos salientes.
Cada `DataReceiver` consiste de `data_id` y un `receiver_id` para el enrutamiento.

Antes de que se ejecute un recibo de acción, todas las dependencias de entradas de datos deben ser satisfechas.
Lo que significa que se deben recibir todos los recibos de datos correspondientes.
Si alguno de las dependencias de datos no se encuentra, el recibo de acción se pospone hasta que todas las dependencias de datos faltantes terminan de llegar.

Porque la cadena y el tiempo de ejecución garantizan que ningún recibo se pierde, podemos confiar que cada recibo de acción será ejecutado eventualmente ([Explicación de conciliación de recibos](#receipt-matching)).

Cada `Receipt` tiene los siguientes campos:

#### predecessor_id

- **`tipo`**: `AccountId`

El account_id que emitió el recibo.
En caso de gas o un depósito de reembolso, el ID de cuenta es `system`.

#### receiver_id

- **`tipo`**: `AccountId`

El account_id destino.

#### receipt_id

- **`tipo`**: `AccountId`

Un id único para el recibo.

#### receipt

- **`tipo`**: [ActionReceipt](#actionreceipt) | [DataReceipt](#datareceipt)

Hay dos tipos de recibos: [ActionReceipt](#actionreceipt) y [DataReceipt](#datareceipt). Un `ActionReceipt` es una petición para aplicar [Acciones](Actions.md),
mientras que `DataReceipt` es un resultado de la aplicación de estas acciones.

## ActionReceipt

`ActionReceipt` representa una petición para aplicar acciones en el lado del `receiver_id`. Puede ser derivado como un resultado de una ejecución `Transacción`
u otro procesamiento de un `ActionReceipt`. `ActionReceipt` consite de los siguientes campos:

#### signer_id

- **`tipo`**: `AccountId`

Un account_id que firma la [transacción](Transaction.md) original.
En caso de un depósito de reembolso, el ID de cuenta es `system`.

#### signer_public_key

- **`tipo`**: `PublicKey`

La llave pública de una [Llave de acceso](../Primitives/AccessKey.md) que fue usada para firmar la transacción original.
En caso de un depósito de reembolso, la llave pública está vacía (todos los bytes son 0).

#### gas_price

- **`tipo`**: `u128`

El precio del gas se estableción en el bloque donde la [transacción](Transaction.md) original se aplicó.

#### output_data_receivers

- **`tipo`**: `[DataReceiver{ data_id: CryptoHash, receiver_id: AccountId }]`

Si un contrato inteligente termina su ejecución con algún valor (no Promesa), el tiempo de ejecución crea un [`DataReceipt`] para cada uno de los `output_data_receivers`.

#### input_data_ids

- **`tipo`**: `[CryptoHash]_`

`input_data_ids` son los recibos de dependencia de datos. `input_data_ids` corresponden a `DataReceipt.data_id`.

#### actions

- **`type`**: [`FunctionCall`](Actions.md#functioncallaction) | [`TransferAction`](Actions.md#transferaction) | [`StakeAction`](Actions.md#stakeaction) | [`AddKeyAction`](Actions.md#addkeyaction) | [`DeleteKeyAction`](Actions.md#deletekeyaction) | [`CreateAccountAction`](Actions.md#createaccountaction) | [`DeleteAccountAction`](Actions.md#deleteaccountaction)

## DataReceipt

`DataReceipt` representa el resultado final de la ejecución de algún contrato.

#### data_id

- **`tipo`**: `CryptoHash`

Un identificador `DataReceipt` único.

#### data

- **`tipo`**: `Option([u8])`

Datos asociados en bytes. `None` indica un error durante la ejecución.

# Creando recibos

Los recibos pueden ser generados durante la ejecución de una [Transacción firmada](./Transactions.md#SignedTransaction) (vea este [ejemplo](./Scenarios/FinancialTransaction.md)) 
o durante la aplicación de algún `ActionReceipt` que contiene una acción de tipo [`FunctionCall`](#actions). El resultado de `FunctionCall` puede ser ya sea
un `ActionReceipt` o un `DataReceipt` (datos retornados).

# Conciliación de recibos

El tiempo de ejecución no requiere que los Recibos vengan en un orden en particular. Cada Recibo es procesado individualmente. La meta del procesamiento de `Conciliación de Recibos` es de hacer coincidir todas los [`ActionReceipt`s](#actionreceipt) con los correspondientes [`DataReceipt`s](#datareceipt).

## Procesando ActionReceipt

Para cada [`ActionReceipt`](#actionreceipt) el tiempo de ejecución revisa si tenemos todos los [`DataReceipt`s](#datareceipt) (definido como [`ActionsReceipt.input_data_ids`](#input_data_ids)) requeridos para le ejecución. Si todos los [`DataReceipt`s](#datareceipt) requeridos están ya en el [almacenamiento](#received-datareceipt), el tiempo de ejecución puede aplicar este `ActionReceipt` inmediatamente. De lo contrario guardaremos este recibo como un [ActionReceipt pospuesto](#postponed-actionreceipt). También salvamos el [Contador de DataReceipts pendientes](#pending-datareceipt-count) y [un enlace del `DataReceipt` pendiente a el `ActionReceipt Pospuesto`](#pending-datareceipt-for-postponed-actionreceipt). Ahora el tiempo de ejecución esperará por todos los `DataReceipt`s para aplicar el `ActionReceipt Pospuesto`.

#### ActionReceipt Pospuesto

Un recibo el cual el tiempo de ejecución almacena hasta que el [`DataReceipt`s](#datareceipt) designado llega.

- **`llave`** = `account_id`,`receipt_id`
- **`valor`** = `[u8]`

_Donde `account_id` es [`Receipt.receiver_id`](#receiver_id), `receipt_id` es [`Receipt.receiver_id`](#receipt_id) y el valor es un [`Recibo`](#receipt) serializado (el cual el [tipo](#type) debe de ser [ActionReceipt](#actionreceipt))._

#### Contador de DataReceipt Pendiente

Un contador que cuenta los [`DataReceipt`s](#DataReceipt) pendientes para un [Recibo Pospuesto](#postponed-receipt) inicialmente establecido a la longitud de los [`input_data_ids`](#input_data_ids) faltantes de los `ActionReceipt` entrantes. Se decrementa con cada [`DataReceipt`](#datareceipt) nuevo recibido:

- **`llave`** = `account_id`,`receipt_id`
- **`valor`** = `u32`

_Donde `account_id` es AccountId, `receipt_id` es un CryptoHash y el valor es un entero._

#### DataReceipt Pendiente para ActionReceipt Pospuesto

Indexamos cada `DataReceipt` pendiente para que cada vez que llega un [`DataReceipt`](#datareceipt) nuevo lo conectemos con su [Recibo Pospuesto](#postponed-receipt) al que pertenece.

- **`llave`** = `account_id`,`data_id`
- **`valor`** = `receipt_id`

## Procesando DataReceipt

#### DataReceipt Recibidos

Primero que nada, el tiempo de ejecución guarda los `DataReceipt` entrantes en el almacenamiento como:

- **`llave`** = `account_id`,`data_id`
- **`valor`** = `[u8]`

_Donde `account_id` es [`Receipt.receiver_id`](#receiver_id), `data_id` es [`DataReceipt.data_id`](#data_id) y el valor es un [`DataReceipt.data`](#data) (que es típicamente un resultado serializado de la llamada a un contrato en particular)._

Después, el tiempo de ejecución revisa si hay algún [`ActionReceipt Pospuesto`](#postponed-actionreceipt) esperando por este `DataReceipt` consultando al [`DataReceipt Pendiente` a el Recibo Pospuesto](#pending-datareceipt-for-postponed-actionReceipt). Si no hay un `receipt_id` pospuesto aún, no hacemos nada. Si hay un `receipt_id` pospuesto, hacemos lo siguiente:

- decrementa el [`Contador de Datos Pendientes`](#pending-datareceipt-count) para el `receipt_id` pospuesto.
- remueve el [`DataReceipt Pendiente` encontrado para el `ActionReceipt Pospuesto`](#pending-datareceipt-for-postponed-actionreceipt)

Si el [`Contador de Datos Pendiente`](#pending-datareceipt-count) es 0 significa que todos los [`Receipt.input_data_ids`](#input_data_ids) están almacenados y el tiempo de ejecución puede aplicar el [Recibo Pospuesto](#postponed-receipt) seguramente y lo remueve del almacenamiento.

## Caso 1: Llamada a múltiples contratos y esperar respuestas

Supongamos que el tiempo de ejecución tiene el siguiente `ActionReceipt`:

```python
# Los campos no relevantes son omitidos
Receipt{
    receiver_id: "alice",
    receipt_id: "693406"
    receipt: ActionReceipt {
        input_data_ids: []
    }
}
```

Si la ejecución regresa Result::Value

Supongamos que el tiempo de ejecución recibió el siguiente `ActionReceipt` (usamos un pseudo código parecido a python):

```python
# Los campos no relevantes son omitidos.
Receipt{
    receiver_id: "alice",
    receipt_id: "5e73d4"
    receipt: ActionReceipt {
        input_data_ids: ["e5fa44", "7448d8"]
    }
}
```

No podemos aplicar este recibo inmediatamente: hay DataReceipts faltantes con los ID: ["e5fa44", "7448d8"]. El tiempo de ejecución hace lo siguiente:

```python
postponed_receipts["alice,5e73d4"] = borsh_serialize(
    Receipt{
        receiver_id: "alice",
        receipt_id: "5e73d4"
        receipt: ActionReceipt {
            input_data_ids: ["e5fa44", "7448d8"]
        }
    }
)
pending_data_receipt_store["alice,e5fa44"] = "5e73d4"
pending_data_receipt_store["alice,7448d8"] = "5e73d4"
pending_data_receipt_count = 2
```

_Nota: los Recibos subsecuentes pueden llegar en el bloque actual o el siguiente, es por eso que guardamos los [ActionReceipt Pospuestos](#postponed-actionreceipt) en el almacenamiento_

Luego llega el primer `Pending DataReceipt` pendiente:

```python
# Los campos no relevantes son omitidos.
Receipt {
    receiver_id: "alice",
    receipt: DataReceipt {
        data_id: "e5fa44",
        data: "some data for alice",
    }
}
```

```python
data_receipts["alice,e5fa44"] = borsh_serialize(Receipt{
    receiver_id: "alice",
    receipt: DataReceipt {
        data_id: "e5fa44",
        data: "some data for alice",
    }
};
pending_data_receipt_count["alice,5e73d4"] = 1`
del pending_data_receipt_store["alice,e5fa44"]
```

Y finalmente el último `Pending DataReceipt` llega:

```python
# Los campos no relevantes son omitidos.
Receipt{
    receiver_id: "alice",
    receipt: DataReceipt {
        data_id: "7448d8",
        data: "some more data for alice",
    }
}
```

```python
data_receipts["alice,7448d8"] = borsh_serialize(Receipt{
    receiver_id: "alice",
    receipt: DataReceipt {
        data_id: "7448d8",
        data: "some more data for alice",
    }
};
postponed_receipt_id = pending_data_receipt_store["alice,5e73d4"]
postponed_receipt = postponed_receipts[postponed_receipt_id]
del postponed_receipts[postponed_receipt_id]
del pending_data_receipt_count["alice,5e73d4"]
del pending_data_receipt_store["alice,7448d8"]
apply_receipt(postponed_receipt)
```

## Error de Validación de Recibo

Se realiza una validación de postprocesamiento después de que el recibo de acción es aplicado. La validación incluye:
* Si los recibos generados son válidos. Un recibo generado puede ser inválido, si, por ejemplo, una llamada de función
genera  un recibo para llamar otra función en algún otro contrato, pero el nombre del contrato en inválido. Aquí están
los dos tipos de errores principales:
- el id de cuenta es inválido. Si el id receptor del recibo es inválido, un error
```rust
/// El `receiver_id` de un Recibo no es válido.
InvalidReceiverId { account_id: AccountId },
``` 
es regresado.
- alguna acción es inválida. Los errores regresados aquí son los mismos que los errores de validación mencionados en [acciones](Actions.md).
* Si la cuenta todavía tiene el balance suficiente para pagar por el almacenamiento. Si, por ejemplo, la ejecución de una acción de llamada de función
lleva a algunos recibos que requiere que genere transferencia para ser generado como un resultado, la cuenta tal vez no tenga el suficiente
balance después de que la cantidad transferida es deducida. En este caso, un
```rust
/// ActionReceipt can't be completed, because the remaining balance will not be enough to cover storage.
/// ActionReceipt no puede ser completado, porque el balance restante no será suficiente para cubrir el almacenamiento.
LackBalanceForState {
    /// An account which needs balance
    account_id: AccountId,
    /// Balance required to complete an action.
    amount: Balance,
},
```

'''
'''--- specs/RuntimeSpec/Refunds.md ---
# Reembolsos

Cuando la ejecución de un recibo falla o hay algún monto que no se ha usado de gas prepagado después de una función de llamada, el tiempo de ejecución genera recibos de reembolso.

Hay 2 tipos de reembolsos.
- Reembolsos por recibo fallido de depósitos ligados. Vamos a llamarles reembolsos de depósitos.
- Reembolsos por el gas no usado y tarifas. Vamos a llamarles reembolsos de gas.

Los recibos de reembolso se identifican por tener `predecessor_id == "system"`. Son también especiales porque no cuesta gas generarlos o ejecutarlos. Como resultado, estos no contribuyen al límite de gas del bloque.

Si la ejecución de un reembolso falla, el monto del reembolsada se quema.
El recibo de reembolso es un `ActionReceipt` que consiste de una sola acción `Transfer` con el monto `deposit` del reembolso.

## Reembolsos de depósito

Los reembolsos de depósito son generados cuando un recibo de acción falla su ejecución. Todos los montos de depósito ligados se suman y
se envían como un reembolso a `predecessor_id`. Porque solo el predecesor puede ligar depósitos.

Los reembolsos de depósito tienen los siguientes campos en el ActionReceipt:
- `signer_id` es `system`
- `signer_public_key` es una llave ED25519 con datos iguales a 32 bytes de `0`.

## Reembolsos de gas

Los reembolsos de gas son generados cuando un recibo usó un monto de gas menor al monto de gas ligado.

Si la ejecución del recibo tiene éxito, el monto de gas es igual a `prepaid_gas + execution_gas - used_gas`.

Si la ejecución del recibo falla, el monto del gas es igual a `prepaid_gas + execution_gas - burnt_gas`. 

La diferencia entre `burnt_gas` y `used_gas` es el `used_gas` que también incluye las tarifas y el gas prepagado de
recibos recientemente creados, e.j. de llamadas cross-contrato en acciones de funciones de llamada.

Luego el monto del gas es convertido a tokens multiplicando por el precio del gas en el que la transacción original fue originada.

Los reembolsos de gas tienen los siguientes campos en el ActionReceipt:
- `signer_id`es el `signer_id` del recibbo que genera este reembolso.
- `signer_public_key` es el `signer_public_key` de el recibo que genera este reembolso.

## Reembolsos del allowance de la llave de acceso

Cuando una cuenta usó una llave de acceso restringida con `FunctionCallPermission`, podría tener un allowance limitado.
El allowance se cargó por el monto completo de las tarifas del recibo incluyendo el gas prepagado completo.
Para reembolsar el allowance distinguimos entre reembolsos de Depósito y reembolsos de Gas usando `signer_id` en el recibo de acción.

Si el `signer_id == receiver_id && predecessor_id == "system"` significa que es un reembolso de gas y el tiempo de ejecución debaría de tratar de reembolsar el allowance.

Note, que no es siempre posible el reembolso del allowance, porque la llave de acceso puede ser borrada entre el momento en que la transacción fue
emitida y cuando el reembolso de gas llegó. En este caso hacemos el mejor esfuerzo en reembolsar el allowance. Esto significa:
- la llave de acceso en la cuenta `signer_id` con la llave de acceso pública `signer_public_key` debe de existir
- el permiso de la llave de acceso debe de ser `FunctionCallPermission`
- el allowance se debe establecer a un valor limitado `Some`, en vez de un allowance ilimitado (`None`)
- el tiempo de ejecución usa una agregación staurada para incrementar el allowance, para así evitar desbordamientos

'''
'''--- specs/RuntimeSpec/Runtime.md ---
# Tiempo de ejecución

El tiempo de ejecución es usado para ejecutar contratos inteligentes y otras acciones creadas por los usuarios y preservar el estado entre ejecuciones.
Puede ser descrito desde tres ángulos diferentes: ir paso a paso por varios escenarios, describiendo los componentes del tiempo de ejecución,
y describiendo las funciones que el tiempo de ejecución realiza.

## Escenarios

- Transacciones financieras -- examinamos qué pasa cuando el tiempo de ejecución necesita procesar una simple transacción financiero;
- Función cross-contrato -- el escenario cuando el usuario llama a un contrato que a su vez llama a otro contrato.

## Componentes

Los componentes del tiempo de ejecución pueden ser descritos a través de los crates:

- `near-vm-logic` -- describe la interface que los contratos inteligentes usan para interactuar con la blockchain.
  Encapsula el comportamiento de la blockchain que es visible al contrato inteligente, ej. libre de reglas, reglas de acceso al almacenamiento, reglas de promesa;
- `near-vm-runner` crate -- envuelve a "Wasmer" que se encarga de la ejecucó del código del contrato inteligente. Expone la interface
  proporcionada por `near-vm-logic` al contrato inteligente;
- `runtime` crate -- encapsula la lógica de cómo las transacciones y recibos deben de ser manejados. Si encuentra
  una llamada al contrato inteligente dentro de una transacción o recibo llama a `near-vm-runner`, para las demás acciones, como
  la creación de una cuenta, las procesa en el momento.

Los crates de utilidades son:

- `near-runtime-fees` -- un crate conveniente que encapsula la configuración de las tarifas. Tal vez nos deshagamos de el después;
- `near-vm-errors` -- contiene la jerarquía de errores que pueden ocurrir durante una transacción o procesamiento de recibo;
- `near-vm-runner-standalone` -- una herramiento ejecutable que permite la ejecución del tiempo de ejecución sin la necesidad de la blockchain, ej. para
  pruebas de integración de proyectos de L2;
- `runtime-params-estimator` -- genera los tiempos de ejecución y genera la configuración de las tarifas.

Aparte de eso, desde los componentes que describimos [la Especificación de Enlaces](BindingsSpec/BindingsSpec.md) que es una
parte importante del tiempo de ejecución que especifica las funciones que el contrato inteligente puede llamar desde su host -- el tiempo de ejecución.
La especificación está definida en `near-vm-logic`, pero está expuesta al contrato inteligente en `near-vm-runner`.

## Funciones

- Consumo y producción de recibos
- Tarifas
- Máquina virtual
- Verificación

'''
'''--- specs/RuntimeSpec/Scenarios/CrossContractCall.md ---
# Llamado cross-contrato

Esta guía asume que ya leíste la sección [Transacciones Financieras](FinancialTransaction.md).

Supongamos que Alices está llamando a una función `reserve_trip(city: String, date: u64)` en un contrato inteligente desplegado en una
cuenta llamada `travel_agency` que a su vez llama a `reserve(date: u64)` en un contrato inteligente desplegado en otra cuenta llamada `hotel_near` y liga
un método callback al método `hotel_reservation_complete(date: u64)` en `travel_agency`.

<img src="../../images/receipt_flow_diagram.svg" />

## Pre-requisitos

Alices puede llamar a `travel_agency` de varias maneras diferentes.

En el escenario más simple Alice tiene una cuenta `alice_near` y tiene una llave de acceso completo.
Desoués ella crea la siguiente transacción que llama a `travel_agency`:

```
Transaction {
    signer_id: "alice_near",
    public_key: "ed25519:32zVgoqtuyRuDvSMZjWQ774kK36UTwuGRZMmPsS6xpMy",
    nonce: 57,
    receiver_id: "travel_agency",
    block_hash: "CjNSmWXTWhC3EhRVtqLhRmWMTkRbU96wUACqxMtV1uGf",
    actions: vec![
        Action::FunctionCall(FunctionCallAction {
            method_name: "reserve_trip",
            args: "{\"city\": \"Venice\", \"date\": 20191201}",
            gas: 1000000,
            tokens: 100,
        })
    ],
}
```

Aquí la llave pública corresponde a la llave de acceso completo de la cuenta `alice_near`. Todos los otros campos en `Transaction` se
analizaron más a fondo en la sección [Financial Transaction](FinancialTransaction.md). La acción `FunctionCallAction` describe como
el contrato debe de ser llamado. El campo `receiver_id` en `Transaction` ya establece cuál contrato debe de ser ejecutado,
`FunctionCallAction` simplemente describe como debería de ser ejecutado. Curiosamente, los argumentos son solo un blob de bytes,
le corresponde al desarrolador del contrato cuál formato de serialización escoge para sus argumentos. En este ejemplo, el desarrollador
del contrato ha escogido usar JSON, entonces se espera que la herramienta que Alice use para crear esta transacción use JSON también
para pasar los argumentos. `gas` declara cuánto gas `alice_near` ha prepagado para las tarifas calculadas dinámicamente de las ejecuciones del
contrato inteligente y otras acciones que esta transacción pueda crear. Los `tokens` son el monto que `alice_near` agrega
para ser depositado a cualquier contrato inteligente que esté llamando. Note que, el `gas` y los `tokens` están en diferentes unidades de
medición.

Ahora, considere un escenario un poco más complejo. En este escenario Alice usa una llave de acceso restringida para llamar a esta función.
Esto es que el permiso de esta llave de acceso no es `AccessKeyPermission::FullAccess` y por el contrario el permiso es: `AccessKeyPermission::FunctionCall(FunctionCallPermission)` donde

```
FunctionCallPermission {
    allowance: Some(3000),
    receiver_id: "travel_agency",
    method_names: [ "reserve_trip", "cancel_trip" ]
}
```

Este escenario podría surgir cuando algún padre de Alice le dió un acceso restringido a la cuenta `alice_near` al
crear una clave de acceso que se puede utilizar estrictamente para la gestión de viajes.
Esta llave de acceso permite hasta `3000` tokens para ser gastados (que incluye transferencias de tokens y pagos por gas), solo puede
ser usado para llamar a `travel_agency` y solo puede ser usado con los métodos `reserve_trip` and `cancel_trip`.
La manera en que el tiempo de ejecución maneja este caso es casi exactamente igual al pasado, con la única diferencia en como verifica
la firma en la transacción firmada, y que además revisa el allowance para que no sea excedido.

Finalmente, en el último escenario, Alice no tiene una cuenta (o la existencia de `alice_near` es irrelevante). Sin embargo,
alice tiene una llave de acceso completo o restringido directamente en la cuenta `travel_agency`. En ese caso `signer_id == receiver_id` en
el objeto `Transaction` y el tiempo de ejecución convertirá la transacción en el primer recibo y aplicará ese recibo en el mismo bloque.

Esta sección se enfocará en el primer escenario, dado que los otros dos son lo mismo con algunas diferencias menores.

## Transacción a recibo

El proceso de convertir una transacción a un recibo es muy similar a la [Transacción Financiera](FinancialTransaction.md)
con varios puntos clave a notar:

- Como alice liga 100 tokens a la llamada de función, los restamos de `alice_near` al convertir la transacción en recibo,
  similar a la transacció financiera regular;
- Como estamos agregando 1000000 de gas prepagado, no solo restaremos el costo del gas por el procesamiento del recibo de `alice_near`,
  sino que también se comprará 1000000 de gas usando el precio de gas actual.

## Procesando el recibo `reserve_trip`

El recibo creado en el fragmento que aloja a `alice_near` eventualmente llegará al fragmento que aloja a la cuenta `travel_agency`.
Será procesado en `Runtime::apply` que revisará que el recibo no tenga dependencias de datos (que es el caso porque esta llamada
de función no es un método callback) y llamará a `Runtime::apply_action_receipt`.
En este punto el procesamiento del recibo es similar al procesamiento de recibos que se ve en la sección [Transacciones Financieras](FinancialTransaction.md),
con la diferencia de que aquí llamaremos a `action_function_call` y este hará lo siguiente:

- Recuperar el código Wasm del contrato inteligente (puede ser de la base de datos o del cache);
- Inicializa el contexto de tiempo de ejecución `VMContext` y crea `RuntimeExt` que provee el acceso al trie cuando el contrato inteligente
  llama al API del almacenamiento. Específicamente los argumentos `"{\"city\": \"Venice\", \"date\": 20191201}"` serán establecidos en `VMContext`.
- Llama a `near_vm_runner::run` que hace lo siguiente:
  - Inyecta gas, pilas y otras formas de medición;
  - Verifica que el código Wasm no usa valores flotantes;
  - Revisa que los enlaces de funciones API que el contrato inteligente está tratando de llamar son aquellos que `near_vm_logic` proporcionó;
  - Compila el código Wasm a un binario nativo;
  - Llama a `reserve_trip` en el contrato inteligente.
    - Durante la ejecución del contrato inteligente, en algún punto, se llamará a `promise_create` y a `promise_then`, que llamará
      al método en `RuntimeExt` que registrará esas dos promesas fueron creadas y que la segunda debe
      esperar a la primera. Específicamente, `promise_create` llamará a `RuntimeExt::create_receipt(vec![], "hotel_near")`
      regresando `0` y después a `RuntimeExt::create_receipt(vec![0], "travel_agency")`;
- Después `action_function_call` recolecta los recibos de `VMContext` junto con el resultado de la ejecución, logs e información
  del gas usado;
- Luego `apply_action_receipt` repasa los recibos recolectados de cada acción y los regresa al final de `Runtime::apply` junto con
  otros recibos.

## Procesando el recibo `reserve`

Este recibo tendrá `output_data_receivers` con un elemento que corresponde al recibo que llama a `hotel_reservation_complete`,
que le dirá al tiempo de ejecución que debe de crear un `DataReceipt` y enviarlo hacia `travel_agency` una vez que la ejecución de `reserve(date: u64)` fue completada.

El resto de la ejecución del contrato inteligente es similar a la anterior.

## Procesando el recibo `hotel_reservation_complete`

Al recibir el recibo `hotel_reservation_complete` el tiempo de ejecución notará que su `input_data_ids` no está vacío
lo que significa que no puede ser ejecutado hasta que el recibo `reserve` sea completado. El recibo será guardado en el trie junto
con el contador de cuantos `DataReceipt` está esperando.

En este punto no llamará al contrato inteligente Wasm.

## Procesando el `DataReceipt`

Una vez que el tiempo de ejecución recibe el `DataReceipt`, toma el recibo con la llamada de función `hotel_reservation_complete`
y ejecuta siguiendo los mismos pasos de ejecución que el recibo `reserve_trip`.

'''
'''--- specs/RuntimeSpec/Scenarios/FinancialTransaction.md ---
# Transacción financiera

Supongamos que Alice quiere transferir 100 tokens a Bob.
En este caso estamos hablando de tokens de Near Protocol nativos, opuesto a los tokens definidos por el usuario implementeados a través de contratos inteligentes.
Hay varias formas en las que esto se puede hacer:

- Transferencia directa a través de una transacción que contenga un acción de transferencia;
- Alice llamando a un contrato inteligente que a su vez crea una transacción financiera hacia Bob.

En esta sección hablaremos acerca del escenario anterior más simple.

## Pre-requisitos

Para que esto funcione Alice y Bob necesitan tener _cuentas_ y un acceso a ellas a través de
_las llaves de acceso completo_.

Supongamos que Alices tiene la cuenta `alice_near` y Bob tiene la cuenta `bob_near`. También, hace ya tiempo,
cada uno de ellos creó una public-secret key-pair (par de llaves públicas-privadas), guardó la llave secreta en algún lugar (e.j. en una aplicación de billetera)
y creó una llave de acceso completo con la llave pública de la cuenta.

También necesitamos asumir que Alice y Bob tienen algún número de tokens en sus cuentas. Alice necesita >100 tokens en su cuenta
para que así ella pueda transferir 100 tokens a Bob, pero también Alice y Bob necesitan tener algunos tokens para pagar por la _renta_ de sus cuentas --
que esencialmente es el costo del almacenamiento ocupado por la cuenta en la red de Near Protocol.

## Creando un transacción

Para enviar la transacción Alice o Bob necesitan ejecutar un nodo.
Sin embargo, Alice necesita una manera de crear y firmar una estructura de transacción.
Supongamos que alice usa near-shell o alguna otra herramienta de terceros para eso.
La herramiento entonces crea la siguiente estructura:

```
Transaction {
    signer_id: "alice_near",
    public_key: "ed25519:32zVgoqtuyRuDvSMZjWQ774kK36UTwuGRZMmPsS6xpMy",
    nonce: 57,
    receiver_id: "bob_near",
    block_hash: "CjNSmWXTWhC3EhRVtqLhRmWMTkRbU96wUACqxMtV1uGf",
    actions: vec![
        Action::Transfer(TransferAction {deposit: 100} )
    ],
}
```

Que contiene una acción de transferencia de token, el ide de la cuenta que firma la transacción (`alice_near`)
la cuenta hacia la que va la transacción (`bob_near`). Alice también usa la llave pública
asociada con una de las llaves de acceso completo de la cuenta `alice_near`.

Adicionalmente, Alice usa el _nonce_ que es un valor único que permite a Near Protocol diferenciar transacciones (en caso de que haya varias transacciones entrando rápidamente) 
que debería estar incrementando estrictamente con cada transacción. A diferencia de Ethereum, donde los nonces son asociados con las llaves de acceso, opuesto a
las cuentas, con esto varios usuarios usando las mismas cuentas a través de diferentes llaves de acceso no necesitan preocuparse de reusar accidentalmente
los nonces de las demás personas.

El hash del bloque es usado para calcular la transacción "freshness". Es usado para asegurarse de que la transacción no
se pierda (en algún lugar de la red por ejemplo) y despues llegar horas, días o años después cuando dejó de ser relevante
o indeseable de ejecutar. La transacción no necesita llegar a un bloque en específico, por el contrario se requiere que llegue
a un número determinado de bloques desde el bloque identificado por el `block_hash` (desde 2019-10-27 el valor constante es 10 bloques).
Cualquier transacción llegando por debajo de este límite es considerada inválida.

near-shell u otra herramienta que Alice usa firma la transacción: calculando el hash de la transacción y firmándola
con la llave secreta, resultando en un objeto de tipo `SignedTransaction`.

## Enviando la transacción

Para enviar la transacción, near-shell se conecta a través de RPC a cualquier node de Near Protocol y lo envía.
Si los usuarios quieren esperar hasta que la transacción sea procesada, ellos pueden usar el método JSONRPC `send_tx_commit` que espera por
que la transacción aparezca en un bloque. De otra manera el usuario puede usar `send_tx_async`.

## De transacción a recibo

Nos saltamos los detalles acerca de como la transacción llega para ser procesada por el tiempo de ejecución, porque es parte de la discusión acerca de la capa de blockchain.
Consideramos el momento en donde `SignedTransaction` está siendo trasladada a `Runtime::apply` del crate `runtime`.
`Runtime::apply` inmediatamente pasa la transacción a `Runtime::process_transaction`
que a su vez hace lo siguiente:

- Verifica que la transacción sea válida;
- Aplica los cargos reversibles e irreversibles a la cuenta `alice_near`;
- Crea un recibo con el mismo conjunto de acciones dirigidas hacia `bob_near`.

Los primeros dos pasos se realizan dentro del método `Runtime::verify_and_charge_transaction`.
Específicamente hace las siguientes revisiones:

- Verifica que `alice_near` y `bob_near` son ids de cuenta sintácticamente válidas;
- Verifica que la firma de la transacción es correcta basándose en el hash de la transacción ligada a la llave pública;
- Recupera el último estado de la cuenta `alice_near` y simúltaneamente revisa que exista;
- Recupera el estado de las llave de acceso que `alice_near` usó para firmar la transacción;
- Revisa que el nonce de la transacción es mayor al nonce de la última transacción ejecutada con esa llave de acceso;
- Checa si la cuenta que firmó la transacción es la misma que cuenta que la recibe. En nuestro caso el remitente (`alice_near`) y el receptor
(`bob_near`) no son los mismos. Aplicamos diferentes tarifas si el receptor y el remitente son la misma cuenta;
- Aplica la renta del almacenamiento a la cuenta `alice_near`;
- Calcula cuanto gas necesitamos gastar para convertir esta transacción a un recibo;
- Calcula cuanto balance necesitamos substraer de `alice_near`, en este caso son 100 tokens;
- Deduce los tokens y el gas del balance de `alice_near`, usando el precio actual del gas;
- Revisa si después de todas estas operaciones la cuenta tiene el balance suficienta para pagar por la renta de los siguientes bloques
  (una constante enconómica definida por el Protocolo Near). De lo contrario la cuenta estará libre para una eliminación inmediata, cosa que no queremos;
- Actualiza la cuenta alice_near con el nuevo saldo y la clave de acceso usada con el nuevo nonce;
- Calcula la recompensa que debe ser pagada a los validadores por el gas quemado.

Si alguna de las operaciones falla, se revertirán todos los cambios.

## Procesando el recibo

El recibo creado en la sección pasada eventualmente llegará al tiempo de ejecución en el fragmento que aloja a la cuenta `bob_near`.
Nuevamente, será procesada por `Runtime::apply` que inmediatamente llamará a `Runtime::process_receipt`.
Revisará que este recibo no tiene dependencias de datos (que solo es el caso para las llamadas de función) y después llamara a `Runtime::apply_action_receipt` en `TransferAction`.
`Runtime::apply_action_receipt` realizará las siguientes revisiones:

- Recupera el estado de la cuenta `bob_near` si todavía existe (es posible que Bob haya borrado su cuenta al mismo tiempo que la transacción de transferencia);
- Aplica la renta de la cuenta de Bob;
- Calcula el costo de procesar un recibo y una acción de transferencia;
- Revisa si `bob_near` todavía existe y si deposita los tokens transferidos; 
- Calcula la recompensa que debe ser pagada a los validadores por el gas quemado.

'''
'''--- specs/RuntimeSpec/Scenarios/Scenarios.md ---
# Escenarios

En la siguiente sección repasaremos los escenarios comunes de los que el tiempo de ejecución se encarga.
- [Transacción financiera](FinancialTransaction.md)
- [Llamada cross-contrato](CrossContractCall.md)

'''
'''--- specs/RuntimeSpec/Transactions.md ---
# Transacciones

Una transacción en Near es una lista de [acciones](Actions.md) e información adicional:

```rust
pub struct Transaction {
    /// Una cuenta en cuyo nombre se firma la transacción
    pub signer_id: AccountId,
    /// Una llave de acceso que fue usada para firmar la transacción
    pub public_key: PublicKey,
    /// Nonce es usado para determinar el orden de transacción en el grupo.
    /// Se incrementa por una combinación de `signer_id` y `public_key`
    pub nonce: Nonce,
    /// Cuenta receptora para esta transacción. Si
    pub receiver_id: AccountId,
    /// El hash del bloque en la blockchain sobre la cual la transacción dada es válida
    pub block_hash: CryptoHash,
    /// Una lista de acciones a ser aplicada
    pub actions: Vec<Action>,
}
```

## Transacciones firmadas

`SignedTransaction` es lo que un nodo recibe de una billetera a través de un endpoint JSON-RPC y después al fragmento en donde `receiver_id` reside. La firma prueba la propiedad de la `public_key` correspondiente (que es una llave de acceso para una cuenta en particular) así como la autenticidad de la transacción en sí.

```rust
pub struct SignedTransaction {
    pub transaction: Transaction,
    /// La fima de un hash de una Transacción serializada Borsh
    pub signature: Signature,
```

Dale un vistazo a algunos [escenarios](Scenarios/Scenarios.md) sobre como las transacciones pueden ser aplicadas.

## Transacciones por lotes

Una `Transacción` puede contener una lista de acciones. Cuando hay más de una acción en una transacción, nos referimos a esta
transacción como transacción en lote. Cuando dicha transacción es aplicada, es equivalente a aplicar cada una de las acciones
por separado, excepto por: 
* Despúes de procesar una acción de tipo `CreateAccount`, el resto de la acción es aplicada en el nombre de la cuenta que apenas fue creada.
Esto permite a una, en una transacción, crear una cuenta, desplegar un contrato en la cuenta, y llamar alguna función de inicialización
en el contrato.
* La acción `DeleteAccount`, si está presente, debe de ser la última acción en la transacción.

El número de acciones en una transacción está limitada por `VMLimitConfig::max_actions_per_receipt`, del cual el valor actual
es 100.

## Transacciones, Validaciones y Errores

Cuando una transacción es recibida, varias revisiones serán realizadas para asegurar su validez. Esta sección enlista las revisiones
y potenciales errores a ser retornados cuando fallan.

### Validación básica

Una validación básica de una transacción puede ser realizada sin el estado. Dicha validación incluye
- Si `signer_id` es válido. Si no, un error
```rust
/// TX signer_id no está en un formato válido o no satisface los requerimientos, vea `near_core::primitives::utils::is_valid_account_id`
InvalidSignerId { signer_id: AccountId },
```
es regresado.
- Si `receiver_id` es válido. Si no, un error
```rust
/// TX receiver_id no está en un formato válido o no satisface los requerimientos, vea `near_core::primitives::utils::is_valid_account_id`
InvalidReceiverId { receiver_id: AccountId },
```
es regresado.
- Si `signature` es firmado por `public_key`. Si no, un error
```rust
/// TX signature no es válido
InvalidSignature
```
es regresado.
- Si el número de acciones incluídas en la transacción es mayor que `max_actions_per_receipt`. Si no, un error
```rust
 /// El número de acciones excede el límite dado.
TotalNumberOfActionsExceeded { total_number_of_actions: u64, limit: u64 }
```
es regresado.
- Dentro de las acciones en la transacción, si `DeleteAccount` está presente, es la última acción. Si no, un error
```rust
/// La acción eliminar debe ser una acción final en una transacción
DeleteActionMustBeFinal
```
es regresado.
- Si el gas prepagado total no excede `max_total_prepaid_gas`. Si no, un error
```rust
/// El gas prepagado total (para todas las acciones dadas) excedió el límite.
TotalPrepaidGasExceeded { total_prepaid_gas: Gas, limit: Gas }
```
es regresado.
- Si cada acción incluída es válida. Los detalles de esta revisión pueden encontrarse en [acciones](Actions.md).

### Validación con el estado

Después de que la validación básica es terminada, verificamos la transacción con el estado actual para realizar una validación adicional. Esto incluye
- Si `signer_id` existe. Si no, un error
```rust
/// TX signer_id no fue encontrado en el almacenamiento
SignerDoesNotExist { signer_id: AccountId },
```
es regresado.

- Si el nonce de la transacción es mayor que el nonce existente en la llave de acceso. Si no, un error
```rust
/// El nonce de la transacción debe ser account[access_key].nonce + 1
InvalidNonce { tx_nonce: Nonce, ak_nonce: Nonce },
```
error es regresado.

- Si la cuenta `signer_id` tiene balance suficiente para cubrir el costo de la transacción. Si no, un error
```rust
 /// La cuenta no tiene el balance suficiente para cubrir el costo de la TX
NotEnoughBalance {
    signer_id: AccountId,
    balance: Balance,
    cost: Balance,
}
```
error es regresado.

- Si la transacción es firmada por una llave de acceso para llamadas de función y la esta no tiene el allowance suficiente
para cubrir el costo de la transacción, un error
```rust
/// La llave de acceso no tiene el allowance suficiente para cubrir el costo de la transacción
NotEnoughAllowance {
    account_id: AccountId,
    public_key: PublicKey,
    allowance: Balance,
    cost: Balance,
}
```
error es regresado.

- Si la cuenta `signer_id` no tiene el balance suficiente para cubrir su almacenamiento después de pagar el costo de la transacción, un error
```rust
/// La cuenta que firma no tiene el balance suficiente después de la transacción.
LackBalanceForState {
    /// Una cuenta que no tiene el balance suficiente para cubrir el almacenamiento.
    signer_id: AccountId,
    /// Balance requerido para cubrir el estado.
    amount: Balance,
}
```
error es regresado.

- Si una transacción es firmada por una llave de acceso para llamadas de función, los siguientes errores son posibles:
* `InvalidAccessKeyError::RequiresFullAccess` si la transacción contiene más de una acción o si la única acción que contiene
no es una acción del tipo `FunctionCall`.
* `InvalidAccessKeyError::DepositWithFunctionCall` si la acción de llamada de función tiene un `deposit` diferente de 0.

```rust
/// El `receiver_id` de la transacción no cuadra con la llave de acceso del receiver_id
InvalidAccessKeyError::ReceiverMismatch { tx_receiver: AccountId, ak_receiver: AccountId },
```
es retornado cuando el `receiver_id` de la transacción no cuadra con el `receiver_id` de la llave de acceso.
*
```rust
/// El nombre del método de la transaccón no esta permitido por la llave de acceso
InvalidAccessKeyError::MethodNameMismatch { method_name: String },
```
es retornado si el nombre del método que la transacción trata de llamar no es permitido por la llave de acceso.

'''
'''--- specs/SUMMARY.md ---
# Summary

- [Introduction](README.md)
- [Terminology](Terminology.md)
- [Data Structures](DataStructures/README.md)
  - [Account](DataStructures/Account.md)
  - [Access Key](DataStructures/AccessKey.md)
  - [Transaction](DataStructures/Transaction.md)
- [Architecture](Architecture.md)
- [Chain specification](ChainSpec/README.md)
  - [Network specification](NetworkSpec/NetworkSpec.md)
    - [Messages](NetworkSpec/Messages.md)
    - [RoutingTableExchangeAlgorithm](NetworkSpec/RoutingTableExchangeAlgorithm.md)
  - [Consensus](ChainSpec/Consensus.md)
  - [Upgradability](ChainSpec/Upgradability.md)
  - [Transactions](ChainSpec/Transactions.md)
  - [Light Client](ChainSpec/LightClient.md)
- [Runtime specification](RuntimeSpec/README.md)
  - [Runtime](RuntimeSpec/Runtime.md)
  - [Applying Chunk](RuntimeSpec/ApplyingChunk.md)
  - [FunctionCall](RuntimeSpec/FunctionCall.md)
  - [Transactions](RuntimeSpec/Transactions.md)
  - [Actions](RuntimeSpec/Actions.md)
  - [Receipts](RuntimeSpec/Receipts.md)
  - [Refunds](RuntimeSpec/Refunds.md)
  - [Runtime Fees](RuntimeSpec/Fees/Fees.md)
  - [Scenarios](RuntimeSpec/Scenarios/Scenarios.md)
    - [Financial Transaction](RuntimeSpec/Scenarios/FinancialTransaction.md)
    - [Cross-Contract Call](RuntimeSpec/Scenarios/CrossContractCall.md)
  - [Components](RuntimeSpec/Components/Components.md)
    - [Runtime crate](RuntimeSpec/Components/RuntimeCrate.md)
    - [Bindings Specification](RuntimeSpec/Components/BindingsSpec/BindingsSpec.md)
      - [Registers API](RuntimeSpec/Components/BindingsSpec/RegistersAPI.md)
      - [Trie API](RuntimeSpec/Components/BindingsSpec/TrieAPI.md)
      - [Promises API](RuntimeSpec/Components/BindingsSpec/PromisesAPI.md)
      - [Context API](RuntimeSpec/Components/BindingsSpec/ContextAPI.md)
      - [Economics API](RuntimeSpec/Components/BindingsSpec/EconomicsAPI.md)
      - [Math API](RuntimeSpec/Components/BindingsSpec/MathAPI.md)
      - [Miscellaneous API](RuntimeSpec/Components/BindingsSpec/MiscellaneousAPI.md)
- [GenesisConfig](GenesisConfig/GenesisConfig.md)
  - [RuntimeConfig](GenesisConfig/RuntimeConfig.md)
    - [RuntimeFeeConfig](GenesisConfig/RuntimeFeeConfig.md)
      - [AccessKeyCreationConfig](GenesisConfig/RuntimeFeeConfig/AccessKeyCreationConfig.md)
      - [ActionCreationConfig](GenesisConfig/RuntimeFeeConfig/ActionCreationConfig.md)
      - [DataReceiptCreationConfig](GenesisConfig/RuntimeFeeConfig/DataReceiptCreationConfig.md)
      - [StorageUsageConfig](GenesisConfig/RuntimeFeeConfig/StorageUsageConfig.md)
      - [Fee](GenesisConfig/RuntimeFeeConfig/Fee.md)
      - [Fraction](GenesisConfig/RuntimeFeeConfig/Fraction.md)
    - [VMConfig](GenesisConfig/VMConfig.md)
      - [ExtCostsConfig](GenesisConfig/ExtCostsConfig.md)
    - [StateRecord](GenesisConfig/StateRecord.md)
- [Economics](Economics/README.md)
- [Standards](Standards/README.md)
  - [Fungible Token](Standards/FungibleToken/README.md)
      - [Core Standard](Standards/FungibleToken/Core.md)
      - [Metadata](Standards/FungibleToken/Metadata.md)
  - [Non-Fungible Token](Standards/NonFungibleToken/README.md)
      - [Core Standard](Standards/NonFungibleToken/Core.md)
      - [Metadata](Standards/NonFungibleToken/Metadata.md)
      - [Approval Management](Standards/NonFungibleToken/ApprovalManagement.md)
      - [Enumeration](Standards/NonFungibleToken/Enumeration.md)
      - [Royalty Payout](Standards/NonFungibleToken/Payout.md)
      - [Events](Standards/NonFungibleToken/Event.md)
  - [Storage Management](Standards/StorageManagement.md)
- [Proposals](Proposals/README.md)
  - [Access Keys](Proposals/0005-access-keys.md)
  - [Wasm bindings](Proposals/0006-bindings.md)
  - [Batch transactions](Proposals/0008-transaction-refactoring.md)
  - [System Methods](Proposals/0013-system-methods.md)
  - [Execution Outcome](Proposals/0017-execution-outcome.md)
  - [View/Change Methods](Proposals/0018-view-change-method.md)
  - [Economics](Proposals/0033-economics.md)

'''
'''--- specs/Standards/FungibleToken/Core.md ---
# Token Fungible ([NEP-141](https://github.com/near/NEPs/issues/141))

Versión `1.0.0`

## Resumen

Una interface estándar para tokens fungibles que acepta transferencias normales así como tambien Una interfaz estándar para tokens fungibles que permite una transferencia normal, así como una llamada de método y transferencia en una sola transacción. El [estándar de almacenamiento](../StorageManagement.md) aborda las necesidades (y la seguridad) del stakeo del almacenamiento.
El [estándar de metadata de tokens fungibles](Metadata.md) proviciona los campos necesarios para la ergonomía en las dApps y maketplaces.

## Motivación

El Protocolo NEAR usa un tiempo de ejecución fragemtado y asíncrono. Esto significa lo siguiente:
 - El almacenamiento para los diferentes contratos y cuentas pueden ser localizados en los diferentes fragmentos.
 - Dos contratos pueden ser ejecutados al mismo tiempo en diferentes fragmentos.

Si bien esto aumenta el rendimiento de la transacción de forma lineal con la cantidad de fragmentos, también crea algunos retos para el desarrollo de cross-contratos. Por ejemplo, si un contrato quiere consultar alguna información del estado de otro contato (e.j. balance actual), para el tiempo en el que el primero contrato reciba el balance, el balance real puede cambiar. En un sistema tan asíncrono, un contrato no puede confiar en el estado de otro contrato y asumir que no va a cambiar.

Al contrario el contrato puede confiar en un bloqueo parcial temporal del estado con un método callback para actuar o desbloquear, pero requiere una ingeniería cuidadosa para evitar bloqueos mutuos. En este estándar estamos tratando de evitar la aplicación de bloqueos. El abordamiento típico a este problema incluye un sistema escrow con allowances. Este enfoque fue inicialmente desarrollado para [NEP-21](https://github.com/near/NEPs/pull/21) que es similar al estándar ERC-20 de Ethereum. Hay algunos problemas al usar escrow como la única forma de pago por un servicio con token fungible. Esto requiere frecuentemente más de una transacción para escenarios comunes donde los tokens fungibles son dados como pago con la expectativa de que posteriormente un método será llamado.

Por ejemplo, un contrato oracle podría ser pagado con tokens fungibles. Un contrato cliente que desea usar el oracle (oráculo) debe de incrementar el allowance del escrow antes de cada petición al contrato oracle, o alojar un allowance grande que cubra múltiples llamadas. Ambos tienen inconvenientes y últimadamente sería ideal poderenviar tokens fungibles y llamar a un método en una sola transacción. Esta preocupación es abordada en el método `ft_transfer_call`. El poder de esto viene del contrato receptor que trabaja en concierto con el contrato del token fungible en una manera segura. Esto es, si un contrato receptor cumple con el estándar, una sola transacción podría transferir y llamar a un método.

Nota: no hay razón para que un sistema escrow no pueda ser incluído en una implementación de tokens fungibles, pero simplemente no es necesario en el estándar básico. La lógica escrow debería ser movida a un contrato separado para manjear esa funcionalidad. Una razón para eso es porque el [Rainbow Bridge](https://near.org/blog/eth-near-rainbow-bridge/) transferirá tokens fungibles de Ethereum a NEAR, donde el locker de tokens (una fábrica) utilizará el estándar central de tokens fungibles.

Estado de la técnica:

- [ERC-20 standard](https://eips.ethereum.org/EIPS/eip-20)
- Estándar NEP#4 NEAR NFT: [near/neps#4](https://github.com/near/neps/pull/4)

Aprenda sobre NEP-141:

- [Figment Learning Pathway](https://learn.figment.io/network-documentation/near/tutorials/1-project_overview/2-fungible-token)

## Explicación a nivel de guía:

Debaríamos poder hacer lo siguiente:
- Inicializar el contrato una vez. El suministro total dado será propiedad del ID de cuento dado.
- Obtener el suministro total.
- Tranferir tokens al usuario nuevo.
- Transferir tokens de un usuario a otro.
- Transferir tokens a un contrato, tenemos el contrato receptor llamando a un método y "regresa" los tokens fungible no usado.
- Remueve el estado del par llave/valor correspondiente con la cuenta de un usuario, retirando un balance nominal de Ⓝ que fue usado para el almacenamiento.

Hay algunos conceptos en los escenarios anteriores:
- **Suministro total**: el número total de tokens en circulación.
- **Balance owner**: un ID de cuenta que posee alguna cantidad de tokens. 
- **Balance**: una cantidad de tokens.
- **Transferencia**: una acción que mueve un monto de una cuenta a otra, puede ser una cuenta 
- **Transferencia y llamada**: una acción que mueve una cantidad de una cuenta a una cuenta contrato donde el receptor llama a un método.
- **Cantidad de almacenamiento**: la cantidad del almacenamiento usado para que una cuenta sea "registrada" en el token fungible. Esta cantidad está denominada en Ⓝ, no en bytes, y representa el [almacenamiento stakeado](https://docs.near.org/docs/concepts/storage-staking).

Note que la precisión (el número de lugares decimales soportados por un token) no es parte de este estándar básico, ya que no es requerido para realizar acciones. El valor mínimo es siempre 1 token. Vea el [Estándar de metadata de token fungible](Metadata.md) para aprender a admitir precisión/decimales de forma estandarizada.

Dado que múltiples usuarios usarán un contrato de Token Fungible, y su actividad resultará en un [stakeo de almacenamiento](https://docs.near.org/docs/concepts/storage-staking) incrementado para la cuenta del contraro, este estándar está diseñado para interoperar muy bien con [el Estándar de almacenamiento](../StorageManagement.md) para depósitode de almacenamiento y reembolsos.

### Escenarios de ejemplo

#### Transferencia simple

Alice quiere enviar 5 tokens wBTC a Bob.

**Suposiciones**

- El contrato de token wBTC es `wbtc`.
- La cuenta de Alice es `alice`.
- La cuenta de Bob es `bob`.
- La precisión ("decimales" en el estándar de metadata) en el contrato wBTC es de `10^8`.
- Los 5 tokens son `5 * 10^8` o como número son `500000000`.

**Explicación de alto nivel**

Alice necesita emitir una transacción a un contrato wBTC para transferir 5 tokens (multiplicados por la precisión) a Bob.

**Llamadas técnicas**

1. `alice` llama a `wbtc::ft_transfer({"receiver_id": "bob", "amount": "500000000"})`.

#### Depósito de tokens a un contrato

Alice quiere depositar 1000 tokens DAI a un contrato de interés compuesto para ganar tokens extra.

**Suposiciones**

- El contrato de token DAI es `dai`.
- La cuenta de Alice es `alice`.
- El interés compuesto del contrato es `compound`.
- La precisión ("decimales" en el estándar de metadata) en el contrato DAI es de `10^18`.
- Los 1000 tokens son `1000 * 10^18` o como número son `1000000000000000000000`.
- El contrato compuesto puede trabajar con múltiples tipos de token.

<details style="background-color: #000; padding: 3px; color: #fff">
<summary>Para este ejemplo, puede expandir esta sección para ver como un estándar de token fungible anterior que usa escrows lidiaría con el escenario.</summary>
<hr/>

**Explicación de alto nivel** (NEP-21 standard)

Alice necesita emitir 2 transacciones. La primera a `dai` para establecer un allowance a `compound` para que pueda retirar tokens de `alice`.
La segunda transacción es para que `compound` empiece el proceso de depósito. Compound revisará que los tokens DAI son soportados y tratará de retirar el monto de DAI deseado de `alice`.
- Si la transferencia tiene éxito, `compuesto` puede aumentar la propiedad local de `alice` a 1000 DAI.
- Si la transferencia falla, `compound` no necesita de hacer nada en el ejemplo actual, pero tal vez pueda notificar a `alice` de una transferencia fallida.

**Llamadas técnicas** (NEP-21 standard)

1. `alice` llama a `dai::set_allowance({"escrow_account_id": "compound", "allowance": "1000000000000000000000"})`.
2. `alice` llama a `compound::deposit({"token_contract": "dai", "amount": "1000000000000000000000"})`. Dueante la llamada `deposit`, `compound` hace lo siguiente:
   1. hace una llamada asíncrona a `dai::transfer_from({"owner_id": "alice", "new_owner_id": "compound", "amount": "1000000000000000000000"})`.
   2. liga un callback a `compound::on_transfer({"owner_id": "alice", "token_contract": "dai", "amount": "1000000000000000000000"})`.
<hr/>
</details>

**Explicación de alto nivel**

Alice necesita emitir una transacción, a diferencia del típico flujo de trabajo escrow que emite 2.

**Llamadas técnicas**

1. `alice` llama a `dai::ft_transfer_call({"receiver_id": "compound", "amount": "1000000000000000000000", "msg": "invest"})`. Durante la llamada `ft_transfer_call`, dai hace lo siguiente:
   1. hace una llamada asíncrona a `compound::ft_on_transfer({"sender_id": "alice", "amount": "1000000000000000000000", "msg": "invest"})`.
   2. liga un callback a `dai::ft_resolve_transfer({"sender_id": "alice", "receiver_id": "compound", "amount": "1000000000000000000000"})`.
   3. compound termina de invertir, usando los tokens fungible ligados `compound::invest({…})`, después regresa el valor de los tokens que no fueron usados o necesitados. En este caso, Alice pidió que los tokens fueran invertidos, así que regresará 0. (En algunos casos un método tal vez no necesite usar todos los tokens fungibles, y regrese el restante)
   4. La función `dai::ft_resolve_transfer` recibe éxito/fallo de la promesa. Si tiene éxito, contendrá los tokens no usados. Entonces el contrato `dai` usa aritmética simple (no se necesita en este caso) y actualiza el balance de Alice.

#### Intercambiar un token por otro a través de un Creador de Mercado Automatizado (AMM por sus siglas en inglés) como Uniswap

Alice quiere intercambiar 5 NEAR envueltos (wNEAR) por tokens BNNA a la tasa de mercado actual, con menos del 2% de slippage.

**Suposiciones**

- El contrato de token wNEAR es `wnear`.
- La cuenta de Alice es `alice`.
- El contrato de AMM es `amm`.
- El contrato de BNNA es `bnna`.
- La presición ("decimales" en el estándar de metadata) en el contrato wNEAR es de `10^24`.
- Los 5 tokens son `5 * 10^24` o como número es `5000000000000000000000000`.

**Explicación de alto nivel**

Alice necesita emitir una transacción a un contrato wNEAR para transferir 5 tokens (multiplicados por la precisión) a `amm`, especificando la acción deseada (intercambio), el token al que se quiere cambias (BNNA) y el slippage mínimo (<2%) en `msg`.

Alice probablemente hará esta llamada a través de una interface de usuario que sabe como construir un `msg` de una manera que el contrato `amm` entenderá. Sin embargo, es posible que el contrato `amm` provea funciones view que tomen la acción deseada, el token que se quiere y el slippage como entrada y datos de regreso ya listos para pasar a `msg` para `ft_transfer_call`. Para seguir con este ejemplo, digamos que `amm` implementa una función view llamada `ft_data_to_msg`.

Alice necesita agregar un yoctoNEAR. Esto resultará en ella viendo la página de confirmación en su billetera de NEAR preferida. Las implementaciones de billeteras NEAR proveerán (eventualmente) información útil en esta página de confirmación, así los contratos receptores deberán seguir un estándar estricto en como le dan formato a `msg`. Actualizaremos este documento con una documentación, a medida que surja el consenso de la comunidad.

Entonces, Alice puede dar dos pasos, aunque el primero puede ser un detalle que la aplicación que ella usa pide.

**Llamadas técnicas**

1. Vea `amm::ft_data_to_msg({ action: "swap", destination_token: "bnna", min_slip: 2 })`. Usando [NEAR CLI](https://docs.near.org/docs/tools/near-cli):

      near view amm ft_data_to_msg '{
        "action": "swap",
        "destination_token": "bnna",
        "min_slip": 2
      }'

   Luego, Alice (o la aplicación que usa) conservará el resultado y lo usará en el siguiente paso. Digamos que este resultado es `"swap:bnna,2"`.

2. Llama a `wnear::ft_on_transfer`. Usando NEAR CLI:
       near call wnear ft_transfer_call '{
         "receiver_id": "amm",
         "amount": "5000000000000000000000000",
         "msg": "swap:bnna,2"
       }' --accountId alice --depositYocto 1

   Durante la llamada a `ft_transfer_call`, `wnear` hace lo siguiente:
   
   1. Decrementa el balance de `alice` e incrementa el balance de `amm` por 5000000000000000000000000.
   2. Hace una llamada asincrónica a `amm::ft_on_transfer({"sender_id": "alice", "amount": "5000000000000000000000000", "msg": "swap:bnna,2"})`.
   3. Agrega un callback `wnear::ft_resolve_transfer({"sender_id": "alice", "receiver_id": "compound", "amount": "5000000000000000000000000"})`.
   4. `amm` termina el intercambio, ya sea intercambiando exitosamente los 5 wNEAR dentro del slippage deseado, o fallando.
   5. La función `wnear::ft_resolve_transfer` recibe el éxito/fallo de la promesa. Suponiendo que `amm` implementa transacciones todo-o-nada (es decir, no transferirá menos del monto especificado para así cumplir con los requerimientos del slippage), `wnear` no hará nada en este punto si el intercambio fue exitoso, o sino decrementará el balance de `amm` e incrementará el balance de `alice` por 5000000000000000000000000.

## Explicación a nivel referencia

**NOTES**:
- Todos los montos, balances y allowances están limitados por `U128` (valor máximo `2**128 - 1`).
- El estándar del token usa JSON para la serialización de argumentos y resultados.
- Los montos que los argumentos y resultados tienen están serializados en cadenas de Base-10, e.j. `"100"`. Esto se hace para evitar la limitación de JSON del valor entero máximo de `2**53`.
- El contrato debe monitorear el cambio en el almacenamiento cuando agrega y remueve de colecciones. Esto no se incluye en este estándar básico de token fungible, sino que se encuentra en [Estándar de almacenamiento](../StorageManagement.md).
- Para prevenir prevenir que el contrato desplegado sea modificado o eliminado, no debe tener llaves de acceso en su cuenta.

**Interface**:

```javascript
/***************************************/
/* MÉTODOS DE CAMBIO en token fungible */
/***************************************/
// Transferencia simple a un receptor.
//
// Requerimientos:
// * El llamante del método debe adjuntar un depósito de 1 yoctoⓃ por motivos de seguridad
// * La persona que llama debe tener un número mayor o igual que el `amount` que se solicita
//
// Arguments:
// * `receiver_id`: la cuenta NEAR válida que estará recibiendo los tokens fungibles..
// * `amount`: el número de tokens a transferir, envueltos en comillas y tratados como
//   una cadena, aunque el número se almacenará como un unsigned integer
//   con 128 bits.
// * `memo` (opcional): para casos de uso que pueden beneficiarse de la indexación o
//    o el suministro de información para una transferencia.
function ft_transfer(
    receiver_id: string,
    amount: string,
    memo: string|null
): void {}

// Transfiere tokens y llama a un método en un contrato receptor. Un flujo
// exitoso terminará en una salida de ejecución exitosa hacia el callback en el mismo
// contrato en el método `ft_resolve_transfer`.
//
// Puedes pensar de esto como agregar tokens NEAR nativos a una llamada
// de función. Te permite agregar cualquier Token Fungible a una llamada a
// contrato receptor.
//
// Requerimientos:
// * El llamante del método debe de agregar el depósito de 1 yoctoⓃ por propósitos
//   de seguridad
// * El llamante debe tener mayor o igual cantidad al `amount` requerido
// * El contrato receptor debe implementar `ft_on_transfer` acorde con el
//   estándar. Sino, la función `ft_resolve_transfer` del contrato debe lidiar
//   con la llamada cross-contrato resultante fallida y revertir la transferencia.
// * El contrato de implementar el comportamiento descrito en `ft_resolve_transfer`
//
// Argumentos:
// * `receiver_id`: la cuenta NEAR válida que recibe los tokens fungibles.
// * `amount`: el número de tokens a transferir, envueltos en comillas y tratados como
//   una cadena, aunque el número se almacenará como un unsigned integer
//   con 128 bits.
// * `memo` (opcional): para casos de uso que pueden beneficiarse de la indexación o
//    o el suministro de información para una transferencia.
// * `msg`: especifica la información necesitada por el contrato receptor para
//    así manejar propiamente la transacción. Puede indicar una funcion a
//    llamar y los parámetros a pasar a esa función.
function ft_transfer_call(
   receiver_id: string,
   amount: string,
   memo: string|null,
   msg: string
): Promise {}

/*********************************************/
/* MÉTODOS DE CAMBIO en contratos receptores */
/*********************************************/

// Esta función es implementada en el contrat receptor.
// Como se mencionó el argumento `msg` contiene la información necesaria para hacerle saber al contrato receptor como procesar la petición. Esto tal vez incluya nombres de método y/o argumentos.
// Regresa un valor, o promesa que se resuelve con un valor. El valor es el
// número de tokens no usados en forma de cadena. 
// number of unused tokens in string form. Por ejemplo, si `amount` es 10 pero solo 9 son
// necesitados, regresará "1".
function ft_on_transfer(
    sender_id: string,
    amount: string,
    msg: string
): string {}

/****************/
/* MÉTODOS VIEW */
/****************/

// Regresa el suministro total de tokens fungibles como una cadena que representa el valor de un entero de 128-bits no firmado (unsigned 128-bit integer).
function ft_total_supply(): string {}

// Returns the balance of an account in string form representing a value as an unsigned 128-bit integer. If the account doesn't exist must returns `"0"`.
// Regresa el balance de una cuenta como una cadena y representa el valor como un entero de 128-bits no firmado (unsigned 128-bit integer). Si la cuenta no 
// existe deberá regresar `"0"`.
function ft_balance_of(
    account_id: string
): string {}
```

El siguiente comportamiento es requerido, pero los autores de los contratos tal vez llamen a esta función de diferente manera a la estandarizada `ft_resolve_transfer` como se usa aquí:

```ts
// Finalice una cadena `ft_transfer_call` de llamadas cross-contract.
//
// `ft_transfer_call` procesa:
//
// 1. El remitente llama a `ft_transfer_call` en el contrato FT
// 2. El contrato FT transfiere `amount` tokens del remitente al receptor
// 3. El contrato FT llama a `ft_on_transfer` en el contrato del receptor
// 4+. [el contrato receptor puede hacer otras llamadas cross-contract]
// N. El contrato FT resuelve la cadena de promesas con `ft_resolve_transfer`, y podría
//    reembolsar al remitente parte o la totalidad del `amount` original
//
// Requerimientos:
// * El contrato DEBE prohibir las llamadas a esta función por cualquier cuenta excepto la propia
// * Si la cadena de promesas falló, el contrato DEBE revertir la transferencia del token
// * Si la cadena de promesas se resuelve con una cantidad distinta de cero regresada como una cadena,
//   el contrato DEBE devolver esta cantidad de tokens a `sender_id`
//
// Argumentos:
// * `sender_id`: el remitente de `ft_transfer_call`
// * `receiver_id`: el argumento `receiver_id` dado a `ft_transfer_call`
// * `amount`: el argumento `amount` dado a `ft_transfer_call`
//
// Regresa una representación de cadena, una versión de un entero de 128-bits no
// firmado de cuantos tokens totales fueron gastados por sender_id. Ejemplo: si el remitente
// llama a `ft_transfer_call({ "amount": "100" })`, pero `receiver_id` solo usa
// 80, `ft_on_transfer` se resolverá con `"20"`, y `ft_resolve_transfer`
// regresará `"80"`.
function ft_resolve_transfer(
   sender_id: string,
   receiver_id: string,
   amount: string
): string {}
```

## Desventajas

- El argumento `msg` para `ft_transfer` y `ft_transfer` es de forma libre, que tal vez necesita estandarización.
- El paradigma de un sistema escrow tal vez sea familiar para los desarrolladores y usuarios, y es posible que se necesite educación sobre el manejo adecuado de esto en otro contrato.

## Posibilidades futuras

- Support for multiple token types
- Soporte para múltiples tipos de tokens
- Minting y quemado

## Historia

Vea también las discuciones:
- [Núcleo de token fungible](https://github.com/near/NEPs/discussions/146#discussioncomment-298943)
- [Metadata de token fungible](https://github.com/near/NEPs/discussions/148)
- [Estándar de almacenamiento](https://github.com/near/NEPs/discussions/145)

'''
'''--- specs/Standards/FungibleToken/Metadata.md ---
# Metadata del Token Fungible ([NEP-148](https://github.com/near/NEPs/discussions/148))

Versión `1.0.0`

## Resumen
[summary]: #summary

Una interface para la metadata de los tokens fungibles. La meta es que la metadata sea a prueba de futuro así como ligera. Esto será importante para las dApps que necesiten información adicional acerca de las propiedades de un TF, y ampliamente compatible con otros estándares de tokens tal que [NEAR Rainbow Bridge](https://near.org/blog/eth-near-rainbow-bridge/) pueda mover tokens entre cadenas.

## Motivación

Los tokens fungibles personalizados juegan un rol importante en las aplicaciones descentralizadas al día de hoy. TF pueden tener propiedades personalizadas para diferenciarse de otros tokens o contratos en el ecosistema. En NEAR, muchas propiedades comunes pueden ser guardadas directamente on-chain. Otras propiedades son mejor guardarlas off-chain o en una plataforma de almacenamiento descentralizado, para así ahorrar en costos de almacenamiento y permitir una experimentación rápida de la comunidad.

Mientras la tecnología blockchain avanza, se vuelve cada vez más importante el proporcionar compatibilidad con versiones anteriores y un concepto de especificación. Este estándar cubre todas estas preocupaciones. 

Estado de la técnica:

- [EIP-1046](https://eips.ethereum.org/EIPS/eip-1046)
- [OpenZeppelin's ERC-721 Metadata standard](https://docs.openzeppelin.com/contracts/2.x/api/token/erc721#ERC721Metadata) también ayudo, aunque es para tokens no-fungibles.

## Explicación a nivel de guía

Un contrato inteligente de token fungible permite propiedades detectables. Algunas propiedades pueden ser determinadas por otros contratos on-chain, o regresar llamadas de método view.
Otros solo pueden ser determinados por un sistema oracle para ser usados on-chain, o por un frontent con la habilidad de aceder a un archivo de referencia ligada.

### Ejemplos de escenarios

### El token proporciona la metadata al momento del despliegue y la inicialización

Alice despliega un contrato de token fungible wBTC.

**Suposiciones**

- El contrato de token wBTC es `wbtc`
- La cuenta de Alice es `alice`.
- La presición ("decimals" en este estándar de metadatos) en el contrato wBTC es `10^8`.

**Explicación de alto nivel**

Alice emite una transacción para desplegar e inicializar el contrato de token fungible, proporcionando argumentos a la función de inicialización que establece los campos de la metadata.

**Llamadas técnivas**

1. `alice` despliega un contrato y llama a `wbtc::new` con toda la metadata. Si este despliegue e inicialización se hicieron usando [NEAR CLI](https://docs.near.org/docs/tools/near-cli) el comando sería:

    near deploy wbtc --wasmFile res/ft.wasm --initFunction new --initArgs '{
      "owner_id": "wbtc",
      "total_supply": "100000000000000",
      "metadata": {
         "spec": "ft-1.0.0",
         "name": "Wrapped Bitcoin",
         "symbol": "WBTC",
         "icon": "data:image/svg+xml,%3C…",
         "reference": "https://example.com/wbtc.json",
         "reference_hash": "AK3YRHqKhCJNmKfV6SrutnlWW/icN5J8NUPtKsNXR1M=",
         "decimals": 8
      }
    }' --accountId alice

## Explicación a nivel de referencia

Un contrato de token fungible que implementa el estándar de la metadata contendrá una función llamada `ft_metadata`.

```ts
function ft_metadata(): FungibleTokenMetadata {}
```

**Interface**:

```ts
type FungibleTokenMetadata = {
    spec: string;
    name: string;
    symbol: string;
    icon: string|null;
    reference: string|null;
    reference_hash: string|null;
    decimals: number;
}
```

**Un contrato de implementación DEBE incluir los siguientes campos on-chain**

- `spec`: una cadena. Debe ser `ft-1.0.0` para indicar que un contrato de Token Fungible se adhiere a las versiones actuales de esta Metadata y a las especificaciones del [Núcleo de Token Fungible](./FungibleTokenCore.md). Esto permitirá a los consumidores del Token Fungible saber si ellos soportan las características de un contrato dado.
- `name`: el nombre legible por humanos del token.
- `symbol`: la abreviación, como wETH o AMPL.
- `decimals`: utilizado en las interfaces para mostrar los dígitos significativos adecuados de un token. Este concepto está bien explicado en esta [publicación de OpenZeppelin](https://docs.openzeppelin.com/contracts/3.x/erc20#a-note-on-decimals).

**Un contrato de implementación puede incluír los siguientes campos on-chain**

- `icon`: una pequeña imagen asociada con este token. Debe ser una [URL de datos](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs), para ayudar a los consumidores a mostrarla rápido mientras se protegen los datos del usuario. Recomendación: use [SVG optimizados](https://codepen.io/tigt/post/optimizing-svgs-in-data-uris), que pueden resultar en imágenes de alta resolución con solo cientos de bytes de [costo de almacenamiento](https://docs.near.org/docs/concepts/storage-staking). (Note que estos costos de almacenamiento son incurridos al dueño/desplegador del token, pero que a la vez la consulta de estos íconos es una operación de lectura muy barata y cacheable para todos los consumidores del contrato en los nodos RPC que sirven los datos). Recomendación: cree íconos que funcionen bien con sitios web en modo claro y en modo oscuro, si bien usando esquemas de colores de tono medio, o [incrustando consultas `media` en el SVG](https://timkadlec.com/2013/04/media-queries-within-svg/).
- `reference`: un enlace a un archivo JSON válido conteniendo varias llaves ofreciendo detalles suplementarios en el token. Ejemplo: "/ipfs/QmdmQXB2mzChmMeKY47C43LxUdg1NDJ5MWcKMKxDu7RgQm", "https://example.com/token.json", etc. Si la información dada en este documento tiene conflictos con los atributos on-chain, los valores en `reference` se considerarán como la fuente de la verdad.
- `reference_hash`: el hash sha256 codificado en base64 del archivo JSON contenido en el campo `reference`. Esto es para protegerse contra la manipulación off-chain.

## Desventajas

- Se puede argumentar que `symbol` e incluso `name` podría pertenecer como clave/valor en el objeto JSON de `referencia`.
- El pedir que `icon` sea una URL de datos en lugar de un enlace a un endpoint HTTP que podría contener código que viola la privacidad no se puede hacer en la implementación o actualización de los metadatos del contrato, y se debe hacer en el lado del consumidor/aplicación cuando se muestren los datos del token.
- Si un ícono on-chain usa una URL de datos o si no está establecido pero el documento dado por `reference` contiene una URL de un `icon` que viola la privacidad, los consumidores y aplicaciones de esta información no deberían ingenuamente mostrar la versión de `reference` y preferir la versión segura. Esto es técnicamente una violación de la política de "`reference` estableciendo ganancias" descrita anteriormente.

## Posibilidades futuras

- Estándares detallados podrían ser aplicados para las versiones.
- Un esquema detallado de lo que debe contener el objeto `reference`.

'''
'''--- specs/Standards/FungibleToken/README.md ---
## Estándar del token fungible

- [Núcleo del token fungible](Core.md)
- [Metadata del token fungible](Metadata.md)

'''
'''--- specs/Standards/NonFungibleToken/ApprovalManagement.md ---
# Gestión de Aprovación de Token No Fungible ([NEP-178](https://github.com/near/NEPs/discussions/178))

Version `1.0.0`

## Resumen

Un sistema para permitir a un conjunto de usuarios o contratos el transgeriro Tokens No Fungibles específicos a nombre de un propietario. Similar a los sistemas de gestión de aprobación en los estándares como [ERC-721].

  [ERC-721]: https://eips.ethereum.org/EIPS/eip-721

## Motivación

Las personas familiarizadas con [ERC-721] puede esperar necesitar un sistema de gestión de aprobación para transferencias básicas, donde una simple tranferencia de Alice a Bob requiere que Alice primero _apruebe_ a Bob para gastar uno de sus tokens, después de eso Bob puede llamar a `transfer_from` para transferir el token a sí mismo.

El [estándar básico de Token No Fungible](Core.md) incluye un buen soporte para transferencias atómicas seguras sin tal complejidad. Incluso proporciona la funcionalidad "transfiere y llama" (`nft_transfer_call`) que permite a un token en específico ser "agregado" a la llamada a un contrato separado. Para muchos flujos de Token No Fungible, estas opciones pueden circunvenir las necesidades para un sistema de Gestión de Aprobaciones completo.

Sin embargo, algunos desarrolladores de Tokens No Fungibles, marketplaces, dApps, o artistas pueden requerir un mayor control. Este estándar proporciona una interfaz uniforme permitiendo a los dueños de tokens aprobar otras cuentas NEAR, individuos o contratos, para transferir tokens específicos en nombre del propietario.

Estado de la técnica:

- Ethereum's [ERC-721]
- [NEP-4](https://github.com/near/NEPs/pull/4), Estándar antiguo de NEAR para NFTs que no incluye la aprobación por ID de token

## Escenarios de ejemplo

Vamos a considerar algunos ejemplos. Nuestro elenco de personajes y aplicaciones:

* Alice: tiene la cuenta `alice` sin contratos desplegados en ella
* Bob: tiene la cuenta `bob` sin contratos desplegados en ella
* NFT: un contrato con la cuenta `nft`, implementa solo el [estándar básico NFT](Core.md) con esta extensión de Gestión de Aprobación
* Mercado: un contrato con la cuenta `market` que vende tokens desde `nft` así como de otros contratos de NFT
* Bazar: similar a Mercado, pero implementado de manera diferente (spoiler alert: no tiene la función `nft_on_approve`!), tiene la cuenta `bazaar`

Alice y Bob están ya [registrados](../StorageManagement.md) con NFT, Mercado, y Bazar, y Alice posee un token en el contrato NFT con el ID=`"1"`.

Examinemos las llamadas técnicas a través de los siguiente escenarios:

1. [Aprobación simple](#1-simple-approval): Alice aprueba a Bob para transferir su token.
2. [Aprobación con llamada cross-contrato (XCC)](#2-approval-with-cross-contract-call): Alice aprueba a Mercado para transferir uno de sus tokens y pasa un `msg` para que NFT llame a `nft_on_approve` en el contrato de Mercado.
3. [Aprobación con XCC, caso extremo](#3-approval-with-cross-contract-call-edge-case): Alice aprueba a Bazar y pasa un `msg` otra vez, pero, ¿qué es esto? Bazar no tiene `nft_on_approve` implementado, entonces Alice ve un error en el resultado de la transacción. No hay de que preocuparse, sin embargo, ella revisa `nft_is_approved` y ve que ella aprobó exitosamente a Bazar, a pesar del error.
4. [IDs de aprobación](#4-approval-ids): Bob compra el token de Alice a través de Mercado.
5. [IDs de aprobación, caso extremo](#5-approval-ids-edge-case): Bob transfiere el mismo token de regreso a Alice, Alice vuelve a aprobar a Mercado y a Bazar. Bazar tiene un cache antiguo. Bob trata de comprar de Bazar usando el precio anterior.
6. [Revoca uno](#6-revoke-one): Alice revoca la aprobación de Mercado para este token.
7. [Revoca todos](#7-revoke-all): Alice revoca la aprobación de todos para este token.

### 1. Aprobación simple

Alice aprueba a Bob para transferir su token.

**Explicación de alto nivel

1. Alice aprueba a Bob
2. Alice consulta el token para verificar
3. Alice verifica de una manera diferente

**Llamadas técnicas**

1. Alice llama a `nft::nft_approve({ "token_id": "1", "account_id": "bob" })`. Ella adjunta 1 yoctoⓃ, (.000000000000000000000001Ⓝ). Usa [NEAR CLI](https://docs.near.org/docs/tools/near-cli) para hacer esta llamada, el comando sería:

       near call nft nft_approve \
         '{ "token_id": "1", "account_id": "bob" }' \
         --accountId alice --depositYocto 1

   La respuesta:

       ''

2. Alice llama al método view `nft_token`:

       near view nft nft_token \
         '{ "token_id": "1" }'

   La respuesta:

       {
         "id": "1",
         "owner_id": "alice.near",
         "approvals": {
           "bob": 1,
         }
       }

3. Alice llama al método view `nft_is_approved`:

       near view nft nft_is_approved \
         '{ "token_id": "1", "approved_account_id": "bob" }'

   La respuesta:

       true

### 2. Aprobación con llamada cross-contrato

Alice aprueba a Mercado para transferir uno de sus tokens y pasa un `msg` para que NFT llame a `nft_on_approve` en el contrato Mercado. Ella probablemente hace esto desde la interfaz de la aplicación de Mercado que debería de saber como construir `msg` de una manera útil.

**Explicación de alto nivel**

1. Alice llama a `nft_approve` para aprobar a `market` para que transfiera su token, y pasa un `msg`
2. Como `msg` está incluído, `nft` agendará una llamada cross-contrato a `market`
3. Mercado puede hacer lo que quiera con esta información, como listar el token a la venta a el precio dado. El resultado de esta operación es regresado como la salida de la promesa de la llamada original `nft_approve`.

**Llamadas técnicas**

1. Usando near-cli:

       near call nft nft_approve '{
         "token_id": "1",
         "account_id": "market",
         "msg": "{\"action\": \"list\", \"price\": \"100\", \"token\": \"nDAI\" }"
       }' --accountId alice --depositYocto 1
   
   En este punto, near-cli esperará hasta que la cadena de la llamada cross-contrato se resuelva por completo, que también sería true si Alice usó una interfaz de Mercado que usa [near-api-js](https://docs.near.org/docs/develop/front-end/near-api-js). Aunque la parte de Alice está terminada, lo demás pasa detrás de escena.

2. `nft` agenda una llaada a `nft_on_approve` en `market`. Usando la notación near-cli notation para una referencia cruzada fácil dado lo anterior, esto se vería como:

       near call market nft_on_approve '{
         "token_id": "1",
         "owner_id": "alice",
         "approval_id": 2,
         "msg": "{\"action\": \"list\", \"price\": \"100\", \"token\": \"nDAI\" }"
       }' --accountId nft

3. `market` ahora sabe que puede enviar el token de Alice por 100 [nDAI](https://explorer.mainnet.near.org/accounts/6b175474e89094c44da98b954eedeac495271d0f.factory.bridge.near), y que cuando los transfiera a un comprador usando `nft_transfer`, puede pasar también el `approval_id` dado para asegurar que Alice no haya cambiado su opinión. Puede agendar todas las llamadas cross-contratos que quiera, y si regresa estas promesas correctamente, la llamada inicial de Alice usando near-cli se resolverá con la salida del paso final en la cadena. Si Alice sí hizo esta llamada desde la interfaz de Mercado, la interfaz puede usar este valor retornado para algo útil.

### 3. Aprobación con llamada cross-contrato, caso extremo

Alice aprueba a Baazar y pasa un `msg` otra vez. Tal vez ella sí hace esto con near-cli, en lugar de usar la interfaz de Bazar, porque ¿qué es esto? Bazar no implementa `nft_on_approve`, así que Alice vee un error en el resultado de la transacción.

No hay de que preocuparse, sin embargo, revisa `nft_is_approved` y ve que ella exitosamente aprobó a Bazar, a pesar del error. Ella tendrá que encontrar una manera nueva de listar su token a la venta en Bazar, en vez de usar el mismo atajo de `msg` que funcionó para Mercado.

**Explicación de alto nivel**

1. Alice llama a `nft_approve` para aprobar a `bazaar` para transferir su token, y pasa un `msg`.
2. Como `msg` está incluído, `nft` agendará una llamada cross-contrato a `bazaar`.
3. Bazar no implementa `nft_on_approve`, por lo que esta llamada resulta en un error. La aprobación funcionó de todos modos, pero Alice ve un error en su salida del near-cli.
4. Alice revisa si `bazaar` fue aprobado, y ve que sí, a pesar del error.

**Llamadas técnicas**

1. Usando near-cli:

       near call nft nft_approve '{
         "token_id": "1",
         "account_id": "bazaar",
         "msg": "{\"action\": \"list\", \"price\": \"100\", \"token\": \"nDAI\" }"
       }' --accountId alice --depositYocto 1

2. `nft` agenda una llamada a `nft_on_approve` en `market`. Usando la notación near-cli notation para una referencia cruzada fácil dado lo anterior, esto se vería como:

       near call bazaar nft_on_approve '{
         "token_id": "1",
         "owner_id": "alice",
         "approval_id": 3,
         "msg": "{\"action\": \"list\", \"price\": \"100\", \"token\": \"nDAI\" }"
       }' --accountId nft

3. 💥 `bazaar` no implementa este método, así que la llamada resulta en un error. Alice vee este error en la salida de near-cli.

4. Alice revisa si la aprobación funcionó, a pesar del error en la llamada cross-contrato:

       near view nft nft_is_approved \
         '{ "token_id": "1", "approved_account_id": "bazaar" }'

   La respuesta:

       true

### 4. IDs de aprobación

Bob compra el token de Alice a través de Mercado. Bob probablemente hace esto con la interfaz de Mercado, que probablemente iniciará la transferencia con una llamada a `ft_transfer_call` en el contrato nDAI para transferir 100 nDAI a `market`. Como en la función del estándar NFT "transfiere y llama", `ft_transfer_call` que pertenece a [Token Fungible](../FungibleToken/Core.md) toma un `msg` que `market` puede usar para pasar información de que tendrá que pagar a Alice y transferir el NFT. La transferencia del NFT en la única parte que nos interesa aquí.

**Explicación de alto nivel**

1. Bob firma alguna transacción que resulta en `market` llamando a `nft_transfer` en el contrato `nft`, como se describe arriba. Para ser confiables y pasar las auditorías de seguridad, `market` necesita de pasar `approval_id` para que sepa que tiene la información actualizada.

**Llamadas técnicas**
Usando la notación near-cli para mantener coherencia:

    near call nft nft_transfer '{
      "receiver_id": "bob",
      "token_id": "1",
      "approval_id": 2,
    }' --accountId market --depositYocto 1

### 5. IDs de aprobación, caso extremo

Bob transfiere el mismo token de regreso a Alice, Alice vuelve a aprobar a Mercado y a Bazar, listando su token a un precio mayor al anterior. Bazar de alguna manera no sabe de estos cambios, y aún almacena internamente `approval_id: 3` al igual que el precio anterior de Alice. Bob trata de comprar de Bazar con el precio anterior. Como en el ejemplo anterior, esto probablemente empieza con una llamada a un contrato diferente, que eventualmente resulta en una llamada a `nft_transfer` en `bazaar`. Consideremos un escenario posible desde ese punto.

**Explicación de alto nivel**

Bob firma alguna transacción que resulta en `baazar` llamando a `nft_transfer` en el contrato `nft`, como se describió arriba. Para ser confiables y pasar las auditorías de seguridad, `baazar` necesita pasar `approval_id` para saber que tiene información actualizada. No tiene la información actualizada, así que la llamada falla. Si la llamada `nft_transfer` incial es parte de una cadena de llamadas originada por una llamada a `ft_transfer_call` en un token fungible, el pago de Bob será reembolsado y ningún activo cambiará de propietario.

**Llamadas técnicas**

Usando near-cli para mantener la coherencia:

    near call nft nft_transfer '{
      "receiver_id": "bob",
      "token_id": "1",
      "approval_id": 3,
    }' --accountId bazaar --depositYocto 1

### 6. Revoca uno

Alice revoca la aprobación de Mercado para este token.

**Llamadas técnicas**

Usando near-cli:

    near call nft nft_revoke '{
      "account_id": "market",
      "token_id": "1",
    }' --accountId alice --depositYocto 1
Note que `market` no obtendrá una llamada cross-contrato en este caso. Los implementadores de la app Mercado deberían implementar una funcionalidad de tipo [cron](https://es.wikipedia.org/wiki/Cron_(Unix)) para intermintentemente revisar que Mercado tiene el acceso que esperan.

### 7. Revoca todos

Alice revoca todas las aprobaciones para este token.

**Llamadas técnicas**

Usando near-cli:

    near call nft nft_revoke_all '{
      "token_id": "1",
    }' --accountId alice --depositYocto 1

Otra vez, note que los aprobadores anteriores no obtendrán llamadas cross-contrato en este caso.

## Explicación a nivel de referencia

La estructura `Token` regresada por `nft_token` debe incluír el campo `approvals`, que es un mapa de IDs de cuenta a aprobar. Usando la notación [Record type](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeystype) de TypeScript:

```diff
 type Token = {
   id: string,
   owner_id: string,
+  approvals: Record<string, number>,
 };
```

Ejemplo de datos de token:

```json
{
  "id": "1",
  "owner_id": "alice.near",
  "approvals": {
    "bob.near": 1,
    "carol.near": 2,
  }
}
```

### ¿Qué es un "ID de aprobación"?

Es un número único dado para cada aprobación que permite marketplaces bien intencionados u otros revendedores de NFT de terceros evitar una condición de carrera. La condición de carrera ocurre cuando:

1. Un token es listado en dos marketplaces, que los dos son almacenados en el token como cuentas aprobadas.
2. Un marketplace vende el token, que lo remueve de las cuentas aprobadas.
3. El nuevo dueño vende todo de regreso al dueño original.
4. El dueño original aprueba otra vez el token para el segundo marketplace para que lo liste a un precio nuevo. Pero por alguna razón el segundo marketplace todavía lista el token con el precio anterior y no sabe de las transferencias que están pasando.
5. El segundo marketplace, operando con información antigua, trata de otra vez vender el token al precio anterior.

Note que mientras esto describe un error honesto, la posibilidad de este bug también puede ser ventajosa para partes maliciosas a través del [front-running](https://defi.cx/front-running-ethereum/).

Para evitar esta posibilidad, el contrato NFT genera un ID de aprobación único cada vez que aprueba una cuenta. Luego cuando llamamos a `nft_transfer` o a `nft_transfer_call`, la cuenta aprobada pasa el `approval_id` con este valor para asegurarse que el estado subyacente del token no haya cambiado de lo que espera la cuenta aprobada.

Quedándonos con el ejemplo anterior, digamos que la aprobación incial del segundo marketplace generó los datos de `aprovals` siguientes:

```json
{
  "id": "1",
  "owner_id": "alice.near",
  "approvals": {
    "marketplace_1.near": 1,
    "marketplace_2.near": 2,
  }
}
```

Pero después de las transacciones y re-aprobaciones descritas arriba, el token tal vez tenga los `approvals` como:

```json
{
  "id": "1",
  "owner_id": "alice.near",
  "approvals": {
    "marketplace_2.near": 3,
  }
}
```

El marketplace luego trata de llamar a `nft_transfer`, pasándole información antigua:

```bash
# oops!
near call nft-contract.near nft_transfer '{ "approval_id": 2 }'
```

### Interfaz

El contrato NFT debe implementar los métodos siguientes:

```ts
/*********************/
/* MÉTODOS DE CAMBIO */
/*********************/
// Agregar una cuenta aprobada para un token específico
//
// Requerimientos
// * El llamante del método debe adjuntar un depósito de al menos 1 yoctoⓃ por
//   razones de seguridad
// * El contrato PUEDE requerir al llamante adjuntarr un depósito más grande, para cubrir
//   el costo del almacenamiento de los datos del aprobador
// * El contrato DEBE entrar en pánico si fue llamado por alguien que no sea el propietario del token
// * El contrato DEBE de entrar en pánico si la adición causa que `nft_revoke_all` exceda
//   el límite de gas de un solo bloque. Vea a continuación para más información.
// * El contrato DEBE de incrementar el ID de aprobación incluso si re-aprueba una cuenta
// * Si fue exitosamente aprobada o si ya estaba aprobada, y si `msg` está presente,
//   el contrato DEBE de llamar `nft_on_approv` en `account_id`. Vea la descripción de
//   `nft_on_approve` a continuación para más detalles.
//
// Arguments:
// * `token_id`: el token por el cual se agrega una aprobación
// * `account_id`: la cuenta a agregar `approvals`
// * `msg`: cadena opcional a pasar a `nft_on_approve`
//
// Regresa void, si no hay `msg`. De otra manera, regresa una llamada de promesa a
// `nft_on_approve`, que puede resolver con cualquier cosa que quiera
function nft_approve(
  token_id: TokenId,
  account_id: string,
  msg: string|null,
): void|Promise<any> {}

// Revocar una cuenta aprobada para un token específico.
//
// Requirements
// * El llamante del método debe adjuntar un depósito de al menos 1 yoctoⓃ por
//   razones de seguridad
// * Si el contrato requiere un depósito >1yN en `nft_approve`, el contrato
//   DEBE reembolsar el depósito de almacenamiento asociado cuando el dueño revoca la aprobación
// * El contrato DEBE entrar en pánico si fue llamado por alguien que no sea el propietario del token
//
// Argumentos:
// * `token_id`: el token por el cual revocar una aprobación
// * `account_id`: la cuenta que será removida de `approvals`
function nft_revoke(
  token_id: string,
  account_id: string
) {}

// Revoca todas las cuentas aprobadas para un token específico.
//
// Requirements
// * El llamante del método debe adjuntar un depósito de al menos 1 yoctoⓃ por
//   razones de seguridad
// * Si el contrato requiere un depósito >1yN en `nft_approve`, el contrato
//   DEBE reembolsar el depósito de almacenamiento asociado cuando el dueño revoca la aprobación
// * El contrato DEBE entrar en pánico si fue llamado por alguien que no sea el propietario del token
//
// Arguments:
// * `token_id`: el token con las aprobaciones a revocar
function nft_revoke_all(token_id: string) {}

/****************/
/* MÉTODOS VIEW */
/****************/

// Revisar si un token fue aprobado para transferir por una cuenta dada, opcionalmente
// revisando un approval_id
//
// Argumentos:
// * `token_id`: el token por el cual se revocará la aprobación
// * `approved_account_id`: la cuenta para revisar la existencia en `approvals`
// * `approval_id`: un ID de aprobación opciona para compara con el ID de aprovación actual para una cuenta dada
//
// Regresa:
// si el `approval_id` dado, `true` si `approved_account_id` es aprobado con el `approval_id` dado
// de otra manera, `true` si `approved_account_id` está en la lista con las cuentas aprobadas
function nft_is_approved(
  token_id: string,
  approved_account_id: string,
  approval_id: number|null
): boolean {}
```

### ¿Por qué `nft_approve` debe de entrar en pánico si `nft_revoke_all` llega a fallar después?

En la descripción de `nft_approve` anterior, se dice:

    El contrato DEBE de entrar en pánico si la adición causa que `nft_revoke_all` exceda
    el límite de gas de un solo bloque.

¿Qué significa esto?

Primero, es útil entender que lo que queremo decir cuando decimos "single-block gas limit". Esto se refiere a [límite máximo de gas por bloque en la capa de protocolo](https://docs.near.org/docs/concepts/gas#thinking-in-gas). Este número incrementará con el tiempo.

Remover datos de un contrato usa gas, así que si un NFT tiene un número suficientemente largo de aprobaciones, `nft_revoke_all` fallaría, porque llamarlo excedería el gas máximo

Los contratos deben de prevenir esto capturando el número de aprobaciones por un token dado. Sin embargo, depende del autor del contrato el determinar un límite sensible para su contrato (y el límite de gas para un bloque al momento que lo desplieguen). Como las implementaciones de los contratos pueden variar, algunas de ellas serán capaces de soportar un número mayor de aprobaciones que otras, incluso con el mismo límite gas por bloque.

Los autores de contratos pueden escoger el establecer un límite bajo y seguro como 10 aprobaciones, o ellos podrían calcular dinámicamente si una aprobación nueva rompería las llamadas futuras a `nft_revoke_all`. Pero cada contrato DEBE asegurar que nunca se romple la funcionalidad de `nft_revoke_all`.

### Interfaz de contrato de cuenta aprobada

Si un contrato es aprobado para transferir NFTs, puede implementar `nft_on_approve` para actualizar su propio estado cuando se le da la aprobación para un token:

```ts
// Responder a la notificación de cuando el contrato ha sido aprobado para un token.
//
// Notas
// * El contrato sabe el ID del contrato del token por `predecessor_account_id`
//
// Argumentos:
// * `token_id`: el token el cual aprobó a este contrato
// * `owner_id`: el dueño del token
// * `approval_id`: el ID de la aprobación guardado por el contrato NFT para esta aprobación.
//    Se espera que sea un número dentro del límite de 2^53 representable por JSON.
// * `msg`: especifica la información necesitada por el contrato aprobado para poder
//    manejar la aprobación. Puede indicar una función a llama y los
//    parámetros a pasar a esa función
function nft_on_approve(
  token_id: TokenId,
  owner_id: string,
  approval_id: number,
  msg: string,
) {}
```

Note que el contrato NFT va a ejecutar y olvidar esta llamada, ignorando cualquier valor regresado o errores generados. Esto significa que incluso si la cuenta aprobada no tiene un contrato o no implementa `nft_on_approve`, la aprobación seguirá funcionando correctamente desde el punto de vista de un contrato NFT.

También note que no hay un `nft_on_revoke` paralelo cuando se revocan una sola aprobación o de cuando se revocan todas. Esto es parcialmente causado porque agendar muchas llamadas `nft_on_revoke` cuando se revocan todas las aprobaciones podría incurrir en [tarifas de gas](https://docs.near.org/docs/concepts/gas) prohibitivas. Apps y contratos que guardan en cache las aprobaciones NFT pueden entonces no depender de tener información actualizada, y deberían actualizar sus caches periódicamente. Como esta será la realidad necesaria para lidiar con `nft_revoke_all`, no hay razón para complicar `nft_revoke` con una llamada `nft_on_revoke`.

### Costos no incurridos para el comportamiento básico NFT

Los contratos NFT deberían de ser implementados de una manera que se eviten tarifas de gas extras por la serialización y deserialización de `approvals` para llamadas a métodos `nft_*` que no sea `nft_token`. Vea[implementación de `ft_metadata` usando `LazyOption`](https://github.com/near/near-sdk-rs/blob/c2771af7fdfe01a4e8414046752ee16fb0d29d39/examples/fungible-token/ft/src/lib.rs#L71) de `near-contract-standards` como ejemplo de referencia.

'''
'''--- specs/Standards/NonFungibleToken/Core.md ---
# Token no fungible ([NEP-171](https://github.com/near/NEPs/discussions/171))

Versión `1.0.0`

## Resumen

Una interface estándar para los tokens no fungibles (NFTs). 
A standard interface for non-fungible tokens (NFTs). Es decir, tokens que tienen cada uno una identificación única.

## Motivación

En los tres años desde que [ERC-721] fue ratificado por la comunidad de Ethereum, los Tokens No Fungibles se han probado como una increíble oportunidad nueva a través de una amplia gama de disciplinas: coleccionables, arte, videojuegos, finanzas, realidad virtual, bienes raíces, y más.

Este estándar construye las lecciones aprendidas por la experimentación temprana, y empuja las posibilidades más allá aprovechando los atributos únicos de la blockchain de NEAR:

- un tiempo de ejecución asíncromo y fragmentado, significando que dos contratos pueden ser ejecutados al mismo tiempo en diferentes fragmentos
- un modelo de [participación de almacenamiento] que separa las tarifas del [gas] de las demandas que tiene el almacenamiento a la red, permitiendo un almacenamiento on-chain más grande (vea la extensión [Metadata]) y tarifas de transacción ultra bajas.

Dados estos atributos, este estándar NFT puede cimplir con una interacción de usuario lo que otras blockchains necesitan en dos o tres. Lo más notable es `nft_transfer_call`, por el cual un usuario puede esencialmente adjuntar un token a una llamada a un contrato separado. Un escenario de ejemplo:

* Un contrato [Cadáver Exquisito](https://es.wikipedia.org/wiki/Cad%C3%A1ver_exquisito) permite tres enviar tres dibujos, uno para cada sección de una composición final, para ser minteado como su propio NFT y ser vendido en un marketplace, dividiendo las ganancias entre los artistas originales.
* Alice dibuja el tercio superior y lo envía, Bob el tercio de en medio, y Carol termina con el tercio inferior. Como ellos pueden usar `nft_transfer_call` para transferir su NFT al contrato Cadáver Exquisito así como también llamar al método `submit` en él, la llamada de Carol puede automáticamente arrancar el minteo de un NFT compuesto de los tres envíos, así como también listar este NFT compuesto en un marketplace.
* Cuando Dan intenta también llamar `nft_transfer_call` para enviar un tercio superior innecesario del dibujo, el contrato Cadáver Exquisito puede arrojar un error, y la transferencia será revertida para que así Bob mantenga la propiedad de su NFT.

Mientras esto ya es flexible y suficientemente poderoso para manejar todos los tipos de casos de uso nuevos y existentes, las aplicaciones como los marketplaces pueden todavía beneficiarse de la extensión [Gestión de Aprobación].

Estado de la técnica:

- [ERC-721]
- [EIP-1155 for multi-tokens](https://eips.ethereum.org/EIPS/eip-1155#non-fungible-tokens)
- [NEAR's Fungible Token Standard](../FungibleToken/Core.md), que fue el pionero de la técnica "transfer and call"

## Explicación a nivel referencia

**NOTAS**:
- Todos los montos, balances y allowances están limitados por `U128` (valor máximo de `2**128 - 1`).
- El estándar del token usa JSON para la serialización de argumentos y resultados.
- Los montos en los argumentos y resultados son serializados en strings de Base-10, e.j. `"100"`. Esto se hace para evitar la limitación de JSON del valor entero máximo de `2**53`. 
- El contrato debe de monitorear el cambio en el almacenamiento cuando se agrega o remueve de las colecciones. Esto no está incluído en este estándar básico de token fungible, pero sí está en el [Estándar de Almacenamiento](../StorageManagement.md).
- Para prevenir al contrato desplegado de ser modificado o eliminar, no debe tener ninguna clave de acceso en su cuenta.

### Interface NFT

```ts
// La estructura base que será regresada por un token. Si un contrato está usando
// extensions such as Approval Management, Metadata, or other
// extenciones como Gestión de Aprobación, Metadata u otros
// atributos pueden ser incluídos en esta estructura
type Token = {
  id: string,
  owner_id: string,
}

/*********************/
/* MÉTODOS DE CAMBIO */
/*********************/

// Transferencia simple. Transfiere un `token_ida` dado por el dueño actual
// al `receiver_id`.
//
// Requerimientos
// * El llamante del método debe adjuntar un depósito de 1 yoctoⓃ por motivos de seguridad
// * El contrato DEBE entrar en pánico si lo llama alguien que no sea el propietario del token o,
//   si utiliza Gestión de Aprobación, una de las cuentas aprobadas
// * `approval_id` es para usar con la extensión de Gestión de Aprobaciones, vea
//   ese documento para la explicación completa.
// * Si utiliza la gestión de aprobación, el contrato DEBE anular las cuentas aprobadas en
//   en la transferencia exitosa.
//
// Argumentos:
// * `receiver_id`: la cuenta NEAR válida que recibe el token
// * `token_id`: el token a transferir
// * `approval_id`: ID de aprobación esperado. Un número menor que
//    2^53 y, por lo tanto, representable como JSON. Consulte el estándar Gestión 
//    de Aprobaciones para una explicación completa.
// * `memo` (opcional): para casos de uso que pueden beneficiarse de la indexación o
//    el suministro de información para una transferencia
function nft_transfer(
  receiver_id: string,
  token_id: string,
  approval_id: number|null,
  memo: string|null,
) {}

// Devuelve `true` si el token se transfirió desde la cuenta del remitente.

// Transfiere el token y llama a un método en un contrato receptor. Un flujo
// terminará con un resultado de ejecución exitoso al callback dentro del contrato NFT
// en el método `nft_resolve_transfer`.
//
// Puede pensar que esto es similar a adjuntar tokens NEAR nativos a una
// llamada de función. Le permite adjuntar cualquier token no fungible en una llamada a
// un contrato de receptor.
//
// Requirements:
// * El llamante del método debe adjuntar un depósito de 1 yoctoⓃ por motivos de seguridad
// * El contrato DEBE entrar en pánico si lo llama alguien que no sea el propietario del token o,
//   si utiliza Gestión de Aprobación, una de las cuentas aprobadas
// * El contrato receptor DEBE implementar `nft_on_transfer` acorde al
//   estándar. Si no lo hace, `nft_resolve_transfer` del contrato de TF debe lidiar
//   con la llamada cross-contrato fallida y revertir la transferencia.
// * El contrato DEBE implementar el comportamiento descrito en `nft_resolve_transfer`
// * `approval_id` es para usarse con la extensión Gestión de Aprobación, vea
//   ese documento para una explicación completa.
// * Si se usa Gestión de Aprobación, el contrato DEBE anular las cuentas aprovadas
//   en una transferencia exitosa.
//
// Arguments:
// * `receiver_id`: la cuenta NEAR válida que recibe el token
// * `token_id`: el token a transferir
// * `approval_id`: ID de aprobación esperado. Un número menor que
//    2^53 y, por lo tanto, representable como JSON. Consulte el estándar Gestión 
//    de Aprobaciones para una explicación completa.
// * `memo` (opcional): para casos de uso que pueden beneficiarse de la indexación o
//    el suministro de información para una transferencia.
// * `msg`: especifica la información necesaria para el contrato receptor para
//    así manejar adecuadamente la transferencia. Puede indicar una función a
//    llamar y los parámetros a pasar a esa función.
function nft_transfer_call(
  receiver_id: string,
  token_id: string,
  approval_id: number|null,
  memo: string|null,
  msg: string,
): Promise {}

/****************/
/* VIEW METHODS */
/****************/

// Returns the token with the given `token_id` or `null` if no such token.
function nft_token(token_id: string): Token|null {}
```

El siguiente comportamiento es requerido, pero los autores de los contratos tal vez llamen a esta función de diferente manera a la estandarizada `nft_resolve_transfer` como se usa aquí:

```ts
// Finalice una cadena `nft_transfer_call` de llamadas cross-contract.
//
// `ft_transfer_call` procesa:
//
// 1. El remitente llama a `nft_transfer_call` en el contrato NFT
// 2. El contrato NFT transfiere `amount` tokens del remitente al receptor
// 3. El contrato NFT llama a `nft_on_transfer` en el contrato del receptor
// 4+. [el contrato receptor puede hacer otras llamadas cross-contract]
// N. El contrato NFT resuelve la cadena de promesas con `nft_resolve_transfer`, y podría
//    transferir el token de vuelta al remitente
//
// Requerimientos:
// * El contrato DEBE prohibir las llamadas a esta función por cualquier cuenta excepto la propia
// * Si la cadena de promesas falló, el contrato DEBE revertir la transferencia del token
// * Si la cadena de promesas se resuelve con `true`, el contrato DEBE regresar el token
//   a `sender_id`
//
// Argumentos:
// * `sender_id`: el remitente de `nft_transfer_call`
// * `receiver_id`: el argumento `receiver_id` dado a `nft_transfer_call`
// * `token_id`: el argumento `token_id` dado a `nft_transfer_call`
// * `approved_token_ids`: si se usa Gestión de Aprobación, el contrato DEBE proporcionar
//   un conjunto de cuentas originales aprobadas en este argumento, y restaurar
//   estas cuentas aprobadas en caso de reversión.
//
// Regresa true si el token fue transferido exitosamente a `receiver_id`.
function nft_resolve_transfer(
  owner_id: string,
  receiver_id: string,
  token_id: string,
  approved_account_ids: null|string[],
): boolean {}
```

### Interfaz receptora

Los contratos que quieran hacer uso de `nft_transfer_call` deberán implementar lo siguiente:

```ts
// Tomar alguna acción después de recibir un token no fungible
//
// Requerimientos:
// * El contrato deberá restringir las llamadas a esta función a un conjunto de contratos
//   NFT previamente aceptados
//
// Argumentos:
// * `sender_id`: el remitente de `nft_transfer_call`
// * `previous_owner_id`: la cuenta que poseía el NFT antes de ser enviado a 
//   este contrato, que puede diferir de `sender_id` si se usa
//   Gestión de Aprobación de cuentas
// * `token_id`: el argumento `token_id` dado a `nft_transfer_call`
// * `msg`: la información necesaria para que este contrato sepa como procesar la
//   petición. Esto puede incluir nombres de método y/o argumentos
//
// Returns true if token should be returned to `sender_id`
function nft_on_transfer(
  sender_id: string,
  previous_owner_id: string,
  token_id: string,
  msg: string,
): Promise<boolean>;
```

## Errata

* **2021-07-16**: actualizado el argumento `approval_id` de `nft_transfer_call` para ser de tipo `number|null` en vez de `string|null`. Como ya se dijo, No se espera que los ID de aprobación excedan el límite de JSON de 2^53.

  [ERC-721]: https://eips.ethereum.org/EIPS/eip-721
  [storage staking]: https://docs.near.org/docs/concepts/storage-staking
  [gas]: https://docs.near.org/docs/concepts/gas
  [Metadata]: Metadata.md
  [Gestión de Aprobación]: ApprovalManagement.md

'''
'''--- specs/Standards/NonFungibleToken/Enumeration.md ---
# Enumeración del Token No Fungible ([NEP-181](https://github.com/near/NEPs/discussions/181))

Versión `1.0.0`

## Resumen

Interfaces estándar para contar y obtener tokens, para un contrato NFT completo o para un propietario determinado.

## Motivación

Aplicaciones como marketplaces y billeteras necesitan una manera de mostrar todos los tokens que una cuenta posee y enseñar las estadísticas de todos los tokens para un contrato dado. Esta extensión provee una manera estandarizada de hacerlo.

Mientras que algunos contratos NFT pueden prescindir de esta extensión para ahorrar costos de almacenamiento, esto requiere a las aplicaciones tener una capa indexada personalizada off-chain. Esto hace más difícil para las apps integrarse con dichos NFTs. Las apps que se integran solo con NFTs que usan la extensión Enumeración ni siquiera necesitan un componente del lado del servidor, ya que ellas pueden recuperar toda la información que necesitan directamente de la blockchain.

Estado de la técnica:

- Extensión de enumeración [ERC-721]

## Interface

El contrato debe implementar los siguientes métodos view:

```ts
// Regresa el suministro total de tokens no fungibles como una cadena que representa a
// un entero unsigned de 128-bits para evitar el límite numérico de JSON de 2^53; y "0" si no hay tokens.
function nft_total_supply(): string {}

// Obtener una lista de tokens
//
// Argumentos:
// * `from_index`: una cadena que representa un entero unsigned de 128-bits,
//    representa el índice inicial de los tokens a regresar
// * `limit`: el número máximo de los tokens a regresar
//
// Regresa un arregla de objetos Token, como se describe en el estándar básico, y un arreglo vacío si no hay tokens
function nft_tokens(
  from_index: string|null, // default: "0"
  limit: number|null, // default: ilimitado (podría fallar debido al límite del gas)
): Token[] {}

// Obtener un número de token que posee una cuenta dada
//
// Argunmentos:
// * `account_id`: una cuenta NEAR válida
//
// Regresa el número de tokens no fungibles que posee `account_id` como una cadena,
// que representa un entero unsigned de 128-bits para evitar el límite numérico de JSON
// de 2^53; y "0" si no hay tokens.
function nft_supply_for_owner(
  account_id: string,
): string {}

// Obtener una lista de todos los tokens que posee una cuenta
//
// Argumentos:
// * `account_id`: una cuenta NEAR válida
// * `from_index`: una cadena que representa un entero unsigned de 128-bits,
//    representa el índice inicial de los tokens a regresar
// * `limit`: el número máximo de los tokens a regresar
//
// Regresa una lista paginada de todos los tokens que posee esta cuenta, y un arreglo vacío si no hay tokens
function nft_tokens_for_owner(
  account_id: string,
  from_index: string|null, // default: 0
  limit: number|null, // default: ilimitado (podría fallar debido al límite del gas)
): Token[] {}
```

## Notas

En el momento en el que se escribe esto, las colecciones especializada en el crate de Rust `near-sdk` son iterables, pero no todas tienen implementada la solución `iter_from`. Pueden haber ganancias en la eficiencia para las colecciones grandes y se invita a los desarrolladores a probar sus estructuras de datos con una cantidad grande de entradas.

  [ERC-721]: https://eips.ethereum.org/EIPS/eip-721
  [almacenamiento]: https://docs.near.org/docs/concepts/storage-staking

'''
'''--- specs/Standards/NonFungibleToken/Event.md ---
# Evento de token no fungible

Versión `1.0.0`

## Resumen

Interfaces estándar para
Interfaces estándar para acciones de contrato NFT.

## Motivación

Las aplicaciones impulsadas por NFTs realizan acciones similares.
Por ejemplo - `minting`, `quemando` y `transfiriendo`.
Cada app puede tener su propia manera de realizar estas acciones.
Esto introduce inconsistencia al capturar estos eventos.
Esta extensión aborda eso.

Es común para las apps de NFT el transferir muchos o un token al mismo tiempo.
Otras aplicaciones necesitan monitorear estos y eventos similares consistentemente.
Si no, el estado del monitoreo a lo largo de muchas apps impulsadas por NFTs se vuelve inviable. 

Necesitamos una manera estandarizada de capturar eventos.
Esto se discutió aquí https://github.com/near/NEPs/issues/254.

## Eventos

Muchas apps usan diferentes interfaces que representan la misma acción.
Esta interface estandariza el proceso al introducir eventos de log.
No hay evento NEP al momento, así que este estándar crea el camino hacia eso.

Los eventos usan la capacidad de logs estándar de NEAR y se definen como una convención.
Los eventos son logs que empiezan con el prefijo `EVENT_JSON:` seguido de un solo documento JSON válido de la interface siguiente:

```ts
// Interface para capturar datos
// acerca de un evento
// Argumentos
// * `standard`: nombre del estándar e.j. nep171
// * `version`: e.j. 1.0.0
// * `event`: cadena
// * `data`: evento de datos asociado
interface EventLogData {
    standard: string,
    version: string,
    event: string,
    data?: unknown,
}
```

#### Logs de evento válidos:

```js
EVENT_JSON:{"standard": "nepXXX", "version": "1.0.0", "event": "xyz_is_triggered"}
```

```js
EVENT_JSON:{
  "standard": "nepXXX",
  "version": "1.0.0",
  "event": "xyz_is_triggered"
}
```

```js
EVENT_JSON:{"standard": "nepXXX", "version": "1.0.0", "event": "xyz_is_triggered", "data": {"triggered_by": "foundation.near"}}
```

#### Logs de evento inválidos:

* Dos eventos en un solo log (en lugar de eso, llame a `log` para cada uno de los eventos)
```
EVENT_JSON:{"standard": "nepXXX", "version": "1.0.0", "event": "xyz_is_triggered"}
EVENT_JSON:{"standard": "nepXXX", "version": "1.0.0", "event": "xyz_is_triggered"}
```
* Datos JSON inválidos
```
EVENT_JSON:invalid json
```

## Interface

Los eventos de Token No Fungible DEBE tener el parámetro estándar `standard` con el valor `"nep171"`, la versión estándar con el valor `"1.0.0"`, el valor `event` es uno de `nft_mint`, `nft_burn`, `nft_transfer`, y `data` debe ser uno de los siguientes tipos relevantes: `NftMintLog[] | NftTransferLog[] | NftBurnLog[]`:

```ts
interface EventLogData {
    standard: "nep171",
    version: "1.0.0",
    event: "nft_mint" | "nft_burn" | "nft_transfer",
    data: NftMintLog[] | NftTransferLog[] | NftBurnLog[],
}
```

```ts
// Un evento log para capturar el minteo de tokens
// Argumentos
// * `owner_id`: "account.near"
// * `token_ids`: ["1", "abc"]
// * `memo`: mensaje opcional
interface NftMintLog {
    owner_id: string,
    token_ids: string[],
    memo?: string
}

// Un evento log para capturar la quema de tokens
// Argumentos
// * `owner_id`: el dueño de los tokens a quemar
// * `authorized_id`: acuenta aprobada para quemar, si aplica
// * `token_ids`: ["1","2"]
// * `memo`: mensaje opcional
interface NftBurnLog {
    owner_id: string,
    authorized_id?: string,
    token_ids: string[],
    memo?: string
}

// Un evento log para capturar la transferencia de tokens
// Argumentos
// * `authorized_id`: cuenta aprobada para transferir
// * `old_owner_id`: "owner.near"
// * `new_owner_id`: "receiver.near"
// * `token_ids`: ["1", "12345abc"]
// * `memo`: mensaje opcional
interface NftTransferLog {
    authorized_id?: string,
    old_owner_id: string,
    new_owner_id: string,
    token_ids: string[],
    memo?: string
}
```

## Ejemplos

Minteo por lotes de un solo propietario (formateado para fines de legibilidad):

```js
EVENT_JSON:{
  "standard": "nep171",
  "version": "1.0.0",
  "event": "nft_mint",
  "data": [
    {"owner_id": "foundation.near", "token_ids": ["aurora", "proximitylabs"]}
  ]
}
```

Minteo por lotes de diferentes propietarios:

```js
EVENT_JSON:{
  "standard": "nep171",
  "version": "1.0.0",
  "event": "nft_mint",
  "data": [
    {"owner_id": "foundation.near", "token_ids": ["aurora", "proximitylabs"]},
    {"owner_id": "user1.near", "token_ids": ["meme"]}
  ]
}
```

Eventos diferentes (entradas de log separadas):

```js
EVENT_JSON:{
  "standard": "nep171",
  "version": "1.0.0",
  "event": "nft_burn",
  "data": [
    {"owner_id": "foundation.near", "token_ids": ["aurora", "proximitylabs"]},
  ]
}
```

```js
EVENT_JSON:{
  "standard": "nep171",
  "version": "1.0.0",
  "event": "nft_transfer",
  "data": [
    {"old_owner_id": "user1.near", "new_owner_id": "user2.near", "token_ids": ["meme"], "memo": "have fun!"}
  ]
}
```

## Otro métodos

Note que los eventos de ejemplo anteriores cubren dos tipos diferentes de eventos:
1. Eventos que no están especificados en el estándar NFT (`nft_mint`, `nft_burn`)
2. Un evento que es cubierto en el [Estándar básico de NFT](https://nomicon.io/Standards/NonFungibleToken/Core.html#nft-interface). (`nft_transfer`)

Este estándar de eventos también aplica más allá de los tres eventos resaltados aquí, donde los eventos futuros siguen la misma convención que el segundo tipo. Por ejemplo, si un contrato NFT usa el [estándar de gestión de aprobación](https://nomicon.io/Standards/NonFungibleToken/ApprovalManagement.html), puede emitir un evento para `nft_approve` si la comunidad de desarrolladores lo considera importante.
 
Por favor siéntete libre de abrir una pull request para extender los estándares de eventos detallados aquí a medida que surjan las necesidades.

## Desventajas

Hay una limitación conocida de cadenas de 16kb cuando se capturan logs.
Esto se puede observar si los `token_ids` varían en longitud entre aplicaciones diferentes.
Esto impacta la cantidad de eventos que se pueden procesar.

'''
'''--- specs/Standards/NonFungibleToken/Metadata.md ---
# Metadatos de Token No Fungible ([NEP-177](https://github.com/near/NEPs/discussions/177))

Version `2.0.0`

## Resumen

Una interface para los metadatos de tokens no fungibles. La meta es mantener los metadatos a prueba del futuro así como ligeros. Esto será importante para las dApps que necesiten información adicional acerca de las propiedades de un NFT, y ampliamente compatible con otro estándares de tokens tal que el [NEAR Rainbow Bridge](https://near.org/blog/eth-near-rainbow-bridge/) pueda mover tokens entre cadenas.

## Motivación

El valor principal de los tokens no fungibles proviene de sus metadatos. Mientras que el [estándar básico](Core.md) proporciona la interface mínima que puede ser cosiderada un token no fungible, la mayoría de artistas, desarrolladores, y dApps querrán asociar más datos con cada NFT, y querrán una manera predecirble de interactuar con cualquier metadato de un NFT.

El enfoque único de NEAR [stakeo de almacenamiento](https://docs.near.org/docs/concepts/storage-staking) hace feasible el almacenar más información on-chain que otras blockchains.
Este estándar aprovecha esta fortaleza para atributos de metadatos comunes, y proporciona una manera estandarizada para enlazar información adicional off-chain para soportar la experimentación rápida de la comunidad.

Este estándar también provee una versión `spec`. Esto hace fácil para los consumidores de NFTs, como los marketplaces, el saber si soportan todas las características del token dado.

Estado de la técnica:

- [Estándar de metadatos de tokens fungibles](../FungibleToken/Metadata.md) de NEAR
- Discusión sobre el estándar NFT completo de NEAR: #171

## Interface

Los metadatos implementan el nivel contrato (`NFTContractMetadata`) y el nivel token (`TokenMetadata`). Los metadatos relevantes para cada uno:

```ts
type NFTContractMetadata = {
  spec: string, // requerido, esencialmente una versión como "nft-1.0.0"
  name: string, // requerido, ej. "Mochi Rising — Digital Edition" o "Metaverse 3"
  symbol: string, // requirido, ej. "MOCHI"
  icon: string|null, // URL de datos
  base_uri: string|null, // Puerta de enlace centralizada conocida para tener un acceso confiable a los activos de almacenamiento descentralizado a los que hace referencia por `reference` or URLs `media`
  reference: string|null, // URL a archivo JSON con más información
  reference_hash: string|null, // Hash sha256 codificado en Base64 de JSON del campo de referencia. Obligatorio si se incluye `reference`.
}

type TokenMetadata = {
  title: string|null, // ej. "Arch Nemesis: Mail Carrier" or "Parcel #5055"
  description: string|null, // descripción de formato libre
  media: string|null, // URL a medios asociados, preferiblemente a almacenamiento descentralizado dirigido a contenido
  media_hash: string|null, // Hash sha256 codificado en Base64 de JSON del campo de referencia. Obligatorio si se incluye `reference`.
  copies: number|null, // número de copias del conjunto de metadatos en existencia cuando el token fue minteado.
  issued_at: number|null, // Cuando el token fue emitido o minteado, un epoch Unix en milisegundos
  expires_at: number|null, // Cuando el token expira, un epoch Unix en milisegundos
  starts_at: number|null, // Cuando el token empieza a ser válido, un epoch Unix en milisegundos
  updated_at: number|null, // Cuando el token fue actualizado por última vez, un epoch Unix en milisegundos
  extra: string|null, // cualquier cosa extra que el NFT quiera guardar on-chain. Puede ser un JSON con formato de cadena.
  reference: string|null, // URL hacia un archivo JSON off-chain con más información
  reference_hash: string|null // Hash sha256 codificado en Base64 de JSON del campo de referencia. Obligatorio si se incluye `reference`.
}
```

Una nueva función DEBE de ser soportada en el contrato del NFT:

```ts
function nft_metadata(): NFTContractMetadata {}
```

Un atributo nuevo DEBE de ser agregado a cada estructura `Token`:

```diff
 type Token = {
   id: string,
   owner_id: string,
+  metadata: TokenMetadata,
 }
```

### Un contrato de implementación DEBE incluir los siguientes campos on-chain

- `spec`: una cadena que DEBE tener el formato `nft-1.0.0` para indicar que un contrato de Token No Fungible  se adhiere a las versiones actuales de esta especificación de Metadatos. Esto permitirá a los consumidores de los Tokens No Fungibles el saber si soportan las caracterísitcas de un contrato dado.
- `name`: el nombre legible por humanos del token.
- `symbol`: el símbolo abreviado del contrato, como MOCHI o MV3
- `base_uri`: Puerta centralizada conocida para tener un acceso confiable a los activos de almacenamiento descentralizado a los que hace referencia `reference` o `media`. Puede ser usado por otras interfaces para la recuperación inicial de activos, incluso si estos frontends después replican los datos a sus propies nodos descentralizados, que se les recomienda hacer.

### Un contrato de implementación puede incluír los siguientes campos on-chain

Para `NFTContractMetadata`:

- `icon`: una pequeña imagen asociada con este token. Debe ser una [URL de datos](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs), para ayudar a los consumidores a mostrarla rápido mientras se protegen los datos del usuario. Recomendación: use [SVG optimizados](https://codepen.io/tigt/post/optimizing-svgs-in-data-uris), que pueden resultar en imágenes de alta resolución con solo cientos de bytes de [costo de almacenamiento](https://docs.near.org/docs/concepts/storage-staking). (Note que estos costos de almacenamiento son incurridos al dueño/desplegador del token, pero que a la vez la consulta de estos íconos es una operación de lectura muy barata y cacheable para todos los consumidores del contrato en los nodos RPC que sirven los datos). Recomendación: cree íconos que funcionen bien con sitios web en modo claro y en modo oscuro, si bien usando esquemas de colores de tono medio, o [incrustando consultas `media` en el SVG](https://timkadlec.com/2013/04/media-queries-within-svg/).
- `reference`: un enlace a un archivo JSON válido conteniendo varias llaves ofreciendo detalles suplementarios en el token. Ejemplo: "/ipfs/QmdmQXB2mzChmMeKY47C43LxUdg1NDJ5MWcKMKxDu7RgQm", "https://example.com/token.json", etc. Si la información dada en este documento tiene conflictos con los atributos on-chain, los valores en `reference` se considerarán como la fuente de la verdad.
- `reference_hash`: el hash sha256 codificado en base64 del archivo JSON contenido en el campo `reference`. Esto es para protegerse contra la manipulación off-chain.

Para `TokenMetadata`:

- `name`: El nombre de este token en específico.
- `description`: Una descripción más larga del token.
- `media`: La URL asociada a los medios. Preferiblemente a un almacenamiento descentralizado dirigido a contenido.
- `media_hash`: el hash sha256 codificado en base64 del contenido al que hace referencia el campo `media`. Esto es para protegerse contra la manipulación off-chain.
- `copies`: El número de tokens con este conjunto de metadatos o `media` que se sabe que existen en el momento del minting.
- `issued_at`: Un epoch Unix en milisegundos de cuando el token fue emitido o minteado (un entero unsigned de 32-bit será suficiente hasta el año 2106)
- `expires_at`: Un epoch Unix en milisegundos de cuando el token expire
- `starts_at`: Un epoch Unix en milisegundos de cuando el token empiece a ser válido
- `updated_at`: Un epoch Unix en milisegundos de cuando el token fue actualizado por última vez
- `extra`: cualquier cosa extra que el NFT quiera guardar on-chain. Puede ser un JSON con formato de cadena.
- `reference`: URL a un archivo JSON off-chain con más información.
- `reference_hash`: Hash sha256 codificado en Base64 de JSON del campo de referencia. Requerido si `reference` está incluído.

### Sin costo incurrido por el comportamiento NFT central

Los contratos deberían ser implementados de una manera en la que se eviten tarifas de gas extras por serialización y deserialización de metadatos por llamadas a los métodos `nft_*` que no sean `nft_metadata` o `nft_token`. Vea `near-contract-standards` [implementación usando `LazyOption`](https://github.com/near/near-sdk-rs/blob/c2771af7fdfe01a4e8414046752ee16fb0d29d39/examples/fungible-token/ft/src/lib.rs#L71) como ejemplo de referencia.

## Desventajas

* Cuando este contrato de NFT es creado e incializado, el almacenamiento por token será mayor que una versión NFT Core. Las interfaces pueden dar cuenta de esto agregando depósitos extras mientras se mintea. Esto solo se puede realizar rellenando con una cantida razonable, o con la interface usando la [llamada RPC detallada aquí](https://docs.near.org/docs/develop/front-end/rpc#genesis-config) que obtiene configuraciones génesis y determina precisamente cuanto depósito se necesita.
* El estándar de que `icon` sea una URL de datos en lugar de un enlace endpoint HTTP que podría contener código que viola la privacidad no puede ser desplegado o actualizado desde los metadatos del contrato, y se debe de hacer en el lado del consumidor/aplicación cuando se muestra los datos del token.
* Si un ícono on-chain usa una URL de datos o si no está establecido pero el documento dado por reference contiene una URL de un icon que viola la privacidad, los consumidores y aplicaciones de esta información no deberían ingenuamente mostrar la versión de reference y preferir la versión segura. Esto es técnicamente una violación de la política de "reference estableciendo ganancias" descrita anteriormente.

## Posibilidades futuras

- Estándares detallados podrían ser aplicados para las versiones.
- Un esquema detallado de lo que debe contener el objeto reference.

## Errata

La primera versión (`1.0.0`) tenía un lenguaje confuso en relación a los campos:
- `issued_at`
- `expires_at`
- `starts_at`
- `updated_at`

Se le dió a esos campos el tipo `string|null` pero no estaba claro si debería de ser un epoch Unix en milisegundos o [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html). Al tener que revisitar esto, se determinó que usar milisegundos epoch era lo más eficiente ya que reducirá el cálculo en el contrato inteligente y puede ser derivado trivialmente de la marca de tiempo del bloque.

'''
'''--- specs/Standards/NonFungibleToken/Payout.md ---
# Estándar para una mecánica de pago de múltiples destinatarios en contratos NFT (NEP-199)
Version `2.0.0`.

Este estándar asume que el contrato NFT ha implementado
[NEP-171](https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/Core.md) (Core) y [NEP-178](https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/ApprovalManagement.md) (Gestión de Aprobación).

## Resumen
Una interface que permite a los contratos de token no fungible pedir que los contratos financieros paguen a múltiples receptores, haciendo posible implementaciones regalías flexibles.

## Motivación
Actualmente, los NFTs en NEAR soportan el campo `owner_id`, pero carecen de flexibilidad para la propiedad y mecánicas de pago más complejas, incluyendo pero no limitado a las regalías. Los contratos financieros, como los marketplaces, casas de subasta, y los contratos de préstamo NFT se beneficiarían de una interfaz estándar en los contratos productores de NFT para consultar a quién pagar, y cuanto pagar.

Por lo tanto, el objetivo central de este estándar es de definir un conjunto de métodos que los contratos financieros llamen, sin especificar como los contratos NFT definen la división de las mecánicas de pago, y una estructura de respuesta `Payout` estándar.

## Explicación a nivel guía

Esta extensión de pago agrega dos métodos a los contratos NFT:
- un método view: `nft_payout`, aceptando un `token_id` y algún `balance`, regresando el mapeo de `Payout` para el token dado.
- un método de llamada: `nft_transfer_payout`, aceptando todos los argumentos de `nft_transfer`, más un campo para algún `Balance` que calcula el `Payout`, llama a `nft_transfer`, y regresa el mapeo de `Payout`.

Los contratos financieros DEBEN validar varias invariantes en en el valor regresado
`Payout`:
1. El `Payout` regresado NO DEBE ser más largo que la longitud máxima dada (parámetro `max_len_payout`) si se proporciona. Pagos con longitudes excesivas pueden convertirse prohibitivamente costosas de gas. Los contratos financieros pueden especificar la longitud máxima del pago que el contrato va a respetar con el campo `max_len_payout` en `nft_transfer_payout`.
2. Los balances DEBEN sumar menos o igual al argumento `balance` en `nft_transfer_payout`. Si el balance suma menos que el argumento `balance`, el contrato financiero PODRÍA reclamar el restante para sí mismo.
3. La suma de los balances NO DEBE desbordarse. Esto es técnicamente igual al punto 2, pero se espera que los contratos financeros manejen esta posibilidad.

Los contratos financieros PUEDEN especificar su longitud máxima de pago a respetar.
Como mínimo, los contratos financieros NO DEBEN establecer su longitud máxima por debajo de 10.

Si el pago contiene direcciones que no existen, el contrato financiero PUEDE quedarse con esos fondos de pago desperdiciados.

Los contratos financieros PUEDEN obtener una parte del precio de vente del NFT como comisión, restando su parte del total del precio de venta, y llamando a `nft_transfer_payout` con el restante.

## Flujo de ejemplo
```
 ┌─────────────────────────────────────────────────────────────────┐
 │El propietario del token aprueba al marketplace para token_id "0"│
 ├─────────────────────────────────────────────────────────────────┘
 │  nft_approve("0",market.near,<SaleArgs>)
 ▼
 ┌───────────────────────────────────────────────┐
 │Marketplace vende token a user.near por 10N    │
 ├───────────────────────────────────────────────┘
 │  nft_transfer_payout(user.near,"0",0,"10000000",5)
 ▼
 ┌───────────────────────────────────────────────┐
 │El contrato NFT devuelve datos de pago         │
 ├───────────────────────────────────────────────┘
 │  Payout(<who_gets_paid_and_how_much)
 ▼
 ┌───────────────────────────────────────────────┐
 │El mercado valida y paga direcciones           │
 └───────────────────────────────────────────────┘
```

## Reference-level explanation
```rust
/// Un mapeo de cuentas NEAR a la cantidad que se le debe pagar a cada una, en
/// el evento de una venta de token. El mapeo del pago DEBE ser más corto que
/// la longitud mácima especificada por el contrato financiero que obtiene estos
/// datos de pago. Cualquier mapeo de longitud 10 o menos DEBE ser aceptado por
/// los contratos financieros, así que 10 es un límite superior seguro.
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Payout {
  pub payout: HashMap<AccountId, U128>,
}

pub trait Payouts{
  /// Dado un `token_id` y un saldo denominado NEAR, devuelva la estructura `Payout`
  /// para el token dado. Entrar en pánico si la longitud del pago excede
  /// `max_len_payout.`
  fn nft_payout(&self, token_id: String, balance: U128, max_len_payout: u32) -> Payout;
  /// Dado un `token_id` y un saldo denominado NEAR, transferir el token
  /// y devuelva la estructura `Payout` para el token dado. Entrar en pánico si
  /// la longitud del pago excede `max_len_payout.`
  #[payable]
  fn nft_transfer_payout(
    &mut self,
    receiver_id: AccountId,
    token_id: String,
    approval_id: u64,
    balance: U128,
    max_len_payout: u32,
  ) -> Payout{
    assert_one_yocto();
    let payout = self.nft_payout(token_id, balance);
    self.nft_transfer(receiver_id, token_id, approval_id);
    payout
  }
}
```

Note que un NFT y un contrato financiero variarán según su implementación. Esto significa que algunos ciclos del CPU extras podrán ocurrir en uno que otro contrato NFT.
Además, un contrato financiero puede aceptar tokens fungibles, NEARs nativos, u otras entidades como pago. Transferir tokens NEAR nativos es menos costoso en gas que enviar tokens fungibles. Por estas razones, la longitud máxima de los pagos puede variar acorde a la personalización del contrato inteligente.

## Desventajas

Hay una introducción de confianza que el contrato llamando a `nft_transfer_payout` va a pagar a todas las partes previstas. Sin embargo, ya que el contrato que llama típicamente es algo como un marketplace usado por usuarios finales, actores maliciosos pueden ser encontrados más facilmente y podrían tener menos incentivos.
Hay una suposición que los contratos NFT entenderán los límites del gas y no permitirán un número de pagos que no pueden ser completados.

## Posibilidades futuras

En el futuro, el contrato NFT en sí, podría ser capáz de poner una transferencia NFT como un estado que sea "transferencia pendiente" hasta que todos los pagos sean otorgados. Esto mantendría tods la información dentro del NFT y removería la confianza.

## Errata

La versión `2.0.0` contiene el `approval_id` de `u64` intencionado en vez de la versión cadena de `U64`. Esto fue un descuido, pero ya que el estándar fue publicado meses antes de notarlo, el equipo pensó que subir la versión era lo mejor.

'''
'''--- specs/Standards/NonFungibleToken/README.md ---
## Tokens no fungibles

- [Núcleo de token no fungible](Core.md)
- [Metadatos de tokens no fungibles](Metadata.md)
- [Gestión de aprobación de tokens no fungibles](ApprovalManagement.md)
- [Enumeración de tokens no fungibles](Enumeration.md)
- [Pago de regalías de tokens no fungibles](Payout.md)
- [Eventos de tokens no fungibles](Event.md)

'''
'''--- specs/Standards/README.md ---
## Estándares

- [Token fungible](FungibleToken/README.md)
    - [Estándar básico](FungibleToken/Core.md)
    - [Metadata](FungibleToken/Metadata.md)
- [Token No Fungible](NonFungibleToken/README.md)
    - [Estándar básico](NonFungibleToken/Core.md)
    - [Metadata](NonFungibleToken/Metadata.md)
    - [Gestión de aprobación](NonFungibleToken/ApprovalManagement.md)
    - [Enumeración](NonFungibleToken/Enumeration.md)
    - [Pago de regalías](NonFungibleToken/Payout.md)
    - [Eventos](NonFungibleToken/Event.md)
- [Gestión de almacenamiento](StorageManagement.md)

'''
'''--- specs/Standards/StorageManagement.md ---
# Gestión de almacenamiento ([NEP-145](https://github.com/near/NEPs/discussions/145))

Versión `1.0.0`

NEAR usa [stakeo de storage] que significa que una cuenta de contrato debe tener el balance suficiente para cubrir todo el alamacenamiento agregado con el tiempo. Este estándar proporciona una manera uniforma para pasar el costo del almacenamiento a los usuarios. Permite a las cuentas y contratos:

1. Revisar el balance de almacenamiento de una cuenta.
2. Determinar el almacenamiento mínimo para agregar información de la cuenta tal que puede interactuar como se espera con un contrato.
3. Agregar balance de almacenamiento para una cuenta; si bien a sí misma o a otra.
4. Retirar algún depósito de almacenamiento removiendo información de la cuenta asociada de un contrato y después haciendo una llamada para remover el depósito no usado.
5. Cancelar el registro de una cuenta para recuperar el saldo de almacenamiento completo.

  [stakeo de storage]: https://docs.near.org/docs/concepts/storage-staking

Estado de la técnica:

- Un estándar anterior de token fungible ([NEP-21](https://github.com/near/NEPs/pull/21)) resultando como [el almacenamiento se pagó](https://github.com/near/near-sdk-rs/blob/1d3535bd131b68f97a216e643ad1cba19e16dddf/examples/fungible-token/src/lib.rs#L92-L113) para cuando se aumenta el allowance de un sistema escrow.

## Escenarios de ejemplo

Para mostrar la flexibilidad y el poder de este estándar, veamos dos contratos de ejemplo.

1. Un contrato de Token Fungible simple que usa la Gestión de Almacenamiento en un modo de "sólo registro", donde el contrato solo añade almacenamiento en la primera interacción de un usuario.
   1. La cuenta se registra a sí misma
   2. La cuenta registra a otra
   3. Intento innecesario para volver a registrar
   4. Forzar el cierre de la cuenta
   5. La cuenta cierra correctamente el registro
2. Un contrato de redes sociales, donde lo usuarios pueden agregar más información al contrato a lo largo del tiempo.
   1. La cuenta se registra a sí misma con más del mínimo requerido
   2. Intento innecesario para volver a registrar usando el parámetro `registration_only`
   3. Intento de toma de acción que excede el almacenamiento que ha sido pagado; incrementando el depósito de almacenamiento
   4. Remueve almacenamiento y reclama el exceso del depósito

### Ejemplo 1: Contraton de Token Fungible

Imagina un contrato de [token fungible](Tokens/FungibleTokenCore.md) desplegado en `ft`. Digamos que este contrato guarda todos los balances de usuario en una estructura de Mapa internamente, y agregar una llave para un un usuario nuevo requiere 0.00235Ⓝ. Este contrato por lo tanto usa el estándar de Gestión de Almacenamiento para pasar el costo a los usuarios, para que así un usuario nuevo pague una tarifa de registro, para interactuar con este contrato, de 0.00235Ⓝ, o 2350000000000000000000 yoctoⓃ ([yocto](https://www.metricconversion.us/prefixes.htm) = 10<sup>-24</sup>).

Para este contrato, `storage_balance_bounds` será:

```json
{
  "min": "2350000000000000000000",
  "max": "2350000000000000000000"
}
```

Esto significa que un usuario debe depositar 0.00235Ⓝ para interactuar con este contrato, y si intenta depositar más de eso no tendrá efecto alguno (los depósitos agregados serán inmediatamente reembolsados).

Vamos a seguir a dos usuarios, a Alice con la cuenta `alice` y Bob con la cuenta `bob`, y ellos interactúan con `ft` a través de los siguientes escenarios:

1. Alice se registra a sí misma
2. Alice registra a Bob
3. Alice trata de registrar a Bob otra vez
4. Alice forza el cierre de su cuenta
5. Bob cierra su cuenta sin problema

#### 1. La cuenta paga su tarifa de registro

**Explicación de alto nivel**

1. Alice revisa si está registrada con el contrato `ft`.
2. Alice determina la tarifa de registro necesaria para registrarse con el contrato `ft`.
3. Alice emite una transacción para depositar Ⓝ a su cuenta.

**Llamadas técnicas**

1. Alice consulta un método de solo-vista para determinar si ella tiene almacenamiento en este contrato con `ft::storage_balance_of({"account_id": "alice"})`. Usando [NEAR CLI](https://docs.near.org/docs/tools/near-cli) para hacer esta llamada view, el comando sería:

       near view ft storage_balance_of '{"account_id": "alice"}'

   La respuesta:

       null

2. Alice usa [NEAR CLI](https://docs.near.org/docs/tools/near-cli) para hacer la llamada view.

       near view ft storage_balance_bounds

   Como se mencinó anteriormente, esto mostrará que los valores de `min` y `max` son 2350000000000000000000 yoctoⓃ.

3. Alice convierte esta cantidad de yoctoⓃ a 0.00235 Ⓝ, después llama `ft::storage_deposit` con este depósito ligado. Usando NEAR CLI:

       near call ft storage_deposit '' \
         --accountId alice --amount 0.00235

   El resultado:

       {
         total: "2350000000000000000000",
         available: "0"
       }

#### 2. La cuenta paga por el almacenamiento de otra cuenta

Alice desea enviar eventualmente a `ft` tokens para Bob que no está registrado. Ella decide pagar por el almacenamiento de Bob.

**Explicación de alto nivel**

Alice emite una transacción para depostiar Ⓝ para a cuenta de Bob.

**Llamadas técnicas**
Alice llama `ft::storage_deposit({"account_id": "bob"})` con el depósito ligado de '0.00235'. Usando NEAR CLI el comando sería:

    near call ft storage_deposit '{"account_id": "bob"}' \
      --accountId alice --amount 0.00235

El resultado:

    {
      total: "2350000000000000000000",
      available: "0"
    }

#### 3. Intento inncesario de registrar a una cuenta ya registrada

Alice accidentalmente hace la misma llamada, e incluso omite un cero inicial en la cantidad de depósito.

    near call ft storage_deposit '{"account_id": "bob"}' \
      --accountId alice --amount 0.0235

El resultado:

    {
      total: "2350000000000000000000",
      available: "0"
    }

Adicionalmente, se le reembolsarán los 0.0235Ⓝ que ella agregó, porque el `storage_deposit_bounds.max` especifica que la cuenta de Bob no puede tener un balance total mayor a 0.00235Ⓝ.

#### 4. La cuenta forza el cierre del regitro

Alice decide que no importan sus tokens en `ft` y quiere recuperar su tarifa de registro forzosamente. Si el contrato permite esta operación, los tokens `ft` remanentes serán quemados o transferidos a otra cuenta, que ella podría o no podría tener la habilidad de especiicar antes de el cierre forzado.

**Explicación de alto nivel**

Alice emite una transacción para anular el registro de su cuenta y recuperar los Ⓝ de su tarifa de registro. Ella de agregar 1 yoctoⓃ, expresado en Ⓝ como `.000000000000000000000001`.

**Llamadas técnicas**
Alice llama a `ft::storage_unregister({"force": true})` con un depósito de 1 yoctoⓃ. Usando NEAR CLI el comando sería:

    near call ft storage_unregister '{ "force": true }' \
      --accountId alice --depositYocto 1

El resultado:

    true

#### 5. La cuenta cierra correctamente el registro

Bob quiere cerrar su cuenta, pero tiene un balance diferente de cero de tokens `ft`.

**Explicación de alto nivel**

1. Bob trata de cerrar correctamente su cuenta, llamando a `storage_unregister()` sin especificar `force=true`. Esto resulta en un error inteligible que le dice por qué no se puede anular aún el registro de su cuenta.
2. Bob manda todos su tokens `ft` a un amigo.
3. Bob vuelve a tratar de cerrar su cuenta correctamente. Funciona.

**Llamadas técnicas**

1. Bob llama a `ft::storage_unregister()` con un depósito de 1 yoctoⓃ. Usando NEAR CLI el comando sería:

       near call ft storage_unregister '' \
         --accountId bob --depositYocto 1

   Falla con un mensaje como "No se puede cerrar una cuenta correctamente con un balance positivo remanente; bob tiene un balance N"

2. Bob transfiere sus tokens a un amigo usando `ft_transfer` del estándar [Núcleo de token fungible](Tokens/FungibleTokenCore.md).

3. Bob trata de la llamada del paso 1 otra vez. Funciona

### Ejemplo 2: Contrato de redes sociales

Imagina un contrato inteligente de redes sociales que pasa el costo del almacenamiento a los usuarios para la información de publicaciones y seguidores. Digamos que este contrato está desplegado en la cuenta `social`. Como en el ejemplo de contrato de Token Fungible anterior, el `storage_balance_bounds.min` es 0.00235, porque este contrato también añadirá un usuario recientemente registrado a un Mapa interno. Sin embargo, este contrato no establece un `storage_balance_bounds.max`, como los usuarios pueden agregar más información al contrato a lo largo del tiempo y debe de cubrir el costo por este almacenamiento.

Así que para este contrato, `storage_balance_bounds` regresará:

```json
{
  "min": "2350000000000000000000",
  "max": null
}
```
Sigamos a un usuario, Alice con la cuenta `alice`, mientras ella interactúa con `social` a través de los siguientes escenarios:

1. Registro
2. Intento innecesario de volver a registrar usando el parámetro `registration_only`
3. Intento de tomar acción que exceda el almacenamiento ya pagado; incrementando el depósito de almacenamiento
4. Remosión del almacenamiento y reclamo del depósito excedente

#### 1. La cuenta se registra con `social`

**Explicación de alto nivel**

Alice emite una transacción para depositar Ⓝ para su cuenta. Mientras que el `storage_balance_bounds.min` para este contrato es 0.00235Ⓝ, la interfaz que ella usa sugiere agregar 0.1Ⓝ, para que así ella pueda agregar información inmediatamente a la aplicación, en lugar de *solo* registrarse.

**Llamadas técnicas**

Usando NEAR CLI:

    near call social storage_deposit '' \
      --accountId alice --amount 0.1

El resultado:

    {
      total: '100000000000000000000000',
      available: '97650000000000000000000'
    }

Aquí vemos que ella ha depositado 0.1Ⓝ y que 0.00235 de esa cantidad fue usado para registrar su cuenta, y es entonces retenido por el contrato. El resto está disponible para facilitar la interacción con el contrato, pero también puede ser retirado por Alice usando `storage_withdraw`.

#### 2. Intento innecesario para volver a registrar usando el parámetro `registration_only`

**Explicación de alto nivel**
Alice no puede recordar si ella ya se registró y reenvió la llamada, usando el parámetro `registration_only` para asegurarse de que no agregue otros 0.1Ⓝ.

**Llamadas técnicas**

Usando NEAR CLI:

    near call social storage_deposit '{"registration_only": true}' \
      --accountId alice --amount 0.1

El resultado:

    {
      total: '100000000000000000000000',
      available: '97650000000000000000000'
    }

Adicionalmente, Alice se le reembolsarán los 0.1Ⓝ extra que ella agregó. Esto facilita a los otros contratos siempre intentar registrar usuarios mientrar realizan transacciones por lotes sin preocuparse de errores o depósitos perdidos.

Note que Alice no incluyó `registration_only`, ella hubiera terminado con un `total` de 0.2Ⓝ.

#### 3. La cuenta incrementa el depósito del almacenamiento

Suposición: `social` tiene una función `post` que permite crear un post nuevo con un texto sin formato. Alice ha usado casi todo su balance de almacenamiento. Ella trata de llamar a `post` con una cantidad larga de texto, y se aborta la transacción porque ella necesita pagar por más almacenamiento primero.

Tenga en cuenta que, primeramente, las aplicaciones probablemente querrán evitar esta situación solicitando a los usuarios que recarguen los depósitos de almacenamiento antes de que el balance se acabe.

**Explicación de alto nivel**

1. Alice emite una transacción, digamos `social.post`, y falla con un error inteligible que dice que tiene un balance de almacenamientoe insuficiente para cubrir el corto de la operación
2. Alice emite una transacción para incrementar su balance de almacenamiento
3. Alice vuelve a tratar la transacción inicial y funciona

**Llamadas técnicas**

1. Esto está fuera del alcance de esta especificación, pero digamos que Alice llama a `near call social post '{ "text": "very long message" }'`, y que esto falla con un mensaje diciendo algo como "Depósito de almacenamiento insuficiente. Por favor llame a `storage_deposit` y agregue al menos 0.1 NEAR e intente otra vez."

2. Alice deposita la cantidad adecuada en una transacción al llamar a `social::storage_deposit` con el depósito agregado de '0.1'. Usando NEAR CLI:

       near call social storage_deposit '' \
         --accountId alice --amount 0.1

   El resultado:

       {
         total: '200000000000000000000000',
         available: '100100000000000000000000'
       }

3. Alice trata la llamada inicial `near call social post` otra vez. Funciona.

#### 4. Remoción de almacenamiento y relamo del depósito excedente

Suposición: Alice tiene más depositado de lo que usa.

**Explicación de alto nivel**

1. Alice ve su depósito de almacenamiento y ve que tiene un extra.
2. Alice retira su depósito excedente.

**Llamadas técnicas**

1. Alice consulta `social::storage_balance_of({ "account_id": "alice" })`. Con NEAR CLI:

       near view social storage_balance_of '{"account_id": "alice"}'

   Respuesta:

       {
         total: '200000000000000000000000',
         available: '100100000000000000000000'
       }

2. Alice llama a `storage_withdraw` con un depósito de 1 yoctoⓃ. comando de NEAR CLI:

       near call social storage_withdraw \
         '{"amount": "100100000000000000000000"}' \
         --accountId alice --depositYocto 1

   Resultado:

       {
         total: '200000000000000000000000',
         available: '0'
       }

## Explicación a nivel referencia

**NOTAS**:

- Todas las cantidades, balances y allowance son limitadas por `U128` (valor máximo 2<sup>128</sup> - 1).
- Este estándar de almacenamiento usa JSON para la serialización de argumentos y resultados.
- Las cantidades en los argumentso y resultados son serializados con cadenas en Base-10, e.j. `"100"`. Esto se hace para evitar la limitación de entero máximo de JSON de 2<sup>53</sup>.
- Para prevenir que el contrato desplegado sea modificado o eliminado, no debería tener llaves de acceso en su cuenta.

**Interfaz**:

```ts
// La estructura que será regresada por los métodos:
// * `storage_deposit`
// * `storage_withdraw`
// * `storage_balance_of`
// Los valores `total` y `available` son representaciones de cadena de enteros
// no firmados de 128-bits mostrando el balance de una cuenta específica en yoctoⓃ.
type StorageBalance = {
   total: string;
   available: string;
}

// La estructura siguiente será regresada para el método `storage_balance_bounds`.
// Los dos `min` y `max` son representaciones de cadenas de enteros no firmados de
// 128-bits.
//
// `min` es la canitdad de tokens requerida para empezar a usar este contrato
// (ej para registrarse con el contrato). S un contrato adjunta `min`
// NEAR a una llamada `storage_deposit`, las llamadas subsecuentes a `storage_balance_of`
// para este usuario deberá mostrar su `total` igual a `min` y `available=0`
//
// Un contrato puede implentar `max` igual a `min` si solo cobra por el registro
// inicial, y no ajusta el almacenamiento por usuario a lo largo del tiempo. Un 
// contrato que implementa `max` debe reembolsar los depósitos que puedan incrementar
// el almacenamiento de un usuario más allá de esta cantidad.
type StorageBalanceBounds = {
    min: string;
    max: string|null;
}

/***************************************/
/* MÉTODOS DE CAMBIO de token fungible */
/***************************************/
// Método de pago que recibe un depósito adjunto de Ⓝ para una cuenta determinada.
//
// Si se omite `account_id`, el depósito DEBE ir a la cuenta anterior.
// Si se proporciona, el depósito DEBE ir hacia esta cuenta. Si es inválida,
// el contrato debe de entrar en pánico.
//
// Si `registration_only=true`, el contrato DEBE reembolsar por encima del saldo mínimo
// si la cuenta no estaba registrada y reembolsará el depósito completo si ya está
// registrado.
//
// El `storage_balance_of.total` + `attached_deposit` en exceso de
// `storage_balance_bounds.max` deberá ser reembolsado a la cuenta anterior.
//
// Regresa la estructura StorageBalance mostrando los balances actualizados.
function storage_deposit(
    account_id: string|null,
    registration_only: boolean|null
): StorageBalance {}

// Retirar una cantidad específica de los Ⓝ disponibles para la cuenta anterior.
//
// Este método es seguro de llamar. NO DEBE remover información.
//
// `amount` se envía como una representación de una cadena de un entero no firmado de 128-bits.
// Si se omite, el contrato DEBE reembolsar el balance `available` completo. Si `amount` excede
// el balance de la cuenta anterior, el contrato DEBE entrar en pánico
//
// Si la cuenta anterior no está registrada, el contrato DEBE entrar en pánico.
//
// DEBE requerir exactamente 1 yoctoNEAR de balance adjunto para prevenir llamadas
// de función con llaves de acceso restringidas (seguridad de la billetera UX)
//
// Regresa la estructura StorageBalance mostrando los balances actualizados.
function storage_withdraw(amount: string|null): StorageBalance {}

// Da de baja la cuenta anterior y regresa el depósito en NEAR de almacenamiento.
//
// Si la cuenta anterior no está registrada, la función DEBE resgresar
// `false` sin entrar en pánico.
//
// Si `force=true` la función DEBERÍA ignorar la información de la cuenta existente,
// tal como balances diferentes de 0 en un contrato TF (es decir, debería quemar dichos balances),
// y cerrar la cuenta. El contrato PUEDE entrar en pánico si no soporta el dar de baja
// de manera forzada, o si no puede forzar la dada de baja para la situación particular
// (ejemplo: demasiada información para eliminar de una).
//
// Si `force=false` o si `force` es omitido, el contrato DEBE de entrar en pánico
// si el llamanda tiene información de cuenta existente, como un saldo de balance positivo
// (ej. tenencias de dinero)
//
// DEBE requerir exactamente 1 yoctoNEAR de balance adjunto para prevenir llamadas
// de función con llaves de acceso restringidas (seguridad de la billetera UX)
//
// Regresa `true` si la cuenta fue dada de baja exitosamente.
// Regresa `false` si la cuenta no fue registrada anteriormente.
function storage_unregister(force: boolean|null): boolean {}

/****************/
/* MÉTODOS VIEW */
/****************/
// Regresa las cantidades de balance mínimo y máximo permitido para interactuar con
// este contrato. Vea StorageBalanceBounds.
function storage_balance_bounds(): StorageBalanceBounds {}

// Regresa la estructura StorageBalance del `account_id` válido
// proporcionado. Debe entrar en pánico si `account_id` es inválido.
//
// Si `account_id` no está registrado, deberá regresar `null`.
function storage_balance_of(account_id: string): StorageBalance|null {}
```

## Desventajas

- La idea puede confundir a los desarrolladores de contratos al principio hasta que entienda como un sistema con stakeo de storage funciona.
- Algunas personas en la comunidad preferirían que el depósito de almacenamiento solo se realice para el remitente. Es decir, nadie debería poder agregar almacenamiento para otro usuario. Esta postura no fue adoptada en este estándar, pero otros podrían tener alguna preocupación similar en el futuro.

## Posibilidades futuras

- Idealmente, los contratos actualizarán el balance disponible para todas las cuentas cada vez que el costo-almacenamiento-por-byte de la blockchain de NEAR se reduzca. Que se *deba* hacer no está plasmado en el estándar actual.

'''
'''--- specs/Terminology.md ---
# Terminología

## Definiciones de abstracción

### Cadena

Una *cadena* es una maquinaria de replicación que provee para cualquier tipo de estado, una manera de replicar por la red y alcanzar un consenso del estado actual.

'''
'''--- specs/images/receipt_flow_diagram.svg ---
<svg version="1.1" viewBox="0.0 0.0 960.0 540.0" fill="none" stroke="none" stroke-linecap="square" stroke-miterlimit="10" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg"><clipPath id="g6f8f9c6a26_0_0.0"><path d="m0 0l960.0 0l0 540.0l-960.0 0l0 -540.0z" clip-rule="nonzero"/></clipPath><g clip-path="url(#g6f8f9c6a26_0_0.0)"><path fill="#ffffff" d="m0 0l960.0 0l0 540.0l-960.0 0z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m158.81102 91.62205l0 347.14963" fill-rule="evenodd"/><path stroke="#595959" stroke-width="4.0" stroke-linejoin="round" stroke-linecap="butt" d="m158.81102 91.62205l0 347.14963" fill-rule="evenodd"/><path fill="#eeeeee" d="m142.52756 68.20473l0 0c0 -8.993111 7.2903595 -16.283466 16.283463 -16.283466c8.993118 0 16.283463 7.2903557 16.283463 16.283466c0 8.993103 -7.290344 16.283463 -16.283463 16.283463c-8.993103 0 -16.283463 -7.2903595 -16.283463 -16.283463z" fill-rule="evenodd"/><path fill="#bebebe" d="m151.89809 63.334763c0 -0.93678284 0.7594147 -1.6961937 1.6961975 -1.6961937c0.93678284 0 1.6961975 0.75941086 1.6961975 1.6961937c0 0.93678284 -0.7594147 1.6961975 -1.6961975 1.6961975c-0.93678284 0 -1.6961975 -0.7594147 -1.6961975 -1.6961975m10.433487 0c0 -0.93678284 0.7594147 -1.6961937 1.6961823 -1.6961937c0.93678284 0 1.6961975 0.75941086 1.6961975 1.6961937c0 0.93678284 -0.7594147 1.6961975 -1.6961975 1.6961975c-0.9367676 0 -1.6961823 -0.7594147 -1.6961823 -1.6961975" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m149.98528 75.30605q8.825745 6.0613556 17.630875 0" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m142.52756 68.20473l0 0c0 -8.993111 7.2903595 -16.283466 16.283463 -16.283466c8.993118 0 16.283463 7.2903557 16.283463 16.283466c0 8.993103 -7.290344 16.283463 -16.283463 16.283463c-8.993103 0 -16.283463 -7.2903595 -16.283463 -16.283463z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m151.89809 63.334763c0 -0.93678284 0.7594147 -1.6961937 1.6961975 -1.6961937c0.93678284 0 1.6961975 0.75941086 1.6961975 1.6961937c0 0.93678284 -0.7594147 1.6961975 -1.6961975 1.6961975c-0.93678284 0 -1.6961975 -0.7594147 -1.6961975 -1.6961975m10.433487 0c0 -0.93678284 0.7594147 -1.6961937 1.6961823 -1.6961937c0.93678284 0 1.6961975 0.75941086 1.6961975 1.6961937c0 0.93678284 -0.7594147 1.6961975 -1.6961975 1.6961975c-0.9367676 0 -1.6961823 -0.7594147 -1.6961823 -1.6961975" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m149.98528 75.30605q8.825745 6.0613556 17.630875 0" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m142.52756 68.20473l0 0c0 -8.993111 7.2903595 -16.283466 16.283463 -16.283466c8.993118 0 16.283463 7.2903557 16.283463 16.283466c0 8.993103 -7.290344 16.283463 -16.283463 16.283463c-8.993103 0 -16.283463 -7.2903595 -16.283463 -16.283463z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m110.968506 19.35433l95.68504 0l0 32.566933l-95.68504 0z" fill-rule="evenodd"/><path fill="#000000" d="m134.10461 41.15433q-0.109375 -0.203125 -0.171875 -0.734375q-0.84375 0.859375 -2.015625 0.859375q-1.03125 0 -1.703125 -0.578125q-0.671875 -0.59375 -0.671875 -1.5q0 -1.09375 0.828125 -1.703125q0.84375 -0.609375 2.359375 -0.609375l1.171875 0l0 -0.5625q0 -0.625 -0.375 -1.0q-0.375 -0.375 -1.109375 -0.375q-0.640625 0 -1.078125 0.328125q-0.4375 0.328125 -0.4375 0.78125l-1.203125 0q0 -0.515625 0.359375 -1.0q0.375 -0.5 1.015625 -0.78125q0.65625 -0.296875 1.421875 -0.296875q1.21875 0 1.90625 0.609375q0.6875 0.609375 0.71875 1.671875l0 3.25q0 0.96875 0.234375 1.53125l0 0.109375l-1.25 0zm-2.0 -0.921875q0.5625 0 1.0625 -0.28125q0.515625 -0.296875 0.734375 -0.765625l0 -1.453125l-0.9375 0q-2.21875 0 -2.21875 1.296875q0 0.5625 0.375 0.890625q0.390625 0.3125 0.984375 0.3125zm6.202896 0.921875l-1.203125 0l0 -10.000002l1.203125 0l0 10.000002zm3.2344208 0l-1.203125 0l0 -7.046875l1.203125 0l0 7.046875zm-1.296875 -8.90625q0 -0.2968769 0.171875 -0.5000019q0.1875 -0.203125 0.53125 -0.203125q0.359375 0 0.53125 0.203125q0.1875 0.203125 0.1875 0.5000019q0 0.296875 -0.1875 0.5q-0.171875 0.1875 -0.53125 0.1875q-0.34375 0 -0.53125 -0.1875q-0.171875 -0.203125 -0.171875 -0.5zm6.046921 8.046875q0.640625 0 1.125 -0.390625q0.484375 -0.390625 0.53125 -0.96875l1.140625 0q-0.03125 0.609375 -0.421875 1.15625q-0.375 0.546875 -1.015625 0.875q-0.640625 0.3125 -1.359375 0.3125q-1.4375 0 -2.296875 -0.953125q-0.84375 -0.96875 -0.84375 -2.625l0 -0.203125q0 -1.03125 0.375 -1.828125q0.390625 -0.796875 1.09375 -1.234375q0.703125 -0.453125 1.671875 -0.453125q1.171875 0 1.953125 0.71875q0.796875 0.703125 0.84375 1.828125l-1.140625 0q-0.046875 -0.671875 -0.515625 -1.109375q-0.46875 -0.453125 -1.140625 -0.453125q-0.921875 0 -1.4375 0.671875q-0.5 0.65625 -0.5 1.90625l0 0.21875q0 1.21875 0.5 1.875q0.515625 0.65625 1.4375 0.65625zm7.0701904 0.984375q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm9.357925 7.171875l-5.953125 0l0 -0.984375l5.953125 0l0 0.984375zm2.0757751 -8.03125l0.046875 0.890625q0.796875 -1.015625 2.109375 -1.015625q2.234375 0 2.25 2.515625l0 4.65625l-1.203125 0l0 -4.65625q-0.015625 -0.765625 -0.359375 -1.125q-0.328125 -0.375 -1.0625 -0.375q-0.578125 0 -1.03125 0.3125q-0.4375 0.3125 -0.6875 0.828125l0 5.015625l-1.203125 0l0 -7.046875l1.140625 0zm9.135147 7.171875q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm8.639175 6.1875q-0.109375 -0.203125 -0.171875 -0.734375q-0.84375 0.859375 -2.015625 0.859375q-1.03125 0 -1.703125 -0.578125q-0.671875 -0.59375 -0.671875 -1.5q0 -1.09375 0.828125 -1.703125q0.84375 -0.609375 2.359375 -0.609375l1.171875 0l0 -0.5625q0 -0.625 -0.375 -1.0q-0.375 -0.375 -1.109375 -0.375q-0.640625 0 -1.078125 0.328125q-0.4375 0.328125 -0.4375 0.78125l-1.203125 0q0 -0.515625 0.359375 -1.0q0.375 -0.5 1.015625 -0.78125q0.65625 -0.296875 1.421875 -0.296875q1.21875 0 1.90625 0.609375q0.6875 0.609375 0.71875 1.671875l0 3.25q0 0.96875 0.234375 1.53125l0 0.109375l-1.25 0zm-2.0 -0.921875q0.5625 0 1.0625 -0.28125q0.515625 -0.296875 0.734375 -0.765625l0 -1.453125l-0.9375 0q-2.21875 0 -2.21875 1.296875q0 0.5625 0.375 0.890625q0.390625 0.3125 0.984375 0.3125zm8.296646 -5.046875q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375z" fill-rule="nonzero"/><path fill="#000000" fill-opacity="0.0" d="m291.88452 91.62205l0 347.14963" fill-rule="evenodd"/><path stroke="#595959" stroke-width="4.0" stroke-linejoin="round" stroke-linecap="butt" d="m291.88452 91.62205l0 347.14963" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m244.04199 33.32021l95.68503 0l0 32.56693l-95.68503 0z" fill-rule="evenodd"/><path fill="#000000" d="m269.17096 50.90146q-1.609375 -0.46875 -2.34375 -1.140625q-0.734375 -0.671875 -0.734375 -1.65625q0 -1.125 0.890625 -1.859375q0.90625 -0.734375 2.34375 -0.734375q0.96875 0 1.734375 0.390625q0.765625 0.375 1.1875 1.046875q0.421875 0.65625 0.421875 1.4375l-1.265625 0q0 -0.859375 -0.546875 -1.34375q-0.546875 -0.5 -1.53125 -0.5q-0.921875 0 -1.453125 0.40625q-0.515625 0.40625 -0.515625 1.125q0 0.578125 0.484375 0.984375q0.5 0.40625 1.671875 0.734375q1.1875 0.328125 1.859375 0.734375q0.671875 0.390625 0.984375 0.9375q0.328125 0.53125 0.328125 1.25q0 1.15625 -0.90625 1.84375q-0.890625 0.6875 -2.390625 0.6875q-0.984375 0 -1.828125 -0.375q-0.84375 -0.375 -1.3125 -1.015625q-0.453125 -0.65625 -0.453125 -1.484375l1.265625 0q0 0.859375 0.625 1.359375q0.640625 0.5 1.703125 0.5q0.984375 0 1.515625 -0.40625q0.53125 -0.40625 0.53125 -1.09375q0 -0.703125 -0.5 -1.078125q-0.484375 -0.390625 -1.765625 -0.75zm6.125824 -1.96875q0.8125 -0.984375 2.09375 -0.984375q2.234375 0 2.25 2.515625l0 4.65625l-1.203125 0l0 -4.65625q-0.015625 -0.765625 -0.359375 -1.125q-0.328125 -0.375 -1.0625 -0.375q-0.578125 0 -1.03125 0.3125q-0.4375 0.3125 -0.6875 0.828125l0 5.015625l-1.203125 0l0 -10.0l1.203125 0l0 3.8125zm10.497131 6.1875q-0.109375 -0.203125 -0.171875 -0.734375q-0.84375 0.859375 -2.015625 0.859375q-1.03125 0 -1.703125 -0.578125q-0.671875 -0.59375 -0.671875 -1.5q0 -1.09375 0.828125 -1.703125q0.84375 -0.609375 2.359375 -0.609375l1.171875 0l0 -0.5625q0 -0.625 -0.375 -1.0q-0.375 -0.375 -1.109375 -0.375q-0.640625 0 -1.078125 0.328125q-0.4375 0.328125 -0.4375 0.78125l-1.203125 0q0 -0.515625 0.359375 -1.0q0.375 -0.5 1.015625 -0.78125q0.65625 -0.296875 1.421875 -0.296875q1.21875 0 1.90625 0.609375q0.6875 0.609375 0.71875 1.671875l0 3.25q0 0.96875 0.234375 1.53125l0 0.109375l-1.25 0zm-2.0 -0.921875q0.5625 0 1.0625 -0.28125q0.515625 -0.296875 0.734375 -0.765625l0 -1.453125l-0.9375 0q-2.21875 0 -2.21875 1.296875q0 0.5625 0.375 0.890625q0.390625 0.3125 0.984375 0.3125zm8.296631 -5.046875q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375zm0.698761 2.390625q0 -1.625 0.765625 -2.609375q0.765625 -0.984375 2.0 -0.984375q1.25 0 1.96875 0.84375l0 -3.671875l1.203125 0l0 10.0l-1.109375 0l-0.0625 -0.75q-0.71875 0.875 -2.0 0.875q-1.234375 0 -2.0 -1.0q-0.765625 -1.0 -0.765625 -2.609375l0 -0.09375zm1.203125 0.140625q0 1.1875 0.484375 1.875q0.5 0.671875 1.375 0.671875q1.140625 0 1.671875 -1.03125l0 -3.234375q-0.546875 -1.0 -1.65625 -1.0q-0.890625 0 -1.390625 0.6875q-0.484375 0.6875 -0.484375 2.03125zm16.128632 1.78125l1.359375 -5.390625l1.203125 0l-2.046875 7.046875l-0.984375 0l-1.7031555 -5.34375l-1.671875 5.34375l-0.96875 0l-2.046875 -7.046875l1.203125 0l1.375 5.28125l1.640625 -5.28125l0.9687805 0l1.671875 5.390625zm4.03125 2.46875l-1.046875 0l3.96875 -10.28125l1.03125 0l-3.953125 10.28125z" fill-rule="nonzero"/><path fill="#000000" d="m267.1781 71.12021q-0.109375 -0.203125 -0.171875 -0.734375q-0.84375 0.859375 -2.015625 0.859375q-1.03125 0 -1.703125 -0.578125q-0.671875 -0.59375 -0.671875 -1.5q0 -1.09375 0.828125 -1.703125q0.84375 -0.609375 2.359375 -0.609375l1.171875 0l0 -0.5625q0 -0.625 -0.375 -1.0q-0.375 -0.375 -1.109375 -0.375q-0.640625 0 -1.078125 0.328125q-0.4375 0.328125 -0.4375 0.78125l-1.203125 0q0 -0.515625 0.359375 -1.0q0.375 -0.5 1.015625 -0.78125q0.65625 -0.296875 1.421875 -0.296875q1.21875 0 1.90625 0.609375q0.6875 0.609375 0.71875 1.671875l0 3.25q0 0.96875 0.234375 1.53125l0 0.109375l-1.25 0zm-2.0 -0.921875q0.5625 0 1.0625 -0.28125q0.515625 -0.296875 0.734375 -0.765625l0 -1.453125l-0.9375 0q-2.21875 0 -2.21875 1.296875q0 0.5625 0.375 0.890625q0.390625 0.3125 0.984375 0.3125zm6.2029114 0.921875l-1.203125 0l0 -10.0l1.203125 0l0 10.0zm3.2344055 0l-1.203125 0l0 -7.046875l1.203125 0l0 7.046875zm-1.296875 -8.90625q0 -0.296875 0.171875 -0.5q0.1875 -0.203125 0.53125 -0.203125q0.359375 0 0.53125 0.203125q0.1875 0.203125 0.1875 0.5q0 0.296875 -0.1875 0.5q-0.171875 0.1875 -0.53125 0.1875q-0.34375 0 -0.53125 -0.1875q-0.171875 -0.203125 -0.171875 -0.5zm6.046936 8.046875q0.640625 0 1.125 -0.390625q0.484375 -0.390625 0.53125 -0.96875l1.140625 0q-0.03125 0.609375 -0.421875 1.15625q-0.375 0.546875 -1.015625 0.875q-0.640625 0.3125 -1.359375 0.3125q-1.4375 0 -2.296875 -0.953125q-0.84375 -0.96875 -0.84375 -2.625l0 -0.203125q0 -1.03125 0.375 -1.828125q0.390625 -0.796875 1.09375 -1.234375q0.703125 -0.453125 1.671875 -0.453125q1.171875 0 1.953125 0.71875q0.796875 0.703125 0.84375 1.828125l-1.140625 0q-0.046875 -0.671875 -0.515625 -1.109375q-0.46875 -0.453125 -1.140625 -0.453125q-0.921875 0 -1.4375 0.671875q-0.5 0.65625 -0.5 1.90625l0 0.21875q0 1.21875 0.5 1.875q0.515625 0.65625 1.4375 0.65625zm7.0701904 0.984375q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm9.35791 7.171875l-5.953125 0l0 -0.984375l5.953125 0l0 0.984375zm2.0757751 -8.03125l0.046875 0.890625q0.796875 -1.015625 2.109375 -1.015625q2.234375 0 2.25 2.515625l0 4.65625l-1.203125 0l0 -4.65625q-0.015625 -0.765625 -0.359375 -1.125q-0.328125 -0.375 -1.0625 -0.375q-0.578125 0 -1.03125 0.3125q-0.4375 0.3125 -0.6875 0.828125l0 5.015625l-1.203125 0l0 -7.046875l1.140625 0zm9.135162 7.171875q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm8.63916 6.1875q-0.109375 -0.203125 -0.171875 -0.734375q-0.84375 0.859375 -2.015625 0.859375q-1.03125 0 -1.703125 -0.578125q-0.671875 -0.59375 -0.671875 -1.5q0 -1.09375 0.828125 -1.703125q0.84375 -0.609375 2.359375 -0.609375l1.171875 0l0 -0.5625q0 -0.625 -0.375 -1.0q-0.375 -0.375 -1.109375 -0.375q-0.640625 0 -1.078125 0.328125q-0.4375 0.328125 -0.4375 0.78125l-1.203125 0q0 -0.515625 0.359375 -1.0q0.375 -0.5 1.015625 -0.78125q0.65625 -0.296875 1.421875 -0.296875q1.21875 0 1.90625 0.609375q0.6875 0.609375 0.71875 1.671875l0 3.25q0 0.96875 0.234375 1.53125l0 0.109375l-1.25 0zm-2.0 -0.921875q0.5625 0 1.0625 -0.28125q0.515625 -0.296875 0.734375 -0.765625l0 -1.453125l-0.9375 0q-2.21875 0 -2.21875 1.296875q0 0.5625 0.375 0.890625q0.390625 0.3125 0.984375 0.3125zm8.296661 -5.046875q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375z" fill-rule="nonzero"/><path fill="#000000" fill-opacity="0.0" d="m490.11023 91.62205l0 347.14963" fill-rule="evenodd"/><path stroke="#595959" stroke-width="4.0" stroke-linejoin="round" stroke-linecap="butt" d="m490.11023 91.62205l0 347.14963" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m435.43307 33.32021l109.35434 0l0 32.56693l-109.35434 0z" fill-rule="evenodd"/><path fill="#000000" d="m467.39667 50.90146q-1.609375 -0.46875 -2.34375 -1.140625q-0.734375 -0.671875 -0.734375 -1.65625q0 -1.125 0.890625 -1.859375q0.90625 -0.734375 2.34375 -0.734375q0.96875 0 1.734375 0.390625q0.765625 0.375 1.1875 1.046875q0.421875 0.65625 0.421875 1.4375l-1.265625 0q0 -0.859375 -0.546875 -1.34375q-0.546875 -0.5 -1.53125 -0.5q-0.921875 0 -1.453125 0.40625q-0.515625 0.40625 -0.515625 1.125q0 0.578125 0.484375 0.984375q0.5 0.40625 1.671875 0.734375q1.1875 0.328125 1.859375 0.734375q0.671875 0.390625 0.984375 0.9375q0.328125 0.53125 0.328125 1.25q0 1.15625 -0.90625 1.84375q-0.890625 0.6875 -2.390625 0.6875q-0.984375 0 -1.828125 -0.375q-0.84375 -0.375 -1.3125 -1.015625q-0.453125 -0.65625 -0.453125 -1.484375l1.265625 0q0 0.859375 0.625 1.359375q0.640625 0.5 1.703125 0.5q0.984375 0 1.515625 -0.40625q0.53125 -0.40625 0.53125 -1.09375q0 -0.703125 -0.5 -1.078125q-0.484375 -0.390625 -1.765625 -0.75zm6.125824 -1.96875q0.8125 -0.984375 2.09375 -0.984375q2.234375 0 2.25 2.515625l0 4.65625l-1.203125 0l0 -4.65625q-0.015625 -0.765625 -0.359375 -1.125q-0.328125 -0.375 -1.0625 -0.375q-0.578125 0 -1.03125 0.3125q-0.4375 0.3125 -0.6875 0.828125l0 5.015625l-1.203125 0l0 -10.0l1.203125 0l0 3.8125zm10.497131 6.1875q-0.109375 -0.203125 -0.171875 -0.734375q-0.84375 0.859375 -2.015625 0.859375q-1.03125 0 -1.703125 -0.578125q-0.671875 -0.59375 -0.671875 -1.5q0 -1.09375 0.828125 -1.703125q0.84375 -0.609375 2.359375 -0.609375l1.171875 0l0 -0.5625q0 -0.625 -0.375 -1.0q-0.375 -0.375 -1.109375 -0.375q-0.640625 0 -1.078125 0.328125q-0.4375 0.328125 -0.4375 0.78125l-1.203125 0q0 -0.515625 0.359375 -1.0q0.375 -0.5 1.015625 -0.78125q0.65625 -0.296875 1.421875 -0.296875q1.21875 0 1.90625 0.609375q0.6875 0.609375 0.71875 1.671875l0 3.25q0 0.96875 0.234375 1.53125l0 0.109375l-1.25 0zm-2.0 -0.921875q0.5625 0 1.0625 -0.28125q0.515625 -0.296875 0.734375 -0.765625l0 -1.453125l-0.9375 0q-2.21875 0 -2.21875 1.296875q0 0.5625 0.375 0.890625q0.390625 0.3125 0.984375 0.3125zm8.296661 -5.046875q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375zm0.698761 2.390625q0 -1.625 0.765625 -2.609375q0.765625 -0.984375 2.0 -0.984375q1.25 0 1.96875 0.84375l0 -3.671875l1.203125 0l0 10.0l-1.109375 0l-0.0625 -0.75q-0.71875 0.875 -2.0 0.875q-1.234375 0 -2.0 -1.0q-0.765625 -1.0 -0.765625 -2.609375l0 -0.09375zm1.203125 0.140625q0 1.1875 0.484375 1.875q0.5 0.671875 1.375 0.671875q1.140625 0 1.671875 -1.03125l0 -3.234375q-0.546875 -1.0 -1.65625 -1.0q-0.890625 0 -1.390625 0.6875q-0.484375 0.6875 -0.484375 2.03125zm16.128601 1.78125l1.359375 -5.390625l1.203125 0l-2.046875 7.046875l-0.984375 0l-1.703125 -5.34375l-1.671875 5.34375l-0.96875 0l-2.046875 -7.046875l1.203125 0l1.375 5.28125l1.640625 -5.28125l0.96875 0l1.671875 5.390625zm4.0312195 2.46875l-1.0468445 0l3.9687195 -10.28125l1.03125 0l-3.953125 10.28125z" fill-rule="nonzero"/><path fill="#000000" d="m452.22702 62.37021l0 1.703125l1.3125 0l0 0.9375l-1.3125 0l0 4.359375q0 0.421875 0.171875 0.640625q0.171875 0.21875 0.59375 0.21875q0.21875 0 0.578125 -0.078125l0 0.96875q-0.46875 0.125 -0.921875 0.125q-0.8125 0 -1.21875 -0.484375q-0.40625 -0.484375 -0.40625 -1.390625l0 -4.359375l-1.28125 0l0 -0.9375l1.28125 0l0 -1.703125l1.203125 0zm6.119385 2.78125q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375zm5.202667 5.96875q-0.109375 -0.203125 -0.171875 -0.734375q-0.84375 0.859375 -2.015625 0.859375q-1.03125 0 -1.703125 -0.578125q-0.671875 -0.59375 -0.671875 -1.5q0 -1.09375 0.828125 -1.703125q0.84375 -0.609375 2.359375 -0.609375l1.171875 0l0 -0.5625q0 -0.625 -0.375 -1.0q-0.375 -0.375 -1.109375 -0.375q-0.640625 0 -1.078125 0.328125q-0.4375 0.328125 -0.4375 0.78125l-1.203125 0q0 -0.515625 0.359375 -1.0q0.375 -0.5 1.015625 -0.78125q0.65625 -0.296875 1.421875 -0.296875q1.21875 0 1.90625 0.609375q0.6875 0.609375 0.71875 1.671875l0 3.25q0 0.96875 0.234375 1.53125l0 0.109375l-1.25 0zm-2.0 -0.921875q0.5625 0 1.0625 -0.28125q0.515625 -0.296875 0.734375 -0.765625l0 -1.453125l-0.9375 0q-2.21875 0 -2.21875 1.296875q0 0.5625 0.375 0.890625q0.390625 0.3125 0.984375 0.3125zm7.12088 -0.71875l1.75 -5.40625l1.21875 0l-2.515625 7.046875l-0.921875 0l-2.546875 -7.046875l1.21875 0l1.796875 5.40625zm6.964905 1.765625q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm5.5923157 6.1875l-1.203125 0l0 -10.0l1.203125 0l0 10.0zm7.0000305 0.984375l-5.953125 0l0 -0.984375l5.953125 0l0 0.984375zm5.294525 -0.984375q-0.109375 -0.203125 -0.171875 -0.734375q-0.84375 0.859375 -2.015625 0.859375q-1.03125 0 -1.703125 -0.578125q-0.671875 -0.59375 -0.671875 -1.5q0 -1.09375 0.828125 -1.703125q0.84375 -0.609375 2.359375 -0.609375l1.171875 0l0 -0.5625q0 -0.625 -0.375 -1.0q-0.375 -0.375 -1.109375 -0.375q-0.640625 0 -1.078125 0.328125q-0.4375 0.328125 -0.4375 0.78125l-1.203125 0q0 -0.515625 0.359375 -1.0q0.375 -0.5 1.015625 -0.78125q0.65625 -0.296875 1.421875 -0.296875q1.21875 0 1.90625 0.609375q0.6875 0.609375 0.71875 1.671875l0 3.25q0 0.96875 0.234375 1.53125l0 0.109375l-1.25 0zm-2.0 -0.921875q0.5625 0 1.0625 -0.28125q0.515625 -0.296875 0.734375 -0.765625l0 -1.453125l-0.9375 0q-2.21875 0 -2.21875 1.296875q0 0.5625 0.375 0.890625q0.390625 0.3125 0.984375 0.3125zm4.6091614 -2.65625q0 -1.640625 0.75 -2.609375q0.765625 -0.984375 2.03125 -0.984375q1.28125 0 2.015625 0.90625l0.046875 -0.78125l1.109375 0l0 6.875q0 1.375 -0.8125 2.15625q-0.8125 0.78125 -2.1875 0.78125q-0.75 0 -1.484375 -0.328125q-0.734375 -0.3125 -1.109375 -0.875l0.625 -0.734375q0.765625 0.96875 1.890625 0.96875q0.875 0 1.359375 -0.5q0.5 -0.5 0.5 -1.390625l0 -0.609375q-0.71875 0.828125 -1.96875 0.828125q-1.234375 0 -2.0 -0.984375q-0.765625 -1.0 -0.765625 -2.71875zm1.203125 0.140625q0 1.1875 0.484375 1.875q0.5 0.671875 1.375 0.671875q1.140625 0 1.671875 -1.03125l0 -3.21875q-0.546875 -1.015625 -1.65625 -1.015625q-0.875 0 -1.375 0.6875q-0.5 0.6875 -0.5 2.03125zm9.477539 3.5625q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm5.4204407 -0.859375l0.046875 0.890625q0.796875 -1.015625 2.109375 -1.015625q2.234375 0 2.25 2.515625l0 4.65625l-1.203125 0l0 -4.65625q-0.015625 -0.765625 -0.359375 -1.125q-0.328125 -0.375 -1.0625 -0.375q-0.578125 0 -1.03125 0.3125q-0.4375 0.3125 -0.6875 0.828125l0 5.015625l-1.203125 0l0 -7.046875l1.140625 0zm9.041382 6.1875q0.640625 0 1.125 -0.390625q0.484375 -0.390625 0.53125 -0.96875l1.140625 0q-0.03125 0.609375 -0.421875 1.15625q-0.375 0.546875 -1.015625 0.875q-0.640625 0.3125 -1.359375 0.3125q-1.4375 0 -2.296875 -0.953125q-0.84375 -0.96875 -0.84375 -2.625l0 -0.203125q0 -1.03125 0.375 -1.828125q0.390625 -0.796875 1.09375 -1.234375q0.703125 -0.453125 1.671875 -0.453125q1.171875 0 1.953125 0.71875q0.796875 0.703125 0.84375 1.828125l-1.140625 0q-0.046875 -0.671875 -0.515625 -1.109375q-0.46875 -0.453125 -1.140625 -0.453125q-0.921875 0 -1.4375 0.671875q-0.5 0.65625 -0.5 1.90625l0 0.21875q0 1.21875 0.5 1.875q0.515625 0.65625 1.4375 0.65625zm6.4608154 -0.90625l1.640625 -5.28125l1.28125 0l-2.828125 8.140625q-0.65625 1.75 -2.09375 1.75l-0.21875 -0.015625l-0.453125 -0.09375l0 -0.96875l0.328125 0.03125q0.609375 0 0.953125 -0.25q0.34375 -0.25 0.5625 -0.90625l0.265625 -0.71875l-2.515625 -6.96875l1.3125 0l1.765625 5.28125z" fill-rule="nonzero"/><path fill="#000000" fill-opacity="0.0" d="m683.2467 91.62205l0 347.14963" fill-rule="evenodd"/><path stroke="#595959" stroke-width="4.0" stroke-linejoin="round" stroke-linecap="butt" d="m683.2467 91.62205l0 347.14963" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m628.5696 33.32021l109.35431 0l0 32.56693l-109.35431 0z" fill-rule="evenodd"/><path fill="#000000" d="m660.53314 50.90146q-1.609375 -0.46875 -2.34375 -1.140625q-0.734375 -0.671875 -0.734375 -1.65625q0 -1.125 0.890625 -1.859375q0.90625 -0.734375 2.34375 -0.734375q0.96875 0 1.734375 0.390625q0.765625 0.375 1.1875 1.046875q0.421875 0.65625 0.421875 1.4375l-1.265625 0q0 -0.859375 -0.546875 -1.34375q-0.546875 -0.5 -1.53125 -0.5q-0.921875 0 -1.453125 0.40625q-0.515625 0.40625 -0.515625 1.125q0 0.578125 0.484375 0.984375q0.5 0.40625 1.671875 0.734375q1.1875 0.328125 1.859375 0.734375q0.671875 0.390625 0.984375 0.9375q0.328125 0.53125 0.328125 1.25q0 1.15625 -0.90625 1.84375q-0.890625 0.6875 -2.390625 0.6875q-0.984375 0 -1.828125 -0.375q-0.84375 -0.375 -1.3125 -1.015625q-0.453125 -0.65625 -0.453125 -1.484375l1.265625 0q0 0.859375 0.625 1.359375q0.640625 0.5 1.703125 0.5q0.984375 0 1.515625 -0.40625q0.53125 -0.40625 0.53125 -1.09375q0 -0.703125 -0.5 -1.078125q-0.484375 -0.390625 -1.765625 -0.75zm6.1258545 -1.96875q0.8125 -0.984375 2.09375 -0.984375q2.234375 0 2.25 2.515625l0 4.65625l-1.203125 0l0 -4.65625q-0.015625 -0.765625 -0.359375 -1.125q-0.328125 -0.375 -1.0625 -0.375q-0.578125 0 -1.03125 0.3125q-0.4375 0.3125 -0.6875 0.828125l0 5.015625l-1.203125 0l0 -10.0l1.203125 0l0 3.8125zm10.497131 6.1875q-0.109375 -0.203125 -0.171875 -0.734375q-0.84375 0.859375 -2.015625 0.859375q-1.03125 0 -1.703125 -0.578125q-0.671875 -0.59375 -0.671875 -1.5q0 -1.09375 0.828125 -1.703125q0.84375 -0.609375 2.359375 -0.609375l1.171875 0l0 -0.5625q0 -0.625 -0.375 -1.0q-0.375 -0.375 -1.109375 -0.375q-0.640625 0 -1.078125 0.328125q-0.4375 0.328125 -0.4375 0.78125l-1.203125 0q0 -0.515625 0.359375 -1.0q0.375 -0.5 1.015625 -0.78125q0.65625 -0.296875 1.421875 -0.296875q1.21875 0 1.90625 0.609375q0.6875 0.609375 0.71875 1.671875l0 3.25q0 0.96875 0.234375 1.53125l0 0.109375l-1.25 0zm-2.0 -0.921875q0.5625 0 1.0625 -0.28125q0.515625 -0.296875 0.734375 -0.765625l0 -1.453125l-0.9375 0q-2.21875 0 -2.21875 1.296875q0 0.5625 0.375 0.890625q0.390625 0.3125 0.984375 0.3125zm8.296631 -5.046875q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375zm0.6987915 2.390625q0 -1.625 0.765625 -2.609375q0.765625 -0.984375 2.0 -0.984375q1.25 0 1.96875 0.84375l0 -3.671875l1.203125 0l0 10.0l-1.109375 0l-0.0625 -0.75q-0.71875 0.875 -2.0 0.875q-1.234375 0 -2.0 -1.0q-0.765625 -1.0 -0.765625 -2.609375l0 -0.09375zm1.203125 0.140625q0 1.1875 0.484375 1.875q0.5 0.671875 1.375 0.671875q1.140625 0 1.671875 -1.03125l0 -3.234375q-0.546875 -1.0 -1.65625 -1.0q-0.890625 0 -1.390625 0.6875q-0.484375 0.6875 -0.484375 2.03125zm16.128601 1.78125l1.359375 -5.390625l1.203125 0l-2.046875 7.046875l-0.984375 0l-1.703125 -5.34375l-1.671875 5.34375l-0.96875 0l-2.046875 -7.046875l1.203125 0l1.375 5.28125l1.640625 -5.28125l0.96875 0l1.671875 5.390625zm4.03125 2.46875l-1.046875 0l3.96875 -10.28125l1.03125 0l-3.953125 10.28125z" fill-rule="nonzero"/><path fill="#000000" d="m654.46643 64.93271q0.8125 -0.984375 2.09375 -0.984375q2.234375 0 2.25 2.515625l0 4.65625l-1.203125 0l0 -4.65625q-0.015625 -0.765625 -0.359375 -1.125q-0.328125 -0.375 -1.0625 -0.375q-0.578125 0 -1.03125 0.3125q-0.4375 0.3125 -0.6875 0.828125l0 5.015625l-1.203125 0l0 -10.0l1.203125 0l0 3.8125zm5.8252563 2.609375q0 -1.046875 0.40625 -1.875q0.40625 -0.828125 1.125 -1.265625q0.734375 -0.453125 1.65625 -0.453125q1.4375 0 2.328125 1.0q0.890625 0.984375 0.890625 2.640625l0 0.09375q0 1.015625 -0.390625 1.84375q-0.390625 0.8125 -1.125 1.265625q-0.734375 0.453125 -1.6875 0.453125q-1.421875 0 -2.3125 -0.984375q-0.890625 -1.0 -0.890625 -2.640625l0 -0.078125zm1.203125 0.140625q0 1.171875 0.546875 1.875q0.546875 0.703125 1.453125 0.703125q0.921875 0 1.453125 -0.71875q0.546875 -0.71875 0.546875 -2.0q0 -1.171875 -0.546875 -1.890625q-0.546875 -0.71875 -1.46875 -0.71875q-0.890625 0 -1.4375 0.71875q-0.546875 0.703125 -0.546875 2.03125zm8.351196 -5.3125l0 1.703125l1.3125 0l0 0.9375l-1.3125 0l0 4.359375q0 0.421875 0.171875 0.640625q0.171875 0.21875 0.59375 0.21875q0.21875 0 0.578125 -0.078125l0 0.96875q-0.46875 0.125 -0.921875 0.125q-0.8125 0 -1.21875 -0.484375q-0.40625 -0.484375 -0.40625 -1.390625l0 -4.359375l-1.28125 0l0 -0.9375l1.28125 0l0 -1.703125l1.203125 0zm5.635071 8.875q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm5.592285 6.1875l-1.203125 0l0 -10.0l1.203125 0l0 10.0zm7.000061 0.984375l-5.953125 0l0 -0.984375l5.953125 0l0 0.984375zm2.0757446 -8.03125l0.046875 0.890625q0.796875 -1.015625 2.109375 -1.015625q2.234375 0 2.25 2.515625l0 4.65625l-1.203125 0l0 -4.65625q-0.015625 -0.765625 -0.359375 -1.125q-0.328125 -0.375 -1.0625 -0.375q-0.578125 0 -1.03125 0.3125q-0.4375 0.3125 -0.6875 0.828125l0 5.015625l-1.203125 0l0 -7.046875l1.140625 0zm9.135132 7.171875q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm8.639221 6.1875q-0.109375 -0.203125 -0.171875 -0.734375q-0.84375 0.859375 -2.015625 0.859375q-1.03125 0 -1.703125 -0.578125q-0.671875 -0.59375 -0.671875 -1.5q0 -1.09375 0.828125 -1.703125q0.84375 -0.609375 2.359375 -0.609375l1.171875 0l0 -0.5625q0 -0.625 -0.375 -1.0q-0.375 -0.375 -1.109375 -0.375q-0.640625 0 -1.078125 0.328125q-0.4375 0.328125 -0.4375 0.78125l-1.203125 0q0 -0.515625 0.359375 -1.0q0.375 -0.5 1.015625 -0.78125q0.65625 -0.296875 1.421875 -0.296875q1.21875 0 1.90625 0.609375q0.6875 0.609375 0.71875 1.671875l0 3.25q0 0.96875 0.234375 1.53125l0 0.109375l-1.25 0zm-2.0 -0.921875q0.5625 0 1.0625 -0.28125q0.515625 -0.296875 0.734375 -0.765625l0 -1.453125l-0.9375 0q-2.21875 0 -2.21875 1.296875q0 0.5625 0.375 0.890625q0.390625 0.3125 0.984375 0.3125zm8.296631 -5.046875q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375z" fill-rule="nonzero"/><path fill="#000000" fill-opacity="0.0" d="m157.79527 163.9029l136.40944 0" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m157.79527 163.9029l130.40944 0" fill-rule="evenodd"/><path fill="#595959" stroke="#595959" stroke-width="1.0" stroke-linecap="butt" d="m288.2047 165.55463l4.5381165 -1.6517334l-4.5381165 -1.6517334z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m168.70866 131.33595l95.68504 0l0 32.56694l-95.68504 0z" fill-rule="evenodd"/><path fill="#000000" d="m185.67366 144.38596l0 1.703125l1.3125 0l0 0.9375l-1.3125 0l0 4.359375q0 0.421875 0.171875 0.640625q0.171875 0.21875 0.59375 0.21875q0.21875 0 0.578125 -0.078125l0 0.96875q-0.46875 0.125 -0.921875 0.125q-0.8125 0 -1.21875 -0.484375q-0.40625 -0.484375 -0.40625 -1.390625l0 -4.359375l-1.28125 0l0 -0.9375l1.28125 0l0 -1.703125l1.203125 0zm6.1194 2.78125q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375zm5.202667 5.96875q-0.109375 -0.203125 -0.171875 -0.734375q-0.84375 0.859375 -2.015625 0.859375q-1.03125 0 -1.703125 -0.578125q-0.671875 -0.59375 -0.671875 -1.5q0 -1.09375 0.828125 -1.703125q0.84375 -0.609375 2.359375 -0.609375l1.171875 0l0 -0.5625q0 -0.625 -0.375 -1.0q-0.375 -0.375 -1.109375 -0.375q-0.640625 0 -1.078125 0.328125q-0.4375 0.328125 -0.4375 0.78125l-1.203125 0q0 -0.515625 0.359375 -1.0q0.375 -0.5 1.015625 -0.78125q0.65625 -0.296875 1.421875 -0.296875q1.21875 0 1.90625 0.609375q0.6875 0.609375 0.71875 1.671875l0 3.25q0 0.96875 0.234375 1.53125l0 0.109375l-1.25 0zm-2.0 -0.921875q0.5625 0 1.0625 -0.28125q0.515625 -0.296875 0.734375 -0.765625l0 -1.453125l-0.9375 0q-2.21875 0 -2.21875 1.296875q0 0.5625 0.375 0.890625q0.390625 0.3125 0.984375 0.3125zm6.031021 -6.125l0.046875 0.890625q0.796875 -1.015625 2.109375 -1.015625q2.234375 0 2.25 2.515625l0 4.65625l-1.203125 0l0 -4.65625q-0.015625 -0.765625 -0.359375 -1.125q-0.328125 -0.375 -1.0625 -0.375q-0.578125 0 -1.03125 0.3125q-0.4375 0.3125 -0.6875 0.828125l0 5.015625l-1.203125 0l0 -7.046875l1.140625 0zm10.322647 5.171875q0 -0.484375 -0.375 -0.75q-0.359375 -0.265625 -1.28125 -0.453125q-0.90625 -0.203125 -1.453125 -0.46875q-0.53125 -0.28125 -0.796875 -0.65625q-0.25 -0.390625 -0.25 -0.90625q0 -0.859375 0.734375 -1.453125q0.734375 -0.609375 1.875 -0.609375q1.1875 0 1.9375 0.625q0.75 0.609375 0.75 1.578125l-1.21875 0q0 -0.5 -0.421875 -0.859375q-0.421875 -0.359375 -1.046875 -0.359375q-0.65625 0 -1.03125 0.296875q-0.375 0.28125 -0.375 0.75q0 0.421875 0.34375 0.65625q0.34375 0.21875 1.25 0.421875q0.90625 0.203125 1.453125 0.484375q0.5625 0.265625 0.828125 0.671875q0.28125 0.390625 0.28125 0.953125q0 0.9375 -0.765625 1.515625q-0.75 0.5625 -1.953125 0.5625q-0.84375 0 -1.5 -0.296875q-0.640625 -0.296875 -1.015625 -0.828125q-0.359375 -0.546875 -0.359375 -1.171875l1.203125 0q0.03125 0.609375 0.484375 0.96875q0.453125 0.34375 1.1875 0.34375q0.6875 0 1.09375 -0.265625q0.421875 -0.28125 0.421875 -0.75zm7.1223145 1.875q-0.109375 -0.203125 -0.171875 -0.734375q-0.84375 0.859375 -2.015625 0.859375q-1.03125 0 -1.703125 -0.578125q-0.671875 -0.59375 -0.671875 -1.5q0 -1.09375 0.828125 -1.703125q0.84375 -0.609375 2.359375 -0.609375l1.171875 0l0 -0.5625q0 -0.625 -0.375 -1.0q-0.375 -0.375 -1.109375 -0.375q-0.640625 0 -1.078125 0.328125q-0.4375 0.328125 -0.4375 0.78125l-1.203125 0q0 -0.515625 0.359375 -1.0q0.375 -0.5 1.015625 -0.78125q0.65625 -0.296875 1.421875 -0.296875q1.21875 0 1.90625 0.609375q0.6875 0.609375 0.71875 1.671875l0 3.25q0 0.96875 0.234375 1.53125l0 0.109375l-1.25 0zm-2.0 -0.921875q0.5625 0 1.0625 -0.28125q0.515625 -0.296875 0.734375 -0.765625l0 -1.453125l-0.9375 0q-2.21875 0 -2.21875 1.296875q0 0.5625 0.375 0.890625q0.390625 0.3125 0.984375 0.3125zm7.718521 0.0625q0.640625 0 1.125 -0.390625q0.484375 -0.390625 0.53125 -0.96875l1.140625 0q-0.03125 0.609375 -0.421875 1.15625q-0.375 0.546875 -1.015625 0.875q-0.640625 0.3125 -1.359375 0.3125q-1.4375 0 -2.296875 -0.953125q-0.84375 -0.96875 -0.84375 -2.625l0 -0.203125q0 -1.03125 0.375 -1.828125q0.390625 -0.796875 1.09375 -1.234375q0.703125 -0.453125 1.671875 -0.453125q1.171875 0 1.953125 0.71875q0.796875 0.703125 0.84375 1.828125l-1.140625 0q-0.046875 -0.671875 -0.515625 -1.109375q-0.46875 -0.453125 -1.140625 -0.453125q-0.921875 0 -1.4375 0.671875q-0.5 0.65625 -0.5 1.90625l0 0.21875q0 1.21875 0.5 1.875q0.515625 0.65625 1.4375 0.65625zm5.7889404 -7.890625l0 1.703125l1.3125 0l0 0.9375l-1.3125 0l0 4.359375q0 0.421875 0.171875 0.640625q0.171875 0.21875 0.59375 0.21875q0.21875 0 0.578125 -0.078125l0 0.96875q-0.46875 0.125 -0.921875 0.125q-0.8125 0 -1.21875 -0.484375q-0.40625 -0.484375 -0.40625 -1.390625l0 -4.359375l-1.28125 0l0 -0.9375l1.28125 0l0 -1.703125l1.203125 0zm4.02565 8.75l-1.203125 0l0 -7.046875l1.203125 0l0 7.046875zm-1.296875 -8.90625q0 -0.296875 0.171875 -0.5q0.1875 -0.203125 0.53125 -0.203125q0.359375 0 0.53125 0.203125q0.1875 0.203125 0.1875 0.5q0 0.296875 -0.1875 0.5q-0.171875 0.1875 -0.53125 0.1875q-0.34375 0 -0.53125 -0.1875q-0.171875 -0.203125 -0.171875 -0.5zm2.9062958 5.328125q0 -1.046875 0.40625 -1.875q0.40625 -0.828125 1.125 -1.265625q0.734375 -0.453125 1.65625 -0.453125q1.4375 0 2.328125 1.0q0.890625 0.984375 0.890625 2.640625l0 0.09375q0 1.015625 -0.390625 1.84375q-0.390625 0.8125 -1.125 1.265625q-0.734375 0.453125 -1.6875 0.453125q-1.421875 0 -2.3125 -0.984375q-0.890625 -1.0 -0.890625 -2.640625l0 -0.078125zm1.203125 0.140625q0 1.171875 0.546875 1.875q0.546875 0.703125 1.453125 0.703125q0.921875 0 1.453125 -0.71875q0.546875 -0.71875 0.546875 -2.0q0 -1.171875 -0.546875 -1.890625q-0.546875 -0.71875 -1.46875 -0.71875q-0.890625 0 -1.4375 0.71875q-0.546875 0.703125 -0.546875 2.03125zm7.8511963 -3.609375l0.046875 0.890625q0.796875 -1.015625 2.109375 -1.015625q2.234375 0 2.25 2.515625l0 4.65625l-1.203125 0l0 -4.65625q-0.015625 -0.765625 -0.359375 -1.125q-0.328125 -0.375 -1.0625 -0.375q-0.578125 0 -1.03125 0.3125q-0.4375 0.3125 -0.6875 0.828125l0 5.015625l-1.203125 0l0 -7.046875l1.140625 0z" fill-rule="nonzero"/><path fill="#000000" fill-opacity="0.0" d="m297.99475 184.99213l193.70078 0" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m297.99475 184.99213l187.70078 0" fill-rule="evenodd"/><path fill="#595959" stroke="#595959" stroke-width="1.0" stroke-linecap="butt" d="m485.69553 186.64386l4.5381165 -1.6517334l-4.5381165 -1.6517334z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m302.43045 147.61942l174.55118 0l0 32.56694l-174.55118 0z" fill-rule="evenodd"/><path fill="#000000" d="m359.50403 163.45067q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375zm3.901886 6.09375q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm8.38916 4.3125q0 -0.484375 -0.375 -0.75q-0.359375 -0.265625 -1.28125 -0.453125q-0.90625 -0.203125 -1.453125 -0.46875q-0.53125 -0.28125 -0.796875 -0.65625q-0.25 -0.390625 -0.25 -0.90625q0 -0.859375 0.734375 -1.453125q0.734375 -0.609375 1.875 -0.609375q1.1875 0 1.9375 0.625q0.75 0.609375 0.75 1.578125l-1.21875 0q0 -0.5 -0.421875 -0.859375q-0.421875 -0.359375 -1.046875 -0.359375q-0.65625 0 -1.03125 0.296875q-0.375 0.28125 -0.375 0.75q0 0.421875 0.34375 0.65625q0.34375 0.21875 1.25 0.421875q0.90625 0.203125 1.453125 0.484375q0.5625 0.265625 0.828125 0.671875q0.28125 0.390625 0.28125 0.953125q0 0.9375 -0.765625 1.515625q-0.75 0.5625 -1.953125 0.5625q-0.84375 0 -1.5 -0.296875q-0.640625 -0.296875 -1.015625 -0.828125q-0.359375 -0.546875 -0.359375 -1.171875l1.203125 0q0.03125 0.609375 0.484375 0.96875q0.453125 0.34375 1.1875 0.34375q0.6875 0 1.09375 -0.265625q0.421875 -0.28125 0.421875 -0.75zm5.6848145 2.0q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm7.6860657 0.21875q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375zm3.5490112 4.328125l1.75 -5.40625l1.21875 0l-2.515625 7.046875l-0.921875 0l-2.546875 -7.046875l1.21875 0l1.796875 5.40625zm6.9649353 1.765625q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm9.35791 7.171875l-5.953125 0l0 -0.984375l5.953125 0l0 0.984375zm2.5757751 -9.734375l0 1.703125l1.3125 0l0 0.9375l-1.3125 0l0 4.359375q0 0.421875 0.171875 0.640625q0.171875 0.21875 0.59375 0.21875q0.21875 0 0.578125 -0.078125l0 0.96875q-0.46875 0.125 -0.921875 0.125q-0.8125 0 -1.21875 -0.484375q-0.40625 -0.484375 -0.40625 -1.390625l0 -4.359375l-1.28125 0l0 -0.9375l1.28125 0l0 -1.703125l1.203125 0zm6.1194153 2.78125q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375zm2.4161987 5.96875l-1.203125 0l0 -7.046875l1.203125 0l0 7.046875zm-1.296875 -8.90625q0 -0.296875 0.171875 -0.5q0.1875 -0.203125 0.53125 -0.203125q0.359375 0 0.53125 0.203125q0.1875 0.203125 0.1875 0.5q0 0.296875 -0.1875 0.5q-0.171875 0.1875 -0.53125 0.1875q-0.34375 0 -0.53125 -0.1875q-0.171875 -0.203125 -0.171875 -0.5zm9.171936 5.46875q0 1.609375 -0.734375 2.59375q-0.734375 0.96875 -2.0 0.96875q-1.28125 0 -2.015625 -0.8125l0 3.390625l-1.203125 0l0 -9.75l1.109375 0l0.046875 0.78125q0.75 -0.90625 2.046875 -0.90625q1.265625 0 2.0 0.953125q0.75 0.953125 0.75 2.671875l0 0.109375zm-1.203125 -0.140625q0 -1.1875 -0.515625 -1.875q-0.5 -0.703125 -1.390625 -0.703125q-1.09375 0 -1.640625 0.96875l0 3.375q0.546875 0.953125 1.65625 0.953125q0.875 0 1.375 -0.671875q0.515625 -0.6875 0.515625 -2.046875z" fill-rule="nonzero"/><path fill="#000000" fill-opacity="0.0" d="m491.69553 210.15486l193.70078 0" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m491.69553 210.15486l187.70078 0" fill-rule="evenodd"/><path fill="#595959" stroke="#595959" stroke-width="1.0" stroke-linecap="butt" d="m679.3963 211.8066l4.538147 -1.6517334l-4.538147 -1.6517334z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m500.19553 177.58792l174.55118 0l0 32.56694l-174.55118 0z" fill-rule="evenodd"/><path fill="#000000" d="m570.0636 193.41917q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375zm3.9019165 6.09375q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm8.38916 4.3125q0 -0.484375 -0.375 -0.75q-0.359375 -0.265625 -1.28125 -0.453125q-0.90625 -0.203125 -1.453125 -0.46875q-0.53125 -0.28125 -0.796875 -0.65625q-0.25 -0.390625 -0.25 -0.90625q0 -0.859375 0.734375 -1.453125q0.734375 -0.609375 1.875 -0.609375q1.1875 0 1.9375 0.625q0.75 0.609375 0.75 1.578125l-1.21875 0q0 -0.5 -0.421875 -0.859375q-0.421875 -0.359375 -1.046875 -0.359375q-0.65625 0 -1.03125 0.296875q-0.375 0.28125 -0.375 0.75q0 0.421875 0.34375 0.65625q0.34375 0.21875 1.25 0.421875q0.90625 0.203125 1.453125 0.484375q0.5625 0.265625 0.828125 0.671875q0.28125 0.390625 0.28125 0.953125q0 0.9375 -0.765625 1.515625q-0.75 0.5625 -1.953125 0.5625q-0.84375 0 -1.5 -0.296875q-0.640625 -0.296875 -1.015625 -0.828125q-0.359375 -0.546875 -0.359375 -1.171875l1.203125 0q0.03125 0.609375 0.484375 0.96875q0.453125 0.34375 1.1875 0.34375q0.6875 0 1.09375 -0.265625q0.421875 -0.28125 0.421875 -0.75zm5.6848145 2.0q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm7.686035 0.21875q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375zm3.5490112 4.328125l1.75 -5.40625l1.21875 0l-2.515625 7.046875l-0.921875 0l-2.546875 -7.046875l1.21875 0l1.796875 5.40625zm6.964966 1.765625q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625z" fill-rule="nonzero"/><path fill="#000000" fill-opacity="0.0" d="m490.11023 286.28348l193.7008 0" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m496.11023 286.28348l187.7008 0" fill-rule="evenodd"/><path fill="#595959" stroke="#595959" stroke-width="1.0" stroke-linecap="butt" d="m496.11023 284.63174l-4.538086 1.6517334l4.538086 1.6517334z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m476.98163 253.71654l221.3858 0l0 32.56694l-221.3858 0z" fill-rule="evenodd"/><path fill="#000000" d="m508.1719 269.32904q0.8125 -0.984375 2.09375 -0.984375q2.2343445 0 2.2499695 2.515625l0 4.65625l-1.2030945 0l0 -4.65625q-0.015625 -0.765625 -0.359375 -1.125q-0.328125 -0.375 -1.0625 -0.375q-0.578125 0 -1.03125 0.3125q-0.4375 0.3125 -0.6875 0.828125l0 5.015625l-1.203125 0l0 -10.0l1.203125 0l0 3.8125zm5.825226 2.609375q0 -1.046875 0.40625 -1.875q0.40625 -0.828125 1.125 -1.265625q0.734375 -0.453125 1.65625 -0.453125q1.4375 0 2.328125 1.0q0.890625 0.984375 0.890625 2.640625l0 0.09375q0 1.015625 -0.390625 1.84375q-0.390625 0.8125 -1.125 1.265625q-0.734375 0.453125 -1.6875 0.453125q-1.421875 0 -2.3125 -0.984375q-0.890625 -1.0 -0.890625 -2.640625l0 -0.078125zm1.203125 0.140625q0 1.171875 0.546875 1.875q0.546875 0.703125 1.453125 0.703125q0.921875 0 1.453125 -0.71875q0.546875 -0.71875 0.546875 -2.0q0 -1.171875 -0.546875 -1.890625q-0.546875 -0.71875 -1.46875 -0.71875q-0.890625 0 -1.4375 0.71875q-0.546875 0.703125 -0.546875 2.03125zm8.351196 -5.3125l0 1.703125l1.3125 0l0 0.9375l-1.3125 0l0 4.359375q0 0.421875 0.171875 0.640625q0.171875 0.21875 0.59375 0.21875q0.21875 0 0.578125 -0.078125l0 0.96875q-0.46875 0.125 -0.921875 0.125q-0.8125 0 -1.21875 -0.484375q-0.40625 -0.484375 -0.40625 -1.390625l0 -4.359375l-1.28125 0l0 -0.9375l1.28125 0l0 -1.703125l1.203125 0zm5.635071 8.875q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm5.592285 6.1875l-1.203125 0l0 -10.0l1.203125 0l0 10.0zm7.000061 0.984375l-5.953125 0l0 -0.984375l5.953125 0l0 0.984375zm4.3413696 -6.953125q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375zm3.9019165 6.09375q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm8.38916 4.3125q0 -0.484375 -0.375 -0.75q-0.359375 -0.265625 -1.28125 -0.453125q-0.90625 -0.203125 -1.453125 -0.46875q-0.53125 -0.28125 -0.796875 -0.65625q-0.25 -0.390625 -0.25 -0.90625q0 -0.859375 0.734375 -1.453125q0.734375 -0.609375 1.875 -0.609375q1.1875 0 1.9375 0.625q0.75 0.609375 0.75 1.578125l-1.21875 0q0 -0.5 -0.421875 -0.859375q-0.421875 -0.359375 -1.046875 -0.359375q-0.65625 0 -1.03125 0.296875q-0.375 0.28125 -0.375 0.75q0 0.421875 0.34375 0.65625q0.34375 0.21875 1.25 0.421875q0.90625 0.203125 1.453125 0.484375q0.5625 0.265625 0.828125 0.671875q0.28125 0.390625 0.28125 0.953125q0 0.9375 -0.765625 1.515625q-0.75 0.5625 -1.953125 0.5625q-0.84375 0 -1.5 -0.296875q-0.640625 -0.296875 -1.015625 -0.828125q-0.359375 -0.546875 -0.359375 -1.171875l1.203125 0q0.03125 0.609375 0.484375 0.96875q0.453125 0.34375 1.1875 0.34375q0.6875 0 1.09375 -0.265625q0.421875 -0.28125 0.421875 -0.75zm5.6848145 2.0q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm7.686035 0.21875q-0.265625 -0.03125 -0.59375 -0.03125q-1.1875 0 -1.609375 1.0l0 5.0l-1.203125 0l0 -7.046875l1.171875 0l0.03125 0.8125q0.578125 -0.9375 1.671875 -0.9375q0.34375 0 0.53125 0.09375l0 1.109375zm3.5490112 4.328125l1.75 -5.40625l1.21875 0l-2.515625 7.046875l-0.921875 0l-2.546875 -7.046875l1.21875 0l1.796875 5.40625zm8.389404 1.640625q-0.109375 -0.203125 -0.171875 -0.734375q-0.84375 0.859375 -2.015625 0.859375q-1.03125 0 -1.703125 -0.578125q-0.671875 -0.59375 -0.671875 -1.5q0 -1.09375 0.828125 -1.703125q0.84375 -0.609375 2.359375 -0.609375l1.171875 0l0 -0.5625q0 -0.625 -0.375 -1.0q-0.375 -0.375 -1.109375 -0.375q-0.640625 0 -1.078125 0.328125q-0.4375 0.328125 -0.4375 0.78125l-1.203125 0q0 -0.515625 0.359375 -1.0q0.375 -0.5 1.015625 -0.78125q0.65625 -0.296875 1.421875 -0.296875q1.21875 0 1.90625 0.609375q0.6875 0.609375 0.71875 1.671875l0 3.25q0 0.96875 0.234375 1.53125l0 0.109375l-1.25 0zm-2.0 -0.921875q0.5625 0 1.0625 -0.28125q0.515625 -0.296875 0.734375 -0.765625l0 -1.453125l-0.9375 0q-2.21875 0 -2.21875 1.296875q0 0.5625 0.375 0.890625q0.390625 0.3125 0.984375 0.3125zm6.531067 -7.828125l0 1.703125l1.3125 0l0 0.9375l-1.3125 0l0 4.359375q0 0.421875 0.171875 0.640625q0.171875 0.21875 0.59375 0.21875q0.21875 0 0.578125 -0.078125l0 0.96875q-0.46875 0.125 -0.921875 0.125q-0.8125 0 -1.21875 -0.484375q-0.40625 -0.484375 -0.40625 -1.390625l0 -4.359375l-1.28125 0l0 -0.9375l1.28125 0l0 -1.703125l1.203125 0zm4.025635 8.75l-1.203125 0l0 -7.046875l1.203125 0l0 7.046875zm-1.296875 -8.90625q0 -0.296875 0.171875 -0.5q0.1875 -0.203125 0.53125 -0.203125q0.359375 0 0.53125 0.203125q0.1875 0.203125 0.1875 0.5q0 0.296875 -0.1875 0.5q-0.171875 0.1875 -0.53125 0.1875q-0.34375 0 -0.53125 -0.1875q-0.171875 -0.203125 -0.171875 -0.5zm2.906311 5.328125q0 -1.046875 0.40625 -1.875q0.40625 -0.828125 1.125 -1.265625q0.734375 -0.453125 1.65625 -0.453125q1.4375 0 2.328125 1.0q0.890625 0.984375 0.890625 2.640625l0 0.09375q0 1.015625 -0.390625 1.84375q-0.390625 0.8125 -1.125 1.265625q-0.734375 0.453125 -1.6875 0.453125q-1.421875 0 -2.3125 -0.984375q-0.890625 -1.0 -0.890625 -2.640625l0 -0.078125zm1.203125 0.140625q0 1.171875 0.546875 1.875q0.546875 0.703125 1.453125 0.703125q0.921875 0 1.453125 -0.71875q0.546875 -0.71875 0.546875 -2.0q0 -1.171875 -0.546875 -1.890625q-0.546875 -0.71875 -1.46875 -0.71875q-0.890625 0 -1.4375 0.71875q-0.546875 0.703125 -0.546875 2.03125zm7.8511963 -3.609375l0.046875 0.890625q0.796875 -1.015625 2.109375 -1.015625q2.234314 0 2.249939 2.515625l0 4.65625l-1.203125 0l0 -4.65625q-0.015625 -0.765625 -0.359375 -1.125q-0.328125 -0.375 -1.062439 -0.375q-0.578125 0 -1.03125 0.3125q-0.4375 0.3125 -0.6875 0.828125l0 5.015625l-1.203125 0l0 -7.046875l1.140625 0zm11.291382 8.03125l-5.953125 0l0 -0.984375l5.953125 0l0 0.984375zm3.7632446 -1.84375q0.640625 0 1.125 -0.390625q0.484375 -0.390625 0.53125 -0.96875l1.140625 0q-0.03125 0.609375 -0.421875 1.15625q-0.375 0.546875 -1.015625 0.875q-0.640625 0.3125 -1.359375 0.3125q-1.4375 0 -2.296875 -0.953125q-0.84375 -0.96875 -0.84375 -2.625l0 -0.203125q0 -1.03125 0.375 -1.828125q0.390625 -0.796875 1.09375 -1.234375q0.703125 -0.453125 1.671875 -0.453125q1.171875 0 1.953125 0.71875q0.796875 0.703125 0.84375 1.828125l-1.140625 0q-0.046875 -0.671875 -0.515625 -1.109375q-0.46875 -0.453125 -1.140625 -0.453125q-0.921875 0 -1.4375 0.671875q-0.5 0.65625 -0.5 1.90625l0 0.21875q0 1.21875 0.5 1.875q0.515625 0.65625 1.4375 0.65625zm3.8358154 -2.71875q0 -1.046875 0.40625 -1.875q0.40625 -0.828125 1.125 -1.265625q0.734375 -0.453125 1.65625 -0.453125q1.4375 0 2.328125 1.0q0.890625 0.984375 0.890625 2.640625l0 0.09375q0 1.015625 -0.390625 1.84375q-0.390625 0.8125 -1.125 1.265625q-0.734375 0.453125 -1.6875 0.453125q-1.421875 0 -2.3125 -0.984375q-0.890625 -1.0 -0.890625 -2.640625l0 -0.078125zm1.203125 0.140625q0 1.171875 0.546875 1.875q0.546875 0.703125 1.453125 0.703125q0.921875 0 1.453125 -0.71875q0.546875 -0.71875 0.546875 -2.0q0 -1.171875 -0.546875 -1.890625q-0.546875 -0.71875 -1.46875 -0.71875q-0.890625 0 -1.4375 0.71875q-0.546875 0.703125 -0.546875 2.03125zm7.8511963 -3.609375l0.03125 0.78125q0.765625 -0.90625 2.09375 -0.90625q1.46875 0 2.0 1.125q0.359375 -0.5 0.921875 -0.8125q0.5625 -0.3125 1.328125 -0.3125q2.3125 0 2.359375 2.453125l0 4.71875l-1.203125 0l0 -4.640625q0 -0.765625 -0.34375 -1.140625q-0.34375 -0.375 -1.171875 -0.375q-0.65625 0 -1.109375 0.40625q-0.4375 0.40625 -0.515625 1.078125l0 4.671875l-1.203125 0l0 -4.609375q0 -1.546875 -1.5 -1.546875q-1.1875 0 -1.625 1.015625l0 5.140625l-1.203125 0l0 -7.046875l1.140625 0zm16.49414 3.609375q0 1.609375 -0.734375 2.59375q-0.734375 0.96875 -2.0 0.96875q-1.28125 0 -2.015625 -0.8125l0 3.390625l-1.203125 0l0 -9.75l1.109375 0l0.046875 0.78125q0.75 -0.90625 2.046875 -0.90625q1.265625 0 2.0 0.953125q0.75 0.953125 0.75 2.671875l0 0.109375zm-1.203125 -0.140625q0 -1.1875 -0.515625 -1.875q-0.5 -0.703125 -1.390625 -0.703125q-1.09375 0 -1.640625 0.96875l0 3.375q0.546875 0.953125 1.65625 0.953125q0.875 0 1.375 -0.671875q0.515625 -0.6875 0.515625 -2.046875zm4.040039 3.578125l-1.203125 0l0 -10.0l1.203125 0l0 10.0zm4.843811 0.125q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625zm5.92041 -2.5625l0 1.703125l1.3125 0l0 0.9375l-1.3125 0l0 4.359375q0 0.421875 0.171875 0.640625q0.171875 0.21875 0.59375 0.21875q0.21875 0 0.578125 -0.078125l0 0.96875q-0.46875 0.125 -0.921875 0.125q-0.8125 0 -1.21875 -0.484375q-0.40625 -0.484375 -0.40625 -1.390625l0 -4.359375l-1.28125 0l0 -0.9375l1.28125 0l0 -1.703125l1.203125 0zm5.635071 8.875q-1.421875 0 -2.328125 -0.9375q-0.890625 -0.9375 -0.890625 -2.515625l0 -0.21875q0 -1.046875 0.390625 -1.859375q0.40625 -0.828125 1.125 -1.296875q0.71875 -0.46875 1.5625 -0.46875q1.375 0 2.125 0.90625q0.765625 0.90625 0.765625 2.59375l0 0.5l-4.765625 0q0.015625 1.03125 0.59375 1.671875q0.59375 0.640625 1.484375 0.640625q0.640625 0 1.078125 -0.25q0.453125 -0.265625 0.78125 -0.6875l0.734375 0.5625q-0.875 1.359375 -2.65625 1.359375zm-0.140625 -6.3125q-0.734375 0 -1.234375 0.53125q-0.484375 0.53125 -0.609375 1.484375l3.53125 0l0 -0.078125q-0.046875 -0.921875 -0.5 -1.421875q-0.4375 -0.515625 -1.1875 -0.515625z" fill-rule="nonzero"/></g></svg>
'''
'''--- specs/images/runtime_architecture.svg ---
<svg version="1.1" viewBox="0.0 0.0 960.0 960.0" fill="none" stroke="none" stroke-linecap="square" stroke-miterlimit="10" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg"><clipPath id="p.0"><path d="m0 0l960.0 0l0 960.0l-960.0 0l0 -960.0z" clip-rule="nonzero"/></clipPath><g clip-path="url(#p.0)"><path fill="#ffffff" d="m0 0l960.0 0l0 960.0l-960.0 0z" fill-rule="evenodd"/><path fill="#eeeeee" d="m330.64566 638.29395l298.70865 0l0 59.433105l-298.70865 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m330.64566 638.29395l298.70865 0l0 59.433105l-298.70865 0z" fill-rule="evenodd"/><path fill="#000000" d="m470.94385 661.08673q0.109375 0 0.15625 0.046875q0.046875 0.046875 0.046875 0.171875l0 13.40625q0 0.21875 -0.234375 0.21875l-0.921875 0q-0.15625 0 -0.234375 -0.03125q-0.078125 -0.03125 -0.15625 -0.125l-7.203125 -10.453125q-0.078125 -0.140625 -0.140625 -0.109375q-0.0625 0.015625 -0.0625 0.125l0 10.34375q0 0.25 -0.265625 0.25l-1.046875 0q-0.234375 0 -0.234375 -0.25l0 -13.328125q0 -0.15625 0.046875 -0.203125q0.046875 -0.0625 0.1875 -0.0625l1.0625 0q0.15625 0 0.234375 0.046875q0.078125 0.03125 0.15625 0.140625l7.0 10.234375q0.09375 0.125 0.171875 0.125q0.109375 0 0.109375 -0.171875l0 -10.15625q0 -0.21875 0.21875 -0.21875l1.109375 0zm4.4978027 9.515625q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0zm9.839264 4.453125q-1.4375 1.375 -3.328125 1.375q-1.453125 0 -2.28125 -0.734375q-0.828125 -0.734375 -0.828125 -1.96875q0 -1.5 1.25 -2.359375q1.265625 -0.859375 3.65625 -1.0l1.453125 -0.109375q0.3125 -0.046875 0.3125 -0.28125l0 -0.5q0 -1.015625 -0.625 -1.59375q-0.625 -0.59375 -1.6875 -0.59375q-1.640625 0 -2.6875 1.484375q-0.046875 0.09375 -0.109375 0.125q-0.0625 0.03125 -0.140625 0l-1.015625 -0.34375q-0.09375 -0.03125 -0.09375 -0.125q0 -0.0625 0.0625 -0.171875q0.546875 -0.984375 1.578125 -1.53125q1.046875 -0.5625 2.46875 -0.5625q1.828125 0 2.796875 0.859375q0.96875 0.84375 0.96875 2.328125l0 6.609375q0 0.171875 -0.0625 0.234375q-0.046875 0.046875 -0.203125 0.046875l-0.921875 0q-0.234375 0 -0.265625 -0.296875l-0.046875 -0.859375q-0.015625 -0.125 -0.09375 -0.125q-0.0625 0 -0.15625 0.09375zm0.234375 -3.546875q0 -0.296875 -0.28125 -0.296875l-1.203125 0.109375q-1.734375 0.109375 -2.6875 0.671875q-0.9375 0.5625 -0.9375 1.546875q0 0.796875 0.5625 1.265625q0.578125 0.46875 1.53125 0.46875q0.578125 0 1.125 -0.203125q0.5625 -0.203125 1.0 -0.5625q0.421875 -0.34375 0.65625 -0.71875q0.234375 -0.375 0.234375 -0.734375l0 -1.546875zm4.504883 4.734375q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.078125 0q0.203125 0 0.203125 0.203125l0 1.21875q0 0.109375 0.0625 0.125q0.078125 0.015625 0.15625 -0.0625q1.40625 -1.671875 2.890625 -1.671875q0.640625 0 0.640625 0.25l0 1.109375q0 0.1875 -0.15625 0.15625q-0.34375 -0.0625 -0.84375 -0.0625q-0.546875 0 -1.1875 0.328125q-0.625 0.3125 -1.0625 0.8125q-0.421875 0.5 -0.421875 1.03125l0 6.171875q0 0.28125 -0.28125 0.28125l-1.015625 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m35.934383 287.24588l454.14172 0l0 275.68503l-454.14172 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m35.934383 287.24588l454.14172 0l0 275.68503l-454.14172 0z" fill-rule="evenodd"/><path fill="#eeeeee" d="m501.24747 218.34529l382.55118 0l0 344.62994l-382.55118 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m501.24747 218.34529l382.55118 0l0 344.62994l-382.55118 0z" fill-rule="evenodd"/><path fill="#000000" d="m660.09454 245.26529q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.078125 0q0.203125 0 0.203125 0.203125l0 1.21875q0 0.109375 0.0625 0.125q0.078125 0.015625 0.15625 -0.0625q1.40625 -1.671875 2.890625 -1.671875q0.640625 0 0.640625 0.25l0 1.109375q0 0.1875 -0.15625 0.15625q-0.34375 -0.0625 -0.84375 -0.0625q-0.546875 0 -1.1875 0.328125q-0.625 0.3125 -1.0625 0.8125q-0.421875 0.5 -0.421875 1.03125l0 6.171875q0 0.28125 -0.28125 0.28125l-1.015625 0zm10.239136 -1.046875q0.765625 0 1.5 -0.421875q0.734375 -0.421875 1.5 -1.203125l0 -6.953125q0 -0.265625 0.296875 -0.265625l1.03125 0q0.265625 0 0.265625 0.265625l-0.046875 9.375q0 0.25 -0.203125 0.25l-1.078125 0q-0.203125 0 -0.203125 -0.203125l0 -1.109375q0 -0.21875 -0.171875 -0.046875q-1.015625 0.859375 -1.796875 1.203125q-0.78125 0.34375 -1.59375 0.34375q-1.3125 0 -2.15625 -0.78125q-0.828125 -0.78125 -0.828125 -2.078125l0 -6.9375q0 -0.28125 0.265625 -0.28125l1.046875 0q0.25 0 0.25 0.265625l0 6.546875q0 0.9375 0.515625 1.484375q0.515625 0.546875 1.40625 0.546875zm7.708191 1.046875q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm13.239014 -8.734375q-0.140625 0 -0.140625 0.171875l0 5.90625q0 0.84375 0.265625 1.171875q0.28125 0.3125 0.921875 0.3125l1.28125 0q0.203125 0 0.203125 0.203125l-0.015625 0.640625q0 0.171875 -0.21875 0.234375q-0.484375 0.09375 -1.75 0.09375q-1.171875 0 -1.71875 -0.546875q-0.546875 -0.546875 -0.546875 -1.75l0 -6.234375q0 -0.203125 -0.1875 -0.203125l-1.484375 0q-0.203125 0 -0.203125 -0.1875l0 -0.78125q0 -0.1875 0.1875 -0.1875l1.578125 0q0.125 0 0.125 -0.140625l0.21875 -2.96875q0 -0.25 0.203125 -0.25l0.921875 0q0.234375 0 0.234375 0.265625l0 2.953125q0 0.140625 0.140625 0.140625l2.359375 0q0.203125 0 0.203125 0.171875l0 0.796875q0 0.1875 -0.203125 0.1875l-2.375 0zm6.2512207 -3.28125q0 0.1875 -0.078125 0.28125q-0.078125 0.078125 -0.25 0.078125l-1.09375 0q-0.28125 0 -0.28125 -0.328125l0 -1.5625q0 -0.296875 0.265625 -0.296875l1.171875 0q0.109375 0 0.1875 0.078125q0.078125 0.078125 0.078125 0.203125l0 1.546875zm-0.078125 11.703125q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.953125 0q-0.171875 0 -0.234375 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0 -9.359375q0 -0.265625 0.21875 -0.265625l1.140625 0q0.203125 0 0.203125 0.25l0 9.328125zm3.1619873 0.3125q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.1875 0 0.1875 0.203125l0 1.09375q0 0.21875 0.1875 0.046875q1.0 -0.8125 1.703125 -1.171875q0.71875 -0.359375 1.59375 -0.359375q1.046875 0 1.71875 0.46875q0.6875 0.46875 0.921875 1.171875q0.046875 0.0625 0.078125 0.0625q0.0625 0 0.1875 -0.09375q0.96875 -0.828125 1.734375 -1.21875q0.78125 -0.390625 1.640625 -0.390625q1.34375 0 2.09375 0.765625q0.765625 0.765625 0.765625 2.078125l0 6.9375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.234375 0 -0.234375 -0.25l0 -6.65625q0 -0.921875 -0.453125 -1.421875q-0.453125 -0.515625 -1.34375 -0.515625q-0.75 0 -1.40625 0.375q-0.640625 0.359375 -1.265625 0.890625q-0.140625 0.15625 -0.203125 0.265625q-0.046875 0.109375 -0.046875 0.28125l0 6.734375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -1.9375 -1.78125 -1.9375q-0.75 0 -1.375 0.34375q-0.625 0.34375 -1.5625 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm17.683777 -4.328125q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m696.76117 372.593l166.36218 0l0 49.826782l-166.36218 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m696.76117 372.593l166.36218 0l0 49.826782l-166.36218 0z" fill-rule="evenodd"/><path fill="#000000" d="m713.0839 404.42636q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm11.676514 -4.328125q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0zm9.839294 4.453125q-1.4375 1.375 -3.328125 1.375q-1.453125 0 -2.28125 -0.734375q-0.828125 -0.734375 -0.828125 -1.96875q0 -1.5 1.25 -2.359375q1.265625 -0.859375 3.65625 -1.0l1.453125 -0.109375q0.3125 -0.046875 0.3125 -0.28125l0 -0.5q0 -1.015625 -0.625 -1.59375q-0.625 -0.59375 -1.6875 -0.59375q-1.640625 0 -2.6875 1.484375q-0.046875 0.09375 -0.109375 0.125q-0.0625 0.03125 -0.140625 0l-1.015625 -0.34375q-0.09375 -0.03125 -0.09375 -0.125q0 -0.0625 0.0625 -0.171875q0.546875 -0.984375 1.578125 -1.53125q1.046875 -0.5625 2.46875 -0.5625q1.828125 0 2.796875 0.859375q0.96875 0.84375 0.96875 2.328125l0 6.609375q0 0.171875 -0.0625 0.234375q-0.046875 0.046875 -0.203125 0.046875l-0.921875 0q-0.234375 0 -0.265625 -0.296875l-0.046875 -0.859375q-0.015625 -0.125 -0.09375 -0.125q-0.0625 0 -0.15625 0.09375zm0.234375 -3.546875q0 -0.296875 -0.28125 -0.296875l-1.203125 0.109375q-1.734375 0.109375 -2.6875 0.671875q-0.9375 0.5625 -0.9375 1.546875q0 0.796875 0.5625 1.265625q0.578125 0.46875 1.53125 0.46875q0.578125 0 1.125 -0.203125q0.5625 -0.203125 1.0 -0.5625q0.421875 -0.34375 0.65625 -0.71875q0.234375 -0.375 0.234375 -0.734375l0 -1.546875zm4.504883 4.734375q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.078125 0q0.203125 0 0.203125 0.203125l0 1.21875q0 0.109375 0.0625 0.125q0.078125 0.015625 0.15625 -0.0625q1.40625 -1.671875 2.890625 -1.671875q0.640625 0 0.640625 0.25l0 1.109375q0 0.1875 -0.15625 0.15625q-0.34375 -0.0625 -0.84375 -0.0625q-0.546875 0 -1.1875 0.328125q-0.625 0.3125 -1.0625 0.8125q-0.421875 0.5 -0.421875 1.03125l0 6.171875q0 0.28125 -0.28125 0.28125l-1.015625 0zm10.368652 -4.578125q0 0.265625 -0.3125 0.265625l-4.234375 0q-0.140625 0 -0.203125 -0.046875q-0.046875 -0.046875 -0.046875 -0.171875l0 -0.828125q0 -0.203125 0.171875 -0.203125l4.4375 -0.015625q0.1875 0 0.1875 0.1875l0 0.8125zm10.639282 -5.3125q0.125 0 0.171875 0.09375q0.046875 0.078125 0 0.171875l-3.78125 9.34375q-0.09375 0.28125 -0.421875 0.28125l-0.671875 0q-0.359375 0 -0.46875 -0.265625l-3.765625 -9.34375q-0.03125 -0.03125 -0.03125 -0.09375q0 -0.1875 0.234375 -0.1875l1.15625 0q0.203125 0 0.296875 0.203125l2.921875 7.34375q0.0625 0.171875 0.140625 0.171875q0.0625 0 0.15625 -0.203125l2.921875 -7.3125q0.046875 -0.203125 0.28125 -0.203125l0.859375 0zm2.423706 9.890625q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.1875 0 0.1875 0.203125l0 1.09375q0 0.21875 0.1875 0.046875q1.0 -0.8125 1.703125 -1.171875q0.71875 -0.359375 1.59375 -0.359375q1.046875 0 1.71875 0.46875q0.6875 0.46875 0.921875 1.171875q0.046875 0.0625 0.078125 0.0625q0.0625 0 0.1875 -0.09375q0.96875 -0.828125 1.734375 -1.21875q0.78125 -0.390625 1.640625 -0.390625q1.34375 0 2.09375 0.765625q0.765625 0.765625 0.765625 2.078125l0 6.9375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.234375 0 -0.234375 -0.25l0 -6.65625q0 -0.921875 -0.453125 -1.421875q-0.453125 -0.515625 -1.34375 -0.515625q-0.75 0 -1.40625 0.375q-0.640625 0.359375 -1.265625 0.890625q-0.140625 0.15625 -0.203125 0.265625q-0.046875 0.109375 -0.046875 0.28125l0 6.734375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -1.9375 -1.78125 -1.9375q-0.75 0 -1.375 0.34375q-0.625 0.34375 -1.5625 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm21.152588 -4.578125q0 0.265625 -0.3125 0.265625l-4.234375 0q-0.140625 0 -0.203125 -0.046875q-0.046875 -0.046875 -0.046875 -0.171875l0 -0.828125q0 -0.203125 0.171875 -0.203125l4.4375 -0.015625q0.1875 0 0.1875 0.1875l0 0.8125zm2.8580322 4.578125q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.078125 0q0.203125 0 0.203125 0.203125l0 1.21875q0 0.109375 0.0625 0.125q0.078125 0.015625 0.15625 -0.0625q1.40625 -1.671875 2.890625 -1.671875q0.640625 0 0.640625 0.25l0 1.109375q0 0.1875 -0.15625 0.15625q-0.34375 -0.0625 -0.84375 -0.0625q-0.546875 0 -1.1875 0.328125q-0.625 0.3125 -1.0625 0.8125q-0.421875 0.5 -0.421875 1.03125l0 6.171875q0 0.28125 -0.28125 0.28125l-1.015625 0zm10.239075 -1.046875q0.765625 0 1.5 -0.421875q0.734375 -0.421875 1.5 -1.203125l0 -6.953125q0 -0.265625 0.296875 -0.265625l1.03125 0q0.265625 0 0.265625 0.265625l-0.046875 9.375q0 0.25 -0.203125 0.25l-1.078125 0q-0.203125 0 -0.203125 -0.203125l0 -1.109375q0 -0.21875 -0.171875 -0.046875q-1.015625 0.859375 -1.796875 1.203125q-0.78125 0.34375 -1.59375 0.34375q-1.3125 0 -2.15625 -0.78125q-0.828125 -0.78125 -0.828125 -2.078125l0 -6.9375q0 -0.28125 0.265625 -0.28125l1.046875 0q0.25 0 0.25 0.265625l0 6.546875q0 0.9375 0.515625 1.484375q0.515625 0.546875 1.40625 0.546875zm7.708252 1.046875q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm10.895264 0q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm11.676453 -4.328125q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0zm4.3549194 5.640625q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.078125 0q0.203125 0 0.203125 0.203125l0 1.21875q0 0.109375 0.0625 0.125q0.078125 0.015625 0.15625 -0.0625q1.40625 -1.671875 2.890625 -1.671875q0.640625 0 0.640625 0.25l0 1.109375q0 0.1875 -0.15625 0.15625q-0.34375 -0.0625 -0.84375 -0.0625q-0.546875 0 -1.1875 0.328125q-0.625 0.3125 -1.0625 0.8125q-0.421875 0.5 -0.421875 1.03125l0 6.171875q0 0.28125 -0.28125 0.28125l-1.015625 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m148.72966 387.7562l226.89763 0l0 73.95276l-226.89763 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m148.72966 387.7562l226.89763 0l0 73.95276l-226.89763 0z" fill-rule="evenodd"/><path fill="#000000" d="m243.69427 417.62134q1.234375 0 2.34375 0.53125q1.109375 0.515625 1.828125 1.390625q0.734375 0.875 0.890625 1.90625l0.015625 0.125q0 0.078125 -0.046875 0.125q-0.046875 0.03125 -0.09375 0.03125l-1.40625 0.109375l-0.03125 0q-0.0625 0 -0.109375 -0.046875q-0.03125 -0.046875 -0.046875 -0.140625q-0.28125 -1.21875 -1.15625 -1.9375q-0.875 -0.734375 -2.125 -0.734375q-1.953125 0 -3.0 1.453125q-1.03125 1.4375 -1.03125 4.3125q0 2.828125 1.03125 4.25q1.046875 1.421875 3.09375 1.421875q1.328125 0 2.203125 -0.640625q0.890625 -0.640625 1.4375 -2.03125q0.03125 -0.125 0.21875 -0.0625l1.09375 0.25q0.140625 0.046875 0.09375 0.265625q-0.265625 0.9375 -0.96875 1.765625q-0.6875 0.828125 -1.75 1.359375q-1.0625 0.515625 -2.40625 0.515625q-1.84375 0 -3.171875 -0.859375q-1.328125 -0.859375 -2.03125 -2.453125q-0.703125 -1.609375 -0.703125 -3.8125q0 -2.203125 0.6875 -3.796875q0.703125 -1.59375 2.015625 -2.4375q1.328125 -0.859375 3.125 -0.859375zm9.158722 13.71875q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.96875 0q-0.171875 0 -0.234375 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0.015625 -13.3125q0 -0.265625 0.21875 -0.265625l1.125 0q0.21875 0 0.21875 0.25l0 13.28125zm4.521332 -11.703125q0 0.1875 -0.078125 0.28125q-0.078125 0.078125 -0.25 0.078125l-1.0937347 0q-0.28125 0 -0.28125 -0.328125l0 -1.5625q0 -0.296875 0.265625 -0.296875l1.1718597 0q0.109375 0 0.1875 0.078125q0.078125 0.078125 0.078125 0.203125l0 1.546875zm-0.078125 11.703125q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.953125 0q-0.17185974 0 -0.23435974 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0 -9.359375q0 -0.265625 0.21875 -0.265625l1.1406097 0q0.203125 0 0.203125 0.25l0 9.328125zm3.9432373 -4.015625q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0zm4.354889 5.640625q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm13.239014 -8.734375q-0.140625 0 -0.140625 0.171875l0 5.90625q0 0.84375 0.265625 1.171875q0.28125 0.3125 0.921875 0.3125l1.28125 0q0.203125 0 0.203125 0.203125l-0.015625 0.640625q0 0.171875 -0.21875 0.234375q-0.484375 0.09375 -1.75 0.09375q-1.171875 0 -1.71875 -0.546875q-0.546875 -0.546875 -0.546875 -1.75l0 -6.234375q0 -0.203125 -0.1875 -0.203125l-1.484375 0q-0.203125 0 -0.203125 -0.1875l0 -0.78125q0 -0.1875 0.1875 -0.1875l1.578125 0q0.125 0 0.125 -0.140625l0.21875 -2.96875q0 -0.25 0.203125 -0.25l0.921875 0q0.234375 0 0.234375 0.265625l0 2.953125q0 0.140625 0.140625 0.140625l2.359375 0q0.203125 0 0.203125 0.171875l0 0.796875q0 0.1875 -0.203125 0.1875l-2.375 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m148.72966 299.6714l113.16536 0l0 73.95276l-113.16536 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m148.72966 299.6714l113.16536 0l0 73.95276l-113.16536 0z" fill-rule="evenodd"/><path fill="#000000" d="m187.52774 329.53653q1.234375 0 2.34375 0.53125q1.109375 0.515625 1.828125 1.390625q0.734375 0.875 0.890625 1.90625l0.015625 0.125q0 0.078125 -0.046875 0.125q-0.046875 0.03125 -0.09375 0.03125l-1.40625 0.109375l-0.03125 0q-0.0625 0 -0.109375 -0.046875q-0.03125 -0.046875 -0.046875 -0.140625q-0.28125 -1.21875 -1.15625 -1.9375q-0.875 -0.734375 -2.125 -0.734375q-1.953125 0 -3.0 1.453125q-1.03125 1.4375 -1.03125 4.3125q0 2.828125 1.03125 4.25q1.046875 1.421875 3.09375 1.421875q1.328125 0 2.203125 -0.640625q0.890625 -0.640625 1.4375 -2.03125q0.03125 -0.125 0.21875 -0.0625l1.09375 0.25q0.140625 0.046875 0.09375 0.265625q-0.265625 0.9375 -0.96875 1.765625q-0.6875 0.828125 -1.75 1.359375q-1.0625 0.515625 -2.40625 0.515625q-1.84375 0 -3.171875 -0.859375q-1.328125 -0.859375 -2.03125 -2.453125q-0.703125 -1.609375 -0.703125 -3.8125q0 -2.203125 0.6875 -3.796875q0.703125 -1.59375 2.015625 -2.4375q1.328125 -0.859375 3.125 -0.859375zm7.846222 14.03125q-0.25 0 -0.25 -0.25l0 -13.34375q0 -0.25 0.203125 -0.25l1.109375 0q0.203125 0 0.203125 0.21875l0 4.984375q0 0.203125 0.171875 0.0625q1.0625 -0.828125 1.796875 -1.15625q0.75 -0.34375 1.640625 -0.34375q1.4375 0 2.21875 0.765625q0.78125 0.765625 0.78125 2.078125l0 6.9375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.421875 0.34375q-0.640625 0.34375 -1.625 1.171875l0 7.046875q0 0.28125 -0.296875 0.28125l-1.015625 0zm16.379623 -1.1875q-1.4375 1.375 -3.328125 1.375q-1.453125 0 -2.28125 -0.734375q-0.828125 -0.734375 -0.828125 -1.96875q0 -1.5 1.25 -2.359375q1.265625 -0.859375 3.65625 -1.0l1.453125 -0.109375q0.3125 -0.046875 0.3125 -0.28125l0 -0.5q0 -1.015625 -0.625 -1.59375q-0.625 -0.59375 -1.6875 -0.59375q-1.640625 0 -2.6875 1.484375q-0.046875 0.09375 -0.109375 0.125q-0.0625 0.03125 -0.140625 0l-1.015625 -0.34375q-0.09375 -0.03125 -0.09375 -0.125q0 -0.0625 0.0625 -0.171875q0.546875 -0.984375 1.578125 -1.53125q1.046875 -0.5625 2.46875 -0.5625q1.828125 0 2.796875 0.859375q0.96875 0.84375 0.96875 2.328125l0 6.609375q0 0.171875 -0.0625 0.234375q-0.046875 0.046875 -0.203125 0.046875l-0.921875 0q-0.234375 0 -0.265625 -0.296875l-0.046875 -0.859375q-0.015625 -0.125 -0.09375 -0.125q-0.0625 0 -0.15625 0.09375zm0.234375 -3.546875q0 -0.296875 -0.28125 -0.296875l-1.203125 0.109375q-1.734375 0.109375 -2.6875 0.671875q-0.9375 0.5625 -0.9375 1.546875q0 0.796875 0.5625 1.265625q0.578125 0.46875 1.53125 0.46875q0.578125 0 1.125 -0.203125q0.5625 -0.203125 1.0 -0.5625q0.421875 -0.34375 0.65625 -0.71875q0.234375 -0.375 0.234375 -0.734375l0 -1.546875zm5.879883 -7.28125q0 0.1875 -0.078125 0.28125q-0.078125 0.078125 -0.25 0.078125l-1.09375 0q-0.28125 0 -0.28125 -0.328125l0 -1.5625q0 -0.296875 0.265625 -0.296875l1.171875 0q0.109375 0 0.1875 0.078125q0.078125 0.078125 0.078125 0.203125l0 1.546875zm-0.078125 11.703125q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.953125 0q-0.171875 0 -0.234375 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0 -9.359375q0 -0.265625 0.21875 -0.265625l1.140625 0q0.203125 0 0.203125 0.25l0 9.328125zm3.161972 0.3125q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0z" fill-rule="nonzero"/><path fill="#d9d9d9" d="m35.934383 216.84285l454.14172 0l0 68.94487l-454.14172 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m35.934383 216.84285l454.14172 0l0 68.94487l-454.14172 0z" fill-rule="evenodd"/><path fill="#000000" d="m245.22064 244.20404q1.234375 0 2.34375 0.53125q1.109375 0.515625 1.828125 1.390625q0.734375 0.875 0.890625 1.90625l0.015625 0.125q0 0.078125 -0.046875 0.125q-0.046875 0.03125 -0.09375 0.03125l-1.40625 0.109375l-0.03125 0q-0.0625 0 -0.109375 -0.046875q-0.03125 -0.046875 -0.046875 -0.140625q-0.28125 -1.21875 -1.15625 -1.9375q-0.875 -0.734375 -2.125 -0.734375q-1.953125 0 -3.0 1.453125q-1.03125 1.4375 -1.03125 4.3125q0 2.828125 1.03125 4.25q1.046875 1.421875 3.09375 1.421875q1.328125 0 2.203125 -0.640625q0.890625 -0.640625 1.4375 -2.03125q0.03125 -0.125 0.21875 -0.0625l1.09375 0.25q0.140625 0.046875 0.09375 0.265625q-0.265625 0.9375 -0.96875 1.765625q-0.6875 0.828125 -1.75 1.359375q-1.0625 0.515625 -2.40625 0.515625q-1.84375 0 -3.171875 -0.859375q-1.328125 -0.859375 -2.03125 -2.453125q-0.703125 -1.609375 -0.703125 -3.8125q0 -2.203125 0.6875 -3.796875q0.703125 -1.59375 2.015625 -2.4375q1.328125 -0.859375 3.125 -0.859375zm7.846222 14.03125q-0.25 0 -0.25 -0.25l0 -13.34375q0 -0.25 0.203125 -0.25l1.109375 0q0.203125 0 0.203125 0.21875l0 4.984375q0 0.203125 0.171875 0.0625q1.0625 -0.828125 1.796875 -1.15625q0.75 -0.34375 1.640625 -0.34375q1.4375 0 2.21875 0.765625q0.78125 0.765625 0.78125 2.078125l0 6.9375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.421875 0.34375q-0.640625 0.34375 -1.625 1.171875l0 7.046875q0 0.28125 -0.296875 0.28125l-1.015625 0zm16.379608 -1.1875q-1.4375 1.375 -3.328125 1.375q-1.453125 0 -2.28125 -0.734375q-0.828125 -0.734375 -0.828125 -1.96875q0 -1.5 1.25 -2.359375q1.265625 -0.859375 3.65625 -1.0l1.453125 -0.109375q0.3125 -0.046875 0.3125 -0.28125l0 -0.5q0 -1.015625 -0.625 -1.59375q-0.625 -0.59375 -1.6875 -0.59375q-1.640625 0 -2.6875 1.484375q-0.046875 0.09375 -0.109375 0.125q-0.0625 0.03125 -0.140625 0l-1.015625 -0.34375q-0.09375 -0.03125 -0.09375 -0.125q0 -0.0625 0.0625 -0.171875q0.546875 -0.984375 1.578125 -1.53125q1.046875 -0.5625 2.46875 -0.5625q1.828125 0 2.796875 0.859375q0.96875 0.84375 0.96875 2.328125l0 6.609375q0 0.171875 -0.0625 0.234375q-0.046875 0.046875 -0.203125 0.046875l-0.921875 0q-0.234375 0 -0.265625 -0.296875l-0.046875 -0.859375q-0.015625 -0.125 -0.09375 -0.125q-0.0625 0 -0.15625 0.09375zm0.234375 -3.546875q0 -0.296875 -0.28125 -0.296875l-1.203125 0.109375q-1.734375 0.109375 -2.6875 0.671875q-0.9375 0.5625 -0.9375 1.546875q0 0.796875 0.5625 1.265625q0.578125 0.46875 1.53125 0.46875q0.578125 0 1.125 -0.203125q0.5625 -0.203125 1.0 -0.5625q0.421875 -0.34375 0.65625 -0.71875q0.234375 -0.375 0.234375 -0.734375l0 -1.546875zm5.879883 -7.28125q0 0.1875 -0.078125 0.28125q-0.078125 0.078125 -0.25 0.078125l-1.09375 0q-0.28125 0 -0.28125 -0.328125l0 -1.5625q0 -0.296875 0.265625 -0.296875l1.171875 0q0.109375 0 0.1875 0.078125q0.078125 0.078125 0.078125 0.203125l0 1.546875zm-0.078125 11.703125q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.953125 0q-0.171875 0 -0.234375 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0 -9.359375q0 -0.265625 0.21875 -0.265625l1.140625 0q0.203125 0 0.203125 0.25l0 9.328125zm3.1619873 0.3125q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m44.002567 475.84415l331.62204 0l0 73.95279l-331.62204 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m44.002567 475.84415l331.62204 0l0 73.95279l-331.62204 0z" fill-rule="evenodd"/><path fill="#000000" d="m184.0228 505.8968q0.109375 0 0.15625 0.046875q0.046875 0.046875 0.046875 0.171875l0 13.40625q0 0.21875 -0.234375 0.21875l-0.921875 0q-0.15625 0 -0.234375 -0.03125q-0.078125 -0.03125 -0.15625 -0.125l-7.203125 -10.453125q-0.078125 -0.140625 -0.140625 -0.109375q-0.0625 0.015625 -0.0625 0.125l0 10.34375q0 0.25 -0.265625 0.25l-1.046875 0q-0.234375 0 -0.234375 -0.25l0 -13.328125q0 -0.15625 0.046875 -0.203125q0.046875 -0.0625 0.1875 -0.0625l1.0625 0q0.15625 0 0.234375 0.046875q0.078125 0.03125 0.15625 0.140625l7.0 10.234375q0.09375 0.125 0.171875 0.125q0.109375 0 0.109375 -0.171875l0 -10.15625q0 -0.21875 0.21875 -0.21875l1.109375 0zm4.4978027 9.515625q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0zm6.623993 -3.09375q-0.140625 0 -0.140625 0.171875l0 5.90625q0 0.84375 0.265625 1.171875q0.28125 0.3125 0.921875 0.3125l1.28125 0q0.203125 0 0.203125 0.203125l-0.015625 0.640625q0 0.171875 -0.21875 0.234375q-0.484375 0.09375 -1.75 0.09375q-1.171875 0 -1.71875 -0.546875q-0.546875 -0.546875 -0.546875 -1.75l0 -6.234375q0 -0.203125 -0.1875 -0.203125l-1.484375 0q-0.203125 0 -0.203125 -0.1875l0 -0.78125q0 -0.1875 0.1875 -0.1875l1.578125 0q0.125 0 0.125 -0.140625l0.21875 -2.96875q0 -0.25 0.203125 -0.25l0.921875 0q0.234375 0 0.234375 0.265625l0 2.953125q0 0.140625 0.140625 0.140625l2.359375 0q0.203125 0 0.203125 0.171875l0 0.796875q0 0.1875 -0.203125 0.1875l-2.375 0zm17.25122 -1.15625q0.125 0 0.171875 0.09375q0.0625 0.078125 0.015625 0.171875l-2.84375 9.375q-0.078125 0.25 -0.359375 0.25l-0.890625 0q-0.328125 0 -0.390625 -0.25l-2.21875 -6.96875q-0.0625 -0.171875 -0.140625 -0.171875q-0.03125 0 -0.09375 0.171875l-2.109375 6.96875q-0.0625 0.25 -0.34375 0.25l-0.953125 0q-0.328125 0 -0.390625 -0.25l-2.9375 -9.359375q-0.015625 -0.03125 -0.015625 -0.09375q0 -0.1875 0.21875 -0.1875l1.109375 0q0.203125 0 0.296875 0.203125l2.21875 7.265625q0.0625 0.1875 0.125 0.1875q0.0625 0 0.15625 -0.203125l2.203125 -7.265625q0.046875 -0.1875 0.25 -0.1875l0.890625 0q0.21875 0 0.28125 0.203125l2.28125 7.265625q0.0625 0.1875 0.140625 0.1875q0.078125 0 0.125 -0.203125l2.140625 -7.25q0.09375 -0.203125 0.328125 -0.203125l0.734375 0zm6.3503723 10.078125q-1.40625 0 -2.484375 -0.640625q-1.0625 -0.640625 -1.65625 -1.796875q-0.578125 -1.171875 -0.578125 -2.640625q0 -1.515625 0.609375 -2.6875q0.609375 -1.171875 1.671875 -1.828125q1.078125 -0.671875 2.453125 -0.671875q1.390625 0 2.453125 0.671875q1.078125 0.65625 1.65625 1.828125q0.59375 1.171875 0.59375 2.671875q0 1.46875 -0.59375 2.625q-0.59375 1.15625 -1.671875 1.8125q-1.078125 0.65625 -2.453125 0.65625zm0.03125 -1.171875q1.46875 0 2.265625 -1.046875q0.8125 -1.0625 0.8125 -2.90625q0 -1.828125 -0.828125 -2.90625q-0.828125 -1.078125 -2.265625 -1.078125q-1.453125 0 -2.296875 1.078125q-0.828125 1.078125 -0.828125 2.90625q0 1.828125 0.828125 2.890625q0.84375 1.0625 2.3125 1.0625zm7.2688293 0.984375q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.078125 0q0.203125 0 0.203125 0.203125l0 1.21875q0 0.109375 0.0625 0.125q0.078125 0.015625 0.15625 -0.0625q1.40625 -1.671875 2.890625 -1.671875q0.640625 0 0.640625 0.25l0 1.109375q0 0.1875 -0.15625 0.15625q-0.34375 -0.0625 -0.84375 -0.0625q-0.546875 0 -1.1875 0.328125q-0.625 0.3125 -1.0625 0.8125q-0.421875 0.5 -0.421875 1.03125l0 6.171875q0 0.28125 -0.28125 0.28125l-1.015625 0zm15.426605 -0.296875q0.03125 0.03125 0.03125 0.125q0 0.171875 -0.203125 0.171875l-1.3125 0q-0.109375 0 -0.1875 -0.046875q-0.0625 -0.046875 -0.140625 -0.171875l-2.8125 -4.84375q-0.046875 -0.09375 -0.109375 -0.09375q-0.046875 -0.015625 -0.125 0.0625l-1.96875 2.0q-0.140625 0.125 -0.140625 0.375l0 2.40625q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.953125 0q-0.171875 0 -0.234375 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0 -13.3125q0 -0.265625 0.203125 -0.265625l1.140625 0q0.21875 0 0.21875 0.25l0 8.65625q0 0.1875 0.0625 0.1875q0.0625 0 0.125 -0.125l4.609375 -4.78125q0.203125 -0.234375 0.390625 -0.234375l1.140625 0q0.234375 0 0.234375 0.140625q0 0.046875 -0.140625 0.21875l-2.9375 3.0q-0.078125 0.109375 -0.078125 0.171875q0 0.046875 0.046875 0.140625l3.515625 5.921875z" fill-rule="nonzero"/><path fill="#eeeeee" d="m42.27407 297.5336l98.07874 0l0 166.55121l-98.07874 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m42.27407 297.5336l98.07874 0l0 166.55121l-98.07874 0z" fill-rule="evenodd"/><path fill="#000000" d="m73.30937 373.6823q0 1.625 -0.71875 2.4375q-0.71875 0.796875 -2.265625 0.796875q-0.84375 0 -1.4375 -0.1875q-0.578125 -0.1875 -0.65625 -0.203125q-0.25 -0.09375 -0.203125 -0.359375l0.171875 -1.0q0.03125 -0.234375 0.21875 -0.171875q0.09375 0.03125 0.328125 0.140625q0.25 0.09375 0.546875 0.171875q0.296875 0.0625 0.65625 0.0625q0.859375 0 1.203125 -0.453125q0.359375 -0.46875 0.359375 -1.640625l0 -10.140625q0 -0.25 0.234375 -0.25l1.359375 0q0.203125 0 0.203125 0.25l0 10.546875zm11.032684 -8.21875q-1.203125 -1.40625 -3.171875 -1.40625q-1.40625 0 -2.21875 0.625q-0.796875 0.609375 -0.796875 1.71875q0 1.453125 2.0 2.125l2.703125 0.890625q1.640625 0.546875 2.375 1.453125q0.75 0.890625 0.75 2.203125q0 1.796875 -1.328125 2.828125q-1.328125 1.015625 -3.625 1.015625q-1.671875 0 -2.953125 -0.59375q-1.28125 -0.59375 -2.0625 -1.734375q-0.078125 -0.15625 -0.078125 -0.1875q0 -0.140625 0.1875 -0.265625l0.671875 -0.46875q0.171875 -0.109375 0.265625 -0.109375q0.109375 0 0.203125 0.109375q0.796875 1.03125 1.578125 1.46875q0.796875 0.421875 2.109375 0.421875q1.578125 0 2.4375 -0.5625q0.875 -0.5625 0.875 -1.734375q0 -0.734375 -0.46875 -1.234375q-0.453125 -0.515625 -1.640625 -0.96875l-2.84375 -0.96875q-1.46875 -0.5 -2.171875 -1.4375q-0.6875 -0.953125 -0.6875 -2.09375q0 -1.15625 0.578125 -2.03125q0.59375 -0.875 1.65625 -1.34375q1.078125 -0.484375 2.484375 -0.484375q1.359375 0 2.46875 0.484375q1.109375 0.484375 1.890625 1.359375q0.09375 0.09375 0.09375 0.1875q0 0.09375 -0.09375 0.171875l-0.859375 0.671875q-0.046875 0.0625 -0.109375 0.0625q-0.0625 0 -0.21875 -0.171875zm9.786789 11.453125q-1.828125 0 -3.171875 -0.8125q-1.328125 -0.828125 -2.03125 -2.40625q-0.703125 -1.59375 -0.703125 -3.828125q0 -2.265625 0.71875 -3.875q0.71875 -1.609375 2.046875 -2.453125q1.328125 -0.84375 3.15625 -0.84375q1.8125 0 3.140625 0.84375q1.34375 0.84375 2.046875 2.453125q0.71875 1.59375 0.71875 3.84375q0 2.25 -0.71875 3.84375q-0.703125 1.578125 -2.046875 2.40625q-1.328125 0.828125 -3.15625 0.828125zm0.03125 -1.359375q2.015625 0 3.015625 -1.390625q1.0 -1.40625 1.0 -4.296875q0 -2.953125 -1.015625 -4.375q-1.015625 -1.4375 -3.015625 -1.4375q-2.03125 0 -3.046875 1.4375q-1.015625 1.4375 -1.015625 4.375q0 2.890625 1.015625 4.296875q1.015625 1.390625 3.0625 1.390625zm19.206505 -12.671875q0.109375 0 0.15625 0.046875q0.046875 0.046875 0.046875 0.171875l0 13.40625q0 0.21875 -0.234375 0.21875l-0.921875 0q-0.15625 0 -0.234375 -0.03125q-0.078125 -0.03125 -0.15625 -0.125l-7.2031326 -10.453125q-0.078125 -0.140625 -0.140625 -0.109375q-0.0625 0.015625 -0.0625 0.125l0 10.34375q0 0.25 -0.265625 0.25l-1.046875 0q-0.234375 0 -0.234375 -0.25l0 -13.328125q0 -0.15625 0.046875 -0.203125q0.046875 -0.0625 0.1875 -0.0625l1.0625 0q0.15625 0 0.234375 0.046875q0.078125 0.03125 0.15625 0.140625l7.0000076 10.234375q0.09375 0.125 0.171875 0.125q0.109375 0 0.109375 -0.171875l0 -10.15625q0 -0.21875 0.21875 -0.21875l1.109375 0z" fill-rule="nonzero"/><path fill="#000000" d="m83.49279 398.3698q0.015625 0.046875 0.015625 0.140625q0 0.21875 -0.21875 0.21875l-1.375 0q-0.203125 0 -0.296875 -0.21875l-2.40625 -5.875q-0.046875 -0.125 -0.140625 -0.171875q-0.09375 -0.0625 -0.296875 -0.0625l-3.15625 0q-0.234375 0 -0.234375 0.203125l0 5.828125q0 0.171875 -0.0625 0.234375q-0.0625 0.0625 -0.25 0.0625l-1.203125 0q-0.15625 0 -0.21875 -0.046875q-0.046875 -0.0625 -0.046875 -0.203125l0 -13.328125q0 -0.15625 0.046875 -0.203125q0.046875 -0.0625 0.171875 -0.0625l5.203125 0q2.21875 0 3.4375 0.921875q1.21875 0.90625 1.21875 2.65625q0 1.484375 -0.796875 2.390625q-0.796875 0.890625 -1.9375 1.234375q-0.078125 0.015625 -0.09375 0.078125q-0.015625 0.046875 0.015625 0.109375l2.625 6.09375zm-4.984375 -7.25q1.65625 0 2.46875 -0.59375q0.828125 -0.609375 0.828125 -1.890625q0 -1.21875 -0.734375 -1.828125q-0.71875 -0.609375 -2.140625 -0.609375l-3.28125 0q-0.265625 0 -0.265625 0.203125l0 4.46875q0 0.25 0.171875 0.25l2.953125 0zm18.125381 -2.203125q0 2.0 -1.328125 3.015625q-1.328125 1.015625 -3.59375 1.015625l-3.171875 0q-0.171875 0 -0.171875 0.171875l0 5.328125q0 0.28125 -0.265625 0.28125l-1.28125 0q-0.234375 0 -0.234375 -0.25l0 -13.328125q0 -0.15625 0.046875 -0.203125q0.046875 -0.0625 0.171875 -0.0625l4.703125 0q2.328125 0 3.71875 1.0q1.40625 1.0 1.40625 3.03125zm-1.828125 -0.0625q0 -1.375 -0.875 -1.984375q-0.875 -0.625 -2.515625 -0.625l-2.796875 0q-0.25 0 -0.25 0.234375l0 4.84375q0 0.15625 0.03125 0.21875q0.046875 0.046875 0.140625 0.046875l3.0 0q1.53125 0 2.390625 -0.671875q0.875 -0.6875 0.875 -2.0625zm9.888443 -4.15625q1.234375 0 2.34375 0.53125q1.109375 0.515625 1.828125 1.390625q0.734375 0.875 0.890625 1.90625l0.015625 0.125q0 0.078125 -0.046875 0.125q-0.046875 0.03125 -0.09375 0.03125l-1.40625 0.109375l-0.03125 0q-0.0625 0 -0.109375 -0.046875q-0.03125 -0.046875 -0.046875 -0.140625q-0.28125 -1.21875 -1.15625 -1.9375q-0.875 -0.734375 -2.125 -0.734375q-1.953125 0 -3.0 1.453125q-1.03125 1.4375 -1.03125 4.3125q0 2.828125 1.03125 4.25q1.046875 1.421875 3.09375 1.421875q1.328125 0 2.203125 -0.640625q0.890625 -0.640625 1.4375 -2.03125q0.03125 -0.125 0.21875 -0.0625l1.09375 0.25q0.140625 0.046875 0.09375 0.265625q-0.265625 0.9375 -0.96875 1.765625q-0.6875 0.828125 -1.75 1.359375q-1.0625 0.515625 -2.40625 0.515625q-1.84375 0 -3.171875 -0.859375q-1.328125 -0.859375 -2.03125 -2.453125q-0.703125 -1.609375 -0.703125 -3.8125q0 -2.203125 0.6875 -3.796875q0.703125 -1.59375 2.015625 -2.4375q1.328125 -0.859375 3.125 -0.859375z" fill-rule="nonzero"/><path fill="#eeeeee" d="m269.82117 299.7878l105.79529 0l0 73.95276l-105.79529 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m269.82117 299.7878l105.79529 0l0 73.95276l-105.79529 0z" fill-rule="evenodd"/><path fill="#000000" d="m296.95874 329.65295q1.234375 0 2.34375 0.53125q1.109375 0.515625 1.828125 1.390625q0.734375 0.875 0.890625 1.90625l0.015625 0.125q0 0.078125 -0.046875 0.125q-0.046875 0.03125 -0.09375 0.03125l-1.40625 0.109375l-0.03125 0q-0.0625 0 -0.109375 -0.046875q-0.03125 -0.046875 -0.046875 -0.140625q-0.28125 -1.21875 -1.15625 -1.9375q-0.875 -0.734375 -2.125 -0.734375q-1.953125 0 -3.0 1.453125q-1.03125 1.4375 -1.03125 4.3125q0 2.828125 1.03125 4.25q1.046875 1.421875 3.09375 1.421875q1.328125 0 2.203125 -0.640625q0.890625 -0.640625 1.4375 -2.03125q0.03125 -0.125 0.21875 -0.0625l1.09375 0.25q0.140625 0.046875 0.09375 0.265625q-0.265625 0.9375 -0.96875 1.765625q-0.6875 0.828125 -1.75 1.359375q-1.0625 0.515625 -2.40625 0.515625q-1.84375 0 -3.171875 -0.859375q-1.328125 -0.859375 -2.03125 -2.453125q-0.703125 -1.609375 -0.703125 -3.8125q0 -2.203125 0.6875 -3.796875q0.703125 -1.59375 2.015625 -2.4375q1.328125 -0.859375 3.125 -0.859375zm7.846222 14.03125q-0.25 0 -0.25 -0.25l0 -13.34375q0 -0.25 0.203125 -0.25l1.109375 0q0.203125 0 0.203125 0.21875l0 4.984375q0 0.203125 0.171875 0.0625q1.0625 -0.828125 1.796875 -1.15625q0.75 -0.34375 1.640625 -0.34375q1.4375 0 2.21875 0.765625q0.78125 0.765625 0.78125 2.078125l0 6.9375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.421875 0.34375q-0.640625 0.34375 -1.625 1.171875l0 7.046875q0 0.28125 -0.296875 0.28125l-1.015625 0zm13.988983 -1.046875q0.765625 0 1.5 -0.421875q0.734375 -0.421875 1.5 -1.203125l0 -6.953125q0 -0.265625 0.296875 -0.265625l1.03125 0q0.265625 0 0.265625 0.265625l-0.046875 9.375q0 0.25 -0.203125 0.25l-1.078125 0q-0.203125 0 -0.203125 -0.203125l0 -1.109375q0 -0.21875 -0.171875 -0.046875q-1.015625 0.859375 -1.796875 1.203125q-0.78125 0.34375 -1.59375 0.34375q-1.3125 0 -2.15625 -0.78125q-0.828125 -0.78125 -0.828125 -2.078125l0 -6.9375q0 -0.28125 0.265625 -0.28125l1.046875 0q0.25 0 0.25 0.265625l0 6.546875q0 0.9375 0.515625 1.484375q0.515625 0.546875 1.40625 0.546875zm7.7082214 1.046875q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm19.176514 -0.296875q0.03125 0.03125 0.03125 0.125q0 0.171875 -0.203125 0.171875l-1.3125 0q-0.109375 0 -0.1875 -0.046875q-0.0625 -0.046875 -0.140625 -0.171875l-2.8125 -4.84375q-0.046875 -0.09375 -0.109375 -0.09375q-0.046875 -0.015625 -0.125 0.0625l-1.96875 2.0q-0.140625 0.125 -0.140625 0.375l0 2.40625q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.953125 0q-0.171875 0 -0.234375 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0 -13.3125q0 -0.265625 0.203125 -0.265625l1.140625 0q0.21875 0 0.21875 0.25l0 8.65625q0 0.1875 0.0625 0.1875q0.0625 0 0.125 -0.125l4.609375 -4.78125q0.203125 -0.234375 0.390625 -0.234375l1.140625 0q0.234375 0 0.234375 0.140625q0 0.046875 -0.140625 0.21875l-2.9375 3.0q-0.078125 0.109375 -0.078125 0.171875q0 0.046875 0.046875 0.140625l3.515625 5.921875zm7.6700745 -7.40625q-0.390625 -0.578125 -1.078125 -0.921875q-0.6875 -0.34375 -1.578125 -0.34375q-1.03125 0 -1.6875 0.4375q-0.640625 0.4375 -0.640625 1.140625q0 0.4375 0.328125 0.78125q0.328125 0.34375 1.1875 0.609375l2.359375 0.703125q1.234375 0.328125 1.828125 1.0q0.59375 0.65625 0.59375 1.578125q0 0.859375 -0.515625 1.515625q-0.515625 0.65625 -1.4375 1.03125q-0.90625 0.359375 -2.0625 0.359375q-1.4375 0 -2.5625 -0.5625q-1.125 -0.578125 -1.59375 -1.484375q-0.046875 -0.09375 -0.046875 -0.15625q0 -0.09375 0.09375 -0.15625l0.71875 -0.40625q0.1875 -0.109375 0.28125 0.015625q1.015625 1.609375 3.125 1.609375q1.09375 -0.015625 1.8125 -0.453125q0.71875 -0.4375 0.71875 -1.15625q0 -0.515625 -0.4375 -0.859375q-0.421875 -0.359375 -1.390625 -0.640625l-1.921875 -0.546875q-1.359375 -0.359375 -1.953125 -0.984375q-0.578125 -0.640625 -0.578125 -1.546875q0 -0.859375 0.46875 -1.53125q0.484375 -0.671875 1.34375 -1.03125q0.875 -0.375 1.984375 -0.375q1.234375 0 2.203125 0.46875q0.984375 0.46875 1.515625 1.265625q0.125 0.1875 -0.015625 0.265625l-0.78125 0.421875q-0.078125 0.046875 -0.125 0.046875q-0.0625 0 -0.15625 -0.09375z" fill-rule="nonzero"/><path fill="#eeeeee" d="m384.00525 296.7865l98.078735 0l0 166.55118l-98.078735 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m384.00525 296.7865l98.078735 0l0 166.55118l-98.078735 0z" fill-rule="evenodd"/><path fill="#000000" d="m407.33914 362.40396q0 -0.15625 0.046875 -0.203125q0.046875 -0.0625 0.171875 -0.0625l8.375 0q0.1875 0 0.1875 0.203125l0 0.953125q0 0.21875 -0.234375 0.21875l-6.515625 0q-0.15625 0 -0.203125 0.046875q-0.046875 0.046875 -0.046875 0.1875l0 4.359375q0 0.203125 0.21875 0.203125l4.828125 0q0.203125 0 0.203125 0.203125l0 1.0q0 0.15625 -0.203125 0.15625l-4.828125 0q-0.21875 0 -0.21875 0.21875l0 4.53125q0 0.109375 0.03125 0.15625q0.046875 0.03125 0.15625 0.03125l6.859375 0q0.109375 0 0.15625 0.03125q0.046875 0.03125 0.046875 0.15625l0 0.984375q0 0.203125 -0.203125 0.203125l-8.5625 0q-0.15625 0 -0.21875 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0 -13.3125zm12.6223755 3.6875q0.265625 0 0.265625 0.28125l0 0.78125q0 0.171875 0.09375 0.171875q0.0625 0 0.15625 -0.09375q0.390625 -0.390625 0.6875 -0.625q0.296875 -0.25 0.875 -0.46875q0.578125 -0.234375 1.359375 -0.234375q1.171875 0 2.09375 0.5625q0.921875 0.5625 1.453125 1.6875q0.546875 1.109375 0.546875 2.734375q0 1.640625 -0.546875 2.84375q-0.53125 1.1875 -1.5 1.8125q-0.96875 0.625 -2.25 0.625q-1.546875 0 -2.65625 -0.9375q-0.125 -0.125 -0.203125 -0.125q-0.09375 0 -0.09375 0.234375l0 3.46875q0 0.25 -0.203125 0.25l-1.15625 0q-0.203125 0 -0.203125 -0.25l0 -12.421875q0 -0.140625 0.0625 -0.21875q0.0625 -0.078125 0.234375 -0.078125l0.984375 0zm0.28125 7.703125q0.59375 0.625 1.203125 0.9375q0.609375 0.296875 1.34375 0.296875q1.390625 0 2.234375 -1.0625q0.859375 -1.0625 0.859375 -3.0625q0 -1.9375 -0.84375 -2.890625q-0.84375 -0.96875 -2.15625 -0.96875q-0.75 0 -1.359375 0.328125q-0.59375 0.328125 -0.9375 0.828125q-0.34375 0.5 -0.34375 0.984375l0 4.609375zm13.715912 2.375q-1.40625 0 -2.484375 -0.640625q-1.0625 -0.640625 -1.65625 -1.796875q-0.578125 -1.171875 -0.578125 -2.640625q0 -1.515625 0.609375 -2.6875q0.609375 -1.171875 1.671875 -1.828125q1.078125 -0.671875 2.453125 -0.671875q1.390625 0 2.453125 0.671875q1.078125 0.65625 1.65625 1.828125q0.59375 1.171875 0.59375 2.671875q0 1.46875 -0.59375 2.625q-0.59375 1.15625 -1.671875 1.8125q-1.078125 0.65625 -2.453125 0.65625zm0.03125 -1.171875q1.46875 0 2.265625 -1.046875q0.8125 -1.0625 0.8125 -2.90625q0 -1.828125 -0.828125 -2.90625q-0.828125 -1.078125 -2.265625 -1.078125q-1.453125 0 -2.296875 1.078125q-0.828125 1.078125 -0.828125 2.90625q0 1.828125 0.828125 2.890625q0.84375 1.0625 2.3125 1.0625zm11.11261 -9.09375q1.359375 0 2.3125 0.640625q0.96875 0.625 1.546875 1.671875l0.03125 0.15625q0 0.109375 -0.125 0.125l-1.03125 0.25l-0.046875 0.015625q-0.09375 0 -0.1875 -0.15625q-0.609375 -0.796875 -1.15625 -1.171875q-0.546875 -0.375 -1.25 -0.375q-1.46875 0 -2.328125 1.078125q-0.84375 1.078125 -0.84375 2.90625q0 1.84375 0.859375 2.90625q0.875 1.0625 2.34375 1.0625q0.875 0 1.53125 -0.421875q0.671875 -0.4375 1.203125 -1.328125q0.0625 -0.09375 0.109375 -0.09375q0.0625 -0.015625 0.140625 0.015625l0.796875 0.296875q0.140625 0.0625 0.078125 0.25q-0.578125 1.078125 -1.59375 1.765625q-1.0 0.671875 -2.390625 0.671875q-1.375 0 -2.4375 -0.640625q-1.0625 -0.640625 -1.65625 -1.796875q-0.59375 -1.171875 -0.59375 -2.65625q0 -1.5 0.59375 -2.671875q0.59375 -1.1875 1.671875 -1.84375q1.078125 -0.65625 2.421875 -0.65625zm6.2679443 10.078125q-0.25 0 -0.25 -0.25l0 -13.34375q0 -0.25 0.203125 -0.25l1.109375 0q0.203125 0 0.203125 0.21875l0 4.984375q0 0.203125 0.171875 0.0625q1.0625 -0.828125 1.796875 -1.15625q0.75 -0.34375 1.640625 -0.34375q1.4375 0 2.21875 0.765625q0.78125 0.765625 0.78125 2.078125l0 6.9375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.421875 0.34375q-0.640625 0.34375 -1.625 1.171875l0 7.046875q0 0.28125 -0.296875 0.28125l-1.015625 0z" fill-rule="nonzero"/><path fill="#000000" d="m396.46704 397.9821q-0.265625 0 -0.265625 -0.28125l0 -13.296875q0 -0.15625 0.046875 -0.203125q0.046875 -0.0625 0.171875 -0.0625l1.796875 0q0.140625 0 0.203125 0.046875q0.078125 0.046875 0.109375 0.15625l4.140625 10.6875q0.0625 0.171875 0.125 0.171875q0.09375 0 0.171875 -0.1875l4.140625 -10.625q0.0625 -0.25 0.28125 -0.25l1.890625 0q0.203125 0 0.203125 0.25l0 13.3125q0 0.28125 -0.28125 0.28125l-1.234375 0q-0.28125 0 -0.28125 -0.25l0 -10.65625q0 -0.09375 -0.03125 -0.078125q-0.015625 0 -0.0625 0.078125l-4.09375 10.65625q-0.109375 0.25 -0.359375 0.25l-0.890625 0q-0.28125 0 -0.375 -0.21875l-4.046875 -10.578125q-0.015625 -0.09375 -0.0625 -0.09375q-0.03125 0 -0.03125 0.09375l0 10.546875q0 0.140625 -0.0625 0.203125q-0.046875 0.046875 -0.203125 0.046875l-1.0 0zm22.011932 -1.1875q-1.4375 1.375 -3.328125 1.375q-1.453125 0 -2.28125 -0.734375q-0.828125 -0.734375 -0.828125 -1.96875q0 -1.5 1.25 -2.359375q1.265625 -0.859375 3.65625 -1.0l1.453125 -0.109375q0.3125 -0.046875 0.3125 -0.28125l0 -0.5q0 -1.015625 -0.625 -1.59375q-0.625 -0.59375 -1.6875 -0.59375q-1.640625 0 -2.6875 1.484375q-0.046875 0.09375 -0.109375 0.125q-0.0625 0.03125 -0.140625 0l-1.015625 -0.34375q-0.09375 -0.03125 -0.09375 -0.125q0 -0.0625 0.0625 -0.171875q0.546875 -0.984375 1.578125 -1.53125q1.046875 -0.5625 2.46875 -0.5625q1.828125 0 2.796875 0.859375q0.96875 0.84375 0.96875 2.328125l0 6.609375q0 0.171875 -0.0625 0.234375q-0.046875 0.046875 -0.203125 0.046875l-0.921875 0q-0.234375 0 -0.265625 -0.296875l-0.046875 -0.859375q-0.015625 -0.125 -0.09375 -0.125q-0.0625 0 -0.15625 0.09375zm0.234375 -3.546875q0 -0.296875 -0.28125 -0.296875l-1.203125 0.109375q-1.734375 0.109375 -2.6875 0.671875q-0.9375 0.5625 -0.9375 1.546875q0 0.796875 0.5625 1.265625q0.578125 0.46875 1.53125 0.46875q0.578125 0 1.125 -0.203125q0.5625 -0.203125 1.0 -0.5625q0.421875 -0.34375 0.65625 -0.71875q0.234375 -0.375 0.234375 -0.734375l0 -1.546875zm4.504883 4.734375q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm16.379639 -1.1875q-1.4375 1.375 -3.328125 1.375q-1.453125 0 -2.28125 -0.734375q-0.828125 -0.734375 -0.828125 -1.96875q0 -1.5 1.25 -2.359375q1.265625 -0.859375 3.65625 -1.0l1.453125 -0.109375q0.3125 -0.046875 0.3125 -0.28125l0 -0.5q0 -1.015625 -0.625 -1.59375q-0.625 -0.59375 -1.6875 -0.59375q-1.640625 0 -2.6875 1.484375q-0.046875 0.09375 -0.109375 0.125q-0.0625 0.03125 -0.140625 0l-1.015625 -0.34375q-0.09375 -0.03125 -0.09375 -0.125q0 -0.0625 0.0625 -0.171875q0.546875 -0.984375 1.578125 -1.53125q1.046875 -0.5625 2.46875 -0.5625q1.828125 0 2.796875 0.859375q0.96875 0.84375 0.96875 2.328125l0 6.609375q0 0.171875 -0.0625 0.234375q-0.046875 0.046875 -0.203125 0.046875l-0.921875 0q-0.234375 0 -0.265625 -0.296875l-0.046875 -0.859375q-0.015625 -0.125 -0.09375 -0.125q-0.0625 0 -0.15625 0.09375zm0.234375 -3.546875q0 -0.296875 -0.28125 -0.296875l-1.203125 0.109375q-1.734375 0.109375 -2.6875 0.671875q-0.9375 0.5625 -0.9375 1.546875q0 0.796875 0.5625 1.265625q0.578125 0.46875 1.53125 0.46875q0.578125 0 1.125 -0.203125q0.5625 -0.203125 1.0 -0.5625q0.421875 -0.34375 0.65625 -0.71875q0.234375 -0.375 0.234375 -0.734375l0 -1.546875zm13.176758 -5.328125q0.359375 0 0.359375 0.3125l0 0.640625q0 0.1875 -0.09375 0.28125q-0.078125 0.078125 -0.28125 0.0625q-0.625 0 -0.96875 0.171875q-0.453125 0.1875 -0.375 0.421875q0.015625 0.078125 0.109375 0.28125q0.09375 0.203125 0.140625 0.453125q0.0625 0.25 0.0625 0.53125q0 1.328125 -1.046875 2.171875q-1.03125 0.828125 -3.0 0.828125q-1.328125 0 -1.90625 0.234375q-0.578125 0.21875 -0.578125 0.578125q0 0.28125 0.390625 0.421875q0.390625 0.140625 1.3125 0.1875l2.40625 0.140625q1.59375 0.09375 2.375 0.765625q0.796875 0.65625 0.796875 1.828125q0 1.40625 -1.25 2.203125q-1.234375 0.8125 -3.53125 0.8125q-2.375 0 -3.609375 -0.6875q-1.234375 -0.671875 -1.234375 -1.9375q0 -1.25 1.75 -2.109375q0.203125 -0.09375 0 -0.203125q-0.859375 -0.375 -0.859375 -1.109375q0 -0.40625 0.375 -0.78125q0.390625 -0.375 1.09375 -0.609375q0.09375 -0.03125 0.09375 -0.09375q0 -0.09375 -0.09375 -0.140625q-0.8125 -0.421875 -1.203125 -1.03125q-0.390625 -0.609375 -0.390625 -1.46875q0 -1.453125 1.09375 -2.28125q1.109375 -0.84375 3.109375 -0.84375q1.78125 0 2.8125 0.828125q0.125 0.09375 0.171875 0.09375q0.078125 0 0.21875 -0.09375q0.34375 -0.34375 0.8125 -0.59375q0.484375 -0.265625 0.9375 -0.265625zm-5.09375 5.171875q1.28125 0 1.921875 -0.515625q0.65625 -0.53125 0.65625 -1.515625q0 -1.0 -0.65625 -1.5625q-0.65625 -0.5625 -1.921875 -0.5625q-1.234375 0 -1.921875 0.578125q-0.6875 0.5625 -0.6875 1.546875q0 0.96875 0.671875 1.5q0.6875 0.53125 1.9375 0.53125zm-1.640625 3.671875q-0.34375 -0.015625 -0.78125 0.203125q-0.421875 0.21875 -0.71875 0.609375q-0.296875 0.390625 -0.296875 0.859375q0 0.890625 0.90625 1.359375q0.921875 0.484375 2.71875 0.484375q3.15625 0 3.15625 -1.875q0 -0.640625 -0.4375 -1.015625q-0.4375 -0.375 -1.4375 -0.4375l-3.109375 -0.1875zm9.925476 -3.109375q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0zm4.354889 5.640625q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.078125 0q0.203125 0 0.203125 0.203125l0 1.21875q0 0.109375 0.0625 0.125q0.078125 0.015625 0.15625 -0.0625q1.40625 -1.671875 2.890625 -1.671875q0.640625 0 0.640625 0.25l0 1.109375q0 0.1875 -0.15625 0.15625q-0.34375 -0.0625 -0.84375 -0.0625q-0.546875 0 -1.1875 0.328125q-0.625 0.3125 -1.0625 0.8125q-0.421875 0.5 -0.421875 1.03125l0 6.171875q0 0.28125 -0.28125 0.28125l-1.015625 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m696.76117 271.31055l166.36218 0l0 49.82675l-166.36218 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m696.76117 271.31055l166.36218 0l0 49.82675l-166.36218 0z" fill-rule="evenodd"/><path fill="#000000" d="m761.7326 289.30017q0.171875 0 0.234375 0.09375q0.0625 0.09375 0.03125 0.25l-3.84375 13.21875q-0.046875 0.15625 -0.140625 0.21875q-0.078125 0.0625 -0.265625 0.0625l-1.140625 0q-0.359375 0 -0.4375 -0.265625l-2.984375 -10.578125q-0.046875 -0.203125 -0.125 0.015625l-3.03125 10.546875q-0.03125 0.15625 -0.125 0.21875q-0.09375 0.0625 -0.28125 0.0625l-1.15625 0q-0.359375 0 -0.421875 -0.265625l-3.796875 -13.234375q-0.015625 -0.046875 -0.015625 -0.09375q0 -0.25 0.28125 -0.25l1.1875 0q0.265625 0 0.328125 0.21875l3.03125 10.859375q0.0625 0.203125 0.125 0.203125q0.0625 0 0.109375 -0.1875l3.09375 -10.890625q0.078125 -0.203125 0.328125 -0.203125l1.0625 0q0.15625 0 0.234375 0.046875q0.078125 0.046875 0.109375 0.171875l3.0625 10.921875q0.046875 0.171875 0.109375 0.171875q0.0625 0 0.109375 -0.171875l3.078125 -10.9375q0.03125 -0.203125 0.3125 -0.203125l0.9375 0zm7.3189697 12.65625q-1.4375 1.375 -3.328125 1.375q-1.453125 0 -2.28125 -0.734375q-0.828125 -0.734375 -0.828125 -1.96875q0 -1.5 1.25 -2.359375q1.265625 -0.859375 3.65625 -1.0l1.453125 -0.109375q0.3125 -0.046875 0.3125 -0.28125l0 -0.5q0 -1.015625 -0.625 -1.59375q-0.625 -0.59375 -1.6875 -0.59375q-1.640625 0 -2.6875 1.484375q-0.046875 0.09375 -0.109375 0.125q-0.0625 0.03125 -0.140625 0l-1.015625 -0.34375q-0.09375 -0.03125 -0.09375 -0.125q0 -0.0625 0.0625 -0.171875q0.546875 -0.984375 1.578125 -1.53125q1.046875 -0.5625 2.46875 -0.5625q1.828125 0 2.796875 0.859375q0.96875 0.84375 0.96875 2.328125l0 6.609375q0 0.171875 -0.0625 0.234375q-0.046875 0.046875 -0.203125 0.046875l-0.921875 0q-0.234375 0 -0.265625 -0.296875l-0.046875 -0.859375q-0.015625 -0.125 -0.09375 -0.125q-0.0625 0 -0.15625 0.09375zm0.234375 -3.546875q0 -0.296875 -0.28125 -0.296875l-1.203125 0.109375q-1.734375 0.109375 -2.6875 0.671875q-0.9375 0.5625 -0.9375 1.546875q0 0.796875 0.5625 1.265625q0.578125 0.46875 1.53125 0.46875q0.578125 0 1.125 -0.203125q0.5625 -0.203125 1.0 -0.5625q0.421875 -0.34375 0.65625 -0.71875q0.234375 -0.375 0.234375 -0.734375l0 -1.546875zm10.176758 -2.96875q-0.390625 -0.578125 -1.078125 -0.921875q-0.6875 -0.34375 -1.578125 -0.34375q-1.03125 0 -1.6875 0.4375q-0.640625 0.4375 -0.640625 1.140625q0 0.4375 0.328125 0.78125q0.328125 0.34375 1.1875 0.609375l2.359375 0.703125q1.234375 0.328125 1.828125 1.0q0.59375 0.65625 0.59375 1.578125q0 0.859375 -0.515625 1.515625q-0.515625 0.65625 -1.4375 1.03125q-0.90625 0.359375 -2.0625 0.359375q-1.4375 0 -2.5625 -0.5625q-1.125 -0.578125 -1.59375 -1.484375q-0.046875 -0.09375 -0.046875 -0.15625q0 -0.09375 0.09375 -0.15625l0.71875 -0.40625q0.1875 -0.109375 0.28125 0.015625q1.015625 1.609375 3.125 1.609375q1.09375 -0.015625 1.8125 -0.453125q0.71875 -0.4375 0.71875 -1.15625q0 -0.515625 -0.4375 -0.859375q-0.421875 -0.359375 -1.390625 -0.640625l-1.921875 -0.546875q-1.359375 -0.359375 -1.953125 -0.984375q-0.578125 -0.640625 -0.578125 -1.546875q0 -0.859375 0.46875 -1.53125q0.484375 -0.671875 1.34375 -1.03125q0.875 -0.375 1.984375 -0.375q1.234375 0 2.203125 0.46875q0.984375 0.46875 1.515625 1.265625q0.125 0.1875 -0.015625 0.265625l-0.78125 0.421875q-0.078125 0.046875 -0.125 0.046875q-0.0625 0 -0.15625 -0.09375zm3.880127 7.703125q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.1875 0 0.1875 0.203125l0 1.09375q0 0.21875 0.1875 0.046875q1.0 -0.8125 1.703125 -1.171875q0.71875 -0.359375 1.59375 -0.359375q1.046875 0 1.71875 0.46875q0.6875 0.46875 0.921875 1.171875q0.046875 0.0625 0.078125 0.0625q0.0625 0 0.1875 -0.09375q0.96875 -0.828125 1.734375 -1.21875q0.78125 -0.390625 1.640625 -0.390625q1.34375 0 2.09375 0.765625q0.765625 0.765625 0.765625 2.078125l0 6.9375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.234375 0 -0.234375 -0.25l0 -6.65625q0 -0.921875 -0.453125 -1.421875q-0.453125 -0.515625 -1.34375 -0.515625q-0.75 0 -1.40625 0.375q-0.640625 0.359375 -1.265625 0.890625q-0.140625 0.15625 -0.203125 0.265625q-0.046875 0.109375 -0.046875 0.28125l0 6.734375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -1.9375 -1.78125 -1.9375q-0.75 0 -1.375 0.34375q-0.625 0.34375 -1.5625 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm17.683838 -4.328125q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0zm4.3548584 5.640625q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.078125 0q0.203125 0 0.203125 0.203125l0 1.21875q0 0.109375 0.0625 0.125q0.078125 0.015625 0.15625 -0.0625q1.40625 -1.671875 2.890625 -1.671875q0.640625 0 0.640625 0.25l0 1.109375q0 0.1875 -0.15625 0.15625q-0.34375 -0.0625 -0.84375 -0.0625q-0.546875 0 -1.1875 0.328125q-0.625 0.3125 -1.0625 0.8125q-0.421875 0.5 -0.421875 1.03125l0 6.171875q0 0.28125 -0.28125 0.28125l-1.015625 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m510.81235 372.593l166.36221 0l0 49.826782l-166.36221 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m510.81235 372.593l166.36221 0l0 49.826782l-166.36221 0z" fill-rule="evenodd"/><path fill="#000000" d="m535.27856 404.42636q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm11.676514 -4.328125q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0zm9.839294 4.453125q-1.4375 1.375 -3.328125 1.375q-1.453125 0 -2.28125 -0.734375q-0.828125 -0.734375 -0.828125 -1.96875q0 -1.5 1.25 -2.359375q1.265625 -0.859375 3.65625 -1.0l1.453125 -0.109375q0.3125 -0.046875 0.3125 -0.28125l0 -0.5q0 -1.015625 -0.625 -1.59375q-0.625 -0.59375 -1.6875 -0.59375q-1.640625 0 -2.6875 1.484375q-0.046875 0.09375 -0.109375 0.125q-0.0625 0.03125 -0.140625 0l-1.015625 -0.34375q-0.09375 -0.03125 -0.09375 -0.125q0 -0.0625 0.0625 -0.171875q0.546875 -0.984375 1.578125 -1.53125q1.046875 -0.5625 2.46875 -0.5625q1.828125 0 2.796875 0.859375q0.96875 0.84375 0.96875 2.328125l0 6.609375q0 0.171875 -0.0625 0.234375q-0.046875 0.046875 -0.203125 0.046875l-0.921875 0q-0.234375 0 -0.265625 -0.296875l-0.046875 -0.859375q-0.015625 -0.125 -0.09375 -0.125q-0.0625 0 -0.15625 0.09375zm0.234375 -3.546875q0 -0.296875 -0.28125 -0.296875l-1.203125 0.109375q-1.734375 0.109375 -2.6875 0.671875q-0.9375 0.5625 -0.9375 1.546875q0 0.796875 0.5625 1.265625q0.578125 0.46875 1.53125 0.46875q0.578125 0 1.125 -0.203125q0.5625 -0.203125 1.0 -0.5625q0.421875 -0.34375 0.65625 -0.71875q0.234375 -0.375 0.234375 -0.734375l0 -1.546875zm4.504883 4.734375q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.078125 0q0.203125 0 0.203125 0.203125l0 1.21875q0 0.109375 0.0625 0.125q0.078125 0.015625 0.15625 -0.0625q1.40625 -1.671875 2.890625 -1.671875q0.640625 0 0.640625 0.25l0 1.109375q0 0.1875 -0.15625 0.15625q-0.34375 -0.0625 -0.84375 -0.0625q-0.546875 0 -1.1875 0.328125q-0.625 0.3125 -1.0625 0.8125q-0.421875 0.5 -0.421875 1.03125l0 6.171875q0 0.28125 -0.28125 0.28125l-1.015625 0zm10.368652 -4.578125q0 0.265625 -0.3125 0.265625l-4.234375 0q-0.140625 0 -0.203125 -0.046875q-0.046875 -0.046875 -0.046875 -0.171875l0 -0.828125q0 -0.203125 0.171875 -0.203125l4.4375 -0.015625q0.1875 0 0.1875 0.1875l0 0.8125zm10.639282 -5.3125q0.125 0 0.171875 0.09375q0.046875 0.078125 0 0.171875l-3.78125 9.34375q-0.09375 0.28125 -0.421875 0.28125l-0.671875 0q-0.359375 0 -0.46875 -0.265625l-3.765625 -9.34375q-0.03125 -0.03125 -0.03125 -0.09375q0 -0.1875 0.234375 -0.1875l1.15625 0q0.203125 0 0.296875 0.203125l2.921875 7.34375q0.0625 0.171875 0.140625 0.171875q0.0625 0 0.15625 -0.203125l2.921875 -7.3125q0.046875 -0.203125 0.28125 -0.203125l0.859375 0zm2.423706 9.890625q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.1875 0 0.1875 0.203125l0 1.09375q0 0.21875 0.1875 0.046875q1.0 -0.8125 1.703125 -1.171875q0.71875 -0.359375 1.59375 -0.359375q1.046875 0 1.71875 0.46875q0.6875 0.46875 0.921875 1.171875q0.046875 0.0625 0.078125 0.0625q0.0625 0 0.1875 -0.09375q0.96875 -0.828125 1.734375 -1.21875q0.78125 -0.390625 1.640625 -0.390625q1.34375 0 2.09375 0.765625q0.765625 0.765625 0.765625 2.078125l0 6.9375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.234375 0 -0.234375 -0.25l0 -6.65625q0 -0.921875 -0.453125 -1.421875q-0.453125 -0.515625 -1.34375 -0.515625q-0.75 0 -1.40625 0.375q-0.640625 0.359375 -1.265625 0.890625q-0.140625 0.15625 -0.203125 0.265625q-0.046875 0.109375 -0.046875 0.28125l0 6.734375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -1.9375 -1.78125 -1.9375q-0.75 0 -1.375 0.34375q-0.625 0.34375 -1.5625 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm21.152588 -4.578125q0 0.265625 -0.3125 0.265625l-4.234375 0q-0.140625 0 -0.203125 -0.046875q-0.046875 -0.046875 -0.046875 -0.171875l0 -0.828125q0 -0.203125 0.171875 -0.203125l4.4375 -0.015625q0.1875 0 0.1875 0.1875l0 0.8125zm4.170532 4.265625q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.96875 0q-0.171875 0 -0.234375 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0.015625 -13.3125q0 -0.265625 0.21875 -0.265625l1.125 0q0.21875 0 0.21875 0.25l0 13.28125zm7.0213623 0.5q-1.40625 0 -2.484375 -0.640625q-1.0625 -0.640625 -1.65625 -1.796875q-0.578125 -1.171875 -0.578125 -2.640625q0 -1.515625 0.609375 -2.6875q0.609375 -1.171875 1.671875 -1.828125q1.078125 -0.671875 2.453125 -0.671875q1.390625 0 2.453125 0.671875q1.078125 0.65625 1.65625 1.828125q0.59375 1.171875 0.59375 2.671875q0 1.46875 -0.59375 2.625q-0.59375 1.15625 -1.671875 1.8125q-1.078125 0.65625 -2.453125 0.65625zm0.03125 -1.171875q1.46875 0 2.265625 -1.046875q0.8125 -1.0625 0.8125 -2.90625q0 -1.828125 -0.828125 -2.90625q-0.828125 -1.078125 -2.265625 -1.078125q-1.453125 0 -2.296875 1.078125q-0.828125 1.078125 -0.828125 2.90625q0 1.828125 0.828125 2.890625q0.84375 1.0625 2.3125 1.0625zm15.940674 -9.078125q0.359375 0 0.359375 0.3125l0 0.640625q0 0.1875 -0.09375 0.28125q-0.078125 0.078125 -0.28125 0.0625q-0.625 0 -0.96875 0.171875q-0.453125 0.1875 -0.375 0.421875q0.015625 0.078125 0.109375 0.28125q0.09375 0.203125 0.140625 0.453125q0.0625 0.25 0.0625 0.53125q0 1.328125 -1.046875 2.171875q-1.03125 0.828125 -3.0 0.828125q-1.328125 0 -1.90625 0.234375q-0.578125 0.21875 -0.578125 0.578125q0 0.28125 0.390625 0.421875q0.390625 0.140625 1.3125 0.1875l2.40625 0.140625q1.59375 0.09375 2.375 0.765625q0.796875 0.65625 0.796875 1.828125q0 1.40625 -1.25 2.203125q-1.234375 0.8125 -3.53125 0.8125q-2.375 0 -3.609375 -0.6875q-1.234375 -0.671875 -1.234375 -1.9375q0 -1.25 1.75 -2.109375q0.203125 -0.09375 0 -0.203125q-0.859375 -0.375 -0.859375 -1.109375q0 -0.40625 0.375 -0.78125q0.390625 -0.375 1.09375 -0.609375q0.09375 -0.03125 0.09375 -0.09375q0 -0.09375 -0.09375 -0.140625q-0.8125 -0.421875 -1.203125 -1.03125q-0.390625 -0.609375 -0.390625 -1.46875q0 -1.453125 1.09375 -2.28125q1.109375 -0.84375 3.109375 -0.84375q1.78125 0 2.8125 0.828125q0.125 0.09375 0.171875 0.09375q0.078125 0 0.21875 -0.09375q0.34375 -0.34375 0.8125 -0.59375q0.484375 -0.265625 0.9375 -0.265625zm-5.09375 5.171875q1.28125 0 1.921875 -0.515625q0.65625 -0.53125 0.65625 -1.515625q0 -1.0 -0.65625 -1.5625q-0.65625 -0.5625 -1.921875 -0.5625q-1.234375 0 -1.921875 0.578125q-0.6875 0.5625 -0.6875 1.546875q0 0.96875 0.671875 1.5q0.6875 0.53125 1.9375 0.53125zm-1.640625 3.671875q-0.34375 -0.015625 -0.78125 0.203125q-0.421875 0.21875 -0.71875 0.609375q-0.296875 0.390625 -0.296875 0.859375q0 0.890625 0.90625 1.359375q0.921875 0.484375 2.71875 0.484375q3.15625 0 3.15625 -1.875q0 -0.640625 -0.4375 -1.015625q-0.4375 -0.375 -1.4375 -0.4375l-3.109375 -0.1875zm10.668579 -10.796875q0 0.1875 -0.078125 0.28125q-0.078125 0.078125 -0.25 0.078125l-1.09375 0q-0.28125 0 -0.28125 -0.328125l0 -1.5625q0 -0.296875 0.265625 -0.296875l1.171875 0q0.109375 0 0.1875 0.078125q0.078125 0.078125 0.078125 0.203125l0 1.546875zm-0.078125 11.703125q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.953125 0q-0.171875 0 -0.234375 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0 -9.359375q0 -0.265625 0.21875 -0.265625l1.140625 0q0.203125 0 0.203125 0.25l0 9.328125zm7.0057373 -9.765625q1.359375 0 2.3125 0.640625q0.96875 0.625 1.546875 1.671875l0.03125 0.15625q0 0.109375 -0.125 0.125l-1.03125 0.25l-0.046875 0.015625q-0.09375 0 -0.1875 -0.15625q-0.609375 -0.796875 -1.15625 -1.171875q-0.546875 -0.375 -1.25 -0.375q-1.46875 0 -2.328125 1.078125q-0.84375 1.078125 -0.84375 2.90625q0 1.84375 0.859375 2.90625q0.875 1.0625 2.34375 1.0625q0.875 0 1.53125 -0.421875q0.671875 -0.4375 1.203125 -1.328125q0.0625 -0.09375 0.109375 -0.09375q0.0625 -0.015625 0.140625 0.015625l0.796875 0.296875q0.140625 0.0625 0.078125 0.25q-0.578125 1.078125 -1.59375 1.765625q-1.0 0.671875 -2.390625 0.671875q-1.375 0 -2.4375 -0.640625q-1.0625 -0.640625 -1.65625 -1.796875q-0.59375 -1.171875 -0.59375 -2.65625q0 -1.5 0.59375 -2.671875q0.59375 -1.1875 1.671875 -1.84375q1.078125 -0.65625 2.421875 -0.65625z" fill-rule="nonzero"/><path fill="#eeeeee" d="m672.79156 390.49078l22.76361 3.4613953l0 0c13.861816 2.107788 26.28125 -7.4882507 27.739563 -21.43335l3.6625366 -35.021973l4.956238 0.7536621l-5.3877563 -15.773682l-8.466614 13.667023l4.956238 0.7536316l-3.6624756 35.021973l0 0c-1.2293091 11.754944 -11.698242 19.843903 -23.382996 18.067139l-22.763672 -3.4613647z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m672.79156 390.49078l22.76361 3.4613953l0 0c13.861816 2.107788 26.28125 -7.4882507 27.739563 -21.43335l3.6625366 -35.021973l4.956238 0.7536621l-5.3877563 -15.773682l-8.466614 13.667023l4.956238 0.7536316l-3.6624756 35.021973l0 0c-1.2293091 11.754944 -11.698242 19.843903 -23.382996 18.067139l-22.763672 -3.4613647z" fill-rule="evenodd"/><path fill="#eeeeee" d="m772.44617 334.3938l7.4960938 -11.519501l7.4960327 11.519501l-4.6063232 0l0 38.30728l-5.779419 0l0 -38.30728z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m772.44617 334.3938l7.4960938 -11.519501l7.4960327 11.519501l-4.6063232 0l0 38.30728l-5.779419 0l0 -38.30728z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m775.1417 332.08875l52.97638 0l0 29.543304l-52.97638 0z" fill-rule="evenodd"/><path fill="#000000" d="m792.1886 345.6881q0.0625 0 0.09375 0.046875q0.03125 0.046875 0.015625 0.09375l-1.640625 5.359375q-0.03125 0.140625 -0.203125 0.140625l-0.5 0q-0.1875 0 -0.234375 -0.140625l-1.265625 -3.984375q-0.03125 -0.09375 -0.078125 -0.09375q-0.015625 0 -0.046875 0.09375l-1.203125 3.984375q-0.046875 0.140625 -0.203125 0.140625l-0.546875 0q-0.171875 0 -0.21875 -0.140625l-1.671875 -5.34375q-0.015625 -0.03125 -0.015625 -0.0625q0 -0.09375 0.125 -0.09375l0.640625 0q0.109375 0 0.15625 0.109375l1.28125 4.140625q0.03125 0.109375 0.0625 0.109375q0.03125 0 0.09375 -0.109375l1.25 -4.15625q0.03125 -0.09375 0.15625 -0.09375l0.5 0q0.125 0 0.15625 0.109375l1.3125 4.140625q0.03125 0.109375 0.078125 0.109375q0.046875 0 0.078125 -0.109375l1.21875 -4.140625q0.046875 -0.109375 0.1875 -0.109375l0.421875 0zm1.4043579 5.640625q-0.140625 0 -0.140625 -0.140625l0 -5.375q0 -0.125 0.109375 -0.125l0.625 0q0.109375 0 0.109375 0.109375l0 0.6875q0 0.0625 0.03125 0.078125q0.046875 0.015625 0.09375 -0.046875q0.796875 -0.9375 1.640625 -0.9375q0.375 0 0.375 0.140625l0 0.640625q0 0.09375 -0.09375 0.078125q-0.1875 -0.03125 -0.484375 -0.03125q-0.296875 0 -0.671875 0.1875q-0.359375 0.171875 -0.609375 0.46875q-0.234375 0.28125 -0.234375 0.578125l0 3.53125q0 0.15625 -0.15625 0.15625l-0.59375 0zm7.1900024 -0.6875q-0.828125 0.796875 -1.90625 0.796875q-0.828125 0 -1.3125 -0.421875q-0.46875 -0.421875 -0.46875 -1.125q0 -0.859375 0.71875 -1.34375q0.71875 -0.484375 2.09375 -0.578125l0.828125 -0.0625q0.171875 -0.015625 0.171875 -0.15625l0 -0.296875q0 -0.5625 -0.359375 -0.890625q-0.34375 -0.34375 -0.953125 -0.34375q-0.9375 0 -1.53125 0.84375q-0.03125 0.0625 -0.0625 0.078125q-0.03125 0.015625 -0.09375 -0.015625l-0.578125 -0.1875q-0.046875 -0.015625 -0.046875 -0.078125q0 -0.03125 0.03125 -0.09375q0.3125 -0.5625 0.90625 -0.875q0.59375 -0.3125 1.40625 -0.3125q1.046875 0 1.59375 0.484375q0.5625 0.484375 0.5625 1.328125l0 3.78125q0 0.09375 -0.03125 0.125q-0.03125 0.03125 -0.125 0.03125l-0.53125 0q-0.125 0 -0.15625 -0.171875l-0.015625 -0.484375q-0.015625 -0.078125 -0.046875 -0.078125q-0.046875 0 -0.09375 0.046875zm0.125 -2.015625q0 -0.171875 -0.15625 -0.171875l-0.6875 0.0625q-1.0 0.0625 -1.53125 0.390625q-0.53125 0.3125 -0.53125 0.875q0 0.453125 0.3125 0.734375q0.328125 0.265625 0.875 0.265625q0.328125 0 0.640625 -0.109375q0.328125 -0.125 0.578125 -0.328125q0.234375 -0.203125 0.359375 -0.421875q0.140625 -0.21875 0.140625 -0.421875l0 -0.875zm3.1678467 -2.9375q0.140625 0 0.140625 0.15625l0 0.4375q0 0.109375 0.0625 0.109375q0.03125 0 0.078125 -0.0625q0.21875 -0.21875 0.390625 -0.359375q0.171875 -0.140625 0.5 -0.265625q0.328125 -0.125 0.78125 -0.125q0.671875 0 1.203125 0.328125q0.53125 0.3125 0.828125 0.953125q0.296875 0.625 0.296875 1.5625q0 0.9375 -0.296875 1.625q-0.296875 0.671875 -0.859375 1.03125q-0.546875 0.359375 -1.28125 0.359375q-0.890625 0 -1.515625 -0.53125q-0.078125 -0.078125 -0.125 -0.078125q-0.046875 0 -0.046875 0.140625l0 1.984375q0 0.140625 -0.125 0.140625l-0.65625 0q-0.109375 0 -0.109375 -0.140625l0 -7.109375q0 -0.078125 0.03125 -0.109375q0.03125 -0.046875 0.125 -0.046875l0.578125 0zm0.15625 4.390625q0.34375 0.359375 0.6875 0.53125q0.34375 0.171875 0.765625 0.171875q0.796875 0 1.28125 -0.609375q0.484375 -0.609375 0.484375 -1.75q0 -1.09375 -0.484375 -1.640625q-0.484375 -0.5625 -1.234375 -0.5625q-0.421875 0 -0.765625 0.1875q-0.34375 0.1875 -0.546875 0.484375q-0.1875 0.28125 -0.1875 0.5625l0 2.625zm8.846191 -3.15625q-0.21875 -0.328125 -0.609375 -0.515625q-0.390625 -0.203125 -0.890625 -0.203125q-0.59375 0 -0.96875 0.25q-0.375 0.25 -0.375 0.65625q0 0.25 0.1875 0.453125q0.1875 0.1875 0.6875 0.328125l1.34375 0.40625q0.703125 0.203125 1.046875 0.578125q0.34375 0.375 0.34375 0.890625q0 0.5 -0.296875 0.875q-0.296875 0.375 -0.828125 0.59375q-0.515625 0.203125 -1.171875 0.203125q-0.828125 0 -1.46875 -0.328125q-0.640625 -0.328125 -0.90625 -0.84375q-0.03125 -0.0625 -0.03125 -0.09375q0 -0.046875 0.046875 -0.078125l0.421875 -0.234375q0.109375 -0.0625 0.15625 0.015625q0.578125 0.90625 1.78125 0.90625q0.625 0 1.03125 -0.25q0.421875 -0.265625 0.421875 -0.65625q0 -0.3125 -0.25 -0.5q-0.234375 -0.203125 -0.796875 -0.375l-1.09375 -0.296875q-0.78125 -0.203125 -1.125 -0.5625q-0.328125 -0.375 -0.328125 -0.890625q0 -0.5 0.265625 -0.875q0.28125 -0.390625 0.765625 -0.59375q0.5 -0.203125 1.140625 -0.203125q0.703125 0 1.265625 0.265625q0.5625 0.265625 0.859375 0.71875q0.078125 0.109375 -0.015625 0.15625l-0.4375 0.234375q-0.046875 0.03125 -0.0625 0.03125q-0.046875 0 -0.109375 -0.0625z" fill-rule="nonzero"/><path fill="#000000" fill-opacity="0.0" d="m676.6352 332.09033l52.97638 0l0 29.543304l-52.97638 0z" fill-rule="evenodd"/><path fill="#000000" d="m687.4008 344.47095q0 0.109375 -0.046875 0.15625q-0.046875 0.046875 -0.15625 0.046875l-0.609375 0q-0.171875 0 -0.171875 -0.1875l0 -0.890625q0 -0.171875 0.15625 -0.171875l0.671875 0q0.0625 0 0.109375 0.046875q0.046875 0.03125 0.046875 0.109375l0 0.890625zm-0.046875 6.671875q0 0.109375 -0.046875 0.15625q-0.046875 0.03125 -0.140625 0.03125l-0.546875 0q-0.09375 0 -0.125 -0.03125q-0.03125 -0.03125 -0.03125 -0.125l0 -5.34375q0 -0.140625 0.125 -0.140625l0.640625 0q0.125 0 0.125 0.125l0 5.328125zm1.796875 0.1875q-0.140625 0 -0.140625 -0.140625l0 -5.375q0 -0.125 0.109375 -0.125l0.640625 0q0.109375 0 0.109375 0.109375l0 0.625q0 0.109375 0.109375 0.03125q0.59375 -0.46875 1.015625 -0.671875q0.421875 -0.203125 0.9375 -0.203125q0.8125 0 1.265625 0.4375q0.453125 0.4375 0.453125 1.171875l0 3.96875q0 0.171875 -0.15625 0.171875l-0.609375 0q-0.125 0 -0.125 -0.140625l0 -3.796875q0 -0.53125 -0.28125 -0.8125q-0.265625 -0.296875 -0.828125 -0.296875q-0.453125 0 -0.828125 0.203125q-0.375 0.1875 -0.921875 0.65625l0 4.03125q0 0.078125 -0.046875 0.125q-0.03125 0.03125 -0.109375 0.03125l-0.59375 0zm7.0201416 -6.859375q0 0.203125 -0.1875 0.203125l-0.625 0q-0.171875 0 -0.171875 -0.1875l0 -0.890625q0 -0.078125 0.046875 -0.125q0.046875 -0.046875 0.109375 -0.046875l0.6875 0q0.0625 0 0.09375 0.046875q0.046875 0.03125 0.046875 0.109375l0 0.890625zm-0.046875 7.171875q0 0.78125 -0.328125 1.140625q-0.328125 0.359375 -1.15625 0.359375q-0.453125 0 -0.578125 -0.03125q-0.125 -0.015625 -0.125 -0.109375l0 -0.46875q0 -0.109375 0.109375 -0.109375l0.546875 -0.03125q0.328125 -0.03125 0.484375 -0.203125q0.15625 -0.171875 0.15625 -0.609375l0 -5.75q0 -0.140625 0.125 -0.140625l0.65625 0q0.109375 0 0.109375 0.125l0 5.828125zm2.25 -2.78125q0 0.515625 0.25 0.953125q0.25 0.421875 0.671875 0.6875q0.421875 0.25 0.9375 0.25q1.0625 0 1.65625 -0.875q0.046875 -0.046875 0.078125 -0.046875q0.03125 -0.015625 0.078125 0.015625l0.453125 0.21875q0.078125 0.046875 0.015625 0.140625q-0.421875 0.640625 -1.0 0.9375q-0.5625 0.296875 -1.359375 0.296875q-0.78125 0 -1.40625 -0.359375q-0.609375 -0.375 -0.96875 -1.015625q-0.34375 -0.65625 -0.34375 -1.5q0 -0.90625 0.34375 -1.578125q0.359375 -0.6875 0.96875 -1.046875q0.625 -0.359375 1.390625 -0.359375q0.765625 0 1.34375 0.34375q0.578125 0.328125 0.890625 0.984375q0.328125 0.65625 0.328125 1.5625l0 0.03125q0 0.09375 -0.03125 0.15625q-0.03125 0.046875 -0.125 0.046875l-4.078125 0q-0.09375 0 -0.09375 0.15625zm3.25 -0.75q0.125 0 0.15625 -0.015625q0.03125 -0.03125 0.03125 -0.140625q0 -0.46875 -0.203125 -0.859375q-0.1875 -0.40625 -0.578125 -0.640625q-0.375 -0.234375 -0.875 -0.234375q-0.53125 0 -0.9375 0.265625q-0.40625 0.265625 -0.625 0.703125q-0.21875 0.4375 -0.203125 0.921875l3.234375 0zm4.691345 -2.53125q0.765625 0 1.3125 0.359375q0.5625 0.359375 0.890625 0.953125l0.015625 0.09375q0 0.0625 -0.078125 0.078125l-0.578125 0.125l-0.03125 0.015625q-0.0625 0 -0.109375 -0.078125q-0.34375 -0.46875 -0.65625 -0.671875q-0.3125 -0.21875 -0.71875 -0.21875q-0.828125 0 -1.328125 0.609375q-0.484375 0.609375 -0.484375 1.65625q0 1.0625 0.484375 1.671875q0.5 0.609375 1.34375 0.609375q0.5 0 0.875 -0.25q0.390625 -0.25 0.703125 -0.765625q0.03125 -0.046875 0.0625 -0.046875q0.03125 -0.015625 0.0625 0.015625l0.46875 0.171875q0.078125 0.03125 0.046875 0.125q-0.34375 0.625 -0.921875 1.015625q-0.5625 0.390625 -1.359375 0.390625q-0.78125 0 -1.390625 -0.359375q-0.609375 -0.375 -0.953125 -1.03125q-0.34375 -0.671875 -0.34375 -1.515625q0 -0.859375 0.34375 -1.53125q0.34375 -0.6875 0.953125 -1.046875q0.609375 -0.375 1.390625 -0.375zm4.916382 0.765625q-0.078125 0 -0.078125 0.09375l0 3.375q0 0.484375 0.15625 0.671875q0.15625 0.171875 0.515625 0.171875l0.734375 0q0.125 0 0.125 0.125l-0.015625 0.359375q0 0.109375 -0.125 0.140625q-0.28125 0.046875 -1.0 0.046875q-0.671875 0 -0.984375 -0.3125q-0.3125 -0.3125 -0.3125 -1.0l0 -3.5625q0 -0.109375 -0.109375 -0.109375l-0.84375 0q-0.125 0 -0.125 -0.109375l0 -0.453125q0 -0.09375 0.109375 -0.09375l0.90625 0q0.078125 0 0.078125 -0.09375l0.109375 -1.6875q0 -0.140625 0.125 -0.140625l0.53125 0q0.125 0 0.125 0.140625l0 1.6875q0 0.09375 0.09375 0.09375l1.34375 0q0.109375 0 0.109375 0.09375l0 0.453125q0 0.109375 -0.109375 0.109375l-1.359375 0zm6.0146484 0.578125q-0.21875 -0.328125 -0.609375 -0.515625q-0.390625 -0.203125 -0.890625 -0.203125q-0.59375 0 -0.96875 0.25q-0.375 0.25 -0.375 0.65625q0 0.25 0.1875 0.453125q0.1875 0.1875 0.6875 0.328125l1.34375 0.40625q0.703125 0.203125 1.046875 0.578125q0.34375 0.375 0.34375 0.890625q0 0.5 -0.296875 0.875q-0.296875 0.375 -0.828125 0.59375q-0.515625 0.203125 -1.171875 0.203125q-0.828125 0 -1.46875 -0.328125q-0.640625 -0.328125 -0.90625 -0.84375q-0.03125 -0.0625 -0.03125 -0.09375q0 -0.046875 0.046875 -0.078125l0.421875 -0.234375q0.109375 -0.0625 0.15625 0.015625q0.578125 0.90625 1.78125 0.90625q0.625 0 1.03125 -0.25q0.421875 -0.265625 0.421875 -0.65625q0 -0.3125 -0.25 -0.5q-0.234375 -0.203125 -0.796875 -0.375l-1.09375 -0.296875q-0.78125 -0.203125 -1.125 -0.5625q-0.328125 -0.375 -0.328125 -0.890625q0 -0.5 0.265625 -0.875q0.28125 -0.390625 0.765625 -0.59375q0.5 -0.203125 1.140625 -0.203125q0.703125 0 1.265625 0.265625q0.5625 0.265625 0.859375 0.71875q0.078125 0.109375 -0.015625 0.15625l-0.4375 0.234375q-0.046875 0.03125 -0.0625 0.03125q-0.046875 0 -0.109375 -0.0625z" fill-rule="nonzero"/><path fill="#eeeeee" d="m696.7598 460.1959l166.36224 0l0 49.826782l-166.36224 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m696.7598 460.1959l166.36224 0l0 49.826782l-166.36224 0z" fill-rule="evenodd"/><path fill="#000000" d="m747.51245 492.0293q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.078125 0q0.203125 0 0.203125 0.203125l0 1.21875q0 0.109375 0.0625 0.125q0.078125 0.015625 0.15625 -0.0625q1.40625 -1.671875 2.890625 -1.671875q0.640625 0 0.640625 0.25l0 1.109375q0 0.1875 -0.15625 0.15625q-0.34375 -0.0625 -0.84375 -0.0625q-0.546875 0 -1.1875 0.328125q-0.625 0.3125 -1.0625 0.8125q-0.421875 0.5 -0.421875 1.03125l0 6.171875q0 0.28125 -0.28125 0.28125l-1.015625 0zm10.239075 -1.046875q0.765625 0 1.5 -0.421875q0.734375 -0.421875 1.5 -1.203125l0 -6.953125q0 -0.265625 0.296875 -0.265625l1.03125 0q0.265625 0 0.265625 0.265625l-0.046875 9.375q0 0.25 -0.203125 0.25l-1.078125 0q-0.203125 0 -0.203125 -0.203125l0 -1.109375q0 -0.21875 -0.171875 -0.046875q-1.015625 0.859375 -1.796875 1.203125q-0.78125 0.34375 -1.59375 0.34375q-1.3125 0 -2.15625 -0.78125q-0.828125 -0.78125 -0.828125 -2.078125l0 -6.9375q0 -0.28125 0.265625 -0.28125l1.046875 0q0.25 0 0.25 0.265625l0 6.546875q0 0.9375 0.515625 1.484375q0.515625 0.546875 1.40625 0.546875zm7.708252 1.046875q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm13.239014 -8.734375q-0.140625 0 -0.140625 0.171875l0 5.90625q0 0.84375 0.265625 1.171875q0.28125 0.3125 0.921875 0.3125l1.28125 0q0.203125 0 0.203125 0.203125l-0.015625 0.640625q0 0.171875 -0.21875 0.234375q-0.484375 0.09375 -1.75 0.09375q-1.171875 0 -1.71875 -0.546875q-0.546875 -0.546875 -0.546875 -1.75l0 -6.234375q0 -0.203125 -0.1875 -0.203125l-1.484375 0q-0.203125 0 -0.203125 -0.1875l0 -0.78125q0 -0.1875 0.1875 -0.1875l1.578125 0q0.125 0 0.125 -0.140625l0.21875 -2.96875q0 -0.25 0.203125 -0.25l0.921875 0q0.234375 0 0.234375 0.265625l0 2.953125q0 0.140625 0.140625 0.140625l2.359375 0q0.203125 0 0.203125 0.171875l0 0.796875q0 0.1875 -0.203125 0.1875l-2.375 0zm6.2512207 -3.28125q0 0.1875 -0.078125 0.28125q-0.078125 0.078125 -0.25 0.078125l-1.09375 0q-0.28125 0 -0.28125 -0.328125l0 -1.5625q0 -0.296875 0.265625 -0.296875l1.171875 0q0.109375 0 0.1875 0.078125q0.078125 0.078125 0.078125 0.203125l0 1.546875zm-0.078125 11.703125q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.953125 0q-0.171875 0 -0.234375 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0 -9.359375q0 -0.265625 0.21875 -0.265625l1.140625 0q0.203125 0 0.203125 0.25l0 9.328125zm3.1619263 0.3125q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.1875 0 0.1875 0.203125l0 1.09375q0 0.21875 0.1875 0.046875q1.0 -0.8125 1.703125 -1.171875q0.71875 -0.359375 1.59375 -0.359375q1.046875 0 1.71875 0.46875q0.6875 0.46875 0.921875 1.171875q0.046875 0.0625 0.078125 0.0625q0.0625 0 0.1875 -0.09375q0.96875 -0.828125 1.734375 -1.21875q0.78125 -0.390625 1.640625 -0.390625q1.34375 0 2.09375 0.765625q0.765625 0.765625 0.765625 2.078125l0 6.9375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.234375 0 -0.234375 -0.25l0 -6.65625q0 -0.921875 -0.453125 -1.421875q-0.453125 -0.515625 -1.34375 -0.515625q-0.75 0 -1.40625 0.375q-0.640625 0.359375 -1.265625 0.890625q-0.140625 0.15625 -0.203125 0.265625q-0.046875 0.109375 -0.046875 0.28125l0 6.734375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -1.9375 -1.78125 -1.9375q-0.75 0 -1.375 0.34375q-0.625 0.34375 -1.5625 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm17.683838 -4.328125q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m772.44617 433.9485l7.4960938 -11.519501l7.4960327 11.519501l-4.6063232 0l0 26.244263l-5.779419 0l0 -26.244263z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m772.44617 433.9485l7.4960938 -11.519501l7.4960327 11.519501l-4.6063232 0l0 26.244263l-5.779419 0l0 -26.244263z" fill-rule="evenodd"/><path fill="#eeeeee" d="m510.27304 460.1959l166.36221 0l0 49.826782l-166.36221 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m510.27304 460.1959l166.36221 0l0 49.826782l-166.36221 0z" fill-rule="evenodd"/><path fill="#000000" d="m577.77167 478.38867q0 -0.203125 0.21875 -0.203125l10.046875 0q0.21875 0 0.21875 0.203125l0 0.96875q0 0.109375 -0.0625 0.15625q-0.046875 0.03125 -0.15625 0.03125l-3.796875 0q-0.109375 0 -0.15625 0.046875q-0.046875 0.03125 -0.046875 0.140625l0 12.046875q0 0.25 -0.21875 0.25l-1.34375 0q-0.21875 0 -0.21875 -0.25l0 -12.03125q0 -0.125 -0.046875 -0.15625q-0.03125 -0.046875 -0.140625 -0.046875l-4.078125 0q-0.109375 0 -0.171875 -0.03125q-0.046875 -0.046875 -0.046875 -0.15625l0 -0.96875zm11.405823 13.640625q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.078125 0q0.203125 0 0.203125 0.203125l0 1.21875q0 0.109375 0.0625 0.125q0.078125 0.015625 0.15625 -0.0625q1.40625 -1.671875 2.890625 -1.671875q0.640625 0 0.640625 0.25l0 1.109375q0 0.1875 -0.15625 0.15625q-0.34375 -0.0625 -0.84375 -0.0625q-0.546875 0 -1.1875 0.328125q-0.625 0.3125 -1.0625 0.8125q-0.421875 0.5 -0.421875 1.03125l0 6.171875q0 0.28125 -0.28125 0.28125l-1.015625 0zm8.520325 -12.015625q0 0.1875 -0.078125 0.28125q-0.078125 0.078125 -0.25 0.078125l-1.09375 0q-0.28125 0 -0.28125 -0.328125l0 -1.5625q0 -0.296875 0.265625 -0.296875l1.171875 0q0.109375 0 0.1875 0.078125q0.078125 0.078125 0.078125 0.203125l0 1.546875zm-0.078125 11.703125q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.953125 0q-0.171875 0 -0.234375 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0 -9.359375q0 -0.265625 0.21875 -0.265625l1.140625 0q0.203125 0 0.203125 0.25l0 9.328125zm3.9432373 -4.015625q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m672.79156 492.0554l22.76361 3.4613953l0 0c13.861816 2.107788 26.28125 -7.4882507 27.739563 -21.43335l3.6625366 -35.021973l4.956238 0.7536316l-5.3877563 -15.773651l-8.466614 13.666992l4.956238 0.7536621l-3.6624756 35.021942l0 0c-1.2293091 11.754974 -11.698242 19.843933 -23.382996 18.06717l-22.763672 -3.4613647z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m672.79156 492.0554l22.76361 3.4613953l0 0c13.861816 2.107788 26.28125 -7.4882507 27.739563 -21.43335l3.6625366 -35.021973l4.956238 0.7536316l-5.3877563 -15.773651l-8.466614 13.666992l4.956238 0.7536621l-3.6624756 35.021942l0 0c-1.2293091 11.754974 -11.698242 19.843933 -23.382996 18.06717l-22.763672 -3.4613647z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m676.6352 433.65494l52.97638 0l0 29.543304l-52.97638 0z" fill-rule="evenodd"/><path fill="#000000" d="m687.4008 446.03555q0 0.109375 -0.046875 0.15625q-0.046875 0.046875 -0.15625 0.046875l-0.609375 0q-0.171875 0 -0.171875 -0.1875l0 -0.890625q0 -0.171875 0.15625 -0.171875l0.671875 0q0.0625 0 0.109375 0.046875q0.046875 0.03125 0.046875 0.109375l0 0.890625zm-0.046875 6.671875q0 0.109375 -0.046875 0.15625q-0.046875 0.03125 -0.140625 0.03125l-0.546875 0q-0.09375 0 -0.125 -0.03125q-0.03125 -0.03125 -0.03125 -0.125l0 -5.34375q0 -0.140625 0.125 -0.140625l0.640625 0q0.125 0 0.125 0.125l0 5.328125zm1.796875 0.1875q-0.140625 0 -0.140625 -0.140625l0 -5.375q0 -0.125 0.109375 -0.125l0.640625 0q0.109375 0 0.109375 0.109375l0 0.625q0 0.109375 0.109375 0.03125q0.59375 -0.46875 1.015625 -0.671875q0.421875 -0.203125 0.9375 -0.203125q0.8125 0 1.265625 0.4375q0.453125 0.4375 0.453125 1.171875l0 3.96875q0 0.171875 -0.15625 0.171875l-0.609375 0q-0.125 0 -0.125 -0.140625l0 -3.796875q0 -0.53125 -0.28125 -0.8125q-0.265625 -0.296875 -0.828125 -0.296875q-0.453125 0 -0.828125 0.203125q-0.375 0.1875 -0.921875 0.65625l0 4.03125q0 0.078125 -0.046875 0.125q-0.03125 0.03125 -0.109375 0.03125l-0.59375 0zm7.0201416 -6.859375q0 0.203125 -0.1875 0.203125l-0.625 0q-0.171875 0 -0.171875 -0.1875l0 -0.890625q0 -0.078125 0.046875 -0.125q0.046875 -0.046875 0.109375 -0.046875l0.6875 0q0.0625 0 0.09375 0.046875q0.046875 0.03125 0.046875 0.109375l0 0.890625zm-0.046875 7.171875q0 0.78125 -0.328125 1.140625q-0.328125 0.359375 -1.15625 0.359375q-0.453125 0 -0.578125 -0.03125q-0.125 -0.015625 -0.125 -0.109375l0 -0.46875q0 -0.109375 0.109375 -0.109375l0.546875 -0.03125q0.328125 -0.03125 0.484375 -0.203125q0.15625 -0.171875 0.15625 -0.609375l0 -5.75q0 -0.140625 0.125 -0.140625l0.65625 0q0.109375 0 0.109375 0.125l0 5.828125zm2.25 -2.78125q0 0.515625 0.25 0.953125q0.25 0.421875 0.671875 0.6875q0.421875 0.25 0.9375 0.25q1.0625 0 1.65625 -0.875q0.046875 -0.046875 0.078125 -0.046875q0.03125 -0.015625 0.078125 0.015625l0.453125 0.21875q0.078125 0.046875 0.015625 0.140625q-0.421875 0.640625 -1.0 0.9375q-0.5625 0.296875 -1.359375 0.296875q-0.78125 0 -1.40625 -0.359375q-0.609375 -0.375 -0.96875 -1.015625q-0.34375 -0.65625 -0.34375 -1.5q0 -0.90625 0.34375 -1.578125q0.359375 -0.6875 0.96875 -1.046875q0.625 -0.359375 1.390625 -0.359375q0.765625 0 1.34375 0.34375q0.578125 0.328125 0.890625 0.984375q0.328125 0.65625 0.328125 1.5625l0 0.03125q0 0.09375 -0.03125 0.15625q-0.03125 0.046875 -0.125 0.046875l-4.078125 0q-0.09375 0 -0.09375 0.15625zm3.25 -0.75q0.125 0 0.15625 -0.015625q0.03125 -0.03125 0.03125 -0.140625q0 -0.46875 -0.203125 -0.859375q-0.1875 -0.40625 -0.578125 -0.640625q-0.375 -0.234375 -0.875 -0.234375q-0.53125 0 -0.9375 0.265625q-0.40625 0.265625 -0.625 0.703125q-0.21875 0.4375 -0.203125 0.921875l3.234375 0zm4.691345 -2.53125q0.765625 0 1.3125 0.359375q0.5625 0.359375 0.890625 0.953125l0.015625 0.09375q0 0.0625 -0.078125 0.078125l-0.578125 0.125l-0.03125 0.015625q-0.0625 0 -0.109375 -0.078125q-0.34375 -0.46875 -0.65625 -0.671875q-0.3125 -0.21875 -0.71875 -0.21875q-0.828125 0 -1.328125 0.609375q-0.484375 0.609375 -0.484375 1.65625q0 1.0625 0.484375 1.671875q0.5 0.609375 1.34375 0.609375q0.5 0 0.875 -0.25q0.390625 -0.25 0.703125 -0.765625q0.03125 -0.046875 0.0625 -0.046875q0.03125 -0.015625 0.0625 0.015625l0.46875 0.171875q0.078125 0.03125 0.046875 0.125q-0.34375 0.625 -0.921875 1.015625q-0.5625 0.390625 -1.359375 0.390625q-0.78125 0 -1.390625 -0.359375q-0.609375 -0.375 -0.953125 -1.03125q-0.34375 -0.671875 -0.34375 -1.515625q0 -0.859375 0.34375 -1.53125q0.34375 -0.6875 0.953125 -1.046875q0.609375 -0.375 1.390625 -0.375zm4.916382 0.765625q-0.078125 0 -0.078125 0.09375l0 3.375q0 0.484375 0.15625 0.671875q0.15625 0.171875 0.515625 0.171875l0.734375 0q0.125 0 0.125 0.125l-0.015625 0.359375q0 0.109375 -0.125 0.140625q-0.28125 0.046875 -1.0 0.046875q-0.671875 0 -0.984375 -0.3125q-0.3125 -0.3125 -0.3125 -1.0l0 -3.5625q0 -0.109375 -0.109375 -0.109375l-0.84375 0q-0.125 0 -0.125 -0.109375l0 -0.453125q0 -0.09375 0.109375 -0.09375l0.90625 0q0.078125 0 0.078125 -0.09375l0.109375 -1.6875q0 -0.140625 0.125 -0.140625l0.53125 0q0.125 0 0.125 0.140625l0 1.6875q0 0.09375 0.09375 0.09375l1.34375 0q0.109375 0 0.109375 0.09375l0 0.453125q0 0.109375 -0.109375 0.109375l-1.359375 0zm6.0146484 0.578125q-0.21875 -0.328125 -0.609375 -0.515625q-0.390625 -0.203125 -0.890625 -0.203125q-0.59375 0 -0.96875 0.25q-0.375 0.25 -0.375 0.65625q0 0.25 0.1875 0.453125q0.1875 0.1875 0.6875 0.328125l1.34375 0.40625q0.703125 0.203125 1.046875 0.578125q0.34375 0.375 0.34375 0.890625q0 0.5 -0.296875 0.875q-0.296875 0.375 -0.828125 0.59375q-0.515625 0.203125 -1.171875 0.203125q-0.828125 0 -1.46875 -0.328125q-0.640625 -0.328125 -0.90625 -0.84375q-0.03125 -0.0625 -0.03125 -0.09375q0 -0.046875 0.046875 -0.078125l0.421875 -0.234375q0.109375 -0.0625 0.15625 0.015625q0.578125 0.90625 1.78125 0.90625q0.625 0 1.03125 -0.25q0.421875 -0.265625 0.421875 -0.65625q0 -0.3125 -0.25 -0.5q-0.234375 -0.203125 -0.796875 -0.375l-1.09375 -0.296875q-0.78125 -0.203125 -1.125 -0.5625q-0.328125 -0.375 -0.328125 -0.890625q0 -0.5 0.265625 -0.875q0.28125 -0.390625 0.765625 -0.59375q0.5 -0.203125 1.140625 -0.203125q0.703125 0 1.265625 0.265625q0.5625 0.265625 0.859375 0.71875q0.078125 0.109375 -0.015625 0.15625l-0.4375 0.234375q-0.046875 0.03125 -0.0625 0.03125q-0.046875 0 -0.109375 -0.0625z" fill-rule="nonzero"/><path fill="#eeeeee" d="m35.910763 575.7218l847.874 0l0 49.826782l-847.874 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m35.910763 575.7218l847.874 0l0 49.826782l-847.874 0z" fill-rule="evenodd"/><path fill="#000000" d="m384.59924 593.7114q0.109375 0 0.15625 0.046875q0.046875 0.046875 0.046875 0.171875l0 13.40625q0 0.21875 -0.234375 0.21875l-0.921875 0q-0.15625 0 -0.234375 -0.03125q-0.078125 -0.03125 -0.15625 -0.125l-7.203125 -10.453125q-0.078125 -0.140625 -0.140625 -0.109375q-0.0625 0.015625 -0.0625 0.125l0 10.34375q0 0.25 -0.265625 0.25l-1.046875 0q-0.234375 0 -0.234375 -0.25l0 -13.328125q0 -0.15625 0.046875 -0.203125q0.046875 -0.0625 0.1875 -0.0625l1.0625 0q0.15625 0 0.234375 0.046875q0.078125 0.03125 0.15625 0.140625l7.0 10.234375q0.09375 0.125 0.171875 0.125q0.109375 0 0.109375 -0.171875l0 -10.15625q0 -0.21875 0.21875 -0.21875l1.109375 0zm5.0915527 1.828125q0 0.1875 -0.078125 0.28125q-0.078125 0.078125 -0.25 0.078125l-1.09375 0q-0.28125 0 -0.28125 -0.328125l0 -1.5625q0 -0.296875 0.265625 -0.296875l1.171875 0q0.109375 0 0.1875 0.078125q0.078125 0.078125 0.078125 0.203125l0 1.546875zm-0.078125 11.703125q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.953125 0q-0.171875 0 -0.234375 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0 -9.359375q0 -0.265625 0.21875 -0.265625l1.140625 0q0.203125 0 0.203125 0.25l0 9.328125zm11.833832 -9.75q0.359375 0 0.359375 0.3125l0 0.640625q0 0.1875 -0.09375 0.28125q-0.078125 0.078125 -0.28125 0.0625q-0.625 0 -0.96875 0.171875q-0.453125 0.1875 -0.375 0.421875q0.015625 0.078125 0.109375 0.28125q0.09375 0.203125 0.140625 0.453125q0.0625 0.25 0.0625 0.53125q0 1.328125 -1.046875 2.171875q-1.03125 0.828125 -3.0 0.828125q-1.328125 0 -1.90625 0.234375q-0.578125 0.21875 -0.578125 0.578125q0 0.28125 0.390625 0.421875q0.390625 0.140625 1.3125 0.1875l2.40625 0.140625q1.59375 0.09375 2.375 0.765625q0.796875 0.65625 0.796875 1.828125q0 1.40625 -1.25 2.203125q-1.234375 0.8125 -3.53125 0.8125q-2.375 0 -3.609375 -0.6875q-1.234375 -0.671875 -1.234375 -1.9375q0 -1.25 1.75 -2.109375q0.203125 -0.09375 0 -0.203125q-0.859375 -0.375 -0.859375 -1.109375q0 -0.40625 0.375 -0.78125q0.390625 -0.375 1.09375 -0.609375q0.09375 -0.03125 0.09375 -0.09375q0 -0.09375 -0.09375 -0.140625q-0.8125 -0.421875 -1.203125 -1.03125q-0.390625 -0.609375 -0.390625 -1.46875q0 -1.453125 1.09375 -2.28125q1.109375 -0.84375 3.109375 -0.84375q1.78125 0 2.8125 0.828125q0.125 0.09375 0.171875 0.09375q0.078125 0 0.21875 -0.09375q0.34375 -0.34375 0.8125 -0.59375q0.484375 -0.265625 0.9375 -0.265625zm-5.09375 5.171875q1.28125 0 1.921875 -0.515625q0.65625 -0.53125 0.65625 -1.515625q0 -1.0 -0.65625 -1.5625q-0.65625 -0.5625 -1.921875 -0.5625q-1.234375 0 -1.921875 0.578125q-0.6875 0.5625 -0.6875 1.546875q0 0.96875 0.671875 1.5q0.6875 0.53125 1.9375 0.53125zm-1.640625 3.671875q-0.34375 -0.015625 -0.78125 0.203125q-0.421875 0.21875 -0.71875 0.609375q-0.296875 0.390625 -0.296875 0.859375q0 0.890625 0.90625 1.359375q0.921875 0.484375 2.71875 0.484375q3.15625 0 3.15625 -1.875q0 -0.640625 -0.4375 -1.015625q-0.4375 -0.375 -1.4375 -0.4375l-3.109375 -0.1875zm9.293549 1.21875q-0.25 0 -0.25 -0.25l0 -13.34375q0 -0.25 0.203125 -0.25l1.109375 0q0.203125 0 0.203125 0.21875l0 4.984375q0 0.203125 0.171875 0.0625q1.0625 -0.828125 1.796875 -1.15625q0.75 -0.34375 1.640625 -0.34375q1.4375 0 2.21875 0.765625q0.78125 0.765625 0.78125 2.078125l0 6.9375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.421875 0.34375q-0.640625 0.34375 -1.625 1.171875l0 7.046875q0 0.28125 -0.296875 0.28125l-1.015625 0zm13.239014 -8.734375q-0.140625 0 -0.140625 0.171875l0 5.90625q0 0.84375 0.265625 1.171875q0.28125 0.3125 0.921875 0.3125l1.28125 0q0.203125 0 0.203125 0.203125l-0.015625 0.640625q0 0.171875 -0.21875 0.234375q-0.484375 0.09375 -1.75 0.09375q-1.171875 0 -1.71875 -0.546875q-0.546875 -0.546875 -0.546875 -1.75l0 -6.234375q0 -0.203125 -0.1875 -0.203125l-1.484375 0q-0.203125 0 -0.203125 -0.1875l0 -0.78125q0 -0.1875 0.1875 -0.1875l1.578125 0q0.125 0 0.125 -0.140625l0.21875 -2.96875q0 -0.25 0.203125 -0.25l0.921875 0q0.234375 0 0.234375 0.265625l0 2.953125q0 0.140625 0.140625 0.140625l2.359375 0q0.203125 0 0.203125 0.171875l0 0.796875q0 0.1875 -0.203125 0.1875l-2.375 0zm10.548096 1.03125q-0.390625 -0.578125 -1.078125 -0.921875q-0.6875 -0.34375 -1.578125 -0.34375q-1.03125 0 -1.6875 0.4375q-0.640625 0.4375 -0.640625 1.140625q0 0.4375 0.328125 0.78125q0.328125 0.34375 1.1875 0.609375l2.359375 0.703125q1.234375 0.328125 1.828125 1.0q0.59375 0.65625 0.59375 1.578125q0 0.859375 -0.515625 1.515625q-0.515625 0.65625 -1.4375 1.03125q-0.90625 0.359375 -2.0625 0.359375q-1.4375 0 -2.5625 -0.5625q-1.125 -0.578125 -1.59375 -1.484375q-0.046875 -0.09375 -0.046875 -0.15625q0 -0.09375 0.09375 -0.15625l0.71875 -0.40625q0.1875 -0.109375 0.28125 0.015625q1.015625 1.609375 3.125 1.609375q1.09375 -0.015625 1.8125 -0.453125q0.71875 -0.4375 0.71875 -1.15625q0 -0.515625 -0.4375 -0.859375q-0.421875 -0.359375 -1.390625 -0.640625l-1.921875 -0.546875q-1.359375 -0.359375 -1.953125 -0.984375q-0.578125 -0.640625 -0.578125 -1.546875q0 -0.859375 0.46875 -1.53125q0.484375 -0.671875 1.34375 -1.03125q0.875 -0.375 1.984375 -0.375q1.234375 0 2.203125 0.46875q0.984375 0.46875 1.515625 1.265625q0.125 0.1875 -0.015625 0.265625l-0.78125 0.421875q-0.078125 0.046875 -0.125 0.046875q-0.0625 0 -0.15625 -0.09375zm3.880127 7.703125q-0.25 0 -0.25 -0.25l0 -13.34375q0 -0.25 0.203125 -0.25l1.109375 0q0.203125 0 0.203125 0.21875l0 4.984375q0 0.203125 0.171875 0.0625q1.0625 -0.828125 1.796875 -1.15625q0.75 -0.34375 1.640625 -0.34375q1.4375 0 2.21875 0.765625q0.78125 0.765625 0.78125 2.078125l0 6.9375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.421875 0.34375q-0.640625 0.34375 -1.625 1.171875l0 7.046875q0 0.28125 -0.296875 0.28125l-1.015625 0zm16.379639 -1.1875q-1.4375 1.375 -3.328125 1.375q-1.453125 0 -2.28125 -0.734375q-0.828125 -0.734375 -0.828125 -1.96875q0 -1.5 1.25 -2.359375q1.265625 -0.859375 3.65625 -1.0l1.453125 -0.109375q0.3125 -0.046875 0.3125 -0.28125l0 -0.5q0 -1.015625 -0.625 -1.59375q-0.625 -0.59375 -1.6875 -0.59375q-1.640625 0 -2.6875 1.484375q-0.046875 0.09375 -0.109375 0.125q-0.0625 0.03125 -0.140625 0l-1.015625 -0.34375q-0.09375 -0.03125 -0.09375 -0.125q0 -0.0625 0.0625 -0.171875q0.546875 -0.984375 1.578125 -1.53125q1.046875 -0.5625 2.46875 -0.5625q1.828125 0 2.796875 0.859375q0.96875 0.84375 0.96875 2.328125l0 6.609375q0 0.171875 -0.0625 0.234375q-0.046875 0.046875 -0.203125 0.046875l-0.921875 0q-0.234375 0 -0.265625 -0.296875l-0.046875 -0.859375q-0.015625 -0.125 -0.09375 -0.125q-0.0625 0 -0.15625 0.09375zm0.234375 -3.546875q0 -0.296875 -0.28125 -0.296875l-1.203125 0.109375q-1.734375 0.109375 -2.6875 0.671875q-0.9375 0.5625 -0.9375 1.546875q0 0.796875 0.5625 1.265625q0.578125 0.46875 1.53125 0.46875q0.578125 0 1.125 -0.203125q0.5625 -0.203125 1.0 -0.5625q0.421875 -0.34375 0.65625 -0.71875q0.234375 -0.375 0.234375 -0.734375l0 -1.546875zm11.270508 4.734375q-0.265625 0 -0.265625 -0.265625l0 -0.796875q0 -0.171875 -0.09375 -0.171875q-0.046875 0 -0.140625 0.09375q-0.5625 0.5625 -1.234375 0.953125q-0.65625 0.375 -1.703125 0.375q-1.1875 0 -2.125 -0.5625q-0.921875 -0.5625 -1.46875 -1.6875q-0.546875 -1.125 -0.546875 -2.734375q0 -1.5625 0.5625 -2.75q0.5625 -1.203125 1.546875 -1.859375q1.0 -0.671875 2.265625 -0.671875q0.828125 0 1.4375 0.265625q0.625 0.265625 1.171875 0.734375q0.140625 0.109375 0.203125 0.109375q0.09375 0 0.09375 -0.25l0 -4.375q0 -0.25 0.203125 -0.25l1.140625 0q0.203125 0 0.203125 0.25l0 13.296875q0 0.171875 -0.0625 0.234375q-0.046875 0.0625 -0.234375 0.0625l-0.953125 0zm-0.3125 -7.703125q-0.59375 -0.59375 -1.203125 -0.90625q-0.609375 -0.3125 -1.3125 -0.3125q-1.421875 0 -2.28125 1.0625q-0.859375 1.0625 -0.859375 3.015625q0 1.953125 0.84375 2.921875q0.859375 0.96875 2.171875 0.96875q0.734375 0 1.34375 -0.34375q0.609375 -0.34375 0.953125 -0.859375q0.34375 -0.53125 0.34375 -1.046875l0 -4.5zm5.5032043 3.375q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0zm14.354889 5.28125q0.015625 0.046875 0.015625 0.140625q0 0.21875 -0.21875 0.21875l-1.375 0q-0.203125 0 -0.296875 -0.21875l-2.40625 -5.875q-0.046875 -0.125 -0.140625 -0.171875q-0.09375 -0.0625 -0.296875 -0.0625l-3.15625 0q-0.234375 0 -0.234375 0.203125l0 5.828125q0 0.171875 -0.0625 0.234375q-0.0625 0.0625 -0.25 0.0625l-1.203125 0q-0.15625 0 -0.21875 -0.046875q-0.046875 -0.0625 -0.046875 -0.203125l0 -13.328125q0 -0.15625 0.046875 -0.203125q0.046875 -0.0625 0.171875 -0.0625l5.203125 0q2.21875 0 3.4375 0.921875q1.21875 0.90625 1.21875 2.65625q0 1.484375 -0.796875 2.390625q-0.796875 0.890625 -1.9375 1.234375q-0.078125 0.015625 -0.09375 0.078125q-0.015625 0.046875 0.015625 0.109375l2.625 6.09375zm-4.984375 -7.25q1.65625 0 2.46875 -0.59375q0.828125 -0.609375 0.828125 -1.890625q0 -1.21875 -0.734375 -1.828125q-0.71875 -0.609375 -2.140625 -0.609375l-3.28125 0q-0.265625 0 -0.265625 0.203125l0 4.46875q0 0.25 0.171875 0.25l2.953125 0zm11.062897 6.5625q0.765625 0 1.5 -0.421875q0.734375 -0.421875 1.5 -1.203125l0 -6.953125q0 -0.265625 0.296875 -0.265625l1.03125 0q0.265625 0 0.265625 0.265625l-0.046875 9.375q0 0.25 -0.203125 0.25l-1.078125 0q-0.203125 0 -0.203125 -0.203125l0 -1.109375q0 -0.21875 -0.171875 -0.046875q-1.015625 0.859375 -1.796875 1.203125q-0.78125 0.34375 -1.59375 0.34375q-1.3125 0 -2.15625 -0.78125q-0.828125 -0.78125 -0.828125 -2.078125l0 -6.9375q0 -0.28125 0.265625 -0.28125l1.046875 0q0.25 0 0.25 0.265625l0 6.546875q0 0.9375 0.515625 1.484375q0.515625 0.546875 1.40625 0.546875zm7.7082214 1.046875q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm13.239014 -8.734375q-0.140625 0 -0.140625 0.171875l0 5.90625q0 0.84375 0.265625 1.171875q0.28125 0.3125 0.921875 0.3125l1.28125 0q0.203125 0 0.203125 0.203125l-0.015625 0.640625q0 0.171875 -0.21875 0.234375q-0.484375 0.09375 -1.75 0.09375q-1.171875 0 -1.71875 -0.546875q-0.546875 -0.546875 -0.546875 -1.75l0 -6.234375q0 -0.203125 -0.1875 -0.203125l-1.484375 0q-0.203125 0 -0.203125 -0.1875l0 -0.78125q0 -0.1875 0.1875 -0.1875l1.578125 0q0.125 0 0.125 -0.140625l0.21875 -2.96875q0 -0.25 0.203125 -0.25l0.921875 0q0.234375 0 0.234375 0.265625l0 2.953125q0 0.140625 0.140625 0.140625l2.359375 0q0.203125 0 0.203125 0.171875l0 0.796875q0 0.1875 -0.203125 0.1875l-2.375 0zm6.2512207 -3.28125q0 0.1875 -0.078125 0.28125q-0.078125 0.078125 -0.25 0.078125l-1.09375 0q-0.28125 0 -0.28125 -0.328125l0 -1.5625q0 -0.296875 0.265625 -0.296875l1.171875 0q0.109375 0 0.1875 0.078125q0.078125 0.078125 0.078125 0.203125l0 1.546875zm-0.078125 11.703125q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.953125 0q-0.171875 0 -0.234375 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0 -9.359375q0 -0.265625 0.21875 -0.265625l1.140625 0q0.203125 0 0.203125 0.25l0 9.328125zm3.1619263 0.3125q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.1875 0 0.1875 0.203125l0 1.09375q0 0.21875 0.1875 0.046875q1.0 -0.8125 1.703125 -1.171875q0.71875 -0.359375 1.59375 -0.359375q1.046875 0 1.71875 0.46875q0.6875 0.46875 0.921875 1.171875q0.046875 0.0625 0.078125 0.0625q0.0625 0 0.1875 -0.09375q0.96875 -0.828125 1.734375 -1.21875q0.78125 -0.390625 1.640625 -0.390625q1.34375 0 2.09375 0.765625q0.765625 0.765625 0.765625 2.078125l0 6.9375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.234375 0 -0.234375 -0.25l0 -6.65625q0 -0.921875 -0.453125 -1.421875q-0.453125 -0.515625 -1.34375 -0.515625q-0.75 0 -1.40625 0.375q-0.640625 0.359375 -1.265625 0.890625q-0.140625 0.15625 -0.203125 0.265625q-0.046875 0.109375 -0.046875 0.28125l0 6.734375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -1.9375 -1.78125 -1.9375q-0.75 0 -1.375 0.34375q-0.625 0.34375 -1.5625 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm17.683838 -4.328125q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m772.44617 521.4436l7.4960938 -11.519501l7.4960327 11.519501l-4.6063232 0l0 54.30725l-5.779419 0l0 -54.30725z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m772.44617 521.4436l7.4960938 -11.519501l7.4960327 11.519501l-4.6063232 0l0 54.30725l-5.779419 0l0 -54.30725z" fill-rule="evenodd"/><path fill="#eeeeee" d="m724.65094 152.17336l110.58264 0l0 49.826782l-110.58264 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m724.65094 152.17336l110.58264 0l0 49.826782l-110.58264 0z" fill-rule="evenodd"/><path fill="#000000" d="m752.99023 174.11612q-0.015625 -0.03125 -0.046875 -0.03125q-0.03125 0 -0.046875 0.03125l-1.390625 2.21875q-0.015625 0.0625 -0.09375 0.0625q-0.078125 0 -0.15625 -0.046875l-0.65625 -0.4375q-0.0625 -0.0625 -0.0625 -0.109375q0 -0.046875 0.046875 -0.140625l1.59375 -1.96875q0.03125 -0.140625 -0.078125 -0.15625l-2.171875 -0.609375q-0.125 -0.0625 -0.0625 -0.234375l0.234375 -0.6875q0.0625 -0.140625 0.203125 -0.078125l2.0625 0.828125q0.140625 0.0625 0.140625 -0.09375l-0.171875 -2.34375q0 -0.0625 0.046875 -0.109375q0.046875 -0.046875 0.125 -0.046875l0.875 0q0.15625 0 0.15625 0.15625l-0.15625 2.34375q0 0.15625 0.109375 0.09375l2.109375 -0.890625q0.046875 -0.015625 0.09375 -0.015625q0.09375 0 0.125 0.109375l0.203125 0.640625q0.015625 0.046875 0.015625 0.125q0 0.0625 -0.109375 0.109375l-2.125 0.703125q-0.09375 0.015625 -0.046875 0.15625l1.53125 1.859375q0.03125 0.046875 0.03125 0.125q0 0.078125 -0.109375 0.171875l-0.59375 0.40625q-0.078125 0.0625 -0.15625 0.0625q-0.078125 0 -0.125 -0.0625l-1.34375 -2.140625zm6.3081055 9.59375q0 0.171875 -0.078125 0.234375q-0.0625 0.0625 -0.25 0.0625l-1.3125 0q-0.15625 0 -0.21875 -0.046875q-0.0625 -0.0625 -0.0625 -0.21875l0 -1.59375q0 -0.25 0.203125 -0.25l1.53125 0q0.1875 0 0.1875 0.21875l0 1.59375zm13.817322 -9.59375q0.125 0 0.171875 0.09375q0.0625 0.078125 0.015625 0.171875l-2.84375 9.375q-0.078125 0.25 -0.359375 0.25l-0.890625 0q-0.328125 0 -0.390625 -0.25l-2.21875 -6.96875q-0.0625 -0.171875 -0.140625 -0.171875q-0.03125 0 -0.09375 0.171875l-2.109375 6.96875q-0.0625 0.25 -0.34375 0.25l-0.953125 0q-0.328125 0 -0.390625 -0.25l-2.9375 -9.359375q-0.015625 -0.03125 -0.015625 -0.09375q0 -0.1875 0.21875 -0.1875l1.109375 0q0.203125 0 0.296875 0.203125l2.21875 7.265625q0.0625 0.1875 0.125 0.1875q0.0625 0 0.15625 -0.203125l2.203125 -7.265625q0.046875 -0.1875 0.25 -0.1875l0.890625 0q0.21875 0 0.28125 0.203125l2.28125 7.265625q0.0625 0.1875 0.140625 0.1875q0.078125 0 0.125 -0.203125l2.140625 -7.25q0.09375 -0.203125 0.328125 -0.203125l0.734375 0zm7.959778 8.703125q-1.4375 1.375 -3.328125 1.375q-1.453125 0 -2.28125 -0.734375q-0.828125 -0.734375 -0.828125 -1.96875q0 -1.5 1.25 -2.359375q1.265625 -0.859375 3.65625 -1.0l1.453125 -0.109375q0.3125 -0.046875 0.3125 -0.28125l0 -0.5q0 -1.015625 -0.625 -1.59375q-0.625 -0.59375 -1.6875 -0.59375q-1.640625 0 -2.6875 1.484375q-0.046875 0.09375 -0.109375 0.125q-0.0625 0.03125 -0.140625 0l-1.015625 -0.34375q-0.09375 -0.03125 -0.09375 -0.125q0 -0.0625 0.0625 -0.171875q0.546875 -0.984375 1.578125 -1.53125q1.046875 -0.5625 2.46875 -0.5625q1.828125 0 2.796875 0.859375q0.96875 0.84375 0.96875 2.328125l0 6.609375q0 0.171875 -0.0625 0.234375q-0.046875 0.046875 -0.203125 0.046875l-0.921875 0q-0.234375 0 -0.265625 -0.296875l-0.046875 -0.859375q-0.015625 -0.125 -0.09375 -0.125q-0.0625 0 -0.15625 0.09375zm0.234375 -3.546875q0 -0.296875 -0.28125 -0.296875l-1.203125 0.109375q-1.734375 0.109375 -2.6875 0.671875q-0.9375 0.5625 -0.9375 1.546875q0 0.796875 0.5625 1.265625q0.578125 0.46875 1.53125 0.46875q0.578125 0 1.125 -0.203125q0.5625 -0.203125 1.0 -0.5625q0.421875 -0.34375 0.65625 -0.71875q0.234375 -0.375 0.234375 -0.734375l0 -1.546875zm10.176758 -2.96875q-0.390625 -0.578125 -1.078125 -0.921875q-0.6875 -0.34375 -1.578125 -0.34375q-1.03125 0 -1.6875 0.4375q-0.640625 0.4375 -0.640625 1.140625q0 0.4375 0.328125 0.78125q0.328125 0.34375 1.1875 0.609375l2.359375 0.703125q1.234375 0.328125 1.828125 1.0q0.59375 0.65625 0.59375 1.578125q0 0.859375 -0.515625 1.515625q-0.515625 0.65625 -1.4375 1.03125q-0.90625 0.359375 -2.0625 0.359375q-1.4375 0 -2.5625 -0.5625q-1.125 -0.578125 -1.59375 -1.484375q-0.046875 -0.09375 -0.046875 -0.15625q0 -0.09375 0.09375 -0.15625l0.71875 -0.40625q0.1875 -0.109375 0.28125 0.015625q1.015625 1.609375 3.125 1.609375q1.09375 -0.015625 1.8125 -0.453125q0.71875 -0.4375 0.71875 -1.15625q0 -0.515625 -0.4375 -0.859375q-0.421875 -0.359375 -1.390625 -0.640625l-1.921875 -0.546875q-1.359375 -0.359375 -1.953125 -0.984375q-0.578125 -0.640625 -0.578125 -1.546875q0 -0.859375 0.46875 -1.53125q0.484375 -0.671875 1.34375 -1.03125q0.875 -0.375 1.984375 -0.375q1.234375 0 2.203125 0.46875q0.984375 0.46875 1.515625 1.265625q0.125 0.1875 -0.015625 0.265625l-0.78125 0.421875q-0.078125 0.046875 -0.125 0.046875q-0.0625 0 -0.15625 -0.09375zm3.880127 7.703125q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.1875 0 0.1875 0.203125l0 1.09375q0 0.21875 0.1875 0.046875q1.0 -0.8125 1.703125 -1.171875q0.71875 -0.359375 1.59375 -0.359375q1.046875 0 1.71875 0.46875q0.6875 0.46875 0.921875 1.171875q0.046875 0.0625 0.078125 0.0625q0.0625 0 0.1875 -0.09375q0.96875 -0.828125 1.734375 -1.21875q0.78125 -0.390625 1.640625 -0.390625q1.34375 0 2.09375 0.765625q0.765625 0.765625 0.765625 2.078125l0 6.9375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.234375 0 -0.234375 -0.25l0 -6.65625q0 -0.921875 -0.453125 -1.421875q-0.453125 -0.515625 -1.34375 -0.515625q-0.75 0 -1.40625 0.375q-0.640625 0.359375 -1.265625 0.890625q-0.140625 0.15625 -0.203125 0.265625q-0.046875 0.109375 -0.046875 0.28125l0 6.734375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -1.9375 -1.78125 -1.9375q-0.75 0 -1.375 0.34375q-0.625 0.34375 -1.5625 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m772.44617 210.93451l7.4960938 -7.181534l7.4960327 7.181534l-4.0393677 0l0 51.463715l4.0393677 0l-7.4960327 7.1815186l-7.4960938 -7.1815186l4.0394287 0l0 -51.463715z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m772.44617 210.93451l7.4960938 -7.181534l7.4960327 7.181534l-4.0393677 0l0 51.463715l4.0393677 0l-7.4960327 7.1815186l-7.4960938 -7.1815186l4.0394287 0l0 -51.463715z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m777.44617 218.34645l105.79529 0l0 29.54332l-105.79529 0z" fill-rule="evenodd"/><path fill="#000000" d="m789.61804 231.83646q0.765625 0 1.3125 0.359375q0.5625 0.359375 0.890625 0.953125l0.015625 0.09375q0 0.0625 -0.078125 0.078125l-0.578125 0.125l-0.03125 0.015625q-0.0625 0 -0.109375 -0.078125q-0.34375 -0.46875 -0.65625 -0.671875q-0.3125 -0.21875 -0.71875 -0.21875q-0.828125 0 -1.328125 0.609375q-0.484375 0.609375 -0.484375 1.65625q0 1.0625 0.484375 1.671875q0.5 0.609375 1.34375 0.609375q0.5 0 0.875 -0.25q0.390625 -0.25 0.703125 -0.765625q0.03125 -0.046875 0.0625 -0.046875q0.03125 -0.015625 0.0625 0.015625l0.46875 0.171875q0.078125 0.03125 0.046875 0.125q-0.34375 0.625 -0.921875 1.015625q-0.5625 0.390625 -1.359375 0.390625q-0.78125 0 -1.390625 -0.359375q-0.609375 -0.375 -0.953125 -1.03125q-0.34375 -0.671875 -0.34375 -1.515625q0 -0.859375 0.34375 -1.53125q0.34375 -0.6875 0.953125 -1.046875q0.609375 -0.375 1.390625 -0.375zm5.791382 5.859375q-0.796875 0 -1.421875 -0.359375q-0.609375 -0.375 -0.953125 -1.03125q-0.328125 -0.671875 -0.328125 -1.515625q0 -0.859375 0.34375 -1.53125q0.359375 -0.671875 0.96875 -1.046875q0.609375 -0.375 1.40625 -0.375q0.78125 0 1.390625 0.375q0.625 0.375 0.953125 1.046875q0.328125 0.671875 0.328125 1.53125q0 0.84375 -0.34375 1.5q-0.328125 0.65625 -0.953125 1.03125q-0.609375 0.375 -1.390625 0.375zm0.015625 -0.671875q0.828125 0 1.296875 -0.59375q0.46875 -0.609375 0.46875 -1.671875q0 -1.046875 -0.484375 -1.65625q-0.46875 -0.609375 -1.28125 -0.609375q-0.84375 0 -1.328125 0.609375q-0.46875 0.609375 -0.46875 1.65625q0 1.046875 0.46875 1.65625q0.484375 0.609375 1.328125 0.609375zm4.1488037 0.5625q-0.140625 0 -0.140625 -0.140625l0 -5.375q0 -0.125 0.109375 -0.125l0.640625 0q0.109375 0 0.109375 0.109375l0 0.625q0 0.125 0.109375 0.03125q0.5625 -0.46875 0.96875 -0.671875q0.40625 -0.203125 0.90625 -0.203125q0.59375 0 0.984375 0.265625q0.390625 0.265625 0.53125 0.671875q0.03125 0.03125 0.046875 0.03125q0.03125 0 0.109375 -0.0625q0.546875 -0.46875 0.984375 -0.6875q0.453125 -0.21875 0.9375 -0.21875q0.765625 0 1.1875 0.4375q0.4375 0.4375 0.4375 1.171875l0 3.96875q0 0.171875 -0.15625 0.171875l-0.59375 0q-0.140625 0 -0.140625 -0.140625l0 -3.796875q0 -0.53125 -0.265625 -0.8125q-0.25 -0.296875 -0.75 -0.296875q-0.4375 0 -0.8125 0.203125q-0.359375 0.203125 -0.71875 0.515625q-0.078125 0.09375 -0.109375 0.15625q-0.03125 0.0625 -0.03125 0.15625l0 3.84375q0 0.171875 -0.171875 0.171875l-0.59375 0q-0.140625 0 -0.140625 -0.140625l0 -3.796875q0 -1.109375 -1.015625 -1.109375q-0.421875 0 -0.78125 0.203125q-0.359375 0.1875 -0.890625 0.65625l0 4.03125q0 0.078125 -0.046875 0.125q-0.03125 0.03125 -0.109375 0.03125l-0.59375 0zm9.654663 0q-0.140625 0 -0.140625 -0.140625l0 -5.375q0 -0.125 0.109375 -0.125l0.640625 0q0.109375 0 0.109375 0.109375l0 0.625q0 0.125 0.109375 0.03125q0.5625 -0.46875 0.96875 -0.671875q0.40625 -0.203125 0.90625 -0.203125q0.59375 0 0.984375 0.265625q0.390625 0.265625 0.53125 0.671875q0.03125 0.03125 0.046875 0.03125q0.03125 0 0.109375 -0.0625q0.546875 -0.46875 0.984375 -0.6875q0.453125 -0.21875 0.9375 -0.21875q0.765625 0 1.1875 0.4375q0.4375 0.4375 0.4375 1.171875l0 3.96875q0 0.171875 -0.15625 0.171875l-0.59375 0q-0.140625 0 -0.140625 -0.140625l0 -3.796875q0 -0.53125 -0.265625 -0.8125q-0.25 -0.296875 -0.75 -0.296875q-0.4375 0 -0.8125 0.203125q-0.359375 0.203125 -0.71875 0.515625q-0.078125 0.09375 -0.109375 0.15625q-0.03125 0.0625 -0.03125 0.15625l0 3.84375q0 0.171875 -0.171875 0.171875l-0.59375 0q-0.140625 0 -0.140625 -0.140625l0 -3.796875q0 -1.109375 -1.015625 -1.109375q-0.421875 0 -0.78125 0.203125q-0.359375 0.1875 -0.890625 0.65625l0 4.03125q0 0.078125 -0.046875 0.125q-0.03125 0.03125 -0.109375 0.03125l-0.59375 0zm11.420288 -0.59375q0.4375 0 0.859375 -0.234375q0.421875 -0.25 0.859375 -0.703125l0 -3.96875q0 -0.140625 0.171875 -0.140625l0.59375 0q0.140625 0 0.140625 0.140625l-0.015625 5.359375q0 0.140625 -0.125 0.140625l-0.609375 0q-0.125 0 -0.125 -0.125l0 -0.625q0 -0.125 -0.09375 -0.03125q-0.578125 0.5 -1.03125 0.703125q-0.4375 0.1875 -0.90625 0.1875q-0.75 0 -1.234375 -0.4375q-0.46875 -0.453125 -0.46875 -1.203125l0 -3.953125q0 -0.15625 0.15625 -0.15625l0.59375 0q0.140625 0 0.140625 0.140625l0 3.734375q0 0.546875 0.296875 0.859375q0.296875 0.3125 0.796875 0.3125zm4.404419 0.59375q-0.140625 0 -0.140625 -0.140625l0 -5.375q0 -0.125 0.109375 -0.125l0.640625 0q0.109375 0 0.109375 0.109375l0 0.625q0 0.109375 0.109375 0.03125q0.59375 -0.46875 1.015625 -0.671875q0.421875 -0.203125 0.9375 -0.203125q0.8125 0 1.265625 0.4375q0.453125 0.4375 0.453125 1.171875l0 3.96875q0 0.171875 -0.15625 0.171875l-0.609375 0q-0.125 0 -0.125 -0.140625l0 -3.796875q0 -0.53125 -0.28125 -0.8125q-0.265625 -0.296875 -0.828125 -0.296875q-0.453125 0 -0.828125 0.203125q-0.375 0.1875 -0.921875 0.65625l0 4.03125q0 0.078125 -0.046875 0.125q-0.03125 0.03125 -0.109375 0.03125l-0.59375 0zm7.0201416 -6.859375q0 0.109375 -0.046875 0.15625q-0.046875 0.046875 -0.15625 0.046875l-0.609375 0q-0.171875 0 -0.171875 -0.1875l0 -0.890625q0 -0.171875 0.15625 -0.171875l0.671875 0q0.0625 0 0.109375 0.046875q0.046875 0.03125 0.046875 0.109375l0 0.890625zm-0.046875 6.671875q0 0.109375 -0.046875 0.15625q-0.046875 0.03125 -0.140625 0.03125l-0.546875 0q-0.09375 0 -0.125 -0.03125q-0.03125 -0.03125 -0.03125 -0.125l0 -5.34375q0 -0.140625 0.125 -0.140625l0.640625 0q0.125 0 0.125 0.125l0 5.328125zm4.0 -5.5625q0.765625 0 1.3125 0.359375q0.5625 0.359375 0.890625 0.953125l0.015625 0.09375q0 0.0625 -0.078125 0.078125l-0.578125 0.125l-0.03125 0.015625q-0.0625 0 -0.109375 -0.078125q-0.34375 -0.46875 -0.65625 -0.671875q-0.3125 -0.21875 -0.71875 -0.21875q-0.828125 0 -1.328125 0.609375q-0.484375 0.609375 -0.484375 1.65625q0 1.0625 0.484375 1.671875q0.5 0.609375 1.34375 0.609375q0.5 0 0.875 -0.25q0.390625 -0.25 0.703125 -0.765625q0.03125 -0.046875 0.0625 -0.046875q0.03125 -0.015625 0.0625 0.015625l0.46875 0.171875q0.078125 0.03125 0.046875 0.125q-0.34375 0.625 -0.921875 1.015625q-0.5625 0.390625 -1.359375 0.390625q-0.78125 0 -1.390625 -0.359375q-0.609375 -0.375 -0.953125 -1.03125q-0.34375 -0.671875 -0.34375 -1.515625q0 -0.859375 0.34375 -1.53125q0.34375 -0.6875 0.953125 -1.046875q0.609375 -0.375 1.390625 -0.375zm6.713257 5.0625q-0.828125 0.796875 -1.90625 0.796875q-0.828125 0 -1.3125 -0.421875q-0.46875 -0.421875 -0.46875 -1.125q0 -0.859375 0.71875 -1.34375q0.71875 -0.484375 2.09375 -0.578125l0.828125 -0.0625q0.171875 -0.015625 0.171875 -0.15625l0 -0.296875q0 -0.5625 -0.359375 -0.890625q-0.34375 -0.34375 -0.953125 -0.34375q-0.9375 0 -1.53125 0.84375q-0.03125 0.0625 -0.0625 0.078125q-0.03125 0.015625 -0.09375 -0.015625l-0.578125 -0.1875q-0.046875 -0.015625 -0.046875 -0.078125q0 -0.03125 0.03125 -0.09375q0.3125 -0.5625 0.90625 -0.875q0.59375 -0.3125 1.40625 -0.3125q1.046875 0 1.59375 0.484375q0.5625 0.484375 0.5625 1.328125l0 3.78125q0 0.09375 -0.03125 0.125q-0.03125 0.03125 -0.125 0.03125l-0.53125 0q-0.125 0 -0.15625 -0.171875l-0.015625 -0.484375q-0.015625 -0.078125 -0.046875 -0.078125q-0.046875 0 -0.09375 0.046875zm0.125 -2.015625q0 -0.171875 -0.15625 -0.171875l-0.6875 0.0625q-1.0 0.0625 -1.53125 0.390625q-0.53125 0.3125 -0.53125 0.875q0 0.453125 0.3125 0.734375q0.328125 0.265625 0.875 0.265625q0.328125 0 0.640625 -0.109375q0.328125 -0.125 0.578125 -0.328125q0.234375 -0.203125 0.359375 -0.421875q0.140625 -0.21875 0.140625 -0.421875l0 -0.875zm3.9178467 -2.28125q-0.078125 0 -0.078125 0.09375l0 3.375q0 0.484375 0.15625 0.671875q0.15625 0.171875 0.515625 0.171875l0.734375 0q0.125 0 0.125 0.125l-0.015625 0.359375q0 0.109375 -0.125 0.140625q-0.28125 0.046875 -1.0 0.046875q-0.671875 0 -0.984375 -0.3125q-0.3125 -0.3125 -0.3125 -1.0l0 -3.5625q0 -0.109375 -0.109375 -0.109375l-0.84375 0q-0.125 0 -0.125 -0.109375l0 -0.453125q0 -0.09375 0.109375 -0.09375l0.90625 0q0.078125 0 0.078125 -0.09375l0.109375 -1.6875q0 -0.140625 0.125 -0.140625l0.53125 0q0.125 0 0.125 0.140625l0 1.6875q0 0.09375 0.09375 0.09375l1.34375 0q0.109375 0 0.109375 0.09375l0 0.453125q0 0.109375 -0.109375 0.109375l-1.359375 0zm3.0946655 2.515625q0 0.515625 0.25 0.953125q0.25 0.421875 0.671875 0.6875q0.421875 0.25 0.9375 0.25q1.0625 0 1.65625 -0.875q0.046875 -0.046875 0.078125 -0.046875q0.03125 -0.015625 0.078125 0.015625l0.453125 0.21875q0.078125 0.046875 0.015625 0.140625q-0.421875 0.640625 -1.0 0.9375q-0.5625 0.296875 -1.359375 0.296875q-0.78125 0 -1.40625 -0.359375q-0.609375 -0.375 -0.96875 -1.015625q-0.34375 -0.65625 -0.34375 -1.5q0 -0.90625 0.34375 -1.578125q0.359375 -0.6875 0.96875 -1.046875q0.625 -0.359375 1.390625 -0.359375q0.765625 0 1.34375 0.34375q0.578125 0.328125 0.890625 0.984375q0.328125 0.65625 0.328125 1.5625l0 0.03125q0 0.09375 -0.03125 0.15625q-0.03125 0.046875 -0.125 0.046875l-4.078125 0q-0.09375 0 -0.09375 0.15625zm3.25 -0.75q0.125 0 0.15625 -0.015625q0.03125 -0.03125 0.03125 -0.140625q0 -0.46875 -0.203125 -0.859375q-0.1875 -0.40625 -0.578125 -0.640625q-0.375 -0.234375 -0.875 -0.234375q-0.53125 0 -0.9375 0.265625q-0.40625 0.265625 -0.625 0.703125q-0.21875 0.4375 -0.203125 0.921875l3.234375 0zm5.722595 -1.1875q-0.21875 -0.328125 -0.609375 -0.515625q-0.390625 -0.203125 -0.890625 -0.203125q-0.59375 0 -0.96875 0.25q-0.375 0.25 -0.375 0.65625q0 0.25 0.1875 0.453125q0.1875 0.1875 0.6875 0.328125l1.34375 0.40625q0.703125 0.203125 1.046875 0.578125q0.34375 0.375 0.34375 0.890625q0 0.5 -0.296875 0.875q-0.296875 0.375 -0.828125 0.59375q-0.515625 0.203125 -1.171875 0.203125q-0.828125 0 -1.46875 -0.328125q-0.640625 -0.328125 -0.90625 -0.84375q-0.03125 -0.0625 -0.03125 -0.09375q0 -0.046875 0.046875 -0.078125l0.421875 -0.234375q0.109375 -0.0625 0.15625 0.015625q0.578125 0.90625 1.78125 0.90625q0.625 0 1.03125 -0.25q0.421875 -0.265625 0.421875 -0.65625q0 -0.3125 -0.25 -0.5q-0.234375 -0.203125 -0.796875 -0.375l-1.09375 -0.296875q-0.78125 -0.203125 -1.125 -0.5625q-0.328125 -0.375 -0.328125 -0.890625q0 -0.5 0.265625 -0.875q0.28125 -0.390625 0.765625 -0.59375q0.5 -0.203125 1.140625 -0.203125q0.703125 0 1.265625 0.265625q0.5625 0.265625 0.859375 0.71875q0.078125 0.109375 -0.015625 0.15625l-0.4375 0.234375q-0.046875 0.03125 -0.0625 0.03125q-0.046875 0 -0.109375 -0.0625z" fill-rule="nonzero"/><path fill="#eeeeee" d="m435.9344 113.04323l220.5039 0l0 95.433075l-220.5039 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m435.9344 113.04323l220.5039 0l0 95.433075l-220.5039 0z" fill-rule="evenodd"/><path fill="#000000" d="m468.67828 134.84323q-0.078125 0 -0.125 -0.0625q-0.03125 -0.0625 0 -0.171875l3.453125 -9.46875q0.046875 -0.109375 0.09375 -0.140625q0.0625 -0.046875 0.171875 -0.046875l1.046875 0q0.25 0 0.296875 0.203125l3.421875 9.453125l0.015625 0.078125q0 0.15625 -0.15625 0.15625l-0.9375 0q-0.171875 0 -0.21875 -0.140625l-0.921875 -2.578125q-0.03125 -0.046875 -0.0625 -0.078125q-0.015625 -0.03125 -0.09375 -0.03125l-3.875 0q-0.125 0 -0.171875 0.109375l-0.9375 2.59375q-0.046875 0.125 -0.203125 0.125l-0.796875 0zm5.640625 -3.84375q0.140625 0 0.109375 -0.171875l-1.609375 -4.375q-0.03125 -0.125 -0.09375 -0.125q-0.046875 0 -0.09375 0.125l-1.625 4.40625l-0.03125 0.078125q0 0.0625 0.109375 0.0625l3.234375 0zm8.580139 -1.65625q-0.28125 -0.421875 -0.765625 -0.65625q-0.484375 -0.25 -1.125 -0.25q-0.734375 0 -1.203125 0.3125q-0.46875 0.3125 -0.46875 0.8125q0 0.3125 0.234375 0.5625q0.234375 0.234375 0.84375 0.421875l1.703125 0.515625q0.875 0.234375 1.296875 0.71875q0.421875 0.46875 0.421875 1.109375q0 0.625 -0.375 1.09375q-0.359375 0.46875 -1.015625 0.734375q-0.65625 0.265625 -1.484375 0.265625q-1.015625 0 -1.828125 -0.40625q-0.796875 -0.421875 -1.125 -1.0625q-0.046875 -0.078125 -0.046875 -0.109375q0 -0.0625 0.078125 -0.109375l0.515625 -0.296875q0.125 -0.078125 0.203125 0.015625q0.71875 1.140625 2.21875 1.140625q0.78125 0 1.296875 -0.3125q0.515625 -0.3125 0.515625 -0.828125q0 -0.375 -0.3125 -0.625q-0.296875 -0.25 -0.984375 -0.453125l-1.375 -0.390625q-0.984375 -0.25 -1.40625 -0.703125q-0.40625 -0.453125 -0.40625 -1.109375q0 -0.609375 0.328125 -1.078125q0.34375 -0.484375 0.953125 -0.75q0.625 -0.265625 1.4375 -0.265625q0.875 0 1.578125 0.34375q0.703125 0.328125 1.0625 0.90625q0.09375 0.125 0 0.1875l-0.5625 0.296875q-0.0625 0.03125 -0.078125 0.03125q-0.0625 0 -0.125 -0.0625zm6.8239746 0q-0.28125 -0.421875 -0.765625 -0.65625q-0.484375 -0.25 -1.125 -0.25q-0.734375 0 -1.203125 0.3125q-0.46875 0.3125 -0.46875 0.8125q0 0.3125 0.234375 0.5625q0.234375 0.234375 0.84375 0.421875l1.703125 0.515625q0.875 0.234375 1.296875 0.71875q0.421875 0.46875 0.421875 1.109375q0 0.625 -0.375 1.09375q-0.359375 0.46875 -1.015625 0.734375q-0.65625 0.265625 -1.484375 0.265625q-1.015625 0 -1.828125 -0.40625q-0.796875 -0.421875 -1.125 -1.0625q-0.046875 -0.078125 -0.046875 -0.109375q0 -0.0625 0.078125 -0.109375l0.515625 -0.296875q0.125 -0.078125 0.203125 0.015625q0.71875 1.140625 2.21875 1.140625q0.78125 0 1.296875 -0.3125q0.515625 -0.3125 0.515625 -0.828125q0 -0.375 -0.3125 -0.625q-0.296875 -0.25 -0.984375 -0.453125l-1.375 -0.390625q-0.984375 -0.25 -1.40625 -0.703125q-0.40625 -0.453125 -0.40625 -1.109375q0 -0.609375 0.328125 -1.078125q0.34375 -0.484375 0.953125 -0.75q0.625 -0.265625 1.4375 -0.265625q0.875 0 1.578125 0.34375q0.703125 0.328125 1.0625 0.90625q0.09375 0.125 0 0.1875l-0.5625 0.296875q-0.0625 0.03125 -0.078125 0.03125q-0.0625 0 -0.125 -0.0625zm3.3239746 2.40625q0 0.640625 0.3125 1.1875q0.328125 0.546875 0.859375 0.875q0.53125 0.3125 1.171875 0.3125q1.328125 0 2.078125 -1.109375q0.046875 -0.046875 0.078125 -0.046875q0.046875 -0.015625 0.109375 0.015625l0.5625 0.265625q0.09375 0.078125 0.015625 0.1875q-0.515625 0.8125 -1.234375 1.1875q-0.71875 0.359375 -1.71875 0.359375q-0.96875 0 -1.75 -0.453125q-0.765625 -0.453125 -1.203125 -1.265625q-0.4375 -0.828125 -0.4375 -1.890625q0 -1.125 0.4375 -1.96875q0.453125 -0.859375 1.21875 -1.3125q0.765625 -0.453125 1.71875 -0.453125q0.953125 0 1.671875 0.4375q0.734375 0.421875 1.140625 1.25q0.40625 0.8125 0.40625 1.9375l0 0.046875q0 0.125 -0.046875 0.1875q-0.03125 0.046875 -0.15625 0.046875l-5.109375 0q-0.125 0 -0.125 0.203125zm4.078125 -0.9375q0.15625 0 0.1875 -0.03125q0.046875 -0.03125 0.046875 -0.15625q0 -0.578125 -0.25 -1.078125q-0.25 -0.5 -0.71875 -0.796875q-0.46875 -0.296875 -1.09375 -0.296875q-0.6875 0 -1.203125 0.34375q-0.5 0.328125 -0.765625 0.875q-0.265625 0.53125 -0.25 1.140625l4.046875 0zm3.1185913 4.03125q-0.1875 0 -0.1875 -0.171875l0 -6.71875q0 -0.171875 0.140625 -0.171875l0.796875 0q0.140625 0 0.140625 0.140625l0 0.78125q0 0.15625 0.125 0.03125q0.71875 -0.578125 1.21875 -0.828125q0.515625 -0.265625 1.140625 -0.265625q0.75 0 1.234375 0.34375q0.484375 0.328125 0.65625 0.828125q0.03125 0.046875 0.0625 0.046875q0.03125 0 0.125 -0.0625q0.703125 -0.59375 1.25 -0.875q0.5625 -0.28125 1.171875 -0.28125q0.953125 0 1.484375 0.546875q0.546875 0.546875 0.546875 1.484375l0 4.953125q0 0.21875 -0.203125 0.21875l-0.734375 0q-0.171875 0 -0.171875 -0.171875l0 -4.765625q0 -0.65625 -0.328125 -1.015625q-0.3125 -0.359375 -0.953125 -0.359375q-0.53125 0 -1.0 0.265625q-0.46875 0.25 -0.90625 0.640625q-0.109375 0.109375 -0.15625 0.1875q-0.03125 0.078125 -0.03125 0.1875l0 4.8125q0 0.21875 -0.203125 0.21875l-0.75 0q-0.171875 0 -0.171875 -0.171875l0 -4.765625q0 -1.375 -1.28125 -1.375q-0.53125 0 -0.984375 0.25q-0.4375 0.234375 -1.109375 0.828125l0 5.03125q0 0.109375 -0.046875 0.15625q-0.046875 0.046875 -0.140625 0.046875l-0.734375 0zm12.090881 0q-0.109375 0 -0.15625 -0.046875q-0.046875 -0.046875 -0.046875 -0.171875l0 -9.484375q0 -0.1875 0.15625 -0.1875l0.828125 0q0.125 0 0.125 0.1875l0 3.265625q0 0.140625 0.078125 0.140625q0.03125 0 0.125 -0.0625q0.890625 -0.84375 2.140625 -0.84375q1.390625 0 2.109375 1.015625q0.734375 1.0 0.734375 2.609375q0 1.71875 -0.8125 2.71875q-0.796875 1.0 -2.21875 1.0q-0.8125 0 -1.359375 -0.328125q-0.53125 -0.328125 -0.8125 -0.734375q-0.046875 -0.046875 -0.078125 -0.046875q-0.0625 0 -0.078125 0.09375l-0.0625 0.65625q-0.03125 0.125 -0.078125 0.171875q-0.046875 0.046875 -0.15625 0.046875l-0.4375 0zm0.90625 -2.390625q0 0.46875 0.265625 0.859375q0.28125 0.390625 0.71875 0.625q0.453125 0.234375 0.921875 0.234375q0.96875 0 1.546875 -0.71875q0.578125 -0.71875 0.578125 -2.15625q0 -1.359375 -0.53125 -2.09375q-0.515625 -0.75 -1.5 -0.75q-0.59375 0 -1.109375 0.28125q-0.515625 0.265625 -0.890625 0.71875l0 3.0zm7.9991455 2.15625q0 0.140625 -0.0625 0.1875q-0.046875 0.046875 -0.171875 0.046875l-0.703125 0q-0.109375 0 -0.15625 -0.03125q-0.03125 -0.046875 -0.03125 -0.15625l0.015625 -9.515625q0 -0.1875 0.15625 -0.1875l0.796875 0q0.15625 0 0.15625 0.171875l0 9.484375zm2.4354248 2.4375q-0.453125 0 -0.640625 -0.03125q-0.171875 -0.03125 -0.171875 -0.140625l0 -0.53125q0 -0.09375 0.078125 -0.140625q0.078125 -0.03125 0.296875 -0.03125l0.84375 0q0.3125 0 0.578125 -0.234375q0.28125 -0.234375 0.421875 -0.578125q0.15625 -0.34375 0.15625 -0.65625q0 -0.203125 -0.046875 -0.328125l-2.546875 -6.375q-0.015625 -0.015625 -0.015625 -0.078125q0 -0.140625 0.15625 -0.140625l0.828125 0q0.15625 0 0.21875 0.140625l1.984375 5.171875q0.03125 0.125 0.109375 0.125q0.078125 0 0.125 -0.15625l1.96875 -5.140625q0.0625 -0.140625 0.1875 -0.140625l0.625 0q0.078125 0 0.109375 0.0625q0.046875 0.0625 0.015625 0.125l-2.921875 7.5q-0.359375 0.90625 -0.90625 1.234375q-0.53125 0.34375 -1.453125 0.34375zm12.298218 -10.25q-0.859375 -1.0 -2.265625 -1.0q-1.0 0 -1.578125 0.4375q-0.578125 0.4375 -0.578125 1.21875q0 1.046875 1.4375 1.53125l1.921875 0.640625q1.171875 0.375 1.703125 1.03125q0.53125 0.640625 0.53125 1.578125q0 1.28125 -0.953125 2.015625q-0.9375 0.734375 -2.578125 0.734375q-1.203125 0 -2.125 -0.421875q-0.90625 -0.4375 -1.46875 -1.25q-0.046875 -0.109375 -0.046875 -0.140625q0 -0.09375 0.125 -0.1875l0.484375 -0.328125q0.125 -0.078125 0.1875 -0.078125q0.078125 0 0.15625 0.078125q0.5625 0.734375 1.125 1.046875q0.5625 0.296875 1.5 0.296875q1.125 0 1.734375 -0.390625q0.625 -0.40625 0.625 -1.25q0 -0.515625 -0.328125 -0.875q-0.3125 -0.375 -1.171875 -0.6875l-2.03125 -0.703125q-1.046875 -0.359375 -1.546875 -1.03125q-0.5 -0.671875 -0.5 -1.484375q0 -0.828125 0.421875 -1.453125q0.421875 -0.625 1.1875 -0.953125q0.765625 -0.34375 1.765625 -0.34375q0.96875 0 1.765625 0.34375q0.796875 0.34375 1.34375 0.96875q0.078125 0.0625 0.078125 0.140625q0 0.0625 -0.078125 0.109375l-0.609375 0.484375q-0.03125 0.03125 -0.078125 0.03125q-0.046875 0 -0.15625 -0.109375zm5.855774 0.84375q0.984375 0 1.65625 0.453125q0.6875 0.453125 1.109375 1.203125l0.03125 0.109375q0 0.078125 -0.09375 0.09375l-0.734375 0.171875l-0.046875 0.015625q-0.0625 0 -0.125 -0.109375q-0.4375 -0.578125 -0.828125 -0.84375q-0.390625 -0.265625 -0.890625 -0.265625q-1.046875 0 -1.65625 0.765625q-0.609375 0.765625 -0.609375 2.078125q0 1.3125 0.609375 2.078125q0.625 0.765625 1.671875 0.765625q0.625 0 1.09375 -0.3125q0.484375 -0.3125 0.875 -0.953125q0.03125 -0.0625 0.0625 -0.0625q0.046875 -0.015625 0.109375 0.015625l0.5625 0.21875q0.09375 0.03125 0.0625 0.171875q-0.421875 0.765625 -1.140625 1.265625q-0.71875 0.484375 -1.71875 0.484375q-0.96875 0 -1.734375 -0.453125q-0.75 -0.46875 -1.1875 -1.296875q-0.421875 -0.828125 -0.421875 -1.890625q0 -1.078125 0.421875 -1.921875q0.4375 -0.84375 1.203125 -1.3125q0.765625 -0.46875 1.71875 -0.46875zm4.489441 7.203125q-0.1875 0 -0.1875 -0.171875l0 -6.71875q0 -0.171875 0.140625 -0.171875l0.78125 0q0.140625 0 0.140625 0.140625l0 0.875q0 0.078125 0.046875 0.09375q0.046875 0.015625 0.09375 -0.0625q1.015625 -1.1875 2.078125 -1.1875q0.453125 0 0.453125 0.171875l0 0.8125q0 0.125 -0.109375 0.09375q-0.25 -0.03125 -0.609375 -0.03125q-0.375 0 -0.828125 0.234375q-0.453125 0.21875 -0.765625 0.578125q-0.3125 0.359375 -0.3125 0.734375l0 4.40625q0 0.203125 -0.1875 0.203125l-0.734375 0zm6.0890503 -8.578125q0 0.125 -0.0625 0.1875q-0.046875 0.0625 -0.1875 0.0625l-0.765625 0q-0.203125 0 -0.203125 -0.234375l0 -1.109375q0 -0.21875 0.1875 -0.21875l0.84375 0q0.078125 0 0.125 0.0625q0.0625 0.046875 0.0625 0.140625l0 1.109375zm-0.0625 8.34375q0 0.140625 -0.046875 0.1875q-0.046875 0.046875 -0.1875 0.046875l-0.6875 0q-0.109375 0 -0.15625 -0.03125q-0.03125 -0.046875 -0.03125 -0.15625l0 -6.6875q0 -0.1875 0.15625 -0.1875l0.8125 0q0.140625 0 0.140625 0.171875l0 6.65625zm2.9979248 -6.828125q0.171875 0 0.171875 0.203125l0 0.5625q0 0.109375 0.078125 0.109375q0.03125 0 0.109375 -0.0625q0.265625 -0.28125 0.484375 -0.453125q0.21875 -0.171875 0.625 -0.328125q0.421875 -0.171875 0.96875 -0.171875q0.84375 0 1.5 0.40625q0.671875 0.40625 1.046875 1.203125q0.375 0.796875 0.375 1.953125q0 1.171875 -0.375 2.03125q-0.375 0.84375 -1.078125 1.296875q-0.6875 0.453125 -1.609375 0.453125q-1.109375 0 -1.890625 -0.671875q-0.09375 -0.09375 -0.140625 -0.09375q-0.078125 0 -0.078125 0.171875l0 2.484375q0 0.171875 -0.140625 0.171875l-0.828125 0q-0.140625 0 -0.140625 -0.171875l0 -8.875q0 -0.109375 0.046875 -0.15625q0.046875 -0.0625 0.15625 -0.0625l0.71875 0zm0.1875 5.5q0.4375 0.4375 0.859375 0.65625q0.4375 0.21875 0.953125 0.21875q1.0 0 1.609375 -0.75q0.609375 -0.765625 0.609375 -2.1875q0 -1.390625 -0.609375 -2.078125q-0.59375 -0.6875 -1.53125 -0.6875q-0.546875 0 -0.96875 0.234375q-0.421875 0.234375 -0.671875 0.59375q-0.25 0.359375 -0.25 0.71875l0 3.28125zm8.66687 -4.671875q-0.109375 0 -0.109375 0.109375l0 4.234375q0 0.59375 0.203125 0.828125q0.203125 0.21875 0.65625 0.21875l0.921875 0q0.140625 0 0.140625 0.15625l-0.015625 0.453125q0 0.125 -0.15625 0.171875q-0.34375 0.0625 -1.25 0.0625q-0.84375 0 -1.234375 -0.390625q-0.375 -0.390625 -0.375 -1.25l0 -4.453125q0 -0.140625 -0.140625 -0.140625l-1.0625 0q-0.15625 0 -0.15625 -0.140625l0 -0.5625q0 -0.125 0.140625 -0.125l1.140625 0q0.078125 0 0.078125 -0.109375l0.15625 -2.125q0 -0.171875 0.140625 -0.171875l0.671875 0q0.15625 0 0.15625 0.1875l0 2.109375q0 0.109375 0.109375 0.109375l1.671875 0q0.15625 0 0.15625 0.125l0 0.5625q0 0.140625 -0.15625 0.140625l-1.6875 0zm10.164124 -3.78125q0.890625 0 1.671875 0.375q0.796875 0.359375 1.3125 0.984375q0.53125 0.625 0.640625 1.359375l0 0.09375q0 0.0625 -0.03125 0.09375q-0.03125 0.015625 -0.0625 0.015625l-1.0 0.078125l-0.03125 0q-0.046875 0 -0.078125 -0.03125q-0.015625 -0.03125 -0.03125 -0.09375q-0.203125 -0.875 -0.828125 -1.390625q-0.625 -0.515625 -1.515625 -0.515625q-1.40625 0 -2.140625 1.03125q-0.734375 1.03125 -0.734375 3.078125q0 2.015625 0.734375 3.046875q0.734375 1.015625 2.203125 1.015625q0.953125 0 1.578125 -0.453125q0.640625 -0.46875 1.03125 -1.453125q0.015625 -0.09375 0.15625 -0.0625l0.78125 0.1875q0.09375 0.03125 0.0625 0.1875q-0.1875 0.671875 -0.6875 1.265625q-0.484375 0.59375 -1.25 0.96875q-0.765625 0.375 -1.71875 0.375q-1.328125 0 -2.28125 -0.609375q-0.9375 -0.625 -1.453125 -1.765625q-0.5 -1.15625 -0.5 -2.71875q0 -1.578125 0.5 -2.71875q0.5 -1.140625 1.4375 -1.734375q0.953125 -0.609375 2.234375 -0.609375zm8.376038 10.15625q-1.0 0 -1.765625 -0.453125q-0.765625 -0.46875 -1.1875 -1.296875q-0.421875 -0.828125 -0.421875 -1.875q0 -1.09375 0.4375 -1.921875q0.4375 -0.84375 1.203125 -1.3125q0.765625 -0.484375 1.75 -0.484375q0.984375 0 1.75 0.484375q0.765625 0.46875 1.1875 1.3125q0.421875 0.828125 0.421875 1.90625q0 1.046875 -0.4375 1.875q-0.421875 0.828125 -1.1875 1.296875q-0.765625 0.46875 -1.75 0.46875zm0.03125 -0.84375q1.03125 0 1.609375 -0.75q0.578125 -0.765625 0.578125 -2.078125q0 -1.3125 -0.59375 -2.078125q-0.578125 -0.765625 -1.609375 -0.765625q-1.046875 0 -1.640625 0.765625q-0.59375 0.765625 -0.59375 2.078125q0 1.3125 0.59375 2.078125q0.59375 0.75 1.65625 0.75zm5.1866455 0.703125q-0.1875 0 -0.1875 -0.171875l0 -6.71875q0 -0.171875 0.140625 -0.171875l0.796875 0q0.15625 0 0.15625 0.140625l0 0.78125q0 0.140625 0.109375 0.03125q0.75 -0.578125 1.265625 -0.828125q0.53125 -0.265625 1.1875 -0.265625q1.015625 0 1.578125 0.546875q0.578125 0.546875 0.578125 1.46875l0 4.96875q0 0.21875 -0.203125 0.21875l-0.75 0q-0.171875 0 -0.171875 -0.171875l0 -4.765625q0 -0.65625 -0.34375 -1.015625q-0.34375 -0.359375 -1.046875 -0.359375q-0.5625 0 -1.03125 0.25q-0.46875 0.234375 -1.15625 0.828125l0 5.03125q0 0.109375 -0.046875 0.15625q-0.046875 0.046875 -0.140625 0.046875l-0.734375 0zm9.455505 -6.234375q-0.109375 0 -0.109375 0.109375l0 4.234375q0 0.59375 0.203125 0.828125q0.203125 0.21875 0.65625 0.21875l0.921875 0q0.140625 0 0.140625 0.15625l-0.015625 0.453125q0 0.125 -0.15625 0.171875q-0.34375 0.0625 -1.25 0.0625q-0.84375 0 -1.234375 -0.390625q-0.375 -0.390625 -0.375 -1.25l0 -4.453125q0 -0.140625 -0.140625 -0.140625l-1.0625 0q-0.15625 0 -0.15625 -0.140625l0 -0.5625q0 -0.125 0.140625 -0.125l1.140625 0q0.078125 0 0.078125 -0.109375l0.15625 -2.125q0 -0.171875 0.140625 -0.171875l0.671875 0q0.15625 0 0.15625 0.1875l0 2.109375q0 0.109375 0.109375 0.109375l1.671875 0q0.15625 0 0.15625 0.125l0 0.5625q0 0.140625 -0.15625 0.140625l-1.6875 0zm3.486084 6.234375q-0.1875 0 -0.1875 -0.171875l0 -6.71875q0 -0.171875 0.140625 -0.171875l0.78125 0q0.140625 0 0.140625 0.140625l0 0.875q0 0.078125 0.046875 0.09375q0.046875 0.015625 0.09375 -0.0625q1.015625 -1.1875 2.078125 -1.1875q0.453125 0 0.453125 0.171875l0 0.8125q0 0.125 -0.109375 0.09375q-0.25 -0.03125 -0.609375 -0.03125q-0.375 0 -0.828125 0.234375q-0.453125 0.21875 -0.765625 0.578125q-0.3125 0.359375 -0.3125 0.734375l0 4.40625q0 0.203125 -0.1875 0.203125l-0.734375 0zm8.970886 -0.859375q-1.015625 1.0 -2.359375 1.0q-1.046875 0 -1.640625 -0.53125q-0.59375 -0.53125 -0.59375 -1.40625q0 -1.0625 0.890625 -1.671875q0.90625 -0.625 2.609375 -0.734375l1.046875 -0.078125q0.21875 -0.03125 0.21875 -0.203125l0 -0.359375q0 -0.71875 -0.453125 -1.125q-0.4375 -0.421875 -1.1875 -0.421875q-1.171875 0 -1.921875 1.0625q-0.046875 0.0625 -0.09375 0.09375q-0.03125 0.015625 -0.09375 -0.015625l-0.71875 -0.234375q-0.0625 -0.03125 -0.0625 -0.09375q0 -0.046875 0.03125 -0.125q0.40625 -0.703125 1.140625 -1.09375q0.734375 -0.40625 1.75 -0.40625q1.3125 0 2.0 0.609375q0.703125 0.609375 0.703125 1.671875l0 4.71875q0 0.125 -0.046875 0.171875q-0.046875 0.03125 -0.140625 0.03125l-0.671875 0q-0.15625 0 -0.1875 -0.21875l-0.03125 -0.609375q-0.015625 -0.09375 -0.0625 -0.09375q-0.046875 0 -0.125 0.0625zm0.171875 -2.53125q0 -0.203125 -0.1875 -0.203125l-0.875 0.078125q-1.234375 0.078125 -1.90625 0.484375q-0.671875 0.390625 -0.671875 1.09375q0 0.578125 0.40625 0.921875q0.40625 0.328125 1.078125 0.328125q0.421875 0 0.8125 -0.140625q0.40625 -0.15625 0.71875 -0.40625q0.296875 -0.25 0.453125 -0.515625q0.171875 -0.28125 0.171875 -0.53125l0 -1.109375zm5.960022 -3.8125q0.984375 0 1.65625 0.453125q0.6875 0.453125 1.109375 1.203125l0.03125 0.109375q0 0.078125 -0.09375 0.09375l-0.734375 0.171875l-0.046875 0.015625q-0.0625 0 -0.125 -0.109375q-0.4375 -0.578125 -0.828125 -0.84375q-0.390625 -0.265625 -0.890625 -0.265625q-1.046875 0 -1.65625 0.765625q-0.609375 0.765625 -0.609375 2.078125q0 1.3125 0.609375 2.078125q0.625 0.765625 1.671875 0.765625q0.625 0 1.09375 -0.3125q0.484375 -0.3125 0.875 -0.953125q0.03125 -0.0625 0.0625 -0.0625q0.046875 -0.015625 0.109375 0.015625l0.5625 0.21875q0.09375 0.03125 0.0625 0.171875q-0.421875 0.765625 -1.140625 1.265625q-0.71875 0.484375 -1.71875 0.484375q-0.96875 0 -1.734375 -0.453125q-0.75 -0.46875 -1.1875 -1.296875q-0.421875 -0.828125 -0.421875 -1.890625q0 -1.078125 0.421875 -1.921875q0.4375 -0.84375 1.203125 -1.3125q0.765625 -0.46875 1.71875 -0.46875zm6.161316 0.96875q-0.109375 0 -0.109375 0.109375l0 4.234375q0 0.59375 0.203125 0.828125q0.203125 0.21875 0.65625 0.21875l0.921875 0q0.140625 0 0.140625 0.15625l-0.015625 0.453125q0 0.125 -0.15625 0.171875q-0.34375 0.0625 -1.25 0.0625q-0.84375 0 -1.234375 -0.390625q-0.375 -0.390625 -0.375 -1.25l0 -4.453125q0 -0.140625 -0.140625 -0.140625l-1.0625 0q-0.15625 0 -0.15625 -0.140625l0 -0.5625q0 -0.125 0.140625 -0.125l1.140625 0q0.078125 0 0.078125 -0.109375l0.15625 -2.125q0 -0.171875 0.140625 -0.171875l0.671875 0q0.15625 0 0.15625 0.1875l0 2.109375q0 0.109375 0.109375 0.109375l1.671875 0q0.15625 0 0.15625 0.125l0 0.5625q0 0.140625 -0.15625 0.140625l-1.6875 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m435.9449 9.795239l220.5039 0l0 95.43307l-220.5039 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m435.9449 9.795239l220.5039 0l0 95.43307l-220.5039 0z" fill-rule="evenodd"/><path fill="#000000" d="m511.08673 31.34524q0.015625 0.015625 0.015625 0.09375q0 0.15625 -0.171875 0.15625l-0.96875 0q-0.140625 0 -0.203125 -0.15625l-1.734375 -4.203125q-0.03125 -0.078125 -0.109375 -0.109375q-0.0625 -0.046875 -0.203125 -0.046875l-2.25 0q-0.15625 0 -0.15625 0.140625l0 4.15625q0 0.125 -0.046875 0.171875q-0.046875 0.046875 -0.1875 0.046875l-0.859375 0q-0.109375 0 -0.15625 -0.03125q-0.03125 -0.046875 -0.03125 -0.140625l0 -9.53125q0 -0.109375 0.03125 -0.140625q0.03125 -0.046875 0.125 -0.046875l3.71875 0q1.578125 0 2.4375 0.65625q0.875 0.65625 0.875 1.90625q0 1.046875 -0.5625 1.703125q-0.5625 0.640625 -1.375 0.875q-0.0625 0.015625 -0.078125 0.0625q0 0.03125 0.015625 0.078125l1.875 4.359375zm-3.5625 -5.1875q1.1875 0 1.765625 -0.421875q0.59375 -0.4375 0.59375 -1.34375q0 -0.875 -0.515625 -1.3125q-0.515625 -0.4375 -1.53125 -0.4375l-2.34375 0q-0.1875 0 -0.1875 0.140625l0 3.203125q0 0.171875 0.109375 0.171875l2.109375 0zm7.901306 4.6875q0.546875 0 1.078125 -0.296875q0.53125 -0.296875 1.078125 -0.859375l0 -4.96875q0 -0.1875 0.203125 -0.1875l0.734375 0q0.1875 0 0.1875 0.1875l-0.03125 6.703125q0 0.171875 -0.140625 0.171875l-0.78125 0q-0.140625 0 -0.140625 -0.140625l0 -0.796875q0 -0.15625 -0.125 -0.03125q-0.71875 0.609375 -1.28125 0.859375q-0.546875 0.25 -1.140625 0.25q-0.9375 0 -1.53125 -0.5625q-0.59375 -0.5625 -0.59375 -1.484375l0 -4.953125q0 -0.203125 0.203125 -0.203125l0.734375 0q0.171875 0 0.171875 0.1875l0 4.671875q0 0.671875 0.359375 1.0625q0.375 0.390625 1.015625 0.390625zm9.56073 -4.75q-0.28125 -0.421875 -0.765625 -0.65625q-0.484375 -0.25 -1.125 -0.25q-0.734375 0 -1.203125 0.3125q-0.46875 0.3125 -0.46875 0.8125q0 0.3125 0.234375 0.5625q0.234375 0.234375 0.84375 0.421875l1.703125 0.515625q0.875 0.234375 1.296875 0.71875q0.421875 0.46875 0.421875 1.109375q0 0.625 -0.375 1.09375q-0.359375 0.46875 -1.015625 0.734375q-0.65625 0.265625 -1.484375 0.265625q-1.015625 0 -1.828125 -0.40625q-0.796875 -0.421875 -1.125 -1.0625q-0.046875 -0.078125 -0.046875 -0.109375q0 -0.0625 0.078125 -0.109375l0.515625 -0.296875q0.125 -0.078125 0.203125 0.015625q0.71875 1.140625 2.21875 1.140625q0.78125 0 1.296875 -0.3125q0.515625 -0.3125 0.515625 -0.828125q0 -0.375 -0.3125 -0.625q-0.296875 -0.25 -0.984375 -0.453125l-1.375 -0.390625q-0.984375 -0.25 -1.40625 -0.703125q-0.40625 -0.453125 -0.40625 -1.109375q0 -0.609375 0.328125 -1.078125q0.34375 -0.484375 0.953125 -0.75q0.625 -0.265625 1.4375 -0.265625q0.875 0 1.578125 0.34375q0.703125 0.328125 1.0625 0.90625q0.09375 0.125 0 0.1875l-0.5625 0.296875q-0.0625 0.03125 -0.078125 0.03125q-0.0625 0 -0.125 -0.0625zm4.4489746 -0.734375q-0.109375 0 -0.109375 0.109375l0 4.234375q0 0.59375 0.203125 0.828125q0.203125 0.21875 0.65625 0.21875l0.921875 0q0.140625 0 0.140625 0.15625l-0.015625 0.453125q0 0.125 -0.15625 0.171875q-0.34375 0.0625 -1.25 0.0625q-0.84375 0 -1.234375 -0.390625q-0.375 -0.390625 -0.375 -1.25l0 -4.453125q0 -0.140625 -0.140625 -0.140625l-1.0625 0q-0.15625 0 -0.15625 -0.140625l0 -0.5625q0 -0.125 0.140625 -0.125l1.140625 0q0.078125 0 0.078125 -0.109375l0.15625 -2.125q0 -0.171875 0.140625 -0.171875l0.671875 0q0.15625 0 0.15625 0.1875l0 2.109375q0 0.109375 0.109375 0.109375l1.671875 0q0.15625 0 0.15625 0.125l0 0.5625q0 0.140625 -0.15625 0.140625l-1.6875 0zm10.164124 -3.78125q0.890625 0 1.671875 0.375q0.796875 0.359375 1.3125 0.984375q0.53125 0.625 0.640625 1.359375l0 0.09375q0 0.0625 -0.03125 0.09375q-0.03125 0.015625 -0.0625 0.015625l-1.0 0.078125l-0.03125 0q-0.046875 0 -0.078125 -0.03125q-0.015625 -0.03125 -0.03125 -0.09375q-0.203125 -0.875 -0.828125 -1.390625q-0.625 -0.515625 -1.515625 -0.515625q-1.40625 0 -2.140625 1.03125q-0.734375 1.03125 -0.734375 3.078125q0 2.015625 0.734375 3.046875q0.734375 1.015625 2.203125 1.015625q0.953125 0 1.578125 -0.453125q0.640625 -0.46875 1.03125 -1.453125q0.015625 -0.09375 0.15625 -0.0625l0.78125 0.1875q0.09375 0.03125 0.0625 0.1875q-0.1875 0.671875 -0.6875 1.265625q-0.484375 0.59375 -1.25 0.96875q-0.765625 0.375 -1.71875 0.375q-1.328125 0 -2.28125 -0.609375q-0.9375 -0.625 -1.453125 -1.765625q-0.5 -1.15625 -0.5 -2.71875q0 -1.578125 0.5 -2.71875q0.5 -1.140625 1.4375 -1.734375q0.953125 -0.609375 2.234375 -0.609375zm8.376038 10.15625q-1.0 0 -1.765625 -0.453125q-0.765625 -0.46875 -1.1875 -1.296875q-0.421875 -0.828125 -0.421875 -1.875q0 -1.09375 0.4375 -1.921875q0.4375 -0.84375 1.203125 -1.3125q0.765625 -0.484375 1.75 -0.484375q0.984375 0 1.75 0.484375q0.765625 0.46875 1.1875 1.3125q0.421875 0.828125 0.421875 1.90625q0 1.046875 -0.4375 1.875q-0.421875 0.828125 -1.1875 1.296875q-0.765625 0.46875 -1.75 0.46875zm0.03125 -0.84375q1.03125 0 1.609375 -0.75q0.578125 -0.765625 0.578125 -2.078125q0 -1.3125 -0.59375 -2.078125q-0.578125 -0.765625 -1.609375 -0.765625q-1.046875 0 -1.640625 0.765625q-0.59375 0.765625 -0.59375 2.078125q0 1.3125 0.59375 2.078125q0.59375 0.75 1.65625 0.75zm5.1866455 0.703125q-0.1875 0 -0.1875 -0.171875l0 -6.71875q0 -0.171875 0.140625 -0.171875l0.796875 0q0.15625 0 0.15625 0.140625l0 0.78125q0 0.140625 0.109375 0.03125q0.75 -0.578125 1.265625 -0.828125q0.53125 -0.265625 1.1875 -0.265625q1.015625 0 1.578125 0.546875q0.578125 0.546875 0.578125 1.46875l0 4.96875q0 0.21875 -0.203125 0.21875l-0.75 0q-0.171875 0 -0.171875 -0.171875l0 -4.765625q0 -0.65625 -0.34375 -1.015625q-0.34375 -0.359375 -1.046875 -0.359375q-0.5625 0 -1.03125 0.25q-0.46875 0.234375 -1.15625 0.828125l0 5.03125q0 0.109375 -0.046875 0.15625q-0.046875 0.046875 -0.140625 0.046875l-0.734375 0zm9.455505 -6.234375q-0.109375 0 -0.109375 0.109375l0 4.234375q0 0.59375 0.203125 0.828125q0.203125 0.21875 0.65625 0.21875l0.921875 0q0.140625 0 0.140625 0.15625l-0.015625 0.453125q0 0.125 -0.15625 0.171875q-0.34375 0.0625 -1.25 0.0625q-0.84375 0 -1.234375 -0.390625q-0.375 -0.390625 -0.375 -1.25l0 -4.453125q0 -0.140625 -0.140625 -0.140625l-1.0625 0q-0.15625 0 -0.15625 -0.140625l0 -0.5625q0 -0.125 0.140625 -0.125l1.140625 0q0.078125 0 0.078125 -0.109375l0.15625 -2.125q0 -0.171875 0.140625 -0.171875l0.671875 0q0.15625 0 0.15625 0.1875l0 2.109375q0 0.109375 0.109375 0.109375l1.671875 0q0.15625 0 0.15625 0.125l0 0.5625q0 0.140625 -0.15625 0.140625l-1.6875 0zm3.486084 6.234375q-0.1875 0 -0.1875 -0.171875l0 -6.71875q0 -0.171875 0.140625 -0.171875l0.78125 0q0.140625 0 0.140625 0.140625l0 0.875q0 0.078125 0.046875 0.09375q0.046875 0.015625 0.09375 -0.0625q1.015625 -1.1875 2.078125 -1.1875q0.453125 0 0.453125 0.171875l0 0.8125q0 0.125 -0.109375 0.09375q-0.25 -0.03125 -0.609375 -0.03125q-0.375 0 -0.828125 0.234375q-0.453125 0.21875 -0.765625 0.578125q-0.3125 0.359375 -0.3125 0.734375l0 4.40625q0 0.203125 -0.1875 0.203125l-0.734375 0zm8.970886 -0.859375q-1.015625 1.0 -2.359375 1.0q-1.046875 0 -1.640625 -0.53125q-0.59375 -0.53125 -0.59375 -1.40625q0 -1.0625 0.890625 -1.671875q0.90625 -0.625 2.609375 -0.734375l1.046875 -0.078125q0.21875 -0.03125 0.21875 -0.203125l0 -0.359375q0 -0.71875 -0.453125 -1.125q-0.4375 -0.421875 -1.1875 -0.421875q-1.171875 0 -1.921875 1.0625q-0.046875 0.0625 -0.09375 0.09375q-0.03125 0.015625 -0.09375 -0.015625l-0.71875 -0.234375q-0.0625 -0.03125 -0.0625 -0.09375q0 -0.046875 0.03125 -0.125q0.40625 -0.703125 1.140625 -1.09375q0.734375 -0.40625 1.75 -0.40625q1.3125 0 2.0 0.609375q0.703125 0.609375 0.703125 1.671875l0 4.71875q0 0.125 -0.046875 0.171875q-0.046875 0.03125 -0.140625 0.03125l-0.671875 0q-0.15625 0 -0.1875 -0.21875l-0.03125 -0.609375q-0.015625 -0.09375 -0.0625 -0.09375q-0.046875 0 -0.125 0.0625zm0.171875 -2.53125q0 -0.203125 -0.1875 -0.203125l-0.875 0.078125q-1.234375 0.078125 -1.90625 0.484375q-0.671875 0.390625 -0.671875 1.09375q0 0.578125 0.40625 0.921875q0.40625 0.328125 1.078125 0.328125q0.421875 0 0.8125 -0.140625q0.40625 -0.15625 0.71875 -0.40625q0.296875 -0.25 0.453125 -0.515625q0.171875 -0.28125 0.171875 -0.53125l0 -1.109375zm5.960022 -3.8125q0.984375 0 1.65625 0.453125q0.6875 0.453125 1.109375 1.203125l0.03125 0.109375q0 0.078125 -0.09375 0.09375l-0.734375 0.171875l-0.046875 0.015625q-0.0625 0 -0.125 -0.109375q-0.4375 -0.578125 -0.828125 -0.84375q-0.390625 -0.265625 -0.890625 -0.265625q-1.046875 0 -1.65625 0.765625q-0.609375 0.765625 -0.609375 2.078125q0 1.3125 0.609375 2.078125q0.625 0.765625 1.671875 0.765625q0.625 0 1.09375 -0.3125q0.484375 -0.3125 0.875 -0.953125q0.03125 -0.0625 0.0625 -0.0625q0.046875 -0.015625 0.109375 0.015625l0.5625 0.21875q0.09375 0.03125 0.0625 0.171875q-0.421875 0.765625 -1.140625 1.265625q-0.71875 0.484375 -1.71875 0.484375q-0.96875 0 -1.734375 -0.453125q-0.75 -0.46875 -1.1875 -1.296875q-0.421875 -0.828125 -0.421875 -1.890625q0 -1.078125 0.421875 -1.921875q0.4375 -0.84375 1.203125 -1.3125q0.765625 -0.46875 1.71875 -0.46875zm6.161316 0.96875q-0.109375 0 -0.109375 0.109375l0 4.234375q0 0.59375 0.203125 0.828125q0.203125 0.21875 0.65625 0.21875l0.921875 0q0.140625 0 0.140625 0.15625l-0.015625 0.453125q0 0.125 -0.15625 0.171875q-0.34375 0.0625 -1.25 0.0625q-0.84375 0 -1.234375 -0.390625q-0.375 -0.390625 -0.375 -1.25l0 -4.453125q0 -0.140625 -0.140625 -0.140625l-1.0625 0q-0.15625 0 -0.15625 -0.140625l0 -0.5625q0 -0.125 0.140625 -0.125l1.140625 0q0.078125 0 0.078125 -0.109375l0.15625 -2.125q0 -0.171875 0.140625 -0.171875l0.671875 0q0.15625 0 0.15625 0.1875l0 2.109375q0 0.109375 0.109375 0.109375l1.671875 0q0.15625 0 0.15625 0.125l0 0.5625q0 0.140625 -0.15625 0.140625l-1.6875 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m719.23016 152.77419l2.8240356 16.199524l-13.438232 -3.4436188l3.2612305 -3.9192505l-54.892517 -66.30441l4.091797 -4.9173965l54.892456 66.304405z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m719.23016 152.77419l2.8240356 16.199524l-13.438232 -3.4436188l3.2612305 -3.9192505l-54.892517 -66.30441l4.091797 -4.9173965l54.892456 66.304405z" fill-rule="evenodd"/><path fill="#eeeeee" d="m708.69354 168.03674l13.899658 9.055115l-13.931152 9.05513l0.00970459 -5.564377l-49.108276 0l0.012145996 -6.981491l49.108215 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m708.69354 168.03674l13.899658 9.055115l-13.931152 9.05513l0.00970459 -5.564377l-49.108276 0l0.012145996 -6.981491l49.108215 0z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m676.6352 82.22544l85.25983 0l0 29.543312l-85.25983 0z" fill-rule="evenodd"/><path fill="#000000" d="m689.66644 93.44982q0.703125 0 1.328125 0.296875q0.640625 0.296875 1.046875 0.796875q0.421875 0.5 0.515625 1.09375l0 0.078125q0 0.03125 -0.03125 0.0625q-0.015625 0.015625 -0.046875 0.015625l-0.796875 0.0625l-0.03125 0q-0.03125 0 -0.046875 -0.015625q-0.015625 -0.03125 -0.03125 -0.09375q-0.15625 -0.6875 -0.65625 -1.09375q-0.5 -0.421875 -1.21875 -0.421875q-1.125 0 -1.71875 0.828125q-0.578125 0.828125 -0.578125 2.46875q0 1.609375 0.578125 2.421875q0.59375 0.8125 1.765625 0.8125q0.765625 0 1.265625 -0.359375q0.5 -0.375 0.8125 -1.171875q0.03125 -0.0625 0.125 -0.03125l0.640625 0.140625q0.0625 0.03125 0.046875 0.15625q-0.15625 0.53125 -0.5625 1.015625q-0.390625 0.46875 -1.0 0.765625q-0.59375 0.296875 -1.359375 0.296875q-1.0625 0 -1.828125 -0.484375q-0.75 -0.5 -1.15625 -1.40625q-0.40625 -0.921875 -0.40625 -2.1875q0 -1.25 0.390625 -2.15625q0.40625 -0.921875 1.15625 -1.40625q0.765625 -0.484375 1.796875 -0.484375zm6.6902466 8.125q-0.796875 0 -1.421875 -0.359375q-0.609375 -0.375 -0.953125 -1.03125q-0.328125 -0.671875 -0.328125 -1.515625q0 -0.859375 0.34375 -1.53125q0.359375 -0.671875 0.96875 -1.046875q0.609375 -0.375 1.40625 -0.375q0.78125 0 1.390625 0.375q0.625 0.375 0.953125 1.046875q0.328125 0.671875 0.328125 1.53125q0 0.84375 -0.34375 1.5q-0.328125 0.65625 -0.953125 1.03125q-0.609375 0.375 -1.390625 0.375zm0.015625 -0.671875q0.828125 0 1.296875 -0.59375q0.46875 -0.609375 0.46875 -1.671875q0 -1.046875 -0.484375 -1.65625q-0.46875 -0.609375 -1.28125 -0.609375q-0.84375 0 -1.328125 0.609375q-0.46875 0.609375 -0.46875 1.65625q0 1.046875 0.46875 1.65625q0.484375 0.609375 1.328125 0.609375zm4.1488037 0.5625q-0.140625 0 -0.140625 -0.140625l0 -5.375q0 -0.125 0.109375 -0.125l0.640625 0q0.109375 0 0.109375 0.109375l0 0.625q0 0.125 0.109375 0.03125q0.5625 -0.46875 0.96875 -0.671875q0.40625 -0.203125 0.90625 -0.203125q0.59375 0 0.984375 0.265625q0.390625 0.265625 0.53125 0.671875q0.03125 0.03125 0.046875 0.03125q0.03125 0 0.109375 -0.0625q0.546875 -0.46875 0.984375 -0.6875q0.453125 -0.21875 0.9375 -0.21875q0.765625 0 1.1875 0.4375q0.4375 0.4375 0.4375 1.171875l0 3.96875q0 0.171875 -0.15625 0.171875l-0.59375 0q-0.140625 0 -0.140625 -0.140625l0 -3.796875q0 -0.53125 -0.265625 -0.8125q-0.25 -0.296875 -0.75 -0.296875q-0.4375 0 -0.8125 0.203125q-0.359375 0.203125 -0.71875 0.515625q-0.078125 0.09375 -0.109375 0.15625q-0.03125 0.0625 -0.03125 0.15625l0 3.84375q0 0.171875 -0.171875 0.171875l-0.59375 0q-0.140625 0 -0.140625 -0.140625l0 -3.796875q0 -1.109375 -1.015625 -1.109375q-0.421875 0 -0.78125 0.203125q-0.359375 0.1875 -0.890625 0.65625l0 4.03125q0 0.078125 -0.046875 0.125q-0.03125 0.03125 -0.109375 0.03125l-0.59375 0zm10.248413 -5.640625q0.140625 0 0.140625 0.15625l0 0.4375q0 0.109375 0.0625 0.109375q0.03125 0 0.078125 -0.0625q0.21875 -0.21875 0.390625 -0.359375q0.171875 -0.140625 0.5 -0.265625q0.328125 -0.125 0.78125 -0.125q0.671875 0 1.203125 0.328125q0.53125 0.3125 0.828125 0.953125q0.296875 0.625 0.296875 1.5625q0 0.9375 -0.296875 1.625q-0.296875 0.671875 -0.859375 1.03125q-0.546875 0.359375 -1.28125 0.359375q-0.890625 0 -1.515625 -0.53125q-0.078125 -0.078125 -0.125 -0.078125q-0.046875 0 -0.046875 0.140625l0 1.984375q0 0.140625 -0.125 0.140625l-0.65625 0q-0.109375 0 -0.109375 -0.140625l0 -7.109375q0 -0.078125 0.03125 -0.109375q0.03125 -0.046875 0.125 -0.046875l0.578125 0zm0.15625 4.390625q0.34375 0.359375 0.6875 0.53125q0.34375 0.171875 0.765625 0.171875q0.796875 0 1.28125 -0.609375q0.484375 -0.609375 0.484375 -1.75q0 -1.09375 -0.484375 -1.640625q-0.484375 -0.5625 -1.234375 -0.5625q-0.421875 0 -0.765625 0.1875q-0.34375 0.1875 -0.546875 0.484375q-0.1875 0.28125 -0.1875 0.5625l0 2.625zm6.4087524 -5.609375q0 0.109375 -0.046875 0.15625q-0.046875 0.046875 -0.15625 0.046875l-0.609375 0q-0.171875 0 -0.171875 -0.1875l0 -0.890625q0 -0.171875 0.15625 -0.171875l0.671875 0q0.0625 0 0.109375 0.046875q0.046875 0.03125 0.046875 0.109375l0 0.890625zm-0.046875 6.671875q0 0.109375 -0.046875 0.15625q-0.046875 0.03125 -0.140625 0.03125l-0.546875 0q-0.09375 0 -0.125 -0.03125q-0.03125 -0.03125 -0.03125 -0.125l0 -5.34375q0 -0.140625 0.125 -0.140625l0.640625 0q0.125 0 0.125 0.125l0 5.328125zm2.546875 0q0 0.109375 -0.046875 0.15625q-0.03125 0.03125 -0.140625 0.03125l-0.546875 0q-0.09375 0 -0.125 -0.03125q-0.03125 -0.03125 -0.03125 -0.125l0 -7.609375q0 -0.140625 0.125 -0.140625l0.640625 0q0.125 0 0.125 0.140625l0 7.578125zm2.25 -2.28125q0 0.515625 0.25 0.953125q0.25 0.421875 0.671875 0.6875q0.421875 0.25 0.9375 0.25q1.0625 0 1.65625 -0.875q0.046875 -0.046875 0.078125 -0.046875q0.03125 -0.015625 0.078125 0.015625l0.453125 0.21875q0.078125 0.046875 0.015625 0.140625q-0.421875 0.640625 -1.0 0.9375q-0.5625 0.296875 -1.359375 0.296875q-0.78125 0 -1.40625 -0.359375q-0.609375 -0.375 -0.96875 -1.015625q-0.34375 -0.65625 -0.34375 -1.5q0 -0.90625 0.34375 -1.578125q0.359375 -0.6875 0.96875 -1.046875q0.625 -0.359375 1.390625 -0.359375q0.765625 0 1.34375 0.34375q0.578125 0.328125 0.890625 0.984375q0.328125 0.65625 0.328125 1.5625l0 0.03125q0 0.09375 -0.03125 0.15625q-0.03125 0.046875 -0.125 0.046875l-4.078125 0q-0.09375 0 -0.09375 0.15625zm3.25 -0.75q0.125 0 0.15625 -0.015625q0.03125 -0.03125 0.03125 -0.140625q0 -0.46875 -0.203125 -0.859375q-0.1875 -0.40625 -0.578125 -0.640625q-0.375 -0.234375 -0.875 -0.234375q-0.53125 0 -0.9375 0.265625q-0.40625 0.265625 -0.625 0.703125q-0.21875 0.4375 -0.203125 0.921875l3.234375 0zm6.36322 3.21875q-0.15625 0 -0.15625 -0.15625l0 -0.453125q0 -0.09375 -0.046875 -0.09375q-0.03125 0 -0.09375 0.046875q-0.3125 0.328125 -0.703125 0.546875q-0.375 0.21875 -0.96875 0.21875q-0.6875 0 -1.21875 -0.3125q-0.53125 -0.328125 -0.84375 -0.96875q-0.296875 -0.65625 -0.296875 -1.5625q0 -0.90625 0.3125 -1.578125q0.328125 -0.6875 0.890625 -1.0625q0.5625 -0.375 1.28125 -0.375q0.484375 0 0.828125 0.15625q0.359375 0.140625 0.671875 0.40625q0.078125 0.0625 0.109375 0.0625q0.0625 0 0.0625 -0.140625l0 -2.5q0 -0.140625 0.109375 -0.140625l0.65625 0q0.109375 0 0.109375 0.140625l0 7.59375q0 0.09375 -0.03125 0.140625q-0.03125 0.03125 -0.140625 0.03125l-0.53125 0zm-0.1875 -4.40625q-0.34375 -0.328125 -0.6875 -0.5q-0.34375 -0.1875 -0.75 -0.1875q-0.8125 0 -1.3125 0.609375q-0.484375 0.609375 -0.484375 1.71875q0 1.109375 0.484375 1.671875q0.484375 0.546875 1.25 0.546875q0.40625 0 0.75 -0.1875q0.359375 -0.203125 0.546875 -0.5q0.203125 -0.296875 0.203125 -0.59375l0 -2.578125z" fill-rule="nonzero"/><path fill="#eeeeee" d="m463.01575 47.340252l166.36218 0l0 49.82677l-166.36218 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m463.01575 47.340252l166.36218 0l0 49.82677l-166.36218 0z" fill-rule="evenodd"/><path fill="#000000" d="m490.04727 79.17364q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm11.676514 -4.328125q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0zm9.839264 4.453125q-1.4375 1.375 -3.328125 1.375q-1.453125 0 -2.28125 -0.734375q-0.828125 -0.734375 -0.828125 -1.96875q0 -1.5 1.25 -2.359375q1.265625 -0.859375 3.65625 -1.0l1.453125 -0.109375q0.3125 -0.046875 0.3125 -0.28125l0 -0.5q0 -1.015625 -0.625 -1.59375q-0.625 -0.59375 -1.6875 -0.59375q-1.640625 0 -2.6875 1.484375q-0.046875 0.09375 -0.109375 0.125q-0.0625 0.03125 -0.140625 0l-1.015625 -0.34375q-0.09375 -0.03125 -0.09375 -0.125q0 -0.0625 0.0625 -0.171875q0.546875 -0.984375 1.578125 -1.53125q1.046875 -0.5625 2.46875 -0.5625q1.828125 0 2.796875 0.859375q0.96875 0.84375 0.96875 2.328125l0 6.609375q0 0.171875 -0.0625 0.234375q-0.046875 0.046875 -0.203125 0.046875l-0.921875 0q-0.234375 0 -0.265625 -0.296875l-0.046875 -0.859375q-0.015625 -0.125 -0.09375 -0.125q-0.0625 0 -0.15625 0.09375zm0.234375 -3.546875q0 -0.296875 -0.28125 -0.296875l-1.203125 0.109375q-1.734375 0.109375 -2.6875 0.671875q-0.9375 0.5625 -0.9375 1.546875q0 0.796875 0.5625 1.265625q0.578125 0.46875 1.53125 0.46875q0.578125 0 1.125 -0.203125q0.5625 -0.203125 1.0 -0.5625q0.421875 -0.34375 0.65625 -0.71875q0.234375 -0.375 0.234375 -0.734375l0 -1.546875zm4.504883 4.734375q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.078125 0q0.203125 0 0.203125 0.203125l0 1.21875q0 0.109375 0.0625 0.125q0.078125 0.015625 0.15625 -0.0625q1.40625 -1.671875 2.890625 -1.671875q0.640625 0 0.640625 0.25l0 1.109375q0 0.1875 -0.15625 0.15625q-0.34375 -0.0625 -0.84375 -0.0625q-0.546875 0 -1.1875 0.328125q-0.625 0.3125 -1.0625 0.8125q-0.421875 0.5 -0.421875 1.03125l0 6.171875q0 0.28125 -0.28125 0.28125l-1.015625 0zm10.368652 -4.578125q0 0.265625 -0.3125 0.265625l-4.234375 0q-0.140625 0 -0.203125 -0.046875q-0.046875 -0.046875 -0.046875 -0.171875l0 -0.828125q0 -0.203125 0.171875 -0.203125l4.4375 -0.015625q0.1875 0 0.1875 0.1875l0 0.8125zm2.8892822 4.578125q-0.171875 0 -0.234375 -0.0625q-0.0625 -0.0625 -0.0625 -0.234375l0 -13.28125q0 -0.265625 0.21875 -0.265625l1.15625 0q0.1875 0 0.1875 0.265625l0 4.5625q0 0.203125 0.09375 0.203125q0.0625 0 0.1875 -0.09375q1.25 -1.171875 2.984375 -1.171875q1.96875 0 2.984375 1.421875q1.015625 1.40625 1.015625 3.65625q0 2.40625 -1.140625 3.796875q-1.125 1.390625 -3.125 1.390625q-1.125 0 -1.875 -0.453125q-0.75 -0.46875 -1.15625 -1.015625q-0.0625 -0.078125 -0.109375 -0.078125q-0.078125 0 -0.09375 0.125l-0.09375 0.9375q-0.046875 0.171875 -0.109375 0.234375q-0.0625 0.0625 -0.234375 0.0625l-0.59375 0zm1.265625 -3.34375q0 0.65625 0.375 1.21875q0.390625 0.546875 1.0 0.875q0.625 0.3125 1.296875 0.3125q1.34375 0 2.15625 -1.0q0.8125 -1.015625 0.8125 -3.03125q0 -1.890625 -0.734375 -2.921875q-0.71875 -1.046875 -2.109375 -1.046875q-0.828125 0 -1.546875 0.375q-0.71875 0.375 -1.25 1.0l0 4.21875zm11.253235 -8.671875q0 0.1875 -0.078125 0.28125q-0.078125 0.078125 -0.25 0.078125l-1.09375 0q-0.28125 0 -0.28125 -0.328125l0 -1.5625q0 -0.296875 0.265625 -0.296875l1.171875 0q0.109375 0 0.1875 0.078125q0.078125 0.078125 0.078125 0.203125l0 1.546875zm-0.078125 11.703125q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.953125 0q-0.171875 0 -0.234375 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0 -9.359375q0 -0.265625 0.21875 -0.265625l1.140625 0q0.203125 0 0.203125 0.25l0 9.328125zm3.1619873 0.3125q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm17.660889 0q-0.265625 0 -0.265625 -0.265625l0 -0.796875q0 -0.171875 -0.09375 -0.171875q-0.046875 0 -0.140625 0.09375q-0.5625 0.5625 -1.234375 0.953125q-0.65625 0.375 -1.703125 0.375q-1.1875 0 -2.125 -0.5625q-0.921875 -0.5625 -1.46875 -1.6875q-0.546875 -1.125 -0.546875 -2.734375q0 -1.5625 0.5625 -2.75q0.5625 -1.203125 1.546875 -1.859375q1.0 -0.671875 2.265625 -0.671875q0.828125 0 1.4375 0.265625q0.625 0.265625 1.171875 0.734375q0.140625 0.109375 0.203125 0.109375q0.09375 0 0.09375 -0.25l0 -4.375q0 -0.25 0.203125 -0.25l1.140625 0q0.203125 0 0.203125 0.25l0 13.296875q0 0.171875 -0.0625 0.234375q-0.046875 0.0625 -0.234375 0.0625l-0.953125 0zm-0.3125 -7.703125q-0.59375 -0.59375 -1.203125 -0.90625q-0.609375 -0.3125 -1.3125 -0.3125q-1.421875 0 -2.28125 1.0625q-0.859375 1.0625 -0.859375 3.015625q0 1.953125 0.84375 2.921875q0.859375 0.96875 2.171875 0.96875q0.734375 0 1.34375 -0.34375q0.609375 -0.34375 0.953125 -0.859375q0.34375 -0.53125 0.34375 -1.046875l0 -4.5zm13.393799 -2.359375q0.359375 0 0.359375 0.3125l0 0.640625q0 0.1875 -0.09375 0.28125q-0.078125 0.078125 -0.28125 0.0625q-0.625 0 -0.96875 0.171875q-0.453125 0.1875 -0.375 0.421875q0.015625 0.078125 0.109375 0.28125q0.09375 0.203125 0.140625 0.453125q0.0625 0.25 0.0625 0.53125q0 1.328125 -1.046875 2.171875q-1.03125 0.828125 -3.0 0.828125q-1.328125 0 -1.90625 0.234375q-0.578125 0.21875 -0.578125 0.578125q0 0.28125 0.390625 0.421875q0.390625 0.140625 1.3125 0.1875l2.40625 0.140625q1.59375 0.09375 2.375 0.765625q0.796875 0.65625 0.796875 1.828125q0 1.40625 -1.25 2.203125q-1.234375 0.8125 -3.53125 0.8125q-2.375 0 -3.609375 -0.6875q-1.234375 -0.671875 -1.234375 -1.9375q0 -1.25 1.75 -2.109375q0.203125 -0.09375 0 -0.203125q-0.859375 -0.375 -0.859375 -1.109375q0 -0.40625 0.375 -0.78125q0.390625 -0.375 1.09375 -0.609375q0.09375 -0.03125 0.09375 -0.09375q0 -0.09375 -0.09375 -0.140625q-0.8125 -0.421875 -1.203125 -1.03125q-0.390625 -0.609375 -0.390625 -1.46875q0 -1.453125 1.09375 -2.28125q1.109375 -0.84375 3.109375 -0.84375q1.78125 0 2.8125 0.828125q0.125 0.09375 0.171875 0.09375q0.078125 0 0.21875 -0.09375q0.34375 -0.34375 0.8125 -0.59375q0.484375 -0.265625 0.9375 -0.265625zm-5.09375 5.171875q1.28125 0 1.921875 -0.515625q0.65625 -0.53125 0.65625 -1.515625q0 -1.0 -0.65625 -1.5625q-0.65625 -0.5625 -1.921875 -0.5625q-1.234375 0 -1.921875 0.578125q-0.6875 0.5625 -0.6875 1.546875q0 0.96875 0.671875 1.5q0.6875 0.53125 1.9375 0.53125zm-1.640625 3.671875q-0.34375 -0.015625 -0.78125 0.203125q-0.421875 0.21875 -0.71875 0.609375q-0.296875 0.390625 -0.296875 0.859375q0 0.890625 0.90625 1.359375q0.921875 0.484375 2.71875 0.484375q3.15625 0 3.15625 -1.875q0 -0.640625 -0.4375 -1.015625q-0.4375 -0.375 -1.4375 -0.4375l-3.109375 -0.1875zm9.925476 -3.109375q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0zm4.3549194 5.640625q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m457.25198 152.17336l175.99997 0l0 49.826782l-175.99997 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m457.25198 152.17336l175.99997 0l0 49.826782l-175.99997 0z" fill-rule="evenodd"/><path fill="#000000" d="m478.29105 184.00674q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm11.676514 -4.328125q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0zm9.839264 4.453125q-1.4375 1.375 -3.328125 1.375q-1.453125 0 -2.28125 -0.734375q-0.828125 -0.734375 -0.828125 -1.96875q0 -1.5 1.25 -2.359375q1.265625 -0.859375 3.65625 -1.0l1.453125 -0.109375q0.3125 -0.046875 0.3125 -0.28125l0 -0.5q0 -1.015625 -0.625 -1.59375q-0.625 -0.59375 -1.6875 -0.59375q-1.640625 0 -2.6875 1.484375q-0.046875 0.09375 -0.109375 0.125q-0.0625 0.03125 -0.140625 0l-1.015625 -0.34375q-0.09375 -0.03125 -0.09375 -0.125q0 -0.0625 0.0625 -0.171875q0.546875 -0.984375 1.578125 -1.53125q1.046875 -0.5625 2.46875 -0.5625q1.828125 0 2.796875 0.859375q0.96875 0.84375 0.96875 2.328125l0 6.609375q0 0.171875 -0.0625 0.234375q-0.046875 0.046875 -0.203125 0.046875l-0.921875 0q-0.234375 0 -0.265625 -0.296875l-0.046875 -0.859375q-0.015625 -0.125 -0.09375 -0.125q-0.0625 0 -0.15625 0.09375zm0.234375 -3.546875q0 -0.296875 -0.28125 -0.296875l-1.203125 0.109375q-1.734375 0.109375 -2.6875 0.671875q-0.9375 0.5625 -0.9375 1.546875q0 0.796875 0.5625 1.265625q0.578125 0.46875 1.53125 0.46875q0.578125 0 1.125 -0.203125q0.5625 -0.203125 1.0 -0.5625q0.421875 -0.34375 0.65625 -0.71875q0.234375 -0.375 0.234375 -0.734375l0 -1.546875zm4.504883 4.734375q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.078125 0q0.203125 0 0.203125 0.203125l0 1.21875q0 0.109375 0.0625 0.125q0.078125 0.015625 0.15625 -0.0625q1.40625 -1.671875 2.890625 -1.671875q0.640625 0 0.640625 0.25l0 1.109375q0 0.1875 -0.15625 0.15625q-0.34375 -0.0625 -0.84375 -0.0625q-0.546875 0 -1.1875 0.328125q-0.625 0.3125 -1.0625 0.8125q-0.421875 0.5 -0.421875 1.03125l0 6.171875q0 0.28125 -0.28125 0.28125l-1.015625 0zm10.368652 -4.578125q0 0.265625 -0.3125 0.265625l-4.234375 0q-0.140625 0 -0.203125 -0.046875q-0.046875 -0.046875 -0.046875 -0.171875l0 -0.828125q0 -0.203125 0.171875 -0.203125l4.4375 -0.015625q0.1875 0 0.1875 0.1875l0 0.8125zm2.8580322 4.578125q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.078125 0q0.203125 0 0.203125 0.203125l0 1.21875q0 0.109375 0.0625 0.125q0.078125 0.015625 0.15625 -0.0625q1.40625 -1.671875 2.890625 -1.671875q0.640625 0 0.640625 0.25l0 1.109375q0 0.1875 -0.15625 0.15625q-0.34375 -0.0625 -0.84375 -0.0625q-0.546875 0 -1.1875 0.328125q-0.625 0.3125 -1.0625 0.8125q-0.421875 0.5 -0.421875 1.03125l0 6.171875q0 0.28125 -0.28125 0.28125l-1.015625 0zm10.239136 -1.046875q0.765625 0 1.5 -0.421875q0.734375 -0.421875 1.5 -1.203125l0 -6.953125q0 -0.265625 0.296875 -0.265625l1.03125 0q0.265625 0 0.265625 0.265625l-0.046875 9.375q0 0.25 -0.203125 0.25l-1.078125 0q-0.203125 0 -0.203125 -0.203125l0 -1.109375q0 -0.21875 -0.171875 -0.046875q-1.015625 0.859375 -1.796875 1.203125q-0.78125 0.34375 -1.59375 0.34375q-1.3125 0 -2.15625 -0.78125q-0.828125 -0.78125 -0.828125 -2.078125l0 -6.9375q0 -0.28125 0.265625 -0.28125l1.046875 0q0.25 0 0.25 0.265625l0 6.546875q0 0.9375 0.515625 1.484375q0.515625 0.546875 1.40625 0.546875zm7.708191 1.046875q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.203125 0 0.203125 0.203125l0 1.09375q0 0.203125 0.171875 0.046875q1.03125 -0.8125 1.765625 -1.171875q0.75 -0.359375 1.65625 -0.359375q1.421875 0 2.21875 0.765625q0.796875 0.765625 0.796875 2.0625l0 6.953125q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -0.921875 -0.484375 -1.421875q-0.46875 -0.515625 -1.453125 -0.515625q-0.78125 0 -1.453125 0.34375q-0.65625 0.34375 -1.609375 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm13.239014 -8.734375q-0.140625 0 -0.140625 0.171875l0 5.90625q0 0.84375 0.265625 1.171875q0.28125 0.3125 0.921875 0.3125l1.28125 0q0.203125 0 0.203125 0.203125l-0.015625 0.640625q0 0.171875 -0.21875 0.234375q-0.484375 0.09375 -1.75 0.09375q-1.171875 0 -1.71875 -0.546875q-0.546875 -0.546875 -0.546875 -1.75l0 -6.234375q0 -0.203125 -0.1875 -0.203125l-1.484375 0q-0.203125 0 -0.203125 -0.1875l0 -0.78125q0 -0.1875 0.1875 -0.1875l1.578125 0q0.125 0 0.125 -0.140625l0.21875 -2.96875q0 -0.25 0.203125 -0.25l0.921875 0q0.234375 0 0.234375 0.265625l0 2.953125q0 0.140625 0.140625 0.140625l2.359375 0q0.203125 0 0.203125 0.171875l0 0.796875q0 0.1875 -0.203125 0.1875l-2.375 0zm6.2512207 -3.28125q0 0.1875 -0.078125 0.28125q-0.078125 0.078125 -0.25 0.078125l-1.09375 0q-0.28125 0 -0.28125 -0.328125l0 -1.5625q0 -0.296875 0.265625 -0.296875l1.171875 0q0.109375 0 0.1875 0.078125q0.078125 0.078125 0.078125 0.203125l0 1.546875zm-0.078125 11.703125q0 0.1875 -0.078125 0.25q-0.0625 0.0625 -0.25 0.0625l-0.953125 0q-0.171875 0 -0.234375 -0.046875q-0.046875 -0.0625 -0.046875 -0.21875l0 -9.359375q0 -0.265625 0.21875 -0.265625l1.140625 0q0.203125 0 0.203125 0.25l0 9.328125zm3.1619873 0.3125q-0.265625 0 -0.265625 -0.25l0 -9.390625q0 -0.25 0.203125 -0.25l1.125 0q0.1875 0 0.1875 0.203125l0 1.09375q0 0.21875 0.1875 0.046875q1.0 -0.8125 1.703125 -1.171875q0.71875 -0.359375 1.59375 -0.359375q1.046875 0 1.71875 0.46875q0.6875 0.46875 0.921875 1.171875q0.046875 0.0625 0.078125 0.0625q0.0625 0 0.1875 -0.09375q0.96875 -0.828125 1.734375 -1.21875q0.78125 -0.390625 1.640625 -0.390625q1.34375 0 2.09375 0.765625q0.765625 0.765625 0.765625 2.078125l0 6.9375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.234375 0 -0.234375 -0.25l0 -6.65625q0 -0.921875 -0.453125 -1.421875q-0.453125 -0.515625 -1.34375 -0.515625q-0.75 0 -1.40625 0.375q-0.640625 0.359375 -1.265625 0.890625q-0.140625 0.15625 -0.203125 0.265625q-0.046875 0.109375 -0.046875 0.28125l0 6.734375q0 0.296875 -0.28125 0.296875l-1.046875 0q-0.25 0 -0.25 -0.25l0 -6.65625q0 -1.9375 -1.78125 -1.9375q-0.75 0 -1.375 0.34375q-0.625 0.34375 -1.5625 1.171875l0 7.046875q0 0.15625 -0.0625 0.21875q-0.0625 0.0625 -0.21875 0.0625l-1.015625 0zm17.683777 -4.328125q0 0.890625 0.4375 1.65625q0.4375 0.765625 1.171875 1.21875q0.75 0.453125 1.65625 0.453125q1.859375 0 2.90625 -1.5625q0.078125 -0.0625 0.125 -0.078125q0.0625 -0.015625 0.140625 0.03125l0.78125 0.390625q0.140625 0.09375 0.03125 0.265625q-0.71875 1.109375 -1.734375 1.625q-1.0 0.515625 -2.40625 0.515625q-1.359375 0 -2.4375 -0.625q-1.078125 -0.640625 -1.6875 -1.78125q-0.609375 -1.15625 -0.609375 -2.625q0 -1.59375 0.609375 -2.78125q0.625 -1.1875 1.6875 -1.8125q1.078125 -0.640625 2.421875 -0.640625q1.34375 0 2.359375 0.609375q1.015625 0.59375 1.578125 1.75q0.5625 1.140625 0.5625 2.703125l0 0.078125q0 0.15625 -0.0625 0.25q-0.046875 0.078125 -0.21875 0.078125l-7.140625 0q-0.171875 0 -0.171875 0.28125zm5.703125 -1.3125q0.203125 0 0.25 -0.046875q0.0625 -0.046875 0.0625 -0.203125q0 -0.828125 -0.34375 -1.515625q-0.34375 -0.703125 -1.0 -1.125q-0.65625 -0.421875 -1.546875 -0.421875q-0.9375 0 -1.65625 0.484375q-0.703125 0.46875 -1.078125 1.21875q-0.375 0.75 -0.359375 1.609375l5.671875 0zm8.604919 1.0625q0 0.265625 -0.3125 0.265625l-4.234375 0q-0.140625 0 -0.203125 -0.046875q-0.046875 -0.046875 -0.046875 -0.171875l0 -0.828125q0 -0.203125 0.171875 -0.203125l4.4375 -0.015625q0.1875 0 0.1875 0.1875l0 0.8125zm5.201782 -4.15625q-0.140625 0 -0.140625 0.171875l0 5.90625q0 0.84375 0.265625 1.171875q0.28125 0.3125 0.921875 0.3125l1.28125 0q0.203125 0 0.203125 0.203125l-0.015625 0.640625q0 0.171875 -0.21875 0.234375q-0.484375 0.09375 -1.75 0.09375q-1.171875 0 -1.71875 -0.546875q-0.546875 -0.546875 -0.546875 -1.75l0 -6.234375q0 -0.203125 -0.1875 -0.203125l-1.484375 0q-0.203125 0 -0.203125 -0.1875l0 -0.78125q0 -0.1875 0.1875 -0.1875l1.578125 0q0.125 0 0.125 -0.140625l0.21875 -2.96875q0 -0.25 0.203125 -0.25l0.921875 0q0.234375 0 0.234375 0.265625l0 2.953125q0 0.140625 0.140625 0.140625l2.359375 0q0.203125 0 0.203125 0.171875l0 0.796875q0 0.1875 -0.203125 0.1875l-2.375 0zm10.548096 1.03125q-0.390625 -0.578125 -1.078125 -0.921875q-0.6875 -0.34375 -1.578125 -0.34375q-1.03125 0 -1.6875 0.4375q-0.640625 0.4375 -0.640625 1.140625q0 0.4375 0.328125 0.78125q0.328125 0.34375 1.1875 0.609375l2.359375 0.703125q1.234375 0.328125 1.828125 1.0q0.59375 0.65625 0.59375 1.578125q0 0.859375 -0.515625 1.515625q-0.515625 0.65625 -1.4375 1.03125q-0.90625 0.359375 -2.0625 0.359375q-1.4375 0 -2.5625 -0.5625q-1.125 -0.578125 -1.59375 -1.484375q-0.046875 -0.09375 -0.046875 -0.15625q0 -0.09375 0.09375 -0.15625l0.71875 -0.40625q0.1875 -0.109375 0.28125 0.015625q1.015625 1.609375 3.125 1.609375q1.09375 -0.015625 1.8125 -0.453125q0.71875 -0.4375 0.71875 -1.15625q0 -0.515625 -0.4375 -0.859375q-0.421875 -0.359375 -1.390625 -0.640625l-1.921875 -0.546875q-1.359375 -0.359375 -1.953125 -0.984375q-0.578125 -0.640625 -0.578125 -1.546875q0 -0.859375 0.46875 -1.53125q0.484375 -0.671875 1.34375 -1.03125q0.875 -0.375 1.984375 -0.375q1.234375 0 2.203125 0.46875q0.984375 0.46875 1.515625 1.265625q0.125 0.1875 -0.015625 0.265625l-0.78125 0.421875q-0.078125 0.046875 -0.125 0.046875q-0.0625 0 -0.15625 -0.09375z" fill-rule="nonzero"/><path fill="#eeeeee" d="m142.30708 13.212746l206.42519 0l0 95.43307l-206.42519 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m142.30708 13.212746l206.42519 0l0 95.43307l-206.42519 0z" fill-rule="evenodd"/><path fill="#000000" d="m185.32753 25.30962q0 -0.109375 0.03125 -0.140625q0.03125 -0.046875 0.125 -0.046875l5.984375 0q0.140625 0 0.140625 0.140625l0 0.6875q0 0.15625 -0.1875 0.15625l-4.640625 0q-0.109375 0 -0.140625 0.03125q-0.03125 0.03125 -0.03125 0.125l0 3.125q0 0.140625 0.140625 0.140625l3.453125 0q0.140625 0 0.140625 0.15625l0 0.703125q0 0.125 -0.140625 0.125l-3.453125 0q-0.140625 0 -0.140625 0.140625l0 3.234375q0 0.078125 0.015625 0.109375q0.03125 0.03125 0.109375 0.03125l4.890625 0q0.078125 0 0.109375 0.03125q0.046875 0.015625 0.046875 0.09375l0 0.71875q0 0.140625 -0.15625 0.140625l-6.109375 0q-0.109375 0 -0.15625 -0.03125q-0.03125 -0.046875 -0.03125 -0.15625l0 -9.515625zm15.745026 -0.1875q0.09375 0 0.125 0.0625q0.046875 0.0625 0.015625 0.125l-3.375 9.5q-0.046875 0.109375 -0.109375 0.15625q-0.0625 0.046875 -0.1875 0.046875l-0.90625 0q-0.265625 0 -0.3125 -0.1875l-3.3125 -9.5q-0.015625 -0.03125 -0.015625 -0.0625q0 -0.140625 0.171875 -0.140625l0.90625 0q0.171875 0 0.234375 0.15625l2.765625 8.078125q0.046875 0.125 0.09375 0.125q0.0625 0 0.109375 -0.140625l2.8125 -8.078125q0.046875 -0.140625 0.203125 -0.140625l0.78125 0zm2.235443 9.890625q-0.1875 0 -0.1875 -0.203125l0 -9.5q0 -0.109375 0.03125 -0.140625q0.03125 -0.046875 0.125 -0.046875l1.28125 0q0.109375 0 0.15625 0.03125q0.046875 0.03125 0.0625 0.109375l2.96875 7.640625q0.03125 0.125 0.09375 0.125q0.0625 0 0.109375 -0.140625l2.96875 -7.59375q0.03125 -0.171875 0.203125 -0.171875l1.34375 0q0.140625 0 0.140625 0.171875l0 9.515625q0 0.203125 -0.203125 0.203125l-0.875 0q-0.203125 0 -0.203125 -0.171875l0 -7.625q0 -0.0625 -0.015625 -0.046875q-0.015625 0 -0.046875 0.046875l-2.9375 7.625q-0.078125 0.171875 -0.25 0.171875l-0.640625 0q-0.203125 0 -0.265625 -0.15625l-2.890625 -7.5625q-0.015625 -0.0625 -0.046875 -0.0625q-0.015625 0 -0.015625 0.0625l0 7.546875q0 0.09375 -0.046875 0.140625q-0.03125 0.03125 -0.140625 0.03125l-0.71875 0zm23.518906 -7.0625q0.078125 0 0.109375 0.0625q0.046875 0.0625 0.03125 0.125l-2.046875 6.703125q-0.046875 0.171875 -0.25 0.171875l-0.640625 0q-0.234375 0 -0.28125 -0.171875l-1.59375 -4.984375q-0.03125 -0.125 -0.09375 -0.125q-0.015625 0 -0.0625 0.125l-1.5 4.984375q-0.0625 0.171875 -0.25 0.171875l-0.6875 0q-0.21875 0 -0.28125 -0.171875l-2.09375 -6.6875q-0.015625 -0.03125 -0.015625 -0.078125q0 -0.125 0.171875 -0.125l0.78125 0q0.140625 0 0.21875 0.140625l1.578125 5.1875q0.046875 0.140625 0.09375 0.140625q0.046875 0 0.109375 -0.15625l1.578125 -5.1875q0.03125 -0.125 0.1875 -0.125l0.625 0q0.15625 0 0.1875 0.140625l1.640625 5.1875q0.046875 0.140625 0.09375 0.140625q0.0625 0 0.09375 -0.15625l1.53125 -5.171875q0.078125 -0.140625 0.234375 -0.140625l0.53125 0zm1.7653961 7.0625q-0.1875 0 -0.1875 -0.171875l0 -6.71875q0 -0.171875 0.140625 -0.171875l0.78125 0q0.140625 0 0.140625 0.140625l0 0.875q0 0.078125 0.046875 0.09375q0.046875 0.015625 0.09375 -0.0625q1.015625 -1.1875 2.078125 -1.1875q0.453125 0 0.453125 0.171875l0 0.8125q0 0.125 -0.109375 0.09375q-0.25 -0.03125 -0.609375 -0.03125q-0.375 0 -0.828125 0.234375q-0.453125 0.21875 -0.765625 0.578125q-0.3125 0.359375 -0.3125 0.734375l0 4.40625q0 0.203125 -0.1875 0.203125l-0.734375 0zm6.089035 -8.578125q0 0.125 -0.0625 0.1875q-0.046875 0.0625 -0.1875 0.0625l-0.765625 0q-0.203125 0 -0.203125 -0.234375l0 -1.109375q0 -0.21875 0.1875 -0.21875l0.84375 0q0.078125 0 0.125 0.0625q0.0625 0.046875 0.0625 0.140625l0 1.109375zm-0.0625 8.34375q0 0.140625 -0.046875 0.1875q-0.046875 0.046875 -0.1875 0.046875l-0.6875 0q-0.109375 0 -0.15625 -0.03125q-0.03125 -0.046875 -0.03125 -0.15625l0 -6.6875q0 -0.1875 0.15625 -0.1875l0.8125 0q0.140625 0 0.140625 0.171875l0 6.65625zm3.9354095 -6.0q-0.109375 0 -0.109375 0.109375l0 4.234375q0 0.59375 0.203125 0.828125q0.203125 0.21875 0.65625 0.21875l0.921875 0q0.140625 0 0.140625 0.15625l-0.015625 0.453125q0 0.125 -0.15625 0.171875q-0.34375 0.0625 -1.25 0.0625q-0.84375 0 -1.234375 -0.390625q-0.375 -0.390625 -0.375 -1.25l0 -4.453125q0 -0.140625 -0.140625 -0.140625l-1.0625 0q-0.15625 0 -0.15625 -0.140625l0 -0.5625q0 -0.125 0.140625 -0.125l1.140625 0q0.078125 0 0.078125 -0.109375l0.15625 -2.125q0 -0.171875 0.140625 -0.171875l0.671875 0q0.15625 0 0.15625 0.1875l0 2.109375q0 0.109375 0.109375 0.109375l1.671875 0q0.15625 0 0.15625 0.125l0 0.5625q0 0.140625 -0.15625 0.140625l-1.6875 0zm5.157959 0q-0.109375 0 -0.109375 0.109375l0 4.234375q0 0.59375 0.203125 0.828125q0.203125 0.21875 0.65625 0.21875l0.921875 0q0.140625 0 0.140625 0.15625l-0.015625 0.453125q0 0.125 -0.15625 0.171875q-0.34375 0.0625 -1.25 0.0625q-0.84375 0 -1.234375 -0.390625q-0.375 -0.390625 -0.375 -1.25l0 -4.453125q0 -0.140625 -0.140625 -0.140625l-1.0625 0q-0.15625 0 -0.15625 -0.140625l0 -0.5625q0 -0.125 0.140625 -0.125l1.140625 0q0.078125 0 0.078125 -0.109375l0.15625 -2.125q0 -0.171875 0.140625 -0.171875l0.671875 0q0.15625 0 0.15625 0.1875l0 2.109375q0 0.109375 0.109375 0.109375l1.671875 0q0.15625 0 0.15625 0.125l0 0.5625q0 0.140625 -0.15625 0.140625l-1.6875 0zm3.8596191 3.140625q0 0.640625 0.3125 1.1875q0.328125 0.546875 0.859375 0.875q0.53125 0.3125 1.171875 0.3125q1.328125 0 2.078125 -1.109375q0.046875 -0.046875 0.078125 -0.046875q0.046875 -0.015625 0.109375 0.015625l0.5625 0.265625q0.09375 0.078125 0.015625 0.1875q-0.515625 0.8125 -1.234375 1.1875q-0.71875 0.359375 -1.71875 0.359375q-0.96875 0 -1.75 -0.453125q-0.765625 -0.453125 -1.203125 -1.265625q-0.4375 -0.828125 -0.4375 -1.890625q0 -1.125 0.4375 -1.96875q0.453125 -0.859375 1.21875 -1.3125q0.765625 -0.453125 1.71875 -0.453125q0.953125 0 1.671875 0.4375q0.734375 0.421875 1.140625 1.25q0.40625 0.8125 0.40625 1.9375l0 0.046875q0 0.125 -0.046875 0.1875q-0.03125 0.046875 -0.15625 0.046875l-5.109375 0q-0.125 0 -0.125 0.203125zm4.078125 -0.9375q0.15625 0 0.1875 -0.03125q0.046875 -0.03125 0.046875 -0.15625q0 -0.578125 -0.25 -1.078125q-0.25 -0.5 -0.71875 -0.796875q-0.46875 -0.296875 -1.09375 -0.296875q-0.6875 0 -1.203125 0.34375q-0.5 0.328125 -0.765625 0.875q-0.265625 0.53125 -0.25 1.140625l4.046875 0zm3.1186066 4.03125q-0.1875 0 -0.1875 -0.171875l0 -6.71875q0 -0.171875 0.140625 -0.171875l0.796875 0q0.15625 0 0.15625 0.140625l0 0.78125q0 0.140625 0.109375 0.03125q0.75 -0.578125 1.265625 -0.828125q0.53125 -0.265625 1.1875 -0.265625q1.015625 0 1.578125 0.546875q0.578125 0.546875 0.578125 1.46875l0 4.96875q0 0.21875 -0.203125 0.21875l-0.75 0q-0.171875 0 -0.171875 -0.171875l0 -4.765625q0 -0.65625 -0.34375 -1.015625q-0.34375 -0.359375 -1.046875 -0.359375q-0.5625 0 -1.03125 0.25q-0.46875 0.234375 -1.15625 0.828125l0 5.03125q0 0.109375 -0.046875 0.15625q-0.046875 0.046875 -0.140625 0.046875l-0.734375 0zm11.633514 -8.578125q0 0.125 -0.0625 0.1875q-0.046875 0.0625 -0.1875 0.0625l-0.765625 0q-0.203125 0 -0.203125 -0.234375l0 -1.109375q0 -0.21875 0.1875 -0.21875l0.84375 0q0.078125 0 0.125 0.0625q0.0625 0.046875 0.0625 0.140625l0 1.109375zm-0.0625 8.34375q0 0.140625 -0.046875 0.1875q-0.046875 0.046875 -0.1875 0.046875l-0.6875 0q-0.109375 0 -0.15625 -0.03125q-0.03125 -0.046875 -0.03125 -0.15625l0 -6.6875q0 -0.1875 0.15625 -0.1875l0.8125 0q0.140625 0 0.140625 0.171875l0 6.65625zm2.2635498 0.234375q-0.1875 0 -0.1875 -0.171875l0 -6.71875q0 -0.171875 0.140625 -0.171875l0.796875 0q0.15625 0 0.15625 0.140625l0 0.78125q0 0.140625 0.109375 0.03125q0.75 -0.578125 1.265625 -0.828125q0.53125 -0.265625 1.1875 -0.265625q1.015625 0 1.578125 0.546875q0.578125 0.546875 0.578125 1.46875l0 4.96875q0 0.21875 -0.203125 0.21875l-0.75 0q-0.171875 0 -0.171875 -0.171875l0 -4.765625q0 -0.65625 -0.34375 -1.015625q-0.34375 -0.359375 -1.046875 -0.359375q-0.5625 0 -1.03125 0.25q-0.46875 0.234375 -1.15625 0.828125l0 5.03125q0 0.109375 -0.046875 0.15625q-0.046875 0.046875 -0.140625 0.046875l-0.734375 0zm17.789764 -0.25q0.015625 0.015625 0.015625 0.09375q0 0.15625 -0.171875 0.15625l-0.96875 0q-0.140625 0 -0.203125 -0.15625l-1.734375 -4.203125q-0.03125 -0.078125 -0.109375 -0.109375q-0.0625 -0.046875 -0.203125 -0.046875l-2.25 0q-0.15625 0 -0.15625 0.140625l0 4.15625q0 0.125 -0.046875 0.171875q-0.046875 0.046875 -0.1875 0.046875l-0.859375 0q-0.109375 0 -0.15625 -0.03125q-0.03125 -0.046875 -0.03125 -0.140625l0 -9.53125q0 -0.109375 0.03125 -0.140625q0.03125 -0.046875 0.125 -0.046875l3.71875 0q1.578125 0 2.4375 0.65625q0.875 0.65625 0.875 1.90625q0 1.046875 -0.5625 1.703125q-0.5625 0.640625 -1.375 0.875q-0.0625 0.015625 -0.078125 0.0625q0 0.03125 0.015625 0.078125l1.875 4.359375zm-3.5625 -5.1875q1.1875 0 1.765625 -0.421875q0.59375 -0.4375 0.59375 -1.34375q0 -0.875 -0.515625 -1.3125q-0.515625 -0.4375 -1.53125 -0.4375l-2.34375 0q-0.1875 0 -0.1875 0.140625l0 3.203125q0 0.171875 0.109375 0.171875l2.109375 0zm7.9013367 4.6875q0.546875 0 1.078125 -0.296875q0.53125 -0.296875 1.078125 -0.859375l0 -4.96875q0 -0.1875 0.203125 -0.1875l0.734375 0q0.1875 0 0.1875 0.1875l-0.03125 6.703125q0 0.171875 -0.140625 0.171875l-0.78125 0q-0.140625 0 -0.140625 -0.140625l0 -0.796875q0 -0.15625 -0.125 -0.03125q-0.71875 0.609375 -1.28125 0.859375q-0.546875 0.25 -1.140625 0.25q-0.9375 0 -1.53125 -0.5625q-0.59375 -0.5625 -0.59375 -1.484375l0 -4.953125q0 -0.203125 0.203125 -0.203125l0.734375 0q0.171875 0 0.171875 0.1875l0 4.671875q0 0.671875 0.359375 1.0625q0.375 0.390625 1.015625 0.390625zm9.560699 -4.75q-0.28125 -0.421875 -0.765625 -0.65625q-0.484375 -0.25 -1.125 -0.25q-0.734375 0 -1.203125 0.3125q-0.46875 0.3125 -0.46875 0.8125q0 0.3125 0.234375 0.5625q0.234375 0.234375 0.84375 0.421875l1.703125 0.515625q0.875 0.234375 1.296875 0.71875q0.421875 0.46875 0.421875 1.109375q0 0.625 -0.375 1.09375q-0.359375 0.46875 -1.015625 0.734375q-0.65625 0.265625 -1.484375 0.265625q-1.015625 0 -1.828125 -0.40625q-0.796875 -0.421875 -1.125 -1.0625q-0.046875 -0.078125 -0.046875 -0.109375q0 -0.0625 0.078125 -0.109375l0.515625 -0.296875q0.125 -0.078125 0.203125 0.015625q0.71875 1.140625 2.21875 1.140625q0.78125 0 1.296875 -0.3125q0.515625 -0.3125 0.515625 -0.828125q0 -0.375 -0.3125 -0.625q-0.296875 -0.25 -0.984375 -0.453125l-1.375 -0.390625q-0.984375 -0.25 -1.40625 -0.703125q-0.40625 -0.453125 -0.40625 -1.109375q0 -0.609375 0.328125 -1.078125q0.34375 -0.484375 0.953125 -0.75q0.625 -0.265625 1.4375 -0.265625q0.875 0 1.578125 0.34375q0.703125 0.328125 1.0625 0.90625q0.09375 0.125 0 0.1875l-0.5625 0.296875q-0.0625 0.03125 -0.078125 0.03125q-0.0625 0 -0.125 -0.0625zm4.4489746 -0.734375q-0.109375 0 -0.109375 0.109375l0 4.234375q0 0.59375 0.203125 0.828125q0.203125 0.21875 0.65625 0.21875l0.921875 0q0.140625 0 0.140625 0.15625l-0.015625 0.453125q0 0.125 -0.15625 0.171875q-0.34375 0.0625 -1.25 0.0625q-0.84375 0 -1.234375 -0.390625q-0.375 -0.390625 -0.375 -1.25l0 -4.453125q0 -0.140625 -0.140625 -0.140625l-1.0625 0q-0.15625 0 -0.15625 -0.140625l0 -0.5625q0 -0.125 0.140625 -0.125l1.140625 0q0.078125 0 0.078125 -0.109375l0.15625 -2.125q0 -0.171875 0.140625 -0.171875l0.671875 0q0.15625 0 0.15625 0.1875l0 2.109375q0 0.109375 0.109375 0.109375l1.671875 0q0.15625 0 0.15625 0.125l0 0.5625q0 0.140625 -0.15625 0.140625l-1.6875 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m422.02948 39.14173l13.899658 9.055119l-13.931152 9.055119l0.00970459 -5.564369l-73.23422 0l0.0121154785 -6.9814987l73.23422 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m422.02948 39.14173l13.899658 9.055119l-13.931152 9.055119l0.00970459 -5.564369l-73.23422 0l0.0121154785 -6.9814987l73.23422 0z" fill-rule="evenodd"/><path fill="#000000" fill-opacity="0.0" d="m348.73227 13.212746l85.25986 0l0 29.543308l-85.25986 0z" fill-rule="evenodd"/><path fill="#000000" d="m363.04477 26.015245q-0.6875 -0.796875 -1.8125 -0.796875q-0.796875 0 -1.265625 0.359375q-0.453125 0.34375 -0.453125 0.96875q0 0.828125 1.140625 1.21875l1.546875 0.515625q0.9375 0.296875 1.359375 0.828125q0.421875 0.515625 0.421875 1.25q0 1.03125 -0.765625 1.625q-0.75 0.5781269 -2.0625 0.5781269q-0.953125 0 -1.6875 -0.34375q-0.734375 -0.3437519 -1.1875 -0.9843769q-0.03125 -0.09375 -0.03125 -0.109375q0 -0.078125 0.109375 -0.15625l0.375 -0.265625q0.09375 -0.0625 0.15625 -0.0625q0.0625 0 0.109375 0.0625q0.453125 0.59375 0.90625 0.84375q0.453125 0.234375 1.203125 0.234375q0.890625 0 1.390625 -0.3125q0.5 -0.328125 0.5 -1.0q0 -0.40625 -0.265625 -0.703125q-0.265625 -0.296875 -0.9375 -0.546875l-1.625 -0.5625q-0.84375 -0.28125 -1.25 -0.8125q-0.390625 -0.546875 -0.390625 -1.203125q0 -0.65625 0.328125 -1.15625q0.34375 -0.5 0.953125 -0.765625q0.625 -0.28125 1.421875 -0.28125q0.765625 0 1.40625 0.28125q0.640625 0.28125 1.078125 0.78125q0.0625 0.046875 0.0625 0.09375q0 0.0625 -0.0625 0.109375l-0.484375 0.375q-0.03125 0.03125 -0.0625 0.03125q-0.03125 0 -0.125 -0.09375zm3.080719 0.796875q0.140625 0 0.140625 0.15625l0 0.4375q0 0.109375 0.0625 0.109375q0.03125 0 0.078125 -0.0625q0.21875 -0.21875 0.390625 -0.359375q0.171875 -0.140625 0.5 -0.265625q0.328125 -0.125 0.78125 -0.125q0.671875 0 1.203125 0.328125q0.53125 0.3125 0.828125 0.953125q0.296875 0.625 0.296875 1.5625q0 0.9375 -0.296875 1.625q-0.296875 0.671875 -0.859375 1.0312519q-0.546875 0.359375 -1.28125 0.359375q-0.890625 0 -1.515625 -0.53125q-0.078125 -0.07812691 -0.125 -0.07812691q-0.046875 0 -0.046875 0.1406269l0 1.984375q0 0.140625 -0.125 0.140625l-0.65625 0q-0.109375 0 -0.109375 -0.140625l0 -7.109377q0 -0.078125 0.03125 -0.109375q0.03125 -0.046875 0.125 -0.046875l0.578125 0zm0.15625 4.390625q0.34375 0.359375 0.6875 0.53125q0.34375 0.171875 0.765625 0.171875q0.796875 0 1.28125 -0.609375q0.484375 -0.609375 0.484375 -1.75q0 -1.09375 -0.484375 -1.640625q-0.484375 -0.5625 -1.234375 -0.5625q-0.421875 0 -0.765625 0.1875q-0.34375 0.1875 -0.546875 0.484375q-0.1875 0.28125 -0.1875 0.5625l0 2.625zm6.064972 -1.21875q0 0.515625 0.25 0.953125q0.25 0.421875 0.671875 0.6875q0.421875 0.25 0.9375 0.25q1.0625 0 1.65625 -0.875q0.046875 -0.046875 0.078125 -0.046875q0.03125 -0.015625 0.078125 0.015625l0.453125 0.21875q0.078125 0.046875 0.015625 0.140625q-0.421875 0.640625 -1.0 0.9375019q-0.5625 0.296875 -1.359375 0.296875q-0.78125 0 -1.40625 -0.359375q-0.609375 -0.3750019 -0.96875 -1.0156269q-0.34375 -0.65625 -0.34375 -1.5q0 -0.90625 0.34375 -1.578125q0.359375 -0.6875 0.96875 -1.046875q0.625 -0.359375 1.390625 -0.359375q0.765625 0 1.34375 0.34375q0.578125 0.328125 0.890625 0.984375q0.328125 0.65625 0.328125 1.5625l0 0.03125q0 0.09375 -0.03125 0.15625q-0.03125 0.046875 -0.125 0.046875l-4.078125 0q-0.09375 0 -0.09375 0.15625zm3.25 -0.75q0.125 0 0.15625 -0.015625q0.03125 -0.03125 0.03125 -0.140625q0 -0.46875 -0.203125 -0.859375q-0.1875 -0.40625 -0.578125 -0.640625q-0.375 -0.234375 -0.875 -0.234375q-0.53125 0 -0.9375 0.265625q-0.40625 0.265625 -0.625 0.703125q-0.21875 0.4375 -0.203125 0.921875l3.234375 0zm4.691345 -2.53125q0.765625 0 1.3125 0.359375q0.5625 0.359375 0.890625 0.953125l0.015625 0.09375q0 0.0625 -0.078125 0.078125l-0.578125 0.125l-0.03125 0.015625q-0.0625 0 -0.109375 -0.078125q-0.34375 -0.46875 -0.65625 -0.671875q-0.3125 -0.21875 -0.71875 -0.21875q-0.828125 0 -1.328125 0.609375q-0.484375 0.609375 -0.484375 1.65625q0 1.0625 0.484375 1.671875q0.5 0.609375 1.34375 0.609375q0.5 0 0.875 -0.25q0.390625 -0.25 0.703125 -0.765625q0.03125 -0.046875 0.0625 -0.046875q0.03125 -0.015625 0.0625 0.015625l0.46875 0.171875q0.078125 0.03125 0.046875 0.125q-0.34375 0.625 -0.921875 1.0156269q-0.5625 0.390625 -1.359375 0.390625q-0.78125 0 -1.390625 -0.359375q-0.609375 -0.3750019 -0.953125 -1.0312519q-0.34375 -0.671875 -0.34375 -1.515625q0 -0.859375 0.34375 -1.53125q0.34375 -0.6875 0.953125 -1.046875q0.609375 -0.375 1.390625 -0.375zm4.369507 -1.109375q0 0.109375 -0.046875 0.15625q-0.046875 0.046875 -0.15625 0.046875l-0.609375 0q-0.171875 0 -0.171875 -0.1875l0 -0.890625q0 -0.171875 0.15625 -0.171875l0.671875 0q0.0625 0 0.109375 0.046875q0.046875 0.03125 0.046875 0.109375l0 0.890625zm-0.046875 6.671877q0 0.109375 -0.046875 0.15625q-0.046875 0.03125 -0.140625 0.03125l-0.546875 0q-0.09375 0 -0.125 -0.03125q-0.03125 -0.03125 -0.03125 -0.125l0 -5.343752q0 -0.140625 0.125 -0.140625l0.640625 0q0.125 0 0.125 0.125l0 5.328127zm4.9375 -0.5000019q-0.828125 0.7968769 -1.90625 0.7968769q-0.828125 0 -1.3125 -0.421875q-0.46875 -0.4218769 -0.46875 -1.1250019q0 -0.859375 0.71875 -1.34375q0.71875 -0.484375 2.09375 -0.578125l0.828125 -0.0625q0.171875 -0.015625 0.171875 -0.15625l0 -0.296875q0 -0.5625 -0.359375 -0.890625q-0.34375 -0.34375 -0.953125 -0.34375q-0.9375 0 -1.53125 0.84375q-0.03125 0.0625 -0.0625 0.078125q-0.03125 0.015625 -0.09375 -0.015625l-0.578125 -0.1875q-0.046875 -0.015625 -0.046875 -0.078125q0 -0.03125 0.03125 -0.09375q0.3125 -0.5625 0.90625 -0.875q0.59375 -0.3125 1.40625 -0.3125q1.046875 0 1.59375 0.484375q0.5625 0.484375 0.5625 1.328125l0 3.781252q0 0.09375 -0.03125 0.125q-0.03125 0.03125 -0.125 0.03125l-0.53125 0q-0.125 0 -0.15625 -0.171875l-0.015625 -0.4843769q-0.015625 -0.078125 -0.046875 -0.078125q-0.046875 0 -0.09375 0.046875zm0.125 -2.015625q0 -0.171875 -0.15625 -0.171875l-0.6875 0.0625q-1.0 0.0625 -1.53125 0.390625q-0.53125 0.3125 -0.53125 0.875q0 0.453125 0.3125 0.734375q0.328125 0.265625 0.875 0.265625q0.328125 0 0.640625 -0.109375q0.328125 -0.125 0.578125 -0.328125q0.234375 -0.203125 0.359375 -0.421875q0.140625 -0.21875 0.140625 -0.421875l0 -0.875zm3.3240662 2.515627q0 0.109375 -0.046875 0.15625q-0.03125 0.03125 -0.140625 0.03125l-0.546875 0q-0.09375 0 -0.125 -0.03125q-0.03125 -0.03125 -0.03125 -0.125l0 -7.609377q0 -0.140625 0.125 -0.140625l0.640625 0q0.125 0 0.125 0.140625l0 7.578127zm6.291107 -5.562502q0.765625 0 1.3125 0.359375q0.5625 0.359375 0.890625 0.953125l0.015625 0.09375q0 0.0625 -0.078125 0.078125l-0.578125 0.125l-0.03125 0.015625q-0.0625 0 -0.109375 -0.078125q-0.34375 -0.46875 -0.65625 -0.671875q-0.3125 -0.21875 -0.71875 -0.21875q-0.828125 0 -1.328125 0.609375q-0.484375 0.609375 -0.484375 1.65625q0 1.0625 0.484375 1.671875q0.5 0.609375 1.34375 0.609375q0.5 0 0.875 -0.25q0.390625 -0.25 0.703125 -0.765625q0.03125 -0.046875 0.0625 -0.046875q0.03125 -0.015625 0.0625 0.015625l0.46875 0.171875q0.078125 0.03125 0.046875 0.125q-0.34375 0.625 -0.921875 1.0156269q-0.5625 0.390625 -1.359375 0.390625q-0.78125 0 -1.390625 -0.359375q-0.609375 -0.3750019 -0.953125 -1.0312519q-0.34375 -0.671875 -0.34375 -1.515625q0 -0.859375 0.34375 -1.53125q0.34375 -0.6875 0.953125 -1.046875q0.609375 -0.375 1.390625 -0.375zm6.713257 5.0625q-0.828125 0.7968769 -1.90625 0.7968769q-0.828125 0 -1.3125 -0.421875q-0.46875 -0.4218769 -0.46875 -1.1250019q0 -0.859375 0.71875 -1.34375q0.71875 -0.484375 2.09375 -0.578125l0.828125 -0.0625q0.171875 -0.015625 0.171875 -0.15625l0 -0.296875q0 -0.5625 -0.359375 -0.890625q-0.34375 -0.34375 -0.953125 -0.34375q-0.9375 0 -1.53125 0.84375q-0.03125 0.0625 -0.0625 0.078125q-0.03125 0.015625 -0.09375 -0.015625l-0.578125 -0.1875q-0.046875 -0.015625 -0.046875 -0.078125q0 -0.03125 0.03125 -0.09375q0.3125 -0.5625 0.90625 -0.875q0.59375 -0.3125 1.40625 -0.3125q1.046875 0 1.59375 0.484375q0.5625 0.484375 0.5625 1.328125l0 3.781252q0 0.09375 -0.03125 0.125q-0.03125 0.03125 -0.125 0.03125l-0.53125 0q-0.125 0 -0.15625 -0.171875l-0.015625 -0.4843769q-0.015625 -0.078125 -0.046875 -0.078125q-0.046875 0 -0.09375 0.046875zm0.125 -2.015625q0 -0.171875 -0.15625 -0.171875l-0.6875 0.0625q-1.0 0.0625 -1.53125 0.390625q-0.53125 0.3125 -0.53125 0.875q0 0.453125 0.3125 0.734375q0.328125 0.265625 0.875 0.265625q0.328125 0 0.640625 -0.109375q0.328125 -0.125 0.578125 -0.328125q0.234375 -0.203125 0.359375 -0.421875q0.140625 -0.21875 0.140625 -0.421875l0 -0.875zm5.808441 -1.703125q-0.21875 -0.328125 -0.609375 -0.515625q-0.390625 -0.203125 -0.890625 -0.203125q-0.59375 0 -0.96875 0.25q-0.375 0.25 -0.375 0.65625q0 0.25 0.1875 0.453125q0.1875 0.1875 0.6875 0.328125l1.34375 0.40625q0.703125 0.203125 1.046875 0.578125q0.34375 0.375 0.34375 0.890625q0 0.5 -0.296875 0.875q-0.296875 0.3750019 -0.828125 0.5937519q-0.515625 0.203125 -1.171875 0.203125q-0.828125 0 -1.46875 -0.328125q-0.640625 -0.3281269 -0.90625 -0.8437519q-0.03125 -0.0625 -0.03125 -0.09375q0 -0.046875 0.046875 -0.078125l0.421875 -0.234375q0.109375 -0.0625 0.15625 0.015625q0.578125 0.90625 1.78125 0.90625q0.625 0 1.03125 -0.25q0.421875 -0.265625 0.421875 -0.65625q0 -0.3125 -0.25 -0.5q-0.234375 -0.203125 -0.796875 -0.375l-1.09375 -0.296875q-0.78125 -0.203125 -1.125 -0.5625q-0.328125 -0.375 -0.328125 -0.890625q0 -0.5 0.265625 -0.875q0.28125 -0.390625 0.765625 -0.59375q0.5 -0.203125 1.140625 -0.203125q0.703125 0 1.265625 0.265625q0.5625 0.265625 0.859375 0.71875q0.078125 0.109375 -0.015625 0.15625l-0.4375 0.234375q-0.046875 0.03125 -0.0625 0.03125q-0.046875 0 -0.109375 -0.0625zm2.6748047 1.9375q0 0.515625 0.25 0.953125q0.25 0.421875 0.671875 0.6875q0.421875 0.25 0.9375 0.25q1.0625 0 1.65625 -0.875q0.046875 -0.046875 0.078125 -0.046875q0.03125 -0.015625 0.078125 0.015625l0.453125 0.21875q0.078125 0.046875 0.015625 0.140625q-0.421875 0.640625 -1.0 0.9375019q-0.5625 0.296875 -1.359375 0.296875q-0.78125 0 -1.40625 -0.359375q-0.609375 -0.3750019 -0.96875 -1.0156269q-0.34375 -0.65625 -0.34375 -1.5q0 -0.90625 0.34375 -1.578125q0.359375 -0.6875 0.96875 -1.046875q0.625 -0.359375 1.390625 -0.359375q0.765625 0 1.34375 0.34375q0.578125 0.328125 0.890625 0.984375q0.328125 0.65625 0.328125 1.5625l0 0.03125q0 0.09375 -0.03125 0.15625q-0.03125 0.046875 -0.125 0.046875l-4.078125 0q-0.09375 0 -0.09375 0.15625zm3.25 -0.75q0.125 0 0.15625 -0.015625q0.03125 -0.03125 0.03125 -0.140625q0 -0.46875 -0.203125 -0.859375q-0.1875 -0.40625 -0.578125 -0.640625q-0.375 -0.234375 -0.875 -0.234375q-0.53125 0 -0.9375 0.265625q-0.40625 0.265625 -0.625 0.703125q-0.21875 0.4375 -0.203125 0.921875l3.234375 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m149.26772 57.75762l192.50395 0l0 44.25197l-192.50395 0z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m149.26772 57.75762l192.50395 0l0 44.25197l-192.50395 0z" fill-rule="evenodd"/><path fill="#000000" d="m208.27844 69.8545q0 -0.109375 0.03125 -0.140625q0.03125 -0.046875 0.125 -0.046875l5.984375 0q0.140625 0 0.140625 0.140625l0 0.6875q0 0.15625 -0.1875 0.15625l-4.640625 0q-0.109375 0 -0.140625 0.03125q-0.03125 0.03125 -0.03125 0.125l0 3.125q0 0.140625 0.140625 0.140625l3.453125 0q0.140625 0 0.140625 0.15625l0 0.703125q0 0.125 -0.140625 0.125l-3.453125 0q-0.140625 0 -0.140625 0.140625l0 3.234375q0 0.078125 0.015625 0.109375q0.03125 0.03125 0.109375 0.03125l4.890625 0q0.078125 0 0.109375 0.03125q0.046875 0.015625 0.046875 0.09375l0 0.71875q0 0.140625 -0.15625 0.140625l-6.109375 0q-0.109375 0 -0.15625 -0.03125q-0.03125 -0.046875 -0.03125 -0.15625l0 -9.515625zm9.963776 3.46875q-0.109375 0 -0.109375 0.109375l0 4.234375q0 0.59375 0.203125 0.828125q0.203125 0.21875 0.65625 0.21875l0.921875 0q0.140625 0 0.140625 0.15625l-0.015625 0.453125q0 0.125 -0.15625 0.171875q-0.34375 0.0625 -1.25 0.0625q-0.84375 0 -1.234375 -0.390625q-0.375 -0.390625 -0.375 -1.25l0 -4.453125q0 -0.140625 -0.140625 -0.140625l-1.0625 0q-0.15625 0 -0.15625 -0.140625l0 -0.5625q0 -0.125 0.140625 -0.125l1.140625 0q0.078125 0 0.078125 -0.109375l0.15625 -2.125q0 -0.171875 0.140625 -0.171875l0.671875 0q0.15625 0 0.15625 0.1875l0 2.109375q0 0.109375 0.109375 0.109375l1.671875 0q0.15625 0 0.15625 0.125l0 0.5625q0 0.140625 -0.15625 0.140625l-1.6875 0zm3.486084 6.234375q-0.171875 0 -0.171875 -0.171875l0 -9.546875q0 -0.171875 0.140625 -0.171875l0.78125 0q0.15625 0 0.15625 0.15625l0 3.5625q0 0.140625 0.109375 0.046875q0.765625 -0.59375 1.296875 -0.828125q0.53125 -0.25 1.171875 -0.25q1.03125 0 1.578125 0.546875q0.5625 0.546875 0.5625 1.484375l0 4.953125q0 0.21875 -0.203125 0.21875l-0.75 0q-0.171875 0 -0.171875 -0.171875l0 -4.765625q0 -0.65625 -0.34375 -1.015625q-0.34375 -0.359375 -1.046875 -0.359375q-0.5625 0 -1.015625 0.25q-0.453125 0.234375 -1.15625 0.828125l0 5.03125q0 0.203125 -0.203125 0.203125l-0.734375 0zm13.383514 -7.203125q0.984375 0 1.65625 0.453125q0.6875 0.453125 1.109375 1.203125l0.03125 0.109375q0 0.078125 -0.09375 0.09375l-0.734375 0.171875l-0.046875 0.015625q-0.0625 0 -0.125 -0.109375q-0.4375 -0.578125 -0.828125 -0.84375q-0.390625 -0.265625 -0.890625 -0.265625q-1.046875 0 -1.65625 0.765625q-0.609375 0.765625 -0.609375 2.078125q0 1.3125 0.609375 2.078125q0.625 0.765625 1.671875 0.765625q0.625 0 1.09375 -0.3125q0.484375 -0.3125 0.875 -0.953125q0.03125 -0.0625 0.0625 -0.0625q0.046875 -0.015625 0.109375 0.015625l0.5625 0.21875q0.09375 0.03125 0.0625 0.171875q-0.421875 0.765625 -1.140625 1.265625q-0.71875 0.484375 -1.71875 0.484375q-0.96875 0 -1.734375 -0.453125q-0.75 -0.46875 -1.1875 -1.296875q-0.421875 -0.828125 -0.421875 -1.890625q0 -1.078125 0.421875 -1.921875q0.4375 -0.84375 1.203125 -1.3125q0.765625 -0.46875 1.71875 -0.46875zm7.255066 7.34375q-1.0 0 -1.765625 -0.453125q-0.765625 -0.46875 -1.1875 -1.296875q-0.421875 -0.828125 -0.421875 -1.875q0 -1.09375 0.4375 -1.921875q0.4375 -0.84375 1.203125 -1.3125q0.765625 -0.484375 1.75 -0.484375q0.984375 0 1.75 0.484375q0.765625 0.46875 1.1875 1.3125q0.421875 0.828125 0.421875 1.90625q0 1.046875 -0.4375 1.875q-0.421875 0.828125 -1.1875 1.296875q-0.765625 0.46875 -1.75 0.46875zm0.03125 -0.84375q1.03125 0 1.609375 -0.75q0.578125 -0.765625 0.578125 -2.078125q0 -1.3125 -0.59375 -2.078125q-0.578125 -0.765625 -1.609375 -0.765625q-1.046875 0 -1.640625 0.765625q-0.59375 0.765625 -0.59375 2.078125q0 1.3125 0.59375 2.078125q0.59375 0.75 1.65625 0.75zm5.1866455 0.703125q-0.1875 0 -0.1875 -0.171875l0 -6.71875q0 -0.171875 0.140625 -0.171875l0.796875 0q0.15625 0 0.15625 0.140625l0 0.78125q0 0.140625 0.109375 0.03125q0.75 -0.578125 1.265625 -0.828125q0.53125 -0.265625 1.1875 -0.265625q1.015625 0 1.578125 0.546875q0.578125 0.546875 0.578125 1.46875l0 4.96875q0 0.21875 -0.203125 0.21875l-0.75 0q-0.171875 0 -0.171875 -0.171875l0 -4.765625q0 -0.65625 -0.34375 -1.015625q-0.34375 -0.359375 -1.046875 -0.359375q-0.5625 0 -1.03125 0.25q-0.46875 0.234375 -1.15625 0.828125l0 5.03125q0 0.109375 -0.046875 0.15625q-0.046875 0.046875 -0.140625 0.046875l-0.734375 0zm9.455475 -6.234375q-0.109375 0 -0.109375 0.109375l0 4.234375q0 0.59375 0.203125 0.828125q0.203125 0.21875 0.65625 0.21875l0.921875 0q0.140625 0 0.140625 0.15625l-0.015625 0.453125q0 0.125 -0.15625 0.171875q-0.34375 0.0625 -1.25 0.0625q-0.84375 0 -1.234375 -0.390625q-0.375 -0.390625 -0.375 -1.25l0 -4.453125q0 -0.140625 -0.140625 -0.140625l-1.0625 0q-0.15625 0 -0.15625 -0.140625l0 -0.5625q0 -0.125 0.140625 -0.125l1.140625 0q0.078125 0 0.078125 -0.109375l0.15625 -2.125q0 -0.171875 0.140625 -0.171875l0.671875 0q0.15625 0 0.15625 0.1875l0 2.109375q0 0.109375 0.109375 0.109375l1.671875 0q0.15625 0 0.15625 0.125l0 0.5625q0 0.140625 -0.15625 0.140625l-1.6875 0zm3.486084 6.234375q-0.1875 0 -0.1875 -0.171875l0 -6.71875q0 -0.171875 0.140625 -0.171875l0.78125 0q0.140625 0 0.140625 0.140625l0 0.875q0 0.078125 0.046875 0.09375q0.046875 0.015625 0.09375 -0.0625q1.015625 -1.1875 2.078125 -1.1875q0.453125 0 0.453125 0.171875l0 0.8125q0 0.125 -0.109375 0.09375q-0.25 -0.03125 -0.609375 -0.03125q-0.375 0 -0.828125 0.234375q-0.453125 0.21875 -0.765625 0.578125q-0.3125 0.359375 -0.3125 0.734375l0 4.40625q0 0.203125 -0.1875 0.203125l-0.734375 0zm8.970917 -0.859375q-1.015625 1.0 -2.359375 1.0q-1.046875 0 -1.640625 -0.53125q-0.59375 -0.53125 -0.59375 -1.40625q0 -1.0625 0.890625 -1.671875q0.90625 -0.625 2.609375 -0.734375l1.046875 -0.078125q0.21875 -0.03125 0.21875 -0.203125l0 -0.359375q0 -0.71875 -0.453125 -1.125q-0.4375 -0.421875 -1.1875 -0.421875q-1.171875 0 -1.921875 1.0625q-0.046875 0.0625 -0.09375 0.09375q-0.03125 0.015625 -0.09375 -0.015625l-0.71875 -0.234375q-0.0625 -0.03125 -0.0625 -0.09375q0 -0.046875 0.03125 -0.125q0.40625 -0.703125 1.140625 -1.09375q0.734375 -0.40625 1.75 -0.40625q1.3125 0 2.0 0.609375q0.703125 0.609375 0.703125 1.671875l0 4.71875q0 0.125 -0.046875 0.171875q-0.046875 0.03125 -0.140625 0.03125l-0.671875 0q-0.15625 0 -0.1875 -0.21875l-0.03125 -0.609375q-0.015625 -0.09375 -0.0625 -0.09375q-0.046875 0 -0.125 0.0625zm0.171875 -2.53125q0 -0.203125 -0.1875 -0.203125l-0.875 0.078125q-1.234375 0.078125 -1.90625 0.484375q-0.671875 0.390625 -0.671875 1.09375q0 0.578125 0.40625 0.921875q0.40625 0.328125 1.078125 0.328125q0.421875 0 0.8125 -0.140625q0.40625 -0.15625 0.71875 -0.40625q0.296875 -0.25 0.453125 -0.515625q0.171875 -0.28125 0.171875 -0.53125l0 -1.109375zm5.960022 -3.8125q0.984375 0 1.6562805 0.453125q0.6875 0.453125 1.109375 1.203125l0.03125 0.109375q0 0.078125 -0.09375 0.09375l-0.734375 0.171875l-0.046875 0.015625q-0.0625 0 -0.125 -0.109375q-0.43753052 -0.578125 -0.8281555 -0.84375q-0.390625 -0.265625 -0.890625 -0.265625q-1.046875 0 -1.65625 0.765625q-0.609375 0.765625 -0.609375 2.078125q0 1.3125 0.609375 2.078125q0.625 0.765625 1.671875 0.765625q0.625 0 1.09375 -0.3125q0.48440552 -0.3125 0.8750305 -0.953125q0.03125 -0.0625 0.0625 -0.0625q0.046875 -0.015625 0.109375 0.015625l0.5625 0.21875q0.09375 0.03125 0.0625 0.171875q-0.421875 0.765625 -1.140625 1.265625q-0.7187805 0.484375 -1.7187805 0.484375q-0.96875 0 -1.734375 -0.453125q-0.75 -0.46875 -1.1875 -1.296875q-0.421875 -0.828125 -0.421875 -1.890625q0 -1.078125 0.421875 -1.921875q0.4375 -0.84375 1.203125 -1.3125q0.765625 -0.46875 1.71875 -0.46875zm6.1613464 0.96875q-0.109375 0 -0.109375 0.109375l0 4.234375q0 0.59375 0.203125 0.828125q0.203125 0.21875 0.65625 0.21875l0.921875 0q0.140625 0 0.140625 0.15625l-0.015625 0.453125q0 0.125 -0.15625 0.171875q-0.34375 0.0625 -1.25 0.0625q-0.84375 0 -1.234375 -0.390625q-0.375 -0.390625 -0.375 -1.25l0 -4.453125q0 -0.140625 -0.140625 -0.140625l-1.0625 0q-0.15625 0 -0.15625 -0.140625l0 -0.5625q0 -0.125 0.140625 -0.125l1.140625 0q0.078125 0 0.078125 -0.109375l0.15625 -2.125q0 -0.171875 0.140625 -0.171875l0.671875 0q0.15625 0 0.15625 0.1875l0 2.109375q0 0.109375 0.109375 0.109375l1.671875 0q0.15625 0 0.15625 0.125l0 0.5625q0 0.140625 -0.15625 0.140625l-1.6875 0z" fill-rule="nonzero"/><path fill="#eeeeee" d="m425.54855 471.58005l7.496063 -7.496063l7.496063 7.496063l-3.7480164 0l0 96.66141l3.7480164 0l-7.496063 7.4960938l-7.496063 -7.4960938l3.7480469 0l0 -96.66141z" fill-rule="evenodd"/><path stroke="#595959" stroke-width="1.0" stroke-linejoin="round" stroke-linecap="butt" d="m425.54855 471.58005l7.496063 -7.496063l7.496063 7.496063l-3.7480164 0l0 96.66141l3.7480164 0l-7.496063 7.4960938l-7.496063 -7.4960938l3.7480469 0l0 -96.66141z" fill-rule="evenodd"/></g></svg>
'''