*GitHub Repository "101labs-tech/near-academy"*

'''--- .vscode/my_command.js ---
exports.execute = async (args) => {
    // args => https://egodigital.github.io/vscode-powertools/api/interfaces/_contracts_.workspacecommandscriptarguments.html

    // s. https://code.visualstudio.com/api/references/vscode-api
    const vscode = args.require('vscode');

    vscode.window.showInformationMessage(
        `Hello, from '${ args.command }'!`
    );
};
'''
'''--- src/api/jest-mongodb-config.js ---
module.exports = {
  mongodbMemoryServerOptions: {
    instance: {
      dbName: 'jest'
    },
    binary: {
      version: '4.0.3',
      skipMD5: true
    },
    autoStart: false
  }
}

'''
'''--- src/api/jest.config.js ---
module.exports = {
  roots: ['<rootDir>'],
  transform: {
    '^.+\\.tsx?$': 'ts-jest'
  },
  testRegex: '(/__tests__/.*|(\\.|/)(test|spec))\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
  preset: '@shelf/jest-mongodb'
}

'''
'''--- src/frontend/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="black" />
    <meta name="description" content="NEAR Academy is an interactive introduction course for web developers looking to explore blockchain integration to their Apps. It is free, and it hands a completion certificate."/>
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700;900&display=swap" rel="stylesheet">

    <meta name="userreport:mediaId" value="270ac59b-9f58-4d09-8edc-73553f024c4d"/>
<!--    <script src="https://sak.userreport.com/101labs/launcher.js" async id="userreport-launcher-script"></script>-->
    <!-- <script src="./node_modules/reflect-metadata/Reflect.js"></script> -->
    <link rel="apple-touch-icon" href="logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <link rel='stylesheet' href='https://highlightjs.org/static/demo/styles/agate.css'/>
    <title>Near Academy</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- src/frontend/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *

'''
'''--- src/frontend/src/custom-sw.js ---
window.addEventListener('message', (event) => {
  if (event.data === 'skipWaiting') {
    console.info('skipWaiting')
    window.skipWaiting()
    window.location.reload()
  }
})

'''
'''--- src/frontend/src/helpers/domlistener.js ---
  var last = +new Date()
  var delay = 100 // default delay

  // Manage event queue
  var stack = []

  function callback() {
    var now = +new Date()
    if (now - last > delay) {
      for (var i = 0; i < stack.length; i++) {
        stack[i]()
      }
      last = now
    }
  }

  // Public interface
  var onDomChange = function (fn, newdelay) {
    if (newdelay) delay = newdelay
    stack.push(fn)
  }

  // Naive approach for compatibility
  function naive() {
    var last = document.getElementsByTagName('*')
    var lastlen = last.length
    var timer = setTimeout(function check() {
      // get current state of the document
      var current = document.getElementsByTagName('*')
      var len = current.length

      // if the length is different
      // it's fairly obvious
      if (len != lastlen) {
        // just make sure the loop finishes early
        last = []
      }

      // go check every element in order
      for (var i = 0; i < len; i++) {
        if (current[i] !== last[i]) {
          callback()
          last = current
          lastlen = len
          break
        }
      }

      // over, and over, and over again
      setTimeout(check, delay)
    }, delay)
  }

  //
  //  Check for mutation events support
  //

  var support = {}

  var el = document.documentElement
  var remain = 3

  // callback for the tests
  function decide() {
    if (support.DOMNodeInserted) {
      window.addEventListener(
        'DOMContentLoaded',
        function () {
          if (support.DOMSubtreeModified) {
            // for FF 3+, Chrome
            el.addEventListener('DOMSubtreeModified', callback, false)
          } else {
            // for FF 2, Safari, Opera 9.6+
            el.addEventListener('DOMNodeInserted', callback, false)
            el.addEventListener('DOMNodeRemoved', callback, false)
          }
        },
        false,
      )
    } else if (document.onpropertychange) {
      // for IE 5.5+
      document.onpropertychange = callback
    } else {
      // fallback
      naive()
    }
  }

  // checks a particular event
  function test(event) {
    el.addEventListener(
      event,
      function fn() {
        support[event] = true
        el.removeEventListener(event, fn, false)
        if (--remain === 0) decide()
      },
      false,
    )
  }

  // attach test events
  if (window.addEventListener) {
    test('DOMSubtreeModified')
    test('DOMNodeInserted')
    test('DOMNodeRemoved')
  } else {
    decide()
  }

  // do the dummy test
  var dummy = document.createElement('div')
  el.appendChild(dummy)
  el.removeChild(dummy)

  export {onDomChange}
'''