*GitHub Repository "keysKuo/NEAR-MERN-Delirate-Blockchain2023"*

'''--- .env ---
LOGO_LINK = https://lh3.googleusercontent.com/pw/AMWts8CXQtunYoMyDL8YSHCUP2wmwWcknGz9-OAlI_oZGu-nLRlNJQCQROAZysllDOf_-mXJl27wjWX9Pz4Wa8dz1hKVwS7JMwvp5cu7LTcB5T78odYcUIdIHmnCkVXTa93-eBCIhmHBj4TcFtQaUJOtJBU=w742-h236-s-no
HOST_EMAIL = contact.ezgroup@gmail.com
HOST_PASSWORD = ohdgbaaqoxglacin
JWT_SECRET_KEY = nkeyskuo

NETWORK_ID = testnet
ACCOUNT_ID = nkeyskuo196.testnet
PRIVATE_KEY = ed25519:2uC1CWdVsAwxDnxYHwxvHXfX3R2RQgToxv8iQnnYo4dGPnZnNKQqLVdPjdP37jyDnCatUJm3zMyQZxPCLdd7z7L1
CONTRACT_ID = dev-1701411069417-90892511740915

# ATLAS_URL = mongodb+srv://nkeyskuo124:zB0gwVkfBeQK1moz@delirate.sghuaxp.mongodb.net/
API_URL = http://192.168.1.4:8080
CLIENT_URL = http://192.168.1.4:3000
STRIPE_API_KEY = sk_test_51OEv6lLqoSvXr7Wa201ij0m5aWuB2CjGg3g32szb8grLYHwPShQFSyeeroV8n8ajzFVrJxBPB2FekYFq4AYROscc00nCuvAKGi
'''
'''--- README.md ---
### Built With

To run this project, make sure that your environment have all of these frameworks/libraries:

* [![Nodejs][Node.js]][Node-url]
* [![ExpressJS][Express.js]][Express-url]
* [![MongoDB][MongoDB]][MongoDB-url]
* [![Rust][Rust]][Rust-url]

### Installation

1. Clone the repo
   ```sh
   git clone https://github.com/keysKuo/Nodejs-Delirate-Backend
   ```
2. Install NPM packages
   ```sh
   npm install & npm install nodemon --save-dev
   ```
3. Config your IPV4 Address as your API_URL `.env` ex: (http://192.168.1.1)

   ```sh
   API_URL = [Your IP Address] 
   ```
4. Run the source code
   ```sh
   npm run dev
   ```

<!-- MARKDOWN LINKS & IMAGES -->
<!-- https://www.markdownguide.org/basic-syntax/#reference-style-links -->
[contributors-shield]: https://img.shields.io/github/contributors/othneildrew/Best-README-Template.svg?style=for-the-badge
[contributors-url]: https://github.com/othneildrew/Best-README-Template/graphs/contributors
[forks-shield]: https://img.shields.io/github/forks/othneildrew/Best-README-Template.svg?style=for-the-badge
[forks-url]: https://github.com/othneildrew/Best-README-Template/network/members
[stars-shield]: https://img.shields.io/github/stars/othneildrew/Best-README-Template.svg?style=for-the-badge
[stars-url]: https://github.com/othneildrew/Best-README-Template/stargazers
[issues-shield]: https://img.shields.io/github/issues/othneildrew/Best-README-Template.svg?style=for-the-badge
[issues-url]: https://github.com/othneildrew/Best-README-Template/issues
[license-shield]: https://img.shields.io/github/license/othneildrew/Best-README-Template.svg?style=for-the-badge
[license-url]: https://github.com/othneildrew/Best-README-Template/blob/master/LICENSE.txt
[linkedin-shield]: https://img.shields.io/badge/-LinkedIn-black.svg?style=for-the-badge&logo=linkedin&colorB=555
[linkedin-url]: https://linkedin.com/in/othneildrew
[product-screenshot]: images/screenshot.png
[TailwindCSS]: https://img.shields.io/badge/Tailwind_CSS-38B2AC?style=for-the-badge&logo=tailwind-css&logoColor=white
[TailwindCSS-url]: https://tailwindcss.com
[React.js]: https://img.shields.io/badge/React-20232A?style=for-the-badge&logo=react&logoColor=61DAFB
[React-url]: https://reactjs.org/
[Node.js]: https://img.shields.io/badge/Node.js-43853D?style=for-the-badge&logo=node.js&logoColor=white
[Node-url]: https://nodejs.org/
[Express.js]: https://img.shields.io/badge/Express.js-404D59?style=for-the-badge
[Express-url]: https://expressjs.com/
[MongoDB]: https://img.shields.io/badge/MongoDB-4EA94B?style=for-the-badge&logo=mongodb&logoColor=white
[MongoDB-url]: https://www.mongodb.com/
[Rust]: https://img.shields.io/badge/Rust-000000?style=for-the-badge&logo=rust&logoColor=white
[Rust-url]: https://www.rust-lang.org/

'''
'''--- contract/Cargo.toml ---
[package]
authors = ["Dang Quang Vu <eamondang@gmail.com>"]
edition = "2021"
name = "template-near-contract"
version = "0.1.1"
description = "A Start Templates for Near SmartContract"
license = "MIT"
homepage = "https://github.com/eamondang/near-app-contract"
repository = "https://github.com/eamondang/near-app-contract"
keywords = ["near", "template", "contract", "eamon"]
categories = ["template"]

[lib]
crate-type = ["cdylib"]

[profile.release]
codegen-units = 1
debug = false
lto = true
opt-level = "z"
overflow-checks = true
panic = "abort"

[dependencies]
near-sdk = "4.1.1"

'''
'''--- contract/Definition.txt ---
NEAR

1. Definition
    NEAR là một nền tảng blockchain được thiết kế để hỗ trợ việc xây dựng và phát triển các ứng dụng phi tập trung (Decentralized App). 
    Được phát triển bởi các chuyên gia trong lĩnh vực blockchain vào năm 2020
    Một số nền tảng blockchain phổ biến: Ethereum, Polkadot, Solana, EOS, ...

    * Đội ngũ phát triển: 
        NEAR được phát triển bởi Near Protocol, Inc,... và 1 số công ty công nghệ blockchain
        Có trụ sở tại San Francisco, California và cộng đồng lập trình viên rộng lớn

    * Mục tiêu chính:
        NEAR đặt ra mục tiêu là cung cấp 1 môi trường phát triển dApps để sử dụng và có khả năng mở rộng tốt.
        Nó được xây dựng với mục tiêu giải quyết các vấn đề về hiệu suất, chi phí và trải nghiệm người dùng mà nhiều nền tảng blockchain khác chưa làm được. 
    
    * Công nghệ:
        NEAR sử dụng công nghệ gọi là "sharding" để tăng khả năng mở rộng (Scalibility) của mạng lưới.
        Sharding cho phép mạng chia thành các phân đoạn nhỏ để xử lý các giao dịch và ứng dụng đồng thời mà không cần tiêu tốn nhiều tài nguyên 

    * Một số ưu điểm của NEAR:
        Tính bảo mật và an toàn cao, sử dụng kiến thức mới nhất trong lĩnh vực bảo mật để bảo về tài sản và giao dịch của người dùng
        Khả năng mở rộng cao nhờ sử dụng công nghệ sharding 
        Dễ dàng triển khai và tích hợp, hỗ trợ nhiều ngôn ngữ 
        Một số các ứng dụng thực tế được phát triển trên nền tảng NEAR: 
            Paras: một thị trường nghệ thuật phi tập trung, cho phép người dung buôn bán các tác phẩm nghệ thuật kĩ thuật số, được lưu trữ và quản lý = smart contract trên NEAR 
            Ref Finance: một hệ thống tài chính phi tập trung, cung cấp dịch vụ vay, cho vay và gửi tiền, giúp người dùng tận dùng tài sản số mà họ có 
            Ngoài ra còn có 1 số ứng dụng như NFT, blockchain games, e-wallet cũng được phát triển trên nền tảng NEAR

    * Mở rộng và phát triển:
        NEAR đã và đang phát triển với các cải tiến và nâng cấp liên tục để nâng cao khả năng mở rộng và hiệu suất của nền tảng

    -- Suy nghĩ riêng --
    ( Việc xây dựng và phát triển ra các nền tảng blockchain nó cũng giống như việc họ đang xây dựng 1 quốc gia ảo. Trong quốc gia đó họ dùng đồng token riêng của họ
    thay cho các loại tiền tệ trong cuộc sống thật để trao đổi , buôn bán các dịch vụ được họ phát triển ở quốc gia đó. Và việc đồng token (tiền tệ áo) đó có được công 
    nhận giá trị của nó hay không phụ thuộc vào sự phát triển của cộng đồng tham gia nền tảng này của họ. Ví dụ như NEAR, càng nhiều người tin tưởng và tham gia sử dụng đồng 
    NEAR để thay cho tiền thật trao đổi buôn bán trên nền tảng đó chính là bàn đạp cho sự phát triển của giá trị đồng token của nền tảng đó. Nó cũng giống như đồng đô la mĩ 
    luôn được ưa chuộng ở các quốc gia trên thế giới vì nó khẳng định được vị thế của nó trên thị trường tiền tệ. Bài toàn này được áp dụng lại trên các loại tiền tệ ảo mà các nền
    tảng phát triển nên. Tất nhiên bởi vì bởi vì nó là đồng tiền ảo nên việc truy cứu trách nhiệm trong trường hợp xãy ra vấn đề là không thể được như các đồng tiền thật được 
    công nhận trong đời sống thực. Tuy nhiên nó cũng là 1 bước cải tiến về tư duy trong quá trình trao đổi và phát triển. Và quan trọng hơn hết là nó có thể mang lại lợi ích cho
    đội ngũ phát triển cũng như cộng đồng tham gia vào sử dụng nền tảng đó.
    )

    * Lập trình thông qua Rust hoặc AssemblyScript:
        NEAR hỗ trợ lập trình dApps bằng nhiều ngôn ngữ
        Tuy nhiên Rust va 2 AssemblyScript được coi là 2 ngôn ngữ chính để phát triển trên nền tảng này.

    * Token của NEAR:
        Token chính của NEAR được gọi là "NEAR" - Giá trị của đồng NEAR hiện tại khi quy đổi sang USDT là vào khoảng 1.1 ~ 1.2 USDT. 1 USDT ~ 0.999925 USD 
        Token này có nhiều ứng dụng trong hệ sinh thái NEAR, bao gồm thanh toán các giao dịch và phí mạng
        Ngoài ra còn có hỗ trợ khám phá và sử dụng các ứng dụng trên mạng

    * Hợp đồng thông minh (Smart Contract): 
        NEAR hộ trợ triển khai smart contract
        Cho phép các nhà phát triển xây dựng các ứng dụng phi tập trung (dApps) với các tính năng thông minh và tự động
        Hợp đồng thông minh (smart contract) là một loại chương trình máy tính tự động, tự thực hiện, và tự thỏa thuận được xây dựng trên nền tảng blockchain. 
        Smart contract hoạt động dựa trên các quy tắc và điều khoản đã được lập trình sẵn và được thiết kế để thực hiện một loạt các hành động mà không cần sự can thiệp của bên thứ ba nào.

        Dưới đây là một số điểm quan trọng về smart contract:

        1. **Tự thực hiện**: Smart contract hoạt động tự động và tự thực hiện các hành động khi các điều kiện đã được xác định trong hợp đồng được đáp ứng. Điều này giúp loại bỏ sự phụ thuộc vào người trung gian và tạo ra tính minh bạch và đáng tin cậy.

        2. **Thực hiện không thể thay đổi**: Một khi smart contract đã được triển khai trên blockchain, nó không thể bị thay đổi hoặc tắt trừ khi các điều kiện trong hợp đồng cho phép hoặc thông qua một sự thay đổi được thực hiện bởi cộng đồng dùng để quản lý blockchain.

        3. **Dựa trên mã hóa**: Smart contract được viết bằng mã hóa và lưu trữ trên blockchain, điều này đảm bảo tính bảo mật và không thể thay đổi của hợp đồng.

        4. **Áp dụng rộng rãi**: Smart contract có thể áp dụng trong nhiều lĩnh vực, từ tài chính, bất động sản, quản lý chuỗi cung ứng, đến giáo dục và y tế. Bất kỳ lĩnh vực nào có nhu cầu trong việc tự động hóa và xác thực các giao dịch và thỏa thuận cũng có thể sử dụng smart contract.

        5. **Thanh toán tự động**: Một trong các ứng dụng phổ biến của smart contract là trong lĩnh vực tài chính và thanh toán. Chẳng hạn, một smart contract có thể tự động chuyển tiền từ tài khoản này sang tài khoản khác khi một điều kiện cụ thể được đáp ứng.

        6. **Tính minh bạch**: Vì smart contract hoạt động trên blockchain, mọi giao dịch và hành động trong hợp đồng được ghi lại và có thể được kiểm tra bởi bất kỳ ai.

        Smart contract đã giúp tạo ra các ứng dụng phi tập trung và cách tiếp cận mới đối với thỏa thuận và giao dịch, đặc biệt trong lĩnh vực blockchain và tiền điện tử.
    

'''
'''--- contract/Makefile.toml ---
[tasks.clean]
clear = true
script = """
cargo clean
rm -rf ./neardev/
rm -rf ./target/
"""

[tasks.prepare]
script = """
#!/usr/bin/env zsh
rustup target add wasm32-unknown-unknown && rustup install 1.69 && rustup default 1.69 && cargo --version
"""

[tasks.build]
command = "cargo"
args = ["build", "--target", "wasm32-unknown-unknown", "--release"]

[tasks.dev-deploy]
dependencies = ["build"]
script = """
#!/usr/bin/env zsh

set -e
WASM_PATH="$(find ./target/wasm32-unknown-unknown/release -maxdepth 1 -name "*.wasm")"

near dev-deploy --wasmFile $WASM_PATH
"""

[tasks.call]
script = """
#!/usr/bin/env zsh

set -e
[ -f ./neardev/dev-account ] || (echo "Contract must be deployed"; false)
near call "$(<./neardev/dev-account)" "$@"
"""

[tasks.call-self]
script = """
#!/usr/bin/env zsh

set -e
[ -f ./neardev/dev-account ] || (echo "Contract must be deployed"; false)
near call "$(<./neardev/dev-account)" "$@" --accountId "$(<./neardev/dev-account)"
"""

[tasks.view]
script = """
#!/usr/bin/env zsh

set -e
[ -f ./neardev/dev-account ] || (echo "Contract must be deployed"; false)
near view "$(<./neardev/dev-account)" "$@"
"""
'''
'''--- contract/README.txt ---
. Deploy Code
    npm i -g near-cli
    cargo make prepare 
    cargo make build 
    cargo make dev-deploy

. Register Freelancer
    cargo make call register_executor '{"fullname": "Kuo Nhan Dung", "skills": ["Nodejs","MongoDB"]}' --account-id nkeyskuo124.testnet

. Register Client
    cargo make call register_client '{"organization_name": "SUD Tech", "industry": "Information Technology"}' --account-id nkeyskuo124.testnet

. Create job 
    cargo make call create_job '{"title": "Ticket Buying System", "desc": "Developing a Ticket Buying Platform ...", "budget": 5, "tags": ["ExpressJs","ReactJs","MongoDB"], "duration": 30}' --account-id nkeyskuo124.testnet
    cargo make call create_job '{"title": "Food Ordering System", "desc": "Build an Ordering System for restaurants", "budget": 20, "tags": ["PHP","VueJs","MySQL"], "duration": 20}' --account-id nkeyskuo124.testnet
    cargo make call create_job '{"title": "Social Communication System", "desc": "...", "budget": 10, "tags": ["GoLang","VueJs","MySQL", "GraphQL"], "duration": 30}' --account-id nkeyskuo124.testnet
    cargo make call create_job '{"title": "Media Player System", "desc": "...", "budget": 2, "tags": ["GoLang","AngularJs", "GraphQL"], "duration": 20}' --account-id nkeyskuo124.testnet
. Take job
    cargo make call take_job '{"job_id": "J-1689271438776764125"}' --account-id nkeyskuo124.testnet

. View job by id
    cargo make call view_job_by_id '{"job_id": "J-1689271438776764125"}' --account-id nkeyskuo124.testnet

. Update job 
    cargo make call update_job '{"job_id": "J-1689271438776764125", "budget": 4}' --account-id nkeyskuo124.testnet
    cargo make call update_job '{"job_id": "J-1689289254227678863", "duration": 15}' --account-id nkeyskuo124.testnet
    
. Remove job 
    cargo make call remove_job '{"job_id": "J-1689289254227678863"}' --account-id nkeyskuo124.testnet

. View all jobs
    cargo make view view_all_jobs

    Result:
        [
            {
                job_id: 'J-1689271438776764125',
                author: 'nkeyskuo124.testnet',
                executor: null,
                title: 'Ticket Buying System',
                desc: 'Developing a Ticket Buying Platform ...',
                budget: 5,
                tags: [ 'ExpressJs', 'ReactJs', 'MongoDB' ],
                created_at: '1689271438776764125',
                duration: 5,
                status: 'open'
            },
            {
                job_id: 'J-1689289254227678863',
                author: 'nkeyskuo124.testnet',
                executor: null,
                title: 'Food Ordering System',
                desc: 'Build an Ordering System for restaurants',
                budget: 20,
                tags: [ 'PHP', 'VueJs', 'MySQL' ],
                created_at: '1689289254227678863',
                duration: 2,
                status: 'open'
            }
        ]

. Clear Jobs 
    cargo make call clear_jobs '{}' --account-id nkeyskuo124.testnet

. View Freelancer 
    cargo make call view_freelancer_by_id --account-id nkeyskuo124.testnet

. Payment 
    cargo make call pay_for_job '{"job_id": "J-1695675109179875436"}' --account-id nkeyskuo124.testnet 

'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{ self, BorshDeserialize, BorshSerialize };
use near_sdk::serde::{ Deserialize, Serialize };
use near_sdk::collections::{ LookupMap, UnorderedMap };
use near_sdk::{ json_types::U128, env, near_bindgen, AccountId, Balance, PanicOnDefault, Promise };

pub type ItemId = String;
pub type HashEmail = String;
pub type RetailerId = HashEmail;
pub type CustomerId = HashEmail;
pub type ShipperId = HashEmail;

pub trait Delirate {
    fn register_customer(&mut self, hashed_email: HashEmail, name: String, phone: String) -> bool;
    fn get_customer_info(&self, hashed_email: HashEmail) -> Customer;

    fn register_retailer(&mut self, hashed_email: HashEmail, store_name: String, _location: String) -> bool;
    fn get_retailer_info(&self, hashed_email: HashEmail) -> Retailer;

    fn register_shipper(&mut self, hashed_email: HashEmail, license_num: String, phone: String) -> bool;
    fn get_shipper_info(&self, hashed_email: HashEmail) -> Shipper;

    fn create_delivery(
        &mut self,
        _isbn_code: String, // FK order _isbn_code
        _sender: RetailerId,
        _receiver: CustomerId,
        _status: String,
        _note: String,
        _image: String,
        _location: String,
        _track_signer: HashEmail
    ) -> bool;

    fn tracking_delivery(
        &mut self,
        _isbn_code: String,
        _status: String,
        _note: String,
        _image: String,
        _location: String,
        _track_signer: String
    ) -> bool;

    fn get_delivery_info(&self, _isbn_code: String) -> Delivery;

    /**
     * Description: Create an item on retailer's shop
     * Send:        Datas which contains model, desc, brand, origin, distributor
     * Receive:     Return true if success, otherwise false
     */
    fn create_item(
        &mut self,
        model: String,
        desc: String,
        brand: String,
        origin: String,
        _image: String,
        distributor: RetailerId
    ) -> bool;

    /**
     * Description: Get infomation of a specific item by item_id
     * Send:        Datas which contains item_id
     * Receive:     Return that item's information
     */
    fn get_item_info(&self, item_id: ItemId) -> Item;

    /**
     * Description: Get infomation of a all items
     * Send:        No data sent
     * Receive:     Return all item's information
     */
    fn get_all_items(&self) -> Vec<Item>;

    fn payment_test(&mut self, _receiver: AccountId, _order_id: String, _amount: Balance) -> Promise;

    fn create_origin(
        &mut self,
        serial_number: String,
        sku: String,
        manufacturer_name: String,
        manufacturer_address: String,
        certificate_url: String,
        country: String,
        produce_date: String
    ) -> bool;

    fn get_origin_info(&self, serial_number: String) -> Origin;

    // fn buy_item(&mut self, item_id: ItemId) -> Item;

    // fn sell_item(&mut self, item_id:ItemId) -> Item;
}

#[derive(Deserialize, BorshDeserialize, BorshSerialize, Serialize, PartialEq, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct Delivery {
    _isbn_code: String, // FK order _isbn_code
    _sender: RetailerId,
    _receiver: CustomerId,
    _tracking_history: Vec<Tracking>,
}
#[derive(Deserialize, BorshDeserialize, BorshSerialize, Serialize, PartialEq, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct Tracking {
    _status: String,
    _note: String,
    _image: String,
    _location: String,
    _track_signer: HashEmail,
    _timestamp: String,
}

#[derive(Deserialize, BorshDeserialize, BorshSerialize, Serialize, PartialEq, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct Retailer {
    store_name: String,
    _location: String,
}

#[derive(Deserialize, BorshDeserialize, BorshSerialize, Serialize, PartialEq, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct Customer {
    name: String,
    phone: String,
}

#[derive(Deserialize, BorshDeserialize, BorshSerialize, Serialize, PartialEq, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct Shipper {
    license_num: String,
    phone: String,
}

#[derive(Deserialize, BorshDeserialize, BorshSerialize, Serialize, PartialEq, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct Checkout {
    _isbn_code: String, // FK order
    payment_type: String,
    is_completed: bool,
    created_at: String,
}

// Structure of Item
#[derive(BorshDeserialize, BorshSerialize, Deserialize, Serialize, PartialEq, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct Item {
    pub item_id: ItemId,
    pub model: String,
    pub desc: String,
    pub brand: String,
    pub origin: String,
    pub _image: String,
    pub distributor: RetailerId,
}

#[derive(BorshDeserialize, BorshSerialize, Deserialize, Serialize, PartialEq, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct Origin {
    pub serial_number: String,
    pub sku: String,
    pub manufacturer_name: String,
    pub manufacturer_address: String,
    pub certificate_url: String,
    pub country: String,
    pub produce_date: String,
}

// Structure of Contract
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    pub owner: AccountId,

    // Items
    pub all_items: UnorderedMap<u128, Item>,
    pub items_by_id: LookupMap<ItemId, Item>,
    pub total_items: u128,

    // Delivery
    pub delivery_by_id: LookupMap<String, Delivery>,
    pub total_delivery: u128,

    // Checkout
    pub checkout_by_id: LookupMap<String, Checkout>,
    pub total_checkout: u128,

    // Customers
    pub customers_by_id: LookupMap<CustomerId, Customer>,
    pub total_customers: u128,

    // Retailers
    pub retailers_by_id: LookupMap<RetailerId, Retailer>,
    pub total_retailers: u128,

    // Shippers
    pub shippers_by_id: LookupMap<ShipperId, Shipper>,
    pub total_shippers: u128,

    // Origin
    pub origins_by_serial: LookupMap<String, Origin>,
    pub total_origins: u128,
}

// Implement the contract structure
#[near_bindgen]
impl Delirate for Contract {
    fn register_customer(&mut self, hashed_email: HashEmail, name: String, phone: String) -> bool {
        let new_customer = Customer {
            name,
            phone,
        };

        self.total_customers += 1;
        self.customers_by_id.insert(&hashed_email, &new_customer);
        return true;
    }

    fn get_customer_info(&self, hashed_email: HashEmail) -> Customer {
        self.customers_by_id.get(&hashed_email).unwrap()
    }

    fn register_retailer(&mut self, hashed_email: HashEmail, store_name: String, _location: String) -> bool {
        let new_retailer = Retailer {
            store_name,
            _location,
        };

        self.total_retailers += 1;
        self.retailers_by_id.insert(&hashed_email, &new_retailer);
        return true;
    }

    fn get_retailer_info(&self, hashed_email: HashEmail) -> Retailer {
        self.retailers_by_id.get(&hashed_email).unwrap()
    }

    fn register_shipper(&mut self, hashed_email: HashEmail, license_num: String, phone: String) -> bool {
        let new_shipper = Shipper {
            license_num,
            phone,
        };

        self.total_shippers += 1;
        self.shippers_by_id.insert(&hashed_email, &new_shipper);
        return true;
    }

    fn get_shipper_info(&self, hashed_email: HashEmail) -> Shipper {
        self.shippers_by_id.get(&hashed_email).unwrap()
    }

    fn create_delivery(
        &mut self,
        _isbn_code: String, // FK order _isbn_code
        _sender: RetailerId,
        _receiver: CustomerId,
        _status: String,
        _note: String,
        _image: String,
        _location: String,
        _track_signer: HashEmail
    ) -> bool {
        if self.delivery_by_id.contains_key(&_isbn_code) {
            return false;
        }

        let mut new_delivery = Delivery {
            _isbn_code: _isbn_code.clone(),
            _sender,
            _receiver,
            _tracking_history: Vec::new(),
        };

        let new_tracking = Tracking {
            _status,
            _note,
            _image,
            _location,
            _track_signer,
            _timestamp: env::block_timestamp().to_string(),
        };

        new_delivery._tracking_history.push(new_tracking);

        self.delivery_by_id.insert(&_isbn_code, &new_delivery);
        self.total_delivery += 1;
        return true;
    }

    fn tracking_delivery(
        &mut self,
        _isbn_code: String,
        _status: String,
        _note: String,
        _image: String,
        _location: String,
        _track_signer: String
    ) -> bool {
        if !self.delivery_by_id.contains_key(&_isbn_code) {
            return false;
        }

        let mut delivery = self.delivery_by_id.get(&_isbn_code.clone()).unwrap();

        let new_tracking = Tracking {
            _status,
            _note,
            _image,
            _location,
            _track_signer,
            _timestamp: env::block_timestamp().to_string(),
        };

        delivery._tracking_history.push(new_tracking);

        self.delivery_by_id.insert(&_isbn_code, &delivery);
        return true;
    }

    fn get_delivery_info(&self, _isbn_code: String) -> Delivery {
        self.delivery_by_id.get(&_isbn_code).unwrap()
    }

    fn create_item(
        &mut self,
        model: String,
        desc: String,
        brand: String,
        origin: String,
        _image: String,
        distributor: RetailerId
    ) -> bool {
        if !self.retailers_by_id.contains_key(&distributor) {
            return false;
        }

        let current_timestamp = env::block_timestamp().to_string();
        let item_id = "I".to_string() + current_timestamp.as_str();

        let new_item = Item {
            item_id: item_id.clone(),
            model,
            desc,
            brand,
            origin,
            _image,
            distributor,
        };

        self.total_items += 1;
        self.all_items.insert(&self.total_items, &new_item);
        self.items_by_id.insert(&item_id, &new_item);
        return true;
    }

    fn get_item_info(&self, item_id: ItemId) -> Item {
        self.items_by_id.get(&item_id).unwrap()
    }

    fn get_all_items(&self) -> Vec<Item> {
        let mut items = Vec::new();

        for i in 1..self.all_items.len() + 1 {
            if let Some(item) = self.all_items.get(&(i as u128)) {
                items.push(item);
            }
        }

        items
    }

    // #[payable]
    // fn payment(&mut self, amount: U128, _receiver: AccountId) -> Promise {
    //     Promise::new(_receiver).transfer(amount.0)
    // }

    #[payable]
    fn payment_test(&mut self, _receiver: AccountId, _order_id: String, _amount: Balance) -> Promise {
        Promise::new(_receiver).transfer(env::attached_deposit())
    }

    // #[payable]
    // fn pay_for_job(&mut self, job_id: JobId) -> u128 {
    //     let job = self.view_job_by_id(job_id.clone());

    //     assert_eq!(job.author, env::signer_account_id(), "You are not owner");
    //     if let Some(executor) = job.executor {
    //         let conversion_ratio: u128 = 1_000_000_000_000_000_000_000_000;
    //         let _budget: u128 = job.budget * conversion_ratio;
    //         assert!(_budget <= env::account_balance(), "Not enough currecy");

    //         self.payment(near_sdk::json_types::U128(_budget), executor);
    //         return _budget;
    //     }
    //     0
    // }

    fn create_origin(
        &mut self,
        serial_number: String,
        sku: String,
        manufacturer_name: String,
        manufacturer_address: String,
        certificate_url: String,
        country: String,
        produce_date: String
    ) -> bool {
        let clone_serial = serial_number.clone();

        let new_origin = Origin {
            serial_number, sku, manufacturer_name, manufacturer_address, certificate_url, country, produce_date
        };

        self.total_origins += 1;
        self.origins_by_serial.insert(&clone_serial, &new_origin);
        return true;
    }

    fn get_origin_info(&self, serial_number: String) -> Origin {
        self.origins_by_serial.get(&serial_number).unwrap()
    }
}

// Implement Contract
#[near_bindgen]
impl Contract {
    #[init]
    pub fn init() -> Self {
        Self {
            owner: env::signer_account_id(),

            customers_by_id: LookupMap::new(b"all customers".try_to_vec().unwrap()),
            retailers_by_id: LookupMap::new(b"all retailers".try_to_vec().unwrap()),
            shippers_by_id: LookupMap::new(b"all shippers".try_to_vec().unwrap()),
            delivery_by_id: LookupMap::new(b"all delivery".try_to_vec().unwrap()),
            checkout_by_id: LookupMap::new(b"all checkout".try_to_vec().unwrap()),
            all_items: UnorderedMap::new(b"all items".try_to_vec().unwrap()),
            items_by_id: LookupMap::new(b"items by id".try_to_vec().unwrap()),
            origins_by_serial: LookupMap::new(b"origins by serial".try_to_vec().unwrap()),

            total_customers: 0,
            total_retailers: 0,
            total_shippers: 0,
            total_items: 0,
            total_delivery: 0,
            total_checkout: 0,
            total_origins: 0,
        }
    }
}

'''
'''--- package-lock.json ---
{
  "name": "final",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "final",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "bcryptjs": "^2.4.3",
        "body-parser": "^1.20.2",
        "cookie-parser": "^1.4.6",
        "cors": "^2.8.5",
        "crypto": "^1.0.1",
        "crypto-js": "^4.2.0",
        "dotenv": "^16.3.1",
        "express": "^4.18.2",
        "express-session": "^1.17.3",
        "express-useragent": "^1.0.15",
        "fs-extra": "^11.1.1",
        "hybrid-crypto-js": "^0.2.4",
        "jsonwebtoken": "^9.0.2",
        "mongoose": "^7.6.2",
        "morgan": "^1.10.0",
        "multer": "^1.4.5-lts.1",
        "near-api-js": "^2.1.4",
        "node-rsa": "^1.1.1",
        "path": "^0.12.7",
        "qrcode": "^1.5.3",
        "stripe": "^13.6.0",
        "sud-libs": "^1.2.1",
        "url": "^0.11.3"
      },
      "devDependencies": {
        "nodemon": "^3.0.1"
      }
    },
    "node_modules/@mongodb-js/saslprep": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@mongodb-js/saslprep/-/saslprep-1.1.0.tgz",
      "integrity": "sha512-Xfijy7HvfzzqiOAhAepF4SGN5e9leLkMvg/OPOF97XemjfVCYN/oWa75wnkc6mltMSTwY+XlbhWgUOJmkFspSw==",
      "optional": true,
      "dependencies": {
        "sparse-bitfield": "^3.0.3"
      }
    },
    "node_modules/@near-js/accounts": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/@near-js/accounts/-/accounts-0.1.4.tgz",
      "integrity": "sha512-zHFmL4OUZ4qHXOE+dDBkYgTNHLWC5RmYUVp9LiuGciO5zFPp7WlxmowJL0QjgXqV1w+dNXq3mgmkfAgYVS8Xjw==",
      "dependencies": {
        "@near-js/crypto": "0.0.5",
        "@near-js/providers": "0.0.7",
        "@near-js/signers": "0.0.5",
        "@near-js/transactions": "0.2.1",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "ajv": "^8.11.2",
        "ajv-formats": "^2.1.1",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "depd": "^2.0.0",
        "near-abi": "0.1.1"
      }
    },
    "node_modules/@near-js/crypto": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/@near-js/crypto/-/crypto-0.0.5.tgz",
      "integrity": "sha512-nbQ971iYES5Spiolt+p568gNuZ//HeMHm3qqT3xT+i8ZzgbC//l6oRf48SUVTPAboQ1TJ5dW/NqcxOY0pe7b4g==",
      "dependencies": {
        "@near-js/types": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/@near-js/keystores": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/@near-js/keystores/-/keystores-0.0.5.tgz",
      "integrity": "sha512-kxqV+gw/3L8/axe9prhlU+M0hfybkxX54xfI0EEpWP2QiUV+qw+jkKolYIbdk5tdEZrGf9jHawh1yFtwP7APPQ==",
      "dependencies": {
        "@near-js/crypto": "0.0.5",
        "@near-js/types": "0.0.4"
      }
    },
    "node_modules/@near-js/keystores-browser": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/@near-js/keystores-browser/-/keystores-browser-0.0.5.tgz",
      "integrity": "sha512-mHF3Vcvsr7xnkaM/reOyxtykbE3OWKV6vQzqyTH2tZYT2OTEnj0KhRT9BCFC0Ra67K1zQLbg49Yc/kDCc5qupA==",
      "dependencies": {
        "@near-js/crypto": "0.0.5",
        "@near-js/keystores": "0.0.5"
      }
    },
    "node_modules/@near-js/keystores-node": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/@near-js/keystores-node/-/keystores-node-0.0.5.tgz",
      "integrity": "sha512-BYmWyGNydfAqi7eYA1Jo8zULL13cxejD2VBr0BBIXx5bJ+BO4TLecsY1xdTBEq06jyWXHa7kV4h8BJzAjvpTLg==",
      "dependencies": {
        "@near-js/crypto": "0.0.5",
        "@near-js/keystores": "0.0.5"
      }
    },
    "node_modules/@near-js/providers": {
      "version": "0.0.7",
      "resolved": "https://registry.npmjs.org/@near-js/providers/-/providers-0.0.7.tgz",
      "integrity": "sha512-qj16Ey+vSw7lHE85xW+ykYJoLPr4A6Q/TsfpwhJLS6zBInSC6sKVqPO1L8bK4VA/yB7V7JJPor9UVCWgRXdNEA==",
      "dependencies": {
        "@near-js/transactions": "0.2.1",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "http-errors": "^1.7.2"
      },
      "optionalDependencies": {
        "node-fetch": "^2.6.1"
      }
    },
    "node_modules/@near-js/providers/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/@near-js/providers/node_modules/http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/@near-js/providers/node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/@near-js/signers": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/@near-js/signers/-/signers-0.0.5.tgz",
      "integrity": "sha512-XJjYYatehxHakHa7WAoiQ8uIBSWBR2EnO4GzlIe8qpWL+LoH4t68MSezC1HwT546y9YHIvePjwDrBeYk8mg20w==",
      "dependencies": {
        "@near-js/crypto": "0.0.5",
        "@near-js/keystores": "0.0.5",
        "js-sha256": "^0.9.0"
      }
    },
    "node_modules/@near-js/transactions": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/@near-js/transactions/-/transactions-0.2.1.tgz",
      "integrity": "sha512-V9tXzkICDPruSxihKXkBhUgsI4uvW7TwXlnZS2GZpPsFFiIUeGrso0wo4uiQwB6miFA5q6fKaAtQa4F2v1s+zg==",
      "dependencies": {
        "@near-js/crypto": "0.0.5",
        "@near-js/signers": "0.0.5",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "js-sha256": "^0.9.0"
      }
    },
    "node_modules/@near-js/types": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/types/-/types-0.0.4.tgz",
      "integrity": "sha512-8TTMbLMnmyG06R5YKWuS/qFG1tOA3/9lX4NgBqQPsvaWmDsa+D+QwOkrEHDegped0ZHQwcjAXjKML1S1TyGYKg==",
      "dependencies": {
        "bn.js": "5.2.1"
      }
    },
    "node_modules/@near-js/utils": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/utils/-/utils-0.0.4.tgz",
      "integrity": "sha512-mPUEPJbTCMicGitjEGvQqOe8AS7O4KkRCxqd0xuE/X6gXF1jz1pYMZn4lNUeUz2C84YnVSGLAM0o9zcN6Y4hiA==",
      "dependencies": {
        "@near-js/types": "0.0.4",
        "bn.js": "5.2.1",
        "depd": "^2.0.0",
        "mustache": "^4.0.0"
      }
    },
    "node_modules/@near-js/wallet-account": {
      "version": "0.0.7",
      "resolved": "https://registry.npmjs.org/@near-js/wallet-account/-/wallet-account-0.0.7.tgz",
      "integrity": "sha512-tmRyieG/wHmuNkg/WGFyKD6iH6atHPbY0rZ5OjOIiteuhZEPgp+z8OBpiQ4qumTa63q46aj/QVSQL0J3+JmBfw==",
      "dependencies": {
        "@near-js/accounts": "0.1.4",
        "@near-js/crypto": "0.0.5",
        "@near-js/keystores": "0.0.5",
        "@near-js/signers": "0.0.5",
        "@near-js/transactions": "0.2.1",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0"
      }
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.14",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.14.tgz",
      "integrity": "sha512-U3PUjAudAdJBeC2pgN8uTIKgxrb4nlDF3SF0++EldXQvQBGkpFZMSnwQiIoDU77tv45VgNkl/L4ouD+rEomujw=="
    },
    "node_modules/@types/node": {
      "version": "20.8.6",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.8.6.tgz",
      "integrity": "sha512-eWO4K2Ji70QzKUqRy6oyJWUeB7+g2cRagT3T/nxYibYcT4y2BDL8lqolRXjTHmkZCdJfIPaY73KbJAZmcryxTQ==",
      "dependencies": {
        "undici-types": "~5.25.1"
      }
    },
    "node_modules/@types/webidl-conversions": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.1.tgz",
      "integrity": "sha512-8hKOnOan+Uu+NgMaCouhg3cT9x5fFZ92Jwf+uDLXLu/MFRbXxlWwGeQY7KVHkeSft6RvY+tdxklUBuyY9eIEKg=="
    },
    "node_modules/@types/whatwg-url": {
      "version": "8.2.2",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
      "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
      "dependencies": {
        "@types/node": "*",
        "@types/webidl-conversions": "*"
      }
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
      "dev": true
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/ajv": {
      "version": "8.12.0",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.12.0.tgz",
      "integrity": "sha512-sRu1kpcO9yLtYxBKvqfTeh9KzZEwO3STyX1HT+4CaDzC6HpTGYhIhPIzj9XuKU7KYDwnaeh5hcOwjy1QuJzBPA==",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz",
      "integrity": "sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==",
      "dependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependenciesMeta": {
        "ajv": {
          "optional": true
        }
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/append-field": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz",
      "integrity": "sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw=="
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "node_modules/asn1": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
      "dependencies": {
        "safer-buffer": "~2.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true
    },
    "node_modules/base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/basic-auth": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz",
      "integrity": "sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==",
      "dependencies": {
        "safe-buffer": "5.1.2"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/basic-auth/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "node_modules/bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ=="
    },
    "node_modules/binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/bn.js": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
    },
    "node_modules/body-parser": {
      "version": "1.20.2",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.2.tgz",
      "integrity": "sha512-ml9pReCu3M61kGlqoTm2umSXTlRTuGTx0bfYj+uIUKKYycG5NtSbeetV3faSU6R7ajOPw0g/J1PvK4qNy7s5bA==",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/borsh": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
      "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dev": true,
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/bson": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-5.5.0.tgz",
      "integrity": "sha512-B+QB4YmDx9RStKv8LLSl/aVIEV3nYJc3cJNNTK2Cd1TL+7P+cNpw9mAPeCgc5K+j01Dv6sxUzcITXDx7ZU3F0w==",
      "engines": {
        "node": ">=14.20.1"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ=="
    },
    "node_modules/busboy": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
      "dependencies": {
        "streamsearch": "^1.1.0"
      },
      "engines": {
        "node": ">=10.16.0"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha512-rsJZYVCgXd08sPqwmaIqjAd5SUTfonV0z/gDJ8D6cN8wQphky1kkAYEqQ+hmDxTw7UihvBfjUVUSY+DBEe44jg=="
    },
    "node_modules/chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://paulmillr.com/funding/"
        }
      ],
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/cliui": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-6.0.0.tgz",
      "integrity": "sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^6.2.0"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true
    },
    "node_modules/concat-stream": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
      "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
      "engines": [
        "node >= 0.8"
      ],
      "dependencies": {
        "buffer-from": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^2.2.2",
        "typedarray": "^0.0.6"
      }
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.1.tgz",
      "integrity": "sha512-ZwrFkGJxUR3EIoXtO+yVE69Eb7KlixbaeAWfBQB9vVsNn/o+Yw69gBWSSDK825hQNdN+wF8zELf3dFNl/kxkUA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-parser": {
      "version": "1.4.6",
      "resolved": "https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.6.tgz",
      "integrity": "sha512-z3IzaNjdwUC2olLIB5/ITd0/setiaFMLYiZJle7xg5Fe9KWAceil7xszYfHHBtDFYLSgJduS2Ty0P1uJdPDJeA==",
      "dependencies": {
        "cookie": "0.4.1",
        "cookie-signature": "1.0.6"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "node_modules/core-util-is": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ=="
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/crypto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz",
      "integrity": "sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==",
      "deprecated": "This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in."
    },
    "node_modules/crypto-js": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/crypto-js/-/crypto-js-4.2.0.tgz",
      "integrity": "sha512-KALDyEYgpY+Rlob/iriUtjV6d5Eq+Y191A5g4UqLAi8CyGP9N1+FdVbkc1SxKc2r4YAYqG8JzO2KGL+AizD70Q=="
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/decamelize": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz",
      "integrity": "sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/dijkstrajs": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/dijkstrajs/-/dijkstrajs-1.0.3.tgz",
      "integrity": "sha512-qiSlmBq9+BCdCA/L46dw8Uy93mloxsPSbwnm5yrKn2vMPiy8KyAskTF6zuV/j5BMsmOGZDPs7KjU+mjb670kfA=="
    },
    "node_modules/dotenv": {
      "version": "16.3.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.3.1.tgz",
      "integrity": "sha512-IPzF4w4/Rd94bA9imS68tZBaYyBWSCE47V1RGuMrB94iyTOIEwRmVL2x/4An+6mETpLrKJ5hQkB8W4kFAadeIQ==",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/motdotla/dotenv?sponsor=1"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/encode-utf8": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/encode-utf8/-/encode-utf8-1.0.3.tgz",
      "integrity": "sha512-ucAnuBEhUK4boH2HjVYG5Q2mQyPorvv0u/ocS+zhdw0S8AlHYY+GOFhP1Gio5z4icpP2ivFSvhtFjQi8+T9ppw=="
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "dependencies": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "4.18.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz",
      "integrity": "sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.1",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.5.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/express-session": {
      "version": "1.17.3",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.17.3.tgz",
      "integrity": "sha512-4+otWXlShYlG1Ma+2Jnn+xgKUZTMJ5QD3YvfilX3AcocOAbIkVylSWEklzALe/+Pu4qV6TYBj5GwOBFfdKqLBw==",
      "dependencies": {
        "cookie": "0.4.2",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.0.2",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/express-session/node_modules/cookie": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
      "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express-useragent": {
      "version": "1.0.15",
      "resolved": "https://registry.npmjs.org/express-useragent/-/express-useragent-1.0.15.tgz",
      "integrity": "sha512-eq5xMiYCYwFPoekffMjvEIk+NWdlQY9Y38OsTyl13IvA728vKT+q/CSERYWzcw93HGBJcIqMIsZC5CZGARPVdg==",
      "engines": {
        "node": ">=4.5"
      }
    },
    "node_modules/express/node_modules/body-parser": {
      "version": "1.20.1",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz",
      "integrity": "sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.1",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/express/node_modules/cookie": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz",
      "integrity": "sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express/node_modules/raw-body": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q=="
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dev": true,
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-extra": {
      "version": "11.1.1",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.1.1.tgz",
      "integrity": "sha512-MGIE4HOvQCeUCzmlHs0vXpih4ysz4wg9qiSAu6cd42lVwPbTM1TjV7RusoyQqMmk/95gdQZX72u+YW+c3eEpFQ==",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=14.14"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.1.tgz",
      "integrity": "sha512-2DcsyfABl+gVHEfCOaTrWgyt+tb6MSEGmKq+kI5HwLbIYgjgmMcV8KQ41uaKz1xxUcn9tJtgFbQUEVcEbd0FYw==",
      "dependencies": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ=="
    },
    "node_modules/has": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.4.tgz",
      "integrity": "sha512-qdSAmqLF6209RFj4VVItywPMbm3vWylknmB3nvNiUIs72xAimcM8nVYxYr7ncvZq5qzk9MKIZR8ijqD/1QuYjQ==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz",
      "integrity": "sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/hybrid-crypto-js": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/hybrid-crypto-js/-/hybrid-crypto-js-0.2.4.tgz",
      "integrity": "sha512-lm4iQn14rApw/7yLOnd9eZu8JaxD8+BB34bQaZY7faKiT78tVjxSwOabOPO2LSIS0QMANhjMXNLNUXyuAJwYXw==",
      "dependencies": {
        "node-forge": "^0.8.5"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/ip": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
      "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ=="
    },
    "node_modules/js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug=="
    },
    "node_modules/jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/kareem": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.5.1.tgz",
      "integrity": "sha512-7jFxRVm+jD+rkq3kY0iZDJfsO2/t4BBPeEb2qKn2lR/9KhuksYk5hxzfRYWMPV8P/x2d0kHD306YyWLzjjH+uA==",
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w=="
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg=="
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA=="
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw=="
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA=="
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw=="
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg=="
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "optional": true
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/mkdirp": {
      "version": "0.5.6",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
      "dependencies": {
        "minimist": "^1.2.6"
      },
      "bin": {
        "mkdirp": "bin/cmd.js"
      }
    },
    "node_modules/mongodb": {
      "version": "5.9.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-5.9.0.tgz",
      "integrity": "sha512-g+GCMHN1CoRUA+wb1Agv0TI4YTSiWr42B5ulkiAfLLHitGK1R+PkSAf3Lr5rPZwi/3F04LiaZEW0Kxro9Fi2TA==",
      "dependencies": {
        "bson": "^5.5.0",
        "mongodb-connection-string-url": "^2.6.0",
        "socks": "^2.7.1"
      },
      "engines": {
        "node": ">=14.20.1"
      },
      "optionalDependencies": {
        "@mongodb-js/saslprep": "^1.1.0"
      },
      "peerDependencies": {
        "@aws-sdk/credential-providers": "^3.188.0",
        "@mongodb-js/zstd": "^1.0.0",
        "kerberos": "^1.0.0 || ^2.0.0",
        "mongodb-client-encryption": ">=2.3.0 <3",
        "snappy": "^7.2.2"
      },
      "peerDependenciesMeta": {
        "@aws-sdk/credential-providers": {
          "optional": true
        },
        "@mongodb-js/zstd": {
          "optional": true
        },
        "kerberos": {
          "optional": true
        },
        "mongodb-client-encryption": {
          "optional": true
        },
        "snappy": {
          "optional": true
        }
      }
    },
    "node_modules/mongodb-connection-string-url": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.6.0.tgz",
      "integrity": "sha512-WvTZlI9ab0QYtTYnuMLgobULWhokRjtC7db9LtcVfJ+Hsnyr5eo6ZtNAt3Ly24XZScGMelOcGtm7lSn0332tPQ==",
      "dependencies": {
        "@types/whatwg-url": "^8.2.1",
        "whatwg-url": "^11.0.0"
      }
    },
    "node_modules/mongoose": {
      "version": "7.6.2",
      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-7.6.2.tgz",
      "integrity": "sha512-OVx6RWbfNOzBbfTvXoOkgZmaizdXDU/B/KbBjietXQoInSg/OSULjOavXJzL51XWFkbefqkOvbeE07DfvW6FkQ==",
      "dependencies": {
        "bson": "^5.5.0",
        "kareem": "2.5.1",
        "mongodb": "5.9.0",
        "mpath": "0.9.0",
        "mquery": "5.0.0",
        "ms": "2.1.3",
        "sift": "16.0.1"
      },
      "engines": {
        "node": ">=14.20.1"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mongoose"
      }
    },
    "node_modules/mongoose/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/morgan": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/morgan/-/morgan-1.10.0.tgz",
      "integrity": "sha512-AbegBVI4sh6El+1gNwvD5YIck7nSA36weD7xvIxG4in80j/UoK8AEGaWnnz8v1GxonMCltmlNs5ZKbGvl9b1XQ==",
      "dependencies": {
        "basic-auth": "~2.0.1",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-finished": "~2.3.0",
        "on-headers": "~1.0.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/morgan/node_modules/on-finished": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
      "integrity": "sha512-ikqdkGAAyf/X/gPhXGvfgAytDZtDbr+bkNUJ0N9h5MI/dmdgCs3l6hoHrcUv41sRKew3jIwrp4qQDXiK99Utww==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/mpath": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/mquery": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/mquery/-/mquery-5.0.0.tgz",
      "integrity": "sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==",
      "dependencies": {
        "debug": "4.x"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/mquery/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/mquery/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/multer": {
      "version": "1.4.5-lts.1",
      "resolved": "https://registry.npmjs.org/multer/-/multer-1.4.5-lts.1.tgz",
      "integrity": "sha512-ywPWvcDMeH+z9gQq5qYHCCy+ethsk4goepZ45GLD63fOu0YcNecQxi64nDs3qluZB+murG3/D4dJ7+dGctcCQQ==",
      "dependencies": {
        "append-field": "^1.0.0",
        "busboy": "^1.0.0",
        "concat-stream": "^1.5.2",
        "mkdirp": "^0.5.4",
        "object-assign": "^4.1.1",
        "type-is": "^1.6.4",
        "xtend": "^4.0.0"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
      "bin": {
        "mustache": "bin/mustache"
      }
    },
    "node_modules/near-abi": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/near-abi/-/near-abi-0.1.1.tgz",
      "integrity": "sha512-RVDI8O+KVxRpC3KycJ1bpfVj9Zv+xvq9PlW1yIFl46GhrnLw83/72HqHGjGDjQ8DtltkcpSjY9X3YIGZ+1QyzQ==",
      "dependencies": {
        "@types/json-schema": "^7.0.11"
      }
    },
    "node_modules/near-api-js": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-2.1.4.tgz",
      "integrity": "sha512-e1XicyvJvQMtu7qrG8oWyAdjHJJCoy+cvbW6h2Dky4yj7vC85omQz/x7IgKl71VhzDj2/TGUwjTVESp6NSe75A==",
      "dependencies": {
        "@near-js/accounts": "0.1.4",
        "@near-js/crypto": "0.0.5",
        "@near-js/keystores": "0.0.5",
        "@near-js/keystores-browser": "0.0.5",
        "@near-js/keystores-node": "0.0.5",
        "@near-js/providers": "0.0.7",
        "@near-js/signers": "0.0.5",
        "@near-js/transactions": "0.2.1",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "@near-js/wallet-account": "0.0.7",
        "ajv": "^8.11.2",
        "ajv-formats": "^2.1.1",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "near-abi": "0.1.1",
        "node-fetch": "^2.6.1",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/near-api-js/node_modules/http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/near-api-js/node_modules/http-errors/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/near-api-js/node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-fetch/node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/node-fetch/node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/node-fetch/node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/node-forge": {
      "version": "0.8.5",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-0.8.5.tgz",
      "integrity": "sha512-vFMQIWt+J/7FLNyKouZ9TazT74PRV3wgv9UT4cRjC8BffxFbKXkgIWR42URCPSnHm/QDz6BOlb2Q0U4+VQT67Q==",
      "engines": {
        "node": ">= 4.5.0"
      }
    },
    "node_modules/node-rsa": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/node-rsa/-/node-rsa-1.1.1.tgz",
      "integrity": "sha512-Jd4cvbJMryN21r5HgxQOpMEqv+ooke/korixNNK3mGqfGJmy0M77WDDzo/05969+OkMy3XW1UuZsSmW9KQm7Fw==",
      "dependencies": {
        "asn1": "^0.2.4"
      }
    },
    "node_modules/nodemailer": {
      "version": "6.9.6",
      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.9.6.tgz",
      "integrity": "sha512-s7pDtWwe5fLMkQUhw8TkWB/wnZ7SRdd9HRZslq/s24hlZvBP3j32N/ETLmnqTpmj4xoBZL9fOWyCIZ7r2HORHg==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/nodemon": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.0.1.tgz",
      "integrity": "sha512-g9AZ7HmkhQkqXkRc20w+ZfQ73cHLbE8hnPbtaFbFtCumZsjyMhKk9LajQ07U5Ux28lvFjZ5X7HvWR1xzU8jHVw==",
      "dev": true,
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^3.2.7",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^7.5.3",
        "simple-update-notifier": "^2.0.0",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/nopt": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
      "integrity": "sha512-NWmpvLSqUrgrAC9HCuxEvb+PSloHpqVu+FqcO4eeF2h5qYRhA7ev6KvelyQAKtegUbC6RypJnlEOhd8vloNKYg==",
      "dev": true,
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha512-f+4n+vC6s4ysy7YO7O2gslWZBUu8Qj2i2OUJOvjRxQva7jVjYjB29jrr9NCjmxZQR0gzrOcv1RnqoYOeMs5VRQ==",
      "dependencies": {
        "capability": "^0.2.5"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.0",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.0.tgz",
      "integrity": "sha512-HQ4J+ic8hKrgIt3mqk6cVOVrW2ozL4KdvHlqpBv9vDYWx9ysAgENAdvy4FoGF+KFdhR7nQTNm5J0ctAeOwn+3g==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path": {
      "version": "0.12.7",
      "resolved": "https://registry.npmjs.org/path/-/path-0.12.7.tgz",
      "integrity": "sha512-aXXC6s+1w7otVF9UletFkFcDsJeO7lSZBPUQhtb5O0xJe8LtYhj/GxldoL09bBj9+ZmE2hNoHqQSFMN5fikh4Q==",
      "dependencies": {
        "process": "^0.11.1",
        "util": "^0.10.3"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pngjs": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/pngjs/-/pngjs-5.0.0.tgz",
      "integrity": "sha512-40QW5YalBNfQo5yRYmiw7Yz6TKKVr3h6970B2YE+3fQpsWcrbj1PzJgxeJ19DRQjhMbKPIuMY8rFaXc8moolVw==",
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/process": {
      "version": "0.11.10",
      "resolved": "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
      "integrity": "sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==",
      "engines": {
        "node": ">= 0.6.0"
      }
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag=="
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true
    },
    "node_modules/punycode": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.0.tgz",
      "integrity": "sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/qrcode": {
      "version": "1.5.3",
      "resolved": "https://registry.npmjs.org/qrcode/-/qrcode-1.5.3.tgz",
      "integrity": "sha512-puyri6ApkEHYiVl4CFzo1tDkAZ+ATcnbJrJ6RiBM1Fhctdn/ix9MTE3hRph33omisEbC/2fcfemsseiKgBPKZg==",
      "dependencies": {
        "dijkstrajs": "^1.0.1",
        "encode-utf8": "^1.0.3",
        "pngjs": "^5.0.0",
        "yargs": "^15.3.1"
      },
      "bin": {
        "qrcode": "bin/qrcode"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha512-iv7LhNVO047HzYR3InF6pUcUsPQiHTM1Qal51DcGSuZFBil1aBBWG5eHPNek7bvILMaYJ/8RU1e8w1AMdHmLQQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/readable-stream/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/require-main-filename": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/require-main-filename/-/require-main-filename-2.0.0.tgz",
      "integrity": "sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg=="
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "node_modules/semver": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "dependencies": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw=="
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/side-channel": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
      "dependencies": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/sift": {
      "version": "16.0.1",
      "resolved": "https://registry.npmjs.org/sift/-/sift-16.0.1.tgz",
      "integrity": "sha512-Wv6BjQ5zbhW7VFefWusVP33T/EM0vYikCaQ2qR8yULbsilAT8/wQaXvuQ3ptGLpoKx+lihJE3y2UTgKDyyNHZQ=="
    },
    "node_modules/simple-update-notifier": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
      "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
      "dev": true,
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
      "engines": {
        "node": ">= 6.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/socks": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.1.tgz",
      "integrity": "sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==",
      "dependencies": {
        "ip": "^2.0.0",
        "smart-buffer": "^4.2.0"
      },
      "engines": {
        "node": ">= 10.13.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "optional": true,
      "dependencies": {
        "memory-pager": "^1.0.2"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/streamsearch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/string_decoder/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/stripe": {
      "version": "13.6.0",
      "resolved": "https://registry.npmjs.org/stripe/-/stripe-13.6.0.tgz",
      "integrity": "sha512-0VSzva12onR75i708y2CB+UCeQKfPeLRkOCaGZYzHXiXiubB0C3pLKq+MPNfnajzfOeO6EVBita6rEAFGj0ZGA==",
      "dependencies": {
        "@types/node": ">=8.1.0",
        "qs": "^6.11.0"
      },
      "engines": {
        "node": ">=12.*"
      }
    },
    "node_modules/sud-libs": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/sud-libs/-/sud-libs-1.2.1.tgz",
      "integrity": "sha512-L4C521aB0mklliDb8Ir3xXFTCZsfFA6ssVfHfMlwShmkofITHdgDl5CO9xqN0pSlzZS95y6Bi20xBtyfjfWhrg==",
      "dependencies": {
        "fs-extra": "^11.1.1",
        "node-fetch": "^2.6.9",
        "nodemailer": "^6.9.1",
        "qrcode": "^1.5.3"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
      "dev": true,
      "dependencies": {
        "nopt": "~1.0.10"
      },
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/tr46": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
      "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
      "dependencies": {
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typedarray": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
      "integrity": "sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA=="
    },
    "node_modules/u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "node_modules/uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "dependencies": {
        "random-bytes": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true
    },
    "node_modules/undici-types": {
      "version": "5.25.3",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.25.3.tgz",
      "integrity": "sha512-Ga1jfYwRn7+cP9v8auvEXN1rX3sWqlayd4HP7OKk4mZWylEmu3KzXDUGrQUN6Ol7qo1gPvB2e5gX6udnyEPgdA=="
    },
    "node_modules/universalify": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.0.tgz",
      "integrity": "sha512-hAZsKq7Yy11Zu1DE0OzWjw7nnLZmJZYTDZZyEFHZdUhV8FkH5MCfoU1XMaxXovpyW5nq5scPqq0ZDP9Zyl04oQ==",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/url": {
      "version": "0.11.3",
      "resolved": "https://registry.npmjs.org/url/-/url-0.11.3.tgz",
      "integrity": "sha512-6hxOLGfZASQK/cijlZnZJTq8OXAkt/3YGfQX45vvMYXpZoo8NdWZcY73K108Jf759lS1Bv/8wXnHDTSz17dSRw==",
      "dependencies": {
        "punycode": "^1.4.1",
        "qs": "^6.11.2"
      }
    },
    "node_modules/url/node_modules/punycode": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz",
      "integrity": "sha512-jmYNElW7yvO7TV33CjSmvSiE2yco3bV2czu/OzDKdMNVZQWfxCblURLhf+47syQRBntjfLdd/H0egrzIG+oaFQ=="
    },
    "node_modules/url/node_modules/qs": {
      "version": "6.11.2",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.2.tgz",
      "integrity": "sha512-tDNIz22aBzCDxLtVH++VnTfzxlfeK5CbqohpSqpJgj1Wg/cQbStNAz3NuqCs5vV+pjBsK4x4pN9HlVh7rcYRiA==",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/util": {
      "version": "0.10.4",
      "resolved": "https://registry.npmjs.org/util/-/util-0.10.4.tgz",
      "integrity": "sha512-0Pm9hTQ3se5ll1XihRic3FDIku70C+iHUdT/W926rSgHV5QgXsYbKZN8MSC3tJtSkhuROzvsQjAaFENRXr+19A==",
      "dependencies": {
        "inherits": "2.0.3"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "node_modules/util/node_modules/inherits": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
      "integrity": "sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw=="
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/whatwg-url": {
      "version": "11.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
      "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
      "dependencies": {
        "tr46": "^3.0.0",
        "webidl-conversions": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/which-module": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/which-module/-/which-module-2.0.1.tgz",
      "integrity": "sha512-iBdZ57RDvnOR9AGBhML2vFZf7h8vmBjhoaZqODJBFWHVtKkDmKuHai3cx5PgVMrX5YDNp27AofYbAwctSS+vhQ=="
    },
    "node_modules/wrap-ansi": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
      "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/y18n": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-4.0.3.tgz",
      "integrity": "sha512-JKhqTOwSrqNA1NY5lSztJ1GrBiUodLMmIZuLiDaMRJ+itFd+ABVE8XBjOvIWL+rSqNDC74LCSFmlb/U4UZ4hJQ=="
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "node_modules/yargs": {
      "version": "15.4.1",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-15.4.1.tgz",
      "integrity": "sha512-aePbxDmcYW++PaqBsJ+HYUFwCdv4LVvdnhBy78E57PIor8/OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==",
      "dependencies": {
        "cliui": "^6.0.0",
        "decamelize": "^1.2.0",
        "find-up": "^4.1.0",
        "get-caller-file": "^2.0.1",
        "require-directory": "^2.1.1",
        "require-main-filename": "^2.0.0",
        "set-blocking": "^2.0.0",
        "string-width": "^4.2.0",
        "which-module": "^2.0.0",
        "y18n": "^4.0.0",
        "yargs-parser": "^18.1.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/yargs-parser": {
      "version": "18.1.3",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-18.1.3.tgz",
      "integrity": "sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==",
      "dependencies": {
        "camelcase": "^5.0.0",
        "decamelize": "^1.2.0"
      },
      "engines": {
        "node": ">=6"
      }
    }
  }
}

'''
'''--- package.json ---
{
  "name": "final",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "server": "node ./src/index.js",
    "dev": "nodemon --inspect ./src/index.js",
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "npm i && npm i nodemon --save-dev"
  },
  "author": "",
  "license": "ISC",
  "type": "module",
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "body-parser": "^1.20.2",
    "cookie-parser": "^1.4.6",
    "cors": "^2.8.5",
    "crypto": "^1.0.1",
    "crypto-js": "^4.2.0",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "express-session": "^1.17.3",
    "express-useragent": "^1.0.15",
    "fs-extra": "^11.1.1",
    "hybrid-crypto-js": "^0.2.4",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^7.6.2",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "near-api-js": "^2.1.4",
    "node-rsa": "^1.1.1",
    "path": "^0.12.7",
    "qrcode": "^1.5.3",
    "stripe": "^13.6.0",
    "sud-libs": "^1.2.1",
    "url": "^0.11.3"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}

'''
'''--- src/config/database.js ---
import mongoose from 'mongoose';
import dotenv from 'dotenv';
dotenv.config();

const DB_URL = process.env.ATLAS_URL || 'mongodb://127.0.0.1:27017/Delirate';
async function connect() {
    try {
        await mongoose.connect(DB_URL, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        })
        console.log('Connected to database');
    } 
    catch (error) {
        console.log('Error connecting to database');
    }
}

export default { connect };
'''
'''--- src/index.js ---
import express from 'express';
import cookie from 'cookie-parser';
import session from 'express-session';
// import { dirname } from 'path';
import cors from 'cors';
import dotenv from 'dotenv';
import database from './config/database.js';
import router from './resources/routes.js';
import bodyParser from 'body-parser';
import useragent from 'express-useragent';
import morgan from 'morgan';
dotenv.config();

import Customer from './resources/Customer/Model.js';
import Order from './resources/Order/Model.js';
import Account from './resources/Account/Model.js';
import Checkout from './resources/Checkout/Model.js';
import Item from './resources/Item/Model.js';

import { loadContract, sendNear } from './utils/index.js';

const app = express();
const PORT = process.env.SERVER_PORT || 8080;
database.connect();

import stripeAPI from 'stripe';
import {
    GET_NearPaymentQR,
    GET_StripePaymentGateway,
    PUT_NearPaymentQR,
    PUT_StripePaymentGateWay,
} from './resources/Account/Resolver.js';

app.use(cors());
app.use(useragent.express());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('src/public'));
app.use(express.json());
app.use(cookie('Origin'));
app.use(morgan('dev'));
app.use(
    session({
        secret: 'nkeyskuo',
        resave: false,
        saveUninitialized: true,
        cookie: { maxAge: 30000000 },
    }),
);

router(app);

// const stripeGateway = stripeAPI('sk_test_51OEv6lLqoSvXr7Wa201ij0m5aWuB2CjGg3g32szb8grLYHwPShQFSyeeroV8n8ajzFVrJxBPB2FekYFq4AYROscc00nCuvAKGi');
let clientUrl = process.env.CLIENT_URL || 'http://192.168.1.7:3000';

async function HandleInfoCustomer(name, email, phone, address) {
    let exist_customer = await Customer.findOne({
        email,
    });

    let customer =
        exist_customer ||
        (await new Customer({
            name,
            phone,
            email,
            address,
        }).save());

    return customer;
}

function groupByField(arr, field) {
    return arr.reduce((groups, item) => {
        const key = item[field];
        (groups[key] = groups[key] || []).push(item);
        return groups;
    }, {});
}

app.post('/checkout', async (req, res) => {
    const { name, email, phone, address, note, items, total_price, payment_type } = req.body;
    console.log('--------------- Calling Checkout API... -----------------');
    try {
        // Check Customer info
        let customer = await HandleInfoCustomer(name, email, phone, address);

        if (!customer) {
            return res.json({
                success: false,
                status: 500,
                msg: 'Error create customer',
            });
        }
        console.log('1.Checked Customer Info');

        // Check Store info
        let packages = groupByField(items, 'store')
        
        // return res.json(packages)
        console.log('2.Checked Store Info');

        const ISBN_code = 'QC' + Math.floor(Math.random() * (99999999 - 10000000) + 10000000);

        for (const key in packages) {
            var total = 0;
            await new Order({
                ISBN_code: ISBN_code,
                items: packages[key].map(item => {
                    total += item.price;
                    return {
                        info: item._id,
                        qty: item.quantity,
                        price: item.price
                    }
                }),
                customer,
                note,
                payment_type,
                total_price: (total * 1.1).toFixed(2),
                store: key,
                status: payment_type !== 'Cash' ? 'Confirmed' : 'Requested',
            }).save()
        };

        console.log('3.Order Created');

        // Create new Checkout
        let checkout = await new Checkout({
            caption: 'Delirate checkout',
            trade_code: Math.floor(Math.random() * (9999999999 - 1000000000) + 1000000000),
            ISBN_code: ISBN_code,
            status: 'Waiting',
        }).save();

        if (!checkout) {
            return res.json({
                success: false,
                status: 400,
                msg: 'Error create checkout',
            });
        }
        console.log('4.Checkout Created');

        // Create new delivery by contract
        const contract = await loadContract();
        await contract.create_delivery({
            args: {
                _isbn_code: ISBN_code, // FK order _isbn_code
                _sender: "Delirate",
                _receiver: customer._id,
                _status: "Ready",
                _note: 'Package delivered',
                _image: '',
                _location: 'Store address',
                _track_signer: "nkeyskuo196@testnet",
            },
        });
        console.log('5.Delivery Created');

        // Handle Payment Type
        if (payment_type === 'Cash') {
            return res.json({
                success: true,
                status: 200,
                msg: 'Order Created',
                code: ISBN_code,
                url: `${clientUrl}/success`,
            });
        } else if (payment_type === 'Banking') {
            return res.redirect(`/stripe-payment?code=${ISBN_code}`);
        } else if (payment_type === 'Crypto') {
            return res.redirect(
                `/near-payment?code=${ISBN_code}&amount=${(total_price * 0.9).toFixed(2)}`,
            );
        }

        return res.json({
            success: false,
            status: 300,
            msg: 'Payment type Invalid',
        });
    } catch (error) {
        return res.json({
            success: false,
            status: 500,
            msg: error,
        });
    }
});

app.get('/stripe-payment', GET_StripePaymentGateway);
app.put('/stripe-success', PUT_StripePaymentGateWay);

app.get('/near-payment', GET_NearPaymentQR);
app.put('/near-payment', PUT_NearPaymentQR);

app.get('/test_sendNear', async (req, res, next) => {
    const result = await sendNear();

    return res.json(result);
});

app.listen(PORT, () => {
    console.log(`Server is running on ${PORT}`);
});

'''
'''--- src/middlewares/fileapis.js ---
import fs from 'fs-extra';

const fileapis = {
    createSync: (path, callback) => {
        if(!fs.existsSync(path)) {
            fs.mkdirSync(path, { recursive: true }, err => {
                return callback(err);
            })
        }
    },

    updateSync: (oldpath, callback) => {
        fs.readFile(oldpath, (err, data) => {
            if(err) {
                return callback(err);
            }

            this.deleteSync(oldpath, callback);
        })   
    },

    deleteSync: (path, callback) => {
        fs.unlink(path, err => {
            if(err)
                return callback(err);
        });
    },

    removeDirectory: (path, callback) => {
        fs.rmdir(path, {recursive: true}, err => {
            if(err)
                return callback(err);
        })
    },

    isExist: (path) => {
        try {
            if(fs.existsSync(path)) {
                return true;
            }            
        } catch (err) {
            console.log(err);
        }

        return false;
    },

    renameDir: (oldPath, newPath) => {
        if(oldPath != newPath) {
            if(fs.existsSync(newPath)) {
                this.removeDirectory(newPath);
            }
            return fs.renameSync(oldPath, newPath)
        }
    }
   
}

export default fileapis
'''
'''--- src/middlewares/multer.js ---
import multer from 'multer';
import fileapis from './fileapis.js';

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const folder = req.headers['folder-path'];
        console.log(folder);
        
        fileapis.createSync('./src/public/uploads' + folder, err => {
            console.log(err);
        });

        cb(null, './src/public/uploads' + folder);
    },
    
    filename: (req, file, cb) => {
        const folder = req.headers['folder-path'];
        let ext = file.originalname.substring(file.originalname.lastIndexOf('.'));
        let filename = Date.now() + ext;
        
        if(folder.endsWith('avatar')) {
            filename = 'avatar' + ext;
        }

        cb(null, filename);
    }
})

const upload = multer({
    storage: storage,
    limits: { fieldSize: 10 * 1024 * 1024 }
})

export default upload;

'''
'''--- src/resources/Account/Model.js ---
import mongoose from 'mongoose';
const Schema = mongoose.Schema;

const Account = new Schema(
	{
		email: { type: String, required: true, unique: true },
		hashed_email: { type: String, required: true},
		avatar: { type: String },
		password: { type: String, required: true },
		name: { type: String, required: true },
		location: { type: String, required: true },
		phone: { type: String, required: true },
		role: { type: String, required: true },
		status: { type: String, default: 'unverified' },
		store: { type: mongoose.Types.ObjectId, ref: 'Store'}
	},
	{
		timestamps: true,
	}
);

export default mongoose.model('Account', Account);
'''
'''--- src/resources/Account/Resolver.js ---
import Account from './Model.js';
import OTP from '../OTP/Model.js';
import Order from '../Order/Model.js';
import Checkout from '../Checkout/Model.js';
import Customer from '../Customer/Model.js';
import Store from '../Store/Model.js';

import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import crypto from 'crypto';
import { sendMail } from 'sud-libs';
import QRCode from 'qrcode';
import { hashBcrypt, hashSHA256 } from '../../utils/crypto/crypto.js';
import { mailForm, loadContract, getAccountBalance, sendNear } from '../../utils/index.js';
import dotenv from 'dotenv';
import createStripeSession from '../../utils/payments/stripe.js';

dotenv.config();

const apiUrl = process.env.API_URL || 'http://192.168.1.7:8080';
const secretKey = process.env.SECRET_KEY || 'nkeyskuo';

const auth = {
    user: process.env.HOST_EMAIL,
    pass: process.env.HOST_PASSWORD,
};

async function POST_Register(req, res, next) {
    const { email, password, password_confirm, name, location, phone, role, folder } = req.body;

    const file = req.file;
    if (!file) {
        return res.json({
            success: false,
            status: 300,
            msg: 'Image file not found',
        });
    }

    if (!email.includes('@')) {
        return res.json({
            success: false,
            status: 300,
            msg: 'Email invalid',
        });
    }

    if (password != password_confirm) {
        return res.json({
            success: false,
            status: 300,
            msg: 'Password not same',
        });
    }

    if (password.length < 6) {
        return res.json({
            success: false,
            status: 300,
            msg: 'Password at least 6 characters',
        });
    }

    if (phone.length != 10) {
        return res.json({
            success: false,
            status: 300,
            msg: 'Phone number invalid',
        });
    }

    const my_account = await Account.findOne({ email });

    if (my_account) {
        return res.json({
            success: false,
            status: 300,
            msg: 'Account already exist',
        });
    }

    try {
        let new_account = await new Account({
            email,
            name,
            location,
            phone,
            role,
            hashed_email: hashSHA256(email),
            password: hashBcrypt(password),
            avatar: folder + '/' + file.filename,
        }).save();

        await new Customer({
            email,
            name,
            address: location,
            phone,
        }).save();

        // Encode URL
        const token = jwt.sign({ id: new_account._id }, secretKey);
        const qrcode = await QRCode.toDataURL(`${apiUrl}/account/verify?token=${token}`);

        // Send mail verified
        const options = {
            from: auth.user,
            to: email,
            subject: 'Xác thực tài khoản từ Delirate',
            text: `Xin chào ${name}`,
            attachDataUrls: true,
            html: mailForm({
                logo_link: process.env.LOGO_LINK || '',
                caption: `Xác thực tài khoản từ Delirate`,
                content: `
                    <img src="${qrcode}" />
                    <h5>Vui lòng quét QR code để xác thực tài khoản</h5>
                `,
                // `
                //     <img src="${qrcode}" />
                //     <h5>Vui lòng quét QR code để xác thực tài khoản</h5>
                // `
            }),
        };

        sendMail(auth, options, (err) => {
            if (err) console.log(err);
        });

        return res.json({
            success: true,
            status: 200,
            msg: 'Account registed',
        });
    } catch (err) {
        return res.json({
            success: false,
            status: 500,
            msg: 'Register account rejected. ' + err,
        });
    }
}

async function POST_Login(req, res, next) {
    const { email, password } = req.body;

    const my_account = await Account.findOne({ email }).populate({ path: 'store' }).lean();

    if (!my_account) {
        return res.json({
            success: false,
            status: 300,
            msg: 'Account invalid',
        });
    }

    if (my_account.status !== 'activated') {
        return res.json({
            success: false,
            status: 300,
            msg: 'Account not activated',
        });
    }

    if (!bcrypt.compareSync(password, my_account.password)) {
        return res.json({
            success: false,
            status: 300,
            msg: 'Incorrect password',
        });
    }

    let customer = await Customer.findOne({ email: my_account.email }).then(async (customer) => {
        if (customer) {
            return customer;
        }

        return await new Customer({
            name: my_account.name,
            email: my_account.email,
            address: my_account.location,
            phone: my_account.phone,
        }).save();
    });

    // Generate OTP and Send OTP
    const user_info = {
        email: my_account.email,
        hashed_email: my_account.hashed_email,
        name: my_account.name,
        avatar: apiUrl + '/uploads' + my_account.avatar,
        location: my_account.location,
        phone: my_account.phone,
        role: my_account.role,
        customer_id: customer._id,
    };

    if (my_account.role === 'retailer') {
        user_info['store'] = my_account.store;
    }

    try {
        let otp = await new OTP({
            email: my_account.email,
            code: Math.floor(Math.random() * (9999 - 1000) + 1000),
        }).save();
        const token = jwt.sign({ user: user_info, code: otp.code }, secretKey);

        const options = {
            from: auth.user,
            to: my_account.email,
            subject: `${otp.code} Mã xác nhận đăng nhập tài khoản Delirate`,
            html: mailForm({
                caption: 'Mã xác nhận đăng nhập',
                content: ` 
                <h1>${otp.code}</h1>
                `,
            }),
        };

        sendMail(auth, options, (err) => {
            if (err) console.log(err);
        });

        return res.json({
            success: true,
            status: 200,
            msg: 'OTP sent',
            token: token,
        });
    } catch (error) {
        return res.json({
            success: false,
            status: 500,
            msg: 'OTP cannot send',
        });
    }
}

async function GET_Verify(req, res, next) {
    const { token } = req.query;
    jwt.verify(token, secretKey, async (error, decoded) => {
        if (error) {
            return res.json({
                success: false,
                status: 500,
                msg: 'JWT invalid',
            });
        }

        return await Account.findByIdAndUpdate(decoded.id, { $set: { status: 'activated' } })
            .then(async (account) => {
                // const contract = await loadContract();

                // switch (account.role) {
                //     case 'customer':
                //         let result_customer = await contract.register_customer({
                //             args: {
                //                 hashed_email: account.hashed_email,
                //                 name: account.name,
                //                 phone: account.phone,
                //             },
                //         });

                //         console.log('Customer registed ' + result_customer);
                //         break;
                //     case 'retailer':
                //         let result_retailer = await contract.register_retailer({
                //             args: {
                //                 hashed_email: account.hashed_email,
                //                 name: account.name,
                //                 location: account.location,
                //             },
                //         });

                //         console.log('Retailer registed ' + result_retailer);
                //         break;
                //     default:
                //         break;
                // }

                return res.json({
                    success: true,
                    status: 200,
                    msg: 'Account verified ' + `[${account.role}]` + `[${account.hashed_email}]`,
                });
            })
            .catch((err) => {
                return res.json({
                    success: false,
                    status: 500,
                    msg: err,
                });
            });
    });
}

// <----------------------------- LOGIN QRCODE ------------------------------>

let tokens = [];

async function GET_LoginQR(req, res, next) {
    const token = crypto.randomBytes(20).toString('hex');
    tokens[token] = { createdAt: Date.now() };

    const browser = req.useragent.browser;
    const os = req.useragent.os;

    tokens[token].agent = { browser, os, timestamp: new Date().toLocaleString('vi-vn'), location: 'Ho Chi Minh City' };

    const loginUrl = apiUrl + `/account/login_qr?token=${token}`;

    return await QRCode.toDataURL(loginUrl, (err, url) => {
        if (err) {
            return res.json({
                success: false,
                status: 500,
                msg: 'Error generating QRCODE',
            });
        }

        return res.json({
            success: true,
            status: 200,
            token: token,
            data: url,
        });
    });
}

async function POST_LoginQR(req, res, next) {
    const { token } = req.query;
    const tokenData = tokens[token];
    const { email } = req.body;
    const expiresIn = 300;

    if (!tokenData) {
        return res.json({
            success: false,
            status: 400,
            msg: 'Invalid token',
        });
    }

    const timeElapsed = (Date.now() - tokenData.createdAt) / 1000;
    if (timeElapsed > expiresIn) {
        delete tokens[token];
        return res.json({
            success: false,
            status: 400,
            msg: 'Token expired',
        });
    }

    let my_account = await Account.findOne({ email }).populate({ path: 'store' }).lean();

    let customer = await Customer.findOne({ email: my_account.email }).then(async (customer) => {
        if (customer) {
            return customer;
        }

        return await new Customer({
            name: my_account.name,
            email: my_account.email,
            address: my_account.location,
            phone: my_account.phone,
        }).save();
    });

    const user_info = {
        email: my_account.email,
        hashed_email: my_account.hashed_email,
        name: my_account.name,
        avatar: apiUrl + '/uploads' + my_account.avatar,
        location: my_account.location,
        phone: my_account.phone,
        role: my_account.role,
        customer_id: customer._id,
    };

    if (my_account.role === 'retailer') {
        user_info['store'] = my_account.store;
    }

    // tokens[token].verify = true;
    tokens[token].user = user_info;
    return res.json({
        success: true,
        status: 200,
        agent: tokenData.agent,
        token: token,
        msg: 'Authenticated Login',
    });
}

async function GET_AnswerPermissionLoginQR(req, res, next) {
    const { token, verify } = req.query;

    if (verify === 'true') {
        tokens[token].verify = true;
        return res.json({
            success: true,
            status: 200,
            token: token,
            msg: 'Login verified',
        });
    } else {
        delete tokens[token];
        return res.json({
            success: false,
            status: 400,
            msg: 'Login rejected',
        });
    }
}

async function GET_CheckLoginQR(req, res, next) {
    const { token } = req.query;
    const tokenData = tokens[token];

    if (!tokenData) {
        return res.json({
            success: false,
            status: 400,
            msg: 'Login rejected',
        });
    }

    if (tokenData.verify) {
        return res.json({
            success: true,
            status: 200,
            data: tokenData.user,
            msg: 'Login successfully',
        });
    }

    if (tokenData.user) {
        return res.json({
            success: false,
            status: 301,
            data: tokenData.user,
            msg: 'Waiting for permission',
        });
    }

    return res.json({
        success: false,
        status: 300,
        msg: 'Waiting for scanning',
    });
}

async function GET_AccountBalance(req, res, next) {
    let balance = await getAccountBalance();
    if (balance) {
        return res.json({
            success: true,
            status: 200,
            balance: balance.available,
        });
    }

    return res.json({
        success: false,
        status: 500,
        msg: 'Balance not found',
    });
}

async function GET_NearPaymentQR(req, res, next) {
    const { code, amount } = req.query;
    const token = crypto.randomBytes(20).toString('hex');
    tokens[token] = { createdAt: Date.now() };

    const nearPaymentUrl = `${apiUrl}/near-payment?code=${code}&amount=${amount}&token=${token}`;

    return QRCode.toDataURL(nearPaymentUrl, (err, url) => {
        if (err) {
            return res.json({
                success: false,
                status: 500,
                msg: 'Error generating QRCODE',
            });
        }

        console.log('6.Near Payment Created');
        return res.json({
            success: true,
            status: 200,
            token: token,
            code: code,
            url: url,
        });
    });
}

async function PUT_NearPaymentQR(req, res, next) {
    const { code, amount, token } = req.query;
    const tokenData = tokens[token];
    const expiresIn = 900;

    try {
        if (!tokenData) {
            return res.json({
                success: false,
                status: 400,
                msg: 'Invalid token',
            });
        }

        const timeElapsed = (Date.now() - tokenData.createdAt) / 1000;
        if (timeElapsed > expiresIn) {
            delete tokens[token];
            return res.json({
                success: false,
                status: 400,
                msg: 'Token expired',
            });
        }

        let receipt = await sendNear();
        if (!receipt) {
            return res.json({
                success: false,
                status: 501,
                msg: 'Fail to send Near',
            });
        }

        await Order.updateMany({ISBN_code: code}, { status: 'Paid' });
        await Checkout.findOneAndUpdate({ISBN_code: code}, { $set: { status: 'Completed' } });

        console.log('7.Near Payment Success');
        delete tokens[token];
        return res.json({
            success: true,
            status: 200,
            msg: 'Near Payment Success',
            receipt,
        });
    } catch (error) {
        return res.json({
            success: false,
            status: 500,
            msg: 'Near Payment Fail',
        });
    }
}

async function GET_StripePaymentGateway(req, res, next) {
    const { code } = req.query;

    const stripe_url = await createStripeSession(code);
    // console.log(stripe_url)
    if (stripe_url) {
        return res.json({
            success: true,
            status: 200,
            msg: 'Order Created',
            code: code,
            url: stripe_url,
        });
    }

    return res.json({
        success: false,
        status: 500,
        msg: 'Error while creating stripe payment',
    });
}

async function PUT_StripePaymentGateWay(req, res, next) {
    const { code } = req.query;
    let orders = await Order.updateMany({ ISBN_code: code, status: 'Confirmed' }, { status: 'Paid' } );

    if (orders) {
        let checkout = await Checkout.findOneAndUpdate({ ISBN_code: code }, { $set: { status: 'Completed' } });
        if (checkout) {
            console.log('7.Stripe Payment Success');
            return res.json({
                success: true,
                status: 200,
                msg: 'Stripe Payment Success',
            });
        }

        return res.json({
            success: false,
            status: 404,
            msg: 'Stripe Payment Fail',
        });
    }

    return res.json({
        success: false,
        status: 404,
        msg: 'Stripe unpaid',
    });
}

export {
    GET_StripePaymentGateway,
    PUT_StripePaymentGateWay,
    GET_AccountBalance,
    GET_NearPaymentQR,
    PUT_NearPaymentQR,
    POST_Register,
    POST_Login,
    GET_Verify,
    GET_LoginQR,
    POST_LoginQR,
    GET_CheckLoginQR,
    GET_AnswerPermissionLoginQR,
};

'''
'''--- src/resources/Account/Router.js ---
import { POST_ConfirmOTP, POST_ResendOTP } from '../OTP/Resolver.js';
import upload from '../../middlewares/multer.js';
import {
    GET_AccountBalance,
    GET_AnswerPermissionLoginQR,
    GET_CheckLoginQR,
    GET_LoginQR,
    GET_Verify,
    POST_Login,
    POST_LoginQR,
    POST_Register,
} from './Resolver.js';

import express from 'express';

const router = express.Router();

/**
 * Description: Register a new Account
 * Request:     POST /account/register
 * Send:        JSON object which contains email, password, password_confirm, name, location, phone, role
 * Receive:     200 if success, otherwise fail
 */
router.post('/register', upload.single('file'), POST_Register);

/**
 * Description: Login to App
 * Request:     POST /account/login
 * Send:        JSON object which contains email, password
 * Receive:     200 if success, otherwise fail
 */
router.post('/login', POST_Login);

/**
 * Description: Activate an account by scanning QR code
 * Request:     GET /account/verify/:token
 * Send:        jwt token which contains account_id as param
 * Receive:     200 if success, otherwise fail
 */
router.get('/verify', GET_Verify);

router.post('/confirm_otp', POST_ConfirmOTP);
router.post('/resend_otp', POST_ResendOTP);

router.get('/login_qr', GET_LoginQR);
router.post('/login_qr', POST_LoginQR);
router.get('/checklogin_qr', GET_CheckLoginQR);
router.get('/admit_permission', GET_AnswerPermissionLoginQR);

router.get('/get_account_balance', GET_AccountBalance);

export default router;

'''
'''--- src/resources/Checkout/Model.js ---
import mongoose from 'mongoose';
const Schema = mongoose.Schema;

const Checkout = new Schema({
    caption: { type: String, required: true },
    trade_code: { type: String, required: true },
    ISBN_code: { type: String, required: true },
    status: { type: String, required: true, enum: ['Waiting', 'Completed', 'Canceled']},
},
{
    timestamps: true
})

export default mongoose.model('Checkout', Checkout);
'''
'''--- src/resources/Checkout/Resolver.js ---
import dotenv from 'dotenv';
dotenv.config();

import Checkout from './Model.js';

async function POST_CreateCheckout(req, res, next) {
    const order_id = req.order_id;
    
    let checkout = await new Checkout({
        caption: 'Delirate checkout',
        trade_code: Math.floor(Math.random() * (9999999999 - 1000000000) + 1000000000),
        order: order_id,
        status: 'Waiting'
    }).save();

    if(checkout) {
        return res.json({
            success: true,
            status: 200,
            msg: 'Order Created'
        })
    }

    return res.json({
        success: false,
        status: 500,
        msg: 'Error occurred'
    })
}

async function GET_CheckoutInfo(req, res, next) {
    const { code } = req.params;

    let checkout = await Checkout.findOne({ISBN_code: code})
    .populate({path: 'order'})
    .lean();

    if(checkout) {
        return res.json({
            success: true,
            status: 200,
            data: checkout
        })
    }

    return res.json({
        success: false,
        status: 404,
        msg: 'Checkout not found'
    })
}

export { POST_CreateCheckout, GET_CheckoutInfo }
'''
'''--- src/resources/Customer/Model.js ---
import mongoose from "mongoose";
const Schema = mongoose.Schema;

const Customer = new Schema({
    name: { type: String, required: true },
    phone: { type: String, required: true },
    email: { type: String, required: true },
    address: { type: String, required: true }
},
{
    timestamps: true
})

export default mongoose.model('Customer', Customer);
'''
'''--- src/resources/Customer/Resolver.js ---
import dotenv from 'dotenv';
import { hashMD5, loadContract } from '../../utils/index.js';
import Item from './Model.js';
dotenv.config();

'''
'''--- src/resources/Item/Model.js ---
import mongoose from "mongoose";
const Schema = mongoose.Schema;

const Item = new Schema({
    sku: { type: String, required: true, unique: true },
    model: { type: String, required: true },
    desc: { type: String, required: true },
    brand: { type: String, required: true },
    price: { type: Number, required: true, default: 0},
    origin: { type: String, required: true },
    image: { type: String, required: true },
    distributor: { type: mongoose.Types.ObjectId, ref: 'Store', required: true }
},
{
    timestamps: true
})

export default mongoose.model('Item', Item);
'''
'''--- src/resources/Item/Resolver.js ---
import dotenv from 'dotenv';
import Item from './Model.js';
import Account from '../Account/Model.js';
import fileapis from '../../middlewares/fileapis.js';
dotenv.config();

/**
 * Description: Create new Item for Store
 * Request:     POST /item/create_item
 * Send:        JSON object which contains model, desc, brand, origin, distributor
 * Receive:     200 if success, otherwise fail
 */
async function POST_CreateItem(req, res, next) {
    const { model, sku, price, desc, brand, origin, distributor, folder } = req.body;

    // const { hashed_email, role } = req.user;
    // const hashed_email = '4cdaa0e01110e3d64916df5d2bc044cc'; //nkeyskuo124@gmail.com
    // let store = await Account.findOne({ hashed_email: distributor }).select({ _id: 1 });
    const file = req.file;

    if (!file) {
        return res.json({
            success: false,
            status: 300,
            msg: 'Image file not found',
        });
    }

    try {
        let new_item = await new Item({
            model,
            sku,
            price,
            desc,
            brand,
            origin,
            distributor: distributor,
            image: folder + '/' + file.filename,
        }).save();

        // Smart Contract
        // const contract = await loadContract();
        // await contract.create_item({
        //     args: {
        //         model: model,
        //         desc: desc,
        //         brand: brand,
        //         origin: origin,
        //         image: file.filename,
        //         distributor: hashed_email,
        //     },
        // });
        // <-->

        return res.json({
            success: true,
            status: 200,
            msg: 'Item created',
            data: new_item,
        });
    } catch (error) {
        return res.json({
            success: false,
            status: 500,
            msg: error,
        });
    }
}

async function DELETE_item(req, res, next) {
    const { id } = req.params;

    try {
        let item = await Item.findByIdAndDelete(id);
        if(item) {
            fileapis.deleteSync('./src/public/uploads' + item.image, (err) => {
                if(err) {
                    return res.json({
                        success: false,
                        status: 500,
                        msg: 'Delete item fail: ' + err
                    })
                }
            })
        }
        return res.json({
            success: true,
            status: 200,
            data: item,
            msg: 'Deleted item',
        });
    } catch (error) {
        return res.json({
        success: false,
        status: 500,
        msg: 'Delete item fail: ' + error
    })
    }
}

/**
 * Description: Get info of specific item
 * Request:     GET /item/get_item_info
 * Send:        JSON data which contains _id as param
 * Receive:     200 + item if success, otherwise fail
 */
async function GET_ItemInfo(req, res, next) {
    try {
        const { id } = req.params;

        let item = await Item.findById(id).lean();

        // Smart contract
        // const contract = await loadContract();
        // let item = await contract.get_item_info({
        //     item_id: item_id,
        // });

        return res.json({
            success: true,
            status: 200,
            data: item,
        });
    } catch (error) {
        return res.json({
            success: false,
            status: 500,
            msg: error,
        });
    }
}

const shuffle = (array) => { 
  for (let i = array.length - 1; i > 0; i--) { 
    const j = Math.floor(Math.random() * (i + 1)); 
    [array[i], array[j]] = [array[j], array[i]]; 
  } 
  return array; 
}; 
/**
 * Description: Get All Items that match the filter
 * Request:     GET /item/get_all_items
 * Send:        Filter or nothing as query
 * Receive:     200 + items if success , otherwise fail
 */
async function GET_AllItems(req, res, next) {
    try {
        let filter = { ...req.query };
        let items = await Item.find(filter).lean();

        // Smart Contract
        // const contract = await loadContract();
        // let items = await contract.get_all_items();

        return res.json({
            success: true,
            status: 200,
            data: shuffle(items),
        });
    } catch (error) {
        return res.json({
            success: false,
            status: 500,
            msg: error,
        });
    }
}

export { GET_AllItems, GET_ItemInfo, POST_CreateItem, DELETE_item };

'''
'''--- src/resources/Item/Router.js ---
import { DELETE_item, GET_AllItems, GET_ItemInfo, POST_CreateItem } from "./Resolver.js";
import express from 'express';
import upload from '../../middlewares/multer.js';
import { dirname } from 'path';
import { fileURLToPath } from 'url';

const __dirname = dirname(fileURLToPath(import.meta.url));

const router = express.Router();

router.get('/get_item_info/:id', GET_ItemInfo);
router.get('/get_all_items', GET_AllItems);

router.post('/create', upload.single('file'),  POST_CreateItem);
router.delete('/delete/:id',  DELETE_item);

export default router
'''
'''--- src/resources/OTP/Model.js ---
import mongoose from 'mongoose';
const Schema = mongoose.Schema;

const OTP = new Schema({
    email: {
        type: String,
        required: true
    },
    code: {
        type: String,
        required: true,
        unique: true
    },
    created_at: {
        type: Date,
        expires: '120s',
        default: Date.now()
    }
})

export default mongoose.model('OTP', OTP);
'''
'''--- src/resources/OTP/Resolver.js ---
import OTP from './Model.js';
import dotenv from 'dotenv';
import jwt from 'jsonwebtoken';
import Account from '../Account/Model.js';
import Customer from '../Customer/Model.js';

import { sendMail } from 'sud-libs';
import { mailForm } from '../../utils/index.js';
dotenv.config();

const secretKey = process.env.JWT_SECRET_KEY;

const apiUrl = process.env.API_URL;

const auth = {
    user: process.env.HOST_EMAIL,
    pass: process.env.HOST_PASSWORD,
};
/**
 * Description: Verify login with OTP
 * Request:     POST /account/confirm_otp
 * Send:        JSON object which contains code(OTP)
 * Receive:     200 if success, otherwise fail
 */
async function POST_ConfirmOTP(req, res, next) {
    const { code } = req.body;

    const token = req.header('Authorization');
    
    if (!token) {
        return res.json({
            success: false,
            status: 403,
            msg: 'JWT not found',
        });
    }

    jwt.verify(token.replace('Bearer ', ''), secretKey, async (err, decoded) => {
        if (err) {
            return res.json({
                success: false,
                status: 401,
                msg: 'JWT invalid',
            });
        }

        if (decoded.code != code) {
            return res.json({
                success: false,
                status: 300,
                msg: 'OTP invalid',
            });
        }
        
        const otp = await OTP.findOne({ code, email: decoded.user.email });

        if (!otp) {
            return res.json({
                success: false,
                status: 404,
                msg: 'OTP not found',
            });
        }

        return res.json({
            success: true,
            status: 200,
            msg: 'Login successfully',
            data: decoded.user
        });
    });
}

/**
 * Description: Resend OTP to Email
 * Request:     POST /account/confirm_otp
 * Send:        JSON object which contains email
 * Receive:     200 if success, otherwise fail
 */
async function POST_ResendOTP(req, res, next) {
    const { email } = req.body;
    
    try {
        let myAccount = await Account.findOne({ email });

        let customer = await Customer.findOne({ email: myAccount.email }).then(async (customer) => {
            if (customer) {
                return customer;
            }
    
            return await new Customer({
                name: myAccount.name,
                email: myAccount.email,
                address: myAccount.location,
                phone: myAccount.phone,
            }).save();
        });

        if(myAccount) {
            const user_info = {
                email: myAccount.email,
                hashed_email: myAccount.hashed_email,
                name: myAccount.name,
                location: myAccount.location,
                avatar: apiUrl + '/uploads' + myAccount.avatar,
                phone: myAccount.phone,
                role: myAccount.role,
                customer_id: customer._id,
            };

            if (myAccount.role === 'retailer') {
                user_info['store'] = myAccount.store;
            }

            let otp = await new OTP({
                email: email,
                code: Math.floor(Math.random() * (9999 - 1000) + 1000),
            }).save();

            const token = jwt.sign({ user: user_info, code: otp.code }, secretKey);
        
            const options = {
                from: auth.user,
                to: email,
                subject: `${otp.code} Mã xác nhận đăng nhập tài khoản Delirate`,
                html: mailForm({
                    caption: 'Mã xác nhận đăng nhập',
                    content: ` 
                    <h1>${otp.code}</h1>
                    `,
                }),
            };
        
            sendMail(auth, options, (err) => {
                if (err) console.log(err);
            });
        
            return res.json({
                success: true,
                status: 200,
                msg: 'OTP sent',
                token: token,
            });
        }
        
    } catch (error) {
        return res.json({
            success: false,
            status: 500,
            msg: 'OTP cannot send: ' + error,
        });
    }
}

export { POST_ConfirmOTP, POST_ResendOTP };

'''
'''--- src/resources/OTP/Router.js ---
import express from 'express';

const router = express.Router();

export default router;

'''
'''--- src/resources/Order/Model.js ---
import mongoose from "mongoose";
const Schema = mongoose.Schema;

const Order = new Schema(
    {
        ISBN_code: { type: String, required: true},
        items: [
            {
                info: { type: mongoose.Types.ObjectId, ref: 'Item', required: true },
                qty: { type: Number, required: true, default: 1 },
                price: { type: Number, required: true, default: 0 },
            },
        ],
        store: { type: mongoose.Types.ObjectId, ref: 'Store', required: true },
        customer: { type: mongoose.Types.ObjectId, ref: 'Customer', required: true },
        note: { type: String },
        total_price: { type: Number, required: true, default: 0 },
        status: {
            type: String,
            required: true,
            enum: ['Requested', 'Confirmed', 'Paid', 'Transiting', 'Shipping', 'Finished', 'Canceled'],
            default: 'Requested'
        },
        payment_type: { type: String, required: true, enum: ['Cash', 'Banking', 'Crypto'] },
    },
    {
        timestamps: true,
    },
);

export default mongoose.model('Order', Order);
'''
'''--- src/resources/Order/Resolver.js ---
import dotenv from 'dotenv';
import { encryptAES } from '../../utils/crypto/crypto.js';
import Order from './Model.js';
import Customer from '../Customer/Model.js';
import Account from '../Account/Model.js';
import { loadContract } from '../../utils/index.js';

dotenv.config();

const apiUrl = process.env.API_URL || 'http://192.168.1.7:8080';
const secretKey = 'nkeyskuo';

const auth = {
    user: process.env.HOST_EMAIL,
    pass: process.env.HOST_PASSWORD,
};

async function POST_CheckOut(req, res, next) {
    const { payment_type } = req.body;

    if (payment_type === 'Cash') {
        next();
    }
}

/**
 * Description: Create a new Order
 * Request:     POST /order/create
 * Send:        JSON data which contains items, name, phone, email, address , note, total_price, payment_type
 * Receive:     200 if success, otherwise fail
 */
async function POST_CreateOrder(req, res, next) {
    const {  items, name, phone, email, address, note, total_price, payment_type } = req.body;

    try {
        let exist_customer = await Customer.findOne({
            email,
        });

        let customer =
            exist_customer ||
            (await new Customer({
                name,
                phone,
                email,
                address,
            }).save());

        if (!customer) {
            return res.json({
                success: false,
                status: 400,
                msg: 'Error create customer',
            });
        }

        let store = await Account.findOne({ _id: store_id, role: 'retailer' }).lean();

        if (!store) {
            return res.json({
                success: false,
                status: 404,
                msg: 'Error not found store',
            });
        }

        let order = await new Order({
            ISBN_code: 'QC' + Math.floor(Math.random() * (9999999 - 1000000) + 1000000),
            items,
            customer,
            note,
            total_price,
            payment_type,
            store,
            status: payment_type !== 'Cash' ? 'Confirmed' : 'Requested',
        }).save();

        if (!order) {
            return res.json({
                success: false,
                status: 400,
                msg: 'Error create order',
            });
        }

        const contract = await loadContract();
        await contract.create_delivery({
            args: {
                _isbn_code: order.ISBN_code, // FK order _isbn_code
                _sender: store_id,
                _receiver: customer._id,
                _status: order.status,
                _note: 'Created delivery',
                _image: 'https://picsum.photos/100/100',
                _location: 'Store address',
                _track_signer: store_id,
            },
        });

        console.log('pass contract');
        req.order_id = order._id;
        next();
        // return res.json({
        //     success: true,
        //     status: 200,
        //     msg: 'Order Created',
        //     data: order
        // })
    } catch (error) {
        return res.json({
            success: false,
            status: 500,
            msg: error,
        });
    }
}

/**
 * Description: Get order information
 * Request:     GET /order/get_order_info/:code
 * Send:        JSON data which is ISBN_code as params
 * Receive:     200 if success, otherwise fail
 */
async function GET_OrderInfo(req, res, next) {
    const { code } = req.params;

    let order = await Order.findOne({ ISBN_code: code })
        .select({ _id: 0, __v: 0 })
        .populate({
            path: 'items',
            select: '-_id -__v',
            populate: { path: 'info', select: '-item_id -_id -__v -updatedAt -createdAt' },
        })
        .lean();

    // console.log(encrypted);
    // let encrypted = encryptAES(code, 'nkeyskuo');
    // let qrcode = await QRCODE.toDataURL(encrypted);

    // const options = {
    //     from: auth.user,
    //     to: 'nkeyskuo124@gmail.com',
    //     subject: 'Xác thực tài khoản từ Delirate',
    //     text: `Xin chào nkeys`,
    //     attachDataUrls: true,
    //     html: mailForm({
    //         logo_link: process.env.LOGO_LINK || '',
    //         caption: `Xác thực tài khoản từ Delirate`,
    //         content: `
    //             <img src="${qrcode}" />
    //         `
    //     }),
    // };

    // sendMail(auth, options, (err) => {
    //     if (err) console.log(err);
    // });

    return res.json({
        success: true,
        status: 200,
        msg: 'Order found',
        data: order,
    });
}

/**
 * Description: Get orders by customer
 * Request:     GET /order/get_orders_by_customer/:customer_id
 * Send:        JSON data which is customer_id as params
 * Receive:     200 if success, otherwise fail
 */
async function GET_OrdersByCustomer(req, res, next) {
    const { customer_id } = req.params;
    console.log(customer_id);
    let orders = await Order.find({ customer: customer_id })
        .select({ _id: 0, __v: 0 })
        .populate({
            path: 'items',
            select: '-_id -__v',
            populate: { path: 'info', select: '-item_id -_id -desc -__v -updatedAt -createdAt' },
        })
        .populate({
            path: 'store',
            select: 'name location createdAt',
        })
        .populate({
            path: 'customer',
        })
        .sort({ createdAt: -1 })
        .lean();

    orders = orders.map((order) => {
        let encrypted = encryptAES(apiUrl + `/order/get_order_info/${order.ISBN_code}`, secretKey);
        return {
            ...order,
            link: encrypted,
            createdDate: order.createdAt.toLocaleDateString('vi-vn'),
            createdDateTime: order.createdAt.toLocaleString('vi-vn')
        };
    });

    return res.json({
        success: true,
        status: 200,
        msg: 'Orders found',
        data: orders,
    });
}

async function GET_VerifyOrigin(req, res, next) {
    const { code, customer_id } = req.params;

    try {
        var items = [];
             await Order.find({ ISBN_code: code, customer: customer_id })
                .select({ items: 1 })
                .populate({ path: 'items', populate: 'info' })
                .then((orders) => {
                    return orders.forEach(order => {
                        order.items.forEach(item => {
                            items.push(item)
                        })
                    });
                });
        
        if(items.length === 0) {
            return res.json({
                success: false,
                status: 404,
                msg: 'Items not found'
            })
        }

        const contract = await loadContract();
        let delivery_info = await contract.get_delivery_info({
            _isbn_code: code,
        });

        return res.json({
            success: true,
            status: 200,
            data: {
                ...delivery_info,
                items: items,
            },
        });
    } catch (error) {
        return res.json({
            success: false,
            status: 400,
            msg: error,
            data: {},
        });
    }
}

async function PUT_UpdateOrder(req, res, next) {
    const { code } = req.params;
    const { status, note, location, track_signer, folder } = req.body;
    // console.log(req.body);
    
    const file = req.file;
    if(!file) {
        return res.json({
            success: false,
            status: 300,
            msg: 'Image not found'
        })
    }

    try {

        let update = await Order.updateMany({ ISBN_code: code }, { status: status })
        if(!update) {
            return res.json({
                success: false,
                status: 500,
                msg: 'Update orders fail'
            })
        }

        const contract = await loadContract();
        await contract.tracking_delivery({
            args: {
                _isbn_code: code,
                _status: status,
                _note: note,
                _image: folder + '/' + file.filename,
                _location: location,
                _track_signer: track_signer,
            },
        });

        return res.json({
            success: true,
            status: 200,
            msg: 'Tracking success',
        });
    } catch (error) {
        return res.json({
            success: false,
            status: 500,
            msg: 'Tracking fail',
        });
    }
}

// For Store's Admin only
async function GET_OrdersInfoByStore(req, res, next) {
    const { store_id } = req.params;

    let orders = await Order.find({ store: store_id })
        .populate({
            path: 'items',
            select: '-_id -__v',
            populate: { path: 'info', select: '-desc -_id -__v -updatedAt -createdAt' },
        })
        .populate({
            path: 'store',
            select: 'name location createdAt',
        })
        .populate({
            path: 'customer',
        })
        .sort({ createdAt: -1 })
        .lean();

    if(orders.length == 0) {
        return res.json({
            success: false,
            status: 404,
            msg: 'Orders not found'
        })
    }

    orders = orders.map((order) => {
        let encrypted = encryptAES(`${order.ISBN_code} ${order.customer._id}`, secretKey);
        return {
            ...order,
            link: encrypted,
            createdAt: order.createdAt.toLocaleString('vi-vn'),
        };
    });

    return res.json({
        success: true,
        status: 200,
        data: orders,
    });
}

export {
    POST_CreateOrder,
    GET_OrderInfo,
    GET_OrdersByCustomer,
    POST_CheckOut,
    GET_VerifyOrigin,
    PUT_UpdateOrder,
    GET_OrdersInfoByStore,
};

'''
'''--- src/resources/Order/Router.js ---
import { GET_OrderInfo, POST_CreateOrder, GET_OrdersByCustomer, PUT_UpdateOrder, GET_OrdersInfoByStore, GET_VerifyOrigin } from "./Resolver.js";
import express from 'express';
import Order from './Model.js';
import { POST_CreateCheckout } from "../Checkout/Resolver.js";
import upload from "../../middlewares/multer.js";

const router = express.Router();

/**
 * Description: Create new Order and Checkout
 * Request:     POST /order/create
 * Send:        JSON object which contains store_id, items, name, phone, email, address , note, total_price, payment_type
 * Receive:     200 if success, otherwise fail
 */
router.post('/create', POST_CreateOrder, POST_CreateCheckout);

/**
 * Description: Get orer info by ISBN_code
 * Request:     GET /order/get_order_info/:code
 * Send:        ISBN code as request params
 * Receive:     Order info if success, otherwise fail
 */
router.get('/get_order_info/:code', GET_OrderInfo);

/**
 * Description: Get orers list by customer_id
 * Request:     GET /order/get_orders_by_customer/:customer_id
 * Send:        Customer id as request params
 * Receive:     Orders list if success, otherwise fail
 */
router.get('/get_orders_by_customer/:customer_id', GET_OrdersByCustomer);

/**
 * Description: Get orers list by store_id
 * Request:     GET /order/get_orders_by_store/:store_id
 * Send:        Store id as request params
 * Receive:     Orders list if success, otherwise fail
 */
router.get('/get_orders_by_store/:store_id', GET_OrdersInfoByStore);

/**
 * Description: Tracking delivery by ISBN code
 * Request:     PUT /order/tracking_delivery/:code
 * Send:        ISBN code as request params
 * Receive:     200 if success, otherwise fail
 */
router.put('/tracking_delivery/:code', upload.single('file'), PUT_UpdateOrder);

/**
 * Description: Verify origin of order by ISBN code
 * Request:     GET /verify_origin/:code
 * Send:        ISBN code as request params
 * Receive:     200 if success, otherwise fail
 */
router.get('/verify_origin/:code/:customer_id', GET_VerifyOrigin);

/**
 * Description: Check payment status
 * Request:     GET /order/check-payment/:id
 * Send:        Order id as request params
 * Receive:     200 if success, otherwise fail
 */
router.get('/check-payment/:code', async (req, res, next) => {
    const { code } = req.params;

    await Order.findOne({ISBN_code: code})
        .then(order => {
            if(order.status === 'Paid') {
                return res.json({
                    success: true,
                    status: 200,
                    msg: 'Order paid'
                })
            }
            
            return res.json({
                success: false,
                status: 300,
                msg: 'Order unpaid'
            })
        })
        .catch(err => {
            return res.json({
                success: false,
                status: 404,
                msg: err
            })
        })
})

export default router
'''
'''--- src/resources/Store/Model.js ---
import mongoose from 'mongoose';
const Schema = mongoose.Schema;

const Store = new Schema({
    owner: { type: mongoose.Types.ObjectId, ref: 'Account', required: true },
    name: { type: String, required: true},
    banner: { type: String, required: true },
    introduce: { type: String},
    tax_no: { type: String, required: true }
},
{
    timestamps: true
})

export default mongoose.model('Store', Store);
'''
'''--- src/resources/Store/Resolver.js ---

'''
'''--- src/resources/routes.js ---
import Account_Router from './Account/Router.js';
import Item_Router from './Item/Router.js';
import Order_Router from './Order/Router.js';

function router(app) {
    app.use('/account', Account_Router);
    app.use('/item/', Item_Router);
    app.use('/order/', Order_Router);

    app.get('/agent', (req, res) => {
        const source = req.useragent.source;
        const browser = req.useragent.browser;
        const version = req.useragent.version;
        const os = req.useragent.os;
        const platform = req.useragent.platform;
        const isMobile = req.useragent.isMobile;
        const isTablet = req.useragent.isTablet;
        const isDesktop = req.useragent.isDesktop;

        const response = {
            source: source,
            browser: browser,
            version: version,
            os: os,
            platform: platform,
            isMobile: isMobile,
            isTablet: isTablet,
            isDesktop: isDesktop,
        };
        
        res.send(response);
    })
}

export default router;

'''
'''--- src/utils/crypto/crypto.js ---
import { Crypt, RSA } from 'hybrid-crypto-js';
import bcrypt from 'bcryptjs';
import crypto from 'crypto-js';

function hashBcrypt(password) {
    return bcrypt.hashSync(password, 10);
}

function hashSHA256(data) {
    return crypto.SHA256(JSON.stringify(data)).toString();
}

function encryptRSA(data) {
    const crypt = new Crypt();
    return crypt.encrypt(credentials["publicKey"], data);
}

function decryptRSA(encode) {
    const crypt = new Crypt();
    return crypt.decrypt(credentials["privateKey"], encode);
}

function encryptAES(data, secretKey) {
    return crypto.AES.encrypt(JSON.stringify(data), secretKey).toString();
}

function decryptAES(encode, secretKey) {
    let bytes = crypto.AES.decrypt(encode, secretKey);
    return JSON.parse(bytes.toString(crypto.enc.Utf8));
}

// Hash email using md5
function hashMD5(email) {
    return crypto.HmacMD5(email).toString();
}

export { hashBcrypt, hashSHA256, hashMD5, encryptAES, decryptAES, encryptRSA, decryptRSA}
'''
'''--- src/utils/index.js ---
import dotenv from 'dotenv';
import nearAPI from 'near-api-js'

// gerenateKeys();

dotenv.config()

function mailForm(options) {
    let logo_link = options.logo_link || process.env.LOGO_LINK;
    let caption = options.caption || '';
    let content = options.content || '';
    
    return `<div 
        style="width: 35%; margin: 0 auto;
        text-align: center; font-family: 'Google Sans', Roboto, sans-serif;
        min-height: 300px; padding: 40px 20px;
        border-width: thin; border-style: solid; border-color: #dadce0; border-radius: 8px">

        <img style="width: 296px;
        aspect-ratio: auto 74 / 24;
        height: 96px;" src="${logo_link}" />

        <div style="
            color: rgba(0,0,0,0.87);
            line-height: 32px;
            padding-bottom: 24px;
            text-align: center;
            word-break: break-word;
            font-size: 24px">

            ${caption}
        </div>

        <div style="border: thin solid #dadce0;
            color: rgba(0,0,0,0.87);
            line-height: 26px;
            text-align: center;
            word-break: break-word;
            font-size: 18px">

            ${content}
        </div>

        <p>Mọi thắc mắc vui lòng liên hệ contact.ezgroup@gmail.com</p>
        <p>Hotline: 0767916592 - SUD Technology</p>
    </div>
    `;
};

const { keyStores, connect, Contract, KeyPair } = nearAPI;

const ACCOUNT_ID = process.env.ACCOUNT_ID || "nkeyskuo186.testnet"
const NETWORK_ID = process.env.NETWORK_ID || "testnet";

const KEY_STORE = new keyStores.InMemoryKeyStore();
const PRIVATE_KEY = process.env.PRIVATE_KEY;
const keyPair = KeyPair.fromString(PRIVATE_KEY);

async function loadContract() {
    await KEY_STORE.setKey(NETWORK_ID, ACCOUNT_ID , keyPair)
    
    const connectionConfig = {
        networkId: NETWORK_ID,
        keyStore: KEY_STORE, // first create a key store 
        nodeUrl: "https://rpc.testnet.near.org",
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
    };

    const nearConnection = await connect(connectionConfig);
    const account = await nearConnection.account(ACCOUNT_ID);
    
    const ctr = new Contract(
        account, // the account object that is connecting
        process.env.CONTRACT_ID || "dev-1697953744968-41792685867726",
        {
            // name of contract you're connecting to
            viewMethods: ["get_customer_info", "get_retailer_info", "get_shipper_info", "get_delivery_info", "get_item_info", "get_all_items"], // view methods do not change state but usually return a value
            changeMethods: ["payment_test","register_customer", "register_retailer", "register_shipper", "create_delivery", "tracking_delivery", "create_item"], // change methods modify state
        }
    );

    return ctr;
}

async function getAccountBalance() {
    await KEY_STORE.setKey(NETWORK_ID, ACCOUNT_ID , keyPair)
    
    const connectionConfig = {
        networkId: NETWORK_ID,
        keyStore: KEY_STORE, // first create a key store 
        nodeUrl: "https://rpc.testnet.near.org",
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
    };

    const nearConnection = await connect(connectionConfig);
    const account = await nearConnection.account(ACCOUNT_ID);

    return await account.getAccountBalance();
}

async function sendNear() {
    await KEY_STORE.setKey(NETWORK_ID, ACCOUNT_ID , keyPair);

    const connectionConfig = {
        networkId: NETWORK_ID,
        keyStore: KEY_STORE, // first create a key store 
        nodeUrl: "https://rpc.testnet.near.org",
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
    };

    const nearConnection = await connect(connectionConfig);
    const account = await nearConnection.account(ACCOUNT_ID);

    return await account.sendMoney(
        "nkeyskuo296.testnet", // receiver account
        "2000000000000000000000000" // amount in yoctoNEAR
      );

}

export { mailForm, loadContract, getAccountBalance, sendNear };
'''
'''--- src/utils/payments/near.js ---

'''
'''--- src/utils/payments/paypal.js ---

'''
'''--- src/utils/payments/stripe.js ---
import stripeAPI from 'stripe';
import dotenv from 'dotenv';
import Order from '../../resources/Order/Model.js';

dotenv.config();

let stripeGateway = stripeAPI(process.env.STRIPE_API_KEY);
let clientUrl = process.env.CLIENT_URL || '';

async function createStripeSession(code) {
    try {
        var items = []
            await Order.find({ISBN_code: code})
                .populate({ path: 'items', populate: { path: 'info' } })
                .then((orders) => orders.forEach(order => {
                    order.items.forEach(item => {
                        items.push(item);
                    })
                }))
                .catch((err) => {});
        
        // console.log(items);
        const lineItems = items.map((item) => {
            const unitAmount = Math.round(item.price * 100);

            return {
                price_data: {
                    currency: 'usd',
                    product_data: {
                        name: item.info.model,
                        images: ['https://react.semantic-ui.com/images/wireframe/square-image.png'],
                    },
                    unit_amount: unitAmount,
                },
                quantity: item.qty,
            };
        });

        const session = await stripeGateway.checkout.sessions.create({
            payment_method_types: ['card'],
            mode: 'payment',
            success_url: `${clientUrl}/stripe-success?code=${code}`,
            cancel_url: `${clientUrl}/fail`,
            line_items: lineItems,
            //  Asking address in Stripe
            billing_address_collection: 'required',
        });
        console.log('6.Stripe Payment Created');

        return session.url;
    } catch (error) {
        console.log(error)
        return undefined;
    }
}

export default createStripeSession;

'''