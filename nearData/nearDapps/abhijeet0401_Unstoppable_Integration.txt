*GitHub Repository "abhijeet0401/Unstoppable_Integration"*

'''--- components/ActionButtons.js ---
import Button from "@mui/material/Button";
import { styled } from "@mui/material/styles";

const ActionButton = styled(Button)(({ theme }) => ({
  width: "100%",
  marginTop: "0.5rem",
}));

export function MintSong({ onClick, roles }) {
  if (roles.includes("artist") || roles.includes("admin"))
    return (
      <ActionButton onClick={onClick} variant="outlined">
        Mint a Song
      </ActionButton>
    );
  else return null;
}

export function CreateArtist({ onClick, roles }) {
  if (!roles.includes("artist")) {
    return (
      <ActionButton onClick={onClick} variant="outlined">
        Create Artist Account
      </ActionButton>
    );
  } else return null;
}

'''
'''--- components/DrawerContent.js ---
import { Fragment, useEffect } from "react";
import { Song, useSound } from "../context/SoundProvider";

import ArrowDropUpIcon from "@mui/icons-material/ArrowDropUp";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import PlayArrowIcon from "@mui/icons-material/PlayArrow";
import PauseIcon from "@mui/icons-material/Pause";

export default function DrawerContent() {
  const { song, queue, toggle, upQueue, downQueue, playing, build_features } =
    useSound();

  const play_or_pause = () => {
    if (playing) return <PauseIcon />;
    else return <PlayArrowIcon />;
  };

  console.log(queue);

  return (
    <div className="flex flex-col w-80 h-full bg-dark border-r-2 border-dark-200 overflow-y-scroll">
      <h3 className="pt-4 px-4 text-xl font-bold">Now Playing</h3>
      <div className="flex flex-row items-center justify-start w-full h-20 border-b-4 border-double border-dark-200 p-4 gap-4">
        <img
          src={song.artwork}
          alt="Song Artwork"
          className="w-12 h-12 object-cover"
        />
        <div className="flex flex-col grow overflow-x-hidden whitespace-nowrap">
          <h3>{song.title}</h3>
          <p className="text-neutral-500 text-xs">
            {song.artist} {build_features(song.featured)}
          </p>
        </div>
        <button onClick={toggle}>{play_or_pause()}</button>
      </div>
      {queue.map((song, i, q) => (
        <Fragment key={i}>
          <div className="flex flex-row items-center justify-start w-full h-20 border-b border-dark-200 p-4 gap-4">
            <img
              src={song.artwork}
              alt="Song Artwork"
              width="50px"
              className="w-12 h-12 object-cover"
            />
            <div className="flex flex-col grow overflow-x-hidden whitespace-nowrap">
              <h3>{song.title}</h3>
              <p className="text-neutral-500 text-xs">
                {song.artist} {build_features(song.featured)}
              </p>
            </div>
            <div className="cursor-pointer flex flex-col">
              <button
                onClick={() => {
                  upQueue(i);
                }}
              >
                <ArrowDropUpIcon />
              </button>
              <button
                onClick={() => {
                  downQueue(i);
                }}
              >
                <ArrowDropDownIcon />
              </button>
            </div>
          </div>
        </Fragment>
      ))}
    </div>
  );
}

'''
'''--- components/Header.js ---
// Packages //
import { motion } from "framer-motion";
import { Button, Autocomplete, TextField } from "@mui/material";
import SearchIcon from "@mui/icons-material/Search";
import NearLogin from "./NearLogin";
import NearAccount from "./NearAccount";
import { useNear } from "../context/NearProvider";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";

const variants = {
  hidden: { y: -100 },
  enter: { y: 0 },
  exit: { y: -100 },
};

export default function Header() {
  const router = useRouter();

  const [query, setQuery] = useState("");

  const { signedIn, terms, search, reset_search } = useNear();

  const action_button = () => {
    if (!signedIn) return <NearLogin />;
    return <NearAccount />;
  };

  return (
    <motion.header
      variants={variants}
      initial="hidden"
      animate="enter"
      exit="exit"
      transition={{ duration: 1 }}
      className="w-full flex flex-col sm:flex-row items-center justify-start p-4 gap-4 bg-dark border-b-2 border-dark-200"
    >
      <div
        onClick={() => {
          router.push("/");
          reset_search();
        }}
        className="flex items-center justify-center gap-4 cursor-pointer select-none text-3xl"
      >
        Dmusic3
      </div>
      <div className="flex flex-row grow items-center justify-center">
        <form className="flex flex-row items-center justify-center gap-4">
          <Autocomplete
            disablePortal
            value={query}
            onChange={(e, val) => {
              if (val != null) setQuery(val);
              else setQuery("");
            }}
            options={terms}
            sx={{ width: "300px" }}
            freeSolo
            renderInput={(params) => <TextField {...params} label="Search" />}
          />
          <Button
            onClick={() => {
              router.push("/");
              search(query);
            }}
          >
            <SearchIcon />
            Search
          </Button>
        </form>
      </div>
      {action_button()}
    </motion.header>
  );
}

'''
'''--- components/NearAccount.js ---
import NearLogo from "./NearLogo";
import { useNear } from "../context/NearProvider";
import { useState } from "react";
import { useRouter } from "next/router";
import { LoadingButton } from "@mui/lab";
import AccountCircleRoundedIcon from "@mui/icons-material/AccountCircleRounded";

export default function NearAccount() {
  const router = useRouter();

  return (
    <LoadingButton
      onClick={() => {
        router.push("/account");
      }}
      color="neutral"
      size="large"
      variant="outlined"
      startIcon={<AccountCircleRoundedIcon />}
    >
      Account
    </LoadingButton>
  );
}

'''
'''--- components/NearLogin.js ---
import NearLogo from "./NearLogo";
import { LoadingButton } from "@mui/lab";
import { useNear } from "../context/NearProvider";
import { useState } from "react";

export default function NearLogin() {
  const { near, wallet, connect_to_near } = useNear();

  const [load, setLoad] = useState(false);

  return (
    <LoadingButton
      onClick={() => {
        connect_to_near();
        setLoad(true);
      }}
      color="neutral"
      size="large"
      loading={load}
      loadingPosition="start"
      startIcon={<NearLogo />}
      variant="outlined"
    >
      Connect to Near
    </LoadingButton>
  );
}

'''
'''--- components/NearLogo.js ---
const NearLogo = (props) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 90.1 90"
    style={{
      enableBackground: "new 0 0 90.1 90",
    }}
    xmlSpace="preserve"
    width="1em"
    height="1em"
    {...props}
  >
    <path
      fill="#FFFFFF"
      d="M72.2 4.6 53.4 32.5c-1.3 1.9 1.2 4.2 3 2.6L74.9 19c.5-.4 1.2-.1 1.2.6v50.3c0 .7-.9 1-1.3.5l-56-67C17 1.2 14.4 0 11.5 0h-2C4.3 0 0 4.3 0 9.6v70.8C0 85.7 4.3 90 9.6 90c3.3 0 6.4-1.7 8.2-4.6l18.8-27.9c1.3-1.9-1.2-4.2-3-2.6l-18.5 16c-.5.4-1.2.1-1.2-.6V20.1c0-.7.9-1 1.3-.5l56 67c1.8 2.2 4.5 3.4 7.3 3.4h2c5.3 0 9.6-4.3 9.6-9.6V9.6c0-5.3-4.3-9.6-9.6-9.6-3.4 0-6.5 1.7-8.3 4.6z"
    />
  </svg>
);

export default NearLogo;

'''
'''--- components/Player.js ---
import { Howler } from "howler";
import { useEffect, useState } from "react";
import { motion } from "framer-motion";

import DrawerContent from "./DrawerContent";

import { Button, Drawer, Modal, OutlinedInput, TextField } from "@mui/material";

import PlayCircleOutlineIcon from "@mui/icons-material/PlayCircleOutline";
import PauseCircleOutlineIcon from "@mui/icons-material/PauseCircleOutline";
import SkipNextIcon from "@mui/icons-material/SkipNext";
import SkipPreviousIcon from "@mui/icons-material/SkipPrevious";
import ShuffleIcon from "@mui/icons-material/Shuffle";
import RepeatIcon from "@mui/icons-material/Repeat";
import RepeatOnIcon from "@mui/icons-material/RepeatOn";
import RepeatOneOnIcon from "@mui/icons-material/RepeatOneOn";
import SavingsIcon from "@mui/icons-material/Savings";
import QueueMusicIcon from "@mui/icons-material/QueueMusic";

import { useSound } from "../context/SoundProvider";
import NearLogo from "./NearLogo";
import { useNear } from "../context/NearProvider";
import { utils } from "near-api-js";

const fancyTime = (duration) => {
  // Hours, minutes and seconds
  let hrs = ~~(duration / 3600);
  let mins = ~~((duration % 3600) / 60);
  let secs = ~~duration % 60;

  // Output like "1:01" or "4:03:59" or "123:03:59"
  let ret = "";

  if (hrs > 0) {
    ret += "" + hrs + ":" + (mins < 10 ? "0" : "");
  }

  ret += "" + mins + ":" + (secs < 10 ? "0" : "");
  ret += "" + secs;
  return ret;
};

export default function Player({ currentlyPlaying }) {
  const {
    song,
    queue,
    playing,
    toggle,
    seek,
    duration,
    volume,
    setVolume,
    setSeek,
    updateSeek,
    startSeeking,
    stopSeeking,
    build_features,
    setLoop,
    shuffle,
    skipForwards,
    skipBackwards,
  } = useSound();

  const [repeat, setRepeat] = useState("none");
  const [rotation, setRotation] = useState(0);
  const [open, setOpen] = useState(false);

  const { wallet } = useNear();

  useEffect(() => {
    Howler.volume(volume / 100);
  }, [volume]);

  const play_pause_button = () => {
    if (playing) return <PauseCircleOutlineIcon fontSize="large" />;
    else return <PlayCircleOutlineIcon fontSize="large" />;
  };

  const repeat_icon = () => {
    if (repeat === "none") return <RepeatIcon />;
    else if (repeat === "queue") return <RepeatOnIcon />;
    else return <RepeatOneOnIcon />;
  };

  const update_repeat = () => {
    if (repeat === "none") setRepeat("queue");
    else if (repeat === "queue") setRepeat("song");
    else setRepeat("none");
  };

  useEffect(() => {
    if (repeat == "song") setLoop(true);
    else setLoop(false);
  }, [repeat]);

  const shuffle_queue = () => {
    setRotation(rotation + 360);
    shuffle();
  };

  const [modal, setModal] = useState(false);
  const handleOpen = () => setModal(true);
  const handleClose = () => setModal(false);

  const [tip, setTip] = useState(0);

  const sendTip = async () => {
    if (song.artist == "Artist") return;
    await wallet.account().sendMoney(
      song.account, // receiver account
      utils.format.parseNearAmount(tip) // amount in yoctoNEAR
    );
  };

  const variants = {
    hidden: { y: 300 },
    enter: { y: 0 },
    exit: { y: 300 },
  };

  return (
    <>
      <Modal open={modal} onClose={handleClose}>
        <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-black w-80 h-fit p-10 flex flex-col gap-4 border-neutral-500 border rounded">
          <div>
            <h3 className="text-xl">
              Tip <span className="font-semibold">{song.artist}</span>
            </h3>
            <code className="text-xs text-neutral-500">{song.account}</code>
          </div>
          <OutlinedInput
            value={tip}
            onChange={(e) => {
              setTip(e.target.value);
            }}
            endAdornment={<NearLogo />}
          ></OutlinedInput>
          <Button variant="outlined" onClick={sendTip}>
            Send Transaction
          </Button>
        </div>
      </Modal>
      <Drawer
        open={open}
        onClose={() => {
          setOpen(false);
        }}
      >
        <DrawerContent queue={queue} />
      </Drawer>
      <motion.footer
        variants={variants}
        initial="hidden"
        animate="enter"
        exit="exit"
        transition={{ duration: 1 }}
        className="w-full flex flex-col items-center justify-center py-4 h-32 gap-2 border-t-4 border-double border-dark-100"
      >
        <div className="flex flex-row items-center justify-center gap-2">
          <Button
            onClick={() => {
              setOpen(true);
            }}
            variant="text"
          >
            <QueueMusicIcon sx={{ marginRight: "8px" }} /> QUEUE
          </Button>
          <button
            onClick={update_repeat}
            className="transition-all hover:opacity-75"
          >
            {repeat_icon()}
          </button>
          <motion.button
            onClick={shuffle_queue}
            animate={{ rotate: rotation }}
            className="transition-all hover:opacity-75"
          >
            <ShuffleIcon />
          </motion.button>
          <button
            onClick={skipBackwards}
            className="transition-all hover:opacity-75"
          >
            <SkipPreviousIcon />
          </button>
          <button className="transition-all hover:opacity-75" onClick={toggle}>
            {play_pause_button()}
          </button>
          <button
            onClick={skipForwards}
            className="transition-all hover:opacity-75"
          >
            <SkipNextIcon />
          </button>
          <input
            value={volume}
            onChange={(event) => setVolume(event.target.value)}
            className="rounded-lg appearance-none bg-white h-1 w-20 cursor-pointer transition-all"
            type="range"
            min="0"
            max="100"
          />
          <Button variant="text" onClick={handleOpen}>
            <SavingsIcon sx={{ marginRight: "8px" }} /> TIP
          </Button>
        </div>
        <div className="flex flex-row items-center justify-center">
          <div className="text-xs text-light text-neutral-400 mr-2">
            {fancyTime(seek)}
          </div>
          <div
            onMouseEnter={stopSeeking}
            onMouseMove={(e) => {
              const rect = e.target.getBoundingClientRect();
              const x = e.clientX - rect.left;
              updateSeek((x / rect.width) * duration);
            }}
            onMouseLeave={startSeeking}
            onMouseUp={(e) => {
              const rect = e.target.getBoundingClientRect();
              const x = e.clientX - rect.left;
              setSeek(x / rect.width);
            }}
            className="w-80 h-1 py-2"
          >
            <div
              className="bg-neutral-400 h-1"
              style={{ width: (seek * 100) / duration + "%" }}
            ></div>
          </div>
          <div className="text-xs text-light text-neutral-400 ml-2">
            {fancyTime(duration)}
          </div>
        </div>
        <div className="text-xs text-light text-neutral-400">
          {song.title} by {song.artist} {build_features(song.featured)}
        </div>
      </motion.footer>
    </>
  );
}

'''
'''--- components/Roles.js ---
import Tooltip from "@mui/material/Tooltip";
import AdminPanelSettingsIcon from "@mui/icons-material/AdminPanelSettings";
import HowToRegIcon from "@mui/icons-material/HowToReg";
import SavingsIcon from "@mui/icons-material/Savings";
import AudiotrackIcon from "@mui/icons-material/Audiotrack";
import HeadphonesIcon from "@mui/icons-material/Headphones";

export default function Roles({ roles }) {
  const role_icon = {
    admin: (
      <Tooltip key={"admin"} title="Admin">
        <AdminPanelSettingsIcon />
      </Tooltip>
    ),
    approver: (
      <Tooltip key={"approver"} title="Approver">
        <HowToRegIcon />
      </Tooltip>
    ),
    advertiser: (
      <Tooltip key={"advertiser"} title="Advertiser">
        <SavingsIcon />
      </Tooltip>
    ),
    artist: (
      <Tooltip key={"artist"} title="Artist">
        <AudiotrackIcon />
      </Tooltip>
    ),
    listener: (
      <Tooltip key={"listener"} title="Listener">
        <HeadphonesIcon />
      </Tooltip>
    ),
  };

  if (roles === undefined) return null;
  const content = roles.map((role) => {
    return role_icon[role];
  });

  return <>{content}</>;
}

'''
'''--- components/SongCard.js ---
import Card from "@mui/material/Card";
import CardMedia from "@mui/material/CardMedia";
import CardContent from "@mui/material/CardContent";
import IconButton from "@mui/material/IconButton";
import PlayArrowIcon from "@mui/icons-material/PlayArrow";
import QueueMusicIcon from "@mui/icons-material/QueueMusic";

import { Snackbar, Alert } from "@mui/material";

import { useEffect, useState } from "react";
import { Song, useSound } from "../context/SoundProvider";

export default function SongCard({ song }) {
  const { setSong, addToQueue, stopAll, play, build_features } = useSound();
  const [snackbar, setSnackbar] = useState(false);

  return (
    <>
      <Card sx={{ width: "256px" }} variant="outlined">
        <img
          className="object-cover w-64 h-64"
          src={song.artwork}
          alt="Song Art"
        />
        <CardContent>
          <div className="flex flex-row justify-between w-full">
            <div className="overflow-x-hidden whitespace-nowrap">
              <h3>{song.title}</h3>
              <h5 className="text-xs text-neutral-400">
                {song.artist} {build_features(song.featured)}
              </h5>
            </div>
            <div className="flex flex-row">
              <IconButton
                onClick={() => {
                  song.audio.load();
                  addToQueue(song);
                  setSnackbar(true);
                }}
                size="small"
                aria-label="queue"
              >
                <QueueMusicIcon />
              </IconButton>
              <IconButton
                size="small"
                onClick={() => {
                  stopAll();
                  setSong(song);
                }}
                aria-label="play"
              >
                <PlayArrowIcon />
              </IconButton>
            </div>
          </div>
        </CardContent>
      </Card>
      <Snackbar
        open={snackbar}
        autoHideDuration={6000}
        onClose={() => {
          setSnackbar(false);
        }}
      >
        <Alert severity="success" color="info">
          Added <span className="font-bold">{song.title}</span> to queue!
        </Alert>
      </Snackbar>
    </>
  );
}

'''
'''--- context/DatabaseProvider.js ---
// Packages //
import { useContext, createContext } from "react";

const DatabaseContext = createContext();

export function useDatabase() {
  return useContext(DatabaseContext);
}

export function DatabaseProvider({ children }) {
  // Create a single supabase client for interacting with your database

  const context = {};

  return (
    <>
      <DatabaseContext.Provider value={context}>
        {children}
      </DatabaseContext.Provider>
    </>
  );
}

'''
'''--- context/NearProvider.js ---
// Packages //
import { useState, useEffect, useContext, createContext } from "react";
import { keyStores, connect, WalletConnection, Contract } from "near-api-js";

const NearContext = createContext();

export function useNear() {
  return useContext(NearContext);
}

export function decode(data) {
  let res = "";
  for (let i = 0; i < data.length; i++) res += String.fromCharCode(data[i]);
  return JSON.parse(res);
}

const EMPTY_QUERY = Buffer.from("{}").toString("base64");

const DEFAULT_SEARCH = Buffer.from(
  JSON.stringify({
    from_index: "0",
    limit: 64,
  })
).toString("base64");

export function NearProvider({ children }) {
  const [near, setNear] = useState(null);
  const [wallet, setWallet] = useState(null);
  const [contract, setContract] = useState(null);
  const [redirect, setRedirect] = useState(true);
  const [signedIn, setSignedIn] = useState(false);
  const [roles, setRoles] = useState(["listener"]);
  const [artist, setArtist] = useState("No Artist");
  const [connected, setConnected] = useState(false);
  const [terms, setTerms] = useState([]);
  const [tokens, setTokens] = useState([]);
  const [costPerByte, setCostPerByte] = useState(null);

  const setup_near = async () => {
    const config = {
      networkId: "testnet",
      keyStore: new keyStores.BrowserLocalStorageKeyStore(),
      nodeUrl: "https://rpc.testnet.near.org",
      walletUrl: "https://wallet.testnet.near.org",
      helperUrl: "https://helper.testnet.near.org",
      explorerUrl: "https://explorer.testnet.near.org",
    };
    const near_connection = await connect(config);
    setNear(near_connection);
    const wallet_connection = new WalletConnection(near_connection);
    setWallet(wallet_connection);
    const _tokens = near_connection.connection.provider.query({
      request_type: "call_function",
      finality: "final",
      account_id: "nearsound.testnet",
      method_name: "nft_tokens",
      args_base64: DEFAULT_SEARCH,
    });
    const _search = near_connection.connection.provider.query({
      request_type: "call_function",
      finality: "final",
      account_id: "nearsound.testnet",
      method_name: "get_search_terms",
      args_base64: EMPTY_QUERY,
    });
    const _request =
      near_connection.connection.provider.experimental_genesisConfig();
    const [default_tokens, search_terms, response] = await Promise.all([
      _tokens,
      _search,
      _request,
    ]);
    setCostPerByte(response.runtime_config.storage_amount_per_byte);
    setTokens(decode(default_tokens.result));
    setTerms(decode(search_terms.result));
    const contract_connection = new Contract(
      wallet_connection.account(), // the account object that is connecting
      "nearsound.testnet",
      {
        viewMethods: [
          "nft_tokens",
          "get_artist",
          "get_search_terms",
          "nft_tokens_for_search",
          "nft_token",
        ], // view methods do not change state but usually return a value
        changeMethods: ["nft_mint", "create_artist"], // change methods modify state
        sender: wallet_connection.account(), // account object to initialize and sign transactions.
      }
    );
    setContract(contract_connection);
    setRoles([...roles, "artist"]);
    setArtist("Halfmoon");
    setConnected(true);
  };

  const connect_to_near = () => {
    wallet.requestSignIn(
      "nearsound.testnet", // contract requesting access
      "Nearsound" // optional
    );
  };

  const getTransaction = async (hash, account_id) => {
    const result = await near.connection.provider.txStatus(hash, account_id);
    return result;
  };

  const search = async (search_term) => {
    const _tokens = await contract.nft_tokens_for_search({
      search_term,
      from_index: "0",
      limit: 64,
    });
    if (_tokens.length == 0) reset_search();
    else setTokens(_tokens);
  };

  const reset_search = async (from_index = "0", limit = 64) => {
    const _args = Buffer.from(
      JSON.stringify({
        from_index,
        limit,
      })
    ).toString("base64");
    const response = await near.connection.provider.query({
      request_type: "call_function",
      finality: "final",
      account_id: "nearsound.testnet",
      method_name: "nft_tokens",
      args_base64: _args,
    });
    setTokens(decode(response.result));
  };

  useEffect(() => {
    if (wallet != undefined && wallet.isSignedIn()) setSignedIn(true);
    else setSignedIn(false);
  }, [wallet]);

  useEffect(() => {
    setup_near();
  }, []);

  const context = {
    near,
    wallet,
    contract,
    connected,
    roles,
    artist,
    terms,
    tokens,
    connect_to_near,
    getTransaction,
    signedIn,
    redirect,
    setRedirect,
    search,
    reset_search,
    costPerByte,
  };

  return (
    <NearContext.Provider value={context}>{children}</NearContext.Provider>
  );
}

'''
'''--- context/SoundProvider.js ---
// Packages //
import { useState, useEffect, useContext, createContext } from "react";
import { Howler, Howl } from "howler";

const SoundContext = createContext();

export function useSound() {
  return useContext(SoundContext);
}

export class Song {
  constructor(
    src,
    artwork,
    title,
    artist,
    account,
    featured = [],
    created = Date.now()
  ) {
    this.audio = new Howl({
      src: [src],
      html5: true,
    });
    this.artwork = artwork;
    this.title = title;
    this.artist = artist;
    this.featured = featured;
    this.account = account;
    this.created = created;
  }
}

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    let j = Math.floor(Math.random() * (i + 1));
    let temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
}

export function SoundProvider({ children }) {
  const refreshRate = 100;
  const [playing, setPlaying] = useState(false);

  const [song, setSong] = useState(
    new Song(
      "",
      "https://upload.wikimedia.org/wikipedia/commons/7/71/Black.png",
      "Song Name",
      "Artist"
    )
  );

  const [seek, updateSeek] = useState(0);
  const [duration, setDuration] = useState(0);
  const [queue, setQueue] = useState([]);
  const [seeking, setSeeking] = useState(0);
  const [volume, setVolume] = useState(50);
  const [loop, setLoop] = useState(false);

  const startSeeking = () => {
    setSeeking(
      setInterval(() => {
        updateSeek(song.audio.seek());
        setDuration(song.audio.duration());
      }, refreshRate)
    );
  };

  const stopSeeking = () => {
    clearInterval(seeking);
  };

  useEffect(() => {
    song.audio.once("end", () => {
      if (queue.length > 0 && !loop) {
        song.audio.unload();
        setSong(queue[0]);
        setQueue(queue.slice(1));
      }
    });
  }, [song, queue]);

  useEffect(() => {
    if (song.artist == "Artist") return;
    stopSeeking();
    startSeeking();
    setPlaying(true);
    setDuration(song.audio.duration());
    song.audio.play();
  }, [song]);

  useEffect(() => {
    song.audio.loop(loop);
  }, [loop]);

  const toggle = () => {
    if (song === undefined || song === null) return;
    if (playing) {
      stopSeeking();
      song.audio.pause();
      setPlaying(false);
    } else {
      song.audio.play();
      setPlaying(true);
      startSeeking();
    }
  };

  const skipForwards = () => {
    if (loop) song.audio.seek(0);
    else if (queue.length > 0) {
      stopAll();
      setSong(queue[0]);
      setQueue(queue.slice(1));
    }
  };

  const skipBackwards = () => {
    song.audio.seek(0);
  };

  const setSeek = (value) => {
    song.audio.seek(value * duration);
    updateSeek(value * duration);
  };

  const addToQueue = (song) => {
    setQueue([...queue, song]);
  };

  const upQueue = (index) => {
    if (index <= 0) return;
    const arr = [...queue];
    [arr[index - 1], arr[index]] = [arr[index], arr[index - 1]];
    setQueue(arr);
  };

  const downQueue = (index) => {
    if (index >= queue.length - 1) return;
    const arr = [...queue];
    [arr[index], arr[index + 1]] = [arr[index + 1], arr[index]];
    setQueue(arr);
  };

  const shuffle = () => {
    shuffleArray(queue);
    setQueue([...queue]);
  };

  const stopAll = () => {
    setPlaying(false);
    stopSeeking();
    Howler.stop();
  };

  const build_features = (featured) => {
    let str = "";
    if (
      featured === undefined ||
      featured === null ||
      featured.length === 0 ||
      (featured.length === 1 && featured[0] === "")
    )
      return str;
    featured.forEach((feature) => {
      str += feature + ", ";
    });
    str = str.slice(0, -2);
    return "(ft. " + str + ")";
  };

  const context = {
    song,
    queue,
    playing,
    seek,
    duration,
    volume,
    setVolume,
    toggle,
    setSong,
    addToQueue,
    upQueue,
    downQueue,
    stopAll,
    setSeek,
    updateSeek,
    startSeeking,
    stopSeeking,
    setLoop,
    build_features,
    shuffle,
    skipForwards,
    skipBackwards,
  };

  return (
    <>
      <SoundContext.Provider value={context}>{children}</SoundContext.Provider>
    </>
  );
}

'''
'''--- next.config.js ---
module.exports = {
  reactStrictMode: true,
}

'''
'''--- pages/_app.js ---
// Styles //
import "@fontsource/inter/variable.css";
import "../styles/globals.css";

import { NearProvider } from "../context/NearProvider";
import { SoundProvider } from "../context/SoundProvider";
import { DatabaseProvider } from "../context/DatabaseProvider";
import { createTheme, ThemeProvider } from "@mui/material/styles";

function Application({ Component, pageProps }) {
  const theme = createTheme({
    palette: {
      mode: "dark",
      neutral: {
        main: "#FFFFFF",
      },
    },
  });

  return (
    <DatabaseProvider>
      <NearProvider>
        <SoundProvider>
          <ThemeProvider theme={theme}>
            <Component {...pageProps} />
          </ThemeProvider>
        </SoundProvider>
      </NearProvider>
    </DatabaseProvider>
  );
}

export default Application;

'''
'''--- pages/account/artist.js ---
import Head from "next/head";
import NearLogin from "../../components/NearLogin";
import { CircularProgress } from "@mui/material";
import { Button, TextField } from "@mui/material";
import { useState, useEffect } from "react";
import { useNear } from "../../context/NearProvider";
import { utils } from "near-api-js";

function Artist() {
  const { wallet, contract, signedIn } = useNear();
  const [loading, setLoading] = useState(true);
  const [artist, setArtist] = useState("");

  useEffect(() => {
    if (wallet != undefined) setLoading(false);
  });

  const create_artist = async (e) => {
    e.preventDefault();
    await contract.create_artist(
      {
        artist_name: artist,
      },
      300000000000000, // attached GAS (optional)
      utils.format.parseNearAmount("0.01") // attached deposit in yoctoNEAR (optional)
    );
  };

  const content = () => {
    if (loading) {
      return (
        <>
          <CircularProgress />
        </>
      );
    }
    if (!signedIn) {
      return (
        <>
          <h3 className="mb-4">
            You must connect to NEAR before accessing this page.
          </h3>
          <NearLogin />
        </>
      );
    }
    return (
      <form
        onSubmit={create_artist}
        className="flex flex-col w-[500px] p-8 gap-4 h-full overflow-y-scroll"
      >
        <h1 className="text-3xl font-bold">Choose Your Artist Name</h1>
        <code className="mb-4">{wallet?.getAccountId()}</code>
        <TextField
          value={artist}
          onChange={(e) => {
            setArtist(e.target.value);
          }}
          label="Artist Name"
          required
        ></TextField>
        <Button variant="outlined" type="submit">
          Confirm
        </Button>
      </form>
    );
  };

  return (
    <main className="flex flex-col items-center w-screen h-screen max-w-screen max-h-screen text-white bg-dark">
      <Head>
        <title>Nearsound | Create An Artist</title>
        <meta
          name="description"
          content="Claim an Artist account on the NEAR protocol blockchain."
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className="p-8 text-3xl font-bold font-mono">nearsound / minting</h1>
      <div className="flex flex-col items-center justify-center h-full w-full gap-2 text-center">
        {content()}
      </div>
      <p className="p-2 font-xs text-gray-500">Nearsound 2022</p>
    </main>
  );
}

export default Artist;

'''
'''--- pages/account/index.js ---
// Components //
import Head from "next/head";
import Header from "../../components/Header";
import Player from "../../components/Player";
import Roles from "../../components/Roles";
import { MintSong, CreateArtist } from "../../components/ActionButtons";

import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Switch from "@mui/material/Switch";
import NearLogo from "../../components/NearLogo";
import NearLogin from "../../components/NearLogin";

import { useNear } from "../../context/NearProvider";
import { useState, useEffect } from "react";
import { Button, CircularProgress } from "@mui/material";
import { useRouter } from "next/router";

const balance = 0;

export default function Account() {
  const router = useRouter();
  const [ads, setAds] = useState(true);

  const { wallet, signedIn, connected, roles } = useNear();

  const content = () => {
    if (!connected) {
      return (
        <div className="flex flex-col grow items-center justify-center gap-8 p-8 h-full">
          <CircularProgress />
        </div>
      );
    }
    if (!signedIn) {
      return (
        <div className="flex flex-col grow items-center justify-center gap-8 p-8 h-full">
          <h3 className="mb-4">
            You must connect to NEAR before accessing this page.
          </h3>
          <NearLogin />
        </div>
      );
    }
    return (
      <div className="flex flex-col lg:flex-row grow items-start justify-start gap-8 p-8 h-full">
        <Card sx={{ width: 320 }} variant="outlined">
          <CardContent>
            <div className="flex flex-row items-center justify-between">
              <h2 className="text-xl font-bold">Account</h2>
              <div id="roles" className="flex flex-row gap-2">
                <Roles roles={roles} />
              </div>
            </div>
            <hr className="border-b-1 my-2"></hr>
            <div className="flex items-center">
              Play Advertisements
              <Switch
                checked={ads}
                onChange={() => {
                  setAds(!ads);
                }}
              />
            </div>
          </CardContent>
        </Card>
        <Card sx={{ width: 320 }} variant="outlined">
          <CardContent>
            <div className="flex flex-row items-center justify-between">
              <h2 className="text-xl font-bold">Actions</h2>
            </div>
            <hr className="border-b-1 my-2"></hr>
            <MintSong
              onClick={() => {
                router.push("/account/mint");
              }}
              roles={roles}
            />
            <CreateArtist
              onClick={() => {
                router.push("/account/artist");
              }}
              roles={roles}
            />
          </CardContent>
        </Card>
        <Card sx={{ width: 320 }} variant="outlined">
          <CardContent>
            <div className="flex flex-row items-center justify-between">
              <h2 className="text-xl font-bold">Funding</h2>
            </div>
            <hr className="border-b-1 my-2"></hr>
            <div className="flex flex-row items-center justify-between mt-2">
              <div className="flex flex-row items-center gap-5 text-xl overflow-x-hidden">
                <NearLogo />
                <code className="overflow-x-hidden whitespace-nowrap w-fit">
                  {balance.toFixed(2)}
                </code>
              </div>
              <Button variant="outlined">Add Funds</Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  };

  return (
    <main className="flex flex-col items-center justify-center w-screen lg:h-screen max-w-screen lg:max-h-screen text-white bg-dark">
      <Head>
        <title>Nearsound | Account</title>
        <meta
          name="description"
          content="A platform for listening and distributing music."
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      {content()}
      <Player />
    </main>
  );
}

'''
'''--- pages/account/mint.js ---
import {
  Autocomplete,
  TextField,
  Button,
  Skeleton,
  Stack,
  styled,
  Alert,
  Tooltip,
} from "@mui/material";
import Header from "../../components/Header";
import Player from "../../components/Player";
import MusicNoteIcon from "@mui/icons-material/MusicNote";
import CheckIcon from "@mui/icons-material/Check";
import { useEffect, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import { utils } from "near-api-js";

import { NFTStorage, Blob } from "nft.storage";
import LinearProgress from "@mui/material/LinearProgress";
import { CircularProgress } from "@mui/material";
import Head from "next/head";
import { useRouter } from "next/router";
import { useNear, decode } from "../../context/NearProvider";
import NearLogin from "../../components/NearLogin";

import imageCompression from "browser-image-compression";

const DEFAULT_TAGS = [
  "Rock",
  "Pop",
  "Indie",
  "Singer/Songwriter",
  "Hip-Hop",
  "Dubstep",
  "Electronic",
  "Rap",
  "Future Bass",
  "Folk",
  "Ethnic",
  "Country",
];

const Input = styled("input")({
  display: "none",
});

const COMPRESSION_OPTIONS = {
  maxSizeMB: 20, // 99 MB maximum
  maxWidthOrHeight: 1000, // width/height scaled down to 1000px
};

export default function Mint() {
  const router = useRouter();

  const MAX_UPLOAD_SIZE = 99999999;
  const CHARACTER_LIMIT = 64;
  const NFT_STORAGE_API_KEY =
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDcyNUNFQzQ5YjgzQTk0MDFFNjA3N0EzMUZjN2EyOThFMDExNUVkMDAiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY0MzkyODczMTYxNCwibmFtZSI6InRlc3QifQ.MlaurOnSPr9MGWcGZdRpf93UfnI9C9IMIloMF2KfFGA";
  const client = new NFTStorage({ token: NFT_STORAGE_API_KEY });

  const [loading, setLoading] = useState(true);
  const [loadingText, setLoadingText] = useState(
    "This can take a few seconds."
  );

  const [minting, setMinting] = useState(false);

  const [artwork, setArtwork] = useState(null);
  const [audio, setAudio] = useState(null);

  const [audioFileName, setAudioFileName] = useState(null);
  const [artworkURL, setArtworkURL] = useState(null);

  const [title, setTitle] = useState("");
  const [featured, setFeatured] = useState([]);
  const [tags, setTags] = useState([]);

  const [state, setState] = useState("mint");
  const [error, setError] = useState(false);

  const [token, setToken] = useState(null);

  const {
    near,
    wallet,
    signedIn,
    contract,
    connected,
    artist,
    getTransaction,
    costPerByte,
  } = useNear();

  const { transactionHashes } = router.query;
  useEffect(async () => {
    if (!connected) return;
    if (transactionHashes == undefined) {
      setLoading(false);
      return;
    }
    const tx = await getTransaction(transactionHashes, wallet.getAccountId());
    if (tx.status.SuccessValue != undefined) {
      const event = tx.receipts_outcome[0].outcome.logs[0];
      const log = JSON.parse(event.slice(event.indexOf(":") + 1));
      const _args = Buffer.from(
        JSON.stringify({
          token_id: log.data[0].token_ids[0],
        })
      ).toString("base64");
      const _token = await near.connection.provider.query({
        request_type: "call_function",
        finality: "final",
        account_id: "nearsound.testnet",
        method_name: "nft_token",
        args_base64: _args,
      });
      console.log(_token);
      setToken(decode(_token.result));
      setState("success");
      setLoading(false);
    } else setLoading(false);
  }, [transactionHashes, connected]);

  const onAudioUpload = (event) => {
    if (
      event.target.files[0] === null ||
      event.target.files[0] === undefined ||
      event.target.files[0].size > MAX_UPLOAD_SIZE
    ) {
      alert("Upload failed. Please upload a .wav file under 100mb.");
      return;
    }
    setAudioFileName(event.target.files[0].name);
    const reader = new FileReader();
    reader.readAsDataURL(event.target.files[0]);
    reader.onerror = () => {
      return false;
    };
    reader.onloadend = () => {
      setAudio(event.target.files[0]);
    };
  };

  const onArtworkUpload = async (event) => {
    const uploaded = event.target.files[0];
    if (uploaded === null || uploaded === undefined) return;
    const compressed = await imageCompression(uploaded, COMPRESSION_OPTIONS);
    const reader = new FileReader();
    reader.readAsDataURL(compressed);
    reader.onerror = () => {
      return false;
    };
    reader.onloadend = () => {
      let image = new Image();
      image.src = reader.result;
      image.onload = () => {
        if (image.height < 300 || image.height < 300) {
          alert("Artwork dimensions must be over 300px.");
          return false;
        }
        setArtworkURL(reader.result);
        setArtwork(compressed);
        return true;
      };
    };
  };

  const audio_upload_content = () => {
    if (audio === null)
      return (
        <>
          <MusicNoteIcon /> Upload Audio
        </>
      );
    else
      return (
        <>
          <CheckIcon /> {audioFileName}
        </>
      );
  };

  const artwork_upload_content = () => {
    if (artwork === null)
      return (
        <Stack spacing={1}>
          <Skeleton variant="rectangular" width={256} height={16} />
          <Skeleton variant="circular" width={40} height={40} />
          <Skeleton variant="rectangular" width={256} height={180} />
        </Stack>
      );
    else
      return (
        <img
          className="w-64 h-64 overflow-hidden object-center object-cover"
          src={artworkURL}
          alt="Song Artwork"
        />
      );
  };

  const calculate_cost = () => {
    let total_cost = BigInt(0);
    const token_id_len = uuidv4().length;
    for (let i = 0; i < tags.length; i++)
      total_cost += BigInt(tags[i].length + token_id_len) * BigInt(costPerByte);
    for (let i = 0; i < featured.length; i++)
      total_cost +=
        BigInt(featured[i].length + token_id_len) * BigInt(costPerByte);
    total_cost += BigInt((title.length + token_id_len) * costPerByte);
    total_cost += BigInt((artist.length + token_id_len) * costPerByte);
    total_cost += BigInt(128 * costPerByte); // For IPFS metadata + buffer
    return total_cost.toString();
  };

  const validate_and_mint = async (e) => {
    e.preventDefault();
    if (audio == null) {
      alert("Audio is missing. Please upload and try again.");
      return;
    }
    if (artwork == null) {
      alert("Artwork is missing. Please upload and try again.");
      return;
    }
    setMinting(true);
    const _audio = client.storeBlob(audio);
    const _artwork = client.storeBlob(artwork);
    const [audio_cid, artwork_cid] = await Promise.all([_audio, _artwork]);
    setLoadingText("Redirecting to NEAR wallet for confirmation.");
    const metadata = {
      title: title,
      audio: "https://ipfs.io/ipfs/" + audio_cid,
      media: "https://ipfs.io/ipfs/" + artwork_cid,
      featured: featured.join(" "),
      description: tags.join(" "),
    };
    await contract.nft_mint(
      {
        token_id: uuidv4(),
        metadata,
        receiver_id: wallet.getAccountId(),
      },
      300000000000000,
      calculate_cost()
    );
    setState("success");
    setMinting(false);
  };

  const content = () => {
    if (!connected || loading) {
      return (
        <>
          <CircularProgress />
        </>
      );
    }
    if (!signedIn) {
      return (
        <>
          <h3 className="mb-2">
            You must connect to NEAR before accessing this page.
          </h3>
          <NearLogin />
        </>
      );
    }
    if (artist == "No Artist") {
      <>
        <h3 className="mb-2">
          You must create an artist account before minting.
        </h3>
        <Button
          onClick={() => {
            router.push("/account/artist");
          }}
          variant="outlined"
        >
          Create Artist Account
        </Button>
      </>;
    }
    if (minting) {
      return (
        <>
          <h3 className="text-xl font-bold">Minting</h3>
          <LinearProgress sx={{ width: "clamp(200px, 300px, 500px)" }} />
          <p className="mt-2 font-sm text-neutral-500">{loadingText}</p>
        </>
      );
    }
    if (state == "mint") {
      return (
        <form
          onSubmit={validate_and_mint}
          className="flex flex-col w-[500px] p-8 gap-4 h-full overflow-y-scroll"
        >
          <h1 className="text-3xl font-bold mb-4">Mint Your Song</h1>
          <label htmlFor="audio-file" className="w-full">
            <Input
              accept=".wav"
              id="audio-file"
              multiple
              type="file"
              onChange={onAudioUpload}
            />
            <Button variant="contained" component="span" fullWidth>
              {audio_upload_content()}
            </Button>
            <div className="text-center text-xs text-neutral-400 p-2">
              Must be <code>.wav</code> format. Limit <code>100mb</code>.
            </div>
          </label>
          <TextField
            required
            value={title}
            error={error}
            onChange={(e) => {
              if (e.target.value?.length > CHARACTER_LIMIT) {
                setTitle(e.target.value.slice(0, CHARACTER_LIMIT));
                setError(true);
              } else {
                setError(false);
                setTitle(e.target.value);
              }
            }}
            label="Title"
            variant="outlined"
            helperText={"Maximum " + CHARACTER_LIMIT + " characters."}
          />
          <TextField
            value={artist}
            label="Artist"
            variant="outlined"
            disabled
          />
          <Autocomplete
            multiple
            freeSolo
            options={[]}
            value={featured}
            onChange={(e, value) => {
              setFeatured(value);
            }}
            renderInput={(params) => (
              <TextField {...params} label="Featured Artists (Optional)" />
            )}
          />
          <h3 className="text-xl">Upload Artwork (min. 300x300)</h3>
          <label htmlFor="art-file">
            <Input
              accept="image/*"
              id="art-file"
              type="file"
              onChange={onArtworkUpload}
            />
            <Button variant="outline" component="span">
              {artwork_upload_content()}
            </Button>
          </label>
          <Autocomplete
            multiple
            id="tags-standard"
            value={tags}
            onChange={(e, value) => {
              setTags(value);
            }}
            options={DEFAULT_TAGS}
            renderInput={(params) => (
              <TextField
                {...params}
                variant="outlined"
                label="Tags (Optional)"
                placeholder="Choose tags the best describe your song."
              />
            )}
          />
          <Button variant="outlined" type="submit">
            Mint
          </Button>
          <p className="w-full text-center text-sm text-neutral-500">
            Estimated Total Cost:{" "}
            {utils.format.formatNearAmount(calculate_cost())} NEAR
          </p>
        </form>
      );
    }
    if (state == "success") {
      return (
        <div className="flex flex-col items-center justify-center h-full w-full gap-2 overflow-y-scroll">
          <img
            className="w-64 h-64 overflow-hidden object-center object-cover rounded"
            src={token.metadata.media}
            alt="Song Artwork"
            draggable="false"
          />
          <hr className="m-2 border w-20 border-neutral-50 rounded" />
          <h1 className="text-3xl font-bold cursor-default">
            {token.metadata.title}
          </h1>
          <h3 className="cursor-default">{token.metadata.artist}</h3>
          <hr className="m-2 border w-20 border-neutral-50 rounded" />
          <code className="cursor-default">Transaction Details</code>
          <Tooltip title="Hash">
            <code className="text-xs max-[32ch] overflow-x-hidden cursor-pointer">
              {transactionHashes}
            </code>
          </Tooltip>
          <hr className="m-2 border w-20 border-neutral-50 rounded" />
          <div className="flex flex-row gap-4 mt-2 w-64">
            <Button
              onClick={() => {
                router.push("/");
              }}
              variant="outlined"
              fullWidth
            >
              Back to Menu
            </Button>
          </div>
        </div>
      );
    }
  };

  return (
    <main className="flex flex-col items-center w-screen h-screen max-w-screen max-h-screen text-white bg-dark">
      <Head>
        <title>Nearsound | Mint A Song</title>
        <meta
          name="description"
          content="Mint an NFT song on the NEAR protocol blockchain."
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className="flex flex-col items-center justify-center h-full w-full gap-2">
        {content()}
      </div>
      <p className="p-2 font-xs text-gray-500">Nearsound 2022</p>
    </main>
  );
}

'''
'''--- pages/home.js ---
import { useRouter } from "next/router";
import Image from "next/image";
import Particles from "react-tsparticles";
import Head from "next/head";
import NearLogo from "../components/NearLogo";
import UAuth from "@uauth/js";
import '../pages/home.module.css'
import { useNear } from "../context/NearProvider";
import { useEffect, useState } from "react";
import { motion } from "framer-motion";

export default function Home() {

  const { setRedirect } = useNear();
  const router = useRouter();
  const [loaded, setLoaded] = useState(false);
  const [loading, setLoading] = useState(false);

  const [user, setUser] = useState()
    
    const uauth = new UAuth(
      {
        clientID: "<Enter your client id>",
        redirectUri: <Enter your direct url>",
        scope: "openid wallet email:optional humanity_check:optional"
      })
      

  
    useEffect(() => {
      setLoading(true)
      uauth
        .user()
        .then(setUser)
        .catch(() => {})
        .finally(() => setLoading(false))
    }, [])
  
    /*///////////////////////
    *   Login/out Functions
    *///////////////////////
    const handleLogin = async() => {
      setLoading(true)
      await uauth
        .loginWithPopup()
        .then(() => uauth.user().then(setUser))
        .catch((e)=>{console.log(e)})
        .finally(() => {setRedirect(false)})
        if(user){
          setRedirect(false);
          router.push("/")
        }
    }
  
  const particlesInit = (main) => {
    console.log(main);
    // you can initialize the tsParticles instance (main) here, adding custom shapes or presets
  };

  const particlesLoaded = (container) => {
    console.log(container);
    setLoaded(true);
  };

  const variants = {
    hidden: { opacity: 0 },
    enter: { opacity: 1 },
    exit: { opacity: 0 },
  };

  return (
    <motion.main
      variants={variants}
      initial="hidden"
      animate="enter"
      exit="exit"
      transition={{ duration: 1 }}
      className="flex flex-col items-center justify-center gap-2 w-screen h-screen max-w-screen max-h-screen text-white bg-dark"
    >
      <div className="absolute w-full h-full top-0 left-0">
        <Particles
          id="tsparticles"
          init={particlesInit}
          loaded={particlesLoaded}
          options={{
            background: {
              color: {
                value: "#121212",
              },
            },
            fpsLimit: 60,
            particles: {
              color: {
                value: "#ffffff",
              },
              move: {
                direction: "none",
                enable: true,
                outMode: "bounce",
                random: true,
                speed: 1,
                straight: false,
              },
              number: {
                density: {
                  enable: true,
                  area: 800,
                },
                value: 50,
              },
              opacity: {
                value: 0.5,
              },
              shape: {
                type: "circle",
              },
              size: {
                random: true,
                value: 5,
              },
            },
            detectRetina: false,
          }}
        />
      </div>
      <Head>
        <title>Dmusic3 | Listen Now</title>
        <meta
          name="description"
          content="A platform for listening and distributing music."
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="absolute flex flex-col items-center justify-center gap-2 w-screen h-screen max-w-screen max-h-screen top-0 left-0 z-10">
        <img
          className="w-64 h-64"
          src="/landing.gif"
          alt="Spinning White Fire GIF"
        />
        <h1 className="font-black text-5xl sm:text-6xl lg:text-8xl">
          Dmusic3
        </h1>
        <h3 className="font-extralight text-lg sm:text-xl lg:text-2xl">
          Decentralized High Definition Music
        </h3>
        <button className="login-btn positioned"
          onClick={         handleLogin
              
          }
        ><a>  
        <img
        src="/default-button.png"
        />
        </a>
          {/* <NearLogo /> <code>/explore</code> */}
        </button>
      </div>
    </motion.main>
  );
}

'''
'''--- pages/index.js ---
// Components //
import Head from "next/head";
import Header from "../components/Header";
import Player from "../components/Player";
import SongCard from "../components/SongCard";

// Packages //
import { useEffect, useState } from "react";
import { useNear } from "../context/NearProvider";
import { useDatabase } from "../context/DatabaseProvider";
import { useRouter } from "next/router";
import { Song } from "../context/SoundProvider";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  "https://svbfmmdezfkyrkvqrojn.supabase.co",
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTY0MzkyNTMwMiwiZXhwIjoxOTU5NTAxMzAyfQ.0CWFaWRuOcsn46u9zbrUAkXd3ZC7b7pft7M3QTtaBqk"
);

export async function getServerSideProps() {
  const { data, error } = await supabase.from("songs").select();
  return {
    props: { data },
  };
}

export default function App({ data }) {
  const { near, wallet, redirect, contract, connected, tokens } = useNear();

  const router = useRouter();

  const [show, showPage] = useState(false);
  const [sound, setSound] = useState();
  const [loaded, setLoaded] = useState(false);
  const [songs, setSongs] = useState([]);

  useEffect(async () => {
    if (!connected) return;
    setSongs(tokens);
  }, [connected, tokens]);

  useEffect(() => {
    if (wallet === undefined || wallet === null) return;
    if (redirect && !wallet.isSignedIn()) router.replace("/home");
    else showPage(true);
  }, [wallet]);

  if (!show) {
    return (
      <main className="flex flex-col w-screen h-screen max-w-screen max-h-screen text-white bg-dark" />
    );
  }

  return (
    <main className="flex flex-col w-screen h-screen max-w-screen max-h-screen text-white bg-dark">
      <Head>
        <title>Dmusic3 | Listen Now</title>
        <meta
          name="description"
          content="A platform for listening and distributing music."
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div
        id="content"
        className="flex flex-row flex-wrap w-full h-full max-cols-4 items-start justify-start p-8 gap-4 overflow-y-scroll"
      >
        {songs.map((token, i) => {
          const song = new Song(
            token.metadata.audio,
            token.metadata.media,
            token.metadata.title,
            token.metadata.artist,
            token.author_id,
            token.metadata.featured.split(" ")
          );
          return <SongCard key={i} song={song} />;
        })}
      </div>
      {/* <Pagination count={10} size="small"/> */}
      <Player />
    </main>
  );
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- tailwind.config.js ---
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'primary': {
          DEFAULT: '#BB86FC',
          '50': '#FFFFFF',
          '100': '#FEFDFF',
          '200': '#EDE0FE',
          '300': '#DDC2FD',
          '400': '#CCA4FD',
          '500': '#BB86FC',
          '600': '#9C4FFB',
          '700': '#7D19F9',
          '800': '#6205D4',
          '900': '#49049E'
        },
        'dark': {
          DEFAULT: '#121212',
          '50': '#474747',
          '100': '#424242',
          '200': '#2E2E2E',
          '300': '#222222',
          '400': '#1F1F1F',
          '500': '#121212',
          '600': '#0F0F0F',
          '700': '#050505',
          '800': '#000000',
          '900': '#000000'
        },
      }
    },
  },
  plugins: [],
}

'''