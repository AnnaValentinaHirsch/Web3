*GitHub Repository "mehtaphysical/assign-a-friend"*

'''--- README.md ---
# Assignment Example

## Setup

### Contract

1. go into the contract directory: `cd contract`
2. install dependencies: `yarn`
3. compile the contract into WASM: `yarn asb`
4. deploy the contract `yarn near dev-deploy build/release/contract.wasm`
5. store the contract id in an environment variable `CONTRACT_ID=$(cat neardev/dev-account)`
6. you can then call contract methods `yarn near call $CONTRACT_ID <METHOD_NAME> '{"id":"4241345707"}' --accountId <YOUR_ACCOUNT_ID>`

### Front-End

1. go into the front-end directory `cd front-end`
2. install dependencies `yarn`
3. replace the example contract id with yours `sed -i "s/dev-1626994298245-51059421517553/$(cat ../contract/neardev/dev-account)/" js/*.js`
3. run the front-end with `yarn live-server`

'''
'''--- contract/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- contract/assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- contract/assembly/index.ts ---
import {
  Context,
  ContractPromise,
  ContractPromiseBatch,
  math,
  PersistentMap,
  u128,
} from "near-sdk-as";

@nearBindgen
class Assignment {
  assignerId: string;
  assigneeId: string;
  text: string;
  answer: string;
  payment: u128; // u128 is a 128 bit unsigned number (e.g. u32, i32)
}

// a Map is loaded into memory in full
// a PersistentMap only loads the values you ask for into memory
const assignments: PersistentMap<string, Assignment> = new PersistentMap<
  string,
  Assignment
>("a");

// createAssignment -> tell a friend to do something
export function createAssignment(accountId: string, text: string): string {
  // create a unique(ish) id for the assignment
  const id = math.hash32<string>(Context.sender + accountId + text).toString();

  // insert the assignment into the blockchain
  assignments.set(id, {
    assignerId: Context.sender,
    assigneeId: accountId,
    text: text,
    answer: "",
    payment: Context.attachedDeposit,
  });

  // return the id for the newly inserted assignment
  return id;
}

// getAssignment -> a friend to see their assignment
export function getAssignment(id: string): Assignment {
  assert(assignments.contains(id), "No assignment with that id exists");

  return assignments.getSome(id);
}

// completeAssignment -> a friend to finish an assignment
export function completeAssignment(id: string, answer: string): void {
  assert(assignments.contains(id), "No assignment with that id exists");
  const assignment = assignments.getSome(id);

  assert(Context.sender == assignment.assigneeId, "You are not the assignee");

  assignment.answer = answer;
  assignments.set(id, assignment);
}

// closeAssignment -> pay a friend if they finished the assignment correctly
export function closeAssignment(id: string): void {
  assert(assignments.contains(id), "No assignment with that id exists");
  const assignment = assignments.getSome(id);

  assert(Context.sender == assignment.assignerId, "You are not the assigner");

  ContractPromiseBatch.create(assignment.assigneeId).transfer(
    assignment.payment
  );

  assignments.delete(id);
}

'''
'''--- contract/assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": ["./**/*"]
}

'''
'''--- contract/package.json ---
{
  "name": "contract",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "asbuild": "^0.2.0",
    "near-cli": "^2.1.0",
    "near-sdk-as": "^3.2.3"
  }
}

'''
'''--- front-end/assignment.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Assignment</title>
  </head>
  <body>
    <h1>Assignment</h1>
    <h2 id="assigner-id"></h2>
    <p><span id="assignee-id"></span> is assigned the following task:</p>
    <p id="text"></p>
    <p>They will be paid <span id="amount"></span></p>

    <form id="complete-assignment">
      <textarea name="answer"></textarea>
      <button>Complete Assignment</button>
    </form>

    <script src="https://cdn.jsdelivr.net/npm/near-api-js@0.42.0/dist/near-api-js.min.js"></script>
    <script src="./js/assignment.js"></script>
  </body>
</html>

'''
'''--- front-end/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Assign a Friend</title>
  </head>
  <body>
    <h1>Assign a Friend</h1>
    <button id="sign-in">Sign in with NEAR</button>

    <form id="assignment-form">
      <label>Friend to assign</label>
      <input id="accountId" name="accountId" type="text" />

      <label>Amount to pay</label>
      <input id="amount" name="amount" type="number" />

      <label>Assignment Text</label>
      <textarea id="text" name="text"></textarea>

      <button>Create Assignment</button>
    </form>

    <script src="https://cdn.jsdelivr.net/npm/near-api-js@0.42.0/dist/near-api-js.min.js"></script>
    <script src="./js/index.js"></script>
  </body>
</html>

'''
'''--- front-end/js/assignment.js ---
const near = new nearApi.Near({
  keyStore: new nearApi.keyStores.BrowserLocalStorageKeyStore(),
  networkId: "testnet",
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
});
const wallet = new nearApi.WalletConnection(near, "assign-a-friend");

const params = new URLSearchParams(window.location.search);
const assignmentId = params.get("id");

window.onload = async () => {
  const assignerIdElement = document.getElementById("assigner-id");
  const assigneeIdElement = document.getElementById("assignee-id");
  const textElement = document.getElementById("text");
  const amountElement = document.getElementById("amount");

  const assignment = await wallet
    .account()
    .viewFunction("dev-1626994298245-51059421517553", "getAssignment", {
      id: assignmentId,
    });

  assignerIdElement.textContent = assignment.assignerId;
  assigneeIdElement.textContent = assignment.assigneeId;
  textElement.textContent = assignment.text;
  amountElement.textContent = assignment.payment;
};

const form = document.getElementById("complete-assignment");
form.addEventListener("submit", (event) => {
  event.preventDefault();

  const fd = new FormData(event.target);

  wallet.account().functionCall({
    contractId: "dev-1626994298245-51059421517553",
    methodName: "completeAssignment",
    args: { id: assignmentId, answer: fd.get("answer") },
  });
});

'''
'''--- front-end/js/index.js ---
const near = new nearApi.Near({
  keyStore: new nearApi.keyStores.BrowserLocalStorageKeyStore(),
  networkId: "testnet",
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
});
const wallet = new nearApi.WalletConnection(near, "assign-a-friend");

const button = document.getElementById("sign-in");

button.addEventListener("click", () => {
  wallet.requestSignIn({
    contractId: "dev-1626994298245-51059421517553",
  });
});

const form = document.getElementById("assignment-form");

form.addEventListener("submit", (event) => {
  event.preventDefault();

  const fd = new FormData(event.target);

  wallet.account().functionCall({
    contractId: "dev-1626994298245-51059421517553",
    methodName: "createAssignment",
    args: {
      accountId: fd.get("accountId"),
      text: fd.get("text"),
    },
    attachedDeposit: fd.get("amount"),
  });
});

'''
'''--- front-end/package.json ---
{
  "name": "front-end",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "live-server": "^1.2.1"
  }
}

'''