*GitHub Repository "3ugen/challenge4-mint-nft-ui"*

'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import React, {useState} from 'react'
import {Stack} from '@fluentui/react/lib/Stack';
import {login, logout} from './utils'
import Big from 'big.js'
import Text, {
  ActionButton,
  DocumentCard,
  DocumentCardActions,
  DocumentCardDetails,
  DocumentCardImage,
  DocumentCardTitle,
  getTheme, Link,
  PrimaryButton,
  Spinner,
  TextField,
} from '@fluentui/react';

import getConfig from './config'
import {ImageFit} from '@fluentui/react/lib/Image';
import {TestImages} from '@fluentui/example-data';
import {DefaultPalette} from '@fluentui/react/lib/Styling'
import {initializeIcons} from '@fluentui/font-icons-mdl2';
import axios from 'axios';

initializeIcons();

const endpoint = 'https://api.nft.storage' // the default
const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGQzZGFiNTg4NEFEYWRjZTFDQTJiRDAxNDQ3RGU5OUQzNmUzOTU1NjgiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYzNzU4ODM3MTUwNSwibmFtZSI6Im5lYXItY2hhbGxlbmdlIn0.2hg_8mofZa-8GFq0A2TRo7FVTwy-vtVXnte8XWun4gI' // your API key from https://nft.storage/manage

const {networkId} = getConfig(process.env.NODE_ENV || 'development')

const BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();
const theme = getTheme();
// Styles definition
const stackStyles = {
  root: {
    background: DefaultPalette.neutralLighter,
  },
};
const stackItemStyles = {
  root: {
    background: DefaultPalette.themePrimary,
    color: DefaultPalette.white,
    padding: 5,
  },
};

// Tokens definition
const containerStackTokens = {childrenGap: 5};
const verticalGapStackTokens = {
  childrenGap: 10,
  padding: 10,
};
const itemAlignmentsStackTokens = {
  childrenGap: 5,
  padding: 10,
};
const clickableStackTokens = {
  padding: 10,
};

const testText = 'Welcome to Near NFT Mint!'

export default function App() {
  const [selectedImage, setSelectedImage] = useState()
  const [title, setTitle] = useState("")
  const [nftId, setNftId] = useState(0)
  const [description, setDescription] = useState("")
  const [mintingState, setMintingState] = useState(0)
  const addFriendIcon = {iconName: 'SignOut'}
  const uploadIcon = {iconName: 'Upload'}
  const deleteIcon = {iconName: 'Delete'}
  const cardStyles = {
    root: {display: 'inline-block', marginRight: 20, marginBottom: 20, width: 320},
  };

  // if not signed in, return early with sign-in prompt

  if (!window.walletConnection.isSignedIn()) {
    console.log('sign in pls')
    return (
      <Stack styles={stackStyles} tokens={itemAlignmentsStackTokens}>
        <Stack.Item align={"center"}>
          Welcome to Near NFT Mint!
        </Stack.Item>
        <Stack.Item align={"center"}>
          Go ahead and click the button below to try it out:
        </Stack.Item>
        <Stack.Item align="center" styles={stackItemStyles}>
          <PrimaryButton text="Sign in" onClick={login} allowDisabledFocus/>
        </Stack.Item>
      </Stack>
    )
  }

  // This function will be triggered when the file field change
  const imageChange = (e) => {
    if (e.target.files && e.target.files.length > 0) {
      console.log(`set image ${e.target.files[0].name}`)
      setSelectedImage(e.target.files[0]);
    }
  };

  // This function will be triggered when the "Remove This Image" button is clicked
  const removeSelectedImage = () => {
    setSelectedImage();
  };

  const previewProps = {
    previewImages: [
      {
        name: 'Revenue stream proposal fiscal year 2016 version02.pptx',
        linkProps: {
          href: 'http://bing.com',
          target: '_blank',
        },
        previewImageSrc: TestImages.documentPreview,
        iconSrc: TestImages.iconPpt,
        imageFit: ImageFit.cover,
        width: 318,
        height: 196,
      },
    ],
  };
  const DocumentCardActivityPeople = [{name: 'Annie Lindqvist', profileImageSrc: TestImages.personaFemale}];

  // use React Hooks to store greeting in component state
  // const [greeting, set_greeting] = React.useState()

  // when the user has not yet interacted with the form, disable the button
  // const [buttonDisabled, setButtonDisabled] = React.useState(true)

  // after submitting the form, we want to show Notification
  // const [showNotification, setShowNotification] = React.useState(false)

  // The useEffect hook can be used to fire side-effects during render
  // Learn more: https://reactjs.org/docs/hooks-intro.html
  React.useEffect(
    () => {
      // in this case, we only care to query the contract when signed in
      /*if (window.walletConnection.isSignedIn()) {

        // window.contract is set by initContract in index.js
        window.contract.get_greeting({account_id: window.accountId})
          .then(greetingFromContract => {
            // set_greeting(greetingFromContract)
          })
      }*/
    },

    // The second argument to useEffect tells React when to re-run the effect
    // Use an empty array to specify "only run on first render"
    // This works because signing into NEAR Wallet reloads the page
    []
  )

  function _alertClicked() {
    alert('Clicked');
  }

  const onResetState = () => {
    setTitle("")
    setDescription("")
    selectedImage()
    setMintingState(0)
  }

  // On file upload (click the upload button)
  const onFileUpload = () => {

    setMintingState(1)
    // Create an object of formData
    let blobImg = new Blob([selectedImage], {type: "image/jpg"});
    const formData = new FormData();
    formData.append('file', blobImg, selectedImage.name)
    axios.post(
      "https://api.nft.storage/upload",
      formData,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'multipart/form-data'
        }
      }
    ).then(
      resp => {
        if (resp.status === 200) {
          let data = resp.data
          console.log(`storage status: ${data.ok}`)
          console.log(`storage value: ${JSON.stringify(data.value)}`)
          console.log(`cid: ${data.value.cid} name: ${data.value.files[0].name}`)
          let media_url = `https://${data.value.cid}.ipfs.dweb.link/${data.value.files[0].name}`
          console.log(`media_url: ${media_url}`)
          window.contract.nft_mint({
              token_id: nftId.toString(),
              receiver_id: "3ugen.testnet",
              token_metadata: {
                title: title,
                description: description,
                media: media_url,
                copies: 1
              },
            },
            BOATLOAD_OF_GAS,
            Big(0.1).times(10 ** 24).toFixed()
          )
            .then((res) => {
              console.log(`result: ${res}`)
              setMintingState(2)
            })
        } else {
          console.log(`upload error, server status: ${resp.status}`)
          setMintingState(0)
        }
      }
    ).catch((err) => {
      console.log(`transaction error: ${err}`)
      setMintingState(0)
    })
    ;
  };

  const handleTitleChange = (msg) => {
    console.log(`new title: ${msg.target.value}`)
    let newMsg = msg.target.value;
    setTitle(newMsg)
  }
  const handleDescriptionChange = (msg) => {
    console.log(`new description: ${msg.target.value}`)
    let newMsg = msg.target.value;
    setDescription(newMsg)
  }
  const handleIdChange = (msg) => {
    console.log(`new ID: ${msg.target.value}`)
    let newMsg = msg.target.value;
    if (newMsg.length > 0) {
      if (!isNaN(newMsg)) {
        setNftId(parseInt(msg.target.value, 10));
      } else {
        setNftId(0)
      }
    } else {
      setNftId(0)
    }

  }

  return (
    // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
    <Stack styles={stackStyles} tokens={itemAlignmentsStackTokens}>
      <Stack.Item align="end">
        <ActionButton iconProps={addFriendIcon} onClick={logout} allowDisabledFocus disabled={false} checked={false}>
          Log out
        </ActionButton>
      </Stack.Item>
      <Stack.Item align="center">
        <form>
          <input type="file" accept="image/*" name="picture" onChange={imageChange}/>
        </form>
      </Stack.Item>
      <Stack.Item align={"center"}>
        {selectedImage && mintingState !==2 && <DocumentCard
          aria-label={
            'Document Card with image. How to make a good design. '
          }
          styles={cardStyles}
        >
          <DocumentCardImage height={300} imageFit={ImageFit.cover} imageSrc={URL.createObjectURL(selectedImage)}/>
          <DocumentCardDetails>
            <DocumentCardTitle title="NFT Picture" shouldTruncate/>
            <DocumentCardActions actions={[{
              iconProps: {iconName: 'Delete'},
              onClick: () => removeSelectedImage(),
              ariaLabel: 'notifications action',
            }]}/>
          </DocumentCardDetails>
          {/*<DocumentCardActivity activity="Modified March 13, 2018" people={people.slice(0, 3)} />*/}
        </DocumentCard>}
      </Stack.Item>
      {selectedImage && mintingState !==2 && <Stack.Item align="center">
        <TextField // prettier-ignore
          label="Set NFT ID"
          prefix="ID"
          placeholder="NFT ID number"
          ariaLabel="set nft title"
          value={nftId}
          onChange={(msg) => handleIdChange(msg)}
        />
      </Stack.Item>}
      {selectedImage && mintingState !==2 && <Stack.Item align="center">
        <TextField // prettier-ignore
          label="Set NFT Title"
          prefix="Title"
          placeholder="Awesome art"
          ariaLabel="set nft title"
          value={title}
          onChange={(msg) => handleTitleChange(msg)}
        />
      </Stack.Item>}
      {selectedImage && mintingState !==2 && <Stack.Item align="center">
        <TextField // prettier-ignore
          label="Set NFT Description"
          prefix="Description"
          placeholder="My NFT media"
          ariaLabel="set nft description"
          value={description}
          onChange={(msg) => handleDescriptionChange(msg)}
        />
      </Stack.Item>}
      {selectedImage && mintingState === 0 && <Stack.Item align="center">
        <PrimaryButton onClick={onFileUpload}
                       allowDisabledFocus disabled={!(title.length > 0 && description.length > 0)}
                       checked={false}>
          Mint NFT
        </PrimaryButton>
      </Stack.Item>}
      {mintingState === 1 && <Stack.Item align="center">
        <Spinner label="Transaction sending ..." ariaLive="assertive" labelPosition="right"/>
      </Stack.Item>}
      {mintingState === 2 && <Stack.Item align="center">
        Check new NFT in your <Link href="https://wallet.near.org/?tab=collectibles">Near Wallet Collectibles</Link>
      </Stack.Item>}
      {mintingState === 2 && <Stack.Item align="center">
        <PrimaryButton onClick={onResetState}
                       allowDisabledFocus disabled={false}
                       checked={false}>
          Mint another NFT
        </PrimaryButton>
      </Stack.Item>}
      {/*{showNotification && <Notification />}*/}
    </Stack>
  )
}

// this component gets rendered by App after the form is submitted
function Notification() {
  const urlPrefix = `https://explorer.${networkId}.near.org/accounts`
  return (
    <aside>
      <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.accountId}`}>
        {window.accountId}
      </a>
      {' '/* React trims whitespace around tags; insert literal space character when needed */}
      called method: 'set_greeting' in contract:
      {' '}
      <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.contract.contractId}`}>
        {window.contract.contractId}
      </a>
      <footer>
        <div>✔ Succeeded</div>
        <div>Just now</div>
      </footer>
    </aside>
  )
}

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/config.js ---
const CONTRACT_NAME = '3ugen.testnet'

function getConfig(env) {
  env = 'testnet'

  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['nft_tokens_for_owner'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['nft_mint'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''