*GitHub Repository "metanear/react-components"*

'''--- .travis.yml ---
language: node_js
node_js:
  - 9
  - 8

'''
'''--- README.md ---
# Meta NEAR React components

> React components to interact with Meta NEAR contracts on NEAR Protocol blockchain

[![NPM](https://img.shields.io/npm/v/metanear-react-components.svg)](https://www.npmjs.com/package/metanear-react-components) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)

## Install

```bash
npm install --save react-near-openweb
```

## Usage

```jsx
import React, { Component } from 'react'

import { Profile } from 'metanear-react-components'

class Example extends Component {
  render () {
    return (
      <Profile accountId="eugenethedream" />
    )
  }
}
```

## License

MIT Â© [evgenykuzyakov](https://github.com/evgenykuzyakov)

'''
'''--- example/README.md ---
# Examples for Meta NEAR React Components

- Profile component

'''
'''--- example/package.json ---
{
  "name": "metanear-react-components-example",
  "homepage": "https://metanear.github.io/react-components",
  "version": "0.0.0",
  "license": "MIT",
  "private": true,
  "dependencies": {
    "prop-types": "^15.6.2",
    "react": "^16.12.0",
    "react-dom": "^16.12.0",
    "metanear-react-components": "link:..",
    "react-scripts": "^3.3.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject",
    "deploy": "yarn build && gh-pages -d build"
  },
  "devDependencies": {
    "gh-pages": "^2.2.0"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- example/public/index.html ---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="theme-color" content="#000000">

    <link rel="manifest" href="%PUBLIC_URL%/manifest.json">

    <title>React Profile component example for Meta NEAR</title>
  </head>

  <body>
    <noscript>
      You need to enable JavaScript to run this app.
    </noscript>

    <div id="root"></div>
  </body>
</html>

'''
'''--- example/public/manifest.json ---
{
  "short_name": "react-near-openweb",
  "name": "react-near-openweb",
  "start_url": "./index.html",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- example/src/App.js ---
import React, { Component } from 'react'

import { Profile } from 'metanear-react-components'

export default class App extends Component {
  render () {
    return (
      <div>
        <Profile accountId='eugenethedream' />
      </div>
    )
  }
}

'''
'''--- example/src/index.css ---
body {
  margin: 0;
  padding: 0;
  font-family: sans-serif;
}

'''
'''--- example/src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'

import './index.css'
import App from './App'

ReactDOM.render(<App />, document.getElementById('root'))

'''
'''--- package.json ---
{
  "name": "metanear-react-components",
  "version": "0.2.0",
  "description": "React components to interact with Meta NEAR contracts on NEAR Protocol blockchain",
  "license": "MIT",
  "repository": "metanear/react-components",
  "homepage": "https://metanear.github.io/react-components",
  "main": "dist-modules",
  "engines": {
    "node": ">=8",
    "npm": ">=5"
  },
  "scripts": {
    "dist": "babel ./src --out-dir ./dist-modules",
    "prepare": "yarn dist"
  },
  "dependencies": {
    "metanear-sdk-js": "^0.3.1",
    "prop-types": "^15.7.2"
  },
  "peerDependencies": {
    "react": ">= 0.11.2 < 17.0.0",
    "react-dom": ">= 0.11.2 < 17.0.0"
  },
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-eslint": "^10.0.0",
    "babel-jest": "^24.0.0",
    "babel-plugin-syntax-dynamic-import": "^6.18.0",
    "babel-plugin-transform-class-properties": "^6.24.1",
    "babel-plugin-transform-es2015-destructuring": "^6.23.0",
    "babel-plugin-transform-object-rest-spread": "^6.26.0",
    "babel-preset-env": "^1.6.1",
    "babel-preset-react": "^6.24.1",
    "react": "^16.8.6",
    "react-dom": "^16.8.6"
  }
}

'''
'''--- src/Profile.js ---
import React from 'react'
import { MetaNearApp } from 'metanear-sdk-js'
import PropTypes from 'prop-types'

const propTypes = {
  accountId: PropTypes.string.isRequired,
  defaultProfileUrl: PropTypes.string,
  displayName: PropTypes.string,
  profileUrl: PropTypes.string,
  bio: PropTypes.string,
  onFetch: PropTypes.func,
  forceShow: PropTypes.bool
}

const defaultProps = {
  defaultProfileUrl: null,
  styles: {
    profile: {
      whiteSpace: 'nowrap',
      display: 'inline-block',
    },
    profileImage: {
      height: '3em',
      width: '3em',
      borderRadius: '50%',
      verticalAlign: 'middle'
    },
    profileName: {
      overflowY: 'hidden',
      marginLeft: '0.5em',
      verticalAlign: 'middle',
    },
    profileDisplayName: {},
    profileAccountId: {
      color: '#999',
    },
  },
};

const profileAppId = 'profile'

class Profile extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      displayName: '',
      profileUrl: null,
      bio: '',
      loading: false,
      found: false
    }
    const nearConfig = this.props.nearConfig || window.nearConfig || {
      networkId: 'default',
      nodeUrl: 'https://rpc.nearprotocol.com',
      walletUrl: 'https://wallet.nearprotocol.com',
    };

    if (!window.profileComponentCache) {
      window.profileComponentCache = {
        profileCache: {},
        app: new MetaNearApp(profileAppId, null, nearConfig),
      };
      window.profileComponentCache.app.init();
    }

    this.profileCache = window.profileComponentCache.profileCache;
    this.app = window.profileComponentCache.app;
  }

  componentDidMount() {
    this.props.accountId && this.app.init().then(() => this.updateProfile(this.props.accountId));
  }

  async fetchProfile(accountId) {
    if (accountId in this.profileCache) {
      return await this.profileCache[accountId];
    } else {
      console.log("Fetching profile for " + accountId);
      this.profileCache[accountId] = Promise.all([
        this.app.getFrom(accountId, 'displayName'),
        this.app.getFrom(accountId, 'profileUrl'),
        this.app.getFrom(accountId, 'bio'),
      ]).then((values) => {
        return {
          accountId,
          displayName: values[0] || "",
          profileUrl: values[1],
          bio: values[2] || "",
        };
      }).catch((e) => false);
      return await this.profileCache[accountId];
    }
  }

  updateProfile(accountId) {
    this.setState({
      displayName: "",
      profileUrl: null,
      bio: "",
      loading: true,
      found: false,
    });
    this.fetchProfile(this.props.accountId).then((profile) => {
      if (profile) {
        this.setState({
          displayName: profile.displayName,
          profileUrl: profile.profileUrl,
          bio: profile.bio,
          loading: false,
          found: true,
        });
      } else {
        this.setState({
          loading: false,
          found: false,
        });
      }
      this.props.onFetch && this.props.onFetch(profile);
    })

  }

  componentDidUpdate(prevProps) {
    if (this.props.accountId !== prevProps.accountId) {
      this.app.init().then(() => this.updateProfile(this.props.accountId));
    }
  }

  render() {
    const displayName = this.props.displayName || this.state.displayName;
    const profileUrl = this.props.profileUrl || this.state.profileUrl || this.props.defaultProfileUrl;
    const bio = this.props.bio || this.state.bio;
    const accountId = this.props.accountId;
    const styles = this.props.styles;

    return this.state.loading ? (
      <div style={styles.profile}>
        <div className="spinner-grow" role="status">
          <span className="sr-only">Loading...</span>
        </div>
      </div>
    ) : this.state.found || this.props.forceShow ? (
        <div style={styles.profile} title={bio}>
          <img style={styles.profileImage} src={profileUrl} alt={`Profile @${accountId}`}/>
          <span style={styles.profileName}>
            <span style={styles.profileDisplayName}>{displayName}</span>
            <span style={styles.profileAccountId}>{"(@" + accountId + ")"}</span>
          </span>
        </div>
    ) : null;
  }
}

Profile.propTypes = propTypes;
Profile.defaultProps = defaultProps;

export default Profile;

'''
'''--- src/index.js ---
import Profile from './Profile.js'
export { Profile }

'''
'''--- src/test.js ---
import Profile from './'

describe('Profile', () => {
  it('is truthy', () => {
    expect(Profile).toBeTruthy()
  })
})

'''