*GitHub Repository "Learn-NEAR/NCD--tic-tac-toe"*

'''--- README.md ---
# Tic-Tac-Toe as a NEAR contract

Video demo: [here](https://drive.google.com/file/d/1L0licLk5sSTQ21iwIp3QHHPRhX8hhfC3/view)

Figma wireframes: [here](https://www.figma.com/file/reMNlA1lKaM1hFthWbwvrP/Untitled?node-id=3%3A117)

## Install dependencies
```
yarn
```

## Build and Deploy the contract
```
npx asb
near dev-deploy ./out/main.wasm
# save the contract id in your clipboard and send it to player 2
```

## How to Play

1. Player one call function `createGame` passing the attached value, and send gameId to player 2
2. Player two call function `joinGame(gameId)` passing gameId that player one sent, also passing the attached value
3. Player one is the first to play, calling function `play(gameId, lin, col)` with gameId, lin, and col as argument
4. Player two continues the game
5. The plays continue until someone win, or the game gets draw
6. Players can view the board during the game, or after it end using function `viewBoard(gameId)` that gets gameId as parameter
7. When someone win, the attached deposit will be transfered to the wallet of the winner.

## Run the game
**Create a game**
```
near call <contract-id> createGame --account_id <account-id> --amount 5
# save the game id in your clipboard and send it to your friend
```

**Join a game (player 2)**
```
near call <contract-id> joinGame '{"gameId": <game-id>}' --account_id <account-id> --amount 5
```

**Play the game**
```
near call <contract-id> play '{"gameId": <game-id>, "lin": 2}' --account_id <account-id>
```

**View board**
```
near call <contract-id> viewBoard '{"gameId": <game-id>}' --account_id <account-id>
```

'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports');
'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json",
  "entry": "assembly/main.ts",
  "options": {
    "binaryFile": "out/main.wasm"
  }
}
'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- assembly/__tests__/main.spec.ts ---
import { storage } from "near-sdk-as";
import { verifyBoard } from "../main";

describe('verify board', () => {
  it('player one should win', () => {
    // let line0 = new PersistentVector<i8>('a');
    // let line1 = new PersistentVector<i8>('b');
    // let line2 = new PersistentVector<i8>('c');
    // line0.push(1);
    // line0.push(0);
    // line0.push(0);

    // line1.push(1);
    // line1.push(0);
    // line1.push(0);

    // line2.push(1);
    // line2.push(0);
    // line2.push(0);

    // expect(verifyBoard(line0, line1, line2)).toBe(1);
  });
});

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- assembly/main.ts ---
import { logging, context, PersistentVector, ContractPromiseBatch, u128 } from "near-sdk-as";
import { TicTacToe, games, GameState } from "./model";

export function createGame(): u32 {
  const game = new TicTacToe();
  games.set(game.gameId, game);
  return game.gameId;
}

export function play(gameId: u32, lin: i8, col: i8): string {
  assert(games.contains(gameId), 'GameId not found');

  let game = games.getSome(gameId);
  let currentPlayer = context.sender;
  assert(lin>=0 && lin<3, 'Not valid line');
  assert(col>=0 && col<3, 'Not valid column');
  if (lin==0) assert(game.line0[col]==0, 'Position already asigned');
  if (lin==1) assert(game.line1[col]==0, 'Position already asigned');
  if (lin==2) assert(game.line2[col]==0, 'Position already asigned');
  assert(game.nextPlayer == currentPlayer, 'Its not your turn');
  assert(game.gameState == GameState.InProgress, 'Game is not in progress');

  if (lin == 0) {
    fillBoard(game.line0, col, currentPlayer, game);
  } else if (lin == 1) {
    fillBoard(game.line1, col, currentPlayer, game);
  } else if (lin == 2) {
    fillBoard(game.line2, col, currentPlayer, game);
  }
  
  let res = verifyBoard(game.line0, game.line1, game.line2);
  if (res == 1) {
    return finishGame(game, game.player1);
  } 
  if (res == -1) {
    return finishGame(game, game.player2);
  }
  
  game.roundsPlayed++;
  if (game.roundsPlayed == 9) {
    game.gameState = GameState.Completed;
    games.set(game.gameId, game);
    return "Game tied. No winners!"
  }
  
  games.set(game.gameId, game);
  return getBoard(game.line0, game.line1, game.line2);
}

export function viewBoard(gameId: u32): string {
  let game = games.getSome(gameId);
  return getBoard(game.line0, game.line1, game.line2);
}

export function getBoard(line0: PersistentVector<i8>, line1: PersistentVector<i8>, line2: PersistentVector<i8>): string {
  var parseBoard = "";

  for (let i = 0; i < 3; ++i) {
    for (let j = 0; j < 3; ++j) {
      if (i == 0) {
        parseBoard = parseBoard.concat(line0[j].toString())
      } else if (i == 1) {
        parseBoard = parseBoard.concat(line1[j].toString())
      } else if (i == 2) {
        parseBoard = parseBoard.concat(line2[j].toString())
      }
    }

    if (i != 2) {
      parseBoard = parseBoard.concat(' | ')
    }
  }

  return parseBoard;
}

export function joinGame(gameId: u32): string {
  assert(games.contains(gameId), 'Game does not exists');
  let game = games.getSome(gameId);
  assert(game.player2 == "", 'This game already has two players');
  assert(game.player1 != context.sender, 'You cant play with youself :(');

  game.player2 = context.sender;
  game.amount2 = context.attachedDeposit;
  game.gameState = GameState.InProgress;

  games.set(gameId, game);

  return "Joined the game, lets play!";
}

export function verifyBoard(line0: PersistentVector<i8>, line1: PersistentVector<i8>, line2: PersistentVector<i8>): i8 {
  if(isEqual(line0[0], line0[1], line0[2])) {
    return line0[0];
  } else if (isEqual(line1[0], line1[1], line1[2])) {
    return line1[0];
  } else if (isEqual(line2[0], line2[1], line2[2])) {
    return line2[0];
  } else if (isEqual(line0[0], line1[0], line2[0])) {
    return line0[0];
  } else if (isEqual(line0[1], line1[1], line2[1])) {
    return line0[1];
  } else if (isEqual(line0[2], line1[2], line2[2])) {
    return line0[2];
  } else if (isEqual(line0[0], line1[1], line2[2])) {
    return line0[0];
  } else if (isEqual(line2[0], line1[1], line0[2])) {
    return line2[0];
  } else {
    return 0;
  }
}

function isEqual(x: i8, y: i8, z: i8): boolean {
  if (x == y && y == z && z != 0) {
    return true;
  }
  return false;
}

function finishGame(game: TicTacToe, winnerId: string): string {
  game.gameState = GameState.Completed;
  
  const to_winner = ContractPromiseBatch.create(winnerId);
  const amount_to_receive = u128.add(game.amount2, game.amount1);
  to_winner.transfer(amount_to_receive);
  
  games.set(game.gameId, game);
  return `Congratulations: ${winnerId} is the winner and received ${amount_to_receive}`;
}

function fillBoard(line: PersistentVector<i8>, col: i8, player: string, game: TicTacToe): void {
  if (player == game.player1) {
    line[col] = 1;
    game.nextPlayer = game.player2;
  } else if (player == game.player2) {
    line[col] = -1;
    game.nextPlayer = game.player1;
  }
}

'''
'''--- assembly/model.ts ---
import { PersistentVector, RNG, context, PersistentMap, logging, storage, u128 } from "near-sdk-as";

export enum GameState {
  Created,
  InProgress,
  Completed
}

@nearBindgen
export class TicTacToe {
  gameId: u32;
  gameState: GameState;
  player1: string;
  amount1: u128;
  player2: string;
  amount2: u128;
  roundsPlayed: u8;

  nextPlayer: string;
  line0: PersistentVector<i8>;
  line1: PersistentVector<i8>;
  line2: PersistentVector<i8>;
  constructor() {
    let rng = new RNG<u32>(1, u32.MAX_VALUE);
    let roll = rng.next();
    this.gameId = roll;

    this.gameState = GameState.Created;
    this.player1 = context.sender;
    this.amount1 = context.attachedDeposit;
    this.nextPlayer = this.player1;
    this.player2 = "";
    this.roundsPlayed = 0;

    this.line0 = new PersistentVector<i8>(`${this.gameId}-0`);
    this.line1 = new PersistentVector<i8>(`${this.gameId}-1`);
    this.line2 = new PersistentVector<i8>(`${this.gameId}-2`);

    for (let i=0; i<3; i++) {
      this.line0.push(0);
      this.line1.push(0);
      this.line2.push(0);
    }
  }
}

export const games = new PersistentMap<u32, TicTacToe>("g");

// so init() funcition is aways called when I deploy the contract?

// I want to make a on how to save a 2 dimentions array
'''
'''--- assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}
'''
'''--- package.json ---
{
  "name": "tic-tac-toe",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "yarn build && asp",
    "build": "npx asb",
    "jest": "yarn build && jest test"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "dotenv": "^8.2.0",
    "jest": "^26.6.3",
    "jest-environment-node": "^26.6.2",
    "js-sha256": "^0.9.0",
    "near-api-js": "^0.36.0",
    "near-sdk-as": "^3.1.0"
  }
}

'''
'''--- script.sh ---
#!/bin/sh

near

'''
'''--- src/index.js ---

require("dotenv").config();

const near = require("near-api-js");

const credentialsPath = "./credentials"

const options = {

}

'''