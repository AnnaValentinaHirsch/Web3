*GitHub Repository "htafolla/cucumberswap"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
bananaswap
==================

This app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `bananaswap.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `bananaswap.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account bananaswap.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'bananaswap.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- contract/README.md ---
bananaswap Smart Contract
==================

A [smart contract] written in [AssemblyScript] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install [Node.js] ≥ 12

Exploring The Code
==================

1. The main smart contract code lives in `assembly/index.ts`. You can compile
   it with the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard AssemblyScript tests using [as-pect].

  [smart contract]: https://docs.near.org/docs/roles/developer/contracts/intro
  [AssemblyScript]: https://www.assemblyscript.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [as-pect]: https://www.npmjs.com/package/@as-pect/cli

'''
'''--- contract/as-pect.config.js ---
module.exports = require('near-sdk-as/imports')
'''
'''--- contract/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- contract/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- contract/assembly/__tests__/main.spec.ts ---
import { setGreeting } from '..';
import { storage, Context } from "near-sdk-as";

describe("Greeting ", () => {
    it("should be set and read", () => {
        setGreeting("hello world");
        const greeting = storage.get<string>(Context.sender);
    });
});

'''
'''--- contract/assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- contract/assembly/index.ts ---
/*
 * This is an example of an AssemblyScript smart contract with two simple,
 * symmetric functions:
 *
 * 1. setGreeting: accepts a greeting, such as "howdy", and records it for the
 *    user (account_id) who sent the request
 * 2. getGreeting: accepts an account_id and returns the greeting saved for it,
 *    defaulting to "Hello"
 *
 * Learn more about writing NEAR smart contracts with AssemblyScript:
 * https://docs.near.org/docs/roles/developer/contracts/assemblyscript
 *
 */

import { context, ContractPromise, ContractPromiseBatch, logging, storage, u128 } from 'near-sdk-as'

const BERRIES_CONTRACT = 'berryclub.ek.near';
const NEAR_NOMINATION = u128.from('1000000000000000000000000');
const MIN_FRACTION = u128.from('1000000000000');
const MIN_BALANCE = NEAR_NOMINATION * u128.from(10);
const COMISSION_PERCENT = u128.from(10);

function assertOwner(): void {
    assert(context.predecessor == context.contractName, 'must be called by owner');
}

export function start(berries: u128): void {
    assertOwner();
    storage.set('berries', berries);
    storage.set('started', true);
}

export function stop(): void {
    assertOwner();

    storage.delete('started');
}

function assertPoolStarted(): void {
    assert(storage.contains('started'), 'pool not started yet');
}

@nearBindgen
class TransferRawArgs {
    receiver_id: string;
    amount: u128;
}

function withComission(price: u128): u128 {
    const hundred = u128.from(100);
    return price * (hundred + COMISSION_PERCENT) / hundred;
}

export function getBuyPrice(berries: u128): u128 {
    return getBuyPriceInternal(berries, context.accountBalance);
}

function getBuyPriceInternal(berries: u128, nearBalance: u128): u128 {
    const internalBerries = storage.getSome<u128>('berries') / MIN_FRACTION;
    berries = berries / MIN_FRACTION;
    assert(berries > u128.Zero, 'cannot exchange less than ' + MIN_FRACTION.toString() + ' berries');
    assert(berries < internalBerries, 'not enough berries in pool');

    const resultingBerries = internalBerries - berries;
    const currentNearAmount = (nearBalance - MIN_BALANCE) / MIN_FRACTION;
    const newNearAmount =  internalBerries * currentNearAmount / resultingBerries;
    const nearPrice = newNearAmount - currentNearAmount;
    return withComission(nearPrice * MIN_FRACTION);
}

export function buy(berries: u128): ContractPromise {
    assertPoolStarted();

    const nearPrice = getBuyPriceInternal(berries, context.accountBalance - context.attachedDeposit);
    assert(nearPrice <= context.attachedDeposit, 'not enough NEAR attached, required ' + nearPrice.toString());

    storage.set('berries', storage.getSome<u128>('berries') - berries);

    // TODO: Send back extra NEAR
    ContractPromiseBatch.create(context.predecessor)
        .transfer(context.attachedDeposit - nearPrice);

    // TODO: Do we need to lock somehow before transfer end?
    return ContractPromise.create<TransferRawArgs>(BERRIES_CONTRACT, 'transfer_raw',
        { receiver_id: context.predecessor, amount: berries }, 5000000000000, u128.One);
    // TODO: How to handle potential transfer errors to refund NEAR?
}

export function getSellPrice(nearAmount: u128): u128 {
    const currentNearAmount = (context.accountBalance - MIN_BALANCE) / MIN_FRACTION;
    const currentBerries = storage.getSome<u128>('berries') / MIN_FRACTION;
    nearAmount = nearAmount / MIN_FRACTION;
    assert(nearAmount > u128.Zero, 'cannot exchange less than ' + MIN_FRACTION.toString() + ' yoctoNEAR');
    assert(nearAmount < currentNearAmount, 'not enough NEAR in pool');

    const newNear = currentNearAmount - nearAmount;
    const newBerries = currentBerries * currentNearAmount / newNear;
    const berriesPrice = newBerries - currentBerries;

    return withComission(berriesPrice * MIN_FRACTION);
}

function sell(sender_id: string, berries: u128, nearAmount: u128): u128 {
    assertPoolStarted();

    const berriesPrice = getSellPrice(nearAmount);
    assert(berriesPrice <= berries, 'not enough berries attached, required ' + berriesPrice.toString());

    // TODO: Do we need to lock somehow before transfer end?
    storage.set('berries', storage.getSome<u128>('berries') + berriesPrice);
    // TODO: Wait somehow for this promise?
    ContractPromiseBatch.create(sender_id).transfer(nearAmount);

    return berriesPrice;
}

@nearBindgen
class WithdrawFromVaultArgs {
    // TODO: Sort out u32/u64/u53 situation
    vault_id: u32;
    receiver_id: string;
    amount: u128;
}

function withdrawFromVault(vault_id: u32, receiver_id: string, amount: u128): ContractPromise {
    return ContractPromise.create<WithdrawFromVaultArgs>(BERRIES_CONTRACT,
        'withdraw_from_vault', { receiver_id, amount, vault_id }, 5000000000000);
}

export function on_receive_with_vault(sender_id: string, amount: u128, vault_id: u32, payload: String): ContractPromise {
    assert(context.predecessor == BERRIES_CONTRACT, "can only be called from token contract");

    if (payload.startsWith('sell:')) {
        const parts = payload.split(':');
        const nearAmount = u128.from(parts[1]);
        const berries = sell(sender_id, amount, nearAmount);
        if (berries < amount) {
            withdrawFromVault(vault_id, sender_id, amount - berries);
        }
        return withdrawFromVault(vault_id, context.contractName, berries);
    }

    if (payload == 'deposit') {
        assert(!storage.contains('started'), "deposit not supported after pool is started");
        storage.set('berries', storage.get('berries', u128.from(0))! + amount);
        return withdrawFromVault(vault_id, context.contractName, amount);
    }

    assert(false, 'unexpected payload: ' + payload);
    // NOTE: Never happens, but is return value is required
    return withdrawFromVault(vault_id, sender_id, amount);
}

'''
'''--- contract/assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- contract/package.json ---
{
  "name": "greeter",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "private": true,
  "dependencies": {
    "as-bignum": "^0.2.7",
    "asbuild": "^0.0.8",
    "near-sdk-as": "^2.0.0"
  },
  "devDependencies": {
    "shelljs": "^0.8.4"
  },
  "resolutions": {
    "as-bignum": "0.2.7"
  },
  "scripts": {
    "build:release": "asb --verbose --target release",
    "build:debug": "asb --verbose --target debug"
  }
}

'''
'''--- package.json ---
{
  "name": "bananaswap",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "cd contract && npm run build:release",
    "build:contract:debug": "cd contract && npm run build:debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy --wasmFile contract/build/debug/greeter.wasm",
    "deploy:contract": "near deploy  --wasmFile contract/build/release/greeter.wasm",
    "deploy": "npm run build && npm run deploy:contract",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "dev": "nodemon --watch contract -e ts --exec \"npm run start\"",
    "test": "npm run build:contract:debug && node contract/test && jest test --runInBand"
  },
  "devDependencies": {
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~1.4.0",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "big.js": "^6.0.3",
    "near-api-js": "~0.31.0",
    "regenerator-runtime": "~0.13.5"
  },
  "jest": {
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  }
}

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'bananaswap.near'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/global.css ---
* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 25em;
}

h1 {
  margin-top: 0;
  padding: 3.5em 0 0.5em;
  text-align: center;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button, button[disabled] {
  box-shadow: none;
  background-color: var(--light-gray);
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}
@keyframes loader {
  0% { transform: rotate(0deg) }
  100% { transform: rotate(360deg) }
}

fieldset {
  border: none;
  padding: 1em 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: var(--success);
}
aside footer *:last-child {
  color: var(--gray);
}
@keyframes notify {
  0% { transform: translateY(10em) }
  5% { transform: translateY(0) }
  95% { transform: translateY(0) }
  100% { transform: translateY(10em) }
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="./assets/favicon.ico" />
  <link rel="apple-touch-icon" href="./assets/favicon.ico" />
  <title>🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌🍌</title>
  <link rel="stylesheet" href="global.css">
</head>
<body>
  <main id="signed-out-flow" style="display: none">
    <h1>Welcome to 🍌-swap</h1>
    <p>
      Sign in to swap 🍌 to NEAR and vice versa.
    </p>
    <p style="text-align: center; margin-top: 2.5em">
      <button id="sign-in-button">Sign in</button>
    </p>
  </main>

  <div id="signed-in-flow" style="display: none">
    <p style="float: right">
      Signed in as: <b class="accountId"></b>
      <a id="sign-out-button" style="margin-left: 0.5em;">
        Sign out
      </a>
    </p>
    <main>
      <h1>Trade 🍌 for NEAR tokens</h1>

      <h2>Your balances</h2>
      <p>Your 🍌: <b id="berriesBalance">...</b></p>
      <p>Your NEAR: <b id="nearBalance">...</b></p>

      <h2>Pool balances</h2>
      <p>Pool 🍌: <b id="poolBerriesBalance">...</b></p>
      <p>Pool NEAR: <b id="poolNearBalance">...</b></p>

      <h2>NEAR → 🍌</h2>
      <form id="buyForm">
        <fieldset>
          <label
            for="berriesToBuy"
            style="display: block; margin-bottom: 0.5em"
          >
            🍌  to buy
          </label>
          <input
            autocomplete="off"
            id="berriesToBuy"
          />
          <label
            for="maxNearPrice"
            style="display: block; margin-bottom: 0.5em"
          >
            Max NEAR to spend
          </label>
          <input
            autocomplete="off"
            id="maxNearPrice"
          />
          <button style="border-radius: 5px; display: block; margin-top: 0.5em">Buy</button>
        </fieldset>
      </form>
      <h2>🍌 → NEAR</h2>
      <form id="sellForm">
        <fieldset>
          <label
            for="nearToBuy"
            style="display: block; margin-bottom: 0.5em"
          >
            Desired NEAR
          </label>
          <input
            autocomplete="off"
            id="nearToBuy"
          />
          <label
            for="maxBerriesPrice"
            style="display: block; margin-bottom: 0.5em"
          >
            Max 🍌 to sell
          </label>
          <input
            autocomplete="off"
            id="maxBerriesPrice"
          />
          <button style="border-radius: 5px; display: block; margin-top: 0.5em">Sell</button>
        </fieldset>
      </form>
      <hr>
      <p>
        If you wanna build apps like this, check out
        <a target="_blank" href="https://docs.near.org">the NEAR docs</a>
        or look through some
        <a target="_blank" href="https://examples.near.org">example apps</a>.
      </p>
      <p>
        Fork <a href="https://github.com/vgrichina/bananaswap">this app</a> on GitHub.
      </p>
      <p>
        THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
      </p>
    </main>
  </div>

  <script src="./index.js"></script>
</body>
</html>

'''
'''--- src/index.js ---
import 'regenerator-runtime/runtime'

import { initContract, login, logout } from './utils'

import getConfig from './config'
const { networkId } = getConfig(process.env.NODE_ENV || 'development')

import { utils } from 'near-api-js'

import Big from 'big.js';
import { NEAR_NOMINATION } from 'near-api-js/lib/utils/format'

const submitButton = document.querySelector('form button')

const BOATLOAD_OF_GAS = '95000000000000';
const BERRIES_CONTRACT = 'berryclub.ek.near';

const handleSubmit = handler => async (event) => {
    event.preventDefault()

    const form = event.target;
    form.querySelector('fieldset').disabled = true;

    try {
        await handler(form);
    } catch (e) {
        alert(
            'Something went wrong! ' +
            'Maybe you need to sign out and back in? ' +
            'Check your browser console for more info.'
        )
        throw e
    } finally {
        form.querySelector('fieldset').disabled = false;
    }

    await fetchGreeting()
}

document.querySelector('#buyForm').onsubmit = handleSubmit(async form => {
    await window.contract.buy({
        berries: parseBerryAmount(form.querySelector('#berriesToBuy').value)
    }, BOATLOAD_OF_GAS, utils.format.parseNearAmount(form.querySelector('#maxNearPrice').value));
});

document.querySelector('#sellForm').onsubmit = handleSubmit(async form => {
    const account = await window.walletConnection.account();
    await account.functionCall(BERRIES_CONTRACT, 'transfer_with_vault', {
        receiver_id: window.contract.contractId,
        amount: parseBerryAmount(form.querySelector('#maxBerriesPrice').value),
        payload: `sell:${utils.format.parseNearAmount(form.querySelector('#nearToBuy').value)}`
    }, BOATLOAD_OF_GAS, '1');
});

document.querySelector('#sign-in-button').onclick = login
document.querySelector('#sign-out-button').onclick = logout

const BERRIES_NOMINATION = Big(10).pow(18)

function parseBerryAmount(berries) {
    return Big(berries).mul(BERRIES_NOMINATION).toFixed(0);
}

function formatBerryAmount(berries, fracDigits = 5) {
    return Big(berries).div(BERRIES_NOMINATION).toFixed(fracDigits);
}

document.querySelector('#berriesToBuy').onchange = async (event) => {
    let nearPrice = await window.contract.getBuyPrice({ berries: parseBerryAmount(event.target.value) });
    nearPrice = Big(nearPrice).mul('1.01').toFixed(0);

    document.querySelector('#maxNearPrice').value = utils.format.formatNearAmount(nearPrice, 5); 
}

document.querySelector('#nearToBuy').onchange = async (event) => {
    let berryPrice = await window.contract.getSellPrice({ nearAmount: utils.format.parseNearAmount(event.target.value) });
    berryPrice = Big(berryPrice).mul('1.01').toFixed(0);

    document.querySelector('#maxBerriesPrice').value = formatBerryAmount(berryPrice, 5); 
}

// Display the signed-out-flow container
function signedOutFlow() {
    document.querySelector('#signed-out-flow').style.display = 'block'
}

// Displaying the signed in flow container and fill in account-specific data
function signedInFlow() {
    document.querySelector('#signed-in-flow').style.display = 'block'

    document.querySelectorAll('.accountId').forEach(el => {
        el.innerText = window.accountId
    })

    fetchGreeting()
}

async function fetchGreeting() {
    const account = await window.walletConnection.account();
    const { total: accountBalance } = await account.getAccountBalance();
    document.querySelector('#nearBalance').innerHTML = utils.format.formatNearAmount(accountBalance, 5);
    const berriesBalance = await account.viewFunction(BERRIES_CONTRACT, 'get_balance', { account_id: account.accountId });
    document.querySelector('#berriesBalance').innerHTML = formatBerryAmount(berriesBalance);

    const poolAccount = await window.near.account(window.contract.contractId);
    let { total: poolNearBalance } = await poolAccount.getAccountBalance();
    poolNearBalance = Big(poolNearBalance).sub(Big(10).mul(NEAR_NOMINATION.toString())).toFixed(0);
    document.querySelector('#poolNearBalance').innerHTML = utils.format.formatNearAmount(poolNearBalance, 5);
    const poolBerriesBalance = await account.viewFunction(BERRIES_CONTRACT, 'get_balance', { account_id: poolAccount.accountId });
    document.querySelector('#poolBerriesBalance').innerHTML = formatBerryAmount(poolBerriesBalance);
}

// `nearInitPromise` gets called on page load
window.nearInitPromise = initContract()
    .then(() => {
        if (window.walletConnection.isSignedIn()) signedInFlow()
        else signedOutFlow()
    })
    .catch(console.error)

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['getGreeting'],
    changeMethods: [],
    sender: window.accountId
  })
})

test('getGreeting', async () => {
  const message = await window.contract.getGreeting({ accountId: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))
  window.near = near;

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['getSellPrice', 'getBuyPrice'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['start', 'stop', 'buy', 'on_receive_with_vault'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>Please run the following command in NEAR CLI, then enter account id here. masterAccountId default: test.near
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''