*GitHub Repository "glue3/frontback"*

'''--- .eslintrc.json ---
{
  "plugins": ["@typescript-eslint"],
  "extends": [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "rules": {
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/ban-ts-comment": "warn"
  }
}

'''
'''--- .prettierrc.json ---
{
  "semi": false,
  "trailingComma": "es5",
  "singleQuote": true,
  "tabWidth": 2,
  "useTabs": false
}

'''
'''--- .vscode/settings.json ---
{
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode"
}

'''
'''--- README.md ---
# GLU3 Frontend and Backend

GLU3 App built with Next.js + TypeScript + ESLint.

# Get started

```
# Install dependencies
yarn

# Start dev server
yarn dev

# Start tests (or yarn test --watch for watch mode)
yarn test

# Lint (the dot is important)
yarn lint .

# If we want to build
yarn build
```

# Technical choices

- ESLint and Prettier are integrated with VSCode out of the box (you just need VSCode's ESLint plugin).
- Prettier is integrated with ESLint, so you do not need the Prettier plugin.
- Improved lint-staged configuration: linting will only happen on staged files, not all files.
- Because of Husky settings, Typescript types and linting are checked before each commit. If for some reason you want to ignore and commit anyway you can use the `--no-verify` flag. (ex.: `git commit --no-verify -m "Updated README.md"`)

For automatic ES-Lint corrections on VSCode you can add this setting on you environment:

```
// .vscode/settings.json
{
  "editor.formatOnSave": false,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  }
}
```

For the same in Webstorm follow these instructions:
`https://www.jetbrains.com/help/webstorm/eslint.html#ws_eslint_configure_run_eslint_on_save`

# GLU3 Design

## Factory Contract

```
deploy()
createToken(
    tokenName: string,
    symbol: string,
    supply: number,
    decimals: number,
    canMint: boolean,
    canBurn: boolean
)
```

## Child Contract

```
ft_transfer(receiver_id, amount)
sendToFund(id, amount)
sendFromFund(id, amount, walletAddress)
```

## Backend REST API (to be used with generated API Key)

- `GET /sendToFund?apiKey&amount&id` (send tokens of a user without a wallet to the temporary fund)

- `POST /sendFromFund` (tokens that were stored on the temporary funds can be claimed via this API)

## WARNING!

This project was coded in only 2 days for the Nearcon 2022 Hackathon. Therefore, it is just a proof of concept.
The API routes are not secured whatsoever. Don't use this code in production!

'''
'''--- lint-staged.config.js ---
module.exports = {
  // Type check TypeScript files
  '**/*.(ts|tsx)': () => 'yarn tsc --noEmit',

  // Lint then format TypeScript and JavaScript files
  '**/*.(ts|tsx|js)': (filenames) => [
    `yarn eslint --fix ${filenames.join(' ')}`,
    `yarn prettier --write ${filenames.join(' ')}`,
  ],

  // Format MarkDown and JSON
  '**/*.(md|json)': (filenames) =>
    `yarn prettier --write ${filenames.join(' ')}`,
}

'''
'''--- next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- next.config.js ---
/** @type {import('next').NextConfig} */
module.exports = {
  reactStrictMode: true,
}

'''
'''--- package.json ---
{
  "name": "quid-front",
  "private": true,
  "scripts": {
    "dev": "NODE_OPTIONS='--inspect' next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "postinstall": "prisma generate"
  },
  "dependencies": {
    "@prisma/client": "^4.3.1",
    "@reduxjs/toolkit": "^1.7.1",
    "axios": "^0.27.2",
    "generate-api-key": "^1.0.1",
    "grommet": "^2.20.1",
    "near-api-js": "^0.44.2",
    "next": "12.0.7",
    "react": "17.0.2",
    "react-dom": "17.0.2",
    "react-gauge-chart": "^0.4.0",
    "react-redux": "^7.2.6",
    "styled-components": "^5.3.3"
  },
  "devDependencies": {
    "@types/node": "17.0.8",
    "@types/react": "17.0.38",
    "@types/react-redux": "^7.1.21",
    "@types/styled-components": "^5.1.19",
    "@typescript-eslint/eslint-plugin": "^5.9.0",
    "eslint": "8.6.0",
    "eslint-config-next": "12.0.7",
    "eslint-config-prettier": "^8.3.0",
    "husky": "^7.0.4",
    "lint-staged": "^12.1.7",
    "prettier": "^2.5.1",
    "prisma": "^4.3.1",
    "typescript": "4.5.4"
  }
}

'''
'''--- prisma/migrations/20220913111809_init/migration.sql ---
-- CreateEnum
CREATE TYPE "Network" AS ENUM ('MAINNET', 'TESTNET');

-- CreateTable
CREATE TABLE "ApiKey" (
    "id" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "wallet" TEXT NOT NULL,
    "apiKey" TEXT NOT NULL,

    CONSTRAINT "ApiKey_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "ApiKeyTestnet" (
    "id" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "wallet" TEXT NOT NULL,
    "apiKey" TEXT NOT NULL,

    CONSTRAINT "ApiKeyTestnet_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Transaction" (
    "id" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "wallet" TEXT NOT NULL,
    "transactionId" TEXT NOT NULL,
    "amount" BIGINT NOT NULL,
    "network" "Network" NOT NULL,

    CONSTRAINT "Transaction_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "ApiKey_wallet_key" ON "ApiKey"("wallet");

-- CreateIndex
CREATE UNIQUE INDEX "ApiKey_apiKey_key" ON "ApiKey"("apiKey");

-- CreateIndex
CREATE UNIQUE INDEX "ApiKeyTestnet_wallet_key" ON "ApiKeyTestnet"("wallet");

-- CreateIndex
CREATE UNIQUE INDEX "ApiKeyTestnet_apiKey_key" ON "ApiKeyTestnet"("apiKey");

-- CreateIndex
CREATE UNIQUE INDEX "Transaction_wallet_key" ON "Transaction"("wallet");

'''
'''--- prisma/migrations/migration_lock.toml ---
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"
'''
'''--- public/images/near_icon.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 288 288">
    <g id="Layer_1">
        <path fill="#fff" d="M187.58,79.81l-30.1,44.69a3.2,3.2,0,0,0,4.75,4.2L191.86,103a1.2,1.2,0,0,1,2,.91v80.46a1.2,1.2,0,0,1-2.12.77L102.18,77.93A15.35,15.35,0,0,0,90.47,72.5H87.34A15.34,15.34,0,0,0,72,87.84V201.16A15.34,15.34,0,0,0,87.34,216.5h0a15.35,15.35,0,0,0,13.08-7.31l30.1-44.69a3.2,3.2,0,0,0-4.75-4.2L96.14,186a1.2,1.2,0,0,1-2-.91V104.61a1.2,1.2,0,0,1,2.12-.77l89.55,107.23a15.35,15.35,0,0,0,11.71,5.43h3.13A15.34,15.34,0,0,0,216,201.16V87.84A15.34,15.34,0,0,0,200.66,72.5h0A15.35,15.35,0,0,0,187.58,79.81Z"/>
    </g>
</svg>

'''
'''--- public/images/near_logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 414 162">
    <g id="Layer_1" data-name="Layer 1">
        <path fill="#fff" d="M207.21,54.75v52.5a.76.76,0,0,1-.75.75H201a7.49,7.49,0,0,1-6.3-3.43l-24.78-38.3.85,19.13v21.85a.76.76,0,0,1-.75.75h-7.22a.76.76,0,0,1-.75-.75V54.75a.76.76,0,0,1,.75-.75h5.43a7.52,7.52,0,0,1,6.3,3.42l24.78,38.24-.77-19.06V54.75a.75.75,0,0,1,.75-.75h7.22A.76.76,0,0,1,207.21,54.75Z"/>
        <path fill="#fff" d="M281,108h-7.64a.75.75,0,0,1-.7-1L292.9,54.72A1.14,1.14,0,0,1,294,54h9.57a1.14,1.14,0,0,1,1.05.72L324.8,107a.75.75,0,0,1-.7,1h-7.64a.76.76,0,0,1-.71-.48l-16.31-43a.75.75,0,0,0-1.41,0l-16.31,43A.76.76,0,0,1,281,108Z"/>
        <path fill="#fff" d="M377.84,106.79,362.66,87.4c8.57-1.62,13.58-7.4,13.58-16.27,0-10.19-6.63-17.13-18.36-17.13H336.71a1.12,1.12,0,0,0-1.12,1.12h0a7.2,7.2,0,0,0,7.2,7.2H357c7.09,0,10.49,3.63,10.49,8.87s-3.32,9-10.49,9H336.71a1.13,1.13,0,0,0-1.12,1.13v26a.75.75,0,0,0,.75.75h7.22a.76.76,0,0,0,.75-.75V87.87h8.33l13.17,17.19a7.51,7.51,0,0,0,6,2.94h5.48A.75.75,0,0,0,377.84,106.79Z"/>
        <path fill="#fff" d="M258.17,54h-33.5a1,1,0,0,0-1,1h0A7.33,7.33,0,0,0,231,62.33h27.17a.74.74,0,0,0,.75-.75V54.75A.75.75,0,0,0,258.17,54Zm0,45.67h-25a.76.76,0,0,1-.75-.75V85.38a.75.75,0,0,1,.75-.75h23.11a.75.75,0,0,0,.75-.75V77a.75.75,0,0,0-.75-.75H224.79a1.13,1.13,0,0,0-1.12,1.13v29.46a1.12,1.12,0,0,0,1.12,1.12h33.38a.75.75,0,0,0,.75-.75v-6.83A.74.74,0,0,0,258.17,99.67Z"/>
        <path fill="#fff" d="M108.24,40.57,89.42,68.5a2,2,0,0,0,3,2.63l18.52-16a.74.74,0,0,1,1.24.56v50.29a.75.75,0,0,1-1.32.48l-56-67A9.59,9.59,0,0,0,47.54,36H45.59A9.59,9.59,0,0,0,36,45.59v70.82A9.59,9.59,0,0,0,45.59,126h0a9.59,9.59,0,0,0,8.17-4.57L72.58,93.5a2,2,0,0,0-3-2.63l-18.52,16a.74.74,0,0,1-1.24-.56V56.07a.75.75,0,0,1,1.32-.48l56,67a9.59,9.59,0,0,0,7.33,3.4h2a9.59,9.59,0,0,0,9.59-9.59V45.59A9.59,9.59,0,0,0,116.41,36h0A9.59,9.59,0,0,0,108.24,40.57Z"/>
    </g>
</svg>

'''
'''--- public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- src/components/CryptoInput/types.ts ---
export interface CryptoInputPropsType {
  value?: string
  onChange: (value: string) => void
  onChangeCurrency?: (e: string) => void
  maxValue?: string
  currencyQuote?: number
  showBalance?: boolean
}

export enum CurrencyTypeEnum {
  NEAR = 'NEAR',
  GLU3 = 'GLU3',
}

'''
'''--- src/grommetTheme.ts ---
import { grommet } from 'grommet/themes'
import {
  deepMerge,
  // normalizeColor,
} from 'grommet/utils'
// import { getNormalizedColor } from 'grommet/utils/color'
// import { css } from 'styled-components'

export const grommetTheme = deepMerge(grommet, {
  name: 'glu3-theme',
  rounding: 8,
  spacing: 24,
  defaultMode: 'light',
  global: {
    colors: {
      brand: {
        dark: '#5B8798',
        light: '#558FFF',
      },
      gradient: {
        // light: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        light:
          'linear-gradient(-225deg, #69EACB 0%, #EACCF8 48%, #6654F1 100%)',
        dark: 'linear-gradient(135deg, #FF9900 0%, #764ba2 100%)',
      },
      'gradient-background': {
        dark: 'linear-gradient(180deg, rgb(39 33 36) 5%, rgb(21 16 17) 100%, rgb(0 0 0) 100%)',
        light: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
      },
      background: {
        dark: '#111111',
        // dark: 'linear-gradient(#e66465, #9198e5)',
        // dark: css`linear-gradient(90deg, rgb(50.588% 99.608% 91.373%) 0%, rgb(50.559% 99.609% 91.772%) 6.25%, rgb(50.473% 99.613% 92.974%) 12.5%, rgb(50.328% 99.62% 94.988%) 18.75%, rgb(50.126% 99.629% 97.828%) 25%, rgb(49.865% 97.767% 99.641%) 31.25%, rgb(49.547% 93.235% 99.656%) 37.5%, rgb(49.171% 87.801% 99.674%) 43.75%, rgb(48.736% 81.427% 99.695%) 50%, rgb(48.243% 74.067% 99.72%) 56.25%, rgb(47.691% 65.67% 99.748%) 62.5%, rgb(47.08% 56.177% 99.779%) 68.75%, rgb(47.297% 46.411% 99.815%) 75%, rgb(57.721% 45.682% 99.854%) 81.25%, rgb(69.335% 44.894% 99.898%) 87.5%, rgb(82.221% 44.045% 99.947%) 93.75%, rgb(96.471% 43.137% 100%) 100% )`,
        light: '#FFFFFF',
        // dark: `linear-gradient(90deg, rgb(26.667% 26.667% 26.667%) 0%, rgb(21.973% 21.973% 21.973%) 6.25%, rgb(17.865% 17.865% 17.865%) 12.5%, rgb(14.303% 14.303% 14.303%) 18.75%, rgb(11.25% 11.25% 11.25%) 25%, rgb(8.665% 8.665% 8.665%) 31.25%, rgb(6.51% 6.51% 6.51%) 37.5%, rgb(4.746% 4.746% 4.746%) 43.75%, rgb(3.333% 3.333% 3.333%) 50%, rgb(2.233% 2.233% 2.233%) 56.25%, rgb(1.406% 1.406% 1.406%) 62.5%, rgb(0.814% 0.814% 0.814%) 68.75%, rgb(0.417% 0.417% 0.417%) 75%, rgb(0.176% 0.176% 0.176%) 81.25%, rgb(0.052% 0.052% 0.052%) 87.5%, rgb(0.007% 0.007% 0.007%) 93.75%, rgb(0% 0% 0%) 100% )`,
      },
      'background-back': {
        // dark: '#222222',
        dark: '#080E1C',
        light: '#EEEEEE',
      },
      'background-front': {
        // dark: '#2e2e2e',
        dark: '#0B1725',
        light: '#FFFFFF',
      },
      'background-contrast': {
        dark: '#FFFFFF11',
        light: '#11111111',
      },
      text: {
        light: '#333333',
        dark: '#ffffff',
      },
      'text-strong': {
        dark: '#FFFFFF',
        light: '#000000',
      },
      'text-weak': {
        dark: '#CCCCCC',
        light: '#444444',
      },
      'text-xweak': {
        dark: '#999999',
        light: '#666666',
      },
      border: {
        dark: 'text-xweak',
        light: 'text-xweak',
        // dark: css`linear-gradient(90deg, rgb(50.588% 99.608% 91.373%) 0%, rgb(50.559% 99.609% 91.772%) 6.25%, rgb(50.473% 99.613% 92.974%) 12.5%, rgb(50.328% 99.62% 94.988%) 18.75%, rgb(50.126% 99.629% 97.828%) 25%, rgb(49.865% 97.767% 99.641%) 31.25%, rgb(49.547% 93.235% 99.656%) 37.5%, rgb(49.171% 87.801% 99.674%) 43.75%, rgb(48.736% 81.427% 99.695%) 50%, rgb(48.243% 74.067% 99.72%) 56.25%, rgb(47.691% 65.67% 99.748%) 62.5%, rgb(47.08% 56.177% 99.779%) 68.75%, rgb(47.297% 46.411% 99.815%) 75%, rgb(57.721% 45.682% 99.854%) 81.25%, rgb(69.335% 44.894% 99.898%) 87.5%, rgb(82.221% 44.045% 99.947%) 93.75%, rgb(96.471% 43.137% 100%) 100% )`,
        // light:
        //   'linear-gradient(90deg, rgb(50.588% 99.608% 91.373%) 0%, rgb(50.559% 99.609% 91.772%) 6.25%, rgb(50.473% 99.613% 92.974%) 12.5%, rgb(50.328% 99.62% 94.988%) 18.75%, rgb(50.126% 99.629% 97.828%) 25%, rgb(49.865% 97.767% 99.641%) 31.25%, rgb(49.547% 93.235% 99.656%) 37.5%, rgb(49.171% 87.801% 99.674%) 43.75%, rgb(48.736% 81.427% 99.695%) 50%, rgb(48.243% 74.067% 99.72%) 56.25%, rgb(47.691% 65.67% 99.748%) 62.5%, rgb(47.08% 56.177% 99.779%) 68.75%, rgb(47.297% 46.411% 99.815%) 75%, rgb(57.721% 45.682% 99.854%) 81.25%, rgb(69.335% 44.894% 99.898%) 87.5%, rgb(82.221% 44.045% 99.947%) 93.75%, rgb(96.471% 43.137% 100%) 100% )',
      },
      control: {
        light: '#558FFF',
        dark: '#D76444',
      },
      'active-background': {
        light: 'background',
        dark: 'background',
      },
      'active-text': {
        light: 'text-strong',
        dark: 'text-strong',
      },
      'selected-background': 'brand',
      'selected-text': 'text-strong',
      'status-critical': '#dd3000',
      'status-warning': '#f0c954',
      'status-ok': '#008375',
      'status-unknown': '#C3C5C8',
      'status-disabled': '#C3C5C8',
      'graph-0': 'brand',
      'graph-1': 'blue',
      green: {
        dark: '#d5d848',
        light: '#d5d848',
      },
      'green!': '#d5d848',
      blue: {
        dark: '#9fd4c9',
        light: '#004876',
      },
      'blue!': '#9fd4c9',
      grey: {
        dark: '#646569',
        light: '#646569',
      },
      'grey!': '#646569',
      'graph-2': 'green',
      focus: {
        dark: 'rgba(246,110,255,1)',
        light: 'rgba(246,110,255,1)',
      },
    },
    font: {
      family: '"Inter"',
      face: "/* cyrillic-ext */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZJhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* cyrillic */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZthjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* greek-ext */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZNhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* greek */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZxhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* vietnamese */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZBhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* latin-ext */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZFhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hjp-Ek-_EeA.woff) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/* cyrillic-ext */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZJhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* cyrillic */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZthjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* greek-ext */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZNhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* greek */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZxhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* vietnamese */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZBhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* latin-ext */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZFhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hjp-Ek-_EeA.woff) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/* cyrillic-ext */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZJhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* cyrillic */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZthjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* greek-ext */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZNhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* greek */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZxhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* vietnamese */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZBhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* latin-ext */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZFhjp-Ek-_EeAmM.woff) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/inter/v7/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hjp-Ek-_EeA.woff) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/* vietnamese */\n@font-face {\n  font-family: 'Space Mono';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/spacemono/v6/i7dPIFZifjKcF5UAWdDRYE58RXi4EwSsbg.woff2) format('woff2');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* latin-ext */\n@font-face {\n  font-family: 'Space Mono';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/spacemono/v6/i7dPIFZifjKcF5UAWdDRYE98RXi4EwSsbg.woff2) format('woff2');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n  font-family: 'Space Mono';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/spacemono/v6/i7dPIFZifjKcF5UAWdDRYEF8RXi4EwQ.woff2) format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n",
      size: '18px',
      height: '24px',
      maxWidth: '432px',
    },
    active: {
      background: 'active-background',
      color: 'active-text',
    },
    hover: {
      background: 'active-background',
      color: 'active-text',
    },
    selected: {
      background: 'selected-background',
      color: 'selected-text',
    },
    borderSize: {
      none: '0px',
      xsmall: '1px',
      small: '2px',
      medium: '4px',
      large: '12px',
      xlarge: '24px',
    },
    breakpoints: {
      small: {
        value: 768,
        borderSize: {
          xsmall: '1px',
          small: '2px',
          medium: '4px',
          large: '6px',
          xlarge: '12px',
        },
        edgeSize: {
          none: '0px',
          hair: '1px',
          xxsmall: '2px',
          xsmall: '3px',
          small: '6px',
          medium: '12px',
          large: '24px',
          xlarge: '48px',
        },
        size: {
          xxsmall: '24px',
          xsmall: '48px',
          small: '96px',
          medium: '192px',
          large: '384px',
          xlarge: '768px',
          full: '100%',
        },
      },
      medium: {
        value: 1536,
      },
      large: {},
    },
    edgeSize: {
      none: '0px',
      hair: '1px',
      xxsmall: '3px',
      xsmall: '6px',
      small: '12px',
      medium: '24px',
      large: '48px',
      xlarge: '96px',
      responsiveBreakpoint: 'small',
    },
    input: {
      padding: '12px',
      weight: 600,
    },
    spacing: '24px',
    size: {
      xxsmall: '48px',
      xsmall: '96px',
      small: '192px',
      medium: '384px',
      large: '768px',
      xlarge: '1152px',
      xxlarge: '1536px',
      full: '100%',
    },
    control: {
      border: {
        radius: '8px',
      },
    },
    drop: {
      border: {
        radius: '8px',
      },
    },
  },
  chart: {},
  diagram: {
    line: {},
  },
  meter: {},
  layer: {
    background: {
      dark: '#111111',
      light: '#FFFFFF',
    },
  },
  heading: {
    level: {
      '1': {
        small: {
          size: '23px',
          height: '29px',
          maxWidth: '547px',
        },
        medium: {
          size: '28px',
          height: '34px',
          maxWidth: '662px',
        },
        large: {
          size: '37px',
          height: '43px',
          maxWidth: '893px',
        },
        xlarge: {
          size: '47px',
          height: '53px',
          maxWidth: '1123px',
        },
      },
      '2': {
        small: {
          size: '22px',
          height: '28px',
          maxWidth: '518px',
        },
        medium: {
          size: '25px',
          height: '31px',
          maxWidth: '605px',
        },
        large: {
          size: '29px',
          height: '35px',
          maxWidth: '691px',
        },
        xlarge: {
          size: '32px',
          height: '38px',
          maxWidth: '778px',
        },
      },
      '3': {
        small: {
          size: '20px',
          height: '26px',
          maxWidth: '490px',
        },
        medium: {
          size: '23px',
          height: '29px',
          maxWidth: '547px',
        },
        large: {
          size: '25px',
          height: '31px',
          maxWidth: '605px',
        },
        xlarge: {
          size: '28px',
          height: '34px',
          maxWidth: '662px',
        },
      },
      '4': {
        small: {
          size: '19px',
          height: '25px',
          maxWidth: '461px',
        },
        medium: {
          size: '20px',
          height: '26px',
          maxWidth: '490px',
        },
        large: {
          size: '22px',
          height: '28px',
          maxWidth: '518px',
        },
        xlarge: {
          size: '23px',
          height: '29px',
          maxWidth: '547px',
        },
      },
      '5': {
        small: {
          size: '17px',
          height: '23px',
          maxWidth: '418px',
        },
        medium: {
          size: '17px',
          height: '23px',
          maxWidth: '418px',
        },
        large: {
          size: '17px',
          height: '23px',
          maxWidth: '418px',
        },
        xlarge: {
          size: '17px',
          height: '23px',
          maxWidth: '418px',
        },
      },
      '6': {
        small: {
          size: '17px',
          height: '23px',
          maxWidth: '403px',
        },
        medium: {
          size: '17px',
          height: '23px',
          maxWidth: '403px',
        },
        large: {
          size: '17px',
          height: '23px',
          maxWidth: '403px',
        },
        xlarge: {
          size: '17px',
          height: '23px',
          maxWidth: '403px',
        },
      },
    },
  },
  scale: 0.3,
  button: {
    border: {
      radius: '8px',
    },
    color: {
      dark: '#fff',
    },
    // default: {
    //   background: {
    //     color: 'blue',
    //   },
    // },
    // primary: {
    //   background: {
    //     color: 'gradient',
    //   },
    // },
    size: {
      large: {
        // primary: {
        //   background: {
        //     color: 'gradient',
        //   },
        // },
        border: {
          width: '0px',
          radius: '8px',
        },
      },
      medium: {
        border: {
          width: '0px',
          radius: '8px',
        },
      },
      small: {
        font: {
          size: '9px',
        },
        border: {
          width: '0px',
          radius: '8px',
        },
        pad: {
          horizontal: '10px',
          vertical: '2px',
        },
      },
    },
  },
  calendar: {
    small: {
      fontSize: '16.8px',
      lineHeight: 1.375,
      daySize: '27.43px',
    },
    medium: {
      fontSize: '18px',
      lineHeight: 1.45,
      daySize: '54.86px',
    },
    large: {
      fontSize: '21.6px',
      lineHeight: 1.11,
      daySize: '109.71px',
    },
  },
  checkBox: {
    size: '24px',
    toggle: {
      radius: '8px',
      size: '48px',
    },
    check: {
      radius: '8px',
    },
  },
  clock: {
    analog: {
      hour: {
        width: '8px',
        size: '24px',
      },
      minute: {
        width: '4px',
        size: '12px',
      },
      second: {
        width: '3px',
        size: '9px',
      },
      size: {
        small: '72px',
        medium: '96px',
        large: '144px',
        xlarge: '216px',
        huge: '288px',
      },
    },
    digital: {
      text: {
        xsmall: {
          size: '15.6px',
          height: 1.5,
        },
        small: {
          size: '16.8px',
          height: 1.43,
        },
        medium: {
          size: '18px',
          height: 1.375,
        },
        large: {
          size: '19.2px',
          height: 1.167,
        },
        xlarge: {
          size: '20.4px',
          height: 1.1875,
        },
        xxlarge: {
          size: '22.8px',
          height: 1.125,
        },
      },
    },
  },
  paragraph: {
    small: {
      size: '17px',
      height: '23px',
      maxWidth: '418px',
    },
    medium: {
      size: '18px',
      height: '24px',
      maxWidth: '432px',
    },
    large: {
      size: '19px',
      height: '25px',
      maxWidth: '461px',
    },
    xlarge: {
      size: '20px',
      height: '26px',
      maxWidth: '490px',
    },
    xxlarge: {
      size: '23px',
      height: '29px',
      maxWidth: '547px',
    },
  },
  radioButton: {
    size: '24px',
    check: {
      radius: '8px',
    },
  },
  text: {
    xsmall: {
      size: '14px',
      height: '19px',
      maxWidth: '400px',
    },
    small: {
      size: '16px',
      height: '21px',
      maxWidth: '408px',
    },
    medium: {
      size: '18px',
      height: '24px',
      maxWidth: '432px',
    },
    large: {
      size: '19px',
      height: '25px',
      maxWidth: '461px',
      // weight: '100',
    },
    xlarge: {
      size: '20px',
      height: '26px',
      maxWidth: '490px',
    },
    xxlarge: {
      size: '23px',
      height: '29px',
      maxWidth: '547px',
    },
  },
  anchor: {
    color: 'text',
    hover: { textDecoration: 'none', fontWeight: 'bold' },
  },
  formField: {
    border: {
      color: 'border',
      error: {
        color: {
          dark: 'white',
          light: 'status-critical',
        },
      },
      position: 'inner',
      side: 'bottom',
    },
    content: {
      pad: 'small',
    },
    disabled: {
      background: {
        color: 'status-disabled',
        opacity: 'medium',
      },
    },
    error: {
      color: 'status-critical',
      margin: {
        vertical: 'xsmall',
        horizontal: 'small',
      },
    },
    help: {
      color: 'dark-3',
      margin: {
        start: 'small',
      },
    },
    info: {
      color: 'text-xweak',
      margin: {
        vertical: 'xsmall',
        horizontal: 'small',
      },
    },
    label: {
      margin: {
        vertical: 'xsmall',
        horizontal: 'small',
      },
    },
    margin: {
      bottom: 'small',
    },
    round: '8px',
  },
  tab: {
    color: 'text-weak',
    border: {
      side: 'bottom',
      size: 'xsmall',
      color: {
        dark: 'none',
        light: 'brand',
      },
      active: {
        color: {
          dark: 'text-weak',
          light: 'text-weak',
        },
      },
      hover: {
        color: {
          dark: 'white',
          light: 'black',
        },
        // extend: undefined,
      },
    },
  },
  round: '0px',

  // textInput: {
  //   placeholder: {
  //     color: 'text-weak',
  //   },
  //   // color: 'text-weak',
  //   // extend: () =>
  //   //   css`
  //   //     background-color: #555;
  //   //   `,
  //   // placeholder: {
  //   //   extend: () => `color: #44444`,
  //   // },
  // },

  /*
  ./. Globals
   */
  // border: {
  //   width: '0px',
  //   radius: '8px',
  // },
  // padding: {
  //   vertical: '4px',
  //   horizontal: '22px',
  // },
  // default: {},
  // primary: {
  //   background: 'brand',
  //   // background: 'gradient',
  //   color: 'text',
  // },
  // hover: {
  //   default: {},
  //   primary: {
  //     background: '#fff',
  //     color: 'text-weak',
  //   },
  // },
  // extend: ({ theme }) =>
  //   css`
  //     transition: all 0.2s;
  //     :hover {
  //       transition: all 0.2s;
  //       // background: ${normalizeColor('gradient', theme)};
  //     }
  //     //background-color: blue;
  //   `,
  // },
})

'''
'''--- src/hooks/redux.ts ---
import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
import type { RootState, AppDispatch } from '../redux/store'

// Use throughout your app instead of plain `useDispatch` and `useSelector`
export const useAppDispatch = () => useDispatch<AppDispatch>()
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector

'''
'''--- src/hooks/useGetBalance.ts ---
import { useState, useEffect, useContext, FunctionComponent } from 'react'
import { utils } from 'near-api-js'

import { NearContext } from 'src/near/nearContext'

// Todo: replace by redux-toolkit query
export const useGetBalance: () => {
  isLoading: boolean
  nearBalance: string
  refetch: () => Promise<void>
  tokenBalance: string
} = () => {
  const { contract, currentUser, walletConnection } = useContext(NearContext)
  const [tokenBalance, setTokenBalance] = useState<string>('')
  const [nearBalance, setNearBalance] = useState<string>('')
  const [isLoading, setIsLoading] = useState<boolean>(true)

  const fetchBalance = async () => {
    try {
      setIsLoading(true)
      // Get GLU3 balance
      const gluRes = await walletConnection
        ?.account()
        .viewFunction(contract?.contractId || '', 'ft_balance_of', {
          account_id: currentUser?.accountId,
        })
      const newTokenBalance = utils.format.formatNearAmount(gluRes || '0')
      setTokenBalance(Number(newTokenBalance || 0).toFixed(3))
      // Get Near balance
      const newNearBalance = utils.format.formatNearAmount(
        currentUser?.balance || '0'
      )
      setNearBalance(Number(newNearBalance || 0).toFixed(3))
    } catch (e) {
      // Todo: add a toaster warning of errors
      console.error(e)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchBalance()
  }, [contract])

  return {
    tokenBalance,
    nearBalance,
    isLoading,
    refetch: fetchBalance,
  }
}

'''
'''--- src/hooks/useGetStats.ts ---
import { useState, useEffect, useContext } from 'react'
import { utils } from 'near-api-js'

import { NearContext } from 'src/near/nearContext'

import { TokenStatsType } from 'src/near/types'

// Todo: replace by redux-toolkit query
export const useGetStats: () => {
  stats: TokenStatsType | null
  isLoading: boolean
  refetch: () => void
} = () => {
  const { contract, currentUser } = useContext(NearContext)
  const [stats, setStats] = useState<TokenStatsType | null>(null)
  const [isLoading, setIsLoading] = useState<boolean>(true)

  const getStats = async () => {
    if (currentUser?.accountId) {
      return contract?.getTokenStats({
        account: currentUser?.accountId,
      })
    }
  }

  const fetchStats = async () => {
    try {
      setIsLoading(true)
      const newStats = await getStats()

      setStats({
        token_amount: utils.format.formatNearAmount(
          newStats?.token_amount || '0'
        ),
        tokens_distributed: utils.format.formatNearAmount(
          newStats?.tokens_distributed || '0'
        ),
        tokens_on_fund: utils.format.formatNearAmount(
          newStats?.tokens_on_fund || '0'
        ),
      })
    } catch (e) {
      // Todo: add a toaster warning of errors
      console.error(e)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchStats()
  }, [contract])

  return {
    stats,
    isLoading,
    refetch: fetchStats,
  }
}

'''
'''--- src/near/config.ts ---
export const CONTRACT_NAME = process.env.CONTRACT_NAME || 'glu3.testnet'

export enum NETWORK_TYPE {
  PRODUCTION = 'production',
  DEV = 'development',
  // TEST = 'test',
  TESTNET = 'testnet',
}
export const getConfig = (env: string) => {
  switch (env) {
    case NETWORK_TYPE.PRODUCTION:
    // return {
    //   networkId: 'mainnet',
    //   nodeUrl: 'https://rpc.mainnet.near.org',
    //   contractName: CONTRACT_NAME,
    //   walletUrl: 'https://wallet.near.org',
    //   helperUrl: 'https://helper.mainnet.near.org',
    //   explorerUrl: 'https://explorer.mainnet.near.org',
    // }
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    // case NETWORK_TYPE.PRODUCTION:
    case NETWORK_TYPE.DEV:
    case NETWORK_TYPE.TESTNET:
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      }
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      )
  }
}

'''
'''--- src/near/initContract.ts ---
import * as nearAPI from 'near-api-js'
import { getConfig } from './config'
import { ContractType } from 'src/near/types'

export interface NearContextType {
  contract: ContractType | null
  walletConnection: nearAPI.WalletConnection | null
  currentUser?: {
    accountId: string
    balance: string
    isSignedIn: boolean
  } | null
  nearConfig: {
    networkId: string
    nodeUrl: string
    contractName: string
    walletUrl: string
    helperUrl: string
  } | null
}

// Initializing contract
export const initContract = async (
  isBackend = false,
  childContractName?: string
): Promise<NearContextType> => {
  const nearConfig = getConfig(process.env.NODE_ENV || 'testnet')
  let near = null
  let walletConnection = null

  // Initializing connection to the NEAR TestNet

  if (isBackend && childContractName) {
    const secretKey = process.env.PRIVATE_KEY || ''
    const keyPair = nearAPI.KeyPair.fromString(secretKey)
    const signer = await nearAPI.InMemorySigner.fromKeyPair(
      nearConfig.networkId,
      process.env.CONTRACT_NAME || '',
      keyPair
    )

    // Initializing connection to the NEAR TestNet
    near = await nearAPI.connect({
      ...nearConfig,
      headers: {},
      signer,
    })
  } else {
    near = await nearAPI.connect({
      ...nearConfig,
      headers: {},
      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore(),
    })

    // Needed to access wallet
    walletConnection = await new nearAPI.WalletConnection(near, 'GLU3')
  }

  // Load in account data
  let currentUser
  if (walletConnection?.getAccountId()) {
    currentUser = {
      accountId: walletConnection?.getAccountId(),
      balance: (await walletConnection?.account().state()).amount,
      isSignedIn: walletConnection?.isSignedIn(),
    }
  }

  const account = walletConnection
    ? walletConnection.account()
    : await near.account(process.env.CONTRACT_NAME || '')
  // Initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(
    account,
    //@ts-ignore
    isBackend ? childContractName : nearConfig.contractName,
    {
      // View methods are read-only – they don't modify the state, but usually return some value
      viewMethods: ['getTokenStats'],
      // Change methods can modify the state, but you don't receive the returned value when called
      changeMethods: [
        'deploy',
        'createToken',
        'burnToken',
        'mintToken',
        'ft_transfer',
        'sendToFund',
        'sendFromFund',
        'changeOwner',
      ],
    }
  )
  // @ts-ignore - Todo: verify whats the problem with Contract ts type
  return { contract, currentUser, nearConfig, walletConnection }
}

'''
'''--- src/near/types.ts ---
import * as nearAPI from 'near-api-js'

export interface TokenStatsType {
  token_amount: string
  tokens_distributed: string
  tokens_on_fund: string
}

export interface CreateTokenPropsType {
  tokenName: string
  symbol: string
  supply: string
  decimals: number
  canMint: boolean
  canBurn: boolean
}

export interface ContractType extends nearAPI.Contract {
  /*
   * Change Methods
   */
  deploy: ({}, gas: string | null, deposit?: string | null) => void
  createToken: (
    {
      tokenName,
      symbol,
      supply,
      decimals,
      canMint,
      canBurn,
    }: CreateTokenPropsType,
    gas?: string,
    deposit?: string
  ) => void
  ft_transfer: (
    { receiver_id, amount }: { amount: string | null; receiver_id: string },
    gas?: string,
    deposit?: string
  ) => void
  sendToFund: (
    { id, amount }: { id: string; amount: string },
    gas?: string,
    deposit?: string
  ) => void
  sendFromFund: (
    {
      id,
      amount,
      walletAddress,
    }: { id: string; amount: string; walletAddress: string },
    gas?: string,
    deposit?: string
  ) => void

  /*
   * View Methods
   */
  // Get Token Stats
  getTokenStats: (
    { account }: { account: string },
    gas?: string,
    deposit?: string
  ) => Promise<TokenStatsType>
}

'''
'''--- src/pages/api/apiKey.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { PrismaClient } from '@prisma/client'
import { generateApiKey } from 'generate-api-key'

const prisma = new PrismaClient()

// Todo: hash the API keys before storing into the database
export default async (req: NextApiRequest, res: NextApiResponse) => {
  const { body } = req
  if (req.method === 'GET') {
    const { wallet } = req.query
    if (wallet) {
      const apiKey = await prisma.apiKeyTestnet.findUnique({
        where: {
          wallet: String(wallet),
        },
      })
      res.json(apiKey)
    }
  } else if (req.method === 'POST') {
    const newApiKey = await generateApiKey({
      method: 'base32',
      prefix: 'glu3_testnet',
    })
    // create apiKey
    const apiKey = await prisma.apiKeyTestnet.create({
      data: {
        wallet: body.wallet,
        // @ts-ignore In this case it is returning a string and not a string[]
        apiKey: newApiKey,
      },
    })

    res.json(apiKey)
  } else if (req.method === 'PUT') {
    // PUT method generates a new random api key
    const wallet = body.wallet
    const data = JSON.parse(req.body)
    const apiKey = await prisma.apiKeyTestnet.update({
      where: { wallet },
      data: {
        ...data,
        apiKey: generateApiKey({ method: 'base32', prefix: 'glu3_testnet' }),
      },
    })

    res.json(apiKey)
  } else if (req.method === 'DELETE') {
    const wallet = req.query.wallet as string
    await prisma.apiKeyTestnet.delete({ where: { wallet } })

    res.json({ status: 'ok' })
  }
}

'''
'''--- src/pages/api/sendFromFund.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { PrismaClient } from '@prisma/client'
import { utils } from 'near-api-js'

import { initContract } from 'src/near/initContract'

const prisma = new PrismaClient()

// Allows users who have a wallet to claim tokens from funds
export default async (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method === 'POST') {
    const { amount, id, walletAddress, apiKey } = req.body
    if (apiKey) {
      const response = await prisma.apiKeyTestnet.findUnique({
        where: {
          apiKey: String(apiKey),
        },
      })
      const walletToSend = response?.wallet || ''
      const contractName = `${walletToSend.replace('.testnet', '')}.${
        process.env.CONTRACT_NAME
      }`
      const { contract } = await initContract(true, contractName)
      // @ts-ignore
      await contract?.sendFromFund({
        amount: utils.format.parseNearAmount(amount) || '0',
        id,
        walletAddress,
      })
      res.status(200).json({ message: 'Tokens transferred to a real wallet.' })
    }
  } else {
    res.status(404).json({ error: 'Method does not exist' })
  }
}

'''
'''--- src/pages/api/sendToFund.ts ---
import type { NextApiRequest, NextApiResponse } from 'next'
import { PrismaClient } from '@prisma/client'
import { initContract } from 'src/near/initContract'

const prisma = new PrismaClient()

// Allows tokens to be saved in temporary funds
export default async (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method === 'GET') {
    const { apiKey, amount, id } = req.query
    if (apiKey) {
      const response = await prisma.apiKeyTestnet.findUnique({
        where: {
          apiKey: String(apiKey),
        },
      })
      const walletToSend = response?.wallet || ''
      const contractName = `${walletToSend.replace('.testnet', '')}.${
        process.env.CONTRACT_NAME
      }`
      const { contract } = await initContract(true, contractName)
      // @ts-ignore
      await contract?.sendToFund({ amount, id })
      res.status(200).json({ message: 'Tokens sent to the temporary fund.' })
    }
  } else {
    res.status(404).json({ error: 'Method does not exist' })
  }
}

'''
'''--- src/redux/api/nearQuote.ts ---
// Need to use the React-specific entry point to allow generating React hooks
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'

export interface NearQuoteType {
  near: { usd: number; eur: number; cny: number; last_updated_at: number }
}
// Define a service using a base URL and expected endpoints
export const nearQuoteApi = createApi({
  reducerPath: 'nearQuote',
  baseQuery: fetchBaseQuery({
    baseUrl: 'https://api.coingecko.com/api/v3/simple/',
  }),
  endpoints: (builder) => ({
    // returns USD quote for Near
    getNearQuote: builder.query<number, void>({
      query: () => ({
        url: 'price',
        params: {
          include_last_updated_at: true,
          vs_currencies: 'usd,eur,cny',
          ids: 'Near',
        },
      }),
      // Pick out data and prevent nested properties in a hook or selector
      transformResponse: (response: NearQuoteType) => response?.near?.usd,
    }),
  }),
})

// Export hooks for usage in function components, which are
// auto-generated based on the defined endpoints
export const { useGetNearQuoteQuery } = nearQuoteApi

'''
'''--- src/redux/store.ts ---
import { configureStore } from '@reduxjs/toolkit'
import { setupListeners } from '@reduxjs/toolkit/query'
import { nearQuoteApi } from './api/nearQuote'

import walletReducer from './walletSlice'

export const store = configureStore({
  devTools: process.env.NODE_ENV !== 'production',
  reducer: {
    wallet: walletReducer,
    // Add the generated reducer as a specific top-level slice
    [nearQuoteApi.reducerPath]: nearQuoteApi.reducer,
  },
  // Adding the api middleware enables caching, invalidation, polling,
  // and other useful features of `rtk-query`.
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(nearQuoteApi.middleware),
})

// optional, but required for refetchOnFocus/refetchOnReconnect behaviors
// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization
setupListeners(store.dispatch)

// Infer the `RootState` and `AppDispatch` types from the store itself
export type RootState = ReturnType<typeof store.getState>
// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}
export type AppDispatch = typeof store.dispatch

'''
'''--- src/redux/walletSlice.ts ---
import { createSlice, PayloadAction } from '@reduxjs/toolkit'

import type { RootState } from './store'

// Define a type for the slice state
interface WalletStateType {
  wallet: Record<string, unknown> | null
}

// Define the initial state using that type
const initialState: WalletStateType = {
  wallet: null,
}

export const walletSlice = createSlice({
  name: 'wallet',
  // `createSlice` will infer the state type from the `initialState` argument
  initialState,
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    updateWallet: (state, action: PayloadAction<Record<string, unknown>>) => {
      state.wallet = action.payload
    },
  },
})

export const { updateWallet } = walletSlice.actions

// Other code such as selectors can use the imported `RootState` type
export const selectWallet = (state: RootState) => state?.wallet

export default walletSlice.reducer

'''
'''--- src/routes.ts ---
export const routes = {
  CREATE: '/create',
  DISTRIBUTE: '/distribute',
}

'''
'''--- src/styles/Home.module.css ---
.container {
  padding: 0 2rem;
}

.main {
  min-height: 100vh;
  padding: 4rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.footer {
  display: flex;
  flex: 1;
  padding: 2rem 0;
  border-top: 1px solid #eaeaea;
  justify-content: center;
  align-items: center;
}

.footer a {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 4rem;
}

.title,
.description {
  text-align: center;
}

.description {
  margin: 4rem 0;
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
    Bitstream Vera Sans Mono, Courier New, monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 800px;
}

.card {
  margin: 1rem;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  max-width: 300px;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h2 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  height: 1em;
  margin-left: 0.5rem;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}

'''
'''--- src/styles/globals.css ---
html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}

/* Chrome, Safari, Edge, Opera */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

/* Firefox */
input[type=number] {
  -moz-appearance: textfield;
}

'''
'''--- src/utils/numbers.ts ---
// Always return a number (avoid NaN)
export const toNumber = (value: unknown): number => {
  if (value && typeof value === 'number') {
    return value
  }
  if (value && typeof value === 'string') {
    return Number(value) || 0
  }
  return 0
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": "."
  },
  "include": ["next-env.d.ts", "src/**/*.ts", "src/**/*.tsx"],
  "exclude": ["node_modules"]
}

'''