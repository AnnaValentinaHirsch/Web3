*GitHub Repository "marco-sundsk/gameland"*

'''--- README.md ---
# gameland
'''
'''--- contracts/README.md ---
# GAMELAND Contracts
In GAMELAND, we have several types of contracts:
* Platform contract, say gameland.testnet;
* Gamecoin contract, say playtoken.testnet;
* Game contracts, say neardice.test is one of them;
* Governance token contract, say gltoken.testnet;

### pre-requisite
---
Each contract has been successfully deployed and init correctly. The init processes are like:
```shell
# init gamecoin
near call playtoken.testnet new '{"owner_id": "playtoken_owner.testnet", "sudoer_id": "gameland.testnet"}' --account_id=playtoken.testnet
# init platform
near call gameland.testnet new '{"owner_id": "gameland_owner.testnet"}' --account_id=gameland.testnet
# init game shop
near call neardice.testnet new '{"owner_id": "neardice_owner.testnet", "dice_number": 1, "rolling_fee": "1000000000000000000000000"}' --account_id=neardice.testnet
```

### buy & sell gamecoin
---
Platform is the only place that you can buy and/or sell gamecoins. Behind these buy and sell actions, it is actually the platform that mints and burns gamecoins for you.
```shell
near call gameland.testnet buy_playtoken '' --account_id=player01.testnet --amount=1

near call gameland.testnet sell_playtoken '{"amount": "6000000000000000000000000"}' --account_id=player01.testnet
```

You can check balance of anyone:
```shell
near view playtoken.testnet ft_balance_of '{"account_id": "player01.testnet"}'
```

as well as the total supply:
```shell
near view playtoken.testnet ft_total_supply ''
```

### register games
---
The whole register process has some off-line parts, which can be upgraded to online-governance using governance token in the near future.  

Frist, The game owner fills out register form 
* shop_id (each game acts as a game shop from platform view)
* owner_id
* flag, 1 for reg, 2 for unreg
* refs, url to an online application form that have detailed info, such as game description, code repo, contactors, and etc.

and submit like this:
```shell
near call gameland.testnet register_shop '{"reg_form": {"flag": 1, "shop_id": "neardice.testnet", "owner_id": "neardice_owner.testnet", "refs": "https://github.com/marco-sundsk/gameland/", "height": "0", "ts": "0", "status": 0}}' --account_id=neardice_onwer.testnet
```

Then, the platform governance committee will collect all registers time to time:
```shell
near view gameland.testnet list_registers '{"from_index": 0, "limit": 100}'
```

After carefully evaluation, the committee would make a pass to some register:
```shell
near call gameland.testnet resovle_register '{"shop_id": "neardice.testnet", "pass": true, "new_status": 2}' --account_id=gameland_owner.testnet --gas=20000000000000
```

The last thing before a game shop can run publicly, may be to prepare initial reward pool of the game. That can be down through a sponsor action to a shop:
```shell
near call gameland.testnet sponsor '{"shop_id": "neardice.testnet", "amount": "2000000000000000000000000"}' --account_id=player01.testnet --gas=40000000000000
```
*note: The sponsor action may be required during register proccess*

### play game
---
User can learn information of a game in these ways:
```shell
near view neardice.testnet gl_metadata ''
near view neardice.testnet gl_pub_state ''
near view neardice.testnet gl_user_state '{"user_id": "player01.testnet"}'
```

And then play like this:
```shell
near call gameland.testnet play '{"shop_id": "neardice.testnet", "amount": "1000000000000000000000000", "op": "1"}' --account_id=player01.testnet --gas=60000000000000
```

'''
'''--- contracts/gameland/Cargo.toml ---
[package]
name = "gl"
version = "0.1.0"
authors = ["Buildlinks Inc <hi@buildlinks.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "2.0.0"
uint = { version = "0.8.3", default-features = false }

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contracts/gameland/README.md ---
NCD-GroupA-Demo Smart Contract
==================

A demo contract for NCD Pojrect Phase-1.

Play with this contract
========================
the contract is deployed at testnet with the name `dev-1614240595058-5266655`

you can set it to env for later use:
```shell
export CONTRACTID=dev-1614240595058-5266655
```

## Look around
```shell
# return playground info
near view $CONTRACTID get_contract_info ''
# return winner tip rate
near view $CONTRACTID get_reward_fee_fraction ''
# return win history list
near view $CONTRACTID get_win_history '{"from_index": 0, "limit": 100}'
# return dice count that alice has
near view $CONTRACTID get_account_dice_count '{"account_id": "alice.testnet"}'
```
## Let's play
```shell
# attached 3 Near to buy 3 dices
near call $CONTRACTID buy_dice '' --amount=3 --account_id=alice.testnet
#check user's dice, would return 3 here
near view $CONTRACTID get_account_dice_count '{"account_id": "alice.testnet"}'
# roll dice 3 times, say how luck you are
near call $CONTRACTID roll_dice '{"target": 1}' --account_id=alice.testnet
near call $CONTRACTID roll_dice '{"target": 3}' --account_id=alice.testnet
near call $CONTRACTID roll_dice '{"target": 4}' --account_id=alice.testnet
```

Build Deploy and Init
======================

Before you compile this code, you will need to install Rust with [correct target]

```shell
# building it
srouce ./build.sh
```

```shell
# dev-deploy or deploy it
near dev-deploy res/neardice.wasm

# say it was deploy at $CONTRACTID, then init it 
near call $CONTRACTID new \
  '{"owner_id": "boss.testnet", "dice_number": 1, 
  "rolling_fee": "1000000000000000000000000", 
  "reward_fee_fraction": {"numerator": 5, "denominator": 100}}' \
  --account_id=$CONTRACTID
```

```shell
# last step to open the playgroud is 
# to deposit to the jackpod the very first time
near call $CONTRACTID deposit_jackpod '' --amount=50 --account_id=boss.testnet
```

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/roles/developer/contracts/intro
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contracts/gameland/build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/gl.wasm ./res/

'''
'''--- contracts/gameland/src/gameland.rs ---
use crate::*;
use near_sdk::{ext_contract, Gas, PromiseOrValue};

const TOKEN_CONTRACT: &str = "playtoken.testnet";
const GAS_FOR_BASIC: Gas = 10_000_000_000_000;
const NO_DEPOSIT: Balance = 0;

#[ext_contract(ext_game)]
trait Game {
    fn gl_sponsor(&mut self, amount: U128) -> Promise;
    fn gl_play(&mut self, amount: U128, op: String) -> PromiseOrValue<String>;
    fn gl_settle(&mut self, op: String) -> String;
}

#[ext_contract(ext_play_token)]
trait Token {
    fn mint_playtoken(&mut self);
    fn burn_playtoken(&mut self, amount: U128) -> Promise;
}

#[near_bindgen]
impl Contract {

    pub fn sponsor(&mut self, shop_id: AccountId, amount: U128) -> Promise {
        let shop_form = self.internal_get_shop(&shop_id);
        ext_game::gl_sponsor(
            amount,
            &shop_form.shop_id,
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_BASIC,
        )
    }

    pub fn play(&mut self, shop_id: AccountId, amount: U128, op: String) -> Promise {
        let shop_form = self.internal_get_shop(&shop_id);
        ext_game::gl_play(
            amount,
            op,
            &shop_form.shop_id,
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_BASIC,
        )
    }

    pub fn settle(&mut self, shop_id: AccountId, op: String) -> Promise {
        let shop_form = self.internal_get_shop(&shop_id);
        ext_game::gl_settle(
            op,
            &shop_form.shop_id,
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_BASIC,
        )
    }

    #[payable]
    pub fn buy_playtoken(&mut self) -> Promise {
        let amount = env::attached_deposit();
        ext_play_token::mint_playtoken(
            &String::from(TOKEN_CONTRACT),
            amount,
            env::prepaid_gas() - GAS_FOR_BASIC,
        )
    }

    pub fn sell_playtoken(&mut self, amount: U128) -> Promise {
        ext_play_token::burn_playtoken(
            amount,
            &String::from(TOKEN_CONTRACT),
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_BASIC,
        )
    }

}
'''
'''--- contracts/gameland/src/gov.rs ---
use crate::*;
use near_sdk::{ext_contract, Gas};

const TOKEN_CONTRACT: &str = "playtoken.testnet";
const GAS_FOR_BASIC: Gas = 20_000_000_000_000;
const NO_DEPOSIT: Balance = 0;

#[ext_contract(ext_play_token)]
trait Token {
    fn register_shop(&mut self, shop_id: AccountId, shop_owner_id: AccountId);
    fn unregister_shop(&mut self, shop_id: AccountId);
}

#[near_bindgen]
impl Contract {
    pub fn register_shop(&mut self, reg_form: HumanReadableRegForm) {
        let form = RegForm {
            flag: reg_form.flag,
            shop_id: reg_form.shop_id,
            owner_id: reg_form.owner_id,
            refs: reg_form.refs,
            height: env::block_index(),
            ts: env::block_timestamp(),
            status: reg_form.status,
        };
        self.registers.insert(&form.shop_id, &form);
    }

    pub fn resovle_register(&mut self, shop_id: AccountId, pass: bool, new_status: u8) {
        let mut form = self.internal_get_register(&shop_id);
        form.status = new_status;
        self.registers.insert(&form.shop_id, &form);
        if pass && form.flag == 1 {
            // reg passed
            self.registers.remove(&shop_id);
            self.shops.insert(&shop_id, &form);
            ext_play_token::register_shop(
                form.shop_id.clone(),
                form.owner_id,
                &String::from(TOKEN_CONTRACT),
                NO_DEPOSIT,
                env::prepaid_gas() - GAS_FOR_BASIC,
            );
        } 
        if pass && form.flag == 2 {
            self.shops.remove(&shop_id);
            ext_play_token::unregister_shop(
                form.shop_id,
                &String::from(TOKEN_CONTRACT),
                NO_DEPOSIT,
                env::prepaid_gas() - GAS_FOR_BASIC,
            );
        }
    }

    pub fn lock_shop(&mut self, shop_id: AccountId, op: u8) {
        // todo:

    }
}
'''
'''--- contracts/gameland/src/internal.rs ---
use crate::*;

pub(crate) fn assert_one_yocto() {
    assert_eq!(
        env::attached_deposit(),
        1,
        "Requires attached deposit of exactly 1 yoctoNEAR"
    )
}

pub(crate) fn assert_self() {
    assert_eq!(
        env::predecessor_account_id(),
        env::current_account_id(),
        "Method is private"
    );
}

impl Contract {
    pub(crate) fn assert_owner(&self) {
        assert_eq!(
            env::predecessor_account_id(),
            self.owner_id,
            "Can only be called by the owner"
        );
    }

    pub(crate) fn internal_get_shop(&self, shop_id: &AccountId) -> RegForm {
        self.shops.get(shop_id).expect("This shop does NOT exist in running list.")
    }

    pub(crate) fn internal_get_register(&self, shop_id: &AccountId) -> RegForm {
        self.registers.get(shop_id).expect("This shop does NOT exist in reg/unreg list.")
    }

}

'''
'''--- contracts/gameland/src/lib.rs ---
/*
 * This is GameLand contract:
 * 
 * 
 */

// To conserve gas, efficient serialization is achieved through Borsh (http://borsh.io/)
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::wee_alloc;
use near_sdk::json_types::{U64, U128, ValidAccountId};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, near_bindgen, AccountId, Balance, BlockHeight, Promise};
use near_sdk::collections::{UnorderedMap, LookupMap};
use uint::construct_uint;

pub use crate::gameland::*;
pub use crate::gov::*;
use crate::internal::*;

mod gameland;
mod gov;
mod internal;

construct_uint! {
    /// 256-bit unsigned integer.
    pub struct U256(4);
}

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Metadata {
    version: String,
    name: String,
    logo_url: String,
    thumb_url: String,
    description: String,
}

#[derive(BorshDeserialize, BorshSerialize, Clone)]
pub struct RegForm {
    pub shop_id: AccountId,
    pub owner_id: AccountId,
    pub flag: u8,  // 1 - reg; 2 - unreg
    pub refs: String, // url to the application form off-line
    pub height: BlockHeight,  // apply height
    pub ts: u64,  // apply time
    pub status: u8, // 0 - applying; 1 - evaluating; 2 - OK; 9 - Rejected;
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableRegForm {
    pub shop_id: AccountId,
    pub owner_id: AccountId,
    pub flag: u8, 
    pub refs: String,
    pub height: U64,
    pub ts: U64, 
    pub status: u8,
}

// Structs in Rust are similar to other languages, and may include impl keyword as shown below
// Note: the names of the structs are not important when calling the smart contract, but the function names are
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    pub owner_id: AccountId,
    pub shops: UnorderedMap<AccountId, RegForm>,
    pub registers: UnorderedMap<AccountId, RegForm>,
}

impl Default for Contract {
    fn default() -> Self {
        env::panic(b"GameLand contract should be initialized before usage")
    }
}

#[near_bindgen]
impl Contract {

    #[init]
    pub fn new(
        owner_id: AccountId,
    ) -> Self {
        assert!(!env::state_exists(), "Already initialized");
        assert!(
            env::is_valid_account_id(owner_id.as_bytes()),
            "The owner account ID is invalid"
        );
        
        Self {
            owner_id,
            shops: UnorderedMap::new(b"s".to_vec()),
            registers: UnorderedMap::new(b"r".to_vec()),
        }
    }

    //***********************/
    // view functions
    //***********************/
    pub fn metadata() -> Metadata {
        Metadata {
            version: String::from("0.1.1"),
            name: String::from("Game Zone"),
            logo_url: String::from("gameland.testnet.logo.png"),
            thumb_url: String::from("gameland.testnet.thumb.png"),
            description: String::from("A platform for mini-games"),
        }
    }

    pub fn get_shop(&self, shop_id: AccountId) -> HumanReadableRegForm {
        let form = self.shops.get(&shop_id).expect("Error: no this shop!");
        HumanReadableRegForm {
            shop_id: form.shop_id,
            owner_id: form.owner_id,
            flag: form.flag,
            refs: form.refs,
            height: form.height.into(),
            ts: form.ts.into(),
            status: form.status,
        }
    }

    pub fn list_shops(&self, from_index: u64, limit: u64) -> Vec<HumanReadableRegForm> {
        let keys = self.shops.keys_as_vector();
        (from_index..std::cmp::min(from_index + limit, keys.len()))
            .map(|index| self.get_shop(keys.get(index).unwrap()))
            .collect()
    }

    pub fn get_register(&self, shop_id: AccountId) -> HumanReadableRegForm {
        let form = self.registers.get(&shop_id).expect("Error: no this shop!");
        HumanReadableRegForm {
            shop_id: form.shop_id,
            owner_id: form.owner_id,
            flag: form.flag,
            refs: form.refs,
            height: form.height.into(),
            ts: form.ts.into(),
            status: form.status,
        }
    }

    pub fn list_registers(&self, from_index: u64, limit: u64) -> Vec<HumanReadableRegForm> {
        let keys = self.registers.keys_as_vector();
        (from_index..std::cmp::min(from_index + limit, keys.len()))
            .map(|index| self.get_register(keys.get(index).unwrap()))
            .collect()
    }

}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 *
 * To run from contract directory:
 * cargo test -- --nocapture
 *
 * From project root, to run in combination with frontend tests:
 * yarn test
 *
 */
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    // mock the context for testing, notice "signer_account_id" that was accessed above from env::
    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice_near".to_string(),
            signer_account_id: "bob_near".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "carol_near".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    #[test]
    fn set_then_get_greeting() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Contract::default();
    }

    #[test]
    fn get_default_greeting() {
        let context = get_context(vec![], true);
        testing_env!(context);
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default "Hello" greeting
    }
}

'''
'''--- contracts/games/dice/Cargo.toml ---
[package]
name = "gl_dice"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "2.0.0"
uint = { version = "0.8.3", default-features = false }

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contracts/games/dice/README.md ---
NCD-GroupA-Demo Smart Contract
==================

A demo contract for NCD Pojrect Phase-1.

Play with this contract
========================
the contract is deployed at testnet with the name `dev-1614240595058-5266655`

you can set it to env for later use:
```shell
export CONTRACTID=dev-1614240595058-5266655
```

## Look around
```shell
# return playground info
near view $CONTRACTID get_contract_info ''
# return winner tip rate
near view $CONTRACTID get_reward_fee_fraction ''
# return win history list
near view $CONTRACTID get_win_history '{"from_index": 0, "limit": 100}'
# return dice count that alice has
near view $CONTRACTID get_account_dice_count '{"account_id": "alice.testnet"}'
```
## Let's play
```shell
# attached 3 Near to buy 3 dices
near call $CONTRACTID buy_dice '' --amount=3 --account_id=alice.testnet
#check user's dice, would return 3 here
near view $CONTRACTID get_account_dice_count '{"account_id": "alice.testnet"}'
# roll dice 3 times, say how luck you are
near call $CONTRACTID roll_dice '{"target": 1}' --account_id=alice.testnet
near call $CONTRACTID roll_dice '{"target": 3}' --account_id=alice.testnet
near call $CONTRACTID roll_dice '{"target": 4}' --account_id=alice.testnet
```

Build Deploy and Init
======================

Before you compile this code, you will need to install Rust with [correct target]

```shell
# building it
srouce ./build.sh
```

```shell
# dev-deploy or deploy it
near dev-deploy res/neardice.wasm

# say it was deploy at $CONTRACTID, then init it 
near call $CONTRACTID new \
  '{"owner_id": "boss.testnet", "dice_number": 1, 
  "rolling_fee": "1000000000000000000000000", 
  "reward_fee_fraction": {"numerator": 5, "denominator": 100}}' \
  --account_id=$CONTRACTID
```

```shell
# last step to open the playgroud is 
# to deposit to the jackpod the very first time
near call $CONTRACTID deposit_jackpod '' --amount=50 --account_id=boss.testnet
```

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/roles/developer/contracts/intro
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contracts/games/dice/build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/gl_dice.wasm ./res/

'''
'''--- contracts/games/dice/src/gl_core.rs ---
use crate::*;
use near_sdk::json_types::ValidAccountId;
use near_sdk::{ext_contract, Gas, PromiseResult, PromiseOrValue};

const TOKEN_CONTRACT: &str = "playtoken.testnet";

const GAS_FOR_BASIC: Gas = 10_000_000_000_000;

const NO_DEPOSIT: Balance = 0;

pub trait GameLandCore {

    /// signer is the sponsor,
    /// predecessor could be gameland or sponsor himself,
    fn gl_sponsor(&mut self, amount: U128) -> Promise;

    /// token contract invoke this method, 
    /// to indicate that the amount of token 
    /// has successfully deposit to the shop.
    fn gl_on_sponsor(&mut self, amount: U128) -> String;

    /// signer is the player,
    /// predecessor could be gameland or player himself,
    fn gl_play(&mut self, amount: U128, op: String) -> PromiseOrValue<String>;

    /// token contract invoke this method, 
    /// to indicate that the net_amount of token 
    /// has successfully deposit to the shop.
    fn gl_on_play(&mut self, gross_amount: U128, net_amount: U128, op: String) -> String;

    /// signer is the trigger,
    /// predecessor could be gameland or trigger himself,
    /// return a json-str as result
    fn gl_settle(&mut self, op: String) -> String;
}

#[ext_contract(ext_play_token)]
trait PlayToken {
    fn sponsor_shop(&mut self, amount: U128) -> Promise;
    fn insert_coin(&mut self, amount: U128, op: String) -> Promise;
    /// call this to distribute reward to receiver
    fn reward_coin(&mut self, receiver_id: AccountId, amount: U128);
}

#[near_bindgen]
impl GameLandCore for Contract {

    fn gl_sponsor(&mut self, amount: U128) -> Promise {
        env::log(format!("game::gl_sponsor from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        ext_play_token::sponsor_shop(
            amount,
            &String::from(TOKEN_CONTRACT),
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_BASIC,
        )
    }

    fn gl_on_sponsor(&mut self, amount: U128) -> String {
        env::log(format!("game::gl_on_sponsor from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        let amount: u128 = amount.into();
        let sponsor = env::signer_account_id();
        self.jack_pod += amount;
        format!("{} sponsored {}, jackpod increase to {}, ", sponsor, amount, self.jack_pod)
    }

    fn gl_play(&mut self, amount: U128, op: String) -> PromiseOrValue<String> {
        env::log(format!("game::gl_play from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        ext_play_token::insert_coin(
            amount,
            op,
            &String::from(TOKEN_CONTRACT),
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_BASIC,
        ).into()
    }

    fn gl_on_play(&mut self, gross_amount: U128, net_amount: U128, op: String) -> String {
        env::log(format!("game::gl_on_play from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());

        let player = env::signer_account_id();

        let guess = op.parse::<u8>().unwrap_or(0);
        let result = self.internal_play(&player, gross_amount.into(), net_amount.into(), guess);
        let reward: u128 = result.reward_amount.into();
        if reward > 0 {
            ext_play_token::reward_coin(
                player.clone(),
                result.reward_amount,
                &String::from(TOKEN_CONTRACT),
                NO_DEPOSIT,
                GAS_FOR_BASIC,
            );
        }
        near_sdk::serde_json::to_string(&result).unwrap()

    }

    fn gl_settle(&mut self, op: String) -> String {
        String::from("Not applicable in this game.")
    }

}
'''
'''--- contracts/games/dice/src/gl_metadata.rs ---
use super::*;
use near_sdk::serde::Serialize;

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct GameMetadata {
    version: String,
    name: String,
    logo_url: String,
    thumb_url: String,
    description: String,
}

pub trait GameMetadataProvider {
    fn gl_metadata() -> GameMetadata;
    fn gl_pub_state(&self) -> String;
    fn gl_user_state(&self, user_id: ValidAccountId) -> String;
}

#[near_bindgen]
impl GameMetadataProvider for Contract {
    fn gl_metadata() -> GameMetadata {
        GameMetadata {
            version: String::from("0.1.0"),
            name: String::from("Dice Master"),
            logo_url: String::from("https://github.com/"),
            thumb_url: String::from("https://github.com/"),
            description: String::from("Let's Rolling Dices"),
        }
    }

    fn gl_pub_state(&self) -> String {
        format!("Current jackpot is {}", self.jack_pod)
    }

    fn gl_user_state(&self, user_id: ValidAccountId) -> String {
        // todo: 
        format!("", )
    }

}

'''
'''--- contracts/games/dice/src/internal.rs ---
use crate::*;

pub(crate) fn assert_one_yocto() {
    assert_eq!(
        env::attached_deposit(),
        1,
        "Requires attached deposit of exactly 1 yoctoNEAR"
    )
}

pub(crate) fn assert_self() {
    assert_eq!(
        env::predecessor_account_id(),
        env::current_account_id(),
        "Method is private"
    );
}

impl Contract {
    pub(crate) fn internal_play(&mut self, account_id: &AccountId, gross_amount: u128, net_amount: u128, user_guess: u8) -> HumanReadableDiceResult {
        self.jack_pod += net_amount;

        // rolling dice here
        let random_u8: u8 = env::random_seed().iter().fold(0_u8, |acc, x| acc.wrapping_add(*x));
        let dice_point = self.dice_number as u16 * 6_u16 * random_u8 as u16 / 0x100_u16 + 1;

        let mut result = HumanReadableDiceResult {
            user: account_id.clone(),
            user_guess,
            dice_point: dice_point as u8,
            reward_amount: 0.into(),  // if win, need update
            jackpod_left: self.jack_pod.into(),  // if win, need update
            height: env::block_index().into(),
            ts: env::block_timestamp().into(),
        };
        
        // let's see how lucky caller is this time
        if user_guess == dice_point as u8 {  // Wow, he wins
            // figure out gross reward and update jack pod
            let gross_reward = self.jack_pod / 2;
            self.jack_pod -= gross_reward;
            result.jackpod_left = self.jack_pod.into();
            result.reward_amount = gross_reward.into();
            // records this winning
            self.win_history.push(&WinnerInfo {
                user: account_id.clone(),
                amount: gross_reward,
                height: env::block_index(),
                ts: env::block_timestamp(),
            });
        }
        
        result
    }

}

'''
'''--- contracts/games/dice/src/lib.rs ---
/*
 * This is GameLand_Dice contract:
 * 
 * 
 *
 */

// To conserve gas, efficient serialization is achieved through Borsh (http://borsh.io/)
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::wee_alloc;
use near_sdk::json_types::{U64, U128, ValidAccountId};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, near_bindgen, AccountId, Balance, BlockHeight, Promise};
use near_sdk::collections::{Vector, LookupMap};
use uint::construct_uint;

pub use crate::gl_metadata::*;
pub use crate::gl_core::*;
use crate::internal::*;

mod gl_metadata;
mod gl_core;
mod internal;

construct_uint! {
    /// 256-bit unsigned integer.
    pub struct U256(4);
}

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

#[derive(BorshDeserialize, BorshSerialize)]
pub struct WinnerInfo {
    pub user: AccountId,  // winner
    pub amount: Balance, // win prize
    pub height: BlockHeight,
    pub ts: u64,
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableWinnerInfo {
    pub user: AccountId,
    pub amount: U128,
    pub height: U64,
    pub ts: U64,
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableContractInfo {
    pub owner: AccountId,
    pub jack_pod: U128,
    pub dice_number: u8,
    pub rolling_fee: U128,
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableDiceResult {
    pub user: AccountId,
    pub user_guess: u8,
    pub dice_point: u8,
    pub reward_amount: U128,
    pub jackpod_left: U128,
    pub height: U64,
    pub ts: U64,
}

// Structs in Rust are similar to other languages, and may include impl keyword as shown below
// Note: the names of the structs are not important when calling the smart contract, but the function names are
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    pub owner_id: AccountId,
    pub dice_number: u8,
    pub rolling_fee: Balance,  // how many token needed to roll once.
    pub jack_pod: Balance,  // half of them would be show to user as jack_pod amount
    pub win_history: Vector<WinnerInfo>,
}

impl Default for Contract {
    fn default() -> Self {
        env::panic(b"dice contract should be initialized before usage")
    }
}

#[near_bindgen]
impl Contract {

    #[init]
    pub fn new(
        owner_id: AccountId,
        dice_number: u8,
        rolling_fee: U128,
    ) -> Self {
        assert!(!env::state_exists(), "Already initialized");
        assert!(
            env::is_valid_account_id(owner_id.as_bytes()),
            "The owner account ID is invalid"
        );
        
        Self {
            owner_id,
            dice_number,
            rolling_fee: rolling_fee.into(),
            jack_pod: 0_u128,
            win_history: Vector::new(b"w".to_vec()),
        }
    }

    //***********************/
    // owner functions
    //***********************/

    fn assert_owner(&self) {
        assert_eq!(
            env::predecessor_account_id(),
            self.owner_id,
            "Can only be called by the owner"
        );
    }
    
    pub fn update_dice_number(&mut self, dice_number: u8) {
        self.assert_owner();
        self.dice_number = dice_number;
    }

    pub fn update_rolling_fee(&mut self, rolling_fee: U128) {
        self.assert_owner();
        self.rolling_fee = rolling_fee.into();
    }

    //***********************/
    // view functions
    //***********************/

    fn get_hr_info(&self, index: u64) -> HumanReadableWinnerInfo {
        let info = self.win_history.get(index).expect("Error: no this item in winner history!");
        HumanReadableWinnerInfo {
            user: info.user.clone(),
            amount: info.amount.into(),
            height: info.height.into(),
            ts: info.ts.into(),
        }
    }

    /// Returns the list of winner info in LIFO order
    pub fn get_win_history(&self, from_index: u64, limit: u64) -> Vec<HumanReadableWinnerInfo> {
        let counts: u64 = self.win_history.len() as u64;
        (from_index..std::cmp::min(from_index + limit, counts))
            .map(|index| self.get_hr_info(counts - index - 1))  // reverse to get LIFO order
            .collect()
    }

    pub fn get_contract_info(&self) -> HumanReadableContractInfo {
        HumanReadableContractInfo {
            owner: self.owner_id.clone(),
            jack_pod: self.jack_pod.into(),
            dice_number: self.dice_number,
            rolling_fee: self.rolling_fee.into(),
        }
    }

}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 *
 * To run from contract directory:
 * cargo test -- --nocapture
 *
 * From project root, to run in combination with frontend tests:
 * yarn test
 *
 */
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    // mock the context for testing, notice "signer_account_id" that was accessed above from env::
    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice_near".to_string(),
            signer_account_id: "bob_near".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "carol_near".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    #[test]
    fn set_then_get_greeting() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Contract::default();
    }

    #[test]
    fn get_default_greeting() {
        let context = get_context(vec![], true);
        testing_env!(context);
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default "Hello" greeting
    }
}

'''
'''--- contracts/games/dicemaster/Cargo.toml ---
[package]
name = "dicemaster"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "2.0.0"
uint = { version = "0.8.3", default-features = false }

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contracts/games/dicemaster/README.md ---
DiceMaster Smart Contract
==================

A dice game for gameland.  
three dices: 
| Category | Name | Description | PR of win | Odds |
| - | - | - | - | - |
| 1 | big/small | [11 - 36] vs [3 - 10], except three identical dices | 48.61% | 1:1 |
| 2 | odd/even | odd vs even, except three identical dices | 48.61% | 1:1 |
| 3 | wei-tou | three identical dices and equal to player's guess | 0.46% | 1:150 |
| 4 | quan-tou | three identical dices | 2.80% | 1:24 |
| 5 | composition | player guesses two numbers of three dices | 13.90% | 1:5 |
| 6 | double-dice | player guesses one number that appears at least twice | 7.41% | 1:8 |

Play with this contract
========================
the contract is deployed at testnet with the name `dicemaster.testnet`

you can set it to env for later use:
```shell
export GAMEID=dicemaster.testnet
export GAS=100000000000000
export GLID=gameland.testnet
export COINID=playtoken.testnet
```

## Look around
```shell
# GAMELAND Standard View Interface
near view $GAMEID gl_metadata ''
near view $GAMEID gl_statistic ''
near view $GAMEID gl_pub_state ''
near view $GAMEID gl_user_state '{"user_id": "rb01.testnet"}'
# Game custom view functions
near view $GAMEID get_contract_info ''
near view $GAMEID get_win_history '{"from_index": 0, "limit": 100}'
```
## Let's play
```shell
# see how many playtoken we have
near view $COINID ft_balance_of '{"account_id": "rb01.testnet"}'
# purchase some if neccessary
near call $GLID buy_playtoken '' --account_id=rb01.testnet --amount=6
# play category 1, bet 1 coin with big, ie. set guess1 to 1 for big (2 for small)
near call $GAMEID gl_play \
  '{"amount": "1000000000000000000000000", 
  "op": "{\"category\": 1, \"guess1\": 1, \"guess2\": 0, \"guess3\": 0}"}' \
  --account_id=rb01.testnet --gas=$GAS
# play category 2, bet 1 coin with odd, ie. set guess1 to 1 for odd (2 for even)
near call $GAMEID gl_play \
  '{"amount": "1000000000000000000000000", 
  "op": "{\"category\": 2, \"guess1\": 1, \"guess2\": 0, \"guess3\": 0}"}' \
  --account_id=rb01.testnet --gas=$GAS
# play category 3, bet 1 coin for a hard 12, ie. set guess1 to 4 for 4-4-4.
near call $GAMEID gl_play \
  '{"amount": "1000000000000000000000000", 
  "op": "{\"category\": 3, \"guess1\": 4, \"guess2\": 0, \"guess3\": 0}"}' \
  --account_id=rb01.testnet --gas=$GAS
# play category 4, bet 3 coins for three identical dice.
near call $GAMEID gl_play \
  '{"amount": "3000000000000000000000000", 
  "op": "{\"category\": 4, \"guess1\": 0, \"guess2\": 0, \"guess3\": 0}"}' \
  --account_id=rb01.testnet --gas=$GAS
# play category 5, bet 6 coin with composition of 3-4
near call $GAMEID gl_play \
  '{"amount": "6000000000000000000000000", 
  "op": "{\"category\": 5, \"guess1\": 3, \"guess2\": 4, \"guess3\": 0}"}' \
  --account_id=rb01.testnet --gas=$GAS
# play category 6, bet 8 coin for 3 appears at least twice. 
near call $GAMEID gl_play \
  '{"amount": "8000000000000000000000000", 
  "op": "{\"category\": 6, \"guess1\": 3, \"guess2\": 0, \"guess3\": 0}"}' \
  --account_id=rb01.testnet --gas=$GAS
```

Build Deploy and Init
======================

Before you compile this code, you will need to install Rust with [correct target]

```shell
# building it
source ./build.sh
```

```shell
# deploy it
near deploy $GAMEID res/dicemaster.wasm --account_id=$GAMEID

# say it was deploy at $CONTRACTID, then init it, 
# set min bet is 1 coin and max bet is 10 coin
near call $GAMEID new \
  '{"owner_id": "humeng.testnet", 
  "min_bet": "1000000000000000000000000", 
  "max_bet": "10000000000000000000000000"}' \
  --account_id=$GAMEID

# sponsor jackpot with 200 token
near call $GAMEID gl_sponsor '{"amount": "200000000000000000000000000"}' \
  --account_id=rb01.testnet --gas=$GAS
```

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/roles/developer/contracts/intro
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contracts/games/dicemaster/build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/dicemaster.wasm ./res/

'''
'''--- contracts/games/dicemaster/src/gl_core.rs ---
use crate::*;

use near_sdk::{ext_contract, Gas, PromiseOrValue};

const TOKEN_CONTRACT: &str = "playtoken.testnet";

const GAS_FOR_BASIC: Gas = 20_000_000_000_000;

const NO_DEPOSIT: Balance = 0;

pub trait GameLandCore {

    /// signer is the sponsor,
    /// predecessor could be gameland or sponsor himself,
    fn gl_sponsor(&mut self, amount: U128) -> Promise;

    /// token contract invoke this method, 
    /// to indicate that the amount of token 
    /// has successfully deposit to the shop.
    fn gl_on_sponsor(&mut self, amount: U128) -> String;

    /// signer is the player,
    /// predecessor could be gameland or player himself,
    fn gl_play(&mut self, amount: U128, op: String) -> PromiseOrValue<String>;

    /// token contract invoke this method, 
    /// to indicate that the net_amount of token 
    /// has successfully deposit to the shop.
    fn gl_on_play(&mut self, gross_amount: U128, net_amount: U128, op: String) -> String;

    /// signer is the trigger,
    /// predecessor could be gameland or trigger himself,
    /// return a json-str as result
    fn gl_settle(&mut self, op: String) -> String;
}

#[ext_contract(ext_play_token)]
trait PlayToken {
    fn sponsor_shop(&mut self, amount: U128) -> Promise;
    fn insert_coin(&mut self, amount: U128, op: String) -> Promise;
    /// call this to distribute reward to receiver
    fn reward_coin(&mut self, receiver_id: AccountId, amount: U128);
}

#[near_bindgen]
impl GameLandCore for Contract {

    fn gl_sponsor(&mut self, amount: U128) -> Promise {
        env::log(format!("game::gl_sponsor from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        ext_play_token::sponsor_shop(
            amount,
            &String::from(TOKEN_CONTRACT),
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_BASIC,
        )
    }

    fn gl_on_sponsor(&mut self, amount: U128) -> String {
        env::log(format!("game::gl_on_sponsor from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        let amount: u128 = amount.into();
        let sponsor = env::signer_account_id();
        self.jackpot += amount;
        format!("{} sponsored {}, jackpot increase to {}, ", sponsor, amount, self.jackpot)
    }

    fn gl_play(&mut self, amount: U128, op: String) -> PromiseOrValue<String> {
        env::log(format!("game::gl_play from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        self.gl_play_count += 1;
        // see if bet amount is valid
        let mut result = HumanReadableDiceResult {
            user: env::signer_account_id(),
            dice_point: vec![0,0,0],
            bet_amount: amount,
            reward_amount: 0.into(),  
            jackpot_left: self.jackpot.into(),
            height: env::block_index().into(),
            ts: env::block_timestamp().into(),
            ret_code: 1,
            reason: String::from(""),
        };
        let amount: u128 = amount.into();
        if amount < self.min_bet || amount > self.max_bet {
            result.reason = "Invalid bet amount".to_string();
            return PromiseOrValue::Value(near_sdk::serde_json::to_string(&result).unwrap());
        }
        // see if category is valid
        let bet_info: BetInfo = near_sdk::serde_json::from_str(&op).unwrap();
        if bet_info.category < 1 || bet_info.category > 6 {
            result.reason = "Invailid category".to_string();
            return PromiseOrValue::Value(near_sdk::serde_json::to_string(&result).unwrap());
        }
        // see if jackpot can support the bet amount
        if self.jackpot / 5 < self.internal_max_reward(amount, &bet_info) {
            result.reason = "Overflow on bet amount".to_string();
            return PromiseOrValue::Value(near_sdk::serde_json::to_string(&result).unwrap());
        }

        ext_play_token::insert_coin(
            amount.into(),
            op,
            &String::from(TOKEN_CONTRACT),
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_BASIC,
        ).into()
    }

    fn gl_on_play(&mut self, gross_amount: U128, net_amount: U128, op: String) -> String {
        env::log(format!("game::gl_on_play from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        
        let gross_amount: u128 = gross_amount.into();
        let net_amount: u128 = net_amount.into();
        let player = env::signer_account_id();

        self.jackpot += net_amount;

        // recheck that jackpot can support max reward
        let bet_info: BetInfo = near_sdk::serde_json::from_str(&op).unwrap();
        if self.jackpot / 5 < self.internal_max_reward(gross_amount, &bet_info) {
            env::log(format!("Overflow on bet amount, refund bet amount.").as_bytes());
            ext_play_token::reward_coin(
                player.clone(),
                gross_amount.into(),
                &String::from(TOKEN_CONTRACT),
                NO_DEPOSIT,
                GAS_FOR_BASIC,
            );
            // this is small probability event, and not player's fault,
            // so return all bet amount including play commission fee
            self.jackpot -= gross_amount;
            let result = HumanReadableDiceResult {
                user: player.clone(),
                dice_point: vec![0,0,0],
                bet_amount: gross_amount.into(),
                reward_amount: 0.into(),  
                jackpot_left: self.jackpot.into(),
                height: env::block_index().into(),
                ts: env::block_timestamp().into(),
                ret_code: 1,
                reason: String::from("Overflow on bet amount, refund bet amount"),
            };
            return near_sdk::serde_json::to_string(&result).unwrap();
        }

        let result = self.internal_play(&player, net_amount, &bet_info);
        let reward: u128 = result.reward_amount.into();
        if reward > 0 {
            self.gl_winner_count += 1;
            self.gl_reward_sum += reward;
            ext_play_token::reward_coin(
                player.clone(),
                result.reward_amount,
                &String::from(TOKEN_CONTRACT),
                NO_DEPOSIT,
                GAS_FOR_BASIC,
            );
        }
        near_sdk::serde_json::to_string(&result).unwrap()

    }

    fn gl_settle(&mut self, op: String) -> String {
        format!("Not applicable in this game, op is {}", op)
    }

}
'''
'''--- contracts/games/dicemaster/src/gl_metadata.rs ---
use super::*;
use near_sdk::serde::Serialize;

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct GameMetadata {
    version: String,
    name: String,
    logo_url: String,
    thumb_url: String,
    description: String,
}

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct GameStatistic {
    play_count: U128,  // counter of play action called
    winner_count: U128,  // counter for winners
    reward_sum: U128,  // total reward distributed
}

pub trait GameMetadataProvider {
    fn gl_metadata() -> GameMetadata;
    fn gl_statistic(&self) -> GameStatistic;
    fn gl_pub_state(&self) -> String;
    fn gl_user_state(&self, user_id: ValidAccountId) -> String;
}

#[near_bindgen]
impl GameMetadataProvider for Contract {
    fn gl_metadata() -> GameMetadata {
        GameMetadata {
            version: String::from("0.1.0"),
            name: String::from("Dice Master 2"),
            logo_url: String::from("dicemaster.testnet.logo.png"),
            thumb_url: String::from("dicemaster.testnet.thumb.png"),
            description: String::from("Let's Rolling Dices"),
        }
    }

    fn gl_statistic(&self) -> GameStatistic {
        GameStatistic {
            play_count: self.gl_play_count.into(),
            winner_count: self.gl_winner_count.into(),
            reward_sum: self.gl_reward_sum.into(),
        }
    }

    fn gl_pub_state(&self) -> String {
        format!("Current jackpot has {} GPT(s).", self.jackpot/1000000000000000000000000)
    }

    fn gl_user_state(&self, user_id: ValidAccountId) -> String {
        // todo: 
        format!("Welcome {}", user_id.as_ref())
    }

}

'''
'''--- contracts/games/dicemaster/src/internal.rs ---
use crate::*;

impl Contract {
    pub(crate) fn internal_max_reward(&self, bet_amount: Balance, bet_info: &BetInfo) -> Balance {
        if bet_info.category == 1 || bet_info.category == 2 {
            bet_amount * 2
        } else if bet_info.category == 3 {
            bet_amount * 150
        } else if bet_info.category == 4 {
            bet_amount * 24
        } else if bet_info.category == 5 {
            bet_amount * 5
        } else if bet_info.category == 6 {
            bet_amount * 8
        } else {
            env::panic(b"Internal Error: category invalid!");
        }
    }

    fn internal_judge(&self, bet_info: &BetInfo, dices: &Vec<u8>) -> u8 {
        // todo: judge win or lose, return odds
        if bet_info.category == 1 {
            self.internal_judge_1(bet_info, dices)
        } else if bet_info.category == 2 {
            self.internal_judge_2(bet_info, dices)
        } else if bet_info.category == 3 {
            self.internal_judge_3(bet_info, dices)
        } else if bet_info.category == 4 {
            self.internal_judge_4(bet_info, dices)
        } else if bet_info.category == 5 {
            self.internal_judge_5(bet_info, dices)
        } else if bet_info.category == 6 {
            self.internal_judge_6(bet_info, dices)
        } else {
            0
        }
        
    }

    /// big/small, [3, 10] vs [11 - 18], but if three dices are identical, player loses.
    fn internal_judge_1(&self, bet_info: &BetInfo, dices: &Vec<u8>) -> u8 {
        let dice1: &u8 = dices.get(0).expect("internal error: dice 0 is none");
        let dice2: &u8 = dices.get(1).expect("internal error: dice 0 is none");
        let dice3: &u8 = dices.get(2).expect("internal error: dice 0 is none");
        if dice1 == dice2 && dice1 == dice3 {
            return 0;
        }
        let dices_number = dice1 + dice2 + dice3;
        if dices_number >= 11 && bet_info.guess1 == 1 {
            // player bets big, and win
            return 1;
        }
        if dices_number <= 10 && bet_info.guess1 == 2 {
            // player bets small, and win
            return 1;
        }
        0
    }

    /// odd/even, but if three dices are identical, player loses.
    fn internal_judge_2(&self, bet_info: &BetInfo, dices: &Vec<u8>) -> u8 {
        let dice1: &u8 = dices.get(0).expect("internal error: dice 0 is none");
        let dice2: &u8 = dices.get(1).expect("internal error: dice 0 is none");
        let dice3: &u8 = dices.get(2).expect("internal error: dice 0 is none");
        if dice1 == dice2 && dice1 == dice3 {
            return 0;
        }
        let dices_number = dice1 + dice2 + dice3;
        if dices_number % 2 == 1 && bet_info.guess1 == 1 {
            // player bets odd, and win
            return 1;
        }
        if dices_number % 2 == 0 && bet_info.guess1 == 2 {
            // player bets even, and win
            return 1;
        }
        0
    }

    /// player names one number, if all three dices are equal to that number ,then win.
    fn internal_judge_3(&self, bet_info: &BetInfo, dices: &Vec<u8>) -> u8 {
        let dice1: &u8 = dices.get(0).expect("internal error: dice 0 is none");
        let dice2: &u8 = dices.get(1).expect("internal error: dice 0 is none");
        let dice3: &u8 = dices.get(2).expect("internal error: dice 0 is none");
        if dice1 == dice2 && dice1 == dice3 && *dice1 == bet_info.guess1 {
            150
        } else {
            0
        }
    }

    /// if all three dices are identical, then win.
    fn internal_judge_4(&self, _bet_info: &BetInfo, dices: &Vec<u8>) -> u8 {
        let dice1: &u8 = dices.get(0).expect("internal error: dice 0 is none");
        let dice2: &u8 = dices.get(1).expect("internal error: dice 0 is none");
        let dice3: &u8 = dices.get(2).expect("internal error: dice 0 is none");
        if dice1 == dice2 && dice1 == dice3 {
            24
        } else {
            0
        }
    }

    /// palyer names two numbers, if these nubmers appear in dices, then win. 
    fn internal_judge_5(&self, bet_info: &BetInfo, dices: &Vec<u8>) -> u8 {
        // if two numbers are different, judge like this
        if bet_info.guess1 != bet_info.guess2 {
            let exist1 = dices.iter().find(|&&x| x == bet_info.guess1 );
            let exist2 = dices.iter().find(|&&x| x == bet_info.guess2 );
            if exist1 != None && exist2 != None {
                5
            } else {
                0
            }
        } else {  // two same number, should appear at least twice in dices
            let exists = dices.iter().filter(|&&x| x == bet_info.guess1).map(|x| *x).collect::<Vec<u8>>();
            if exists.len() >= 2 {
                5
            } else {
                0
            }
        }
        
    }

    /// player names one number, if this number appears more than twice in dices, then win.
    fn internal_judge_6(&self, bet_info: &BetInfo, dices: &Vec<u8>) -> u8 {
        let exists = dices.iter().filter(|&&x| x == bet_info.guess1).map(|x| *x).collect::<Vec<u8>>();
        if exists.len() >= 2 {
            8
        } else {
            0
        }
    }

    pub(crate) fn internal_play(&mut self, account_id: &AccountId, bet_amount: u128, bet_info: &BetInfo) -> HumanReadableDiceResult {

        // rolling three dice here
        let randomness = env::random_seed();
        let rand1 = randomness[..10].iter().fold(0_u8, |acc, x| acc.wrapping_add(*x));
        let rand2 = randomness[10..20].iter().fold(0_u8, |acc, x| acc.wrapping_add(*x));
        let rand3 = randomness[20..30].iter().fold(0_u8, |acc, x| acc.wrapping_add(*x));

        let dice1 = 6_u16 * rand1 as u16 / 0x100_u16 + 1;
        let dice2 = 6_u16 * rand2 as u16 / 0x100_u16 + 1;
        let dice3 = 6_u16 * rand3 as u16 / 0x100_u16 + 1;
        let dice1 = dice1 as u8;
        let dice2 = dice2 as u8;
        let dice3 = dice3 as u8;

        let mut reward: u128 = 0;
        let odds = self.internal_judge(bet_info, &vec![dice1, dice2, dice3]);
        if odds != 0 {
            reward = bet_amount.checked_mul(odds as u128).expect("Internal Error: reward overflow!");
            reward += bet_amount;
            self.jackpot -= reward;

            self.win_history.push(&WinnerInfo {
                user: account_id.clone(),
                category: bet_info.category,
                odds: odds,
                reward: reward - bet_amount,
                height: env::block_index(),
                ts: env::block_timestamp(),
            });
        }

        HumanReadableDiceResult {
            user: account_id.clone(),
            dice_point: vec![dice1, dice2, dice3],
            bet_amount: bet_amount.into(),
            reward_amount: reward.into(),  
            jackpot_left: self.jackpot.into(),
            height: env::block_index().into(),
            ts: env::block_timestamp().into(),
            ret_code: 0,
            reason: String::from("Successful played."),
        }
    }

}

'''
'''--- contracts/games/dicemaster/src/lib.rs ---
/*
 * This is DiceMaster contract:
 * 
 * 
 *
 */

// To conserve gas, efficient serialization is achieved through Borsh (http://borsh.io/)
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::wee_alloc;
use near_sdk::json_types::{U64, U128, ValidAccountId};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, near_bindgen, AccountId, Balance, BlockHeight, Promise};
use near_sdk::collections::{Vector};
use uint::construct_uint;

pub use crate::gl_metadata::*;
pub use crate::gl_core::*;
// use crate::internal::*;

mod gl_metadata;
mod gl_core;
mod internal;

construct_uint! {
    /// 256-bit unsigned integer.
    pub struct U256(4);
}

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

#[derive(Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct BetInfo {
    // 1 - big/small, 2 - even/odd, 3 - weitou, 4 - quantou, 5 - composition, 6 - double-dice
    pub category: u8,
    pub guess1: u8,  // 1: odd or big, 2: even or small, N for other categories
    pub guess2: u8,  // used in category 5: composition
    pub guess3: u8,  // reserve for future use
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct WinnerInfo {
    pub user: AccountId,  // winner
    pub category: u8,  // game category: 
    pub odds: u8,  // bet * odds = reward
    pub reward: Balance, 
    pub height: BlockHeight,
    pub ts: u64,
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableWinnerInfo {
    pub user: AccountId,
    pub category: u8,
    pub odds: u8,
    pub reward: U128,
    pub height: U64,
    pub ts: U64,
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableContractInfo {
    pub owner: AccountId,
    pub jackpot: U128,
    pub min_bet: U128,
    pub max_bet: U128,
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableDiceResult {
    pub user: AccountId,
    pub dice_point: Vec<u8>,
    pub bet_amount: U128,
    pub reward_amount: U128,
    pub jackpot_left: U128,
    pub height: U64,
    pub ts: U64,
    pub ret_code: u8,
    pub reason: String,
}

// Structs in Rust are similar to other languages, and may include impl keyword as shown below
// Note: the names of the structs are not important when calling the smart contract, but the function names are
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    pub gl_play_count: u128,
    pub gl_winner_count: u128,
    pub gl_reward_sum: Balance,

    pub owner_id: AccountId,
    pub min_bet: Balance,  // the minimum token needed to play once.
    pub max_bet: Balance,
    pub jackpot: Balance,  
    pub win_history: Vector<WinnerInfo>,
}

impl Default for Contract {
    fn default() -> Self {
        env::panic(b"This contract should be initialized before usage")
    }
}

#[near_bindgen]
impl Contract {

    #[init]
    pub fn new(owner_id: AccountId, min_bet: U128, max_bet: U128) -> Self {
        assert!(!env::state_exists(), "Already initialized");
        assert!(
            env::is_valid_account_id(owner_id.as_bytes()),
            "The owner account ID is invalid"
        );
        
        Self {
            gl_play_count: 0,
            gl_winner_count: 0,
            gl_reward_sum: 0,
            owner_id,
            min_bet: min_bet.into(),
            max_bet: max_bet.into(),
            jackpot: 0_u128,
            win_history: Vector::new(b"w".to_vec()),
        }
    }

    //***********************/
    // owner functions
    //***********************/

    fn assert_owner(&self) {
        assert_eq!(
            env::predecessor_account_id(),
            self.owner_id,
            "Can only be called by the owner"
        );
    }
    
    pub fn update_min_bet(&mut self, min_bet: U128) {
        self.assert_owner();
        self.min_bet = min_bet.into();
    }

    //***********************/
    // view functions
    //***********************/

    fn get_hr_info(&self, index: u64) -> HumanReadableWinnerInfo {
        let info = self.win_history.get(index).expect("Error: no this item in winner history!");
        HumanReadableWinnerInfo {
            user: info.user.clone(),
            category: info.category,
            odds: info.odds,
            reward: info.reward.into(),
            height: info.height.into(),
            ts: info.ts.into(),
        }
    }

    /// Returns the list of winner info in LIFO order
    pub fn get_win_history(&self, from_index: u64, limit: u64) -> Vec<HumanReadableWinnerInfo> {
        let counts: u64 = self.win_history.len() as u64;
        (from_index..std::cmp::min(from_index + limit, counts))
            .map(|index| self.get_hr_info(counts - index - 1))  // reverse to get LIFO order
            .collect()
    }

    pub fn get_contract_info(&self) -> HumanReadableContractInfo {
        HumanReadableContractInfo {
            owner: self.owner_id.clone(),
            jackpot: self.jackpot.into(),
            min_bet: self.min_bet.into(),
            max_bet: self.max_bet.into(),
        }
    }

}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 *
 * To run from contract directory:
 * cargo test -- --nocapture
 *
 * From project root, to run in combination with frontend tests:
 * yarn test
 *
 */
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    // mock the context for testing, notice "signer_account_id" that was accessed above from env::
    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice_near".to_string(),
            signer_account_id: "bob_near".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "carol_near".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    #[test]
    fn set_then_get_greeting() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Contract::default();
    }

    #[test]
    fn get_default_greeting() {
        let context = get_context(vec![], true);
        testing_env!(context);
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default "Hello" greeting
    }
}

'''
'''--- contracts/games/landlord/Cargo.toml ---
[package]
name = "gl_landlord"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "2.0.0"
uint = { version = "0.8.3", default-features = false }

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contracts/games/landlord/README.md ---
GameLand Game Smart Contract
==================

Game AngleLand.

Play with this contract
========================
the contract is deployed at testnet with the name `angleland.testnet`

you can set it to env for later use:
```shell
export CONTRACTID=angleland.testnet
```

## Look around
```shell
# return info
near view $CONTRACTID get_contract_info ''
# return current round game info
near view $CONTRACTID get_market_info ''
# return win history list
near view $CONTRACTID get_win_history '{"from_index": 0, "limit": 100}'
# return metadata
near view $CONTRACTID gl_metadata ''
near view $CONTRACTID gl_pub_state ''
near view $CONTRACTID gl_user_state '{"user_id": "rb01.testnet"}'
```
## Let's play
```shell
# see how many playtoken we have
near view playtoken.testnet ft_balance_of '{"account_id": "rb01.testnet"}'
# purchase some if neccessary
near call gameland.testnet buy_playtoken '' --account_id=rb01.testnet --amount=6
# play the game
near call angleland.testnet gl_play '{"amount": "1000000000000000000000000", "op": "1"}' --account_id=rb01.testnet --gas=50000000000000

```

Build Deploy and Init
======================

Before you compile this code, you will need to install Rust with [correct target]

```shell
# building it
srouce ./build.sh
```

```shell
near deploy angleland.testnet res/gl_landlord.wasm --account_id=angleland.testnet
near call angleland.testnet new '{"owner_id": "humeng.testnet", "house_count": 36, "play_fee": "1000000000000000000000000"}' --account_id=angleland.testnet

### register this game
near call gameland.testnet register_shop '{"reg_form": {"flag": 1, "shop_id": "angleland.testnet", "owner_id": "humeng.testnet", "refs": "https://github.com/marco-sundsk/gameland/", "height": "0", "ts": "0", "status": 0}}' --account_id=humeng.testnet
near view gameland.testnet list_registers '{"from_index": 0, "limit": 100}'
near call gameland.testnet resovle_register '{"shop_id": "angleland.testnet", "pass": true, "new_status": 2}' --account_id=humeng.testnet --gas=20000000000000

### sponsor this game with 5 tokensgit 
near call angleland.testnet gl_sponsor '{"amount": "5000000000000000000000000"}' --account_id=humeng.testnet --gas=30000000000000
```

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/roles/developer/contracts/intro
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contracts/games/landlord/build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/gl_landlord.wasm ./res/

'''
'''--- contracts/games/landlord/src/gl_core.rs ---
use crate::*;
use near_sdk::json_types::ValidAccountId;
use near_sdk::{ext_contract, Gas, PromiseOrValue};

const TOKEN_CONTRACT: &str = "playtoken.testnet";

const GAS_FOR_BASIC: Gas = 10_000_000_000_000;

const NO_DEPOSIT: Balance = 0;

pub trait GameLandCore {

    /// signer is the sponsor,
    /// predecessor could be gameland or sponsor himself,
    fn gl_sponsor(&mut self, amount: U128) -> Promise;

    /// token contract invoke this method, 
    /// to indicate that the amount of token 
    /// has successfully deposit to the shop.
    fn gl_on_sponsor(&mut self, amount: U128) -> String;

    /// signer is the player,
    /// predecessor could be gameland or player himself,
    fn gl_play(&mut self, amount: U128, op: String) -> PromiseOrValue<String>;

    /// token contract invoke this method, 
    /// to indicate that the net_amount of token 
    /// has successfully deposit to the shop.
    fn gl_on_play(&mut self, gross_amount: U128, net_amount: U128, op: String) -> String;

    /// signer is the trigger,
    /// predecessor could be gameland or trigger himself,
    /// return a json-str as result
    fn gl_settle(&mut self, op: String) -> String;
}

#[ext_contract(ext_play_token)]
trait PlayToken {
    fn sponsor_shop(&mut self, amount: U128) -> Promise;
    fn insert_coin(&mut self, amount: U128, op: String) -> Promise;
    /// call this to distribute reward to receiver
    fn reward_coin(&mut self, receiver_id: AccountId, amount: U128);
}

#[near_bindgen]
impl GameLandCore for Contract {

    fn gl_sponsor(&mut self, amount: U128) -> Promise {
        env::log(format!("game::gl_sponsor from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        ext_play_token::sponsor_shop(
            amount,
            &String::from(TOKEN_CONTRACT),
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_BASIC,
        )
    }

    fn gl_on_sponsor(&mut self, amount: U128) -> String {
        env::log(format!("game::gl_on_sponsor from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        let amount: u128 = amount.into();
        let sponsor = env::signer_account_id();
        self.jack_pod += amount;
        format!("{} sponsored {}, jackpod increase to {}, ", sponsor, amount, self.jack_pod)
    }

    fn gl_play(&mut self, amount: U128, op: String) -> PromiseOrValue<String> {
        env::log(format!("game::gl_play from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());

        // see if user choose valid house
        let guess: u8 = op.parse::<u8>().unwrap_or(0);
        if guess == 0 || guess > self.house_count {
            return PromiseOrValue::Value(String::from("Invalid house code."));
        } 

        let house_owner = self.houses.get(&guess).unwrap_or(String::from(""));
        if house_owner != "" {
            return PromiseOrValue::Value(String::from("The house has been occupied."));
        }

        // occupy in advance, if insert_coin failed, we will cancel it in callback.
        // self.houses.insert(&guess, &env::signer_account_id());

        ext_play_token::insert_coin(
            amount,
            op,
            &String::from(TOKEN_CONTRACT),
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_BASIC,
        ).into()
    }

    fn gl_on_play(&mut self, gross_amount: U128, net_amount: U128, op: String) -> String {
        env::log(format!("game::gl_on_play from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        
        let player = env::signer_account_id();
        let guess = op.parse::<u8>().unwrap_or(0);
        let gross_amount: u128 = gross_amount.into();
        let net_amount: u128 = net_amount.into();

        // see if user choose valid house
        if guess == 0 || guess > self.house_count {
            env::panic(b"Inner Error: Invalid house code")
        } 

        let house_owner = self.houses.get(&guess).unwrap_or(String::from(""));
        if house_owner != "" {
            // someone else has occupy this house, refund coin to player
            env::log(format!("someone else has occupied the house, return playtoken").as_bytes());
            ext_play_token::reward_coin(
                player.clone(),
                self.play_fee.into(),
                &String::from(TOKEN_CONTRACT),
                NO_DEPOSIT,
                GAS_FOR_BASIC,
            );
            let result = HumanReadablePlayResult {
                user: player.clone(),
                round: self.current_round.into(),
                user_choosen: guess,
                god_choosen: 0 as u8,
                lucky_guy: String::from(""), 
                reward_amount: 0.into(),  
                jackpod_left: self.jack_pod.into(),
                height: env::block_index().into(),
                ts: env::block_timestamp().into(),
            };
            return near_sdk::serde_json::to_string(&result).unwrap();
        }
        
        let result = self.internal_play(&player, gross_amount, net_amount, guess);
        let mut reward: u128 = result.reward_amount.into();
        if reward > 0 {
            // the settle player get a double reward
            if reward > 2 * self.play_fee {
                ext_play_token::reward_coin(
                    player,
                    (2 * self.play_fee).into(),
                    &String::from(TOKEN_CONTRACT),
                    NO_DEPOSIT,
                    GAS_FOR_BASIC,
                );
                reward = reward - self.play_fee;
            }
            // the remaining reward send to the winner
            ext_play_token::reward_coin(
                result.lucky_guy.clone(),
                reward.into(),
                &String::from(TOKEN_CONTRACT),
                NO_DEPOSIT,
                GAS_FOR_BASIC,
            );
        }
        near_sdk::serde_json::to_string(&result).unwrap()

    }

    fn gl_settle(&mut self, op: String) -> String {
        String::from("Not applicable in this game.")
    }

}
'''
'''--- contracts/games/landlord/src/gl_metadata.rs ---
use super::*;
use near_sdk::serde::Serialize;

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct GameMetadata {
    version: String,
    name: String,
    logo_url: String,
    thumb_url: String,
    description: String,
}

pub trait GameMetadataProvider {
    fn gl_metadata() -> GameMetadata;
    fn gl_pub_state(&self) -> String;
    fn gl_user_state(&self, user_id: ValidAccountId) -> String;
}

#[near_bindgen]
impl GameMetadataProvider for Contract {
    fn gl_metadata() -> GameMetadata {
        GameMetadata {
            version: String::from("0.1.0"),
            name: String::from("Land Lord"),
            logo_url: String::from("https://github.com/"),
            thumb_url: String::from("https://github.com/"),
            description: String::from("Choose lucking house"),
        }
    }

    fn gl_pub_state(&self) -> String {
        let remain = self.house_count - self.houses.keys_as_vector().len() as u8;
        format!("Round {}: {} block remain. Current jackpot has {} GPT(s).", 
            self.current_round, remain, self.jack_pod/1000000000000000000000000)
    }

    fn gl_user_state(&self, user_id: ValidAccountId) -> String {

        let keys = self.houses.keys_as_vector();
        // let mut players = HashMap::new();
        // for index in 0..keys.len() {
        //     players.insert(
        //         self.houses.get(&keys.get(index).unwrap()).unwrap_or(String::from("")),
        //         keys.get(index).unwrap(), 
        //     ); 
        // }

        let players = (0..keys.len()).map(
            |index| (
                self.houses.get(&keys.get(index).unwrap()).unwrap_or(String::from("")),
                keys.get(index).unwrap()
                )
        ).collect::<HashMap<_,_>>();

        if players.contains_key(user_id.as_ref()) {
            format!("You have taken house #{}", players.get(user_id.as_ref()).unwrap())
        } else {
            format!("Time to choose your house", )
        }
        
    }

}

'''
'''--- contracts/games/landlord/src/internal.rs ---
use crate::*;

pub(crate) fn assert_one_yocto() {
    assert_eq!(
        env::attached_deposit(),
        1,
        "Requires attached deposit of exactly 1 yoctoNEAR"
    )
}

pub(crate) fn assert_self() {
    assert_eq!(
        env::predecessor_account_id(),
        env::current_account_id(),
        "Method is private"
    );
}

impl Contract {
    pub(crate) fn internal_play(&mut self, account_id: &AccountId, gross_amount: u128, net_amount: u128, user_guess: u8) -> HumanReadablePlayResult {
        self.jack_pod += net_amount;
        self.houses.insert(&user_guess, &env::signer_account_id());
        
        // god choose here
        let random_u8: u8 = env::random_seed().iter().fold(0_u8, |acc, x| acc.wrapping_add(*x));
        let god_choosen = self.house_count as u16 * random_u8 as u16 / 0x100_u16 + 1;
        let god_choosen: u8 = god_choosen as u8;
        let lucky_guy = self.houses.get(&god_choosen).unwrap_or(String::from(""));

        let mut result = HumanReadablePlayResult {
            user: account_id.clone(),
            round: self.current_round.into(),
            user_choosen: user_guess,
            god_choosen: god_choosen as u8,
            lucky_guy: lucky_guy.clone(), 
            reward_amount: 0.into(),  // if win, need update
            jackpod_left: self.jack_pod.into(),  // if win, need update
            height: env::block_index().into(),
            ts: env::block_timestamp().into(),
        };
        
        // let's see how lucky caller is this time
        if lucky_guy != "" {  // Wow, he wins
            // figure out gross reward and update jack pod
            let gross_reward = self.jack_pod / 2;
            self.jack_pod -= gross_reward;
            result.jackpod_left = self.jack_pod.into();
            result.reward_amount = gross_reward.into();
            
            self.current_round += 1;
            self.houses.clear();
            // records this winning
            self.win_history.push(&WinnerInfo {
                round: self.current_round,
                user: lucky_guy.clone(),
                lucky_number: god_choosen,
                amount: gross_reward,
                height: env::block_index(),
                ts: env::block_timestamp(),
            });
        }
        
        result
    }

}

'''
'''--- contracts/games/landlord/src/lib.rs ---
/*
 * This is GameLand_Landlord contract:
 * 
 * 
 *
 */

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::wee_alloc;
use near_sdk::json_types::{U64, U128, ValidAccountId};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, near_bindgen, AccountId, Balance, BlockHeight, Promise};
use near_sdk::collections::{Vector, UnorderedMap};
use std::collections::HashMap;
use uint::construct_uint;

pub use crate::gl_metadata::*;
pub use crate::gl_core::*;
use crate::internal::*;

mod gl_metadata;
mod gl_core;
mod internal;

construct_uint! {
    /// 256-bit unsigned integer.
    pub struct U256(4);
}

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

#[derive(BorshDeserialize, BorshSerialize)]
pub struct WinnerInfo {
    pub user: AccountId,  // winner
    pub round: u128,
    pub amount: Balance, // win prize
    pub lucky_number: u8, 
    pub height: BlockHeight,
    pub ts: u64,
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableWinnerInfo {
    pub user: AccountId,
    pub round: U128,
    pub amount: U128,
    pub lucky_number: u8,
    pub height: U64,
    pub ts: U64,
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableContractInfo {
    pub owner: AccountId,
    pub jack_pod: U128,
    pub house_count: u8,
    pub play_fee: U128,
    pub current_round: U128,
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadablePlayResult {
    pub user: AccountId,
    pub round: U128,
    pub user_choosen: u8,
    pub god_choosen: u8,
    pub lucky_guy: String,  // empty string if no one win 
    pub reward_amount: U128,  // 0 if no one win
    pub jackpod_left: U128,
    pub height: U64,
    pub ts: U64,
}

// Structs in Rust are similar to other languages, and may include impl keyword as shown below
// Note: the names of the structs are not important when calling the smart contract, but the function names are
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    pub owner_id: AccountId,
    pub houses: UnorderedMap<u8, AccountId>,
    pub house_count: u8,
    pub play_fee: Balance,  // how many token needed to play once.
    pub jack_pod: Balance,
    pub win_history: Vector<WinnerInfo>,
    pub current_round: u128,
}

impl Default for Contract {
    fn default() -> Self {
        env::panic(b"dice contract should be initialized before usage")
    }
}

#[near_bindgen]
impl Contract {

    #[init]
    pub fn new(
        owner_id: AccountId,
        house_count: u8,
        play_fee: U128,
    ) -> Self {
        assert!(!env::state_exists(), "Already initialized");
        assert!(
            env::is_valid_account_id(owner_id.as_bytes()),
            "The owner account ID is invalid"
        );
        
        Self {
            owner_id,
            house_count,
            houses: UnorderedMap::new(b"h".to_vec()),
            play_fee: play_fee.into(),
            jack_pod: 0_u128,
            win_history: Vector::new(b"w".to_vec()),
            current_round: 0,
        }
    }

    //***********************/
    // owner functions
    //***********************/

    fn assert_owner(&self) {
        assert_eq!(
            env::predecessor_account_id(),
            self.owner_id,
            "Can only be called by the owner"
        );
    }
    
    pub fn update_house_count(&mut self, house_count: u8) {
        self.assert_owner();
        self.house_count = house_count;
    }

    pub fn update_play_fee(&mut self, play_fee: U128) {
        self.assert_owner();
        self.play_fee = play_fee.into();
    }

    //***********************/
    // view functions
    //***********************/

    /// get all occupied houses info
    pub fn get_maket_info(&self) -> HashMap<u8, String> {

        let keys = self.houses.keys_as_vector();

        (0..keys.len()).map(
            |index| (
                keys.get(index).unwrap(), 
                self.houses.get(&keys.get(index).unwrap()).unwrap_or(String::from("")))
        ).collect::<HashMap<_,_>>()
    }

    fn get_hrw_info(&self, index: u64) -> HumanReadableWinnerInfo {
        let info = self.win_history.get(index).expect("Error: no this item in winner history!");
        HumanReadableWinnerInfo {
            user: info.user.clone(),
            round: info.round.into(),
            amount: info.amount.into(),
            lucky_number: info.lucky_number,
            height: info.height.into(),
            ts: info.ts.into(),
        }
    }

    /// Returns the list of winner info in LIFO order
    pub fn get_win_history(&self, from_index: u64, limit: u64) -> Vec<HumanReadableWinnerInfo> {
        let counts: u64 = self.win_history.len() as u64;
        (from_index..std::cmp::min(from_index + limit, counts))
            .map(|index| self.get_hrw_info(counts - index - 1))  // reverse to get LIFO order
            .collect()
    }

    pub fn get_contract_info(&self) -> HumanReadableContractInfo {
        HumanReadableContractInfo {
            owner: self.owner_id.clone(),
            jack_pod: self.jack_pod.into(),
            house_count: self.house_count,
            play_fee: self.play_fee.into(),
            current_round: self.current_round.into(),
        }
    }

}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 *
 * To run from contract directory:
 * cargo test -- --nocapture
 *
 * From project root, to run in combination with frontend tests:
 * yarn test
 *
 */
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    // mock the context for testing, notice "signer_account_id" that was accessed above from env::
    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice_near".to_string(),
            signer_account_id: "bob_near".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "carol_near".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    #[test]
    fn set_then_get_greeting() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Contract::default();
    }

    #[test]
    fn get_default_greeting() {
        let context = get_context(vec![], true);
        testing_env!(context);
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default "Hello" greeting
    }
}

'''
'''--- contracts/games/luckybox/Cargo.toml ---
[package]
name = "gl_luckybox"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "2.0.0"
uint = { version = "0.8.3", default-features = false }

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contracts/games/luckybox/README.md ---
GameLand Game Smart Contract
==================

Game Lucky Box.

Play with this contract
========================
the contract is deployed at testnet with the name `luckybox.testnet`

you can set it to env for later use:
```shell
export GAMEID=luckybox.testnet
```

## Look around
```shell
# return info
near view $GAMEID get_contract_info ''
# return current round game info
near view $GAMEID get_box_info ''
# return win history list
near view $GAMEID get_win_history '{"from_index": 0, "limit": 100}'
# return metadata
near view $GAMEID gl_metadata ''
near view $GAMEID gl_pub_state ''
near view $GAMEID gl_user_state '{"user_id": "rb01.testnet"}'
```
## Let's play
```shell
# see how many playtoken we have
near view playtoken.testnet ft_balance_of '{"account_id": "rb01.testnet"}'
# purchase some if neccessary
near call gameland.testnet buy_playtoken '' --account_id=rb01.testnet --amount=6
# play the game
near call angleland.testnet gl_play '{"amount": "1000000000000000000000000", "op": "1"}' --account_id=rb01.testnet --gas=50000000000000

```

Build Deploy and Init
======================

Before you compile this code, you will need to install Rust with [correct target]

```shell
# building it
srouce ./build.sh
```

```shell
near deploy $GAMEID res/gl_landlord.wasm --account_id=$GAMEID
near call $GAMEID new '{"owner_id": "humeng.testnet", "house_count": 36, "play_fee": "1000000000000000000000000"}' --account_id=$GAMEID

### register this game
near call gameland.testnet register_shop '{"reg_form": {"flag": 1, "shop_id": "luckybox.testnet", "owner_id": "humeng.testnet", "refs": "https://github.com/marco-sundsk/gameland/", "height": "0", "ts": "0", "status": 0}}' --account_id=humeng.testnet
near view gameland.testnet list_registers '{"from_index": 0, "limit": 100}'
near call gameland.testnet resovle_register '{"shop_id": "lucky.testnet", "pass": true, "new_status": 2}' --account_id=humeng.testnet --gas=20000000000000

### sponsor this game with 5 tokens
near call $GAMEID gl_sponsor '{"amount": "5000000000000000000000000"}' --account_id=humeng.testnet --gas=30000000000000
```

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/roles/developer/contracts/intro
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contracts/games/luckybox/build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/gl_luckybox.wasm ./res/

'''
'''--- contracts/games/luckybox/src/gl_core.rs ---
use crate::*;
use near_sdk::{ext_contract, Gas, PromiseOrValue};

const TOKEN_CONTRACT: &str = "playtoken.testnet";

const GAS_FOR_BASIC: Gas = 20_000_000_000_000;

const NO_DEPOSIT: Balance = 0;

pub trait GameLandCore {

    /// signer is the sponsor,
    /// predecessor could be gameland or sponsor himself,
    fn gl_sponsor(&mut self, amount: U128) -> Promise;

    /// token contract invoke this method, 
    /// to indicate that the amount of token 
    /// has successfully deposit to the shop.
    fn gl_on_sponsor(&mut self, amount: U128) -> String;

    /// signer is the player,
    /// predecessor could be gameland or player himself,
    fn gl_play(&mut self, amount: U128, op: String) -> PromiseOrValue<String>;

    /// token contract invoke this method, 
    /// to indicate that the net_amount of token 
    /// has successfully deposit to the shop.
    fn gl_on_play(&mut self, gross_amount: U128, net_amount: U128, op: String) -> String;

    /// signer is the trigger,
    /// predecessor could be gameland or trigger himself,
    /// return a json-str as result
    fn gl_settle(&mut self, op: String) -> String;
}

#[ext_contract(ext_play_token)]
trait PlayToken {
    fn sponsor_shop(&mut self, amount: U128) -> Promise;
    fn insert_coin(&mut self, amount: U128, op: String) -> Promise;
    /// call this to distribute reward to receiver
    fn reward_coin(&mut self, receiver_id: AccountId, amount: U128);
    fn reward_coin_multiple(&mut self, receivers: HashMap<AccountId, U128>);
}

#[near_bindgen]
impl GameLandCore for Contract {

    fn gl_sponsor(&mut self, amount: U128) -> Promise {
        env::log(format!("game::gl_sponsor from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        ext_play_token::sponsor_shop(
            amount,
            &String::from(TOKEN_CONTRACT),
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_BASIC,
        )
    }

    fn gl_on_sponsor(&mut self, amount: U128) -> String {
        env::log(format!("game::gl_on_sponsor from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        let amount: u128 = amount.into();
        let sponsor = env::signer_account_id();
        self.total_jackpot += amount;
        format!("{} sponsored {}, jackpod increase to {}, ", sponsor, amount, self.total_jackpot)
    }

    fn gl_play(&mut self, amount: U128, op: String) -> PromiseOrValue<String> {
        env::log(format!("game::gl_play from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());

        let amount: u128 = amount.into();
        if amount < self.play_fee {
            return PromiseOrValue::Value(String::from("Insufficient coin inserted."));
        }

        // see if user choose valid box
        let guess: u8 = op.parse::<u8>().unwrap_or(0);
        if guess == 0 || guess > self.box_count {
            return PromiseOrValue::Value(String::from("Invalid box id."));
        } 

        // see if this round ended already
        let (round_end, winners) = self.internal_settle(); 
        if round_end {
            // Distribute reward to each one in winners,
            // should use batch_rewards interface of token contract
            let receivers: HashMap<AccountId, U128> = winners.keys().map(
                |key| (key.clone(), winners.get(key).unwrap().clone().into())
            ).collect::<HashMap<_,_>>();
            ext_play_token::reward_coin_multiple(
                receivers,
                &String::from(TOKEN_CONTRACT),
                NO_DEPOSIT,
                env::prepaid_gas() - GAS_FOR_BASIC,
            );

            return PromiseOrValue::Value(String::from("Round end."));
 
        }

        ext_play_token::insert_coin(
            amount.into(),
            op,
            &String::from(TOKEN_CONTRACT),
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_BASIC,
        ).into()
    }

    fn gl_on_play(&mut self, gross_amount: U128, net_amount: U128, op: String) -> String {
        env::log(format!("game::gl_on_play from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        
        let player = env::signer_account_id();
        let box_id = op.parse::<u8>().unwrap_or(0);
        let gross_amount: u128 = gross_amount.into();
        let net_amount: u128 = net_amount.into();
        
        let result = self.internal_play(&player, gross_amount, net_amount, box_id);

        near_sdk::serde_json::to_string(&result).unwrap()

    }

    fn gl_settle(&mut self, op: String) -> String {
        let (round_end, winners) = self.internal_settle(); 
        if round_end {
            // Distribute reward to each one in winners,
            // should use batch_rewards interface of token contract
            let receivers: HashMap<AccountId, U128> = winners.keys().map(
                |key| (key.clone(), winners.get(key).unwrap().clone().into())
            ).collect::<HashMap<_,_>>();
            ext_play_token::reward_coin_multiple(
                receivers,
                &String::from(TOKEN_CONTRACT),
                NO_DEPOSIT,
                env::prepaid_gas() - GAS_FOR_BASIC,
            );
            format!("round end. op is {}", op)
        } else {
            format!("Still in round. op is {}", op)
        }
        
    }

}
'''
'''--- contracts/games/luckybox/src/gl_metadata.rs ---
use super::*;
use near_sdk::serde::Serialize;

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct GameMetadata {
    version: String,
    name: String,
    logo_url: String,
    thumb_url: String,
    description: String,
}

pub trait GameMetadataProvider {
    fn gl_metadata() -> GameMetadata;
    fn gl_pub_state(&self) -> String;
    fn gl_user_state(&self, user_id: ValidAccountId) -> String;
}

#[near_bindgen]
impl GameMetadataProvider for Contract {
    fn gl_metadata() -> GameMetadata {
        GameMetadata {
            version: String::from("0.1.1"),
            name: String::from("Lucky Box"),
            logo_url: String::from("https://github.com/"),
            thumb_url: String::from("https://github.com/"),
            description: String::from("Choose the lightest box to bet"),
        }
    }

    fn gl_pub_state(&self) -> String {
        format!("Round {}:, Current total jackpot has {} GPT(s).", 
            self.current_round, self.total_jackpot/1000000000000000000000000)
    }

    fn gl_user_state(&self, user_id: ValidAccountId) -> String {
        let user: AccountId = user_id.into();
        format!("Welcome {}", user)
    }

}

'''
'''--- contracts/games/luckybox/src/internal.rs ---
use crate::*;

// pub(crate) fn assert_self() {
//     assert_eq!(
//         env::predecessor_account_id(),
//         env::current_account_id(),
//         "Method is private"
//     );
// }

impl Contract {
    /// found the box with minimum total_amount
    pub(crate) fn internal_get_winbox(&self) -> Option<BoxInfo> {
        let min_id = self.boxes.values().fold(0_u8, |id, box_info| {
            if id == 0 || box_info.total_amount < self.boxes.get(&id).unwrap().total_amount {
                box_info.box_id
            } else {
                id
            }
        });
        self.boxes.get(&min_id)
    }

    /// see if current round is ended, and return the winners info as a HashMap
    pub(crate) fn internal_settle(&mut self) -> (bool, HashMap<AccountId, Balance>) {
        if self.current_round_start_height > 0 {
            // current round has started, need settle
            // with a 0 - 255 randomness
            let random_u8: u8 = env::random_seed().iter().fold(0_u8, |acc, x| acc.wrapping_add(*x));
            let cur_height = env::block_index();
            let end_height = self.current_round_start_height + self.per_round_last as u64 + random_u8 as u64;
            if cur_height >= end_height {
                // record win history
                let total_reward = self.total_jackpot / 2;
                let lucky_box = self.boxes.get(&(self.current_min_box_id)).unwrap();
                let winners = lucky_box.investors.keys().map(
                    |key| {
                        let winner = key.clone();
                        let winner_share = lucky_box.investors.get(key).unwrap();
                        let winner_reward = U256::from(total_reward) * U256::from(*winner_share) / U256::from(lucky_box.total_amount);
                        (winner, winner_reward.as_u128())
                    }
                ).collect::<HashMap<AccountId, Balance>>();
                let win_his = WinnerInfo {
                    round: self.current_round,
                    total_reward,
                    winners: winners.clone(),
                    height: env::block_index(),

                    ts: env::block_timestamp(),  
                };
                self.win_history.push(&win_his);

                // reset status
                self.total_jackpot -= total_reward;
                self.current_round += 1;
                self.current_round_start_height = 0;
                self.current_round_start_ts = 0;
                self.boxes.clear();
                self.current_min_box_id = 1;
                // return value
                return (true, winners);
            }
        }
        (false, HashMap::new())
    }

    pub(crate) fn internal_play(&mut self, account_id: &AccountId, gross_amount: u128, net_amount: u128, box_id: u8) -> HumanReadablePlayResult {
        
        self.total_jackpot += net_amount;
        let mut result = HumanReadablePlayResult {
            user: account_id.clone(),
            round: self.current_round.into(),
            box_id,
            box_amount: gross_amount.into(),  
            total_jackpot: self.total_jackpot.into(), 
            height: env::block_index().into(),
            ts: env::block_timestamp().into(),
        };

        if let Some(mut box_info) = self.boxes.get(&box_id) {
            box_info.height = env::block_index();
            box_info.ts = env::block_timestamp();
            box_info.total_amount += gross_amount;
            let amount = box_info.investors.get_mut(account_id).unwrap_or(&mut 0_u128).clone();
            result.box_amount = (amount + gross_amount).into();
            box_info.investors.insert(account_id.clone(), amount + gross_amount);
            // save back to storage
            self.boxes.insert(&box_id, &box_info);
        } else {
            let mut investors: HashMap<AccountId, Balance> = HashMap::new();
            investors.insert(account_id.clone(), gross_amount);
            let new_box = BoxInfo {
                box_id,
                total_amount: gross_amount,
                investors,
                height: env::block_index(),
                ts: env::block_timestamp(),
            };
            // save back to storage
            self.boxes.insert(&box_id, &new_box);
        }

        // see if it triggers a round start
        if self.current_round_start_height == 0 {
            self.current_round_start_height = env::block_index();
            self.current_round_start_ts = env::block_timestamp();
            self.current_min_box_id = box_id;
        } else {
            self.current_min_box_id = self.internal_get_winbox().unwrap().box_id;
        }

        result
    }

}

'''
'''--- contracts/games/luckybox/src/lib.rs ---
/*
 * This is GameLand_Luckybox contract:
 * 
 * 
 *
 */
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::wee_alloc;
use near_sdk::json_types::{U64, U128, ValidAccountId};
use near_sdk::serde::{Serialize};
use near_sdk::{env, near_bindgen, AccountId, Balance, BlockHeight, Promise};
use near_sdk::collections::{Vector, UnorderedMap};
use std::collections::HashMap;
use uint::construct_uint;

pub use crate::gl_metadata::*;
pub use crate::gl_core::*;
// use crate::internal::*;

mod gl_metadata;
mod gl_core;
mod internal;

construct_uint! {
    /// 256-bit unsigned integer.
    pub struct U256(4);
}

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

#[derive(BorshDeserialize, BorshSerialize)]
pub struct BoxInfo {
    pub box_id: u8,
    pub investors: HashMap<AccountId, Balance>,
    pub total_amount: Balance,
    // start height and time of this round
    pub height: BlockHeight,
    pub ts: u64,
}

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableBoxInfo {
    pub box_id: u8,
    pub investors: HashMap<String, U128>,
    pub total_amount: U128,
    pub height: U64,
    pub ts: U64,
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct WinnerInfo {
    pub round: u128,
    pub total_reward: Balance, 
    pub winners: HashMap<AccountId, Balance>,  // winner->reward
    // settle height and time of this round
    pub height: BlockHeight,
    pub ts: u64,
}

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableWinnerInfo {
    pub round: U128,
    pub total_reward: U128,
    pub winners: HashMap<String, U128>,
    pub height: U64,
    pub ts: U64,
}

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableContractInfo {
    pub owner: AccountId,
    pub total_jackpot: U128,
    pub box_count: u8,
    pub play_fee: U128,
    pub current_round: U128,
    pub round_start_height: U64,
    pub round_start_ts: U64,
    pub round_period: u32,
    pub cur_win_box: u8,
}

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadablePlayResult {
    pub user: AccountId,
    pub round: U128,
    pub box_id: u8,
    pub box_amount: U128,
    pub total_jackpot: U128,
    pub height: U64,
    pub ts: U64,
}

// Structs in Rust are similar to other languages, and may include impl keyword as shown below
// Note: the names of the structs are not important when calling the smart contract, but the function names are
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    // params
    pub owner_id: AccountId,
    pub box_count: u8,
    pub per_round_last: u32,
    pub play_fee: Balance,  // the minimum token needed to play once.
    // status
    pub total_jackpot: Balance,  // totoal jackpot
    pub boxes: UnorderedMap<u8, BoxInfo>,
    pub win_history: Vector<WinnerInfo>,
    pub current_round: u128,
    pub current_min_box_id: u8,
    // the real endtime is start_height + per_round_last + random
    pub current_round_start_height: BlockHeight,
    pub current_round_start_ts: u64,
    
}

impl Default for Contract {
    fn default() -> Self {
        env::panic(b"this contract should be initialized before using")
    }
}

#[near_bindgen]
impl Contract {

    #[init]
    pub fn new(
        owner_id: AccountId,
        box_count: u8,
        per_round_last: u32,
        play_fee: U128,
    ) -> Self {
        assert!(!env::state_exists(), "Already initialized");
        assert!(
            env::is_valid_account_id(owner_id.as_bytes()),
            "The owner account ID is invalid"
        );
        
        Self {
            owner_id,
            box_count,
            per_round_last,
            play_fee: play_fee.into(),
            total_jackpot: 0_u128,
            boxes: UnorderedMap::new(b"b".to_vec()),
            win_history: Vector::new(b"w".to_vec()),
            current_round: 0,
            current_min_box_id: 0,
            current_round_start_height: 0,
            current_round_start_ts: 0,
        }
    }

    //***********************/
    // owner functions
    //***********************/

    fn assert_owner(&self) {
        assert_eq!(
            env::predecessor_account_id(),
            self.owner_id,
            "Can only be called by the owner"
        );
    }
    
    pub fn update_box_count(&mut self, box_count: u8) {
        self.assert_owner();
        if self.current_round_start_height == 0 {
            self.box_count = box_count;
        } else {
            env::panic(b"box count can only be updated between rounds.")
        }
    }

    pub fn update_play_fee(&mut self, play_fee: U128) {
        self.assert_owner();
        self.play_fee = play_fee.into();
    }

    //***********************/
    // view functions
    //***********************/

    fn get_box_info(&self, box_id: u8) -> HumanReadableBoxInfo {
        if let Some(the_box) = self.boxes.get(&box_id) {
            HumanReadableBoxInfo {
                box_id: the_box.box_id,
                investors: {
                    the_box.investors.keys().map(
                        |key| ( 
                            key.clone(), 
                            the_box.investors.get(key).unwrap().clone().into()
                        )
                    ).collect::<HashMap<_,_>>()
                },
                total_amount: the_box.total_amount.into(),
                height: the_box.height.into(),
                ts: the_box.ts.into(),
            }
        } else {
            HumanReadableBoxInfo {
                box_id,
                investors: HashMap::new(),
                total_amount: 0.into(),
                height: 0.into(),
                ts: 0.into(),
            }
        }
    } 
    /// get all occupied houses info
    pub fn get_boxes_info(&self) -> HashMap<u8, HumanReadableBoxInfo> {
        let keys = self.boxes.keys_as_vector();

        (0..keys.len()).map(
            |index| (
                keys.get(index).unwrap(), 
                self.get_box_info(keys.get(index).unwrap()))
        ).collect::<HashMap<_,_>>()
    }

    fn get_hrw_info(&self, index: u64) -> HumanReadableWinnerInfo {
        let info = self.win_history.get(index).expect("Error: no this item in winner history!");
        HumanReadableWinnerInfo {
            round: info.round.into(),
            total_reward: info.total_reward.into(),
            winners: {
                info.winners.keys().map(
                        |key| ( 
                            key.clone(), 
                            info.winners.get(key).unwrap().clone().into()
                        )
                    ).collect::<HashMap<_,_>>()
            },
            height: info.height.into(),
            ts: info.ts.into(),
        }
    }

    /// Returns the list of winner info in LIFO order
    pub fn get_win_history(&self, from_index: u64, limit: u64) -> Vec<HumanReadableWinnerInfo> {
        let counts: u64 = self.win_history.len() as u64;
        (from_index..std::cmp::min(from_index + limit, counts))
            .map(|index| self.get_hrw_info(counts - index - 1))  // reverse to get LIFO order
            .collect()
    }

    pub fn get_contract_info(&self) -> HumanReadableContractInfo {
        HumanReadableContractInfo {
            owner: self.owner_id.clone(),
            total_jackpot: self.total_jackpot.into(),
            box_count: self.box_count,
            play_fee: self.play_fee.into(),
            current_round: self.current_round.into(),
            round_start_height: self.current_round_start_height.into(),
            round_start_ts: self.current_round_start_ts.into(),
            round_period: self.per_round_last,
            cur_win_box: self.current_min_box_id,
        }
    }

}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 *
 * To run from contract directory:
 * cargo test -- --nocapture
 *
 * From project root, to run in combination with frontend tests:
 * yarn test
 *
 */
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    // mock the context for testing, notice "signer_account_id" that was accessed above from env::
    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice_near".to_string(),
            signer_account_id: "bob_near".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "carol_near".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    #[test]
    fn set_then_get_greeting() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Contract::default();
    }

    #[test]
    fn get_default_greeting() {
        let context = get_context(vec![], true);
        testing_env!(context);
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default "Hello" greeting
    }
}

'''
'''--- contracts/token/Cargo.toml ---
[package]
name = "play_token"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "2.0.0"
uint = { version = "0.8.3", default-features = false }

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contracts/token/README.md ---
Play Token Contract
==================

A token contract for gameland platform.

Play with this contract
========================
the contract is deployed at testnet with the name `playtoken.testnet`

you can set it to env for later use:
```shell
export GAMECOINID=playtoken.testnet
```

## Look around
```shell
# return info
near view $GAMECOINID get_contract_info ''

```
## Let's play
```shell

```

Build Deploy and Init
======================

Before you compile this code, you will need to install Rust with [correct target]

```shell
# building it
srouce ./build.sh
```

```shell
# deploy and init it
near deploy $GAMECOINID res/play_token.wasm --account_id=$GAMECOINID
near call $GAMECOINID new '{"owner_id": "humeng.testnet", "sudoer_id": "gameland.testnet"}' --account_id=$GAMECOINID

# adjust fee
near call $GAMECOINID update_fee_ratio '{"category": "shop_fee_play", "ratio": {"numerator": 0, "denominator": 1000}}' --account_id=humeng.testnet

near call $GAMECOINID update_fee_ratio \
  '{"category": "sudoer_fee_play", 
  "ratio": {"numerator": 0, "denominator": 1000}}' \
  --account_id=humeng.testnet

```

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/roles/developer/contracts/intro
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contracts/token/build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/play_token.wasm ./res/

'''
'''--- contracts/token/src/fungible_token_core.rs ---
use crate::*;
use near_sdk::json_types::ValidAccountId;
use near_sdk::{ext_contract, Gas, PromiseResult};

const GAS_FOR_RESOLVE_TRANSFER: Gas = 5_000_000_000_000;
const GAS_FOR_FT_TRANSFER_CALL: Gas = 25_000_000_000_000 + GAS_FOR_RESOLVE_TRANSFER;

const NO_DEPOSIT: Balance = 0;

pub trait FungibleTokenCore {
    /// Transfers positive `amount` of tokens from the `env::predecessor_account_id` to `receiver_id`.
    /// Both accounts must be registered with the contract for transfer to succeed. (See [NEP-145](https://github.com/near/NEPs/discussions/145))
    /// This method must to be able to accept attached deposits, and must not panic on attached deposit.
    /// Exactly 1 yoctoNEAR must be attached.
    /// See [the Security section](https://github.com/near/NEPs/issues/141#user-content-security) of the standard.
    ///
    /// Arguments:
    /// - `receiver_id` - the account ID of the receiver.
    /// - `amount` - the amount of tokens to transfer. Must be a positive number in decimal string representation.
    /// - `memo` - an optional string field in a free form to associate a memo with this transfer.
    fn ft_transfer(&mut self, receiver_id: ValidAccountId, amount: U128, memo: Option<String>);

    /// Transfers positive `amount` of tokens from the `env::predecessor_account_id` to `receiver_id` account. Then
    /// calls `ft_on_transfer` method on `receiver_id` contract and attaches a callback to resolve this transfer.
    /// `ft_on_transfer` method must return the amount of tokens unused by the receiver contract, the remaining tokens
    /// must be refunded to the `predecessor_account_id` at the resolve transfer callback.
    ///
    /// Token contract must pass all the remaining unused gas to the `ft_on_transfer` call.
    ///
    /// Malicious or invalid behavior by the receiver's contract:
    /// - If the receiver contract promise fails or returns invalid value, the full transfer amount must be refunded.
    /// - If the receiver contract overspent the tokens, and the `receiver_id` balance is lower than the required refund
    /// amount, the remaining balance must be refunded. See [the Security section](https://github.com/near/NEPs/issues/141#user-content-security) of the standard.
    ///
    /// Both accounts must be registered with the contract for transfer to succeed. (See #145)
    /// This method must to be able to accept attached deposits, and must not panic on attached deposit. Exactly 1 yoctoNEAR must be attached. See [the Security
    /// section](https://github.com/near/NEPs/issues/141#user-content-security) of the standard.
    ///
    /// Arguments:
    /// - `receiver_id` - the account ID of the receiver contract. This contract will be called.
    /// - `amount` - the amount of tokens to transfer. Must be a positive number in a decimal string representation.
    /// - `msg` - a string message that will be passed to `ft_on_transfer` contract call.
    /// - `memo` - an optional string field in a free form to associate a memo with this transfer.
    ///
    /// Returns a promise which will result in the amount of tokens withdrawn from sender's account.
    fn ft_transfer_call(
        &mut self,
        receiver_id: ValidAccountId,
        amount: U128,
        msg: String,
        memo: Option<String>,
    ) -> Promise;

    /// Returns the total supply of the token in a decimal string representation.
    fn ft_total_supply(&self) -> U128;

    /// Returns the balance of the account. If the account doesn't exist must returns `"0"`.
    fn ft_balance_of(&self, account_id: ValidAccountId) -> U128;
}

#[ext_contract(ext_fungible_token_receiver)]
trait FungibleTokenReceiver {
    /// Called by fungible token contract after `ft_transfer_call` was initiated by
    /// `sender_id` of the given `amount` with the transfer message given in `msg` field.
    /// The `amount` of tokens were already transferred to this contract account and ready to be used.
    ///
    /// The method must return the amount of tokens that are *not* used/accepted by this contract from the transferred
    /// amount. Examples:
    /// - The transferred amount was `500`, the contract completely takes it and must return `0`.
    /// - The transferred amount was `500`, but this transfer call only needs `450` for the action passed in the `msg`
    ///   field, then the method must return `50`.
    /// - The transferred amount was `500`, but the action in `msg` field has expired and the transfer must be
    ///   cancelled. The method must return `500` or panic.
    ///
    /// Arguments:
    /// - `sender_id` - the account ID that initiated the transfer.
    /// - `amount` - the amount of tokens that were transferred to this account in a decimal string representation.
    /// - `msg` - a string message that was passed with this transfer call.
    ///
    /// Returns the amount of unused tokens that should be returned to sender, in a decimal string representation.
    fn ft_on_transfer(&mut self, sender_id: AccountId, amount: U128, msg: String) -> Promise;
}

#[ext_contract(ext_self)]
trait FungibleTokenResolver {
    fn ft_resolve_transfer(
        &mut self,
        sender_id: AccountId,
        receiver_id: AccountId,
        amount: U128,
    ) -> U128;
}

trait FungibleTokenResolver {
    fn ft_resolve_transfer(
        &mut self,
        sender_id: AccountId,
        receiver_id: AccountId,
        amount: U128,
    ) -> U128;
}

#[near_bindgen]
impl FungibleTokenCore for Contract {
    // #[payable]
    fn ft_transfer(&mut self, receiver_id: ValidAccountId, amount: U128, memo: Option<String>) {
        // assert_one_yocto();
        let sender_id = env::predecessor_account_id();
        assert!(!self.is_shop(&sender_id), "Sender can NOT be a shop.");
        assert!(!self.is_shop(receiver_id.as_ref()), "Receiver can NOT be a shop.");
        let amount = amount.into();
        self.internal_transfer(&sender_id, receiver_id.as_ref(), amount, memo);
    }

    // #[payable]
    fn ft_transfer_call(
        &mut self,
        receiver_id: ValidAccountId,
        amount: U128,
        msg: String,
        memo: Option<String>,
    ) -> Promise {
        // assert_one_yocto();
        let sender_id = env::predecessor_account_id();
        assert!(!self.is_shop(&sender_id), "Sender can NOT be a shop.");
        assert!(!self.is_shop(receiver_id.as_ref()), "Receiver can NOT be a shop.");
        let amount = amount.into();
        self.internal_transfer(&sender_id, receiver_id.as_ref(), amount, memo);
        // Initiating receiver's call and the callback
        ext_fungible_token_receiver::ft_on_transfer(
            sender_id.clone(),
            amount.into(),
            msg,
            receiver_id.as_ref(),
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_FT_TRANSFER_CALL,
        )
        .then(ext_self::ft_resolve_transfer(
            sender_id,
            receiver_id.into(),
            amount.into(),
            &env::current_account_id(),
            NO_DEPOSIT,
            GAS_FOR_RESOLVE_TRANSFER,
        ))
    }

    fn ft_total_supply(&self) -> U128 {
        self.total_supply.into()
    }

    fn ft_balance_of(&self, account_id: ValidAccountId) -> U128 {
        self.accounts.get(account_id.as_ref()).unwrap_or(0).into()
    }
}

#[near_bindgen]
impl FungibleTokenResolver for Contract {
    fn ft_resolve_transfer(
        &mut self,
        sender_id: AccountId,
        receiver_id: AccountId,
        amount: U128,
    ) -> U128 {
        assert_self();
        let amount: Balance = amount.into();

        // Get the unused amount from the `ft_on_transfer` call result.
        let unused_amount = match env::promise_result(0) {
            PromiseResult::NotReady => unreachable!(),
            PromiseResult::Successful(value) => {
                if let Ok(unused_amount) = near_sdk::serde_json::from_slice::<U128>(&value) {
                    std::cmp::min(amount, unused_amount.0)
                } else {
                    amount
                }
            }
            PromiseResult::Failed => amount,
        };

        if unused_amount > 0 {
            let receiver_balance = self.accounts.get(&receiver_id).unwrap_or(0);
            if receiver_balance > 0 {
                let refund_amount = std::cmp::min(receiver_balance, unused_amount);
                self.accounts
                    .insert(&receiver_id, &(receiver_balance - refund_amount));

                if let Some(sender_balance) = self.accounts.get(&sender_id) {
                    self.accounts
                        .insert(&sender_id, &(sender_balance + refund_amount));
                    env::log(
                        format!(
                            "Refund {} from {} to {}",
                            refund_amount, receiver_id, sender_id
                        )
                        .as_bytes(),
                    );
                    return (amount - refund_amount).into();
                } else {
                    // Sender's account was deleted, so we need to burn tokens.
                    self.total_supply -= refund_amount;
                    env::log(b"The account of the sender was deleted");
                    env::log(format!("Burn {}", refund_amount).as_bytes());
                }
            }
        }
        amount.into()
    }
}

'''
'''--- contracts/token/src/fungible_token_metadata.rs ---
use super::*;
use near_sdk::serde::Serialize;

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct FungibleTokenMetadata {
    version: String,
    name: String,
    symbol: String,
    reference: String,
    decimals: u8,
}

pub trait FungibleTokenMetadataProvider {
    fn ft_metadata() -> FungibleTokenMetadata;
}

#[near_bindgen]
impl FungibleTokenMetadataProvider for Contract {
    fn ft_metadata() -> FungibleTokenMetadata {
        FungibleTokenMetadata {
            version: String::from("0.1.0"),
            name: String::from("Buildlinks Play Token"),
            symbol: String::from("BPT"),
            reference: String::from(
                "https://github.com/marco-sundsk/gameland/blob/main/contracts/token/",
            ),
            decimals: 24,
        }
    }
}

'''
'''--- contracts/token/src/internal.rs ---
use crate::*;

const ACCOUNT_KEEPALIVE_BALANCE: Balance = 1_000_000_000_000_000_000_000;

pub(crate) fn assert_one_yocto() {
    assert_eq!(
        env::attached_deposit(),
        1,
        "Requires attached deposit of exactly 1 yoctoNEAR"
    )
}

pub(crate) fn assert_self() {
    assert_eq!(
        env::predecessor_account_id(),
        env::current_account_id(),
        "Method is private"
    );
}

impl Contract {
    pub(crate) fn internal_deposit(&mut self, account_id: &AccountId, amount: Balance) {
        self.try_register_user(account_id);
        let balance = self
            .accounts
            .get(&account_id)
            .expect("Internal Error! The account is not registered");
        if let Some(new_balance) = balance.checked_add(amount) {
            self.accounts.insert(&account_id, &new_balance);
        } else {
            env::panic(b"Balance overflow");
        }
    }

    pub(crate) fn internal_withdraw(&mut self, account_id: &AccountId, amount: Balance) {
        let balance = self
            .accounts
            .get(&account_id)
            .expect("The account is not registered");
        if let Some(new_balance) = balance.checked_sub(amount) {
            self.accounts.insert(&account_id, &new_balance);
            self.try_unregister_user(account_id);
        } else {
            env::panic(b"The account doesn't have enough balance");
        }
    }

    pub(crate) fn internal_transfer(
        &mut self,
        sender_id: &AccountId,
        receiver_id: &AccountId,
        amount: Balance,
        memo: Option<String>,
    ) {
        assert_ne!(
            sender_id, receiver_id,
            "Sender and receiver should be different"
        );
        assert!(amount > 0, "The amount should be a positive number");
        self.internal_withdraw(sender_id, amount);
        self.internal_deposit(receiver_id, amount);
        env::log(format!("Transfer {} from {} to {}", amount, sender_id, receiver_id).as_bytes());
        if let Some(memo) = memo {
            env::log(format!("Memo: {}", memo).as_bytes());
        }
    }

    pub(crate) fn internal_batch_transfer(
        &mut self,
        sender_id: &AccountId,
        receivers: &HashMap<AccountId, Balance>,
        memo: Option<String>,
    ) {
        let mut total_transfered: u128 = 0;
        let mut receiver_count: u32 = 0;
        for (receiver_id, amount) in receivers {
            assert!(amount > &0, "The amount should be a positive number");
            if sender_id != receiver_id {
                self.internal_deposit(receiver_id, *amount);
                receiver_count += 1;
                total_transfered += *amount;
            }
        }
        self.internal_withdraw(sender_id, total_transfered);
        
        env::log(format!("Bactch Transfer {} from {} to {} receivers.", total_transfered, sender_id, receiver_count).as_bytes());
        if let Some(memo) = memo {
            env::log(format!("Memo: {}", memo).as_bytes());
        }
    }

    fn try_register_user(&mut self, user: &AccountId) {
        if !self.accounts.contains_key(user) {
            self.accounts.insert(user, &0);
            self.account_num += 1;
        }
    }

    fn try_unregister_user(&mut self, user: &AccountId) {
        if let Some(balance) = self.accounts.get(user) {
            if balance < ACCOUNT_KEEPALIVE_BALANCE {
                self.accounts.remove(user);
                self.account_num -= 1;
                self.total_supply -= balance;
            }
        }
    }

    pub(crate) fn assert_owner(&self) {
        assert_eq!(
            env::predecessor_account_id(),
            self.owner_id,
            "Can only be called by the owner"
        );
    }

    pub(crate) fn assert_sudoer(&self) {
        assert_eq!(
            env::predecessor_account_id(),
            self.sudoer_id,
            "Can only be called by the owner"
        );
    }

    pub(crate) fn assert_sudoers(&self) {
        if env::predecessor_account_id() != self.owner_id 
        && env::predecessor_account_id() != self.sudoer_id {
            env::panic(b"only sudoers are allowed!");
        }
    }

    pub(crate) fn is_shop(&self, account_id: &AccountId) -> bool {
        self.shops.contains_key(account_id)
    }
}

'''
'''--- contracts/token/src/lib.rs ---
/**
* PlayToken contract abey NEP-141
*
* The aim of the contract is to enable an NEP-141 standard play token for gameland platform.
* It supports methods `mint` and `burn` that mint and burn this token from and to NEAR.
* The prices of mint and burn are different, so gameland got its profits.
*
* lib.rs is the main entry point.
* fungible_token_core.rs implements NEP-146 standard
* storage_manager.rs implements NEP-145 standard for allocating storage per account
* fungible_token_metadata.rs implements NEP-148 standard for providing token-specific metadata.
* play_token.rs contains interfaces for depositing and withdrawing
* internal.rs contains internal methods for fungible token.
*/
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::LookupMap;
use near_sdk::json_types::{U128, U64};
use near_sdk::{env, near_bindgen, AccountId, Balance, Promise};
use near_sdk::serde::{Deserialize, Serialize};
use uint::construct_uint;
use std::collections::HashMap;

pub use crate::fungible_token_core::*;
pub use crate::fungible_token_metadata::*;
use crate::internal::*;
pub use crate::play_token::*;

mod fungible_token_core;
mod fungible_token_metadata;
mod internal;
mod play_token;

construct_uint! {
    /// 256-bit unsigned integer.
    pub struct U256(4);
}

const PRICE_DEMONINATOR: u16 = 1000;

#[global_allocator]
static ALLOC: near_sdk::wee_alloc::WeeAlloc<'_> = near_sdk::wee_alloc::WeeAlloc::INIT;

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableContractInfo {
    pub owner: AccountId,
    pub sudoer: AccountId,
    pub total_supply: U128,
    pub total_collateral: U128,
    pub account_num: U64,
    pub shop_num: U64,
    pub sudoer_profit: U128,
    pub sudoer_fee_play: FeeFraction,
    pub sudoer_fee_win: FeeFraction,
    pub shop_fee_play: FeeFraction,
    pub shop_fee_win: FeeFraction,
    pub mint_price: u16,
    pub burn_ratio: FeeFraction,
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct FeeFraction {
    pub numerator: u32,
    pub denominator: u32,
}

impl FeeFraction {
    pub fn assert_valid(&self) {
        assert_ne!(self.denominator, 0, "Denominator must be a positive number");
        assert!(
            self.numerator <= self.denominator,
            "The reward fee must be less or equal to 1"
        );
    }

    pub fn multiply(&self, value: Balance) -> Balance {
        (U256::from(self.numerator) * U256::from(value) / U256::from(self.denominator)).as_u128()
    }
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    /// AccountID -> Account balance.
    pub accounts: LookupMap<AccountId, Balance>,
    pub account_num: u64,

    /// Total supply of the all token.
    pub total_supply: Balance,

    ////////////////////below is special///////////////////////////////
    
    /// owner of this token
    pub owner_id: AccountId,
    /// sudoer is gameland contract
    pub sudoer_id: AccountId,

    pub sudoer_profit: Balance,

    /// NEAR that used to mint token
    pub total_collateral: Balance,

    /// all tip ratios
    pub owner_ratio_for_play: FeeFraction,
    pub game_ratio_for_play: FeeFraction,
    pub owner_ratio_for_win: FeeFraction,
    pub game_ratio_for_win: FeeFraction,

    /// price with 1000 as common denominator
    pub mint_price: u16,
    pub burn_ratio: FeeFraction,    

    /// game contractID -> game onwerID
    /// When user transfer to shop, consider xxx_ratio_for_play;
    /// When shop transfer to user, consider xxx_ratio_for_win;
    pub shops: LookupMap<AccountId, AccountId>,
    pub shop_num: u64,

}

impl Default for Contract {
    fn default() -> Self {
        env::panic(b"Contract is not initialized");
    }
}

#[near_bindgen]
impl Contract {
    #[init]
    pub fn new(owner_id: AccountId, sudoer_id: AccountId) -> Self {
        assert!(!env::state_exists(), "Already initialized");
        Self {
            accounts: LookupMap::new(b"a".to_vec()),
            account_num: 0,
            total_supply: 0,
            owner_id,
            sudoer_id,
            sudoer_profit: 0,
            total_collateral: 0,
            owner_ratio_for_play: FeeFraction {
                numerator: 5,
                denominator: 1000,
            },
            game_ratio_for_play: FeeFraction {
                numerator: 5,
                denominator: 1000,
            },
            owner_ratio_for_win: FeeFraction {
                numerator: 10,
                denominator: 1000,
            },
            game_ratio_for_win: FeeFraction {
                numerator: 10,
                denominator: 1000,
            },
            mint_price: 100,
            burn_ratio: FeeFraction {
                numerator: 10,
                denominator: 1000,
            },
            shops: LookupMap::new(b"s".to_vec()),
            shop_num: 0,
        }
    }

    pub fn get_balance(&self, account_id: AccountId) -> U128 {
        self.accounts.get(&account_id).unwrap_or(0).into()
    }

    pub fn get_contract_info(&self) -> HumanReadableContractInfo {
        HumanReadableContractInfo {
            owner: self.owner_id.clone(),
            sudoer: self.sudoer_id.clone(),
            total_supply: self.total_supply.into(),
            total_collateral: self.total_collateral.into(),
            account_num: self.account_num.into(),
            shop_num: self.shop_num.into(),
            sudoer_profit: self.sudoer_profit.into(),
            sudoer_fee_play: self.owner_ratio_for_play.clone(),
            sudoer_fee_win: self.owner_ratio_for_win.clone(),
            shop_fee_play: self.game_ratio_for_play.clone(),
            shop_fee_win: self.game_ratio_for_win.clone(),
            mint_price: self.mint_price,
            burn_ratio: self.burn_ratio.clone(),
        }
    }

}

#[cfg(not(target_arch = "wasm32"))]
#[cfg(test)]
mod w_near_tests {
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    use super::*;

    type FungibleToken = Contract;

    const ZERO_U128: Balance = 0u128;

    fn alice() -> AccountId {
        "alice.near".to_string()
    }
    fn bob() -> AccountId {
        "bob.near".to_string()
    }
    fn carol() -> AccountId {
        "carol.near".to_string()
    }
    fn w_near() -> AccountId {
        "w_near.near".to_string()
    }
    fn invalid_account_id() -> AccountId {
        "".to_string()
    }

    fn get_context(predecessor_account_id: AccountId) -> VMContext {
        VMContext {
            current_account_id: w_near(),
            signer_account_id: bob(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id,
            input: vec![],
            block_index: 0,
            block_timestamp: 0,
            account_balance: 1000 * 10u128.pow(24),
            account_locked_balance: 0,
            storage_usage: 10u64.pow(6),
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view: false,
            output_data_receivers: vec![],
            epoch_height: 0,
        }
    }

    // #[test]
    // fn contract_creation_with_new() {
    //     testing_env!(get_context(carol()));
    //     //let total_supply = 1_000_000_000_000_000u128;
    //     let contract = FungibleToken::new();
    //     assert_eq!(contract.get_total_supply().0, ZERO_U128);
    //     assert_eq!(contract.get_balance(alice()).0, ZERO_U128);
    //     assert_eq!(contract.get_balance(bob()).0, ZERO_U128);
    //     assert_eq!(contract.get_balance(carol()).0, ZERO_U128);
    // }

    // #[test]
    // #[should_panic(expected = "Contract should be initialized before usage.")]
    // fn default_fails() {
    //     testing_env!(get_context(carol()));
    //     let _contract = FungibleToken::default();
    // }

    // #[test]
    // fn deposit() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     context.attached_deposit = deposit_amount + (133 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     contract.deposit(deposit_amount.into());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // TODO: check contract balance == deposit amount
    //     assert_eq!(contract.get_balance(carol()).0, deposit_amount);
    //     assert_eq!(contract.get_total_supply().0, deposit_amount);
    // }

    // #[test]
    // fn deposit_to_bob_from_carol() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     context.attached_deposit = deposit_amount + (133 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     contract.deposit_to(bob(), deposit_amount.into());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // TODO: check contract balance == deposit amount
    //     assert_eq!(contract.get_balance(carol()).0, 0);
    //     assert_eq!(contract.get_balance(bob()).0, deposit_amount);
    //     assert_eq!(contract.get_total_supply().0, deposit_amount);
    // }

    // #[test]
    // #[should_panic(expected = "Deposit amount must be greater than zero")]
    // fn deposit_fails_when_amount_is_zero() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());

    //     contract.deposit_to(bob(), ZERO_U128.into());
    // }

    // #[test]
    // #[should_panic(expected = "New owner's account ID is invalid")]
    // fn deposit_to_fails_when_recipient_is_invalid() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());

    //     contract.deposit_to(invalid_account_id(), (5u128).into());
    // }

    // #[test]
    // #[should_panic(expected = "Invalid transfer to this contract")]
    // fn deposit_to_fails_when_recipient_is_w_near_contract() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());

    //     contract.deposit_to(w_near(), (5u128).into());
    // }

    // #[test]
    // #[should_panic(
    //     expected = "The required attached deposit is 13300001000000000000000, but the given attached deposit is is 13300000000000000000000"
    // )]
    // fn deposit_to_fails_when_the_required_deposit_is_not_attached() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     context.attached_deposit = 133 * STORAGE_PRICE_PER_BYTE; // attach required storage but not deposit
    //     testing_env!(context.clone());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     contract.deposit(deposit_amount.into());
    // }

    // #[test]
    // fn simple_deposit_and_withdrawal() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     context.attached_deposit = deposit_amount.clone() + (133 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     contract.deposit(deposit_amount.clone().into());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // TODO: check contract balance == deposit amount
    //     assert_eq!(contract.get_balance(carol()).0, deposit_amount);
    //     assert_eq!(contract.get_total_supply().0, deposit_amount);

    //     contract.withdraw(deposit_amount.clone().into());

    //     assert_eq!(contract.get_balance(carol()).0, 0);
    //     assert_eq!(contract.get_total_supply().0, 0);
    // }

    // #[test]
    // fn simple_deposit_by_carol_and_withdrawal_to_alice() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     context.attached_deposit = deposit_amount.clone() + (133 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     contract.deposit(deposit_amount.clone().into());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // TODO: check contract balance == deposit amount
    //     assert_eq!(contract.get_balance(carol()).0, deposit_amount);
    //     assert_eq!(contract.get_total_supply().0, deposit_amount);

    //     contract.withdraw_to(alice(), deposit_amount.clone().into());

    //     // TODO: check alice near balance has increased
    //     assert_eq!(contract.get_balance(carol()).0, 0);
    //     assert_eq!(contract.get_total_supply().0, 0);
    // }

    // #[test]
    // #[should_panic(expected = "Withdrawal amount must be greater than zero")]
    // fn withdraw_fails_when_withdrawal_amount_is_zero() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());

    //     contract.withdraw(ZERO_U128.into());
    // }

    // #[test]
    // #[should_panic(expected = "New owner's account ID is invalid")]
    // fn withdraw_to_fails_when_recipient_is_invalid() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());

    //     contract.withdraw_to(invalid_account_id(), (5u128).into());
    // }

    // #[test]
    // #[should_panic(expected = "Invalid transfer to this contract")]
    // fn withdraw_to_fails_when_recipient_is_w_near_contract() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());

    //     contract.withdraw_to(w_near(), (5u128).into());
    // }

    // #[test]
    // #[should_panic(expected = "Burning more than the account balance")]
    // fn withdraw_to_fails_when_carol_tries_to_withdraw_more_than_her_w_near_balance() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     context.attached_deposit = deposit_amount.clone() + (133 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     contract.deposit(deposit_amount.clone().into());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // TODO: check contract balance == deposit amount
    //     assert_eq!(contract.get_balance(carol()).0, deposit_amount);
    //     assert_eq!(contract.get_total_supply().0, deposit_amount);

    //     contract.withdraw((deposit_amount.clone() + 1).into());
    // }

    // #[test]
    // #[should_panic(expected = "Withdrawal amount must be greater than zero")]
    // fn withdraw_from_fails_when_the_withdrawal_amount_is_zero() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());

    //     contract.withdraw_from(alice(), carol(), ZERO_U128.into());
    // }

    // #[test]
    // #[should_panic(expected = "New owner's account ID is invalid")]
    // fn withdraw_from_fails_when_the_recipient_is_invalid() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());

    //     contract.withdraw_from(alice(), invalid_account_id(), (5u128).into());
    // }

    // #[test]
    // #[should_panic(expected = "Invalid transfer to this contract")]
    // fn withdraw_from_fails_when_the_recipient_is_the_w_near_contract() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());

    //     contract.withdraw_from(alice(), w_near(), (5u128).into());
    // }

    // #[test]
    // #[should_panic(expected = "The new owner should be different from the current owner")]
    // fn withdraw_from_fails_when_the_owner_and_recipient_are_the_same() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());

    //     contract.withdraw_from(alice(), alice(), (5u128).into());
    // }

    // #[test]
    // #[should_panic(expected = "Not enough allowance")]
    // fn withdraw_from_fails_when_the_escrow_account_does_not_have_enough_allowance() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());

    //     contract.withdraw_from(alice(), bob(), (5u128).into());
    // }

    // #[test]
    // #[should_panic(expected = "Burning more than the account balance")]
    // fn withdraw_from_fails_when_trying_to_withdraw_more_than_owners_balance() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     context.attached_deposit = deposit_amount.clone() + (1000 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // get some wNear for carol
    //     contract.deposit(deposit_amount.clone().into());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // TODO: check contract balance == deposit amount
    //     assert_eq!(contract.get_balance(carol()).0, deposit_amount);
    //     assert_eq!(contract.get_total_supply().0, deposit_amount);

    //     // give bob allowance to withdraw some tokens
    //     assert_eq!(contract.get_allowance(carol(), bob()), ZERO_U128.into());

    //     contract.inc_allowance(bob(), std::u128::MAX.into());

    //     assert_eq!(
    //         contract.get_allowance(carol(), bob()),
    //         std::u128::MAX.into()
    //     );

    //     // switch to a context with bob
    //     let mut context = get_context(bob());
    //     testing_env!(context.clone());
    //     context.attached_deposit = 1000 * STORAGE_PRICE_PER_BYTE;
    //     testing_env!(context.clone());

    //     contract.withdraw_from(carol(), bob(), (deposit_amount.clone() + 1).into());
    // }

    // #[test]
    // fn withdraw_from_with_correct_allowance_should_be_successful() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     context.attached_deposit = deposit_amount.clone() + (1000 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // get some wNear for carol
    //     contract.deposit(deposit_amount.clone().into());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // TODO: check contract balance == deposit amount
    //     assert_eq!(contract.get_balance(carol()).0, deposit_amount);
    //     assert_eq!(contract.get_total_supply().0, deposit_amount);

    //     // give bob allowance to withdraw some tokens
    //     assert_eq!(contract.get_allowance(carol(), bob()), ZERO_U128.into());

    //     let withdrawal_amount = deposit_amount.clone() / 2;
    //     contract.inc_allowance(bob(), withdrawal_amount.clone().into());

    //     assert_eq!(
    //         contract.get_allowance(carol(), bob()),
    //         withdrawal_amount.clone().into()
    //     );

    //     // switch to a context with bob
    //     let mut context = get_context(bob());
    //     testing_env!(context.clone());
    //     context.attached_deposit = 1000 * STORAGE_PRICE_PER_BYTE;
    //     testing_env!(context.clone());

    //     assert_eq!(contract.get_balance(bob()).0, ZERO_U128.into());

    //     contract.withdraw_from(carol(), bob(), withdrawal_amount.clone().into());

    //     //todo: check bob's near balance
    //     assert_eq!(contract.get_balance(bob()).0, ZERO_U128.into());
    //     assert_eq!(contract.get_allowance(carol(), bob()), ZERO_U128.into());
    //     assert_eq!(
    //         contract.get_balance(carol()).0,
    //         withdrawal_amount.clone().into()
    //     );
    //     assert_eq!(
    //         contract.get_total_supply().0,
    //         withdrawal_amount.clone().into()
    //     );
    // }

    // #[test]
    // fn withdraw_from_with_infinite_allowance_should_not_reduce_allowance() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     context.attached_deposit = deposit_amount.clone() + (1000 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // get some wNear for carol
    //     contract.deposit(deposit_amount.clone().into());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // TODO: check contract balance == deposit amount
    //     assert_eq!(contract.get_balance(carol()).0, deposit_amount);
    //     assert_eq!(contract.get_total_supply().0, deposit_amount);

    //     // give bob allowance to withdraw some tokens
    //     assert_eq!(contract.get_allowance(carol(), bob()), ZERO_U128.into());

    //     let withdrawal_amount = deposit_amount.clone() / 2;
    //     contract.inc_allowance(bob(), std::u128::MAX.into());

    //     assert_eq!(
    //         contract.get_allowance(carol(), bob()),
    //         std::u128::MAX.into()
    //     );

    //     // switch to a context with bob
    //     let mut context = get_context(bob());
    //     testing_env!(context.clone());
    //     context.attached_deposit = 1000 * STORAGE_PRICE_PER_BYTE;
    //     testing_env!(context.clone());

    //     assert_eq!(contract.get_balance(bob()).0, ZERO_U128.into());

    //     contract.withdraw_from(carol(), bob(), withdrawal_amount.clone().into());

    //     //todo: check bob's near balance
    //     assert_eq!(contract.get_balance(bob()).0, ZERO_U128.into());
    //     assert_eq!(
    //         contract.get_allowance(carol(), bob()),
    //         std::u128::MAX.into()
    //     );
    //     assert_eq!(
    //         contract.get_balance(carol()).0,
    //         withdrawal_amount.clone().into()
    //     );
    //     assert_eq!(
    //         contract.get_total_supply().0,
    //         withdrawal_amount.clone().into()
    //     );
    // }

    // #[test]
    // fn transfer_with_infinite_allowance_should_not_reduce_allowance() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     context.attached_deposit = deposit_amount.clone() + (1000 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // get some wNear for carol
    //     contract.deposit(deposit_amount.clone().into());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // TODO: check contract balance == deposit amount
    //     assert_eq!(contract.get_balance(carol()).0, deposit_amount);
    //     assert_eq!(contract.get_total_supply().0, deposit_amount);

    //     // give bob allowance to withdraw some tokens
    //     assert_eq!(contract.get_allowance(carol(), bob()), ZERO_U128.into());

    //     contract.inc_allowance(bob(), std::u128::MAX.into());

    //     assert_eq!(
    //         contract.get_allowance(carol(), bob()),
    //         std::u128::MAX.into()
    //     );

    //     // switch to a context with bob
    //     let mut context = get_context(bob());
    //     testing_env!(context.clone());
    //     context.attached_deposit = 1000 * STORAGE_PRICE_PER_BYTE;
    //     testing_env!(context.clone());

    //     assert_eq!(contract.get_balance(bob()).0, ZERO_U128.into());

    //     let transfer_amount = deposit_amount.clone() / 2;
    //     contract.transfer_from(carol(), bob(), transfer_amount.clone().into());

    //     assert_eq!(
    //         contract.get_balance(bob()).0,
    //         transfer_amount.clone().into()
    //     );
    //     assert_eq!(
    //         contract.get_allowance(carol(), bob()),
    //         std::u128::MAX.into()
    //     );
    //     assert_eq!(
    //         contract.get_balance(carol()).0,
    //         transfer_amount.clone().into()
    //     );
    //     assert_eq!(contract.get_total_supply().0, deposit_amount.clone().into());
    // }

    // #[test]
    // #[should_panic(expected = "Burning more than the account balance")]
    // fn withdraw_from_with_infinite_allowance_should_not_withdraw_more_than_balance() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     context.attached_deposit = deposit_amount.clone() + (1000 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // get some wNear for carol
    //     contract.deposit(deposit_amount.clone().into());

    //     //assert_eq!(contract.get_near_balance().0, 0);

    //     // TODO: check contract balance == deposit amount
    //     assert_eq!(contract.get_balance(carol()).0, deposit_amount);
    //     assert_eq!(contract.get_total_supply().0, deposit_amount);

    //     // give bob allowance to withdraw some tokens
    //     assert_eq!(contract.get_allowance(carol(), bob()), ZERO_U128.into());

    //     contract.inc_allowance(bob(), std::u128::MAX.into());

    //     assert_eq!(
    //         contract.get_allowance(carol(), bob()),
    //         std::u128::MAX.into()
    //     );

    //     // switch to a context with bob
    //     let mut context = get_context(bob());
    //     testing_env!(context.clone());
    //     context.attached_deposit = 1000 * STORAGE_PRICE_PER_BYTE;
    //     testing_env!(context.clone());

    //     assert_eq!(contract.get_balance(bob()).0, ZERO_U128.into());

    //     contract.withdraw_from(carol(), bob(), deposit_amount.clone().into());
    //     contract.withdraw_from(carol(), bob(), deposit_amount.clone().into());
    // }

    // #[test]
    // fn transfer_after_deposit() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());
    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     context.attached_deposit = deposit_amount + (1000 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     // get some wNear tokens
    //     contract.deposit(deposit_amount.into());

    //     let transfer_amount = 1_000_000_000_000_000u128 / 3;
    //     contract.transfer(bob(), transfer_amount.into());
    //     context.storage_usage = env::storage_usage();
    //     context.account_balance = env::account_balance();

    //     context.is_view = true;
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());
    //     assert_eq!(
    //         contract.get_balance(carol()).0,
    //         (1_000_000_000_000_000u128 - transfer_amount)
    //     );
    //     assert_eq!(contract.get_balance(bob()).0, transfer_amount);
    // }

    // #[test]
    // #[should_panic(expected = "The new owner should be different from the current owner")]
    // fn transfer_fail_self() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());
    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     context.attached_deposit = deposit_amount + (1000 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     // get some wNear tokens
    //     contract.deposit(deposit_amount.into());

    //     let transfer_amount = deposit_amount.clone() / 2;
    //     contract.transfer(carol(), transfer_amount.into());
    // }

    // #[test]
    // #[should_panic(expected = "Invalid transfer to this contract")]
    // fn transfer_fail_to_contract() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());
    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     context.attached_deposit = deposit_amount + (1000 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     // get some wNear tokens
    //     contract.deposit(deposit_amount.into());

    //     let transfer_amount = deposit_amount.clone() / 2;
    //     contract.transfer(w_near(), transfer_amount.into());
    // }

    // #[test]
    // #[should_panic(expected = "Can not increment allowance for yourself")]
    // fn self_inc_allowance_fail() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());

    //     let mut contract = FungibleToken::new();

    //     context.attached_deposit = 1000 * STORAGE_PRICE_PER_BYTE;
    //     testing_env!(context.clone());

    //     contract.inc_allowance(carol(), (5).into());
    // }

    // #[test]
    // #[should_panic(expected = "Can not decrement allowance for yourself")]
    // fn self_dec_allowance_fail() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());
    //     let mut contract = FungibleToken::new();
    //     context.attached_deposit = 1000 * STORAGE_PRICE_PER_BYTE;
    //     testing_env!(context.clone());
    //     contract.dec_allowance(carol(), (10).into());
    // }

    // #[test]
    // fn saturating_dec_allowance() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());
    //     let mut contract = FungibleToken::new();
    //     context.attached_deposit = STORAGE_PRICE_PER_BYTE * 1000;
    //     testing_env!(context.clone());
    //     contract.dec_allowance(bob(), (1_000_000_000_000_000u128 / 2).into());
    //     assert_eq!(contract.get_allowance(carol(), bob()), 0.into())
    // }

    // #[test]
    // fn saturating_inc_allowance() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());
    //     let mut contract = FungibleToken::new();
    //     context.attached_deposit = STORAGE_PRICE_PER_BYTE * 1000;
    //     testing_env!(context.clone());
    //     let max_u128 = std::u128::MAX;
    //     contract.inc_allowance(bob(), max_u128.into());
    //     contract.inc_allowance(bob(), max_u128.into());
    //     assert_eq!(
    //         contract.get_allowance(carol(), bob()),
    //         std::u128::MAX.into()
    //     )
    // }

    // #[test]
    // #[should_panic(
    //     expected = "The required attached deposit is 25700000000000000000000, but the given attached deposit is is 0"
    // )]
    // fn self_allowance_fail_no_deposit() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());
    //     let mut contract = FungibleToken::new();
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());
    //     contract.inc_allowance(bob(), 5.into());
    // }

    // #[test]
    // fn carol_escrows_to_bob_transfers_to_alice() {
    //     // Acting as carol
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());
    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     context.is_view = true;
    //     testing_env!(context.clone());
    //     assert_eq!(contract.get_total_supply().0, 0);

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     let allowance = deposit_amount.clone() / 3;
    //     let transfer_amount = allowance / 3;
    //     context.is_view = false;

    //     context.attached_deposit = deposit_amount + (1000 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     // get some wNear tokens
    //     contract.deposit(deposit_amount.into());

    //     contract.inc_allowance(bob(), allowance.into());
    //     context.storage_usage = env::storage_usage();
    //     context.account_balance = env::account_balance();

    //     context.is_view = true;
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());
    //     assert_eq!(contract.get_allowance(carol(), bob()).0, allowance);

    //     // Acting as bob now
    //     context.is_view = false;
    //     context.attached_deposit = STORAGE_PRICE_PER_BYTE * 1000;
    //     context.predecessor_account_id = bob();
    //     testing_env!(context.clone());
    //     contract.transfer_from(carol(), alice(), transfer_amount.into());
    //     context.storage_usage = env::storage_usage();
    //     context.account_balance = env::account_balance();

    //     context.is_view = true;
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());
    //     assert_eq!(
    //         contract.get_balance(carol()).0,
    //         deposit_amount.clone() - transfer_amount
    //     );
    //     assert_eq!(contract.get_balance(alice()).0, transfer_amount);
    //     assert_eq!(
    //         contract.get_allowance(carol(), bob()).0,
    //         allowance - transfer_amount
    //     );
    // }

    // #[test]
    // fn self_allowance_set_for_refund() {
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());
    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     let initial_balance = context.account_balance;
    //     let initial_storage = context.storage_usage;
    //     context.attached_deposit = STORAGE_PRICE_PER_BYTE * 1000;
    //     testing_env!(context.clone());
    //     let allowance_amount = 1_000_000_000_000_000u128;
    //     contract.inc_allowance(bob(), (allowance_amount.clone() / 2).into());
    //     context.storage_usage = env::storage_usage();
    //     context.account_balance = env::account_balance();
    //     assert_eq!(
    //         context.account_balance,
    //         initial_balance
    //             + Balance::from(context.storage_usage - initial_storage) * STORAGE_PRICE_PER_BYTE
    //     );

    //     let initial_balance = context.account_balance;
    //     let initial_storage = context.storage_usage;
    //     testing_env!(context.clone());
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());
    //     contract.dec_allowance(bob(), (allowance_amount.clone() / 2).into());
    //     context.storage_usage = env::storage_usage();
    //     context.account_balance = env::account_balance();
    //     assert!(context.storage_usage < initial_storage);
    //     assert!(context.account_balance < initial_balance);
    //     assert_eq!(
    //         context.account_balance,
    //         initial_balance
    //             - Balance::from(initial_storage - context.storage_usage) * STORAGE_PRICE_PER_BYTE
    //     );
    // }

    // #[test]
    // fn carol_escrows_to_bob_locks_and_transfers_to_alice() {
    //     // Acting as carol
    //     let mut context = get_context(carol());
    //     testing_env!(context.clone());
    //     let mut contract = FungibleToken::new();
    //     context.storage_usage = env::storage_usage();

    //     context.is_view = true;
    //     testing_env!(context.clone());
    //     assert_eq!(contract.get_total_supply().0, 0);

    //     let deposit_amount = 1_000_000_000_000_000u128;
    //     let allowance = deposit_amount.clone() / 3;
    //     let transfer_amount = allowance / 3;
    //     context.is_view = false;

    //     context.attached_deposit = deposit_amount + (1000 * STORAGE_PRICE_PER_BYTE);
    //     testing_env!(context.clone());

    //     // get some wNear tokens
    //     contract.deposit(deposit_amount.into());

    //     contract.inc_allowance(bob(), allowance.into());
    //     context.storage_usage = env::storage_usage();
    //     context.account_balance = env::account_balance();

    //     context.is_view = true;
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());
    //     assert_eq!(contract.get_allowance(carol(), bob()).0, allowance);
    //     assert_eq!(contract.get_balance(carol()).0, deposit_amount.clone());

    //     // Acting as bob now
    //     context.is_view = false;
    //     context.attached_deposit = STORAGE_PRICE_PER_BYTE * 1000;
    //     context.predecessor_account_id = bob();
    //     testing_env!(context.clone());
    //     contract.transfer_from(carol(), alice(), transfer_amount.into());
    //     context.storage_usage = env::storage_usage();
    //     context.account_balance = env::account_balance();

    //     context.is_view = true;
    //     context.attached_deposit = 0;
    //     testing_env!(context.clone());
    //     assert_eq!(
    //         contract.get_balance(carol()).0,
    //         (deposit_amount.clone() - transfer_amount)
    //     );
    //     assert_eq!(contract.get_balance(alice()).0, transfer_amount);
    //     assert_eq!(
    //         contract.get_allowance(carol(), bob()).0,
    //         allowance - transfer_amount
    //     );
    // }
}

'''
'''--- contracts/token/src/play_token.rs ---
use crate::*;
use near_sdk::{ext_contract, Gas};

const GAS_FOR_BASIC: Gas = 20_000_000_000_000;
const NO_DEPOSIT: Balance = 0;

#[ext_contract(ext_game)]
trait Game {
    fn gl_on_sponsor(&mut self, amount: U128) -> String;
    fn gl_on_play(&mut self, gross_amount: U128, net_amount: U128, op: String) -> String;
}

#[near_bindgen]
impl Contract {

    //****************************
    // owner functions
    //****************************

    pub fn change_owner(&mut self, new_owner_id: AccountId) {
        self.assert_owner();
        // ensure this account exists
        Promise::new(new_owner_id.clone()).transfer(1);
        self.owner_id = new_owner_id;
    }

    pub fn change_sudoer(&mut self, new_sudoer_id: AccountId) {
        self.assert_owner();
        // ensure this account exists
        Promise::new(new_sudoer_id.clone()).transfer(1);
        self.sudoer_id = new_sudoer_id;
    }

    //****************************
    // sudoers functions, owner and sudoer can invoke
    //****************************

    /// Mint token to the signer account.
    /// Features:
    /// * The signer account would be auto-register if needed.
    /// * Requires positive attached deposit.
    /// * Requires called by GameLand contract (the owner)
    #[payable]
    pub fn mint_playtoken(&mut self) {
        self.assert_sudoers();
        let amount = env::attached_deposit();
        assert!(amount > 0, "Requires positive attached deposit");
        let account_id = env::signer_account_id();
        
        // figure out actual mint amount
        let token_mint = amount / self.mint_price as u128 * PRICE_DEMONINATOR as u128;
        let mint_fee = self.burn_ratio.multiply(amount);
        self.sudoer_profit += mint_fee;
        self.total_collateral += amount - mint_fee;
        self.total_supply += token_mint;
    
        self.internal_deposit(&account_id, token_mint);

        env::log(format!("Mint {} token to {} cost {} NEAR", token_mint, account_id, amount).as_bytes());
    }

    /// Burn token and get NEAR back to the signer account.
    /// Requirements:
    /// * `amount` must be a positive integer.
    /// * The signer account should have at least the `amount` of tokens.
    /// * If remaining balance lower than ACCOUNT_KEEPALIVE_BALANCE, the account would be removed
    /// * Requires called by owner
    pub fn burn_playtoken(&mut self, amount: U128) -> Promise {
        self.assert_sudoers();
        let account_id = env::signer_account_id();
        let amount = amount.into();
        
        self.internal_withdraw(&account_id, amount);

        self.total_supply -= amount;
        let gross_collateral = amount / PRICE_DEMONINATOR as u128 * self.mint_price as u128;
        let mint_fee = self.burn_ratio.multiply(gross_collateral);
        let net_collateral = gross_collateral - mint_fee;
        assert!(self.total_collateral>=net_collateral, "Internal Error! collateral insufficient.");
        self.total_collateral -= net_collateral;

        env::log(format!("Burn {} token get {} NEAR back from {}", amount, net_collateral, account_id).as_bytes());
        // Transfer NEAR
        Promise::new(account_id).transfer(net_collateral)
    }

    pub fn update_fee_ratio(&mut self, category: String, ratio: FeeFraction) -> String {
        self.assert_sudoers();

        let mut ret = "OK";
        if category == "shop_fee_play" {
            self.game_ratio_for_play = ratio;
        } else if category == "shop_fee_win" {
            self.game_ratio_for_win = ratio;
        } else if category == "sudoer_fee_play" {
            self.owner_ratio_for_play = ratio;
        } else if category == "sudoer_fee_win" {
            self.owner_ratio_for_win = ratio;
        } else if category == "burn_ratio" {
            self.burn_ratio = ratio;
        } else {
            ret = "Fail";
        }
        String::from(ret)
    }

    pub fn update_mint_prcie(&mut self, mint_price: u16) {
        self.assert_sudoers();
        self.mint_price = mint_price;
    }

    //****************************
    // sudoer functions, sudoer can invoke
    //****************************

    /// withdraw all profit when amount is zero 
    pub fn withdraw_sudoer_profit(&mut self, amount: U128) -> Promise {
        self.assert_sudoer();
        let amount: u128 = amount.into();
        assert!(amount < self.sudoer_profit, "Insurfficent profit for withdraw.");
        let transfer_amount: u128;
        if amount > 0 {
            transfer_amount = amount;
            self.sudoer_profit -= amount;
        } else {
            transfer_amount = self.sudoer_profit;
            self.sudoer_profit = 0;      
        }
        env::log(format!("Withdraw owner profit {} ", transfer_amount).as_bytes());
        Promise::new(self.owner_id.clone()).transfer(transfer_amount)
    }

    pub fn register_shop(&mut self, shop_id: AccountId, shop_owner_id: AccountId) {
        self.assert_sudoer();
        if !self.shops.contains_key(&shop_id) {
            self.shop_num += 1;
        }
        self.shops.insert(&shop_id, &shop_owner_id);
    }

    pub fn unregister_shop(&mut self, shop_id: AccountId) {
        self.assert_sudoer();
        if self.shops.contains_key(&shop_id) {
            self.shops.remove(&shop_id);
            self.shop_num -= 1;
        }
    }

    //****************************
    // common changable functions
    //****************************

    /// shop contract call this method to sponsor shop reward pool
    /// predecessor should be shop contract
    /// signer should be the sponsor
    pub fn sponsor_shop(&mut self, amount: U128) -> Promise {
        let shop_id = env::predecessor_account_id();
        let sponsor = env::signer_account_id();
        let amount: u128 = amount.into();
        assert!(self.is_shop(&shop_id), "Must be called by shop/game contract.");

        self.internal_transfer(&sponsor, &shop_id, amount, Some(String::from("sponsor")));

        env::log(format!("token::sponsor_shop from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        ext_game::gl_on_sponsor(
            amount.into(),
            &shop_id,
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_BASIC,
        )
    }

    /// shop contract call this method to let a user play one round
    /// predecessor should be shop contract and the amount goes to it
    /// signer should be a user
    /// owner and shop-owner get fee from amount
    pub fn insert_coin(&mut self, amount: U128, op: String) -> Promise {

        let caller = env::predecessor_account_id();
        let user = env::signer_account_id();

        assert!(!self.is_shop(&user), "Signer must be a user.");
        let shop_owner = self.shops.get(&caller).expect("Predecessor must be a shop.");
        
        let amount: u128 = amount.into();
        let shop_fee = self.game_ratio_for_play.multiply(amount);
        let owner_fee = self.owner_ratio_for_play.multiply(amount);
        let net_amount = amount - shop_fee - owner_fee;
        if shop_fee > 0 {
            self.internal_transfer(&user, &shop_owner, shop_fee, Some(String::from("shop_fee")));
        }
        if owner_fee > 0 {
            self.internal_transfer(&user, &self.owner_id.clone(), owner_fee, Some(String::from("owner_fee")));
        }
        self.internal_transfer(&user, &caller, net_amount, Some(String::from("insert_coin")));

        env::log(format!("token::insert_coin from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());
        ext_game::gl_on_play(
            amount.into(),
            net_amount.into(),
            op,
            &caller,
            NO_DEPOSIT,
            env::prepaid_gas() - GAS_FOR_BASIC,
        )
    }

    /// game contract call this method to send reward to winner
    /// predecessor should be game contract and the reward comes from it
    /// owner and shop-owner get fee from reward
    pub fn reward_coin(&mut self, receiver_id: AccountId, amount: U128) {
        env::log(format!("token::reward_coin from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());

        let caller = env::predecessor_account_id();
        let shop_owner = self.shops.get(&caller).expect("Predecessor must be a shop.");
        
        let amount: u128 = amount.into();

        let shop_fee = self.game_ratio_for_win.multiply(amount);
        let owner_fee = self.owner_ratio_for_win.multiply(amount);
        let net_amount = amount - shop_fee - owner_fee;
        if owner_fee > 0 {
            self.internal_transfer(&caller, &self.owner_id.clone(), owner_fee, Some(String::from("owner_tip")));
        }
        if shop_fee > 0 {
            self.internal_transfer(&caller, &shop_owner, shop_fee, Some(String::from("shop_tip")));
        }
        self.internal_transfer(&caller, &receiver_id, net_amount, Some(String::from("reward_coin")));
    }

    pub fn reward_coin_multiple(&mut self, receivers: HashMap<AccountId, U128>) {
        env::log(format!("token::reward_coin from {}, prapaid_gas {} ", 
            env::predecessor_account_id(), env::prepaid_gas()).as_bytes());

        let caller = env::predecessor_account_id();
        let shop_owner = self.shops.get(&caller).expect("Predecessor must be a shop.");

        let mut inner_receivers: HashMap<AccountId, Balance> = HashMap::new();
        let mut shop_fee: Balance = 0;
        let mut owner_fee: Balance = 0;
        
        for (receiver_id, amount) in receivers {
            let amount: u128 = amount.into();
            shop_fee += self.game_ratio_for_win.multiply(amount);
            owner_fee += self.owner_ratio_for_win.multiply(amount);
            let net_amount = amount - shop_fee - owner_fee;
            inner_receivers.insert(receiver_id.clone(), net_amount);
        }
        self.internal_batch_transfer(&caller, &inner_receivers, Some(String::from("reward_coin")));
        if owner_fee > 0 {
            self.internal_transfer(&caller, &self.owner_id.clone(), owner_fee, Some(String::from("owner_tip")));
        }
        if shop_fee > 0 {
            self.internal_transfer(&caller, &shop_owner, shop_fee, Some(String::from("shop_tip")));
        }
    }

}

'''
'''--- frontend/README.md ---
# GAMELAND UI

### gameland description
---
get gameland meta info
```shell
ear view gameland.testnet metadata ''
# return:
View call: gameland.testnet.metadata()
{
  version: '0.1.0',
  name: 'Game Land',
  logo_url: 'https://github.com/',
  thumb_url: 'https://github.com/',
  description: 'A platform for small games'
}
```

get gameland policy info
```shell
near view playtoken.testnet get_contract_info ''
# return:
View call: playtoken.testnet.get_contract_info()
{
  owner: 'humeng.testnet',
  sudoer: 'gameland.testnet',
  total_supply: '467000000000000000000000000',
  total_collateral: '46233000000000000000000000',
  account_num: '7',
  shop_num: '1',
  sudoer_profit: '480000000000000000000000',
  sudoer_fee_play: { numerator: 5, denominator: 1000 },
  sudoer_fee_win: { numerator: 10, denominator: 1000 },
  shop_fee_play: { numerator: 5, denominator: 1000 },
  shop_fee_win: { numerator: 10, denominator: 1000 },
  mint_price: 100,
  burn_ratio: { numerator: 10, denominator: 1000 }
}
```

### shop description
---
get shop list and detail:
```shell
near view gameland.testnet list_shops '{"from_index": 0, "limit": 100}'
# return:
View call: gameland.testnet.list_shops({"from_index": 0, "limit": 100})
[
  {
    shop_id: 'neardice.testnet',
    owner_id: 'humeng.testnet',
    flag: 1,
    refs: 'https://github.com/marco-sundsk/gameland/',
    height: '40641470',
    ts: '1616077383477711863',
    status: 2
  },
  [length]: 1
]
```

### shop status
---

```shell
near view neardice.testnet gl_metadata ''
# return: 
View call: neardice.testnet.gl_metadata()
{
  version: '0.1.0',
  name: 'Dice Master',
  logo_url: 'https://github.com/',
  thumb_url: 'https://github.com/',
  description: "Let's Rolling Dices"
}

near view neardice.testnet gl_pub_state ''
# return:
View call: neardice.testnet.gl_pub_state()
'Current jackpot is 4896411132812500000000000'

near view neardice.testnet gl_user_state '{"user_id": "player01.testnet"}'
# return:
View call: neardice.testnet.gl_user_state({"user_id": "player01.testnet"})
''
```

### user balance
---

```shell
near view playtoken.testnet ft_balance_of '{"account_id": "rb01.testnet"}'
# return:
View call: playtoken.testnet.ft_balance_of({"account_id": "rb01.testnet"})
'1000000000000000000000000'
```

'''
'''--- frontend/dapps/angleland/README.md ---
# lucky-box

## Project setup
```
yarn install
```

### Compiles and hot-reloads for development
```
yarn serve
```

### Compiles and minifies for production
```
yarn build
```

### Lints and fixes files
```
yarn lint
```

### Customize configuration
See [Configuration Reference](https://cli.vuejs.org/config/).

'''
'''--- frontend/dapps/angleland/babel.config.js ---
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}

'''
'''--- frontend/dapps/angleland/package.json ---
{
  "name": "lucky-box",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint"
  },
  "dependencies": {
    "bootstrap": "^4.6.0",
    "bootstrap-vue": "^2.21.2",
    "core-js": "^3.6.5",
    "moment": "^2.29.1",
    "near-api-js": "~0.35.0",
    "vue": "^2.6.11",
    "vue-loading-overlay": "^3.4.2"
  },
  "devDependencies": {
    "@vue/cli-plugin-babel": "~4.5.0",
    "@vue/cli-plugin-eslint": "~4.5.0",
    "@vue/cli-plugin-unit-jest": "~4.5.4",
    "@vue/cli-service": "~4.5.0",
    "@vue/test-utils": "~1.1.1",
    "babel-eslint": "^10.1.0",
    "env-cmd": "~10.1.0",
    "eslint": "^6.7.2",
    "eslint-plugin-vue": "^6.2.2",
    "gh-pages": "~3.1.0",
    "less": "^3.0.4",
    "less-loader": "^5.0.0",
    "lint-staged": "^9.5.0",
    "near-cli": "~1.4.0",
    "nodemon": "~2.0.4",
    "shelljs": "~0.8.4",
    "vue-template-compiler": "~2.6.11"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/essential",
      "eslint:recommended"
    ],
    "parserOptions": {
      "parser": "babel-eslint"
    },
    "rules": {}
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ],
  "gitHooks": {
    "pre-commit": "lint-staged"
  },
  "lint-staged": {
    "*.{js,jsx,vue}": [
      "vue-cli-service lint",
      "git add"
    ]
  }
}

'''
'''--- frontend/dapps/angleland/public/index.html ---
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <!-- <link rel="icon" href="<%= BASE_URL %>favicon.ico"> -->
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

'''
'''--- frontend/dapps/angleland/src/assets/css/global.css ---
.main {
	/* background-size: cover; */
	background: url('../img/bg-field.png') center center no-repeat;
	background-size: 101% 101%;
}
.shadow {
	background: rgba(0, 0, 0, 0.2);
    border-radius: 5px;
    color: rgb(255, 255, 255);
    text-align: center;
    margin: auto;
    width: 100%;
}
.number-item {
	float: left;
	list-style: none;
	padding: 10px;
}
.number-item a {
	display: block;
	width: 24px;
	height: 24px;
	line-height: 16px;
	padding: 4px;
	border-radius: 12px;
	background: #fff;
	color: #000;
	font-size: 14px;
	margin: 0 10px;
}
.number-item a.active {
	background: #000;
	color: #fff;
}
.number-item a:hover {
	cursor: pointer;
}
body {
	/* background-color: rgba(0, 0, 0, 0.9); */
	
}

'''
'''--- frontend/dapps/angleland/src/config.js ---
function getConfig (env) {
  switch (env) {
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: 'gameland.testnet',
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org'
      }
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- frontend/dapps/angleland/src/main.js ---
import Vue from 'vue'
import App from './App.vue'
import { BootstrapVue } from 'bootstrap-vue'
import 'bootstrap/dist/css/bootstrap.css'
import 'bootstrap-vue/dist/bootstrap-vue.css'
import { initContract } from "./utils"
import './assets/css/global.css'
import moment from 'moment'

Vue.use(BootstrapVue)

// filter------------------>
Vue.filter('changeNear', function (num) {
  const ratio = '000000000000000000000000'
  if (num === '0') return '0'
  if (num.indexOf('.') !== -1) {
    const arr = num.split('.')
    if (arr[0] !== 0) {
      return arr[0] + arr[1] + ratio.slice(0, (ratio.length - arr[1].length))
    } else {
      return arr[1] + ratio.slice(0, (ratio.length - arr[1].length))
    }
  } else {
    return num + ratio
  }
})

Vue.filter('nearToNum', function (num, fix = 2) {
  return (num / 1e24).toFixed(fix)
})

Vue.filter('changeTime', function (value) {
  const ts = Number((value / 1e6).toFixed(0))
  return moment(ts).format('YYYY-MM-DD HH:mm:ss')
})
// ---------------------->
Vue.config.productionTip = false

window.nearInitPromise = initContract()
  .then(() => {
    new Vue({
      render: h => h(App),
    }).$mount("#app")
  })

'''
'''--- frontend/dapps/angleland/src/utils.js ---
import { connect, Contract, keyStores } from 'near-api-js'
import getConfig from './config'
import * as nearApi from 'near-api-js'

const nearConfig = getConfig('development')

// Initialize contract & set global variables
export async function initContract () {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  // window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  // // Initializing our contract APIs by contract name and configuration
  // window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
  //   // View methods are read only. They don't modify the state, but usually return some value.
  //   viewMethods: ['get_greeting','get_account_dice_count','get_win_history','get_contract_info'],
  //   // Change methods can modify the state. But you don't receive the returned value when called.
  //   changeMethods: ['set_greeting','roll_dice','buy_dice'],
  // })
  window.getCurrentUser = async () => {
    // Needed to access wallet
    window.walletConnection = new nearApi.WalletConnection(near)
    window.accountId = window.walletConnection.getAccountId()
    window.walletAccount = new nearApi.WalletAccount(near)
    if (window.walletConnection.getAccountId()) {
      const accountId = window.walletConnection.getAccountId()
      window.currentUser = {
        accountId,
        account_id: accountId,
        balance: (await window.walletConnection.account().state()).amount
      }
    }
  }
  await window.getCurrentUser()

  // platform contract
  window.contract_platform = await new Contract(window.walletConnection.account(), 'gameland.testnet', {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['list_registers', 'list_shops', 'metadata', 'get_shop', 'get_register'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['buy_playtoken', 'sell_playtoken', 'play', 'sponsor', 'register_shop', 'resovle_register']
  })

  // gamecoin contract
  window.contract_gamecoin = await new Contract(window.walletConnection.account(), 'playtoken.testnet', {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['ft_balance_of', 'ft_total_supply', 'get_contract_info']
  })

  window.contract_angleLand = await new Contract(window.walletConnection.account(), 'angleland.testnet', {
    viewMethods: ['get_maket_info', 'get_contract_info', 'get_win_history']
  })
}

export function logout () {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login () {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn('gameland.testnet')
}

'''
'''--- frontend/dapps/angleland/vue.config.js ---
const publicPath = './'
module.exports = {
  publicPath,
  devServer: {
    publicPath,
    open: true,
    port: 8888
  },
  lintOnSave: true,
  chainWebpack: config => {
    config
      .plugin('html')
      .tap(args => {
        args[0].title= 'angleland'
        return args
      })
  }
}

'''
'''--- frontend/dapps/dice/demo/README.md ---
NCD-GroupA-Demo
==================

This is a homework demo project for NCD program phase-1.

Rolling Dice On NEAR
====================

Guys, let's roll dice on NEAR.  

## Why dice

Randomness is always a key focus on any blockchain. We wanna show you how convenient that a random number can get on NEAR blockchain.  
  
To achieve that, it is hard to believe there is a better way than to make a dice dapp.  

Beyond what you can see in this demo, NEAR can even generate independent randomness not per block, but per receipt!

## How to play

On home page, user can see the whole status of playground without login, i.e. an NEAR account is not necessary. He would have full imformation about owner account of this contract, dice price, commission fee rate, the size of current jackpod and etc.  

Then, user can login with NEAR account and buy several dices. With dices bought, he can guess a number and roll dice again and again. If the dice point is equal to his guess, half of jackpod would belong to him. Otherwise the amount he paid for the dice would belong to the jackpod.  

During playing, the latest 20 win records would appear and be auto refreshed on screen too. 

About Contract
====================
It's need to be mentioned that it is a pure dapp project, which means there is no centralized backend nor data server, all persistent information is stored and mananged on NEAR chain by a contract.

## Contract Structure

```rust
/// This structure describe a winning event
#[derive(BorshDeserialize, BorshSerialize)]
pub struct WinnerInfo {
    pub user: AccountId,  // winner accountId
    pub amount: Balance,  // how much he got as win reward
    pub height: BlockHeight,  // the block hight this event happened
    pub ts: u64,  // the timestamp this event happened
}

/// main structure of this contract
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct NearDice {
    pub owner_id: AccountId,  // owner can adjust params of this playground
    pub dice_number: u8,  // how many dices one rolling event uses
    pub rolling_fee: Balance,  // how much a dice costs when user buys it
    pub jack_pod: Balance,  // as name shows and half of it would belong to the winner
    pub owner_pod: Balance,  // winner would share a tip to the playground, this is where those tips go
    pub reward_fee_fraction: RewardFeeFraction,  // a fraction defines tip rate
    // an always grow vector records all win event, 
    // as a demo, we ignore the management of its size, 
    // but in real project, it must be taken care of, 
    // maybe has a maximum length and remove the oldest item when exceeds.
    pub win_history: Vector<WinnerInfo>,
    // records dice user bought by his payment amount. 
    // This map has a mechanism to shrink, 
    // when a user's balance is reduce to zero, the entry would be removed.
    pub accounts: LookupMap<AccountId, Balance>,
}

```

## Contract Interface

```rust
/// winner's tip rate
pub struct RewardFeeFraction {
    pub numerator: u32,
    pub denominator: u32,
}

/// a human readable version for win event struct, used in return value to caller
pub struct HumanReadableWinnerInfo {
    pub user: AccountId,  // winner accountId
    pub amount: U128,  // the reward he got
    pub height: U64,  // block height the event happens
    pub ts: U64,  // timestamp the event happens
}

/// status of this playground, as return value of get_contract_info
pub struct HumanReadableContractInfo {
    pub owner: AccountId,  // who runs this playground, if you feel bad, just sue him :)
    pub jack_pod: U128,  // you know what it means
    pub owner_pod: U128, // winner's tip goes to here, owner can withdraw
    pub dice_number: u8, // how many dice we use in one rolling event
    pub rolling_fee: U128,  // how much a dice costs when user wanna buy it
}

/// every roll_dice event would return this info
pub struct HumanReadableDiceResult {
    pub user: AccountId,  // who rolls
    pub user_guess: u8,  // the number he guess
    pub dice_point: u8,  // the number dice shows
    pub reward_amount: U128,  // reward he got
    pub jackpod_left: U128,  // jackpod after this event
    pub height: U64,  // the block height when he rolls
    pub ts: U64,  // the timestamp when he rolls
}

//****************/
//***** INIT *****/
//****************/

/// initialization of this contract
 #[init]
pub fn new(
   owner_id: AccountId,
   dice_number: u8,
   rolling_fee: U128,
   reward_fee_fraction: RewardFeeFraction,
) -> Self;

//***************************/
//***** OWNER FUNCTIONS *****/
//***************************/

/// deposit to jackpod, used for initalizing the very first jackpod,
/// otherwise, the jackpod is initialized as 0.
#[payable]
pub fn deposit_jackpod(&mut self);

/// withdraw ownerpod to owner's account
pub fn withdraw_ownerpod(&mut self, amount: U128);

/// Updates current reward fee fraction to the new given fraction.
pub fn update_reward_fee_fraction(&mut self, reward_fee_fraction: RewardFeeFraction);

/// Updates current dice number used in one rolling event.
pub fn update_dice_number(&mut self, dice_number: u8);

/// Updates current dice price.
pub fn update_rolling_fee(&mut self, rolling_fee: U128);

//**************************/
//***** USER FUNCTIONS *****/
//**************************/

/// user deposit near to buy dice. 
/// he can buy multiple dices,
/// any leftover amount would refund
/// eg: rolling_fee is 1 Near, he can buy_dice with 4.4 Near and got 4 dices and 0.4 Near refund.
#[payable]
pub fn buy_dice(&mut self);

/// user roll dice once, then his available dice count would reduce by one.
pub fn roll_dice(&mut self, target: u8) -> HumanReadableDiceResult;

//**************************/
//***** VIEW FUNCTIONS *****/
//**************************/

/// get a list of winn events in LIFO order
/// best practise is set from_index to 0, and limit to 20,
/// that means to get latest 20 win events information with latest first order.
pub fn get_win_history(&self, from_index: u64, limit: u64) -> Vec<HumanReadableWinnerInfo>;

/// get current playground status
pub fn get_contract_info(&self) -> HumanReadableContractInfo;

/// get current winner tip rate
pub fn get_reward_fee_fraction(&self) -> RewardFeeFraction;

/// get account's available dice count
pub fn get_account_dice_count(&self, account_id: String) -> u8;

```

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/main.js` is a great
   place to start exploring.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `NCD-GroupA-Demo.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `NCD-GroupA-Demo.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account NCD-GroupA-Demo.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'NCD-GroupA-Demo.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [Vue]: https://vuejs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- frontend/dapps/dice/demo/babel.config.js ---
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}

'''
'''--- frontend/dapps/dice/demo/jest.config.js ---
module.exports = {
  preset: '@vue/cli-plugin-unit-jest',
  modulePaths: [
    "node_modules",
    "src"
  ]
}

'''
'''--- frontend/dapps/dice/demo/package.json ---
{
  "name": "NCD-GroupA-Demo",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:web",
    "build:web": "vue-cli-service build",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:pages",
    "start": "echo The app is starting! It will automatically open in your browser when ready && npm run serve",
    "dev": "nodemon --exec \"npm run start\"",
    "test:web": "vue-cli-service test:unit",
    "test": "npm run test:web",
    "serve": "vue-cli-service serve --open",
    "lint": "eslint . --ext .js --ext .vue --fix"
  },
  "dependencies": {
    "bootstrap": "^4.6.0",
    "bootstrap-vue": "^2.21.2",
    "core-js": "~3.6.5",
    "moment": "^2.29.1",
    "near-api-js": "~0.35.0",
    "vue": "~2.6.11",
    "vue-loading-overlay": "^3.4.2"
  },
  "devDependencies": {
    "@vue/cli-plugin-babel": "~4.5.8",
    "@vue/cli-plugin-eslint": "~4.5.8",
    "@vue/cli-plugin-unit-jest": "~4.5.4",
    "@vue/cli-service": "~4.5.8",
    "@vue/test-utils": "~1.1.1",
    "env-cmd": "~10.1.0",
    "eslint": "~7.15.0",
    "eslint-plugin-vue": "~7.2.0",
    "gh-pages": "~3.1.0",
    "near-cli": "~1.4.0",
    "nodemon": "~2.0.4",
    "shelljs": "~0.8.4",
    "vue-template-compiler": "~2.6.11"
  },
  "eslintConfig": {
    "globals": {
      "process": true
    },
    "ignorePatterns": [
      "src/config.js",
      "/tests/*.spec.js",
      "copy-dev-account.js"
    ],
    "env": {
      "browser": true,
      "es2020": true
    },
    "extends": [
      "eslint:recommended",
      "plugin:vue/essential"
    ],
    "parserOptions": {
      "ecmaVersion": 2017,
      "sourceType": "module"
    },
    "plugins": [
      "vue"
    ],
    "rules": {
      "indent": [
        2,
        2
      ],
      "quotes": [
        "off",
        "double"
      ],
      "vue/html-indent": [
        "error",
        2,
        {
          "alignAttributesVertically": true
        }
      ]
    }
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}

'''
'''--- frontend/dapps/dice/demo/src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- frontend/dapps/dice/demo/src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- frontend/dapps/dice/demo/src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- frontend/dapps/dice/demo/src/config.js ---

function getConfig(env) {
  switch (env) {
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: 'gameland.testnet',
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      }
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- frontend/dapps/dice/demo/src/global.css ---
.main {
	background-image: url('assets/satoshi-dice-background.png') , linear-gradient(to right, rgb(131, 96, 195), rgb(46, 191, 145));
	background-size: cover;
}
.shadow {
	background: rgba(0, 0, 0, 0.2);
    border-radius: 5px;
    color: rgb(255, 255, 255);
    text-align: center;
    margin: auto;
    width: 100%;
}
.number-item {
	float: left;
	list-style: none;
	padding: 10px;
}
.number-item a {
	display: block;
	width: 24px;
	height: 24px;
	line-height: 16px;
	padding: 4px;
	border-radius: 12px;
	background: #fff;
	color: #000;
	font-size: 14px;
	margin: 0 10px;
}
.number-item a.active {
	background: #000;
	color: #fff;
}
.number-item a:hover {
	cursor: pointer;
}
'''
'''--- frontend/dapps/dice/demo/src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- frontend/dapps/dice/demo/src/main.js ---
import Vue from "vue"
import { BootstrapVue } from 'bootstrap-vue'
import App from "./App.vue"
import moment from 'moment'

// Import Bootstrap an BootstrapVue CSS files (order is important)
import 'bootstrap/dist/css/bootstrap.css'
import 'bootstrap-vue/dist/bootstrap-vue.css'
import { initContract } from "./utils"

// Make BootstrapVue available throughout your project
Vue.use(BootstrapVue)

Vue.filter('changeNear', function (num) {
  const ratio = '000000000000000000000000'
  if (num === '0') return '0'
  if (num.indexOf('.') !== -1) {
    const arr = num.split('.')
    if (arr[0] !== 0) {
      return arr[0] + arr[1] + ratio.slice(0, (ratio.length - arr[1].length))
    } else {
      return arr[1] + ratio.slice(0, (ratio.length - arr[1].length))
    }
  } else {
    return num + ratio
  }
})

Vue.filter('nearToNum', function (num, fix = 2) {
  return (num / 1e24).toFixed(fix)
})

Vue.filter('changeTime', function (value) {
  const ts = Number((value / 1e6).toFixed(0))
  return moment(ts).format('YYYY-MM-DD HH:mm:ss')
})

Vue.config.productionTip = false

window.nearInitPromise = initContract()
  .then(() => {
    new Vue({
      render: h => h(App),
    }).$mount("#app")
  })
  
'''
'''--- frontend/dapps/dice/demo/src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- frontend/dapps/dice/demo/src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig('development')

console.log(nearConfig)

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // // Initializing our contract APIs by contract name and configuration
  // window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
  //   // View methods are read only. They don't modify the state, but usually return some value.
  //   viewMethods: ['get_greeting','get_account_dice_count','get_win_history','get_contract_info'],
  //   // Change methods can modify the state. But you don't receive the returned value when called.
  //   changeMethods: ['set_greeting','roll_dice','buy_dice'],
  // })

  // platform contract
  window.contract_platform = await new Contract(window.walletConnection.account(), "gameland.testnet", {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['list_registers','list_shops','metadata','get_shop', 'get_register'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['buy_playtoken', 'sell_playtoken', 'play','sponsor','register_shop', 'resovle_register'],
  })

  window.contract_dice = await new Contract(window.walletConnection.account(), "dicemaster.testnet", {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['gl_statistic', 'gl_metadata', 'gl_pub_state', 'gl_user_state', 'get_win_history','get_contract_info'],
  })

  // gamecoin contract
  window.contract_gamecoin = await new Contract(window.walletConnection.account(), "playtoken.testnet", {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['ft_balance_of', 'ft_total_supply'],
  })

  // game contract
  window.contract_game = await new Contract(window.walletConnection.account(), "neardice.testnet", {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['gl_metadata', 'gl_pub_state', 'gl_user_state', 'get_win_history','get_contract_info'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn("gameland.testnet")
}

'''
'''--- frontend/dapps/dice/demo/src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''
'''--- frontend/dapps/dice/demo/tests/unit/Notification.spec.js ---
import { shallowMount } from '@vue/test-utils'
import Notification from 'components/Notification.vue'

describe('Notification.vue Test', () => {
  it('renders message when component is created', () => {
    // render the component
    const wrapper = shallowMount(Notification, {
      propsData: {
        msg: 'Test Message'
      }
    })

    console.log(wrapper.text())

    //check msg prop
    expect(wrapper.props("msg")).toMatch('Test Message')

    // check that the message is rendered
    expect(wrapper.text()).toMatch('Test Message')

    // check that additional the text is rendered
    expect(wrapper.text()).toMatch('in contract')

  })
})
'''
'''--- frontend/dapps/dice/demo/tests/unit/SignedIn.spec.js ---
import { shallowMount } from '@vue/test-utils'
import SignedIn from 'components/SignedIn.vue'
import Notification from 'components/Notification.vue'

describe('SignedIn.vue Test', () => {
  it('compose component', () => {
    // render the component
    const wrapper = shallowMount(SignedIn, {})

    // check that the text is rendered
    expect(wrapper.text()).toMatch('This greeting is stored on the NEAR blockchain')

    // check that the logout button is rendered
    expect(wrapper.find('button').text()).toBe("Sign out")

    // check that the save button is rendered
    expect(wrapper.find('#save').text()).toBe("Save")

    // check the notification component is present
    expect(wrapper.findComponent(Notification).exists()).toBe(true)

  })
})
'''
'''--- frontend/dapps/dice/demo/tests/unit/SignedOut.spec.js ---
import { shallowMount } from '@vue/test-utils'
import SignedOut from 'components/SignedOut.vue'

describe('SignedOut.vue Test', () => {
  it('compose main page', () => {
    // render the component
    const wrapper = shallowMount(SignedOut, {})

    // check that the text is rendered
    expect(wrapper.text()).toMatch('Welcome to NEAR')

    // check that the login button rendered
    expect(wrapper.find('button').text()).toBe("Sign in")

  })
})
'''
'''--- frontend/dapps/dice/demo/vue.config.js ---
const publicPath = './'
module.exports = {
  publicPath,
  devServer: {
    publicPath,
    open: true,
    port: 8888
  },
  lintOnSave: true,
}

'''
'''--- frontend/dapps/lucky-box/README.md ---
# lucky-box

## Project setup
```
yarn install
```

### Compiles and hot-reloads for development
```
yarn serve
```

### Compiles and minifies for production
```
yarn build
```

### Lints and fixes files
```
yarn lint
```

### Customize configuration
See [Configuration Reference](https://cli.vuejs.org/config/).

'''
'''--- frontend/dapps/lucky-box/babel.config.js ---
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}

'''
'''--- frontend/dapps/lucky-box/package.json ---
{
  "name": "lucky-box",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint"
  },
  "dependencies": {
    "core-js": "^3.6.5",
    "vue": "^2.6.11",
    "bootstrap": "^4.6.0",
    "bootstrap-vue": "^2.21.2",
    "moment": "^2.29.1",
    "near-api-js": "~0.35.0",
    "vue-loading-overlay": "^3.4.2"
  },
  "devDependencies": {
    "@vue/cli-plugin-babel": "~4.5.0",
    "@vue/cli-plugin-eslint": "~4.5.0",
    "@vue/cli-service": "~4.5.0",
    "babel-eslint": "^10.1.0",
    "eslint": "^6.7.2",
    "eslint-plugin-vue": "^6.2.2",
    "less": "^3.0.4",
    "less-loader": "^5.0.0",
    "lint-staged": "^9.5.0",
    "@vue/cli-plugin-unit-jest": "~4.5.4",
    "@vue/test-utils": "~1.1.1",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "near-cli": "~1.4.0",
    "nodemon": "~2.0.4",
    "shelljs": "~0.8.4",
    "vue-template-compiler": "~2.6.11"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/essential",
      "eslint:recommended"
    ],
    "parserOptions": {
      "parser": "babel-eslint"
    },
    "rules": {}
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ],
  "gitHooks": {
    "pre-commit": "lint-staged"
  },
  "lint-staged": {
    "*.{js,jsx,vue}": [
      "vue-cli-service lint",
      "git add"
    ]
  }
}

'''
'''--- frontend/dapps/lucky-box/public/index.html ---
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

'''
'''--- frontend/dapps/lucky-box/src/assets/css/global.css ---
.main {
	/* background-image: url('assets/satoshi-dice-background.png') , linear-gradient(to right, rgb(131, 96, 195), rgb(46, 191, 145));
	background-size: cover; */
	background: url('../img/bg-box.jpg') center center no-repeat;
	background-size: 101% 101%;
}
.shadow {
	background: rgba(0, 0, 0, 0.2);
    border-radius: 5px;
    color: rgb(255, 255, 255);
    text-align: center;
    margin: auto;
    width: 100%;
}
.number-item {
	float: left;
	list-style: none;
	padding: 10px;
}
.number-item a {
	display: block;
	width: 24px;
	height: 24px;
	line-height: 16px;
	padding: 4px;
	border-radius: 12px;
	background: #fff;
	color: #000;
	font-size: 14px;
	margin: 0 10px;
}
.number-item a.active {
	background: #000;
	color: #fff;
}
.number-item a:hover {
	cursor: pointer;
}
body {
	background-color: rgba(0, 0, 0, 0.9);
}

'''
'''--- frontend/dapps/lucky-box/src/config.js ---

function getConfig(env) {
  switch (env) {
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: 'gameland.testnet',
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      }
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- frontend/dapps/lucky-box/src/main.js ---
import Vue from 'vue'
import App from './App.vue'
import { BootstrapVue } from 'bootstrap-vue'
import 'bootstrap/dist/css/bootstrap.css'
import 'bootstrap-vue/dist/bootstrap-vue.css'
import { initContract } from "./utils"
import './assets/css/global.css'
import moment from 'moment'

Vue.use(BootstrapVue)

// filter------------------>
Vue.filter('changeNear', function (num) {
  const ratio = '000000000000000000000000'
  if (num === '0') return '0'
  if (num.indexOf('.') !== -1) {
    const arr = num.split('.')
    if (arr[0] !== 0) {
      return arr[0] + arr[1] + ratio.slice(0, (ratio.length - arr[1].length))
    } else {
      return arr[1] + ratio.slice(0, (ratio.length - arr[1].length))
    }
  } else {
    return num + ratio
  }
})

Vue.filter('nearToNum', function (num, fix = 2) {
  return (num / 1e24).toFixed(fix)
})

Vue.filter('changeTime', function (value) {
  const ts = Number((value / 1e6).toFixed(0))
  if (ts == 0) {
    return '未开始'
  } else {
    return moment(ts).format('YYYY-MM-DD HH:mm:ss')
  }
})

// ---------------------->
Vue.config.productionTip = false

window.nearInitPromise = initContract()
  .then(() => {
    new Vue({
      render: h => h(App),
    }).$mount("#app")
  })

'''
'''--- frontend/dapps/lucky-box/src/utils.js ---
import { connect, Contract, keyStores } from 'near-api-js'
import getConfig from './config'
import * as nearApi from 'near-api-js'

const nearConfig = getConfig('development')

// Initialize contract & set global variables
export async function initContract () {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  // window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  // // Initializing our contract APIs by contract name and configuration
  // window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
  //   // View methods are read only. They don't modify the state, but usually return some value.
  //   viewMethods: ['get_greeting','get_account_dice_count','get_win_history','get_contract_info'],
  //   // Change methods can modify the state. But you don't receive the returned value when called.
  //   changeMethods: ['set_greeting','roll_dice','buy_dice'],
  // })
  window.getCurrentUser = async () => {
    // Needed to access wallet
    window.walletConnection = new nearApi.WalletConnection(near)
    window.accountId = window.walletConnection.getAccountId()
    window.walletAccount = new nearApi.WalletAccount(near)
    if (window.walletConnection.getAccountId()) {
      const accountId = window.walletConnection.getAccountId()
      window.currentUser = {
        accountId,
        account_id: accountId,
        balance: (await window.walletConnection.account().state()).amount
      }
    }
  }
  await window.getCurrentUser()

  // platform contract
  window.contract_platform = await new Contract(window.walletConnection.account(), 'gameland.testnet', {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['list_registers', 'list_shops', 'metadata', 'get_shop', 'get_register'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['settle', 'buy_playtoken', 'sell_playtoken', 'play', 'sponsor', 'register_shop', 'resovle_register', 'gl_play']
  })

  // gamecoin contract
  window.contract_gamecoin = await new Contract(window.walletConnection.account(), 'playtoken.testnet', {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['ft_balance_of', 'ft_total_supply', 'get_contract_info']
  })

  window.contract_game = await new Contract(window.walletConnection.account(), 'luckybox.testnet', {
    viewMethods: ['get_maket_info', 'get_contract_info', 'get_win_history', 'get_boxes_info']
  })
}

export function logout () {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login () {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn('gameland.testnet')
}

'''
'''--- frontend/dapps/lucky-box/vue.config.js ---
const publicPath = './'
module.exports = {
  publicPath,
  devServer: {
    publicPath,
    open: true,
    port: 8888
  },
  lintOnSave: true,
}

'''
'''--- frontend/demo/README.md ---
# game-land

## Project setup
```
yarn install
```

### Compiles and hot-reloads for development
```
yarn serve
```

### Compiles and minifies for production
```
yarn build
```

### Lints and fixes files
```
yarn lint
```

### Customize configuration
See [Configuration Reference](https://cli.vuejs.org/config/).

'''
'''--- frontend/demo/babel.config.js ---
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}

'''
'''--- frontend/demo/package.json ---
{
  "name": "NCD-GroupA-Demo",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:web",
    "build:web": "vue-cli-service build",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:pages",
    "start": "echo The app is starting! It will automatically open in your browser when ready && npm run serve",
    "dev": "nodemon --exec \"npm run start\"",
    "test:web": "vue-cli-service test:unit",
    "test": "npm run test:web",
    "serve": "vue-cli-service serve --open",
    "lint": "eslint . --ext .js --ext .vue --fix"
  },
  "dependencies": {
    "bootstrap": "^4.6.0",
    "bootstrap-vue": "^2.21.2",
    "core-js": "~3.6.5",
    "near-api-js": "~0.35.0",
    "vue": "~2.6.11",
    "vue-loading-overlay": "^3.4.2",
    "vue-router": "^3.5.1"
  },
  "devDependencies": {
    "@vue/cli-plugin-babel": "~4.5.8",
    "@vue/cli-plugin-eslint": "~4.5.8",
    "@vue/cli-plugin-unit-jest": "~4.5.4",
    "@vue/cli-service": "~4.5.8",
    "@vue/test-utils": "~1.1.1",
    "env-cmd": "~10.1.0",
    "eslint": "~7.15.0",
    "eslint-plugin-vue": "~7.2.0",
    "gh-pages": "~3.1.0",
    "near-cli": "~1.4.0",
    "nodemon": "~2.0.4",
    "shelljs": "~0.8.4",
    "vue-template-compiler": "~2.6.11"
  },
  "eslintConfig": {
    "globals": {
      "process": true
    },
    "ignorePatterns": [
      "src/config.js",
      "/tests/*.spec.js",
      "copy-dev-account.js"
    ],
    "env": {
      "browser": true,
      "es2020": true
    },
    "extends": [
      "eslint:recommended",
      "plugin:vue/essential"
    ],
    "parserOptions": {
      "ecmaVersion": 2017,
      "sourceType": "module"
    },
    "plugins": [
      "vue"
    ],
    "rules": {
      "indent": [
        2,
        2
      ],
      "quotes": [
        "off",
        "double"
      ],
      "vue/html-indent": [
        "error",
        2,
        {
          "alignAttributesVertically": true
        }
      ]
    }
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}

'''
'''--- frontend/demo/public/index.html ---
<!--
 * @Author: your name
 * @Date: 2021-02-26 11:37:19
 * @LastEditTime: 2021-03-09 15:13:33
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: /buildlinks-near-redbag/public/index.html
-->
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta name="referrer" content="never">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <!-- <link rel="icon" href="<%= BASE_URL %>favicon.ico"> -->
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

'''
'''--- frontend/demo/src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- frontend/demo/src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- frontend/demo/src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- frontend/demo/src/assets/mobileStyle/game-mobile.css ---
.game-mobile {
  max-width: 1600px;
  box-sizing: border-box;
  padding: 20px 0 20px;
  margin: 0 auto;
  background-color: #2f2f2f;
  width: 100%;
}

.game-mobile .game-left {
  margin: 0 auto;
  display: flex;
  width: 100%;
  justify-content: center;
  margin-bottom: 20px;
}

.game-mobile .game-left .game-left-title {
  font-size: 34px;
  color: #f8ae1c;
  margin-bottom: 16px;
}

.game-mobile .game-left .game-left-desc {
  color: #f6c94a;
  font-size: 14px;
}

.game-mobile .game-left .game-left-see {
  padding-top: 80px;
}

.game-mobile .game-left .game-left-see button {
  color: #000;
  font-size: 14px;
  background-color: #f8ae1c;
  border-radius: 5px;
  border: none;
  width: 172px;
  height: 45px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.game-mobile .game-left .game-left-see button img {
  vertical-align: baseline;
  margin-right: 10px;
}

.game-mobile .game-list {
  display: flex;
  flex: 1;
  justify-content: center;
  color: #f6c94a;
  font-size: 12px;
}

.game-mobile .game-list .game-wrap {
  width: 100%;
  margin-bottom: 20px;
}

.game-mobile .game-list .game-wrap .game-logo {
  display: flex;
  justify-content: center;
}

.game-mobile .game-list .game-wrap .game-logo img {
  cursor: pointer;
}

.game-mobile .game-list .game-wrap .game-name {
  font-size: 18px;
  /* font-weight: 500; */
  color: #f8ae1c;
  position: relative;
  display: inline-block;
  /* margin-bottom: 5px; */
  padding-left: 15px;
  /* line-height: 30px; */
}

.game-mobile .game-list .game-wrap .game-name .game-version {
  right: 0;
  top: 0;
  transform: translate(120%, 30%);
  /* box-shadow: 2px 2px 5px 2px rgb(32, 32, 32); */
  position: absolute;
  line-height: 15px;
  padding: 0 5px;
  height: 15px;
  color: #000;
  font-size: 12px;
  text-align: center;
  background-color: #fffa37;
  border-radius: 2px 2px 2px 0;
}

.game-mobile .game-list .game-wrap .game-message {
  /* line-height: 20px; */
  font-size: 12px;
  padding-left: 25px;
  box-sizing: border-box;
}

'''
'''--- frontend/demo/src/config.js ---

function getConfig(env) {
  switch (env) {
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: 'gameland.testnet',
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      }
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- frontend/demo/src/global.css ---

.shadow {
	background: rgba(0, 0, 0, 0.2);
    border-radius: 5px;
    color: rgb(255, 255, 255);
    text-align: center;
    margin: auto;
    /* width: 100%; */
}
.number-item {
	float: left;
	list-style: none;
	padding: 10px;
}
.number-item a {
	display: block;
	width: 24px;
	height: 24px;
	line-height: 16px;
	padding: 4px;
	border-radius: 12px;
	background: #fff;
	color: #000;
	font-size: 14px;
	margin: 0 10px;
}
.number-item a.active {
	background: #000;
	color: #fff;
}
.number-item a:hover {
	cursor: pointer;
}
body {
	background-color: #2f2f2f !important;
}
'''
'''--- frontend/demo/src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- frontend/demo/src/main.js ---
import Vue from "vue"
import router from './router'
import { BootstrapVue, IconsPlugin } from 'bootstrap-vue'
import App from "./App.vue"
import "./global.css";

// Import Bootstrap an BootstrapVue CSS files (order is important)
import 'bootstrap/dist/css/bootstrap.css'
import 'bootstrap-vue/dist/bootstrap-vue.css'
import { initContract } from "./utils"

// Make BootstrapVue available throughout your project
Vue.use(BootstrapVue)
Vue.use(IconsPlugin)

Vue.config.productionTip = false

// ------------filter----------
Vue.filter('changeNear', function (num) {
  const ratio = '000000000000000000000000'
  if (num === '0') return '0'
  if (num.indexOf('.') !== -1) {
    const arr = num.split('.')
    if (arr[0] !== 0) {
      return arr[0] + arr[1] + ratio.slice(0, (ratio.length - arr[1].length))
    } else {
      return arr[1] + ratio.slice(0, (ratio.length - arr[1].length))
    }
  } else {
    return num + ratio
  }
})

Vue.filter('nearToNum', function (num) {
  return (num / 1e24).toFixed(2)
})

window.nearInitPromise = initContract()
  .then(() => {
    new Vue({
      router,
      render: h => h(App),
    }).$mount("#app")
  })
  
'''
'''--- frontend/demo/src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- frontend/demo/src/router/index.js ---
import Vue from 'vue'
import VueRouter from 'vue-router'
import Index from '../view/index.vue'

Vue.use(VueRouter)

const routes = [
  {
    path: '/*',
    name: 'Index',
    component: Index
  }
]

const router = new VueRouter({
  mode: 'history',
  routes
})

export default router

'''
'''--- frontend/demo/src/utils.js ---
import { connect, Contract, keyStores } from 'near-api-js'
import getConfig from './config'
import * as nearApi from 'near-api-js'

const nearConfig = getConfig('development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  // window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  
  // // Initializing our contract APIs by contract name and configuration
  // window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
  //   // View methods are read only. They don't modify the state, but usually return some value.
  //   viewMethods: ['get_greeting','get_account_dice_count','get_win_history','get_contract_info'],
  //   // Change methods can modify the state. But you don't receive the returned value when called.
  //   changeMethods: ['set_greeting','roll_dice','buy_dice'],
  // })
  window.getCurrentUser = async () => {
    // Needed to access wallet
    window.walletConnection = new nearApi.WalletConnection(near)
    window.accountId = window.walletConnection.getAccountId()
    window.walletAccount = new nearApi.WalletAccount(near)
    if (window.walletConnection.getAccountId()) {
      const accountId = window.walletConnection.getAccountId()
      window.currentUser = {
        accountId,
        account_id: accountId,
        balance: (await window.walletConnection.account().state()).amount
      }
    }
  }
  await window.getCurrentUser()

  // platform contract
  window.contract_platform = await new Contract(window.walletConnection.account(), "gameland.testnet", {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['list_registers','list_shops','metadata','get_shop', 'get_register'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['buy_playtoken', 'sell_playtoken', 'play','sponsor','register_shop', 'resovle_register'],
  })

  // gamecoin contract
  window.contract_gamecoin = await new Contract(window.walletConnection.account(), "playtoken.testnet", {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['ft_balance_of', 'ft_total_supply', 'get_contract_info'],
  })

  // game contract
  window.contract_game = await new Contract(window.walletConnection.account(), "neardice.testnet", {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['gl_metadata', 'gl_pub_state', 'gl_user_state', 'get_win_history','get_contract_info'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export async function getShop (shop_id) {
  let shop = await new Contract(window.walletConnection.account(), shop_id, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['gl_metadata', 'gl_pub_state', 'gl_user_state', 'get_win_history','get_contract_info'],
  })
  return shop;
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn("gameland.testnet")
}

'''
'''--- frontend/demo/src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''
'''--- frontend/demo/vue.config.js ---
const path = require('path')// 引入path模块
const publicPath = './'
function resolve (dir) {
  return path.join(__dirname, dir)// path.join(__dirname)设置绝对路径
}
module.exports = {
  productionSourceMap: false,
  publicPath,
  devServer: {
    publicPath,
    open: true,
    port: 8888
  },
  lintOnSave: true,
  chainWebpack: (config) => {
    config.resolve.alias
      .set('@', resolve('./src'))
      .set('components', resolve('./src/components'))
      .set('pages', resolve('./src/pages'))
      .set('assets', resolve('./src/assets'))
      .set('styles', resolve('./src/styles'))
      // set第一个参数：设置的别名，第二个参数：设置的路径
  }
}

'''