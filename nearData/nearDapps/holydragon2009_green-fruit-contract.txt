*GitHub Repository "holydragon2009/green-fruit-contract"*

'''--- GreenFruit-Contract/README.md ---
# GreenFruit Contract

A [smart contract] written in [AssemblyScript] for an app initialized with [create-near-app].

# Quick Start

Before you compile this code, you will need to install [Node.js] ≥ 12

# Exploring The Code

1. The main smart contract code lives in `assembly/index.ts`. You can compile
   it with the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard AssemblyScript tests using [as-pect].

'''
'''--- GreenFruit-Contract/as-pect.config.js ---
module.exports = require('near-sdk-as/imports')
'''
'''--- GreenFruit-Contract/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- GreenFruit-Contract/assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- GreenFruit-Contract/assembly/index.ts ---
import { storage } from 'near-sdk-as'

// Data Models Imports
import { GreenFruit, fruits } from './models'

const FRUIT_LIMIT = 10;

export function initContract(): void {
  /// Initializes the contract 
  assert(!storage.hasKey('init'), 'Already initialized')
  storage.set('init', true)
}

export function addFruit(name: string, sku_id: string): void {
  _isInit();
  const fruit = new GreenFruit(name, sku_id);
  // Adding the fruit to end of the persistent collection
  fruits.push(fruit);
}

export function getFruits(): GreenFruit[] {
  _isInit();
  const numFruits = min(FRUIT_LIMIT, fruits.length);
  const startIndex = fruits.length - numFruits;
  const result = new Array<GreenFruit>(numFruits);
  for(let i = 0; i < numFruits; i++) {
    result[i] = fruits[i + startIndex];
  }
  return result;
}

function _isInit(): void {
  assert(storage.hasKey('init') && storage.getSome<bool>('init') == true, 'The contract should be initialized before usage.')
}

'''
'''--- GreenFruit-Contract/assembly/models.ts ---
import { PersistentVector } from 'near-sdk-as'

@nearBindgen
export class GreenFruit {
  name: string;
  sku_id: string;
  constructor(name: string, sku_id: string) {
    name = this.name;
    sku_id = this.sku_id;
  }
}

export const fruits = new PersistentVector<GreenFruit>("f");

'''
'''--- GreenFruit-Contract/assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- GreenFruit-Contract/compile.js ---
// This file does two things:
//
// 1. Compile the AssemblyScript contract using the scripts in package.json
//    (see buildCmd below). This will create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')
const path = require('path')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// AssemblyScript project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// Use the correct build command based on the `--debug` flag
const buildCmd = debug
  ? 'npm run build:debug'
  : 'npm run build'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require(`${__dirname}/package.json`).name
  const outFile = `./build/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  const linkPath = path.relative(linkDir, outFile)
  sh.ln('-s', linkPath, link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- GreenFruit-Contract/package.json ---
{
  "name": "greenfruit",
  "version": "0.2.0",
  "license": "UNLICENSED",
  "authors": ["Thai Le <ant.researcher2021@gmail.com>"],
  "edition": "2022",

  "scripts": {
    "build": "asb",
    "build:debug": "asb --target debug",
    "test": "asp --nologo"
  },
  "dependencies": {
    "near-sdk-as": "2.2.4"
  },
  "devDependencies": {
    "shelljs": "^0.8.4"
  }
}
'''
'''--- README.md ---
# green-fruit-contract
green fruit, a near blockchain contract to demo

'''