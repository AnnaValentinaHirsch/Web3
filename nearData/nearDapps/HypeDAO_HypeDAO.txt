*GitHub Repository "HypeDAO/HypeDAO"*

'''--- .github/workflows/cache.yml ---
# This workflow fetches, aggregates and stores on-chain data in a
# JSON file cache.
name: Cache

# Run workflow every 30 minutes. The definition of `workflow_dispatch` allows 
# to run this workflow manually from the Actions tab.
on:
  schedule:
    - cron:  '1/30 * * * *'

  workflow_dispatch:

# Checkout the `main` as well as the `cache` branch from repository,
# build and `dao-stats`, updates aggregated data and stores it in JSON
# file cache on the `cache` branch.
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout cache branch
        uses: actions/checkout@v2
        with:
          ref: cache
          path: cache

      - name: Install dao-stats
        run: |
          cd $GITHUB_WORKSPACE
          ./scripts/tools/dao-stats/install.sh
      
      - name: Updates and pushes cache file.
        run: |
          cd $GITHUB_WORKSPACE
          ./scripts/cache/update.sh
'''
'''--- .yarnrc.yml ---
nodeLinker: node-modules

yarnPath: .yarn/releases/yarn-berry.cjs

'''
'''--- README.md ---
# HypeDAO

## Welcome to the HypeDAO monorepo! 
This repository contains the infrastructure needed to run HypeDAO and is meant to become a template project that others can use to spin up their own DAOs! Its' organized in yarn workspaces and currently consists of the following packages:

- [`next-frontend`](#getting-started-with-the-nextjs-frontend)
- [`ts-api`](#running-our-API)
- [`ft-contract`](#running-on-testnet)
- [`dao-stats`](#how-data-caching-with-dao-stats-works)

If you have any questions the best way to reach us is our [Telegram](https://t.me/hypedao).

## Initial Steps
Required: [Node](https://nodejs.org/dist/latest-v12.x/) plus [Yarn](https://classic.yarnpkg.com/en/docs/install/#mac-stable) and [Git](https://git-scm.com/downloads)

Clone the repo:
```
git clone https://github.com/HypeDAO/HypeDAO.git
```
*Note: you will need yarn 2 (berry)*

Install dependencies:
```
yarn install
```

## Getting Started With the Next.js Frontend
[Next.js](https://nextjs.org) frontend, running our website at [hypedao.xyz](www.hypedao.xyz). 

Run this command from the root folder:
```bash
yarn next:app dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

If you are running the API locally you will need to change to API_BASE env variable

**Note:** To add libraries/dependencies you must cd into the next-frontend directory and then use the command:
```
yarn add <name>
```

## Running our API
To run the api locally you will need to get the database URL and put it in your env file (remove the "example-" from ".example-env)

Then run the command yarn `api:dev`, the api will now be running on [http://localhost:8000](http://localhost:8000) 

### Testing

The frontend is setup such that it can use either Mainnet or Testnet. Please follow the instructions on [how to run on Testnet](#running-on-testnet) and replace the dev account the token contract was deployed at in `next.config.js`:
```
const testnetConfig = {
	reactStrictMode: true,
	webpack,
	env: {
		network: 'testnet',
		tokenContract: '<your-dev-account-here>'
	}
}
```

## Running on Testnet
A lot of the websites features are centered around a social token. In order to test the website on Testnet, the social token needs to be deployed on a dev account. This tokens specification follows NEP-141 and is implemented in the package `ft-contract`.

### Deploy contracts
The token contract can be deployed and initialized using a convenience script, which defines a basic setup:
```
./scripts/tools/testnet/deploy.sh
```

### Fund user's testnet account
To be able to test features connected to the social token, you might to fund your account:
```
./scripts/tools/testnet/fund_account.sh user-account.testnet
```
You can check your account's balance after by calling
```
./scripts/tools/testnet/check.sh user-account.testnet
```

### Cleanup
You can delete your account and the deployed contract with it, by calling:
```
./scripts/tools/testnet/clean.sh
```

## How data caching with `dao-stats` works
The frontend contains components which rely on on-chain data that cannot be queried in realtime, yet. Therefor we built `dao-stats`, a tool available via CLI that acts as a pseudo-indexer, fetching, indexing / aggregating and storing cached data in human-readable format.

The mechanism we set up contains the following components:

- a JSON file stored on a separate branch called [`cache`](https://github.com/HypeDAO/HypeDAO/tree/cache)
- a set of scripts (`scripts/dao-stats/` and `scripts/cache/`) that build `dao-stats` and call it to initialize and update that JSON file
- a Github action that makes use of those scripts to automate everything (configured in `.github/workflows/cache.yml`)

### Steps to set up a file cache
In case you want reproduce and or customize the cache update, please make sure to run these steps:

1. Create empty branch, e.g. `cache`
2. Checkout that branch into a subdirectory
3. Build `dao-stats` by calling `scripts/tools/dao-stats/init.sh`
4. Customize arguments passed to `dao-stats` in `scripts/cache/init.sh` and run `/scripts/cache/init.sh`
5. Copy the newly created JSON file cache `dao-stats-*` to the folder containing the `cache` branch, commit and push changes
6. Customize arguments passed to `dao-stats` in `scripts/cache/update.sh`

## General Contribution Steps
After getting your environment all set up make sure to branch off of main. 
```
git branch -b <branch-name>
```
Please stick to these general branch naming conventions:

`feature/task-description` - Feature branches are for all new feature work. Keep the task description short and sweet (and use "kabob-case")

`fix/task-description` - Fix branches should be leveraged for bug fixes on existing features

Commit your code regularly with clear commit messages that describe the step you've just taken: `git add .` (if you've added a new file) and/or `git commit -am "<message>"`

When you are ready to merge your code back to the main branch make sure to pull in the latest code and resolve any merge conflicts that may have come up (I would also recommend doing this every day if you are working on a larger feature)
```
git pull origin main
```

After this you can push your code up with `git push`. If it is your first time pushing you may get some helper text directing you on the proper command lines.

Follow the link from the cli to GitHub and if all looks well create your PR. Please use the description space to outline what you've done as well as note any new packages you've installed.

After an admin has approved the pr they will merge in the code for you.

If you wanna take on another task please branch back to main `git branch main` and pull from origin main again **before** making a new branch.

### Lastly pat yourself on the back! 
You've contributed to a revolutionary concept, pushed the boundaries of creative tech and helped many artists get the recognition and compensation they deserve. **Thank you!**

#### Known hurdles connecting people to NEAR
* Chrome (and potentially other browsers) has trouble using NEAR wallets, especially with Ledger devices.
Solution: Use Firefox

* Signing in with a wallet requires 2FA being set up, this requires at least 4 NEAR in your wallet

'''
'''--- package.json ---
{
 "name": "HypeDAO-monorepo",
 "version": "1.0.0",
 "description": "Hype machine by artists for artists",
 "main": "packages",
 "repository": "https://github.com/HypeDAO/HypeDAO.git",
 "author": "EV3RETH",
 "license": "MIT",
 "private": true,
 "workspaces": [
  "packages/*"
 ],
 "engines": {
		"node": "16.11.0"
	},
 "scripts": {
  "next:dev": "yarn workspace next-frontend dev",
  "next:build": "yarn workspace next-frontend build",
  "api:dev": "yarn workspace ts-api dev",
  "build": "yarn workspace ts-api build",
  "start": "yarn workspace ts-api start",
  "api:scripts": "yarn workspace ts-api scripts"
 }
}

'''
'''--- packages/dao-stats/README.md ---
dao-stats
==========

A DAO analytics tool on [NEAR Protocol](https://near.org). Works on a JSON file cache in which it stores and updates filtered and then aggregatred data from recent transactions fetched via [near-api-js](https://github.com/near/near-api-js).

Contents
========

1. [Overview](#overview)
2. [JSON file schema](#json-file-schema)
3. [Usage](#usage)
4. [Commands](#commands)

# Overview

The purpose of the dao-stats CLI is to provide a tool that can keep track of activity data on the NEAR blockchain. It scrapes a given interval of blocks for transactions that match certain criteria and stores aggregated data in a JSON file cache. Currently these criteria are hard-coded (see [implementation details](#dao-stats-update)) and result in the JSON file schema described in the next section.

# JSON file schema

The file schema is meant to be open and to be extended in the future based on the analytics data needed. Since the purpose is to make analytics data available to DAO toolchains, this schema could also act as a prototype of a common standard useful to a variety different DAO's.

## Fields

- `created`: date on which the cache file was initially created
- `updated`: date on which the cache file updated
- `blockhash`: blockhash of latest block either during creation or update

### `token`

As there's a good chance a DAO has a (fungible) utility token, usage data of that token might be needed. Having aggregated data of active accounts, balances, activity and such can be helpful to build operational tools for them.  

#### `contract`

On the NEAR blockchain, every fungible token that implements (NEP-141)[https://nomicon.io/Standards/FungibleToken/Core.html] has an own token contract deployed. The account of this token contract mussed be passed via the commandline, such that transactions can be filtered to have this contract as the receiver (of function calls).

#### `activeAccounts`

List of accounts that were receiver of a `ft_transfer` call on the token contract. It
contains no duplicates and can be initialized via the commandline with `--accounts [comma-separated list]`.

## Example

```json
{
  "created": "2021-08-27T14:32:41.940Z",
  "updated": "2021-08-31T13:27:06.892Z",
  "blockhash": "25QoWCpiDxPMK2FQLM17yXb8ybY8YdMoEucwEmguHfDy",
  "token": {
    "contract": "hype.tkn.near",
    "activeAccounts": [
      "account1.near",
      "account2.near"
    ]
  }
}
```

# Usage

```sh-session

$ npm install -g dao-stats
$ dao-stats COMMAND
$ dao-stats (-v|--version|version)
$ dao-stats --help [COMMAND]
```

# Commands

* [`dao-stats init [CONTRACT] --accounts=accounts`](#dao-stats-init)
* [`dao-stats update [CONTRACT]`](#dao-stats-update)
* [`dao-stats test`](#dao-stats-test)
* [`dao-stats help [COMMAND]`](#dao-stats-help)

## `dao-stats init`

Initializes file cache for a given token contract. An optional account list can be passed.

```
USAGE
  $ dao-stats init [CONTRACT]

ARGUMENTS
  CONTRACT  Token contract to initialize cache with

OPTIONS
  -a, --accounts=accounts  List of accounts to initialize cache with
  -f, --force              Overwrite file cache if exists.

EXAMPLE
  $ dao-stats init hype.tkn.near --accounts=account1.near,account2.near
```

## `dao-stats update`

Fetches recent blocks, filters transactions and updates aggregated data in the file cache. Currently the following filters and aggregators are active:

Filters:
- `receiver_id` is given token contract and it's a function call to `ft_transfer`

Aggregators:
- all accounts that were passed as `receiver_id` to the `ft_transfer` call.

```
USAGE
  $ dao-stats update [CONTRACT]

ARGUMENTS
  CONTRACT  Update cached data for given contract

EXAMPLE
  $ dao-stats update hype.tkn.near

  Reading block 0 GMQYTeX6kqV2wGPWYZGp7zEZ7YjYQjbqgZ1obViAvXGm
  Matching transactions: [
    {
      actions: [ [Object] ],
      hash: '5tu1tSAgBUQMfnjJ4eafM2PTeyubUrBpBSjJQ5o73aTT',
      nonce: 38917325000073,
      public_key: 'ed25519:AuguBFwmBNuTtXbivvhZ9eLpC7V8MGwzUVvjn4r5kLWh',
      receiver_id: 'hype.tkn.near',
      signature: 'ed25519:4W85cUXUhjrHN9ZW4uu45EXrbWryxkNP19cXadPd8V9i3EQKzERtZ6JbmJ42icRmUJF86FnT5NcBHUyvaY8nZdLv',
      signer_id: 'ev3reth.near'
    }
  ]
  Transaction links: [
    {
      method: 'ft_transfer',
      arguments: { amount: '50000000000000000000', receiver_id: 'kodandi.near' },
      link: 'https://explorer.near.org/transactions/5tu1tSAgBUQMfnjJ4eafM2PTeyubUrBpBSjJQ5o73aTT'
    }
  ]
```

## `dao-stats test`

Tests filters and aggregators on one specific, hard-coded interval containing exactly one block.

```
USAGE
  $ dao-stats test
```

## `dao-stats help`

Display help for dao-stats command.

```
USAGE
  $ dao-stats help [COMMAND]

ARGUMENTS
  COMMAND  Command to show help for

OPTIONS
  --all  see all commands in CLI
```

<!-- commandsstop -->

'''
'''--- packages/dao-stats/bin/run.cmd ---
@echo off

node "%~dp0\run" %*

'''
'''--- packages/dao-stats/package.json ---
{
  "name": "dao-stats",
  "description": "dao-stats - A DAO analytics tool on NEAR Protocol.",
  "version": "0.0.1",
  "author": "erikli @erak",
  "bin": "./bin/run",
  "bugs": "https://github.com/HypeDAO/HypeDAO/issues",
  "dependencies": {
    "@oclif/command": "^1",
    "@oclif/config": "^1",
    "@oclif/plugin-help": "^3",
    "hexy": "^0.3.1",
    "near-api-js": "^0.42.0",
    "tslib": "^1"
  },
  "devDependencies": {
    "@oclif/dev-cli": "^1",
    "@types/node": "^10",
    "eslint": "^7.31.0",
    "eslint-config-oclif": "^3.1",
    "eslint-config-oclif-typescript": "^0.1",
    "globby": "^10",
    "ts-node": "^8",
    "typescript": "^3.3"
  },
  "engines": {
    "node": ">=8.0.0"
  },
  "files": [
    "/bin",
    "/lib",
    "/npm-shrinkwrap.json",
    "/oclif.manifest.json"
  ],
  "homepage": "https://github.com/HypeDAO/HypeDAO",
  "keywords": [
    "oclif"
  ],
  "license": "GPL-3",
  "main": "lib/index.js",
  "oclif": {
    "commands": "./lib/commands",
    "bin": "dao-stats",
    "plugins": [
      "@oclif/plugin-help"
    ]
  },
  "repository": "HypeDAO/HypeDAO",
  "scripts": {
    "postpack": "rm -f oclif.manifest.json",
    "prepack": "rm -rf lib && tsc -b && oclif-dev manifest && oclif-dev readme",
    "test": "echo NO TESTS",
    "version": "oclif-dev readme && git add README.md"
  },
  "types": "lib/index.d.ts"
}

'''
'''--- packages/dao-stats/src/commands/init.ts ---
import { Command, flags } from '@oclif/command'
import { retrieveLatestBlockHash } from '../near'
import { writeFile, existsSync } from 'fs'

const filename_prefix = 'dao-stats-'
const filename_postfix = '.json'

let cache = {
  created: new Date(),
  updated: new Date(),
  blockhash: '',
  token: {
    contract: '',
    activeAccounts: []
  }
}

export default class Init extends Command {
  static description = 'Initializes file cache. An optional account list can be passed.'

  static examples = [
    `$ dao-stats init hype.tkn.near --accounts account-a.near,account-b.near`,
  ]

  static flags = {
    help: flags.help({char: 'h'}),
    force: flags.boolean({char: 'f'}),
    accounts: flags.string({
      char: 'a',
      description: 'List of accounts to initialize cache with.'})
  }

  static args = [{
    name: 'contract',
    description: 'Token contract to initialize cache with.',
    required: true
  }]

  async run() {
    const {args, flags} = this.parse(Init)

    const filename = filename_prefix + args.contract + filename_postfix
    this.log('Retrieving latest blockhash and initializing cache file', filename, '...')

    retrieveLatestBlockHash().then((blockhash) => {
      cache.blockhash = blockhash

      cache.token.contract = args.contract

      if (!flags.accounts) {
        this.log('No account list provided. Defaulting to empty list.')
      } else {
        cache.token.activeAccounts = flags.accounts.split(',')
      }
  
      let content = JSON.stringify(cache)
      this.log(JSON.parse(content))
  
      if (this.shouldUpdate(filename, flags.force)) {
        writeFile(filename, content, function (err) {
          if (err) throw err;
          console.log('Cache file written.');
        });
      } else {
        console.log('Skipping.');
      }
    })    
  }

  shouldUpdate(filename: string, force: boolean) {
    let updateFile = true
    if (existsSync(filename)) {
      this.log("Existing cache file found!")
      if (force) {
        this.log("Forcing overwrite.")
      } else {
        updateFile = false
      }
    }
    return updateFile
  }
}

'''
'''--- packages/dao-stats/src/commands/test.ts ---
import {Command, flags} from '@oclif/command'
import { findTokenReceiver } from '../near'

const filename = "hype-tkn-near-active-accounts.json"

export default class Test extends Command {
  static description = 'describe the command here'

  static examples = [
    `$ dao-stats test`,
  ]

  async run() {
    this.log('Testing queries...')
    
    let cache = {
      created: new Date(),
      updated: new Date(),
      blockhash: 'GMQYTeX6kqV2wGPWYZGp7zEZ7YjYQjbqgZ1obViAvXGm',
      token: {
        contract: 'hype.tkn.near',
        activeAccounts: []
      }
    }

    let last_blockhash = "9V5jrp8VRgsqNYmaC3jgyVFHPCHRQ5scAaANY3QuA5jz" // #45791792
    findTokenReceiver(cache.blockhash, last_blockhash, cache.token.contract)
      .then(activeAccounts => {
        this.log("Active accounts:", activeAccounts)
      })
  }
}

'''
'''--- packages/dao-stats/src/commands/update.ts ---
import { Command, flags } from '@oclif/command'
import { findTokenReceiver, retrieveLatestBlockHash } from '../near'
import { readFile, writeFile, existsSync } from 'fs'

const filename_prefix = 'dao-stats-'
const filename_postfix = '.json'

export default class Update extends Command {
  static description = 'Queries token transfers, balances and updates file cache.'

  static examples = [
    `$ dao-stats init hype.tkn.near`,
  ]

  static flags = {
    help: flags.help({char: 'h'}),
  }

  static args = [{
    name: 'contract',
    description: 'Token contract to search transactions for.',
    required: true
  }]

  async run() {
    const {args, flags} = this.parse(Update)
    const filename = filename_prefix + args.contract + filename_postfix

    if (existsSync(filename)) {
      this.log('Updating cache file', filename, '...')

      readFile(filename, function(err, data) {
        if (err) throw err;
        let storedCache = JSON.parse(data.toString())
        
        retrieveLatestBlockHash()
          .then((blockhash) => {
            findTokenReceiver(storedCache.blockhash, blockhash, storedCache.token.contract)
              .then(activeAccounts => {
                storedCache.blockhash = blockhash
                storedCache.token.activeAccounts = [...new Set([...storedCache.token.activeAccounts ,...activeAccounts])]
                storedCache.updated = new Date()
                console.log(storedCache)

                writeFile(filename, JSON.stringify(storedCache), function (err) {
                  if (err) throw err;
                  console.log('Cache file written.');
                });
              })
              .catch(err => {
                console.log(err)
                process.exit(1)
              })
          })
      });
    } else {
      this.log('No cache file found. Please create one using \'dao-stats init\'.')
      process.exit(1)
    }
  }
}

'''
'''--- packages/dao-stats/src/index.ts ---
export {run} from '@oclif/command'

'''
'''--- packages/dao-stats/src/near.ts ---
const { hexy } = require('hexy')
const nearAPI = require("near-api-js")

const path = require("path")
const homedir = require("os").homedir()

const CREDENTIALS_DIR = ".near-credentials";

const credentialsPath = path.join(homedir, CREDENTIALS_DIR);
const keyStore = new nearAPI.keyStores.UnencryptedFileSystemKeyStore(credentialsPath);

const config = {
  keyStore,
  networkId: "mainnet",
  nodeUrl: "https://rpc.mainnet.near.org",
};

export async function findTokenReceiver(
  startBlock: string, endBlock: string, accountId: string) {
  const near = await nearAPI.connect(config);

  // creates an array of block hashes for given range
  const blockArr = [];
  let blockHash = endBlock;
  let counter = 0;
  do {
    const currentBlock = await getBlockByID(blockHash);
    blockArr.push(currentBlock.header.hash);
    blockHash = currentBlock.header.prev_hash;
    console.log("Reading block", counter, blockHash);
    counter++;
  } while (blockHash !== startBlock);

  // returns block details based on hashes in array
  const blockDetails = await Promise.all(
    blockArr.map((blockId) =>
      near.connection.provider.block({
        blockId,
      })
    )
  );

  // returns an array of chunk hashes from block details
  const chunkHashArr = blockDetails.flatMap((block) =>
    block.chunks.map(({ chunk_hash }) => chunk_hash)
  );

  //returns chunk details based from the array of hashes

  const chunkDetails = await Promise.all(
    chunkHashArr.map((chunk) => {
      return near.connection.provider.chunk(chunk);
    })
  );

  // checks chunk details for transactions
  // if there are transactions in the chunk we
  // find ones associated with passed accountId
  const tokenTransfers = chunkDetails.flatMap((chunk) =>
    (chunk.transactions || []).filter((tx) => 
        tx.receiver_id === accountId &&
        tx.actions[0].FunctionCall.method_name === 'ft_transfer')
  );
  
  let activeAccounts = new Map()
  tokenTransfers.forEach(tx => {
    const args = decodeFunctionArguments(tx.actions[0].FunctionCall.args)
    activeAccounts.set(args.receiver_id, true)
  });

  //creates transaction links from matchingTxs
  const txsLinks = tokenTransfers.map((tx) => ({
    method: tx.actions[0].FunctionCall.method_name,
    arguments: decodeFunctionArguments(tx.actions[0].FunctionCall.args),
    link: `https://explorer.near.org/transactions/${tx.hash}`,
  }));
  console.log("Matching transactions:", tokenTransfers);
  console.log("Transaction links:", txsLinks);
  
  return Array.from(activeAccounts.keys())
}

export async function retrieveLatestBlockHash() {
  const near = await nearAPI.connect(config);
  let status: NodeStatusResult = await near.connection.provider.status()
  let syncInfo: SyncInfo = status.sync_info
  return syncInfo.latest_block_hash
}

async function getBlockByID(blockID) {
  const near = await nearAPI.connect(config);
  const blockInfoByHeight = await near.connection.provider.block({
    blockId: blockID,
  });
  return blockInfoByHeight;
}

const decodeFunctionArguments = (args: string) => {
    const decodedArgs = Buffer.from(args, "base64");
    let prettyArgs: string;
    try {
        const parsedJSONArgs = JSON.parse(decodedArgs.toString());
        prettyArgs = JSON.stringify(parsedJSONArgs, null, 2);
    } catch {
        prettyArgs = hexy(decodedArgs, { format: "twos" });
    }
    return JSON.parse(prettyArgs)
}
'''
'''--- packages/dao-stats/tsconfig.json ---
{
  "compilerOptions": {
    "declaration": true,
    "importHelpers": true,
    "module": "commonjs",
    "outDir": "lib",
    "rootDir": "src",
    "strict": true,
    "target": "es2017",
    "esModuleInterop": true
  },
  "include": [
    "src/**/*"
  ],
	"exclude": ["node_modules"]
}

'''
'''--- packages/next-frontend/README.md ---
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

Run this command from the root folder:
```bash
yarn next:app dev
```

*Alternativly you can cd into next-frontend folder and run this command:* 

```bash
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.tsx`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

'''
'''--- packages/next-frontend/connections/artists.ts ---
import { ArtistProfile, ArtistProfileRequest, GetArtistsParams } from "../types/artists";
import { Get, Post, Put } from "./helpers";

export function GetArtists(getArtistParams: GetArtistsParams): Promise<ArtistProfile[]> {
	// using POST instead of GET so we can include a body
	return Post('/artist/profiles', getArtistParams)
}

export function GetArtist(id: number): Promise<ArtistProfile> {
	return Get(`/artist/profile/${id}`)
}

export function CreateArtist(createArtistRequest: ArtistProfileRequest): Promise<ArtistProfile> {
	return Post(`/artist/profile`, createArtistRequest)
}

export function UpdateArtistProfile(artistProfile: ArtistProfile): Promise<ArtistProfile> {
	return Put(`/artist/profile`, artistProfile)
}
'''
'''--- packages/next-frontend/connections/helpers.ts ---
function getParams(data?: any) {
	return {
		method: "GET",
		headers: {
			'Content-Type': 'application/json'
		},
		body: JSON.stringify(data)
	}
}
function postParams(data: any) {
	return {
		method: "POST",
		headers: {
			'Content-Type': 'application/json',
		},
		body: JSON.stringify(data)
	}
}

function putParams(data: any) {
	return {
		method: "PUT",
		headers: {
			'Content-Type': 'application/json'
		},
		body: JSON.stringify(data)
	}
}

function deleteParams() {
	return {
		method: "DELETE",
		headers: {
			'Content-Type': 'application/json'
		}
	}
}

function parsePath(path: string) {
	if (path.startsWith('http')) return path;
	else return `${process.env.NEXT_PUBLIC_API_BASE}/api/v1${path}`;
}

export function Get(path: string, data?: any) {
	return fetch(parsePath(path), getParams(data)).then(results => results.json())
}

export function Put(path: string, data: any) {
	return fetch(parsePath(path), putParams(data)).then(results => results.json())
}

export function Post(path: string, data: any) {
	return fetch(parsePath(path), postParams(data)).then(results => results.json())
}

export function Delete(path: string) {
	return fetch(parsePath(path), deleteParams()).then(results => results.json())
}
'''
'''--- packages/next-frontend/connections/nfts.ts ---
import { NFT, NFTRequest, UrlContent } from "../types/artists";
import { Delete, Get, Post, Put } from "./helpers";

export function GetLinkPreview(url: string): Promise<UrlContent> {
	//using POST because get requests cant have a body
	return Post('/nft/url-content', { url })
}

export function CreateNFT(createNFTRequest: NFTRequest): Promise<NFT> {
	return Post('/nft', createNFTRequest)
}
export function UpdateNFT(nft: NFT): Promise<NFT> {
	return Put('/nft', nft)
}
export function DeleteNFT(id: number): Promise<NFT> {
	return Delete(`/nft/${id}`)
}
'''
'''--- packages/next-frontend/markdown.d.ts ---
declare module 'react-markdown/react-markdown.min';
'''
'''--- packages/next-frontend/next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/types/global" />
/// <reference types="next/image-types/global" />

'''
'''--- packages/next-frontend/next.config.js ---
const withTM = require('next-transpile-modules')(['react-markdown']);
const { PHASE_DEVELOPMENT_SERVER } = require('next/constants')

function webpack(config) {
	config.module.rules.push({
		test: /\.svg$/,
		use: ["@svgr/webpack"]
	});

	return config;
}

const sharedConfig = {
	images: {
		domains: ['arweave.net', 'paras-cdn.imgix.net']
	},
	reactStrictMode: true,
}

const testnetConfig = {
	...sharedConfig,
	webpack,
	env: {
		network: 'testnet',
		tokenContract: 'hype.tokens.testnet',
		daoContract: 'hype.dev-1633010067633-2472687'
	}
}

const mainnetConfig = {
	...sharedConfig,
	webpack,
	env: {
		network: 'mainnet',
		tokenContract: 'hype.tkn.near',
		daoContract: 'hype.sputnik-dao.near'
	}
}

module.exports = (phase, { defaultConfig }) => {
	if (process.env.NEAR_ENV === 'mainnet')
		return withTM(mainnetConfig)
	return withTM(testnetConfig)
}

'''
'''--- packages/next-frontend/package.json ---
{
  "name": "next-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "resolutions": {
    "@types/react": "17.0.14"
  },
  "dependencies": {
    "@emotion/react": "^11.5.0",
    "@emotion/styled": "^11.3.0",
    "@material-ui/core": "^4.12.2",
    "@material-ui/icons": "^4.11.2",
    "@mui/icons-material": "^5.0.4",
    "@mui/material": "^5.0.4",
    "@svgr/webpack": "^5.5.0",
    "axios": "^0.21.3",
    "big.js": "^6.1.1",
    "classnames": "^2.3.1",
    "formik": "^2.2.9",
    "near-api-js": "^0.42.0",
    "next": "11.0.1",
    "next-transpile-modules": "^8.0.0",
    "react": "17.0.2",
    "react-dom": "17.0.2",
    "react-markdown": "^7.0.1",
    "react-player": "^2.9.0",
    "simplex-noise": "^2.4.0",
    "victor": "^1.1.0"
  },
  "devDependencies": {
    "@types/big.js": "^6.1.1",
    "@types/react": "17.0.14",
    "@types/react-dom": "^17.0.9",
    "eslint": "^7.31.0",
    "eslint-config-next": "11.0.1",
    "typescript": "4.3.5"
  }
}

'''
'''--- packages/next-frontend/pages/api/hello.ts ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next'

type Data = {
  name: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  res.status(200).json({ name: 'John Doe' })
}

'''
'''--- packages/next-frontend/public/images/medium.svg ---
<svg class="svgIcon-use" height="16" viewBox="0 0 1043.63 592.71">
	<g data-name="Layer 2">
		<g data-name="Layer 1">
			<path d="M588.67 296.36c0 163.67-131.78 296.35-294.33 296.35S0 460 0 296.36 131.78 0 294.34 0s294.33 132.69 294.33 296.36"></path>
			<path d="M911.56 296.36c0 154.06-65.89 279-147.17 279s-147.17-124.94-147.17-279 65.88-279 147.16-279 147.17 124.9 147.17 279"></path>
			<path d="M1043.63 296.36c0 138-23.17 249.94-51.76 249.94s-51.75-111.91-51.75-249.94 23.17-249.94 51.75-249.94 51.76 111.9 51.76 249.94"></path>
		</g>
	</g>
</svg>
'''
'''--- packages/next-frontend/public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- packages/next-frontend/styles/components/artists/artist-info.module.css ---
.name {
	margin: 0 0 1rem;
}
.header{
	display: flex;
	justify-content: space-between;
	align-items: baseline;
}
.header svg {
	fill: var(--accent-color)
}
.socialList {
	margin-bottom: 2rem;
}
.socialList a {
	margin-right: 0.8rem;
}
'''
'''--- packages/next-frontend/styles/components/artists/nft-card.module.css ---
.skeleton, .card {
	width: 20rem;
	height: 31rem;
	background: linear-gradient(135deg, var(--grey-gradient));
	box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.3);
	border-radius: 1rem;
}
.skeleton { 
	position: absolute !important;
	top:0;
	left: 0;
	transition: 0.8s;
	opacity: 1;
}
.skeleton.hidden {
	opacity: 0;
	top: -100%
}

.card {
	overflow: hidden;
	position: relative;
	padding-bottom: 4rem; /*to account for the button*/
	text-overflow: ellipsis;
	cursor: pointer;
	transition: 0.3s;
}

.card:hover {
	box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.8);
	transform: scale(1.02);
}

.card::after {
	position: absolute;
	bottom: 0rem;
	left: -2rem;
	width: 120%;
	content: "";
	background-color: rgb(53, 53, 53);
	height: 4rem;
	filter: blur(10px);
}

.mediaContainer {
	width: 100%;
	height: 20rem;
	position: relative;
	background-color: rgba(0, 0, 0, 0.5);
	transition: 0.5s;
}

.mediaContainer.hidden {
	opacity: 0;
}

.mediaContainer button {
	position: absolute;
	width: 100%;
	height: 100%;
	display: flex;
	align-items: center;
	justify-content: center;
	background: transparent;
	border: none;
	transition: 0.5s;
}
.mediaContainer button svg {
	font-size: 3rem;
	filter: drop-shadow(2px 2px 8px rgba(177, 177, 177, 0.3));
}

.mediaContainer button:hover {
	background-color: rgba(173, 173, 173, 0.2);
}
.videoPlayer {
	width: 100% !important;
	height: 100% !important;
}

.infoContainer {
	padding: 0.7rem 0.5rem;
	/* display: grid;
	grid-template-columns:  1fr 3.7rem 3.4rem; */
	align-items: center;
	gap: 0.2rem;
	text-align: center;
}
.infoContainer aside {
	font-size: 0.8rem;
	font-weight: lighter;
	color: var(--grey);
	letter-spacing: 0.1rem;
}
.infoContainer p {
	margin: 0.2rem 0 0;
}

.infoContainer h3 {
	font-family: var(--heading-font);
	margin: 0;
	text-align: left;
	font-size: 1.5rem;
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
	padding: 0 0.5rem;
}
.description {
	position: relative;
	font-size: 0.9rem;
	margin: 0;
	padding: 0 1rem;
	height: 4.2rem;
	word-wrap: break-word;
	overflow-x: hidden;
	overflow-y: scroll;
	text-overflow: ellipsis;
}

.card .buyButton {
	border-radius: 0;
	border-bottom-left-radius: 1rem;
	border-bottom-right-radius: 1rem;
	padding: 0.7rem 0;
	width: 100%;
	position: absolute;
	bottom: 0;
	text-shadow: none;
	text-align: center;
	z-index: 1;
}

.card .buyButton.hidden {
	opacity: 0;
}

.card .buyButton:hover {
	transform: scale(1) !important;
}

.content {
	display: flex;
	flex-direction: column;
}

.artistName {
	text-align: center;
	margin-bottom: 1.5rem;
}

.modalContent .mediaContainer {
	border-radius: 2rem;
	height: 34.9rem;
	overflow: hidden;
	background: linear-gradient(160deg, var(--grey-gradient))
}

.modalContent .infoContainer {
	padding: 2rem 0;
	grid-template-columns: 1fr 7rem 7rem;
}

.modalContent .infoContainer h3 {
	font-size: 2rem;
	padding: 0;
}

.modalContent .description {
	font-size: 1rem;
	padding: 0 0 2rem;
	height: auto;
}

.modalContent .mintbaseLink {
	/* display: block; */
	font-style: italic;
	text-align: center;
	margin: 0 0 1rem;
}

.modalContent .description::after{
	display: none;
}

.modalContent .buyButton {
	align-self: center;
}

@media only screen and (max-width: 1024px) {
	.card{
		width: 16rem;
		height: 26rem;
	}
	.mediaContainer {
		height: 16rem;
	}
	.card .infoContainer h3 {
		font-size: 1.1rem;
	}
	.card .infoContainer aside {
		font-size: 0.7rem;
	}
	.card .infoContainer p {
		font-size: 0.8rem;
	}
	.card .description {
		font-size: 0.8rem;
	}

	.modalContent .mediaContainer {
		height: 25.5rem;
	}
}

@media only screen and (max-width: 812px) {
	.modalContent .mediaContainer {
		height: 22.3rem;
	}
	.card {
		width: 18rem;
		height: 28rem;
	}
	.mediaContainer {
		height: 18rem;
	}
}

@media only screen and (max-width: 480px) {
	.modalContent .mediaContainer {
		height: 19rem;
	}
	.modalContent .infoContainer aside {
		font-size: 0.7rem;
	}
	.modalContent .infoContainer p {
		font-size: 0.8rem;
		line-height: 1rem;
	}
	.modalContent .infoContainer h3 {
		font-size: 1.3rem;
	}
	.modalContent .infoContainer {
		padding: 1rem 0;
		grid-template-columns: 1fr 4rem 4rem;
	}
	.modalContent .description {
		font-size: 0.8rem;
	}
}
'''
'''--- packages/next-frontend/styles/components/footer.module.css ---
.footerContainer {
	padding: 0.5rem 4rem;
	position: relative;
	display: flex;
	justify-content: space-between;
	align-items: center;
	background:linear-gradient(180deg, var(--grey-gradient));
	box-shadow: 0 5px 5px rgba(0, 0, 0, 0.8);
	
	color:var(--body-text-color);
}
.copyright {
	font-size: 0.8rem;
}
.logo {
	position: relative;
	opacity: 0.8;
}
.logo:hover::after {
	content: "Logo by Holikao";
	text-align: center;
	z-index: 5;
	position: absolute;
	top: -2.5rem;
	left: -2.5rem;
	width: 9rem;
	background-color: rgba(78, 78, 78, 0.8);
	padding: 0.7rem 0.5rem;
	border-radius: 0.5rem;
	color: var(--body-text-color)
}
.socials {
	display: flex;
	align-items: center;
}
.socials a {
	margin-right: 1rem;
}
.socials svg path {
	fill: var(--accent-color)
}

@media only screen and (max-width: 480px) {
	.footerContainer {
		padding: 0.5rem 1rem;
	}
	.copyright {
		font-size: 0.5rem;
	}
}
'''
'''--- packages/next-frontend/styles/components/form.module.css ---
.label {
	position: relative;
	margin-left: 1.5rem;
	font-size: 1.2rem;
	font-family: var(--heading-font);
	color: var(--body-text-color);
	text-align: center;
}

.center {
    text-align: center;
}

.imageContainer {
    height: 100px;
    width: 16%;
    margin-left: 42%;
}

.form ul {
    list-style-type: none;
    padding-left: 0;
}

.form ul li {
    display: block;
}

.form ul li p.label {
    width: 40%;
}

p.scrim {
    margin-top: 0rem;
    padding: 2rem 1.2rem;
}

li.scrim, div.scrim {
    padding: 1rem 1.2rem 1rem 1.2rem;
    margin-bottom: 0.5rem;
}

div.scrimPadded {
    padding: 1rem 1.2rem 4rem 1.2rem;
}

p.left {
    float: left;
}

p.right {
    float: right;
    text-align: right;
}

.primaryButton {
    width: 100%;
}

.form input, .form select {
	width: 100%;
	padding: 1rem;
    background-color: transparent;
    border: 2px solid white;
	border-radius: 1rem;
    color: white;
	margin-top: 1rem;
	margin-bottom: 1rem;
    font-size: 1.2rem;
}
.form input::-webkit-inner-spin-button, 
.form input::-webkit-outer-spin-button { 
    -webkit-appearance: none; 
	-moz-appearance: textfield;
    margin: 0; 
}
.form input:focus {
	outline: none;
}

.formFieldRow {
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
}

.form label {
    padding: 2.2rem 1rem 2rem 0rem;
    font-size: 1.2rem;
}

.formFieldRow label {
    display: flex;
	flex-direction: row;
    flex-grow: 1;
}

.formFieldRow input, .formFieldRow select {
    display: flex;
	flex-direction: row;
    flex-grow: 1;
    width: 70%;
}

.formNarrow {
    width: 60%;
    margin-left: 20%;
}

.formNarrowest {
    width: 30%;
    margin-left: 35%;
}

@media only screen and (max-width: 1000px) {
    .formNarrow {
        width: 70%;
        margin-left: 15%;
    }

    .formNarrowest {
        width: 70%;
        margin-left: 15%;
    }

    .imageContainer {
        height: 100px;
        width: 20%;
        margin-left: 40%;
    }
}

@media only screen and (max-width: 700px) {
    .formNarrow {
        width: 80%;
        margin-left: 10%;
    }

    .imageContainer {
        height: 100px;
        width: 30%;
        margin-left: 35%;
    }
}
'''
'''--- packages/next-frontend/styles/components/hype-menu.module.css ---
.hypeMenu {
	opacity: 0;
	position: absolute;
	top: -70px;
	padding: 0;
	justify-content: space-between;
	align-items: center;
	z-index: -1;
	background: linear-gradient(315deg, var(--main-gradient));
	border-radius: 1rem;
	box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 1);
	transition: 0.3s ease-in-out;
	list-style-type: none;
	width: 120%;
}
.hypeMenu.isOpen {
	z-index: 9;
	opacity: 1;
	top: 50px
}
.hypeMenu li {
	margin: 1rem 0 1rem 0;
}
.hypeMenu li.divider {
	padding-bottom: 0.8rem;
	border-bottom: 1px solid white;
}
.hypeMenu li div.link {
	text-align: left;
}
.link {
	position: relative;
	margin-left: 1.5rem;
	margin-right: 1.5rem;
	font-size: 1rem;
	font-family: var(--heading-font);
	color: var(--body-text-color);
	text-align: center;
}
.linkSmall {
	font-size: 1.0rem;
}

'''
'''--- packages/next-frontend/styles/components/hype-registration-button.module.css ---
.registerButtonContainer {
	position: relative;
	margin: 1rem 0;
}

.moreInfoIcon:hover::after {
	content: "Problems Connecting?";
}
.signOutIcon {
	right: -3rem
}
.signOutIcon.single {
	right: -1.5rem
}
.signOutIcon:hover::after {
	content: "Log out your NEAR wallet."
}

.balance {
	/* border-radius: 0px; */
	cursor: default;
	font-family: var(--heading-font);
	margin: 0;
}
.balance:hover {
	transform: none;
}
.balance:active {
	box-shadow: inset 2px 1px 5px 1px rgba(255, 255, 255, 0.5);
}
.accountButton {
	font-family: var(--heading-font);
	font-weight: 100;
	font-size: 1.0rem;
}

'''
'''--- packages/next-frontend/styles/components/layout.module.css ---
.container {
	margin: 0 auto;
	min-height: 100%;
	
	padding: var(--nav-padding) 8rem 6rem;
	color: var(--body-text-color);
	font-family: var(--body-font);
}
.container.contained {
  max-width: 1440px;
}

.withScrim::after {
	height: calc(100vh); /*fallback for no vars*/
	/* setting the height with JS var --vh to determine true mobile window heights */
	height: calc((var(--vh, 1vh) * 100));
	content: "";
	width: 100vw;
	background-color: rgba(131, 131, 131, 0.3);
	position: fixed;
	top: 0;
	left: 0;
	z-index: -1;
}

.starsImageBg {
	position: fixed;
	top: 0;
	left: 0;
  height: 100vh;/*fallback for no vars*/
	height: calc((var(--vh, 1vh) * 100));
  width: 100vw;
  overflow: hidden;
	background-color: black;
	z-index: -2;
}
.starsImageBg img {
	opacity: 0;
	filter: blur(4px);
	transition: 1.5s ease-in-out;
}

.imageLoaded img {
	opacity: 1;
	filter: blur(0px);
}

.footer {
	position: fixed;
	bottom: 0;
	display: flex;
	align-items: center;
}

@media only screen and (max-width: 1024px) {
	.container {
		padding: var(--nav-padding) 4rem 4rem;
	}
}

@media only screen and (max-width: 768px) {
	.container {
		padding: var(--nav-padding) 2rem 2rem;
	}
}
@media only screen and (max-width: 480px) {
	.container {
		padding: var(--nav-padding) 1rem 1rem;
	}
}

'''
'''--- packages/next-frontend/styles/components/main-navigation.module.css ---
.toggleIcon {
	position: fixed;
	top: 0;
	left: 0;
	background: transparent;
	border: none;
	width: var(--nav-padding);
	height: var(--nav-padding);
	cursor: pointer;
	z-index: 10;
	transition: 0.5s;
}
.toggleIcon:hover {
	transform: scale(1.1);
}
.toggleIcon.pulse {
	animation: pulse 2.5s ease-in-out 5s 5;
}

.container {
	position: fixed;
	top: 0;
	left: -100%; 
	min-height: var(--nav-padding);
	opacity: 0;
	display: flex;
	width: 100%;
	padding: 0rem 6rem;
	justify-content: space-between;
	align-items: center;
	z-index: 9;
	background: linear-gradient(180deg, rgba(63, 76, 80, 1),rgba(60, 45, 63, 1), rgba(47, 36, 39, 1));
	border-bottom-right-radius: 3rem;
	box-shadow: 0 -5px 5px 5px rgba(0, 0, 0, 1);
	transition: 0.7s ease-in-out
}

.container.navActive {
	left: 0;
	opacity: 1;
}

.navTitle {
	margin: 0;
}

.linksContainer {
	display: flex;
	align-items: center;
}

.link {
	position: relative;
	margin-left: 1.5rem;
	font-size: 1.2rem;
	font-family: var(--heading-font);
	color: var(--body-text-color);
	text-align: center;
}

.link.selected::after {
	content: "";
	position: absolute;
	bottom: -0.7rem;
	left: -0.5rem;
	width: calc(100% + 1rem);
	height: 0.3rem;
	border-radius: 0.3rem;
	background-image: linear-gradient(90deg, var(--main-gradient));
}

@media only screen and (max-width: 480px) {
	.toggleIcon {
		width: 4rem;
		height: 4rem;
	}
	.container {
		flex-direction: column;
		padding: 0;
		left: 0;
		top: -22%;
	}
	.container.navActive {
		top: 0
	}
	.navTitle {
		margin: 1rem 0 0.5rem;
		padding: 0 0.5rem 0.2rem;
		border-bottom: 4px double var(--accent-color);
	}
	.linksContainer {
		display: flex;
		flex-direction: column;
		align-items: center;
	}
	.link {
		margin: 0 0 1rem;
		font-size: 1rem;
	}
	.link.selected::after {
		bottom: -0.4rem;
		height: 0.15rem;
		border-radius: 0.2rem;
	}
}

@keyframes pulse {
	0% {
		transform: scale(1);
	}
	60% {
		transform: scale(1);
	}
	70% {
		transform: scale(1.05);
	}
	80% {
		transform: scale(1);
	}
	90% {
		transform: scale(1.1);
	}
	100%{
		transform: scale(1);
	}
}
'''
'''--- packages/next-frontend/styles/components/modal.module.css ---
.wrapper {
	z-index: 100;
	position: fixed;
	left: 0;
	top: 100vh;
	width: 100vw;
	height: 100vh;
	
	display: flex;
	justify-content: center;
	align-items: center;
	background-color: rgba(61, 61, 61, 0.8);
	opacity: 0;
	transition: opacity 0.3s;
}
.wrapper.isOpen {
	top: 0;
	opacity: 1;
}
.body {
	margin-top: 7rem;
	opacity: 0;
	position: relative;
	background: rgb(70, 70, 70);
	border-radius: 1rem;
	box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5);
	width: 70vw;
	max-width: 1440px;
	max-height: 90vh;
	padding: 3rem 8rem 4rem;
	color: black;
	word-wrap: break-word;
	overflow-x: hidden;
	overflow-y: scroll;
	transition: 0.5s;
}
.wrapper.isOpen .body {
	margin-top: 0;
	opacity: 1;
}

.body p {
	line-height: 1.5rem;
}
.cancel {
	position: absolute;
	top: 1rem;
	right: 1rem;
}

@media only screen and (max-width: 1024px) {
	.body {
		width: 80vw;
		padding: 2rem 4rem 3rem;
	}
}

@media only screen and (max-width: 768px) {
	.body {
		width: 90vw;
		padding: 1rem 2rem 1rem;
	}
}
@media only screen and (max-width: 480px) {
	.body {
		padding: 1rem;
	}
	.cancel {
		top: 0.5rem;
		right: 0.5rem
	}
}
'''
'''--- packages/next-frontend/styles/components/proposal-new.module.css ---
.amount::placeholder {
    opacity: 1;
    display: block;
}
.back {
    position: absolute;
    line-height: 1rem;
}

'''
'''--- packages/next-frontend/styles/components/token-send.module.css ---
.label {
	position: relative;
	margin-left: 1.5rem;
	font-size: 1.2rem;
	font-family: var(--heading-font);
	color: var(--body-text-color);
	text-align: center;
}

.form {
    width: 40%;
    margin-left: 30%;
}

@media only screen and (max-width: 700px) {
    .form {
        width: 80%;
        margin-left: 10%;
    }
}

.form ul {
    list-style-type: none;
    padding-left: 0;
}

.form ul li {
    display: block;
}

.form ul li p.label {
    width: 40%;
}

/* .form ul li p.left {
    float: left;
}

.form ul li p.right {
    float: right;
    text-align: right;
} */

.amount::placeholder {
    opacity: 1;
    display: block;
}
.back {
    position: absolute;
    line-height: 1rem;
}
/* .amount {
    font-size: 5rem;
    width: 50%;
    background-color: transparent;
    border: none;
    color: white;
    margin-left: 25%;
    margin-bottom: 4rem;
    text-align: center;
} */

/* .amount:hover {
    border: none;
} */

/* input[type=number]::-webkit-inner-spin-button, 
input[type=number]::-webkit-outer-spin-button { 
  -webkit-appearance: none; 
  margin: 0; 
} */
'''
'''--- packages/next-frontend/styles/globals.css ---
html,
body {
  padding: 0;
  margin: 0;
	height: 100%;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;

	--nav-padding: 6rem;
	--main-gradient: rgb(0, 200, 255), rgb(222, 0, 255), rgb(255, 0, 62);
	--grey-gradient: rgba(63, 76, 80, 1), rgba(47, 36, 39, 1);
	--body-font: 'Roboto', sans-serif;
	--body-text-color: whitesmoke;
	--heading-font: 'Zen Dots', sans-serif;
	--heading-text-color: whitesmoke;
	--accent-color: skyblue
}
html {
	background-color: black;
}

#__next {
	height: 100%;
}

a {
  color: var(--accent-color);
  text-decoration: none;
}
button {
	cursor: pointer;
}

* {
  box-sizing: border-box;
}

@media only screen and (max-width: 480px) {
	body {
		--nav-padding: 2rem
	}
}

'''
'''--- packages/next-frontend/styles/pages/Artist.module.css ---
.highlight {
	display: grid;
	grid-template-columns: 1fr 1fr;
	margin: 50px auto;
	max-width: calc(1440px - 16rem); /*mimics padding in contained layout*/
}

.highlight div:first-child {
	justify-self: center;
}

.list {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	gap: 20px
}

@media only screen and (max-width: 768px) {
	.highlight {
		grid-template-columns: 1fr;
		gap: 2rem;
	}
}
'''
'''--- packages/next-frontend/styles/pages/Bounties.module.css ---
.gridCell {
	display: grid;
	grid-template-columns: 6rem 2fr 0.8fr;
	gap: 1rem;
	border-bottom: 2px solid rgba(128, 128, 128, 0.8);
	list-style: none;
	font-size: 1.3rem;
}

.gridCell p {
	margin-bottom: 1rem;
}
.gridCell a {
	color: inherit;
}
.gridCell svg {
	filter: hue-rotate(180deg);
}
.gridHeader {
	font-size: 1.5rem;
	font-weight: bold;
	border-bottom: 6px double var(--accent-color);
}

.gridHeader p {
	margin-top: 0;
}

@media only screen and (max-width: 480px) {
	.gridCell {
		font-size: 1rem;
		grid-template-columns: 4rem 2fr 1fr;
	}
	.gridHeader {
		font-size: 1.2rem;
	}
}
'''
'''--- packages/next-frontend/styles/pages/Home.module.css ---
.homeContainer {
	/* Calc with padding is needed to fit within layout, cant use 100% because layout uses min-height */
	height: calc(100vh - 12rem); /*fallback for no vars*/
	/* setting the height with JS var --vh to determine true mobile window heights */
	height: calc((var(--vh, 1vh) * 100) - (var(--nav-padding) * 2));
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
}
.homeTitle {
	position: relative;
	margin-bottom: 5rem;
	cursor: pointer;
	transition: 0.5s;
	filter: blur(0px);
	--title-width: 50rem;
	--color-width-dif: calc(var(--title-width) / 10);
	--move-amount: 0.8;
}
.homeTitle:hover {
	transform: scale(1.08);
}
.homeTitle:not(.imageLoaded) {
	filter: blur(2px);
	animation: blur-pulse 3s infinite ease-in-out;
}
.titlePlain {
	width: var(--title-width);
	filter: drop-shadow(1px 1px 4px rgba(128, 128, 128, 0.4))
}
.titlePlain.isActive {
	filter:invert(1) drop-shadow( 1px 1px 3px rgba(49, 49, 49, 0.4));
}

.titleColor {
	position: absolute;
	top: calc(var(--color-width-dif) / -2);
	left: calc(var(--color-width-dif) / -2);
	width: calc(var(--title-width) + var(--color-width-dif));
}
.titleColor.imageLoaded {
	animation: wiggle 15s ease-in-out 0s infinite alternate;
}
.titleColor.isActive {
	filter: brightness(0);
	animation: none;
}
.logo {
	position: absolute;
	top: -3rem;
	right: -6rem;
	width: 12rem;
	transform: rotateZ(25deg);
	z-index: -1;
	opacity: 0.6;
	transition: 1.5s ease-in-out;
}
.logo.isActive {
	opacity: 0.7;
	margin-top: -8%;
	margin-right: -6%;
	transform: rotateZ(6deg);
	/* animation: fly 10s ease-in-out 0s infinite alternate; */
}

.gridImageBg {
	position: absolute;
	bottom: 0;
	left: 0;
  height: 20vw;
  width: 100vw;
  overflow: hidden;
}

.gridImageBg img {
	opacity: 0;
	filter: blur(4px);
	transition: 0.9s ease-in-out;
}

.gridImageBg.imageLoaded img {
	opacity: 1;
	filter: blur(0px);
}

.waves {
	position: absolute;
	top: 0;
	left: 0;
	z-index: -1;
	filter: blur(0.5px) brightness(0.8);
}

@keyframes blur-pulse {
	0% {
		filter: blur(2px);
	}
	50% {
		filter: blur(14px);
	}
	100% {
		filter: blur(2px);
	}
}

/* @keyframes fly {
	0% {
		transform: rotateZ(25deg) translate(0rem, 0rem);
	}
	20% {
		transform: rotateZ(25deg) translate(calc(var(--move-amount) * 5rem), calc(var(--move-amount) *-5rem)) rotateX(30deg);
	}
	70% {
		transform: rotateZ(-30deg) translate(calc(var(--move-amount) * -50rem), calc(var(--move-amount) * -30rem));
	}
	100% {
		transform:rotateZ(30deg) translate(calc(var(--move-amount) * -40rem), 0rem) rotateY(360deg);
	}
} */

@keyframes wiggle {
	0% {
		margin-top: 0;
		margin-left: 0;
	}
	10% {
		margin-top: 0;
		margin-left: 0;
	}
	20% {
		margin-top: calc(var(--move-amount) * 1.5rem);
		margin-left: calc(var(--move-amount) * 1.5rem);
	}
	30% {
		margin-top: calc(var(--move-amount) * 1.5rem);
		margin-left: calc(var(--move-amount) * -1.5rem);
	}
	40% {
		margin-top: calc(var(--move-amount) * -1.5rem);
		margin-left: calc(var(--move-amount) * 1.5rem);
	}
	50%{
		margin-top: calc(var(--move-amount) * -1.5rem);
		margin-left: calc(var(--move-amount) * -1.5rem);
	}
	60% {
		margin-top: calc(var(--move-amount) * 1.5rem);
		margin-left: calc(var(--move-amount) * -1.5rem);
	}
	70% {
		margin-top: calc(var(--move-amount) * 2rem);
		margin-left: calc(var(--move-amount) * 2rem);
	}
	80% {
		margin-top: calc(var(--move-amount) * 2rem);
		margin-left: calc(var(--move-amount) * -2rem);
	}
	90% {
		margin-top: calc(var(--move-amount) * -2rem);
		margin-left: calc(var(--move-amount) * 2rem);
	}
	100% {
		margin-top: 0;
		margin-left: 0
	} 
}

@media only screen and (max-width: 1024px) {
	.homeTitle {
		--title-width: 35rem;
		--move-amount: 0.6;
	}
}

@media only screen and (max-width: 768px) {
	.homeTitle {
		--title-width: 28rem;
		--move-amount: 0.4;
	}
	.logo {
		top: -3.5rem;
		right: -3rem;
		width: 7rem;
	}
}

@media only screen and (max-width: 480px) {
	.homeTitle {
		--title-width: 18rem;
		--move-amount: 0.2;
	}
	.logo {
		transform: rotateZ(0deg);
		top: -2rem;
		right: calc(50% - 3rem);
		width: 6rem;
	}
}

'''
'''--- packages/next-frontend/styles/pages/Proposals.module.css ---
.proposalList {
	padding: 0;
	display: flex;
	flex-wrap: wrap;
}

.proposalBox {
	/* display: grid; */
	grid-template-columns: 6rem 2fr 0.8fr;
	gap: 0.1rem;
	list-style: none;
	font-size: 1.2rem;
	margin-bottom: 1rem;
	padding: 1rem;
	width: 49%;
	margin-right: 1%;
	display: flex;
	flex-direction: column;
}

@media only screen and (max-width: 1000px) {
    .proposalBox {
		width: 100%;
		margin-right: 0;
	}
}
'''
'''--- packages/next-frontend/styles/utils.module.css ---
/* Global elements */
.titleXl {
	font-size: 6rem;
	text-shadow: 3px 3px 6px grey;
	text-align: center;
	font-family: var(--heading-font);
	color: var(--heading-text-color);
}

.title {
	font-size: 4rem;
	text-shadow: 2px 2px 2px grey;
	text-align: center;
	font-family: var(--heading-font);
	color: var(--heading-text-color);
}

.titleSm {
	font-size: 2rem;
	text-shadow: 1px 1px 1px grey;
	font-family: var(--heading-font);
	color: var(--heading-text-color);
}

.scrim {
	background: linear-gradient(rgba(49, 49, 49, 0.8), rgba(17, 17, 17, 0.8));
	padding: 3rem;
	border-radius: 1rem;
	box-shadow: inset 0 0 4rem 0.5rem rgba(0, 0, 0, 0.8);
}

.scrimLight {
	background: linear-gradient(rgba(49, 49, 49, 0.2), rgba(17, 17, 17, 0.2));
	padding: 3rem;
	border-radius: 1rem;
	box-shadow: inset 0 0 4rem 0.5rem rgba(0, 0, 0, 0.8);
}

.flexGrow {
	/* flex-grow: 1; */
}

.flexGrowFill {
	flex-grow: 4;
}

.primaryButton, .secondaryButton {
	padding: 1rem 1.5rem;

	color: var(--body-text-color);
	font-family: var(--body-font);
	font-size: 1.2rem;
	font-weight: bold;
	text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);

	border: none;
	border-radius: 1.3rem;

	cursor: pointer;
	transition: 0.3s;
}
.primaryButton:hover, .secondaryButton:hover {
	transform: scale(1.05);
}
.primaryButton:active, .secondaryButton:active {
	box-shadow: inset 2px 1px 5px 1px rgba(73, 73, 73, 0.5);
}
.primaryButton:disabled, .secondaryButton:disabled {
	filter: grayscale(1.0);
}
.primaryButton {
	background: linear-gradient(315deg, var(--main-gradient));
	box-shadow: inset 2px 1px 5px 1px rgba(255, 255, 255, 0.5);
}
.secondaryButton {
	background: linear-gradient(315deg, rgb(60, 60, 60), rgb(80, 80, 80));
	box-shadow: inset 2px 1px 5px 1px rgba(167, 167, 167, 0.2);
}
.infoIcon {
	position: absolute;
	top: -0.5rem;
	right: -1.5rem
}
.infoIcon:hover::after {
	z-index: 5;
	position: absolute;
	top: 1.5rem;
	left: 0.5rem;
	width: 9rem;
	background-color: rgba(78, 78, 78, 0.8);
	padding: 0.7rem 0.5rem;
	border-radius: 0.5rem;
	color: var(--body-text-color)
}

/* Helpers */
.noStyle {
	padding: 0;
	background-color: transparent;
	border: none;
	color: inherit;
}
.titleLabel {
	margin-top: 1.6rem;
	margin-bottom: 3rem;
}
.formLink {
	margin-top: 1rem;
}
.centerContent {
	display: flex;
	justify-content: center;
	text-align: center;
	align-items: center;
}
.centeredList {
	display: flex;
	justify-content: center;
	gap: 1rem;
	flex-wrap: wrap;
}
.infoText {
	text-align: center;
	font-style: italic;
}

.error {
	color: rgb(255, 74, 113);
}

.smallText {
	font-size: 1rem;
}

.inputInfo {
	margin: 0;
}
.blockHeight {
	min-height: 3rem;
}

@media only screen and (max-width: 480px) {
	.titleXl {
		font-size: 3rem;
	}
	.title {
		font-size: 2rem;
	}
	.titleSm {
		font-size: 1.5rem;
	}
	.scrim {
		padding: 1.2rem;
	}
	.primaryButton, .secondaryButton {
		font-size: 1rem;
	}
	.infoIcon:hover::after {
		display: none;
	}
}
'''
'''--- packages/next-frontend/tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

'''
'''--- packages/next-frontend/types/artists.ts ---
//If updating types within the types folder please make sure to do so in both the next-frontend and ts-api workspaces;
export interface ArtistProfile {
	id: number;
	wallet_address: string;
	name: string;
	bio?: string;
	socials?: Social[];
	collection?: NFT[];
}
export type ArtistProfileRequest = Omit<ArtistProfile, "id">
export interface ArtistProfileMunged extends Omit<ArtistProfile, "collection"> {
	collection: NFT[]
}

export enum ArtistSorting {
	OldestMember = "id",
	NewestMember = "id DESC",
	AZ = "name",
	ZA = "name DESC",
	Random = "RANDOM ()",
	OldestFeatured = "start_date",
	NewestFeatured = "start_date DESC"
}
export enum ArtistFilter {
	pastFeatured
}
export interface GetArtistsParams {
	limit?: number;
	page?: number;
	search?: string;
	sorting?: ArtistSorting;
	filter?: ArtistFilter;
}

export enum SOCIAL_NAMES {
	FACEBOOK = "facebook",
	TWITTER = "twitter",
	INSTAGRAM = "instagram",
}

export interface Social {
	name: SOCIAL_NAMES | string;
	url: string;
}

export interface NFT {
	id: number;
	owner_address: string;
	title: string;
	description?: string;
	market_url: string;
	preview_url?: string;
};
export type NFTRequest = Omit<NFT, "id">

export interface UrlContent {
	url: string;
	title: string;
	siteName: string | undefined;
	description: string | undefined;
	mediaType: string;
	contentType: string | undefined;
	images: string[];
	videos: any[];
	favicons: string[];
}

export interface FeaturedArtist {
	id: number;
	wallet_address: string;
	is_current: boolean;
	start_date: Date;
}

export interface FeaturedArtistEntries {
	id: number;
	wallet_address: string;
	tickets_entered: number;
	entry_date: Date;
}
'''
'''--- packages/ts-api/README.md ---
## Welcome to the HypeDAO API!

### How to get connected to the Postgres database:
* Delete the "example-" from ".example-env" so the file is named ".env". Then contact either Ev3reth or another established developer for the needed environment variables. 

'''
'''--- packages/ts-api/package.json ---
{
  "name": "ts-api",
  "version": "1.0.0",
  "main": "dist/index.js",
  "license": "MIT",
  "devDependencies": {
    "@types/cors": "^2.8.12",
    "@types/express": "^4.17.13",
    "@types/node": "^16.7.10",
    "@types/pg": "^8.6.1",
    "nodemon": "^2.0.12",
    "ts-node": "^10.2.1",
    "typescript": "^4.4.2"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^10.0.0",
    "express": "^4.17.1",
    "link-preview-js": "^2.1.8",
    "pg": "^8.7.1"
  },
  "scripts": {
    "dev": "nodemon --watch 'src/**/*.ts' --exec 'ts-node' src/index.ts",
    "build": "tsc",
    "start": "node dist/index.js",
    "scripts": "ts-node src/postgres/scripts.ts"
  }
}

'''
'''--- packages/ts-api/src/handlers/artists.ts ---
import { Request, Response } from 'express';
import { ArtistFilter, ArtistProfile, ArtistProfileRequest, ArtistSorting, GetArtistsParams } from "../types/artists";

import db from '../postgres/pool'

export async function createArtistProfile(req: Request, res: Response) {
	const {
		wallet_address,
		name,
		bio,
		socials,
		collection
	}: ArtistProfileRequest = req.body;

	const stringSocials = JSON.stringify(socials) //Must stringify an array of objects

	const query = {
		text: `
			INSERT INTO artist_profile (
				wallet_address,
				name,
				bio,
				socials,
				collection
			)
			VALUES($1, $2, $3, $4, $5)
			RETURNING *;
		`,
		values: [
			wallet_address,
			name,
			bio,
			stringSocials,
			collection
		]
	}
	const client = await db.getConnection()
	const response = await client.query(query)
		.then(res => res.rows[0])
		.catch(error => console.log(error))
		.finally(() => db.endConnection(client))

	return res.json(response)
}

export async function updateArtistProfile(req: Request, res: Response) {
	const {
		name,
		bio,
		socials,
		collection,
		id
	}: ArtistProfile = req.body;

	const stringSocials = JSON.stringify(socials) //Must stringify an array of objects

	const query = {
		text: `
			UPDATE artist_profile
			SET
				name = $1,
				bio = $2,
				socials = $3,
				collection = $4
			WHERE id = $5
			RETURNING *
		`,
		values: [
			name,
			bio,
			stringSocials,
			collection,
			id
		]
	}

	const client = await db.getConnection()
	const response = await client.query(query)
		.then(res => res.rows[0])
		.catch(error => console.log(error))
		.finally(() => db.endConnection(client))

	return res.json(response)
}

export async function getArtistProfiles(req: Request, res: Response) {
	const {
		limit = 20,
		page = 1,
		sorting,
		filter = null,
		search = ""
	}: GetArtistsParams = req.body

	const offset = (page - 1) * limit

	const sortChecked = Object.values(ArtistSorting).includes(sorting)
		? sorting
		: ArtistSorting.Random

	function getQuery() {
		switch (filter) {
			case ArtistFilter.pastFeatured: {
				return `
					SELECT
						fa.*,
						ap.*,
						json_agg(n.*) AS collection
					FROM
						FeaturedArtist fa
						LEFT JOIN artist_profile ap ON fa.wallet_address = ap.wallet_address
						LEFT JOIN nft n ON n.id = ap.collection[1]
					WHERE
						name LIKE $1
					GROUP BY ap.id
					ORDER BY ${sortChecked}
					LIMIT $2
					OFFSET $3
				`
			}
			default: {
				return `
					SELECT
						ap.*,
						json_agg(n.*) AS collection
					FROM
						artist_profile ap
						LEFT JOIN nft n ON n.id = ap.collection[1]
					WHERE
						name LIKE $1
					GROUP BY ap.id
					ORDER BY ${sortChecked}
					LIMIT $2
					OFFSET $3
				`
			}
		}
	}
	const query = {
		text: getQuery(),
		values: [`%${search}%`, limit, offset]
	}
	const client = await db.getConnection()
	const response = await client.query(query)
		.then(res => res.rows)
		.catch(error => console.log(error))
		.finally(() => db.endConnection(client))

	return res.json(response)
}

export async function getArtistProfile(req: Request, res: Response) {
	const { id } = req.params;
	const query = {
		text: `
			SELECT
				ap.*,
				json_agg(n.*) AS collection
			FROM
				artist_profile ap
				LEFT JOIN nft n ON n.id = ANY (ap.collection)
				WHERE ap.id = $1
				GROUP BY ap.id
		`,
		values: [id]
	}

	const client = await db.getConnection()
	const response = await client.query(query)
		.then(res => res.rows[0])
		.catch(error => console.log(error))
		.finally(() => db.endConnection(client))

	return res.json(response)
}

'''
'''--- packages/ts-api/src/handlers/featured.ts ---
//create featured artist
	//update all other featured artist rows to is_current false

//get featured artist

//check not featured in the past 4 weeks
//create entries
//get entries by week
'''
'''--- packages/ts-api/src/handlers/index.ts ---
import { Request, Response } from 'express';

export const rootHandler = (_req: Request, res: Response) => {
	return res.send('API is working 🤓');
};
'''
'''--- packages/ts-api/src/handlers/nfts.ts ---
import { Request, Response } from 'express';
import { NFTRequest, NFT } from "../types/artists";
import { getLinkPreview } from "link-preview-js"

import db from '../postgres/pool'

export async function createNFT(req: Request, res: Response) {
	const {
		owner_address,
		title,
		description,
		market_url,
		preview_url
	}: NFTRequest = req.body;

	const query = {
		text: `
			INSERT INTO nft (
				owner_address,
				title,
				description,
				market_url,
				preview_url
			)
			VALUES ($1, $2, $3, $4, $5)
			RETURNING *;
		`,
		values: [
			owner_address,
			title,
			description,
			market_url,
			preview_url
		]
	}
	const client = await db.getConnection()
	const response = await client.query(query)
		.then(res => res.rows[0])
		.catch(error => console.log(error))
		.finally(() => db.endConnection(client))

	return res.json(response)
}
export async function updateNFT(req: Request, res: Response) {
	const {
		owner_address,
		title,
		description,
		market_url,
		preview_url,
		id
	}: NFT = req.body;

	const query = {
		text: `
			UPDATE nft
			SET
				owner_address = $1,
				title = $2,
				description = $3,
				market_url = $4,
				preview_url = $5
			WHERE id = $6
			RETURNING *;
		`,
		values: [
			owner_address,
			title,
			description,
			market_url,
			preview_url,
			id
		]
	}
	const client = await db.getConnection()
	const response = await client.query(query)
		.then(res => res.rows[0])
		.catch(error => console.log(error))
		.finally(() => db.endConnection(client))

	return res.json(response)
}

export async function deleteNFT(req: Request, res: Response) {
	const { id } = req.params;
	const query = {
		text: `
			DELETE FROM nft
			WHERE id = $1
			RETURNING *
		`,
		values: [id]
	}

	const client = await db.getConnection()
	const response = await client.query(query)
		.then(res => res.rows[0])
		.catch(error => console.log(error))
		.finally(() => db.endConnection(client))

	return res.json(response)
}

export async function getUrlContent(req: Request, res: Response) {
	const { url } = req.body
	console.log("fetching content from url: ", url)
	const content = await getLinkPreview(url)

	return res.json(content)
}

'''
'''--- packages/ts-api/src/index.ts ---
import express from 'express'
import cors from 'cors'
import dotenv from "dotenv"
dotenv.config() // must be fired before handlers are imported
import { rootHandler } from './handlers/index';
import artistRoutes from './routes/artists'
import nftRoutes from './routes/nfts'

const app = express();
const port = process.env.PORT || '8000';

app.use(express.json())
app.use(cors())

app.get('/', rootHandler);
app.use('/api/v1', artistRoutes)
app.use('/api/v1', nftRoutes)

app.listen(port, () => {
	return console.log(`Server is listening on ${port}`);
});

export default app
'''
'''--- packages/ts-api/src/postgres/pool.ts ---
import { query } from 'express';
import { Client, Pool, QueryConfig, QueryResult } from 'pg';
//Check out the docs here:
//https://node-postgres.com/

const {
	DATABASE_URL,
	DATABASE_CONNECTION_POOL
} = process.env

async function getConnection() {
	const client = new Client({
		connectionString: DATABASE_URL,
		ssl: {
			rejectUnauthorized: false
		}
	});

	await client.connect();
	return client
}

export default {
	getConnection,
	endConnection: (client: Client) => client.end()
}

//We are currently on Heroku Hobby tier which doesn't allow pooling, leaving the code here for when we upgrade
// const pool = new Pool({
// 	connectionString: DATABASE_CONNECTION_POOL,
// 	ssl: {
// 		rejectUnauthorized: false
// 	}
// })

// pool.on('error', (err, client) => {
// 	console.error('Unexpected error on idle client', err)
// 	process.exit(-1)
// })

//Check out these docs for <pool.query> vs <client = await pool.connect -> client.query>
//TLDR: don't use the shortcut pool.query for transactions
//https://node-postgres.com/api/pool
// export default {
// 	query: (query: string | QueryConfig) => pool.query(query)
// }
'''
'''--- packages/ts-api/src/postgres/scripts.ts ---
require('../index') //needs the server to be running for SSL to work, but you can't already be running the API;
import db from './pool'

// async function createArtistProfileTable() {
// 	const query = `CREATE TABLE IF NOT EXISTS artist_profile (
// 		id serial PRIMARY KEY,
// 		wallet_address VARCHAR(64) UNIQUE NOT NULL,
// 		name VARCHAR(64) UNIQUE NOT NULL,
// 		bio TEXT,
// 		collection INT[],
// 		socials JSONB
// 	)`
// 	const client = await db.getConnection()
// 	client.query(query)
// 		.then(res => console.log("finished creating artist profile table", res))
// 		.catch(e => console.log("error creating table: ", e))
// 		.finally(() => db.endConnection(client))
// }
// createArtistProfileTable()

// async function createNftTable() {
// 	const query = `CREATE TABLE IF NOT EXISTS nft (
// 		id serial PRIMARY KEY,
// 		owner_address VARCHAR(64) NOT NULL,
// 		title VARCHAR(64) NOT NULL,
// 		description TEXT,
// 		market_url TEXT NOT NULL,
// 		preview_url TEXT
// 	)`
// 	const client = await db.getConnection()
// 	client.query(query)
// 		.then(res => console.log("finished creating nft table", res))
// 		.catch(e => console.log("error creating table: ", e))
// 		.finally(() => db.endConnection(client))
// }
// createNftTable()

// async function createFeaturedArtistTable() {
// 	const query = `CREATE TABLE IF NOT EXISTS featured_artist (
// 		id serial PRIMARY KEY,
// 		wallet_address VARCHAR(64) UNIQUE NOT NULL,
// 		is_current BOOLEAN,
// 		start_date DATE NOT NULL DEFAULT CURRENT_DATE
// 	)`
// 	const client = await db.getConnection()
// 	client.query(query)
// 		.then(res => console.log("finished creating featured artist table", res))
// 		.catch(e => console.log("error creating table: ", e))
// 		.finally(() => db.endConnection(client))
// }
// createFeaturedArtistTable()

// async function createArtistEntriesTable() {
// 	const query = `CREATE TABLE IF NOT EXISTS featured_artist_entries (
// 		id serial PRIMARY KEY,
// 		wallet_address VARCHAR(64) NOT NULL,
// 		tickets_entered INT NOT NULL,
// 		entry_date DATE NOT NULL DEFAULT CURRENT_DATE
// 	)`
// 	const client = await db.getConnection()
// 	client.query(query)
// 		.then(res => console.log("finished creating featured artist entries table", res))
// 		.catch(e => console.log("error creating table: ", e))
// 		.finally(() => db.endConnection(client))
// }
// createArtistEntriesTable()

'''
'''--- packages/ts-api/src/routes/artists.ts ---
import express from 'express'
import { createArtistProfile, getArtistProfiles, updateArtistProfile, getArtistProfile } from '../handlers/artists'
const router = express.Router()

router.post('/artist/profile', createArtistProfile)
router.put('/artist/profile', updateArtistProfile)
router.get('/artist/profile/:id', getArtistProfile)
router.post('/artist/profiles', getArtistProfiles)

export default router

'''
'''--- packages/ts-api/src/routes/nfts.ts ---
import express from 'express'
import { createNFT, updateNFT, deleteNFT, getUrlContent } from '../handlers/nfts'
const router = express.Router()

router.post('/nft/url-content', getUrlContent)
router.post('/nft', createNFT)
router.put('/nft', updateNFT)
router.delete('/nft/:id', deleteNFT)

export default router
'''
'''--- packages/ts-api/src/types/artists.ts ---
//If updating types within the types folder please make sure to do so in both the next-frontend and ts-api workspaces;
export interface ArtistProfile {
	id: number;
	wallet_address: string;
	name: string;
	bio?: string;
	socials?: Social[];
	collection?: number[];
}
export type ArtistProfileRequest = Omit<ArtistProfile, "id">
export interface ArtistProfileMunged extends Omit<ArtistProfile, "collection"> {
	collection: NFT[]
}

export enum ArtistSorting {
	OldestMember = "id",
	NewestMember = "id DESC",
	AZ = "name",
	ZA = "name DESC",
	Random = "RANDOM ()",
	OldestFeatured = "start_date",
	NewestFeatured = "start_date DESC"
}
export enum ArtistFilter {
	pastFeatured
}
export interface GetArtistsParams {
	limit?: number;
	page?: number;
	search?: string;
	sorting?: ArtistSorting;
	filter?: ArtistFilter;
}

export enum SOCIAL_NAMES {
	FACEBOOK = "facebook",
	TWITTER = "twitter",
	INSTAGRAM = "instagram",
}

export interface Social {
	name: SOCIAL_NAMES | string;
	url: string;
}

export interface NFT {
	id: number;
	owner_address: string;
	title: string;
	description?: string;
	market_url: string;
	preview_url?: string;
};
export type NFTRequest = Omit<NFT, "id">

export interface UrlContent {
	url: string;
	title: string;
	siteName: string | undefined;
	description: string | undefined;
	mediaType: string;
	contentType: string | undefined;
	images: string[];
	videos: any[];
	favicons: string[];
}

export interface FeaturedArtist {
	id: number;
	wallet_address: string;
	is_current: boolean;
	start_date: Date;
}

export interface FeaturedArtistEntries {
	id: number;
	wallet_address: string;
	tickets_entered: number;
	entry_date: Date;
}
'''
'''--- packages/ts-api/tsconfig.json ---
{
	/* Visit https://aka.ms/tsconfig.json to read more about this file */
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "target": "es5",
    "noImplicitAny": true,
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "dist",
		"declaration": true,
    "baseUrl": ".",
    "paths": {
      "*": ["node_modules/*", "src/types/*"]
    }
  },
  "include": ["src/**/*", "../types/artists.ts"],
	"exclude": ["node_modules"]
}
'''
'''--- scripts/cache/init.sh ---
#!/bin/bash

# First transaction on hype.tkn.near
# blockhash: 'BuDrmBTYbzqCDq59B4kdme4YzdYMVfJskCNnookFaq6A',
# Block created: August 21, 2021 at 2:55:43pm

dao-stats init hype.tkn.near --force --accounts \
    chloe.near,defeatofclay.near,empress.near,holikao.near,joshua.near,jsnow.near,lilses.near,magusz.near,marafonec2021.near,q-hmd.near,starpause.near,tabear.near,trendheo.near,verbash.near

'''
'''--- scripts/cache/update.sh ---
#!/bin/bash

echo "Running cache update with recent blocks..."

cd cache

dao-stats update hype.tkn.near

git config user.name github-actions
git config user.email github-actions@github.com

git add .
git commit -m "Updates DAO cache."
git push

cd ..
rm -Rf cache

'''
'''--- scripts/tools/dao-stats/install.sh ---
#!/bin/bash

cd packages/dao-stats/
yarn install
sudo yarn global add .
'''
'''--- scripts/tools/testnet/check.sh ---
#!/bin/bash
source neardev/dev-account.env

if [ -z "$1" ]
  then
    echo "No argument supplied"
    exit 1
fi

near view $CONTRACT_NAME ft_balance_of '{ "account_id": "'$1'" }'
'''
'''--- scripts/tools/testnet/clean.sh ---
#!/bin/bash

# Remove account
source neardev/dev-account.env
# Currently there is no API to burn NEAR tokens directly.
# One workaround is to set the beneficiary account id to system.
# system is an account that can never be created and is used 
# internally for refunds. When the beneficiary account does not 
# exist, the tokens transferred through account deletion are 
# automatically burnt.
# https://stackoverflow.com/questions/67343963/near-protocol-equivalent-of-buring-near-tokens-by-sending-to-address0
near delete $CONTRACT_NAME system
rm neardev/dev-account.env
'''
'''--- scripts/tools/testnet/deploy.sh ---
#!/bin/bash

export NEAR_ENV=testnet

# Create development account and deploy to testnet.
# Dev account will be stored in neardev/dev-account.env
near dev-deploy --wasmFile packages/ft-contract/res/fungible_token.wasm --helperUrl https://near-contract-helper.onrender.com
source neardev/dev-account.env

# Initialize token contract
near call $CONTRACT_NAME new '{"owner_id": "'$CONTRACT_NAME'", "total_supply": "10000000000000000000000", "metadata": { "spec": "ft-1.0.0", "name": "HYPE", "symbol": "HYPE", "decimals": 18 }}' --accountId $CONTRACT_NAME
'''
'''--- scripts/tools/testnet/deploy_dao.sh ---
#!/bin/bash

# Deploy and initialize Sputnik DAO factory
near dev-deploy packages/dao-contracts/sputnikdao-factory2/res/sputnikdao_factory2.wasm

source neardev/dev-account.env
near call $CONTRACT_NAME new --accountId $CONTRACT_NAME

# Configure and create HypeDAO contract
COUNCIL='["' $CONTRACT_NAME '"]'
ARGS=`echo '{"config": {"name": "hype", "symbol": "HYPE", "decimals": 24, "purpose": "test", "bond": "1000000000000000000000000", "metadata": ""}, "policy": '$COUNCIL'}' | base64 -w 0`
near call $CONTRACT_NAME create "{\"name\": \"hype\", \"args\": \"$ARGS\"}"  --accountId $CONTRACT_NAME --amount 5 --gas 150000000000000

# Add initial proposal
# HYPE_DAO=hype.$CONTRACT_NAME
# near call $HYPE_DAO add_proposal '{"proposal": {"description": "Test proposal", "submission_time":"60000000000", "kind": {"Transfer": {"token_id": "hype.tokens.testnet", "receiver_id": "'$CONTRACT_NAME'", "amount": "1000000000000", "msg": "First payout proposal"}}}}' --accountId $CONTRACT_NAME --amount 1

'''
'''--- scripts/tools/testnet/fund_account.sh ---
#!/bin/bash

source neardev/dev-account.env

if [ -z "$1" ]
  then
    echo "No argument supplied"
    exit 1
fi

echo "Transferring to" $1 "..."
near call $CONTRACT_NAME ft_transfer '{"receiver_id": "'$1'", "amount": "7889099999981000000"}' --accountId $CONTRACT_NAME --amount 0.000000000000000000000001

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    /* Basic Options */
    "target": "es5",
    "module": "commonjs",
    "lib": ["ESNext"],

    /* Strict Type-Checking Options */
    "strict": true,

    /* Module Resolution Options */
    "moduleResolution": "node",
    "esModuleInterop": true,

    /* Advanced Options */
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true
  }
}
'''