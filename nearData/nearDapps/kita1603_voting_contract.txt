*GitHub Repository "kita1603/voting_contract"*

'''--- README.md ---
<br />
<br />

<p>
<img src="https://near.org/wp-content/themes/near-19/assets/img/neue/logo.svg?t=1600963474" width="240">
</p>

<br />
<br />

## NEAR Voting Application
### Requirements
##### IMPORTANT: Make sure you have the latest version of NEAR Cli and Node Version > 12.x

1. [Node.js](https://nodejs.org/en/download/package-manager/)
2. (optional) [near-cli](https://docs.near.org/tools/near-cli)

```
npm i -g near-cli
```
3. (optional) yarn
```
npm i -g yarn
```
### To run on NEAR testnet

```bash
npm install && npm dev
```

with yarn:

```bash
yarn && yarn dev
```

The server that starts is for static assets and by default serves them to http://localhost:1234. Navigate there in your browser to see the app running!

NOTE: Both contract and client-side code will auto-reload once you change source files.

### To run tests

```bash
npm test

with yarn:

```bash
yarn test
```

### Deploy

#### Step 1: Create account for the contract

You'll now want to authorize NEAR CLI on your NEAR account, which will allow NEAR CLI to deploy contracts on your NEAR account's behalf \(and spend your NEAR account balance to do so\).

Type the command `near login` which opens a webpage at NEAR Wallet. Follow the instructions there and it will create a key for you, stored in the `/neardev` directory.

#### Step 2:

Modify `src/config.js` line that sets the account name of the contract. Set it to the account id from step 1.

NOTE: When you use [create-near-app](https://github.com/nearprotocol/create-near-app) to create the project it'll infer and pre-populate name of contract based on project folder name.

```javascript
const CONTRACT_NAME = 'react-template'; /* TODO: Change this to your contract's name! */
const DEFAULT_ENV = 'development';
...
```

#### Step 3:

Check the scripts in the package.json, for frontend and backend both, run the command:

```bash
npm run deploy
```

with yarn:

```bash
yarn deploy
```

NOTE: This uses [gh-pages](https://github.com/tschaub/gh-pages) to publish resulting website on GitHub pages. It'll only work if project already has repository set up on GitHub. Feel free to modify `deploy:pages` script in `package.json` to deploy elsewhere.

### To Explore

- `contract/src/lib.rs` for the contract code and unit tests
- `src/index.html` for the front-end HTML
- `src/main.js` for the JavaScript front-end code and how to integrate contracts
- `src/main.test.js` for the JavaScript integration tests of smart contract

'''
'''--- contract/Cargo.toml ---
[package]
name = "voting-app"
version = "0.2.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
# serde = { version = "1.0", features = ["derive"] }
# serde_json = { git = "https://github.com/nearprotocol/json", rev = "1f5779f3b0bd3d2a4b0b975abc46f3d3fe873331", features = ["no_floats"] }
# near-bindgen = "0.6.0"
# borsh = "*"
# wee_alloc = "0.4.5"
serde = { version = "*", features = ["derive"] }
serde_json = "*"
borsh = "*"
near-sdk = "2.0.0"
wee_alloc = { version = "0.4.5", default-features = false, features = [] }
bs58 = "0.3"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
# Voting App

Allow voting upon a specific item on NEAR.

## Testing
To test run:
```bash
cargo test --package voting-app -- --nocapture
```

'''
'''--- contract/build.js ---
const shell = require('shelljs');

shell.fatal = true; // same as "set -e"

shell.cd('contract');
// Note: see flags in ./cargo/config
shell.exec('cargo build --target wasm32-unknown-unknown --release');
shell.cp('./target/wasm32-unknown-unknown/release/voting_app.wasm', './res');
'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{env, near_bindgen};
use near_sdk::serde::{Deserialize, Serialize};
use std::collections::HashMap;

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

#[derive(Serialize, Deserialize, Clone, BorshDeserialize, BorshSerialize)]
pub struct VotingOption {
    option_id: String,
    message: String,
}

#[derive(Serialize, Deserialize, Clone, BorshDeserialize, BorshSerialize)]
pub struct VotingOptions {
    // Author of the vote (account id).
    creator: String,
    // Unique voting id.
    poll_id: String,
    // Question voted on.
    question: String,
    variants: Vec<VotingOption>,
}

#[derive(Serialize, Deserialize, Clone, BorshDeserialize, BorshSerialize)]
pub struct VotingResults {
    // Unique poll id.
    poll_id: String,
    // Map of option id to the number of votes.
    variants: HashMap<String, i32>,
    // Map of voters who already voted.
    voted: HashMap<String, i32>,
}

#[derive(Serialize, Deserialize)]
pub struct VotingStats {
    poll: VotingOptions,
    results: VotingResults,
}

#[near_bindgen]
#[derive(Default, BorshDeserialize, BorshSerialize)]
pub struct Voting {
    // Map of poll id to voting options.
    polls: HashMap<String, VotingOptions>,
    // Map of poll id to voting results.
    results: HashMap<String, VotingResults>,
}

#[near_bindgen]
impl Voting {
    pub fn vote(&mut self, poll_id: String, votes: HashMap<String, i32>) -> bool {
        let voter_contract = env::signer_account_id();
        let owner_contract = env::current_account_id();
        env::log(
            format!(
                "{} is voting on {} owner is {}",
                voter_contract, poll_id, owner_contract
            )
            .as_bytes(),
        );
        // Now we need to find a contract to vote for.
        match self.results.get_mut(&poll_id) {
            Some(results) => {
                match results.voted.get(&voter_contract) {
                    Some(_) => {
                        env::log(
                            format!("{} already voted in {}", voter_contract, poll_id).as_bytes(),
                        );
                        return false;
                    }
                    None => {
                        results.voted.insert(voter_contract, 1);
                    }
                }
                for (vote, checked) in votes.iter() {
                    if *checked == 0 {
                        continue;
                    }
                    match results.variants.get_mut(vote) {
                        Some(result) => {
                            *result = *result + 1;
                        }
                        None => {
                            results.variants.insert(vote.to_string(), 1);
                        }
                    }
                }
                return true;
            }
            None => {
                env::log(format!("no poll known for {}", poll_id).as_bytes());
                return false;
            }
        };
    }

    pub fn create_poll(&mut self, question: String, variants: HashMap<String, String>) -> String {
        env::log(
            format!(
                "create_poll for {} currently have {} polls",
                question,
                self.polls.len()
            )
            .as_bytes(),
        );
        let creator_account_id = env::signer_account_id();
        let poll_id = bs58::encode(env::sha256(&env::random_seed())).into_string();
        let result = poll_id.clone();
        let mut variants_vec = <Vec<VotingOption>>::new();
        for (k, v) in variants.iter() {
            variants_vec.push(VotingOption {
                option_id: k.to_string(),
                message: v.to_string(),
            })
        }
        self.polls.insert(
            poll_id.clone(),
            VotingOptions {
                creator: creator_account_id,
                poll_id: poll_id.clone(),
                question: question,
                variants: variants_vec,
            },
        );
        self.results.insert(
            poll_id.clone(),
            VotingResults {
                poll_id: poll_id,
                variants: HashMap::new(),
                voted: HashMap::new(),
            },
        );
        return result;
    }

    pub fn show_poll(&self, poll_id: String) -> Option<VotingOptions> {
        match self.polls.get(&poll_id) {
            Some(options) => Some(options.clone()),
            None => {
                env::log(format!("Unknown voting {}", poll_id).as_bytes());
                None
            }
        }
    }

    pub fn show_results(&self, poll_id: String) -> Option<VotingStats> {
        match self.polls.get(&poll_id) {
            Some(poll) => match self.results.get(&poll_id) {
                Some(results) => Some(VotingStats {
                    results: results.clone(),
                    poll: poll.clone(),
                }),
                None => None,
            },
            None => None,
        }
    }

    pub fn ping(&self) -> String {
        "PONG".to_string()
    }
}

#[cfg(not(target_arch = "wasm32"))]
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice_near".to_string(),
            signer_account_id: "bob_near".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "carol_near".to_string(),
            input,
            block_index: 0,
            epoch_height: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
        }
    }

    #[test]
    fn nonexisting_poll() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let contract = Voting::default();
        let options = contract.show_poll("default".to_string());
        assert_eq!(true, options.is_none());
    }

    #[test]
    fn create_poll() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Voting::default();
        let poll = contract.create_poll(
            "To be or not to be?".to_string(),
            [
                ("v1".to_string(), "To be".to_string()),
                ("v2".to_string(), "Not to be".to_string()),
            ]
            .iter()
            .cloned()
            .collect(),
        );
        let options = contract.show_poll(poll);
        assert_eq!(false, options.is_none());
        assert_eq!("To be or not to be?".to_string(), options.unwrap().question);
    }
}

'''
'''--- package.json ---
{
  "name": "voting-app",
  "version": "0.0.1",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node ./contract/build",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy --wasmFile ./contract/res/voting_app.wasm",
    "deploy:contract": "near deploy --wasmFile ./contract/res/voting_app.wasm",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract && npm run dev:deploy:contract",
    "start": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "dev": "NODE_ENV=development && nodemon --watch assembly -e ts --exec \"npm run start\"",
    "test": "cd contract && cargo test --package status-message -- --nocapture"
  },
  "devDependencies": {
    "env-cmd": "^10.1.0",
    "gh-pages": "^2.2.0",
    "gulp": "^4.0.2",
    "jest": "^25.1.0",
    "jest-environment-node": "^24.9.0",
    "near-shell": "^0.20.8",
    "nodemon": "^2.0.2",
    "parcel-bundler": "^1.12.4",
    "shelljs": "^0.8.3"
  },
  "dependencies": {
    "near-api-js": "^0.23.2",
    "regenerator-runtime": "^0.13.3"
  }
}

'''
'''--- src/assets/gray_near_logo.svg ---
<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 433 180.5"><defs><style>.cls-1{fill:url(#linear-gradient);}.cls-2{fill:#4a4f54;}</style><linearGradient id="linear-gradient" x1="40.11" y1="140.87" x2="140.87" y2="40.11" gradientUnits="userSpaceOnUse"><stop offset="0.21" stop-color="#4a4f54"/><stop offset="0.42" stop-color="#4a4f54" stop-opacity="0"/><stop offset="0.59" stop-color="#4a4f54" stop-opacity="0"/><stop offset="0.81" stop-color="#4a4f54"/></linearGradient></defs><title>near_logo</title><path class="cls-1" d="M48.84,144.5a12.32,12.32,0,0,0,9.35-4.28h0l84.42-97.93a12.32,12.32,0,0,0-10.45-5.79h0a12.31,12.31,0,0,0-9.31,4.24L38,138.09A12.34,12.34,0,0,0,48.84,144.5Z"/><path class="cls-2" d="M48.84,144.5a12.38,12.38,0,0,0,5.66-1.37V61.36l65.58,78.7a12.37,12.37,0,0,0,9.49,4.44h2.59a12.35,12.35,0,0,0,12.34-12.34V48.84A12.35,12.35,0,0,0,132.16,36.5h0a12.45,12.45,0,0,0-5.62,1.35v81.79L60.92,40.94a12.37,12.37,0,0,0-9.49-4.44H48.84A12.35,12.35,0,0,0,36.5,48.84v83.32A12.35,12.35,0,0,0,48.84,144.5Z"/><path class="cls-2" d="M225.71,64.25v52.5a.76.76,0,0,1-.75.75h-5.51a7.49,7.49,0,0,1-6.3-3.43l-24.78-38.3.85,19.13v21.85a.76.76,0,0,1-.75.75h-7.22a.76.76,0,0,1-.75-.75V64.25a.76.76,0,0,1,.75-.75h5.43a7.52,7.52,0,0,1,6.3,3.42l24.78,38.24L217,86.1V64.25a.75.75,0,0,1,.75-.75H225A.76.76,0,0,1,225.71,64.25Z"/><path class="cls-2" d="M299.51,117.5h-7.64a.75.75,0,0,1-.7-1L311.4,64.22a1.14,1.14,0,0,1,1.05-.72H322a1.14,1.14,0,0,1,1.05.72l20.23,52.26a.75.75,0,0,1-.7,1H335a.76.76,0,0,1-.71-.48L317.94,74a.75.75,0,0,0-1.41,0l-16.31,43A.76.76,0,0,1,299.51,117.5Z"/><path class="cls-2" d="M396.34,116.29,381.16,96.9c8.57-1.62,13.58-7.4,13.58-16.27,0-10.19-6.63-17.13-18.36-17.13H355.21a1.12,1.12,0,0,0-1.12,1.12h0a7.2,7.2,0,0,0,7.2,7.21h14.17c7.09,0,10.49,3.63,10.49,8.87s-3.32,9-10.49,9H355.21a1.13,1.13,0,0,0-1.12,1.13v26a.75.75,0,0,0,.75.75h7.22a.76.76,0,0,0,.75-.75V97.37h8.33l13.17,17.19a7.51,7.51,0,0,0,6,2.94h5.48A.75.75,0,0,0,396.34,116.29Z"/><path class="cls-2" d="M276.67,63.5h-33.5a1,1,0,0,0-1,1h0a7.33,7.33,0,0,0,7.33,7.33h27.17a.74.74,0,0,0,.75-.75V64.25A.75.75,0,0,0,276.67,63.5Zm0,45.67h-25a.76.76,0,0,1-.75-.75V94.88a.75.75,0,0,1,.75-.75h23.11a.75.75,0,0,0,.75-.75V86.54a.75.75,0,0,0-.75-.75H243.29a1.13,1.13,0,0,0-1.12,1.13v29.45a1.12,1.12,0,0,0,1.12,1.13h33.38a.75.75,0,0,0,.75-.75v-6.83A.74.74,0,0,0,276.67,109.17Z"/></svg>
'''
'''--- src/assets/near.svg ---
<svg width="97px" height="97px" viewBox="0 0 97 97" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <defs>
        <linearGradient x1="8.03545747%" y1="96.638877%" x2="92.2738738%" y2="3.34259955%" id="linearGradient-1">
            <stop stop-color="#4B4F54" offset="21%"></stop>
            <stop stop-color="#4B4F54" stop-opacity="0" offset="42%"></stop>
            <stop stop-color="#4B4F54" stop-opacity="0" offset="59%"></stop>
            <stop stop-color="#4B4F54" offset="81%"></stop>
        </linearGradient>
    </defs>
    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="create" transform="translate(-1054.000000, -595.000000)" fill-rule="nonzero">
            <g id="Group-5" transform="translate(1054.000000, 595.000000)">
                <path d="M12.094392,97.0000195 C15.2088036,97.0039527 18.1698244,95.6000877 20.2022804,93.1559341 L20.2022804,93.1559341 L93.4074074,5.20030368 C91.4546314,1.96447154 88.0299073,1.95462232e-05 84.3456498,1.95462232e-05 L84.3456498,1.95462232e-05 C81.2486381,-0.0036811685 78.3027381,1.38590639 76.2724476,3.80817433 L2.69444444,91.2428789 C4.57536204,94.7980982 8.18030259,97.0059941 12.094392,97.0000195 Z" id="Path" fill="url(#linearGradient-1)"></path>
                <path d="M11.0831481,97 C12.8513879,97 14.5941045,96.5780666 16.1666667,95.769537 L16.1666667,22.327963 L75.0672222,93.0122222 C77.1773546,95.5384707 80.2990545,96.9989921 83.5906481,97 L85.9168519,97 C92.0358529,96.9950473 96.9950473,92.0358529 97,85.9168519 L97,11.0831481 C96.9950473,4.96414708 92.0358529,0.00495265405 85.9168519,0 L85.9168519,0 C84.1625017,0.00260840866 82.4333785,0.417967183 80.8692593,1.2125 L80.8692593,74.672037 L21.9327778,3.98777778 C19.8226454,1.4615293 16.7009455,0.00100794796 13.4093519,0 L11.0831481,0 C4.96414708,0.00495265405 0.00495265405,4.96414708 0,11.0831481 L0,85.9168519 C0.00495265405,92.0358529 4.96414708,96.9950473 11.0831481,97 Z" id="Path" fill="#4B4F54"></path>
            </g>
        </g>
    </g>
</svg>
'''
'''--- src/config.js ---
function getConfig(env, options = {}) {
    const config = {
        ...options,
        appTitle: options.appTitle || 'NEAR',
        contractName: options.contractName || process.env.CONTRACT_NAME || 'test.near',
    }

    switch (env) {
        case 'production':
        case 'mainnet':
            return {
                ...config,
                networkId: 'mainnet',
                nodeUrl: 'https://rpc.mainnet.near.org',
                explorerUrl: 'https://explorer.near.org',
                walletUrl: 'https://wallet.near.org',
                helperUrl: 'https://helper.mainnet.near.org'
            }
        case 'development':
        case 'testnet':
            return {
                ...config,
                networkId: 'default',
                nodeUrl: 'https://rpc.testnet.near.org',
                explorerUrl: 'https://explorer.testnet.near.org',
                walletUrl: 'https://wallet.testnet.near.org',
                helperUrl: 'https://helper.testnet.near.org'
            }
        case 'betanet':
            return {
                ...config,
                networkId: 'betanet',
                nodeUrl: 'https://rpc.betanet.near.org',
                explorerUrl: 'https://explorer.betanet.near.org',
                walletUrl: 'https://wallet.betanet.near.org',
                helperUrl: 'https://helper.betanet.near.org'
            }
        case 'local':
            return {
                ...config,
                networkId: 'local',
                nodeUrl: 'http://localhost:3030',
                keyPath: `${process.env.HOME}/.near/validator_key.json`,
                walletUrl: 'http://localhost:4000/wallet',
            }
        case 'test':
        case 'ci':
            return {
                ...config,
                networkId: 'shared-test',
                nodeUrl: 'https://rpc.ci-testnet.near.org',
                masterAccount: 'test.near'
            }
        case 'ci-betanet':
            return {
                ...config,
                networkId: 'shared-test-staging',
                nodeUrl: 'https://rpc.ci-betanet.near.org',
                masterAccount: 'test.near'
            }
        default:
            throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
    }
}

module.exports = getConfig;

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
  <style>
    .App-header {
      background-image: url('https://nearprotocol.com/wp-content/uploads/2019/03/illo-developers.svg');
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      font-size: 1rem;
      color: #25282A;
      text-align: center;
      padding:2%;
    }
    .image-wrapper {
      display: flex;
      align-items: center;
      flex-direction: column;
      justify-content: center;
    }
    .App-logo {
      animation: App-logo-spin infinite 20s linear;
      pointer-events: none;
    }

    .margin-logo {
      margin: 20px;
    }

    @keyframes App-logo-spin {
      from {
        transform: rotate(0deg);
      }
      to {
        transform: rotate(360deg);
      }
    }

    button {
      padding: 5px;
      color: #0072CE;
      border-radius: 10px;
      border: 3px solid #0072CE;
    }

    button:hover {
      cursor: pointer;
      color: white;
      background: #0072CE;
    }

    .vote_question {
      font-size: 3.5rem;
      color: #0072CE;
      text-shadow: 1px 1px #D1CCBD;
    }
    .vote_options {
      font-size: 2.0rem;
      color: #5acf8b;
      text-shadow: 1px 1px #D1CCBD;
    }
    .voted {
      font-size: 1.0rem;
      color: #ce501e;
      text-shadow: 1px 1px #D1CCBD;
    }
    .voting_app {
      font-size: 1.0rem;
      color: #24128b;
    }
    .page_header {
      font-size: 3.0rem;
      color: #128b36;
    }
  </style>
</head>
<body class="App-header">
  <div>
      <div class="image-wrapper">
        <img style="width:33%;" src="assets/gray_near_logo.svg" alt="NEAR logo" />
        <p><span role="img" aria-label="fish">🐟</span> NEAR protocol is a new blockchain focused on developer productivity and useability!<span role="img" aria-label="fish">🐟</span></p>
        <p class="page_header"><span role="img" aria-label="chain">⛓</span> NEAR Secure Voting Service</p>
        <img src="assets/near.svg" class="App-logo margin-logo" alt="logo" />
        <div id="vote-options" class="vote_options">
          <div></div>
        </div>
      </div>
      <div id="signed-out-flow" class="d-none">
        <button id="sign-in-button" >Sign-in with NEAR</button>
      </div>
      <div id="new-poll-form" style="display: none;">
        <label for="new-poll-question">Poll question:</label><input type="text" id="new-poll-question"><br/>
        <ul id="new-poll-form-variants">
          <li>
            <label for="new-poll-v1">Variant 1: </label><input type="text" id="new-poll-v1">
          </li>
        </ul>
        <button id="create-poll-submit">Submit</button>
        <button id="create-poll-add-variant">Add variant</button>
        <button id="create-poll-remove-variant">Remove variant</button>
        <button id="create-poll-cancel">Cancel</button>
      </div>
      <div id="poll-results-form" style="display: none;">
        <div></div>
      </div>
      <div id="signed-in-flow" class="d-none">
          <button id="create-poll-button">Create poll</button>
          <button id="vote-button" style='display: none;'>Vote</button>
          <button id="show-results-button" style='display: none;'>Show results</button>
          <button id="sign-out-button">Sign-out</button>
          <div id="new-poll-address"></div>
      </div>
      <div id="status-message-bar" class="voting_app">
        Ready!
      </div>
  </div>
  <script src="./main.js"></script>
</body>
</html>

'''
'''--- src/main.js ---
import "regenerator-runtime/runtime";

import * as nearAPI from "near-api-js"
import getConfig from "./config"

const BN = require('bn.js');

let nearConfig = getConfig(process.env.NODE_ENV || "development");
window.nearConfig = nearConfig;

// Initializing contract
async function InitContract() {
    console.log('nearConfig', nearConfig);

    // Initializing connection to the NEAR DevNet.
    window.near = await nearAPI.connect(Object.assign({ deps: { keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore() } }, nearConfig));

    // Initializing Wallet based Account. It can work with NEAR DevNet wallet that
    // is hosted at https://wallet.nearprotocol.com
    window.walletAccount = new nearAPI.WalletAccount(window.near);

    // Getting the Account ID. If unauthorized yet, it's just empty string.
    window.accountId = window.walletAccount.getAccountId();

    const query = new URLSearchParams(window.location.search);
    const pollId = query.get('poll_id');
    window.voteState = {
        voteOwner: window.accountId,
        pollId: pollId
    };

    // Initializing our contract APIs by contract name and configuration.
    window.contract = await near.loadContract(nearConfig.contractName, { // eslint-disable-line require-atomic-updates
        // NOTE: This configuration only needed while NEAR is still in development
        // View methods are read only. They don't modify the state, but usually return some value.
        viewMethods: ['show_poll', 'show_results', 'ping'],
        // Change methods can modify the state. But you don't receive the returned value when called.
        changeMethods: ['vote', 'create_poll'],
        // Sender is the account ID to initialize transactions.
        sender: window.accountId,
    });
}

// Using initialized contract
async function doWork() {
    // Based on whether you've authorized, checking which flow we should go.
    if (!window.walletAccount.isSignedIn()) {
        signedOutFlow();
    } else {
        signedInFlow();
    }
}

// Function that initializes the signIn button using WalletAccount
function signedOutFlow() {
    // Displaying the signed out flow container.
    document.getElementById('signed-out-flow').classList.remove('d-none');
    // Adding an event to a sing-in button.
    document.getElementById('sign-in-button').addEventListener('click', () => {
        window.walletAccount.requestSignIn(
            // The contract name that would be authorized to be called by the user's account.
            window.nearConfig.contractName,
            // This is the app name. It can be anything.
            'Voting app'
        );
    });
}

// Main function for the signed-in flow (already authorized by the wallet).
function signedInFlow() {
    // Displaying the signed in flow container.
    document.getElementById('signed-in-flow').classList.remove('d-none');

    show_poll();

    // Adding an event to a sign-out button.
    document.getElementById('sign-out-button').addEventListener('click', () => {
        walletAccount.signOut();
        // Forcing redirect.
        window.location.replace(window.location.origin + window.location.pathname);
    });

    document.getElementById('vote-button').addEventListener('click', () => {
        const voteOptions = document.getElementById('vote-options');
        if (!voteOptions || voteOptions.style.display == 'none') {
            show_poll();
        } else {
            vote();
        }
    });

    document.getElementById('show-results-button').addEventListener('click', () => {
        show_poll_results();
    });

    document.getElementById('create-poll-button').addEventListener('click', () => {
        show_create_poll();
    });

    document.getElementById('create-poll-add-variant').addEventListener('click', () => {
        add_poll_variant();
    });

    document.getElementById('create-poll-remove-variant').addEventListener('click', () => {
        remove_poll_variant();
    });

    document.getElementById('create-poll-submit').addEventListener('click', () => {
        create_poll();
    });

    document.getElementById('create-poll-cancel').addEventListener('click', () => {
        // TODO: clear state in form?
        hide_create_poll();
    });
}

async function show_poll() {
    if (!window.voteState.pollId) return;
    const response = await window.contract.show_poll( { poll_id: window.voteState.pollId } );
    if (!response) {
        voting_app('No such poll ' + window.voteState.pollId);
        return;
    }
    const voteForm = document.createElement('div');
    voteForm.id = 'vote-form';
    const fieldsetElement = document.createElement('fieldset');
    const legendElement = document.createElement('legend');
    legendElement.innerText = "Dear @" + window.accountId + " please vote on poll by @" + response.creator;
    const questionElement = document.createElement('div');
    questionElement.className = 'vote_question';
    questionElement.innerText = response.question;
    legendElement.appendChild(questionElement);

    for (var index = 0; index < response.variants.length; index++) {
        const v = response.variants[index];
        const checkboxElement = document.createElement('input');
        checkboxElement.type = 'checkbox';
        checkboxElement.id = v.option_id;
        checkboxElement.value = v.option_id;
        const labelElement = document.createElement('label');
        labelElement.for = v.option_id;
        labelElement.innerText = v.message;
        fieldsetElement.appendChild(checkboxElement);
        fieldsetElement.appendChild(labelElement);
        fieldsetElement.appendChild(document.createElement('br'));
    }
    voteForm.appendChild(legendElement);
    voteForm.appendChild(fieldsetElement);

    const voteOptions = document.getElementById('vote-options');
    voteOptions.replaceChild(voteForm, voteOptions.firstChild);
    voteOptions.style.display = 'inline';
    hide_poll_results();
    document.getElementById('vote-button').style.display = 'inline';
    document.getElementById('show-results-button').style.display = 'inline';
}

function format_variant(poll, results, index) {
    const voted = results.variants[poll.variants[index].option_id];
    return poll.variants[index].message + ' -> ' + (voted ? voted : 0);
}

async function show_poll_results() {
    if (!window.voteState.pollId) return;
    voting_app("Talking to the blockchain...");
    const response = await window.contract.show_results({ poll_id: window.voteState.pollId } );
    voting_app("Ready!");
    if (!response) {
        return;
    }

    document.getElementById('poll-results-form').style.display = 'block';
    hide_create_poll();
    hide_poll_variants();

    const newHolder = document.createElement('div');
    const questionItem = document.createElement('div');
    questionItem.id = 'result-poll-question';
    questionItem.className = 'vote_question';
    questionItem.innerText = response.poll.question;
    newHolder.appendChild(questionItem);

    for (var index = 0; index < response.poll.variants.length; index++) {
        const variantItem = document.createElement('div');
        variantItem.className = 'vote_options';
        variantItem.innerText = format_variant(response.poll, response.results, index);
        newHolder.appendChild(variantItem);
    }
    const votedItem = document.createElement('div');
    votedItem.id = 'result-poll-voted';
    votedItem.className = 'voted';
    votedItem.innerText = 'Voted: ' + Object.keys(response.results.voted).join(" ");
    newHolder.appendChild(votedItem);

    console.log(newHolder);

    const resultsForm = document.getElementById('poll-results-form');
    resultsForm.replaceChild(newHolder, resultsForm.firstElementChild);

    document.getElementById('vote-options').style.display = 'none';
}

async function create_poll() {
    const question = document.getElementById("new-poll-question").value;
    var index = 1;
    const variants = {};
    while (true) {
        const v = document.getElementById("new-poll-v" + index);
        if (!v) break;
        variants['v' + index] = v.value;
        index++;
    }
    // Creation of poll and voting need more gas to execute.
    voting_app("Talking to the blockchain...");
    const poll = await window.contract.create_poll({question: question, variants: variants},
        new BN(10000000000000));
    voting_app("Ready, created " + poll);
    const base = document.documentURI.substr(0, document.documentURI.lastIndexOf('/'));
    const poll_address = base + "/?poll_id=" + poll;
    document.getElementById("new-poll-address").innerHTML = 'Newly created poll at <a href="' + poll_address + '">' + poll_address + '</a>';
    hide_create_poll();
}

async function vote() {
    const voteForm = document.getElementById('vote-form');
    const variants = voteForm.getElementsByTagName('input');
    const votes = {};
    for (var i = 0; i < variants.length; i++) {
        const variant = variants[i];
        votes[variant.id] = variant.checked ? 1 : 0 ;
    }
    // Creation of poll and voting needs more gas to execute.
    voting_app("Talking to the blockchain...");
    const result = await window.contract.vote({poll_id: window.voteState.pollId, votes: votes},
        new BN(10000000000000));
    voting_app("Your voice is " + (result ? "counted" : "NOT counted, already voted?"));
}

// Loads near-api-js and this contract into window scope.
window.nearInitPromise = InitContract()
    .then(doWork)
    .catch(console.error);

function show_create_poll() {
    const newPollForm = document.getElementById('new-poll-form');
    newPollForm.style.display = 'block';
    hide_poll_results();
    hide_poll_variants();
}

function hide_create_poll() {
    const newPollForm = document.getElementById('new-poll-form');
    newPollForm.style.display = 'none';
}

function hide_poll_results() {
    document.getElementById('poll-results-form').style.display = 'none';
}

function voting_app(text) {
    document.getElementById('status-message-bar').innerText = text;
}

function hide_poll_variants() {
    const vote = document.getElementById('vote-options');
    if (vote) vote.style.display = 'none';
}

function add_poll_variant() {
    const newPollList = document.getElementById('new-poll-form-variants');
    const index = newPollList.childElementCount + 1;
    const newVariantId = "new-poll-v" + index;
    const newVariantInput = document.createElement("input");
    newVariantInput.type = 'text';
    newVariantInput.id = newVariantId;
    const newVariantLabel = document.createElement("label");
    newVariantLabel.innerText = 'Variant ' + index + ': ';
    newVariantLabel.for = newVariantId;
    const newVariant = document.createElement("li");
    newVariant.appendChild(newVariantLabel);
    newVariant.appendChild(newVariantInput);
    newPollList.appendChild(newVariant);
}

function remove_poll_variant() {
    const newPollList = document.getElementById('new-poll-form-variants');
    newPollList.removeChild(newPollList.lastChild);
}
'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>Please run the following command in shell, then enter account id here. masterAccountId default: test.near
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''