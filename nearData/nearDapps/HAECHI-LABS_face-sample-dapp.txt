*GitHub Repository "HAECHI-LABS/face-sample-dapp"*

'''--- .prettierrc.js ---
module.exports = {
  printWidth: 100,
  tabWidth: 2,
  useTabs: false,
  semi: true,
  singleQuote: true,
  trailingComma: 'es5',
  bracketSameLine: true,
};

'''
'''--- README.md ---
# Face Sample DAPP

You can send ropsten eth using Face wallet.

Test it in http://haechi-labs.github.io/face-sample-dapp

'''
'''--- README.origin.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- craco.config.js ---
const webpack = require('webpack');

module.exports = {
  webpack: {
    configure: (webpackConfig) => {
      webpackConfig.ignoreWarnings = [/Failed to parse source map/];
      webpackConfig.resolve.fallback = {
        ...webpackConfig.resolve.fallback,
      };

      webpackConfig.plugins.push(
        new webpack.ProvidePlugin({
          Buffer: ['buffer', 'Buffer'],
        })
      );
      return webpackConfig;
    },
  },
};

'''
'''--- package.json ---
{
  "name": "face-sample-dapp",
  "version": "0.1.0",
  "private": true,
  "homepage": "http://haechi-labs.github.io/face-sample-dapp",
  "dependencies": {
    "@craco/craco": "^7.1.0",
    "@haechi-labs/face-sdk": "^1.12.5",
    "@haechi-labs/face-types": "^1.12.5",
    "@haechi-labs/face-kit": "^1.1.6",
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.3.0",
    "@testing-library/user-event": "^13.5.0",
    "bulma": "^0.9.4",
    "ethers": "^5.6.9",
    "near-api-js": "^1.1.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "recoil": "^0.7.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "craco start",
    "build": "craco build",
    "predeploy": "yarn run build",
    "deploy": "gh-pages -d build",
    "eject": "craco eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ],
    "plugins": [
      "simple-import-sort"
    ],
    "rules": {
      "simple-import-sort/imports": "error",
      "simple-import-sort/exports": "error"
    }
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "eslint-config-prettier": "^8.5.0",
    "eslint-plugin-prettier": "^4.2.1",
    "eslint-plugin-simple-import-sort": "^8.0.0",
    "gh-pages": "^4.0.0",
    "prettier": "^2.7.1"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Sample DApp for Face SDK"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Face Sample DApp</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "Face Sample Dapp",
  "name": "Face Sample Dapp",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
:root {
  --gnb-height: 60px;
}

.App {
  text-align: center;
  padding: 60px;
}

.AccountInformation {
  margin-top: 25px;
}
.AccountInformation .notification {
  box-shadow: 0 0.5em 1em -0.125em rgb(10 10 10 / 10%), 0 0px 0 1px rgb(10 10 10 / 2%);
}

.wrapper {
  margin-top: 56px;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
  text-align: center;
  gap: 45px;
}

.box {
  margin: 0 !important;
}
.box__title {
  color: #4a4a4a;
  margin: 0 !important;
}
.box__body {
  padding-top: 32px;
  padding-bottom: 28px;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.message {
  margin: 0 !important;
}
.message-body {
  padding: 12px 20px !important;
  word-break: break-all;
}

.field.is-horizontal {
  align-items: center;
}
.field.is-horizontal .field-label {
  flex-basis: 70px;
  flex-grow: unset;
  flex-shrink: unset;
  margin-right: 15px;
}
.field.is-horizontal .field-label .label {
  font-weight: 500;
  color: #4a4a4a;
}

nav.gnb {
  display: flex;
  background: white;
  justify-content: space-between;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: var(--gnb-height);
  padding: 0 60px;
  z-index: 10000;
  border-bottom: 1px solid #dce1e8;
}

nav.gnb > .logo-wrapper {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

nav.gnb > ul.menus {
  display: flex;
  align-items: center;
  list-style: none;
  padding: 0;
}

nav.gnb > ul.menus > li {
  display: inline-block;
}

nav.gnb > ul.menus > li + li {
  margin-left: 8px;
}

nav.gnb > ul.menus > li > a {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 8px 12px;
  font-size: 14px;
  font-weight: 500;
  line-height: 16px;
  fill: #288efb;
  color: #288efb;
  border: 1px solid #b4dafd;
  border-radius: 18px;
  transition: 0.3s;
}

nav.gnb > ul.menus > li > a > svg {
  fill: #288efb;
  transition: 0.3s;
}

nav.gnb > ul.menus > li > a:hover {
  background: #ebf6ff;
}

nav.gnb > ul.menus > li > a:active {
  border-color: #b4dafd;
  color: #b4dafd;
  background: #ebf6ff;
}

nav.gnb > ul.menus > li > a:active > svg {
  fill: #b4dafd;
}

nav.gnb > ul > li > a > svg {
  margin-right: 4px;
}

svg.logo {
  width: auto;
  height: 20px;
}

.menu-toggle {
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
}

.menu-toggle > input[type='checkbox'] {
  display: none;
}

.menu-toggle:has(input[type='checkbox']:checked) > .menu-icon {
  display: none;
}

.menu-toggle:has(input[type='checkbox']:not(:checked)) > .close-icon {
  display: none;
}

.mobile {
  display: none;
}

@media screen and (max-width: 768px) {
  .App {
    padding-left: 24px;
    padding-right: 24px;
  }

  .mobile {
    display: initial;
  }

  .wrapper {
    margin-top: 24px;
  }

  nav.gnb {
    flex-direction: column;
    min-height: var(--gnb-height);
    height: initial;
    padding: 0 24px;
  }

  nav.gnb > .logo-wrapper {
    padding-top: 16px;
    padding-bottom: 16px;
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  nav.gnb:has(.menu-toggle input#toggle:not(:checked)) > ul.menus {
    display: none;
  }

  nav.gnb > ul.menus {
    width: 100%;
    flex-direction: column;
    padding-bottom: 16px;
  }

  nav.gnb > ul.menus > li {
    width: 100%;
    display: flex;
  }

  nav.gnb > ul.menus > li > a {
    width: 100%;
  }

  ul.menus > li + li {
    margin-top: 8px;
  }
}

table {
  border-collapse: collapse;
}

th {
  text-align: left;
  border: 1px solid #ddd;
  padding: 8px;
}

td {
  border: 1px solid #ddd;
  padding: 8px;
}
'''
'''--- src/App.js ---
import './App.css';

import { ReactComponent as Logo } from './assets/logo.svg';
import AccountInformation from './components/AccountInformation';
import ConnectNetwork from './components/ConnectNetwork';
import GNB from './components/GNB';
import LoginWithFace from './components/LoginWithFace';
import SignMessage from './components/SignMessage';
import TransactionContractCall from './components/TransactionContractCall';
import TransactionErc20 from './components/TransactionErc20';
import TransactionErc721 from './components/TransactionErc721';
import TransactionPlatformCoin from './components/TransactionPlatformCoin.js';
import WalletConnect from './components/WalletConnect';
import WalletHome from './components/WalletHome';

function App() {
  return (
    <div className="App">
      <GNB />
      <AccountInformation />
      <div className="wrapper">
        <ConnectNetwork />
        <LoginWithFace />
        <WalletHome />
        <WalletConnect />
        <TransactionPlatformCoin />
        <TransactionErc20 />
        <TransactionErc721 />
        <TransactionContractCall />
        <SignMessage />
      </div>
    </div>
  );
}

export default App;

'''
'''--- src/assets/external-link-line.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_1525_150)">
<path d="M8.33333 4.99998V6.66665H4.16667V15.8333H13.3333V11.6666H15V16.6666C15 16.8877 14.9122 17.0996 14.7559 17.2559C14.5996 17.4122 14.3877 17.5 14.1667 17.5H3.33333C3.11232 17.5 2.90036 17.4122 2.74408 17.2559C2.5878 17.0996 2.5 16.8877 2.5 16.6666V5.83331C2.5 5.6123 2.5878 5.40034 2.74408 5.24406C2.90036 5.08778 3.11232 4.99998 3.33333 4.99998H8.33333ZM16.6667 3.33331V9.99998H15V6.17748L8.50583 12.6725L7.3275 11.4941L13.8208 4.99998H10V3.33331H16.6667Z" fill="inherit" />
</g>
<defs>
<clipPath id="clip0_1525_150">
<rect width="20" height="20" fill="white"/>
</clipPath>
</defs>
</svg>

'''
'''--- src/assets/logo.svg ---
<svg width="350" height="44" viewBox="0 0 350 44" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M7.57854 0.855774C3.42893 0.855774 0.0650024 4.2197 0.0650024 8.36931V35.6935C0.0650024 39.8431 3.42893 43.2071 7.57854 43.2071H49.0198C53.1695 43.2071 56.5334 39.8431 56.5334 35.6935V8.36931C56.5334 4.2197 53.1695 0.855774 49.0198 0.855774H7.57854ZM28.2401 21.4296C32.2288 21.4296 35.9334 20.2134 39.0035 18.1317C39.1408 18.8251 39.2128 19.542 39.2128 20.2757C39.2128 26.3358 34.3002 31.2485 28.2401 31.2485C22.18 31.2485 17.2673 26.3358 17.2673 20.2757C17.2673 19.542 17.3393 18.8251 17.4767 18.1317C20.5467 20.2134 24.2514 21.4296 28.2401 21.4296Z" fill="#0026F5"/>
<path d="M86.1168 8.75949C82.0941 8.45589 80.0827 10.0688 80.0827 13.5981V13.8828H86.1168V20.9415H80.0827V42.3453H72.7394V20.9415H68.6408V13.8828H72.7394V13.5981C72.7394 9.57542 73.8589 6.52044 76.098 4.43319C78.337 2.34593 81.6766 1.43513 86.1168 1.70078V8.75949Z" fill="black"/>
<path d="M111.31 13.8828H118.653V42.3453H111.31V38.9867C109.109 41.7571 106.016 43.1423 102.031 43.1423C98.2363 43.1423 94.9725 41.7002 92.2401 38.8159C89.5457 35.8938 88.1985 32.3265 88.1985 28.114C88.1985 23.9016 89.5457 20.3532 92.2401 17.469C94.9725 14.5469 98.2363 13.0858 102.031 13.0858C106.016 13.0858 109.109 14.471 111.31 17.2413V13.8828ZM97.7619 33.9204C99.2419 35.4004 101.12 36.1405 103.397 36.1405C105.674 36.1405 107.553 35.4004 109.033 33.9204C110.551 32.4024 111.31 30.4669 111.31 28.114C111.31 25.7611 110.551 23.8446 109.033 22.3646C107.553 20.8466 105.674 20.0876 103.397 20.0876C101.12 20.0876 99.2419 20.8466 97.7619 22.3646C96.2818 23.8446 95.5418 25.7611 95.5418 28.114C95.5418 30.4669 96.2818 32.4024 97.7619 33.9204Z" fill="black"/>
<path d="M136.773 43.1423C132.485 43.1423 128.899 41.7002 126.015 38.8159C123.168 35.9317 121.745 32.3644 121.745 28.114C121.745 23.8636 123.168 20.2963 126.015 17.4121C128.899 14.5279 132.485 13.0858 136.773 13.0858C139.544 13.0858 142.067 13.7499 144.344 15.0782C146.621 16.4064 148.348 18.1901 149.525 20.4291L143.206 24.1293C142.637 22.9528 141.764 22.023 140.587 21.3399C139.449 20.6568 138.159 20.3153 136.716 20.3153C134.515 20.3153 132.694 21.0553 131.252 22.5354C129.81 23.9775 129.088 25.837 129.088 28.114C129.088 30.3531 129.81 32.2126 131.252 33.6927C132.694 35.1348 134.515 35.8558 136.716 35.8558C138.197 35.8558 139.506 35.5333 140.644 34.8881C141.821 34.205 142.694 33.2752 143.263 32.0988L150.473 35.742C149.221 37.981 146.621 39.7837 144.344 41.1499C142.067 42.4781 139.544 43.1423 136.773 43.1423Z" fill="black"/>
<path d="M160.117 31.1311C161.104 34.6984 163.779 36.482 168.144 36.482C170.952 36.482 173.077 35.5333 174.519 33.6358L180.439 37.0513C177.631 41.1119 173.495 43.1423 168.03 43.1423C163.324 43.1423 159.548 41.7191 156.702 38.8729C153.855 36.0266 152.432 32.4403 152.432 28.114C152.432 23.8257 153.836 20.2584 156.645 17.4121C159.453 14.5279 163.058 13.0858 167.461 13.0858C171.635 13.0858 175.07 14.5279 177.764 17.4121C180.496 20.2963 181.863 23.8636 181.863 28.114C181.863 29.0628 181.768 30.0685 181.578 31.1311H160.117ZM160.003 25.4385H174.519C174.102 23.5031 173.229 22.061 171.901 21.1122C170.61 20.1635 169.13 19.6891 167.461 19.6891C165.487 19.6891 163.855 20.2014 162.565 21.2261C161.275 22.2128 160.421 23.6169 160.003 25.4385Z" fill="black"/>
<path d="M227.008 13.8828H234.807L225.755 42.3453H218.754L213.517 25.097L208.279 42.3453H201.278L192.227 13.8828H200.025L204.864 31.3588L210.044 13.8828H216.989L222.169 31.4157L227.008 13.8828Z" fill="black"/>
<path d="M260.119 13.8828H267.463V42.3453H260.119V38.9867C257.918 41.7571 254.825 43.1423 250.84 43.1423C247.045 43.1423 243.782 41.7002 241.049 38.8159C238.355 35.8938 237.008 32.3265 237.008 28.114C237.008 23.9016 238.355 20.3532 241.049 17.469C243.782 14.5469 247.045 13.0858 250.84 13.0858C254.825 13.0858 257.918 14.471 260.119 17.2413V13.8828ZM246.571 33.9204C248.051 35.4004 249.93 36.1405 252.207 36.1405C254.484 36.1405 256.362 35.4004 257.842 33.9204C259.36 32.4024 260.119 30.4669 260.119 28.114C260.119 25.7611 259.36 23.8446 257.842 22.3646C256.362 20.8466 254.484 20.0876 252.207 20.0876C249.93 20.0876 248.051 20.8466 246.571 22.3646C245.091 23.8446 244.351 25.7611 244.351 28.114C244.351 30.4669 245.091 32.4024 246.571 33.9204Z" fill="black"/>
<path d="M273.287 42.3453V0.789978H280.63V42.3453H273.287Z" fill="black"/>
<path d="M286.934 42.3453V0.789978H294.277V42.3453H286.934Z" fill="black"/>
<path d="M307.62 31.1311C308.607 34.6984 311.283 36.482 315.647 36.482C318.455 36.482 320.58 35.5333 322.022 33.6358L327.943 37.0513C325.134 41.1119 320.998 43.1423 315.533 43.1423C310.827 43.1423 307.051 41.7191 304.205 38.8729C301.359 36.0266 299.936 32.4403 299.936 28.114C299.936 23.8257 301.34 20.2584 304.148 17.4121C306.956 14.5279 310.562 13.0858 314.964 13.0858C319.138 13.0858 322.573 14.5279 325.267 17.4121C328 20.2963 329.366 23.8636 329.366 28.114C329.366 29.0628 329.271 30.0685 329.081 31.1311H307.62ZM307.507 25.4385H322.022C321.605 23.5031 320.732 22.061 319.404 21.1122C318.114 20.1635 316.634 19.6891 314.964 19.6891C312.99 19.6891 311.359 20.2014 310.068 21.2261C308.778 22.2128 307.924 23.6169 307.507 25.4385Z" fill="black"/>
<path d="M349.939 20.9415H343.506V32.7819C343.506 33.7686 343.753 34.4896 344.246 34.945C344.74 35.4004 345.461 35.6661 346.41 35.742C347.358 35.7799 348.535 35.761 349.939 35.6851V42.3453C344.892 42.9146 341.324 42.4402 339.237 40.9222C337.188 39.4042 336.163 36.6907 336.163 32.7819V20.9415H331.211V13.8828H336.163V8.13332L343.506 5.91324V13.8828H349.939V20.9415Z" fill="black"/>
</svg>

'''
'''--- src/assets/menu-close.svg ---
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_1512_229)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M12.344 11.6569L6.68716 6L5.27295 7.41421L10.9298 13.0711L5.27296 18.7279L6.68718 20.1421L12.344 14.4853L18.0009 20.1421L19.4151 18.7279L13.7582 13.0711L19.4151 7.41421L18.0009 6L12.344 11.6569Z" fill="black"/>
</g>
<defs>
<clipPath id="clip0_1512_229">
<rect width="24" height="24" fill="white" transform="translate(0.272949)"/>
</clipPath>
</defs>
</svg>

'''
'''--- src/assets/menu-fill.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_1512_212)">
<path d="M3 4H21V6H3V4ZM3 11H21V13H3V11ZM3 18H21V20H3V18Z" fill="black"/>
</g>
<defs>
<clipPath id="clip0_1512_212">
<rect width="24" height="24" fill="white"/>
</clipPath>
</defs>
</svg>

'''
'''--- src/components/AccountInformation.js ---
import { useRecoilValue } from 'recoil';

import { formatPlatformCoin } from '../lib/platformCoin';
import { accountAtom } from '../store/accountAtom';
import { networkAtom } from '../store/networkAtom';

function AccountInformation() {
  const account = useRecoilValue(accountAtom);
  const network = useRecoilValue(networkAtom);

  if (!account.balance || !account.address) {
    return null;
  }

  return (
    <div className="AccountInformation">
      <div className="notification is-primary is-light">
        {account.address && <div>Address: {account.address}</div>}
        {account.balance && <div>Balance: {formatPlatformCoin(account.balance, network)}</div>}
      </div>
    </div>
  );
}

export default AccountInformation;

'''
'''--- src/components/Checkbox.js ---
function Checkbox({ className, item, onCheck, ...rest }) {
  return (
    <div className="Checkbox">
      <input
        type="checkbox"
        className={`check ${className}`}
        onChange={(e) => onCheck ? onCheck(e.target.checked, item) : null}
        {...rest}
      />
    </div>
  );
}

export default Checkbox;

'''
'''--- src/components/CheckboxList.js ---
import Checkbox from './Checkbox';

function CheckboxList({ items, state, setState }) {
  const handleCheck = (checked, item) => {
    setState(checked ? [...state, item] : state.filter((value) => value !== item));
  };

  return (
    <table>
      <tbody>
        {items.map(({ key, label }) => (
          <tr key={key} onClick={() => handleCheck(!state.includes(key), key)}>
            <td>{label ? label : key}</td>
            <td>
              <Checkbox item={key} checked={state.includes(key)} />
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}

export default CheckboxList;

'''
'''--- src/components/ConnectNetwork.js ---
import { Face, Network } from '@haechi-labs/face-sdk';
import { Env } from '@haechi-labs/face-types';
import { useRecoilState } from 'recoil';

import { resolveApiKey } from '../config/apiKey';
import { faceAtom } from '../store';
import { networkAtom } from '../store/networkAtom';
import Box from './common/Box';
import Button from './common/Button';
import Message from './common/Message';

const networkList = [
  Network.SEPOLIA,
  Network.MUMBAI,
  Network.BNB_SMART_CHAIN_TESTNET,
  Network.BAOBAB,
  Network.BORA_TESTNET,
  Network.NEAR_TESTNET,
  Network.SAND_VERSE,
  Network.OASYS_TESTNET
];

const title = 'Connect Network';

function ConnectNetwork() {
  const [face, setFace] = useRecoilState(faceAtom);
  const [, setNetwork] = useRecoilState(networkAtom);

  const connectTo = (network) => {
    setNetwork(network);

    console.log(network);
    const face = new Face({
      apiKey: resolveApiKey(network),
      network: network,
      notificationOptions: {
        type: 'toast',
      },
      env: Env.ProdTest,
    });
    console.log(face.internal);
    setFace(face);
  };

  if (face) {
    return (
      <Box title={title}>
        <Message type="info">Connected</Message>
      </Box>
    );
  }

  const resolveNetworkName = (network) => {
    switch (network) {
      case Network.SEPOLIA:
        return 'Sepolia';
      case Network.MUMBAI:
        return 'Mumbai';
      case Network.BNB_SMART_CHAIN_TESTNET:
        return 'BNB Smart Chain Testnet';
      case Network.BAOBAB:
        return 'Baobab';
      case Network.BORA_TESTNET:
        return 'Bora Testnet';
      case Network.NEAR_TESTNET:
        return 'NEAR Testnet';
      case Network.SAND_VERSE:
        return 'Sand Verse'
      case Network.OASYS_TESTNET:
        return 'Oasys Testnet'
      default:
        throw new Error('unsupported network error');
    }
  };

  return (
    <Box title={title}>
      {networkList.map((network) => (
        <Button key={network} onClick={() => connectTo(network)}>
          Connect to {resolveNetworkName(network)}
        </Button>
      ))}
    </Box>
  );
}

export default ConnectNetwork;

'''
'''--- src/components/GNB.js ---
import { ReactComponent as ExternalIcon } from '../assets/external-link-line.svg';
import { ReactComponent as Logo } from '../assets/logo.svg';
import { ReactComponent as CloseIcon } from '../assets/menu-close.svg';
import { ReactComponent as MenuIcon } from '../assets/menu-fill.svg';

function GNB() {
  return (
    <nav className="gnb">
      <div className="logo-wrapper">
        <Logo className="logo" />
        <label className="mobile menu-toggle" htmlFor="toggle">
          <MenuIcon className="menu-icon" />
          <CloseIcon className="close-icon" />
          <input id="toggle" type="checkbox" />
        </label>
      </div>
      <ul className="menus">
        <li>
          <a href="https://docs.facewallet.xyz/docs/overview" target="_blank" rel="noreferrer">
            <ExternalIcon />
            Docs
          </a>
        </li>
        <li>
          <a
            href="https://www.figma.com/file/EFdYprD8iEP6bEKtkBbUIM/Face-Wallet-User-Flow?node-id=0%3A1"
            target="_blank"
            rel="noreferrer">
            <ExternalIcon />
            User Flow
          </a>
        </li>
        <li>
          <a href="https://haechi.typeform.com/to/RQd6k1Y6" target="_blank" rel="noreferrer">
            <ExternalIcon />
            Integrate for FREE
          </a>
        </li>
      </ul>
    </nav>
  );
}

export default GNB;

'''
'''--- src/components/LoginWithFace.js ---
import { getMetaMask, getWalletConnect, getWalletConnectLegacy, Kit } from '@haechi-labs/face-kit';
import {
  Blockchain,
  isEthlikeBlockchain,
  LoginProvider,
  networkToBlockchain,
} from '@haechi-labs/face-types';
import {klaytn, optimism} from "@wagmi/chains";
import {BigNumber, ethers, providers} from 'ethers';
import * as nearAPI from 'near-api-js';
import { useCallback, useEffect, useState } from 'react';
import { useRecoilState, useRecoilValue } from 'recoil';

import { config as nearConfig } from '../config/near';
import { faceAtom } from '../store';
import { accountAtom } from '../store/accountAtom';
import {kitAtom} from "../store/kitAtom";
import {walletAtom} from "../store/walletAtom";
import CheckboxList from './CheckboxList';
import Box from './common/Box';
import Button from './common/Button';
import Hr from "./common/Hr";
import Message from './common/Message';

const title = 'Log in';
const wcProjectId = 'c4e1a0d62ff8a6c9211c5d4b12cc0d67';

function LoginWithFace() {
  const face = useRecoilValue(faceAtom);
  const [, setAccount] = useRecoilState(accountAtom);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [loginProviders, setLoginProviders] = useState([]);

  const [kit, setKit] = useRecoilState(kitAtom);
  const [kitOptions, setKitOptions] = useState([]);
  const [wallet, setWallet] = useRecoilState(walletAtom);
  const [externalWallets, setExternalWallets] = useState([]);

  const getAccountInfo = useCallback(async () => {
    const blockchain = networkToBlockchain(face.internal.network);
    const user = await face.auth.getCurrentUser();
    let address, balance;

    if (blockchain === Blockchain.NEAR) {
      const nearProvider = face.near.getProvider();
      const publicKeys = await nearProvider.getPublicKeys();
      const near = await nearAPI.connect(nearConfig(face.internal.network));
      address = Buffer.from(publicKeys[0].data).toString('hex');
      const account = await near.account(address);
      balance = await account
        .getAccountBalance()
        .then((bal) => {
          return BigNumber.from(bal.total);
        })
        .catch(() => {
          return BigNumber.from('0');
        });
    } else if (isEthlikeBlockchain(blockchain)) {
      const provider = new providers.Web3Provider(face.getEthLikeProvider(), 'any');

      const signer = await provider.getSigner();
      address = await signer.getAddress();
      balance = await signer.getBalance();
    } else {
      throw new Error('unknown blockchain ' + blockchain);
    }

    console.group('[Account Information]');
    console.log('Balance:', balance);
    console.log('Address:', address);
    console.log('Current user:', user);
    console.groupEnd();

    setAccount({ address, balance: balance.toString(), user });
  }, [face, setAccount]);

  async function login() {
    const res = await face.auth.login(loginProviders.length ? loginProviders : undefined);
    console.log('Login response:', res);
    setIsLoggedIn(true);
    getAccountInfo();
  }

  async function logout() {
    await face.auth.logout();
    setIsLoggedIn(false);
    setAccount({});
  }

  useEffect(() => {
    if (!face) {
      return;
    }

    face.auth.isLoggedIn().then((result) => {
      setIsLoggedIn(result);

      if (result) {
        getAccountInfo();
      }
    });
  }, [face, getAccountInfo]);

  async function socialLogin(provider) {
    try {
      const res = await face.auth.directSocialLogin(provider);
      console.log('Social Login response:', res);
      setIsLoggedIn(true);
      getAccountInfo();
    } catch (e) {
      console.error('Social Login failed:', e);
    }
  }

  if (!face) {
    return (
      <Box title={title}>
        <Message type="danger">You must connect to the network first.</Message>
      </Box>
    );
  }
  return (
    <Box title={title}>
      {isLoggedIn ? (
        <>
          <Message type="info">Log in succeed</Message>
          <Button onClick={getAccountInfo}>Get account information</Button>
          <Button onClick={logout}>Log out</Button>
        </>
      ) : (
        <>
          <CheckboxList
            items={Object.values(LoginProvider).map((p) => ({ key: p }))}
            state={loginProviders}
            setState={setLoginProviders}
          />
          <Button onClick={login}>Log in with Face wallet</Button>
          <Button onClick={() => socialLogin('google.com')}>Google login</Button>
          <Button onClick={() => socialLogin('apple.com')}>Apple login</Button>
          <Button onClick={() => socialLogin('facebook.com')}>Facebook login</Button>
          <Button onClick={() => socialLogin('twitter.com')}>Twitter login</Button>
          <Button onClick={() => socialLogin('kakao.com')}>Kakao login</Button>
          <Button onClick={() => socialLogin('discord.com')}>Discord login</Button>
          <Hr />

          <h2 className="box__title title is-4">Face Wallet Kit</h2>
          {!kit && (
              <>
                <CheckboxList
                    items={[
                      { key: 'metaMask', label: 'MetaMask' },
                      { key: 'walletConnect', label: 'WalletConnect (v2)' },
                    ]}
                    state={externalWallets}
                    setState={setExternalWallets}
                />
                <CheckboxList
                    items={[
                      { key: 'expanded', label: 'Expand External Wallet' },
                      { key: 'emptyProviders', label: 'Empty Providers' },
                      { key: 'emptyExternalWallet', label: 'Empty External Wallet' },
                    ]}
                    state={kitOptions}
                    setState={setKitOptions}
                />
              </>
          )}
          {!kit && (
              <Button
                  onClick={async () => {
                    if (!face) {
                      return;
                    }
                    const kit = new Kit(face, {
                      providers: [
                        LoginProvider.Google,
                      ],
                      externalWalletOptions: {
                        wallets: [
                            getWalletConnect({
                                  options: { projectId: wcProjectId },
                                  chains: [
                                    klaytn,
                                    {
                                      id: 20197,
                                      name: "Sandverse",
                                      network: "Oasys Sandverse",

                                      rpcUrls: {
                                        default: { http: ["https://rpc.sandverse.oasys.games"]},
                                        public: { http: ["https://rpc.sandverse.oasys.games"]}
                                      },
                                    },
                                    {
                                      id: 99293,
                                      name: "roy",
                                      network: "RoyVerse",

                                      rpcUrls: {
                                        default: { http: ["https://rpc.sandverse.oasys.games"]},
                                        public: { http: ["https://rpc.sandverse.oasys.games"]}
                                      },
                                    },
                                    {
                                    id: 9372,
                                    name: "Testnet",
                                    network: "Oasys Testnet",
                                    nativeCurrency: "OAS",
                                    rpcUrls: {
                                      default: { "http": ["https://rpc.testnet.oasys.games"]},
                                      public: { "http": ["https://rpc.testnet.oasys.games"]}
                                        },
                                    }
                                  ]
                                })],
                        expanded: kitOptions.includes('expanded'),
                      },
                    });
                    setKit(kit);

                    try {
                      const isConnected = await kit.isConnected();
                      if (isConnected) {
                        const connectedWallet = await kit.connect();
                        console.log('Kit reconnected!', connectedWallet);
                        setWallet(connectedWallet);
                        setAccount({ address: await connectedWallet.connector.getAccount() });
                      }
                    } catch (e) {
                      console.error('Failed automatically connecting wallet by Kit:', e);
                    }
                  }}>
                Initialize Kit
              </Button>
          )}
          {kit && (
              <>
                <Button
                    onClick={async () => {
                      if (!kit) {
                        return;
                      }

                      try {
                        const connectedWallet = await kit.connect();
                        setWallet(connectedWallet);
                        setAccount({ address: await connectedWallet.connector.getAccount() });
                      } catch (e) {
                        console.error('Failed connecting wallet by Kit:', e);
                      }
                    }}>
                  Connect wallet by Kit
                </Button>
                <Button
                    onClick={async () => {
                      console.log('isConnected', await kit.isConnected());
                    }}>
                  isConnected
                </Button>
                <Button
                    onClick={async () => {
                      console.log('ConnectedWallet', kit.getConnectedWallet());
                    }}>
                  Get ConnectedWallet
                </Button>
                <Button
                    onClick={() => {
                      kit.disconnect();
                      setWallet(null);
                      setAccount({});
                    }}>
                  disconnect wallet
                </Button>
                <Button
                    onClick={async ()=>{
                      const faceChainId = await kit.face.getChainId()
                      console.log("faceChainId", faceChainId)
                      const connectedWallet = await kit.connect();
                      console.log('Kit connect response:', connectedWallet);  // <- Connected wallet has chainId = 20197

                      const baseProvider = await connectedWallet.connector.getProvider()
                      console.log("baseProvider", baseProvider)               // <- The base provider has chainId = 1
                      const provider = new providers.Web3Provider(
                          baseProvider
                      );
                      console.log("provider", provider)                       // <- Cannot force the chainId

                      const signer = provider.getSigner();
                      const blk = await provider.getBlock("latest")
                      console.log(blk)

                    }}>Test Kit Result ( show in console )
                </Button>
              </>
          )}
        </>
      )}
    </Box>
  );
}

export default LoginWithFace;

'''
'''--- src/components/SignMessage.js ---
import { providers } from 'ethers';
import { useState } from 'react';
import { useRecoilValue } from 'recoil';

import { faceAtom } from '../store';
import { accountAtom } from '../store/accountAtom';
import Box from './common/Box';
import Button from './common/Button';
import Field from './common/Field';
import Message from './common/Message';

const title = 'Sign Message';
function SignMessage() {
  const face = useRecoilValue(faceAtom);
  const account = useRecoilValue(accountAtom);
  const [message, setMessage] = useState('');
  const [signedMessage, setSignedMessage] = useState('');

  async function signMessage() {
    const provider = new providers.Web3Provider(face.getEthLikeProvider(), 'any');

    const signer = await provider.getSigner();
    const response = await signer.signMessage(message);

    console.log('Signed message', response);
    setSignedMessage(response);
  }

  if (!face) {
    return (
      <Box title={title}>
        <Message type="danger">You must connect to the network first.</Message>
      </Box>
    );
  }
  if (!account.balance || !account.address) {
    return (
      <Box title={title}>
        <Message type="danger">You must log in and get account first.</Message>
      </Box>
    );
  }

  return (
    <Box title={title}>
      <Field label="Message">
        <textarea
          className="textarea"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
        />
      </Field>
      <Button onClick={() => signMessage()}>Sign Message</Button>

      {signedMessage && (
        <Message type="info" className="has-text-left">
          <h4 className="has-text-weight-bold">Signed message</h4>
          <div>{signedMessage}</div>
        </Message>
      )}
    </Box>
  );
}

export default SignMessage;

'''
'''--- src/components/TransactionContractCall.js ---
import { Network } from '@haechi-labs/face-sdk';
import { providers, utils } from 'ethers';
import { useEffect, useState } from 'react';
import { useRecoilValue } from 'recoil';

import { getExplorerUrl } from '../lib/utils';
import { faceAtom } from '../store';
import { accountAtom } from '../store/accountAtom';
import { networkAtom } from '../store/networkAtom';
import Box from './common/Box';
import Button from './common/Button';
import Field from './common/Field';
import Message from './common/Message';

const contractAddressMap = {
  [Network.ETHEREUM]: '',
  [Network.SEPOLIA]: '0xF1e0C4576F4d7601B9aBDAe7eBbA8f9af3bEd249',
  [Network.POLYGON]: '',
  [Network.MUMBAI]: '0xe63c2f4bdd0df2b18b0a4e0210d4b1e95a23dff9',
  [Network.BNB_SMART_CHAIN]: '',
  [Network.BNB_SMART_CHAIN_TESTNET]: '0x33d24CdD4a858BC2965568717C7D11eC38650c56',
  [Network.KLAYTN]: '',
  [Network.BAOBAB]: '0xfe72540387e1F9aeFAC07D230dAE1865ad2E733c',
  [Network.BORA]: '0x5f07F73c6b3B0F02AB5821e7c1a2E3BcF6A78Bc6',
  [Network.BORA_TESTNET]: '0x10791D8c364DC71928e4F1484a5a7344568d6365',
};

const title = 'Contract Call Transaction';
function TransactionContractCall() {
  const face = useRecoilValue(faceAtom);
  const account = useRecoilValue(accountAtom);
  const network = useRecoilValue(networkAtom);
  const [txHash, setTxHash] = useState('');
  const [contractAddress, setContractAddress] = useState('');
  const [amount, setAmount] = useState('0');
  const [txData, setTxData] = useState('');

  useEffect(() => {
    // Set default contract address
    if (network) {
      setContractAddress(contractAddressMap[network]);
    }
  }, [network]);

  async function sendTransaction() {
    if (!contractAddress) {
      alert('Please enter contract address');
      return;
    }

    const provider = new providers.Web3Provider(face.getEthLikeProvider(), 'any');

    const signer = await provider.getSigner();
    const transactionResponse = await signer.sendTransaction({
      to: contractAddress,
      value: utils.parseUnits(amount),
      data: txData,
    });

    setTxHash(transactionResponse.hash);

    console.group('[Transaction Information]');
    console.log('Transaction response:', transactionResponse);
    console.log('Ropsten Link:', `${getExplorerUrl(network)}${transactionResponse.hash}`);

    const receipt = await transactionResponse.wait();
    console.log('Transaction receipt', receipt);
    console.groupEnd();
  }

  if (!face) {
    return (
      <Box title={title}>
        <Message type="danger">You must connect to the network first.</Message>
      </Box>
    );
  }
  if (!account.balance || !account.address) {
    return (
      <Box title={title}>
        <Message type="danger">You must log in and get account first.</Message>
      </Box>
    );
  }

  return (
    <Box title={title}>
      <Field label="Contract Address">
        <input
          className="input"
          value={contractAddress}
          onChange={(e) => setContractAddress(e.target.value)}
        />
      </Field>
      <Field label="Amount">
        <input className="input" value={amount} onChange={(e) => setAmount(e.target.value)} />
      </Field>
      <Field label="Tx Data">
        <input className="input" value={txData} onChange={(e) => setTxData(e.target.value)} />
      </Field>
      <Button onClick={sendTransaction}>Call contract</Button>
      {txHash && (
        <>
          <Message type="info">Hash: {txHash}</Message>
          <Message type="info">
            <a
              href={`${getExplorerUrl(network)}${txHash}`}
              rel="noopener noreferrer"
              target="_blank">
              Explorer Link
            </a>
          </Message>
        </>
      )}
      <Message type="dark" className="has-text-left">
        <h4 className="has-text-weight-bold">Sample data for sample contract</h4>
        <div>
          For success: <span className="tag is-success is-light">0x0b93381b</span>
        </div>
        <div>
          For failure: <span className="tag is-danger is-light">0xa9cc4718</span>
        </div>
      </Message>
    </Box>
  );
}

export default TransactionContractCall;

'''
'''--- src/components/TransactionErc20.js ---
import { Network } from '@haechi-labs/face-sdk';
import { networkToBlockchain } from '@haechi-labs/face-types';
import BN from 'bn.js';
import { ethers, providers, utils } from 'ethers';
import { poll } from 'ethers/lib/utils';
import * as nearAPI from 'near-api-js';
import { useEffect, useState } from 'react';
import { useRecoilValue } from 'recoil';

import { config as nearConfig } from '../config/near';
import { ERC20_ABI } from '../lib/abi';
import { createLargeDecimalFT } from '../lib/types';
import { calcNearTgas, getExplorerUrl, getProvider, makeErc20Data } from '../lib/utils';
import { faceAtom } from '../store';
import { accountAtom } from '../store/accountAtom';
import { networkAtom } from '../store/networkAtom';
import Box from './common/Box';
import Button from './common/Button';
import Field from './common/Field';
import Message from './common/Message';

const erc20ContractAddressMap = {
  [Network.ETHEREUM]: '0x8A904F0Fb443D62B6A2835483b087aBECF93a137',
  [Network.SEPOLIA]: '0xB112d79fc314E1F6901984F0b4fA7680057BFB63',
  [Network.POLYGON]: '0xfce04dd232006d0da001f6d54bb5a7fc969dbc08',
  [Network.MUMBAI]: '0xfce04dd232006d0da001f6d54bb5a7fc969dbc08',
  [Network.BNB_SMART_CHAIN]: '0xab3e0c68e867f1c81a6660960fdfcf53402b33bf',
  [Network.BNB_SMART_CHAIN_TESTNET]: '0x4c253d0f5de4dac61c5355aaa3efe0872dfadfff',
  [Network.KLAYTN]: '0xab3e0c68e867f1c81a6660960fdfcf53402b33bf',
  [Network.BAOBAB]: '0xb5567463c35dE682072A669425d6776B178Be3E4',
  [Network.BORA]: '0x797115bcdbD85DC865222724eD67d473CE168962',
  [Network.BORA_TESTNET]: '0x3d5cb6Be01f218CCA1Ec077028F2CFDC943A36f6',
  [Network.NEAR]: 'TODO',
  [Network.NEAR_TESTNET]: 'facewallet.testnet',
};

const title = 'Fungible Token Transaction';
function TransactionErc20() {
  const face = useRecoilValue(faceAtom);
  const account = useRecoilValue(accountAtom);
  const network = useRecoilValue(networkAtom);
  const [txHash, setTxHash] = useState('');
  const [amount, setAmount] = useState('0.001');
  const [contractAddress, setContractAddress] = useState('');
  const [receiverAddress, setReceiverAddress] = useState('');
  const [balance, setBalance] = useState('');

  useEffect(() => {
    // Set receiver to user account
    if (account.address) {
      setReceiverAddress(account.address);
    }
  }, [account.address]);

  useEffect(() => {
    // Set default contract address
    if (network) {
      setContractAddress(erc20ContractAddressMap[network]);
    }
  }, [network]);

  async function sendTransaction() {
    if (!amount) {
      alert('Please enter amount');
      return;
    }
    if (!contractAddress) {
      alert('Please enter contract address');
      return;
    }
    if (!receiverAddress) {
      alert('Please enter receiver address');
      return;
    }

    if (network === Network.NEAR || network === Network.NEAR_TESTNET) {
      const nearProvider = face.near.getProvider();
      const publicKey = (await nearProvider.getPublicKeys())[0];

      const senderAddress = ethers.utils.hexlify(publicKey.data).slice(2);

      const provider = new nearAPI.providers.JsonRpcProvider({ url: getProvider(network) });
      const accessKey = await provider
        .query(`access_key/${senderAddress}/${publicKey.toString()}`, '')
        .catch(() => ({ nonce: 0 }));

      const nonce = accessKey.nonce + 1;
      const actions = [
        nearAPI.transactions.functionCall(
          'ft_transfer',
          {
            receiver_id: receiverAddress,
            amount: createLargeDecimalFT(
              amount,
              networkToBlockchain(network)
            ).toDecimalAmountAsString(),
          },
          calcNearTgas(6),
          new BN('1', 10)
        ),
      ];
      const near = await nearAPI.connect(nearConfig(network));

      const status = await near.connection.provider.status();

      const blockHash = status.sync_info.latest_block_hash;
      const serializedBlockHash = nearAPI.utils.serialize.base_decode(blockHash);

      const tx = nearAPI.transactions.createTransaction(
        senderAddress,
        publicKey,
        contractAddress,
        nonce,
        actions,
        serializedBlockHash
      );
      const result = await nearProvider.signAndSendTransaction(tx);

      setTxHash(result);

      const sentTx = {
        hash: result,
        wait: async () => {
          return await poll(async () => {
            try {
              const receipt = await provider.txStatus(result, senderAddress);
              return {
                status: Object.keys(receipt.status).includes('SuccessValue'),
                internal: receipt,
              };
            } catch (e) {
              return undefined;
            }
          });
        },
      };

      console.group('[Transaction Information]');
      console.log('Transaction response:', sentTx);
      console.log('Explorer Link:', `${getExplorerUrl(network, sentTx.hash)}`);

      const receipt = await sentTx.wait();
      console.log('Transaction receipt', receipt);
      console.groupEnd();
    } else {
      const provider = new providers.Web3Provider(face.getEthLikeProvider(), 'any');

      const signer = await provider.getSigner();
      const transactionResponse = await signer.sendTransaction({
        to: contractAddress,
        value: '0x0',
        data: makeErc20Data('transfer', receiverAddress, utils.parseUnits(amount)),
      });

      setTxHash(transactionResponse.hash);

      console.group('[Transaction Information]');
      console.log('Transaction response:', transactionResponse);
      console.log('Explorer Link:', `${getExplorerUrl(network)}${transactionResponse.hash}`);

      const receipt = await transactionResponse.wait();
      console.log('Transaction receipt', receipt);
      console.groupEnd();
    }
  }

  async function getBalance() {
    if (!contractAddress) {
      alert('Please enter contract address');
      return;
    }

    if (network === Network.NEAR || network === Network.NEAR_TESTNET) {
      const provider = face.near.getProvider();
      const balance = await provider.getBalance(account.address, contractAddress);
      setBalance(utils.formatUnits(balance));
    } else {
      const provider = new providers.Web3Provider(face.getEthLikeProvider(), 'any');
      const contract = new ethers.Contract(contractAddress, ERC20_ABI, provider);
      const balance = await contract.balanceOf(account.address);
      setBalance(utils.formatUnits(balance));
    }
  }

  if (!face) {
    return (
      <Box title={title}>
        <Message type="danger">You must connect to the network first.</Message>
      </Box>
    );
  }
  if (!account.address) {
    return (
      <Box title={title}>
        <Message type="danger">You must log in and get account first.</Message>
      </Box>
    );
  }

  return (
    <Box title={title}>
      <Field label="Amount">
        <input className="input" value={amount} onChange={(e) => setAmount(e.target.value)} />
      </Field>
      <Field label="Contract Address">
        <input
          className="input"
          value={contractAddress}
          onChange={(e) => setContractAddress(e.target.value)}
        />
      </Field>
      <Field label="Receiver Address">
        <input
          className="input"
          value={receiverAddress}
          onChange={(e) => setReceiverAddress(e.target.value)}
        />
      </Field>
      <Button onClick={sendTransaction}>Transfer {amount} ERC20 token</Button>
      {txHash && (
        <>
          <Message type="info">Hash: {txHash}</Message>
          <Message type="info">
            <a
              href={`${getExplorerUrl(network)}${txHash}`}
              rel="noopener noreferrer"
              target="_blank">
              Explorer Link
            </a>
          </Message>
        </>
      )}
      <Button onClick={getBalance}>Get ERC20 token balance</Button>
      {balance && (
        <Message type="info" className="has-text-left">
          Balance: {balance}
        </Message>
      )}
    </Box>
  );
}

export default TransactionErc20;

'''
'''--- src/components/TransactionErc721.js ---
import { Network } from '@haechi-labs/face-sdk';
import { BigNumber, providers } from 'ethers';
import { useEffect, useState } from 'react';
import { useRecoilValue } from 'recoil';

import { getExplorerUrl, makeErc721Data } from '../lib/utils';
import { faceAtom } from '../store';
import { accountAtom } from '../store/accountAtom';
import { networkAtom } from '../store/networkAtom';
import Box from './common/Box';
import Button from './common/Button';
import Field from './common/Field';
import Message from './common/Message';

const erc721ContractAddressMap = {
  [Network.ETH_MAINNET]: '',
  [Network.ETH_TESTNET]: '0x4Caf688bcb35302861c5e87B0b94C190e2b346D7',
  [Network.MATIC_MAINNET]: '',
  [Network.MATIC_TESTNET]: '0x1CB4d2F2055299ca23BC310260ABaf72C5ACe800',
  [Network.BINANCE_COIN_MAINNET]: '0xb3484b204c96b366e1004e94bc50fe637322da47',
  [Network.BINANCE_COIN_TESTNET]: '0x2d65997da649f79ff79ac49501d786cc4973a715',
  [Network.KLAYTN_MAINNET]: '0xa2fab648f2cfd5cea88492808214fce0cca15b5e',
  [Network.KLAYTN_TESTNET]: '0x7059f425113f6630bd3871d778f0c289939a0da8',
  [Network.BORA]: '0x646ea0705805AE57C3500d6EC46BF982Fa88ed83',
  [Network.BORA_TESTNET]: '0x0F2585C209Fc272ad29b9c945766A0F7C45db7a0',
};

const title = 'Non-Fungible Token Transaction';
function TransactionErc721() {
  const face = useRecoilValue(faceAtom);
  const account = useRecoilValue(accountAtom);
  const network = useRecoilValue(networkAtom);
  const [txHash, setTxHash] = useState('');
  const [tokenId, setTokenId] = useState('');
  const [contractAddress, setContractAddress] = useState('');
  const [receiverAddress, setReceiverAddress] = useState('');

  useEffect(() => {
    // Set receiver to user account
    if (account.address) {
      setReceiverAddress(account.address);
    }
  }, [account.address]);

  useEffect(() => {
    // Set default contract address
    if (network) {
      setContractAddress(erc721ContractAddressMap[network]);
    }
  }, [network]);

  async function sendTransaction() {
    if (!tokenId) {
      alert('Please enter token ID');
      return;
    }
    if (!contractAddress) {
      alert('Please enter contract address');
      return;
    }
    if (!receiverAddress) {
      alert('Please enter receiver address');
      return;
    }

    const provider = new providers.Web3Provider(face.getEthLikeProvider(), 'any');

    const signer = await provider.getSigner();
    const myAddress = await signer.getAddress();
    const transactionResponse = await signer.sendTransaction({
      to: contractAddress,
      value: '0x0',
      data: makeErc721Data('transferFrom', myAddress, receiverAddress, BigNumber.from(tokenId)),
    });

    setTxHash(transactionResponse.hash);

    console.group('[Transaction Information]');
    console.log('Transaction response:', transactionResponse);
    console.log('Explorer Link:', `${getExplorerUrl(network)}${transactionResponse.hash}`);

    const receipt = await transactionResponse.wait();
    console.log('Transaction receipt', receipt);
    console.groupEnd();
  }

  if (!face) {
    return (
      <Box title={title}>
        <Message type="danger">You must connect to the network first.</Message>
      </Box>
    );
  }
  if (!account.balance || !account.address) {
    return (
      <Box title={title}>
        <Message type="danger">You must log in and get account first.</Message>
      </Box>
    );
  }

  return (
    <Box title={title}>
      <Field label="Token ID">
        <input className="input" value={tokenId} onChange={(e) => setTokenId(e.target.value)} />
      </Field>
      <Field label="Contract Address">
        <input
          className="input"
          value={contractAddress}
          onChange={(e) => setContractAddress(e.target.value)}
        />
      </Field>
      <Field label="Receiver Address">
        <input
          className="input"
          value={receiverAddress}
          onChange={(e) => setReceiverAddress(e.target.value)}
        />
      </Field>
      <Button onClick={sendTransaction}>Transfer ERC721 token</Button>
      {txHash && (
        <>
          <Message type="info">Hash: {txHash}</Message>
          <Message type="info">
            <a
              href={`${getExplorerUrl(network)}${txHash}`}
              rel="noopener noreferrer"
              target="_blank">
              Explorer Link
            </a>
          </Message>
        </>
      )}
    </Box>
  );
}

export default TransactionErc721;

'''
'''--- src/components/TransactionPlatformCoin.js ---
import { Blockchain, isEthlikeBlockchain, networkToBlockchain } from '@haechi-labs/face-types';
import { ethers, providers } from 'ethers';
import { poll } from 'ethers/lib/utils';
import * as nearAPI from 'near-api-js';
import { useEffect, useState } from 'react';
import { useRecoilValue } from 'recoil';

import { config as nearConfig } from '../config/near';
import { createPlatformCoin } from '../lib/types';
import { getExplorerUrl, getProvider } from '../lib/utils';
import { faceAtom } from '../store';
import { accountAtom } from '../store/accountAtom';
import { networkAtom } from '../store/networkAtom';
import Box from './common/Box';
import Button from './common/Button';
import Field from './common/Field';
import Message from './common/Message';

const title = 'Coin Transaction';
function TransactionPlatformCoin() {
  const face = useRecoilValue(faceAtom);
  const account = useRecoilValue(accountAtom);
  const network = useRecoilValue(networkAtom);
  const [txHash, setTxHash] = useState('');
  const [amount, setAmount] = useState('0.001');
  const [receiverAddress, setReceiverAddress] = useState('');

  useEffect(() => {
    // Set receiver to user account
    if (account.address) {
      setReceiverAddress(account.address);
    }
  }, [account.address]);

  async function sendTransaction() {
    let sentTx;
    const blockchain = networkToBlockchain(network);
    const coinAmount = createPlatformCoin(amount, blockchain);
    if (isEthlikeBlockchain(blockchain)) {
      const provider = new providers.Web3Provider(face.getEthLikeProvider(), 'any');
      const signer = await provider.getSigner();
      const transactionResponse = await signer.sendTransaction({
        to: receiverAddress,
        value: coinAmount.toHexAmount(),
      });
      sentTx = {
        hash: transactionResponse.hash,
        wait: async () => {
          const receipt = await transactionResponse.wait();
          return {
            status: receipt.status === 1,
            internal: receipt,
          };
        },
      };
    } else if (blockchain === Blockchain.NEAR) {
      const nearProvider = face.near.getProvider();
      const publicKey = (await nearProvider.getPublicKeys())[0];
      const senderAddress = ethers.utils.hexlify(publicKey.data).slice(2);
      const provider = new nearAPI.providers.JsonRpcProvider({ url: getProvider(network) });
      const accessKey = await provider
        .query(`access_key/${senderAddress}/${publicKey.toString()}`, '')
        .catch(() => ({ nonce: 0 }));
      const nonce = accessKey.nonce + 1;
      const actions = [nearAPI.transactions.transfer(coinAmount.toDecimalAmountAsString())];

      const near = await nearAPI.connect(nearConfig(network));

      const status = await near.connection.provider.status();

      const blockHash = status.sync_info.latest_block_hash;
      const serializedBlockHash = nearAPI.utils.serialize.base_decode(blockHash);
      const tx = nearAPI.transactions.createTransaction(
        senderAddress,
        publicKey,
        receiverAddress,
        nonce,
        actions,
        serializedBlockHash
      );
      const result = await nearProvider.signAndSendTransaction(tx);
      sentTx = {
        hash: result,
        wait: async () => {
          return await poll(async () => {
            try {
              const receipt = await provider.txStatus(result, senderAddress);
              return {
                status: Object.keys(receipt.status).includes('SuccessValue'),
                internal: receipt,
              };
            } catch (e) {
              console.debug('polling error', e);
              return undefined;
            }
          });
        },
      };
    } else {
      throw new Error('unknown blockchain ' + blockchain);
    }

    setTxHash(sentTx.hash);

    console.group('[Transaction Information]');
    console.log('Transaction response:', sentTx);
    console.log('Explorer Link:', `${getExplorerUrl(network)}${sentTx.hash}`);

    const receipt = await sentTx.wait();
    console.log('Transaction receipt', receipt);
    console.groupEnd();
  }

  if (!face) {
    return (
      <Box title={title}>
        <Message type="danger">You must connect to the network first.</Message>
      </Box>
    );
  }
  if (!account.balance || !account.address) {
    return (
      <Box title={title}>
        <Message type="danger">You must log in and get account first.</Message>
      </Box>
    );
  }

  return (
    <Box title={title}>
      <Field label="Amount">
        <input className="input" value={amount} onChange={(e) => setAmount(e.target.value)} />
      </Field>
      <Field label="Receiver Address">
        <input
          className="input"
          value={receiverAddress}
          onChange={(e) => setReceiverAddress(e.target.value)}
        />
      </Field>
      <Button onClick={sendTransaction}>Transfer 0.0001 coin</Button>
      {txHash && (
        <>
          <Message type="info">Hash: {txHash}</Message>
          <Message type="info">
            <a
              href={`${getExplorerUrl(network)}${txHash}`}
              rel="noopener noreferrer"
              target="_blank">
              Explorer Link
            </a>
          </Message>
        </>
      )}
    </Box>
  );
}

export default TransactionPlatformCoin;

'''
'''--- src/components/WalletConnect.js ---
import { useRecoilValue } from 'recoil';

import { faceAtom } from '../store';
import { accountAtom } from '../store/accountAtom';
import Box from './common/Box';
import Button from './common/Button';
import Message from './common/Message';

const title = 'Wallet Connect';
function WalletConnect() {
  const face = useRecoilValue(faceAtom);
  const account = useRecoilValue(accountAtom);

  if (!face) {
    return (
      <Box title={title}>
        <Message type="danger">You must connect to the network first.</Message>
      </Box>
    );
  }
  if (!account.balance || !account.address) {
    return (
      <Box title={title}>
        <Message type="danger">You must log in first.</Message>
      </Box>
    );
  }

  return (
    <Box title={title}>
      <Button onClick={() => face.wc.connectOpensea()}>Connect Opensea with Wallet Connect</Button>
    </Box>
  );
}

export default WalletConnect;

'''
'''--- src/components/WalletHome.js ---
import { useRecoilValue } from 'recoil';

import { faceAtom } from '../store';
import { accountAtom } from '../store/accountAtom';
import Box from './common/Box';
import Button from './common/Button';
import Message from './common/Message';

const title = 'Wallet Home';
function WalletHome() {
  const face = useRecoilValue(faceAtom);
  const account = useRecoilValue(accountAtom);

  if (!face) {
    return (
      <Box title={title}>
        <Message type="danger">You must connect to the network first.</Message>
      </Box>
    );
  }
  if (!account.balance || !account.address) {
    return (
      <Box title={title}>
        <Message type="danger">You must log in and get account first.</Message>
      </Box>
    );
  }

  return (
    <Box title={title}>
      <Button onClick={() => face.wallet.home()}>Open wallet home for all networks</Button>
    </Box>
  );
}

export default WalletHome;

'''
'''--- src/components/common/Box.js ---
function Box({ title, children }) {
  return (
    <div className="box">
      <h2 className="box__title title is-4">{title}</h2>
      <div className="box__body">{children}</div>
    </div>
  );
}

export default Box;

'''
'''--- src/components/common/Button.js ---
function Button({ type, children, ...rest }) {
  return (
    <div className={`button ${type ? 'is-' + type : ''}`} {...rest}>
      {children}
    </div>
  );
}

export default Button;

'''
'''--- src/components/common/Field.js ---
function Field({ label, children }) {
  return (
    <div className="field is-horizontal">
      <div className="field-label">
        <label className="label">{label}</label>
      </div>
      <div className="field-body">
        <div className="field">
          <p className="control">{children}</p>
        </div>
      </div>
    </div>
  );
}

export default Field;

'''
'''--- src/components/common/Hr.js ---
function Hr() {
  return (
    <div>
      <hr />
    </div>
  );
}

export default Hr;

'''
'''--- src/components/common/Message.js ---
function Message({ type, className, children }) {
  return (
    <div className={`message ${type ? 'is-' + type : ''} ${className}`}>
      <div className="message-body">{children}</div>
    </div>
  );
}

export default Message;

'''
'''--- src/config/apiKey.js ---
import { Network } from '@haechi-labs/face-types';

export const resolveApiKey = (network) => {
  // return 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCZNotniFjZdpvDllzdS77MrAgsYnvLtXJq6hem5XeCL9ZfQQzEwMJoadXUJuRQbZHFexJaPvynMD3ufvxKKEfxWR-8j6YCIbSh8MLhypfL7FEtLsQAck-T4jiptiMVxuPhrDRmGgzC2Sik_qi0SiXXUebsPULgQyS85nPhtQ5lNwIDAQAB';
  switch (network) {
    case Network.ETHEREUM:
    case Network.POLYGON:
    case Network.BNB_SMART_CHAIN:
    case Network.KLAYTN:
    case Network.BORA:
    case Network.NEAR:
      return 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCdu7Mk2mO6OsDyhTV9FbL0LRWh6QvV6hrabjKWT4Sv6ooQeacQJinuGKdFtMTxTIQFdq8o9iHkx_dpxZu7ljG23QYgpEBgj4pLIgv2XIzgApcpd5oGy41ksh2HRVUUjM-AqWOfF2JtaZehYCNVDuCF6pVLo-uPiLBY1icKbH503QIDAQAB';
    case Network.SEPOLIA:
    case Network.MUMBAI:
    case Network.BNB_SMART_CHAIN_TESTNET:
    case Network.BAOBAB:
    case Network.BORA_TESTNET:
    case Network.NEAR_TESTNET:
    case Network.SAND_VERSE:
    case Network.OASYS_TESTNET:
      return 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCeaHbeU4kjNUP9xvTa6f0UzmJkSpNzndRbkjloa_Cr2PLdr7pzHZ275ZA4z_Zb70VV-kzdj5w8Y4vDAbWGOrYAQeZeE1DfhfyEF8QzDsEZXwqBYv4oonanYwNiGC3-DsOpWFDl80unyfmGpdWC3Q0U1XgXkr7vD7xh4ACOXruVFwIDAQAB';
    default:
      throw new Error('unsupported network error');
  }
};

'''
'''--- src/config/near.js ---
// NOTE: status는 일반 node에서 조회가 안됨
import { Network } from '@haechi-labs/face-types';

export const config = (network) => {
  return network === Network.NEAR
    ? {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
      }
    : {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
      };
};

'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu',
    'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

'''
'''--- src/index.js ---
import 'bulma/css/bulma.css';
import './index.css';

import React from 'react';
import ReactDOM from 'react-dom/client';
import { RecoilRoot } from 'recoil';

import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <RecoilRoot>
      <App />
    </RecoilRoot>
  </React.StrictMode>
);

'''
'''--- src/lib/abi.js ---
export const ERC20_TRANSFER_ABI = [
  'function transfer(address to, uint256 value) public returns (bool success)',
];
export const ERC20_ABI = [
  ...ERC20_TRANSFER_ABI,
  'function balanceOf(address owner) view returns (uint256)',
];

export const ERC721_TRANSFER_ABI = [
  'function transferFrom(address from, address to, uint256 tokenId)',
  'function safeTransferFrom(address from, address to, uint256 tokenId)',
  'function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)',
];

'''
'''--- src/lib/platformCoin.js ---
import {
  getPlatFormCoinDecimalByBlockchain,
  isEthlikeBlockchain,
  networkToBlockchain,
} from '@haechi-labs/face-types';
import { utils } from 'ethers';

export function formatPlatformCoin(balance, network) {
  const blockchain = networkToBlockchain(network);
  if (isEthlikeBlockchain(blockchain)) {
    return utils.formatEther(balance);
  } else {
    return utils.formatUnits(balance, getPlatFormCoinDecimalByBlockchain(blockchain));
  }
}

'''
'''--- src/lib/types.js ---
import {
  Blockchain,
  getPlatFormCoinDecimalByBlockchain,
  isEthlikeBlockchain,
} from '@haechi-labs/face-types';
import { ethers } from 'ethers';

export class Coin {
  constructor({ data, decimal }) {
    this.data = data;
    this.decimal = decimal;
  }

  toHexAmount() {
    return this.data.toHexString();
  }

  toDecimalAmountAsNumber() {
    return this.data.toNumber();
  }

  toDecimalAmountAsString() {
    return this.data.toString();
  }
}

export function createPlatformCoin(amount, blockchain) {
  if (isEthlikeBlockchain(blockchain)) {
    return createEthCoin(amount);
  } else {
    return createNonEthCoin(amount, blockchain);
  }
}

/**
 * @param amount 0.01 같은 값
 */
function createEthCoin(amount) {
  return new Coin({
    data: ethers.utils.parseEther(amount),
    decimal: 18,
  });
}

/**
 * @param amount 0.01 같은 값
 */
function createNonEthCoin(amount, blockchain) {
  const decimal = getPlatFormCoinDecimalByBlockchain(blockchain);
  return new Coin({
    data: ethers.utils.parseUnits(amount, decimal),
    decimal: decimal,
  });
}

export function createLargeDecimalFT(amount, blockchain) {
  if (isEthlikeBlockchain(blockchain)) {
    return new Coin({
      data: ethers.utils.parseEther(amount),
      decimal: 18,
    });
  }
  if (Blockchain.SOLANA === blockchain) {
    return new Coin({
      data: ethers.utils.parseUnits(amount, 9),
      decimal: 9,
    });
  }

  if (Blockchain.NEAR === blockchain) {
    return new Coin({
      data: ethers.utils.parseUnits(amount, 18),
      decimal: 18,
    });
  }

  throw new Error('unknown blockchain for faucet');
}

'''
'''--- src/lib/utils.js ---
import { Network } from '@haechi-labs/face-sdk';
import BN from 'bn.js';
import { ethers } from 'ethers';

import { ERC20_ABI, ERC721_TRANSFER_ABI } from './abi';

export function makeErc20Data(functionFragment, to, value) {
  const ethersInterface = new ethers.utils.Interface(ERC20_ABI);
  return ethersInterface.encodeFunctionData(functionFragment, [to, value]);
}

export function makeErc721Data(functionFragment, from, to, tokenId) {
  const ethersInterface = new ethers.utils.Interface(ERC721_TRANSFER_ABI);
  return ethersInterface.encodeFunctionData(functionFragment, [from, to, tokenId]);
}

export function getExplorerUrl(network) {
  const explorerMap = {
    [Network.SEPOLIA]: 'https://sepolia.etherscan.io/tx/',
    [Network.ETHEREUM]: 'https://etherscan.io/tx/',
    [Network.MUMBAI]: 'https://mumbai.polygonscan.com/tx/',
    [Network.POLYGON]: 'https://polygonscan.com/tx/',
    [Network.BNB_SMART_CHAIN_TESTNET]: 'https://testnet.bscscan.com/tx/',
    [Network.BNB_SMART_CHAIN]: 'https://bscscan.com/tx/',
    [Network.BAOBAB]: 'https://baobab.klaytnfinder.io/tx/',
    [Network.KLAYTN]: 'https://www.klaytnfinder.io/tx/',
    [Network.BORA]: 'https://scope.boraportal.com/tx/',
    [Network.BORA_TESTNET]: 'https://scope.boraportal.com/tx/',
    [Network.NEAR]: 'https://explorer.near.org/transactions/tx}',
    [Network.NEAR_TESTNET]: 'https://explorer.testnet.near.org/transactions/tx',
  };

  return explorerMap[network];
}

export function getProvider(network) {
  switch (network) {
    case Network.ROPSTEN:
      return 'https://eth-ropsten.alchemyapi.io/v2/UghLajTzDNBAO9EByRXWmIqduze2_jJ2';
    case Network.SEPOLIA:
      return 'https://rpc.sepolia.org';
    case Network.ETHEREUM:
      return 'https://mainnet.infura.io/v3/';
    case Network.MUMBAI:
      return 'https://matic-mumbai.chainstacklabs.com';
    case Network.POLYGON:
      return 'https://polygon-rpc.com/';
    case Network.BNB_SMART_CHAIN:
      return 'https://bsc-dataseed.binance.org/';
    case Network.BNB_SMART_CHAIN_TESTNET:
      return 'https://data-seed-prebsc-1-s1.binance.org:8545/';
    case Network.KLAYTN:
      return 'https://public-node-api.klaytnapi.com/v1/cypress';
    case Network.BAOBAB:
      return 'https://api.baobab.klaytn.net:8651/';
    case Network.BORA:
      return 'https://bora-mainnet.haechi.io';
    case Network.BORA_TESTNET:
      return 'https://bora-testnet.haechi.io';
    case Network.SOLANA_DEVNET:
      return 'https://api.devnet.solana.com';
    case Network.SOLANA:
      return 'https://api.mainnet-beta.solana.com';
    case Network.NEAR:
      return 'https://rpc.mainnet.near.org';
    case Network.NEAR_TESTNET:
      return 'https://rpc.testnet.near.org';
    case Network.APTOS:
      return 'https://fullnode.mainnet.aptoslabs.com/v1';
    case Network.APTOS_TESTNET:
      return 'https://fullnode.testnet.aptoslabs.com/v1';
    case Network.MEVERSE:
      return 'https://rpc.meversemainnet.io';
    case Network.MEVERSE_TESTNET:
      return 'https://rpc.meversetestnet.io';
    case Network.PSM_TESTNET:
    case Network.PSM_TESTNET_TEST:
    case Network.PSM_TESTNET_DEV:
      throw Error(`cannot resolve node url with network : ${network}`);
    case Network.HOME_VERSE:
      return 'https://rpc.mainnet.oasys.homeverse.games';
    case Network.HOME_VERSE_TESTNET:
      return 'https://rpc.testnet.oasys.homeverse.games';
    case Network.YOOLDO_VERSE:
      return 'https://rpc.yooldo-verse.xyz';
    case Network.YOOLDO_VERSE_TESTNET:
      return 'https://rpc.sandverse.oasys.games';
    case Network.OASYS:
      return 'https://rpc.mainnet.oasys.games';
    case Network.OASYS_TESTNET:
      return 'https://rpc.testnet.oasys.games';
    default:
      throw Error(`cannot resolve provider with network : ${network}`);
  }
}

export function calcNearTgas(tgas) {
  // 1 tgas == 0.0001 near
  // 1 tgas === 1000000000000 BN
  tgas *= 1000000000000;
  return new BN(`${tgas}`, 10);
}

'''
'''--- src/store/accountAtom.js ---
import { atom } from 'recoil';

export const accountAtom = atom({
  key: 'accountAtom',
  default: {},
});

'''
'''--- src/store/faceAtom.js ---
import { atom } from 'recoil';

export const faceAtom = atom({
  key: 'faceAtom',
  default: null,
  dangerouslyAllowMutability: true,
});

'''
'''--- src/store/index.js ---
export * from './faceAtom';

'''
'''--- src/store/kitAtom.js ---
import { atom } from 'recoil';

export const kitAtom = atom({
  key: 'kitAtom',
  default: null,
  dangerouslyAllowMutability: true,
});

'''
'''--- src/store/networkAtom.js ---
import { atom } from 'recoil';

export const networkAtom = atom({
  key: 'networkAtom',
  default: '',
});

'''
'''--- src/store/walletAtom.js ---
import { atom } from 'recoil';

// Kit에서 사용되는 객체(Wallet)
// Kit을 통해 로그인하면 Wallet 객체를 리턴하고, 해당 객체에서 Provider를 받아 쓸 수 있음
// transaction을 전송하거나 sign할 때, walletStore에 Wallet 객체가 있으면 Wallet에서 provider를 받아서 사용함.
export const walletAtom = atom({
  key: 'walletAtom',
  default: null,
  dangerouslyAllowMutability: true,
});

'''