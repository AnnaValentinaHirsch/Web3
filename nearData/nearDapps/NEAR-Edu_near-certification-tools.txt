*GitHub Repository "NEAR-Edu/near-certification-tools"*

'''--- README.md ---
# NEAR Certification Tools

This repo contains 2 main parts (which have more specific documentation in those sections):

- The [API](api/router) that has the API endpoints fo minting / issuing new certificates and 
  for fetching data needed for image generation as well as the contract which controls the NFT 
  certificates for our NEAR Edu programs.
- The [web app](web-app) which implements the frontend for browsing the certificates and 
  generating the NFT images for them.

'''
'''--- api/Cargo.toml ---
[workspace]
members = [
  "near-certification-tools",
  "router",
  "mint-cert",
  "errors",
  "common",
  "invalidate-all-certs-for-account",
  "invalidate-cert",
  "cert",
]

[profile.release]
panic = "abort"
lto = true

[profile.release.package.near-certification-tools]
codegen-units = 1
opt-level = "z"
debug = false
overflow-checks = true

'''
'''--- api/README.md ---
# API

This workspace houses the smart contract which controls the NFT certificates 
which we issue in the (near-certification-tools)[./near-certification-tools]
package.

It also contains the API server for interacting with that contract - this
includes the following packages:

- (router)[./router] - This is the entry point to the API where the axum server
  gets instantiated and all the routes get combined.
- (common)[./common] - This is a collection of functions which most of the 
  routes share.
- (errors)[./errors] - This package containes the custom errors and error
  handling logic for the rest of the packages.
- (cert)[./cert] - This package is the handler for getting all the required
  information about a certificate needed for the image generation (done in
  the frontend). It queries the smart contract as well as the explorer
  database to calculate the expiration date for this particular certificate.
  **Note**: This is also the only route that doesn't require any auth.
- (mint-cert)[./mint-cert] - This package is the handler for minting a new
  certificate. It can only be performed by API key holders.
- (invalidate-all-certs-for-account)[./invalidate-all-certs-for-account] -
  This package is the handler for invalidating all certificates that are tied
  to a particular account. It can only be performed by API key holders.
- (invalidate-cert)[./invalidate-cert] - This package is the handler for
  invalidating a particular certificate. It can only be performed by API
  key holders.

The following environment variables are required in order for the API to
run, those are:

- `RPC_URL` - The URL of the RPC API to connect to (usually this is the
  mainnet URL: https://rpc.mainnet.near.org).
- `API_KEY` - The key to use as an authentication method for incoming
  requests.
- `CERTIFICATE_CONTRACT_ACCOUNT_ID` - The account ID of the contract
  which controls the certificate issuing/invalidating.
- `ISSUING_AUTHORITY_ACCOUNT_ID` - The account ID of the authorized
  issuer/invalidator of certificates.
- `ISSUING_AUTHORITY_PRIVATE_KEY` - The private key associated with the
  issuer/invalidator account.

You can run the API server by running the following command:

```shell
cargo run --package router
```

'''
'''--- api/cert/Cargo.toml ---
[package]
name = "cert"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
axum = { version = "0.6.0", features = ["macros"] }
chrono = "0.4.23"
common = { version = "0.1.0", path = "../common" }
errors = { version = "0.1.0", path = "../errors" }
serde = { version = "1.0.148", features = ["derive"] }
serde_json = "1.0.89"
tokio = { version = "1.22.0", features = ["full"] }
tokio-postgres = "0.7.7"

'''
'''--- api/cert/src/db.rs ---
use chrono::{DateTime, Datelike, Days, Duration, TimeZone, Utc};
use errors::APIResult;
use tokio_postgres::{NoTls, SimpleQueryMessage};

use crate::query::expiration_query;

const DB_URL: &'static str =
    "postgres://public_readonly:nearprotocol@mainnet.db.explorer.indexer.near.dev/mainnet_explorer";
const EXPIRATION_DAYS: u8 = 180;

fn get_start_of_day_in_nanoseconds() -> DateTime<Utc> {
    let now = Utc::now();
    let start_of_day = Utc
        .with_ymd_and_hms(now.year(), now.month(), now.day(), 0, 0, 0)
        .unwrap();

    start_of_day
}

#[allow(dead_code)]
fn get_hour_earlier_in_nanoseconds() -> String {
    (Utc::now() - Duration::hours(1))
        .timestamp_nanos()
        .to_string()
}

fn format_date(date: &DateTime<Utc>) -> String {
    date.format("%F %X%.6f%:::z").to_string()
}

fn parse_date(date: &str) -> DateTime<Utc> {
    Utc.datetime_from_str(date, "%F %T%.6f%#z").unwrap()
}

fn add_expiration_days(start_date: &str) -> String {
    let start_date = parse_date(start_date);
    let expiration_days = Days::new(EXPIRATION_DAYS.into());
    let expiration_date = start_date.checked_add_days(expiration_days).unwrap();

    expiration_date.format("%FT%T+00:00").to_string()
}

pub async fn get_expiration(account_id: &str, issued_at: &str) -> APIResult<String> {
    let start_of_day = get_start_of_day_in_nanoseconds();

    let issued_at = if issued_at.len() > 10 {
        issued_at.get(..issued_at.len() - 3).unwrap()
    } else {
        issued_at
    };

    let issued_at = Utc.datetime_from_str(issued_at, "%s").unwrap();

    if issued_at > start_of_day {
        return Ok(add_expiration_days(&format_date(&issued_at)));
    }

    let Ok((client, connection)) = tokio_postgres::connect(DB_URL, NoTls).await else {
        return Err(errors::APIError::DBConnectionError { database_url: DB_URL.to_string() });
    };

    tokio::spawn(async move {
        if let Err(error) = connection.await {
            // return Err(errors::APIError::DBConnectionError {
            //     database_url: DB_URL.to_string(),
            // });
            panic!("{error}");
        }
    });

    let Ok(rows) = client.simple_query(&expiration_query(
            &EXPIRATION_DAYS.to_string(),
            &issued_at.timestamp_nanos().to_string(),
            account_id,
            &start_of_day.timestamp_nanos().to_string(),
        )
    ).await else {
        return Err(errors::APIError::DBQueryExecutionError);
    };

    if rows.len() == 0 {
        println!("No rows returned.");

        return Ok(add_expiration_days(&format_date(&issued_at)));
    }

    let Some(query_message) = rows.get(0) else {
        println!("No rows returned.");

        return Ok(add_expiration_days(&format_date(&issued_at)));
    };

    let SimpleQueryMessage::Row(row) = query_message else {
        println!("No rows returned.");

        return Ok(add_expiration_days(&format_date(&issued_at)));
    };

    let moment = row.get("moment").unwrap();
    let diff_to_next_activity = row.get("diff_to_next_activity");
    println!("diff_to_next_activity: {diff_to_next_activity:?}, moment: {moment}");

    Ok(add_expiration_days(&moment))
}

'''
'''--- api/cert/src/lib.rs ---
use axum::{debug_handler, extract::Path, Json};
use errors::APIResult;

mod db;
mod query;

#[derive(serde::Deserialize, serde::Serialize)]
pub struct CertificateData {
    token_id: String,
    date: String,
    expiration: String,
    program_name: String,
    program_code: String,
    program_description: String,
    instructor: String,
    account_name: String,
}

#[derive(serde::Deserialize)]
struct CertificateExtraMetadata {
    authority_id: Option<String>,
    program: Option<String>,
    valid: bool,
}

async fn get_cert_data(token_id: &str) -> APIResult<CertificateData> {
    let token = common::get_token(token_id).await?;

    let Some(metadata) = token.metadata else {
        return Err(errors::APIError::NoMetadataError { token_id: token_id.to_string() });
    };

    let Some(issued_at) = metadata.issued_at else {
        return Err(errors::APIError::NoMetadataError { token_id: token_id.to_string() });
    };

    let account_name = token.owner_id.to_string();

    let expiration = db::get_expiration(&account_name, &issued_at.clone()).await?;

    let Some(extra_metadata) = metadata.extra else {
        return Err(errors::APIError::NoMetadataError { token_id: token_id.to_string() });
    };

    let Ok(extra_metadata) = serde_json::from_str::<CertificateExtraMetadata>(&extra_metadata) else {
        return Err(errors::APIError::ExtraMetadataInvalid { extra: extra_metadata.to_string() });
    };

    if !extra_metadata.valid {
        return Err(errors::APIError::CertificateInvalid {
            token_id: token_id.to_string(),
        });
    }

    let Some(program_code) = extra_metadata.program else {
        return Err(errors::APIError::NoMetadataError { token_id: token_id.to_string() });
    };

    let Some(program_name) = metadata.title else {
        return Err(errors::APIError::NoMetadataError { token_id: token_id.to_string() });
    };

    let Some(program_description) = metadata.description else {
        return Err(errors::APIError::NoMetadataError { token_id: token_id.to_string() });
    };

    let Some(instructor) = extra_metadata.authority_id else {
        return Err(errors::APIError::NoMetadataError { token_id: token_id.to_string() });
    };

    Ok(CertificateData {
        token_id: token.token_id,
        date: issued_at,
        expiration,
        account_name,
        instructor,
        program_name,
        program_code,
        program_description,
    })
}

#[debug_handler]
pub async fn handler(Path(token_id): Path<String>) -> APIResult<Json<CertificateData>> {
    Ok(Json(get_cert_data(&token_id).await?))
}

'''
'''--- api/cert/src/query.rs ---
pub fn expiration_query(
    expiration_days: &str,
    issued_at: &str,
    account_id: &str,
    start_of_day: &str,
) -> String {
    format!(
        r#"
        /* <--- START OF FIRST QUERY ---> */
        WITH long_period_of_inactivity AS (
          (
            SELECT 
              case
                /* return issue date as moment if days_between_issue_date_and_first_activity > 180 */
                when days_between_issue_date_and_first_activity >= ({expiration_days}::text)::numeric then TO_TIMESTAMP(({issued_at}::text)::numeric/1000000000)
                /* else, return the start date of first occurance of >=180 day inactivity period if present */
                else moment
              end as moment,
              case
                /* if first activity - issue date exceeds 180 days, return the difference in days */
                when days_between_issue_date_and_first_activity >= ({expiration_days}::text)::numeric then days_between_issue_date_and_first_activity
                /* else, return the days between start of inactivity period and the next activity date */
                else diff_to_next_activity
              end as diff_to_next_activity
            FROM (
              SELECT *,
                ((EXTRACT(epoch FROM first_activity) - ({issued_at}::text)::numeric / 1000000000) / 86400)::int AS days_between_issue_date_and_first_activity
              FROM (
                SELECT *,
                  /* 1 day = 60sec * 60min * 24h = 86400 sec*/
                  ((EXTRACT(epoch FROM moment_of_activity) - EXTRACT(epoch FROM LAG(moment_of_activity) over (ORDER BY moment_of_activity))) / 86400)::int AS diff_to_next_activity,
                  LAG(moment_of_activity) OVER (ORDER BY moment_of_activity) AS moment,
                  FIRST_VALUE(moment_of_activity) OVER(ORDER BY moment_of_activity) first_activity
                FROM (
                  SELECT
                    TO_TIMESTAMP(R."included_in_block_timestamp" / 1000000000) as moment_of_activity
                  FROM
                    PUBLIC.RECEIPTS R LEFT JOIN PUBLIC.ACTION_RECEIPTS AR ON R.RECEIPT_ID = AR.RECEIPT_ID
                  WHERE
                    SIGNER_ACCOUNT_ID = '{account_id}'
                    /* double casting because of prisma template literal throwing 22P03 Error in DB */
                    AND R."included_in_block_timestamp" >= ({issued_at}::text)::numeric
                    AND R."included_in_block_timestamp" <= ({start_of_day}::text)::numeric
                ) as account_activity_dates
              ) as account_activity_periods
            ) as account_activity_periods_with_first_activity
            WHERE (diff_to_next_activity > ({expiration_days}::text)::numeric) OR (days_between_issue_date_and_first_activity > ({expiration_days}::text)::numeric)
            ORDER BY moment ASC
            LIMIT 1
          )
        /* <--- END OF FIRST QUERY ---> */

        /* <--- START OF SECOND QUERY, IN CASE FIRST QUERY DOESN'T MATCH CONDITIONS ---> */
        ), most_recent_activity AS (
          SELECT
            /* moment refers to the most recent activity date of account */
            moment,
            /* to match column numbers in both queries */
            CAST(NULL AS int) AS diff_to_next_activity
          FROM (
            SELECT TO_TIMESTAMP(R."included_in_block_timestamp" / 1000000000) as moment
            FROM
              PUBLIC.receipts R LEFT JOIN PUBLIC.ACTION_RECEIPTS AR ON R.RECEIPT_ID = AR.RECEIPT_ID
            WHERE
              SIGNER_ACCOUNT_ID = '{account_id}'
              /* double casting because of prisma template literal throwing 22P03 Error in DB */
              AND R."included_in_block_timestamp" >= ({issued_at}::text)::numeric
              AND R."included_in_block_timestamp" <= ({start_of_day}::text)::numeric
          ) as receipt
          WHERE NOT EXISTS (TABLE long_period_of_inactivity)
          ORDER BY moment DESC
          LIMIT 1
        )
        /* <--- END OF SECOND QUERY ---> */

        /* <--- BINDING CTEs WITH UNION ALL. IF FIRST QUERY (long_period_of_inactivity) DOESN'T RETURN ANY RESULT, RUN SECOND QUERY (most_recent_activity) ---> */
        TABLE long_period_of_inactivity
        UNION ALL
        TABLE most_recent_activity
        "#
    )
}

'''
'''--- api/common/Cargo.toml ---
[package]
name = "common"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
axum = { version = "0.6.0", features = ["macros"] }
dotenvy = "0.15.6"
errors = { version = "0.1.0", path = "../errors" }
near-certification-tools = { version = "0.1.0", path = "../near-certification-tools" }
near-crypto = "0.15.0"
near-jsonrpc-client = "0.4.1"
near-jsonrpc-primitives = "0.15.0"
near-primitives = "0.15.0"
serde = "1.0.147"
serde_json = "1.0.89"

'''
'''--- api/common/src/lib.rs ---
use axum::extract::FromRef;
use errors::APIResult;
use near_certification_tools::Token;
use near_jsonrpc_client::{methods, JsonRpcClient};
use near_jsonrpc_primitives::types::query::QueryResponseKind;
use near_primitives::{
    hash::CryptoHash,
    transaction::{Action, Transaction},
    types::{BlockReference, FunctionArgs},
    views::{AccessKeyView, CallResult, FinalExecutionOutcomeView},
};

pub const TGAS: u64 = 1_000_000_000_000;
pub const NEAR: u128 = 1_000_000_000_000_000_000_000_000;
pub const YOCTO_NEAR: u128 = 1;

#[derive(Clone)]
pub struct SignerData {
    pub account_id: String,
    pub private_key: String,
}

#[derive(Clone, FromRef)]
pub struct AppData {
    pub signer_data: SignerData,
}

impl AppData {
    pub fn new() -> Self {
        let account_id = dotenvy::var("ISSUING_AUTHORITY_ACCOUNT_ID")
            .expect("No authority account ID in environment!");
        let private_key = dotenvy::var("ISSUING_AUTHORITY_PRIVATE_KEY")
            .expect("No authority private key in environment!");

        AppData {
            signer_data: SignerData {
                account_id,
                private_key,
            },
        }
    }
}

fn connect_rpc() -> JsonRpcClient {
    let rpc_url = dotenvy::var("RPC_URL").expect("Missing RPC URL!");

    JsonRpcClient::connect(&rpc_url)
}

pub async fn view_access_key(
    account_id: &str,
    private_key: &str,
) -> APIResult<(CryptoHash, AccessKeyView)> {
    let Ok(account_id) = account_id.parse() else {
        return Err(errors::APIError::AccountInvalid { account_id: account_id.to_string() });
    };

    let Ok(private_key) = private_key.parse() else {
        return Err(errors::APIError::PrivateKeyInvalid { private_key: private_key.to_string() });
    };

    let near_crypto::InMemorySigner {
        account_id,
        public_key,
        ..
    } = near_crypto::InMemorySigner::from_secret_key(account_id, private_key);
    println!("{account_id:?}");

    let (kind, block_hash) = match connect_rpc()
        .call(methods::query::RpcQueryRequest {
            block_reference: BlockReference::latest(),
            request: near_primitives::views::QueryRequest::ViewAccessKey {
                account_id,
                public_key,
            },
        })
        .await
    {
        Ok(response) => (response.kind, response.block_hash),
        Err(error) => {
            eprintln!("{error:?}");
            return Err(errors::APIError::ServerError);
        }
    };

    let access_key_view = match kind {
        QueryResponseKind::AccessKey(access_key_view) => access_key_view,
        _ => {
            eprintln!("Received wrong query response kind.");
            return Err(errors::APIError::ServerError);
        }
    };

    Ok((block_hash, access_key_view))
}

pub async fn check_account_id(account_id: &str) -> APIResult<bool> {
    let Ok(account_id_parsed) = account_id.parse() else {
        return Err(errors::APIError::AccountInvalid { account_id: account_id.to_string() });
    };

    match connect_rpc()
        .call(methods::query::RpcQueryRequest {
            block_reference: BlockReference::latest(),
            request: near_primitives::views::QueryRequest::ViewAccount {
                account_id: account_id_parsed,
            },
        })
        .await
    {
        Ok(_) => Ok(true),
        Err(_) => Err(errors::APIError::AccountNotFound {
            account_id: account_id.parse().unwrap(),
        }),
    }
}

pub async fn get_tokens_for_owner(account_id: &str) -> APIResult<Vec<Token>> {
    let contract_id = dotenvy::var("CERTIFICATE_CONTRACT_ACCOUNT_ID")
        .expect("Certificate contract account ID missing!")
        .parse()
        .unwrap();
    let method_name = "nft_tokens_for_owner".to_string();
    let args = FunctionArgs::from(
        serde_json::json!({ "account_id": account_id })
            .to_string()
            .into_bytes(),
    );

    let Ok(near_jsonrpc_primitives::types::query::RpcQueryResponse {
        kind, ..
    }) = connect_rpc().call(methods::query::RpcQueryRequest {
        block_reference: BlockReference::latest(),
        request: near_primitives::views::QueryRequest::CallFunction {
            account_id: contract_id,
            method_name,
            args,
        },
    }).await else {
        return Err(errors::APIError::ServerError);
    };

    let QueryResponseKind::CallResult(CallResult{result, ..}) = kind else {
        return Err(errors::APIError::ServerError);
    };

    Ok(deserialize_bytes(&result)?)
}

pub async fn get_token(token_id: &str) -> APIResult<Token> {
    let account_id = dotenvy::var("CERTIFICATE_CONTRACT_ACCOUNT_ID")
        .expect("Certificate contract account ID missing!")
        .parse()
        .unwrap();
    let method_name = "nft_token".to_string();
    let args = FunctionArgs::from(
        serde_json::json!({ "token_id": token_id })
            .to_string()
            .into_bytes(),
    );

    let Ok(near_jsonrpc_primitives::types::query::RpcQueryResponse {
        kind, ..
    }) = connect_rpc().call(methods::query::RpcQueryRequest {
        block_reference: BlockReference::latest(),
        request: near_primitives::views::QueryRequest::CallFunction {
            account_id,
            method_name,
            args,
        },
    }).await else {
        return Err(errors::APIError::ServerError);
    };

    let QueryResponseKind::CallResult(CallResult{result, ..}) = kind else {
        return Err(errors::APIError::ServerError);
    };

    Ok(deserialize_bytes(&result)?)
}

pub async fn send_transaction_to_certs(
    actions: Vec<Action>,
    SignerData {
        account_id,
        private_key,
    }: SignerData,
) -> APIResult<FinalExecutionOutcomeView> {
    let (block_hash, access_key_view) = view_access_key(&account_id, &private_key).await?;

    let nonce = access_key_view.nonce + 1;

    let receiver_id = dotenvy::var("CERTIFICATE_CONTRACT_ACCOUNT_ID")
        .expect("Certificate contract account ID missing!")
        .parse()
        .unwrap();
    let signer = near_crypto::InMemorySigner::from_secret_key(
        account_id.parse().unwrap(),
        private_key.parse().unwrap(),
    );

    let transaction = Transaction {
        signer_id: signer.account_id.clone(),
        public_key: signer.public_key.clone(),
        nonce,
        receiver_id,
        block_hash,
        actions,
    };

    let request = methods::broadcast_tx_commit::RpcBroadcastTxCommitRequest {
        signed_transaction: transaction.sign(&signer),
    };

    match connect_rpc().call(request).await {
        Ok(res) => Ok(res),
        Err(error) => {
            println!("{error:?}");
            Err(errors::APIError::ServerError)
        }
    }
}

pub fn deserialize_bytes<'input_lifetime, Type>(bytes: &'input_lifetime [u8]) -> APIResult<Type>
where
    Type: serde::de::Deserialize<'input_lifetime>,
{
    match serde_json::from_slice(bytes) {
        Ok(result) => Ok(result),
        Err(_) => Err(errors::APIError::DeserializationError {
            string: match String::from_utf8(bytes.to_owned()) {
                Ok(string) => string,
                Err(_) => {
                    return Err(errors::APIError::ParseError {
                        bytes: bytes.to_owned(),
                    })
                }
            },
        }),
    }
}

'''
'''--- api/errors/Cargo.toml ---
[package]
name = "errors"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
anyhow = "1.0.66"
axum = "0.6.0"
near-primitives = "0.15.0"
serde = { version = "1.0.147", features = ["derive"] }
thiserror = "1.0.37"

'''
'''--- api/errors/src/lib.rs ---
pub use anyhow;
use axum::response::IntoResponse;

#[derive(thiserror::Error, Debug, serde::Serialize)]
pub enum APIError {
    #[error("Invalid account ID provided. {account_id:?} does not exist.")]
    AccountNotFound {
        account_id: near_primitives::types::AccountId,
    },
    #[error("Invalid account ID provided. {account_id} did not pass validation.")]
    AccountInvalid { account_id: String },
    #[error("Invalid private key provided. {private_key} did not pass validation.")]
    PrivateKeyInvalid { private_key: String },
    #[error("Minting the certificate failed with error: {message}.")]
    MintFailure { message: String },
    #[error("Invalidating the certificate failed with error: {message}.")]
    InvalidateFailure { message: String },
    #[error("Error parsing bytes: {bytes:?}.")]
    ParseError { bytes: Vec<u8> },
    #[error("Error deserializing string: {string}.")]
    DeserializationError { string: String },
    #[error("No metadata for token with ID: {token_id}.")]
    NoMetadataError { token_id: String },
    #[error("Extra metadata is invalid: {extra}.")]
    ExtraMetadataInvalid { extra: String },
    #[error("Couldn't connect to database: {database_url}")]
    DBConnectionError { database_url: String },
    #[error("Error executing query.")]
    DBQueryExecutionError,
    #[error("Certificate with ID: {token_id} is invalid.")]
    CertificateInvalid { token_id: String },
    #[error("Unauthorized request.")]
    Unauthorized,
    #[error("Something unexpected went wrong.")]
    ServerError,
}

impl IntoResponse for APIError {
    fn into_response(self) -> axum::response::Response {
        let status_code = match self {
            APIError::Unauthorized => axum::http::StatusCode::UNAUTHORIZED,
            _ => axum::http::StatusCode::INTERNAL_SERVER_ERROR,
        };

        (status_code, format!("{self}")).into_response()
    }
}

pub type APIResult<SuccessValue> = Result<SuccessValue, APIError>;

'''
'''--- api/invalidate-all-certs-for-account/Cargo.toml ---
[package]
name = "invalidate-all-certs-for-account"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
axum = { version = "0.6.0", features = ["macros"] }
common = { version = "0.1.0", path = "../common" }
errors = { version = "0.1.0", path = "../errors" }
near-primitives = "0.15.0"
serde = { version = "1.0.148", features = ["derive"] }
serde_json = "1.0.89"

'''
'''--- api/invalidate-all-certs-for-account/sample_api_payload_invalidate-all-certs-for-account.json ---
{
  "account_id": "example.near"
}

'''
'''--- api/invalidate-all-certs-for-account/src/lib.rs ---
use axum::{
    debug_handler,
    extract::{Json, State},
    http::StatusCode,
};
use common::{SignerData, TGAS, YOCTO_NEAR};
use errors::APIResult;
use near_primitives::{
    transaction::{Action, FunctionCallAction},
    views::FinalExecutionStatus,
};

#[derive(serde::Deserialize)]
pub struct Payload {
    account_id: String,
}

async fn call_cert_invalidate(account_id: &str, signer_data: SignerData) -> APIResult<bool> {
    let tokens = common::get_tokens_for_owner(account_id).await?;

    let actions = tokens
        .into_iter()
        .map(|token| {
            let method_name = "cert_invalidate".to_string();
            let gas = 100 * TGAS;
            let deposit = YOCTO_NEAR;
            let args = serde_json::json!({"token_id": token.token_id})
                .to_string()
                .into_bytes();

            Action::FunctionCall(FunctionCallAction {
                method_name,
                args,
                gas,
                deposit,
            })
        })
        .collect();

    match common::send_transaction_to_certs(actions, signer_data)
        .await?
        .status
    {
        FinalExecutionStatus::SuccessValue(_) => Ok(true),
        FinalExecutionStatus::Failure(error) => Err(errors::APIError::InvalidateFailure {
            message: error.to_string(),
        }),
        _ => Err(errors::APIError::MintFailure {
            message: "Transaction is not yet completed.".to_string(),
        }),
    }
}

#[debug_handler]
pub async fn handler(
    State(signer_data): State<SignerData>,
    Json(Payload { account_id }): Json<Payload>,
) -> APIResult<(StatusCode, String)> {
    call_cert_invalidate(&account_id, signer_data).await?;

    Ok((StatusCode::OK, "Invalidation successfull.".to_string()))
}

'''
'''--- api/invalidate-cert/Cargo.toml ---
[package]
name = "invalidate-cert"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
axum = { version = "0.6.1", features = ["macros"] }
common = { version = "0.1.0", path = "../common" }
errors = { version = "0.1.0", path = "../errors" }
near-primitives = "0.15.0"
serde = { version = "1.0.148", features = ["derive"] }
serde_json = "1.0.89"

'''
'''--- api/invalidate-cert/src/lib.rs ---
use axum::{
    debug_handler,
    extract::{Json, State},
    http::StatusCode,
};
use common::{SignerData, TGAS, YOCTO_NEAR};
use errors::APIResult;
use near_primitives::{
    transaction::{Action, FunctionCallAction},
    views::FinalExecutionStatus,
};

async fn call_cert_invalidate(token_id: &str, signer_data: SignerData) -> APIResult<bool> {
    let method_name = "cert_invalidate".to_string();
    let gas = 100 * TGAS;
    let deposit = YOCTO_NEAR;
    let args = serde_json::json!({ "token_id": token_id })
        .to_string()
        .into_bytes();

    let action = Action::FunctionCall(FunctionCallAction {
        method_name,
        args,
        gas,
        deposit,
    });

    match common::send_transaction_to_certs(vec![action], signer_data)
        .await?
        .status
    {
        FinalExecutionStatus::SuccessValue(_) => Ok(true),
        FinalExecutionStatus::Failure(error) => Err(errors::APIError::InvalidateFailure {
            message: error.to_string(),
        }),
        _ => Err(errors::APIError::MintFailure {
            message: "Transaction is not yet completed.".to_string(),
        }),
    }
}

#[derive(serde::Deserialize)]
pub struct Payload {
    token_id: String,
}

#[debug_handler]
pub async fn handler(
    State(signer_data): State<SignerData>,
    Json(Payload { token_id }): Json<Payload>,
) -> APIResult<(StatusCode, String)> {
    call_cert_invalidate(&token_id, signer_data).await?;

    Ok((StatusCode::OK, "Invalidation successfull.".to_string()))
}

'''
'''--- api/mint-cert/Cargo.toml ---
[package]
name = "mint-cert"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
axum = { version = "0.6", features = ["macros"] }
chrono = "0.4.23"
common = { version = "0.1.0", path = "../common" }
errors = { version = "0.1.0", path = "../errors" }
near-certification-tools = { version = "0.1.0", path = "../near-certification-tools" }
near-primitives = "0.15.0"
serde = { version = "1.0.147", features = ["derive"] }
serde_json = "1.0.89"
uuid = "1.2.2"

'''
'''--- api/mint-cert/sample_api_payload_mint-cert.json ---
{
  "details": {
    "title": "NEAR Certified Developer",
    "description": "has successfully completed the NEAR Certified Developer program by demonstrating proficiency in working with smart contracts on NEAR Protocol",
    "authority_id": "sherif.near",
    "authority_name": "Sherif Abushadi",
    "program": "Developer",
    "program_name": "NEAR Certified Developer",
    "program_link": "https://www.near.university/courses/near-certified-developer",
    "program_start_date": null,
    "program_end_date": "2022-04-01T13:00:00+00:00",
    "original_recipient_id": "hatchet.testnet",
    "original_recipient_name": "Hatchet",
    "memo": ""
  }
}

'''
'''--- api/mint-cert/src/lib.rs ---
use axum::{
    self, debug_handler,
    extract::{Json, State},
};
use common::{SignerData, NEAR, TGAS};
use errors::APIResult;
use near_certification_tools::{CertificationExtraMetadata, MintNFT, Token, TokenMetadata};
use near_primitives::{
    transaction::{Action, FunctionCallAction},
    views::FinalExecutionStatus,
};

#[derive(serde::Deserialize)]
pub struct MintPayloadDetails {
    title: String,
    description: String,
    issued_at: String,
    authority_id: String,
    authority_name: String,
    program: String,
    program_name: String,
    program_link: String,
    program_start_date: String,
    program_end_date: String,
    original_recipient_id: String,
    original_recipient_name: String,
}

#[derive(serde::Deserialize)]
pub struct MintPayload {
    details: MintPayloadDetails,
}

impl From<MintPayload> for MintNFT {
    fn from(MintPayload { details }: MintPayload) -> MintNFT {
        let token_id = uuid::Uuid::new_v4().to_string().replace("-", "");

        MintNFT {
            receiver_account_id: Some(details.original_recipient_id.parse().unwrap()),
            certification_metadata: CertificationExtraMetadata {
                authority_id: Some(details.authority_id.parse().unwrap()),
                authority_name: Some(details.authority_name),
                program: Some(details.program),
                program_name: Some(details.program_name),
                program_link: Some(details.program_link),
                program_start_date: Some(details.program_start_date.parse::<u64>().unwrap().into()),
                program_end_date: Some(details.program_end_date.parse::<u64>().unwrap().into()),
                original_recipient_id: Some(details.original_recipient_id.parse().unwrap()),
                original_recipient_name: Some(details.original_recipient_name),
                memo: None,
                valid: true,
            },
            token_metadata: TokenMetadata {
                title: Some(details.title),
                description: Some(details.description),
                media: Some(format!(
                    "https://certificates.near.university/api/cert/{token_id}.svg"
                )),
                copies: Some(1),
                issued_at: Some(details.issued_at),
                media_hash: None,
                expires_at: None,
                starts_at: None,
                updated_at: None,
                extra: None,
                reference: None,
                reference_hash: None,
            },
            token_id,
            memo: None,
        }
    }
}

async fn call_mint(payload: MintNFT, signer_data: SignerData) -> APIResult<Token> {
    let method_name = "nft_mint".to_string();
    let gas = 100 * TGAS;
    let deposit = NEAR / 5;
    let args = serde_json::json!(payload).to_string().into_bytes();

    let function_call = Action::FunctionCall(FunctionCallAction {
        method_name,
        args,
        gas,
        deposit,
    });

    match common::send_transaction_to_certs(vec![function_call], signer_data)
        .await?
        .status
    {
        FinalExecutionStatus::SuccessValue(value) => common::deserialize_bytes(&value),
        FinalExecutionStatus::Failure(error) => Err(errors::APIError::MintFailure {
            message: error.to_string(),
        }),
        _ => Err(errors::APIError::MintFailure {
            message: "Transaction is not yet completed.".to_string(),
        }),
    }
}

#[debug_handler]
pub async fn handler(
    State(signer_data): State<SignerData>,
    Json(payload): Json<MintPayload>,
) -> APIResult<axum::Json<Token>> {
    Ok(axum::Json(call_mint(payload.into(), signer_data).await?))
}

'''
'''--- api/near-certification-tools/Cargo.toml ---
[package]
name = "near-certification-tools"
version = "0.1.0"
edition = "2021"
authors = ["Jacob Lindahl <jacob@near.foundation>"]

[dependencies]
near-sdk = "4.0.0-pre.8"
near-contract-standards = "4.0.0-pre.8"
near-contract-tools = "0.2.0"

[lib]
crate-type = ["cdylib", "lib"]

'''
'''--- api/near-certification-tools/README.md ---
# NEAR Certification Tools - Data Contract

This Rust contract provides the foundational data model for certifications, issuing standards-compliant NFTs.

# Design Rationale

A notable difference between the implementation of this contract and many other NFT projects is that all of the metadata
is stored on-chain. This is for the purpose of reducing overhead to client implementation, and also because storage on
NEAR is so darn cheap.

# Install Rust and Cargo

https://doc.rust-lang.org/cargo/getting-started/installation.html#install-rust-and-cargo

```bash
curl https://sh.rustup.rs -sSf | sh
```

You might want to close and reopen your IDE (e.g. VSC) and install any Rust-related extensions too.

# Build

```bash
./build.sh
# If you get the error discussed at https://stackoverflow.com/a/70883283/470749, try first running:
rustup target add wasm32-unknown-unknown
```

# Deploy

Modify `init_args.json` file to fit your needs, particularly `owner_id`.

The `metadata.name` field is what will be the section header of the [Collectibles tab of Wallet](https://wallet.testnet.near.org/?tab=collectibles). It seems reasonable for this to say "NEAR University".

It might be worth reviewing the Metadata standard: https://nomicon.io/Standards/NonFungibleToken/Metadata#interface but many fields are probably fine as `null`.

You might want something in the `icon` field so that it looks nice in a wallet. The `icon` field controls which image is used at the contract level. See the note in the above Nomicon page about using an optimized SVG in the data URL. https://npm.runkit.com/mini-svg-data-uri looks useful.  

The Collectibles tab of Wallet lists out NFTs nested within groups, where each group is a contract (and displays its name and icon as mentioned above). Then each NFT within the group has its own name and image (media), but its media is defined in `token_metadata.media`. See [sample_mint.json](sample_mint.json). But now we dynamically generate this media to show a personalized certificate. Also see comment in web-app/pages/api/mint-cert.ts about our decision to omit media_hash.

## Testnet

```bash
NEAR_ENV=testnet near login
./dev_deploy.sh
```

Any arguments are forwarded to `near dev-deploy` command.

For example, to deploy to a new dev address (ignoring a previously generated address in `neardev/`):

```bash
./dev_deploy.sh --force
```

## Mainnet (initial deployment)

```bash
NEAR_ENV=mainnet ./deploy.sh ACCOUNT_ID
```

## Mainnet (if you need to redeploy, overwriting the original contract)

Temporarily delete the `--initFunction new \` line from `deploy.sh` and then run the command as mentioned above.

There is also a `set_metadata` function available if we want to edit contract metadata without redeploying. See [this commit](https://github.com/NEAR-Edu/near-certification-tools/commit/a60e2f339c8e17b72af1d74d0b844c85348abf1a).

# Interactions

This contract implements the following standards:

- [NEP171 v1.0.0 - NFT Core](https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/Core.md) (Only
  completely compliant if the `can_transfer` option is `true` during initialization.)
- [NEP177 v2.0.0 - NFT Metadata](https://github.com/near/NEPs/blob/cde5f56688bb74bfd01b38b9c8492c0e37c404be/specs/Standards/NonFungibleToken/Metadata.md)
- [NEP178 v1.0.0 - NFT Approval Managemenet](https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/ApprovalManagement.md)
- [NEP181 v1.0.0 - NFT Enumeration](https://github.com/near/NEPs/blob/master/specs/Standards/NonFungibleToken/Enumeration.md)

This contract also serves as the de-facto standard for NEAR Edu Certification compatible contracts:

## Functions

### `owner_id`

Returns the account ID of the contract owner.

### `cert_can_transfer`

Returns `true` if the contract allows NFT certifications to be transferred after issue, and `false` otherwise. Note that
if NFT transfers are disallows, this causes the contract to be (technically) non-compliant with the NEP171 standard.

### `cert_can_invalidate`

Returns `true` if the contract owner is allowed to invalidate existing certifications by setting the `valid` property
to `false`. Note that invalidation does not delete an NFT or change its ownership.

### `cert_is_valid`

Returns `true` if a particular token's `valid` property is `true`, and `false` otherwise. Invalidated tokens will have
this property set to `false`.

### `cert_invalidate`

Owner-only. Sets the `valid` property to `false` for a particular token. Panics if the contract does not allow
invalidation.

### `nft_mint`

Owner-only; non-standard but well-known NFT minting function.

## Metadata

Additional metadata is stored in the `extra` field of the standard-compliant NFT metadata.
See [`src/metadata.rs`](src/metadata.rs).
The 'memo' field at the root (outer) level of [sample_mint.json](sample_mint.json) can be null because its value currently does not get used.

In `token_metadata`, 'title', 'description', and 'issued_at' are the only fields we will use.

Please ensure that the value for `program` in `certification_metadata` matches the prefix of one of the SVG files in `web-app/public/certificate-backgrounds/`.

---

## Example Interactions

### View certificate metadata

After deploying a contract, such as via `./dev-deploy.sh`, you can view certificate metadata by running something like `NEAR_ENV=testnet near view <contract ID> nft_metadata`. Example:

```bash
NEAR_ENV=testnet near view dev-1643292007908-55838431863482 nft_metadata
```

### Issue a certificate

You can now issue a certificate by running something like `NEAR_ENV=testnet near call <the contract ID> nft_mint '<a JSON payload similar to as shown in sample_mint.json>' --account-id <whichever account you logged in as>.testnet --deposit 0.2 --gas 300000000000000`. Example:

```bash
NEAR_ENV=testnet near call dev-1643292007908-55838431863482 nft_mint "$(<./data-contract/sample_mint.json)" --account-id ryancwalsh.testnet --deposit 0.2 --gas 300000000000000
```

### View Certificate

Then you can view those details of that certificate on the blockchain by running something like `NEAR_ENV=testnet near view <contract ID> nft_token '{"token_id": "<token ID>"}'`. Example:

```bash
NEAR_ENV=testnet near view dev-1643292007908-55838431863482 nft_token '{"token_id": "103216412112497cb6c193152a27c49a"}'
```

### View all NFTs (from this contract) owned by an account

Run something like `NEAR_ENV=testnet near view <the contract ID> nft_tokens_for_owner '{"account_id": "<the account ID>"}'`. See https://nomicon.io/Standards/NonFungibleToken/Enumeration.html#interface . `from_index` defaults to 0 and `limit` defaults to unlimited. Example:

```bash
NEAR_ENV=testnet near view dev-1643292007908-55838431863482 nft_tokens_for_owner '{"account_id": "hatchet.testnet"}'
```

### Invalidate a cert

Run something like `NEAR_ENV=testnet near call <the contract ID> cert_invalidate '{ "token_id": "<some token ID>"}' --account-id <whichever account you logged in as>.testnet --depositYocto 1 --gas 300000000000000`. Example:

```bash
NEAR_ENV=testnet near call dev-1643292007908-55838431863482 cert_invalidate '{ "token_id": "303216412112497cb6c193152a27c49c"}' --account-id ryancwalsh.testnet --depositYocto 1 --gas 300000000000000
```

### Delete a cert (only in rare cases, pre-launch)

```bash
NEAR_ENV=testnet near call dev-1649780593510-28371141287670 cert_delete '{ "token_id": "e03216412112497cb6c193152a27c49a"}' --account-id ryancwalsh.testnet --depositYocto 1 --gas 300000000000000
```

---

# Notes about versions, standards, datetime types and formats, etc

There are 3 levels of metadata in this smart contract: the NFT contract level, the NFT token itself, and the CertificationExtraMetadata (which is specific to this project).

`data-contract/Cargo.toml` currently says `near-contract-standards = "4.0.0-pre.4"`.

`.cargo/registry/src/github.com-1ecc6299db9ec823/near-contract-standards-4.0.0-pre.4/src/non_fungible_token/metadata.rs` (or whichever file gets pulled in based on Cargo.toml) then defines NFT_METADATA_SPEC; take note of this version value. 

The "metadata" part of `data-contract/init_args.json` complies with the standard the defines NFTs: NEP171 (TODO: specify which version here).
We must manually set its "spec" field value to match the value of NFT_METADATA_SPEC.

The token_metadata part of `data-contract/sample_mint.json` complies with standard NEP177 (TODO: specify which version here). Jacob and Ryan are not sure which version we're using (probably 1.0.0). We think its date fields (issued_at, expires_at, starts_at, updated_at) expect strings of milliseconds. https://discord.com/channels/490367152054992913/542945453533036544/958832442121277440 (https://github.com/near/NEPs/blob/ca5f5a70e7ca2214d38723c756f9b5ae5c3b5e9d/specs/Standards/NonFungibleToken/Metadata.md had contradicting instructions.)

`web-app/pages/api/sample_api_payload_mint-cert.json` expects null or a string of format ISO 8601 (see https://day.js.org/docs/en/parse/string) for program_start_date and program_end_date. Our API endpoint then converts them to a string of nanoseconds.

# Errors

If you get `Smart contract panicked: Unauthorized` when trying to mint an NFT, check what you used for `owner_id` in `init_args.json` and whether you used that in the `--account-id` argument of the CLI call.
'''
'''--- api/near-certification-tools/build.sh ---
#!/usr/bin/env bash

cargo build --target wasm32-unknown-unknown --release

'''
'''--- api/near-certification-tools/contract.sh ---
#!/usr/bin/env sh

command="$1"
shift
near "$command" "$(<./neardev/dev-account)" "$@"

'''
'''--- api/near-certification-tools/deploy.sh ---
#!/usr/bin/env bash

near deploy \
  --wasmFile ./target/wasm32-unknown-unknown/release/near_certification_tools.wasm \
  --accountId "$1" \
  --initFunction new \
  --initArgs "$(<init_args.json)"

'''
'''--- api/near-certification-tools/dev_deploy.sh ---
#!/usr/bin/env bash

near dev-deploy \
  --wasmFile ./target/wasm32-unknown-unknown/release/near_certification_tools.wasm \
  "$@"

near call "$(<./neardev/dev-account)" new "$(<init_args.json)" --accountId "$(<./neardev/dev-account)"

'''
'''--- api/near-certification-tools/getCliCommands.js ---
'use strict';

const fs = require('fs');

const inputFile = 'certs.json';
const outputFile = 'cli.txt';

/**
 * This is just a temporary tool that can help for when we want to delete certs from mainnet before launch.
 * Steps:
 * 1. For each account whose certs you want to delete, call `NEAR_ENV=mainnet near view certificates.unv.near nft_tokens_for_owner '{"account_id": "xxxxx.near"}' > xxxxx.json`
 * 2. For each of those JSON files, delete the first line, then use http://www.relaxedjson.org/docs/converter.html to convert to a strict JSON array.
 * 3. Consolidate all of the items of those different JSON files into one array in a combined file called certs.json.
 * 4. Run this script: `node getCliCommands.js`
 * 5. Copy the contents of the file called cli.txt into the command line.
 */

const contents = fs.readFileSync(inputFile);
const certs = JSON.parse(contents);
// console.log(certs);
const tokenIds = certs.map(cert => cert.token_id);
console.log(tokenIds.length, { tokenIds })

let lines = '';

certs.forEach(cert => { 
    lines = lines + `NEAR_ENV=mainnet near call certificates.unv.near cert_delete '{ "token_id": "${cert.token_id}"}' --account-id certificates.unv.near --depositYocto 1 --gas 300000000000000\n`;
});

// https://stackabuse.com/reading-and-writing-json-files-with-node-js/

fs.writeFileSync(outputFile, lines, (err) => {
    if (err) throw err;
    console.log(`${outputFile} has been saved!`);
});
'''
'''--- api/near-certification-tools/init_args.json ---
{
  "owner_id": "certificates.unv.near",
  "metadata": {
    "name": "NEAR University",
    "symbol": "NUC",
    "spec": "nft-1.0.0",
    "reference": null,
    "reference_hash": null,
    "base_uri": null,
    "icon": "data:image/svg+xml,%3csvg id='Layer_1' data-name='Layer 1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 144 144'%3e%3cpath d='M115.58%2c7.31%2c85.48%2c52a3.2%2c3.2%2c0%2c0%2c0%2c4.75%2c4.2l29.63-25.68a1.2%2c1.2%2c0%2c0%2c1%2c2%2c.91v80.46a1.2%2c1.2%2c0%2c0%2c1-2.12.77L30.18%2c5.43A15.35%2c15.35%2c0%2c0%2c0%2c18.47%2c0H15.34A15.34%2c15.34%2c0%2c0%2c0%2c0%2c15.34V128.66A15.34%2c15.34%2c0%2c0%2c0%2c15.34%2c144h0a15.35%2c15.35%2c0%2c0%2c0%2c13.08-7.31L58.52%2c92a3.2%2c3.2%2c0%2c0%2c0-4.75-4.2L24.14%2c113.48a1.2%2c1.2%2c0%2c0%2c1-2-.91V32.11a1.2%2c1.2%2c0%2c0%2c1%2c2.12-.77l89.55%2c107.23A15.35%2c15.35%2c0%2c0%2c0%2c125.53%2c144h3.13A15.34%2c15.34%2c0%2c0%2c0%2c144%2c128.66V15.34A15.34%2c15.34%2c0%2c0%2c0%2c128.66%2c0h0A15.35%2c15.35%2c0%2c0%2c0%2c115.58%2c7.31Z'/%3e%3c/svg%3e"
  },
  "options": {
    "can_transfer": false,
    "can_invalidate": true
  }
}

'''
'''--- api/near-certification-tools/sample_mint.json ---
{
  "token_id": "103216412112497cb6c193152a27c49a",
  "receiver_account_id": "hatchet.testnet",
  "token_metadata": {
    "title": "NEAR Certified Developer",
    "description": "has successfully completed the NEAR Certified Developer program by demonstrating proficiency in working with smart contracts on NEAR Protocol",
    "media": "data:image/svg+xml,%3csvg id='Layer_1' data-name='Layer 1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 144 144'%3e%3cpath d='M115.58%2c7.31%2c85.48%2c52a3.2%2c3.2%2c0%2c0%2c0%2c4.75%2c4.2l29.63-25.68a1.2%2c1.2%2c0%2c0%2c1%2c2%2c.91v80.46a1.2%2c1.2%2c0%2c0%2c1-2.12.77L30.18%2c5.43A15.35%2c15.35%2c0%2c0%2c0%2c18.47%2c0H15.34A15.34%2c15.34%2c0%2c0%2c0%2c0%2c15.34V128.66A15.34%2c15.34%2c0%2c0%2c0%2c15.34%2c144h0a15.35%2c15.35%2c0%2c0%2c0%2c13.08-7.31L58.52%2c92a3.2%2c3.2%2c0%2c0%2c0-4.75-4.2L24.14%2c113.48a1.2%2c1.2%2c0%2c0%2c1-2-.91V32.11a1.2%2c1.2%2c0%2c0%2c1%2c2.12-.77l89.55%2c107.23A15.35%2c15.35%2c0%2c0%2c0%2c125.53%2c144h3.13A15.34%2c15.34%2c0%2c0%2c0%2c144%2c128.66V15.34A15.34%2c15.34%2c0%2c0%2c0%2c128.66%2c0h0A15.35%2c15.35%2c0%2c0%2c0%2c115.58%2c7.31Z'/%3e%3c/svg%3e",
    "media_hash": null,
    "copies": 1,
    "issued_at": "1643580180000",
    "expires_at": null,
    "starts_at": null,
    "updated_at": null,
    "extra": null,
    "reference": null,
    "reference_hash": null
  },
  "certification_metadata": {
    "authority_id": "sherif.near",
    "authority_name": "Sherif Abushadi",
    "program": "Developer",
    "program_name": "NEAR Certified Developer",
    "program_link": "https://www.near.university/courses/near-certified-developer",
    "program_start_date": null,
    "program_end_date": "1643396400000000000",
    "original_recipient_id": "hatchet.testnet",
    "original_recipient_name": "Jacob L",
    "valid": true,
    "memo": null
  },
  "memo": null
}

'''
'''--- api/near-certification-tools/src/contract.rs ---
pub use init::CertificationContractInitOptions;
use near_contract_standards::non_fungible_token::{
    metadata::NFTContractMetadata, NonFungibleToken,
};
use near_contract_tools::{impl_ownership, ownership::Ownership, rbac::Rbac};
use near_sdk::{
    assert_one_yocto,
    borsh::{self, BorshDeserialize, BorshSerialize},
    collections::LazyOption,
    env,
    json_types::*,
    near_bindgen, require, AccountId, BorshStorageKey, PanicOnDefault, Promise,
};

mod init;
mod invalidate;
mod mint;
mod nft;
mod permissions;

#[derive(BorshSerialize, BorshStorageKey)]
pub enum Role {
    Issuer,
}

#[near_bindgen]
#[derive(PanicOnDefault, BorshDeserialize, BorshSerialize)]
pub struct CertificationContract {
    pub(crate) tokens: NonFungibleToken,
    pub(crate) metadata: LazyOption<NFTContractMetadata>,
    pub(crate) can_transfer: bool,
    pub(crate) can_invalidate: bool,
    pub(crate) ownership: Ownership,
    pub(crate) rbac: Rbac<Role>,
}

#[near_bindgen]
impl CertificationContract {
    pub(crate) fn assert_can_transfer(&self) {
        require!(self.can_transfer, "Certifications cannot be transferred");
    }

    pub(crate) fn assert_can_invalidate(&self) {
        require!(self.can_invalidate, "Certifications cannot be invalidated");
    }

    pub fn cert_can_transfer(&self) -> bool {
        self.can_transfer
    }

    pub fn cert_can_invalidate(&self) -> bool {
        self.can_invalidate
    }

    #[payable]
    pub fn set_metadata(&mut self, metadata: NFTContractMetadata) {
        // Force owner
        self.ownership.require_owner();
        // Force verification
        assert_one_yocto();

        self.metadata.set(&metadata);
    }

    pub fn get_max_withdrawal(&self) -> U128 {
        U128::from(env::account_balance() - env::storage_byte_cost() * env::storage_usage() as u128)
    }

    #[payable]
    pub fn withdraw(&mut self, amount: U128) -> Promise {
        // Force owner
        self.ownership.require_owner();
        // Force verification
        assert_one_yocto();

        let amount = amount.into();
        let max = self.get_max_withdrawal().into();

        require!(amount <= max, "Insufficient balance");

        Promise::new(self.ownership.owner.as_ref().unwrap().to_owned()).transfer(amount)
    }

    #[payable]
    pub fn withdraw_max(&mut self) -> Promise {
        self.withdraw(self.get_max_withdrawal())
    }
}

impl_ownership!(CertificationContract, ownership);

'''
'''--- api/near-certification-tools/src/contract/init.rs ---
use crate::{contract::*, storage_key::StorageKey};
use near_contract_standards::non_fungible_token::{
    metadata::NFTContractMetadata, NonFungibleToken,
};
use near_sdk::{
    collections::LazyOption,
    env, near_bindgen, require,
    serde::{Deserialize, Serialize},
    AccountId,
};

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct CertificationContractInitOptions {
    pub can_transfer: bool,
    pub can_invalidate: bool,
}

#[near_bindgen]
impl CertificationContract {
    #[init]
    pub fn new(
        owner_id: AccountId,
        metadata: NFTContractMetadata,
        options: CertificationContractInitOptions,
    ) -> Self {
        // Only allow the contract to be initialized once
        require!(!env::state_exists(), "Already initialized");

        // Validate metadata parameter
        metadata.assert_valid();

        Self {
            tokens: NonFungibleToken::new(
                StorageKey::NonFungibleToken,
                owner_id.clone(),
                Some(StorageKey::TokenMetadata),
                Some(StorageKey::Enumeration),
                Some(StorageKey::Approval),
            ),
            metadata: LazyOption::new(StorageKey::Metadata, Some(&metadata)),
            can_transfer: options.can_transfer,
            can_invalidate: options.can_invalidate,
            ownership: Ownership::new(StorageKey::Ownership, owner_id),
            rbac: Rbac::new(StorageKey::Rbac),
        }
    }

    #[private]
    #[init(ignore_state)]
    pub fn migrate() -> Self {
        #[derive(BorshDeserialize)]
        struct OldSchema {
            pub tokens: NonFungibleToken,
            pub metadata: LazyOption<NFTContractMetadata>,
            pub can_transfer: bool,
            pub can_invalidate: bool,
        }

        let old: OldSchema = env::state_read().unwrap();

        let owner_id = old.tokens.owner_id.to_owned();

        Self {
            tokens: old.tokens,
            metadata: old.metadata,
            can_transfer: old.can_transfer,
            can_invalidate: old.can_invalidate,
            ownership: Ownership::new(StorageKey::Ownership, owner_id),
            rbac: Rbac::new(StorageKey::Rbac),
        }
    }
}

'''
'''--- api/near-certification-tools/src/contract/invalidate.rs ---
use near_contract_standards::non_fungible_token::{
    events::NftBurn, metadata::TokenMetadata, TokenId,
};
use near_sdk::{assert_one_yocto, near_bindgen, serde_json};

use crate::{
    contract::*,
    event::{CertificationEventLogData, CreateEventLog},
    metadata::CertificationExtraMetadata,
};

#[near_bindgen]
impl CertificationContract {
    pub fn cert_is_valid(&self, token_id: TokenId) -> bool {
        serde_json::from_str::<CertificationExtraMetadata>(
            &self
                .tokens
                .token_metadata_by_id
                .as_ref()
                .unwrap()
                .get(&token_id)
                .unwrap()
                .extra
                .unwrap(),
        )
        .unwrap()
        .valid
    }

    #[payable]
    pub fn cert_invalidate(&mut self, token_id: TokenId, memo: Option<String>) {
        self.assert_can_invalidate();
        // Force owner only
        self.ownership.require_owner();
        // Force verification
        assert_one_yocto();

        let lookup = self.tokens.token_metadata_by_id.as_mut().unwrap();

        let metadata = lookup.get(&token_id).expect("Token does not exist");

        let certification_metadata =
            serde_json::from_str::<CertificationExtraMetadata>(&metadata.extra.unwrap()).unwrap();

        let recipient_id = certification_metadata.original_recipient_id.clone();

        lookup.insert(
            &token_id,
            &TokenMetadata {
                extra: Some(
                    CertificationExtraMetadata {
                        valid: false,
                        ..certification_metadata
                    }
                    .to_json(),
                ),
                ..metadata
            },
        );

        self.create_event_log(CertificationEventLogData::Invalidate {
            token_id: token_id.to_owned(),
            recipient_id,
            memo,
        })
        .emit();
    }

    #[payable]
    pub fn cert_delete(&mut self, token_id: TokenId, memo: Option<String>) {
        // Disallow deletion if invalidation is disallowed (deletion is the stronger action)
        self.assert_can_invalidate();
        // Force owner only
        self.ownership.require_owner();
        // Force verification
        assert_one_yocto();

        // Remove approval
        self.tokens.approvals_by_id.as_mut().map(|approvals_by_id| {
            approvals_by_id.remove(&token_id);
        });

        let owner_id = self.tokens.owner_by_id.get(&token_id).unwrap();

        // Remove enumeration
        self.tokens
            .tokens_per_owner
            .as_mut()
            .map(|tokens_per_owner| {
                tokens_per_owner.get(&owner_id).as_mut().map(|token_ids| {
                    token_ids.remove(&token_id);
                    if token_ids.len() == 0 {
                        tokens_per_owner.remove(&owner_id);
                    } else {
                        tokens_per_owner.insert(&owner_id, &token_ids);
                    }
                });
            });

        // Remove metadata
        self.tokens
            .token_metadata_by_id
            .as_mut()
            .map(|by_id| by_id.remove(&token_id));

        // Remove from owners map
        self.tokens.owner_by_id.remove(&token_id);

        // Emit NFT burn event
        NftBurn {
            owner_id: &owner_id,
            authorized_id: self.ownership.owner.as_ref(),
            token_ids: &[&token_id],
            memo: memo.as_deref(),
        }
        .emit();
    }
}

'''
'''--- api/near-certification-tools/src/contract/mint.rs ---
use crate::{
    contract::*,
    event::{CertificationEventLogData, CreateEventLog},
    metadata::CertificationExtraMetadata,
    utils::assert_nonzero_deposit,
};

use near_contract_standards::non_fungible_token::{metadata::TokenMetadata, Token, TokenId};
use near_sdk::{near_bindgen, require, AccountId};

#[near_bindgen]
impl CertificationContract {
    #[payable]
    pub fn nft_mint(
        &mut self,
        token_id: TokenId,
        receiver_account_id: Option<AccountId>,
        token_metadata: TokenMetadata,
        certification_metadata: CertificationExtraMetadata,
        memo: Option<String>,
    ) -> Token {
        // Access control
        self.rbac.require_role(&Role::Issuer);
        // Force verification
        assert_nonzero_deposit();

        // We are using the extra field for standard, type-safe custom metadata (not user-defined)
        require!(
            token_metadata.extra == None,
            "Specify extra metadata in certification_metadata parameter"
        );

        let to_account_id = match receiver_account_id {
            Some(r) => r,
            None => self.tokens.owner_id.clone(),
        };
        let combined_metadata = TokenMetadata {
            extra: Some(certification_metadata.to_json()),
            ..token_metadata
        };

        self.create_event_log(CertificationEventLogData::Issue {
            token_id: token_id.clone(),
            recipient_id: certification_metadata
                .original_recipient_id
                .unwrap_or_else(|| to_account_id.clone()),
            memo,
        })
        .emit();

        // internal_mint manages storage cost refunding
        self.tokens
            .internal_mint(token_id, to_account_id, Some(combined_metadata))
    }
}

'''
'''--- api/near-certification-tools/src/contract/nft.rs ---
use std::collections::HashMap;

use near_contract_standards::non_fungible_token::{
    core::{NonFungibleTokenCore, NonFungibleTokenResolver},
    metadata::{NFTContractMetadata, NonFungibleTokenMetadataProvider},
    Token, TokenId,
};
use near_sdk::{near_bindgen, AccountId, Promise, PromiseOrValue};

use crate::contract::*;

// Core implementation (largely the same as `impl_non_fungible_token_core`
// macro with additional ability to disable transfers)
#[near_bindgen]
impl NonFungibleTokenCore for CertificationContract {
    #[payable]
    fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: Option<u64>,
        memo: Option<String>,
    ) {
        self.assert_can_transfer();
        self.tokens
            .nft_transfer(receiver_id, token_id, approval_id, memo);
    }

    #[payable]
    fn nft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: Option<u64>,
        memo: Option<String>,
        msg: String,
    ) -> PromiseOrValue<bool> {
        self.assert_can_transfer();
        self.tokens
            .nft_transfer_call(receiver_id, token_id, approval_id, memo, msg)
    }

    fn nft_token(&self, token_id: TokenId) -> Option<Token> {
        self.tokens.nft_token(token_id)
    }
}

#[near_bindgen]
impl NonFungibleTokenResolver for CertificationContract {
    #[private]
    fn nft_resolve_transfer(
        &mut self,
        previous_owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
        approved_account_ids: Option<HashMap<AccountId, u64>>,
    ) -> bool {
        self.tokens.nft_resolve_transfer(
            previous_owner_id,
            receiver_id,
            token_id,
            approved_account_ids,
        )
    }
}

#[near_bindgen]
impl NonFungibleTokenMetadataProvider for CertificationContract {
    fn nft_metadata(&self) -> NFTContractMetadata {
        self.metadata.get().unwrap()
    }
}

near_contract_standards::impl_non_fungible_token_approval!(CertificationContract, tokens);
near_contract_standards::impl_non_fungible_token_enumeration!(CertificationContract, tokens);

'''
'''--- api/near-certification-tools/src/contract/permissions.rs ---
use near_sdk::near_bindgen;

use crate::contract::*;

#[near_bindgen]
impl CertificationContract {
    pub fn add_issuer(&mut self, account_id: AccountId) {
        self.ownership.require_owner();
        self.rbac.add_role(&account_id, &Role::Issuer);
    }

    pub fn remove_issuer(&mut self, account_id: AccountId) {
        self.ownership.require_owner();
        self.rbac.remove_role(&account_id, &Role::Issuer);
    }
}

'''
'''--- api/near-certification-tools/src/event.rs ---
use near_contract_standards::non_fungible_token::TokenId;
use near_sdk::{
    log,
    serde::{Deserialize, Serialize},
    serde_json, AccountId,
};

use crate::CertificationContract;

const EVENT_STANDARD: &'static str = "x-nearedu-cert";
const EVENT_VERSION: &'static str = "1.0.0";

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub(crate) struct EventLogData {
    standard: String,
    version: String,
    event: String,
    data: Option<String>,
}

impl EventLogData {
    pub fn to_log(&self) -> String {
        format!("EVENT_JSON:{}", serde_json::to_string(&self).unwrap())
    }

    pub fn emit(&self) {
        log!(self.to_log())
    }
}

pub(crate) trait CreateEventLog<T> {
    fn create_event_log(&self, with_data: T) -> EventLogData;
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub(crate) enum CertificationEventLogData {
    Issue {
        recipient_id: AccountId,
        token_id: TokenId,
        memo: Option<String>,
    },
    Invalidate {
        recipient_id: Option<AccountId>,
        token_id: TokenId,
        memo: Option<String>,
    },
}

impl CertificationEventLogData {
    fn name(&self) -> &str {
        match self {
            CertificationEventLogData::Issue { .. } => "cert_issue",
            CertificationEventLogData::Invalidate { .. } => "cert_invalidate",
        }
    }
}

impl CreateEventLog<CertificationEventLogData> for CertificationContract {
    fn create_event_log(&self, with_data: CertificationEventLogData) -> EventLogData {
        EventLogData {
            standard: EVENT_STANDARD.to_string(),
            version: EVENT_VERSION.to_string(),
            event: with_data.name().to_string(),
            data: Some(serde_json::to_string(&with_data).unwrap()),
        }
    }
}

'''
'''--- api/near-certification-tools/src/lib.rs ---
use near_contract_standards::non_fungible_token::TokenId;
pub use near_sdk::AccountId;

pub use crate::contract::CertificationContract;

mod contract;
mod event;
mod metadata;
mod storage_key;
mod utils;

#[derive(near_sdk::serde::Deserialize, near_sdk::serde::Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct MintNFT {
    pub token_id: TokenId,
    pub receiver_account_id: Option<AccountId>,
    pub token_metadata: TokenMetadata,
    pub certification_metadata: CertificationExtraMetadata,
    pub memo: Option<String>,
}

pub use metadata::CertificationExtraMetadata;
pub use near_contract_standards::non_fungible_token::metadata::TokenMetadata;

pub use near_contract_standards::non_fungible_token::Token;

#[cfg(all(test, not(target_arch = "wasm32")))]
mod tests {
    use std::collections::HashMap;

    use near_contract_standards::non_fungible_token::{
        approval::NonFungibleTokenApproval,
        core::NonFungibleTokenCore,
        enumeration::NonFungibleTokenEnumeration,
        metadata::{NFTContractMetadata, TokenMetadata, NFT_METADATA_SPEC},
    };
    use near_sdk::{
        env,
        test_utils::{accounts, VMContextBuilder},
        testing_env, AccountId, Balance, StorageUsage,
    };

    use crate::{
        contract::{CertificationContract, CertificationContractInitOptions},
        metadata::CertificationExtraMetadata,
    };

    const MINT_MAX_COST: u128 = 20000000000000000000000;

    fn get_context(predecessor_account_id: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder
            .current_account_id(accounts(0))
            .account_balance(14500000000000000000000000)
            .signer_account_id(predecessor_account_id.clone())
            .predecessor_account_id(predecessor_account_id);
        builder
    }

    fn sample_metadata_contract() -> NFTContractMetadata {
        NFTContractMetadata {
            name: "Organization Certification Issuer".to_string(),
            symbol: "XOCI".to_string(),
            spec: NFT_METADATA_SPEC.to_string(),
            reference: None,
            reference_hash: None,
            base_uri: None,
            icon: None,
        }
    }

    fn sample_metadata_token() -> TokenMetadata {
        TokenMetadata {
            title: Some("Certified White Hat Hacker".into()),
            description: Some("This certifies that the recipient has fulfilled Organization, Inc.'s requirements as a white hat hacker.".into()),
            media: None,
            media_hash: None,
            copies: Some(1u64),
            issued_at: None,
            expires_at: None,
            starts_at: None,
            updated_at: None,
            extra: None,
            reference: None,
            reference_hash: None,
        }
    }

    fn sample_metadata_certification_transferable() -> CertificationExtraMetadata {
        CertificationExtraMetadata {
            authority_id: Some("john_instructor.near".parse().unwrap()),
            authority_name: Some("John Instructor".into()),
            program: Some("TR101".into()),
            program_name: Some("White hat hacking with transferable certification".into()),
            program_link: Some("https://near.university".into()),
            program_start_date: None,
            program_end_date: None,
            original_recipient_id: Some("original_recipient.near".parse().unwrap()),
            original_recipient_name: Some("Original Recipient".into()),
            valid: true,
            memo: None,
        }
    }

    fn sample_metadata_certification_nontransferable() -> CertificationExtraMetadata {
        CertificationExtraMetadata {
            authority_id: Some("john_instructor.near".parse().unwrap()),
            authority_name: Some("John Instructor".to_string()),
            program: Some("NTR102".to_string()),
            program_name: Some("White hat hacking with nontransferable certification".to_string()),
            program_link: Some("https://near.university".into()),
            program_start_date: None,
            program_end_date: None,
            original_recipient_id: Some("original_recipient.near".parse().unwrap()),
            original_recipient_name: Some("Original Recipient".to_string()),
            valid: true,
            memo: None,
        }
    }

    #[derive(Debug)]
    struct EnvironmentState {
        storage: StorageUsage,
        balance: Balance,
    }

    fn environment_state() -> EnvironmentState {
        EnvironmentState {
            storage: env::storage_usage(),
            balance: env::account_balance(),
        }
    }

    fn start_monitor() -> EnvironmentState {
        let initial = environment_state();
        println!("Initial state: {:?}", &initial);
        initial
    }

    fn print_monitor(initial_state: EnvironmentState) {
        let final_state = environment_state();
        println!("Final state: {:?}", &final_state);

        let delta_bytes = final_state.storage - initial_state.storage;
        let yocto_cost = delta_bytes as u128 * env::storage_byte_cost();

        println!(
            "Balance delta: {} yNEAR ({} NEAR)",
            final_state.balance as i128 - initial_state.balance as i128,
            (final_state.balance as i128 - initial_state.balance as i128) as f64
                / f64::powf(10f64, 24f64),
        );
        println!(
            "Storage delta: {}kB, cost: {} yNEAR ({} NEAR)",
            delta_bytes as f64 / 1000f64,
            yocto_cost,
            (yocto_cost as f64) / f64::powf(10f64, 24f64),
        );
    }

    #[test]
    fn new() {
        let mut context = get_context(accounts(1));
        testing_env!(context.build());
        let contract = CertificationContract::new(
            accounts(1).into(),
            sample_metadata_contract(),
            CertificationContractInitOptions {
                can_transfer: false,
                can_invalidate: false,
            },
        );
        testing_env!(context.is_view(true).build());
        assert_eq!(contract.nft_token("1".to_string()), None);
    }

    #[test]
    #[should_panic(expected = "The contract is not initialized")]
    fn uninitialized_default() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let _contract = CertificationContract::default();
    }

    #[test]
    fn init_transfer_invalidate() {
        let mut context = get_context(accounts(1));

        for i in 0..4usize {
            let can_transfer = (i & 0b1) != 0;
            let can_invalidate = (i & 0b10) != 0;

            testing_env!(context.is_view(false).build());
            let contract = CertificationContract::new(
                accounts(1).into(),
                sample_metadata_contract(),
                CertificationContractInitOptions {
                    can_transfer,
                    can_invalidate,
                },
            );

            testing_env!(context.is_view(true).build());
            assert_eq!(contract.cert_can_transfer(), can_transfer);
            assert_eq!(contract.cert_can_invalidate(), can_invalidate);
        }
    }

    fn init_contract(
        owner_id: AccountId,
        contract_metadata: NFTContractMetadata,
        init_options: CertificationContractInitOptions,
    ) -> (VMContextBuilder, CertificationContract) {
        let context = get_context(owner_id.clone());
        testing_env!(context.build());
        let contract = CertificationContract::new(owner_id, contract_metadata, init_options);

        (context, contract)
    }

    #[test]
    fn mint_can_transfer_true() {
        let (mut context, mut contract) = init_contract(
            accounts(0),
            sample_metadata_contract(),
            CertificationContractInitOptions {
                can_transfer: true,
                can_invalidate: false,
            },
        );

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_MAX_COST)
            .predecessor_account_id(accounts(0))
            .build());

        let initial_storage = start_monitor();

        let token_id = "0".to_string();
        let token = contract.nft_mint(
            token_id.clone(),
            accounts(0).into(),
            sample_metadata_token(),
            sample_metadata_certification_transferable(),
            None,
        );
        assert_eq!(token.token_id, token_id);
        assert_eq!(token.owner_id, accounts(0));
        assert_eq!(
            token.metadata.unwrap(),
            TokenMetadata {
                extra: Some(sample_metadata_certification_transferable().to_json()),
                ..sample_metadata_token()
            },
        );
        assert_eq!(token.approved_account_ids.unwrap(), HashMap::new());
        assert_eq!(contract.cert_is_valid(token_id.clone()), true);

        println!("Token mint:");
        print_monitor(initial_storage);

        testing_env!(context.attached_deposit(1).build());

        contract.nft_transfer(accounts(1), token_id.clone(), None, None);

        let transferred_token = contract
            .nft_token(token_id.clone())
            .expect("Token exists after transfer");

        assert_eq!(transferred_token.token_id, token_id);
        assert_eq!(transferred_token.owner_id, accounts(1));
        assert_eq!(
            transferred_token.metadata.unwrap(),
            TokenMetadata {
                extra: Some(sample_metadata_certification_transferable().to_json()),
                ..sample_metadata_token()
            },
        );
    }

    #[test]
    #[should_panic(expected = "Certifications cannot be transferred")]
    fn mint_can_transfer_false() {
        let (mut context, mut contract) = init_contract(
            accounts(0),
            sample_metadata_contract(),
            CertificationContractInitOptions {
                can_transfer: false,
                can_invalidate: false,
            },
        );

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_MAX_COST)
            .predecessor_account_id(accounts(0))
            .build());

        let initial_storage = start_monitor();

        let token_id = "0".to_string();
        let token = contract.nft_mint(
            token_id.clone(),
            accounts(0).into(),
            sample_metadata_token(),
            sample_metadata_certification_nontransferable(),
            None,
        );
        assert_eq!(token.token_id, token_id);
        assert_eq!(token.owner_id, accounts(0));
        assert_eq!(
            token.metadata.unwrap(),
            TokenMetadata {
                extra: Some(sample_metadata_certification_nontransferable().to_json()),
                ..sample_metadata_token()
            },
        );
        assert_eq!(token.approved_account_ids.unwrap(), HashMap::new());
        assert_eq!(contract.cert_is_valid(token_id.clone()), true);

        print_monitor(initial_storage);

        // Test transferability
        testing_env!(context.attached_deposit(1).build());

        contract.nft_transfer(accounts(1), token_id.clone(), None, None);
    }

    #[test]
    fn mint_can_invalidate_true() {
        let (mut context, mut contract) = init_contract(
            accounts(0),
            sample_metadata_contract(),
            CertificationContractInitOptions {
                can_transfer: false,
                can_invalidate: true,
            },
        );

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_MAX_COST)
            .predecessor_account_id(accounts(0))
            .build());

        let initial_storage = start_monitor();

        let token_id = "0".to_string();
        let token = contract.nft_mint(
            token_id.clone(),
            accounts(0).into(),
            sample_metadata_token(),
            sample_metadata_certification_nontransferable(),
            None,
        );
        assert_eq!(token.token_id, token_id);
        assert_eq!(token.owner_id, accounts(0));
        assert_eq!(
            token.metadata.unwrap(),
            TokenMetadata {
                extra: Some(sample_metadata_certification_nontransferable().to_json()),
                ..sample_metadata_token()
            },
        );
        assert_eq!(token.approved_account_ids.unwrap(), HashMap::new());
        assert_eq!(contract.cert_is_valid(token_id.clone()), true);

        print_monitor(initial_storage);

        // Test transferability
        testing_env!(context.attached_deposit(1).build());

        contract.cert_invalidate(token_id.clone(), None);

        let invalidated_token = contract
            .nft_token(token_id.clone())
            .expect("Token exists after invalidation");

        assert_eq!(contract.cert_is_valid(token_id.clone()), false);
        assert_eq!(invalidated_token.token_id, token_id);
        assert_eq!(invalidated_token.owner_id, accounts(0));
        assert_eq!(
            invalidated_token.metadata.unwrap(),
            TokenMetadata {
                extra: Some(
                    CertificationExtraMetadata {
                        valid: false,
                        ..sample_metadata_certification_nontransferable()
                    }
                    .to_json()
                ),
                ..sample_metadata_token()
            },
        );
    }

    #[test]
    #[should_panic(expected = "Certifications cannot be invalidated")]
    fn mint_can_invalidate_false() {
        let (mut context, mut contract) = init_contract(
            accounts(0),
            sample_metadata_contract(),
            CertificationContractInitOptions {
                can_transfer: false,
                can_invalidate: false,
            },
        );

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_MAX_COST)
            .predecessor_account_id(accounts(0))
            .build());

        let initial_storage = start_monitor();

        let token_id = "0".to_string();
        let token = contract.nft_mint(
            token_id.clone(),
            accounts(0).into(),
            sample_metadata_token(),
            sample_metadata_certification_nontransferable(),
            None,
        );
        assert_eq!(token.token_id, token_id);
        assert_eq!(token.owner_id, accounts(0));
        assert_eq!(
            token.metadata.unwrap(),
            TokenMetadata {
                extra: Some(sample_metadata_certification_nontransferable().to_json()),
                ..sample_metadata_token()
            },
        );
        assert_eq!(token.approved_account_ids.unwrap(), HashMap::new());
        assert_eq!(contract.cert_is_valid(token_id.clone()), true);

        print_monitor(initial_storage);

        // Test transferability
        testing_env!(context.attached_deposit(1).build());

        contract.cert_invalidate(token_id.clone(), None);
    }

    #[test]
    fn test_approve() {
        let (mut context, mut contract) = init_contract(
            accounts(0),
            sample_metadata_contract(),
            CertificationContractInitOptions {
                can_transfer: false,
                can_invalidate: false,
            },
        );

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_MAX_COST)
            .predecessor_account_id(accounts(0))
            .build());
        let token_id = "0".to_string();
        contract.nft_mint(
            token_id.clone(),
            Some(accounts(0)),
            sample_metadata_token(),
            sample_metadata_certification_nontransferable(),
            None,
        );

        // alice approves bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(150000000000000000000)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_approve(token_id.clone(), accounts(1), None);

        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(true)
            .attached_deposit(0)
            .build());
        assert!(contract.nft_is_approved(token_id.clone(), accounts(1), Some(1)));
    }

    #[test]
    fn test_revoke() {
        let (mut context, mut contract) = init_contract(
            accounts(0),
            sample_metadata_contract(),
            CertificationContractInitOptions {
                can_transfer: false,
                can_invalidate: false,
            },
        );

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_MAX_COST)
            .predecessor_account_id(accounts(0))
            .build());
        let token_id = "0".to_string();
        contract.nft_mint(
            token_id.clone(),
            Some(accounts(0)),
            sample_metadata_token(),
            sample_metadata_certification_nontransferable(),
            None,
        );

        // alice approves bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(150000000000000000000)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_approve(token_id.clone(), accounts(1), None);

        // alice revokes bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(1)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_revoke(token_id.clone(), accounts(1));
        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(true)
            .attached_deposit(0)
            .build());
        assert!(!contract.nft_is_approved(token_id.clone(), accounts(1), None));
    }

    #[test]
    fn test_revoke_all() {
        let (mut context, mut contract) = init_contract(
            accounts(0),
            sample_metadata_contract(),
            CertificationContractInitOptions {
                can_transfer: false,
                can_invalidate: false,
            },
        );

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_MAX_COST)
            .predecessor_account_id(accounts(0))
            .build());
        let token_id = "0".to_string();
        contract.nft_mint(
            token_id.clone(),
            Some(accounts(0)),
            sample_metadata_token(),
            sample_metadata_certification_nontransferable(),
            None,
        );

        // alice approves bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(150000000000000000000)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_approve(token_id.clone(), accounts(1), None);

        // alice revokes bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(1)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_revoke_all(token_id.clone());
        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(true)
            .attached_deposit(0)
            .build());
        assert!(!contract.nft_is_approved(token_id.clone(), accounts(1), Some(1)));
    }

    #[test]
    fn test_delete() {
        let (mut context, mut contract) = init_contract(
            accounts(0),
            sample_metadata_contract(),
            CertificationContractInitOptions {
                can_transfer: false,
                can_invalidate: true,
            },
        );

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_MAX_COST)
            .predecessor_account_id(accounts(0))
            .build());
        let token_id = "0".to_string();
        contract.nft_mint(
            token_id.clone(),
            Some(accounts(0)),
            sample_metadata_token(),
            sample_metadata_certification_nontransferable(),
            None,
        );

        let token = contract.nft_token(token_id.clone());
        assert!(token.is_some());

        // delete certificate
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(1)
            .predecessor_account_id(accounts(0))
            .build());
        contract.cert_delete(token_id.clone(), None);

        assert!(contract.nft_token(token_id.clone()).is_none());
        assert_eq!(
            Into::<u128>::into(contract.nft_supply_for_owner(accounts(0))),
            0
        );
        assert_eq!(Into::<u128>::into(contract.nft_total_supply()), 0);
    }

    #[test]
    fn test_withdraw() {
        let (mut context, mut contract) = init_contract(
            accounts(0),
            sample_metadata_contract(),
            CertificationContractInitOptions {
                can_transfer: false,
                can_invalidate: false,
            },
        );

        let balance_0 = env::account_balance();
        let max_withdrawal_0 = contract.get_max_withdrawal().0;

        assert!(max_withdrawal_0 < balance_0);

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_MAX_COST)
            .predecessor_account_id(accounts(0))
            .build());
        let token_id = "0".to_string();
        contract.nft_mint(
            token_id.clone(),
            Some(accounts(0)),
            sample_metadata_token(),
            sample_metadata_certification_nontransferable(),
            None,
        );

        let token = contract.nft_token(token_id.clone());
        assert!(token.is_some());

        let balance_1 = env::account_balance();
        let max_withdrawal_1 = contract.get_max_withdrawal().0;

        assert_eq!(
            max_withdrawal_0, max_withdrawal_1,
            "Maximum withdrawal should not change if no storage lockup has been freed",
        );
        assert!(balance_1 > balance_0);

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(1)
            .predecessor_account_id(accounts(0))
            .build());
        contract.withdraw_max();
        assert_eq!(
            Into::<u128>::into(contract.get_max_withdrawal()),
            0,
            "Max withdrawal should be 0 after performing max withdrawal"
        );
        assert_eq!(
            env::account_balance(),
            balance_1 - max_withdrawal_1,
            "Balance should have decreased by withdrawal amount"
        );
    }
}

'''
'''--- api/near-certification-tools/src/metadata.rs ---
use near_sdk::{
    borsh::{self, BorshDeserialize, BorshSerialize},
    json_types::*,
    serde::{Deserialize, Serialize},
    serde_json, AccountId,
};

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize, PartialEq)]
#[serde(crate = "near_sdk::serde")]
pub struct CertificationExtraMetadata {
    /// Human-readable name of the certification issuing authority within the
    /// entity that owns the contract.
    ///
    /// For example, this could be the name of the instructor who taught a
    /// course that awards a certification.
    pub authority_name: Option<String>,

    /// NEAR account ID of the certification issuing authority.
    ///
    /// For example, this could be the account ID of the instructor who taught
    /// a course that awards a certification.
    pub authority_id: Option<AccountId>,

    /// Entity-specific (e.g. school, organization) unambiguous program
    /// identifier.
    ///
    /// For example: "CS101"
    pub program: Option<String>,

    /// Human-readable name of the program (e.g. course, class, internship) in
    /// which the recipient participated in order to receive a certification.
    ///
    /// For example: "Computer Science Fundamentals"
    pub program_name: Option<String>,

    /// Optionally off-chain external reference to the certification-granting
    /// program.
    ///
    /// For example: "https://example.com/courses/cs101.html",
    ///     "ipfs://QmawceGscqN4o8Y8Fv26UUmB454kn2bnkXV5tEQYc4jBd6"
    pub program_link: Option<String>,

    /// Program start date timestamp, i.e. number of non-leap-nanoseconds since
    /// January 1, 1970 0:00:00 UTC.
    ///
    /// Compatible with `env::block_timestamp()`.
    pub program_start_date: Option<U64>,

    /// Program end date timestamp, i.e. number of non-leap-nanoseconds since
    /// January 1, 1970 0:00:00 UTC.
    ///
    /// Compatible with `env::block_timestamp()`.
    pub program_end_date: Option<U64>,

    /// NEAR account ID of the original recipient of this certification.
    pub original_recipient_id: Option<AccountId>,

    /// Human-readable name of the original recipient of this certification.
    ///
    /// For example: "John Doe", "The Goblin Slayer", "Steve"
    pub original_recipient_name: Option<String>,

    /// Certification is valid. Freshly issued certifications have
    /// `valid == true`; invalidation sets this value to `false`.
    pub valid: bool,

    /// Optional additional data
    pub memo: Option<String>,
}

impl CertificationExtraMetadata {
    pub(crate) fn to_json(&self) -> String {
        serde_json::to_string(self).unwrap()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    fn test_metadata() -> CertificationExtraMetadata {
        CertificationExtraMetadata {
            authority_id: Some("test_authority.near".parse().unwrap()),
            authority_name: Some("Test Authority".to_string()),
            program: Some("PRG101".to_string()),
            program_name: Some("Program Name".to_string()),
            program_link: Some("https://near.university".into()),
            program_start_date: None,
            program_end_date: None,
            original_recipient_id: Some("original_recipient.near".parse().unwrap()),
            original_recipient_name: Some("Original Recipient".to_string()),
            valid: true,
            memo: None,
        }
    }

    #[test]
    fn metadata_json_serialization_and_deserialization() {
        let metadata = test_metadata();
        let json_str = metadata.to_json();
        let deserialized = serde_json::from_str::<CertificationExtraMetadata>(&*json_str).unwrap();
        assert_eq!(
            deserialized.authority_name.as_ref().unwrap(),
            "Test Authority"
        );
        assert_eq!(
            deserialized.authority_id.as_ref().unwrap().to_string(),
            "test_authority.near"
        );
        assert_eq!(deserialized.program.as_ref().unwrap().to_string(), "PRG101");
        assert_eq!(
            deserialized.program_name.as_ref().unwrap().to_string(),
            "Program Name"
        );
        assert!(deserialized.program_start_date.as_ref().is_none());
        assert!(deserialized.program_end_date.as_ref().is_none());
        assert_eq!(
            deserialized
                .original_recipient_id
                .as_ref()
                .unwrap()
                .to_string(),
            "original_recipient.near"
        );
        assert_eq!(
            deserialized
                .original_recipient_name
                .as_ref()
                .unwrap()
                .to_string(),
            "Original Recipient"
        );
        assert_eq!(deserialized.valid, true);
        assert!(deserialized.memo.as_ref().is_none());
    }
}

'''
'''--- api/near-certification-tools/src/storage_key.rs ---
use near_sdk::{
    borsh::{self, BorshSerialize},
    BorshStorageKey,
};

#[derive(BorshSerialize, BorshStorageKey)]
pub enum StorageKey {
    NonFungibleToken,
    Metadata,
    TokenMetadata,
    Enumeration,
    Approval,
    Ownership,
    Rbac,
}

'''
'''--- api/near-certification-tools/src/utils.rs ---
use near_sdk::{env, require};

pub fn assert_nonzero_deposit() {
    require!(env::attached_deposit() > 0, "Non-zero deposit required");
}

'''
'''--- api/router/Cargo.toml ---
[package]
name = "router"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
axum = { version = "0.6.0", features = ["macros", "headers"] }
cert = { version = "0.1.0", path = "../cert" }
common = { version = "0.1.0", path = "../common" }
dotenvy = "0.15.6"
errors = { version = "0.1.0", path = "../errors" }
invalidate-all-certs-for-account = { version = "0.1.0", path = "../invalidate-all-certs-for-account" }
invalidate-cert = { version = "0.1.0", path = "../invalidate-cert" }
mint-cert = { version = "0.1.0", path = "../mint-cert" }
tokio = { version = "1.22.0", features = ["full"] }
tower = { version = "0.4.13", features = ["full"] }
tower-http = { version = "0.3.4", features = ["trace", "full"] }
tracing-subscriber = "0.3.16"

'''
'''--- api/router/src/lib.rs ---
use std::{iter::once, str::FromStr, time::Duration};

use axum::{
    headers::HeaderName,
    http::Request,
    middleware::{self, Next},
    response::Response,
    routing::{delete, get, post},
};
use errors::APIResult;
use tower::ServiceBuilder;
use tower_http::{timeout::TimeoutLayer, trace::TraceLayer, ServiceBuilderExt};

async fn authorize<B>(request: Request<B>, next: Next<B>) -> APIResult<Response> {
    let Some(x_api_key_header) = request.headers().get("x-api-key") else {
        return Err(errors::APIError::Unauthorized);
    };

    let Ok(x_api_key) = x_api_key_header.to_str() else {
        return Err(errors::APIError::Unauthorized);
    };

    let api_key = dotenvy::var("API_KEY").expect("Missing API key!");

    if api_key == x_api_key {
        Ok(next.run(request).await)
    } else {
        Err(errors::APIError::Unauthorized)
    }
}

pub fn create_router() -> axum::Router {
    let auth_middleware = middleware::from_fn(authorize);

    tracing_subscriber::fmt::init();

    let tracing_middleware = ServiceBuilder::new()
        .sensitive_headers(once(HeaderName::from_str("x-api-key").unwrap()))
        .layer(TraceLayer::new_for_http())
        .layer(TimeoutLayer::new(Duration::from_secs(15)))
        .map_response_body(axum::body::boxed);

    axum::Router::new()
        .route(
            "/mint-cert",
            post(mint_cert::handler).layer(auth_middleware.clone()),
        )
        .route(
            "/invalidate-all-certs-for-account",
            delete(invalidate_all_certs_for_account::handler).layer(auth_middleware.clone()),
        )
        .route(
            "/invalidate-cert",
            delete(invalidate_cert::handler).layer(auth_middleware),
        )
        .route("/cert/:token_id", get(cert::handler))
        .layer(tracing_middleware)
        .with_state(common::AppData::new())
}

'''
'''--- api/router/src/main.rs ---
use std::net::SocketAddr;

use router::create_router;

#[tokio::main]
async fn main() -> errors::APIResult<()> {
    let router = create_router();

    let address = SocketAddr::from(([127, 0, 0, 1], 4000));
    println!("Server listening on {address}");

    match axum::Server::bind(&address)
        .serve(router.into_make_service())
        .await
    {
        Ok(_) => Ok(()),
        Err(error) => {
            eprintln!("{error:?}");
            Err(errors::APIError::ServerError)
        }
    }
}

'''
'''--- documentation/batch-issuing.md ---
# Batch issuing

This file describes the process of issuing certificates in batches.

## 1. Creating a new batch

The first step in running a batch is creating it. We first create a new row in the Airtable _certificate-batches_ table which will autopopulate the _Batch ID_ field and the nft-icon field. The other fields stay blank for now.

## 2. Adding submissions to the batch

The next step is to add submissions to be issued a certificate to the batch. We do this by clicking on the _nc-submissions_ field and pressing the **_+_** (Add) button which will open a pop up to select submissions from. Now we select all the submissions we want to be included in this batch.

## 3. Configuring the Make scenario

The following step is to tell the Make scenario which batch to pull from. This is done by configuring the first module of the scenario to house the value of our new batch's _Batch id_ field.

## 4. Running the Make scenario

The final step is to save the scenario and run it once to issue the certificates in our new batch.

'''
'''--- documentation/certificate-minting-make-scenario.json ---
{
  "name": "Certification minting (with search)",
  "flow": [
    {
      "id": 20,
      "module": "util:SetVariable2",
      "version": 1,
      "parameters": {},
      "mapper": {
        "name": "batchNumber",
        "scope": "roundtrip",
        "value": "11"
      },
      "metadata": {
        "designer": {
          "x": 0,
          "y": 0
        },
        "restore": {
          "expect": {
            "scope": {
              "label": "One cycle"
            }
          }
        },
        "expect": [
          {
            "name": "name",
            "type": "text",
            "label": "Variable name",
            "required": true
          },
          {
            "name": "scope",
            "type": "select",
            "label": "Variable lifetime",
            "required": true,
            "validate": {
              "enum": ["roundtrip", "execution"]
            }
          },
          {
            "name": "value",
            "type": "any",
            "label": "Variable value"
          }
        ],
        "interface": [
          {
            "name": "batchNumber",
            "label": "batchNumber",
            "type": "any"
          }
        ]
      }
    },
    {
      "id": 21,
      "module": "airtable:ActionSearchRecords",
      "version": 3,
      "parameters": {
        "__IMTCONN__": 138023
      },
      "mapper": {
        "base": "appncY8IjPHkOVapz",
        "useColumnId": false,
        "table": "certificate-batches",
        "formula": "{Batch ID} = {{20.batchNumber}}",
        "maxRecords": "1"
      },
      "metadata": {
        "designer": {
          "x": 300,
          "y": 0
        },
        "restore": {
          "parameters": {
            "__IMTCONN__": {
              "label": "NEAR Edu Workspace",
              "data": {
                "scoped": "true",
                "connection": "airtable2"
              }
            }
          },
          "expect": {
            "base": {
              "mode": "chose",
              "label": "NEAR University"
            },
            "useColumnId": {
              "mode": "chose"
            },
            "table": {
              "mode": "chose",
              "label": "certificate-batches"
            },
            "sort": {
              "mode": "chose"
            },
            "view": {
              "mode": "chose",
              "label": "Empty"
            }
          }
        },
        "parameters": [
          {
            "name": "__IMTCONN__",
            "type": "account:airtable2",
            "label": "Connection",
            "required": true
          }
        ],
        "expect": [
          {
            "name": "base",
            "type": "select",
            "label": "Base",
            "required": true
          },
          {
            "name": "useColumnId",
            "type": "boolean",
            "label": "Use Column ID",
            "required": true
          },
          {
            "name": "table",
            "type": "select",
            "label": "Table",
            "required": true
          },
          {
            "name": "formula",
            "type": "text",
            "label": "Formula"
          },
          {
            "name": "maxRecords",
            "type": "integer",
            "label": "Limit"
          },
          {
            "name": "sort",
            "type": "array",
            "label": "Sort",
            "spec": [
              {
                "name": "field",
                "type": "select",
                "label": "Field",
                "options": [],
                "dynamic": true
              },
              {
                "name": "direction",
                "type": "select",
                "label": "Direction",
                "options": [
                  {
                    "label": "Descending",
                    "value": "desc"
                  },
                  {
                    "label": "Ascending",
                    "value": "asc"
                  }
                ]
              }
            ]
          },
          {
            "name": "view",
            "type": "select",
            "label": "View"
          },
          {
            "name": "base",
            "type": "select",
            "label": "Base",
            "required": true
          },
          {
            "name": "useColumnId",
            "type": "boolean",
            "label": "Use Column ID",
            "required": true
          },
          {
            "name": "table",
            "type": "select",
            "label": "Table",
            "required": true
          },
          {
            "name": "formula",
            "type": "text",
            "label": "Formula"
          },
          {
            "name": "maxRecords",
            "type": "integer",
            "label": "Limit"
          },
          {
            "name": "sort",
            "type": "array",
            "label": "Sort",
            "spec": [
              {
                "name": "field",
                "type": "select",
                "label": "Field",
                "options": [],
                "dynamic": true
              },
              {
                "name": "direction",
                "type": "select",
                "label": "Direction",
                "options": [
                  {
                    "label": "Descending",
                    "value": "desc"
                  },
                  {
                    "label": "Ascending",
                    "value": "asc"
                  }
                ]
              }
            ]
          },
          {
            "name": "view",
            "type": "select",
            "label": "View"
          }
        ],
        "interface": [
          {
            "name": "__IMTLENGTH__",
            "label": "Total number of bundles",
            "type": "uinteger"
          },
          {
            "name": "__IMTINDEX__",
            "label": "Bundle order position",
            "type": "uinteger"
          },
          {
            "name": "id",
            "type": "text",
            "label": "ID"
          },
          {
            "name": "createdTime",
            "type": "date",
            "label": "Created Time"
          },
          {
            "name": "Batch ID",
            "label": "Batch ID",
            "type": "number"
          },
          {
            "name": "nc-submissions",
            "label": "nc-submissions",
            "type": "array",
            "spec": {
              "label": "Record ID",
              "name": "value",
              "type": "text"
            }
          },
          {
            "name": "Count (nc-submissions)",
            "label": "Count (nc-submissions)",
            "type": "number"
          },
          {
            "name": "Count minted",
            "label": "Count minted",
            "type": "array"
          },
          {
            "name": "nft-icon",
            "label": "nft-icon",
            "type": "text"
          }
        ]
      }
    },
    {
      "id": 10,
      "module": "builtin:BasicFeeder",
      "version": 1,
      "parameters": {},
      "mapper": {
        "array": "{{21.`nc-submissions`}}"
      },
      "metadata": {
        "designer": {
          "x": 600,
          "y": 0
        },
        "restore": {
          "expect": {
            "array": {
              "mode": "edit"
            }
          }
        },
        "expect": [
          {
            "mode": "edit",
            "name": "array",
            "spec": [],
            "type": "array",
            "label": "Array"
          }
        ]
      }
    },
    {
      "id": 9,
      "module": "airtable:ActionGetRecord",
      "version": 3,
      "parameters": {
        "__IMTCONN__": 138023
      },
      "mapper": {
        "base": "appncY8IjPHkOVapz",
        "useColumnId": false,
        "table": "nc-submissions",
        "id": "{{10.value}}"
      },
      "metadata": {
        "designer": {
          "x": 900,
          "y": 0
        },
        "restore": {
          "parameters": {
            "__IMTCONN__": {
              "label": "NEAR Edu Workspace",
              "data": {
                "scoped": "true",
                "connection": "airtable2"
              }
            }
          },
          "expect": {
            "base": {
              "mode": "chose",
              "label": "NEAR University"
            },
            "useColumnId": {
              "mode": "chose"
            },
            "table": {
              "mode": "chose",
              "label": "nc-submissions"
            }
          }
        },
        "parameters": [
          {
            "name": "__IMTCONN__",
            "type": "account:airtable2",
            "label": "Connection",
            "required": true
          }
        ],
        "expect": [
          {
            "name": "base",
            "type": "select",
            "label": "Base",
            "required": true
          },
          {
            "name": "useColumnId",
            "type": "boolean",
            "label": "Use Column ID",
            "required": true
          },
          {
            "name": "table",
            "type": "select",
            "label": "Table",
            "required": true
          },
          {
            "name": "id",
            "type": "text",
            "label": "Record ID",
            "required": true
          },
          {
            "name": "base",
            "type": "select",
            "label": "Base",
            "required": true
          },
          {
            "name": "useColumnId",
            "type": "boolean",
            "label": "Use Column ID",
            "required": true
          },
          {
            "name": "table",
            "type": "select",
            "label": "Table",
            "required": true
          },
          {
            "name": "id",
            "type": "text",
            "label": "Record ID",
            "required": true
          }
        ],
        "interface": [
          {
            "name": "id",
            "type": "text",
            "label": "ID"
          },
          {
            "name": "createdTime",
            "type": "date",
            "label": "Created Time"
          },
          {
            "name": "name",
            "label": "name",
            "type": "text"
          },
          {
            "name": "verified",
            "label": "verified",
            "type": "boolean"
          },
          {
            "name": "strength",
            "label": "strength",
            "type": "text"
          },
          {
            "name": "notes",
            "label": "notes",
            "type": "text"
          },
          {
            "name": "project-name",
            "label": "project-name",
            "type": "text"
          },
          {
            "name": "project-pitch",
            "label": "project-pitch",
            "type": "text"
          },
          {
            "name": "video",
            "label": "video",
            "type": "url"
          },
          {
            "name": "project-github",
            "label": "project-github",
            "type": "url"
          },
          {
            "name": "project-effort",
            "label": "project-effort",
            "type": "text"
          },
          {
            "name": "schedule",
            "label": "schedule",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "bio",
            "label": "bio",
            "type": "text"
          },
          {
            "name": "created",
            "label": "created",
            "type": "date"
          },
          {
            "name": "experience_with_near",
            "label": "experience_with_near",
            "type": "text"
          },
          {
            "name": "email",
            "label": "email",
            "type": "text"
          },
          {
            "name": "mainnet",
            "label": "mainnet",
            "type": "text"
          },
          {
            "name": "program",
            "label": "program",
            "type": "array"
          },
          {
            "name": "profile",
            "label": "profile",
            "type": "array",
            "spec": [
              {
                "name": "id",
                "type": "text",
                "label": "ID"
              },
              {
                "name": "url",
                "type": "url",
                "label": "URL"
              },
              {
                "name": "filename",
                "type": "filename",
                "label": "File name"
              },
              {
                "name": "size",
                "type": "uinteger",
                "label": "Size"
              },
              {
                "name": "type",
                "label": "MIME type",
                "type": "text"
              },
              {
                "name": "thumbnails",
                "label": "Thumbnails",
                "type": "collection",
                "spec": [
                  {
                    "name": "small",
                    "label": "Small",
                    "type": "collection",
                    "spec": [
                      {
                        "name": "url",
                        "type": "url",
                        "label": "URL"
                      },
                      {
                        "name": "width",
                        "type": "uinteger",
                        "label": "Width"
                      },
                      {
                        "name": "height",
                        "type": "uinteger",
                        "label": "Height"
                      }
                    ]
                  },
                  {
                    "name": "large",
                    "label": "Large",
                    "type": "collection",
                    "spec": [
                      {
                        "name": "url",
                        "type": "url",
                        "label": "URL"
                      },
                      {
                        "name": "width",
                        "type": "uinteger",
                        "label": "Width"
                      },
                      {
                        "name": "height",
                        "type": "uinteger",
                        "label": "Height"
                      }
                    ]
                  },
                  {
                    "name": "full",
                    "label": "Full",
                    "type": "collection",
                    "spec": [
                      {
                        "name": "url",
                        "type": "url",
                        "label": "URL"
                      },
                      {
                        "name": "width",
                        "type": "uinteger",
                        "label": "Width"
                      },
                      {
                        "name": "height",
                        "type": "uinteger",
                        "label": "Height"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": "join-alumni",
            "label": "join-alumni",
            "type": "text"
          },
          {
            "name": "integromat",
            "label": "integromat",
            "type": "text",
            "multiline": true
          },
          {
            "name": "reviewed",
            "label": "reviewed",
            "type": "boolean"
          },
          {
            "name": "rejected",
            "label": "rejected",
            "type": "boolean"
          },
          {
            "name": "duplicate",
            "label": "duplicate",
            "type": "boolean"
          },
          {
            "name": "count",
            "label": "count",
            "type": "number"
          },
          {
            "name": "jobs",
            "label": "jobs",
            "type": "text"
          },
          {
            "name": "hiring",
            "label": "hiring",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "contact",
            "label": "contact",
            "type": "collection",
            "spec": [
              {
                "name": "label",
                "type": "text",
                "label": "Label"
              },
              {
                "name": "url",
                "type": "url",
                "label": "URL"
              }
            ]
          },
          {
            "name": "contact_link",
            "label": "contact_link",
            "type": "text"
          },
          {
            "name": "Talent ID",
            "label": "Talent ID",
            "type": "text"
          },
          {
            "name": "discord-role-assigned",
            "label": "discord-role-assigned",
            "type": "boolean"
          },
          {
            "name": "pitchdeck",
            "label": "pitchdeck",
            "type": "array",
            "spec": [
              {
                "name": "id",
                "type": "text",
                "label": "ID"
              },
              {
                "name": "url",
                "type": "url",
                "label": "URL"
              },
              {
                "name": "filename",
                "type": "filename",
                "label": "File name"
              },
              {
                "name": "size",
                "type": "uinteger",
                "label": "Size"
              },
              {
                "name": "type",
                "label": "MIME type",
                "type": "text"
              },
              {
                "name": "thumbnails",
                "label": "Thumbnails",
                "type": "collection",
                "spec": [
                  {
                    "name": "small",
                    "label": "Small",
                    "type": "collection",
                    "spec": [
                      {
                        "name": "url",
                        "type": "url",
                        "label": "URL"
                      },
                      {
                        "name": "width",
                        "type": "uinteger",
                        "label": "Width"
                      },
                      {
                        "name": "height",
                        "type": "uinteger",
                        "label": "Height"
                      }
                    ]
                  },
                  {
                    "name": "large",
                    "label": "Large",
                    "type": "collection",
                    "spec": [
                      {
                        "name": "url",
                        "type": "url",
                        "label": "URL"
                      },
                      {
                        "name": "width",
                        "type": "uinteger",
                        "label": "Width"
                      },
                      {
                        "name": "height",
                        "type": "uinteger",
                        "label": "Height"
                      }
                    ]
                  },
                  {
                    "name": "full",
                    "label": "Full",
                    "type": "collection",
                    "spec": [
                      {
                        "name": "url",
                        "type": "url",
                        "label": "URL"
                      },
                      {
                        "name": "width",
                        "type": "uinteger",
                        "label": "Width"
                      },
                      {
                        "name": "height",
                        "type": "uinteger",
                        "label": "Height"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": "nce-peer-ratings",
            "label": "nce-peer-ratings",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "trainer",
            "label": "trainer",
            "type": "text"
          },
          {
            "name": "nc-schedule",
            "label": "nc-schedule",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "certificate-minted",
            "label": "certificate-minted",
            "type": "boolean"
          },
          {
            "name": "mainnet (from nc-instructors) (from schedule)",
            "label": "mainnet (from nc-instructors) (from schedule)",
            "type": "array"
          },
          {
            "name": "certificates-batch",
            "label": "certificates-batch",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "start datetime (from schedule)",
            "label": "start datetime (from schedule)",
            "type": "array"
          },
          {
            "name": "mainnet vaildation",
            "label": "mainnet vaildation",
            "type": "text"
          },
          {
            "name": "contract_code",
            "label": "contract_code",
            "type": "text"
          }
        ]
      }
    },
    {
      "id": 7,
      "module": "airtable:ActionGetRecord",
      "version": 3,
      "parameters": {
        "__IMTCONN__": 138023
      },
      "filter": {
        "name": "Exclude when already minted",
        "conditions": [
          [
            {
              "a": "{{9.`certificate-minted`}}",
              "b": "true",
              "o": "text:notequal"
            }
          ]
        ]
      },
      "mapper": {
        "base": "appncY8IjPHkOVapz",
        "useColumnId": true,
        "table": "nc-schedule",
        "id": "{{9.schedule[]}}"
      },
      "metadata": {
        "designer": {
          "x": 1200,
          "y": 0
        },
        "restore": {
          "parameters": {
            "__IMTCONN__": {
              "label": "NEAR Edu Workspace",
              "data": {
                "scoped": "true",
                "connection": "airtable2"
              }
            }
          },
          "expect": {
            "base": {
              "mode": "chose",
              "label": "NEAR University"
            },
            "useColumnId": {
              "mode": "chose"
            },
            "table": {
              "mode": "chose",
              "label": "nc-schedule"
            }
          }
        },
        "parameters": [
          {
            "name": "__IMTCONN__",
            "type": "account:airtable2",
            "label": "Connection",
            "required": true
          }
        ],
        "expect": [
          {
            "name": "base",
            "type": "select",
            "label": "Base",
            "required": true
          },
          {
            "name": "useColumnId",
            "type": "boolean",
            "label": "Use Column ID",
            "required": true
          },
          {
            "name": "table",
            "type": "select",
            "label": "Table",
            "required": true
          },
          {
            "name": "id",
            "type": "text",
            "label": "Record ID",
            "required": true
          },
          {
            "name": "base",
            "type": "select",
            "label": "Base",
            "required": true
          },
          {
            "name": "useColumnId",
            "type": "boolean",
            "label": "Use Column ID",
            "required": true
          },
          {
            "name": "table",
            "type": "select",
            "label": "Table",
            "required": true
          },
          {
            "name": "id",
            "type": "text",
            "label": "Record ID",
            "required": true
          }
        ],
        "interface": [
          {
            "name": "id",
            "type": "text",
            "label": "ID"
          },
          {
            "name": "createdTime",
            "type": "date",
            "label": "Created Time"
          },
          {
            "name": "fldjNn2LIMUDgmieE",
            "label": "label",
            "type": "text"
          },
          {
            "name": "fldGqWws6vU28wjXP",
            "label": "start",
            "type": "date",
            "time": false
          },
          {
            "name": "fld4GqGR5FctEnDGT",
            "label": "end",
            "type": "date",
            "time": false
          },
          {
            "name": "fld4iqrevMqYFd9FD",
            "label": "time",
            "type": "text"
          },
          {
            "name": "fldCrKDdfR2FEi8PJ",
            "label": "instructor",
            "type": "text"
          },
          {
            "name": "fldHnXxq15KGlwDzv",
            "label": "nc-instructors",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "fldL6k7c3WauvrMFR",
            "label": "mainnet (from nc-instructors)",
            "type": "array"
          },
          {
            "name": "fldZxwYOPRZzwqBKO",
            "label": "count",
            "type": "number"
          },
          {
            "name": "fldwbkm5CsO8932gE",
            "label": "pipeline",
            "type": "array"
          },
          {
            "name": "fldcpV8upPxgG5qRH",
            "label": "status",
            "type": "text"
          },
          {
            "name": "fld6JTGz0Ds3hyk5y",
            "label": "program",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "fld50MLmRrHCuO3M9",
            "label": "start datetime",
            "type": "text"
          },
          {
            "name": "fldx48rqseJOeY9HH",
            "label": "start time",
            "type": "text"
          },
          {
            "name": "fldMaC8otl1KHeVCu",
            "label": "link",
            "type": "array"
          },
          {
            "name": "fldFuCfkrJx4MZaDR",
            "label": "nc-registrations",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "flds5fhLQyUawX9rV",
            "label": "short name",
            "type": "array"
          },
          {
            "name": "fldIhsl4Htaaug261",
            "label": "nickname (from program)",
            "type": "array"
          },
          {
            "name": "fld4BlYENfpqnTrqj",
            "label": "url (from program)",
            "type": "array"
          },
          {
            "name": "fldrmjRBuVbYXuFg8",
            "label": "nps-data-collection",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "fldzY4QMcE8TrurUt",
            "label": "nc-alumni",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "fldeIHyqpt18Ypd75",
            "label": "duration",
            "type": "text"
          },
          {
            "name": "fldZQgt9N7iVlzmIb",
            "label": "register",
            "type": "collection",
            "spec": [
              {
                "name": "label",
                "type": "text",
                "label": "Label"
              },
              {
                "name": "url",
                "type": "url",
                "label": "URL"
              }
            ]
          },
          {
            "name": "fldmprgpIlvN95qdf",
            "label": "created",
            "type": "date"
          },
          {
            "name": "fldoznCStCPRhMEP3",
            "label": "updated",
            "type": "date"
          },
          {
            "name": "fldRB7i1wKpVC83aO",
            "label": "program name",
            "type": "array"
          },
          {
            "name": "fldBsymvmCZYHfznC",
            "label": "hide",
            "type": "boolean"
          },
          {
            "name": "fldWZodW6skA5jlQR",
            "label": "nc-submissions",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "fldTzUZTaB8nUBMnh",
            "label": "certificate description (from program)",
            "type": "array"
          },
          {
            "name": "fldC7i7oEwaN8qEVD",
            "label": "time summary",
            "type": "text"
          },
          {
            "name": "fld1p6sMnWersIHzB",
            "label": "description (from program)",
            "type": "array"
          },
          {
            "name": "fld3qJi0c9wtctF3e",
            "label": "Color code",
            "type": "array"
          },
          {
            "name": "fldNUM5phrKNDfJm2",
            "label": "sessionUrl",
            "type": "text"
          },
          {
            "name": "fldiUps1GUHO9t5u9",
            "label": "surveyUrl",
            "type": "text"
          }
        ],
        "advanced": true
      }
    },
    {
      "id": 12,
      "module": "http:ActionSendDataAPIKeyAuth",
      "version": 3,
      "parameters": {
        "auth": 1850,
        "handleErrors": false
      },
      "mapper": {
        "ca": "",
        "qs": [],
        "url": "https://certificates.near.university/api/mint-cert",
        "data": "{\n  \"details\": {\n    \"title\": \"{{7.fldRB7i1wKpVC83aO[]}}\",\n    \"description\": \"{{7.fldTzUZTaB8nUBMnh[]}}\",\n    \"issued_at\": \"{{timestamp}}\",\n    \"authority_id\": \"{{7.fldL6k7c3WauvrMFR[]}}\",\n    \"authority_name\": \"{{7.fldCrKDdfR2FEi8PJ}}\",\n    \"program\": \"{{7.fldIhsl4Htaaug261[]}}\",\n    \"program_name\": \"{{7.fldRB7i1wKpVC83aO[]}}\",\n    \"program_link\": \"{{7.fld4BlYENfpqnTrqj[]}}\",\n    \"program_start_date\": \"{{get(9.`start datetime (from schedule)`; 1)}}\",\n    \"program_end_date\": \"{{now}}\",\n    \"original_recipient_id\": \"{{9.mainnet}}\",\n    \"original_recipient_name\": \"{{9.name}}\",\n    \"media\": \"{{21.`nft-icon`}}\"\n  }\n}",
        "gzip": true,
        "method": "post",
        "headers": [],
        "timeout": "",
        "useMtls": false,
        "bodyType": "raw",
        "contentType": "application/json",
        "serializeUrl": false,
        "shareCookies": false,
        "parseResponse": true,
        "followRedirect": true,
        "useQuerystring": false,
        "followAllRedirects": false,
        "rejectUnauthorized": true
      },
      "metadata": {
        "designer": {
          "x": 1500,
          "y": 0
        },
        "restore": {
          "expect": {
            "qs": {
              "mode": "chose"
            },
            "method": {
              "mode": "chose",
              "label": "POST"
            },
            "headers": {
              "mode": "chose"
            },
            "bodyType": {
              "label": "Raw"
            },
            "contentType": {
              "label": "JSON (application/json)"
            }
          },
          "parameters": {
            "auth": {
              "label": "near-certification-tools API Key"
            }
          }
        },
        "parameters": [
          {
            "name": "auth",
            "type": "keychain:apikeyauth",
            "label": "Credentials",
            "required": true
          },
          {
            "name": "handleErrors",
            "type": "boolean",
            "label": "Evaluate all states as errors (except for 2xx and 3xx )",
            "required": true
          }
        ],
        "expect": [
          {
            "name": "url",
            "type": "url",
            "label": "URL",
            "required": true
          },
          {
            "name": "serializeUrl",
            "type": "boolean",
            "label": "Serialize URL",
            "required": true
          },
          {
            "name": "method",
            "type": "select",
            "label": "Method",
            "required": true,
            "validate": {
              "enum": [
                "get",
                "head",
                "post",
                "put",
                "patch",
                "delete",
                "options"
              ]
            }
          },
          {
            "name": "headers",
            "spec": [
              {
                "name": "name",
                "type": "text",
                "label": "Name",
                "required": true
              },
              {
                "name": "value",
                "type": "text",
                "label": "Value"
              }
            ],
            "type": "array",
            "label": "Headers"
          },
          {
            "name": "qs",
            "spec": [
              {
                "name": "name",
                "type": "text",
                "label": "Name",
                "required": true
              },
              {
                "name": "value",
                "type": "text",
                "label": "Value"
              }
            ],
            "type": "array",
            "label": "Query String"
          },
          {
            "name": "bodyType",
            "type": "select",
            "label": "Body type",
            "validate": {
              "enum": ["raw", "x_www_form_urlencoded", "multipart_form_data"]
            }
          },
          {
            "name": "parseResponse",
            "type": "boolean",
            "label": "Parse response",
            "required": true
          },
          {
            "name": "timeout",
            "type": "uinteger",
            "label": "Timeout",
            "validate": {
              "max": 300,
              "min": 1
            }
          },
          {
            "name": "shareCookies",
            "type": "boolean",
            "label": "Share cookies with other HTTP modules",
            "required": true
          },
          {
            "name": "ca",
            "type": "cert",
            "label": "Self-signed certificate"
          },
          {
            "name": "rejectUnauthorized",
            "type": "boolean",
            "label": "Reject connections that are using unverified (self-signed) certificates",
            "required": true
          },
          {
            "name": "followRedirect",
            "type": "boolean",
            "label": "Follow redirect",
            "required": true
          },
          {
            "name": "useQuerystring",
            "type": "boolean",
            "label": "Disable serialization of multiple same query string keys as arrays",
            "required": true
          },
          {
            "name": "gzip",
            "type": "boolean",
            "label": "Request compressed content",
            "required": true
          },
          {
            "name": "useMtls",
            "type": "boolean",
            "label": "Use Mutual TLS",
            "required": true
          },
          {
            "name": "contentType",
            "type": "select",
            "label": "Content type",
            "validate": {
              "enum": [
                "text/plain",
                "application/json",
                "application/xml",
                "text/xml",
                "text/html",
                "custom"
              ]
            }
          },
          {
            "name": "data",
            "type": "buffer",
            "label": "Request content"
          },
          {
            "name": "followAllRedirects",
            "type": "boolean",
            "label": "Follow all redirect",
            "required": true
          }
        ]
      }
    },
    {
      "id": 8,
      "module": "email:ActionSendEmail",
      "version": 7,
      "parameters": {
        "account": 180424,
        "saveAfterSent": false
      },
      "mapper": {
        "cc": [],
        "to": ["{{9.email}}"],
        "bcc": [],
        "from": "",
        "html": "{{9.name}},\n<br/><br/>\n<strong>🎉 Congratulations! Here is your certificate, which is now minted on the NEAR blockchain!</strong>\n<br/><br/>\n<a href=\"https://certificates.near.university/certificate/{{12.data.tokenId}}\" target=\"_blank\">\n  <img src=\"https://certificates.near.university/api/cert/{{12.data.tokenId}}.png\" style=\"max-width:400px\" alt=\"Image of your certificate\" />\n</a>\n<br/><br/>\nWe really appreciate that you attended the NCD session on {{formatDate(get(9.`start datetime (from schedule)`; 1); \"YYYY-MM-DD HH:mm\"; \"UTC \")}} UTC and then submitted a NEAR project, which we have reviewed and approved as demonstrating your proficiency in working with smart contracts on NEAR Protocol.\n<br/><br/>\nWe look forward to seeing you share your certificates on Twitter and LinkedIn! (Simply click into an individual certificate and then use the Twitter or LinkedIn sharing links underneath which automatically tag us.)\n<br/><br/>\nBe sure to mention your certificate whenever applying for <a href=\"https://www.near.university/earn/grants\" target=\"_blank\">grants</a>, <a href=\"https://www.near.university/earn/fellowship\" target=\"_blank\">fellowships</a>, or <a href=\"https://jobs.near.university\" target=\"_blank\">jobs</a>. You'll stand out! \n<br/><br/>\nThanks for joining us in the mission to build the Open Web,\n<br/>\nNEAR Foundation's Education Team\n<br/><br/>\nP.S. We always love hearing any <a href=\"https://forms.gle/EKpNXNGuwLvuribn8\" target=\"_blank\">feedback</a>.\n<br/><br/>\nP.P.S. You are among the first to receive a certificate! Can you please do us a favor and reply to this email to give us your feedback? We want to know what you think.",
        "sender": "",
        "headers": [],
        "replyTo": "edu-tech@near.foundation",
        "subject": "{{9.name}} is a {{7.fldRB7i1wKpVC83aO[]}} (with an NFT minted to prove it)",
        "priority": "normal",
        "inReplyTo": "",
        "references": [],
        "attachments": [],
        "contentType": "html"
      },
      "metadata": {
        "designer": {
          "x": 1800,
          "y": 0
        },
        "restore": {
          "expect": {
            "cc": {
              "mode": "chose"
            },
            "to": {
              "mode": "chose",
              "items": [null]
            },
            "bcc": {
              "mode": "chose"
            },
            "priority": {
              "label": "Normal"
            },
            "references": {
              "mode": "chose"
            },
            "attachments": {
              "mode": "chose"
            },
            "contentType": {
              "label": "HTML"
            }
          },
          "parameters": {
            "account": {
              "data": {
                "scoped": "true",
                "connection": "google-restricted"
              },
              "label": "Petar (petar.vujovic@near.foundation)"
            },
            "saveAfterSent": {
              "label": "No"
            }
          }
        },
        "parameters": [
          {
            "name": "account",
            "type": "account:smtp,google-restricted",
            "label": "Connection",
            "required": true
          },
          {
            "name": "saveAfterSent",
            "type": "select",
            "label": "Save message after sending",
            "required": true,
            "validate": {
              "enum": [true, false]
            }
          }
        ],
        "expect": [
          {
            "name": "to",
            "spec": {
              "name": "value",
              "type": "email",
              "label": "Email address",
              "required": true
            },
            "type": "array",
            "label": "To",
            "required": true
          },
          {
            "name": "subject",
            "type": "text",
            "label": "Subject"
          },
          {
            "name": "contentType",
            "type": "select",
            "label": "Content Type",
            "required": true,
            "validate": {
              "enum": ["html", "text"]
            }
          },
          {
            "name": "attachments",
            "spec": [
              {
                "name": "fileName",
                "type": "filename",
                "label": "File name",
                "required": true,
                "semantic": "file:name"
              },
              {
                "name": "data",
                "type": "buffer",
                "label": "Data",
                "required": true,
                "semantic": "file:data"
              },
              {
                "name": "cid",
                "type": "text",
                "label": "Content-ID"
              }
            ],
            "type": "array",
            "label": "Attachments"
          },
          {
            "name": "cc",
            "spec": {
              "name": "value",
              "type": "email",
              "label": "Email address"
            },
            "type": "array",
            "label": "Copy recipient"
          },
          {
            "name": "bcc",
            "spec": {
              "name": "value",
              "type": "email",
              "label": "Email address"
            },
            "type": "array",
            "label": "Blind copy recipient"
          },
          {
            "name": "from",
            "type": "text",
            "label": "From"
          },
          {
            "name": "sender",
            "type": "text",
            "label": "Sender"
          },
          {
            "name": "replyTo",
            "type": "text",
            "label": "Reply-To"
          },
          {
            "name": "inReplyTo",
            "type": "text",
            "label": "In-Reply-To"
          },
          {
            "name": "references",
            "spec": {
              "name": "value",
              "type": "text",
              "label": "Reference",
              "required": true
            },
            "type": "array",
            "label": "References"
          },
          {
            "name": "priority",
            "type": "select",
            "label": "Priority",
            "validate": {
              "enum": ["high", "normal", "low"]
            }
          },
          {
            "name": "headers",
            "spec": [
              {
                "name": "key",
                "type": "text",
                "label": "Key",
                "required": true
              },
              {
                "name": "value",
                "type": "text",
                "label": "Value",
                "required": true
              }
            ],
            "type": "array",
            "label": "Headers"
          },
          {
            "name": "html",
            "type": "text",
            "label": "Content"
          }
        ],
        "advanced": true
      }
    },
    {
      "id": 11,
      "module": "airtable:ActionUpdateRecords",
      "version": 3,
      "parameters": {
        "__IMTCONN__": 138023
      },
      "mapper": {
        "base": "appncY8IjPHkOVapz",
        "typecast": false,
        "useColumnId": false,
        "table": "nc-submissions",
        "id": "{{9.id}}",
        "record": {
          "fldQTjaDaAdhaYTCT": true
        }
      },
      "metadata": {
        "designer": {
          "x": 2100,
          "y": 0
        },
        "restore": {
          "parameters": {
            "__IMTCONN__": {
              "label": "NEAR Edu Workspace",
              "data": {
                "scoped": "true",
                "connection": "airtable2"
              }
            }
          },
          "expect": {
            "base": {
              "label": "NEAR University"
            },
            "typecast": {
              "mode": "chose"
            },
            "useColumnId": {
              "mode": "chose"
            },
            "table": {
              "label": "nc-submissions"
            },
            "record": {
              "nested": {
                "flddcblIyd5jMqLBh": {
                  "mode": "chose"
                },
                "fld8tmtqMy1QLcDFU": {
                  "mode": "chose"
                },
                "fldxLIGXjRUPn7OfJ": {
                  "mode": "chose"
                },
                "fldgNPkCgVwstL7la": {
                  "mode": "chose"
                },
                "fldn61tIkGd9AiGAH": {
                  "mode": "chose"
                },
                "fldLwlYN6RqIObvNr": {
                  "mode": "chose"
                },
                "fldpLhUzCtjZewzkh": {
                  "mode": "chose"
                },
                "fldc9JKJhgnGU1xZT": {
                  "mode": "chose"
                },
                "fldaizYpf2KJNpS8H": {
                  "mode": "chose"
                },
                "fld5PGOPp9gK065Gi": {
                  "mode": "chose"
                },
                "fld8XgArgcB4JfOhr": {
                  "mode": "chose"
                },
                "fldQTjaDaAdhaYTCT": {
                  "mode": "chose"
                },
                "fldxwnkd4raoZPzhm": {
                  "mode": "chose"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "__IMTCONN__",
            "type": "account:airtable2",
            "label": "Connection",
            "required": true
          }
        ],
        "expect": [
          {
            "name": "base",
            "type": "select",
            "label": "Base",
            "required": true
          },
          {
            "name": "typecast",
            "type": "boolean",
            "label": "Smart links",
            "required": true
          },
          {
            "name": "useColumnId",
            "type": "boolean",
            "label": "Use Column ID",
            "required": true
          },
          {
            "name": "table",
            "type": "select",
            "label": "Table",
            "required": true
          },
          {
            "name": "id",
            "type": "text",
            "label": "Record ID",
            "required": true
          },
          {
            "name": "base",
            "type": "select",
            "label": "Base",
            "required": true
          },
          {
            "name": "typecast",
            "type": "boolean",
            "label": "Smart links",
            "required": true
          },
          {
            "name": "useColumnId",
            "type": "boolean",
            "label": "Use Column ID",
            "required": true
          },
          {
            "name": "table",
            "type": "select",
            "label": "Table",
            "required": true
          },
          {
            "name": "id",
            "type": "text",
            "label": "Record ID",
            "required": true
          },
          {
            "name": "record",
            "type": "collection",
            "label": "Record",
            "spec": [
              {
                "name": "fldTQ9cRTgI8ZKdjC",
                "type": "text",
                "label": "name"
              },
              {
                "name": "flddcblIyd5jMqLBh",
                "type": "boolean",
                "label": "verified"
              },
              {
                "name": "fldHS1tNYv4jR1wKb",
                "type": "text",
                "label": "strength"
              },
              {
                "name": "fldtPCAAgniBsX4Y1",
                "type": "text",
                "label": "notes"
              },
              {
                "name": "fldnIDAvWSc7RUEDc",
                "type": "text",
                "label": "project-name"
              },
              {
                "name": "fldeX6obiRpwUZySo",
                "type": "text",
                "label": "project-pitch"
              },
              {
                "name": "fldCEuGU8WrZ9bVKc",
                "type": "url",
                "label": "video"
              },
              {
                "name": "fld9BfQnizQARehzj",
                "type": "url",
                "label": "project-github"
              },
              {
                "name": "fldrphOEqAUSE56PD",
                "type": "text",
                "label": "project-effort"
              },
              {
                "name": "fld8tmtqMy1QLcDFU",
                "type": "array",
                "label": "schedule",
                "spec": {
                  "label": "Record ID",
                  "name": "value"
                }
              },
              {
                "name": "fldtddH8wbKMd0eMC",
                "type": "text",
                "label": "bio"
              },
              {
                "name": "fldfZV0fZ46XqRWES",
                "type": "text",
                "label": "experience_with_near"
              },
              {
                "name": "fldX5FvXZbkB0S1a3",
                "type": "text",
                "label": "email"
              },
              {
                "name": "fldOZnaEck7dx29xL",
                "type": "text",
                "label": "mainnet"
              },
              {
                "name": "fldxLIGXjRUPn7OfJ",
                "type": "array",
                "label": "profile",
                "spec": [
                  {
                    "name": "url",
                    "label": "File URL",
                    "type": "text"
                  },
                  {
                    "name": "filename",
                    "label": "File name",
                    "type": "filename"
                  }
                ]
              },
              {
                "name": "fldUUljEkESXNV9dH",
                "type": "text",
                "label": "join-alumni"
              },
              {
                "name": "fldkUYMtZjnWI20me",
                "type": "text",
                "label": "integromat"
              },
              {
                "name": "fldgNPkCgVwstL7la",
                "type": "boolean",
                "label": "reviewed"
              },
              {
                "name": "fldn61tIkGd9AiGAH",
                "type": "boolean",
                "label": "rejected"
              },
              {
                "name": "fldLwlYN6RqIObvNr",
                "type": "boolean",
                "label": "duplicate"
              },
              {
                "name": "fldv6bypVKYVKPGGy",
                "type": "number",
                "label": "count"
              },
              {
                "name": "fld4YW6V9K7JMotlD",
                "type": "text",
                "label": "jobs"
              },
              {
                "name": "fldpLhUzCtjZewzkh",
                "type": "array",
                "label": "hiring",
                "spec": {
                  "label": "Record ID",
                  "name": "value"
                }
              },
              {
                "name": "fldhmqxb10TJBDHy8",
                "type": "text",
                "label": "Talent ID"
              },
              {
                "name": "fldc9JKJhgnGU1xZT",
                "type": "boolean",
                "label": "discord-role-assigned"
              },
              {
                "name": "fldaizYpf2KJNpS8H",
                "type": "array",
                "label": "pitchdeck",
                "spec": [
                  {
                    "name": "url",
                    "label": "File URL",
                    "type": "text"
                  },
                  {
                    "name": "filename",
                    "label": "File name",
                    "type": "filename"
                  }
                ]
              },
              {
                "name": "fld5PGOPp9gK065Gi",
                "type": "array",
                "label": "nce-peer-ratings",
                "spec": {
                  "label": "Record ID",
                  "name": "value"
                }
              },
              {
                "name": "fldtVPNHjYeaR6ZKE",
                "type": "text",
                "label": "trainer"
              },
              {
                "name": "fld8XgArgcB4JfOhr",
                "type": "array",
                "label": "nc-schedule",
                "spec": {
                  "label": "Record ID",
                  "name": "value"
                }
              },
              {
                "name": "fldQTjaDaAdhaYTCT",
                "type": "boolean",
                "label": "certificate-minted"
              },
              {
                "name": "fldxwnkd4raoZPzhm",
                "type": "array",
                "label": "certificates-batch",
                "spec": {
                  "label": "Record ID",
                  "name": "value"
                }
              },
              {
                "name": "fldP0Ax1AVXvmt9Rd",
                "type": "text",
                "label": "contract_code"
              }
            ]
          }
        ],
        "interface": [
          {
            "name": "id",
            "type": "text",
            "label": "ID"
          },
          {
            "name": "createdTime",
            "type": "date",
            "label": "Created Time"
          },
          {
            "name": "name",
            "label": "name",
            "type": "text"
          },
          {
            "name": "verified",
            "label": "verified",
            "type": "boolean"
          },
          {
            "name": "strength",
            "label": "strength",
            "type": "text"
          },
          {
            "name": "notes",
            "label": "notes",
            "type": "text"
          },
          {
            "name": "project-name",
            "label": "project-name",
            "type": "text"
          },
          {
            "name": "project-pitch",
            "label": "project-pitch",
            "type": "text"
          },
          {
            "name": "video",
            "label": "video",
            "type": "url"
          },
          {
            "name": "project-github",
            "label": "project-github",
            "type": "url"
          },
          {
            "name": "project-effort",
            "label": "project-effort",
            "type": "text"
          },
          {
            "name": "schedule",
            "label": "schedule",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "bio",
            "label": "bio",
            "type": "text"
          },
          {
            "name": "created",
            "label": "created",
            "type": "date"
          },
          {
            "name": "experience_with_near",
            "label": "experience_with_near",
            "type": "text"
          },
          {
            "name": "email",
            "label": "email",
            "type": "text"
          },
          {
            "name": "mainnet",
            "label": "mainnet",
            "type": "text"
          },
          {
            "name": "program",
            "label": "program",
            "type": "array"
          },
          {
            "name": "profile",
            "label": "profile",
            "type": "array",
            "spec": [
              {
                "name": "id",
                "type": "text",
                "label": "ID"
              },
              {
                "name": "url",
                "type": "url",
                "label": "URL"
              },
              {
                "name": "filename",
                "type": "filename",
                "label": "File name"
              },
              {
                "name": "size",
                "type": "uinteger",
                "label": "Size"
              },
              {
                "name": "type",
                "label": "MIME type",
                "type": "text"
              },
              {
                "name": "thumbnails",
                "label": "Thumbnails",
                "type": "collection",
                "spec": [
                  {
                    "name": "small",
                    "label": "Small",
                    "type": "collection",
                    "spec": [
                      {
                        "name": "url",
                        "type": "url",
                        "label": "URL"
                      },
                      {
                        "name": "width",
                        "type": "uinteger",
                        "label": "Width"
                      },
                      {
                        "name": "height",
                        "type": "uinteger",
                        "label": "Height"
                      }
                    ]
                  },
                  {
                    "name": "large",
                    "label": "Large",
                    "type": "collection",
                    "spec": [
                      {
                        "name": "url",
                        "type": "url",
                        "label": "URL"
                      },
                      {
                        "name": "width",
                        "type": "uinteger",
                        "label": "Width"
                      },
                      {
                        "name": "height",
                        "type": "uinteger",
                        "label": "Height"
                      }
                    ]
                  },
                  {
                    "name": "full",
                    "label": "Full",
                    "type": "collection",
                    "spec": [
                      {
                        "name": "url",
                        "type": "url",
                        "label": "URL"
                      },
                      {
                        "name": "width",
                        "type": "uinteger",
                        "label": "Width"
                      },
                      {
                        "name": "height",
                        "type": "uinteger",
                        "label": "Height"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": "join-alumni",
            "label": "join-alumni",
            "type": "text"
          },
          {
            "name": "integromat",
            "label": "integromat",
            "type": "text",
            "multiline": true
          },
          {
            "name": "reviewed",
            "label": "reviewed",
            "type": "boolean"
          },
          {
            "name": "rejected",
            "label": "rejected",
            "type": "boolean"
          },
          {
            "name": "duplicate",
            "label": "duplicate",
            "type": "boolean"
          },
          {
            "name": "count",
            "label": "count",
            "type": "number"
          },
          {
            "name": "jobs",
            "label": "jobs",
            "type": "text"
          },
          {
            "name": "hiring",
            "label": "hiring",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "contact",
            "label": "contact",
            "type": "collection",
            "spec": [
              {
                "name": "label",
                "type": "text",
                "label": "Label"
              },
              {
                "name": "url",
                "type": "url",
                "label": "URL"
              }
            ]
          },
          {
            "name": "contact_link",
            "label": "contact_link",
            "type": "text"
          },
          {
            "name": "Talent ID",
            "label": "Talent ID",
            "type": "text"
          },
          {
            "name": "discord-role-assigned",
            "label": "discord-role-assigned",
            "type": "boolean"
          },
          {
            "name": "pitchdeck",
            "label": "pitchdeck",
            "type": "array",
            "spec": [
              {
                "name": "id",
                "type": "text",
                "label": "ID"
              },
              {
                "name": "url",
                "type": "url",
                "label": "URL"
              },
              {
                "name": "filename",
                "type": "filename",
                "label": "File name"
              },
              {
                "name": "size",
                "type": "uinteger",
                "label": "Size"
              },
              {
                "name": "type",
                "label": "MIME type",
                "type": "text"
              },
              {
                "name": "thumbnails",
                "label": "Thumbnails",
                "type": "collection",
                "spec": [
                  {
                    "name": "small",
                    "label": "Small",
                    "type": "collection",
                    "spec": [
                      {
                        "name": "url",
                        "type": "url",
                        "label": "URL"
                      },
                      {
                        "name": "width",
                        "type": "uinteger",
                        "label": "Width"
                      },
                      {
                        "name": "height",
                        "type": "uinteger",
                        "label": "Height"
                      }
                    ]
                  },
                  {
                    "name": "large",
                    "label": "Large",
                    "type": "collection",
                    "spec": [
                      {
                        "name": "url",
                        "type": "url",
                        "label": "URL"
                      },
                      {
                        "name": "width",
                        "type": "uinteger",
                        "label": "Width"
                      },
                      {
                        "name": "height",
                        "type": "uinteger",
                        "label": "Height"
                      }
                    ]
                  },
                  {
                    "name": "full",
                    "label": "Full",
                    "type": "collection",
                    "spec": [
                      {
                        "name": "url",
                        "type": "url",
                        "label": "URL"
                      },
                      {
                        "name": "width",
                        "type": "uinteger",
                        "label": "Width"
                      },
                      {
                        "name": "height",
                        "type": "uinteger",
                        "label": "Height"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": "nce-peer-ratings",
            "label": "nce-peer-ratings",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "trainer",
            "label": "trainer",
            "type": "text"
          },
          {
            "name": "nc-schedule",
            "label": "nc-schedule",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "certificate-minted",
            "label": "certificate-minted",
            "type": "boolean"
          },
          {
            "name": "mainnet (from nc-instructors) (from schedule)",
            "label": "mainnet (from nc-instructors) (from schedule)",
            "type": "array"
          },
          {
            "name": "certificates-batch",
            "label": "certificates-batch",
            "type": "array",
            "spec": {
              "label": "Record ID"
            }
          },
          {
            "name": "start datetime (from schedule)",
            "label": "start datetime (from schedule)",
            "type": "array"
          },
          {
            "name": "mainnet vaildation",
            "label": "mainnet vaildation",
            "type": "text"
          },
          {
            "name": "contract_code",
            "label": "contract_code",
            "type": "text"
          }
        ]
      }
    }
  ],
  "metadata": {
    "instant": false,
    "version": 1,
    "scenario": {
      "roundtrips": 1,
      "maxErrors": 3,
      "autoCommit": false,
      "autoCommitTriggerLast": true,
      "sequential": false,
      "confidential": false,
      "dataloss": false,
      "dlq": false
    },
    "designer": {
      "orphans": []
    },
    "zone": "eu1.make.com"
  }
}

'''
'''--- web-app/.eslintrc.js ---
// yarn add -D eslint prettier typescript eslint-config-airbnb-typescript-prettier
/** @type {import('eslint').Linter.Config} */
const config = {
  // https://github.com/toshi-toma/eslint-config-airbnb-typescript-prettier https://github.com/airbnb/javascript
  extends: ['near', 'airbnb-typescript-prettier'],

  overrides: [
    {
      files: ['{index,_app,[0-9]+,\\[*\\]}.{js,jsx,ts,tsx}', '**/api/**/*.ts'],
      rules: {
        'canonical/filename-match-exported': ['off'],
      },
    },
  ],

  // https://eslint.org/docs/user-guide/configuring#report-unused-eslint-disable-comments
  reportUnusedDisableDirectives: true,
  rules: {
    '@typescript-eslint/no-use-before-define': ['error'],

    // Add rules that allow Prettier and ESLint to work together without conflicts (https://stackoverflow.com/a/64166241/):
    indent: ['error', 2, { SwitchCase: 1 }],

    'max-len': [
      'warn',
      {
        code: 180,
        comments: 180,
        ignoreComments: false,
        ignoreRegExpLiterals: true,
        ignoreStrings: true,
        ignoreTemplateLiterals: true,
        ignoreTrailingComments: true,
        ignoreUrls: true,
        tabWidth: 2,
      },
    ],

    // https://eslint.org/docs/rules/max-lines
    'max-lines': ['error', { max: 300, skipBlankLines: true, skipComments: true }],

    // https://eslint.org/docs/rules/max-lines-per-function
    'max-lines-per-function': ['error', { max: 40, skipBlankLines: true, skipComments: true }],

    // Console logging is super helpful for development, and we can have our build process strip out all of those statements for production.
    'no-console': 'off',

    'no-else-return': 'off',

    'no-tabs': ['error', { allowIndentationTabs: true }],

    // We must disable the base rule (since it can report incorrect errors) and replace it (https://stackoverflow.com/a/64024916/)
    'no-use-before-define': 'off',

    'react/function-component-definition': 'off',
    'react/jsx-filename-extension': ['warn', { extensions: ['.js', '.jsx', '.ts', '.tsx'] }],
    'react/react-in-jsx-scope': 'off',
  },
  // REMEMBER TO RESTART `yarn dev` or `npm run watch` WHENEVER EDITING THESE RULES!
};

module.exports = config;

'''
'''--- web-app/README.md ---
# Overview

This project will be accessible at https://certificates.near.university. See [deployment_notes.md](deployment_notes.md).

## Frontend

The index page will prompt the visitor to log in, after which it will display the list of certificates that they possess. Each cert will display a URL of its image (and eventually links or buttons that allow sharing it on Twitter).

## API Endpoints

### Generating the certificate (minting the NFT)

There is also an API endpoint ([/api/mint-cert](/web-app/pages/api/mint-cert.ts)) for generating a cert for a given mainnet address (and the endpoint will only function if a server-side secret is also provided in the payload).

See [sample_api_payload_mint-cert.json](/web-app/pages/api/sample_api_payload_mint-cert.json).

Airtable and Integromat are connected via a polling function in Integromat. Once every day or so, Integromat can poll Airtable to retrieve all certified developers, only grabbing the most recently added ones (since the last poll). In the Integromat flow, we have all the data from the submissions table that we need to issue a cert (including name, mainnet address, course, etc).

The Integromat flow then calls the [HTTP "app"](https://www.integromat.com/en/help/app/http) (Integromat calls each flow step an "app") and uses it to call out to this API endpoint, passing a payload of NCD data that mints a new NFT.

The next step in the Integromat flow is to email the recipient of the NCD with a link directly to their wallet where they can see the NFT (and also a link to this frontend).

### Testing posting to the mint-cert API endpoint

You can use CURL in the Terminal.

Change to the `/web-app` directory, and then:

`curl -X POST -H "Content-Type: application/json" -H "x-api-key: xxxxxxxx" -d @"pages/api/sample_api_payload_mint-cert.json" "http://localhost:3000/api/mint-cert"`

### Testing posting to the invalidate-all-certs-for-account API endpoint

You can use CURL in the Terminal.

Change to the `/web-app` directory, and then:

`curl -X POST -H "Content-Type: application/json" -H "x-api-key: xxxxxxxx" -d @"pages/api/sample_api_payload_invalidate-all-certs-for-account.json" "http://localhost:3000/api/invalidate-all-certs-for-account"`

### Viewing the dynamically-generated png image

Visitors can view the image at /api/cert/abcd.svg or /api/cert/abcd.png. See [/web-app/pages/api/cert/[imageFileName].ts](/web-app/pages/api/cert/[imageFileName].ts)

## Getting Started

```bash
cp web-app/.env web-app/.env.local
# Then edit those values. You'll need to replace the value of NEXT_PUBLIC_CERTIFICATE_CONTRACT_NAME with your own that you saw in the CLI. Ask Ryan for any other secrets.
nvm use 17
yarn
yarn dev
```

The app is at [http://localhost:3000/api/cert/103216412112497cb6c193152a27c49a.svg](http://localhost:3000/api/cert/103216412112497cb6c193152a27c49a.svg) and [http://localhost:3000/api/mint-cert](http://localhost:3000/api/mint-cert).

## See also

- Keep in mind that through commit 2022-01-26 18:25:22 -0500 b44d3a9 there was a folder called "view-contract", where the original idea was to have the dynamic SVG/PNG image generation happen on the NEAR blockchain rather than on a centralized server. But we abandoned that approach due to high gas costs of cross-contract calls.
- This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).
- Solving a TypeScript issue that happens when Render tries to build the project: https://community.render.com/t/deploy-a-github-sub-directory/1156/12

# Helpful tools

- https://github.com/fusebit/tunnel
- https://reqbin.com/post-online

'''
'''--- web-app/deployment_notes.md ---
# Web app server hosted by Render.com

https://dashboard.render.com/web/srv-c821j246fj315u4tlj90/settings

## Build Command

`cd web-app; yarn; yarn build`

## Start Command

`cd web-app; yarn start`

## Branch

main

## Auto Deploy

yes

## Environment variables

Keep in mind that you can't just use the "secret file" feature and paste the contents of your `.env.local` and tell it to save the file as `.env.local` because it would save at the root of the whole project rather than where it needs to be, which is at `web-app/.env.local`. So, instead, you need to add env key-value pairs one by one manually at the linked Environment Group here: https://dashboard.render.com/env-group/evg-c822des6fj315u4tmckg

All new commits to `main` branch get automatically deployed. Changing variables in the Environment Group also triggers a redeployment.

# Integration between a data source and the mint-cert API endpoint

https://www.integromat.com/scenario/2983577/edit

Integromat offers an "HTTP" "scenario", which allows us to post JSON data to /api/mint-cert, along with a header that includes our arbitrary API key (defined in our .env.local file or in the Environment Group on Render as mentioned above).

# Main URLs to test

- https://near-certification-tools-tpq1.onrender.com/
- https://near-certification-tools-tpq1.onrender.com/account/hatchet.testnet
- https://near-certification-tools-tpq1.onrender.com/certificate/103216412112497cb6c193152a27c49a
- https://near-certification-tools-tpq1.onrender.com/api/cert/103216412112497cb6c193152a27c49a.svg
- https://near-certification-tools-tpq1.onrender.com/api/cert/103216412112497cb6c193152a27c49a.png
- https://near-certification-tools-tpq1.onrender.com/api/mint-cert (post JSON data and API key header)

'''
'''--- web-app/docker-compose.yml ---
# Set the version of docker compose to use
version: '3.9'

# The containers that compose the project
services:
  db:
    image: postgres:13
    restart: always
    container_name: integration-tests-prisma
    ports:
      - '5433:5432'
    environment:
      POSTGRES_USER: prisma
      POSTGRES_PASSWORD: prisma
      POSTGRES_DB: tests

'''
'''--- web-app/helpers/caching.ts ---
/* eslint-disable import/prefer-default-export */

import { type ServerResponse } from 'http';

// Note: When running your application locally with next dev, your headers are overwritten to prevent caching locally.
// https://nextjs.org/docs/going-to-production#caching
// https://vercel.com/docs/concepts/edge-network/caching#serverless-functions-(lambdas)
export function addCacheHeader(response: ServerResponse, seconds: number) {
  response.setHeader('Cache-Control', `public, s-maxage=${seconds}`);
}

'''
'''--- web-app/helpers/certificate-designs.ts ---
// https://dev.to/sudo_overflow/diy-generating-dynamic-images-on-the-fly-for-email-marketing-h51
import { type Canvas, registerFont, loadImage } from 'canvas';
import { isBeforeNow, formatDate } from './time';
import { type ImageIngredients } from './types';

type NodeCanvasRenderingContext2D = ReturnType<Canvas['getContext']>;

export const width = 1_080; // width of the image
export const height = 1_080; // height of the image
const manropeFontFile = './fonts/Manrope-VariableFont_wght.ttf';
const manropeFontFamily = 'Manrope, Sans Serif';
const monoFontFile = './fonts/DMMono-Medium.ttf';
const monoFontFamily = 'DM Mono, monospace';

const gray = '#757575';
const black = '#000000';
const blue = '#5F8AFA';

const CERTIFICATE_OF_ACHIEVEMENT = 'CERTIFICATE OF ACHIEVEMENT';
const BODY_WIDTH = 950;
const LEFT_PADDING = 65;
const X_POSITION_OF_INSTRUCTOR = 210; // https://www.figma.com/file/sTYSqGHiCoH0p82uh1TsTs/NC-Certs?node-id=0%3A1 does not have the actual measurements needed for left-align, so this is just a guess, but it's possibly good enough.
const X_POSITION_OF_DATE = LEFT_PADDING + BODY_WIDTH;
const X_POSITION_OF_DATE_LABEL = X_POSITION_OF_DATE - 190;
const X_POSITION_OF_DESCRIPTION = LEFT_PADDING;
const X_CENTER = width / 2;
const Y_POSITION_ISSUED_DATE = 807;

const dateFont = `30px '${monoFontFamily}' medium`;
const descriptionFont = `33px '${manropeFontFamily}' regular`;
const tokenIdFont = `30px '${monoFontFamily}' medium`;
const programFont = `40px '${monoFontFamily}' medium`;
const titleFont = `64px '${manropeFontFamily}' extraBold`;
const fieldLabelFont = `28px '${manropeFontFamily}' extraBold`;
const expirationExplanationFont = `20px '${manropeFontFamily}' regular`;

registerFont(manropeFontFile, { family: manropeFontFamily });
registerFont(monoFontFile, { family: monoFontFamily });

function getExpiratonExplanation(expirationDateString: string) {
  const expirationDateStringFormatted = formatDate(expirationDateString);
  return `* Will expire after the first 6-month period of inactivity of this mainnet account (which currently would be ${expirationDateStringFormatted} if no future activity)`;
}

function getBaseContext(canvas: Canvas) {
  const context = canvas.getContext('2d');
  context.textBaseline = 'top';
  return context;
}

function addText(context: NodeCanvasRenderingContext2D, text: string, font: string, fillStyle: string, xPos: number, yPos: number, textAlign: CanvasTextAlign) {
  // Define the font style
  context.fillStyle = fillStyle;
  context.font = font;
  context.textAlign = textAlign;
  context.fillText(text, xPos, yPos); // https://developer.mozilla.org/en-US/docs/Web/API/NodeCanvasRenderingContext2D/fillText
}

/**
 * Adds text (via addText) but also iteratively decreases the fontSize until the whole string fits the context.
 */
function fitText(
  context: NodeCanvasRenderingContext2D,
  text: string,
  fontSize: number,
  fillStyle: string,
  x: number,
  y: number,
  textWidth: number,
  textAlign: CanvasTextAlign,
  fontWeight = 'medium',
) {
  let font;
  let currentFontSize = fontSize;
  let currentY = y;

  // Decrease the font size until the text fits the context.
  do {
    currentY += 1;
    font = `${currentFontSize}px '${monoFontFamily}' ${fontWeight}`;
    context.font = font; // The font needs to be applied to the context here so that context.measureText can work.
    console.log({ font });
    console.log(context.measureText(text).width);
    currentFontSize -= 1;
  } while (context.measureText(text).width > textWidth);

  addText(context, text, font, fillStyle, x, currentY, textAlign);
}

/**
 * Split long text into shorter lines.
 * Dynamic Width (Build Regex) https://stackoverflow.com/a/51506718
 * maxChars is the max number of characters per line
 */
function wrapText(context: NodeCanvasRenderingContext2D, text: string, x: number, y: number, maxChars: number, font: string, fillStyle: string) {
  const replacedText = text.replace(new RegExp(`(?![^\\n]{1,${maxChars}}$)([^\\n]{1,${maxChars}})\\s`, 'g'), '$1\n');
  addText(context, replacedText, font, fillStyle, x, y, 'left');
}

export async function populateCert(canvas: Canvas, details: ImageIngredients) {
  console.log('populateCert', { details });
  const { tokenId, date, expiration, programName, accountName, programDescription, instructor, programCode } = details;

  // Load and draw the background image first
  const certificateBackgroundImage = `./public/certificate-backgrounds/${programCode}_certificate.svg`; // Background images must be in SVG format

  const image = await loadImage(certificateBackgroundImage);

  const context = getBaseContext(canvas);
  context.drawImage(image, 0, 0, width, height);

  addText(context, CERTIFICATE_OF_ACHIEVEMENT, titleFont, blue, X_CENTER, 170, 'center');
  fitText(context, accountName, 60, black, X_CENTER, 304, BODY_WIDTH, 'center');
  wrapText(context, programDescription, X_POSITION_OF_DESCRIPTION, 450, 60, descriptionFont, gray);
  addText(context, programName, programFont, black, X_CENTER, 680, 'center');
  addText(context, 'Instructor:', fieldLabelFont, gray, LEFT_PADDING, Y_POSITION_ISSUED_DATE, 'left');
  fitText(context, instructor, 30, black, X_POSITION_OF_INSTRUCTOR, Y_POSITION_ISSUED_DATE, 540, 'left');
  addText(context, 'Issued:', fieldLabelFont, gray, X_POSITION_OF_DATE_LABEL, Y_POSITION_ISSUED_DATE, 'right');
  addText(context, date, dateFont, black, X_POSITION_OF_DATE, Y_POSITION_ISSUED_DATE, 'right');
  if (expiration) {
    // Expiration should always exist (unless maybe the public indexer query timed out?)
    if (isBeforeNow(expiration)) {
      addText(context, 'Expired:', fieldLabelFont, gray, X_POSITION_OF_DATE_LABEL, 850, 'right');
    } else {
      addText(context, 'Expiration*:', fieldLabelFont, gray, X_POSITION_OF_DATE_LABEL, 850, 'right');
      wrapText(context, getExpiratonExplanation(expiration), X_POSITION_OF_DESCRIPTION, 910, 110, expirationExplanationFont, gray);
    }

    addText(context, formatDate(expiration), dateFont, black, X_POSITION_OF_DATE, 850, 'right');
  }

  addText(context, tokenId, tokenIdFont, black, X_CENTER, 995, 'center');
}

'''
'''--- web-app/helpers/certificate.ts ---
import { z } from 'zod';
import { getNearConnection } from './near';
import { getImageUrl } from './strings';
import { convertStringDateToNanoseconds } from './time';

export interface Token {
  token_id: string;
  owner_id: string;
  metadata?: TokenMetadata;
  approved_account_ids?: Record<string, number>;
}

export interface NFTMintArgs {
  token_id: string;
  receiver_account_id?: string;
  token_metadata: TokenMetadata;
  certification_metadata: CertificationExtraMetadata;
  memo?: string;
}

export interface CertificationExtraMetadata {
  authority_name?: string;
  authority_id?: string;
  program?: string;
  program_name?: string;
  program_link?: string;
  program_start_date?: string;
  program_end_date?: string;
  original_recipient_id?: string;
  original_recipient_name?: string;
  valid: boolean;
  memo?: string;
}

export interface TokenMetadata {
  title?: string;
  description?: string;
  media?: string;
  media_hash?: string;
  copies?: number;
  issued_at?: string;
  expires_at?: string;
  starts_at?: string;
  updated_at?: string;
  extra?: string;
  reference?: string;
  reference_hash?: string;
}

export type CertificateRequiredFields = Required<Omit<CertificationExtraMetadata, 'valid'> & Pick<TokenMetadata, 'title' | 'description'>>;

export async function checkAccountId(accountId: string): Promise<boolean> {
  try {
    const connection = await getNearConnection();
    const account = await connection.account(accountId);
    const state = await account.state();

    return !!state;
  } catch {
    return false;
  }
}

/**
 *
 * @see https://nomicon.io/Standards/Tokens/NonFungibleToken/Metadata#interface
 */
export function buildTokenMetadata(tokenId: string, { title, description }: CertificateRequiredFields): TokenMetadata {
  return { copies: 1, description, issued_at: `${Date.now()}`, media: getImageUrl(tokenId), title }; // Jacob L, Ryan W, and Petar V just decided to omit media_hash (even though the NFT standard requires it) since `media` points to a URL that dynamically generates the image (and since these NFTs aren't transferrable anyway).
}

export function buildCertificationMetadata({
  authority_id,
  authority_name,
  program,
  program_name,
  program_link,
  program_start_date,
  program_end_date,
  original_recipient_id,
  original_recipient_name,
  memo,
}: CertificateRequiredFields): CertificationExtraMetadata {
  return {
    authority_id,
    authority_name,
    memo,
    original_recipient_id,
    original_recipient_name,
    program,
    program_name,
    program_link,
    program_start_date,
    program_end_date,
    valid: true,
  };
}

export function validate(details: unknown): CertificateRequiredFields {
  const nonEmptyString = () => z.string().min(1);
  const validAccountId = () => nonEmptyString().refine(async (id) => await checkAccountId(id), { message: 'Not a valid account ID' });
  const validDate = () =>
    nonEmptyString()
      .refine((date) => new Date(date), { message: 'Not a valid date string' })
      .transform(convertStringDateToNanoseconds);

  const validationSchema = z.object({
    title: nonEmptyString(),
    description: nonEmptyString(),
    authority_id: validAccountId(),
    authority_name: nonEmptyString(),
    program: nonEmptyString(),
    program_name: nonEmptyString(),
    program_link: nonEmptyString(),
    program_start_date: validDate(),
    program_end_date: validDate(),
    original_recipient_id: validAccountId(),
    original_recipient_name: nonEmptyString(),
    memo: z.string(),
  });

  const result = validationSchema.parse(details);

  return result;
}

export function isValid(cert: Required<Token>): boolean {
  try {
    const { extra } = cert.metadata;
    return !!(extra && JSON.parse(extra).valid);
  } catch {
    return false;
  }
}

'''
'''--- web-app/helpers/expiration-date.ts ---
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc'; // https://day.js.org/docs/en/plugin/utc
import BN from 'bn.js';
import { Pool } from 'pg';
import { getStartOfDayInNanoseconds } from './time';

dayjs.extend(utc); // use dayjs utc plugin to avoid parsing different dates depending on local timezone. https://github.com/iamkun/dayjs/issues/1723#issuecomment-985246689

const expirationDays = 180; // Certificates expire after the first period of this many consecutive days of inactivity after issueDate.
type RawQueryResult = {
  // If account has had any inactivity period over 180 days, moment is the start date of such period
  // If account did not have any long (>=180 days) inactivity period, moment is the most recent activity date
  diff_to_next_activity: number;
  moment: string; // Number of days of inactivity if long (>=180 days) inactivity period is present for given account
};

/**
 * issuedAtUnixNano is double casted in query because of Prisma template literal throwing 22P03 Error in DB
 * https://github.com/prisma/prisma/issues/10424
 * https://github.com/prisma/prisma/issues/5083
 * Double casting : https://github.com/prisma/prisma/issues/4647#issuecomment-939555602
 */
// eslint-disable-next-line max-lines-per-function
export async function getRawQuery(accountName: string, issuedAtUnixNano: string) {
  // Pulls from the public indexer. https://github.com/near/near-indexer-for-explorer#shared-public-access
  /**
   * This query uses Common Table Expressions(CTE) to execute two separate queries conditionally;
   * the second query being executed if first query doesn't return any result.
   * https://www.postgresql.org/docs/9.1/queries-with.html
   * https://stackoverflow.com/a/68684814/10684149
   */
  /**
   * ---- QUERY 1 ----
   * First query checks if the account has a period where it hasn't been active for 180 days straight after the issue date
   * IMPORTANT: When a certificate is issued to an account, it does not appear as a transaction on the account's transaction history.
   * Therefore, the period between the first mainnet activity and issue date needs to be checked as well whether it exceeds 180 days, or not.
   *
   * This is done by:
   * 1. Calculating the difference between account's first activity after issue date and the issue date.
   * 2. Retrieving account activities after the issue date and checking differences between these dates in days.
   *
   * Since it is important to detect the FIRST occurance of a >180-day period,
   * only in case such period is present:
   * -- 1. if difference between (first activity - issue date) > 180, moment is the issue date
   * -- 2. if difference between (first activity - issue date) < 180, moment is the first occurence of >180-day period after the first activity
   *
   * -- Example result:
   * [
   * {
   * moment: '2019-08-03T00:00:00+00:00', // The beginning of the *first* such period (moment) + 180 days
   * diff_to_next_activity: 214 // Either (first activity - issue date) or any other period where >180-day inacitivity is present, in days
   * }
   * ]
   *
   * ---- QUERY 2 ----
   * Second query is run if no 180-day-inactivity period is found and returns most recent activity date
   *
   * -- Example result:
   * [
   * {
   * moment: '2022-04-07T16:25:59+00:00', // Most recent activity
   * diff_to_next_activity: null // null, since no >180-day period was found
   * }
   * ]
   *
   * BOTH queries are set up to return the desired date in a column called 'moment'.
   */

  // *issue_date* <-----------Query - 1-----------> *last_activtiy*  <-----------Query - 2 -----------> *now (render date)*
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
  });

  // We need to filter up to today's date as those receipts might still be updated as per
  // https://github.com/near/near-indexer-for-explorer/issues/134#issuecomment-883131423
  const startOfDay = getStartOfDayInNanoseconds();

  // eslint-disable-next-line @typescript-eslint/return-await
  return pool.query<RawQueryResult>(
    `
  /* <--- START OF FIRST QUERY ---> */
  WITH long_period_of_inactivity AS (
    (
      SELECT 
        case
          /* return issue date as moment if days_between_issue_date_and_first_activity > 180 */
          when days_between_issue_date_and_first_activity >= $1 then TO_TIMESTAMP(($2::text)::numeric/1000000000)
          /* else, return the start date of first occurance of >=180 day inactivity period if present */
          else moment
        end as moment,
        case
          /* if first activity - issue date exceeds 180 days, return the difference in days */
          when days_between_issue_date_and_first_activity >= $1 then days_between_issue_date_and_first_activity
          /* else, return the days between start of inactivity period and the next activity date */
          else diff_to_next_activity
        end as diff_to_next_activity
      FROM (
        SELECT *,
          ((EXTRACT(epoch FROM first_activity) - ($2::text)::numeric / 1000000000) / 86400)::int AS days_between_issue_date_and_first_activity
        FROM (
          SELECT *,
            /* 1 day = 60sec * 60min * 24h = 86400 sec*/
            ((EXTRACT(epoch FROM moment_of_activity) - EXTRACT(epoch FROM LAG(moment_of_activity) over (ORDER BY moment_of_activity))) / 86400)::int AS diff_to_next_activity,
            LAG(moment_of_activity) OVER (ORDER BY moment_of_activity) AS moment,
            FIRST_VALUE(moment_of_activity) OVER(ORDER BY moment_of_activity) first_activity
          FROM (
            SELECT
              TO_TIMESTAMP(R."included_in_block_timestamp" / 1000000000) as moment_of_activity
            FROM
              PUBLIC.RECEIPTS R LEFT JOIN PUBLIC.ACTION_RECEIPTS AR ON R.RECEIPT_ID = AR.RECEIPT_ID
            WHERE
              SIGNER_ACCOUNT_ID = $2
              /* double casting because of prisma template literal throwing 22P03 Error in DB */
              AND R."included_in_block_timestamp" >= ($2::text)::numeric
              AND R."included_in_block_timestamp" <= ($4::text)::numeric
          ) as account_activity_dates
        ) as account_activity_periods
      ) as account_activity_periods_with_first_activity
      WHERE (diff_to_next_activity > $1) OR (days_between_issue_date_and_first_activity > $1)
      ORDER BY moment ASC
      LIMIT 1
    )
  /* <--- END OF FIRST QUERY ---> */

  /* <--- START OF SECOND QUERY, IN CASE FIRST QUERY DOESN'T MATCH CONDITIONS ---> */
  ), most_recent_activity AS (
    SELECT
      /* moment refers to the most recent activity date of account */
      moment,
      /* to match column numbers in both queries */
      CAST(NULL AS int) AS diff_to_next_activity
    FROM (
      SELECT TO_TIMESTAMP(R."included_in_block_timestamp"/1000000000) as moment
      FROM
        PUBLIC.receipts R LEFT JOIN PUBLIC.ACTION_RECEIPTS AR ON R.RECEIPT_ID = AR.RECEIPT_ID
      WHERE
        SIGNER_ACCOUNT_ID = $3
        /* double casting because of prisma template literal throwing 22P03 Error in DB */
        AND R."included_in_block_timestamp" >= ($2::text)::numeric
        AND R."included_in_block_timestamp" <= ($4::text)::numeric
    ) as receipt
    WHERE NOT EXISTS (TABLE long_period_of_inactivity)
    ORDER BY moment DESC
    LIMIT 1
  )
  /* <--- END OF SECOND QUERY ---> */

  /* <--- BINDING CTEs WITH UNION ALL. IF FIRST QUERY (long_period_of_inactivity) DOESN'T RETURN ANY RESULT, RUN SECOND QUERY (most_recent_activity) ---> */
  TABLE long_period_of_inactivity
  UNION ALL
  TABLE most_recent_activity`,
    [expirationDays, issuedAtUnixNano, accountName, startOfDay],
  );
}

export async function getRawQueryResult(accountName: string, issuedAt: string): Promise<RawQueryResult[]> {
  /**
   * Calculates Unix Timestamp in nanoseconds.
   * Calculation is exceeding JS's MAX_SAFE_INTEGER value, making it unsafe to use Number type(floating point `number` type).
   * The Number type in JavaScript can only safely represent Number types below the MAX_SAFE_INTEGER value.
   * Integer values outside of MAX_SAFE_INTEGER value might cause lost of precision.
   * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER.
   * Therefore, we're using the bn.js library to solve this issue
   * (BigInt type could be used as well).
   */
  const issuedAtUnixNano = new BN(issuedAt).mul(new BN(1_000_000)).toString(); // Converts issued_at which is in milliseconds to nanoseconds, finally from BN instance to string type. Result can't be saved as numeric type because it is exceeding 53 bits.

  console.log({ accountName, issuedAt, issuedAtUnixNano });
  try {
    const { rows: result } = await getRawQuery(accountName, issuedAtUnixNano);

    console.log('getExpiration query result', { result });
    return result;
  } catch (error) {
    console.error(error);
    return [];
  }
}

/**
 * @returns {string} result of formatDate (i.e. uses 'YYYY-MM-DD') of the expiration date
 */
export async function getExpiration(accountName: string, issuedAt: string): Promise<string> {
  const expiration = await getRawQueryResult(accountName, issuedAt);
  console.log({ result: expiration });

  /**
   * If the account doesn't have a period where it hasn't been active for 180 days straight after the issue date:
   * Days between last activity and render date is checked:
   * -- Expiration date = last activity (moment) + 180 days
   * Otherwise, if >180-day period of inactivity exists after issueDate,
   * -- Expiration date = the beginning of the *first* such period (moment) + 180 days
   * If query doesn't return any result:
   * -- return expiration date as issue date + 180 days
   */

  const moment = expiration.length ? dayjs.utc(expiration[0].moment) : dayjs.utc(Number.parseInt(issuedAt, 10)); // https://github.com/iamkun/dayjs/issues/1723#issuecomment-985246689

  return moment.add(expirationDays, 'days').format('YYYY-MM-DDTHH:mm:ss+00:00');
}

'''
'''--- web-app/helpers/near.ts ---
/* eslint-disable no-return-await */
// Inspired by https://github.com/mehtaphysical/near-js/blob/f1d12884f80cb556472a8109e822c25fdff3c077/packages/next-template-near/services/near.js
import { type NextApiResponse } from 'next';
import { type ConnectConfig, KeyPair, Account, connect, Contract } from 'near-api-js'; // https://github.com/near/near-api-js/blob/master/examples/quick-reference.md
import { type KeyStore, BrowserLocalStorageKeyStore, InMemoryKeyStore } from 'near-api-js/lib/key_stores';
import { type IncomingHttpHeaders } from 'http';
import { type NftMintResult } from './types';
import { NFTMintArgs, Token } from './certificate';

const privateKey = process.env.ISSUING_AUTHORITY_PRIVATE_KEY ?? '';
export const apiKey = process.env.API_KEY ?? '';
// public vars:
const certificateContractName = process.env.NEXT_PUBLIC_CERTIFICATE_CONTRACT_NAME ?? 'example-contract.testnet';
export const issuingAuthorityAccountId = process.env.NEXT_PUBLIC_ISSUING_AUTHORITY_ACCOUNT_ID ?? 'example-authority.testnet';
export const gas = +(process.env.NEXT_PUBLIC_GAS ?? 300_000_000_000_000);
export const networkId = process.env.NEXT_PUBLIC_NEAR_NETWORK_ID ?? 'testnet';
const nodeUrl = process.env.NEXT_PUBLIC_NEAR_NODE_URL ?? 'https://rpc.testnet.near.org';
const walletUrl = process.env.NEXT_PUBLIC_NEAR_WALLET_URL ?? 'https://wallet.testnet.near.org';
const helperUrl = process.env.NEXT_PUBLIC_NEAR_HELPER_URL ?? 'https://helper.testnet.near.org';
// const explorerUrl = process.env.NEXT_PUBLIC_NEAR_EXPLORER_URL || 'https://explorer.testnet.near.org';
console.log('public env vars', { certificateContractName, gas, issuingAuthorityAccountId });

export const HTTP_SUCCESS = 200;
export const HTTP_ERROR = 500;
const HTTP_UNAUTHORIZED = 401; // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401

export type AccountId = string;

export async function getNearConnection(keyStore?: KeyStore) {
  const config: ConnectConfig = {
    headers: {},
    helperUrl,
    keyStore,
    networkId,
    // optional if not signing transactions
    nodeUrl,
    walletUrl,
    // explorerUrl,
  };
  const near = await connect(config);
  return near;
}

async function getNearAccount(accountId: AccountId) {
  const keyPair = KeyPair.fromString(privateKey);
  const keyStore = new InMemoryKeyStore();
  await keyStore.setKey(networkId, accountId, keyPair);
  const near = await getNearConnection(keyStore);
  return new Account(near.connection, accountId);
}

export async function getNearAccountWithoutAccountIdOrKeyStore(keyStore: KeyStore) {
  const near = await getNearConnection(keyStore);
  const accountId: AccountId = ''; // TODO Why would account_id be required for a simple `near view` call? Clearly it's allowed to be empty.
  return new Account(near.connection, accountId);
}

export async function getNearAccountWithoutAccountIdOrKeyStoreForBackend() {
  const keyStore = new InMemoryKeyStore();
  return await getNearAccountWithoutAccountIdOrKeyStore(keyStore);
}

export async function getNearAccountWithoutAccountIdOrKeyStoreForFrontend() {
  const keyStore = new BrowserLocalStorageKeyStore();
  console.log({ keyStore });
  return await getNearAccountWithoutAccountIdOrKeyStore(keyStore);
}

export type NFT = Contract & {
  cert_invalidate: (args: { token_id: string; memo?: string }, gas: number, depositAmount: string) => Promise<void>;
  cert_delete: (args: { token_id: string; memo?: string }, gas: number, depositAmount: string) => Promise<void>;
  // https://stackoverflow.com/a/41385149/470749
  nft_mint: (args: NFTMintArgs, gas: number, depositAmount: string) => Promise<NftMintResult>;
  nft_token: (args: { token_id: string }) => Promise<Token | null>;
  nft_tokens_for_owner: (args: { account_id: string; from_index?: bigint; limit?: number }) => Promise<Array<Token>>;
};

export function getNftContractOfAccount(account: Account) {
  // TODO: Make `account` optional.
  return new Contract(
    account, // the account object that is connecting
    certificateContractName,
    {
      // change methods modify state
      changeMethods: ['nft_mint', 'cert_invalidate', 'cert_delete'],
      // view methods do not change state but usually return a value
      viewMethods: ['nft_token', 'nft_tokens_for_owner'],
    },
  ) as NFT;
}

export async function getNftContract() {
  const account = await getNearAccount(issuingAuthorityAccountId);
  const contract = getNftContractOfAccount(account);
  return contract;
}

export function rejectAsUnauthorized(response: NextApiResponse<any>, headers: IncomingHttpHeaders) {
  const errorMessage = 'Unauthorized. Please provide the API key.';
  console.log({ errorMsg: errorMessage, headers });
  response.status(HTTP_UNAUTHORIZED).json({ message: errorMessage, status: 'error' });
}

'''
'''--- web-app/helpers/prisma.ts ---
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient({
  log: [
    {
      emit: 'event',
      level: 'query',
    },
    {
      emit: 'stdout',
      level: 'error',
    },
    {
      emit: 'stdout',
      level: 'info',
    },
    {
      emit: 'stdout',
      level: 'warn',
    },
  ],
});

// https://www.prisma.io/docs/concepts/components/prisma-client/working-with-prismaclient/logging
prisma.$on('query', (event: any) => {
  // console.log(`Query: ${event.query}`);
  console.log(`Duration: ${event.duration}ms`);
});

// See different approach at https://vercel.com/guides/nextjs-prisma-postgres

export default prisma;

'''
'''--- web-app/helpers/strings.ts ---
import { randomUUID } from 'crypto';

export function generateUUIDForTokenId(): string {
  return randomUUID().replaceAll('-', '');
}

export const baseUrl = process.env.NEXT_PUBLIC_BASE_URL;

export function getSimpleStringFromParameter(parameterValue: string[] | string | undefined) {
  return parameterValue ? (typeof parameterValue === 'string' ? parameterValue : parameterValue[0]) : '';
}

export function getImagePath(tokenId: string, extension = 'svg') {
  return `/api/cert/${tokenId}.${extension}`;
}

export function getImageUrl(tokenId: string, extension = 'svg') {
  return `${baseUrl}${getImagePath(tokenId, extension)}`;
}

export type CanvasType = 'pdf' | 'svg' | undefined;
export type BufferType = 'image/png' | undefined;
export type ContentType = 'image/svg+xml' | 'image/png';
const svg = 'svg';
const dot = '.';
const imagePng = 'image/png';

export function getTypesFromExtension(extension = svg): { contentType: ContentType; canvasType: CanvasType; bufferType: BufferType } {
  const isSvg = extension === svg;

  return {
    contentType: isSvg ? 'image/svg+xml' : imagePng,
    bufferType: isSvg ? undefined : imagePng,
    canvasType: isSvg ? svg : undefined,
  };
}

export function parseFileName(imageFileNameString: string): {
  tokenId: string;
  extension?: string;
} & ReturnType<typeof getTypesFromExtension> {
  const extension = imageFileNameString.split(dot).pop(); // https://stackoverflow.com/a/1203361/470749
  const lastIndex = imageFileNameString.lastIndexOf(`${dot}${extension}`); // https://stackoverflow.com/a/9323226/470749

  return { extension, tokenId: imageFileNameString.slice(0, Math.max(0, lastIndex)), ...getTypesFromExtension(extension) };
}

'''
'''--- web-app/helpers/time.ts ---
/* eslint-disable canonical/id-match */
import { type Decimal } from '@prisma/client/runtime';
import dayjs, { type Dayjs } from 'dayjs'; // https://day.js.org/en
import utc from 'dayjs/plugin/utc'; // https://day.js.org/docs/en/plugin/utc
import BN from 'bn.js'; // https://github.com/indutny/bn.js

const defaultDateFormat = 'YYYY-MM-DD';
dayjs.extend(utc); // use dayjs utc plugin to avoid parsing different dates depending on local timezone. https://github.com/iamkun/dayjs/issues/1723#issuecomment-985246689

export function convertTimestampToDayjsMoment(timestamp: Decimal | number | string, denominator: number): Dayjs {
  // https://stackoverflow.com/questions/71024496/why-do-i-need-to-divide-the-timestamp-by-1-billion
  // https://discord.com/channels/828768337978195969/830348856561500167/940337682121359391
  const timestampNumber = new BN(Number(timestamp)).div(new BN(denominator));
  const moment = dayjs.unix(timestampNumber.toNumber()); // https://day.js.org/docs/en/parse/unix-timestamp
  return moment;
}

export function convertNanoTimestampDecimalToDayjsMoment(timestampDecimal: Decimal): Dayjs {
  // Jacob said "I think that's the same precision used internally by NEAR core to store timestamps, in nanoseconds".
  return convertTimestampToDayjsMoment(timestampDecimal, 1_000_000_000);
}

export function formatDate(dateTime: Dayjs | string) {
  // https://day.js.org/docs/en/display/format
  // https://github.com/iamkun/dayjs/issues/1723#issuecomment-985246689
  return dayjs.utc(dateTime).format(defaultDateFormat); // UTC (Coordinated Universal Time) to date string in defaultDateFormat (YYYY-MM-DD)
}

export function convertMillisecondsTimestampToFormattedDate(milliseconds: string) {
  const moment = convertTimestampToDayjsMoment(milliseconds, 1_000);
  return formatDate(moment);
}

export function isBeforeNow(dateTimeString: string): boolean {
  return dayjs(dateTimeString).isBefore(dayjs()); // https://day.js.org/docs/en/query/is-before
}

/**
 * Get the start of the current date in nanoseconds.
 */
export function getStartOfDayInNanoseconds(): string {
  return new BN(dayjs().startOf('d').unix()).mul(new BN(1_000_000_000)).toString();
}

export function convertStringDateToOtherPrecision(iso8601DateTime: string, multiplier: BN): string {
  const moment = dayjs(iso8601DateTime); // https://day.js.org/docs/en/parse/string
  const unixSeconds = moment.unix();
  const result = new BN(unixSeconds).mul(new BN(multiplier));
  return result.toString();
}

export function convertStringDateToNanoseconds(iso8601DateTime: string): string {
  return convertStringDateToOtherPrecision(iso8601DateTime, new BN(1_000_000_000));
}

export function convertStringDateToMilliseconds(iso8601DateTime: string): string {
  return convertStringDateToOtherPrecision(iso8601DateTime, new BN(1_000));
}

'''
'''--- web-app/helpers/types.ts ---
export type ImageIngredients = {
  accountName: string;
  date: string;
  expiration: string;
  instructor: string;
  programCode: string;
  programDescription: string;
  // This will determine which background image gets used.
  programName: string;
  tokenId: string;
};

export type JsonResponse =
  | {
      message: string;
      status: string;
    }
  | { error?: unknown | undefined; success: boolean };

export type NftMintResult = any;

'''
'''--- web-app/jest.config.js ---
module.exports = {
  clearMocks: true,
  preset: 'ts-jest',
  testEnvironment: 'node',
  setupFilesAfterEnv: ['<rootDir>/test/test-helpers/mock-client.ts'],
  globals: {
    'ts-jest': {
      tsconfig: './tsconfig.json',
      // set global config for ts-jest
    },
  },
};

'''
'''--- web-app/next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- web-app/next.config.js ---
/** @type {import('next').NextConfig} */
module.exports = {
  reactStrictMode: true,
  future: {
    webpack5: true, // By default, if you customize webpack config, they switch back to version 4. (backward compatibility?)
  },
  webpack(config) {
    // eslint-disable-next-line no-param-reassign
    config.resolve.fallback = {
      ...config.resolve.fallback,
      fs: false, // https://stackoverflow.com/a/67478653/470749
    };

    return config;
  },
};

'''
'''--- web-app/package-lock.json ---
{
  "name": "nextplus",
  "version": "0.1.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "nextplus",
      "version": "0.1.0",
      "dependencies": {
        "@fortawesome/fontawesome-svg-core": "^6.1.1",
        "@fortawesome/free-brands-svg-icons": "^6.0.0",
        "@fortawesome/free-regular-svg-icons": "^6.0.0",
        "@fortawesome/free-solid-svg-icons": "^6.0.0",
        "@fortawesome/react-fontawesome": "^0.1.18",
        "@prisma/client": "^3.11.1",
        "bn.js": "^5.2.0",
        "canvas": "^2.9.0",
        "dayjs": "^1.10.7",
        "dotenv-cli": "^5.0.0",
        "near-api-js": "ryancwalsh/near-api-js#gracefully-handle-window-and-buffer",
        "next": "^12.1.0",
        "next-ssl-redirect-middleware": "^0.1.3",
        "pg": "^8.8.0",
        "react": "17.0.2",
        "react-dom": "17.0.2",
        "wait-port": "^0.2.9",
        "zod": "^3.19.1",
        "zod-validation-error": "^0.2.1"
      },
      "devDependencies": {
        "@types/bn.js": "^5.1.0",
        "@types/jest": "^27.4.1",
        "@types/node": "^17.0.14",
        "@types/pg": "^8.6.5",
        "@types/react": "^17.0.38",
        "autoprefixer": "^10.4.2",
        "eslint": "^8.7.0",
        "eslint-config-airbnb-typescript-prettier": "^5.0.0",
        "eslint-config-near": "^1.0.1",
        "jest": "^27.5.1",
        "jest-mock-extended": "^2.0.4",
        "postcss": "^8.4.5",
        "prettier": "^2.5.1",
        "prisma": "^3.11.1",
        "sass": "^1.43.5",
        "tailwindcss": "^3.0.16",
        "ts-jest": "^27.1.3",
        "ts-node": "^10.7.0",
        "typescript": "^4.6.2"
      },
      "engines": {
        "node": ">=17.8.0"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.1.2",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.0"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.16.7",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/highlight": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.18.5",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.18.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.1.0",
        "@babel/code-frame": "^7.16.7",
        "@babel/generator": "^7.18.2",
        "@babel/helper-compilation-targets": "^7.18.2",
        "@babel/helper-module-transforms": "^7.18.0",
        "@babel/helpers": "^7.18.2",
        "@babel/parser": "^7.18.5",
        "@babel/template": "^7.16.7",
        "@babel/traverse": "^7.18.5",
        "@babel/types": "^7.18.4",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.1",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/eslint-parser": {
      "version": "7.18.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-scope": "^5.1.1",
        "eslint-visitor-keys": "^2.1.0",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || >=14.0.0"
      },
      "peerDependencies": {
        "@babel/core": ">=7.11.0",
        "eslint": "^7.5.0 || ^8.0.0"
      }
    },
    "node_modules/@babel/eslint-parser/node_modules/eslint-visitor-keys": {
      "version": "2.1.0",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@babel/eslint-plugin": {
      "version": "7.17.7",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-rule-composer": "^0.3.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || >=14.0.0"
      },
      "peerDependencies": {
        "@babel/eslint-parser": ">=7.11.0",
        "eslint": ">=7.5.0"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.18.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.18.2",
        "@jridgewell/gen-mapping": "^0.3.0",
        "jsesc": "^2.5.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-annotate-as-pure": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.18.6.tgz",
      "integrity": "sha512-duORpUiYrEpzKIop6iNbjnwKLAKnJ47csTyRACyEmWj0QdUrm5aqNJGHSSEQSUAvNW0ojX0dOmK9dZduvkfeXA==",
      "dev": true,
      "peer": true,
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.18.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.17.10",
        "@babel/helper-validator-option": "^7.16.7",
        "browserslist": "^4.20.2",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-environment-visitor": {
      "version": "7.18.2",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-function-name": {
      "version": "7.17.9",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.16.7",
        "@babel/types": "^7.17.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-hoist-variables": {
      "version": "7.16.7",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.18.6.tgz",
      "integrity": "sha512-0NFvs3VkuSYbFi1x2Vd6tKrywq+z/cLeYC/RJNFrIX/30Bf5aiGYbtvGXolEktzJH8o5E5KJ3tT+nkxuuZFVlA==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.18.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-environment-visitor": "^7.16.7",
        "@babel/helper-module-imports": "^7.16.7",
        "@babel/helper-simple-access": "^7.17.7",
        "@babel/helper-split-export-declaration": "^7.16.7",
        "@babel/helper-validator-identifier": "^7.16.7",
        "@babel/template": "^7.16.7",
        "@babel/traverse": "^7.18.0",
        "@babel/types": "^7.18.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.18.9.tgz",
      "integrity": "sha512-aBXPT3bmtLryXaoJLyYPXPlSD4p1ld9aYeR+sJNOZjJJGiOpb+fKfh3NkcCu7J54nUJwCERPBExCCpyCOHnu/w==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-simple-access": {
      "version": "7.18.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.18.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-split-export-declaration": {
      "version": "7.16.7",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.18.6.tgz",
      "integrity": "sha512-MmetCkz9ej86nJQV+sFCxoGGrUbU3q02kgLciwkrt9QqEB7cP39oKEY0PakknEO0Gu20SskMRi+AYZ3b1TpN9g==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.16.7",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.18.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.16.7",
        "@babel/traverse": "^7.18.2",
        "@babel/types": "^7.18.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.16.10",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.16.7",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight/node_modules/ansi-styles": {
      "version": "3.2.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/chalk": {
      "version": "2.4.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/color-convert": {
      "version": "1.9.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/@babel/highlight/node_modules/color-name": {
      "version": "1.1.3",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@babel/highlight/node_modules/has-flag": {
      "version": "3.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/highlight/node_modules/supports-color": {
      "version": "5.5.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.18.5",
      "dev": true,
      "license": "MIT",
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.12.13"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-flow": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-flow/-/plugin-syntax-flow-7.18.6.tgz",
      "integrity": "sha512-LUbR+KNTBWCUAqRG9ex5Gnzu2IOkt8jRJbHHXFT9q+L9zm7M/QQbEqXyw1n1pohYvOyWC8CjeyjrSaIwiYjK7A==",
      "dev": true,
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.18.6.tgz",
      "integrity": "sha512-6mmljtAedFGTWu2p/8WIORGwy+61PLgOMPOdazc7YoJ9ZCWUyFy3A6CpPkRKLKD1ToAesxX8KGEViAiLo9N+7Q==",
      "dev": true,
      "peer": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.16.7",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx/-/plugin-transform-react-jsx-7.18.6.tgz",
      "integrity": "sha512-Mz7xMPxoy9kPS/JScj6fJs03TZ/fZ1dJPlMjRAgTaxaS0fUBk8FV/A2rRgfPsVCZqALNwMexD+0Uaf5zlcKPpw==",
      "dev": true,
      "peer": true,
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.18.6",
        "@babel/helper-module-imports": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-jsx": "^7.18.6",
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.17.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "regenerator-runtime": "^0.13.4"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/runtime-corejs3": {
      "version": "7.17.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "core-js-pure": "^3.20.2",
        "regenerator-runtime": "^0.13.4"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.16.7",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.16.7",
        "@babel/parser": "^7.16.7",
        "@babel/types": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.18.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.16.7",
        "@babel/generator": "^7.18.2",
        "@babel/helper-environment-visitor": "^7.18.2",
        "@babel/helper-function-name": "^7.17.9",
        "@babel/helper-hoist-variables": "^7.16.7",
        "@babel/helper-split-export-declaration": "^7.16.7",
        "@babel/parser": "^7.18.5",
        "@babel/types": "^7.18.4",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.18.9.tgz",
      "integrity": "sha512-WwMLAg2MvJmt/rKEVQBBhIVffMmnilX4oe0sRe7iPOHIGsqpruFHHdrfj4O1CMMtgMtCU4oPafZjDPCRgO57Wg==",
      "dev": true,
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.18.6",
        "to-fast-properties": "^2.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "0.2.3",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@cspotcode/source-map-consumer": {
      "version": "0.8.0",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/@cspotcode/source-map-support": {
      "version": "0.7.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@cspotcode/source-map-consumer": "0.8.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@endemolshinegroup/cosmiconfig-typescript-loader": {
      "version": "3.0.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "lodash.get": "^4",
        "make-error": "^1",
        "ts-node": "^9",
        "tslib": "^2"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "cosmiconfig": ">=6"
      }
    },
    "node_modules/@endemolshinegroup/cosmiconfig-typescript-loader/node_modules/ts-node": {
      "version": "9.1.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "source-map-support": "^0.5.17",
        "yn": "3.1.1"
      },
      "bin": {
        "ts-node": "dist/bin.js",
        "ts-node-script": "dist/bin-script.js",
        "ts-node-transpile-only": "dist/bin-transpile.js",
        "ts-script": "dist/bin-script-deprecated.js"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "typescript": ">=2.7"
      }
    },
    "node_modules/@es-joy/jsdoccomment": {
      "version": "0.31.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "comment-parser": "1.3.1",
        "esquery": "^1.4.0",
        "jsdoc-type-pratt-parser": "~3.1.0"
      },
      "engines": {
        "node": "^14 || ^16 || ^17 || ^18"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "1.3.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^9.3.2",
        "globals": "^13.15.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "13.15.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@fortawesome/fontawesome-common-types": {
      "version": "0.3.0",
      "hasInstallScript": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@fortawesome/fontawesome-svg-core": {
      "version": "6.1.1",
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "@fortawesome/fontawesome-common-types": "6.1.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@fortawesome/fontawesome-svg-core/node_modules/@fortawesome/fontawesome-common-types": {
      "version": "6.1.1",
      "hasInstallScript": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@fortawesome/free-brands-svg-icons": {
      "version": "6.0.0",
      "hasInstallScript": true,
      "license": "(CC-BY-4.0 AND MIT)",
      "dependencies": {
        "@fortawesome/fontawesome-common-types": "^0.3.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@fortawesome/free-regular-svg-icons": {
      "version": "6.0.0",
      "hasInstallScript": true,
      "license": "(CC-BY-4.0 AND MIT)",
      "dependencies": {
        "@fortawesome/fontawesome-common-types": "^0.3.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@fortawesome/free-solid-svg-icons": {
      "version": "6.0.0",
      "hasInstallScript": true,
      "license": "(CC-BY-4.0 AND MIT)",
      "dependencies": {
        "@fortawesome/fontawesome-common-types": "^0.3.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@fortawesome/react-fontawesome": {
      "version": "0.1.18",
      "license": "MIT",
      "dependencies": {
        "prop-types": "^15.8.1"
      },
      "peerDependencies": {
        "@fortawesome/fontawesome-svg-core": "~1 || ~6",
        "react": ">=16.x"
      }
    },
    "node_modules/@graphql-eslint/eslint-plugin": {
      "version": "3.10.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.16.7",
        "@graphql-tools/code-file-loader": "^7.2.14",
        "@graphql-tools/graphql-tag-pluck": "^7.2.6",
        "@graphql-tools/utils": "^8.6.9",
        "chalk": "^4.1.2",
        "debug": "^4.3.4",
        "fast-glob": "^3.2.11",
        "graphql-config": "^4.3.0",
        "graphql-depth-limit": "^1.1.0",
        "lodash.lowercase": "^4.3.0"
      },
      "peerDependencies": {
        "graphql": "^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0"
      }
    },
    "node_modules/@graphql-tools/batch-execute": {
      "version": "8.4.10",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@graphql-tools/utils": "8.6.13",
        "dataloader": "2.1.0",
        "tslib": "^2.4.0",
        "value-or-promise": "1.0.11"
      },
      "peerDependencies": {
        "graphql": "^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/@graphql-tools/code-file-loader": {
      "version": "7.2.18",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@graphql-tools/graphql-tag-pluck": "7.2.10",
        "@graphql-tools/utils": "8.6.13",
        "globby": "^11.0.3",
        "tslib": "^2.4.0",
        "unixify": "^1.0.0"
      },
      "peerDependencies": {
        "graphql": "^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/@graphql-tools/delegate": {
      "version": "8.7.11",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@graphql-tools/batch-execute": "8.4.10",
        "@graphql-tools/schema": "8.3.14",
        "@graphql-tools/utils": "8.6.13",
        "dataloader": "2.1.0",
        "graphql-executor": "0.0.23",
        "tslib": "^2.4.0",
        "value-or-promise": "1.0.11"
      },
      "peerDependencies": {
        "graphql": "^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/@graphql-tools/graphql-file-loader": {
      "version": "7.3.15",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@graphql-tools/import": "6.6.17",
        "@graphql-tools/utils": "8.6.13",
        "globby": "^11.0.3",
        "tslib": "^2.4.0",
        "unixify": "^1.0.0"
      },
      "peerDependencies": {
        "graphql": "^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/@graphql-tools/graphql-tag-pluck": {
      "version": "7.2.10",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.16.8",
        "@babel/traverse": "^7.16.8",
        "@babel/types": "^7.16.8",
        "@graphql-tools/utils": "8.6.13",
        "tslib": "^2.4.0"
      },
      "peerDependencies": {
        "graphql": "^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/@graphql-tools/import": {
      "version": "6.6.17",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@graphql-tools/utils": "8.6.13",
        "resolve-from": "5.0.0",
        "tslib": "^2.4.0"
      },
      "peerDependencies": {
        "graphql": "^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/@graphql-tools/json-file-loader": {
      "version": "7.3.15",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@graphql-tools/utils": "8.6.13",
        "globby": "^11.0.3",
        "tslib": "^2.4.0",
        "unixify": "^1.0.0"
      },
      "peerDependencies": {
        "graphql": "^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/@graphql-tools/load": {
      "version": "7.5.14",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@graphql-tools/schema": "8.3.14",
        "@graphql-tools/utils": "8.6.13",
        "p-limit": "3.1.0",
        "tslib": "^2.4.0"
      },
      "peerDependencies": {
        "graphql": "^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/@graphql-tools/merge": {
      "version": "8.2.14",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@graphql-tools/utils": "8.6.13",
        "tslib": "^2.4.0"
      },
      "peerDependencies": {
        "graphql": "^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/@graphql-tools/schema": {
      "version": "8.3.14",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@graphql-tools/merge": "8.2.14",
        "@graphql-tools/utils": "8.6.13",
        "tslib": "^2.4.0",
        "value-or-promise": "1.0.11"
      },
      "peerDependencies": {
        "graphql": "^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/@graphql-tools/url-loader": {
      "version": "7.9.25",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@graphql-tools/delegate": "8.7.11",
        "@graphql-tools/utils": "8.6.13",
        "@graphql-tools/wrap": "8.4.20",
        "@n1ru4l/graphql-live-query": "^0.9.0",
        "@types/ws": "^8.0.0",
        "cross-undici-fetch": "^0.4.0",
        "dset": "^3.1.0",
        "extract-files": "^11.0.0",
        "graphql-ws": "^5.4.1",
        "isomorphic-ws": "^4.0.1",
        "meros": "^1.1.4",
        "sync-fetch": "^0.4.0",
        "tslib": "^2.4.0",
        "value-or-promise": "^1.0.11",
        "ws": "^8.3.0"
      },
      "peerDependencies": {
        "graphql": "^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/@graphql-tools/utils": {
      "version": "8.6.13",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.4.0"
      },
      "peerDependencies": {
        "graphql": "^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/@graphql-tools/wrap": {
      "version": "8.4.20",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@graphql-tools/delegate": "8.7.11",
        "@graphql-tools/schema": "8.3.14",
        "@graphql-tools/utils": "8.6.13",
        "tslib": "^2.4.0",
        "value-or-promise": "1.0.11"
      },
      "peerDependencies": {
        "graphql": "^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/@humanwhocodes/config-array": {
      "version": "0.9.3",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanwhocodes/object-schema": "^1.2.1",
        "debug": "^4.1.1",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=10.10.0"
      }
    },
    "node_modules/@humanwhocodes/object-schema": {
      "version": "1.2.1",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/@iarna/toml": {
      "version": "2.2.5",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/argparse": {
      "version": "1.0.10",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/camelcase": {
      "version": "5.3.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/js-yaml": {
      "version": "3.14.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/core": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^27.5.1",
        "@jest/reporters": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.8.1",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^27.5.1",
        "jest-config": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-resolve-dependencies": "^27.5.1",
        "jest-runner": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "jest-watcher": "^27.5.1",
        "micromatch": "^4.0.4",
        "rimraf": "^3.0.0",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/environment": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/fake-timers": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@sinonjs/fake-timers": "^8.0.1",
        "@types/node": "*",
        "jest-message-util": "^27.5.1",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/globals": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/types": "^27.5.1",
        "expect": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/reporters": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.2",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^5.1.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-haste-map": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "slash": "^3.0.0",
        "source-map": "^0.6.0",
        "string-length": "^4.0.1",
        "terminal-link": "^2.0.0",
        "v8-to-istanbul": "^8.1.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/source-map": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9",
        "source-map": "^0.6.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/test-result": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/test-sequencer": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^27.5.1",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-runtime": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/transform": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.1.0",
        "@jest/types": "^27.5.1",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^1.4.0",
        "fast-json-stable-stringify": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "source-map": "^0.6.1",
        "write-file-atomic": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/types": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^16.0.0",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/set-array": "^1.0.0",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.0.5",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.1.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.4.11",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.13",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "node_modules/@mapbox/node-pre-gyp": {
      "version": "1.0.8",
      "license": "BSD-3-Clause",
      "dependencies": {
        "detect-libc": "^1.0.3",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.5",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      },
      "bin": {
        "node-pre-gyp": "bin/node-pre-gyp"
      }
    },
    "node_modules/@mapbox/node-pre-gyp/node_modules/semver": {
      "version": "7.3.5",
      "license": "ISC",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@n1ru4l/graphql-live-query": {
      "version": "0.9.0",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "graphql": "^15.4.0 || ^16.0.0"
      }
    },
    "node_modules/@next/env": {
      "version": "12.1.0",
      "license": "MIT"
    },
    "node_modules/@next/eslint-plugin-next": {
      "version": "12.1.6",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "glob": "7.1.7"
      }
    },
    "node_modules/@next/eslint-plugin-next/node_modules/glob": {
      "version": "7.1.7",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@next/swc-linux-x64-gnu": {
      "version": "12.1.0",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-musl": {
      "version": "12.1.0",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@prisma/client": {
      "version": "3.14.0",
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@prisma/engines-version": "3.14.0-36.2b0c12756921c891fec4f68d9444e18c7d5d4a6a"
      },
      "engines": {
        "node": ">=12.6"
      },
      "peerDependencies": {
        "prisma": "*"
      },
      "peerDependenciesMeta": {
        "prisma": {
          "optional": true
        }
      }
    },
    "node_modules/@prisma/engines": {
      "version": "3.14.0-36.2b0c12756921c891fec4f68d9444e18c7d5d4a6a",
      "devOptional": true,
      "hasInstallScript": true,
      "license": "Apache-2.0"
    },
    "node_modules/@prisma/engines-version": {
      "version": "3.14.0-36.2b0c12756921c891fec4f68d9444e18c7d5d4a6a",
      "license": "Apache-2.0"
    },
    "node_modules/@rushstack/eslint-patch": {
      "version": "1.1.3",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@sinonjs/commons": {
      "version": "1.8.3",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "type-detect": "4.0.8"
      }
    },
    "node_modules/@sinonjs/fake-timers": {
      "version": "8.1.0",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@sinonjs/commons": "^1.7.0"
      }
    },
    "node_modules/@swc/helpers": {
      "version": "0.4.12",
      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.4.12.tgz",
      "integrity": "sha512-R6RmwS9Dld5lNvwKlPn62+piU+WDG1sMfsnfJioXCciyko/gZ0DQ4Mqglhq1iGU1nQ/RcGkAwfMH+elMSkJH3Q==",
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@tootallnate/once": {
      "version": "1.1.2",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/@tsconfig/node10": {
      "version": "1.0.8",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node12": {
      "version": "1.0.9",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node14": {
      "version": "1.0.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node16": {
      "version": "1.0.2",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/babel__core": {
      "version": "7.1.18",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.6.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.14.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.3.0"
      }
    },
    "node_modules/@types/bn.js": {
      "version": "5.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/graceful-fs": {
      "version": "4.1.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.4",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/jest": {
      "version": "27.4.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "jest-matcher-utils": "^27.0.0",
        "pretty-format": "^27.0.0"
      }
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.11",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json5": {
      "version": "0.0.29",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "17.0.14",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/normalize-package-data": {
      "version": "2.4.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/parse-json": {
      "version": "4.0.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/pg": {
      "version": "8.6.5",
      "resolved": "https://registry.npmjs.org/@types/pg/-/pg-8.6.5.tgz",
      "integrity": "sha512-tOkGtAqRVkHa/PVZicq67zuujI4Oorfglsr2IbKofDwBSysnaqSx7W1mDqFqdkGE6Fbgh+PZAl0r/BWON/mozw==",
      "dev": true,
      "dependencies": {
        "@types/node": "*",
        "pg-protocol": "*",
        "pg-types": "^2.2.0"
      }
    },
    "node_modules/@types/prettier": {
      "version": "2.4.4",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.4",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "17.0.39",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/prop-types": "*",
        "@types/scheduler": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/scheduler": {
      "version": "0.16.2",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/stack-utils": {
      "version": "2.0.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/ws": {
      "version": "8.5.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/yargs": {
      "version": "16.0.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "20.2.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "5.28.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/scope-manager": "5.28.0",
        "@typescript-eslint/type-utils": "5.28.0",
        "@typescript-eslint/utils": "5.28.0",
        "debug": "^4.3.4",
        "functional-red-black-tree": "^1.0.1",
        "ignore": "^5.2.0",
        "regexpp": "^3.2.0",
        "semver": "^7.3.7",
        "tsutils": "^3.21.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^5.0.0",
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin/node_modules/semver": {
      "version": "7.3.7",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@typescript-eslint/experimental-utils": {
      "version": "5.28.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/utils": "5.28.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "5.28.0",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "@typescript-eslint/scope-manager": "5.28.0",
        "@typescript-eslint/types": "5.28.0",
        "@typescript-eslint/typescript-estree": "5.28.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "5.28.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "5.28.0",
        "@typescript-eslint/visitor-keys": "5.28.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "5.28.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/utils": "5.28.0",
        "debug": "^4.3.4",
        "tsutils": "^3.21.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "*"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "5.28.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "5.28.0",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "@typescript-eslint/types": "5.28.0",
        "@typescript-eslint/visitor-keys": "5.28.0",
        "debug": "^4.3.4",
        "globby": "^11.1.0",
        "is-glob": "^4.0.3",
        "semver": "^7.3.7",
        "tsutils": "^3.21.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/semver": {
      "version": "7.3.7",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "5.28.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.9",
        "@typescript-eslint/scope-manager": "5.28.0",
        "@typescript-eslint/types": "5.28.0",
        "@typescript-eslint/typescript-estree": "5.28.0",
        "eslint-scope": "^5.1.1",
        "eslint-utils": "^3.0.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "5.28.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "5.28.0",
        "eslint-visitor-keys": "^3.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/abab": {
      "version": "2.0.5",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "license": "ISC"
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/acorn": {
      "version": "8.7.1",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-globals": {
      "version": "6.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "acorn": "^7.1.1",
        "acorn-walk": "^7.1.1"
      }
    },
    "node_modules/acorn-globals/node_modules/acorn": {
      "version": "7.4.1",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/acorn-node": {
      "version": "1.8.2",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "acorn": "^7.0.0",
        "acorn-walk": "^7.0.0",
        "xtend": "^4.0.2"
      }
    },
    "node_modules/acorn-node/node_modules/acorn": {
      "version": "7.4.1",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "7.2.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "license": "MIT",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-escapes": {
      "version": "4.3.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.21.3"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-escapes/node_modules/type-fest": {
      "version": "0.21.3",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.2",
      "devOptional": true,
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/aproba": {
      "version": "2.0.0",
      "license": "ISC"
    },
    "node_modules/are-we-there-yet": {
      "version": "2.0.0",
      "license": "ISC",
      "dependencies": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/arg": {
      "version": "4.1.3",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/aria-query": {
      "version": "4.2.2",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@babel/runtime": "^7.10.2",
        "@babel/runtime-corejs3": "^7.10.2"
      },
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/array-includes": {
      "version": "3.1.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.4",
        "es-abstract": "^1.19.5",
        "get-intrinsic": "^1.1.1",
        "is-string": "^1.0.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-union": {
      "version": "2.1.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/array.prototype.flat": {
      "version": "1.2.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.19.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flatmap": {
      "version": "1.3.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.19.2",
        "es-shim-unscopables": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/arrify": {
      "version": "1.0.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ast-types-flow": {
      "version": "0.0.7",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/autoprefixer": {
      "version": "10.4.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.19.1",
        "caniuse-lite": "^1.0.30001297",
        "fraction.js": "^4.1.2",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.0.0",
        "postcss-value-parser": "^4.2.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/axe-core": {
      "version": "4.4.0",
      "dev": true,
      "license": "MPL-2.0",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/axobject-query": {
      "version": "2.2.0",
      "dev": true,
      "license": "Apache-2.0"
    },
    "node_modules/babel-jest": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^27.5.1",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.8.0"
      }
    },
    "node_modules/babel-plugin-istanbul": {
      "version": "6.1.1",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-jest-hoist": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.0.0",
        "@types/babel__traverse": "^7.0.6"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/babel-preset-current-node-syntax": {
      "version": "1.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.8.3",
        "@babel/plugin-syntax-import-meta": "^7.8.3",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.8.3",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.8.3",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-top-level-await": "^7.8.3"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/babel-preset-jest": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "babel-plugin-jest-hoist": "^27.5.1",
        "babel-preset-current-node-syntax": "^1.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "license": "MIT"
    },
    "node_modules/base-x": {
      "version": "3.0.9",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/binary-extensions": {
      "version": "2.2.0",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/bn.js": {
      "version": "5.2.0",
      "license": "MIT"
    },
    "node_modules/borsh": {
      "version": "0.7.0",
      "license": "Apache-2.0",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browser-process-hrtime": {
      "version": "1.0.0",
      "dev": true,
      "license": "BSD-2-Clause"
    },
    "node_modules/browserslist": {
      "version": "4.20.4",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001349",
        "electron-to-chromium": "^1.4.147",
        "escalade": "^3.1.1",
        "node-releases": "^2.0.5",
        "picocolors": "^1.0.0"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bs-logger": {
      "version": "0.2.6",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-json-stable-stringify": "2.x"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/bs58": {
      "version": "4.0.1",
      "license": "MIT",
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/bser": {
      "version": "2.1.1",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "node-int64": "^0.4.0"
      }
    },
    "node_modules/buffer": {
      "version": "5.7.1",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/buffer-writer": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/buffer-writer/-/buffer-writer-2.0.0.tgz",
      "integrity": "sha512-a7ZpuTZU1TRtnwyCNW3I5dc0wWNC3VR9S++Ewyk2HHZdrO3CQJqSpd+95Us590V6AL7JqUAH2IwZ/398PmNFgw==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/builtin-modules": {
      "version": "3.3.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/busboy": {
      "version": "1.6.0",
      "dev": true,
      "dependencies": {
        "streamsearch": "^1.1.0"
      },
      "engines": {
        "node": ">=10.16.0"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase": {
      "version": "6.3.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/camelcase-css": {
      "version": "2.0.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001357",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/canvas": {
      "version": "2.9.0",
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "@mapbox/node-pre-gyp": "^1.0.0",
        "nan": "^2.15.0",
        "simple-get": "^3.0.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/capability": {
      "version": "0.2.5",
      "license": "MIT"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/char-regex": {
      "version": "1.0.2",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/chokidar": {
      "version": "3.5.3",
      "devOptional": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://paulmillr.com/funding/"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ci-info": {
      "version": "3.3.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cjs-module-lexer": {
      "version": "1.2.2",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/clean-regexp": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^1.0.5"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/cliui": {
      "version": "7.0.4",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "node_modules/co": {
      "version": "4.6.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      }
    },
    "node_modules/collect-v8-coverage": {
      "version": "1.0.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/color-support": {
      "version": "1.1.3",
      "license": "ISC",
      "bin": {
        "color-support": "bin.js"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "3.0.2",
      "license": "MIT"
    },
    "node_modules/comment-parser": {
      "version": "1.3.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "license": "MIT"
    },
    "node_modules/confusing-browser-globals": {
      "version": "1.0.11",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/console-control-strings": {
      "version": "1.1.0",
      "license": "ISC"
    },
    "node_modules/convert-source-map": {
      "version": "1.8.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.1"
      }
    },
    "node_modules/convert-source-map/node_modules/safe-buffer": {
      "version": "5.1.2",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/core-js-pure": {
      "version": "3.21.0",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/cosmiconfig": {
      "version": "7.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.2.1",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.10.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/cosmiconfig-toml-loader": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@iarna/toml": "^2.2.5"
      }
    },
    "node_modules/create-eslint-index": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "lodash.get": "^4.3.0"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/create-require": {
      "version": "1.1.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/cross-undici-fetch": {
      "version": "0.4.7",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "abort-controller": "^3.0.0",
        "busboy": "^1.6.0",
        "form-data-encoder": "^1.7.1",
        "formdata-node": "^4.3.1",
        "node-fetch": "^2.6.7",
        "undici": "^5.1.0",
        "web-streams-polyfill": "^3.2.0"
      }
    },
    "node_modules/cssesc": {
      "version": "3.0.0",
      "dev": true,
      "license": "MIT",
      "bin": {
        "cssesc": "bin/cssesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/cssom": {
      "version": "0.4.4",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cssstyle": {
      "version": "2.3.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cssom": "~0.3.6"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cssstyle/node_modules/cssom": {
      "version": "0.3.8",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/csstype": {
      "version": "3.0.10",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/damerau-levenshtein": {
      "version": "1.0.8",
      "dev": true,
      "license": "BSD-2-Clause"
    },
    "node_modules/data-urls": {
      "version": "2.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "abab": "^2.0.3",
        "whatwg-mimetype": "^2.3.0",
        "whatwg-url": "^8.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/dataloader": {
      "version": "2.1.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/dayjs": {
      "version": "1.10.7",
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.3.4",
      "license": "MIT",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js": {
      "version": "10.3.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/decompress-response": {
      "version": "4.2.1",
      "license": "MIT",
      "dependencies": {
        "mimic-response": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dedent": {
      "version": "0.7.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/deepmerge": {
      "version": "4.2.2",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/define-properties": {
      "version": "1.1.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/defined": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/delegates": {
      "version": "1.0.0",
      "license": "MIT"
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/detect-libc": {
      "version": "1.0.3",
      "license": "Apache-2.0",
      "bin": {
        "detect-libc": "bin/detect-libc.js"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/detect-newline": {
      "version": "3.1.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/detective": {
      "version": "5.2.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "acorn-node": "^1.6.1",
        "defined": "^1.0.0",
        "minimist": "^1.1.1"
      },
      "bin": {
        "detective": "bin/detective.js"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/didyoumean": {
      "version": "1.2.2",
      "dev": true,
      "license": "Apache-2.0"
    },
    "node_modules/diff": {
      "version": "4.0.2",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.3.1"
      }
    },
    "node_modules/diff-sequences": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/dir-glob": {
      "version": "3.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-type": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dlv": {
      "version": "1.1.3",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/doctrine": {
      "version": "2.1.0",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/domexception": {
      "version": "2.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "webidl-conversions": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/domexception/node_modules/webidl-conversions": {
      "version": "5.0.0",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dotenv": {
      "version": "16.0.0",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/dotenv-cli": {
      "version": "5.0.0",
      "license": "MIT",
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "dotenv": "^16.0.0",
        "dotenv-expand": "^8.0.1",
        "minimist": "^1.2.5"
      },
      "bin": {
        "dotenv": "cli.js"
      }
    },
    "node_modules/dotenv-expand": {
      "version": "8.0.1",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/dset": {
      "version": "3.1.2",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.4.161",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/emittery": {
      "version": "0.8.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/enhance-visitors": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.13.1"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/error-polyfill": {
      "version": "0.1.3",
      "license": "MIT",
      "dependencies": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "node_modules/es-abstract": {
      "version": "1.20.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "es-to-primitive": "^1.2.1",
        "function-bind": "^1.1.1",
        "function.prototype.name": "^1.1.5",
        "get-intrinsic": "^1.1.1",
        "get-symbol-description": "^1.0.0",
        "has": "^1.0.3",
        "has-property-descriptors": "^1.0.0",
        "has-symbols": "^1.0.3",
        "internal-slot": "^1.0.3",
        "is-callable": "^1.2.4",
        "is-negative-zero": "^2.0.2",
        "is-regex": "^1.1.4",
        "is-shared-array-buffer": "^1.0.2",
        "is-string": "^1.0.7",
        "is-weakref": "^1.0.2",
        "object-inspect": "^1.12.0",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.2",
        "regexp.prototype.flags": "^1.4.3",
        "string.prototype.trimend": "^1.0.5",
        "string.prototype.trimstart": "^1.0.5",
        "unbox-primitive": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-shim-unscopables": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has": "^1.0.3"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.2.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.1.4",
        "is-date-object": "^1.0.1",
        "is-symbol": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/escalade": {
      "version": "3.1.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/escodegen": {
      "version": "2.0.0",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esprima": "^4.0.1",
        "estraverse": "^5.2.0",
        "esutils": "^2.0.2",
        "optionator": "^0.8.1"
      },
      "bin": {
        "escodegen": "bin/escodegen.js",
        "esgenerate": "bin/esgenerate.js"
      },
      "engines": {
        "node": ">=6.0"
      },
      "optionalDependencies": {
        "source-map": "~0.6.1"
      }
    },
    "node_modules/escodegen/node_modules/levn": {
      "version": "0.3.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/escodegen/node_modules/optionator": {
      "version": "0.8.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "~0.1.3",
        "fast-levenshtein": "~2.0.6",
        "levn": "~0.3.0",
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2",
        "word-wrap": "~1.2.3"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint": {
      "version": "8.18.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint/eslintrc": "^1.3.0",
        "@humanwhocodes/config-array": "^0.9.2",
        "ajv": "^6.10.0",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "doctrine": "^3.0.0",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^7.1.1",
        "eslint-utils": "^3.0.0",
        "eslint-visitor-keys": "^3.3.0",
        "espree": "^9.3.2",
        "esquery": "^1.4.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^6.0.1",
        "functional-red-black-tree": "^1.0.1",
        "glob-parent": "^6.0.1",
        "globals": "^13.15.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.0.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "js-yaml": "^4.1.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.4.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.1",
        "regexpp": "^3.2.0",
        "strip-ansi": "^6.0.1",
        "strip-json-comments": "^3.1.0",
        "text-table": "^0.2.0",
        "v8-compile-cache": "^2.0.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-ast-utils": {
      "version": "1.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "lodash.get": "^4.4.2",
        "lodash.zip": "^4.2.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-config-airbnb": {
      "version": "19.0.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-config-airbnb-base": "^15.0.0",
        "object.assign": "^4.1.2",
        "object.entries": "^1.1.5"
      },
      "engines": {
        "node": "^10.12.0 || ^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "peerDependencies": {
        "eslint": "^7.32.0 || ^8.2.0",
        "eslint-plugin-import": "^2.25.3",
        "eslint-plugin-jsx-a11y": "^6.5.1",
        "eslint-plugin-react": "^7.28.0",
        "eslint-plugin-react-hooks": "^4.3.0"
      }
    },
    "node_modules/eslint-config-airbnb-base": {
      "version": "15.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "confusing-browser-globals": "^1.0.10",
        "object.assign": "^4.1.2",
        "object.entries": "^1.1.5",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      },
      "peerDependencies": {
        "eslint": "^7.32.0 || ^8.2.0",
        "eslint-plugin-import": "^2.25.2"
      }
    },
    "node_modules/eslint-config-airbnb-typescript-prettier": {
      "version": "5.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/eslint-plugin": "^5.6.0",
        "@typescript-eslint/parser": "^5.6.0",
        "eslint-config-airbnb": "^19.0.2",
        "eslint-config-prettier": "^6.15.0",
        "eslint-plugin-import": "^2.25.3",
        "eslint-plugin-jsx-a11y": "^6.5.1",
        "eslint-plugin-prettier": "^3.1.4",
        "eslint-plugin-react": "^7.27.1",
        "eslint-plugin-react-hooks": "^4.3.0"
      },
      "engines": {
        "node": "^10.12.0 || ^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "peerDependencies": {
        "eslint": "^7.32.0 || ^8.2.0",
        "prettier": "^1.18.2 || ^2.0.0",
        "typescript": ">=3.3.1"
      }
    },
    "node_modules/eslint-config-canonical": {
      "version": "35.0.1",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/core": "^7.17.9",
        "@babel/eslint-parser": "^7.17.0",
        "@babel/eslint-plugin": "^7.17.7",
        "@graphql-eslint/eslint-plugin": "^3.10.2",
        "@next/eslint-plugin-next": "^12.1.4",
        "@rushstack/eslint-patch": "^1.1.2",
        "@typescript-eslint/eslint-plugin": "^5.19.0",
        "@typescript-eslint/parser": "^5.19.0",
        "eslint-config-prettier": "^8.5.0",
        "eslint-plugin-ava": "^13.2.0",
        "eslint-plugin-canonical": "^3.1.0",
        "eslint-plugin-cypress": "^2.12.1",
        "eslint-plugin-eslint-comments": "^3.2.0",
        "eslint-plugin-flowtype": "^8.0.3",
        "eslint-plugin-fp": "^2.3.0",
        "eslint-plugin-import": "^2.26.0",
        "eslint-plugin-jest": "^26.1.4",
        "eslint-plugin-jsdoc": "^39.2.0",
        "eslint-plugin-jsonc": "^2.2.1",
        "eslint-plugin-jsx-a11y": "^6.5.1",
        "eslint-plugin-lodash": "^7.4.0",
        "eslint-plugin-mocha": "^10.0.4",
        "eslint-plugin-modules-newline": "0.0.6",
        "eslint-plugin-node": "^11.1.0",
        "eslint-plugin-react": "^7.29.4",
        "eslint-plugin-react-hooks": "^4.4.0",
        "eslint-plugin-typescript-sort-keys": "^2.1.0",
        "eslint-plugin-unicorn": "^42.0.0",
        "eslint-plugin-yml": "^0.14.0",
        "ramda": "^0.28.0",
        "yaml-eslint-parser": "^0.5.0"
      },
      "engines": {
        "node": ">=16.0.0"
      },
      "peerDependencies": {
        "eslint": "^8.13.0"
      }
    },
    "node_modules/eslint-config-canonical/node_modules/eslint-config-prettier": {
      "version": "8.5.0",
      "dev": true,
      "license": "MIT",
      "bin": {
        "eslint-config-prettier": "bin/cli.js"
      },
      "peerDependencies": {
        "eslint": ">=7.0.0"
      }
    },
    "node_modules/eslint-config-near": {
      "version": "1.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-config-canonical": "^35.0.1"
      },
      "peerDependencies": {
        "eslint": "^8.17.0"
      }
    },
    "node_modules/eslint-config-prettier": {
      "version": "6.15.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "get-stdin": "^6.0.0"
      },
      "bin": {
        "eslint-config-prettier-check": "bin/cli.js"
      },
      "peerDependencies": {
        "eslint": ">=3.14.1"
      }
    },
    "node_modules/eslint-import-resolver-node": {
      "version": "0.3.6",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7",
        "resolve": "^1.20.0"
      }
    },
    "node_modules/eslint-import-resolver-node/node_modules/debug": {
      "version": "3.2.7",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-import-resolver-node/node_modules/ms": {
      "version": "2.1.3",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/eslint-module-utils": {
      "version": "2.7.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7",
        "find-up": "^2.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-module-utils/node_modules/debug": {
      "version": "3.2.7",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-module-utils/node_modules/find-up": {
      "version": "2.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-module-utils/node_modules/locate-path": {
      "version": "2.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^2.0.0",
        "path-exists": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-module-utils/node_modules/ms": {
      "version": "2.1.3",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/eslint-module-utils/node_modules/p-limit": {
      "version": "1.3.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-try": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-module-utils/node_modules/p-locate": {
      "version": "2.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^1.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-module-utils/node_modules/p-try": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-module-utils/node_modules/path-exists": {
      "version": "3.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-plugin-ava": {
      "version": "13.2.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "enhance-visitors": "^1.0.0",
        "eslint-utils": "^3.0.0",
        "espree": "^9.0.0",
        "espurify": "^2.1.1",
        "import-modules": "^2.1.0",
        "micro-spelling-correcter": "^1.1.1",
        "pkg-dir": "^5.0.0",
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=12.22 <13 || >=14.17 <15 || >=16.4"
      },
      "peerDependencies": {
        "eslint": ">=7.22.0"
      }
    },
    "node_modules/eslint-plugin-ava/node_modules/find-up": {
      "version": "5.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint-plugin-ava/node_modules/locate-path": {
      "version": "6.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint-plugin-ava/node_modules/p-locate": {
      "version": "5.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint-plugin-ava/node_modules/pkg-dir": {
      "version": "5.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "find-up": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/eslint-plugin-canonical": {
      "version": "3.1.0",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "is-get-set-prop": "^1.0.0",
        "is-js-type": "^2.0.0",
        "is-obj-prop": "^1.0.0",
        "is-proto-prop": "^2.0.0",
        "lodash": "^4.17.21",
        "natural-compare": "^1.4.0"
      },
      "engines": {
        "node": ">=16.0.0"
      },
      "peerDependencies": {
        "eslint": "^8.15.0"
      }
    },
    "node_modules/eslint-plugin-cypress": {
      "version": "2.12.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "globals": "^11.12.0"
      },
      "peerDependencies": {
        "eslint": ">= 3.2.1"
      }
    },
    "node_modules/eslint-plugin-es": {
      "version": "3.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-utils": "^2.0.0",
        "regexpp": "^3.0.0"
      },
      "engines": {
        "node": ">=8.10.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/mysticatea"
      },
      "peerDependencies": {
        "eslint": ">=4.19.1"
      }
    },
    "node_modules/eslint-plugin-es/node_modules/eslint-utils": {
      "version": "2.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^1.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/mysticatea"
      }
    },
    "node_modules/eslint-plugin-es/node_modules/eslint-visitor-keys": {
      "version": "1.3.0",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-plugin-eslint-comments": {
      "version": "3.2.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^1.0.5",
        "ignore": "^5.0.5"
      },
      "engines": {
        "node": ">=6.5.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/mysticatea"
      },
      "peerDependencies": {
        "eslint": ">=4.19.1"
      }
    },
    "node_modules/eslint-plugin-flowtype": {
      "version": "8.0.3",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "lodash": "^4.17.21",
        "string-natural-compare": "^3.0.1"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "@babel/plugin-syntax-flow": "^7.14.5",
        "@babel/plugin-transform-react-jsx": "^7.14.9",
        "eslint": "^8.1.0"
      }
    },
    "node_modules/eslint-plugin-fp": {
      "version": "2.3.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "create-eslint-index": "^1.0.0",
        "eslint-ast-utils": "^1.0.0",
        "lodash": "^4.13.1",
        "req-all": "^0.1.0"
      },
      "engines": {
        "node": ">=4.0.0"
      },
      "peerDependencies": {
        "eslint": ">=3"
      }
    },
    "node_modules/eslint-plugin-import": {
      "version": "2.26.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.4",
        "array.prototype.flat": "^1.2.5",
        "debug": "^2.6.9",
        "doctrine": "^2.1.0",
        "eslint-import-resolver-node": "^0.3.6",
        "eslint-module-utils": "^2.7.3",
        "has": "^1.0.3",
        "is-core-module": "^2.8.1",
        "is-glob": "^4.0.3",
        "minimatch": "^3.1.2",
        "object.values": "^1.1.5",
        "resolve": "^1.22.0",
        "tsconfig-paths": "^3.14.1"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/debug": {
      "version": "2.6.9",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/ms": {
      "version": "2.0.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/eslint-plugin-jest": {
      "version": "26.5.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/utils": "^5.10.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "peerDependencies": {
        "@typescript-eslint/eslint-plugin": "^5.0.0",
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      },
      "peerDependenciesMeta": {
        "@typescript-eslint/eslint-plugin": {
          "optional": true
        },
        "jest": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-jsdoc": {
      "version": "39.3.3",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@es-joy/jsdoccomment": "~0.31.0",
        "comment-parser": "1.3.1",
        "debug": "^4.3.4",
        "escape-string-regexp": "^4.0.0",
        "esquery": "^1.4.0",
        "semver": "^7.3.7",
        "spdx-expression-parse": "^3.0.1"
      },
      "engines": {
        "node": "^14 || ^16 || ^17 || ^18"
      },
      "peerDependencies": {
        "eslint": "^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/eslint-plugin-jsdoc/node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint-plugin-jsdoc/node_modules/semver": {
      "version": "7.3.7",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/eslint-plugin-jsonc": {
      "version": "2.3.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-utils": "^3.0.0",
        "jsonc-eslint-parser": "^2.0.4",
        "natural-compare": "^1.4.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ota-meshi"
      },
      "peerDependencies": {
        "eslint": ">=6.0.0"
      }
    },
    "node_modules/eslint-plugin-jsx-a11y": {
      "version": "6.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.16.3",
        "aria-query": "^4.2.2",
        "array-includes": "^3.1.4",
        "ast-types-flow": "^0.0.7",
        "axe-core": "^4.3.5",
        "axobject-query": "^2.2.0",
        "damerau-levenshtein": "^1.0.7",
        "emoji-regex": "^9.2.2",
        "has": "^1.0.3",
        "jsx-ast-utils": "^3.2.1",
        "language-tags": "^1.0.5",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=4.0"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8"
      }
    },
    "node_modules/eslint-plugin-lodash": {
      "version": "7.4.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.17.21"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": ">=2"
      }
    },
    "node_modules/eslint-plugin-mocha": {
      "version": "10.0.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-utils": "^3.0.0",
        "rambda": "^7.1.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "eslint": ">=7.0.0"
      }
    },
    "node_modules/eslint-plugin-modules-newline": {
      "version": "0.0.6",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "requireindex": "~1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-plugin-node": {
      "version": "11.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-plugin-es": "^3.0.0",
        "eslint-utils": "^2.0.0",
        "ignore": "^5.1.1",
        "minimatch": "^3.0.4",
        "resolve": "^1.10.1",
        "semver": "^6.1.0"
      },
      "engines": {
        "node": ">=8.10.0"
      },
      "peerDependencies": {
        "eslint": ">=5.16.0"
      }
    },
    "node_modules/eslint-plugin-node/node_modules/eslint-utils": {
      "version": "2.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^1.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/mysticatea"
      }
    },
    "node_modules/eslint-plugin-node/node_modules/eslint-visitor-keys": {
      "version": "1.3.0",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-plugin-node/node_modules/is-core-module": {
      "version": "2.9.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/eslint-plugin-node/node_modules/resolve": {
      "version": "1.22.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.9.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/eslint-plugin-prettier": {
      "version": "3.4.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prettier-linter-helpers": "^1.0.0"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "peerDependencies": {
        "eslint": ">=5.0.0",
        "prettier": ">=1.13.0"
      },
      "peerDependenciesMeta": {
        "eslint-config-prettier": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react": {
      "version": "7.30.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.5",
        "array.prototype.flatmap": "^1.3.0",
        "doctrine": "^2.1.0",
        "estraverse": "^5.3.0",
        "jsx-ast-utils": "^2.4.1 || ^3.0.0",
        "minimatch": "^3.1.2",
        "object.entries": "^1.1.5",
        "object.fromentries": "^2.0.5",
        "object.hasown": "^1.1.1",
        "object.values": "^1.1.5",
        "prop-types": "^15.8.1",
        "resolve": "^2.0.0-next.3",
        "semver": "^6.3.0",
        "string.prototype.matchall": "^4.0.7"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8"
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "4.6.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/resolve": {
      "version": "2.0.0-next.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.2.0",
        "path-parse": "^1.0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/eslint-plugin-typescript-sort-keys": {
      "version": "2.1.0",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@typescript-eslint/experimental-utils": "^5.0.0",
        "json-schema": "^0.4.0",
        "natural-compare-lite": "^1.4.0"
      },
      "engines": {
        "node": "10 - 12 || >= 13.9"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^1 || ^2 || ^3 || ^4 || ^5",
        "eslint": "^5 || ^6 || ^7 || ^8",
        "typescript": "^3 || ^4"
      }
    },
    "node_modules/eslint-plugin-unicorn": {
      "version": "42.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.15.7",
        "ci-info": "^3.3.0",
        "clean-regexp": "^1.0.0",
        "eslint-utils": "^3.0.0",
        "esquery": "^1.4.0",
        "indent-string": "^4.0.0",
        "is-builtin-module": "^3.1.0",
        "lodash": "^4.17.21",
        "pluralize": "^8.0.0",
        "read-pkg-up": "^7.0.1",
        "regexp-tree": "^0.1.24",
        "safe-regex": "^2.1.1",
        "semver": "^7.3.5",
        "strip-indent": "^3.0.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/eslint-plugin-unicorn?sponsor=1"
      },
      "peerDependencies": {
        "eslint": ">=8.8.0"
      }
    },
    "node_modules/eslint-plugin-unicorn/node_modules/ci-info": {
      "version": "3.3.2",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/eslint-plugin-unicorn/node_modules/semver": {
      "version": "7.3.5",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/eslint-plugin-yml": {
      "version": "0.14.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.3.2",
        "lodash": "^4.17.21",
        "natural-compare": "^1.4.0",
        "yaml-eslint-parser": "^0.5.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ota-meshi"
      },
      "peerDependencies": {
        "eslint": ">=6.0.0"
      }
    },
    "node_modules/eslint-rule-composer": {
      "version": "0.3.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/eslint-scope": {
      "version": "5.1.1",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^4.1.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/eslint-scope/node_modules/estraverse": {
      "version": "4.3.0",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/eslint-utils": {
      "version": "3.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^2.0.0"
      },
      "engines": {
        "node": "^10.0.0 || ^12.0.0 || >= 14.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/mysticatea"
      },
      "peerDependencies": {
        "eslint": ">=5"
      }
    },
    "node_modules/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "2.1.0",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "3.3.0",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/eslint/node_modules/doctrine": {
      "version": "3.0.0",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/eslint/node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/eslint-scope": {
      "version": "7.1.1",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/eslint/node_modules/glob-parent": {
      "version": "6.0.2",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/eslint/node_modules/globals": {
      "version": "13.15.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/espree": {
      "version": "9.3.2",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.7.1",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^3.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "dev": true,
      "license": "BSD-2-Clause",
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/espurify": {
      "version": "2.1.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/esquery": {
      "version": "1.4.0",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/exit": {
      "version": "0.1.2",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/expect": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/extract-files": {
      "version": "11.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.20 || >= 14.13"
      },
      "funding": {
        "url": "https://github.com/sponsors/jaydenseric"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-diff": {
      "version": "1.2.0",
      "dev": true,
      "license": "Apache-2.0"
    },
    "node_modules/fast-glob": {
      "version": "3.2.11",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fastq": {
      "version": "1.13.0",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/fb-watchman": {
      "version": "2.0.1",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "bser": "2.1.1"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "6.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^3.0.4"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "4.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/flat-cache": {
      "version": "3.0.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.1.0",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/flatted": {
      "version": "3.2.5",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/form-data": {
      "version": "3.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/form-data-encoder": {
      "version": "1.7.2",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/formdata-node": {
      "version": "4.3.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "node-domexception": "1.0.0",
        "web-streams-polyfill": "4.0.0-beta.1"
      },
      "engines": {
        "node": ">= 12.20"
      }
    },
    "node_modules/formdata-node/node_modules/web-streams-polyfill": {
      "version": "4.0.0-beta.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/fraction.js": {
      "version": "4.1.2",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://www.patreon.com/infusion"
      }
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "license": "ISC",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "license": "ISC"
    },
    "node_modules/function-bind": {
      "version": "1.1.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.19.0",
        "functions-have-names": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functional-red-black-tree": {
      "version": "1.0.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gauge": {
      "version": "3.0.2",
      "license": "ISC",
      "dependencies": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.1.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-symbols": "^1.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-package-type": {
      "version": "0.1.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/get-set-props": {
      "version": "0.1.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/get-stdin": {
      "version": "6.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "get-intrinsic": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/glob": {
      "version": "7.2.0",
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "devOptional": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/globals": {
      "version": "11.12.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/globby": {
      "version": "11.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-union": "^2.1.0",
        "dir-glob": "^3.0.1",
        "fast-glob": "^3.2.9",
        "ignore": "^5.2.0",
        "merge2": "^1.4.1",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.9",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/graphql": {
      "version": "16.5.0",
      "resolved": "https://registry.npmjs.org/graphql/-/graphql-16.5.0.tgz",
      "integrity": "sha512-qbHgh8Ix+j/qY+a/ZcJnFQ+j8ezakqPiHwPiZhV/3PgGlgf96QMBB5/f2rkiC9sgLoy/xvT6TSiaf2nTHJh5iA==",
      "dev": true,
      "peer": true,
      "engines": {
        "node": "^12.22.0 || ^14.16.0 || ^16.0.0 || >=17.0.0"
      }
    },
    "node_modules/graphql-config": {
      "version": "4.3.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@endemolshinegroup/cosmiconfig-typescript-loader": "3.0.2",
        "@graphql-tools/graphql-file-loader": "^7.3.7",
        "@graphql-tools/json-file-loader": "^7.3.7",
        "@graphql-tools/load": "^7.5.5",
        "@graphql-tools/merge": "^8.2.6",
        "@graphql-tools/url-loader": "^7.9.7",
        "@graphql-tools/utils": "^8.6.5",
        "cosmiconfig": "7.0.1",
        "cosmiconfig-toml-loader": "1.0.0",
        "minimatch": "4.2.1",
        "string-env-interpolation": "1.0.1"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0"
      }
    },
    "node_modules/graphql-config/node_modules/minimatch": {
      "version": "4.2.1",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/graphql-depth-limit": {
      "version": "1.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "arrify": "^1.0.1"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "peerDependencies": {
        "graphql": "*"
      }
    },
    "node_modules/graphql-executor": {
      "version": "0.0.23",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.16.0 || >=16.0.0"
      },
      "peerDependencies": {
        "graphql": "^15.0.0 || ^16.0.0"
      }
    },
    "node_modules/graphql-ws": {
      "version": "5.9.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "graphql": ">=0.11 <=16"
      }
    },
    "node_modules/has": {
      "version": "1.0.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/has-bigints": {
      "version": "1.0.2",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.1.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-unicode": {
      "version": "2.0.1",
      "license": "ISC"
    },
    "node_modules/hosted-git-info": {
      "version": "2.8.9",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/html-encoding-sniffer": {
      "version": "2.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "whatwg-encoding": "^1.0.5"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/http-errors": {
      "version": "1.8.1",
      "license": "MIT",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-errors/node_modules/depd": {
      "version": "1.1.2",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-proxy-agent": {
      "version": "4.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@tootallnate/once": "1",
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.0",
      "license": "MIT",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/ignore": {
      "version": "5.2.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/immutable": {
      "version": "4.0.0",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/import-fresh": {
      "version": "3.3.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/import-fresh/node_modules/resolve-from": {
      "version": "4.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/import-local": {
      "version": "3.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/import-modules": {
      "version": "2.1.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/indent-string": {
      "version": "4.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "license": "ISC"
    },
    "node_modules/internal-slot": {
      "version": "1.0.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.1.0",
        "has": "^1.0.3",
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/is-bigint": {
      "version": "1.0.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.1.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-builtin-module": {
      "version": "3.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "builtin-modules": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.4",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.8.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.0.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-fn": {
      "version": "2.1.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-get-set-prop": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "get-set-props": "^0.1.0",
        "lowercase-keys": "^1.0.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-js-type": {
      "version": "2.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "js-types": "^1.0.0"
      }
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.2",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.0.7",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-obj-prop": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "lowercase-keys": "^1.0.0",
        "obj-props": "^1.0.0"
      }
    },
    "node_modules/is-potential-custom-element-name": {
      "version": "1.0.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/is-proto-prop": {
      "version": "2.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "lowercase-keys": "^1.0.0",
        "proto-props": "^2.0.0"
      }
    },
    "node_modules/is-regex": {
      "version": "1.1.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-string": {
      "version": "1.0.7",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.0.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typedarray": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/is-weakref": {
      "version": "1.0.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "license": "ISC"
    },
    "node_modules/isomorphic-ws": {
      "version": "4.0.1",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "ws": "*"
      }
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.0",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument": {
      "version": "5.1.0",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.0",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^3.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "4.0.1",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-reports": {
      "version": "3.1.4",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/core": "^27.5.1",
        "import-local": "^3.0.2",
        "jest-cli": "^27.5.1"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-changed-files": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "execa": "^5.0.0",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-circus": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^0.7.0",
        "expect": "^27.5.1",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-cli": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/core": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "import-local": "^3.0.2",
        "jest-config": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "prompts": "^2.0.1",
        "yargs": "^16.2.0"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.8.0",
        "@jest/test-sequencer": "^27.5.1",
        "@jest/types": "^27.5.1",
        "babel-jest": "^27.5.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.1",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^27.5.1",
        "jest-environment-jsdom": "^27.5.1",
        "jest-environment-node": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-jasmine2": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-runner": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/jest-diff": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "diff-sequences": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-docblock": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "detect-newline": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-each": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "jest-get-type": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-environment-jsdom": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1",
        "jsdom": "^16.6.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-environment-node": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-get-type": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-haste-map": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/graceful-fs": "^4.1.2",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^27.5.1",
        "jest-serializer": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "micromatch": "^4.0.4",
        "walker": "^1.0.7"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      }
    },
    "node_modules/jest-jasmine2": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/source-map": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "expect": "^27.5.1",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-leak-detector": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-matcher-utils": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "jest-diff": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-message-util": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^27.5.1",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-mock": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/node": "*"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-mock-extended": {
      "version": "2.0.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ts-essentials": "^7.0.3"
      },
      "peerDependencies": {
        "jest": "^24.0.0 || ^25.0.0 || ^26.0.0 || ^27.0.0",
        "typescript": "^3.0.0 || ^4.0.0"
      }
    },
    "node_modules/jest-pnp-resolver": {
      "version": "1.2.2",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "peerDependencies": {
        "jest-resolve": "*"
      },
      "peerDependenciesMeta": {
        "jest-resolve": {
          "optional": true
        }
      }
    },
    "node_modules/jest-regex-util": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-resolve": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "resolve": "^1.20.0",
        "resolve.exports": "^1.1.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-resolve-dependencies": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-snapshot": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-runner": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^27.5.1",
        "@jest/environment": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.8.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^27.5.1",
        "jest-environment-jsdom": "^27.5.1",
        "jest-environment-node": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-leak-detector": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "source-map-support": "^0.5.6",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-runtime": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/globals": "^27.5.1",
        "@jest/source-map": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "execa": "^5.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-mock": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-runtime/node_modules/strip-bom": {
      "version": "4.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-serializer": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "graceful-fs": "^4.2.9"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-snapshot": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.7.2",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/traverse": "^7.7.2",
        "@babel/types": "^7.0.0",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/babel__traverse": "^7.0.4",
        "@types/prettier": "^2.1.5",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^27.5.1",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "natural-compare": "^1.4.0",
        "pretty-format": "^27.5.1",
        "semver": "^7.3.2"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-snapshot/node_modules/semver": {
      "version": "7.3.5",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jest-util": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-validate": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^27.5.1",
        "leven": "^3.1.0",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-watcher": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "jest-util": "^27.5.1",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-worker": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/js-sha256": {
      "version": "0.9.0",
      "license": "MIT"
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "license": "MIT"
    },
    "node_modules/js-types": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsdoc-type-pratt-parser": {
      "version": "3.1.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/jsdom": {
      "version": "16.7.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "abab": "^2.0.5",
        "acorn": "^8.2.4",
        "acorn-globals": "^6.0.0",
        "cssom": "^0.4.4",
        "cssstyle": "^2.3.0",
        "data-urls": "^2.0.0",
        "decimal.js": "^10.2.1",
        "domexception": "^2.0.1",
        "escodegen": "^2.0.0",
        "form-data": "^3.0.0",
        "html-encoding-sniffer": "^2.0.1",
        "http-proxy-agent": "^4.0.1",
        "https-proxy-agent": "^5.0.0",
        "is-potential-custom-element-name": "^1.0.1",
        "nwsapi": "^2.2.0",
        "parse5": "6.0.1",
        "saxes": "^5.0.1",
        "symbol-tree": "^3.2.4",
        "tough-cookie": "^4.0.0",
        "w3c-hr-time": "^1.0.2",
        "w3c-xmlserializer": "^2.0.0",
        "webidl-conversions": "^6.1.0",
        "whatwg-encoding": "^1.0.5",
        "whatwg-mimetype": "^2.3.0",
        "whatwg-url": "^8.5.0",
        "ws": "^7.4.6",
        "xml-name-validator": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "canvas": "^2.5.0"
      },
      "peerDependenciesMeta": {
        "canvas": {
          "optional": true
        }
      }
    },
    "node_modules/jsdom/node_modules/ws": {
      "version": "7.5.7",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.3.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/jsesc": {
      "version": "2.5.2",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema": {
      "version": "0.4.0",
      "dev": true,
      "license": "(AFL-2.1 OR BSD-3-Clause)"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.1",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonc-eslint-parser": {
      "version": "2.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "acorn": "^8.5.0",
        "eslint-visitor-keys": "^3.0.0",
        "espree": "^9.0.0",
        "semver": "^7.3.5"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ota-meshi"
      }
    },
    "node_modules/jsonc-eslint-parser/node_modules/semver": {
      "version": "7.3.5",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jsx-ast-utils": {
      "version": "3.2.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.3",
        "object.assign": "^4.1.2"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/kleur": {
      "version": "3.0.3",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/language-subtag-registry": {
      "version": "0.3.21",
      "dev": true,
      "license": "ODC-By-1.0"
    },
    "node_modules/language-tags": {
      "version": "1.0.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "language-subtag-registry": "~0.3.2"
      }
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/levn/node_modules/prelude-ls": {
      "version": "1.2.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/levn/node_modules/type-check": {
      "version": "0.4.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lilconfig": {
      "version": "2.0.4",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/locate-path": {
      "version": "5.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.get": {
      "version": "4.4.2",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.lowercase": {
      "version": "4.3.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.memoize": {
      "version": "4.1.2",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.zip": {
      "version": "4.2.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lowercase-keys": {
      "version": "1.0.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "license": "MIT",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-error": {
      "version": "1.3.6",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/makeerror": {
      "version": "1.0.12",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "tmpl": "1.0.5"
      }
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/meros": {
      "version": "1.2.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "peerDependencies": {
        "@types/node": ">=12"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        }
      }
    },
    "node_modules/micro-spelling-correcter": {
      "version": "1.1.1",
      "dev": true,
      "license": "CC0-1.0"
    },
    "node_modules/micromatch": {
      "version": "4.0.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.1",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime-db": {
      "version": "1.51.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.34",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.51.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/mimic-response": {
      "version": "2.1.0",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/min-indent": {
      "version": "1.0.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.6",
      "license": "MIT"
    },
    "node_modules/minipass": {
      "version": "3.1.6",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "license": "MIT",
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/mkdirp": {
      "version": "1.0.4",
      "license": "MIT",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ms": {
      "version": "2.1.2",
      "license": "MIT"
    },
    "node_modules/mustache": {
      "version": "4.2.0",
      "license": "MIT",
      "bin": {
        "mustache": "bin/mustache"
      }
    },
    "node_modules/nan": {
      "version": "2.15.0",
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.2.0",
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/natural-compare-lite": {
      "version": "1.4.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/near-api-js": {
      "version": "0.44.2",
      "resolved": "git+ssh://git@github.com/ryancwalsh/near-api-js.git#ce779105e3923d6679fe8a82d2ce70c2fa87b49d",
      "license": "(MIT AND Apache-2.0)",
      "dependencies": {
        "bn.js": "5.2.0",
        "borsh": "^0.7.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/next": {
      "version": "12.1.0",
      "license": "MIT",
      "dependencies": {
        "@next/env": "12.1.0",
        "caniuse-lite": "^1.0.30001283",
        "postcss": "8.4.5",
        "styled-jsx": "5.0.0",
        "use-subscription": "1.5.1"
      },
      "bin": {
        "next": "dist/bin/next"
      },
      "engines": {
        "node": ">=12.22.0"
      },
      "optionalDependencies": {
        "@next/swc-android-arm64": "12.1.0",
        "@next/swc-darwin-arm64": "12.1.0",
        "@next/swc-darwin-x64": "12.1.0",
        "@next/swc-linux-arm-gnueabihf": "12.1.0",
        "@next/swc-linux-arm64-gnu": "12.1.0",
        "@next/swc-linux-arm64-musl": "12.1.0",
        "@next/swc-linux-x64-gnu": "12.1.0",
        "@next/swc-linux-x64-musl": "12.1.0",
        "@next/swc-win32-arm64-msvc": "12.1.0",
        "@next/swc-win32-ia32-msvc": "12.1.0",
        "@next/swc-win32-x64-msvc": "12.1.0"
      },
      "peerDependencies": {
        "fibers": ">= 3.1.0",
        "node-sass": "^6.0.0 || ^7.0.0",
        "react": "^17.0.2 || ^18.0.0-0",
        "react-dom": "^17.0.2 || ^18.0.0-0",
        "sass": "^1.3.0"
      },
      "peerDependenciesMeta": {
        "fibers": {
          "optional": true
        },
        "node-sass": {
          "optional": true
        },
        "sass": {
          "optional": true
        }
      }
    },
    "node_modules/next-ssl-redirect-middleware": {
      "version": "0.1.3",
      "license": "MIT"
    },
    "node_modules/next/node_modules/postcss": {
      "version": "8.4.5",
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.1.30",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      }
    },
    "node_modules/node-domexception": {
      "version": "1.0.0",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/jimmywarting"
        },
        {
          "type": "github",
          "url": "https://paypal.me/jimmywarting"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=10.5.0"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.6.7",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-fetch/node_modules/tr46": {
      "version": "0.0.3",
      "license": "MIT"
    },
    "node_modules/node-fetch/node_modules/webidl-conversions": {
      "version": "3.0.1",
      "license": "BSD-2-Clause"
    },
    "node_modules/node-fetch/node_modules/whatwg-url": {
      "version": "5.0.0",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/node-int64": {
      "version": "0.4.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.5",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nopt": {
      "version": "5.0.0",
      "license": "ISC",
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/normalize-package-data": {
      "version": "2.5.0",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "hosted-git-info": "^2.1.4",
        "resolve": "^1.10.0",
        "semver": "2 || 3 || 4 || 5",
        "validate-npm-package-license": "^3.0.1"
      }
    },
    "node_modules/normalize-package-data/node_modules/is-core-module": {
      "version": "2.9.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/normalize-package-data/node_modules/resolve": {
      "version": "1.22.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.9.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/normalize-package-data/node_modules/semver": {
      "version": "5.7.1",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/npmlog": {
      "version": "5.0.1",
      "license": "ISC",
      "dependencies": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "node_modules/nwsapi": {
      "version": "2.2.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/o3": {
      "version": "1.0.3",
      "license": "MIT",
      "dependencies": {
        "capability": "^0.2.5"
      }
    },
    "node_modules/obj-props": {
      "version": "1.4.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "2.2.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.12.0",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.0",
        "define-properties": "^1.1.3",
        "has-symbols": "^1.0.1",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.entries": {
      "version": "1.1.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.19.1"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.fromentries": {
      "version": "2.0.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.19.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.hasown": {
      "version": "1.1.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.1.4",
        "es-abstract": "^1.19.5"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.values": {
      "version": "1.1.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.19.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.3"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/optionator/node_modules/prelude-ls": {
      "version": "1.2.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/optionator/node_modules/type-check": {
      "version": "0.4.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "4.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-locate/node_modules/p-limit": {
      "version": "2.3.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/packet-reader": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/packet-reader/-/packet-reader-1.0.0.tgz",
      "integrity": "sha512-HAKu/fG3HpHFO0AA8WE8q2g+gBJaZ9MG7fcKk+IJPLTGAD6Psw4443l+9DGRbOIh3/aXr7Phy0TjilYivJo5XQ=="
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parse5": {
      "version": "6.0.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/path-type": {
      "version": "4.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pg": {
      "version": "8.8.0",
      "resolved": "https://registry.npmjs.org/pg/-/pg-8.8.0.tgz",
      "integrity": "sha512-UXYN0ziKj+AeNNP7VDMwrehpACThH7LUl/p8TDFpEUuSejCUIwGSfxpHsPvtM6/WXFy6SU4E5RG4IJV/TZAGjw==",
      "dependencies": {
        "buffer-writer": "2.0.0",
        "packet-reader": "1.0.0",
        "pg-connection-string": "^2.5.0",
        "pg-pool": "^3.5.2",
        "pg-protocol": "^1.5.0",
        "pg-types": "^2.1.0",
        "pgpass": "1.x"
      },
      "engines": {
        "node": ">= 8.0.0"
      },
      "peerDependencies": {
        "pg-native": ">=3.0.1"
      },
      "peerDependenciesMeta": {
        "pg-native": {
          "optional": true
        }
      }
    },
    "node_modules/pg-connection-string": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.5.0.tgz",
      "integrity": "sha512-r5o/V/ORTA6TmUnyWZR9nCj1klXCO2CEKNRlVuJptZe85QuhFayC7WeMic7ndayT5IRIR0S0xFxFi2ousartlQ=="
    },
    "node_modules/pg-int8": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz",
      "integrity": "sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/pg-pool": {
      "version": "3.5.2",
      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.5.2.tgz",
      "integrity": "sha512-His3Fh17Z4eg7oANLob6ZvH8xIVen3phEZh2QuyrIl4dQSDVEabNducv6ysROKpDNPSD+12tONZVWfSgMvDD9w==",
      "peerDependencies": {
        "pg": ">=8.0"
      }
    },
    "node_modules/pg-protocol": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.5.0.tgz",
      "integrity": "sha512-muRttij7H8TqRNu/DxrAJQITO4Ac7RmX3Klyr/9mJEOBeIpgnF8f9jAfRz5d3XwQZl5qBjF9gLsUtMPJE0vezQ=="
    },
    "node_modules/pg-types": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz",
      "integrity": "sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==",
      "dependencies": {
        "pg-int8": "1.0.1",
        "postgres-array": "~2.0.0",
        "postgres-bytea": "~1.0.0",
        "postgres-date": "~1.0.4",
        "postgres-interval": "^1.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/pgpass": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz",
      "integrity": "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==",
      "dependencies": {
        "split2": "^4.1.0"
      }
    },
    "node_modules/picocolors": {
      "version": "1.0.0",
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.5",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pluralize": {
      "version": "8.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss": {
      "version": "8.4.6",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.2.0",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      }
    },
    "node_modules/postcss-js": {
      "version": "4.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "camelcase-css": "^2.0.1"
      },
      "engines": {
        "node": "^12 || ^14 || >= 16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": "^8.3.3"
      }
    },
    "node_modules/postcss-load-config": {
      "version": "3.1.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "lilconfig": "^2.0.4",
        "yaml": "^1.10.2"
      },
      "engines": {
        "node": ">= 10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/postcss-nested": {
      "version": "5.0.6",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.6"
      },
      "engines": {
        "node": ">=12.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": "^8.2.14"
      }
    },
    "node_modules/postcss-selector-parser": {
      "version": "6.0.9",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/postgres-array": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz",
      "integrity": "sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postgres-bytea": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz",
      "integrity": "sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postgres-date": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz",
      "integrity": "sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postgres-interval": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz",
      "integrity": "sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==",
      "dependencies": {
        "xtend": "^4.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.1.2",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prettier": {
      "version": "2.5.1",
      "dev": true,
      "license": "MIT",
      "bin": {
        "prettier": "bin-prettier.js"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/prettier-linter-helpers": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-diff": "^1.1.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/pretty-format": {
      "version": "27.5.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1",
        "ansi-styles": "^5.0.0",
        "react-is": "^17.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/pretty-format/node_modules/react-is": {
      "version": "17.0.2",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/prisma": {
      "version": "3.14.0",
      "devOptional": true,
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@prisma/engines": "3.14.0-36.2b0c12756921c891fec4f68d9444e18c7d5d4a6a"
      },
      "bin": {
        "prisma": "build/index.js",
        "prisma2": "build/index.js"
      },
      "engines": {
        "node": ">=12.6"
      }
    },
    "node_modules/prompts": {
      "version": "2.4.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/proto-props": {
      "version": "2.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/psl": {
      "version": "1.8.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.1.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/quick-lru": {
      "version": "5.1.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/rambda": {
      "version": "7.1.4",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/ramda": {
      "version": "0.28.0",
      "dev": true,
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/ramda"
      }
    },
    "node_modules/react": {
      "version": "17.0.2",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "17.0.2",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1",
        "scheduler": "^0.20.2"
      },
      "peerDependencies": {
        "react": "17.0.2"
      }
    },
    "node_modules/react-is": {
      "version": "16.13.1",
      "license": "MIT"
    },
    "node_modules/read-pkg": {
      "version": "5.2.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/normalize-package-data": "^2.4.0",
        "normalize-package-data": "^2.5.0",
        "parse-json": "^5.0.0",
        "type-fest": "^0.6.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/read-pkg-up": {
      "version": "7.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "find-up": "^4.1.0",
        "read-pkg": "^5.2.0",
        "type-fest": "^0.8.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/read-pkg-up/node_modules/type-fest": {
      "version": "0.8.1",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/read-pkg/node_modules/type-fest": {
      "version": "0.6.0",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.0",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/regenerator-runtime": {
      "version": "0.13.9",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/regexp-tree": {
      "version": "0.1.24",
      "dev": true,
      "license": "MIT",
      "bin": {
        "regexp-tree": "bin/regexp-tree"
      }
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.4.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "functions-have-names": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexpp": {
      "version": "3.2.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/mysticatea"
      }
    },
    "node_modules/remove-trailing-separator": {
      "version": "1.1.0",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/req-all": {
      "version": "0.1.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/requireindex": {
      "version": "1.1.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.5"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.8.1",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "5.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve.exports": {
      "version": "1.1.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/reusify": {
      "version": "1.0.4",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-regex": {
      "version": "2.1.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "regexp-tree": "~0.1.1"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/sass": {
      "version": "1.49.7",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "chokidar": ">=3.0.0 <4.0.0",
        "immutable": "^4.0.0",
        "source-map-js": ">=0.6.2 <2.0.0"
      },
      "bin": {
        "sass": "sass.js"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/saxes": {
      "version": "5.0.1",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "xmlchars": "^2.2.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/scheduler": {
      "version": "0.20.2",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1"
      }
    },
    "node_modules/semver": {
      "version": "6.3.0",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/set-blocking": {
      "version": "2.0.0",
      "license": "ISC"
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "license": "ISC"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.0.4",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "license": "ISC"
    },
    "node_modules/simple-concat": {
      "version": "1.0.1",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/simple-get": {
      "version": "3.1.1",
      "license": "MIT",
      "dependencies": {
        "decompress-response": "^4.2.0",
        "once": "^1.3.1",
        "simple-concat": "^1.0.0"
      }
    },
    "node_modules/sisteransi": {
      "version": "1.0.5",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.0.2",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.21",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/spdx-correct": {
      "version": "3.1.1",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "spdx-expression-parse": "^3.0.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "node_modules/spdx-exceptions": {
      "version": "2.3.0",
      "dev": true,
      "license": "CC-BY-3.0"
    },
    "node_modules/spdx-expression-parse": {
      "version": "3.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "spdx-exceptions": "^2.1.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "node_modules/spdx-license-ids": {
      "version": "3.0.11",
      "dev": true,
      "license": "CC0-1.0"
    },
    "node_modules/split2": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/split2/-/split2-4.1.0.tgz",
      "integrity": "sha512-VBiJxFkxiXRlUIeyMQi8s4hgvKCSjtknJv/LVYbrgALPwf5zSKmEwV9Lst25AkvMDnvxODugjdl6KZgwKM1WYQ==",
      "engines": {
        "node": ">= 10.x"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/stack-utils": {
      "version": "2.0.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/stack-utils/node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/statuses": {
      "version": "1.5.0",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/streamsearch": {
      "version": "1.1.0",
      "dev": true,
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-env-interpolation": {
      "version": "1.0.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/string-length": {
      "version": "4.0.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/string-natural-compare": {
      "version": "3.0.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width/node_modules/emoji-regex": {
      "version": "8.0.0",
      "license": "MIT"
    },
    "node_modules/string.prototype.matchall": {
      "version": "4.0.7",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.19.1",
        "get-intrinsic": "^1.1.1",
        "has-symbols": "^1.0.3",
        "internal-slot": "^1.0.3",
        "regexp.prototype.flags": "^1.4.1",
        "side-channel": "^1.0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.4",
        "es-abstract": "^1.19.5"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.4",
        "es-abstract": "^1.19.5"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "3.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-indent": {
      "version": "3.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "min-indent": "^1.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/styled-jsx": {
      "version": "5.0.0",
      "license": "MIT",
      "engines": {
        "node": ">= 12.0.0"
      },
      "peerDependencies": {
        "react": ">= 16.8.0 || 17.x.x || 18.x.x"
      },
      "peerDependenciesMeta": {
        "@babel/core": {
          "optional": true
        },
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-hyperlinks": {
      "version": "2.2.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0",
        "supports-color": "^7.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/symbol-tree": {
      "version": "3.2.4",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/sync-fetch": {
      "version": "0.4.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "buffer": "^5.7.1",
        "node-fetch": "^2.6.1"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/tailwindcss": {
      "version": "3.0.18",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "arg": "^5.0.1",
        "chalk": "^4.1.2",
        "chokidar": "^3.5.3",
        "color-name": "^1.1.4",
        "cosmiconfig": "^7.0.1",
        "detective": "^5.2.0",
        "didyoumean": "^1.2.2",
        "dlv": "^1.1.3",
        "fast-glob": "^3.2.11",
        "glob-parent": "^6.0.2",
        "is-glob": "^4.0.3",
        "normalize-path": "^3.0.0",
        "object-hash": "^2.2.0",
        "postcss-js": "^4.0.0",
        "postcss-load-config": "^3.1.0",
        "postcss-nested": "5.0.6",
        "postcss-selector-parser": "^6.0.9",
        "postcss-value-parser": "^4.2.0",
        "quick-lru": "^5.1.1",
        "resolve": "^1.21.0"
      },
      "bin": {
        "tailwind": "lib/cli.js",
        "tailwindcss": "lib/cli.js"
      },
      "engines": {
        "node": ">=12.13.0"
      },
      "peerDependencies": {
        "autoprefixer": "^10.0.2",
        "postcss": "^8.0.9"
      }
    },
    "node_modules/tailwindcss/node_modules/arg": {
      "version": "5.0.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tailwindcss/node_modules/glob-parent": {
      "version": "6.0.2",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/tar": {
      "version": "6.1.11",
      "license": "ISC",
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^3.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/terminal-link": {
      "version": "2.1.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-escapes": "^4.2.1",
        "supports-hyperlinks": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/test-exclude": {
      "version": "6.0.0",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/text-encoding-utf-8": {
      "version": "1.0.2"
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/throat": {
      "version": "6.0.1",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tmpl": {
      "version": "1.0.5",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/to-fast-properties": {
      "version": "2.0.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tough-cookie": {
      "version": "4.0.0",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "psl": "^1.1.33",
        "punycode": "^2.1.1",
        "universalify": "^0.1.2"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tr46": {
      "version": "2.1.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ts-essentials": {
      "version": "7.0.3",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "typescript": ">=3.7.0"
      }
    },
    "node_modules/ts-jest": {
      "version": "27.1.3",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "bs-logger": "0.x",
        "fast-json-stable-stringify": "2.x",
        "jest-util": "^27.0.0",
        "json5": "2.x",
        "lodash.memoize": "4.x",
        "make-error": "1.x",
        "semver": "7.x",
        "yargs-parser": "20.x"
      },
      "bin": {
        "ts-jest": "cli.js"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "@babel/core": ">=7.0.0-beta.0 <8",
        "@types/jest": "^27.0.0",
        "babel-jest": ">=27.0.0 <28",
        "esbuild": "~0.14.0",
        "jest": "^27.0.0",
        "typescript": ">=3.8 <5.0"
      },
      "peerDependenciesMeta": {
        "@babel/core": {
          "optional": true
        },
        "@types/jest": {
          "optional": true
        },
        "babel-jest": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        }
      }
    },
    "node_modules/ts-jest/node_modules/semver": {
      "version": "7.3.5",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ts-node": {
      "version": "10.7.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@cspotcode/source-map-support": "0.7.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.0",
        "yn": "3.1.1"
      },
      "bin": {
        "ts-node": "dist/bin.js",
        "ts-node-cwd": "dist/bin-cwd.js",
        "ts-node-esm": "dist/bin-esm.js",
        "ts-node-script": "dist/bin-script.js",
        "ts-node-transpile-only": "dist/bin-transpile.js",
        "ts-script": "dist/bin-script-deprecated.js"
      },
      "peerDependencies": {
        "@swc/core": ">=1.2.50",
        "@swc/wasm": ">=1.2.50",
        "@types/node": "*",
        "typescript": ">=2.7"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "@swc/wasm": {
          "optional": true
        }
      }
    },
    "node_modules/ts-node/node_modules/acorn-walk": {
      "version": "8.2.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/tsconfig-paths": {
      "version": "3.14.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/json5": "^0.0.29",
        "json5": "^1.0.1",
        "minimist": "^1.2.6",
        "strip-bom": "^3.0.0"
      }
    },
    "node_modules/tsconfig-paths/node_modules/json5": {
      "version": "1.0.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.0"
      },
      "bin": {
        "json5": "lib/cli.js"
      }
    },
    "node_modules/tslib": {
      "version": "2.4.0",
      "license": "0BSD"
    },
    "node_modules/tsutils": {
      "version": "3.21.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "tslib": "^1.8.1"
      },
      "engines": {
        "node": ">= 6"
      },
      "peerDependencies": {
        "typescript": ">=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta"
      }
    },
    "node_modules/tsutils/node_modules/tslib": {
      "version": "1.14.1",
      "dev": true,
      "license": "0BSD"
    },
    "node_modules/tweetnacl": {
      "version": "1.0.3",
      "license": "Unlicense"
    },
    "node_modules/type-check": {
      "version": "0.3.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-detect": {
      "version": "4.0.8",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-fest": {
      "version": "0.20.2",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/typedarray-to-buffer": {
      "version": "3.1.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-typedarray": "^1.0.0"
      }
    },
    "node_modules/typescript": {
      "version": "4.6.2",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=4.2.0"
      }
    },
    "node_modules/u3": {
      "version": "0.1.1",
      "license": "MIT"
    },
    "node_modules/unbox-primitive": {
      "version": "1.0.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.0.3",
        "which-boxed-primitive": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/undici": {
      "version": "5.5.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.18"
      }
    },
    "node_modules/universalify": {
      "version": "0.1.2",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/unixify": {
      "version": "1.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "normalize-path": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/unixify/node_modules/normalize-path": {
      "version": "2.1.1",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "remove-trailing-separator": "^1.0.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/use-subscription": {
      "version": "1.5.1",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4.1.1"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "license": "MIT"
    },
    "node_modules/v8-compile-cache": {
      "version": "2.3.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/v8-compile-cache-lib": {
      "version": "3.0.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/v8-to-istanbul": {
      "version": "8.1.1",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^1.6.0",
        "source-map": "^0.7.3"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/v8-to-istanbul/node_modules/source-map": {
      "version": "0.7.3",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/validate-npm-package-license": {
      "version": "3.0.4",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "spdx-correct": "^3.0.0",
        "spdx-expression-parse": "^3.0.0"
      }
    },
    "node_modules/value-or-promise": {
      "version": "1.0.11",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/w3c-hr-time": {
      "version": "1.0.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "browser-process-hrtime": "^1.0.0"
      }
    },
    "node_modules/w3c-xmlserializer": {
      "version": "2.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "xml-name-validator": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/wait-port": {
      "version": "0.2.9",
      "license": "MIT",
      "dependencies": {
        "chalk": "^2.4.2",
        "commander": "^3.0.2",
        "debug": "^4.1.1"
      },
      "bin": {
        "wait-port": "bin/wait-port.js"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wait-port/node_modules/ansi-styles": {
      "version": "3.2.1",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/wait-port/node_modules/chalk": {
      "version": "2.4.2",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/wait-port/node_modules/color-convert": {
      "version": "1.9.3",
      "license": "MIT",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/wait-port/node_modules/color-name": {
      "version": "1.1.3",
      "license": "MIT"
    },
    "node_modules/wait-port/node_modules/has-flag": {
      "version": "3.0.0",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/wait-port/node_modules/supports-color": {
      "version": "5.5.0",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/walker": {
      "version": "1.0.8",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "makeerror": "1.0.12"
      }
    },
    "node_modules/web-streams-polyfill": {
      "version": "3.2.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "6.1.0",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=10.4"
      }
    },
    "node_modules/whatwg-encoding": {
      "version": "1.0.5",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "iconv-lite": "0.4.24"
      }
    },
    "node_modules/whatwg-mimetype": {
      "version": "2.3.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/whatwg-url": {
      "version": "8.7.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.7.0",
        "tr46": "^2.1.0",
        "webidl-conversions": "^6.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.0.2",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.0.1",
        "is-boolean-object": "^1.1.0",
        "is-number-object": "^1.0.4",
        "is-string": "^1.0.5",
        "is-symbol": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/wide-align": {
      "version": "1.1.5",
      "license": "ISC",
      "dependencies": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.3",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "license": "ISC"
    },
    "node_modules/write-file-atomic": {
      "version": "3.0.3",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "is-typedarray": "^1.0.0",
        "signal-exit": "^3.0.2",
        "typedarray-to-buffer": "^3.1.5"
      }
    },
    "node_modules/ws": {
      "version": "8.8.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xml-name-validator": {
      "version": "3.0.0",
      "dev": true,
      "license": "Apache-2.0"
    },
    "node_modules/xmlchars": {
      "version": "2.2.0",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "license": "MIT",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "license": "ISC"
    },
    "node_modules/yaml": {
      "version": "1.10.2",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/yaml-eslint-parser": {
      "version": "0.5.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.0.0",
        "lodash": "^4.17.21",
        "yaml": "^1.10.2"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/yargs": {
      "version": "16.2.0",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.0",
        "y18n": "^5.0.5",
        "yargs-parser": "^20.2.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yargs-parser": {
      "version": "20.2.9",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yn": {
      "version": "3.1.1",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/zod": {
      "version": "3.19.1",
      "resolved": "https://registry.npmjs.org/zod/-/zod-3.19.1.tgz",
      "integrity": "sha512-LYjZsEDhCdYET9ikFu6dVPGp2YH9DegXjdJToSzD9rO6fy4qiRYFoyEYwps88OseJlPyl2NOe2iJuhEhL7IpEA==",
      "funding": {
        "url": "https://github.com/sponsors/colinhacks"
      }
    },
    "node_modules/zod-validation-error": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/zod-validation-error/-/zod-validation-error-0.2.1.tgz",
      "integrity": "sha512-zGg6P5EHi5V0dvyEeC8HBZd2pzp7QDKTngkSWgWunljrY+0SHkHyjI519D+u8/37BHkGHAFseWgnZ2Uq8LNFKg==",
      "dependencies": {
        "@swc/helpers": "^0.4.11"
      },
      "engines": {
        "node": "^14.17 || >=16.0.0"
      },
      "peerDependencies": {
        "zod": "^3.18.0"
      }
    }
  },
  "dependencies": {
    "@ampproject/remapping": {
      "version": "2.1.2",
      "dev": true,
      "requires": {
        "@jridgewell/trace-mapping": "^0.3.0"
      }
    },
    "@babel/code-frame": {
      "version": "7.16.7",
      "dev": true,
      "requires": {
        "@babel/highlight": "^7.16.7"
      }
    },
    "@babel/compat-data": {
      "version": "7.18.5",
      "dev": true
    },
    "@babel/core": {
      "version": "7.18.5",
      "dev": true,
      "requires": {
        "@ampproject/remapping": "^2.1.0",
        "@babel/code-frame": "^7.16.7",
        "@babel/generator": "^7.18.2",
        "@babel/helper-compilation-targets": "^7.18.2",
        "@babel/helper-module-transforms": "^7.18.0",
        "@babel/helpers": "^7.18.2",
        "@babel/parser": "^7.18.5",
        "@babel/template": "^7.16.7",
        "@babel/traverse": "^7.18.5",
        "@babel/types": "^7.18.4",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.1",
        "semver": "^6.3.0"
      }
    },
    "@babel/eslint-parser": {
      "version": "7.18.2",
      "dev": true,
      "requires": {
        "eslint-scope": "^5.1.1",
        "eslint-visitor-keys": "^2.1.0",
        "semver": "^6.3.0"
      },
      "dependencies": {
        "eslint-visitor-keys": {
          "version": "2.1.0",
          "dev": true
        }
      }
    },
    "@babel/eslint-plugin": {
      "version": "7.17.7",
      "dev": true,
      "requires": {
        "eslint-rule-composer": "^0.3.0"
      }
    },
    "@babel/generator": {
      "version": "7.18.2",
      "dev": true,
      "requires": {
        "@babel/types": "^7.18.2",
        "@jridgewell/gen-mapping": "^0.3.0",
        "jsesc": "^2.5.1"
      }
    },
    "@babel/helper-annotate-as-pure": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.18.6.tgz",
      "integrity": "sha512-duORpUiYrEpzKIop6iNbjnwKLAKnJ47csTyRACyEmWj0QdUrm5aqNJGHSSEQSUAvNW0ojX0dOmK9dZduvkfeXA==",
      "dev": true,
      "peer": true,
      "requires": {
        "@babel/types": "^7.18.6"
      }
    },
    "@babel/helper-compilation-targets": {
      "version": "7.18.2",
      "dev": true,
      "requires": {
        "@babel/compat-data": "^7.17.10",
        "@babel/helper-validator-option": "^7.16.7",
        "browserslist": "^4.20.2",
        "semver": "^6.3.0"
      }
    },
    "@babel/helper-environment-visitor": {
      "version": "7.18.2",
      "dev": true
    },
    "@babel/helper-function-name": {
      "version": "7.17.9",
      "dev": true,
      "requires": {
        "@babel/template": "^7.16.7",
        "@babel/types": "^7.17.0"
      }
    },
    "@babel/helper-hoist-variables": {
      "version": "7.16.7",
      "dev": true,
      "requires": {
        "@babel/types": "^7.16.7"
      }
    },
    "@babel/helper-module-imports": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.18.6.tgz",
      "integrity": "sha512-0NFvs3VkuSYbFi1x2Vd6tKrywq+z/cLeYC/RJNFrIX/30Bf5aiGYbtvGXolEktzJH8o5E5KJ3tT+nkxuuZFVlA==",
      "dev": true,
      "requires": {
        "@babel/types": "^7.18.6"
      }
    },
    "@babel/helper-module-transforms": {
      "version": "7.18.0",
      "dev": true,
      "requires": {
        "@babel/helper-environment-visitor": "^7.16.7",
        "@babel/helper-module-imports": "^7.16.7",
        "@babel/helper-simple-access": "^7.17.7",
        "@babel/helper-split-export-declaration": "^7.16.7",
        "@babel/helper-validator-identifier": "^7.16.7",
        "@babel/template": "^7.16.7",
        "@babel/traverse": "^7.18.0",
        "@babel/types": "^7.18.0"
      }
    },
    "@babel/helper-plugin-utils": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.18.9.tgz",
      "integrity": "sha512-aBXPT3bmtLryXaoJLyYPXPlSD4p1ld9aYeR+sJNOZjJJGiOpb+fKfh3NkcCu7J54nUJwCERPBExCCpyCOHnu/w==",
      "dev": true
    },
    "@babel/helper-simple-access": {
      "version": "7.18.2",
      "dev": true,
      "requires": {
        "@babel/types": "^7.18.2"
      }
    },
    "@babel/helper-split-export-declaration": {
      "version": "7.16.7",
      "dev": true,
      "requires": {
        "@babel/types": "^7.16.7"
      }
    },
    "@babel/helper-validator-identifier": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.18.6.tgz",
      "integrity": "sha512-MmetCkz9ej86nJQV+sFCxoGGrUbU3q02kgLciwkrt9QqEB7cP39oKEY0PakknEO0Gu20SskMRi+AYZ3b1TpN9g==",
      "dev": true
    },
    "@babel/helper-validator-option": {
      "version": "7.16.7",
      "dev": true
    },
    "@babel/helpers": {
      "version": "7.18.2",
      "dev": true,
      "requires": {
        "@babel/template": "^7.16.7",
        "@babel/traverse": "^7.18.2",
        "@babel/types": "^7.18.2"
      }
    },
    "@babel/highlight": {
      "version": "7.16.10",
      "dev": true,
      "requires": {
        "@babel/helper-validator-identifier": "^7.16.7",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "3.2.1",
          "dev": true,
          "requires": {
            "color-convert": "^1.9.0"
          }
        },
        "chalk": {
          "version": "2.4.2",
          "dev": true,
          "requires": {
            "ansi-styles": "^3.2.1",
            "escape-string-regexp": "^1.0.5",
            "supports-color": "^5.3.0"
          }
        },
        "color-convert": {
          "version": "1.9.3",
          "dev": true,
          "requires": {
            "color-name": "1.1.3"
          }
        },
        "color-name": {
          "version": "1.1.3",
          "dev": true
        },
        "has-flag": {
          "version": "3.0.0",
          "dev": true
        },
        "supports-color": {
          "version": "5.5.0",
          "dev": true,
          "requires": {
            "has-flag": "^3.0.0"
          }
        }
      }
    },
    "@babel/parser": {
      "version": "7.18.5",
      "dev": true
    },
    "@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "dev": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "dev": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "dev": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.12.13"
      }
    },
    "@babel/plugin-syntax-flow": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-flow/-/plugin-syntax-flow-7.18.6.tgz",
      "integrity": "sha512-LUbR+KNTBWCUAqRG9ex5Gnzu2IOkt8jRJbHHXFT9q+L9zm7M/QQbEqXyw1n1pohYvOyWC8CjeyjrSaIwiYjK7A==",
      "dev": true,
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.18.6"
      }
    },
    "@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "dev": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "dev": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-jsx": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.18.6.tgz",
      "integrity": "sha512-6mmljtAedFGTWu2p/8WIORGwy+61PLgOMPOdazc7YoJ9ZCWUyFy3A6CpPkRKLKD1ToAesxX8KGEViAiLo9N+7Q==",
      "dev": true,
      "peer": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.18.6"
      }
    },
    "@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "dev": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "dev": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "dev": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.10.4"
      }
    },
    "@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "dev": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "dev": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "dev": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.8.0"
      }
    },
    "@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "dev": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.14.5"
      }
    },
    "@babel/plugin-syntax-typescript": {
      "version": "7.16.7",
      "dev": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.16.7"
      }
    },
    "@babel/plugin-transform-react-jsx": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx/-/plugin-transform-react-jsx-7.18.6.tgz",
      "integrity": "sha512-Mz7xMPxoy9kPS/JScj6fJs03TZ/fZ1dJPlMjRAgTaxaS0fUBk8FV/A2rRgfPsVCZqALNwMexD+0Uaf5zlcKPpw==",
      "dev": true,
      "peer": true,
      "requires": {
        "@babel/helper-annotate-as-pure": "^7.18.6",
        "@babel/helper-module-imports": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-jsx": "^7.18.6",
        "@babel/types": "^7.18.6"
      }
    },
    "@babel/runtime": {
      "version": "7.17.0",
      "dev": true,
      "requires": {
        "regenerator-runtime": "^0.13.4"
      }
    },
    "@babel/runtime-corejs3": {
      "version": "7.17.0",
      "dev": true,
      "requires": {
        "core-js-pure": "^3.20.2",
        "regenerator-runtime": "^0.13.4"
      }
    },
    "@babel/template": {
      "version": "7.16.7",
      "dev": true,
      "requires": {
        "@babel/code-frame": "^7.16.7",
        "@babel/parser": "^7.16.7",
        "@babel/types": "^7.16.7"
      }
    },
    "@babel/traverse": {
      "version": "7.18.5",
      "dev": true,
      "requires": {
        "@babel/code-frame": "^7.16.7",
        "@babel/generator": "^7.18.2",
        "@babel/helper-environment-visitor": "^7.18.2",
        "@babel/helper-function-name": "^7.17.9",
        "@babel/helper-hoist-variables": "^7.16.7",
        "@babel/helper-split-export-declaration": "^7.16.7",
        "@babel/parser": "^7.18.5",
        "@babel/types": "^7.18.4",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      }
    },
    "@babel/types": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.18.9.tgz",
      "integrity": "sha512-WwMLAg2MvJmt/rKEVQBBhIVffMmnilX4oe0sRe7iPOHIGsqpruFHHdrfj4O1CMMtgMtCU4oPafZjDPCRgO57Wg==",
      "dev": true,
      "requires": {
        "@babel/helper-validator-identifier": "^7.18.6",
        "to-fast-properties": "^2.0.0"
      }
    },
    "@bcoe/v8-coverage": {
      "version": "0.2.3",
      "dev": true
    },
    "@cspotcode/source-map-consumer": {
      "version": "0.8.0",
      "dev": true
    },
    "@cspotcode/source-map-support": {
      "version": "0.7.0",
      "dev": true,
      "requires": {
        "@cspotcode/source-map-consumer": "0.8.0"
      }
    },
    "@endemolshinegroup/cosmiconfig-typescript-loader": {
      "version": "3.0.2",
      "dev": true,
      "requires": {
        "lodash.get": "^4",
        "make-error": "^1",
        "ts-node": "^9",
        "tslib": "^2"
      },
      "dependencies": {
        "ts-node": {
          "version": "9.1.1",
          "dev": true,
          "requires": {
            "arg": "^4.1.0",
            "create-require": "^1.1.0",
            "diff": "^4.0.1",
            "make-error": "^1.1.1",
            "source-map-support": "^0.5.17",
            "yn": "3.1.1"
          }
        }
      }
    },
    "@es-joy/jsdoccomment": {
      "version": "0.31.0",
      "dev": true,
      "requires": {
        "comment-parser": "1.3.1",
        "esquery": "^1.4.0",
        "jsdoc-type-pratt-parser": "~3.1.0"
      }
    },
    "@eslint/eslintrc": {
      "version": "1.3.0",
      "dev": true,
      "requires": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^9.3.2",
        "globals": "^13.15.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "dependencies": {
        "globals": {
          "version": "13.15.0",
          "dev": true,
          "requires": {
            "type-fest": "^0.20.2"
          }
        }
      }
    },
    "@fortawesome/fontawesome-common-types": {
      "version": "0.3.0"
    },
    "@fortawesome/fontawesome-svg-core": {
      "version": "6.1.1",
      "requires": {
        "@fortawesome/fontawesome-common-types": "6.1.1"
      },
      "dependencies": {
        "@fortawesome/fontawesome-common-types": {
          "version": "6.1.1"
        }
      }
    },
    "@fortawesome/free-brands-svg-icons": {
      "version": "6.0.0",
      "requires": {
        "@fortawesome/fontawesome-common-types": "^0.3.0"
      }
    },
    "@fortawesome/free-regular-svg-icons": {
      "version": "6.0.0",
      "requires": {
        "@fortawesome/fontawesome-common-types": "^0.3.0"
      }
    },
    "@fortawesome/free-solid-svg-icons": {
      "version": "6.0.0",
      "requires": {
        "@fortawesome/fontawesome-common-types": "^0.3.0"
      }
    },
    "@fortawesome/react-fontawesome": {
      "version": "0.1.18",
      "requires": {
        "prop-types": "^15.8.1"
      }
    },
    "@graphql-eslint/eslint-plugin": {
      "version": "3.10.4",
      "dev": true,
      "requires": {
        "@babel/code-frame": "^7.16.7",
        "@graphql-tools/code-file-loader": "^7.2.14",
        "@graphql-tools/graphql-tag-pluck": "^7.2.6",
        "@graphql-tools/utils": "^8.6.9",
        "chalk": "^4.1.2",
        "debug": "^4.3.4",
        "fast-glob": "^3.2.11",
        "graphql-config": "^4.3.0",
        "graphql-depth-limit": "^1.1.0",
        "lodash.lowercase": "^4.3.0"
      }
    },
    "@graphql-tools/batch-execute": {
      "version": "8.4.10",
      "dev": true,
      "requires": {
        "@graphql-tools/utils": "8.6.13",
        "dataloader": "2.1.0",
        "tslib": "^2.4.0",
        "value-or-promise": "1.0.11"
      }
    },
    "@graphql-tools/code-file-loader": {
      "version": "7.2.18",
      "dev": true,
      "requires": {
        "@graphql-tools/graphql-tag-pluck": "7.2.10",
        "@graphql-tools/utils": "8.6.13",
        "globby": "^11.0.3",
        "tslib": "^2.4.0",
        "unixify": "^1.0.0"
      }
    },
    "@graphql-tools/delegate": {
      "version": "8.7.11",
      "dev": true,
      "requires": {
        "@graphql-tools/batch-execute": "8.4.10",
        "@graphql-tools/schema": "8.3.14",
        "@graphql-tools/utils": "8.6.13",
        "dataloader": "2.1.0",
        "graphql-executor": "0.0.23",
        "tslib": "^2.4.0",
        "value-or-promise": "1.0.11"
      }
    },
    "@graphql-tools/graphql-file-loader": {
      "version": "7.3.15",
      "dev": true,
      "requires": {
        "@graphql-tools/import": "6.6.17",
        "@graphql-tools/utils": "8.6.13",
        "globby": "^11.0.3",
        "tslib": "^2.4.0",
        "unixify": "^1.0.0"
      }
    },
    "@graphql-tools/graphql-tag-pluck": {
      "version": "7.2.10",
      "dev": true,
      "requires": {
        "@babel/parser": "^7.16.8",
        "@babel/traverse": "^7.16.8",
        "@babel/types": "^7.16.8",
        "@graphql-tools/utils": "8.6.13",
        "tslib": "^2.4.0"
      }
    },
    "@graphql-tools/import": {
      "version": "6.6.17",
      "dev": true,
      "requires": {
        "@graphql-tools/utils": "8.6.13",
        "resolve-from": "5.0.0",
        "tslib": "^2.4.0"
      }
    },
    "@graphql-tools/json-file-loader": {
      "version": "7.3.15",
      "dev": true,
      "requires": {
        "@graphql-tools/utils": "8.6.13",
        "globby": "^11.0.3",
        "tslib": "^2.4.0",
        "unixify": "^1.0.0"
      }
    },
    "@graphql-tools/load": {
      "version": "7.5.14",
      "dev": true,
      "requires": {
        "@graphql-tools/schema": "8.3.14",
        "@graphql-tools/utils": "8.6.13",
        "p-limit": "3.1.0",
        "tslib": "^2.4.0"
      }
    },
    "@graphql-tools/merge": {
      "version": "8.2.14",
      "dev": true,
      "requires": {
        "@graphql-tools/utils": "8.6.13",
        "tslib": "^2.4.0"
      }
    },
    "@graphql-tools/schema": {
      "version": "8.3.14",
      "dev": true,
      "requires": {
        "@graphql-tools/merge": "8.2.14",
        "@graphql-tools/utils": "8.6.13",
        "tslib": "^2.4.0",
        "value-or-promise": "1.0.11"
      }
    },
    "@graphql-tools/url-loader": {
      "version": "7.9.25",
      "dev": true,
      "requires": {
        "@graphql-tools/delegate": "8.7.11",
        "@graphql-tools/utils": "8.6.13",
        "@graphql-tools/wrap": "8.4.20",
        "@n1ru4l/graphql-live-query": "^0.9.0",
        "@types/ws": "^8.0.0",
        "cross-undici-fetch": "^0.4.0",
        "dset": "^3.1.0",
        "extract-files": "^11.0.0",
        "graphql-ws": "^5.4.1",
        "isomorphic-ws": "^4.0.1",
        "meros": "^1.1.4",
        "sync-fetch": "^0.4.0",
        "tslib": "^2.4.0",
        "value-or-promise": "^1.0.11",
        "ws": "^8.3.0"
      }
    },
    "@graphql-tools/utils": {
      "version": "8.6.13",
      "dev": true,
      "requires": {
        "tslib": "^2.4.0"
      }
    },
    "@graphql-tools/wrap": {
      "version": "8.4.20",
      "dev": true,
      "requires": {
        "@graphql-tools/delegate": "8.7.11",
        "@graphql-tools/schema": "8.3.14",
        "@graphql-tools/utils": "8.6.13",
        "tslib": "^2.4.0",
        "value-or-promise": "1.0.11"
      }
    },
    "@humanwhocodes/config-array": {
      "version": "0.9.3",
      "dev": true,
      "requires": {
        "@humanwhocodes/object-schema": "^1.2.1",
        "debug": "^4.1.1",
        "minimatch": "^3.0.4"
      }
    },
    "@humanwhocodes/object-schema": {
      "version": "1.2.1",
      "dev": true
    },
    "@iarna/toml": {
      "version": "2.2.5",
      "dev": true
    },
    "@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "dev": true,
      "requires": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      },
      "dependencies": {
        "argparse": {
          "version": "1.0.10",
          "dev": true,
          "requires": {
            "sprintf-js": "~1.0.2"
          }
        },
        "camelcase": {
          "version": "5.3.1",
          "dev": true
        },
        "js-yaml": {
          "version": "3.14.1",
          "dev": true,
          "requires": {
            "argparse": "^1.0.7",
            "esprima": "^4.0.0"
          }
        }
      }
    },
    "@istanbuljs/schema": {
      "version": "0.1.3",
      "dev": true
    },
    "@jest/console": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "slash": "^3.0.0"
      }
    },
    "@jest/core": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/console": "^27.5.1",
        "@jest/reporters": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.8.1",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^27.5.1",
        "jest-config": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-resolve-dependencies": "^27.5.1",
        "jest-runner": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "jest-watcher": "^27.5.1",
        "micromatch": "^4.0.4",
        "rimraf": "^3.0.0",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      }
    },
    "@jest/environment": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1"
      }
    },
    "@jest/fake-timers": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/types": "^27.5.1",
        "@sinonjs/fake-timers": "^8.0.1",
        "@types/node": "*",
        "jest-message-util": "^27.5.1",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1"
      }
    },
    "@jest/globals": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/environment": "^27.5.1",
        "@jest/types": "^27.5.1",
        "expect": "^27.5.1"
      }
    },
    "@jest/reporters": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.2",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^5.1.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-haste-map": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "slash": "^3.0.0",
        "source-map": "^0.6.0",
        "string-length": "^4.0.1",
        "terminal-link": "^2.0.0",
        "v8-to-istanbul": "^8.1.0"
      }
    },
    "@jest/source-map": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9",
        "source-map": "^0.6.0"
      }
    },
    "@jest/test-result": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/console": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      }
    },
    "@jest/test-sequencer": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/test-result": "^27.5.1",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-runtime": "^27.5.1"
      }
    },
    "@jest/transform": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@babel/core": "^7.1.0",
        "@jest/types": "^27.5.1",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^1.4.0",
        "fast-json-stable-stringify": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "source-map": "^0.6.1",
        "write-file-atomic": "^3.0.0"
      }
    },
    "@jest/types": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^16.0.0",
        "chalk": "^4.0.0"
      }
    },
    "@jridgewell/gen-mapping": {
      "version": "0.3.1",
      "dev": true,
      "requires": {
        "@jridgewell/set-array": "^1.0.0",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      }
    },
    "@jridgewell/resolve-uri": {
      "version": "3.0.5",
      "dev": true
    },
    "@jridgewell/set-array": {
      "version": "1.1.1",
      "dev": true
    },
    "@jridgewell/sourcemap-codec": {
      "version": "1.4.11",
      "dev": true
    },
    "@jridgewell/trace-mapping": {
      "version": "0.3.13",
      "dev": true,
      "requires": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "@mapbox/node-pre-gyp": {
      "version": "1.0.8",
      "requires": {
        "detect-libc": "^1.0.3",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.5",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      },
      "dependencies": {
        "semver": {
          "version": "7.3.5",
          "requires": {
            "lru-cache": "^6.0.0"
          }
        }
      }
    },
    "@n1ru4l/graphql-live-query": {
      "version": "0.9.0",
      "dev": true,
      "requires": {}
    },
    "@next/env": {
      "version": "12.1.0"
    },
    "@next/eslint-plugin-next": {
      "version": "12.1.6",
      "dev": true,
      "requires": {
        "glob": "7.1.7"
      },
      "dependencies": {
        "glob": {
          "version": "7.1.7",
          "dev": true,
          "requires": {
            "fs.realpath": "^1.0.0",
            "inflight": "^1.0.4",
            "inherits": "2",
            "minimatch": "^3.0.4",
            "once": "^1.3.0",
            "path-is-absolute": "^1.0.0"
          }
        }
      }
    },
    "@next/swc-linux-x64-gnu": {
      "version": "12.1.0",
      "optional": true
    },
    "@next/swc-linux-x64-musl": {
      "version": "12.1.0",
      "optional": true
    },
    "@nodelib/fs.scandir": {
      "version": "2.1.5",
      "dev": true,
      "requires": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      }
    },
    "@nodelib/fs.stat": {
      "version": "2.0.5",
      "dev": true
    },
    "@nodelib/fs.walk": {
      "version": "1.2.8",
      "dev": true,
      "requires": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      }
    },
    "@prisma/client": {
      "version": "3.14.0",
      "requires": {
        "@prisma/engines-version": "3.14.0-36.2b0c12756921c891fec4f68d9444e18c7d5d4a6a"
      }
    },
    "@prisma/engines": {
      "version": "3.14.0-36.2b0c12756921c891fec4f68d9444e18c7d5d4a6a",
      "devOptional": true
    },
    "@prisma/engines-version": {
      "version": "3.14.0-36.2b0c12756921c891fec4f68d9444e18c7d5d4a6a"
    },
    "@rushstack/eslint-patch": {
      "version": "1.1.3",
      "dev": true
    },
    "@sinonjs/commons": {
      "version": "1.8.3",
      "dev": true,
      "requires": {
        "type-detect": "4.0.8"
      }
    },
    "@sinonjs/fake-timers": {
      "version": "8.1.0",
      "dev": true,
      "requires": {
        "@sinonjs/commons": "^1.7.0"
      }
    },
    "@swc/helpers": {
      "version": "0.4.12",
      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.4.12.tgz",
      "integrity": "sha512-R6RmwS9Dld5lNvwKlPn62+piU+WDG1sMfsnfJioXCciyko/gZ0DQ4Mqglhq1iGU1nQ/RcGkAwfMH+elMSkJH3Q==",
      "requires": {
        "tslib": "^2.4.0"
      }
    },
    "@tootallnate/once": {
      "version": "1.1.2",
      "dev": true
    },
    "@tsconfig/node10": {
      "version": "1.0.8",
      "dev": true
    },
    "@tsconfig/node12": {
      "version": "1.0.9",
      "dev": true
    },
    "@tsconfig/node14": {
      "version": "1.0.1",
      "dev": true
    },
    "@tsconfig/node16": {
      "version": "1.0.2",
      "dev": true
    },
    "@types/babel__core": {
      "version": "7.1.18",
      "dev": true,
      "requires": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "@types/babel__generator": {
      "version": "7.6.4",
      "dev": true,
      "requires": {
        "@babel/types": "^7.0.0"
      }
    },
    "@types/babel__template": {
      "version": "7.4.1",
      "dev": true,
      "requires": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "@types/babel__traverse": {
      "version": "7.14.2",
      "dev": true,
      "requires": {
        "@babel/types": "^7.3.0"
      }
    },
    "@types/bn.js": {
      "version": "5.1.0",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/graceful-fs": {
      "version": "4.1.5",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/istanbul-lib-coverage": {
      "version": "2.0.4",
      "dev": true
    },
    "@types/istanbul-lib-report": {
      "version": "3.0.0",
      "dev": true,
      "requires": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "@types/istanbul-reports": {
      "version": "3.0.1",
      "dev": true,
      "requires": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "@types/jest": {
      "version": "27.4.1",
      "dev": true,
      "requires": {
        "jest-matcher-utils": "^27.0.0",
        "pretty-format": "^27.0.0"
      }
    },
    "@types/json-schema": {
      "version": "7.0.11",
      "dev": true
    },
    "@types/json5": {
      "version": "0.0.29",
      "dev": true
    },
    "@types/node": {
      "version": "17.0.14",
      "dev": true
    },
    "@types/normalize-package-data": {
      "version": "2.4.1",
      "dev": true
    },
    "@types/parse-json": {
      "version": "4.0.0",
      "dev": true
    },
    "@types/pg": {
      "version": "8.6.5",
      "resolved": "https://registry.npmjs.org/@types/pg/-/pg-8.6.5.tgz",
      "integrity": "sha512-tOkGtAqRVkHa/PVZicq67zuujI4Oorfglsr2IbKofDwBSysnaqSx7W1mDqFqdkGE6Fbgh+PZAl0r/BWON/mozw==",
      "dev": true,
      "requires": {
        "@types/node": "*",
        "pg-protocol": "*",
        "pg-types": "^2.2.0"
      }
    },
    "@types/prettier": {
      "version": "2.4.4",
      "dev": true
    },
    "@types/prop-types": {
      "version": "15.7.4",
      "dev": true
    },
    "@types/react": {
      "version": "17.0.39",
      "dev": true,
      "requires": {
        "@types/prop-types": "*",
        "@types/scheduler": "*",
        "csstype": "^3.0.2"
      }
    },
    "@types/scheduler": {
      "version": "0.16.2",
      "dev": true
    },
    "@types/stack-utils": {
      "version": "2.0.1",
      "dev": true
    },
    "@types/ws": {
      "version": "8.5.3",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/yargs": {
      "version": "16.0.4",
      "dev": true,
      "requires": {
        "@types/yargs-parser": "*"
      }
    },
    "@types/yargs-parser": {
      "version": "20.2.1",
      "dev": true
    },
    "@typescript-eslint/eslint-plugin": {
      "version": "5.28.0",
      "dev": true,
      "requires": {
        "@typescript-eslint/scope-manager": "5.28.0",
        "@typescript-eslint/type-utils": "5.28.0",
        "@typescript-eslint/utils": "5.28.0",
        "debug": "^4.3.4",
        "functional-red-black-tree": "^1.0.1",
        "ignore": "^5.2.0",
        "regexpp": "^3.2.0",
        "semver": "^7.3.7",
        "tsutils": "^3.21.0"
      },
      "dependencies": {
        "semver": {
          "version": "7.3.7",
          "dev": true,
          "requires": {
            "lru-cache": "^6.0.0"
          }
        }
      }
    },
    "@typescript-eslint/experimental-utils": {
      "version": "5.28.0",
      "dev": true,
      "requires": {
        "@typescript-eslint/utils": "5.28.0"
      }
    },
    "@typescript-eslint/parser": {
      "version": "5.28.0",
      "dev": true,
      "requires": {
        "@typescript-eslint/scope-manager": "5.28.0",
        "@typescript-eslint/types": "5.28.0",
        "@typescript-eslint/typescript-estree": "5.28.0",
        "debug": "^4.3.4"
      }
    },
    "@typescript-eslint/scope-manager": {
      "version": "5.28.0",
      "dev": true,
      "requires": {
        "@typescript-eslint/types": "5.28.0",
        "@typescript-eslint/visitor-keys": "5.28.0"
      }
    },
    "@typescript-eslint/type-utils": {
      "version": "5.28.0",
      "dev": true,
      "requires": {
        "@typescript-eslint/utils": "5.28.0",
        "debug": "^4.3.4",
        "tsutils": "^3.21.0"
      }
    },
    "@typescript-eslint/types": {
      "version": "5.28.0",
      "dev": true
    },
    "@typescript-eslint/typescript-estree": {
      "version": "5.28.0",
      "dev": true,
      "requires": {
        "@typescript-eslint/types": "5.28.0",
        "@typescript-eslint/visitor-keys": "5.28.0",
        "debug": "^4.3.4",
        "globby": "^11.1.0",
        "is-glob": "^4.0.3",
        "semver": "^7.3.7",
        "tsutils": "^3.21.0"
      },
      "dependencies": {
        "semver": {
          "version": "7.3.7",
          "dev": true,
          "requires": {
            "lru-cache": "^6.0.0"
          }
        }
      }
    },
    "@typescript-eslint/utils": {
      "version": "5.28.0",
      "dev": true,
      "requires": {
        "@types/json-schema": "^7.0.9",
        "@typescript-eslint/scope-manager": "5.28.0",
        "@typescript-eslint/types": "5.28.0",
        "@typescript-eslint/typescript-estree": "5.28.0",
        "eslint-scope": "^5.1.1",
        "eslint-utils": "^3.0.0"
      }
    },
    "@typescript-eslint/visitor-keys": {
      "version": "5.28.0",
      "dev": true,
      "requires": {
        "@typescript-eslint/types": "5.28.0",
        "eslint-visitor-keys": "^3.3.0"
      }
    },
    "abab": {
      "version": "2.0.5",
      "dev": true
    },
    "abbrev": {
      "version": "1.1.1"
    },
    "abort-controller": {
      "version": "3.0.0",
      "dev": true,
      "requires": {
        "event-target-shim": "^5.0.0"
      }
    },
    "acorn": {
      "version": "8.7.1",
      "dev": true
    },
    "acorn-globals": {
      "version": "6.0.0",
      "dev": true,
      "requires": {
        "acorn": "^7.1.1",
        "acorn-walk": "^7.1.1"
      },
      "dependencies": {
        "acorn": {
          "version": "7.4.1",
          "dev": true
        }
      }
    },
    "acorn-jsx": {
      "version": "5.3.2",
      "dev": true,
      "requires": {}
    },
    "acorn-node": {
      "version": "1.8.2",
      "dev": true,
      "requires": {
        "acorn": "^7.0.0",
        "acorn-walk": "^7.0.0",
        "xtend": "^4.0.2"
      },
      "dependencies": {
        "acorn": {
          "version": "7.4.1",
          "dev": true
        }
      }
    },
    "acorn-walk": {
      "version": "7.2.0",
      "dev": true
    },
    "agent-base": {
      "version": "6.0.2",
      "requires": {
        "debug": "4"
      }
    },
    "ajv": {
      "version": "6.12.6",
      "dev": true,
      "requires": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      }
    },
    "ansi-escapes": {
      "version": "4.3.2",
      "dev": true,
      "requires": {
        "type-fest": "^0.21.3"
      },
      "dependencies": {
        "type-fest": {
          "version": "0.21.3",
          "dev": true
        }
      }
    },
    "ansi-regex": {
      "version": "5.0.1"
    },
    "ansi-styles": {
      "version": "4.3.0",
      "dev": true,
      "requires": {
        "color-convert": "^2.0.1"
      }
    },
    "anymatch": {
      "version": "3.1.2",
      "devOptional": true,
      "requires": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      }
    },
    "aproba": {
      "version": "2.0.0"
    },
    "are-we-there-yet": {
      "version": "2.0.0",
      "requires": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      }
    },
    "arg": {
      "version": "4.1.3",
      "dev": true
    },
    "argparse": {
      "version": "2.0.1",
      "dev": true
    },
    "aria-query": {
      "version": "4.2.2",
      "dev": true,
      "requires": {
        "@babel/runtime": "^7.10.2",
        "@babel/runtime-corejs3": "^7.10.2"
      }
    },
    "array-includes": {
      "version": "3.1.5",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.4",
        "es-abstract": "^1.19.5",
        "get-intrinsic": "^1.1.1",
        "is-string": "^1.0.7"
      }
    },
    "array-union": {
      "version": "2.1.0",
      "dev": true
    },
    "array.prototype.flat": {
      "version": "1.2.5",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.19.0"
      }
    },
    "array.prototype.flatmap": {
      "version": "1.3.0",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.19.2",
        "es-shim-unscopables": "^1.0.0"
      }
    },
    "arrify": {
      "version": "1.0.1",
      "dev": true
    },
    "ast-types-flow": {
      "version": "0.0.7",
      "dev": true
    },
    "asynckit": {
      "version": "0.4.0",
      "dev": true
    },
    "autoprefixer": {
      "version": "10.4.2",
      "dev": true,
      "requires": {
        "browserslist": "^4.19.1",
        "caniuse-lite": "^1.0.30001297",
        "fraction.js": "^4.1.2",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.0.0",
        "postcss-value-parser": "^4.2.0"
      }
    },
    "axe-core": {
      "version": "4.4.0",
      "dev": true
    },
    "axobject-query": {
      "version": "2.2.0",
      "dev": true
    },
    "babel-jest": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^27.5.1",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      }
    },
    "babel-plugin-istanbul": {
      "version": "6.1.1",
      "dev": true,
      "requires": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      }
    },
    "babel-plugin-jest-hoist": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.0.0",
        "@types/babel__traverse": "^7.0.6"
      }
    },
    "babel-preset-current-node-syntax": {
      "version": "1.0.1",
      "dev": true,
      "requires": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.8.3",
        "@babel/plugin-syntax-import-meta": "^7.8.3",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.8.3",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.8.3",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-top-level-await": "^7.8.3"
      }
    },
    "babel-preset-jest": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "babel-plugin-jest-hoist": "^27.5.1",
        "babel-preset-current-node-syntax": "^1.0.0"
      }
    },
    "balanced-match": {
      "version": "1.0.2"
    },
    "base-x": {
      "version": "3.0.9",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "base64-js": {
      "version": "1.5.1",
      "dev": true
    },
    "binary-extensions": {
      "version": "2.2.0",
      "devOptional": true
    },
    "bn.js": {
      "version": "5.2.0"
    },
    "borsh": {
      "version": "0.7.0",
      "requires": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "brace-expansion": {
      "version": "1.1.11",
      "requires": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "braces": {
      "version": "3.0.2",
      "devOptional": true,
      "requires": {
        "fill-range": "^7.0.1"
      }
    },
    "browser-process-hrtime": {
      "version": "1.0.0",
      "dev": true
    },
    "browserslist": {
      "version": "4.20.4",
      "dev": true,
      "requires": {
        "caniuse-lite": "^1.0.30001349",
        "electron-to-chromium": "^1.4.147",
        "escalade": "^3.1.1",
        "node-releases": "^2.0.5",
        "picocolors": "^1.0.0"
      }
    },
    "bs-logger": {
      "version": "0.2.6",
      "dev": true,
      "requires": {
        "fast-json-stable-stringify": "2.x"
      }
    },
    "bs58": {
      "version": "4.0.1",
      "requires": {
        "base-x": "^3.0.2"
      }
    },
    "bser": {
      "version": "2.1.1",
      "dev": true,
      "requires": {
        "node-int64": "^0.4.0"
      }
    },
    "buffer": {
      "version": "5.7.1",
      "dev": true,
      "requires": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "buffer-from": {
      "version": "1.1.2",
      "dev": true
    },
    "buffer-writer": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/buffer-writer/-/buffer-writer-2.0.0.tgz",
      "integrity": "sha512-a7ZpuTZU1TRtnwyCNW3I5dc0wWNC3VR9S++Ewyk2HHZdrO3CQJqSpd+95Us590V6AL7JqUAH2IwZ/398PmNFgw=="
    },
    "builtin-modules": {
      "version": "3.3.0",
      "dev": true
    },
    "busboy": {
      "version": "1.6.0",
      "dev": true,
      "requires": {
        "streamsearch": "^1.1.0"
      }
    },
    "call-bind": {
      "version": "1.0.2",
      "dev": true,
      "requires": {
        "function-bind": "^1.1.1",
        "get-intrinsic": "^1.0.2"
      }
    },
    "callsites": {
      "version": "3.1.0",
      "dev": true
    },
    "camelcase": {
      "version": "6.3.0",
      "dev": true
    },
    "camelcase-css": {
      "version": "2.0.1",
      "dev": true
    },
    "caniuse-lite": {
      "version": "1.0.30001357"
    },
    "canvas": {
      "version": "2.9.0",
      "requires": {
        "@mapbox/node-pre-gyp": "^1.0.0",
        "nan": "^2.15.0",
        "simple-get": "^3.0.3"
      }
    },
    "capability": {
      "version": "0.2.5"
    },
    "chalk": {
      "version": "4.1.2",
      "dev": true,
      "requires": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      }
    },
    "char-regex": {
      "version": "1.0.2",
      "dev": true
    },
    "chokidar": {
      "version": "3.5.3",
      "devOptional": true,
      "requires": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "fsevents": "~2.3.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      }
    },
    "chownr": {
      "version": "2.0.0"
    },
    "ci-info": {
      "version": "3.3.0",
      "dev": true
    },
    "cjs-module-lexer": {
      "version": "1.2.2",
      "dev": true
    },
    "clean-regexp": {
      "version": "1.0.0",
      "dev": true,
      "requires": {
        "escape-string-regexp": "^1.0.5"
      }
    },
    "cliui": {
      "version": "7.0.4",
      "dev": true,
      "requires": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "co": {
      "version": "4.6.0",
      "dev": true
    },
    "collect-v8-coverage": {
      "version": "1.0.1",
      "dev": true
    },
    "color-convert": {
      "version": "2.0.1",
      "dev": true,
      "requires": {
        "color-name": "~1.1.4"
      }
    },
    "color-name": {
      "version": "1.1.4",
      "dev": true
    },
    "color-support": {
      "version": "1.1.3"
    },
    "combined-stream": {
      "version": "1.0.8",
      "dev": true,
      "requires": {
        "delayed-stream": "~1.0.0"
      }
    },
    "commander": {
      "version": "3.0.2"
    },
    "comment-parser": {
      "version": "1.3.1",
      "dev": true
    },
    "concat-map": {
      "version": "0.0.1"
    },
    "confusing-browser-globals": {
      "version": "1.0.11",
      "dev": true
    },
    "console-control-strings": {
      "version": "1.1.0"
    },
    "convert-source-map": {
      "version": "1.8.0",
      "dev": true,
      "requires": {
        "safe-buffer": "~5.1.1"
      },
      "dependencies": {
        "safe-buffer": {
          "version": "5.1.2",
          "dev": true
        }
      }
    },
    "core-js-pure": {
      "version": "3.21.0",
      "dev": true
    },
    "cosmiconfig": {
      "version": "7.0.1",
      "dev": true,
      "requires": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.2.1",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.10.0"
      }
    },
    "cosmiconfig-toml-loader": {
      "version": "1.0.0",
      "dev": true,
      "requires": {
        "@iarna/toml": "^2.2.5"
      }
    },
    "create-eslint-index": {
      "version": "1.0.0",
      "dev": true,
      "requires": {
        "lodash.get": "^4.3.0"
      }
    },
    "create-require": {
      "version": "1.1.1",
      "dev": true
    },
    "cross-spawn": {
      "version": "7.0.3",
      "requires": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      }
    },
    "cross-undici-fetch": {
      "version": "0.4.7",
      "dev": true,
      "requires": {
        "abort-controller": "^3.0.0",
        "busboy": "^1.6.0",
        "form-data-encoder": "^1.7.1",
        "formdata-node": "^4.3.1",
        "node-fetch": "^2.6.7",
        "undici": "^5.1.0",
        "web-streams-polyfill": "^3.2.0"
      }
    },
    "cssesc": {
      "version": "3.0.0",
      "dev": true
    },
    "cssom": {
      "version": "0.4.4",
      "dev": true
    },
    "cssstyle": {
      "version": "2.3.0",
      "dev": true,
      "requires": {
        "cssom": "~0.3.6"
      },
      "dependencies": {
        "cssom": {
          "version": "0.3.8",
          "dev": true
        }
      }
    },
    "csstype": {
      "version": "3.0.10",
      "dev": true
    },
    "damerau-levenshtein": {
      "version": "1.0.8",
      "dev": true
    },
    "data-urls": {
      "version": "2.0.0",
      "dev": true,
      "requires": {
        "abab": "^2.0.3",
        "whatwg-mimetype": "^2.3.0",
        "whatwg-url": "^8.0.0"
      }
    },
    "dataloader": {
      "version": "2.1.0",
      "dev": true
    },
    "dayjs": {
      "version": "1.10.7"
    },
    "debug": {
      "version": "4.3.4",
      "requires": {
        "ms": "2.1.2"
      }
    },
    "decimal.js": {
      "version": "10.3.1",
      "dev": true
    },
    "decompress-response": {
      "version": "4.2.1",
      "requires": {
        "mimic-response": "^2.0.0"
      }
    },
    "dedent": {
      "version": "0.7.0",
      "dev": true
    },
    "deep-is": {
      "version": "0.1.4",
      "dev": true
    },
    "deepmerge": {
      "version": "4.2.2",
      "dev": true
    },
    "define-properties": {
      "version": "1.1.4",
      "dev": true,
      "requires": {
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      }
    },
    "defined": {
      "version": "1.0.0",
      "dev": true
    },
    "delayed-stream": {
      "version": "1.0.0",
      "dev": true
    },
    "delegates": {
      "version": "1.0.0"
    },
    "depd": {
      "version": "2.0.0"
    },
    "detect-libc": {
      "version": "1.0.3"
    },
    "detect-newline": {
      "version": "3.1.0",
      "dev": true
    },
    "detective": {
      "version": "5.2.0",
      "dev": true,
      "requires": {
        "acorn-node": "^1.6.1",
        "defined": "^1.0.0",
        "minimist": "^1.1.1"
      }
    },
    "didyoumean": {
      "version": "1.2.2",
      "dev": true
    },
    "diff": {
      "version": "4.0.2",
      "dev": true
    },
    "diff-sequences": {
      "version": "27.5.1",
      "dev": true
    },
    "dir-glob": {
      "version": "3.0.1",
      "dev": true,
      "requires": {
        "path-type": "^4.0.0"
      }
    },
    "dlv": {
      "version": "1.1.3",
      "dev": true
    },
    "doctrine": {
      "version": "2.1.0",
      "dev": true,
      "requires": {
        "esutils": "^2.0.2"
      }
    },
    "domexception": {
      "version": "2.0.1",
      "dev": true,
      "requires": {
        "webidl-conversions": "^5.0.0"
      },
      "dependencies": {
        "webidl-conversions": {
          "version": "5.0.0",
          "dev": true
        }
      }
    },
    "dotenv": {
      "version": "16.0.0"
    },
    "dotenv-cli": {
      "version": "5.0.0",
      "requires": {
        "cross-spawn": "^7.0.3",
        "dotenv": "^16.0.0",
        "dotenv-expand": "^8.0.1",
        "minimist": "^1.2.5"
      }
    },
    "dotenv-expand": {
      "version": "8.0.1"
    },
    "dset": {
      "version": "3.1.2",
      "dev": true
    },
    "electron-to-chromium": {
      "version": "1.4.161",
      "dev": true
    },
    "emittery": {
      "version": "0.8.1",
      "dev": true
    },
    "emoji-regex": {
      "version": "9.2.2",
      "dev": true
    },
    "enhance-visitors": {
      "version": "1.0.0",
      "dev": true,
      "requires": {
        "lodash": "^4.13.1"
      }
    },
    "error-ex": {
      "version": "1.3.2",
      "dev": true,
      "requires": {
        "is-arrayish": "^0.2.1"
      }
    },
    "error-polyfill": {
      "version": "0.1.3",
      "requires": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "es-abstract": {
      "version": "1.20.1",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "es-to-primitive": "^1.2.1",
        "function-bind": "^1.1.1",
        "function.prototype.name": "^1.1.5",
        "get-intrinsic": "^1.1.1",
        "get-symbol-description": "^1.0.0",
        "has": "^1.0.3",
        "has-property-descriptors": "^1.0.0",
        "has-symbols": "^1.0.3",
        "internal-slot": "^1.0.3",
        "is-callable": "^1.2.4",
        "is-negative-zero": "^2.0.2",
        "is-regex": "^1.1.4",
        "is-shared-array-buffer": "^1.0.2",
        "is-string": "^1.0.7",
        "is-weakref": "^1.0.2",
        "object-inspect": "^1.12.0",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.2",
        "regexp.prototype.flags": "^1.4.3",
        "string.prototype.trimend": "^1.0.5",
        "string.prototype.trimstart": "^1.0.5",
        "unbox-primitive": "^1.0.2"
      }
    },
    "es-shim-unscopables": {
      "version": "1.0.0",
      "dev": true,
      "requires": {
        "has": "^1.0.3"
      }
    },
    "es-to-primitive": {
      "version": "1.2.1",
      "dev": true,
      "requires": {
        "is-callable": "^1.1.4",
        "is-date-object": "^1.0.1",
        "is-symbol": "^1.0.2"
      }
    },
    "escalade": {
      "version": "3.1.1",
      "dev": true
    },
    "escape-string-regexp": {
      "version": "1.0.5"
    },
    "escodegen": {
      "version": "2.0.0",
      "dev": true,
      "requires": {
        "esprima": "^4.0.1",
        "estraverse": "^5.2.0",
        "esutils": "^2.0.2",
        "optionator": "^0.8.1",
        "source-map": "~0.6.1"
      },
      "dependencies": {
        "levn": {
          "version": "0.3.0",
          "dev": true,
          "requires": {
            "prelude-ls": "~1.1.2",
            "type-check": "~0.3.2"
          }
        },
        "optionator": {
          "version": "0.8.3",
          "dev": true,
          "requires": {
            "deep-is": "~0.1.3",
            "fast-levenshtein": "~2.0.6",
            "levn": "~0.3.0",
            "prelude-ls": "~1.1.2",
            "type-check": "~0.3.2",
            "word-wrap": "~1.2.3"
          }
        }
      }
    },
    "eslint": {
      "version": "8.18.0",
      "dev": true,
      "requires": {
        "@eslint/eslintrc": "^1.3.0",
        "@humanwhocodes/config-array": "^0.9.2",
        "ajv": "^6.10.0",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "doctrine": "^3.0.0",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^7.1.1",
        "eslint-utils": "^3.0.0",
        "eslint-visitor-keys": "^3.3.0",
        "espree": "^9.3.2",
        "esquery": "^1.4.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^6.0.1",
        "functional-red-black-tree": "^1.0.1",
        "glob-parent": "^6.0.1",
        "globals": "^13.15.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.0.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "js-yaml": "^4.1.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.4.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.1",
        "regexpp": "^3.2.0",
        "strip-ansi": "^6.0.1",
        "strip-json-comments": "^3.1.0",
        "text-table": "^0.2.0",
        "v8-compile-cache": "^2.0.3"
      },
      "dependencies": {
        "doctrine": {
          "version": "3.0.0",
          "dev": true,
          "requires": {
            "esutils": "^2.0.2"
          }
        },
        "escape-string-regexp": {
          "version": "4.0.0",
          "dev": true
        },
        "eslint-scope": {
          "version": "7.1.1",
          "dev": true,
          "requires": {
            "esrecurse": "^4.3.0",
            "estraverse": "^5.2.0"
          }
        },
        "glob-parent": {
          "version": "6.0.2",
          "dev": true,
          "requires": {
            "is-glob": "^4.0.3"
          }
        },
        "globals": {
          "version": "13.15.0",
          "dev": true,
          "requires": {
            "type-fest": "^0.20.2"
          }
        }
      }
    },
    "eslint-ast-utils": {
      "version": "1.1.0",
      "dev": true,
      "requires": {
        "lodash.get": "^4.4.2",
        "lodash.zip": "^4.2.0"
      }
    },
    "eslint-config-airbnb": {
      "version": "19.0.4",
      "dev": true,
      "requires": {
        "eslint-config-airbnb-base": "^15.0.0",
        "object.assign": "^4.1.2",
        "object.entries": "^1.1.5"
      }
    },
    "eslint-config-airbnb-base": {
      "version": "15.0.0",
      "dev": true,
      "requires": {
        "confusing-browser-globals": "^1.0.10",
        "object.assign": "^4.1.2",
        "object.entries": "^1.1.5",
        "semver": "^6.3.0"
      }
    },
    "eslint-config-airbnb-typescript-prettier": {
      "version": "5.0.0",
      "dev": true,
      "requires": {
        "@typescript-eslint/eslint-plugin": "^5.6.0",
        "@typescript-eslint/parser": "^5.6.0",
        "eslint-config-airbnb": "^19.0.2",
        "eslint-config-prettier": "^6.15.0",
        "eslint-plugin-import": "^2.25.3",
        "eslint-plugin-jsx-a11y": "^6.5.1",
        "eslint-plugin-prettier": "^3.1.4",
        "eslint-plugin-react": "^7.27.1",
        "eslint-plugin-react-hooks": "^4.3.0"
      }
    },
    "eslint-config-canonical": {
      "version": "35.0.1",
      "dev": true,
      "requires": {
        "@babel/core": "^7.17.9",
        "@babel/eslint-parser": "^7.17.0",
        "@babel/eslint-plugin": "^7.17.7",
        "@graphql-eslint/eslint-plugin": "^3.10.2",
        "@next/eslint-plugin-next": "^12.1.4",
        "@rushstack/eslint-patch": "^1.1.2",
        "@typescript-eslint/eslint-plugin": "^5.19.0",
        "@typescript-eslint/parser": "^5.19.0",
        "eslint-config-prettier": "^8.5.0",
        "eslint-plugin-ava": "^13.2.0",
        "eslint-plugin-canonical": "^3.1.0",
        "eslint-plugin-cypress": "^2.12.1",
        "eslint-plugin-eslint-comments": "^3.2.0",
        "eslint-plugin-flowtype": "^8.0.3",
        "eslint-plugin-fp": "^2.3.0",
        "eslint-plugin-import": "^2.26.0",
        "eslint-plugin-jest": "^26.1.4",
        "eslint-plugin-jsdoc": "^39.2.0",
        "eslint-plugin-jsonc": "^2.2.1",
        "eslint-plugin-jsx-a11y": "^6.5.1",
        "eslint-plugin-lodash": "^7.4.0",
        "eslint-plugin-mocha": "^10.0.4",
        "eslint-plugin-modules-newline": "0.0.6",
        "eslint-plugin-node": "^11.1.0",
        "eslint-plugin-react": "^7.29.4",
        "eslint-plugin-react-hooks": "^4.4.0",
        "eslint-plugin-typescript-sort-keys": "^2.1.0",
        "eslint-plugin-unicorn": "^42.0.0",
        "eslint-plugin-yml": "^0.14.0",
        "ramda": "^0.28.0",
        "yaml-eslint-parser": "^0.5.0"
      },
      "dependencies": {
        "eslint-config-prettier": {
          "version": "8.5.0",
          "dev": true,
          "requires": {}
        }
      }
    },
    "eslint-config-near": {
      "version": "1.0.1",
      "dev": true,
      "requires": {
        "eslint-config-canonical": "^35.0.1"
      }
    },
    "eslint-config-prettier": {
      "version": "6.15.0",
      "dev": true,
      "requires": {
        "get-stdin": "^6.0.0"
      }
    },
    "eslint-import-resolver-node": {
      "version": "0.3.6",
      "dev": true,
      "requires": {
        "debug": "^3.2.7",
        "resolve": "^1.20.0"
      },
      "dependencies": {
        "debug": {
          "version": "3.2.7",
          "dev": true,
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "ms": {
          "version": "2.1.3",
          "dev": true
        }
      }
    },
    "eslint-module-utils": {
      "version": "2.7.3",
      "dev": true,
      "requires": {
        "debug": "^3.2.7",
        "find-up": "^2.1.0"
      },
      "dependencies": {
        "debug": {
          "version": "3.2.7",
          "dev": true,
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "find-up": {
          "version": "2.1.0",
          "dev": true,
          "requires": {
            "locate-path": "^2.0.0"
          }
        },
        "locate-path": {
          "version": "2.0.0",
          "dev": true,
          "requires": {
            "p-locate": "^2.0.0",
            "path-exists": "^3.0.0"
          }
        },
        "ms": {
          "version": "2.1.3",
          "dev": true
        },
        "p-limit": {
          "version": "1.3.0",
          "dev": true,
          "requires": {
            "p-try": "^1.0.0"
          }
        },
        "p-locate": {
          "version": "2.0.0",
          "dev": true,
          "requires": {
            "p-limit": "^1.1.0"
          }
        },
        "p-try": {
          "version": "1.0.0",
          "dev": true
        },
        "path-exists": {
          "version": "3.0.0",
          "dev": true
        }
      }
    },
    "eslint-plugin-ava": {
      "version": "13.2.0",
      "dev": true,
      "requires": {
        "enhance-visitors": "^1.0.0",
        "eslint-utils": "^3.0.0",
        "espree": "^9.0.0",
        "espurify": "^2.1.1",
        "import-modules": "^2.1.0",
        "micro-spelling-correcter": "^1.1.1",
        "pkg-dir": "^5.0.0",
        "resolve-from": "^5.0.0"
      },
      "dependencies": {
        "find-up": {
          "version": "5.0.0",
          "dev": true,
          "requires": {
            "locate-path": "^6.0.0",
            "path-exists": "^4.0.0"
          }
        },
        "locate-path": {
          "version": "6.0.0",
          "dev": true,
          "requires": {
            "p-locate": "^5.0.0"
          }
        },
        "p-locate": {
          "version": "5.0.0",
          "dev": true,
          "requires": {
            "p-limit": "^3.0.2"
          }
        },
        "pkg-dir": {
          "version": "5.0.0",
          "dev": true,
          "requires": {
            "find-up": "^5.0.0"
          }
        }
      }
    },
    "eslint-plugin-canonical": {
      "version": "3.1.0",
      "dev": true,
      "requires": {
        "is-get-set-prop": "^1.0.0",
        "is-js-type": "^2.0.0",
        "is-obj-prop": "^1.0.0",
        "is-proto-prop": "^2.0.0",
        "lodash": "^4.17.21",
        "natural-compare": "^1.4.0"
      }
    },
    "eslint-plugin-cypress": {
      "version": "2.12.1",
      "dev": true,
      "requires": {
        "globals": "^11.12.0"
      }
    },
    "eslint-plugin-es": {
      "version": "3.0.1",
      "dev": true,
      "requires": {
        "eslint-utils": "^2.0.0",
        "regexpp": "^3.0.0"
      },
      "dependencies": {
        "eslint-utils": {
          "version": "2.1.0",
          "dev": true,
          "requires": {
            "eslint-visitor-keys": "^1.1.0"
          }
        },
        "eslint-visitor-keys": {
          "version": "1.3.0",
          "dev": true
        }
      }
    },
    "eslint-plugin-eslint-comments": {
      "version": "3.2.0",
      "dev": true,
      "requires": {
        "escape-string-regexp": "^1.0.5",
        "ignore": "^5.0.5"
      }
    },
    "eslint-plugin-flowtype": {
      "version": "8.0.3",
      "dev": true,
      "requires": {
        "lodash": "^4.17.21",
        "string-natural-compare": "^3.0.1"
      }
    },
    "eslint-plugin-fp": {
      "version": "2.3.0",
      "dev": true,
      "requires": {
        "create-eslint-index": "^1.0.0",
        "eslint-ast-utils": "^1.0.0",
        "lodash": "^4.13.1",
        "req-all": "^0.1.0"
      }
    },
    "eslint-plugin-import": {
      "version": "2.26.0",
      "dev": true,
      "requires": {
        "array-includes": "^3.1.4",
        "array.prototype.flat": "^1.2.5",
        "debug": "^2.6.9",
        "doctrine": "^2.1.0",
        "eslint-import-resolver-node": "^0.3.6",
        "eslint-module-utils": "^2.7.3",
        "has": "^1.0.3",
        "is-core-module": "^2.8.1",
        "is-glob": "^4.0.3",
        "minimatch": "^3.1.2",
        "object.values": "^1.1.5",
        "resolve": "^1.22.0",
        "tsconfig-paths": "^3.14.1"
      },
      "dependencies": {
        "debug": {
          "version": "2.6.9",
          "dev": true,
          "requires": {
            "ms": "2.0.0"
          }
        },
        "ms": {
          "version": "2.0.0",
          "dev": true
        }
      }
    },
    "eslint-plugin-jest": {
      "version": "26.5.3",
      "dev": true,
      "requires": {
        "@typescript-eslint/utils": "^5.10.0"
      }
    },
    "eslint-plugin-jsdoc": {
      "version": "39.3.3",
      "dev": true,
      "requires": {
        "@es-joy/jsdoccomment": "~0.31.0",
        "comment-parser": "1.3.1",
        "debug": "^4.3.4",
        "escape-string-regexp": "^4.0.0",
        "esquery": "^1.4.0",
        "semver": "^7.3.7",
        "spdx-expression-parse": "^3.0.1"
      },
      "dependencies": {
        "escape-string-regexp": {
          "version": "4.0.0",
          "dev": true
        },
        "semver": {
          "version": "7.3.7",
          "dev": true,
          "requires": {
            "lru-cache": "^6.0.0"
          }
        }
      }
    },
    "eslint-plugin-jsonc": {
      "version": "2.3.0",
      "dev": true,
      "requires": {
        "eslint-utils": "^3.0.0",
        "jsonc-eslint-parser": "^2.0.4",
        "natural-compare": "^1.4.0"
      }
    },
    "eslint-plugin-jsx-a11y": {
      "version": "6.5.1",
      "dev": true,
      "requires": {
        "@babel/runtime": "^7.16.3",
        "aria-query": "^4.2.2",
        "array-includes": "^3.1.4",
        "ast-types-flow": "^0.0.7",
        "axe-core": "^4.3.5",
        "axobject-query": "^2.2.0",
        "damerau-levenshtein": "^1.0.7",
        "emoji-regex": "^9.2.2",
        "has": "^1.0.3",
        "jsx-ast-utils": "^3.2.1",
        "language-tags": "^1.0.5",
        "minimatch": "^3.0.4"
      }
    },
    "eslint-plugin-lodash": {
      "version": "7.4.0",
      "dev": true,
      "requires": {
        "lodash": "^4.17.21"
      }
    },
    "eslint-plugin-mocha": {
      "version": "10.0.5",
      "dev": true,
      "requires": {
        "eslint-utils": "^3.0.0",
        "rambda": "^7.1.0"
      }
    },
    "eslint-plugin-modules-newline": {
      "version": "0.0.6",
      "dev": true,
      "requires": {
        "requireindex": "~1.1.0"
      }
    },
    "eslint-plugin-node": {
      "version": "11.1.0",
      "dev": true,
      "requires": {
        "eslint-plugin-es": "^3.0.0",
        "eslint-utils": "^2.0.0",
        "ignore": "^5.1.1",
        "minimatch": "^3.0.4",
        "resolve": "^1.10.1",
        "semver": "^6.1.0"
      },
      "dependencies": {
        "eslint-utils": {
          "version": "2.1.0",
          "dev": true,
          "requires": {
            "eslint-visitor-keys": "^1.1.0"
          }
        },
        "eslint-visitor-keys": {
          "version": "1.3.0",
          "dev": true
        },
        "is-core-module": {
          "version": "2.9.0",
          "dev": true,
          "requires": {
            "has": "^1.0.3"
          }
        },
        "resolve": {
          "version": "1.22.1",
          "dev": true,
          "requires": {
            "is-core-module": "^2.9.0",
            "path-parse": "^1.0.7",
            "supports-preserve-symlinks-flag": "^1.0.0"
          }
        }
      }
    },
    "eslint-plugin-prettier": {
      "version": "3.4.1",
      "dev": true,
      "requires": {
        "prettier-linter-helpers": "^1.0.0"
      }
    },
    "eslint-plugin-react": {
      "version": "7.30.0",
      "dev": true,
      "requires": {
        "array-includes": "^3.1.5",
        "array.prototype.flatmap": "^1.3.0",
        "doctrine": "^2.1.0",
        "estraverse": "^5.3.0",
        "jsx-ast-utils": "^2.4.1 || ^3.0.0",
        "minimatch": "^3.1.2",
        "object.entries": "^1.1.5",
        "object.fromentries": "^2.0.5",
        "object.hasown": "^1.1.1",
        "object.values": "^1.1.5",
        "prop-types": "^15.8.1",
        "resolve": "^2.0.0-next.3",
        "semver": "^6.3.0",
        "string.prototype.matchall": "^4.0.7"
      },
      "dependencies": {
        "resolve": {
          "version": "2.0.0-next.3",
          "dev": true,
          "requires": {
            "is-core-module": "^2.2.0",
            "path-parse": "^1.0.6"
          }
        }
      }
    },
    "eslint-plugin-react-hooks": {
      "version": "4.6.0",
      "dev": true,
      "requires": {}
    },
    "eslint-plugin-typescript-sort-keys": {
      "version": "2.1.0",
      "dev": true,
      "requires": {
        "@typescript-eslint/experimental-utils": "^5.0.0",
        "json-schema": "^0.4.0",
        "natural-compare-lite": "^1.4.0"
      }
    },
    "eslint-plugin-unicorn": {
      "version": "42.0.0",
      "dev": true,
      "requires": {
        "@babel/helper-validator-identifier": "^7.15.7",
        "ci-info": "^3.3.0",
        "clean-regexp": "^1.0.0",
        "eslint-utils": "^3.0.0",
        "esquery": "^1.4.0",
        "indent-string": "^4.0.0",
        "is-builtin-module": "^3.1.0",
        "lodash": "^4.17.21",
        "pluralize": "^8.0.0",
        "read-pkg-up": "^7.0.1",
        "regexp-tree": "^0.1.24",
        "safe-regex": "^2.1.1",
        "semver": "^7.3.5",
        "strip-indent": "^3.0.0"
      },
      "dependencies": {
        "ci-info": {
          "version": "3.3.2",
          "dev": true
        },
        "semver": {
          "version": "7.3.5",
          "dev": true,
          "requires": {
            "lru-cache": "^6.0.0"
          }
        }
      }
    },
    "eslint-plugin-yml": {
      "version": "0.14.0",
      "dev": true,
      "requires": {
        "debug": "^4.3.2",
        "lodash": "^4.17.21",
        "natural-compare": "^1.4.0",
        "yaml-eslint-parser": "^0.5.0"
      }
    },
    "eslint-rule-composer": {
      "version": "0.3.0",
      "dev": true
    },
    "eslint-scope": {
      "version": "5.1.1",
      "dev": true,
      "requires": {
        "esrecurse": "^4.3.0",
        "estraverse": "^4.1.1"
      },
      "dependencies": {
        "estraverse": {
          "version": "4.3.0",
          "dev": true
        }
      }
    },
    "eslint-utils": {
      "version": "3.0.0",
      "dev": true,
      "requires": {
        "eslint-visitor-keys": "^2.0.0"
      },
      "dependencies": {
        "eslint-visitor-keys": {
          "version": "2.1.0",
          "dev": true
        }
      }
    },
    "eslint-visitor-keys": {
      "version": "3.3.0",
      "dev": true
    },
    "espree": {
      "version": "9.3.2",
      "dev": true,
      "requires": {
        "acorn": "^8.7.1",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^3.3.0"
      }
    },
    "esprima": {
      "version": "4.0.1",
      "dev": true
    },
    "espurify": {
      "version": "2.1.1",
      "dev": true
    },
    "esquery": {
      "version": "1.4.0",
      "dev": true,
      "requires": {
        "estraverse": "^5.1.0"
      }
    },
    "esrecurse": {
      "version": "4.3.0",
      "dev": true,
      "requires": {
        "estraverse": "^5.2.0"
      }
    },
    "estraverse": {
      "version": "5.3.0",
      "dev": true
    },
    "esutils": {
      "version": "2.0.3",
      "dev": true
    },
    "event-target-shim": {
      "version": "5.0.1",
      "dev": true
    },
    "execa": {
      "version": "5.1.1",
      "dev": true,
      "requires": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      }
    },
    "exit": {
      "version": "0.1.2",
      "dev": true
    },
    "expect": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/types": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1"
      }
    },
    "extract-files": {
      "version": "11.0.0",
      "dev": true
    },
    "fast-deep-equal": {
      "version": "3.1.3",
      "dev": true
    },
    "fast-diff": {
      "version": "1.2.0",
      "dev": true
    },
    "fast-glob": {
      "version": "3.2.11",
      "dev": true,
      "requires": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      }
    },
    "fast-json-stable-stringify": {
      "version": "2.1.0",
      "dev": true
    },
    "fast-levenshtein": {
      "version": "2.0.6",
      "dev": true
    },
    "fastq": {
      "version": "1.13.0",
      "dev": true,
      "requires": {
        "reusify": "^1.0.4"
      }
    },
    "fb-watchman": {
      "version": "2.0.1",
      "dev": true,
      "requires": {
        "bser": "2.1.1"
      }
    },
    "file-entry-cache": {
      "version": "6.0.1",
      "dev": true,
      "requires": {
        "flat-cache": "^3.0.4"
      }
    },
    "fill-range": {
      "version": "7.0.1",
      "devOptional": true,
      "requires": {
        "to-regex-range": "^5.0.1"
      }
    },
    "find-up": {
      "version": "4.1.0",
      "dev": true,
      "requires": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      }
    },
    "flat-cache": {
      "version": "3.0.4",
      "dev": true,
      "requires": {
        "flatted": "^3.1.0",
        "rimraf": "^3.0.2"
      }
    },
    "flatted": {
      "version": "3.2.5",
      "dev": true
    },
    "form-data": {
      "version": "3.0.1",
      "dev": true,
      "requires": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      }
    },
    "form-data-encoder": {
      "version": "1.7.2",
      "dev": true
    },
    "formdata-node": {
      "version": "4.3.3",
      "dev": true,
      "requires": {
        "node-domexception": "1.0.0",
        "web-streams-polyfill": "4.0.0-beta.1"
      },
      "dependencies": {
        "web-streams-polyfill": {
          "version": "4.0.0-beta.1",
          "dev": true
        }
      }
    },
    "fraction.js": {
      "version": "4.1.2",
      "dev": true
    },
    "fs-minipass": {
      "version": "2.1.0",
      "requires": {
        "minipass": "^3.0.0"
      }
    },
    "fs.realpath": {
      "version": "1.0.0"
    },
    "function-bind": {
      "version": "1.1.1",
      "dev": true
    },
    "function.prototype.name": {
      "version": "1.1.5",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.19.0",
        "functions-have-names": "^1.2.2"
      }
    },
    "functional-red-black-tree": {
      "version": "1.0.1",
      "dev": true
    },
    "functions-have-names": {
      "version": "1.2.3",
      "dev": true
    },
    "gauge": {
      "version": "3.0.2",
      "requires": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      }
    },
    "gensync": {
      "version": "1.0.0-beta.2",
      "dev": true
    },
    "get-caller-file": {
      "version": "2.0.5",
      "dev": true
    },
    "get-intrinsic": {
      "version": "1.1.1",
      "dev": true,
      "requires": {
        "function-bind": "^1.1.1",
        "has": "^1.0.3",
        "has-symbols": "^1.0.1"
      }
    },
    "get-package-type": {
      "version": "0.1.0",
      "dev": true
    },
    "get-set-props": {
      "version": "0.1.0",
      "dev": true
    },
    "get-stdin": {
      "version": "6.0.0",
      "dev": true
    },
    "get-stream": {
      "version": "6.0.1",
      "dev": true
    },
    "get-symbol-description": {
      "version": "1.0.0",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "get-intrinsic": "^1.1.1"
      }
    },
    "glob": {
      "version": "7.2.0",
      "requires": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      }
    },
    "glob-parent": {
      "version": "5.1.2",
      "devOptional": true,
      "requires": {
        "is-glob": "^4.0.1"
      }
    },
    "globals": {
      "version": "11.12.0",
      "dev": true
    },
    "globby": {
      "version": "11.1.0",
      "dev": true,
      "requires": {
        "array-union": "^2.1.0",
        "dir-glob": "^3.0.1",
        "fast-glob": "^3.2.9",
        "ignore": "^5.2.0",
        "merge2": "^1.4.1",
        "slash": "^3.0.0"
      }
    },
    "graceful-fs": {
      "version": "4.2.9",
      "dev": true
    },
    "graphql": {
      "version": "16.5.0",
      "resolved": "https://registry.npmjs.org/graphql/-/graphql-16.5.0.tgz",
      "integrity": "sha512-qbHgh8Ix+j/qY+a/ZcJnFQ+j8ezakqPiHwPiZhV/3PgGlgf96QMBB5/f2rkiC9sgLoy/xvT6TSiaf2nTHJh5iA==",
      "dev": true,
      "peer": true
    },
    "graphql-config": {
      "version": "4.3.1",
      "dev": true,
      "requires": {
        "@endemolshinegroup/cosmiconfig-typescript-loader": "3.0.2",
        "@graphql-tools/graphql-file-loader": "^7.3.7",
        "@graphql-tools/json-file-loader": "^7.3.7",
        "@graphql-tools/load": "^7.5.5",
        "@graphql-tools/merge": "^8.2.6",
        "@graphql-tools/url-loader": "^7.9.7",
        "@graphql-tools/utils": "^8.6.5",
        "cosmiconfig": "7.0.1",
        "cosmiconfig-toml-loader": "1.0.0",
        "minimatch": "4.2.1",
        "string-env-interpolation": "1.0.1"
      },
      "dependencies": {
        "minimatch": {
          "version": "4.2.1",
          "dev": true,
          "requires": {
            "brace-expansion": "^1.1.7"
          }
        }
      }
    },
    "graphql-depth-limit": {
      "version": "1.1.0",
      "dev": true,
      "requires": {
        "arrify": "^1.0.1"
      }
    },
    "graphql-executor": {
      "version": "0.0.23",
      "dev": true,
      "requires": {}
    },
    "graphql-ws": {
      "version": "5.9.0",
      "dev": true,
      "requires": {}
    },
    "has": {
      "version": "1.0.3",
      "dev": true,
      "requires": {
        "function-bind": "^1.1.1"
      }
    },
    "has-bigints": {
      "version": "1.0.2",
      "dev": true
    },
    "has-flag": {
      "version": "4.0.0",
      "dev": true
    },
    "has-property-descriptors": {
      "version": "1.0.0",
      "dev": true,
      "requires": {
        "get-intrinsic": "^1.1.1"
      }
    },
    "has-symbols": {
      "version": "1.0.3",
      "dev": true
    },
    "has-tostringtag": {
      "version": "1.0.0",
      "dev": true,
      "requires": {
        "has-symbols": "^1.0.2"
      }
    },
    "has-unicode": {
      "version": "2.0.1"
    },
    "hosted-git-info": {
      "version": "2.8.9",
      "dev": true
    },
    "html-encoding-sniffer": {
      "version": "2.0.1",
      "dev": true,
      "requires": {
        "whatwg-encoding": "^1.0.5"
      }
    },
    "html-escaper": {
      "version": "2.0.2",
      "dev": true
    },
    "http-errors": {
      "version": "1.8.1",
      "requires": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "dependencies": {
        "depd": {
          "version": "1.1.2"
        }
      }
    },
    "http-proxy-agent": {
      "version": "4.0.1",
      "dev": true,
      "requires": {
        "@tootallnate/once": "1",
        "agent-base": "6",
        "debug": "4"
      }
    },
    "https-proxy-agent": {
      "version": "5.0.0",
      "requires": {
        "agent-base": "6",
        "debug": "4"
      }
    },
    "human-signals": {
      "version": "2.1.0",
      "dev": true
    },
    "iconv-lite": {
      "version": "0.4.24",
      "dev": true,
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3"
      }
    },
    "ieee754": {
      "version": "1.2.1",
      "dev": true
    },
    "ignore": {
      "version": "5.2.0",
      "dev": true
    },
    "immutable": {
      "version": "4.0.0",
      "devOptional": true
    },
    "import-fresh": {
      "version": "3.3.0",
      "dev": true,
      "requires": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "dependencies": {
        "resolve-from": {
          "version": "4.0.0",
          "dev": true
        }
      }
    },
    "import-local": {
      "version": "3.1.0",
      "dev": true,
      "requires": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      }
    },
    "import-modules": {
      "version": "2.1.0",
      "dev": true
    },
    "imurmurhash": {
      "version": "0.1.4",
      "dev": true
    },
    "indent-string": {
      "version": "4.0.0",
      "dev": true
    },
    "inflight": {
      "version": "1.0.6",
      "requires": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "inherits": {
      "version": "2.0.4"
    },
    "internal-slot": {
      "version": "1.0.3",
      "dev": true,
      "requires": {
        "get-intrinsic": "^1.1.0",
        "has": "^1.0.3",
        "side-channel": "^1.0.4"
      }
    },
    "is-arrayish": {
      "version": "0.2.1",
      "dev": true
    },
    "is-bigint": {
      "version": "1.0.4",
      "dev": true,
      "requires": {
        "has-bigints": "^1.0.1"
      }
    },
    "is-binary-path": {
      "version": "2.1.0",
      "devOptional": true,
      "requires": {
        "binary-extensions": "^2.0.0"
      }
    },
    "is-boolean-object": {
      "version": "1.1.2",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "has-tostringtag": "^1.0.0"
      }
    },
    "is-builtin-module": {
      "version": "3.1.0",
      "dev": true,
      "requires": {
        "builtin-modules": "^3.0.0"
      }
    },
    "is-callable": {
      "version": "1.2.4",
      "dev": true
    },
    "is-core-module": {
      "version": "2.8.1",
      "dev": true,
      "requires": {
        "has": "^1.0.3"
      }
    },
    "is-date-object": {
      "version": "1.0.5",
      "dev": true,
      "requires": {
        "has-tostringtag": "^1.0.0"
      }
    },
    "is-extglob": {
      "version": "2.1.1",
      "devOptional": true
    },
    "is-fullwidth-code-point": {
      "version": "3.0.0"
    },
    "is-generator-fn": {
      "version": "2.1.0",
      "dev": true
    },
    "is-get-set-prop": {
      "version": "1.0.0",
      "dev": true,
      "requires": {
        "get-set-props": "^0.1.0",
        "lowercase-keys": "^1.0.0"
      }
    },
    "is-glob": {
      "version": "4.0.3",
      "devOptional": true,
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "is-js-type": {
      "version": "2.0.0",
      "dev": true,
      "requires": {
        "js-types": "^1.0.0"
      }
    },
    "is-negative-zero": {
      "version": "2.0.2",
      "dev": true
    },
    "is-number": {
      "version": "7.0.0",
      "devOptional": true
    },
    "is-number-object": {
      "version": "1.0.7",
      "dev": true,
      "requires": {
        "has-tostringtag": "^1.0.0"
      }
    },
    "is-obj-prop": {
      "version": "1.0.0",
      "dev": true,
      "requires": {
        "lowercase-keys": "^1.0.0",
        "obj-props": "^1.0.0"
      }
    },
    "is-potential-custom-element-name": {
      "version": "1.0.1",
      "dev": true
    },
    "is-proto-prop": {
      "version": "2.0.0",
      "dev": true,
      "requires": {
        "lowercase-keys": "^1.0.0",
        "proto-props": "^2.0.0"
      }
    },
    "is-regex": {
      "version": "1.1.4",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "has-tostringtag": "^1.0.0"
      }
    },
    "is-shared-array-buffer": {
      "version": "1.0.2",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2"
      }
    },
    "is-stream": {
      "version": "2.0.1",
      "dev": true
    },
    "is-string": {
      "version": "1.0.7",
      "dev": true,
      "requires": {
        "has-tostringtag": "^1.0.0"
      }
    },
    "is-symbol": {
      "version": "1.0.4",
      "dev": true,
      "requires": {
        "has-symbols": "^1.0.2"
      }
    },
    "is-typedarray": {
      "version": "1.0.0",
      "dev": true
    },
    "is-weakref": {
      "version": "1.0.2",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2"
      }
    },
    "isexe": {
      "version": "2.0.0"
    },
    "isomorphic-ws": {
      "version": "4.0.1",
      "dev": true,
      "requires": {}
    },
    "istanbul-lib-coverage": {
      "version": "3.2.0",
      "dev": true
    },
    "istanbul-lib-instrument": {
      "version": "5.1.0",
      "dev": true,
      "requires": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      }
    },
    "istanbul-lib-report": {
      "version": "3.0.0",
      "dev": true,
      "requires": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^3.0.0",
        "supports-color": "^7.1.0"
      }
    },
    "istanbul-lib-source-maps": {
      "version": "4.0.1",
      "dev": true,
      "requires": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      }
    },
    "istanbul-reports": {
      "version": "3.1.4",
      "dev": true,
      "requires": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      }
    },
    "jest": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/core": "^27.5.1",
        "import-local": "^3.0.2",
        "jest-cli": "^27.5.1"
      }
    },
    "jest-changed-files": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/types": "^27.5.1",
        "execa": "^5.0.0",
        "throat": "^6.0.1"
      }
    },
    "jest-circus": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/environment": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^0.7.0",
        "expect": "^27.5.1",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3",
        "throat": "^6.0.1"
      }
    },
    "jest-cli": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/core": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "import-local": "^3.0.2",
        "jest-config": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "prompts": "^2.0.1",
        "yargs": "^16.2.0"
      }
    },
    "jest-config": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@babel/core": "^7.8.0",
        "@jest/test-sequencer": "^27.5.1",
        "@jest/types": "^27.5.1",
        "babel-jest": "^27.5.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.1",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^27.5.1",
        "jest-environment-jsdom": "^27.5.1",
        "jest-environment-node": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-jasmine2": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-runner": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      }
    },
    "jest-diff": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "chalk": "^4.0.0",
        "diff-sequences": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      }
    },
    "jest-docblock": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "detect-newline": "^3.0.0"
      }
    },
    "jest-each": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "jest-get-type": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1"
      }
    },
    "jest-environment-jsdom": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1",
        "jsdom": "^16.6.0"
      }
    },
    "jest-environment-node": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1"
      }
    },
    "jest-get-type": {
      "version": "27.5.1",
      "dev": true
    },
    "jest-haste-map": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/types": "^27.5.1",
        "@types/graceful-fs": "^4.1.2",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "fsevents": "^2.3.2",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^27.5.1",
        "jest-serializer": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "micromatch": "^4.0.4",
        "walker": "^1.0.7"
      }
    },
    "jest-jasmine2": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/environment": "^27.5.1",
        "@jest/source-map": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "expect": "^27.5.1",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1",
        "throat": "^6.0.1"
      }
    },
    "jest-leak-detector": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      }
    },
    "jest-matcher-utils": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "chalk": "^4.0.0",
        "jest-diff": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      }
    },
    "jest-message-util": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^27.5.1",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      }
    },
    "jest-mock": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/types": "^27.5.1",
        "@types/node": "*"
      }
    },
    "jest-mock-extended": {
      "version": "2.0.4",
      "dev": true,
      "requires": {
        "ts-essentials": "^7.0.3"
      }
    },
    "jest-pnp-resolver": {
      "version": "1.2.2",
      "dev": true,
      "requires": {}
    },
    "jest-regex-util": {
      "version": "27.5.1",
      "dev": true
    },
    "jest-resolve": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "resolve": "^1.20.0",
        "resolve.exports": "^1.1.0",
        "slash": "^3.0.0"
      }
    },
    "jest-resolve-dependencies": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/types": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-snapshot": "^27.5.1"
      }
    },
    "jest-runner": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/console": "^27.5.1",
        "@jest/environment": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.8.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^27.5.1",
        "jest-environment-jsdom": "^27.5.1",
        "jest-environment-node": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-leak-detector": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "source-map-support": "^0.5.6",
        "throat": "^6.0.1"
      }
    },
    "jest-runtime": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/globals": "^27.5.1",
        "@jest/source-map": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "execa": "^5.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-mock": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      },
      "dependencies": {
        "strip-bom": {
          "version": "4.0.0",
          "dev": true
        }
      }
    },
    "jest-serializer": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@types/node": "*",
        "graceful-fs": "^4.2.9"
      }
    },
    "jest-snapshot": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@babel/core": "^7.7.2",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/traverse": "^7.7.2",
        "@babel/types": "^7.0.0",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/babel__traverse": "^7.0.4",
        "@types/prettier": "^2.1.5",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^27.5.1",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "natural-compare": "^1.4.0",
        "pretty-format": "^27.5.1",
        "semver": "^7.3.2"
      },
      "dependencies": {
        "semver": {
          "version": "7.3.5",
          "dev": true,
          "requires": {
            "lru-cache": "^6.0.0"
          }
        }
      }
    },
    "jest-util": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      }
    },
    "jest-validate": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/types": "^27.5.1",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^27.5.1",
        "leven": "^3.1.0",
        "pretty-format": "^27.5.1"
      }
    },
    "jest-watcher": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "jest-util": "^27.5.1",
        "string-length": "^4.0.1"
      }
    },
    "jest-worker": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "dependencies": {
        "supports-color": {
          "version": "8.1.1",
          "dev": true,
          "requires": {
            "has-flag": "^4.0.0"
          }
        }
      }
    },
    "js-sha256": {
      "version": "0.9.0"
    },
    "js-tokens": {
      "version": "4.0.0"
    },
    "js-types": {
      "version": "1.0.0",
      "dev": true
    },
    "js-yaml": {
      "version": "4.1.0",
      "dev": true,
      "requires": {
        "argparse": "^2.0.1"
      }
    },
    "jsdoc-type-pratt-parser": {
      "version": "3.1.0",
      "dev": true
    },
    "jsdom": {
      "version": "16.7.0",
      "dev": true,
      "requires": {
        "abab": "^2.0.5",
        "acorn": "^8.2.4",
        "acorn-globals": "^6.0.0",
        "cssom": "^0.4.4",
        "cssstyle": "^2.3.0",
        "data-urls": "^2.0.0",
        "decimal.js": "^10.2.1",
        "domexception": "^2.0.1",
        "escodegen": "^2.0.0",
        "form-data": "^3.0.0",
        "html-encoding-sniffer": "^2.0.1",
        "http-proxy-agent": "^4.0.1",
        "https-proxy-agent": "^5.0.0",
        "is-potential-custom-element-name": "^1.0.1",
        "nwsapi": "^2.2.0",
        "parse5": "6.0.1",
        "saxes": "^5.0.1",
        "symbol-tree": "^3.2.4",
        "tough-cookie": "^4.0.0",
        "w3c-hr-time": "^1.0.2",
        "w3c-xmlserializer": "^2.0.0",
        "webidl-conversions": "^6.1.0",
        "whatwg-encoding": "^1.0.5",
        "whatwg-mimetype": "^2.3.0",
        "whatwg-url": "^8.5.0",
        "ws": "^7.4.6",
        "xml-name-validator": "^3.0.0"
      },
      "dependencies": {
        "ws": {
          "version": "7.5.7",
          "dev": true,
          "requires": {}
        }
      }
    },
    "jsesc": {
      "version": "2.5.2",
      "dev": true
    },
    "json-parse-even-better-errors": {
      "version": "2.3.1",
      "dev": true
    },
    "json-schema": {
      "version": "0.4.0",
      "dev": true
    },
    "json-schema-traverse": {
      "version": "0.4.1",
      "dev": true
    },
    "json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "dev": true
    },
    "json5": {
      "version": "2.2.1",
      "dev": true
    },
    "jsonc-eslint-parser": {
      "version": "2.1.0",
      "dev": true,
      "requires": {
        "acorn": "^8.5.0",
        "eslint-visitor-keys": "^3.0.0",
        "espree": "^9.0.0",
        "semver": "^7.3.5"
      },
      "dependencies": {
        "semver": {
          "version": "7.3.5",
          "dev": true,
          "requires": {
            "lru-cache": "^6.0.0"
          }
        }
      }
    },
    "jsx-ast-utils": {
      "version": "3.2.1",
      "dev": true,
      "requires": {
        "array-includes": "^3.1.3",
        "object.assign": "^4.1.2"
      }
    },
    "kleur": {
      "version": "3.0.3",
      "dev": true
    },
    "language-subtag-registry": {
      "version": "0.3.21",
      "dev": true
    },
    "language-tags": {
      "version": "1.0.5",
      "dev": true,
      "requires": {
        "language-subtag-registry": "~0.3.2"
      }
    },
    "leven": {
      "version": "3.1.0",
      "dev": true
    },
    "levn": {
      "version": "0.4.1",
      "dev": true,
      "requires": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "dependencies": {
        "prelude-ls": {
          "version": "1.2.1",
          "dev": true
        },
        "type-check": {
          "version": "0.4.0",
          "dev": true,
          "requires": {
            "prelude-ls": "^1.2.1"
          }
        }
      }
    },
    "lilconfig": {
      "version": "2.0.4",
      "dev": true
    },
    "lines-and-columns": {
      "version": "1.2.4",
      "dev": true
    },
    "locate-path": {
      "version": "5.0.0",
      "dev": true,
      "requires": {
        "p-locate": "^4.1.0"
      }
    },
    "lodash": {
      "version": "4.17.21",
      "dev": true
    },
    "lodash.get": {
      "version": "4.4.2",
      "dev": true
    },
    "lodash.lowercase": {
      "version": "4.3.0",
      "dev": true
    },
    "lodash.memoize": {
      "version": "4.1.2",
      "dev": true
    },
    "lodash.merge": {
      "version": "4.6.2",
      "dev": true
    },
    "lodash.zip": {
      "version": "4.2.0",
      "dev": true
    },
    "loose-envify": {
      "version": "1.4.0",
      "requires": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      }
    },
    "lowercase-keys": {
      "version": "1.0.1",
      "dev": true
    },
    "lru-cache": {
      "version": "6.0.0",
      "requires": {
        "yallist": "^4.0.0"
      }
    },
    "make-dir": {
      "version": "3.1.0",
      "requires": {
        "semver": "^6.0.0"
      }
    },
    "make-error": {
      "version": "1.3.6",
      "dev": true
    },
    "makeerror": {
      "version": "1.0.12",
      "dev": true,
      "requires": {
        "tmpl": "1.0.5"
      }
    },
    "merge-stream": {
      "version": "2.0.0",
      "dev": true
    },
    "merge2": {
      "version": "1.4.1",
      "dev": true
    },
    "meros": {
      "version": "1.2.0",
      "dev": true,
      "requires": {}
    },
    "micro-spelling-correcter": {
      "version": "1.1.1",
      "dev": true
    },
    "micromatch": {
      "version": "4.0.4",
      "dev": true,
      "requires": {
        "braces": "^3.0.1",
        "picomatch": "^2.2.3"
      }
    },
    "mime-db": {
      "version": "1.51.0",
      "dev": true
    },
    "mime-types": {
      "version": "2.1.34",
      "dev": true,
      "requires": {
        "mime-db": "1.51.0"
      }
    },
    "mimic-fn": {
      "version": "2.1.0",
      "dev": true
    },
    "mimic-response": {
      "version": "2.1.0"
    },
    "min-indent": {
      "version": "1.0.1",
      "dev": true
    },
    "minimatch": {
      "version": "3.1.2",
      "requires": {
        "brace-expansion": "^1.1.7"
      }
    },
    "minimist": {
      "version": "1.2.6"
    },
    "minipass": {
      "version": "3.1.6",
      "requires": {
        "yallist": "^4.0.0"
      }
    },
    "minizlib": {
      "version": "2.1.2",
      "requires": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      }
    },
    "mkdirp": {
      "version": "1.0.4"
    },
    "ms": {
      "version": "2.1.2"
    },
    "mustache": {
      "version": "4.2.0"
    },
    "nan": {
      "version": "2.15.0"
    },
    "nanoid": {
      "version": "3.2.0"
    },
    "natural-compare": {
      "version": "1.4.0",
      "dev": true
    },
    "natural-compare-lite": {
      "version": "1.4.0",
      "dev": true
    },
    "near-api-js": {
      "version": "git+ssh://git@github.com/ryancwalsh/near-api-js.git#ce779105e3923d6679fe8a82d2ce70c2fa87b49d",
      "from": "near-api-js@ryancwalsh/near-api-js#gracefully-handle-window-and-buffer",
      "requires": {
        "bn.js": "5.2.0",
        "borsh": "^0.7.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "next": {
      "version": "12.1.0",
      "requires": {
        "@next/env": "12.1.0",
        "@next/swc-android-arm64": "12.1.0",
        "@next/swc-darwin-arm64": "12.1.0",
        "@next/swc-darwin-x64": "12.1.0",
        "@next/swc-linux-arm-gnueabihf": "12.1.0",
        "@next/swc-linux-arm64-gnu": "12.1.0",
        "@next/swc-linux-arm64-musl": "12.1.0",
        "@next/swc-linux-x64-gnu": "12.1.0",
        "@next/swc-linux-x64-musl": "12.1.0",
        "@next/swc-win32-arm64-msvc": "12.1.0",
        "@next/swc-win32-ia32-msvc": "12.1.0",
        "@next/swc-win32-x64-msvc": "12.1.0",
        "caniuse-lite": "^1.0.30001283",
        "postcss": "8.4.5",
        "styled-jsx": "5.0.0",
        "use-subscription": "1.5.1"
      },
      "dependencies": {
        "postcss": {
          "version": "8.4.5",
          "requires": {
            "nanoid": "^3.1.30",
            "picocolors": "^1.0.0",
            "source-map-js": "^1.0.1"
          }
        }
      }
    },
    "next-ssl-redirect-middleware": {
      "version": "0.1.3"
    },
    "node-domexception": {
      "version": "1.0.0",
      "dev": true
    },
    "node-fetch": {
      "version": "2.6.7",
      "requires": {
        "whatwg-url": "^5.0.0"
      },
      "dependencies": {
        "tr46": {
          "version": "0.0.3"
        },
        "webidl-conversions": {
          "version": "3.0.1"
        },
        "whatwg-url": {
          "version": "5.0.0",
          "requires": {
            "tr46": "~0.0.3",
            "webidl-conversions": "^3.0.0"
          }
        }
      }
    },
    "node-int64": {
      "version": "0.4.0",
      "dev": true
    },
    "node-releases": {
      "version": "2.0.5",
      "dev": true
    },
    "nopt": {
      "version": "5.0.0",
      "requires": {
        "abbrev": "1"
      }
    },
    "normalize-package-data": {
      "version": "2.5.0",
      "dev": true,
      "requires": {
        "hosted-git-info": "^2.1.4",
        "resolve": "^1.10.0",
        "semver": "2 || 3 || 4 || 5",
        "validate-npm-package-license": "^3.0.1"
      },
      "dependencies": {
        "is-core-module": {
          "version": "2.9.0",
          "dev": true,
          "requires": {
            "has": "^1.0.3"
          }
        },
        "resolve": {
          "version": "1.22.1",
          "dev": true,
          "requires": {
            "is-core-module": "^2.9.0",
            "path-parse": "^1.0.7",
            "supports-preserve-symlinks-flag": "^1.0.0"
          }
        },
        "semver": {
          "version": "5.7.1",
          "dev": true
        }
      }
    },
    "normalize-path": {
      "version": "3.0.0",
      "devOptional": true
    },
    "normalize-range": {
      "version": "0.1.2",
      "dev": true
    },
    "npm-run-path": {
      "version": "4.0.1",
      "dev": true,
      "requires": {
        "path-key": "^3.0.0"
      }
    },
    "npmlog": {
      "version": "5.0.1",
      "requires": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "nwsapi": {
      "version": "2.2.0",
      "dev": true
    },
    "o3": {
      "version": "1.0.3",
      "requires": {
        "capability": "^0.2.5"
      }
    },
    "obj-props": {
      "version": "1.4.0",
      "dev": true
    },
    "object-assign": {
      "version": "4.1.1"
    },
    "object-hash": {
      "version": "2.2.0",
      "dev": true
    },
    "object-inspect": {
      "version": "1.12.0",
      "dev": true
    },
    "object-keys": {
      "version": "1.1.1",
      "dev": true
    },
    "object.assign": {
      "version": "4.1.2",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.0",
        "define-properties": "^1.1.3",
        "has-symbols": "^1.0.1",
        "object-keys": "^1.1.1"
      }
    },
    "object.entries": {
      "version": "1.1.5",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.19.1"
      }
    },
    "object.fromentries": {
      "version": "2.0.5",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.19.1"
      }
    },
    "object.hasown": {
      "version": "1.1.1",
      "dev": true,
      "requires": {
        "define-properties": "^1.1.4",
        "es-abstract": "^1.19.5"
      }
    },
    "object.values": {
      "version": "1.1.5",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.19.1"
      }
    },
    "once": {
      "version": "1.4.0",
      "requires": {
        "wrappy": "1"
      }
    },
    "onetime": {
      "version": "5.1.2",
      "dev": true,
      "requires": {
        "mimic-fn": "^2.1.0"
      }
    },
    "optionator": {
      "version": "0.9.1",
      "dev": true,
      "requires": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.3"
      },
      "dependencies": {
        "prelude-ls": {
          "version": "1.2.1",
          "dev": true
        },
        "type-check": {
          "version": "0.4.0",
          "dev": true,
          "requires": {
            "prelude-ls": "^1.2.1"
          }
        }
      }
    },
    "p-limit": {
      "version": "3.1.0",
      "dev": true,
      "requires": {
        "yocto-queue": "^0.1.0"
      }
    },
    "p-locate": {
      "version": "4.1.0",
      "dev": true,
      "requires": {
        "p-limit": "^2.2.0"
      },
      "dependencies": {
        "p-limit": {
          "version": "2.3.0",
          "dev": true,
          "requires": {
            "p-try": "^2.0.0"
          }
        }
      }
    },
    "p-try": {
      "version": "2.2.0",
      "dev": true
    },
    "packet-reader": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/packet-reader/-/packet-reader-1.0.0.tgz",
      "integrity": "sha512-HAKu/fG3HpHFO0AA8WE8q2g+gBJaZ9MG7fcKk+IJPLTGAD6Psw4443l+9DGRbOIh3/aXr7Phy0TjilYivJo5XQ=="
    },
    "parent-module": {
      "version": "1.0.1",
      "dev": true,
      "requires": {
        "callsites": "^3.0.0"
      }
    },
    "parse-json": {
      "version": "5.2.0",
      "dev": true,
      "requires": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      }
    },
    "parse5": {
      "version": "6.0.1",
      "dev": true
    },
    "path-exists": {
      "version": "4.0.0",
      "dev": true
    },
    "path-is-absolute": {
      "version": "1.0.1"
    },
    "path-key": {
      "version": "3.1.1"
    },
    "path-parse": {
      "version": "1.0.7",
      "dev": true
    },
    "path-type": {
      "version": "4.0.0",
      "dev": true
    },
    "pg": {
      "version": "8.8.0",
      "resolved": "https://registry.npmjs.org/pg/-/pg-8.8.0.tgz",
      "integrity": "sha512-UXYN0ziKj+AeNNP7VDMwrehpACThH7LUl/p8TDFpEUuSejCUIwGSfxpHsPvtM6/WXFy6SU4E5RG4IJV/TZAGjw==",
      "requires": {
        "buffer-writer": "2.0.0",
        "packet-reader": "1.0.0",
        "pg-connection-string": "^2.5.0",
        "pg-pool": "^3.5.2",
        "pg-protocol": "^1.5.0",
        "pg-types": "^2.1.0",
        "pgpass": "1.x"
      }
    },
    "pg-connection-string": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.5.0.tgz",
      "integrity": "sha512-r5o/V/ORTA6TmUnyWZR9nCj1klXCO2CEKNRlVuJptZe85QuhFayC7WeMic7ndayT5IRIR0S0xFxFi2ousartlQ=="
    },
    "pg-int8": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz",
      "integrity": "sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw=="
    },
    "pg-pool": {
      "version": "3.5.2",
      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.5.2.tgz",
      "integrity": "sha512-His3Fh17Z4eg7oANLob6ZvH8xIVen3phEZh2QuyrIl4dQSDVEabNducv6ysROKpDNPSD+12tONZVWfSgMvDD9w==",
      "requires": {}
    },
    "pg-protocol": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.5.0.tgz",
      "integrity": "sha512-muRttij7H8TqRNu/DxrAJQITO4Ac7RmX3Klyr/9mJEOBeIpgnF8f9jAfRz5d3XwQZl5qBjF9gLsUtMPJE0vezQ=="
    },
    "pg-types": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz",
      "integrity": "sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==",
      "requires": {
        "pg-int8": "1.0.1",
        "postgres-array": "~2.0.0",
        "postgres-bytea": "~1.0.0",
        "postgres-date": "~1.0.4",
        "postgres-interval": "^1.1.0"
      }
    },
    "pgpass": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz",
      "integrity": "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==",
      "requires": {
        "split2": "^4.1.0"
      }
    },
    "picocolors": {
      "version": "1.0.0"
    },
    "picomatch": {
      "version": "2.3.1",
      "devOptional": true
    },
    "pirates": {
      "version": "4.0.5",
      "dev": true
    },
    "pkg-dir": {
      "version": "4.2.0",
      "dev": true,
      "requires": {
        "find-up": "^4.0.0"
      }
    },
    "pluralize": {
      "version": "8.0.0",
      "dev": true
    },
    "postcss": {
      "version": "8.4.6",
      "dev": true,
      "requires": {
        "nanoid": "^3.2.0",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.2"
      }
    },
    "postcss-js": {
      "version": "4.0.0",
      "dev": true,
      "requires": {
        "camelcase-css": "^2.0.1"
      }
    },
    "postcss-load-config": {
      "version": "3.1.1",
      "dev": true,
      "requires": {
        "lilconfig": "^2.0.4",
        "yaml": "^1.10.2"
      }
    },
    "postcss-nested": {
      "version": "5.0.6",
      "dev": true,
      "requires": {
        "postcss-selector-parser": "^6.0.6"
      }
    },
    "postcss-selector-parser": {
      "version": "6.0.9",
      "dev": true,
      "requires": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      }
    },
    "postcss-value-parser": {
      "version": "4.2.0",
      "dev": true
    },
    "postgres-array": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz",
      "integrity": "sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA=="
    },
    "postgres-bytea": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz",
      "integrity": "sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w=="
    },
    "postgres-date": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz",
      "integrity": "sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q=="
    },
    "postgres-interval": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz",
      "integrity": "sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==",
      "requires": {
        "xtend": "^4.0.0"
      }
    },
    "prelude-ls": {
      "version": "1.1.2",
      "dev": true
    },
    "prettier": {
      "version": "2.5.1",
      "dev": true
    },
    "prettier-linter-helpers": {
      "version": "1.0.0",
      "dev": true,
      "requires": {
        "fast-diff": "^1.1.2"
      }
    },
    "pretty-format": {
      "version": "27.5.1",
      "dev": true,
      "requires": {
        "ansi-regex": "^5.0.1",
        "ansi-styles": "^5.0.0",
        "react-is": "^17.0.1"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "5.2.0",
          "dev": true
        },
        "react-is": {
          "version": "17.0.2",
          "dev": true
        }
      }
    },
    "prisma": {
      "version": "3.14.0",
      "devOptional": true,
      "requires": {
        "@prisma/engines": "3.14.0-36.2b0c12756921c891fec4f68d9444e18c7d5d4a6a"
      }
    },
    "prompts": {
      "version": "2.4.2",
      "dev": true,
      "requires": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      }
    },
    "prop-types": {
      "version": "15.8.1",
      "requires": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "proto-props": {
      "version": "2.0.0",
      "dev": true
    },
    "psl": {
      "version": "1.8.0",
      "dev": true
    },
    "punycode": {
      "version": "2.1.1",
      "dev": true
    },
    "queue-microtask": {
      "version": "1.2.3",
      "dev": true
    },
    "quick-lru": {
      "version": "5.1.1",
      "dev": true
    },
    "rambda": {
      "version": "7.1.4",
      "dev": true
    },
    "ramda": {
      "version": "0.28.0",
      "dev": true
    },
    "react": {
      "version": "17.0.2",
      "requires": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1"
      }
    },
    "react-dom": {
      "version": "17.0.2",
      "requires": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1",
        "scheduler": "^0.20.2"
      }
    },
    "react-is": {
      "version": "16.13.1"
    },
    "read-pkg": {
      "version": "5.2.0",
      "dev": true,
      "requires": {
        "@types/normalize-package-data": "^2.4.0",
        "normalize-package-data": "^2.5.0",
        "parse-json": "^5.0.0",
        "type-fest": "^0.6.0"
      },
      "dependencies": {
        "type-fest": {
          "version": "0.6.0",
          "dev": true
        }
      }
    },
    "read-pkg-up": {
      "version": "7.0.1",
      "dev": true,
      "requires": {
        "find-up": "^4.1.0",
        "read-pkg": "^5.2.0",
        "type-fest": "^0.8.1"
      },
      "dependencies": {
        "type-fest": {
          "version": "0.8.1",
          "dev": true
        }
      }
    },
    "readable-stream": {
      "version": "3.6.0",
      "requires": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      }
    },
    "readdirp": {
      "version": "3.6.0",
      "devOptional": true,
      "requires": {
        "picomatch": "^2.2.1"
      }
    },
    "regenerator-runtime": {
      "version": "0.13.9",
      "dev": true
    },
    "regexp-tree": {
      "version": "0.1.24",
      "dev": true
    },
    "regexp.prototype.flags": {
      "version": "1.4.3",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "functions-have-names": "^1.2.2"
      }
    },
    "regexpp": {
      "version": "3.2.0",
      "dev": true
    },
    "remove-trailing-separator": {
      "version": "1.1.0",
      "dev": true
    },
    "req-all": {
      "version": "0.1.0",
      "dev": true
    },
    "require-directory": {
      "version": "2.1.1",
      "dev": true
    },
    "requireindex": {
      "version": "1.1.0",
      "dev": true
    },
    "resolve": {
      "version": "1.22.0",
      "dev": true,
      "requires": {
        "is-core-module": "^2.8.1",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      }
    },
    "resolve-cwd": {
      "version": "3.0.0",
      "dev": true,
      "requires": {
        "resolve-from": "^5.0.0"
      }
    },
    "resolve-from": {
      "version": "5.0.0",
      "dev": true
    },
    "resolve.exports": {
      "version": "1.1.0",
      "dev": true
    },
    "reusify": {
      "version": "1.0.4",
      "dev": true
    },
    "rimraf": {
      "version": "3.0.2",
      "requires": {
        "glob": "^7.1.3"
      }
    },
    "run-parallel": {
      "version": "1.2.0",
      "dev": true,
      "requires": {
        "queue-microtask": "^1.2.2"
      }
    },
    "safe-buffer": {
      "version": "5.2.1"
    },
    "safe-regex": {
      "version": "2.1.1",
      "dev": true,
      "requires": {
        "regexp-tree": "~0.1.1"
      }
    },
    "safer-buffer": {
      "version": "2.1.2",
      "dev": true
    },
    "sass": {
      "version": "1.49.7",
      "devOptional": true,
      "requires": {
        "chokidar": ">=3.0.0 <4.0.0",
        "immutable": "^4.0.0",
        "source-map-js": ">=0.6.2 <2.0.0"
      }
    },
    "saxes": {
      "version": "5.0.1",
      "dev": true,
      "requires": {
        "xmlchars": "^2.2.0"
      }
    },
    "scheduler": {
      "version": "0.20.2",
      "requires": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1"
      }
    },
    "semver": {
      "version": "6.3.0"
    },
    "set-blocking": {
      "version": "2.0.0"
    },
    "setprototypeof": {
      "version": "1.2.0"
    },
    "shebang-command": {
      "version": "2.0.0",
      "requires": {
        "shebang-regex": "^3.0.0"
      }
    },
    "shebang-regex": {
      "version": "3.0.0"
    },
    "side-channel": {
      "version": "1.0.4",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.0",
        "get-intrinsic": "^1.0.2",
        "object-inspect": "^1.9.0"
      }
    },
    "signal-exit": {
      "version": "3.0.7"
    },
    "simple-concat": {
      "version": "1.0.1"
    },
    "simple-get": {
      "version": "3.1.1",
      "requires": {
        "decompress-response": "^4.2.0",
        "once": "^1.3.1",
        "simple-concat": "^1.0.0"
      }
    },
    "sisteransi": {
      "version": "1.0.5",
      "dev": true
    },
    "slash": {
      "version": "3.0.0",
      "dev": true
    },
    "source-map": {
      "version": "0.6.1",
      "dev": true
    },
    "source-map-js": {
      "version": "1.0.2"
    },
    "source-map-support": {
      "version": "0.5.21",
      "dev": true,
      "requires": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "spdx-correct": {
      "version": "3.1.1",
      "dev": true,
      "requires": {
        "spdx-expression-parse": "^3.0.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "spdx-exceptions": {
      "version": "2.3.0",
      "dev": true
    },
    "spdx-expression-parse": {
      "version": "3.0.1",
      "dev": true,
      "requires": {
        "spdx-exceptions": "^2.1.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "spdx-license-ids": {
      "version": "3.0.11",
      "dev": true
    },
    "split2": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/split2/-/split2-4.1.0.tgz",
      "integrity": "sha512-VBiJxFkxiXRlUIeyMQi8s4hgvKCSjtknJv/LVYbrgALPwf5zSKmEwV9Lst25AkvMDnvxODugjdl6KZgwKM1WYQ=="
    },
    "sprintf-js": {
      "version": "1.0.3",
      "dev": true
    },
    "stack-utils": {
      "version": "2.0.5",
      "dev": true,
      "requires": {
        "escape-string-regexp": "^2.0.0"
      },
      "dependencies": {
        "escape-string-regexp": {
          "version": "2.0.0",
          "dev": true
        }
      }
    },
    "statuses": {
      "version": "1.5.0"
    },
    "streamsearch": {
      "version": "1.1.0",
      "dev": true
    },
    "string_decoder": {
      "version": "1.3.0",
      "requires": {
        "safe-buffer": "~5.2.0"
      }
    },
    "string-env-interpolation": {
      "version": "1.0.1",
      "dev": true
    },
    "string-length": {
      "version": "4.0.2",
      "dev": true,
      "requires": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      }
    },
    "string-natural-compare": {
      "version": "3.0.1",
      "dev": true
    },
    "string-width": {
      "version": "4.2.3",
      "requires": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "dependencies": {
        "emoji-regex": {
          "version": "8.0.0"
        }
      }
    },
    "string.prototype.matchall": {
      "version": "4.0.7",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.3",
        "es-abstract": "^1.19.1",
        "get-intrinsic": "^1.1.1",
        "has-symbols": "^1.0.3",
        "internal-slot": "^1.0.3",
        "regexp.prototype.flags": "^1.4.1",
        "side-channel": "^1.0.4"
      }
    },
    "string.prototype.trimend": {
      "version": "1.0.5",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.4",
        "es-abstract": "^1.19.5"
      }
    },
    "string.prototype.trimstart": {
      "version": "1.0.5",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.1.4",
        "es-abstract": "^1.19.5"
      }
    },
    "strip-ansi": {
      "version": "6.0.1",
      "requires": {
        "ansi-regex": "^5.0.1"
      }
    },
    "strip-bom": {
      "version": "3.0.0",
      "dev": true
    },
    "strip-final-newline": {
      "version": "2.0.0",
      "dev": true
    },
    "strip-indent": {
      "version": "3.0.0",
      "dev": true,
      "requires": {
        "min-indent": "^1.0.0"
      }
    },
    "strip-json-comments": {
      "version": "3.1.1",
      "dev": true
    },
    "styled-jsx": {
      "version": "5.0.0",
      "requires": {}
    },
    "supports-color": {
      "version": "7.2.0",
      "dev": true,
      "requires": {
        "has-flag": "^4.0.0"
      }
    },
    "supports-hyperlinks": {
      "version": "2.2.0",
      "dev": true,
      "requires": {
        "has-flag": "^4.0.0",
        "supports-color": "^7.0.0"
      }
    },
    "supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "dev": true
    },
    "symbol-tree": {
      "version": "3.2.4",
      "dev": true
    },
    "sync-fetch": {
      "version": "0.4.1",
      "dev": true,
      "requires": {
        "buffer": "^5.7.1",
        "node-fetch": "^2.6.1"
      }
    },
    "tailwindcss": {
      "version": "3.0.18",
      "dev": true,
      "requires": {
        "arg": "^5.0.1",
        "chalk": "^4.1.2",
        "chokidar": "^3.5.3",
        "color-name": "^1.1.4",
        "cosmiconfig": "^7.0.1",
        "detective": "^5.2.0",
        "didyoumean": "^1.2.2",
        "dlv": "^1.1.3",
        "fast-glob": "^3.2.11",
        "glob-parent": "^6.0.2",
        "is-glob": "^4.0.3",
        "normalize-path": "^3.0.0",
        "object-hash": "^2.2.0",
        "postcss-js": "^4.0.0",
        "postcss-load-config": "^3.1.0",
        "postcss-nested": "5.0.6",
        "postcss-selector-parser": "^6.0.9",
        "postcss-value-parser": "^4.2.0",
        "quick-lru": "^5.1.1",
        "resolve": "^1.21.0"
      },
      "dependencies": {
        "arg": {
          "version": "5.0.1",
          "dev": true
        },
        "glob-parent": {
          "version": "6.0.2",
          "dev": true,
          "requires": {
            "is-glob": "^4.0.3"
          }
        }
      }
    },
    "tar": {
      "version": "6.1.11",
      "requires": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^3.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      }
    },
    "terminal-link": {
      "version": "2.1.1",
      "dev": true,
      "requires": {
        "ansi-escapes": "^4.2.1",
        "supports-hyperlinks": "^2.0.0"
      }
    },
    "test-exclude": {
      "version": "6.0.0",
      "dev": true,
      "requires": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      }
    },
    "text-encoding-utf-8": {
      "version": "1.0.2"
    },
    "text-table": {
      "version": "0.2.0",
      "dev": true
    },
    "throat": {
      "version": "6.0.1",
      "dev": true
    },
    "tmpl": {
      "version": "1.0.5",
      "dev": true
    },
    "to-fast-properties": {
      "version": "2.0.0",
      "dev": true
    },
    "to-regex-range": {
      "version": "5.0.1",
      "devOptional": true,
      "requires": {
        "is-number": "^7.0.0"
      }
    },
    "toidentifier": {
      "version": "1.0.1"
    },
    "tough-cookie": {
      "version": "4.0.0",
      "dev": true,
      "requires": {
        "psl": "^1.1.33",
        "punycode": "^2.1.1",
        "universalify": "^0.1.2"
      }
    },
    "tr46": {
      "version": "2.1.0",
      "dev": true,
      "requires": {
        "punycode": "^2.1.1"
      }
    },
    "ts-essentials": {
      "version": "7.0.3",
      "dev": true,
      "requires": {}
    },
    "ts-jest": {
      "version": "27.1.3",
      "dev": true,
      "requires": {
        "bs-logger": "0.x",
        "fast-json-stable-stringify": "2.x",
        "jest-util": "^27.0.0",
        "json5": "2.x",
        "lodash.memoize": "4.x",
        "make-error": "1.x",
        "semver": "7.x",
        "yargs-parser": "20.x"
      },
      "dependencies": {
        "semver": {
          "version": "7.3.5",
          "dev": true,
          "requires": {
            "lru-cache": "^6.0.0"
          }
        }
      }
    },
    "ts-node": {
      "version": "10.7.0",
      "dev": true,
      "requires": {
        "@cspotcode/source-map-support": "0.7.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.0",
        "yn": "3.1.1"
      },
      "dependencies": {
        "acorn-walk": {
          "version": "8.2.0",
          "dev": true
        }
      }
    },
    "tsconfig-paths": {
      "version": "3.14.1",
      "dev": true,
      "requires": {
        "@types/json5": "^0.0.29",
        "json5": "^1.0.1",
        "minimist": "^1.2.6",
        "strip-bom": "^3.0.0"
      },
      "dependencies": {
        "json5": {
          "version": "1.0.1",
          "dev": true,
          "requires": {
            "minimist": "^1.2.0"
          }
        }
      }
    },
    "tslib": {
      "version": "2.4.0"
    },
    "tsutils": {
      "version": "3.21.0",
      "dev": true,
      "requires": {
        "tslib": "^1.8.1"
      },
      "dependencies": {
        "tslib": {
          "version": "1.14.1",
          "dev": true
        }
      }
    },
    "tweetnacl": {
      "version": "1.0.3"
    },
    "type-check": {
      "version": "0.3.2",
      "dev": true,
      "requires": {
        "prelude-ls": "~1.1.2"
      }
    },
    "type-detect": {
      "version": "4.0.8",
      "dev": true
    },
    "type-fest": {
      "version": "0.20.2",
      "dev": true
    },
    "typedarray-to-buffer": {
      "version": "3.1.5",
      "dev": true,
      "requires": {
        "is-typedarray": "^1.0.0"
      }
    },
    "typescript": {
      "version": "4.6.2",
      "dev": true
    },
    "u3": {
      "version": "0.1.1"
    },
    "unbox-primitive": {
      "version": "1.0.2",
      "dev": true,
      "requires": {
        "call-bind": "^1.0.2",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.0.3",
        "which-boxed-primitive": "^1.0.2"
      }
    },
    "undici": {
      "version": "5.5.1",
      "dev": true
    },
    "universalify": {
      "version": "0.1.2",
      "dev": true
    },
    "unixify": {
      "version": "1.0.0",
      "dev": true,
      "requires": {
        "normalize-path": "^2.1.1"
      },
      "dependencies": {
        "normalize-path": {
          "version": "2.1.1",
          "dev": true,
          "requires": {
            "remove-trailing-separator": "^1.0.1"
          }
        }
      }
    },
    "uri-js": {
      "version": "4.4.1",
      "dev": true,
      "requires": {
        "punycode": "^2.1.0"
      }
    },
    "use-subscription": {
      "version": "1.5.1",
      "requires": {
        "object-assign": "^4.1.1"
      }
    },
    "util-deprecate": {
      "version": "1.0.2"
    },
    "v8-compile-cache": {
      "version": "2.3.0",
      "dev": true
    },
    "v8-compile-cache-lib": {
      "version": "3.0.0",
      "dev": true
    },
    "v8-to-istanbul": {
      "version": "8.1.1",
      "dev": true,
      "requires": {
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^1.6.0",
        "source-map": "^0.7.3"
      },
      "dependencies": {
        "source-map": {
          "version": "0.7.3",
          "dev": true
        }
      }
    },
    "validate-npm-package-license": {
      "version": "3.0.4",
      "dev": true,
      "requires": {
        "spdx-correct": "^3.0.0",
        "spdx-expression-parse": "^3.0.0"
      }
    },
    "value-or-promise": {
      "version": "1.0.11",
      "dev": true
    },
    "w3c-hr-time": {
      "version": "1.0.2",
      "dev": true,
      "requires": {
        "browser-process-hrtime": "^1.0.0"
      }
    },
    "w3c-xmlserializer": {
      "version": "2.0.0",
      "dev": true,
      "requires": {
        "xml-name-validator": "^3.0.0"
      }
    },
    "wait-port": {
      "version": "0.2.9",
      "requires": {
        "chalk": "^2.4.2",
        "commander": "^3.0.2",
        "debug": "^4.1.1"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "3.2.1",
          "requires": {
            "color-convert": "^1.9.0"
          }
        },
        "chalk": {
          "version": "2.4.2",
          "requires": {
            "ansi-styles": "^3.2.1",
            "escape-string-regexp": "^1.0.5",
            "supports-color": "^5.3.0"
          }
        },
        "color-convert": {
          "version": "1.9.3",
          "requires": {
            "color-name": "1.1.3"
          }
        },
        "color-name": {
          "version": "1.1.3"
        },
        "has-flag": {
          "version": "3.0.0"
        },
        "supports-color": {
          "version": "5.5.0",
          "requires": {
            "has-flag": "^3.0.0"
          }
        }
      }
    },
    "walker": {
      "version": "1.0.8",
      "dev": true,
      "requires": {
        "makeerror": "1.0.12"
      }
    },
    "web-streams-polyfill": {
      "version": "3.2.1",
      "dev": true
    },
    "webidl-conversions": {
      "version": "6.1.0",
      "dev": true
    },
    "whatwg-encoding": {
      "version": "1.0.5",
      "dev": true,
      "requires": {
        "iconv-lite": "0.4.24"
      }
    },
    "whatwg-mimetype": {
      "version": "2.3.0",
      "dev": true
    },
    "whatwg-url": {
      "version": "8.7.0",
      "dev": true,
      "requires": {
        "lodash": "^4.7.0",
        "tr46": "^2.1.0",
        "webidl-conversions": "^6.1.0"
      }
    },
    "which": {
      "version": "2.0.2",
      "requires": {
        "isexe": "^2.0.0"
      }
    },
    "which-boxed-primitive": {
      "version": "1.0.2",
      "dev": true,
      "requires": {
        "is-bigint": "^1.0.1",
        "is-boolean-object": "^1.1.0",
        "is-number-object": "^1.0.4",
        "is-string": "^1.0.5",
        "is-symbol": "^1.0.3"
      }
    },
    "wide-align": {
      "version": "1.1.5",
      "requires": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "word-wrap": {
      "version": "1.2.3",
      "dev": true
    },
    "wrap-ansi": {
      "version": "7.0.0",
      "dev": true,
      "requires": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      }
    },
    "wrappy": {
      "version": "1.0.2"
    },
    "write-file-atomic": {
      "version": "3.0.3",
      "dev": true,
      "requires": {
        "imurmurhash": "^0.1.4",
        "is-typedarray": "^1.0.0",
        "signal-exit": "^3.0.2",
        "typedarray-to-buffer": "^3.1.5"
      }
    },
    "ws": {
      "version": "8.8.0",
      "dev": true,
      "requires": {}
    },
    "xml-name-validator": {
      "version": "3.0.0",
      "dev": true
    },
    "xmlchars": {
      "version": "2.2.0",
      "dev": true
    },
    "xtend": {
      "version": "4.0.2"
    },
    "y18n": {
      "version": "5.0.8",
      "dev": true
    },
    "yallist": {
      "version": "4.0.0"
    },
    "yaml": {
      "version": "1.10.2",
      "dev": true
    },
    "yaml-eslint-parser": {
      "version": "0.5.0",
      "dev": true,
      "requires": {
        "eslint-visitor-keys": "^3.0.0",
        "lodash": "^4.17.21",
        "yaml": "^1.10.2"
      }
    },
    "yargs": {
      "version": "16.2.0",
      "dev": true,
      "requires": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.0",
        "y18n": "^5.0.5",
        "yargs-parser": "^20.2.2"
      }
    },
    "yargs-parser": {
      "version": "20.2.9",
      "dev": true
    },
    "yn": {
      "version": "3.1.1",
      "dev": true
    },
    "yocto-queue": {
      "version": "0.1.0",
      "dev": true
    },
    "zod": {
      "version": "3.19.1",
      "resolved": "https://registry.npmjs.org/zod/-/zod-3.19.1.tgz",
      "integrity": "sha512-LYjZsEDhCdYET9ikFu6dVPGp2YH9DegXjdJToSzD9rO6fy4qiRYFoyEYwps88OseJlPyl2NOe2iJuhEhL7IpEA=="
    },
    "zod-validation-error": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/zod-validation-error/-/zod-validation-error-0.2.1.tgz",
      "integrity": "sha512-zGg6P5EHi5V0dvyEeC8HBZd2pzp7QDKTngkSWgWunljrY+0SHkHyjI519D+u8/37BHkGHAFseWgnZ2Uq8LNFKg==",
      "requires": {
        "@swc/helpers": "^0.4.11"
      }
    }
  }
}

'''
'''--- web-app/package.json ---
{
  "name": "nextplus",
  "version": "0.1.0",
  "private": true,
  "prisma": {
    "seed": "ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts"
  },
  "engines": {
    "node": ">=17.8.0"
  },
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "test": "yarn docker:up && wait-port 5433 && yarn migrate:postgres deploy && yarn db:seed && dotenv -e .env.test jest -i ",
    "migrate:postgres": "dotenv -e .env.test -- npx prisma migrate dev --schema ./prisma/test-schema.prisma --name postgres-init --skip-seed",
    "migrate:reset": "dotenv -e .env.test -- npx prisma migrate reset --schema ./prisma/test-schema.prisma",
    "db:seed": "dotenv -e .env.test -- npx prisma db seed"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.1.1",
    "@fortawesome/free-brands-svg-icons": "^6.0.0",
    "@fortawesome/free-regular-svg-icons": "^6.0.0",
    "@fortawesome/free-solid-svg-icons": "^6.0.0",
    "@fortawesome/react-fontawesome": "^0.1.18",
    "@prisma/client": "^3.11.1",
    "bn.js": "^5.2.0",
    "canvas": "^2.9.0",
    "dayjs": "^1.10.7",
    "dotenv-cli": "^5.0.0",
    "near-api-js": "ryancwalsh/near-api-js#gracefully-handle-window-and-buffer",
    "next": "^12.1.0",
    "next-ssl-redirect-middleware": "^0.1.3",
    "pg": "^8.8.0",
    "react": "17.0.2",
    "react-dom": "17.0.2",
    "wait-port": "^0.2.9",
    "zod": "^3.19.1",
    "zod-validation-error": "^0.2.1"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.0",
    "@types/jest": "^27.4.1",
    "@types/node": "^17.0.14",
    "@types/pg": "^8.6.5",
    "@types/react": "^17.0.38",
    "autoprefixer": "^10.4.2",
    "eslint": "^8.7.0",
    "eslint-config-airbnb-typescript-prettier": "^5.0.0",
    "eslint-config-near": "^1.0.1",
    "jest": "^27.5.1",
    "jest-mock-extended": "^2.0.4",
    "postcss": "^8.4.5",
    "prettier": "^2.5.1",
    "prisma": "^3.11.1",
    "sass": "^1.43.5",
    "tailwindcss": "^3.0.16",
    "ts-jest": "^27.1.3",
    "ts-node": "^10.7.0",
    "typescript": "^4.6.2"
  }
}

'''
'''--- web-app/pages/_middleware.ts ---
// https://stackoverflow.com/a/70311570/470749
// Redirects http to https. This is helpful if you are hosting your site on a service that doesn't have "force ssl" support out of the box (IE: heroku).
import sslRedirect from 'next-ssl-redirect-middleware'; // https://github.com/ChuckJonas/next-ssl-redirect-middleware

export default sslRedirect({});

'''
'''--- web-app/pages/api/cert/[imageFileName].ts ---
/* eslint-disable canonical/filename-match-regex */
// https://dev.to/sudo_overflow/diy-generating-dynamic-images-on-the-fly-for-email-marketing-h51
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import { type NextApiRequest, type NextApiResponse } from 'next';
import { createCanvas } from 'canvas';
import { type BufferType, type CanvasType, getSimpleStringFromParameter, parseFileName } from '../../../helpers/strings';
import { height, populateCert, width } from '../../../helpers/certificate-designs';
import { addCacheHeader } from '../../../helpers/caching';
import { type ImageIngredients } from '../../../helpers/types';
import { convertMillisecondsTimestampToFormattedDate } from '../../../helpers/time';

export const HTTP_ERROR_CODE_MISSING = 404;
const CACHE_SECONDS = Number(process.env.DYNAMIC_CERT_IMAGE_GENERATION_CACHE_SECONDS) || 60 * 60 * 6;
const API_URL = process.env.API_URL ?? '//127.0.0.1:4000/';

export async function fetchCertificateDetails(tokenId: string): Promise<ImageIngredients | null> {
  const response = await fetch(`${API_URL}cert/${tokenId}`);
  if (response.status !== 200) {
    console.error(response.statusText);
    return null;
  }

  const ingredients = await response.json();

  return {
    accountName: ingredients.account_name,
    date: convertMillisecondsTimestampToFormattedDate(ingredients.date),
    expiration: ingredients.expiration,
    instructor: ingredients.instructor,
    programCode: ingredients.program_code,
    programDescription: ingredients.program_description,
    programName: ingredients.program_name,
    tokenId: ingredients.token_id,
  };
}

async function generateImage(imageIngredients: ImageIngredients, canvasType: CanvasType, bufferType: BufferType = undefined) {
  const canvas = createCanvas(width, height, canvasType);

  await populateCert(canvas, imageIngredients);

  // Convert the Canvas to a buffer
  return bufferType ? canvas.toBuffer(bufferType) : canvas.toBuffer();
}

export default async function handler(request: NextApiRequest, response: NextApiResponse<Buffer | { error: string }>) {
  // Grab payload from query.
  const imageFileNameString = getSimpleStringFromParameter(request.query.imageFileName);
  const { bufferType, contentType, canvasType, tokenId } = parseFileName(imageFileNameString);

  const imageIngredients = await fetchCertificateDetails(tokenId);
  if (imageIngredients) {
    const imageBuffer = await generateImage(imageIngredients, canvasType, bufferType);
    response.setHeader('Content-Type', contentType);
    addCacheHeader(response, CACHE_SECONDS);

    // Caching is important (especially if we have a getExpiration function that pulls from the public indexer database).
    response.send(imageBuffer);
  } else {
    response.status(HTTP_ERROR_CODE_MISSING).json({ error: `No certificate exists with this Token ID (${tokenId}).` });
  }
}

'''
'''--- web-app/postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- web-app/prettier.config.js ---
// Remember to edit .vscode/settings.json like in https://paulintrognon.fr/blog/typescript-prettier-eslint-next-js

// https://prettier.io/docs/en/options.html
module.exports = {
  trailingComma: 'all',
  endOfLine: 'auto', // https://stackoverflow.com/a/53769213/
  printWidth: 180,
  bracketSpacing: true,
  useTabs: false,
  tabWidth: 2,
  semi: true,
  singleQuote: true,
  arrowParens: 'always',
  overrides: [
    {
      files: 'Routes.js',
      options: {
        printWidth: 200,
      },
    },
  ],
};

'''
'''--- web-app/prisma/seed.ts ---
// @ts-nocheck
// Disabling TypeScript checking for this file since it's only seeding. https://stackoverflow.com/a/51774725/470749
import dayjs from 'dayjs';
import client from '../test/test-helpers/client';
import { convertStringDateToNanoseconds } from '../helpers/time';
import generateActivityData from '../test/test-helpers/generate-account-activities';

// TODO: refactor comments

type SeedData = {
  account_activities: {
    included_in_block_timestamp: string;
    receipt_id: string;
  };
  signer_account_id: string;
};

async function seedForAccount(data: SeedData): Promise<void> {
  // Seed DB with sally.testnet data
  // create receipts and action_receipts for sally.testnet
  const receipts: Promise[] = [];
  const actionReceipts: Promise[] = [];

  /* eslint-disable camelcase, @typescript-eslint/naming-convention */
  // eslint-disable-next-line no-restricted-syntax
  for (const { included_in_block_timestamp, receipt_id } of data.account_activities) {
    receipts.push(
      client.receipts.upsert({
        create: {
          included_in_block_timestamp,
          receipt_id,
        },
        update: {
          included_in_block_timestamp,
        },
        where: { receipt_id },
      }),
    );

    actionReceipts.push(
      client.action_receipts.upsert({
        create: {
          receipt_id,
          signer_account_id: dataSally.signer_account_id,
        },
        update: {},
        where: { receipt_id },
      }),
    );
  }
  /* eslint-enable camelcase, @typescript-eslint/naming-convention */

  await Promise.all([Promise.all(receipts), Promise.all(actionReceipts)]);
}

// eslint-disable-next-line max-lines-per-function
async function main() {
  // * Seed file is structured according to the order of test cases in '../test/__tests__/expiration-date.test.ts'*

  // ########### START OF SEEDING DATA FOR sally.testnet ###########
  // -- Test Case 1 --
  // ACCOUNT: sally.testnet
  /**
   * Sally’s certificate was issued_at 2021-03-02T12:35:46+00:00,
   * She had no mainnet activitiy for 296 days (i.e. >180-days of inactivity)
   * Her last mainnet activity was on 2021-12-23T09:46:39+00:00
   * and she hasn’t been active since 2021-12-23T09:46:39+00:00
   */

  // sally.testnet data
  const dataSally = {
    account_activities: [
      {
        included_in_block_timestamp: convertStringDateToNanoseconds('2021-12-23T09:46:39+00:00'), // 296 days have passed since issue date, which was on 2021-03-02T12:35:46+00:00. moment = issue date. When getExpiration is called, query will return issue date as moment. Issuing a cert to an account is not an action recorded on account's mainnet transaction history and therefore cannot be directly reached from account activity data, also the reason for not being seeded here.
        receipt_id: 'Wt4a5NwKgihcWiKlU6NHDWhfoeE9b7HsYUIjTQAfCUoic',
      },
    ],
    signer_account_id: 'sally.testnet',
  };

  // Seed DB with sally.testnet data
  // create receipts and action_receipts for sally.testnet
  await seedForAccount(dataSally);
  // ########### END OF SEEDING DATA FOR sally.testnet ###########

  // ###########
  // Note: Test Case 2 (Account: patricia.testnet) does not rquire seeding data since account did not have had any activity after issue date.
  // ###########

  // ########### START OF SEEDING DATA FOR steve.testnet ###########
  // -- Test Case 3 --
  // ACCOUNT: steve.testnet
  /**
   * Steve's cert was issued_at 2021-01-05T11:15:09+00:00
   * He had frequent mainnet activity for a couple of months (through 2021-03-16T20:08:59+00:00)
   * but then no mainnet activity for 204 days (i.e. >180-days of inactivity)
   * and then had some more mainnet activity.
   * His last mainnet activity was on 2022-03-05T09:46:39+00:00
   * But none of that activity after his 180+ days of inactivity matters because his certificate should have expired 180 days after the
   * beginning of the *first* long period of inactivity (>=180 days).
   */

  // steve.testnet data
  const dataSteve = {
    account_activities: [
      {
        included_in_block_timestamp: convertStringDateToNanoseconds('2022-03-05T09:46:39+00:00'), // Most recent mainnet activity
        receipt_id: 'st4a5NwKgihcWiKlU6NHDWhfoeE9b7HsYUIjTQAfCUost',
      },
      {
        included_in_block_timestamp: convertStringDateToNanoseconds('2021-10-06T22:10:05+00:00'), // 204 days have passed since previous activity which was on 2021-03-16T20:08:59+00:00
        receipt_id: 'st02R6f58evLaZ3h306k9vs9PpAifXytsRABt4ngpHast',
      },
      {
        included_in_block_timestamp: convertStringDateToNanoseconds('2021-03-16T20:08:59+00:00'), // moment (start date of long inactivity period)
        receipt_id: 'st02R6f58evLaZ3h306k9vs9PpAifXytsRABt4ngpHa6V',
      },
    ],
    signer_account_id: 'steve.testnet',
  };

  // Create activities between dates where the account was frequently active according to the scenario.
  // Steve had frequent activity for a couple of months after issue date (2021-01-05T11:15:09+00:00) through 2021-03-16T20:08:59+00:00
  await generateActivityData(dataSteve, '2021-01-05T11:15:09+00:00', '2021-03-16T20:08:59+00:00', 'days', 5);
  // and more activity after 2021-10-06T22:10:05+00:00 through 2022—03—0509:46:39+00:00
  await generateActivityData(dataSteve, '2021-10-06T22:10:05+00:00', '2022—03—0509:46:39+00:00', 'days', 5);

  // Seed DB with steve.testnet data
  // create receipts and action_receipts for steve.testnet
  await seedForAccount(dataSteve);
  // ########### END OF SEEDING DATA FOR steve.testnet ###########

  // ######### START OF SEEDING DATA FOR bob.testnet #########
  // -- Test Case 4 --
  // ACCOUNT: bob.testnet
  /**
   * Bob's certificate was issued_at 2018-10-01T00:00:00+00:00,
   * he has not had any mainnet activity for 365 days (i.e. >180-days of inactivity)
   * then had frequent mainnet activity for a couple of years (through 2021-05-07T13:20:37+00:00)
   * then again no mainnet activity for 184 days
   * then, had frequent mainnet activity for a couple of months (through 2022-03-04T13:20:37+00:00)
   * His last mainnet activity was on 2022-03-04T13:20:37+00:00
   */

  // bob.testnet data
  const dataBob = {
    account_activities: [
      {
        included_in_block_timestamp: convertStringDateToNanoseconds('2022-03-04T13:20:37+00:00'), // Most recent mainnet activity
        receipt_id: 'UkcSMfikcRDP1xGRiRMSVPMciC2Mq1tndRC2Mq1tndRC2',
      },
      {
        included_in_block_timestamp: convertStringDateToNanoseconds('2021-11-07T13:20:37+00:00'), // 184 days have passed since previous activity which was on 2021-05-07T13:20:37+00:00
        receipt_id: 'RkcSMfikcRDP1xGRiRMSVPMciC2Mq1tndRC2Mq1tndRC2',
      },
      {
        included_in_block_timestamp: convertStringDateToNanoseconds('2021-05-07T13:20:37+00:00'),
        receipt_id: 'QkcSMfikcRDP1xGRiRMSVPMciC2Mq1tndRC2Mq1tndRC2',
      },
      {
        included_in_block_timestamp: convertStringDateToNanoseconds('2019-10-01T00:00:00+00:00'), // 365 days have passed since issue date, which was on 2018-10-01T00:00:00+00:00. moment = issue date. When getExpiration is called, query will return issue date as moment. Issuing a cert to an account is not an action recorded on account's mainnet transaction history and therefore cannot be directly reached from account activity data, also the reason for not being seeded here.
        receipt_id: 'FkcSMfikcRDP1xGRiRMSVPMciC2Mq1tndRC2Mq1tndRC2',
      },
    ],
    signer_account_id: 'bob.testnet',
  };

  // Create activities between dates where the account was frequently active according to the scenario.
  // Bob had frequent activity for a couple of years after 2019-10-01T13:20:37+00:00 through 2021-05-07T13:22:15+00:00
  await generateActivityData(dataBob, '2019-10-01T13:20:37+00:00', '2021-05-07T13:22:15+00:00', 'days', 5);
  // then again had frequent activity for a couple of months after 2021-11-07T13:13:12+00:00 through 2022-03-04T18:20:55+00:00
  await generateActivityData(dataBob, '2021-11-07T13:13:12+00:00', '2022-03-04T18:20:55+00:00', 'days', 5);

  // Seed DB with bob.testnet data
  // Create receipts and action_receipts for bob.testnet
  await seedForAccount(dataBob);
  // ######### END OF SEEDING DATA FOR bob.testnet #########

  // ########### START OF SEEDING DATA FOR alice.testnet ###########
  // -- Test Case 5 --
  // ACCOUNT: alice.testnet
  /**
   * Alice's cert was issued_at 2019-08-03T00:00:00+00:00
   * she has not had any mainnet activity for 214 days (i.e. >180-days of inactivity)
   * then again no mainnet activity for 190 days
   * then again no mainnet activity for 182 days
   * and has not had any mainnet activity since then.
   */

  // alice.testnet data
  const dataAlice = {
    account_activities: [
      {
        included_in_block_timestamp: convertStringDateToNanoseconds('2021-03-11T19:05:12+00:00'), // Most recent mainnet activity. 182 days have passed since previous activity which was on 2020-09-10T18:30:06+00:00
        receipt_id: 'al04R6f58evLaZ3h306k9vs9PpAifXytsRABt4ngpHa6b',
      },
      {
        included_in_block_timestamp: convertStringDateToNanoseconds('2020-09-10T18:30:06+00:00'), // 190 days have passed since previous activity which was on 2020-03-04T08:25:59+00:00
        receipt_id: 'al376vbsREdvLakfmcVkieiJhdshjfgbIewj73hncytsRb',
      },
      {
        included_in_block_timestamp: convertStringDateToNanoseconds('2020-03-04T08:25:59+00:00'), // 214 days have passed since issue date, which was on 2019-08-03T00:00:00+00:00. moment = issue date. When getExpiration is called, query will return issue date as moment. Issuing a cert to an account is not an action recorded on account's mainnet transaction history and therefore cannot be directly reached from account activity data, also the reason for not being seeded here.
        receipt_id: 'al98R6f58evkjlvmewopOFOKDjfdkKdjfksdfcmkskldew',
      },
    ],
    signer_account_id: 'alice.testnet',
  };

  // Seed DB with alice.testnet activity data
  // Create receipts and action_receipts for alice.testnet
  await seedForAccount(dataAlice);
  // ########### END OF SEEDING DATA FOR alice.testnet ###########

  // ########### START OF SEEDING DATA FOR rebecca.testnet ###########
  // -- Test Case 6 --
  // ACCOUNT: rebecca.testnet
  /**
   * Rebecca's cert was issued_at 2021-08-03T00:00:00+00:00
   * She has continued to have mainnet activity every couple of days through 2022-04-07T16:25:59+00:00
   */

  // rebecca.testnet data
  const dataRebecca = {
    account_activities: [],
    signer_account_id: 'rebecca.testnet',
  };

  // Seed DB with rebecca.testnet activity data
  // Create receipts and action_receipts for rebecca.testnet
  dataRebecca.account_activities.push({
    included_in_block_timestamp: convertStringDateToNanoseconds('2022-04-07T16:25:59+00:00'), // moment (most recent mainnet activity)
    receipt_id: 'rei9KjsfikcRDP1xGRiRMSVPMciC2Mq1tndRC2Mq1tsjd',
  });

  // Create activities between dates where the account was frequently active according to the scenario.
  // Rebecca had frequent activity every couple of days after issue date (2021-08-03T00:00:00+00:00) through 2022-04-07T16:25:59+00:00
  await generateActivityData(dataRebecca, '2021-08-03T00:00:00+00:00', '2022-04-07T16:25:59+00:00', 'days', 5);

  // Seed DB with rebecca.testnet activity data
  // Create receipts and action_receipts for rebecca.testnet
  await seedForAccount(dataRebecca);
  // ########### END OF SEEDING DATA FOR rebecca.testnet ###########

  // ########### START OF SEEDING DATA FOR jennifer.testnet ###########
  // -- Test Case 7 --
  // ACCOUNT: jennifer.testnet
  /**
   * Jennifer's cert was issued_at 2022-04-06T01:00:00+00:00
   * She has continued to have mainnet activity every couple of minutes through 2022-04-06T10:10:00+00:00
   */

  // jennifer.testnet data
  const dataJennifer = {
    account_activities: [],
    signer_account_id: 'jennifer.testnet',
  };

  // Create activities between dates where the account was frequently active according to the scenario.
  // Jennifer had frequent activity every couple of minutes from 2022-04-06T01:00:00+00:00 through 2022-04-06T10:20:00+00:00
  // moment is 2022-04-06T10:10:00+00:00 (most recent mainnet activity)
  await generateActivityData(dataJennifer, '2022-04-06T01:00:00+00:00', '2022-04-06T10:20:00+00:00', 'minutes', 10);

  // Seed DB with jennifer.testnet activity data
  // Create receipts and action_receipts for jennifer.testnet
  await seedForAccount(dataJennifer);
  // ########### END OF SEEDING DATA FOR jennifer.testnet ###########

  // ########### START OF SEEDING DATA FOR william.testnet ###########
  // -- Test Case 8 --
  // ACCOUNT: william.testnet
  /**
   * Williams's cert was issued_at 180 days and 2 hours prior to now (present moment)
   * He had activity 1 hour after the issue date
   * he has not had any mainnet activity since
   */

  // william.testnet data
  const dataWilliam = {
    account_activities: [],
    signer_account_id: 'william.testnet',
  };

  const startDateWilliam = dayjs.utc().subtract(180, 'days').subtract(2, 'hours');
  const endDateWilliam = dayjs.utc().subtract(180, 'days');

  // Create activities between dates where the account was frequently active according to the scenario.
  // William had activity between the hour of (present moment - 180 days - 2 hours) and (present moment - 180 days)
  // moment is present moment - 180 days - 1 hour (most recent mainnet activity)
  await generateActivityData(dataWilliam, startDateWilliam, endDateWilliam, 'hours', 1);

  // Seed DB with william.testnet activity data
  // Create receipts and action_receipts for william.testnet
  await seedForAccount(dataWilliam);
  // ########### END OF SEEDING DATA FOR william.testnet ###########

  // ########### START OF SEEDING DATA FOR john.testnet ###########
  // -- Test Case 9 --
  // ACCOUNT: john.testnet
  /**
   * John's cert was issued_at 180 days prior to now (present moment)
   * He had activity 1 hour after the issue date
   * he has not had any mainnet activity since
   */

  // john.testnet data
  const dataJohn = {
    account_activities: [],
    signer_account_id: 'john.testnet',
  };

  const startDateJohn = dayjs.utc().subtract(180, 'days');
  const endDateJohn = dayjs.utc().subtract(180, 'days').add(2, 'hours');

  // Create activities between dates where the account was frequently active according to the scenario.
  // John had activity between the hour of (present moment - 180 days) and (present moment - 180 days + 2 hours)
  // moment is present moment - 180 days + 1 hour (most recent mainnet activity)
  await generateActivityData(dataJohn, startDateJohn, endDateJohn, 'hours', 1);

  // Seed DB with john.testnet activity data
  // Create receipts and action_receipts for john.testnet
  await seedForAccount(dataJohn);
  // ########### END OF SEEDING DATA FOR john.testnet ###########

  console.log('✨ Seeding finished!');
}

main()
  .catch((error) => {
    console.error(error);
    process.exit(1);
  })
  .finally(() => {
    await client.$disconnect();
  });

'''
'''--- web-app/public/certificate-backgrounds/Analyst_certificate.svg ---
<svg width="1080" height="1080" viewBox="0 0 1080 1080" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="1.5" y="1.5" width="1077" height="1077" fill="white"/>
<mask id="mask0_54_38" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="647" height="647">
<rect width="647" height="647" fill="#C4C4C4"/>
</mask>
<g mask="url(#mask0_54_38)">
<g opacity="0.25" filter="url(#filter0_f_54_38)">
<path d="M202.719 -128.616C416.466 85.1307 507.43 340.718 405.894 442.255C304.358 543.791 48.7702 452.826 -164.977 239.079C-378.724 25.3323 -469.689 -230.255 -368.152 -331.792C-266.616 -433.328 -11.0283 -342.363 202.719 -128.616Z" fill="url(#paint0_linear_54_38)"/>
</g>
</g>
<path d="M310 71.1158C310 67.7381 312.675 65 315.974 65H367.519C370.818 65 373.493 67.7381 373.493 71.1158V123.884C373.493 127.262 370.818 130 367.519 130H315.974C312.675 130 310 127.262 310 123.884V71.1158Z" fill="black"/>
<path d="M420.631 80.9089V114.097C420.631 114.35 420.445 114.603 420.135 114.603H416.727C415.178 114.603 413.691 113.781 412.823 112.453L397.455 88.2419L397.951 100.316V114.16C397.951 114.413 397.765 114.666 397.455 114.666H392.994C392.746 114.666 392.498 114.476 392.498 114.16V80.9089C392.498 80.6561 392.684 80.4032 392.994 80.4032H396.34C397.889 80.4032 399.376 81.225 400.244 82.5525L415.612 106.701L415.116 94.6266V80.9089C415.116 80.6561 415.302 80.4032 415.612 80.4032H420.073C420.445 80.4032 420.631 80.5928 420.631 80.9089Z" fill="black"/>
<path d="M458.211 114.54H453.502C453.192 114.54 452.943 114.223 453.068 113.907L465.586 80.8457C465.709 80.5928 465.957 80.4032 466.205 80.4032H472.154C472.463 80.4032 472.712 80.5928 472.773 80.8457L485.353 113.907C485.477 114.223 485.228 114.54 484.919 114.54H480.21C480.023 114.54 479.838 114.413 479.776 114.223L469.675 87.0408C469.552 86.6616 468.931 86.6616 468.807 87.0408L458.707 114.223C458.583 114.413 458.397 114.54 458.211 114.54Z" fill="black"/>
<path d="M515.497 113.781L506.077 101.517C511.407 100.506 514.505 96.8392 514.505 91.2131C514.505 84.765 510.416 80.4032 503.103 80.4032H489.966C489.595 80.4032 489.285 80.7193 489.285 81.0986C489.285 83.6271 491.268 85.6501 493.746 85.6501H502.607C507.007 85.6501 509.114 87.9259 509.114 91.2762C509.114 94.6266 507.069 96.9024 502.607 96.9024H490.091C489.719 96.9024 489.408 97.2185 489.408 97.5978V114.034C489.408 114.287 489.595 114.54 489.904 114.54H494.366C494.613 114.54 494.862 114.35 494.862 114.034V101.833H500.005L508.184 112.706C509.052 113.907 510.416 114.54 511.903 114.54H515.31C515.559 114.54 515.744 114.097 515.497 113.781Z" fill="black"/>
<path d="M448.515 80.4032H427.757C427.385 80.4032 427.137 80.6561 427.137 81.0353C427.137 83.564 429.182 85.6501 431.661 85.6501H448.515C448.764 85.6501 449.011 85.4604 449.011 85.1443V80.8457C448.949 80.5928 448.764 80.4032 448.515 80.4032ZM448.515 109.293H433.024C432.776 109.293 432.528 109.103 432.528 108.787V100.253C432.528 100 432.714 99.7471 433.024 99.7471H447.338C447.587 99.7471 447.834 99.5575 447.834 99.2414V94.9428C447.834 94.6899 447.649 94.437 447.338 94.437H427.819C427.447 94.437 427.137 94.7531 427.137 95.1324V113.781C427.137 114.16 427.447 114.476 427.819 114.476H448.515C448.764 114.476 449.011 114.287 449.011 113.971V109.672C448.949 109.482 448.764 109.293 448.515 109.293Z" fill="black"/>
<path d="M353.07 80.2319L345.229 92.1574C344.687 92.9695 345.729 93.9526 346.48 93.2687L354.196 86.387C354.404 86.216 354.696 86.3443 354.696 86.6435V108.144C354.696 108.443 354.321 108.571 354.154 108.357L330.799 79.719C330.048 78.7786 328.964 78.2657 327.754 78.2657H326.92C324.751 78.2657 322.958 80.1037 322.958 82.3691V112.632C322.958 114.897 324.751 116.735 326.962 116.735C328.338 116.735 329.631 116.008 330.382 114.769L338.222 102.843C338.765 102.031 337.722 101.048 336.971 101.732L329.255 108.571C329.047 108.742 328.755 108.614 328.755 108.315V86.8572C328.755 86.558 329.13 86.4297 329.297 86.6435L352.653 115.282C353.404 116.222 354.53 116.735 355.697 116.735H356.531C358.742 116.735 360.535 114.897 360.535 112.632V82.3691C360.494 80.1037 358.7 78.2657 356.49 78.2657C355.113 78.2657 353.821 78.9923 353.07 80.2319Z" fill="white"/>
<path d="M562.969 80.88V101.339C562.969 105.73 561.782 109.031 559.407 111.242C557.032 113.454 553.574 114.56 549.031 114.56C544.556 114.56 541.115 113.454 538.706 111.242C536.331 109.031 535.144 105.73 535.144 101.339V80.88H540.667V100.686C540.667 103.836 541.339 106.165 542.681 107.673C544.057 109.148 546.174 109.885 549.031 109.885C551.922 109.885 554.038 109.148 555.38 107.673C556.757 106.165 557.445 103.836 557.445 100.686V80.88H562.969Z" fill="black"/>
<path d="M570.407 114.058V88.923H575.311L575.57 93.2462C576.43 91.5705 577.617 90.3473 579.132 89.5765C580.68 88.8058 582.401 88.4204 584.294 88.4204C586.118 88.4204 587.753 88.7722 589.199 89.476C590.678 90.1463 591.849 91.1852 592.709 92.5927C593.569 93.9667 594 95.6926 594 97.7704V114.058H588.476V99.4293C588.476 96.9493 587.942 95.2402 586.875 94.3018C585.843 93.33 584.535 92.844 582.952 92.844C581.816 92.844 580.715 93.0954 579.648 93.5981C578.581 94.1008 577.686 94.9386 576.964 96.1115C576.275 97.2509 575.931 98.7758 575.931 100.686V114.058H570.407Z" fill="black"/>
<path d="M604.125 84.7005C602.921 84.7005 601.991 84.4156 601.338 83.8459C600.718 83.2427 600.408 82.4048 600.408 81.3324C600.408 80.26 600.718 79.439 601.338 78.8692C601.991 78.2995 602.921 78.0147 604.125 78.0147C605.295 78.0147 606.19 78.2995 606.81 78.8692C607.464 79.439 607.791 80.26 607.791 81.3324C607.791 82.4048 607.464 83.2427 606.81 83.8459C606.19 84.4156 605.295 84.7005 604.125 84.7005ZM606.861 88.923V114.058H601.338V88.923H606.861Z" fill="black"/>
<path d="M631.456 88.923H637.238L626.965 114.058H620.925L610.6 88.923H616.691L623.97 109.383L631.456 88.923Z" fill="black"/>
<path d="M652.121 114.56C649.54 114.56 647.268 114.041 645.307 113.002C643.379 111.963 641.865 110.472 640.764 108.528C639.662 106.551 639.112 104.205 639.112 101.49C639.112 98.7758 639.645 96.4466 640.712 94.5029C641.813 92.5257 643.311 91.0176 645.203 89.9787C647.131 88.9398 649.333 88.4204 651.811 88.4204C654.324 88.4204 656.458 88.923 658.213 89.9284C659.968 90.9338 661.31 92.3078 662.24 94.0505C663.169 95.7931 663.633 97.7704 663.633 99.9822C663.633 100.619 663.616 101.205 663.582 101.742C663.547 102.278 663.496 102.73 663.427 103.099H644.532C644.773 105.445 645.548 107.238 646.855 108.478C648.198 109.684 649.919 110.287 652.018 110.287C653.739 110.287 655.133 109.969 656.2 109.332C657.266 108.696 658.11 107.807 658.729 106.668L663.117 108.679C662.222 110.522 660.794 111.963 658.832 113.002C656.905 114.041 654.668 114.56 652.121 114.56ZM651.708 92.6932C649.815 92.6932 648.249 93.2294 647.01 94.3018C645.806 95.3742 645.031 96.9326 644.687 98.9769H658.265C658.127 96.9661 657.473 95.4245 656.303 94.3521C655.133 93.2462 653.601 92.6932 651.708 92.6932Z" fill="black"/>
<path d="M669.577 114.058V88.923H674.275L674.791 93.4473C676.202 90.096 678.904 88.4204 682.896 88.4204C683.412 88.4204 683.928 88.4706 684.445 88.5712C684.961 88.6382 685.391 88.7555 685.735 88.923L684.961 93.6483C684.582 93.5143 684.152 93.4137 683.67 93.3467C683.223 93.2462 682.603 93.1959 681.812 93.1959C680.71 93.1959 679.644 93.4808 678.611 94.0505C677.613 94.5867 676.77 95.4245 676.081 96.5639C675.428 97.6699 675.101 99.0606 675.101 100.736V114.058H669.577Z" fill="black"/>
<path d="M698.872 114.56C696.29 114.56 693.933 114.074 691.799 113.102C689.665 112.131 687.979 110.757 686.74 108.98L690.56 105.763C691.317 107.137 692.401 108.243 693.812 109.081C695.258 109.885 696.979 110.287 698.975 110.287C700.558 110.287 701.814 110.019 702.744 109.483C703.673 108.947 704.137 108.193 704.137 107.221C704.137 106.584 703.914 106.031 703.466 105.562C703.053 105.059 702.244 104.674 701.04 104.406L695.619 103.3C692.866 102.764 690.904 101.892 689.734 100.686C688.564 99.4795 687.979 97.9715 687.979 96.1618C687.979 94.7878 688.392 93.5143 689.218 92.3413C690.078 91.1684 691.3 90.23 692.883 89.5263C694.466 88.789 696.376 88.4204 698.614 88.4204C701.16 88.4204 703.346 88.8728 705.17 89.7776C707.028 90.649 708.439 91.9057 709.403 93.5478L705.583 96.6645C704.895 95.324 703.914 94.3353 702.64 93.6986C701.401 93.0284 700.093 92.6932 698.717 92.6932C697.03 92.6932 695.723 92.9948 694.793 93.5981C693.899 94.1678 693.451 94.9218 693.451 95.8602C693.451 96.4969 693.709 97.0834 694.225 97.6196C694.742 98.1223 695.671 98.5077 697.013 98.7758L702.898 99.9822C705.376 100.451 707.114 101.256 708.112 102.395C709.145 103.501 709.661 104.858 709.661 106.467C709.661 108.88 708.698 110.84 706.77 112.348C704.843 113.823 702.21 114.56 698.872 114.56Z" fill="black"/>
<path d="M718.143 84.7005C716.938 84.7005 716.009 84.4156 715.355 83.8459C714.736 83.2427 714.426 82.4048 714.426 81.3324C714.426 80.26 714.736 79.439 715.355 78.8692C716.009 78.2995 716.938 78.0147 718.143 78.0147C719.313 78.0147 720.208 78.2995 720.827 78.8692C721.481 79.439 721.808 80.26 721.808 81.3324C721.808 82.4048 721.481 83.2427 720.827 83.8459C720.208 84.4156 719.313 84.7005 718.143 84.7005ZM720.879 88.923V114.058H715.355V88.923H720.879Z" fill="black"/>
<path d="M744.906 88.923V93.1456H736.026V106.517C736.026 107.724 736.371 108.628 737.059 109.232C737.747 109.801 738.642 110.086 739.743 110.086C740.707 110.086 741.516 109.952 742.17 109.684C742.858 109.383 743.495 108.98 744.08 108.478L745.319 112.399C744.527 113.069 743.546 113.605 742.376 114.007C741.241 114.376 739.967 114.56 738.556 114.56C736.285 114.56 734.374 114.024 732.826 112.952C731.277 111.846 730.503 110.003 730.503 107.422V93.1456H725.547V88.923H730.503V83.0416L736.026 81.5335V88.923H744.906Z" fill="black"/>
<path d="M772 88.923L760.694 117.023C759.558 119.939 758.268 121.967 756.822 123.106C755.377 124.279 753.518 124.865 751.247 124.865C749.973 124.865 748.82 124.715 747.788 124.413C746.756 124.111 745.843 123.676 745.052 123.106L746.394 118.934C747.633 120.006 749.13 120.542 750.885 120.542C751.815 120.542 752.641 120.308 753.363 119.838C754.121 119.369 754.792 118.397 755.377 116.923L756.513 114.208L753.776 107.975L745.723 88.923H751.918L757.648 104.708L759.145 109.433L760.849 104.255L766.27 88.923H772Z" fill="black"/>
<rect x="65" y="986.031" width="950" height="50" fill="#F5F5F5"/>

<line x1="65" y1="378.031" x2="1013" y2="378.031" stroke="black" stroke-opacity="0.24" stroke-width="2"/>
<rect x="65" y="650" width="950" height="112" fill="#F9E5C4"/>
<rect x="1.5" y="1.5" width="1077" height="1077" stroke="#5E94F4" stroke-width="3"/>
<defs>
<filter id="filter0_f_54_38" x="-609.7" y="-573.339" width="1257.14" height="1257.14" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="100" result="effect1_foregroundBlur_54_38"/>
</filter>
<linearGradient id="paint0_linear_54_38" x1="-382.766" y1="-346.405" x2="420.508" y2="456.868" gradientUnits="userSpaceOnUse">
<stop stop-color="#AFD060"/>
<stop offset="1" stop-color="#FCC368"/>
</linearGradient>
</defs>
</svg>

'''
'''--- web-app/public/certificate-backgrounds/Architect_certificate.svg ---
<svg width="1080" height="1080" viewBox="0 0 1080 1080" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="1.5" y="1.5" width="1077" height="1077" fill="white"/>
<mask id="mask0_54_50" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="647" height="647">
<rect width="647" height="647" fill="#C4C4C4"/>
</mask>
<g mask="url(#mask0_54_50)">
<g opacity="0.25" filter="url(#filter0_f_54_50)">
<path d="M202.719 -128.616C416.466 85.1307 507.43 340.718 405.894 442.255C304.358 543.791 48.7702 452.826 -164.977 239.079C-378.724 25.3323 -469.689 -230.255 -368.152 -331.792C-266.616 -433.328 -11.0283 -342.363 202.719 -128.616Z" fill="url(#paint0_linear_54_50)"/>
</g>
</g>
<path d="M310 71.1158C310 67.7381 312.675 65 315.974 65H367.519C370.818 65 373.493 67.7381 373.493 71.1158V123.884C373.493 127.262 370.818 130 367.519 130H315.974C312.675 130 310 127.262 310 123.884V71.1158Z" fill="black"/>
<path d="M420.631 80.9089V114.097C420.631 114.35 420.445 114.603 420.135 114.603H416.727C415.178 114.603 413.691 113.781 412.823 112.453L397.455 88.2419L397.951 100.316V114.16C397.951 114.413 397.765 114.666 397.455 114.666H392.994C392.746 114.666 392.498 114.476 392.498 114.16V80.9089C392.498 80.6561 392.684 80.4032 392.994 80.4032H396.34C397.889 80.4032 399.376 81.225 400.244 82.5525L415.612 106.701L415.116 94.6266V80.9089C415.116 80.6561 415.302 80.4032 415.612 80.4032H420.073C420.445 80.4032 420.631 80.5928 420.631 80.9089Z" fill="black"/>
<path d="M458.211 114.54H453.502C453.192 114.54 452.943 114.223 453.068 113.907L465.586 80.8457C465.709 80.5928 465.957 80.4032 466.205 80.4032H472.154C472.463 80.4032 472.712 80.5928 472.773 80.8457L485.353 113.907C485.477 114.223 485.228 114.54 484.919 114.54H480.21C480.023 114.54 479.838 114.413 479.776 114.223L469.675 87.0408C469.552 86.6616 468.931 86.6616 468.807 87.0408L458.707 114.223C458.583 114.413 458.397 114.54 458.211 114.54Z" fill="black"/>
<path d="M515.497 113.781L506.077 101.517C511.407 100.506 514.505 96.8392 514.505 91.2131C514.505 84.765 510.416 80.4032 503.103 80.4032H489.966C489.595 80.4032 489.285 80.7193 489.285 81.0986C489.285 83.6271 491.268 85.6501 493.746 85.6501H502.607C507.007 85.6501 509.114 87.9259 509.114 91.2762C509.114 94.6266 507.069 96.9024 502.607 96.9024H490.091C489.719 96.9024 489.408 97.2185 489.408 97.5978V114.034C489.408 114.287 489.595 114.54 489.904 114.54H494.366C494.613 114.54 494.862 114.35 494.862 114.034V101.833H500.005L508.184 112.706C509.052 113.907 510.416 114.54 511.903 114.54H515.31C515.559 114.54 515.744 114.097 515.497 113.781Z" fill="black"/>
<path d="M448.515 80.4032H427.757C427.385 80.4032 427.137 80.6561 427.137 81.0353C427.137 83.564 429.182 85.6501 431.661 85.6501H448.515C448.764 85.6501 449.011 85.4604 449.011 85.1443V80.8457C448.949 80.5928 448.764 80.4032 448.515 80.4032ZM448.515 109.293H433.024C432.776 109.293 432.528 109.103 432.528 108.787V100.253C432.528 100 432.714 99.7471 433.024 99.7471H447.338C447.587 99.7471 447.834 99.5575 447.834 99.2414V94.9428C447.834 94.6899 447.649 94.437 447.338 94.437H427.819C427.447 94.437 427.137 94.7531 427.137 95.1324V113.781C427.137 114.16 427.447 114.476 427.819 114.476H448.515C448.764 114.476 449.011 114.287 449.011 113.971V109.672C448.949 109.482 448.764 109.293 448.515 109.293Z" fill="black"/>
<path d="M353.07 80.2319L345.229 92.1574C344.687 92.9695 345.729 93.9526 346.48 93.2687L354.196 86.387C354.404 86.216 354.696 86.3443 354.696 86.6435V108.144C354.696 108.443 354.321 108.571 354.154 108.357L330.799 79.719C330.048 78.7786 328.964 78.2657 327.754 78.2657H326.92C324.751 78.2657 322.958 80.1037 322.958 82.3691V112.632C322.958 114.897 324.751 116.735 326.962 116.735C328.338 116.735 329.631 116.008 330.382 114.769L338.222 102.843C338.765 102.031 337.722 101.048 336.971 101.732L329.255 108.571C329.047 108.742 328.755 108.614 328.755 108.315V86.8572C328.755 86.558 329.13 86.4297 329.297 86.6435L352.653 115.282C353.404 116.222 354.53 116.735 355.697 116.735H356.531C358.742 116.735 360.535 114.897 360.535 112.632V82.3691C360.494 80.1037 358.7 78.2657 356.49 78.2657C355.113 78.2657 353.821 78.9923 353.07 80.2319Z" fill="white"/>
<path d="M562.969 80.88V101.339C562.969 105.73 561.782 109.031 559.407 111.242C557.032 113.454 553.574 114.56 549.031 114.56C544.556 114.56 541.115 113.454 538.706 111.242C536.331 109.031 535.144 105.73 535.144 101.339V80.88H540.667V100.686C540.667 103.836 541.339 106.165 542.681 107.673C544.057 109.148 546.174 109.885 549.031 109.885C551.922 109.885 554.038 109.148 555.38 107.673C556.757 106.165 557.445 103.836 557.445 100.686V80.88H562.969Z" fill="black"/>
<path d="M570.407 114.058V88.923H575.311L575.57 93.2462C576.43 91.5705 577.617 90.3473 579.132 89.5765C580.68 88.8058 582.401 88.4204 584.294 88.4204C586.118 88.4204 587.753 88.7722 589.199 89.476C590.678 90.1463 591.849 91.1852 592.709 92.5927C593.569 93.9667 594 95.6926 594 97.7704V114.058H588.476V99.4293C588.476 96.9493 587.942 95.2402 586.875 94.3018C585.843 93.33 584.535 92.844 582.952 92.844C581.816 92.844 580.715 93.0954 579.648 93.5981C578.581 94.1008 577.686 94.9386 576.964 96.1115C576.275 97.2509 575.931 98.7758 575.931 100.686V114.058H570.407Z" fill="black"/>
<path d="M604.125 84.7005C602.921 84.7005 601.991 84.4156 601.338 83.8459C600.718 83.2427 600.408 82.4048 600.408 81.3324C600.408 80.26 600.718 79.439 601.338 78.8692C601.991 78.2995 602.921 78.0147 604.125 78.0147C605.295 78.0147 606.19 78.2995 606.81 78.8692C607.464 79.439 607.791 80.26 607.791 81.3324C607.791 82.4048 607.464 83.2427 606.81 83.8459C606.19 84.4156 605.295 84.7005 604.125 84.7005ZM606.861 88.923V114.058H601.338V88.923H606.861Z" fill="black"/>
<path d="M631.456 88.923H637.238L626.965 114.058H620.925L610.6 88.923H616.691L623.97 109.383L631.456 88.923Z" fill="black"/>
<path d="M652.121 114.56C649.54 114.56 647.268 114.041 645.307 113.002C643.379 111.963 641.865 110.472 640.764 108.528C639.662 106.551 639.112 104.205 639.112 101.49C639.112 98.7758 639.645 96.4466 640.712 94.5029C641.813 92.5257 643.311 91.0176 645.203 89.9787C647.131 88.9398 649.333 88.4204 651.811 88.4204C654.324 88.4204 656.458 88.923 658.213 89.9284C659.968 90.9338 661.31 92.3078 662.24 94.0505C663.169 95.7931 663.633 97.7704 663.633 99.9822C663.633 100.619 663.616 101.205 663.582 101.742C663.547 102.278 663.496 102.73 663.427 103.099H644.532C644.773 105.445 645.548 107.238 646.855 108.478C648.198 109.684 649.919 110.287 652.018 110.287C653.739 110.287 655.133 109.969 656.2 109.332C657.266 108.696 658.11 107.807 658.729 106.668L663.117 108.679C662.222 110.522 660.794 111.963 658.832 113.002C656.905 114.041 654.668 114.56 652.121 114.56ZM651.708 92.6932C649.815 92.6932 648.249 93.2294 647.01 94.3018C645.806 95.3742 645.031 96.9326 644.687 98.9769H658.265C658.127 96.9661 657.473 95.4245 656.303 94.3521C655.133 93.2462 653.601 92.6932 651.708 92.6932Z" fill="black"/>
<path d="M669.577 114.058V88.923H674.275L674.791 93.4473C676.202 90.096 678.904 88.4204 682.896 88.4204C683.412 88.4204 683.928 88.4706 684.445 88.5712C684.961 88.6382 685.391 88.7555 685.735 88.923L684.961 93.6483C684.582 93.5143 684.152 93.4137 683.67 93.3467C683.223 93.2462 682.603 93.1959 681.812 93.1959C680.71 93.1959 679.644 93.4808 678.611 94.0505C677.613 94.5867 676.77 95.4245 676.081 96.5639C675.428 97.6699 675.101 99.0606 675.101 100.736V114.058H669.577Z" fill="black"/>
<path d="M698.872 114.56C696.29 114.56 693.933 114.074 691.799 113.102C689.665 112.131 687.979 110.757 686.74 108.98L690.56 105.763C691.317 107.137 692.401 108.243 693.812 109.081C695.258 109.885 696.979 110.287 698.975 110.287C700.558 110.287 701.814 110.019 702.744 109.483C703.673 108.947 704.137 108.193 704.137 107.221C704.137 106.584 703.914 106.031 703.466 105.562C703.053 105.059 702.244 104.674 701.04 104.406L695.619 103.3C692.866 102.764 690.904 101.892 689.734 100.686C688.564 99.4795 687.979 97.9715 687.979 96.1618C687.979 94.7878 688.392 93.5143 689.218 92.3413C690.078 91.1684 691.3 90.23 692.883 89.5263C694.466 88.789 696.376 88.4204 698.614 88.4204C701.16 88.4204 703.346 88.8728 705.17 89.7776C707.028 90.649 708.439 91.9057 709.403 93.5478L705.583 96.6645C704.895 95.324 703.914 94.3353 702.64 93.6986C701.401 93.0284 700.093 92.6932 698.717 92.6932C697.03 92.6932 695.723 92.9948 694.793 93.5981C693.899 94.1678 693.451 94.9218 693.451 95.8602C693.451 96.4969 693.709 97.0834 694.225 97.6196C694.742 98.1223 695.671 98.5077 697.013 98.7758L702.898 99.9822C705.376 100.451 707.114 101.256 708.112 102.395C709.145 103.501 709.661 104.858 709.661 106.467C709.661 108.88 708.698 110.84 706.77 112.348C704.843 113.823 702.21 114.56 698.872 114.56Z" fill="black"/>
<path d="M718.143 84.7005C716.938 84.7005 716.009 84.4156 715.355 83.8459C714.736 83.2427 714.426 82.4048 714.426 81.3324C714.426 80.26 714.736 79.439 715.355 78.8692C716.009 78.2995 716.938 78.0147 718.143 78.0147C719.313 78.0147 720.208 78.2995 720.827 78.8692C721.481 79.439 721.808 80.26 721.808 81.3324C721.808 82.4048 721.481 83.2427 720.827 83.8459C720.208 84.4156 719.313 84.7005 718.143 84.7005ZM720.879 88.923V114.058H715.355V88.923H720.879Z" fill="black"/>
<path d="M744.906 88.923V93.1456H736.026V106.517C736.026 107.724 736.371 108.628 737.059 109.232C737.747 109.801 738.642 110.086 739.743 110.086C740.707 110.086 741.516 109.952 742.17 109.684C742.858 109.383 743.495 108.98 744.08 108.478L745.319 112.399C744.527 113.069 743.546 113.605 742.376 114.007C741.241 114.376 739.967 114.56 738.556 114.56C736.285 114.56 734.374 114.024 732.826 112.952C731.277 111.846 730.503 110.003 730.503 107.422V93.1456H725.547V88.923H730.503V83.0416L736.026 81.5335V88.923H744.906Z" fill="black"/>
<path d="M772 88.923L760.694 117.023C759.558 119.939 758.268 121.967 756.822 123.106C755.377 124.279 753.518 124.865 751.247 124.865C749.973 124.865 748.82 124.715 747.788 124.413C746.756 124.111 745.843 123.676 745.052 123.106L746.394 118.934C747.633 120.006 749.13 120.542 750.885 120.542C751.815 120.542 752.641 120.308 753.363 119.838C754.121 119.369 754.792 118.397 755.377 116.923L756.513 114.208L753.776 107.975L745.723 88.923H751.918L757.648 104.708L759.145 109.433L760.849 104.255L766.27 88.923H772Z" fill="black"/>
<rect x="65" y="986.031" width="950" height="50" fill="#F5F5F5"/>

<line x1="65" y1="378.031" x2="1013" y2="378.031" stroke="black" stroke-opacity="0.24" stroke-width="2"/>
<rect opacity="0.7" x="65" y="650" width="950" height="112" fill="#ECBEBF"/>
<rect x="1.5" y="1.5" width="1077" height="1077" stroke="#5E94F4" stroke-width="3"/>
<defs>
<filter id="filter0_f_54_50" x="-609.7" y="-573.339" width="1257.14" height="1257.14" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="100" result="effect1_foregroundBlur_54_50"/>
</filter>
<linearGradient id="paint0_linear_54_50" x1="-382.766" y1="-346.405" x2="420.508" y2="456.868" gradientUnits="userSpaceOnUse">
<stop stop-color="#D95B5B"/>
<stop offset="1" stop-color="#E49761"/>
</linearGradient>
</defs>
</svg>

'''
'''--- web-app/public/certificate-backgrounds/Designer_certificate.svg ---
<svg width="1080" height="1080" viewBox="0 0 1080 1080" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="1.5" y="1.5" width="1077" height="1077" fill="white"/>
<mask id="mask0_54_26" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="647" height="647">
<rect width="647" height="647" fill="#C4C4C4"/>
</mask>
<g mask="url(#mask0_54_26)">
<g opacity="0.25" filter="url(#filter0_f_54_26)">
<path d="M202.719 -128.616C416.466 85.1307 507.43 340.718 405.894 442.255C304.358 543.791 48.7702 452.826 -164.977 239.079C-378.724 25.3323 -469.689 -230.255 -368.152 -331.792C-266.616 -433.328 -11.0283 -342.363 202.719 -128.616Z" fill="url(#paint0_linear_54_26)"/>
</g>
</g>
<path d="M310 71.1158C310 67.7381 312.675 65 315.974 65H367.519C370.818 65 373.493 67.7381 373.493 71.1158V123.884C373.493 127.262 370.818 130 367.519 130H315.974C312.675 130 310 127.262 310 123.884V71.1158Z" fill="black"/>
<path d="M420.631 80.9089V114.097C420.631 114.35 420.445 114.603 420.135 114.603H416.727C415.178 114.603 413.691 113.781 412.823 112.453L397.455 88.2419L397.951 100.316V114.16C397.951 114.413 397.765 114.666 397.455 114.666H392.994C392.746 114.666 392.498 114.476 392.498 114.16V80.9089C392.498 80.6561 392.684 80.4032 392.994 80.4032H396.34C397.889 80.4032 399.376 81.225 400.244 82.5525L415.612 106.701L415.116 94.6266V80.9089C415.116 80.6561 415.302 80.4032 415.612 80.4032H420.073C420.445 80.4032 420.631 80.5928 420.631 80.9089Z" fill="black"/>
<path d="M458.211 114.54H453.502C453.192 114.54 452.943 114.223 453.068 113.907L465.586 80.8457C465.709 80.5928 465.957 80.4032 466.205 80.4032H472.154C472.463 80.4032 472.712 80.5928 472.773 80.8457L485.353 113.907C485.477 114.223 485.228 114.54 484.919 114.54H480.21C480.023 114.54 479.838 114.413 479.776 114.223L469.675 87.0408C469.552 86.6616 468.931 86.6616 468.807 87.0408L458.707 114.223C458.583 114.413 458.397 114.54 458.211 114.54Z" fill="black"/>
<path d="M515.497 113.781L506.077 101.517C511.407 100.506 514.505 96.8392 514.505 91.2131C514.505 84.765 510.416 80.4032 503.103 80.4032H489.966C489.595 80.4032 489.285 80.7193 489.285 81.0986C489.285 83.6271 491.268 85.6501 493.746 85.6501H502.607C507.007 85.6501 509.114 87.9259 509.114 91.2762C509.114 94.6266 507.069 96.9024 502.607 96.9024H490.091C489.719 96.9024 489.408 97.2185 489.408 97.5978V114.034C489.408 114.287 489.595 114.54 489.904 114.54H494.366C494.613 114.54 494.862 114.35 494.862 114.034V101.833H500.005L508.184 112.706C509.052 113.907 510.416 114.54 511.903 114.54H515.31C515.559 114.54 515.744 114.097 515.497 113.781Z" fill="black"/>
<path d="M448.515 80.4032H427.757C427.385 80.4032 427.137 80.6561 427.137 81.0353C427.137 83.564 429.182 85.6501 431.661 85.6501H448.515C448.764 85.6501 449.011 85.4604 449.011 85.1443V80.8457C448.949 80.5928 448.764 80.4032 448.515 80.4032ZM448.515 109.293H433.024C432.776 109.293 432.528 109.103 432.528 108.787V100.253C432.528 100 432.714 99.7471 433.024 99.7471H447.338C447.587 99.7471 447.834 99.5575 447.834 99.2414V94.9428C447.834 94.6899 447.649 94.437 447.338 94.437H427.819C427.447 94.437 427.137 94.7531 427.137 95.1324V113.781C427.137 114.16 427.447 114.476 427.819 114.476H448.515C448.764 114.476 449.011 114.287 449.011 113.971V109.672C448.949 109.482 448.764 109.293 448.515 109.293Z" fill="black"/>
<path d="M353.07 80.2319L345.229 92.1574C344.687 92.9695 345.729 93.9526 346.48 93.2687L354.196 86.387C354.404 86.216 354.696 86.3443 354.696 86.6435V108.144C354.696 108.443 354.321 108.571 354.154 108.357L330.799 79.719C330.048 78.7786 328.964 78.2657 327.754 78.2657H326.92C324.751 78.2657 322.958 80.1037 322.958 82.3691V112.632C322.958 114.897 324.751 116.735 326.962 116.735C328.338 116.735 329.631 116.008 330.382 114.769L338.222 102.843C338.765 102.031 337.722 101.048 336.971 101.732L329.255 108.571C329.047 108.742 328.755 108.614 328.755 108.315V86.8572C328.755 86.558 329.13 86.4297 329.297 86.6435L352.653 115.282C353.404 116.222 354.53 116.735 355.697 116.735H356.531C358.742 116.735 360.535 114.897 360.535 112.632V82.3691C360.494 80.1037 358.7 78.2657 356.49 78.2657C355.113 78.2657 353.821 78.9923 353.07 80.2319Z" fill="white"/>
<path d="M562.969 80.88V101.339C562.969 105.73 561.782 109.031 559.407 111.242C557.032 113.454 553.574 114.56 549.031 114.56C544.556 114.56 541.115 113.454 538.706 111.242C536.331 109.031 535.144 105.73 535.144 101.339V80.88H540.667V100.686C540.667 103.836 541.339 106.165 542.681 107.673C544.057 109.148 546.174 109.885 549.031 109.885C551.922 109.885 554.038 109.148 555.38 107.673C556.757 106.165 557.445 103.836 557.445 100.686V80.88H562.969Z" fill="black"/>
<path d="M570.407 114.058V88.923H575.311L575.57 93.2462C576.43 91.5705 577.617 90.3473 579.132 89.5765C580.68 88.8058 582.401 88.4204 584.294 88.4204C586.118 88.4204 587.753 88.7722 589.199 89.476C590.678 90.1463 591.849 91.1852 592.709 92.5927C593.569 93.9667 594 95.6926 594 97.7704V114.058H588.476V99.4293C588.476 96.9493 587.942 95.2402 586.875 94.3018C585.843 93.33 584.535 92.844 582.952 92.844C581.816 92.844 580.715 93.0954 579.648 93.5981C578.581 94.1008 577.686 94.9386 576.964 96.1115C576.275 97.2509 575.931 98.7758 575.931 100.686V114.058H570.407Z" fill="black"/>
<path d="M604.125 84.7005C602.921 84.7005 601.991 84.4156 601.338 83.8459C600.718 83.2427 600.408 82.4048 600.408 81.3324C600.408 80.26 600.718 79.439 601.338 78.8692C601.991 78.2995 602.921 78.0147 604.125 78.0147C605.295 78.0147 606.19 78.2995 606.81 78.8692C607.464 79.439 607.791 80.26 607.791 81.3324C607.791 82.4048 607.464 83.2427 606.81 83.8459C606.19 84.4156 605.295 84.7005 604.125 84.7005ZM606.861 88.923V114.058H601.338V88.923H606.861Z" fill="black"/>
<path d="M631.456 88.923H637.238L626.965 114.058H620.925L610.6 88.923H616.691L623.97 109.383L631.456 88.923Z" fill="black"/>
<path d="M652.121 114.56C649.54 114.56 647.268 114.041 645.307 113.002C643.379 111.963 641.865 110.472 640.764 108.528C639.662 106.551 639.112 104.205 639.112 101.49C639.112 98.7758 639.645 96.4466 640.712 94.5029C641.813 92.5257 643.311 91.0176 645.203 89.9787C647.131 88.9398 649.333 88.4204 651.811 88.4204C654.324 88.4204 656.458 88.923 658.213 89.9284C659.968 90.9338 661.31 92.3078 662.24 94.0505C663.169 95.7931 663.633 97.7704 663.633 99.9822C663.633 100.619 663.616 101.205 663.582 101.742C663.547 102.278 663.496 102.73 663.427 103.099H644.532C644.773 105.445 645.548 107.238 646.855 108.478C648.198 109.684 649.919 110.287 652.018 110.287C653.739 110.287 655.133 109.969 656.2 109.332C657.266 108.696 658.11 107.807 658.729 106.668L663.117 108.679C662.222 110.522 660.794 111.963 658.832 113.002C656.905 114.041 654.668 114.56 652.121 114.56ZM651.708 92.6932C649.815 92.6932 648.249 93.2294 647.01 94.3018C645.806 95.3742 645.031 96.9326 644.687 98.9769H658.265C658.127 96.9661 657.473 95.4245 656.303 94.3521C655.133 93.2462 653.601 92.6932 651.708 92.6932Z" fill="black"/>
<path d="M669.577 114.058V88.923H674.275L674.791 93.4473C676.202 90.096 678.904 88.4204 682.896 88.4204C683.412 88.4204 683.928 88.4706 684.445 88.5712C684.961 88.6382 685.391 88.7555 685.735 88.923L684.961 93.6483C684.582 93.5143 684.152 93.4137 683.67 93.3467C683.223 93.2462 682.603 93.1959 681.812 93.1959C680.71 93.1959 679.644 93.4808 678.611 94.0505C677.613 94.5867 676.77 95.4245 676.081 96.5639C675.428 97.6699 675.101 99.0606 675.101 100.736V114.058H669.577Z" fill="black"/>
<path d="M698.872 114.56C696.29 114.56 693.933 114.074 691.799 113.102C689.665 112.131 687.979 110.757 686.74 108.98L690.56 105.763C691.317 107.137 692.401 108.243 693.812 109.081C695.258 109.885 696.979 110.287 698.975 110.287C700.558 110.287 701.814 110.019 702.744 109.483C703.673 108.947 704.137 108.193 704.137 107.221C704.137 106.584 703.914 106.031 703.466 105.562C703.053 105.059 702.244 104.674 701.04 104.406L695.619 103.3C692.866 102.764 690.904 101.892 689.734 100.686C688.564 99.4795 687.979 97.9715 687.979 96.1618C687.979 94.7878 688.392 93.5143 689.218 92.3413C690.078 91.1684 691.3 90.23 692.883 89.5263C694.466 88.789 696.376 88.4204 698.614 88.4204C701.16 88.4204 703.346 88.8728 705.17 89.7776C707.028 90.649 708.439 91.9057 709.403 93.5478L705.583 96.6645C704.895 95.324 703.914 94.3353 702.64 93.6986C701.401 93.0284 700.093 92.6932 698.717 92.6932C697.03 92.6932 695.723 92.9948 694.793 93.5981C693.899 94.1678 693.451 94.9218 693.451 95.8602C693.451 96.4969 693.709 97.0834 694.225 97.6196C694.742 98.1223 695.671 98.5077 697.013 98.7758L702.898 99.9822C705.376 100.451 707.114 101.256 708.112 102.395C709.145 103.501 709.661 104.858 709.661 106.467C709.661 108.88 708.698 110.84 706.77 112.348C704.843 113.823 702.21 114.56 698.872 114.56Z" fill="black"/>
<path d="M718.143 84.7005C716.938 84.7005 716.009 84.4156 715.355 83.8459C714.736 83.2427 714.426 82.4048 714.426 81.3324C714.426 80.26 714.736 79.439 715.355 78.8692C716.009 78.2995 716.938 78.0147 718.143 78.0147C719.313 78.0147 720.208 78.2995 720.827 78.8692C721.481 79.439 721.808 80.26 721.808 81.3324C721.808 82.4048 721.481 83.2427 720.827 83.8459C720.208 84.4156 719.313 84.7005 718.143 84.7005ZM720.879 88.923V114.058H715.355V88.923H720.879Z" fill="black"/>
<path d="M744.906 88.923V93.1456H736.026V106.517C736.026 107.724 736.371 108.628 737.059 109.232C737.747 109.801 738.642 110.086 739.743 110.086C740.707 110.086 741.516 109.952 742.17 109.684C742.858 109.383 743.495 108.98 744.08 108.478L745.319 112.399C744.527 113.069 743.546 113.605 742.376 114.007C741.241 114.376 739.967 114.56 738.556 114.56C736.285 114.56 734.374 114.024 732.826 112.952C731.277 111.846 730.503 110.003 730.503 107.422V93.1456H725.547V88.923H730.503V83.0416L736.026 81.5335V88.923H744.906Z" fill="black"/>
<path d="M772 88.923L760.694 117.023C759.558 119.939 758.268 121.967 756.822 123.106C755.377 124.279 753.518 124.865 751.247 124.865C749.973 124.865 748.82 124.715 747.788 124.413C746.756 124.111 745.843 123.676 745.052 123.106L746.394 118.934C747.633 120.006 749.13 120.542 750.885 120.542C751.815 120.542 752.641 120.308 753.363 119.838C754.121 119.369 754.792 118.397 755.377 116.923L756.513 114.208L753.776 107.975L745.723 88.923H751.918L757.648 104.708L759.145 109.433L760.849 104.255L766.27 88.923H772Z" fill="black"/>
<rect x="65" y="986.031" width="950" height="50" fill="#F5F5F5"/>

<line x1="65" y1="378.031" x2="1013" y2="378.031" stroke="black" stroke-opacity="0.24" stroke-width="2"/>
<rect x="65" y="650" width="950" height="112" fill="#D5C6F6"/>
<rect x="1.5" y="1.5" width="1077" height="1077" stroke="#5E94F4" stroke-width="3"/>
<defs>
<filter id="filter0_f_54_26" x="-609.7" y="-573.339" width="1257.14" height="1257.14" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="100" result="effect1_foregroundBlur_54_26"/>
</filter>
<linearGradient id="paint0_linear_54_26" x1="-382.766" y1="-346.405" x2="420.508" y2="456.868" gradientUnits="userSpaceOnUse">
<stop stop-color="#618CF7"/>
<stop offset="1" stop-color="#9F67B3"/>
</linearGradient>
</defs>
</svg>

'''
'''--- web-app/public/certificate-backgrounds/Developer_certificate.svg ---
<?xml version="1.0" encoding="utf-8"?>
<svg width="1080" height="1080" viewBox="0 0 1080 1080" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect x="1.5" y="1.5" width="1077" height="1077" fill="white"/>
  <mask id="mask0_2_4053" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="647" height="647">
    <rect width="647" height="647" fill="#C4C4C4"/>
  </mask>
  <g mask="url(#mask0_2_4053)">
    <g opacity="0.25" filter="url(#filter0_f_2_4053)">
      <path d="M263.246 -116.81C496.967 116.911 596.433 396.383 485.408 507.408C374.383 618.433 94.9113 518.967 -138.81 285.246C-372.531 51.5247 -471.997 -227.947 -360.972 -338.972C-249.947 -449.997 29.5248 -350.531 263.246 -116.81Z" fill="url(#paint0_linear_2_4053)"/>
    </g>
  </g>
  <path d="M310 71.1158C310 67.7381 312.675 65 315.974 65H367.519C370.818 65 373.493 67.7381 373.493 71.1158V123.884C373.493 127.262 370.818 130 367.519 130H315.974C312.675 130 310 127.262 310 123.884V71.1158Z" fill="black"/>
  <path d="M420.631 80.9089V114.097C420.631 114.35 420.445 114.603 420.135 114.603H416.727C415.178 114.603 413.691 113.781 412.823 112.453L397.455 88.2419L397.951 100.316V114.16C397.951 114.413 397.765 114.666 397.455 114.666H392.994C392.746 114.666 392.498 114.476 392.498 114.16V80.9089C392.498 80.6561 392.684 80.4032 392.994 80.4032H396.34C397.889 80.4032 399.376 81.225 400.244 82.5525L415.612 106.701L415.116 94.6266V80.9089C415.116 80.6561 415.302 80.4032 415.612 80.4032H420.073C420.445 80.4032 420.631 80.5928 420.631 80.9089Z" fill="black"/>
  <path d="M458.211 114.54H453.502C453.192 114.54 452.943 114.223 453.068 113.907L465.586 80.8457C465.709 80.5928 465.957 80.4032 466.205 80.4032H472.154C472.463 80.4032 472.712 80.5928 472.773 80.8457L485.353 113.907C485.477 114.223 485.228 114.54 484.919 114.54H480.21C480.023 114.54 479.838 114.413 479.776 114.223L469.675 87.0408C469.552 86.6616 468.931 86.6616 468.807 87.0408L458.707 114.223C458.583 114.413 458.397 114.54 458.211 114.54Z" fill="black"/>
  <path d="M515.497 113.781L506.077 101.517C511.407 100.506 514.505 96.8392 514.505 91.2131C514.505 84.765 510.416 80.4032 503.103 80.4032H489.966C489.595 80.4032 489.285 80.7193 489.285 81.0986C489.285 83.6271 491.268 85.6501 493.746 85.6501H502.607C507.007 85.6501 509.114 87.9259 509.114 91.2762C509.114 94.6266 507.069 96.9024 502.607 96.9024H490.091C489.719 96.9024 489.408 97.2185 489.408 97.5978V114.034C489.408 114.287 489.595 114.54 489.904 114.54H494.366C494.613 114.54 494.862 114.35 494.862 114.034V101.833H500.005L508.184 112.706C509.052 113.907 510.416 114.54 511.903 114.54H515.31C515.559 114.54 515.744 114.097 515.497 113.781Z" fill="black"/>
  <path d="M448.515 80.4032H427.757C427.385 80.4032 427.137 80.6561 427.137 81.0353C427.137 83.564 429.182 85.6501 431.661 85.6501H448.515C448.764 85.6501 449.011 85.4604 449.011 85.1443V80.8457C448.949 80.5928 448.764 80.4032 448.515 80.4032ZM448.515 109.293H433.024C432.776 109.293 432.528 109.103 432.528 108.787V100.253C432.528 100 432.714 99.7471 433.024 99.7471H447.338C447.587 99.7471 447.834 99.5575 447.834 99.2414V94.9428C447.834 94.6899 447.649 94.437 447.338 94.437H427.819C427.447 94.437 427.137 94.7531 427.137 95.1324V113.781C427.137 114.16 427.447 114.476 427.819 114.476H448.515C448.764 114.476 449.011 114.287 449.011 113.971V109.672C448.949 109.482 448.764 109.293 448.515 109.293Z" fill="black"/>
  <path d="M353.07 80.2319L345.229 92.1574C344.687 92.9695 345.729 93.9526 346.48 93.2687L354.196 86.387C354.404 86.216 354.696 86.3443 354.696 86.6435V108.144C354.696 108.443 354.321 108.571 354.154 108.357L330.799 79.719C330.048 78.7786 328.964 78.2657 327.754 78.2657H326.92C324.751 78.2657 322.958 80.1037 322.958 82.3691V112.632C322.958 114.897 324.751 116.735 326.962 116.735C328.338 116.735 329.631 116.008 330.382 114.769L338.222 102.843C338.765 102.031 337.722 101.048 336.971 101.732L329.255 108.571C329.047 108.742 328.755 108.614 328.755 108.315V86.8572C328.755 86.558 329.13 86.4297 329.297 86.6435L352.653 115.282C353.404 116.222 354.53 116.735 355.697 116.735H356.531C358.742 116.735 360.535 114.897 360.535 112.632V82.3691C360.494 80.1037 358.7 78.2657 356.49 78.2657C355.113 78.2657 353.821 78.9923 353.07 80.2319Z" fill="white"/>
  <path d="M562.969 80.88V101.339C562.969 105.73 561.782 109.031 559.407 111.242C557.032 113.454 553.574 114.56 549.031 114.56C544.556 114.56 541.115 113.454 538.706 111.242C536.331 109.031 535.144 105.73 535.144 101.339V80.88H540.667V100.686C540.667 103.836 541.339 106.165 542.681 107.673C544.057 109.148 546.174 109.885 549.031 109.885C551.922 109.885 554.038 109.148 555.38 107.673C556.757 106.165 557.445 103.836 557.445 100.686V80.88H562.969Z" fill="black"/>
  <path d="M570.407 114.058V88.923H575.311L575.57 93.2462C576.43 91.5705 577.617 90.3473 579.132 89.5765C580.68 88.8058 582.401 88.4204 584.294 88.4204C586.118 88.4204 587.753 88.7722 589.199 89.476C590.678 90.1463 591.849 91.1852 592.709 92.5927C593.569 93.9667 594 95.6926 594 97.7704V114.058H588.476V99.4293C588.476 96.9493 587.942 95.2402 586.875 94.3018C585.843 93.33 584.535 92.844 582.952 92.844C581.816 92.844 580.715 93.0954 579.648 93.5981C578.581 94.1008 577.686 94.9386 576.964 96.1115C576.275 97.2509 575.931 98.7758 575.931 100.686V114.058H570.407Z" fill="black"/>
  <path d="M604.125 84.7005C602.921 84.7005 601.991 84.4156 601.338 83.8459C600.718 83.2427 600.408 82.4048 600.408 81.3324C600.408 80.26 600.718 79.439 601.338 78.8692C601.991 78.2995 602.921 78.0147 604.125 78.0147C605.295 78.0147 606.19 78.2995 606.81 78.8692C607.464 79.439 607.791 80.26 607.791 81.3324C607.791 82.4048 607.464 83.2427 606.81 83.8459C606.19 84.4156 605.295 84.7005 604.125 84.7005ZM606.861 88.923V114.058H601.338V88.923H606.861Z" fill="black"/>
  <path d="M631.456 88.923H637.238L626.965 114.058H620.925L610.6 88.923H616.691L623.97 109.383L631.456 88.923Z" fill="black"/>
  <path d="M652.121 114.56C649.54 114.56 647.268 114.041 645.307 113.002C643.379 111.963 641.865 110.472 640.764 108.528C639.662 106.551 639.112 104.205 639.112 101.49C639.112 98.7758 639.645 96.4466 640.712 94.5029C641.813 92.5257 643.311 91.0176 645.203 89.9787C647.131 88.9398 649.333 88.4204 651.811 88.4204C654.324 88.4204 656.458 88.923 658.213 89.9284C659.968 90.9338 661.31 92.3078 662.24 94.0505C663.169 95.7931 663.633 97.7704 663.633 99.9822C663.633 100.619 663.616 101.205 663.582 101.742C663.547 102.278 663.496 102.73 663.427 103.099H644.532C644.773 105.445 645.548 107.238 646.855 108.478C648.198 109.684 649.919 110.287 652.018 110.287C653.739 110.287 655.133 109.969 656.2 109.332C657.266 108.696 658.11 107.807 658.729 106.668L663.117 108.679C662.222 110.522 660.794 111.963 658.832 113.002C656.905 114.041 654.668 114.56 652.121 114.56ZM651.708 92.6932C649.815 92.6932 648.249 93.2294 647.01 94.3018C645.806 95.3742 645.031 96.9326 644.687 98.9769H658.265C658.127 96.9661 657.473 95.4245 656.303 94.3521C655.133 93.2462 653.601 92.6932 651.708 92.6932Z" fill="black"/>
  <path d="M669.577 114.058V88.923H674.275L674.791 93.4473C676.202 90.096 678.904 88.4204 682.896 88.4204C683.412 88.4204 683.928 88.4706 684.445 88.5712C684.961 88.6382 685.391 88.7555 685.735 88.923L684.961 93.6483C684.582 93.5143 684.152 93.4137 683.67 93.3467C683.223 93.2462 682.603 93.1959 681.812 93.1959C680.71 93.1959 679.644 93.4808 678.611 94.0505C677.613 94.5867 676.77 95.4245 676.081 96.5639C675.428 97.6699 675.101 99.0606 675.101 100.736V114.058H669.577Z" fill="black"/>
  <path d="M698.872 114.56C696.29 114.56 693.933 114.074 691.799 113.102C689.665 112.131 687.979 110.757 686.74 108.98L690.56 105.763C691.317 107.137 692.401 108.243 693.812 109.081C695.258 109.885 696.979 110.287 698.975 110.287C700.558 110.287 701.814 110.019 702.744 109.483C703.673 108.947 704.137 108.193 704.137 107.221C704.137 106.584 703.914 106.031 703.466 105.562C703.053 105.059 702.244 104.674 701.04 104.406L695.619 103.3C692.866 102.764 690.904 101.892 689.734 100.686C688.564 99.4795 687.979 97.9715 687.979 96.1618C687.979 94.7878 688.392 93.5143 689.218 92.3413C690.078 91.1684 691.3 90.23 692.883 89.5263C694.466 88.789 696.376 88.4204 698.614 88.4204C701.16 88.4204 703.346 88.8728 705.17 89.7776C707.028 90.649 708.439 91.9057 709.403 93.5478L705.583 96.6645C704.895 95.324 703.914 94.3353 702.64 93.6986C701.401 93.0284 700.093 92.6932 698.717 92.6932C697.03 92.6932 695.723 92.9948 694.793 93.5981C693.898 94.1678 693.451 94.9218 693.451 95.8602C693.451 96.4969 693.709 97.0834 694.225 97.6196C694.742 98.1223 695.671 98.5077 697.013 98.7758L702.898 99.9822C705.376 100.451 707.114 101.256 708.112 102.395C709.145 103.501 709.661 104.858 709.661 106.467C709.661 108.88 708.698 110.84 706.77 112.348C704.843 113.823 702.21 114.56 698.872 114.56Z" fill="black"/>
  <path d="M718.143 84.7005C716.938 84.7005 716.009 84.4156 715.355 83.8459C714.736 83.2427 714.426 82.4048 714.426 81.3324C714.426 80.26 714.736 79.439 715.355 78.8692C716.009 78.2995 716.938 78.0147 718.143 78.0147C719.313 78.0147 720.208 78.2995 720.827 78.8692C721.481 79.439 721.808 80.26 721.808 81.3324C721.808 82.4048 721.481 83.2427 720.827 83.8459C720.208 84.4156 719.313 84.7005 718.143 84.7005ZM720.879 88.923V114.058H715.355V88.923H720.879Z" fill="black"/>
  <path d="M744.906 88.923V93.1456H736.026V106.517C736.026 107.724 736.371 108.628 737.059 109.232C737.747 109.801 738.642 110.086 739.743 110.086C740.707 110.086 741.516 109.952 742.17 109.684C742.858 109.383 743.495 108.98 744.08 108.478L745.319 112.399C744.527 113.069 743.546 113.605 742.376 114.007C741.241 114.376 739.967 114.56 738.556 114.56C736.285 114.56 734.374 114.024 732.826 112.952C731.277 111.846 730.503 110.003 730.503 107.422V93.1456H725.547V88.923H730.503V83.0416L736.026 81.5335V88.923H744.906Z" fill="black"/>
  <path d="M772 88.923L760.694 117.023C759.558 119.939 758.268 121.967 756.822 123.106C755.377 124.279 753.518 124.865 751.247 124.865C749.973 124.865 748.82 124.715 747.788 124.413C746.755 124.111 745.843 123.676 745.052 123.106L746.394 118.934C747.633 120.006 749.13 120.542 750.885 120.542C751.815 120.542 752.641 120.308 753.363 119.838C754.121 119.369 754.792 118.397 755.377 116.923L756.513 114.208L753.776 107.975L745.723 88.923H751.918L757.648 104.708L759.145 109.433L760.849 104.255L766.27 88.923H772Z" fill="black"/>
  <rect x="65" y="986.031" width="950" height="50" fill="#F5F5F5"/>
  <line x1="65" y1="378.031" x2="1013" y2="378.031" stroke="black" stroke-opacity="0.24" stroke-width="2"/>
  <rect x="65" y="650" width="950" height="112" fill="#C1D7F8"/>
  <rect x="1.5" y="1.5" width="1077" height="1077" stroke="#5E94F4" stroke-width="3"/>
  <defs>
    <filter id="filter0_f_2_4053" x="-606.402" y="-584.402" width="1337.24" height="1337.24" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
      <feFlood flood-opacity="0" result="BackgroundImageFix"/>
      <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
      <feGaussianBlur stdDeviation="100" result="effect1_foregroundBlur_2_4053"/>
    </filter>
    <linearGradient id="paint0_linear_2_4053" x1="-376.951" y1="-354.951" x2="501.387" y2="523.387" gradientUnits="userSpaceOnUse">
      <stop stop-color="#6A77F4"/>
      <stop offset="1" stop-color="#57CCDA"/>
    </linearGradient>
  </defs>
</svg>
'''
'''--- web-app/public/certificate-backgrounds/Entrepreneur_certificate.svg ---
<svg width="1080" height="1080" viewBox="0 0 1080 1080" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="1.5" y="1.5" width="1077" height="1077" fill="white"/>
<mask id="mask0_54_14" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="647" height="647">
<rect width="647" height="647" fill="#C4C4C4"/>
</mask>
<g mask="url(#mask0_54_14)">
<g opacity="0.25" filter="url(#filter0_f_54_14)">
<path d="M-58.2827 277.052C-272.03 63.3052 -362.994 -192.282 -261.458 -293.819C-159.922 -395.355 95.6659 -304.39 309.413 -90.6433C523.16 123.104 614.125 378.691 512.588 480.228C411.052 581.764 155.464 490.799 -58.2827 277.052Z" fill="url(#paint0_linear_54_14)"/>
</g>
</g>
<path d="M310 71.1158C310 67.7381 312.675 65 315.974 65H367.519C370.818 65 373.493 67.7381 373.493 71.1158V123.884C373.493 127.262 370.818 130 367.519 130H315.974C312.675 130 310 127.262 310 123.884V71.1158Z" fill="black"/>
<path d="M420.631 80.9089V114.097C420.631 114.35 420.445 114.603 420.135 114.603H416.727C415.178 114.603 413.691 113.781 412.823 112.453L397.455 88.2419L397.951 100.316V114.16C397.951 114.413 397.765 114.666 397.455 114.666H392.994C392.746 114.666 392.498 114.476 392.498 114.16V80.9089C392.498 80.6561 392.684 80.4032 392.994 80.4032H396.34C397.889 80.4032 399.376 81.225 400.244 82.5525L415.612 106.701L415.116 94.6266V80.9089C415.116 80.6561 415.302 80.4032 415.612 80.4032H420.073C420.445 80.4032 420.631 80.5928 420.631 80.9089Z" fill="black"/>
<path d="M458.211 114.54H453.502C453.192 114.54 452.943 114.223 453.068 113.907L465.586 80.8457C465.709 80.5928 465.957 80.4032 466.205 80.4032H472.154C472.463 80.4032 472.712 80.5928 472.773 80.8457L485.353 113.907C485.477 114.223 485.228 114.54 484.919 114.54H480.21C480.023 114.54 479.838 114.413 479.776 114.223L469.675 87.0408C469.552 86.6616 468.931 86.6616 468.807 87.0408L458.707 114.223C458.583 114.413 458.397 114.54 458.211 114.54Z" fill="black"/>
<path d="M515.497 113.781L506.077 101.517C511.407 100.506 514.505 96.8392 514.505 91.2131C514.505 84.765 510.416 80.4032 503.103 80.4032H489.966C489.595 80.4032 489.285 80.7193 489.285 81.0986C489.285 83.6271 491.268 85.6501 493.746 85.6501H502.607C507.007 85.6501 509.114 87.9259 509.114 91.2762C509.114 94.6266 507.069 96.9024 502.607 96.9024H490.091C489.719 96.9024 489.408 97.2185 489.408 97.5978V114.034C489.408 114.287 489.595 114.54 489.904 114.54H494.366C494.613 114.54 494.862 114.35 494.862 114.034V101.833H500.005L508.184 112.706C509.052 113.907 510.416 114.54 511.903 114.54H515.31C515.559 114.54 515.744 114.097 515.497 113.781Z" fill="black"/>
<path d="M448.515 80.4032H427.757C427.385 80.4032 427.137 80.6561 427.137 81.0353C427.137 83.564 429.182 85.6501 431.661 85.6501H448.515C448.764 85.6501 449.011 85.4604 449.011 85.1443V80.8457C448.949 80.5928 448.764 80.4032 448.515 80.4032ZM448.515 109.293H433.024C432.776 109.293 432.528 109.103 432.528 108.787V100.253C432.528 100 432.714 99.7471 433.024 99.7471H447.338C447.587 99.7471 447.834 99.5575 447.834 99.2414V94.9428C447.834 94.6899 447.649 94.437 447.338 94.437H427.819C427.447 94.437 427.137 94.7531 427.137 95.1324V113.781C427.137 114.16 427.447 114.476 427.819 114.476H448.515C448.764 114.476 449.011 114.287 449.011 113.971V109.672C448.949 109.482 448.764 109.293 448.515 109.293Z" fill="black"/>
<path d="M353.07 80.2319L345.229 92.1574C344.687 92.9695 345.729 93.9526 346.48 93.2687L354.196 86.387C354.404 86.216 354.696 86.3443 354.696 86.6435V108.144C354.696 108.443 354.321 108.571 354.154 108.357L330.799 79.719C330.048 78.7786 328.964 78.2657 327.754 78.2657H326.92C324.751 78.2657 322.958 80.1037 322.958 82.3691V112.632C322.958 114.897 324.751 116.735 326.962 116.735C328.338 116.735 329.631 116.008 330.382 114.769L338.222 102.843C338.765 102.031 337.722 101.048 336.971 101.732L329.255 108.571C329.047 108.742 328.755 108.614 328.755 108.315V86.8572C328.755 86.558 329.13 86.4297 329.297 86.6435L352.653 115.282C353.404 116.222 354.53 116.735 355.697 116.735H356.531C358.742 116.735 360.535 114.897 360.535 112.632V82.3691C360.494 80.1037 358.7 78.2657 356.49 78.2657C355.113 78.2657 353.821 78.9923 353.07 80.2319Z" fill="white"/>
<path d="M562.969 80.88V101.339C562.969 105.73 561.782 109.031 559.407 111.242C557.032 113.454 553.574 114.56 549.031 114.56C544.556 114.56 541.115 113.454 538.706 111.242C536.331 109.031 535.144 105.73 535.144 101.339V80.88H540.667V100.686C540.667 103.836 541.339 106.165 542.681 107.673C544.057 109.148 546.174 109.885 549.031 109.885C551.922 109.885 554.038 109.148 555.38 107.673C556.757 106.165 557.445 103.836 557.445 100.686V80.88H562.969Z" fill="black"/>
<path d="M570.407 114.058V88.923H575.311L575.57 93.2462C576.43 91.5705 577.617 90.3473 579.132 89.5765C580.68 88.8058 582.401 88.4204 584.294 88.4204C586.118 88.4204 587.753 88.7722 589.199 89.476C590.678 90.1463 591.849 91.1852 592.709 92.5927C593.569 93.9667 594 95.6926 594 97.7704V114.058H588.476V99.4293C588.476 96.9493 587.942 95.2402 586.875 94.3018C585.843 93.33 584.535 92.844 582.952 92.844C581.816 92.844 580.715 93.0954 579.648 93.5981C578.581 94.1008 577.686 94.9386 576.964 96.1115C576.275 97.2509 575.931 98.7758 575.931 100.686V114.058H570.407Z" fill="black"/>
<path d="M604.125 84.7005C602.921 84.7005 601.991 84.4156 601.338 83.8459C600.718 83.2427 600.408 82.4048 600.408 81.3324C600.408 80.26 600.718 79.439 601.338 78.8692C601.991 78.2995 602.921 78.0147 604.125 78.0147C605.295 78.0147 606.19 78.2995 606.81 78.8692C607.464 79.439 607.791 80.26 607.791 81.3324C607.791 82.4048 607.464 83.2427 606.81 83.8459C606.19 84.4156 605.295 84.7005 604.125 84.7005ZM606.861 88.923V114.058H601.338V88.923H606.861Z" fill="black"/>
<path d="M631.456 88.923H637.238L626.965 114.058H620.925L610.6 88.923H616.691L623.97 109.383L631.456 88.923Z" fill="black"/>
<path d="M652.121 114.56C649.54 114.56 647.268 114.041 645.307 113.002C643.379 111.963 641.865 110.472 640.764 108.528C639.662 106.551 639.112 104.205 639.112 101.49C639.112 98.7758 639.645 96.4466 640.712 94.5029C641.813 92.5257 643.311 91.0176 645.203 89.9787C647.131 88.9398 649.333 88.4204 651.811 88.4204C654.324 88.4204 656.458 88.923 658.213 89.9284C659.968 90.9338 661.31 92.3078 662.24 94.0505C663.169 95.7931 663.633 97.7704 663.633 99.9822C663.633 100.619 663.616 101.205 663.582 101.742C663.547 102.278 663.496 102.73 663.427 103.099H644.532C644.773 105.445 645.548 107.238 646.855 108.478C648.198 109.684 649.919 110.287 652.018 110.287C653.739 110.287 655.133 109.969 656.2 109.332C657.266 108.696 658.11 107.807 658.729 106.668L663.117 108.679C662.222 110.522 660.794 111.963 658.832 113.002C656.905 114.041 654.668 114.56 652.121 114.56ZM651.708 92.6932C649.815 92.6932 648.249 93.2294 647.01 94.3018C645.806 95.3742 645.031 96.9326 644.687 98.9769H658.265C658.127 96.9661 657.473 95.4245 656.303 94.3521C655.133 93.2462 653.601 92.6932 651.708 92.6932Z" fill="black"/>
<path d="M669.577 114.058V88.923H674.275L674.791 93.4473C676.202 90.096 678.904 88.4204 682.896 88.4204C683.412 88.4204 683.928 88.4706 684.445 88.5712C684.961 88.6382 685.391 88.7555 685.735 88.923L684.961 93.6483C684.582 93.5143 684.152 93.4137 683.67 93.3467C683.223 93.2462 682.603 93.1959 681.812 93.1959C680.71 93.1959 679.644 93.4808 678.611 94.0505C677.613 94.5867 676.77 95.4245 676.081 96.5639C675.428 97.6699 675.101 99.0606 675.101 100.736V114.058H669.577Z" fill="black"/>
<path d="M698.872 114.56C696.29 114.56 693.933 114.074 691.799 113.102C689.665 112.131 687.979 110.757 686.74 108.98L690.56 105.763C691.317 107.137 692.401 108.243 693.812 109.081C695.258 109.885 696.979 110.287 698.975 110.287C700.558 110.287 701.814 110.019 702.744 109.483C703.673 108.947 704.137 108.193 704.137 107.221C704.137 106.584 703.914 106.031 703.466 105.562C703.053 105.059 702.244 104.674 701.04 104.406L695.619 103.3C692.866 102.764 690.904 101.892 689.734 100.686C688.564 99.4795 687.979 97.9715 687.979 96.1618C687.979 94.7878 688.392 93.5143 689.218 92.3413C690.078 91.1684 691.3 90.23 692.883 89.5263C694.466 88.789 696.376 88.4204 698.614 88.4204C701.16 88.4204 703.346 88.8728 705.17 89.7776C707.028 90.649 708.439 91.9057 709.403 93.5478L705.583 96.6645C704.895 95.324 703.914 94.3353 702.64 93.6986C701.401 93.0284 700.093 92.6932 698.717 92.6932C697.03 92.6932 695.723 92.9948 694.793 93.5981C693.899 94.1678 693.451 94.9218 693.451 95.8602C693.451 96.4969 693.709 97.0834 694.225 97.6196C694.742 98.1223 695.671 98.5077 697.013 98.7758L702.898 99.9822C705.376 100.451 707.114 101.256 708.112 102.395C709.145 103.501 709.661 104.858 709.661 106.467C709.661 108.88 708.698 110.84 706.77 112.348C704.843 113.823 702.21 114.56 698.872 114.56Z" fill="black"/>
<path d="M718.143 84.7005C716.938 84.7005 716.009 84.4156 715.355 83.8459C714.736 83.2427 714.426 82.4048 714.426 81.3324C714.426 80.26 714.736 79.439 715.355 78.8692C716.009 78.2995 716.938 78.0147 718.143 78.0147C719.313 78.0147 720.208 78.2995 720.827 78.8692C721.481 79.439 721.808 80.26 721.808 81.3324C721.808 82.4048 721.481 83.2427 720.827 83.8459C720.208 84.4156 719.313 84.7005 718.143 84.7005ZM720.879 88.923V114.058H715.355V88.923H720.879Z" fill="black"/>
<path d="M744.906 88.923V93.1456H736.026V106.517C736.026 107.724 736.371 108.628 737.059 109.232C737.747 109.801 738.642 110.086 739.743 110.086C740.707 110.086 741.516 109.952 742.17 109.684C742.858 109.383 743.495 108.98 744.08 108.478L745.319 112.399C744.527 113.069 743.546 113.605 742.376 114.007C741.241 114.376 739.967 114.56 738.556 114.56C736.285 114.56 734.374 114.024 732.826 112.952C731.277 111.846 730.503 110.003 730.503 107.422V93.1456H725.547V88.923H730.503V83.0416L736.026 81.5335V88.923H744.906Z" fill="black"/>
<path d="M772 88.923L760.694 117.023C759.558 119.939 758.268 121.967 756.822 123.106C755.377 124.279 753.518 124.865 751.247 124.865C749.973 124.865 748.82 124.715 747.788 124.413C746.756 124.111 745.843 123.676 745.052 123.106L746.394 118.934C747.633 120.006 749.13 120.542 750.885 120.542C751.815 120.542 752.641 120.308 753.363 119.838C754.121 119.369 754.792 118.397 755.377 116.923L756.513 114.208L753.776 107.975L745.723 88.923H751.918L757.648 104.708L759.145 109.433L760.849 104.255L766.27 88.923H772Z" fill="black"/>
<rect x="65" y="986.031" width="950" height="50" fill="#F5F5F5"/>

<line x1="65" y1="378.031" x2="1013" y2="378.031" stroke="black" stroke-opacity="0.24" stroke-width="2"/>
<rect x="65" y="650" width="950" height="112" fill="#DCE8C0"/>
<rect x="1.5" y="1.5" width="1077" height="1077" stroke="#5E94F4" stroke-width="3"/>
<defs>
<filter id="filter0_f_54_14" x="-503.006" y="-535.366" width="1257.14" height="1257.14" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="100" result="effect1_foregroundBlur_54_14"/>
</filter>
<linearGradient id="paint0_linear_54_14" x1="-254.999" y1="-430.548" x2="445.986" y2="593.257" gradientUnits="userSpaceOnUse">
<stop stop-color="#6491ED"/>
<stop offset="1" stop-color="#A6D350"/>
</linearGradient>
</defs>
</svg>

'''
'''--- web-app/public/certificate-backgrounds/Instructor_certificate.svg ---
<svg width="1080" height="1080" viewBox="0 0 1080 1080" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="1.5" y="1.5" width="1077" height="1077" fill="white"/>
<mask id="mask0_54_2" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="647" height="647">
<rect width="647" height="647" fill="#C4C4C4"/>
</mask>
<g mask="url(#mask0_54_2)">
<g opacity="0.25" filter="url(#filter0_f_54_2)">
<path d="M202.719 -128.616C416.466 85.1307 507.43 340.718 405.894 442.255C304.358 543.791 48.7702 452.826 -164.977 239.079C-378.724 25.3323 -469.689 -230.255 -368.152 -331.792C-266.616 -433.328 -11.0283 -342.363 202.719 -128.616Z" fill="url(#paint0_linear_54_2)"/>
</g>
</g>
<path d="M310 71.1158C310 67.7381 312.675 65 315.974 65H367.519C370.818 65 373.493 67.7381 373.493 71.1158V123.884C373.493 127.262 370.818 130 367.519 130H315.974C312.675 130 310 127.262 310 123.884V71.1158Z" fill="black"/>
<path d="M420.631 80.9089V114.097C420.631 114.35 420.445 114.603 420.135 114.603H416.727C415.178 114.603 413.691 113.781 412.823 112.453L397.455 88.2419L397.951 100.316V114.16C397.951 114.413 397.765 114.666 397.455 114.666H392.994C392.746 114.666 392.498 114.476 392.498 114.16V80.9089C392.498 80.6561 392.684 80.4032 392.994 80.4032H396.34C397.889 80.4032 399.376 81.225 400.244 82.5525L415.612 106.701L415.116 94.6266V80.9089C415.116 80.6561 415.302 80.4032 415.612 80.4032H420.073C420.445 80.4032 420.631 80.5928 420.631 80.9089Z" fill="black"/>
<path d="M458.211 114.54H453.502C453.192 114.54 452.943 114.223 453.068 113.907L465.586 80.8457C465.709 80.5928 465.957 80.4032 466.205 80.4032H472.154C472.463 80.4032 472.712 80.5928 472.773 80.8457L485.353 113.907C485.477 114.223 485.228 114.54 484.919 114.54H480.21C480.023 114.54 479.838 114.413 479.776 114.223L469.675 87.0408C469.552 86.6616 468.931 86.6616 468.807 87.0408L458.707 114.223C458.583 114.413 458.397 114.54 458.211 114.54Z" fill="black"/>
<path d="M515.497 113.781L506.077 101.517C511.407 100.506 514.505 96.8392 514.505 91.2131C514.505 84.765 510.416 80.4032 503.103 80.4032H489.966C489.595 80.4032 489.285 80.7193 489.285 81.0986C489.285 83.6271 491.268 85.6501 493.746 85.6501H502.607C507.007 85.6501 509.114 87.9259 509.114 91.2762C509.114 94.6266 507.069 96.9024 502.607 96.9024H490.091C489.719 96.9024 489.408 97.2185 489.408 97.5978V114.034C489.408 114.287 489.595 114.54 489.904 114.54H494.366C494.613 114.54 494.862 114.35 494.862 114.034V101.833H500.005L508.184 112.706C509.052 113.907 510.416 114.54 511.903 114.54H515.31C515.559 114.54 515.744 114.097 515.497 113.781Z" fill="black"/>
<path d="M448.515 80.4032H427.757C427.385 80.4032 427.137 80.6561 427.137 81.0353C427.137 83.564 429.182 85.6501 431.661 85.6501H448.515C448.764 85.6501 449.011 85.4604 449.011 85.1443V80.8457C448.949 80.5928 448.764 80.4032 448.515 80.4032ZM448.515 109.293H433.024C432.776 109.293 432.528 109.103 432.528 108.787V100.253C432.528 100 432.714 99.7471 433.024 99.7471H447.338C447.587 99.7471 447.834 99.5575 447.834 99.2414V94.9428C447.834 94.6899 447.649 94.437 447.338 94.437H427.819C427.447 94.437 427.137 94.7531 427.137 95.1324V113.781C427.137 114.16 427.447 114.476 427.819 114.476H448.515C448.764 114.476 449.011 114.287 449.011 113.971V109.672C448.949 109.482 448.764 109.293 448.515 109.293Z" fill="black"/>
<path d="M353.07 80.2319L345.229 92.1574C344.687 92.9695 345.729 93.9526 346.48 93.2687L354.196 86.387C354.404 86.216 354.696 86.3443 354.696 86.6435V108.144C354.696 108.443 354.321 108.571 354.154 108.357L330.799 79.719C330.048 78.7786 328.964 78.2657 327.754 78.2657H326.92C324.751 78.2657 322.958 80.1037 322.958 82.3691V112.632C322.958 114.897 324.751 116.735 326.962 116.735C328.338 116.735 329.631 116.008 330.382 114.769L338.222 102.843C338.765 102.031 337.722 101.048 336.971 101.732L329.255 108.571C329.047 108.742 328.755 108.614 328.755 108.315V86.8572C328.755 86.558 329.13 86.4297 329.297 86.6435L352.653 115.282C353.404 116.222 354.53 116.735 355.697 116.735H356.531C358.742 116.735 360.535 114.897 360.535 112.632V82.3691C360.494 80.1037 358.7 78.2657 356.49 78.2657C355.113 78.2657 353.821 78.9923 353.07 80.2319Z" fill="white"/>
<path d="M562.969 80.88V101.339C562.969 105.73 561.782 109.031 559.407 111.242C557.032 113.454 553.574 114.56 549.031 114.56C544.556 114.56 541.115 113.454 538.706 111.242C536.331 109.031 535.144 105.73 535.144 101.339V80.88H540.667V100.686C540.667 103.836 541.339 106.165 542.681 107.673C544.057 109.148 546.174 109.885 549.031 109.885C551.922 109.885 554.038 109.148 555.38 107.673C556.757 106.165 557.445 103.836 557.445 100.686V80.88H562.969Z" fill="black"/>
<path d="M570.407 114.058V88.923H575.311L575.57 93.2462C576.43 91.5705 577.617 90.3473 579.132 89.5765C580.68 88.8058 582.401 88.4204 584.294 88.4204C586.118 88.4204 587.753 88.7722 589.199 89.476C590.678 90.1463 591.849 91.1852 592.709 92.5927C593.569 93.9667 594 95.6926 594 97.7704V114.058H588.476V99.4293C588.476 96.9493 587.942 95.2402 586.875 94.3018C585.843 93.33 584.535 92.844 582.952 92.844C581.816 92.844 580.715 93.0954 579.648 93.5981C578.581 94.1008 577.686 94.9386 576.964 96.1115C576.275 97.2509 575.931 98.7758 575.931 100.686V114.058H570.407Z" fill="black"/>
<path d="M604.125 84.7005C602.921 84.7005 601.991 84.4156 601.338 83.8459C600.718 83.2427 600.408 82.4048 600.408 81.3324C600.408 80.26 600.718 79.439 601.338 78.8692C601.991 78.2995 602.921 78.0147 604.125 78.0147C605.295 78.0147 606.19 78.2995 606.81 78.8692C607.464 79.439 607.791 80.26 607.791 81.3324C607.791 82.4048 607.464 83.2427 606.81 83.8459C606.19 84.4156 605.295 84.7005 604.125 84.7005ZM606.861 88.923V114.058H601.338V88.923H606.861Z" fill="black"/>
<path d="M631.456 88.923H637.238L626.965 114.058H620.925L610.6 88.923H616.691L623.97 109.383L631.456 88.923Z" fill="black"/>
<path d="M652.121 114.56C649.54 114.56 647.268 114.041 645.307 113.002C643.379 111.963 641.865 110.472 640.764 108.528C639.662 106.551 639.112 104.205 639.112 101.49C639.112 98.7758 639.645 96.4466 640.712 94.5029C641.813 92.5257 643.311 91.0176 645.203 89.9787C647.131 88.9398 649.333 88.4204 651.811 88.4204C654.324 88.4204 656.458 88.923 658.213 89.9284C659.968 90.9338 661.31 92.3078 662.24 94.0505C663.169 95.7931 663.633 97.7704 663.633 99.9822C663.633 100.619 663.616 101.205 663.582 101.742C663.547 102.278 663.496 102.73 663.427 103.099H644.532C644.773 105.445 645.548 107.238 646.855 108.478C648.198 109.684 649.919 110.287 652.018 110.287C653.739 110.287 655.133 109.969 656.2 109.332C657.266 108.696 658.11 107.807 658.729 106.668L663.117 108.679C662.222 110.522 660.794 111.963 658.832 113.002C656.905 114.041 654.668 114.56 652.121 114.56ZM651.708 92.6932C649.815 92.6932 648.249 93.2294 647.01 94.3018C645.806 95.3742 645.031 96.9326 644.687 98.9769H658.265C658.127 96.9661 657.473 95.4245 656.303 94.3521C655.133 93.2462 653.601 92.6932 651.708 92.6932Z" fill="black"/>
<path d="M669.577 114.058V88.923H674.275L674.791 93.4473C676.202 90.096 678.904 88.4204 682.896 88.4204C683.412 88.4204 683.928 88.4706 684.445 88.5712C684.961 88.6382 685.391 88.7555 685.735 88.923L684.961 93.6483C684.582 93.5143 684.152 93.4137 683.67 93.3467C683.223 93.2462 682.603 93.1959 681.812 93.1959C680.71 93.1959 679.644 93.4808 678.611 94.0505C677.613 94.5867 676.77 95.4245 676.081 96.5639C675.428 97.6699 675.101 99.0606 675.101 100.736V114.058H669.577Z" fill="black"/>
<path d="M698.872 114.56C696.29 114.56 693.933 114.074 691.799 113.102C689.665 112.131 687.979 110.757 686.74 108.98L690.56 105.763C691.317 107.137 692.401 108.243 693.812 109.081C695.258 109.885 696.979 110.287 698.975 110.287C700.558 110.287 701.814 110.019 702.744 109.483C703.673 108.947 704.137 108.193 704.137 107.221C704.137 106.584 703.914 106.031 703.466 105.562C703.053 105.059 702.244 104.674 701.04 104.406L695.619 103.3C692.866 102.764 690.904 101.892 689.734 100.686C688.564 99.4795 687.979 97.9715 687.979 96.1618C687.979 94.7878 688.392 93.5143 689.218 92.3413C690.078 91.1684 691.3 90.23 692.883 89.5263C694.466 88.789 696.376 88.4204 698.614 88.4204C701.16 88.4204 703.346 88.8728 705.17 89.7776C707.028 90.649 708.439 91.9057 709.403 93.5478L705.583 96.6645C704.895 95.324 703.914 94.3353 702.64 93.6986C701.401 93.0284 700.093 92.6932 698.717 92.6932C697.03 92.6932 695.723 92.9948 694.793 93.5981C693.899 94.1678 693.451 94.9218 693.451 95.8602C693.451 96.4969 693.709 97.0834 694.225 97.6196C694.742 98.1223 695.671 98.5077 697.013 98.7758L702.898 99.9822C705.376 100.451 707.114 101.256 708.112 102.395C709.145 103.501 709.661 104.858 709.661 106.467C709.661 108.88 708.698 110.84 706.77 112.348C704.843 113.823 702.21 114.56 698.872 114.56Z" fill="black"/>
<path d="M718.143 84.7005C716.938 84.7005 716.009 84.4156 715.355 83.8459C714.736 83.2427 714.426 82.4048 714.426 81.3324C714.426 80.26 714.736 79.439 715.355 78.8692C716.009 78.2995 716.938 78.0147 718.143 78.0147C719.313 78.0147 720.208 78.2995 720.827 78.8692C721.481 79.439 721.808 80.26 721.808 81.3324C721.808 82.4048 721.481 83.2427 720.827 83.8459C720.208 84.4156 719.313 84.7005 718.143 84.7005ZM720.879 88.923V114.058H715.355V88.923H720.879Z" fill="black"/>
<path d="M744.906 88.923V93.1456H736.026V106.517C736.026 107.724 736.371 108.628 737.059 109.232C737.747 109.801 738.642 110.086 739.743 110.086C740.707 110.086 741.516 109.952 742.17 109.684C742.858 109.383 743.495 108.98 744.08 108.478L745.319 112.399C744.527 113.069 743.546 113.605 742.376 114.007C741.241 114.376 739.967 114.56 738.556 114.56C736.285 114.56 734.374 114.024 732.826 112.952C731.277 111.846 730.503 110.003 730.503 107.422V93.1456H725.547V88.923H730.503V83.0416L736.026 81.5335V88.923H744.906Z" fill="black"/>
<path d="M772 88.923L760.694 117.023C759.558 119.939 758.268 121.967 756.822 123.106C755.377 124.279 753.518 124.865 751.247 124.865C749.973 124.865 748.82 124.715 747.788 124.413C746.756 124.111 745.843 123.676 745.052 123.106L746.394 118.934C747.633 120.006 749.13 120.542 750.885 120.542C751.815 120.542 752.641 120.308 753.363 119.838C754.121 119.369 754.792 118.397 755.377 116.923L756.513 114.208L753.776 107.975L745.723 88.923H751.918L757.648 104.708L759.145 109.433L760.849 104.255L766.27 88.923H772Z" fill="black"/>
<rect x="65" y="986.031" width="950" height="50" fill="#F5F5F5"/>

<line x1="65" y1="378.031" x2="1013" y2="378.031" stroke="black" stroke-opacity="0.24" stroke-width="2"/>
<rect x="65" y="650" width="950" height="112" fill="#EFD3C2"/>
<rect x="1.5" y="1.5" width="1077" height="1077" stroke="#5E94F4" stroke-width="3"/>
<defs>
<filter id="filter0_f_54_2" x="-609.7" y="-573.339" width="1257.14" height="1257.14" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="100" result="effect1_foregroundBlur_54_2"/>
</filter>
<linearGradient id="paint0_linear_54_2" x1="-382.766" y1="-346.405" x2="420.508" y2="456.868" gradientUnits="userSpaceOnUse">
<stop stop-color="#E49964"/>
<stop offset="1" stop-color="#FDC568"/>
</linearGradient>
</defs>
</svg>

'''
'''--- web-app/public/certificate-backgrounds/Security_certificate.svg ---
<svg width="1080" height="1080" viewBox="0 0 1080 1080" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="1.5" y="1.5" width="1077" height="1077" fill="white"/>
<mask id="mask0_54_62" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="647" height="647">
<rect width="647" height="647" fill="#C4C4C4"/>
</mask>
<g mask="url(#mask0_54_62)">
<g opacity="0.25" filter="url(#filter0_f_54_62)">
<path d="M-164.977 239.079C-378.724 25.3321 -469.689 -230.255 -368.152 -331.792C-266.616 -433.328 -11.0284 -342.363 202.719 -128.616C416.466 85.1306 507.43 340.718 405.894 442.254C304.358 543.791 48.77 452.826 -164.977 239.079Z" fill="url(#paint0_linear_54_62)"/>
</g>
</g>
<path d="M310 71.1158C310 67.7381 312.675 65 315.974 65H367.519C370.818 65 373.493 67.7381 373.493 71.1158V123.884C373.493 127.262 370.818 130 367.519 130H315.974C312.675 130 310 127.262 310 123.884V71.1158Z" fill="black"/>
<path d="M420.631 80.9089V114.097C420.631 114.35 420.445 114.603 420.135 114.603H416.727C415.178 114.603 413.691 113.781 412.823 112.453L397.455 88.2419L397.951 100.316V114.16C397.951 114.413 397.765 114.666 397.455 114.666H392.994C392.746 114.666 392.498 114.476 392.498 114.16V80.9089C392.498 80.6561 392.684 80.4032 392.994 80.4032H396.34C397.889 80.4032 399.376 81.225 400.244 82.5525L415.612 106.701L415.116 94.6266V80.9089C415.116 80.6561 415.302 80.4032 415.612 80.4032H420.073C420.445 80.4032 420.631 80.5928 420.631 80.9089Z" fill="black"/>
<path d="M458.211 114.54H453.502C453.192 114.54 452.943 114.223 453.068 113.907L465.586 80.8457C465.709 80.5928 465.957 80.4032 466.205 80.4032H472.154C472.463 80.4032 472.712 80.5928 472.773 80.8457L485.353 113.907C485.477 114.223 485.228 114.54 484.919 114.54H480.21C480.023 114.54 479.838 114.413 479.776 114.223L469.675 87.0408C469.552 86.6616 468.931 86.6616 468.807 87.0408L458.707 114.223C458.583 114.413 458.397 114.54 458.211 114.54Z" fill="black"/>
<path d="M515.497 113.781L506.077 101.517C511.407 100.506 514.505 96.8392 514.505 91.2131C514.505 84.765 510.416 80.4032 503.103 80.4032H489.966C489.595 80.4032 489.285 80.7193 489.285 81.0986C489.285 83.6271 491.268 85.6501 493.746 85.6501H502.607C507.007 85.6501 509.114 87.9259 509.114 91.2762C509.114 94.6266 507.069 96.9024 502.607 96.9024H490.091C489.719 96.9024 489.408 97.2185 489.408 97.5978V114.034C489.408 114.287 489.595 114.54 489.904 114.54H494.366C494.613 114.54 494.862 114.35 494.862 114.034V101.833H500.005L508.184 112.706C509.052 113.907 510.416 114.54 511.903 114.54H515.31C515.559 114.54 515.744 114.097 515.497 113.781Z" fill="black"/>
<path d="M448.515 80.4032H427.757C427.385 80.4032 427.137 80.6561 427.137 81.0353C427.137 83.564 429.182 85.6501 431.661 85.6501H448.515C448.764 85.6501 449.011 85.4604 449.011 85.1443V80.8457C448.949 80.5928 448.764 80.4032 448.515 80.4032ZM448.515 109.293H433.024C432.776 109.293 432.528 109.103 432.528 108.787V100.253C432.528 100 432.714 99.7471 433.024 99.7471H447.338C447.587 99.7471 447.834 99.5575 447.834 99.2414V94.9428C447.834 94.6899 447.649 94.437 447.338 94.437H427.819C427.447 94.437 427.137 94.7531 427.137 95.1324V113.781C427.137 114.16 427.447 114.476 427.819 114.476H448.515C448.764 114.476 449.011 114.287 449.011 113.971V109.672C448.949 109.482 448.764 109.293 448.515 109.293Z" fill="black"/>
<path d="M353.07 80.2319L345.229 92.1574C344.687 92.9695 345.729 93.9526 346.48 93.2687L354.196 86.387C354.404 86.216 354.696 86.3443 354.696 86.6435V108.144C354.696 108.443 354.321 108.571 354.154 108.357L330.799 79.719C330.048 78.7786 328.964 78.2657 327.754 78.2657H326.92C324.751 78.2657 322.958 80.1037 322.958 82.3691V112.632C322.958 114.897 324.751 116.735 326.962 116.735C328.338 116.735 329.631 116.008 330.382 114.769L338.222 102.843C338.765 102.031 337.722 101.048 336.971 101.732L329.255 108.571C329.047 108.742 328.755 108.614 328.755 108.315V86.8572C328.755 86.558 329.13 86.4297 329.297 86.6435L352.653 115.282C353.404 116.222 354.53 116.735 355.697 116.735H356.531C358.742 116.735 360.535 114.897 360.535 112.632V82.3691C360.494 80.1037 358.7 78.2657 356.49 78.2657C355.113 78.2657 353.821 78.9923 353.07 80.2319Z" fill="white"/>
<path d="M562.969 80.88V101.339C562.969 105.73 561.782 109.031 559.407 111.242C557.032 113.454 553.574 114.56 549.031 114.56C544.556 114.56 541.115 113.454 538.706 111.242C536.331 109.031 535.144 105.73 535.144 101.339V80.88H540.667V100.686C540.667 103.836 541.339 106.165 542.681 107.673C544.057 109.148 546.174 109.885 549.031 109.885C551.922 109.885 554.038 109.148 555.38 107.673C556.757 106.165 557.445 103.836 557.445 100.686V80.88H562.969Z" fill="black"/>
<path d="M570.407 114.058V88.923H575.311L575.57 93.2462C576.43 91.5705 577.617 90.3473 579.132 89.5765C580.68 88.8058 582.401 88.4204 584.294 88.4204C586.118 88.4204 587.753 88.7722 589.199 89.476C590.678 90.1463 591.849 91.1852 592.709 92.5927C593.569 93.9667 594 95.6926 594 97.7704V114.058H588.476V99.4293C588.476 96.9493 587.942 95.2402 586.875 94.3018C585.843 93.33 584.535 92.844 582.952 92.844C581.816 92.844 580.715 93.0954 579.648 93.5981C578.581 94.1008 577.686 94.9386 576.964 96.1115C576.275 97.2509 575.931 98.7758 575.931 100.686V114.058H570.407Z" fill="black"/>
<path d="M604.125 84.7005C602.921 84.7005 601.991 84.4156 601.338 83.8459C600.718 83.2427 600.408 82.4048 600.408 81.3324C600.408 80.26 600.718 79.439 601.338 78.8692C601.991 78.2995 602.921 78.0147 604.125 78.0147C605.295 78.0147 606.19 78.2995 606.81 78.8692C607.464 79.439 607.791 80.26 607.791 81.3324C607.791 82.4048 607.464 83.2427 606.81 83.8459C606.19 84.4156 605.295 84.7005 604.125 84.7005ZM606.861 88.923V114.058H601.338V88.923H606.861Z" fill="black"/>
<path d="M631.456 88.923H637.238L626.965 114.058H620.925L610.6 88.923H616.691L623.97 109.383L631.456 88.923Z" fill="black"/>
<path d="M652.121 114.56C649.54 114.56 647.268 114.041 645.307 113.002C643.379 111.963 641.865 110.472 640.764 108.528C639.662 106.551 639.112 104.205 639.112 101.49C639.112 98.7758 639.645 96.4466 640.712 94.5029C641.813 92.5257 643.311 91.0176 645.203 89.9787C647.131 88.9398 649.333 88.4204 651.811 88.4204C654.324 88.4204 656.458 88.923 658.213 89.9284C659.968 90.9338 661.31 92.3078 662.24 94.0505C663.169 95.7931 663.633 97.7704 663.633 99.9822C663.633 100.619 663.616 101.205 663.582 101.742C663.547 102.278 663.496 102.73 663.427 103.099H644.532C644.773 105.445 645.548 107.238 646.855 108.478C648.198 109.684 649.919 110.287 652.018 110.287C653.739 110.287 655.133 109.969 656.2 109.332C657.266 108.696 658.11 107.807 658.729 106.668L663.117 108.679C662.222 110.522 660.794 111.963 658.832 113.002C656.905 114.041 654.668 114.56 652.121 114.56ZM651.708 92.6932C649.815 92.6932 648.249 93.2294 647.01 94.3018C645.806 95.3742 645.031 96.9326 644.687 98.9769H658.265C658.127 96.9661 657.473 95.4245 656.303 94.3521C655.133 93.2462 653.601 92.6932 651.708 92.6932Z" fill="black"/>
<path d="M669.577 114.058V88.923H674.275L674.791 93.4473C676.202 90.096 678.904 88.4204 682.896 88.4204C683.412 88.4204 683.928 88.4706 684.445 88.5712C684.961 88.6382 685.391 88.7555 685.735 88.923L684.961 93.6483C684.582 93.5143 684.152 93.4137 683.67 93.3467C683.223 93.2462 682.603 93.1959 681.812 93.1959C680.71 93.1959 679.644 93.4808 678.611 94.0505C677.613 94.5867 676.77 95.4245 676.081 96.5639C675.428 97.6699 675.101 99.0606 675.101 100.736V114.058H669.577Z" fill="black"/>
<path d="M698.872 114.56C696.29 114.56 693.933 114.074 691.799 113.102C689.665 112.131 687.979 110.757 686.74 108.98L690.56 105.763C691.317 107.137 692.401 108.243 693.812 109.081C695.258 109.885 696.979 110.287 698.975 110.287C700.558 110.287 701.814 110.019 702.744 109.483C703.673 108.947 704.137 108.193 704.137 107.221C704.137 106.584 703.914 106.031 703.466 105.562C703.053 105.059 702.244 104.674 701.04 104.406L695.619 103.3C692.866 102.764 690.904 101.892 689.734 100.686C688.564 99.4795 687.979 97.9715 687.979 96.1618C687.979 94.7878 688.392 93.5143 689.218 92.3413C690.078 91.1684 691.3 90.23 692.883 89.5263C694.466 88.789 696.376 88.4204 698.614 88.4204C701.16 88.4204 703.346 88.8728 705.17 89.7776C707.028 90.649 708.439 91.9057 709.403 93.5478L705.583 96.6645C704.895 95.324 703.914 94.3353 702.64 93.6986C701.401 93.0284 700.093 92.6932 698.717 92.6932C697.03 92.6932 695.723 92.9948 694.793 93.5981C693.899 94.1678 693.451 94.9218 693.451 95.8602C693.451 96.4969 693.709 97.0834 694.225 97.6196C694.742 98.1223 695.671 98.5077 697.013 98.7758L702.898 99.9822C705.376 100.451 707.114 101.256 708.112 102.395C709.145 103.501 709.661 104.858 709.661 106.467C709.661 108.88 708.698 110.84 706.77 112.348C704.843 113.823 702.21 114.56 698.872 114.56Z" fill="black"/>
<path d="M718.143 84.7005C716.938 84.7005 716.009 84.4156 715.355 83.8459C714.736 83.2427 714.426 82.4048 714.426 81.3324C714.426 80.26 714.736 79.439 715.355 78.8692C716.009 78.2995 716.938 78.0147 718.143 78.0147C719.313 78.0147 720.208 78.2995 720.827 78.8692C721.481 79.439 721.808 80.26 721.808 81.3324C721.808 82.4048 721.481 83.2427 720.827 83.8459C720.208 84.4156 719.313 84.7005 718.143 84.7005ZM720.879 88.923V114.058H715.355V88.923H720.879Z" fill="black"/>
<path d="M744.906 88.923V93.1456H736.026V106.517C736.026 107.724 736.371 108.628 737.059 109.232C737.747 109.801 738.642 110.086 739.743 110.086C740.707 110.086 741.516 109.952 742.17 109.684C742.858 109.383 743.495 108.98 744.08 108.478L745.319 112.399C744.527 113.069 743.546 113.605 742.376 114.007C741.241 114.376 739.967 114.56 738.556 114.56C736.285 114.56 734.374 114.024 732.826 112.952C731.277 111.846 730.503 110.003 730.503 107.422V93.1456H725.547V88.923H730.503V83.0416L736.026 81.5335V88.923H744.906Z" fill="black"/>
<path d="M772 88.923L760.694 117.023C759.558 119.939 758.268 121.967 756.822 123.106C755.377 124.279 753.518 124.865 751.247 124.865C749.973 124.865 748.82 124.715 747.788 124.413C746.756 124.111 745.843 123.676 745.052 123.106L746.394 118.934C747.633 120.006 749.13 120.542 750.885 120.542C751.815 120.542 752.641 120.308 753.363 119.838C754.121 119.369 754.792 118.397 755.377 116.923L756.513 114.208L753.776 107.975L745.723 88.923H751.918L757.648 104.708L759.145 109.433L760.849 104.255L766.27 88.923H772Z" fill="black"/>
<rect x="65" y="986.031" width="950" height="50" fill="#F5F5F5"/>

<line x1="65" y1="378.031" x2="1013" y2="378.031" stroke="black" stroke-opacity="0.24" stroke-width="2"/>
<rect x="65" y="650" width="950" height="112" fill="#BEE9EC"/>
<rect x="1.5" y="1.5" width="1077" height="1077" stroke="#5E94F4" stroke-width="3"/>
<defs>
<filter id="filter0_f_54_62" x="-609.7" y="-573.339" width="1257.14" height="1257.14" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="100" result="effect1_foregroundBlur_54_62"/>
</filter>
<linearGradient id="paint0_linear_54_62" x1="-346.184" y1="-472.677" x2="372.694" y2="585.736" gradientUnits="userSpaceOnUse">
<stop stop-color="#618FF6"/>
<stop offset="1" stop-color="#57CCDA"/>
</linearGradient>
</defs>
</svg>

'''
'''--- web-app/public/near_icon.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 288 288"><g id="Layer_1" data-name="Layer 1"><path d="M187.58,79.81l-30.1,44.69a3.2,3.2,0,0,0,4.75,4.2L191.86,103a1.2,1.2,0,0,1,2,.91v80.46a1.2,1.2,0,0,1-2.12.77L102.18,77.93A15.35,15.35,0,0,0,90.47,72.5H87.34A15.34,15.34,0,0,0,72,87.84V201.16A15.34,15.34,0,0,0,87.34,216.5h0a15.35,15.35,0,0,0,13.08-7.31l30.1-44.69a3.2,3.2,0,0,0-4.75-4.2L96.14,186a1.2,1.2,0,0,1-2-.91V104.61a1.2,1.2,0,0,1,2.12-.77l89.55,107.23a15.35,15.35,0,0,0,11.71,5.43h3.13A15.34,15.34,0,0,0,216,201.16V87.84A15.34,15.34,0,0,0,200.66,72.5h0A15.35,15.35,0,0,0,187.58,79.81Z"/></g></svg>
'''
'''--- web-app/public/near_university_logo.svg ---
<svg width="462" height="65" viewBox="0 0 462 65" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 6.11582C0 2.73815 2.67466 0 5.97403 0H57.5189C60.8183 0 63.493 2.73815 63.493 6.11582V58.8842C63.493 62.2619 60.8183 65 57.5189 65H5.97403C2.67466 65 0 62.2619 0 58.8842V6.11582Z" fill="black"/>
<path d="M110.631 15.909V49.0972C110.631 49.3499 110.445 49.6028 110.135 49.6028H106.727C105.178 49.6028 103.691 48.781 102.823 47.4535L87.4554 23.2421L87.9512 35.3161V49.1603C87.9512 49.4132 87.7652 49.6661 87.4554 49.6661H82.9937C82.7459 49.6661 82.498 49.4764 82.498 49.1603V15.909C82.498 15.6562 82.6839 15.4033 82.9937 15.4033H86.3399C87.8891 15.4033 89.3764 16.2252 90.2439 17.5526L105.612 41.7009L105.116 29.6267V15.909C105.116 15.6562 105.302 15.4033 105.612 15.4033H110.073C110.445 15.4033 110.631 15.5929 110.631 15.909Z" fill="black"/>
<path d="M148.211 49.5396H143.502C143.192 49.5396 142.944 49.2236 143.068 48.9074L155.586 15.8458C155.709 15.5929 155.958 15.4033 156.205 15.4033H162.154C162.463 15.4033 162.712 15.5929 162.773 15.8458L175.353 48.9074C175.477 49.2236 175.229 49.5396 174.919 49.5396H170.21C170.023 49.5396 169.838 49.4132 169.776 49.2236L159.675 22.0409C159.552 21.6617 158.931 21.6617 158.807 22.0409L148.707 49.2236C148.583 49.4132 148.398 49.5396 148.211 49.5396Z" fill="black"/>
<path d="M205.497 48.781L196.077 36.5173C201.407 35.5059 204.505 31.8393 204.505 26.2132C204.505 19.7651 200.416 15.4033 193.103 15.4033H179.966C179.595 15.4033 179.285 15.7194 179.285 16.0987C179.285 18.6272 181.268 20.6502 183.746 20.6502H192.607C197.007 20.6502 199.114 22.926 199.114 26.2764C199.114 29.6267 197.069 31.9025 192.607 31.9025H180.091C179.719 31.9025 179.408 32.2187 179.408 32.5979V49.0339C179.408 49.2868 179.595 49.5396 179.904 49.5396H184.366C184.614 49.5396 184.862 49.3499 184.862 49.0339V36.8333H190.005L198.184 47.7064C199.052 48.9074 200.416 49.5396 201.903 49.5396H205.311C205.559 49.5396 205.744 49.0972 205.497 48.781Z" fill="black"/>
<path d="M138.515 15.4033H117.757C117.385 15.4033 117.137 15.6562 117.137 16.0354C117.137 18.5641 119.182 20.6502 121.661 20.6502H138.515C138.764 20.6502 139.011 20.4605 139.011 20.1445V15.8458C138.949 15.5929 138.764 15.4033 138.515 15.4033ZM138.515 44.2927H123.024C122.776 44.2927 122.528 44.1031 122.528 43.7871V35.253C122.528 35.0001 122.714 34.7472 123.024 34.7472H137.338C137.587 34.7472 137.834 34.5576 137.834 34.2415V29.9429C137.834 29.69 137.649 29.4371 137.338 29.4371H117.819C117.447 29.4371 117.137 29.7532 117.137 30.1325V48.781C117.137 49.1603 117.447 49.4764 117.819 49.4764H138.515C138.764 49.4764 139.011 49.2868 139.011 48.9707V44.6721C138.949 44.4823 138.764 44.2927 138.515 44.2927Z" fill="black"/>
<path d="M43.07 15.2318L35.2292 27.1574C34.687 27.9695 35.7297 28.9526 36.4804 28.2687L44.1961 21.3869C44.4046 21.2159 44.6967 21.3442 44.6967 21.6434V43.1435C44.6967 43.4427 44.3213 43.571 44.1545 43.3572L20.7988 14.7189C20.0481 13.7785 18.9637 13.2656 17.7543 13.2656H16.9201C14.7514 13.2656 12.958 15.1036 12.958 17.369V47.6317C12.958 49.897 14.7514 51.735 16.9618 51.735C18.3381 51.735 19.631 51.0084 20.3818 49.7688L28.2226 37.8433C28.7648 37.0312 27.7221 36.0481 26.9714 36.732L19.2557 43.571C19.0472 43.7419 18.7552 43.6137 18.7552 43.3145V21.8571C18.7552 21.5579 19.1306 21.4296 19.2974 21.6434L42.653 50.2817C43.4037 51.2221 44.5298 51.735 45.6976 51.735H46.5317C48.7421 51.735 50.5355 49.897 50.5355 47.6317V17.369C50.4938 15.1036 48.7004 13.2656 46.49 13.2656C45.1137 13.2656 43.8208 13.9923 43.07 15.2318Z" fill="white"/>
<path d="M252.969 15.88V36.3395C252.969 40.7296 251.782 44.0306 249.407 46.2425C247.032 48.4543 243.574 49.5602 239.031 49.5602C234.556 49.5602 231.115 48.4543 228.706 46.2425C226.331 44.0306 225.144 40.7296 225.144 36.3395V15.88H230.667V35.686C230.667 38.8362 231.339 41.1653 232.681 42.6734C234.057 44.1479 236.174 44.8852 239.031 44.8852C241.922 44.8852 244.038 44.1479 245.38 42.6734C246.757 41.1653 247.445 38.8362 247.445 35.686V15.88H252.969Z" fill="black"/>
<path d="M260.407 49.0575V23.923H265.312L265.57 28.2462C266.43 26.5705 267.617 25.3473 269.132 24.5765C270.68 23.8057 272.401 23.4203 274.294 23.4203C276.118 23.4203 277.753 23.7722 279.199 24.476C280.678 25.1462 281.849 26.1851 282.709 27.5927C283.569 28.9667 284 30.6926 284 32.7704V49.0575H278.476V34.4292C278.476 31.9493 277.942 30.2402 276.875 29.3018C275.843 28.3299 274.535 27.844 272.952 27.844C271.816 27.844 270.715 28.0953 269.648 28.598C268.581 29.1007 267.686 29.9385 266.963 31.1115C266.275 32.2509 265.931 33.7757 265.931 35.686V49.0575H260.407Z" fill="black"/>
<path d="M294.125 19.7004C292.921 19.7004 291.991 19.4156 291.338 18.8459C290.718 18.2426 290.408 17.4048 290.408 16.3324C290.408 15.26 290.718 14.4389 291.338 13.8692C291.991 13.2995 292.921 13.0146 294.125 13.0146C295.295 13.0146 296.19 13.2995 296.81 13.8692C297.464 14.4389 297.791 15.26 297.791 16.3324C297.791 17.4048 297.464 18.2426 296.81 18.8459C296.19 19.4156 295.295 19.7004 294.125 19.7004ZM296.861 23.923V49.0575H291.338V23.923H296.861Z" fill="black"/>
<path d="M321.456 23.923H327.238L316.965 49.0575H310.925L300.6 23.923H306.691L313.97 44.3825L321.456 23.923Z" fill="black"/>
<path d="M342.121 49.5602C339.54 49.5602 337.268 49.0408 335.307 48.0019C333.379 46.963 331.865 45.4717 330.764 43.5279C329.662 41.5507 329.112 39.2048 329.112 36.4903C329.112 33.7757 329.645 31.4466 330.712 29.5029C331.813 27.5256 333.311 26.0176 335.204 24.9787C337.131 23.9398 339.333 23.4203 341.811 23.4203C344.324 23.4203 346.458 23.923 348.213 24.9284C349.968 25.9338 351.31 27.3078 352.24 29.0505C353.169 30.7931 353.633 32.7704 353.633 34.9822C353.633 35.6189 353.616 36.2054 353.582 36.7416C353.547 37.2778 353.496 37.7302 353.427 38.0989H334.532C334.773 40.4448 335.548 42.2377 336.855 43.4777C338.198 44.6841 339.919 45.2873 342.018 45.2873C343.739 45.2873 345.133 44.969 346.2 44.3322C347.266 43.6955 348.11 42.8074 348.729 41.668L353.117 43.6787C352.222 45.5219 350.794 46.963 348.832 48.0019C346.905 49.0408 344.668 49.5602 342.121 49.5602ZM341.708 27.6932C339.815 27.6932 338.249 28.2294 337.01 29.3018C335.806 30.3742 335.031 31.9325 334.687 33.9768H348.265C348.127 31.9661 347.473 30.4245 346.303 29.3521C345.133 28.2462 343.601 27.6932 341.708 27.6932Z" fill="black"/>
<path d="M359.577 49.0575V23.923H364.275L364.791 28.4472C366.202 25.096 368.904 23.4203 372.896 23.4203C373.412 23.4203 373.928 23.4706 374.445 23.5711C374.961 23.6382 375.391 23.7555 375.735 23.923L374.961 28.6483C374.582 28.5143 374.152 28.4137 373.67 28.3467C373.223 28.2462 372.603 28.1959 371.812 28.1959C370.71 28.1959 369.644 28.4807 368.611 29.0505C367.613 29.5867 366.77 30.4245 366.081 31.5639C365.428 32.6698 365.101 34.0606 365.101 35.7362V49.0575H359.577Z" fill="black"/>
<path d="M388.872 49.5602C386.29 49.5602 383.933 49.0743 381.799 48.1024C379.665 47.1305 377.979 45.7565 376.74 43.9804L380.56 40.7631C381.317 42.1372 382.401 43.2431 383.812 44.0809C385.258 44.8852 386.979 45.2873 388.975 45.2873C390.558 45.2873 391.814 45.0192 392.744 44.483C393.673 43.9468 394.137 43.1928 394.137 42.2209C394.137 41.5842 393.914 41.0312 393.466 40.5621C393.053 40.0594 392.244 39.674 391.04 39.4059L385.619 38.3C382.866 37.7638 380.904 36.8924 379.734 35.686C378.564 34.4795 377.979 32.9714 377.979 31.1618C377.979 29.7877 378.392 28.5143 379.218 27.3413C380.078 26.1684 381.3 25.23 382.883 24.5262C384.466 23.789 386.376 23.4203 388.614 23.4203C391.16 23.4203 393.346 23.8727 395.17 24.7776C397.028 25.6489 398.439 26.9056 399.403 28.5478L395.583 31.6644C394.895 30.3239 393.914 29.3353 392.64 28.6986C391.401 28.0283 390.093 27.6932 388.717 27.6932C387.03 27.6932 385.723 27.9948 384.793 28.598C383.898 29.1678 383.451 29.9218 383.451 30.8601C383.451 31.4969 383.709 32.0834 384.225 32.6196C384.742 33.1222 385.671 33.5076 387.013 33.7757L392.898 34.9822C395.376 35.4514 397.114 36.2557 398.112 37.3951C399.145 38.501 399.661 39.8583 399.661 41.4669C399.661 43.8798 398.698 45.8403 396.77 47.3484C394.843 48.8229 392.21 49.5602 388.872 49.5602Z" fill="black"/>
<path d="M408.143 19.7004C406.938 19.7004 406.009 19.4156 405.355 18.8459C404.736 18.2426 404.426 17.4048 404.426 16.3324C404.426 15.26 404.736 14.4389 405.355 13.8692C406.009 13.2995 406.938 13.0146 408.143 13.0146C409.313 13.0146 410.208 13.2995 410.827 13.8692C411.481 14.4389 411.808 15.26 411.808 16.3324C411.808 17.4048 411.481 18.2426 410.827 18.8459C410.208 19.4156 409.313 19.7004 408.143 19.7004ZM410.879 23.923V49.0575H405.355V23.923H410.879Z" fill="black"/>
<path d="M434.906 23.923V28.1456H426.026V41.5172C426.026 42.7236 426.371 43.6285 427.059 44.2317C427.747 44.8014 428.642 45.0863 429.743 45.0863C430.707 45.0863 431.516 44.9522 432.17 44.6841C432.858 44.3825 433.495 43.9804 434.08 43.4777L435.319 47.3986C434.527 48.0689 433.546 48.6051 432.376 49.0073C431.241 49.3759 429.967 49.5602 428.556 49.5602C426.285 49.5602 424.374 49.024 422.826 47.9516C421.277 46.8457 420.503 45.0025 420.503 42.422V28.1456H415.547V23.923H420.503V18.0415L426.026 16.5335V23.923H434.906Z" fill="black"/>
<path d="M462 23.923L450.694 52.0234C449.558 54.939 448.268 56.9665 446.822 58.1059C445.377 59.2789 443.518 59.8654 441.247 59.8654C439.973 59.8654 438.82 59.7145 437.788 59.4129C436.756 59.1113 435.843 58.6757 435.052 58.1059L436.394 53.9336C437.633 55.006 439.13 55.5422 440.885 55.5422C441.815 55.5422 442.641 55.3076 443.363 54.8385C444.121 54.3693 444.792 53.3974 445.377 51.9229L446.513 49.2083L443.776 42.975L435.723 23.923H441.918L447.648 39.7075L449.145 44.4328L450.849 39.2551L456.27 23.923H462Z" fill="black"/>
</svg>

'''
'''--- web-app/tailwind.config.js ---
module.exports = {
  content: ['./pages/**/*.{js,ts,jsx,tsx}', './components/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};

'''
'''--- web-app/test/__tests__/expiration-date.test.ts ---
import { PrismaClient } from '@prisma/client';
import dayjs from 'dayjs';
// import { prismaMock } from '../prisma/test-helpers/mock-client';
import { getExpiration, getRawQueryResult } from '../../helpers/expiration-date';
import { convertStringDateToMilliseconds, isBeforeNow } from '../../helpers/time';

const prisma = new PrismaClient();

afterAll(async () => {
  const deleteReceipt = prisma.action_receipts.deleteMany();
  const deleteActionReceipt = prisma.receipts.deleteMany();

  await prisma.$transaction([deleteReceipt, deleteActionReceipt]);

  await prisma.$disconnect();
});

// eslint-disable-next-line max-lines-per-function
describe('Test expiration date functions', () => {
  // eslint-disable-next-line max-lines-per-function
  describe('Accounts with 180 day inactivity after issue date', () => {
    // -- Test Case 1 --
    // ACCOUNT: sally.testnet
    describe('Account with 180 day inactivity and no frequent activity after issue date of certificate', () => {
      /**
       * Sally’s certificate was issued_at 2021-03-02T12:35:46+00:00,
       * She had no mainnet activitiy for 296 days (i.e. >180-days of inactivity)
       * Her last mainnet activity was on 2021-12-23T09:46:39+00:00
       * and she hasn’t been active since 2021-12-23T09:46:39+00:00
       * --
       * Her cert should have an expiration of:
       * = moment + 180 days
       * = 2021-03-02T12:35:46+00:00 + 180 days
       * = 2021-08-29T12:35:46+00:00
       */

      const issueDate = convertStringDateToMilliseconds('2021-03-02T12:35:46+00:00');

      it('Should return query result for Sally when 180-days inactivity is present and moment should be start date of first occurance of such period', async () => {
        const queryResult = await getRawQueryResult('sally.testnet', issueDate);
        expect(queryResult).toEqual(
          expect.arrayContaining([
            {
              // Start date of long inactivity period
              diff_to_next_activity: 296,
              moment: '2021-03-02T12:35:46+00:00',
            },
          ]),
        );
      });

      it('Should return expiration date for Sally as moment + 180 days', async () => {
        /**
         * Certificate expired 180 days after moment (start date of *first* long inactivity period)
         * Expiration date = 2021-03-02T12:35:46+00:00 + 180 days = 2021-08-29T12:35:46+00:00
         */
        await expect(getExpiration('sally.testnet', issueDate)).resolves.toEqual('2021-08-29T12:35:46+00:00');
      });
    });

    // -- Test Case 2 --
    // ACCOUNT: patricia.testnet
    describe('Account with no activity after issue date', () => {
      /**
       * Patricia's cert was issued_at 2022-04-01T21:08:07+00:00,
       * She has not had any mainnet activity since then
       * --
       * Issuance of certificate does not show up as mainnet activity
       * Therefore, query returns an empty result
       * Her cert should have an expiration of:
       * = issue date + 180 days
       * = 2022-04-01T21:08:07+00:00 + 180 days
       * = 2022-09-28T21:08:07+00:00
       */

      const issueDate = convertStringDateToMilliseconds('2022-04-01T21:08:07+00:00');

      it('Should return empty query result for Patrica', async () => {
        const queryResult = await getRawQueryResult('sally.testnet', issueDate);

        // Since Patricia did not have any mainnet activity after issue date, query should return empty
        expect(queryResult).toEqual(expect.arrayContaining([]));
      });

      it('Should return expiration date for Patricia as issue date + 180 days', async () => {
        /**
         * With an empty query result, getExpiration should return expiration date as:
         * = issue date + 180 days = 2022-04-01T21:08:07+00:00 + 180 days = 2022-09-28T21:08:07+00:00
         */
        await expect(getExpiration('patricia.testnet', issueDate)).resolves.toEqual('2022-09-28T21:08:07+00:00');
      });
    });

    // -- Test Case 3 --
    // ACCOUNT: steve.testnet
    describe('Account with 180 day inactivity and frequent activity after issue date of certificate', () => {
      /**
       * Steve's cert was issued_at 2021-01-05T11:15:09+00:00
       * He had frequent mainnet activity for a couple of months (through 2021-03-16T20:08:59+00:00)
       * but then no mainnet activity for 204 days (i.e. >180-days of inactivity)
       * and then had some more mainnet activity.
       * His last mainnet activity was on 2022-03-05T09:46:39+00:00
       * But none of that activity after his 180+ days of inactivity matters because his certificate should have expired 180 days after the
       * beginning of the *first* long period of inactivity (>=180 days).
       * --
       * His cert should have an expiration of:
       * = moment + 180 days
       * = 2021-03-16T20:08:59+00:00 + 180 days
       * = 2021-09-12T20:08:59+00:00
       */

      const issueDate = convertStringDateToMilliseconds('2021-01-05T11:15:09+00:00');

      it('Should return query result for Steve when 180-days inactivity is present and moment should be start date of first occurance of such period', async () => {
        const queryResult = await getRawQueryResult('steve.testnet', issueDate);
        expect(queryResult).toEqual(
          expect.arrayContaining([
            {
              // Start date of long inactivity period
              diff_to_next_activity: 204,
              moment: '2021-03-16T20:08:59+00:00',
            },
          ]),
        );
      });

      it('Should return correct expiration date for Steve', async () => {
        /**
         * Certificate expired 180 after moment (start date of *first* long inactivity period)
         * Expiration date = 2021-03-16T20:08:59+00:00 + 180 days = 2021-09-12T20:08:59+00:00
         */
        await expect(getExpiration('steve.testnet', issueDate)).resolves.toEqual('2021-09-12T20:08:59+00:00');
      });
    });

    // -- Test Case 4 --
    // ACCOUNT: bob.testnet
    describe('Account with multiple 180 day inactivity and frequent activity after issue date of certificate', () => {
      /**
       * Bob's certificate was issued_at 2018-10-01T00:00:00+00:00,
       * he has not had any mainnet activity for 365 days (i.e. >180-days of inactivity)
       * then had frequent mainnet activity for a couple of years (through 2021-05-07T13:20:37+00:00)
       * then again no mainnet activity for 184 days
       * then, had frequent mainnet activity for a couple of months (through 2022-03-04T13:20:37+00:00)
       * His last mainnet activity was on 2022-03-04T13:20:37+00:00
       * --
       * His cert should have an expiration of:
       * = moment + 180 days
       * = 2018-10-01T00:00:00+00:00 + 180 days
       * = 2018-10-01T00:00:00+00:00
       */

      const issueDate = convertStringDateToMilliseconds('2018-10-01T00:00:00+00:00');

      it('Should return query result for Bob when 180-days inactivity is present and moment should be start date of first occurance of such period', async () => {
        const queryResult = await getRawQueryResult('bob.testnet', issueDate);

        expect(queryResult).toEqual(
          expect.arrayContaining([
            {
              // Start date of long inactivity period
              diff_to_next_activity: 365,
              moment: '2018-10-01T00:00:00+00:00',
            },
          ]),
        );
      });

      it('Should return expiration date for Bob as moment + 180 days', async () => {
        /**
         * Certificate expired 180 after moment (start date of *first* long inactivity period)
         * Expiration date = 2018-10-01T00:00:00+00:00 + 180 days = 2019-03-30T00:00:00+00:00
         */
        await expect(getExpiration('bob.testnet', issueDate)).resolves.toEqual('2019-03-30T00:00:00+00:00');
      });
    });

    // -- Test Case 5 --
    // ACCOUNT: alice.testnet
    describe('Account with multiple 180 day inactivity and frequent activity after issue date of certificate', () => {
      /**
       * Alice's cert was issued_at 2019-08-03T00:00:00+00:00
       * she has not had any mainnet activity for 214 days (i.e. >180-days of inactivity)
       * then again no mainnet activity for 190 days
       * then again no mainnet activity for 182 days
       * and has not had any mainnet activity since then.
       * --
       * Her cert should have an expiration of:
       * = moment + 180 days
       * = 2019-08-03T00:00:00+00:00 + 180 days
       * = 2020-01-30T00:00:00+00:00
       */

      const issueDate = convertStringDateToMilliseconds('2019-08-03T00:00:00+00:00');

      it('Should return query result for Alice when 180-days inactivity is present and moment should be start date of first occurance of such period', async () => {
        const queryResult = await getRawQueryResult('alice.testnet', issueDate);

        expect(queryResult).toEqual(
          expect.arrayContaining([
            {
              // Start date of long inactivity period
              diff_to_next_activity: 214,
              moment: '2019-08-03T00:00:00+00:00',
            },
          ]),
        );
      });

      it('should return expiration date for Alice as moment + 180 days', async () => {
        /**
         * Certificate expired 180 after moment (start date of *first* long inactivity period)
         * Expiration date = 2019-08-03T00:00:00+00:00 + 180 days = 2020-01-30T00:00:00+00:00
         */
        await expect(getExpiration('alice.testnet', issueDate)).resolves.toEqual('2020-01-30T00:00:00+00:00');
      });
    });
  });

  // eslint-disable-next-line max-lines-per-function
  describe('Accounts with frequent activity and no 180 day inactivity after issue date', () => {
    // -- Test Case 6 --
    // ACCOUNT: rebecca.testnet
    describe('Account with frequent activity after issue date (every couple of days)', () => {
      /**
       * Rebecca's cert was issued_at 2021-08-03T00:00:00+00:00
       * She has continued to have mainnet activity every couple of days through 2022-04-07T16:25:59+00:00
       * --
       * Her cert should have an expiration of:
       * = moment (most recent activity) + 180 days
       * = 2022-04-07T16:25:59+00:00 + 180 days
       * = 2022-10-04T16:25:59+00:00
       */

      const issueDate = convertStringDateToMilliseconds('2021-08-03T00:00:00+00:00');

      it('should return query result for Rebecca', async () => {
        const queryResult = await getRawQueryResult('rebecca.testnet', issueDate);
        expect(queryResult).toEqual(
          expect.arrayContaining([
            {
              // Most recent activity
              diff_to_next_activity: null,
              moment: '2022-04-07T16:25:59+00:00',
            },
          ]),
        );
      });

      it('should return expiration date as last activity date + 180 for account with no 180-day inactivity period', async () => {
        /**
         * Certificate expired 180 after moment (last activity)
         * Expiration date = 2022-04-07T16:25:59+00:00 + 180 days = 2022-10-04T16:25:59+00:00
         */
        await expect(getExpiration('rebecca.testnet', issueDate)).resolves.toEqual('2022-10-04T16:25:59+00:00');
      });
    });

    // -- Test Case 7 --
    // ACCOUNT: jennifer.testnet
    describe('Account with frequent activity after issue date every couple of minutes', () => {
      /**
       * Jennifer's cert was issued_at 2022-04-06T01:00:00+00:00
       * She has continued to have mainnet activity every couple of minutes through 2022-04-06T10:10:00+00:00
       * --
       * Her cert should have an expiration of:
       * = moment (most recent activity) + 180 days
       * = 2022-04-06T10:10:00+00:00 + 180 days
       * = 2022-10-03T10:10:00+00:00
       */

      const issueDate = convertStringDateToMilliseconds('2022-04-06T01:00:00+00:00');

      it('should return query result for Jennifer', async () => {
        const queryResult = await getRawQueryResult('jennifer.testnet', issueDate);
        expect(queryResult).toEqual(
          expect.arrayContaining([
            {
              // Most recent activity
              diff_to_next_activity: null,
              moment: '2022-04-06T10:10:00+00:00',
            },
          ]),
        );
      });

      it('jennifer', async () => {
        /**
         * Certificate expired 180 after moment (last activity)
         * Expiration date = 2022-04-06T10:10:00+00:00 + 180 days = 2022-10-03T10:10:00+00:00
         */
        await expect(getExpiration('jennifer.testnet', issueDate)).resolves.toEqual('2022-10-03T10:10:00+00:00');
      });
    });
  });
});

/**
 * The isBeforeNow function checks whether the expiration date is before the present moment or not
 * If expiration is before the present moment, certificate has expired;
 * If expiration is not before the present moment, certificate has not expired yet.
 */
describe('Test the isBeforeNow function', () => {
  // -- Test Case 8 --
  // ACCOUNT: william.testnet
  describe('Account which expiration date falls 1 hour before present moment (now)', () => {
    /**
     * Williams's cert was issued_at 180 days and 2 hours prior to now (present moment)
     * He had activity 1 hour after the issue date
     * he has not had any mainnet activity since
     * --
     * His cert should have an expiration of:
     * moment + 180 days
     * So, expiration date
     * = (present moment - 180 days - 2 hours + 1 hour) + 180 days
     * = present moment - 1 hour
     * --
     * isBeforeNow function should return true
     */

    const issueDate = convertStringDateToMilliseconds(dayjs.utc().subtract(180, 'day').subtract(2, 'hour').format('YYYY-MM-DDTHH:mm:ss+00:00'));

    it('isBeforeNow should return true for william.testnet', async () => {
      const expiration = await getExpiration('william.testnet', issueDate);
      // Expiration date is one hour before now
      // isBeforeNow should return true
      expect(isBeforeNow(expiration)).toBe(true);
    });
  });

  // -- Test Case 9 --
  // ACCOUNT: john.testnet
  describe('Account which expiration date falls 1 hour after present moment (now)', () => {
    /**
     * John's cert was issued_at 180 days prior to now (present moment)
     * He had activity 1 hour after the issue date
     * he has not had any mainnet activity since
     * --
     * His cert should have an expiration of:
     * moment + 180 days
     * So, expiration date
     * = (present moment - 180 days  + 1 hour) + 180 days
     * = present moment + 1 hour
     * --
     * isBeforeNow function should return false
     */

    const issueDate = convertStringDateToMilliseconds(dayjs.utc().subtract(180, 'day').format('YYYY-MM-DDTHH:mm:ss+00:00'));

    it('isBeforeNow should return false for john.testnet', async () => {
      const expiration = await getExpiration('john.testnet', issueDate);
      /**
       * Expiration date is one hour after now
       * isBeforeNow should return false
       */
      expect(isBeforeNow(expiration)).toBe(false);
    });
  });
});

'''
'''--- web-app/test/test-helpers/client.ts ---
import { PrismaClient } from '@prisma/client';

const client = new PrismaClient();
export default client;

'''
'''--- web-app/test/test-helpers/generate-account-activities.ts ---
/* eslint-disable canonical/filename-match-exported */
import dayjs from 'dayjs';
import crypto from 'crypto'; // https://stackoverflow.com/a/27747377
import utc from 'dayjs/plugin/utc'; // https://day.js.org/docs/en/plugin/utc
import { convertStringDateToNanoseconds } from '../../helpers/time';

dayjs.extend(utc); // Use dayjs utc plugin to avoid parsing different dates depending on local timezone.

type ActivityData = {
  account_activities: Array<{
    included_in_block_timestamp: string;
    receipt_id: string;
  }>;
  signer_account_id: string;
};

export default async function generateActivityData(data: ActivityData, startDate: string, endDate: string, timeUnit: any, interval: number) {
  const startDateDayJs = dayjs.utc(startDate);
  const endDateDayJs = dayjs.utc(endDate);
  const duration = endDateDayJs.diff(startDateDayJs, timeUnit); // Duration between startDate and endDate in timeUnit (i.e. days, hours,...)

  // Add activity every value of interval in given timeUnit
  for (let index = interval; index < duration; index += interval) {
    const date = startDateDayJs.add(index, timeUnit).format('YYYY-MM-DDTHH:mm:ss+00:00');

    data.account_activities.push({
      included_in_block_timestamp: convertStringDateToNanoseconds(date),
      receipt_id: crypto.randomBytes(22.5).toString('hex'), // Match receipt_id length convention of 45 chars. Using randomBytes, resulting string is double the size of given bytes in length.
    });
  }
}

'''
'''--- web-app/test/test-helpers/mock-client.ts ---
import { PrismaClient } from '@prisma/client';
// eslint-disable-next-line import/no-extraneous-dependencies
import { mockDeep, mockReset, DeepMockProxy } from 'jest-mock-extended';

import client from './client';

jest.mock('./client', () => ({
  __esModule: true,
  default: mockDeep<PrismaClient>(),
}));

beforeEach(() => {
  // eslint-disable-next-line @typescript-eslint/no-use-before-define
  mockReset(prismaMock);
});

// eslint-disable-next-line import/prefer-default-export
export const prismaMock = client as unknown as DeepMockProxy<PrismaClient>;

'''
'''--- web-app/tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}

'''