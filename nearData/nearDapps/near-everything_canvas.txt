*GitHub Repository "near-everything/canvas"*

'''--- .env ---

'''
'''--- .github/ISSUE_TEMPLATE/bug_report.md ---
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: bug
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.

'''
'''--- .github/ISSUE_TEMPLATE/feature-request.md ---
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: enhancement
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

'''
'''--- .github/workflows/release.yml ---
name: Deploy Components to Mainnet
on:
  push:
    branches: [main]
jobs:
  deploy-mainnet:
    uses: NEARBuilders/bos-workspace/.github/workflows/deploy.yml@main
    with:
      deploy-env: "mainnet"
      app-name: "canvas"
      deploy-account-address:  ${{ vars.BOS_DEPLOY_ACCOUNT_ID }}
      signer-account-address: ${{ vars.BOS_SIGNER_ACCOUNT_ID }}
      signer-public-key: ${{ vars.BOS_SIGNER_PUBLIC_KEY }}
    secrets:
      SIGNER_PRIVATE_KEY:  ${{ secrets.BOS_SIGNER_PRIVATE_KEY }}
'''
'''--- README.md ---
# every canvas

Connect your canvas to the open web.

![draw everything](./docs/draw.everything.dev.gif)

[everyone](https://near.social/mob.near/widget/Everyone) [builds](https://www.nearbuilders.org/) [everything](https://www.merriam-webster.com/dictionary/everything) [together](https://near.social).

# Context

[Sawyer Hood](https://github.com/SawyerHood) built [an app](https://github.com/SawyerHood/draw-a-ui) that uses tldraw and the [gpt-4-vision](https://openai.com/blog/new-models-and-developer-products-announced-at-devday) api to generate html based on a wireframe you draw.

[tldraw forked that app](https://github.com/tldraw/draw-a-ui), then [I forked tldraw](https://github.com/tldraw/draw-a-ui).

I had originally adapted the prompt and preview shape to create [near.social](https://near.social) widgets and embed them via [near-bos-webcomponent](https://github.com/petersalomonsen/near-bos-webcomponent). I was able to create valid, stateful widget code:

![A demo of the app](https://github.com/elliotBraem/draw-a-ui/blob/121194dfbfbfbc1df650e894d2667a7bddbf030f/demo.gif)

It worked by taking the current canvas SVG, converting it to a PNG, and then sending that png to gpt-4-vision with instructions to return a single jsx file with styled components. The JSX code was then passed to a [near-bos-webcomponent](https://github.com/petersalomonsen/near-bos-webcomponent) so it could be rendered via the Near Social VM](https://github.com/NearSocial/VM), but now I'm  thinking there should be a widget with an iframe inside it -- then this iframe holds the html that gets generated from the canvas. Possibly sharing some resemblance with [bos-web-engine](https://github.com/near/bos-web-engine/blob/main/architecture.md#trust).

# Overview

This repository is built using the [NEAR open web stack](https://near.org/learn). 

Right now, it is a [Near Social gateway](https://github.com/NearSocial/viewer) and [bos-workspace](https://github.com/nearbuilders/bos-workspace) combined in one. This gateway provides [tldraw](https://tldraw.dev/) as a custom element to the [Near Social VM](https://github.com/NearSocial/VM). This enables us to use ```<Tldraw />``` and it's [editor](./src/components/custom/tldraw/Canvas.js) via:
```javascript
<Canvas
  initialSnapshot={data || {}}
  persistance={path}
  autoFocus={true}
/>
```

in a widget you can find in [apps/canvas/widget/index](./apps/canvas/widget/index.jsx). [Widgets](https://thewiki.near.page/near.social_widgets) are reusable composable components for Near Social. You can view and create widgets at [near.social](https://near.social). 

This means the [draw.everything.dev](https://draw.everything.dev) gateway provides you with the ability to hack your own components using the ```<Canvas>``` element.

This structure will evolve for a better development experience.

## Setup & Development

Initialize repo:
```
yarn
```

Start development version:
```
yarn dev
```

This will start both the gateway at localhost:3000 and serve the widgets from http://127.0.0.1:4040.

Once these are running, copy this server address (http://127.0.0.1:4040), go to [localhost:3000/flags](http://localhost:3000/flags) (Chrome recommended), and paste it as the BOS Loader Url.

Save and you should see the following banner:

![bos-loader](./docs/bos-loader.png)

### Next Steps

- [x] Merge [PR to near-bos-webcomponent](https://github.com/petersalomonsen/near-bos-webcomponent/pull/1) and replace bundles from CDN
- [x] Ability to publish JSX widget to the [social-db](https://github.com/NearSocial/social-db)
- [ ] Load in existing widgets and make modifications to them
- [x] Option to provide your own API key ([near-openai](https://github.com/petersalomonsen/near-openai))
- [ ] Feature to provide custom prompts and option to swap chat gpt model - IN DEV
- [ ] Store JSON on IPFS and create [hyperfiles](https://github.com/hyperfiles-org/hyperfiles) for saving canvas and communicating with [Obsidian](https://docs.obsidian.md/Plugins/Getting+started/Build+a+plugin).
- [ ] Deploy to [web4](https://github.com/vgrichina/web4)

## Contributing

Pull requests are welcome! Happy hacking!

If you'd like to help improve the developer experience, help out [here](https://github.com/orgs/NEARBuilders/projects/5).

'''
'''--- apps/canvas/bos.config.json ---
{
  "appAccount": "everycanvas.near"
}
'''
'''--- config/paths.js ---
const path = require("path");

const srcPath = path.resolve(__dirname, "../src");
const distPath = path.resolve(__dirname, "../dist");
const publicPath = path.resolve(__dirname, "../public");
const nodeModulesPath = path.resolve(__dirname, "../node_modules");

module.exports = {
  srcPath,
  distPath,
  publicPath,
  nodeModulesPath,
};

'''
'''--- config/presets/loadPreset.js ---
const { merge } = require("webpack-merge");

const loadPresets = (env = { presets: [] }) => {
  const presets = env.presets || [];
  /** @type {string[]} */
  const mergedPresets = [].concat(...[presets]);
  const mergedConfigs = mergedPresets.map((presetName) =>
    require(`./webpack.${presetName}.js`)(env)
  );

  return merge({}, ...mergedConfigs);
};
module.exports = loadPresets;

'''
'''--- config/presets/webpack.analyze.js ---
const WebpackBundleAnalyzer =
  require("webpack-bundle-analyzer").BundleAnalyzerPlugin;

module.exports = () => ({
  plugins: [new WebpackBundleAnalyzer()],
});

'''
'''--- config/webpack.development.js ---
const path = require("path");
const { HotModuleReplacementPlugin } = require("webpack");

module.exports = () => ({
  devtool: false,
  module: {
    rules: [
      {
        test: /\.(scss|css)$/,
        use: [
          {
            // inject CSS to page
            loader: "style-loader",
          },
          {
            // translates CSS into CommonJS modules
            loader: "css-loader",
          },
          {
            // Run postcss actions
            loader: "postcss-loader",
            options: {
              // `postcssOptions` is needed for postcss 8.x;
              // if you use postcss 7.x skip the key
              postcssOptions: {
                // postcss plugins, can be exported to postcss.config.js
                plugins: function () {
                  return [require("autoprefixer")];
                },
              },
            },
          },
          {
            // compiles Sass to CSS
            loader: "sass-loader",
            options: {
              // Prefer `dart-sass`
              implementation: require("sass"),
              sassOptions: {
                quietDeps: true,
              },
            },
          },
        ],
      },
    ],
  },
  devServer: {
    open: true,
    static: path.resolve(__dirname, "../dist"),
    port: 3000,
    compress: true,
    historyApiFallback: {
      disableDotRule: true,
    },
  },
  plugins: [new HotModuleReplacementPlugin()],
});

'''
'''--- config/webpack.production.js ---
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const CssMinimizerPlugin = require("css-minimizer-webpack-plugin");
const path = require("path");

module.exports = () => {
  return {
    output: {
      path: path.resolve(__dirname, "../dist"),
      publicPath: "/",
      filename: "[name].[contenthash].bundle.js",
    },
    devtool: false,
    module: {
      rules: [
        // {
        //   test: /\.(css)$/,
        //   use: [MiniCssExtractPlugin.loader, "css-loader"],
        //   //   options: {
        //   //     sourceMap: false,
        //   //   },
        // },
        {
          test: /\.(scss|css)$/,
          use: [
            {
              // inject CSS to page
              loader: "style-loader",
            },
            {
              // translates CSS into CommonJS modules
              loader: "css-loader",
            },
            {
              // Run postcss actions
              loader: "postcss-loader",
              options: {
                // `postcssOptions` is needed for postcss 8.x;
                // if you use postcss 7.x skip the key
                postcssOptions: {
                  // postcss plugins, can be exported to postcss.config.js
                  plugins: function () {
                    return [require("autoprefixer")];
                  },
                },
              },
            },
            {
              // compiles Sass to CSS
              loader: "sass-loader",
              options: {
                // Prefer `dart-sass`
                implementation: require("sass"),
                sassOptions: {
                  quietDeps: true,
                },
              },
            },
          ],
        },
      ],
    },
    plugins: [
      new MiniCssExtractPlugin({
        filename: "styles/[name].[contenthash].css",
        chunkFilename: "[id].css",
      }),
    ],
    optimization: {
      minimize: true,
      minimizer: [new CssMinimizerPlugin(), "..."],
      runtimeChunk: {
        name: "runtime",
      },
    },
    performance: {
      hints: false,
      maxEntrypointSize: 512000,
      maxAssetSize: 512000,
    },
  };
};

'''
'''--- functions/[[accountId]]/widget/[[index]].js ---
import {
  socialGet,
  imageToUrl,
  wrapImage,
  DefaultProfileImage,
} from "../../common";

class MetaTitleInjector {
  constructor({ title }) {
    this.title = title;
  }

  element(element) {
    element.setAttribute("content", this.title);
  }
}

class MetaImageInjector {
  constructor({ image, authorImage }) {
    this.image = image;
    this.authorImage = authorImage;
  }

  element(element) {
    if (this.image) {
      element.setAttribute("content", this.image);
    } else if (this.authorImage) {
      element.setAttribute("content", this.authorImage);
    }
  }
}

class MetaTwitterCardInjector {
  constructor({ image }) {
    this.image = image;
  }

  element(element) {
    if (!this.image) {
      element.setAttribute("content", "summary");
    }
  }
}

class MetaDescriptionInjector {
  constructor({ shortDescription }) {
    this.shortDescription = shortDescription;
  }

  element(element) {
    element.setAttribute(
      "content",
      this.shortDescription?.replaceAll("\n", " ")
    );
  }
}

class TitleInjector {
  constructor({ title }) {
    this.title = title;
  }

  element(element) {
    element.setInnerContent(this.title);
  }
}

class NoscriptDescriptionInjector {
  constructor({ description }) {
    this.description = description;
  }

  element(element) {
    element.setInnerContent(this.description);
  }
}

function defaultData() {
  const image = "https://nearbuilders.org/assets/logo.png";
  const title = "Canvas";
  const description =
    "Support Systems for Open Web Developers";
  return {
    image,
    title,
    description,
  };
}

async function postData(env, url, data, isPost) {
  const accountId = url.searchParams.get("accountId");
  const blockHeight = url.searchParams.get("blockHeight");
  const [content, name, authorImage] = await Promise.all([
    socialGet(
      `${accountId}/post/${isPost ? "main" : "comment"}`,
      blockHeight,
      true
    ),
    socialGet(`${accountId}/profile/name`),
    socialGet(`${accountId}/profile/image/**`),
  ]);

  data.raw = content;
  data.description = content?.text || "";
  data.image = await imageToUrl(env, content?.image);
  if (!data.image) {
    data.authorImage = await imageToUrl(env, authorImage);
  }
  data.title = isPost
    ? `Post by ${name ?? accountId} | Near Social`
    : `Comment by ${name ?? accountId} | Near Social`;
  data.accountName = name;
  data.accountId = accountId;
}

async function profileData(env, url, data) {
  const accountId = url.searchParams.get("accountId");
  const profile = await socialGet(`${accountId}/profile/**`);

  const name = profile?.name;
  data.raw = profile;
  data.description =
    profile?.description || `Profile of ${accountId} on Near Social`;
  data.image = await imageToUrl(env, profile?.image);
  data.authorImage = data.image || wrapImage(DefaultProfileImage);
  data.title = name
    ? `${name} (${accountId}) | Near Social`
    : `${accountId} | Near Social`;
  data.accountName = name;
  data.accountId = accountId;
}

async function widgetData(env, url, data) {
  const parts = url.pathname.split("/");
  const accountId = parts[1];
  const widgetId = parts[3];
  const metadata = await socialGet(
    `${accountId}/widget/${widgetId}/metadata/**`
  );

  const name = metadata?.name || widgetId;
  data.raw = metadata;
  data.description =
    metadata?.description || `Component ${name} created by ${accountId}`;
  data.image = await imageToUrl(env, metadata?.image);
  data.title = `${name} by ${accountId} | Near Social`;
  data.accountName = name;
  data.accountId = accountId;
}

async function sourceData(env, url, data) {
  const key = url.searchParams.get("src");
  const parts = key.split("/");
  const accountId = parts[0];
  const blockHeight = url.searchParams.get("blockHeight");
  const [source, image] = await Promise.all([
    socialGet(key, blockHeight),
    socialGet(`${key}/metadata/image/**`),
  ]);

  data.raw = source;
  data.description = source || "The source code is not available.";
  data.image = null;
  data.authorImage = await imageToUrl(env, image);
  data.title = `Source code of ${key} at block height ${blockHeight} | Near Social`;
  data.accountId = accountId;
}

async function generateData(env, url) {
  const data = defaultData();
  try {
    if (
      url.pathname === "/mob.near/widget/MainPage.Post.Page" ||
      url.pathname === "/mob.near/widget/MainPage.N.Post.Page" ||
      url.pathname === "/near/widget/PostPage"
    ) {
      await postData(env, url, data, true);
    } else if (
      url.pathname === "/mob.near/widget/MainPage.Comment.Page" ||
      url.pathname === "/mob.near/widget/MainPage.N.Comment.Page"
    ) {
      await postData(env, url, data, false);
    } else if (url.pathname === "/mob.near/widget/ProfilePage") {
      await profileData(env, url, data);
    } else if (url.pathname === "/mob.near/widget/WidgetSource") {
      await sourceData(env, url, data);
    } else {
      await widgetData(env, url, data);
    }
  } catch (e) {
    console.error(e);
  }
  data.shortDescription = data.description.slice(0, 250);

  return data;
}

export async function onRequest({ request, next, env }) {
  const url = new URL(request.url);
  if (
    url.pathname.split("/").length < 4 ||
    url.pathname.endsWith(".bundle.js")
  ) {
    return next();
  }
  const data = await generateData(env, url);
  return (
    new HTMLRewriter()
      .on('meta[property="og:title"]', new MetaTitleInjector(data))
      .on('meta[property="og:image"]', new MetaImageInjector(data))
      .on('meta[name="twitter:card"]', new MetaTwitterCardInjector(data))
      .on('meta[property="og:description"]', new MetaDescriptionInjector(data))
      .on('meta[name="description"]', new MetaDescriptionInjector(data))
      // .on("head", new MetaTagInjector(data))
      .on("title", new TitleInjector(data))
      .on("noscript", new NoscriptDescriptionInjector(data))
      .transform(await next())
  );
}

'''
'''--- functions/common.js ---
import { Buffer } from "node:buffer";

export async function socialIndex(action, key, options) {
  const request = await fetch("https://api.near.social/index", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      action,
      key,
      options,
    }),
  });
  return await request.json();
}

export async function socialKeys(keys, blockHeight, options) {
  const request = await fetch("https://api.near.social/keys", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      keys: [keys],
      blockHeight,
      options,
    }),
  });
  return await request.json();
}

export async function socialGet(keys, blockHeight, parse) {
  const request = await fetch("https://api.near.social/get", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      keys: [keys],
      blockHeight,
    }),
  });
  let data = await request.json();
  const parts = keys.split("/");
  for (let i = 0; i < parts.length; i++) {
    const part = parts[i];
    if (part === "*" || part === "**") {
      break;
    }
    data = data?.[part];
  }
  if (parse) {
    try {
      data = JSON.parse(data);
    } catch (e) {
      return null;
    }
  }
  return data;
}

export async function viewCall({ contractId, method, args }) {
  const res = await fetch("https://rpc.mainnet.near.org", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      jsonrpc: "2.0",
      id: "dontcare",
      method: "query",
      params: {
        request_type: "call_function",
        finality: "final",
        account_id: contractId,
        method_name: method,
        args_base64: btoa(JSON.stringify(args)),
      },
    }),
  });
  const json = await res.json();
  const result = Buffer.from(json.result.result).toString("utf-8");
  return JSON.parse(result);
}

export async function nftToImageUrl({ contractId, tokenId }) {
  const [token, nftMetadata] = await Promise.all([
    tokenId
      ? viewCall({
          contractId,
          method: "nft_token",
          args: { token_id: tokenId },
        })
      : Promise.resolve(null),
    viewCall({
      contractId,
      method: "nft_metadata",
      args: {},
    }),
  ]);

  if (!tokenId) {
    return nftMetadata.icon;
  }

  const tokenMetadata = token?.metadata || {};
  const tokenMedia = tokenMetadata.media || "";

  let imageUrl =
    tokenMedia.startsWith("https://") ||
    tokenMedia.startsWith("http://") ||
    tokenMedia.startsWith("data:image")
      ? tokenMedia
      : nftMetadata.base_uri
      ? `${nftMetadata.base_uri}/${tokenMedia}`
      : tokenMedia.startsWith("Qm") || tokenMedia.startsWith("ba")
      ? `https://ipfs.near.social/ipfs/${tokenMedia}`
      : tokenMedia;

  if (!tokenMedia && tokenMetadata.reference) {
    const metadataUrl =
      nftMetadata.base_uri === "https://arweave.net" &&
      !tokenMetadata.reference.startsWith("https://")
        ? `${nftMetadata.base_uri}/${tokenMetadata.reference}`
        : tokenMetadata.reference.startsWith("https://") ||
          tokenMetadata.reference.startsWith("http://")
        ? tokenMetadata.reference
        : tokenMetadata.reference.startsWith("ar://")
        ? `https://arweave.net/${tokenMetadata.reference.split("//")[1]}`
        : null;
    if (metadataUrl) {
      const res = await fetch(metadataUrl);
      const json = await res.json();
      imageUrl = json.media;
    }
  }

  return imageUrl;
}

export function wrapImage(url) {
  return url ? `https://i.near.social/large/${url}` : null;
}

export async function internalImageToUrl(env, image) {
  if (image?.url) {
    return image.url;
  } else if (image?.ipfs_cid) {
    return `https://ipfs.near.social/ipfs/${image.ipfs_cid}`;
  } else if (image?.nft) {
    try {
      const { contractId, tokenId } = image.nft;
      const NftKV = env.NftKV;
      const path = tokenId ? `${contractId}/${tokenId}` : contractId;

      let imageUrl = await NftKV.get(path);
      if (!imageUrl) {
        imageUrl = await nftToImageUrl({ contractId, tokenId });
        if (imageUrl) {
          await NftKV.put(path, imageUrl);
        }
      }
      return imageUrl;
    } catch (e) {
      console.log(e);
    }
  }
  return null;
}

export async function imageToUrl(env, image) {
  return wrapImage(await internalImageToUrl(env, image));
}

export const DefaultProfileImage =
  "https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm";

'''
'''--- functions/magic/img/account/[index].js ---
import {
  DefaultProfileImage,
  internalImageToUrl,
  socialGet,
} from "../../../common";

export async function onRequest({ request, next, env }) {
  const url = new URL(request.url);
  const parts = url.pathname.split("/");
  if (parts.length !== 5) {
    return next();
  }
  const accountId = parts[4];
  const image = await socialGet(`${accountId}/profile/image/**`);

  const destinationURL = await internalImageToUrl(env, image);

  if (!destinationURL) {
    // return status 203, which means "non-authoritative information"
    return new Response(DefaultProfileImage, {
      status: 203,
    });
  }

  return new Response(destinationURL, {
    headers: {
      "content-type": "text/plain;charset=UTF-8",
    },
  });
}

'''
'''--- functions/magic/img/nft/[[index]].js ---
import { internalImageToUrl } from "../../../common";

export async function onRequest({ request, next, env }) {
  const url = new URL(request.url);
  const parts = url.pathname.split("/");
  if (parts.length !== 5 && parts.length !== 6) {
    return next();
  }
  const contractId = parts[4];
  const tokenId = parts[5];

  const destinationURL = await internalImageToUrl(env, {
    nft: {
      contractId,
      tokenId,
    },
  });

  return destinationURL
    ? new Response(destinationURL, {
        headers: {
          "content-type": "text/plain;charset=UTF-8",
        },
      })
    : new Response(null, {
        status: 404,
      });
}

'''
'''--- functions/sitemap/index.js ---
export async function onRequest({ request, next, env }) {
  return new Response(
    `<?xml version="1.0" encoding="UTF-8"?>
<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
    <sitemap>
        <loc>https://nearbuilders.org/sitemap/posts/0</loc>
    </sitemap>
    <sitemap>
        <loc>https://nearbuilders.org/sitemap/widgets/</loc>
    </sitemap>
    <sitemap>
        <loc>https://nearbuilders.org/sitemap/profiles/</loc>
    </sitemap>
    <sitemap>
        <loc>https://nearbuilders.org/sitemap/sources/0</loc>
    </sitemap>
    <sitemap>
        <loc>https://nearbuilders.org/sitemap/sources/50000</loc>
    </sitemap>
</sitemapindex>`,
    {
      headers: {
        "content-type": "application/xml;charset=UTF-8",
      },
    }
  );
}

'''
'''--- functions/sitemap/posts/[index].js ---
import { socialIndex } from "../../common";

const Limit = 50000;

export const generateSitemapPosts = async (env, offset) => {
  const posts = await socialIndex("post", "main", {});
  const urls = posts.map(
    (post) =>
      `  <url>
    <loc>https://nearbuilders.org/mob.near/widget/MainPage.N.Post.Page?accountId=${post.accountId}&amp;blockHeight=${post.blockHeight}</loc>
    <changefreq>monthly</changefreq>
  </url>`
  );
  console.log("urls count", urls.length);
  return urls.slice(offset, offset + Limit).join("\n");
};

export async function onRequest({ request, env, next }) {
  const url = new URL(request.url);
  const parts = url.pathname.split("/");
  if (parts.length !== 4) {
    return next();
  }
  const offset = parseInt(parts[3]);

  return new Response(
    `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${await generateSitemapPosts(env, offset)}
</urlset>`,
    {
      headers: {
        "content-type": "application/xml;charset=UTF-8",
      },
    }
  );
}

'''
'''--- functions/sitemap/profiles/index.js ---
import { socialKeys } from "../../common";

export const generateSitemapProfiles = async (env) => {
  const data = await socialKeys("*/profile");
  const accountIds = Object.keys(data);
  return accountIds
    .map(
      (accountId) =>
        `  <url>
    <loc>https://nearbuilders.org/mob.near/widget/ProfilePage?accountId=${accountId}</loc>
    <changefreq>monthly</changefreq>
  </url>`
    )
    .join("\n");
};

export async function onRequest({ env }) {
  return new Response(
    `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${await generateSitemapProfiles(env)}
</urlset>`,
    {
      headers: {
        "content-type": "application/xml;charset=UTF-8",
      },
    }
  );
}

'''
'''--- functions/sitemap/sources/[index].js ---
import { socialKeys } from "../../common";

const MinBlockHeight = 75942518;
const LIMIT = 50000;

export const generateSitemapSources = async (env, offset) => {
  const data = await socialKeys("*/widget/*", null, {
    return_type: "History",
  });
  const urls = Object.entries(data)
    .map(([accountId, widget]) =>
      Object.entries(widget.widget)
        .map(([widgetId, blockHeights]) =>
          blockHeights
            .filter((blockHeight) => blockHeight >= MinBlockHeight)
            .map(
              (blockHeight) =>
                `  <url>
    <loc>https://nearbuilders.org/mob.near/widget/WidgetSource?src=${accountId}/widget/${widgetId}&amp;blockHeight=${blockHeight}</loc>
    <changefreq>never</changefreq>
  </url>`
            )
        )
        .flat()
    )
    .flat();
  console.log("urls count", urls.length);
  return urls.slice(offset, offset + LIMIT).join("\n");
};

export async function onRequest({ env, request, next }) {
  const url = new URL(request.url);
  const parts = url.pathname.split("/");
  if (parts.length !== 4) {
    return next();
  }
  const offset = parseInt(parts[3]);

  return new Response(
    `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${await generateSitemapSources(env, offset)}
</urlset>`,
    {
      headers: {
        "content-type": "application/xml;charset=UTF-8",
      },
    }
  );
}

'''
'''--- functions/sitemap/widgets/index.js ---
import { socialKeys } from "../../common";

export const generateSitemapWidgets = async (env) => {
  const data = await socialKeys("*/widget/*/metadata");
  return Object.entries(data)
    .map(([accountId, widget]) =>
      Object.keys(widget.widget).map(
        (widgetId) =>
          `  <url>
    <loc>https://nearbuilders.org/${accountId}/widget/${widgetId}</loc>
    <changefreq>monthly</changefreq>
  </url>`
      )
    )
    .flat()
    .join("\n");
};

export async function onRequest({ env }) {
  return new Response(
    `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${await generateSitemapWidgets(env)}
</urlset>`,
    {
      headers: {
        "content-type": "application/xml;charset=UTF-8",
      },
    }
  );
}

'''
'''--- package.json ---
{
  "name": "canvas",
  "version": "0.0.0",
  "homepage": "/",
  "private": true,
  "dependencies": {
    "@monaco-editor/react": "^4.6.0",
    "@near-wallet-selector/core": "^8.5.0",
    "@near-wallet-selector/here-wallet": "^8.5.0",
    "@near-wallet-selector/meteor-wallet": "^8.5.0",
    "@near-wallet-selector/modal-ui": "^8.5.0",
    "@near-wallet-selector/my-near-wallet": "^8.5.0",
    "@near-wallet-selector/near-wallet": "^8.5.0",
    "@near-wallet-selector/neth": "^8.5.0",
    "@near-wallet-selector/nightly": "^8.5.0",
    "@near-wallet-selector/sender": "^8.5.0",
    "@splinetool/react-spline": "^2.2.6",
    "@splinetool/runtime": "^0.9.494",
    "@tldraw/tldraw": "^2.0.2",
    "@web3-onboard/core": "^2.16.2",
    "@web3-onboard/injected-wallets": "^2.8.4",
    "@web3-onboard/ledger": "^2.4.4",
    "@web3-onboard/react": "^2.7.2",
    "@web3-onboard/walletconnect": "^2.3.5",
    "big.js": "^6.1.1",
    "bn.js": "^5.1.1",
    "bootstrap": "^5.3.1",
    "bootstrap-icons": "^1.9.0",
    "collections": "^5.1.12",
    "concurrently": "^8.2.1",
    "dompurify": "^3.0.6",
    "error-polyfill": "^0.1.2",
    "flatted": "^3.2.9",
    "local-storage": "^2.0.0",
    "near-api-js": "^2.1.3",
    "near-social-vm": "git+https://github.com/NearSocial/VM.git#2.6.0",
    "near-social-vm-types": "^1.0.0",
    "prettier": "^2.7.1",
    "qrcode.react": "^3.1.0",
    "react": "^18.2.0",
    "react-bootstrap": "^2.5.0",
    "react-bootstrap-typeahead": "^6.1.2",
    "react-dom": "^18.2.0",
    "react-draggable": "^4.4.6",
    "react-router-dom": "^5.2.0",
    "styled-components": "^5.3.6",
    "zustand": "^4.4.6"
  },
  "scripts": {
    "serve": "webpack serve",
    "webpack": "webpack",
    "dev": "concurrently \"bos-workspace dev\" \"npm run serve -- --env mode=development\"",
    "prod": "npm run webpack -- --env mode=production",
    "prod:analyze": "npm run prod -- --env presets=analyze",
    "build": "npm run prod",
    "start": "npm run dev",
    "lint": "eslint src --ext js,jsx --report-unused-disable-directives --max-warnings 0"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/cli": "^7.15.4",
    "@babel/core": "^7.15.5",
    "@babel/preset-env": "^7.15.4",
    "@babel/preset-react": "^7.14.5",
    "assert": "^2.0.0",
    "babel-loader": "^8.2.2",
    "bos-workspace": "^0.0.1-alpha.4",
    "browserify-zlib": "^0.2.0",
    "buffer": "^6.0.3",
    "clean-webpack-plugin": "^4.0.0",
    "copy-webpack-plugin": "^9.0.1",
    "cross-env": "^7.0.3",
    "crypto-browserify": "^3.12.0",
    "css-loader": "^6.2.0",
    "css-minimizer-webpack-plugin": "^3.0.2",
    "eslint": "^8.49.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.3",
    "html-webpack-plugin": "^5.3.2",
    "https-browserify": "^1.0.0",
    "mini-css-extract-plugin": "^2.2.2",
    "os-browserify": "^0.3.0",
    "path-browserify": "^1.0.1",
    "postcss-loader": "^7.0.1",
    "process": "^0.11.10",
    "raw-loader": "^4.0.2",
    "sass": "^1.66.1",
    "sass-loader": "^13.1.0",
    "stream-browserify": "^3.0.0",
    "stream-http": "^3.2.0",
    "style-loader": "^3.2.1",
    "url": "^0.11.0",
    "webpack": "^5.52.0",
    "webpack-bundle-analyzer": "^4.4.2",
    "webpack-cli": "^4.8.0",
    "webpack-dev-server": "^4.1.0",
    "webpack-manifest-plugin": "^5.0.0",
    "webpack-merge": "^5.8.0"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="/favicon.png" />

    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="/black.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="/manifest.json" />
    <meta
        name="description"
        content="draw anything and everything"
    />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@evrythingprject">
    <meta name="twitter:image" content="https://draw.everything.dev/black.png">
    <meta property="og:image" content="https://draw.everything.dev/black.png">
    <meta property="og:type" content="website">
    <meta property="og:title" content="canvas" />
    <meta property="og:description" content="draw anything and everything" />
    <link rel="apple-touch-icon" href="/black.png" />
    <title>canvas</title>
  </head>
  <body>
    <noscript style="white-space: pre; font-family: monospace">
      You need to enable JavaScript to run this app.
    </noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "CANVAS",
  "name": "Canvas",
  "icons": [
    {
      "src": "app.png",
      "sizes": "1024x1024",
      "type": "image/png"
    }
  ],
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
Sitemap: https://nearbuilders.org/sitemap/
User-agent: *
Disallow: /magic/

'''
'''--- public/runtime.11b6858f93d8625836ab.bundle.js ---
!function(){"use strict";var e,n,t,r={},o={};function u(e){var n=o[e];if(void 0!==n)return n.exports;var t=o[e]={id:e,loaded:!1,exports:{}};return r[e].call(t.exports,t,t.exports,u),t.loaded=!0,t.exports}u.m=r,u.amdO={},e=[],u.O=function(n,t,r,o){if(!t){var i=1/0;for(l=0;l<e.length;l++){t=e[l][0],r=e[l][1],o=e[l][2];for(var f=!0,c=0;c<t.length;c++)(!1&o||i>=o)&&Object.keys(u.O).every((function(e){return u.O[e](t[c])}))?t.splice(c--,1):(f=!1,o<i&&(i=o));if(f){e.splice(l--,1);var a=r();void 0!==a&&(n=a)}}return n}o=o||0;for(var l=e.length;l>0&&e[l-1][2]>o;l--)e[l]=e[l-1];e[l]=[t,r,o]},u.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return u.d(n,{a:n}),n},t=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},u.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var o=Object.create(null);u.r(o);var i={};n=n||[null,t({}),t([]),t(t)];for(var f=2&r&&e;"object"==typeof f&&!~n.indexOf(f);f=t(f))Object.getOwnPropertyNames(f).forEach((function(n){i[n]=function(){return e[n]}}));return i.default=function(){return e},u.d(o,i),o},u.d=function(e,n){for(var t in n)u.o(n,t)&&!u.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},u.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),u.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},u.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},function(){u.b=document.baseURI||self.location.href;var e={666:0};u.O.j=function(n){return 0===e[n]};var n=function(n,t){var r,o,i=t[0],f=t[1],c=t[2],a=0;if(i.some((function(n){return 0!==e[n]}))){for(r in f)u.o(f,r)&&(u.m[r]=f[r]);if(c)var l=c(u)}for(n&&n(t);a<i.length;a++)o=i[a],u.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return u.O(l)},t=self.webpackChunknear_bos_webcomponent=self.webpackChunknear_bos_webcomponent||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))}(),u.nc=void 0}();
'''
'''--- src/App.js ---
import { setupWalletSelector } from "@near-wallet-selector/core";
import { setupHereWallet } from "@near-wallet-selector/here-wallet";
import { setupMeteorWallet } from "@near-wallet-selector/meteor-wallet";
import { setupModal } from "@near-wallet-selector/modal-ui";
import "@near-wallet-selector/modal-ui/styles.css";
import { setupMyNearWallet } from "@near-wallet-selector/my-near-wallet";
import "App.scss";
import Big from "big.js";
import "bootstrap-icons/font/bootstrap-icons.css";
import "bootstrap/dist/js/bootstrap.bundle";
import { isValidAttribute } from "dompurify";
import "error-polyfill";
import {
  EthersProviderContext,
  useAccount,
  useInitNear,
  useNear,
  utils,
} from "near-social-vm";
import React, { useCallback, useEffect, useState } from "react";
import "react-bootstrap-typeahead/css/Typeahead.bs5.css";
import "react-bootstrap-typeahead/css/Typeahead.css";
import { Link, Route, BrowserRouter as Router, Switch } from "react-router-dom";
import { BosLoaderBanner } from "./components/BosLoaderBanner";
import Core from "./components/Core";
import { useEthersProviderContext } from "./data/web3";
import { NetworkId, Widgets } from "./data/widgets";
import { useBosLoaderInitializer } from "./hooks/useBosLoaderInitializer";
import FeedPage from "./pages/FeedPage";
import Flags from "./pages/Flags";
import ViewPage from "./pages/ViewPage";
import TldrawCanvas from "./components/custom/tldraw/Canvas";

export const refreshAllowanceObj = {};
const documentationHref = "https://github.com/NearBuilders/docs";

function App() {
  const [connected, setConnected] = useState(false);
  const [signedIn, setSignedIn] = useState(false);
  const [signedAccountId, setSignedAccountId] = useState(null);
  const [availableStorage, setAvailableStorage] = useState(null);
  const [walletModal, setWalletModal] = useState(null);
  const [widgetSrc, setWidgetSrc] = useState(null);

  const ethersProviderContext = useEthersProviderContext();

  useBosLoaderInitializer();

  const { initNear } = useInitNear();
  const near = useNear();
  const account = useAccount();

  const accountId = account.accountId;

  useEffect(() => {
    initNear &&
      initNear({
        networkId: NetworkId,
        selector: setupWalletSelector({
          network: NetworkId,
          modules: [
            setupHereWallet(),
            setupMeteorWallet(),
            setupMyNearWallet(),
          ],
        }),
        customElements: {
          Link: (props) => {
            if (!props.to && props.href) {
              props.to = props.href;
              delete props.href;
            }
            if (props.to) {
              props.to = isValidAttribute("a", "href", props.to)
                ? props.to
                : "about:blank";
            }
            return <Link {...props} />;
          },
          Canvas: (props) => {
            return <TldrawCanvas {...props} />;
          },
        },
        config: {
          defaultFinality: undefined,
          nodeUrl: NetworkId === "mainnet" ? "https://near.lava.build" : "https://near-testnet.lava.build",
        },
      });
  }, [initNear]);

  useEffect(() => {
    if (!near) {
      return;
    }
    near.selector.then((selector) => {
      setWalletModal(
        setupModal(selector, { contractId: near.config.contractName })
      );
    });
  }, [near]);

  const requestSignIn = useCallback(
    (e) => {
      e && e.preventDefault();
      walletModal.show();
      return false;
    },
    [walletModal]
  );

  const logOut = useCallback(async () => {
    if (!near) {
      return;
    }
    const wallet = await (await near.selector).wallet();
    wallet.signOut();
    near.accountId = null;
    setSignedIn(false);
    setSignedAccountId(null);
  }, [near]);

  const refreshAllowance = useCallback(async () => {
    alert(
      "You're out of access key allowance. Need sign in again to refresh it"
    );
    await logOut();
    requestSignIn();
  }, [logOut, requestSignIn]);
  refreshAllowanceObj.refreshAllowance = refreshAllowance;

  useEffect(() => {
    if (!near) {
      return;
    }
    setSignedIn(!!accountId);
    setSignedAccountId(accountId);
    setConnected(true);
  }, [near, accountId]);

  useEffect(() => {
    setAvailableStorage(
      account.storageBalance
        ? Big(account.storageBalance.available).div(utils.StorageCostPerByte)
        : Big(0)
    );
  }, [account]);

  const passProps = {
    refreshAllowance: () => refreshAllowance(),
    setWidgetSrc,
    signedAccountId,
    signedIn,
    connected,
    availableStorage,
    widgetSrc,
    logOut,
    requestSignIn,
    widgets: Widgets,
    documentationHref,
  };

  return (
    <div className="App">
      <EthersProviderContext.Provider value={ethersProviderContext}>
        <Router basename={process.env.PUBLIC_URL}>
          <Switch>
            <Route path={"/flags"}>
              <Flags {...passProps} />
            </Route>
            <Route path={"/feed/:type*"}>
              <BosLoaderBanner />
              <FeedPage {...passProps} />
              <Core {...passProps} />
            </Route>
            <Route path={"/:path*"}>
              <BosLoaderBanner />
              <ViewPage {...passProps} />
              <Core {...passProps} />
            </Route>
          </Switch>
        </Router>
      </EthersProviderContext.Provider>
    </div>
  );
}

export default App;

'''
'''--- src/components/ActionButton.js ---
import { createShapeId, getSvgAsImage, useEditor } from "@tldraw/tldraw";
import { Widget } from "near-social-vm";
import React, { useCallback } from "react";
import { useBosLoaderStore } from "../stores/bos-loader";

export function ActionButton({ path }) {
  // This is within the canvas, so we can use the editor
  const redirectMapStore = useBosLoaderStore();

  const editor = useEditor();

  const getSelectedShapes = useCallback(() => {
    return editor.getSelectedShapes();
  }, [editor]);

  const getSnapshot = useCallback(() => {
    return editor.store.getSnapshot();
  });

  const getSelectionAsText = useCallback(() => {
    const selectedShapeIds = editor.getSelectedShapeIds();
    console.log("selectedShapeIds", selectedShapeIds);
    const selectedShapeDescendantIds =
      editor.getShapeAndDescendantIds(selectedShapeIds);

    const texts = Array.from(selectedShapeDescendantIds)
      .map((id) => {
        const shape = editor.getShape(id);
        if (!shape) return null;
        if (
          shape.type === "text" ||
          shape.type === "geo" ||
          shape.type === "arrow" ||
          shape.type === "note"
        ) {
          // @ts-expect-error
          return shape.props.text;
        }
        return null;
      })
      .filter((v) => v !== null && v !== "");

    return texts.join("\n");
  }, [editor]);

  const getSelectionAsImageDataUrl = useCallback(() => {
    return new Promise(async (resolve, reject) => {
      try {
        const svg = await editor.getSvg(editor.getSelectedShapes());
        if (!svg) throw new Error("Could not get SVG");

        const IS_SAFARI = /^((?!chrome|android).)*safari/i.test(
          navigator.userAgent
        );

        const blob = await getSvgAsImage(svg, IS_SAFARI, {
          type: "png",
          quality: 1,
          scale: 1,
        });

        if (!blob) throw new Error("Could not get blob");
        const base64Data = await blobToBase64(blob);

        resolve(base64Data);
      } catch (error) {
        reject(error);
      }
    });
  }, [editor]);

  const getContentOfPreviousResponse = useCallback(() => {
    const previousResponses = editor
      .getSelectedShapes()
      .filter((shape) => shape.type === "response");

    if (previousResponses.length === 0) {
      return null;
    }

    if (previousResponses.length > 1) {
      throw new Error("You can only have one previous response selected");
    }

    return previousResponses[0].props.html;
  }, [editor]);

  const makeEmptyResponseShape = useCallback(() => {
    const selectionBounds = editor.getSelectionPageBounds();
    if (!selectionBounds) throw new Error("No selection bounds");

    const newShapeId = createShapeId();
    editor.createShape({
      id: newShapeId,
      type: "response",
      x: selectionBounds.maxX + 60,
      y: selectionBounds.y,
    });

    return newShapeId;
  }, [editor]);

  const populateResponseShape = useCallback(
    (responseShapeId, content) => {
      // extract the html from the response
      const message = content;
      const start = message.indexOf("<!DOCTYPE html>");
      const end = message.indexOf("</html>");
      const html = message.slice(start, end + "</html>".length);

      // update the response shape we created earlier with the content
      editor.updateShape({
        id: responseShapeId,
        type: "response",
        props: { html },
      });
    },
    [editor]
  );

  return (
    <>
      <Widget // this is the widget that will send the prompt to openai and display the response
        src="everycanvas.near/widget/tldraw.Action"
        props={{
          path,
          getSnapshot: getSnapshot,
          getSelectedShapes: getSelectedShapes,
          getSelectionAsText: getSelectionAsText,
          getSelectionAsImageDataUrl: getSelectionAsImageDataUrl,
          getContentOfPreviousResponse: getContentOfPreviousResponse,
          makeEmptyResponseShape: makeEmptyResponseShape,
          populateResponseShape: populateResponseShape,
        }}
        config={{
          redirectMap: redirectMapStore.redirectMap,
        }}
      />
    </>
  );
}

function blobToBase64(blob) {
  return new Promise((resolve, _) => {
    const reader = new FileReader();
    reader.onloadend = () => resolve(reader.result);
    reader.readAsDataURL(blob);
  });
}

'''
'''--- src/components/BosLoaderBanner.js ---
import styled from "styled-components";
import Draggable from "react-draggable";

import { useFlags } from "../hooks/useFlags";
import { useBosLoaderStore } from "../stores/bos-loader";
import React from "react";
import { OverlayTrigger, Tooltip } from "react-bootstrap";

const Button = styled.button`
  all: unset;
  display: block;
  height: 16px;
  line-height: 16px;
  color: #664d04;

  border-radius: 100rem;

  &:active,
  &:hover {
    outline: none;
    border: none;
  }
`;

const Floating = styled.div`
  position: fixed;
  top: 7rem;
  right: 1rem;
  width: max-content;

  z-index: 1000;

  display: flex;
  align-items: center;
  gap: 0.5rem;

  border-radius: 50rem;
  padding: 8px 16px;
  text-align: center;

  background: #fff2cd;
  color: #664d04;

  @media screen and (max-width: 800px) {
    top: 4rem;
    right: 0.5rem;
  }
`;

const Container = styled.a`
  color: inherit;
  &:hover {
    text-decoration: none;
  }
`;

export function BosLoaderBanner() {
  const redirectMapStore = useBosLoaderStore();
  const [flags, setFlags] = useFlags();

  function closeBanner() {
    if (flags?.bosLoaderUrl) {
      setFlags({ bosLoaderUrl: undefined });
    }
  }

  function onRefresh() {
    window.location.reload();
  }

  if (!redirectMapStore.loaderUrl) return null;

  return (
    <Draggable position={null}>
      <Floating>
        <OverlayTrigger
          key={"bos-loader"}
          placement={"bottom"}
          overlay={
            <Tooltip>
              {redirectMapStore.failedToLoad
                ? "Check console.log. CORS errors may be misleading"
                : redirectMapStore.loaderUrl}
            </Tooltip>
          }
        >
          <Container href={"/flags"}>
            {redirectMapStore.failedToLoad
              ? "BOS Loader fetch error"
              : "Loading components"}
          </Container>
        </OverlayTrigger>
        <Button type="button" onClick={closeBanner}>
          <i className="bi bi-x" />
        </Button>
        <Button type="button" onClick={onRefresh}>
          <i className="bi bi-arrow-clockwise"></i>
        </Button>
      </Floating>
    </Draggable>
  );
}
'''
'''--- src/components/Core.js ---
import { Widget, useAccount } from "near-social-vm";
import React, { useState } from "react";
import {
  NavLink,
  useHistory,
  useLocation,
} from "react-router-dom/cjs/react-router-dom.min";
import styled from "styled-components";
import { LogOut } from "./icons/LogOut";
import { Pretend } from "./icons/Pretend";
import { StopPretending } from "./icons/StopPretending";
import { User } from "./icons/User";
import PretendModal from "./navigation/PretendModal";
import Draggable from "react-draggable";

const CoreBackdrop = styled.div`
  position: fixed;
  left: 0;
  bottom: 30%;
  transform: translateY(-50);
  width: 70px;
  height: auto;
  display: flex;
`;

const CoreBox = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  background: white;
  box-shadow: 0 10px 5px rgba(0, 0, 0, 0.3);

  &:hover {
    box-shadow: 0px 8px 3px rgba(0, 0, 0, 0.2);
  }

  &:active {
    box-shadow: 0px 5px 2px rgba(0, 0, 0, 0.2);
  }

  a {
    text-decoration: none;
    color: black;
  }

  .dropdown-item.active {
    text-shadow: none;
    svg {
      filter: brightness(0) saturate(100%) invert(100%) sepia(1%) saturate(0%)
        hue-rotate(268deg) brightness(112%) contrast(100%);
    }
  }

  @media (max-width: 1898px) {
    .dropdown.show .dropdown-menu {
      display: block;
    }
  }
`;

const StyledDropdown = styled.div`
  .dropdown-toggle {
    display: flex;

    &:after {
      border-top-color: var(--slate-dark-11);
    }

    img {
      border-radius: 50% !important;
    }

    .profile-info {
      margin: 5px 10px;
      line-height: normal;
      max-width: 140px;

      .profile-name,
      .profile-username {
        text-overflow: ellipsis;
        overflow: hidden;
      }

      .profile-name {
        color: black;
      }
      .profile-username {
        color: var(--slate-dark-11);
      }
    }
  }

  ul {
    width: 100%;
    padding: 0;
    border: 1px solid rgb(249, 250, 251);
    border-radius: 13px;
    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
    @media (max-width: 768px) {
      position: absolute;
      left: 50%; /* Center horizontally */
      top: 50%;
      transform: translateX(-50%, -50%); /* Center horizontally */
    }
    li {
      padding: 6px;
    }

    button,
    a {
      color: #2d2d2d;
      min-height: 52px;
      min-width: 52px;
      padding: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: transparent;
      border: transparent;
      font-size: 18px;
      gap: 0px;
      text-shadow: 1px 1px #fff;

      border: 1px solid #e5e5e5;
      border-radius: 13px;

      &:active {
        background-color: #d5d5d5;
        color: #000;
      }

      &:hover {
        background-color: #e5e5e5;
        color: #111;
      }

      svg {
        margin-right: 7px;
        min-width: 24px;
        path {
          stroke: var(--slate-dark-9);
        }
      }
    }
  }
`;

const ButtonRow = styled.div`
  display: flex;
  flex-direction: row;
  flex: 1;
  gap: 6px;
`;

const ArrowButton = styled.button`
  flex-grow: 1;
`;

const Button = styled.button`
  all: unset;
  color: #2d2d2d;
  height: 52px;
  width: 52px;
  min-height: 52px;
  min-width: 52px;
  padding: 0px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: transparent;
  border: transparent;
  font-size: 18px;
  gap: 0px;
  text-shadow: 1px 1px #fff;

  &:active {
    color: #000;
  }

  &:hover {
    background-color: rgba(0, 0, 0, 0.042);
    border-radius: 6px;
  }
`;

const Core = (props) => {
  const account = useAccount();
  const location = useLocation();

  const [showPretendModal, setShowPretendModal] = useState(false);

  let history = useHistory();
  const canvasToFeed = () => {
    history.push("/feed");
  };
  const feedToHome = () => {
    history.push("/");
  };

  const [isDropdownOpen, setIsDropdownOpen] = useState(false);

  const handleTouchStart = () => {
    event.stopPropagation();
    if (window.innerWidth <= 1900) {
      setIsDropdownOpen(!isDropdownOpen);
    }
  };

  const [dropdownPosition, setdropdownPosition] = useState(false);

  const handleDrag = (a, ui) => {
    const spaceBelow = window.innerHeight - (ui.y + ui.node.offsetHeight);
    if (spaceBelow < 312) {
      setdropdownPosition({ y: ui.y - ui.node.offsetHeight - 10 });
    } else {
      setdropdownPosition(null);
    }
  };

  const handleDrapStop = (e, ui) => {
    if (dropdownPosition) {
      ui.y = dropdownPosition.y;
    }
  };

  return (
    <Draggable
      position={null}
      axis="y"
      bounds="parent"
      onDrag={handleDrag}
      onStop={handleDrapStop}
    >
      <CoreBackdrop className="core__auth">
        <CoreBox className="classic" style={{ dropdownPosition }}>
          <div className="d-flex align-items-center">
            <div>
              {location.pathname === "/feed" ? (
                <NavLink to={"/"}>
                  <Button onTouchStart={feedToHome}>
                    <i className="bi bi-house" />
                  </Button>
                </NavLink>
              ) : (
                <NavLink to={"/feed"}>
                  <Button onTouchStart={canvasToFeed}>
                    <i className="bi bi-view-list" />
                  </Button>
                </NavLink>
              )}
              {props.signedIn ? (
                <Button
                  type="button"
                  id="dropdownMenu2222"
                  data-bs-toggle="dropdown"
                  aria-expanded="false"
                  onTouchStart={handleTouchStart}
                >
                  <Widget
                    src={"mob.near/widget/ProfileImage"}
                    props={{
                      accountId: account.accountId,
                      className: "d-inline-block core__profile-image",
                      imageClassName: "w-100 h-100 ",
                    }}
                  />
                </Button>
              ) : (
                <Button
                  onClick={props.requestSignIn}
                  onTouchStart={props.requestSignIn}
                  style={{ padding: 0 }}
                >
                  <i className="bi bi-key-fill" />
                </Button>
              )}

              {/* {isDropdownOpen && ( */}
              {account.accountId && (
                <StyledDropdown
                  className={`dropdown ${
                    isDropdownOpen ? "show" : ""
                  } ${dropdownPosition}`}
                >
                  <ul
                    className="dropdown-menu"
                    aria-labelledby="dropdownMenu2222"
                    style={{ minWidth: "fit-content" }}
                  >
                    <li>
                      <a
                        className="dropdown-item"
                        style={{ maxWidth: "300px" }}
                        href={`https://${account.accountId}.social`}
                        onTouchStart={(e) => {
                          e.preventDefault();
                          window.location.href = `https://${account.accountId}.social`;
                        }}
                      >
                        <div style={{ width: "100%" }}>
                          <Widget
                            src={"mob.near/widget/Profile.InlineBlock"}
                            props={{
                              accountId: account.accountId,
                            }}
                          />
                        </div>
                      </a>
                    </li>
                    <li>
                      <NavLink
                        className="dropdown-item"
                        type="button"
                        to={`/${account.accountId}`}
                        onTouchStart={(e) => {
                          e.preventDefault();
                          history.push(`/${account.accountId}`);
                        }}
                      >
                        <User />
                        my everything
                      </NavLink>
                    </li>
                    {account.pretendAccountId ? (
                      <li>
                        <button
                          className="dropdown-item"
                          disabled={!account.startPretending}
                          onClick={() => account.startPretending(undefined)}
                          onTouchStart={() =>
                            account.startPretending(undefined)
                          }
                        >
                          <StopPretending />
                          Stop pretending
                        </button>
                      </li>
                    ) : (
                      <li>
                        <button
                          className="dropdown-item"
                          onClick={() => setShowPretendModal(true)}
                          onTouchStart={() => setShowPretendModal(true)}
                        >
                          <Pretend />
                          Pretend to be another account
                        </button>
                      </li>
                    )}
                    <li>
                      <button
                        className="dropdown-item"
                        onClick={() => props.logOut()}
                        onTouchStart={() => props.logOut()}
                      >
                        <LogOut />
                        Sign Out
                      </button>
                    </li>
                    <li>
                      <ButtonRow>
                        <ArrowButton>
                          <i className="bi bi-arrow-left"></i>
                        </ArrowButton>

                        <NavLink
                          type="button"
                          to={"/"}
                          onTouchStart={(e) => {
                            e.preventDefault();
                            history.push("/");
                          }}
                        >
                          <i className="bi bi-house"></i>
                        </NavLink>

                        <ArrowButton>
                          <i className="bi bi-arrow-right"></i>
                        </ArrowButton>
                      </ButtonRow>
                    </li>
                  </ul>
                </StyledDropdown>
              )}
              {/* )} */}
            </div>

            <div>
              <i
                className="bi bi-grip-vertical"
                style={{ marginLeft: "4px", marginRight: "-4px" }}
              ></i>
            </div>
          </div>
          <PretendModal
            show={showPretendModal}
            onHide={() => setShowPretendModal(false)}
            widgets={props.widgets}
          />
        </CoreBox>
      </CoreBackdrop>
    </Draggable>
  );
};

export default Core;

'''
'''--- src/components/custom/tldraw/Canvas.js ---
import { Tldraw, createTLStore, defaultShapeUtils } from "@tldraw/tldraw";
import { Widget } from "near-social-vm";
import { default as React, useCallback, useState } from "react";
import { useUrlState } from "../../../hooks/useUrlState";
import { ActionButton } from "../../ActionButton";
import { ResponseShapeUtil } from "./ResponseShape";
import SharePanel from "./SharePanel";
import { TldrawLogo } from "./TldrawLogo";
import TopZone from "./TopZone";
import { ZoomIn } from "./ZoomUI";
import { Templates } from "./Templates";

const shapeUtils = [ResponseShapeUtil];

export function UrlStateSync() {
  const syncViewport = useCallback((params) => {
    window.history.replaceState(
      {},
      document.title,
      window.location.pathname + `?v=${params.v}&p=${params.p}`
    );
  }, []);
  useUrlState(syncViewport);

  return null;
}

function TldrawCanvas({
  persistance,
  autoFocus = true,
  hideUi = false,
  isReadOnly = false,
  initialSnapshot,
}) {
  const [store] = useState(() => {
    if (initialSnapshot) {
      const newStore = createTLStore({
        shapeUtils: defaultShapeUtils.concat(shapeUtils),
      });

      newStore.loadSnapshot(initialSnapshot);

      return newStore;
    }
  });

  const handleMount = useCallback(
    (editor) => {
      window.app = editor;
      window.editor = editor;
      editor.updateInstanceState({ isReadonly: isReadOnly });
      // editor.user.updateUserPreferences({
      //   id: accountId,
      // });
      // editor.getInitialMetaForShape = (_shape) => {
      //   return {
      //     createdBy: editor.user.getId(),
      //     createdAt: Date.now(),
      //     updatedBy: editor.user.getId(),
      //     updatedAt: Date.now(),
      //   };
      // };
      // editor.registerExternalAssetHandler("file", createAssetFromFile);
      // editor.registerExternalAssetHandler("url", createAssetFromUrl);
    },
    [isReadOnly]
  );

  function loadComponents(c = {}) {
    return Object.keys(c).reduce((acc, key) => {
      if (!c[key]) {
        acc[key] = null;
      } else {
        if (typeof c[key] === "function") {
          acc[key] = c[key];
        } else {
          const plugin = c[key];
          acc[key] = () => (
            <div
              key={key}
              className={`tldraw__${key}`}
              style={{ pointerEvents: "all", display: "flex" }}
            >
              <Widget
                src={plugin.src}
                props={{ ...plugin.props, color, name, id }}
              />
            </div>
          );
        }
      }
      return acc;
    }, {});
  }
  return (
    <div className={"tldraw__editor"}>
      <Tldraw
        persistenceKey={persistance || "everyone"}
        autoFocus={autoFocus}
        hideUi={hideUi}
        store={store}
        shapeUtils={shapeUtils}
        onMount={handleMount}
        initialState={isReadOnly ? "hand" : "select"}
        components={loadComponents({
          // props.components
          TopPanel: () => (
            <div
              key={"TopPanel"}
              className="tldraw__TopPanel"
              style={{ pointerEvents: "all", display: "flex" }}
            >
              <TopZone path={persistance} />
            </div>
          ),
          SharePanel: () => (
            <div
              key={"SharePanel"}
              className="tldraw__SharePanel"
              style={{ pointerEvents: "all", display: "flex" }}
            >
              <SharePanel path={persistance} />
            </div>
          ),
        })}
      >
        <ActionButton path={persistance} />
        <TldrawLogo />
        <ZoomIn />
        <Templates />
        <UrlStateSync />
      </Tldraw>
    </div>
  );
}

export default TldrawCanvas;

'''
'''--- src/components/custom/tldraw/ResponseShape.js ---
/* eslint-disable react-hooks/rules-of-hooks */
import React from "react";
import {
  BaseBoxShapeUtil,
  DefaultSpinner,
  HTMLContainer,
  Icon,
  TLBaseShape,
  stopEventPropagation,
  toDomPrecision,
  useIsEditing,
  useToasts,
} from "@tldraw/tldraw";

export class ResponseShapeUtil extends BaseBoxShapeUtil {
  static type = "response";

  getDefaultProps() {
    return {
      html: "",
      w: (960 * 2) / 3,
      h: (540 * 2) / 3,
    };
  }

  canEdit() {
    return true;
  }

  isAspectRatioLocked() {
    return false;
  }

  canResize() {
    return true;
  }

  canBind() {
    return false;
  }

  component(shape) {
    console.log(
      `shapeId: ${shape.id} of size x: ${toDomPrecision(
        shape.props.w
      )}, and y: ${toDomPrecision(shape.props.h)}`
    );
    const isEditing = useIsEditing(shape.id);
    const toast = useToasts();
    return (
      <HTMLContainer className="tl-embed-container" id={shape.id}>
        {shape.props.html ? (
          <iframe
            id={`iframe-${shape.id}`}
            className="tl-embed"
            srcDoc={shape.props.html}
            width={toDomPrecision(shape.props.w)}
            height={toDomPrecision(shape.props.h)}
            draggable={false}
            style={{
              border: 0,
              pointerEvents: "auto",
            }}
          />
        ) : (
          <div
            style={{
              width: "100%",
              height: "100%",
              backgroundColor: "var(--color-muted-2)",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              border: "1px solid var(--color-muted-1)",
            }}
          >
            <DefaultSpinner />
          </div>
        )}
        <div
          style={{
            position: "absolute",
            top: 0,
            right: -40,
            height: 40,
            width: 40,
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            cursor: "pointer",
            pointerEvents: "all",
          }}
          onClick={() => {
            if (navigator && navigator.clipboard) {
              navigator.clipboard.writeText(shape.props.html);
              toast.addToast({
                icon: "duplicate",
                title: "Copied to clipboard",
              });
            }
          }}
          onPointerDown={stopEventPropagation}
        >
          {/* <Icon icon="duplicate" /> */}
        </div>
      </HTMLContainer>
    );
  }

  indicator(shape) {
    return <rect width={shape.props.w} height={shape.props.h} />;
  }
}

'''
'''--- src/components/custom/tldraw/SharePanel.js ---
import { useEditor, createShapeId } from "@tldraw/tldraw";
import { Widget } from "near-social-vm";
import React, { useCallback } from "react";
import { useBosLoaderStore } from "../../../stores/bos-loader";

function SharePanel({ path }) {
  const editor = useEditor();
  const redirectMapStore = useBosLoaderStore();

  const getSelectedShapeIds = useCallback(() => {
    return editor.getSelectedShapeIds();
  }, [editor]);

  const getSelectedShapes = useCallback(() => {
    return editor.getSelectedShapes();
  }, [editor]);

  const getShapePageBounds = useCallback(() => {
    return editor.getShapePageBounds();
  }, [editor]);

  const getSnapshot = useCallback(() => {
    return editor.store.getSnapshot();
  });

  const getSelectionAsText = useCallback(() => {
    const selectedShapeIds = editor.getSelectedShapeIds();
    console.log("selectedShapeIds", selectedShapeIds);
    const selectedShapeDescendantIds =
      editor.getShapeAndDescendantIds(selectedShapeIds);

    const texts = Array.from(selectedShapeDescendantIds)
      .map((id) => {
        const shape = editor.getShape(id);
        if (!shape) return null;
        if (
          shape.type === "text" ||
          shape.type === "geo" ||
          shape.type === "arrow" ||
          shape.type === "note"
        ) {
          // @ts-expect-error
          return shape.props.text;
        }
        return null;
      })
      .filter((v) => v !== null && v !== "");

    return texts.join("\n");
  }, [editor]);

  const loadSnapshot = useCallback((snapshot) => {
    console.log("loading snapshot", snapshot);
    snapshot = typeof snapshot === "string" ? JSON.parse(snapshot) : snapshot;
    editor.store.loadSnapshot(snapshot);
  });

  const makeEmptyResponseShape = useCallback(() => {
    const selectionBounds = editor.getSelectionPageBounds();
    if (!selectionBounds) throw new Error("No selection bounds");

    const newShapeId = createShapeId();
    editor.createShape({
      id: newShapeId,
      type: "response",
      x: selectionBounds.maxX + 60,
      y: selectionBounds.y,
      props: { html: "" },
    });

    console.log(
      `created shape: ${newShapeId} of size x:${
        selectionBounds.maxX + 60
      }, y: ${selectionBounds.y}`
    );

    return newShapeId;
  }, [editor]);

  const populateResponseShape = useCallback(
    (responseShapeId, path) => {
      console.log("updating shape:", responseShapeId);
      // extract the html from the response
      const html = `
      <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <title>Near social</title>
  
      <script src="/main.0b24e2f1d95a52ba93ad.bundle.js" defer></script>
      <script src="/runtime.11b6858f93d8625836ab.bundle.js" defer></script>
    </head>
    <body>
      <near-social-viewer src=${path}></near-social-viewer>
    </body>
  </html>
      `;

      // update the response shape we created earlier with the content
      editor.updateShape({
        id: responseShapeId,
        type: "response",
        props: { html },
      });
    },
    [editor]
  );

  return (
    <Widget
      key={JSON.stringify(getSelectedShapeIds)}
      src="everycanvas.near/widget/tldraw.ShareZone"
      props={{
        getSnapshot: getSnapshot,
        getSelectedShapes: getSelectedShapes,
        getShapePageBounds: getShapePageBounds,
        getSelectionAsText: getSelectionAsText,
        makeEmptyResponseShape: makeEmptyResponseShape,
        populateResponseShape: populateResponseShape,
        path: path,
        loadSnapshot: loadSnapshot,
      }}
      config={{
        redirectMap: redirectMapStore.redirectMap,
      }}
    />
  );
}

export default SharePanel;

'''
'''--- src/components/custom/tldraw/Templates.js ---
import styled from "styled-components";
import { useEditor, AssetRecordType } from "@tldraw/tldraw";
import React, { useState } from "react";
const DropdownContent = styled.div`
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  background: #bcbbbf;
  padding: 0.5rem;
  display: flex;
  border-radius: 13px;
  gap: 0.5rem;
  margin-bottom: 1rem;
  img {
    border-radius: 13px;
    cursor: pointer;
  }

  @media (max-width: 870px) {
    right: 0;
    transform: translateX(25%);
    top: 0;
    flex-direction: column;
    width: max-content;
    height: max-content;
  }
`;
const TemplateUI = styled.div`
  position: fixed;
  left: 172px;
  bottom: 0;
  z-index: 599;
  pointer-events: all;
  display: flex;
  flex-direction: row;
  background: hsl(204, 16%, 94%);
  gap: 0.5rem;
  padding: 5px;
  border-radius: 13px 13px 0 0;
  border: 4px solid rgb(249, 250, 251);
  border-bottom: 0;
  button {
    color: #2d2d2d;
    border: none !important;
    padding: 6px 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: transparent;
    border: transparent;
    font-size: 12px;
    gap: 8px;
    text-shadow: 1px 1px #fff;

    border-radius: 4px !important;

    &:active {
      border-style: inset;
      background-color: #d5d5d5;
      color: #000;
    }

    &:hover {
      background-color: #e5e5e5 !important;
      color: #111 !important;
    }
  }
`;

const templates = [
  {
    src: "https://i.pinimg.com/736x/17/60/1e/17601e367e1689524f531c775c80d497.jpg",
    type: "jpg",
    width: 736,
    height: 952,
  },
  {
    src: "https://png.pngtree.com/template/20210809/ourmid/pngtree-cute-simple-note-template-design-image_561822.jpg",
    type: "jpg",
    width: 328,
    height: 405,
  },
];

const handleImageClick = (
  editor,
  imageUrl,
  imageType,
  imageHeight,
  imageWidth
) => {
  const assetId = AssetRecordType.createId();
  editor.createAssets([
    {
      id: assetId,
      type: "image",
      typeName: "asset",
      props: {
        name: imageUrl,
        src: imageUrl,
        w: imageWidth,
        h: imageHeight,
        mimeType: `image/${imageType}`,
        isAnimated: false,
      },
      meta: {},
    },
  ]);
  editor.createShape({
    type: "image",
    x: (window.innerWidth - imageWidth) / 2,
    y: (window.innerHeight - imageHeight) / 2,
    props: {
      assetId,
      w: imageWidth,
      h: imageHeight,
    },
  });
};

const TemplateDropdown = ({ editor }) => (
  <>
    {templates.map((item) => (
      <div
        key={item.src}
        onClick={() => {
          handleImageClick(
            editor,
            item.src,
            item.type,
            item.height,
            item.width
          );
          // setDropdown(!dropdown);
        }}
      >
        <img
          style={{
            width: "100px",
            height: "100px",
            objectFit: "cover",
          }}
          src={item.src}
          alt={`Template ${item.src}`}
        />
      </div>
    ))}
  </>
);

export function Templates() {
  const editor = useEditor();
  const [dropdown, setDropdown] = useState(false);

  return (
    <TemplateUI>
      <div className="position-relative">
        <button
          onClick={() => {
            setDropdown(!dropdown);
          }}
        >
          <i className="bi bi-easel"></i>
        </button>
        {dropdown && (
          <DropdownContent>
            <TemplateDropdown editor={editor} />
          </DropdownContent>
        )}
      </div>
    </TemplateUI>
  );
}

'''
'''--- src/components/custom/tldraw/TldrawLogo.js ---
import { useBreakpoint } from "@tldraw/tldraw";
import React from "react";

export function TldrawLogo() {
  const breakpoint = useBreakpoint();
  return (
    <a
      className={`tldrawLogo ${breakpoint < 5 ? "tldrawLogo__mobile" : ""}`}
      href="https://www.tldraw.dev"
    >
      <svg
        width="110"
        height="40"
        viewBox="0 0 71 18"
        fill="none"
        style={{ padding: 8 }}
      >
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M0 1.97802C0 0.88559 0.848303 0 1.89474 0H16.1053C17.1517 0 18 0.885591 18 1.97802V16.022C18 17.1144 17.1517 18 16.1053 18H1.89474C0.848303 18 0 17.1144 0 16.022V1.97802ZM10.6264 5.14801C10.6264 5.58302 10.4777 5.95212 10.1803 6.25531C9.88296 6.5585 9.52095 6.71009 9.0943 6.71009C8.65471 6.71009 8.28624 6.5585 7.98888 6.25531C7.69151 5.95212 7.54283 5.58302 7.54283 5.14801C7.54283 4.71301 7.69151 4.34391 7.98888 4.04072C8.28624 3.73753 8.65471 3.58594 9.0943 3.58594C9.52095 3.58594 9.88296 3.73753 10.1803 4.04072C10.4777 4.34391 10.6264 4.71301 10.6264 5.14801ZM7.52344 10.6224C7.52344 10.1874 7.67212 9.81831 7.96948 9.51512C8.27978 9.19875 8.65471 9.04056 9.0943 9.04056C9.50802 9.04056 9.87003 9.19875 10.1803 9.51512C10.4906 9.81831 10.6716 10.161 10.7233 10.5433C10.8268 11.2552 10.6975 11.9604 10.3355 12.659C9.98639 13.3577 9.48216 13.8916 8.82279 14.2607C8.46078 14.4716 8.16342 14.465 7.9307 14.2409C7.71091 14.03 7.77555 13.7795 8.12463 13.4895C8.31856 13.3445 8.48017 13.16 8.60946 12.9359C8.73875 12.7118 8.82279 12.4811 8.86158 12.2438C8.87451 12.1384 8.82925 12.0856 8.72582 12.0856C8.46725 12.0724 8.2022 11.9274 7.9307 11.6506C7.65919 11.3738 7.52344 11.0311 7.52344 10.6224Z"
          fill="#000000"
        />
        <path
          d="M34.156 14.5761C34.2636 14.5761 34.3174 14.5223 34.3174 14.4147V12.2234C34.3174 12.0073 34.1422 11.8321 33.9261 11.8321H33.6424C33.5543 11.8321 33.4859 11.8076 33.437 11.7587C33.3978 11.7196 33.3783 11.6609 33.3783 11.5826V3.73207C33.3783 3.62446 33.3245 3.57065 33.2168 3.57065H30.7467C30.5306 3.57065 30.3554 3.74585 30.3554 3.96196V12.463C30.3554 13.1674 30.556 13.6957 30.9571 14.0478C31.3582 14.4 31.8717 14.5761 32.4978 14.5761H34.156Z"
          fill="#000000"
        />
        <path
          d="M29.0935 12.2087C29.0935 11.9926 28.9183 11.8174 28.7022 11.8174H27.6701C27.3375 11.8174 27.1125 11.7587 26.9951 11.6413C26.8484 11.5043 26.775 11.2842 26.775 10.981V9.68478C26.775 9.46867 26.9502 9.29348 27.1663 9.29348H28.7022C28.9183 9.29348 29.0935 9.11829 29.0935 8.90217V6.71087C29.0935 6.60326 29.0397 6.54946 28.9321 6.54946H27.1663C26.9502 6.54946 26.775 6.37426 26.775 6.15815V4.46576C26.775 4.35815 26.7212 4.30435 26.6136 4.30435H24.2315C24.0154 4.30435 23.8402 4.47954 23.8402 4.69565V6.15815C23.8402 6.37426 23.665 6.54946 23.4489 6.54946H23.087C22.8708 6.54946 22.6957 6.72465 22.6957 6.94076V9.13207C22.6957 9.23967 22.7495 9.29348 22.8571 9.29348H23.4489C23.665 9.29348 23.8402 9.46867 23.8402 9.68478V11.2011C23.8402 12.3359 24.1386 13.1821 24.7353 13.7397C25.3321 14.2973 26.1978 14.5761 27.3326 14.5761H28.9321C29.0397 14.5761 29.0935 14.5223 29.0935 14.4147V12.2087Z"
          fill="#000000"
        />
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M37.6867 6.40272C38.1367 6.40272 38.5231 6.51522 38.8459 6.74022C39.1499 6.94586 39.4008 7.21279 39.5985 7.54101C39.6332 7.59855 39.6947 7.63533 39.7619 7.63533C39.8638 7.63533 39.9464 7.55268 39.9464 7.45074V3.96196C39.9464 3.74584 40.1216 3.57065 40.3377 3.57065H42.7198C42.8274 3.57065 42.8812 3.62446 42.8812 3.73207V14.1848C42.8812 14.4009 42.706 14.5761 42.4899 14.5761H40.1079C40.0002 14.5761 39.9464 14.5223 39.9464 14.4147V13.5333C39.9464 13.4285 39.8614 13.3435 39.7566 13.3435C39.692 13.3435 39.6321 13.3765 39.596 13.4301C39.3462 13.8013 39.0668 14.1051 38.7579 14.3413C38.4252 14.5957 38.0095 14.7228 37.5106 14.7228C36.8356 14.7228 36.3024 14.4929 35.9111 14.0332C35.5198 13.5734 35.3242 12.9571 35.3242 12.1842V9.10272C35.3242 8.26141 35.5247 7.60109 35.9258 7.12174C36.3367 6.64239 36.9236 6.40272 37.6867 6.40272ZM38.4204 11.9348C38.528 12.0522 38.7187 12.1109 38.9926 12.1109C39.2693 12.1109 39.5126 12.0774 39.7224 12.0105C39.8636 11.9655 39.9464 11.8265 39.9464 11.6783V9.35616C39.9464 9.22533 39.8827 9.09961 39.7647 9.04299C39.6723 8.9986 39.5763 8.9647 39.4769 8.94131C39.3106 8.89239 39.1492 8.86793 38.9926 8.86793C38.4937 8.86793 38.2443 9.11739 38.2443 9.6163V11.3772C38.2443 11.6413 38.303 11.8272 38.4204 11.9348Z"
          fill="#000000"
        />
        <path
          d="M47.1839 14.5761C47.4001 14.5761 47.5752 14.4009 47.5752 14.1848V10.0559C47.5752 9.91955 47.6451 9.79072 47.7678 9.73131C47.8883 9.67299 48.0148 9.62487 48.1475 9.58696C48.353 9.51848 48.5829 9.48424 48.8372 9.48424C49.0231 9.48424 49.1992 9.49891 49.3655 9.52826C49.5291 9.55553 49.6884 9.59123 49.8436 9.63539C49.8671 9.64209 49.8915 9.64565 49.916 9.64565C50.0577 9.64565 50.1725 9.5308 50.1725 9.38912V6.71087C50.1725 6.64239 50.1481 6.5837 50.0992 6.53478C50.0698 6.50544 50.016 6.47609 49.9378 6.44674C49.8595 6.41739 49.7421 6.40272 49.5856 6.40272C49.1258 6.40272 48.7589 6.54457 48.485 6.82826C48.2423 7.07994 48.0533 7.44725 47.918 7.93019C47.8966 8.00665 47.8277 8.06087 47.7483 8.06087C47.6527 8.06087 47.5752 7.9834 47.5752 7.88783V6.71087C47.5752 6.60326 47.5214 6.54946 47.4138 6.54946H44.9878C44.7716 6.54946 44.5964 6.72465 44.5964 6.94076V14.4147C44.5964 14.5223 44.6502 14.5761 44.7579 14.5761H47.1839Z"
          fill="#000000"
        />
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M58.368 9.41087V11.788C58.368 11.9085 58.4096 11.9874 58.4929 12.0246C58.5165 12.0351 58.5407 12.0441 58.5651 12.0526C58.5923 12.0621 58.6196 12.0668 58.6468 12.0668H58.6664C58.8825 12.0668 59.0577 12.242 59.0577 12.4582V14.4147C59.0577 14.5223 59.0039 14.5761 58.8963 14.5761H57.9131C57.4338 14.5761 56.9936 14.4783 56.5925 14.2826C56.2443 14.1085 55.9774 13.857 55.7919 13.528C55.7494 13.4526 55.6716 13.4022 55.585 13.4022C55.5009 13.4022 55.4244 13.4497 55.3826 13.5227C55.1746 13.8859 54.9029 14.1735 54.5675 14.3853C54.2055 14.6103 53.7408 14.7228 53.1734 14.7228C52.4887 14.7228 51.9457 14.537 51.5446 14.1652C51.1436 13.7935 50.943 13.2897 50.943 12.6538V12.0815C50.943 11.3967 51.1436 10.8587 51.5446 10.4674C51.9555 10.0761 52.5327 9.88044 53.2762 9.88044H55.3305C55.444 9.88044 55.5359 9.78846 55.5359 9.675C55.5359 9.33261 55.443 9.10272 55.2571 8.98533C55.0811 8.85815 54.7387 8.79457 54.23 8.79457C53.3815 8.79457 52.5424 8.91812 51.7129 9.16522C51.6889 9.17237 51.664 9.17609 51.6389 9.17609C51.4977 9.17609 51.3832 9.06162 51.3832 8.92041V7.0337C51.3832 6.96522 51.3979 6.9163 51.4273 6.88696C51.4957 6.81848 51.6816 6.74511 51.9849 6.66685C52.2979 6.58859 52.6745 6.52011 53.1148 6.46141C53.5647 6.39294 54.0245 6.3587 54.4941 6.3587C55.8343 6.3587 56.8126 6.60326 57.4289 7.09239C58.055 7.57174 58.368 8.34457 58.368 9.41087ZM54.1566 12.6098C54.5823 12.6098 54.9796 12.5136 55.3484 12.3213C55.4677 12.259 55.5359 12.1319 55.5359 11.9972V11.6951C55.5359 11.479 55.3608 11.3038 55.1446 11.3038H54.1859C54.0196 11.3038 53.8925 11.3478 53.8044 11.4359C53.7262 11.5337 53.687 11.6511 53.687 11.788V12.1402C53.687 12.4533 53.8436 12.6098 54.1566 12.6098Z"
          fill="#000000"
        />
        <path
          d="M64.2831 6.54946C64.1006 6.54946 63.9423 6.67566 63.9017 6.85362C63.6938 7.76648 63.5017 8.62378 63.3255 9.42554C63.1518 10.2575 63.0208 11.0466 62.9326 11.7931C62.922 11.8821 62.8468 11.9495 62.7573 11.9495C62.6585 11.9495 62.5792 11.8681 62.5807 11.7694C62.5921 11.0174 62.5616 10.2655 62.4891 9.51359C62.4206 8.70163 62.3326 7.79674 62.225 6.79891C62.2152 6.69131 62.1956 6.62283 62.1663 6.59348C62.1369 6.56413 62.0929 6.54946 62.0342 6.54946H59.9316C59.6887 6.54946 59.5045 6.76857 59.5457 7.008C59.7421 8.14646 59.9308 9.28491 60.1119 10.4234C60.3271 11.7147 60.5424 12.9571 60.7576 14.1505C60.7911 14.3014 60.8282 14.4092 60.8689 14.4739C60.8815 14.4939 60.8984 14.5108 60.918 14.5242C60.9687 14.5588 61.0228 14.5761 61.0804 14.5761H63.6985C63.8764 14.5761 64.032 14.456 64.0769 14.2839C64.1528 13.9935 64.2202 13.7339 64.2793 13.5049C64.3576 13.2016 64.426 12.9033 64.4847 12.6098C64.5434 12.3163 64.6021 11.9935 64.6608 11.6413C64.7227 11.3145 64.7885 10.9198 64.8583 10.4574C64.8714 10.3704 64.9461 10.306 65.034 10.306C65.1228 10.306 65.1979 10.3717 65.2098 10.4597C65.2695 10.902 65.3213 11.2812 65.3652 11.5973C65.4239 11.9397 65.4777 12.2429 65.5266 12.5071C65.5853 12.7614 65.644 13.0207 65.7027 13.2848C65.7614 13.5391 65.8299 13.8326 65.9081 14.1652C65.95 14.3076 65.9919 14.4106 66.0338 14.4741C66.0468 14.4939 66.0637 14.5108 66.0832 14.5242C66.1339 14.5588 66.188 14.5761 66.2456 14.5761H68.9092C69.0998 14.5761 69.2627 14.4388 69.2949 14.251L69.9141 10.6435C70.1391 9.33261 70.3592 8.03152 70.5744 6.74022C70.5842 6.61304 70.5402 6.54946 70.4424 6.54946H68.1855C67.9841 6.54946 67.8155 6.70245 67.7962 6.90299C67.712 7.77975 67.6353 8.61081 67.5663 9.3962C67.5027 10.2129 67.4729 11.0044 67.4767 11.7706C67.4772 11.8691 67.3978 11.9495 67.2993 11.9495C67.2091 11.9495 67.1334 11.8815 67.123 11.7918C67.0341 11.0294 66.8982 10.2455 66.7152 9.44022C66.5293 8.57935 66.3239 7.66957 66.0989 6.71087C66.0695 6.60326 66.0108 6.54946 65.9228 6.54946H64.2831Z"
          fill="#000000"
        />
      </svg>
    </a>
  );
}

'''
'''--- src/components/custom/tldraw/TopZone.js ---
import { Widget } from "near-social-vm";
import React from "react";
import { useBosLoaderStore } from "../../../stores/bos-loader";
import { useLocation } from "react-router-dom";

function TopZone({ path }) {
  const redirectMapStore = useBosLoaderStore();
  const location = useLocation();

  return (
    <>
      <Widget
        key={`${path}-topzone`}
        src="everycanvas.near/widget/tldraw.TopZone"
        props={{ path: path, location: location }}
        config={{
          redirectMap: redirectMapStore.redirectMap,
        }}
      />
    </>
  );
}

export default TopZone;

'''
'''--- src/components/custom/tldraw/ZoomUI.js ---
import React from "react";
import { useEditor } from "@tldraw/tldraw";
import styled from "styled-components";

const ZoomUI = styled.div`
  position: fixed;
  left: 100px;
  bottom: 0;
  z-index: 599;
  pointer-events: all;
  display: flex;
  flex-direction: row;
  background: hsl(204, 16%, 94%);
  gap: 0.5rem;
  padding: 5px;
  border-radius: 13px 13px 0 0;
  border: 4px solid rgb(249, 250, 251);
  border-bottom: 0;
  button {
    color: #2d2d2d;
    border: none !important;
    padding: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: transparent;
    border: transparent;
    font-size: 12px;
    gap: 8px;
    text-shadow: 1px 1px #fff;

    border-radius: 8px !important;

    &:active {
      border-style: inset;
      background-color: #d5d5d5;
      color: #000;
    }

    &:hover {
      background-color: #e5e5e5 !important;
      color: #111 !important;
    }
  }

  @media (max-width: 840px) {
    left: 55px;
  }
  @media (max-width: 690px) {
    display: none;
  }
`;

export const ZoomIn = () => {
  const editor = useEditor();

  return (
    <ZoomUI>
      <button
        onClick={() => {
          editor.zoomIn();
        }}
      >
        <i className="bi bi-plus-lg"></i>
      </button>
      <button
        onClick={() => {
          editor.zoomOut();
        }}
      >
        <i className="bi bi-dash"></i>
      </button>
    </ZoomUI>
  );
};

'''
'''--- src/components/icons/LogOut.js ---
import React from "react";

export function LogOut() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M15.75 8.75L19.25 12L15.75 15.25"
        stroke="#697177"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M19 12H10.75"
        stroke="#697177"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M15.25 4.75H6.75C5.64543 4.75 4.75 5.64543 4.75 6.75V17.25C4.75 18.3546 5.64543 19.25 6.75 19.25H15.25"
        stroke="#697177"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}

'''
'''--- src/components/icons/Pretend.js ---
import React from "react";

export function Pretend() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="none"
      viewBox="0 0 16 16"
    >
      <path
        strokeWidth="0.3px"
        fill="#697177"
        d="M1.5 1a.5.5 0 0 0-.5.5v3a.5.5 0 0 1-1 0v-3A1.5 1.5 0 0 1 1.5 0h3a.5.5 0 0 1 0 1h-3zM11 .5a.5.5 0 0 1 .5-.5h3A1.5 1.5 0 0 1 16 1.5v3a.5.5 0 0 1-1 0v-3a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 1-.5-.5zM.5 11a.5.5 0 0 1 .5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 1 0 1h-3A1.5 1.5 0 0 1 0 14.5v-3a.5.5 0 0 1 .5-.5zm15 0a.5.5 0 0 1 .5.5v3a1.5 1.5 0 0 1-1.5 1.5h-3a.5.5 0 0 1 0-1h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 1 .5-.5z"
      />
      <path
        strokeWidth="0.3px"
        fill="#697177"
        d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm8-9a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"
      />
    </svg>
  );
}

'''
'''--- src/components/icons/StopPretending.js ---
import React from "react";

export function StopPretending() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="none"
      viewBox="0 0 16 16"
    >
      <path
        strokeWidth="0.3px"
        fill="#697177"
        d="M13.879 10.414a2.501 2.501 0 0 0-3.465 3.465l3.465-3.465Zm.707.707-3.465 3.465a2.501 2.501 0 0 0 3.465-3.465Zm-4.56-1.096a3.5 3.5 0 1 1 4.949 4.95 3.5 3.5 0 0 1-4.95-4.95ZM11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm-9 8c0 1 1 1 1 1h5.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.544-3.393C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4Z"
      />
    </svg>
  );
}

'''
'''--- src/components/icons/User.js ---
import React from "react";

export function User() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M15.25 8C15.25 9.79493 13.7949 11.25 12 11.25C10.2051 11.25 8.75 9.79493 8.75 8C8.75 6.20507 10.2051 4.75 12 4.75C13.7949 4.75 15.25 6.20507 15.25 8Z"
        stroke="#697177"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M6.84751 19.25H17.1525C18.2944 19.25 19.174 18.2681 18.6408 17.2584C17.8563 15.7731 16.068 14 12 14C7.93201 14 6.14367 15.7731 5.35924 17.2584C4.82597 18.2681 5.70559 19.25 6.84751 19.25Z"
        stroke="#697177"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}

'''
'''--- src/components/navigation/MobileQRModal.js ---
/**
 * I lost how this was used, but I want it back
 * Somewhere in the profile menu when not logged in, option to 
 * sign in via QR code
 */
import React, { useEffect, useState } from "react";
import Modal from "react-bootstrap/Modal";
import { useAccount } from "near-social-vm";
import { QRCodeSVG } from "qrcode.react";
import { getSocialKeyPair } from "../../data/near";

export default function MobileQRModal(props) {
  const account = useAccount();
  const onHide = props.onHide;
  const show = props.show;

  const [url, setUrl] = useState("");

  useEffect(() => {
    (async () => {
      const domain = new URL(window.location.href).origin;
      const keyPair = await getSocialKeyPair(account.accountId);
      return `${domain}/signin#?a=${account.accountId}&k=${keyPair.toString()}`;
    })().then(setUrl);
  }, [account]);

  return (
    <Modal centered show={show} onHide={onHide}>
      <Modal.Header closeButton>
        <Modal.Title>Scan QR to sign in on another device</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <div className="w-100">
          <QRCodeSVG value={url} size="100%" />
        </div>
        <div>
          <small className="text-muted-2">
            Don't share this QR with other people. It's only for you.
          </small>
        </div>
      </Modal.Body>
      <Modal.Footer>
        <button className="btn btn-secondary" onClick={onHide}>
          Close
        </button>
      </Modal.Footer>
    </Modal>
  );
}

'''
'''--- src/components/navigation/NotificationWidget.js ---
import React from "react";
import styled from "styled-components";
import { Widget } from "near-social-vm";

const StyledNotificationWidget = styled.div`
  margin: 0 15px;
  background-color: var(--slate-dark-5);
  height: 40px;
  width: 40px;
  border-radius: 50%;

  > div,
  a {
    width: 100%;
    height: 100%;
  }

  a {
    color: var(--slate-dark-11) !important;
    display: flex;
    align-items: center;
    justify-content: center;

    i {
      font-size: 18px !important;
    }
  }

  :hover {
    a,
    i {
      color: white;
    }
  }
`;

export function NotificationWidget({ notificationButtonSrc }) {
  return (
    <StyledNotificationWidget className="nav-notification-widget">
      <Widget src={notificationButtonSrc} />
    </StyledNotificationWidget>
  );
}

'''
'''--- src/components/navigation/PretendModal.js ---
import React, { useState } from "react";
import Modal from "react-bootstrap/Modal";
import { Widget, useAccount } from "near-social-vm";

export default function PretendModal(props) {
  const account = useAccount();
  const onHide = props.onHide;
  const show = props.show;

  const [accountId, setAccountId] = useState("");

  return (
    <Modal centered show={show} onHide={onHide}>
      <Modal.Header closeButton>
        <Modal.Title>Pretend to be another account</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <div>
          <label htmlFor="widget-src-input" className="form-label">
            Pretend to be account ID:
          </label>
          <input
            className="form-control"
            id="widget-src-input"
            type="text"
            value={accountId}
            onChange={(e) =>
              setAccountId(
                e.target.value.toLowerCase().replaceAll(/[^a-z0-9_.\-]/g, "")
              )
            }
          />
        </div>
        <div className="mt-2">
          <Widget
            src={props.widgets.profileInlineBlock}
            props={{ accountId }}
          />
        </div>
      </Modal.Body>
      <Modal.Footer>
        <button
          className="btn btn-success"
          disabled={!accountId || !account.startPretending}
          onClick={(e) => {
            e.preventDefault();
            account.startPretending(accountId);
            setAccountId("");
            onHide();
          }}
        >
          Pretend
        </button>
        <button className="btn btn-secondary" onClick={onHide}>
          Cancel
        </button>
      </Modal.Footer>
    </Modal>
  );
}

'''
'''--- src/components/navigation/SignInButton.js ---
import React from "react";
import { GrayBorderButton } from "../common/buttons/GrayBorderButton";

export function SignInButton(props) {
  return (
    <GrayBorderButton className="nav-sign-in-btn" onClick={props.onSignIn}>
      Sign In
    </GrayBorderButton>
  );
}

'''
'''--- src/data/near.js ---
import ls from "local-storage";
import * as nearAPI from "near-api-js";
import { NetworkId } from "./widgets";

export async function getSocialKeyPair(accountId) {
  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();
  const keyPair = await keyStore.getKey(NetworkId, accountId);
  if (keyPair) {
    return keyPair;
  }

  try {
    const hereKeystore = ls.get("herewallet:keystore");
    if (hereKeystore) {
      return nearAPI.KeyPair.fromString(
        hereKeystore[NetworkId].accounts[accountId]
      );
    }
  } catch {}

  try {
    const meteorKey = ls.get(`_meteor_wallet${accountId}:${NetworkId}`);
    if (meteorKey) {
      return nearAPI.KeyPair.fromString(meteorKey);
    }
  } catch {}

  return null;
}

'''
'''--- src/data/openai.js ---
// Move the iframe code here?

import "https://cdn.jsdelivr.net/npm/js-sha256@0.9.0/src/sha256.min.js";
import "https://cdn.jsdelivr.net/npm/near-api-js@2.1.3/dist/near-api-js.min.js";

const keyStore = new nearApi.keyStores.InMemoryKeyStore();
let account;
const networkId = "mainnet";

const config = {
  keyStore, // instance of UnencryptedFileSystemKeyStore
  networkId: networkId,
  nodeUrl: "https://rpc.mainnet.near.org",
  walletUrl: "https://wallet.mainnet.near.org",
  helperUrl: "https://helper.mainnet.near.org",
  explorerUrl: "https://explorer.mainnet.near.org",
};

async function createAccount() {
  const keypair = nearApi.utils.KeyPairEd25519.fromRandom();
  const accountId = Buffer.from(keypair.publicKey.data).toString("hex");
  await keyStore.setKey(networkId, accountId, keypair);
  const near = await nearApi.connect(config);
  account = await near.account(accountId);
  return { secretKey: keypair.secretKey, accountId };
}

async function useAccount(secretKey) {
  const keypair = nearApi.utils.KeyPair.fromString(secretKey);
  const accountId = Buffer.from(keypair.publicKey.data).toString("hex");
  await keyStore.setKey(networkId, accountId, keypair);
  const near = await nearApi.connect(config);
  account = await near.account(accountId);
  return accountId;
}

async function create_ask_ai_request_body(messages, model) {
  const accountId = account.accountId;

  const messagesStringified = JSON.stringify(messages);
  const deposit = 50_00000_00000_00000_00000n;

  const message_hash = sha256(messagesStringified);

  const receiverId = "jsinrust.near";
  const method_name = "ask_ai";
  const gas = "30000000000000";
  const publicKey = await account.connection.signer.getPublicKey(
    account.accountId,
    account.connection.networkId
  );

  let accessKey;

  try {
    accessKey = (await account.findAccessKey()).accessKey;
  } catch (e) {
    throw new Error(JSON.stringify("Balance is empty.", null, 1));
  }

  const nonce = ++accessKey.nonce;
  const recentBlockHash = nearApi.utils.serialize.base_decode(
    accessKey.block_hash
  );

  const transaction = nearApi.transactions.createTransaction(
    account.accountId,
    publicKey,
    receiverId,
    nonce,
    [
      nearApi.transactions.functionCall(
        method_name,
        {
          message_hash,
        },
        gas,
        deposit
      ),
    ],
    recentBlockHash
  );
  const [txHash, signedTx] = await nearApi.transactions.signTransaction(
    transaction,
    account.connection.signer,
    account.accountId,
    account.connection.networkId
  );

  return JSON.stringify({
    signed_transaction: Buffer.from(signedTx.encode()).toString("base64"),
    transaction_hash: nearApi.utils.serialize.base_encode(txHash),
    sender_account_id: accountId,
    messages: messages,
    model: model,
  });
}

async function create_and_send_ask_ai_request(messages, model) {
  console.log("model", model);
  try {
    const requestbody = await create_ask_ai_request_body(messages, model);
    const airesponse = await fetch(
      "https://near-openai-50jjawxtf-petersalomonsen.vercel.app/api/openai",
      {
        method: "POST",
        body: requestbody,
      }
    ).then((r) => r.json());
    if (airesponse.error) {
      throw new Error(JSON.stringify(airesponse.error, null, 1));
    }
    return airesponse.choices[0].message.content;
  } catch (e) {
    console.log(e.message);
    window.parent.postMessage({ command: "error", error: e.message }, "*");
  }
}

'''
'''--- src/data/web3.js ---
import { singletonHook } from "react-singleton-hook";
import { useEffect, useState } from "react";
import { init, useConnectWallet } from "@web3-onboard/react";
import injectedModule from "@web3-onboard/injected-wallets";
import walletConnectModule from "@web3-onboard/walletconnect";
import ledgerModule from "@web3-onboard/ledger";
import { ethers } from "ethers";
import ls from "local-storage";
import icon from "../images/build_dao_icon.svg";

const web3onboardKey = "web3-onboard:connectedWallets";

const wcV1InitOptions = {
  qrcodeModalOptions: {
    mobileLinks: ["metamask", "argent", "trust"],
  },
  connectFirstChainId: true,
};

const walletConnect = walletConnectModule(wcV1InitOptions);
const ledger = ledgerModule();
const injected = injectedModule();

// initialize Onboard
export const onboard = init({
  wallets: [injected, walletConnect, ledger],
  chains: [
    {
      id: 1,
      token: "ETH",
      label: "Ethereum Mainnet",
      rpcUrl: "https://rpc.ankr.com/eth",
    },
    {
      id: 3,
      token: "ETH",
      label: "Ropsten - Ethereum Testnet",
      rpcUrl: "https://rpc.ankr.com/eth_ropsten",
    },
    {
      id: 5,
      token: "ETH",
      label: "Goerli - Ethereum Testnet",
      rpcUrl: "https://rpc.ankr.com/eth_goerli",
    },
    {
      id: 10,
      token: "ETH",
      label: "Optimism",
      rpcUrl: "https://rpc.ankr.com/optimism",
    },
    {
      id: 420,
      token: "ETH",
      label: "Optimism Goerli Testnet",
      rpcUrl: "https://optimism-goerli.publicnode.com",
    },
    {
      id: 56,
      token: "BNB",
      label: "Binance Smart Chain Mainnet",
      rpcUrl: "https://bsc.publicnode.com",
    },
    {
      id: 97,
      token: "tBNB",
      label: "Binance Smart Chain Testnet",
      rpcUrl: "https://bsc-testnet.publicnode.com",
    },
    {
      id: 1313161554,
      token: "ETH",
      label: "Aurora Mainnet",
      rpcUrl: "https://mainnet.aurora.dev",
    },
    {
      id: 1313161555,
      token: "ETH",
      label: "Aurora Testnet",
      rpcUrl: "https://testnet.aurora.dev",
    },
    {
      id: 137,
      token: "MATIC",
      label: "Polygon Mainnet",
      rpcUrl: "https://rpc.ankr.com/polygon",
    },
    {
      id: 80001,
      token: "MATIC",
      label: "Polygon Testnet Mumbai",
      rpcUrl: "https://rpc.ankr.com/polygon_mumbai",
    },
    {
      id: 280,
      token: "ETH",
      label: "zkSync Era Testnet",
      rpcUrl: "https://testnet.era.zksync.dev",
    },
    {
      id: 324,
      token: "ETH",
      label: "zkSync Era Mainnet",
      rpcUrl: "https://zksync2-mainnet.zksync.io",
    },
    {
      id: 1101,
      token: "ETH",
      label: "Polygon zkEVM",
      rpcUrl: "https://zkevm-rpc.com",
    },
    {
      id: 1442,
      token: "ETH",
      label: "Polygon zkEVM Testnet",
      rpcUrl: "https://rpc.public.zkevm-test.net",
    },
    {
      id: 42161,
      token: "ETH",
      label: "Arbitrum One Mainnet",
      rpcUrl: "https://arb1.arbitrum.io/rpc",
    },
    {
      id: 42170,
      token: "ETH",
      label: "Arbitrum Nova",
      rpcUrl: "https://nova.arbitrum.io/rpc",
    },
    {
      id: 421613,
      token: "AGOR",
      label: "Arbitrum Goerli",
      rpcUrl: "https://goerli-rollup.arbitrum.io/rpc",
    },
    {
      id: 25,
      token: "CRO",
      label: "Cronos Mainnet Beta",
      rpcUrl: "https://evm.cronos.org",
    },
    {
      id: 338,
      token: "TCRO",
      label: "Cronos Testnet",
      rpcUrl: "https://evm-t3.cronos.org",
    },
    {
      id: 100,
      token: "XDAI",
      label: "Gnosis",
      rpcUrl: "https://rpc.ankr.com/gnosis",
    },
    {
      id: 10200,
      token: "XDAI",
      label: "Gnosis Chiado Testnet",
      rpcUrl: "https://rpc.chiadochain.net",
    },
    {
      id: 42220,
      token: "CELO",
      label: "Celo Mainnet",
      rpcUrl: "https://rpc.ankr.com/celo",
    },
    {
      id: 44787,
      token: "CELO",
      label: "Celo Alfajores Testnet",
      rpcUrl: "https://alfajores-forno.celo-testnet.org",
    },
    {
      id: 43114,
      token: "AVAX",
      label: "Avalanche C-Chain",
      rpcUrl: "https://rpc.ankr.com/avalanche",
    },
    {
      id: 43113,
      token: "AVAX",
      label: "Avalanche Fuji Testnet",
      rpcUrl: "https://rpc.ankr.com/avalanche_fuji",
    },
    {
      id: 250,
      token: "FTM",
      label: "Fantom Opera",
      rpcUrl: "https://rpc.ankr.com/fantom",
    },
    {
      id: 4002,
      token: "FTM",
      label: "Fantom Testnet",
      rpcUrl: "https://rpc.ankr.com/fantom_testnet",
    },
    {
      id: 1284,
      token: "GLMR",
      label: "Moonbeam",
      rpcUrl: "https://rpc.ankr.com/moonbeam",
    },
    {
      id: 61,
      token: "ETC",
      label: "Ethereum Classic Mainnet",
      rpcUrl: "https://etc.rivet.link",
    },
    {
      id: 84531,
      token: "ETH",
      label: "Base Goerli Testnet",
      rpcUrl: "https://goerli.base.org",
    },
    {
      id: 8453,
      token: "ETH",
      label: "Base",
      rpcUrl: "https://mainnet.base.org",
    },
    {
      id: 5001,
      token: "MNT",
      label: "Mantle Testnet",
      rpcUrl: "https://rpc.testnet.mantle.xyz",
    },
    {
      id: 5000,
      token: "MNT",
      label: "Mantle",
      rpcUrl: "https://rpc.mantle.xyz",
    },
  ],
  appMetadata: {
    name: "NEAR Social",
    icon,
    description: "NEAR Social",
  },
  theme: "dark",
  containerElements: {
    // connectModal: '#near-social-navigation-bar',
    // accountCenter: "#near-social-web3-account",
  },
});

const defaultEthersProviderContext = {
  useConnectWallet,
  setChain: onboard.setChain,
};

export const useEthersProviderContext = singletonHook(
  defaultEthersProviderContext,
  () => {
    const [{ wallet }] = useConnectWallet();
    const [ethersProvider, setEthersProvider] = useState(
      defaultEthersProviderContext
    );

    useEffect(() => {
      (async () => {
        const walletsSub = onboard.state.select("wallets");
        const { unsubscribe } = walletsSub.subscribe((wallets) => {
          const connectedWallets = wallets.map(({ label }) => label);
          ls.set(web3onboardKey, connectedWallets);
        });

        const previouslyConnectedWallets = ls.get(web3onboardKey) || [];

        if (previouslyConnectedWallets) {
          // You can also auto connect "silently" and disable all onboard modals to avoid them flashing on page load
          await onboard.connectWallet({
            autoSelect: {
              label: previouslyConnectedWallets[0],
              disableModals: true,
            },
          });
        }
      })();
    }, []);

    useEffect(() => {
      setEthersProvider({
        provider: wallet?.provider,
        useConnectWallet,
        setChain: onboard.setChain,
      });
    }, [wallet]);

    return ethersProvider;
  }
);

'''
'''--- src/data/widgets.js ---
const TestnetDomains = {
  "test.near.social": true,
  "127.0.0.1": true,
};

export const NetworkId =
  window.location.hostname in TestnetDomains ? "testnet" : "mainnet";
const TestnetWidgets = {
  image: "eugenethedream/widget/Image",
  default: "eugenethedream/widget/Welcome",
  viewSource: "eugenethedream/widget/WidgetSource",
  widgetMetadataEditor: "eugenethedream/widget/WidgetMetadataEditor",
  widgetMetadata: "eugenethedream/widget/WidgetMetadata",
  profileImage: "eugenethedream/widget/ProfileImage",
  profilePage: "eugenethedream/widget/Profile",
  profileName: "eugenethedream/widget/ProfileName",
  profileInlineBlock: "eugenethedream/widget/Profile",
  notificationButton: "eugenethedream/widget/NotificationButton",
};

const MainnetWidgets = {
  image: "mob.near/widget/Image",
  default: "everycanvas.near/widget/index",
  feed: "everycanvas.near/widget/feed.index",
  viewSource: "mob.near/widget/WidgetSource",
  widgetMetadataEditor: "mob.near/widget/WidgetMetadataEditor",
  widgetMetadata: "mob.near/widget/WidgetMetadata",
  profileImage: "mob.near/widget/ProfileImage",
  notificationButton: "mob.near/widget/NotificationButton",
  profilePage: "near/widget/ProfilePage",
  profileName: "patrick.near/widget/ProfileName",
  editorComponentSearch: "mob.near/widget/Editor.ComponentSearch",
  profileInlineBlock: "mob.near/widget/Profile.InlineBlock",
  viewHistory: "bozon.near/widget/WidgetHistory",
};

export const Widgets =
  NetworkId === "testnet" ? TestnetWidgets : MainnetWidgets;

'''
'''--- src/hooks/useBosLoaderInitializer.js ---
import { useCallback, useEffect } from 'react';

import { useBosLoaderStore } from '../stores/bos-loader';

import { useFlags } from './useFlags';

export function useBosLoaderInitializer() {
  const [flags] = useFlags();
  const loaderUrl = flags?.bosLoaderUrl;
  const setStore = useBosLoaderStore((store) => store.set);

  /**
   * Fetch local component versions if a local loader
   * is provided. must be provided as {components: { <path>: { code : <code>}}}
   */
  const fetchRedirectMap = useCallback(
    async (url) => {
      setStore({
        loaderUrl: url,
      });

      try {
        const res = await fetch(url, {
          method: 'GET',
          headers: {
            Accept: 'application/json',
          },
        });

        if (!res.ok) {
          throw new Error('Network response was not OK');
        }

        const data = await res.json();

        setStore({
          hasResolved: true,
          redirectMap: data.components,
        });
      } catch (e) {
        console.error(e);

        setStore({
          failedToLoad: true,
          hasResolved: true,
        });
      }
    },
    [setStore],
  );

  useEffect(() => {
    if (loaderUrl) {
      fetchRedirectMap(loaderUrl);
    } else {
      setStore({ hasResolved: true });
    }
  }, [fetchRedirectMap, loaderUrl, setStore]);
}
'''
'''--- src/hooks/useFlags.js ---
import { useCallback, useEffect, useState } from 'react';

export function useFlags() {
  const [rawFlags, setRawFlags] = useState();

  useEffect(() => {
    const flags = localStorage.getItem('flags') ? JSON.parse(localStorage.getItem('flags') || '') : {};
    setRawFlags(flags);
  }, []);

  const setFlags = useCallback((newFlags) => {
    setRawFlags((f) => {
      const updated = { ...f, ...newFlags };
      localStorage.setItem('flags', JSON.stringify(updated));

      alert('Flags have been saved.');

      // reload for changes to take effect
      location.reload();

      // may not be reachable
      return updated;
    });
  }, []);

  return [rawFlags, setFlags];
}
'''
'''--- src/hooks/useHashRouterLegacy.js ---
import { useHistory } from "react-router-dom";
import React, { useCallback, useEffect } from "react";

export function useHashRouterLegacy() {
  const history = useHistory();

  const onHashChange = useCallback(
    (event) => {
      let url = event.newURL.split("#").pop() ?? "/";

      if (url[0] === "/") {
        history && history.replace(url);
      }
    },
    [history]
  );

  useEffect(() => {
    window.addEventListener("hashchange", onHashChange);

    return () => {
      window.removeEventListener("hashchange", onHashChange);
    };
  }, [onHashChange]);

  useEffect(() => {
    if (!history) {
      return;
    }
    const currentUrl = window.location.href;

    if (currentUrl.includes("#")) {
      const path = currentUrl.split("#")[1];
      history.replace(path);
    }
  }, [history]);
}

'''
'''--- src/hooks/useQuery.js ---
import { useLocation } from "react-router-dom";
import React from "react";

export function useQuery() {
  let { search } = useLocation();
  return React.useMemo(() => new URLSearchParams(search), [search]);
}

'''
'''--- src/hooks/useScrollBlock.js ---
import { useRef } from "react";

const safeDocument = typeof document !== "undefined" ? document : {};

/**
 * Usage:
 * const [blockScroll, allowScroll] = useScrollBlock();
 */
export default () => {
  const scrollBlocked = useRef();
  const html = safeDocument.documentElement;
  const { body } = safeDocument;

  const blockScroll = () => {
    if (!body || !body.style || scrollBlocked.current) return;

    const scrollBarWidth = window.innerWidth - html.clientWidth;
    const bodyPaddingRight =
      parseInt(
        window.getComputedStyle(body).getPropertyValue("padding-right")
      ) || 0;

    /**
     * 1. Fixes a bug in iOS and desktop Safari whereby setting
     *    `overflow: hidden` on the html/body does not prevent scrolling.
     * 2. Fixes a bug in desktop Safari where `overflowY` does not prevent
     *    scroll if an `overflow-x` style is also applied to the body.
     */
    html.style.position = "relative"; /* [1] */
    html.style.overflow = "hidden"; /* [2] */
    body.style.position = "relative"; /* [1] */
    body.style.overflow = "hidden"; /* [2] */
    body.style.paddingRight = `${bodyPaddingRight + scrollBarWidth}px`;

    scrollBlocked.current = true;
  };

  const allowScroll = () => {
    if (!body || !body.style || !scrollBlocked.current) return;

    html.style.position = "";
    html.style.overflow = "";
    body.style.position = "";
    body.style.overflow = "";
    body.style.paddingRight = "";

    scrollBlocked.current = false;
  };

  return [blockScroll, allowScroll];
};

'''
'''--- src/hooks/useUrlState.js ---
import { useEffect, useRef } from "react";
import { MAX_ZOOM, MIN_ZOOM, debounce, react, useEditor } from "tldraw";

const PARAMS = {
  viewport: "viewport",
  page: "page",
  v: "v",
  p: "p",
};

const viewportFromString = (str) => {
  const [x, y, w, h] = str.split(",").map((n) => parseInt(n, 10));
  return { x, y, w, h };
};

const viewportToString = ({ x, y, w, h }, precision = 0) => {
  return `${x.toFixed(precision)},${y.toFixed(precision)},${w.toFixed(
    precision
  )},${h.toFixed(precision)}`;
};

export const getViewportUrlQuery = (editor) => {
  if (!editor.getViewportPageBounds()) return null;
  return {
    [PARAMS.v]: viewportToString(editor.getViewportPageBounds()),
    [PARAMS.p]: editor.getCurrentPageId()?.split(":")[1],
  };
};

export function useUrlState(onChangeUrl) {
  const editor = useEditor();
  const onChangeUrlRef = useRef(onChangeUrl);
  onChangeUrlRef.current = onChangeUrl;

  useEffect(() => {
    if (!editor) return;

    const url = new URL(location.href);

    if (url.searchParams.has(PARAMS.page) || url.searchParams.has(PARAMS.p)) {
      const newPageId =
        url.searchParams.get(PARAMS.page) ??
        "page:" + url.searchParams.get(PARAMS.p);
      if (newPageId) {
        if (editor.store.has(newPageId)) {
          editor.setCurrentPage(newPageId);
        }
      }
    }

    if (
      url.searchParams.has(PARAMS.viewport) ||
      url.searchParams.has(PARAMS.v)
    ) {
      const newViewportRaw =
        url.searchParams.get(PARAMS.viewport) ?? url.searchParams.get(PARAMS.v);
      if (newViewportRaw) {
        try {
          const viewport = viewportFromString(newViewportRaw);
          const { x, y, w, h } = viewport;
          const { w: sw, h: sh } = editor.getViewportScreenBounds();

          const zoom = Math.min(
            Math.max(Math.min(sw / w, sh / h), MIN_ZOOM),
            MAX_ZOOM
          );

          editor.setCamera({
            x: -x + (sw - w * zoom) / 2 / zoom,
            y: -y + (sh - h * zoom) / 2 / zoom,
            z: zoom,
          });
        } catch (err) {
          console.error(err);
        }
      }
    }

    const handleChange = debounce((params) => {
      if (params) onChangeUrlRef.current(params);
    }, 500);

    const unsubscribe = react("urlState", () => {
      handleChange(getViewportUrlQuery(editor));
    });

    return () => {
      handleChange.cancel();
      unsubscribe();
    };
  }, [editor]);
}

'''
'''--- src/images/build_dao.combo.svg ---
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="101.000000pt" height="24.000000pt" viewBox="0 0 101.000000 24.000000"
 preserveAspectRatio="xMidYMid meet">

<g transform="translate(0.000000,24.000000) scale(0.100000,-0.100000)"
fill="#000000" stroke="none">
</g>
</svg>

'''
'''--- src/images/build_dao_icon.svg ---
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="225.000000pt" height="225.000000pt" viewBox="0 0 225.000000 225.000000"
 preserveAspectRatio="xMidYMid meet">

<g transform="translate(0.000000,225.000000) scale(0.100000,-0.100000)"
fill="#000000" stroke="none">
<path d="M0 1125 l0 -1125 1125 0 1125 0 0 1125 0 1125 -1125 0 -1125 0 0
-1125z m1776 241 c100 -47 163 -135 172 -242 9 -116 -53 -225 -162 -282 -43
-22 -64 -27 -132 -27 -70 0 -88 4 -139 30 -66 34 -125 101 -144 165 -20 68
-14 160 15 218 31 61 99 125 157 146 68 24 173 20 233 -8z m-1150 -11 c138
-41 215 -173 184 -319 -15 -73 -60 -133 -130 -171 -53 -29 -60 -30 -207 -33
l-153 -4 0 271 0 271 128 0 c84 0 146 -5 178 -15z m625 -257 l107 -268 -58 0
-58 0 -23 65 -23 65 -111 0 -111 0 -24 -65 -24 -65 -57 0 -57 0 111 270 111
271 55 -3 55 -3 107 -267z"/>
<path d="M1574 1271 c-65 -30 -98 -81 -102 -160 -3 -59 0 -71 25 -109 29 -44
106 -92 147 -92 103 0 196 91 196 190 0 45 -21 104 -48 133 -50 55 -144 72
-218 38z"/>
<path d="M420 1100 l0 -170 78 0 c127 1 188 41 202 133 10 70 -3 117 -43 153
-42 39 -91 54 -174 54 l-63 0 0 -170z"/>
<path d="M1052 1149 c-18 -44 -32 -84 -32 -90 0 -5 29 -9 65 -9 36 0 65 4 65
10 0 9 -59 162 -64 168 -2 1 -17 -34 -34 -79z"/>
</g>
</svg>

'''
'''--- src/index.css ---
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500&display=swap");

@import url("@tldraw/tldraw/tldraw.css");

:root {
  --slate-dark-1: #151718;
  --slate-dark-5: #2B2F31;
  --slate-dark-6: #313538;
  --slate-dark-8: #4C5155;
  --slate-dark-9: #697177;
  --slate-dark-11: #9BA1A6;
  --slate-dark-12: #ECEDEE;
  --blue-light-9: #0091FF;

  --font-weight-medium: 500;
  --font-weight-bold: 600;

  /* For web3 onboard */
  --account-center-z-index: 999;
  --account-center-position-top: 64px;
  --account-center-position-right: -10px;
}

'''
'''--- src/index.js ---
import React from "react";
import { createRoot } from "react-dom/client";
import "./index.css";
import App from "./App";

const container = document.getElementById("root");
const root = createRoot(container);
root.render(<App />);

'''
'''--- src/pages/FeedPage.js ---
import { Widget } from "near-social-vm";
import React from "react";
import { useParams } from "react-router-dom";
import styled from "styled-components";
import { useHashRouterLegacy } from "../hooks/useHashRouterLegacy";
import { useBosLoaderStore } from "../stores/bos-loader";

const Container = styled.div`
  display: flex;
  flex-direction: column;
  width: 100vw;
  min-height: 100vh;
  align-items: stretch;
`;

export default function FeedPage(props) {
  useHashRouterLegacy();

  const { type } = useParams();
  const redirectMapStore = useBosLoaderStore();

  const src = props.widgets.feed;

  return (
    <Container>
      <Widget
        key={src}
        src={src}
        props={{ type: type }}
        config={{
          redirectMap: redirectMapStore.redirectMap,
        }}
      />
    </Container>
  );
}

'''
'''--- src/pages/Flags.js ---
import styled from "styled-components";

import React, { useState } from "react";
import { useFlags } from "../hooks/useFlags";

const Container = styled.div`
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 2rem 1rem;
`;

const Form = styled.div`
  display: flex;
  flex-direction: column;
  gap: 1rem;
`;

const InputGrid = styled.div`
  display: grid;
  grid-template-columns: max-content 1fr;
  align-items: center;
  gap: 1rem;

  @media (max-width: 600px) {
    grid-template-columns: 1fr;
  }
`;

export default function Flags() {
  const [flags, setFlags] = useFlags();
  const [url, setUrl] = useState(flags?.bosLoaderUrl || "");

  return (
    <Container className="container-xl">
      <h1>
        Flags
      </h1>

      <Form>
        <InputGrid>
          <p>
            BOS Loader Url
          </p>

          <input
            className="form-control"
            placeholder="e.g. http://127.0.0.1:3030/, https://my-loader.ngrok.io"
            id="bosLoaderUrl"
            onChange={(e) => setUrl(e.target.value)}
          />
        </InputGrid>

        <button
          onClick={() => setFlags({ bosLoaderUrl: url })}
          style={{ marginLeft: "auto" }}
        >Save</button>
      </Form>
    </Container>
  );
};

{/* <Widget
src="devs.near/widget/SetFlagButton"
props={{
  url: "https://everything.dev",
  setFlags: setFlags,
}}
/> */}
'''
'''--- src/pages/ViewPage.js ---
import { Widget, useAccountId } from "near-social-vm";
import React from "react";
import { useParams, useHistory } from "react-router-dom";
import styled from "styled-components";
import { useHashRouterLegacy } from "../hooks/useHashRouterLegacy";
import { useBosLoaderStore } from "../stores/bos-loader";

const Container = styled.div`
  display: flex;
  flex-direction: column;
  width: 100vw;
  min-height: 100vh;
  align-items: stretch;
`;

export default function ViewPage(props) {
  useHashRouterLegacy();
  const history = useHistory();

  const { path } = useParams();

  if (!path) { // default to every.near
    history.push("/every.near");
  }

  const redirectMapStore = useBosLoaderStore();

  const src = props.widgets.default;

  return (
    <Container>
      <Widget
        key={src}
        src={src}
        props={{
          path: path,
        }}
        config={{
          redirectMap: redirectMapStore.redirectMap,
        }}
      />
    </Container>
  );
}

'''
'''--- src/stores/bos-loader.js ---
import { create } from 'zustand';

export const useBosLoaderStore = create((set) => ({
  failedToLoad: false,
  hasResolved: false,
  loaderUrl: '',
  redirectMap: {},
  set: (state) => set((previousState) => ({ ...previousState, ...state })),
}));
'''
'''--- webpack.config.js ---
const webpack = require("webpack");
const paths = require("./config/paths");
const path = require("path");
const ManifestPlugin = require("webpack-manifest-plugin");
const { CleanWebpackPlugin } = require("clean-webpack-plugin");
const HTMLWebpackPlugin = require("html-webpack-plugin");
const CopyWebpackPlugin = require("copy-webpack-plugin");
const { merge } = require("webpack-merge");
const loadPreset = require("./config/presets/loadPreset");
const loadConfig = (mode) => require(`./config/webpack.${mode}.js`)(mode);

module.exports = function (env) {
  const { mode = "production" } = env || {};
  return merge(
    {
      mode,
      entry: `${paths.srcPath}/index.js`,
      output: {
        path: paths.distPath,
        filename: "[name].bundle.js",
        publicPath: "/",
      },
      module: {
        rules: [
          {
            test: /\.m?js/,
            resolve: {
              fullySpecified: false,
            },
          },
          {
            test: /\.js$/,
            use: ["babel-loader"],
            exclude: path.resolve(__dirname, "node_modules"),
          },
          // Images: Copy image files to build folder
          { test: /\.(?:ico|gif|png|jpg|jpeg)$/i, type: "asset/resource" },

          // Fonts and SVGs: Inline files
          { test: /\.(woff(2)?|eot|ttf|otf|svg|)$/, type: "asset/inline" },
        ],
      },
      resolve: {
        modules: [paths.srcPath, "node_modules"],
        extensions: [".js", ".jsx", ".json"],
        fallback: {
          crypto: require.resolve("crypto-browserify"),
          stream: require.resolve("stream-browserify"),
          http: require.resolve("stream-http"),
          https: require.resolve("https-browserify"),
          fs: false,
          path: require.resolve("path-browserify"),
          zlib: require.resolve("browserify-zlib"),
        },
        // Fix for using `yarn link "near-social-vm"`
        alias: {
          react: path.resolve(__dirname, "./node_modules/react"),
          "react-dom": path.resolve(__dirname, "./node_modules/react-dom"),
          "near-api-js": path.resolve(__dirname, "./node_modules/near-api-js"),
        },
      },
      plugins: [
        new webpack.EnvironmentPlugin({
          // Configure environment variables here.
          ENVIRONMENT: "browser",
        }),
        new CleanWebpackPlugin(),
        // Copies files from target to destination folder
        new CopyWebpackPlugin({
          patterns: [
            {
              from: paths.publicPath,
              to: "./",
              globOptions: {
                ignore: ["**/*.DS_Store", "**/index.html", "**/favicon.png"],
              },
              noErrorOnMissing: true,
            },
          ],
        }),
        new HTMLWebpackPlugin({
          template: `${paths.publicPath}/index.html`,
          favicon: `${paths.publicPath}/favicon.png`,
          publicPath: "/",
        }),
        new webpack.ProvidePlugin({
          process: "process/browser",
          Buffer: [require.resolve("buffer/"), "Buffer"],
        }),
        // new ManifestPlugin.WebpackManifestPlugin(),
      ],
    },
    loadConfig(mode),
    loadPreset(env)
  );
};

'''