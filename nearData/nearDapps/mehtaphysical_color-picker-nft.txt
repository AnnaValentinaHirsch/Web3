*GitHub Repository "mehtaphysical/color-picker-nft"*

'''--- .vscode/settings.json ---
{
  "typescript.tsdk": "node_modules/typescript/lib"
}

'''
'''--- README.md ---
# Example NFT

This application is an example NFT creator.

* [slides](https://hackmd.io/@nYZjxlkZTY-FTvu6-J3lXg/rkXxFIq6_#/)
* [NEAR playground](https://near-playground.netlify.app/)
* [Fix Rust Smart Contracts](https://near-by-example-rust.vercel.app/)

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/index.ts ---
import {
  Context,
  PersistentMap,
  PersistentSet,
  PersistentUnorderedMap,
  u128,
} from "near-sdk-as";

@nearBindgen
class Token {
  id: string;
  owner_id: string;
}

// PersistentMap -> dictionary (key/value pairs)
// PersistentSet -> a unique list
// PersistentUnorderedMap -> dictionary (key/value pairs) that can act like a list

export class Contract {
  // nftIdToOwnerId maps (CID from IPFS to Owner Account ID)
  nftIdToOwnerId: PersistentUnorderedMap<string, string> =
    new PersistentUnorderedMap<string, string>("o");

  ownerIdToNfts: PersistentMap<string, PersistentSet<string>> =
    new PersistentMap<string, PersistentSet<string>>("a");

  nft_mint(id: string): void {
    // make sure that someone doesn't already own it
    const exists = this.nftIdToOwnerId.contains(id);
    assert(!exists, "NFT already minted");

    // find a way to associate the id with an owner
    this.nftIdToOwnerId.set(id, Context.sender);

    // get the set of owned tokens
    let ownedTokens = this.ownerIdToNfts.get(Context.sender);

    // if the sender doesn't own any tokens yet, create a set
    if (!ownedTokens) {
      ownedTokens = new PersistentSet(Context.sender);
    }

    // add nft to set
    ownedTokens.add(id);

    // store set in map
    this.ownerIdToNfts.set(Context.sender, ownedTokens);
  }

  nft_tokens_for_owner(account_id: string): Token[] {
    const tokens: Token[] = [];
    // const nfts = this.nftIdToOwnerId.entries();
    const nftIds = this.ownerIdToNfts.getSome(account_id).values();

    for (let i = 0; i < nftIds.length; i++) {
      const id = nftIds[i];
      tokens.push({ id, owner_id: account_id });
    }

    return tokens;
  }
}

'''
'''--- assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": ["./**/*"]
}

'''
'''--- package.json ---
{
  "name": "color-picker-nft",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "dom-to-image": "^2.6.0",
    "ipfs": "^0.55.4",
    "near-api-js": "^0.42.0",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3",
    "web-vitals": "^1.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "near-cli": "^2.0.2",
    "near-sdk-as": "^3.2.3",
    "prettier": "^2.3.2"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/components/App.module.css ---
@media screen and (min-width: 1300px) {
  .App {
    display: grid;
    grid-template-columns: 1fr 1fr;
  }
}

'''
'''--- src/components/nft/NFTCreator.module.css ---
.NFTCreator {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 1rem;
  width: 40rem;
  margin: auto;
}

.NFTCreator form {
  width: 100%;
}

.NFTCreator input {
  display: block;
  width: 100%;
  margin: 0.5rem 0;
  padding: 0.4rem;
}

.NFTCreator input[type="color"] {
  padding: 0.05rem;
}

.NFTCreator button {
  display: block;
  width: 100%;
  padding: 0.5rem;
}

'''
'''--- src/components/nft/NFTList.module.css ---
.NFTList {
  width: 40rem;
  margin: auto;
}

.NFTList h2 {
  text-align: center;
}

.NFTList ul {
  display: flex;
  justify-content: space-evenly;
}

'''
'''--- src/index.css ---
* {
  box-sizing: border-box;
}

'''
'''--- src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import App from "./components/App";
import './index.css'

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById("root")
);

'''
'''--- src/services/near.js ---
import { keyStores, Near, WalletConnection } from "near-api-js";

export const CONTRACT_ID = "dev-1626287536145-55151779448445";

const near = new Near({
  keyStore: new keyStores.BrowserLocalStorageKeyStore(),
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
});

export const wallet = new WalletConnection(near, "color-picker-nft");

export const mintNFT = (id) => {
  // axios.post(URL)
  return wallet.account().functionCall({
    contractId: CONTRACT_ID,
    methodName: "nft_mint",
    args: { id },
    gas: "300000000000000",
  });
};

export const getNFTs = (accountId) => {
  // axios.get(URL)
  return wallet.account().viewFunction(CONTRACT_ID, "nft_tokens_for_owner", {
    account_id: accountId,
  });
};

'''