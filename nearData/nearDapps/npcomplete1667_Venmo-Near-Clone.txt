*GitHub Repository "npcomplete1667/Venmo-Near-Clone"*

'''--- README.md ---
Venmo Clone on NEAR Blockchain

'''
'''--- contract/Cargo.toml ---
[package]
name = "greeter"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
decash_rust Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder â€“
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/src/lib.rs ---
/*
 * This is an example of a Rust smart contract with two simple, symmetric functions:
 *
 * 1. set_greeting: accepts a greeting, such as "howdy", and records it for the user (account_id)
 *    who sent the request
 * 2. get_greeting: accepts an account_id and returns the greeting saved for it, defaulting to
 *    "Hello"
 *
 * Learn more about writing NEAR smart contracts with Rust:
 * https://github.com/near/near-sdk-rs
 *
 */

// To conserve gas, efficient serialization is achieved through Borsh (http://borsh.io/)
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::LookupMap;
use near_sdk::{env, near_bindgen, setup_alloc, AccountId, Promise};

setup_alloc!();

// Structs in Rust are similar to other languages, and may include impl keyword as shown below
// Note: the names of the structs are not important when calling the smart contract, but the function names are
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct VenmoClone {
    memo: LookupMap<String, Vec<String>>,
}

impl Default for VenmoClone {
    fn default() -> Self {
        Self {
            memo: LookupMap::new(b"memo".to_vec()),
        }
    }
}

#[near_bindgen]
impl VenmoClone {
    //change method incurs a fee by changing the state of the blockchain

    pub fn add_memo(&mut self, memo_text: String, price: String) {
        //env comes from the near sdk at the top
        //signer_account_id() gives the id for the person that last signed the smart contract
        //aka since the person connected wallet, its the name of the wallet thats currently signed in
        let account_id = env::signer_account_id();
        let contains_user = self.memo.contains_key(&account_id);

        if contains_user {
            //the .get function returns either "Some" or "None". so if its found, it returns Some, if not found, then None.  So below its accounting for each return
            let mut temp_list = match self.memo.get(&account_id) {
                Some(x) => x,
                None => vec![],
            };

            temp_list.push(memo_text + " || " + &price + "NEAR");
            self.memo.insert(&account_id, &temp_list);
        } else {
            let fresh_vec = vec![memo_text + " || " + &price + "NEAR"];
            self.memo.insert(&account_id, &fresh_vec);
        }
    }

    pub fn transfer_money(&mut self, account_id: AccountId, amount: f64) {
        //The line below is one way of transferring money with rust in NEAR
        Promise::new(account_id).transfer(amount as u128);
    }

    //View Methods
    //dont make self mutable in a view method
    pub fn get_memos(self, user: String) -> Vec<String> {
        match self.memo.get(&user) {
            Some(x) => x,   //contains all your memos
            None => vec![], //otherwise returns empty memo
        } //Since theres no semicolon here, this value is returned
    }
}

'''
'''--- package.json ---
{
  "name": "decash_rust",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "nodemon --watch contract/src -e rs --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "@babel/core": "~7.14.0",
    "@babel/preset-env": "~7.14.0",
    "@babel/preset-react": "~7.13.13",
    "babel-jest": "~26.6.2",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~1.6.0",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "bootstrap": "^5.1.0",
    "near-api-js": "~0.41.0",
    "react": "~17.0.1",
    "react-bootstrap": "^1.6.1",
    "react-dom": "~17.0.1",
    "react-router-dom": "^5.2.0",
    "regenerator-runtime": "~0.13.5"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import "regenerator-runtime/runtime";
import React from "react";
import { login, logout } from "./utils";

import "bootstrap/dist/css/bootstrap.min.css";
import "./global.css";

// Bootstrap Components
import { Container, Row, Nav, Navbar, Card } from "react-bootstrap";

import getConfig from "./config";
const { networkId } = getConfig(process.env.NODE_ENV || "development");

// image
import Logo from "./assets/DeCash.svg";
import MoneyMemo from "./Components/MoneyMemo";
import Transactions from "./Components/Transactions";

import { BrowserRouter as Router, Switch, Route, Link } from "react-router-dom";

export default function App() {
  return (
    <Router>
      <Navbar bg='light' expand='lg'>
        <Container>
          <Navbar.Brand href='/'>
            <img src={Logo}></img>
          </Navbar.Brand>
          <Navbar.Toggle aria-controls='basic-navbar-nav' />
          <Navbar.Collapse id='basic-navbar-nav'>
            <Nav className='me-auto'></Nav>
            <Nav.Link href='/transactions'>Transactions</Nav.Link>
            <Nav.Link
              onClick={window.walletConnection.isSignedIn() ? logout : login}
            >
              {/* add code here for login */}
              {window.walletConnection.isSignedIn()
                ? window.accountId
                : "Login"}
            </Nav.Link>
          </Navbar.Collapse>
        </Container>
      </Navbar>
      <Container>
        {/* fix code here */}
        {window.walletConnection.isSignedIn() ? (
          <Row
            className='d-flex justify-content-center'
            style={{ marginTop: "10px" }}
          >
            <Switch>
              <Route exact path='/'>
                <MoneyMemo />
              </Route>
              <Route exact path='/transactions'>
                <Transactions />
              </Route>
            </Switch>
          </Row>
        ) : (
          <Row className='d-flex justify-content-center'>
            <Card>
              <Card.Body>
                {" "}
                <Card.Title>Please Sign In</Card.Title>
              </Card.Body>
            </Card>
          </Row>
        )}
      </Container>
    </Router>
  );
}

'''
'''--- src/Components/MoneyMemo.js ---
import React, { useRef, useState } from "react";
import PropTypes from "prop-types";

// React Bootstrap
import { Card, Button, Form } from "react-bootstrap";

const MoneyMemo = (props) => {
  const memoField = useRef("");
  const nearField = useRef("");
  const recipientField = useRef("");

  const [buttonState, changeButtonState] = useState(false);

  // Submit Button

  const submitButton = async () => {
    changeButtonState(true);
    // checking text was written in field, and not just whitespaces
    let isThereText = memoField.current.value.match("[A-Za-z0-9]");

    console.log(recipientField.current.value);
    console.log(memoField.current.value);
    console.log(nearField.current.value);

    if (isThereText === null) {
      alert(
        " I think you're missing the point of the memo... you need to type something in it"
      );
    } else {
      console.log(" you wrote something cool....");

      // Save Memo to Blockchain
      await window.contract.add_memo({
        receiver: recipientField.current.value,
        memo_text: memoField.current.value,
        price: nearField.current.value,
      });

      // Send Near tokens using smart contract
      await window.contract.transfer_money({
        account_id: recipientField.current.value,
        amount: parseInt(
          window.utils.format.parseNearAmount(nearField.current.value)
        ),
      });

      alert("Money Sent");
    }
    changeButtonState(false);
  };

  return (
    <Card style={{ marginTop: "3vh" }}>
      <Card.Body>
        <Card.Title>Send NEAR</Card.Title>
        <Form>
          <Form.Group className='mb-3'>
            <Form.Label>Recipient</Form.Label>
            <Form.Control
              ref={recipientField}
              placeholder='example.testnet'
            ></Form.Control>
          </Form.Group>
          <Form.Group>
            <Form.Label>Amount</Form.Label>
            <Form.Control
              ref={nearField}
              placeholder='Enter NEAR Value'
            ></Form.Control>
          </Form.Group>
          <Form.Group>
            <Form.Label>Memo Field</Form.Label>
            <Form.Control
              ref={memoField}
              placeholder='Write Something Cool'
              as='textarea'
              rows={5}
            ></Form.Control>
          </Form.Group>
        </Form>
        <Button
          disabled={buttonState}
          onClick={submitButton}
          style={{ marginTop: "3vh" }}
          variant='primary'
        >
          Send NEAR
        </Button>
      </Card.Body>
    </Card>
  );
};

MoneyMemo.propTypes = {};

export default MoneyMemo;

'''
'''--- src/Components/Transactions.js ---
import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import { InMemorySigner } from "near-api-js";
import { Container, Row, Card } from "react-bootstrap";
import { async } from "regenerator-runtime";

const Transactions = (props) => {
  const [memos, changeMemos] = useState([]);

  useEffect(() => {
    const getInfo = async () => {
      let userMemos = await window.contract.get_memos({
        user: window.accountId,
      });
      changeMemos(userMemos);
    };

    getInfo();
  }, []);

  return (
    <Container>
      {memos.map((el, i) => {
        return (
          <Row
            style={{ margin: "3vh" }}
            key={i}
            className='d-flex justify-content-center'
          >
            <Card>
              <Card.Title>Transaction #{i}</Card.Title>
              <Card.Body>{el}</Card.Body>
            </Card>
          </Row>
        );
      })}
    </Container>
  );
};

Transactions.propTypes = {};

export default Transactions;

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/assets/DeCash.svg ---
<svg width="97" height="109" viewBox="0 0 97 109" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M48.5 109L6.49777 27.25L90.5022 27.25L48.5 109Z" fill="#00BEFA"/>
<path d="M20.48 40C22.6133 40 24.2533 40.58 25.4 41.74C26.56 42.8867 27.14 44.5333 27.14 46.68C27.14 48.16 26.8667 49.4533 26.32 50.56C25.7733 51.6533 24.9933 52.5 23.98 53.1C22.9667 53.7 21.78 54 20.42 54H15.9C15.46 54 15.24 53.82 15.24 53.46V52.96C15.24 52.6 15.46 52.42 15.9 52.42H16.42V41.58H15.9C15.46 41.58 15.24 41.4 15.24 41.04V40.54C15.24 40.18 15.46 40 15.9 40H20.48ZM20.24 52.42C21.8667 52.42 23.1133 51.9267 23.98 50.94C24.86 49.9533 25.3 48.5533 25.3 46.74C25.3 44.9933 24.8933 43.7 24.08 42.86C23.2667 42.0067 22.0267 41.58 20.36 41.58H18.22V52.42H20.24ZM38.5322 48.5C38.5322 48.5667 38.5122 48.86 38.4722 49.38H31.3722C31.4389 50.3933 31.7322 51.1933 32.2522 51.78C32.7722 52.3533 33.4655 52.64 34.3322 52.64C34.9189 52.64 35.3855 52.5467 35.7322 52.36C36.0789 52.1733 36.4055 51.84 36.7122 51.36C36.8189 51.2 36.9189 51.0867 37.0122 51.02C37.1189 50.9533 37.2389 50.92 37.3722 50.92C37.5722 50.92 37.7455 50.9867 37.8922 51.12C38.0522 51.24 38.1322 51.3933 38.1322 51.58C38.1322 51.8333 38.0389 52.0933 37.8522 52.36C37.4655 52.9867 36.9855 53.4533 36.4122 53.76C35.8389 54.0533 35.1255 54.2 34.2722 54.2C33.3255 54.2 32.4922 53.98 31.7722 53.54C31.0655 53.1 30.5122 52.48 30.1122 51.68C29.7255 50.88 29.5322 49.96 29.5322 48.92C29.5322 47.8933 29.7255 46.9933 30.1122 46.22C30.4989 45.4467 31.0455 44.8533 31.7522 44.44C32.4589 44.0133 33.2789 43.8 34.2122 43.8C35.5055 43.8 36.5455 44.2133 37.3322 45.04C38.1322 45.8667 38.5322 47.02 38.5322 48.5ZM34.1722 45.28C33.3855 45.28 32.7522 45.52 32.2722 46C31.8055 46.4667 31.5189 47.1467 31.4122 48.04H36.7122C36.6989 46.2 35.8522 45.28 34.1722 45.28ZM41.8669 48.22C41.6269 48.22 41.4469 48.16 41.3269 48.04C41.2069 47.92 41.1469 47.76 41.1469 47.56V47.32C41.1469 47.1067 41.2069 46.94 41.3269 46.82C41.4469 46.7 41.6269 46.64 41.8669 46.64H48.7469C48.9869 46.64 49.1669 46.7 49.2869 46.82C49.4069 46.94 49.4669 47.1067 49.4669 47.32V47.56C49.4669 47.76 49.4069 47.92 49.2869 48.04C49.1669 48.16 48.9869 48.22 48.7469 48.22H41.8669ZM47.3931 74.14C47.6198 74.14 47.8131 74.2067 47.9731 74.34C48.1331 74.4733 48.2131 74.64 48.2131 74.84C48.2131 75.12 48.1131 75.4133 47.9131 75.72C47.4065 76.5467 46.7731 77.1667 46.0131 77.58C45.2531 77.9933 44.3465 78.2 43.2931 78.2C42.0665 78.2 41.0065 77.9067 40.1131 77.32C39.2331 76.72 38.5531 75.88 38.0731 74.8C37.6065 73.7067 37.3731 72.4267 37.3731 70.96C37.3731 68.7067 37.8931 66.9533 38.9331 65.7C39.9865 64.4333 41.4531 63.8 43.3331 63.8C44.2131 63.8 45.0265 63.96 45.7731 64.28C46.5198 64.6 47.1131 65.0333 47.5531 65.58C47.9931 66.1133 48.2131 66.7067 48.2131 67.36C48.2131 67.7867 48.0998 68.1267 47.8731 68.38C47.6598 68.6333 47.3598 68.76 46.9731 68.76C46.6398 68.76 46.3598 68.6533 46.1331 68.44C45.9198 68.2267 45.8131 67.96 45.8131 67.64C45.8131 67.2533 45.9531 66.94 46.2331 66.7C45.9931 66.2867 45.6131 65.9667 45.0931 65.74C44.5731 65.5 43.9931 65.38 43.3531 65.38C40.5798 65.38 39.1931 67.2333 39.1931 70.94C39.1931 72.7667 39.5398 74.1733 40.2331 75.16C40.9398 76.1333 41.9798 76.62 43.3531 76.62C44.0998 76.62 44.7398 76.4667 45.2731 76.16C45.8198 75.8533 46.2731 75.38 46.6331 74.74C46.7531 74.5 46.8665 74.34 46.9731 74.26C47.0798 74.18 47.2198 74.14 47.3931 74.14ZM59.1492 76.42C59.5759 76.42 59.7892 76.6 59.7892 76.96V77.46C59.7892 77.82 59.5759 78 59.1492 78H57.5492C57.3492 78 57.1759 77.9333 57.0292 77.8C56.8959 77.6533 56.8292 77.4733 56.8292 77.26V76C56.5759 76.6267 56.1359 77.1533 55.5092 77.58C54.8959 77.9933 54.2426 78.2 53.5492 78.2C52.6159 78.2 51.8626 77.9333 51.2892 77.4C50.7159 76.8533 50.4292 76.1333 50.4292 75.24C50.4292 74.3067 50.7426 73.5867 51.3692 73.08C52.0092 72.5733 52.9159 72.32 54.0892 72.32C54.9826 72.32 55.8959 72.4267 56.8292 72.64V71.74C56.8292 70.9133 56.6359 70.3 56.2492 69.9C55.8626 69.5 55.2626 69.3 54.4492 69.3C53.8226 69.3 53.3559 69.42 53.0492 69.66C53.1426 69.82 53.1892 69.9933 53.1892 70.18C53.1892 70.4867 53.0826 70.7467 52.8692 70.96C52.6559 71.1733 52.3959 71.28 52.0892 71.28C51.7292 71.28 51.4426 71.1667 51.2292 70.94C51.0159 70.7133 50.9092 70.4067 50.9092 70.02C50.9092 69.3667 51.2492 68.8333 51.9292 68.42C52.6092 68.0067 53.4759 67.8 54.5292 67.8C55.8492 67.8 56.8559 68.1533 57.5492 68.86C58.2559 69.5667 58.6092 70.5667 58.6092 71.86V76.42H59.1492ZM53.9692 76.74C54.4759 76.74 54.9426 76.6067 55.3692 76.34C55.8092 76.06 56.1559 75.6933 56.4092 75.24C56.6759 74.7733 56.8159 74.2667 56.8292 73.72C56.2292 73.6267 55.4026 73.58 54.3492 73.58C52.9092 73.58 52.1892 74.1133 52.1892 75.18C52.1892 75.6733 52.3492 76.06 52.6692 76.34C52.9892 76.6067 53.4226 76.74 53.9692 76.74ZM66.1053 72.18C67.3586 72.54 68.2453 72.9533 68.7653 73.42C69.2853 73.8733 69.5453 74.48 69.5453 75.24C69.5453 75.8133 69.3786 76.3267 69.0453 76.78C68.712 77.22 68.2386 77.5667 67.6253 77.82C67.0253 78.0733 66.332 78.2 65.5453 78.2C64.3053 78.2 63.312 77.9667 62.5653 77.5C61.832 77.02 61.4653 76.4 61.4653 75.64C61.4653 75.2533 61.572 74.9467 61.7853 74.72C61.9986 74.4933 62.2853 74.38 62.6453 74.38C62.952 74.38 63.2053 74.4867 63.4053 74.7C63.6186 74.9133 63.7253 75.1733 63.7253 75.48C63.7253 75.76 63.6386 75.9867 63.4653 76.16C63.7853 76.6133 64.472 76.84 65.5253 76.84C66.2453 76.84 66.792 76.7133 67.1653 76.46C67.552 76.2067 67.7453 75.8667 67.7453 75.44C67.7453 75.16 67.6853 74.9333 67.5653 74.76C67.4453 74.5733 67.232 74.4133 66.9253 74.28C66.632 74.1333 66.1786 73.9733 65.5653 73.8C64.5653 73.52 63.7853 73.24 63.2253 72.96C62.6786 72.6667 62.2853 72.3467 62.0453 72C61.8053 71.64 61.6853 71.1933 61.6853 70.66C61.6853 70.1 61.852 69.6067 62.1853 69.18C62.5186 68.74 62.9786 68.4 63.5653 68.16C64.1653 67.92 64.8453 67.8 65.6053 67.8C66.792 67.8 67.7186 68.0133 68.3853 68.44C69.052 68.8533 69.3853 69.4333 69.3853 70.18C69.3853 70.5667 69.2786 70.88 69.0653 71.12C68.852 71.3467 68.572 71.46 68.2253 71.46C67.9053 71.46 67.6386 71.3533 67.4253 71.14C67.2253 70.9267 67.1253 70.66 67.1253 70.34C67.1253 70.06 67.212 69.8333 67.3853 69.66C67.092 69.3267 66.492 69.16 65.5853 69.16C64.9586 69.16 64.452 69.2933 64.0653 69.56C63.6786 69.8267 63.4853 70.1733 63.4853 70.6C63.4853 70.8267 63.5586 71.02 63.7053 71.18C63.852 71.34 64.1053 71.4933 64.4653 71.64C64.8386 71.7867 65.3853 71.9667 66.1053 72.18ZM81.5811 76.42C82.0078 76.42 82.2211 76.6 82.2211 76.96V77.46C82.2211 77.82 82.0078 78 81.5811 78H78.7411C78.3144 78 78.1011 77.82 78.1011 77.46V76.96C78.1011 76.6 78.3144 76.42 78.7411 76.42H79.2611V72.56C79.2611 71.4 79.1078 70.58 78.8011 70.1C78.5078 69.6067 78.0078 69.36 77.3011 69.36C76.8078 69.36 76.3278 69.5267 75.8611 69.86C75.4078 70.18 75.0344 70.6 74.7411 71.12C74.4611 71.64 74.3211 72.1867 74.3211 72.76V76.42H74.8411C75.2811 76.42 75.5011 76.6 75.5011 76.96V77.46C75.5011 77.82 75.2811 78 74.8411 78H72.0211C71.5811 78 71.3611 77.82 71.3611 77.46V76.96C71.3611 76.6 71.5811 76.42 72.0211 76.42H72.5411V64.78H72.0211C71.5811 64.78 71.3611 64.6 71.3611 64.24V63.74C71.3611 63.38 71.5811 63.2 72.0211 63.2H73.6011C73.8011 63.2 73.9678 63.2733 74.1011 63.42C74.2478 63.5533 74.3211 63.7267 74.3211 63.94V70.24C74.6144 69.5467 75.0811 68.9667 75.7211 68.5C76.3611 68.0333 77.0278 67.8 77.7211 67.8C78.8278 67.8 79.6611 68.18 80.2211 68.94C80.7811 69.6867 81.0611 70.8 81.0611 72.28V76.42H81.5811Z" fill="black"/>
<path d="M74.0607 32.0607C74.6464 31.4749 74.6464 30.5251 74.0607 29.9393L64.5147 20.3934C63.9289 19.8076 62.9792 19.8076 62.3934 20.3934C61.8076 20.9792 61.8076 21.9289 62.3934 22.5147L70.8787 31L62.3934 39.4853C61.8076 40.0711 61.8076 41.0208 62.3934 41.6066C62.9792 42.1924 63.9289 42.1924 64.5147 41.6066L74.0607 32.0607ZM23 32.5H73V29.5H23V32.5Z" fill="black"/>
<path d="M21.9393 86.9393C21.3536 87.5251 21.3536 88.4749 21.9393 89.0607L31.4853 98.6066C32.0711 99.1924 33.0208 99.1924 33.6066 98.6066C34.1924 98.0208 34.1924 97.0711 33.6066 96.4853L25.1213 88L33.6066 79.5147C34.1924 78.9289 34.1924 77.9792 33.6066 77.3934C33.0208 76.8076 32.0711 76.8076 31.4853 77.3934L21.9393 86.9393ZM73 86.5H23V89.5H73V86.5Z" fill="black"/>
</svg>

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = "npcomplete.testnet";

function getConfig(env) {
  switch (env) {
    case "production":
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "development":
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    case "betanet":
      return {
        networkId: "betanet",
        nodeUrl: "https://rpc.betanet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.betanet.near.org",
        helperUrl: "https://helper.betanet.near.org",
        explorerUrl: "https://explorer.betanet.near.org",
      };
    case "local":
      return {
        networkId: "local",
        nodeUrl: "http://localhost:3030",
        keyPath: `${process.env.HOME}/.near/testnet/npcomplete-testnet.json`,
        walletUrl: "http://localhost:4000/wallet",
        contractName: CONTRACT_NAME,
      };
    case "test":
    case "ci":
      return {
        networkId: "shared-test",
        nodeUrl: "https://rpc.ci-testnet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    case "ci-betanet":
      return {
        networkId: "shared-test-staging",
        nodeUrl: "https://rpc.ci-betanet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      );
  }
}

module.exports = getConfig;

'''
'''--- src/global.css ---
* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 25em;
}

h1 {
  background-image: url(assets/logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0.5em;
  text-align: center;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button, button[disabled] {
  box-shadow: none;
  background-color: var(--light-gray);
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}
@keyframes loader {
  0% { transform: rotate(0deg) }
  100% { transform: rotate(360deg) }
}

fieldset {
  border: none;
  padding: 2em 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: var(--success);
}
aside footer *:last-child {
  color: var(--gray);
}
@keyframes notify {
  0% { transform: translateY(10em) }
  5% { transform: translateY(0) }
  95% { transform: translateY(0) }
  100% { transform: translateY(10em) }
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(assets/logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import {
  connect,
  Contract,
  keyStores,
  WalletConnection,
  utils,
} from "near-api-js";
import getConfig from "./config";

const nearConfig = getConfig(process.env.NODE_ENV || "development");

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearConfig
    )
  );

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near);

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId();

  window.utils = utils;

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
      // View methods are read only. They don't modify the state, but usually return some value.
      viewMethods: ["get_memos"],
      // Change methods can modify the state. But you don't receive the returned value when called.
      changeMethods: ["add_memo", "transfer_money"],
    }
  );
}

export function logout() {
  window.walletConnection.signOut();
  // reload page
  window.location.replace(window.location.origin + window.location.pathname);
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account npcomplete.testnet --masterAccount npcomplete.testnet --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''