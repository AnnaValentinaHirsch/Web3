*GitHub Repository "NEARFoundation/trulioo-app"*

'''--- .vscode/settings.json ---
{
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true,
  },
  "editor.formatOnSave": true,
  "eslint.workingDirectories": [
    "./server", 
    "./ui"
],
}
'''
'''--- README.md ---
# trulioo-app

Frontend and backend for Trulioo KYC

## Requirements

- node.js > v14
- yarn
- mongodb
  - Optional: [MongoDB Compass](https://www.mongodb.com/try/download/compass) (In “Version” dropdown, you can choose Readonly)
- For development: a tunnel tool such as [localtunnel](https://github.com/localtunnel/localtunnel) or [ngrok](https://ngrok.com/download)

## Installation

```sh
# 1. Make sure the required dependencies above are installed, and that mongodb is running. There seems to be no setup or data population required.

# 2. Run the following command
cp server/.env.dist server/.env

# 3. Edit values in `server/.env`. See https://my.1password.com/vaults/if2irxw2lpt6pd7h4t6ietepty/allitems/a5ryfgfk4eja6kmyjusnirl56q.

# 4. Install dependencies with the following commands
cd server && yarn install
cd ../ui && yarn install
```

## Development

```sh
# 1. You might need to disable your firewall.

# 2. Run a tunneling command so that your local server will have a publicly-accessible URL using https. You can choose whatever you want for the subdomain, and the localtunnel service will attempt to honor your request. But ngrok might be more reliable than localtunnel, so try ngrok if any part of the flow doesn't work on localtunnel.
npx localtunnel --port 8080 --subdomain trulioo

# 3. Copy the URL with https and paste it in server/.env as the value for EXTERNAL_SERVER_URL. E.g. EXTERNAL_SERVER_URL="https://trulioo.loca.lt"

# 4. Run the local dev server via:
yarn dev # or `DISABLE_ESLINT_PLUGIN=true yarn dev`

# Note: you will always need to update EXTERNAL_SERVER_URL in server/.env (such as if localtunnel makes you change your subdomain) and then restart the `yarn dev` command.

# 5. In your browser, visit the URL such as https://trulioo.loca.lt/kyc/secret-create-url which is determined by your environment variables EXTERNAL_SERVER_URL and GENERIC_CREATE_CODE_TOKEN like this: `${EXTERNAL_SERVER_URL}/kyc/${GENERIC_CREATE_CODE_TOKEN}`. Your server console should also show this URL as a clickable link for your convenience.

```

## How to manually test the flow

As an admin:

1. You need to log in as a special user with certain permissions.
1. Create test entities (see https://trulioo.freshdesk.com/support/solutions/articles/13000009316-how-do-i-create-test-entities-)

As a user:

1. Click "Get Started".
1. Choose "France" as your country.
1. Fill out the form with values that match a test entity, such as: first name "San", last name "Holo", and DOB 01-01-2000. (Yes, it's "Han Solo" misspelled, and yes you're providing a date of birth even though that field isn't marked as required.) You can use any other (fake) data for the other required fields and leave optional fields blank.
1. Use your phone to visit the QR code's website.
1. Take a photo of a passport such as https://www.pinterest.com/pin/buy-your-real-passportsid-cardsvisasdrivers-licensessnieltstoefl-and-scan-onlinecontact-us-o--1078541810733589539/ It will likely say "document not recognized" and will allow you to take the photo again manually, which you should.

## TODO

Throughout the repo, find places where Eslint was disabled. Re-enable Eslint, and fix the issues.

'''
'''--- docker/docker-compose.yml ---
version: "3.8"

services:
  mongodb:
    image: mongo:5.0.2
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD
    ports:
      - "${MONGODB_DOCKER_PORT}:${MONGODB_LOCAL_PORT}"
    volumes:
      - db:/data/db
  server:
    image: ivaniuk17/near-labs:trulioo_app_0.1.0
    depends_on:
      - mongodb
    restart: always
    volumes:
      - "${CRT_PATH}:${CRT_PATH}"
    ports:
      - "${APP_DOCKER_PORT}:${APP_LOCAL_PORT_HTTPS}"
    environment:
      - MONGO
      - APP_LOCAL_PORT_HTTP
      - APP_LOCAL_PORT_HTTPS
      - X_TRULIOO_API_KEY
      - TRULIOO_PUBLIC_KEY
      - TRULIOO_PRODUCTION
      - EXTERNAL_SERVER_URL
      - USE_SSL
      - CRT_PATH
      - COMPLETE_PROCESS_REDIRECT_URL
    stdin_open: true
    tty: true

volumes:
  db:

'''
'''--- package.json ---
{
  "name": "trulioo-app",
  "version": "1.0.0",
  "description": "Trulioo KYC module",
  "scripts": {
    "dev": "(yarn build:ui) && (cd server && yarn dev)",
    "build:ui": "./scripts/build_ui.sh",
    "postinstall": "(cd ui && yarn install) && (cd server && yarn install)",
    "lint": "cd server && yarn lint && cd ../ui && yarn lint"
  }
}

'''
'''--- scripts/build_ui.sh ---
#!/bin/bash

cd ui
rm -rf build
yarn build
cd ../server/public
rm -rf $(find . -name "*" ! -name ".gitignore")
cp -R ../../ui/build/* ./

'''
'''--- server/package.json ---
{
  "dependencies": {
    "axios": "^0.26.1",
    "dotenv": "^16.0.1",
    "express": "^4.18.1",
    "fs": "^0.0.1-security",
    "helmet": "^5.1.0",
    "https": "^1.0.0",
    "mongoose": "^6.3.4",
    "node-cron": "^3.0.0",
    "uuid": "^8.3.2"
  },
  "description": "",
  "devDependencies": {
    "@nearfoundation/near-prettier-config": "^1.0.1",
    "eslint": "^8.22.0",
    "eslint-config-near": "^1.0.1",
    "nodemon": "^2.0.16",
    "prettier": "^2.7.1"
  },
  "main": "src/index.js",
  "name": "api.trulioo-app",
  "prettier": "@nearfoundation/near-prettier-config",
  "scripts": {
    "dev": "nodemon -r dotenv/config src/index.js",
    "lint": "eslint \"./src/**/*.{js,jsx,ts,tsx,md,json}\" || exit 0",
    "start": "node src/index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "type": "module",
  "version": "1.0.0"
}

'''
'''--- server/src/config/app.config.js ---
export const completeProcessRedirectUrl = process.env.COMPLETE_PROCESS_REDIRECT_URL;
export const MONGO = process.env.MONGO;
export const USE_SSL = process.env.USE_SSL ?? 'true';
export const PORT_HTTP = process.env.APP_LOCAL_PORT_HTTP ?? 8_080;
export const PORT_HTTPS = process.env.APP_LOCAL_PORT_HTTPS ?? 8_443;
export const NODE_ENV = process.env.NODE_ENV ?? 'development';
export const CRT_PATH = process.env.CRT_PATH;

'''
'''--- server/src/config/cron.config.js ---
// Document verification status update schedule
// eslint-disable-next-line unicorn/prevent-abbreviations
export const docVStatusUpdateSchedule = process.env.DOCV_STATUS_UPDATE_SCHEDULE || '*/1 * * * *';
// Delay before starting status check (in seconds)
export const delayBeforeStartCheck = process.env.DELAY_BEFORE_START_STATUS_CHECK || 60;
// Maximum search depth for verification start date (in hours)
export const maxSearchDept = process.env.MAX_SEARCH_DEPT_FOR_START_DATE || 96;
// Transaction status update schedule
export const transactionStatusUpdateSchedule = process.env.TX_STATUS_UPDATE_SCHEDULE || '*/5 * * * *';

'''
'''--- server/src/config/trulioo.config.js ---
import axios from 'axios';

const TRULIOO_BASE_URL = process.env.TRULIOO_PRODUCTION === 'true' ? 'https://gateway.trulioo.com/live' : 'https://gateway.trulioo.com/trial';
export const LINK_DAYS_BEFORE_EXPIRATION = process.env.LINK_DAYS_BEFORE_EXPIRATION || 7;
export const ASYNC_CALLBACK_URL = `api/send-check-result`;
export const EXTERNAL_SERVER_URL = `${process.env.EXTERNAL_SERVER_URL}`;
export const EMBED_ID_TOKEN_URL = `https://api-gateway-admin.trulioo.com/embedids/tokens`;
export const EXPERIENCE_TRANSACTION_URL = 'https://gateway.trulioo.com/experienceTransaction';
export const GENERIC_CREATE_CODE_TOKEN = process.env.GENERIC_CREATE_CODE_TOKEN;
export const truliooApiKey = process.env.X_TRULIOO_API_KEY;
export const truliooPublicKey = process.env.TRULIOO_PUBLIC_KEY;
export const ipAddressAllowList = process.env.IP_ADDRESS_ALLOW_LIST.split(',');

export const truliooInstance = axios.create({
  baseURL: TRULIOO_BASE_URL,
  timeout: 10_000,
  headers: { 'x-trulioo-api-key': truliooApiKey },
});

'''
'''--- server/src/helpers/codeUtils.js ---
/* eslint-disable import/extensions */
import { Code } from '../models/Code.js';
import { findLastSession } from '../services/sessionService/findLastSession.js';

import { createUniqueId } from './createUniqueId.js';

export const checkCode = async (request) => {
  const code = request.params.code;
  if (!code) {
    return false;
  }

  const storedCode = await Code.findOne({ code });
  const applicant = await findLastSession(code);
  return storedCode !== null && new Date() < storedCode.expiryDate && (storedCode.enabled || (applicant && applicant.status === 'document_verification_completed'));
};

export const invalidCode = (response) => {
  return response.status(404).send({ error: 'This URL is incorrect or has been used before' });
};

export const createNewCode = async (expiryDate) => {
  const codeTimestamp = new Date();
  if (!expiryDate || codeTimestamp > expiryDate) {
    throw new Error('The expiration date cannot be less than the current date.');
  }

  let code = createUniqueId();
  let attempts = 1;
  let storedCode = await Code.findOne({ code });
  while (storedCode) {
    attempts++;
    if (attempts > 3) {
      throw new Error('Unable to generate new code, please try again.');
    }

    code = createUniqueId();
    storedCode = await Code.findOne({ code });
  }

  const codeEntity = new Code({
    code,
    codeTimestamp: new Date(),
    expiryDate: new Date(expiryDate),
    enabled: true,
  });
  await codeEntity.save();
  console.log('codeEntity.code: ', code);
  return codeEntity;
};

export const disableCode = async (code) => {
  const storedCode = await Code.findOne({ code });
  if (!storedCode) {
    throw new Error('Code not found.');
  }

  storedCode.enabled = false;
  await storedCode.save();
};

'''
'''--- server/src/helpers/createUniqueId.js ---
import { v4 as uuidv4 } from 'uuid';

export const createUniqueId = () => {
  return uuidv4().toString().replaceAll('-', '');
}

'''
'''--- server/src/helpers/hoursDifference.js ---
export const hoursDifference = (date1, date2) => {
  return Math.abs(date1 - date2) / 3_600_000;
}

'''
'''--- server/src/helpers/loggingRequestAndResponse.js ---
import bodyParser from 'express';

export const rawBody = bodyParser.json({
  verify(request, response, buf) {
    request.rawBody = buf.toString();
  },
});

export const loggingRequestAndResponse = (request, response, next) => {
  if (/\/\w+\/trulioo-api\/\w+/u.test(request.url) || /\/\w+\/api\/\w+/u.test(request.url)) {
    const responseSend = response.send;

    response.send = function (chunk, ...args) {
      if (typeof chunk === 'string') {
        console.log(`${new Date().toISOString()}`);
        console.log(request.path);
        console.log(`Request: ${request.rawBody}`);
        console.log(`Response: ${chunk}`);
        console.log(`__________________`);
      }

      responseSend.apply(response, [chunk, ...args]);
    };
  }

  next();
};

'''
'''--- server/src/index.js ---
/* eslint-disable import/extensions */
import fs from 'fs';
import https from 'https';

import * as dotenv from 'dotenv';
import express from 'express';
import helmet from 'helmet';
import mongoose from 'mongoose';

import { MONGO, PORT_HTTP, PORT_HTTPS, USE_SSL, CRT_PATH, NODE_ENV } from './config/app.config.js';
import { truliooInstance, EXTERNAL_SERVER_URL, GENERIC_CREATE_CODE_TOKEN } from './config/trulioo.config.js';
import { loggingRequestAndResponse, rawBody } from './helpers/loggingRequestAndResponse.js';
import { routes } from './routes/collector.routes.js';
import { createSchedules } from './services/cronSchedule/cronSchedule.js';

dotenv.config();

await mongoose.connect(MONGO);
const app = express();
app.use(rawBody);
app.use(loggingRequestAndResponse);
app.set('trulioo', truliooInstance);

routes(app);
createSchedules(app);

// Set HTTP port
app.listen(PORT_HTTP);

if (USE_SSL === 'true') {
  const crtPath = (CRT_PATH || '~/cert').replace(/\/+$/u, '');
  const options = {
    key: fs.readFileSync(`${crtPath}/server.key`),
    cert: fs.readFileSync(`${crtPath}/server.crt`),
    dhparam: fs.readFileSync(`${crtPath}/dh-strong.pem`),
  };
  app.use(helmet());
  // Set HTTPS port, listen for requests

  https.createServer(options, app).listen(PORT_HTTPS, () => {
    console.log(`Server is running on port ${PORT_HTTPS}.`);
  });
}

if (NODE_ENV === 'development') {
  console.log(`Please visit ${EXTERNAL_SERVER_URL}/kyc/${GENERIC_CREATE_CODE_TOKEN}`); // This logging gets used locally for testing purposes. See README.md for more details.
}

'''
'''--- server/src/models/Applicant.js ---
import mongoose from 'mongoose';

const { Schema, model } = mongoose;

const schema = new Schema({
  sessionId: {
    type: String,
    index: true,
    unique: true,
    required: true,
  },
  code: String,
  sessionTimestamp: Date,
  status: String,
  personInfo: Object,
  location: Object,
  communication: Object,
  identityVerificationTransactionId: String,
  documentVerificationTransactionId: String,
  identityVerificationTransactionRecordId: String,
  documentVerificationTransactionRecordId: String,
  experienceTransactionId: String,
  identityVerificationResult: Object,
  documentVerificationResult: Object,
  identityVerificationVerifyBeginTimestamp: Date,
  identityVerificationVerifyEndTimestamp: Date,
  documentVerificationVerifyBeginTimestamp: Date,
  documentVerificationVerifyEndTimestamp: Date,
  oldSessionId: String,
});
schema.index({ code: 1, oldSessionId: 1 }, { unique: true });
schema.index({ identityVerificationTransactionId: 1 }, { unique: false });
schema.index({ documentVerificationTransactionId: 1 }, { unique: false });
schema.index({ documentVerificationVerifyBeginTimestamp: 1, status: 1, documentVerificationTransactionId: 1 }, { unique: false });

export const Applicant = model('Applicant', schema);

'''
'''--- server/src/models/Code.js ---
import mongoose from 'mongoose';

const { Schema, model } = mongoose;

const schema = new Schema({
  code: {
    type: String,
    index: true,
    unique: true,
    required: true,
  },
  codeTimestamp: Date,
  expiryDate: Date,
  enabled: Boolean
});

export const Code = model('Code', schema);

'''
'''--- server/src/models/Consents.js ---
import mongoose from 'mongoose';

const { Schema, model } = mongoose;

const schema = new Schema({
  country: {
    type: String,
    index: true,
    unique: true,
    required: true,
  },
  consents: Object,
  timestamp: Date
});

export const Consents = model('Consents', schema);
// Hours
export const cacheExpirationPeriod = 24;

'''
'''--- server/src/models/Countries.js ---
import mongoose from 'mongoose';

const { Schema, model } = mongoose;

const schema = new Schema({
  countries: Object,
  timestamp: Date
});

export const Countries = model('Countries', schema);
// Hours
export const cacheExpirationPeriod = 24;

'''
'''--- server/src/models/CountrySubdivisions.js ---
import mongoose from 'mongoose';

const { Schema, model } = mongoose;

const schema = new Schema({
  country: {
    type: String,
    index: true,
    unique: true,
    required: true,
  },
  countrySubdivisions: Object,
  timestamp: Date
});

export const CountrySubdivisions = model('CountrySubdivisions', schema);
// Hours
export const cacheExpirationPeriod = 24;

'''
'''--- server/src/models/Fields.js ---
import mongoose from 'mongoose';

const { Schema, model } = mongoose;

const schema = new Schema({
  country: {
    type: String,
    index: true,
    unique: true,
    required: true,
  },
  fields: Object,
  timestamp: Date
});

export const Fields = model('Fields', schema);
// Hours
export const cacheExpirationPeriod = 24;

'''
'''--- server/src/models/Transaction.js ---
import mongoose from 'mongoose';

const { Schema, model } = mongoose;

const schema = new Schema({
  transactionId: {
    type: String,
    index: true,
    unique: true,
    required: true,
  },
  transactionRecordId: String,
  transactionTimestamp: Date,
  processed: Boolean,
});

schema.index({transactionTimestamp: 1, processed: 1}, {unique: false});

export const Transaction = model('Transaction', schema);

'''
'''--- server/src/routes/collector.routes.js ---
/* eslint-disable import/extensions */
import express from 'express';

import { GENERIC_CREATE_CODE_TOKEN } from '../config/trulioo.config.js';
import { checkResult } from '../services/checkResult/checkResult.js';
import { createCode } from '../services/createCode/createCode.js';
import { documentVerificationStart } from '../services/documentVerificationStart/documentVerificationStart.js';
import { embedIdToken } from '../services/embedIdToken/embedIdToken.js';
import { getConsents } from '../services/getConsents/getConsents.js';
import { getCountryCodes } from '../services/getCountries/getCountryCodes.js';
import { getCountrySubdivisions } from '../services/getCountrySubdivisions/getCountrySubdivisions.js';
import { getFields } from '../services/getFields/getFields.js';
import { getParameters } from '../services/getParameters/getParameters.js';
import { identityVerify } from '../services/identityVerify/identityVerify.js';
import { createSession } from '../services/sessionService/sessionService.js';
import { testAuthentication } from '../services/testAuthentication/testAuthentication.js';

export const routes = (app) => {
  app.get('/:code/api/test-authentication', testAuthentication);
  app.get('/:code/api/get-countries', getCountryCodes);
  app.get('/:code/api/get-fields', getFields);
  app.get('/:code/api/get-consents', getConsents);
  app.get('/:code/api/get-country-subdivisions', getCountrySubdivisions);
  app.get('/:code/api/get-parameters', getParameters);
  app.post('/:code/api/session', createSession);
  app.post('/:code/api/verify', identityVerify);
  app.post('/:code/api/send-check-result', checkResult);
  app.post('/:code/trulioo-api/embedids/tokens/:publicKey', embedIdToken);
  app.post('/:code/api/doc-verify', documentVerificationStart);
  app.use('/:code/', express.static('public'));
  app.get(`/kyc/${GENERIC_CREATE_CODE_TOKEN}`, createCode);
  app.get('*', (request, response) => {
    response.redirect('/error/');
  });
};

'''
'''--- server/src/services/checkResult/checkResult.js ---
/* eslint-disable import/extensions */
import { ipAddressAllowList } from '../../config/trulioo.config.js';
import { checkCode, disableCode, invalidCode } from '../../helpers/codeUtils.js';
import { Applicant } from '../../models/Applicant.js';
import { Transaction } from '../../models/Transaction.js';

/**
 * Searching for Trulioo transactions by TransactionRecordID.
 * See: https://gateway-admin.trulioo.com/documentation/docs#operation/GetTransactionRecord.
 * Updating the status of the applicant for whom identity or document verification has been initiated.
 *
 * @param {*} truliooInstance
 * @param {*} transactionId
 */
export const eventHandling = async (truliooInstance, transactionId) => {
  try {
    console.log(`Handling event: ${transactionId}`);
    const transaction = await Transaction.findOne({ transactionId });

    if (transaction) {
      const transactionRecordId = transaction.transactionRecordId;

      let applicant = await Applicant.findOne({ identityVerificationTransactionId: transactionId });

      if (applicant) {
        // TODO: See if we can refactor to reduce duplication with some code blocks below.
        if (applicant.status === 'identity_verification_in_progress') {
          const response1 = await truliooInstance.get(`/verifications/v1/transactionrecord/${transactionRecordId}`);

          if (response1.data && response1.data.Record) {
            const status = response1.data.Record.RecordStatus;
            applicant.identityVerificationTransactionRecordId = transactionRecordId;
            applicant.identityVerificationResult = response1.data;
            applicant.identityVerificationVerifyEndTimestamp = new Date();
            applicant.status = status === 'match' ? 'identity_verification_completed' : 'identity_verification_failed';
            await applicant.save();

            transaction.processed = true;
            await transaction.save();

            console.log(`The applicant was granted the status: '${applicant.status}'`);
          } else {
            console.log('Invalid query response format.');
          }
        } else {
          console.log("Applicant must have 'identity_verification_in_progress' status.");
        }
      } else {
        applicant = await Applicant.findOne({ documentVerificationTransactionId: transactionId });
        if (applicant) {
          if (applicant.status === 'document_verification_in_progress') {
            const response2 = await truliooInstance.get(`/verifications/v1/transactionrecord/${transactionRecordId}`);

            if (response2.data && response2.data.Record) {
              const status = response2.data.Record.RecordStatus;
              applicant.documentVerificationTransactionRecordId = transactionRecordId;
              applicant.documentVerificationResult = response2.data;
              applicant.documentVerificationVerifyEndTimestamp = new Date();
              applicant.status = status === 'match' ? 'document_verification_completed' : 'document_verification_failed';
              await applicant.save();

              transaction.processed = true;
              await transaction.save();

              if (applicant.status === 'document_verification_completed') {
                await disableCode(applicant.code);
              }

              console.log(`The applicant was granted the status: '${applicant.status}'`);
            } else {
              console.log('Invalid query response format.');
            }
          } else {
            console.log("Applicant must have 'document_verification_in_progress' status.");
          }
        } else {
          console.log('The applicant for the transaction was not found.');
        }
      }
    } else {
      console.log('Transaction not found.');
    }
  } catch (error) {
    console.log('Unknown error:');
    console.log(error);
  }
};

export const createTransaction = async (transactionId, transactionRecordId, truliooInstance) => {
  const transaction = await Transaction.findOne({ transactionId });
  if (transaction) {
    return false;
  }

  await Transaction.create({
    transactionId,
    transactionRecordId,
    transactionTimestamp: new Date(),
    processed: false,
  });

  eventHandling(truliooInstance, transactionId).then();
  return true;
};

export const checkResult = async (request, response) => {
  try {
    const ip = request.headers['x-forwarded-for'] || request.connection.remoteAddress;
    console.log(`IP address ${ip} is trying to access the /:code/api/send-check-result endpoint.`);
    if (!ipAddressAllowList.includes(ip)) {
      console.log(`IP address ${ip} is not allowed to access this endpoint.`);
      return response.status(403).send('Forbidden');
    }

    const checkCodeResult = await checkCode(request);
    if (!checkCodeResult) {
      return invalidCode(response);
    }

    const truliooInstance = request.app.get('trulioo');
    const transactionId = request.body.TransactionId;
    const transactionRecordId = request.body.TransactionRecordId;

    if (transactionId && transactionRecordId && request.body.Status === 'Completed') {
      const txResult = await createTransaction(transactionId, transactionRecordId, truliooInstance);
      if (!txResult) {
        console.log('The transaction has already been processed.');
        return response.send({});
      }
    } else {
      console.log('This event is being ignored.');
    }

    response.send({});
  } catch (error) {
    console.log('Webhook error:');
    console.log(error);
    response.status(500).send({ error: 'Internal server error. Please try again later.' });
  }
};

'''
'''--- server/src/services/createCode/createCode.js ---
/* eslint-disable import/extensions */
import { EXTERNAL_SERVER_URL, LINK_DAYS_BEFORE_EXPIRATION } from '../../config/trulioo.config.js';
import { createNewCode } from '../../helpers/codeUtils.js';

export const createCode = async (request, response) => {
  try {
    console.log(`Creating a new URL with expiration days: ${LINK_DAYS_BEFORE_EXPIRATION}`);
    const expiryDate = new Date();
    expiryDate.setDate(expiryDate.getDate() + LINK_DAYS_BEFORE_EXPIRATION);
    const codeEntity = await createNewCode(expiryDate);
    const url = `${EXTERNAL_SERVER_URL}/${codeEntity.code}`;
    response.redirect(url);
  } catch (error) {
    console.log(error);
    response.status(500).send({ error: 'Could not create a KYC link' });
  }
};

'''
'''--- server/src/services/cronSchedule/cronSchedule.js ---
/* eslint-disable import/extensions */
import axios from 'axios';
import cron from 'node-cron';

import { delayBeforeStartCheck, docVStatusUpdateSchedule as documentVStatusUpdateSchedule, maxSearchDept, transactionStatusUpdateSchedule } from '../../config/cron.config.js';
import { EXPERIENCE_TRANSACTION_URL, truliooApiKey } from '../../config/trulioo.config.js';
import { Applicant } from '../../models/Applicant.js';
import { Transaction } from '../../models/Transaction.js';
import { createTransaction, eventHandling } from '../checkResult/checkResult.js';

const fetchTransaction = async (txId) => {
  console.log(`Transaction ID ${txId}`);
  const response = await axios.get(`${EXPERIENCE_TRANSACTION_URL}/${txId}`, {
    headers: {
      'x-trulioo-api-key': truliooApiKey,
    },
  });

  const status = response.data ? response.data.status : 'unknown';
  console.log(`Status: ${status}`);

  return { status, steps: response?.data?.steps };
};

/**
 * TODO: Document how steps work and why this function is necessary.
 * See: https://gateway-admin.trulioo.com/documentation/embedid#5.-understanding-the-verification-response
 *
 * @param {Array} steps
 * @returns {object}
 */
// eslint-disable-next-line unicorn/prevent-abbreviations
const getEmbedIDDocVStep = (steps) => {
  return steps.find((element) => {
    return element.transactionType === 'EmbedID' && element.stepName === 'DocVStep';
  });
};

/**
 * Create a document verification transaction and update the transaction ID for the applicant.
 *
 * @param {*} truliooInstance
 * @param {*} applicant
 * @param {*} step
 */

const createDocumentVerificationTransactionAndUpdateId = async (truliooInstance, applicant, step) => {
  const { transactionId, transactionRecordId } = step;

  if (transactionId && transactionRecordId) {
    await Applicant.findOneAndUpdate({ _id: applicant._id }, { documentVerificationTransactionId: transactionId });

    const txResult = await createTransaction(transactionId, transactionRecordId, truliooInstance);
    if (txResult) {
      console.log('The transaction was successfully created.');
    } else {
      console.log('The transaction has already been processed.');
    }
  }
};

/**
 * Processing of applicants for whom a document check has been initiated to find data on completed trulioo transactions.
 * TODO: Clarify what this means.
 *
 * @param {Express app?} app
 */
async function updateDocumentVStatuses(app) {
  try {
    const truliooInstance = app.get('trulioo');
    const dateBegin = new Date(Date.now() - maxSearchDept * 60 * 60 * 1_000);
    const dateEnd = new Date(Date.now() - delayBeforeStartCheck * 1_000);
    const applicants = await Applicant.find({
      documentVerificationVerifyBeginTimestamp: { $lt: dateEnd, $gte: dateBegin },
      status: { $eq: 'document_verification_in_progress' },
      documentVerificationTransactionId: { $eq: null },
    });

    applicants.map(async (applicant) => {
      try {
        const txId = applicant.experienceTransactionId;
        const { status, steps } = await fetchTransaction(txId);

        if (status === 'complete' && steps) {
          const step = getEmbedIDDocVStep(steps);

          if (step) {
            await createDocumentVerificationTransactionAndUpdateId(truliooInstance, applicant, step);
          }
        }
      } catch (error) {
        console.log(error);
      }
    });
  } catch (error) {
    console.log(error);
  }
}

async function updateTxStatuses(app) {
  try {
    const truliooInstance = app.get('trulioo');
    const dateBegin = new Date(Date.now() - maxSearchDept * 60 * 60 * 1_000);
    const dateEnd = new Date(Date.now() - delayBeforeStartCheck * 1_000);
    const transactions = await Transaction.find({
      transactionTimestamp: { $lt: dateEnd, $gte: dateBegin },
      processed: { $eq: false },
    });

    transactions.map(async (tx) => {
      await eventHandling(truliooInstance, tx.transactionId);
    });
  } catch (error) {
    console.log(error);
  }
}

export const createSchedules = (app) => {
  cron.schedule(
    documentVStatusUpdateSchedule,
    async () => {
      await updateDocumentVStatuses(app);
    },
    { scheduled: true },
  );
  cron.schedule(
    transactionStatusUpdateSchedule,
    async () => {
      await updateTxStatuses(app);
    },
    { scheduled: true },
  );
};

'''
'''--- server/src/services/documentVerificationStart/documentVerificationStart.js ---
/* eslint-disable import/extensions */
import { checkCode, invalidCode } from '../../helpers/codeUtils.js';
import { checkSession } from '../sessionService/sessionService.js';

export const documentVerificationStart = async (request, response) => {
  try {
    const checkResult = await checkCode(request);
    if (!checkResult) {
      return invalidCode(response);
    }

    const { sessionFailed, applicant } = await checkSession(request, response, 'identity_verification_completed');
    if (sessionFailed) {
      return sessionFailed;
    }

    const { experienceTransactionId, status } = request.body;
    if (status !== 200 || !experienceTransactionId) {
      return response.status(400).send({ error: 'Document verification has not started.' });
    }

    applicant.status = 'document_verification_in_progress';
    applicant.experienceTransactionId = experienceTransactionId;
    applicant.documentVerificationVerifyBeginTimestamp = new Date();
    await applicant.save();

    response.send({ status: applicant.status });
  } catch (error) {
    console.log(error);
    response.status(500).send({ error: 'Failed to start verification. Please try again.' });
  }
};

'''
'''--- server/src/services/embedIdToken/embedIdToken.js ---
/* eslint-disable import/extensions */
import axios from 'axios';

import { EMBED_ID_TOKEN_URL, truliooApiKey } from '../../config/trulioo.config.js';
import { checkCode, invalidCode } from '../../helpers/codeUtils.js';

export const embedIdToken = async (request, response) => {
  try {
    const checkResult = await checkCode(request);
    if (!checkResult) {
      return invalidCode(response);
    }

    const responseToSend = await axios.post(
      EMBED_ID_TOKEN_URL,
      {
        publicKey: request.params.publicKey,
      },
      {
        headers: {
          'x-trulioo-api-key': truliooApiKey,
          'Content-Type': 'application/json',
          'cache-control': 'no-cache',
        },
      },
    );
    response.send(responseToSend.data);
  } catch (error) {
    console.log(error);
    response.status(401).send({ error: 'Unable to create EmbedID token at this time. Please try again.' });
  }
};

'''
'''--- server/src/services/getConsents/getConsents.js ---
/* eslint-disable import/extensions */
import { checkCode, invalidCode } from '../../helpers/codeUtils.js';
import { hoursDifference } from '../../helpers/hoursDifference.js';
import { cacheExpirationPeriod, Consents } from '../../models/Consents.js';

export const getConsents = async (request, response) => {
  try {
    const checkResult = await checkCode(request);
    if (!checkResult) {
      return invalidCode(response);
    }

    const { country } = request.query;
    let consentsRecord = await Consents.findOne({ country });
    if (consentsRecord && hoursDifference(new Date(), consentsRecord.timestamp) < cacheExpirationPeriod) {
      response.send(consentsRecord.consents);
    } else {
      const consents = await getConsentsFromTrulioo(country, request.app.get('trulioo'));
      if (!consentsRecord) {
        consentsRecord = new Consents({ country });
      }

      consentsRecord.consents = consents;
      consentsRecord.timestamp = new Date();
      consentsRecord.save();
      response.send(consents);
    }
  } catch (error) {
    console.log(error);
    response.status(500).send({ error: 'The list of consents cannot be obtained. Please try again.' });
  }
};

async function getConsentsFromTrulioo(country, truliooInstance) {
  const response = await truliooInstance.get(`/configuration/v1/consents/Identity%20Verification/${country}`);
  return response.data;
}

'''
'''--- server/src/services/getCountries/getCountryCodes.js ---
/* eslint-disable import/extensions */
import { checkCode, invalidCode } from '../../helpers/codeUtils.js';
import { hoursDifference } from '../../helpers/hoursDifference.js';
import { cacheExpirationPeriod, Countries } from '../../models/Countries.js';

export const getCountryCodes = async (request, response) => {
  try {
    const checkResult = await checkCode(request);
    if (!checkResult) {
      return invalidCode(response);
    }

    let countriesRecord = await Countries.findOne({});
    if (countriesRecord && hoursDifference(new Date(), countriesRecord.timestamp) < cacheExpirationPeriod) {
      response.send(countriesRecord.countries);
    } else {
      const countries = await getCountriesFromTrulioo(request.app.get('trulioo'));
      if (!countriesRecord) {
        countriesRecord = new Countries({});
      }

      countriesRecord.countries = countries;
      countriesRecord.timestamp = new Date();
      countriesRecord.save();
      response.send(countries);
    }
  } catch (error) {
    console.log(error);
    response.status(500).send({ error: 'The list of countries cannot be obtained. Please try again.' });
  }
};

async function getCountriesFromTrulioo(truliooInstance) {
  const response = await truliooInstance.get(`/configuration/v1/countrycodes/Identity%20Verification`);
  return response.data;
}

'''
'''--- server/src/services/getCountrySubdivisions/getCountrySubdivisions.js ---
/* eslint-disable import/extensions */
import { checkCode, invalidCode } from '../../helpers/codeUtils.js';
import { hoursDifference } from '../../helpers/hoursDifference.js';
import { cacheExpirationPeriod, CountrySubdivisions } from '../../models/CountrySubdivisions.js';

export const getCountrySubdivisions = async (request, response) => {
  try {
    const checkResult = await checkCode(request);
    if (!checkResult) {
      return invalidCode(response);
    }

    const { country } = request.query;
    let countrySubdivisionsRecord = await CountrySubdivisions.findOne({ country });
    if (countrySubdivisionsRecord && hoursDifference(new Date(), countrySubdivisionsRecord.timestamp) < cacheExpirationPeriod) {
      response.send(countrySubdivisionsRecord.countrySubdivisions);
    } else {
      const countrySubdivisions = await getCountrySubdivisionsFromTrulioo(country, request.app.get('trulioo'));
      if (!countrySubdivisionsRecord) {
        countrySubdivisionsRecord = new CountrySubdivisions({ country });
      }

      countrySubdivisionsRecord.countrySubdivisions = countrySubdivisions;
      countrySubdivisionsRecord.timestamp = new Date();
      countrySubdivisionsRecord.save();
      response.send(countrySubdivisions);
    }
  } catch (error) {
    console.log(error);
    response.status(500).send({ error: 'The list of subdivisions cannot be obtained. Please try again.' });
  }
};

async function getCountrySubdivisionsFromTrulioo(country, truliooInstance) {
  const response = await truliooInstance.get(`/configuration/v1/countrysubdivisions/${country}`);
  return response.data;
}

'''
'''--- server/src/services/getFields/getFields.js ---
/* eslint-disable import/extensions */
import { checkCode, invalidCode } from '../../helpers/codeUtils.js';
import { hoursDifference } from '../../helpers/hoursDifference.js';
import { cacheExpirationPeriod, Fields } from '../../models/Fields.js';

export const getFields = async (request, response) => {
  try {
    const checkResult = await checkCode(request);
    if (!checkResult) {
      return invalidCode(response);
    }

    const { country } = request.query;
    let fieldsRecord = await Fields.findOne({ country });
    if (fieldsRecord && hoursDifference(new Date(), fieldsRecord.timestamp) < cacheExpirationPeriod) {
      response.send(fieldsRecord.fields);
    } else {
      const fields = await getFieldsFromTrulioo(country, request.app.get('trulioo'));
      if (!fieldsRecord) {
        fieldsRecord = new Fields({ country });
      }

      fieldsRecord.fields = fields;
      fieldsRecord.timestamp = new Date();
      fieldsRecord.save();
      response.send(fields);
    }
  } catch (error) {
    console.log(error);
    response.status(500).send({ error: 'The list of fields cannot be obtained. Please try again.' });
  }
};

function checkFieldsData(data) {
  // The required field for missing fields must be removed
  if (data && data.properties) {
    for (const [groupId, group] of Object.entries(data.properties)) {
      if (group && group.required) {
        const newRequired = [];
        // eslint-disable-next-line array-callback-return
        group.required.map((item) => {
          if (group.properties[item]) {
            newRequired.push(item);
          }
        });
        data.properties[groupId].required = newRequired;
      }
    }
  }

  return data;
}

async function getFieldsFromTrulioo(country, truliooInstance) {
  const response = await truliooInstance.get(`/configuration/v1/recommendedfields/Identity%20Verification/${country}`);
  return checkFieldsData(response.data);
}

'''
'''--- server/src/services/getParameters/getParameters.js ---
/* eslint-disable import/extensions */
import { completeProcessRedirectUrl } from '../../config/app.config.js';
import { truliooPublicKey } from '../../config/trulioo.config.js';
import { checkCode, invalidCode } from '../../helpers/codeUtils.js';

export const getParameters = async (request, response) => {
  try {
    const checkResult = await checkCode(request);
    if (!checkResult) {
      return invalidCode(response);
    }

    response.send({
      trulioo_public_key: truliooPublicKey,
      finish_redirect_url: completeProcessRedirectUrl,
    });
  } catch (error) {
    console.log(error);
    response.status(500).send({ error: 'The parameters cannot be obtained. Please try again.' });
  }
};

'''
'''--- server/src/services/identityVerify/identityVerify.js ---
/* eslint-disable import/extensions */
import { ASYNC_CALLBACK_URL, EXTERNAL_SERVER_URL } from '../../config/trulioo.config.js';
import { checkCode, invalidCode } from '../../helpers/codeUtils.js';
import { checkSession } from '../sessionService/sessionService.js';

export const identityVerify = async (request, response) => {
  try {
    const checkResult = await checkCode(request);
    if (!checkResult) {
      return invalidCode(response);
    }

    const { sessionFailed, applicant } = await checkSession(request, response, 'new');
    if (sessionFailed) {
      return sessionFailed;
    }

    const { country, consents, fields } = request.body;
    const truliooInstance = request.app.get('trulioo');

    const truliooResponse = await truliooInstance.post(
      `/verifications/v1/verify`,
      {
        AcceptTruliooTermsAndConditions: true,
        CleansedAddress: false,
        ConfigurationName: 'Identity Verification',
        CallBackUrl: `${EXTERNAL_SERVER_URL}/${request.params.code}/${ASYNC_CALLBACK_URL}`,
        ConsentForDataSources: consents,
        CountryCode: country,
        DataFields: fields,
      },
      {
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );

    applicant.status = 'identity_verification_in_progress';
    applicant.personInfo = fields.PersonInfo;
    applicant.location = fields.Location;
    applicant.communication = fields.Communication;
    applicant.identityVerificationTransactionId = truliooResponse.data.TransactionID;
    applicant.identityVerificationVerifyBeginTimestamp = new Date();
    await applicant.save();

    response.send({ status: applicant.status });
  } catch (error) {
    console.log(error);
    response.status(500).send({ error: 'Failed to start verification. Please try again.' });
  }
};

'''
'''--- server/src/services/sessionService/findLastSession.js ---
/* eslint-disable import/extensions */
import { findNextSession } from './findNextSession.js';

export const findLastSession = async (code) => {
  let session = await findNextSession(code, null);
  let nextSession = session ? await findNextSession(code, session.sessionId) : null;
  while (nextSession && session.sessionId !== nextSession.sessionId) {
    session = nextSession;
    nextSession = await findNextSession(code, session.sessionId);
  }

  return session;
};

'''
'''--- server/src/services/sessionService/findNextSession.js ---
/* eslint-disable import/extensions */
import { Applicant } from '../../models/Applicant.js';

export const findNextSession = async (code, oldSessionId = null) => {
  return Applicant.findOne({ code, oldSessionId: { $eq: oldSessionId } });
};

'''
'''--- server/src/services/sessionService/sessionService.js ---
/* eslint-disable import/extensions */
import { checkCode, invalidCode } from '../../helpers/codeUtils.js';
import { createUniqueId } from '../../helpers/createUniqueId.js';
import { Applicant } from '../../models/Applicant.js';

import { findLastSession } from './findLastSession.js';
import { findNextSession } from './findNextSession.js';

export const createSession = async (request, response) => {
  try {
    let sessionId = request.body.session_id;
    const forced = request.body.forced;
    const code = request.params.code;

    const checkCodeResult = await checkCode(request);
    if (!checkCodeResult) {
      return invalidCode(response);
    }

    if (!sessionId && forced) {
      return response.status(400).send({ error: 'Session ID cannot be empty.' });
    }

    let applicant = await findLastSession(code);
    if (applicant) {
      if (applicant.status !== 'new') {
        if (sessionId) {
          if (sessionId !== applicant.sessionId) {
            return response.status(400).send({ error: 'This URL can only be used from the browser of the computer on which the session was started earlier.' });
          }
        } else {
          return response.status(400).send({ error: 'The session for this URL is already registered in another browser or on another computer.' });
        }
      } else if (sessionId !== applicant.sessionId) {
        applicant = await updateSessionId(applicant.sessionId);
        sessionId = applicant.sessionId;
      }

      if (forced) {
        applicant = await createApplicant(code, sessionId);
      }
    } else {
      applicant = await createApplicant(code);
    }

    response.send({ session_id: applicant.sessionId, status: applicant.status });
  } catch (error) {
    console.log(error);
    response.status(500).send({ error: 'Session not registered. Please try again later.' });
  }
};

async function createApplicant(code, oldSessionId = null) {
  const sessionId = createUniqueId();
  const applicant = new Applicant({
    sessionId,
    code,
    sessionTimestamp: new Date(),
    status: 'new',
    oldSessionId,
  });
  await applicant.save();
  return applicant;
}

async function updateSessionId(sessionId) {
  const applicant = await Applicant.findOne({ sessionId });
  if (applicant) {
    applicant.sessionId = createUniqueId();
    applicant.save();
  }

  return applicant;
}

export const checkSession = async (request, response, expectedStatus) => {
  let sessionFailed = false;
  let applicant = null;
  const sessionId = request.body.session_id;
  if (sessionId) {
    applicant = await Applicant.findOne({ sessionId });
    if (applicant) {
      const code = request.params.code;
      if (code === applicant.code) {
        const nextSession = await findNextSession(code, sessionId);
        if (nextSession) {
          response.status(400).send({ error: 'This session ID is no longer valid.' });
          sessionFailed = true;
        } else if (applicant.status !== expectedStatus) {
          response.status(400).send({ error: 'Verification cannot be performed at this stage.' });
          sessionFailed = true;
        }
      } else {
        response.status(400).send({ error: 'Invalid session ID.' });
        sessionFailed = true;
      }
    } else {
      response.status(400).send({ error: 'Session not found.' });
      sessionFailed = true;
    }
  } else {
    response.status(400).send({ error: 'Session ID cannot be empty.' });
    sessionFailed = true;
  }

  return { sessionFailed, applicant };
};

'''
'''--- server/src/services/testAuthentication/testAuthentication.js ---
/* eslint-disable import/extensions */
import { checkCode, invalidCode } from '../../helpers/codeUtils.js';

export const testAuthentication = async (request, response) => {
  try {
    const checkResult = await checkCode(request);
    if (!checkResult) {
      return invalidCode(response);
    }

    const truliooInstance = request.app.get('trulioo');
    await truliooInstance.get(`/connection/v1/testauthentication`);
    response.send({ result: true });
  } catch (error) {
    console.log(error);
    response.send({ result: false });
  }
};

'''
'''--- ui/.eslintrc.js ---
/* TODO: Discuss whether our shared Eslint rules should be updated such that we won't need to define these overrides. 
Also, we should add to that library:
    // https://eslint.org/docs/rules/max-lines
    'max-lines': ['error', { max: 300, skipBlankLines: true, skipComments: true }],

    // https://eslint.org/docs/rules/max-lines-per-function
    'max-lines-per-function': ['error', { max: 30, skipBlankLines: true, skipComments: true }],
*/

/* eslint-env node */

module.exports = {
  // TODO: Shouldn't 'plugin:react/recommended' already be part of eslint-config-near?
  extends: ['near', 'plugin:react/recommended'], // See https://github.com/NEAR-Edu/eslint-config-near/blob/main/package.json
  globals: {
    console: true,
    document: true,
    process: true,
    window: true,
  },
  rules: {
    'canonical/sort-keys': 'off',
    'jsonc/sort-keys': 'off',
    'no-console': 'off',
  },
};

'''
'''--- ui/package.json ---
{
  "name": "ui.trulioo-app",
  "version": "0.1.0",
  "private": true,
  "homepage": ".",
  "dependencies": {
    "@emotion/react": "^11.9.0",
    "@emotion/styled": "^11.8.1",
    "@hookform/error-message": "^2.0.0",
    "@hookform/resolvers": "^2.8.10",
    "@mui/icons-material": "^5.8.0",
    "@mui/lab": "^5.0.0-alpha.83",
    "@mui/material": "^5.8.1",
    "@mui/styles": "^5.8.0",
    "@rjsf/core": "^4.2.0",
    "@rjsf/material-ui": "^4.2.0",
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.2.0",
    "@testing-library/user-event": "^13.5.0",
    "easy-peasy": "^5.0.4",
    "i18n-iso-countries": "^7.4.0",
    "ky": "^0.30.0",
    "ramda": "^0.28.0",
    "react": "^18.1.0",
    "react-dom": "^18.1.0",
    "react-hook-form": "^7.31.2",
    "react-router-dom": "^6.3.0",
    "react-spinners-kit": "^1.9.1",
    "web-vitals": "^2.1.4",
    "yup": "^0.32.11"
  },
  "prettier": "@nearfoundation/near-prettier-config",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "build:staging": "env-cmd -f .env.staging react-scripts build",
    "build:production": "env-cmd -f .env.production react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "lint": "eslint \"./src/**/*.{js,jsx,ts,tsx,md,json}\" || exit 0",
    "format": "prettier --write  src//**/*.{js,jsx,ts,tsx,css,md,json} --config ./.prettierrc"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/preset-react": "^7.18.6",
    "@nearfoundation/near-prettier-config": "^1.0.1",
    "env-cmd": "^10.1.0",
    "eslint": "^8.22.0",
    "eslint-config-near": "^1.0.1",
    "prettier": "^2.7.1",
    "react-scripts": "^5.0.1"
  }
}

'''
'''--- ui/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="NEAR KYC APP"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>NEAR KYC</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- ui/public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- ui/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- ui/src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- ui/src/App.test.js ---
/* eslint-disable no-undef */
/* eslint-disable react/react-in-jsx-scope */
import { render, screen } from '@testing-library/react';

import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/iu);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- ui/src/components/AppError/AppError.styles.js ---
import makeStyles from '@mui/styles/makeStyles';

const styles = (theme) => ({
  root: {
    width: '100%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'space-between',
    height: '100%',
    backgroundColor: '#f7f7f7',
  },
  container: {
    maxWidth: '100%',
    width: 560,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    paddingTop: theme.spacing(5),
    paddingBottom: theme.spacing(5),
    marginTop: theme.spacing(8),
    background: '#fff',
    marginLeft: theme.spacing(2),
    marginRight: theme.spacing(2),
  },
  form: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
  },
  img: {
    width: 72,
    height: 72,
  },
  formHeader: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    gap: theme.spacing(2),
    marginTop: theme.spacing(3),
    marginBottom: theme.spacing(3),
  },
  formTitle: {
    fontSize: '20px !important',
    fontWeight: '700 !important',
  },
  formDescription: {
    color: '#555',
    paddingLeft: theme.spacing(4),
    paddingRight: theme.spacing(4),
    textAlign: 'center',
    fontSize: '16px !important',
  },
  formFooter: {
    width: '100%',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    paddingBottom: 16,
    paddingTop: 16,
    backgroundColor: '#fff',
  },
  button: {
    paddingRight: '49px !important',
    paddingLeft: '49px !important',
  },
});

export const useStyles = makeStyles(styles, { name: 'AppError' });

'''
'''--- ui/src/components/CountrySelection/CountrySelection.styles.js ---
import makeStyles from '@mui/styles/makeStyles';

const styles = (theme) => ({
  form: {
    width: '100%',
    height: '100%',
    minHeight: 326,
    maxWidth: 580,
    backgroundColor: '#fff',
    borderRadius: 12,
    paddingRight: theme.spacing(2),
    paddingLeft: theme.spacing(2),
    marginTop: theme.spacing(3),
    marginBottom: theme.spacing(3),
  },
  formTitle: {
    fontSize: '20px !important',
    fontWeight: '700 !important',
    paddingTop: theme.spacing(3),
    paddingBottom: theme.spacing(2),
  },
});

export const useStyles = makeStyles(styles, { name: 'CountrySelectionPage' });

'''
'''--- ui/src/components/Footer/Footer.styles.js ---
import makeStyles from '@mui/styles/makeStyles';

const styles = (theme) => ({
  footerContainer: {
    [theme.breakpoints.down('md')]: {
      justifyContent: 'center',
    },
    paddingRight: '16px',
    paddingLeft: '16px',
    color: '#000',
    borderTop: '1px solid #E1E1E1',
  },
  footerNav: {
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'center',
    marginRight: 'auto',
    marginLeft: theme.spacing(3),
    marginBottom: theme.spacing(0),

    [theme.breakpoints.down('md')]: {
      width: '100%',
      marginLeft: 'auto',
      marginTop: theme.spacing(3),
      marginBottom: theme.spacing(2),
    },
  },
  footerLink: {
    marginLeft: theme.spacing(3),
    marginRight: theme.spacing(3),
    [theme.breakpoints.down('md')]: {
      marginBottom: theme.spacing(2),
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'Footer' });

'''
'''--- ui/src/components/IdentityVerification/IdentityVerification.styles.js ---
import { makeStyles } from '@mui/styles';

const styles = (theme) => ({
  root: {
    width: 580,
    backgroundColor: '#fff',
    padding: theme.spacing(2),
    '& form .MuiFormControl-fullWidth': {},
  },
  footer: {
    display: 'flex',
    position: 'absolute',
    marginTop: 'auto',
    gap: 24,
    width: '100%',
    left: 0,
    alignItems: 'center',
    justifyContent: 'center',
    padding: '16px 0',
    background: '#fff',
    borderTop: '1px solid #e7ebf0',
  },
  submitBtn: {
    padding: '8px 56px !important',
    borderRadius: '12px !important',
  },
});

export const useStyles = makeStyles(styles, { name: 'IdentityVerification' });

'''
'''--- ui/src/components/KYCSteps/CheckVerification/CheckVerification.styles.js ---
import makeStyles from '@mui/styles/makeStyles';

const styles = (theme) => ({
  root: {
    width: '100%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'space-between',
    height: '100%',
  },
  container: {
    maxWidth: '100%',
    width: 560,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    paddingTop: theme.spacing(5),
    paddingBottom: theme.spacing(5),
    marginTop: theme.spacing(8),
    background: '#fff',
    marginLeft: theme.spacing(2),
    marginRight: theme.spacing(2),
  },
  form: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
  },
  img: {
    width: 72,
    height: 72,
  },
  formHeader: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    gap: theme.spacing(2),
    marginTop: theme.spacing(3),
    marginBottom: theme.spacing(3),
  },
  formTitle: {
    fontSize: '20px !important',
    fontWeight: '700 !important',
  },
  formDescription: {
    color: '#555',
    textAlign: 'left',
    fontSize: '16px !important',
  },
  formFooter: {
    width: '100%',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    paddingBottom: 16,
    paddingTop: 16,
    backgroundColor: '#fff',
  },
  button: {
    paddingRight: '49px !important',
    paddingLeft: '49px !important',
  },
});

export const useStyles = makeStyles(styles, { name: 'CheckVerification' });

'''
'''--- ui/src/components/WelcomePage/WelcomePage.styles.js ---
import makeStyles from '@mui/styles/makeStyles';

const styles = (theme) => ({
  grid: {
    display: 'grid',
    alignItems: 'center',
    gridTemplateColumns: '1fr minmax(386px, 1fr)',
    flex: 'auto',
    maxWidth: 800,
    margin: '0 auto',
    [theme.breakpoints.down('sm')]: {
      display: 'flex',
      flexDirection: 'column-reverse',
    },
  },
  textBlock: {
    display: 'flex',
    flexDirection: 'column',
    gap: theme.spacing(3),
    [theme.breakpoints.down('sm')]: {
      alignItems: 'center',
    },
  },
  title: {
    marginLeft: theme.spacing(2),
    marginRight: theme.spacing(2),
  },
  description: {
    marginLeft: theme.spacing(2),
    marginRight: theme.spacing(2),
  },
});

export const useStyles = makeStyles(styles, { name: 'WelcomePage' });

'''
'''--- ui/src/components/general/CountrySelect/CountrySelect.styles.js ---
import { makeStyles } from '@mui/styles';

const styles = () => ({
  autocomplete: {
    padding: 0,
    '& .MuiFilledInput-root': {
      paddingTop: '8px !important',
      paddingBottom: '8px !important',
      borderRadius: '12px',
      '& .MuiInputAdornment-root': {
        marginTop: '0px !important',
      },
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'CountrySelect' });

'''
'''--- ui/src/components/general/Input/Input.styles.js ---
import { makeStyles } from '@mui/styles';

const styles = (theme) => ({
  input: {
    '& .MuiFilledInput-root': {
      borderRadius: theme.spacing(1.5),
      borderBottom: 0,
      '& input': {
        paddingTop: theme.spacing(2),
        paddingRight: theme.spacing(4),
        paddingBottom: theme.spacing(2),
        paddingLeft: theme.spacing(2),
      },
    },
  },
});

export const useStyles = makeStyles(styles, { name: 'Input' });

'''
'''--- ui/src/config/api.js ---
import ky from 'ky';

const headers = {
  'content-type': 'application/json',
};

const requestAppParameters = async () => {
  return ky
    .get(`api/get-parameters`, {
      headers,
      timeout: 60_000,
    })
    .json();
};

const requestSession = async (body) => {
  return ky
    .post('api/session', {
      headers,
      json: { ...body },
      timeout: 60_000,
      throwHttpErrors: false,
    })
    .json();
};

const requestCountries = async () => {
  const response = await ky
    .get('api/get-countries', {
      headers,
      timeout: 60_000,
    })
    .json();
  return response.sort();
};

const requestFields = async (countryCode) => {
  return ky
    .get(`api/get-fields?country=${countryCode}`, {
      headers,
      timeout: 60_000,
    })
    .json();
};

const requestConsents = async (countryCode) => {
  return ky
    .get(`api/get-consents?country=${countryCode}`, {
      headers,
      timeout: 60_000,
    })
    .json();
};

const requestSubdivisions = async (countryCode) => {
  return ky
    .get(`api/get-country-subdivisions?country=${countryCode}`, {
      headers,
      timeout: 60_000,
    })
    .json();
};

const requestSubmitForm = async (body) => {
  return ky
    .post('api/verify', {
      headers,
      json: { ...body },
      timeout: 60_000,
      throwHttpErrors: false,
    })
    .json();
};

const sendCheckResult = async () => {
  return ky
    .post('api/send-check-result', {
      headers,
      json: {},
      timeout: 60_000,
    })
    .json();
};

const requestDocumentVerify = async (body) => {
  return ky
    .post('api/doc-verify', {
      headers,
      json: { ...body },
      timeout: 60_000,
    })
    .json();
};

export const api = {
  requestAppParams: requestAppParameters,
  requestFields,
  requestConsents,
  requestSession,
  sendCheckResult,
  requestCountries,
  requestSubdivisions,
  requestSubmitForm,
  requestDocVerify: requestDocumentVerify,
};

'''
'''--- ui/src/config/steps.js ---
export const steps = [
  'identity_verification',
  'identity_verification_in_progress',
  'identity_verification_failed',
  'identity_verification_completed',
  'document_verification_in_progress',
  'document_verification_failed',
  'document_verification_completed',
];

'''
'''--- ui/src/index.css ---
body {
  margin: 0;
  font-family: Montserrat, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  width: 100vw;
  height: 100vh;
  max-width: 100%;
}

div#root {
  min-height: 100vh;
  height: 100%;
  display: flex;
  flex-direction: column;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;
}

'''
'''--- ui/src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- ui/src/reportWebVitals.js ---
const reportWebVitals = (onPerfEntry) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    // eslint-disable-next-line promise/prefer-await-to-then
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- ui/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
// eslint-disable-next-line import/no-unassigned-import
import '@testing-library/jest-dom';

'''
'''--- ui/src/store/actions/clearError.js ---
import { action } from 'easy-peasy';

export const clearError = action((state) => {
  state.error = {
    isAppError: false,
    isError: false,
    description: '',
  };
});

'''
'''--- ui/src/store/actions/index.js ---
import { clearError } from './clearError';
import { resetState } from './resetState';
import { setCountries } from './setCountries';
import { setCountry } from './setCountry';
import { setError } from './setError';
import { setFieldsSchema } from './setFieldsSchema';
import { setPublicKey } from './setPublicKey';
import { setRedirectUrl } from './setRedirectUrl';
import { setSession } from './setSession';

export const actions = {
  setPublicKey,
  setRedirectUrl,
  setError,
  setSession,
  setCountries,
  setCountry,
  setFieldsSchema,
  resetState,
  clearError,
};

'''
'''--- ui/src/store/actions/resetState.js ---
import { action } from 'easy-peasy';

import { initState } from '../initState';

export const resetState = action((state) => ({
  ...state,
  ...initState,
}));

'''
'''--- ui/src/store/actions/setCountries.js ---
import { action } from 'easy-peasy';

export const setCountries = action((state, payload) => {
  state.countries = payload;
});

'''
'''--- ui/src/store/actions/setCountry.js ---
import { action } from 'easy-peasy';

export const setCountry = action((state, payload) => {
  state.country = payload;
});

'''
'''--- ui/src/store/actions/setError.js ---
import { action } from 'easy-peasy';

export const setError = action((state, payload) => {
  state.error = payload;
});

'''
'''--- ui/src/store/actions/setFieldsSchema.js ---
import { action } from 'easy-peasy';

export const setFieldsSchema = action((state, payload) => {
  state.getFields = payload;
});

'''
'''--- ui/src/store/actions/setPublicKey.js ---
import { action } from 'easy-peasy';

export const setPublicKey = action((state, payload) => {
  // eslint-disable-next-line canonical/id-match
  state.appConfig.trulioo_public_key = payload;
});

'''
'''--- ui/src/store/actions/setRedirectUrl.js ---
import { action } from 'easy-peasy';

export const setRedirectUrl = action((state, payload) => {
  // eslint-disable-next-line canonical/id-match
  state.appConfig.finish_redirect_url = payload;
});

'''
'''--- ui/src/store/actions/setSession.js ---
import { action } from 'easy-peasy';

export const setSession = action((state, payload) => {
  const pathname = window.location.pathname;
  state.session[pathname] = { ...state.session[pathname], ...payload };
});

'''
'''--- ui/src/store/helpers/constantDateFields.js ---
const DAY_OF_BIRTH = 'DayOfBirth';
const MONTH_OF_BIRTH = 'MonthOfBirth';
const YEAR_OF_BIRTH = 'YearOfBirth';
const DOB = 'DOB';
const DOB_TITLE = 'Date of Birth';

export { DAY_OF_BIRTH, MONTH_OF_BIRTH, YEAR_OF_BIRTH, DOB, DOB_TITLE };

'''
'''--- ui/src/store/helpers/constantNationalIds.js ---
const idTypes = {
  nationalId: 'NationalID',
  health: 'Health',
  socialService: 'SocialService',
  taxIdNumber: 'TaxIDNumber',
};

const nationalIdNamesByCountry = {
  CN: 'National ID Number',
  FI: 'PIC',
  FR: 'InseeNumber',
  HK: 'Identity Number',
  MY: 'National Registration ID Card (NRIC) Number',
  MX: 'Clave Única de Registro de Población (CURP)',
  SG: 'National Registration ID Card (NRIC) Number',
  SE: 'Personal Identification Number (PIN)',
  ES: 'Documento Nacional de Identidad (DNI)',
  TR: 'Türkiye Cumhuriyeti Kimlik Numarası (T.C. Kimlik No.)',
  IN: 'Aadhaar Card Number',
};

const healthNamesByCountry = {
  AU: 'Australia Medicare',
  GB: 'NHS Number',
};

const socialServiceNamesByCountry = {
  AU: 'Tax File Number',
  CA: 'Social Insurance Number',
  IE: 'Personal Public Service Number',
  IT: 'Codice Fiscale',
  MX: 'Registro Federal de Contribuyentes (Tax Number)',
  GB: 'National Insurance Number (NI)',
  US: 'Social Security Number',
  RU: 'Individual insurance account number, SNILS (11 Digits)',
  IN: 'Permanent Account Number (PAN)',
};

const taxIdNumberNamesByCountry = {
  RU: 'Taxpayer Personal Identification Number, INN (12 digits)',
};

const convertToNameTypeObjectArray = (natIdNameObject, type) =>
  Object.fromEntries(
    Object.entries(natIdNameObject).map((natIdEntry) => {
      natIdEntry[1] = [
        {
          name: natIdEntry[1],
          type,
        },
      ];
      return natIdEntry;
    }),
  );

const mergeObjectsWithSameKey = (...objects) =>
  // eslint-disable-next-line unicorn/no-array-reduce
  objects.reduce((combinedObject, currentObject) => {
    for (const key of Object.keys(currentObject)) {
      combinedObject[key] = combinedObject[key] ? combinedObject[key].concat(currentObject[key]) : currentObject[key];
    }

    return combinedObject;
  });

/**
 * GG national ID names are not accurate to the actual names for each country, so we
 * map them ourselves until a solution is provided through GG.
 *
 * For example, social security number is given for many countries where it's not called
 * social security number (Russia is SNILS, GG gives SSN, etc.).
 *
 * Returns object of the form
 *
 * {
 *  <countryCode>: [
 *    {
 *      name: <name of id>,
 *      type: <type of id>
 *    },
 *    ...
 *  ],
 *  ...
 * }
 */
const combineTypesToSingleObject = () => {
  const nationalIdObject = convertToNameTypeObjectArray(nationalIdNamesByCountry, idTypes.nationalId);
  const healthObject = convertToNameTypeObjectArray(healthNamesByCountry, idTypes.health);
  const socialServiceObject = convertToNameTypeObjectArray(socialServiceNamesByCountry, idTypes.socialService);
  const taxIdObject = convertToNameTypeObjectArray(taxIdNumberNamesByCountry, idTypes.taxIdNumber);

  return mergeObjectsWithSameKey(nationalIdObject, healthObject, socialServiceObject, taxIdObject);
};

// eslint-disable-next-line no-undef
module.exports = combineTypesToSingleObject();

'''
'''--- ui/src/store/helpers/getFields.js ---
// TODO: Clean up eqeqeq instances below. See question at https://github.com/NEARFoundation/trulioo-app/pull/45#issuecomment-1238630791 and in Telegram.
import countries from 'i18n-iso-countries';
import enLocale from 'i18n-iso-countries/langs/en.json';
import * as R from 'ramda';

import { DAY_OF_BIRTH, MONTH_OF_BIRTH, YEAR_OF_BIRTH, DOB, DOB_TITLE } from './constantDateFields';
import constantNationalIds from './constantNationalIds';

countries.registerLocale(enLocale);

const countryObject = countries.getNames('en', { select: 'official' });

// eslint-disable-next-line unicorn/prevent-abbreviations
export const localeCountriesArr = Object.entries(countryObject).map(([key, value]) => {
  return {
    name: value,
    code: key,
  };
});

const reservedFormDataKeys = ['countries', 'TruliooFields', 'Consents'];
const dateFields = ['DayOfBirth', 'MonthOfBirth', 'YearOfBirth'];
const dateFieldsMap = new Map();
const deepCopy = (object) => JSON.parse(JSON.stringify(object));

const hasDOBInMap = () => {
  const dayOfBirthInMap = dateFieldsMap.get(DAY_OF_BIRTH);
  const monthOfBirthInMap = dateFieldsMap.get(MONTH_OF_BIRTH);
  const yearOfBirthInMap = dateFieldsMap.get(YEAR_OF_BIRTH);
  return dayOfBirthInMap && monthOfBirthInMap && yearOfBirthInMap;
};

const parseFields = (object) => {
  for (const [key] of Object.entries(object)) {
    // eslint-disable-next-line eqeqeq
    if (key == 0) {
      return null;
    }

    if (key === 'label') {
      object.title = object[key];
    }

    parseFields(object[key]);
  }

  return object;
};

const containsDOBRequired = (required) => required && required.includes(DAY_OF_BIRTH) && required.includes(MONTH_OF_BIRTH) && required.includes(YEAR_OF_BIRTH);

const updateDateRequiredArray = (object) => {
  const { required } = object;

  if (!object.properties || !required) {
    return;
  }

  const containsDOB = containsDOBRequired(object.required);
  if (containsDOB) {
    object.required = required.filter((requiredField) => requiredField !== DAY_OF_BIRTH && requiredField !== MONTH_OF_BIRTH && requiredField !== YEAR_OF_BIRTH);
    object.required.push(DOB);
  }
};

const parseFieldDates = (object) => {
  updateDateRequiredArray(object);
  for (const [key] of Object.entries(object)) {
    // eslint-disable-next-line eqeqeq
    if (key == 0) {
      return null;
    }

    if (key === 'label') {
      object.title = object[key];
    }

    if (dateFields.includes(key)) {
      dateFieldsMap.set(key, true);
    } else {
      parseFieldDates(object[key]);
    }

    if ((key === DAY_OF_BIRTH || key === MONTH_OF_BIRTH || key === YEAR_OF_BIRTH) && hasDOBInMap()) {
      delete object[DAY_OF_BIRTH];
      delete object[MONTH_OF_BIRTH];
      delete object[YEAR_OF_BIRTH];
      object.DOB = {
        title: DOB_TITLE,
        type: 'string',
        format: 'date',
      };
    }
  }

  return object;
};

const generateConsentSchema = (consents) => {
  if (!consents || !consents.length) {
    return null;
  }

  const schema = {
    title: 'Consents',
    type: 'object',
    required: [],
    properties: {},
  };
  for (const x of consents) {
    schema.required.push(x);
    schema.properties[x] = {
      title: x,
      type: 'boolean',
      default: false,
    };
  }

  return schema;
};

const updateStateProvince = (object, subdivisions) => {
  for (const key of Object.keys(object)) {
    if (key === 'StateProvinceCode' && subdivisions.length > 0) {
      object[key] = {
        ...object[key],
        enum: subdivisions.map((x) => x.Code),
        enumNames: subdivisions.map((x) => x.Name),
      };
    } else if (object[key] !== null && typeof object[key] === 'object') {
      updateStateProvince(object[key], subdivisions);
    }
  }
};

const transformNationalIdsForCountry = (nationalIds, countryCode) => {
  if (constantNationalIds[countryCode] && nationalIds.properties) {
    // change the description for the field to use constant national id names
    if (nationalIds.properties.Number && nationalIds.properties.Number.description) {
      nationalIds.properties.Number.description = constantNationalIds[countryCode].map((nationalId) => `(${nationalId.name})`).join(', ');
    }

    // change the Type select to use national id names instead of GG national id types
    if (nationalIds.properties.Type && nationalIds.properties.Type.enum) {
      nationalIds.properties.Type.enum = constantNationalIds[countryCode].map((nationalId) => nationalId.name);
    }

    // remove Type select if only one option in select
    if (constantNationalIds[countryCode].length < 2 && nationalIds.properties.Type) {
      delete nationalIds.properties.Type;
      if (nationalIds.required && nationalIds.required.length === 2) {
        nationalIds.required = [nationalIds.required[0]];
      }
    }
  }
};

const parseSubmitTruliooDateFields = (object) => {
  for (const key of Object.keys(object)) {
    if (key === DOB) {
      const splitDate = object[key].split('-');
      const [year, month, day] = splitDate;
      object[DAY_OF_BIRTH] = day;
      object[MONTH_OF_BIRTH] = month;
      object[YEAR_OF_BIRTH] = year;
      delete object[DOB];
    }

    if (typeof object[key] === 'object') {
      parseSubmitTruliooDateFields(object[key]);
    }
  }

  return object;
};

const parseTruliooFields = (formData) => {
  const truliooFields = {};
  for (const key of Object.keys(formData)) {
    if (reservedFormDataKeys.includes(key)) {
      truliooFields[key] = formData[key];
    }
  }

  if (hasDOBInMap()) {
    const parsedFieldsWithDates = parseSubmitTruliooDateFields(truliooFields);
    return parsedFieldsWithDates;
  }

  return truliooFields;
};

const getNationalIdsForGG = (nationalIds, countryCode) => {
  if (constantNationalIds[countryCode]) {
    if (nationalIds.Type) {
      return [
        {
          ...nationalIds,
          Type: constantNationalIds[countryCode].find((natIds) => natIds.name === nationalIds.Type).type,
        },
      ];
    }

    if (nationalIds.Number) {
      return [{ ...nationalIds, Type: constantNationalIds[countryCode][0].type }];
    }

    return null;
  }

  return [nationalIds];
};

const getWhiteListedFieldsOnly = (fields, whiteListedTruliooFields, whiteListedComputedFields) => {
  for (const key of Object.keys(whiteListedTruliooFields)) {
    const keyExists = Object.prototype.hasOwnProperty.call(fields, key);
    // key is not contained in fields
    if (!keyExists) {
      continue;
    }

    const hasDefinedChildren = Object.keys(whiteListedTruliooFields[key]).length > 0;
    if (hasDefinedChildren) {
      whiteListedComputedFields[key] = {};
      if (fields.title) {
        whiteListedComputedFields.title = fields.title;
      }

      if (fields.type) {
        whiteListedComputedFields.type = fields.type;
      }

      if (fields.required) {
        const childProperties = Object.keys(whiteListedTruliooFields.properties);
        const whiteListedRequiredFields = fields.required.filter((requiredField) => childProperties.includes(requiredField));
        whiteListedComputedFields.required = whiteListedRequiredFields;
      }

      getWhiteListedFieldsOnly(fields[key], whiteListedTruliooFields[key], whiteListedComputedFields[key]);
    } else {
      whiteListedComputedFields[key] = fields[key];
    }
  }

  return whiteListedComputedFields;
};

const parseFormData = (form) => {
  if (form === undefined || form.TruliooFields === undefined) {
    return form;
  }

  if (form.TruliooFields.Document) {
    const documentFront = form.TruliooFields.Document.DocumentFrontImage;
    form.TruliooFields.Document.DocumentFrontImage = documentFront.slice(documentFront.indexOf(',') + 1);
    const documentBack = form.TruliooFields.Document.DocumentBackImage;
    if (documentBack) {
      form.TruliooFields.Document.DocumentBackImage = documentBack.slice(documentBack.indexOf(',') + 1);
    }

    const livePhoto = form.TruliooFields.Document.LivePhoto;
    if (livePhoto) {
      form.TruliooFields.Document.LivePhoto = livePhoto.slice(livePhoto.indexOf(',') + 1);
    }
  }

  if (form.TruliooFields.NationalIds) {
    const nationalIds = form.TruliooFields.NationalIds;
    form.TruliooFields.NationalIds = getNationalIdsForGG(nationalIds, form.countries);
  }

  return form;
};

const getCountryCode = (form) => {
  for (const [key, value] of Object.entries(form)) {
    if (key === 'countries') {
      return value;
    }
  }

  return null;
};

const validateAdditionalFields = (additionalFields) => {
  if (!additionalFields || !additionalFields.properties) {
    return;
  }

  const containsReservedKeys = R.intersection(Object.keys(additionalFields.properties), reservedFormDataKeys);
  if (containsReservedKeys.length > 0) {
    throw new Error(`${containsReservedKeys.toString()} is a reserved field key. Please use different naming for your additional fields.`);
  }
};

const parseConsents = (consents) => {
  const result = [];
  if (consents === undefined) {
    return result;
  }

  for (const x of Object.keys(consents)) {
    /* istanbul ignore else */
    if (consents[x]) {
      result.push(x);
    }
  }

  return result;
};

const getSubmitBody = (form) => {
  const countryCode = getCountryCode(form);
  const parsedForm = parseFormData(form);

  return {
    session_id: null,
    country: countryCode,
    fields: parsedForm.TruliooFields,
    consents: parseConsents(parsedForm.Consents),
  };
};

export const getFields = {
  deepCopy,
  parseFields,
  parseFieldDates,
  updateDateRequiredArray,
  generateConsentSchema,
  updateStateProvince,
  transformNationalIdsForCountry,
  parseTruliooFields,
  getSubmitBody,
  getWhiteListedFieldsOnly,
  validateAdditionalFields,
};

'''
'''--- ui/src/store/helpers/presetTruliooFields.js ---
const presetTruliooFields = (schemaObject, formDataObject) => {
  for (const [formDataKey, formDataValue] of Object.entries(formDataObject)) {
    if (schemaObject[formDataKey] && !schemaObject[formDataKey].properties) {
      schemaObject[formDataKey].default = formDataValue;
    }

    if (schemaObject[formDataKey] && schemaObject[formDataKey].properties) {
      presetTruliooFields(schemaObject[formDataKey].properties, formDataValue);
    }
  }
};

export { presetTruliooFields };

'''
'''--- ui/src/store/index.js ---
import { createStore, persist } from 'easy-peasy';

import { actions } from './actions';
import { initState } from './initState';
import { thunks } from './thunks';

export const general = persist(
  {
    ...initState,
    ...actions,
    ...thunks,
  },
  {
    storage: 'localStorage',
    allow: ['country', 'appConfig', 'countries', 'getFields', 'session', 'error'],
  },
);

export const store = createStore(
  {
    general,
  },
  {
    name: 'KYC Module',
  },
);

'''
'''--- ui/src/store/initState.js ---
import { persist } from 'easy-peasy';

// eslint-disable-next-line canonical/id-match
const _initState = {
  isLoading: false,
  error: {
    isAppError: false,
    isError: false,
    description: '',
  },
  appConfig: {
    trulioo_public_key: null,
    finish_redirect_url: null,
  },
  session: {},
  country: null,
  countries: [],
  getFields: null,
  isRejected: false,
  messages: null,
};

export const initState = persist(_initState, {
  storage: 'localStorage',
});

'''
'''--- ui/src/store/thunks/index.js ---
import { onChangeStatus } from './onChangeStatus';
// eslint-disable-next-line unicorn/prevent-abbreviations
import { onDocVerify } from './onDocVerify';
import { onGetAppConfig } from './onGetAppConfig';
import { onGetCountries } from './onGetCountries';
import { onGetFields } from './onGetFields';
import { onGetSession } from './onGetSession';
import { onInitApp } from './onInitApp';
import { onSubmitForm } from './onSubmitForm';

export const thunks = {
  onGetAppConfig,
  onInitApp,
  onGetCountries,
  onChangeStatus,
  onGetFields,
  onGetSession,
  onSubmitForm,
  onDocVerify,
};

'''
'''--- ui/src/store/thunks/onChangeStatus.js ---
import { thunk } from 'easy-peasy';

export const onChangeStatus = thunk(async (actions, payload) => {
  try {
    const setSession = actions.setSession;
    setSession(payload);
  } catch (error) {
    console.log(`Error:${error}`);
  }
});

'''
'''--- ui/src/store/thunks/onDocVerify.js ---
// eslint-disable-next-line unicorn/prevent-abbreviations
import { thunk } from 'easy-peasy';

import { api } from '../../config/api';

// eslint-disable-next-line unicorn/prevent-abbreviations
export const onDocVerify = thunk(async (actions, payload, { getStoreState }) => {
  const state = getStoreState();
  const onGetSession = actions.onGetSession;
  try {
    const pathname = window.location.pathname;
    // eslint-disable-next-line canonical/id-match
    const session_id = state.general.session[pathname]?.session_id || '';
    const body = payload;
    // eslint-disable-next-line canonical/id-match
    body.session_id = session_id;
    await api.requestDocVerify(body);
    await onGetSession();
  } catch (error) {
    console.log(`Error:${error}`);
  }
});

'''
'''--- ui/src/store/thunks/onGetAppConfig.js ---
import { thunk } from 'easy-peasy';

import { api } from '../../config/api';

export const onGetAppConfig = thunk(async (actions) => {
  try {
    const { setPublicKey, setRedirectUrl } = actions;
    const { trulioo_public_key, finish_redirect_url } = await api.requestAppParams();
    setPublicKey(trulioo_public_key);
    setRedirectUrl(finish_redirect_url);
  } catch (error) {
    console.log(`Error get appConfig:${error}`);
  }
});

'''
'''--- ui/src/store/thunks/onGetCountries.js ---
import { thunk } from 'easy-peasy';

import { api } from '../../config/api';
import { localeCountriesArr as localeCountriesArray } from '../helpers/getFields';

export const onGetCountries = thunk(async (actions) => {
  try {
    const setCountries = actions.setCountries;
    const response = await api.requestCountries();
    const countries = localeCountriesArray.filter((country) => response.includes(country.code));
    setCountries(countries);
  } catch (error) {
    console.log(`Error:${error}`);
  }
});

'''
'''--- ui/src/store/thunks/onGetFields.js ---
import { thunk } from 'easy-peasy';

import { api } from '../../config/api';
import { getFields } from '../helpers/getFields';
import { presetTruliooFields } from '../helpers/presetTruliooFields';

export const onGetFields = thunk(
  async (
    actions,
    { countryCode, additionalFields, whiteListedTruliooFields, currentTruliooFields, setLoading },
  ) => {
    try {
      setLoading(true);
      const setFieldsSchema = actions.setFieldsSchema;
      const response = await api.requestFields(countryCode);
      const parsedFields = getFields.parseFields(response);
      const copiedParsedFields = getFields.deepCopy(parsedFields);
      const fields = getFields.parseFieldDates(copiedParsedFields);
      const subdivisions = await api.requestSubdivisions(countryCode);
      let consents = await api.requestConsents(countryCode);
      consents = getFields.generateConsentSchema(consents);
      getFields.validateAdditionalFields(additionalFields);
      if (fields && fields.properties) {
        getFields.updateStateProvince(fields.properties, subdivisions);
        if (fields.properties.NationalIds) {
          getFields.transformNationalIdsForCountry(fields.properties.NationalIds, countryCode);
        }
      }

      let finalFields = fields;
      if (whiteListedTruliooFields) {
        finalFields = getFields.getWhiteListedFieldsOnly(fields, whiteListedTruliooFields, {});
      }

      if (currentTruliooFields) {
        presetTruliooFields(finalFields.properties, currentTruliooFields);
      }

      setFieldsSchema({
        fields: finalFields,
        consents,
        additionalFields,
        formData: {
          countries: countryCode,
        },
      });
      setLoading(false);
    } catch (error) {
      console.log(`Error:${error}`);
    }
  },
);

'''
'''--- ui/src/store/thunks/onGetSession.js ---
// TODO Enable consistent-return rule and fix the function.
import { thunk } from 'easy-peasy';

import { api } from '../../config/api';

// eslint-disable-next-line consistent-return
export const onGetSession = thunk(async (_, payload, { getStoreActions, getStoreState }) => {
  const actions = getStoreActions();
  const state = getStoreState();
  const setSession = actions.general.setSession;
  const setError = actions.general.setError;
  try {
    const pathname = window.location.pathname;
    // eslint-disable-next-line canonical/id-match
    const session_id = state.general.session[pathname]?.session_id || '';
    const session = await api.requestSession({ session_id, ...payload });
    console.log({ session });
    if (session.error) {
      console.error(session.error);
      return setError({ isAppError: true, description: session.error });
    }

    setSession(session);
  } catch (error) {
    console.error(`Error: ${error}`);
    setError({ isAppError: true, description: `${error}` });
  }
});

'''
'''--- ui/src/store/thunks/onInitApp.js ---
import { thunk } from 'easy-peasy';

export const onInitApp = thunk(async (actions, payload) => {
  try {
    const { setInit } = payload;
    const { onGetSession, clearError } = actions;
    clearError();
    await onGetSession();
    setInit(true);
  } catch (error) {
    console.log(`Error onInit App:${error}`);
  }
});

'''
'''--- ui/src/store/thunks/onSubmitForm.js ---
// TODO Enable consistent-return rule and fix the function.
import { thunk } from 'easy-peasy';

import { api } from '../../config/api';
import { getFields } from '../helpers/getFields';

const onError = async ({ actions, error }) => {
  const setError = actions.general.setError;
  const onGetSession = actions.general.onGetSession;
  setError({ isError: true, description: error });
  await onGetSession();
};

// eslint-disable-next-line consistent-return
export const onSubmitForm = thunk(async (_, { formData, setSubmitLoading }, { getStoreState, getStoreActions }) => {
  const state = getStoreState();
  const actions = getStoreActions();
  const { onChangeStatus, setError } = actions.general;
  try {
    setSubmitLoading(true);
    const pathname = window.location.pathname;
    const formClone = getFields.deepCopy(formData);
    const truliooFormData = getFields.parseTruliooFields(formClone);
    const body = getFields.getSubmitBody(truliooFormData);
    // eslint-disable-next-line canonical/id-match
    body.session_id = state.general.session[pathname]?.session_id || '';
    const { status, error } = await api.requestSubmitForm(body);
    if (error) {
      console.error(`Error`, error);
      return await onError({ actions, error });
    }

    onChangeStatus({ status });
  } catch (error) {
    console.error(`Error`, error);
    setError({ isAppError: true, description: `${error}` });
  } finally {
    setSubmitLoading(false);
  }
});

'''