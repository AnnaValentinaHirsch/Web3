*GitHub Repository "EV3RETH/ev3reth-website"*

'''--- .eslintrc.json ---
{
  "extends": "next/core-web-vitals"
}

'''
'''--- README.md ---
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

'''
'''--- context/apolloClient.ts ---
import ApolloClient from 'apollo-client'
import { WebSocketLink } from 'apollo-link-ws'
import { HttpLink } from 'apollo-link-http'
import { split } from 'apollo-link'
import { getMainDefinition } from 'apollo-utilities'
import { InMemoryCache } from 'apollo-cache-inmemory'
import { useMemo } from 'react'
import merge from 'deepmerge'
import isEqual from 'lodash/isEqual'

import {
	GRAPH_MAINNET_HTTPS_URI,
	GRAPH_MAINNET_WSS_URI,
} from './constants'

export const APOLLO_STATE_PROP_NAME = '__APOLLO_STATE__'

let apolloClient: any

const createApolloClient = (graphUri?: string) => {
	const httpLink = new HttpLink({
		uri: graphUri ?? GRAPH_MAINNET_HTTPS_URI,
		credentials: 'same-origin',
		headers: {
			'x-hasura-role': 'anonymous',
		},
	})

	const wsLink = process.browser
		? new WebSocketLink({
			uri: GRAPH_MAINNET_WSS_URI,
			options: {
				reconnect: true,
			},
		})
		: null

	const splitLink = process.browser
		? split(
			({ query }) => {
				const definition = getMainDefinition(query)
				return (
					definition.kind === 'OperationDefinition' &&
					definition.operation === 'subscription'
				)
			},
			// @ts-ignore
			wsLink,
			httpLink
		)
		: httpLink

	const client = new ApolloClient({
		ssrMode: typeof window === 'undefined',
		link: splitLink,
		cache: new InMemoryCache(),
	})

	return client
}

export function initializeApollo(initialState = null, graphUri?: string) {
	const _apolloClient = apolloClient ?? createApolloClient(graphUri)

	if (initialState) {
		const existingCache = _apolloClient.extract()

		// @ts-ignore
		const data = merge(initialState, existingCache, {
			arrayMerge: (destinationArray, sourceArray) => [
				...sourceArray,
				...destinationArray.filter((d) =>
					sourceArray.every((s) => !isEqual(d, s))
				),
			],
		})
		_apolloClient.cache.restore(data)
	}

	if (typeof window === 'undefined') return _apolloClient
	if (!apolloClient) apolloClient = _apolloClient

	return _apolloClient
}

export const useApollo = (pageProps: any) => {
	const state = pageProps[APOLLO_STATE_PROP_NAME]
	const store = useMemo(
		() => initializeApollo(state, pageProps?.network?.graphUri),
		[state]
	)
	return store
}
'''
'''--- context/constants.ts ---
export const GRAPH_MAINNET_HTTPS_URI = 'https://mintbase-mainnet.hasura.app/v1/graphql'
export const GRAPH_MAINNET_WSS_URI = 'wss://mintbase-mainnet.hasura.app/v1/graphql'

export const GRAPH_TESTNET_HTTPS_URI = 'https://mintbase-testnet.hasura.app/v1/graphql'
export const GRAPH_TESTNET_WSS_URI = 'wss://mintbase-testnet.hasura.app/v1/graphql'
'''
'''--- hooks/useMintbaseStore.ts ---
import { useQuery } from "@apollo/client"
import { gql } from 'apollo-boost'
import { Wallet } from "mintbase"
import { useEffect, useState } from "react"

export type Store = {
	id: string
	name: string
}

export type Thing = {
	tokenId: string;
	id: string
	tokens: Token[]
	storeId: string;
	metadata: {
		title: string
		media: string
		description: string
		animation_url: string
	}
}

type Token = {
	id: string
	list: {
		price: string
	}
	ownerId: string
}

const FETCH_STORE = gql`
  query FetchStore($storeId: String!, $limit: Int = 20, $offset: Int = 0) {
		store(where: {id: {_eq: $storeId}}) {
			name
			id
			tokens(order_by: {thingId: asc}, where: {storeId: {_eq: $storeId}, burnedAt: {_is_null: true}, list: {removedAt: {_is_null: true}}}, limit: $limit, offset: $offset, distinct_on: thingId) {
				id
				thing {
					id
					storeId
					tokens(distinct_on: id, where: {list: {removedAt: {_is_null: true}}}) {
						id
						list {
							price
						}
						ownerId
					}
					metadata {
						title
						media
						animation_url
						description
					}
				}
			}
		}
  }
`
const FETCH_HOLDERS = gql`
	query FetchHolders($storeId: String!) {
		token(where: {storeId: {_eq: $storeId}}, distinct_on: ownerId) {
			ownerId
		}
	}
`

export const buy = (wallet: Wallet, tokenID: string, tokenPrice: string) => {
	const tokenPriceNumber = Number(tokenPrice);
	tokenPrice = (tokenPriceNumber).toLocaleString('fullwide', { useGrouping: false })

	// create marketAddress env variable for testnet/mainnet
	// wallet?.makeOffer(tokenID,tokenPrice,{ marketAddress: process.env.marketAddress})
	wallet?.makeOffer(tokenID, tokenPrice)
}

export default function useMintbaseStore({ storeId }: { storeId: string }) {
	const [store, setStore] = useState<Store | null>(null)
	const [things, setThings] = useState<Thing[] | []>([])
	const [holders, setHolders] = useState<string[]>([]) //OwnerIds

	const { data: holderData, loading: holderLoading } = useQuery(FETCH_HOLDERS, {
		variables: {
			storeId: storeId,
		},
	})
	const { data, loading: storeLoading } = useQuery(FETCH_STORE, {
		variables: {
			storeId: storeId,
			limit: 10,
			offset: 0,
		},
	})

	const loading = storeLoading || holderLoading

	useEffect(() => {
		if (!data) return

		if (data?.store.length === 0) return

		setStore({
			...data.store[0],
		})

		const things = data.store[0].tokens.map((token: any) => (
			{
				...token.thing,
				tokenId: token.id
			}
		))

		setThings(things)
	}, [data])

	useEffect(() => {
		if (!holderData?.token) return;
		setHolders(holderData.token.map((t: any) => t.ownerId))
	}, [holderData])

	return {
		loading,
		store,
		holders,
		nfts: things
	}
}
'''
'''--- next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/types/global" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- next.config.js ---
/** @type {import('next').NextConfig} */
module.exports = {
	reactStrictMode: true,
	images: {
		domains: [
			'arweave.net',
			'coldcdn.com',
			'firebasestorage.googleapis.com',
			'pbs.twimg.com',
			'lh3.googleusercontent.com',
			'twitter.com',
			'source.unsplash.com',
			'abs.twimg.com',
		],
	},
}

'''
'''--- package.json ---
{
  "name": "ev3reth-website",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@apollo/client": "^3.3.21",
    "@emotion/react": "^11.5.0",
    "@emotion/styled": "^11.3.0",
    "@mui/icons-material": "^5.0.4",
    "@mui/material": "^5.0.4",
    "apollo-boost": "^0.4.9",
    "apollo-cache-inmemory": "^1.6.6",
    "apollo-client": "^2.6.10",
    "apollo-link": "^1.2.14",
    "apollo-link-http": "^1.5.17",
    "apollo-link-ws": "^1.0.20",
    "classnames": "^2.3.1",
    "deepmerge": "^4.2.2",
    "lodash": "^4.17.21",
    "mintbase": "^0.3.0",
    "next": "11.1.2",
    "react": "17.0.2",
    "react-dom": "17.0.2",
    "react-player": "^2.9.0",
    "simplex-noise": "^2.4.0",
    "subscriptions-transport-ws": "^0.9.19",
    "victor": "^1.1.0"
  },
  "devDependencies": {
    "@types/lodash": "^4.14.175",
    "@types/react": "17.0.27",
    "eslint": "8.1.0",
    "eslint-config-next": "11.1.2",
    "typescript": "4.4.3"
  }
}

'''
'''--- pages/api/hello.ts ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next'

type Data = {
  name: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  res.status(200).json({ name: 'John Doe' })
}

'''
'''--- styles/components/footer.module.css ---
.footerContainer {
	padding: 0.5rem 4rem;
	position: relative;
	display: flex;
	justify-content: space-between;
	align-items: center;
	background:linear-gradient(180deg, var(--grey-gradient));
	box-shadow: 0 5px 5px rgba(0, 0, 0, 0.8);
	
	color:var(--body-text-color);
}
.copyright {
	font-size: 0.8rem;
}
.logo {
	position: relative;
	opacity: 0.8;
}
.socials {
	display: flex;
	align-items: center;
}
.socials a {
	margin-right: 1rem;
}

@media only screen and (max-width: 480px) {
	.footerContainer {
		padding: 0.5rem 1rem;
	}
	.copyright {
		font-size: 0.5rem;
	}
}
'''
'''--- styles/components/layout.module.css ---
.container {
	margin: 0 auto;
	min-height: 100%;
	max-width: 1440px;
	padding: var(--nav-padding) 8rem 6rem;
	color: var(--body-text-color);
	font-family: var(--body-font);
}

.starsImageBg {
	position: fixed;
	top: 0;
	left: 0;
  height: 100vh;
  width: 100vw;
  overflow: hidden;
	background-color: black;
	z-index: -2;
}
.starsImageBg img {
	opacity: 0;
	filter: blur(4px);
	transition: 1.5s ease-in-out;
}

.imageLoaded img {
	opacity: 1;
	filter: blur(0px);
}

.footer {
	position: fixed;
	bottom: 0;
	display: flex;
	align-items: center;
}

@media only screen and (max-width: 1024px) {
	.container {
		padding: var(--nav-padding) 4rem 4rem;
	}
}

@media only screen and (max-width: 812px) {
	.container {
		padding: var(--nav-padding) 2rem 2rem;
	}
}
@media only screen and (max-width: 480px) {
	.container {
		padding: var(--nav-padding) 1rem 1rem;
	}
}

'''
'''--- styles/components/main-navigation.module.css ---
.toggleIcon {
	position: fixed;
	top: 0;
	left: 0;
	background: transparent;
	border: none;
	width: var(--nav-padding);
	height: var(--nav-padding);
	cursor: pointer;
	z-index: 10;
	transition: 0.5s;
}
.toggleIcon:hover {
	transform: scale(1.1);
}
.toggleIcon.pulse {
	animation: pulse 2.5s ease-in-out 5s 5;
}

.container {
	position: fixed;
	top: 0;
	left: -100%; 
	min-height: var(--nav-padding);
	opacity: 0;
	display: grid;
	grid-template-columns: 0.5fr 1fr 0.5fr;
	gap: 1rem;
	justify-items: center;
	align-items: center;
	width: 100%;
	padding: 0rem 6rem;
	justify-content: space-between;
	z-index: 9;
	background: linear-gradient(180deg, rgba(63, 76, 80, 1),rgba(60, 45, 63, 1), rgba(47, 36, 39, 1));
	border-bottom-right-radius: 3rem;
	box-shadow: 0 -5px 5px 5px rgba(0, 0, 0, 1);
	transition: 0.7s ease-in-out
}
.container button {
	justify-self: flex-start;
}

.accountName {
	margin: 0;
	display: flex;
	align-items: center;
	justify-content: center;
}

.linksContainer {
	justify-self: flex-end;
}

.container.navActive {
	left: 0;
	opacity: 1;
}

.navTitle {
	margin: 0;
}

.linksContainer {
	display: flex;
	align-items: center;
}

.link {
	position: relative;
	margin-left: 1.5rem;
	font-size: 1.2rem;
	font-family: var(--heading-font);
	color: var(--body-text-color);
	text-align: center;
}
.link:first-child {
	margin-left: 0;
}

.link.selected::after {
	content: "";
	position: absolute;
	bottom: -0.7rem;
	left: -0.5rem;
	width: calc(100% + 1rem);
	height: 0.3rem;
	border-radius: 0.3rem;
	background-image: linear-gradient(90deg, var(--main-gradient));
}
@media only screen and (max-width: 812px) {
	.toggleIcon {
		width: 4rem;
		height: 4rem;
	}
	.container {
		padding: 0 3rem
	}
	.accountName span{
		white-space: nowrap;
		width: 5rem;
		overflow: hidden;
		text-overflow: ellipsis;
	}
}
@media only screen and (max-width: 480px) {
	.container {
		grid-template-columns: 1fr;
		padding: 1rem 0 0;
		left: 0;
		top: -22%;
	}
	.container button {
		justify-self: center;
	}
	.container.navActive {
		top: 0
	}
	.container p {
		display: none;
	}
	.navTitle {
		margin: 1rem 0 0.5rem;
		padding: 0 0.5rem 0.2rem;
		border-bottom: 4px double var(--accent-color);
	}
	.linksContainer {
		justify-self: center;
		display: flex;
		flex-direction: column;
		align-items: center;
	}
	.link {
		margin: 0 0 1rem;
		font-size: 1rem;
	}
	.link.selected::after {
		bottom: -0.4rem;
		height: 0.15rem;
		border-radius: 0.2rem;
	}
}

@keyframes pulse {
	0% {
		transform: scale(1);
	}
	60% {
		transform: scale(1);
	}
	70% {
		transform: scale(1.05);
	}
	80% {
		transform: scale(1);
	}
	90% {
		transform: scale(1.1);
	}
	100%{
		transform: scale(1);
	}
}
'''
'''--- styles/components/modal.module.css ---
.wrapper {
	z-index: 100;
	position: fixed;
	left: 0;
	top: 100vh;
	width: 100vw;
	height: 100vh;
	
	display: flex;
	justify-content: center;
	align-items: center;
	background-color: rgba(61, 61, 61, 0.8);
	opacity: 0;
	transition: opacity 0.3s;
}
.wrapper.isOpen {
	top: 0;
	opacity: 1;
}
.body {
	margin-top: 7rem;
	opacity: 0;
	position: relative;
	background: rgb(73, 73, 73);
	border-radius: 1rem;
	box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5);
	width: 70vw;
	max-width: 1440px;
	max-height: 90vh;
	padding: 3rem 3rem 2rem;
	word-wrap: break-word;
	overflow-x: hidden;
	overflow-y: scroll;
	transition: 0.5s;
}
.wrapper.isOpen .body {
	margin-top: 0;
	opacity: 1;
}

.body p {
	line-height: 1.5rem;
}
.cancel {
	position: absolute;
	top: 1rem;
	right: 1rem;
	z-index: 5;
}
.cancel path {
	fill: black
}

@media only screen and (max-width: 1024px) {
	.body {
		width: 80vw;
	}
}

@media only screen and (max-width: 812px) {
	.body {
		width: 90vw;
		padding: 2rem 2rem 1.5rem;
	}
	.cancel {
		top: 0.5rem;
		right: 0.5rem;
	}
}
@media only screen and (max-width: 480px) {
	.body {
		padding: 1rem;
	}
	.cancel {
		top: 0.3rem;
		right: 0.3rem
	}
}
'''
'''--- styles/components/nft-card.module.css ---
.skeleton, .card {
	width: 20rem;
	height: 31rem;
	background: linear-gradient(135deg, var(--grey-gradient));
	box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.3);
	border-radius: 1rem;
}
.skeleton { 
	position: absolute;
	top:0;
	left: 0;
	transition: 0.8s;
	opacity: 1;
}
.skeleton.hidden {
	opacity: 0;
	top: -100%
}

.card {
	overflow: hidden;
	position: relative;
	padding-bottom: 4rem; /*to account for the button*/
	text-overflow: ellipsis;
	cursor: pointer;
	transition: 0.3s;
}

.card:hover {
	box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.8);
	transform: scale(1.02);
}

.card::after {
	position: absolute;
	bottom: 0rem;
	left: -2rem;
	width: 120%;
	content: "";
	background-color: rgb(53, 53, 53);
	height: 4rem;
	filter: blur(10px);
}

.mediaContainer {
	width: 100%;
	height: 20rem;
	position: relative;
	background-color: rgba(0, 0, 0, 0.5);
	transition: 0.5s;
}

.mediaContainer.hidden {
	opacity: 0;
}

.mediaContainer button {
	position: absolute;
	width: 100%;
	height: 100%;
	display: flex;
	align-items: center;
	justify-content: center;
	background: transparent;
	border: none;
	transition: 0.5s;
}
.mediaContainer button svg {
	font-size: 3rem;
	filter: drop-shadow(2px 2px 8px rgba(177, 177, 177, 0.3));
}

.mediaContainer button:hover {
	background-color: rgba(173, 173, 173, 0.2);
}
.videoPlayer {
	width: 100% !important;
	height: 100% !important;
}

.infoContainer {
	padding: 0.7rem 0.5rem;
	display: grid;
	grid-template-columns:  1fr 3.7rem 3.4rem;
	align-items: center;
	gap: 0.2rem;
	text-align: center;
}
.infoContainer aside {
	font-size: 0.8rem;
	font-weight: lighter;
	color: var(--grey);
	letter-spacing: 0.1rem;
}
.infoContainer p {
	margin: 0.2rem 0 0;
}

.infoContainer h3 {
	font-family: var(--heading-font);
	margin: 0;
	text-align: left;
	font-size: 1.5rem;
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
	padding: 0 0.5rem;
}
.description {
	position: relative;
	font-size: 0.9rem;
	margin: 0;
	padding: 0 1rem;
	height: 4.2rem;
	word-wrap: break-word;
	overflow-x: hidden;
	overflow-y: scroll;
	text-overflow: ellipsis;
}

.card .buyButton {
	border-radius: 0;
	border-bottom-left-radius: 1rem;
	border-bottom-right-radius: 1rem;
	padding: 0.7rem 0;
	width: 100%;
	position: absolute;
	bottom: 0;
	text-shadow: none;
	z-index: 1;
}

.card .buyButton.hidden {
	opacity: 0;
}

.card .buyButton:hover {
	transform: scale(1) !important;
}

.content {
	display: flex;
	flex-direction: column;
}

.modalContent .mediaContainer {
	border-radius: 2rem;
	height: 34.9rem;
	overflow: hidden;
	background: linear-gradient(160deg, var(--grey-gradient))
}

.modalContent .infoContainer {
	padding: 2rem 0;
	grid-template-columns: 1fr 7rem 7rem;
}

.modalContent .infoContainer h3 {
	font-size: 2rem;
	padding: 0;
}

.modalContent .description {
	font-size: 1rem;
	padding: 0 0 2rem;
	height: auto;
}

.modalContent .mintbaseLink {
	/* display: block; */
	font-style: italic;
	text-align: center;
	margin: 0 0 1rem;
}

.modalContent .description::after{
	display: none;
}

.modalContent .buyButton {
	align-self: center;
}

@media only screen and (max-width: 1024px) {
	.card{
		width: 16rem;
		height: 26rem;
	}
	.mediaContainer {
		height: 16rem;
	}
	.card .infoContainer h3 {
		font-size: 1.1rem;
	}
	.card .infoContainer aside {
		font-size: 0.7rem;
	}
	.card .infoContainer p {
		font-size: 0.8rem;
	}
	.card .description {
		font-size: 0.8rem;
	}

	.modalContent .mediaContainer {
		height: 25.5rem;
	}
}

@media only screen and (max-width: 812px) {
	.modalContent .mediaContainer {
		height: 22.3rem;
	}
	.card {
		width: 18rem;
		height: 28rem;
	}
	.mediaContainer {
		height: 18rem;
	}
}

@media only screen and (max-width: 480px) {
	.modalContent .mediaContainer {
		height: 19rem;
	}
	.modalContent .infoContainer aside {
		font-size: 0.7rem;
	}
	.modalContent .infoContainer p {
		font-size: 0.8rem;
		line-height: 1rem;
	}
	.modalContent .infoContainer h3 {
		font-size: 1.3rem;
	}
	.modalContent .infoContainer {
		padding: 1rem 0;
		grid-template-columns: 1fr 4rem 4rem;
	}
	.modalContent .description {
		font-size: 0.8rem;
	}
}
'''
'''--- styles/globals.css ---
html,
body {
  padding: 0;
  margin: 0;
	height: 100%;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;

	--nav-padding: 6rem;
	--main-gradient: rgb(0, 200, 255), rgb(222, 0, 255), rgb(255, 0, 62);
	--grey-gradient: rgba(63, 76, 80, 1), rgba(47, 36, 39, 1);
	--body-font: 'Roboto', sans-serif;
	--body-text-color: whitesmoke;
	--heading-font: 'Zen Dots', sans-serif;
	--heading-text-color: whitesmoke;
	--accent-color: skyblue;
	--grey: grey;
}
html {
	background-color: black;
}

#__next {
	height: 100%;
}

a {
  color: var(--accent-color);
  text-decoration: none;
}
button {
	cursor: pointer;
}

* {
  box-sizing: border-box;
}

@media only screen and (max-width: 480px) {
	body {
		--nav-padding: 2rem
	}
}

'''
'''--- styles/pages/Home.module.css ---
.homeContainer {
	/* Calc with padding is needed to fit within layout, cant use 100% because layout uses min-height */
	height: calc(100vh - 12rem); /*fallback for no vars*/
	/* setting the height with JS var --vh to determine true mobile window heights */
	height: calc((var(--vh, 1vh) * 100) - (var(--nav-padding) * 2));
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
}
.homeContainer a {
	margin-bottom: 1rem;
	display: block;
	text-align: center;
}
.linksContainer:not(.imageLoaded) {
	filter: blur(2px);
	animation: blur-pulse 3s infinite ease-in-out;
}
.homeTitle {
	position: relative;
	margin-bottom: 2rem;
	cursor: pointer;
	transition: 0.5s;
	filter: blur(0px);
	--title-width: 50rem;
	--color-width-dif: calc(var(--title-width) / 10);
	--move-amount: 0.8;
}
.homeTitle:hover {
	transform: scale(1.08);
}
.homeTitle:not(.imageLoaded) {
	filter: blur(2px);
	animation: blur-pulse 3s infinite ease-in-out;
}
.titlePlain {
	width: var(--title-width);
	filter: drop-shadow(1px 1px 4px rgba(128, 128, 128, 0.4))
}
.titlePlain.isActive {
	filter:invert(1) drop-shadow( 1px 1px 3px rgba(49, 49, 49, 0.4));
}

.titleColor {
	position: absolute;
	top: calc(var(--color-width-dif) / -2);
	left: calc(var(--color-width-dif) / -2);
	width: calc(var(--title-width) + var(--color-width-dif));
}
.titleColor.imageLoaded {
	animation: wiggle 15s ease-in-out 0s infinite alternate;
}
.titleColor.isActive {
	filter: brightness(0);
	animation: none;
}
.logo {
	position: absolute;
	top: -3rem;
	right: -6rem;
	width: 12rem;
	transform: rotateZ(25deg);
	z-index: -1;
	opacity: 0.6;
	transition: 1.5s ease-in-out;
}
.logo.isActive {
	opacity: 0.7;
	margin-top: -8%;
	margin-right: -6%;
	transform: rotateZ(6deg);
	/* animation: fly 10s ease-in-out 0s infinite alternate; */
}

.gridImageBg {
	position: absolute;
	bottom: 0;
	left: 0;
  height: 20vw;
  width: 100vw;
  overflow: hidden;
}

.gridImageBg img {
	opacity: 0;
	filter: blur(4px);
	transition: 0.9s ease-in-out;
}

.gridImageBg.imageLoaded img {
	opacity: 1;
	filter: blur(0px);
}

.waves {
	position: absolute;
	top: 0;
	left: 0;
	z-index: -1;
	filter: blur(0.5px) brightness(0.8);
}

@keyframes blur-pulse {
	0% {
		filter: blur(2px);
	}
	50% {
		filter: blur(14px);
	}
	100% {
		filter: blur(2px);
	}
}

@keyframes wiggle {
	0% {
		margin-top: 0;
		margin-left: 0;
	}
	10% {
		margin-top: 0;
		margin-left: 0;
	}
	20% {
		margin-top: calc(var(--move-amount) * 1.5rem);
		margin-left: calc(var(--move-amount) * 1.5rem);
	}
	30% {
		margin-top: calc(var(--move-amount) * 1.5rem);
		margin-left: calc(var(--move-amount) * -1.5rem);
	}
	40% {
		margin-top: calc(var(--move-amount) * -1.5rem);
		margin-left: calc(var(--move-amount) * 1.5rem);
	}
	50%{
		margin-top: calc(var(--move-amount) * -1.5rem);
		margin-left: calc(var(--move-amount) * -1.5rem);
	}
	60% {
		margin-top: calc(var(--move-amount) * 1.5rem);
		margin-left: calc(var(--move-amount) * -1.5rem);
	}
	70% {
		margin-top: calc(var(--move-amount) * 2rem);
		margin-left: calc(var(--move-amount) * 2rem);
	}
	80% {
		margin-top: calc(var(--move-amount) * 2rem);
		margin-left: calc(var(--move-amount) * -2rem);
	}
	90% {
		margin-top: calc(var(--move-amount) * -2rem);
		margin-left: calc(var(--move-amount) * 2rem);
	}
	100% {
		margin-top: 0;
		margin-left: 0
	} 
}

@media only screen and (max-width: 1024px) {
	.homeTitle {
		--title-width: 35rem;
		--move-amount: 0.6;
	}
}

@media only screen and (max-width: 812px) {
	.homeTitle {
		--title-width: 28rem;
		--move-amount: 0.4;
	}
	.logo {
		top: -3.5rem;
		right: -3rem;
		width: 7rem;
	}
}

@media only screen and (max-width: 480px) {
	.homeTitle {
		--title-width: 18rem;
		--move-amount: 0.2;
	}
	.logo {
		transform: rotateZ(0deg);
		top: -2rem;
		right: calc(50% - 3rem);
		width: 6rem;
	}
}

'''
'''--- styles/utils.module.css ---
/* Global elements */
.titleXl {
	font-size: 6rem;
	text-shadow: 3px 3px 6px grey;
	text-align: center;
	font-family: var(--heading-font);
	color: var(--heading-text-color);
}

.title {
	font-size: 4rem;
	text-shadow: 2px 2px 2px grey;
	text-align: center;
	font-family: var(--heading-font);
	color: var(--heading-text-color);
}

.titleSm {
	font-size: 2rem;
	text-shadow: 1px 1px 1px grey;
	font-family: var(--heading-font);
	color: var(--heading-text-color);
}

.scrim {
	margin-top: 1rem;
	padding: 3rem;
	background: linear-gradient(rgba(49, 49, 49, 0.8), rgba(17, 17, 17, 0.8));
	border-radius: 1rem;
	box-shadow: inset 0 0 4rem 0.5rem rgba(0, 0, 0, 0.8);
}

.centeredList {
	display: flex;
	justify-content: center;
	gap: 1rem;
	flex-wrap: wrap;
}

.primaryButton, .secondaryButton {
	padding: 1rem 1.5rem;

	color: var(--body-text-color);
	font-family: var(--body-font);
	font-size: 1.2rem;
	font-weight: bold;
	text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);

	border: none;
	border-radius: 1.3rem;

	cursor: pointer;
	transition: 0.3s;
}
.primaryButton:hover:not(.noHover), .secondaryButton:hover:not(.noHover) {
	transform: scale(1.05);
}
.primaryButton:active:not(.noHover), .secondaryButton:active:not(.noHover) {
	box-shadow: inset 2px 1px 5px 1px rgba(73, 73, 73, 0.5);
}
.noHover {
	cursor: default;
}
.primaryButton:disabled, .secondaryButton:disabled {
	filter: grayscale(1.0);
	transform: scale(1) !important;
	cursor: inherit;
}

.primaryButton {
	background: linear-gradient(315deg, var(--main-gradient));
	box-shadow: inset 2px 1px 5px 1px rgba(255, 255, 255, 0.5);
}
.secondaryButton {
	background: linear-gradient(315deg, rgb(60, 60, 60), rgb(80, 80, 80));
	box-shadow: inset 2px 1px 5px 1px rgba(167, 167, 167, 0.2);
}
.infoIcon {
	position: absolute;
	top: -0.5rem;
	right: -1.5rem
}
.infoIcon:hover::after {
	z-index: 5;
	position: absolute;
	top: 1.5rem;
	left: 0.5rem;
	width: 9rem;
	background-color: rgba(78, 78, 78, 0.8);
	padding: 0.7rem 0.5rem;
	border-radius: 0.5rem;
	color: var(--body-text-color)
}

/* Helpers */
.noStyle {
	padding: 0;
	background-color: transparent;
	border: none;
	color: inherit;
}

.titleLabel {
	margin-top: 1.6rem;
	margin-bottom: 3rem;
}
.formLink {
	margin-top: 1rem;
}
.centerContent {
	display: flex;
	justify-content: center;
	text-align: center;
	align-items: center;
}
.infoText {
	text-align: center;
	font-style: italic;
}

.error {
	color: rgb(255, 74, 113);
}
.strokeInAccent, .strokeInAccent circle {
	stroke: var(--accent-color)
}

.smallText {
	font-size: 1rem;
}

.inputInfo {
	margin: 0;
}
.blockHeight {
	min-height: 3rem;
}

@media only screen and (max-width: 480px) {
	.titleXl {
		font-size: 3rem;
	}
	.title {
		font-size: 2rem;
	}
	.titleSm {
		font-size: 1.5rem;
	}
	.scrim {
		padding: 1.2rem;
	}
	.primaryButton, .secondaryButton {
		font-size: 1rem;
	}
	.infoIcon:hover::after {
		display: none;
	}
}
'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

'''
'''--- utils.ts ---
import { utils } from 'near-api-js'

export function formatNear(amount: string) {
	return utils.format.formatNearAmount(amount, 2)
}
export function parseNear(amount: string) {
	return utils.format.parseNearAmount(amount)
}
'''