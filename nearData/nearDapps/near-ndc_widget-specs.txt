*GitHub Repository "near-ndc/widget-specs"*

'''--- README.md ---
# widget-specs

## DEPRECATED

⚠️ **Content moved to [near-ndc/gwg](https://github.com/near-ndc/widget-specs)** ⚠️

NDC and the Governance Working Group will be using this repository to create specs for new widgets for [near.social](https://near.social/) through a collaborative approach. We are soliciting input to these specs from whole community. The intent is to get lots of up front and early input on projects that we then intend to issue an RFP for building. Discuss specs in [NDC Tools Telegram](https://t.me/c/1708163325/2318). Contribute to the specs via standard GitHub pull requests to the main branch.

Templates are provided as recommendation. If you have better suggestions on how to structure your spec then feel free to do so. To start out, we have seeded the repo with five blank templates for the next five widgets we'd like to build.

- An NDC Gateway to track and manage work in the three "houses" of NDC (Ozzy is currently building the product book for this)
- Community SBT, which can be described as v2 of the OG SBT within i-am-human
- NEAR Docs, which will be the next iteration of the prototypes already on near.social
- Track My Bounty, a widget to apply for bounties and track progress towards payout across  all grassroots
- Port NDC Academy to near.social

Which other ones should we add and start drafting specs for? Feel free to create on, fork a template, or message @KazanderDad or @blaze0x1 to propose it.

New to technical specs? Here are some resources to help you effectively create and leverage these documents:

- [A Practical Guide To Writing Technical Specs](https://stackoverflow.blog/2020/04/06/a-practical-guide-to-writing-technical-specs/)

[Code of Conduct](https://docs.google.com/document/d/1sqpyXXT0p799o6Tt-T43MGmAjBF--lqi4Do8G-wDVOk/edit?usp=sharing).

'''
'''--- spec-template.md ---
# Spec for a future "REPLACE THIS TEXT" widget
This community-driven spec is a collaborative community-led effort to create a functional specification for a widget to be developed. The goal is to bring clarity and alignment to the deliverables for developers to deliver a functional widget that meets the requirements.

# Overview
<!-- Describe the widget in one sentence. -->
REPLACE THIS TEXT

## Document Status 
<!-- What is the current status of this document? Inception / draft / community consultation / Locked: RFP ongoing / Locked: RFP awarded  -->
REPLACE THIS TEXT

## Other potential names for this widget:
<!-- Propose simple and clean names for the widget. -->
REPLACE THIS TEXT

## Challenge
<!-- List the challenge(s) being solved by this widget -->
REPLACE THIS TEXT

## Scope
<!-- Define the scope and potential phases of the widget -->
REPLACE THIS TEXT

## Requirements
<!-- What are the Minimal Viable Requirements (MV)  the widget should meet to be considered complete? -->
REPLACE THIS TEXT

## Phases
<!-- Do the project have multiple phases? Identify a high-level summary of each phase. -->
REPLACE THIS TEXT

# Use Cases
<!-- Identify and list the collectives that will use this widget and what each one will specifically do. -->
REPLACE THIS TEXT

## Actors
<!-- List all collections that will use the widget. -->
REPLACE THIS TEXT

## Actions
<!-- List the actions each collective will take individually. -->
REPLACE THIS TEXT

## Actor/Action Matrix
<!-- Describe which action is done by which actors. Feel free to use a table format or provide your own graphics. A "swimlane process chart" often works well here. -->
REPLACE THIS TEXT

|         | Action 1 | Action 2 | Action 3 | action 4 |
| ------- | -------- | -------- | -------- | -------- |
| Actor 1 |          |          |          |          |
| Actor 2 |          |          |          |          |
| Actor 3 |          |          |          |          |
| Actor 4 |          |          |          |          |

# Tech Spec
## Functions
<!-- What functions and functionalities should the widget have -->
REPLACE THIS TEXT

## Process Flows
<!-- Describe the process flows -->
REPLACE THIS TEXT

## Screens
<!-- Describe the layout and content of the various screens within the widget -->
REPLACE THIS TEXT

## Dependent Widgets
<!-- Does the widget interact with other widgets? -->
REPLACE THIS TEXT

# Audit
<!-- Identify if this widget needs an audit. Does it store sensitive information, transfer tokens, or have a middleware layer? Consult the Security Workgroup if needed. -->
REPLACE THIS TEXT

'''
'''--- specs/NDC Dashboard.md ---
# Spec for a future "NDC Dashboard" widget
This community-driven spec is a collaborative community-led effort to create a functional specification for a widget to be developed. The goal is to bring clarity and alignment to the deliverables for developers to deliver a functional widget that meets the requirements.

# Overview
The goal of this NDC Dashboard project is to create a foundational layer to help the community find, access, understand, and use the NDC.

## Docutment Status
This document is currently in "post-RFP" phase.

The RFP was published on [gov.near.org](https://gov.near.org/t/ndc-dashboard-request-for-proposal/33080) and on [near.social](https://near.social/#/devgovgigs.near/widget/gigs-board.pages.Post?id=226)

## Other potential names for this widget:
- NDC Dashboard
- NDC Gateway (?)

## Challenge
As governance processes of the Near Digital Collective (NDC) are coming closer to launching we need to create new functionality for users to visualize and interact with the NDC in a simple and yet meaningful way. 

## Scope: What is the NEAR Digital Collective (NDC) and the Governance Working Group (GWG)?
The NDC, originally envisioned by Illia Polosukhin, the co-founder of NEAR Protocol, is now a fully fledged movement led by the NEAR Community. Its goal is to establish a community treasury and governance model that allows the ecosystem to collectively make decisions on everything from funding to elected representatives and more. It's a significant step towards creating a truly decentralized network.

For the purposes of this spec, it can be assumed that the NDC will be made up of a number of Sputnik DAOs (or similar), each with a set of Elected Members and a set of Treasury Trustees. The initial list of DAOs can be assumed to be the following:

- Members voted in by general public vote
  - Council of Advisors
  - Transparency Commission
  - House of Merit

- Members voted in or assigned by other mechanisms (e.g. AstroDAO)
  - Community Treasury
  - Marketing DAO
  - Developer DAO
  - Creatives DAO
  - Governance Working Group

## Requirements
The solution should
- be built on Near Social as a page or widget
- support an ever-evolving structure of DAOs and SubDAOs
- allow all community members to read and engage with NDCs active proposals (e.g. upvote, comment, share)
- allow NDC DAOs’ members to vote on active proposals
- incorporate a “multi-dao dashboard” functionality, with clickable content that allow users to “drill down” into the various DAOs and their sub-DAOs
- incorporate a “single-DAO dashboard” functionality, with clickable content that allow users to “drill down” into the various components (e.g. active proposals, past proposals, treasury history, inbound funding history, outbound funding history, outbound funding leaderboard)
- enable different options depending on the user is a non-member vs. member of a specific DAO (e.g members can create proposals and vote on proposals, non-members cannot)

The solution should support a number of different metrics
- Treasury metrics graphed over time
  - Total / inflows / outflows
  - Total / allocated / unallocated
  - User can select to show values as USD or NEAR
- Proposal metrics filtered by time period (e.g. last 7 days / 30 days / 12 months)
  - Total number of proposals created / approved / rejected
  - Number of proposals created / approved / rejected, filtered by type of proposal
  - Approval Rate (approved / rejected / expired)
  - Approval Time
  - Members’ votes breakdown for a given proposal
- Member metrics
  - Member vote participation across proposals (created / voted yes / voted no / didn’t participate)
  - Most active members (per number of votes)
- Events feed
  - Proposal status (created, approved, rejected)
  - Payment (allocated / disbursed)
  - Vote (launched / approved / rejected / expired)
  - Member change (added / removed)

'''
'''--- specs/NDC-academy.md ---
# NDC Academy Spec

This community-driven spec is a collaborative community-led effort to create a functional specification for a widget to be developed. The goal is to bring clarity and alignment to the deliverables for developers to deliver a functional widget that meets the requirements.

# Overview
This widget is intentended to help onboard people into NDC by offering them access to introductory content about the various aspects of NDC, and by rewarding them (with an SBT Badge or with Near) after learning about NDC and gettting involved.

A preliminary version of the intended functionality was already built on the DoDAO platform [here] (https://near.dodao.io/ndc-near-mainnet/onboarding/guides). This spec is intended to document an forked new and upgraded version that would instead be hosted on alpha.near.org

## Status
<!-- What is the current status of this document? Inception / draft / community consultation / Locked: RFP ongoing / Locked: RFP awarded  -->
This document is currently in "inception" status. We are looking for someone willing to take a stab at a first draft.

## Challenge
List the challenge(s) being solved by this widget.

## Scope
Define the scope and potential phases of the widget.

## Requirements
What are the Minimal Viable Requirements (MV)  the widget should meet to be considered complete?

## Phases
Do the project have multiple phases? Identify a high-level summary of each phase.

# Use Cases
Identify and list the collectives that will use this widget and what each one will specifically do.

## Actors
List all collections that will use the widget.
## Actions
List the actions each collective will take individually.

## Actor/Action Matrix

|         | Action 1 | Action 2 | Action 3 | action 4 |
| ------- | -------- | -------- | -------- | -------- |
| Actor 1 |          |          |          |          |
| Actor 2 |          |          |          |          |
| Actor 3 |          |          |          |          |
| Actor 4 |          |          |          |          |

# Tech Spec
## Functions
What functions and functionalities should the widget have

## Process Flows
Describe the process flows

## Screens
Describe the layout and content of the various screens within the widget

## Dependent Widgets
Does the widget interact with other widgets?

# Audit
Identify if this widget needs an audit. Does it store sensitive information, transfer tokens, or have a middleware layer? Consult the Security Workgroup if needed.

'''
'''--- specs/NDC-gateway.md ---
# Spec for a future "NDC Gateway" widget
This community-driven spec is a collaborative community-led effort to create a functional specification for a widget to be developed. The goal is to bring clarity and alignment to the deliverables for developers to deliver a functional widget that meets the requirements.

# Overview
<!-- Describe the widget in one sentence. -->
This widget will allow elected representatives (members of the various NDC "houses") to manage the tasks they need to perform, including but not limited to:
- See when they are up for reelection
- See which proposals they have authored or co-signed
- View remaining budget for the current congress
- See upcoming / passed / vetoed / failed proposals
- Write, edit and co-sign proposals
- Vote on proposals
- Investigations: CRUD actions
- Warn / ban / reinstate members

## Docutment Status
<!-- What is the current status of this document? Inception / draft / community consultation / Locked: RFP ongoing / Locked: RFP awarded  -->
This document is currently in "inception" phase. We are looking for someone to take a stab at creating a first draft spec.

## Other potential names for this widget:
- Track My Grant
- NDC Grants & Bounties

## Challenge
<!-- List the challenge(s) being solved by this widget -->
REPLACE THIS TEXT

## Scope
<!-- Define the scope and potential phases of the widget -->
REPLACE THIS TEXT

## Requirements
<!-- What are the Minimal Viable Requirements (MV)  the widget should meet to be considered complete? -->
REPLACE THIS TEXT

## Phases
<!-- Do the project have multiple phases? Identify a high-level summary of each phase. -->
REPLACE THIS TEXT

# Use Cases
<!-- Identify and list the collectives that will use this widget and what each one will specifically do. -->
REPLACE THIS TEXT

## Actors
<!-- List all collections that will use the widget. -->
REPLACE THIS TEXT

## Actions
<!-- List the actions each collective will take individually. -->
REPLACE THIS TEXT

## Actor/Action Matrix
<!-- Describe which action is done by which actors. Feel free to use a table format or provide your own graphics. A "swimlane process chart" often works well here. -->
REPLACE THIS TEXT

|         | Action 1 | Action 2 | Action 3 | action 4 |
| ------- | -------- | -------- | -------- | -------- |
| Actor 1 |          |          |          |          |
| Actor 2 |          |          |          |          |
| Actor 3 |          |          |          |          |
| Actor 4 |          |          |          |          |

# Tech Spec
## Functions
<!-- What functions and functionalities should the widget have -->
REPLACE THIS TEXT

## Process Flows
<!-- Describe the process flows -->
REPLACE THIS TEXT

## Screens
<!-- Describe the layout and content of the various screens within the widget -->
REPLACE THIS TEXT

## Dependent Widgets
<!-- Does the widget interact with other widgets? -->
REPLACE THIS TEXT

# Audit
<!-- Identify if this widget needs an audit. Does it store sensitive information, transfer tokens, or have a middleware layer? Consult the Security Workgroup if needed. -->
REPLACE THIS TEXT

'''
'''--- specs/NDC-voting-UI.md ---
# Spec for a future "NDC Voting" widget
This community-driven spec is a collaborative community-led effort to create a functional specification for a widget to be developed. The goal is to bring clarity and alignment to the deliverables for developers to deliver a functional widget that meets the requirements.

# Overview
<!-- Describe the widget in one sentence. -->
NDC is about decentralized governance, which we are planning to achieve by allowing our users to vote. This widget is intended to be the first MVP version to allow users interact with the voting protocol by providing functionality to create a proposal, find active proposals, and vote on active proposals. 

## Document Status 
<!-- What is the current status of this document? Inception / draft / community consultation / Locked: RFP ongoing / Locked: RFP awarded  -->
This document is currently in "inception" status. We are looking for anyone who would be interested in helping out creating a first draft.

## Other potential names for this widget:
<!-- Propose simple and clean names for the widget. -->
REPLACE THIS TEXT

## Challenge
<!-- List the challenge(s) being solved by this widget -->
REPLACE THIS TEXT

## Scope
<!-- Define the scope and potential phases of the widget -->
REPLACE THIS TEXT

## Requirements
<!-- What are the Minimal Viable Requirements (MV)  the widget should meet to be considered complete? -->
REPLACE THIS TEXT

## Phases
<!-- Do the project have multiple phases? Identify a high-level summary of each phase. -->
REPLACE THIS TEXT

# Use Cases
<!-- Identify and list the collectives that will use this widget and what each one will specifically do. -->
REPLACE THIS TEXT

## Actors
<!-- List all collections that will use the widget. -->
REPLACE THIS TEXT

## Actions
<!-- List the actions each collective will take individually. -->
REPLACE THIS TEXT

## Actor/Action Matrix
<!-- Describe which action is done by which actors. Feel free to use a table format or provide your own graphics. A "swimlane process chart" often works well here. -->
REPLACE THIS TEXT

|         | Action 1 | Action 2 | Action 3 | action 4 |
| ------- | -------- | -------- | -------- | -------- |
| Actor 1 |          |          |          |          |
| Actor 2 |          |          |          |          |
| Actor 3 |          |          |          |          |
| Actor 4 |          |          |          |          |

# Tech Spec
## Functions
<!-- What functions and functionalities should the widget have -->
REPLACE THIS TEXT

## Process Flows
<!-- Describe the process flows -->
REPLACE THIS TEXT

## Screens
<!-- Describe the layout and content of the various screens within the widget -->
REPLACE THIS TEXT

## Dependent Widgets
<!-- Does the widget interact with other widgets? -->
REPLACE THIS TEXT

# Audit
<!-- Identify if this widget needs an audit. Does it store sensitive information, transfer tokens, or have a middleware layer? Consult the Security Workgroup if needed. -->
REPLACE THIS TEXT

'''
'''--- specs/community-sbt.md ---
# Spec for a future "Community SBT" widget
This community-driven spec is a collaborative community-led effort to create a functional specification for a widget to be developed. The goal is to bring clarity and alignment to the deliverables for developers to deliver a functional widget that meets the requirements.

# Overview
<!-- Describe the widget in one sentence. -->
This widget will allow users to apply for a Community SBT as a part of [i-am-human](https://i-am-human.app/), whereby users are awarded this SBT if they are verified as "human" by other applicants. How will this work? A user first stakes Near to be able to apply. They are then directed to come back at a given date and time, at which point many applicants will log on simultaneously. The widget will pair up applicants randomly and bring them into paired video chats where they introduce themselves to each other and then classify the other as either "not suspicious" or "suspicious". After three successful video chats the applicant is accepted and half of their stake is returned. Some of the chats (one of three?) will be with trusted community members, who are incentivized to help out by offering them the other half of the applicant's stake. Some of the chats will be with "actors" who are told to act suspiciously, and if a user classifies them as suspicious then they lose their stake.

## Document Status 
<!-- What is the current status of this document? Inception / draft / community consultation / Locked: RFP ongoing / Locked: RFP awarded  -->
This document is currently in "inception" status. We are looking for someone willing to take a stab at creaing a first draft.

## Other potential names for this widget:
- i-am-human Community SBT
- i-am-human Social SBT
- i-am-human OG SBT v2

## Challenge
<!-- List the challenge(s) being solved by this widget -->
REPLACE THIS TEXT

## Scope
<!-- Define the scope and potential phases of the widget -->
REPLACE THIS TEXT

## Requirements
<!-- What are the Minimal Viable Requirements (MV)  the widget should meet to be considered complete? -->
REPLACE THIS TEXT

## Phases
<!-- Do the project have multiple phases? Identify a high-level summary of each phase. -->
REPLACE THIS TEXT

# Use Cases
<!-- Identify and list the collectives that will use this widget and what each one will specifically do. -->
REPLACE THIS TEXT

## Actors
<!-- List all collections that will use the widget. -->
REPLACE THIS TEXT

## Actions
<!-- List the actions each collective will take individually. -->
REPLACE THIS TEXT

## Actor/Action Matrix
<!-- Describe which action is done by which actors. Feel free to use a table format or provide your own graphics. A "swimlane process chart" often works well here. -->
REPLACE THIS TEXT

|         | Action 1 | Action 2 | Action 3 | action 4 |
| ------- | -------- | -------- | -------- | -------- |
| Actor 1 |          |          |          |          |
| Actor 2 |          |          |          |          |
| Actor 3 |          |          |          |          |
| Actor 4 |          |          |          |          |

# Tech Spec
## Functions
<!-- What functions and functionalities should the widget have -->
REPLACE THIS TEXT

## Process Flows
<!-- Describe the process flows -->
REPLACE THIS TEXT

## Screens
<!-- Describe the layout and content of the various screens within the widget -->
REPLACE THIS TEXT

## Dependent Widgets
<!-- Does the widget interact with other widgets? -->
REPLACE THIS TEXT

# Audit
<!-- Identify if this widget needs an audit. Does it store sensitive information, transfer tokens, or have a middleware layer? Consult the Security Workgroup if needed. -->
REPLACE THIS TEXT

'''
'''--- specs/kudos.md ---
# Spec for a future "Kudos" widget
This community-driven spec is a collaborative community-led effort to create a functional specification for a widget to be developed. The goal is to bring clarity and alignment to the deliverables for developers to deliver a functional widget that meets the requirements.

# Overview
<!-- Describe the widget in one sentence. -->
This widget will allow any verified human to give any NEARSocial/Discovery account a Kudo.

## Document Status 
<!-- What is the current status of this document? Inception / draft / community consultation / Locked: RFP ongoing / Locked: RFP awarded  -->
This document is currently in "Locked" status. A prototype exists and @starpause will finalize the spec and ux design.

## Other potential names for this widget:
- High Five
- Props

## Challenge
<!-- List the challenge(s) being solved by this widget -->
The goal of this widget is to foster and improve recognition and celebrations of individuals, nodes, projects, workgroups or collectives for their contribution to NEAR. 

This will server as a fundemental MVP for Reputation and Badges and create a general widget that can be forked and used for many use cases

## Scope
<!-- Define the scope and potential phases of the widget -->
Finalize the features and UX for launch, complete integrations to IamHuman and SBT standard.

## Requirements
<!-- What are the Minimal Viable Requirements (MV)  the widget should meet to be considered complete? -->
- Tag any BOS/NEARSocial/Discovery account
- Notify the account of the Kudo via the Notifications API
- Upvote a Kudo
- Comment on a Kudo
- Show all comments
- Integration with IamHuman
- Send account SBT Badge for each Kudo

## Phases
<!-- Do the project have multiple phases? Identify a high-level summary of each phase. -->
- Finalize UX design add a table view
- Integrate with IamHuman
- Integrate with SBT Standard

# Use Cases
<!-- Identify and list the collectives that will use this widget and what each one will specifically do. -->
Any account registered on BOS/NEARSocial/Discovery will be able to use the widget to send Kudos

## Actors
<!-- List all collections that will use the widget. -->
Individual Accounts

## Actions
<!-- List the actions each collective will take individually. -->
- Send Kudo
- UpVote
- Comment
- Share

## Actor/Action Matrix
<!-- Describe which action is done by which actors. Feel free to use a table format or provide your own graphics. A "swimlane process chart" often works well here. -->

|         | Action 1  | Action 2 | Action 3 | action 4 |
| ------- | --------  | -------- | -------- | -------- |
| Actor 1 | Send Kudo | Upvote   | Comment  |  Share   |

# Tech Spec
## Functions
<!-- What functions and functionalities should the widget have -->
- isHuman
- mintSBT

## Process Flows
<!-- Describe the process flows -->
REPLACE THIS TEXT

## Screens
<!-- Describe the layout and content of the various screens within the widget -->
REPLACE THIS TEXT

## Dependent Widgets
<!-- Does the widget interact with other widgets? -->
##### Main
[Kudos.Styles](https://near.social/#/neardigitalcollective.near/widget/Kudos.Styles)

[Common.Compose](https://near.social/#/neardigitalcollective.near/widget/Common.Compose)
[Kudos](https://near.social/#/neardigitalcollective.near/widget/Kudos)
[kudoBox](https://near.social/#/neardigitalcollective.near/widget/kudoBox)
[FollowButton](https://near.social/#/neardigitalcollective.near/widget/FollowButton)
[MainPage.Post.Header](https://near.social/#/neardigitalcollective.near/widget/MainPage.Post.Header)
[MainPage.Post](https://near.social/#/neardigitalcollective.near/widget/MainPage.Post)
[showCommentsButton](https://near.social/#/neardigitalcollective.near/widget/showCommentsButton)

# Audit
<!-- Identify if this widget needs an audit. Does it store sensitive information, transfer tokens, or have a middleware layer? Consult the Security Workgroup if needed. -->

'''
'''--- specs/near-docs.md ---
# Spec for a future "NEAR Docs" widget
This community-driven spec is a collaborative community-led effort to create a functional specification for a widget to be developed. The goal is to bring clarity and alignment to the deliverables for developers to deliver a functional widget that meets the requirements.

# Overview
<!-- Describe the widget in one sentence. -->
This widget should work similar to a wiki which will allow users to create and edit publically accessible documents, with some added features such as in-line commenting, ability to curate lists of wiki pages, ability to set different access rights for different users, and github-like pull requests to merge different drafts into the document.

There are already a few prototypes available on near.social for this functionality, see [here](https://near.social/#/testwiki.near/widget/WikiOnSocialDB), [here](https://near.social/#/humanman.near/widget/wiki.near.org), and [here](https://near.social/#/root.near/widget/Wiki). This spec builds on those prototypes.

Alternative names for this widget:
- Near Docs
- Near Wiki
- NDC Docs
- NDC Wiki

## Status
<!-- What is the current status of this document? Inception / draft / community consultation / Locked: RFP ongoing / Locked: RFP awarded  -->
This document is currently in "inception" status. We are looking for someone willing to take a stab at a first draft.

## Challenge
<!-- List the challenge(s) being solved by this widget -->
REPLACE THIS TEXT

## Scope
<!-- Define the scope and potential phases of the widget -->
REPLACE THIS TEXT

## Requirements
<!-- What are the Minimal Viable Requirements (MV)  the widget should meet to be considered complete? -->
REPLACE THIS TEXT

## Phases
<!-- Do the project have multiple phases? Identify a high-level summary of each phase. -->
REPLACE THIS TEXT

# Use Cases
<!-- Identify and list the collectives that will use this widget and what each one will specifically do. -->
REPLACE THIS TEXT

## Actors
<!-- List all collections that will use the widget. -->
REPLACE THIS TEXT

## Actions
<!-- List the actions each collective will take individually. -->
REPLACE THIS TEXT

## Actor/Action Matrix
<!-- Describe which action is done by which actors. Feel free to use a table format or provide your own graphics. A "swimlane process chart" often works well here. -->
REPLACE THIS TEXT

|         | Action 1 | Action 2 | Action 3 | action 4 |
| ------- | -------- | -------- | -------- | -------- |
| Actor 1 |          |          |          |          |
| Actor 2 |          |          |          |          |
| Actor 3 |          |          |          |          |
| Actor 4 |          |          |          |          |

# Tech Spec
## Functions
<!-- What functions and functionalities should the widget have -->
REPLACE THIS TEXT

## Process Flows
<!-- Describe the process flows -->
REPLACE THIS TEXT

## Screens
<!-- Describe the layout and content of the various screens within the widget -->
REPLACE THIS TEXT

## Dependent Widgets
<!-- Does the widget interact with other widgets? -->
REPLACE THIS TEXT

# Audit
<!-- Identify if this widget needs an audit. Does it store sensitive information, transfer tokens, or have a middleware layer? Consult the Security Workgroup if needed. -->
REPLACE THIS TEXT

'''
'''--- specs/nominate.md ---
# Spec for a future "Nominate" widget
This community-driven spec is a collaborative community-led effort to create a functional specification for a widget to be developed. The goal is to bring clarity and alignment to the deliverables for developers to deliver a functional widget that meets the requirements.

# Overview
<!-- Describe the widget in one sentence. -->
The Nominate widget will probably be a fork of the "Kudos" and/or "Upvote" widgets on Near Social, and will allow users who have been validated as real humans to either nominate themselves or nominate other humans for upcoming elections. 

## Document Status 
<!-- What is the current status of this document? Inception / draft / community consultation / Locked: RFP ongoing / Locked: RFP awarded  -->
This document is currently in inception / early draft stage. We're looking for people who are interested in helping draft this spec.

## Other potential names for this widget:
<!-- Propose simple and clean names for the widget. -->
- Nominate
- Candidacy
- NDC Candidates
- NDC Nominations
- Elect Me!

## Challenge
<!-- List the challenge(s) being solved by this widget -->
The voting contract is currently being built to let the community to vote on who will be their elected representatives. This voting UI assumes that there is a list of condidates to vote on. This widget is intended to help originate the list of candidates.

Other concerns and challenges we must solve underway include:
1. There are not yet any defined criteria for who gets to be a candidate nor how the candidacy process will work. This widget, and the discussion we will have as a community while drafting the spec for the widget, will help clarify the conditions and will help guide future candidates through the process. This document makes no assumptions on criteria to qualify, other than that candidates should be verified human.
2. Does a person have to announce their candidacy on-chain by nominating themselves prior to others being able to nominate them? Or can anyone nominate anyone, regardless of if they have announced their candidacy. The design in this document assumes the latter, but adds a requirement to self-nominate before becoming a full blown candidate that users can vote into office. The reason for this is that we don't want to enable wasting a vote on someone who hasn't confirmed that they would be interesting in taking the seat if elected.
3. Feedback interface from the voting contract can be conteplated for a v2: 1) update candidate status from running to elected or defeated, 2) differentiate between incumbents and challengers.
4. Should the Nominate widget only support NDC's official Council Roles, or should any DAO be able to leverage the functionality? This becomes a challenge with the whitelist of admins being able to curate the Council Roles, while at the same time allowing the general public to create their own Council Roles without oversight.
5. Should we add an option to contribute monetarily to the nominee?

## Scope
<!-- Define the scope and potential phases of the widget -->

## Requirements
<!-- What are the Minimal Viable Requirements (MV)  the widget should meet to be considered complete? -->
- only accounts which have been validated by i-am-humans are allowed to interact with the widget
- any human can nominate themselves, and can only nominate themselves to one position (house) at a time
- any human can nominate any other human (TBD: Does the nominee have to already be self-nominated first)
- differentiate between incumbents and challengers
- support the three NDC houses by default, but also support public candidacy and election to any other DAO

## Phases
<!-- Do the project have multiple phases? Identify a high-level summary of each phase. -->
- First design and build the predecessor widgets: Kudos and/or Upvote. Becase giving a nomination to someone is largely similar (technically) to giving them Kudos or to upvoting their self-nomination.
- Fork the predecessors and rename from Kudos / Upvote to Nominate
  - Add the human-gating functionality. Only i-am-human-verified accounts should be able to interact with this widget.
  - Ensure that the widget can produce a harmonized list of candidates for each NDC vote 
- Add any other features to support the nomination process, such as
  - Support for candidate to introduce themselves and their platform
  - Links to their socials and contact info
  - Meet the candidate: Upcoming AMA events and recordings of past events

# Use Cases
<!-- Identify and list the collectives that will use this widget and what each one will specifically do. -->
- DAO Admins: Will open up election slots for candidates to nominate themselves or others towards. E.g. House of Merit will open up 10 new slots for election within a month, and specify that only candidates with three nominations or more will be eligible to be voted upon.
- NDC Candidates: Will nominate themselves to one of three default NDC slot, and will enter information about themselves and their campaign platform.
- Candidates to other DAOs: Will nominate themselves to a non-NDC DAO council position, and will enter information about themselves and their campaign platform.
- Friends of candidates: Will nominate their preferred Candidates to a slot, or give their support to a self-nominated candidate.
- Voters: Will vote on those candidates that have passed the minimum threshold of Nominations

## Actors
<!-- List all collections that will use the widget. -->
Admins
- A user is an admin if they have been added to the admin whitelist by another admin
- Admins can create and modify Council Roles, to which people can then be nominated
- Admins can add or remove other fellow admins

Non-human Users
- A user is anyone with acess to near.social that is either not logged in, or is logged in but has not been verified by i-am-human
- These actors have view-only access to the widget, they have no ability to nominate or otherwise affect the state

Nominators
- A Nominator is any user who is logged into near.social and has been verified by i-am-human
- Nominators have access to the base feature of the app: They can nominate themselves or others, and they can withdraw their nominations.

Nominees
- Nominees are a subset of nominators who have also received a nomination
- Nominees have the added ability of viewing the nominations that they have received

## Actions
<!-- List the actions each collective will take individually. -->
Common actions within this widget include
- Nominate someone (or self)
- Withdraw nomination
- Create or Deprecate Council Role
- Pause or Unpause Council Role
- Modify Council Role
- Increment the Congress Counter for a Council Role

## Actor/Action Matrix
<!-- Describe which action is done by which actors. Feel free to use a table format or provide your own graphics. A "swimlane process chart" often works well here. -->
REPLACE THIS TEXT

|                                         | Admins   | Nominators | Nominees | Non-human Users |
| -------                                 | -------- | -------- | -------- | -------- |
| Nominate someone                        |  Yes        |  Yes        |  Yes        |  No         |
| Withdraw nomination                     |  Yes        |  Yes        |  Yes        |  No         |
| Create or Deprecate Council Role        |  Yes        |  No         |  No         |  No         |
| Pause or Unpause Council Role           |  Yes        |  No         |  No         |  No         |
| Modify Council Role                     |  Yes        |  No         |  No         |  No         |
| Increment Congress Counter              |  Yes        |  No         |  No         |  No         |

# Tech Spec
## Functions
<!-- What functions and functionalities should the widget have -->
REPLACE THIS TEXT

## Process Flows
<!-- Describe the process flows -->
REPLACE THIS TEXT

## Screens
<!-- Describe the layout and content of the various screens within the widget -->
The Nomination widget will have three screens. Two of these will be visible to all users, while the admin screen will only be available to whitelisted users.

### Admin Screen
Any account that's been whitelisted will have access to the Admin screen, which will have the following main functions:

1. Create new Council Role 
   - For example when a new Grassroots DAO has been recognized, they may want to create a Council Role for their DAO, to which people can be nominated.
   - When creating a new Council Role there are two input fields required: 1) Council Role name (string), and 2) Minimum required nominations (integer), which defaults to 3 but can be changed
   - The Congress Counter (integer) will default to 1 for a new Council Role
2. Modify a role: Change minimum required count of nominations for the Council Role
3. Modify a role: Change name of the Council Role
4. Increment the Congress Counter for the Council Role
   - Immediately after an election to one Congress has been made, then the Congress Counter should be incremented
   - The previous Congress becomes locked. All nominations for that Congress are archived
   - A new Congress is opened up, with a blank slate (there are zero nominations yet for the new Congress)
5. Pause / Unpause / Deprecate the Council Role
   - Once an election have been held for a Congress, there may be a need to wait for a while until opening nominations for the next Congress. 
   - When a DAO ceases to exist, then the corresponding Council Role should be deprecated
6. Add new admins
   - Only accounts that have been verified by i-am-human are allowed to be added
7. Remove a current admin
   - If there is only one admin remaining then the Remove Admin function should be disabled (we need at least one admin)

### Nomination Screen
This is the default view when first opening the app. Users can nominate themselves or other users to the various currently open Council Roles. A Council Role is open after it has been created and it's status is not Paused nor Deprecated. 

Requirements:
- Only accounts that have been verified by i-am-human can nominate other accounts
- Only accounts that have been verified by i-am-human and can be nominated
- one user can nominate another to multiple open roles
- One user can only self-nominate to one currently open role at a time. So if a user is currentky self-nominated to an open role then there is no longer an option for them to self-nominate tona second role, unless they first withdraw their current nomination. 

This screen will show a nomination dialog with three key inputs
  - Select who to nominate (single select)
  - Select which role(s) I'm nominating this person to
    - Note: When listing the Council Roles, only currently active roles should be shown
    - Possible to multi-select several roles
  - Description of why I'm nominating this person. we exoect that the justification might only be a few words or sentences in most cases. however, since candidates can self-nominate, we can exect that self nominations will be lengthy. for this reason, this field should be large and should support markup annotation, to allow candidates to introduce themselves properly. 

After pressing nominate button (submit) then the app will check that the nominated account is indeed verified by i-am-human before saving the nomination.

The screen also shows a listing of all accounts that the logged in user has nominated to the various Council Roles
   - Option to withdraw nominations if the Council Role is still open
   - Option to update the justification section of a current nomination. 
   - This listing includes both current and past Council Roles, where an account might have been nominated several times, either to different roles and/or to different Congress Counters

### Nominee Screen
This screen is for the user to check what roles they have been nominated to, and to analyze the current state of nominations across all roles.

The first list on this screen shows all nominations that the logged in user has received for currently open roles.

The second list on this screen shows all nominations for all roles
  - prepopulated with only currently acive roles
  - allows the user to filter the list by clicking on a role to see only active nominations that pertain to that role
  - once a role has been selected, the user can also select any of the previous Congress Counters for that role, to see the archived nominations.

## Dependent Widgets
<!-- Does the widget interact with other widgets? -->

### Inbound Dependencies
This widget depends on the registry contract (registry.i-am-human.near) within the i-am-human ecosystem of SBTs. Prior to enabling each nomination action we need to ensure that the logged in user account is a verified human account. And prior to finalizeing a nomination we need to ensure that the nominee is also a verified human account.

### Outbound Dependencies
The NDC Voting contract / widget in return depends on this Nomination widget. The list of electable candidates shown in the Voting widget will be generated by querying this Nomination widget. All accounts that have equal to or more nominations than the required minimum for a role, and for which the nominee has also self-nominated to the same role, will be added to the list of electable candidates.

# Audit
<!-- Identify if this widget needs an audit. Does it store sensitive information, transfer tokens, or have a middleware layer? Consult the Security Workgroup if needed. -->
REPLACE THIS TEXT

'''
'''--- specs/regional_communities.md ---
# Spec for a future "Regional Communities" widget
This community-driven spec is a collaborative community-led effort to create a functional specification for a widget to be developed. The goal is to bring clarity and alignment to the deliverables for developers to deliver a functional widget that meets the requirements.

# Overview
<!-- Describe the widget in one sentence. -->
This widget will help users find, join and interact with communities that are in their region, speaks their language, and/or are aligned with their interest. It provides a natural way of growing all the regional communities within NEAR, emphasising belonging and natural community growth rather than competition.

Regional Communities are a crucial component of growing the NEAR ecosystem. People don't join because of the tech. People join because of other people. People organize and interact. People crave networking and a sense of belonging. All of this can be done through regional communities. This spec for a widget enables an organically evolving structure of related commmunities, and it allows for creating varied and multifaceted communities such as:
- Near Stockholm Degens
- Near Africa DeFi and Refi
- Near Spanish Global Devs
- Near Spanish Florida Gaming & Events
- Near Miami Spanish

## Document Status 
<!-- What is the current status of this document? Inception / draft / community consultation / Locked: RFP ongoing / Locked: RFP awarded  -->
This document is a very early draft. Looking for community input to make it a better and more fully documented draft.

## Other potential names for this widget:
<!-- Propose simple and clean names for the widget. -->
List of possible names: 
- My Communities
- My Community
- Regional Community
- Regional Communities
- Community Finder

## Challenge
<!-- List the challenge(s) being solved by this widget -->
It's currently really easy to create a new community on near.social. All you have to do is create a new account with your community name and start promoing it. But this unstructured approach comes with a lot of challenges:
- If you want to start a new community you have to start from scratch, and you have to build your own membership base from scratch.
- If you're simply looking for a community to join, it's not easy to find one in the unstrucctured mess
- There is competition by default". If two or more communities were formed with the same or similar scope, then they are bound to try and attract member following from the same community base, potential members who werent interested in the choice from the beginning but just wanted to find their one "home"

Most communities form around some intersection of geography, language and vertical constellation / interest. But they are not getting any help in finding their place in these dimensions. Similarly, new users looking for a community to join have a hard time finding the right community in the right intersection.

There is no natural evoution provided for communities that grow "too large" or too diverse. If they want to split then the only option is to create a new  sibling- or child-community, again from scratch. Similarly, there is no natural way of merging two communities without having to agree to delete one (with all it's history) and ask the members each to manually move to the new community.

## Scope
<!-- Define the scope and potential phases of the widget -->
In scope
- All geographies
- All languages
- All verticals
- All human users interested in joining, forming or managing communities of likeminded

Typical resons to come together in a community:
- Networking
- Learning from each other, discussing
- Support and help each other
- Find new friends, build meaningful relationship

What is NOT within the scope of regional communities? Groups that are not bulding lasting relationships, groups where the only purpose is to facilitate one-time or temporary transactions.
- Buy and sell groups
- Job listing / job search
- Gig economy

## Requirements
<!-- What are the Minimal Viable Requirements (MV)  the widget should meet to be considered complete? -->
The minimum requirements the widget should meet include:
- Built on BOS / Alpha / Near.social
- Can have a single admin owner, several owners / admins, or a DAO as an owner
- Members can post messages within community
- Messages posted within communities that I follow will show up in my stream
- Supports all three dimensions
   - Geography as a hierarchy (each community has one geography, and has a parent with a higher level geography)
   - Language as a flat list, single-select
   - Consteallation as tags, multi-select
- Allows the owner to split the community on one of the dimensions
- Allows the owner to reassign ownership fully, and allows the owner(s) to give ownership rights to others

## Phases
<!-- Do the project have multiple phases? Identify a high-level summary of each phase. -->

### Phase 1: MVP
- The app owner can create global parent communities for each Constellation
- Users can find their community, assign them selves membership permissionlessly (similar to "follow")
- Members can start posting messages to the Community board.
- Members can perform a sibling split along one of the three dimensions
- Members can perform a child split along one of the three dimensions, 
- Member executing the split will become the owner of the new Community

### Phase 2: Admin Functions
- Admins can assign other admins
- Users can request core memberships
- Admins can approve core memberships
- Admins can warn, silence and ban users

### Phase 3: Enable voting
- Members can request a vote on splitting the Community
- Members can launch simple EasyPolls
- Members can vote in a new core user
- Members can vote to warn / silence / ban an offending user

# Use Cases
<!-- Identify and list the collectives that will use this widget and what each one will specifically do. -->

## Actors
<!-- List all collections that will use the widget. -->
- Members
   - Admin members
   - Core members
   - Home members
   - Hangaround members
- Non-members
   - Non-member humans
   - Non-member users

## Actions
<!-- List the actions each collective will take individually. -->

### Find and Join a Community
Finding a community aligned with my interests should be very easy. It's a core concept of this widget and serves to get people into open and collaborative communities rather than creating competing factions.

Searching for communities should be possible through a few different ways
- Search by map. Zoom into a map and update the list of available communities accordingly
- Seach-as-you-type.
   - Search by fuzzy search of geographies. Start typing in a city, country or region and all available options are shown. 
   - Search by fuzzy search of constellations. Start typing in a constellation and all available options are shown.
- Select you language, which updates the available communities. Default language is English.
- Any combination of the above will further narrow the search

### Approve a new Community member
Approvind a new community member could be as simple as a "follow back" by the owner of the community or someone who has been given the keys to control the community account. 

It is recommended that only human-verified accounts be allowed to become members, as a minimum requirement.

A drawback of this approach is that there is no vote. Any single admin can follow or unfollow, which may be too arbitrary for some communities. Another drawback is that the "follow" feature would no longer be available to use for its originally intended purpose. A more structured approach to membership may have to be contemplated. Optins include:
- user follows the Community and automatically becomes a member as long as some criteria are filled (e.g. is human verified and accepts the code of conduct) => Preferred
- user applies for membership, followed by a majority vote to approve the application
- membership is open to anyone without approval
- membership is open to anyone, with the restriction that they can be a full member of one and only one community

This author recommends a combination, whereby there are four types of membership:
1. Home Membership - each user can define their one and only "home" membership = the community that is most closely aligned with them. This can be done without approval from the community, but each user can only select exactly one home community (or not make the selection).
2. Hangaroud Membership - any user can be a hangaround. This feature is similar to a standard "follow" and should be the default membership for most communities.
3. Core Member - the user has been approved in some way (by community vote or admin vote) to be a core member of the community. This option should not be a default option, but could be a possibility to enable for some communities that desire this option.
4. Admin Member - the user has admin rights for the group

It is this authors recommendation that commuinties be open for anyone to join and that applications are "accepted by default". If limitations are desired then it's better to use the "silence the member" feature than to go to "accepted pending approval" which signals a closed or restricted society.

### Split a Community
Instead of creating a Community from scratch, splitting an existing Community into two should be the default way of creating new communities. This is a core feature of the Community widget design.

When splitting a community, the key question to ask the user is this: "Along which dimension do you want the split to occur: Geography, Language, or Constellation?"
- If splitting along the Geography dimension then ask also if it's a sibling-split of child-split. 
   - Example of sibling-split: [Near Sweden] splits into [Near Sweden] + [Near Norway], which becomes the sibling Community with the same parent
   - Example of child-split: [Near Sweden] splits into [Near Sweden] + [Near Stockholm], which becomes the child Community of the preceeding community
- If splitting along the Language dimension then 
   - Simply ask which other language the new community should serve, which becomes a sibling Community. Example: [Near Switzerland English] splits into [Near Switzerland English] and [Near Switzerland German], both of which has the same parent [Near Eurppe English]
- If splitting along the Constellations dimension then
   - if there is already a constellation picked, then simply ask what constellation the new Community should serve and it becomes a sibling Community. Example: [Near Somalia DeFi] splits into [Near Somalia DeFi] + [Near Somalie Gaming]
   - if there was no prior constellation picked, then ask which Constellations the new Community should serve and becomes a child Community. Example: [Near Uganda] splits into [Near Uganda] + [Near Uganda NFT]
- The split has to be along at one and only one of the dimensions. The split cannot proceed unless there is an actual change proposed, one that will make the new Community different by design from the original Community from which it splits.

Any member can request a split, it must not be approved by the admins. 
- The members voting should be asked a few questions
   - Do you approve of this split proposal?
   - If so, would you want to become a member of the new Community? Would you voluenteer to also become and admin?
   - If so, would you also want to stay a member of the current community?
- It is this author's opinion that a minimum of three to five other members should approve the split and also wish to become a member of the new Community for it to take effect
- Once sufficiently approved, then the split should immediately be executed. It should not require admin involvement or approval, because we want the split to be a natural, organic and permissionless occurence.

The user requesting the split trigger an automatic vote to approve the split. If the request is approved then the original requestor will also be the first leader of the new community by default. 
 
After splitting the community, then each member should be given a choice as to which of the resulting communities they wish to belong to, or if they wish to be a member of both.

### Merge two Communities
We don't anticipate this to happen often, but it could be the case that two communities have shrinking membership and would like to merge to increase the total membership in one Community.

A merge proposal should be approved by majority vote in both communities before it is allowed to happen.

It's not easy to design rules for how the merge should be executed, based on the complexity of possible permutations of the pre-merge Communities. It seems plausible that merge power should not be given to regular users but could be given as an admin power to a dev / superuser. The alternative would be that merging not be supported, in which case the community will manually have to move from and abandon one community in favor of the other.

### Interact with my Community
Members should at minimum be able to post messages within the community which become publicly readable to anyone regardless of membership status, and where other members are allowed to comment on the message.

Messages posted on boards that I follow should show up in my personal feed in chronological order. But they don't show up in the feed of users who are not members and don't follow the community.

Members or admins (depending on Community settings) should be able to post polls for the community, which only community members are allowed to vote in.

As a member I should be able to see all other members listed in a sidebar, along with their membership / admin status.

### Ban a user from a Community
Banning is a strong power and should be used very restrictively. We suggest milder and more human forms of restricting users that are not following the code of conduct for a community. 
- Issue a warning for breach of code of conduct
- Temporarily silence the user for a day
- Temporarily silence the user for a week
- Silence the user until un-silenced (perhaps after taking some corrective action)
- Banning the user with chance of reapplying
- Banning the user with chance of reapplying (permanently)

It is this author's opinion that silencing the user is a much preferred method over banning them. Silencing allows the user to keep following the activitiy of the community and still feel like they belong there. It creates less animosity and makes the world a nicer place. Consider not implementing the banning feature.

These measures can be designed such that each increasing level of banning must be preceeded by the milder forms before it can be implemented. E.g. must silence the user for a day before can silence them for a week.

### Manage a Community
Communities should be open and welcoming, not closed for elite members only. We should design them such that members have as much powers as possible, and that admins are given as few god-like options as possible.

Some management functions include (non-exhaustive list):
- Add / change / delete Constellation tags of the Community (note: having no Constellations is the same as having all Constellation tags)
- Change the name of the Community
- Changing the code of conduct
- Changing the rules for gating and/or auto-approving membership
- Changing the annual membership fee
- Changing the Geographical parent 

One way to achieve decentralized leadership is to give admin powers to the community by majority vote, where any member can propose a vote and any member can vote on them, and where the proposal is automatically executed following a majority vote. 
- Consider making it a requirement that communities are owned and managed by an Astro-DAO with a minimum of 5 council members, rather than an individual owner.
- Consider forking the relevant parts of the Sputnik DAO codebase into this widget, to manage the Community by vote.

The question on who leads a community is often a contentious issue. Strong leaders can be super helpful but can also inhibit other aspiring leaders. Weak leaders can fail to get the community going. Corrupt leaders can squander away the money the community might have a stake in. It's not easy to design a generic tool that will allow the community to best choose their leader(s) across a variety of cultures and complex scenarios.

### Create a new Community
The widget design should inherently discourage users from creating new communities. Instead, users should be encouraged to...
- Find an existing community to join that fits their interest
- Find an existing community with approximate match, and suggest them to increase their scope to include their interest
- Find an existing community to join, and suggest they split out a child- or sibling communit that fits their interest

By taking the above actions, the following benefits would be realized:
- We discourage creating overlapping communities unneccessarily
- The new communities come with a default following and get a default parent or sibling
- Less need to start from scratch finding members, as a seed membership would come along from the preceeding community
- Create an audit trail of community growth
- Natural evolution and growth of the various dimeensions (geography, vertical, etc)

If the developers decide anyways to give an option to create a new community from scratch, then the following should be required actions:
- Select a geographical area that the community covers, selecting from a list of already existing areas, preferably from a hierarchy of existing areas (global-continent-country-region-municipality-city)
- Select which one language the community will be using
- Select which vertical constellation the community will be focused on (multiselect, optional). If no constellation is selected then the geographical area covered should be very small (i.e. country or below)
- The creator of the community becomes the default Council member by default

## Actor/Action Matrix
<!-- Describe which action is done by which actors. Feel free to use a table format or provide your own graphics. A "swimlane process chart" often works well here. -->
REPLACE THIS TEXT

|         | Admin | Member | Non-member Human | Non-member User |
| ------- | -------- | -------- | -------- | -------- |
| Find and Follow Community |          |          | Yes         | Yes         |
| Join a Community |          |          | Yes         |          |
| Approve a new Community member | Yes         |          |          |          |
| Split a Community | Yes         |          |          |          |
| Merge two Communities | Yes         |          |          |          |
| Interact with my Community | Yes         | Yes         |          |          |
| Ban a user from a Community | Yes         |          |          |          |
| Manage a Community | Yes         |          |          |          |
| Create a new Community |          |          | Yes         |          |

# Tech Spec
## Functions
<!-- What functions and functionalities should the widget have -->
REPLACE THIS TEXT

## Process Flows
<!-- Describe the process flows -->

## Data Architecture
<!-- Describe the data architecture and principles -->

### Geographies
To prevent unmanageable complexity in the geography dimension, we propose that there should always be a "trunk" that sets the direction into narrower and narrower geographies, from which the language-branches and constellation-branches can expand. The trunk concept is the family of communities that don't have a constellation selected and that has English as their language. Only communities with these characteristics are allowed to create new "child" geographies. Conversely, any Commmunity that either has a non-english language or has narrowed down their Constellation will not be allowed to create new geographies. Instead they will be confined to only select pre-defined geographies from the trunk. 

We should create an initial set of "trunk" Communities
- Global
   - North America
      - Canada
      - USA
   - Asia
      - Indonesia
      - Japan
      - South Korea
      - Russia
      - Vietnam
   - South America
   - Africa
   - Europe
      - DACH
      - France
      - Portugal
      - Spain
      - Ukraine
   - Oceania

### Languages

English should be the default langugage for all new Communities.
- It should be possible for the Community admins to change the language
- When a member proposes as split they have the option to split due to wishing to cover a different language

The initial list of optional languages should include the following major crypto-dominant languages:
- Chinese
- French
- German
- Indonesian
- Japanese
- Portugese
- Russion
- Spanish
- Vietnamese

### Constellations (verticals)

The initial list of Constellations tags should include the following:
- Gaming
- NFTs
- ReFi
- DeFi
- Devs
- Governance
- Degens
- Social
- Events

## Screens
<!-- Describe the layout and content of the various screens within the widget -->
REPLACE THIS TEXT

## Dependent Widgets
<!-- Does the widget interact with other widgets? -->
- I-am-Human
- EasyPoll

# Audit
<!-- Identify if this widget needs an audit. Does it store sensitive information, transfer tokens, or have a middleware layer? Consult the Security Workgroup if needed. -->
REPLACE THIS TEXT

'''
'''--- specs/track-my-bounty.md ---
# Spec for a future "Track My Bounty" widget
This community-driven spec is a collaborative community-led effort to create a functional specification for a widget to be developed. The goal is to bring clarity and alignment to the deliverables for developers to deliver a functional widget that meets the requirements.

# Overview
<!-- Describe the widget in one sentence. -->
This widget will allow users to apply for grants and bounties to the various Grassroots DAOs and then track the application through it's lifecycle. It will also help the various Grassroots DAOs by allowing them one central repository for management of grants and bounties, including highlighting any required cross-DAO coordination when an application have been submitted to more than one GrassRoots DAO. 

## Document Status 
<!-- What is the current status of this document? Inception / draft / community consultation / Locked: RFP ongoing / Locked: RFP awarded  -->
This document is currently in "inception" status. We are looking for someone willing to take a stab at creaing a first draft.

## Other potential names for this widget:
- Track My Grant
- NDC Grants & Bounties

## Challenge
<!-- List the challenge(s) being solved by this widget -->
REPLACE THIS TEXT

## Scope
<!-- Define the scope and potential phases of the widget -->
REPLACE THIS TEXT

## Requirements
<!-- What are the Minimal Viable Requirements (MV)  the widget should meet to be considered complete? -->
REPLACE THIS TEXT

## Phases
<!-- Do the project have multiple phases? Identify a high-level summary of each phase. -->
REPLACE THIS TEXT

# Use Cases
<!-- Identify and list the collectives that will use this widget and what each one will specifically do. -->
REPLACE THIS TEXT

## Actors
<!-- List all collections that will use the widget. -->
REPLACE THIS TEXT

## Actions
<!-- List the actions each collective will take individually. -->
REPLACE THIS TEXT

## Actor/Action Matrix
<!-- Describe which action is done by which actors. Feel free to use a table format or provide your own graphics. A "swimlane process chart" often works well here. -->
REPLACE THIS TEXT

|         | Action 1 | Action 2 | Action 3 | action 4 |
| ------- | -------- | -------- | -------- | -------- |
| Actor 1 |          |          |          |          |
| Actor 2 |          |          |          |          |
| Actor 3 |          |          |          |          |
| Actor 4 |          |          |          |          |

# Tech Spec
## Functions
<!-- What functions and functionalities should the widget have -->
REPLACE THIS TEXT

## Process Flows
<!-- Describe the process flows -->
REPLACE THIS TEXT

## Screens
<!-- Describe the layout and content of the various screens within the widget -->
REPLACE THIS TEXT

## Dependent Widgets
<!-- Does the widget interact with other widgets? -->
REPLACE THIS TEXT

# Audit
<!-- Identify if this widget needs an audit. Does it store sensitive information, transfer tokens, or have a middleware layer? Consult the Security Workgroup if needed. -->
REPLACE THIS TEXT

'''