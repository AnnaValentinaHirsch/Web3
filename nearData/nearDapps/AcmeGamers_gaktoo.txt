*GitHub Repository "AcmeGamers/gaktoo"*

'''--- near-app/frontend/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="assets/favicon.ico"/>
  <link rel="apple-touch-icon" href="assets/favicon.ico"/>
  <link rel="stylesheet" href="./assets/global.css">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
  <link href="https://fonts.googleapis.com/css?family=Arvo&display=swap" rel="stylesheet">

</head>
<body style="background: #eef2fe; font-family: 'Arvo', serif;">
  <div class="container">
    <h1>This counter lives in the NEAR blockchain!</h1>

    <div class="scene">
      <div class="gameboy">
        <div class="body-shape shadow"></div>
        <div class="body-shape side"></div>
        <div class="body-shape front">
          <div class="screen">
            <div class="dot"></div>
            <div class="face">
              <div class="eyes-row">
                <div id="left" class="closed">
                  <div class="pupil"></div>
                </div>
                <div id="right" class="closed">
                  <div class="pupil"></div>
                </div>
              </div>
              <div class="mouth-row">
                <div class="mouth smile"></div>
                <div class="tongue"></div>
              </div>
            </div>
            <div id="show" class="number"></div>
          </div>
          <div class="buttons">
            <div class="row">
              <button id="plus" class="interact arrows">
                <div class="left">
                </div>
                <div class="updown">
                </div>
              </button>
              <button id="minus" class="interact arrows">
                <div class="right">
                </div>
              </button>
            </div>
            <div class="selects row">
              <div class="ab">
                <button id="a" class="interact r a">RS</button>
                <button id="b" class="r b">LE</button>
                <button id="c" class="r c">RE</button>
                <button id="d" class="r d">L</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="sign-out" style="display: none;">
      <button class="btn btn-primary" style="background-color: #0072CE;">Sign Out</button>
    </div>
  
    <div class="sign-in" style="display: none;">
      <p>You'll need to sign in to interact with the counter:</p>
      <button class="btn btn-primary" style="background-color: #0072CE;">Sign In</button>
    </div>

  </div>
  <script src="./index.js" type="module"></script>
</body>
</html>

'''
'''--- near-app/frontend/index.js ---
import 'regenerator-runtime/runtime'
import { Wallet } from './near-wallet'

const CONTRACT_ADDRESS = process.env.CONTRACT_NAME;

// When creating the wallet you can choose to create an access key, so the user
// can skip signing non-payable methods when interacting with the contract
const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS })

// Setup on page load
window.onload = async () => {
  const isSignedIn = await wallet.startUp();

  if (isSignedIn){
    signedInFlow()
  }else{
    signedOutFlow()
  }

  updateUI()
}

// Log in and log out users using NEAR Wallet
document.querySelector('.sign-in .btn').onclick = () => { wallet.signIn() }
document.querySelector('.sign-out .btn').onclick = () => { wallet.signOut() }

// Display the signed-out-flow container
function signedOutFlow() {
  document.querySelector('.sign-in').style.display = 'block';
  document.querySelectorAll('.interact').forEach(button => button.disabled = true)
}

// Displaying the signed in flow container and display counter
async function signedInFlow() {
  document.querySelector('.sign-out').style.display = 'block';
  document.querySelectorAll('.interact').forEach(button => button.disabled = false)
}

// Buttons - Interact with the Smart contract
document.querySelector('#plus').addEventListener('click', async () => {
  resetUI();
  await wallet.callMethod({contractId: CONTRACT_ADDRESS, method: "increment"});
  await updateUI();
});

document.querySelector('#minus').addEventListener('click', async  () => {
  resetUI();
  await wallet.callMethod({contractId: CONTRACT_ADDRESS, method: "decrement"});
  await updateUI();
});
document.querySelector('#a').addEventListener('click', async  () => {
  resetUI();
  await wallet.callMethod({contractId: CONTRACT_ADDRESS, method: "reset"});
  await updateUI();
});

// Update and Reset UI
async function updateUI(){
  let count = await wallet.viewMethod({contractId: CONTRACT_ADDRESS, method: "get_num"});
  
  document.querySelector('#show').classList.replace('loader','number');
  document.querySelector('#show').innerText = count === undefined ? 'calculating...' : count;
  document.querySelector('#left').classList.toggle('eye');

  if (count >= 0) {
    document.querySelector('.mouth').classList.replace('cry','smile');
  } else {
    document.querySelector('.mouth').classList.replace('smile','cry');
  }

  if (count > 20 || count < -20) {
    document.querySelector('.tongue').style.display = 'block';
  } else {
    document.querySelector('.tongue').style.display = 'none';
  }
}

function resetUI(){
  document.querySelector('#show').classList.replace('number','loader');
  document.querySelector('#show').innerText = '';
}

// Animations
document.querySelector('#c').addEventListener('click', () => {
  document.querySelector('#left').classList.toggle('eye');
});
document.querySelector('#b').addEventListener('click', () => {
  document.querySelector('#right').classList.toggle('eye');
});
document.querySelector('#d').addEventListener('click', () => {
  document.querySelector('.dot').classList.toggle('on');
});
'''
'''--- near-app/frontend/near-wallet.js ---
/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector UI
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import LedgerIconUrl from '@near-wallet-selector/ledger/assets/ledger-icon.png';
import MyNearIconUrl from '@near-wallet-selector/my-near-wallet/assets/my-near-wallet-icon.png';

// wallet selector options
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupLedger } from '@near-wallet-selector/ledger';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet({ iconUrl: MyNearIconUrl }),
      setupLedger({ iconUrl: LedgerIconUrl })],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = NO_DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    const outcome = await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });

    return providers.getTransactionLastResult(outcome)
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}
'''
'''--- near-app/node-vite/client/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css">
    <link rel="stylesheet" href="https://unpkg.com/treeflex/dist/css/treeflex.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/wow/1.1.2/wow.min.js"
      integrity="sha512-Eak/29OTpb36LLo2r47IpVzPBLXnAMPAVypbSZiZ4Qkf8p/7S/XRG5xp7OKWPPYfJT6metI+IORkR5G8F900+g=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script>
      new WOW().init();
  </script>
  </body>
</html>

'''
'''--- near-app/node-vite/client/smart_contract/hardhat.config.js ---
require("@nomicfoundation/hardhat-toolbox");
require("@nomiclabs/hardhat-ethers");
require("@nomicfoundation/hardhat-chai-matchers");

/** @type import('hardhat/config').HardhatUserConfig */
module.exports = {
  solidity: "0.8.17",
  defaultNetwork: "hardhat",
  networks: {
    hardhat: {
      chainId: 1337,
    },
  },
};

'''
'''--- near-app/node-vite/client/smart_contract/scripts/deploy-backup.js ---
const hre = require('hardhat')
const main = async () => {
  const Transactions = await hre.ethers.getContractFactory('Transactions')
  const transactions = await Transactions.deploy()
  await transactions.deployed()
  console.log('Transactions deployed to:', transactions.address)
}
const runMain = async () => {
  try {
    await main()
    process.exit(0)
  } catch (error) {
    console.error(error)
    process.exit(1)
  }
}
runMain()
'''
'''--- near-app/node-vite/client/smart_contract/scripts/deploy.js ---
// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// You can also run a script with `npx hardhat run <script>`. If you do that, Hardhat
// will compile your contracts, add the Hardhat Runtime Environment's members to the
// global scope, and execute the script.
const hre = require("hardhat");

async function main() {
  const currentTimestampInSeconds = Math.round(Date.now() / 1000);
  const ONE_YEAR_IN_SECS = 365 * 24 * 60 * 60;
  const unlockTime = currentTimestampInSeconds + ONE_YEAR_IN_SECS;

  const lockedAmount = hre.ethers.utils.parseEther("1");

  const Lock = await hre.ethers.getContractFactory("Lock");
  const lock = await Lock.deploy(unlockTime, { value: lockedAmount });

  await lock.deployed();

  console.log(
    `Lock with 1 ETH and unlock timestamp ${unlockTime} deployed to ${lock.address}`
  );
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});

'''
'''--- near-app/node-vite/client/smart_contract/test/Lock.js ---
const {
  time,
  loadFixture,
} = require("@nomicfoundation/hardhat-network-helpers");
const { anyValue } = require("@nomicfoundation/hardhat-chai-matchers/withArgs");
const { expect } = require("chai");

describe("Lock", function () {
  // We define a fixture to reuse the same setup in every test.
  // We use loadFixture to run this setup once, snapshot that state,
  // and reset Hardhat Network to that snapshot in every test.
  async function deployOneYearLockFixture() {
    const ONE_YEAR_IN_SECS = 365 * 24 * 60 * 60;
    const ONE_GWEI = 1_000_000_000;

    const lockedAmount = ONE_GWEI;
    const unlockTime = (await time.latest()) + ONE_YEAR_IN_SECS;

    // Contracts are deployed using the first signer/account by default
    const [owner, otherAccount] = await ethers.getSigners();

    const Lock = await ethers.getContractFactory("Lock");
    const lock = await Lock.deploy(unlockTime, { value: lockedAmount });

    return { lock, unlockTime, lockedAmount, owner, otherAccount };
  }

  describe("Deployment", function () {
    it("Should set the right unlockTime", async function () {
      const { lock, unlockTime } = await loadFixture(deployOneYearLockFixture);

      expect(await lock.unlockTime()).to.equal(unlockTime);
    });

    it("Should set the right owner", async function () {
      const { lock, owner } = await loadFixture(deployOneYearLockFixture);

      expect(await lock.owner()).to.equal(owner.address);
    });

    it("Should receive and store the funds to lock", async function () {
      const { lock, lockedAmount } = await loadFixture(
        deployOneYearLockFixture
      );

      expect(await ethers.provider.getBalance(lock.address)).to.equal(
        lockedAmount
      );
    });

    it("Should fail if the unlockTime is not in the future", async function () {
      // We don't use the fixture here because we want a different deployment
      const latestTime = await time.latest();
      const Lock = await ethers.getContractFactory("Lock");
      await expect(Lock.deploy(latestTime, { value: 1 })).to.be.revertedWith(
        "Unlock time should be in the future"
      );
    });
  });

  describe("Withdrawals", function () {
    describe("Validations", function () {
      it("Should revert with the right error if called too soon", async function () {
        const { lock } = await loadFixture(deployOneYearLockFixture);

        await expect(lock.withdraw()).to.be.revertedWith(
          "You can't withdraw yet"
        );
      });

      it("Should revert with the right error if called from another account", async function () {
        const { lock, unlockTime, otherAccount } = await loadFixture(
          deployOneYearLockFixture
        );

        // We can increase the time in Hardhat Network
        await time.increaseTo(unlockTime);

        // We use lock.connect() to send a transaction from another account
        await expect(lock.connect(otherAccount).withdraw()).to.be.revertedWith(
          "You aren't the owner"
        );
      });

      it("Shouldn't fail if the unlockTime has arrived and the owner calls it", async function () {
        const { lock, unlockTime } = await loadFixture(
          deployOneYearLockFixture
        );

        // Transactions are sent using the first signer by default
        await time.increaseTo(unlockTime);

        await expect(lock.withdraw()).not.to.be.reverted;
      });
    });

    describe("Events", function () {
      it("Should emit an event on withdrawals", async function () {
        const { lock, unlockTime, lockedAmount } = await loadFixture(
          deployOneYearLockFixture
        );

        await time.increaseTo(unlockTime);

        await expect(lock.withdraw())
          .to.emit(lock, "Withdrawal")
          .withArgs(lockedAmount, anyValue); // We accept any value as `when` arg
      });
    });

    describe("Transfers", function () {
      it("Should transfer the funds to the owner", async function () {
        const { lock, unlockTime, lockedAmount, owner } = await loadFixture(
          deployOneYearLockFixture
        );

        await time.increaseTo(unlockTime);

        await expect(lock.withdraw()).to.changeEtherBalances(
          [owner, lock],
          [lockedAmount, -lockedAmount]
        );
      });
    });
  });
});

'''
'''--- near-app/node-vite/client/src/pages/Roadmap/backsteps.js ---
const backsteps = [
  {
    id: 1,

    title: "Internet Fundementals",
    desc: "Understand how computer works",
    imgURL: "../../../images/badge.png",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 2,
    title: "Basic Frontend Knowledge",
    imgURL: "../../../images/frontend.png",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 3,

    title: "OS and General Information",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 4,
    title: "Language: JavaScript",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 5,
    title: "Language Options : Java / C# / PHP / Rust / Go / Python / Ruby ",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 6,
    title: "Version Control Systems - Github",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 7,
    title: "Relational Database",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 8,
    title: "NoSQL Database",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 9,
    title: "Advanced Database",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 10,
    title: "APIs",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 11,
    title: "Web Security",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 12,
    title: "CI / CD",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 13,
    title: "Deisgn and Development Principles",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 14,
    title: "Search Engines",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 15,
    title: "Message Brokers",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 16,
    title: "Web Sockets",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 17,
    title: "Web Servers",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 18,
    title: "Keep Learning",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
];

export default backsteps;

'''
'''--- near-app/node-vite/client/src/pages/Roadmap/steps.js ---
const steps = [
  {
    id: "step1",
    title: "Internet Fundementals",
    desc: "Understand how computer works",
    imgURL: "../../../../images/badge.png",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step2",
    title: "HTML",
    imgURL: "../../../images/html.png",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step3",
    title: "CSS",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step4",
    title: "JavaScript Fundementals",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step5",
    title: "JavaScript Advanced",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step6",

    title: "Version Control Systems - Github",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step7",

    title: "Web Security Knowledge",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step8",

    title: "Package Managers",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step9",

    title: "Build Tools",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step10",

    title: "Frameworks - Modern CSS",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step11",

    title: "Frameworks - React.js",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step12",

    title: "Frameworks - Angular",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step13",
    title: "Frameworks - Vue.js",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step14",
    title: "GraphQL Server",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step15",
    title: "Static Site Generator",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step16",
    title: "Mobile Application",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step17",
    title: "Desktop Application",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step18",
    title: "Keep Learning",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
];

export default steps;

'''
'''--- near-app/node-vite/client/src/utils/constants.js ---
import abi from "./Transactions.json";
export const contractAbi = abi.abi;
export const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";

'''
'''--- near-app/node-vite/client/vite.config.js ---
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  server: {
    proxy: {
      "/api/v1": "http://localhost:5000/",
      "/api/signup": "http://localhost:5000/",
      "/api/user": "http://localhost:5000/",
      "/api/comment": "http://localhost:5000/",
      "/api/fetch-comment": "http://localhost:5000/",
      "/api/get-all-users": "http://localhost:5000/",
    },
  },
  plugins: [react()],
});

'''
'''--- near-app/node-vite/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css">
    <link rel="stylesheet" href="https://unpkg.com/treeflex/dist/css/treeflex.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/wow/1.1.2/wow.min.js"
      integrity="sha512-Eak/29OTpb36LLo2r47IpVzPBLXnAMPAVypbSZiZ4Qkf8p/7S/XRG5xp7OKWPPYfJT6metI+IORkR5G8F900+g=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script>
      new WOW().init();
  </script>
  </body>
</html>

'''
'''--- near-app/node-vite/server/index.js ---
const express = require("express"),
  PORT = 5000,
  app = express(),
  mysql = require("mysql");

app.use(express.json());

var con = mysql.createConnection({
  host: "127.0.0.1",
  user: "root",
  password: "",
  port: 3306,
});

con.connect(function (err) {
  if (err) throw err;
  console.log("Connected!");
});

app.get("/api/v1", (req, res) => {
  res.send("API Update");
});

app.post("/api/user", (req, res) => {
  const { id } = req.body;
  console.log(id);
  con.query(
    `SELECT * FROM gaktoo.Users WHERE id = "${id}"`,
    function (err, result) {
      if (err) throw err;
      res.send(result);
    }
  );
});

app.post("/api/fetch-comment", (req, res) => {
  const { id } = req.body;
  con.query(
    `SELECT * FROM gaktoo.reviews WHERE course = "${id}"`,
    function (err, result) {
      if (err) throw err;
      res.send(result);
    }
  );
});

app.post("/api/comment", (req, res) => {
  // Check if request is post
  if (req.method === "POST") {
    res.send("Request received");

    console.log("Request is post");

    // Get the data from the request
    const { id, F_Name, username, course, created_at, comment, review } =
      req.body;

    console.log(id, F_Name, username, course, created_at, comment, review);

    let id2 = Math.random() * 8129048291041232;

    try {
      con.query(
        `INSERT INTO gaktoo.Reviews (id, id2, F_Name, username, course, created_at, comment, review) VALUES ('${id}', ${id2}, '${F_Name}', '${username}', '${course}', '${created_at}', '${comment}', '${review}')`,
        function (err, result) {
          if (err) throw err;
          console.log("1 record inserted");
        }
      );
    } catch (err) {
      throw err;
    }
  } else console.log("Not a post request");
});

app.post("/api/signup", (req, res) => {
  console.log("Request received");

  // Check if request is post
  if (req.method === "POST") {
    res.send("Request received");

    console.log("Request is post");

    // Get the data from the request
    const { id, name, username, email, created_at } = req.body;

    console.log(id, name, username, email, created_at);

    // Insert into SQL gaktooo database
    con.query(
      `INSERT INTO gaktoo.Users (id, F_Name, username, email, created_at) VALUES ('${id}', '${name}', '${username}', '${email}', '${created_at}')`,
      function (err, result) {
        if (err) throw err;
        console.log("1 record inserted");
      }
    );
  } else console.log("Not a post request");
});

app.post("/api/get-all-users", (req, res) => {
  console.log("Request received");

  // Check if request is post
  if (req.method === "POST") {
    res.send("Request received");

    console.log("Request is post");

    // Get the data from the request
    const { id, name, username, email, created_at } = req.body;

    console.log(id, name, username, email, created_at);

    // Insert into SQL gaktooo database
    con.query(
      `INSERT INTO gaktoo.Users (id, F_Name, username, email, created_at) VALUES ('${id}', '${name}', '${username}', '${email}', '${created_at}')`,
      function (err, result) {
        if (err) throw err;
        console.log("1 record inserted");
      }
    );
  } else console.log("Not a post request");
});

app.listen(PORT, () => console.log(`start listening on port : ${PORT}`));

'''
'''--- node-vite/client/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css">
    <link rel="stylesheet" href="https://unpkg.com/treeflex/dist/css/treeflex.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/wow/1.1.2/wow.min.js"
      integrity="sha512-Eak/29OTpb36LLo2r47IpVzPBLXnAMPAVypbSZiZ4Qkf8p/7S/XRG5xp7OKWPPYfJT6metI+IORkR5G8F900+g=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script>
      new WOW().init();
  </script>
  </body>
</html>

'''
'''--- node-vite/client/smart_contract/hardhat.config.js ---
require("@nomicfoundation/hardhat-toolbox");
require("@nomiclabs/hardhat-ethers");
require("@nomicfoundation/hardhat-chai-matchers");

/** @type import('hardhat/config').HardhatUserConfig */
module.exports = {
  solidity: "0.8.17",
  defaultNetwork: "hardhat",
  networks: {
    hardhat: {
      chainId: 1337,
    },
  },
};

'''
'''--- node-vite/client/smart_contract/scripts/deploy-backup.js ---
const hre = require('hardhat')
const main = async () => {
  const Transactions = await hre.ethers.getContractFactory('Transactions')
  const transactions = await Transactions.deploy()
  await transactions.deployed()
  console.log('Transactions deployed to:', transactions.address)
}
const runMain = async () => {
  try {
    await main()
    process.exit(0)
  } catch (error) {
    console.error(error)
    process.exit(1)
  }
}
runMain()
'''
'''--- node-vite/client/smart_contract/scripts/deploy.js ---
// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// You can also run a script with `npx hardhat run <script>`. If you do that, Hardhat
// will compile your contracts, add the Hardhat Runtime Environment's members to the
// global scope, and execute the script.
const hre = require("hardhat");

async function main() {
  const currentTimestampInSeconds = Math.round(Date.now() / 1000);
  const ONE_YEAR_IN_SECS = 365 * 24 * 60 * 60;
  const unlockTime = currentTimestampInSeconds + ONE_YEAR_IN_SECS;

  const lockedAmount = hre.ethers.utils.parseEther("1");

  const Lock = await hre.ethers.getContractFactory("Lock");
  const lock = await Lock.deploy(unlockTime, { value: lockedAmount });

  await lock.deployed();

  console.log(
    `Lock with 1 ETH and unlock timestamp ${unlockTime} deployed to ${lock.address}`
  );
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});

'''
'''--- node-vite/client/smart_contract/test/Lock.js ---
const {
  time,
  loadFixture,
} = require("@nomicfoundation/hardhat-network-helpers");
const { anyValue } = require("@nomicfoundation/hardhat-chai-matchers/withArgs");
const { expect } = require("chai");

describe("Lock", function () {
  // We define a fixture to reuse the same setup in every test.
  // We use loadFixture to run this setup once, snapshot that state,
  // and reset Hardhat Network to that snapshot in every test.
  async function deployOneYearLockFixture() {
    const ONE_YEAR_IN_SECS = 365 * 24 * 60 * 60;
    const ONE_GWEI = 1_000_000_000;

    const lockedAmount = ONE_GWEI;
    const unlockTime = (await time.latest()) + ONE_YEAR_IN_SECS;

    // Contracts are deployed using the first signer/account by default
    const [owner, otherAccount] = await ethers.getSigners();

    const Lock = await ethers.getContractFactory("Lock");
    const lock = await Lock.deploy(unlockTime, { value: lockedAmount });

    return { lock, unlockTime, lockedAmount, owner, otherAccount };
  }

  describe("Deployment", function () {
    it("Should set the right unlockTime", async function () {
      const { lock, unlockTime } = await loadFixture(deployOneYearLockFixture);

      expect(await lock.unlockTime()).to.equal(unlockTime);
    });

    it("Should set the right owner", async function () {
      const { lock, owner } = await loadFixture(deployOneYearLockFixture);

      expect(await lock.owner()).to.equal(owner.address);
    });

    it("Should receive and store the funds to lock", async function () {
      const { lock, lockedAmount } = await loadFixture(
        deployOneYearLockFixture
      );

      expect(await ethers.provider.getBalance(lock.address)).to.equal(
        lockedAmount
      );
    });

    it("Should fail if the unlockTime is not in the future", async function () {
      // We don't use the fixture here because we want a different deployment
      const latestTime = await time.latest();
      const Lock = await ethers.getContractFactory("Lock");
      await expect(Lock.deploy(latestTime, { value: 1 })).to.be.revertedWith(
        "Unlock time should be in the future"
      );
    });
  });

  describe("Withdrawals", function () {
    describe("Validations", function () {
      it("Should revert with the right error if called too soon", async function () {
        const { lock } = await loadFixture(deployOneYearLockFixture);

        await expect(lock.withdraw()).to.be.revertedWith(
          "You can't withdraw yet"
        );
      });

      it("Should revert with the right error if called from another account", async function () {
        const { lock, unlockTime, otherAccount } = await loadFixture(
          deployOneYearLockFixture
        );

        // We can increase the time in Hardhat Network
        await time.increaseTo(unlockTime);

        // We use lock.connect() to send a transaction from another account
        await expect(lock.connect(otherAccount).withdraw()).to.be.revertedWith(
          "You aren't the owner"
        );
      });

      it("Shouldn't fail if the unlockTime has arrived and the owner calls it", async function () {
        const { lock, unlockTime } = await loadFixture(
          deployOneYearLockFixture
        );

        // Transactions are sent using the first signer by default
        await time.increaseTo(unlockTime);

        await expect(lock.withdraw()).not.to.be.reverted;
      });
    });

    describe("Events", function () {
      it("Should emit an event on withdrawals", async function () {
        const { lock, unlockTime, lockedAmount } = await loadFixture(
          deployOneYearLockFixture
        );

        await time.increaseTo(unlockTime);

        await expect(lock.withdraw())
          .to.emit(lock, "Withdrawal")
          .withArgs(lockedAmount, anyValue); // We accept any value as `when` arg
      });
    });

    describe("Transfers", function () {
      it("Should transfer the funds to the owner", async function () {
        const { lock, unlockTime, lockedAmount, owner } = await loadFixture(
          deployOneYearLockFixture
        );

        await time.increaseTo(unlockTime);

        await expect(lock.withdraw()).to.changeEtherBalances(
          [owner, lock],
          [lockedAmount, -lockedAmount]
        );
      });
    });
  });
});

'''
'''--- node-vite/client/src/pages/Roadmap/backsteps.js ---
const backsteps = [
  {
    id: 1,

    title: "Internet Fundementals",
    desc: "Understand how computer works",
    imgURL: "../../../images/badge.png",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 2,
    title: "Basic Frontend Knowledge",
    imgURL: "../../../images/frontend.png",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 3,

    title: "OS and General Information",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 4,
    title: "Language: JavaScript",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 5,
    title: "Language Options : Java / C# / PHP / Rust / Go / Python / Ruby ",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 6,
    title: "Version Control Systems - Github",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 7,
    title: "Relational Database",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 8,
    title: "NoSQL Database",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 9,
    title: "Advanced Database",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 10,
    title: "APIs",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 11,
    title: "Web Security",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 12,
    title: "CI / CD",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 13,
    title: "Deisgn and Development Principles",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 14,
    title: "Search Engines",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 15,
    title: "Message Brokers",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 16,
    title: "Web Sockets",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 17,
    title: "Web Servers",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: 18,
    title: "Keep Learning",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
];

export default backsteps;

'''
'''--- node-vite/client/src/pages/Roadmap/steps.js ---
const steps = [
  {
    id: "step1",
    title: "Internet Fundementals",
    desc: "Understand how computer works",
    imgURL: "../../../../images/badge.png",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step2",
    title: "HTML",
    imgURL: "../../../images/html.png",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step3",
    title: "CSS",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step4",
    title: "JavaScript Fundementals",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step5",
    title: "JavaScript Advanced",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step6",

    title: "Version Control Systems - Github",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step7",

    title: "Web Security Knowledge",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step8",

    title: "Package Managers",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step9",

    title: "Build Tools",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step10",

    title: "Frameworks - Modern CSS",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step11",

    title: "Frameworks - React.js",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step12",

    title: "Frameworks - Angular",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step13",
    title: "Frameworks - Vue.js",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step14",
    title: "GraphQL Server",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step15",
    title: "Static Site Generator",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step16",
    title: "Mobile Application",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step17",
    title: "Desktop Application",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
  {
    id: "step18",
    title: "Keep Learning",
    imgURL: "../../../images/setting.jpg",
    course: "Recomended Course",
    mentor: "Recommended Mentor",
    student: "Meet students who take same course as this",
  },
];

export default steps;

'''
'''--- node-vite/client/src/utils/constants.js ---
import abi from "./Transactions.json";
export const contractAbi = abi.abi;
export const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";

'''
'''--- node-vite/client/vite.config.js ---
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  server: {
    proxy: {
      "/api/v1": "http://localhost:5000/",
      "/api/signup": "http://localhost:5000/",
      "/api/user": "http://localhost:5000/",
      "/api/comment": "http://localhost:5000/",
      "/api/fetch-comment": "http://localhost:5000/",
      "/api/get-all-users": "http://localhost:5000/",
    },
  },
  plugins: [react()],
});

'''
'''--- node-vite/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css">
    <link rel="stylesheet" href="https://unpkg.com/treeflex/dist/css/treeflex.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/wow/1.1.2/wow.min.js"
      integrity="sha512-Eak/29OTpb36LLo2r47IpVzPBLXnAMPAVypbSZiZ4Qkf8p/7S/XRG5xp7OKWPPYfJT6metI+IORkR5G8F900+g=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script>
      new WOW().init();
  </script>
  </body>
</html>

'''
'''--- node-vite/server/index.js ---
const express = require("express"),
  PORT = 5000,
  app = express(),
  mysql = require("mysql");

app.use(express.json());

var con = mysql.createConnection({
  host: "127.0.0.1",
  user: "root",
  password: "",
  port: 3306,
});

con.connect(function (err) {
  if (err) throw err;
  console.log("Connected!");
});

app.get("/api/v1", (req, res) => {
  res.send("API Update");
});

app.post("/api/user", (req, res) => {
  const { id } = req.body;
  console.log(id);
  con.query(
    `SELECT * FROM gaktoo.Users WHERE id = "${id}"`,
    function (err, result) {
      if (err) throw err;
      res.send(result);
    }
  );
});

app.post("/api/fetch-comment", (req, res) => {
  const { id } = req.body;
  con.query(
    `SELECT * FROM gaktoo.reviews WHERE course = "${id}"`,
    function (err, result) {
      if (err) throw err;
      res.send(result);
    }
  );
});

app.post("/api/comment", (req, res) => {
  // Check if request is post
  if (req.method === "POST") {
    res.send("Request received");

    console.log("Request is post");

    // Get the data from the request
    const { id, F_Name, username, course, created_at, comment, review } =
      req.body;

    console.log(id, F_Name, username, course, created_at, comment, review);

    let id2 = Math.random() * 8129048291041232;

    try {
      con.query(
        `INSERT INTO gaktoo.Reviews (id, id2, F_Name, username, course, created_at, comment, review) VALUES ('${id}', ${id2}, '${F_Name}', '${username}', '${course}', '${created_at}', '${comment}', '${review}')`,
        function (err, result) {
          if (err) throw err;
          console.log("1 record inserted");
        }
      );
    } catch (err) {
      throw err;
    }
  } else console.log("Not a post request");
});

app.post("/api/signup", (req, res) => {
  console.log("Request received");

  // Check if request is post
  if (req.method === "POST") {
    res.send("Request received");

    console.log("Request is post");

    // Get the data from the request
    const { id, name, username, email, created_at } = req.body;

    console.log(id, name, username, email, created_at);

    // Insert into SQL gaktooo database
    con.query(
      `INSERT INTO gaktoo.Users (id, F_Name, username, email, created_at) VALUES ('${id}', '${name}', '${username}', '${email}', '${created_at}')`,
      function (err, result) {
        if (err) throw err;
        console.log("1 record inserted");
      }
    );
  } else console.log("Not a post request");
});

app.post("/api/get-all-users", (req, res) => {
  console.log("Request received");

  // Check if request is post
  if (req.method === "POST") {
    res.send("Request received");

    console.log("Request is post");

    // Get the data from the request
    const { id, name, username, email, created_at } = req.body;

    console.log(id, name, username, email, created_at);

    // Insert into SQL gaktooo database
    con.query(
      `INSERT INTO gaktoo.Users (id, F_Name, username, email, created_at) VALUES ('${id}', '${name}', '${username}', '${email}', '${created_at}')`,
      function (err, result) {
        if (err) throw err;
        console.log("1 record inserted");
      }
    );
  } else console.log("Not a post request");
});

app.listen(PORT, () => console.log(`start listening on port : ${PORT}`));

'''