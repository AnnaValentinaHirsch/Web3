*GitHub Repository "hermes1108/near-coinflip-frontend"*

'''--- README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- package.json ---
{
  "name": "web3-react",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.9.0",
    "@emotion/styled": "^11.8.1",
    "@mui/icons-material": "^5.6.2",
    "@mui/material": "^5.6.4",
    "@react-icons/all-files": "^4.1.0",
    "@testing-library/jest-dom": "^5.16.2",
    "@testing-library/react": "^12.1.4",
    "@testing-library/user-event": "^13.5.0",
    "near-api-js": "^0.44.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3",
    "sass": "^1.51.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <meta name="description" content="Web site created using create-react-app" />
  <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
  <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
  <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />

  <link href='https://fonts.googleapis.com/css?family=Acme' rel='stylesheet'>
  <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
  <title>Coin Flip</title>
</head>

<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
  <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
</body>

</html>
'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- src/App.js ---
import Main from './page/Main';
import './App.css';

import { ThemeProvider, createTheme } from '@mui/material/styles';

const theme = createTheme({
  typography: {
    allVariants: {
      fontFamily: 'Acme',
      // textTransform: 'none',
      // fontSize: 16,
    },
  },
  palette: {
    primary: {
      // light: will be calculated from palette.primary.main,
      main: '#1111FF',
      // dark: will be calculated from palette.primary.main,
      // contrastText: will be calculated to contrast with palette.primary.main
    },
    secondary: {
      // light: '#0066ff',
      main: '#F4900C',
      // dark: will be calculated from palette.secondary.main,
      // contrastText: '#ffcc00',
    },
    // Used by `getContrastText()` to maximize the contrast between
    // the background and the text.
    contrastThreshold: 3,
    // Used by the functions below to shift a color's luminance by approximately
    // two indexes within its tonal palette.
    // E.g., shift from Red 500 to Red 300 or Red 700.
    tonalOffset: 0.2,
  },
});

function App() {
  return (
    <div>
      <ThemeProvider theme={theme}>
        <Main />
      </ThemeProvider>
    </div>
  );
}

export default App;

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/common/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-starter-dapp.myaccount.testnet'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig
'''
'''--- src/components/FundModal.js ---
import React, { useState, useEffect } from 'react';
import Modal from '@mui/material/Modal';
import Box from '@mui/material/Box';
import Paper from '@mui/material/Paper';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import Button from '@mui/material/Button';

import Input from '@mui/material/Input';
import FilledInput from '@mui/material/FilledInput';
import OutlinedInput from '@mui/material/OutlinedInput';
import InputLabel from '@mui/material/InputLabel';
import InputAdornment from '@mui/material/InputAdornment';
import FormHelperText from '@mui/material/FormHelperText';
import FormControl from '@mui/material/FormControl';
import TextField from '@mui/material/TextField';
import Visibility from '@mui/icons-material/Visibility';
import VisibilityOff from '@mui/icons-material/VisibilityOff';

import '../page/Main.scss'

const modalStyle = {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: 400,
    bgcolor: 'background.paper',
    border: '2px solid #350994',
    boxShadow: 24,
    p: 4,
    borderRadius: '15px'
};

const FundModal = (props) => {
    const [successFlag, setSuccessFlag] = useState(false)

    const [values, setValues] = React.useState({
        amount: '',
        password: '',
        weight: '',
        weightRange: '',
        showPassword: false,
    });

    const handleChange = (prop) => (event) => {
        setValues({ ...values, [prop]: event.target.value });
    };

    const onSuccess = () => {
        if (props.type == 'deposit') {
            setSuccessFlag(true)
            setTimeout(() => {
                setSuccessFlag(false)
            }, 1000)
            // clearTimeout(timer)
            // setSuccessFlag(false)
        }

    }
    console.log('success: ', successFlag)
    return (
        <div>
            <Modal
                open={props.open}
                onClose={props.handleClose}
                aria-labelledby="modal-modal-title"
                aria-describedby="modal-modal-description"
            >
                <Box sx={modalStyle}>
                    <Typography id="modal-modal-title" variant="h6" component="h2">
                        {
                            props.type == 'deposit' ? 'Deposit' : 'Withdraw'
                        }
                    </Typography>
                    {
                        props.type === 'deposit' &&
                        <img src='/assets/money.gif' alt='get money' className='money' style={{ visibility: successFlag ? 'visible' : 'hidden' }} />
                    }

                    <FormControl fullWidth sx={{ mt: 2 }} variant="filled">
                        <InputLabel htmlFor="filled-adornment-amount">Amount</InputLabel>
                        <FilledInput
                            id="filled-adornment-amount"
                            value={values.amount}
                            onChange={handleChange('amount')}
                            startAdornment={<InputAdornment position="start">$</InputAdornment>}
                        />
                        <Button
                            color='secondary' variant='contained' sx={{ mt: 2 }}
                            onClick={() => onSuccess()}
                        >
                            {
                                props.type == 'deposit' ? 'Deposit' : 'Withdraw'
                            }
                        </Button>
                    </FormControl>
                </Box>
            </Modal>
        </div>
    )
}

export default FundModal
'''
'''--- src/components/HelpModal.js ---

'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #282c34;

  /* background-image: url('../public/assets/background.jpg');
  background-size: cover;
  background-repeat: no-repeat; */
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

* {
  font-family: Acme;
}

* button {
  font-family: Acme;
}
'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- src/page/Main.js ---
import React, { useState, useEffect } from 'react';

import './coin.css';
import './Main.scss';

// menu bar
import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Paper from '@mui/material/Paper';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import Button from '@mui/material/Button';
import IconButton from '@mui/material/IconButton';
import MenuIcon from '@mui/icons-material/Menu';
import MenuItem from '@mui/material/MenuItem';
import Menu from '@mui/material/Menu';

import { Grid } from '@mui/material';
import { styled } from '@mui/material';

//slider
import Slider, { SliderThumb } from '@mui/material/Slider';
import Tooltip from '@mui/material/Tooltip';
import PropTypes from 'prop-types';
import Stack from '@mui/material/Stack';
// modal
import Modal from '@mui/material/Modal';
// modal amount input
import Input from '@mui/material/Input';
import FilledInput from '@mui/material/FilledInput';
import OutlinedInput from '@mui/material/OutlinedInput';
import InputLabel from '@mui/material/InputLabel';
import InputAdornment from '@mui/material/InputAdornment';
import FormHelperText from '@mui/material/FormHelperText';
import FormControl from '@mui/material/FormControl';
import TextField from '@mui/material/TextField';
import Visibility from '@mui/icons-material/Visibility';
import VisibilityOff from '@mui/icons-material/VisibilityOff';

// icons
// import { BsTwitter } from "@react-icons/all-files/bi/BiTwitter";
import FundModal from '../components/FundModal';

// near web3
// import * as nearAPI from 'near-api-js'
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'

const keyStore = new keyStores.BrowserLocalStorageKeyStore();

// const { connect } = nearAPI;

const nearConfig = {
    networkId: "testnet",
    keyStore,
    contractName: 'dev-1651643292484-50465048732714',
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
    explorerUrl: "https://explorer.testnet.near.org",
};

// frontend styles section
const modalStyle = {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: 400,
    bgcolor: 'background.paper',
    border: '2px solid #350994',
    boxShadow: 24,
    p: 4,
    borderRadius: '15px'
};

function ValueLabelComponent(props) {
    const { children, value } = props;

    return (
        <Tooltip enterTouchDelay={0} placement="top" title={value}>
            {children}
        </Tooltip>
    );
}

ValueLabelComponent.propTypes = {
    children: PropTypes.element.isRequired,
    value: PropTypes.number.isRequired,
};

const PrettoSlider = styled(Slider)({
    color: '#F4900C',
    height: 8,
    '& .MuiSlider-track': {
        border: 'none',
    },
    '& .MuiSlider-thumb': {
        height: 24,
        width: 24,
        backgroundColor: '#F4900C',
        border: '2px solid #E3900C',
        '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {
            boxShadow: 'inherit',
        },
        '&:before': {
            display: 'none',
        },
    },
    '& .MuiSlider-valueLabel': {
        lineHeight: 1.2,
        fontSize: 12,
        background: 'unset',
        padding: 0,
        width: 32,
        height: 32,
        borderRadius: '50% 50% 50% 0',
        backgroundColor: '#F4900C',
        transformOrigin: 'bottom left',
        transform: 'translate(50%, -100%) rotate(-45deg) scale(0)',
        '&:before': { display: 'none' },
        '&.MuiSlider-valueLabelOpen': {
            transform: 'translate(50%, -100%) rotate(-45deg) scale(1)',
        },
        '& > *': {
            transform: 'rotate(45deg)',
        },
    },
});

const Item = styled(Paper)(({ theme }) => ({
    // backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',
    // ...theme.typography.body2,
    padding: theme.spacing(1),
    textAlign: 'center',
    color: theme.palette.text.secondary,
    background: 'transparent',
    boxShadow: 'none'
}));

const Main = () => {
    const [nader, setNader] = useState('nader');
    const [result, setResult] = useState('');
    const [playVal, setPlayVal] = useState(0)
    const [side, setSide] = useState('heads')
    const [fundType, setFundType] = useState('')

    const [open, setOpen] = React.useState(false);
    const handleOpen = (type) => {
        setOpen(true)
        setFundType(type)
    }
    const handleClose = () => setOpen(false);

    const coinToss = () => {
        if (Math.random() < 0.5) {
            setResult('heads')
            console.log("heads");
        } else {
            setResult('tails');
            console.log("tails");
        }
    }

    const onClickSide = (type) => {
        setSide(type)
        setResult(type)
    }

    const handleSliderChange = (event, newValue) => {
        setPlayVal(newValue);
    };

    const setSpecialVal = (newValue) => {
        setPlayVal(newValue)
    }

    const [values, setValues] = React.useState({
        amount: '',
        password: '',
        weight: '',
        weightRange: '',
        showPassword: false,
    });

    const handleChange = (prop) => (event) => {
        setValues({ ...values, [prop]: event.target.value });
    };

    // web3 section 
    const [near, setNear] = useState()
    const [accountId, setAccountId] = useState()
    const [contract, setContract] = useState()
    const [wallet, setWallet] = useState()
    const [connectBtnCaption, setConnectionBtnCaption] = useState('Connect Wallet')
    const initContract = async () => {
        // Initialize connection to the NEAR testnet
        const nearTemp = await connect(nearConfig)
        setNear(nearTemp)
        console.log('near: ', nearTemp)
        const walletTemp = new WalletConnection(nearTemp)
        setWallet(walletTemp)
        console.log('wallet: ', walletTemp)

        const accountIdTemp = walletTemp.getAccountId()
        setAccountId(accountIdTemp)
        console.log('accountId: ', accountIdTemp)

        if (!accountIdTemp) {
            return
        }
        // if (wallet.isSignedIn()) {
        //     console.log("You are signed")
        // }
        // // wallet.requestSignIn(contractName)
        // if (wallet.isSignedIn()) {
        //     console.log("You are signed")
        // }

        const account = await nearTemp.account(accountIdTemp);
        console.log('account: ', account)
        const myBalance = await account.getAccountBalance();
        console.log('my balance: ', myBalance)

        // const contract = await new Contract(wallet.account(), nearConfig.contractName)

        // Initializing Wallet based Account. It can work with NEAR testnet wallet that
        // is hosted at https://wallet.testnet.near.org
        // window.walletConnection = new WalletConnection(near)

        // // Getting the Account ID. If still unauthorized, it's just empty string
        // window.accountId = window.walletConnection.getAccountId()

        // // Initializing our contract APIs by contract name and configuration
        // window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
        //     // View methods are read only. They don't modify the state, but usually return some value.
        //     viewMethods: ["event_count"],
        //     // Change methods can modify the state. But you don't receive the returned value when called.
        //     changeMethods: ['add_event', 'add_vote', "list_events"],
        // })
    }

    const onConnectClick = async () => {
        if (wallet.isSignedIn()) {
            console.log("You are already signed")

        } else {
            wallet.requestSignIn(nearConfig.contractName)
        }
        if (wallet.isSignedIn()) {
            console.log('you are signed')

            setConnectionBtnCaption(accountId)

            const contractTemp = await new Contract(wallet.account(), nearConfig.contractName, {
                viewMethods: ['get_creator', 'get_user_balance', 'get_history', 'get_times', 'get_current_timestamp'],
                changeMethods: ['flip', 'deposit', 'withdraw', 'user_deposit', 'user_withdraw']
            })
            setContract(contractTemp)
            console.log('contract: ', contractTemp)
            return
        }

        // if (wallet.isSignedIn()) {
        //     console.log("You are signed now!")
        //     setConnectionBtnCaption(accountId)

        //     const contractTemp = await new Contract(wallet.account(), nearConfig.contractName, {
        //         viewMethods: ['get_creator', 'get_user_balance'],
        //         changeMethods: ['']
        //     })
        //     setContract(contractTemp)
        //     console.log('contract: ', contractTemp)
        // }
    }

    useEffect(async () => {
        await initContract()
    }, [connectBtnCaption])

    useEffect(async () => {
        if (contract) {
            const accountIdTemp = await contract.get_creator()
            console.log('contract account Id: ', accountIdTemp)
        }
    }, [contract])
    return (
        <div className='body'>
            <AppBar position="static" sx={{ backgroundColor: '#1C1F25' }}>
                <Toolbar>
                    <Typography variant="h6" component="div" sx={{ flexGrow: 1, display: 'flex', justifyContent: 'flex-start', alignItems: 'center' }}>
                        <img src='/assets/logo.png' alt='flip'
                            style={{ width: '50px', height: '50px', cursor: 'pointer' }}
                        />
                        <div className='menuItem'>COINFLIP</div>
                        <div className='menuItem'>COINFLIP (PVP)</div>
                        <div className='menuItem'>FAQ</div>
                        <div className='menuItem'>LEADERBOARD</div>
                    </Typography>
                    {/* <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>COINFLIP</Typography>
                    <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>COINFLIP</Typography>
                    <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>COINFLIP</Typography> */}

                    <Button onClick={onConnectClick} color='secondary' variant="outlined" sx={{ color: 'white' }}>{connectBtnCaption}</Button>
                </Toolbar>
            </AppBar>
            <div className='container'>
                <Box
                    sx={{ flexGrow: 1, mt: 5, pb: 5, pt: 5 }}
                >
                    <Grid
                        container rowSpacing={3} direction='row' justifyContent='space-between'
                        sx={{ flexWrap: 'wrap-reverse', }}
                    >
                        <Grid item xs={12} sm={4}
                            sx={{
                                backgroundColor: '#1C1F25',
                                borderRadius: '15px',
                                p: 3
                            }}
                        >
                            <Item
                                sx={{ color: 'wheat', fontSize: '35px', fontWeight: 'bold' }}
                            >
                                Recent Flips
                            </Item>
                            <div style={{ display: 'flex', justifyContent: 'space-between', color: 'wheat' }}>
                                <h4 style={{ color: 'wheat' }}>dleer.near flipped TAILS betting 0.400 Ⓝ and lost</h4>
                                <h4 style={{ marginLeft: '20px', color: 'yellow' }}>152h 22m</h4>
                            </div>
                            <div style={{ display: 'flex', justifyContent: 'space-between', color: 'wheat' }}>
                                <h4 style={{ color: 'wheat' }}>dleer.near flipped TAILS betting 0.400 Ⓝ and lost</h4>
                                <h4 style={{ marginLeft: '20px', color: 'yellow' }}>152h 23m</h4>
                            </div>

                        </Grid>
                        <Grid
                            item
                            xs={12}
                            sm={7}
                            sx={{
                                // backgroundColor: 'rgba(255,255,100, 0.2)',
                                // backgroundImage: 'linear-gradient(180deg, #b4ded8, rgba(255,255,100, 0.2))',
                                borderRadius: '15px',
                                p: 3
                            }}
                        >
                            <div style={{ width: '100%', marginLeft: '0%' }}>
                                <Item
                                // sx={{ backgroundImage: 'linear-gradient(180deg, #b4ded8, #0b473f)' }}
                                >
                                    {/* <div id="coin" className={result} >
                                        <div className="side-a">
                                            <h2>TAIL</h2>
                                        </div>
                                        <div className="side-b">
                                            <h2>HEAD</h2>
                                        </div>
                                    </div> */}
                                    {
                                        side === 'heads' ? (
                                            <img src='/assets/heads.png' alt='front' style={{ width: '225px', height: '225px' }} />
                                        ) : (
                                            <img src='/assets/tails.png' alt='front' style={{ width: '225px', height: '225px' }} />
                                        )
                                    }
                                </Item>
                                <Grid item container direction='row' justifyContent='space-between' sx={{ mt: 5 }}>
                                    <Button color='secondary' onClick={() => onClickSide('heads')} variant={side == 'heads' ? 'contained' : 'outlined'}
                                        sx={{
                                            width: '45%',
                                            height: '50px',
                                            fontWeight: 'bold',
                                            color: 'white',
                                            fontSize: '20px'
                                        }}>
                                        Head
                                    </Button>
                                    <Button color='secondary' onClick={() => onClickSide('tails')} variant={side == 'tails' ? 'contained' : 'outlined'}
                                        sx={{
                                            width: '45%',
                                            fontWeight: 'bold',
                                            color: 'white',
                                            height: '50px',
                                            fontSize: '20px'
                                        }}
                                    >
                                        Tail
                                    </Button>
                                </Grid>

                                <Item sx={{ mt: 5 }}>
                                    <Stack spacing={4} direction="row" sx={{ mb: 1, mt: 1, color: 'white', fontSize: '20px' }} alignItems="center">
                                        <div style={{ fontSize: '20px' }}>0.1N</div>
                                        <PrettoSlider
                                            valueLabelDisplay="auto"
                                            aria-label="pretto slider"
                                            defaultValue={2}
                                            onChange={handleSliderChange}
                                            value={typeof playVal === 'number' ? playVal : 0}
                                            min={0.1}
                                            max={5}
                                            step={0.1}
                                        />
                                        <div style={{ fontSize: '20px' }}>5N</div>
                                    </Stack>
                                    <Stack spacing={3} direction="row" sx={{ mb: 1, mt: 2 }} alignItems="center" justifyContent="center">
                                        <Button color='secondary' variant={playVal == 1 ? 'contained' : 'outlined'} onClick={() => setSpecialVal(1)} sx={{ width: '20%', fontSize: '20px' }}>1N</Button>
                                        <Button color='secondary' variant={playVal == 2 ? 'contained' : 'outlined'} onClick={() => setSpecialVal(2)} sx={{ width: '20%', fontSize: '20px' }}>2N</Button>
                                        <Button color='secondary' variant={playVal == 5 ? 'contained' : 'outlined'} onClick={() => setSpecialVal(5)} sx={{ width: '20%', fontSize: '20px' }}>5N</Button>
                                    </Stack>
                                </Item>
                                <Button
                                    variant='contained'
                                    onClick={coinToss}
                                    sx={{ width: '100%', fontSize: '20px', width: '100%', mt: 5, color: 'white' }}
                                    color='secondary'
                                    size='large'
                                    className='Button'
                                >
                                    Flip&nbsp;<font style={{ color: 'yellow', fontSize: '20px' }}>{playVal}</font>
                                </Button>
                                {/* <Item sx={{ mt: 5 }}>
                                    
                                </Item> */}
                                <Grid item container direction='row' justifyContent='space-between' sx={{ mt: 5, p: 0 }}>
                                    <Button onClick={() => handleOpen('deposit')} color='secondary' variant='contained' sx={{ width: '45%', height: '50px', fontSize: '20px', color: 'white' }}>Deposit</Button>
                                    <Button onClick={() => handleOpen('withdraw')} color='secondary' variant='contained' sx={{ width: '45%', height: '50px', fontSize: '20px', color: 'white' }}>Withdraw</Button>
                                </Grid>
                            </div>
                        </Grid>
                    </Grid>

                    {/* <Grid item xs={12} container justifyContent='center' sx={{ mt: 7, }}>
                        <Grid
                            item
                            xs={9}
                            container
                            direction="row"
                            justifyContent="space-around"
                            alignItems="center"
                            sx={{
                                backgroundColor: 'rgba(255,255,100, 0.2)',
                                borderRadius: 2
                            }}
                        >
                            <Button sx={{ fontWeight: '20px', color: 'white', textTransform: 'none', fontSize: '17px' }}>
                                Flip<br />Responsibly</Button>
                            <Button sx={{ fontWeight: '20px', color: 'white', textTransform: 'none', fontSize: '17px' }}>
                                How To <br />Play</Button>
                            <Button sx={{ fontWeight: '20px', color: 'white', textTransform: 'none', fontSize: '17px' }}>
                                FAQ</Button>
                        </Grid>
                    </Grid> */}
                    <Grid item xs={12} container justifyContent='center' sx={{ mt: 7 }} >
                        <Grid
                            item
                            xs={10}
                            sm={4}
                            md={3}
                            container
                            direction="row"
                            justifyContent="space-around"
                            alignItems="center"

                        >
                            <a href='https://twitter.com/PandamilNFT'><img src='/assets/twitter.png' style={{ width: '30px', height: '30px' }} /></a>
                            <a href='https://discord.gg/mQnZuysV4n'><img src='/assets/discord.png' style={{ width: '30px', height: '30px' }} /></a>
                            <a href='https://pandamillionaires.club/'><img src='/assets/panda.png' style={{ width: '35px', height: '30px' }} /></a>
                        </Grid>
                    </Grid>
                </Box>

                <FundModal open={open} handleClose={handleClose} type={fundType} />
            </div>
        </div >
    )
}

export default Main
'''
'''--- src/page/coin.css ---
#coin {
    position: relative;
    margin: 0 auto;
    width: 100px;
    height: 100px;
}

#coin div {
    width: 100%;
    height: 100%;
    -webkit-border-radius: 50%;
    -moz-border-radius: 50%;
    border-radius: 50%;
    -webkit-box-shadow: inset 0 0 45px rgba(255, 255, 255, 0.3),
        0 12px 20px -10px rgba(0, 0, 0, 0.4);
    -moz-box-shadow: inset 0 0 45px rgba(255, 255, 255, 0.3),
        0 12px 20px -10px rgba(0, 0, 0, 0.4);
    box-shadow: inset 0 0 45px rgba(255, 255, 255, 0.3),
        0 12px 20px -10px rgba(0, 0, 0, 0.4);
}

.side-a {
    background-color: #bb0000;
    color: white;
    text-align: center;
}

.side-b {
    background-color: #3e3e3e;
    color: white;
    text-align: center;
}

#coin {
    transition: -webkit-transform 1s ease-in;
    transform-style: preserve-3d;
}

#coin div {
    position: absolute;
    backface-visibility: hidden;
}

.side-a {
    z-index: 100;
}

.side-b {
    transform: rotateY(-180deg);
}

#coin.heads {
    -webkit-animation: flipHeads 2s ease-out forwards;
    -moz-animation: flipHeads 2s ease-out forwards;
    -o-animation: flipHeads 2s ease-out forwards;
    animation: flipHeads 2s ease-out forwards;
}

#coin.tails {
    -webkit-animation: flipTails 2s ease-out forwards;
    -moz-animation: flipTails 2s ease-out forwards;
    -o-animation: flipTails 2s ease-out forwards;
    animation: flipTails 2s ease-out forwards;
}

@keyframes flipHeads {
    from {
        -webkit-transform: rotateY(0);
        -moz-transform: rotateY(0);
        transform: rotateY(0);
    }

    to {
        -webkit-transform: rotateY(540deg);
        -moz-transform: rotateY(540deg);
        transform: rotateY(540deg);
    }
}

@keyframes flipTails {
    from {
        -webkit-transform: rotateY(0);
        -moz-transform: rotateY(0);
        transform: rotateY(0);
    }

    to {
        -webkit-transform: rotateY(720deg);
        -moz-transform: rotateY(720deg);
        transform: rotateY(720deg);
    }
}
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''