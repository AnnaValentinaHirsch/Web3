*GitHub Repository "JoaquimLey/link3"*

'''--- client-web/README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- client-web/package.json ---
{
  "name": "client-web",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.1",
    "@testing-library/react": "^12.1.2",
    "@testing-library/user-event": "^13.5.0",
    "buffer": "^6.0.3",
    "formik": "^2.2.9",
    "near-api-js": "^0.44.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-hot-toast": "^2.2.0",
    "react-scripts": "5.0.0",
    "web-vitals": "^2.1.3"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.2",
    "postcss": "^8.4.5",
    "tailwindcss": "^3.0.13"
  }
}

'''
'''--- client-web/postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- client-web/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- client-web/public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- client-web/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- client-web/src/App.js ---
import React, { useEffect, useState, useCallback } from 'react';
import toast, { Toaster } from 'react-hot-toast';
import "regenerator-runtime/runtime";
import { useFormik } from 'formik';
import Big from "big.js";
// Assets
import logo from './link3_logo.svg';
import nearLogo from './near_logo.svg';
import githubLogo from './github_logo.svg';
import copyicon from './copy_icon.svg';

const BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();

const App = ({ contract, currentUser, nearConfig, wallet }) => {
  // useState
  const [isSignInLoading, setIsSignInLoading] = useState(false)
  const [userLink3, setUserLink3] = useState(null);
  const [otherLink3, setOtherLink3] = useState(null);
  const [isUserLink3Loaded, setIsUserLink3Loaded] = useState(false)
  const [isCreateLinkLoading, setIsCreateLinkLoading] = useState(false)
  // Actions
  const fetchUserLink3 = useCallback(async () => {
    if (currentUser) {
      const link3 = await contract.get({ account_id: currentUser.accountId });
      setUserLink3(link3)
      setIsUserLink3Loaded(true)
    }
  }, [currentUser, contract]);

  const fetchOtherLink3 = useCallback(async () => {
    if (currentUser) {
      const accountId = window.location.pathname.slice(1)
      const link3 = await contract.get({ account_id: accountId });
      if (link3) {
        setOtherLink3(link3)
      }
      console.log('accountId: ', accountId)
      console.log('setOtherLink3: ', link3)
    }
  }, [currentUser, contract]);

  const signIn = () => {
    setIsSignInLoading(true)
    wallet.requestSignIn(nearConfig.contractName, "Link3 Testnet");
  };

  const signOut = () => {
    setIsSignInLoading(true)
    wallet.signOut();
    window.location.replace(window.location.origin + window.location.pathname);
    setIsSignInLoading(false)
  };

  const toHome = () => {
    if (window.location.pathname !== '/') {
      window.location = '/'
    }
  }

  const copyText = () => {
    toast.success('Copied to clipboard')
    navigator.clipboard.writeText(window.location.host + '/' + currentUser.accountId)
  }

  // useEffects
  useEffect(() => {
    if (window.location.pathname !== '/') {
      fetchOtherLink3()
    }
    fetchUserLink3()
    setIsSignInLoading(false)
  }, [currentUser, setIsSignInLoading, fetchUserLink3, fetchOtherLink3])

  // Render Methods
  const renderLoggedOutContainer = () => {
    return (
      <div className="mt-20 text-center flex flex-col justify-center items-center text-white space-y-8 bt-red-500">
        <header className="space-y-6">
          <img src={logo} className='h-80 mx-auto rounded-full' alt="NEAR" />
          <h1 className="text-6xl">Welcome to Link3</h1>
          <p className="text-md">
            a linktree alternative built on <a className="underline" href="https://near.org">NEAR</a>.
          </p>
        </header>

        <button onClick={signIn}
          className="flex items-center space-x-1 bg-pink-500 ease-in-out transform duration-700 hover:bg-pink-300 px-8 py-2 rounded-lg font-bold"
        >
          Login with NEAR
          <img src={nearLogo}
            className={`h-6 ${isSignInLoading ? "animate-spin" : ""}`} alt="NEAR loading" />
        </button>

        <div>
          <p className="font-bold">Login to create and share your link3</p>
        </div>
      </div>
    )
  }

  const renderCreateUserLink3Container = () => {
    return (
      <div className="px-4 lg:px-0 pt-12">
        <p className='text-center text-4xl font-bold mb-8'>Let's start by creating your Link3 profile</p>
        {CreateLink3Form()}
      </div>
    )
  }

  const renderUserLink3Container = () => {
    return (
      <div className="lg:flex lg:px-2 xl:px-0 px-4 pt-10 w-full  justify-around space-y-8 lg:space-y-0 lg:space-x-8">
        <div className='w-full max-w-xl '>
          <div className="p-4 text-white text-center rounded-lg border">
            <img src={userLink3.image_uri} className="mx-auto h-20 w-20 object-cover rounded-full" alt="Link3" />
            <p className="mt-2 text-2xl font-bold">{userLink3.title}</p>
            <p className="text-xl">{userLink3.description}</p>
            <p className="mt-2 text-lg font-bold">{userLink3.owner}</p>
            {(userLink3.links.length > 0) ?
              <div className="mt-8 space-y-4 flex flex-col">
                {userLink3.links.map(item => (
                  <a key={item.id} href={item.uri} className="border-2 font-bold py-4 rounded-md transform duration-500 ease-in-out hover:bg-white hover:text-gray-800">
                    {item.image_uri && item.image_uri.length > 0 && <img className='bg-white rounded-full mx-auto w-6 h-6' src={item.image_uri} alt="Item" />}
                    <p>{item.title}</p>
                    <p className="text-xs">{item.description}</p>
                  </a>
                ))}
              </div> : <p className="mt-10 px-8 py-8 bg-gray-700 rounded-lg">Wow such empty 🐶<br />Start by creating a new link.</p>
            }
          </div>
          <div className='mt-4 px-8 lg:px-0'>
            <p className='text-center mb-2 font-semibold'>Share your link3</p>

            <p className='flex space-x-4  justify-center items-center pr-8 pl-12 py-4 rounded-lg bg-gray-400 text-gray-800 font-bold text-center'>
              <span>{window.location.host}/{currentUser.accountId}</span>
              <img
                src={copyicon}
                alt="Copy to clipboard"
                className='h-4 w-4 cursor-pointer'
                onClick={copyText} />
            </p>
          </div>
        </div>

        <div className="bg-gray-700 rounded-lg px-8 py-4 space-y-4 max-w-xl w-full">
          <h3 className="text-center font-semibold text-lg">Create a link</h3>
          {CreateLinkForm()}
        </div>
      </div>
    )
  }

  const formikLink3 = useFormik({
    initialValues: {
      title: "",
      description: "",
      image_uri: "",
      is_published: true,
    },

    onSubmit: async values => {
      try {
        if (isCreateLinkLoading) {
          return;
        }
        const createPromise = contract.create(values, BOATLOAD_OF_GAS)
        setIsCreateLinkLoading(true)
        await toast.promise(createPromise,
          {
            loading: 'Creating...',
            success: <b>Link3 created!</b>,
            error: <b>Could not create.</b>,
          }
        );
        setIsCreateLinkLoading(false)
        fetchUserLink3()
        formik.resetForm()
      } catch (e) {
        console.log('Failed to create toast ', e)
        setIsCreateLinkLoading(false)
      }
    },
  });

  const CreateLink3Form = () => {
    return (
      <form className="max-w-2xl w-full mx-auto shadow-xl bg-gray-700 px-8 py-4 rounded-lg flex flex-col" onSubmit={formikLink3.handleSubmit}>
        <label
          className="mt-2 block text-white text-sm font-bold mb-2"
          htmlFor="title">Title</label>
        <input
          className='shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
          id="title"
          name="title"
          type="text"
          onChange={formikLink3.handleChange}
          value={formikLink3.values.title}
        />

        <label
          className="mt-2 block text-white text-sm font-bold mb-2"
          htmlFor="description">Description</label>
        <input
          className='shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
          id="description"
          name="description"
          type="text"
          onChange={formikLink3.handleChange}
          value={formikLink3.values.description}
        />

        <label
          className="mt-2 block text-white text-sm font-bold mb-2"
          htmlFor="image_uri">Profile pic URL</label>
        <input
          className='shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
          id="image_uri"
          name="image_uri"
          type="link"
          onChange={formikLink3.handleChange}
          value={formikLink3.values.image_uri}
        />

        {/* <div className="mt-4 pb-4 border-b flex space-x-2 items-center">
          <label
            className="cursor-pointer  block text-white text-sm font-bold"
            htmlFor="is_published">Published</label>
          <input
            className='cursor-pointer '
            id="is_published"
            name="is_published"
            type="checkbox"
            onChange={formik.handleChange}
            value={formik.values.is_published}
          />
        </div> */}

        <button type="submit"
          className={`${isCreateLinkLoading ? "bg-gray-500 cursor-not-allowed" : "bg-pink-500  hover:bg-pink-300"} mt-6 flex items-center justify-center space-x-1 ease-in-out transform duration-700 px-8 py-4 rounded-lg font-bold`}
        >
          <p>Create</p>
          <img src={nearLogo}
            className={`h-6 ${isCreateLinkLoading ? "animate-spin" : ""}`} alt="NEAR loading" />
        </button>
      </form>
    );
  };

  const formik = useFormik({
    initialValues: {
      uri: "",
      title: "",
      description: "",
      image_uri: "",
      is_published: true,
    },

    onSubmit: async values => {
      if (isCreateLinkLoading) {
        return;
      }
      const createPromise = contract.add_link(values, BOATLOAD_OF_GAS)
      setIsCreateLinkLoading(true)
      await toast.promise(createPromise,
        {
          loading: 'Creating...',
          success: <b>Link created!</b>,
          error: <b>Could not create link.</b>,
        }
      );
      setIsCreateLinkLoading(false)
      fetchUserLink3()
      formik.resetForm()
    },
  });

  const CreateLinkForm = () => {
    return (
      <form className="flex flex-col" onSubmit={formik.handleSubmit}>
        <label
          className="block text-white text-sm font-bold mb-2"
          htmlFor="uri">URL</label>
        <input
          className='shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
          id="uri"
          name="uri"
          type="link"
          onChange={formik.handleChange}
          value={formik.values.uri}
        />

        <label
          className="mt-2 block text-white text-sm font-bold mb-2"
          htmlFor="title">Title</label>
        <input
          className='shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
          id="title"
          name="title"
          type="text"
          onChange={formik.handleChange}
          value={formik.values.title}
        />

        <label
          className="mt-2 block text-white text-sm font-bold mb-2"
          htmlFor="description">Description</label>
        <input
          className='shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
          id="description"
          name="description"
          type="text"
          onChange={formik.handleChange}
          value={formik.values.description}
        />

        <label
          className="mt-2 block text-white text-sm font-bold mb-2"
          htmlFor="image_uri">Image URL</label>
        <input
          className='shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
          id="image_uri"
          name="image_uri"
          type="link"
          onChange={formik.handleChange}
          value={formik.values.image_uri}
        />

        {/* <div className="mt-4 pb-4 border-b flex space-x-2 items-center">
          <label
            className="cursor-pointer  block text-white text-sm font-bold"
            htmlFor="is_published">Published</label>
          <input
            className='cursor-pointer '
            id="is_published"
            name="is_published"
            type="checkbox"
            onChange={formik.handleChange}
            value={formik.values.is_published}
          />
        </div> */}

        <button type="submit"
          className={`${isCreateLinkLoading ? "bg-gray-500 cursor-not-allowed" : "bg-pink-500  hover:bg-pink-300"} mt-6 flex items-center justify-center space-x-1 ease-in-out transform duration-700 px-8 py-4 rounded-lg font-bold`}
        >
          <p className={`${isCreateLinkLoading ? "hidden" : "block"}`}>Create</p>
          <img src={nearLogo}
            className={`h-6 ${isCreateLinkLoading ? "animate-spin" : ""}`} alt="NEAR loading" />
        </button>
      </form>
    );
  };

  const renderSubPath = () => {
    return (
      <div className='w-full px-4 lg:px-0 pt-16'>
        <div className="mx-auto w-full max-w-xl p-4 text-white text-center rounded-lg border">
          <img src={otherLink3.image_uri} className="mx-auto h-20 w-20 object-cover rounded-full" alt="Link3" />
          <p className="mt-2 text-2xl font-bold">{otherLink3.title}</p>
          <p className="text-xl">{otherLink3.description}</p>
          <p className="mt-2 text-lg font-bold">{otherLink3.owner}</p>
          {(otherLink3.links.length > 0) ?
            <div className="mt-8 space-y-4 flex flex-col">
              {otherLink3.links.map(item => (
                <a key={item.id} href={item.uri} className="border-2 font-bold py-4 rounded-md transform duration-500 ease-in-out hover:bg-white hover:text-gray-800">
                  {item.image_uri && item.image_uri.length > 0 && <img className='bg-white rounded-full mx-auto w-6 h-6' src={item.image_uri} alt="Item" />}
                  <p>{item.title}</p>
                  <p className="text-xs">{item.description}</p>
                </a>
              ))}
            </div> : <p className="py-8">Wow such empty.</p>
          }
        </div>
        {!userLink3 &&
          <div className='mt-4 w-full flex justify-center items-center'>
            <button onClick={toHome} className='text-2xl px-4 py-2 border rounded-lg hover:bg-white hover:text-gray-800 transform ease-in-out duration-500'>create your link3</button>
          </div>
        }
      </div>
    )
  }

  const renderLoggedInContainer = () => {
    return (
      <div className=" text-white space-y-4">
        {/* NAVBAR_START */}
        <div className="px-4 py-4 shadow-xl flex items-center justify-between">
          <div className="flex items-center space-x-4">

            <img
              onClick={toHome}
              src={logo} className='cursor-pointer h-16 mx-auto rounded-full' alt="Link3" />
            <div><p className="text-3xl">Link3</p>
              <div className="hidden lg:block items-center justify-start text-xs">
                <p>Contract id ({nearConfig.networkId}):</p>
                <a
                  href={"https://explorer" + (nearConfig.networkId === 'mainnet' ? '' : "." + nearConfig.networkId) + ".near.org/accounts/" + contract.contractId}
                  className="underline">{contract.contractId}</a>
              </div>
            </div>
          </div>
          <div className="flex flex-col justify-center items-center space-y-1">
            {currentUser ? <p className="text-center font-bold text-md">{currentUser.accountId}</p> :
              <div class="h-3 animate-pulse w-full bg-gray-700 rounded"></div>
            }
            <button onClick={signOut} className="flex items-center space-x-1 bg-pink-500 ease-in-out transform duration-700 hover:bg-pink-300 px-8 py-2 rounded-lg font-bold">
              Disconnect
              <img src={nearLogo} className={`h-6 ${isSignInLoading ? "animate-spin" : ""}`} alt="NEAR loading" />
            </button>
          </div>
        </div>
        {/* NAVBAR_END */}
        {window.location.pathname === '/' ?
          isUserLink3Loaded ? userLink3 ? renderUserLink3Container() : renderCreateUserLink3Container() :
            <div className="mx-auto">
              <img src={nearLogo} className='mt-16 h-16 animate-spin mx-auto' alt="NEAR" />
            </div>
          : otherLink3 ? renderSubPath() :

            <div className='pt-12 text-center'>
              <p className='text-2xl'>Link3 for <span className='font-bold underline'>{window.location.pathname.slice(1)}</span> not found.</p>
              <button onClick={toHome} className='mt-8 text-lg underline'>to home</button>
            </div>
        }
      </div >
    )
  }

  // Hacky set title
  document.title = 'link3'
  return (
    <div className="bg-gray-800 min-h-screen flex flex-col justify-between text-white">
      <Toaster
        position="top-center"
        reverseOrder={false}
      />
      {currentUser ? renderLoggedInContainer() : renderLoggedOutContainer()}
      {/* Footer */}
      <div className="mt-20 mx-auto w-full text-center py-4 flex items-center justify-center space-x-2">
        <p className="text-sm">
          <span>by </span>
          <a
            className="underline"
            href="https://twitter.com/joaquimley"
          >
            @JoaquimLey
          </a>
        </p>

        <p>|</p>
        <p>joaquimley.near</p>
        <a href="https://github.com/JoaquimLey/link3">
          <img src={githubLogo} className="h-4" alt="GitHub" />
        </a>
      </div>
    </div>
  );
}
export default App;

'''
'''--- client-web/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- client-web/src/copy_icon.svg ---
<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24px" viewBox="0 0 24 24" width="24px"><g><rect fill="none" height="24" width="24"/></g><g><path d="M15,20H5V7c0-0.55-0.45-1-1-1h0C3.45,6,3,6.45,3,7v13c0,1.1,0.9,2,2,2h10c0.55,0,1-0.45,1-1v0C16,20.45,15.55,20,15,20z M20,16V4c0-1.1-0.9-2-2-2H9C7.9,2,7,2.9,7,4v12c0,1.1,0.9,2,2,2h9C19.1,18,20,17.1,20,16z M18,16H9V4h9V16z"/></g></svg>
'''
'''--- client-web/src/github_logo.svg ---
<svg viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8C0 11.54 2.29 14.53 5.47 15.59C5.87 15.66 6.02 15.42 6.02 15.21C6.02 15.02 6.01 14.39 6.01 13.72C4 14.09 3.48 13.23 3.32 12.78C3.23 12.55 2.84 11.84 2.5 11.65C2.22 11.5 1.82 11.13 2.49 11.12C3.12 11.11 3.57 11.7 3.72 11.94C4.44 13.15 5.59 12.81 6.05 12.6C6.12 12.08 6.33 11.73 6.56 11.53C4.78 11.33 2.92 10.64 2.92 7.58C2.92 6.71 3.23 5.99 3.74 5.43C3.66 5.23 3.38 4.41 3.82 3.31C3.82 3.31 4.49 3.1 6.02 4.13C6.66 3.95 7.34 3.86 8.02 3.86C8.7 3.86 9.38 3.95 10.02 4.13C11.55 3.09 12.22 3.31 12.22 3.31C12.66 4.41 12.38 5.23 12.3 5.43C12.81 5.99 13.12 6.7 13.12 7.58C13.12 10.65 11.25 11.33 9.47 11.53C9.76 11.78 10.01 12.26 10.01 13.01C10.01 14.08 10 14.94 10 15.21C10 15.42 10.15 15.67 10.55 15.59C13.71 14.53 16 11.53 16 8C16 3.58 12.42 0 8 0Z" transform="scale(64)" fill="#FFFFFF"/>
</svg>

'''
'''--- client-web/src/index.css ---
body {
  margin: 0;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

@tailwind base;
@tailwind components;
@tailwind utilities;

'''
'''--- client-web/src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import * as nearAPI from 'near-api-js';
import getConfig from './near/config.js';
import './index.css';
import App from './App';
// Import globaly as react-scripts 5.0.0 don't allow poly
global.Buffer = global.Buffer || require('buffer').Buffer

// Taken from: https://github.com/near-examples/rust-status-message/blob/master/frontend/index.js#L8-L41
// Ref: https://github.com/near/near-api-js/blob/master/examples/quick-reference.md
const initContract = async () => {

  const nearConfig = getConfig(process.env.NODE_ENV || 'testnet');
  // Initializing connection to the NEAR TestNet
  const near = await nearAPI.connect({ keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore(), ...nearConfig });
  // Needed to access wallet
  const walletConnection = new nearAPI.WalletConnection(near);

  // Load in account data
  let currentUser;
  if (walletConnection.getAccountId()) {
    currentUser = {
      accountId: walletConnection.getAccountId(),
      balance: (await walletConnection.account().state()).amount
    };
  }

  // Initializing our contract APIs by contract name and configuration
  const contract = new nearAPI.Contract(walletConnection.account(), nearConfig.contractName, {
    viewMethods: ['get'],
    changeMethods: ['create', 'add_link'],
    // Sender is the account ID to initialize transactions.
    // getAccountId() will return empty string if user is still unauthorized
    sender: walletConnection.getAccountId()
  });

  return { contract, currentUser, nearConfig, walletConnection };
}

window.nearInitPromise = initContract().then(({ contract, currentUser, nearConfig, walletConnection }) => {
  ReactDOM.render(
    <React.StrictMode>
      <App
        contract={contract}
        currentUser={currentUser}
        nearConfig={nearConfig}
        wallet={walletConnection}
      />
    </React.StrictMode>,
    document.getElementById('root')
  );
});
'''
'''--- client-web/src/link3_logo.svg ---
<svg width="121" height="116" viewBox="0 0 121 116" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="121" height="116" fill="#F20091"/>
<path d="M79.1641 54.8047H82.2578C83.7734 54.8047 85.0234 54.5547 86.0078 54.0547C87.0078 53.5391 87.75 52.8438 88.2344 51.9688C88.7344 51.0781 88.9844 50.0781 88.9844 48.9688C88.9844 47.6562 88.7656 46.5547 88.3281 45.6641C87.8906 44.7734 87.2344 44.1016 86.3594 43.6484C85.4844 43.1953 84.375 42.9688 83.0312 42.9688C81.8125 42.9688 80.7344 43.2109 79.7969 43.6953C78.875 44.1641 78.1484 44.8359 77.6172 45.7109C77.1016 46.5859 76.8438 47.6172 76.8438 48.8047H72.5078C72.5078 47.0703 72.9453 45.4922 73.8203 44.0703C74.6953 42.6484 75.9219 41.5156 77.5 40.6719C79.0938 39.8281 80.9375 39.4062 83.0312 39.4062C85.0938 39.4062 86.8984 39.7734 88.4453 40.5078C89.9922 41.2266 91.1953 42.3047 92.0547 43.7422C92.9141 45.1641 93.3438 46.9375 93.3438 49.0625C93.3438 49.9219 93.1406 50.8438 92.7344 51.8281C92.3438 52.7969 91.7266 53.7031 90.8828 54.5469C90.0547 55.3906 88.9766 56.0859 87.6484 56.6328C86.3203 57.1641 84.7266 57.4297 82.8672 57.4297H79.1641V54.8047ZM79.1641 58.3672V55.7656H82.8672C85.0391 55.7656 86.8359 56.0234 88.2578 56.5391C89.6797 57.0547 90.7969 57.7422 91.6094 58.6016C92.4375 59.4609 93.0156 60.4062 93.3438 61.4375C93.6875 62.4531 93.8594 63.4688 93.8594 64.4844C93.8594 66.0781 93.5859 67.4922 93.0391 68.7266C92.5078 69.9609 91.75 71.0078 90.7656 71.8672C89.7969 72.7266 88.6562 73.375 87.3438 73.8125C86.0312 74.25 84.6016 74.4688 83.0547 74.4688C81.5703 74.4688 80.1719 74.2578 78.8594 73.8359C77.5625 73.4141 76.4141 72.8047 75.4141 72.0078C74.4141 71.1953 73.6328 70.2031 73.0703 69.0312C72.5078 67.8438 72.2266 66.4922 72.2266 64.9766H76.5625C76.5625 66.1641 76.8203 67.2031 77.3359 68.0938C77.8672 68.9844 78.6172 69.6797 79.5859 70.1797C80.5703 70.6641 81.7266 70.9062 83.0547 70.9062C84.3828 70.9062 85.5234 70.6797 86.4766 70.2266C87.4453 69.7578 88.1875 69.0547 88.7031 68.1172C89.2344 67.1797 89.5 66 89.5 64.5781C89.5 63.1562 89.2031 61.9922 88.6094 61.0859C88.0156 60.1641 87.1719 59.4844 86.0781 59.0469C85 58.5938 83.7266 58.3672 82.2578 58.3672H79.1641Z" fill="#17B580"/>
<path d="M79.1641 54.8047V53.8047H78.1641V54.8047H79.1641ZM86.0078 54.0547L86.4607 54.9463L86.4661 54.9435L86.0078 54.0547ZM88.2344 51.9688L87.3624 51.4792L87.3595 51.4844L88.2344 51.9688ZM79.7969 43.6953L80.2501 44.5867L80.2559 44.5837L79.7969 43.6953ZM77.6172 45.7109L76.7623 45.1919L76.7556 45.2032L77.6172 45.7109ZM76.8438 48.8047V49.8047H77.8438V48.8047H76.8438ZM72.5078 48.8047H71.5078V49.8047H72.5078V48.8047ZM77.5 40.6719L77.0321 39.7881L77.0285 39.79L77.5 40.6719ZM88.4453 40.5078L88.0164 41.4112L88.0239 41.4147L88.4453 40.5078ZM92.0547 43.7422L91.1964 44.2553L91.1989 44.2594L92.0547 43.7422ZM92.7344 51.8281L91.81 51.4466L91.8069 51.4542L92.7344 51.8281ZM90.8828 54.5469L90.1757 53.8397L90.1691 53.8464L90.8828 54.5469ZM87.6484 56.6328L88.0198 57.5613L88.0292 57.5575L87.6484 56.6328ZM79.1641 57.4297H78.1641V58.4297H79.1641V57.4297ZM79.1641 58.3672H78.1641V59.3672H79.1641V58.3672ZM79.1641 55.7656V54.7656H78.1641V55.7656H79.1641ZM91.6094 58.6016L90.8827 59.2886L90.8893 59.2955L91.6094 58.6016ZM93.3438 61.4375L92.3908 61.7407L92.3936 61.7494L92.3965 61.7581L93.3438 61.4375ZM93.0391 68.7266L92.1247 68.3215L92.1205 68.3312L93.0391 68.7266ZM90.7656 71.8672L90.1079 71.1138L90.102 71.1191L90.7656 71.8672ZM78.8594 73.8359L78.55 74.7869L78.5534 74.788L78.8594 73.8359ZM75.4141 72.0078L74.7834 72.784L74.7909 72.7899L75.4141 72.0078ZM73.0703 69.0312L72.1666 69.4593L72.1688 69.464L73.0703 69.0312ZM72.2266 64.9766V63.9766H71.2266V64.9766H72.2266ZM76.5625 64.9766H77.5625V63.9766H76.5625V64.9766ZM77.3359 68.0938L76.4704 68.5948L76.4771 68.606L77.3359 68.0938ZM79.5859 70.1797L79.1273 71.0683L79.1358 71.0727L79.1444 71.0769L79.5859 70.1797ZM86.4766 70.2266L86.9059 71.1297L86.9121 71.1267L86.4766 70.2266ZM88.7031 68.1172L87.833 67.6241L87.8269 67.6353L88.7031 68.1172ZM88.6094 61.0859L87.7686 61.6274L87.7729 61.634L88.6094 61.0859ZM86.0781 59.0469L85.6907 59.9688L85.6987 59.9721L85.7067 59.9754L86.0781 59.0469ZM79.1641 55.8047H82.2578V53.8047H79.1641V55.8047ZM82.2578 55.8047C83.8752 55.8047 85.2936 55.539 86.4607 54.9463L85.5549 53.1631C84.7532 53.5703 83.6716 53.8047 82.2578 53.8047V55.8047ZM86.4661 54.9435C87.6192 54.3489 88.5174 53.5222 89.1093 52.4531L87.3595 51.4844C86.9826 52.1653 86.3964 52.7292 85.5495 53.1659L86.4661 54.9435ZM89.1064 52.4583C89.6974 51.4054 89.9844 50.2344 89.9844 48.9688H87.9844C87.9844 49.9219 87.7713 50.7508 87.3624 51.4792L89.1064 52.4583ZM89.9844 48.9688C89.9844 47.5506 89.7487 46.2879 89.2257 45.2232L87.4306 46.105C87.7826 46.8215 87.9844 47.7619 87.9844 48.9688H89.9844ZM89.2257 45.2232C88.6946 44.142 87.8856 43.3127 86.8192 42.7604L85.8995 44.5364C86.5831 44.8904 87.0867 45.4049 87.4306 46.105L89.2257 45.2232ZM86.8192 42.7604C85.76 42.2119 84.4797 41.9688 83.0312 41.9688V43.9688C84.2703 43.9688 85.2088 44.1787 85.8995 44.5364L86.8192 42.7604ZM83.0312 41.9688C81.6776 41.9688 80.4378 42.2386 79.3379 42.8069L80.2559 44.5837C81.031 44.1833 81.9474 43.9688 83.0312 43.9688V41.9688ZM79.3436 42.8039C78.2577 43.3561 77.3913 44.1562 76.7624 45.192L78.472 46.2299C78.9056 45.5157 79.4923 44.972 80.2501 44.5867L79.3436 42.8039ZM76.7556 45.2032C76.135 46.2564 75.8438 47.4692 75.8438 48.8047H77.8438C77.8438 47.7652 78.0681 46.9155 78.4787 46.2186L76.7556 45.2032ZM76.8438 47.8047H72.5078V49.8047H76.8438V47.8047ZM73.5078 48.8047C73.5078 47.2478 73.8978 45.8524 74.672 44.5944L72.9687 43.5462C71.9928 45.132 71.5078 46.8928 71.5078 48.8047H73.5078ZM74.672 44.5944C75.4475 43.3342 76.5379 42.3202 77.9715 41.5537L77.0285 39.79C75.3058 40.711 73.9431 41.9627 72.9687 43.5462L74.672 44.5944ZM77.9679 41.5557C79.3959 40.7997 81.0742 40.4062 83.0312 40.4062V38.4062C80.8008 38.4062 78.7916 38.8566 77.0321 39.7881L77.9679 41.5557ZM83.0312 40.4062C84.9753 40.4062 86.6282 40.7521 88.0164 41.4112L88.8742 39.6044C87.1687 38.7948 85.2122 38.4062 83.0312 38.4062V40.4062ZM88.0239 41.4147C89.3926 42.0506 90.4419 42.9933 91.1964 44.2553L92.913 43.2291C91.9487 41.6161 90.5918 40.4025 88.8667 39.6009L88.0239 41.4147ZM91.1989 44.2594C91.941 45.4873 92.3438 47.0697 92.3438 49.0625H94.3438C94.3438 46.8053 93.8871 44.8408 92.9105 43.2249L91.1989 44.2594ZM92.3438 49.0625C92.3438 49.7638 92.1779 50.5552 91.81 51.4466L93.6587 52.2096C94.1034 51.1323 94.3438 50.08 94.3438 49.0625H92.3438ZM91.8069 51.4542C91.4733 52.2817 90.9378 53.0777 90.1757 53.8398L91.5899 55.254C92.5153 54.3286 93.2142 53.3121 93.6618 52.2021L91.8069 51.4542ZM90.1691 53.8464C89.4537 54.5753 88.497 55.2019 87.2677 55.7081L88.0292 57.5575C89.4561 56.9699 90.6557 56.2059 91.5965 55.2473L90.1691 53.8464ZM87.277 55.7043C86.0966 56.1765 84.6356 56.4297 82.8672 56.4297V58.4297C84.8175 58.4297 86.544 58.1516 88.0198 57.5613L87.277 55.7043ZM82.8672 56.4297H79.1641V58.4297H82.8672V56.4297ZM80.1641 57.4297V54.8047H78.1641V57.4297H80.1641ZM80.1641 58.3672V55.7656H78.1641V58.3672H80.1641ZM79.1641 56.7656H82.8672V54.7656H79.1641V56.7656ZM82.8672 56.7656C84.9692 56.7656 86.6407 57.0164 87.9169 57.4792L88.5987 55.599C87.0311 55.0305 85.109 54.7656 82.8672 54.7656V56.7656ZM87.9169 57.4792C89.2319 57.956 90.203 58.5696 90.8827 59.2886L92.336 57.9146C91.3908 56.9148 90.1275 56.1534 88.5987 55.599L87.9169 57.4792ZM90.8893 59.2955C91.6219 60.0557 92.1139 60.8704 92.3908 61.7407L94.2967 61.1343C93.9174 59.9421 93.2531 58.8661 92.3295 57.9077L90.8893 59.2955ZM92.3965 61.7581C92.7073 62.6762 92.8594 63.5837 92.8594 64.4844H94.8594C94.8594 63.3538 94.6677 62.23 94.291 61.1169L92.3965 61.7581ZM92.8594 64.4844C92.8594 65.9635 92.6059 67.2356 92.1248 68.3215L93.9534 69.1316C94.566 67.7488 94.8594 66.1928 94.8594 64.4844H92.8594ZM92.1205 68.3312C91.6466 69.4323 90.9765 70.3557 90.108 71.1139L91.4233 72.6205C92.5235 71.66 93.369 70.4896 93.9576 69.1219L92.1205 68.3312ZM90.102 71.1191C89.2411 71.8828 88.2207 72.4661 87.0275 72.8638L87.66 74.7612C89.0918 74.2839 90.3527 73.5703 91.4292 72.6153L90.102 71.1191ZM87.0275 72.8638C85.8283 73.2636 84.5066 73.4688 83.0547 73.4688V75.4688C84.6965 75.4688 86.2342 75.2364 87.66 74.7612L87.0275 72.8638ZM83.0547 73.4688C81.6662 73.4688 80.3717 73.2716 79.1654 72.8839L78.5534 74.788C79.9721 75.244 81.4744 75.4688 83.0547 75.4688V73.4688ZM79.1687 72.885C77.9781 72.4977 76.9375 71.9431 76.0373 71.2258L74.7909 72.7899C75.8906 73.6662 77.1469 74.3304 78.55 74.7869L79.1687 72.885ZM76.0447 71.2317C75.1602 70.5131 74.4711 69.6386 73.9718 68.5985L72.1688 69.464C72.7946 70.7677 73.6679 71.8775 74.7835 72.7839L76.0447 71.2317ZM73.9741 68.6032C73.484 67.5686 73.2266 66.3668 73.2266 64.9766H71.2266C71.2266 66.6176 71.5317 68.1189 72.1666 69.4593L73.9741 68.6032ZM72.2266 65.9766H76.5625V63.9766H72.2266V65.9766ZM75.5625 64.9766C75.5625 66.3126 75.8539 67.5298 76.4705 68.5948L78.2014 67.5927C77.7867 66.8765 77.5625 66.0156 77.5625 64.9766H75.5625ZM76.4771 68.606C77.109 69.6654 78.0015 70.4873 79.1273 71.0683L80.0446 69.2911C79.2328 68.8721 78.6254 68.3034 78.1948 67.5815L76.4771 68.606ZM79.1444 71.0769C80.2921 71.6417 81.6053 71.9062 83.0547 71.9062V69.9062C81.8479 69.9062 80.8485 69.6865 80.0274 69.2824L79.1444 71.0769ZM83.0547 71.9062C84.4941 71.9062 85.7886 71.6609 86.9059 71.1297L86.0472 69.3234C85.2583 69.6985 84.2716 69.9062 83.0547 69.9062V71.9062ZM86.9121 71.1267C88.0664 70.5682 88.9631 69.7195 89.5793 68.5991L87.8269 67.6353C87.4119 68.3899 86.8242 68.9474 86.041 69.3264L86.9121 71.1267ZM89.5731 68.6102C90.2126 67.4818 90.5 66.1193 90.5 64.5781H88.5C88.5 65.8807 88.2562 66.8776 87.8331 67.6242L89.5731 68.6102ZM90.5 64.5781C90.5 63.0214 90.1749 61.6507 89.4458 60.5379L87.7729 61.634C88.2313 62.3336 88.5 63.2911 88.5 64.5781H90.5ZM89.4501 60.5445C88.7354 59.4348 87.721 58.627 86.4495 58.1184L85.7067 59.9754C86.6228 60.3418 87.2959 60.8934 87.7687 61.6274L89.4501 60.5445ZM86.4656 58.125C85.2377 57.6089 83.8268 57.3672 82.2578 57.3672V59.3672C83.6264 59.3672 84.7623 59.5786 85.6907 59.9688L86.4656 58.125ZM82.2578 57.3672H79.1641V59.3672H82.2578V57.3672Z" fill="white"/>
<path d="M41.8359 54.8047H38.7422C37.2266 54.8047 35.9766 54.5547 34.9922 54.0547C33.9922 53.5391 33.25 52.8438 32.7656 51.9688C32.2656 51.0781 32.0156 50.0781 32.0156 48.9688C32.0156 47.6562 32.2344 46.5547 32.6719 45.6641C33.1094 44.7734 33.7656 44.1016 34.6406 43.6484C35.5156 43.1953 36.625 42.9688 37.9688 42.9688C39.1875 42.9688 40.2656 43.2109 41.2031 43.6953C42.125 44.1641 42.8516 44.8359 43.3828 45.7109C43.8984 46.5859 44.1562 47.6172 44.1562 48.8047H48.4922C48.4922 47.0703 48.0547 45.4922 47.1797 44.0703C46.3047 42.6484 45.0781 41.5156 43.5 40.6719C41.9062 39.8281 40.0625 39.4062 37.9688 39.4062C35.9062 39.4062 34.1016 39.7734 32.5547 40.5078C31.0078 41.2266 29.8047 42.3047 28.9453 43.7422C28.0859 45.1641 27.6562 46.9375 27.6562 49.0625C27.6562 49.9219 27.8594 50.8438 28.2656 51.8281C28.6562 52.7969 29.2734 53.7031 30.1172 54.5469C30.9453 55.3906 32.0234 56.0859 33.3516 56.6328C34.6797 57.1641 36.2734 57.4297 38.1328 57.4297H41.8359V54.8047ZM41.8359 58.3672V55.7656H38.1328C35.9609 55.7656 34.1641 56.0234 32.7422 56.5391C31.3203 57.0547 30.2031 57.7422 29.3906 58.6016C28.5625 59.4609 27.9844 60.4062 27.6562 61.4375C27.3125 62.4531 27.1406 63.4688 27.1406 64.4844C27.1406 66.0781 27.4141 67.4922 27.9609 68.7266C28.4922 69.9609 29.25 71.0078 30.2344 71.8672C31.2031 72.7266 32.3438 73.375 33.6562 73.8125C34.9688 74.25 36.3984 74.4688 37.9453 74.4688C39.4297 74.4688 40.8281 74.2578 42.1406 73.8359C43.4375 73.4141 44.5859 72.8047 45.5859 72.0078C46.5859 71.1953 47.3672 70.2031 47.9297 69.0312C48.4922 67.8438 48.7734 66.4922 48.7734 64.9766H44.4375C44.4375 66.1641 44.1797 67.2031 43.6641 68.0938C43.1328 68.9844 42.3828 69.6797 41.4141 70.1797C40.4297 70.6641 39.2734 70.9062 37.9453 70.9062C36.6172 70.9062 35.4766 70.6797 34.5234 70.2266C33.5547 69.7578 32.8125 69.0547 32.2969 68.1172C31.7656 67.1797 31.5 66 31.5 64.5781C31.5 63.1562 31.7969 61.9922 32.3906 61.0859C32.9844 60.1641 33.8281 59.4844 34.9219 59.0469C36 58.5938 37.2734 58.3672 38.7422 58.3672H41.8359Z" fill="#17B580"/>
<path d="M41.8359 54.8047V53.8047H42.8359V54.8047H41.8359ZM34.9922 54.0547L34.5393 54.9463L34.5339 54.9435L34.9922 54.0547ZM32.7656 51.9688L33.6376 51.4792L33.6405 51.4844L32.7656 51.9688ZM41.2031 43.6953L40.7499 44.5867L40.7441 44.5837L41.2031 43.6953ZM43.3828 45.7109L44.2377 45.1919L44.2444 45.2032L43.3828 45.7109ZM44.1562 48.8047V49.8047H43.1562V48.8047H44.1562ZM48.4922 48.8047H49.4922V49.8047H48.4922V48.8047ZM43.5 40.6719L43.9679 39.7881L43.9715 39.79L43.5 40.6719ZM32.5547 40.5078L32.9836 41.4112L32.9761 41.4147L32.5547 40.5078ZM28.9453 43.7422L29.8036 44.2553L29.8011 44.2594L28.9453 43.7422ZM28.2656 51.8281L29.19 51.4466L29.1931 51.4542L28.2656 51.8281ZM30.1172 54.5469L30.8243 53.8397L30.8309 53.8464L30.1172 54.5469ZM33.3516 56.6328L32.9802 57.5613L32.9708 57.5575L33.3516 56.6328ZM41.8359 57.4297H42.8359V58.4297H41.8359V57.4297ZM41.8359 58.3672H42.8359V59.3672H41.8359V58.3672ZM41.8359 55.7656V54.7656H42.8359V55.7656H41.8359ZM29.3906 58.6016L30.1173 59.2886L30.1107 59.2955L29.3906 58.6016ZM27.6562 61.4375L28.6092 61.7407L28.6064 61.7494L28.6035 61.7581L27.6562 61.4375ZM27.9609 68.7266L28.8753 68.3215L28.8795 68.3312L27.9609 68.7266ZM30.2344 71.8672L30.8921 71.1138L30.898 71.1191L30.2344 71.8672ZM42.1406 73.8359L42.45 74.7869L42.4466 74.788L42.1406 73.8359ZM45.5859 72.0078L46.2166 72.784L46.2091 72.7899L45.5859 72.0078ZM47.9297 69.0312L48.8334 69.4593L48.8312 69.464L47.9297 69.0312ZM48.7734 64.9766V63.9766H49.7734V64.9766H48.7734ZM44.4375 64.9766H43.4375V63.9766H44.4375V64.9766ZM43.6641 68.0938L44.5296 68.5948L44.5229 68.606L43.6641 68.0938ZM41.4141 70.1797L41.8727 71.0683L41.8642 71.0727L41.8556 71.0769L41.4141 70.1797ZM34.5234 70.2266L34.0941 71.1297L34.0879 71.1267L34.5234 70.2266ZM32.2969 68.1172L33.167 67.6241L33.1731 67.6353L32.2969 68.1172ZM32.3906 61.0859L33.2314 61.6274L33.2271 61.634L32.3906 61.0859ZM34.9219 59.0469L35.3093 59.9688L35.3013 59.9721L35.2933 59.9754L34.9219 59.0469ZM41.8359 55.8047H38.7422V53.8047H41.8359V55.8047ZM38.7422 55.8047C37.1248 55.8047 35.7064 55.539 34.5393 54.9463L35.4451 53.1631C36.2468 53.5703 37.3284 53.8047 38.7422 53.8047V55.8047ZM34.5339 54.9435C33.3808 54.3489 32.4826 53.5222 31.8907 52.4531L33.6405 51.4844C34.0174 52.1653 34.6036 52.7292 35.4505 53.1659L34.5339 54.9435ZM31.8936 52.4583C31.3026 51.4054 31.0156 50.2344 31.0156 48.9688H33.0156C33.0156 49.9219 33.2287 50.7508 33.6376 51.4792L31.8936 52.4583ZM31.0156 48.9688C31.0156 47.5506 31.2513 46.2879 31.7743 45.2232L33.5694 46.105C33.2174 46.8215 33.0156 47.7619 33.0156 48.9688H31.0156ZM31.7743 45.2232C32.3054 44.142 33.1144 43.3127 34.1808 42.7604L35.1005 44.5364C34.4169 44.8904 33.9133 45.4049 33.5694 46.105L31.7743 45.2232ZM34.1808 42.7604C35.24 42.2119 36.5203 41.9688 37.9688 41.9688V43.9688C36.7297 43.9688 35.7912 44.1787 35.1005 44.5364L34.1808 42.7604ZM37.9688 41.9688C39.3224 41.9688 40.5622 42.2386 41.6621 42.8069L40.7441 44.5837C39.969 44.1833 39.0526 43.9688 37.9688 43.9688V41.9688ZM41.6564 42.8039C42.7423 43.3561 43.6087 44.1562 44.2376 45.192L42.528 46.2299C42.0944 45.5157 41.5077 44.972 40.7499 44.5867L41.6564 42.8039ZM44.2444 45.2032C44.865 46.2564 45.1562 47.4692 45.1562 48.8047H43.1562C43.1562 47.7652 42.9319 46.9155 42.5213 46.2186L44.2444 45.2032ZM44.1562 47.8047H48.4922V49.8047H44.1562V47.8047ZM47.4922 48.8047C47.4922 47.2478 47.1022 45.8524 46.328 44.5944L48.0313 43.5462C49.0072 45.132 49.4922 46.8928 49.4922 48.8047H47.4922ZM46.328 44.5944C45.5525 43.3342 44.4621 42.3202 43.0285 41.5537L43.9715 39.79C45.6942 40.711 47.0569 41.9627 48.0313 43.5462L46.328 44.5944ZM43.0321 41.5557C41.6041 40.7997 39.9258 40.4062 37.9688 40.4062V38.4062C40.1992 38.4062 42.2084 38.8566 43.9679 39.7881L43.0321 41.5557ZM37.9688 40.4062C36.0247 40.4062 34.3718 40.7521 32.9836 41.4112L32.1258 39.6044C33.8313 38.7948 35.7878 38.4062 37.9688 38.4062V40.4062ZM32.9761 41.4147C31.6074 42.0506 30.5581 42.9933 29.8036 44.2553L28.087 43.2291C29.0513 41.6161 30.4082 40.4025 32.1333 39.6009L32.9761 41.4147ZM29.8011 44.2594C29.059 45.4873 28.6562 47.0697 28.6562 49.0625H26.6562C26.6562 46.8053 27.1129 44.8408 28.0895 43.2249L29.8011 44.2594ZM28.6562 49.0625C28.6562 49.7638 28.8221 50.5552 29.19 51.4466L27.3413 52.2096C26.8966 51.1323 26.6562 50.08 26.6562 49.0625H28.6562ZM29.1931 51.4542C29.5267 52.2817 30.0622 53.0777 30.8243 53.8398L29.4101 55.254C28.4847 54.3286 27.7858 53.3121 27.3382 52.2021L29.1931 51.4542ZM30.8309 53.8464C31.5463 54.5753 32.503 55.2019 33.7323 55.7081L32.9708 57.5575C31.5439 56.9699 30.3443 56.2059 29.4035 55.2473L30.8309 53.8464ZM33.723 55.7043C34.9034 56.1765 36.3644 56.4297 38.1328 56.4297V58.4297C36.1825 58.4297 34.456 58.1516 32.9802 57.5613L33.723 55.7043ZM38.1328 56.4297H41.8359V58.4297H38.1328V56.4297ZM40.8359 57.4297V54.8047H42.8359V57.4297H40.8359ZM40.8359 58.3672V55.7656H42.8359V58.3672H40.8359ZM41.8359 56.7656H38.1328V54.7656H41.8359V56.7656ZM38.1328 56.7656C36.0308 56.7656 34.3593 57.0164 33.0831 57.4792L32.4013 55.599C33.9689 55.0305 35.891 54.7656 38.1328 54.7656V56.7656ZM33.0831 57.4792C31.7681 57.956 30.797 58.5696 30.1173 59.2886L28.664 57.9146C29.6092 56.9148 30.8725 56.1534 32.4013 55.599L33.0831 57.4792ZM30.1107 59.2955C29.3781 60.0557 28.8861 60.8704 28.6092 61.7407L26.7033 61.1343C27.0826 59.9421 27.7469 58.8661 28.6705 57.9077L30.1107 59.2955ZM28.6035 61.7581C28.2927 62.6762 28.1406 63.5837 28.1406 64.4844H26.1406C26.1406 63.3538 26.3323 62.23 26.709 61.1169L28.6035 61.7581ZM28.1406 64.4844C28.1406 65.9635 28.3941 67.2356 28.8752 68.3215L27.0466 69.1316C26.434 67.7488 26.1406 66.1928 26.1406 64.4844H28.1406ZM28.8795 68.3312C29.3534 69.4323 30.0235 70.3557 30.892 71.1139L29.5767 72.6205C28.4765 71.66 27.631 70.4896 27.0424 69.1219L28.8795 68.3312ZM30.898 71.1191C31.7589 71.8828 32.7793 72.4661 33.9725 72.8638L33.34 74.7612C31.9082 74.2839 30.6473 73.5703 29.5708 72.6153L30.898 71.1191ZM33.9725 72.8638C35.1717 73.2636 36.4934 73.4688 37.9453 73.4688V75.4688C36.3035 75.4688 34.7658 75.2364 33.34 74.7612L33.9725 72.8638ZM37.9453 73.4688C39.3338 73.4688 40.6283 73.2716 41.8346 72.8839L42.4466 74.788C41.0279 75.244 39.5256 75.4688 37.9453 75.4688V73.4688ZM41.8313 72.885C43.0219 72.4977 44.0625 71.9431 44.9627 71.2258L46.2091 72.7899C45.1094 73.6662 43.8531 74.3304 42.45 74.7869L41.8313 72.885ZM44.9553 71.2317C45.8398 70.5131 46.5289 69.6386 47.0282 68.5985L48.8312 69.464C48.2054 70.7677 47.3321 71.8775 46.2165 72.7839L44.9553 71.2317ZM47.0259 68.6032C47.516 67.5686 47.7734 66.3668 47.7734 64.9766H49.7734C49.7734 66.6176 49.4683 68.1189 48.8334 69.4593L47.0259 68.6032ZM48.7734 65.9766H44.4375V63.9766H48.7734V65.9766ZM45.4375 64.9766C45.4375 66.3126 45.1461 67.5298 44.5295 68.5948L42.7986 67.5927C43.2133 66.8765 43.4375 66.0156 43.4375 64.9766H45.4375ZM44.5229 68.606C43.891 69.6654 42.9985 70.4873 41.8727 71.0683L40.9554 69.2911C41.7672 68.8721 42.3746 68.3034 42.8052 67.5815L44.5229 68.606ZM41.8556 71.0769C40.7079 71.6417 39.3947 71.9062 37.9453 71.9062V69.9062C39.1521 69.9062 40.1515 69.6865 40.9726 69.2824L41.8556 71.0769ZM37.9453 71.9062C36.5059 71.9062 35.2114 71.6609 34.0941 71.1297L34.9528 69.3234C35.7417 69.6985 36.7284 69.9062 37.9453 69.9062V71.9062ZM34.0879 71.1267C32.9336 70.5682 32.0369 69.7195 31.4207 68.5991L33.1731 67.6353C33.5881 68.3899 34.1758 68.9474 34.959 69.3264L34.0879 71.1267ZM31.4269 68.6102C30.7874 67.4818 30.5 66.1193 30.5 64.5781H32.5C32.5 65.8807 32.7438 66.8776 33.1669 67.6242L31.4269 68.6102ZM30.5 64.5781C30.5 63.0214 30.8251 61.6507 31.5542 60.5379L33.2271 61.634C32.7687 62.3336 32.5 63.2911 32.5 64.5781H30.5ZM31.5499 60.5445C32.2646 59.4348 33.279 58.627 34.5505 58.1184L35.2933 59.9754C34.3772 60.3418 33.7041 60.8934 33.2313 61.6274L31.5499 60.5445ZM34.5344 58.125C35.7623 57.6089 37.1732 57.3672 38.7422 57.3672V59.3672C37.3736 59.3672 36.2377 59.5786 35.3093 59.9688L34.5344 58.125ZM38.7422 57.3672H41.8359V59.3672H38.7422V57.3672Z" fill="white"/>
<path d="M62.5947 61.6904L62.5947 58.21C62.5947 56.5049 62.876 55.0986 63.4385 53.9912C64.0186 52.8662 64.8008 52.0312 65.7852 51.4863C66.7871 50.9238 67.9121 50.6426 69.1602 50.6426C70.6367 50.6426 71.876 50.8887 72.8779 51.3809C73.8799 51.873 74.6357 52.6113 75.1455 53.5957C75.6553 54.5801 75.9102 55.8281 75.9102 57.3398C75.9102 58.7109 75.6377 59.9238 75.0928 60.9785C74.5654 62.0156 73.8096 62.833 72.8252 63.4307C71.8408 64.0107 70.6807 64.3008 69.3447 64.3008L69.3447 69.1787C71.2959 69.1787 73.0713 68.6865 74.6709 67.7021C76.2705 66.7178 77.5449 65.3379 78.4941 63.5625C79.4434 61.7695 79.918 59.6953 79.918 57.3398C79.918 55.0195 79.5049 52.9893 78.6787 51.249C77.8701 49.5088 76.6572 48.1553 75.04 47.1885C73.4404 46.2217 71.4453 45.7383 69.0547 45.7383C68.0879 45.7383 67.0508 45.9668 65.9434 46.4238C64.8535 46.8633 63.834 47.5576 62.8848 48.5068C61.9355 49.4385 61.1533 50.6514 60.5381 52.1455C59.9404 53.6396 59.6416 55.4326 59.6416 57.5244L59.6416 61.6904L62.5947 61.6904ZM58.5869 61.6904L61.5137 61.6904L61.5137 57.5244C61.5137 55.0811 61.2236 53.0596 60.6436 51.46C60.0635 49.8604 59.29 48.6035 58.3232 47.6895C57.3564 46.7578 56.293 46.1074 55.1328 45.7383C53.9902 45.3516 52.8477 45.1582 51.7051 45.1582C49.9121 45.1582 48.3213 45.4658 46.9326 46.0811C45.5439 46.6787 44.3662 47.5312 43.3994 48.6387C42.4326 49.7285 41.7031 51.0117 41.2109 52.4883C40.7188 53.9648 40.4727 55.5732 40.4727 57.3135C40.4727 58.9834 40.71 60.5566 41.1846 62.0332C41.6592 63.4922 42.3447 64.7842 43.2412 65.9092C44.1553 67.0342 45.2715 67.9131 46.5898 68.5459C47.9258 69.1787 49.4463 69.4951 51.1514 69.4951L51.1514 64.6172C49.8154 64.6172 48.6465 64.3271 47.6445 63.7471C46.6426 63.1494 45.8604 62.3057 45.2979 61.2158C44.7529 60.1084 44.4805 58.8076 44.4805 57.3135C44.4805 55.8193 44.7354 54.5361 45.2451 53.4639C45.7725 52.374 46.5635 51.5391 47.6182 50.959C48.6729 50.3613 50 50.0625 51.5996 50.0625C53.1992 50.0625 54.5088 50.3965 55.5283 51.0645C56.5654 51.7324 57.3301 52.6816 57.8223 53.9121C58.332 55.125 58.5869 56.5576 58.5869 58.21L58.5869 61.6904Z" fill="#17B580"/>
<path d="M62.5947 61.6904L63.5947 61.6904L63.5947 62.6904L62.5947 62.6904L62.5947 61.6904ZM63.4385 53.9912L62.5469 53.5383L62.5497 53.5329L63.4385 53.9912ZM65.7852 51.4863L66.2747 52.3583L66.2695 52.3612L65.7852 51.4863ZM75.0928 60.9785L74.2014 60.5253L74.2043 60.5195L75.0928 60.9785ZM72.8252 63.4307L73.3442 64.2855L73.3329 64.2922L72.8252 63.4307ZM69.3447 64.3008L68.3447 64.3008L68.3447 63.3008L69.3447 63.3008L69.3447 64.3008ZM69.3447 69.1787L69.3447 70.1787L68.3447 70.1787L68.3447 69.1787L69.3447 69.1787ZM78.4941 63.5625L79.3779 64.0304L79.376 64.034L78.4941 63.5625ZM78.6787 51.249L77.7753 51.6779L77.7718 51.6704L78.6787 51.249ZM75.04 47.1885L74.5269 48.0468L74.5228 48.0443L75.04 47.1885ZM65.9434 46.4238L66.3249 47.3482L66.3173 47.3513L65.9434 46.4238ZM62.8848 48.5068L63.5919 49.214L63.5852 49.2205L62.8848 48.5068ZM60.5381 52.1455L59.6096 51.7741L59.6134 51.7648L60.5381 52.1455ZM59.6416 61.6904L59.6416 62.6904L58.6416 62.6904L58.6416 61.6904L59.6416 61.6904ZM58.5869 61.6904L58.5869 62.6904L57.5869 62.6904L57.5869 61.6904L58.5869 61.6904ZM61.5137 61.6904L62.5137 61.6904L62.5137 62.6904L61.5137 62.6904L61.5137 61.6904ZM58.3232 47.6895L57.6362 48.4161L57.6293 48.4095L58.3232 47.6895ZM55.1328 45.7383L54.8296 46.6912L54.8209 46.6884L54.8122 46.6855L55.1328 45.7383ZM46.9326 46.0811L47.3377 46.9954L47.3279 46.9996L46.9326 46.0811ZM43.3994 48.6387L44.1528 49.2963L44.1475 49.3023L43.3994 48.6387ZM41.1846 62.0332L40.2336 62.3425L40.2325 62.3392L41.1846 62.0332ZM43.2412 65.9092L42.4651 66.5398L42.4592 66.5324L43.2412 65.9092ZM46.5898 68.5459L46.1618 69.4496L46.1571 69.4474L46.5898 68.5459ZM51.1514 69.4951L52.1514 69.4951L52.1514 70.4951L51.1514 70.4951L51.1514 69.4951ZM51.1514 64.6172L51.1514 63.6172L52.1514 63.6172L52.1514 64.6172L51.1514 64.6172ZM47.6445 63.7471L47.1435 64.6126L47.1323 64.6059L47.6445 63.7471ZM45.2979 61.2158L44.4092 61.6745L44.4048 61.6659L44.4006 61.6573L45.2979 61.2158ZM45.2451 53.4639L44.342 53.0345L44.345 53.0283L45.2451 53.4639ZM47.6182 50.959L48.1112 51.8291L48.1001 51.8352L47.6182 50.959ZM55.5283 51.0645L54.9868 51.9052L54.9803 51.9009L55.5283 51.0645ZM57.8223 53.9121L56.9004 54.2996L56.897 54.2916L56.8938 54.2835L57.8223 53.9121ZM61.5947 61.6904L61.5947 58.21L63.5947 58.21L63.5947 61.6904L61.5947 61.6904ZM61.5947 58.21C61.5947 56.4031 61.8916 54.8284 62.5469 53.5383L64.3301 54.4441C63.8603 55.3688 63.5947 56.6067 63.5947 58.21L61.5947 58.21ZM62.5497 53.5329C63.2087 52.2548 64.1223 51.2638 65.3008 50.6114L66.2695 52.3612C65.4793 52.7987 64.8284 53.4776 64.3273 54.4495L62.5497 53.5329ZM65.2956 50.6143C66.4598 49.9608 67.7558 49.6426 69.1602 49.6426L69.1602 51.6426C68.0684 51.6426 67.1144 51.8869 66.2747 52.3583L65.2956 50.6143ZM69.1602 49.6426C70.7423 49.6426 72.1428 49.9056 73.3188 50.4833L72.437 52.2784C71.6092 51.8717 70.5311 51.6426 69.1602 51.6426L69.1602 49.6426ZM73.3188 50.4833C74.5113 51.0691 75.4246 51.9601 76.0335 53.1358L74.2575 54.0556C73.8469 53.2626 73.2484 52.677 72.437 52.2784L73.3188 50.4833ZM76.0335 53.1358C76.6387 54.3045 76.9102 55.7234 76.9102 57.3398L74.9102 57.3398C74.9102 55.9328 74.6719 54.8557 74.2575 54.0556L76.0335 53.1358ZM76.9102 57.3398C76.9102 58.8458 76.61 60.2204 75.9812 61.4375L74.2043 60.5195C74.6653 59.6272 74.9102 58.5761 74.9102 57.3398L76.9102 57.3398ZM75.9842 61.4318C75.3734 62.633 74.4894 63.5902 73.3442 64.2855L72.3062 62.5759C73.1298 62.0759 73.7575 61.3983 74.2014 60.5253L75.9842 61.4318ZM73.3329 64.2922C72.1703 64.9773 70.8287 65.3008 69.3447 65.3008L69.3447 63.3008C70.5327 63.3008 71.5113 63.0442 72.3175 62.5691L73.3329 64.2922ZM70.3447 64.3008L70.3447 69.1787L68.3447 69.1787L68.3447 64.3008L70.3447 64.3008ZM69.3447 68.1787C71.1184 68.1787 72.7111 67.734 74.1468 66.8505L75.195 68.5538C73.4315 69.639 71.4734 70.1787 69.3447 70.1787L69.3447 68.1787ZM74.1468 66.8505C75.5848 65.9656 76.7403 64.7219 77.6123 63.091L79.376 64.034C78.3495 65.9539 76.9563 67.47 75.195 68.5538L74.1468 66.8505ZM77.6104 63.0946C78.4718 61.4674 78.918 59.5586 78.918 57.3398L80.918 57.3398C80.918 59.832 80.4149 62.0716 79.3779 64.0304L77.6104 63.0946ZM78.918 57.3398C78.918 55.138 78.5262 53.2595 77.7753 51.6779L79.5821 50.8202C80.4836 52.719 80.918 54.9011 80.918 57.3398L78.918 57.3398ZM77.7718 51.6704C77.0461 50.1084 75.9687 48.9087 74.5269 48.0468L75.5532 46.3302C77.3458 47.4018 78.6942 48.9092 79.5856 50.8276L77.7718 51.6704ZM74.5228 48.0443C73.1172 47.1947 71.3131 46.7383 69.0547 46.7383L69.0547 44.7383C71.5776 44.7383 73.7637 45.2486 75.5573 46.3326L74.5228 48.0443ZM69.0547 46.7383C68.246 46.7383 67.3393 46.9295 66.3248 47.3482L65.5619 45.4995C66.7623 45.0041 67.9298 44.7383 69.0547 44.7383L69.0547 46.7383ZM66.3173 47.3513C65.3687 47.7338 64.4595 48.3464 63.5919 49.2139L62.1777 47.7997C63.2085 46.7689 64.3383 45.9928 65.5694 45.4964L66.3173 47.3513ZM63.5852 49.2205C62.7509 50.0394 62.0373 51.1309 61.4628 52.5263L59.6134 51.7648C60.2693 50.1718 61.1202 48.8375 62.1843 47.7932L63.5852 49.2205ZM61.4666 52.5169C60.928 53.8633 60.6416 55.5235 60.6416 57.5244L58.6416 57.5244C58.6416 55.3417 58.9529 53.416 59.6096 51.7741L61.4666 52.5169ZM60.6416 57.5244L60.6416 61.6904L58.6416 61.6904L58.6416 57.5244L60.6416 57.5244ZM59.6416 60.6904L62.5947 60.6904L62.5947 62.6904L59.6416 62.6904L59.6416 60.6904ZM58.5869 60.6904L61.5137 60.6904L61.5137 62.6904L58.5869 62.6904L58.5869 60.6904ZM60.5137 61.6904L60.5137 57.5244L62.5137 57.5244L62.5137 61.6904L60.5137 61.6904ZM60.5137 57.5244C60.5137 55.151 60.2307 53.2548 59.7035 51.8009L61.5836 51.119C62.2166 52.8644 62.5137 55.0112 62.5137 57.5244L60.5137 57.5244ZM59.7035 51.8009C59.1621 50.3082 58.4626 49.1974 57.6362 48.4161L59.0103 46.9628C60.1174 48.0096 60.9648 49.4125 61.5836 51.119L59.7035 51.8009ZM57.6293 48.4095C56.7616 47.5734 55.8289 47.0091 54.8296 46.6912L55.436 44.7854C56.7571 45.2057 57.9513 45.9423 59.0171 46.9694L57.6293 48.4095ZM54.8122 46.6855C53.7671 46.3318 52.7327 46.1582 51.7051 46.1582L51.7051 44.1582C52.9626 44.1582 54.2133 44.3714 55.4534 44.7911L54.8122 46.6855ZM51.7051 46.1582C50.0268 46.1582 48.5779 46.4459 47.3377 46.9953L46.5276 45.1668C48.0647 44.4857 49.7974 44.1582 51.7051 44.1582L51.7051 46.1582ZM47.3279 46.9996C46.0726 47.5399 45.0184 48.3048 44.1527 49.2963L42.6461 47.981C43.7141 46.7577 45.0153 45.8175 46.5373 45.1625L47.3279 46.9996ZM44.1475 49.3023C43.2763 50.2843 42.612 51.4472 42.1596 52.8045L40.2623 52.1721C40.7942 50.5762 41.5889 49.1727 42.6513 47.9751L44.1475 49.3023ZM42.1596 52.8045C41.7052 54.1678 41.4727 55.6682 41.4727 57.3135L39.4727 57.3135C39.4727 55.4783 39.7323 53.7619 40.2623 52.1721L42.1596 52.8045ZM41.4727 57.3135C41.4727 58.8875 41.6961 60.3568 42.1366 61.7272L40.2325 62.3392C39.7238 60.7565 39.4727 59.0793 39.4727 57.3135L41.4727 57.3135ZM42.1355 61.7239C42.5756 63.0766 43.2063 64.2607 44.0233 65.286L42.4592 66.5324C41.4832 65.3076 40.7428 63.9078 40.2336 62.3425L42.1355 61.7239ZM44.0173 65.2786C44.8375 66.288 45.836 67.0748 47.0226 67.6444L46.1571 69.4474C44.7069 68.7513 43.4731 67.7804 42.4651 66.5398L44.0173 65.2786ZM47.0179 67.6422C48.201 68.2025 49.5717 68.4951 51.1514 68.4951L51.1514 70.4951C49.3209 70.4951 47.6506 70.1549 46.1618 69.4496L47.0179 67.6422ZM50.1514 69.4951L50.1514 64.6172L52.1514 64.6172L52.1514 69.4951L50.1514 69.4951ZM51.1514 65.6172C49.6669 65.6172 48.3198 65.2935 47.1435 64.6125L48.1456 62.8816C48.9731 63.3608 49.9639 63.6172 51.1514 63.6172L51.1514 65.6172ZM47.1323 64.6059C45.9616 63.9076 45.0528 62.9213 44.4092 61.6745L46.1865 60.7572C46.6679 61.69 47.3236 62.3912 48.1568 62.8882L47.1323 64.6059ZM44.4006 61.6573C43.7753 60.3866 43.4805 58.9289 43.4805 57.3135L45.4805 57.3135C45.4805 58.6863 45.7305 59.8302 46.1951 60.7743L44.4006 61.6573ZM43.4805 57.3135C43.4805 55.7081 43.7542 54.271 44.342 53.0345L46.1483 53.8932C45.7165 54.8013 45.4805 55.9306 45.4805 57.3135L43.4805 57.3135ZM44.345 53.0283C44.9621 51.7529 45.8987 50.7634 47.1362 50.0828L48.1001 51.8352C47.2283 52.3147 46.5828 52.9951 46.1453 53.8994L44.345 53.0283ZM47.1252 50.089C48.3707 49.3831 49.8807 49.0625 51.5996 49.0625L51.5996 51.0625C50.1193 51.0625 48.975 51.3395 48.1112 51.829L47.1252 50.089ZM51.5996 49.0625C53.3341 49.0625 54.8502 49.4247 56.0763 50.228L54.9803 51.9009C54.1673 51.3683 53.0644 51.0625 51.5996 51.0625L51.5996 49.0625ZM56.0698 50.2237C57.2947 51.0127 58.1875 52.1325 58.7507 53.5407L56.8938 54.2835C56.4727 53.2307 55.8361 52.4522 54.9868 51.9052L56.0698 50.2237ZM58.7442 53.5247C59.3168 54.8873 59.5869 56.4574 59.5869 58.21L57.5869 58.21C57.5869 56.6578 57.3472 55.3627 56.9004 54.2996L58.7442 53.5247ZM59.5869 58.21L59.5869 61.6904L57.5869 61.6904L57.5869 58.21L59.5869 58.21Z" fill="white"/>
</svg>

'''
'''--- client-web/src/near/config.js ---
// This file was copy pasted from near-example's repository
// https://github.com/near-examples/counter/blob/master/src/config.js

const CONTRACT_NAME = process.env.CONTRACT_NAME || 'dev-1642161678245-56022227209898';

function getConfig(env) {
  switch(env) {
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case 'production':
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

export default getConfig;
'''
'''--- client-web/src/near_logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 288 288"><defs><style>.cls-1{fill:#fff;}</style></defs><g id="Layer_1" data-name="Layer 1"><path class="cls-1" d="M187.58,79.81l-30.1,44.69a3.2,3.2,0,0,0,4.75,4.2L191.86,103a1.2,1.2,0,0,1,2,.91v80.46a1.2,1.2,0,0,1-2.12.77L102.18,77.93A15.35,15.35,0,0,0,90.47,72.5H87.34A15.34,15.34,0,0,0,72,87.84V201.16A15.34,15.34,0,0,0,87.34,216.5h0a15.35,15.35,0,0,0,13.08-7.31l30.1-44.69a3.2,3.2,0,0,0-4.75-4.2L96.14,186a1.2,1.2,0,0,1-2-.91V104.61a1.2,1.2,0,0,1,2.12-.77l89.55,107.23a15.35,15.35,0,0,0,11.71,5.43h3.13A15.34,15.34,0,0,0,216,201.16V87.84A15.34,15.34,0,0,0,200.66,72.5h0A15.35,15.35,0,0,0,187.58,79.81Z"/></g></svg>
'''
'''--- client-web/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- client-web/tailwind.config.js ---
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
      
    }
  },
  plugins: [],
}
'''
'''--- contracts/Cargo.toml ---
[package]
name = "link3"
version = "0.1.0"
authors = ["Joaquim Ley <joaquimley@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib"]

[dependencies]
#near-sdk = "4.0.0-pre.5"
near-sdk = "3.1.0"
serde = { version = "1.0", features = ["derive"] }

[profile.release]
codegen-units = 1
opt-level = "s"
lto = true
debug = false
panic = "abort"
overflow-checks = true

'''
'''--- contracts/build.sh ---
#!/bin/bash
set -e

IS_COMPILE=false
IS_RESET_PROFILE=false
IS_DEPLOY=false

for var in "$@"
do
  case $var in
    -h|--help)
     echo "Utility script to help you compile, reset profile and deploy contracts on the NEAR blockchain"
     echo "Available options:"
     echo "| "
     echo "| --help | -h: Show this help message."
     echo "| "
     echo "| --compile | -c: Compile the contracts for release with: RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release"
     echo "| "
     echo "| --reset | -r: Resets the dev account id by deleting the .neardev folder, you must deploy to generate a new profile/account."
     echo "| "
     echo "| --deploy | -d: Deploys the contracts to the NEAR network with: near dev-deploy --wasmFile ./out/main.wasm"
     echo "| "
     echo " "
     echo "For more information please check the docs: https://docs.near.org/docs/develop/basics/getting-started"
     echo " "
     echo "Author:"
     echo "| Joaquim Ley <joaquimley@gmail.com> joaquimley.near | Jan 2022"
     echo "| Based on 'NEAR examples' build script available on GitHub: https://github.com/near-examples/NFT/blob/master/build.sh"
     echo " "
     echo "Issues: "
     ;;
     
    -d|--deploy)
      IS_DEPLOY=true
      ;;
    -r|--reset) 
      IS_RESET_PROFILE=true
      ;;
    -c|--compile)
      IS_COMPILE=true
      ;;
  esac
done

if $IS_COMPILE ; then
    echo "Compiling for release... 🤖"
    RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
    mkdir -p ./out
    cp target/wasm32-unknown-unknown/release/*.wasm ./out/main.wasm
    echo "---------------------------------------------------------"
    echo "Compile success! ⭐ Artifact exported to: ./out/main.wasm"
fi

if $IS_RESET_PROFILE; then
    echo "Reseting the neardev profile"
    rm -rf ./neardev
    echo "---------------------------------------------------------"
    echo ".neardev folder deleted 🗑, compile to generate a new dev-account"
fi

if $IS_DEPLOY; then
    echo "Deploying contract... ⛓️"
    near dev-deploy --wasmFile ./out/main.wasm
    echo "---------------------------------------------------------"
    echo "Contract deployed with success ✅" 

    echo "---------------------------------------------------------"
    echo "Load the new contract account id with:"
    echo "> source ./neardev/dev-account.env"
fi
'''
'''--- contracts/src/item.rs ---
// To conserve gas, efficient serialization is achieved through Borsh (http://borsh.io/)
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{env, log, PanicOnDefault};
use serde::Serialize;

// #[near_bindgen]
#[derive(BorshSerialize, BorshDeserialize, Clone, PanicOnDefault, Serialize)]
pub struct Item {
    id: u64,
    uri: String,
    title: String,
    description: String,
    image_uri: Option<String>,
    is_published: bool,
}

// Core Logic/Implementation
// #[near_bindgen]
impl Item {
    // Instantiate a new Item
    pub fn new(
        id: u64,
        uri: String,
        title: String,
        description: String,
        image_uri: Option<String>,
        is_published: bool,
    ) -> Self {
        log!("Creating new item with title {},", &title);

        Item {
            id,
            uri,
            title,
            description,
            image_uri,
            is_published,
        }
    }

    /****************
     * VIEW METHODS *
     ****************/
    pub fn id(&self) -> u64 {
        self.id
    }

    pub fn is_published(&self) -> bool {
        self.is_published
    }

    pub fn read(&self) -> ItemInfo {
        if !self.is_published {
            env::panic(b"Can't read an item that is not public.");
        }

        // Not verifing access for v1, if it is public it has access
        // Changing here so there is no need to change the ItemInfo's implementation
        // let has_access = !self.is_premium || Item::has_access(self);

        let has_access = true;
        ItemInfo::map(self, has_access)
    }

    /****************
     * CALL METHODS *
     ****************/
    pub fn set_published(&mut self, is_published: bool) {
        if env::current_account_id() != env::predecessor_account_id() {
            env::panic(b"Only the owner can change the is_published state");
        }

        self.is_published = is_published;
    }

    /************
     * INTERNAL *
     ************/
}

// Helper Strut to return only the allowed info of Items (hide some when there's no access)
// Redudant for v1.
#[derive(BorshSerialize, BorshDeserialize, PanicOnDefault, Serialize)]
pub struct ItemInfo {
    pub id: u64,
    pub uri: Option<String>,
    pub title: String,
    pub description: String,
    pub image: Option<String>,
}

impl ItemInfo {
    pub fn map(from: &Item, has_access: bool) -> Self {
        ItemInfo {
            id: from.id,
            uri: if has_access {
                Some(from.uri.clone())
            } else {
                None
            },
            title: from.title.clone(),
            description: from.description.clone(),
            image: if has_access {
                from.image_uri.clone()
            } else {
                None // from.image_preview_uri.clone()
            },
        }
    }
}

/*********
 * TESTS *
 *********/
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice.testnet".to_string(),
            signer_account_id: "robert.testnet".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "jane.testnet".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    fn generate_item(id: u64, is_published: bool) -> Item {
        Item::new(
            id,
            "https://google.com".to_string(),
            "A random title".to_string(),
            "The item description".to_string(),
            Some("https://s3.envato.com/files/244088191/Google%20Logo.1.jpg".to_string()),
            is_published,
        )
    }

    #[test]
    #[should_panic]
    fn create_with_default_panics() {
        // Given
        let context = get_context(vec![], false);
        testing_env!(context);
        // When
        Item::default();
        // Then
        // - Should panic
    }

    #[test]
    fn init_creates_with_correct_state() {
        // Given
        let context = get_context(vec![], false);
        testing_env!(context);
        // When
        let contract = Item::new(
            123,
            "https://google.com".to_string(),
            "A random title".to_string(),
            "The item description".to_string(),
            Some("https://s3.envato.com/files/244088191/Google%20Logo.1.jpg".to_string()),
            true,
        );
        // Then
        assert_eq!(123, contract.id);
        assert_eq!("https://google.com".to_string(), contract.uri);
        assert_eq!("A random title".to_string(), contract.title);
        assert_eq!("The item description".to_string(), contract.description);
        assert_eq!(
            Some("https://s3.envato.com/files/244088191/Google%20Logo.1.jpg".to_string()),
            contract.image_uri
        );
        assert_eq!(true, contract.is_published);
    }

    #[test]
    fn is_published_returns_correct_state() {
        // Given
        let context = get_context(vec![], false);
        testing_env!(context);
        let item = generate_item(123, true);
        // When
        let result = item.is_published();
        // Then
        assert_eq!(result, true);
    }

    #[test]
    fn item_info_maps_correctly() {
        // Given
        let context = get_context(vec![], false);
        testing_env!(context);
        let item = generate_item(123, true);
        // When
        let item_info = ItemInfo::map(&item, true);
        // Then
        assert_eq!(item_info.id, item.id);
        assert_eq!(item_info.uri, Some(item.uri));
        assert_eq!(item_info.title, item.title);
        assert_eq!(item_info.description, item.description);
        assert_eq!(item_info.image, item.image_uri);
    }

    // Missing test item_info maps correctly when has_access is false
}

'''
'''--- contracts/src/lib.rs ---
// To conserve gas, efficient serialization is achieved through Borsh (http://borsh.io/)
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::LookupMap;
use near_sdk::{env, near_bindgen, AccountId};
// Crates
use crate::link3::Link3;
mod item;
mod link3;

near_sdk::setup_alloc!();

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct MainHub {
    hub: LookupMap<AccountId, Link3>,
}

impl Default for MainHub {
    fn default() -> Self {
        Self {
            hub: LookupMap::new(b"a".to_vec()),
        }
    }
}

#[near_bindgen]
impl MainHub {
    /****************
     * VIEW METHODS *
     ****************/
    pub fn get(&self, account_id: AccountId) -> Option<Link3> {
        self.hub.get(&account_id)
    }

    /****************
     * CALL METHODS *
     ****************/
    pub fn create(
        &mut self,
        title: String,
        description: String,
        image_uri: Option<String>,
        is_published: Option<bool>,
    ) -> Link3 {
        if Self::get(&self, env::signer_account_id()).is_some() {
            env::panic(b"Can't create, account has Link3 already")
        }

        let link3 = Link3::new(title, description, image_uri, is_published);
        self.hub.insert(&env::signer_account_id(), &link3);
        
        return link3;
    }

    pub fn add_link(
        &mut self,
        uri: String,
        title: String,
        description: String,
        image_uri: Option<String>,
        is_published: Option<bool>,
    ) {
        let mut link3: Link3 = Self::get(&self, env::signer_account_id())
            .unwrap_or_else(|| env::panic(b"Could not find link3 for this account."));

        // Add item
        link3.create_link(
            uri,
            title,
            description,
            image_uri,
            is_published.unwrap_or(true),
        );

        // Save to hub state
        self.hub.insert(&env::signer_account_id(), &link3);
    }
}

/*********
 * TESTS *
 *********/
// use the attribute below for unit tests
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::{testing_env, VMContext};
    use near_sdk::{Balance, MockedBlockchain};

    fn get_context(input: Vec<u8>, is_view: bool, deposit: Option<Balance>) -> VMContext {
        VMContext {
            current_account_id: "contract.testnet".to_string(),
            signer_account_id: "alice.testnet".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "alice.testnet".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: deposit.unwrap_or(0),
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    fn get_alternative_context(
      input: Vec<u8>,
      is_view: bool,
      deposit: Option<Balance>,
  ) -> VMContext {
      VMContext {
          current_account_id: "contract.testnet".to_string(),
          signer_account_id: "robert.testnet".to_string(),
          signer_account_pk: vec![0, 1, 2],
          predecessor_account_id: "robert.testnet".to_string(),
          input,
          block_index: 0,
          block_timestamp: 0,
          account_balance: 0,
          account_locked_balance: 0,
          storage_usage: 0,
          attached_deposit: deposit.unwrap_or(0),
          prepaid_gas: 10u64.pow(18),
          random_seed: vec![0, 1, 2],
          is_view,
          output_data_receivers: vec![],
          epoch_height: 19,
      }
  }

    // mark individual unit tests with #[test] for them to be registered and fired
    #[test]
    fn create_link3_creates_with_correct_state() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);
        // When
        let mut main = MainHub::default();
        main.create("Hello".to_string(), "World".to_string(), None, Some(true));
        // Then
        let link3 = main.get("alice.testnet".to_string());
        assert!(&link3.is_some());
    }
 #[test]
    fn create_link3_multiple_adds_to_hub() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);
        // When
        let mut main = MainHub::default();
        main.create("Hello".to_string(), "World".to_string(), None, Some(true));
        
        let context_alternative = get_alternative_context(vec![], false, Some(1));
        testing_env!(context_alternative);
        main.create("Hello2".to_string(), "World2".to_string(), None, Some(true));

        // Then
        let link3 = main.get("robert.testnet".to_string());
        assert!(&link3.is_some());
    }

    // mark individual unit tests with #[test] for them to be registered and fired
    #[test]
    fn add_link_saves_link_to_state() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);

        let mut main = MainHub::default();
        main.create("Hello".to_string(), "World".to_string(), None, Some(true));
        // When
        main.add_link(
            "uri".to_string(),
            "title".to_string(),
            "description".to_string(),
            Some("image_uri".to_string()),
            Some(true),
        );
        // Then
        let link3 = main.get("alice.testnet".to_string());
        assert!(link3.unwrap().list().len() > 0);
    }
}

'''
'''--- contracts/src/link3.rs ---
use std::convert::TryFrom;
use std::vec;
// To conserve gas, efficient serialization is achieved through Borsh (http://borsh.io/)
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{env, log, AccountId, PanicOnDefault};
use serde::Serialize;
// Crates
use crate::item::Item;
use crate::item::ItemInfo;

#[derive(BorshSerialize, BorshDeserialize, Clone, PanicOnDefault, Serialize)]
pub struct Link3 {
    title: String,
    description: String,
    image_uri: Option<String>,
    owner_account_id: AccountId,
    links: Vec<Item>,
    is_published: bool,
}

// Core Logic/Implementation
impl Link3 {
    // Instantiate a new Item
    pub fn new(
        title: String,
        description: String,
        image_uri: Option<String>,
        is_published: Option<bool>,
    ) -> Self {
        // if env::state_exists() {
        //     env::panic(b"The contract is already initialized");
        // }

        log!(
            "Creating new Link3 contract with account id: {} and deposite of: {}",
            env::current_account_id(),
            env::attached_deposit()
        );

        Link3 {
            title,
            description,
            image_uri,
            owner_account_id: env::signer_account_id(),
            links: vec![],
            is_published: is_published.unwrap_or(true),
        }
    }

    /****************
     * VIEW METHODS *
     ****************/
    pub fn info(&self) -> (String, String, String, Option<String>) {
        if !self.is_published {
            env::panic(b"This contract is not published");
        }

        (
            self.title.clone(),
            self.description.clone(),
            self.owner_account_id.clone(),
            self.image_uri.clone(),
        )
    }

    pub fn list(&self) -> Vec<ItemInfo> {
        if !self.is_published {
            env::panic(b"This contract is not published");
        }

        let links_ref = &self.links;
        links_ref
            .iter()
            .filter(|item| item.is_published())
            .map(|item| item.read())
            .collect()
    }

    /****************
     * CALL METHODS *
     ****************/
    pub fn update_published_status(&mut self, is_published: bool) {
        if env::signer_account_id() != self.owner_account_id {
            env::panic(b"Only the owner can change published state");
        }

        if self.is_published != is_published {
            self.is_published = is_published;
        }
    }

    pub fn list_all(&self) -> Vec<Item> {
        if env::signer_account_id() != self.owner_account_id {
            env::panic(b"Only the owner can view all items.");
        }
        self.links.clone()
    }

    pub fn create_link(
        &mut self,
        uri: String,
        title: String,
        description: String,
        image_uri: Option<String>,
        is_published: bool,
    ) -> &Item {
        if env::signer_account_id() != self.owner_account_id {
            env::panic(b"Only the owner can create a link");
        }

        let id = u64::try_from(self.links.len() + 1).unwrap();
        let item = Item::new(id, uri, title, description, image_uri, is_published);

        self.links.push(item);
        // Return created item
        &self.links[self.links.len() - 1]
    }
}

/*********
 * TESTS *
 *********/

// use the attribute below for unit tests
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::{MockedBlockchain, Balance};
    use near_sdk::{testing_env, VMContext};

    fn get_context(input: Vec<u8>, is_view: bool, deposit: Option<Balance>) -> VMContext {
        VMContext {
            current_account_id: "alice.testnet".to_string(),
            signer_account_id: "alice.testnet".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "alice.testnet".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: deposit.unwrap_or(0),
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    fn get_alternative_context(
        input: Vec<u8>,
        is_view: bool,
        deposit: Option<Balance>,
    ) -> VMContext {
        VMContext {
            current_account_id: "alice.testnet".to_string(),
            signer_account_id: "robert.testnet".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "robert.testnet".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: deposit.unwrap_or(0),
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    fn generate_contract(is_published: Option<bool>) -> Link3 {
        Link3::new(
            "This is an awesome title".to_string(),
            "This is the perfect description".to_string(),
            Some("image_uri".to_string()),
            is_published,
        )
    }

    #[test]
    #[should_panic]
    fn create_with_default_panics() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);
        // When
        Link3::default();
        // Then
        // - Panics
    }

    // #[test]
    // #[should_panic(
    //     expected = "A deposit of at least 1 token is required to create a Link3 contract"
    // )]
    // fn init_without_deposit_panics() {
    //     // Given
    //     let context = get_context(vec![], false, None);
    //     testing_env!(context);
    //     // When
    //     Link3::new(
    //         "This is an awesome title".to_string(),
    //         "This is the perfect description".to_string(),
    //         Some("image_uri".to_string()),
    //         None,
    //     );
    //     // Then
    //     // - Should panic
    // }

    #[test]
    fn init_creates_with_correct_state() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);
        // When
        let contract = generate_contract(None);
        // Then
        assert_eq!(contract.title, "This is an awesome title".to_string());
        assert_eq!(
            contract.description,
            "This is the perfect description".to_string()
        );
        assert_eq!(contract.image_uri, Some("image_uri".to_string()));
        assert_eq!(contract.is_published, true);
    }

    #[test]
    fn init_with_published_false_is_not_published() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);
        // When
        let contract = generate_contract(Some(false));
        // Then
        assert_eq!(contract.is_published, false);
    }

    #[test]
    fn get_info_returns_correct_state() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);
        let contract = generate_contract(None);
        // When
        let info = contract.info();
        // Then
        assert_eq!(info.0, contract.title);
        assert_eq!(info.1, contract.description);
        assert_eq!(info.2, contract.owner_account_id);
        assert_eq!(info.3, contract.image_uri);
    }

    #[test]
    #[should_panic(expected = "This contract is not published")]
    fn get_info_panics_if_contract_is_not_published() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);
        // Create contract that is not published
        let contract = generate_contract(Some(false));
        // When
        contract.info();
        // Then
        // - Should panic
    }

    #[test]
    fn update_published_status_updates_state() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);
        let initial_is_published_value = false;
        let mut contract = generate_contract(Some(initial_is_published_value));

        // When
        contract.update_published_status(!initial_is_published_value);

        // Then
        assert_eq!(
            contract.is_published, !initial_is_published_value,
            "Published status should've been updated"
        );
    }

    #[test]
    #[should_panic(expected = "Only the owner can change published state")]
    fn update_published_status_with_wrong_owner_panics() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);

        let initial_is_published_value = false;
        let mut contract = generate_contract(Some(initial_is_published_value));

        // When
        let alterinative_context = get_alternative_context(vec![], false, None);
        testing_env!(alterinative_context);
        contract.update_published_status(!initial_is_published_value);

        // Then
        // - Should panic
    }

    #[test]
    fn create_link_adds_link() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);
        let mut contract = generate_contract(Some(true));

        // When
        contract.create_link(
            "some_uri".to_string(),
            "some_title".to_string(),
            "some_description".to_string(),
            Some("image".to_string()),
            true,
        );

        // Then
        assert!(contract.list().len() == 1, "Should have at one item");
    }

    #[test]
    #[should_panic(expected = "Only the owner can create a link")]
    fn create_link_with_wrong_owner_panics() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);
        let mut contract = generate_contract(Some(true));

        // When
        let alterinative_context = get_alternative_context(vec![], false, None);
        testing_env!(alterinative_context);
        contract.create_link(
            "some_uri".to_string(),
            "some_title".to_string(),
            "some_description".to_string(),
            Some("image".to_string()),
            true,
        );
        // Then
        // - Should panic
    }

    #[test]
    fn list_only_returns_published_links() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);
        let mut contract = generate_contract(Some(true));

        // When
        contract.create_link(
            "some_uri".to_string(),
            "some_title".to_string(),
            "some_description".to_string(),
            Some("image".to_string()),
            true,
        );

        contract.create_link(
            "another_some_uri".to_string(),
            "another_some_title".to_string(),
            "another_some_description".to_string(),
            Some("another_image".to_string()),
            true,
        );

        contract.create_link(
            "pvt_some_uri".to_string(),
            "pvt_some_title".to_string(),
            "pvt_some_description".to_string(),
            Some("pvt_another_image".to_string()),
            false,
        );

        let result = contract.list();

        // Then
        assert_eq!(result.len(), 2, "Should've returned 2 elements");
    }

    #[test]
    #[should_panic(expected = "This contract is not published")]
    fn list_panics_if_link3_is_not_published() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);
        let contract = generate_contract(Some(false));
        // When
        contract.list();
        // Then
        // - Should panic
    }

    #[test]
    fn list_all_should_return_all_items() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);
        let mut contract = generate_contract(Some(false));

        // When
        contract.create_link(
            "some_uri".to_string(),
            "some_title".to_string(),
            "some_description".to_string(),
            Some("image".to_string()),
            true,
        );

        contract.create_link(
            "another_some_uri".to_string(),
            "another_some_title".to_string(),
            "another_some_description".to_string(),
            Some("another_image".to_string()),
            true,
        );

        contract.create_link(
            "pvt_some_uri".to_string(),
            "pvt_some_title".to_string(),
            "pvt_some_description".to_string(),
            Some("pvt_another_image".to_string()),
            false,
        );

        let result = contract.list_all();

        // Then
        assert_eq!(result.len(), 3, "Should've returned all items.");
    }

    #[test]
    #[should_panic(expected = "Only the owner can view all items")]
    fn list_all_with_wrong_owner_panics() {
        // Given
        let context = get_context(vec![], false, Some(1));
        testing_env!(context);
        let mut contract = generate_contract(Some(false));

        contract.create_link(
            "some_uri".to_string(),
            "some_title".to_string(),
            "some_description".to_string(),
            Some("image".to_string()),
            true,
        );

        contract.create_link(
            "another_some_uri".to_string(),
            "another_some_title".to_string(),
            "another_some_description".to_string(),
            Some("another_image".to_string()),
            true,
        );

        contract.create_link(
            "pvt_some_uri".to_string(),
            "pvt_some_title".to_string(),
            "pvt_some_description".to_string(),
            Some("pvt_another_image".to_string()),
            false,
        );

        // When
        let alt_context = get_alternative_context(vec![], false, Some(1));
        testing_env!(alt_context);
        contract.list_all();
        // Then
        // - Should panic
    }
}

'''
'''--- contracts/src/utils/counter.rs ---
//! This contract implements simple counter backed by storage on blockchain.
//!
//! The contract provides methods to [increment] / [decrement] counter and
//! [get it's current value][get_num] or [reset].
//!
//! [increment]: struct.Counter.html#method.increment
//! [decrement]: struct.Counter.html#method.decrement
//! [get_num]: struct.Counter.html#method.get_num
//! [reset]: struct.Counter.html#method.reset

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{env, near_bindgen};

// add the following attributes to prepare your code for serialization and invocation on the blockchain
// More built-in Rust attributes here: https://doc.rust-lang.org/reference/attributes.html#built-in-attributes-index
#[near_bindgen]
#[derive(Default, BorshDeserialize, BorshSerialize)]
pub struct Counter {
    // See more data types at https://doc.rust-lang.org/book/ch03-02-data-types.html
    val: i8, // i8 is signed. unsigned integers are also available: u8, u16, u32, u64, u128
}

#[near_bindgen]
impl Counter {
    /// Returns 8-bit signed integer of the counter value.
    ///
    /// This must match the type from our struct's 'val' defined above.
    ///
    /// Note, the parameter is `&self` (without being mutable) meaning it doesn't modify state.
    /// In the frontend (/src/main.js) this is added to the "viewMethods" array
    /// using near-cli we can call this by:
    ///
    /// ```bash
    /// near view counter.YOU.testnet get_num
    /// ```
    pub fn get_num(&self) -> i8 {
        return self.val;
    }

    /// Increment the counter.
    ///
    /// Note, the parameter is "&mut self" as this function modifies state.
    /// In the frontend (/src/main.js) this is added to the "changeMethods" array
    /// using near-cli we can call this by:
    ///
    /// ```bash
    /// near call counter.YOU.testnet increment --accountId donation.YOU.testnet
    /// ```
    pub fn increment(&mut self) {
        // note: adding one like this is an easy way to accidentally overflow
        // real smart contracts will want to have safety checks
        // e.g. self.val = i8::wrapping_add(self.val, 1);
        // https://doc.rust-lang.org/std/primitive.i8.html#method.wrapping_add
        self.val += 1;
        let log_message = format!("Increased number to {}", self.val);
        env::log(log_message.as_bytes());
        after_counter_change();
    }

    /// Decrement (subtract from) the counter.
    ///
    /// In (/src/main.js) this is also added to the "changeMethods" array
    /// using near-cli we can call this by:
    ///
    /// ```bash
    /// near call counter.YOU.testnet decrement --accountId donation.YOU.testnet
    /// ```
    pub fn decrement(&mut self) {
        // note: subtracting one like this is an easy way to accidentally overflow
        // real smart contracts will want to have safety checks
        // e.g. self.val = i8::wrapping_sub(self.val, 1);
        // https://doc.rust-lang.org/std/primitive.i8.html#method.wrapping_sub
        self.val -= 1;
        let log_message = format!("Decreased number to {}", self.val);
        env::log(log_message.as_bytes());
        after_counter_change();
    }

    /// Reset to zero.
    pub fn reset(&mut self) {
        self.val = 0;
        // Another way to log is to cast a string into bytes, hence "b" below:
        env::log(b"Reset counter to zero");
    }
}

// unlike the struct's functions above, this function cannot use attributes #[derive(…)] or #[near_bindgen]
// any attempts will throw helpful warnings upon 'cargo build'
// while this function cannot be invoked directly on the blockchain, it can be called from an invoked function
fn after_counter_change() {
    // show helpful warning that i8 (8-bit signed integer) will overflow above 127 or below -128
    env::log("Make sure you don't overflow, my friend.".as_bytes());
}

/*
 * the rest of this file sets up unit tests
 * to run these, the command will be:
 * cargo test --package rust-counter-tutorial -- --nocapture
 * Note: 'rust-counter-tutorial' comes from cargo.toml's 'name' key
 */

// use the attribute below for unit tests
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    // part of writing unit tests is setting up a mock context
    // in this example, this is only needed for env::log in the contract
    // this is also a useful list to peek at when wondering what's available in env::*
    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice.testnet".to_string(),
            signer_account_id: "robert.testnet".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "jane.testnet".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    // mark individual unit tests with #[test] for them to be registered and fired
    #[test]
    fn increment() {
        // set up the mock context into the testing environment
        let context = get_context(vec![], false);
        testing_env!(context);
        // instantiate a contract variable with the counter at zero
        let mut contract = Counter { val: 0 };
        contract.increment();
        println!("Value after increment: {}", contract.get_num());
        // confirm that we received 1 when calling get_num
        assert_eq!(1, contract.get_num());
    }

    #[test]
    fn decrement() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Counter { val: 0 };
        contract.decrement();
        println!("Value after decrement: {}", contract.get_num());
        // confirm that we received -1 when calling get_num
        assert_eq!(-1, contract.get_num());
    }

    #[test]
    fn increment_and_reset() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Counter { val: 0 };
        contract.increment();
        contract.reset();
        println!("Value after reset: {}", contract.get_num());
        // confirm that we received -1 when calling get_num
        assert_eq!(0, contract.get_num());
    }
}
'''
'''--- contracts/src/utils/keyvalue.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::UnorderedMap;
use near_sdk::{env, near_bindgen};

near_sdk::setup_alloc!();

 // To deploy this contract run:
 // env 'RUSTFLAGS=-C link-arg=-s'
 // cargo build --target wasm32-unknown-unknown --release
// Basic Contract instructions: https://docs.near.org/docs/develop/contracts/rust/intro

 // 1. Main Struct
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct KeyValue {
    pairs: UnorderedMap<String, String>,
}

// 2. Default Implementation
impl Default for KeyValue {
    fn default() -> Self {
        Self {
            pairs: UnorderedMap::new(b"r".to_vec()),
        }
    }
}

// 3. Core Logic
#[near_bindgen]
impl KeyValue {
    pub fn create_update(&mut self, k: String, v: String) {
        env::log(b"created or updated");
        self.pairs.insert(&k, &v);
    }

    pub fn read(&self, k: String) -> Option<String> {
        env::log(b"read");
        return self.pairs.get(&k);
    }

    pub fn delete(&mut self, k: String) {
        env::log(b"delete");
        self.pairs.remove(&k);
    
    }
}

// 4. Tests
#[cfg(not(target_arch = "wasm32"))]
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice_near".to_string(),
            signer_account_id: "bob_near".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "carol_near".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 0,
        }
    }

    // Test 1
    #[test]
    fn create_read_pair() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = KeyValue::default();
        contract.create_update("first_key".to_string(), "hello".to_string());
        assert_eq!(
            "hello".to_string(),
            contract.read("first_key".to_string()).unwrap()
        );
    }

    // Test 2
    #[test]
    fn read_nonexistent_pair() {
        let context = get_context(vec![], true);
        testing_env!(context);
        let contract = KeyValue::default();
        assert_eq!(None, contract.read("first_key".to_string()));
    }
}

'''
'''--- contracts/src/utils/simple_default.rs ---
// To conserve gas, efficient serialization is achieved through Borsh (http://borsh.io/)
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::UnorderedMap;
use near_sdk::{env, log, near_bindgen, AccountId, Balance, PanicOnDefault};

near_sdk::setup_alloc!();

mod item;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Link3 {
  pairs: UnorderedMap<String, String>, // pairs: UnorderedMap<AccountID, Item>
}

impl Default for Link3 {
  fn default() -> Self {
    log!("Deploying a Link3 contract by {}", env::current_account_id());

    Self {
      pairs: UnorderedMap::new(b"r".to_vec()),
    }
  }
}

'''